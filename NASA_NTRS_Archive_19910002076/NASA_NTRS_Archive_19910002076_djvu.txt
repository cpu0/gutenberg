

SOFTWARE ENGINEERING LABORATORY 




SEL- 88-005 



PROCEEDINGS 
OF THE 

FIRST NASA ADA USERS’ SYMPOSIUM 


DECEMBER 1988 


( NASA- TM- 10294 1 ) PROCtFOlNGS OF the FIRST M91-11389 

NASA Ada USFRS • SYMPOSIUM (NASA) 227 p 


CSCL 09° 

Unci as 

G3/ol 0 ? 70946 



National Aeronautics and 
Space Administration 


Goddard Space Flight Center 

Greenbelt, Maryland 20771 



PROCEEDINGS 
OF THE 

FIRST NASA ADA USERS' SYMPOSIUM 


Organized by: 

Software Engineering Laboratory 
GSFC 

Sponsored by: 

Goddard Ada Users' Group 


December 1, 1988 


GODDARD SPACE FLIGHT CENTER 

Greenbelt, Maryland 







FOREWORD 


The Software Engineering Laboratory (SEL) is an organization 
sponsored by the National Aeronautics and Space Administration 
Goddard Space Flight Center (NASA/GSFC) and created for the 
purpose of investigating the effectiveness of software 
engineering technologies when applied to the development of 
applications software. The SEL was created in 1977 and has three 
primary organizational members: 

NASA/GSFC (Systems Development Branch) 

The University of Maryland (Computer Sciences Department) 

The Computer Sciences Corporation (Flight Systems Operation) 

The goals of the SEL are (1) to understand the software 
development process in the GSFC environment; (2) to measure the 
effect of various methodologies, tools, and models in the 
process; and (3) to identify and then to apply successful 
development practices. The activities, findings, and 
recommendations of the SEL are recorded in the Software 
Engineering Laboratory Series, a continuing series of reports 
that includes this document. 

Single copies of this document can be obtained from: 

NASA/Goddard Space Flight Center 
Systems Development Branch 
Code 552 

Greenbelt, Maryland 20771 




TABLE OF CONTENTS 
OF THE 

FIRST NASA ADA USERS’ SYMPOSIUM 






TABLE OF CONTENTS 


Introduction 

Session I : Experiences, ('hair: I d Seidewit/ 

Experiences with Ada in the Flight Dynamics Division 
Ed Seidewit/. NASA Goddard Space Flight Center 

Applications of Ada to MSEC Projects 

William Ilowle. NASA Marshall Space 1 light Center 

Real-time Weather Processor ( RWP) Project: Ada Experience at PDR 
Robert Loesh and Pat Molko. Jet Propulsion Laboratory 

Session 2: Applications, Chair: David Littmann 

Explorer Platform Ada Flight Software 

Barbara Scott. NASA Goddard Space Flight Center 

The Evolution of Ada Software to Support the Space Station Power Management and Distribution Subsystem 
Kathy Schubert, NASA Lewis Research Center 

Using Ada: An Early Space Station Freedom Experience 

Brandon Rigney and Cora Carmody. Planning Research Corp. 

Ada Hosts. Workstations and Cross-compilers: Evaluation Report 
David Badal, Lockheed Missiles and Space Co. 

Session 3: Directions and Implications, Chair: Frank McCarty 

Implications of Ada for Space Station Freedom 

Robert Nelson. NASA Space Station Freedom Program Office 

Software Engineering and Ada Training at NASA/JSC: Myths. Lessons Learned and Directions 
Olcnn Freedman. University of Houston at Clear Lake 

The Jet Propulsion Laboratory: Transition to Ada Software Development 
Cary Walker, Jet Propulsion Laboratory 

Experiences with Ada at NASA/CSFC: Implications and Directions 
I rank McCarry, NASA Goddard Space Flight Center 

Appendix A - Open Discussion, Moderator: Ed Seidewit/ 

Panelists: 

Gary Walker, Jet Propulsion Laboratory 
Michael Holloway. NASA Langley Research Center 
William Howie. NASA Marshall Space Flight Center 
f rank McCarry. NASA Goddard Space Flight Center 
Robert Nelson. NASA Space Station Program Office 
Katin Rogers. MITRE (for NASA Johnson Space ('enter) 


Appendix B - Attendees of the First NASA Ada Users' Symposium 
Appendix C - Standard Bibliography of SEL Literature 


ORIGINAL PAGE IS 
OF POOR QUALITY 






INTRODUCTION 

OF 

FIRST NASA ADA USERS’ SYMPOSIUM 


by 

E. Seidewitz 

NASA/Goddard Space Flight Center 






INTRODUCTION 


The Add programming language was created as the common language for the Department of Defense (DOD). 
However, there are a growing number of organizations outside the DOD. both government and commercial, 
who are choosing to use Ada tor their large system development efforts. NASA is one such organization. 
Mandated lor the space station. Ada has also been adopted or considered for use by several other large NASA 
programs. 

Ada has the potential to be a part of the most significant change in software engineering technology within 
NASA in the last twenty years. Thus, it is particularly important that all NASA centers be aware of Ada ex- 
perience and plans at other centers. To promote such an awareness, the First NASA Ada Users' Symposium 
provided a lorum tor the exchange of ideas, experiences and plans on the use of Ada within NASA. 


The symposium attracted a diverse, enthusiastic audience. The program covered Ada activity across NASA, 
with presenters representing five of the nine major NASA centers and the Space Station Freedom Program 
Office. Projects discussed included: 

Space Station Freedom Program Office: the implications of Ada on training, reuse, management and 
the software support environments 

• Johnson Space Center (JSC ): early experience with the use of Ada, software engineering and Ada 

training and the evaluation of Ada compilers; 

• Marshall Space Might Center (MSFC): university research with Ada and the application of Ada to 

Space Station Freedom, the Orbital Maneuvering Vehicle, the Aero-Assist Flight Fxperiment and the 
Secure Shuttle Data System; 

• Lewis Research Center (LcRC): the evolution of Ada software to support the Space Station Power 
Management and Distribution System; 

• Jet Propulsion Laboratory (JPL): the creation ot a centralized Ada development laboratory and cur- 
rent applications ot Ada including the Real-time Weather Processor for the FAA; — - 

• Cioddard Space Flight Center (GSFC): experiences with Ada in the I light Dynamics Division and the 
Lxtremc Ultraviolet Fxplorer (I.UVI ) project and the implications ol CiSFC experience for Ada use in 
NASA. 


Despite the diversity of the presentations, several common themes emerged from the program: 

• Methodology; NASA experience in general indicates that the effective use of Ada requires modern 

software engineering methodologies: There is a growing trend towards the acceptance of object- 

oriented approaches as the basis tor the most appropriate methodologies for Ada development. 

• Lrainingi Mt is the soltware engineering principles and methods that surround Ada, rather than Ada 
itself, which requires the major training effort. This is evident in experience at LeRC, JPL and GSFC 
and is reinforced by the research of the University of Houston for JSC. Further, both GSFC and the 
University of Houston stress that this training must be focused to the needs of each organization and 
must include immediate hands-on involvement in real development efforts. 

• Reuse: Due to training and transition costs, the use of Ada may initially actually decrease produc- 

tivity. as was clearly found at GSFC However, at GSFC as well as in work done for JSC. there is a 
clear indication that the use ot Ada and associated methodologies can result in an immediate signifi- 
cant increase in the reusability ot software. Ol course, over time this will result in a major increase in 
elective productivity, reliability and maintainability, since less and less new code will need to be cre- 
ated for each project. 






• Real-time:- Work. at LcRC, ILL and ( » S I C shows that it is possible to use Ada for real-time applica- 
tions. However, the LcRC experience especially shows how careful one must be in choosing a com- 
piler. At C.SI C . the I L \ I project found it necessary to modify the vendor-supplied run-time system 
to handle a specific embedded hardware configuration. 

Overall, the symposium reflected a high level of enthusiasm for the use of Ada in NASA. Ada is being effec- 
tively applied to (Tight and ground-support tasks, both inside and outside the space station project. However, 
there are also some cautionary notes: the transition to Ada may take longer and be more difficult than origi- 
nally anticipated: NASA needs to focus more clearly , effectively and intensely on software engineering training 
efforts: and NASA must press compiler vendors to provide more high-quality Ada compilers with the features 
needed for real-time, embedded applications. 

By providing a forum for discussing Ada benefits, lessons-lcarned and problems, the First NASA Ada Users' 
Symposium was highly successful in its aim of fostering communication between the NASA community of 
Ada users. This community is still young and growing, but it is clear that Ada is “here to stay" in NASA. 
Right now wc are at the knee of the growth curve in the use of Ada. As we proceed upward on that curve it 
will be increasingly important to maintain and strengthen the sharing of experience. This symposium will have 
been truly successful if it is only a beginning to such a process. 

In conclusion. 1 would like to greatly thank Lisa Kelly, Frank McCiarry and the Software Fngineering Labora- 
tory staff. Without their help it would have been totally impossible to organize this symposium in the short 
time we did. I would also like to thank all the presenters who, on quite short notice, put together an excellent 
overview' of Ada activities in NASA. 


I d Seidcwit/ 

Head, (ioddard Ada Users' ( iron p 
(loddard Space Might Center 





Session 1: EXPERIENCES 


1 . Ed Seidewitz, NASA/GSFC 

2. William Howie, NASA/MSFC 

3. Robert Loesh and Pat Molko, JPL 






sponsored by 

THE GODDARD ADA USERS' GROUP 










FLIGHT DYNAMICS SOFTWARE CHARACTERISTICS 




STUDY OF Ada AS A “METHODOLOGY 


O 

o 

_l 

CO 


<r < cd 

O DC x 
\ — tz 
< cr z 

3 OO 

CO g 8 

O P ' 

^ LO 
^ CM 


>- 

Q 

o 

DC 

o 


o 

o 

CD 

00 


> 

I 

o 

00 LU 
N- _l 
P 0l 

- o 

w LU 
^0- 

> 


> 


h- oo 


LU 


o 


Qg§ 

< \±. LL 


H 
CC 

y tn > < £ 


^dzP 

CO Q LU CO LU 

Q_ • • • • • 



03 

"D 

< 


LU 

3 

_J 

< 

> 

LU 
CD Z 
LU ^ 
> 

I — 

o 

LU Lu 


LL DC cr 
O O LU 

w 1 

CO CO CC 
LU LU O 
Z I ^ 

LU O LU 
> < CC 

O 


cr n 3 


O DC CO 


Ql 

CL 

< 


< 

LU 


CC 

LU 


“3 

CD 

o 


LU 
LL 
LL 

LU Q_ Q_ 

woo 

CO _J _l 
LU LU LU 
CO > > 
CO LU LU 
< Q Q 


03 

~D 

< 

Q 

< 

Z 

< 

DC 

I- 

oc 

o 

f— ^ 

DC < 
O LU 


LU 


LU 

CL 

O 

LU 

£i 


co 

~o 

< 

DC 

O 

LL 

CD 


< 

DC 


LU W 


O < co 

SF x 

gl <N LU 


5 



CLOSELY MONITOR PROCESS AND PRODUCT 
DEVELOP MEASURES AND COMPARE 2 PRODUCTS 


Ada PROJECTS IN FLIGHT DYNAMICS DIVISION 





Ada PROJECTS STUDIED 


LI I 

LL LU 
< > N- 
t— LLl 
CO _J 


°° CO LU 

2 ? 3 h- 

■ , i 


O (— 
CO < 


r^. 


U - 

1 — 

( — 

1— 

CO 

CO 

CO 

LU 

LU 

LU 

1- 

t— 

h- 




LU 

LU 

LU 

I - 

1- 


CO 

CO 

co 

> 

> 

> 

CO 

CO 

CO 

6 

6 

6 




o 

CO 

CO 

C\J 

1— 

T— 


o 


o 

o 

o 

o 

o 

o 

o 

o 

O 

o 

o 

o 

o 

o 

_l 

CO 

00 

T 

o 

r- 

o 

CO 

h- 

Cxi 

"d- 

00 

CO 

LO 

in 

T— 

T~ 

r-- 

LO 

h- 


o 

h- 


z 


z 


> 

z 

o 

UJ 

g 

DC 

O 

1— 

o 

o 

DC 

O 

1— 

O 

o 

DC 

o 

1— 

cc 
1 — 
UU 

DC 
| 

o 

3 

1— 

I 

5 

1— 

I 

5 

1 1 1 

O 

< 

Z) 

o 


o 

3 

LU 
1 

LU 

i 

DC 


_l 


_J 1 


LU 

J 

LU 

Cl 

CO 

LL 

CO 

u_^ 

CO 

H 


O 

LU O 
> LU 

tr o 

73 DC 
O Z> 
LU o 


1 





o 

LU 


>- 

< 


“3 


Q 

Q 

CO 

o 

CO 

O 

< 

LU 

DC 


CC 

o 

o 

CL 

LU 

O 

o 

O 


*SLOC - TOTAL LINES (CARRIAGE RETURNS) INCLUDES COMMENTS -'BLANKS/REUSED 
ALL PROJECTS DEVELOPED ON DEC VAX 1 1 780 OR VAX 8600 


DOCUMENTATION OF ADA EXPERIENCE 


LU 

CL 

o 

_l 

LU 

> 

LU 

Q 

LU 

X 

< 


I — 

LL 

O 

CO 

Qg 

LU O 

o° 

O co 

|-1 LU 

qQ 

UJ> 

o9 


< 

DC 

LU 

LU 

0 


O 

O 

o 

X 
I — 
LU 


LU 

g 

3 

0 

LU 

_l 

£ 

CO 

< 

o 

< 


CO 

O 

H 

< 

Q 



O 

o 

LU 


X 

Q 





< 

X 

h— 


< 

Q 

< 




CO 

o 

H 

< 

O 


X 

1 

CO 

H 

Q 

X 

< 

CO 

CO 

LU 

o 

o 

x 

x 


CO 

LU 

Q 

< 

Q 

< 

LU 

X 

h- 

0 

CO 

CO 

LU 

CO 

CO 

< 




0 


I — 
CO 
LU 
H 

H 



0 

Q 

O 

O 

0 


0 


I — 
CO 
LU 
I- 


LU 

H 

CO 

> 

CO 

0 



X 

3 

Q 

Q 

LU 


X 

< 

LU 


CO 

X 

O 

CO 

CO 

LU 


CO 


o 

CO 

CO 

LU 


EVOLUTION OF ADA TECHNOLOGY FOR FLIGHT DYNAMICS 



o 


< 

oc 

H 

< 

Q 

< 

0 

Z 

OC 

3 

Q 

O 

LU 

Z 

OC 

< 

LU 

CO 

z 

o 

(0 

CO 

LU 


O 


< 

DC 

H 

LU 

o 

< 

Z> 

o 


< 

Q 

< 

□c 
O 

LL 

CO 

< 

LU 
DC 
< 

LU 3 


Q_ co 




Q_ oo 
>> O U) ' 
- -C r > 


0 ) 


o 


.C/) 


oo 

oc-. n ,.= ^ 

3 « c-^ 5 

>- Q. oJ CD JQ 
LilCQOh" 
^ , , . . 


LU 

Z 

o 

DC 

> 

LU 

LU 

=C 

I— 

> 

DO 

Z 

LU 

> 

DC 

Q 

LU 

DO 

I — 
CO 
ZD 

o 


< 

DC 


O) o 
.£ cd 

E o 

' 2 dI 

•“ o 
cd c 
> c 

g’s 

0 ) 1 - 

■E< 

3 r _i 

Olu 

d| 

CO - 

-o-S 
5 o 
.> o 

CD CD 

o „ 

CD (/) 

DC o 
c 0 ) 

E "D 

C 0 > 
<D ^ 
I— CO 

g< 

o 


F T3 


>% 

U) 

o 

o 

"D 

O 

_CI 

"CD 

D)^ 

— .E 

C Jt= 

'co ° 
iZ CD 

h- Q- 
C/) 


w 

=J _ 0 ) 


o 

o 

LL 


Q_ 

E 

co 

Olu 

_ co 

■D g- 
o) 9- 
> < 


CD 

O 

CD 

DC 


CD 

CO 

3 

o 

o 


co 

§ s 

CD i3 

I- c 

CD CO 
CO 


>- 

_l 

LU 

H 

< 

Q 

LU 


DC 

O 


LU 

o 

ZL LU 
^DC 

|S 

Z LU 


“0 

O 

DC 

CL 


Z) 

“D 

z 
O 
o 

z< 
— z> 

LU I — 
DQO 

h- < 
CO> 
ZD DO 

z :5 

is 

aid 


LU 

z 

< 

0 


DC 

< 

LU 

_l 

CO 

1 ° 
< z 

pEz 

_I cc 

? < 

H 


30 

oz 

Ll-O 

LL ^ 

°o 

DC _l 

OO 

“2 0 

ig 

LU 1— 

3 =W 



LESSONS LEARNED DURING ADA DESIGN 


CD 

Q 

X 

< 

5 

o 

I- 

Q 

LLi 

CO 

< 

CD 

LLI 

CD 

>CO 

is 

z o 

pO 

§£ 
y □_ 

LL< 

02 

t 1 CD 

Is 

CD> 
LLI LLI 
XX 
I— X 


cr 

o 

CL 


CO 

>“ 

0 

O 

_i 

O 

Q 

o 

X 
I — 
LLI 


> 

_l 

X 

< 

LJU 


LU 

CO 

O 

X 

o 

LLI 

CD 

Q 

_J 

3 

o 

x 

CO 

>” 

0 

O 

_i 

O 

Q 

o 


LLI 

LLI 

X 

H 


Q 
X 
< 
I — 
CO 
CL 
LLI 
Cl 

3 

Q 

3 

3 

o 

CD 

CO 

CL 

LJU 

0 

< 


< 

CD 

X 

LU 

X 

O 


0 

o 


o 

o 

uj O 

gs 

°E 

CD 1 “ 


CD 

LU 

X 

3 

H 

< 

LU 

X 

CD 

< 

Q 

< 

O 

3 

X 

X 

LU 


O 

CD 

X 

0 

o 

3 

o 

Q 

o 


LU 

LU 


>- 

0 

o 

3 

o 

Q 

o 

I — 
LU 


0 

CD 

LU 

Q 

Q 

LU 

h- 

X 

UJ 

X 

9_i 

LU CD 
^CD 
99 uj 
O o 

30 
<3 
X CD 
LU x 

Pm 

LU O 

t < 


0 

CD 

LU 

Q 

X 

O 


3 CD 


OO 

CD O 
LU Cl 

Q Q 
LU 2 

D^< 

xo 

CLH 

OQ 

03 
= < 
<> 


CD 

3 

o 

> 

LU 

X 

X 

O 

X 

o 

X 

< 

o 

CD 

Q 

X 

H 


Q 

LU 


LU 
CD 

>! 

X ^0 

LU < 

h- 

CDllJ < 

o 

o 

CD 
CD 
< 


o 

< 

o 

LU 


CD, 

O^E 

Ofi 

— o 

LU 3 
X LU 
LU > 
XLU 
h-O 


LU 

Q 

O 

LU 

3 

o 

>“ 

o 

LU 

X 


< 

X 

o 

H 

Q 

< 

X 

I- 

X 

X 


Q 

in 

Q 

X 

X 

CD 

X 

O 

X 

< 

X 

o 

X 

O 

CD 


Ada FEATURES 





NASA/GSFC NASA/MSFC 

December 1 ,1988 


TOPICS 



AUBURN UNIVERSITY 
DEPARTMENT OF COMPUTER SCIENCE AND 

ENGINEERING 


NASA PROJECTS 


QUEST 

- Query Utility Environment for Software Testing 
Dr. David B. Brown, Principal Investigator 


GRASP 

- Graphical Representation of Algorithms, Structures 
and Processes 

Dr. James C. Cross, Principal Investigator 



Query 

Utility 

Environment for GENERAL GOAL: 

Software 

Testing 


To provide an environment in which more tests and 
more effective tests can be performed in order to increase 
the reliability of Ada code. 


Query 

Utility 

Environment for OBJECTIVES: 

Software 

Testing 

1. Intelligent Automatic Test Case Generation 

2. Controlled Test Case Execution 

3. Coverage Analysis 

- to measure module reliability 


QUEST/ADA PROJECT SCOPE 


REQUIREMENTS 

ANALYSIS 















GRA SP/A da 


System Dictionary 











GRASP OVERVIEW 
GENERAL GOAL: 

To increase designer and programmer productivity 
through the use of graphics-based tools. 

OBJECTIVES: • 

To produce immediate graphical aids for development 
and maintenance. 

. CSD - Control Structure Diagram 5 - 

. Structure Chart 
. Data Flow Diagram 


To understand the process of graphical representation 
generation. ^ 

To reverse the process to generate code from the 
graphical representation. 




end CONTROLLER; 





Justification 


• Provides an understanding of automatic code gen- 
eration 


• Ada is well-defined - a good base from which to 
work upwards 

• Many designers will work in an Ada PDL 

• GR's can be provided at little cost 

• Reviews of requirements and design specifications 
are potentially better facilitated by use of GR's 

• 90 % of maintenance effort is attempting to 
understand existing code (Standish) 

• Generation of standardized GR's of Ada software 
will promote reuseability - an original objective for 
the adoption of Ada 



Software safety can be ensured to a large extent 
by software verification 


"A Comparison of Software Verification 
Technique" (NASA Goddard SE Lab series, 
April 1985) 


• Empirical study of code-reading, functional 
testing, and structural testing 


Found code-reading provided greatest error 
detection capability at lowest cost 






Ada and the OMV Project 





i 


i 


i 





The TLD Ada Compiler 


Q. 

°Ui 
Z 8 

IjO 
mj LU 

n 

n 

°o 

U. 2S 
OC U_ 
LU U_ 


LU 

O 

§2 

Ol- 

z < 
< oc 


O o 

I- LU 
5 LU 

Dg 

oo 

LUO 

OC ... 


O 

LU 

O m 

< H 

cc 5 

Ujo 

> LU 

< X 

iu m 

So 

8 H 

C/5 

CO 
O Z 

<o 


LU S 
OC LU 
3 h* 
h-CO 
< >- 
LU CO 

^LU 

os 

LU f= 
>2 


LU 

Oco 

<z 

z 

X 


LU 

OC LU 

o 

□ 2 

OC0 

< 

2 

2 

X 

2 = 

o 

o « 

< O 

xP 

1- 

LU T ” 

F- ^ 









Ada Features Undesirable in OMV Real-Time Applications 




Tasking Inefficiencies 








Future of Ada and the 




AERO-ASSIST FLIGHT EXPERIMENT (AFE) 



H 

O 

LU 

“D 

o 

X 

0. 

LU 

ffl 

D 

O 

X 


oo 

oo 

CD 


< 

I- 

z 

LU 

X 

X 

X 

U 


io 

T- 

X 

LU 

ffl 

2 

LU 

o 

LU 

Q 



ffl 

ZD 

CD 

O 

LU 

X 

< 

X 

C/) 


oo 

to 

in 


< 

X 

£ 


CD 

CO 

CD 


O 

08 

Z 


o 

Q 


< 

I- 

Z 

LU 


X 

LU 

a 

X 

LU 


Crt 

O 

X 

o 

CM 


>- 

X 

< 

X 

X 

ffl 

LU 

LL 


X 

O 


a 

LU 


a 

LU 


o 

ffl 

X 

X 

ffl 









AERO-ASSIST FLIGHT EXPERIMENT (AFE) 




SECURE SHUTTLE DATA SYSTEM (SSDS) 



■ m 

s 

< 

cc 

o 

o 

£E 

Q. 






CO i I 

■o 

< 


OCO 
LU O 
0. -J 
CO 

<o 
z ° 

oS 

▼— 

O — 
ZQC 
Z LU 


CCS 

3 ° 

p 

OCO) 

oc 

Sh 

<2 

LU O 
20 




SECURE SHUTTLE DATA SYSTEM (SSDS) 



I 



SECURE SHUTTLE DATA SYSTEM (SSDS) 







”2 

G£ 


a: 

a 


s-* 

ft- 

o 



* X 


1— 

U </) 

_ o 

<✓> 

< 

_Q LU 

s o 

— oo 

LU 

_J 

LU 

o 

* 

O 



o 

LU 

LU 

„ Q£L 

1— l 

< 

r> 

Q£ 

M I- 


LU 

U O' 

C£ 

CL 

M IU 

_ LU 

X 

a gq 


LU 

H O 

|— 


<QC 

< 

< 


__ LU 

o 


3 

< 




J 

II 

1 


1 December 1988 





^0- 









X r i 









t J> *-• 

< CL 



o 




r-> 



-1 

z 







< 

H 




• ^ 




z 

a 




cn 

s , , 



o 

o 




LU 



3 

w 

o 




Hi 



H 

</) 

Q 



h* 



Lx. 

< 

LU 

LU 



HI 

s™* 




tt 

u 



U 






Hi 



HI 



z 

Li. 

Li. 

< 



U 



o 

O 

O •• 

1— 



< 

I • 


w 


h 

LU 


CO 

Lx. 



H 

H 

h U 

Q 


H 


' — • 


< 

CL 

J LU 



CM 

U 



cl 

< 

x n 

Q 


1 

o 



H 

a. 

co o 

LU 


Q 

a 


C^« 

</> 


LU O' 

h 



h- 



M 

> 

ao_ 

Qi 


OO 



LU 

z 

-j 


< 


l 

o 


f— 

M 

_j 


h- 


o 

o 

— 

00 


< 

Cl 

LO 


o 


1— 

>- 

5 

X 

LOS 



o 

< 


00 

< 

1- 

<<-> 

O 



LU 




Z 

w 

< 


a 

CL 


Q. 

z 

LU 

I"n 

X 


LU 

< 


IS 

o 

> 

00 CL 






Q£ 

w 

LU 

cr> o 

o 


o 

CO 



H 

LU 

rH (/) 

z 

a. 

_J 

CM 


UJ 

< 

• - a 

<o 

M 

g 

Hi 


■ — 

zc 

M 

H < 

O' LU 

a 

< 

Ll 



> 

z a 

LU O 

o 


h- 

O 



<£ 

LU o 

CO o 

o 

U. 




oo 


z a. 

O CL 

<0 

O 

a 

tH 1 

— 

i-H 

-J 

tL ^ 

1-0- 

LU 


z 

CM 



< 

o 

(J 

oc 

LU 

< 



H- 

a 

u Z 

O CC 


N 


h- 


<c 

LU 

LU LU 

LU 

Lx. 

H 

LU 

< 

— 


a 

> H 

O x 

O 

(0 

O 




LU 

LU (/> 

LU |- 



< 




Ll. 

Q > 

H < 

LU 

<0 

X 

□ 




OO 

< LU 

z z 

LU 

o 

h 

— 



LU 

HS 

HI CJ 

z 

z 

</> 



• • 
cl 

a lu 

>- o 

h 

M J 

H w 
(0 

H 

H 

.5 

> 

</> 



o 

h- < 

Z ^ 

1- LU 





</> 

O CL 

m Cl 

^ Q 

ro 

o 

a. 



z 

o 

H <0 

o a 

1- 

O- z 




1 



CL 

M 

S LU 







00 

a.< 

So 

1 

i 

1 

H 


o o o o 



J 

o. 


EXTERNAL INTERFACES 



. q l 

} 2> * u 

< rr m 


o 

o 


c- 


00 

tn 


oo 


I- o 


< H 


Id 



03 

O Z 
1- O 


O 

3 M 


1- 

< H 

(/) 

z 

Id Z 

h 

Ld 

Q 2 

(/) 

H 

w O 

M 

CO 

> L. 

O 

> 

o z 

O 

00 

O' M 

J 


a 

o 

• •> 

O' 

a 

Id 

a id 

o 

CO 

Z X 

Id 

< 

< \- 

1- 

X 

< 

Id 

a 

< Ld 

K 3 

z 

zo 

< 

a 

oo* 

a i- 

z 

HO* 

z 

< 

OrH 

U Id 


Id 

Id Z 

(/> 

D 1- 


i h a 
H I- Ld 
< CL -I 
Id Hi -J 

3 ao 

Id U. H- 
> O Z 
H O 
Id Z <J 
U O 
Id M O 
h H 

< u. 

— I Z Ll 
-I H < 

M 2 a 
3ldh 

</> , 
o_ o c* 

3 H H 

oe: a < 


to 

a s 


u. 

_i 

id 

X 

</> 

I 

id 

X 

H 

I 

U. 

Li. 


Id 

H 

M 


O 

M 

H 


O 

M 

Li. 


< 

a 


o 

o 

oo 


CM 

r-^ 


Id O 
J 3 

o 

o 

>■ 

H< 


3 

CO 

< 


- s s St 



=c 

</> 

o 

Ld 

DLl. 

• *» 

os 

Q. 


Ld 

Id 

O 

Z O 

> 

i- 

-J 

H I- 

H 

3 

Id 


</> 

CL 

> 

> 3 

z 

s 

Id 

-J Id 

Ld 

o 

Q 

H- OS 

H 

u 


Z Id 

Z 



Id > 

a. h 

H 

H 

1 

os -j 

3 



3 Id 

N 



o a 

00 

o 



u 

'w' 

o 

o 

00 


CO 

CO 


V) 


o 

o 

00 


un 

CM 


J 

a 

H 



Ada, DOD-STD-2167 , revision A: Tailored 


p 


GL 


— 

' ct 


o 

a 












u 












w 




in 








Z 




a 


o 



5 — 







id 


1- 


K- 




H 




0. 




id 








o 

id 

z 


in 





in 



_J 

a 

Id 


-j 

— 



in 

z 



Id 

> 

h 


o 





Id 



> 

h- 

in 


o 




o 

H 



Id 

O 



(— 




VO 

<n 



a 

H 

oo 



' — *• 

o 


CO 

> 




O 



z 


V 



in 



3 

O' 

ct 


o 




1 




\ 

Q_ 

o 


Q 




0 



in 


K- 


a 


O 



z 




lx 

< 


X 


CJ 



H 



O' 

O 

a 


o 


'w' 

Id 

o 

H 



o 


id in 





tt 

a 

< 



lx 

Id 

Z Id 



— 


X 

o 

tt 




0 

Id O 




O- 

H 

M 

Id 



in 


CD < 


l-H 



O 

z 

Q. (/) 



z 

2 

lx 


HH 


Ixl 

Id 


O -I 


in 

o 

l-H 

< £2 


l-H 


H 

H 

CO 

O 



M 


1- Id 




oo 

M 


00 O 



H 


< h 


Lxl 


>— 

X 


z: o 


\ 

< 

o 

O Z 

h 

OO 


oo 

O 

</> 

> h* 

1- 

o 

H 

O' 

M 

Id 

< 



O' 

HH 

^ O 

Z 

o. 

tn 

O' 

h 

in 

00 



< 

l-H 

|g 

id 



IH 

<n -i 


a 


~tg 



Z 


* 


Id < 

_i 



oe: 


| 


z 

GO 

O' 


1 — z 

o 

a. 

— 


\ 


o 

HH 

Q 


O' 

o 

f— 


1x1 

3Z 


000 

O' 


* 

z 

O Id 

H 






ZH 

H 

a 


id 

Id h- 




H- 

a 

oo 

< 

> 

z 

i 

h 

o. x 

< 


— 


Id 

ao 


z 

< 

in 

o Id 

a 

O 


uo 

H 

O CM 

Z I— 

Id 



> 

_J 

<c 

< 


l-H 

X 

MCO 

— ILxl 




00 

Id Id 





CD 

z 

LdZ 


o 

o 


> H 

| 

■> 


1— 

M 


><o 

<51x1 

z 

VO 

O' 

h 

ld < 

Z 


< 

a 

Id 

00 

o 

Id 

a □ 


Id 

- ■ 


h 

r-H >■ 

>•0 



M 

0 

X 


O 


^2 

if) 



q! 

| 


O' 

— J z 

o 

< 

— — 


M 



o 


< 

a. m 

1x1 

O 



a 

o 

O 

-1 


CM 


*-d m 

o 

<c 






Id 












> 







- — " 





Id 









O 



a 

o 

O 

o 

o 

o 

o 


J 

a 

n 



REASONS FOR CHOOSING ADA AND ITS IMPACT 


SO 

I 




bJ G 
CL LU 
H U 


S < 


> 


G 


••C 


G 

1- G 

< 

Os 

G 

3S 

< 

ou. 

z 

a 

Q_ CL 

M 

O 

G 

3 u - 

LI 

Gj 

h 

z < 

(0 

o 

LU 

QIC 

tt 

O 

LU 

U. G 

1- 

bJ 1 

Z 

< G 
G Z 

M 

< ill 

H 

Z 

u. 2 

LJ 

oSz 

2 

O Ui 

LU 

HI LU 1- 

O 

G CL G 

< 

=> > 

Z 



g r"*» 

HI 00 Z 

o 

Q. 

o<d- h 

O 

1- 

< £ 

I- 

u- > 2 

G 

G o 

s 

S H jj 


Q. 

Ll-OOC 



o o 


g 



2 

o 


□ 

z 


1 - 

M 


G 

G 


> 


a 

00 


z 


z 

H 

LU 

H 

O' 

J 


LU 

G 

G 

LU 

< 

LU 

z 

G 

H 

M 

_J 

G 

o 

LU 

LU 

z 

W 

Q! 

LU 

Ll_ 

LU 



H 


O 

2 

X 

1 - 

H 

OO 

LU 

Lx. 

o 

a 

Li. 

z 

> 

< 

3 

f- 

h^s 

o 

o 

oo z 

00 

H 

o 


O 

G M 

LU 

CL 

Z 1 - 

H 

Q„ 

< O 

O 


< 

2 

Q. 

I- iu 

O 

2 ; 

Z O' 

CL 

go 

LU 



2 G 


Li. 

LU LU 

G 

O 

O X 

LU 


< H 

CL 

> 

Z 2 

3 

r 

M 

1 LU 

1 - 

< 

-J G 


LU 

H LU 

h S 

Ll. 

G O 

O G 


< Z 

Us/ 

G 

H < 

n ^ 

s 

CL X 

o < 

< 

o z 

cl a 

G 

Ql LU 


Ci 

o 

o 

o 


RACTICES 


REASONS FOR CHOOSING ADA AND ITS IMPACT (CONT'D) RWP 



pmm-7 













f ±' 


Q 





UJ 


o 



2 


o 



o 


-j 



X 


oo 



(/) 


o 

o 

o 


o 

LU 

o 

o 


o 

o 

CVJ 

CJ 


z 


N-*> 

Q 

< 


OS z 

w 

</> o 


z 

UJ 

H- 

. 


* a 


(/) 

LU 


o: < 
< z 


>- 

</> 

OO 

OO 

LU 

OO 

CO 

<c 


X LJ 


UJ 


O O 


N 


z z 

Ul < 

CQ Z 
< O 


M 

</> 

1 

z 

X 


t/> 

Q U. 

</) 

M 



<C 0! 


a 

• • 
OO 

o 

M 

LU 

a. a 

</> 

w 

LJ 

z 

CO 

OC 

S uj 

G£ 

< 

M 

LJ 

h 

UJ 


Ui 

U 

U. < 

N 

(/) 

< 

Z 

° a 

W 

00 

M 

Q 

< 

| 

H UJ 

lj a 

Z 

a. 


o 

oo < 

UJ 


L_ 


1- 



cl 


</> 



Ul 


> 



a. 

o 

00 

o 


J 

a 


z 

CL 

UJ 

U 



</) 

CL 

< -J 
LJ < 

> u 

M 

z 


\ 

in z 

o 


-JOO 

H X 

u 


-1 

U 

< 


< CL 

o 

U. UJ 
OH- 

H- 


CL U. 

o 

UJ < 

o 


U. CL 

O O 

z 


o 

<<£ 

> 


a x 

O CO 

a 

UJ o 

o 


Ml* 

> UJ 

< 


a oc 

< a 



UJ Q 

z 

§ 


o- 3 

Z UJ 

LJ 

O 


o >■ 

< H- 
H- 

< 


Z Q 

</) < 

CL 

(/) 

M X 
Z 1- 

< </> 
X • « tt 

UJ 


M (/) 

UJ < 

-1 


< 

u. o z 

H 

M 

a uj 

U. Z M 

a 

OL 

H- </> 

< LJ Z 

z 


< Lu 

H- M u3 

o 

1- 

h O L 

</) aco 

CJ 

z 

Z < 

UJ 


UJ 

O </> H- 

nan 

o 

z 

CL X00 

Z X z 

to 

UJ 

Li. -1 

UJ UJ Ul 

o 

Q. H- 

z z 


< 

a. z 

UJ 1- UJ 

Q 

z 

X -1 LJ 

o z o 

UJ 


UJ z 

< UJ < 

a 

x z K 

z z z 

o 

\ 

1- z o 

< Id < 

z OS 

-j 

_! 

Z O -j 

UJ 

UJ 

O O UJ 


> 

z 

Z CL > 

Q- Z O 

UJ 

z 

1 UJ UJ 


o 

o 

CO 0.0 


</> 

Q£ 

UJ 

CL 

o 

o 


o 




ADA RISKS: ASSESSMENT AND CONTROL (CONT'D) 


I- Id 

< a 

O X 
M H 


-J 

< 



a 

UJ 

Z 

i- 

> 

< 

ld 

Id 

a o 

l/> 

</> 

M < 

H 


au. 

X 

§ 

<2 - 

o 

a 

J- 

1- 

Li. 

z 

< 


.. UJ 


id 

-J z 

>■ 

O 

o a 

r 

z 

a o 

M 

Id 

i- -J 

— J 

H 

Z Id 

M 

£ 

o > 

to 

id 

o id 

w 

a 

_ Q 

X 

X 


id 

Id 

01 -1 

-J 


M < 

Li- 

< 



CO 

_ Z O 

1- 

§ 

a id o 
O Z -J 

Z 

id 


Li. Id O 

Z 

o 

a o 

Id 

z 

ZOO 

O 

< 

u z X 

< 


<HH 

Z 

>■ 

a (/) 

O Id 

a - z 


H H- 

a a 


</> O 

a z z 

3 

3 Id 

< M o 


O. M 


o o 


Z - 

z 

Z O 

-J > 1- 


o ^ 

< 

M CC 

-1 H O 

z 

(J UJ 


a 

< O Id 

M 


Id 

X 

a i- a 

< 

-JO 

-J 

Id < 

LU O 01 

1- 

-J LU 

X 

LO Q 

> a z 

QQ 

<o 

Q 

Id 

O 

=>< 

o a w 

O 

o 

00 

O 

o 

o 


J 

a 



NO SIGNIFICANT ADA EXPERIENCE 



H 

40 

H 

CO 

40 

< 

o 

H 

Q 

UJ 

w 

X 

cn 

& 

UJ 

o. 

x 

UJ 

< 

a 


§ 


H 

UJ 

CL 

Z 

< 

UJ 

2 

1 

r“ 

bu 

o 

O 

-j 

40 

UJ 

> 

O 

UJ 

z 

o 

< 

40 

40 

UJ 

a! 

CL 

UJ 

X 

Q. 

Q 

O 

UJ 

-1 

U 

UJ 

O 

> 

CL 

UJ 

a 

a u. 

o 

u. 
3 < 

z 

\ l- 

< 

4/) 40 


40 

UJ 

H 

O 

o 

-I 

o 

Q 


o 

w 

(0 

4/) 

UJ 

4/) 

O 


UJ 

•• o 

40 
fc 




< 

Q. 40 
W 4/) 
O < 


o 

X 

H 

H 

> 

2 

|- 

z 

h h 

40 

H 

UJ 

H 

U 

z 

H 

Z 


2S 

s 

g 



Lf) 2 

a 


4/> 

H 

s 

H 

csj a 

fO 

1 

1 

Ll_ 

i 

1 


J 

a 


-j 



i i 


3 WEEKS FORMAL ADA TRAINING 

2 DAYS OF OBJECT ORIENTED DESIGN (00D) 
TRAINING PLUS GSFC BRIEFING ON GENERAL 
METHODOLOGY (GOOD) 


ADA TRAINING APPROACH 



o 


Q_ 





z 

> 



z 



M 

Q 

OL 


UJ 



2 

3 

V 


H 



H 

H 



</) 



<r 

</> 



>■ h 



2 

a: 


(/> O 



I- 

UI 

Q 


UJ 




</) 



•- n 
u. o 



_j 

< 

u 

>- 


Ll O' U. 




a 


< 0 . u. 



§ 

o 

13 


1- < 



o 

z 

h 


</> - h- 



u. 

M 

</) 


_ </> 




z 

UJ 


S O h 

z 

o 


z 

o 

H 

< 

(/) 


Ll. ih q£ 

M 

o 

M 

2 

< 


1 - o 

h- 

z 

(/) 

H- 

U 


O < Q. 

< 

M 

UJ 


O 


z a a 

1- 

z 

g 

< 


HUD 

z 

M 


G 

z 


o a </> 

UJ 

< 

G 

< 

H 


3 o 

H 

a 

UJ^s 


z 


-J cl 

CL 

1- 

h — J 

z 

M 

z 

Oo3 uj 

o 


ZQ- 

M 

< 

o 

z z 


< 

UJ«"0 


a 

M 

H(-h 

oo 

Q 

H 

a 

I- 

(/) 

</> o 


< 

a u. 

z 


</> 

CO UJ 


o o 

M 

< 

UJ 

I- I- a 


-J 

|- 

Q/^ 
C (0 

00 

z z 
< -< 

1 

| 

l-CSJ 

< 

a 

z 

o 

0. o 


2 

UJt-f 

H 

U- O 

z 

H Z h 


o 

n 

(J 

O w 

M 

UHZ 

> 

Ll 

CQ 

H 

h 

z 

H a UJ 

< 



H >■ 

(/) < 

w 

1- UJ 2 

Q 

(/) 

a h 

* U 

< 

a uj uj 


* 


< M 

UJ IH 

a 

< z o 

CM 

UJ 

> 

a > 

UJ -J 

[— 

Q. M < 

N 

UJ 

< 1- 

M 

3 2- 


o z 

H 

2 

O O 

H 1- 

a 

a 

CSJ Z < 

1 


z 

O O 

< 

z 

o 

csj ui 2 

CSJ 

CSJ 

CSJ^ 

z < 


u 

U 







UJ 






i 

00 

1 

1 

1 

1 

1 


J 

a 


o 



DEVELOPMENT APPROACH 



DEVELOPMENT APPROACH 


•V 

\ ;> 

v 

f ± 


a 




o 


3 

a 


on 




o 


> 

Q 


CQ 

on 



V 


O 



< 

M 


Ui 

H 


-1 

Z 



a 



Z 


>• 

X 


o 

o 


o 

o 


_J 

o 


o 



a 

z 


o 

o 


z 

M 


h 

(/> 

ad 

LU 

a 

Q 

z a 

o 

<-> 

a 



z < 

a 

H 

O 1- 

a 

< 

M </) 

< 


h 

2 

LU 

o a 

P 

Q 

a u 

a 

O 

a z 

o 

O 

</> < 

on 


z a 


a 

H X 

a < 

o 

(/) 

o o 


Z </) 


o\° 

<< 

o 

lo 

o 

Z X 

»— i 

< H 

M H 


Lx. U 

a m 


3 

o 3 


a a 

-i 


a o 

w a 


</> a 

< </) 

O 

= Q- 

1— D 


o 

O 


J 

a 


CO 


I 

a 



LESSONS LEARNED/RECOMMENDATIONS \RWP 



Id 

<J 

3 

CL 


an 

z 


o 

w 


</) 



z 

> 


o 

o 


a. 

o 


</) 

J 



o 

-1 

id 

Q 

mJ 

01 

o 

id 

3 

X 

3 

(/) 

h 



Id 

a 

Id 

Z 

Id 

X 


X 

rf 

a 

01 


z 

o 


< 

3 

CL 

o 

X 

z 

z 

u 

01 

w 

< 


2 

Q 

a. 

M O 

01 

= z 

< z 

a. 

□ 

tt M 

a. 

(/) z 

H- H 

< 

* »- 

01 


</> 

Id < 

o 

H </) 

> H- 

z 

Q 

< < A 

H 

z 

I 

z 

h* < 

O 

H 

Z H 

O H 

< 

Id (/) 

1 - _ 

a 

Z 01 

01 

I- 

3 Id 

H O 


o a 

</> H 


O Z 

Id t* 


O 3 

oo a 

o 

o 

o 


Id 



CO 


1 - 


Id 


< 

o 

H 

u. 

H 

z 

O 

u. 

a </> 

M 

X 

< 

Id <A 

z 

1 - 

H 

Z Id 

M 

(0 

iA 

3 oi 

< 


Id O 


Id 

1 - 

1 - o 

1 - 

CO 

(/> 

Z 01 


< 

w 

M CL 

o 

o 

in 


z 


(/> 

mj an 

M 

u 

< 

-J o 

01 

H 


< H 

X 

Ll 

o 

Z M 

o 

M 

i- 

iA Z 


u 


o 

> 

Id 

co 

o z 

o 

Q. 

H 

z 

o 

(A 

01 

H > 

-1 

1 

Id 

H J 

o 

h 

0 L 

1 - Id 

O 

U 

X 

Id </) 

o 

Id 

Id 

<A O 

X 

n 


J 

H 

o 

< 

>■ <J 

Id 

01 

a 

CO 

z 

Q. 

< 

a 




<A Z 

o 

a 

a 

X < 

Id 

id 

Id 

<A 

M 

O 

o 

M </) 

U. 

H 

w 

01 Id 

M 

> 

> 

Z 

01 

o 

O 

-J o 

Id 

01 

01 

O H 

> 

Q. 

0 . 

01 (/) 




H Id 




Z -i 




O H 

O 

o 

o 

o z 


O 


o 


J 

a 

n 


May need to increase preliminary design phase by 
40-45%; DETAILED DESIGN PHASE BY 25% 

pwi-14 




— ^ 



-I 






-J 






UJ 





H 

3 




o 

z o 





s 

< LU 

> 

-j 

! 

— 


O O 

1- Of 

< 




H z 

UJ 

H 

i 

5=555 

O 

U. LU 

o > 

O 


o 

w Z 

a 

Of 

i 

— 


z 2 

a. > 

UJ 

i ; 


o o 

X O 



_____ 


M u 

</> o 


1 


CO 

</) Ui 

-J 

5 

i 


21 

of 

1- o 

o 

i 


O 

CO 

o a 




H 

LU ^ 

z o 

CD 


i 

<2 

X 

Z 




< 

H Q 

O 1- 

M 



o 

3 3 

M UJ 

>- 


— 


a ^ 

o z 

X 



LU 

LU > 

CQ 


s 

g 

Of Q 

o* 

CD 


i_ 

o 

Z K 

o o 

z 

UJ 


o 

O </> 

-J o 

w 

Of 


LU 

M 

O i 

O 

< 

_ 

C£ 

CO IU 

a x 

Of 


— 

\ 

LU </) 

o o 

< 

c 


o 

a < 

X >- 

o 

u. 

- 

LU 

o 

h l 

LU 

o 



Q 

UJ oo 

QC 

</> 

— 

Ocf 

LU LU 

z < 



< 

1 - cc 

1 

Of 

u. 


LU 

z o 

LU C/> 

o 

_i 


U 

LU 2 

Z 

1- 

LU 

— - 

CO 

M 

< O 

OL 

X 


Of •- 

X H 

z 

(/) 




o o 

a. i- 

UJ 

1 


o 

I z 

o 


UJ 


CO 

1- W 

Z IU 

h- 

X 


CO 

o z 

O 0. 

< 

h- 


LU 

LU M 

H </) 

UJ 

1 


■4 

n < 

(0 z 

> 

Ll 

- — 


co a 

LU M 

< 

U. 



O J- 

a* 

o 

o 


J 

o 

o 

o 


— 

a 






1 






pmm-15 



Session 2: APPLICATIONS 


1 . Barbara Scott, NASA/GSFC 

2. Kathy Schubert, NASA/LeRC 

3. Brandon Rigney and Cora Carmody, PRC 

4. David Badal, Lockheed 






Explorer PLatform ADA Flight 
Software 



Barbara Scott 
Satellite Servicing Project 
Goddard Space Flight Center 



Explorer PLatform Spacecraft 




MMS Spacecraft Software 



Explorer Platform 




NASA RISKS AND RESULTING GROUND RULES 





BENEFITS 






























fVI/NSA ON ■ BOARD COMPUTER SOFTWARE FUNCTIONALITY 



LAUNCH 

VEHICLE 

INTERFACE 

























ISSUE 2 


COMPILER EFFICIENCY 


SOFTWARE 


MODULE 

1750 

MEMORY WORDS 


RUN 

ON 

TIME CHECKS 

OFF 

Ada Run Time 
Executive 
(rel . 3.1) 

6385 

(3810,239,2336) 


COP Flight 
Executive 

17585 

(12303,399,4883) 


Instruction 

Test 

1011 

(816,6,189) 


Unused 
Memory Test 

859 

(849,10,0) 


Exclusive-OR 

Test 

615 

(601,14,0) 


Memory 

Monitor 

173 

(167,6,0) 


COP OK 

141 

(131,10,0) 


SUBTOTAL 

26769 

22580 

APPLICATIONS 

PROCESSORS 


Update Filter 

17946 

(16371,144,1541) 

6180 

(4695,54,1431) 

Math Library 

3765 

(3455,229,81) 

3018 

(2780,157,81) 

Statistics 

Monitor 

8489 

(6082,202,2205) 

6969 

(4562,202,2205) 

TOTAL 

56969 

38747 

DATA AREAS 



System Heap/ 
Stack 

12288 

(0,0,12288) 

12288 

(0,0,12288) 

Star Catalog 

2100 

(0,0,2100) 

2100 

(0,0,2100) 


32% 

SAVINGS 


UPDATE FILTER CONTROL PROCESSOR 


SOFTWARE 

MODULE 

ADA 

LOC 

1750A MEMORY 

WORDS 

RATIO 

PER 

WORDS 

LOC 



RUN TIME 

CHECKS 

RUN TIME 

CHECKS 



ON 

OFF 

ON 

OFF 

UF DATA DEF 

52 

1437 

1434 

27.6:1 

27.6:1 

(spec) 


(32, 2, 1403) 

(29, 2, 1403) 



UF DATA TYPES 

16 

30 

27 

1.9:1 

1.7:1 

(spec) 


(28, 2, 0) 

(25, 2, 0) 



UF ONE (spec) 

6 

36 

33 

6.0:1 

5.5:1 



(32, 2, 2) 

(29, 2, 2) 



UF ONE (body) 

27 

460 

178 

17 : 1 

6.6:1 



(454, 6, 0) 

(176, 2, 0) 



UFTWO (spec) 

25 

57 

54 

2.3:1 

2.2:1 



(46, 2, 9) 

(43, 2, 9) 



UFTWO (body) 

223 

4877 

2050 

22 : 1 

9.2:1 



(4827, 50, 0) 

(2036, 14, 0) 



UFTHREE (spec) 

12 

48 

45 

4.0:1 

3.7:1 



(40, 2, 6) 

(37, 2, 6) 



UFTHREE (body) 

109 

4519 

879 

41 : 1 

8.1:1 



(4491, 28, 0) 

(865, 14, 0) 



UFFOUR (spec) 

9 

42 

39 

4.7:1 

4.3:1 



(36, 2, 4) 

(33, 2, 4) 



UFFOUR (body) 

96 

4958 

910 

52 : 1 

9.5:1 



(4930, 28, 0) 

(904, 6, 0) 



UFTASK (body) 

18 

78 

51 

4.3:1 

2.8:1 



(78, 0, 0) 

(51, 0, 0) 



FLOATUTILITY 

19 

51 

48 

2.7:1 

2.5:1 

(spec) 


(42, 2, 7) 

(39, 2, 7) 



FLOAT UTILITY 

41 

1353 

432 

33 : 1 

10.5:1 

(body) 


(1335, 18, 0) 

(428, 4, 0) 



TOTAL 

653 

17946 

6180 

27.5:1 

9.5:1 


(16371, 144, 1431) (4695, 54, 1431) 


KEY: (code, literals, data) 


COMPILER COMPARISON 


LT> 


CNI 

LO 

*— H 

CNJ 

00 

ON 

It 

II 


C 


Q O i 


^ in 


cnooi 

in on 

CNJ lO 

1 — LU i 

ro 

ON (T> 00 


lo o 

O CNJ 00 

O CNJ <NJ 

ICL. i 


ON 00 


on h* 

0N <0 

00 I-** IT) 

Q- OO i 


iH rH 


rH 

rH 

rH 


z 

oo 


C * 







1“ 1 







<C cj i 


CO O 00 


m oo co 

in cnj 

in cnj 

O LU i 


cnj crs •-» 

in 

m o 

ro o co 

CO o co 

IQ- i 


in 


rH co co 

huuo 

Hinio 

Q- (/> i 

CNJ 

r— ♦ rH 

CNJ 

rH rH 

rH rH 

rH rH 

CO i 










1 

1 


ON CNJ 

rH 


on m m 

on in m 

'tiOO 


Q_ 

1 


ON 



r-H CNJ ** 

rH CNJ it 

CO CNI in 



1 


ro 

** 

CNJ 

ro co 

ro co 

r-H rH 

c 

00 

1 

NO 

ro 

CO 

m 

CNJ CNJ 

CNJ CNJ 

rH rH 

h— 


1 








or 


1 








<c 










i— 










00 










> 


1 



rH 


lO <h S 

lO in rH 

in m rH 


c 

1 

ON 

O 

00 

o 

NrOO 

in oo 

in co ^ 


h- 

1 

ON 

CNJ 

CM 

o 

O ro it 

O •—* CNJ 

O r-H CNJ 

H— 

C 

1 


r~H 

rH 

rH 

rH CNJ CO 

i—» CNJ CO 

rH CNJ CO 

CJ 

Q 

1 








C 

1 

1 

• • 

• • . . 

*• 

. « 


■ v • •• 


S- 

Q_ 

1 

LJ 

LU < 

-J 

o 

lu <: Jj 

LU < -J 

LU < -J 

0J 

3 : 

1 

O 

Q h- 

< 

o 

□ h< 

□ h< 

Q h- < 

H-> 

00 

1 

1 

O <C 

h- 

i 

O < ►- 

O < H- 

O C 1- 

c 


1 


O Q 

o 


o o o 

O Q O 

o o o 

»— ( 





H- 



H- 



z 

z 



o 

o 


•y 



O 

O H— 

OO 

00 

HH 

• z 

— I 


h- 

J— HH 

-J cd 
C LU 

LJ 
_J LU 

2 


in 

-J X 

LU 

LU h- 

i o 

< o 

X 

z tn 



X 

x z 

1 — LU 

i LU 

i 

• z o 

O 31 

z 

LU 

LU <_> 

< <-H • 

Z *~H 

Z | 

Z I | 

S- h- 

< H- 

< o 

COO 

0) 

h- 

1— z 

1 — z z 

H-> Z 

QC Z 

x \ 

QC \\ 

C ID 

< X 

< 

c 

' oc 

t— DC 

1 — 

1— 


TARTAN - CODE: 1044 1109 126 731 

/N0_ENUMERATI0N DATA: 2185 26 1502 724 

/NOCONSTRAINT TOTAL: 3229 1135 1628 1455 

/NO STACK CHECK 



HEAP - A COLLECTION OF TASK STACKS PLUS A GENERAL USER 




ISSUE 3 ADA RUN TIME KERNEL 
































ISSUE 6 Implementation Dependent Features 



= O 

|| 
O o 
(/) -D 

— 0) © 
to > O 

ro E 'i 

ego 

°a£ 


*- Q. 
CL 0) 

2* 

fciS 

£ Q 


.ts co 
CD Q 


ra i 

CJ)’^ 

c 03 

® 1 
I 

CO C 
I— LU 


- Page 

- Priority 

- Supress 




ISSUE 7 Licensing Agreement 
















FORTRAN PDL EXAMPLE 


SUBROUTINE STATE TRANSITION 

Xl(l) - FLOAT (WXC , 1 , -5 ) ** CONVERT INPUTS TO FLOATING POINT 

XI (2) = FLOAT (WYC , 1 , -5 ) 


XI ( 9 ) = FLOAT (VRZ, 1,-65) 

TPS = TP ** SAVE THE CURRENT PROPAGATION INTERVAL 



X2 (1) * HALF (TP*TP) ** COMPUTE INTERMEDIATE VARIABLES 

X2(2) = (X2 (1) *TP)/3.0 ** NEEDED FOR THE MATRICES 

X2(3) = XI (1) * XI (1) ** COMPUTATIONS 

X2 (4 ) - XI (2 ) * XI (2 ) 

X2 (5) = XI ( 3 ) * XI ( 3 ) 

X2 (6) = Xl(l) * TP 
X2 (7) = XI (2) * TP 
X2(8) = XI ( 3 ) * TP 
X2 (9) = X2 ( 3 ) + X2 (4 ) + X2(5) 

X3 (1) = Xl(l) * XI (2 ) 

X3 (2) = Xl(l) * XI ( 3 ) 

• • • 

m m m 

X3 (9) = XI (2 ) * X3 ( 7 ) 

X4 ( 1) = XI (3 ) * X3 ( 7 ) 

X4 (2) * Xl(l) * X2 (1) 

• mm 

• mm 

X4 (7) = X3 ( 3 ) * X2 (2 ) 

** COMPUTE THE ELEMENTS OF THE STATE 
** TRANSITION MATRIX 
FM11(1) = 1.0 - (X2 (4) + X2 (5) ) * X2(l) 

FM11 ( 4 ) = X2 ( 8 ) + X3 (4 ) - X4(l) 

FM11 (7 ) = -X2 ( 7 ) + X3 (5) + X3(9) 

FM11 (2 ) = -X2 (8) + X3 (4 ) + X4(l) 

FM11 (5) = 1.0 - (X2 ( 3 ) + X2 ( 5) ) * X2(l) 

FM11 (8 ) = X2 (6) + X3 (6) - X3(8) 

FM11 ( 3 ) = X2 (7 ) + X3 ( 5 ) - X3(9) 

FM11 (6) « -X2 (6) + X3 ( 6 ) + X3(8) 

FM11 (9) = 1.0 - (X2 ( 3 ) + X2 ( 4 ) ) * X2(l) 

FM12 ( 1 ) = -TP + (X2 (4 ) + X2 ( 5 ) ) * X2(2) 

FM12 (4 ) - -X4 (4 ) - X4 ( 5 ) 

FM12 (7) = X4 (3) - X4 (6) 

FM12 (2) - X4 (4) - X4 (5) 

FM12 (5) = -TP + (X2 ( 3 ) + X2(5)) * X2(2) 

FM12 (8) - -X4 (2) - X4 (7) 

FM12 (3) = -X4 (3) - X4 (6) 

FM12 (6) = X4 (2) - X4 (7) 

FM12 (9 ) = -TP + (X2 ( 3 ) + X2(4)) * X2(2) 


END 



ADA PDL EXAMPLE 


package UF_PROC is 

type MATRIX is array (INTEGER range <>, INTEGER range <>) of FLOAT; 

subtype MATRIX3X3 is MATRIX ( 1 . . 3 , 1 . . 3 ) ; 

XI ; MATRIX3X3; 

X2 : MATRIX3X3 ; 

X3 : MATRIX3X3 ; 

X4 : MATRIX3X3 ; 

StateTra_Blkll : MATRIX3X3 ; 

StateTra_Blkl2 : MATRIX3X3 ; 

end UF PROC; 


77 

package body UF_PROC is 



78 




79 

procedure STATE TRANSITION MATRIX is 

80 




81 

begin 



82 

— compute the elements 

of the state transition matrix 

83 

— NOTE ; X3 (1 , 1) 

= propagation time interval 

84 

X3 (2,3) 

= SIN (W*Dt) 

85 

X3 (3,3) 

= 1 - COS (W*Dt ) 

86 

X3 (2,1) 

= (1 - COS (W*Dt) ) /W 

87 

X3 ( 3 , 1) 

= Dt - (SIN (W*Dt) /W) 

88 




89 

for i in l . . 3 



90 

loop 



91 

for j in 1 . . 3 



92 

loop 



93 

StateTra Blkll(i 

j) : 

= +X3 (2,3)*Xl(i,j) +X3 ( 3 , 3 ) *X2 ( i 

94 

StateTra Blkl2(i 

j) : 

= -X4 (2,l)*Xl(i,j) -X4 ( 3 , 1 ) *X2 ( i 

95 

End loop; 



96 

End loop; 



97 




98 

StateTra Blkl 1(1,1)“" 

= 1. 

0 + StateTra Blkl 1 (1, 1) ; 

99 

StateTra Blkll(2,2) 

= 1. 

0 + StateTra Blkll(2,2); 

100 

StateTra Blkll(3,3) 

= 1. 

0 + StateTra Blkl 1(3, 3); 

101 




102 

StateTra Blkl2(l,l) 

= -X3 (1,1) + StateTra Blkl2(l,l); 

103 

StateTra Blkl2(2,2) 

= -X3 (1,1) + StateTra Blkl2(2,2); 

104 

StateTra_Blkl2 (3,3) 

= -X3 (1,1) + StateTra Blkl2(3,3); 

105 




106 

end STATE TRANSITION MATRIX; 


107 





108 end UF_PR0C ; 

109 


NSSC-I ASSEMBLY LANGUAGE EXAMPLE 


* 


* 

It 


FM11(1) = 

3026 


FLD 

3026 

060220 

BRM 

3027 

002367 

DATA 

3030 


FADD 


000005 

USE 

3030 

060244 

BRM 

3031 

002346 

DATA 

3032 


FMPY 


000005 

USE 

3032 

060253 

BRM 

3033 

* 

002323 

DATA 

* 


X4 (8) = X 

3034 


FST 

3034 

060222 

BRM 

3035 

002467 

DATA 

3036 


FLD 

3036 

060220 

BRM 

3037 

002502 

DATA 

3040 


FSUB 


000005 

USE 

3040 

060251 

BRM 

3041 

002440 

DATA 

3042 


FST 

3042 

060222 

BRM 

3043 

002145 

DATA 


1.0 - (X2 (4 ) + X2 (5) ) * X2 ( 1 ) 

X2+9 * FLT. PT. LOAD 

0FLD * SUBROUTINE CALL 

X2+9-0FLD 

X2+12 * FLT. PT. ADD 

PROG 

0FADD * SUBROUTINE CALL 

X2+12-0FADD 

X2 * FLT. PT. MULTIPLY 

PROG 

0FMPY * SUBROUTINE CALL 

X2-0FMPY 

(1) * (X2 (4 ) + X2 ( 5) ) 

X4+21 * INTERMEDIATE 

0FST * VALUE 

X4+21-0FST 

FONE * 1.0 

0FLD * SUBROUTINE CALL 

FONE-0FLD 

X4+21 * FLT. PT. SUBTRACT 

PROG 

0FSUB * SUBROUTINE CALL 

X4+21-0FSUB 

FM11 * FINAL RESULT 

0FST * SUBROUTINE CALL 

FM11-0FST 


SUBROUTINES CALLED: 

FLD, FADD, FMPY , FST, FSUB 


THE FIRST COLUMN IS THE NSSC-I MEMORY LOCATION IN OCTAL. 

THE SECOND COLUMN IS THE 18-BIT CONTENTS OF THE MEMORY LOCATION. 
THE THIRD COLUMN IS THE INSTRUCTION MNEMONIC. 

THE FOURTH COLUMN IS THE OPERANDS FOR THE INSTRUCTION. 


THE FIFTH COLUMN IS A COMMENT FIELD 



ADA ASSEMBLY LANGUAGE EXAMPLE 


; Source Line 98 


0188 

8220 

LD4 

#1,R2 

0189 

F420 

CMPRNG 

R2 , $C$04098$00000 

018A 

0000 



018B 

7503 

BZ 

%*+3 

018C 

7EF0 

CALL 

@-CP, rts . raise . constraint . error 

018D 

0000 



018E 

B220 

SUB4 

# 1 , R2 

018F 

C02 0 

MULS 

$C$04 098 $00000+2 , R2 

0190 

0002 



0191 

50F0 

SETI 

# 15 , rts . unsigned . ar ith . flag 

0192 

0000 



0193 

4A2 1 

ADD 

#$P$04 098 $00000+7 2 , R2 

0194 

0048 



0195 

53F0 

CLRI 

#15, rts. unsigned. ar ith. flag 

0196 

0000 



0197 

8132 

MOV 

R2,R3 

0198 

8643 

LDL 

0 (R3 ) ,R4 

0199 

0000 



019A 

8620 

LDL 

$C$04099$00000 ,R2 

019B 

0000 



019C 

A924 

ADDF 

R4,R2 

019D 

8240 

LD4 

#1,R4 

019E 

F440 

CMPRNG 

R4,$C$04098$00000 

019F 

0000 



01A0 

7503 

BZ 

%*+3 

01A1 

7EF0 

CALL 

@-CP, rts . raise . constraint . error 

01A2 

0000 



01A3 

B240 

SUB4 

#1,R4 

01A4 

C040 

MULS 

$C$04 098 $0000 0+2 , R4 

01A5 

0002 



01A6 

50F0 

SETI 

# 15 , rts . unsigned . ar ith . flag 

01A7 

0000 



01A8 

4A41 

ADD 

#$P$04 098 $00000+7 2 , R4 

01A9 

0048 



01AA 

53F0 

CLRI 

#15, rts. unsigned. ar ith. flag 

01AB 

0000 



01 AC 

8154 

MOV 

R4,R5 

01 AD 

9625 

STL 

R2 , 0 (R5) 

01AE 

0000 




THE FIRST COLUMN IS THE 1750A CO-PROCESSOR MEMORY LOCATION IN HEX. 
THE SECOND COLUMN IS THE 16 -BIT CONTENTS OF THE MEMORY LOCATION. 


THE THIRD COLUMN IS THE INSTRUCTION MNEMONIC. 

THE FOURTH COLUMN IS THE OPERANDS FOR THE INSTRUCTION. 


National Aeronautics and 
Space Administration 


SPACE STATION SYSTEMS 

ELECTRICAL SYSTEMS DIVISION 


+ Space Station 


Lewis Research Center 



The Evolution of Ada Software 
to support the 

Space Station Power Management 
and Distribution System 


Kathy Schubert 
NASA Ada Symposium 
December l, 1988 


Author Biography 

Kathy Schubert is a member of the Space Station Electrical Systems Division at NASA Lewis Research 
Center, in Cleveland, Ohio. She is currently the Work Package 04, Flight Software Manager, for the 
Phase C/D Space Station Electrical Power System software. Kathy received a B$EE degree from Ohio 
Northern University and is currently working on her MSEE at Cleveland Stale Inherit). 



National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


Space Station 


ELECTRICAL SYSTEMS DIVISION 


Lewis Research Center 


I. Introduction 

II. Ada Software Development 

A. Power Management and Distribution (PMAD) 
Photovoltaic (PV) Testbed 

B. PMAD System Testbed 

C. PMAD Integrated Testbed 

III. Space Station Electrical Power System 

IV. Summary 



Introduction 

Space Station has chosen Ada as the language of choice for all new Space Station opera- 
tional software. The embedded applications inherent in the onboard computer architec- 
ture made Ada a logical choice, although the lack of Ada experience was a major con- 
cern. So, in support of the Electrical Power System (EPS), research and development 
activities, the Ada Control Program for the Phase I PMAD PV Testbed was initiated. 
Since that time, the Ada software has evolved from a relatively simple Ada application to 
a more complex embedded Ada project. The purpose of this presentation is to show the 
progression of the Ada software applications, the lessons learned, and the problems en- 
countered in applying Ada to a real-time, embedded, power management and distribution 
(PMAD) system. 





SPACE STATION SYSTEMS 


National Aeronautics and 
Space Administration 


Lewis Research Center 


ELECTRICAL SYSTEMS DIVISION 



Evolution of Ada Software Experience 



Ada software experience began with the development of an Ada control program for the 
Phase I, PMAD PV testbed. The testbed hardware was modeled by Ada simulation soft- 
ware and consisted of a solar array field, a battery bank, a battery charge converter, two 
load banks, a DC distribution bus, and remote power controllers. This project served as a 
learning and evaluation phase of Ada for embedded applications. It should be noted that 
each testbed consists of different system configurations and that each of these represents 
independent software development efforts. The PMAD System Testbed and the PMAD 
Integrated Testbed are currently under development and will be discussed briefly. The 
PMAD PV Testbed software is complete and will serve as the focal point of discussion. 








• INTEL 8086 based microprocessor environ- 
ment 

• Originally written in FORTRAN 


• Utilizes the PAMELA design methodology 


The Phase I PMAD PV Testbed hardware consists of a solar array field for power genera- 
tion, a battery bank for power storage, a DC distribution bus, remote power controllers 
(RPCs), and a DC to DC charge converter. Simulation software, which characterizes each 
hardware component, provided the operating environment for the Ada control software. 
The software runs on the VAX 11/785 under the DEC Ada compiler for initial debugging 
and is then crossed compiled with the Softech Ada-86 compiler to the iSCB 8086 micro- 
processor hardware. 

The same control and simulation software had previously been written in FORTRAN 
when this project began. This provided interesting comparisons but resulted in very little 
documentation and the Ada project started out as a re-coding effort rather than a soft- 
ware development effort. After 10 months into the project, the Ada development team 
decided to retrofit parts of the software development lifecycle to the project. The testbed 
hardware requirements were established and the PAMELA design methodology was fol- 
lowed. 




National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


Lewis Research Center 


ELECTRICAL SYSTEMS DIVISION 



^ Space Station 



20 LOAD BANK SWITCHES 





National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 

ELECTRICAL SYSTEMS DIVISION 

Lewis Research Center 



Control Software Design 

% PAMELA 1 was ideal for designing with Ada tasks but not 
as well suited to sequential programming 

# PAMELA 2 has since been introduced which solves this 

• Easy to follow, step by step, REPEATABLE, methodology 

0 Design diagrams are done with a drawing tool 


The design phase of the Ada controls program utilizes the PAMELA design methodology. 
PAMELA is an acronym for Process Abstraction Method for Embedded Large Applica- 
tions, developed by George Cherry. The Ada control program design consists of a series 
of graphs which build the program both graphically and textually. The External Object 
Graph and a simplified Master Subprogram Graph are included here as a top level de- 
scription of the Controls software design. PAMELA is an easy to follow, REPEATABLE 
design methodology which can be documented with a drawing tool. Keep in mind though, 
a drawing tool does not provide any traceability, consistency checking or automated PDL 
generation. 

PAMELA 2 is a second generation of PAMELA 1. in which even the acronym has been 
changed to reflect the extended applications of PAMELA 1. PAMELA 2 now stands for 
Pictorial Ada Method for Every Large Application and consists of a standardized, seman- 
tically rich, graphical notation which can be applied to the entire software lifecycle. 





Na.ional Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


Lewis Research Center 


ELECTRICAL SYSTEMS DIVISION 


External Object Graph 


Solar 

Array 


Array_Short I Load(n) .Stat 


Array OpenV 





Ba tte ry_Te m pe ra tu re Power 

Battery V ^ Controller Bus I 
Battery _I ^ A/f — RPC(k)_Status 


Converter 

ControlV 


his V Bus I 


Battery 

Bank 


Converter 

OutV 


Converter I 
OutI 


Charge 

Converter 






National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


v/7* 


ELECTRICAL SYSTEMS DIVISION 


Lewis Research Center 


Space Station 




System Power Controller Master Subprogram Graph 


Array_ShortI 


I Solar 
Array 
Array_Ouiv | Controller 


Array Power 
Array_ShortI 


RPC(k) Statusl 


RPC(n). State 


Battery 

emperatu 


RPC 

Controller 



Charge/Discharge 
Control Sknal 


Battery Battery^V 
Controller BatteryJ 



System efu kx M us 

Power Load Control Signal 

Controller 


Admittance/ C \ 

L — 4 Load(n) . 

I Load Isiaius^ 

\ Controller J 

Load(n). Status \ S 








The Ada development environment consisted of a DEC VAX 11/785 connected to the 
INTEL Development System, which was tied to a bare 86-30 single board computer via 
an in-circuit emulator. This environment proved to be very slow and cumbersome. It 
became apparent that Ada was not as ’’transportable” as it claimed to be and that a 
compiler could pass validation but that did not necessarily mean that it was a production 
quality compiler. The controls and simulation software could successfully compile and 
execute on the VAX and complete cross-compilation on the VAX but the execution on 
the iSBC 86-30 board was beyond the abilities of the Softech Ada-86 run-time environ- 
ment. 









^ Space Station 


National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 

ELECTRICAL SYSTEMS DIVISION 

Lewis Research Center 

m 


Ada vs Fortran 

Lines of Code 

1100 

1600 

Executable Statements 

900 

1500 

# of Modules 

13 

6 


Steady State 
Execution Speed 


Embedded 
Execution Speed 


No noticeable difference for 
steady state execution 


NOT Real-Time Real-time 


Listed are some empirical relationships drawn from the Ada and Fortran control pro- 
grams. Even though the metrics are based on the implementation of only one problem, ^ ~ 

they provide significant evidence supporting the desirability of a high order language such * 5 

as Ada. The difference in the executable statements is the most notable. This is ac- 
counted for by comparing the language constructs in Ada to those in Fortran. For exam- =3 , 

pie, exception handling in Ada eliminates the need for flag variables that are repetitively 
set and checked for fault conditions. Also, the number of modules in Ada is more than ^ l 

double the ones used for the Fortran equivalent. The higher modularity of the Ada pro- fill ’ 

gram is a direct result of software engineering principles such as a structured design 
methodology, reusability, and increased efficiency. The steady state execution speed was | 

compared on the VAX 1 1/785 with no noticeable difference, but, once the application is ** . 

embedded on the 8086, the execution is bogged down by the run time environment. At = = I 

this time though, proof of concept was more critical than real-time execution. Also, note ~ f 

that the extent of the listed differences is likely to vary from one application to another 
and the metrics used are generalizations and should not be used as absolute conclusive ^ } 

results. 



National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


V/,< 


ELECTRICAL SYSTEMS DIVISION 


Lewis Research Center 


Space Station 





% Ada requires well-educated software engineers 
# DO NOT code Ada from another language 

% The requirements specification and design will determine 
the success or failure of a project. 


All Ada compilers are not created equal 
*Both functional and performance differences 


The main lesson learned was that Ada requires well-educated software engineers. The 
training program currently followed includes a week long Introduction to Ada, with 
hands-on training as a course requirement. This is followed with a course in a software 
design methodology such as PAMELA or Object Oriented Design. Then, once the devel- 
opment team gains some experience in writing Ada code, a follow up Advanced Ada 
course is scheduled. A Software Engineering course is also recommended, which in- 
cludes a discussion of the software lifecycle, its phases, products and activities. Class- 
room training which provides hands-on experience is the most effective for people ready 
to start coding in Ada, but for managers a day of Ada terminology and its benefits is 
more appropriate. Other forms of training such as video tapes or computer aided instruc- 
tion are available to anyone at any time. 

The objectives of this project were to demonstrate and evaluate the abilities and limita- 
tions of the Ada programming language for an embedded microprocessor application. 
Since that time, there has been a vast improvement in the availability and performance of 
target compilers. The objectives were met and the development team learned a great deal 
about Ada. 



National Aeronautics and SPACE STATION SYSTEMS 

Space AdmInis(ralion 


Lewis Research Cenier 


ELECTRICAL SYSTEMS DIVISION 



+ Space Station 


PMAD System Testbed 


Multi-Processor Power System Testbed 


# Currently in the design phase, implementing Object Ori- 
ented Design techniques 


Configuration managed with the SSE Automated Product 
Control Environment (APCE) 


The PMAD System Testbed is a multi-processor system used to control the hardware as 
shown in the following diagram. The purpose of the power system testbed software is to 
provide an environment for testing various control algorithms and newly developed hard- 
ware. The software can be broken down into two types: the system environment software 
and the algorithms under test. The algorithms under test include any algorithms written 
to control the power system. The Power Management Controller is connected to the other 
control processors via the Ethernet communications protocol. Processor status and power 
system component information is available to any processor requesting that information. 
The Power Component controllers are connected directly to the power component via a 
1553 interface. The software is currently in its design phase and the development team is 
implementing Object Oriented Design techniques. The software development lifecycle is 
configuration managed with the Space Station Software Support Environment (SSE) Auto- 
mated Product Control Environment (APCE). 





National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


ELECTRICAL SYSTEMS DIVISION 


Lewis Research Center 


PMAD System Test Bed 


Inw POWER 

a BM k . T DMA ,lnk MANAGEMENT 


Auxiliary 

Computer 

(Operator 


CONTROLLER 



POWER LINE 


ETHERNET 


1553B 

— 

IEEE 488 

— 

MACSYM IO 

■ 

RBI 

□ 

RPC 

LC 

LOAD CONV 


FACILITY 

CONTROLL 


POWER 
SOURCE 
| CONTROLLER 


J 20KHZ f- 
INVERTER 


20KHz 

4tNVERTERp 


INSTRUMENTS 


MAIN V. 

BUS ; ' ’:<< 

m * siii 


NOTE all componenti shown are single string (no redundancy) 










National Aeronautics and 
Space Administration 


SPACE STATION SYSTEMS 

ELECTRICAL SYSTEMS DIVISION 


e Station 


Lewis Research Center 




System Decomposition Chart for a Single Processor 


Each of the distributed processors shall contain the main program, unique to that control ® s 
processor function, which communicates with a common set of interface packages. These 
packages include the following: a text interface which provides an operator interface to ' ; 

the system for debugging capabilities; a standard control algorithm interface so that proto- 
type control algorithms may be easily incorporated into the system and tested; a router or ^ 
messenger package which standardizes all the inter-process communications to the Ether- 0 ? 

net; a power component package which communicates to the power components via the 
1553 data bus; and a graphics interface which shall receive, interpret and display com- §j | 

mands from the PC/AT graphics connection. A functional block diagram is shown in the ™ l * 

following diagram. The development team is currently evaluating the ALSYS Ada 8086 _ 

family of cross-compilers for this application. 0 I 


I 





















National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


Lewis Research Center 


ELECTRICAL SYSTEMS DIVISION 



Space Station 


Experience with the APCE 


# The project documentation is under configuration control. 

# Traceability pointers have been defined for all the software 
requirements. 

0 The mechanics of using the APCE are difficult to learn. 

0 Currently unable to transfer design diagrams to the SSE 
mainframe. 

# PRC support has been excellent. 


The APCE database for the Power System Test Bed Software contains all the documenta- 
tion under configuration control. The system requirements have been identified, and 
pointers have been defined which establish the traceability of requirements throughout the 
lifecycle. The mechanics involved in entering the information into the APCE has proved 
to be difficult at times. To use the APCE effectively requires that the user learn the 
APCE project language. For example, the phases, products, and sections are identified 
with two or three letters, i.e. ”RD SR ALL” is the Software Requirements Document, in 
the requirements definition phase, and includes ALL the sections. Once the project base 
has been established, the APCE is relatively easy to use for the developers and testers. 
The tester takes on a major role throughout the software lifecycle by defining test proce- 
dures to verify and validate each step in the lifecycle. The PMAD project is currently in 
the detailed design phase, but at this time we are unable to place the design diagrams 
under APCE control. Although, as the development team completes their detailed design 
the APCE team is defining test procedures to run against the code as soon as it is pro- 
moted to the APCE. Planning Research Corp., PRC, has provided excellent assistance 
and guidance throughout the project, particularly in the area of software testing. 








SPACE STATION SYSTEMS 


National Aeronautics and 
Space Administration 

ELECTRICAL SYSTEMS DIVISION 

Lewis Research Center 



PMAD Integrated Testbed 

9 Representative of the Space Station PMAD System. 

0 Currently in the initiation/requirements definition phase. 

# Shall be used to evaluate overall PMAD system perform- 
ance and to address system level issues. 


The PMAD Integrated Testbed (ITB) is a 20kHz power system testbed consisting of the 
components shown in the following diagram. The major items of the ITB include the DC 
Switching Units, the Main Bus Switching Units, the Power Distribution and Control Units, 
and the Main Inverter Units. The software control system shall monitor, evaluate, and 
control the ITB performance from the power sources to the loads. In addition, the control 
system shall monitor and control feeder, bus, and component electrical loads. The ITB is 
currently in its initiation/requirements definition phase and shall be used to evaluate over- 
all PMAD system performance and to address system level issues. 


03k 















National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 

ELECTRICAL SYSTEMS DIVISION 

Lewis Research Center 


Space Station Electrical Power System 

# Work Package 04 C/D contractor is Rockwell Interna- 
tional, Rocketdyne Division. 

# Software Lines of Code Estimation = 90,000 SLOCS 


% Software is broken up into 9 CSCIs, the use of Ada is a 
program requirement. 



The Space Station Project is divided into 4 work packages, each divided into two phases. 
NASA Lewis Research Center and its prime contractor, Rocketdyne, is Work Package 04 
and is responsible for the derailed design, development, test, evaluation, and construction 
of the electrical power system. Initially, power will be provided by eight solar array 
wings, phase two shall incorporate a solar dynamic power module. The power system 
software is broken down into nine Computer Software Configuration Items (CSCIs) which 
include a Power Management Controller, a Node Switching Controller, a Power Distribu- 
tion Controller, a Main Bus Switching Controller, a Photovoltaic Controller, a Solar Dy- 
namic Controller, a Solar Dynamic Engine Controller, a Main Inverter Unit, and a Fre- 
quency Changer Unit. The total estimated software lines of code are 64,800 SLOCS and 
will be written in Ada. The Space Station Software Support Environment tools, rules and 
standards shall apply to all operational software for the Space Station. 







National Aeronautics and SPACE STATION SYSTEMS 

Space Administration 


Lewis Research Center 


ELECTRICAL SYSTEMS DIVISION 



+ Space Station 


Conclusion 


Space Station is committed to Ada 


Space Station software demands embedded, real-time per- 
formance 


9 Ada compiler technology must improve 


In conclusion, the Space Station project is committed to the use of Ada. NASA Lewis 
Research Center has been involved in the implementation of Ada for the Power Manage- 
ment and Distribution System for over three years and have confronted major issues in 
the use of Ada, of which all of these can be overcome with the improvement in Ada host 
and target compiler technology. The Ada language itself requires intensive training in the 
use of Ada as well as in modern Software Engineering techniques. Finally, the Space 
Station imposes very stringent demands on the capabilities of the Ada language and the 
compiler technology has to keep pace with these demands for the application of Ada to be 
successful. 





FIRST NASA ADA USERS SYMPOSIUM 



BRANDON L. RIGNEY AND CORA L. CARMODY 
12 / 1/88 




BACKGROUND 


co 

CO 


H 

O 

LU 


”3 

o 

x 

Q. 


CO 

LU 

X 

D 

Q 

LJJ 

O 

O 

OC 

CL 


5 


OC 

o 

Li. 

CO 

z 

< 

oc 

I- 

o 

c\i 


O 

ill 

CO 

CO 

LU 


CO 

O 

LU 

"5 

CD 

O 


O 

X 

Q. 

< 

OC 

a 


a 

LU 

CO 


X > 

eg 

S LU 
OC X 

o o 

U_ LU 
CO OC 


< 

OC 


LU 

oc 

< 

£ 


< 

> 

oc 

I- 


o 

CO 


I 


LU 

CO 

CO 

LU 

X 

I- 

o 


CO 


H 

Z 

LU 


Q. 

O 


LU 

> 

LU 

Q 


< 

O 

< 


LU 

h 

LU 


Q. 


O 

O 


I- 


O 


LU 


"3 

o 

oc 

Q. 


h 

CO 

X 


I 


CO 

D 

o 

z 

LU 

0 

o 

X 

LU 

H 

LU 

X 


LU 

CD 

O 

LU 

CO 

3 

LU 

X 

X 

O 


g 

CO 

LU 

D 

o 

I- 


< 

> 

o 


CD 


LU 

CO 

CO 

Li. 

o 

LU 

X 

CD 

I- 

< 


>■ 


CO 

CO 

LU 

O 

O 


CO 

o 

H 

co 


LU 

_l 

X 

o 

X 

X 

>- 

t 

X 

3 

h- 

< 


X 

LU 

—I 

CL 


o 

o 

LU 


< 

o H 
X CO 
LU O 
> X 
O LU 
. X 


a 

3 

o 

X 

I- 

o 

O 

-I 

CO 

* 

CD 

o> 

LU 

2 

< 

o 

LU 

ffi 


LU 

> 


o 

LU 

t 2 

LU — 

O S) 

Sg 

co Sj 

< oc 

S Q 

< z 

LL < 

O LU 

^ CO 

S3 

. X 


c\i 


EMHAHT PRC 






ASPECTS OF THE TRANSFORMATION PROCEDURE SOFTWARE 


oo 

oo 





>- 




.j 




LU 



LU 

CO 

CO 


O 

O 


< 

LU 

DC 


li- 

DC 

< 


ce 

0. 

2 


LU 

■ 

2 

< 

DC 


1- 

z 

r- 

O 

Z 

CD 


2 

CO 

LU 

LU 

H- 

LU 

H 

Z 

CO 

o 

(0 

LU 

DC 

< 

> 

2 

LU 

Li- 

CO 

LU 

> 

ce 

o 

z 

oc 

Q 

LU 

H- 

3 

CD 

Z 

CO 

DC 

Z 

DC 

LU 

CO 

1- 

< 

cc 

LU 

n 

O 

LU h- 
DC Z 
LU 

CO 2 

< 

CL 

3 

Uu 

o 

LU Q_ 

D- O 


O 

Q 

> -1 

Z 

o 

H 

< 

LU 

h- 

Z 

UJ 

LU 

H 

Z 

LU 

2 > 
£ LU 

O a 

DC ^ 

O 

QC 

a: 

a. O 

_i 

Q_ 

Q. 

O 

1 

LU 

Z 

o 

LU 

_J 

li 



LL 

Li- DC 

X 



o 

LU 

-J 


ImJ 

III A 

_l 

Q. 

2 

< 

2 

Z 

< 

2 

z 

LU 0 
> LU 

o < 

O 



> h- 

O 

2 

2 

LU CO 


CM 


O 


O 


O 


O 


mmum 



INTEROPERABILITY TOOL FORMAT 











ADA DEVELOPMENT, CONTINUED 


c 



LD 
X CO 

dc a 
I- z 

if 

-7 CO 


u 




C\l 




CO 

CO 

CO 


♦ 

rt 

CM 




CO 

CO 

CO 

* 



CM 

Tf 



CO 

C 0 

CO 

* 

* 



rf 

CO 



CO 

CO 

CO 

* 

+ 

o 


CM 

CO 


CO 

CO 

CO 

CO 

CO 









DIRECT CODING OF TRANSITIONS; USING PASCAL 


00 

00 


CM 


c 

a> 


tz CD 


C 

2 

CO §■ ” 
w 8 
A ro i« 
ii ■ ■ 


o ^ 
w £ O 

n w r- 


a> 


II 


03 


03 

j*: 

o 


CNJ 

CO 


03 

Ta c c 

> o g 

I© O O 
c to - -a 

_o 


2 c 
<2 o c: 

- J s © 

-E q 5 u ^ - - 

P> c o -o ■■ 

C <D © C ^ 

£ to -o © CO 


CD 


CO 

CO 


03 

CO 

03 

O 

■O 

c 

03 


c 

03 


03 


co g 

II 03 


03 

C 

o 

c 


— 

CO Ml 
II ■o 


O 2 


c 

o 

c 


c 

0) 


X) 

II 

c 

03 

O 

w 

o 

o 


03 

o 


CVJ _ 

w ? 

II 03 


- CD 


O 

c 


3 3 


O 

LU 

K 

£ 

CO 

<13 

CO 

s 


c 

03 

o 


c 

*03 

0) 

n 


03 

II 

Jl_ 




03 

Jl 



X> 


03 

Jl 

Jl. 




03 


\\ 


5 






03 

t — 



II 


c6 






2 




CO 

c 

C 




00 

o 

c 


c 


CO 

c 

C 




CO 

o 

c 


$ 

O 

03 




$ 


03 


03 


$ 

O 

03 




$ 


03 


03 

Q 




cz 

03 

o 


. - 


c 

03 





C 

03 

o 


• - 

C 

03 

o 

"O 


*03 

C 

03 

o 

x> 

O 

03 

C 

W 

03 

O 

"O 


*03 

c 

03 

o 

■O 



c 

03 

03 

03 

_o 




c 

03 


2 



c 

03 

03 

C/3 

03 

_o 




c 

03 


o 

co 


03 


CO 


03 


mwHm 




DIRECT CODING OF TRANSITIONS; USING ADA 


CO 

CO 


CM 


CD 

-C 

CO 


c= 

0 

jx: 

o 






CO 




0 


0 


0 


c 


C 

0 " 

c 


o 


o 

0 

0 

0 

c= 

o 

c 

"S 

o 0 ) 
£ § 

c 

"B 

c 

0 

c Q- 

c 

"D 

c 

0 

"D 

0 

P? 0 

0 


o 


o 


O 

"D 

CO 

r> "O 

CO 

0 

CO 

■§ 

T> 

■° -o 
c 

~o 

0 0 


CO 

CO 

C CM 

a> co 

CO 

li co*' 

c CO 
0 

CO 

' — " 

II 

^ - — - 

II 

JX II 

II 

1 ! 

o II 

0 • • 


Z 3 

C 

A 


CO 

0 

co 

CO 

0) 

CO 

CO 

o 


X 

a) 

c 


X — 
0 A 

C n ^ 

c 11 


X 

0 

c 


X 

CD — 
c -n 


0 

0 

0 1- 

0 

0 CM 

CO 


co 


CO 

c: 


c 


c 

0 


0 


0 

sz 


JZ 


JZ 

5 


5 


5 


x 

CD 

C 


0 

_CO 

0 


x ^ 
0 — 
c "O 
c 
0 


CO 


CO 

CO 

c 

0 


0 

(O 

0 

a 

■O 

c 

0 


fiMWWPRC 















ADA DEVELOPMENT; OVERLOADING 


• « 

> 

UJ 

CO 

o 


o 

o 


CO 

* ** 



UJ 




o 

_a> 



< 




ZD 

o 

"D 



<D 

c 



Z 

. - a> 



< 




-J 

*c ? 



DC 

a> .E 

)- i 


c 

05 

UJ 

CL O 


05 . - 

X 

1- 

o 

~ -D 

0) c 
^ 0^ 


CL 

•4—* 

a> <+- 
— 00 


1 *’ 1 C\l 

. - 

* 

z 

z 

C c 1 
<d a? 

-* j*: 

«4— » 

CO 

”l 

4-T c 

C/5 d) 

o 

o O 
~l ~\ 

"5 

<— 

o 

00 

1— 

V- 

o o 

M— 

1 1 

k— 

II 

O 1 £ 

-1 

! 1 
j*: 


' J 

o 

CO 

o o 
o o 

.E 

1 J 

UJ 




X 




1- 





0) a) 
c — 


o O 

IS© 

d) 0) w 


+- J c 

J2 to </> <D 

— o 
3 w .22 

c — , — , w 1 


■ ■ II 

"O "D 
W "O T3 
— <X> 


I 

o 

o 


O 

z 

< 

>- 

_l 

DC 

< 

UJ 

-J 

o 


d> 



C d) 

a? c 


05 m- 

Q. o 
=2 © 


C c 
Q> o 

o o 



o o 


I I 

J*: 

o o 
o o 




< 

Q 

< 


1 2 / 1/88 





ADA DEVELOPMENT; CLARITY AND MAINTAINABILITY 


LU 

z 

o 

z 

o 

G 


o 

o 

0) 

HI 

o 

3 

o 

o 

QC 

H 


LU 

N 

0) 

LU 

0) 

O 

il 

0) I 
LU H 

b Li. 

G ° 
LU LU 
QC d 
G 
CD 
< 

g 
o 
> 

< 

LU 


QC 

D 

O 

O 

G 

< 


o 

03 


o 

o 

QC 

O 

H 

QC 

O 

LL 

U. 

LU 

LU 

UJ 1 

> z 
< < 
03 O 


LU 

QC 

h 

O 


03 

< 

H 

< 

Q 


5 ° 

3 Z 

O 03 
LU 

Q LU 
QC 

H 

LL 


LU 

G 

< 

* 

O 

< 

CL 

< 

G 


LU O 
□ G 

LU — a; 
> Q LU 
< < H 

1 LU < 

i_ — 1 - -1 

5 03 m 

isg 

H O 
G Q ° 

z b X 

z < ^ 

2 G 


2 £ 


< 
H 
G 5 


H U- 


H 

$ 

QC 

LU 


O 

O 

LU 

03 


QC 

O 

> 

Q 

D 


LU 03 

<o| 

G * 

z Z O 

5 < E 

< o > 

O 03 

ri z 

DC ^ uj 

sii 

O QC 

o O G 

O 

Z 01 
£ Q. 


00 

00 


CM 


EMHARTm 







USING ADA 





WPTOOLFILES 



















REUSE OF DEVELOPED COMPONENTS 


00 

00 





CO 

UJ > 

cc b 

D -J 

£££ £ 

I — I — Q. — I 

<0 O O U. 
UJ I- cc 

t $ 

CO — 


CO zd 
UJ CD 
N < 
□ . 'CC 
< n lu 
S £ CL 

§ H S 
Z £ 


£ CO 
_l UJ 


Z O 

jp p 

9b z 
cc O 
I— o 
CO 




EMHjmm 



USING ADA 



TOKEN ^ TOKEN 



EMHARTm 




REHOSTING IS REUSE IN DISGUISE 



mimmi 






































REHOSTING OF ADA, CONTINUED 



THROUGH THE PROCESS OF REHOSTING, MACHINE DEPENDENCIES ARE 
DETECTED, REWORKED, AND ISOLATED 







mwHm 


REHOSTING OF ADA, CONTINUED 



EMHAKrm 


SOME POINTS WHERE SPECIAL ATTENTION IS REQUIRED 



- DC O 


c n Q 
LU z 


w 9 . 


ULI LU 

Q _j 


< a 2 

oc I- =J 
y HO 


0) 0. 


LU DC 

O t 


LU LU O < O 
Q Q O |- O 


i- CM CO 









MANAGEMENT OF ADA DEVELOPMENT & TEST 


CO 

CO 


eg 


Q 

LU 

O. 

O 

LU 

> 

LU 

O 

c o 
< 

£ 

LU 

GC 

< 

£ 

t 

o 

CO 

LU 
-I 
CD 
< 
1 0 
3 
LU 
GC 


CO 

3 

OQ 

O 

GC 


O 


CO 

< 

£ 

>- 

> 

h 

O 

Q 

O 

GC 

Q. 


CO 

LU 

GC 

3 

O 

LU 

O 

o 

GC 

0. 


I- 

< 

2 

GC 

o 

u_ 

CO 

z 

< 

GC 

H 

K 

X 

LU 

I- 

LU 


CO 

GC 

LU 

H 

CO 

LU 


>■ 

CO 

Q 

LU 

h- 

CO 

LU 

I- 


co 

* 

LU 

LU 

£ 

CD 


< 

Q 

< 

LL 

O 

O 

o 


r< 


O 

CO 

GC 

LU 

0. 

GC 

LU 

Q. 

>- 

< 

Q 


CO 
GC 
LU 
2 
2 < 


* 

CD 


< 

GC 

O 

o 

GC 

0. 


O 
O 

CO O CO 


* 

ID 

CD 


O 


CO 

O 

LU 

GC 


LU 

CO > 
3 < 
. LU Q 

d£< 

“Sg 

UJ O O 

GC O O 

< U-1L 

< 2 °° 

m LU LU 
< 2 Z 

£ □ □ 

0 LU LU 
LU > > 
X |_ 
LU O b 
m LU LU 

1 UL LU 
^ LU LU 

u] ^ ID 
X CM N 


EMHMUm 


MANAGEMENT OF ADA DEVELOPMENT & TEST, CONTINUED 



FROM 32K LINE 
LINES OF CODE 




1 2 / 1/88 






SSE SYSTEM PROJECT 



PRECEDING PAGE BLANK NOT FILMED 


L. B(Ada)L 
12 / 1/88 


SSE SYSTEM PROJECT 



CONCLUDING REMARKS: 



SSE SYSTEM PROJECT 



SSE SYSTEM PROJECT 




SSE SYSTEM PROJECT 



CONCLUDING REMARKS: 


SYSTEM PROJECT 


ADA BASE AND CROSS-COMPILER 
EVALUATION REPORT 


VERDIX 


RATIONAL 





ADA COMPILER SSE EVALUATION 
CATEGORY DESCRIPTIONS 


COMPILATION 

FEATURES 

* COMPILE & LINK 

* ADA LIBRARY 

* DEBUGGER 

* ADA SENSITIVE EDITOR 

PRAGMAS 

* PREDEFINED 

CHAPTER 1 3 

* REPRESENTATION CLAUSES 

* UNCHECKED PROGRAMMING 

TASKING 

* SCHEDULING 

* IO BLOCKING 

* DEADLOCK 

DOCUMENTATION 

* LRM 

* USERS GUIDE 

* RUNTIME 

* ONLINE HELP 


PIWG BENCHMARKS 

* PIWG COMPOSITE 

* TRACKER 

* TASK CREATION 

* ARRAY ELABORATION 

* EXCEPTION 

* CHAPTER 13 

* PROCEDURE 

* TASKING 

* DELAY 

* COMPILATION SPEED 

* DISK SPACE RQMTS. 

RUNTIME 

* GARBAGE COLLECTION 

* SYSTEM SERVICES 

* EXCEPTIONS 

MATURITY 

* AGE 

* ROBUSTNESS 

* OPERATIONAL CONSTRAINTS 

MISCELLANEOUS 

* SELF COMPILED ADA 

* UNIQUE FEATURES 





























SSE SYSTEM PROJECT 



CONCLUDING REMARKS: 


55E system project generic problem 

STATEMENT 











SYSTEM PROJECT 






host B / \ / X target b TARGET B 

\ / ADA 

(IBM 3090) V ► rnMPff rp (68020 bsscd) 



nstances) 9 I Instances 







SYSTEM PROJECT 


















SYSTEM PROJECT 


< 

H 'll 

W u 5 

o 

a! fS 

^ EZ 2 


^ o 

ri ° 



(Future Host (Future Target 

Instances) Instances) 













SSE SYSTEM PROJECT 



SSE SYSTEM PROJECT 



SYNTHETIC WORKLOAD 





SSE SYSTEM PROJECT 



SSE SYSTEM PROJECT 



O 

£ 

LLi 

H 

DC 

< 

O 

DC 

HI 

c n 


o 

I— 

O 

< 

Li. 

O 



O 


< 

H 

Z 

LU 


Z> 

o 

o 

Q 


CO 

UJ 

o 

z 

UJ 

Q 

z 

UJ 

Q. 

UJ 

Q 

Z 

o 

I- 

< 

H 

Z 

UJ 

2 

UJ 

_J 

Q. 


UJ 


3 

dc 

TJ 

< 

U_ 

O 

UJ 

3 

o 

o 

_l 

< 

h- 

< 

o 


o 

£ 

UJ 

y— 

DC 

< 


r- 

co 

CD 


o 

UJ 

Q 


UJ 

I 

I- 

DC 

o 

u_ 

(/) 

Z 

o 

H 

CL 

o 

Q 

Z 

< 

tn 

UJ 

DC 

3 

H 

< 

UJ 

u_ 


< 

H 

< 

O 


o 

UJ 
1“ ■ 
DC 
< 

h-" 

CO 

ct> 


O 

UJ 

D 


I- 
UJ uj 

o ^ 
< 
li- 
DC 


z 
o 
□ dc 

if 

u. 114 

O uj 

o I 

o tz 


3 

DC 

(TJ 

TJ 

< 


CN 

O 

o 

I 

CO 

CO 


tn 

Q 

o' 

u. 

CO 

O 


r-~ 

CO 

CT> 


O 

UJ 

Q 

00 

UJ 

O 

< 

o 

< 

CL 

Ul 


I- 

z 

3 

DC 

(TJ 

TJ 

< 


o 
z 
< 

CO 
Ul 
3 
CO 
CO 

H 

Z _J 
Ul H 

z Q 
O - 
dc o 

> u - 
Z W 
UJ o 

Ul 


H 

Z 

3 

DC 

< 

CO 

< 

z 


CO 

CO 

o 


C/) 


< ^ 


CO 

I- 

o 

Ul 


< 

Q 

Z 

Ul 


o S 

DC S 
CL O 

(TJ O 
TJ Ul 
< DC 


£ O 

Z £ 
UJ Ul 
2 H 


z 

o 

DC 

> 


CO ” 
CO 


Ul 

Ul 


DC 

< 

K 

CO 

CT) 


H 

O 

o 


z 

a uo 

(TJ 

TJ 

< 

o 

z 

DQ 

DC 

O 

tn 

UJ 

Q 

DC 

o 

LL 

DC 

O 

£ 

UJ 

2 

< 

DC 

U. 

< 

o 




FIRST ANNUAL SURVEY OF MISSION CRITICAL APPLICATION 
REQUIREMENTS FOR Ada RUNTIME ENVIRONMENTS 

1 DEC., 1987, ARTEWG 




10% TOGETHER. 





Session 3: DIRECTIONS AND IMPLICATIONS 

1. Robert Nelson, NASA/Space Station Freedom Program Office 

2. Glen Freedman, Univ. of Houston at Clear Lake 

3. Garry Walker, JPL 

4. Frank McGarry, NASA/GSFC 


PRECEDING PAGE BLANK NOT 






gs 

O 

•S 4) 

2 « 

(A O 

o rt 


« 

•o oo 
^ & 
^ s 

s - 

^ u 

« s> 

5 6 

o $> 
c Q 


PRECEDING PAGE BLANK NOT FILMED 


Space Station Freedom Program Office 



Presentation Outline 






e g 

32 

o > | ) 

•2 e 

tS ° 


Q) (X 

0 iT 

C Q) 


S 

05 

T3 ^ 
O W 

s ^ 

” 'Sh 
+-» •«-! 

C/5 o 

o G 

SB 

05 ^ 

|B 

Is 

S'6b 

G G 

C/5 05 

>> 05 
+3 M 

G 5 

O *+-1 

<S o 

CU C/5 

W 


S cu 
E co 
*2 co 

O L^, 


<U *»H 

a; a) 

•°5 






TYPES OF SOFTWARE 


cd 

B < 

a) S 


g C 9 

S fa 

B ^ 

•53 (o 

* 

4 ) O 

* g V 

s § s 

9 * £ 

•d 2 ® 

O — 
T C ^ 

ft* HH ft 


I I I I 


3 

*d ^ 

4> (X) 

■g a 

s p 


tJD 

£ t 

§1 

4 8 

Oi & 

•d ° 

g * 


(0 

G 

o 

Vi 

-M uj 

^ cd <n 

rj? *■* S 

4 > p ft 


i i i i i 


11/30/88 


6 

4> 

4-» 

0) 

W 

g w 

■M 

,2 A 

4> d 
4> g 

£ 2 

si 

•S 4> 

13 N 

25 j> 

» a 

I * 

cti <d 
A H 

co 2 

43 

c §, 
o w 

U 4 ) 

•g S 
g E» 

o« o 
o w 

3 *-n 

> S 

PJ5 


o 

N 

-M 

c 

o 

o 

(3 

o 

13 

tw 

a 

a 

o 

o 


XUD 

.5 4> 

In 

4> 

V 
6 


a 

a 

» 

*d 

a 

*C w 
*d o 

Is 

*3 

a ® 

§* 
ij t» 
0-0 

•■e 

W* 4) 

Sc 

? (A 


4> O 


4) w 

-M +J 

£a 

CO Q< 

A 

II 

II 


2 2 

Si « 

w ' 
►> 

(A 


a 


w 
^ « 

43 2 
** 8 
4) 4) 

H 

S & 
w 2 


CS 

O 


4) 

fl a 

I 4 

3 8 

S 43 

•*4 

*0 »c 

§ 1 
u « 

10 & 

& 


43 

fcdD 

« g 2 

in 

(3 V V 
V p,* 

~s a 

w 2 

6 8 

w « 

•d *2 

4) S 

«M p 

d o 

_n ^ 


tj) 

a 

•c 

o 

«M 

• f * 

(3 

O 

s 


o 

w 

«M 

cd 

43 


A 

II 


4) 

Ih 

P 

W 

C 


42 £ 
*1 
*0 

§ 
« * 
bS 

4) S 


§ 


g 4) 

5 £0 

ii &$ *3 S 


■§ 


a 

a 

4-> 

w 

4) 


8 £35 § 


P 

O 

•n 

«M 

cd 

In 

tUO 

4) 


A 

II 

II 


11/30/88 



V 


OS 

o 





c a 

g 

H 



O 

Pu 

(!) 


W 

ftj 




4 ) 







Provides point of contact regarding all software issues between Level n, 
the Internationals, other NASA codes, and SSFP customers. 

Responsible for Software Support Environment Project 



00 

§: 

C w 

3 V 

3 ) 43 

Q d 

d g 

N tJD > 
00 do 
O) w 


0 ) 

<M 

<3 g 

M S 

£ *o 

*"■ o 

£ 6 

£ * 

w o 

d (ij 
O »§ tfl 

a <5 o 

ft) o SP 

M 4J O 


Cd 

ft) 

cf 

§ 

6 


(0 

■M 

ft) 

ft) 

o’ 

M 

a 


0 ) »rt O *0 

d «T 3 « 

« a § stS’a 


« ’HI 

- 0A| 
• . S '“•S s 

Qi — . ft . 


X * 

e~ B 1 ' 
So® 

d j^d 

C 


d * 

ft) 


^ S 55 

« a* g 

2 ««h *0 a) 

| o 2 c s * 

wig5 
S Ss -2 g ^ g 
^S 5 P < N &«§ 

-°% 2 sf§&» 

2 $•§ oB ■§ 

SSS-gg 

O'? > 


I 

a 

0 

■W 

1 

M 

a 

6 

d 

3 

ft) 


•d 

ft) 

*d 

d 

ft) 

G 

6 

o 

ft> 

ft) 


CO 

(X) 

0 ) 


§ £ 

S ft) 

* 

5 ^ 

- *3 

*rt **h 

o d 

fg 

o is 

a^ 

ft) M 

^ c 2 
0 ) 

f -4 CO 

ft) d 

VOD g 
d d 

§| 

ft) _ 

la " 3 

ii 

<S (A 

s P. 
3 13 

as 

CO K 

•fH 

4 ) <A 
« *- 
2 d 

a J3 

co 5 


available for contractors 



and Reuse 


r 




5 > 

4-» 


0 

G 

o 

E 

£ 

o 

o 


G 

lx 

toX) 

O 

lx 

0< 

4> 

43 


w 

(/) 

O 

lx 

4) 

G 


73 

G 

O 

£ 

£ 

o 

u 

lx 

o 


4) 

cd 

•o 


4> 

O 

,G 

t 

4) 



£ § 

A S P ° 

gw-gs 

§tJ a3 

e ©we 
egtjs 

u tfl ft's 

4) fi* G 

e3 (0 W 
w S 7? 

4) 5 « 

65&S 

cq 

w 


a 

| -> N 

v a 
« « 

s 3 

4) 

Otf 4) 

a 


M W 

G & 

Eg 

G w 

2 01 

43 *2 « 

S£& 

“*j 5 

■M 4) O 
ia ed 

§.S ft 

e<C>e 

5 jiS 

£ ** (A 

a <a o 

G .p* 
fe lx lx 

;o« 

^ Jfi 
9 G 4) 
(0 « dA 


*0 

4) 

€ 

•p* 

•m 

G 

2 

G 

V 

4) 

& 

4) 

a 

J3 

(A 

4) 

G 

7 ? 

«M 

G 

» 

(A 

4) 


4) 

43 

4) 

(A 

G 

O 

•4-i 

G 

o 

33 

7a 

(0 

G 




J 



a 

•w 

C 

s 

e 


3 ,8 

? - 

W g 

* * 

o. 

U a 

h ? 

Q to 

w u 

3 ! 

<S. S 

o' % 

» ° 


ill 

1 1 § i 
» . 1 8 
H| B 

I o a | 
& • ?|! 
g s | 

a a « 

I I i 1 

I i 1 1 

t» »\ O 


V 45 
O -9 


I * | | 

I | I 1 

<8 a a I 


a a 

* ft 

1 1 

1 1 
a > 

|i 

§* 3 

* € 
6 2 
I 5 


i! 

5 I 


? 5 *8 
» -8 * S 
I 8 B fi 

•a o a ft 

g *P ■§ & 

Ego* 
^ 6 o « 

? & 2 2 
2 ft § 

H s s 

li 

3 1 


E « "ft 

2 1 * 

|l!> 

ijii 

Hit 


« O P 

ft o < 


1 1 

J?| 2 

g g O 
H O o 


6 1 

5? 


1 

& . 

2 

Sag 
£48 
8 | | 
| s I 

§ f § 

l ! i 

« o* a 
« «j £ 

ft ft O) 



ft 

I 3 

S a 

g S 

1 i 

8 8* 
ft * 

0 ►> 

1 i 

tK ■a 


•c 

g 

& 

£ 8 

|1 

O 4) 

J U3 

« a 

5 a 

6 2 

§> 8 



C V 

a o 

I g 

c & 

a « 
o <o 

•N ^ 

i 1 

It 


Commonality /reuse 

The Software Requirements Reviews will provide insight into 
software management and compliance with program policies . 







c 

© 

© ^ 
N 0 

Q © 

£ 
$ b 

C r* 

© g 

•** ir 

4^ p 

.2^ 

§ 

Q 


& i 
£ 5 


•d 

1 

0 s 
5 2 * 
3 & 

l- 8 

■S a 

2 I 

3 & 


8 o 

s § 


•s «> 

a in 

n 

g © 

I a 

!| 

•d 2 

* g 

o O 

.o C 


1 3 

f S 5 

■s -g e 
13 3 

i * 


V « 


*s a 1 2 

« g «p 

^ a % O A) 


s£ 

s S 
© 
© 
cu 

CO 


ii 
i 1 


" ’a s 
1 's -3 


A) *H fM 

•8 U » 

% % £ 
Sou 


a 

1i 


V X 
o e3 


n s 


| 6 J 
S a <H 

s $ * 

■a 1 « 

O | S. 

3 G I 

« i> - 

Q, S 

ill 

8 'S I 


:§ s 3 
& & £ 


| 8 4 

•5 « « 

d V d 

8 ’S 5 

*3 ^ 5 

J5 V 6 





SSFP 







NASA Ada User's Symposium 

NASA/GSFC 
December 1, 1988 







£ 

& 

o 

CO 


University of Houston - Clear Lake 
Houston, TX 77058 
(713) 488-9433 





Software Engineering and Ada Training at NASA/JSC 



Software Engineering Professional Education Center 



An Introductory Editorial 



Software Engineering Professional Education Center 





Background 






Myth #1 


V) ** ^ 


© © 

= <s=> 


s <& 
© <1 
a© 


& 
off !=) 


© © 

a=j = 


ii 

© r^> 


t O o 

Q.® © 

§■«§ 

« 3 ~ 

■p ST ® 

C <D o 
d) »r •— 
r OC 

C Jr 3 

0 ) Q.i 

O) © £ 
ra — E 


T 3 -> 

CD 0 ±? 
C C 3 

®is :2 

c >» 

S to «5 
® w <o 
$ w © 

Qj d) o 

— 1 o o 
<D <l> 3 

_C C (/> 


.E c 

>,■2 

= to 

<2 ’to 

C C 

o ° 

N O 

00 

° o 
> 

"O to 
C -c 
CO -0 

-^"5 

© o 

®> 

>5 


© <3 

m N 

5 c 

5 © 

•sff 

© o 


© +- 

E.E 


Software Engineering Professional Education Center 




Myth #2 


O -o 
E CO £ 

r l. o 

O O CO 
3 CD 

E 03 

_ - <0 

5 C - 4- 
O <D ^ 

;»a 

®sr" 

SSo 

.. 2 o 

T3 E > 


a> > o> o ^ 

C Q) 

is 2 to <D > 

Sf E !2- 


C TJ 
CD "U <D 

E®? 
o >2 = 

£ S’® 

2 c — 

E •— a> 

- c N 
O CO c 
.®TJ-j= 

2 S a. 

o * O 


V# 

— U) 
O CO 


o 

c 

3 

■ MM 

c 

■ mmm 

2 

CO 

c 

CO 

c 

CO 

(2t) 

m 

@> 

o 

(0 

(0 

VN 

c 

CD 

E 

c 

3 

o 

o 

■ ■Mi 

to 

o 

■ mmm 

to 

0 

O 

3 

@> 

d) 

Q. 

CO 

CO 

o 

o 

n 

© 

-J 

(0 

■c 

CD 

3 

3 

w 

CO 

(?*) 

0) 

0) 
■ ■m 

Q) 

O 

£ 

“O 

CD 

"D 

CD 

0) 


Software Engineering Professional Education Center 



Myth #3 


■u 

C 

3 

o o 
- c/> 

« c ■o 

0 C — 

c ° "5 

C Q ^ 

o 

o -ti 73 

« C 
(D zi 
c _c o 

Cl> => -C 

x: > c/> 

*dg 

■j (/) ^ 


£ ro OT 

$■£ o 

_j Q> C 

a . 
c „ c 
o a) o 

« *= ■;= 
w § c5 

d> > o 
-j c 3 
O O 73 
f= <0 CD 


Software Engineering Professional Education Center 




3 

pg 


fa <8* 

© g 

© ‘S 


<© fa 

^3 ^ 


SS © 
eg S 


© 

^ © 
fc=» 


^ w 

O CO 

« ~! ® 
Q- ^ (/) n 

CO -2 '</) g 

£ 03 >\E 
O h; co co 
D 

c .5? co .= 

C ^ ^ CO 

(rt C « C 

CO O c 5 

w « p = 
BJ CD.S 
UJ ®-= </> 

-a >> £T 3 
co o £ « 

F a> «_ 2 


(OS ° r 

VcS 

CgcO 

o 5 t _ 

w $r ® o> 
w o J?.n 

®(fl5£ 

^ <D S ® 

Eo 


Software Engineering Professional Education Center 






Myth #5 


e© 

c=> 
oct aa 


( 5*5 ^ 

|i 

Sr — 


@ U 

OCT » 

C?=P <C=* 


& £ 


® © 
^ © 
C= 


.52 <o 

£ o> 

EZ O 


<0 

— > CO 
0 > 1 - 
i- 0) <D <D 
<D **" ^ JC 
J= >5 O 
h- — 5 CO 
CD 


c o 
.52 5 

£ 3 
<D -Q 

■■M ■> 

H 2 
.. ( 1 ) 
73 C 

e'I 

S-g 

=2 

8 ° 
</) >* 
( 1 ) Q. 

-j Q. 

CD D 
_c CO 


o z 

« c 
o a) 

SS 

C0 -Q 
CD w 
0)0 
"D CO 

a>7o 
5 a> 

8 S 

^ o 

V\ Jm 

"O £ 

a> > 

o co 

c S: 


CD .= 
Q.O) 

X c 

CD CD 


Software Engineering Professional Education Center 




Myth #6 


< D 

"3 0 


1 i 


(St) («£) 

m y 


CO : 

c = 

" E 

oS 


■ ■ o 

1 § 
CO ^ 
g 3 ^ 

— 1 o> 

C CO 

o c 

0) 3 

</> t 
0 o 


10 

^ 2 

O 0 

11 

o a) 

d) o 

a > 

a> "z 

CD co 

. a) 

Q-o 
o> o 
0 2 

<o 

C CO 

co +- 


H 

UJ 

2 

S| 

° 2 
a> s 
5 o 

V% 

C CO 
CO m 

o>> 
0 > 
-Q 

0 0 

E co 

■ MM 

t! o 
o2 

? 0 


n CO 
P)m 

£ » 
2 a> 
,c > 

■ MM 

(]) 0 
O 0 


<*=> 


c 2 
o ±: 

w T3 

>, ro 

S g> 

X! 5 


c .tr 

0 4- 

x: 0 

«S£ 

. T3 

I” 

<0 0) 


o „ 

0 ^ 

— 2 
0 0 

£ co 

O CL 

3 0 

.£ a. 


co 

3 a> 

o <5 

w 2 
0 ) S- 
x: o 
*- co 

c T 3 
* C 
•f- CO 

81 

U 

?-r 


— 3 
fl) *o 

5 o 
$: co 

O V- 

(0 o 

c -a 
” c 
c ra 


h- o 5 >*•- Is 





Directions 



Software Engineering Professional Education Center 










Credits Where Credits are Due 






Ada Development Laboratory 


The Jet Propulsion Laboratory: 
Transition to Ada Software Development 


Gary N. Walker 
1 December 1987 


Ada Development Laboratory 


Catalysts for creation of .TPL Ada 


Development Laborator 


Limited JPL experience with Ada 

Global Decision Support System 

-- Command and Control System for Military Airlift Command 

- 279K Lines of Ada Code (374 L.O.C. with comments, etc.) 

- 12 - 15 Subcontractors 

- Interfaced with RDB and GKS through Fortran, C, and Macro 

JPL commitment to software development improvement 

SSORCE burden funded software development organization 

- SORCE to sharpen software engineering methodologies and standards 

- SERC to support systems engineering and system management 

- SPARC to support software product assurance programs 
-- SI&TRCE to support systems integration and test 

- OPERC to support operations engineering 

JPL’s need to keep in step with technology 
and sponsors' needs. 

- Ada support for current software engineering methodologies 

- Increasing number of NASA, FAA, and DoD Ada directives 


JPL management realized that better tools are required. 


— Save money 

- Save time 

- Improve consistency 

— Improve quality 



Ada Development Laboratory 


A centralized JPL Ada Development 
Laboratory intended to : 

— Provide Ada tools for development 

Lack of tool continuity: Most JPL work is done on a project basis. 
Projects procure equipment and software tools necessary for a given 
work unit. In most cases, tasks return tools as deliverables. 

Lab management decision to make institutional commitment to a 
centralized facility to benefit a wide spectrum of tasks and provide 
for continuity. 

— Train and educate JPL personnel 
-- Provide a testbed for metrics study 
— Provide a source of consultation assistance 


— Promote Ada and software engineering practices 
(users’ group, etc.) 


Ada Development Laboratory 


Training and Education: 


Educate 


Train 


Management 

Sponsors 

Architects & Engineers 
Programmers 


X 


X 


X 

X 

X 

X 


Training includes developing proficiencies in the use of 
Ada, software engineering tools, and environments. 

Education includes: 

— What are "good" software engineering practices? 

-- What Ada is? 

-- What Ada is not? 

— What Ada will do for development? 

-- What Ada will do to development? 




Ada Development Laboratory 


r 

Staff Development: 


Training 

-- Rational Fundamentals 
— Advanced Topics 

— Basic Subsystems and Configuration Management 

-- Networking 

-- Design Facility 

-- Target Build Facility 

-- Cross Development Facility 

-- Project Design Methodology 

— Ada fundamentals 


Education 

-- Management class 

— Seminars on concept of dealing with Ada 


J 


Ada Development Laboratory 




ADL Facility and Equipment Suite: 



^ ‘ILAN 


1300 Sq. Ft. development center being built 
Reuse of an existing VAX 

Institutional purchase of Rational R1000 Model 20 

Microcomputer equipment support 
-- Design tools 
— Ada compilers 
- Ada tutorials 






Ada Development Laboratory 


r 

Rational; 

The Rational Ada Development System 

• Validated Ada® compiler 

• Ada-specific productivity tools 

• Networking compatibility with ILAN and TCP/IP 

• Configuration management and version control 

• Workorder/change tracking 

• Statistics collection 

• Standardized documentation generation 

• A user/vendor customizable user interface 


j 


Ada Development Laboratory 


r 


Rational: 


Advantages of Using a Universal Host Environment 

- High degree of parallelism can be built into schedules 

- Selection of the host hardware architecture and operating system can be delayed 

- Training and tool development in a common environment 

- Project managers are more flexible to move staff among tasks for different targets 

- Tools have permanence and are reuseable 

- Incremental compilation provides rapid turnaround 

- Host/target debugging uses universal host environment while working on target 
-- Common and host specific code are manageable in the same environment 


Universal Host Development 

Non-Embedded 

Application Rational R1000 


Embedded 

Applications 










PROIFCT DEVELOPMENT 

MANAGEMFNT DOCUMENTATION ACTIVITY 

MAiNAl^MhlNI DELIVERY 


Ada Development Laboratory 


The Software Lifecycle and Rational Tools 




Rational Design Facility 


Target Build Utility 
Zross-Development Facilities 


Rational Subsystems 

Configuration Management and Version Control 

Mail 


Rational Environment 






Ada Development Laboratory 


Current Ada Activities at JPL: 


Network Operations Communications Center Upgrade 

— Development on Rational and VAX 

- Target Host is to be determined 


Ground Communications Facility Upgrade 

- Development on Rational and Gould 

- Target Host is Gould 


ASAS/ENSCE 

-- Development on Rational and VAX 
— Target Host is VAX 


Realtime Weather Processor 

- Development on VAX 

— Target Host is VAX 




Ada Development Laboratory 


r 


A 


Problems to he Addressed: 


Manpower 

-- Hiring 
- Maintaining 
— Training 


Who should purchase? 


VAX Type Ada Compiler 
(iVAX II $ 15.7K 

11/780 $ 31.7K 

8600 $ 57.5K 

8800 $ 70.6K+ 


VAXSET Ada Environment 
$ 16.4K 
$ 33.1K 
$ 60.2K 
$ 98.6K+ 


For what work is Ada appropriate? 


What Ada features should be used? 


How should compiler compatibility be studied? 


How should tool development be funded? 


Hew r' uld reuse libraries be maintained? 






o 

ft 

C0 


o 

CO 


N 

a 


< 

o 


l 

O 


£ 

<D 

>< 


U 

0$ 


•wi 

Q 

tfO 
< fe 

cd 

*rt 

O CO 


rj 

o o 


Q 

g N 


CO 

M «2 

-M 

fl 


g 

CO 

O 

*3 

cd 

Pm 

0) 

a 


O 

a 

0) 

•H 

ft 

ej 


•fi 

0) 

& 

&3 

S 

HH 



Ada/PROMISES 






Increased Management Visibility 




cd 

*d 

< 

fa 

O 


C0 

£ 

o 

HH 

s 

o 

fa 

fa 

X 


fa 




& 

■s -a gf 


£ C ’cjOX) 

||s I 
SSSl 


* 


Fred Brooks "No Silver Bullet" 



Ada PROJECTS IN FLIGHT DYNAMICS DIVISION 



D217.003 




SOFTWARE CHARACTERISTICS 


0 2 

y ^ s 

0 - o 

^ — L_ 

to 


o 

O 

o 

o 

. o 

o 

o 

o 

o 

o" 

o 

o 

m 

o 

i n 

co 

to 

CM 

CM 


CM 

1 — 

-* — 




to 

-J 'P 
w 73 

GO < 
CC LU 
< 2 
> P 
00 o 

< CC 
Q CO 
Li_ “ 


GO 

LJJ 

O 

0 


< 

O 

< 

o 

0 


c n 
T3 
< 

LU 


Q 


CM 


-2 

< 

UJ 


> ^ 
Q I— 

o L— 

cr co 

o r 


o 

o 

o 

in 

r^ 


o 

o 

o 

o 

o 

r^ 

o 

o 

o 

co 

co 

'I — 

o 

uo 

co 

I s - 

- 

o 

o 

o 

o 

O 

o 

o 

o 

o 

o 

o 

o 

co 

CD 

i — 


h- 

CO 

CM 



O 

o 

o 

o 

o 

o 

o 

CD 

in 

o 

CO 

co 

CM 

' r— 

CD 

O- 


o 

o 

o 

m 

CM 


o 

O 

O 

O 

o 

o 

to 

O 

o 

o 

CM 

in 

CO 

o 

o 

CM 

CM 

CD 


CM 


no 

0 s - 

CM 

O' 


(T 

CM 

CO 


cO 

CO 

CO 


OO 

00 

O 

< 

cr 

h- 

o 

o 

m 

o 

o 

o 

o 

o 

in 

O 

O 

CO 

6% 

oc 

cr 

m 

CD 

CM 

CM 

co 

0 

O 


CM 

CM 

CM 



cr 

O 

CO UJ 



— 1 o cn 

< 

i — *— 


o o o 


oo 

LU 


J — * 

- o 

Ul LU 

in ° 

LU 
CL 
=> > 
O h " 


H. 



o 

LU 

Q 


Q 

UJ 

00 

3 

LU 

CC 

\0 

O' 


^ C\J CO 


to 

O 

o 

r-- 

c\j 

O 


. Ada RESULTS IN LARGER SYSTEM (SL0C) 
. REUSE TREND VERY POSITIVE 
. “'LINE OF CODE" DEFINITION CRITICAL 



Ada IMPACTS ON LIFE CYCLE EFFORT DISTRIBUTION 





o 

CO 
Li J 
Q 

UJ 

cl: 

cl 


2 

o 

co 

UJ 

Q 


UJ 

Q 

O 

O 


h- 

co 

LU 
1 — 


i — 

cc 


o 


al c /) 
- i or 
< z> 




EFFORT DISTRIBUTION BASED ON PHASE DATES (£.G. END DESIGN, END CODE, END TEST) 
PARTIALLY BASED ON ESTIMATES TO COMPLETION 





Ada COST/PRODUCTIVITY 



ORIGINAL PAGE fS 
OF POOR QUALITY 




USE OF Ada FEATURES 












Ada AND ERROR/CHANGE RATE 


co 

< CO O 

Q co t— ' 

Lt_ 


C/D T ^ 

lli c\i 

O 
(3 


< 

Q 

< 

o 

o 


co 

c\j t-' 


> 

O 

O cvJ co 

CC T 

o 


CO < 

co o: 
O i- 
CC 0C 

o o 

LJL 


co ^ 

m co 


O 

O 

00 
c h 

L1J 

o 

< 

-L 

o 


o 

o 

00 

oo 

□c 

O 

cr 

DC 

UJ 



i j 


ORIGINAL PAGE !S 
OF POOR QUALITY 


*SL0C = TOTAL LINES (INCLUDES COMMENTS/REUSED) 




ERROR CHARACTERISTICS 



ORIGINAL PAGE IS 
OF POOR QUALITY 


• Ada ERROR PROFILE CHANGES WITH MATURITY OF USE 

• Ada HELPS CUT INTERFACE ERRORS 










1HOT43 SHV3A NVW 


Experience Base is Small and 
Growing Too Slowly 



EVOLVING IMPACTS OF Ada 




& 



3 

1— ( 




9 

M 



i — i 

-J 

C f) 
D 

C£1 

o 


§ 

N 

u 

K 


00 

r— ♦ 

<N 

CO 



lO 


CD 


EXPERIENCE BASE • EVOLUTION TO ADA (FROM STANDARD FORTRAN) - 10 YEARS + 

• CURRENT EXPERIENCE BASE IS GROWING TOO SLOWLY 



1 o 



p 

0 

Cjl, 

Z o 

01 

5 


P 03 

gs 

hQ 


>- 

p 

p 

So 


X 

U Q 
< 
o 


P 


3s 

PCS) 
O ■ 

X 
p 


E 

% 

fc 

o 

CO 

> 

CQ 

h> 

00 


CO 


p 

s 

CO 
CO 

„ p 
p <: p $ 
P 2 .J d 

<9op 

5 O p d 

§8Si 

S§gf 

E • • 

CO 


2 

P 

P 

CO 

co 

H 

2 

P 

£ 

1 

P 

P 

s 

t— » 

o 

2 


03 

■o 

< 

H 

P 

O 

co 

P 

O 

2 

p 

„ <o 

S co 

o >"2 

9 ! 


p 

CO 

< 

CQ 

P 

o 

2 

P 

2 

p 

p 

X 

p 



0 

03 

< 


03 

0 


*— < 

"O 

< 

2 

H 

p 

T3 

< 

p 

3 

p 

p 

0 

CO 

£ 

Q 

P 

0 

2 

£ 

2 

p 


2 

p 


r 

2 

0 

£ 

D 

2 

5 

2 

p 

0 . 

P 

b 

_} 

2 

c n 

O 

Cu 

X 

u 

E 

H 




p 



• 

1 — 1 

CN 

00 

• 

rH 

c4 


co 


PLANS FOR BUIDLING BASE - MINIMAL (LOOKING TOWARD OJT) 



IMPLICATIONS/OBSERVATIONS 
(Generalizing to NASA) 



Critical need for Software Measurement 

NASA Infrastructure Heading in Supportive Direction 





IMPLICATIONS/OBSERVATIONS 



^CO 

<2 

Zh 
•— 1 <c 


w 


co 


Pm 


cu 


CO 


Q 

Q 

Q 

2 

2 

2 

pH 

P-l 

Ph 


HH 

£ 


2 

2 

« 

W 

W 

Q 

t—H 

Q 

►— i 

Q 

H-H 

w 

W 

P) 

2: 

2 

2 

o 

O 

O 

2 

2 

2 

• 

• 

• 


Q 

w 

w 

2 

w 

X 

H 


w 

g 

o 

g 

w 

Q 

N. 

o 

2: 


H 


>< 

O 

2 ; 

w 

o 

2 : 


o 

o 


w 

s 

CO 

CO 

w 

i 

pc: 

o 

Ph 

CO 


D 

1 


PLANNING FOR 'Ada' HAS BEEN 
INADEQUATE 



EVOLVING TO Ada 


< 


$ 


(A 

W 

O 


cu 

X 


K 

O 

Cl. 


Q 

►—i 

X 

£ 

w 

s 

( 7 ) 
> — < 


03 

< 





H 

« 


feg 

8<c 


CO 


o 




a. 


cx 


— i <N CO 




} 





DIRECTIONS WITH Ada 


OQ 

O HH 
10 CO 

§ ° 
§° 
Oo 

*") CO 

5 H 

3 S 

o 

a. 


j? 


u 

V 

+-> 

<u 

<u 

^5 


o 

o 

lO 

<v 

TO 

O 

a 


* 

•rH 

73 

a 

o 

6 

6 

o 

a 

C/3 

C/3 

<D 

S 

c 3 

£ 

ctf 


Vh 

S’- - 

St s 

flj CJ 

| b|s 

p cx< c 
« ^.2 
06 >> c 3 § 

22 S§! 

•a 

•a is I 

c3 £.§-a 

TO OO g 

< 

rH* (N 



o 

p 

•+-> 

a 

<3 

TO 

< 

tuo 

C 

p 

PS 

Q 


C/3 

O 

O 

+-> 

£ 

<u 

s 

pH 

o 

73 

£> 

Q 


o 

p 

•rH 

c 

tuo 

•rH 

(f) 

c/3 
TO 
P 
< 

’P £ 

<3 ^ Qh 


<D 


CO ^ 


lO 


CO 


J-H 

o 

a 

£ 

<D 

P 


TO 

P 

c* 

<u 

r— H 

TO 

TO 

2 



DIRECTIONS WITH Ada IN NASA 



< g 

pc 

w P 


a 

a 3 
co <, 


sgg 

%n 

CO .5 $ 

w cf b 

_ <D 


o 2 <H 
O P 

u, ° 2 

cu co co 




Appendix A: 


OPEN DISCUSSION 







PRECEDING PAGE BLANK NOT FILMED 


OPEN DISCUSSION 


Moderator 

Ed Seidewitz, Goddard Space Flight Center 
Panelists 

Gary Walker, Jet Propulsion Laboratory 
Michael Holloway. NASA Langley Research Center 
William Howie, NASA Marshall Space Flight Center 
Frank McGarry, NASA Goddard Space Flight Center 
Robert Nelson, NASA Space Station Program Office 
Kathy Rogers, MITRE (for NASA Johnson Space Center) 

Recorder 

Dwight Shank, Computer Sciences Corporation 


The final session ot the symposium provided the opportunity for an active, open discussion between the 
audience and panelists representing various NASA centers. The following is not a transcript of the session, 
but is instead an attempt to summarize some key points addressed during the discussion. These points 
are organized into broad areas which reflect the general themes which emerged during the course of the 
symposium. 


Transition 

There are both management and technical issues involved in the transition to Ada. The panel was asked to 
address the issue of managing the risk ot transition. Bob Nelson remarked on the need for a risk management 
approach and on the management of risk at the project as well as the organizational level. 

There were also comments from the audience on specific projects which addressed risk management. Fileen 
Quann of Fastrak Training mentioned that risk management was an important consideration in the decision to 
use Ada for the Second TDRSS Ground Terminal project at Goddard. A representative from Logicon related 
that there was much emphasis on risk management in the study of Ada by the FAA. The FAA also ultimately 
decided to use Ada for their Advanced Automation System. 

Another transition issue is the “conversion” of programmers to Ada. Programmers are known to often be 
quite loyal to a particular language. However, Frank McGarry noted that once people begin to use Ada on 
real projects, they do not want to go back to the language they used before. Fd Seidewitz mentioned that 
Rational had begun early development with a large number of LISP programmers, who became strong Ada 
converts and refused to maintain their previous LISP code. 

There can be, nevertheless, considerable resistance to the switch to Ada. A representative from PRC com- 
mented that experienced C and Pascal programmers consider Ada to have “too much overhead” and they 
complained that “Ada was designed to control the programmer.” Gary Walker remarked that the transition 
Irom MODULA II to Ada is easier. MODULA is now taught in several schools. 


Methodology 

There is an increasing emphasis on the use of object-oriented design with Ada. However, there was some 
concern in the audience about the maturity of object-oriented methodologies. 

I’d Seidewitz replied that the problem is partly that different people mean different things by the term 
“object-oriented design.” Nevertheless, there are some important, useful concepts which are common to all 



object-oriented approaches, such as abstraction and encapsulation. The object-oriented methodology devel- 
oped by and used in the Flight Dynamics Division at Goddard has proven effective so far. though more 
experience is needed on judging the quality of proposed designs. 

Kathy Rogers commented that a major issue is the scaling up of object-oriented approaches to larger and more 
complex systems. Eric Booth of CSC stated that they had run into a wall with the original object-oriented 
approaches at sizes of 200 to 300 thousand lines of code. However, much of this problem could be over- 
come by the use of the object-oriented “subsystem” concepts. Ed Seidewitz indicated that with such tech- 
niques, he believes object-oriented design can readily scale up to large systems. 


Training 

Several speakers during the symposium stressed the importance of effective training and especially the gaining 
of hands-on experience in the use of Ada. The panelists were asked how big they felt a training project had to 
be to give new Ada programmers practical experience. 

Frank McGarry felt that the Electronic Message System (EMS) project used for early training in the Goddard 
Flight Dynamics Division was of marginal size at 8 to 10 thousand lines of code. Ed Seidewitz remarked that 
EMS would have been a better exercise if it had been more directly applicable to the application domain of 
the division. However, such training projects are often difficult to formulate. 

Glenn Freedman commented from the audience that the real scaling issue was complexity, not size. He be- 
lieves that a good pilot project is a complete Ada Artifact, such as that being considered by the Software 
Engineering Institute, on which students can build. 


Reuse 

There was a strong interest in ways to promote the reuse of code across projects. However, there was also a 
feeling that current contracting approaches discourage this. Bob Nelson expressed the need for contractual 
mandates for reuse. 

Effective reuse also requires a common repository of quality reusable components. Cora Carmody from PRC 
mentioned that the space station Software Support Environment (SSE) will apply qualification criteria to 
software in its reuse library. Components will have to meet both functionality and complexity requirements. 
The exact method for doing this is still under development. 

Kathy Rogers commented that the space station project also plans to reuse more than code. This includes the 
reuse of such things as requirements and staffing plans. 


Real-Time 

There was considerable discussion of the use of Ada in embedded, real-time applications. There are still con- 
cerns with the performance of Ada in time critical situations, especially when tasking is involved. The panel 
seemed to feel that the problems right now were mostly with poor implementations, rather than with flaws in 
the language itself. 

Frank McGarry stated that he felt that Ada implementations were not yet ready for real-time applications, but 
that most software does not have real-time requirements. On the other hand, Bob Nelson said that these 
issues were being addressed for the space station through ongoing prototyping, and that early indications are 
that Ada is OK for real-time. 

Dan Rov of Ford Aerospace commented from the audience on the great improvement certain implementa- 
tions have made in reducing the time for a synchronous rendezvous, down to 25-500 microseconds. He also 




mentioned that if one has problems with tasking, it is possible to do real-time applications using a non-tasking 
subset of Ada. This should be just as easy as doing these applications in other non-tasking languages, with 
similar performance. 

Stephen Leake from the National Institute for Standards and Technology described his work on the use of 
Ada for NASA Flight Telerobotie Servicer robotics software. At Goddard they are currently reimplementing 
a robotic control system in Ada. He believes that the Ada system is much better than the original and that the 
execution speed is good. 

There was general agreement that it is very important to choose a good compiler if you need to make effective 
use of tasking. However, there was still some concern with the fundamental Ada tasking paradigm for hard 
real-time applications. There was disagreement on how far the Ada 9X standard revision will go in altering the 
tasking model, though the Ada 9X process will certainly address tasking issues. 

Besides execution speed, there were some remarks on the varying Ada source-to-machine-instruction expan- 
sion ratios presented by various speakers. Kathy Rogers commented that this is highly implementation depen- 
dent and that it is improving. However, Dan Roy responded that he did not feel that such expansion ratios 
were really important measures, and Bill Howie did not even consider them valid. 


Conclusion 

To conclude the session, the moderator asked each panelist how he or she would advise a new NASA adminis- 
trator to ease the transition to Ada. 

Gary Walker felt that NASA headquarters should not make edicts, but should give support to the centers. 

Michael Holloway throught that it was important for Langley to catch up to the other centers in the use of 
Ada. 

Bill Howie stated that the most important thing is to promote education and training, to both technical and 
management personnel. 

Frank McGarry felt that NASA headquarters should go beyond just supporting the use of Ada, and actually 
mandate Ada as the common NASA language. 

Bob Nelson, however, was uncomfortable with the idea of a mandate, saying that people in NASA are not 
used to such dictates from headquarters. He stressed, instead, the importance of incentives to promote the 
use of Ada. 

Finally, Kathy Rogers felt that NASA should revisit the software development life cycle and replace the 
inadequate waterfall model. 






PRECEDING PAGE BLANK NOT FILMED 


Appendix B: 

ATTENDEES OF THE 
FIRST NASA ADA USERS’ SYMPOSIUM 









PRECEDING PAGE BLANK NOT FILMED 


Alanen, Jack 
Amsler, John 
Anderson, Marshall 
Badal, David 
Barber, Gary 
Barksdale, Joseph 
Bartlett, Tom 
Bates, Eileen 
Beall, Daniel 
Bennett, Toby 
Blue, Velma 
Bobzien, Gale 
Bognar, Jeff 
Booth, Eric 
Bradley, Stephen 
Brady, Talbot 
Brechbiel, Fred 
Bredeson, Mimi 
Bredeson, Richard 
Brierschmitt, Michael 
Brinker, Elisabeth 
Britt, Chester 
Brophy, Carolyn 
Brown, David 
Brown, James 
Burt, Roger 
Butler, Madeline 
Carmody, Cora 
Carr, Maureen 
Carroll, Rossye 
Caughel, Brian 
Cernosek, Gary 
Chang, Joan 
Chen, Jennifer 
Chiung, Ted 
Chu. Richard 
Church, Vic 
Cisney, Lee 
Clark, David 
Clem a. Joe 
Colaizzi, Donald 
Court, Terry 
Cross, James 
Cuddic, Jim 
Cupak. John 


ATTENDEES 


Sohar, Inc. 

OAO Corp. 

Dept, of Defense 
Lockheed Missiles & Space Co. 
Intermetrics, Inc. 

NASA/GSFC 
GSFC/NASA 
IDE, Inc. 

Ford Aerospace Corp. 

Ford Aerospace Corp. 

Defense Communications Agency 
PSC 

DCA/JDSSC/C344 
Computer Sciences Corp. 

MMS Systems 
Jet Propulsion Lab 
Computer Sciences Corp. 

Space Telescope Science Inst. 
Omitron 

Ford Aerospace Corp. 

NASA/GSFC 

Defense Communications Agency 

University of Maryland 

Auburn University 

Jet Propulsion Lab 

Jet Propulsion Lab 

NASA/GSFC 

Planning Research Corp. 

McDonnell Douglas Astronautics Co 
Computer Sciences Corp. 

Cadre Technologies 

McDonnell Douglas Astronautics Co 

Computer Sciences Corp. 

Computer Sciences Corp. 

Ford Aerospace Corp. 

Ford Aerospace Corp. 

Computer Sciences Corp. 

NASA/GSFC 

Unisys Corp. 

IITRI 

Computer Sciences Corp. 

Hughes Aircraft Company 
Auburn University 
Martin Marietta 
HRB Systems 




Daniell. Walter 
Daniels, Catherine 
Diclaudio. Mary 
Drew, Dan 
Driesman, Debbie 
Dyer, Kevin 
Ebker, Keith 
Edelstein, E. 

Edgar, Eric 
Ellis, Walter 
Emerson, Curtis 
Em mart, Connie 
Esker, Linda 
Evers, Jay 
Ferguson, Frances 
Fermino, Kerri 
Ferry, Dan 
Finnegan. Kenneth 
Firsching, Dorothy 
Fly, Ken 

Formanek, Kathleen 
Freedman, Glenn 
Gacuk, Peter 
Garcia, Enrique 
Gardner, Michael 
Gilliland, Denise 
Gilyeat, Colin 
Girone, Chuck 
Godfrey, Sally 
Goldberg, Nancy 
Gordon, Marc 
Grafton, Ed 
Graves, Rusell 
Griswold, Robert 
Guenterberg, Sharon 
Gupta, Lakshmi 
Main, Gertrud 
Hain, Klaus 
Flail, David 
Hall. Gardiner 
Halterman, Karen 
Haney, Modenna 
Harris, Bernard 
Hartman, Ken 
Hebenstreit. Karl 
Heffernan. Henry 
Heyliger. George 
Higgins. Herman 


IBM 

Defense Communications Agency 
Jet Propulsion Lab 
Unisys Corp. 

Computer Sciences Corp. 

Adanet 

Computer Sciences Corp. 

Grumman Data Systems 

HRB Systems 

IBM 

NASA/GSFC 
Computer Sciences Corp. 

Computer Sciences Corp. 

Unisys Corp. 

Stanford Telecommunications Corp. 
Stanford Telecommunications Corp. 
Computer Sciences Corp. 

Martin Marietta 
PRC 

NASA/GSFC 
Martin Marietta 

University of Houston at Clear Lake 
Spar Aerospace 
Jet Propulsion Lab 
Computer Sciences Corp. 

Stanford Telecommunications Corp. 
Advanced Technology, Inc. 

GE Astro Space 
NASA/GSFC 
Computer Sciences Corp. 

Booz, Allen & Hamilton 
Link Flight Simulation Corp. 

Dept, of Defense 

Computer Technology Associates 
Planning Research Corp. 

Ford Aerospace Corp. 

Computer Based Systems, Inc. 

Ford Aerospace Corp. 

OAO Corporation 
Martin Marietta 
NASA/GSFC 
Computer Sciences Corp. 

Logican, Inc. 

GCN 

Computer Technology Associates 
Dept, of Defense 





Holloway. Michael 

NASA/LaRC 

Holmes, James 

Unisys Corp. 

Howie, Bill 

NASA/MSFC 

Huber, Hartmut 

NSWC 

Hutchison, Roberta 

The Mitre Corp. 

Iseman, Chelsea 

Defense Communications Agency 

Jackson, Laverne 

PRC 

Janaczek, Mark 

Martin Marietta 

Jaworski, Allan 

Software Productivity Consortium 

Jessen, William 

RCA - ESD 

Johannson, Hank 

Ford Aerospace Co. 

Kannappan, Sam 
Kathuria, Manbir 

ABI Enterprises 

Kelly, John 

Jet Propulsion Lab 

Kelly, Lisa 

NASA/GSFC 

Kelly, Nancy 

PSC 

Kim, Seung 

Computer Sciences Corp. 

Kirby, Philip 

NASA/GSFC 

Kirk. Daniel 

NASA/GSFC 

Klein, Camille 

Hughes Aircraft Co. 

Klitsch, Gerald 

Computer Sciences Corp. 

Kubaryk, Peter 

IITRI 

Kudlinski, Robert 

NASA/LaRC 

Labaugh, Robert 

Martin Marietta Aerospace Corp. 

Lavallee, David 

Ford Aerospace & Comm. Corp. 

Leake, Stephen 

NIST 

Ledford, Rick 

McDonnell Douglas Corp. 

Lee, Sophia 

Defense Communications Agency 

Lee, Tom 

NASA/GSFC 

Leenhouts, Kathleen 
Liebhardt, Edward 

General Electric 

Lin, Chi 

Jet Propulsion Lab 

Lin, Meng-Chun 

Integral Systems, Inc. 

Littman, Dave 

NASA/GSFC 

Liu, Kuen-San 

Computer Sciences Corp. 

Lloyd, Michael 

General Dynamics 

Loesh, Bob 

System Technology Institute 

Lowe, Dawn 

NASA/GSFC 

Mall, Vance 

Independent Consultant 

Mallet, Bob 

Technology Planning, Inc. 

Mangieri, Mark 

Johnson Space Center 

Marciniak, John 

Marciniak & Associates 

Martinez, Bill 

Ford Aerospace Corp. 

Mathiasen, Candy 

Unisys Corp. 

Maury, Jesse 

NASA/GSFC 

McComas, Dave 

NASA/GSFC 

McCullough. Sterling 

Computer Technology Group 

McDonald. Beth 

Dept, of Defense 



McGarry. Frank 

NASA/GSFC 


McKcag. Thomas 

HRB Systems 


Mixon. Don 

Tlie Mitre Corp. 

ms 

Mohrman, Car! 

Martin Marietta ATC 


Molko, Patricia 

Jet Propulsion Lab 

z a 

Montoya, Maria 

McDonnell Douglas Astronautics Co. 


Moore, Mike 

CTA. Inc. 


Mularz, Diane 

The Mitre Corp. 

3 _ 

Murphy, Robert 

NASA/GSFC 


Naab, Joseph 

NASA/GSFC 


Nelson, Robert 

NASA Space Station Program Office 

= ; 

O'Brien, David 

Concurrent Computer Corp. 

■i 

Osman, Jeffrey 

Jet Propulsion Lab 


Owens, Kevin 

PRC 


Owings, Jan 

NASA/GSFC 

""" 

Patel, Kant 

Computer Sciences Corp. 


Peters, Karl 

NASA/GSFC 

w 

Pineosy, John 

Data Systems Analysis 

mm 

Pixton, Jerry 

Unisys Corporation 


Plunkett, Theresa 

Dept, of Defense 


Pulco, Joe 

Concurrent Computer Corp. 


Ransom, Bert 

NASA/C. SFC 


Rennie, Tom 

NASA/GSFC 


Reph, Mary 

NASA/GSFC 


Rice, Raymond 

McDonnell Douglas Astronautics Co. 


Rigney, Brandon 

PRC 

w 

Ritter, Sheila 

NASA/GSFC 


Roberts, Becky 

PRC 

E==S i 

Robertson. Laurie 

Computer Sciences Corp. 

t a c 

Robinson. Mary 

The Mitre Corp. 


Robison III, W. 

Jet Propulsion Lab 


Rogers, Kathy 

The Mitre Corp. 


Rohr, John 

Jet Propulsion Lab 


Roy. Daniel 

Ford Aerospace Corp. 

fei ! 

Rucki, Dan 

Dept, of Defense 

s : 

Sabnis, Releha 

Computer Sciences Corp. 


Sank, Victor 

FHA 

4 

JD:. -2* 

Schubert, Kathy 

NASA/LeRC 

m i 

Schwenk, Robert 

NASA/GSFC 


Seeger, Howard 

Science Applications International Corp. 

gj I 

Seidewitz, Fd 

NASA/GSFC 


Seo, Kyungsil 

Defense Communications Agency 

C3 l 

Severino, Tony 

General F.lectric/RCA 

Shen, Vincent 

MCC 

m 

Skinner. Judith 

Jet Propulsion Lab 


Smalling. Richard 


i 

Smith. David 

Hughes 


Snyder. Glenn 

OAO Corporation 



Soloman, Carl 

NASA/GSFC 

Spence, Bailey 

Computer Sciences Corp. 

Stammerjohn, Amy 

Grumman/PCS 

Stammerjohn, L. 

The Mitre Corp. 

Stanley, Carolyn 

Martin Marietta 

Stark, Michael 

NASA/GSFC 

Steinbacher, Jody 

Jet Propulsion Lab 

Stevenson, Jeff 

Martin Marietta 

Stickle, Richard 

HEI 

Szulewski, Paul 

C. S. Draper Labs, Inc. 

Tasaki, Keiji 

NASA/GSFC 

Thackery, Kent 

Planning Analysis Corp. 

Thompson, John 

Ford Aerospace Corp. 

Tindal, M. 

NASA/GSFC 

Troeki, Martin 

Intermetrics 

Tsounos, Andrew 

SF.l 

Tupper, Burr 

Intermetrics 

Usavage. Paul 

General Electric 

Venkataraman, Ravi 

ST Systems Corp. 

Vernacchio, A1 

NASA/GSFC 

Vladavsky, Luba 

Logicon, Inc. 

Wackley, Joseph 

Jet Propulsion Lab. 

Walden, G. 

Aerospace Corp. 

Waligora, Sharon 

Computer Sciences Corp. 

Walker, Harry 

Jet Propulsion Lab 

Walker, Scott 

IDF.. Inc. 

Wall, Doug 

IDF, Inc. 

Wallace, Charles 

Raytheon Service Co. 

Weisman, David 

Unisys Corp. 

Welborn, Richard 

Stanford Telecommunications, Inc. 

Wilson, Jean 

MDAC/KSC 

Wong, Yuen Yi 

Defense Communications Agency 

Wood, Richard 

Computer Sciences Corp. 

Yang. Chao 

NASA/GSFC 

Young, Eugene 

NASA/GSFC 

Zahn, Maryanne 

HE I 






Appendix C: 


STANDARD BIBLIOGRAPHY OF SEL 

LITERATURE 





STANDARD BIBLIOGRAPHY OF SEL 

LITERATURE 


The technical papers, memorandums, and documents listed in 
this bibliography are organized into two groups. The first 
group is composed of documents issued by the Software Engi- 
neering Laboratory (SEL) during its research and development 
activities. The second group includes materials that were 
published elsewhere but pertain to SEL activities. 


SEL -ORIGINATED 




cs 


SEL-76-001, Proc eedings From the First Summer Software Engi- 
neering Workshop . August 1976 

SEL-77-002 , Proceedings From the S econd Summer Software En- 
gineerin g Workshop . September 1977 

SEL-77-004 , ^De monstration Of AXES for NAVPAK . M. Hamilton 
and S. Zeldin, September 1977 

SEL-77-005 , GS FC NAVPAK Design Specifications Languages 
Study. P. A. Scheffer and C. E. Velez, October 1977 

SEL-78-005 , Proceedings From the Th ird Summer Software Engi- 
neering Workshop . September 1978 

SEL-78-006 , GSFC Soft ware Engin eering Research Requirements 
Ana lysis — Study , P. A. Scheffer and C. E. Velez, November 1978 

SEL-78-007, Applicability of the Rayleioh Curve to the SET. 
Environment . T. E. Mapp, December 1978 

SEL-78-302, FORTRAN Static So urce Code Analyzer Program 
(SAP) Us er's Gui de (Revision 3 j , w. J. Decker and 
W. A. Taylor, July 1986 


SEL-79-002 , The Soft ware Engineering Laboratory! Relation- 
ship Equations, K. Freburger and V. R. Basili, May 1979 


SEL-79-003 , Common Software Module Repository 
Des cription and User's Guide , c. E. Goorevich, 
and S. R. Waligora, August 1979 


A. L. Green, 


SEL-79-004, Evaluation of the Caine. Farber. and Gordon Prn- 
gram Design Language (PPL ) in the Goddard Space Flight Cen- 
■tSLE — (GSFC) Code 580 Sof tware Design Environment . 

C. E. Goorevich, A. L. Green, and W. J. Decker, September 


9913 


B-l 


PRECEDING PAGE BLANK NOT FILMED 




SEL-79-005, Proceedings F rom the Fourth Summer Software Eh 
aineering Workshop , November 1979 

SEL-80-002, Multi-Lev el Expression Design Language ^ 
Requirement Level (N EDL-R) System EvaluatiQB, W. J. Decker 
and C. E. Goorevich, May 1980 

SEL-80-003, Multimission Modular Spacecr aft Ground SuppQ jdi 
software system (mms/gsss > state-of-the-Art Computer Systems/ 
c.ompatibi 1 i tv Study , T. Welden, M. McClellan, and 
P. Liebertz, May 1980 

SEL-80-005 , a study of the Musa Reliab ility Model/ 

A. M. Miller, November 1980 

SEL-80-006, Proceedings F r om the Fifth Annual Software Engi- 
neering Workshop , November 1980 

sel- 80-007. An Appraisal of Se lected . Cos t/Pesource Fstima = 
tion Models for Software Systems / F* Cook and 
F. E. McGarry, December 1980 

SEL-81-008 , Cost and Reliabil ity Est ima ti on Models (CARSM) 
User * r Guide . J. F. Cook and E. Edwards, February 1981 

SEL-81-009, Software Engineering Laboratory Programmer Work- 
bench Phase l Evaluation . W, J. Decker and F. E. McGarry, 
March 1981 


SEL-81-011, Evaluating Software D evelopment by. Analysis of 
Ghanoe Data , D. M. Weiss', November 1981 

SEL-81-012, The Ravleigh Curve as a Model fQ t Effort Distri- 
bution Over the Life of Medium Scale Software Systems* G. 0. 
Picasso, December 1981 


SEL-81-013 , Proceedings From the Si xth Ann ual Software Engi- 
neering Workshop , December 1981 


SEL-81-014 , Automated Coll e ction of Software. Engineering 
Data in the Software Engineering La boratory j SEL) , 

A L. Green, W. J. Decker, and F. E. McGarry, September 1981 


SEL-81-101 , Guide to Data Collection , V. E. Church, 

D. N. Card, F, E. McGarry, et al., August 1982 

SEL-81-104 , The Software Engineering Laboratory, D. N. Card, 
F. E. McGarry, G. Page, et al., February 1982 


9913 


B-2 







SEL-81-107, Software Engineering Laboratory ( SEL) Compendium 
Of TqqIs, W. J. Decker, W. A. Taylor, and E. J. Smith, 
February 1982 

SEL-81-110, Evaluation of an In dependent Verification and 
Validation (IV&V) Methodol o gy for Flight Dynamics . G. Page, 
F. E. McGarry, and D. N. Card, June 1985 

SEL-81-205, Recomm ended Approach to Software Development- . 

F. E. McGarry, G. Page, S. Eslinger, et al., April 1983 

SEL-82-001 , Eyal uation of Management Measures of Soft-warA 
Development/ G. Page, D. N. Card, and F. E. McGarry, 
September 1982, vols. 1 and 2 

SEL-82-004 , Collected Soft ware Engineering Papers: Vol- 

ume 1 . July 1982 

82— 007 , Proceedings From the Seventh Annual Software 

Engineering Workshop . December 1982 

SEL-82-008, Evaluati ng Software Development bv Analysis of 
C hanges; The Da ta From the Software Engineering Laboratory . 

V. R. Basili and D. M. Weiss, December 1982 

E QRTRAN Static So urce C ode Ana l yzer Program 
1 SAP) System Description ( Revision n . w. A. Taylor and 

W. J. Decker, April 1985 

SEL-82-105 , glossary _of Softwa re Engineering Laboratory 
Terms / T. A. Babst, F. E. McGarry, and M. G. Rohleder, 
October 1983 

SEL-82-706, Annotated Bibliogra phy of Software Engineering 
Laboratory Literature . G. Heller, January 1989 

SEL-83-001 , An Approach to Software Cost Estimation . 

F. E. McGarry, G. Page, D. N. Card, et al., February 1984 

SEL-83-002, Measures and Metrics for Software Development . 

D. N. Card, F. E. McGarry, G. Page, et al., March 1984 

SEL-83-003 , Collected Software Engineering Papers: Vol- 

ume II . November 1983 

SEL-83-006 , Monitoring Soft ware Development Through Dynamic 
Variable? , C. W. Doerflinger, November 1983 


9913 


B-3 




SEL-83-007, Proceedings From the EJLfllLtil — Annual — SQf t w 9 r e — EB_ 

nineerina Workshop . November 1983 

SEL-84-001 , Manager's Hand book f or Sof t ware Development , 

W. W. Agresti, F. E. McGarry, D. N. Card, et al., April 1984 

sel- 84-003, investigatio n of Specification Measures for the 
Software Engineering Lab oratory — ( SEL l , W. W. Agresti/ 

V. E. Church, and F. E. McGarry, December 1984 

SEL-84-004, Proceedings From the Ninth An nua l. Software Eng i - 
neering Workshop , November 1984 

SEL-85-001 , A Comparison of Software Verification Tech- 
nioues . D. N. Card, R. W. Selby, Jr., F. E. McGarry, et al., 

April 1985 

sel- 85-002 , Ada Training Evaluatio n and Rec ommendations Frotn 
the Gamma Rav Observatory Ada Developm ent Team, R. Murphy 
and M. Stark, October 1985 

Sel- 85-003 , Collected Software Engine ering Faperjsj — vain 
ume III . November 1985^. 

SEL-85-004, Evaluations of Softw are Technologies; — Testing j . 
CLEANROOM. and Metrics . R. W. Selby, Jr., May 1985 

SEL-85-005 , Software Verification and Testin g, D. N. Card, 

C. Antle, and E. Edwards, December 1985 

SEL-85-006 , Proceedings Fr o m the Tenth Annual Software Engi - 
neering Workshop . December 1985 

SEL-86-001, Programmer's H a ndbook for Flight Pynamics SoCtn 
ware Development . R. Wood and E. Edwards, March 1986 

SEL-86-002 , General Object-Oriented Softwar e Development , 

E. Seidewitz and M. Stark, August 1986 

SEL-86-003 , Flight Dynamics Svstg m Software Development En- 
vironment Tutorial . J. Buell and P. Myers, July 1986 

SEL-86-004 , Collected Software Engineering Papers; — Vol- 
ume IV . November 1986 

SEL-86-005 , Measuring Software Design , D. N. Card, October 
1986 


B-4 


9913 








SEL-86-006, Proceedings From the Eleventh Annual Software 
Engineering Workshop . December 1986 

SEL-87-001 , Product Assurance Policies and Procedures for 
Flight Dynami cs Soft ware Development . S. Perry et al., March 
1987 


SEL-87-002, Ada Style Guide ( yersion l.n . E. Seidewitz 
et al. , May 1987 


SEL-87-003 , Guide lines for Applying the Composite Specifica- 
tion Model ( CSM) . W. W. Agresti/ June 1987 


SEL-87-004, Asse ssing the Ada Design Process and its impli- 
ca tions; — A Case Study/ S. Godfrey, C. Brophy, et al., 

July 1987 


SEL- 87-008, Ba ta Coll ection Procedures for the Rehosted SET. 
Database# G. Heller, October 1987 

SEL-87-009 , Collecte d Software Engineering Papers: Volume v . 

S. DeLong, November 1987 


SEL-87-010, Proceedings From the Twelfth 
gineerinq Workshop . December 1987 


Annual Software En- 


SEL-88-001, System Test ing of a Production Ada PrniPrH 
GEQDY Study# J. Seigle and Y. Shi, November 1988 


2hz 


SEL-88-002, Collecte d. Software Engineering Papers; Vol- 
ume VI . November 1988 


SEL-88-003 , Evolu tion of Ada Technology in the „ r „ 

ICS Area; — Design Phase Analysis . K. Quimby and L. Esker, 
December 1988 


SEL-RELATED LITERATURE 

4 Agresti , W. W., V. E. Church, D. N. Card, and P. L. Lo, 
"Designing With Ada for Satellite Simulation: A Case Study," 

P roceedings of th e Firs t International Symposium on Ada for 
t he NASA Space Station . June 1986 

2 Agresti , W. W., F. E. McGarry, D. N. Card, et al., "Meas- 
uring Software Technology," Program Transformation and Pro- 
gr amming Environments . New York: Springer-Verlag, 1984 


9913 


B-5 





iBailey, J. W. , and V. R. Basili, "A Meta-Model for Soft- 
ware Development Resource Expenditures," Proceeding s — o £ — £ — £ 
Fifth International Conferen c e on Software Engineering . 

New York: IEEE Computer Society Press, 1981 

iBasili, V. R., "Models and Metrics for Software Manage- 
ment and Engineering," ASME Advances in . C omputer Technolog y, 
January 1980, vol. 1 

Basili, v. r.. Tutorial on Mode ls and Met rics for Software 
Management and Engineering . New York: IEEE Computer Society 

Press, 1980 (also designated SEL-80-008) 

3 Basili, V. R., "Quantitative Evaluation of Software Meth- 
odology," Proceedings of t h e First Pan-Pacific . Computer Con~ 
f erence . September 1985 

1 Basili, V. R., and J. Beane, "Can the Parr Curve Help 
With Manpower Distribution and Resource Estimation Prob- 
lems?," Journal of Systems and Software , February 1981, 
vol. 2, no. 1 


lfiasili, V. R., and K. Freburger, "Programming Measurement 
and Estimation in the Software Engineering Laboratory," 
Journal of Systems and Software, February 1981, vol. 2, no. 1 

3 Basili , V. R. . and N. M. Panlilio-Yap, "Finding Relation- 
ships Between Effort and Other Variables in the SEL, " 
Proceedings of the International Compute r Software and Ap- 
plications Conference . October 1985 

4 Basili, V. R. , and D. Patnaik, A Study on Fault Pred iction 
and Reliability Assessment in the SEL Environment , University 
of Maryland, Technical Report TR-1699, August 1986 

^Basili , V. R., and B. T. Perricone, "Software Errors and 
Complexity: An Empirical Investigation," Communication? ol 

the ACM . January 1984, vol. 27, no. 1 


^-Basili, V. R., and T. Phillips, "Evaluating and Comparing 
Software Metrics in the Software Engineering Laboratory," 
Proceedings of the ACM SIGMETRICS Symposiu m/Workshop; — QU9i~ 


March 1981 


Basili, V. R., and J. Ramsey, Structural Co ve ra ge of Func- 
tional Testing , University of Maryland, Technical Report 
TR-1442, September 1984 


B-6 


9913 



3 Basili, V. R., and C. L. Ramsey, "ARROWSMITH-P — A Proto- 
type Expert System for Software Engineering Management," 
Proceedings of the I EEE/MITRE Expert Systems in Government 
October 1985 


Basili, V. R., and R. Reiter, "Evaluating Automatable Meas- 
ures for Software Development," Proceedings of the Workshop 
on Quan t i tative S oftware Models for Reliability, Complexity. 
and Cost. New York: IEEE Computer Society Press, 1979 

^Basili, V. and H. D. Rombach, "Tailoring the Software 
Process to Project Goals and Environments," Proceedings of 
the 9th International Confe rence on Software Engineering . 
March 1987 

5 Basili, V. and H. D. Rombach, "TAME: Tailoring an Ada 

Measurement Environment," Proceedings of the Joint Ada Con- 
ference , March 1987 

5 Basili, V. and H. D. Rombach, "TAME: Integrating Meas- 

urement Into Software Environments," University of Maryland, 
Technical Report TR-1764, June 1987 

6 Basili, V. R., and H. D. Rombach, "the TAME Project: 

Towards Improvement-Oriented Software Environments," IEEE 
Transact ions on Software Engineering . June 1988 

2 Basili, V. R., R. w. Selby, and T. Phillips, "Metric Anal- 
ysis and Data Validation Across FORTRAN Projects," IEEE 
Transac tions on Software Engineering . November 1983 

3 Basili, V. R., and R. W. Selby, Jr., "Calculation and Use 
of an Environments's Characteristic Software Metric Set," 
E roceed i nqs of the Eighth Internation al Conference on Soft- 
ware Engineering. New York: IEEE Computer Society Press, 

1985 


Basili, V. R., and R. W. Selby, Jr., Comparing the Effective- 
ness Of So ftware Testing Strategies . University of Maryland, 
Technical Report TR-1501, May 1985 

3 Basili, V. R. and R. W. Selby "Four Applications of a 
Software Data Collection and Analysis Methodology," Proceed- 
i ngs Of the NATO Advanced Study Institute . August 1985 

4 Basili, V. R., R. w. Selby, Jr., and D. H. Hutchens, "Ex- 
perimentation in Software Engineering," IEEE Transactions on 
Software Engineering . July 1986 


9913 


B-7 


5 Basili, V. and R. Selby, "Comparing the Effectiveness of 
Software Testing Strategies," IEEE Transactions o n Software 
Engineering , December 1987 

2 Basili , V. R., and D. M. Weiss, A Methodology for Co llecting 
valid Software Engineering Data , University of Maryland, Tech- 
nical Report TR-1235, December 1982 

3Basili, V. R., and D. M. Weiss, "A Methodology for Collect- 
ing Valid Software Engineering Data," IEEE TransactionS-flU 
Software Engineering , November 1984 

Vasili, V. R., and M. V. Zelkowitz, "The Software Engi- 
neering Laboratory: Objectives," Proceedin gs of the Fif- 

teenth Annual Conference on Computer Personnel Research , 

August 1977 

Basil!, V. R., and M. V. Zelkowitz, "Designing a Software 
Measurement Experiment," Proceedings of the Software Li fe 
Cycle Management Workshop , September 1977 

1 Basili, V. R. , and M. V. Zelkowitz, ^Operation of the Soft- 
ware Engineering Laboratory," Proceedings of the Second — Soft- 

ware Life Cycle Manag ement Workshop, August 1978 

3-Basili, V. R., and M. V. Zelkowitz, "Measuring Software 
Development Cha racteristics i n the Local Environment," Conk: 
puters and Structures . August 1978 c vol. 10 

Basili, V. R., and M. V. Zelkowitz, "Analyzing Medium Scale 
Software Development," Proceedings of the Third Intern a- 
tional Conference on Software Engineering . New York: IEEE 

Computer Society Press, 1978 

^Brophy, C., W. Agresti,' and V. Basili, "Lessons Learned 
in Use of Ada-Oriented Design Methods," Proceedings of the 
Joint Ada Conference , March 1987 

6 Brophy, C. E., S. Godfrey, W. W. Agresti, and V. R. Basili, 
"Lessons Learned in the Implementation Phase of a Large Ada 
Project," Proceedings of the Washington Ada Technical Con- 
ference . March 1988 

2 Card, D. N., "Early Estimation of Resource Expenditures and 
Program Size," Computer Sciences Corporation, Technical Memo- 
randum, June 1982 

2 Card, D. N., "Comparison of Regression Modeling Techniques 
for Resource Estimation," Computer Sciences Corporation, 
Technical Memorandum, November 1982 


9913 


B-8 


3 Card, D. N., "A Software Technology Evaluation Program," 
Annais do XVIII Congresso Nacional de Informat ica, October 
1985 

5 Card, D. and W. Agresti, "Resolving the Software Science 
Anomaly," The Journal of Systems and Software , 1987 

®Card, D. N., and W. Agresti, "Measuring Software Design 
Complexity," The Journal of Systems and Software . June 1988 

Card, D. N., V. E. Church, W. W. Agresti, and Q. L. Jordan, 
"A Software Engineering View of Flight Dynamics Analysis 
System," Parts I and II, Computer Sciences Corporation, 
Technical Memorandum, February 1984 

4 Card, D. N., V. E, Church, and W. W. Agresti, "An Empiri- 
cal Study of Software Design Practices," IEEE Transactions 
on Software Engineering . February 1986 

Card, D. N., Q. L. Jordan, and V. E. Church, "Characteris- 
tics of FORTRAN Modules," Computer Sciences Corporation, 
Technical Memorandum, June 1984 

5 Card, D., F. McGarry, and G. Page, "Evaluating Software 
Engineering Technologies," IEEE Transactions on Software 
Engineering . July 1987 

3 Card, D. N., G. T. Page, and F. E. McGarry, "Criteria for 
Software Modularization," Proceedings of the Eighth Interna - 
tional Conference on Software Engineering . New York: IEEE 

Computer Society Press, 1985 

^Chen, E., and M. V. Zelkowitz, "Use of Cluster Analysis 
To Evaluate Software Engineering Methodologies," Proceedings 
Of the Fifth International Conference on Software Engineer- 
ing . New York: IEEE Computer Society Press, 1981 

4 Church, V. E., D. N. Card, W. W. Agresti, and 
Q. L. Jordan, "An Approach for Assessing Software Proto- 
types," ACM Software Engineering Notes . July 1986 

3 Doerf linger , C. W., and V. R. Basili, "Monitoring Software 
Development Through Dynamic Variables," Proceedings of the 
Seventh International Computer Software and Applications 
Conference . New York: IEEE Computer Society Press, 1983 

5 Doubleday, D., "ASAP: An Ada Static Source Code Analyzer 

Program," University of Maryland, Technical Report TR-1895, 
August 1987 (NOTE: 100 pages long) 


9913 


B-9 


6 Godfrey, S. and C. Brophy, "Experiences in the Implementa- 
tion of a Large Ada Project," Proceedings of the 19M 
Washington Ada Symposium , June 1988 

Hamilton, M. , and S. Zeldin, A Demons tration of AXES far 
NAVPAK . Higher Order Software, Inc., TR-9, September 1977 
(also designated SEL-77-005) 

Jeffery, D. R., and V. Basili, "Characterizing Resource 
Data: A Model for Logical Association of Software Data," 

University of Maryland, Technical Report TR-1848, May 1987 

6 Jeffery, D. R., and V. R. Basili, "Validating the TAME 
Resource Data Model," Proceedings of the Tenth International 
Conference on Software Engineering , April 1988 

SMark, L. and H. D. Rombach, "A Meta Information Base for 
Software Engineering," University of Maryland, Technical 
Report TR-1765, July 1987 

6 Mark, L. and H . D. Rombach, "Generating Cus tomized Soft- 
ware Engineering Information Bases From Software Process and 
Product Specifications," Proceedings of the 22nd Annual 
Hawaii International Conference on_Svstem Sciences* January 
1989 

5 McGarry, F. and W. Agresti, "Measuring Ada for Software 
Development in the Software Engineering Laboratory (SEL) , " 
Proceedings of the 21st Annual Hawaii Internet ional — Con- 

ference on System Science s. January 1988 

3 McGarry, F. E., J. Valett, and D. Hall, "Measuring the 
Impact of Computer Resource Quality on the Software Develop- 
ment Process and Product," Proceedings of t he Hawaiian Inter- 
national Conference on System Sciences , January 1985 

National Aeronautics and Space Administration (NASA), NASA 
Software Research Technology Workshop (Proceedings), March 
1980 

3 Page, G., F. E. McGarry, and D. N. Card, "A Practical Ex- 
perience With Independent Verification and Validation," 
Proceedings of the Eighth International Computer So ftware 
and Applications Conference . November 1984 

5 Ramsey, C. and V. R. Basili, "An Evaluation of Expert Sys- 
tems for Software Engineering Management," University of 
Maryland, Technical Report TR-1708, September 1986 


9913 


B-10 


3 Ramsey, J., and V. R. Basili, "Analyzing the Test Process 
Using Structural Coverage," Proceedings of the Eighth Inter- 
national Conference on Software Engineering . New York: 

IEEE Computer Society Press, 1985 

^Rombach, H. D., "A Controlled Experiment on the Impact of 
Software Structure on Maintainability," IEEE Transactions on 
Software Engineering . March 1987 

^Rombach, H. D., and V. R. Basili, "Quantitative Assessment 
of Maintenance: An Industrial Case Study," Proceedings From 

the Conference on Software Maintenance . September 1987 

^Rombach, H. D., and L. Mark, "Software Process and Prod- 
uct Specifications: A Basis for Generating Customized SE 

Information Bases," Proceedings of the 22nd Annual Hawaii 
International Conference on System Sciences , January 1989 

5 Seidewitz, E., "General Object-Oriented Software Develop- 
ment: Background and Experience," Proceedings of the 21st 

Hawaii International Conference on System Sciences , January 
1988 

^Seidewitz, E., "General Object-Oriented Software Develop- 
ment with Ada: A Life Cycle Approach," Proceedings of the 

CASE Technology Conference . April 1988 

^Seidewitz, E., "Object-Oriented Programming in Smalltalk 
and Ada," Proceedings of the 1987 Conference on Object- 
Oriented Programming Systems, Languages, and Applications , 
October 1987 

■^Seidewitz, e., and M. Stark, "Towards a General Object- 
Oriented Software Development Methodology," Proceedings of 
the First International Symposium on Ada for the NASA Space 
Station , June 1986 

Stark, M. , and E. Seidewitz, "Towards a General Object- 
Oriented Ada Lifecycle," Proceedings of the Joint Ada Con- 
ference . March 1987 

Turner, C., and G. Caron, A Comparison of RADC and NASA/SEL 
Software Development Data . Data and Analysis Center for 
Software, Special Publication, May 1981 

Turner, C., G. Caron, and G. Brement, NASA/SEL Data Compen- 
dium . Data and Analysis Center for Software, Special Publi- 
cation, April 1981 


9913 


B-ll 


Svalett, J. and F. McGarry, "A Summary of Software Measure- 
ment Experiences in the Software Engineering Laboratory," 
Proceedings of the 21st Annual Hawaii International Confer- 
ence on System Sciences , January 1988 

3 Weiss, D. M. , and V. R. Basili, "Evaluating Software De- 
velopment by Analysis of Changes: Some Data From the Soft- 

ware Engineering Laboratory," IEEE Transactions on Software 
Engineering , February 1985 

5 Wu, L., V. Basili, and K. Reed, "A Structure Coverage Tool 
for Ada Software Systems," Proceedings of the Join t Ada Con- 
ference , March 1987 

Izelkowitz, M. V. , "Resource Estimation for Medium Scale 
Software Projects," Proceedings of the Twelfth Conference on 
the Interface of Statistics and_CQmputer Science . New York: 
IEEE Computer Society Press, 1979 

2 Zelkowitz, M. V., "Data Collection and Evaluation for Ex- 
perimental Computer Science Research," Empirical Foundations 
for Computer and Informatio n Science (proceedings), 

November 1982 

6 Zelkowitz, M. V. , "The Effectiveness of Software Proto- 
typing: A Case Study," Proceedings of the 26th Annu al Tech- 

nical Symposium of the Washingt on, D, C.. Chapter of the ACM, 
June 1987 

6 Zelkowitz, M. V., “Resource Utilization During Software 
Development," Journal of Systems and Software , 1988 

Zelkowitz, M. V., and V. R. Basili, "Operational Aspects of 
a Software Measurement Facility," Proceedings of the Soft- 
ware Life Cycle Management Workshop , September 1977 

NOTES : 


iThis article also appears in SEL-82-004, Collected Soft- 
ware Engineering Papers: Volume I . July 1982. 

2 This article also appears in SEL-83-003, Collected Soft- 
ware Engineering Papers: Volume II , November 1983 . 

3 This article also appears in SEL-85-003, Collected Soft- 
ware En gineering Papers: Volume III . November 1985. 

4 This article also appears in SEL-86-004, Collected Soft- 
ware Engineering Papers: Volume IV , November 1986. 


9913 


B-12 


5 This article also appears in SEL-87-009, Collected Soft- 
ware Engineering Papers: Volume V . November 1987. 

6 This article also appears in SEL-88-002, Collected Soft- 
ware Engineering Papers: Volume vi . November 1988. 


9913 


B-13 



