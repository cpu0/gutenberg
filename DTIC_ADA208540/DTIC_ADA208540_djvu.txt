

UNClAS^FIED _ 

(CUtlii cL»SSinC>MO»< 0^ ^h;S Hui (ti^r-rr Pf^ifntuKr 


REPORT DOCUMENTATION PAGE 


'■ ■ 1 - 


X. REPORI MlMBiR 


12. 60VT ACCliSIOf NO. 13 KECI^UNl'S CATALOG NOMcEA 


. title (•ndiubi'flt) i. TYPE Of REPORT t PIRIOO CCVEREO 

Ada Compiler Validation Sununary Report: verdix 31 March 1989 - l Dec. 1990 
Corporation, VADS ISI Self, Version 5.7, 1S68K (Integrate >6. PINFORm:ng^rg. REPORT NjwEiR 
Solutions) (host & target), 890331W1.10048 


. AUTHORUl (. contract OR (RANT NJM'iRu; 

>’righ'f-Patterson AFB 
Dayton, OH, USA 


. performing organization and address 

■Iright-Patterson AFB 
Dayton, OH, USA 


1. CONTROulING OMKE NAME AND ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 2D301-3081 


14. MONITORING AGENCY NAME A difitrtnt from Controlling Ofhct) 

Wright-Patterson AFB 
Dayton, OH, USA 


16. OISTRIBJTION statement foFjN/j Rfportl 


10. program Element, project, tasn 
AREA I morn unit NUMeERS 


IZ. »£P0RT DATE 


IS. security Class (oMNurepon; 

UN'CLASSiriED 


1 S 4 . g^CcASS|FKAT 20 N.' 00 MSGRADJNG 

N/A 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION statement (oltht ibr.'ta tntf-t a m Bcxh !C Ho-.t^t'tn: ho'n fttpsr) 


UKCLASSIFIED 


18 . supplementary notes 


DTIC 

ELECTE 


IS . RETmDRDS (Continue on reverie i.Of FnetfiJ#'> tnO identify p> 6'0(* number) 

Ada Procrer.T.ing language, Ada Compiler Validation Sur-mary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-CTD- 
1815A, Ada Joint Program Office, AJPO 


2 C . ABSTRACT (Continue on reverie iide if neeesury end identify by block numoer) 

VADS ISI Self, Version 5.7, Verdix Corporation, Wright-Patterson AFB, IS68K (Integrated 
Solutions) under UNIX 4.3 BSD (host and target), ACVC 1.10 


DD 1473 EDITION Of 1 NDv 6S IS obsolete 

» OAN 73 S/N ei02-LF-014-6601 _ UNCLASSIFIED __ 

security CLASSIf KATION or This PAGE (MVhf n O#!# f hYf rftf; 
















AVF Control Number: AVF-VSR-242.0M89 

89-01-31-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number; 89033‘IWI. 10048 
Verdix Corporation 
VADS ISI Self, Version 5.7 
IS68K (Integrated Solutions) 


Completion of On-Site Testing; 
31 March 1989 


Prepared By; 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Prepared For; 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3051 









T 


Ada Compiler Validation Summary Report 


Compiler Name: VADS ISI Self, Version 5.7 
Certificate Number: 890331W1.lOOMS 


Host: IS68K (Integrated Solutions) under 

UNIX 4.3 BSD 

Target; IS68K (Lntegrated Solutions) under 
UNIX 4.3 BSD 


Testing Completed 31 March 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


-t ^ _ 

Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson A?3 OH 45433-6503 



Ada Validation Organization 
Dr. John ?. Kramer 
Institute for Defense Analj'ses 
Alexandria VA 22311 




Br. John Solomond 
Director 

Washington D.C. 20301 









Ada Compiler Validation Summary Report 


Compiler Name; VADS ISI Self, Version 5.7 
Certificate Number: 890331W1.10048 


Host: IS68K (Integrated Solutions) under 

UNIX 4.3 BSD 

Target; IS68K (Integrated Solutions) under 
UNIX 4.3 BSD 

Testing Completed 31 March 1989 Using ACVC 1.10 
This report has been reviewed and is approved. 




Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 


Wright-Patterson AFB OH 


45433-6503 


Ada Validation Organina 
Dr. John F. Kraimer 
Institute for Defense Ana 
Alexandria VA 22311 



Ada Joint Program Cifice 
Dr. John Solomond 
Director 

Washington D.C. 20301 







TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

l.i* DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3- 

3.4 WITHDRAWN TESTS.3- 

3.5 INAPPLICABLE TESTS.3- 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-5 

3.7.1 Prevalidation ...... . 3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 


APPENDIX D 


WITHDRAWN TESTS 


<\l CM <\1 






















CHAPTER 1 


INTRODUCTION 


This Validation Summary Report describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability, (ACVC).. An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. , 



Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
-given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 


I 







INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech. Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 31 March 1989 at Aloha OR. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


1-2 








INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language , 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 198?. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

M. Ada Compiler Validation Capability User’s Guide, December 1986. 


I.n DEFINITION OF TERMS 

ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having th- 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1?87. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsitle for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 








INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada buandard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, 3, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successf :1 compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


1-4 







INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The pactage REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 


1-5 






INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 





CHAPTER 2 


CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation systan for this validation was tested under the 
following configuration: 


Compiler; VADS ISI Self, version 5.7 
ACVC Version; 1.10 


Certificate Number; SgOSSIW 
Host Comput'^r; 

Machine; 

Operatin"^ System; 
Memory Sj ze: 

Target Computer: 

Machine: 

Operating System: 
Memory Size; 


.10048 

IS68K (Integrated Solutions) 
UNIX 4.3 BSD 
6 Megaoytes 

IS68K (Integrated Solutions) 
UNIX 4.3 BSD 
6 Megabytes 


2-1 









CONFIGURATION INFORMATION 


] 

I 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other Glasses also characterize an 
implementation. The tests demonstrate the following characteristics; 

a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(M) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
TINY_IN7EGER, SHORT_INTEGER, and SHORT_FLOAT in package 
STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 


2-2 







CONFIGURATION INFORMATION 


(4) Sometimes CONSTRAINT_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) Sometimes NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..2.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round to even. (See test C4A014A.) 


e. Array types. 


An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_EHROR for an array having a ’LENGTH that exceeds 
STAITOARD.INTEGER’LAST and/or SYSTEM.MAX INT. 


For this implementation: 


(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components "'aises no exception. (See test 
C36003A.) 

(2) NUMERIC_ERROR is raised when ’LENGTH is applied to a null 
array type with INTEGER’LAST + 2 components. (See test 
C36202A.) 


(3) NUMERIC_ERROR is raised when ’LENGTH is applied to a null 
array type with SYSTEM.MAX_INT + 2 components. (See test 

C36202B.) 


(4) A packed BOOLEAN array having a ’LENGTH exceeding INTEGER’LAST 
raises CONSTRAINT_ERROR when the array type is declared. (See 
test C52103X.) 


2-3 








CONFIGURATION INFORMATION 


(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the array 
type is declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROH or C0NSTRA1NT_ERR0R 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises CONSTRAINT_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when cheeking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression’s subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and CU3207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked fo*- identical 
bounds. (See test EU3212B.) 

(3) CONSTRAINT_ERROF. is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B, EA3O04C..D, and CA3004E..F.) 


2-4 






CONFIGURATION INFORMATION 


i. Generics 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC320MC, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL_IO can be instantiated with 
unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO. 
(See testa CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN FILE, OUT FILE, and INOUT FILE are supported for 
DIRECT loT (See tests CB2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) Modes IN FILE and OUT_FILE are supported for text files. (See 
tests CE3102E and CE3102I..K.) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supporter for DIRECT_IC. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3nOA, and CE3114A.) 

(9) Overwriting to a sequential file truncates to the last element 
written. (See test CE2208B.) 

(10) Temporary sequential files are given names and deleted when 
closed. (See test CE2108A.) 

(11) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and deleted when closed. 
(See test CE3112A.) 


2-5 






CONFIGURATION INFORMATION 


(13) 

More 

than 

one 

internal 

file 

can 

be 

associated with 

each 


external 

file 

for sequential 

files 

when writing or reading. 


(See 

tests 

CE2107A..E, CE2102L, 

CE2110B, 

and CE2111D.) 


(14) 

More 

than 

one 

internal 

file 

can 

be 

associated with 

each 


external 

file 

for direct 

files 

when writing or reading. 

(See 


tests 

CE2107F.. 

H (3 tests) 

, CE2110D, 

and 

CE2111K.) 


(15) 

More 

than 

one 

internal 

file 

can 

be 

associated with 

each 


external file for text files when reading or writing. (See 
tests CE311U..E, CE311i»B, and CE3115A.) 


2-6 







CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 1*3 tests had been withdrawn because of test errors. The AVF 
determined that 329 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation . Modifications to the code, processing, or grading 
for 10 tests were required to successfully demonstrate the test objective. 
(See section 3-6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS 3Y CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

P 

L 

tota; 

Passed 

129 

1132 

1993 

17 

28 

46 

3345 

Inapplicable 

0 

6 

323 

0 

0 

0 

329 

Withdrawn 

1 

2 

34 

0 

6 

0 

43 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 








TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

577 

545 

245 

172 

99 

161 

332 

137 

36 

252 

292 

299 

3345 

Inappl 

14 

72 

135 

3 

0 

0 

5 

1 

0 

0 

0 

77 

22 

329 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

35 

4 

43 

TOTAL 

213 

650 

680 

00 

CVJ 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 43 tests were withdrawn from ACVC Version 1.10 at the time of this 
validation: 


E28005C 

A39005G 

B97102E 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features that 
a compiler is not required by the Ada Standard to support. Others may depend on 
the result of another test that is either inapplicable or withdrawn. The 
applicability of a test to an implementation is considered each time a 
validation is attempted. A test that is inapplicable for one validation attempt 
is not necessarily inapplicable for a subsequent attempt. For this validation 
attempt, 329 tests were inapplicable for the reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y 
C35708L..Y 
C45421L..Y 


C35705L..Y 
C35802L..Z 
C45521L..Z 


C35706L. .Y 
C45241L..Y 
C45524L..Z 


C35707L..Y 
C45321L..Y 
C45621L..Z 


3-2 







TEST INFORMATION 


C45641L..Y C46012L..Z 

b. C35702B and B86001U are not applicable because this implementation 
supports no predefined type LONG_FLOAT. 


c. The following 16 tests are not applicable because this implementation 
does not support a predefined type LONG_INTEGER: 


C45231C 

C45304C 

C45502C C45503C 

C45504C 

C45504F 

C45611C 

C45613C C45614C 

C45631C 

C45632C 

CD7101F 

B52004D 

C55B07A B55B09C 

B 86 OOIW 

d. C45531M..P 

(4 tests) and 

C45532M..P (4 tests) 

are not applicable 

because the 

value of SYSTQ4 

.MAX_MANTISSA is less than 47. 


e. B86001Y is not applicable because this implementation supports no 

predefined fixed-point type other than DURATION. 

f. 36600 1Z is not applicable because this implementation supports no 

predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SHORT_FLOAT. 

g. C 86 OOIF is not applicable because, for this implementation, the package 

TEXT_I0 is dependent upon package SYSTEM. These tests recompile 

package SYSTEM, making package TEXT__I0, and hence package REPORT, 
obsolete. 

h. C96005B is not applicable because there are no values of type 

DURATION'BASE that are outside the range of DURATION. 

i. CD1009C, CD2A4U..B '2 tests), CD2A41E, and CD2A42A..J (10 tests) are 
not applicable because this implementation does not support size 
clauses for floating point types. 

j. CD2A61I and CD2A61J are not applicable because this iraolementation does 

not support size clauses for array types, which imply compression, with 
component types of composite or floating point types. This 

implementation requires an explicit size clause on the component type. 

k. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for access 
types. 

l. CD2A91A..E (5 tests), CD5012J, CD5013S, and CD5014S are not applicable 
because this implementation does not support size clauses for tasks or 
task types. 

m. The following 42 tests are not applicable because this implementation 
does not support an address clause when a dynamic address is applied to 
a variable requiring initialization; 

CD5003B..H CD5011A..H CD5011L..N CD5011Q 


3-3 





TEST INFORMATION 


CD5011R CD5012A..I CD5012L CD5013B 

CD5013D CD5013F CD5013H CD5013L 

CD5013N CD5013R CD5014T..X 

n. CE2102D is inapplicable because this implementation supports CREATE 

with IN_FILE mode for SEQUENTIAL_IO. 

o. CE2102E is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for SEQUENTIAL_IO. 

p. CE2102F is inapplicable because this implementation supports CREATE 

with INOUT_FILE mode for DIRECT_I0. 

q. CE2102I is inapplicable because this implementation supports CREATE 

with IN_FILE mode for DIRECT_IO. 

r. CE2102J is inapplicable because this implementation supports CREATE 

with 0’JT_FILE mode for DIRECT_IO. 

s. CE2102N is inapplicable because this implementation supports OPEN with 
IN_FILE mode for SEQUENTIAL_IO. 

t. CE21020 is inapplicable because this implementation supports RESET with 
IN_FILE mode for SEQUENTIAL_IO. 

u. CE2102P is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for SEQUENTIAL_IO. 

V. CE2102Q is inapplicable because this implementation supports RESET with 
OUT_FILE mode for SEQUENTIAL_IO. 

w. CE2102R is inapplicable because this implementation supports OPEN with 
INOUT_FILE mode for DIRECT_I0. 

X. CE2102S is inapplicable because this implementation supports RESET with 
INOUT_FILE mode for DIRECT_IO. 

y. CE2102T is inapplicable because this implementation supports OPEN with 
IN_FILE mode for DIRECT_IO. 

z, CE2102U is inapplicable because this implementation supports RESET with 
IN_FILE mode for DIRECT_IO. 

aa. CE2102V is inapplicable because this implementation supnorts open with 
OUT_FILE mode for DIRECT_IO. 

ab. CE2102W is inapplicable because this implementation supports RESET with 
OUT_FILE mode for DIRECT_I0. 

ac. CE3102E is inapplicable because this implementation supports CREATE 
with IN_FILE mode for text files. 

ad. CE3''02F is inapplicable because this implementation supports RESET for 


3-4 







TEST INFORMATION 


text files. 

ae. CE3‘>02G is inapplicable because this implementation supports deletion 
of an external file for text files. 

af. CE3102I is inapplicable because this implementation supports CREATE 
with 0UT_FILE mode for text files. 

ag. CE3102J is inapplicable because this implementation supports OPEN with 
IN_FILE mode for text files. 

ah. CE3'I02K is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for text files. 

ai. CE3115A is not applicable because resetting of an external file with 
OUT_FILE mode is not supported with multiple internal files associated 
with the same externail file when they have different modes. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, processing, 
or evaluation in order to compensate for legitimate implementation behavior. 
Modifications are made by the AVF in cases where legitimate implementation 
behavior prevents the successful completion of an (otherwise) applicable test. 
Examples of such modifications include; adding a length clause to alter the 
default size of a collection; splitting a Class B test into subtests so that all 
errors are detected; and confiraing that messages produced by an executable test 
demonstrate conforming behavior that wasn't anticipated by the test (such as 
raising one exception instead of another). 

Modifications were required for 10 tests. 


The following tests were split because syntax errors at one point resulted in 
the compiler not detecting other errors in the test: 

B24009A B33301B B38003A B38003B B38009A B38009B 

B41202A B91001H BC1303F BC3005B 


3.7 ADDITIONAL TESTING INFORMATION 


3-5 






TEST INFORMATION 


3 . 7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the 
VADS ISI Self was submitted to the AVF by the applicant for review. Analysis of 
these results demonstrated that the compiler successfully passed all applicable 
tests, and the compiler exhibited the expected behavior on all inapplicable 
tests. 


3 . 7.2 Test Method 


Testing of the VADS ISI Self using ACVC Version 1.10 was conducted on-site by a 
validation team from the AVF. The configuration in which the testing was 
performed is described by the following designations of hardware and software 
components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


IS68K (Integrated Solutions) 
UNIX 4.3 BSD 

IS68K (Integrated Solutions) 
UNIX 4.3 BSD 

VADS ISI Self, Version 5.7 


A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of implementation-specific 
values were customized before being written to the magnetic tape. Tests 
requiring modifications during the prevalidation testing were included in their 
modified form on the magnetic tape. 


The contents of the magnetic tape were loaded directly onto the host computer. 

After the test files were loaded to disk, the full set of tests was compiled, 
linked, and all executable tests were run on the IS68K (Integrated Solutions). 
Results were printed from the from the host computer. 

The compiler was tested using command scripts provided by Verdix Corporation and 
reviewed by the validation team. The compiler was tested using the following 
default option settings: 


OPTION 


EFFECT 


-01 

Level one optimization. 

-s 

No suppression. 

-w 

Warnings suppressed. 


Tests were compiled, linked, and executed (as appropriate) using 1 computer. 
Test output, compilation listings, and job logs were captured on magnetic tape 
and archived at the AVF. The listings examined on-site by the validation team 
were also archived. 


3-6 







TEST INFORMATION 


3«7.3 Test Site 

Testing was conducted at Aloha OR and was completed on 31 March 1989. 


3-7 




APPENDIX A 


DECLARATION OF CONFORMANCE 


Verdix Corporation has submitted the following Declaration 
of Conformance concerning the VADS ISI Self. 


A-1 









oeoAiuincR or covoiqubcz 


Coapllcr Zaple9«acor; yssDXZ Corporatioa 

LAX T^ldatloa racUlty: ASD/SCEL, WrHpt-P»ct«pn ITB GB 33-^503 
Ada Caapllcr 7alidatiea Capability (ACTC) Vaniea: 1.10 


Basa CoBfisvatioa 

Baa« CocBpilar Ifasa: vads isi self tar alon i 5."7 

Boat Arcaitactura ISA: is68K (integrated OSATO #: 4.3BSD 

Xa^gat Arealtactura ISA: solutions) QSATBR A: same as host 

(Same as host) 

XBplflMator*a Oaelaratioo 


I, ttM usdaraicpad, rapraaaatlas vsssxz Corp. haaa iaplasaatad ao dallbarata 
aztaaaioaa to taa Ada Laacoaca Standard AI5I/KZL-STD-1815A ia taa eoapilar{a} llatad 
la daelaratlon. I daclara that vnacc ia tha wner of racord of tha Ada 
laacuage eoapilar(a} liatad aboaa and» as such, is rasponsibla for aalnta in i n g said 
eaapiler(s) in eonforaanea to ARSI/KZL-STS-1815A. All eartifleatas and registratioos 
for Ada laagua^a eoapilar<s] listad la this daelaratlon shall ba nada only ia tha 
owner's eorporata oaoa. 



Stephan F. Xeiglar ^ 

View-President 

Ada Prodneta DlTiaion 




I, tha uadarsignad^ raprasaatiag vbsdZX taka fall responsibility for :aplMatatioa 
aaiatenaaca of tha Ada ooBpilar<s) listad aboTOt and agree to tha pabllo 
dlsolosore of tha flsal TalldaCioa SMary Baport. I daelare that all of tha Ada 
eoapilers listad, and thatr boat/targat parforsancs are in eoaplianeo vlth 
tha Ada uanguage Standard AXSZ/!CZL-SII>-1815A. 


Stephen P. Scivier - 
■ vice-Preeident 


Sate: 



Ada Products Dirision 


A-2 



APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the VADS ISI Self, Version 5.7, as described in this 
Appendix, are provided by Verdix Corporation. Unless specifically noted 
otherwise, references in this Appendix are to compiler docunentation and 
not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -21M7483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range 

-l6/f0.1FFFFFFFFFFFFF(‘E1024 .. 16#0. 1FFFFFFFFFFFFF/'‘E1024 ; 
type SK0ET_FL0AT is digits 6 range -16#0.FFFFFF#E12B .. 16#0.FFFFFF"E123; 

type DURATION -s delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 







ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE.ONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as pragma INLINE, indicates to the compiler 
that the subprogram must always be inlined. This pragma also suppresses the generation of a callable 
version of the routine which saves code space. If a user erroneously makes an INLINE_ONLY subpro¬ 
gram recursive a warning message will be emitted and an PROGRAM_ERROR will be raised at run 
time. 

1.2. BUILT_IN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Ada body can be pro¬ 
vided. for example the MACH]^^_CODE package. 

1_3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument This pragma is only allowed 
immediately at the place of a declarative item in a declarative pan or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit 

When the first argument is a generic unit the pragma applies to all instantiations of that generic. When 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRLIE the compiler will try to share code generated for a generic instantia¬ 
tion with code generated for other instantiations of the same generic. When the second argument is 
F.ALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit 

The name pragma SHARE_BODY is also recognized by the implementation and has the same, effect as 
SHARE_CODE. It is included for compatability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used for the IMAGE attribute of enumeration 
t>pes. This eliminates the overhead required to store the array in the executable image. An auempt to 
use the IMAGE attribute on a type whose image array has been suppressed will result in a compilation 
warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or variable defined in Ada and 
allows the user to specify a different external name that may be used to reference the entity from other 
languages. The jjragma is allowed at the place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package specification. 


B-2 








1.6. INTERFACE.NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or subprogram defined in another 
language and allows it to be referenced directly in Ada. The pragma will replace all occurrences of the 
variable or subprogram name with an external reference to the second, link_argumeni. The pragma is 
allowed at the place of a declarative item in a package specification and must apply to an object or sub¬ 
program declared earlier in the same package specification. The object must be declared as a scalar or 
an access type. The object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT.CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument This pragma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 


IX OPTIMIZE.CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument Tliis pragma is only allowed within a 
machine code procedure. It specifics whether the code should be optimized by the compiler. The 
default is ON. When OFF is specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2J. INLINE 

This pragma is implemented as desenbed in Appendix B of the Ada R.M. 

2.4. INTERFACE 

This pragma supports calls to ’C’ and FORTRAN functions. The .Ada subprograms can be cither func¬ 
tions or procedures. The types of parameters and the result type tor functions must be scalar, access or 
the predefined t>’pe ADDFIESS in SYSTEM .All parameters must have mode IN. Record and array 
objects can be passed by reference using the .ADDRESS aitnbuic. 

2J. LIST 

This pragma is implemented as described in Appendix B of the Ada R.M. 

2.6. MEMORY.SIZE 

This pragma is recognized by the implementation. The implementation docs not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. NON_REENTRANT 

This pragma takes one argument which can be the name of cither a library subprogram or a subprogram 
declared immediately within a library package spec or body. It indicates to the compiler that the sub¬ 
program will not be called recursively allowing the compiler to perform specific optimizations. The 
pragma can be applied to a subprogram or a set of overloaded subprograsm within a package spec or 


B-3 






package body. 

2J. NOT_ELABORATED 

This pragma can only appear in a library package specification. It indicates that the package will not 
be elaborated because it is either part of the RTS, a configuration package or an Ada package that is 
referenced from a language other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 

This pragma Pragma passive can be applied to a task or task type declared immediately within a library 
package spec or body. The pragma directs the compiler to optimize certain tasking operations. It is 
possible that the statements in a task body will prevent the intended optimization, in these cases a warn¬ 
ing will be generated at compile time and will raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no effect 

2.15. STORAGE_UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that RANGE_CHECK and DIVISION_CHECK can¬ 
not be supressed. 

2.17. SYSTEM.NAME 

This pragma is recognized by the implementation. The implementation docs not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3.1. P’REF 

For a prefix that denotes an object, a program unit, a label, or an enuy: 

B-4 





This attribute denotes the efTective address of the first of the storage units allocated to P. For a subpro¬ 
gram, package, task unit, or label, it refers to the address of the machine code associated with the 
corresponding body or statement. For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt The attribute is of the type OPERAND defined in the package 
MACHINE_CODE. The auribute is only allowed withm a machine code procedure. 


See section F.4.8 for more information on the use of this attribute. 

(For a package, task unit, or entry, the ’REF attribute is not supported.) 


4. Specification Of Package SYSTEM 


-lib UNSiaiED.-nTES; 
package SYST^A it 

pra^aa aappraaa (ALX_OCC3CS ); 
pragma aappr at • (EX3CEPTI0N.TABLES) : 
pragma oat.e1aboralad; 

typ« ic ( iabSk ): 

SYSTDd.NANC : cooaiaat KA^ :« tadSk; 

STORaGE.UNIT ; coaataai ;• I: 

NOCRY.SIZE ; eooataot .• 16.777.216: 

• • Sy • t ccD'OapaodaB I Named Nuaea r a 

MIN.INT eofiiiaoi 

eooiiaot 

ViOC'oiGITS : coaataat 

MAX MSNTISSA ; cocaiaet • 31; 

FLSt.OELTA . coaataoi 

TICK : caaaiaat 

•• Otbar Syt(ea*dcpaad<B( Declafatiooa 

aubtype PRIORITY ia INTEGER taaga 0 .. 99; 

MOC.REC.S12E : istagcf :• 64*1024: 


type >C30R£SS ta private; 


{ use t 

ion 

•>• 

CA: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOeXXAN 

f UBC t 

1 oc 

*<• 

(Ar 

ADDRESS: 

B: 

ADDRESS) 

return 

BCXXEAN 

fnoc t 

1 ot 


( A: 

ADDRESS: 

R: 

ADDRESS) 

return 

BOeXEAN 

fuac r 

1 0C 

•<m 

CA: 

ADDRESS. 

6: 

>CDRES5} 

r e 1 w r B 

BOOLEAN 

(use t 

1 on 

• . • 

(A: 

ADDRESS: 

B: 

ADDRESS) 

return 

INTEGER 

I u s e t 

. oe 


CA: 

ADDRESS; 

. 

INTEGER) 

re turn 

ADDRESS 

fuBC l 

I on 

• • 

(A: 

ADDRESS: 

. 

I.VTEGER) 

return 

ADDRESS 


ftjociioc ••• (1 lINSICJ^.'n'PES.CNSlCM^.lNTECER) return AO^ESS; 

function VCNORV. A£X:RES< 

( 1 : L.’NSlOv’ED.TYPfcS .LNSIC^^ED. INTEGER) return ADDRESS rcoaasa 
NO.ACDR . coottani ACCRESS; 


:• -:, 147 _ 4 g 3 _ 64 S: 
« 547.483.647; 

:• 15 : 

:• 0.01: 




I va t a 


type ADDRESS if new 1;NSJCKED_TY1>ES .L'NSICMLD.INTEGER; 

NO.ADOR : conaiani ADDRESS 0: 

pragna BUILT.INC“>*); 
pragim BUILT.INC'<•); 
pragna BUILT.INC•>•*) ; 
pragma BUILT IN(*<w’'): 

praga BUILT. INC : 

pragma BUILT.INC'♦• ): 
end SYSTEtl: 


5. Restrictions On Representation Clauses 


B-5 









5.1. Pragma PACK 

In the absence of pragma PACK record components arc padded so as to provide for efficient access by 
the target hardware, pragma PACK applied to a record eliminate the padding where possible. Pragma 
PACK has no other effect on the storage allocated for record components a record representauon is 
required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the number of bits required to represent the range 
of the subtype. A size clause applied to a record type will not cause packing of components: an expli¬ 
cit record representation clause must be given to specify the packing of the components. A size clause 
applied to a record type will cause packing of components only when the component type is a discrete 
type. An error will be issued if there is insufficient space allocated. The SIZE attribute is not sup¬ 
ported for task, access, or floating point types. 

SJ. Address Clauses 

Address clauses are only supponed for variables. Since default initialization of a variable requires 
evaluation of the variable address elaboration ordering requirements prohibit inititalizaiion of a variables 
which have address clauses. The specified address indicates the physical address associated with the 
variable. 

5.4. Interrupts 

inierupt entries are not supponed. 

5J. Representation Attributes 

The ADDRESS attribute is not supponed for the following entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supponed. 

The general definition of the package MACHIKE_CODE provides an assembly language interface for 
the target machine. It provides the necessary record lypcis) needed m the code statement, an enumera¬ 
tion type of all the opcode mncumonics, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows: 

CODE_n’( opcode, operand {, operand] ): 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands are listed within a subaggregate. 
The format is as follows: 

CODE_N’( opcode, {operand {, operand]) ); 

For those opcodes that require no operands, named notation must be used (cf. RM 4.3(4)). 

CODE_0’( op => opcode ): 



The opcode must be an enumeration literal (i.e. it cannot be an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the 'REF attribute. 

The arguments to any of the functions defined in MACHINE_CODE must be static expressions, string 
literals, or the functions defined in MACHINE_CODE. The 'REF attribute may not be used as an argu¬ 
ment in any of these functions. 

Inline expansion of machine code procedures is supponed. 


6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause arc interpreted as physical addresses. 


8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of IIO Packages 

Instantiations of DIRECT_IO use the value MAX_REC_SIZE as the record size (expressed in 
STORAGE_UNITS) when the size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SIZE is very large, MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined ir SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the record size. In any case the maximum size 
supported is 1024 x 1024 x STORAGE_UNIT bits. DIRECTJO wiU raise USE_ERROR if 
MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value M.AX_REC_SIZE as the record size (expressed in 
STORAGE_UNTTS) when the size of ELEMENT_T'iTE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SIZE is very large, .MAX_REC_S1ZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating INTEGER_IO to provide an upper limit on the record size. SEQUENTIAL 10 imposes no 
limit on MAX_REC_SI2E. 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources up to or even near these limits arc available to every program. 


11.1. Line Length 

The implementation supports a maximum line length of 500 characters including the end of line charac¬ 
ter. 


B-7 







11^. Record and Array Sizes 

The maximum size of a statically sized array type is 4,000,000 x STORAGE_UNTTS. The maximum 
size of a statically sized record type is 4,000,000 x STORAGE_UNrrS. A record type or array type 
declaration that exceeds these limits will generate a warning message. 

lU. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every task except the main program 
is allocated a fixed size stack of 10,240 STORAGE_UNlTS. This is the value returned by 
T’STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default collection size for an access 
t>'pe is 100 times the size of the designated type. This is the value returned by T’STORAGE_SIZE for 
an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNrTS for objects declared statically within a 
compilation unit If this value is exceeded the compiler will terminate the compilation of the unit with a 
FATAL error message. 


B-S 






APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..U98 => ’A',ii99 => ’ 1 ''' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..498 => 'A',Mop => »2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..249 => 'A',250 => *3', 
251..499 => 'A') 


C-1 








TEST PARAMETERS 


Name and Meaning _ Value 


$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_I.IT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 
BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


(1..249 => 'A',250 => '4', 
251..499 => 'A') 


(I..496 => *0',497..499 => "298") 


(1..493 => 'O', 494..499 => "69.0E1") 


(1 => '"',2..200 => 'A',201 => "") 


(1 => "",2 ..300 => 'A ',301 => '1', 

302 => '"') 


(1..479 => ' ') 


2147483647 


16777216 


C-2 





IS68K 


$DEFAULT_SYS_NAME 

The value of the constant 
SYSTEM.SYSTEM NAME. 


$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT_I0.FIELD'LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

iFLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0AT, or 

L0NG_FL0AT. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE_LAST 

A universal real literal that is 
greater than DURATION'BASE’LAST. 

JHIGH_PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

SILLEGAL_EXTERNAL_FILE_NAMET 

An external file name which 
contains invalid characters. 


0.0000000004656612873077392578125 


2147483647 


NO SUCH TYPE 


NO SUCH TYPE 


100000.0 


10000000.0 


99 


/illegal/file narae/2}]$?2102C.DAT 


$ILLEGAL_EXTERNAL_FILE_NAME2 /illegal/file_name/CE21C2C».DAT 

An external file name which 
is too long. 

$INTEGER_FIRST -2147483648 

A universal integer literal 
whose value is INTEGER'FIRST. 









TEST PARAMETERS 


Name and Meaning _ Value _ 

$INTEGER_LAST 2147483647 

A universal integer literal 

whose value is INTEGER’LAST. 

$INTEGER_LAST_PLUS_1 2147483648 

A universal integer literal 

whose value is INTEGER'LAST 1. 


$LESS_THAN_DURATION -100000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATI0N_BA3E_FIRST -10000000.0 

A universal real literal that is 
less than DURATION'BASE’FIRST. 


$L0W_PRI0Rj;TY 0 

An inte'^er literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 


$MANTISSA_DOC 31 

An Integer literal whose value 
is SYSTEM.MAX MANTISSA. 


$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

JMAX_IN_LEN 499 

Maximum input line length 
permitted by the implementation. 


$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX INT. 


$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX INT-^1. 


$MAX_LEN_INT_BASED_LITERAL (1..2 => "2:", 

A universal integer based 497..499 => " 
literal whose value is 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 


3..496 => 'O', 
11 ;") 



'EST PARAMETERS 


Name and Meaning 


Value 


$MAX_LEN_REA L_BASED_LITERAL 

A xiniversal real based literal 
whose value is 16;F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STR ING_L ITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT^FLOAT, SHORT_INTEGER, 

L0NG_FL0AT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

JNEW_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
iDEFAULT_MEM_SIZE. If there is 
no other value, then use 
^DEFAULT MEM SIZE. 


(1..3 => "16:",U..495 => 'O', 
496. .499 => "F.E:") 


(1 => '"',2..498 => 'A',499 => "" ) 


-2147483648 


32 


TINY INTEGER 


IS68K 


1 5y?FFFFFFFD# 


16777216 


C-5 





'EST PARAMETERS 


Name and Meaning; _ 

$NEW_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAQE_UNIT 

$NEW_SYS_NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT* 
parameter. 

$TICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 


8 


IS68K 


32 


0.01 


C-6 






APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 43 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C has been withdrawn because it expects that the string "— 
TOP OF PAGE. — 63 " of line 204 will appear at the top of the 
listing page due to a pragma PAGE in line 203; but line 203 
contains text that follows the pragma, and it is this that must 
appear at the top of the page. 

b. A39005G has been withdrawn because it unreasonably expects a 

component clause to pack an array component into a minimum size 
(line 30 ). 

c. B97102E has been withdrawn because it contains an unintended 

illegality: a select statement contains a null statement at the 
place of a selective wait alternative (line 31 )• 

d. BC3009B has been withdrawn because it wrongly expects that 

circular instantiations will be detected in several compilation 
units even though none of the units is illegal with respect to the 
units it depends on; by AI-00256, the illegality need not be 
detected until execution is attempted (line 95). 

e. CD2A62D has been withdrawn because it wrongly requires that an 
array object's size be no greater than 10, although its subtype's 
size was specified to be 40 (line 137). 

f. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] have 

been withdrawn because they wrongly attempt to check the size of 
objects of a derived type (for which a 'SIZE length clause is 
given) by passing them to a derived sub-program (which implicitly 
converts them to the parent type (Ada standard 3.4:14)). 
Additionally, they use the 'SIZE length clause and attribute. 


D-1 







WITHDRAWN TESTS 




whose interpretation is considered problematic by the WG9 ARG. 

g. CD2A81G, CD2A83Gj CD2A8UM and N, and CD50no have been withdrawn 
because they assume that dependent tasks will terminate while the 
main program executes a loop that simply tests for task 
termination; this is not the case, and the main program may loop 
indefinitely (lines 7^, 85, 86 and 96, 86 and 96, and 58, 
respectively). 

h. CD2B15C and CD7205C have been withdrawn because they expect that a 
'STORAGE_SIZE length clause provides precise control over the 
number of designated objects in a collection; the Ada standard 
13.2:15 allows that such control must not be expected. 

i. CD2D11B has been withdrawn because it gives a SMALL representation 
clause for a derived fixed-point type (at line 30) that defines a 
set of model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

j. CD5007B has been withdrawn because it wrongly expects an 
implicitly declared subprogram to be at the the address that is 
specified for an unrelated subprogram (line 303). 

k. ED7004B, ED7005C and D, ED7006C and D [5 tests] have been 

withdrawn because they check various aspects of the use of the 
three SYSTEM pragmas; the AVO withdraws these tests as being 
inappropriate for validation. 

l. CD7105A has been withdrawn because it requires that successive 
calls to CALENDAR.CLOCK change by at least SYSTEM.TICK; however, 
by Commentar'-' AI-00201, it is only the expected frequency of 
change that must be at least SYSTEM.TICK—particular instances of 
change may be less (line 29). 

m. CD7203B and CD7204B have been withdrawn because they use the 'SIZE 
length clause and attribute, whose interpretation is considered 
problematic by the WG9 ARG. 

n. CD7205D has been withdrawn because it checks an invalid test 
objective: it treats the specification of storage to be reserved 
for a task's activation as though it were like the specification 
of storage for a collection. 

o. CE2107I has been withdrawn because it requires that objects of two 
similar scalar types be distinguished when read from a 
file—DATA_ERROR is expected to be raised by an attempt to read 
one object as of the other type. However, it is not clear exactly 
how the Ada standard 14.2.4:4 is to be interpreted; thus, this 
test objective is not considered valid (line 90). 


D-2 





WITHDRAWN TESTS 




p. CESmC has been withdrawn because it requires certain behavior 
when two files are associated with the same external file; 
however, this is not required by the Ada standard. 

q. CE3;301A has been withdrawn because it contains severed calls to 
END_OF_LINE and END_OF_PAGE that have no parameter: these calls 
were intended to specify a file, not to refer to STANDARD_INP'JT 
(lines 103, 107, 1l8, 132, and 136). 

r. CE3**11B has been withdrawn because it requires that a text file's 
column number be set to COUNT'LAST in order to check that 
LAY0UT_ERR0R is raised by a subsequent PUT operation. But the 
former operation will generally raise an exception due to a lack 
of available disk space, and the test would thus encumber 
validation testing. 


D-3 






