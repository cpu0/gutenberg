General Disclaimer 


One or more of the Following Statements may affect this Document 


• This document has been reproduced from the best copy furnished by the 
organizational source. It is being released in the interest of making available as 
much information as possible. 


• This document may contain data, which exceeds the sheet parameters. It was 
furnished in this condition by the organizational source and is the best copy 
available. 


• This document may contain tone-on-tone or color graphs, charts and/or pictures, 
which have been reproduced in black and white. 


• This document is paginated as submitted by the original source. 


• Portions of this document are not fully legible due to the historical nature of some 
of the material. However, it is the best reproduction available from the original 
submission. 


Produced by the NASA Center for Aerospace Information (CASI) 




A. Portable Clinical or Laboratory Computation System 


1. General Description 

2. CBL/NOVA Analog Interface: Reference Manual 

and Assembly Language Programming Guide 

3. CBL/NOVA RT Basic: User Manual and Programming 

Guide 


B. Stereo Display of Vectorcardiograms by Jerome N. 
Sheridan 










o 


PORTABLE CLINICAL OR LABORATORY COMPUTATION SYSTEM • 


Excerpted from; 

QUARTERLY PROGRESS REPORT NO. 106 July 15, 1972 


pp. 172-184 




13. PORTABLE CLINICAL OK LABORATORY COMPUTATION SYSTEM 


I . Introduction 

A small, portable, relatively inexpensive computer system (Fig. XIII- 5) has been 
developed for on-line use in clinical or laboratory situations. The system features an 
integrated hardware- software package th.at permits use of all periphcr-als, such as 
aiialog-to-digital converter, oscilloscope, plotter, digital bus, and so forth, with an 


(Xm. COMMUNICATIONS BIOPHYSICS) 


^'* ^ * • .* 1 




•< V ! 


; |. ■ •• 
j * * - • ■ J 

, « • s. ! 

^ . 

. . ■ ■ — ■■■»»• 








r ~ r 




. -'-TT- T' 


ORIGINAL PAGE IS 
OE POOR QUALITY 




Fig. XlII-5. Portable clinical laboratory computation system. 


interpreter constructed around the BASIC programming language.* TViis report gives 

a brief description of the hardware of the system. Conceptually, the system is similar 

2 

to the LINC system, which was developed in 1962. This was the earliest computer sys- 
tem designed explicitly for application in a laboratory environment. Since the devel- 
opnient of the LINC, advances in integrated circuit technology have made much more 
compact and powerful systems possible. 

The Analog Interface is a system of I/O devices which communicate among the 
NOVA series of computers (Data General Corporation), the analog world, and the user. 

combination with the NOVA, this system provides a compact, powerful, easy-to- 
operate system for processing physiologic data. The interface consists of a 15 X 15 in. 
main logic board and a 5 1/4 in. half-rack analog chassis (Fig. XIII-6). The main logic 
board is inside the NOVA main frame and the analog chassis is mounted near the 
NOVA main frame, sharing rack .space with a small X-Y display oscilloscope 
(Tcktroni.x, Inc.), 




(XIII. COMMUNICATIONS BIOPHYSICS) 


Fig. XIII-6. Analog chassis 


Figure XIII-7 is a block diagram of the system, which is organized around a NOVA 
line processor and its associated memory. As well as the familiar teletype, special 
peripherals have been added to enhance the capabilities of the system. The NOVA line 
includes small general-purpose processors that are compatible from model to model. 


Fig. XIII-7. 

Diagram of the clinical laboratory system 


TeiETYPt 


CMAIUCTCK 

CCN£RAT0A 


analog 

OUTPUT 


The Central Processing Unit (CPU) is organized around 4 general-purpose registers, 
two of which may be used as index registers. The NOVA shown in Fig. Xni-5 (NOVA 800) 
contains 8192 l6-bit words of 800 -ns memory. At the bottom of the rack is a LINC tape 
(Computer Operations, Inc.) that provides inexpensive and reliable storage for random 
access of programs and data. A second system in current use also includes a 256K fixed' 
head disk for high-speed storage and retrieval. All of the other preipherals shown in 
Fig. Xin-7 were developed in this laboratory, and will be described in more detail. 


ORIGINAL PAGE IS 
QPR No. 106 ^^OOR QUALITY 









I 



(XIII. COMMUNICATICWS BIO-^HYSICS) 


2. Analog Chassis Front Panel 


The analog chassis front panel (Fig. XHI-S) provides a convenient point of inter- 
action between the user and the system. It is divided into four sections: analog inputs, 
analog knobs, trigger inputs, and trigger switches. The analog inputs and analog knobs 
provide input for 8 of the 16 available analog- input channels. The trigger switches allow 
the user to set flags in the device corresponding to switches; similarly, the trigger 
inputs accept analog signals as input and set flags when the input exceeds a set threshold. 


TSICGER 

SWITCHES 


ANALOG 

* R9 


analog inputs 


0 SAIN • o'pser 


TRIGGER INPUTS 


Fig. XIII-8. Analog chassis front panel. 


The analog inputs accept analog signals over a range of ±0. 2 to ±4 V and allow the 
user to adjust gain and offset controls to bring the signals into the normal operating 
range of the analog multiplexer (±2 V). The user may also select ac or dc signal 
coupling. 

The analog knobs provide a convenient method of presenting parameters to a pro- 
gram. A full counterclockwise setting on a knob corresponds to minimum input, while 
a fuU clockwise setting corresponds to maximum input. 

The trigger inputs accept signals in the range ±10 V. The user may set a threshold 
voltage; if the signal exceeds this voltage, the corresponding trigger flag will be set. 

The trigger circuit provides approximately 0.25 V of hysteresis as protection against 
noise. The user may also select signal coupling at these inputs. 

The trigger switches provide a convenient method of setting a program flag. They 
may be depressed, in which case they spring back to the rest position when released, 
or they may be pushed upward into the latch position. ‘The switch will remain in the latch 




(XIII. COMMUNICATIONS BIOPHYSICS) 

position until the user resets it. A Light-Emitting Diode (LEO) lamp is associated 
with each switch. These lamps are under program control, not electrically connected 
to the switches. Wliile it is convenient to associate them with the state of a switch, they 
may indicate any condition the user desires. 

All signal inputs at the front panel are fully protected against input voltages of l30 V. 
Any input signal outside the normal operating range (~ ±12 V) will activate the protective 
circuitry. If the protective circuitry is overloaded, the circuit will break down in such 
a way as to open the signal line, and thus disconnect the overload signal from the signal- 
* conditioning electronics. 

3. Special System Peripherals 

a. High- Resolution Clock 

The High-Resolution Clock (HRC) is a programmable interval clock. The HRC may 
be programmed to set hardware flags at a periodic rate, or perform interval measure- 
ments on an external signal. 

Figure XlII-9 is a block diagram of the HRC, which contains three 16-bit registers: 
the preset, the counting, and the output registers. The counting register is periodically 
incremented by the HRC control logic's scaled clock. The scaled clock is derived by 
dividing the selected clock frequency (internal 1 MHz or external clock) by the clock 
scale factor in the control register. When the counting register overflows (produces 
a carry-out of the most significant bit), the control logic automatically presets the 
counting register with the contents of the preset register. Thus, for a given scaled- 
clock frequency, the period between counter register overflows Is determined by the 
contents of the preset register. By loading the preset register and control register with 
appropriate values, the user can program the counter register to overflow at precise 
intervals. The scaled- clock frequency selected by the user determines the basic reso- 
lution, while the contents of the preset register determines the interval within 
that resolution. The major constraints on the user are the number of available 
scaled-clock frequencies (four) and the fact that the counting register is 16 bits, 
which limits each period to 65, 536 scaled- clock cycles. In normal operation, the 
output register tracks the counting register to allow a readout of the current 
clock value. 

Each time the counting register overflows, the control logic produces an HRC over- 
flow pulse. This overflow pulse is distributed to the other devices in the analog inter- 
face. This pulse allows the activity of the analog interface to be clocked at a precise, 
periodic rate. It is particularly useful for controlling the sampling interval on the 
analog-to-digital converter and the conversion intervals for the dual-channel digital- 
to- analog converters. 


QPR No. 106 


176 


(XUI. COMMUNICATIONS BIOPHYSICS) 



Fig. XlU-9. High-resolution clock. Arrows indicate data 
and control information flow. 

An Overflow Enable feature allows the HRC to request program service when the 
counting register overflows. By use of this feature, a program can maintain elapsed 
time. An End Enable feature allows the output register to be frozen upon the occurrence 
of an external event, and hence provides the capability of interval measurement. 

b. Analog Input 

The Analog Input (AIN) provides 16 analog input channels. Any channel may be 
selected under program control to yield a 10-bit sample. Figure XIII- 10 is a block 
diagram of the system. The front end of the device has channel conditioners to drive 
the 16- channel multiplexer. The output of the multiplexer is sampled by the Sample- 
and-Hold which drives the 10-bit analog-to-digital converter. The output of the analog- 
to-digital converter may be read in by the user. In addition to the analog section, a 
digital section is included containing the channel select register, the control register, 
the status flags, and the control logic. 

The contents of the channel select register determines which of the input channels 
is selected by the multiplexer for the Sample-and-Hold. If the user selects the scan 
mode, the content of the channel select register is automatically incremented after each 
conversion, so that the next sequential channel is selected. 

The control register determines the mode of operation of the AIN. It allows the user 


QPR No. 106 


177 









(XIII. COMMUNICATIONS BIOPHYSICS) 


ANAtCX) - TO - W<MT*l 
CONVEtnt 
AND 

DATA ACGISnt 


SAADAIE 

AND 

HOLD 


CHANNEL SELECT 
UCISTER 


CONTKOl UCISnE 

• CONVUT COMAJkND SOUta 

• CHANNEL SCAN SEUCT 


CONTtOL LOGIC 


ANALOG INPUT EXTERNAL 
CONVai COAUAANO 


STATUS FLAGS 

• iUSY 

• DONE 

• INTEMUFT OISAILE 


HIGH •RESOLUTION CLOCK 
OVERFLOW PULSE 


Fig. XIII- 10. Analog input 


to specify the source of the commauid in order to initiate a new conversion cycle, as well 
as to select a scanning or nonscanning mode. The user may select, as the source of 
the conversion command, the program, the HRC overflow pulse, or an external control 
line. 

A conversion cycle comprises the following events: First, the request for a con- 
version cycle is noted by the hardware. When the multiplexer has selected the requested 
channel (as specified by the channel select register) the conversion is initiated by sam- 
pling the output of the multiplexer. After the Sample -aLnd- Hold has acquired the signal 
and 'frozen" it, the analog- to- digital converter begins the actual conversion to a digital 
representation. Since the Sample-and-Hold maintains the signal value, the multiplexer 
may be released to scam to a new channel, if this mode is selected. When the converter 
finishes, the AIN will indicate that a valid conversion value is available to the user. 


c. Dual Channel Analog Output 


The Dual Channel Analog Output (AOUT) omprises two 10-bit digital- to- analog 
converters and the associated control logic. The AOUT (Fig. XIII- 11) allows the user 
to generate two channels of analog output in the ±2 V range. Output conversions may be 
initiated under direct program control from the HRC overflow pulse, or from an exter- 
nal control line. • 










(XIII. COMMUNICATIONS BIOPHYSICS) 


AKM'.OG Cum/T EXTttNAL ST«OM 
WOH-K$<XUTION aocK ovtmow ru.M 


STATUS FUGS 

• lUS'' 

• DONE 

• INTERDUPT CMSAILE 


Fig. Xin-11. Analog output 


The data path for each channel goes from the program (by way of the NOVA bvis) to 
the channel data register, from the data register to the output register, and finally to 
the 10-bit digital- to- analog converter. The user may load the data register directly, 
while the AOUT control logic loads the output register. While the data registers are 
loaded independently, the output registers are loaded by the same signal, so that any 
changes in output are synchronous. The control register selects the source of the 
signal to initiate the load signal to the output register. Status flags are provided to 
indicate the current status of the device and to request program service. 

The use of two buffers in each channel (double buffering) allows the user to set up 
the desired output value in advance of the actual time it will be required, without 
changing the previous output value. 


d. Display Hardware 

The Display (DISP) provides the,, capability of generating displays. The DISP has 
two 10-bit digital- to- amalog converters, and provides an addressable field of 1024 X 
1024 points. As many as four X-Y display devices may be attached to the DISP output 
bus. The same X-Y deflection signals are applied to each device, but the devices are 
individually addressable for beam intensification. 

Figure Xni-12 is a block diagram of the DISP. The unit is similar to the AOUT, 


DATA MEGISTER 



OUTPUT REGISTER 


I0>IIT 

1 



1 


nCITAL TO ANALOG 


OAIA RtgiSIU 


UUTRUT RkGISUR 


lO'MT 

A 


A 


MOITAL TO ANALOG 


CONTROL REGISTER 



• OUTFUT STICK SOUICE 













1. ITZ 

I 

(Xm. COMMUNICATIONS BIOPHYSICS) 

A display output device may also indicate that it is not ready to accept changes in 
the values of X-Y by activating the Display Wait line. The DISP control logic will not • | 

change the contents of tha output registers while this signal is active, and thus prevents 
change in the X>Y analog signals. If the control logic receives a request to load the out* 'i 

^ put registers while Display Walt is active, it will honor the request as soon as Display 

i Wait becomes nonactive. Typical applications of the Wait feature are raising and I 

lowering the pen on a hardcopy plottc-r or preventing writing on a storage oscilloscope 

I while the screen is being erased. 

I 

^ e. Character Generator 

The hardware Character Generator (CHAR) provides the user with a system for the 
generation of characters on the display output devices. The CHAR can represent 
64 ASCn characters by a 5 X 7 dot matrix. The hardware in use at the present time is 
an improved version of a character generator described in an earlier report.^ 

Figure XIII-13 is a block diagram of the character generator. The user may access 
the character register, size register, and status flags. The character register speci* 
fies the character to be drawn, while the size register specifies the physical size of 
the character on the display device. The status flags are shared with the DISP logic. 



I ) 



Fig. XIII-13. Character generator. 


QPR No. 106 


181 













(XUI. COMMUNICATIONS BIOPHYSICS) 


o 


80 that the user need not remember which device was the last to carry out display 
activity, nor need he test the status of both DISP and CHAR. All the user need do is 
verify that the device he wishes to use is free. 

The column and row registers (which are not accessible to the user) specify the 
current column and row address of the dot that is to be plotted. Together with the 
character code, these registers provide address information for the Read Only Memory. 
The output of the Read Only Memory for a given character, column and row determines 
whether or not a dot will be drawn on the display. The column and row registers specify 
the relative deflections of the X and Y outputs, and thus scan the character field. In 
Fig. Xin-12 the deflection signals from the CHAR are summed with the current X and Y 
coordinates to determine the actual position of the character on the display field. 


f. General-Purpose Digital Register 

The General- Pur|x>se Digital Register (GPR) provides 16 lines of digital input and 
16 lines of digital output for the user. The GPR allows the user to interface to digi- 
tally programmed hardware that is not used often enough to Justify construction of a 
special-purpose interlace to the NOVA. 

Figure Xni-14 is a block diagram of the GPR. A l6-bit digital output register is 


o 








(Xm. COMMUNICATIONS BIOPHYSICS) 



provided. The programmer may load this register and the contents remains fixed until 
changed by the user. The 16-bit counting input register will accept 16 parallel digital 
inputs from a user interface. It may also be incremented by the user interface for use 
as an event counter. 

The control logic allows control of the status flags by the user interface, so that 
the interface may request program service as would any special-purpose interface. 


g. Trigger Input 

The Trigger Input (TRG) provides a facility for interaction between the user and 
program. Four front- panel switches are provided, and when the user trips any of these 
switches a unique hardware flag is set which may be interrogated by the program. Analog 
trigger inputs are also provided. Each of these inputs allows an analog signal to set 
a unique trigger flag, which can be interrogated in a manner similar to the switch flags. 
Thus a wide variety of signals may be used to flag events for the program. 


KONT PANEL 
SWITCHES 


tuccci flags 

KEGISTE* 


niONT PANEL 
ANALOG THGCf* 
INPUTS 


PPONT PANEL 
LAMPS 


LAMP (EGlSm 


STATUS PLAOS 

• SUSY 

• DONE 

• INTEMUPT nSAILE 

• analog TPIGGEt ENABU 


CONTROL LOGIC 


Figure XIII-15 is a block diagram of the TRG system. The TRG is represented on 
the front panel by 4 switches, 4 analog trigger inputs, and 4 LED lamps (see h ig. XIII-8) 
The various inpi.^^ set flag bits in the trigger flags register. The user may load the lamp 
register, and thus activate a LED lamp on the front panel. The control logic responds 










(XIU. COMMUNICATIONS BIOPHYSICS) 


to changes in the status of the trigger flags register (and thus indirectly in the various 
inputs) and sets the status flags to request p* ogram service. 

Each of the analog trigger inputs accepts analog inputs in the ±10 V range and com- 
pares the input with a reference value determined by the threshold knob (above and to 
the right of the input, see Kig. XIII-8). When the input signal exceeds the reference, 
an event is said to have occurred on that input. Thus a trigger flag is set on the occur- 
rence of an event, and will remain set even after completion of the event. If another 
event occurs while the corresponding trigger flag is set, the flag will remain set. 

The implementation of this system would not have been possible without the guidance 
and encouragement of Professor S. K. Burns, who also designed the hardware character 
generator. The General-Purpose Register was designed by Barry Caiman, who also 
pi*ovided many useful comments about programming the system during the development 
stage. 

J. B. Walters, Jr. 

References 

1. B. Caiman, "A Real-time 'Digital Processing System for Electrophysiologic Wave- 
forms," S. B. and S. M. Thesis, Department of Electrical Engineering, M. I. T. , 
September 1970. 

2. W. A. Clark and C. E. Molnar, "A Description of the LINC," in R. W. Stacy and 

B. D. Waxman (Eds.), Computers in Biomedical Research , Vol. II (Academic Press, 
Inc., New York, 1965). 

3. S. K. Burns, "Use of a Hardware Character Generator with Small Computers," 
Quarterly Progress Report No. 98, Research Laboratory of Electronics, M. I. T. , 
July 15, 1970, pp. 206 - 214. 

C. TIME -DOMAIN FILTERS 
1. Introduction 


I 





The trend toward computer monitoring and anedysis of the electrocardiogram (ECG) 
has led to the development of progranm-ned digital filters to eliminate noise prior to 
detection of the QRS complex and analysis of morphology. Multipole frequency -domain 
filters are adequate for both tasks but, in general, require large amounts of processor 
time. 

Improved detection for the QRS complex in question can be achieved by using a 
matched filter, but implementation of such a filter by correlation with a template of 
a QRS complex requires many times more processor time than is required for 
frequency -domain filters. 

An improvement in the speed of such a filter can be accomplished by a simplification 
of the template. The QRS can be well approximated by a triangular -shaped wave of 


I 




QPR No. 106 


184 




^ ; 

CBL/NOVA ANALOG INTERFACE: 
Reference Manual and 
Assembly Language Programming Guide 


April 1973 


J. B. Walters 
B. Gaiman 



Bioengineering Group 
Communications Biophysics Group 
Research Laboratory of Electronics 
Massachusetts Institute of Technology 


Copyright 1973 
All Rights Reserved 




^flECEDING PAGE BLANK NOT FILMEEl 


CBL/NOVA ANALOG INTERFACE; 
Reference Manual and 
Assembly Language Programming Guide 


April 1973 


J. B. Walters 
B. Gaiman 


Bioengineering Group 
Communications Biophysics Group 
Research Laboratory of Electronics 
Massachusetts Institute of Technology 


Copyright 1973 
All Rights Reserved 


CONTENTS 


> 

1 

i 

i 

1 

4 

L. 

i • 



CD 


PREFACE 7 

1. INTRODUCTION TO THE ANALOG INTERFACE 

1.0 General Information 1~1 

1.1 Front Panel 1-7 

1.2 How to Use This Manual 1-8 

2. THE HIGH RESOLUTION CLOCK 

2.0 Introduction 2 t1 

2.1 Preset, Counting, and Output Registers 2-4 

2.2 Control Register 2-6 

2.3 Device Status Flags 2-9 

2.4 Programming the HRC 2-13 

3. THE ANALOG INPUT 

3.0 General Information 3-1 

3.1 Input Specifications 3-4 

3.2 Data Register 3-6 

3.3 Channel Select Register 3-6 


3.4 Control Register 3-7 

3.5 Status Flags 3-9 

3.6 Analog Input Timing 3-11 

3.7 Programming the AIN 3-12 

I 4 . THE DUAL CHANNEL ANALOG OUTPUT 

4.0 General Information 4-1 

4.1 Analog Outputs 4-3 

4.2 Data Registers 4-3 

4.3 Control Register 4-4 

4.4 Status Flags 4-6 

4.5 Programming the AOUT 4-9 

5. THE DISPLAY ANALOG OUTPUT 

5.0 General Information 5-1 

5.1 X-Y Outputs 5-5 

5.2 Data Registers 5-6 

5.3 Display Field 5-6 

5.4 Control Register 5-8 

5.5 Status Flags 5-10 

5.6 Standard Display Devices 5-13 

5.7 Programming the DISP 5-14 

6. THE CHARACTER GENERATOR 

6.0 General Information 6-1 

6.1 Character Register 6-4 

6.2 Size Register 6-4 

6.3 Status Flags 6-7 

6.4 Proaramming the CHAR 6-9 

o 


- 2 - 




CONTENTS 

(Continued) 


THE GENERAL PURPOSE REGISTER 

7.0 General Information 7-1 

7.1 Output Register 7-1 

7.2 Input Register 7-3 

7.3 Status Flags 7-4 

7.4 Programming the GPR 7-6 

THE TRIGGER INPUTS 

8.0 General Information 8-1 

8.1 Analog Signal Input Specifications 8-4 

8.2 Trigger Flag Registers 8-5 

8.3 Lamp Register 8-6 

8.4 Status Flags 8-7 

8.5 Programming the TRG 8-5 


- 3 - 


o 


APPENDICES 


A. Special Assembly Language Definitions A-2 

B. General Physical and Electrical Specifications B-2 


I C. Interface Signal Specifications and Connector Allocation 

} C.l Driving and Receiving External Lines 

C.2 HRC Signal Specifications 

C.3 AIN Signal Specifications 

C.4 AOUT Signal Specifications 

C.5 DISP Signal Specifications 

C.6 GPR Signal Specifications 

C.l TRG Signal Specifications 

C.8 GPR Input Connector 

C.9 GPR Output Connector 

C.IO TRG Connector 

C.ll AIN Connector 

C.12 AOUT Connector 

C.13 DISP Connectors 

C.14 Connector Hardware and Tools 


I 

I 




LIST OF FIGURES 


1.1 Portable Clinical Laboratory Computation System 

1.2 Summary of Analog Interface Features 

1.3 Analog Chassis 

1.4 Analog Chassis Front Panel 

2.1 HRC Block Diagram 

2.2 HRC Control Register Bit Assignments 

2.3 HRC Timing Range For Internal 1 M Hz. Clock.... 

2.4 HRC Busy-Done State Transitions 

3.1 AIN Block Diagram 

3.2 AIN Control Register Bit Assignments 

3.3 AIN Busy-Done State Transitions 

4.1 AOUT Block Diagram 

4.2 AOUT Control Register Bi*- Assignments 

4.3 AOUT Busy-Done State Transitions 

5.1 DISP Block Diagram 

5.2 DISP Coordinate System 

5.3 DISP Control Register Bit Assignments 

5.4 DISP Busy-Done State Transitions 

6.1 CHAR Block Diagram 

6.2 CHAR Dot Matrix 

6.3 CHAR Character Set 

6.4 CHAR Character Size 

6.5 CHAR Busy-Done State Transitions 

7.1 GPR Block Diagram 

7.2 GPR Busy-Done State Transitions 

« 

8.1 TRG Block Diagram 

8.2 TRG Busy-Done State Transitions 




PREFACE 


This manual describes the CBL/NOVA Analog Interface. 
General operating instructions and the requisite infor- 
mation for applications programming in NOVA assembler 
language are provided. 

The Analog Interface is a system of I/O devices which 
provide an interface between the NOVA line of computers, 
the analog world, and the user. It is designed to faci- 
litate processing of analog data in the laboratory and 
clinical environment. Included are facilities for samp- 
ling and creation of analog data. Waveforms and alpha- 
numeric data can be conveniently presented on displays 
or on an x-y plotter. A generalized digital signal in- 
terface is provided, allowina simple interfacing to 
digitally programmable hardware. 

To take full advantage of the information presented in 
this manual, the reader should be experienced in NOVA 
assembler language programming. The reader who is inter- 
ested in programming the Analog Interface from a higher 
level language will find Section 1, Introduction to the 
Analog Interface, to be a sufficient introduction to 
the system (in addition to the reference manual for the 
language) . 


c 


o 


i 


( 


t 




SECTION 1 

INTRODUCTION TO THE ANALOG INTERFACE 
1.0 General Information 

The Analog Interface is a system of I/O devices which 
provides an interface between the NOVA series of com- 
puters, the analog world, and the user. In combina- 
tion with the NOVA, this system provides a compact, 
powerful, yet easily used system for processing 
low frequency data in real time (See Figure 1.1). 

The Analog Interface consists of seven devices; 

1) An Analog to Digital Converter, 

2) A High Resolution clock, 

3) An Analog Output, 

4) A Dual Channel Analog Output with Display 
Control Logic, 

5) A 5x7 Dot Matrix Hardware Character Generator, 

6) A 16 bit digital I/O General Purpose Register, 
and 

7) A Switch and Analog Signal Trigger Register. 

The characteristics of these devices are summarized 
in Figure 1.2. 

Physically, the interface consists of a 15x15 inch 
main logic board and a 5-1/4 inch half-rack analog 
chassis (Figure 1.3). The main logic board is con- 
tained inside the NOVA main frame, while the analog 
cabinet is mounted near the NOVA sharing rack space 
with a small X-Y display scope (Figure 1.1). 




PRECEDING PAGE BLANK NOT FILMED 


V 


1-1 





» > • ■ 




rr r'""‘""- 


' «k X^'"- 

11 



> i.-* 



H *» H 



iL'“ ' 





I 


1 



f 


i 

r 



1) Analog to Dlaltal Converter (AIN) 

-Ten bit resolution 
-Sixteen channels of analog input 
-4 channels connected to front panel knobs 
-4 channels with preamplifiers providing adjust- 
ed}le gain and offset 

-Convert command source under program control. 

2) High Resolution Clock (HRC) 

-16 bit progr 2 unmable interval clock 
-Internal 1 M Hz crystal reference clock 
-Resolution of 1 microsec to 1 millisec avail- 
able from internal clock under program control. 
-External reference clock input is available. 

3) Analog Output (AOUT) 

-Dual 10 bit D/A converters 

-Double buffered to prevent output jitter 

-Convert command source under program control. 

4) X-Y Analog Output (DISP) 

-Dual 10 bit D/A converters 

-Convert/intensify command source under program 
control 

-4 display channels 

-Can extend plotting cycle to accomodate slow 
peripherals 
-Double buffered 

5) Hardware Character Generator (CHAR) 

-5x7 dot matrix character generator 
-Generates 64 ASCII characters 
Prooram selectable sizes 

6) General Purpose Register (GPR) 

-16 bit input and output buffers 
-Counting input buffer 
-Control pulses 

7) Trigger Input (TRG) 

-4 analog signal inputs with adjustable threshold 
levels 

-High input impedance 

-4 front panel toggle switches 

-4 LED lamp outputs for feedback to user 


Figure 1.2 - Summary of Analog Interface Features 

c 


1-3 




1»1 Front Panel 






The analog chassis front panel (Fig. 1.4) pro- 
vides a convenient point of interaction between the 
user and the system. It is divided into four sections: 
analog inputs, analog knobs, trigger Inputs, and 
trigger switches. The analog Inputs and analog 
knobs provide input for 8 of the 16 available ana- 
log-input channels. The trigger switches allow 
the user to set corresponding flags in the device. 
Similarly, the trigger Inputs accept analog signals 
as input and set flags when the input first exceeds 
a set threshold. 

The analog inputs accept analog signals over a range 
of - 0.2 to - 4V and allovr the user to adjust gain 
and offset controls to bring the signals into the 
normal operating range of the analog multiplexer 
(-2V) . The user may also select direct or capaci- 
tive coupling. 

The analog knobs provide a convenient method of 
presenting parameters to a program. A full counter- 
clockwise setting on a knob corresponds to minimum 
input, while a full clockwise setting corresponds 
to maximum input. 

The trigger inputs accept signals in the range - lOV. 
The user may set a threshold voltage; if the signal 
exceeds this voltage, the corresponding trigger 
flag will be set. The trigger circuit provides 
approximately 0.25V of hysteresis as protection 
against noise. The user may also select signal 
coupling at these inputs. 


1-5 




Figure 1.4 - Analog Chassis Front Panel 


O GAIN • OFFSET 


ANALOG 


ANALOG INPUTS 


4 







The trigger switches provide a convenient method of 
setting a program flag. They may be depressed, 
in which case they spring back to the rest position 
when released, or they may be pushed upward into the 
latch position. The switch will remain in the latch 
position until the user resets it. A Light-Emitting 
Diode (LED) lamp is associated with each switch. 

These lamps are under program control, not electri- 
cally connected to the switches. While it is convenient 
to associate them with the state of a switch, they 
may indicate any condition the user desires. 

All signal inputs at the front panel are fully 
protected against input voltages of - 30V. Any 
input signal outside the normal operating range 
-12V) will activate the protective circuitry. 

If the protective circuitry is overloaded, the cir- 
cuit will break down in such a way as to open the 
signal line, and thus disconnect the overload signal 
from the signal-conditioning electronics. 



T 

! 

V 

( 

1 


T 



I 


i 


1.2 How to Use This Manual 

To take full advantage of the information present- 
ed in this manual, the reader should be familiar 
with the material presented in How to Use the NOVA 
Computers , particularly Section 2.3 (dealing with 
the I/O instruction set) . The user should also be 
generally familiar with the contents of the Data 
General Assembler Manual. If the reader is inter- 
ested in programming the devices to run in interrupt 
mode, he should be familiar with Section 2.4 
Program Interrupt, of How to Use the NOVA Computers . 

The notation for instructions used in explanations 
of the function of the Analog Interface is the same 
as used in the Data General Assembler manual. All 
numbers that appear in the body of the text are deci- 
mal unless explicitly indicated otherwise. Numbers 
that appear in the body of an instruction are octal. 
Any other radix appearing in an instruction will be 
marked as such by an accepted assembler convention. 

In tables and text where it is apparent that groups 
of control bits are being referred to, the numbers 
are in binary. The assembler convention of nBm is 
used. In this notation, the number n will be dis- 
placed so that its least significant bit is in posi- 
tion m of the 16 bit word. The results are equiva- 
lent to evaluating the expression: 

n * 2 

Thus, IB0 produces a word with bit 0 set to 1; 1B15 
is the same as 1. 

The notation 'C(X)' is used to indicate the contents 
of X. Thus (C(ACl))is the contents of accumulator 
number 1. 



ti 


t 


J 





1-8 


« ..1 


u 


The notation ”»X" is used to indicate a constant 





Thus, 

LDA 0, = 4 

indicates load AC with the constant 4. 
The instruction, 


JSR @ - .DAOUT 

indicates a JSR instruction indirect through a word 
containing the address of the routine .DAOUT. 

A number of mnemonics for various constants useful 
in programming the Analog Interface are referred 
to in the text. These mnemonics are defined in 
"CLDEFS", as ASCII source tape or file if DOS is 
being used. A listing of this file forms Appendix A. 
In general, mnemonics that refer to single bits are 
defined only for the "1” mode. The mode of operation 
selected by the corresponding bit being "0" is con- 
sidered the default mode. In all cases, the default 
mode is detailed in CBLDEFS as well as the main text. 



1-9 


SECTION 2 




1 

J 

m 


THE HIGH RESOLUTION CLOCK 
2.0 General Information 

The High Resolution Clock (mnemonic HRC) is a pro- 
grammable interval clock. The HRC may be programmed 
to set hardware flags at a periodic rate or perform 
interval measurements on an external signal. 

Figure 2.1 provides a block diagram of the organiza- 
tion of the HRC. The HRC contains three 16 bit regi 
sters: the Preset Register, the Counting Register, 
and the Output Register. The Counting Register is 
periodically incremented by the HRC Control Logic's 
scaled clock. The scaled clock is derived by divid- 
ing the selected clock frequency (internal ImHz or 
External Clock) by the clock scale factor in the 
Control Register. When the Counting Register over- 
flows (counts from 177777g to (f00000^) , the Control 
Logic automatically presets the Counting Register 
with the contents of the Preset Register. Thus, 
for a given scaled clock frequency, the period be- 
tween Counter Register overflows is determined by 
the contents of the Preset Register. By loading 
the Preset Register and Control Register with the 
appropriate values, the user can program the Count- 
er Register to overflow at precise intervals. The 
scaled clock frequency the user selects determines 
the basic resolution, while the contents of the Pre- 
set Register determine the interval. The major con- 
strains on the user are the available scaled clock 
frequencies (4) and the length of the Countinq Regi- 
ster (16 bits) which limits each period to 65,536 


G 


2-1 










Q 


scaled clock cycles. In normal operation, the 
Output Register tracks the Counting Register to 
allow a readout of the current clock value. 



Each time the Counting Register overflows, the Con- 
trol Logic produces an HRC Overflow Pulse. This 
Overflow Pulse is distributed to the other devices 
in the Analog Interface, allowing th.e activity of 
the Analog Interface to be clocked at a precise, 
periodic rate. It is particularly useful for con- 
trolling sampling interval on the analog-to-digital 
converter and conversion intervals for the dual 
channel digital-to-analog converters. 

The Overflow Enable feature of the HPC allows the 
unit to perform as a programmable interval clock 
for maintaining elapsed time. The End Enable feat- 
ure allows the Output Register to retain the value 
of the Counting Register upon the occurrence of an 
external event. This feature allows the user to 
measure intervals between events with a high degree 
of accuracy. 



2.1 Preset, Counting, and Output Registers 

The Preset, Counting, and Output Registers (see 

Figure 2.1) may be simultaneously set at any time 

with a DOA £, HRC Instruction. The registers are 

16 bits wide. The Counting Register is incremented 

by the Control Logic and is not directly readable 

by the user. The Output Register, which may be 

read with a DIA d, HRC instruction, automatically 

tracks the Counter Register in normal operation. 

Thus, if the HRC is idle (i.e., after an lORST) , 

after the instruction sequence: 

DOA 0, HRC ;LOAD HRC PRSET REGISTER 

DIA 1, HRC ;READ CONTENTS OF THE HRC OUTPUT 

REGISTER 

AC0 and ACl will contain the same number. If the 
clock had been running, it could have incremented 
the Counter Register between the two instructions 
resultino in different values for AC0 and ACl. 


The Counting Register is incremented by the Control 
Logic at a rate determined by the contents of the 
Control Register and the selected reference clock. 
When the Counter Register overflows (counts from 
177777g to 000000q) the Counter Register is preset 
with the contents of the Preset Register. In addi- 
tion, an HRC Overflow Pulse is generated. This 
pulse may be used by other devices in the Analog 
Interface. Since the Counting Register is reloaded 
when an overflow occurs, the Preset Register deter- 
mines the interval in scaled clock cycles between 
Counting Register overflows. Suppose one wanted 
the HRC to overflow every 1000 scaled clock cycles. 


2-4 




o 


The following code would set 
for this mode of operation. 

NIOC HRC 

LDA 0,^1000 
NEC 0,0 

DOA JJ,HRC 

The code starts by clearing 


the Preset Register 

; CLEAR THE HRC 

;GET DECIMAL 1000 CONSTANT 
; REALLY WANT NEGATIVE OF 1000 

;SET THE HRC PRESET REGISTER 

he status flags in the 





HRC, as a matter of good programming practice. Then 
the decimal 1000 constant is laoded into the Preset 
Register. Note that we load the register with the 
negative of the number of clock cycles we wish. 

In the Counter Register bit zero is treated as a 
magnitude bit, not a sign bit. Thus, the range of 
the HRC registers is considered to be from 0 to 65,535 
(177777 octal) . If the Counter is loaded with a 
zero, 65,536 scaled clock cycles are required to 
produce an overflow condition. If the Counting Regi- 
ster is loaded with 65,535; 1 scaled clock cycle is 
required to produce an overflow condition. 



2-5 



The contents of the Control Register determines the 
mode of operation of the HRC. The Control Register 
must be loaded by the program before attempting to 
start the HRC. It is not modified by an I0R3T or C 
pulse to the HRC. 


Figure 2.2 summarizes the options available to the 
user. Overflow Enable, bit 11 (mnemonic HRCOVFL) , 
allows the user to specify whether or not DONE will 
be set on the occurrence of an HPC Overflow pulse. 

End Enable, bit 12 (mnemonic HRCEND) , performs the 
same function for the END FLAG. Note that if both 
bits 11 and 12 are zero, the HRC will never set 
DONE. It will however generate HRC Overflow pulses 
(if "BUSY") which other devices (such as the Analog 
Input) may use to initiate action. The Clock Source 
Bit, 13 (Mnemonic HRCEXT) , selects the internal 1 MHz 
reference clock if it is zero, otherwise the external 
clock input is selected. The Clock Scale Factor, 
bits 14 and 15, select the scale factor by which 
the selected reference clock is divided before input 
to the Counter Register increment logic. The two 
bit number represents the power of 10 by which the 
reference clock will be divided. 


o 


Figure 2.2 - HRC Control Register Bit Assignments 


'/ 



f 



BITS^ 


COMMENTS^ 


11 


12 


13 


14-15 


Overflow Enable Bit 
'O' (default) 

'!' (HRCOVFL) 


The Overflow Flag will 
never be set 

The Overflow Flag will be 
set by an overflow in the 
Counting Register. 


End Enable Bit 
'O' (default) 

'!' (HRCEND) 


The End Flag will never 
be set. 

The End Flag will be set 
by an external end pulse, 
or by a p pulse to the HRC. 


Refernce Clock Source Bit 

'O' (default) - The internal IMHz clock 

is selected. 

'!' (HRCEXT) - The External Reference 

Clock input is selected 

Clock Scale Factor 

Specifies the power of ten to divide the selected 
reference clock by. 

'00' - Divide by 1 

'01' - Divide by 10 

'10' - Divide by 100 

'll' - Divide by 1000 


^ All unused bits should be set to zero. 

2 

Mnemonics for the bit patterns are defined in Appendix A. 


i 


V 



i 

i 


2-7 


CONTROL 
REGISTER 
BITS 14,15 


RESOLUTION 

(SEC.) 


SELECTED 
COUNTING 
FREQUENCY 
(Hz J 


HRC OVERFLOW RANGE 


PERIOD (SEC.) 


FREQUENCY (Hz.) 


1 micro 
10 micro 
100 micro 
1 mini 


1 M 1 micro- 0.065536 

100 K 10 micro- 0.65536 

10 K 100 micro- 6.5536 

IK 1 mini- 65.536 


1 M - 15.2588 
100 K - 1.52588 

10 K - 0.152588 

IK- 0.0152588 


Figure 2.3 - HRC Timing Range for Internal 1 M Hz. Clock 


2 . 3 Device Status Flags 



In addition to the usual BUSY, DONE and INTERRUPT 
Disable status flags; the HRC conlains an Overflow 
Flag, End Flag, and Error Flag. The Overflow Flag 
indicates that the 16 bit Counter Register has over- 
flowed, while the End Flag indicates that an external 
End Pulse has been received. The Error Flag indicates 
that two External End Pulses have been received too 
close together, and that the Output Register was not 
free at the time the second pulse arrived. 

The Busy and Done flags operate as desribed in Section 
2.3 (Input-Output) of "How to Use the NOVA Computers". 
Since one would want the HRC to count continuously - 
not losing time - the device does not stop counting 
when Done is set. The only time the HRC is not count- 
ing is when both Busy and Done are cleared. Thus 
once started, the HRC will only stop counting if it 
receives a C Pulse or lORST. Fioure 2.4 diagrams 
possible Busy/Done Transitions. 

The Overflow Flag is set by the occurrence of an over- 
flow in the Counting Register. The Overflow Flag \/ill 
not set unless the Overflow Enable bit (HRCOVFL) is 
set in the Control Register (see Section 2.2). If the 
Overflow Flag is set, the HRC will jet the Done Flag. 
As explained in Section 2.1, when the Counting Regis- 
ter overflows it is reset with the contents of the 
Preset Register. The Overflow Flag and the Overflow 
bit in the Control Register have no effect on this 
operation. 


2-9 



I 















The End Flag is set by the occurrence of an External 
End Pulse (or P pulse to the HRC) . The End Flag will 
not be set unless the End Enable Bit (HPCEND) is set 
in the Control Register. If the End Flag is set, 
the Output Register contains the value of the Count- 
ing Register at the time of the External End Pulse. 
The Counting Register continues to count and the Out- 
put Register will resume tracking when the End Flag 
is cleared. The Overflow Flag is also frozen by the 
End Flag. The Overflow Flag is treated just like 
the Output Register by the HRC, so that the Overflow 
Flag is valid for measuring intervals that are longer 
than one full Counting Register cycle. 



i 

k 

f 

i 


E ^ 


f 


'7 





i 



The status of Busy and Done can be interrogated as 
standard practice for any device. If Done is set, 
then either the Overflow or End Flag must be set. 

If the End Flag is set, then the Error Flag may also 
be set. The state of the Overflow, End, and Error 
Flag may be read with a DIB d, HRC instruction. The 
bit assignm.ents are as follows: 

BIT FUNCTION 

0 End Flao 

1 Error Flag 

15 Overflow Flag 

Any of the flags may be individually cleared by ex- 
ecuting a DOB £, HRC to the device with the corres- 
ponding bit set. The following instruction sequence 
would read the flags into AC0 then clear only those 
flags set at the time of the DIB: 

DIB 0, HRC ;READ STATUS FLAGS 

DOB 0, HRC ; CLEAR ANY THAT WERE SET 




! 




2-11 



after executing this instruction sequence, AC0 holds 
the device status and all the device flags have been 
cleared. Done is cleared, and Busy is set again 
(provided an S pulse had started the device pre- 
viously) . 


The HRC can request interrupt service and acknow- 
ledge the INTA instruction as described in Section 
2.4 ~ Program Interrupt of How to Use the NOVA 
Computers . The HRC will acknowledge with the value 
of the mnemonic 'HRC. The Interrupt Disable flip 
flop of the HRC is attached to bit 1 of the bus. 

This interrupt mask is defined as MSHRC in Appendix A 


I 

2.4 Progreiinming the HRC 

The simplest mode of operation for the HRC is as 
I a periodic pulse generator to serve as a clock for 

j other devices in the Analog Interface. In this 

case, the programmer wishes to set up the HRC 
and let it run without further intervention from 
the program. It would simply clock the other devices 
, „ and the program would service their requests directly. 


i 

f 

f 

i 


i 

■ 


r 




Programming Example 2.1 is a subroutine which will 
set up the HRC for its simplest mode of operation. 

The listing is well commented and considered self- 
explanatory. 

Programming Example 2.2 makes use of the interrupt 
facility to provide a time of day clock in two core 
locations. To make the problem a little more inter- 
esting, let us assume that the programmer wishes to 
keep track of sideral time rather than solar mean 
time. A sideral second is equal to 0.997270 solar 
seconds. If one sideral second is sufficient resolu- 
tion, then we wish to increment the core counter 
every 997,270 microseconds. The internal crystal 
reference in the HRC is accurate to about 1 part 

4 

in 10 so rounding this figure to 997300 micro- 

5 . . . 

seconds ( an error of 3 parts ir 10 ) will not signi- 
ficantly affect the clock accuracy. This value simpli- 
fies programming the problem since it requires a 
basic clock period of 100 microseconds, and the full 
count of clock cycles (9973) will "fit in" the counting 
register. The code to implement this clock is pre- 
sented in Programming Exmaple 2.2. It is assumed 
that the user will provide an interrupt handler that 
will JSR to HRCINT when HRC interrupts. 



2-13 


00«1 


I 


I 


I 

f 

f 


1 


PE2. 1 


<28. 633 > 


JBW M8V 1, 1973 P8GE 


1 



; > 


PROGRftMING EXfiMPLE 2. 1 
ROUTINE TO SETUP HRC 


i ROUTINE TO SETUP THE HIGH RESOLUTION CLOCK 

i FOR TIMING OTHER DEVICES IN THE HNRLOG 

i INTERFACE. USER CRN SPECIFY PERIODS FROM 

i 100 MICROSECONDS TO 6. 5536 SECONDS. THIS 

i CORRESPONDS TO A FREQUENCV RANGE OF 10 KHZ 

; TO 0. 152588 HZ. 



j 


i> CALLING SEQUENCE: 


; JSR 0HRCST j BRANCH TO ROUTINE 

i <NORMAL RETURN> i RETURN HERE. HRC IS SETUP 

; ; AND RUNNING 

; <HRCST MUST APPEAR IN AN . EXTD STATEMENT > 

; > ARGUMENTS : 

i AC0 - CONTAINS THE REQUIRED CLOCK PERIOD IN 

; UNITS OF 100 MICROSECONDS. 


;> ACCUMULATORS AT RETURN: 

; ACl AND AC2 ARE RESTORED. 




W 


ORIGINAL PAGE IS 
OP POOR QUALITY 


2-14 


O 



0002 PE2 i 


<32, 701 > 


mV 1 , 1973 


P0GE 2 


PROGRRMMING EXRMPL.E 2. 1 


MR IN BODV OF CODE 


TITLE PE2. 1 
ENT HRCST 


HRCST IS ONLY LINK TO PROGRRM 


00000-000O00-' HRCST ; 


2REL 

HRCST 


PUT TRRNSFER VECTOR IN PRGE ZERO 


. NREL 

00000 060232 .HRCST: NIOC HRC 


J CODE CRN GO RNVWHERE 
i MRKE SURE HRC DERD 


00001^ 100400 
00002' 061032 

00003' 020403 
00004' 063132 

00005' 001400 


NEG 0, 0 
DOR 0, HRC 

LDR 0, HRCMD 
DOCS 0, HRC 

JMP 0, 3 


>RERLLV WRNT NEG OF PERIOD 
; SETUP PRESET REGISTER 

;GET BITS FOR CONTROL REGISTER 
; SETUP CONTROL REGISTER RND 
; STRRT CLOCK RUNNING 
; RETURN TO CRLLER 


00006' 000002 HRCriD : 2 


CONTROL REGISTER BITS FOR- 

- NO OVERFLOW ENRBLE <DEFRULT> 

- NO END ENRBLE <DEFRULT> 

- INTERNRL 1 MHZ CLOCK <DEFRULT> 

- SCRLE FRCTOR OF 100 <10 TO THE 2ND>, 
YIELDS 10 KHZ COUNTING CLOCK 


. END 




2-15 


<48. 1250 > JBW MRV 1. 1973 PftQE 1 

PROGRHtHIlNG EXRMPLE 2. 2 
FI SIDERIRL CORE CLOCK 

THIS EXRMPLE PROVIDES THE BRSIC COC'E TO 
MRINTRIN R DOUBLE WORD CORE CLOCK. THE 
CLOCK IS MfilNTRINED IN SIDERIRL SECONDS, 

RS OPPOSED TO SOLRR MERN SECONDS. 

THE SYSTEM MUST BE RUNNING WITH INTERRUPTS 
ENRBLED FOR THIS SOFTWRRE TO PROPERLY 
MRINTRIN THE TIME. 

THE CODE IS DIVIDED INTO TWO SECTIONS, 

THE INITIRLIZRTION CODE RND THE INTERRUPT 
CODE THE INITIRLIZRTION CODE SETS UP THE 
HRC FOR PROPER OPERRTION THE INTERRUPT CODE 
IS CRLLED BY THE USER SUPPLIED INTERRUPT 
HRNDLER. THIS CODE UPDRTES THE CORE CLOCK 
RND RESTRRTS THE HRC. 

THE DOUBLE WORD CORE CLOCK IS MRINTRINED 
IN PRGE ZERO UNDER THE ENTRY POINTS 
"SIDHCK RND "SIDLO-'. SIDHO IS THE HIGH 
ORDER PRRT OF THE CLOCK, WHILE SIDLO IS 
THE LOW ORDER PRRT. SIDLO IMMEDIRTELY 
FOLLOWS SIDHO IN CORE. TO RCCESS THESE 
LOCRTIONS, THEY MUST BE DECLRRED IN RN 
' . EXTD" . 


INITIRLIZRTION CODE: 

> CRLLING SEQUENCE: 

JSR eSETHRC iBRRNCH TO ROUTINE 

CNORMRL RETURN> ; HRC SETUP RND RUNNING 

; SIDHO & SIDLO ZEROED 

CSETHRC MUST BE DECLRRED IN RN " . EXTD' > 

> RRGUMENTS : NCiNE 

> RETURN: HRC SETUP RND RUNNING. 

> RCCLIMULRTORS RT RETURN: RCl RND RC2 RRE 

RESTORED. 




PE 2. 2 


PROGRftfIMING EXRflPLE 2. 2 


INTERRUPT CODE 


CALLING SEQUENCE 


JSR &HRC1N 
<NORMl=»L RETURN:> 


BRRNCH TO HRC INTERRUPT HHNDLER 
CORE CLOCK NOW UPDftTED 


< HRC IN MUST BE DECLARED IN AN 


EXTD' > 


ARGUMENTS: NONE 


RETURNS: AFTER RETURN.. CORE CI.OCK HAS BEEN 
INCREMENTED BV ONE. 


ACCUMULATORS; AC2 IS DESTROYED BV THE CALL 


ARGUMENTS; NONE 


RETURN: AFTER RETURN. CORE CLOCK. HAS BEEN 
INCREMENTED BV ONE. 


ACCUMULATORS AT RETURN; AC3 IS DESTROYED 
BV THE CALL. 


*' 0002 


PE2. 2 

i 

i 

i 


<50> 1549 > JBW MrtV 1 . 1973 PftGE 3 

PROGRRMMING EXfiMPLE 2. 2 


> SPEC I RL CONS I DERRT I ONS : 


; THE USER MUST PROVIDE RN INTERRUPT HRNDLER 

i WHICH WILL JSR TO ''.HRCIN . THIS HRNDLER 

; IS EXPECTED TO LERVE INTERRUPTS DISRBLED 

; RT THE TIME IT CRLLS '’.HRCIN' THE USER 

; MUST REENRBLE INTERRUPTS RFTER THE RETURN 

; FROM HRCIN' . 

> IF INTERRUPTS FROM THE HRC RRE DISRBLED 

; FOR TWO SIDERIRL SECONDS. THE CLOCK WILL 

i LOSE TIME. 

; SINCE ".HRCIN MODIFIES 2 WORDS IN CORE. IT IS 

; POSSIBLE FOR R USER PROGRRM TO RERD R FRLSE 

; CLOCK VRLUE UNLESS PRECRUTIONS RRE TRKEN. 

; THE PROBLEM CRN OCCURE IN THE FOLLOWING CODE 

; TO RERD THE CORE CLOCK - 

ji LDR 0. SIDHO jGET HIGH ORDER TIME 

; LDR 1. SIDLO ; GET LOW ORDER TIME 

; IF C<SIDHO> = 0 RND C<SIDLO> = 177777 

) <THE TIME IS 0177777 SECONDS. DOUBLE PRECISION> 

i RT THE TIME THE LDR 0. SIDHO IS EXECUTED. THEN 

i RC0 = C<SIDHO> = 0. LET US RSSUME THRT 

; BEFORE THE LDR 1. SIDLO IS EXECUTED 

i THE HRC INTERRUPTS; THUS . HRCIN 

; UPDRTES SIDHO TO 1 RND SIDLO TO 0. WHEN 

; R RETURN FROM THE INTERRUPT RLLOWS THE LDR 1. SIDLO 

; TO BE EXECUTED. IT WILL LORD RCl WITH 0. 

; RT THIS POINT THE USER HRS R TIME OF 0. 

; WHEN THE TRUE TIME IS 200000. 

; THE SIMPLEST WRV TO RVOID THIS PROBLEM IS TO 

; DISRBLE INTERRUPTS WHEN RERDING THE CLOCK. 

; FOR EXRMPLE- 


INTDS 

LDR 0. SIDHO 
LDR 1. SIDLO 
INTEN 


; DISRBLE INTERRUPTS 
;GET HIGH ORDER TIME 
;GET LOW ORDER TIME 
;ENRBLE INTERRUPTS RGRIN 


NOTE THRT IF THE USER ONLV RERDS THE LOW 
ORDER TIME <SIDLO> NO DIFFICULTV EXISTS. 

SINCE ONE INSTRUCTION IS RLL THRT IS REQUIRED. 



0W04 PE2. 2 

; <44, 895 > JBW flRV 1, 1972 PftGE 4 

i PROGRflriMlNG EXfiMPLE 2. 2 

j INI riRLIZRTION CODE 

. TITLE PE2. 2 

. ENT SIDHO, SIDLO, . SETHRC, . HRCIN 
. 2REL 

00000-000000 SIDHO: 0 

00001-000000 SIDLO: 0 

00002-000000'' SETHRC : . SETHR 

i 00003-000013" HRCIN : . HRC I N 


;PUT CLOCK IN PRGE ZERO 

> VECTOR TO PRG 
;VEC TO INTER HfiNDLER 






00004" 020405 
00005" 063032 


00006" 020404 
00007" 061132 


00010" 001400 
00011" 000022 HRCCR : 


ROUTINE TO SETUP THE HRC 
. NREL 


00000 060232 . SETHR : 
00001" 102400 
00002" 040001- 
00003" 040000- 


NIOC HRC 
SUB 0, 0 
STR 0, SIDLO 
STR 0, SIDHO 


; CLERR HRC 

; R ZERO FROM NOTHING 
; RESET TIME 


LDR 0, HRCCR 
DOC 0, HRC 


LDR 0, HRCPR 
DORS 0, HRC 


JMP 0, 3 
HRCOVFL+2 


GET BITS FOR CONTROL REG 
SETUP REG 


GET VRLUE FOR PRESET REGISTER 
SET REGISTER A STRRT 


RETURN 


CONTROL REGISTER BITS FOR- 

- OVERFLOW ENRBLE <HRCOVFL> 

- NO END ENRBLE <DEFRULT> 

- INTERNRL 1 MHZ CLOCK 
<DEFRULT> 

- SCRLE FflCTOR OF 100 

<10 TO THE 2ND> VI ELDS 100 
MICROSEC. BRSE PERIOD. 


00012" 154413 HRCPR : -9973. 


; SET PERIOD TO 997300 MICROSECONDS - 
; R SIDERIRL SECOND IS 997278 
; MICROSECONDS. 




2-19 


J 

7 , 

! • 




i 


0005 PE2. 2 

; <16, 333 > JBW MRS 1, 1973 PRGE 5 

i 

{ PROGRRMMING EXHMPLE 2. 2 

; INTERRUPT CODE 

00013' 060132 . HRCIN: NIOS HRC ; RESTRRT HRC FOR NEXT TICK 


00014' 010001- 
00015' 000402 
00016' 010000- 

00017' 001400 
00020' 001400 


ISZ SIDLO 
JMP . +2 
ISZ SIDHO 

JMP 0,3 
JMP 0, 3 

. END 


; INC LOW ORDER PRRT OF TIME 
i NOT ZERO - SKIP SIDHO INC 
;LOW ORDER WRS ZERO - INC 
; HIGH ORDER PRRT NOW 
; RETURN TO CRLLER 
i SIDHO CRN GO TO ZERO' 


tlJ ! 


I ) 



SECTION 3 




i 



f 

I 


[ 

i 

L 

t 


THE ANALOG INPUT 
3.0 General Information 

The Analog Input (mnemonic AIN) provides sixteen 
analog input channels. Any channel may be selected 
under program control and a ten-bit sample obtained. 
Input conversions may be initiated under direct pro- 
gram control, from the HRC overflow pulse or from 
an external control line. 

Figure 3.1 provides a block diagram of the system. 

The front end of the device consists of various 
channel conditioners (discussed in Section 3.1) which 
drive the 16 channel multiplexer. The selected 
channel is sampled by the Sample-and-Hold which in 
turn drives the 10 bit analoc-to-digital converter. 
The output of the analog-to-digital converter may 
be read in by the user. In addition to the analog 
section, a digital section consisting of the Channel 
Select Register, the Control Register, the Status 
Flags and the Control Logic is included. 

The contents of the Channel Select Register determine 
which of the input channels is selected by the multi- 
plexer. If the user selects scan mode, the contents 
of the Channel Select Register is automatically in- 
cremented after each conversion, so that the next 
sequential channel is selected. 

The Control Register determines the mode of operation 
of the AIN. It allows the user to specify the source 


O 


3-1 


I/O BUS 


ANALOG -TO -DIGITAL 
CONVERTER 
AND 

DATA REGISTER 


SAMPLE 

AND 

HOLD 



ZOx 
ZOlii 
x< ^ 
<-»Z I3 
' < z> 
S 5 



ANALOG INPUT EXTERNAL 
CONVERT COMMAND 


• BUSY 

• DONE 

• INTERRUPT DISABLE 


HIGH -RESOLUTION CLOCK 
OVERFLOW PULSE 


La. 3.1 AIN Block Diaor«w 




16 ANALOG INPUTS 













of the cominand to initiate a new conversion cycle, 
as well as selection of scemnlng vs. non scanning 
mode. The user may select as the source of the con- 
version command an S pulse, the HRC Overflow Pulse, 
or the AIN External Sample Pulse. In addition, a P 
pulse will always initiate a conversion cycle. 

The following events comprise a conversion cycle: 
First, the request for a conversion is noted by the 
h2u:dware, when the multiplexer has selected the re- 
quested channel (as specified by the Channel Select 
Register) the conversion is initiated by sampling the 
output of the multiplexer. After the sample and 
hold has acquired the signal, the analog to digital 
converter begins the actual conversion to a digital 
representation. Since the sample and hold is main- 
taining a constant output, the multiplexer may be 
released to advance to a new channel. When the con- 
verter finishes, the AIN indicates that a valid con- 
version value is available to the user, by setting 
DONE. 


3-3 




3.1 Input Specifications 

Sixteen channels are provided, eight of which are 
dedicated to special functions or conditioning. 

The other eight are direct inputs to the multiplexer 
(through protective circuitry) . 

Channels 0 thru 3 are connected to the Analog Knobs 
(see Figure 1.4) and are not available for signal 
input. Each Analog Knob is a precision 3 turn poten- 
tiometer. Full clockwise rotation corresponds to 
full scale positive input, while full counterclockwise 
rotation provides a full scale negative input. 

Channels 4 through 7 are conditioned by preamplifiers 
before input to the Multiplexer. The gain of the 
preamplifiers may be adjusted from 0.5 to 10 at the 
front panel, and a DC offset of - 5 volts may be 
added to the signal before scaling. The multiplexer 
full range input is - 2 volts, so that signals in the 
range of - .2 to - 4 volts may be adjusted to match 
the multiplexer input range. Signal coupling, either 
DC or AC, is selectable and a ground position is pro- 
vided for setting the zero point. At the unity gain 
setting, gain is down 3 dB at approximately 900 K Hz. 

The preamplifiers have an essentially constamt gain- 
bandwidth product. With DC coupling, the response is 
flat down to DC, while with AC coupling the low frequency 
3 dB point is approximately 1 Hz. The input impedance is 
10 Megohms (- 10%) , provided the signal is within tl^e 
- 12 volt normal operating range. 

A connector (see Appendix C) provides access to channels 
8 thru 15 at the rear of the Analog Interface Chassis. 
These inputs are direct to the multiplexer inputs 
(through protective circuitry and require a signal 









I 

\ 


I- 

3 


i 



3-4 


in the range of - 2 volts. The input impedance 
is at least 10 megohms provided the input signal 
is within the - 12 volt normal operating range. 

All inputs are protected against excess voltage 
by an input clipping circuit that limits the input 
voltage to approximately - 12 volts. If the in- 
put is- within this range, the input impedance will 
be specified as above. If the input voltage should 
exceed this range, the input impedance will drop 
to no less than 3000 ohms as the protective circuitry 
activates. If the overvoltage is not destructive, 
the input will recover to normal operation after 
removal of the over voltage. The inputs will with- 
stand a continuous input voltage of - 30 volts; how- 
ever, the user should take all reasonable precautions 
to restrict the input voltage to the normal operating 
range. 


i 


I 



3.2 Data Register 

The results of the latest conversion is contained 
in the Data Register. The contents of this regi- 
ster are valid only if the device is in the DONE 
state (see section 3.5). This register may be read 
with DIA d,AIN instruction. The format of the data 
is as follows: 


Since only ten significant bits are generated by 
the analog to digital converter; the sign bit ap- 
pears in bits 0-6 of the destination register while 
the nine low order bits appear in bits 7-15. The 
data is represented in the form of a signed twos 
complement number in the range -512 to 511 
(177000g to 000777g) . This representation is the 
standard method of representing signed numbers in 
the NOVA, so that data is easily processed. 



3.3 Channel Select Register 


The Channel Select Register Specifies the input 
channel to be selected by the input multiplexer. 

This register is loaded with a DOA £,AIN instruction. 
The four bit channel address is taken from the bits 
12-15 of the source register thus legal channel 
address are in the range of 0 to 15 (Og to 17g) . 

This register will remain fixed, unless the user 
has selected the scanning mode of operation. In 
this case, the register is incremented after each 
conversion. The register counts modulo 15 (i.e., 

15g, ^"^8^ ^^8^ ^^8^ * 



3-6 


o 



3.4 Control Register 





The Control Register determines the mode of opera- 
tion of the device. It may be loaded with a 
DOC s,AIN instruction. The various control bits 
are assigned as shown in Figure 3.2. 

Note that the device must be in the BUSY state before 
it will respond to the selected convert command. 

The S pulse is treated as a special case, which 
sets BUSY and requests a conversion at the same 
time . 

In addition to the command sources specified in the 
Control Register, and P pulse will also initiate a 
conversion cycle. A P pulse will set Busy, and 
initiate a conversion cycle regardless of the mode 
selected by the Control Register. This feature is 
useful when the user wishes to sample a channel 
when the AINSP mode has not been selected. 

Any unused bits in the Control Register should be 
set to zero. 




3-7 






BITS ^ 

11 

default (0) - The channel selected by 

the Channel Select Register 
remains unchanged. 

AINSCAN (1) - The Channel Select Register 

will be incremented during 
each conversion cycle, thus 
advancing thru the channels. 

14-15 Selects the source of the command to initiate 

a conversion cycle. 

AINSP (00) - An S pulse will both set BUSY 

and start a conversion. 

AINHRC (01) - An High Resolution Clock Over- 

flow Pulse will start a conver- 
sion provided the BUSY flag is 
set. 

(10) - Not used. 

AINEXT (11) - The external control signal, 

AIN EXT SAMP, will start a 
conversion provided the BUSY 
flag is set. 


1. All unused bits should be set to zero. 

2. Mnemonics for the bit patterns are defined in Appendix A 
(CBLDEFS) . 


Figure 3.2 - AIN Control Register Bit 

Assignments 


3-8 




O 


3.5 Status Flags 



( 


i 


( 





The AIN contains standard Busy, Done, and Interrupt 
Disable flags as described in section 2.3, Input- 
Output of "How to Use the Nova Computers". Figure 3.3 
diagrams the state transitions of the device. When 
the AIN is in IDLE state, it will not respond to 
the selected conversion command source. Either an 
S pulse or P pulse will take the device from IDLE 
state to BUSY state. The device will remain in BUSY 
state until a conversion cycle is completed or it is 
cleared by a C pulse or lORST. Entering BUSY state 
does not necesarily initiate a conversion cycle. 

The contents of the Control Register determines what 
signal initiates a conversion cycle. When a conver- 
sion cycle completes the device will go to the DONE 
state, thus indicating that valid data is available. 


The AIN can be programmed for interrupt service as 
described in Section 2.4, Program interrupt f of 
How to Use the NOVA Computers . The AIN will acknow- 
ledge the INTA instruction with the value of the 
mnemonic AIN. The Interrupt Disable flag is connected 
to bit 0 of the bus. This interrupt mask is defined 
as the mnemonic MSAIN in Appendix A. 


3-9 


i 



% 






3.6 Analog Input Timing 

The maximum time from the initiation of a sample 
conversion (the leading edge of a S pulse if AINSP 
mode is selected) until the data is ready to be 
read in is 8.75 microseconds. This assumes that the 
channel to be sampled was selected more than 5 micro- 
seconds before the request to initiate a conversion. 

If AINSCAN mode is enabled, the next sequential 
channel is selected while the old channel is being 
converted ad is ready before the analog-to-digital 
converter finishes the current conversion. If the 
channel address and conversion request are given 
in the same instruction, then the channel settling 
delay (5 microseconds) must be added to the conver- 
sion time. Thus if the instruction, 

DOAS 1,AIN ; SELECT CHANNEL C(l) & CONVERT 

is given, the time until the data is ready will be 
13.75 microseconds from the leading edge of the DOA 
to the AIN. 


This timing information is provided only to allow 
the progrcunming of maximum sampling rates for the 
hardware. If the user does not need sampling rates 
approaching 50 kHz, he should always program with 
the I/O skip instructions to insure that the AIN 
is finished before reading the sample. This will 
assure compatible coding for the various NOVA processors 
which vary in instruction speed. 


3-U 



3.7 Programming the AIN 


The simplest way to use the analog input is to sample 
signals on a single channel at some non-periodic 
rate. An example of this would be sampling a given 
analog input knob to determine a program parameter. 

In this case, the user must set up the device Control 
Register and select a channel. The following program 
segment demonstrates this: 


SUB 0,0 
DOCC 0,AIN 

LDA 0,CHAN 
DOA 0,AIN 


; CLEAR A CONVENIENT REGISTER 

;LOAD THE CONTROL REG. HAVE SELECTED 

;NO SCAN AND S PULSE CONTROL 

;LOAD CHANNEL NUMBER IN ACO 

;LOAD THE CHANNEL SELECT REGISTER 


It is assumed that CHAN has been defined and contains 
the channel number to be sampled. The cheuinel number 
would be between 0 and 3 if input from an analog 
knob were desired. Note that the user may sample 
the selected channel at any time by using the follow- 
ing sequence of instructions: 


NIOS AIN 
SKPDN AIN 
JMP .-1 
DIA 0,AIN 


;SET DEVICE BUSY AND START CONVERSION 
;SKIP IF CONVERSION DONE 
;LOOP WAITING FOR CONVERSION DONE 
; CONVERSION DONE, READ IN SAMPLE 


The SKPDN is particularly important since it guarantees 
that valid data is present before it is read in. If 
for example, the DIA had immediately followed the NIOS, 
invalid data would be obtained. 


In practice, the user is likely to require that 
the input signal be sampled at some constant rate. 


3-12 


T 


♦ 






i 

I 

i 

(j 


He may accomplish this in several ways. One way is 
to use program loops for timing. This is very accur- 
ate on the NOVA since the CPU clock is crystal con- 
trolled. However, that this type of program is not 
directly transferrable between the various NOVA models, 

(i.e., NOVA, NOVA 800, NOVA 1200). A better solution 

is to use the High Resolution Clock provided as part 

of the Analog Interface. This clock, discussed in 

Section 2, provides the user with a wide range of 

possible sampling intervals. By setting AINHRC as 

the control mode, the programmer selects the High 

Resolution Clock as the source to initiate sample 

conversions. Programming Excunple 3.1 is the listing 

of a typical program using the High Resolution Clock 

to control the Analog Input. Since the program is ^ 

heavily commented, only a few importcuit points will | 

be discussed. Note that the Control Register and 

Channel Select Register are loaded before setting the 

device BUSY. After the device is BUSY, the program 

simply waits for it to indicate the end of a conversion. 

The data is read in and the device is started again 
in the same instruction (DIAS fH , AIN) to await the 
next High Resolution Clock Overflow. 

It is the user's responsibility to assure that the 
sampling rate is not too high. In the previous 
example, the minimum clock interval was 100 micro- 
seconds. If, however, the clock had been set up 
to generate samples every 10 microseconds, samples 
would have been lost, since the NOVA processor cannot 
execute instructions fast enough to keep up with 
the clock. 


o 


3-13 


i 


1 


Several channels of data may be being processed. In 
these cases, the user generally wants to minimize 
the time between samples (skew) on the various 
channels, as well as sample the channels periodically. 
The Scan Mode (bit 11 » 1 in the Control Register) 
is particularly suited for this provided the required 
channels are in sequence. If less than five are 
required, the data may be saved in the NOVA accumu- 
lators during the Sequence. The following example 
demonstrates scanning three adjacent channel^ assum- 
ing that the initial channel has been preset in the 
Channel Selection Register and the Control Mode is 
set for High Resolution Clock or Sxternal Clock. 


LP ; SKPDN AIN 
JMP .-1 

DIAP 0,AIN 

SKPDN AIN 
JMP .-1 

DIAP 1,AIN 

SKPDN AIN 
JMP .-1 

DIA 2, AIN 

LDA 3, STRCH 
DOAS 3, AIN 


;WAIT FOR FIRST CONVERSION 

;READ IN FIRST SAMPLE AND START SECOND 
;WAIT FOR SECOND CONVERSION 

;READ IN SECOND SAMPLE AND START THIRD 
;WAIT FOR THIRD SAMPLE 

;READ IN THIRD SAT!PLE 

;GET STARTING CHANNEL IN SEQUENCE 
; RESET CHANNEL REGISTER FOR NEXT 
; SEQUENCE AND SET DEVICE BUSY TO 
; ACCEPT NEXT CONVERT COMMAND 

; PROGRAM CODE TO PROCESS DATA 


JMP LP 


; RETURN TO WAIT FOR FIRST SAMPLE OF 
;NEXT SEQUENCE 


Again, the user must make sure that the time required 
to execute the loop does not exceed the interval at 
which sample conversions are initiated. 


3-14 


t 


; <45, 1098 > JBW MflV 1, 1973 PR6E 1 

i 

i PROfiPRMMING EXRMPLE 3. 1 

; SRMPLING RN RNRLOG SIGNRL 

; '.SRMP IS R ROUTINE TO SRMPLE DRTR FROM 

; R SINGLE CHRNNEL RT R SPEC I FED RRTE. 

i ^.SRMP WILL STORE THE DRTR IN R BUFFER 

; SUPPLIED BV THE USER. 

i THE HRC IS USED TO DETERMINE THE PERIOD 

i BETWEEN SRMPLES. 

>> CRLLING SEQUENCE. 

i JSR 0= SRMP >BRRNCH TO ^ . SRMP' USING R LOCRL 

i > RDDRESS CONSTRNT. 

; <NORMRL RETURN> ; RETURN HERE -> BUFFER FILLED 

i ; WITH SRMPLES. 

; > RRQUMENTS ; 

i RC0 - CHRNNEL # TO BE SRMPLED 

; RCl - NUMBER OF POINTS TO BE SRMPLED 

; RC2 - RDDRESS OF 1ST WORD OF BUFFER 

> ^.PERIOD' - LOCRTION DEFINED IN ^ SRMP WITH 

; RN . ENT STRTEMENT. USER MUST DEFINE IN 

; RN ^.EXTN' IF USED. THIS LOCRTION 

) SPECIFIES THE SRMPLE PERIOD IN UNITS 

i OF 100 MICROSECONDS. INITIRLIZED TO 

i 10. <1 KHZ> RT LORD TIME 

i > RETURNS : 

; WHEN THE NORMRL RETURN IS TRKEN, THE BUFFER 

; POINTED TO BV RC2 IS FILLED WITH C<RC1> SRMPLES 

; FROM CHRNNEL C<RC0>. 

i> RCCUMULRTORS RFTER RETURN: 

; RC3 RND CRRRV RRE DESTROYED, RLL OTHERS 

; RESTORED ON RETURN. 

;> SUBROUTINES USED: 

; CRLLS '• . HRCST 0 HRCST 




3-15 


i 


eee« 


pe:<. 1 


00000 040432 . SPrrtP : 
00001' 044432 
00002 050432 
00003' 054432 


00004' 061231 

00005' 020424 
00006' 063031 


00007' 020421 
00010 006001* 


<57/ 1004 > JBW M0V 1, 1973 

PROGRBriMING EXftMPLE 2. 1 - CONT. 


PPGE 2 


SIMPLE PROGRRM TO SRMPLE R FIXED # OF POINTS 
FROM ONE CHRNNEL. 

. TITLE PE3. 1 
. ENT . SRMP/ . PERIOD 
. EXTD HRCST 
. NREL 


STR 0/SV 
STR 1, SV+1 
STR 2/SV-^2 
STR 3/SV+3 

SETUP RIN 

DORC 0/ RIN 

LDR 0/RINMD 
DOC 0/ RIN 


>SRVE RLL REGISTERS 


} SET CHRN #/ RND CLERR RIN 

/GET MODE 'RINHRC' FOR RIN 
; SETUP CONTROL REGISTER 


SETUP THE HRC/ USING . PERIOD 


LDR 0/ . PERIOD 
JSR 0HRCST 


/ GET PERIOD 
/GOTO SETUP ROUTINE 


,) 


00011' 124400 NEG 1/1 /RERLLV WRNT NEG OF # OF POINTS 

00012' 060J 31 NIOS RIN > STRRT RIN 

/ MR IN SRMPLING LOOP NEXT 


00013' 063531 LOOP; 
00014' 000777 

SKPBZ RIN 
JMP . -1 

/WRIT FOR SRMPLE 


00015' 060531 

DIRS 0.. RIN 

/RERD IN SRMPLE VRLUE 
/ SET DEVICE BUSV FOR NEXT HRC 
/ OVERFLOW PULSE 


00016' 041000 

STR 0/ 0/ 2 

/STORE DRTR POINT 

- 

00017' 151400 

INC 2/2 

/ UPDRTE BUFFER POINTER 


00020 125404 

INC 1/ 1/ SZR 

/ MRRK OFF R POINT DONE/ CRN WE 
/ QUIT? 


00021' 000772 

JMP LOOP 

; NO - GOTO WRIT FOR NEXT POINT 


00022' 060231 

NIOC RIN 

/ VES - CLERR RIN RND HRC 


00023' 060232 

NIOC HRC 

• * 


00024' 020406 

LDR 0/SV 

/RESTORE REGISTERS & RETURN 


00025 024406 

LDR 1/ SV+1 


. 

00026' 030406 

LDR 2/ SV+2 


f J 

00027' 002406 • 

JMP 0SV+2 

/ RETURN 



3-16 


I 



i 


<12. 234 > JBW MftV 1.1973 PfiGE 3 

PROGRftmiNG EXHMPLE 3. 1 - CONT. 

CONSTRNTS & SAVE RRER 

00020'^ 000tJl2 .PERIOD: 10 

00031' 000001 RINtID; RINHRC 

000004 SV : . BLK 4 

. END 



jDEFRULT period is 1 MSEC, 
j SELECT HRC RS SOURCE OF 
i CONVERT COMMRND 
i SRVE RRER FOR RCS 





4.0 General Information 



The dual channel analog output (mnemonic AOUT) con- 
sists of two 10 bit digital to analog converters 
and the associated control logic. The AOUT allows 
the user to generate two channels of analog signal 
output. Output conversions may be initiated under 
direct program control, from the HRC Overflow Pulse, 
or from an External Control Line. 

Figure 4.1 is a block diagram of the AOUT system. 

The data path for each channel is from the program 
(via the NOVA bus) to the channel Data Register, 
from the Data Register to the Output Register, and 
finally to the 10 bit Digital-to-Analog converter. 

The user may directly load the Data Register. Only 
the AOUT Control Logic loads the Output Register. 

While the Data Registers are loaded independently, 
both Output Registers are loaded by the same signal, | 

thus any changes in output are always synchronous | 

(except for track made, see section 4.3). The Con- 4 

trol Reigster selects the source of this signal. I 

'j, 

The use of two buffers in each channel (double ' 

buffering) allows the user to set up the desired 
ouput value in advance of the actual time it is 
required without changing the previous output value. 

Status falgs are provided to indicate the current 
status of the device and request program service. 

The actual analog outputs are approximately - 2 volts. 


4-1 


NOVA I/O BUS 




r 




ANALOG OUTPUTS 












4.1 Analog Outputs 

Both analog output channels are available at a rear 
connector of the Analog Interface.* The output 
range is approximately - 2 volts (the Least Signifi- 
cant Bit is nominally 4 millivolts) . The minimum 
recommended output load is 1000 ohms. 

4.2 Data Registers 


A ten bit Data Register buffers the data for each 
D/A converter. The A channel register is loaded 
with a DOA £, AOUT and the B channel register with a 
DOB £, AOUT. Since only 10 bits are required by the 
D/A converters, the first six bits (0-5) are ignored. 
Bit 5 is treated as the sign bit in a twos complement 
representation. The format of the register is: 

>ign Bit 


Ignored 


7f 


Low order nine bits 




Note that signed numbers in the range 511 (000777g) - 
512 ( 177000 g) are mapped uniquely to an output voltage, 
This is compatible with the analog input converter 
and the internal representation of signed integers 
in the NOVA. 


*See Appendix C for details, 


4-3 






Control Register 


The Control Register specifies the mode of opera- 
tion of the AOUT by selecting the source of the signal 
to initiate transfer of data from the Data Register 
to the Output Register. The contents of the Output 
Register determine the value of the analog output. 

The Control Reigster is loaded with a DOC s^, AOUT 
instruction. The bit assignments and modes of opera- 
tion are outlined in Figure 4.2. 


The user may select the S pulse, HRC Overflow Pulse, 
AOUT External Strobe, or tracking mode. Busy must 
be set at the time of occurrence of the HRC Over- 
flow Pulse or AOUT External Strobe, for the device 
to respond. The S pulse sets Busy and initiates 
the conversion at the saune time, while in the AOUTTRK 
mode the output Registers always track the Data Regis- 
ters without regard to the Busy Flag. 


4-4 


i) 


. i 


I .1 


I i 


) 




FIGURE 4.2 





1 


I 


I 




AOUT Control Register Bit Assignments 


Bits 


1 


Function 


2 


14-15 


Selects source of signal to initiate 
transfer of data from Data Register 
to Output Register, thus causing the 
analog outputs to acquire a new value. 


AOUTSP (00) 


AOUTHRC (01) 


AOUTTRK (10) 


AOUTEXT (11) 


An S pulse sets Busy, 
clears Done and ini- 
itates the transfer. 

An HRC Overflow Pulse 
initiates the transfer, 
provided BUSY is set. 

The Output Registers 
track the Data Registers, 
thus any data loaded into 
the Data Registers is 
also loaded into the 
corresponding Output 
Register. Busy/Done 
state does not affect 
this mode. 

The AOUT External Strobe 
signal initiates the trans- 
fer of data provided BUSY 
is set. 


All unused bits should be set to zero. 

2 

Mnemonics are defined in Appendix A. 


I 

i 

I 

I 

i' 





4-5 


} 




u 



4.4 Status Flags 


i 


1 


! 



L 


The AOUT contains standard Busy and Done Flags as 
described in Section 2 . 3 , Input-Output of "How to 
Use the NOVA Computers". Figure 4.3 diagrams state 
transitions for the device. Note that a C pulse or 
lORST will always reset the device to IDLE mode. An 
S pulse will always place the device in BUSY state. 
With the exception of AOUTTRK (See Figure 4. 2) mode, 
the device must be in Busy state before the analog 
ouptuts may change. If the Control Register has 
selected AOUTSP mode, the S pulse will simultaneously 
set Busy and initiate a conversion. The device will 
enter the DONE state after the analog output has 
acquired the new value. 

In AOUTTRK mode, the user need not place the device 
in BUSY state to change analog values. If he does 
place the device in BUSY state, then it will never 
enter DONE state. 

THE AOUT can be programmed for interrupt service as 
described in Section 2.4, Program Interrupt of Hov; 
to Use the NOVA Computers . The AOUT will acknow- 
ledge the INTA instruction with the value of the 
mnemonic AOUT. The Interrupt Disable flag is con- 
nected to Bit 2 of the bus. This interrupt mask is 
defined as the mnemonic MSAOUT in Appendix A. 


4-6 








I 

r 





- state of Busy 

- State of Done 


Transition initiated by m 


Figure 4.3 


- AOUT BUSY-DONE State Transitions 



4 . 5 Progranup.ing the AOUT 


' The simplest mode of operation for the 7iOUT is 

AOUTTRK mode. In this mode, the output of a 
channel changes as soon as the instruction is ex- 
ecuted. To set the AOUT for this mode of operation, 
the following sequence of instructions would be 
executed, 

LDA 0,CWORD ;GET CONTROL WORD CONTAINING AOUTTRK 

DOCC j?,AOUT ;SET UP CONTROL REGISTER, CLEAR AOUT 

I Note that AOUT is cleared, since we do not need the 

I status registers for this example. To output the 

contents of ACJ? on channel A, and ACl on channel B, 
one would execute — 

DOA 0, AOUT ;LOAD A CHAN DATA & OUTPUT REGISTER 

DOB 1, AOUT ;LOAD B CHAN DATA & OUTPUT REGISTER 

Since the output begins to change as soon as the 
instructions are executed, the A channel will be 
1 slightly ahead of the B channel. The error is on 

the order of microseconds, and is not significant 
in many applications. It is possible to eliminate 
all skew between output due to program control, 
by using any of the other control modes (AOUTSP, 
AOUTHRC, or AOUTEXT) . If we changed the above ex- 
ample so that CWORD contained AOUTSP, rather than 
AOUTTRK, and then executed the following output 
sequence, 

DOA 0, AOUT ;LOAD A CHAN DATA REGISTER 

DOBS 1, AOUT ;LOAD B CHAN DATA REGISTER & 

; STROBE BOTH OUTPUT REGISTERS. 

4-8 







t 

1 


u 

I 


I 



The actual analog output signals would not change 
until the S pulse on the DOBS occurred. At that 
time, both A and B would change to their new values, 
as specified by the most recent DOA and DOB Instructions. 
If the user is processing or synthesizing analog 
signals, the output will have to be periodic. The 
HRC may be used to initiate output conversions (AOUTHRC 
mode). Programming Example 4.1 demonstrates an appli- 
cation of the AOUTHRC mode. 

This exeunple will output a buffer of data at a fixed 
rate and is essentially the complement of Programming 
Example 3.1. The example is well-commented and it is 
suggested the reader examine it carefully. 




\ 

i 


wfei03 I >h‘4. i 

; *^44. Ii85>> JBW MHV PHGt 1 

) 

i BK'tib»i:HWUNG EXHMPLE 4 x 

; Gb-NEkt=lTINC) AN rtNHL OG OU rPUl 

; •'.DHOUT' IS fi ROONNt TO OUTPUf L>HTrt IN 

i ft BOFFER THE l>HTrt IS DlRECfEO TO 

> CHHNNEL H Of THE HOOT THE HRC IS OSEO 

; TO SET THE INTEkVHl BE TWEEN CONVERSIONS. 

> CHLLINO SEQUENCE; 

i JSR (j*=. DHOUT ; BRHNCH TO ' . DHOOT'^ USING Ft 

i i LOCHL HDDRESS COT4STHNT 

> ;.NORMHL RETURN> ; RETURN HERE -> HLL DFiTFl IN 

> > BUFFER HHS BEEN OUTPUl TO 

.i } THE Hour 

; THE ROUT MRV BE BUSY RT THE TIME OF THE CRLL. 

^ DROUT' WILL WRIT FOR PREVIOUS DRTR POINT 
j TO BE CLOCKED OUT BEFORE PROCEEI-ING 

; > RRbUMENTS . 

; RCfei - NUMBER OF POINTS TO BE OUTPUT 

; RC2 - RDDRESS OF 1ST WORD IN BUFFER OF DRTR 

.! •' .DRP - LOCRTION DEFINED IN . DROUT" WITH RN 

i . ENT STHTEMENT. CONTENTS OF THIS 

; LOCRTION SPECIFIES THE OUTPUT PERIOD 

; IN UNITS OF 100. MICROSEC. 

, INITIRLIZED TO 10. RT LORD TIME. 

.1 :> RETURN ; 

; RFTER R RETURN IS TRKEN. THE DRTR POINTS 

.i IN THE BUFFER POINTED TO BV RC2 HRVE BEEN 

; OUTPUT TO THE ' f\' CHRNNEL. THE ROUT MRV 

; STILL BE BUSY RT RETURN TIME. RND THE USER 

i SHOULD SKIP ON THE BUSY FLRG BEFORE TRKING 

} RNV RCTION ON THE ROUT 

; > RCCUMULRTORS RT RETURN : 

; RC:< RND CRRRY DESTROYED. 


ORIGINAL PAGE IS 
O'* POOR QUAUTY 







; <tW.. 1X4V.. JBM MrtV 1,1972 PftGE 2 

s 

i PkOtiPHMMING EXAMPLE 4. 1 - CONT. 

i progkhm to output oatr to channel 'A 

TITLE PE4. 1 
ENT DAOUT, . DAP 
. EXTD HRCST 
. NREL 


00000 040430 .DAOUT: STA 0, SV ; SAVE ALL REGISTERS 

00001' 044430 STA 1, SV+i 

00002' 050430 STA 2.. SV+2 

00003' 054430 STA 3. SV+3 


WAIT TILL NOT BUSV. THEN SET UP THE HRC 


00004' 063533 SKPBZ AOUT ;WAIT FOR ANV PREVIOUS 

00005 000401 JMP . +1 i CONVERSION 


00006' 020420 LDA 0, . DAP ; GET CLOCK PERIOD 

00007' 006001$ JSR C-HRCST ; CALL ROUTINE TO SETUP HRC 

00010' 034417 LDA 3> MODE i GET HRC MODE WORD FOR CONTROL 

00011' 077233 DOCC 3, AOUT ; SETUP AOUT CONTROL REGISTER 


;WE REALLV WANT THE NEGATIVE OF 
i THE # OF DATA POINTS. ALSO. SKIP 
; 1ST ADDRESS ADVANCE 
; ADVANCE TO NEXT DATA ITEM 

;PICK UP THE DATA 
00015' 063533 SKPBZ AOUT ; WAIT UNTIL NOT BUSV-> OK TO 

00016' 000777 JMP .-1 ; RELOAD DATA REGISTER 

DOAS 0. AOUT ;LOAD DATA REGISTER AND PLACE 

i DEVICE IN BUSV STATE 

INC 1. 1. SZR jMARK off ANOTHER DATA POINT IN 

i DATA REGISTER 

JMP LOOP ; NOT DONE VET - 


• I ■ 

i 00022- 020406 

i ’ 00023' 024406 

00024' 030406 
00025' 002406 


ALL DATA ITEMS OUT. RETURN 

LDA 0. SV > RESTORE REGISTERS 

LDA 1. SV+1 
LDA 2. SV+2 

JMP 0SV+3 ; RETURN 


00017' 061133 
00020' 125404 
00021' 000772 


00012 124401 NEG 1. 1. SKP 

o 

00013' 151400 LOOP: INC 2.2 

00014' 021000 LDA 0. 0. 2 


00026' 000012 .DAP: 10. ; PERIOD FOR HRC - DEFAULT 10. 

00027' 000001 MODE: AOUTHRC ; SELECT HRC TO CLOCK DEVICE 

000004 SV; . BLK 4 ; SAVE AREA FOR REGISTERS 


. END 



4-11 





SECTION 5 


THE DISPLAY ANALOG OUTPUT 


5.0 General Information 

The Display (mnemonic DISP) provides X and Y deflec- 
tion signals for up to four display devices. The 
DISP consists of two ten-bit digital to analog con- 
verters, providing an addressable field of 1024 x 
1024 points. Up to four devices may be attached to 
the output bus of the DISP. The same X emd Y deflec- 
tion signals are applied to each display device, 
however, the programmer may address the devices in- 
dividually for beam intensification. Both oscillo- 
scope displays and X-Y plotter are available. 


Figure 5.1 presents a block diagram of the DISP logic. 
Note that it is similar to the AOUT logic. As in the 
AOUT, the Data Registers for each analog channel 
(X and Y) may be independently loaded with DOA (for 
the X channel) and DOB (for the Y channel) instruc- 
tions. Output Registers for both channels are loaded 
at the same time by the Control Logic. The DAC's 
simply track any value in the Output Registers, con- 
verting it to the equivalent analog voltage. The 
output of the DAC's is summed with the analog signals 
X Character Deflection and Y Character Deflection. 
These signals are generated by the hardware character 
generator (described in Section 6, the reader may 
assume that they do not affect the value of the ana- 
log output for this section) . The Control Register 
allows selection of the source of the command to 
plot a new point, selection of the output channels 


5-1 




NOVA I/O BUS 






DISPLAY OUTPUT BUS 












which will be intensified, and specification of special 
device options. A plot cycle begins when the program 
senses (via the DISP Status Flags) the end of any pre- 
vious display channel activity. At this time, the 
progrcun would load the X and Y Data Registers with 
the position of the next point, and place the DISP 
in BUSY status. When the DISP Control Logic receives 
a command to plot the next point, it will load the 
Output Registers with the contents of the correspond** 
ing X and Y Data Registers, thus the analog output of 
the DAC's will change. When the X 2md Y signals have 
settled to the new position, a plot command is sent 
to every display output device selected -.i the Con- 
trol Register. After a preset time, the DISP Control 
Logic will indicate that the plot cycle is complete 
by clearing the BUSY flag and setting the DONE flag. 

If a display device is not able to respond to the 
plot command in the allotted time, it will activate 
the signal DISP EXTEND. This will cause the Control 
Logic to hold off clearing BUSY and setting DONE, thus 
extending the length of the cycle. 

In addition to extending the length of a plot cycle 
in progress, a display output device may indicate 
that it is not ready to accept changes in output by 
activating the DISP WAIT signal. The DISP Control 
Logic will not change the contents of the Output 
Registers while this signal is active, thus prevent- 
ing any change in the X and Y analog signals. if the 
Control Logic receives a request to load the Output 
Registers while DISP WAIT is active, it will honor the 
request as soon as DISP WAIT becomes non-active. 

Typical applications of the WAIT feature would be 


raising and lowering the pen on a hardcopy plotter 
or preventing writing on a storage scope while it 
was erasing the screen. 

This character generator also interfaces with the 
Control Logic of the DISP to allow it to control 
display output devices while writing characters. 



1 


) 


( ^ 5.1 x-y Outputs 

Both X and Y analog output signals available at multi- 
ple connectors at the rear of the Analog Interface.* 
The output range is approximately - 2 volts (the least 
significant bit is nominally 4 millivolts) . The 
output connectors are numbered 0 to 3, corresponding 
to the four available display output devices. In 
addition, the X and Y analog outputs are brought 
. out in the AOUT connector for convenience if the 

DISP is used as an additional pair of analog signal 
outputs. Each output connector is driven by an in- 
dependent buffer. The recommended minimum output 
load is 1000 ohms. 



il 

n 



i 


I 

1 ^ 


* See Appendix C for details. 


:-s 




5. 2 Data Registers 


A ten bit Data Register buffers the data for each 
Digital to Analog converter. The X channel regis- 
ter is loaded with a DOA s^, DISP while the Y channel 
register is loaded with a DOB DISP. The format 
of the reaisters is: 

>sign 


don ' t 

/ 

nine 

low order bit! 

care 



15 

3 5 


2 


Since only ten bits are used by the DAC's, the first 
six bits (0-5) are ignored. Bit 6 is treated as 
the sign bit in a twos complement representation. 

Note that signed numbers in the range 511 (777g) to 
-512 (177000g) are mapped uniquely to an output volt- 
age. This is compatible with the Analog input con- 
verter and the internal number representation of 
signed integers in the NOVA. 



I 



5. 3 Display Field 

The display field is a square grid of points with 
; 1024 points on each side. As explained in the 

s previous section, values of output voltage are re- 

presented by signed ten bit twos complement numbers. 
The display coordinate system is organized as shown 
in Figure 5.2. Note that the coordinate system origin 
is at the center of the screen, the X axis is the 
horizontal axis, and the Y axis is the vertical 
axis. There is one more negative number than posi- 
tive number, due to the twos complement representa- 
I tion. 


y 

™**^^***'— ^ — — — 



i 

i 




IIKiNaa 









I 


5.4 Control Register 

The control register selects the mode of opera- 
tion of the DISP controller and the four possible 
display output devices. Figure 5.1 presents the 
organization of the Control Register. The mode bit 
determines the source of the command to initiate 
a plot cycle. The programmer may select an S pulse 
(DISPSP) , an HRC Overflow Pulse (DISPHRC) , an exter- 
nal control line (DISPEXT) , or tracking mode is(DISPTRK). 
For generation of X-Y plots, the most convenient 
mode is DISPSP. The other modes are provided mainly 
to allow full compatability with the AOUT if the 
programmer wishes to use the DISP to generate an 
additional two channels of analog output. 

The Channel Select Bits correspond to the four possible 
display output devices. If a Channel Select Bit is a 
”1", the corresponding device will receive a plot 
command. By convention, DISP Channels 0 and 1 are 
reserved for X-Y oscilloscopes. DISP Channel 2 is 
reserved for the hardcopy plotter, which is consider- 
ably slower than the oscilloscopes. The characteris- 
tics of these devices will be discussed in more detail 
in Section 5.6. 

The Device Option Bits control special functions in 
the corresponding display output device. Their function 
is defined by the device attached to the channel, for 
excunple, the special function for the hardcopy plotter 
is pen position (Up or Down) . An lORST will clear 
all Channel Select and Device Options Bits. A C pulse 
has no effect on the Control Register. 



I 


I 





5-8 


o 


I 

f 

E 

f 


i 

■ 

! 



I 

i 

1 - 


I 


FIGURE 5.3 - DISP CONTROL REGISTER BIT ASSIGNMENTS 


BITS 


FUNCTION 


Mode 

14-15 


Select source of signal to initiate a plot cycle. 

A plot cycle will transfer data from Data Registers 
to Output Registers, thus forcing the X and Y 
analog output to the new value. 

DISPSP (00) - An S pulse sets BUSY and transfers 

the plot cycle. 

DISPHRC (01) - An HRC Overflow Pulse initiates the 

plot cycle if BUSY is set. 

DISPTRK (10) - Out put Registers trac)c Data' 

Registers, thus the analog output 
is determined by the contents of 
the Data Register. 


DISPEXT (11) - The external control signal for 

the DISP (DISP EXT STB) initiates 
a conversion cycle provided BUSY 
is set. 


Channel A specifies that this output device is to 
Select receive a command to plot a data point during 
4-7 the plot cycle. 

DISPO (1B4)- Selects channel 0. By convention, 

an X-Y oscilloscope. 

DISPl (1B5)- Selects channel 1. By convention, 

an X-Y oscilloscope. 

DISP2 (1B6)- Selects channel 2. By convention, 

an X-Y hardcopy plotter. 

DISP3 (1B7)- Selects channel 3. 


Device 

Option 


8-11 


Enables a special function in the display output 
device associated with the channel. 


(1B8)- Enable function in channel 0. 

(1B9)- Enable function in channel 1. 

PENDWN (IBIO) -Enable function in channel 2. By 

convention, this bit lowers the 
line drawing pen on the X-Y hardcopy 
plotter. 


(IBll) -Enable function in channel 3. 



5.5 Status Flags 

The DISP contains the standard BUSY, DONE, AND INT- 
ERRUPT DISABLE flags as described in How to Use The 
NOVA Computers , Section 2.3. With the exception of 
the DISPTRK mode, the DISP must be BUSY for the X 
and Y output signals to change. The DISP must be 
BUSY to initiate a plot cycle. Figure 5.3 presents 
the state transitions of the DISP logic. 

If the mode is DISPSP, and S pulse will simultaneously 
place the DISP in BUSY state, and initiate a plot cycle. 

If the mode is not DISPSP, an S pulse will simply put 
the DISP in BUSY mode. The DISP will then wait for the 
selected control signal to initiate a plot cycle. At 
the end of the cycle, BUSY will be cleared and DONE 
set. Any requests to start a plot cycle received 
while BUSY is not set are ignored by the DISP, thus 
the program maintains full control over the DISP. A 
C pulse or lORST will clear BUSY and DONE. It is 
important that the programmer always test the Status 
Flags when programming the DISP as an X-Y display 
device. If these flags are tested, it guarantees 
that the program will never output data to the selected 
display output devices at a rate higher than they can 
accept. It is possible, on the NOVA 800, to output 
data to the X-Y oscilloscopes at a rate of 20 microseconds 
per point. If the hardcopy plotter is selected, its 
maximum rate is a point every 15 milliseconds. (Its 
minimum rate is a point every 1 second!) If the Status 

I Flags are tested, the programmer need not worry about 

".'i 

I the special case of the plotter — the DISP will auto- 

f matically extend the plot cycle from 20 microseconds 

a 

I to the actual time required to plot the point. 



5-10 


Busy Flag State 
E)one Flag State 



•BUSY 


Transition initiated by 
event m 


All I/) control events are directed 
at the DISP or CHAR 


figure 5.3 


- DISP State Transitions 






:1 



Whenever DONE is set and INTERRUPT DISABLE is zero, 
the, DISP will request interrupt service as specified 
in section 2.4, Program Interrupt, of " How to Use The 
NOVA Computers" . The INTERRUPT DISABLE flag is attached 
to bit 3 (mnemonic MSDISP) on the NOVA data bus. 

The device will acknowledge the INTA instruction with 
the device code 'DISP'. 





The standard configuration of the system will include 
at least one small X-Y oscilloscope (8 x 10 cm or 
4x5 inch screen) with a P7 phospher (long persistance) 
Optionally, the system will also include a large 
screen oscilloscope (8 x 10 inch) with a P7 phospher 
and an X-Y flatbed plotter (25 x 38cm) . By convention, 
the following display output channels are assigned 
to these devices (if present) : 


Channel 


Small screen oscilloscope 
Large screen oscilloscope 
X-Y flatbed plotter 


Since both channels C and 1 are assigned to X-Y 
oscilloscopes, it is convenient to always select 
both of these channels unless the user wishes to 
maintain different displays on the two channels. 








5.7 Prograiraning the DISP 


Let us say that we wish to plot some X-Y data on 
the two oscilloscope channels. The DISP Control 
Rigester would be set up with the following sequence — 



LDA 0 aVORD jGET CONTROL BITS FOR DISP i 

DOCC 0, DISP ;SET CONTROL REGISTER 

« 

i 

. other code . ; 

CWORD: DISP0+DISP1+DISPSP ;THIS SELECTS CHAN's 0 & 1, ] 

;PUTS DISP IN S PULSE MODE 1 

* 

After executing the DOCC, the DISP would be ready j 

to plot points in response to the following code. ■ 

Assume that the X coordinate is in AC0 and the Y coordi- 
nate is in ACl. 


SKPB2 DISP ;WAIT FOR END OF ANY PREVIOUS 

JMP .-1 ;PLOT CYCLE 

DOA 0,DISP ;LOAD X DATA REGISTER ) 

DOBS 1,DISP ;LOAD Y DATA REGISTER 

; INITIATE A PLOT CYCLE 

Note that the program waits for the BUSY flag to become | 

"0", indicating that the last plot cycle has completed. i 

Since after a Clear pulse, the BUSY flag is also 0, this - 

will work the first time (a SKPDN would not have worked j 

the first time) . After verifying that the previous | 

plot cycle is completed, the X and Y Data Registers 

• i 

were loaded, and a new plot cycle initiated with the 
Start Pulse. Since the DISP X and Y outputs are double 
buffered, the following sequence would also work: 

DOA 0,DISP ;LOAD X DATA REGISTER 

DOB 1,DISP ;LOAD Y DATA REGISTER I 



;WAIT FOR END OF PREVIOUS 
.•CYCLE 

.•INITIATE A NEW PLOT CYCLE 



n 

1 



• 




1 

1 

- - - i — 








u 


The Output Registers are not loaded until the request 
to initiate a new plot cycle, so the DOA and DOB do 
not inunediately change the X-Y output values. The 
above output code could also plot the X-Y data on 
the plotter if CWORD contained DISP2 also. The dis- 
play interface would automatically wait on the plotter. 

Programming Example 5.1 provides a simple routine 
to plot an array of data. The data is assumed to 
be in the range +511 and -512, and is plotted as a 
deflection in the Y axis, while the X axis is stepped 
for each point. This listing is well commented and 
will not be explained here. The reader should note 
the use of the signed comparisons defined in Appendix A. 



T 

I 


00t)l Pt5. 1 

; <57. 1398> JBW M8V 1, 1973 PRGE 1 

i 

i PROGRRHMINU EXHMPLt 5. 1 

i PLOT R FUNCTION IN V 

> 

; fleSTRRCT : 

> 

i . PLTV - ROUTINE TO PLOT RN RRRRV OF ORTR 

J VS THE X RXIS. DRTR IS RSSUMED TO BE 

; i INTEGER IN THE RRNGE ■►Sli. Tu '512 

r i THE USER DEFINES THE REQUIRED PLOT BV 

I ; PASSING THE ADDRESS OF R CONTROL TABLE 

' ; WHICH DRIVES THIS ROUTINE. 


CALLING SEQUENCE: 

JSR 0=. PLTV ; BRANCH TO . PLTV THRU R 

; LOCAL ADDRESS CONSTANT 
CNORMRL RETURN> ; RETURN HERE WITH DRTR PLOTED 


! 





THE CALLER MUST LORD THE DISP CONTROL 
REGISTER BEFORE CALLING . PLTV 

THE DISP MRV BE BUSV AT THE TIME OF THE CALL. 
. PLTV WILL WRIT FOR RNV PREVIOUS DISP 
ACT I VI TV TO TERMINATE BEFORE PROCEDING 

ARGUMENTS : 

AC2 POINTS TO PLOT CONTROL TABLE, WHICH IS 
FORMATED AS DESCRIBED BELOW. 

PLOT CONTROL TABLE - 
REFERENCED BV FOLLOWING OFFSETS 
IX - INITIAL X CORD OF DISPLAV 
IV - INITIAL V CORD. FOR . PLTV, THIS 
IS ADDED TO EACH V DATA CORD 
AS IT IS PLOTED. 

XS - X SPACiriG BETWEEN POINTS. 

VS - V SPACING <NOT USED> 

DA - ADDRESS OF FIRST DATA ITEM, 

LEN- LENGTH OF DATA BUFFER 

OFFSET VALUES ARE DEFINED ON NEXT PAGE 


RETURNS : 


AFTER NORMAL RETURN. ALL DATA HAS BEEN 
OUTPUT TO THE DISPLAV 

THE DISPLAV MAV STILL BE BUSV. IF THE 
USER WANTS TO CLEAR THE DISPLAV. HE MUST 
WAIT UNTIL IT IS DONE BEFORE CLEARING 

ACCUMULATORS : 


ALL REGISTERS RESTORED EXCEPT AC3 AND CARRV. 



I 




I 


o 


5-16 


0002 PfcS. 1 


<17, 291 > 


JBW 


M0V 1, 1973 


PRGE 2 



; 


> PROGRRMMING EXFIMPLE 5. 1 - CONT 

i DEFINITION OF CCiNTROL TftBLE OFFSETS 


USER mv EDIT THIS PRGE INTO HIS SOURCE 
TO DEFINE OFFSETS FOR SETTING UP THE 
CONTROL TRBLE. 


000000 

. DUSR 

IX 

=0 

000001 

. DUSR 

IV 

*1 

000002 

. DUSR 

XS 

»2 

00000.? 

. DUSR 

VS 

»3 

000004 

. DUSR 

DR 

=4 

000005 

. DUSR 

LEN 

=5 




I - 




5 






5-17 




iHHlll W ^KlilLl 


0003 


PF.5. 1 


JBM 


MFlV 1, 1973 


PAGE 3 


<57, 978 > 


i PROGRAMMING EXAMPLE 5. 1 - CONT. 

i 

i . PLTV - THE REAL THING 


. TITLE PE5. 1 
. ENT . PLTV 
. NREL 


00000 040435 . PLTV : 

STA 

0, SV 

00001' 044435 

STA 

1, SV+1 

00002 050435 

STA 

2, SV+2 

00003' 054435 

STA 

3, SV+3 


>SAVE ALL THE REGISTERS 


00004 ' 02:1000 
00005 040427 


LL>A 0, IX, 2 iGET THE INTIAL X VALUE 

STA 0, XCORD ; SAVE IT FOR THE INNER LOOP 



00006' 025001 


LDA 1, IV, 2 


i GET V OFFSET 


00007' 021005 
00010' 040423 


LDA 0, LEN, 2 ; GET # OF POINTS 

STA 0, LPCT ) SAVE IN LOOP COUNTER 


00011' 035004 
00012' 031002 


LDA 3, DA, 2 
LDA 2, XS, 2 


iGET ADDRESS OF DATA 
;LOAD X STEP SIZE 


00013' 021400 LOOP: 
00014' 175400 

LDA 

INC 

0, 0, 3 
3, 3 

00015' 123000 

ADD 

1, 0 

00016' 062034 

DOB 

0, DISP 

00017' 020415 

LDA 

0, XCORD 

00020 063534 
00021' 000777 
00022' 061134 

SKPB2 DISP 
JMP . -1 
DOAS 0, DISP 

00023' 143000 
00024' 040410 

ADD 

STA 

2, 0 

0, XCORD 


jGet datum 

i ADVANCE POINTER 

;ADD ON OFFSET <IN AC1> TO V 

jLOAD DISPLAV V BUFFER 

i GET CURRENT X CORD 

;WAIT FOR END OF LAST POINT 

iLOAD X BUFFER & OUTPUT X ft V 

; UPDATE X BV X STEP 


00025' 014406 

DSZ 

LPCT 

; DONE 

VET? 

00026' 000765 

JMP 

LOOP 

; NO- 

GET NEXT POINT 

00027' 020406 

LDA 

0, SV 

i VES- 

RESTORE REGISTERS 

00030 024406 

LDA 

1, SV+1 



00031' 030406 

LDA 

2, SV+2 



00032' 002406 

JMP 

eiiSV+3 

> AND 

RETURN 


000001 

000001 

000004 


LPCT : 
XCORD ; 

sv- 


. BLK 1 
. BLK 1 
. BLK 4 

. END 


i8 

QUAUTyi 


jLOOP COUNTER 
; TEMP X CORD 
> 4 WDS TO SAVE ACS 


5-18 






' ) 
■w/ 


1 



imw,^ I 1 I I I 1 - - J , 


SECTION 6 

THE CHARACTER GENERATOR 
6.0 General Information 

The hardware character generator (mnemonic CHAR) pro- 
vides the user with a system for the generation of 
characters on the display output devices. The device 
will represent the 64 ASCII characters from 40g to 
137g (see Appendix E of How to Use the NOVA Computers ) 
with a 5 X 7 dot matrix. The only exception is 
for code 137g which is represented as an underbar (_) 
rather than a back arrow ( 4 -) . 



Figure 6.1 presents a block diagram of the Character 
Generator. The user may access the Character Regis- 
ter, Size Register, and Status Flags. The Character 
Register specifies the character to be drawn, while 
the Size Register specifies the physical size of 
the character on the display device. The Status Flags 
allow the user to interrogate the status of the 
device and allow it to request progreun service. In 
fact, the Status Flags are shared with the DISP logic, 
however, the user programs the CHAR and DISP as if 
they were independent devices . The Status Flags 
are shared so that the user need not recall which 
device was the last to carry out display activity, 
nor need he test the status of both the DISP and CHAR. 
All the user need do is verify that the device he 
wishes to use is free (i.e., not BUSY), this guaran- 
tees that in fact the entire display system is free 
for new action. 


I 

I 

1 

I 



6-1 


isrnmirnsssumsmtsmm 


CHARACTER 


READ-ONLY 

MEMORY 



MULTIPLYING 
DIGITAL 
TO ANALOG 


MULTIPLYING 
DIGITAL 
TO ANALOG 


X CHARACTER 
DEFLECTION 


Y CHARACTER 
DEFLECTION 



CHARACTER 
CONTROL LOGIC 


COLUMN 

REGISTER 


ROW 

REGISTER 


STATUS FLAGS 

• BUSY 

• DONE 

• INTERRUPT DISABLE 


CONTROL LOGIC 


THIS LOGIC IN THE DISPLAY 


6.1 CHAR Block Diaai-am 














I 


The Column and Row Registers also specify an in- 
cremental X and incremental Y deflection signal 
that is added to the current X and Y coordinate 
specified by the Output Registers of the DISP. 

Figure 6.2 diagrams the dot pattern relative to the 
current X and Y position. The dots of Figure 6.2 
are darkened to indicate the intensification pattern 
for the letter "A”. 


H A 1^ 


« O O O 


o c o 


# • 


o o o 


O o o 

o o o 


"A” is dot spacing 
and is set by the 
Size Register. 


Current 
X-Y Coord. 


FIGURE 6.2 - CHAR Dot Matrix 


6-3 



6.1 Character Register 



The Character Register may be loaded with a DOA s, CHAR 
or DOB s,CHAR. The DOB will also load the Size Regi- 
ster (section 6.2). The ASCII character code is 
taken from the low order six bits of the s register. 
Six bits provides for 64 unique characters. The 
characters that may be plotted are represented in 
Figure 6.3. 


6.2 Size Register 


The Size Register is loaded with a DOB s,CHAR. This 
instruction will simultaneously load the Character 
Reaister. The Size Register is loaded from bits 6 
and 7 of the register. Four possible sizes may be 
specified, one of which is illegal (but not fatal) . 
Figure 6.4 presents the relationship between a given 
character size in the Size Register, and the physi- 
cal size of the character drawn. An lORST will preset 
the Size Register with the CHARM size. 


6-4 




I ) 








1 


FIGURE 6.4 
CHAR Character Size 


Selected 

Size 

CHARS (00B7) 
(Small) 


Characters 
Per Line 

(Lines on Display) 


85 (46) 


CHARM (01B7) 
(medium) 


CH7VRL (10B7) 


56 (31) 


28(15) 


11B7 


Legibility 

Readable at close range on 
large screen display (8x10 
in.) Barely readable at 
close range on 4x5 in dis- 
play. Not legible on 8x10 
cm. display. 

Easily readable at normal 
viewing distances on all 
except 8x10 cm display. 
Readable at close range on 
8x10 cm display. 

Highly readable on all dis- 
play purposes. 

Illegal size setting, pro- 
duces . characters slightly 
larger than CHARL. 


Mnemonics are defined in Appendix A. 

Dot Spacing refers to step size between dots, 

(See Figure 6.2, Dimension A). 

Characters per line is computed assxaming an intercharacter 
space of one blank column (one dot space) . The interline 
spacing is computed assuming four blank rows (four dot spaces) . 
Thus the total area occupied by an individual character is 
six by eleven dot spaces. This provides character and line pitch 
comparable to standard typev/riter spacing. 

Legibility comments are of necessity, subjective, and 
depend on a number of factors, such as physical organization 
of the display and ambient light levels. As a reference, the Dis- 
play Editor uses the CHARM size. 


6-6 


6.3 Status Flags 

' ./• 

• As was mentioned in Section 6.0, the Status Flags 
of the CHAR and DISP are shared. From the pro- 
grammers point of view, the Status flags are as 
described in Section 2.3 of How to Use the NOVA 
Computers with the exception that the CHAR will in- 
dicate that it is BUSY if the DISP is using up the 


display channels. The only special precaution the 
user should observe is to always wait for the dis- 
play channel activity to stop by executing a SKPBZ 
DISP or SKPBZ CHAR before starting either device. 

Note that the SKPBZ instruction has the property that 
it will work correctly even if the device has never 
been started before (a SKPDN would hcuag up) . Examples 
are given in Section 6.4. 


O 


1 


Figure 6.5 presents the state transitions of the 
CHAR logic. Note that the transitions caused by the 
DISP logic are included for completeness. 

The Interrupt Disable Flag is standard as described 
in Section 2.4, Program Interrupt, of How to Use the 
NOVA Computers . The character generator can request 
interrupt service but it will respond to an INTA with 
device code "DISP" not "CHAR". Thus, any user supplied 
interrupt handler for CHAR must be incorporated in the 
interrupt handler for DISP. Likewise, the INTERRUPT 
DISABLE flag of the CHAR is attached to Bit 3 (mnemonic 
MSCHAR) of the NOVA data bus. 


C 


6-7 



Note: End of display activity 

may be due to action 
initiated by CHAR on DISP 


• BUSY • 


BUSY-DONE State Transitions 




6 . 4 Programming the CHAR 

I 

Since the CHA T draws the character at the current 
X-Y position, as determined by the DISP; the user 
is responsible for updating the X-Y position as re- 
quired to output his text. The simplest method to 
do this is to place the display in DISPTRK mode, 
with the required display channels selected. Having 
done this, the following code would write the character 
in AGO at the X-Y position determiend by the contents 
of ACl and AC2 . 

SKPZ CHAR ;WAIT FOR ANY PRECIOUS DISP OR CHAR 

JMP .-1 ; ACTIVITY TO STOP 

DOA 1,DISP ;SET X POSITION 

DOB 2, DISP ;SET Y POSITION 

DOAS 0,CHAR ; LOAD CHARACTER REGISTER & START 
; CHARACTER 

( j Since the DISP was in track mode, the X and Y beam 

position began to change as soon as the DOA and DOB 
to the display were executed. When the DOAS to CHAR 
is executed, the X and Y outputs would not have settled 
to theri final position. The DISP logic will automatically 
hold off the character generator until the beam reaches 
the correct position. At this point it would allow 
the CHAR to actually begin plotting the character. 

Note that no S pulse was required to start the DISP, 
since it was in track mode and the CHAR controls intensi- 
fication. 

Programming Example 6.1 provides a routine which accepts 
a character and control tab]e as input. It plots the 
character at the position indicated in the control table, then 
updates the X position in the control table so that the 
next character will appear to the right of the last 
j one plotted. As it is called with successive characters, 

it generates a line of text across the display field. 


6-9 


It does not test for an end of screen or special control 
characters in its input, so the caller is responsible 
for maintaining line spacing. 


O 



6-10 



0001 PE6. 1 

i <45, 1193^ JBW MRV 2, 1973 PRGE 1 

i 

i PROGRRMMING EXRMPLE 6. 1 

s '" I ; DISPLRVING R CHRRRCTER 

i RBSTRRCT : 

i 

i . CHRR IS R ROUTINE WHICH WILL DISPLRV 

i R CHRRRCTER RND UPDATE R CONTROL TABLE 

i THE CONTROL TABLE SPECIFIES THE POSITION 

i OF THE NEXT CHRRRCTER TO BE PLOTED 

i CALLING SEQUENCE: 


1 



I 



ORIGIN^ PAGP r« 


JSR CHRR ; BRANCH 0 R LOCAL ADDRESS 

; CONSTANT FOR . CHRR 

<NORMRL RETURN> i RETURN HERE AFTER CHRRRCTER 

i STARTED. 

THE CALLER MUST LORD 'DISPTRK'’ MODE INTO 
THE DISPLRV CONTROL REGISTER BEFORE CALLING 
. CHRR - flS WELL AS SELECTING THE DISPLRV 
DEVICES. THE CHARACTER SIZE REGISTER MUST 
ALSO BE SETUP BV THE USER. 

THE DISPLRV MRV BE ACTIVE <BUSV> AT THE TIME 
OF THE CALL. '.CHRR' WILL WRIT FOR RNV 
PREVIOUS RCTIVITV TO TERMINATE BEFORE PROCEEDING. 

ARGUMENTS ; 

RC0 HOLDS THE CHRRRCTER TO BE PLOTED IN THE 
RIGHT BVTE ONLV BITS 10-15 ARE SIGNIFICANT 
IN DETERMINING THE CHRRRCTER TO BE PLOTED. 

RC2 HOLDS THE ADDRESS OF THE CHRRRCTER 
CONTROL TABLE. 

CHRRRCTER CONTROL TRBLE- 
CXC - X CORD OF NEXT CHRRRCTER 
CVC - V CORD OF NEXT CHRRRCTER 
CSZ - CHRRRCTER SIZE, DOT SPACING 
NOT HARDWARE SIZE. 

CONTROL TABLE OFFSET VALUES DEFINED 
LATER IN LISTING 



6-11 


0062 PE6. 1 


<28/ 685 > 


RETURNS : 


JBW 


riHV 2/1973 


PfiGE 2 


8FTER NORMflL RETURN/ THE CHHRflCTER SPECIFIED 
BV fiC0 WILL HAVE BEEN OUTPUT TO THE CHRRHCTER 
GENERATOR THE DISPLAY flAV STILL BE ACTIVE/ 
AND THE USER MUST WAIT UNTIL IT IS DONE 
BEFORE HACKING IT. 

THE CXC WILL HAVE BEEN UPDATED TO THE X CORD 
OF THE NEXT CHARACTER - BASED ON THE VALUE OF 
CSZ. CVS IS NEVER MODIFIED BV ^ CHAR. 

ACCUMULATORS : 

AC2 IS RESTORED/ ALL OTHERS DESTROYED. 

SPECIAL CONSIDERATIONS; 

THE USER MUST SPECIFY THE DOT SPACING FOR 
THE CHARACTER SIZE HE HAS SELECTED. THE 
CORRESPONDENCE BETWEEN SIZE AND DOT 
SPACING IS GIVEN BY THE FOLLOWING TABLE- 

CHARS- 2 
CHARM- 3 
CHARL- 6 


o 


I ) 



JBN 


Mf=lV 2. 1973 


PAGE 3 




'' 0003 PE6. 1 

i 
) 
1 
; 
i 
i 
i 



PROGRRMMING EXRMPLE 6. 1 - CONT. 


DEFINITION OF CHRRRCTER CONTROL TABLE 
OFFSETS. 



*■ 

% 


i THE USER MRV EDIT THIS PAGE INTO HIS 

i SOURCE TO DEFINE THE CONTROL TABLE 

, OFFSETS FOR INITIALIZATION OF THE TABLE. 

000000 • OUSR CXC *0 

000001 . C)USR CVC =1 

000002 . DUSR CSZ -2 






! 

j 

' 0004 PE6. 1 

* 

i 

i 

) 


<42. 821> JBW MfHV 2.1972 PRGE 4 

PROGRftfirilNG EXAMPLE 6. 1 - CONT. 

. CHAR - CHRRCTER GENERATOR SUBROUTINE 
USES HARDWARE CHARACTER GENERATOR. 




. TITLE PE6. 1 
. NREL 

. ENT . CHAR 

00000' 054420 . CHAR : 

STA 2. SV2 

00001' 0E3525 
00002 000777 

SKPB2 CHAR 
JMP . -1 

00002' 025000 
00004' 075024 

LDA 2. CXC. 2 
DOA 2. DISP 

0000-3' 025001 
00006' 076024 

LDA 2. CVC. 2 
DOB 2. DISP 


>SAVE RETURN ADDRESS 

;WAIT FOR ANV PREVIOUS CHAR 
i OR DISPLAV ACT I VI TV 

jPICK UP X CORD 
; SET X CORD 

>PICK UP V CORD 
; SET V CORD - BEAM IS NOW 
j MOVING TO LOWER LEFT HAND 
i CORNER OF THE CHARACTER 


00007' 061125 

DOAS 0. CHAR 

; START THE CHAR GENERATOR 
; HARDWARE WILL HOLD IT 
} UNTIL X & V SETTLE 

00010' 021000 
00011' 025002 
00012 125120 
00012' 165120 
00014' 127000 

LDA 0. CXC. 2 
LDA 1. CSZ. 2 
MOVZL 1. 2 
MOVZL 2. 1 
ADD 1. 2 

;GET X CORD 
iGET CHAR SIZE <I> 
; NOW 21 IN AC2 

s NOW 41 IN ACl 

} NOW 61 IN AC2 

00015' 162000 
00016' 041000 

ADD 2. 0 
STA 0. CXC. 2 

; UPDATE X 

i IN CONTROL TABLE 

00017' 002401 

JMP 9SV2 . 

; RETURN 

000001 SV2: 

. BLK 1 

i SAVE RETURN ADDRESS 


. END 






6-14 


SECTION 7 

The General Purpose Register 


7.0 General Information 


The digital General Purpose Register (mnemonic GPR) 
consists of a separate 16 bit input register and 
and 16 bit output register and the standard Busy-Done 
network. The GPR can be used for I/O via the 16 
data lines, as a buffer for user equipment connected 
to the NOVA, adn to test new I/O devices. The input 
register is a resettable binary counter, and the P 
pulse or a user supplied pulse will cause it to count. 

Figure 7.1 provides a block diagram of the system. 

The GPR consists of the standard status flags (de- 
scribed in Section 2.3 of How to Use the Nova Computers 
the Output Register, the Input Register and the Control 
Logic. Two connectors mounted on the rear panel provide 
access to the Input and Output registers and also to 
the status flags. 

7.1 Output Register 


The Output Register is a 16 bit latch followed by 
line drivers. The output lines (DATAOUT|?-DATAOUT15) 
are active low. If a user loads a into a bit 

of the output register, then the corresponding out- 
put line will be low (about 0.3 volts). Likewise, 
a '0' loaded into the register is high (3.5 volts) 
at the output. The outputs are standard TTL levels 
capable of driving 30 TTL loads. 


The Output Register is loaded with a DOA s,GPR instruction 
In addition, the decoded DOB and DOC pulses are available 
at the rear connector. Appendix C provides detailed 
signal specifications and ocnnector pin assignments. 



USER OUTPUT 
INTERFACE 


USER INPUT 
INTERFACE 


Fiaure 7.1 GPR Block Diagram 






o 


7.2 Input Register 



The Input Register consists of a 16 bit reseteible/ 
parallel input counter. TJhe input lines (DATAIN0- 
DATAIN15) are active low. 

The Input Register may be read into an accumulator 
with either a DIA d, GPR or DIB d, GPR instruction. 

In addition, the DIG pulse is decoded and provided 
at the input connector. The DIA instruction loads 
the Input Register with the contents of the DATAIN 
lines, then loads the destination register with this 
value. The DIB instruction simply loads the current 
contents of the Input Register into the specified 
destination register. Thus, the DIA destroys any 
previous contents of the Input Register, while the 
DIB does not change the contents. 

The contents of the Input Register can be incremented 
by a P pulse to the GPR or by an external USER COUNT 
signal. See Appendix C for details about the user 
signals and the connector pin assignments. 


I 


J 

f 


X 



1 


7.3 Status Flags 

The GPR contains BUSY, DONE and INTERRUPT DISABLE 
flags as described in Section 2.3 Input-Output of 
How to Use the NOVA Comput ers . Figure 7.2 
provides a diagram of the state transitions for the 
GPR. 




The device may be programmed without the aid of the 

BUSY-DONE flags by simply issuing the appropriate * 

input-output instructions. If the user places the 

GPR in BUSY state, by issuing an S pulse to the de- • 

vice, then the GPR will enter DONE state on the 
occurrence of a USER STROBE PULSE, USER DEVICE COMLETE, 
or DIA instruction. Thus, the user can set the de- 
vice in BUSY state to await the completion of a task 
by the external user hardware. 


The GPR C 2 m request interrupt service as described 
in section 2.4 - Program Interrupt of How to Use the 
NOVA computers . It functions in all respects as 
described in that section. The interrupt Disable 
flag is attached to bit 5 (mnemonic MSGPR) of the 
NOVA data bus. The GPR will acknowledge the INTA 
instruction with the device code "GPR" (see Appendix A) . 



7-4 






7.4 Progranuning the GPR 


O 



LOOP 


The simplest case of programming the GPR output 
occurs when the user wishes to simply output data 
without sychronizing with any external events. In 
this case, he may execute the instruction, 

DOA s,GPR 

to load the Output Register with C(£). 

If the user wishes to synchronize with external events, 
then he must program with the BUSY-DONE flags. He 
should place the GPR in BUSY state, then wait until 
the external user device supplied a USER DEVICE COM- 
PLETE signal to the GPR. This will force the GPR 
into DONE state indicating that the users device is 
ready for the next ouput value. The following code would 

; COMPUTE FIRST OUTPUT VALUE 

;PUT GPR IN BUSY STATE 
;WAIT FOR USER DEVICE READY 

; OUTPUT DATA, RESTART GPR FOR 
;NEXT OUTPUT POINT 
; COMPUTE NEXT OUTPUT VALUE 

;G0 TO WAIT FOR USER DEVICE READY 

As for output, the simplest case in programming the 
GPR for input operation occurs when the user need 
not synchronize with any external events. In this 
case, the user may simply use the instructions. 


accomplish this. 


NIOS GPR 
SKPBZ GPR 
JMP .-1 
DOAS 1, GPR 


JMP LOOP 


f 


I 


I 


, I 

L,' 


I 

i 

i 


i 


7-6 


D 



" r ■ 


i 

i 


■ 



or 


DIA d,GPR 


DIB S,GPR 


;READ IN DATA LINES, DESTROYirG OLD 
; CONTENTS OF INPUT REGISTER 

;READ IN INPUT REGISTER WITHOUT 
; DESTROYING CONTENTS. 


If the user wishes to synchronize with external events, 
then he must use the BUSY-DONE flags. For example, 
assume that the user device is supplying USER COUNT 
PULSES to the GPR input register. When it has ccr- 
pleted the count for a particular run, then it supplies 
a USER DEVICE COMPLETE signal to indicate that the 
total count is available. The following code would 
handle this. 


;USER SETUP CODE 

• • • 

NIOS GPR ;SET GPR BUSY TO AWAIT COMPLETION 

LOOP: SKPDN GPR ;WAIT TIL DONE 

JMP .-1 

DIBS 1,GPR ;READ IN COUNT, RESTART DEVICE 

... ; PROCESS COUNT 


JMP LOOP 


;GOTO VJAIT FOR NEXT COUNT 


In this example, the user device v;ould have to reset 
(REGRST signal) the Input Register each time it began 
a new run. 

Programming example 7.1 is a program to decode a 
16 key pushbutton keyboard. The program requires 
an interrupt handler and a routine which will set 
the HRC or RTC to interrupt at a rate of 1000 Hz. 

When the clock interrupts the data on the GPR lines 
is sampled and the program filters and decodes the 
keyboard. It is assumed that the keyboard is wired 
to ground the corresponding DATAIN line when a key 
is depressed. The data in lines are pulled up to 


7-7 


5 volts inside the GPR (see Appendix C) thus the 
line is high (a logic *0' to the program) provided 
the key it is attached to is not depressed. 

The problems of contact bounce in mechanical 
switches should not be overlooked when designing 
user interfaces to the GPR, or in programming 
handlers for the GPR Input Register. The programming 
example allows the use of simple switches by inte- 
grating the sampled switch position. This serves 
to eliminate switch bounce and noise problems. 
Alternatively a more complex switch interface could 
be used to eliminate any switch bounce before the 
GPR inputs. 


T 


00feil PE 7. i 





BG 


5/2772 


PR0GRBMMU4G EXRMPLE 7. 1 
GPR KEVBORRD INTERFRCE 


RBSTRRCT 


THIS PROGRRtI WILL DECODE KEVS STRUCK ON 
R 16 KEV KEVBORRD THE FOLLOWING CODE 
RSSLIMES THRT RN INTERRUPT ROUTINE RND R 
ROUTINE TO STRRf EITHER THE RTC OR HRC TO 
INTERRUPT RT R RRTE OF 100 TO 1000 HZ IS 
PROVIDED. WHEN R KEV IS RECEIVED, R USER 
ROUTINE <PTKEV> IS CRLLED TO STORE THE KEV. 

R SIMPLE FILTER IS PROVIDED TO MRKE SURE THE 
KEV IS DEPRESSED FOR R CERTRIN NUMBER OF 
CLOCK CVCLES TO ELIMINRTE NOISE SPIKES. 


CRLLING SEQUENCE: 

; GET R KEV 


JSR QTKEV 
C RETURN 1 


RRGUMENTS ; 


THE KEV STRUCK IS RETURNEC- TO R USER SUPPLIED 

ROUTINE CRLLED PTKEV 

WITH THE KEV CIN RSCII> IN RC0. 


RETURNS 


GTKEV RETURNS RFTER INITIRLIZING THE GPR. 
THE USER ROUTINE PTKEV SHOULD RETURN TO 
CRLL+1 RFTER STORING THE KEV RND SETTING 
R KEV RECEIVED FLRG. 


RCCUMULRTORS : RC2 IS DESTROVED 




7-9 


J 


002 Pt7. 1 


progrruming exrmple ? i 


. TITL PE7. 1 
.ENT GTKEV/KEVINT 
. EXTN CLKST, PTKEV 
. NREL 


>THE FOLLOWING IS THE USERS CfiLL TO GTKEV 
;HNC> THE USER'S PTKEV ROUTINE 

; SUB 0.0 

> STR 0. KRCVD ; RESET KEV RECEIVED FLRG 

; JSR C-. GTKEV i GET R KEV 


i ... 

; . GTKEV : GTKEV 
* . • • 

> ... 

; PTKEV : STR 0. KEV 

i SUBZL 0. 0 

; STR 0. KRCVD 

; JMP 0> 2 


i STORE THE KEV THRT WRS STRUCK 

.SET KEV RECEIVED FLRG 
i RETURN 


i THE FOLLOWING IS THE GTKEV ROUTINE 


00000 054406 GTKEV: 
00001' 060226 
00002 020405 
00002' 040406 
00004' 006404 
00005' 002401 


STR 3. GTRET 
NIOC GPR 
LDR 0. M5 
STR 0. FKEV 
JSR C-. CLKST 
JMP 0GTRET 


i SRVE RETURN RDDRESS 
;CLERR THE GPR 
>SET THE KEV FILTER 

iJMP TO THE CLOCK STRRT ROUTINE 


00006' 000000 
00007' 177773 
00010' 177777 
00011' 000000 


GTRET : 0 

M5; -5 

. CLKST : CLKST 
FKEV : 0 


i FILTER CONSTRNT 
;USER CLOCK ROUTINE 
; FILTER FOR THE KEVBORRD 



fci(i02 PE7, 1 


PROGRRMMING EXRMPLE 7. 1 


; 


; THE FOLLOWING IS THE INTERRUPT HRNDLER FOR THE RPPRORIRTE 
j CLOCK ROUTINE <EITHER HRC OR RTO 


00012^ 054422 

KEVINT; 

STR 

2, DISMIS 

; SRVE RETURN 

00013' 064436 


DIR 

1, GPR 

; INPUT KEVBORRD LINES 

00014' 125015 


MOV# 1, 1> SNR 

;SKP IF RNV KEV STRUCK 

00015' 000412 


JMP 

NKEV 

i NO KEV WRS STRUCK 

00016' 010773 


ISZ 

FKEV 

i INC FILTER 

00017' 002415 


JMP 

0DISMIS 

iKEV NOT DOWN LONG ENOUGH 

00020' 024413 


LDR 

±, C60 

; THERE IS R KEV 





>MRKE IT RSCII 

00021' 125223 

KLOOP : 

M0V2R ±, ±, SNC 

/DECODE THE KEV 

00022' 000403 


JMP 

DKEV 

; DONE 

00023' 101400 


INC 

0. 0 

/KEV IN RSCII 

00024' 000775 


JMP 

KLOOP 


00025' 006405 

DKEV; 

JSR 

0. PTKEV 

;GIVE KEV TO USER 

00026' 002406 


JMP 

0DISMISS 

/DISMISS INTERRUPT 

00027' 024760 

NKEV; 

LDR 

±, M5 

;N0 KEV/ RESET FILTER 

00030' 044761 


STR 

±, FKEV 


00031' 002403 


JMP 

©DISMISS 


00032' 177777 

. PTKEV : 

PTKEV 


00033' 000060 

C60: 

60 



00034' 000000 

DISMISS 


0 



. END 




SECTION 8 



THE TRIGGER INPUTS 
8.0 General Information 

The trigger input (mnemonic TRG) provides a facility 
for interaction between the user and program. Four 
front panel switches are provided. When the user 
trips any of those switches, a corresponding hard<- 
ware flag is set which may be interrogated by the 
program. Analog Trigger Inputs are also provided. 

Each of these inputs allows an analog signal to set 
a corresponding trigger flag, which can be interroga- 
ted in a manner similar to the switch flags. Thus, 
a wide variety of signals may be used to flag events 
for the progreum. 

Figure 8.1 provides a block diagram of the TRG system. 
The TRG is represented at the Front Panel by four 
switches, four analog trigger inputs, and four LED 
lamps (see Figure 1.4). The various inputs set flag 
bits in the Trigger Flag Registers. The user may 
load the Lamp Register, thus activating a LED lamp 
on the Front Panel. The Control Logic responds to 
changes in the status of the Trigger Flag Registers 
(and thus indirectly the various inputs) and sets the 
Status Flags as indicated to request program service. 

The Trigger Switches are numbered 0 through 3, and acti- 
vate flags in the corresponding bit positions of the 
Trigger Flag Registers. Each switch has three possible 
physical positions. These are "off" (center), spring 
return or trigger (down) and latch (up) . When the 


8-1 



FRONT PANEL 
SWITCHES 



FRONT PANEL 
ANALOG TRIGGER 
INPUTS 


FRONT PANEL 
LAMPS 


CONTROL LOGIC 
















switch is placed in the latch position, the corres- 
ponding Latch Flag is set. This flag may not be 
cleared by the program, thus it indicates the current 
physical position of the switch. If the switch is 
placed in the trigger position, it will return as 
soon as the user releases it. When the switch enters 
the trigger position, the corresponding Trigger Flag 
is set. This flag will remain set until cleared 
by the program, and indicates that the switch has 
entered the trigger position at some time in the 
past. Thus, two bits are used ..o describe the state 
of each switch. The latch bit is set if the switch 
is currently in the latch position. The trigger 
flag is set if the switch has been placed in the 

momentary position since the last time the flag was | 

cleared. 

Four analog trigger inputs are provided. Each of 
these inputs accepts analog inputs in the range 
- 10 volts and compares the input with a reference 
value determined by the threshold knob (above and 

to the right of the input, see Figure 1.4). When the ! 

input signal exceeds the reference, an event is ^ 

said to have occurred on that input. The user may 

consider the event to be equivalent to actuating a 

switch. Thus a trigger flag is set on the occurrence 

of an event, but will remain set even if the event 

goes away. Occurrance of another event while the 

corresponding Trigger Flag is set will result in | 

the flag remaining set. \ 

I 

i 

i 

1 


8-3 




f 

I 


1 


1 


{ 

i 


8.1 Analog Signal Input Specifications 

The Analog Trigger Inputs accept analog signals in 
the range - 10 volts. The input has an impedance of 
10 M ohms provided the input signal is in the normal 
operating range (- 12 volts) . If the signal exceeds 
the normal operating range, protective circuitry is 
activated to prevent damage to the electronics. 

If the protective circuits are activated, the input 
impedance will drop to 3,000 ohms. The device will 
recover from signals in the rangei - 30 volts, if the 
overload signal exceeds this, a fusable element in the 
protective circuit will open thus disconnecting the 
offending signal from the electronics. If this 
occurs, the fusable element must be replaced before 
that input will function again. 

As stated earlier, the analog signal is compared 
with a reference voltage determined by the setting of 
the threshold knob. The comparator is of the Schmitt 
type, with approximately 0.25 volts hystersis. This 
hystersis provides noise immunity, but requires that 
the peak-to-peak swing of the signal be greater than 
0.25 volts for the circuit to trigger. The compara- 

tor operates up to 250 KHz thus easily exceeding 
any signal repetition rate that a program could respond 
to. 


The input signal may be coupled into the comparator 
via direct or capacitive coupling. The capacitive 
coupling is convenient for removing large DC offsets 
on a small peak-to-peak signal. The user may also 
ground the input of the comparator, thus stopping 
any subsequent trigger action on that channel. 









8-4 




I 

1 




I 



# 



I 


8.2 Trigger Flag Registers 

Two registers in the TRG provide the user with the 
status bits for all of the device flags. The Trigger 
Flag Register (read in by a DIA d,TRG) provides 
the eight Trigger Flags — four for the switches and 
four for the analog trigger inputs. The Latch Regis- 
ter (read in with DIB d,TRG) provides the four 
latch flags for the switches. The trigger flags are 
allocated as follows: 


j: 


r 


switches 


01234567 


Not used 


15 


T 


Analog Trigger Inputs 


where the bit position in the register corresponds 
to the switch or analog trigger input number. The 
latch Flags are allocated as follows: 


/—Switch Latch Flags 



0 12 3 

4 Not Used 15 


As before, the bit position corresponds to the switch 
number . 

Once a flag has been set, the user must acknowledge 
receipt of the flag by "echoing" the flags he read. 

If the user echoes the state he has read in, it allows 
the TRG to compare the true state of the flags with 
with the state at the last time the user read the flags. 

In this manner, the TRG logic can determine when it is 
necessary to request program service to inform the program 
of a change in the status of the various flags. 


8-5 


I 





^ 


• 






The user may echo the state of the Trigger Flags by 
executing a EX)A s, TRG; where the contents of the £ 
register correspond to the states obtained by the 
user. Typically, the user would execute the sequence, 

DIA 1,TRG ;READ TRG FLAGS INTO BITS 0-7 

DOA 1,TRG ;ECHO FLAGS TO CLEAR THEM 

This reads the flag status into ACl then clears the 
corresp>onding flags in the device. Note that if 
a flag should happen to be set immediately after 
the DIA but before the DOA it will not be lost; 
since the corresponding bit will not be set in ACl - 
and it will not be cleared by the DOA. If this 
happened, the flag would be detected at the next 
DIA instruction. The DOA actually clears the flags, 
thus a second DIA after the DOA in the above sequence 
would not have the flag bits set unless they were 
set between the DIA and DOA. 

In the case of the latch flags, executing a DOB £,TRG 
will echo the state of the latch flags for the switches. 

The user would execute; 

DIB 1,TRG ; LATCH BITS INTO BITS 0-3 

DOB 1,TRG ;ECHO LATCH FLAGS 

The Latch Flags are read into ACl, then echoed to the 
TRG. The DOB does not clear the latch flag, thus a 
DIB may be executed at any time to read the latch flags . 
The TRG compares the status of the flags as presented 
by the DOB instruction with the true physical position 
of the switches - then requests program service if they 
are different. 

Both an lORST and a C pulse to the TRG will clear all 
flags. 




8-6 


I 



8.3 Lamp Register 


The user may load the lamp register with a DOC s,TPG 
instruction. The lamp control bits are assigned as 
follows ; 

5 T“Lamp Control Bits 


0 12 3 


Not used 


Note that the lamp number corresponds to the bit 
position in the Lamp Register. A "1" in the corres- 
ponding bit will activate the lamp. The Lamp Register 
is cleared (turning off all lamps) by an lORST or a 
C pulse to the TRG . 


8.4 Status Flags 

The TRG contains a BUSY, DONE, and INTERRUPT DISABLE 
flags as described in Section 2.3, Input-Output, of 
How to Use The NOVA Computers . In addition, an Analog 
Trigger Enable flag is provided. The Busy and Done 
flags are not standard as described in the NOVA manual. 
Figure 8.2, a state diagram of the TRG, will aid in 
explaining the operation of the TRG Status Flags. 


When the device is in IDLE state, it will not request 
program service. All of the device registers are 

functioning; however, so the user may read in the state 

of the Trigger and Latch Flags, as well as set up the 

Lamp Register. The only exception to this is the 

analog trigger input flags, which do not operate unless 
the Analog Trigger Enable flag has been set. 


The user may place the TRG in BUSY state by directing 
either an S pulse or P pulse to the device. If an 
S pulse is used, the Analog Enable Flag is set and both 


8-7 






Trigger Switches and Trigger Inpats are enable for 
( j action. If a P pulse is used, the Analog Trigger 

Enable Flag is cleared and only the Trigger Switches 
are enabled for action. This feature allows the 
program to handle the switches without having to 
process trigger inputs for the analog signals, which 
may occur very often. 

• If the TRG is in BUSY state and any of the Trigger 

or Latch Flags change state (differ from the last 
state update echoed by the program) , then the TRG 
will enter DONE state. Once TRG is in DONE 
the user must echo a new and correct state update 
for the device to return to BHSY state. 

An lORST or C pulse will always return the device to 
IDLE state, as well as clear the Trigger, Latch, and 
Lamp Registers. 

The Interrupt Disable Flag (connected to bit 6, 
mnemonic MSTRG) operates in all respects as described 
in Section 2 of How to Use the NOVA Computers . That 
is, if the device is in DONE state, and Interrupt 
Disable is cleared, the device will request interrupt 
service. 

If the device is in DONE state, it will respond to 
the INTA instruction, returning the device code, "TRG”. 



I 




I 




! 


8 . 5 Progranuning the TRG 

In the simplest case, the user might want to simply 
determine the status of the switches occasionally 
in his program. To do this, he need only execute the 
following sequence, 

DIA 1,TRG ;READ TRIGGER FLAGS 

DOA 1,TRG ;AND CLEAR THEM 

DIB 2, TRG ;READ LATCH FLAGS 

This code will return the status of the Trigger Flags 
in ACl, and the status of the Latch Flags in AC2. 

The 'DOA 1,TRG clears the Trigger Flags every time 
we read them, so that the contents of ACl tell the 
user which flags have been set since the last time 
he read them in. The user need not explicitly start 
the TRG unless he must use the Analog Trigger Inputs. 
In that case, an S pulse must be used to start the 
TRG so that the Analog Trigger Enable Flag will be 
set. 

If in the above example the user wished to provide 
the operator with visual feedback of the status of 
the Trigger Flags, he could simply add a "TOC 1,TRG 
to the sequence. This would light the front panel 
lamp corresponding to every Trigger Flag that was 
set. 

Programming Exeimple 8.1 details a routine which reads 
in the TRG Flags, then encodes unprocessed flags on 
a priority basis. 




I 

I 

I 

’ I 

I 

O 


8-10 

i 

i 

t 


£ 



O 




<56. 1599 > JBW tIBV 2> 1973 PBGE 1 

PROGRftMMING EXRMPLF. 8. 1 
ENCODING THE TRIGGER/LRTCH INPUTS 


RBSTRfiCT ; 


TRGEC' REHDS IN THE CONTENTS OF BOTH 
THE TRIGGER HND LRTCH FLRG REGISTERS 
ERCH REGISTER IS ENCODED RS R BINRRV NUMBER 
REPRESENTING THE BIT POSITION OF THE HIGHEST 
PR I OR I TV FLRG SET. THE PRIORITY DECENDS FROM 
LEFT TO RIGHT IN THE WORD. 

CRLLING SEQUENCE: 

JSR i?=. TRGEC iBRRNCH TO ' . TRGEC^ USING R 

i LOCRL RDDRESS CONSTRNT 
<RETURN> ; RETURN HERE WITH SWITCHES 

; ENCODED. 



THE USER MUST INITIRLI2E THE TRG WITH RN 
lORST OR C PULSE TO CLERR RNV FLRGS SET RT 
POWER TURN ON TIME. . TRGECX DOES NOT SKIP ON 
THE TRG BUSV/DONE FLRGS; BUT RLWRVS ECHOS 
THE LRTEST STRTUS. SO THRT THE USER MRV 
SKIP ON THE B'JSV.''DONE FLRGS. 

RRGUMENTS: NONE. 

RETURNS : 

WHEN THE RETURN IS TRKEN.. RC8 CONTRINS THE 
ENCODED TRIGGER FLRG RND RCl CONTRINS THE 
ENCODED LRTCH FLRG. THE ENCODED TRIGGER FLRG 
IS IN THE RRNGE 0 TO 7, WHILE THE LRTCH FLRG 
WILL BE IN THE RRNGE 0 TO 3. IF THE REGISTER 
IS RLL ONES. THEN NO FLRG WRS SET. 

THE UPDRTED STRTUS IS ECHOED TO THE TRG. 

CLERR I NG RLL FLRGS SET RT THRT TIME THE 
ROUTINE MRINTRINS R CORE COPY OF THE 
STRTUS SO THRT RLL FLRGS WILL BE PROCESSED 
BY THE SOFTWRRE 

TRGEC' SHOULD BE REPERTEDLY CRLlED. UNTIL 
RLL ONES IS RETURNED. INDICRTING 
NO MORE FLRGS TO BE PROCESSED. 

RCCUMULRTORS : 

RLL RC^S RND CRRRY RRE DESTROYED. 

SPEC I RL CONS I DERRT I ONS 

.TRGEC UlES THE '.OR' ROUTINE FROM THE 
DCG MRTH. LB FILE. THUS THE MHTH LIBRRRV 
MUST BE INCLUDED IN THE LORDER COMMRND. 



8-11 


4 


J 


I 


0002 PE8. 1 


> <45. S»81> JbW MHV 2.1^73 P0GE 2 

i 

; PROGRHMMING EXfiMPLE 8. 1 - CONT. 

} 

i ENCODING TRIGGER/LflTCH FLFiGS. 

i 

. TITLE PE8. 1 
. ENT . TRGEC 

. EXTN .OR ;LOGICfiL OR FUNCTION IN MfiTH LB 

. NREL 


a 


00000 054444 .TRGEC; STR 3. SV3. 0 i SAVE RETURN - NOTHING ELSE 


00001' 060437 
00002' 061037 

DIA 

DOA 

0. TRG 
0. TRG 

00003' 0244:27 

LDA 

1. OLDTF 

00004' 006435 

JSR 

eoR 

00005 030433 

LDA 

2. CN8. 

00006' 004412 

JSR 

PRIOR 

00007' 040433 

STA 

0. OLDTF 

00010 054433 

STA 

3. TRNUM 


iGET THE TRIGGER FLAGS 
i CLEAR THE FLAGS IN THE DEVICE 

;GET OLD TRIGGER FLAGS 

>OR THE NEW AND OLD TO GET ALL 
i UNPROCESSED IN ACG 
iGET # OF TRG FLAGS 

i ENCODE BV PRIORTV 

iSAVE OLD TRG FLAGS - I. E. ALL 
i EXCEPT THE ONE JUST ENCODED 
i SAVE ENCODED FLAG # 


00011' 061437 
00012 062037 


DIB 0. TRG 
DOB 0. TRG 


iGET LATCH FLAGS 

i ECHO THEM - DOES NOT Cl FAR THEM 
i BUT LETS USER USE BUSS. DONE 



» THERE ARE NO OLD LATCH FLAGS. SINCE THESE 
FLAGS CORRESPOND TO TRUE PHVSICAL SWITCH 
POSITION. 


00013' 030424 LDA 2. CN4 ; ONLV 4 LATCH BITS 

00014' 004404 JSR PRIOR i ENCODE BV PR I OR I TV 

00015' 165000 MOV 3.1 i RETURN ENCODED LATCH IN ACl 

00016' 020425 LDA 0. TRNUM i RETURN ENCODED TRIGGER IN AC0 

00017' 002425 JMP 9SV3. 0 i RETURN TO CALLER 



! 


) 


0002 


PE8. 1 

i 

i 



i 


i 


<57, 1208 > JBW MflV 2, 1972 PRGE 3 

PROGRHMMING EXAMPLE 8. 1 i 

1 

ENCODING TRIGGERXLftTCH FLRGS ! | 

1 

ROUTINE TO ENCODE fiC0. 


> ftC0 IS SHIFTED TO THE LEFT, UNTIL THE 

; COUNT PHSSED IN RC2 IS EXHAUSTED OR R BIT 

} SET TO "1^ IS FOUND. IF THE COUNT 

; IS EXHAUSTED, RC3 WILL CONTRIN RLL ONES 

; ON RETURN. IF R BIT IS FOUND SET, RC3 WILL 

; CONTRIN THE # OF ITS BIT POSITION. THE 

; BIT FOUND IS CLERRED FROM RC0, WHICH IS 

; RETURNED WITH RLL OTHER BITS UNMODIFIED. 


00020 054425 PRIOR; 
00021' 040425 


STR 3, SV3. 1 
STR 0, SV0. 1 


;SRVE RETURN RDDRESS 
; SRVE RC0 FOR RETURN 


00022' 176400 
00022' 126220 


SUB 3,3 
RDC2R 1, 1 


00024' 101122 LP: MOVZL 0, 0, SZC 


i 

00025 000407 

JMP 

ONEFND 

[ 

00026' 175400 
00027' 125220 

INC 3, 3 
MOVZR 1, 1 

1 

1 

j 

00030' 151404 
00031' 000'7V’3 

INC 

JMP 

2, 2, SZR 
LP 

1 

00032' 176000 
00032' 002412 

RDC 

JMP 

3, 3 
0SV3. 1 


00034' 020412 ONEFND : 
00035' 123400 

LDR 

RND 

0, SV0. 1 
1.. 0 


00036' 002407 

JMP 

0SV3. 1 


;STRRT RT BIT POSITION ZERO 
;MRKE R MRSK WITH BIT0 » 0 
;RLL OTHERS » 1 
iSKP IF '0 FOUND 
jJMP IF R '1' THERE 

i COUNT OFF ONE MORE BIT POSITION 
i SHIFT MRSK OVER, RDDING ZEROS 

;SKP IF TESTED RLL BITS 

iNO - LOOK RT NEXT BIT POSITION 

; NOTHING FOUND - FLRG IT 
; RETURN 

;QET ORIGINRL BIT PRTTERN 
;MRSK OUT BIT WE FOUND, OTHERS 
; LEFT RLONE 
; RETURN 


CONSTHNTS RND WORKING SPRCE 




00037' 177774 
00040 177770 
00041' 177777 

CN4 : 
CN8. : 
OR: 

-4 

-8. 

. OR 

>FOUR LRTCH BITS 
; EIGHT TRIGGER FLRGS 
>LOGICRL OR ROUTINE 


00042 000000 
000001 

OLDTF ; 
TRNUM : 

0 

. BLK 1 

; THE LIST OF TRG FLRGS 
; TEMP FOR ENCODED TRG 

NOT PROCESSED VET 

# 

000001 

000001 

000001 

SV3. 0; 
SV3. 1: 
SV0. 1: 

. BLK 1 
BLK 1 
. BLK 1 

; SRVE RRER 



. END 


Of 


Q^i 


fa 


8-13 



**“eding page blank 


Not fumbd 


i00i . miN 


<52/ 1556 > JBW 11/26/71 

JBW 12/15/72 


r 




i 


I 

i 

I 




> 

; CBL NOVfi ftSSEMBLV DEFINITIONS 

; THIS TftPE DEFINES THE SPECIHL SVMBOLS REQUIRED 

; TO REFERENCE THE flNHLOG INTERF'^CE RS WELL RS 

J R FEW CONVIENT INSTRUCTION CODES NOT PROVIDED 

; IN THE STRNDRRD DOC RSSEMBLER. 


i RNRLOG INTERFRCE DEVICE DEFINITIONS 

i NOTE THRT BV CHRNGINQ ONLV THE VRLUE 

t OF ^RIN'/ RLL OTHER DEVICES RRE 

/ riRPPED TO THE CORRECT RDDRESS RRNGE. 


000031 

. DUSR 

BIN »31 

iBNBLOG INPUT 

000032 

. DUSR 

HRC -fiIN+1 

;HIGH RESOLUTION CLOCK 

000033 

. DUSR 

flOUT-HRC+1 

i DUBL CHBNNEL BNBLOG OUTPUT 

000034 

. DUSR 

DISP-fiOUT+1 

iX-V DISPLBV 

000035 

. DUSR 

CHRR-DISP+1 

;CHBRBCTER GENERBTOR 

000036 

. DUSR 

GPR =CHFlR+l 

;GENERBL PURPOSE REGISTER 

000037 

. DUSR 

TRG -GPR+1 

/ TRIGGER INPUTS 

000074 

. DUSR 

LINC=74 

>LINC TBPE DRIVE 


J 

MBSK DEFINITIONS FOR BLL DEVICES 

100000 

. DUSR 

MSDCtI »1B0 

/DBTB COMMUNICBTIONS MULTIPLEXER 

100000 

. DUSR 

MSB IN =1B0 

> BNBLOG INPUT 

040000 

. DUSR 

MSHRC »1B1 

/HIGH RESOLUTION CLOCK 

020000 

. DUSR 

MSB0UT«1B2 

> BNBLOG OUTPUT 

010000 

. DUSR 

MSDISP=1B3 

iX-V DISPLBV 

010000 

. DUSR 

MSCHBR=1B3 

/CHBR GENERBTOR 

004000 

. DUSR 

MSLINC=1B4 

;LINC TBPE 

002000 

. DUSR 

MSGPR =1B5 

/GENERBL PURPOSE REGISTER 

001000 

. DUSR 

MSTRG =1B6 

i TRIGGER INPUTS 

000400 

. DUSR 

MSDKP =1B7 

i MOVING HEBD DISK 

000200 

. DUSR 

MSBDCV-1B8 

/DCG B/D CONVERTER 

000100 

. DUSR 

MSDSK =1B9 

; DISK 

000040 

. DUSR 

MSMTB =1B10 

/MBG TBPE 

000040 

. DUSR 

MSCDR =1B10 

/CBRD REBDER 

000020 

. DUSR 

MSPTR =1B11 

/PHPER TBPE REBDER 

000010 

. DUSR 

MSMCBT»1B12 

/MULTIPROCESSOR TRBNSMITTER 

000010 

. DUSR 

MSMCBR»1B12 

; MULTIPROCESSOR RECEIVER 

000010 

. DUSR 

MSPLT «1B12 

/ INCREMENTBL PLOTTER 

000010 

. DUSR 

MSLPT =1B12 

/LINE PRINTER 

000004 

. DUSR 

MSPTP =1B13 

jPBPER TBPE PUNCH 

000004 

. DUSR 

MSRTC =1B13 

/REBL TIME CLOCK 

000002 

. DUSR 

MSTTI =1B14 

/ TELETVPE INPUT 

000002 

. DUSR 

MSBHM =1B14 

/BSVNC. HBRD. MULTI. 


A-2 

. 1 i-J 




I 



<• 








<57, 1562 > JBW 11/26/71 

. RDX 2 >RLL RRE BIT PHTTERNS 

RIN CONTROL REGISTER BITS 

000020 . DUSR RINSCRN »1B11 ; SETS RIN IN RUTO SCRN MODE 

; 55 "0 IN BIT 11 SELECTS 
i NON SCRN MODE. 

000000 .DUSR RINSP =00 > SELECTS S PULSE CONVERT COMMRND 

000001 .DUSR RINHRC =01 ; SELECTS HRC OVERFLOW 

000003: .DUSR R I NEXT =11 > SELECTS EXTERNAL CONTROL PULSE 

i HRC CONTROL REGISTER BITS 

000020 . DUSR HRCOVFL =1B11 i ENABLES OVERFLOW TO SET DONE 

; R '0" SUPPRESSES OVERFLOW FLAG 
000010 . DUSR HRCEND -1B12 ; ENABLES EXT. END. TO SET DONE 

; R "0 SUPPRESSES END FLAG 
000004 . DUSR HRCEX T «1B13 i SELECTS EXT. CLOCK 

i fi 'B' SELLECTS THE INTERNAL 
i IMHZ. CRYSTAL CLOCK 


ROUT CONTROL REGISTER BITS 


000000 

. DUSR 

ROUTSP 

=00 

; SELECTS 

S PULSE AS CONVERT COM. 

000001 

. DUSR 

ROUThRC 

=01 

; SELECTS 

HRC 

000002 

. DUSR 

ROUTTRK 

=10 

> SELECTS 

TRACK MODE 

000003: 

. DUSR 

ROUTEXT 

all 

; SELECTS 

EXT. CONTROL LINE 


; DISP CONTROL REGISTER BITS 



000000 

. DUSR 

DISPSP 

=00 

i SELECTS S PULSE TO INTEN BEAM 


000001 

. DUSR 

DISPHRC 

=01 

; SELECTS HRC OVERFLOW 


000002 

. DUSR 

DISPTRK 

=10 

> SELECTS TRACK MODE 


00000? 

. DUSR 

DISPEXT 

=11 

i SELECTS EXT. CONTROL LINE 


004000 

. DUSR 

DISP0 

=1B4 

} SELECTS X-V CHAN 0, BV 


002000 

. DUSR 

DISPl 

=1B5 

; CONVENTION THE SMALLEST XV 
i SCOPE ON THE SYSTEM. 

;CHAN1, BV CONVENTION THE 


001000 

. DUSR 

DISP2 

=1B6 

; LARGER SCOPE, IF A TWO 

; SCOPE SYSTEM 

iCHAN2, BV CONVENTION THE 


000400 

. DUSR 

DISP3 

=1B7 

; HARDCOPY XV PLOTTER. 
} CHAN3 


000040 

. DUSR 

PENDWN 

=1B10 

) PUTS PEN DOWN ON PLOTTER 


000000 

i 

. DUSR 

CHARACTER GENERATOR SIZE CONTROL 

CHARS =00B7 ; SMALL CHARACTERS - DOT SPACING 


000400 

. DUSR 

CHARM 

=01 B7 

i OF 2. 

; MEDIUM CHARACTERS - DOT SPACING 


001000 

. DUSR 

CHARL 

=10B7 

} OF 3. 

i LARGE CHARACTERS - DOT SPACING 


; OF 6. 


A- 3 




0003 . MRIN 



; <52, 1303> JBW 11/26/71 

; 4/27/73 

i SPECIRL INSTRLICTION DEFINITIONS 

000010 . RDX 8 i BRCK TO NORMRL 

; SINGLE INSTRUCTION SIGNED RRITHMETIC 

; COMPRRISONS 








} WRRNING 

i THESE SIGNED TESTS ONLV WORK IF THE 

; SIGNED RESULT IMPLIED BV THE DEFINITION 

; CRN BE REPRESENTED IN 16 BITS. FOR . 

i EXRMPLE, IN THE TEST ' SLE' fi SUBTRRCTION 

; IS REQUIRED. IF THE SOURCE WERE -32767 

; <100001 OCTRL> RND THE DESTINRTION WERE 

i 1 <000001>, THEN THE RESULT OF fi 'SUB S, D 

; WOULD BE -32768 <100080) DUE TO LOSS OF 

; THE SIGN BIT DURING THE OPERRTION. 

i IN THIS CfiSE THE SKIP WOULD FRIL. 


I 

I 

! 

i 

t 

i 

t 

! 


i 

i 


! 


THE GENERRL RULE IS THRT THE TRUE 
RESULT OF THE OPERRTION USED IN THE 
TEST MUST FALL IN THE RANGE -32768 TO 
32767. 


102512 

. DRLC 

SLE=SUBL# 

0, 0, SZC 

i SKIP 

IF 

S 

<= D 

102513 

. DRLC 

SGT=SUBL# 

0, 0, SNC 

i SKIP 

IF 

S 

> D 

102414 

. DRLC 

SEQ=SUB# 

0, 0, SZR 

; SKIP 

IF 

s 

= D 

102415 

. DRLC 

SNE=SUB# 

0, 0, SNR 

> SKIP 

IF 

s 

NOT= D 

102112 

. DRLC 

SLT=RDCL# 

0, 0, SZC 

> SKIP 

IF 

s 

< D 

102113 

. DRLC 

SGE=RDCL# 

0, 0, SNC 

i SKIP 

IF 

s 

>a D 


o f 


102432 . DRLC 
102432 . DRLC 
102032 . DRLC 
102022 . DRLC 


SINGLE INSTRUCTION UNSIGNED RRITHMETIC 
COMPRRISONS 

I 

THESE COMPRRISONS WORK FOR ALL 16 BIT = 

UNSIGNED NUMBERS. ! 

I 

USLE=SUBZ# 0, 0, SNC i SKIP IF S <= D \ 


LISGT=SUBZ# 0, 0, SZC 
USLT=RDCZ4 0, 0, SNC 
USGE=RDCZ# 0, 0> SZC 


jSKIP IF S > D 
; SKIP IF S < D 
;SKIP IF S >= D 


; R NO OPERRTION INSTRUCTION 

100010 . DUSR NOP=COM# 0,0 ;R NULL RRITH. INST. 
. END 


A- 4 


L 


o 




o 


APPENDIX B 

GENERAL PHYSICAL AND ELECTRICAL SPECIFICATIONS 


i 

i 


■ 

i 





r 


Characteristic 


Specification 


Comments 


Physical Specifications: 


Dimensions 

Height 

Width 

Depth 


5-1/4 inches 
8-1/2 inches 
17 inches 


Electrical Specifications: 

Line Voltage 105 to 130 VAC 

Line Frequency 50 to 1000 Hz. 


0 

Unit is designed to rack 
mount in a Tektronics 
5-1/4-inch rack mounting 
adaptor for Type 601 or 602 
Displays. Tektronics Part 
Number 016-0115-02. 


Line voltage and frequency 
specifications are those j 

quoted by power supply | 

manufacturer. * I 


Fusing 


2A, Fast Blow 


Fuse type AGC 2. 


Line Power Control 
ON 
OFF 
AUTO 


Power On 
Power Off 

Power controlled by 
NOVA I/O Bus power 
flag. 


Set by switch on rear 
connector panel. Some units 
may not have the AUTO power 
logic installed. For these 
units, it is recommended 
that the unit be plugged into ^ 
the NOVA switched line outlet,/*| 
and left in the ON position. 


Line voltage appears here 
whenever the interface has 
internal power. It is re- 
commended that the cooling 
fan be powered by this outlet. 

Mounting and Ventilation: 

For proper cooling, a 50 to 100 cubic feet per minute fan must be 
provided to ventilate the unit. The fan should be mounted so as to 
displace air past the power supply and/or through the cards. In 
order to facilitate ventilation, free airspace must be provided above 
and/or below the unit. 


Switched Outlet 


1/4 Amp maximum, at 
line voltage and 
frequency . 



B-2 


O 




C.l Driving and Receiving External Lines 


All logic levels in the Analog Interface are standard 
TTL levels; the standard load is one Texas Instru- 
ments 7400 series load of 1.6mA. 


In order for the user to interface special devices 
to the Analog Interface, he must make up cables for 
the various logic signals involved. Since all the 
signal lines will, of necessity, be several feet in 
length, proper consideration must be given to term- 
ination of the signal lines. All signal lines should 
be twisted pairs, with the ground side of the pair 
brought to ground at both ends. 


If the user is receiving a signal line from the Ana- 
log Interface, he must terminate the line to assure 
proper operation. The following termination scheme 
is recommended for signal lines specified as capable 
of driving 30 TTL loads (48 mA) . _ ^ j .c 


Bypassing 


Pair Ground 


This method provides a termination for the line and 
good noise margins. Particular care should be taken in by- 
passing the receiver and termination resistors. At least 0.03/iF 




should be alloted for every four outputs at the re- 
ceiver, while the termination resistors should have 
at least 0.01 /af per eight lines. The capacitors 
must be RF quality such as disk ceramics, and mounted 
as close to the device being bypassed as possible. 


While it is acceptable to use a two input gate as 
a receiver by tying both inputs to the signal line 
it is not recommended that any gating functions be 
preformed on the signal by the receiver. 


For signal lines specified as capable of driving 10 
standard loads, the following terminations scheme is 
recommended; q Logic +5 


330JL 


Pair Ground 


Loqic Ground 


As for the previous termination, special attention 
should be placed on bypassing the receiver and term 
ination resistors. 


It is very important to carry the ground line of the 
pair as directly as possible to the receiver ground. 
The receiver will, of course, be grounded to the logic 
around in the users' device. 






If the user is driving lines into the Analog Inter- 
face, he need not terminate them, since the Analog 
Interface internally terminates input lines. From 
the signal specification charts, the user can deter- 
mine the drive capability required of his circuitry 
by the Analog Interface. Recommended line drivers 
are 7437's, 7438's, 75451's, or 75452's. The ground 
line of the pair the user is driving should be brought 
to the ground of the driver package. All packages 
driving lines should have 0.1/4F bypassing capacitors 
within 1-1/2 inches of the package. 

While the above guidelines recommend that the ground 
line of each twisted pair be brought through to the 
receiver and driver ground, this is not always prac- 
tical . The user should provide as many ground con- 
nectors into the logic card as practical to prevent 
problems with inadequate ground returns. 




o 



C-4 


C.2 HRC Signal Specifications 


Signal 


Characteristics 


HRC EXTERNAL 
CLOCK* 


Pulse width 
repetition rate 
loading . 


O HRC EXTERNAL 
ui END* 


Pulse width 
loading 


HRC OVERFLOW 
PULSE* 


Pulse width 
drive 



This signal is selected as 
the basic reference clock by 
HRCEXT mode. This is an edge 
clocking signal, active on 
the high (+5 V) to low (0 V) 
transition. Available at TRG 
connector and NOVA backpanel 
pin B51 on the Analog Interface 
slot. 

^0.25/^Sec. This signal is enabled for 

30 TTL loads control by HRCFND mode. This 

is an edgeclocking signal, 
active on the high (+5) to 
low (0 V) transition. Avail- 
able at TRG connector and NOVA 
backpanel pin B53 on the 
Analog Interface slot. 

0.25 to 0.75>Asec. This pulse is generated by every 
30 TTL loads overflow of the Counting Regi- 

ster. Available at NOVA back- 
panel pin B49 on the Analog 
Interface slot. 


2: 0.25/<<Sec 
i*l ^^H2 
30 TTL loads 




Conunent 


Front Panel 
Analog Inputs 


Valid Input 
conversion range 


Continuous gain control (0.5 to 10) 
allows scaling of input signal to 
nominal 1 2 V channel multiplexer 
range . 


Inputs are protected against 
excessive input voltages by 
f usable resistors. If the 
input exceeds this range for 
a substantial period, the input 
line will be opened to protect 
the amplifier. 


maximum continuous 
input level 


Input DC Resistance 10 M ohms - 10% 
signal in range 
- 12 volts . 

signal exceeds 3 K ohms 

range i 12 volts. 


Input protective circuit begins 
to affect input impedance at 
about ± 12 volts. Protective 
circuits are after coupling 
capacitors . 


Offset is summed with input 
signal after coupling, but 
before gain control. 


Gandwidth 
DC coupled 
gain = 1 
gain = 1 
AC coupled 
gain = 1 
gain = 1' 


10% to 90% points, unity gain 
4 volt steph. 


C.3 AIN Signal Specifications Continued 


Conunent 


Signal 

Rear Panel Ana- 
log Inputs 


AIN EXTERNAL 
STROBE* 


Characteristic Specification 

Valid Input - 2 volts Precise range determined by 

conversion range gain adjustment on analog to 

digital converter. Nominal 
least significant bit is 4 mV. 


All other Rear Panel Analog Input Specifications are the 
same as those of the Front Panel Analog Inputs, with the 
exceptions that there is no offset adjustment and band- 
width is specified only for DC coupling at unity gain. 


Width 

Loading 


^0.25/<<sec. This signal is selected to 

30 TTL loads initiate conversions by the 

AINEXT mode. This is an edge 
clocking signal, active on 
the high ( +5 V) to low (0 V) 
transition. 


n 

I 



0 


Coimnents 



Minimxun load for specified 
output range is IK ohms. The 
specifications are those of 
the LM310 followers used. Settling 
time will vary with caddie capacitauice 
on the output. 


This signal may be selected to 
initiate a conversion by 
AOUTEXT mode. The high (+5 v) 
to low (0 V) transition on 
this line initiates the output 
conversion. 


r 


y 



I 


4 


t 

i 




C.5 DISP Signal Specifications 
Signal Characteristic 


X & Y Analog 
Output 


Range 

Output impedance 
Output current 
Settling time 


INTEN 


pulse width 
drive 


0 

1 

VO 


INTEN* 


XY SELECT 


drive 


XY OPTION 
ENABLE 


drive 


XY EXTEND* 


loading 


Specification 

±2 Volts 
2 . 5 ohms 
±2 mA 
'^/Usec. 


4 to 20/^sec. 
30 TTL loads 


10 TTL loads 


10 TTL loads 


30 TTL loads 




Comments 

Minimum load for specified 
output range is IK ohms. The 
specifications are those of the 
LM310 followers used as output 
buffers. Settling time will 
vary with cable capacitance 
on the output. Every display 
channel has independent output 
buffers so these specifications 
apply to each output connector 
X-Y signals. 


Adjustable to suit the 
standard highspeed display 
device in the system.. 

Complement of INTEN, same 
specification. 

This line is activated by the 
corresponding bit in the DISP 
Control Register. 

This line is activated by the 
corresponding bit in the DISP 
Control Register. 

Driven by user device interface 
to extend plotting cycle. 

Must be driven by an open col- 
lector gate. For the extend 
function to operate, the user 
must activate this line at least 
2'<*sec. before the end of INTEN. 
The device may hold the line 
active as long as required. A 
new plot cycle may start within a 
few microseconds after the release 
of this line. 


0T-; 


C.5 DISP Signal Sepcifications Continued 


Signal 
XY WAIT* 


DISP EXT 
STROBE* 


0 


Characteristic 

Loading 


Pulse width 
loading 


) 


Specification 
30 TTL loads 


^ 0.25^<^sec. 
30 TTL loads 



Comments 


Driven by the user device inter- 
face to inhibit changes in the 
X-Y analog output signals. Must 
be driven by an open collector 
gate. In normal operation, the 
DISP logic will wait Sy^sec. 
after a change in the Control 
Register (SELECT & OPTION) before 
chemging the X-Y analog outputs. 

If the user device activates XY 
WAIT within 3/<fsec. after a change 
in XY SELECT or XY OPTION ENABLE, 
he may extend the normal 5/^ec. 
waiting period as required for the 
device. The user may also acti- 
vate XY WAIT at any time to 
suppress changes in the X-Y analog 
outputs. Note that a change in 
X and Y could have started just 
before the user activated the XY 
VJAIT line. In this case, the X 
and Y outputs would settle to the 
new position, then remain fixed 
until XY WAIT was released by the 
Interface. If activation of XY WAIT 
is not synchronized with changes 
in XY OPTION ENABLE, then it is 
possible for one INTEN Pulse to start 
within 2-^sec. after XY WAIT is 
activated. 

This signal may be selected to 
initiate a conversion by DISPEXT 
mode. The high (+5 V) to low ((J V) 
transition on this line initiates 
the conversion. 







TT-i 


4 



C.6 GPR Signal Specifications 


Char acteristic 
Width 

Repetition rate 
Loading 


Width 

loading 


Signal 
USER COUNT* 

USER STRB* 


O 


REGRST* Width 

Loading 


USER DEV COM* Width 

Loadirg 


I 



Al VI 




0.25/^ec. 
2 M Hz 
30 TTL loads 


>0.25yAsec. 
30 TTL loads 


^ 0 . 25/Ccsec. 
30 TTL loads 


^0 .25/^ec. 
30 TTL loads 


Comment 

A pulse on this line causes the 
Input Register to increment 
on the high (+5 V) to low (0 V) 
transition of this line. 

A pulse on this line strobes 
the DATAIN Lines into the Input 
Register. The DATAIN lines 
must be at the correct value 
at the start of USER STRB, 
and must be held at the correct 
value for 0.25/*sec. after 
USER STRB ends. A USER COUNT 
pulse cannot occur for 0.25/^sec. 
after the end of USER STRB. 

A pulse on this line resets 
the Input register to all zeros. 

A USER COUNT cannot occur for 
O.LX^sec. after the end of 
REGRST.. 

If GPR BUSY is set, a pulse on 
this line sets DONE and clears 
BUSY. The transition from 
high (+5 V) to low (0 V) on 
this line clocks the GPR status 
change. 





o 


Comments 


All of these signals are derived 
from the corresponding NOVA 
Bus signals gated with GPP 
select on the NOVA I/O Bus . 

Their precise timing is depend- 
on the host NOVA processor. 


see How to Use the NOVA Com - 
puters for detailed timino. 


These signals reflect the 
Current Status of the GPP 


¥ 




r 


ex- 



I n 


' i 

C.7 TRG Signal Specifications 


Signal 

Front Panel 
Analog Trigger 
Inputs 


Characteristic 

Input 

Usable Range 


Specifications 
20 volts p-p 


Maximum Continuous t 30 volts 
Input level 


Trigger Level Range t 5 volts 
Hysteresis Level ^0.25 volts 


Trigger Rate >250 K Hz. 

Input DC Resistance 

Signal in range 10 M ohm^ il0% 

± 12 volts. 


Signal exceeds range 
of ^ 12 volts. 

BUFFERED TRIGGER Drive capability 
4-7* 


> 3 K ohms 
30 TTL Loads 



Comments 


This assumes signal swing is 
sufficient to drop below the ■ 

trigger level setting. If E)C I 

coupled, this range is centered ’ 

around zero. 

Inputs are protected against 

excessive voltages by fusable i 

elements. If the input exceed j 

this range, the input line j 

may be opened. | 

i 

Continuously adjustable ! 

p-p signal level must exceed 

this level for proper trigger- i 

ing. 

1 volt p-p square wave. i 

Input protective circuit begins 

to affect input impedance at 

about i 12 volts. Protective 

circuits are after coupling ! 

capacitors. 


These signals are the buffered 
outputs of the Analog Trigger 
Inputs 4-7. For example, while 
Trigger Input 5 exceeds the thresh- 
hold set by the user; then the 
BUFFERED TRIGGER 5 will be active 
(0 V.). They are not the equivalent 
to the Trigger Flags which remain 
set until cleared by program. 



C.8 GPR Input Connector 




The GPR Input Connector is J001. 

A Cannon 2DA31P is required for User Interface. 

Connector Signal 

Number Name 



i 


1 

2 

3 

4 

5 

6 

7 

8 
9 

10 

11 

12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29 

30 

31 


DATAIN 0* 

DATAIN 1* 

DATAIN 2* 

DATAIN 3* 

DATAIN 4* 

DATAIN 5* 

DATAIN 6* 

DATAIN 7* 

DATAIN 8* 

DATAIN 9* 

DATAIN 10* 

DATAIN 11* 

DATAIN 12* 

DATAIN 13* 

DATAIN 14* 

DATAIN 15* 

GPR BUSY 
GPR DONE 

USER DEVICE COMPLETE* 
Not Used 
Logic Ground 
+5 Volt Power Flag 
USER STROBE* 

USER COUNT* 

REGRST* 

GPR Die 
Not Used 
GPR C Pulse 
GPR S Pulse 
GPR P Pulse 
Not Used 




O 





! 

m 

C-14 





C.9 GPR Output Connector 


The GPR Out Connector is J002, 

A Cannon 2DA31P is required for user interfacing 


Connector 

Number 


Signal 

Name 


In/Out 


DATAOUT 0* 
DATAOUT 1* 
DATAOUT 2* 
DATAOUT 3* 
DATAOUT 4* 
DATAOUT 5* 
DATAOUT 5* 
DATAOUT 7* 
DATAOUT 8* 
DATAOUT 9* 
DATAOUT 10* 
DATAOUT 11* 
DATAOUT 12* 
DATAOUT 13* 
DATAOUT 14* 
DATAOUT 15* 

GPR BUSY 

GPR DONE 

USER DEVICE COM* 

Not Used 

Logic Ground 

+5 Power Flag 

Not Used 

GPR DOB 

GPR DOC 

Not Used 

Not Used 

GPR C PULSE 

GPR S PULSE 

GPR P PULSE 

Not Used 


r 




C.IO TP.G Connector 


The TRG connector is J006. 

A Cannon DAC15P is required for user interface. 


Connector 

Number 


1 

2 

3 

4 

5 

6 

7 

8 
9 

10 

11 

12 

13 

14 

15 


In/Out 


0 

0 

0 

0 

0 


I 

I 

I 

I 

I 


Signal 

Name 


Not Used 
Not used 
Not Used 
TRIGGER 4* 

TRIGGER 5* 

TRIGGER 6* 

TRIGGER 7* 

+5 Volt Power Flag 
Logic Ground 
DISP EXT STROBE* 
AIN EXT STROBE* 
AOUT EXT STPOBE* 
BHRC EXT CLK* 

BHRC EXT END* 

Logic Ground 


♦ j 


*■ 


O 



C.ll AIN Connector 


1 

The AIN Connector is J008. 


Cannon 2DA31P is 

required for User 

Interface. 

Connector 


Signal 

Number 

In/Out 

Name 

1 

I 

Analog Channel 8 

2 

- 

Ground for Above 

3 

I 

Analog Channel 9 

4 

- 

Ground for above ' 

5 

I 

Analog Channel 10 

6 

- 

Ground for above 

7 

I 

Analog Channel 11 

8 

- 

Ground for above 

9 

- 

Logic Ground ' 

10 

I 

AIN EXT STROBE* 

11-21 

- 

Not Used 

22 

I 

Analog Channel 12 

23 

- 

Ground for above 

24 

I 

Analog Channel 13 

25 

- 

Ground for above 

26 

I 

Analog Channel 14 

27 

- 

Ground for Above 

28 

I 

Analog Channel 15 i 

29 

- 

Ground for Above 

30 

- 

Logic Ground 

31 

0 

+5 Volt Pov/er Flag 




f 



C-17 


C.12 AOUT Connector 


The Aout Connector 

is J009. 


A Cannon DAC15P is 

required for user 

interface. 

Connector 


Signal 

Number 

In/Out 

Name 

1 

0 

Analog Channel A Output 

2 

- 

Ground for Above 

3 

- 

Ground for Channel X 

4 

- 

Analog Channel X Output 

5 

- 

Logic Ground 

6 

- 

Not Used 

7 

0 

+5 Volt Power Flag 

8 

I 

AOUT EXT STROBE* 

9 

0 

Analog Channel B Output 

10 

- 

Ground for Channel B 

11 

- 

Ground for Channel Y 

12 

0 

Analog Channel Y Output 

13 

- 

Logic Ground 

14 

- 

Not Used 

15 

I 

DISP NEXT STROBE* 



O 




4 


C.13 DISP Connectors 

The channel 0 DISP connector is J010. 

The Channel 1 DISP connector is J011. 

The Channel 2 DISP connector is J012. 

The Channel 3 DISP connector is J(I13. 

A Cannon 2DA31P is required for user interface. 


Connector 


Signal 

Number 

In/Out 

Name 


1 

- 

Ground for Channel X 

2 

0 

Channel Y 

3 

- 

Ground for Channel Y 

4-5 

- 

Not Used 

6 

I 

XY EXTEND* 

7 

0 

XY SELECT 

8-9 

- 

Not Used 

10 

0 

XY OPTION ENABLE 

11 

0 

Channel X 

12 

- 

Ground for Channel X 

13 

- 

Ground for Channel Y 

14-19 

- 

Not Used 

20 

- 

Logic Ground 

21 

- 

Logic Ground 

22 

- 

Ground for Channel X 

23 

0 

Ground for Channel X 

24 

- 

Ground for XY INTEN 

25 

0 

XY INTEN* 

26 

- 

Logic Ground 

27 

- 

Logic Ground 

28 

- 

Not Used 

29 

I 

DISP EXT STROBE* 

30 

I 

XY WAIT* 

31 

0 

+5 Volt Power Flag 


C-19 




-20 


C.14 


Connector Hardware and Tools 



CONNECTOR 

SHELLS AND HARDWARE 


Sliding Lock 

Replacement 

Connector 

Metal Shell 

Plastic Shell 

Retainer 

Contacts 

2DA31P 

DA24658 

DA51210-1 

DA51220-1 

031-9540-000 

DAC15P 

DA24658 

DA51210-1 

DA51220-1 

030-1952-000 


TOOLS FOR 

CONNECTORS 

Insertion/ 

Connector 

Crimp Tool 

Extraction Tool 


2DA31P CCT-CTA CIET-CTA-2 

DAC15P MS3191-1 with CIET-20HDB (expendable, order several) 

locator P-20-3191-37 

I 

SUBSTITUTE CONNECTORS 

A solder version of the DAC15P connector is available under the part number DA-15P 
(Cannon or Cinch) . 


0 . o 






I 

1 


! 


T 

i 

t 


CBL/NOVA RTBASIC 

USER MANUAL AND 
PROGRAMMING GUIDE 


April 1973 

f 


B 

J 


Bioengineering Group 
Communications Biophysics Group 
Research Laboratory of Electronics 
Massachusetts Institute of Technology 




Copyright 1973 
All Riahts Reserved 


deciding page bunk not maa 


Gaiman 
B. Walters 





^ C_' 


Ll 


CBL/NOVA RTBASIC 


USER MANUAL AND 
PROGRAMMING GUIDE 


April 1973 


B. Gaiman 
J. B. Walters 


Bioengineering Group 
Communications Biophysics Group 
Research Laboratory of Electronics 
Massachusetts Institute of Technology 


Copyright 1973 
All Riahts Reserved 


TABLE OF CONTENTS 


Introduction 1 

Operation 2 

Description of RTBASIC statements 3 

I/O 4 

General Purpose Digital Register 11 

Real Time Clock 15 

Character Generator 16 

CRT Displays and Plotter 17 

Digital to Analog Output Channels 21 

Signal Processing Functions 23 

Analog to Digital Convertor 25 

Multi-level interrupt System. 28 

User Subroutines CALL statement 30 

Appendix A 32 

Writing Assembly Language Subroutines 

for RTBASIC 32 

Example of an RTBASIC Subroutine 45 

Appendix B 48 

Short Summary of RTBASIC Statements 48 

Appendix C 50 

RTBASIC Error Messages 50 

Appendix D 53 

RTBASIC Keyboard Commands 53 

Appendix E 54 

Programming Tips for RTBASIC 54 



1 

j 

1 

i 

i 


INTRODUCTION I 

RTBASIC is an augmented version of the BASIC Programming 

language which allows the user to control the operation 

of hardware connected to the Nova to process signals and 

display them in real time. These additions give the user 

flexible control over the hardware without complex machine- 

language programming in the same manner that arithmetic 

operations can be performed in BASIC . With RTBASIC , a 

user can sample analog signals, generate analog signals, 

use a real-time clock, and a general purpose digital 

register. Signals can be displayed on a CRT or on an X-Y 

plotter. Interrupts can be generated by externally sup- j 

plied signals which will cause transfers of control in 

RTBASIC. Included are signal processing tools, such as a I 

Fast Fourier Transform (FFT) . 

. 1 

Features have also been included in RTBASIC to make | 

programming easier. The disk and all devices implemented | 

in the operating system can be used for I/O, and RTBAS IC | 

programs and PRINT statements can be displayed on the f 

X-Y displays. The CALL statement has been added in | 

RTBASIC to enable the user to call assembly language j 

subroutines from a RTBAS IC program. ; 


1 



OPERATION 


RTBASIC exists as a save file on the operating system 
In order to run RTBASIC the user types: 


The system will then respond 


RTBASIC (date) (operating system) 


Where (date) is the date of the last revision, and (op- 
erating system) is the specific operating system on which 
the version of RTBASIC runs, after this message, the user 
can oroceed to enter and run RTBAS IC programs . 


The I/O section of this manual describes how to store 
and retrieve data and programs on the operating system 


DESCRIPTION OF RTBASIC STATEMENTS 


The reader should be familiar with the BASIC language and 
Data General's BASIC interpreter.* The following descrip- 
tions contain the format of the statement, the types of 
arguments allowed, and the results of executing the state- 
ment. The following notation is used to describe state- 
ment format : 

A indicates a choice between A or B in a 

B staterrant and, 

[C] indicates the optional presence of C 

in a statement. 

For example : 


would allow: 


in a legal statement. The symbols A, B, and C may be 
expressions, strings, simple variables and arrays. These 
are described and defined in Data General's BASIC Manual. 

The short summary of RTBASIC statements comprising Appendix 
B contains examples of actual statements. 

* Single User BASIC , 093-000042-00, Data General Corp., 1970. 


3 



Several statements have been added and modifications have 


been made to allow RTBASIC to run on the disk operating 
system. These changes enable the user to store and re- 
trieve RTBASIC programs (which exist as ASCII files on 
the operating system), to print and input ASCII data files, 
and to write and read arrays as random records. 

The following changes have been made to increase com- 
patibility with the operating system; 


to delete the previous character typed, the rubout 
key is used and a (back arrow) is echoed on the 
terminal; 

in order to delete the current line of input, a 
shift L is typed and a \ (back slash) is echoed; 

the keys CNTRL A and CNTRL C will cause the approp- 
riate breaks according to the specific operating 
system. 

The following are new RTBASIC statements: 

OPN 


i 


The OPN statement allows a file or device to be opened 
for use with the LIST, PRINT INPUT or RAND statements. 
OPN can be used either as a keyboard command or in a 
program statement. 


OPN 


" Filt lame 
device 


n 


v-ill open the file (named filen 2 une) or device (e.g. $PTR 
or $LPT) on channel n (n is an expression with a value 
of 0 thru 7) , If the file does not exist, it will be 
created. 




4 


t 


! 


i 


I 


CLS 

The CLS statement closes a file or device. 

CLS n 

closes the file associated with channel n. This state- 
ment can be used a keyboard command or as a program 
statement. 


PRG 


The PRG command is used to read a previously saved RTBAS IC 
program from a file or device in the following format: 


PRG 


It 


Fileneime 

Device 


It 


If another program was running previously, a NEW command 
should be issued before PRG. The NEW command will delete 
all progrcim statements. The PRG statement can also be 
used in a program. When it is executed in a program 
statement, PRG will overlay RTBAS IC program statements 
or call in additional RTBAS I C statements while still run- 
ning since PRG does not automatically do a NEW command. 
However, if PRG is used to overlay program statements, 
care should be taken so the line numbers of the new state- 
ments and the statements being overlaid match. 


- 5 - 


c;) 



I 1 




I 


t 


jJ 


RAND 


If 


L 

\ 


i 

j. 


I 

4i 



This statement allows an array to be read from or written 
into a random file in binary form. The format of the 
statement is as follows: 


RAND 


JHN n,A,R, 



In this statement, n is the channel number of a previously 
opened file, A is the array, R represents the initial 
record number, and the last argument, "W" or "R", speci- 
fies whether the array is to be written ("W") into the 
file or read ("R") from the file. 


The minimum size array which can be used in the RAND state- 
ment is 32 words (DIM A(31)), and the array size should 
be a multiple of 32, which is the size of a record. This 
means that in the case of an array of size 128, the initial 
record number would have to be incremented by 4 each time 
the array (presumably containing new information) was re- 
written on the random file. 

DOS 


The proper return to the operating system is made by 
giving the keyboard command - 

DOS 

which will close all files and return. 



- 6 


< ) 


i 


t ) 


■» 








I/O Extensions to Single-User BASIC 

The LIST, PRINT, and INPUT statements have been extended 

i to facilitate the use of ASCII files on the operating 

system. 

i 

t 

I LIST 

I LIST #n or XXXLIST #n causes the output of the nor- 

I mal BASIC LIST command to be directed to a file or 

* device. N is the channel number associated with 

the file or device by an OPN statement. 

• 

PRINT 

PRINT CHN n, is equivalent to a BASIC PRINT state- 
ment, however, the output is directed to a file or 
device which has previously been opened on Channel n. 

A # can be used as a shorthand for CHN. The output 
is stored as ASCII bytes. 

INPUT 

j INPUT CHN n, is equivalent to a BASIC INPUT state- 

ment with the input taken from the file or device 
' associated with channel N. a# can be used as a short- 

^ hand for CHN. The input file should consist of ASCII 

data with each number terminated by a carriage return. 
In order to reuse the data in a file as input, the 
file must be closed (CLS n) and then reopened (OPN 
"Filename", n) . 

i 


! 



i 

I 


Ex^unple 1 shows how RTBAS IC is started and how a program 

can be created, run, stored and finally recalled. j ) I 

I 

The first step is to bootstrap the Operating System. 

RTBAS IC is started in Step 2 by typing RTBASIC. Steps 
3 and 4 show the program typed in and run. After the 
program has been run and the user wishes to save it, he 
first opens a new file on an unused channel (Step 5) , 
lists the program on that channel (Step 6) , and finally 
closes the channel (Step 7) , thereby closing the file. 

{ 

The user can return to the operating system by typing ^ ^ 

DOS; the system will respond with an R as in Step 7. 

# 

RTBASIC is then started again (Step 8) , and the program i 

previously saved is recalled with the PRG command (Step 9) . 

In Steps 10 and 11, the program is listed and run again. 1 



BCX)TSTRAPPING THE DISK 


STEP ONE 

1. Turn NOVA Power Switch to "ON" (Not Lock) 
at least one lamp on the front panel should 
come on when you do this . 

2. Trip the "RESET" Switch a few times. 

3. Turn on the teletype by rotating the knob at the 
right under the keyboard counterclockwise. 

4. Turn on the disk, by lifting up the switch 

in the red panel under the NOVA. As the disk 
comes up to speed, it makes a little noise — do not 
worry unless it is more than you heard the last time. 
A distinctive klunck will be heard when the disk 
heads are lowered. After this, you may continue 
the startup procedure. 

5. Set the front panel switches to 376 (all numbers 
in octal) . 

6. Trip the examine switch. 

7. Set front panel switches to 060120. 

8. Trip the "DEPOSIT" switch. 

9 Set the front panel switches to 377. 

10. Trip the "DEPOSIT NEXT" switch. 

11. Set the front panel switches to 376. 

12. Trip the "START" switch. 

13. Within a few seconds the teletype should type out 
a message identifying the operating system on the 
disk. Then the NOVA will halt. (The NOVA is halted 
if the RUN lamp is off.) 

14. Trip the CONTINUE switch. The teletype will respond 
with an "R" within a few seconds. This indicates 
that the command line interpreter is ready to receive 
user commands . 


- 9 - 










1 


il 


EXAMPLE 1 


iTIF^^STC 2) Start RTBASIC < ' 

3/17/73 tK)i.r4 


in FOK I = t TO 5 


ar 1 SCR <T) 

3F NEXT I 
4n EiVD 

• 

3) 

Input Program 

MIN 



0 

1 

1 . 41 421 
1 .7 320 b 
2 

2. 23607 

4) 

Run Program 

CPN "bPROG'S 4 

5) 

Open Disk File to store program 

UST #4 

6) 

List program on Disk File 

(LS 4 

Close 

mSF; 

7) 

Return to Disk Operating System 

R 



3/17/73 DOS04 

8) 

Start RTBasic 

FRG "PPROF" 

9) 

Read in program from Disk File 


BPROG 

UST 

10) 

List Program 


W FOF T= P TO 5 
3 ; PRINT SCR (D 
I 3 P) NEXT I 

41 END 

I 

] f^iN 11 ) Run Program 

1 

1 . 41 421 

1.732nb 

2 

2.236C7 


msn 


O 



I 


GENERAL PURPOSE DIGITAL REGISTER 


OGPR 

The OGPR statement is used to load a 16 bit general 
purpose digital register. Figure A shows the electrical 
connections for the 16 output bits (DataOutO to DataOut 15) 
and also the connections for available control pulses. A 
bit pattern can be loaded into the GPR (general purpose 
register) by the OGPR statement in two ways. If a simple 
variable is used as an a’'gument, it will be converted to 
a 16 bit unsigned binary number, therefore, the range of 
acceptable values is 0 to 32,768. If the value of the 
argument is outside this range, an error message will 
be returned. For example: 

10 LET A1 = 65 

20 OGPR A1 

will cause the following binary bit pattern to be loaded 
into the GPR: 


-P +> -M 

3 3 3 

COO 
(0 (0 n) 

■P 4J -P 

<0 (0 lO 

Q Q Q 

00 00 00 00 10 00 


o Data 

•p output line 


logical 

value 


It is also possible to use an array as an argument in an 
OGPR statement. In this case, each element in the array 
(which must have a dimension of at least 16) will load a 
corresponding bit in the GPR with a 1 if the value of the 
element is non-zero; otherwise, a zero will be loaded into 
the GPR. The first element in the array will load the 
first bit, DataOut)?, and elements in the array after 16 
will be ignored. If the following array. A, is used to 


11 


I 





Nova 




CX5PR 




" 1 


\ 

IGPR 



<o 

(control 



<0 




functions) 



'V 

^ J002 

O 

V 

■4J 



^ JOOl 


o Signal 


Pin, # 


Signal 

Pin, # 

DataOut 

0 

1 


Datain 

0 

1 

DataOut 

1 

2 


Datain 

1 

2 

DataOut 

2 

3 


Datain 

2 

3 

DataOut 

3 

4 


Datain 

3 

4 

DataOut 

4 

5 


Datain 

4 

5 

DataOut 

5 

6 


Datain 

5 

6 

DataOut 

6 

7 


Datain 

6 

7 

DataOut 

7 

8 


Datain 

7 

8 

DataOut 

8 

9 


Datain 

8 

9 

DataOut 

9 

10 


Datain 

9 

10 

DataOut 

10 

11 


Datain 

10 

11 

DataOut 

11 

12 

• 

Datain 

11 

12 

DataOut 

12 

13 


Datain 

12 

13 

DataOut 

13 

14 


Datain 

13 

• 14 

DataOut 

14 

15 


Datain 

14 

15 

DataOut 

15 

16 


Datain 

15 

16 

GND 


21 


GND 


21 

+5 


22 


+5 


22 

C 


28 


C 


28 

S 


29 


S 


29 

P 


30 


P 


30 


DATOB.DEVSEL 

DATOC'DEVSEL 


Figure A. Diagram and electrical connections of general 
purpose digital register. 


- 12 - 




load the GPR; 


A(0) » .5 
A(l) - 0 
A(2) - 1 
A(3) » 1510 
A(4) « 0 
A(5) - 0 
A(6) » 0 
A{7) - 0 
A(8) « 0 
A(9) » 0 
A(10) « 0 
A(ll) - 1 
A(12) « 2 
A(13) » 3 
A(14) - 4 
A(15) » 5 




The following binary bit pattern will be loaded into 
the GPR; 


Ht. 

i-H 

(N 


4J 

■P 

p 

3 

3 

c 

O 

O 

(0 

flj 

la 

-p 

■P 

■p 

ni 

<0 

10 

Q 

a 

Q 

1 

0 

1 


IT) 

r-i 

■P 

3 

O 

•P 

to 

o 


1000000011111 


The format of the OGPR statement is: 


OGPR 


simple+variable 

[, "control function"] 

array 


The control function, which can be an S, C, or P lets 
the user generate one of the three available pulses. The 
electrical connections for these pulses are shown in Figure A. 
The register will be loaded within about one millisecond 
after the execution of a GPPO statement is started, and 
the control pulse (if S, C, or P is present) will occur 
about 200 microseconds after the register is loaded.* 

* Times are for the old NOVA Computer. 


13 


I 




1 





IGPR 


This statement is similar to the OGPR statement; it is 
used to examine a 16 bit binary input (Dataind to DatalnlS) 
and to load this pattern into either a simple variable 
or into the elements of an array. The input must be 
placed on the Datain lines while the IGPR statement is 
being executed (execution time is approximately one milli- 
second) . The pin connections for Dataln0 to DatalnlS 
are shown in Figure A. 


O 


The format of this statement is; 


IGPR 


simple-variable 


array 


I, "control function] 


The presence of the control function has the same effect 
that it has in the OGPR statement which is the generation 
of a pulse. If the binary bit pattern was the following: 


ir> 



000000000000010 


and the argument of the IGPR statement was a simple variable, 
after the statement was executed, the simple variable would 
have the value 2. If the argument was an array named B, 
elements B(0) to B(13) and B(15) would be set to zero, and 
B(14) would be set to 1. All elements after B(15) would 
remain unchanged. 


( ) 


14 


O 



Real Time Clock 


CLK 


' - 

I 

i 



The CLK statement is used to start, to interrogate, and 
to stop the real time clock. The result of the interroga- 
tion is the number of clock cycles that have occurred since 
the clock was last started. The period can be set and 
the clock started by executing a CLK "Sn" statement where 
n is a number from 0 to 3. The period is set by n accord- 
ing to the following table : 

n Period 

0 60 Hz 

1 10 Hz 

2 100 Hz 

3 1000 Hz 

The format and operation of the CLK statement is : 

CLK simple variable Load current value of 

clock into simple variable. 

"S" Reset and start clock (60 Hz.) 

"Sn" Reset and start clock and set 

period. 

"D" Stop clock (DONE) 

If no period is specified, a clock frequency of 60 Hz. 
will be used. The clock is accurate to within one milli- 
second of the true time elapsed after a clock start is 
executed.* The clock can be run for approximately 25 days 
at the highest frequency (1000 Hz) without overflowing. 


♦The accuracy of the clock will be adversely affected by 
YPLOT or BPLOT of arrays on the X-Y Plotter if the clock 
rate is set at 1000 Hz. 


I 




15 



CHARACTER GENERATOR 


WRITE 


The WRITE statement is identical to the PRINT state- 
ment in BASIC except that the output device is a CRT 
display or the X-Y plotter. Since it is desired that 
the initial location of the displayed text be any region 
of the display, the horizontal and vertical position 
of the initial point of the output of the WRITE statement 
can be specified by using a PLOT statement. The output 
devices, either a CRT, an X-Y plotter, or both, may be 
selected by using the XYSEL statement. 


This statement is similar to the LIST statement in BASIC 
The output device is a CRT display and 20 lines of the 
program are displayed at a time. The 20 lines which are 
displayed are specified by typing nnnnDISPLY where nnnn 
is the initial line in the nnnnLIST statement. The 20 
lines will be displayed until the ESC key is struck, 
and then control will be returned to the user. 



CRT DISPLAYS AND PLOTTER 


XYSEL lets the user select which devices will be used 
for displays in conjunction with the PLOT, YPLOT, BPLOT, 
and WRITE statements. The format of the XYSEL statement 


The device list lets the user specify which devices are 
to be used. The table below lists the devices available 
and the letters used to represent them. 

Device Representation 


Tektronix 602 Sc 
(mounted in cart) 

HP Display 

HP X-Y Plotter 


Inclusion of an S with a device representation in the XYSEL 
statement causes points to be intensified (or plotted) with- 
out a device list, the display is positioned without any 
output. When executing a WRITE statement, this feature is 
useful for moving the X-Y coordinates without actually 
plotting or intensifying the point. The inclusion of an 
X specifies that an external signal will initiate both the 
positioning and intensification (or plotting) . If no device 
is given in the statement, then there is no intensification 
(or plotting) upon executing PLOT or BPLOT statements. 


The following are two examples of XYSEL statements: 

XYSEL "ABPS" Use all devices and output 

the point 

XYSEL ”S" Do not plot any points; 

just move the CRT beam or 
pen. 


I 


I 

I 


I 

I 


1 


PLOT 


The PLOT statement positions, the beam of the CRT or 
the pen on the plotter according to a pair of arguments. 
The specified point wi3 1 be intensified (or plotted) if 
an S and device list was placed in the preceding executed 
XYSEL statement. The arguments in 

PLOT X,Y 

can be variables or any expression. Thus, 

PLOT I,SIN(Z*2) 

is a legal statement. Arguments ranging from -512 to 511, 
-512 to 511 will cover the entire scale of the output de- 
viceC'. The point 0,0 is in the center of the display with 
511,511 corresponding to the upper righthand corner. 


YPLOT 

The YPLOT statement is used for plotting a sequence of 
points stored in the form of an array. The array specifies 
the abscisa. The ordinate is incremented by an adjustable 
step value automatically by RTBASIC . If no step is specified, 
the ordinate is incremented by one. The data sequence is 
started at the extreme left hand position (corresponding 
to X = -512) on the selected output devices. The format 
of the YPLOT statement is; 

YPLOT array [, step] 

the step may be a variable or any expression; and if it 
causes the ordinate value to exceed 512, wrap-around will 
occur in the display. 


18 


I ) 




1 


The statement 


YPLOT A 

where A is a 10 element array produces the same display 
as execution of the following three statement program 
using only the PLOT statement} 


10 FOR I = 0 TO 9 
20 PLOT 1-512, A (I) 
30 NEXT I 


YPLOT A, 5 


is similar to: 

10 FOR I = 0 TO 9 
20 PLOT 1*5-512, A(I) 

30 NEXT I 

However, in both cases, YPLOT offers a better display 
because of its increased speed in plotting and lower 
storage requirement. With the YPLOT statoment up to 
1024 points can be displayed on a CRT without flicker, 

3PL0T 


The BPLOT statement will plot points with X and Y coordinates 
taken from two arrays (which must have identical dimensions) . 
The format of a BPLOT statement is: 

BPLOT array, array 


where the first array contains the X values and the second 
contains the Y values. 


-19 


1 



DIGITAL TO ANALOG OUTPUT CHANNELS 



F 


I 


ADA,BDA»DAB 


These statements control the two D-A convertors (A,B) 
which are used for analog outputs. The ADA and BDA 
statements allow the user to generate a single analog 
value if a simple variable is specified as an argument 
or a sequence of values (tlie timing controlled by an 
internal clock or an external signal) if an array is 
specified as an argument. The format of these state- 
ments are : 


DA 

or 

DB 


simple variable 
array 


, conversion frequency 
, "X” 


If a simple variable with a value of -512 to 511 is 
specified as an argument, an analog voltage between 
-2 to 2 volts will appear on either the A or B channel.* 

If an array is specified as the argument, then a timing 
source must be specified which will initiate the conversion 
and step through the elements of the array. An "X" 
selects an external source*, otherwise an expression 
specifies the frequency of conversion. The time between 
conversions is specified in tenths of milliseconds with 
the highest frequency being 2000 values/sec (equals 1/.5 
milliseonds) . The output will remain at the value of the 
last element in the array until a new statement is ex- 
ecuted which uses the D-A convertors. 


*See the CBG Nova System Reference Manual for the electrical 
connections of these two channels. 


\ 


I 

[ 

J 




o 


-21 




The format of the DAB statement is: 

DAB simple variable, simple variable 

array, array conversion period 

",X" 

A channel B channel 

This statement is similar to the DA and DB statements, 
however, it permits output on both the A and B channels 
at the same time. The two arrays specified are required 
to have the same number of elements. 

Since the D to A statements can run under the interrupt 
system, the user should be familiar with the WAIT statement. 



22 


] 


SIGNAL PROCESSING FUNCTIONS 


The FFT statement is used to execute a Fast Fourier 
Transform. A complex transform is used when two (equal- 
dimensions) arrays are specified. If only one array is 
specified, a real transform will be taken and only the 
"positive" frequencies will be returned as results. 

An"R" after the arrays results in a reverse transform. 
The following examples show the effect of the different 
FFT statements; 

10 DIM A (255) 

20 DIM B (255) 


‘ ( ) 


100 FFT A,B 


120 FFT A,"R' 


take the complex transform 
of the array A +jB. The 
results are placed in A,B. 

Take the reverse real 
transform of A. Return with 

cos coefficients in A(0) -A(N/2-l) 
sin coefficients in A (N/2) -A(N-l) 


The format of an FFT statement is; 


FFT I Array, Array 


Array 




The dimensions of all arrays must be a power of two. Since 
the FFT computes the discrete Fourier Transform which is 




-j2ffnK 

N 


23 



itself a periodic function, the "negative" frequencies 
in a transform containing N points will appear as the 
output of the FFT from N/2 to N. If the sampling rate 



is 21J/T and the number of samples is N, then (N/2-1) the 
point of the FFT will correspond to a frequency of 1T/T 
and adjacent points (the frequency resolution) will be 
separated by 2Tt/NT. 



ANALOG TO DIGITAL CONVERTOR 


SAMP 

The SAMP statement is used to seunple analog signals by 
allowing the user to; select the number of samples he 
wishes to take; select which of sixteen multiplexed A-D 
channels will be used; and to determine the frequency 
at which samples are taken. Also, the user can specify 
that samples are to be continually taken and placed in 
a buffer array until a preset trigger level is exceded. 
When this level is exceded, the current samples in the 
buffer array are placed in a storage array, and sampling 
is continued until the rest of the storage array is 
filled with the new samples. Both the size of the buffer 
array and the storage array are adjustable. This allows 
the data immediately preceding a detected event to be 
examined. 


The format of the first SA^1P statement is: 


SAMP 


simple variable 
array 


, channel# [ , frequency] 


The channel #, frequency, and trigger level can be any 
legal BASIC expression. The total number of s^unples to 
be taken is determined by the size of the storage array. 

A simple variable is used if only one sample is wanted. 

If only one sample is to be taken, the frequency need 
not be specified. 

There are sixteen A-D channels available; the A-D convert- 
or is preceded by a sample and hold circuit with a 10 nano- 
second aperture. The input range is -2 to +2 volts. 






Channels 4 through 7 have adjustable gain, adjustable 
offset voltages, and may be AC-coupled by means of front- 
panel controls. The maximum positive analog signal is 
converted to -t-Sllj^g while the maximum negative signal 
is represented as -512^^^ in RTBASIC . Channels 0 through 
3 are permanently connected to potentiometers on the front 
panel. The sampling frequency is specified by giving the 
interval between samples in tenths of milliseconds with 
the smallest period being .2 milliseconds. The following 
excimple shows the use of the first type of SAMP statement: 


10 DIM A (99) 
20 SAMP A, 7, 10 


this program takes 100 samples from channel 7 sampled 
at IKHz and stores them in Array A. 

The second sampling statement has the format 

SAMP Storage Array , channel #, frequency 

, trigger level (buff, array] 


and is capable of collecting data before and after a specified 
event occurs. In this SAMP statement, the optional buffer 
array serves as temporary storage for the saunpled data 
and it also determiens the number of samples before the 
trigger level is exceded which will be saved and loaded 
into the final storage array. For wxample, if the dimen- 
sion of the buffer array is N then M samples will be placed 
into the storage array, N of these scunples will have been 
taken before the trigger level was exceded and M-N samples 
will have occurred after the triggering event. The trigger 
level is specified from -512 to 511 corresponding to -2 to +2 
volts. The following example shows the use of the trigger: 


26 


10 DIM A(99) 

20 DIM B(9) 

30 SAMP A, 1 , 2, 200, B 


Input waveform 



Input into buffer B 


200 . . . . 



Array A when sampling is finished 


Array B is used for temporary storage. Vihen the input 
on channel 7 excedes (200/511) *2 volts, the samples in B 
(10 samples before the trigger was exceded) will be placed 
into array A, and the other 90 elements of A will be filled 
with the samples taken immediately after the trigger level 
was exceded. 


Since the SAMP statement runs under the interrupt system, 
the user should be familiar with the WAIT statement. 


1 



I 

i 






■ ^ 

f i 


5 



i 


MULTI-LEVEL INTERRUPT SYSTEM 


ONI 

The ONI statment allows the execution of an RTBASIC 
GOSUB or GOTO Statement whenever a trigger input from 
the analog interface causes a momentary interrupt (Trigger 
switches 0-3 in the down position or Trigger inputs 4-7) . 
If a GOSUB is executed, control will be returned to the 
line in RTBASIC after the one being executed when the 
occurred. The format of the ONI statement is: 


10 

11 


n 


ONI 

TgotO line number ^ 
GOSUB line number^ 


where n is a number or expression from 0 to 7 which cor- 
responds to one of the front panel triggers. 


In order to clear and disable trigger interrupts, the fol- 
lowing statement can be used. 


ONI "C" 

This will disable the effect of any ONI statement previously 
executed until another ONI is issued. This statement 
is useful to clear interrupts when continuous trigger inputs 
are coming into channels 4 through 7. 


Caution - If the condition of ONI contains a GOTO or GOSUB 
which branches to a line # which doesn't exist, then it 
is possible to get an ERR 13 at a line number which doesn't 
contain a GOTO or GOSUB. The ERR 13 is generated when 
the improper ONI is executed and the error is assigned to 

I 

the line which was interrupted by the ONI trigger. 




i 

j 



t- 


. . u 


28 


WAIT 



I 



j. 

E 

1 






/ 





J 


j 

j 


The WAIT statement is used in conjunction v;ith the SAMP 
statement and D/A statements (ADA, DDA, and DAB) if the 
user decides that he must wait for seimpling or analog 
output to be completed. If a WAIT statement is used, 
the execution of a RTBASIC statement is suspended until 
the SAMP or D/A statement signals that it is finished. 


1 

I 


WAIT will cause the machine to wait until the SAMP or D/A 
statement is finished before letting RTBAS IC begin execu- 
tion of the next line. 


The SAMP statement and D to A statements also have an 
automatic WAIT built in (a separate one for SAMP and one 
for ADA, ADB, and DAB) . The following two sequences have 
almost identical action; 


10 

SAMP 

A, 

4, 

10 

10 

SAMP 

A, 

4, 

10 

20 

30 

WAIT 

SAMP 

B, 

4, 

10 

20 

SAMP 

B, 

4, 

10 


In the first set, the sample statement at 10 will be ex- 
ecuted and the program will wait at 20 until all of array 
A is filled with samples then the statement at 30 will 
be executed and samples placed in B. The second program 
does the same things execpt there is no delay between 
the end of sampling array A and the beginning of sampling 
array B. 

Since the SAMP statement and the D/A statements all 
use the High Resolution Clock (HRC) , care should be used 
to either use the WAIT statement or the same clock fre- 
quencies if the SAMP statement has any possibility of over- 
lapping with a D/A statement. A WAIT statement is not neces- 
sary when a single value is sampled (SAMP A1,0). 




2 ° 



USER SUBROUTINES 


CALL 


The CALL Statement allows the user to write assembly 
language subroutines and call them from RTBASIC. The 
format of a CALL statement is: 


CALL "SUBRn" [,list of arguments] 


where n is a number from 1 to 5, and the list of arguments 
contains any n’imber of strings, variables, and expressions 
separated by commas. Thus, the user can call a subroutine 
which he has designated with a number from 1 to 5. Argu- 
ments may be passed in CALL statements in the form of 
variables, strings, or expiossions in any order. For example 


CALL "SUBPl 


Appendix A contains procedural and programming information 
important in writing subroutines. When the CALL statement 
is used, RTBASIC checks to see if the routine being called 
is actually loaded; and if it has been loaded in the proper 
manner and location (see loading procedures for subroutines 
below) . If RTBASIC determines that the subroutine does 
not exist or has been improperly loaded, it will return the 
appropriate error message. Caution should be used in writing 
subroutines because improper handling of control or returns 
could cause a fatal error in RTBASIC , and this would neces- 
sitate reloading after correcting the cause of the error. 




LOADING PROCEDURES FOR SUBROUTINES 

u 

Subroutines must be written in relocatable form, hence, 
the user should know how to use the relocating assembler 
to write them*. To load subroutines into RTBASIC , the 
follwoing DOS RLDR command is used; 

RLDR GSERBASIC/S @RTB1@ USERSUBl.RB [USERSUB2 . RB . . . 5 . R3 ] 
RTB2.RB USERBASIC/S 



USERSUBn.RB is the relocatable binary of the user's sub- 
routine (up to /5 user subroutines may be loaded). USERBASIC 
will be a savefile of RTBASIC and the added subroutines 
which can be executed by typing USERBASIC. The combined 
length of all user subroutines should not exceed 2000^^^ 
in order to allow room for an average sized RTBASIC pro- 
gram in a 16K memory which might consist of 200 statement 
lines and storage for a 1000 point array. If storage is 
exceeded, RTBASIC will return the appropriate error message. 



and Relocatable Loader 
1969. 



31 


I 


t 



I 


APPENDIX A 

WRITING ASSEMBLY LANGUAGE SUBROUTINES FOR RTBASIC 


Using the CALL statement, a user can call cind execute 
subroutines written in relocatable assembly language. 

For a subroutine to be called, it must contain an entry 
point of the form: 

.ENT SUBRn 

in the assembly code. SUBRn should be the label of the 
starting location of the subroutine. To return from a 
user subroutine, the following code must be included. 

. EXTD . LINE 

SUBRn; ; STARTING POINT OF SUBROUTINE 


JMP § .LINE ; RETURN TO RTBASIC 
PASSING AND EVALUATING ARGUMENTS 


Also, the user can pass arguments in the CALL statement. 

These arguments can be strings, variables, or expressions. 

When arguments are used in a CALL statement, they are con- 
verted into a numerical representation. The following sec- 
tion discusses this format and the format of floating-point 
numbers in RTBASIC . A list is then given of the subroutines 
in RTBASIC available to the user which can be used followed by 
an actual user subroutine program. 

The argiiments in a CALL statement, such as: 

CALL "SUBR2", "ABC”, X*2,Z 





I 


32 


are converted to octal numbers and stored in a byte (8 bits) 
format (listed in Table 1) . Numbers are represented as 
a double word RTBASIC floating-point constant. The above 
list of arguments would be converted to: 



Constants 


Second Byte 

First Byte 

1 

7,8 15 

^ PBC 



301 

351 — 


A 

M 

303 

302 


C 

B 

361 

000 


t 

end of 





string 

373 

201 


it 

tabfX'^gh 





for X 

100 

000, 

404^ 


floating point repre- 

000 


sentation for 2 

205 

361 


symbol 

•7 

table ref for 


342 


U 

9 

end of line 


Contents specified by arguments in CALL state- 
ment location specified by PBC. 


Table ; 



I 


PBC, the program byte counter, is a pointer in RTBAP IC 

) which marks the current program byte. After a subroutine 

has been called, PBC will point to the first program byte 
of the argument list. In the example above, PBC would 
point to the symbol " represented as 351. Numbers in the 
argument list are represented as double floating-point 
words; the format is described in Table 2. 

In order to use the argument lists passed in a CALL state- 
ment, it is necessary to have routine which can access 
the program, bytes, evaluate expressions, and determine 
the size and locations of arrays and simple variables. 

If arithmetic is to be done, the appropriate floating- 
point routines must be available. Table 3 contains a 
list and short description of these routines. 

If the user had a subroutine which required an argument 

'> J having a string, then an expression, and finally a simple 

variable or an array, he would proceed in the following 
manner to manipulate the argument list. The PBC will 
be pointing to the first argument in the list so that 
the user need not know explicitly where the first argument 
is. To obtain the first program byte, he calls ACNB by 
executing: 

JSR ACNB 

If the first argument is actually a string, AC2 should 
contain a 351 (the representation for the symbol ") . If 
it is in fact a string, he can get the first character by 
again calling ACNB. 

JSR ACNB 


j 


i 



35 


Table 2 



Floating-Point Format 


First Word 


Second Word 


0 15 


) 7 14 






sign 

bit 


{l^.antissa 


.} characteristic 
(excess 200)* 


First Word 24 Bit 

Second Word (Bits 0 to 7) Mantissa 


Second Word (Bits 8-14) 
Second Word (Bit 15) 


characteristic 

+200g 

Sign Bit 
1 negative 
0 positive 


*The characteristic is in excess 200 notation (i.e., 200g 
added to the regular floating-point characteristic) . 


36 




TABLE 3 


r 





I 

! 


I 




List of RTBASIC Argument Handling Routines 


Name 

.ADDF 

.SUBF 

.MULF 

.DIVF 

. FLO /T 

.FIX 

ACNB 

. EVEX 

.LINE 

.ERRA 

ALOC 

.LUVD 

.ADIM 

APRS ’ 


Function 

Floating-point add 
Floating-point subtract 
Floating-point multiply 
Floating-point divide 
Convert integer to fit. pt. 
Convert fit. pt. to integer 
Access next program byte 
Evaluate expression 
' Return to RTBASIC 
Print error, return to RTBASIC 
Allocate storage 
Look up variable definition 
Get array subscripts 
Get array size 


Every routine with a . is called by a JSR @ . The 

appropriate .FJXTN pseudo-ops must be included in the as- 
sembly code. 


- 37 - 


I 


1 


The remaining characters in the string can be obtained in 
the same way. A 0 will appear in AC2 after ACNB has been 
called when the end of a string has been reached. If the 
user is now looking for an expression, he will again call 
ACNB to find the comma (361) in AC2 which separates the 

« 

string and the expression. If he wants to evaluate the 
expression, he calls the expression evaluator by executing a 
JSR 0.EVEX 

the result will appear in AGO and ACl in floating point 

format. If the expression evaluator detects an error, AC2 I ) 

will contain a 0 so it is the usual procedure to check AC2 

after calling the expression evaluator. The expression 



evaluator will place the PBC pointing after the comma if 
a eypression is terminated by a comma as part of a list. 
(If at any time the user v;ants to check for the end of the 
line, he should call ACNB and check for a 342 in AC2.) 
After evaluating the expression, the user wishes to check 
for the variable which is supposed to be in the argument 
list so he calls ARRSZ. The user can find ovit information 


about the variable by executing the following code: 



EXTN ARRSZ 


JSR 0ADRSZ 

: RETURN HERE IF SIMPLE VARIABLE 
: RETURN HERE IF ARRAY 


ADRSZ ; ARRSZ 

If the variable was a simple variable, the routine will 
return to the first location after the JSR, and AC2 will 
contain the storage address of this simple variable. If the 
variable was an array then the return will be made to the 
second location after the JSR. AC2 will contain the address 
of the first element in the array, and ACl will contain the 
total number of elements in the array. The user can, if 
necessary, back up to or skip over program bytes by incre- 
menting (ISZ) or decrementing (DSZ) the program byte 
counter (PBC) . 


39 



Floating-Point Aritliinetic Routines 


FO and FI are floating-point numbers. These routines are 


called with FO and AGO and ACl 


Routine 


FO+Fl 


ADDF 


SUBF 


MULF 


DIVT 


.PLOT is called v;ith a two's complement signed integer in 
AGO (msb) and AGl (Isb) . The result, a floating-point word 
is placed in AGO and AGl. 

.FIX is called with a floating-point word in AGO and 


AGl and returns a tv;o's complement signed integer in AGO 




u 


Argument Handling Routine^ 

To obtain the current program byte, the follov/ing 
routine is called: 

ACNB 

This routine is called v;ith PBC pointing to the current 
program byte. It returns with the current program byte in 
AC2,‘ and it increments PBC. 

The following routines are useful in manipulating 
variables and evaluating expressions: 

.LUVD 

.LUVD is called with AC2 containing the symbol reference 
for a variable (which is the program byte representation of 
a variable) . The routine returns with AC2 containing the 
core address of the variable if the variable has been 
defined. If .LUVD returns v;ith a %bxo in AC2, storage must 
be allocated with a call to ALOC before the valxie in .AC2 
is changed. Bit J2T of ACff is the array flag for defined 
• variables. If the variable is an array, bit 0 will equal 1 

if it is a simple variable bit 0 equals 0. 

ALOC (used after calling .LUVD) 

ALOC is called with the following code: 

C 


41 



i > 

.EXTN ALOC 

JSR e AALOC 

AALOC : ALOC 

It will allocate storage for the iindefined variable in 
the. preceding ,LUVD routine, and AC2 v;ill contain the core 
address of the variable. 

.ADIM 

This routine is called with AC2 containing the symbol 
reference for a variable. On return, ACjJ contains the 
integer value of the first subscript and ACl contains the 
integer value of the second subscript. 

V 

ARRSZ 

ARRSZ is called with PBC pointing to a variable. It 
has two return points as described above. If the variable 
is an array, ACl v;ill contain the size of the array (equals 
(dim 1 + l]*(dim 2 + 1]), and AC2 will contain the address 
of the first element in the array. If the PBC is pointing 
to a simple variable, then ARRSZ will return to the location 
imnx 2 diately after the JSR, and AC2 will contain the address 
of the variable. PBC is incremented once for each call to 


) 


2 




I 

ARRSZ . 

.EVEX 

This routine is the expression evaluator. The format 
of an expression is described in BASIC / and it is terminated 
by comma/ or a semicolon/ or by the end of a line (spaces 
are ignored) . 

■ * The evaluator is called with PBC pointing to the first 

byte of an expression. 

The routine returns: 

If AC2 equals zero then there was an invalid 
expression or possibly a string 

If AC2 is nonzero then the floating-point 
value of the expression is in AC^ ACl 

AC3 contains the next character (byte) 
in the program 

If the expression evaluator is called pointing to a 
variable/ or a dimensional variable (i.e./ A(l/2) then 
. AC2 will contain the storage address of the variable on 

return. 

The following routines are used in returning from user 
subroutines. 

There are two ways in which the user can return to 
RTBASIC : 

JMP @ .LINE 

( ■ This is the normal return. The PBC will be moved 


43 


to the next line and control will be *.’e turned to RTBASIC . 

JSR ® .ERRA or JSR t .ERRE 
N N 

This is the error return. The value of N will be converted 
to a decimal value and will be printed on the console 
as the number or error. The call to .ERRA will also print 
the line number at which the error occurred, and execution 
will continue. The call to .ERPE will stop execution. 



EXAMPLE OF USER SUBROUTINE 

The following program SAMP is an excimple of a subroutine 
which can be called from RTBASIC . This program is a simple 
sampling routine that uses the real time clock to control 
the sample rate and does not run under interrupts. To 
execute the subroutine, the following statement is given: 

CALL SUBR2 A, 7, 2. 


This statement will call the SAMP program with arguments 
A, 7, 2. The subroutine first determines the size of 
array A or determines if A is a simple variable. The 
number of samples to be taken which is equal to the dimen- 
sion returned by ARRSZ is stored, and the address of the 
first element is loaded into ADP.BF. The comma in the 
list of arguments is skipped by incrementing the PBC (pro- 
gram byte counter) . "^he channel number and clock period 
are determined by evaluating the corresponding expression 
(the expression evaluator evaluates an expression and 
leaves the PBC pointing to the byte after the comma) . The 
channel number and clock period are converted to integers, 
and the I/O instructions are executed to set up the clock 
and A-D converter correctly. 


Sampling is started; and after a sample is taken, the 
integer sample is converted to a floating point double 
word and stored in the selected array or simple variable. 

When the correct number of samples is taken, the subroutine 
returns to RTBASIC and execution begins again with the next 
line. If an error was detected by the expression evaluator, 
this subroutine will return to RTBAS IC through the error 
package which will cause "ERR 67" to be written and execution 
will be stopped. 


45 



yfiOi :-.UF:R2 
fell 

HG 

04 , SUBR 

05 , THE 

06 , TCI e 

0? > 01 SO 

08 ; HNf - 

0S 

10 

1 1 i USE 

lli^ 

i:<- ENT 

14 . EXTt* 

15 EXTD 

16 . EXTN 

17 NREL 

18 

■J 3 OOOOEi ' 06027'7 SUEiR2 
70 00001 " 006457 

21 00002' 1300450 

22 00Citi3' 044453 

23 000134'' 050453 STRDEi 

24 0EH005*' 010005T 

25 00I3EI6'' 0060034^ 

26 00E«37 151015 

27 0001 El' €100440 
2T! 0001 1'' €1061304 T- 
29 00C112’-' €165031 
3€i 0€i01 3' 1024€i€i 


. TITL SUBR2 


. SUBR2 USES THE RTC TO SHMPLE 0HVEEORHS 

. THE US^ER SPECIFIES THE HRRRV OR SIMPLE VHRIHEl E 

,TO BE LUMI-EC' NITH THE RESULT 

>Hl SO THE USER SPECIFIES THE CHHNNEL NO. 

; HNf - I HE C LOC K FRE OUENC: V 


CHLi. "SUBR2’S ft, C.. F 


TO EXECUTE 


ENT SUBR2 
. EXTt* HCNB.' C342; 

EXTD . EVEX.. . F IX. PBC. . PLOT, L INE. . ERRH. Cl. SI. . PK 
. EXTN RRRSZ. SUHRC 
NREL. 


SUBRc 


INTL>S >DISHBLE 
JSR i;-R[>RS2 
JMP SSRMP 
STR 1. NSRMP 
ST R 2. HDRBF 
I S2 PBC: 

JSR 0 EVEX 
MOV# 2. 2. SNR 
JMP ER 
JSR 0 FIX 
DOR 1. RIN 
SUB 0. 0 


irjTFRRUPTS 
SINGLE SRMPLE 

STORE THE NUMBER OF SRMPlES 
STORE RDDRESS OF FIRST WORD IN RRRRV 
GET RID OF COMMR 
GET CHRNNEL no. 

CHECK FOR BRD EXPRESSION 

CONVERT CHRrniEl. N€i TO INTEGER 
CHRNNEL SELECT REGISTER 


31 €1001 4 065031 

DOC 0. RIN 

CONTROL REGISTER (.S PULSE MODE - 

.<2 0001 5' E106003T 

JSR C- EVEX 

;GET CLOCK PERIOD 

33 00016 151015 

MOV# 2. 2. SNR 

.iCHECI' FOR BRD EXPRESSION 

^i;4 €i€i01 7 '■ C1C.104 3 1 

JMP ER 


35 €i€ii320' €i060€i4t- 

JSR 0. FIX 

> CONVERT PERIOD TO INTEGER 

36 0C1021 €165014 

DOR 1. RTC 

jlord period 

37 



38 00€i22 ■ 0601 14 SRM : 

NIOS RTC 

iSTRRT PERL TIME CLOCK 

39 €i€l023' 06€il 31 

NIOS RIN 

^ STRRT CONVERSION 

4i3 €i€i02’4'^ 06555:1 

SKPB7 RIN 

>WRIT FOR CONVERSION 

41 €i€i€i25 ' 000777 

JMP . -1 


42 00€i26 €164431 

DIR l.RIN 

> TRKE IN SRMPLE 

43 0€i€i27' 10240€i 

SUB 0. 0 


44 00€13€i 125112 

MOVL # 1. 1.. SZC 

; CHECK FOR NEGRTIVE NUMBER 

45 0€i031' 020424 

LDR 0. MINUS 


4t> 

JSR 0 PLOT 

.i CONVERT SRMPLE TO FLORTIfJG POINT 

4 1*^ 00y!3--5** 03-04k.'4 

LDR 2, RDRBF 

.; LRCiD THE STORRGE RDDE! 

48 1.300 34' €14 1 i3€i0 

STR 0.. €l. 2 


49 0€1035-' i3450€11 

STR !.■ 1. 2 

.i STORE FLT PT SRMPLE 

50 00€i36' €il €1421 

ISZ RDRBF 

.i INC STORRGE RDDR 

51 €i0€ii;7' €il €i42€.1 

ISZ RDRBF 

. FOR FLT PT WORDS 

52 €i€i€l4€T' €11441.6 

DSZ NSRMP 

. DECR THE SRMPLE COUNTER 

53 €i0€i4 1 €i€i€i4€i2 

JMP CUNT 

> MORE SRMPLES TO BE TRf EN 

54 0004 2 000404 

tr.cr 

JMP [-UNE 

.i FINISHED 

S6 €-10€l4V ' €16 ?61 4 r UNT 

SfPDN RTC 

.WRIT FOR CLOCK TO FINISH 

57 €i0€i44'' 0€1€i777 

JMP “1 


5S: €i€i€i45 €i0€l755 

JMP SRM 

.. THI E RNOTHER SRMPLE 


ORIGINAL PAGE IS 
OF POOR QUALITY 


- 46 - 


i 



1 





SUBh:2 

01 Hi004t‘ 06021<1 DONE 

02 O0C147' 00200V- 1 

03 

04 000?Ci ti06010-f ER 

05 00f<5.1 000101<. 

06 

07 

08 00052-' 126520 S6RMP : 
08 00053’ 044403 

10 000154 - 010101730 

11 
12 

13 00055' 177777 MINOS: 

14 001056 01000001 NSRMP 

15 0101057' 01010010101 RDRBE : 
J6 010060^' 177777 RDRSZ : 

17 

18 

19 ENt- 


NIOC RirJ 
JMP 0-. LlrJF 

JSR 0. ERRR 
103 


SUB2L 1. 1 
STR Lj NSRMP 
JMP STRC'R 


177777 

0 

0 

RRPiSZ 


. CLERR RIf4 

;DONE RETURN TO BRSIC 

TERROR RETURfJ TO RTBRSIC •BRD EXPR.' 
; ERROR f JUMBER 


; STORE 1 SHMP 
; SRMPLE COUNTER 


47 


APPENDIX B 




SHORT SUMMARY OF RTBASIC STATEMENTS 


Purpose 


Format 


1. I/O 


OPN 

Open a File on a channel. 

OPN "FILEN",3 

CLS 

Close a channel. 

CLS 3 

PRO 

Read in a program. 

PRG "BPROG" 

RAND 

Read or write an array 
from a random record 
file. 

RAND CHN 3.A,10,''R" 

DOS 

Close all Files and return 
to DOS 

DOS 

LIST #n 

List Program on channel. 

LIST #2 

PRINT #n 
PRINT CHN 

Print on a channel. 

PRINT CHN 2,A1, 
PRINT #2,A1 

INPUT CHN 2,A2 

INPUT #n 
INPUT CHN 

Input from a channel. 

Digital Reaister 


OGPR 

Output an array or integer 
to GPR and perform control 
function. 

OGPR A, "S” 
OGPR I, "P" 

IGPR 

Input an array or integer 
from GPR and perform control 
function . 

IGPR B, "P" 

Real Time 

Clock 


CLK 

Set variable equal to the 
value of RTC; start, stop 
and set period of clock. 

CLK A 
CLK "S" 
CLK "D” 
CLK "S2" 

Character 

Generator 


WRITE 

Display numbers and char- 
acters (identical to 
PRINT) on selected dis- 
play device. 

WRITE "ABCDl#" 

WRITE A (I) ^ 


-48 



J 



Purpose 

Format 


DSPLY 

Display user programs on 
selected display device. 

DSPLY 
200 DSPLY 

5. 

Display 

and Plotter Equipment 



XYSEL 

Select devices to be used 
and intensification mode. 

XYSEL "APS" 


PLOT 

Position beam or pen to 
X, Y position and plot. 

PLOT 1, SIN(X) 


YPLOT 

Plot array, step along 
X coordinate 

YPLOT A, 3 
YPLOT C 


BP LOT 

Plot X, Y from two arrays 

BPLOT X,Y 


PEN 

Move the X-Y plotter pen up 
and down. 

PEN "U" 
PEN "D" 

6. 

Digital 

to Analog Output Channels 



ADA 

BDA 

Output simple variable or 
array and select conversion 
mode on A or B channel. 

ADA X,Y 


DAB 

Output two integers or two 
arrays and select conversion 
mode. 

DAB C, D 

7. 

Signal Processing Functions 



FFT 

Fast Fourier Transform 

FFT A, B 
FFT S, "R" 

8. 

Analog 

to Digital Converters 



SAMP 

Sample analog channel 

SAMP A, 7,1, 5, B 
SAMP Al,(2f 

9. 

Multi-level Interrupt System 


10. 

ONI Handle Interrupt 

WAIT Wait for sampling or analog 

output to finish. 

User Subroutine 

ONI "C" 
ONI 7 
GOSUB 335 
SAMP 
WAIT 


CALL 

C?il user routines (written 
in NOVA assembly language) 
with or without arguments. 

CALL "SUBRl" 
CALL "SUBR5" 

A, 7, "STRING" 


49 •• 


i 


RTBASIC ERROR MESSAGES 


The following error messages, which pertain to the 
RTBASIC statemetns are an addition to the error messages 
in Single-User BASIC. 


ERRORS 

Applicable 

Statements 

37 CALL - Illegal Subroutine Call (CALL) 

40 Arrays have different dimensions (FFT,BPLOT) 

41 Zero Dimension - Not an array /RAND \ 

/ FFT \ 

( BPLOT 
\YPLOT / 


48 

Buffer size too large 

(SAMP) 

53 

Array Dimension too small 

f GPR \ 



( FFT j 



Vrand / 

61 

No condition set for this interrupt 

(ONI) 

70 

Period (1/Frequency) out of range 

( SAMP , ADA, BDA, DAB ) 



1 


! 



I 



E 


I/O ERRORS 

The following error messages will be generated when an 
error occurs in I/O statement. An interrupt from an 
unknown device will be cleared. 


100 

101 

103 

105 

106 

107 

108 

109 

110 
113 

117 

118 
120 
122 
12 3 

124 

125 
130 


MEANING 

ILLEGAL CHANNEL NUMBER 
ILLEGAL FILE NAME 
ILLEGAL COMMAND FOR DEVICE 
ATTEMPT TO WRITE AN EXISTENT FILE 
END OF FILE 

ATTEMPT TO READ A READ PROTECTED FILE 
ATTEMPT TO WRITE A WRITE PROTECTED FILE 
ATTEMPT TO CREATE AN EXISTENT FILE 
ATTEMPT TO REFERENCE A NON-EXISTENT FILE 
ATTEMPT TO REFERENCE A FILE NOT OPENED. 

ATTEMPT TO USE A CHANNEL ALREADY IN USE 
LINE LIMIT EXCEEDED ON READ OR WRITE LINE 
PARITY ERROR ON READ LINE 

ATTEMPT TO ALLOCATE MORE MEMORY THAN AVAILABLE 

OUT OF DISK SPACE 

FILE READ ERROR 

UNIT NOT PROPERLY SELECTED 

ILLEGAL DEVICE NAME 


i 

'< 

i 





- 51 - 






I 

\ 



I 


i 


-T 


i 


SINGLE-USER BASIC ERROR MESSAGES 

00 Format Error 

01 Illegal Character 

02 Syntax Error 

04 System Error 

05 Illegal Statement Number 

06 Too Many Variable Names 

07 Spelling Error 

08 Spelling Error 

09 No Such Word 

10 Incorrect Subscript Closure 

11 Incorrect Parenthesis Closure 

12 Not a Keyboard Command 

13 No Such Line Number 

14 Storage Overflow (While Inputting Program) 

15 Read Statement is Out of Data 

16 Arithmetic Overflow (Number Too Large) 

17 No END or STOP Statement in Program 

18 Too Many Nested GOSUBs 

19 Too Many RETURNS 

20 Too Many Nested FORs 

21 FOR Without NEXT 

22 NEXT Without FOR 

23 Out of Storage (While Assigning Variable Storage) 

24 Array Too Large 

25 Attempt to Dimension Simple Variable 

26 Variable Name is Not Dimensionable 

28 Redimensioned Array is Larger Than Previously Defined 

29 Expression is Too Complex 

30 Illegal Format in Defined Function 

31 Subscript Exceeds Dimension 

32 Undefined User Function 

33 Too Many Nested Functions 

34 Negative Subscript 

35 Function Not Yet Implemented 


52 


APPENDIX D 


RTBASIC KEYBOARD COMMANDS 


The following is a list of RTBASIC statements which can 
be executed as keyboard commands. If a statement cannot 
be executed in keyboard mode, the appropriate error will 
be returned. 

OPN 

CLS 

XYSEL 

DSPLY 




PROGRAMMING TIPS FOR RTBASIC 


I ) 

1. It is sometimes necessary to sample or output more 
than 1024 points which is the largest size array 
allowed. It is possible to output or sample contin- 
ously more than 1024 points in the following manner: 


10 DIM A (3,255) 

20 DIM B (3,255) 

30 SAMP A,5,10000/F 

31 SAMP B,5,10000/F 
40 WAIT 

The two SAMP statements will sample 2048 points with 
almost no delay between points 

2. If a CLK statement has been used and is no longer 
needed a 

CLK "D" 

statement should be used to stop the clock to save 
processing time which would be used to continue 
servicing clock interrupts. 


3. An easy way to read in parameters in RTBAS IC is to 
use the front pannel knob and a simple sample state- 
ment 

SAMP Pl,J2f 

4. The trigger switches are very useful in controlling 
Program execution. The following short program allows 
a signal to be sampled and displayed continuously 

and then resampled when trigger switch 0 is pressed. 

5 Let F = 100 

10 ONI 0 

11 GOTO 30 

20 XYSEL "ABS" 

25 DIM A(3,255) 

30 SAMP A,4,1000/F 
40 YPLOT A 

50 GOTO 40 

- 54 - 






STEREO DISPLJC: OF VECTORCARDlOGRAl'IS 

by 

Jerome Ney Sheridan 


SUBMITTED IN PARTIAL PULFILLliENT OF THE 
REQUIREMENTS FOR THE DEGREE OF 
BACHELOR OF SCIENCE 
AT THE 

MASSACHUSETTS INSTITUTE OF TECHNOLOGY 
JUNE, 1971 


Accepted by, 


.1 ^ ^ r^_ _ a . - / _ j ^ _ 



Chairman, Departmental Undergraduate Thesis Committee 


BLANK NOT fUJiS) 




o 


1 


STEREO DISPLAY OP VECTORCARDIOGRAl'IS 


Submitted to the Department of Electrical Engineering on 
May fovirteenth 1971 in partial fulfillment of the require- 
nents for the degree of Bachelor of Science. 


ABSTRACT 


A three-dimensional display of the vectorcardiogram 
loop showing the locus of the tip of the csu^diac dipole 
vector was obtained through the use of a computer to give 
a stereoscopic projection of points on the loop. Features 
of the coz^^uter program are discussed and some typical 
reszilts are presented. 


Thesis Supervisors: 

Stephen E. Biims, Associate Professor of Electrical Engineering 
Roger G. Mark, Assistant Professor of Electrical Engineering 


2 


I 

1 

i 

( 



ACKNOWLEDGEMENTS 

The author is Indebted to Professor Stephen K. Bums 
and Professor Roger G. Mark for their guidance and 
patience. 

Appreciation Is also extended to J. B. Walters for 
his timely suggestions which saved the author many hours 
O of futile effort. 

The research for this thesis was done using the 
facilities of the Research Laboratory of Electronics. 



$ 

I 

I 



3 



Table of Contents 



Introduction 


P. 

k 

Vectorcardiography 

P* 

4 

Display Systems 

P. 

7 

The Display Program (VCGD) 

P» 

9 

Conclusions 


P. 

16 

Appendix A: 

Rotation aind Projection of 
Coordinate Systems 

P« 

17 

Appendix B: 

Use of Display Program (VCGD) 

P. 

23 

Appendix C: 

Basic Plow Charts for the Display 
Program 

P. 

29 

Appendix D: 

Computation of Areas 

P. 

34 

References 


P. 

37 







• 



■■ ' 

! 

1 ! 


k I 

STEREO DISPLAY OP VECTORCARDIOGRA^IS j 

I 

i 

Introduction ? 

The vectorcardiogram records the spatial orientation 
and magnitude of the cardiac dipole as It varies ttiTOughout 
the cardiac cycle » and Is known to contain clinically use- 
ful Information about the physiological status of the 
heart muscle. To date, however, the clinical usefulness 
of vectorcardiography has been limited. One limiting factor 
has been the lack of an adequate display system. The aim 
of this thesis project was to explore ways In v;hlch a 
computer could be used to fulfill this need for a better 
display system. The result Is a computer program which 
oomputes a stereo projection of the vectorcardiogram and 
displays it on an XY display device. , Other parameters 
of the displayed signal are also computed and displayed. 
Vectorcardiography 

The depolarization of the muscle of the heart which 
prefaces contraction is not an Instantaneous process. It 
is Initiated at one point and spreads throughout the myocardium. 

The resulting discontinuity between polarized and depolarized 
muscle produces an electric field which in turn creates 
potential differences between different points of the 
body surface. 

Modem scalar electrocardiography is based on the f 

• ft 

f 

following hypotheses concerning this process: I 

* i 

I 

! ^ 

I 


5 




(1) the heart acts as a dipole 

(2) this dipole Is located centrally In the chest 
and does not move dvirlng the cardiac cycle 

(3) the standard e].ectrode positions (figure 1) 
are equidistant (electrically) from the dipole 

(I4.) the human torso can be assumed to be shaped 
like a sphere. 

Of these, the dipole hypothesis retains universal 
acceptance. It has been shown by Prank and others, however, 
that ( 2 ), ( 3 ), and (I4.) are unwarranted^ They are all still 
used, though, since they seem to give adequate resiilts In 
conventional electrocardiography, and are definite aids 
to Intuition. 

Vectorcardiography follows directly from the dipole 
hypothesis. The varying voltages recorded at the body 
surfajs Imply that the dipole Is varying In magnitude 
and/or direction with time. If a set of "orthogonal” 
voltages cotild be derived from the body surface potentials, 
then the path of tha moving vector could be determined. 

If all four of the above-mentioned hypotheses were valid, 
then a set of orthogonal voltages coxild be derived from 
any four nonplanar points on the surface of the body. Instead 
it has been necessary to resort to empirical determination 
of the body <3 true electrical properties. This has led to 
the development of the so-called corrected lead systems. 




o 


The Frank System is one such system which has gained 

2 

widespread acceptance (figiire 2) . A resistive network is 
used to combine the signals from the seven electrodes in 
such a wav us to result in orthogonality. The three ortho- 
gonal leads correspond to coordinate axes oriented as 
shown in figure 3* The display progran to be described 
was written assuming a Frank System input. 


U 


O 



Figure 3* Frank coordinate system 


quantity. The locus of the head of this vector quantity 


describes a loop in space and is referred as the vector 
loop or as simply the loop* 


obtained by photographing an oscilloscope display repre- 
senting each of the orthogonal planes (the XI, XZ, and 
YZ planes }• Most conventional display systems require 
visualization of the loop from three distinct heartbeats 



6 


that were recorded in this manner. Mnor variations In 
the loop from beat to beat make the already dlfflctilt 
visualization process arduous Indeed. Also, the bimohing 
of points in the early part of the QJRS loop adds to the 
difficulty, and it is this early electrical activity 
which is frequently of greatest interest in the diagnosis 
of myocardial infarctions. Finally, the spatial angles 
and magnitudes of the instantaneous vectors are not readily 
obtained from most cxirrent display systems. 

Workers in the field have made numerous attempts to 
remedy this slttiation without much success. Stereoscopic 
display techniques wore developed in the early 1950 'a* 


but the stereo pictures produced were poor and the 


systems ctmbersome.' 


Coa^juteriscd methods 




ve been 


developed which utilize various cartographic schemes for 
representing the three-dimensional loops. However, the 
expense of the equipment used will probably prohibit the 
use of these methods clinically. A method for recording 
vectorcardiograms using the principles of holography 

7 

is an interesting recent development . It remains to be 
seen whether a practical system utilizing this technique 
can be developed. 

The display system vdilch is the subject of this 


thesis utilizes a combination of computer and stereo- 
scopic techniques to achieve a three-dimensional display 
of the vector loop. This display, which effectively allows 


MlHilRi 


9 


u 

j 

j 


I 

i 



vccto’** Xco^ to tc ctS'^T'vscl ^^or*i ^ on^XOf oXoc 
utilizes the power of the computer to obtain parameters 
of the signal considered relevant to the dlagxioale of 
heart disease. 

The display program was ingjlemented on a computer 
system utilizing a NOVA (Data General Corporation^ 

Southboro, 148.ssachusetts) as the basic processor. Peri- 
pheral hardware includes an X£ plotter, two CRT's, a 
teletype, a high speed reader /punch, and a ^12K. word 
disk. Also included is an analog interface consisting 
of a sixteen channel analog-to-digitaJ. (A/D) converter, 
four digital-to-analog (D/A) converters, and a character 
generator. Of these devices, the display program directly 
utilizes the analog Interface and the XH* display devices. 

The Display Program VCGD 

The display program can be thought of as operating in 
three distinct modes: 

(1) the Sample Mode 

(2) the Scalar Display Mode 

(3) the Stereo Display Mode. 

As explained in Appendix B, the different modes are 
selected by the switches on the front panel of the NOVA. 

In the Sample Mode, the vectorcardiograph leads 
are sampled at one thousand times per second (1 KHZ) and 
the samples are stored in a buffer. There is a simple level 
trigger which is used to signal the program when significant 


I 


10 



data has been acquired. A delay following the triggering 
event was also Incorporated so that Input following 
triggering could also be captured. The Initial Internal 
setting of the trxgger level and delay time are adeqiiate 
for most purposes, but It Is possible to vary these 
parameters while the program Is In operation (see Appendix B). 

The Scalar Display Mode was Incorporated to allow 
correlation of feat\ires of the stereo display to the 
more familiar scalar leads. Flgiire i|. shows typical scalar 
loads of a normal vectorcardiogram. The small vortical 
markers on each lead define the portion of the signal 
for which a stereo display will be computed. These markers 
constitute what Is referred to as the "cursor"; the position 
of the cursor Is varied via external controls (A/D converter 
Channels 2 and 3). 



Flgiire I4.. Scalar Display Mode. 

In the Stereo Display Mode a stereoscopic Image of 
the portion of the signal selected by the cursor Is produced. 
Reference axes are also displayed for convenience In Inter- 



I 



! 


11 

projection of the scalar leads seen In flgtire 1;.) 

The apparent orientation of the loop can be varied ex- 
ternally via Chsinnels 0 and 1 of the A/D converter. 

Varying the voltage on Channel 0 amo;mt8 to an apparent 
elevation above (or declination below) the XZ plane. 

Varying the input to Channel 1 causes apparent rotation 
about the Y axis. These transformations are achieved by 
the use of eqtiations which cause a rotational transform- 
ation of the coordinate system, followed by a plane projec- 
tion into two dimensions. 


! 


i 


I 




1l 

/! 

¥ 

j 


I 


i O 

A 

OHM Mtern 9M 

mtam Mcut< it. 4t m*u m. h 




Figure 5* Stereo Display Mode. Stereo projection of scalar 
leads shown in figure I;.. 


- -1 

I 


t 


12 




W WWA^W W^^WWV ^ • W ^ «^ •# W 

images of slightly different orientation. The difference 

between the two images is an offset rotation about the 
% 

vertical a:d.s(see ngvire 6}. 

< 1 . 



O 


Figure 6. Generation of the stereo effect. 

The equations governing the transforcation of a 
point with coordinates ix,j,z) into coordinates (x^»y^) 
and ^or display are given below: 

= (cos 6 )x -f (-sin • )z 
z^ s (cos * cos^ -sin # cos ^ sin /i }x 
+ (-sin ^ sin $ )y 

-^(-cos 0 cos ^ sin^ -sin # cos 0 )z 
*• +-(-cos ^)y 

•♦•(cos ® sin ^ )z 

where •« rotation angle about Yazis 

elevation (declination) angle above 
(below) the XZ plane 
/9 s. offset angle (»5*) used to generate 
the stereo effect. 

Appendix A contains a discussion of coordinate transform- 
ations and a derivation of the above equations. 


ORIGINAL PAGE IS 
OP POOR QUALIIY 




k ^ 


i 


( 

! 


i 

4 


13 



I 


Oth€»i» ftvw.llwble in the Stereo display 

Mode Include: 

1} X routine which colcxilates the area of the 
left stereo projection loop. Appendix D 
discusses the method used to calcxilate this area. 

2) k routine which generates a stereo pointer to an 
individual data point and confutes the spatial 
angles of the point. The position of the pointer 
is externally variable via Channel 7 of the A/D 
converter. 

3) k routine which finds the spatial angles of the 
mean vector of the displayed points. 
i|.) A featxire which allows the three standard views 
iX£, XZ« and YZ planes) to be readily displayed. 

Figure 7 demonstrates the output obtained when featxires 
(1), (2), and (3) are selected. "CURSOR WIDTH" refers 
to the number of samples cxirrently being displayed. 

"SAMPLE NO." refers to the muober of the sample relative 
to the beglzuilng of the cursor. The meanings of the other 
captions should be obvious. 

Figure 8 demonstrates the output obtainable through 
the use of feature (1|.) . The stereo views shown are all 
of the same loop. 


original Pagp to 


Figure 7. loop with area, 

features selected. 


mean vector, and pointer 


CURSOR 14! DTK iGS 

FtUHTER ANGLES* 32.' SAHFtE HO. SS 

MEAN UECTOR* 46 , 122 
area* 232.12 




t 


Plgtire 8. Throe standard 
views of the same loop 
selected via panel switches 
(see Appendix B). Small 
loops* such as these* 
readllj enable stereo 
viewing by crossing the 
eyes while staring at a 
midpoint between the two 
Images. 




K-l 







o 


1 




1 



I 

I 

i 



f 

t 

! 


! 


o 

I 

i 



16 

Conclusions 

Tl; 6 display program does a good Job of displaying 
vector loops. Compared to examples of loops found by 
conventional means. It does an excellent Job. The 
requirement of special equipment for viewing the stereo 
image is a handicap, but previous versions of the program, 
>dilch did not have stereo capability, demonstrated the 
dlfflciilties encovmtered in working with the plane 
projection alone. At this point a clinical evaluation 
of the system would be desirable in order to determine 
>diat direction (If any) future development should take. 

Whether this system or similar systems will ever 
be used clinically is open to question. The big question 
is one of economics. In spite of the relatively low 
cost of the equipment used, it would cost at least 
$15»000, perhaps more, to build a computer-based 
vector cardiograph from scratch. The price of hardware 
keeps dropping, but such a project will probably remain 
a fairly expensive proposition for some time to come. 
Another possibility is the development of special hard- 
ware to do the Job. A recirculating memory could be used 
to hold the signal and the transformation function coxild 
be implemented using nonlinear analog devices which are 
currently becoming available. The resulting display 
would be less versatile but probably a good deal less 
costly. 




1 

I 

I 


I 




APPENDIX A: ROTATION AND PROJECTION OP CO-ORDINATE SYSTEMS 


Introduction 


A three dimensional event is to be displayed on an 
XY display device. Equations of rotation and projection 
must therefore be developed which preserve the apparent 
spatial properties of the signal while reducing it to 
two dimensions. 


Method of Projection 


A non-perspective plane projection was chosen in the 
Interest of speed and ease of iiq}lementation. The more 

Q 

commonly used perspective method” was rejected because: 

(1) a great deal more computation tiuie would 
be required 

(2) it was felt that in this case, perspective 


would convey little or no depth information 


Figure A shows an example of a plane projection onto 


18 


o 




the X»Y* piano from an XYZ coordinate system. (The X'Y’ 
plane is parallel to the XY plane.) 

It can readily be seen from the figure that for each 
point the projected point is Just (x^,y^. In other 


words, this plane projection amounts to throwing away z^. 


Now suppose there is a collection of points {x„,y_,z^} 

n n n 


As in figure A, one can find a projection of these points 


onto the XY plane by simply throwing away the z^. The 


more general question, however, is the following: how 

does one find the plane projection onto an arbitrary plane? 
The easiest solution to this problem is to consider 


how the set {x ,y ,z ) can be transformed into a new 
n n n 


collection of points ( • The desired projection 


is then {x* ,y' ) . This transformation amovints to a 
n n 


rotation of coordinate systems. 
Rotation of Coordinate Systems 


The general eqviations for rotating an XYZ coordinate 

,9 


system can be foimd in any mathematics reference book and 
are as follows: 

X* » a^x ♦ b^y ♦ c^z (1 ) 

At (2) 


z * = a^x ^ b^y 4- c^z 


( 3 ) 


The a*s, b’s, and c’s represent direction cosines 
corresponding to the cosines of the angles between the new 



O 


axes and the old. 

• 

The above tranformation, while perfectly valid, presents 



problems in that the angles which yield the a's, b's, and 
c’s are inter-dependent. An independent set of throe 


angles cotild be selected, but the remaining problem of 
selecting a desired projection plane in terms 
of these angles is not easy. 

To got arotuid this problem, the equations for a trans- 
formation of slightly less generality were developed. The 
loss of generality is minor; projections into any arbitrary 


plane can still be obtained, the only difference being that 


in general, the projection cannot itself be rotated. This 


transformation will bo referred to as a polar transformation 


since the transformation parameters correspond to the angles 
of variation in a polar coordinate system. 

The polar transformation was developed by successive 
application of the familiar equations for transformation 
of a point (u,v) in a UV coordinate system which is rotated 


where u*,v* are the coordinates or the point in 
the new system (figure B), 


20 


The polar transformation can be thoii^t of as a 
sequence of transformations. The first transformation 

is a rotation about the Y axis (flKiire C). 

iV ' . 






Figure C. Rotation about the Y axis. 
Apply equations (I 4 .) and ($): 


X' a X cose - z sin e 


z' a X sine4-z cose ( 8 ) 

The second transformation corresponds to a rotation 


about the X» axis (figtire D), 




Figure D. Rotation about the X‘ axis. 
The resulting equations are: 
x" = X* 

y" a y» cos^*fz' sin ^ 
z” * sln^<hz' cos ^ 


( 10 ) 

( 11 ) 



21 


O 


o 



Substituting for x», y», and z» from equations (6), 
(7), and (8): 

x” e X cos 0 » z sin 6 (12) 

y" = y cos ^ +(z cos d + x sin 6 ) sin ^ ( 13 ) 

z" ■= -y sin i>4 (z cos e + x sin © )cos ^ ( 14 ) 

The equations for x” and y" represent the desired 
polar transformation with plane projection. 

Stereo Projection 

To achieve a stereo effect two projections of slightly 
different orientation are desired. Equations (12) and 
( 13 ) suffice for the right image of the stereo pair. 

The equations for the left image are obtained by rotating 
the ^system about the Y” axis (figure E). The 

angle of rotation,/? , is fixed. 



Figure E. Rotation about the Y” axis. 
Again applying equations (4) and ($): 
s x" cos^-z” sinp 

* y" 

« x" ain(l+z"cos ^ 


(15) 

(16) 
(17) 



SubstitutlTij from ( 1 ^), (T 3 )» 

^ A (x cos6 -z sln0 )cos P 

-(-7 sln^-f(z C0S64X sin e )cos ^ )sln 0 ( 16 } 
7 oos<|) 4 (z COS 64 X slne)sin^ (19) 

s (x cose -z sin 8 )sln ^ 

•f(-*7 sln^-f(z cosa-fx sine )cos^)cos8 (20) 
In the Prank coordinate system the Y axis corresponds 
to -Y In the above derivation. This Is fixed by substi- 
tuting (-y) for y In the final equations. Below are the 


transformation equations as actually Implemented: 
Xp s (cos e )x 4 (-sin e )z 

s (cos e cose -sin a cos ^ sin p)x 
+(-sln ^ sin /3 )y 

4(-cos e cos ^ sin /S -sin 6 cos^ )z 

= (sin e sin )x 4 (-cos <^)y 
4 *(cos e sin ^ )z 


( 21 ) 


( 22 ) 


(23) 


23 


Q 


APPENDIX B: USE OP DISPLAY PROORAM (VOQD) 


o 


Basic Operating Instructions 


INPUT 


OUTPUT 


All Inputs xnust be restricted to 2 V 
to avoid damaging the A/D converter. 


maxxmum 


Channels 0 and 1 are Interpreted as angles 
of rotation and elevation respectively (see 
figure 3). 

Channels 2 and 2 define cursor parameters 
position and length respectively. 

Channels and 6 are respectively the 

X,Y, and Z leads from a Prank System 
vectorcardiograph. (Input from other 
systems could possibly be used by changing 
the system axis definitions throxigh the use 
of Inverters . ) 

Channel 2 defines the pointer position. 


XY Display. (CRT Is the normal output 
mode. The plotter can also be used; 
see SWITCH 9 .under Program Featxires.) 


LOADING 


Load using binary loader. 


START/RESTART Switches set at 000003. 



2k 



Program Features 

The program has a number of features which are selected 
by the switches on the front panel of the NOVA. The following 
list contains a description of the fiinctlon of each of the 
switches. 


I 


O 

t 

I 


SWITCH SWITCH POSITION FUNCTION 
Up= 1 
Downs 0 

0 1 Selects sample mode. Input at 

Channels S$ sind 6 Is sampled at 
1 KHZ and stored In Semple buffer. 


1 


2 


3 


0 Exit from sample mode Is enabled. ^ 

Exit will occur at completion of I 

next triggering event (see figure 1). J 

1 Stereo display mode Is selected (see I 

f Igvire 3) . 

0 Scalar display mode Is selected (see 
f Igiire 2) . 

1 Locks display at cxu*rent setting 

of orientation controls (channels 0 
and 1). 

1 Selects standard view. 


k 

5 

6 

7 


1 Selects YZ standard view. 

1 Selects XZ standard view. 

1 Area of the loft stereo projection 

is computed and displayed. 

1 CosQJutes and displays angles of mean 

vector of the display. 


8 1 A stereo pointer to the data point 

selected via channel 7 Is displayed 
as well as Its angular orientation 
and sample nuzdber. 


G 


9 


1 


Use of the plotter Is enabled if 




25 


SWITCH SWITCH POSITION FUNCTION 
(Up = IjDown = 0) 

9«oontid SWITCH 0~0 (i«a. if tha program 

Is in either the scalar display 
mode or the stereo display msdo). 

When SWITCH 9 Is set to 1, the 
machine will halt. At this time 
the plotter should be txirned on and 
set up for plotting. After the 
CONTINUE switch Is pressed the com- 
puter will execute the plot and again j 

come to a halt. At this time plotting 
can either be continued by pressing 
CONTINUE or discontinued. If it is 
desired to discontinue plotting: first 
sot SWITCH 9 to 0 and tvirn the plotter 
off; them press CONTINUE and the j 

program will resume normal operation. | 


10,11 

12 1 
O 

■ 13,14,15 


Not used. 

Allows the manual setting of the 
trigger level and delay parameters. 
Operative only when program is 
in the sample mode (SWITCH 0s 1). 

Not used. 


ORIGINAL PAGE IS 
OF. POOR QUAUTV 


26 


O 


SAm.TTNQ MODE (SV/C?el) 


T 


Ilarkor indicates 
triggering 


O 


Delay > initially 500msec. Can be set 

externally (see SW9 under Program 
Features) . 

Level - threshold of 

trigger may be 
set externally 
(see SW9 under 
Program Features), 


Marker indicates end 
of delay. If at this 
time Sli/0B0 then trans> 
fer will be made to 
Scalar Display Mode. 



Figure 1. Sample Mode. SW0»1, (However if Sw0»0 program 

will remain in the Sample Mode until a triggering 
event plus a delay occxirs.) 



27 




stereo PleplaT Ilode (SU1-»1,SW0*0) 


Number of samples ctirrently 
being displayed. 


Angle format: 

1) angle from X-axis in XT plane 
' 2) angle from Z-axis 

I \ Number of sample relative 

] to cursor start. 


aiRSOR UiOTH / 

POINTER hHGLES: ^SAflFtE HO. 

MEAN UECTOR * A€T\22 

AREA> 2 moo 


original PACP tc 
OP POOR QV^ 


Varying the voltage on Channel 1 
causes apparent rotation about the 
Y-axis. / 


(JJ- 


Vai*ying the voltage on Channel 0 
causes the Y-axis to*'tilt**. 


Figure 3. Stereo Display llode 




iet'up butfi 
anoJei inler- 
•fo.t£.*fen4 
cJetk 


CKahI's ^ e. 1 


3WIS.«1 


count down 
delay 


(BUP) 


create* event 
morker 


eener«te ba«e 
ond fef'iqae'T* 
line* 


• 


i 



SAMPi 

£ : 


30 1 











SAMPLE MOVE) 


STEREO DtSPLAY MOPE) 


ENTER) 


(*to SAMPLE MODE.) 


(to STERiO DISPLAY MOOE) 


5 W 1«1 


(SCALE) 


S«f*\ple cursor 
C»rltr*ls ' 

scale attd 

CMrpute eonatoAi 


(Jiooee.) 


WMT 

o^t«r 

XY (n+erfoee 


S^Tor pUtter 


data s4^r<Acl> 

ffa&ilitates 

pUtt'ma) 

tenCrate Wlips 
i»Kiek w«rtc 
Ssrsor limits 




routine 'o#rites 
lext on XY 
display device. 



















Ctnstantx o««a | 
■te» 'Portion I 

»f caiMttU. bu#«r 


SftRT 


tan'i' 


(AGiLER) 


r*wtinc.elo«c 
tvivarse ^able 
l**k op t* 


.SOOrErJ 
• ftkCfHP 




.MVEC: ( EblTER 


ana 


H 


.DMOD 


S«tup deck 
set calculate 
■fl«aCCALPL6r^ 


(HOOEO 
5o<«»c 1 -♦ HALT, 
►<tc»* c*«%tmoe, 
set up 4or XY 
pUttev 


TSR 


read analeq moxf 
cKel's 0,1 / ^ 
ttp4kte. diApiAy 
retfttteM anaWs 


(.C.MP8E) 
root me «*<rp%r< 
nebD\Mput Mitk 
old. Sats CFLCr 
,1 d.'rt dT 1 . 


Cooler 

delay 

Cceioi 


ORIGINAL PAGE IS 
OF POOR QUALITY 


rpvtiAc tests 

selects standard 
Wietos XY, YE, 

X% v>csp«efr4clv 


take wect©r'_ 
Surn af portvarv 
selected 
cursor* 


(ADJO) 
scale mput 
to prevent 
«ri*K noetic 
















eempu'tas 
Conlrat Slacks 
««Ua .UkCSCT 
€id .TK.V<)Sr£SM 


e«irur usi 


routine to 
3 enerot« 

AXIS t»ntrai 

kl«ak drut ro 
ftewput* tvans* 
^ormotian to- 


(.StMCO) 
3'i^er on^te 

‘findis Slf*l <*rd 

/* /N#" 


cairput** ir««s-| 
form CoA.'^ifriAAtsI 


(rpy+ 4 ) 


■trans^ortX par^i 


AppiyS trAM»- 
•form •«jUA+‘«®«« 
4e eacit sample 


.100 

arf sample bv-^er 
Sale tied by corsar 
centrals 


reset CALPUe 

set 

pamteir and Area 

raotineS to reeai 
eolAtft iacALt) 


(to SAMPLE MODE) 


DLOCK 


(to SCALAR DISPLAY 


(TXNWTR 


SArnp 


routine to 
display eursan 
WidtR 


(BIMTO) 


Converts on 4 
dUpUys b*nar 
nom bcrs 


(pveo 


root i ne IS 

stereo painter ^ 
campute angles ^ 
Cban . 7 C#ntr»ls A 


CAFlMD^ 
•^inds a nicies 
jiven vector^ 


(.r^VBO) 


svin*t' 


onqle to meain' 
vectar, calls 


SWb*i 


(FAKE 


CWRvec') 


routine CAlcuUt 
Area and display 
valve f Calls 


Writes vectar 

an^les^ calls 

SlNTD 


BOFAt 


SDISP) 


i . • - T • 

me drawine 
«»b routine 


reset BCALl 


( yep' 
.TSTLP 
















Computation of Areas 

The problem is one of finding the area enclosed (figure 1} 

by a polygon described by a sequence of coordinates 

(x^y^,x,y, , . . . . Since the y-coordinates are 
o o 1 1 n n 

known in advance to be restricted to the range 
-5l2<yi5l2, the addition of 512 to each y-coordinate 
will resvilt in all of the y-coordinates being positive: 

^Vo*Vl'**'Vn^ (x^yQ+ 5 l 2 ,Xj^y^+ 5 l 2 ,...,Xj^y^+ 512 ) (1) 

This will amount to a shift upvrard in the X2f pleine, 
but the area enclosed by the loop will remain the same 
(flgvire 2) . 

Referring to figure 2, it can be seen that the areas 

of the shaded regions are respectively: 

Area A = (y^ ♦ 7i) 

_ 

Areas = ‘VV ‘iktis’ 

2 ' 

Since Xq^>x^, equation (2) will be a positive quantity 
>^lle equation (3) will obviously be negative since x^< x^. 

Proceeding around the loop in this fashion, stunming , 

the increments will result in the area of the loop since 

the negative increments will partially cancel out the 

positive increments (figure 3)» Clearly if the loop s 

were to be transversed in an opposite fashion one would 

end up with a negative Eirea. The result would be the 










(1) rrank, Goneral tlieory of hearw voctor projoctlcn. 


Circxilation Rea, 2:258, 1951;. 

(2) Prank, E, , The Imacie siirface of a homoc^eneoua torso, 

(3) Guyton, A, C,, Crowell, J, V/,, A atereovectorcardlo- 

graph , J. Lab, and Clin, Hed,, Vcl, i;.0, p, 726, 
1952, 

(i{.) Kwoczynskl, J, D, Keller, J, J, , and Esklel, J, S,, 
The Stereoscopic Ilethod and Oacllloacopic 
Arrangement for Spatial Vectorcardiography , 
Cardiology, Vol, 24 , p, 276, 1954* 


(5) Brinberg, L,, A New Display in Vectorcardiography , 
Am, Heart J,, Vol, 74> P* 855» 1967* 


(6) Computers, Electrocardiography and Public Health , 


(7) 


( 8 ) 


(9) 


USDIE;;, P,H,S, Publication HO, 1644, 1967. 
Cathey, W,T,, Bigelow, R.C,, and Shander, D,, 

Three Dimensional Display of a VectorcardiogrsLm , 
Proc, 7th Annual Rocky Mt, Bioeng, Sym,, p, 30» 

1970. 

Kubert,B,, Szabo, J,, Guilieri, S,, The perspective 
representation of functions of two variables , 
of the Assoc, for Comp. I'lach., Vol, 15# 

No. 2, April 1968, pp. 193-204. 

Standard Mathematical Table a , Chemical Rubber Co., 
Cleveland, Ohio, 1968. 


ig 

quality 


J 


