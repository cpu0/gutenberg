5b002 


REAL-TIME payload control and monitoring 

RfcAL llivit ON THE WORLD WIDE WEB 

Charles Sun ' and May Windrem n 


NASA Ames Research Center 
MS 244-19 

Moffett Field, CA 94087, USA 
FAX: 415-604-0673, 'E-mail: csun@mail.arc.nasa.gov 

n E-mail : mwindrem @mail.arc. nasa.gov 


ABSTRACT 

Worldwide Web (W3) technologies such as the Hypertext Transfer Protocol (HTJP) 

SSava S!-oriinSi P rogr g amnung environment offer a powerful yet re a^dy 

inexoensive framework for distributed application software development T ^s Pape 
SSS & design of a real-time payload control and monitoring system that was 
S5d with W?t£hU>gies at NASA Ames Research Center. Based 1 on Java 
c^)co i i svstem uses an event-dnven publish and 

3K5 Siwaar 

function Preliminary evaluation shows acceptable performance for some 
payloads, with Java'7portability and multimedia support identified as the most sigm 

benefit. 


1. INTRODUCTION 

The Space Station Biological Research Project (SSBRP) at NASA Ames Research « Center is 
respoiSble for Life Sciences research onboard the International Space S atioa SSBRP 
payloads include host systems and habitats. Examples of host s y s,en ® s Aaua tic 

filovebox and Habitat Housing Rack. Examples of habitats are Insect Habitat, Aqua 
Habitat and Cell Culture Unit. Because the research experiments involve many cipal 
OS.) providing eos.-elTecUve real-time ,d« tajd-d g“ 

visualiLioo capabilities io these Pis pose a signirieaiit eng^nng chJIenge One 
solution is to leverage existing World Wide Web (W3) technolopes such as Hypertext 
Transfer Protocol (HTTP) and the Java object-oriented programming environment. The 
^Z2^«e umversal (open standard) and low cost. This paper describes the design 
andmiplementation of a SSBRP payload control and monitoring system prototype 
leverages these technologies, along with the lessons learned. 


2. THE OPERATION CONCEPT 

Figure 1 shows the proposed system operation The te'bme'ry^wnj'nkpro vito^ 
jJL „„ TJDP/IP Dackets to the User Operations Facility (UOF) at Ames Kesearcn 


1 



51)002 




Figure 1. The SSBRP Operation Concept 


3. SOFTWARE REQUIREMENTS 

The nature of SSBRP operations suggests the following software requirements for the 
UOF: 


• Graphical User Interface 

• Snapshot & Motion Video (MPEG) Support 

• Rule-based Intelligence for Automatic Problem Detection 

• Data Management using Industry-Strength RDMS 

• Platform Independent Distributed Chents 

• Internet TCP/IP Data Distribution 

• On-Orbit Configuration Management Support 


4. A REVIEW OF EXISTING SOLUTIONS 

In the summer of 1997, we evaluated several Commercial Off The Shelf (COTS) software 
packages using the software requirements as evaluation criteria. Table 1 summarizes our 
findings. In conclusion, we found that the Internet W3-based Java programing 
environment to be better suited for our requirements than X- Windows based (RTworks, 
G2, Sammi) or Microsoft Windows based (LabWindows, LabView) COTS frameworks. 


2 





5b002 



m 

Video 

RuleBase 

Database 

Platform 

Network 

Config 

... 

RTworks 


N/A 

Good 

Fair 

Good 

Good 

N/A 

no 

Fair 

N/A 

Good 

N/A 1 

N/A 

Fair 

N/A 1 


I3B1 

N/A 

N/A 

N/A 

N/A 

Fair 

N/A 


fc5Hn 

N/A 

N/A 

N/A 

Fair 

N/A 

N/A 


Fair^ 

N/A 

N/A 

Fair 

N/A 

Fair 

N/A ' 


Good 

Fair 

Fair 

Good 

Good 

Good 

Fair 


Table 1. A Comparison of Existing Software Frameworks with Java 
(Note: N /A means Not Available.) 


5. SYSTEM DESIGN 

5. I THE REAL-TIME CONTROL AND MONITORING SUBSYSTEM 

This subsystem is responsible for distributing data and generating commands 
for UOF onerators and Pis at remote locations. An event-dnven *publish-and-subs 

.highly MUHe.ta.dy coopled frinnewotk that - h eaaly 
modified for diflerenl science eaperimenls over the IlfeOn* of Ihe Space Staron 
framework is depicted in Figure 2 using Unified Modeling Language (UML) nota 



Figure 2. A “White Board” Publish-and-Subscribe Object Model 


Under this framework, there are three major types of entities (classes). 
1 White Board (WB), the event-passing server. 

2. Data Publisher (DP), the data or command event source. 

3. Data Subscriber (DS). the event recipient. 


The White Board (WB) is the centerpiece of the model. A WB contains many Subjects 
SncTby m The messages passed from a DP to DSs am associated With umqne 
Suhiect names. A message can be Simple or Composite. A Simple Message coolants one 
object nub 6 as DonHe String. Integer A Compos, te Message comm, a serial, zed 
collection of objects. 


3 














































5b002 


TTie following sequence of events takes place in a typical message passing operation 

bet r. C WMefine^ * Subject SonWB (this causes a new Subject to be created). 

2. DS subscribes to Subject S on WB. 

3 DP publishes a message related to Subject S. 

4 Subject S forwards the message to all DS who subscnbe to s »*jec ^ 

This interaction is shown in the UML Object Interaction diagram m Figure 3 below. 



5 2 THE DATA STORAGE AND RETRIEVAL SUBSYSTEM 

is used. The subsystem stores video data as files, which are inaexea oy p~* 

entries in the database for retrieval. 


6 . THE JAVA SOLUTION 

The first Java prototype was completed using JDK 1.1 in December of \9&1. The 
development effort took two software engineers less than 4 months^ecause thej 

SS^l SSt. simplified many Graphical Us« Interface 
StrSSs and significantly reduced our development time. The util.ral.on of 
Java JDK and 3 rt party packages is summanzed in Table 2. 


4 




5 MX) 2 


Problem 

Solution 

White Board Framework 

RMI 

GUI Construction 

JavaBean — 

Configuration Management 

Obiect Serialization 


Java Media Framework 

Intellioent Aaent 

JESS 

Database integration 

JDBC 


Table 2. Selected Java JDK 1.1 and 3 rt Party Packages 


6.1 THE WHITE BOARD FRAMEWORK BASED ON RMI 

Remote Method Invocation (RMI) is a set of classes P rEi£ 

communicate with each other on the object level across a TCP/IP network, kmi m 
the details of bvte-level “socket” communication from Java programmers 1 he w nite 

flexible and easy-to-use. 


6.2 GUI CONSTRUCTION USING JAVABEANS 
JavaBeans is a standard for re-usable Java components. 

j^eL^se^aBS^ms wete developed spemMy fa contml^ 

using t£ JavaBeans technique. 

6.3 CONFIGURATION MANAGEMENT USING OBJECT SERIALIZATION 

Object Serialization is a convenient way to package many 

nhiect for transporting through RMI or persistent storage. One important task tor tne 
UOFtewctoSTclation of each habitat and the overall conft^Utmoftte onboard 
Wc Tn g mnlifv the task of updating and stonng configuration history, the 
SgJadoi of t£ entire payload Sty is represented as a tree data-str^ture and 
combined together as a single object using the Object Serialization feature of JDK 


6.4 MOTION VIDEO INTEGRATION USING JAVA MEDIA FRAMEWORK 

The system’s video playback capability is achieved using Ja y a Media 
(JMR which supports the MPEG-1 format and HTTP date transfer Cnrrendy JMF 
1.0 is available only on three computer platforms (Sun, Intel, and SGI). MPE 
support in future JMF release is unknown. 


5 




5b002 


t.S INTELLIGENT AGENT USING JESS 


The rule-based intelligent agent under development is based on JESS 
1 he rule oaseu uiwuigtm s manv cups documents and sample codes 

« - = - - - * 

publisher for warning messages. 


6.6 DATABASE INTEGRATION USING JDBC 

S^'SL&CSS.tS^ on a SG. server The database supports real- 
time data storage and off-line data retrieval. 



Figure 4. A Sample User-Interface Display (Top Level) 


6 



5b002 



Figure 5. A Sample User-Interface Display (Detailed Level) 


7. LESSONS LEARNED 

. Acceotable Performance for Low-Bandwidth Applications , , , . 

Om test stowed that Java provides acceptable performance for low-bandw.dth 
applications even under the interpreted environment of Java Virtual Machine. Under the 
c^stentSd of a few Kbytes per second, our client-side application runmngona 
Pentium/166 notebook PC on a lOBaseT LAN encountered 
This result encourages us to adapt Java to support the upcomi g 
has a small set of data points and a low sampling rate. 

• I nw-Cost Platform-Independent Software Development . . . 

W« S”-"‘y umprised by to high quality of free Java JDK software provufcd by 
Sim Microsystems^ and Silicoo Graphics Very few portability problems were encountere 
wtenweTr.culed to client-side Applet using the "apple, viewer- program on different 
computer platforms. 

• Anolet Deployment Difficulties within Web Browser Software 

Although our *Java “Applet” performs consistently within the “appletviewef 1*°^*™’ 
encounters problems nmning inside some Web Browser software. For example, ^crosoft 
I^t lLpCr does not support RM because RMI competes with Microsoft DCOM 
standard Apparently, this is a well-known problem and at least three solutions exist today 
(1) toLch Applet with “appletviewer” (2) install Java Activator, and (3) run the client 
program as an application with Zero Administration Framework. 


7 



5b002 


• Security Model Incompatibilities nK t 

Object Signing is problematic because many different standards exist. JDK J^> 
Signing will not work within Netscape Communicator. Netscape Object Sigmng 

work with Microsoft Internet Explorer. We will wait until further in the design pr 
allow the differences in the standards to be resolved or for a single standard to be 

accepted. 

• Non-Platform-Independent Features , , , , , 

Many of JDK’s most exciting new features, such as video playback ^ 
recognition, are not truly platform-independent at this time. For example Java Media 
Framework (JMF) is limited to the Intel, Sun, and SGI platforms. Speech Framework is 
limited to the Intel platform. Multimedia features are thus more ^useful 1 in die context of 
Local Area Network deployment, in which the client platform and bandwidth availability 

are well defined. 


8. FUTURE DIRECTION 


• Improving Event-Based IPC Model % . 

We plan to incorporate sophisticated capabilities such as Access Control, ^ Balancing 
and Fault Tolerance into our event-based IPC model. After we competed the first 
prototype in December of 1997, two commercial Publish-and-Subscnbe IPC frameworks 
appeared on the market: Tengah Even Model and JavaSpace. l] KSC ^ m ^ orks v P^ 1 ^ 
a higher level of IPC abstraction than RMI, and thus offer potential savings 

development time. 

• Improving Client-side Software Deployment Environment 

Because of die incompatibility problems with various Web browser software, we are 
searching for an alternative to the existing “Applet” environment for chent-si^software 
deployment. The two candidates are Java Activator, and Zero Administration Client 
(ZAO Java Activator allows the latest version of JDK to be installed as a plug-in module 
independent of browser software. ZAC provides a zero-maintenance framework for 
running Java application on the client-side, and completely removes the deploymen 
dependency on browser software. 

REFERENCES 

1 Space Station Biological Research Project (SSBRP) httn://pvrocis.arcmisa.gov 
2. HyperText Transfer Protocol. http://www.w 3 .org/hvpertextAVWW/Protocols 
3 Java Programming Language, http://ww w.iavascrf~t.com 

4. RTworks software framework. Talarian Corp. http://www.talanan.com 

5. G2, Gensym Corporation, http://www.gensym.com 

6. Sammi, Kinesix Corporation. http://www.kinesix.ccMn 

7. LabView & LabWindows, National Instruments, http://www.natmst.com 

8. JESS, httn://herzberg.ca.sandia.gov 

9. C Language Integrated Production System (CLIPS), 

http://www.isc.nasa.gov/~chps/CLJPS.html 

10. Java Media Framework, Speech API, JavaSpace , Java Activator 

htip7/java.s un.com/iavaone/iavaone9 8/sessions/ 

1 1 . Tengah JDBC & Zero Administration Client WebLogic Inc, http://www.weblofflc.com 

12. C. Sun L. Picinich and M. Windrem. Application of World-Wide-Web in Payload 
Operations , Fourth International Symposium on Space Mission Operations and 
Ground Data Systems (SpaceOps 96), Munich, Germany, 1996. 
pttjW^ww^»n££sa _de/extem^/mso/SpaceOps/233 /2 33.html 


8 


