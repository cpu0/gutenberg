STARS 


The BOEING Company 
D613-10410 


CDRL 000410 


AD-A240 476 



Software Technology for Adaptable, 
Reliable Systems (STARS) 


Submitted to: 

Electronic Systems Division 
Air Force Systems Command. USAF 
Hanscom AFB, MA 01731-5000 


Contract No: 
F-19628-88-D-0028 


CDRL 000410 

Enhanced Prototype Capability 
(Ada Source Code) 


March 7, 1989 


The BOEING Company 
Boeing Military Airplanes Division 
P.O. Box 7730 

Wichita. Kansas 67277-7730 


for public rclearic - distribution is unlimited 


Enhanced PrototjTje Capability 
(Ada Source Code) 
D613-10410 




REPORT DOCUMENTATION PAGE 


Form Approved 
OMB No. 0704-0188 


rfcaoao; w os cotecwn o’ riofmauor, ts •samaiM to t fw par raspans*. inokiorvj pit tan* O' insrwccons saarcnrij aifting cau aoifow ax mantanrig r»* oae r»a*o*c a’< 

coT^aii-'c in: f>t coteclor o' mfcxmacor, S«vj commants taga’dng P»s t -der nimaie or any opo* aspacJ o‘ Pis cotacbir. o' rbfmabor, rOjdng &;j 9 a«!ans for rao janj Os twroar, ic WasSncor- Haaoowao's 

3f'6c^:yait lor intofrratjori Oparalons anc fieportr, 1215 Jaflafson Dave HigfMaj', Suilt 12W, Arlngun. VA 22202-XSOZ, anc t Pia Office o' Marajamant and Bjdja: Paparwori fi«jc6x Proacl f07W-0i66 Vias^xiof. 


V AGENCY USE ON.Y (U»¥t bi»nk) 


.TTlE AND subtitle 

Enhanced Prototype Capability {Ada Source Code) 


2. REPORT DATE 

3. REPORT TYPE AND DATES COVERED 

07-MAR-89 



S. niNSING NJMBERS 

C; F19628-88-D-0028 


e AJTrtoa-S) 

Charles Eisner 
Kent Brummer 


7. PERFORMING ORGANIZATION NAME(Sj AND ADDHESS|ES) 

The Boeing Company 
Boeing Aerospace and Electronics Division 
Systems and Software Engineering 
P.O. Box 3999 

Seattle, Washington 98124 


S. SPONSOliNG MONITORING AGENCY NAMEISl AND ADORESS(ES) 

ESD/AVS 
Bldg, 17-04 
Room 113 

Hanscom Air Force Base, 01731-5000 


TA: Bq-12 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 


D-613- 10410 


10. SPONSORING MONITORING 
AGENCY REPORT NUMBER 



12A DiSTRiBimON . AVAILABILITY STATEMENT 12b. DISTRIBUTION CODE 

Approved for public release - distribution unlimited. A 



14, SUBJECT TERMS 

Keywords; stars 

Enhanced Prototype Capability 


15. NUMBER OF PAGES 



17. SECUR.TY CLASSinCATlON 
OF REPORT 

Unclassified 


NSN 754C-C1-280-5500 


18 SECURITY C.ASSIRCATION 
OF THIS PAGE 

Unclassified 


16. SECURTY CLASSmCATlON 

OF abstract 

Unclassified 


2C, LIMTAnONOF ABSTRACT 

None 


Standaid Form 298 (Rev. 2-69) 

^resc'ibeC bs ANS Sic 
298-102 





















STARS 


Prepared by: 


Prepared by: 


Re\dewed by: 

C 


Reviewed by: 


Re\aewed by: 


Approved by: 


The BOEING Company CDRL 000410 

D613-10410 


Enhanced Proto^^jT^e Capabilitay 
(Ada Source Code) 






Charles Eisner 

Repository Software Development 





Kent Brummer 
Repository Chief Programmer 





John M. Neorr 
Development Manager 

William M. Hodges 
STARS Program Manager 




\ 


Elnhanced Prototype Capability 
(Ada Source Code) 
D613-10410 










package Browser_Version_Description is 

Note: All Browser source code will be located in the directory: 

geech$duaO:[incrl.boeing.ql2.cdrl410.Browser] on the Boeing Wichita 
repository after 17-March-1989. 

CSCI Architecture 


The Ada static architecture of the Browser is depicted in figure 1. There 
are seven packages and the calling procedure (or driver). Each package 
encapsulates a group of logically related operations (or subprograms). 

The compilation order for the units are: 

STRING_UTILITIES — Provides operations on strings 

(in files string_utilitieK_.ada, 
st ring_uti1ities.ada) 


BROWSER_TYPES — Package containing common type derl i nns 

(in tiles farowser_Types_.ada, Browser_Types.ada) 


MACHINE OPS 


Package containing machine dependent operations 
(in files Machine_Ops_.ada, Machine_Ops.ada) 


FILE_OPS 

EXTRACT_OPS 

MENU OPS 



BROWSER OPS 


Package containing file i_o operations 
(in files File_Ops_.ada, File_Ops.ada) 

Package containing the operations for the search 
functions of the Browser (in files Extract_Ops_.ada, 
Extract_Ops.ada) 

Package containing the operations for the menu 
functions of the Browser (in files Menu_Ops_.ada, 
enu_Ops.ada) 

Package containing the executive typo operations for 
the Browser (in files Browser_Ops_.ada, 

Browse r_Ops.ada) 


BROWSER DRIVER 


— This is the main calling procedure for the Browser 
(in file Browser Driver.ada) 


Virtual_lnterfaces 

There are no virtual interfaces for this tool. 

Tool_Interfaces 

Browser does not interface with any other tool. The Browser interfaces 
with the user through procedures in TEXT_I0 package (ie. get_line, 
put line). 


--I Hardware_Interfaces 

--I The Browser requires an ASCII terminal. This Browser version was developed 

— I to operate on a VAX operating system (ver. 4.7). The VAX dependent 
--I operations are grouped in the Machine_Ops package and may be easily 

— I modified to operate under another operating system. 

— 1 I 

--IFunctional_Control and_Data_Flow 

The purpose of tHe Browser tool is to provide a non-VMS means of viewing 
VMS directories and VMS files. To navigate through any combination of 
possible VMS directory structures (directed graphs), the Browser uses the 
recursion feature of Ada. As the user descends down a directory 
structure, the Browser will call itself to present the user with a menu 
formatted display screen of the contents of the current directory. As the 
user ascends back up the directory structure, the previous directory is 
redisplayed. 






Browser Package Structure 






^ S1ring_U 

tilities j 



1 Fjrst_Non_ 

_Blank_Character_Position 

1 Last Non 
~ 1 

Blank_Character_Position 

1 R 6 move_Leading_And_Trailin 9 Blanks 

File_Type_ 

Js 

1 Full_File Name"] 

1 Just_File_Narne 

Back_Ot1 

|To Upper 
" 1 

1 

Skip_Until 

□ 




Figure 1 

Diagrams From: Software Components With Ada, Structures, Tools, and Subsystems, 
Grady Booch, 1987 



















The Browser does not move the users VMS directory default position. 
Instead, the Browser maintains a Virtual_Path variable that contains the 
VMS directory path for the current directory being displayed. 

The Browser presents the user with a menu formatted screen of a VMS 
directory by: 

1) creating a file (in a specified 'utility' directory) that contains a 
directory listing of the user specified directory 

2) reading from that file the contents of the directory 

3) placing each file/subdirectory name into a linked list 

4) deleting that file in the utility directory 

The Browser uses the linked list of file/subdirectory names to present 
these names to the user in a menu format. When the user 
chooses from the menu a file name, the Browser will allow the user to 
edit that file. When the user exits the edit session, the same menu is 
displayed to the user. When the user chooses from the menu a 
subdirectory, the Browser uses a recursive call to generate a new linked 
list for that subdirectory. By using the recursion feature in this way, 
the linked lists of previous directories viewed by the user are not 
de-referenced, and therefore do not have to be re-generated. This of 
course is only true for users current directed path, and not for previous 
directed paths. 

The Browser does require two files to exist before the Browser will 
execute. These files are: 

1) Menu_l - This file contains a list of the top level commands 
that the user may want to perform. An example of this file follows. 

— This is the first menu for the stars foundation 

— Browser tool. ** Make certain that this file remains version 11 

— (Do not delete these first three lines. Program dependent.) 

Review STARS Foundation Projects 

Help 

or 'X' to Exit (Return to MAIN MENU) 

— (Do not delete these last two lines. Program Dependent.) 

These commands are parsed in the procedure 

Browser_Ops.Execute_Main_Choice. To change, or add capabilities to this 
menu, see this procedure. 

2) Menu_2 - This file is a listing (dir/col=l) of the top level 
directory that will be browsed. The purpose of this file is to allow the 
top level file names, and sub directories to be annotated with a brief 
explanation of the contents oT the file/subdirectory. Here is an example 
of a Menu_2 file: 

—1 This is the second menu for the stars foundation 

--2 Browser tool. ** Make certain that this file remains version 1! 

—3 (Do not delete these first three lines. Program dependent.) 
ADSYSTECH.DIR;! -Ada Run-Time Support Services (ARTS) 

AETECH_VI.DIR;1 -Rapid search and Retrieval (RSR) 

BDM.DIR;! -Secure File Transfer System 

CSC.DIR,•! -Transparent Sequential_IO, & Ada Types Library 

— 1 

—2 (Do not delete these last two lines. Program Dependent.) 

To create such a file, follow these VMS commands: 

dir/col=l/output=usr$dsk:[top_level]menu_2.dat usr$dsk:[top_level_dir] 
edit menu_2.dat 

.. add annotations 

.. remove any files that you don't want the user to browse at top 
level 







exit the editor 

purge usr$dsk:{top_level dir]menu_2.dat 
rename usr$dsk:[top_leveT_dir]menu 2.dat;2 - 

usr$dsk:(top_level_dTr]menu_2.dat;1 

The procedure that calls the Browser, Browser_Driver.ada, specifies all 
of the menu names and their locations. 

(STLDD 3.4) 

I 

System_Environment 

The Browser was developed in Ada, and targeted to the VAX OS Version 
4.7. The Browser does 'with' the following VAX predefined package: 

LIB — Declarations of types, routines and return statuses for the 
General Purpose (LIB) facility of the VAX/VMS Run-Time 
Library. 

I 

System_Paramete rs 

The parameters that the installers/users will supply are found in the 
procedure Browser_Driver. These parameters are: 


Top_Level_Dir -- The top level directory to start browsing. 

Menu_l_Title — The screen title that you want displayed for menu 1. 

Menu_l -- The complete path name, file name for the first menu to 

be displayed. 

Menu_2_Title — The screen title that you want displayed for menu 2. 

Menu_2 — The complete path name, file name for the second menu 

to be displayed. 

Editor — Editor that the user will use. 

Utility_Directory — The directory that will be used for file operations 
described in the Functional_Control_and_Data_Flow section 
of this document. 


Reference CDRL410 for an example of how these parameters are declared and 
defined. 


System_Capacities 

Browser requires 227 blocks of storage space for the source code. The 
Browser is not memory intensive. 

I 

Installation Instructions 

The initiaX version (1) of the Browser was designed to run on the VAX 
version 4.7. To install this Browser tool on you system, simply copy the 
source code to your directory, create an ACS library, and compile and link 
it. To create the DEC ACS Ada library use a command similar to: 

$ ACS CREATE LIBRARY USR$DSK:[YOUR_DIR.ADALIB] 

After setting to this library, 

$ ACS SET LIBRARY USR$DSK:(YOUR_DIR.ADALIB] 

users can submit a batch file that has the following commands for 
compiling the Browser routines. 

$ ada String_Uti1ities_ 

$ ada String_Utilities 









$ ada Browser_Types_ 

$ ada Machine_Ops_ 

$ ada Machine_Ops 
$ ada File_Ops_ 

$ ada File_Ops 
$ ada Extract_Ops_ 

$ ada Extract_Ops 
$ ada Menu_Ops_ 

$ ada Menu_Ops 
$ ada Browser_Ops_ 

$ ada Browser_Ops 
$ ada Browser_Driver 
$ link Browper_Driver 
$ exit 

Before the Browser_Driver can be run, the user must create the two menu 
files that are required for the Browser to run successfully. See the 
functional_control_and_data_flow section of this document for 
instructions on how to create these files. 

There is one more file that is used for the 'escape to VMS' function of 
the Browser. The escape to VMS function allows the user to temporarily 
visit a VMS session. When the user browses a directory and wants to use a 
VMS command, they can exit the Browser and be placed into the directory 
they were viewing. This can be done at any time, and into any directory. 
Users have available to them all of the valid (non-privileged) VMS 
commands. They can move freely through the directories available. When 
the user is ready, they will return to the same Browser screen they saw 
when they left. To accomplish this operation, the Browser tool calls a 
VMS command file called VMS.COM. This VMS.COM file will be delivered with 
the Ada source code in CDRL410. This file may be used as is, or modified 
to meet additional needs. It does not require any compilation or other 
preprocessing. It must reside in the 'utilities directory' as defined in 
the calling argument to the procedure Browser Driver. 

I 

Inventory_of_CSCI_Contents 

Unit_Type Unit_Name File_Name(s) 

procedure Browser_Driver Browser_Driver .ada 

package Browser_Ops Browser_Ops_.a3a, 

Browser_Ops.ada 

package Browser_Types Browser_Types_.ada, 

Browser_Types.ada 

package Extract_Ops Extract_Ops_.ada, 

Extract_Ops.ada 

package File_0ps File_0ps_.ada, 

File Ops.ada 

package Machine_Ops MachTne_Ops_.ada, 

Machine_Ops.ada 

package Menu_0ps Menu_0ps_.ada, 

Menu_0pE.ada 

package String_Utilities String_Utilities_.ada, 

String_Utilities.ada 

VMS command file VMS.com 


Adaptation_Data 

Once the two menu files have been created and the Browser Driver has been 
compiled and linked, and the VMS.com file is in the 'utility directory', 
the user need only run the Browser driver executable. 

I 

Lessons Learned 


1) The following routines in the LIB package were very useful for 
executing a VAX Operating System command from an Ada program; 






Lib.Spawn - this routine will transfer control to the VAX OS and 
execute a specified VMS command, then return control back to \.ne Ada 
program and continue. 

Lib.Do_Command - this routine will transfer control to the VAX OS and 
execute a specified VMS command. It will not return to the Ada program. 

2) In order to temporarily leave an Ada program, and allow the user to 
enter a VMS session, the VMS 'inquire' command can be used. The inquire 
statement can be placed inside a loop to trap users VMS commands. The 
loop is exited when the users satisfies an 'exit loop conditional'. The 
following VMS commands are an example of this inquire-in-loop process. 
(The VMS.COM command file delivered in CDRL410 is based on this example.) 


$ 

$ 

$ 

$ 

$ 

$! 

$ 

$ 

$ 

$ 

$ 

e 

T 

$ 

$ 

$ 


ready; 

inquire/nopunctuation next "Browser_$" 
if next .eqs. "DONE" then goto isdone 
if next .eqs. "EXIT" then goto isdone 
if next .eqs. "X" then goto isdone 


(loop id 
!get users 
(exit loop 
lexit loop 
(exit loop 


VMS command 
when DONE 
when EXIT 
when X 


define/user_mode/NOLOG sys$input sysScommand 
set control=y 

on control_y then continue 
on severe_error then continue 

'next' (execute users command 

set nocontrol=y 

goto ready (goto ready 

isdone: 

exit (exit this command file 



Revision_History 
Part Number: 

Author: Charles Eisner (316) 526-4661 
Version; 1.0; 

Change Summary: Initial Release 
Date: 6-March-89 
I 

Distribution_and_Copyright 

This prologue must be included in all copies of this software. 
This software is released to the Ada community. 

Ihis software is released to the Public Domain (Note: 
software released to the Public Domain is net subject 
to copyright protection). 

Restrictions on use or distribution: NONE 


Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 

No warranties as to performance, merchantability, or fitness 
for a particular purpose exist. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using this 
software. 

In no event shall any person or orga.'.iration of people Le 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 

I 

end Browser Version Description; 










package Str ing_Utili '.es is 


Description 

This par.'.^ge contains string operations. 

I 

Requirements Satisfied 

This package does not meet any specific STARS requirements 

I 

Exceptions Raised 
None . 

I 

Contact 

Charles Eisner 

Boeing Military Airplane 

3801 S. Oliver (ms K80-13) 

Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 

Change Summary: Initial 
Date: 20-FEB-89 


Release 


Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 


Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 


No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 


Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 


In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


function 


First Non Blank Character Position 


(In_String : string) 
return natural; 


— I 


Description 

This function returns the first non blank character position in 
a string. 


function Last_Non_Blank_Character_Position (In_String : string) 






return natural; 


— I Description 

— I This function returns the last non blank character position in 

— I d string. 

— II 


function 


Remove_Leading_And_Trailing_Blanks 


(Fro!n_String : string) 
return string; 


--I Description 

— I This function removes leading and trailing blanks from a string. 


function File_Type_ls (In_String : string) return string; 
--I Description 

--I This function returns the file type of a vms file. 


function Full_Filc_Name (In_String : string) return string; 

--I Description 

--I This function returns the complete vms file name less the version, 


function Just_File_Name (In_String : string) return string; 

--I Description 

— I This file returns the file name minus the type and version. 


function Back_Off (In_String : string) return string; 

--I Description 

This function removes the last directory in a VMS path name, 
ex. New_Path := Back_Off("geech$duaO:[top.next ]") ; 
text io.put 1ine(New_Path); 
geecH$duaO:Ttop] 


function To_Upper (Input : string) return string; 

--I Description 

--I This function returns a string in upper case. 

function Skip_Until (Some String : in string; 

UntiT_Char ; in character) return natural; 

--I Description 

--I Scan the string until either the end of string is found or the 
--I specified character is found. Return the number of characters 
--I skipped. If the character was not found, return a value of 0. 



end String_Uti1ities; 




ckage body String_Utilities is 
I Description 

I This package contains string operations. 


Requirements Satisfied 

This package does not meet any specific STARS requirements. 


Exceptions Raised 
None. 

Contact 

Charles Llsner 
Boeing Military Airplane 
3801 S. Oliver (ms K80-13) 
Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revision History 
Part Number; 

Author; Charles Eisner 
Version: 1.0; 

Change Summary; Initial_Release 
Date; 20-FEB-89 

Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 

Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 

No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


function Fitst_Non_Blank_Character_Position (In_String : string) 

return natural is 

--I Description 

— I This function returns the first non blank character position in 
--| a string. 












Count : natural; 
begin 

for Index in In String'range loop 
Count inHex; 

exit when ln_String (Count) /= ' 
end loop; 

return Count; 

end First Non Blank Character Position; 


function Last_Non_Blank_Character_Position (In_String : string) 

return natural is 


--I 


Description 

This function returns the last non blank character position in 
a string. 


Count : natural; 
begin 

for Index in reverse In_String'range loop 
Count := Index; 

exit when ln_String (Count) /= ' '; 
end loop; 

return Count; 

end Last Non Blank Character Position; 


function Remove_Leading_And_Trailing_Blanks (From_String : string) 

return string is 

—( Description 

--1 This function removes leading and trailing blanks from a string. 

— M 


begin 

return From_String 

(First_Non_Blank_Character_Position (From_String) .. 

Last_Non_Blank_Character_Position (From_String)); 
end Remove_Leading_And_Trai1ing_Blanks; 


f. 


;tion File_Type_Is (In_String ; string) return string is 
Description 

This function returns the file type of a vms file. 


Count2, Countl : natural := 0; 
begin 

for Index in In_String'range loop 
Countl := Index; 
exit when ln_String(countl) = 
end loop; 

for Index in Countl..In_String'last loop 
Count2 := Index; 

exit when (ln_String(Count2) = ';') or (In_String(Count2) » ' '); 
end loop; 

return ln_String( (Countl + l)..(Count2 - 1)); 
end File_Type_Is; 











function Full_File_Name (In_String : string) return string is 

— I Description 

— I This function returns the complete vms file name less the version. 

--I I 

Countl : natural := 0; 
begin 

for Index in In String'range loop 
Countl := In3ex; 
exit when In_String(Countl) = 
end loop; 

return ln_String(1..(Countl - 1)); 
end Full File Name; 


function Just_File_Name (In_String ; string) return string is 

— I Description 

— I This file returns the file name minus the type and version. 

— I I 


Countl : natural := 0; 
begin 

for Index in In String'range loop 
Countl ;= In3ex; 
exit when In_String(Countl) * 
end loop; 

return ln_String(1..(Countl - 1)); 
end Just File Name; 


function Back Off ( In_String : string) return string is 
— I DescrTption 

— I This function removes the last directory in a VMS path name. 
— I ex. New_Path := Back_Off("geech$duaO;{top.next]"); 

— I text io.put 1ine(New_Path); 

— I geecH$duaOzTtop] 


Countl ; natural := 0; 
begin 

for Index in reverse In_String'range loop 
Countl Index; 
exit when ln_String(Countl) = 
end loop; 

return (ln_String(In_String'first..(Countl - 1)) & "]"); 
end Back Off; 


function To_Upper (Input : string) return string is 

— I Description 

— I This function returns a string in upper case. 

Temp : string (Input'range) :* Input; 

Interval : integer := character'pos('a') - character'pos('A'); 
begin 

for I in Input'range loop 





if (Input (i) >» 'a') and (input(i) <■ 'z') then 

Temp(i) := character'val(character'pos(Input(i)) - Interval); 
end if; 
end loop; 
return Temp; 
end To_Upper; 


function Skip_Until (Some String : in string; 

UntiT_Char : in character) return natural is 

— I Description 

— I Scan the string until either the end of string is found or the 

— I specified character is found. Return the number of characters 

— I skipped. If the character was not found, return a value of 0. 


Index ; natural := Some_String'first; 
Found : Boolean := false; 

begin 

while Index <= Some_String'last loop 

if Some String(Index) = Until_Char then 
Found := True; 
exit; 
end if; 

Index := Index + 1; 

end loop; 

if Found then 

return (Index ) ; 
else 

return (0 ) ; 
end if; 

end Skip_Until; 
nd String_Uti1ities; 







with text io; 

with Condition Handling 


package Browser_Types is 
Description 

This package contains the type declarations for the Browser operations. 


I 


Requirements Satisfied 

This package does not meet any specific STARS requirements. 


—i Exceptions Raised 

— I None. 

— I Contact 

— 1 Charles Eisner 

— I Boeing Military Airplane 

— I 3801 S. Oliver (ms K80-13) 

— I Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 

Change Summary: Initial_Release 
Date: 20-FEB-89 

Distribution and Copyright 

This Prologue must be included in all copies of this software. 
This software is released to the Ada community. 

This software is released to the Public Domain (Note: software 
to the Public Domain is not subject to copyright protection) 
Restrictions on use or distribution: NONE 


released 


Disclai 
This s 
withou 


mer 

oftware and its 
t any expressed 


documentation are provided "AS IS" and 
or implied warranties whatsoever. 


No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 


Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


^ype String_Access_Type is access string; 
type Menu_Line_Type; 

type Menu_List_Type is access Menu_Line_Type; 
type Menu_Line_Type is 
record 






Line ; String Access_Type; 

Next : Menu_LTst_Type :» null; 
end record; 


subtype Cond Value_Type is 
Bisplay_HeigEt : constant 
Pisplay_Width : constant 


Condition 
natural :» 
natural 


Handling.Cond_Value_Type 
24; 

80; 


—exceptions here 


Menu_To_Wide : exception; 
File_Cant_Open : exception; 


—generics here 


package lnt_Io is new text_^io. integer_io (integer); 




with Browser_Types; 


package Machine_Ops is 

— I Description 

— I This package contains the visible operations on the object Machine. 

All of the procedures/functions in this package are machine dependent. 
W-i They run on the VAX version 4.7. 

--I I 

— I Requirements Satisfied 

— I This package does not meet any specific STARS requirements. 

--I I 

— I Exceptions Raised 

— I None. 

— M 

— I Contact 

— I Charles Eisner 

— I Boeing Military Airplane 

— I 3801 S. Oliver (ms K80-13) 

— I Wichita, KS 67277 

— I I 

— I Implementation Dependencies and Assumptions: 

— I Currently, this package uses some of the predefined types from package 

Standard. 


Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 

Change Summary; Initia 
Date: 20-FEB-89 


Initial Release 


Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 

Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 

No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 

I 

procedure Do_Command (Status ; out Browser_Types.Cond_Value_Type; 

In_String : in string); 

— I Description 

--I This procedure calls the 1ib.do_command. 










procedure Spawn (Status : out Browser_Types.Cond_Value_Type 

In_String ; in string); 

— I Description 

— I This procedure calls the spawn command. 


procedure Turn_Off_Mess; 

— I Description 

— I This command turns off the messages to the screen. 


procedure Turn_On_Mess; 

— I Description 

— I This command turns on the messages to the screen. 


end Machine_Ops; 




with Lib; 


package body Machine_Ops is 

— I Description 

— I This package contains the hidden operations on the object Machine. 

I All of the procedures/functions in this package are machine dependent. 
W~\ They run on the VAX. 

--I I 

— I Requirements Satisfied 

— I This package does not meet any specific STARS requirements. 

— I I 

— I Exceptions Raised 

— I None. 

--I I 

— I Contact 

— I Charles Eisner 

— I Boeing Military Airplane 

— I 3801 S. Oliver (ms K80-13) 

— I Wichita, KS 67277 

— I I 

— I Implementation Dependencies and Assumptions: 

— I Currently, this package uses some of the predefined types from package 

Standard. 


Revision History 
Part Number: 

Author: Charles Eisner 
Version; 1.0; 

Change Summary; Initia 
Date; 20-FEB-89 


Initial Release 


Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution; NONE 

Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 

No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


procedure Do_Command (Status 

In_String 

— I Description 


out Browser Types.Cond_Value_Type; 
in string) Ts 



— I This procedure calls the lib.do_command. 




Teinp_String : Browser_Types.String_Access_Type 
■ egin 


Lib. Do_Comn\and (Status , Temp_St r ing .all); 
end Do Command; 


new string'(In_String) 


procedure Spawn (Status : out Browser Types.Cond_Value_Type; 

In_String ; in string) Is 

— 1 Description 

— I This procedure calls the spawn command. 


Temp_String : browser_Types.String_Access_Type new string'(In_String) 
begin 

Lib.Spawn(Status,Temp_String.all); 
end Spawn; 


procedure Turn_Off_Mess is 

— I Description 

— I This command turns off the messages to the screen. 


^tatus 

"begin 


Browser_Types.Cond_Value_Type; 


Lib.Spawn(Status, 

"Set message/noidentificat ion/noseverity/nofacilicy/notext"); 


end; 


procedure Turn_On_Mess is 

— I Description 

— I This command turns on the messages to the screen. 


Status : Browser_Types.Cond_Value_Type; 
begin 

Lib.Spawn(Status, 

"Set message/identification/severity/facility/text"); 

end; 


end Machine_Ops; 









with Text lo; 
with MachTne_Ops; 
with String_Utilities; 
with Browser_Types; 


t 


ackage FILE OPS is 
Description 

This package contains the visible operations for the object File 


I 

Requirements Satisfied 

This package does not meet any specific STARS requirements. 

Exceptions Raised 
None. 


I 


Contact 

Charles 


Eisner 


Boeing Military Airplane 
3801 S. Oliver (ms K80-13) 
Wichita, KS 67277 



Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard, 


Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 

Change Summary: lnitial_Release 
Date: 20-FEB-89 

Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution; NONE 


Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 


No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


procedure Create_Data_File( 

Utility_Dir ; in Browser_Types.String_Access_Type; 
File_Line : in Browser_Types.String_Acress_Type; 
User ; in Browser_Types.String_Access_Type; 






Virtual_Path : in out Browser_Types.String_Access_Type; 

File : out Browser_Types.String_Access_Type); 

Description 

This routine creates the vms file containing the directory listing 
of vms directory. It also updates the users virtual path (ie. what 
directory the user is currently viewing.) 


procedure Edit File ( 

VirtuaT_Path : in Browser_Types.String_Access_Type; 
Editor : in Browser_Types.String_Access_Type; 

Line : in Browser_Types.String_Access_Type) 

— I Description 

— I This routine edits a vms file. 

— I I 


procedure Add_Options ( 
File 
Ptr 

Number_Of_Choices 

Longest_Menu_Line 

— 1 Description 

--I This routine reads 

— I I 


: in Text_Io.File_Type; 

: out Browser_Types.Menu_List_Type; 

: out natural; 

: out natural); 

a vms file and loads them into a linked list. 


procedure Load_Menu_List { 

File_Name 
Ptr 

Data_File 
Number_Of_Choices 
Longest_Menu_Line 
— I Description 

I This routine calls the add_options routine after determining the file 
I that contains directory listing. 


in string; 

out Browser_Types.Menu_List_Type; 
in out Text_IO.File_Type; 
out natural; 
out natural); 


end File_Ops; 






package body File_Ops is 
' Description 

This package contains the internal operations on the object File 

I 

Requirements Satisfied 

This package does not meet any specific STARS requirements. 

I 

Exceptions Raised 
None. 

I 

Contact 

Charles Eisner 
Boeing Military Airplane 
3801 S. Oliver (ms K80-13) 

Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 

Change Summary: Initial_Release 
Date: 20-FEB-89 



Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 


Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 


No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 


Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 


In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


,rocedure Create_Data File( 

UtilTty_Dir 
File_Line 
User 

Virtual_Path 
File 


in Browser_Types.String_Access_Type; 
in Browser_Types.String_Access_Type; 
in Browser_Types.String_Access_Type; 
in out Browser_Typep . St-r ing_Access_Type ; 
out Browser_TypGS.Stiing_Access_Type) is 




Description 

This routine creates the vms file containing the directory listing 
of vms directory. It also updates the users virtual path (ie. what 
directory the user is currently viewing.) 


Temp_File 
Status 
File_Name 
Temp_Buff 


Browser_Types.String_Access_Type; 
Browser_Types.Cond_Value_Type; 
Browser Types.String Access_Type; 
string(T..80) := (otEers => ' '); 


begin 


-- get file name 

File_Name := new STRING'(String_Uti1ities,Just_File_Name(File_Line.all)) ; 

-- prepare to delete the ' ] ' 

Temp_Buff(1..Virtual_Path.all'last) Virtual_Path.all; 

-- build virtual path 
Virtual_Path := new string'( 

Temp_Buff(1..{Virtual_Path.all'last - 1)) & & File_Name.all & 

— file will be in the the utility directory 

Temp_File :* new string'(Uti1ity_Dir.all & File_Name.all & User.all & ".dat"); 
File Temp_File; 

-- create data file at the utility directory 
Machine_Ops.Spawn(Status,"dir/col=1/output=" & 

Temp_File.all & " " & Virtual Path.all); 


^exception 
when others 
null ; 


= > 


end Create Data File; 


procedure Edit_File ( 

Virtual_Path : in Browser_Types.String_Access_Type; 

Editor ; in Browser_Types.String_Access_Type; 

Line : in Browser_Types.String_Access_Type) is 


--I Description 

--I This routine edits a vms file. 


Execute_String : Browser_Types.String Acress_Type; 
Status : Browser~Types.Cond_Value_Type; 

File_Name : Browser_Types,String_Access_Type; 

begin 


— get file name 

File_Name := new STRING'(String_Uti1ities.Full_File_Name(1ine.all)); 

-- build command string 

Execute^String := new string'(Editor.al1 & "/readonly " & Virtual_Path.ai1 & 
FTle_Name.all); 

-- edit the file 

Machine_Ops.Spawn(Status,Execute_String.all); 


end Edit File; 




procedure Add_Options ( 
File 
Ptr 

B Number_Of_Choices 

W Longest Menu Line 


in Text_Io.File_Type; 
out Browser_Types.Menu_List_Type; 
out natural; 
out natural) is 


— I Description 

— I This routine reads a vms file and loads them into a linked list. 

— I I 


Current 

Back_Ptr 

Temp_Longest 

Temp_Choices 

One_Line 

New String 

Bufler 

Test_Buffer 

Last_One 

Add_Option_Prob 

begin 


Browser_Types.Menu_List_Type; 

Browser_Types.Menu_List_Type; 
natural := 0; 
natural := 0; 

Browse r_Types.String_Access_Type; 

Browser Types.String_Access_Type; 

string(T..Browser_Types.display_width) (others -> 

string(1..Browser_Types.display_width) (others -> 
natural := 0; 
exception; 


Current := new Browser_Types.Menu_Line_Type ; 

Back_Ptr := Current; 

Ptr ;= Current; 

--delete the first three lines 
for I in 1..3 loop 

if Text_Io.End_Of_File(File) then 

Current.Line := new string'("There are no files in this directory."); 
^ Temp_Longest := 37; 

Terpp_Choices := 1; 
else 

text_io.skip_line(file => File, spacing => 1); 
end if; 
end loop; 

— read each line from the file 

while not text_io.end_of_file (File) loop 

text_io.get_line( 1 ile => File, 

item => Buffer, 
last => Last_One); 

-- if this is the second to last line (ie equal to temp_buffer) 
if Buffer = Test_B')ffer then 
Back_Ptr.Next := null; 
exit; 
end if; 

Temp_Choices ;= Temp_Choices + 1; 

One_Line :* new string'( 

String_Uti1ities,Remove_Leading_And_Trai1ing_Blanks(Buffer)); 

— is this the longest one 
^if Temp_Longest < One_Line.all'length then 
^ if One_Line.all'length > 80 then 
Temp_Longest := 80; 
else 

Temp^Longest := One_Line.all'length; 
end if; 
end if; 







Current.Line :« new string'(One_Line.all) 


if 


end 


not text_io.end_of_file ( 
Current.Next :* new Brows 
Back_Ptr Current; 
Current Cur rent.Next; 
Buffer(1..Buffer'last) : = 

if ; 


File) then 

er_Ti’pes .Menu_Line_Type 
(others => ' ' ); 


end loop; 


Longest_Menu_Line := Temp_Longest; 
Number_Of_Choices Teinp_Choices; 

exception 

when others => 

raise Add_Option_Prob; 

end Add_Options; 


t ( 


es 

ne 


Is the add_options routine after determining the file 
rectory listing. 


Types.Menu_List_Type; 

begin 

— open the data file 
begin 


text_io.open ( 

file => 

Data File, 


mode => 

text io.in file. 

exception 

name »> 

File Name); 

when others 

= > 



raise Browser_Types.File_Cant_Open; 

end; 

Add_^Options (Data_File, Temp_Ptr, Temp_Choices, Temp_Longest) ; 

Ptr :■ Temp_Ptr; 

Number_Of_Choices := Temp_Choices; 

Longest_Menu_Line := Temp_Longest; 

nd Load_Menu_LiSt; 

nd File_Ops; 



; in string; 

; out Browser_Types.Menu_List_Type; 
; in out Text_IO.File_Type; 

: out natural; 

; out natural) is 


procedure Load_Menu_Lis 
File_Name 
Ptr 

Data_File 
Numbe r_Of_Choic 
Longest_Menu_Li 

— I Description 

I This routine cal 
that contains di 


Temp_Choices 
Temp_Longest 
Temp Ptr 


natural; 
natural; 
Browser 











with String_Utilities; 
with Brcwser_Types; 


package Extract_Ops is 
Description 

This package contains the visible operations on the object Extract. 
Requirements Satisfied 

This package does not meet any specific STARS requirements. 


— I Exceptions Raised 

— I None. 

— I Contact 

--I Charles Eisner 

— I Boeing Military Airplane 

— I 3801 S. Oliver (ms K80-13) 

— I Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revisi 
Part 
Autho 
Versi 
Chang 
Date: 


on History 
Numbe r: 
r: Charles 
on: 1.0; 
e Summary: 

20-FEB-89 


Eisner 

Initial Release 


Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 


— I Di s 

— I Th 

wi 


claimer 

is software and its 
thout any expressed 


documentation are provided "AS IS" and 
or implied warranties whatsoever. 


No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


kocedure Add To 


_Extract_Buffer 
Buffer 

Menu Used : 
Displayed : 
Virtual Path ; 


( 

i n 
in 
in 
in 


out string; 

Browser_Types.Menu_List_Type; 
natural; 

Browser_Types.String_Access_Type); 


— I Description 





This procedure will add one to N file names to a buffer (linked list). 




procedure Write_Buffer; 

I-- I Description 

--I This procedure writes the buffer to a file in the users directory. 

— II 


procedure Extract_Control; 

— 1 Description 

— I This procedure is controls the user's interface to the extract 

buffer. 


end Extract_Ops; 






with Calendar; 
with Machine_Ops; 
with String_Utilities; 
with text_io; 
ith Browser_Types; 

se Browser_Types; — Using this package to gain visibility to the type 

— declaration operations only; 


package body Extract_Ops is 
Description 

This package contains the hidden operations on the object Extract. 

I 

Requirements Satisfied 

This package does not meet any specific STARS requirements. 

I 

Exceptions Raised 
None. 

I 

Contact 

Charles Eisner 
Boeing Military Airplane 
3801 S. Oliver (ms K80-13) 

Wichita, KS 67277 



Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined 
Standard. 


types 


from package 


Revisi 
Part 
Autho 
Versi 
Chang 
Date: 


on History 
Numbe r: 
r: Charles 
on: 1.0; 
e Summary: 

20-FEB-89 


Eisner 

Initial Release 


Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 


Disclaimer 
This softwa 
without any 


re and 
expre 


its 

ssed 


documentation are provided "AS IS" 
or implied warranties whatsoever. 


and 



No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 







Head_Ptr 
Back_Ptr 
Number_in List 
Longest_LTne 


Browser_Types.Menu_List_Type; 
Browser_Types.Menu_List_Type; 
natural; 
natural; 


use Text_Io; 

procedure Help_Extract is 
— I Description 

--I This is the help screen for the extract operations, 

--I I 


Buffer : 
Length : 

begin 

— these 

new_page; 

put_line( 

new_line; 

put_line( 

put_line( 

put_line( 

put_line( 

put_line( 

put_line( 

put_line( 

put_line( 

put_line( 

put_line( 

put_line( 

^ new_line; 

W put_line( 
put_line( 
put_line( 
new_line; 
put_line( 
put_line{ 
new_line; 
put("pres 
get_line 
new_line; 
put_line( 
put_line( 
new_line; 
put_line( 
put_line( 
new_line; 
put_line( 
put_line( 
put_line( 
new_line; 
put_line( 
put_line( 
new_line; 
new_line; 
put("pres 
get_line 

jk new_page ; 


string (1. .80 
natural; 


io routines are from the Text_lo package 
"HELP - "); 

" This is your Selection Buffer. It contains the "); 

" files you have choosen from the menus that you wish"); 

" to reuse. As you exit this Browser Session, your buffer"); 

" will automatically be written to your directory. The "); 

" file name will be STARS_BROWSER_current-time.TXT. You"); 

" should use this file to help you remember what units"); 

" you want to reuse. If your Buffer is empty, nothing"); 

" will be written to file. To obtain a copy of your"); 

" selected repository files, the user must use the"); 

" 'User Request' option available on the STARS Repository"); 

" menu."); 

" DE ;= Delete Entry - If you wish to delete one of the "); 

" entries from your list, type DE and the number you"); 

" wish to delete."); 

" AE := Add Entry - To add an entry, type AE, and answer"); 

" the prompt with the file you wish to receive."); 

s RETURN for more help"); 

(Buffer , Length); 

" CB ;= Clear Buffer - To delete all entries in your list"); 

" type CB and return."); 

" X - This will exit the current menu screen and display the"); 

" previous menu."); 

" RETURN - by itself will either display the next screen in a"); 
" larger menu, or it will redisplay the same smaller"); 

" menu. (Larger « more than 18 choices.)"); 

" HELP - This command can be entered any time. This screen "); 

" will appear as a result of the help command."); 


s RETURN to continue"); 
(Buffer, Length); 


end Help Extract; 


procedure Write Buffer is 




— I Description 

— I This procedure writes the buffer to a file in the users directory. 


’^i le_Name 
kurrent_Ptr 
rear 
Month 
Day 

Seconds 
Out File 


begin 


Browser_Types.String Access_Type; 

Browser_Types.Menu_LTst_Type :■ Head_Ptr; 

calendar.year number; 

calendar.montH_number; 

calendar.day_number; 

calendar.day_duration; 

text_io.file_type; 


— are there some files in the buffer 

if (Number_In_List > 0) and (Head_Ptr /- null) then 

— what is the time for a unique file name 
calendar.split( 

date => calendar.clock, 

year -> Year, 

Month => Month, 

Day => Day, 

Seconds => Seconds); 


— use the seconds to create a unique file name 
File_Name new string'("SyS$LOGIN:STARS_BROWSER-" & 

integer'image(integer(Seconds)) & ".TXT"); 

— create the file 
text_io.create( 

file *> Out_File, 

Mode *> text_io.out file, 
name => File_Name.all); 

— prolog the file 

text_io.put(Out_File,"This is the list of files/directories that you"); 

text_io.put line(Out_File," chose from a "); 

text_io.putTOut_File,"STARS_BROWSER session on "); 

text_io.put(Out_File,integer'image(Month)); 

text_io.put(Out_File,"/"); 

text_io.put(Out_File,integer'image(Day)); 

text_io.put(Out_File,"/"); 

text_io.put(Out_File,integer'image(Year)); 
text_io.put_line(Out_File,"."); 
text_io.new_line(Out_File,3); 

— load the file with the buffer 
while Current_Ptr /» null loop 

text_io.put_line{Out_File,Current_Ptr.Line.all); 
text_io.new_line(Out_File); 

Current_Ptr Current_Ptr.Next; 
end loop; 

text_io.close(Out_File); 
text_io.new_line(13); 

text_io.put_line("Your buffer is being written to the file named:"); 
text_io.put_line{" " & File_Name.all); 

text_io.new_line(11) ; 

Delay 3.0; 


end if; 


end Write Buffer; 





procedure Choose_Option ( 

. Buffer : 

m Number_Of_Choices : 

^ Choice : 

Buffer_Status : 

— I Description 

— I This routine gives the 


in string; 
in natural; 
out natural; 
out boolean) is 

integer value of the user choice 


Temp_Choice 

Length 

lnteger_Choice 


integer; 
natural; 
integer; 


begin 

begin 

— looking for an integer 

Browser_Types.int_io.get (Buffer, lnteger_Choice, Length); 


exception 

when others *=> 

— integer within range not entered 
declare 

package Flt_Io is new text_io.float_io (float); 

Float_Choice ; float; 

begin 

— was a float entered? 

flt_io.get (Buffer, Float_Choice, Length); 

— convert float to integer 
Integer_Choice integer (Float_Choice); 
exception 

when others => 

— nothing meaningful entered 
Integer_Choice ;■= 0; 

end ; 

end; 


Temp_Choice :* Integer_Choice; 

if not (Temp_Choice <« Number_Of_Choices and Temp_Choice > 0) then 
Buffer_Status ;= false; 
else 

Buffer_Statu? ;= true; 
end if; 

Choice := Temp_Choice; 
end Choose_Option; 


Procedure Add (File_Name : in Browser_Types.String_Access_Type) is 

— I Description 

— I This procedure adds a single filename to linked list. 


Current_Ptr : Browser_Types.Menu_List_Type; 

^egin 

— when head ptr is null - put the file_name in the first cell 
if Head_Ptr * null then 

Current_Ptr := new Browser_Types.Menu_Line_Type; 

Current_Ptr.Line ;= new string'(File_Name.all); 

Current Ptr.Next := null; 




Head_Ptr :■ Current_Ptr; 

Back_Ptr := Head_Ptr; 

— else put the file name at the end of the list 
else 

Current_Ptr := 

Current_Ptr.Line := 

Current_Ptr.Next 
Back_Ptr.Next := 

Back_Ptr 
end if; 

— Add one to the number in the list 

Number In List Number In List + 1; 


new Browser Types.Menu_Line_Type; 
new string'TFile_Name.all); 
null; 

Current_Ptr; 

Current Ptr; 


— is this the longest one 

if Longest_line < Current Ptr.Line.all'length then 

if Current_Ptr.Line.alT'length > Browser_Types.Display_Width then 
Longest_Line :« Browser_Types.Display_Width; 
else 

Longest_line := Current_Ptr.Line.all'length; 
end if; 
end if; 


end Add; 


procedure Add_To_Extract_Buffer( 

Buffer : in 

Menu Used : in 

Displayed : in 

^ Virtual Path ; in 


out string; 

Browser_Types.Menu_List_Type; 
natural; 

Browser_Types.String_Access_Type) 


is 


p-\ Description 

— I This procedure calls the add routine to add a range of file names to the 

— I linked list (ie buffer). 


--I I 


Temp_Cboice_l 

Temp_Choice_2 

Skip 

Buffer_Status 

Menu_Ptr 

File_Name 

Vir t_Fi1e_Name 

Index 

Temp String 
VertTcal_Spacing 

begin 


natural := 0 
natural 0 
natural ;= 0 
boolean :» t 
Browser_Type 
Browse r_Type 
Browser_Type 
natural := 1 
Browser_Type 
integer := 0 


rue; 

s.Menu_List_Type Menu_Used 
s.String_Access_Type; 
s.String_Access_Type; 

7 

s.string_Access_Type; 


— remove blanks 
Temp_String := new string'( 

String_Utilities.Remove_Leading_And_Trailing_Blanks(Buffer)); 
Buffer(1..Temp_String.all'last) ;= Temp_String.all; 


— find a for a range of text 

Skip :■ String_Utilities.Skip_Until(Buffer,; 


If 


Range of extractions 
Skip > 0 then 

— extract choice from buffer 
Choose_Option( 

Buffer *> 

Number Of Choices => 


Buffer(4. 
Displayed 


(Skip - 


1 ) ) , 











— verify if buffer choice was in the displayed yet. 
if Buffer Status - true then 


— get the file from the Menu List_Type 
for i in 1..(Temp_Choice_l - T) loop 
Menu_Ptr Menu_Ptr.Next; 
end loop; 


— store the file name 
File_Name := 

new string'(String_Uti1ities.Full File Name(Menu Ptr.Line.all)) ; 
Virt_File_Name := new string'(VirtuaT_PatR.all & FiTe_Name.all); 

Add(Virt_File_Name); 

text_io.new_line(12); 

text_io.put_line(Fiie_Name.al1 & " added to buffer."); 
text_io.new_line(12); 
delay 2.0; 

text io.new line(12); 


end if; 
end if; 


— buffer choice was not valid 
if Buffer_Status = false then 
Temp_String ;= new 

string'(String_Utilities.Remove_Leading_And_Trailing_Blanks(Buffer)) 
text_io.new_line(12); 

text_io.put("Sorry... " & Temp String.all); 

• text_io.put_line(" is not a vali3 command."); 

text_io.put_line("Type HELP for an explaination of the valid commands.") 
text_io.new_line(12); 
delay 2.0; 

text_io.new_line(12); 
end if; 

end Add To extract Buffer; 


Procedure Delete (Entry_Num : in Natural; 

Last_Current : in out Browser_Types.Menu_List_Type 

— I Description 

— I This procedure will delete a link from the buffer. 


— I I 


is 


Temp_Back : Browser_Types.Menu_List_Type := Head_Ptr; 

Current_Ptr : Browser_Types.Menu_List_Type ;= Head_Ptr; 

begin 


for i in 1..(Entry_Num - 1) loop 
Temp_Back := Current_Ptr; 
Current_Ptr := Current_Ptr.Next; 
end loop; 


if Current_Ptr = Last_Current then 
if Number_ln_List = 1 then 
Head_Ptr ;= Null; 

Back_Ptr := Head_Ptr; 

^ a ? t" ''>1rrr>n^ ;= M r> a fi Ptf; 

else 

if Current Ptr = Head Ptr then 






Choice 

Buffer Status 


=> Temp_Choice_l, 
=> Buffer Status); 


if Buffer_Status * true then 
Choose_Option( 

Buffer => Buffer((Skip + 1)..Buffer'last), 

Number_Of_Choices => Displayed, 

Choice ■=> Temp_Choice_2, 

Buffer_Status => Buffer_Status); 

end if; 

if Buffer_Status = true then 

if Teinp_Choice_2 >= Temp_Choice_l then 

if (Temp_Choice_2 - Temp_Choice_l) > 18 then 
Vertical_Spacing := 1; 
else 

Vertical_Spacing := (Browser Types.Display Height - 
(Temp_Choice_2 - Temp_ChoTce_l) - 4) / 2^; 
end if; 

for i in 1..(Temp_Choice_l - 1) loop 
Menu_Ptr ;= Menu_Ptr.Next; 
end loop; 

— store the file name 
File_Name := 

new string'(String_Utilities.Full_File Name(Menu_Ptr.Line.all)); 
Virt_File_Name new string'(Virtual_Path.all & File_Name.all); 

text_io.new line{text_io.count (Vertical_Spacing +8)); 

Add(Virt_FiTe_Name); 

text_io.put_line(File_Name.all & " added to buffer."); 

for i in 1..(Temp_Choice_2 - Temp_Choice_l) loop 

Menu_Ptr := Menu_Ptr.Next; 

— store the file name 
File_Name ;= 

new string'(String_Utilities.Full File Name(Menu Ptr.Line.all)) ; 
Virt_File_Name new string'(VirtuaT_PatH.all & FiTe_Name.all); 

Add(Virt_File_Name); 

text_io.put_line(File_Name.all & " added to buffer."); 
end loop; 

text_io.new_line (text_io.count (Vertical_Spacing)); 
delay 2.0; 
else 

Buffer_Status false; 

end if; 

end if; 
else 

— extract choice from buffer 
Choose_Option( 

Buffer »> Buffer(4..Buffer'last), 

Number Of Choices => ni':r]ey»'d, 

Choice => Jemp Choice 1, 

Bvffer Status => Buffer Status); 



mn 


Head_Ptr := Head_Ptr.Next; 
Last_Current Head Ptr; 

elsif Current_Ptr - BacTr_Ptr then 
Back_Ptr ;= Temp_Back; 

Last_Current Back_Ptr; 

else 

Teinp_Back .next Current_Ptr .next; 

end if; 
end if; 
else 

if Number_In_LiSt = 1 then 
Head_Ptr := Null; 

Back_Ptr := Head_Ptr; 
else 

if Current_Ptr - Head_Ptr then 
Head_Ptr := Head_Ptr.Next; 
elsif Current_Ptr = Back_Ptr then 
Back_Ptr :•« Temp_Back; 

Back_Ptr.Next := null; 
else 

Teinp_Back .next := Cur rent_Ptr .next; 
end if; 
end if; 
end if; 

— Subtract one to the number in the list 
Number_In_LiSt :»■ Number_In_List - 1; 

— If buffer if empty, zero the longest line 
if Number_In_LiSt = 0 then 

Longest_Line := 0; 
end if; 


d Delete; 


ESS8SSS35S3 



Buffer 

; 

in 


Last Curren 

t : 

in 

— 1 Description 

DispTayed 


in 

— 1 This procedure calls 

— 1 1 

the 

del 

Temp Choice : 

natural := 

0; 


Buffer_Status : 

boolean ;= 

true; 

Temp String : 

Browser Types. 

Stri 


begin 


— extract choice from buffer 


Choose_Option( 

Buffer “> 
Number_Of_Choices => 
Choice => 
Buffer Status => 


Buffer(4..Buffer'last) , 
Displayed, 

Temp_Choice, 

Buffer Status); 


Ikf 


verify if buffer choice was 
Buffer Status = true then 


in the displayed 


Delete( 


Entry_Num => Temp_Choice, 

Last C’ur'^nt => last Current); 


yet. 


buffer choice was not valid 






else 

Temp_String := new 

string'(String_Utilities.Remove_Leading_And_Trailing_Blanks(Buffer)); 
text_io.new_line(12); 

• text_io.put("Sorry... " & Temp String.all); 

text_io.put_line(" is not a vali3 command."); 

text_io.put line("Type HELP for an explaination of the valid commands."); 
text_io.new~line(12); 
delay 2.0; 

text_io.new_line(12); 
end if; 

end Delete From Extract Buffer; 


procedure Add_Entry_To_Extract_Buffer is 

— I Description 

--I This procedure adds a user entry to the list from the key board 

— I and not from the list of files. 

— M 


Buffer 
Length 
Temp_Buffer 
Buffer Problem 


String 

natural 

Browser 

Boolean 


(1..256) := (others => ' '); 

i 

_Types.String_Access_Type; 

:= False; 


begin 


text_io.new_line; 

text_io.put("New Entry => "); 


begin 

text_io.get_line (Buffer, 
exception 

when others => 

Buffer_Problem := 

end; 


Length); 


true; 


If Buffer_Problem then 
text_io.new_line(12); 

text_io.put_line(" Sorry ... Only 256 Characters Please."); 
text_io.new_line(12); 
delay 2.0; 

text_io.new_line(12); 
else 

Temp_Buffer :* new 

string' ( St r ing_'Jti 1 i ti es . Remove_Leading_And_Trai 1 ing_Blanks ( Buf f e r ) ) ; 

Add(Temp_Buf fer ) ; 
end if; 


end Add_Entry_To_Extract_Buffer; 


procedure Clear_Buffer( Last_Current 
— I Description 

This procedure clears the users buffer. 


in out Browser Types.Menu List Type) is 


Buffer : string (i..80) :» (others »> ' '); 
Length : natural; 


begin 





— exit the menu 

elsif Buffer(l) = 'X' then 
Repeat_Screen :* False; 

More := false; 
text_io.new_line(l) ; 

— delete entry 

elsif Buffer(1..2) » "DE" then 
Delete From_Extract_Buffer( 

BuTfer -> Buffer, 

Last Current *> Last Current, 

Displayed => Displayed); 

if Number_In List = 0 then 
More := false; 
else 

Repeat_Screen := true; 

More := true; 
end if; 

text_io.new_line(1); 

— add entry 

elsif Buffer{1..2) = "AE" then 
Add_Entry_To_Extract_Buffer; 

Repeat_Screen ;= true; 

More := true; 
text_io.new_line(1) ; 

— clear buffer 

elsif Buffer(1..2) = "CB" then 

Clear_Buffer(Last_Current => Last_rurrent); 
if Number_In_LiSt = 0 then 
More := false; 
else 

More := True; 

Repeat_Screen := True; 
end if; 

text_io.new_line(1); 

— print help screen 

elsif Buffer(1..4) = "HELP" then 
Help_Extract; 

Repeat_Screen := true; 

More ;= true; 

— exit the browser 

elsif Buffer(1..4) = "EXIT" then 
Write_Buf fe r; 

Machine_Ops,Do_Command(Status,"$"); 
else 

-- get integer value 
Choose_Option (Buffer, 

Displayed, 

Choice, 

Buffer_Status); 

-- user entered invalid command 
if Buffer_Status = false then 

-- user entered invalid command 
text_io.new_line(12) ; 

text_io.put_line(Buffer(1..length) & " is not valid."); 
text_io.put_line("Type HELP for a list of valid commands."); 
text io.new 1ine(12 ) ; 




text_io.new line; 

text_io.putT"Are You Sure You Want To Clear This Buffer (y) 
text_io.get_line (Buffer, Length); 

^f (Buffer(l) = ' ' ) or (Buffer(l) = 'y') or (Buffer(l) « 'Y') then 
Head_Ptr ;= Null; 

Back_Ptr := Head_Ptr; 

Last_Current := Head_Ptr; 

Number_In List :<= 0; 

Longest_LTne := 0; 
end if; 


end Clear Buffer; 


procedure Get_Menu_Value ( Choice : out natural) is 
Description 

This procedure will display a menu with the 
all of which is centered on the screen. A pr 
given to the user to enter a choice. If an i 
is entered, the menu will be redrawn and the 
be repeated. Control will return only when a 
is entered. 


given title, 
ompt will be 
llegal choice 
prompt will 
legal value 


Ve rtical_Spacing 

Lines 

More 

Current 

Last_Current 

Repeat_5creen 

Index 

Displayed 

Last_Displayed 

Buffer 

Numbe r_In_Lis t_Ti11e 

Title_Spacing 

Choice_Title_Spacing 

Buffer_Status 

Temp_Numbe r_Of_Choices 

Length 

Title 

Buffer_Empty 
Status 


integer := 0; 
boolean :=■ true; 
boolean ;= true; 

Browser_Types.Menu_List_Type Head_Ptr; 

Browser_Types.Menu_List_Type := Head_Ptr; 

boolean := false; 

natural := 0; 

natural := 0; 

natural := 0; 

stringd. . Browse r_Types . di splay_width ) 

(others -> ' ' ); 

Browser_Types.String_Access_Type; 
integer; 
integer; 
boolean; 

natural := Number_In_List; 
natural; 

Browser_Types.String_Access_Type ;- 

new string'("Select Buffer"); 
String(1..16) "Buffer is Empty."; 
Browse r_Types.Cond_Value_Type; 


begin —get_menu_value 

— preset Choice to zero 
Choice 0; 

— display the menu 
while More loop 

if Current = null then 

Last_Current := Hnad_Ptr; 

Current Head_Ptr; 

Displayed :* 0; 

Last_Displayed := 0; 
end if; 

— reset the last page after a help screen 










if Repeat_Screen then 

Current :« Last_Current; 

Displayed Last Displayed; 

Repeat_Screen Talse; 

— determine vertical spacing between title and menu and then menu 

— and prompt 

if Number_In_List > 18 then 
Vertical_Spacing := 1; 
else 

Vertical_Spacing := (Browser_Types.Display_Height - 

Number_ln_List - 4) / 2; 

end if; 

text io.new_line(12 ) ; 

— i7 there will be more than one screen, tell user how many 

entries 

if (Displayed <= 1) then 
— put the title out 

Title_Spacing := (Browser_Types.Display_Width - 

Title.all'length) / 2; 

text_io.set_col (text io.positive_count (Title_Spacing)); 
text_io.put_line (Title.all); 

if Number_In_LiSt > 18 then 

Number In_List Title ;« new string'("(” & 

Tnteger'Tmage(Number_ln_LiSt) & " Items.)"); 
Choice_Title_Spacing := (Browser_Types.Display_Width - 
Number_In_List_Title.all'length) / 2; 
text_io.set_col (text_io.positive_count 

(Choice_Title_Spacing)); 
text_io.put_line (Number_In_List_Titie.all); 
end if; 

end if; 

text_io.new_line (text_io.count (Vertical_Spacing)); 


else 

Last_Current := Current; 

Last_Displayed := Displayed; 

text_io.new_line(12); 

— put the title out 

Title_Spacing := (Browser_Types.Display_Width - 

Title.all'length) / 2; 

text_io set_col (text io.positive_count (Title_Spacing)); 
text_io.put_line (TitXe.all); 

— determine vertical spacing between title and menu and then menu 

— and prompt 

if Number_ln_List > 18 then 
Vertical_Spacing := 1; 
else 

Vertical_Spacing ;= (Browser_Types.Display_Height - 

Number_In_LiSt - 4) / 2; 

end if; 

— if there will be more than one screen, tell user how many 

entries 

if Number_ln_List > 18 then 

Number_In_List_Titie new string'("(" & 

integer'image(Number_In_List) & " Items.)"); 






Choice_Title_Spacing ;= (Browser_Types.Display_Width - 
Number_ln_List Titie.all'length) / 2; 

text_io.set_coT (text io.positive_count (Choice_Title_Spacing)) 
text_io.put_line (Num5er_In_List_Titie.all); 
end if; 

text io.new line (text io.count (Vertical_Spacing)); 


end if; 

if Current = null then 

text_io.set_col(text_io•positive_count( 

( (Browser_Types .Display_Width + 2) - Buffer_Einpty'length )/2 )) ; 
text_io. put_line ( Buf f er_Enipty) ; 

else 

Index := 0; 

Lines := True; 

while Lines and (Index <= (Browser_Types.Display_Height - 7)) Loop 
Index := Index + 1; 

begin 

-- set column for longest menu line 
text_io.set_col(text_io.positive_count( 

((Browser_Types.Display_Width + 2) - Longest_Line) / 2)); 

— line up the menu choices better 
if (Displayed + Index) in 1..9 then 

text_io.put(' ' & natural'image(Displayed + Index)); 
else 

text_io.put(natural'image(Displayed + Index)); 
end if; 

text_io.put(" "); 

text_io.put_line (Current.Line.all); 

Current ;= Current.Next; 
if Current * null then 
Lines := false; 
end if; 

exception 

when others => 

Lines := false; 

end; 

end Loop; — lines 

Displayed := Displayed + Index; 
end if; 

text_io.new_line (text_io.count (Vertical_Spacing)); 

text_io.put( "[ DE # (Delete Entry), AE (Add_Entry),"); 

text_io,put_line(" CB (Clear_BufTer), X (Prev_Menu), HELP ]"); 
text_io.put("=> "); 

text_io,get_line (Buffer, Length); 

— convert to upper case 

Buffer :* String_Utilities.To_Upper(Buffer); 

— does the user want to continue the menu 
if Buffer(l) = ' ' then 

Repeat_Screen := False; 

More :» true; 

text io.new line(l); 





delay(2.0); 


— recursive call to get_n\enu_value 
Get_Menu_Value (Choice); 
end if; 

^ More false; 

end if; 

Buffer(1..Buff er'last) :» (others ■> ' '); 

end loop; — more loop 

exception 

when others => 
null; 

end Get Menu Value; 


procedure Extract_Control is 

— I Description 

— I This is the procedure that presents a user interface for extract buffer 

— I operations (other than the add_to_extract_buffer which is called from the 

browser menu. 


Title : Browser_Types.String_Access_Type new string'("Select Buffer"); 
Choice : natural ;= 0; 

begin 

Extract ; loop 

—Display and get menu value 

text_io.new line(l); — to make a clean screen 

Get_Menu_VaTue( Choice »> Choice); 

exit Extract when Choice « 0; 
end loop Extract; 

text_io.new_line(24); 

end Extract_Control; 

end Extract_Ops; 








with Browser_Types; 
package Menu_Ops is 
Description 

This package contains the visible operations on the object Menu, 
Requirements Satisfied 

This package does not meet any specific STARS requirements. 

I 

Exceptions Raised 
None. 

Contact 

Charles Eisner 
Boeing Military Airplane 
3801 S. Oliver (ms K80-13) 

Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined 
Standard. 


types 


from package 



Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 

Change Summary: Initial_Release 
Date: 20-FEB-89 

Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution; NONE 


Disclaimer 
This software and 
without any expre 


its 

ssed 


documentation are provided "AS IS" and 
or implied warranties whatsoever. 


No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 


In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


procedure Help_Screen; 
--I Description 

— I Display the help 

— M 


screen. 






procedure Choose_Option 
Buffer 

Numbe r_Of_Choices 
Choice 

Buffer_Status 

— I Description 

— 1 This routine will 

— I buffer. 


( 

: in string; 

: natural; 

: out integer; 
: out boolean) 

determine the i 


ntege 


r 


value 


choice 


from the 


string 


procedure Get_Menu_Value 
Menu_Used 
Numbe r_Of_Choices 
Longest_Menu_Line 
Title 

Virtual_Path 
Choice 
Description 

This routine will 
of all the files i 
passes the reponse 


( 

: in Browser_Types.Menu_List_Type; 

: in natural; 

: in natural; 

: in Browser_Types.String_Access_Type 
: in Browser_Types.String_Access_Type 
: out integer); 

display a menu to the user, which is a 
n a directory, gets a response fro the 
to the calling unit. 


linked list 
user and 


nd Menu_Ops; 





with Browser_Types 
use Browser_Types; 


with Machine_Ops; 
ith Extract_Ops; 
ith String_Utilitiesi 
with Text lo; 


Using this package to gain visibility to the type 
declaration operations only; 


package body Menu_Ops is 
—i Description 

— 1 This package contains the hidden operations on the object Menu. 


— I Requirements Satisfied 

— I This package does not meet any specific STARS requirements. 


— I Exceptions Raised 

— I None. 

— I I 

— I Contact 

— I Charles Eisner 

— I Boeing Military Airplane 

— I 3801 S. Oliver (ms K80-13) 

— I Wichita, KS 67277 



Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revision History 
Part Number: 

Author; Charles Eisner 
Version; 1.0; 

Change Summary; Initial_Release 
Date: 20-FEB-89 

Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 

Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 


No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 



Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 







use text_io; 

proqedure Help_Screen is 
— I Description 

1 Display the help screen, 


Buffer : string (1..80); 
Length ; natural; 


begin 

— all of these io routines are from the Text_Io package 
new_page; 

put_line("HELP - "); 

put_line(" This Directory Bowser allows users to examine 
put_line(" and files available on the STARS Repository. 
put_line(" files have not passed the acceptance criteria, 
put line(" The commands available are:"); 


put_line( "1 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
new_line; 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
new_line; 
put("press 


directories") 
Note; These") 


The user chooses a number displayed on the current");' 
menu. If the number corresponds to a Directory (ex."); 
Math Lib.dir), a new menu will be entered which"); 
displays the files in that directory. The Directory"); 
structure can be likened to a directed graph. The"); 
user descends by typing the menu number of a directory, 
and ascends by typing 'x'. If the user chooses"); 
a number which corresponds to a file (ex. SIN.ADA),"); 
control will be moved to an editing session for "); 
that file. The current editor is the TPU editor"); 
in READ ONLY mode. To get help in this editor, just"); 
type help at the command line, (the command line for"); 
VAX Terminals is the DO key.) All floating point "); 
numbers entered will be truncated."); 


RETURN 


get_line ( 
new_line; 
new_line; 
new_line; 
new_line; 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
new_line; 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put_line(" 
put 1ine(" 


(Buffer, 


for more 
Length); 


help") ; 


SE # - This is the SELECT command. You can write the"); 
file name you choose to a buffer, (ex. SE 1, will"); 
write the file name at the menu option 1 to a "); 
buffer.) You may specify a range of files by placing"); 
a between your range, (ex. SE 1-5, will write the"); 

file names from menu options 1 through 5 to a buffer."); 
SELECT records the file name ONLY. To review your"); 
buffer, use the R(EVIEW) command. To obtain a copy"); 
of the selected repository files, the user must use the"); 
'User Request' option available on the STARS Repository"); 
menu." ) ; 

REVIEW - This will review your SELECTion buffer, (the "); 
files you have selected from the menus that you wish "); 
to reuse). As you exit this Browser Session, your buffer") 
will automatically be written to your directory. The "); 
file name will be STARS_BROWSER_current-time.TXT. You"); 
should use this file to help you remember what units"); 
you want to reuse. If your Buffer is empty, nothing"); 
will be written to file."); 


'new line; 

putT"press RETURN to continue"); 
get_line (Buffer, Length); 
new_line; 
new_line; 
new line; 



new_line; 
put_line( 
put_line( 
new_line; 
put_line( 
put_line( 
new_line; 
put_line( 
put_line( 
new_l ine; 
put_line( 
put_line( 
put_line( 
new_line; 
put_line( 
new_line; 
put_line( 
put_line( 
put_line( 
put_line( 
new line; 
putT"pres 
get_line 
new page; 


" X - This will exit the current uenu screen and display the"); 

" previous menu."); 

" RETURN - This will either display the next screen in a"); 

" large menu, or it will redisplay the current menu."); 

" HELP - This command can be entered any time. This screen "); 

" will appear as a result of the help command."); 

" EXIT or ctrl-z - To exit the Browser Session, type EXIT"); 

" or Ctrl-2 at the prompt. Exit will write your Select"); 

" Buffer to file, ctrl-z will not."); 

" MENU - This command will go to first Browser menu."); 

" VMS - This will exit the Browser and place you into the VMS"); 

" directory you were browsing. Once in the VMS directory,"); 

" you can do any normal VMS operations. Type 'X' to return") 

" to the browser."); 

S RETURN to continue"); 

(Buffer, Length); 


end Help_Screen; 


procedure Choose_Option ( 

Buffer 

Number_Of_Choices 
Choice 

Buf fe r_Status 

— I Description 

— I This routine will determine 

— I buffer. 

--I I 


in string; 
natural; 
out integer; 
out boolean) 


IS 


the integer value choice from the string 


Temp_Choice 

Length 

Intege r_Choice 


integer; 
natural; 
integer; 


begin 

begin 

-- loolting for an integer 

Browser_Types.int_io.get (Buffer, lnteger_Choice, Length); 


exception 

when others => 

-- integer within range not entered 
declare 

pac)cage Flt_lo is new text_io. f loat_io (float); 

Float_Choice : float; 

begin 

— was a float entered? 

flt_io.get (Buffer, Float_Choice, Length); 

— convert float to integer 
Integer_Choice : =* integer ( Float_Choice ) ; 
exception 

when others => 

-- nothing meaningful entered 
Integer Choice := 0; 


end; 


end; 







Temp_Choice := lnteger_Choice; 

— did you find a valid integer. 

^ if not (Temp_Choice <» Number_Of_Choices and Temp_Choice >0) then 
■ Buffer_Status := false; 

^ else 

Buffer_Status ;= true; 
end if; 

Choice Temp_Choice; 
end Choose_Opt.ion; 


procedure Get_Menu Value ( 

Menu_Use3 : in 

Number_Of_Choices : in 
Longest_Menu_Line : in 
Title : in 

Virtual_Path : in 

Choice : out 

— I Description 

— I This procedure will display 

— I (all of which is centered on 

— I given to the user to enter a 

— I is entered, the menu will be 

— ! be repeated. Control will re 

— 1 is entered. 

— I I 


Browse r_Type s.Menu_Lis t_Type; 
natural; 
natural; 

Browser_Types.String_Access_Type; 
Browser_Types.String_Access_Type; 
integer) is 

a menu with the given title 
the screen). A prompt will be 
choice. If an illegal choice 
redrawn and the prompt will 
turn only when a legal value 


Vertical_Spacing 

Lines 

More 

Current 

Last_Current 

Repeat_Screen 

Index 

Displayed 

Last_Displayed 

Buffer 

Number_Of_Choices_Title 

Title_Spacing 

Choice_Title_Spacing 

Buf fe r_Status 

Temp_Number_Of_Choices 

Length 

Status 


integer := 0; 
boolean ;= true; 
boolean :=• true; 

Browser_Types.Menu_List_Type ;=• Menu_Used; 

Browser_Types.Menu_List_Type Henu_Used; 

boolean :« false; 

natural :=* 0; 

natural :« 0; 

natural :» 0; 

string(1..Browser_Types.display_width) :- 

(others *> ' ' ) ; 

Browser_Types.String_Access_Type; 
integer; 
integer; 
boolean; 

natural :=» Number_of_Choices; 
natural; 

Browser_Types.Cond_Value_Type; 


begin —get_menu_value 


— prepare title for number of choices the user will have 
Number_Of_Choices_Title := new string'("(" & 

integer'image(Number_Of_Choices) & " Choices.)"); 


if Longest_Menu_Line > Browser_Types.Display_Width then 
raise Browser_Types.Menu_To_Wide; 
end if; 

— determine vertical spacing between title and menu and then menu 
-- and prompt 

if Number Of_Choices > 18 then 
VerticaT_Spacing := 1; 
else 










Vertical_Spacing :» 
end if; 

text io.new line(24); 


(Browser_Types.Display Height - 
Number 61 Choices 


4) / 2; 


— put the title out 

Title_Spacing :<■ ( Browser_Types .Display_Width - title . all' length ) / 2; 
Choice_Title_Spacing (Browser Types-Display_Width - 

Number OT_Choices_Titie.all'length) / 2; 
text_io.set_col (text io.positTve_count (Title_Spacing)); 
text_io.put_line (Title.all); 

— if there will be more than one screen of choices, tell user how many 
if Number Of_Choices > 18 then 

text_To.set_col (text io.positive_count (Choice_Title_Spacing)); 
text_io.put_line (NumBer_Of_Choices_Titie.all); 
end if; 


text_io.new_line (text_io.count (Vertical_Spacing)); 

—preset choice to zero 
Choice := 0; 


— display the menu 
while More loop 

— reset the last page after a help screen 
if Repeat_Screen then 

Current := Last_Current; 

Displayed := Last Displayed; 

Repeat_Screen ;« 7alse; 

Lines true; 

text_io. set_col (text io.positive_count (Title_Spaci;‘a)); 
text_io.put_line (Title.all); 

if (Displayed <= 1) and (Number Of_Choices > 18) then 

text_io.set_col (text io.posTtive_count (Choice_Title_Spacing ) ) ; 
text_io.put_line (NumBer_Of_Choices_Titie.all); 
end if; 

text_io.new_line (text_io.count (Vertical_Spacing)); 
else 

Last_Current := Current; 

Last_Displayed := Displayed; 
end if; 


Index := 0; 

Lines ;= True; 

while Lines and (Index <- (Browser_Types.Display_Height - 7)) Loop 
Index ;■ Index + 1; 


begin 

— set column for longest menu line 
text io.set_col(text_io.positive count( 

T(Browser_Types.Display_WidtH + 2)-Longest_Menu_Line)/2)); 

— line up the menu choices better 
if (Displayed + Index) in 1..9 then 

text_io.put(' ' & natural'image(Displayed + Index)); 
else 

text_io.put(natural'image(Displayed + Index)); 
end if; 


text_io.put( " " ) ; 

text_io.put_line (Current.Line.all) ; 
Current Cur rent.Next; 





if Current » null then 
Lines := false; 
end if; 

exception 

when others “> 

Lines false; 

end; 

end Loop; 

Displayed := Displayed + Index; 

— output prompt 
begin 

text io.new_line (text_io.count (Vertical_Spacing)); 
exception 

when constraint_error => 
null ; 

end; 

text_io.put( "[ X (Previous_Menu), # (Menu_Select), "); 
text_io.put_line("SE # (Select_No.),R(EVIEW Buffer), HELP ]"); 
text_io.put( "[ hit RETURN (continue), VMS (exit to VMS), "); 
text_io.put("MENU (ist menu)] Command -> "); 

text_io.get_line (Buffer, Length); 

— convert to upper case 

Buffer ;= String_Utilities.To^Upper(Buffer); 

— does the user want to continue the menu 

if (Buffer(l) = ' ') and (Displayed < Number_Of_Choices) then 
More true; 

Repeat_Screen ;= false; 

— exit the menu 

elsif Buffer(l) = 'X' then 
More false; 

— exit the browser 

elsif Buffer(1..4) = "EXIT" then 
text_io.new_line(24); 

Extract_Ops.Write_Buffer; 

Machine_Ops.Do_Command(Status,"$"); 

— select some menu options for the buffer 
elsif Buffer(1..2) * "SE" then 

Extract Ops.Add_To_Extract_Buffer( 

Bufler => Buffer, 

Menu Used => Menu_Used, 

Displayed => Number Of_Choices, 

Virtual_Path =>> VirtuaT_Path); 

Repeat_Screen ;= true; 

More := true; 

— help screen 

elsif Buffer(l) = 'H' then 
Help_Screen; 

Repedt_Screen := true; 

More :* true; 

— exit to vms 

elsif Buffer(1..3) * "VMS" then 

Machine_Ops.Spawn(Status,"@geech$duaO:(stars_utilities]vms.com 

Virtual_path.all) ; 

Repeat_Screen ;= true; 





More := true; 


— goto first menu 

elsif Buffer(1..4) - "MENU" then 
Repeat_Screen := false; 

^ More := false; 

* Choice :» -1; 

- review the users buffer of selected items 
elsif Buffer(l) = 'R' then 
Extract_ops. Extract__Control; 

Repeat_Screen := true; 

More := true; 
else 

— get an integer from the users entry 
Choose_Option (Buffer, 

Temp_Numbe r_Of_Choices, 

Choice, 

Buffer Status); 
if Buffer_Status = false then 

— user entered invalid command (except for ' ') 

if Buffer(l) /“ ' ' then 

text io.new line(12); 

text io.put line("'" &Buffer(1..length)& & 

" "is not valid.") 

text_io.put_line("Type HELP for a list of valid commands.") 
text_io.new_line(12); 
delay(2.0); 

-- repeat this screen 
Repeat_Screen ;= true; 

More ;= true; 

1^ else 

-- recursive call to get menu_v.alue 
Get_Menu_Value (Menu_Use3, 

Number_Of_Choices, 

Longest_Menu_Line, 

Title, 

Vi rtual_Path, 

Choice); 

-- found a valid command, so don't loop anymore 
More := false; 
end if; 

else 

— found a valid command, so don't loop anymore 

More := fal' ; 

end if; 

end if; 

— reset the buffer for next command 

Buffer(1. .Buffer'last) ;* (others => ' '); 

end loop; -- more loop 

exception 

when others -> 

^ null; — Do not bomb out ... go gracefully, 
end Get_Menu_Value; 
end Menu Ops; 



with text_io; 
with String Utilities; 
with ConditTon_Handling; 
with Lib; 




ckage Browser_Ops is 


--j Description 

-- j This package contains the visible operations on the object Directory 

— I Browser. 

--I Requirements Satisfied 

-- j This package does not meet any specific STARS requirements. 

— II 

--I Exceptions Raised 

—j None. 

—j contact 

—j Charles Eisner 

-- j Boeing Military Airplane 

—j 3801 S. Oliver (ms K80-13) 

— I Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 

Revision History 
Part Number: 

Author: Charles Eisner 
Version; 1.0; 

Change Summary: Initial_Release 
Date: 20-FEB-89 

Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note: software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution: NONE 

Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 

No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


procedure Run Browser( 




Menu 1 


in string; — 


Menu_l_titie 
Menu 2 


in string; — 
in string; — 


Menu_2_Title : in string; —| 
Editor_Used ; in string; —j 
Utility_Directory : in string; 
Top_Level_Dir ; in string);—| 


VMS file name of the first menu 
This file must be in top_level_dir 
Title to be displayed for menu_l 
VMS file name of the second menu 
This file must be in top_level_dir 
Title to be displayed for menu_2 
Editor to use/plus options 
— I Locale of utility directory 
Directory to start browsing. 

Menu_2 is a directory listing of 
this top_level_directory. 


Description 

This is the procedure to start the directory browser menu/interface 
tool. Menu_l is a string to identify the file name of the first menu. 
This is an example of the menu 1 menu. 


This is the first menu for the stars foundation 

project search/view tool. ** Make certain that this file is version 11 
(Do not delete these first three lines. Program dependent.) 

Review STARS Foundation Projects 

Exit to VMS (in Directory ODIE$DUA128:{STARS FOUNDATION]) 

Help 

or 'X' to Exit (Return to SDME) 

(Do not delete these last two lines. Program Dependent.) 


Menu_2 is just a dir/col-l/output*Menu_2.dat. 


Exceptions Raised 
None. 


B* owser_Ops; 







with Browser_Types; 
with Calendar; 
with Extract_Ops; 
with File Ops; 

^^ith MachTne_Ops; 

^Hith Menu_Ops; 

^^ith Str ing_Uti 1 i ties ; 
with Text_Io; 

package body Browser_Ops is 

— I Description 

— I This package contains the internal operations on the object Directory 

— I Browser. 

— I Requirements Satisfied 

— I This package does not meet any specific STARS requirements. 

--11 

— I Exceptions Raised 

— I None. 

— I I 

— I Contact 

— I Charles Eisner 

— I Boeing Military Airplane 

— 1 3801 S. Oliver (ms K80-13) 

Wichita, KS 67277 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 

Change Summary; Initia 
Date; 20-FEB-89 


Initial Release 


Distribution and Copyright 

This Prologue must be included in all copies of this software. 

This software is released to the Ada community. 

This software is released to the Public Domain (Note; software released 
to the Public Domain is not subject to copyright protection). 
Restrictions on use or distribution; NONE 

Disclaimer 

This software and its documentation are provided "AS IS" and 
without any expressed or implied warranties whatsoever. 

No warranties as to performance, merchantability, or fitness 
for a particular purpose exists. 

Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software. 


In no event shal’ any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 








--II 




ocedure execute_choice ( 

Choice : in 
User : in 
Virtual_Path : in 
Title : in 
Utility_Directory : in 
Editor_Used : in 
Ptr : in 
Go Back : in 


integer; 

out Browser_Types.String_Access_Type; 
out Browser_Types.String_Access_Type; 
out Browser_Types.String_Access_Type; 
out Browser_Types.String_Access_Type; 
out Browser_Types.String Access_Type; 
out Browser Types.Menu_LTst_Type; 
out BooleanT is 


Description 

This procedure executes an 
operations to be performed 
To browse a directory, the 


operation based on the input Choice. The main 
are, 1) edit a file, 2) Browse a Directory, 
procedure uses a recursive call. 


Current 
File_Type 
File_Name 
Command 
Menu_Head 
Menu_Choices 
Menu_Longest 
New_choice 
Status 
Data File 


Browser_Types.Menu_List_Type := Ptr; 
Browse r_Types.String_Access_Type; 
Browser_Types.String_Access_Type; 
Browser_Types.String Access_Type; 
Browser_Types.Menu_Lrst_Type; 
natural; 
natural; 
integer; 

Browse r_Types.Cond_Value_Type; 
Text_Io.File_Type; 



— build Command string 


— is choice a menu option 
if Choice > 0 then 

— find the actual line to execute (edit a file or browse a dir) 
for i in 1..(Choice - 1) loop 

Current := Cur rent.Next; 
end loop; 

-- find the file type 

File_Type := new string'(String_Utilities.File_Type_Is(Cur rent.Line.all)) ; 

— is file a directory 

if File_Type.all = "DIR" then 


— create, open and read data file, then delete it. 


— create a dir/col=l/output=file_name 
File Ops.Create Data File( 


Utility_Dir 
File_Line 
User 

Virtual_Path 
File 


. dat 

=> Utility_Directory, 
=> Current.line, 

=> User, 

»> Virtual_Path, 

*> File Name); 


-- read the file into a linked list 
File_Ops.load_menu_liSt ( 

File_Name 
Ptr 


*> File_Name.al1, 
*> Menu Head, 












Data_File -> Data_File, 

Number_Of_Choices «> Menu_Choices, 
longest_inenu_line ■> Menu_Longest); 


— we are done with the file now 
Text lo.Delete(Data File); 


— display menu 


— enter a loop for each Virtuai_Path, displaying the choices 
begin 

Virtual: loop 

— display the menu and get a user command 
Menu Ops.Get_Menu_Value 

TMenu_Used *> Menu_Head, 

Number_Of_Choices -> Menu_Choices, 
longest_menu_line «> Menu_Longest, 

Title -> Virtual_Path, 

Virtual_Path *> Virtual_^Path, 

Choice => New Choice); 


— execute choice 


New_Choice, 

User, 

Virtual_Path, 

Current.line, 

Utility_Directory, 

Editor_Used, 

Menu_Head, 

Go_Bac)c); 

— exit loop when new_choice is 0 
exit Virtual when New_Choice » 0; 

— if the user want to go back to main menu 
exit Virtual when Go_Back; 

end loop Virtual; 
exception 

when others => 
null; 

end; 

— back out of the virtual path 

Virtual_Path := new string'(String_Uti1ities.Back_Off(Virtual_Path.all)) 

else 


=> Virtual_Path, 
=> Editor_Used, 

= > Current.line ) ; 


end if; 

elsif Choice » 0 then 
Go Back ;« False; 


— edit the file 
File Ops.Edit Filei 


Virtual 

Editor 

Line 


Path 


Back 


False; 


Execute_Choice ( 

Choice => 
User => 
Virtual_Path => 
Title => 
Utility_Directory => 
Editor_Used *> 
Ptr »> 
Go Back ■> 












elsif Choice 
Go_Back 
else 
null; 
d if; 


end Execute 


< 0 then 
True; 

for future 
Choice ; 


expansion 


procedure Execute Main_Choice ( 

CRoice : in 
Menu_2 : in 
Virtual_Path ; in 
Utility_Directory : in 
Editor_Used : in 
User : in 
Title : in 


— I Description 

— This routine will execute the u 


out integer; 
string; 

out Browser_Types.String_Access_Type; 
out Browser_Types.String_Access_Type; 
out Browser_Types.String_Access_Type; 
out Browser_Types.String_Access_Type; 
out Browser_Types•String_Access_Type) i 


rs choice fro the main menu (ie menu 1) 


Command 
Menu_Head 
Menu_Choices 
Menu_Longest 
New_Choice 
Status 
Data_File 
Go Back 


Browser_Types.String Access Type; 
Browser_Types.rtenu_LTst_Type; 
natural; 
natural; 
integer; 

Browser_Types.Cond_Value_Type; 
Text_Io.File_Type; 

Boolean := false; 



gin 


— build Command string 


case Choice is 
when 0 -> 
null; 

— browse a directory 
when 1 *> 


— open and read from 

1 Ptr.line (ie the data file) 

File Ops.load menu list 

( 

File Name 

*> 

Menu 2, 

Ptr 

-> 

Menu Head, 

Data File 

= > 

Data File, 

Number Of Choices 

= > 

Menu Choices, 

longest menu line 

-> 

Menu Longest); 

— display menu 


— enter a loop for first Virtual Path, displaying the Choices 


begin 

First: 


loop 


Menu_Ops.Get_Menu_Value( 

Menu_Used *> Menu_Head, 

Number Of Choices *> Menu Choices, 











longest_menu_line 

Title 

Virtual_Path 
Choice 


■ > Menu_Longest, 
-> Title, 

-> Virtual_^Path, 
«> New ChoTce); 



— execute 


Choice 


Execute_Choice { 

Choice ■> 
User «> 
Virtual_Path *> 
Title -> 
Utility_Directory ■> 
Editor_Used *> 
Ptr *> 
Go Back »> 


New_Choice, 

User, 

Virtual_Path, 

Menu Head.line, 
UtilTty_Directory, 
Editor_Used, 
Menu_Head, 

Go Back) ; 


— exit loop when New Choice is 0 
exit first when New_cHoice - 0; 

-- user wants to go back to main menu 
exit first when Go_Back; 

end loop first; 
exception 

when others => 
null; 

end; 



end 


when 2 => 

Menu_Ops.Help_Screen 
when 3 => 

Choice :« 0; 
when others -> 
null ; 
case; 


end Execute Main Choice; 


procedure Run_Browser( 


Menu 1 

in 

string 

Menu_l_Title 

in 

string 

Menu 2 

in 

string 

Menu 2_Title 

in 

string 

Editor_Used 

in 

string 

Utility Directory 

in 

string 

Top Level Dir 

in 

string 


— 1 Description 

— I Main call to execute the directory browser 


routine. 




Main_Head 
oice 
'umber_Of_Choi 
longest_menu_l 
Virtual Path 


ces 

ine 


Utility_Dir 


Browser_Types.Menu_List_Type; 
integer ; 
natural :» 0; 
natural 0; 

Browser_Types.String_Access_Type :« 

new string'(Top_Level_Dir); 
Browser_Types.String Access_Type 
string'(Utility_DTrectory); 


new 











Editor 


Data File 

: Te 

^p_Level_Title 

: Br 

B new string'(Menu_l 

Title 

5econd_Level_Titie 

: Br 

new string'(Menu 2 

_Title 

Year 

: ca 

Month 

: ca 

Day 

: ca 

Seconds 

: ca 

User 

: Br 


Browser_Types.String_Access_Type 
string'(Editor_Used); 
t_Io.Fiie_Type; 

Browser_Types.String_Access_Type 
le) ; 

Browser_Types.String_Access_Type 


.year 


number; 
»_number; 
number; 
"duration; 


new 


begin 


— Generate Unique user number for file contention prevention. 


calendar.split( 

date 

year 

Month 

Day 

Seconds 


=> calendar.clock, 
=> Year, 

=> Month, 

=> Day, 

=> Seconds); 


— use the seconds to create the users unique number 

User ;« new string'(String_utilities.Remove_Leading_And_Trailing_Blanks( 
integer'image(integer(Seconds)))); 


- turn off 


system messages 


Machine_Ops.Turn_Off_Mess; 


— open and read from Menu_l.dat 


File_Ops.Load_Menu_LiSt ( 
File_Name 
Ptr 

Data_File 

Number_Of_Choices 

longest_menu_line 


=> Menu_l, 

■> Main_Head, 

=> Data_File, 

«> Number_Of_Choices, 
»> longest_menu_line) ; 


— display menu 


loop 


Menu_Ops. 



Menu_Value( 

Menu_Used => 
Number_Of_Choices *> 
longest_menu_line => 
Title «> 
Virtual_Path «> 
Choice => 


Main_Head, 
Number_Of_Choices, 
longest_menu_line, 
Top_Level_Title, 

Virtual_Path, 
Choice); 


execute main Choice 












-> Choice, 

“> Menu_2, 

-> Virtual_Path, 

-> Utility_Dir, 

-> Editor, 

“> User, 

=> Second_Level_Titie) 

if Choice » 0 then 
exit; 
end if; 

end loop; 


Execute_Main_Choice ( 
Choice 
Menu_2 

Virtual_Path 

Utility_Directory 

Editor_Used 

User 

Title 


— Write the Extraction Buffer to the user Directory. 


Extract_Ops.Write_Buffer; 


— final greeting 


text_io.new_line(24); 

Machine_Ops.Turn_On_Mess; 




^xception 
when others 
null; 


> 

go gracefully 


end Run_Browser; 
end Browser_Ops; 






with Browser_Ops; 
with Browser_Types; 

procedure Browser_Driver is 
Description 

This procedure calls the Run Browser procedure 


Requirements Satisfied 

This package does not meet any specific STARS requirements. 




I 


Exceptions Raised 

None. 

Contact 

Charles Eisner 
Boeing Military Airplane 
3801 S. Oliver (ms K80-13) 
Wichita, KS 67277 


I 


Implementation Dependencies and Assumptions: 

Currently, this package uses some of the predefined types from package 
Standard. 


Revision History 
Part Number: 

Author: Charles Eisner 
Version: 1.0; 


Date 


This 

This 

This 

to 


ge Summary: 

j.ni ci 

?1 Relea 

: 20-FEB- 

89 




ibution a 

nd 

Copyr 

ight 


Prologue 

mu 

st be 

include 

software 

i s 

rele 

ased 

to 

software 

is 

rele 

ased 

to 

the Publ 

ic 

Domai 

n is 

not 

rictions 

on 

use 0 

r distri 


d in all copies of this software, 
the Ada community. 

the Public Domain (Note: software released 
subject to copyright protection), 
bution: NONE 


Disclaimer 

This software and its documentation are provided "AS IS" 
without any expressed or implied warranties whatsoever. 


and 


No warranties as to performance, merchantability, 
for a particular purpose exists. 


or fitness 


Because of the diversity of conditions and hardware under 
which this software may be used, no warranty of fitness for 
a particular purpose is offered. The user is advised to test 
the software thoroughly before relying on it. The user 
must assume the entire risk and liability of using the software, 

In no event shall any person or organization of people be 
held responsible for any direct, indirect, consequential 
or inconsequential damages or lost profits. 


- Top level directory that the browser will start at 
Top_Level_Dir : Browser_Types.String_Access_Type :- new 

string'("0DIE$DUA128:[STARS FOUNDATION]"); 


— Title that will be displayed for menu 1 
Menu_l_Title : Browser Types.String Access Type :- 


new 






string'("STARS Foundation"); 


— Path name for first menu 

Menu 1 : Browser_Types.String_Access_Type new 

1^ string'( "geech$duaO:[stars_utilities]found_menu_l.dat;1" 

— Title that will be displayed for menu 2 
Menu_2_Title : Browser_Types.String Access_Type new 

string'("STARS Foundation Projects"); 

— Path name for second menu 

Menu_2 ; Browser_Types.String_Access Type :« new 

string'( Top_Level_DTr.all & "menu_2.dat;1"); 

— editor that the users will use 

Editor : Browser_Types.String_Access_Type :* new string'("edit/tpu"); 

— utility directory where the file operations will take place 
Utility Directory : Browser_Types.String_Access_Type new 

string'("GEECH$DUAO:[STARS_UTILITIES]"); 


begin 

— call the procedure to start the browser 
Browser Ops.Run_Browser( 


Menu 1 

-> 

Menu l.all, 

Menu 1 Title 

-> 

Menu_l_Title.all, 

Menu 2 

-> 

Menu_2.all, 

Menu 2 Title 

= > 

Menu 2 Title.all, 

Editor_Used 

= > 

Editor.all, 

Utility Directory 


Utility_Directory.all, 

Top_Level_Dir 

*> 

Top Level_Dir.all); 







$! This is the command file used in the 'escape to vms' function in the 
$! directory browser. The file name VMS.COM. is a comment token. 

$! , 

$ ESClO,8]-27 

<: WS := WRITE syS$OUTPUT Iwiite to screen 

|^C_HOME := 'ESC'[H !go to upper left part of screen 

^CLEAR 'ESC'[2J Iclear screen 

$ set nocontrol=y 

$ save dir - f$environment("default") 

$ set 3ef 'pi' !pl is the input parameter (dir) 

$ WS C_H0ME,CLEAR 

$ WS " *********************************************************************** 

II 

$ WS " * Type 'X' or 'EXIT' to return to the Browser * 

II 

$ WS " * Type 'HELP' to invoke VAX/VMS help facility * 

It 

$ WS " * Type 'HELP_B' to invoke Browser help facility * 

II 

$ WS " * Type 'SYMBOLS' to see the VAX/VMS Symbols set up for you * 

II 

$ WS " *********************************************************************** 

II 

$ WS " " 

$ WS " Current Directory: " 

$ sho def 
$ WS " " 


ready: 


y 5 

inqui re/nopunccueition next "browser_$ " 
if next .nes. "HELP_B" then goto not_help 
type geech$duaO:[stars_utilities)vms_help.txt 


i 

rnot help: 




T 

il 

next 

. eqs. 

"KERMIT 

then next == "RKERMI 

$ 

if 

next 

. eqs. 

"DONE" 

then goto isdone 

$ 

if 

next 

. eqs. 

"EXIT" 

then goto isdone 

$ 

if 

next 

. eqs. 

"QUIT" 

then goto isdone 

$ 

if 

next 

. eqs. 

"STOP" 

then goto isdone 

$ 

if 

next 

. eqs. 

"LO" 

then goto isdone 

$ 

if 

next 

. eqs. 

"LOG" 

then goto isdone 

$ 

if 

next 

. eqs. 

"LOGOUT 

'" then goto isdone 

$ 

if 

next 

. eqs. 

"LOGOFF 

" then goto isdone 

$ 

if 

next 

. eqs. 

"MENU" 

then goto isdone 

$ 

if 

next 

. eqs. 

"BROWSER" then goto isdone 

$ 

if 

next 

. eqs. 

"HOME" 

then goto home done 

$ 

if 

next 

. eqs. 

"X" then goto isdone 


define/user_mode/NOLOG sys$input sys$command 
set control=y 
on control_y then continue 
on severe_error then continue 

'next' (execute the users vms command 

set nocontrol=y 
goto ready 
home_done: 

set def sys$login 
goto ready 
isdone: 

set control=y 
I set def 'save_dir' 

WS C_H0ME,CLEAR 
exit 


•go hark to users original directory 
! exit this command file 







