AD-A216 457 


UNCLASSIFIED __ . 

“ *• ${:CLASS)'ic#*JOS O' ^his »*i[ t♦ tnthtif' 


w nir 




REPORT DOCUMENTATION PAGE 


1. M^OKI kiiHfiR 


>f>o*i co»».rti‘s z rof.w 


|{. ftOVi ACCU&IOH NO 13. NiCl^ilNI-S CAUlOC NifMeiH 


. IlLl (•nciubf't^l |&. 1TH 0* Nt»0*1 $ NIUJOO COVIRIO 

; Ada Compiler Validation Summary Report: telesoftJ August 89 - i Dec 90 

I Motorola VME Delta Series TeleGen2 Ada Compilation Systen 

ggsgtrcioit '32»t, 6602C 


1 


amroMUNO^c. rirori njm^iii 


VJrigTTt^Patterson ATB 
Dayton, OH, USA 


• . riRfONNihw OR0RN32A11ON AkS ADOUSS 

Wright-Patterson APB 
Dayton, OH. USA 


n. coN'Ro.iiNO O'rut n«h> skd apDctss 
Ada Joint Program Office 
United States Department of Defense 
Kashington, DC 20301-3081 


Ks:tOK;k3 A&m:') NAw.I a ASOAiiSiHe-HtrrnttromCpntrot/ingOflice) 

Wright-Patterson AFB 
Dayton, OH, USA 


le. 01StR:B.’'r]0k StAKMit.'! (efthuAtpon) 


$. contnact 0* SRAkT aiwEUu; 


10. eaoo***' CiiNik'!. tasi 

ARIA A NORA Uk: 1 NUNelRS 


12. AirOR: 0*U 


IS. SICfRIit CiASS (e^ thit reporij 

UNCLAS51FIF.D 


:i§ ptc^jssjnCRTiOA i>o*>.;RAOifci 

K/A 


Approved for public release; distribution unlimited. 


II. SUR^.lNik'ASi NSTIS 


QCi, 


}|. tttk^Rwi (Conunut pnrfrtfftS’P* ifnHfU*'t*<y0iafntifyAftlp<irn/mPtr) 

^Ada Prograrjr.ir.g language,’ Ada Compiler Validation Summary Repcrt; A^ 
Compiler Validation Capability, ACVC#:^validation Testing# Ada 
Validation Office, AVO, Ada Validation Facility, AVF, A^/MIL-STD- 
181SA, Ada Joint Program Office, AJPO ^ j 


to. AIStaACWCBn,«fiM#en,e*rr,,,«0rrfnf(,u«',an0<a,fit<<^a, ^ 

T0-ESOFT, Motorola VME Delta Series TeleGenZ Ada Compilation System Version 1.4, 
Wright-Patterson AFB, Motorola Delta Model 2616 (MVME 132xt, 68020/68881) under 
Motorola SYSTEM V/68 Operating System Version V3.5) (host & target), ACVC 1.10 


90 01 03 006 


)D 1473 iDinoA O' : nov »» is Mio.tn 

I SAN n i^N oioi-if*ii«*i»o} 


UNCLASSIFIED __ 

IlCURUt ClA&Sl'lCRlJOk O' 1M)S eA4l (Mkrna«t«fntr'rtf; 



















AVF Control Number: AVF-VSR-314.1189 

89-07-11-m 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890829V1.10144 
TELESOFT 

Motorola VME Delta Series TeleGen2 Ada Compilation System Version 1.4 
Motorola Delta Model 2616 (MVME 132xt, 68020/68881) 


Completion of On-Site Testing: 
29 August 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OB 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 





Ada Compiler Validation Summary Report: 


Compiler Name: Motorola VME Delta Series TeleGen2 Ada Compilation System 
Version 1.4 

Certificate Number: #890829V1.10144 


Host: Motorola Delta Model 2616 (MVME 132xt, 68020/68881) under 

Motorola SYSTEM V/68 Operating System Version V3.5 

Target: Motorola Delta Model 2616 (MVME 132xt, 68020/68881) under 
Motorola SYSTEM V/68 Operating System Version V3.5 


Testing Completed 29 August 1989 Using ACVC 1.10 
Customer Agreement Number: 89-07-11-TEL 


This report has been reviewed and is approved. 


Ada Validation Facility 


AHaVaTIHation 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 


45433-6503 


Ada Validation Organization 


Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 










TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-6 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-7 

3.7.3 Test Site.3-8 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 


APPENDIX E 


COMPILFJl OPTIONS AS SUPPLIED BY TELESOFT 






















CHAPTER 1 


INTRODUCTION 


This Validation Summary Report (VSR) describes the extent to vhich a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL>STD-1815A. 
This report explains all technical terms used vithin it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented i^ts entirety, and nothing can be implemented that is 
not in the Standard 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standa<’d by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks ai compile 
time, at link tine, and during execution. 


1-1 







INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 29 August 1989 at San Diego CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.t552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Vashington DC 20301-3081 

or from: 


Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OB 45433-6503 


1-2 





INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1^83 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures , Version 2.0, Ada Joint Program 
Office, May 1955T 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1^8^. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
fora Al-ddddd. 


Ada Standard ANSI/NIL-STD-181SA, February 1983 and ISO 8652-1987. 


Applicant The agency requesting validation. 


AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures . 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 


Compiler A processor for the Ada language. In the context of this 
report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 


1-3 






V 


INTRODUCTION 


Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 
illegal construct that it contains is detected by the compiler. 


1-4 





INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message vhen it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable- tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 
tests. However, some tests contain values that require the test to be 


1-5 




INTRODUCTION 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 







CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation vas tested under the 
following configuration: 

Compiler: Motorola VME Delta Series TeleGen2 Ada Compilation 
System Version 1.4 

ACVC Version: 1.10 

Certificate Number: 890829V1.10144 

Host Computer: 

Machine: Motorola Delta Model 2616 

(MVME 132xt, 68020/68881) 

Operating System: Motorola SYSTEM V/68 Operating 

System Version V3.5 

Memory Size: 12 Mbytes 

Target Computer: 

Machine: Motorola Delta Model 2616 

(MVME 132xt, 68020/68881) 

Operating System: Motorola SYSTEM V/68 Operating 

System Version V3.5 

Memory Size: 12 Mbytes 


2-1 




CONFIGURATION INFORMATION 




2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests 055A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests 064005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
LONG INTEGER and L0NG_FL0AT in package STANDARD. (See tests 
B86O01T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. Vhile 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) Some of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 


2-2 








CONFIGURATION INFORMATION 


uses no extra bits for extra range. (See test C35903A.) 

(4) CONSTRAINT_ERROR is raised when a literal operand in a 

predefined INTEGER comparison is outside the range of INTEGER; 
NUMERIC^ERROR is raised when a literal operand in an integer 
comparison or membership test is greater than SYSTEM.MAX_INT. 
(See test C45232A.) 

(5) NUMERIC^ERROR is raised when a literal operand in a 

fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Ar’-ay types. 

An implementation is allowed to raise NUHERIC_ERROR or 

CONSTRAINT_ERROR for an array having a 'LENCTTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration raises 
NUMERIC_ERROR when the second dimension's length is greater 
than SYSTEM.MAX_INT. No exception is raised if the array type 
has only one dimension or if only the first dimension's length 
exceeds SYSTEM.MAX_INT. (See test C36003A.) 

(2) CONSTRAINT_ERROR is raised when 'LENCTTH is applied to an array 

type with~ INTEGER'LAST 4- 2 components with each component 

being a null array. (See test C36202A.) 

(3) NUMERIC_ERROR is raised when an array type with SYSTEM.MAX_INT 
•f 2 components with each component being a null array is 
declared. (Sec lest C36202B.) 


2-3 











CONFIGURATION INFORMATION 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. (See test C52103X.) 

(5) A packed tvo-dimensional BOOLEAN array with more than 

INTEGER'LAST components raises CONSTRAINT_ERROR when the 

length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 

either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test ES2103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT^ERROR is raised 
when checking whether the expression's subty^ is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test CS2013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, index 
subtype checks are made as choices are evaluated. (See tests 
C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
vhen a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 





CONFIGURATION INFORMATION 


h. Pragmas. 

(1) The pragma INLINE is supported for nested procedures and 
functions, but not for library subprograms. (See tests 
LA3004A..B (2 tests), EA3004C..D (2 tests), and CA3004E..F (2 

tests).) 


i. Generics. 

(1) Generic bodies and subunits of generic bodies can be compiled 
separately from their specifications; however, if a generic 
body or a subunit is compiled or recompiled after an 
instantiation, then the instantiating unit is rendered 
obsolete. This obsolescence is detected at bind (link.) time. 
(See tests CA1012A, CA2009C, CA2009F, CA3011A, BC3204C, and 

BC3205D.) 


J. Input and output. 

(1) The package SEQUENTIAL^IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT^IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN FILE and OUT FILE are supported for SEQUENTIAL 10. 
(See tests CE2102D..E (2~'tests), CE2102N, and CE2102P.) 

(4) Modes IN FILE, OUT FILE, and INOUT FILE are supported for 

DIRECT lOT (See tests CE2102F, CE7102I, CE2102J, CE2102R, 

CE2102T, and CE2102V.) 

(5) Modes IN FILE and OUT FILE are supported for text files. (See 
tests CE3102E and CE3l02I..K (3 tests).) 

(6) RESET and DELETE operations are supported for SEQUENTIAL 10. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT 10. (See 
tests CE2102K and CE2102T.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F, CE3102G, CE3104C, CE3110A, and CE3114A.) 

(9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 


2-5 









CONFIGURATION INFORMATION 


(10) Temporary sequential files are given names and not deleted 
when closed. (See test CE2108A.) 

(11) Temporary direct files are given names and not deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and not deleted when 
closed. (See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files when reading only. (See 
tests CE2107A..E (5 tests), CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file can be associated with each 

external file for direct files when reading only. (See tests 
CE2107F..e (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated with each 

external file for text files when reading only. (See tests 
CE3111A..E (5 tests), CE3114B, and CE3115A.) 


2-6 




CHAPTER 


3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC coeprises 3717 tests. Vhen this coepiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 314 tests were inapplicable to this ieplenentation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the iepleeentation. Modifications to the code, processing, or grading 
for 11 tests were required to successfully deeonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results deeonstrate acceptable 
conforeity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

TEST CLASS 
BCD 

E 

L 

TOTAL 

Passed 

127 

1129 2018 

17 

23 

45 

3359 

Inapplicable 

2 

9 297 

0 

5 

1 

314 

Withdrawn 

1 

2 35 

0 

6 

0 

44 

TOTAL 

130 

1140 2350 

17 

34 

46 

3717 


3-1 




TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

573 

544 

245 

172 

99 

160 

332 

132 

36 

250 

340 

278 

3359 

Inappl 

14 

76 

136 

3 

0 

0 

6 

0 

5 

0 

2 

29 

43 

314 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The folloving 44 tests were withdrawn froe ACVC Version 1.10 at the time of 
this validation: 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

C02A63B 

CD2A63C 

C02A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

C07203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 

CE3411B 






See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others nay 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each tine a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 314 tests were inapplicable for the 
reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..T (14 tests) C35706L..Y (14 tests) 

C35;07L..Y (14 tests) C3S708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) C45421L..T (14 tests) 


3-2 








TEST INFORMATION 




t 

t 

! 


I 


i 

I 


I 


C45521L..Z (15 tests) C45524L..Z (15 tests) C45621L..Z (15 tests) 
C45641L..y (14 tests) C46012L..Z (15 tests) 

b. C35508I, C35508J, C35508H, and C35508N are not applicable because 

they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE -> 0, 
TRUE «> 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 

c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SH0RT_FL0AT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SH0RT_INTEGER: 

C45231B C45304B C45502B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 

e. C45231D, B86001X, and CD7101G are not applicable because this 

implementation does not support any predefined integer type with a 
name other than INTEGER or LONG_INTEGER. 

£. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX^HANTISSA is less than 48. 

g. C86001F is not applicable because, for this implementation, the 

package TEXT_I0 is dependent upon package SYSTEM. This test 
recompiles package SYSTEM, making package TEXT^IO, and hence 
package REPORT, obsolete. " 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT or 
L0NG_FL0AT. 

j. CA2009C, CA2009F, BC3204C, and BC3205D are not applicable because, 
for this implementation, compilation or recompilation of a generic 
body, following an instantiation of the generic unit, renders the 
instantiating unit obsolete. The obsolescence is detected at bind 
(link) time. 

k. LA3004B, EA3004D, and CA3004F are not applicable because this 

implementation does not support pragma INLINE for library 
subprograms. 

l. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types if the specified size is 
less than 32. 


3-3 










TEST INFORMATION 


■. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, if the specified 
size implies compression of composite or floating point 
components. An explicit size clause for the component type is 
required to accomplish such compression. 

n. CD2A84B..I (8 tests) and CD2A84K.. .L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types if the specified size is less than 32. 

0 . CD4041A is not applicable because this implementation does not 
support record alignment clauses when the specified value is 32. 

p. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 

discriminants without defaults. These instantiations are rejected 

by this compiler. 

q. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

r. CE2102D is not applicable because this implementation supports 

CREATE with IN_FILE mode for SEQUENTIAL_IO. 

s. CE2102E is not applicable because this implementation supports 

CREATE with OUT_FILE mode for SEOUENTIAL__IO. 

t. CE2102F is not applicable because this implementation supports 

CREATE with INOUT_FILE mode for DIRECT_IO. 

u. CE2102I is not applicable because this implementation supports 

CREATE with IN_FILE mode for DIRECT_IO. 

V. CE2102J is not applicable because this implementation supports 

CREATE with OUT_FILE mode for DIRECT_IO. 

w. CE2102N is not applicable because this implementation supports 

OPEN with IN^FILE mode for SEQUENTIAL_IO. 

X. CE21020 is not applicable because this implementation supports 

RESET with IN_FILE mode for SEQUENTIAL^IO. 

y. CE2102P is not applicable because this implementation supports 

OPEN with Ol]T_FILE mode for SEQUENTIAL_IO. 

z. CE2102Q is not applicable because this implementation supports 

RESET with OUT_FILE mode for SEQUENTIAL_IO. 

aa. CE2102R is not applicable because this implementation supports 

OPEN with INOUT FILE mode for DIRECT 10. 


3-4 











TEST INFORMATION 


ab. CE2102S is not applicable because this implementation supports 

RESET with INOUT_FILE mode for DIRECT_10. 

ac. CE2102T is not applicable because this implementation supports 

OPEN with IN_FILE mode for DIRECT_I0. 

ad. CE2102U is not applicable because this implementation supports 

RESET with IN_FILE mode for DIRECT_IO. 

ae. CE2102V is not applicable because this implementation supports 

OPEN with OUT_FILE mode for DIRECT_IO. 

af. CE2102V is not applicable because this implementation supports 

RESET with OUT_FILE mode for DIRECT_IO. 

ag. CE3102E is not applicable because this implementation supports 

CREATE with IN_FILE mode for text files. 

ah. CE3102F is not applicable because this implementation supports 

RESET for text files. 

ai. CE3102G is not applicable because this implementation supports 

deletion of an external file for text files. 

aj. CE3102I is not applicable because this implementation supports 

CREATE with Oin'_FILE mode for text files. 

ak. CE3102J is not applicable because this implementation supports 

OPEN with IN^FILE mode for text files. 

al. CE3102R is not applicable because this implementation supports 

OPEN with OUT_FILE mode for text files. 

am. CE2107B..E (4 tests), CE2107L, CE2110B, imd CE2111D are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
sequential files. The proper exception is raised when multiple 
access is attempted. 

an. CE2107G..B (2 tests), CE2110D, and CE2111B are not applicable 

because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ao. CE3111B, CE3111D..E (2 tests), CE3114B, and CE311SA are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 


3-5 







TEST INFORMATION 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 11 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

BA3006A BA3006B BA3007B BA300&A BA3008B BA3013A 

The following tests were graded PASSED, as approved by the AVO, because the 
only failure messages were due to comparisons between the values of TY'SIZE 
and OBJ'SIZE, where TY is a type and OBJ is an object of type TY. These 
comparisons were based on assumptions not supported by the Ada standard. 

C34004G C34005J C34006D 

The following tests were modified, as approved by the AVO, by replacing the 
value 1024 by the value 2048 in task storage size clauses.- This 
implementation requires more than 1024 bytes for successful execution, as 
documented in Appendix F. 

CD2C11A CD2C11B 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the Motorola VME Delta Series TeleGen2 Ada Compilation System Version 
1.4 was submitted to the AVF by the applicant for review. Analysis of 
these results demonstrated that the compiler successfully passed all 
applicable tests, and the compiler exhibited the expected behavior on all 
tests that are not applicable to the implementation. 


3-6 








TEST INFORMATION 


3.7.2 Test Method 

Testing of the Motorola VME Delta Series TeleGen2 Ada Compilation System 
Version 1.4 using ACVC Version 1.10 vas conducted on-site by a validation 
team from the AVF. The configuration in which the testing vas performed is 
described by the following designations of hardware and software 
components: 

Host computer: Motorola Delta Model 2616 

(MVME 132xt, 68020/68881) 

Host operating system: Motorola SYSTEM V/68 Operating System 

Version V3.5 

Target computer: Motorola Delta Model 2616 

(MVME 132xt, 68020/68881) 

Target operating system: Motorola SYSTEM V/68 Operating System 

Version V3.5 

Compiler: Motorola VME Delta Series TeleGen2 

Ada Compilation System Version 1.4 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions vas taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto a Sun-3 and 
then transferred to the host computer via RCP. 

After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the Motorola Delta 
Model 2616 (MVME 132xt, 68020/68881). Results were transferred to a Sun-3 
via RCP for printing 

The compiler vas tested using command scripts provided by TELESOFT and 
reviewed by the validation team. See Appendix E for a complete listing of 
the compiler options for this implementation. The following list of 
compiler options includes those options which were invoked by default: 


-0 D One or more subprograms being optimized may be 

called from parallel tasks or recursively by an 
exterior subprogram; inline expansion is enabled 
for subprograms generated by the compiler or 
subject to pragma INLINE; automatic inline 
expansion is enabled for all subprograms called 
from only one place. 

-L Generate interspersed source-error listing. 


3-7 









TEST INFORMATION 


-■ Produce executable code. 

Tests were compiled, linked, and executed (as appropriate) using computer. 
Test output, compilation listings, and job logs were captured on magnetic 
tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3.7.3 Test Site 

Testing vas conducted at San Diego CA and vas completed on 29 August 1989. 






APPENDIX A 


DECLARATION OF CONFORMANCE 


TELESOFT has submitted the following Declaration of 
Conformance concerning the Motorola VME Delta Series 
TeleGen2 Ada Compilation System Version 1.4. 


A-1 








DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 
Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 


Base Compiler Name: 
Version: 

Host Architecture ISA: 

OS & VER #: 

Target Architecture ISA: 
OS tL VER #: 


Motorola VME Delta Series TeleGen2 Ada 

Compilation System 

1.4 

Motorola Delta Model 2616 
(Motorola VME 132xt, 68020/68881) 
Motorola SYSTEM V/68 Version V3.5 

Same as Host 
Same as Host 

Implementor’s Declaration 


I, the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. AU certificates and registrations for Ada 
language compiler(8) listed in this declaration shall be made only in the owner’s corporate 





Raymond A. Parra, Director, 


Licensee’s Declaration 


Motorola, Inc. assures that all reasonable steps are taken by Motorola, Inc. to maintain 
the Ada language compiler(8) listed above in conformance to ANSI/MIL-STD-1815A and 
agrees to the public disclosure of the final Validation Summary Report. Motorola, Inc. 
agrees to comply with the Ada Joint Program Office policy on the use of the 
VALIDATED ADA certification mark. Further, Motorola, Inc. declares that to the best 
of its knowledge the Ada language compiler(s) listed, and their hoet/target configurations 
are in compliance with the Ada Langu age Sta ndard ANSI/M1L-STD-1815A. 

» D«t,: 

MO 1 UR0L\,’IJ'JGORPOfeWED f 

Name and Title: "HOMAS A, BFAwf'? VICF PREWAT « 



A-2 







APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplenentation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and 
to certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of the Motorola VME 
Delta Series TeleGen2 Ada Compilation System Version 1.4, as 
described in this Appendix, are provided by TELESOFT. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 

type FLOAT is digits 6 range -1.70141E-«-38 .. 4-1.70141E'f38; 
type LONG FLOAT is digits 15 range -8.988 465 674 311 58E+307 .. 

+8.988>653674;^311^58E+307 ; 

type DURATION is delta 2*1.0«E-14 range -86_400.0 .. 4-86 400.0; 


end STANDARD; 


B-1 





Appendix F 


\ 


1. Implementation Dependent Pragmas 

pragma COMMENT(<string_literal>); 

It may only appear within a compilation unit. The pragma comment has 
the effect of embedding the given sequence of characters in the object 
code of the compilation unit. 

pragma IMAGES(<enumeration type>,Deferred) or 
pragma IMAGES(<enumeration_type>,Immediate); 

It may only appear within a compilation unit. The pragma images 
controls the creation and allocation of the image table for a 
specified enumeration type. The default is Deferred, which saves space 
in the literal pool by not creating an image table for an enumeration 
type unless the 'Image, 'Value, or 'Width attribute for the type is 
used. If one of these attributes is used, an image table is generated 
in the literal pool of the compilation unit in which the attribute 
appears. If the attributes are used in more than one compilation unit, 
more than one image table is generated, eliminating the benefits of 
deferring the table. 

pragma INLINE (<subprogram_name>); 

It functions as defined by the Language Reference Manual with one 
restriction. This compiler does not support pragma INLINE on library 
level subprograms. 

pragma INTERRUPT(Function_MBpping); ' 

It may only appear immediately before a simple accept statement, a 
while loop directly encloeing only a single accept statement, or a 
select statement that includes an interrupt accept alternative. The 
pragma interrupt has the effect that entry calls to the associated 
entry, on behalf of an interrupt, are made with a reduced call overhead. 

pragma LINKNAME(<subprogram_name>, <stringjiteral>); 

It may appear in any declaration section of a unit. This pragma must 
also appear directly after an interface pragma for the same 
<subprogram_name>. The pragma linkname has the effect of making 
string_^Iiteral apparent to the linker. 

pragma SUPPRESS_ALL; 

It may appear an 3 rwhere that a Suppress pragma may appear as defined by 
the Language Reference Manual. The prints Suppress_All has the effect 
of turning off all checks defined in section 11.7 of the Language 
Reference Manual. The scope of appiicablility of this pragma is the 
same as that of the pre^iefined pragma Suppress. 


B-2 











Appandix F, Cont. 

2. ImplementatioD Dependent Attributes 


’Offset Attribute 

'Offset along with the attribute 'Address, facilitates machine code 
insertions. For a prefix P that denotes a declared parameter object, 
P’Offset yields the statically known portion of the address of the first 
of the storage units allocated to P. The value is the object’s offset 
relative to a base register and is of type Long_Integer. 


INTEGER ATTRIBUTES 


’Extended_Image Attribute 


Usage: X'Extended^Image(Item,Width,Base,Based,Space_IF Positive) 

Returns the image associated with Item as per the Text lo definition. 

The Text__Io definition states that the value of Item is an integer 
literal with no underlines, no exponent, no leading seros (but a tingle 
sero for the sero value) and a minus sign if negative. If the resulting 
sequence of characters to be output has fewer than Width characters then 
leading spaces are first output to make up the difference. 

(LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function that may have more than one parameter. The parameter Item must 
be an integer value. The resulting string is without underlines, leading 
zeros, or trailing spaces. 

Parameter Descriptions: 

Item — The user specifies the item that he wants the 

image of and passes it into the function. This 
parameter is required. 

Width — The user may specify the minimum number of 

characters to be in the string that is returned. 

If no width is specified then the default (0) is 
assumed. 


B-3 





Appendix F, Cont. 


Base ~ The user may specify the base that the image is 

to be displayed in. If no base is specified then 
the default (10) is assumed. 

Based — The user may specify whether he wants the string 

returned to be in base notation or not. If no 
preference is specified then the default (false) 
is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then 
the default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range 

Then the following would be true: 

X'Extended_Image(5) «"5" 

X’Extended Image(5,0) — "S" 

X’Extended”lmage(5,2) - " 5" 

X’Extended"lmage(5,0,2) - "101" 

X’Extended~Image(5,4,2) - " 101" 

X’Extended”lmage(5,0,2,True) - "2# 101 # " 

X’Extended_Image(5,0,10,Falw) «"5" 

X’Extended_Image(5,0,10,Falae,True)- » " 5" 
X’Extended_Image(>l,0,10,False,Fal8e) — "-1" 
X’Extended_Image(>l,0,10,Falae,True) » "•!" 
X’Extended_Image(-l,l,10,False,True) — "-1" 
X’Extended_lmage(>l,0,2,True,True) — "-2#1#" 
X’Extended_Image(-l,10,2,True,True) “" -2#1#" 











Appendix F, Cent. 

’Extended Value Attribute 


Usage: X’Extended_Value(ltem) 

Returns the value associated with Item as per the Text_Io definition. 

The Text_Io definition states that given a string, it reads an integer 
value from the beginning of the string. The value returned corresponds to 
the sequence input. (LRM 14.3.7:14} 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual parameter Item must be of 
predefined type string. Any leading or truling spaces in the string X 
are ignored. In the case where an illegal string is passed, a 
CONSTRAINT ERROR is raised. 

Parameter Descriptions: 

Item — The user passes to the function a parameter of the predefined 
type string. The type of the returned value is the base type X. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended ValueCS”) -5 

X’Extended'Value(’’ 5") - 5 

X’Extended"Value("2#101#’') - 5 

X’Extended■ValueC-l") - -1 

X’Extended"Value(" -I") - -1 


B-5 








Appandix F, Cont. 


’Extended_Width Attribute 

Usage: X'Extended_Width(Base,Based,Space_If_Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype; this attribute is a function 
that may have multiple parameters. This attribute yields the maximum 
image length over all values of the type or subtype X. 

Parameter Descriptions: 

Base — The user specifies the base for which the width 

will be calculated. If no base is specified 
then the default (10) is assumed. 

Based — The user specifies whether the subtype is stated 

in based notation. If no value for based is 
specified then the default (false) is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then the 
default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range •10..16; 

Then the following would be true: 


X’Extcnded 

X’Extended 

X’Extcnded 

X'Extcndcd 

X’Extcnded 

X’Extcnded 

X’Extcndcd 

X’Extcnded 

X’Extcnded 

X’Extcnded 


Width 

Width(lO) 

Width(2) 
Width(10,Truc) 
Width(2,True) 
Width(10,FalM,Truc) 
Width( 10,Truc,Falac) 
Width(10,True,True) 
Width(2,Tnic,T rue) 
_Width(2,False,Truc) 


- 3 - ”-10" 

- 3 - "-10" 

- 5 - " 10000 " 

- 7 - ".10#10#" 

- 8 - " 2 # 10000 #" 

- 3 - " 16" 

-7 -".10#10#" 

- 7 - " io#ie#" 
-9 -" 2 # 10000 #" 

- 6 - " 10000 " 


B-6 









App«ndix F, Cont. 


ENUMERATION ATTRIBUTES 


'Extended_Iinage Attribute 

Usage: X'Extended_Image(Item,Width,Uppercaae) 

Returns the image associated with Item as per the Text_Io definition. 

The Text_Io definition states that given an enumeration literal, it will 
output the value of the enumeration literal (either an identifier or a 
character literal). The character case parameter is ignored for character 
literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function that may have more that one parameter. The parameter Item must 
be an enumeration value. The image of an enumeration value is the 
corresponding identifier which may have character case and return string 
width specified. 


Parameter Descriptions: 

Item - The user specifies the item that he wanu the image of and 
passes it into the function. This parameter is required. 

Width — The user may specify the minimum number of characters to 
be in the string that is returned. If no width is 
specified then the default (0) b assumed. If the Width 
specified b larger than the image of Item, then the 
return string b fiadded with trailing spaces; if the Width 
specified b smaller than the image of Item then the 
default b assumed and the image of the enumeration value 
b output completely. 

Uppercase - The user may specify whether the returned string b in 
uppercase characters. In the case of an enumeration type 
where the enumeration litcrab are character litcrab, the 
Uppercase b ignored and the case specified by the type 
de^tion b taken. If no preference b specified then 
the default (true) b assumed. 


B-7 







Appendix F, Cont. 
Examples: 


Suppose the following types were declared: 

Type X is (red, green, blue, purple); 

Type Y is ( a’, ’B’, ’c\ ’D’); 

Then the following would be true: 


X'Extended Image(red) 

- "RED" 

X’Extended_lmage(red, 4) 

- "RED " 

X'Extended_image(red,2) 

- "RED" 

X'Extended_Image(red,0,fal8e) 

- "red" 

X'Extended_Image(red,10,fal8e) 

- "red " 

Y*Extended_lmage(’a’) 

- "V" 

Y'Extended Image(’B’) 


Y'Extended_lmage('a’,6) 

« n 

Y'Extcnded_Image('a',0,true) 


'Extended^Value Attribute 


Usage: X'Extended_Value(Item) 


Returns the image associated with Item as per the Text_Io definition. 
Text lo definition states that it reads an enumeration value from the 


beginning of the given string and returns the value of the enumeration 
literal that corresponds to the sequence input. (LRM 14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual parameter Item must be of 
predefined type string. Any leading or truling spaces in the string X 
are ignored. In the case where an illegal string is passed, a 
CONSTRAINT ERROR is raised. 


Parameter Descriptions: 

Item — The user pa ss e s to the function a parameter of the predefined 
type string. The type of the return^ value is the baw type of X. 


B-8 









Appendix F, Cont. 

Examples: 

Suppose the following type was declared: 
Type X is (red, green, blue, purple); 


Then the following would be true: 

X’Extended_Value("red") * red 

X’Extended_Value(" green”) — green 

X’Extended_Value(" Purple”) »purple 
X'Extended Value(” GreEn ") > green 


’Extended _Width Attribute 
Usage: X’Extended_Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute is a 
function. This attribute yields the maximum image length over all values 
of the enumeration type or subtype X. 


Parameter Descriptions: 

There are no parameters to this function. This function returns the 
width of the largest (width) enumeration literal in the enumeration type 
specified by X. 

Examples: 

Suppose the following types were declared: 

Type X is (red, green, blue, purple); 

Type Z is (Xl, Xl2, X123, X1234); 

Then the following would be true: 

X’Extended Width - 6 - "purple” 

Z’Extended 'Width - 5 > "X12M" 


B-9 





Appendix F, Cont. 


FLOATING POINT ATTRIBUTES 
'Extended_lmage Attribute 

Usage: X'Extended_Iniage(Item,Fore,Aft,Exp,Base,Based) 

Returns the image associated with Item as per the Text lo definition. The 
Text_Io definition states that it outputs the value of the parameter Item 
as a decimal literal with the fotmat defined by the other parameters. If 
the value is negative then a minus sign is included in the integer part of 
the value of Item. If Exp is 0 then the integer part of the output has as 
many digits as are needed to represent the integer part of the value of 
Item or is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function that may have more than one parameter. The parameter Item must 
be a Real value. The resulting string is without underlines or trailing 
spaces. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for the 
integer part of the decimal repreueotation in the return 
string. This includes a minus ngn if the value is negative 
and the base with the '#* if based notation is specified. If 
the integer part to be output has fewer characters than 
specified by Fore, then leading spaces are output first to 
make up the difference. If no Fore is specified then the 
default (2) value is assumed. 

Aft — The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 

If the delta of the type or subtype is greater than 0.1 then 
Aft is one. If no Aft is specified then the default 
(X’Digits-1) is assumed. If based notation is specified the 
trailing *#’ is included in aft. 

Exp ~ The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading seros. If no Exp is specified then the 
default (3 ) is assumed. If Exp is 0 then no exponent is used. 


B-10 






Appendix F, Cont. 


Base — The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based >- The user may specify whether he wants the string returned to 
be in based notation or not. If no preference is specified 
then the default (false) is assumed. 

Examples: 


Suppose the following type was declared: 


Type X is digits 5 range -10.0 .. 16.0; 


Then the following would be true: 


X'Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 
X'Extended 


Image(5.0) 

Image(5.0,l) 

[mage(-5.0,l) 

[mage(S.0,2,0) 

[mage(5.0,2,0,0) 

[mage(5.0,2,0,0t2) 

[m<tge(5.0,2.0.0,2,True) 

[mage(5.0,2,2,3,2iTrue) 


- " S.OOOOE-t-OO** 

- •'S.OOOOE-t-OO" 

- •’-S.OOOOE-t^X)'' 

- " S.OE+OO" 

- " 5.0" 

- " 101 . 0 " 

- " 2 # 101 . 0 #" 

- "2#l.l#E+02" 


'Extended_Value Attribute 
Usage: X'Extended_Value(Item) 

Returns the value associated with Item as per the Text_Io definition. 

The Text_Io definition states that it skips any leading seros, then reads 
a plus or minus sign if present then reads the string according to the 
syntax of a real literal. The return value u that which corresponds to 
the sequence input. (LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual p>arameter Item must be of 
predefined type string. Any leading or trailing spaces in the string X 
arc ignored. In the case where an illegal string is passed, a 
CONSTRAINT ERROR is raised. 



B-ll 





Appendix F, Coat. 


Parameter Descriptions: 

Item — The user passes to the function a parameter of the predefined 
type string. The type of the returned value is the base type 
of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0; 

Then the following would be true: 

X’Extended_Value(''5.0”) * 5.0 

X’Extended_Value(''0.5El") * 5.0 

X’Extended_Value('’2#1.01#E2") - 5.0 


’Extended_Digits Attribute 
Usage: X*Cxtended_Digits(EIase) 

R«t)sjns the number of digits using base in the mantissa of model numbers 
of the subtype X. 

Parameter Descriptions: 

Base — The user may specify the base that the subtype is defined in. 

If no base is specified then the default (10) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range >10.0 .. 16.0; 

Then the following would be true: 

X'Extended__Digits — 5 


B-12 








Appendix F, Cont. 


FIXED POINT ATTRIBUTES 
’Extended_Iinage Attribute 

Usage: X'Extended Image(Item,Fore,Aft,£xp,Base,Based) 

Returns the image associated with Item as per the Text_Io definition. 

The Text definition states that it outputs the value of the parameter 
Item as a decimal literal with the format defined by the other parameters. 

If the value is negative then a minus sign is included in the integer part 
of the value of Item. If Exp is 0 then the integer part of the output has 
as many digits as are needed to represent the integer part of the value of 
Item or is sero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function that may have more than one parameter. The parameter Item must 
be a Real value. The resulting string is without underlines or trailing 
spaces. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for the 
integer part of the decimal representation in the return 
string. This includes a minus sign if the value is negative 
and the base with the '#’ if based notation is specified. If 
the integer part to be output has fewer characters than 
specified by Fore, then leading spaces are output first to 
make up the difference. If no Fore is specified then the 
default (2) value is assumed. 

Aft — The user may specify the minimum number of decimal digits 
after the decimal point to acconunodate the precision desired. 

If the delta of the type or subtype is greater than 0.1 then 
Aft is one. If no Aft is specified then the default 
(X’Digita*!) is assumed. If based notation is specified the 
trailing is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading seros. If no Exp is specified then the 
default (3 ) is assumed. If Exp is 0 then no exponent b used. 


B-13 








Appendix F, Coot. 


\ 




Base — The user may specify the base that the image is to be 
displayed in. If no base is specified then the default (10) 
is assumed. 

Based — The user may specify whether he wants the string returned to 
be in based notation or not. If no preference is specified 
then the default (false) is assumed. 

Examples: 


Suppose the following type was declared: 
Type X is delta 0.1 range >10.0 .. 17.0; 


Then the following would be true: 


X'Extended_Image(5.0) 

X'Extended_Image(5.0,l) 

X'Extended_Image(>5.0,l) 

X*Extended_Image(5.0,2,0) 

X*Extended_Image(5.0,2,0,0) 

X'Extended_Image(5.0,2,0,0,2) 

X’Extended_Image(S.0,2,0,0,2,True) 

X’Extended_Ixnage(5.0,2,2,3,2,True) 


•• 5.00E-(-00" 
"S.OOE-MX)'’ 
"-S-OOE+OO" 

" S-OE-fOO" 

. " 5.0" 

■= " 101 . 0 " 

» ” 2 # 101 . 0 #" 

- "2#I.l#E+02" 


'Extended_Value Attribute 
Usage: X'Extendcd_Value(lmage) 

Returns the value associated with Item as per the Text_Io definition. 

The Text_Io definition states that it skips any leading zeros, then reads 
a plus or minus sign if present then read the string according to the 
syntax of a real literal. The return value is that which corresponds to 
the sequence input. (LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a 
function with a single parameter. The actual parameter Item must be of 
predefined type string. Any leading or tr^ng spaces in the string X 
are ignored. In the case where an illegal string is passed, a 
CONSTRAINT ERROR is raised. 


B-U 








Appendix F, Cent. 


Parameter Descriptions: 

Image — The user passes to the function a parameter of the predefined 
type string. The type of the returned value is the base type 
of the input string. 

Examples: 

Suppose the following type wu declared: 

Type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’Extended_Value(”5.0") - 5.0 

X’Extended_Value("0.5El") - 5.0 

X'Extended Value(”2#1.01#E2'') 5.0 


'Extended _Fore Attribute 
Usage: X'Extcnded_Fore(Ba8e,Based) 

Returns the minimum number of characters required for the integer part of 
the baaed representation of X. 

Parameter Descriptions: 

Base — The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default (10) 
is assumed. 

Based — The user may specify whether he wants the string returned to 
be in based notation or not. If no preference is specified 
then the default (false) is assumed. 


B-15 








Appendix F, Cont. 
Examples: 


Suppose the following type was declated: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended Fore — 3 — "-10” 

X’Extended~Fore(2) - 6 - " 10001" 


'Extended _Aft Attribute 
Usage: X'Extended_Aft(Base,Based) 

Returns the minimum number of characters required for the fractional ; nrt 
of the based representation of X. 


Parameter Descriptions: 

Base — The user nttay specify the base that the subtype would be 
displayed in. If no base is specified then the default (10) 
is assumed. 

Based — The user may specify whether he wants the string returned to 
be in based notation or not. If no preference is specified 
then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended Aft - 1 - " 1 " from 0.1 

X’Extended'Aft(2) - 4 - ”0001" from 2#0.0001# 


B-16 







Appvndbc F, Cont. 

3. Specification of Package SYSTEM 

Package System is 

TYPE Address is Access Integer; 

TYPE Subprogram Value is PRIVATE; 

TYPE Name IS (TELEGEN2); 

Sy8tem_Name : CONSTANT name TELEGEN2; 

Storage_Unit ; CONSTANT :* 8; 

Memory Sise : CONSTANT (2 ** 31) - 1; 

— System-Dependent Named Numbers: 

Min Int : CONSTANT -(2 •' 31); 

Maxjnt : CONSTANT (2 •* 31) - 1; 

Max^Digits : CONSTANT 15; 

Max Mantissa : CONSTANT 31; 

Fine~Delta : CONSTANT 1.0 / (2 *• Max Mantissa); 
Tick” : CONSTANT lO.OB-3; 

— Other System-Dependent Declarations 
SUBTYPE Priority IS Integer RANGE 0 .. 63; 

private 

TYPE Subprogram Value IS 
RECORD 

Procjsddr : Address; 

Staticjink : Address; 

Global_franie : Address; 

END RECORD; 

END System; 


B-17 








Appandix F, Cont. 

4. Restrictions on Representation Clauses 

The hardware needs a minimuni of 32 bits to represent floating point 
and access types. Therefore, specifying a sise of less than 32 bits cannot 
be handled simply by the underlying hardware (LRM 13.1 (10)). 

The Compiler supports the following representation clauses: 

Length Clauses: for enumeration and derived integer types ’SIZE 
attribute (LRM 13.2(a)) 

Length Clauses: for composite types ’SIZE attribute (LRM 13.2(a) 

Sise clauses for composite types are rejected when the 
specified sise implies compression of composite components. 

Length Clauses: for access types ’STORAGE_SlZE attribute (LRM 13.2(b)) 

Length Clauses: for tasks types *STORAGE_SIZE attribute (LRM 13.2(c)) 
A minimum of 2048 storage units is required for the task 
storage sise. 

Length Clauses: for fixed point types ’SMALL attribute (LRM 13.2(d)) 

Enumeration Clauses: for character and enumeration types other than 
boolean (LRM IS.S) 

Record representation Clauses (LRM 13.4) with following construnts: 

• Each component of the record must be specified with 
a component clause. 

- The ^ignment of the record is restricted to mod 2, 
word (16 bit)aligned. 

- Bits are ordered right to left within a byte. 

Address Clauses: for objects, entries and external subprograms 
(pragma INTERFACE used) (LRM 13.5(a)(c)) 

This compiler docs NOT support the following representation clauses: 

Ehiumeration Clauses: for boolean (LRM 13.3) 

Address Clauses: for packages, task units, and non^xtcmal Ada 
subprograms (LRM 13.5(b)) 


B-18 











Appendix F, Cont. 

5. Implementation dependent naming conventions 


There are no implementation*generated names denoting 
implementation dependent components. 


6. Interpretation of Expressions in Address Clause 

Expressions that appear in address specifications are interpreted 
as the first storage unit of the object. 


7. Restrictions on Unchecked Conversions 

Unchecked conversions are allowed between any types or subtypes unless 
the target type is an unconstrained record or array type. 


6. I/O Package Characteristics 

Sequentia]_IO and Direct _IO cannot be instantiated for 
unconstrained array types or unconstrained types with discriminants 
without default values. 

In TEXT JO the type COUNT is defined as follows: 

type COUNT is range 0 .. 2_147_483_646; 

In TEXT JO the subtype FIELD is defined as follows: 

subtype FIELD is INTEGER range 0..1000; 

In TEXTJO, the Form parameter of procedures Create and Open is not 
supported. (If you supply a Form parameter with either procedure, it 
is ignored.) 


B-19 










APPENDIX C 


TEST PARAMETERS 


C«rtain tests in the ACVC make use of iaplenentation-dependent values, such 
as the aaxinua length of an input line and invalid file naaes. A test that 
Bakes use of such values is identified by the extension .TST in its file 
naae. Actual values to be substituted are represented by naaes that begin 
with a dollar sign. A value Bust be substituted for each of these naaes 
before the test is run. The values used for this validation are given 
below. 


Naae and Meaning _ Value 

$ACC_SIZE 32 

Jn integer literal whose value 
is the nuaber of bits sufficient 
to hold any value of an access 
type. 


$BIG IDl (1..199 -> 'A', 200 -> '1') 

Jn identifier the size of the 
aaxiaua input line length which 
is identical to $BIG_I02 except 
for the last character. 


$BIG_ID2 (1..199 -> 'A', 200 -> '2') 

An identifier the size of the 
aaxiaua input line length which 
is identical to $BIG_I01 except 
for the last character. 


$BIG_ID3 

An identifier the size of the 
aaxiaua input line length which 
is identical to $BIG_ID4 except 
for a character near~the aiddle. 


(1..99 -> 'AS 100 -> '3', 
101..200 -> 'A') 


C-1 










TEST PARAHETERS 


Naae and Meaning _ 

$BIG_ID4 

An identifier the size of the 
aaximum input line length which 
is identical to $BIG_ID3 except 
for a character near~the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
■axinua line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
aaxinua line length. 

$BIG_STRING1 

A string literal which when 
catenated with $BIG STRING2 
yields the image of $filG_IDl. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
$BIG STRINGl yields the image of 
$BIG”ID1. 

SBLANRS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A ~ universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEHORT_SIZE. 

$DEPAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


(1..99 -> 'A', 100 -> '4', 
101..200 -> 'A') 


(1..197 -> 'O', 198..200 -> "298") 


(1..195 -> 'O', 196..200 -> "690.0") 


(1 -> 2..101 -> 'A', 102 -> '"') 


(1 -> '"', 2..100 -> 'A', 101 •> '1', 
102 -> '"') 


(1..180 -> ' ') 

2147483646 

2147483647 

8 


C-2 










TEST PARAMETERS 


Na»e and Meaning _ Value _ 

$DEFAULT_S7S NAME TELEGEN2 

The ~ value of the constant 
SYSTEM.SYSTEMNAME. 

$DELTA_DOC 2#1.0#E-31 

A real literal vhose value is 
SYSTEM.FINEDELTA. 

$FIELD_LAST 1000 

A ~ universal integer 

literal vhose value is 
TEXT_I0.FIELD'LAST. 

$FIXED_NAME N0_SUCH_TYPE 

The name of a predefined 

fixed-point type other than 
DURATION. 

$FL0AT_NAME N0_SUCH_TYPE 

The name of a predefined ~ ~ 

floating-point type other than 

FLOAT, SHORT FLOAT, or 

LONG^FLOAT. 

$GREATER_THAN_DURATION 100000.0 

A universal real literal that 
lies between DURATION'BASE'UST 
and DURATION'LAST or any value 
in the range of DURATION. 

SGREATER TBAN_DURATI0N BASE LAST 131073.0 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$eiGH_PRI0RITY 63 

An integer literal vhose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 BADCHAR *‘fX 

An ~external~ file name which 

contains invalid characters. 

$ILLBGAL_EXTERNAL_FILE_NAME2 /NONAME/DIRECTORY 

An ~extcmal~‘ file name which 

is too long. 

$INTEGER_FIRST -3276S 

A universal integer literal 

vhose value is INTEGER'FIRST. 


C-3 








TEST PARAMETERS 


Naae and Meaning _ Value _ 

SINTEGERLAST 32767 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_UST_PLUS_1 32768 

A universal integer literal 

whose value is INTEGER'LAST 1. 

$LESS_THAN_DURATION -100000.0 

A~ universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION BASE_FIRST -131073.0 

A~univirsal real literal that is 
less than DURATION'BASE'FIRST. 

SLOWPRIORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 31 

An Integer literal whose value 
is SYSTEM.MAX^MANTISSA. 

$MAX DIGITS 15 

Raxlaum digits supported for 
floating-point types. 

$MAX_IN LEN 200 

Maximum input line length 
permitted by the implementation. 

SMAXINT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.NAX_INT-»^1. 

$MAX_LEN_INT_BASED_LITERAL (1..2 -> "2:", 3..197 -> 'O', 

A universal ^ integer based 198..200 ■> "11:") 
literal whose value is 2111# 
with enough leading seroes in 
the mantissa to be $MAX_IN_LEN 
long. “ “ 


C-4 









TEST PARAMETERS 


Nagte and Meaning _ 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be $MAX_IN_LEN long. 

$MAX_STRING LITERAL 

A string literal of size 
$MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An inleger literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT FLOAT, SHORT INTEGER, 

LONG_FlOAT, or LONG'INTEGER. 

$NAME_UST 

A~list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAXINT. 

$NEW_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DEFAULT_MEM_SlZE. If there is 
no other "value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(1..3 -> "16;", 4..196 -> 'O', 

197..200 -> "F.E;") 

(1 -> 2..199 -> 'A', 200 -> '"') 

-2147483648 

32 

NO_SUCH_TYPE_AVAILABLE 

TELEGEN2 

16#FFFFFFFE# 

2147483647 


C-5 










TEST PARAMETERS 


Name and Meaning _ 

$NEW_STOR_UNIT 

An inleger literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other~ permitted value, then 
use value of SYSTEM.STORAGEUNIT 

SNEWSYS NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


C 


Value 


8 


TELEGEN2 


32 


0.01 









APPENDIX D 


VITHDRAVN TESTS 


SoM tests are withdrawn froa the ACVC because they do not confora to the 
Ada Standard. The following 44 tests had been withdrawn at the tiae of 
validation testing for the reasons indicated. A reference of the fora 
Al-ddddd is to an Ada Coaaentary. 


a. E2800SC: This test expects that the string ”— TOP OF PAGE. —63” of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma* 
and it is this text that aust appear at the top of the page. 

b. A39005G: This test unreasonably expects a coaponent clause to pack an 
array component into a ainiaua size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions* and it assumes that 

guards are evaluated indivlsibly. A conforming iapleaentation nay use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING 0F_TBE_GUAK0 
results in a call to REPCHIT.FAILED at one of lines 52 or 56.~ ~ 

e. BC3009Bt This test wrongly expects that circular instantiations will 
be detected in several coapilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256* the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62DI This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. (3)2A63A..0* CD2A66A..0* CD2A73A..D* and CD2A76A..0 (16 tests): These 


D-1 






VITBDRAVN TESTS 


« 


tests vrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing thee to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the VG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84K..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control, 
must not be expected. 

j. (n)2DllB: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..0, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

a. (3}7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of chimge that must be at least 
SYSTEM.TICK—particular instances of change nay be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the VG9 
ARG. 

o. (n)7205Dt This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107It This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_^ERR0R is expected to be 
raised by an attempt to read one object" as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 





WITHDRAWN TESTS 


q. CE3111C: This test requires certain behavior, when tvo files are 
associated with the saae external file, that is not required by the 
Ada standard. 

r. CE3301A: This test contains several calls to END_OF_LINE and 
END_OF_PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD INPUT (lines 103, 107, 118, 
132, and 136). 

s. CE3A11B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAYOUT^ERROR is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 















4 


! 


APPENDIX E 

COMPILER OPTIONS AS SUPPLIED BY TELESOFT 


Compiler: Motorola VME Delta Series TeleGen2 Ada 

Compilation System Version 1.4 


ACVC Version: 1.10 


I 


I 

I 

I 

1 


E-1 





I 


Ada Compiler 


The Ada compiler is invoked via the ada command. The general syntax of the 
command is: 

ada {<option>} <ixipQt_spec> 


where: <inpiit_spec> is one or more Ada source files and/or an inpat>list 
file (<name>.ilf] that lists the names of Ada source files. Note: 
“.ada” will be appended to a source file name if no suffix is present. 


Option 1 

Action 

Default 

Common options: 



-l(ibfile <libnanie> 

Specify name of library file. 

-1 liblstalb 

-tfemplib <sublib>{,...) 

Specify temporary list of sublibt. 

None 

-V(ip«cc_sisc <Taiue> 

Specify site of virtual space (Kbytes). 

-V 2000 

-vfcrboM 

Output progiew messages. 

(Opposite) 

-L(ut 

Generate soutce/error Ustmg. (Can¬ 
not be used with -F). 

(Opposite) 

-F(iles^niy _sm 

Generate listing containing errois 
only. (Cannot be used with -L). 

(Opposite) 

-C(ontcxt <valuc> 

Ratpiest <value> context lines with 
each error reported. 

-C 1 

-SfouRe.Mm 

Generate sonree/assembiy listing. 

(Opposite) 

-E(in>r_abart <vaiue> 

Abrrt compilation after specified 
number of errors or waminp. 

-E 999 

-«(rTonj9nly 

Run front end only (for error checks). 

Full compile 

-i(nhibit <keTT> 

Suppreu checks and source informa¬ 
tion in obiect coda 

(Opposite) 

-d(cbug 

Include debug information with ob¬ 
ject. (-d automaticaily scu -k.) 

(Opposite) 

-k(eep 

Retain intermediate representation of 
unit. Must be used if azr or sepf is to 
be used on the unit. 

(Opposite) 

-m(ain <nnit> 

Produce exocutabie code for <onit>. 

(Opposite) 

-0(ptimisc <ke7T> 

Optimise code. 

(Opposite) 

-ttfpdatcjib <kcr> 

<kcy> w s: update library after each 
source is proccsed: <kcy> > i: up¬ 
date after compiler invocation. 

-u s 

-xfecution .profile 

Output profile code in object 

(Opposite) 


E-2 

















Ada Linicer 


The Ada linker is invoked via the old command. The linker links object code 
to produce an executable module. The syntax of the command is: 

aid {<optioii>} <mxit> 

where: <optioii> is none or more of the options in the table below. 

<'anit> is the name of the main program unit whose object code b to 
be bound and/or linked; <nnit> is required. 


Option 

Action 

Default 

Common options: 

‘-{(ibfile <libnanic> 
-tfempiib <sobiib>{,-.} 
-V(spaee.jtM cvaluo 
-v(*rboit 

Spcdty name of Gbraiy file. 

Spcdfy temporary fist of tubltbs. 
Specify site of virtual space (Kbytes) 
Output progrea metsagea 

—1 liblst.alb 
None 
-V 2000 
(Opposite) 

-biindjiniy 

Cali Che binder ortly; produce ela> 
boration code and link senpt. 

lljllig 

-oiutput <fiie_spec> 

I’ut executable cooc in <fiie>. 

EB5S9H 

-p(asi.ob}ecu "<smng>* 

-Pfaa^ptions *<sthng>” 

Pass "stnng" arguments directly to 
link editor. 

Pass 'string* options directly fink 
editor. 

(Opposite/ 

(Opposite) 

K^gygjQIIIIIIIIIIIII 

Generate assembly listing (or .eem 
file. 

(Opposite) 

>T(raccoaca <vaiuc> 

Set depth of exception tracnack to 
<value> levels. 

-T 5 

-x^ccuuon^irohle 

inciunc profile udormation ui exccui* 
able module. 

(Opposite) 

Tasking optional 

—D(cla73onPrtapt 
-Xfccpaon^ow 
-w(“timesiice" <Taiuc> 

-Y <Tsius> 

-jr <Taittc> 

Specify non>preemptivc delay. 

Report unhandled exceptions in tasks. 

Limit task execution time to <Taiue> 
msec 

Allocate <Taluc> bytee (long) for task 
stack. 

Allocate <vaiue> bytee (natural) for 
stack guard. 

Preemptive 

(Opponte) 

-w 0 

-Y 8192 

-y 1024 





















