T 


AD-A284 054 

.‘"II, 



FINAL TECHNICAL REPORT 



ARPA Grant# MDA972-92-J-1031 

(Undergraduate Curriculum & Course Development 
in Software Engineering add the Use of Ada) 


"Ada in Introductory Computer Science Courses" 


SUBMITTED BY: 

Sandra Honda Adams 
Computer Science 
Sacred Heart University 
5151 Park Avenue 
Fairfield, Connecticut 06432-1000 


TO: 


_ DTiC 

£*electe 

AUG 3 1 1994 

F 


5 



CLEARED 

FOR OPEN PUBLICATION 

• : 1994 21 


Defense Technical Information Center 
Attn: DTIC-DFAC 
Cameron Station 
Alexandria, VA 22304-6145 


r iN;"./V.IMTION 
^3 SO-PA) 

T'iSE 


This document tics oeen apptored 
lor public telecse and sale; it* 
distribution ts unlimited. _ 


^^ 94-28146 

IIIIHIIIII 


■ IjCFSCTED 3 


e ? o 


\13 

3lf( 








Best 

Available 

Copy 







TABLE OF CONTENTS 


Introduction.1 

Summary.3 

Time Table .4 

Budget . . » . 6 

CS050 Notes.7 

CS051 Notes.10 



A 

B 

C 

D 

E 

F 
















Introduction 





Introduction 


Sacred Heart University Computer Science Department which is a part of 
the Faculty of Science, Math, and Computer Science, has offered a computer 
science major since fall 1983. This program offers two options to service both 
the business and scientific communities. The curriculum is continually updated 
following American Computing Machinery (ACM) curriculum guidelines. There 
are currently 150 computer science majors at the University. Graduates of our 
program are employed in ►>*» <;«. financial firms, software development firms, 
utility companies, local a. ■ .a. government, manufacturing firms, and also 
three local defense contractors, 1 if/Sikcrsky Aircraft, UT/Norden Systems, and 
Avco Lycoming Industries. 

Sacred Heart University's current computer science curriculum has been 
modified in the 1992-1993 school year after receiving an ARPA Grant (Advanced 
Research Projects Agency) for "Undergraduate Curiculum and Course 
Development in Software Engineering and the Use of Ads, " BAA UB1-18. 
Category Ml . The grant entitled, "Ada in Introductory Computer Science 
Course", allowed for the modification of both introductory programming courses 
to use Ada as the language of choice, since it is a good software engineering 
tool that can best support many of the goals and principles of software 
engineering. The two introductory computer science courses, CS050 
(Introduction to Computer Science) and CS051 (Data Structures) were developed 
to include Ada and software engineering principles. The developed courses 
allows the student to apply a methodology using Ada and some principles of 
software engineering to build software that is maintainable, efficient and 
understandable at an introductory level. 

Thej:ourses utilized features of Ada to support the development of high- 
quality, reliable, reusable, and portable software. Learning to conform to good 
programming practices using Ada provided very clear ideas of software 
engineering principles and goals without formally teaching software engineering 
concepts. The students will formally learn software engineering in their junior 
year. Basic software engineering principles can be indirectly learned during the 
first two programming courses. 

The students were provided with a course syllabus, program examples, 
handouts, programming assignments and articles to read. The students were 
introduced to programming with ease, and seemed to enjoy the classes. They 
found the Ada language simple to understand and use. Most of ail, they found 
Ada to be highly readable and clear. Most of my efforts went into developing 
the first course. Covering the right material in the right order is an art. The 
transition into programming should be a painless one. Both scientific and 


1 




information option students enroll in both courses. It was important to make the 
program problems in the first course simple while students dealt with their first 
encounter with Ada, the editor and unix. Initial assignments were not difficult. 
Assignments became increasingly open-ended to give the better students an 
opportunity for creativity. By giving the students handouts and examples to 
follow, learning was made very simple. The text was not followed sequentially, 
but used as a supplimental resource. Students were fore warned of this and 
were told to follow the lecture order in their text. All material on the syllabus 
was covered in class and supplimented with handouts. The CS051 course 
followed the text much more carefully. It did not require as many handouts. 


2 


Summary 




Summary 


The grant received from ARPA provided the opportunity to develop 
new courses material for CS050 and CS051, using Ada and software 
engineering principles. It made work easier for the project director to 
develop Ada software examples at home with the purchase of a Meridian 
Ada PC Compiler. It provided wonderful opportunities to meet other 
educators and defense personnel promoting the Ada language. It 
provided opportunities to participate in several Ada and Software 
Engineering related conferences and to arrange for one to be held on our 
campus. I have met people from ASEET, strong Ada supporters, 
educators who have adopted or are about to adopt Ada, and defense 
contractors in our local area. And best of all, it has allowed me to 
discover a language that I personally like, to use in the introductory 
programming courses. It has been a wonderful opportunity and 
experience that I have thoroughly enjoyed and appreciated! 



Time Table 





Time Table 


Summer 1992 

Prepare for CS050 (Introduction to Programming) 

- Review Textbooks for course 

- Research Articles for use in class 

- Decide on course content 

- Prepare handouts 


Fall 1992 


Implement CS050 (Introduction to 
Programming)- 2 Sections 
Prepare for CS051 (Data Structures) 

- Research Articles for use in class 

- Decide on course content 

- Prepare handouts 

Participate in REUSE EDUCATION WORKSHOP hosted 
by West Virginia Univ, CARDS, ASEET, & AdaNET 
Working Group 1: 

"Software Reuse in Computer Science Courses" 


Spring 1993 

Evaluate Course, Revise Course 
Implement CS051 (Data Structures) 

- 1 Section 

Implement CS050 (Introduction to Programming) 

- 2 Sections 

Summer 1993 

Evaluate Courses 
Make Revisions 


4 




Fall 1993 


Implement CS050 

-2 Sections (Introduction to Programming) 
Implement CS051 

•1 Section ( Data Structures) 

Evaluate and make Revisions 

Spring 1994 

implement CS050 

1 Section (Introduction of Programming) 
implement CS051 

1 Section (Data Structures) 

Attended Eighth Annual ASEET Symposium 

Albuquerque, New Mexico, Jan. 10-13, 1994 
Attended Introduction to Ada9X classes 

by Capt. David Cook & Eugene Bingue 

Present Paper, at Twelfth Annual National Conference 
on Ada Technology entitled, 

"Ada, a Software Engineering Tool, in 
introductory Computer Science Programming 
Courses at Sacred Heart University: 

Mutual Benefits" Williamsburg, Va Mar. 21-24 
Attended Ada9X tutorial by Normam Cohen 


Summer 1994 


Complete report for grant. 

Planning to host 3 days hands-on Ada9X 

ASEET 1994 Summer Workshop on campus 
for educators and those interested in Ada9X 
"The New World of Ada9X", August 3-5, 1994 

• Introduction to Ada9X 

• Object Oriented Design in Ada9X 

• Real-time in Ada9X 

Coordinator - Catherine McDonald IDA/ASEET 


c 




Budget 





BUDGET 


Personnel 


Project Director, Sandra Honda Adams; 
Summer 1992: 2 months X $3,000/mo 

Non-Persor.-.el 


Meridien Ada Compiler ft* use on 
personal computer (for use by Project 
Director on home computer) 


Duplicating Costs for Educator Packets 
100 Packets @ $5/Packet = 

Postage for Dissemination of Information 

Total Direct Costs : 

INDIRECT COSTS (@ 10% of TDC): 

TOTAL PROJECT COSTS: 


$ 6,000 

$ 333 

$ 500 

$ 300 

$ 7133 
$ 713 

$ 7846 


6 




CS050 Notes 










SACRED HEART 
UMVERSTTY 


Notes for CS050 

Introduction to Structured Programming 


Textbook: Ada Problem Solving and Program Design 

by Michael B. Feldman and Elliot B. Koffman 
Course Objective: To develop expertise in wiiting structured 

programs using ADA and software engineering 
concepts. 

(Students should read text covering material discussed in class . Specific chapters 
and sections will be given during each class.) 

Week 1 & Week 2 

• Introduce the students to Ada through a brief lecture about the history of 
Ada. Mention the software crisis and the need for software engineering. 

• Explain Handout #1 Example of an Ada Program violet.ada 

• Give a general explanation of the parts of a program (refer ot handout) 

• With and use Context Clause 

• Header 

• Declaration 

• Executable Body 

• Homework Assignment HI - First Program Assignment 

• Explain Instructions on Dec 5500 (refer to handout) 

• Logging on. Password Change 

• Unix , Vi Editor, Compilation, Linking, and Execution 

• Printing program and output 

• Review Ultrix Mail Facility (refer to handout) 

• Review of Class Procedures and Class Package (see handouts) 

Student projects are collected in a class procedure and housed in a package. 
Both are mailed electronically to each student for extraction and compilation. 
This first introduction to subprogram procedures and packages will be an 
easy one for students to understand. 

• Explain Software Engineering Concepts (Reuse, Abstraction, Information 
Hiding) as seen in the development of the class project. 

• Review Program Development 

• Problem Definition 

• Specification of Domain and I/O 

• Algorithm Development - (refer to handout) 


7 


5ISI PARK AVENUE. FAIRFIELD. CONNECTICUT OM32-IOOO (203) 171-WW FAX (203) M-H 0» 





(flowchart/pseudo code/top down design) 

• Flowchart Definition; Examples (refer to handout) 

• Coding, Testing, Documentation 

• Homework Assignment 81b (Flowcharting problems) 

Week 3 & 4 

• Handout 82 - Program development: 

• Declaration Section (see handout) 

• Data Types 

• Variables 

• Constants 

• subtypes 

• generic instantiation 

Puts, Gets, Putjine; Newjine I/O from Package Textjo 

• Ada Executable Statements (see handout) 

• Assignment 

• Numeric, Logical, and Relational Operators 

• Hierarchy of Operators 

• Control Statements (if, loop, while, for, case) 

• Review of flowcharting payroll problem example with and without loop 
Coding in Ada - (flowcharting problems)(3 sets in handout) 

• without loop 

• with while loop 

• with loop-end loop 

• Assignment 82 - Coding flowcharting Problems in Ada 

• Ada Examples from flowcharting problem set 

• Using proper documentation and code formatting 

• Importance of naming Identifiers properly 

• Importance of code structure readability 

Week 5 

• Handout #3 - String Variable and Constant declaration 

• Enumeration type declaration 

• Control structure - Case Statement 

• If, If-Elsif, Case 

• Homework Assignment 83 - Develop example programs using 

• all 3 control structures and enumeration data types 

• and reading 

• Exam I 

Week 6 

e Handout 84 - Logical Expressions 

• File Processing Subprogams from Textjo 

• open, create, close, get, put, end_of_file 

• Example on file processing 

• Homework Assignment 84 - Code 2 out of 3 Problems 


8 




Week 7 & 8 

e Handout #5 - Subprogram Development 

• Procedures 
e Functions 

e Parameter Passing Modes (in, out, in out) 
e For Statement - Single and nested for loops 
e Examples of Subprograms and For statements (Truth Table) 
e Homework Assignment 85 * Change Last Assignment 

to utilize Subprograms. Create single and nested for loops. 

Week 9 

• Exam II 

• Class participation on using files & developing subprograms 
e Exception Handling 

• Handout #6 - Examples of Exceptions 

• Homework Assignment 86 - Use exceptions 

Week 10 

• One and Multi-Dimensional Arrays 

• Array type declaration 

• Name notation. Positional Notation 

• Handout 81 - Examples of array declaration and use 

• Homework Assignment 87 - Write program using 1 D arrays 

Week 11 

• Separate Compilations - Procedure and Function 

• Multi-dimensional arrays 

• Handout #8 - Examples of Multi-dimensional arrays and 

separate Compilations 

• Homework Assignment 88 - Write program using 2-D arrays 
Final Exam 


9 


CS051 Notes 






SACRED HEART 
UNIVERSITY 


Notes for CS051 
Data Structures 

3 Credits 


Textbook: Data Structures with Abstract Data Types and Ada 

by Daniel F. Stubbs and Neil W. Webre 

Course Objective: To introduce the students to the basic classical data structures of 
computer science, emphasizing skills in design, analysis and 
software engineering, through the use of packages, generics, and 
private types. 


Week 1 & Week 2 Chapter 

• Introduction to data structures 2.1 

• Handout #1 - Sorting, Subprograms, Modular Design, Menus 

• Arrays 2.2 

• Dynamic and Unconstrained Arrays 2.3 

• Homework Assignment #7 (Arrays) 

Week 3 & 4 

• Records 2.2 

• Pointers (Dynamic Memory Allocation 2.4 

• Abstract Data Types (ADT) 1.6 

• Handout #2 - Examples of Stacks 

• Stack package (ADT) 1.4 

• Generic Stack Package 1.3 

• Homework Assignment #2 - Stacks 

• Exam I 

Week 5 & 6 

• Handout #3 - FIFO Queues 3.3 

• Program Examples of Queues 

• Scheduling Mo Requests on a Magnetic Disk 3.5 

• Queue package (ADT) 

• Generic Queue Package 


• Homework Assignment If3 - Parking Garage Problem 


10 


5151 PARK AVENUE. FAIRFIELD. CONNECTICUT 0MU-1080 MW)J7I7W» FAX MW> MS-MO* 



Week 7 & 8 

• Handout #4 - Program Examples of Linked Lists 


• Linked List Abstraction 4.3 

• Double Linked and Circular Lists 4.4 

• Ordered Lists 4.5 

• Rings 4.6 

• Linked Lists (ADT) 

• Generic Linked Lists (ADT) 


• Homework Assignment #4 - Linked List Problem 

• Exam II 

Week 9-11 

• Handout #5 - Examples of Trees 


e Elements and structure of trees 5.2 

• Binary Trees 5.3 

• Binary Tree Search 5.4 

• Introduction to Recursion 2.46 

• Tree Traversal and Display 5.6 


• Homework Assignment #5 - Tree Problem 
Final Exam 


11 


Appendices 




Appendix A 


Bibliography 




Bibliography of 
Text Books 


Bell/Morrey/Pugh, Software Engineering. A Programming Approach. 
Prentice Hall, 1992, NJ 

Booch, Software Engineering With Ada . Second Edition, Benjamin 
Cummings, 1986, CA 

Caverly/Goldstein, Introduction to Ada: A Top-Down Approach for 
Programmers. Brooks Cole, 1986, CA 

Cohen, Ada As a Second Language. McGraw Hill, 1986, NY 

Cooling/N. Cooling/J. Cooling, I ntroduction to Ada. Chapman & Hall, 

1993, London 

Dale/Weems/McCormick, Programming and Problem Solving with Ada , D. 
C. Heath and Company, 1994, MA 

Feldman/Koffman, Ada Problem Solving and Program Design , Addison- 
Wesley, 1992, MA 

Gehani, Ada: An Advanced Introduction, Second Edition, Prentice Hall, 
1989, NY ~ 

Ghezzi/Jazayeri/Mandrioli, Fundamentals of Software Engineering. 
Prentice Hall, 1991, NJ 

Gilpin, Ada A Guided Tour & Tutorial , Prentice Hall, 1986, NJ 

Hillam, Introduction to Abstract Data Types Using Ada , Prentice Hall, 

1994, NJ 

Nielsen, Object-Oriented Design with Ada . Bantam Books, 1992, NY 


Appendix A1 


Olsen/Whitehill, Ada for Programmers. Reston, 1983, VA 

Savitch/Petersen, Ada. An Introduction to the Art and Science of 
Programming. 1992, CA 

Shumate, Understanding Ada with Abstract Data Types . Wiley, 1989, NY 

Texei. Introductory Ada: Packages for Programming. Wadsworth, 1986, 
CA 

Vliet, Software Engineering Principles and Practice. Wiley, 1993, NY 

Volper/Katz, Introduction To Programming Using Ada . Prentice Hall, 
1990, NJ 

Watt/Wichmann/Findclay, Ada language and Methodology. Prentice Hall, 
1987, NJ 

Weiss, Data Structures and Algorithm _ Analysis _ in Ada . 

Benjamin/Cummings, 1993, CA 


Bibliography of Others 

Annual ASEET Symposium (4th), Tutorials . June, 1989 

Riehle, "Ada: A Software Engineering Tool", Programmer's Journal, Vol. 
6.5, p. 68-79, 1988 

Software Productivity Consortium, Inc, "Ada Quality and Style for 
Professional Progammers", SPC-91061-CMC Ver 02.01.01, Dec. 1992 

USAF, Technical Training Manual On Fundamentals of Ada Programming/ 
Sof twa re Engineering. June, 1989 

USAF, Technical Training Manual On Fundamentals of Ada Programming/ 
Software Engineering. December, 1987 


Appendix A2 



Appendix B 

Syllabus 





SACRED HEART 
UNIVERSITY 

Syllabus 

CS050 

Introduction to Structured Programming 

3 Credits 


Textbook: Ada Problem Solving and Program Design 

by Michael B. Feldman and Elliot B. Koffman 
Course Objective: To develop expertise in writing structured 

programs using ADA and software engineering 
concepts. 

(Students should read text covering material discussed in class . Specific chapters 
and sections will be given during each class.) 


Week 1 & 2 

History of Ada and Software Engineering 
Example of an Ada Program 

Parts of a Program (General explanation as related to handout) 

• With Context Clause 

• Header 

• Declaration 

• Executable Body 
-Instructions for the Dec 5500 

• Logging on, Password Change 

• Ultrix, Vi Editor, Compilation, Linking, and Execution 

• Printing program and output 
Homework Assignment it 1 

Review of Class Procedure and Class Package 

Software Engineering Concepts - Reuse, Abstraction, Information Hiding 
Problem Development 

• Problem Definition 

• Specification of Domain and I/O 

• Algorithm Development 

(flowchart/pseudo code/top down design) 

• Flowchart Definition ; Examples 

• Coding, Testing, Documentation 
Homework Assignment it 1b (Flowcharting problems) 


$151 PAM AVENUE. FAIRFIELD. CONNECTICUT 0MM-W(9 (20D17I-W* FAX (MJt *$• 7W* 




Week 3 & 4 


Ultrix Mail Facility 
Program Development 
Procedure sub program and packages 
Declaration Types 

• Data Types 

• Variables 

• Constants 

• subtypes 

Ada Executable Statements 

• Assignment 

• Numeric, Logical, and Relational Operators 

• Hierarchy of Operators 

• Control Statements (if, loop, while, for, easel 
I/O from Package Textjo 

• Puts, Gets, Putjine; Newjine 
Review of flowcharting problem assignments 
Coding in Ada - (flowcharting problems 3 sets) 

• Using proper documentation and code formatting 

• Importance of naming identifiers 

• Importance of code structure readability 
Examples of Ada problems - 3 sets 

• Wthout loop 

• With while loop 

• With loop end-loop 

Assignment #2 - Code Flowcharting Problems in Ada 

• Using proper documentation and code formatting 

• Importance of naming identifiers 

• Importance of code structure readability 


Week 5 

• String Variable and constant declaration 

• Enumeration type declaration 

Homework Assignment #3 - Develop example programs using 
all 3 control structures and enumeration data types 
ana reading 

Exam I 

Week 6 

• Logical Expressions 

• File Processing Subprogams from Textjo 

(open, create, close, get, put, end_of_file) 

• Examples of File processing 

Homework Assignment #4 - Code 2 out of 3 Problems 




Week 7 & 8 


Week 9 


Week 10 & 


Week 12 


Final Exam 


Subprogram Development 

• Procedures 

• Functions 

• Parameter Passing Modes (in, out, in out) 

For Statement - Single and nested loops 

Examples of Subprograms and For statementsfTruth Table) 
Homework Assignment 85 - Change Last Assignment 

to utilize Subprograms. Also write program(2) using files, 
subprograms, enumeration types and for and case statements. 


Exam II 

Class participation on using files & developing subprograms 
Exceptions 

Homework Assignment 86 - Use exceptions 
11 

1 Dimensional Arrays 

Homework Assignment 87 - Write program using 1 D arrays 


Multi-dimensional arrays 
Separate Compilations 

Homework Assignment 88 - Write program using 2-D arrays 









SACREDHEART 

UNIVERSITY 


Syllabus 

CS051 

Data Structures 

3 Credits 


Textbook: Data Structures with Abstract Data Types and Ada 

by Daniel F. Stubbs and Neil W. Webre 

Course Objective: To introduce the students to the basic classical data structures of 
computer science, emphasizing skills in design, analysis and 
software engineering, through the use of packages, generics, and 
private types. 


Week 1 & Week 2 Chapter 

• Introduction to data structures 2.1 

• Handout #1 - Sorting, Subprograms, Modular Design, Menus 

• Arrays 2.2 

• Dynamic and Unconstrained Arrays 2.3 

• Homework Assignment If 1 (Arrays) 

Week 3 & 4 

• Records 2.2 

• Pointers (Dynamic Memory Allocation 2.4 

• Abstract Data Types (ADT) 1.6 

• Handout #2 - Examples of Stacks 

• Stack package (ADT) 1.4 

• Generic Stack Package 1 -3 

• Homework Assignment #2 - Stacks 

• Exam I 

Week 5 & 6 

• Handout #3 - FIFO Queues 3.3 

• Program Examples of Queues 

• Scheduling i/o Requests on a Magnetic Disk 3.5 

• Queue package (ADT) 

• Generic Queue Package 


• Homework Assignment ff3 - Parking Garage Problem 


5!5I PARK AVENUE. FAIRFIELD. CONNECTICUT OMJMOOO (203117I-7W* FAX (201136S-7M9 








Week 7 & 8 

• Handout 44 - Program Examples of Linked Lists 


• Linked List Abstraction 4.3 

• Double Linked and Circular Lists 4.4 

• Ordered Lists 4.5 

• Rings 4.6 

• Linked Lists (ADT) 

• Generic Linked Lists (ADT) 


• Homework Assignment #4 - Linked List Problem 

• Exam II 

Week 9-11 

• Handout 45 - Examples of Trees 


• Elements and structure of trees 5.2 

• Binary Trees 5.3 

• Binary Tree Search 5.4 

• Introduction to Recursion 2.46 

• Tree Traversal and Display 5.6 


• Homework Assignment It5 - Tree Problem 


Final Exam 





Appendix C 


CS050 

Handouts 








SACRED HEART 
UM\ERSTTY 


Syllabus 

CS050 

Introduction to Structured Programming 

3 Credits 


Textbook: Ada Problem Solving and Program Design 

by Michael B. Feldman and Elliot B. Koffman 
Course Objective: To develop expertise in writing structured 

programs using ADA and software engineering 
concepts. 

(Students should read text covering material discussed in class . Specific chapters 
and sections will be given during each class.) 

Week 1 & 2 

History of Ada and Software Engineering 
Example of an Ada Program 

Parts of a Program (General explanation as related to handout) 

• Context Clause 

• Header 

• Declaration 

• Executable Body 
Instructions for the Dec 5500 

— • Logging on. Password Change 

• Ultrix, Vi Editor, Compilation, Linking, and Execution 

• Printing program and output 

• Ultrix Mail Facility 
Homework Assignment it 1 

Review of Class Procedure and Class Package 

Software Engineering Concepts - Reuse, Abstraction, Information Hiding 
Problem Development 

• Problem Definition 

• Specification of Domain and I/O 

• Algorithm Development 

(flowchart/pseudo code/top down design) 

• Flowchart Definition ; Examples 

• Coding, Testing, Documentation 
Homework Assignment it 1b (Flowcharting problems) 


SISI PARK AVENUt, FAIRFIELD, CONNECTICUT MUM000 UW> HI-*** FAX «M» MS-7W 





Week 3 & 4 


Program Development 
Assignment M2 - Declaration Types 

• Data Types 
e Variables 

• Constants 

• subtypes 

Ada Executable Statements 

• Assignment 

• Numeric, Logical, and Relational Operators 

• Hierarchy of Operators 

• Control Statements {if, loop, while, for, case) 

I/O from Package Text Jo 

• Puts, Gets, Putjine; Newjine 
Review of flowcharting problem assignments 
Coding in Ada - (flowcharting problems 3 sets) 

• Using proper documentation and code formatting 

• Importance of naming identifiers 

• Importance of code structure readability 
Examples of Ada problems - 3' sets 

• Wthout loop 

• With while loop 

• With loop end-loop 

Code Flowcharting Problems in Ada 

• Using proper documentation and code formatting 

• Importance of naming identifiers 

• Importance of code structure readability 


Week 5 

• String Variable and constant declaration 
-• Enumeration type declaration 

Homework Assignment M3 - Develop example programs using 
all 3 control structures and enumeration data types 
and reading 
Exam I 


Week 6 

• Logical Expressions 

• File Processing Subprogams from Text Jo 

(open, create, close, get, put, end_of_file) 

• Examples of File processing 

Homework Assignment M4 - Code 2 out of 3 Problems 



Week 7 & 8 

e Subprogram Development 

• Procedures 

• Functions 

• Parameter Passing Modes {in, out, in out) 
e For Statement • Single and nested for loops 

e Handout #5 - Examples of Subprograms and For statements (Truth Table) 
e Homework Assignment 85 - Change Last Assignment 

to utilize Subprograms. Create single and nested for loops. 

Week 9 

e Exam II 

• Class participation on using files & developing subprograms 

• Exception Handling 

e Handout 86 - Examples of Exceptions 
e Homework Assignment 86 - Use exceptions 

Week 10 

e One and Multi-Dimensional Arrays 

• Array type declaration 

• Name notation. Positional Notation 

• Handout 81 - Examples of array declaration and use 

• Homework Assignment 87 - Write program using 1 D arrays 

Week 11 

• Separate Compilations - Procedure and Function 

• Multi-dimensional arrays 

e Handout #8 • Examples of Multi-dimensional arrays and 
separate Compilations 

e Homework Assignment 88 - Write program using 2-D arrays 


Final Exam — 






Handout #1 


Example of an Ada Program called violet.ada : 


— Source File Name: violet.ada 

— This Ada procedure will simply output a picture 

— As directed by the putjine procedure 

-- Programmed by S. Honda on January 15, 1994 


with text io; use textjo; 
procedure violet is 
-- no declarations 
begin - violet 
newjine; 
for i in 1 ..2 loop 


put line(" 

{>«<} • 

"); 

put line(" 

«{{{»}}}} 

"); 

putJineC' 

((({{mm}}}} 


putJineC 

{{{ O 0 }}} 


putJineC 

{{{ ‘ }}} 


putJineC' 

{{ = }} 


put line(" 


"); 


end loop; 
end violet; 


To Compile, Link and run Program ; 


1 . 

ada 

violet.ada 


— compile source file 



Source file name 


2. 

aid _ 

violet -o 

violet.exe 

-- link & create 



procedure name 

executable file name 

executable file 


3. 


— run 





Parts of an Ada Program 


context clause 

• with Makes available Packages 

• use Makes resources visabfe and directly usable 
header - Identifies Procedure 

declaration 

• enumeration types 

• array types 

• subtypes 

• variables 

• constants 

• subprograms (procedures and functions) 

• generic instantiation of Package Text io 
executable body 

• executable Ada instructions 

• subprogram calls 


context clause with textjo', use text Jo ; 

header - procedure ProcNama is 

executable Ada Instruction 

for i in 1 ..2 loop 
_ statementfsl 

end loop; 

subprogram calls 

put_line(" Hi There"); 
put("The "); 
putJinerEnd"); 
new line(2); 






VI editor 


THE VI EDITOR IS A SCREEN EDITOR. IT IS AVAILABLE IN NEAR 
IDENTICAL FORM ON NEARLY EVERY UNIX SYSTEM. 


COMPONENTS OP EDITING: 

1. to insert text (insert mode) 

2. to delete text (commend mode) 

3. to change letters or vords ( . command mode) 


VI COMMANDS ARE 

1. CASE SENSITIVE 

2. NOT ECHOED TO THE SCREEN 

3. DO NOT REQUIRE A [RETURN] AFTER THE COMMAND 


TO INVOKE THE VI EDITOR PROM THE UNIX OPERATING SYSTEM, TYPE THE 
FOLLOWING: 


vi program. ad^{ RETURN] 

filenaiAA. titans ion WHERE filename CAN BE ANY 

ASCII CHARACTER EXCEPT / 
WHICH IS RESERVED AS A 
SEPARATOR BETWEEN FILES 
AND SUB-DIRECTORY PATHS. 


UPON ENTERING THE EDITOR, YOU WILL BE IN COMMAND MODE. THERE ARE 
THREE MODES: 


1. LINE COMMAND MODE 

allovs saving and exiting of files, allows for 
pattern replacement, etc. 

2. COMMAND MODE 

allovs movement in a file, allovs one to perform 
edits, and to enter insert mode. 

(Keyboard leys have nev meaning) 

3. INSERT MODE 

used for inserting or appending text to your file. 
(Keyboard is used like a typewriter) 



X. CQM4AMD MODS 


A. CURSOR MOVEMENT COMCANDSl 

h aovas 1 spae* to loft of cursor position 
j aovss down s lino 

k aovss up s lins 

1 mv«s 1 spscs to ths right of cursor position 

Ths ^ T —* cursor aovsasnt ksys will do ths 
sbovs slso. Rovsvsr thsy srs out of ths way. 


H aovss cursor to ths top of scrssn 

M aovss cursor to ths aiddls of scrssn 

L aovss cursor to ths list lins of scrssn 


Ctrl f aovss forward by scrssn 
Ctrl b aovss backward by scrssn 
Ctrl d aovss forward 1/2 scrssn 
Ctrl u aovss backward 1/2 scrssn 

w aovss cursor forward by word 

W aovss forward by word (ignoring punctuation) 
b aovss backward by word 

B aovss backward by word (ignoring punctuation) 


s aovss cursor to snd of word 
E aovss to snd of word (ignoring punct) 

( aovss to bsginning of prsvious ssntsncs 

) aovss to bsginning of nsst ssntsncs 

( aovss to bsginning of prsvious paragraph 

} aovss to bsginning of nsxt paragraph 


SIX BASIC EDIT CGM4AND8 

i inssrt aods 

a appsnd aods 

e changa word*lins 

d dslsts vord(s) lins(s) 

y yank lins(s) 


1 . 

2 . 

3 . 

♦. 

S. 






EDIT COMMANDS IN COMMAND MODE 


OBJECT 

Change 

Delete 

Copy 

1 word 

cw 

dv 

yv 

2 words,ignoring 

2CM or 

2dW or 

2yM or 

punctuation 

c2W 

d2W 

y2W 

3 words back 

3cb or 

3db or 

3yb or 


c3b 

d3b 

y3b 

1 line 

cc 

dd 

yy or Y 

to end of line 

c$ or C 

d$ or D 

y* 

to beginning of line 

c a 

d 9 

y0 

single character 

V 

X 

yi 


OTHER COMMANDS IN COMMAND MODE 

place text from buffer p or P (stay in COMMAMD 

* MODE) 


insart mods 
append node 

append at end of current line 
insert at beginning of line 
open up line below cursor 
open up line above cursor 



INSERT MODE 


COMMANDS IN LINE COMMAND MODE* 


writes (saves) the buffer to the 
file but does not exit. 

quits the file (and returns to 
UNIX proopt. 

Both writes and quits the tile 
quits the file (eaphatic) 
writes the file (eaphatic) 


(note that the * gets you to 
line coaoutnd node fron command 
soda) 

:w 

*q 

iwq 

*q! 

sw! 




Unix Commands 


1 . 

is -1 

list directory of current path 

2. 

CP 

filel file2 

copies filel to file2 

3. 

rm 

remove file 

4. 

cd / 

change directory to root directory 


cd.. 

change to subdirectory one level 
above 

5. 

Ipr -Pp 

filel file2 

f ifvaxl 
v.4vax2 
(.si 07 

prints out files 

6. 

vi 

invokes the vi editor 

7. 

more 

types file to screen 

8. 

Ctrl c 

breaks out of a loop 

9. 

Ctrl d 

logoff terminal 

10. 

passwd 

to issue password 

11. 

cal 

gives you the calander for 


cal 

year 

gives you the calander for the year 

12. 

> 

redirects output (used to capture 
output) 

13. 

cat > 

filel file2 file3 

_ concatenate files 1 and 2 to file3 

14. 

to compile link and run ada programs: 


ada -Source file name 

compiles ada source file 


aid Main procedure name 

links object code 


a.out 

runs executable code 







Printing Source Program and Program Output 


BEGIN LOG FILE. 

shu.sacredheart.edu > script filename.lis 


TYPE PROGRAM TO SCREEN 

csh > cat filename, adji 


RUN PROGRAM 

csh> filename.exe 


REPEAT STEPS 2 & 3 IF REQUIRED 


END LOG FILE 


csh> [CTRL-d] 


PRINT LOG FILE 


shu.sacredheart.edu > Ipr -Pvaxl 


.file name .,lis 







TO RECIEVE MAIL 


1. AT THE SYSTEM PROMPT TYPE THE FOLLOWING: 

SHU> mail [RETURN] — puts you into mail facility 

2. YOU WILL SEE A NEW PROMPT "4" AND A LIST OF MAIL FROM 
OTHER USERS. TYPE THE FOLLOWING: 

* 1 [RETURN] — types 1st message to you 

& s main.ada [RETURN] -- extracts message to file 

main.ada 

* x [RETURN] — leaves mail facility 

TO SEND MAIL 

1. AT SYSTEM PROMPT TYPE : 

SHU> mail llaOl [RETURN] 

2. TYPE A ONE WORD SUBJECT IF YOU LIKE, OR JUST A RETURN 
Subject: Party [RETURN] 

3. NOW TYPE YOUR MESSAGE; AS MANY LINES YOU LIKE 

4. TYPE Ctrl-D WHEN DONE. 

5. CC MEANS COPY TO OTHER USERS IF YOU LIKE, OR JUST RETURN 
CC: [RETURN] 

WHILE IN THE MAIL FACILITY, YOU MAY WANT TO USE THE FOLLOWING 
COMMANDS: 

& h - lists the mailgrams 

4 d - deletes the mailgram you have currently selected 

42 — - selects mailgram number 2 and types it to you 

4 s filename - extracts mailgram to a file called filename 

4 x - leaves mail facility, not saving changes 

(deleted mailgrams will not be deleted) 

4 q - leaves mail facility, saving chages 

(deleted mailgrams will be deleted!) 

4 Ctrl-c Ctrl-c abandons mailgram- does not send it! 






FILE : ART.ADA 

This package contains a list of available student procedures. 
Note that the iapleaentation of the procedures are not found 
here. They are in the package body. 

Fall 1993 S. Honda 


package art is 

procedure desk; 
procedure tree; 
procedure hi; 
procedure house; 
procedure boat; 
procedure house2; 
procedure tracks; 
procedure dog; 
procedure rocket; 


end art; 




FILE : ARTBODY.ADA 

This packaga body contains studant programs from CS050A 
Nots that tha implamantation of tha procaduras ara found hara. 
Fall 1993 S. Honda 


with taxt_io; usa taxt_io; 
packaga body art is 


•Fila:dask.ada* 


—Program by: D A R S H A N 

-09/16/93 

procadura dask is 
bagin—dask 

put_lina(" 
put~lina(" 
put~lina(" 
put”lina(" 
put~lina(* 
put~l ina (* / 

put~lina(" 
put~lina(" 
put~lina(" 
put~lina(" 
put_lina(“ 
put~lina(" 
put_lina(“ 
put~lin*(" V 

and dask; ~ 


TOOLSIDAS 


I_o 


I _O- 


_ ■) 

/ ■) 

/ ") 

/ "> 

/ / ■) 

/ / ") 

- / ") 

/ ■) 

/ ") 

V ") 

I "> 


fila : traa.ada 

This program craatas a traa-pola 

It usas a packaga callad taxt_io that allows for I/O 
Programmad by Pom Sirichantho 


procadura traa is 
bagin — traa 

put_lina(" 
put~lina(" 
put”lina(" 
put~lina(■ 
put”lina(" 
put“lina(■ 
put~lina(" 
put~lina(" 
put”lina(" 
put~lina(" 
put~lina(■ 
put~lina(" 
put”lina{" 
put”lina(" 


***** 

((•*•**)) 

((*****•**•)) 
(((*«***(*)**•••))) 

(((*••*(***)****))) 

((((.**(*)***)))) 

(((***()***•))) 

(***\|/***) 


put_lina(" * 

put_linaT" wacoma to CS0501"); 
and traa; 


** * 





















file: Hi.ada 

This prograa craatas a Hi 

It usaas a packaga callad taxt_io that allows for I/O 
Prograasad by Oanial DaSilva 


procadura hi is 
bagin — hi 


nav lina; 



put_lina(* 

* * 

* •); 

put_lina(" 

* * 


put_lina(" 

* * 

* ■); 

put lina(" 


* ■); 

Put_lina(" 

* * 

* ■), 

Put_lina(" 

a * 

* *); 

Put lina(” 

* * 

* "); 

Put lina(" 

•); 


Put lina(" 

Walcoaa to 

CS05");nav 


and hi; 


fila : housa.ada by Don Osvay 


procadura housa is 
bagin — housa 

put_lina( 
put_lina( 
put~lina( 
put~lina( 
put_lina( 
put_lina( 
put~lina( 
put~lina( 
put_lina( 
put“lina( 
put~lina( 
put_lina( 
put~lina( 
naw_lina; 
and housa; ” 


////////////////////// 
/V \ 

/ \ \ 
/ \ 


\ 


/ _ \ _ \ 


n 

n ft 

+♦++ 

+++++ ♦++++ 


") 

") 

") 

") 

") 

•) 

") 

") 

") 

") 

") 

") 

") 


— fila : boat.ada 

— Joa Paddla 


procadura boat is 
bagin — boat 
put_lina(" 
put”lina(" 
put“lina(" 
put~lina(" 
put”lina(" 
put~lina(" 
put_lina(" 
put_lina(" 
put_lina(" 
put~lina(" 
put”lina(" 
and boat7 


\ 

\ 

\ 

\ 

\ 


I! 


\\ // 




















file : hous«2.ada 


procedure house2 is 
begin — house2 

put_line(" 
put”line(" 
put”lin«(*' 
put”lin#(" 
put“lina(" 
put”line(" 
put~lin«("• 
put~lin#(" 
put~lin#(" 
put~line(" 
put~lin#(" 
put~lin#(" 
put~lin«(" 
•nd house2 



— file : planet.ada 

— This program creates railroad trac)cs 

— It uses a package called text.io that allows for I/O 

— Programmed by: Chauncey Wilson 


procedure tracks is 
begin — tracks 

put_line( 
put~line( 
put_line( 
put^line( 
put~line( 
put~line( 
put_line( 
put~line( 
put~line( 
put~line( 
put~line( 
put~line( 
put_line( 

_ put~line( 

put~line( 
put_line( 
put~line( 
put_line( 
put_line( 
put~line( 
put~line( 
put~line( 

end tracks; ~ 





— This program draws a dog. 

— Programmer: Jason Blais 

— Date: Sept. 17, 1993 

procedure dog is 

begin --Start drawing 

put_line(" ************ "); 















put_lina(“ * * * «); 

put”lina(" * * 0 * »)f 

PUt_lin«(* * * ****** ■); 

put_lina(* * * ** ■); 

put_lina(* * * VVV ")f 

put lina(" ****** •); 

put - lina(" * AAA “) > 

put_lin•(" * ******* ■) ; 

put_lina(" * ******* »); 

put_lina(" * * *); 

pUt_lin«(" mm mm rnmmm mw n mmm ■); 

put~lina(" I 1 | ! | "); 

pUt_lin«(" mmmmmmmmmmmmm »); 

put - lina(" "); 

putjin«C WOOP, WOOP l 1 ■); 

and dog; 


— fila: rockat.ada 

— This progran crsatas a rockat 

— it usss a packaga callad tsxt_io that allows for I/O 

— Prograossd by c. Marabls 


procsdurs rockat is 
bagin — rockat 

put_linaC /*\ 

put”lina(" //-\\ 

put_lina(" /-> 

put~lina(" 

put~lina(* 

put~lina(" / 

put”lina(* / 

put~lina(" / 

put~lina(" / 

put_lina(" /_ 

put~lina(" 

put_lina(" ~ Walcosa to CS050!”); 
and rockat; - 


") 

") 

") 

") 

") 

") 

") 

") 

") 

") 

") 


and art; 













PILE : MAIN2.ADA 

This program usss tha art package. 
stataent. 

Fall 1993 S. Honda 


It also uses tha case 


with text_io,art; usa text_io,art; 
procedure aain2 is 

— declaration of variables 
again, answer : character; 
begin — sain2 
loop 

put_line(" Menu Choices"); 

pUt_l inS ( " 

put_line(" (A) DESK (F) H0USE2") 

put_line(" (B) TREE (G) TRACKS") 

put_line(" (C) HI (H) DOG ") 

put_line(" (D) HOUSE (I) ROCKET") 

put_line(" (E) BOAT (Q) QUIT ") 

put line("What would you like to see ") 
put(" Type A,B,C,D,E,F,G,H,I OR Q «—> 
get(answer);new_line; 


new_line? 

"); 


end case; 
new_line; 
end loop; 

. put_line(" 
end main2; 


case answer is 
when 'A* 

•a* 

■> 

desk; 

when 

•B* 

•b' 

■> 

tree; 

when 

•c 

•c' 

■> 

hi; 

when 

•D' 

•d' 

■> 

house; 

when 

•E* 

•e' 

■> 

boat; 

when 

•F* 

•f' 

■> 

house2 

when 

• G* 


■> 

tracks 

when 

■H' 

•h' 

■> 

dog; 

when 

•I' 

•i' 

»> 

rocket 

when 

'Q' 


■> 

exit; 

when 

others -> 

put_line( 


— this will exit loop 
81111 wrong input 111"); 


That's all folks!");new_line; 


EXECUTION RUN OF MAIN2.ADA 


Menu Choices 

(A) DESK 

(F) 

H0USE2 

(B) TREE 

(6) 

TRACKS 

(C) HI 

(H) 

DOG 

(D) HOUSE 

(I) 

ROCKET 

(E) BOAT 

(Q) 

QUIT 

What would you 

like 

to see 

Type A,B,C,D,E 

,f,g, 

66* 

H,I OR Q 

* * 

* 


* * 

o * 


* * 



* * 


** 

* * 


vvv 

* 


/vv\ 











WOOF, WOOF!! 



Menu 

Choices 


(A) 

DESK 

<r> 

HOUSE2 

(B) 

TREE 

<G) 

TRACKS 

(C) 

HI 

(H) 

DOG 

<D) 

HOUSE 

(I) 

ROCKET 

(E) 

BOAT 

(Q> 

QUIT 


What would you like to 
Type A,B,C,D,E,F,G,H,I OR Q 
/‘\ 

//-w 
/-\ 


\ 

\ 

\ 

\ 

_ \ 



Welcome to CS050! 


Menu Choices 


(A) 

DESK 

(F) 

HOUSE2 

(B) 

TREE 

<G) 

TRACKS 

(C) 

HI 

(H) 

DOG 

(D) 

HOUSE 

(I) 

ROCKET 

(E) 

BOAT 

IQ) 

QUIT 


What would you like to see 
Type A, B, C, D, E, F, G, H, I OR Q p 

##111 wrong input 111 



Menu 

Choices 


(A) 

DESK 

(F) 

HOUSE2 

(B) 

TREE 

(G) 

TRACKS 

(C) 

HI 

(H) 

DOG 

(D) 

HOUSE 

(I) 

ROCKET 

(E) 

BOAT 

(Q) 

QUIT 


What would you like to see 
Type A,B,C,D,E,F,G,H,I OR Q 
That's all folksl 











Flowcharting Symbols 


1. Start/End 



2. I/O 


Input PartNo, Qty 


3. Processing 



- :L _ 

Cost = Price * Qty 

- 

_4c_ 

I Sum = Sum + Cost 

r . 

4. Decision Making 





5. Connection 


<? 




Logic Patterns 


Simple Sequence 


Input A, B 


calc C = A*B 


.output C 


Decision Logic Pattern 


T F 

—< A>B >- 


Input C 



Hr > 40. 


! OvTHr-Hr-40.0| |OvTHr = 0.0 


Repetition Logic Pattern 



I Cost = Qty* Rate 
\output Cost \ 


Input ID, Qty, Rate \ 

^ - I -—-* 

___ 

FCost = Qty* Rate! 

t~; —— 

\Output Cost '\ 

\lnput AgairN 
T 









Flow charting Problems 


Input two integer numbers, A and B. If the first is greater than the second, print 
"Larger - , otherwise print 'Not Larger - . 

Input an ID Number, Rate of Pay, Hours Worked, and the Tax Rate. Calculate 
Gross Pay, Taxes owed, and the Net Pay. (Remember to pay Time and a Half for 
Over-Time Pay). Print out the Gross Pay, Taxes Owed, and the Net Pay. 

You need an air conditioner. You need one between 5000 and 6000 BTU’s. You 
want to find one with the highest Energy Efficiency Ratio (EER) because it will be 
the most economical to operate. 


Number of BTU's 

EER - _ 

Number of Watts 


You are considering three air conditioners: 


MODEL 

BTU 

WATTS 

A 

5000 

820 

B 

6000 

910 

C 

5500 

850 


Which one should you buy? Print out the EER values of all three Units and a 
message indicating the most efficient unit to operate, Model A, B, or C. 

Input an ID Number, 3 Test Grades and a Final Exam. Each test is worth 20% 
and the Final Exam 40%. Calculate the Final Score. Print also the ID Number. 

Suppose there are more students in the class (Referring to problem 4). I would 
like to process alt the students in one execution run. Revise the flowchart such 
that many students could be processed. If the ID is equal to an END OF DATA 
TAG such as -999, there are no other students to process. -999 Marks the end 
of the data list. Modify the flowchart for Problem 4. 

Do the same for problem 1 and 2 such that several sets of data can be processed. 

Each salesperson earns a base salary of $185.00. Moveover, if a salesperson’s 
total weekly sales exceeds $1000, a commission of 5.3% is earned on any amount 
up to $5000 and 7.8% is earned on any amount in excess of $5000. Determine 
the weekly Pay, for any Salesperson whose total weekly sales amount is input. 
Print out the Saleman’s ID and his weekly sales and pay. Use an EOD TAG to 





terminate the Program. 

8. Input two Numbers X and Y. If the sum of X + Y is greater than 42, print out "42". 
if not, increase X by 10 and Y by 3. Print out the next X and Y values and check 
to see if the sum is greater than 42. Continue until the sum is greater than 42, at 
which time you need to. output "42". 

9. Input a list of numbers one at a time. The last value, not part of this list is 999. 
This marks the end of the data list (EOD). Print the smallest and the largest 
values of the list excluding the last value 999 which is not part of the list. 

10. Input a list of Numbers whose EOD is 999. Print out the Largest and also a count 
of how many numbers are included in the list. 

11. Several pairs (X,Y) of Numbers are to be input. Any pair with the first value equal 
to the second value serves as the End of Data (EOD). Determine and print out 
counts 'M how many pairs satisfy X<Y and how many pairs satisfy X>Y. 

12. Follow the following algorithm: 

a. Input a value for N. 

b. If N is less than or equal to zero, goto step (a.) 

c. If N is greater than 100, output "Value is too Large" and goto 

step (g.) </ 

d. If N is greater than 90 calculate the SUM * 50+49 >48 i<u+...+N and 
goto step (f.) 

e. Calculate the SUM » 1 +2+3+4+...+N 

f. Output the value of SUM. 

g. Print out the message "Goodbye" and stop. 




CS050 

Handout Set #2 








Handout #2 


Predefined Types and Subtypes found in package STANDARD: 

INTEGER 

POSITIVE 

NATURAL 

FLOAT 

DURATION 

CHARACTER 

STRING 

BOOLEAN 

(Note: Numeric values are implementation dependent) 

Ada Data types 

I. Scalar Data Types 

A. Discrete Types 


1. Integer 

a. 

INTEGER 

b. 

user defined 

2. Enumeration Types 

a. 

CHARACTER 

b. 

BOOLEAN 

c. 

user defined 


B. Real types 

1. Floating point 

a. FLOAT 

b. user defined 

2. Fixed Point Types user defined 

II. Composite Types 

A. Array 

B. Record 

Hi. Access Types 

IV. Task Types 

V. Private Types 

A. Limited Private 

B. Private 


Examples of Declaration Statements: 


1. Examples of Variable Declarations: (Variables may be assign values in the program) 

Hours : integer; 

Rate, TaxRate, Taxes : float; 

Middlelnitial, Again : character; 

Answer : boolean; 

Weight, Age : positive; 


2. Examples of Constant Declarations: ( Constants do not change in the program) 

Pi : constant float := 3.14; 

BasePay : constant float := 185.00; 

Greetings := constant string := "Sacred Heart University"; 

3. Instantiation of generic packages to allow for I/O (input/output): 


package iio is new integer io (intcger) ; use iio; (allows for integer HO) 

package fltio is new float _io(flQgt); use fltio; (allows for HO of decimal values) 

package Answer io is new enumeration io ( boolean ) : use Answerjo; 

(Allows for HO of boolean values) 


Ada Executable Statements 

1. Assignment Statements - Assigns a value to a variable. The value on the right is 
assigned to the variable on the left of := 

Syntax : _ :=_ 

variable value, expression, or variable 

Examples: Rate := 12.43; 

Hours := 40.0; 

Gross := Rate * Hours; 

Again := *V; 

Procedure Calls - Procedures are invoked or called by using the procedure name. 

Examples: put("Hours Worked "); Put(Hours); 

new line; put_line("Wonderful Days!"); 


2 . 









The procedures put, new line, and putjine are invoked to output values 


Examples: put("Enter The Hours Worked —> "); 

get(Hours); 
newjine; 

The procedures put, get, newjine are invoked by using their names. 

3. If Statements - Allows the computer to make decisions and take one of several paths. 

if_then 


4. 


5. 


statement(s) 

else 


(optional clause) 


statement(s) 

end if; 

While loop - Allows for repetition; The test to end the loop is at the top of the loop 
(for pre-test loops) 

syntax: while_loop 


statement s) 

end loop; 

Loop*Endloop - Allows for repetition; The test to end the loop is at the bottom, 
(for post test loops) 

syntax: loop 


statement(s) 
exit when_ 


end loop; 


conditions) 








Program I/O (Input/Output) 


Generic Instantiation of data types other than character or strings. 
Package Text Jo allows for I/O of these DataTypes by providing 
some generic packages. Generic Packages are not directly usable. 
They must be instantiated with a particular data type before use. 
Instantiation creates a new package from the generic package which 
is like template. These new packages now contain the PUT and 
GET procedures that allow for I/O. 

Generic Packages you may be using: 

Float io 
Integer io 
Enumeration io 
Fixed io 

Syntax: type IQTvpeName is new qenericoackaaef datatype): 

examples: 

type Int io is new integer Jo (integer): - get,put integers 
type Fltjo is new fioatjo (float); - get,put floats 

subtype AgeType is integer range 1..104; 
use Intjo, Fltjo; 

_ Id : integer; 

Age : AgeType; 

Amt : float : = 1.03e2; 


get(ld); 

get(Age); -Package Intjo allows I/O of integer subtypes 
put(Amt); 

or, 

if the only variable requiring I/O is Age, 

type Intjo is new integer Jo (AgeType); 

... get(Age); put(Age); 





Ada Language Character Set used to build ADA words or lexical units 


95 ASCII graphics character set 
Bask Set: 

26 upper case letters (A,B,C...Z) 

10 digits (1,2,3,4,5,6,7,8,9,0) 

19 special characters "#&’()* + ,- ./ :;< = >_| 
and the space character 

Also included in the Basic set are the following characters: 

26 lower characters (a,b,c...z) 

additional special characters !$%?@[\] A ‘{} - 


Ada Lexical Units 

are identifiers (including reserve words), numeric literals, character literals, 
string literals, delimiters and comments. A lexical unit must fit on one line. 
Embedded spaces are not permitted except in strings or comments. 

Identifiers are names that are defined byt the progrrammer for such entities 
such as procedures, packages, tasks, variables, labels, functions, constants, 
etc. First characters of an identifies’ must be a letter followed by any number 
of letters or digits or an embedded underscore. 

Reserved words are considered identifiers. 

Numeric literals are Integer or Real literals 
example of integer literals: 

15 -23 123_423 1E3 42E2 

-examples of real literals: 

15.0 -22.34 3.115.92 12.2E+4 41.35E-7 

Other numeric literals in other bases: 

2#101 111 8157# 16#2F - Integer, decimal value 47 

16#E#E1 2#1110_0000# - Integer, decimal value 224 

(base) INumber Mantissa#optional power 

examples of character literals 


examples of string literals 
'Hello There* 





DELIMITERS 

< * > | 

or these special compound symbols: 

*> .. •* :* > = <s << >> 


COMMENTS start with two hyphens and extent to the end of the line. 

Ada Operators 


Operators 

Operation 

•* 

Exponentiation 

abs 

absolute value 

not 

logical negation 

rem 

remainder 

mod 

modulo 

/ 

division 

* 

multiplication 

+ 

unary sign 

• 

negation 

& 

binary catenation 

- 

subtraction 

+ 

relational operators 

> ■ _ 

< — 

> 

< « 

/- 

addition 

logical xor 

exclusive or 

or 

inclusive or 

and 

conjunction 




— Fils : payroll.ada 

— This procedure doss payroll for one user 

— Programmed by S. Honda February 8, 1994 


with text_io; use text io; 
procedure~payroll is ~ 

— variable declaration 

gross,net,hours,rate,txrate,taxes,otp,regp : float; 
id : positive; 

— generic instantiation for I/O 
package iio is new integer_io(integer); 
package fltio is new float io(float); 
use iio,fltio; 

begin — payroll 

put( N Enter id «»> "); get(id);new_line; 

put("Enter hours worked in decimal format xx.x ■»> "); 

get(hours);new_line; 

put("Enter rate per hour ■■> $"); get(rate); new_line; 
put("Enter taxrate in decimal format x.xx **> "); 
get(txrate);new_line; 

— calculate overtime and regular pay 
if hours > 40.0 then 
regp :■ 40.0 * rate; 
otp :» (hours - 40.0) * rate * 1.5; 


■> "); 


regp :■ 40.0 * rate; 
otp :» (hours - 40.0) * rate * 
else 

regp hours * rate; 
otp :■ 0.0; 
end if; 

~ calculate gross,taxes, and net 
gross :» regp + otp; 
taxes txrate * gross; 
net :■ gross - taxes; 


gross :» regp + otp; 
taxes txrate * gross; 
net :■ gross - taxes; 

— output answers 

put_line("-") ; 

put("id »»> "); put(id); new_line; 
put("over time pay is ■»> $"); 
put(otp,5,2,0);new_line; 
put("regular pay is ~» $"); 
put(regp,5,2,0);new_line; 

put("tax amount is «■>$ "); put(taxes,4,2,0); new_line; 
put("r.et pay is -»> $"); put (net, 5,2,0); new_line; 

put_line("-"); 

put line(" END OF JOB!"); 
end payroll; 


TO COMPILE, LINK, AND RUN PROGRAM 

sacredheart.shu> ada payroll.ada 
sacredheart.shu> aid -o payroll.exe payroll 
sacredhaart.shu> payroll.axe 
Enter id —> mi 

Enter hours worked in decimal format xx.x ~> 10.0 

Enter rate per hour «-> $ 5.00 

Enter taxrate in decimal format x.xx n > 0.50 


COMPILES 

LINKS 

RUNS PROGRAM 


id —> 1111 
over time pay is 
regular pay is 


0.00 

50.00 











tax amount is •»>$ 25.00 

nat pay ia —> $ 25.00 


END OP JOB! 


sacradhaart.shu> payroll.axe — TO RUN PROGRAM AGAIN 

Enter id *-> 2222 

Enter hours worked in decimal format xx.x —> 41.0 
Enter rate per hour -■> $ 1.00. 

Enter taxrate in decimal format x.xx ■»> 0.50 


id —> 2222 

over time pay is -■> $ 1.50 

regular pay is —> $ 40.00 

tax amount is •»>$ 20.75 

net pay is **■> $ 20.75 


END OF JOB! 


TO CAPTURE PROGRAM LISTING AND OUTPUT 


sacredheart.shu> payrol1.exe>payro11.run 
1111 
10.0 
5.00 
0.50 

sacredheart.shu> payro11.exe>payro11.run2 
2222 
41.0 
1.00 
0.50 

sacredheart.shu> cat payroll.ada payroll.run payroll.run2 > payroll.lis 
sacredheart.shu> lpr -Pvaxl payroll.lis 













File : payrolls.ada 

This procadura doaa payroll for avaryona 
Programmed by 8. Honda Fabruary 8, 1994 


with text_io; — nota that thara is no usa clausa for this package 
procadura payrolls is 

— variabla daclaration 

gross,nat,hours,rata,txrata,taxas,otp f ragp : float; 
id : intagar; 
again : charactar; 

— ganaric instantiation for I/O 

packaga iio is nav taxt io.intagar io(intagar); 
packaga fltio is naw text_io.float~io(float) ; 

— nota no usa clause~for packaga iio and fltio 

bagin — payrolls 
loop 

— prompt usar for data 

text_io.put("Enter id -■> "); iio.get(id); 
taxt__io. new_l ina; 

text_io.put("Enter hours worked in decimal format xx.x —> 
fltio.get(hours); text_io.new_line; 

text^io.put("Enter rate per hour —> $"); fltio.get (rate); 
taxt~io. new__l ina; 

text^io.putj"Enter taxrate in decimal format x.xx M > "); 
fltio.gat(txrate); text_io.new_line; 

— calculate overtime and regular pay 
if hours > 40.0 then 

ragp s- 40.0 * rate; 

otp ;■ (hours - 40.0) * rata * 1.5; 

alsa 

ragp :■ hours * rata; 
otp :- 0.0; 
and if; 


— calculate gross,taxes, and net 
gross ragp + otp; 
taxes :■ txrate * gross; 
net :■ gross - taxes; 


— output answers 

textJLo.put line("-"); 

taxt“io.putT"id —> "); iio.put(id); taxt_io.naw_lina; 

taxt~io.put ("over time pay is —> $"); ~ 

fltio.put(otp,5,2,0); taxt_io.naw_lina; 

taxt^io.put ("regular pay is 

fltio.put(ragp,5,2,0); text_io.new_line; 

text_io.put("tax amount is -->$ ")7 fltio.put(taxes,4,2,0) 

text~io.new line; 

text“io.put7"net pay is “> $"); fltio. put (net, 5,2,0); 
taxt"io.naw_lina; 

text“io.put~line("— -----"); 

text“io.put7"Do you wish to do this again? (y/n) ■»> "); 
taxt“io.gat(again); text_io.new_line; 
exit~~when (again /» 'y' ) T 
and loop; 


8 








END OP JOB!"); 


taxt_io.put lina(" 
«nd payroll3; 


TO COMPILE# LINK, AMD RUM PROGRAM 


sacradhaart.shu> ada payroll3.ada — COMPILES 

•acradhaart.»hu> aid -o payroll3.axa payrolls — LINKS 

sacradhaart.shu> payroll 3 .axa — RUNS PROGRAM 

Entar id -»> 1111 

Entar hours vorkad in dacimal format xx.x ■»> 10.0 

Entar rata par hour “> $ 5.00 

Entar taxrata in dacimal format x.xx “> 0.50 


id —> 1111 

ovar tima pay is **■> $ 0.00 

ragular pay is **> $ 50.00 

tax amount is ■*■>>$ 25.00 

nat pay is —> $ 25.00 


Do you wish to do this again? (y/n) —> y 
Entar id «•> 2222 

Entar hours vorkad in dacimal format xx.x ■*> 50.0 

Entar rata par hour “> $ 1.00 

Entar taxrata in dacimal format x.xx “•> 0.10 


id —> 2222 

ovar tima pay is —> $ 15.00 

ragular pay is •*> $ 40.00 

tax amount is —>$ 5.50 

nat pay is -»> $ 49.50 


Do you wish to do this again? (y/n) •»> n 
END OP JOB1 












Pile : payrolll.ada 

This procadura doas payroll for the entire company 
Programmed by S. Honda February 8, 1994 


with text_io; use text_io; 
procedure payrolll is ~ 

— variable declaration 

gross,net,hours,rate,txrate,taxes,otp,regp : float; 
id : integer; 

— generic instantiation for I/O 
package iio is new integer_io(integer); 
package fltio is new float~io(float); 
use iio,fltio; 

begin — payrolll 

— prompt user for id 

put("Enter id (-999 to end) *«> "); get(id);new_line; 

— create a loop to process payroll 
while id /» -999 loop 

put("Enter hours worked in decimal format xx.x =*> "); 
get(hours);new_line; 

put("Enter rate per hour ■»> $"); get(rate); new_line; 
put("Enter taxrate in decimal* format x.xx «»> "); 
get(txrate);new_line; 

— calculate overtime and regular pay 
if hours > 40.0 then 
regp :■ 40.0 * rate; 
otp (hours - 40.0) * rate * 1.5; 

else 

regp :« hours * rate; 
otp :■ 0.0; 
end if; 

^ calculate gross,taxes, and net 
gross regp + otp; 

taxes txrate * gross; 

net gross - taxes; 

— output answers 

put line("-"); 

putT"id ■«> ");put(id);new line; 
put ("over time pay is —> ?"); 
put(otp,5,2,0);new_line; 
put ("regular pay is —> $"); 
put(regp,5,2,0);new_line; 

put("tax amount is «*>$ "); put(taxes,4,2,0); new_line 
put ("net pay is —> $") ;put (net, 5,2,0); new_line; 

put_line("-"); ” 

-- prompt user for next id 
put("Enter id (-999 to end —> "); get(id) ;new_line; 
end loop; 

put_line(" END OF JOB!"); 
end payrolll; 






TO COMPILE, LINK, AND RUN PROGRAM 


sacredheart.shu> ada payrolll.ada 
sacradhaart.ahu> aid -o payrolll.exe payrolll 
aacradhaart.ahu> payrolll.axa 

Enter id (-999 to and) -*> ill 

Enter hours worked in decimal format xx.x «»> 10.0 

Enter rate per hour “> $ 5.00 

Enter taxrate in decimal format x.xx -*> 0.50 


id —> nil 

over time pay is —> $ 0.00 

regular pay is *»> $ 50.00 

tax amount is —>$ 25.00 

net pay is —> $ 25.00 


Enter id (-999 to end *■»> 2222 

Enter hours worked in decimal format xx.x »> 41.0 

Enter '-’te per hour »»> $ 1.00 

Enter rate in decimal format x.xx **> 0.50 


id «« 2222 

over t pay is “> $ 1.50 

regular ay is ~> $ 40.00 

tax amou..t is •*>$ 20.75 

net pay is —> $ 20.75 


Enter id (-999 to end -»> 
END OF JOB! 


— COMPILES 

— LINKS 

— RUNS PROGRAM 








CS050 

Handout Set #3 





Handout #3 


String Variable Declaration - Strings are declared as an array of 

characters. It contains multiple storage spaces for characters. 


Syntax: 

string variable name : stringd ..10); --allows 10 characters 
examples: 

FirstName : stringd ..12); 

Address : stringd ..24); 

zip : stringd ..5) := 06611; --initialize zip 


Enumeration Type Declaration - User may define their own data type. 
The data values must be enumerated in a type declaration statement 
in a particular order. In order to accomplish I/O for each different 
type, the user must instantiate each enumerated data type. 

Syntax: type EnumeratedTvoeName is ( datatype values )-. 

VariabfeName : EnumeratedTypeName; 
examples: 

type FishType is (cod, salmon, mahimahi, ahi, catfish); 
Fish : FishType; 

type ComputerType is (IBM, Apple, Dec, Compaq); 
Computer:ComputerType : = Dec; --initialize Computer 


Generic Instantiation of FishType and Computer Type - To allow for I/O 
Syntax: type InstTvpeName is new aenericpackaaef datatype); 

examples: 

type Fishjo is new enumerationjo(FishType): 

type Computer Jo is new enumeration Jo(ComputerType); 

use Fishjo, Computerjo; 





type day_type is (monday.tuesday, Wednesday .thursday, 
friday,Saturday,Sunday); 
day : day_type; 

i* • • 

if statement 

if day — Saturday then 
put_line("Play M ); 
else 

if day=Sunday then 

put_line( M Sleep”); 
else 

if day = friday then 

put_line("Call in sick”); 
put_line("Play computer games!"); 

else 

putJine("Go to work!"); 
end if; 
end if; 
end if; 

iTs with elsif clauses 

if day= Saturday then 
put_line("Play"); 
elsif day=Sunday then 
put_line("Sleep"); 
elsif day = friday then 

put_line("Call in sick"); 

__ put_line("Play computer games!”); 

~else 

put_line("Go to work!"); 
end if; 

Case Statement 

case day is 

when Saturday = > put_line("Play"); 

when Sunday = > put_line("Sleep M ); 

when friday = > put_line(”Call in sick"); 

put_line("Play computer games!"); 
when others = > put_line("Go to work!"); 

end case; 




Case Statement 


The Cast expression must be of a discrete type 

Each of the possible values of the case expression must be covered in one 
and only one when clause. 

If the when other ... « used, it must appear as a single choice at the end 

of the case statement 

. Choices in a when clause must be static 

Case Statement Example 

atomicnumber : integer range 1..105; 

• « • 

case atomicnumber is 
when 1 

= > put("Hydrogen"); 
when 2 j 10 j 18 | 36 j 54 j 86 

= > putC'Noble Gas"); 
when 3 | 11 | 19 | 37 | 55 | 87 

* > put( H Alkali Metal 1 '); 
when 4 | 12 | 20 | 38 i 56 | 88 

= > put("Alkaline Earth Metal”); 
when 5 | 13 | 31 | 49 | 81 

= > put("Aluminum Family"); 
when 6 | 14 | 32 | 50 i 82 

= > put(’Carbon Fa.nily "); 

^vhen 7 | 15 j 33 | 51 j 83 

= > put("Nitrogen Family"); 
when 8 | 16 | 34 j 52 | 84 

= > put("Chalcogen"); 
when 9 | 17 | 35 | 53 | 85 

= > put("Halogen"); 

when 58..71 

= > put("Rare Earth"); 
when 90.. 103 

= > put("Actinide"); 

when others 


end case; 


= > put("Transition Metal"); 







Which Case Statements are Legal? 

response: character; 

••• 

getfresponse); 

case response is. - using selectors 

when 'Y' I y => putJineCYou are begin positive"); 
when 'N' I 'n' => putJineCYou are being negative"); 
end case; 


type day_of_week_type is (monday / tuesday / wednesday / thursday / 

fnday / saturday / sunday); 

day: day_of_week Jype; 

• * • 

case day is - using discrete range 

when monday..thursday => putCGo to work!"); 
when friday => put('Take sick leave”); 

when Saturday. .Sunday => putCWatch TV”); 
end case; 


subtype age.type is float range 0.0.. 
age: age_type 

• • • 

case age is 

when 0.0 .. 12.0 => putCChild”); 
when others »> putCTeeny-Bopper"); 
end case; 


PW' 1 " 
gd(max); 
case value is 

when 1.. max *> putCIn range"); 
when others *> putCOut of range"); 




max : integer :* 5; 
value: integer :*2; 

• • • 

case value is 

when 1 M max 
when others 
end case; 


■> putCIn range"); 

■> putCout of range"); 






CS050 

Handout Set #4 












Handout #4 


Logical Expressions 

Logical Expressions (sometimes called boolean expressions) are 
expressions that evaluate to boolean values true or false. Boolean 
Variables may be assign to boolean constant values of true or false. 

In a declaration section where 

Again : boolean ; 

A,B : integer ; 

In the executable body where 

Again : = true ; 

while Again loop 

sia te m eoi lsl ; 

putCDo you wish to repeat this? (true or false ") ; 
get(Again) ; 
end loop; 

if A > 500 then 

statements ); 
rend if ; 

In the above examples Again : = true . Again, and A>500 are examples 
of Logical or Boolean Expressions. Both expressions evaluate to true or 
false. 





Sequential File Processing in Ada 


The following subprograms from Textjo are generally used in sequential 
file processing: 

Procedures open, close, create 

Function endoffile 

1 . The open procedure allows a physical data file to be opened and 
used for input. 

syntax: 

open( LoaicalFileName . filemod e. filename ); 

Where LogicalFileName is an identifier that is declared as a filetype, 
filemode is In file or outfile, and 

filename is the physical file found on secondary storage. 

The name of the physical file can be enclosed in quotes, 
or the name may be stored in a string variable. 

Examples: 

Sam : file type; 

• • i • • • 

open(Sam, in file, "payroll.dat"); 
or 

Sam : file_type; 

FName : string! 1 ..11); 

put{"Enter filename, [exactly 11 characters please] "); 
get(FName); newjine; 
open(Sam, in_file, FName); 

2. The close procedure closes an opened file. Remember to close all 
opened files in your program when not needed. 

syntax: close( LogicalFileName ): 


Example: 


close(Sam); 





3. The test for end of file can be done with the function end_of_file. 
This function returns a value of true if the end of the file is reached; 
otherwise it returns a value of false. 

Example: Sam, Joe : file_type; 

FileName : string! 1.11); 

PayRate : float; 

open(Sam, in_file. Filename); 
opentJoe, in_file, "acctpay.dat"); 
while not end_of_flla(Sam) loop 
get(Sam, Id); 

get(Joe,ld); get(Joe,PayRate); 

end loop; 

close(Sam); 

close(Joe); 

4. The create procedure will create a file for output, 

syntax: create! LoaicalFileName. filemode , filename): 

Example: 

OutFile : file_type; 

Rate : float ; 

JHr : float ; 

-- prompt user for data 
putCEnter Pay rate = = > "); 
get(Rate); newjine; 
putCEnter Hours worked = = > ”); 
get(Hr); newjine; 
create(OutFile, out file, "PayFile"); 

put(OutFile, "Pay file - 1993"); ~ header in 1 st record of file 
put(OutFile, Rate); - writes pay rate to file 

put(OutFile, Hr); -- writes hours worked to fiie 


close(OutFile); 







COMPARING 


Instruction! 

A report of the book royalties for authors is to bo prepared. A program should bo designed and 
codod to produce tno report. 


Input 


Input consists of solos records that contain the author's name, tno tttio of tho book, and tno 
numbor of books sold. Tho input data is shown below 
and of fits indicator. 


1 

1 

mi« 

NUMBER SOLO 

BROWN 

BASIC 

MM 

DAVIS 

COBOL 

5*71 

EVANS 

PASCAL 

43*7 

LAMB 

PILOT 

3BB7 


Output 

Output tea book royalty report containing the author's name, the title of the book, lha numbor of 
copies sold, and tno royalty. If a book sal la loaa than 4,000 c oplo o , a royalty of 2S cants par book is 
paid, if a book sons *.000 copies or mors, a royalty of 36 cants par book la paid. Aftor all records nova 
boon pro ces sed, the total number of authors, the total numbor of books sold, and the total royalties 
paid to all authors are to be displayed. The format of tho output is Illustrated b elow. 


•ook sot scrub 


WAhC 


TXT-* 

»RCM« 


•ASZC 

OAUli 


coeoc 

CVAM* 


PASCAL 

CA.«t 


PILOT 


SOLO 

out 

3444 

1134.71 

5479 

ist/.as 

•0*7 

1-31.45 

3147 

uxi. 43 


TOTAC AJTHCkS 4 
TOTAc 1COK3 17442. 

TOTAL ftQYACTI2S 5*07.74 










DATA FILE : COKUPTBR.DAT 


Brown 

Basic 

3999.0 

Davis 

Cobol 

5679.0 

Evans 

Pascal 

4397.0 


Pilot 

3867.0 

— 

DATA FILE : MATHEMAT.DAT 

SMITH 

DISCRETE MATH 

1000.0 

YEE 

CALCULUS 

3433.0 

KINIK 

ALGEBRA I 

10000.0 

KINIK 

GEOMETRY 

3001.0 

GROUCHY 

MATH IS FUN 

7012.0 

SELLS 

PROBABILITY 

1234.0 

— 

PROGRAM : BOOK 

.ADA 


with text_io; use text io; 
procedure book is 

— generic instantiation of float_io 
package fltio is new float io(FLOAT); 
package iio is new integer_io(NATURAL); 

use iio, fltio; 

— declare variables 


V_»- ‘ r~ fj jr* 

• -» - - — 

y 


. L)jt 

X;* .v 

N V_ 


So , 


Name : STRING(1. .8); - . 

FileName : STRING (1.. 12); -—- —V / 

Title : STRING(1..14); X- V 

TotalAuthors : NATURAL :■ 0; > -r 

Sam : FILE TYPE; . - X - 

TotalBooks,Sold,Due,TotalRoyalties : FLOAT :-0.0; v . t — 

begin — book I - 

— prompt user for input file name J v 

put_line("What is the name of the file you wish to open”); 
put("Type no more than 12 characters please! "); T 

get (FileName); X X4 oj:> ^ -- 

put(FileName); A . . J . . t -- _ 

new_line; Lw/ r ^ r ; 

— open the input file _~i—t 

open( Sam, IN_FILE, FileName); _ 

. — put headers [. r ™,. 

put_line(" BOOK ROYALTIES"); 1-———- - - 

new_line; 1 

put_line(" NAME TITLE \ SOLD DUE"); 

new_line; l 

put_line(". \ -"); 


Lw/ r -iSS p.c. 


wUJiO/i . r »-*//.• — 

DUE"); 

__H \. 

t > y 


while not end_of_file(Sam) loop \ 

-- begin reading a record...\ 
get(Sam,Name); 
get(Sam,Title); 
get( Sam, Sold); 
new_line; 

— calculate royalities 
if Sold < 4000.0 then 

Due 0.29 * Sold; / 

else 

Due :■ 0.35 * Sold; 

end if; 

— update counter and accumulators 
TotalRoyalties :■ TotalRoyalties + Due; 
TotalAuthors :■ TotalAuthors ♦ 1; 
TotalBooks TotalBooks ♦ Sold; 

— output information 

put(Name);put(" "); 


* r •. 7 

•V " 


1 }b+iu ; -/".v 


> 0 /"' /.* r 

\ .. o ' 












put(Title);put(” H ); 

put(Sold,fore->8,aft->2,exp->0); 

put(Due,fore->8,aft->2,exp->0); 

new_line; 

—get name from next record 

end loop; 
close(Sea); 
new line; 

putT” Total Authors H ); 

put(TotalAuthors,width->4);new_line; 

put(" Total Books M ); 

put(TotalBooks,£ore->8,aft->0,exp->0); 

new_line; 

put(" Total Royalties due $••); 

put(TotalRoyalties,fore->8,aft->2,exp->0); 

new_line; 

put_line(" End of Job");new_line; 
end book; 


COMPILATION,LINKING, AND EXECUTION RUN OF BOOK.ADA 


SHU> ada book.ada [ENTER] 

SHU> aid book [ENTER] 

SHU> a.out [ENTER] 

What is the name of the file you wish to open 
Type no more than 12 characters please! computer.dat 
BOOK ROYALTIES 


NAME 

TITLE 

SOLD 

DUE 

Brown 

Basic 

3999.00 

1159.71 

Davis 

Cobol 

5679.00 

1987.65 

Evans 

Pascal 

4397.00 

1538.95 

Lamb 

Pilot 

3867.00 

1121.43 


Total Authors 4 

Total Books _17942.0 

Total Royalties due $ 5807.74 

End of Job 


ANOTHER RUN OF BOOK.ADA USING DIFFERENT INPUT FILE 
SHU> a.out [ENTER] 

What is the name of the file you wish to open 
Type no more than 12 characters please! mathemat.dat 
BOOK ROYALTIES 

NAME TITLE SOLD DUE 


SMITH DISCRETE MATH 

YBE CALCULUS 

KINIK ALGEBRA I 


1000.00 290.00 

3433.00 995.57 

10000.00 3500.00 

.00 


KINIK 


GEOMETRY 


3001 


870.29 








GROUCHY MATH IS PUN 7012.00 2454.20 

SELLS PROBABILITY 1234.00 357.86 

Total Authors 6 
Total Books 25680.0 
Total Royalties due $ 

End of Job 


8467.92 





•A«tC AAITMMITIC OOSSATlONS - ACCUMULATING PINAL TOTALS 
tnatrvcttono 

* 'upon of 1no poymoma for • gaaonna cwj* card tyatom 1 , 0 m entvN a 0'Mr«m anou.c 

M daa<gnod 


Input 

'"Put Jonaiata of aoioo rococo containing mo euatomor ^gmear. mo euatomor «amo. ,*« 
promoua ooionco. mo currant purcnoaoo. ana mo Mymonta moot Tho mout oau a anown M io« 


CUSTOMS* 

HUMS!* 

CUSTOMS* 

NAMC 

PSfVIOUS 

SALANCS 

CUSSSNT 

SVISCHASSS 

PAYMINTS 

201 

OftAKI 

100JS 

1171 

1171 

234 

HOLLY 

171.71 

2US 

21M 

MO 

LOOMS 

230.71 

AITS 

SOM 

AM 

SAMOS 

130.71 

17M 

17.71 


Output 

Output io a report ol poymonto duo. Tho mo o n to to contem mo cuotomor noma, mo currant 
B ofon c o. and mo mintmum payment duo. Tho currant it olo nc o <a oPtomoo By ooainp mo prowoua 
Bo t on c o to mo currant pu rcn o o oo. and ouPtroottnf mo poymo n t a . Tho minimum poymont duo to 
ootofnad By towns 14 H of mo currant Botonco After on m c oraa fraud Boon piacaoaad. mo rotaf 
numiar at c uotomor o and tiro totoi currant B o t an c oot aM cuo t o m o ro aro to bo d i apioyoo. Tho formoto* 
mo output 10 tuuouatod Botov. 



CAK0ZT CAPS SUfUUUtr 


eutroNca 

CUPBOAT 

N2N2MUN 


POLANCO 

PAYtXftT 

aaoa 

IM.SS 

14*44 

OUT 

174.70 

20.20 

LOOMS 

PANOO 

230.20 

130.23 

37.44 

21.44 

TOTAL etlOTOMCM 4 


| total - 

CUPAOMT OALANCOS 0 447.0 







•AUC AflITHMITIC 0MWV3NI - ACCUMULATING PINAL TOTALS 

instruct^** 

a rooort i to oo km ow *or «tfonaponanon eompony to ootommo m# mu#* Of pane* optamoo 
from IK" out an*on for to# tty A proprom tAoufO 00 Ottipnoo 


input cono<ata of foeoroa >nat contain to* out onvori n*m*. 

d'<*»n. 4ft0 to* gallon* Of ttOOtiO# jMO TO* input UU i* *AOwn 01 


•Ooniiftcation numoor. to* mil*# 


oaivia 

DAIVtR 

mmm 


10 

NAMI 

Bill 

GALLONS 

11 

C OAVtS 

210 

SS 

31 

A ROAMS 

APS 

AS 

40 

0 GAOLS 

331 

SI 

IT 

L JAMS* 

__ 

2SI 

IT 


Output I* o ouo mttoogo rooort toot contain* too drfvor'a namo. to* nutoo travoMO. to* galton* of 
Ooooun* uooo. ono too nut** por ftilon. TO* totioo por goHoo i* opcomoP Py pooopip to* 0OMOA* uaod 
mto too mitoo trovotod. A ft or on rpeofOO o*v* poon procooaad. to* total numoor of drtmr*. to* total 
fonoo trovotod. too total 901100a uaoo. an* too ovorppa m»io* par poiion for on fewooo ar* to 00 
otapiayoo. to* format of to* output 1* iHuotrotoo *o * ou> 


•ut KUUCf 


(•Ml 

e povss 

0 000OP 
• MSI 
L JOOtf 


0SLC3 

SAkkOMt 

MAC 

»l 

29 

t» 

«*S 

•2 

ti 

SOP 

2* 

to 

2SS 

IT 

IS 


roroL Mzvtn a 
total 0XLS9 tin 
TOTAL 6AU.3M U« 
AWCAA6C no0 u.PASA 












A »: k ss; financial tt»tt la to , 

to product the report. * 

INPUT 

.rip.t conaiata of recorda containing the cim a* *s* 

(coda 1 if eha student la a non-veteran- coda 2 1 # .1. 1 * C3i# 

th. n usher of unit, eha atudanc i! ^luffor L U * v#:#r * 

U'.. r.-.rd. :>.« d... t, kii”.* “ ““»« <" •« = 


STUDENT 

1 



N/-S 

! CODE 

UNITS 

DEPENDENTS 

L0CUI 

1 1 

IS 

0 

JAMES 

j 2 

IS 

1 

3 

0KCIV 

! 2 

13 

MANLEY 

2 

12 

1 

J 

SAUL 

1 2 

1 

li 


OUTPUT 

. J . J 0u ? p '* t l * * fi**n«i*l asalstanca raport of all veterans. If cha 
ir.u.aa* la not a veteran (coda 1), that chair naaa la noc co appear e- 

5-IkI^ ! C * th * dividual la a vataran. la a part-cisa atudanc 
(.akini lass than 13 units) and naa laaa chaa evo dapandsnes. chan tha 
financial aaaiatanca la $20.00 par vial: being cakan. If cha individual 
la a part-cine atudanc and a vataran vrith two ar aera dependence, cha 
financial assistance it 123.00 par visit halag takas. If cha vataran it 
JJ** 1 *? ? tud#nc (lJ w»i«« «» ■©re) with naa ar sara dapasdanca. chan 
eha financial aaaiatanca la S30.00 par vale halag takas. If tha vataran 
is a full-time atudanc with laaa chas eve dapandanta. tha financial 
assistance la $27.00 par unit being takas. After all racards hava baan 
protested, tha total nushar at full-tin* vacarana* tha tatal number of par 
t ”* t T ^ #ttr sn acudaeta. and tha total .aount af financial aaaiatanca 
thould ha displayed. Tha format ef tha autput la illuatradad below. 


VTTDUNS | 

FINANCIAL ASSISTANCE 


JAMS 

OSCtt 

HANLEY 

SAUL 


STATUS 
TULL TIMS 

ruu Tin 

taut tcc 

FAST TIM 


AMOUNT 

S 432 
» 430 
I 240 
S 322 


T0TAL*7ULL TOS VETttAN 
TOTAL-FAJLI TM VTTUU5 

total Afouirr 9 uaa 




CS050 

Handout Set #5 






Handout #5 


Ada Subprograms (Procedures and Functions) 

A subprogram is a sequence of code, that allows programs to be 
structured in modular style. It also supports code reuse. Code that can 
be used over again should be written as subprograms and housed in 
packages. A complex problem can be broken down into smaller 
manageable pieces. 

All Ada subprograms, functions or procedures have the same basic parts. 
(See next page). Identifiers that are used only within a subprogram 
should be defined locally within the subprogram. Identifiers that are used 
in the main procedure as well as in several subprograms should be defined 
globally in the main subprogram. See text to review visibility rules. 

A flowchart of a problem that use macro modules can be written as 
subprograms that can be farmed to several programmers. 

The major differences between Functions and Procedures are: 

Functions 

• return a value when invoked. 

• are called within a statement or as part of another unit. 

• contain at least one return statement in the executable body. 

Procedures 

• return zero, one or more values. 

• are invoked by using the procedure name. 

• Do not contain return statements 


Parameter passing allows different values to be used when a subprogram 
is invoked at different times. The different types of parameter modes 
include in, out and inout. See text to review parameter modes. 






Ada Procedure 


Header 


Declaration Section 


Executable Body 


-- identifies the procedure 

types (enumerated) 
array types 
subtypes 
constants 
variables 

•subprogram declaration (Functions or Procedures) 
instances of generic packages or subprograms 

executable ada instructions or statements 
subprogram calls 


•Subprogram defined in the declaration Section 

Function: 

FUNCTION FuncName (Par ami: in DataTI: Parm2 : in DataT2 ) return DataT3 is 

Formal Parameter List 

LOCAL DECLARATIONS 
BEGIN -- FuncName 

-- executable statements 

return_; 

END FuncName; 


Procedure: 

PROCEDURE ProcName ( Parm 1 : in DataTI : Parm2 : out DataT2 : Parm3 ‘. in out DataT3 ) is 
~ Formal Parameter List • 

LOCAL DECLARATIONS 
BEGIN -- ProcName 

-- executable statements 
END ProcName; 


3 Possible MODES for Parameter Lists 

in The formal parameter is treated as a constant whose value is provided by the 

corresponding actual parameter. This parameter cannot be changed by the 
subprogram. 

out The parameter is a variable whose value is assigned to the corresponding 

actual parameter as a result of the procedure. 

in out T he formal parameter is a variable whose corresponding actual parameter 
value can be referenced and updated. 






Parameter Passing Modes 


in 

• has initial value 

• read only 

• cannot alter value 

• default mode 

• actual parameter can be an expression 

out 

• has no initial value 

• write only 

• must assign value 

actual parameter must be a variable 

in out 

• has initial value 

• read and write 

• can alter value 

• actual parameter must be a variable 







FILE l TAXES.ADA 


This procedure declares a function called taxcalc that 
calculates the tax return, if you give it 4 PARAMETERS: 

1. the TAXABLE IN of a person(s) 

2. the AMOUNT of base taxes you need to pay for that 

incone range 

3. the PERCENTAGE amount in decimal format 

4. the Amount over value 

It will then calculate your taxes and return that amount! 


with text_io; use text_io; 
procedure taxes is 

Mr,Mrs,MrTax,MrsTax,JointTax : float; 
Temp : float; 

package fltio is new float_io(float); 
use fltio; 


function taxcalc(Income,Amt,Percent,Over:float) return float is 
taxamt : float; 
begin — taxcalc 

taxamt :- Amt + Percent*(Income-Over); 
return taxamt; 
end taxcalc; 


begin — taxes 

put("Enter Mr. Doe's Taxable Income »> $"); 
get(Mr);put(Mr,fore-> 6,a ft» > 2,exp-> 0);new_line; 
put("Enter Mrs. Doe's Taxable Income -> $"); 
get(Mrs);put(Mrs,fore->6,aft»>2,exp«>0);new_line; 

-- calc taxes invoking function taxcalc 
MrsTax :- TAXCALC(Mrs,2190.0,0.32,20000.0); 

MrTax :- TAXCALC(Mr,1630.0,0.28,18000.0); 
JointTax :-TAXCALC(Mr+Mrs,3960.0,0.29,36000.0); 

— output returns 

put("Mr. Doe's Separate Tax return will be $"); 
put(MrTax,fore«> 7,aft-> 2,exp-> 0);new_line; 
put("Mrs. Doe's Separate Tax Return will be $"); 
put(MrsTax,fore->7,aft-> 2,exp-> 0);new_line; 
put("Their joint tax return will be -> $"); 
put(JointTax,fore-> 7,af t* > 2,exp* > 0);new_line; 

" decide which way to file 
if MrTax + MrsTax > JointTax then 

put_line("File Joint Return"); 

else 


if MrTax + MrsTax < JointTax then 

put_line(‘File Separate Returns"); 

else 

put_line("File anyway you like!"); 

end if; 

end if; 
new_line; 
end taxes; 


EXECUTION RUN OF TAXES.ADA 


Enter Mr. Doe's Taxable Income -> $ 18750.0 
Enter Mrs. Doe's Taxable Income -> $ 20312.0 
Mr. Doe's Separate Tax return will be $ 1840.00 

Mrs. Doe's Separate Tax Return will be $ 2289.84 

Their joint tax return will be -> $ 4847.98 

File Separate Returns 














FILE : paint.ada 

This sain procadura illustrates the use of subprograms. 

It contains a function and 3 procedures in the main declaration 
area of the main procedure. S. Honda 3/93 


with text_io; use text_io; 
procedure"paint is 

package fltio is new float_io(float); 
use fltio; 

— global declarations 
length,width,area : float; 
costpergal,no_gal,costpaint : float; 


function painta(wid,len:in float) return float is 
— local declarations 

height : constant float :■ 8.0; — height of room 8 ft. 

valll,wall2,ceiling,totalsqft : float; 
begin — painta 

walll :« len*height; 
wall2 :» wid*height; 
ceiling :* wid*len; 

totalsqft :■ 2.0*(wall2 + walll) + ceiling; 
return totalsqft; 
end painta; 

procedure getdata(i,w,costpergal : out float) is 
begin — getdata 

put("Enter length of room in ft. **> "); 
get(l); new_line; 

put("Enter width of room in ft. =*> "); 
get(w); new_line; 

put("Enter cost of paint per gallon *=> "); 
get(costpergal); new_line; 
end getdata; 

procedure calc(area,costpergal: in float; no_gal,costpaint 
: out float) is 
— local declaration 

coverage : constant float :*233.0; 
temp : float; 
begin — calc 

temp :» area/coverage; 
temp :- float(integer(temp + 0.5)); 
no_gal :« temp; 
costpaint :* temp*costpergal; 
end calc; 

procedure print(w,l,area,no_gal,costpaint:in float) is 
begin — print 

put_line("The paint used to paint the room covers") 

put”line("233 sqft. The room to be painted is a"); 

put”line("standard 8 feet high room!"); new_line; 

put("The length of room is "); 

put(l,2,1,0);put_line(" ft"); 

put("The width of room is "); 

put(w,2,1,0);put_line(" ft"); 

put("The area to _ be painted is "); 

put(area,4,1,0);put_line(" sqft."); 









put( N Th« cost of paint is $ N ); 
put(costpaint,4,2,3);new_lins; 
put("The no of gallons to buy : "); 
put(no_gal,2,0,0);new_line; 
and print;” 


bsgin — paint 

getdata(length,width,costpergal); 
area painta(width,length); 

calc(area,costpergal,no_gal,costpaint); 
print (width, length, area, no__gal,costpaint); 
end paint; 


EXECUTION RUN OF PROGRAM 

shu.sacredheart.edu > ada paint.ada 
shu.sacredheart.edu > aid -o paint.exe paint 
shu.sacredheart.edu > paint.exe 

— COMPILES 

— LINKS 

— RUNS EXECUTABLE FILE 

Enter length of room in ft. «■> IC.C 

Enter width of room in ft. «»> jc.o ' 

Enter cost of paint per gallon «> it \ c 

The paint used to paint the room covers 

233 sqft. The room to be painted is a 
standard 8 feet high room! 


The length of room is 10.0 ft 

The width of room is 10.0 ft 

The area to be painted is 420.0 sqft. 

The cost of paint is $ 20.00 

The no of gallons to buy : 2.0 



shu.sacredheart.edu > paint.exe — RUNS EXECUTABLE FILE 


Enter length of room in ft. »■> ■ o 
Enter width of room in ft. ■»> it 
Enter cost of paint per gallon *»> \Z\:u 
The paint used to paint the room covers 
233 sqft. The room to be painted is a 
standard 8 feet high room! 

The length of room is 1.0 ft 

The width of room is 1.0 ft 

The area to be painted is 33.0 sqft. 

The cost of paint is $ 10.00 

The no of gallons to buy : 1.0 









File : COMPUTER.DAT 
BROWNBASIC 100 
WHITECOBOL 6000 
GREENRPG 1000 

EVANSADA 6080 

File : BOOK.ADA 4 ) 

— This program is the book royalty problem that has been 

— modularized. Note the three procedures (Headers, Loops, 

— PrintTotals). 

with text_io; use text_io; 
procedure book is 

package iio is new integer_io(integer); 
package fltio is new float_io(float); 
use iio,fltio; 

TotalAuthors,TotalBooks : natural :»0; 
TotalRoyalties : float :*0.0; 


procedure Headers is 

begin — Headers 

put_line(" Book Royalties”); 

new_line; 

put(” Name Title "); 

put_line(" Sold Due”); 
new_line; 

put!"-") ; 

put_line ("-"); 

end HeadersJ 

procedure Loops(TotalAuthors,TotalBooks:out natural; 

TotalRoyalties; out float) is 
ta,tb,Sold ; natural 0; 

due,tr ; float := 0.0; 

Name : string(1..5); 

Title ; string(1..6); 

Sam ; file_type; 

begin — Loops 

open(Sam,in_file,"computer^dat”); 
while not end_of_file(Sam) loop 
get(Sam,Name); 
get(Sam,Title); 
get(Sam,Sold); 
new_line; 

if Sold < 4000 then 

Due :» 0.29 * Float(Sold) 

else 

Due 0.35 * Float(Sold) 

end if; 

tr :■ tr + Due; 
ta ;* ta + 1; 
tb :■ tb + Sold; 
put(Name);put(" ”); 

put(Title);put(” "); 

put(Sold); 
put(Due,8,2,0); 
new_line; 
end loop; 





close(Sam); 
TotalAuthors :■ ta; 
TotalRoyalties :■ tr; 
TotalBooks :■ tb; 
end Loops; 


— Note the parameters passed have different names, 
procedure PrintTotals(TA,TB: in natural; TR: in float) is 
begin —PrintTotals 
nev_line; 

put!" Total Authors "); 
put(TA,width«>4);new_line; 
put(" Total Books Sold "); 
put (TB); new_l ine; 
put( M Total~Royalties due $"); 
put(TR,8,2,0);new_line; 
put_line( M End of Job!"); 
end PrintTotals; 


begin — book 

Headers; 

Loops(TotalAuthors,TotalBooks,TotalRoyalties); 
PrintTotals(totalAuthors,TotalBooks,TotalRoyalties); 
end book; 

Execution Run of Book.exe: 


Book Royalties 


Name 

Title 

Sold Due 


BROWN 

BASIC 

100 

29.00 

WHITE 

COBOL 

6000 

2100.00 

GREEN 

RPG 

1000 

290.00 

EVANS 

ADA ~ 

6080 

2128.00 


Total Authors 4 
Total Books Sold 13180 

Total Royalties due $ 4547.00 

End of Job! 


I 





Ada Executable Statement 


for loops - Allows for repetition. It automatically increments with a starting value, 
to an ending value and performs a pre-test. 

syntax: for ForVariable In Initialvalue .. Endinzvalue loop 

statements ; 

• • • 

end loop; 

Note: ForVariable does not need to be declared. It will cease to exist after endloop. 
ForVariable will take on the value of Initialvalue. Initialvalue and Endingvalue 
must be discrete scalar constant values, expressions or variables. It may not be 
any other data type such as real or composite. ForVariable, Initialvalue, 
Endingvalue must be of the same data type. 

Examples: 

1. -- prints message in putjine 10 times 
for i in 1..10 loop 

put line("I love to program in Ada!"); 
end loop; 

2 . 

- Prints 3 and 4 Times table 
for i in 3..4 loop 
put("Set "); 
put (i); 

put_line(" times table "); 
for j in 1..12 loop 

-I put(j); putf times "); put(i); put(" = "); put(i*j); new_line; 

end loop; 
newjine; 
end loop; 

3. type food_type is (hamburger, sushi, fries, saimin, hotdog); 
food : food_type; 

package food Jo is new enumerationjo(foodjype); use food Jo; 

for food in hamburger..fries loop 
putJine( food); 
end loop; 






with text_io; use text_io; 
procedure~ascii is 
c:integer; 
begin — ascii 

put_line("This is print some of the ASCII characters from") 
put_line(" the space character to the ~; 
new line; 
c:»$; 

for i in ' loop 

put(i); 
put(" "); 

if c<-10 then 
c:»c+l; 

else 

c:«0; 

new_line; 

end if; 
end loop; 
new_line; 
end ascii ; 


RUN or PROGRAM ASCII.ADA 


This is print some of the ASCII characters from 

the space character to the 

!"#$%&' ( ) * + 

, - . / 01234567 

89: ; <*>?@ABC 

DEFGHIJKLMNO 
PQRSTUVWXYZ [ 

\ ] ’abcdefg 

hijlclmnopqrs 
tuvwxyz (I ) 









with text_io;use text_io; 
procedure~truth_table is 


— Example of using boolean variables; I/O boolean variables 

— and of nested loops 


— declaration of variables 
p,q:boolean; 

— generic instantiation of generic package enumeration_io 
package boolio is new enumeration_io(boolean); 

use boolio; 
begin —truth_table 

put (" p q p or q ”) ; 
put("p xor q p and q") ; 
new_line; 

put!"_"); 

new_line(2); 
for p in boolean loop 
for q in boolean loop 
put(p,6); 
put(q,9); 
put(p or q,9); 
put(p xor q,width=>9); 
put(p and q / width=>9); 
newline; 
end loop; 
end loop; 
end truth_table; 


EXECUTION RUN OF TRUTH TABLE.ADA 


p q p or q p xor q p and q 


FALSE FALSE FALSE FALSE FALSE 
FALSE TRUE TRUE TRUE FALSE 
TRUE FALSE TRUE TRUE FALSE 
TRUE TRUE TRUE FALSE TRUE 











CS050 

Handout Set #6 






Handout #6 

User Defined Exceptions 

A user defined exception is an identifier that is declared as an exception 
type. It is an identifier that is used in exception handling. It is an error 
condition explicitly raised.- 

Exception Handler 

• is used to handle unanticipated runtime errors 

• determines the problem and takes appropriate action 

• is embedded in Ada bodies 

• is placed at the end of a subprogram, block or package body 

• is similar to the case statement 

Syntax : 

declare 

declarations ; 

begin 

• • • 
exception 

when choices - > statement^) ; 

a a a 

when choices = > statements) ; 

“end; 

Example : 
declare 

Number : integer range 0..100; 

begin 

put("Enter value from 0 to 100"); 
get(Number); newjine; 
exception 

when constraint_error = > 

putJineCOnly values 0 to 100"); 


end; 





Other Location of Exception Handlers 


procedure Main is 

dedarationfs) : 
begin - Main 

_s tatement(s) ; 
exception 

exception handler ; 
end Main; 


package PkaName is 

visible dedarationfsI ; 
end PkaName ; 

package body PkaName is 
hidden dedarationfs) ; 

begin 

~ code 
exception 

exception handier ; 
end PkaName ; 


Built-in Exceptions 

• ConstraintError 

• Numeric_Error 

• Storage_Error 

• Program_Error 

• DataError 


• Task Error 






EXAMPLE OF EXCEPTION HANDLING 

Note the declaration of user defined exceptions too_old, 
and too_young. The user may define his own exceptions or 
use predefined ones such as constraint_error, program_error, 
storage_error, numeric_error, data_error. (Check reference 
manuals to determine how error is treated your implementation. 


with text_io; use text_io; 
procedure excep is 

— declaration of a subtype called agetype 
subtype agetype is integer range 1..120; 

— declaration of variables 

age : agetype; 

too_young,too_old : exception; 

— instantiation of integer_io 

package iio is new integer_io(agetype);use iio; 

begin — excep 
loop 

begin — local block 

put("Enter your age => ") ; 
get(age); put(age); new line; 

— raising user defined exceptions 
if age<12 then 

raise too_young; 
elsif age >80 then 
raise tooold; 
end if; 

put_line("Just the right age..."); 
put_line("Just the person I need..."); 
exit; — exit loop 

exception 

when constraint error => 

put_line("ThTs is out of range!"); 
when_data_error => 

put_line("This is the wrong data type "); 
when too young => 

put_lTne("You are too young to smoke!"); 
when too old ~> 

put_lTne("You are too old for sky diving!"); 
when others -> 

put_line("I give up!"); 
end; — local block 

end loop; 

put_line("This is the end!"); 
new_line; 
end excep; 


EXECUTION RUN OF EXCEP.ADA 


Enter your age ■> 0 This is the wrong data type 
Enter your age «> 121 This is the wrong data type 
Enter your age »> 95 
You are too old for sky diving! 

Enter your age »> 5 







You are too young to smoke1 
Enter your age -> 28 

Just the right age... 

Just the person I need... 
This is the end! 







CS050 

Handout Set #7 












Handout #7 


An array is a composite object consisting of components of the same 
subtype. Its composite value consists of the values of its components. 
To reference a component of a one-dimensional array object, one uses the 
name of the array object appended with an index value enclosed in 
parentheses. The index is analogous to subscript. Any discrete type can 
be used as an index or subscript. 

Syntax : 

type ArravTvoe is array( beainranae .. endranae of datatype ’. 
where beginrange and endrange are discrete types. 


or 

ArravName : array! beainranae .. endranae of datatype : 
Examples: 

— An one dimensional array of 5 elements 

- Vector(l), Vector(2), Vector(3), Vector{4), and Vector(5) 
type VectorType is array(1..5) of integer; 

Vector : VectorType; 
or 

Vector : array(1..5) of integer; 

- 3000 elements of strings whose length is 25 characters and 

- Part! 1000), Part(IOOI), Part(1002) .. Part{3999) 
type Partjd is range 1000..3999; 

type Part Type is array(PartJd) of stringd ..25); 

Part : Parttype; 

Two dimensional array: 

- Matrix contains 3 rows and 5 columns of data elements 

-- Matrix!1,1) Matrix{1,2) Matrix(1,3) Matrix(2,1) Matrix(2,2) .. 
type MatrixType array(1 ..3,1 ..5) of float; 

Matrix : MatrixType ; 








V C 5 52^4 


_____________ 

' — FILE : MAIN.ADA 

— This main procedure reads from a sequential file called "STUDENT.DAT". 

— The data is read into several arrays (NAME,STATUS,JOB, and WEIGHT). 
After closing the file, the average weight is calculated and the 

— maximum weight is found. The appropriate student*is identified also. 


with text__io; use text^io; 
procedure main is ~ 

— variable declaration 
max : positive :■ 15; 

— type declaration 

type jobtype is (Navy_Captain,Actor,Hotel_Executive,Pilot, 
Lawyer,Opera'singer,Polo_Player)7 
type statustype is (freshmen,sophomore,junior,senior); 
type jobary is array(l..max) of jobtype; 
type statusary is array(1..max) of statustype; 
type weightary is array(1..max) of float; 
type nameary is array(1..max) of string(l..8); 

— instantiation of generic packages for I/O 
package jobio is new enumeration io(jobtype); 
package statusio is new enumeratTon_io(statustype); 
package fltio is new float_io(float); 

use jobio,statusio,fltio; 

— declaration of variables 

status : statusary; 

job : jobary; 

weight : weightary; 

name : nameary; 

ave,maximum, total : float; 
i,no_rec,rec : positive; 

joe : file_type; 

begin — main 
i:«l; 

put_line(" People from file:"); 

put_line("-"); 

open(joe,in_file,"student.dat"); 
while not end_of_file(joe) loop 
get(joe,name(i)); 
get(joe,weight(i)); 
get(joe,job(i)); 

9®t(joe,status(i)); 
skip__line( joe); 
put(name(i)); put(" "); 

put(status(i), 12 ); 
put(job(i),17); 
put(weight(i),5,0,0) ; 
new_line; 
no rec:>i; 
i:«i+l; 
end loop; 
close(joe); 

— Calculate the Average weight 

total :■ 0.0; 

for i in l..no_rec loop 

total :» total + weight(i); 
end loop; 

ave total/float(no_rec); 







— Print the average waight 

put (*— Tha avaraga vaight is •); 

put(ava , 7 , 2 , 0 ); naw_lina(2); 

— Find tha Maxiaui froa list 
aaxiaua vaight(1); 

rac:«l; 

for i in 2..no_rac loop 

if vaight(i) > aaxiaua than 
aaxiaua vaight(i); 
rac i; 
and if; 
and loop; 

— Print our a list of naaas and vaights 
for i in 1..no rac loop 
put(naaaTi)); 

put(vaight(i),7,0,0);nav_lina; 
and loop; nav_lina; 

— Print out tha aaxiaua veighc & naae 
put("... Tha aaxiaua vaight is "); 
put(aaxiaua,7,0,0); nev_line; 
put("... It belongs to ¥ ); 
put(name(rec)); nev_line; 
and main; 


DATA FILE : STUDENT.DAT 


Louis_152.0 Actor Sanior 

Lucinda_162.0 Pilot Sophoaora 

Alfred_125.0 Opera_singer Freshman 

Forester217.0 Polo_Player Frashaen 
Mar y 172.0 La%ryer Junior 

Tyron_115.0 Hotel_Executiva Junior 

Tod d 105.0 Navy_Captain sophoaora 


— 

EXECUTION OF 

MAIN.ADA 


People froa file: 

Louis 

SENIOR 

ACTOR 

152.0 

Lucinda 

SOPHOMORE 

PILOT 

162.0 

Alfred 

FRESHMEN 

OPERA SINGER 

125.0 

Forester 

FRESHMEN 

POLO PLAYER 

217.0 

Mary 

JUNIOR 

LAWYER 

172.0 

Tyron 

JUNIOR 

HOTEL EXECUTIVE 

115.0 

Todd 

SOPHOMORE 

NAVY CAPTAIN 

105.0 

—- The average vaight is 149.71 


Louis 

152.0 



Lucinda' 

162.0 



Alfred “ 

125.0 



Forester 

217.0 



Mary 

172.0 



Tyron 

115.0 



Todd ~ 

105.0 




. Tha aaxiaua vaight is 
. Zt belongs to Forester 


217.0 













DATA FILE : IN.DAT 


lOlRoss actor 99.9 34.6 

102Van opera_singer 65.6 89.43 

103Lynn lawyer 56.1 89.43 

HOSuean stunt nan 56.45 100.0 


FILE : MAIN3.ADA 

This is an example of a main procedure that invokes 
several procedures and functions. It also uses array 
types, subtypes and enumerated types, reading data 
from a data file. S. Honda 10/9/93 


with text_io; use text_io; 
procedure main3 is 

— declaration of enumeration type status_type 

type stat_type is (actor,lawyer,opera_singer,stunt_man); 

— generic instantiations for I/O 

package stat_io is new enumeration_io(stat_type); 
package n_io is new integer_io(natural); 
package f io is new float_io(float); 
use stat_To, n_io, f_io; 

— declaration of constant max 
max : constant natural :® 300; 

— declaration of array types 

type id_ary is array(l..max) of natural; 
type name_ary is array(1..max) of string(1..5); 
type status_ary is array (. 1 . .max) of stat_type; 
type grade_ary is array(1..max) of float7 

— variable declarations 

name : name_ary; 

id : id_ary; 

status : status_ary; 
art,math : grade_ary; 
n : natural; 




\- • 


✓ 






procedure getdata(id: out id_ary;name: out name_ary; status : 
out status_ary; art,math : out grade_ary; n:out natural) is 
ssm : file_type; 
i : natural :* 0; 
begin — getdata 

open(sam,in_file,"in.dat"); 
while not end_of_file(sam) loop 
i:*i+l; 

get(sam,id(i)); 
get(sam,name(i)); 
get(sam,status(i)); 
get(sam,art(i)); 
get(sam,math(i)); 
end loop; 
n:«i; 

close(sam); 

put_line("closing file., 
end getdata; 




procedure printlist(name:in name_ary;n:in natural; 

grade:in grade_ary;status:in status_ary;i<i:in id_ary) is 
begin —printlist 
put_line(" 


GRADE LISTING "); 














put_lina("ID Name Grad* Status"); 

put~lina("------") ; 

for j in 1.. n loop 

put(id(j),width->3);put(" ");put(name(j)); 
put(grade(j),6,1,0);put(" "); 
put(status(j),vidth«>8);new_line; 
end loop; 
nev_line(2); 
end printlist; 


function calc_avg<grade:in grade_ary;n:in natural) return float is 
temp T float :* 0.0; 
begin — calc_avg 

for i in l..n loop 

temp :* temp + grade(i); 
end loop; 

temp :■ temp/float(n); 
return temp; 
end calc_avg; 


begin — main3 

getdata(id,name,status,art,math,n); 
put_line(" Art Grades"); 

printlist(name,n,art,status,id); 
put_line(" Math Grades"); 

printlist(name,n,math,status,id); 
put("Average art score is "); 
put(calc_avg(art,n),5,2,0);new_line; 
put("Average math score is "); 
put(calc_avg(math,n),5,2,0);new_line; 
end main3; 


EXECUTION RUN OF MAIN3.ADA 


closing file.... 

Art Grades 
GRADE LISTING 
ID Name Grade Status 


101 Ross 99 .V ACTOR 

102 Van 65.6 OPERA SINGER 

103 Lynn 56.1 LAWYER 

110 Susan 56.5 STUNT MAN 


Math Grades 
GRADE LISTING 
ID Name Grade Status 


101 Ross 34.6 ACTOR 

102 Van 89.4 OPERA SINGER 

103 Lynn 89.4 LAWYER 

110 Susan 100.0 STUNT MAN 


Average art score is 69.51 
Average math score is 78.37 


— invoke getdata 

— invoke printlist 

— invoke printlist 

— invoke calc_avg 
— invoke calcavg 














FILE : MAIN4.ADA 


with text_io; use text_io; 
procedure main! is 

typs number_ary is array(1..100) of intsger; 
numbers : number_ary; 
choice : character; 
norec : positive; 

package iio is new integer_io(integer);use iio; 


procedure menu(choice:in out character) is 
begin — menu 
new_line; 

put (" (I) 

put line(" (S) 

put (" (M) 

put_line(" (L) 

put_line(" 
new_line; 

put("Which of the following do you wish to do?"); 
get(choice);put(choice);new_line; 
end menu; 


Input values "); 

Sort values"); 

Find the Minimum"); 

List Values"); 

(Q) Quit this program"); 


procedure Input(numbers: in out number_ary; no_rec: out positive) is 
i:positive:«1; 
begin —Input 

put("Enter integers => "); 
get(numbers(i));new_line; 
while numbers(i) /* -999 loop 
i:« i+1; 

get(numbers(i)); 
end loop; 
no_rec:*i-l; 
end Input; 


procedure sort(numbers: in out number_ary; no_rec: in positive) is 
begin — sort 

put_line("...in development"); 
end sort; 


function minimum(numbers: in number_ary; no rec: in positive) 

return positive is 

— local declaration 
min : positive:-!; 
begin --minimum 

put_line("... in development"); 
return min; 
end minimum; 


procedure PrintList(numbers:in number_ary; no rec: in positive) is 
begin — PrintList 

put_line(" List of values"); 

put~line("-"); 

for i in l..no__rec loop 

put(numbers(i));new_line; 
end loop; 
end PrintList; 


begin — Mair^ft 











loop 

Menu(choice); 
case choice is 

when 'I' 'i' 

when 'S' 's' 

when 'M' 'm' 

when 'L' '1' 

when 'Q' 'q' 

when others 

end case; 
end loop; 
end main4; 


EXECUTION RUN OF MAIN4.ADA 


(I) Input values (S) Sort values 

(M) Find the Minimum (L) List Values 

(Q) Quit this program 

Which of the following do you wish to do? i 
Enter integers => 

(I) Input values (S) Sort values 

(M) Find the Minimum (L) List Values 

(Q) Quit this program 

Which of the following do you wish to do? s 
. .in development 

(I) Input values (S) Sort values 

(M) Find the Minimum (L) List Values 

(Q) Quit this program 

Which of the following do you wish to do? 1 
List of values 


34 

-4 

0 

100 

(I) Input values (S) Sort values 

(M) Find the Minimum (L) List Values 

(Q) Quit this program 

Which of the following do you wish to do? n 
... wrong choice dummy1 

(I) Input values (S) Sort values 

(M) Find the Minimum (L) List Values 

(Q) Quit this program 

Which of the following do you wish to do? q 
.... Goodbye! 


— Invoke Subprogram MENU 

»> Input(Numbers,no_rec); 

*> Sort(Numbers,no_rec); 

=> put(minimum(Numbers,no_rec)); 
*> PrintList(Numbers,no_rec); 

■> put_line(".... Goodbye!"); 

exit; — exit loop 
*> put( w ... wrong choice dummy!") 
new line; 








CS050 

Handout Set #8 







Handout #8 


Functions and procedures may be written as separate units, compiled, 
and used again and again by other subprograms. The following are 
examples of external subprograms that are called by another programs. 
Note context clause with that makes packages or subprograms visible. 
Use can only be used by packages. 

Note two-dimensional array airline flight problem and is associated Ada 
program that uses logical two-dimensional variables. 









FILE : MAIM.ADA 

This is an example of an external subprogram that is called by 
another program called MAIN. 


procedure swap(a,b:in out integer) is 

— declaration of local variables 
temp : integer; 
begin — swap 

temp :* a; — assigns a to temp 

a :» b; — assigns b tc a 

b :* temp; — assigns temp to b 

end swap; 


FILE : SWAP.ADA 

— This is an example of using an external subprogram procedure 

— called SWAP that exits on secondary storage. 

with swap,text_io; — make procedure swap and package text_io available 
use text_io; — Note you can only USE packages! 

procedure main is 

x,y : integer; 

package iio is new integer_io(integer); 
use iio; 
begin — main 

— prompt user for 2 integers 
put_line("Enter an integer for x **> "}; 
get(x);new_line; 

put_line("Enter another integer for y*-> M ); 
get(y);new_line; 

— invoke procedure swap 
swap(x,y); 

put(**Value of x is **> ") ;put(x) ;new_line; 
put("Value of y is ==> ");put(y);new_line; 
end main; 

COMPILATION OF MAIN AND SWAP, AND EXECUTION RUN 


sacredheart.shu>-ada swap.ada main.ada 
sacredheart.shu> aid -o main.exe main 
sacredheart.shu> main.exe 

Enter an integer for x ■*> -105 
Enter another integer for y ««> 200 
Value of x is *»> 200 

Value of y is -»> -105 









with text io; use text io; 
procedure“sqrt is 
xifloat; 

package fltio is new float io(float); 
use fltio; 


function sqr(z:in float) return float is 
root i float t m x/2 .0; 
begin — sqr 

while abs(x-root*root) > 2.0 * z * 0.000007 loop 
root:*(root + z/root)/2.0; 
end loop; 
return root; 

end sqr; 


begin — sqrt 

put("enter number to find the sqrt of M ); 
get(x);put(z,5,6,0);new_line; 
put("The Square Root is H ); 
put(sqr(x),5,e,0);new_line? 
end sqrt; 


EXECUTION RUN OP A.OUT 


SHU> a.out 

enter number to find the sqrt of 

The Square Root is 2.000000 


4.0 


SHU> a.out 

enter number to find the sqrt of 26.459999 
The Square Root is 5.143949 


SHU> a.out 

enter number to find the sqrt of 145.678894 
The Square Root is 12.069752 

SHU> a.out 

enter number to find the sqrt of 1044.0 
The Square Root is 12.000000 











This is an sxtsmal function callsd FILE : SQR.ADA 
It was created as a separate file and compiled. 


function sqr(x :in float) return float is 
root:float :»x/2.0; 
begin — sqr 

while abs(x-root*root) > 2.0 * x * 0.000007 loop 
root :■ (root + x/root)/2.0; 
end loop; 
return root; 

end sqr; 


COMPILATION OF EXTERNAL FUNCTION 


shu.sacredheart.edu> ada sqr.ada 


This is a main program that makes the function SQR.ADA 
available with the context clause WITH. (Note you can 
only USE packages.) 


with textio,sqr;use text_io; 
procedure mainsqr is 
x: float; 

package fltio is new float_io(float); 
use fltio; 
begin — mainsqr 

put("enter number to find the sqrt of 
get(x);put(x,5,6,0);new_line; 
put("The square root is "); 
put(sqr(x),5,2,0);new_line; 
end mainsqr; 




COMPILATION AND LINKING OF MAIN PROGRAM. 


shu.sacredheart.edu> mainsqr.ada — compiles mainsqr 

shu.sacredheart.edu> aid -o mainsqr.exe mainsqr — links mainsqr 


EXECUTION RUNS OF PROGRAM MAIINSQR.ADA 


shu.sacredheart.edu>mainsqr.exe 

enter number to find the sqrt of 12.540000 

The square root is 3.54 


shu.sacredheart.edu>mainsqr.exe 
enter number to find the sqrt of 
The square root is 2.00 


4.000000 



















10 An Airline (lies between in cities Whethv cr not there is a direct (light from 
one city to another is indicated m the following table: 


; 


To 

3 4 


From 


2 

3 

4 

5 

6 


T 

F 

F 

F 

F 


F 

F 

T 

T 

T 


T 

F 

F 

F 

F 


F 

T 

F 

T 

F 


F 

F 

T 

F 

T 


T 

F 

F 

F 

F 


On the left and across the top are the numbers o t the cities If there is a T at 
the intersection of a row and column, these is a direct flight from the city 
marked on the left to the city indicated at the top An F indicates that there is 
no direct flight between the two cities 

The information for this table is r e c o r de d in the first six records of a file 
Recorded in each record is the data for eae row of the table Following the ta¬ 
ble date is one record for each customer with the customer's number and his or 
her request for a flight pattern The flight porters indicates the cities between 
which the customer wishes to fly For aaaaple, a pattern of 13426 indicates 
that the customer wiahee to fly from city 1 to city 3, then from city 3 to city 4. 

then to city 2, and finally to city 6. The maiimum number of atiee in a flight 
pattern is five. If the customer has fewer than five cities in hie or her pattern, 
the remaining numbers are aero. Thus a pattern of 62000 i n d i ca tes that the 
customer wishes to fly from city 6 to city 2 and does not wish to continue be¬ 
yond that. 

Write an A<4tu . program to read the data for the flight table. Print the 
table with appropriate headings. Then determine if each customer’s r e qu ested 
flight pattern is possible. Print the customer’s number, hi* or her requested 
flight pattern, and a statement of whether or not a ticktt may be issued for th 
desired pattern. 

To test the program use the data in the previous flight table and the follow¬ 
ing customer date: 


Customer number 

Flight pattern 

10123 

13436 

11305 

^3000 

13427 

42TW 

18211 

52500 

10006 

34212 

20831 

66426 

21475 

jBOQO 

22136 

43621 

24105 

13424 

24216 

66231 

25009 

34250 





DATA PILE CUST.DAT 


10123 13423 
13427 42320 
11305 52000 
18211 52000 
12342 62000 


DATA FILE TABLE.DAT 


FALSE TRUE TRUE FALSE FALSE TRUE 
TRUE FALSE TRUE FALSE FALSE TRUE 
FALSE FALSE FALSE TRUE FALSE FALSE 
FALSE TRUE FALSE FALSE TRUE FALSE 
FALSE TRUE FALSE TRUE FALSE FALSE 
FALSE TRUE FALSE FALSE TRUE FALSE 


This Main procedure called ARRAYS.ADA uses 2 two-dimensional 
arrays. It reads data from two sequential files, a CUST.DAT 
file and a TABLE.DAT file to determine if a ticket should be 
issued, depending on whether or not the flight pattern is 
available. S. Honda 11/92 


with text_io; use text_io; 
procedure arrays is 

— declaration of types 

type arytype is array(1..6,1..6) of boolean; 
type custary is array(1..50) of natural; 
type fltpat is array(1..50,1..5) of natural; 

— instantiation of generic packages 
package iio is new integer_io(natural); 
package boolio is new enumeration_io(boolean); 
use iio, boolio; 

— declaration of variables 

cust : custary; 

table : arytype; 

fit —: fltpat; 

no_of_re<r : positive; 


— This procedure reads data from 2 files 

procedure read(cust : out custary; fit : out fltpat; 

table : out arytype; no_of_rec : out positive) is 
— local declarations 


joe i file_type; 
i,j : positives-1; 
begin — read 

open(joe,in_file,"Cust.dat"); 
while not end_of_file(joe) loop 
get(joeTcust(i)); 
for j in 1.. 5 loop 

get(joe,flt(i,j)); 
end loop; 
i:-i+l; 
end loop; 
no__of_rec: -i-1; 
closeTjoe); 

open(joe,in_flie,"table.dat M ); 
for r in 1.76 loop 


— get data from 

— file "CUST.DAT" 

— store cust id in 

— array CUST(i) and 

— flight pattern in 

— array FLT(i,j) 


— get data from 

— file "TABLE.DAT" 











for c in 1.. 6 loop — and stora data i 

get(joe,table(r,c)); — array TABLE(r,c) 

and loop; 
and loop; 
closa(joa); 
and raad; 


— This procedure prints out data raad from file 
procedure print(cust: in custary; fit:in fltpat; 

table:in arytype; no_of_rec:in positive) is 
begin — print 
nev_line; 

put”line("Custoner Flight"); 

put“line(" Humber Pattern"); 

put“line("_"); 

for“i in 1..no_of_rec loop 

put(cust(i));put(" "); 

for j in 1..5 loop 

put(fit(i,j),width»>l); 
end loop; 
new_line; 
end loop; 
new_line(2); 

put_line(" Flight pattern between 6 cities") 

put line(" TO"); 

putT" "); 

for i in 1..6 loop 
put (i); 
end loop; 

new_line; put(" "); 

put~line("-") 

for i in 1.. 6 loop 
if i*4 then 

put ("FROM "); 

else 

put(" "); 

end if; 

put(i);put(" "); 

— for j in 1..6 loop 

— put(table(i,j));put(' ')? 

end loop; 

new_line; 
end loop; 
end print; 


— This procedure prints out customer requests and ticket message 
procedure request(cust: in custary; fit: in fltpat; 

table:in arytype; no_of__rec: in positive) is 
possible:boolean; 
k:integer; 
begin — request 
nev_line(2); 

put7"Cust ID Flight Pattern"); 
put_l ine(" Message"); 

put~line("--- 

for i in 1..no_of_rec loop 

put(custli)7;put(" "); 

possible:-true; 
for j in 1.. 5 loop 

put(flt(i,j),3>; 










•nd loop; 
put<" "); 

k:«l; — determine if flight is possibl 

while (k<5) loop 

if flt(i,k+l)/-0 then 

if not table(fIt(i,k),flt(i,k+l)) then 
possible:*false; 
end if; 
end if; 
k:»k+l; 
end loop; 
if possible then 

put_line(" issue ticket"); 

else 

put_line(" ** no ticket ***); 
end if; 
end loop; 
end request; 


begin — arrays 

read(cust,fit,table,no_of_rec); 
print(cust,fit,table,no_of_rec); 
request(cust,fit,table,no_of_rec); 
end arrays; 


RUN OF ARRAYS 

Customer 

Number 

Flight 

Pattern 

10123 

13423 

13427 

42320 

11305 

52000 

18211 

52000 

12342 

62000 


Flight.pattern between 6 cities 
— TO 

1 2 3 4 5 6 


FROM 


1 FALSE TRUE TRUE FALSE FALSE TRUE 

2 TRUE FALSE TRUE FALSE FALSE TRUE 

3 FALSE FALSE FALSE TRUE FALSE FALSE 

4 FALSE TRUE FALSE FALSE TRUE FALSE 

5 FALSE TRUE FALSE TRUE FALSE FALSE 

6 FALSE TRUE FALSE FALSE TRUE FALSE 


Oust ID Flight Pattern Message 


10123 1 3 4 2 

13427 4 2 3 2 

11305 5 2 0 0 

18211 5 2 0 0 

12342 6 2 0 0 


3 issue ticket 

0 ** no ticket ** 

0 issue ticket 

0 issue ticket 

0 issue ticket 










Appendix C 


CS051 

Handouts 









Notes for Teaching CS051 


For all data structures, 

1. Introduce concept of data structure, for example, Stacks. 
Give examples how stacks are implemented 

• cafeteria trays 

• pile of books 

2. Do drawings on board 

3. Show development of pseudo code for activities performed 

with datatype. For example for Stacks, 

• clearstack 

• emptystack 

• fullstack 

• push 

• pop 

4. Explain ATD of this particular data type. 

• package code 

• generic package code 

5. Software Engineering Principles 

• Information Hiding 

• Reuse 

• Abstraction 

• Modularity 

• Localization 

• Uniformity 

• Completeness 

• Confirmability 

6. Ada's language features that aid in the implementation of 

software engineering principles. 

• package specification & body 

• subprograms 

• limited & private types 

• generics 





CS051 
Handout #1 

Refer to old program examples and notes covering arrays from CS050 





—ADA PROGRAM TO INPUT AN ARRAY OF 5 VALUES AND SORT THEM. 

D. PINTO ....SPRING 93 CS 051 

with text io; use text_io; 

procedure bubsort is 

package iio is new integer_io(integer); 
use iio; 

type arytype is array(1..5) of integer; 
list,slist : arytype; 
no_rec s integer; 

procedure getdata(no : out integer; alist : out arytype) is 
n:integer; 
begin — getdata 

put_line("ENTER 5 INTEGERS"); 
for i in 1..5 loop 
get(n); 

alist(i) :■ n; 
end loop; 
no :■ 5; 

end getdata; 

procedure sort(alist : in out arytype;no : in integer) is 
temp : integer; 
done : boolean; 
begin — sort 
done :« false; 

while not done loop 
done :“true; 

for j in 1 ..no - 1 loop 

if alist(j) > alist(j+l) then 
temp :« alist(j+l); 
alist(j+l) :■ alist(j); 
alist(j) :■ temp; 
done :* false; 
end if; 
end loop; 
end loop; 

end sort; 

begin—bubsort 

getdata(no_rec,list); 
put_linej£" unsorted list"); 

for j in l..no rec loop 
put(list(J),5); 
new_line; 
end loop; 
slist s- list; 
sort(slist,no_rec); 
put_line(" sorted list"); 
for j in 1..no rec loop 
put(slist(J),5); 
new_line; 
end loop; 
new_line; 

end bubsort; 







program t absort(input,output); 

type arytype » array[1..5] of integer; 

var a,b : arytype; 

i , ] : integer; 

I*********************************************************************) 

procedure getdata(var p : integer; var ary : arytype); 

var n ; integer; 

begin 

writeln(' enter 5 integers'); 

for i :■ 1 to 5 do 

begin 

readln(n); 
ary[i] :« n; 

end; 
p :« 5; 

end; 

I*********************************************************************) 

procedure sort(var aa: arytype; var i : integer); 
var j,temp : integer; 

done : boolean; 
begin 

done :* false; 
while not done do 
begin 

done :■ true; 
for j:» 1 to i-1 do 
begin 

if aa[j] > aa[j+l] then 
begin 

temp :* aa[j+lj; 
aa[j+l] aa[jj; 
aa[jj temp; 

done false; 

end; 

end; 

end; 

end; 

(a***************************************************************) 

begin 

getdata(i,a); 
for j :■ 1 to i do 
write(a[j] :5); 
writeln; 

for j ;■ 1 to i do 
b[j] atj]; 
sort(b , i); 
for j :■ 1 to i do 
write(b[j] :5); 


end 



1 


CS051 
Handout #2 







Stack Exercises 


Show what is written by the following segments of code, given that Stack is a stack 
of integer elements and X. Y, and 2 are integer variables. 


1. ClearStack(Stack) ; 

X := 1; 

Y : = 0 
Z : = 4; 

PushiStack, Y); 

PushiStack, X); 

Push(Stack, X + Z); 

Pop(Stack, Y); 

PushiStack, SQR(Z)} 

Push(Stack, Y); 

Push(Stack, 3); 

PopIStack, X); 

Writeln('X = ', X); 

Writeln('Y = ', Y); 

Writeln('Z = ', Z); 

WHILE NOT EmptyStack(Stack) DO 
BEGIN 

PopIStack, X); 
Writeln(X) 

END 

2. ClearStack(Stack); 

X := 4; 

Y : = 0; 

Z := X + 1; 

PushiStack, Y); 

PushiStack, Y+1); 

PushiStack, X); 

PopIStack, Y); 

X :* Y + 1; 

PushiStack, X); 

PushiStack, Z); 

WHILE NOT EmptyStack(Stack) DO 
BEGIN 

PopIStack, Z); 
Writeln(Z); 

END; 

Writelnl'X = ',X); 

Writelnl'Y = ',Y|; 

Writelnl'Z = ' ,Z) 




with text_io; use text_io; 
procedure”stackmain is” 

maxstack : constant intagsr 100; 
subtyps elementtype is character range ' • ..'z'; 
type arytype is array(1..maxstack) of elementtype; 
type stacktype is record 
elements : arytype; 

top : integer range 0..maxstack; 

end record; 

ch : character; s : stacktype; 


procedure clearstack(stack : out stacktype) is 
begin — clearstack 
stack.top :■ 0; 
end clearstack; 


function fullstack(stack :in stacktype) return boolean is 
begin — fullstack 

if stack.top * maxstack then 
return true; 

else 

return false; 

end if; 

end fullstack; 


function emptystack(stack:in stacktype) return boolean is 
begin — smptystack 

if stack.top ■ 0 then 
return true; 

else 

return false; 
end if; 

end emptystack; 


procedure push(stack:in out stacktype; newelement:in elementtype) is 
begin — push 

stack.top stack.top + 1; 
stack.elements(stack.top) newelement; 

end push; 

procedure pop(stack:in out stacktype; poppedelement:in out 

elementtype) is 
begin — pop 

poppedelement :■ stack.elements(stack.top); 
stack.top :« stack.top - 1; 
end pop; 


begin -- stackmain 
clearstack(s); 

put_line("Enter Characters for stack.enter 'q' for quit"); 

new”line; 

getjch);put(ch); 

while (ch /■ f q r ) and not fullstack(s) loop 
push(s,ch); 
get(ch);put(ch); 
end loop; 
new_line; 

if fullstack(s) then 

put_line("Stack full"); 

end if; 






while not amptystack(s) loop 
pop(s,ch); 
put(ch); 

•nd loop; 
nev_line; 
end stackmain; - 


SHU> ada stackmain.ada — COMPILES SOURCE CODE 

SHU> aid stackmain — LINKS OBJECT CODE 

SHU> a.out — EXECUTES EXECUTABLE CODE 

Enter Characters for stack.enter 'q' for quit 

adnoH ydnaSq 
Sandy Honda 


SHU> a.out — EXECUTES EXECUTABLE CODE 

Enter Characters for stack.enter 'q' for quit 

NOW IS THE TIME FOR ALL GOOD MEN TO COME TO THE AID OF THE WONDERFUL BEAUTIFUL 
Stack full 

RPU GNITICXE SUOIROLG LUFITUAEB LUFREDNOW EHT FO DIA EHT OT EMOC OT NEM DOOG LI 








— FILE : STACKPKG.ADA ( Package Specification ) 


1/93 S. Honda 


package stackpkg is 

maxstack : constant integer :- 15; 

subtype elementtype is integer range integer'first..integer'last; 
type arytype is array(1..maxstack) of elementtype; 
subtype toptype is integer range 0..maxstack; 
type stacktype is record 
elements : arytype; 
top : toptype; 

end record; 

procedure clearstack(stack:out stacktype); 
function fullstack(stack: in stacktype) return boolean; 
function emptystack(stack:in stacktype) return boolean; 
procedure push(stack:in out stacktype;newelement:in elementtype), 
procedure pop(stack:in out stacktype; 

poppedelement:in out elementtype); 

end stackpkg; 


STACKBPK.ADA 


with text_io; use text io; 
package body stackpkg Is 


( Package Body ) 1/93 S. Honda 


procedure clearstack(stack:out stacktype) is 
begin — clearstack 

stack.top := 0; 
end clearstack; 


function fullstack(stack: in stacktype) return boolean is 
begin — fullstack 

if stack.top = maxstack then 
return true; 

else 

return false; 
end if; 

end fullstack; 


function emptystack(stack:in stacktype) return boolean is 
begin — emptystack 

if stack.top * 0 then 
return true; 

else 

return false; 
end if; 

end emptystack; 


procedure push(stack:in out stacktype;newelement:in elementtype) 
begin — push 

stack.top :■ stack.top +1; 
stack.elements(stack.top) :* newelement; 
end push; 


procedure pop(stack:in out stacktype; 

poppedelement:in out elementtype) is 

begin — pop 

poppedelement :* stack.elements(stack.top); 
stack.top :■ stack.top - 1; 
end pop; 




















1/93 S. Honda 


FILE : STKMAIN.ADA ( Project 2 ) 


with stackpkg, text_io; use stackpkg, text_io; 
procedure stkmain is 

package iio is new integer_io(integer); 
use iio; 

s : stacktype; 
numb : integer; 
begin — stkmain 

clearstack(s); 
for i in 1..100 loop 

put("Enter integer(");put(i);put(") M ); 
put(" (0 to quit) -> "); 
get(numb);put(numb);new_line; 
if numb * 0 then 
exit; 

elsif (numb > 0) and not fullstack(s) then 
push(s,numb); 

put("... ");put(numb);put_line(" pushed onto stack”); 
elsif (numb < 0) and not emptystack(s) then 
pop(s,numb); 

put("... ");put(numb);put_line(" popped from stack”); 
elsif (numb > 0) and fullstack(s) then 

put("... Stack Full cannot push"); 
put(numb);put_line(" onto stack"); 
elsif (numb < 0) and emptystack(s) then 
put("... Stack Empty cannot pop"); 
put_line(" number from stack"); 
end if; 
end loop; 
new_line; 

put_line("Values from stack are "); 
while not emptystack(s) loop 
pop(s,numb); 

put(numb);put_line(" popped "); 
end loop; 

putZline(" End of Job!"); 
end stkmain; 


EXECUTION RUN OF STKMAIN.ADA 


Enter integer( 1) (0 to quit) => 1 

... 1 pushed onto stack 

Enter integer( 2) (0 to quit) ■> 2 

... 2 pushed onto stack 

Enter integer( 3) (0 to quit) »> -22 

... 2 popped from stack 

Enter integer( 4) (0 to quit) => -ll 

... 1 popped from stack 

Enter integer( 5) (0 to quit) «> -10 

... Stack Empty cannot pop number from stack 

Enter integer( 6) (0 to quit) »> 1 

... 1 pushed onto stack 

Enter integer( 7) (0 to quit) => 2 

... 2 pushed onto stack 

Enter integer( 8) (0 to quit) => 3 

... 3 pushed onto stack 











Enter 

integer( 

9) 

(0 to quit) 

■> 

4 

• • • 

4 pushed 

onto 

stack 



Enter 

integer( 

10) 

(0 to quit) 

■> 

5 

* • • 

5 pushed 

onto 

stack 



Enter 

integer( 

11) 

(0 to quit) 

*> 

6 

• • * 

6 pushed 

onto 

stack 



Enter 

integer( 

12) 

(0 to quit) 

«> 

7 

• • • 

7 pushed 

onto 

stack 



Enter 

integer( 

13) 

(0 to quit) 

■> 

8 

• • • 

8 pushed 

onto 

stack 



Enter 

integer( 

14) 

(0 to quit) 

*> 

9 

• • • 

9 pushed 

onto 

stack 



Enter 

integer( 

15) 

(0 to quit) 

«> 

10 

• • • 

10 pushed 

onto 

stack 



Enter 

integer( 

16) 

(0 to quit) 

*> 

11 

• • * 

11 pushed 

onto 

stack 



Enter 

integer( 

17) 

(0 to quit) 

*> 

12 

• • • 

12 pushed 

onto 

stack 



Enter 

integer( 

18) 

(0 to quit) 

«*> 

13 

• • • 

13 pushed 

onto 

stack 



Enter 

integer( 

19) 

(0 to quit) 

*> 

14 

• • • 

14 pushed 

onto 

stack 



Enter 

integer( 

20) 

(0 to quit) 

=> 

15 

• • • 

15 pushed 

onto 

stack 



Enter 

integer( 

21) 

(0 to quit) 

*> 

16 

... Stack Full cannot push 16 onto 

stack 

Enter 

integer( 

22) 

(0 to quit) 

»> 

-15 

• • • 

15 popped 

from 

stack 



Enter integer( 

23) 

(0 to quit) 

=> 

-14 

• • • 

14 popped 

from 

stack 



Enter integer( 

24) 

(0 to quit) 

=> 

0 

Values 

from stack 

are 





13 popped 
12 popped 
11 popped 
10 popped 
9 popped 
8 popped 
7 popped 
6 popped 
5 popped 
4 popped 
3 popped 
2 popped 
1 popped 
End of Job! 






CS051 
Handout #3 








FILE - QUEPKG.ADA 

This is ths package spscification that will allow one to 
implement a qua with integers. 


package quepkg is 

subtype maxqueuetype is positive range 1..1000; 
naxqueue : naxqueuetype 25; 

subtype elementtype is integer range -30000..30000; 
type elementary is array(1..maxqueue) of elenenttype; 
type queuetype is 
record 

elements : elementary; 
front,rear : (0..maxqueue); 
end record; 

procedure clearqueue(queue : in out queuetype); 
function fullqueue(queue : in queuetype) return boolean; 
function emptyqueue(queue : in queuetype) return boolean; 
procedure insert(queue : in out queuetype; 

newelement: in elementtype); 
procedure delete(queue : in out queuetype; 

element : in out elementtype); 

end quepkg; 


FILE QUEPKGB.ADA 

This is the package body for the package QUEPKG 


package body quepkg is 


procedure clearqueue(queue : in out queuetype) is 
begin — clearqueue 

queue.front :* maxqueue; 
queue.rear :* maxqueue; 
end clearqueue; 


function fullqueue(queue : in queuetype) return boolean is 
querear : 1..maxqueue; 
begin — fullqueue 

if queue.rear * maxqueue then 
— querear :* 1; 

else 

querear :» queue.rear + 1; 
end if; 

if querear * queue.front then 
return true; 

else 

return false; 
end if; 

end fullqueue; 

function emptyqueue(queue : in queuetype) return boolean is 
begin — emptyqueue 

if queue.rear * queue.front then 
return true; 

else 

return false; 
end if; 

end emptyqueue; 














procedure delate(queue : in out queuetype; 

element: in out elementtype) is 

begin — insert 

if queue.front - maxqueue then 
queue.front :■ l; 

else 

queue.front :■ queue.front +1; 
end if; 

element :■ queue.elements(queue.front); 
end delete; 


procedure insert(queue : in out queuetype; 

nevelement : in elementtype) is 
querear : elementtype; 
begin — insert 

if queue.rear * maxqueue then 
queue.rear :» l; 

else 

queue.rear :« queue.rear + 1; 
end if; 

queue.elements(queue.rear) :* nevelement; 
end insert; 

end quepkg; 


FILE : QUEMAIN.ADA 

This main procedure will create a queue called q and allow 
— the user to place integer values onto the queue. 

with quepkg,text_io; use quepkg,text_io; 
procedure quemain is 

q : queuetype; 
numb : integer; 

package iio is new integer_io(integer); use iio; 
begin — quemain 

clearqueue(q); 

put("Enter data to put into the queue "); 
get (numb);put (numb) ;new__line; 
while (numb /« 0) and not fullqueue(q) loop 
insert (q,numb); 
get(numb);put(numb);new line; 
end loop; 

if fullqueue(q) then 

put__line("Full Queue! "); 
end if; 

put line("Queue Elements are : "); 
while not emptyqueue(q) loop 
delete(q,numb); 
put(numb);new line; 
end loop; 
end quemain; 


EXECUTION RUN OF QUEMAIN 


Enter data to put into the queue 100 
-50 
0 

Queue Elements are : 

100 

-50 






FILE : QUEUE.ADA 

This sain procedure is an example of implementing a queue. 


with text_io; use text_io; 
procedurenqueue is 

-subtype maxqueuetype is positive range 1 - ftgg 

/maxqueue : maxqueuetype :■ 25; / 

( .subtype elementtype is integer range -30000..30000; 
^type elementary is array ( 1 . .maxqueue) of elementtype; 
type queuetype is 
record 


elements : elementary; , 

front,rear : 44i^ma*q u e u e) 7 v\\4 ) 

end record; ] ’ 

q : queuetype; 
numb : integer; 

package iio is new integer_io(integer); use iio; 


) 


procedure clearqueue(queue : in out queuetype) is 
begin — clearqueue 

queue.front :* maxqueue; 
queue.rear :* maxqueue; 
end clearqueue; 


function fullqueue(queue : in queuetype) return boolean is 
querear : 1 ..maxqueue; 
begin — fullqueue 

if queue.rear * maxqueue then 
querear := 1 ; 

else 

querear :* queue.rear + l; 
end if; 

if querear ■ queue.front then 
return true; 

else 

return false; 
end if; 

end fullqueue; 


function emptyqueue(queue : in queuetype) return boolean is 
begin — emptyqueue 

if queue.rear * queue.front then 
return true; 

else 

return false; 
end if; 

end emptyqueue; 


procedure delete(queue : in out queuetype; 

element: in out elementtype) is 

begin — insert 

if queue.front - maxqueue then 
queue.front l; 

else 

queue.front :■ queue.front + 1 ; 
end if; 

element :■ queue.elements(queue.front); 
end delete; 






procedure insert(queue : in out queuetype; 

newelement : in elementtype) is 
quersar : elementtype; 
begin — insert 

if queue.rear - maxqueue then 
queue.rear :» 1; 

else 

queue.rear :* queue.rear + l; 
end if; 

queue.elements(queue.rear) nevelement; 

end insert; 


begin -- queue 

clearqueue(q); 

put ("Enter data to put into the queue "); 
get(numb);put(numb);new_line; 
while (numb /« 0) and not fullqueue(q) loop 
insert(q,numb); 
get(numb);put(numb);new_line; 
end loop; “* 

if fullqueue(q) then 

put_line("Full Queue! w ); 
end if; 

put_line("Queue Elements are : "); 
while not emptyqueue(q) loop 
delete(q,numb); 
put(numb);new_line; 
end loop; 
end queue; 


EXECUTION RUN OF QUEUE.ADA 


Enter data to put into the queue 5 

-34 
100 
10 
0 

Queue Elements are : 

5 

-34 — 

100 

10 






PILE - GPKG.ADA 

This is ths generic package specification that will 
allow one to implement a queue with elementtype. 


generic 

maxqueue : in positive; 
type elementtype is private; 
package gpkg is 

procedure clearqueug; 

function fullqueue return boolean; 

function emptyqueue return boolean; 

procedure insert (newelement: in elementtype); 

procedure delete (element : in out elementtype); 
end gpkg; 





FILE - GPKGB.ADA 

This is the package body for the package 6PKG. 


package body gpkg is 

subtype maxqueuetype is integer range 1..maxqueue; 
type elementary is array(maxqueuetype) of elementtype; 
front,rear : maxqueuetype; 
queue : elementary; 


procedure clearqueue is 
begin — clearqueue 

front :* maxqueue; 
rear : 3 maxqueue; 
end clearqueue; 


function fullqueue return boolean is 
querear : maxqueuetype; 
begin — fullqueue 

if rear * maxqueue then 
querear := 1; 

else 

querear := rear + 1; 
end if; 

if querear = front then 
return true; 

else 

return false; 
end if; 

end fullqueue; 


function emptyqueue return boolean is 
begin — emptyqueue 

if rear * front then 
return true; 

else 

return false; 
end if; 

end emptyqueue; 


procedure- insert (newelement: in elementtype) is 
begin — insert 

if rear * maxqueue then 
rear :* 1; 

else 

rear :* rear +1; 
end if; 

queue(rear) := newelement; 
end insert; 


procedure delete (element : in out elementtype) is 
begin — delete 

if front - maxqueue then 
front 1; 

else 

front := front + 1; 
end if; 

element :* queue(front); 
end delete; 


end gpkg; 











with text_io,gpkg; use text_io; 
procedure main3 is 

— type declarations 
type rectype is 

record 

itemf:character; 
namef:string(1.. 5); 
end record; 
type employeetype is 
record 

name:string(l..5); 
age :positive; 
smoker:boolean; 
end record; 

— variable declarations 

size : positive :* 7; 

item : rectype; 

employee : employeetype; 

noemp : positive :»5; 

— instantiation of generic packages 
package iio is new integer_io(integer); 
package empqueue is new gpkg(noemp,employeetype); 
package qi is new gpkg(size,rectype); 

package q2 is new gpkg(size,rectype); 
package smokeio is new enumeration^io(boolean); 
use ql,q2,iio,empqueue,smokeio; 

begin —main3 

ql.clearqueue;q2.clearqueue; 
item.itemf :* '*'; 
item.namef := «*****••; 

ql.insert(item); 
item.itemf :« 'S'; 
item.namef :« "Sandy"; 

ql.insert(item); 
item.itemf :* 'S'; 
item.namef "Sally"; 

ql.insert(item); 
item.itemf :» 'H'; 
item.named:«» "Henry"; 

q2.insert(item); 
item.itemf :« 'T'; 
item.namef :- "Tomas"; 

q2.insert(item); 
item.itemf :« 'L'; 
item.namef :« "Larry"; 
q2.insert(item); 
ql.delete(item); 

put("deleted item from ql. It was ");put(item.itemf);new_line 

put(". Name was ") ;put(item.namef) ;new_line; 

item.itemf :■ 'H'; 
item.namef "Moris"; 
ql.insert(item); 
new_line(2); 

while not ql.emptyqueue loop 
ql.delete(item); 
put(item.namef); 
end loop; 
new_llne; 

while not q2.emptyqueue loop 




q2.delete(item); 
put(item.namef); 
end loop; 

empqueue.clearqueue; 

while not empqueue.fullqueue loop 

put("Enter employee name (5 characters only!) ■*> "); 
get(employee.name);put(employee.name);new_line; 
put("Does employee smoke? true or false please **> ");new_line 
get(employee.smoker);put(employee.smoker);new_line; 
put("How old is the employee? ==> "); 
get(employee.age);put(employee.age);new_line; 
insert(employee); 
end loop; 

while not empqueue.emptyqueue loop 
delete(employee); 

put(employee.name);put(employee.age);put(employee.smoker); 
new_line; 
end loopj 

put__line(".... End of Job!!!"); new_line; 
end main3;~ 


EXECUTION RUN OF MAINS 


deleted item from ql. It was * 
. Name was ***** 


SandySallyMoris 

HenryTomasLarryEnter employee name (5 characters only!) ==> Frank 
Does employee smoke? true or false please *»> 

TRUE 

How old is the employee? ==> 39 

Enter employee name (5 characters only!) ==> Carol 

Does employee smoke? true or false please ==> 

FALSE 

How old is the employee? *=> 23 

Enter employee name (5 characters only!) ==> Larry 

Does employee smoke? true or false please ==> 

FALSE 

How old is the employee? ==> 45 

Enter employee name (5 characters only!) ==> Terry 

Does employee smoke? true or false please ==> 

TRUE 

How old is the employee? **=> 35 

Frank 39TRUE 

Carol 23FALSE 

Larry 45FALSE 

Terry 35TRUE 

.... End of Job!1! 








CS051 
Handout #4 







FILE : pts.ada 

This procedure craatas a simple linked list of records. 

S. Honda 3/93 


with text__io; use text_io; 
procedure pts is 
type rec ; 

type ptr is access rec; 
type rec is 
record 

id:character; 
link : ptr; 
end record; 
first,p : ptr; 
begin- 

first :« new rec'('S' , null); 

first.link :* new rec'('A',null); 

first.link.link new rec'('N',null); 

first.link.link.link := new rec'('D',null); 

first.link.link.link.link := new rec'('Y',null>; 

p:-first; 

while p /* null loop 
put(p.id); 
p:-p.link; 
end loop; 
new_line; 
end pts; 


shu.sacredheart.edu 
shu.sacredheart.edu 
shu.sacredheart.edu 


> ada pts.ada 

> aid -o pts.exe pts 

> pts.exe 


SANDY 









PILE t linklist.ada 

This program creates a linked list of 10 numbers. 

March 22, 1993 S. Honda 


with text_io; use text_io; 
procedure linklist is 
type node; 

type ptr is access node; 
type node is 

record 

info : integer; 
next : ptr; 
end record; 

printnode/ firstnode, oldnode, newnode : ptr; 
value,i : integer :■ 0; 

GF’ IC INSTANTIATION 
package i s new integer_io(integer); 
use iio; 


THIS PROCEDURE PROMPTS AND GETS VALUE FROM USER 


procedure getdata(value : in out integer) is 
begin — getdata 

put("Enter value : "); 
get(value);put(value); new_line; 
end getdata; 


begin — linklist 

firstnode :■ new node; 
oldnode :■ firstnode; 

GETDATA(value); 
oldnode.info :» value; 
oldnode.next s» null; 
for i in 2..10 loop 

GETDATA(value); 

newnode new node'(value,null); 
oldnode.next :■ newnode; 
oldnode :* newnode; 

end loop; 

printnode firstnode; 
put("List of Values :");new_line; 
while printnode /» null loop 
put(printnode.info); 
new_line; 

printnode :• printnode.next; 
end loop; 
end linklist; 


COMPILATION, LINKING, AND EXECUTION RUN OF LINKLIST.ADA 


s hu.sacredheart.edu > 
shu.sacredheart.edu> 

shu.sacredheart.edu > 


ada linklist.ada [RETURN] — compiles 

aid -o linklist.exe linklist [RETURN] — links, 

creates executable file 
linklist.exe [RETURN] — run 


Enter value : 53 
Enter value : -2 
Enter value : 10 
Enter value : 2 
Enter value : >5 
Enter value : 3 
Enter value : 0 
Enter value : 1 
Enter value : 6 











Enter value * 7 

List of Values t 
S3 
-2 
10 
2 
-5 
3 
0 
1 
6 
7 





PROCEDURE links.ada 

This program creates a double link list that links all 
records together with link, and links all smokers together 
with smokerlink. It uses a record within a record structure. 
March 1993 S. Honda 


with text_io; use text_io; 
procedure links is 

package iio is new integer_io(integer); 
package smokeio is new enumeration_io(boolean); 
use iio,smokeio; 
type infotype is 
record 

name : string(l..6); 
smoker: boolean; 
age : natural; 
end record; 
type node; 

type ptr is access node; 
type node is 
record 

info : infotype; 

link : ptr; 

smokerlink : ptr; 

end record; 

— variable declartions 
first : ptr; 


procedure getdata(first:in out ptr) is 

joe : fiie_type; 

next,last,nextsk,lastsk : ptr; 

dummy : node := (("dummy ", false,999),null,null); 
info_rec : infotype; 

begin — getdata 
first := new node'(dummy); 
next := first; 
nextsk:=first; 

operv{ joe, in_f ile, "Age.dat"); 
whiTe not end of_file(joe) loop 
get(joe,Info_rec.name); 
get(joe,info_rec.smoker); 
get(joe,info_rec.age); 
last :» next; 

next :* new node'(info_rec,null,null); 

last.link := next; 

if next.info.smoker^true then 

nextsk.smokerlink := next; 
nextsk := next; 

end if; 
end loop; 
close(joe); 
end getdata; 


procedure printlist(first:in out ptr) is 
next : ptr; 
begin — printlist 

put_line(" Linked list of all..."); 

put_line("-"); 

next :=* first, link; 











while next /- null loop 

put(next.info.name); 
put( H "); 

put(next.info.smoker);new_line; 
next := next.link; 
end loop; 
new_line(2); 

put”line(" Linked list of smokers..."); 

put”line("-"); 

next :* first.smokerlink; 
while next /= null loop 

put(next.info.name);put(" "); 
put(next.info.smoker); 
put(next.info.age);nev_line; 
next := next.smokerlink; 
end loop; 

put_line(" end of listing..."); 
end printlist; 


begin — links 

getdata(first); 
printlist(first); 
iiij links; 


DATA FILE : Age.Dat 


Samuel 

false 

41 

Harold 

true 

53 

Edward 

false 

55 

AliceK 

false 

75 

Gerald 

false 

99 

Angela 

true 

48 

George 

false 

40 

DawnB. 

true 

39 

LizzyH 

false 

15 

JaneH. 

true 

51 

Donald 

false 

51 

Andrew 

true 

35 


EXECUTION-RUN OF LINKS.ADA 
Linked list of all... 


Samuel 

FALSE 

Harold 

TRUE 

Edward 

FALSE 

AliceK 

FALSE 

Gerald 

FALSE 

Angela 

TRUE 

George 

FALSE 

DawnB. 

TRUE 

LizzyH 

FALSE 

JaneH. 

TRUE 

Donald 

FALSE 

Andrew 

TRUE 

Linked 

list of smokers 


Harold TRUE 


53 












Angola 

TRUE 

48 

DavnB. 

TRUE 

39 

JanaH. 

TRUE 

51 

Andrav 

TRUE 

35 


and of listing.. 






FILE : LLPKG.ADA package for link lists! 


with text io; use text_io; 
package llpkg is 
type node; 

type ptr is access node; 
type node is 
record 

info : integer; 
next : ptr; 
end record; 

printnode,firstnode : ptr null; 
nevvalue : integer; 

— for integer I/O 

package iio is new integer_io(integer); 

— new procedures 

procedure getdata(nevvalue : in out integer); 
procedure insert(firstnode: in out ptr; 

nevvalue : in integer); 
procedure printlinklist(firstnode : in ptr); 
end llpkg; 


FILE : LLPKGB.ADA Package body of package LLPKG.ADA 


package body llpkg is 
use iio; 

procedure getdata(nevvalue : in out integer) is 
begin — getdata 

put("Enter value : "); 
get(nevvalue);put(nevvalue);nev_line; 
end getdata; 


procedure insert(firstnode: in out ptr; 

nevvalue : in integer) is 
— local declarations 
nextnode, nevnode : ptr; 
found : boolean; 

begin insert 

nevnode :* nev node'(nevvalue,null); 
if firstnode * null then 
firstnode :* nevnode; 
else 

nextnode firstnode; 

— check for special case inserting to front of list 
if nevvalue < nextnode.info then 

— insert before first node 
nevnode.next :* firstnode; 
firstnode := nevnode; 

else 

— find insertion place 
found :« false; 

while (nextnode.next /■ null) and not 
found loop 

if nevvalue >- nextnode.next.info then 
nextnode :- nextnode.next; 
else 

found :* true; 









end if; 
end loop; 


— connect pointers 
newnode.next :» nextnode.next; 
nextnode.next :■ newnode; 
end if; — general case 
end if; — insert into nonempty list 

end insert; 


procedure printlinklist(firstnode : in ptr) is 
printnode : ptr; 
begin — printlinklist 

printnode :« firstnode; 
new_line(2); 

putY N List of Ordered Values : H );new_line; 
while printnode /» null loop 

put(printnode.info,12);nev_line; 
printnode :* printnode.next; 
end loop; 

end printlinklist; 
end llpkg; 


FILE : MAIN.ADA Main procedure that uses the above package 


with llpkg,text io; use llpkg,text_io; 
procedure main Is 
use iio; 
begin — main 

getdata(newvalue); 

while newvalue /- -999 loop 

insert(firstnode,newvalue); 
getdata(newvalue); 
end loop; 

printlinklist(firstnode); 
end main; 


To compile package specification, package body, and the main 
procedure; to link the main procedure; and run main: 


SHU> ada llpkg.ada llpkgb.ada main.ada 
SHU> aid main 
SHU> a. out 


Enter value : 100 
Enter value : 42 
Enter value : 5 
Enter value : -3 
Enter value : 38 
Enter value : 97 
Enter value : -999 


List of Ordered values : 
-3 
5 
38 
42 
97 
100 










FILE : ll.ada 

This program creates an ordered linked list of Names 

4/93 S. Honda 


vith text_io; use text_io; 
procedure 11 is 
type node; 

type ptr is access node; 
type node is record 

info:string(l..5); 
link:ptr; 
end record; 
first : ptr; 


procedure createlist (first:in out ptr) is 
old,next : ptr; 
found : boolean :- false; 
subtype nametype is string(l..5); 
name : nametype; 


procedure getdata(name : out nametype) is 
person : nametype; 
begin — getdata 

put ("Enter Name => '•); 
get(person); put(person); new_line; 
name := person; 
end getdata; 


begin — createlist 
getdata(name); 

first := new node 7 (name,null); 

old := first; 

getdata(name); 

while name /= "xxxxx" loop 

next := new node 7 (name,null); 
if old.link = null then 

— only one node in list 
if old.info > name then 

-- insert in front of head node 
first :* next; 
next.link := old; 

else 

— or insert after head node 
old.link :* next; 
end if; 

else — more than one node in link list 

if (old = first) and (next.info < old.info) 
then 

first :- next; 
next.link :* old; 

else 

found :» false; 

while old.link /» null and not found 
loop 

if old.link.info > next.info then 
found :- true; 
else 

old :* old.link; 
end if; 









end loop; 
if found then 

next.link := old.link; 
old.link := next; 

else 

old.link := next; 
end if; 

end if; 
end if; 
old :» first; 
getdata(name); 
end loop; 
end createlist; 


procedure printlist (first:in ptr) is 
next : ptr; 
begin — printlist 

next :■ first; 

put_line("People in order :"); 

put_line("-" ); 

while next /= null loop 
put(next.info); 
new_line; 

next := next.link; 
end loop; 
end printlist; 


begin — 11 

createlist(first); 
printlist(first); 
end 11; 


EXECUTION RUN OF LL.ADA 


Enter Name «> Larry 
Enter Name *> Eddie 
Enter Name => Sandy 
Enter Name -> Andie 
Enter Name *> Lizzy 
Enter Name -> Janet 
Enter Name »> Allan 
Enter Name «> Candy 
Enter Name «> Gerry 
Enter Name «> xxxxx 
People in order : 


Allan 

Andie 

Candy 

Eddie 

Gerry 

Janet 

Larry 

Lizzy 

Sandy 









PROCEDURE links.ada 

This program creates a double link list that links all 
records together with link, and links all smokers together 
with smokerlink. It uses a record within a record structure. 
March 1993 S. Honda 


with text_io; use text_io; 
procedure links is 

package iio is new integer_io(integer); 
package smokeio is new enumeration_io(boolean); 
use iio,smokeio; 
type infotype is 
record 

name : string(l..6); 
smoker: boolean; 
age : natural; 
end record; 
type node; 

type ptr is access node; 
type node is 
record 

info : infotype; 

link : ptr; 

smokerlink : ptr; 

end record; 

— variable declartions 
first : ptr; 


procedure getdata(first:in out ptr) is 

joe : file_type; 

next,last,nextsk,lastsk : ptr; 

dummy : node := (("dummy ",false,999),null,null); 
info_rec : infotype; 

begin — getdata 
first :=-• new node'(dummy); 
next := first; 

nextsk:= first; lastsk:=first; 
open(joe,in_file,"Age.dat"); 
while not end of_file(joe) loop 
aet(joe,Info_rec.name); 
get(joe,info_rec.smoker); 
get(joe,info_rec.age); 
last :« next; 

next :« new node'(info_rec,null,null); 

last.link :« next; 

if next.info.smoker=true then 

lastsk.smokerlink := next; 
lastsk next; 

end if; 
end loop; 
close(joe); 
end getdata; 


procedure printlist(first:in out ptr) is 
next,last : ptr; 
begin — printlist 

put_line(" Linked list of all..."); 

put_line ("-"); 

next :» first.link; 









while next /- null loop 

put(next.info.name); 
put(« "); 

put(next.info.smoker);new_line; 
next :* next.\ink; 
end loop; 
new_line(2); 

put~line(" Linked list of smokers..."); 

put_line ("-") ; 

next :* first.smokerlink; 
while next /* null loop 

put(next.info.name);put(" "); 
put(next.info.smoker); 
put(next.info.age);new_line; 
next :* next.smokerlink; 
end loop; 

put_line(" end of listing..."); 
end printlist; 


begin — links 

getdata(first); 
printlist(first); 
end links; 


DATA FILE : Age.Dat 


SandyH false 41 
Harold true 53 
Edward false 55 
AliceK false 75 
Grands false 99 
Angela true 48 
George false 40 
DawnB. true 39 
LizzyH false 15 
JaneH. true 51 
Donald false 51 
Andrew true 35 


EXECUTION HUN OF LINKS.ADA 


Linked list of all... 


SandyH FALSE 
Harold TRUE 
Edward FALSE 
AliceK FALSE 
Grands FALSE 
Angela TRUE 
George FALSE 
DawnB. TRUE 
LizzyH FALSE 
JaneH. TRUE 
Donald FALSE 
Andrew TRUE 


Linked list of smokers... 


Harold TRUE 


53 










Angela 

TRUE 

48 

DavnB. 

TRUE 

39 

JaneH. 

TRUE 

51 

Andrew 

TRUE 

35 

end 

of listing. 








CS051 
Handout #5 




Tree Traversal 


This is a non-recursive psedocode for an inorder tree traversal. 

PROCEDURE InOrder (TreeRoot : TreeType); 

(*Print the elements in the binary tree pointed to *) 

(* by TreeRoot in order from Smallest to largest. *) 


VAR 

PtrStack : StackType; 


Ptr : PointerType; 

BEGIN *( InOrder *} 

(* Start out with an empty stack *) 

ClearStack(PtrStack); 

(* Begin at the root of the tree *) 

Ptr : = TreeRoot; 

REPEAT 

(* Process until the whole tree is finished *) 

(* Go to the left as far as possible, pushing pointer *) 

(* to each node as it is passed. Stop when Ptr falls out *) 

(* of the tree. *) 

WHILE Ptr < > NIL DO 
BEGIN 

Push(Ptr Stack, Ptr); {* Push node pointer onto stack *) 
Ptr := Ptr A .Left; (* Keep moving to left # ) 

END; (* while *) 

(* If there is anything left on the stack, pop, print *) 

( # and move to the right # ) 

IF NOT EmptyStack (PrStack) THEN 
BEGIN 

Pop(PtrStack, Ptr); (* Climb back into the tree. *) 
PrintNode(Ptr A .lnfo); {* Print Info part of Node *) 
Ptr : = Ptr A .Right {* Move once to the right. # ) 
END (* If stack is not empty *) 


(* stack of pointers used to *) 
(* keep track of nodes until *) 
(* they are printed *) 

(* used to traverse the tree *) 


UNTIL (Ptr = NIL) and (EmptyStack(PtrStack)) 
END; (* InOrder *) 






This procedure creates a binary tree. The left descendant 
of each node alphabetically precedes its parent and the 
right descendant alphabaetically follows its parents. 

Note the recursive procedural call. Note also that procedures 
are defined in other procedures. S. Honda 4/94 


with text_io; use text_io; 
procedure~trees is 

subtype stg is string(l..6); 
type rec; 

type ptr is access rec; 
type rec is 
record 

info : stg; 
left,right : ptr; 
end record; 
root : ptr; 


procedure TreeCreate (root : in out ptr) is 
parent : ptr; 
name : stg; 
found : boolean; 


procedure Getdata(name : in out stg) is 
begin — Getdata 

put("Enter a name (xx (xxxxxx to quit) ==> "); 
get(name); put(name);new_line; 
end Getdata; 


procedure Attach(name:in stg; parent : in out ptr) is 
begin — Attach 

parent := new rec'(name,null,null); 
end Attach; 


procedure TreeSearch(parent: in out ptr; name: in stg; 

found: in out boolean) is 
begin — TreeSearch 

if parent = null then 
found := false; 

Attach(name,parent); 

else 

if name * parent.info then 
found :* true; 

else 

if name < parent.info then 

TreeSearch(parent.left,name,found); 
else 

TreeSearch(parent.right,name,found) 
end if; 
end if; 
end if; 

end TreeSearch; 


begin — TreeCreate 
Getdata(name); 

— insert first string in the root node 
if name /■* "xxxxxx" then 
Attach(name,root); 


else 










root :■ null; 
end if; 

Getdata(name); 
while name /• "xxxxxx" loop 
parent :» root; 

TreeSearch (parent,name,found); 
if found then 

put(name); put_line( M is already on tree! M ); 
end if; 

Getdata(name); 
end loop; 
end TreeCreate; 


procedure Traverse (root : in ptr) is 

— this does an inorder traversal of a tree 


procedure visit (root : in ptr) is 
begin — visit 

put_line(root.info); 
end visit; 


begin — Traverse 

if root /- null then 

Traverse (root.left); 
visit (root); 

Traverse (root.right); 
end if; 
end Traverse; 


begin — Trees (Main Procedure) 
root :» new rec; 

TreeCreate (root); 

Traverse (root); 
end Trees; 


EXECUTION run of trees.ada 


Enter a name (xxxxxx to quit) 

Enter a name (xxxxxx to quit) 

Enter a name (xxxxxx to c it) 

Enter a name (xxxxxx to q it) 

Enter a name (xxxxxx to quit) 

Enter a name (xxxxxx to quit) 

Enter a name (xxxxxx to quit) 

Enter a name (xxxxxx to quit) 

canary is already on tree! 

Enter a name (xxxxxx to quit) 

canary 

falcon 

oriole 

osprey 

pigeon 

thrush 

turkey 


*==> thrush 
==> canary 
**=> osprey 
*=> turkey 
**> oriole 
==> pigeon 
**> falcon 
==> canary 

==> xxxxxx 


ush 









This package creates a binary tree. 


4/93 


S. Honda 


package trepkg is 

subtype stg is string(1..6); 
type rec; 

type ptr is access rec; 
type rec is 
record 

info : stg; 
left,right : ptr; 
end record; 
root : ptr; 

procedure TreeCreate (root : in out ptr); 
procedure Traverse ( root : in ptr); 
end trepkg; 









This package body creates a binary tree. 4/93 


S. Honda 


with text_io; use text_io; 
package body trepkg is 


procedure TreeCreate (root : in out ptr) is 
parent : ptr; 
name : stg; 
found : boolean; 


procedure Getdata(name : in out stg) is 
begin — Getdata 

put("Enter a name (xxxxxx to quit) ==> "); 
get(name); put(name);new_line; 
end Getdata; 


procedure Attach(name:in stg; parent : in out ptr) is 
begin — Attach 

parent :« new rec'(name,null,null); 
end Attach; 


procedure TreeSearch(parent : in out ptr; name : in stg; 

found : in out boolean) is 
begin — TreeSearch 

if parent = null then 
found false; 

Attach(name,parent); 

else 

if name = parent.info then 
found true; 

else 

if name < parent.info then 

TreeSearch(parent.left,name,found); 
else 

TreeSearch(parent.right,name,found) 
end if; 
end if; 
end if; 

end TreeSearch; 


— insert first string in the root node 
begin — TreeCreate 

GetaaLa(name); 
if name /* "xxxxxx" then 
Attach(name,root); 

else 

root :* null; 
end if; 

Getdata(name); 
while name /- "xxxxxx" loop 
parent :■ root; 

TreeSearch (parent,name,found); 
if found then 

put(name); put_line(" is already on tree! "); 
end if; 

Getdata(name); 
end loop; 
end TreeCreate; 













procedure Traverse (root : in ptr) is 

— this doss an inorder traversal of a ti ee 


procedure visit (node : in ptr) is 
begin — visit 

put_line(node.info); 
end visit; 


begin — Traverse 

if root /= null then 

Traverse (root.left); 
visit (root); 

Traverse (root.right); 
end if; 
end Traverse; 

end trepkg; 


MAIN PROCEDURE tremain.ada S. Honda 4/93 


with trepkg; use trepkg; 
procedure tremain is 
begin — tremain 

TreeCreate (root); 
Traverse (root); 
end tremain; 


EXECUTION run OF tremain.ada 


Enter a name (xxxxxx to quit) ==> osprey 

Enter a name (xxxxxx to quit) *=> falcon 

Enter a name (xxxxxx to quit) *=*> turkey 

Enter a name (xxxxxx to quit) *=> pigeon 

Enter a name (xxxxxx to quit) =*> osprey 

osprey is already on tree! 

Enter a name (xxxxxx to quit) **> oriole 

Enter a name (xxxxxx to quit) *»> canary 

Enter a name (xxxxxx to quit) «*> thrush 

Enter a name (xxxxxx to quit) **> xxxxxx 

canary 

falcon 

oriole 

osprey 

pigeon 

thrush 

turkey 








DELETION OF NODES FROM BINARY TREES 


SAMPLE TREE 


78 


34 

X \ 

22 45 

/ \ / \ 

12 30 38 48 


99 


/ 

87 


\ 

107 


/ 

85 


\ 

110 



TO DELETE A NODE WHICH IS A LEAF (EASY) 
JUST PLUCK IT OFF THE TREE 


EXAMPLE .... DELETE 4 S FROM ABOVE TREE 
NEW TREE 




/\ / 
12 30 38 


78 



/ 

85 


s 

107 


\ 

110 


CASE 2 fo DELETE A NODE WITH ONE CHILD (STILL EASY) 
THE CHILD REPLACES THE PARENT 


EXAMPLE. . . .DELETE THE 87 FROM A3 CVS TREE 


NEW TREE 


34 

/ 

22 


x \ 


\ 

45 


/ 


12 30 38 



X 

107 


\ 

110 


CASE 3 TO DELETE A NODE WITH TWO CHILDREN (NOT SO EASY) 

RIGHT CHILD REPLACES DELETED NODE_ANY LEFT SUBTREE APPENDED 

TO THE LEFT OF RIGHT SUBTREE 


EXAMPLE...DELETE 99 




XAMPLE. 



NEW 7?£Z 


78 


34 

22 \s 

^ / 

12 30 38 

■ DELETE 34 



NEW TREE 


45 

y 

38 

/ 

22 




78 



\ 

no 






Appendix D 


CS050 

Projects 






Homework Assignment #1 

Write your own ada program that will output a design or picture. Be 
creative and show off your artistic talent! Your program should have a 
header and an executable body. It also should contain the context clause, 
"with text Jo; use text Jo; “ because you need to make available the 
subprograms put line and new line. I will electronically collect your 
programs and create a class procedure that will contain all your files as 
subprograms called procedures. I wil! send you this file via the mail 
facility. I will also create a class package that will contain all your artistic 
work and ship this to you too, so you see how packages that contain 
reusable components are created. 




Homework Assignment #2 


Write flowcharts using only the three logic patterns discussed in class, 
the siTiple sequence, decision logic pattern, and the repetitious logic 
pattern. Use only the symbols discussed in class: the start/end, I/O, 
processing, decision making and the connection flowcharting symbols. 
Draw your designs as I have in class. Make certain you define the 
domain of the problem. Decide on the variable names you plan to use. 



Homework Assignment #2b 


Convert your flowcharts into Ada programs. Remember to document 
your programs with your name, program description, and the current date. 
Use good program style for readability and for later maintenance. Use 
proper identifier names, indentation, and comments throughout your 
programs. Turn in your programs along with its associated flowcharts 
when done. 












Homework Assignment #3 

1. Develop example programs using all 3 control structures. 

• IF - ELSE - END IF 

• IF - ELSIF - ELSE - END IF 

• CASE 

Include also, enumeration data types and string variables. Do some 
I/O with these enumeration types. Be creative! Draw flowcharts 
indicating logic and define domain. Remember to document your 
programs with your name, date program description and remember 
to use proper indentation and naming conventions for readability. 

2. Decide which case statements are legal on handout sheet. If they 
are illegal, state why. 




Homework Assignment #4 


From the following three problems, select two to code in Ada. 
Remember, you need to create data files using the VI editor before you 
execute your Ada programs. You may want to create your own files with 
varying amount of records to test your programs with. Think about the 
problem domain and make sure you draw flowcharts before you begin to 
code. Remember to use good program style! What kind of 
documentation should be written? 







Homework Assignment #5 


Redo the last homework assignment using subprograms to write modular 
code. Explain the parameters that you pass. (Why they were passed and 
mode selected.) 

Also create your own program(s) that uses file(s), procedure(s), 
function(s), enumeration type(s), and for statement(s), and a case 
statement. 



Homework Assignment #6 

Create your own program that uses exception handlers. Clearly define 
your problem, problem domain, remember to use good Ada style. 




Homework Assignment #7 

Create a file with interesting data records in it. Create an Ada program 
that will 

• invoke procedure GetData to read the file into arrays. 

• invoke a function that uses the array(s) to process one value 

(call the function whatever you like) 

• invoke another procedure to compute values from the array(s) 

into a new array. (Name the procedure yourself) 

• invoke another procedure called PrintList to values of the new 

array. 

Remember to document your program well explaining what your program 
does. 


Assignment #8 


Read the following problem and write an Ada program for it, using 
subprograms to make it modular in design. Do part a, b, and c. Think 
about what could be declared local to the subprograms and what may 
not. 




Perform* Mary Budgai. The personnel office 'or a st«* government agency 
a m the p roc es s of developing a salary budget 'or tho n«*t fiscal yoar. Tho 
personn* (tip contains the 'ollowmq information on aacft tmployao 

1. Employee name 

2. Social socurty number 

3. Currant annual salary 

4. Union coda (1 » clonea>. 2 » teachers, 3 * aioctrical) 

5. Currant stop m pay schedule (i through S) 

6. Year farad 

The stale agency deals with three labor unions clerical, teachers, and 
electneal. Each union haa negotiated a separata salary schaduia which anti* 
ties each employee to an annual stap increase. The salary scheduias are listed 
in the tfle below. Each employee s hired at tha lowest step >n the salary 
schedule lor their union, snd moves up one step each ytar Tha field current 
step m pay schedule indicate* the employee s Map prior to the new salary for 
the com«g year: that «. currant annual salary is consistent with this step. 
The salary for the upcoming year >s to ba basad on tne next highest step 
Employees who have reached step 5 a re at the maximum sa'ary level 'or that 
iob Thus. next year s step salary is the same as their cu"«nt annual salary 
In additron to the salary stap me'ease employees who have been em¬ 
ployed by the state for 10 years or more are entitled to a longevity increase A 
longevity increase represents a 5 percent increment added to the employee s 
new step salary 

Salary Schedules 


Step Clerical Teachers Electrical 


t 

20176 


2 9133 



32170 

2 

30592 


•30433 



44260 

3 

30956 


3 1833 



46668 

4 

31320 


33333 



49501 

5 

0.1*21 


•34393 



92601 



Personnel File 





SMYTHIE SMILE 

032'66789 

10956 

1 

3 



ALFRED ALFREDO 

123454321 

13333 

2 

4 

M 


MENOAL MICKEY 

987654345 

22801 

3 

5 

17 

_ 

FIELD FLORA 

543297541 

12170 

3 

• 1 

* 

— 

CURRAN CURRENT 

045611222 

10176 

1 

1 

76 


HANOEL HALO 

315791123 

11320 

1 

4 

50 


UNKIND CORA 

129834765 

9133 

2 

1 

75 


a. Prepare e flowchart and write a program that prints a budget report for the 
personnel office Output from the report mciudee employee s name, cur¬ 
rent salary, increase in salary due to step, increase in salary due to longev¬ 
ity, end new salary Fofiowmg the output table, pnnt totals for the four 
numeric columns Treat the salary schedules as a two-dimensional (S * 3) 
array that is to be read in. Date in the personnel file and in the output table 
need not be treated as arrays. 

b. Print a table which summarises the salary budgets as follows. 

SALARY BUDGETS 

CLERICAL S xxxxxx 

TEACHERS S xxxxxx 

ELECTRICAL t xxxxxx 

S xxxxxxx 

•• c. Print the table of part b prior to the output m pert a. Hint Unlike part a. 
now you must subscript both the variables m the personnel file end the 
output in the report of part a. Do you see why? Use two-dimenaionel 
arrays. 


Appendix D 

CS051 

Projects 






Cs 51 Project 2 
0. Pinto/S. Honda 


SPRING 93 


DUE : FEB 22 


USING THE SAMPLE STACK PROGRAM(S) GIVEN IN CLASS, CREATE A MAIN 
PROGRAM TO READ IN UP TO 100 INTEGERS. THE STACK SHOULO BE ABLE 
TO HOLD A MAXIMUM OF 20 NUMBERS AT ONE TIME.IF THE INTEGER INPUT 
IS EVEN (BUT NOT 0), THE INTEGER IS PUSHED ONTO THE STACK. IF ODD, 
THE STACK IS POPPED.IF 0 IS INPUT , THE PROGRAM SHOULD 
TERMINATE. 

WHENEVER A VALUE IS POPPED FROM THE STACK , AN APPROPRIATE 
MESSAGE SHOULD BE DISPLAYED. IF EITHER STACK IS EMPTY OR STACK 
IS FULL , AN APPROPRIATE MESSAGE SHOULD ALSO OCCUR. All CASES 
SHOULD BE COVERED , IE. , THERE SHOULD BE AT LEAST ONE INSTANCE OF 
EMPTYSTACK AND ONE OF FULLSTACK. 


CS 51 


SPRING 93 
Project 3 


due : March 22 


The Bashemin Parking Garage contains a single lane that 
holds up to fifteen cars. Cars arrive at and depart from 
the same end of the garage. 

If a customer arrives to pick up a car that is not 
on the end , all cars in the way are driven out,and then 
restored in the same order that they were in originally. 

Write a program that reads a group of input lines. Each line 
contains an 'a' for arrival or a 'd' for departure and a licens 
plate number. Cars are assumed to arrive and depart in the orde 
specified by the input. The program should print a message each 
time that a car arrives or departs. When a car arrives , the 
message should specify whether cr not there is room in the 
garage for the car. If there is no room for a car , the car 
waits in a queue until there is room cr until a departure 
line is read for the car. 

When room becomes available , another message should 
be printed. When a car departs, the message should include the 
number of times the car was moved within the garage (including 
the departure itself but not he arrival). This number is zero i 
the car departs from the waiting line. 


ENJOY! ! 2 2 ! 2 2 2 2 2 2 ! 2 2 2 2 ! ! 2 ! 2 2 2 2 ! 2 ! 2 2 ! 2 2 ! 2 ! 2 2 ! 2 2 2 ! 2 





CS051 Project 4 
Spring 93 

Due : April 13 

Using the linked list program given in class, alter the program 
to input twenty five strings, sorting them alphabetically as 
they are inserted into the list. Print out the sorted list. 

Now, using the above input ten strings. If the string is 
present in the list, delete it, otherwise insert it in its 
proper place. Print out the list after each insertion and 
deletion. 


2 . 



CS 51 Project 5 
Pinto/Honda 


Due : May 10 2001 


Spring 93 


Using the tree programs enclosed , write a program to input 
twenty five strings into the tree. The program should print out the 
norder traversal for the tree. Then, compute the levels of each node 
n the tree and print out the maximum and minimum leaf levels. Do this 
3r ten runs , (ie. ten different trees , and compute the average max 
id average min leaf levels) ENJOY!!!! 


HAPPY SUMMER!!!1!! 






Appendix E 

Exams 





Name: 


Date: 


CS050 


Exam I 


Fall 1992 


Part I Give an example of the following: (1 point each) 

1. assignment statement 

2. discrete data type 

3. logical constant 

4. numeric expression 

5. logical expression 

6. relational operator 

7. character constant 

8. logical operator 

9. generic package 

10. ada lexical unit 



X>50 















Part III. 


Program the following in ADA. (Write the entire Program). 

Mr. and Mrs John Doe need a program to compute their income tax and are 
trying to decide whether to file a Joint or Separate return. Mr. Doe’s taxable 
income is $18,750 and Mrs. Doe’s income is $20,312. 

For Separate Returns: 

Taxable Income $18,000 - $20,000 Pay IRS $1630 + 28% of the 

taxable amount over $18,000 

Taxable Income $20,000 - $22,000 Pay IRS $2190 + 32% of the 

taxable amount over $20,000 

For Joint Returns: 

Taxable Income $36,000 - $40,000 Pay IRS $3960 + 29% of the 

taxable amount over $36,000 

Print out the following: 

1. How much each of the separate returns for Mr. and Mrs. Doe will be, 

2. How much the joint return will be, and 

3. A message indicating which way the computer thinks they should file: 

(separate or joint) Returns. 





^N'nwoC^ 


Name 


Fall 1993 


Date 


CS050A 


Exam II 


1. Write an Ada program containing a function and a procedure that will do the 
following: 

We have three sensors, Sensorl, Sensor2, and Sensor3 on our system, each of 
type Sensor_State which can be HIGH, MEDIUM OR LOW. If Sensorl is 
HIGH, Sensor2 and Sensor3 are MEDIUM, the alarm should be set on. If 
Sensor 1 and Sensor2 are HIGH the alarm should be also set on. If sensor3 is 
HIGH, the alarm should also be set on. 

Write an Ada program that will 

1. Call a procedure called GET DATA to input a record containing 
a system code and three sensor values from a file called 
DATA. DAT. (see file below) to check the state of the system at a 
certain time. 

2. Invoke the function called ALARMON to return a logical value of 
TRUE if the alarm should be set on; FALSE otherwise. The 
function should determine from the sensor values whether or not 
the alarm should be set. 

3. Say. fe! ••• system"_"about to blow!", if the 

alarm is set, or another appropriate message if the alarm is not set. 


DATA.DAT (field values are system code, sensorl, sensor2, and sensor3) 


MEDIUM 

LOW 

LOW 

MEDIUM 

LOW 

MEDIUM 

LOW 

LOW 

LOW 

LOW 

MEDIUM 

MEDIUM 

MEDIUM 

MEDIUM 

MEDIUM 

MEDIUM 

HIGH 

MEDIUM 

MEDIUM 

HIGH 

HIGH 






Declare a variable Season as a Season Type (SPRING.SUMMER, 
AUTUMN,WINTER): 


Declare a variable Forecast as a Forecast Type (RAIN.SUNSHINE, 
PARTLY_CLOUDY,SNO W): 


Assuming that the following procedures have been defined: 

CLEAN THE_HOUSE 

FLYAKITE 

GOSAILING 

CARVEATURKEY 

SHIVER 

Write a case statement testing the variable Season to do the following: 
for each of the 4 Season Type values, assign an appropriate forecasttype 
to forecast, print appropriate message(s) and select appropriate 
procedure(s) to run. 




Name 


Fall 93 


CS050 Ada Programming 

Final Exam 


Part I. Write an Ada program that will analyze stock information. INPUT consists of 

ID and QUANTITY_IN_STOCK for each of twenty five products. 

A. Write a Main program that will call four subprograms called INPUT, 
CATEGORIZE, OUTPUT and LIST. 

B. INPUT should read the identification numbers, and quantities in stock, into 
two arrays called ID and QTY. 

C. CATEGORIZE should determine the number of products whose quantity in 
stock fall into each of the following categories. 

500 or MORE 
250 to 499 
100 to 249 
0 to 99 

D. OUTPUT should output the number whose quantities in stock fall into each of 
the following categories: 

500 or MORE 
250 to 499 
100 to 249 
0 to 99 

E. LIST should output Product ID, the QTY in stock, and a message to reorder 
immediately if quantities fall below 150 of the products in low 

quantities, (under 150). 


ID 

QTY 

MESSAGE 

ITEM 103 

121 

*** REORDER*** 

ITEM 114 

32 

***REORDER*** 

ITEM 165 

140 

***REORDER*** 

ITEM212 

99 

***REORDER*** 









Part II. 


Note the following program below. What will be the expected output? 


with text_io; use textjo; 
procedure fin is 
message: string( 1.. 18); 
joe:file_type; 
begin 

open (joe,in_file,"file.dat"); 
for i in reverse 1..18 loop 
get(joe,message(i)); 
end loop; 
dose(joe); 
for j in 1..16 loop 
put(message(j)); 
end loop; 

new_line;put(" ”); 
for i in 1..3 loop 

put(message(17)); 
put(message(18)); 
put(message(16)); 
end loop; new line; 
end fin; 


FILE FILE.DAT 





Part III. Write a program that will read a file called Numbers.dat that contains 5 

records of 5 integer values to detect if it is a magic square or not. Read this 
into memory in a variable called Magic. Magic should hold five rows and five 
columns of integer values. Your program should check to see if all the sums 
of the rows and all of the sums of the columns, the left diagonal, and the right 
diagonal are of equal value. If the sums are all equal, this is a MAGIC 
SQUARE. Your program should print out whether or not the values input 
form the file make a magic square or not. 



Part IV. Answer the following questions: 

Some of the goals of software engineering are 

modifiability 

efficiency 

reliability 

understandability. 

1. How are these goals met by the Ada language? 


Some of Ada’s features 

generic components 

separate compilations of modules (information hiding) 
packaging concept 
subprogramming modularity 
strong typing 

separation of specification code from implementation code 

2. Now that you have been exposed to Ada language, list and describe some of 
Ada’s features that can be used as a software engineering tool to aid in the 
design of software projects. 





Name : 


Spring 1993 


CS051 


Section A - Honda 


Exam I 


Do all work on paper provided ...Show all work!!! 

I. Find the output for the following segments of code 

CLEARSTACK (S); 

Z : = 10; 

PUSH (S,Z); 

PUSH (S,5); 

POP (S,A); 

PUSH (S,2*A); 

X := 4*A; 

POP (S,Y); 

PUSH (S,X +Y); 

Y := A + X; 

POP (S,X); 

POP (S,Y); 

PUSH (S,A); 

POP (S,Z); 

PUSH (S,Y*10); 

WHILE NOT EMPTY (S) DO 
BEGIN 

POP (S,A); 

WRITELN (A); 

END; 

WRITELN (A,X,Y,Z); 

II. What iToutput by the following segment of code? 

CLEARSTACK (STACK); 

PUSH (STACK, 1); 

WHILE NOT EMPTY (STACK) DO 
BEGIN 

POP (STACK, N); 

WRITE(N); 

IF N< =6 THEN 
BEGIN 

PUSH (STACK, N+l); 
PUSH (STACK, 3*N-1) 
END (* IF *) 

END; (* WHILE*) 



III. Write the following declaration of a variable called COST. It should look like this 
in primary memory: I want to store the average prices for a 4-Door, 2-Door, and the 
sports coupe for 1986,1987,1988,1989,and 1990. 


GM 

FOUR-D 

TWO-D 

SPORTS-COUPE 

CHRYSLER 



i 

PONTIAC 




SABB 



.. = 

HONDA 




NISSAN 





for 1986 


IV. Write a complete program to input up to a maximum of 10 decimal numbers into an 
array. The program is to use a procedure to reverse the values in the array and also 
to count the number of negative values in the array. 




II. 


III. 


IV. 


NAME SPRING 93 

CS 51 

FINAL EXAMINATION 


I. GIVEN THE FOLLOWING SET OF INTEGERS , PLACE THEM IN A TREE 
USING THE INSERTION ROUTINE GIVEN IN CLASS. DRAW THE TREE. 


60 56 87 98 34 65 23 11 90 69 45 62 53 89 14 9 100 81 33 59 


WRITE OUT THE NODES 
INORDER 
POSTORDER 
PREORDER 

SUPPOSE YOU WANTED TO INSERT 77 AND 41 AND THEN DELETE 65 AND 9 
DRAW THE TREE AFTER THESE FOUR OPERATIONS 


WRITE A FUNCTION NUMLEAVES THAT RETURNS THE NUMBER OF 
LEAVES IN ANY NONEMPTY BINARY TREE WHEN GIVEN THE POINTER TO 
THE ROOT OF THE TREE. 


SHOW THAT A COMPLETE BINARY TREE WITH N LEAFS CONTAINS 2N-1 NODES. 
DO THIS FOR A FEW EXAMPLES AND TRY TO REASON YOUR WAY THROUGH 
THIS MATHEMATICALLY.(NB COMPLETE MEANS LEVELS ARE AS FULL AS 
POSSIBLE) 


GIVEN THE FOLLOWING TREE , SHOW HOW THE PREORDER RECURSIVE 
FUNCTION WOULD OPERATE (IE . PERFORM A TRACE) 


31 

/ \ 

24 54 

/\ \ 

12 25 76 

/ \ \ \ 

2 14 27 88 




V. GIVEN THE FOLLOWING CODE , ASSUME WE HAVE THE TREE LISTED 

ABOVE. TREE POINTS TO THE NODE CONTAINING 31. WHAT IS THE 
OUTPUT?ASSUME ALL STACK OPERATIONS. 


ClearStack(PtrStack); 

Ptr :» Tree; 

RFPP&T 

WHILE Ptr <> NIL DO 
BEGIN 

WriteLn(Ptr".Info); 
Push(PtrStack,Ptr); 

Ptr Ptr ‘.LEFT; 

END; 

IF NOT EraptyStack(PtrStack) Then 
BEGIN 

Pop(PtrStack,Ptr); 

Ptr :« Ptr‘.Right; 

END 

UNTIL v Ptr*NIL) AND (EmptyStack(PtrStack)) 




Appendix F 

Articles 






WEDNESDAY 
Septembers, 1989 





=■■83 8 

a a .25 

glUt 


\**1 
ipilff 
| li i|l-J 







Vol. 8, No. IS 


November 4, 1993 


WASHINGTON 


TECHNOLOGY 

The Business Newspaper of Technology 





An Endorsement at the Top 

DoD Needs to Increase the Appeal of Ada Beyond Its Own Halls 


By Emmett Paige Jr. 

Emmett Paigt Jr. is Assistant Secre¬ 
tary of Defense for Command Control 
Communications and Intelligence. 
This article is adapted from a speech 
to a recent ADA dual-use workshop. 

I 'm not a supporter of Ada for 
the sake of Ada. If I didn't be¬ 
lieve in it, if I didn't think it was 
necessary, I never would have 
been a supporter of it since 1979, 
when I moved across the highway 
at Fort Monmouth to find out what 
it was all about 

The whole reason for Ada, in 
the Drst place, still exists. The 
need today is probably greater 
than it ever was, greater than it 
was then. And a lot of people that 
didn't even believe in automated 
systems back in those days are 
now believers in automated sys¬ 
tems. 

Ada has been a standardized 
programming language-since 
1983. Since its introduction, DoD 
and the software engineering com¬ 
munity have benefitied greatly 
from Ada. And with the features 
that Ada 9X promises to bring to 
the table, things will get even bet¬ 
ter. While we took some early heat 
because of lack of quality and vali¬ 
dated compilers in the early days, 
the results to date show quantita¬ 
tively that Ada makes sense, both 
technically and from a business 
point of view. 

Needless to say, the policy offi¬ 
cial in DoD who's responsible for 
C*l is firmly committed to the Ada 
strategy. Any speculation that 
DoD is wavering on the commit¬ 
ment to Ada is wrong. Based upon 
the results that we’ve seen, we 


have no compelling reason to re¬ 
think our Ada strategy. 

This strategy uses Ada as the 
kingpin to bring a software engi¬ 
neering discipline into DoD. And 
in my humble view, we have held 
Ada too tightly in the past. As 
someone said, it's just not getting 
enough air, and we've got to 
loosen our grip. 

Based on my experience within 
the Department of Defense, com¬ 
bined with my recent experience 
in the private sector, there appears 
to be a common misconception 
that Ada has not received the level 
of support that is necessary to en¬ 
sure its acceptance within all of 
the Department of Defense and 
the commercial sectors. 

I know for a fact that there are 
many private firms that have em¬ 
braced Ada. I’ve read that Silicon 
Graphics is using Ada in some of 
its virtual reality simulations. I’m 
sure that they would not be using 
Ada if they did not think it was the 
best language to use for the partic¬ 
ular purpose. 

NASA and FAA are using Ada in 
their major projects. Certainly, we 
will not blame all of the computer 
problems and other disasters that 
NASA has suffered in the past few 
years to their use of the Ada lan¬ 
guage. Likewise, we cannot blame 
FAA's use of Ada for the program 
delays that they've encountered. 
Many firms overseas, like Ferranti 
(for nuclear electric applications) 
and Nippon Telegraph and Tele¬ 
phone are using Ada with positive 
results. 

However, while I have not wit¬ 
nessed these examples firsthand, I 
nonetheless feel that Ada has not 
penetrated the commercial sector 
to the degree that we, within DoD, 
had hoped. The Ada market is per¬ 


ceived as a niche market by many 
of the vendors that I talk with. And 
I believe there is a lot of truth to 
this assessment 

We’ve got to increase the appeal 
of Ada outside of the Department 
of Defense and outside the federal 
government Else, we will forever 
have to carry the burden of the in¬ 
dustrial tower of language Babel 
on our shoulders. While we are 
not afraid to continue our invest¬ 
ments, the best of all possible 
worlds would be one in which the 
market caused others to spend 
their own money to enhance their 
market share of a larger Ada mar¬ 
ket internationally. The pull needs 
to accompany the push. Else, our 
chances oi success in the future 
will be limited. 

I would like to see U S. compa¬ 
nies leading the world'and build¬ 
ing jobs in this country producing 
applications using the Ada lan¬ 
guage. In my view, we in the fed¬ 
eral government have tried to 
prime the pump with Ada, but we 
have failed to find the answer to 
cause the commercial sector in the 
U.S. to pick up the Ada baton and 
use it for their own purposes. 

A few years ago, I used to say 
that the day we see IBM adopt Ada 
for their commercial systems will 
be the day that we can say Ada has 
arrived. 

Well, today we see Microsoft 
and Borland using Ada. We can 
say that Ada has arrived. 

There are other issues as well. 
A lot of people still believe Ada is 
overkill, slow and non-responsive. 
Well, we've come a long way in the 
area of performance. The bench¬ 
marks indicate that most Ada ap¬ 
plications run as fast and are more 
robust than their counterparts in 
other languages. With regard to 


i 



i 

1 

► 


i» 

r 

1. 

\ 


richness, this has never been a 
handicap to those properly trained 
in software engineering and Ada. 
As a matter of fact, they love the 
capabilities the language provides 
them. 

The availability of quality com¬ 
pilers, tools and environments (in¬ 
cluding linkages) has also been 
raised as an issue in the past. Well, 
we’ve come a long way in this area 
in the past 10 years. Those of you 
old enough to remember the early 
compilers will recall, as 1 do, the 
inefficient beasts that consumed 
whole machines. Today's compil- 
continued on back 


Copyright C 1993 TechNews. Inc. At Rights Reserved 









Large Ada projects show productivity gains 

Wan Mytn, CoiUriftumg EMUw ironic Systems, the system's contractor. system, and environment — all in Ada 


After yean of development and an ini¬ 
tial skeptical reception, many people are 
now using Ada and saving that they like 
it At least 91 projects haw been com¬ 
pleted in Ada. 103 are under develop¬ 
ment and 38 are in the planning stage, 
according to a March survey by die 
Defense Dept's Ada Joint Program Of¬ 
fice. About 13 percent of these 241 proj¬ 
ects were large: more than 100.000 lines 
of source code: more than 3 percent 
have more than 300.000 lines. The survey 
covered Defense Dept, commercial 
domestic, and foreign projects. 

The growth in Ada's use has been 
helped bv favorable repons from earlv 
adopters (“Ada Catches on in the Com¬ 
mercial Market "Soft News, CEEESafl- 
wart. November 1986. p. 81) and by the 
growing number of validated compilers. 
.4s of June there were 129 validated base 
Ada compilers and 63 denved compilers. 

But not evervone has the tools needed. 
'A surprise is that Ada is as far behind as 
it is. The suppon environments aren't 
there: tools, compilers, prototypes, bind¬ 
ings." said Howani Yudkin, chief execu¬ 
tive officer of the Software Producovuy 
Consortium, a 14-member group of 
defense contractors based in Reston. Va. 

In Europe, the lack of Ada environ¬ 
ments on IBM and Crav computers— 
the computers used for atomic energy 
and other large projects—has con¬ 
strained use of Ada. said Annie Kuntz- 
mann-Combelles. managing director of 
software engineering and applications at 
QSI Engineering in Rungis. France. 

Large productivity gain*. The largest 
embedded system completed to date is 
the US Army's Advanced Field Artillery 
Tactical Data System, said Allan Kopp, 
the AdaJoint Program Office's deputy 
director. The system entered formal qual¬ 
ification testing in July. The project re¬ 
sults show that Ada can greatly increase 
productivity for Urge systems. 

Release 4.04 of the system contains 
1.173.498 nonconumem lines of source 
code and 7 .553 files. All but 3 JOOO lines of 
operating-system and communication 
software were written in Ada. 

The line count does not include reus¬ 
able software, such as math packages, not 
developed on the project Moreover, re¬ 
usable software developed on the project 
was counted only once. Roughly 13 per¬ 
cent of the delivered software was reus¬ 
able. This reuse saved 190 man-months 
of effort (a9-percem savings) and re¬ 
duced the schedule by two calendar 
months (a 4-percent savings), said 
Donald G. Firesmith of Magnavox Elec- 


Magnavox expects to increase the reuse 
rate to 23 percent on the next similar 
project and believes that a rate of 30 per¬ 
cent is posnble. he said. 

Productivity for the execution environ¬ 
ment — including the operating system, 
data management, information manage¬ 
ment, communications support, and 
communications interface — was 330 
lines per man-month. Firesmith said. Pro¬ 
ductivity for the applications software — 
including fire-support planning, fire-sup¬ 
port execution, movement control, and 
common functions — was 704 lines per 
man-month, he said. 

The Magnavox rates exceed the aver¬ 
age prod tic ovi tv of the 1 -500 systems in 
productivity consultant Lawrence Put¬ 
nam s database: 77 lines per man-month 
(at the 1-2-tnillion-line level). 

Magnavox found that using Ada meant 
that more ume went to requirements an¬ 
alysis and less to integration and testing 


In ono projoct, Ado’o 



that 90 poreont of thm 
eodowmvoryamaM, 
oknpttfylng oywtom 
mmgrmoon mno ml 


than is typical on traditional projects, 
Firesmith said. Requirements analysis 
and design took 33 percent of the effort, 
coding took 10 percent. ai.Jl testing and 
integration took 33 percent, he said. 
Ada's object orientation meant that 90 
percent of the code was very small and 
simple programming unis, which 
caused far fewer problems during inte¬ 
gration and test, he said. 

Magnavox also found that Ada- 
oriented development methods, such as 
object-oriented design, are not compat¬ 
ible with the funcoo rial-decomposition 
methods or waterfall life-cycle models 
that have been commonly used in 
Defense Dept, standards, Firesmith aid. 
(The recently revised DoD-Std-2167-Ais 
methodology- and language-neutral.) 

Other p wjwa . Several companies 
haw shown amilar results with Ada: 

• Nokia Information Systems has com¬ 
pleted 2 million lines in a variety of sys¬ 
tems for the Bank of Finland. In the early 
1980s, Nokia built a compiler, operating 


The results of the banking project haw 
beensosuccesrful that Nokia plans to de- 
wtop its next point-of-sale system in Ada. 

• Boeing Aerospace decided three 
yean ago to aandardiae on Ada. for both 
defense systems and iu commercial air¬ 
craft The new Boeing 747-400 plane now 
contains 300.000 lines of Federal Avia¬ 
tion Administration flight-certified Ada 
software, most of it produced hv subcon¬ 
tractors. The cost savings may be as high 
as 30 percent, said Boeing s Brian Pflug. 

• France's CIS! Engineering saw a pro¬ 
ductivity increase of 20 percent com¬ 
pared toC Fortran, and Pascal in soft- 
ware-engineenng-tool projects, said 
CISI's Kuntzmann-Combelles. A team 
well-trained and experienced with Ada 
increased its producuvnv from 40 lines of 
code per man-dav to 80 lines, but she cau¬ 
tioned that less experienced program¬ 
mers would do less well. 

From 1964 to 1986. the European Com¬ 
munity had a special dissemination pro¬ 
gram for Ada. which West Germany and 
Britain were wrv active in. Kuntzmann- 
Combelles said. France's Defense Minis¬ 
try recently mandated Ada for real-time, 
image-processing, and robotics systems. 

The US Defense Dept, has strength¬ 
ened its mandates to use Ada. and several 
nonmilitarv agencies—including the 
Naoonal Aeronautics and Space .Admin¬ 
istration and the Federal Aviauon Admin¬ 
istration — are turning to Ada. 

• Lockheed Missile and Space Corp is 
several years into the Ada development 
of the Air Force’s 400.0004ine Milstar sys¬ 
tem for control-, command-, and tele¬ 
metryprocessing for a spacecraft. 

• The Air Force's Advanced Tactical 
Fighterwill require 3 million to 10 mil¬ 
lion lines of code for on-board and 
ground-based software. The competing 
prime contractor groups—led by 
Lockheed and Northrop—both pro¬ 
posed to use Ada. 

• NASA has committed to Ada for the 
10 million lines of code that the Frmdom 
space station is expected to need. The 
agency is switching from its long-time lan¬ 
guage. Hal-S. The agency has done more 
than 130 projects in Ada in the last five 
years. Pilot projects total 313.000 lines 
and production efforts tool 446.000 lines. 

• The European Space Agency recently 
decided to use Ada for its Columbus space- 
station module and Htmm space shuttle. 

• The FAA will use Ada as the high- 
order language for its Advanced Automa¬ 
tion System, an air-traffic control svsiem 
estimated to require 1.3 million lines of 
new code. Air-oiffBc control svstems for 
Belgium and Spain are also using Ada. 


No v e mto ar 1900 


IEEE Software 


89 





, ^' * • r 




IBM Forges Links to Ado Vendors 
To Enhance Role in Aerosnce Market 


j Boston 


I nternational Business Machines has 
signed marketing agreements with three 
j Ada software and hardware vendors to 
| make it easier for aerospace companies to 
■ use IBM computers to design and run soft- 
| ware in Ada. a high-level programming 
; language developed b> the Defense Dept 
| The agreements, signed late last year 
j with three of the leading vendors for Ada 
| compilers and related tools, will allow 
J IBM sales representatives to make joint 
calls with companies that enjoy constder- 
I able Ada business with aerospace defense 
I contractors 

1 DITAILS Of MCTS 

The three agreements are as follows: 

■ An Industry Marketing Assistance Pro¬ 
gram agreement with Rational of Moun¬ 
tain View, Calif., a company that 
specializes m Ada development tools This 
will allow IBM to market the R1000 De¬ 
velopment System, which consists of hard¬ 
ware and software tools needed by teams 
of 10-30 or more programmers The soft¬ 
ware support system includes an Ada com¬ 
piler. which allows programmers to write 
in Ada and to have it automatically trans¬ 
lated into machine-level instructions. 

■ A Marketing Assistance Program with 
AJysys. Inc., of France, which allows IBM 
to market AJysvs’s Ada compiler for IBM 
}70-class computers running on an IBM 
operating system. 

■ An Industry Marketing Assistance 
Program agreement with CRI. Inc., of 
Santa Clara. Calif., that allows IBM to 
market CRI's Relate/DB relational data¬ 
base for IBM’s 9370 minicomputer and 
4281 mainframe. The database works 
with an IBM operating system. 

Last year the Defense Dept, mandated 
the use of Ada for all new weapon system 
software developtr-.nt as well as for more 
general types of computing. The Penta¬ 
gon wants to standardize on this lan¬ 
guage. rather than continue using a 
variety of incompatible languages, such as 
Pascal. Jovial, Coboi and Fortran 
Industry officials say that IBM, the 
world's largest computer manufacturer, 
has been late in recognizing the impor¬ 
tance of Ada. Recent IBM moves are an 
attempt to catch up, these officials say. 

"I think IBM came late in the game. 
Now that they are in. they are starting to 
be more aggressive." Kevin J. Dyer, who 
is project manager or Adanet. a West 
Virginia-based development network for 
Ada software applications, said. “They 
had their toes in the water. Now they're 
in up to their knees ” 


I z 

Q — 


ItoMaai sals three mMi •» the 81000 DitHegi m t Sistaa. Sadat 10 CAJ eaa 
10 areafMBMn aaiag Mttfele varkstattaaa. Sadai 10 (right) saaoarta ap ta 20 
Tha Medal 40 tyttaa (carter) t aeper t t up ta 40 prapmaaMrs. 


Whether the Defense Dept and aero¬ 
space contractors engaged m developing 
billions of dollars worth of computer pro¬ 
grams for weapon systems will decide to 
use IBM hardware may depend on the 
availability of associated Ada tools that 
make it possible to write hundreds of 
thousands and even millions of lines of 
software code in Ada. 

The use of computer hardware and soft¬ 
ware tools to support programmers work¬ 
ing in Ada is called computer-aided 
software engineering (CASE). Today, the 
CASE tools for Ada development, includ¬ 
ing hardware and software, are just being 
developed to the point needed to accom¬ 
plish the missive programming tasks 
found in large defense systems IBM be¬ 
lieves that the CASE market will take off 
and it wants to be in a position to capital¬ 


ize on this. IBM also wants to sell its com¬ 
puters for use as embedded systems 
dependent on Ada for software develop- - 
ment j 

Ada is supposed to make it easier to I 
maintain software programs once they are 
tn the field, an area that accounts for as 
much as 80% of the Pentagon's software 
costs. Ada is also supposed to allow pro¬ 
grammers to create software modules that 
could be placed in a library and reused 
later, since a section of code that performs 
one function might fulfill the same func¬ 
tion on the next weapon system project. 

Digital Equipment Corp meanwhile is 
well positioned in the Ada environment 
due to its early commitment to the lan- , 
guage. Digital has one of the earliest and 
most successful Ada compilers 
The IBM agreement with Rational 


IBM Division Wins Bid to Develop 
Mission Computer for Navy’s ATA 


Boston 

T he McDonnell Douglas/General Dy¬ 
namics team for the L S. Navy A-12 
advanced tactical aircraft program has se¬ 
lected IBM’s Federal Systems Div. to de¬ 
velop the aircraft’s mission computer. 

The dollar value of the contract award¬ 
ed March 14 has not been disclosed The 
ATA project is often cited as one promi¬ 
nent weapon system program using the 
j Ada high-level programming language for 
| software development IBM will supply 
i the hardware while McDonnell Douglas 
j will program the software in Ada. The 
hardware will incorporate Very High- 


Speed Integrated Circuit (VHSIC) tech¬ 
nology, according to IBM officials. j: 

The ATA mission computer system , 
also will incorporate common avionics j 
modules as pan of the Defense Dept s ] 
initiative to promote standardization ' 
among the armed services. | 

IBM's Federal Systems Div s Owego. 
N. Y., plant will perform the development i 
work. A Navy official said dual supply 
sources will be used on the 30 highest 
value ATA subsystems, and a McDonnell 
Douglas official said a second source will 
be chosen for the mission computer Z 


ACTION AEE* & S C *CE TCC-S7.0G'- 










raised some eyehri’*' •** I he industry be¬ 
cause ihe R1000 Dcvelopmcni System in¬ 
cludes Rational-developed hardware—not 
I DM hatdwure Ada industry officials 
considered it unusual for IBM to help a 
company market non-IBM computer 
hardware But the RIOOO would work in 
tandem with IBM computers to perform 
software deselopment functions 

CONTRACTS LOST 

Another reason f..r IBM's recent moves 
in Ada is that it had lost out on some key 
U S government contracts, including the 
software support environment for the 
NASA space station This contract, won 
last June by Lockheed using a Rational 
system for development, is valued at $140 
million It is expected that the task will 
require 10 million lines of Ada code 
Lockheed has owned 109r of Rational 
smee 198? and has one of ns top execu¬ 
tives on Rational's board of directors 

Rational has grown to prominence in 
the Ada market since its formation as a 
startup in 19'9 by two ex-Air Force offi¬ 
cers who left the service after working on 
computer programs designed to track sat¬ 
ellites 

Today, customers for Rational's R1000 
Development System come predominant¬ 
ly from the aerospace industry, and in¬ 
clude Lockheed. Martin Marietta. TRW. 
Hughes. Rockwell. General Electric. Wes- 
tinghouse and the .Air Force—just the 
son of customers IBM wants to do more 
business with in an Ada environment 

Rational also has business overseas 
The R1000 system is being used by Phil¬ 
ips Elektronikmdustner to write Ada 
axle for an electronic command and con¬ 
trol system to be used on four new Gote- 
borg-type coastal corvettes for the Royal 
Swedish Navy Rational officials say the 
Philips programming work in Ada is the 
largest single Ada project in full-scale de¬ 
velopment m the world, with 140 soft¬ 
ware engineers working on 1 million lines 
of Ada code 

The R1000 has models ranging in price 
from $295,000 for one serving up to 12 
programmers and $795,000 for one serv¬ 
ing up to 40 programmers. Assuming 40 
software engineers use one. a productivity 
improvement of 5-1091 n needed to break 
even on the cost of a system Rational 
claims its system can improve productivi¬ 
ty from 25-300<*. resulting in savings of 
up to 528 million on a project involving 
800.000 source lines of Ada code. 

The Rational RIOOO is useful for soft¬ 
ware engineering of 100.000 to 1 million 
lines or more of Ada code. Lockheed Mis¬ 
siles and Space Co.'s Astronautics Dtv 
will use Rational systems, for example, to 
automate the design and development of 
software for the NASA Space Station 
The same arm of Lockheed and GM 
Hughes Electronics also will use Rational 
systems to develop software systems for 


<W 1 « prototype*. * ‘ the adv.ui. cd l.i. Iiijl 
fighter Martin Marietta will uls<> uve an 
RI0P0 on ilv National Tevl Hcvl contrail 
with the Strategic Defense Initiative Or- 
ganizaiion 

IBM * Federal Sy vtemv Do . which 
bid' on Defense Depi contra!.iv. already 
owns mx R1000 system' for use in Ada- 
related programming 

IBM official' cue the activities of the 
Federal Systems D*' on a number of key 
Defense Dept contracts as indication of 
the company's strong commitment to 
•Ada One of ihe largest of these contracts 
is the Armv's Worldwide Military Com- 


Ada industry officials 
considered it unusual for 
IBM to help a company 
market non-IBM hardware 


mand and Control System (WWMCCS) 
Another program non March 14 is the 
mission computer for the Navy's ad¬ 
vanced tactical aircraft 

However, others in the Ada communi¬ 
ty point out that the larger IBM market¬ 
ing organization outside of the Federal 
Systems Do has not embraced Ada vet 
The agreement with Rational i$ expected 
to make Ada tools more available to this 
pan of the organization to suppon sales 
of IBM computers to aerospace compa¬ 
nies and even commercial users Tele- 
| phone companies, for example, are 
, expected to find Ada helpful for software 


development .mil HIM is i>.>u m j hciici 
p'silii'ii ti' serve ilicsi needs us they 

emerge 

The agreement with Alysys f. uu.nhcr 
example of IBM jligmng ilself wnh vine 
of the leading companies in the \da som- 
nuiniiy Alysys was founded in by 

Dr Jean D Ichhiah. formerlv wnh Cn 
Honeywell Bull >r France He led the 
team lhai won the worldwide competition 
over three other groups to desclop the 
Ada language for the l S Defense Dept 
Alysys lists among its current customers 
Ball Aerospace Systems. Boeing. McDon¬ 
nell Douglas. Mure Corp Martin Mari¬ 
etta. NASA. Singer-Link TRIk Allied 
Bendix Aerospace. Hughes Aircraft. 
Lockheed Missiles L Space and Rayth¬ 
eon 

CR1. Inc. the third Ada vendor with 
which IBM is aligning itself, is also a 
long-term player in ihe Ada market CR1 
customer McDonnell Douglas encour¬ 
aged IBM to make CRTs Relate DB da¬ 
tabase available on the IBM 9V0 
McDonnell Douglas is using the CRI da¬ 
tabase as pan of a sysiem to track pilot 
training data for T-45 aircraft under a 
L' S Navy contract CRTs Relate DB is 
being used by NASA. Lockheed and 
Stanford University on a project to reduce 
paperwork requirements for the mainte¬ 
nance of the space shuttle thermal protec¬ 
tion sysiem 

IBM's long-range plans are to provide 
Ada software for all of ns computers The 
company will expand the number of Ada 
vendors involved in marketing agree¬ 
ments As one IBM marketing official 
who focuses on the CASE market said. 
"Our product plans will unfold " 3 


Estimote of Ada Market Potential 
In U. S. Aerospace Industry 


INS 1W 7 ISM ISM IMP IWI IW2 

THOUSANDS Of HOM DCVILORING SOfTWARI 

100 0 1120 1250 140 0 1570 1760 ’9 7 0 

MIC!NT WORKING ON ADA PROGRAMS 

3S 6* 12N 20N 30** _ 40N 50*« 

THOUSANDS Of MOni MVIIOR1NO SOFTWARI IN ADA 

3 0 6 7 15 0 26 0 47 1 70 4 98 5 

| INV1STMINT MR FI ISON WORKING ON ADA PROGRAMS (i* rnousanas) 

$10.0 $100 $100 $100 $10 0 5100 $10 0 

' ADA SUPPORT MARKIT1NG OPPORTUNITY (In mens) 

| $30 0 $67 0 $150 0 5280 0 $4710 S794 0 $985 0 

I tuuitwi ve o> icim yaw '7N rmr _ Stxrrr Ww ■'*» ^ 

IM ate after c—n N « art kUtuN k iwrtN Ml f irwim k mma teems* N 
! mater if saftvan rngtomn priinaatni D Mi It axgaette It taermw aara Km KatiM te 
: I M2. *tea tell if 41 aafteart Mten H tte Mutrr art ngtette ta te varUag la Mi 





COMPUTERS IN AEROSPACE 


Next-Generation Defense Programs 
Will Increase Use of Ada Language 


| David Hughes Boston 

A da. the high-level computer program- [ “I am not impressed, have not been, j programmer to write in a high-level lan- 
ming language developed by the De- ! and I remain willing to be impressed, guagc such as Ada and have it automan- 

j fense Dept , is being accepted for use in with quantitative measurements of the su- cally translated to machine-level 

i aerospace and defense programs even penonty or productivity or the virtues of instructions. 

, though it is trying to live down a record j anything such as Ada." Ambrose said “Ada's only handicap is that it claimed 
I tarnished by exaggerated performance while encouraging the 2.000 attendees to to be a savior for all applications, David 
claims i avoid claiming that the language can be E. Quigley, the Vax Ada product manag- 

"Ada is beset with too much hyperbole j all things to all people. "What I have er for Digital Equipment Corp.. said. Dig- 

for its own good," then-Under Secretary of seen thus far has been largely rhetoric." ital is one supplier of computer hardware 

the Army James R. Ambrose said at the The Defense Dept began developing that dedicated some of its top program- 
annual Ada Expo and Special Interest Ada in the late 1970s as a solution to the ming talent to developing Ada compilers 

Group convention in Boston. Ambrose. ; problems created in the armed services by from the beginning Soon the company 

who retired last month but sull serves as a I the use of multiple computer languages will introduce its third compiler. It also 

consultant to Secretary of the Army John ) with poor documentation. This made it offers customers a variety of Ada tools 

O. Marsh. Jr. cautioned Ada vendors to i difficult for anyone to fix problems with a | Quigley said this may well be the year the 

be conservative in statements about the ca- software program once it was fielded or to Ada market takes off 

pabilities of the new language because ex- port a software program from one com- Now that there are many high-quality 
aggeraied claims do more harm than good, puter to another. compilers available that are validated by ; 

These candid remarks from a high- the Defense Dept.’s stringent tests, things i 

ranking representative of the U. S. IARLY SHORTFALLS I are changing The Ada show here offered j 

Army—which has been one of the lead mg Ada was to have solved these and other some signs of these improvements. Alien- J 

advocates for using Ada as the standard problems, and it may yet. However, the dance here was triple that of the show . 

computer language for the Defense use of Ada in programs in the early three years ago in Minneapolis Also, the , 

Dept.—did not mean that the Army has 1980s, when compilers were either nonex- attendees included representatives of many J 

abandoned Ada. according to an Army istent or of poor quality, caused some pro- new companies and higher ranking offi- 

official. The official compared Ambrose's gram managers in the Pentagon to write cials of program offices in the Pentagon 

remarks to a pep talk a coach might give Ada off as a failure. A compiler is a key The convention was sponsored in part 
to his team during halftime. software development tool that allows a by Software Valley Corp.. a nonprofit or- 



s a 
¥ 


i 

* 


Lockheed Using Ada 
In Airborne Display 

Boston ; 


L ockheed is developing an advanced ! 

display for antisubmarine warfare and ! 
airborne warning and control system 
(AWACS) applications using the Ada 
programming language for development. 

The display, which can present air¬ 
borne. surface and subsurface targets on a 
global scale using the CIA's World Data 
Base II mapping system, can also zoom in 
so the operator can view an area a few 
miles across. The display is running on a 
Digital Vax 11875 and will be ported over 
.o a Motorola 68030 microprocessor. j 
Lockheed's Advanced Avionics System , 
Center in the company's Aeronautical 
Systems Co. is using the display develop¬ 
ment as part of its own company-funded 
effort to improve sensors, enhance crew 
coordination on multiplace aircraft, and 
refine the interface between man and ma¬ 
chine The Ada program consists of about 
l.i000-1.500 lines of code. The project has 
been under development for 15 months 
and the display will be tested on board an 
aircraft late next year The team will use 
its experience to provide lessons learned 
on Ada to the l.ixktieed organization J 



60 AVAtlviN Alfr It SI'Ai f (K.MhOlm.Y M.ucn .■& I‘l8d 





















COMPUTERS IN AEROSPACE 


ftm/ation founded by l' S Semite Ma¬ 
jority Leader Robert C Byrd (D-W Va ) 
to promote high technology industry in 
West Virginia Software Valley has held 
other conferences to promote Ada and to 
attract related companies to the state 

Furthermore, the use of Ada is spread¬ 
ing into the commercial marketplace, 
particularly in Europe, where telecom¬ 
munications firms are using it. The Euro¬ 
pean defense ministries and NATO are 
also advocating the use of Ada. but are 
not moving as quickly in this area as the 
Pentagon 

KKY TO ACCIPTANCI 

Industry officials say the key to the wide¬ 
spread acceptance of Ada will be its use 
in many of the L'. S. Defense Dept's 
new. high-profile weapon system pro¬ 
grams. mdud.ng the advanced tactical 
fighter and the advanced tactical aircraft, 
and other government programs 

The Pentagon mandated on Mar 31. 
1987. that, effective immediately, all soft¬ 
ware developmen' for new weapon sys¬ 
tems be performed in Ada as the single, 
common, high-order programming lan¬ 
guage. Depute Defense Secretary Wil¬ 
liam Taft. 4th. broadened that directive 
in April. 1987 by specifying that Ada 
must be used on all Defense Dept, com¬ 
puter resources, with a few other lan¬ 
guages permitted in certain cases. These 
reaffirmations of the Defense Dept s 
commitment to Ada are expected to curb 
the number of waivers requested and the 
number granted to develop programs in 
a language other than Ada. 

Currently there are 84 Air Force. 51 
Army and 24 Navy programs using Ada 
for software development (see chan for 
examples) NASA also is using Ada for 
the space station and the Federal Avia¬ 
tion Administration is using it for the 
Advanced Automation System. 

COMMERCIAL UStS 

Ada has spread from use in the military 
to imponant commercial avionics pro¬ 
grams. The Collins division of Rockwell 
International, for example, developed 
Ada programming capability to address 
military markets, then used it to write 
software in Ada for the Boeing 747-400 
and Beech Starship avionics suites. 
Boeing also specified Ada for the 7J7 
project, which is now on hold. 

The emerging Ada support industry, 
which has spawned many start-up com¬ 
panies, seems about to enjoy an upsurge 
in business following many lean years, 
when the use of Ada by the Defense 
Dept, was more the exception than the 
rule. Industry officials estimate that the 
rapidly growing Defense Dept, market 
for Ada software passed the SI.8-billion 
mark last year. 

One difficulty m determining the full 
scope of Ada's use by the Defense Dept. 


tv that it is being used on many classified 
programs that cannot be identified, ac¬ 
cording to industry officials Also, the 
Defense Dept keeps no statistics on how 
much it is spending on software dcselop- 
j ment in Ada. or any other language, by 
; program or even as an overall percentage 
of the total defense budget 

The real test for the language is ex¬ 
pected to be how it performs in weapon 
system programs that are employing it 
i for full-scale development How the lan¬ 


guage performs in key programs like the 
ATF and the ATA will go a long way m 
determining its ultimate success, accord¬ 
ing to industry officials 
One worry expressed by many at the 
Ada conference here is that any budget 
cuts that trim or eliminate new weapon 
system programs in which Ada is being 
used will slow the acceptance of the lan¬ 
guage by the defense community and re¬ 
duce the demand for Ada software 
support products G 


Major Software Applications Coded in Ada 


t- 

. Ptagraa 

Statu 

Uses sf 
Cad* 

Tyye sf Seftware 

Caagaay 

1 AIR FORCE 

Advanced Tactical Fighter Planned 

MUstar Development 

Common Ada MiaaM Packagea Development 

Small ICBM Development 

7.000,000 

500.000 

30.000 

2.000 

Embedded 

Commend & Control 
Embedded 

Embedded 

i| 

Lockheed L 
McDonnell !| 
Rockwell 1) 

i- 

ARMY 

l 

intermediate Forward 

Teat Equipment 

Development 

500.000 

Support 

| 

Grumman !i 

Mobile Autometed Field 
: Instrumentation System 

1 Maneuver Control System 

Development 

70 000 

Simulation 

n 

Ford Aero !l 

Complete 

34.000 

Command & Control 

1 Regency Net 

Development 

110,000 

Support 


! Advanced Field Artillery 
Tactical Oats System 

Development 

790.000 

Command & Control 

1 

Magnavox 

| Army Worldwide 

Information System 

Development 

8.000.000 

Command A Control 

TRW 

[navy 

| F-4J Weapon 
| System Trainer 

Complete 

150.000 

Embedded 

SAI 

1 Advanced Tactical Aircraft 

Planned 

NA 

Embedded 


! SOI 

l 

Bettis Management 

and C 1 Portions 

Planned 

10.000.000 

Command & Control 


NASA 

Space Station Software 
Support Environment 

Planned 

750.000 

Embedded 

Lockheed j 

FAA 

Advanced Automation System 

Planned 

NA 

Support 

IBM or GMH | 

COMMERCIAL 

Avionics for Beech Starship 

Complete 

82.000 

Embedded 

Rockwell' 

Senso Station 

1 Simulation Facttty 

Development 

25.000 

Simulation 

Allied Signal 

7J7 Aircraft Avionics 

Development 

NA 

Embedded 

Boeing ! 

i 

OTHER 

Canadian Air Traffic Control 

Development 

1.000.000 

Support 

i 

F-80 Avionics 

1- 

Complete 

NA 

Embedded 

Northrop 


dUiflMtl *aty It Ae t enM u * by It* 
gragrwM Rt Oh atone* tactical flglrtar. TV* 
la. than an rnrni mm aaiai It la tb* Dafaaaa Oagt 

■Hoc m« Cows ammo* Or NA Not A*oAotto 


Th* 

aiataa 


aa WH r a W a mum 
lata tb* laryaat gngraau 

Sam 9n>mr% me 


AVIATION WEEK & SPACE TECHNO-OGV Va':' 86 ‘368 £• 









;iii£ i gin 


COMPUTERS IN AEROSPACE 


r 


General Dynamics Explores Ada 
In Extensive Flight Test Program 


Boston 


A da. the high-level computer program¬ 
ming language, has some limitations 
running real-time embedded computer 
systems, as General Dynamics engineers 
have learned in developing a program in 
Ada for a senes of flights on an F-16 
testbed aircraft 

The L’ S Air Force Technology Inte¬ 
grator program uses an F-16 to flight test 
high-nsk future technologies that the Air 
Force wants to evaluate One operational 
flight program begun in 1986 involves 
21,000 lines of source code, of which 88% 
is wntten in Ada. the language developed 
by the Defense Dept starting in the mid- 
1970s The rest of the program is wntten 
in assembly language specific to the Zilog 
Z8002 microprocessor The Z8002 was 
used to run a communication, navigation 
and identification fnend or foe (IFF) sys¬ 
tem. 

HIGH EXPECTATIONS 

Though limned in scope, this use of Ada 
is one of the first in an embedded system 
that has actually flown This is true de¬ 
spite the fact that the Defense Dept is 
staking the future of many key weapon 
system programs on the use of Ada. 
which has yet to prove itself widely in 
actual use in embedded computer proces¬ 
sors, such as the 12-15 used on board the 
F-16. One other flight test program on an 
F-15 in 1984 also involved a limited use 
of Ada in an embedded processor. 

The F-16 system using Ada is called 
the Data Entry/Cockpit Interface Set 
(DE/CIS) It was originally programmed 
in the Jovial language The system con- 



Alr Fare* Technology Integrator syitm 
Inctetes a keypad and display Oatt caaiala) aa 4 


la Ada lar W|ht taat aa this testbed F-16 
aa elect ranks aalt (aat shewn). 


sists of an integrated control panel for 
entering frequencies for communications 
and navigation radios as well as IFF, a 
display to show the pilot the entries 
made The system also has some control 
stick mounted switches. 

Unlike a similar navigation and com¬ 
munications system, which combines con¬ 
trol of all radios and IFF in one control 
unit on production F-16s, the one pro¬ 
grammed in Ada also incorporates a voice 
recognition feature This allows pilots to 


use voice commands as well as the numer¬ 
ic keyboard found on current F-16s to 
enter frequencies and to change the air¬ 
craft's course. The voice command func¬ 
tion is able to recognize and act upon 
numbers and up to 40 distinct words. 

J. P. Sarkar. avionics software leader 
for General Dynamics on its National 
Aero-Space Plane (NASP) study, previ¬ 
ously led the company 's Ada efforts on 
the navigation and communications sys¬ 
tem for the F-16 He said the Ada-devel- 



Ur Fare* Technology l*ti|ratir F-16 return* tt NASA't Anus-Dry tea wire completed by Banarel Dynamite. Tba aircraft Is ti bag 
Flight Research Facility at Edwards AFI last mentb after modlflcatiens s m art research program this earing (staasr Her. 2.1687. 


a a close air 
a- 78). 


aviaton WEE* & S°ACE TECuND.DC-' 


55 055 
























COMPUTERS IN AEROSPACE 


oped package performed well in more 
than 20 flifhl tests Even though extra 
crosschecks built into the Ada language 
prevent errors from cropping up when a 
program is run. these and other features 
require more computer code to be writ¬ 
ten. w hich slows dow n the speed of execu¬ 
tion However. Sarkar says Very High- 
Speed Integrated Circuits (VHSICs) mav 
reduce the time penalties involved 

Also. Ada compilers, which are essen¬ 
tial tools for programming with (he high- 
level language, need to be refined further. 
Most compilers do not yet incorporate a 
number of optional features in military 
standards established for Ada, which are 
essential for developing programs to han¬ 
dle real-time requirements, according to 
General Dynamics engineers. 

Programs written to run on embedded 
computer systems face two constraints 
First, the programs cannot be too exten¬ 
sive because they must run on compact 
processors that fit in the limited space on 
board aircraft. Secondly, the programs 
must be able to execute tasks at high 
speed to meet the requirements of a real¬ 
time environment On the F-16, for exam¬ 
ple. computers dealing with the physics of 
flight must be able to perform rapid cal¬ 
culations. The aircraft can roll at a rate e r 
360 deg./sec. Computers following this 
motion only update calculations at SO 
ttmes/sec., but this is quick enough to 
present the motion to the pilot as if it 
were smooth and continuous. 

Sarkar and other General Dynamics 
engineers associated with the Ada test 
program said many aerospace engineers 
are concluding that Ada is not suited to 
"hard" real-time applications for aircraft 
command and control software. Hard real 
time is where such software subroutines 
as analog to digital conversions must oc¬ 
cur in less than 10 microseconds, al¬ 
though Ada is suited to “soft" real-time 
applications where the less stringent re¬ 
quirement for subroutines is more like a 
few milliseconds. The General Dynamic's 
experience with the Ada test program on 
the F-16 reinforces this view. However, 
efforts are under way to modify the Ada 
language to make it more suitable for 
"hard" real-time applications, and Sarkar 
expects these efforts to be successful. 

Sarkar said the true benefit of Ada will 


nun CENTER 


VAIUI Of TMI VOLT IN THIU. S. will change by about nine parts per million on Jar 
1. 1990, substantially affecting calibration of sensitive aerospace electronic test 
equipment The change, to align the U. S volt with the world standard, will affect as 
many as 100,000 precision instruments, such as digital multimeters in automatic test 
equipment, used for electronic production, test and maintenance Military, and 
particular! > black programs, are apt to be most affected National Bureau of Standards 
is concerned about the problems and economic impact if industry has not planned 
adequately for extra workload of the phase-in. and will publish a pamphlet with 
suggestions in the fall Contact. Norman Belecki. (301) 975-4223. 


AIR fORCI AIRONAUTICAl SYSTIMS MV. is sponsoring development of hardened 
solar space power systems. The systems are to be hardened against natural and man¬ 
made threats, have a 10-year life, 20% conversion efficiency during periods of 
sunlight, and a minimum weight of 10 watts per kilogram. 


[ ARMY HAS SILfCTID THI THOMSON-CSf/HAMIlTON STANDARD team to supply 56 
; head-up displays to the Army for the Bell OH-58 C helicopters. The HUDs are the 
I first award in the Army's Stinger program to provide the helicopters with an air-to-air 
missile, gun and rocket capability, according to Thomson-CSF First production 
I deliveries are scheduled for 1989. 


I. C. SIMS HAS DIVIIOPID A RICONFIGURARL! COCKPIT system for development 
and training with two or three dimensional displays that simulate television, Flir. 
j moving maps and out-the-window perspective views. The real-time computer-based 
I system can be configured to the cockpit of a specific aircraft quickly and flown 
j through a simulated tactical environment that includes targets and enemy threats The 
! low-cost, flexible system will perform air-to-air, air-to-ground and tactical support 
l missions. 


AIR FORCI WANTS TO DIVIIOP A HIGH-POWIR MKROWAVI (HPM) SOURCS 

generated by broadband video pulses switched by bulk avalanched solid state laser 
triggered switches. Current HPM generators include magnetrons, vircators. klystrons, 
gyrotrons and free-electron lasers. The first phase of the planned 26-month effort will 
develop a single element power module. The second phase will develop a 5 x 5 
antenna array of power modules. High-power microwaves have potential as future 
tactical weapons against both electronics and personnel. 


ROYAl NORWIGIAN AIR FORCI will install Collins Global Positioning System 
(GPS) receivers on its fleet of Falcon 20 aircraft, which will be used for airfield 
certification and as VIP transports. The Rockwell division is also building military 
GPS receivers for the U. S. Defense Dept, with a potential value of $454 million. 


U. S. AIR FORCI has exercised an option to purchase 122 additional terrain-following 
radar systems from Texas Instruments for F-Ul aircraft Deliveries under the 
contract, the second of seven anticipated lots, will be made by the end of December. 
The contract, worth $88.5 million, is part of a total program for 450 radars plus spares 
that will run through 1991. Texas Instruments completed first-lot deliveries of 68 
radars at the end of 1987. 


he seen in the maintenance phase. The 
requirements of design updates on embed¬ 
ded computer systems like those found in 
the F-16, which has 12-15 per aircraft, 
requires constant changes to be made to 
the programming. These changes will be 
much easier to make if the original pro¬ 
gram is developed using Ada rather than 
some other language. 

The original F-16 flight testing of the 
DE/CIS system ended late last year, but 
flight testing is resuming in a follow-on 
Air Force contract awarded for the AFTI 
program. □ 


ARMA Oil CARABINlIRIi the Italian Army's Judiciary Police Branch, has awarded 
Datapoint Corp. a $2.7-miUion contract for local area network-based computer 
systems. The contract calls for 58 Datapoint processors and 10 terminals to be used to 
configure Attached Resource Computer (ARCNET) local area networks at Carabinie¬ 
ri installations throughout Italy. Each network site will use Datapoint’s Resource 
Management System (RMS) network-oriented operating environment. 


AIR FORCI HAS AWARDID SINGIR a $77-rrullion Joint Tactical Information 
Distribution System contract. Singer will provide class two terminals for the Air Force 
E-8A Joint Surveillance Target Attack Radar System aircraft and for the Navy's F-14 
and E-2C aircraft. JT1DS is designed to use spread spectrum and fast frequency 
hopping techniques to transmit digitized, jam resistant, secure voice and data and to 
provide precise relative navigation to the U. S. military and NATO. 


1 

j 




I 

i 

I 

I 

i 

t 


a '986 ? 


AViA^iON WEEK & SPACE TEChNDlOG* W— 






Do-While Jones 


Ada Info 





Why the Navy Doesn’t Use Ada 


Insiders have known tor some timt that the 
Navy haa fallen behind the other service* 
when it come* to Ada. The Navy position 
was obvious even to outsiders at the Sixth 
National Conference on Ada Technology, 
March 14-17. There the Air Force and 
Army proudly talked of their major Ada 
projects, especially CAMP (Common Ada 
Missile Packages) and RAPID (Reusable 
Ada Packages for Information systems De¬ 
velopment). The Navy spent most of the 
conference avoiding questions. How did the 
Navy get so far behind? 

The three services all recognized the 
need to develop Ada compilers and support 
environments yean ago. The Amy awarded 
a contract for the development of the Ada 
Language System (ALS), and the Air Force 
funded an Ada environment called AIE. 
The Navy saw this as a duplication of effort, 
and wisely decided not to develop a third 
environment. They chose instead to monitor 
the development of the ALS and AIE. with 
the intention of adapting the better of the 
two for Navy use. 

The Air Force quickly decided to can¬ 
cel the AIE development contract. They told 
vendors they would use any validated Ada 
compiler targeted to the Air Force standard 
1750A computer architecture. Today there 
are validated Ada compilers for 1750A tar¬ 
get computers, and the Air Force Ada effort 
is going strong. 

Since AIE dropped out of the race 
early, the ALS won by default. The Navy 
announced its intention to adapt the Amy's 
ALS for Navy use by replacing the Amy 
compiler with a compiler targeted to the 
Navy standard computers. The Navy ver¬ 
sion of ALS was to hi called AJL&N. 

The ALS went into Beta teat It was 
so big it would fit on a VAX 780 only if the 
VAX was dedicated to a single user. It had 
compilation speeds reminiscent of the old 
NYU Ada-Ed translator of years ago. It 
generated code that didn’t have a ghost of a 
chance of running in real-time embedded 
computer applications. If that wasn’t bad 
enough. Motorola and Intel were selling 
much better microprocessors than the 


Amy standard microprocessors The Amy 
was stuck with a terrible Ada environment 
for a family of state-of-the-past computsrs. 

The Amy came up with a brilliant 
solution. With great fanfare they announced 
the successful completion of the ALS pro¬ 
ject. They generously placed the technology 
(which had cost so much money to develop) 
in the public domain so everyone could ben¬ 
efit from it. At the tame time they casually 
mentioned they would be using commercial 
Ada environments for rugged versions of 
commercial microprocessors, instead of the 
ALS. The Amy Ada efforts are doing quite 
well now. 

The Air Force and Amy generals 
know there are times when you have to 
lose a battle to win the war. The failures of 
AIE and ALS were stepping stones to vic¬ 
tory. The Navy has a different tradition. 
"The captain goes down with the ship." 

Although studies done in Navy labs 
show that the ALS/N is inadequate for 
Navy applications, the Navy insists on a 
policy of requiring the ALS/N for all Navy 
Ada applications. In other words, the Navy 
has given the mes sage to compiler vendors, 
"Don’t bother designing Ada compilers for 
Navy standard computers, because we 
won’t buy them." That’s why there are no 
compilers for Navy computers today. 

After boldly stating that the Navy 
would use ALS/N tor Ada development in 
1990, Admiral Quast hastily left the Con¬ 
ference before anyone could ask him any 
embarrassing questions. I suspect he knew 
someone would ask, "Hasn’t ALS/N been 
cut from the budget?" (It has since received 
84 million that was taken from other 
projects.) Three times I heard people ask, 
"How can a software contractor bid on a 
Navy pr oj ect when the Navy insists on re¬ 
quiring the contractor to use ALMfT They 
never got an authoritative answer because 
the Navy brass wasn’t thare to answer the 
question. 

I tried to give Commander Barber a 
chance to redeem the Navy’s tarnished 
image. I publicly asked this carefully 
worded question: "If any vendor validates 


an Ada compiler targeted to a Navy uan 
dard computer, and that compiler is clearly 
supenor to the ALSN. will the Navy allow 
it to be used?" I hoped he would say. Of 
course. The Nsvv always uses the best 
technology available.” His answer was. 
"Maybe we will think about it.” I suppose 
that’s better than a flat "No." 

So how are software contractors 
going to bid on Navy contracts 7 Well, if I 
was going to bid on a Navy project. 1 would 
bid it with the intention of using my favor¬ 
ite Ada compiler on my favorite host com¬ 
puter. In the years it takes to complete the 
project, the ALS/N might become a useful 
product, or the Navy might adopt a reason¬ 
able policy concerning the use of a third 
party Ada compiler targeted to the Navy 
computer. If this happens, I would recom¬ 
pile the Ada source code (which I developed 
on my favorite compiler) using the Navy 
cross compiler. Of course I would be careful 
to isolate the machine dependent code to a 
few 10 packages (but one should do that 
anyway). The bodies of these packages 
would have to be rewritten before recompil¬ 
ing, but the rest of the source code would 
remain unchanged. Not much would be lost 
switching from my favorite environment to 
the Navy system. 

We have to take into account the fact 
that the ALS/N may never be of any use, 
ai d independent vendors might not risk de¬ 
veloping a compiler for a market that 
might not exist. Then the fall back plan is 
to translate the Ada design to CMS-2 for 
the Navy computer, or get a waiver to use 
another computer of my choice, which has a 
good Ada compiler. That wouldn’t satisfy 
the original contract, but all contractors 
know to get into a poaition where they can 
propose a contract modification that the 
government can’t refuse. 

What should compiler vendors do? 
That depends on how they feel about tak¬ 
ing chances. If one vendor goes out on a 
limb and develops a compiler for the Navy 
standard computers, and the Navy decides 
the logistics of maintaining spare parts for 
a limited number of computers outweighs a 


Journal of Pascal, Ada, & Modula-2, Vol. 7, No. 5, pp. 40-41 (1968) 

O 1988 by John Wiloy ft Sons, Inc. CCC 0735-1232/88/050040-02804 00 




romantic devotion to ALS/N, that vandor 
could corner the Navy market. On the 
other hand, there may never be a Navy 
ftandard computer market, and all the de¬ 
velopment coat will be loet. 

Before you all start to write me let¬ 
ters telling me that you know of a Navy 
Ada project or two, let me assure you that I 
know about some, too. I'm not saying there 
aren't any Navy Ada program*. I'm juat 
saying there are noticeably fewer Navy 
programs than the other services Perhaps 
the key word here i* "noticeably." The 
Navy programs I know of are grass roo.« 
programs undertaken by Navy laboratory 
engineers with little or no backing from 
Washington Perhaps theae programs are 
intentionally taking a low profile to avoid 
the nsk of their sponsor telling them not to 
take such a risky approach and stick with 
an established language. 

The official Navy position is that the 
Navy supports Ada, but actions speak 
louder than words. If the Navy really sup¬ 
ports Ada, why was the Navy Ada imple¬ 
mentation plan so late. (I use the past tense 
because I hope it will be done by the time 
this is published. Perhaps it still isn't done I 

It seems to me that sooner or later 
the Navy has to get with the program and 
follow in the path of the Air Force or the 
Army They either have to open the market 
to third party vendors (like the Air Force 
did), or switch to a computer that already 
has good Ada support (like the Army did). 
Until they do, they will remain up a creek 
without a paddle. 




ULA"2 


Somtthrmg about mama am adaamemd lamgmag* tmtpira groat 
ivov*. Tike world': mat programm e r ! emootm Modula-2. 

PM I p a Mubm t tkm 1m of timn tffortv 

* Repertoire*.' By Charles Bradford and Cole Btecheen After 

live ms tor new releases since its introduction m 198V 
Rtptrtotn is n~w the most mature, reliable, and widely used 
Modula-2 ojlkit in the world Provides compiler 
mdeper> *.e at both source- and object-code le- els, source 
works without change under any M2 compiler, ob)*ct code 
«• oi«a conveniently with any Micro*oft<ompatible language 
(prototyped headers for C included) Includes unusually 
powerful screen design/display system, sophisticated list- 
oriented DBMS, teat editor, natural language analyxer, 
transparent EMS compatibility; and extensive string 
manipulation support includes full source (over 1 2 , Q . 
MB), and 400 page manual.. *09 

* Grapkix: By Leonard Yates. The Modula-2 interface to the 
remarkable Mrta Window graphics library Supports 
multiple fonts, mouse tracking, many printers (incl Post¬ 
Script h LaserJet), over 50 display adapters, and hundreds of 
modes. Includes Mrta Window package. 

With source:* • • *189 Object only . . . *149 

* Rtprrtoirr*/Btrirrt* Toolkit: By Gregory Higgins 

Novell/SoftCraft's Btrieve file manager is the standard for 
large business applications. R/BT is a massive support 
system for building Btrieve applications with Rtpartona'i 
screen system includes a complete customizable customer¬ 
tracking application. Ideal for consultants. Includes .. .. 
full source for both Re p ertoire and R/BT. .* I 4a 

* MacroT“: By Kurt Welgehausen. Brings the full power of C's 

macro preprocessor to Modula-2; provides DEFINE, 
UNDEFINE, 1FDEF, IFNDEF, INCLUDE, etc, for 

parameterized macro functions, conditional .qq 

compilation, etc Includes full source:. *09 

* HttMotf*: By Donald Dumitru Makes it easy to take 

advantage of Novell’s Nat Wan operating system for local- 
are* networks Provides simple, efficient access to every 
important function of Admamcmd NrtWan 2 0 Includes 

thorough documentation and full .hq 

source code..*09 

* DymaMatnx m : By James Bones. A complete object-oriented 
library for manipulating large, sparse matrices 

With source * • • • 69 Object only:. . . . *49 


With source: 


* EmiStoragt™: By Charles Bradford and Cole Brecheen 

Primitive EMS systems can’t allocate chunks smaller than 
16K, EmiStoragt is an advanced, handle-oriented, high-level 
system that manages objects as small as 1 byte. Detects and 
uses LIM Expanded Memory if present, or DOS mem¬ 
ory if not. Provides automs’ic •*« 

garbage collection.. *4? 

* Mod Bam: By Donald Fletcher. A B-Tree DBMS that uses a 

data file format compatible with dBase III. Includes .. n 
full source.*. *09 

* Potpourri: An extensive catalog of small, inexpensive 

modules. Please call for your copy 

* Ceasing Seen; Serial Communications Library 

Supported to mpd ar v JP1 TopSpeed, Logitech, StonyBrook. 
FSt/FTL, at ml. 

Overseas shipping:. *10 

All productt ammilabh t x dm um dy from PMI: 
dmalrr fapxiwi s ttdeomm. 













shipped 737.500 terminals. 
That number rose 11% in 
1986 to 833.000. but despite 
the jump in terminal sales, 
dollar volume for the year 
dropped to $1.42 billion from 
$1.48 billion in 1985. 

According to analysts. 
IBM has remained a formi¬ 
dable competitor in the termi¬ 
nal market, although in 1985 it 
slipped one percentage point 
in market share to the plug- 
compatible competition, 
mainly Telex. In 1985. IBM 
had 57 6% of the 3270 mar¬ 
ket, followed by Telex with 
16.1%. ITT Courier with 7.1%. 
AT*T-Teletype with 4.7%, 
Memorex with 3 4%. Lee 
Data with 3.2%. Harris with 
2.7%, and the remaining com¬ 
panies with 5.3%. 

(wpiOwi Orifce Ink 

But even in this new era 
where more terminal ship¬ 
ments mean less dollars, 
some plug-compatible ven¬ 
dors are holding their own. 

Instead of going offsnore 
fot margins. Telex Corp.. 
headquartered in Tulsa. 
Okla.. has made a large in¬ 
vestment in a fully automated 
terminal manufacturing facili¬ 
ty in Raleigh, N.C.. and an 
automated distribution and 
repair center in Tulsa. 

Last week, Telexdntro- 
duced its entry into the 3191 
market, the Telex 191. which 
will initially be available only 
in the U.S. Like the 3191, it is 
built in a completely automat¬ 
ed facility to keep costs down. 
The 191 attaches to either a 
Telex or an IBM control unit It 
offers an 88-key keyboard or 
a recently announced 122-key 
keyboard. An added optional 
feature is the ability to attach 
a light pen or a message print¬ 
er. The 191 lists for the same 
price as its IBM counterpart, 
with a 90-day warranty. 

According to Mike Bow¬ 
man. product manager for 
Telex's 3270 terminals, the 
company will be competitive 
with IBM on volume discounts 
and warranty periods, which 


run as long as three years. 

Other vendors to enter 
the 3191 market include Bee¬ 
hive International (with an en¬ 
hanced 3278 offering) and 
Memorex. both in San Jose. 
ITT Courier, also in San Jose, 
is readying its 3191 entry for a 
March announcement 

"It is an overriding situa¬ 
tion. Plug-compatible ven¬ 
dors must have a 3191-com- 
paoble product because that 
is now the entry point for 
3270 terminals." Wagner 
says. 

As terminal pnces drop, 
plug-compatible vendors 
have to look to other seg¬ 
ments of the market to make 
up for slipping 3270 margins. 

"Telex has expanded 
into new markets that com¬ 
plement and expand our 3270 
[offerings]," says Pat Reiner, 
vice president of marketing 
and product planning for Tel¬ 
ex. “For example." she says, 
“in July of last year, we an¬ 
nounced a new senes of aif- 
line [reservation] terminals. 
In September we introduced 
the C078 voice/data terminal, 
and in November we entered 
the System 3X market with 
nine new products." 



"THE TERMI¬ 
NAL GIVES 
IBM ROOM 
TO CUT 
PRICES." 

Analysts also say that 
specialised products like the 
voice/dau terminal and air¬ 
line reservation terminals can 
still command higher prices 
and margins for Telex. Com¬ 
panies such as Lee Data, Min¬ 
neapolis. and Memorex are 
the only terminal vendors 
now offering a more diversi¬ 
fied product tine. 


Another area in which 
Telex is doing well is control 
units. At the ume of the 3191 
announcement. IBM also said 
it would add multiple sessions 
and windowing capabilities to 
its control unit, but Big Blue 
has yet to offer a control unit 
with these features. How¬ 
ever. analysts say IBM is 
readying products with these 
features for release some¬ 
time in the first half of this 
year. 


In the meantime, compa¬ 
nies such as Telex are taking 
advantage of the time by 
bringing out products that 
match IBM's direction. 

Telex recently intro¬ 
duced its 274 control unit with 
window g, which allows 
3270 terminals to configure 
up to four displayable win¬ 
dows of four different host 
sessions. Data can be copied 
horn one window to another, 
even if one of the windows is 
an ascii host session. The 
control unit also supports the 
IBM 3I79G graphics support 
feature, which enables an at¬ 
tached 3179G to use the all- 
points-addressable (APA) 
graphics support available 
from the host computer. 

According to Telex's 
Bowman, when his company 
incorporates announced fea¬ 
tures from IBM, as in the case 
of the control unit, the vendor 
must adhere to strict compati¬ 
bility. 

"These vendors don’t 
want to jepordize their plug 
compatibility. They don’t 
want to extend themselves 
too far away from IBM," says 
IOC’s Goldman. 

In the short term, ibm is 
taking a ve^ aggressive pos¬ 
ture in the j 270 business as it 
attacks its competition's 
strongest selling point- 
price. But. until IBM can deliv¬ 
er all it has promised in the 
area of control units, there is 
plenty of room in the market 
for the plug-compatible 
vendors. ■ 


LANGUAGES 


What the 
Countess 
Didn’t 
Count On 

Ada continues its 
slow march to 
the dp world, but 
can it shake off 
the DOD image? 

BY EDITH D. MYERS 

Ada. the Department of De¬ 
fense-mandated program¬ 
ming language named for Ada 
Augusta Byron. Countess of 
Lovelace, is hardly topping 
the wish lists of corporate MIS 
managers. 

There are those who 
think it should and those who 
think it someday will (see 
"Ada Fans Say Now's the 
Time," May 15. 1984. p. 38). 
and there are some things 
happening that could propel 
the language into a prominent 
position in the world of com¬ 
mercial data processing. 
Foremost in most minds was 
IBM's seeming endorsement 
of the language when it leaked 
news at a SHARE meeting in 
August that it would be offer¬ 
ing Ada compilers and pro¬ 
ductivity tools for 370 sys¬ 
tems running under mvs and 
vm/CMS. This disclosure 
eventually materialized as an 
agreement between IBM and 
Telesoft, San Diego. 

Despite the IBM impri¬ 
matur, Ada apparently still 
has neither extended Us iden¬ 
tity nor ventured beyond the 
military/industnal world. 
One of those reasons, of 
course, is the entrenchment 
of languages such as COBOL in 
dau processing departments. 
Another is the relatively re- 


a Datamation .7 itstuAtv i 1987 







4.11® 

7 it® 
9 ’<« 
?«'» 
*93® 

-i-C’M 

*J 9fH 

4-JKO 

»5f10 


3 "I* 

i oi® 

7-01*5 


»’»*C 
♦ "SI 

2'198 

3 1191 

411*4 

11 mO 

».ii6i 



cent incursion of so-called 
fourth generation languages 
from a number of vendors. 
Says Michael Ryer, director 
of Ada products (or Internet- 
rics !nc.. Cambridge. Mass.. 
"There is a great inventory of 
billions of lines of COBOL code. 
You can t very well rewrite 
every' single line, and it's hard 
to put a little bit of Ada on top 
of a lot of COBOL." 

Nevertheless. Ada is 
moving along and is finding 
applications. One of the most 
visible areas where this is be¬ 
coming true is in the aircraft 
industry. 

Some of the lure for air¬ 
craft manufacturers to use 


"WE'VE GOT 
THE BEGIN¬ 
NING OF THE 
BUILDING OF 
AWAVE." 


Ada. primarily in embedded 
applications, is from the ef¬ 
forts of a working group of the 
Systems Architecture and In¬ 
terfaces subcommittee of the 
Airline Electronics Engineer¬ 
ing Committee (AEEC) of 
Anne Inc.. Washington. D C., 
a nonprofit organization 
owned by a number of major 
airlines and manufacturing 
companies that provides re¬ 
ports and specifications for 
th ; avionics industry. 

Last month, the working 
group held a second meeting 
to review what is currently 
Anne's proposed paper 613. 
which provides guidelines for 
using Ada in avionics design 
and which could become the 
Arinc report <M3 by midyear, 
giving it a lot of weigh' with 
avionics designers. Paul Pri- 
saznuk. avionics engineer 
with AEEC. says the instiga¬ 
tion for. as weU as much guid¬ 


ance in. the work came from 
Boeing Co., which plans to 
use Ada in the development of 
its 7J7 aircraft. 

iteleeH— et Meleg 

Brian Pflug, manager of 
software engineering for avi¬ 
onics design. Boeing Com¬ 
mercial Airplane Co., says 
Boeing definitely plans to use 
Ada in the 7J7 project if "the 
state of the technology 
proves such that there will be 
a cost benefit. We've told all 
our suppliers (for the 7J7 
project! that that is our direc¬ 
tion and we're in the middle of 
a project right now to deter¬ 
mine if that is correct.” 

He says the project in¬ 
volves benchmarking cur¬ 
rently available Ada compil¬ 
ers to determine the efficien¬ 
cy of code produced. An 
earlier, similar evaluation for 
the prototype stages of the 
7J7 project was inconclusive 
to the point that Boeing then 
left it up to its suppliers 
whether or not to use Ada. 

“The quality of the code 
produced by the compilers 
was not always as efficient as 
it could be in terms of space or 
time.” says Pflug. "It has 
nothing to do wuh the lan¬ 
guage but rather with the ma¬ 
turity of compilers. Most are 
fairly new." He says the cur¬ 
rent project has a targeted 
production decision date of 
August of this year. 

Pflug says about 100 
companies are candidates to 
be suppliers of avionics equip¬ 
ment for the 7J7 project, with 
15 to 20 of them probably des¬ 
tined to be major suppliers. 
The aircraft is scheduled for 
first customer delivery in 
1992. 

On another commercial 
front, a big push for Ada prob¬ 
ably will come from creation 
of a Commercial Ada Users’ 
Working Group (CAL wc) un¬ 
der the banner of sigada 
(Special Interest Group on 
ADA) of the Association for 
Computing Machinery (ACM). 
Corporate members include 


GTE. Stamford. Conn.; Lear 
Siegler Inc.. Los Angeles; 
Boeing Co.. Seattle; Ad¬ 
vanced Computer Tech¬ 
niques. New York; and CRi 
Inc.. Santa Clara. 

The working group first 
met in November in conjunc¬ 
tion with a SiGada Ada Expo 
conference in Charleston, W. 
Va.. and now has scheduled a 
third meeting for March 17 in 
Washington, D.C. 

Dave Dikel, director of 
Washington. D.C., operations 
for Addamax Corp., a Cham¬ 
pagne. 111.-based contract 
software service firm focus¬ 
ing on the Ada market, and 
chairman of cal'wg. says he 
was asked to fmd a commer¬ 
cial Ada users group by the 
Ada Joint Program Office 
when an investigation he was 
conducting into commercial 
uses of Ada was terminated. 

He said his investigation 
had unearthed the facts that 
there was "substantial" com¬ 
mercial work being done in 
Ada. that users tended to be 
secretive about what they 
were doing, that there was no 
single good source of infor¬ 
mation on Ada, and that there 
were a lot of "ghost facts" 
around, a prevalence of bad 
information. 


“I looked for a group but 
didn’t find one,” Dikel says. "I 


* 

2 

r * 

/ 

/ 1 

r '< 

EST0N 


hCMTCn ! 1 


Caspar WaMwftr; Thar* wM b* 
fewer DOS wafvan m Ada. 


approached the users com¬ 
mittee of sigada and found 
there was no group focusing 
on commercial uses and was 
asked if 1 wanted to start 
one." This he did with some 
financial backing from aJPO. 
Formation was started in 
March 1986. "Our aim is to in¬ 
fluence development of effi¬ 
cient standards and prod¬ 
ucts." he says, "and to fight 
the prevalent image that Ada 
is a government thing, is a 
DOD thing." 

But, he says, “the DOD 
has a key role in our group. 
There are a number of key ex¬ 
ecutives in DOD who are de¬ 
termined to get the best tech¬ 
nology for their dollars They 
are buyers of commercial 
products for pnees with lots 
of zeros. We welcome their 
support.” 

"We’ve got the begin¬ 
ning of the building of a 
wave," predicts Paul Fuller, 
vice president of marketing 
and sales at CRi. “ We'll be get¬ 
ting fallout. Companies like 
Lockheed. Martin Marietta, i 
and McDonnell Douglas will j 
have to train thousands ot 
people in Ada (for work on de¬ 
fense contracts) so why 
would they want to write their 
own in-house systems in C?” 

Edward V. Berard. 
founder and president of EVB 
Software Engineering Inc.. 
Frederick. Md.. notes that 
“the U.S. is the only place on 
the globe in which Ada is 
thought of as being primarily 
military. In Europe. 85% of all 
Ada applications are commer¬ 
cial. Japan is a huge commer¬ 
cial consumer of Ada." 

Grady Booch. director of 
software engineering for Ra¬ 
tional, Mountain View. Calif.. 
which provides software de¬ 
velopment technologies 
based on Ada. says language 
is the least important aspect 
of the Ada movement, but 
"people relate to a language." 
TTie big thing, he believes, is 
software engineering, a disci¬ 
pline he thinks is scarce in the j 
U.S., which accounts, in pan. i 


DATAMATION _ rEB«UA«v ■■ -967 *5 











News in Pferspeetivp 



for the more rapid spread of 
Ada elsewhere. ‘The Euro¬ 
peans. as a whole, take soft¬ 
ware a lot more seriously than 
we do. They don't have the 
money to waste that we 
have.'' 

Booch says two past bar¬ 
riers—the lack of people well- 
trained in Ada and the lack of 
good compilers—have been 
lowered. "We are seeing Ada 
taught in the universities now 
and there are a lot of good 
compilers out there.” he says. 

One of the first compa¬ 
nies to come out with Ada 
compilers was Telesoft. and 
the San Diego company's 
agreement with IBM for both 



"IT'S HARD 
TOPUTAUT- 
TIE BIT OF 
ADA ON TOP 
0FAL0T0F 
COBOL." 


compilers and programming 
tools is considered to have 
much significance by both the 
company and its competitors. 
Fuller says IBM's association 
with Ada will promote the lan¬ 
guage to the commercial 
world. 

"If IBM didn't tout it 
[Ada], it would have the same 
luck as Pascal Why is C not 
more popular? Because of 
IBM's reluctance to support 
it.” sats Fuller. 

He also believes Digital 
Equipment Corp.'s heavy in¬ 
volvement with Ada will help 
advance the language in com¬ 
mercial markets. “We have 
the (wo biggest commercial 
'computer! companies in it 
Everyone else will want in 
too." DEC offers a range of 
Ada products, both hardware 
and software 


Telesoft, too. believes 
the maturation of the market 
led IBM to come knocking. 
“We have been working with 
IBM for three or four years," 
says Bruce Sherman, Tele¬ 
soft director of marketing. 
"Until now, it was with the 
Federal Systems Division on 
specific government pro¬ 
grams. As the Ada market be¬ 
gan maturing over the last 
few years, the commercial 
side of IBM decided to talk to 
us." 

Telesoft also has an 
technology exchange agree¬ 
ment with Prime Computer. 
Natick. Mass. Prime isn't of¬ 
fering an Ada product now, 
nor would product manager 
Wolf Metzner say when the 
company would. He did say 
that he sees a lot of potential 
for Ada m large systems, 
"which Prime is getting into 
with its high-end machines.” 
He notes that Prime does half 
of its business outside the 
U S., “where Ada interest is 
high." 

There are other encour¬ 
aging signs, too. Two rela¬ 
tional database management 
systems in Ada have been an¬ 
nounced. One was announced 
more than a year ago by CRi of 
Santa Clara, and the other, in¬ 
ternally called Adaplex, is un¬ 
der development by Comput¬ 
er Corporation of America. 
Cambridge, Mass, cca's 
product is due for beta site in¬ 
stallation late this year. 

Two other producers of 
relational database manage¬ 
ment systems. Relational 
Technology Inc.. Alameda. 
Calif., and Oracle Corp., Bel¬ 
mont, Calif., are offenng Ada 
hooks to their software, pri¬ 
marily to get their feet into 
the government market but 
with an eye toward future 
commercial users. 

Says Toby Younis, man¬ 
ager of technical support, fed¬ 
eral operations for Oracle, 
"Ada has a great deal of po¬ 
tential and, when it blossoms, 
we (hope to be| leading the 
pack." ■ 


BENCHMARKS 


Bvys Graphics Rtn 

Bolt Beranek & Newman 
Inc., Cambridge, Mass., has 
acquired Delta Graphics Inc., 
a Bellevue, Wash.-based de¬ 
veloper of computer image 
generation systems for simu¬ 
lation and animation applica¬ 
tions. The acquisition, in the 
form of a stock deal, is valued 
at S16.5 million. Delta Graph¬ 
ics markets its products pri¬ 
marily to government and mil¬ 
itary agencies. Last summer. 
Delta Graphics was awarded a 
$30 million contract to pro¬ 
vide its Simnet distributed 
multiuser training system for 
military vehicle operators to 
the Defense Advanced Re¬ 
search Projects Agency and 
the Army. Bolt will operate 
Delta as BBN Delta Graphics 
Inc. 

liiyOffatWnt 

Weaker than expected sales 
at Wang Laboratories have 
prompted a new round of belt- 
tightening measures, includ¬ 
ing the elimination of 1.000 
jobs and a 6% wage cut for all 
salaried workers. An estimat¬ 
ed $35 million loss for the fis¬ 
cal second quarter ended Dec. 
31, 1986. was also blamed on 
overly optimistic sales pro¬ 
jections. the company says. 
The sue of the loss may be 
larger depending on results of 
an asset evaluation under way 
at press time, a spokesman 
says. Wang Labs two years 
ago began releasing workers 
after sales growth lagged be¬ 
hind expectations. Some 
1,600 jobs were eliminated 
Last July and a similar number 
were let go a year earlier in re¬ 
sponse to lower sales. The 
latest cutbacks will pare annu¬ 
al expenses by approximately 
$50 million and trim the em¬ 
ployee roster to about 30,000 
people. 



ihm has rid itself of two un¬ 
profitable businesses in re¬ 
cent weeks. The first was In¬ 
ternational MarketNet. a two- 
year-old joint venture with 


aa datamation HBtuAtr i ns; 


Memll Lynch & Co. designed 
to serve the financial services 
market. Imnet. New York, be¬ 
gan shipping its standalone 
micro-based System 100 in 
June, but was never able to 
complete its cornerstone 
product, the Senes/1-based 
System 500. The companies 
say the decision was made 
upon reassessing the financial 
viability of the venture. The 
majonty of Imnet's 250 em¬ 
ployees have been laid off. 
The second consolidation 
was that of IBM Instruments 
Inc., formed in 1980 to sell 
chemical analysis tools to lab¬ 
oratory scientists. The unit 
employed 150 people who the 
company says will be reas¬ 
signed. IBM has sold its inter¬ 
est in two small firms that 
manufactured some of the in¬ 
struments under IBM's label. 
IBM says it will continue to 
service products it sold in the 
last five years. 

iMvtof HmFoM | 

Unisys Corp.. Lockheed ! 
Corp., and Allied-Signal Inc. j 
have all announced plans to ; 
withdraw from Microelec- j 
trorucs and Computer Tech¬ 
nology Corp. by the end of 
this year. The decision by 
these three companies to 
leave the fold brings the num¬ 
ber of active members down 
to 18. According to a spokes¬ 
person for the Austin. Texas- . 
based MCC. the withdrawal of ! 
these companies is unrelated 
to the resignation of Adm. 
Bobby Ray Inman. MCC's first 
and only chief executive. Al¬ 
lied's sale of its Amphenol di¬ 
vision ended the Momstown. 
N.J.. company's interest in 
the venture. A spokesperson 
for Lockheedi headquartered 
in Burbank. Calif., says that 
the aerospace company's de¬ 
parture had nothing to do with 
Inman's resignation or the 
other departures from MCC. 
Last year. Gould, bmc. and 
MosteW-all left vice, but the 
research consortium picked 
up Hewlett-Packard and Wes- j 
tmghouse. • 1 










/V«i; 


Bxcl 

Ada Information ClaaiinoMouaa 
•porworad by vw AOa Joint Program Office 



TheliUtnatumaiLai^yaft 
fr Seftmart Eatumrmg 


Commercial Applications in Ada 

R aprtntad wftn permission of tbs authors, 

Ann 8. Eusties and Saury Lynch 


When the U.S. Department of Defense (DoD) offered 10 
subsidize the creation of a new language for embed led 
systems in 1979, it was searching for a solution to the 
armed services’ software problems. Their embedded 
computer systems that controlled airplanes, submarines, 
ettL, were written in dialects, which required unique 
compilers and tools. Because each piece of software had 
a vocabulary specific to it, the DoD's laboratories could 
not easily and inexpensively alter software as their needs 
changed, or port it to new hardware platforms, or depend 
on the result. 

The DoD’s solution was to establish a competition 
for the creation of a powerful language that would 
embody modem software engineering techniques. After 
the de pmm e w chose what it considered to be die best 
language, it mandated that all new embedded systems he 
written in MIL-STD-1815A, or Ada. It was accepted as 
an int e rn a ti o n a l standard, and other countries’ defense 
depa r t m e n ts, such as those of Germany, France, and 
Australia, alio began mandating or introducing Ada to 
their software laboratories. As a result, a decade ago 
almost everyone who used Ada did so under a general’s 
aeden. Today, the language has infiltrated some com¬ 
mercial seoon which have the same software problems 
of maintaining and reusing their software, and re iook- 
it % for the same solution in Ada. 

This trend of certain c om mer ci al secton accepting 
Ad is we l com e news to vendon of Ada compiien and 
developmen t tools. ,Sinw th e iw«nui i«i«i "outb reak of 
peace", brought on by the collapse of Warsaw Pact and 
the demise of the Soviet Union, Ada product vendon 
have been motivated to explore market niches outside 
die Pentagon in anticipation of defense budgets shrink¬ 
ing in the *90>. 

The commercial sector can expect to receive mare 
tel e phone calls not only from Ada product vendon but 
also from Ada programnien and trainen who will be job 
hunting as defense^reistedbidusoies lay off staff. Wells 
Engo r 'Ttko, in Sanftmciico, Chlif, for example, dies 
the availability of highly experienced Ada prognmmen 
as one rereon it chore the language for its new invest¬ 
ment analysis application. 

While a reduced demand for Ada products and 


developers in the defense maricet may increase the 
co mm e rc ial use of Adam the future, those in the private 
sector who use Ada now are reacting to different eco¬ 
nomic forces. Most developers of commercial 
applications interviewed for this article mentioned Ada 
software engineering features, such as packaging and 
information hiding, as their main reason for choosing the 
language. Others chow Ada because it was known to 
facilitate reuse and the development of large applica¬ 
tions. Both characteristics increase the software’s 
reliability, which aviation and spuce agencies and finan¬ 
cial services companies mentioned as the deciding factor 
in using Ada in their new applications. 

Ada in Financial, services 

One of die early high-profile Ada successes was with 
Reuters financial services in Hauppauge, NY. Reuters 
is best known as a British international prim and photo 
wire service that transmitt real-time information on 
financial markets and news. Lesser known are its 
auto m ated currency futures trading and options trading 
systems for the Chicago Mercantile Exchange. 

Reuters' two systems exiaMetnder-UHrader com¬ 
munication and automate the matching of orders. The 
systems respond within two seconds, handle high loads, 
and improve the presentation and usefulness of data to 
clients. Most inqxvtantly, the software must transmit 
and process the data absolutely correctly and on time. 
Because the appUcrekm had to carry a hewy load of data 
accurately and quickly, Reuters ran a greater risk of the 
softwve failing due to its complexity. The resultant 
mistakes could have been extraordinarily costly. Ac¬ 
cording to Alfred H. SdtoOdorf, manager of Advanced 
Projects, after studying the and building a 

prototype sysmm in 19S5, Reuters decided that using 
Ada was "required for success". 

Each system used eight Ada de ve loper s to write 
250,000lines of code. Remen invested 25 staff-years to 
build each application’s 10 major subsystems. They 
now ran on several lie VAX machines with multiplex 
inputs vriviag from PCs in New York. Chicago, Lon¬ 
don, aid Tokyo, which are broadcast to other PCs 
internationally. The applications process billions of 


FORM OIOS-1 IMA 
OOMMARM.MLR 

o 


AW I C . waraM by IfT Wmaiah Iw a W iaa 
W.O. N> nm , W — M nim. DC ao ouo- u— 
i/aoo awic. 1 i, nasM-iarr. wax t o mii wit 

C a wuMSa i v a IWltasoi I w l am a i aJali ilaOalua.»x.CTTKj»«Ju 








Commercial applications in Ad 


Belgium and Switzerland leading the way. Banksys, an 
organization responsible for electronic fund 
transfers in Belgium, also develops systems for use in 
other countries. The system is baaed on Tandem central 
computers, a private X2S network, terminal concentra¬ 
tors, and Banksys-deveioped terminals. 

Having originally developed the system in C and 
asse mbl er. Banksys decided to change to Ada because 
of its real-time capabilities, ease of maintenance on 
larger systems, and high level of portability. 

The Union Bank of Switzerland has written two 
systems, COSY and DESY+, almost entirely in Ada. 
COSY (Control System) is a real-tune monitoring and 
control system for VAX/VMS and RISC Ultrix architec¬ 
tures. It enables the bank to manage large computer sites 
with a minimum of operations staff and to m««t»i«a 
system up-time. COSY was first released in mid-1988. 
Now in its fourth version, COSY allows almost fully 
automated systems operations with a graphical user 
interface running under Motif. 

Like Reuters’ Ada systems, the DESY (Dealing 
System) supplies foreign exchange dealers with real- 
time data to support their transactions. The first DESY 
release was not written in Ada. hi 1986, it was modern¬ 
ized with some Ada. The new version, DESY+, will be 
released next year, and is written almost entirely in Ada. 

Ada in Commercial avionics 

Nowhere is Ada more deeply 
e ntrench ed in both the public 
and private sectors than in the 
international avionics market 
In the public sector, 
Boeing Commercial Airplanes 
can be credited with leading 
the push for Ada. On May 25, 
1985, Boeing established the 
policy that it would use Ada 
in future avionics systems, related laboratory facilities, 
simulations, id Maorisred tools. After the company 
lobbied the Airlines Haematic Engineering Committee 
of die Aeronautical Radio, Inc (ARINC). the committee 
s e l ected Ada as the ‘language of choice” in 1988. 
(Domestic airlines fo unded ARINC in the 1940s in 
order to regulate radio navigational frequencies. Since 
then, die a ir li ne s have tried to maximize sta n da rd s 
through ARINC that could benefit the entire avionics 
commatity.) 

Today, Boeing uses about500,000 lines of Ada to 
fly its conwEicial 747-400 in subsystem c om po n e nt s, 
critical certification. Bid human safety features. Two of 
the three largest systems on the 747, or 43 percent of the 


e x ecu t a b l e bytes, are written in Ada. The software is 
FAA certified Boeing's new 777, which is costing 
between $4 to S5 billion to develop, will be 90 percent 
Ada by lines of code when it makes its maiden flight in 
1994. Brian Pflug, manager of the Central Software 
Engineering Group in Renton, WaslL, says that Ada 
portability saves Boeing’s suppliers the most money. 

Another leader in using Ada for flight is Collins 
Commercial Avionics in Cedar Rapids. Iowa, of 
Rockwell International. Coll ins began using Ada in late 
1983 for government work. It decided to write commer¬ 
cial applications also in Ada in order to swap personnel, 
compilers, tools, and training easily between projects. 
For example, Collins invented and developed a Global 
Positioning System (GPS) satellite communications 
board in Ada for the US DoD in the mid-1980s. Later, 
the division installed the board in commercial airplanes, 
trains, and evena van that it uses to demonstrate staie-of- 
the-an technology to international automobile makers. 
Rockwell's Ada work has s in ce spr ea d to its divisions in 
California. Texas and Florida. 

Collins’first commercial applications of Ada were 
fiber-reinforced plastic corporate turbo-props, the 
Beecfacraft Starship 1 and BeedtjeL It started program¬ 
ming the Starship’s 375 000 lines of Ada in 1984. Since 
then, Collins has written a Central Maintenance Com¬ 
puter and an Integrated Display System in Ada. both of 
which fly in the Boeing747. Bocmg , s737,757.and767 
use Collins' Electrical Flight Instrument System equip¬ 
ment. In June 1991, the Collins division bepm marketing 
its Ada-run GPS modules, called NavCoreV, to original 
equipment manufacturers for around $450. Collinj’ 
market for the 2.5" x 4” module includes manufacturers 
of navigational systems for aitplanes, commercial fish¬ 
ing boms, trams, yachts, etc. 

FAA'a Advanced 
Automation system 

The la rg es t avionics effort written in Ada is die UJS. 
Federal Aviation Agency’s (FAA) S12 billion effort to 
m ode rn ize its air traffic control sysem IBM Federal 
Sector Division in Rockville, MtL, won the contract in 
1988 for d e v elo p ing 2J mil lio n lin e s of new oodefor the 
Advanced Au t omation Syscm (AAS) portion, which 
will con approx hnamly S3.55 billion. About 1.8 million 
lines of code will be written in Ada. 

The AAS portion will support req u i r e m e n ts for 
takeoffs and landings, id will control depat ures and 
arrivals. It will monitor flights at 22 enroute control 
stations, 188 terminal radar qip ro a ch control fac ili tie s, 
258air traffic comrol towers, and more. It also will make 
suggestions for efficient routing and fuel consumption. 









COMMERCIAL. APPLICATIONS IN Ada 


support for programming in the large especially 
attractive. 

Tbe fast Ada code to be flown in an ESA spacecraft 
should take place in the tafrsed Solar Observatory 
(ISO) satellite in May 1993. ISO is a scientific satellite 
going to the Sun. The Attitude and Otbit Control 
subsystem at the satellite is developed in Ada using a 
1730 processor (MAS-281) from UK-based Marconi. 

At p res e nt . ESA is in v est i ng heavily in preparing 
future Ada technologies, such as in developing an Ada 
Tasking Coprocessor (ATAQ. ATAC is a VLSI chip 
implementing the full Ada tasking model which can be 
attached to any 16 or 32-bit microprocessor available in 
the market. It takes care of all scheduling decisions. 

The agency’s hard real-time system studies have 
led to the proposal of new methodologies for Hierarchi¬ 
cal Object-Oriented Hard Real-time Systems 
(HRT-HOOD). ESA was instrumental in developing 
HOOD asametbod to incorporate state-of-the-art sched¬ 
uling techniques; iA, deadline monotonic scheduling. 

Ada in oil exploration 

Like NASA and the ESA, 
Shell Oil and Doweil- 

Jug. 

concerned first with writ¬ 
ing reliable and accurate 
software, and chose Ada 
because of its reputation. 
The oil compmies hoped 
to aavemoney by using software to predict the outcome 
of proposed projects. 

Shell initially selected Ada in 1983 because of its 
softwareengineering features—such as rereads, point¬ 
ers, strong typing, generics, e x ception handling, and 

danL It usee two Ada systems in resting ocean floors for 
oifcaseinl c proc essi ng system, which is w ritt e n a lmo s t 
entirely in Ada. and a g ra p hica l user interface, which 
includes C and UIL. Both systems constitute a single, 
la rger project 

The seismic system breaks long pro ces s in g se¬ 
quences into small pasts. Each psrt is programmed with 
an Ada task, allowing for parallel execution. The system 
has been ported and successfully executed on Sun3, 
Sun4, Convex, VAX, RS6000, and Cray m ac hin es, 
using revcrel different corapiktnt. 

Seismic processing involves perfor mi ng hundreds 
of individual steps on a great quantity of data. The 
graphic Interface allows a uaer to assemble hundreds of 
hatch jobs and to decide th e s e q u e n c in g no og them. A 
multi-colored display shows their status. The system 


uses Ada for the ba ck gro u nd proc esses (which handle 
the job mana ge m ent functions) and the internal portion 
of the actual interface. Roughly, the user interface 
consists of217,000 lines of Ada code, and 363,000 lines 
of other languages. The runtime system consists of 
222.000 lines of Ada, md the ope ra tions is projected to 
be 230,000 lines of Ada. The interface is now in 
production use, driving an older signal processing sys¬ 
tem. Users will begin testing the Ada seismic system 
later this year. 

Dowell-Schlumberger Inc., in Tulsa. Okie., an oi 
Lfield service company, hat written between 150.000- 
173,000lines cfAdafor simulation software since 1983. 
The company’s five Ada applications, which run on 
MkroVax Us. predict what will happen and how much 
material is needed when the company provides a service 
for an oil producer. The tool CcmCADE (Cement 
Computer-Aided Design and Evaluation), for example. 

rtw> nHwnwn nf «n nil wril m nnp nil «nri 

from rising and muting with the fresh water supply 
around iL PkCADE does the same for packing gravel 
around the oil well. The company’s 200 international 
locations all use the tools. 

Victor Ward, section head of the CADE Product 
Team in Tulsa, says Ada was originally chosen because 
of its generics aid because code could be easily main¬ 
tained and reused. “Ada isn’t more difficult to use than 
any other language’*, he said, “once you get over the start 
up costs”. 

Ada in the Pacific 

TheJapancseSIGAda, with 410 members, is one of the 

international special interest group’s largest chapters. 
Only sbout23 of themeinben inJapan ae from academia: 
the others—from Japanese colorations. The world’s 
largest corporation, Nippon Telegraph aid Telephone 
(NTT), was one of the fit* to commit to Ada by devel¬ 
oping compilers and s u ppor t tools in 1983, when the 
language became a standard. By 1989. NTT had devel¬ 
oped 2J million lines of Ada code. “Software 
productivity a nd rel ia bility are critical to NTT." accord- 
ing to Kiyoahi Tanaka, a senior wa a rech engin ee rin g 
su perv is or. "The Ada pro mise d , and has 

proven to be in practice, a aound basis for the develop¬ 
ment of large-acale commerci a l software sysrems 

NTT has knplaawnMd several commercially avail¬ 
able te l eco mmun i cati o n a s ervi ce s in Ada: a videotext 
communic ation system, i cellular telephone service, a 
satellite co mmunicatio ns system, and a database man- 
aftment system. It has s t a rred developing s digital 
cellular te l ep h o n e system service in Ada, using an 

ODmHWBHW uggira. 







Commercial applications in Ads 


systems. The number has grown steadily since then, 
until the Clearinghouse’s October 1992 Ada Use Data¬ 
base listed over 90 commercial applications. The 
language has caught on with some small developers, 
who are using it to edit videotapes in Saratoga, Cal if „ 
and to search documents with hypertext in Houston, 
Texas. Same larger companies am testing their prod¬ 
ucts' reliability with Ada software, such as Motorola in 
Illinois testing its cellular phone switching systems, 
TYace Inc. in California testing bare circuit boards, and 
Collins Avionics in Iowa testing a variety of its elec¬ 
tronic navigational systems. 

For future markets. Ada compiler vendors now 
have products for the hand-held computers, which shops 
use to read bar-coded prices and overnight delivery 
services use to route packages. Ada compilers are also 
now available for digital signal processors, which oper¬ 
ate everything from suspension systems in automobiles 
to high-speed modems in PCs. 

By satisfying DoD requirements, Ada was able to 
appeal to a much larger market than its creators first 
envisioned. Today, the commercial sector, which in¬ 
cludes an estimated 24 percent of the Ada market, may 
not financially support Ada vendors enough to keep 
them afloat when the DoD begins cancelling projects. 
Research and development contracts are often the first in 
line to be cut, and many of them are being written in Ada. 
As the defense industry slims down, more commercial 
software developers will have to see Ada as a solution to 
their cost overruns and maintenance problems in order 
for the language to be viable in the next century. 


acknowledoements 

We would litre to thank the following people for their 
generous contributions to this article: Jose-Luis 
^ernandezoflSDEFE, Spain; Bjorn Kallberg. UlfOlxson 
of Nobel tech. Sweden; and Marcus Meier of UBS. 
Switzerland; and John Walker of the Ada Information 
Clearinghouse in Arlington, Va. 

The authors 

AnnS. Eunice is vice chair of the SIGAda Commercial 
Ada User* Working Group (CAUWG). She is a writer 
for ITT Research Institute, and publishes regularly in the 
Ada Information Clearinghouse Newsletter. 

Barry Lynch is a director of Software Professionals 
Ireland in Dublin. He is a board member of Ada Europe 
and an International Representative on the Executive 
Committee of ACM SIGAda. His special Ada interests 
are in environments and public tool interfaces. 






= ADA - — ■■ -- ■ - - — == 

Ada— 

A Software Engineering Tool 

by 

Richard D. Riehle 


Robert Frost once taut that writing frtt verse was like playing tennis 
wah the net down. The game under those conditions requires great self - 
discipline. In computer programming we often play with the net down. 

Ada puts up the net. adds several referees, and installs electric-eye sen¬ 
sors on the fault line and boundaries. 

As a response to a “software crisis.” the U.S. Department of 
Defense (DoD) decreed in 1979, that all new software develop¬ 
ment should be performed using Ada. Then the DoD created 
a waiver process so that nearly anyone with a good imagina¬ 
tion could create a rationale for avoiding the transition to Ada. 
The result: Ada didn't have enough launch-pad thrust to reach 
orbit Another factor in Ada’s slow acceptance was a reluc¬ 
tant IBM. Without the IBM endorsement, any new language 
has trouble gaining acceptance. According to Aviation Week 
and Technology, IBM finally put its full weight behind Ada 
after its Federal Systems Division lost several million dollars 
in government contracts that required Ada. 

Now Ada's popularity is increasing in velocity: interna¬ 
tionally in Europe and Japan; academically in the university 
software engineering community. The National Aeronautics 
and Space Administration (NASA) has adopted Ada. The 
Federal Aviation Administration has chosen Ada for the new 
air traffic control system. The University of Santa Gaia now 
requires Ada instruction in its electrical engineering cur¬ 
riculum. Ada is even gathering a following in the commercial 
and MIS marketplace. CRI, Inc., of Santa Gam, California, 
has developed a relational database product in Ada for use in 
Ada systems. ~ 


Estimate of Ada Marfcat Potential 
in U.S. Aerospace Industry 

ises 1*07 IMS IMS ISM 

isei 

ISM 

Thousands ot People 0>vsloping Software 



loo tit im too isr 

in 

107 

Percent Working on Ada Programs 



J% a* 12% 30% 10% 

40% 

90% 

1 Thousands or People Developing Softwere m Ade 


t4 $J 1SJ MJ 47J 

704 

SOLS 

1 Investment per Person Working on Ada Programs (n ne 

manat) 

IN IN IN M IN 

tie 

sio 

Ada Support Marketing Opportunity 1 * tmtme) 



MS M7 SIM MM SOT 

STM 

MM 

IS 

ji 

i! 

•a f S%per 



In April 1987. Undersecretary of the Army James Ambrose 
dec lared an end to waivers and mandated that all Army projects 
be developed jn Ada, including MIS applications. Since then 
ail branches ot the DoD have elevated their commitment to 
Ada, and most of the defense contractors have gotten the mes¬ 
sage. Ada is now alive and well—in fact, thriving—and is a 
viable language alternative for any software development 
project 

Why do we need another programming language? And 
why Ada? And what is an “Ada,” anyway? Then again, what 
is all this nonsense about “software engineering”? Is that just 
another fancy term for programming in the way that “sanitary 
engineer” is another name for janitor? In this series of articles, 
we hope to answer these and other related questions about 
Ada. We’ll discuss the premises on which the language was 
designed and its differences from other languages, and we'll 
examine the issue of fulfilled and unfulfilled expectations. 

Language Characterisitks 

Ada is a desce n da nt of Algol-68 via Pascal. If you know Pas¬ 
cal, Algol, or PL/1, you will find much that's familiar in Ada. 
However, Ada is a very formal language, and many words 
and phrases take on specific, new meanings when describing 
Ada concepts. Also, Ada adds new capabilities to its ancestral 
languages and moves in the direction of “object-oriented 
design" (OOD). But Ada is not a “pure” OOD language in the 
image of Smalltalk. Objective C, or ACTOR. 

Before we proceed with more detail, let’s take a look at 
some of the major characteristics of the language. First a 
definition. We use the word. ype a lot in Ada. A type defines 
both the permitted set of values and the legal operations for 
an object Objects may be discrete data items (scalars), com¬ 
posite data items, or entire executable modules. 

Some of Ada’s more prominent features are: 

• multiple levels of abstraction 

• strong typing 

• strict scope and visibility rules 

• high modularity 

• object-oriented design 

• built-in exception handling 

• built-in concurrent/real-time processing capability 

• s ep ar ation of specification code from imp le mentation 
code 

• separate compilation of modules 

• incorporation of current co ncep ts of software engineering 

One of Ada's unique features, generic compon en ts, enables 
Ada progr am me r s to build context-indep en de n t modules. 


1988 Pr ogr a mmer 's Journal 6J 

a 







The Software Engineering Imperative 

Without an awareness of Ada's software engineering founda¬ 
tions, it will be hard to understand why the code sometimes 
reads like the software equivalent of a Bach fugue. 

During the past twenty-five yean intensive scholarly re¬ 
search into the programming process has resulted in concepts 
like "formal proof of correctness" (Dijkstra), Structured 
Analysis and Design (DeMarco), probiem/solution space 
models (Ledgard), and “information hiding" and "levels of 
abstraction" (Pamas). There have been hundreds of other con¬ 
tributors to this evolving discipline, and a visit to a university 
bookstore will now turn up plenty of titles that include the ex¬ 
pression "software engineering.” 

Goals of Software Engineering 

The designers of Ada adopted the goals of software engineer¬ 
ing defined by Ross, Goodenough, and Irvine: 

* Modifiability * Reliability 

• Efficiency • Understandability 

These software engineering goals are no different from the 
implied goals in our day-to-day programming, but now they 
are explicitly stated—almost codified. 

An additional goal for Ada is “portability”: There is only 
one Ada. No dialects of the language are permitted. Source 
code must compile in any Ada environment The Ada Joint 
Progra mm ing Office (AJPO) of the DoD validates every Ada 
compiler. An unvalidated compiler isn't Ada. This is the first 
computer language subjected to such a rigorous standard. Any 
attempt to corrupt Ada will be rebuffed. She's . just not 
that kind of girl." 

-*-■ - - 

ITIBCfNS 

The goals of software engineering led to a definition of un¬ 
derlying principles. By principles, we do not mean "methods." 
A method is something like "structured analysis." A principle 
is the foundation far die method. 

Since software engineering is an emerging discipline, there 
is no complete agreement on all of the principles, but the prin¬ 
ciples most commonly asso c iated with Ada are also defined 
in the work of Ross, Goodenough, and Irvine: 


• Abstraction • Uniformity 

* Information hiding • Completeness 

• Modularity • Confirmability 

* localization 

Notice the absence in this list of Wareier-Orr, Jackson Sys¬ 
tem Development, software metrics, object-oriented design. 
These are "methods," which would be based on the principles. 

Abstraction 

One of the most important principles in software engineering 
is "levels of abstraction.” By abstraction we mean: Show only 
the essential properties of a program without revealing the 
details. There is a presumption that we can decompose an 
abstraction into its components. 

Ada is expressly designed to enable multiple levels of 
abstraction. We find this principle represented in Ada by pack¬ 
ages, generic program units, distinctions between unit 
specification and unit body, among abstract data types, and 
between private and limited-private types, and by the ability 
to define entirely new types. 

An example software abstraction familiar to many design¬ 
ers is the Data Flow Diagram (DFD). The "context diagram” 
represents the highest level of abstraction of the DFD. Sub¬ 
sequent DFD levels describe subordinate levels of abstraction 
until we are at the most elementary (non-decomposabk) level. 

Information Hiding 

Information hiding is closely related to abstraction. We 
simplify the use of program units by hiding unnecessary in¬ 
formation. Information, here, is defined in a very broad sense 
and includes details about algorithm implementation, data 
types, and objects. 

Information hiding is not a new principle. It has been avail¬ 
able to us in one form or another from the earliest days of 
programming. One example is the OPEN command found in 
many languages. We issue the 

OPEH (pstml, psrml) 

statement and are spared the tedious effort of coding our own 
device driver interface, exception handling, etc. Ada, by its 


; Wire b Ada? 



Angrem Ada Byron, dau0Mr of Lord 
Byron, was bom D ocembe r g. Ills, in 
Fn g hnd lbswaaalway s add—udbybr 



out bar DCs. 

Ada became trim* wife Outfits Bab¬ 
bage, inventor of the Difference Engine 

linear. Laigi Meaebrra. wrote a short 
paper describing the Analytical Engine, 



sMa with fee Analytical Engine. Ada’s 
mind took a leap into the future. One 
hundred years before Eaiac. she was 


subroutines, v aria bl es , and GK30 (gar¬ 
bage in. ga rb agt out). Ada even touched 
lightly on Artificial Intelligence. Of 
course. Ada did net aw ourrcuutmporiry 


c omp rar fot, but fe e n ote a read almert 
Bke one of the popular books of our day 
feat daretfec fee possi b il it i e s of elec tro nic 

" When'in 1979. the U.S. Department of 
Pri—rr High Older Language Wor ki ng 
Group (HOLWG)fhnBy decided to accept 
the language design of Jean Ichbiah’s 
group at Fnncc's HoneyweilAall. the lan¬ 
guage aaadwi a ane. According to Grady 
Boocb, author of Sejhmn E ngin e ering 
with Ada, "Jack Cooper of the Navy 
Material Comm sad evolved the perfect 
name for this new language: Ada — 
k seeam aonreoifoit fern an on anist - 

Department of De font shook! name its 
new programming knguage in honor of a 
nm ete entb century woman.—ADA ♦ 


19H8 Programmer’s Journal ft-5 
6 ? 








very design, expands upon and actually enforces this prin¬ 
ciple. In later discussions we 'll examine data types that provide 
elegant ways to hide implementation details. 

Modularity 

Ada encourages program design using small, well-defined 
modules. Ada programmers have standard methods for 
separate compilation, data and procedure encapsulation, the 
creation of "loosely-coupled" objects, and top-down struc¬ 
tural design. 

The phrase “loosely-coupled" is an important concept in 
Ada's rendition of object-oriented design. The loosely- 
coupled object in Ada is a generic unit that can be used over 
and over in many different programs independently of the 
specific contexts of those programs. In fact, building generic 
“reusable components” is a key feature of Ada. 

An example of loose-coupling in the real world is in your 
automobile. You can’t take the carburetor from your Chevy 
and put it on my Ford. The carburetor and the engine are tight¬ 
ly-coupled objects. On the other hand, your twelve-volt bat¬ 
tery is a loosely-coupled object that I can steal from your 
Chevy and use in my Ford. 

This leads us to the concept of “software ICs." Many in¬ 
tegrated circuits are loosely-coupled. Often, an electrical en¬ 
gineer may select generic ICs (objects) from a catalog to create 
a unique hardware design. Object-oriented design strives to 
develop reusable software units, or components, as generic 
as those integrated circuits! 

Localization 

Localization is almost the inverse of modularity. But localiza¬ 
tion stresses the cohesiveness of the objects in a module. This 
tends to make individual modules small, logically concise, 
and easy to modify. We see here that much of Ada's design 
relates to the modifiability goal. Small, loosely-coupled, high- 
ly-cohesive modules are easier to modify and maintain. They 
are also easier to create. 

Ada permits an encapsulated type that can be affected only 
by the operations defined within the scope of a package. This 
is achieved via private and limited- private data types. The end 
result is “abstract data types.” 

Uniformity _ 

We could also use the word consistency. Every program m ing 
organization has its standards. Some use indentation on the 
line after the { while others insist on data name normalization 
and still othets are totally laissez Cure. Often, “correct” coding 
style is subje ct to ar gument- The principle of uniformity is 
related to the goals of modifiability and understandability. The 
idea, of course, is to keep the style the sane. 

Ada supports uniformity by virtue of its rigorous structure. 
Ada prog r am m er s build software systems as small, well- 
defined modules (Adapactages). The implementation coding 
style of a pellicular package may be peculiar, but the pack¬ 
age user never sees the algorithmic code. All access to the 
package is through the package specification, and that sub¬ 
stantially limits the variations of style available to the pack¬ 
age developer. Even here Ada doesn't let us play with the net 
down. 

How can we know our solution is complete? No program¬ 
ming language alone can make this happen, but there are those 


Ada enthusiasts who insist that Ada’s structure and environ¬ 
ment can help. 

Confirmability 

By confirmability, we mean some method of determining that 
our program is correct Edsgar Dijkstra's “formal proof of cor¬ 
rectness” for software would be ideal here. Unfortunately, 
neither Ada nor any other language advances »s to that level 
of confirmability. 

Ada's modularity enables us to separately compile and test 
program components. In addition, strong data typing provides 
tools to enforce confirmability. As a stongly “typed” language. 
Ada encourages design that includes defining new, rigorous¬ 
ly constrained data types. And Ada's built-in exception han¬ 
dling permits us to implement our own error and exception 
routines. 

Software Engineering Beyond Ada 
No language can provide, by itself, all the tools necessary for 
fulfilling the goals and principles of software engineering. 
But Ada is more than a language. Compiler developers are 
also supplying the Ada Programming Support Environment 
(APSE). In future articles we'U explore different implemen¬ 
tations of APSE. 

Other elements of software engineering are also neces¬ 
sary—project management tools, structured methods (analy¬ 
sis, design, walkthroughs), prototyping, quality assurance. 
Computer Assisted Software Engineering (CASE) tools, and 
software metrics. 

The Ada Language 

Now that we have reviewed some of Ada’s underlying goals 
and principles, we can look at the language itself. In keeping 
with the principles of software engineering, we start at the 
highest level of abstraction, the package. 

The package is unique to Ada. We can find concepts in 
other languages that roughly correspond to the Ada package 
but nothing that is as complete. By a package we mean a col¬ 
lection of logically related objects. This collection can be data, 
data types, related subpro g rams, and type declarations. Apack- 
age consists of two pans: the package specification and the 
package body. 

The user of a package usually has no need to see the details 
of the implementation (package body). The only part of a 
package the programmer would see is the package specifica¬ 
tion. The specification is the p rogra m mer's window into the 
package. 

There are software companies that specialize in creating 
both generic and non-generic Ada packages. This is a grow- 



1988 Program mer ’s Journal 6J 
in 





j Why Do We Need 

I a New Language.' 

In his book on Software Engineering, 
Henry Ledga/d describes what sets (he 
professional apart from the amateur 
programmer The completed work of a 
professional must be reliably usable and 
maintainable by someone other than the 
author. Moreover, the professional typical¬ 
ly develops softw? '-u will interact with 
a large body of c ftware written by 
other profession# 

There are ot s. Professional 

programmers and ^ ung managers 

know that the vast ma^ offline in any 
software organization is devoted to main¬ 
tenance of existing code. In the Depwt- 
ment of Defense it is estimated that 80% 
of the software dollar goes into main¬ 
tenance. Not only is this a thankless task, 
but it also propagates new bugs. Addition¬ 
ally, because there is no “science" of pro¬ 
gramming. each coder docs things differ¬ 
ently. Attempts at discipline over the yean 
have been dismally unauccessftil. Imagine 
maintaining the code far all the systems of 
the DoO (or any g overnment agency) and 
transporting the code into a worldwide 
military comma nd and control system or 
two bunched logistics systems. 

There is also the old issue of re-invent- 
mg the wheeL Moot of the code we crease 
docs the same tarn as some other code writ¬ 
ten by someone eta. Campandvely little 
anginal software is coded. The ideal is to 
make code as ro-uubie. generic, and sim¬ 
ple as paperdipt. This isanan-trhrial prob¬ 
lem in a small organization like your 
hometown bank; certainly noo-oivial in an 
or ga n iza t i on the size of the DoO. 

Now imagine the coat of all thia 
duplication, error-prone m a in t enance , and 

any self-respecting general want to give op 
nuclear weapon s and return to dube and 

Ada is designed for professional 
t y pi ca l Adn project is very Iwgs, coream 


of ntmy drveraernrapfrmi, «d net be 



tenance of the systems programmed with 
these languages was becoming a night¬ 
mare. and the very computer software that 
was being implemented for the defense of 
the country was becoming part of the 
threat. 

When a government agency has a 
problem, the first thing it does is establish 
a committee. In this case the committee, 
formed in 1975. was named the High Order 
Language Working Group (HOLWG) and 
consisted of both defense and civilian 
members. HOLWG developed criteria for 
the “ideal” DoD language and surveyed 
the languages then available. HOLWG 
decided that none of the languages was 
consistent with DoD requirements. 

In 1977, HOLWG issued a request for 
proposal for a new computer language. It 
received IS proposals and selected four 
finalists labeled Red, Green, Blue, and Yel¬ 
low. In the next round of refinements, the 
Red and Green languages were selected. 
Finally, in 1979, the Green language, sub¬ 
mitted by a team at Cii-Honeywell/Bull of 
France, was selected. The team waa 
headed by Dr. Jean D. Ichbiah. 

Ada was designed according to current 
concepts of software engin e er ing . Some 
say it is the first language to be developed 
drat way. ft is. howe v er , not without its 
critics. Many software engineers believe 
that a better language drat im plem en ts the 
principles is Modula-2, developed by the 
author of Pascal Niklaus Wirth. Some wy 
drat Ada is the bar grew language of the 
1960a and point to the emergence of 4GL 
(Fourth G e n e rat io n Language) technol¬ 
ogy. Soft others dislike the “size” of the 
Im gnagr, compar ing it to the current trend 
towards Reduced Instruction Set Com¬ 


puters iRJSCs) instead of Complex In¬ 
struction Set Computers (CISCsi. 

The jury i* sull out on the eventual late 
of Ada. At present it seems to be healthy 
and gaming strength, lust a few years ago. 
many people had their doubts. According 
to a bulletin released by the Ada Joint 
Programming Office (AJPO) in Decembe r 
1987. there are now over 120 compilers 
available for the language. Moreover, or¬ 
ganizations that have adopted Ada and im¬ 
plement its “reusability" features report 
dramatic improvements in programming 
productivity. 

There is hardly a mainframe or mini¬ 
computer environment for which there is 
no compiler. As you might expect there 
are out standing Ada compilers for the DEC 
VAX series. Strangely, though, the system 
best designed to take advantage of Ada's 
tasking feature, the Cray scries, does not 
yet have a “validated" compiler. By “vali¬ 
dated" we mean that the compiler has suc¬ 
cessfully compiled and executed the 1,830 
pr ogram s c ontained in the AJPO lest suite. 
And the rule is, until it is validated by the 
AJPO it isn’t Ada. Recent —«"«»«*— are 
that there will be about 150 validated Ada 
compilen by Summer of 1988. 

There we some good anpietnematioas 
of Ada for the IBM/Clooe PC eovirao- 
mert. For alow-cost Ada compile*; try RR 
Software. Inc.’s JANUS/Ada (C-PAK 
priced wound $100). Recently. Meridian 
Software introduced a pre-validated ver¬ 
sion of Ada for the Macintosh. Meridian 
and Alsys also have validated compilers 
for MS-DOS e nv iro nm ents-—-ADR * 


Ada Compilers for Microcomputers 

This list of Ada compilers is n comprehensive, nor should its entries be constniedas 
specific recommendations. 

Validated Earirwuncut 


Janus/Ada 

RR Software. 
Madison. WI 

Yes 

PC/Ctone 

Ada Vantage 

Meridian Software. 

Yes 

PC/CIooe. 

Laguna Hills, CA 

Soon 

Macintosh (under MAC OS) 


Yes 

Z-8000 

Alsys 

Alsys, Inc. 

Yes 

PC/Ctone, 

Waltham. MA 

Yes 

Macintosh (under AUX) 
Motorola 68000 family 




Yes 

PS/2 



Soon 

OS/2 

Ada-86 

Softech, Inc. 

Yes 

Cross-compiler from 


Waltham, MA 


Vax series targeted at the 

nncf o..8k —=— 


NYU Ada/Ed New York University 

NYU AdaflEd is a tow-cow “Ada" ionpreser designed for learning something about Ada. 
However, you can’t do much with it red it's oof ai aU suitable for production prograna- 
m;g. Adn/Ed will execute most of the profi ts m tho book by Clwk (see the bibliog¬ 
raphy), but watch out for integer sires. 


1988 Programmer’s Journal 6 J 


72 














ail a atad (and a marketplace) for 


Here is a skeleton package that incorporates other pack¬ 
ages. Nose that Ada comments ate preceded by two hyphens 

(-): 


eilR OPERATIONS RESEARCH; — b*qin p4Ck«q« spec; t icsc con 

paesagt MX CAR SCHEDULER is 

type STATUS _rrfE is iniu.. D#TY1; — defined cuts type 

type SEAtALJX) is nee INTEGER; -- derived decs type 

•OX CAA_$TATU$ : STATUS_TYPE; ~ aaaiqn s data type 

•OX*CAIl' : smAt"MO; — assign s dees type 

function POX CAP IS (MX CAA tin SERIAL NO I return 
STATUS TYPt:" 

procedure PLACt «OX CAAlRAANl; AAA#«;MA*J. .. 1 ; 


end MX_CAA_5CHEOUUR; 
pecseee body MX_CAA_ SCHEDULE* 

end MX CAA SCHEDULER; 


— end peckaqe specif icetion 

— beein lepieeencetion 

— a.qonthais 
•• are in this pert 

— end lapieeentetion 


In this example we are creating a package to solve the clas¬ 
sic problem of moving empty and full box can in a railroad 
network. The package will use another package. OPERA¬ 
TIONS JIESEARCH. which is incorporated into this pack¬ 
age by die Ada with statement; then we define two data types, 
STATUS_TYPE and SERIAL_NO, and create two variables 
and assign a type to each; then we specify the functions and 
procedures that will be found in the body of the package. The 
most important thing to observe here is that the package 
specification may be the only thing available to anyone who 
wants to use the package BOX_CAR_SCHEDULER. The 
package body may be hidden. With this specification, another 
progr amm er can create a new program unit (package, proce¬ 
dure. or function). For example: 

vitk TMCS NMKOMT; 

■Ilk miotet 
■Ilk KM NMWGMVr,- 
■Ilk MB Ota ICUNtn; 
nc»m unjbMjwMGcmrr u 

Ml *AIUtQAC NMUCmrr> — am pvckM* spvcllicacion 

The package body of BOX.CAR-SCHEDULER and other 
packages are hidden from the p rog ramm er writing the pack¬ 
age. RAILROAD_MANAGEMENT. And the package body 
fbrOPERATIONS_RESEARCH was hidden from the creator 
of BOX_CAR_SCHEDULER- 


Ada has two kinds of subprograms: prvctdures and functions. 
Hie difference between the two is quite simple. A function 

retnrasaresultaspartofanexpression.Aprocadureisasimple 

statement; for example, a simple procedure to convert non- 
metric to metric; 


vltk T*»T IOj 
pram a i w MUC la 

ant, rest. run : ursbbu 

MTttS : lUMt; 

> u*H « nrr 10 la am 1BTJO.XilMB WIWTUBI i 

(laaalloa «m C0Wll8.rT.tMiDRail tacam ruQkT la 
cack torn. j uraenu 

am mate > riaATi 

ca wo u lok racrok : saaaiaat rtuar :* o.omioi 

bagia 

nea torat :• itoa • to . irr • m ♦ r«< 
am mate ruaritaca total) • cea- 

veasraa nurrwu 

— aat -a cka aaavarslaa at tattMa t»aa ca 

— na n er a* «aia* rtoat i taca^Torat i 
man Majmatci 

am mm.com> 

kaaia 

nr lo.srriTaaMi r 
:at to.German» 
tar to.arraacaui > 

nrCm i — Mem cowvitaaoi.rtrr. taassi; 

am matc< 


Here we have a function caM within a procedure. In addition, 
we have a procedure call. GET. from 1NTJO. 

Illustrations like this often elicit a ho-hum response from 
experienced programmers. There s nothing here (hat couldn't 
be done in some other language. The directive with is some¬ 
what equivalent 10 C s #indude or Pascal's {SI...}. but there 
are some advantages in clarity. For example, the value to be 
returned in an Ada function is alwaysexplicitly returned. Abo. 
we do an explicit type conversion on INCH.TOTAL in the 
expression that computes CONVERSION. 

The first thing we see in this procedure is the invocation 
of another package, TEXT_IO. Ada doesn’t have its own 
input/output procedures, so input and output are controlled 
by Ada packages. Several packages are provided as pan of 
the standard language implementation: SEQUENTIAL IO. 
DIRECT_IO, TEXT JO. and LOW.LEVEL JO. Other JO 
packages are available from Ada software vendors and the 
AJPO. These include console, screen, and window handling 
packages, graphics packages, and packages for device driven. 

Since we want to enter integer numbers via a keyboard, 
we need to use the package TEXT JO. which contains three 
generic packages named INTEGER IO. FLOAT IO. and 
FIXED JO. 

An Ada generic does not exist as an executable entity. It is 
often referred to as a ’’template.” To use any generic object 
(pac kage, procedure, or function), you must supply die charac¬ 
teristics of the objects to be processed and create a newly 
named version of the generic object This is called instantia¬ 
tion, meaning to create a new “instance” of the generic ob¬ 
ject In Ada die parameters) for a generic may be a type, a 
variable, or even anodur su bpro gra m. 


INTEGER JO. as a generic package within TEXT JO. al¬ 
lows us to send and receive numbers from/to a dev ice in ASCII 
tormat. INTEGER JO automatically converts the numbers to 
the proper internal INTEGER format so that we can perform 
calculations. The generic does not exist as a working pack¬ 
age until we instantiate it. In this case we instantiated IN- 
TEGER-IO as a new package named 1NTJO for data type 
INTEGER. 

This may seem a little redundant, but suppose we had real¬ 
ly wanted to constrain the GET for each object in the proce¬ 
dure. We might have created the following new dan types: 

typs INCH TYPE is ran*s 1..12; 
cyps YAAD - ?YPt is ran*« 1..144; 
cyps rilt'nH is rsnps I..J; 

then created objects of those types, 

INCHES : INCH TYPE/ 

rerr : rm'TYWi 

YARDS : YAADJfYYt; 

and then instantiated INTEGER JO for each type 


MckM* rack 10 l« MV TWT lO.IWtOW. 10lMCB_TTM)» 
pseksps ran - 10 Is MV TCXT^tO. IWTBGSA lOinBRJTYFS) / 
psekspv YAAD~XO is nmt TE3CT_lO. XNTC0Bt_XO(YAAD_TYPE) ; 


Now our p roced u ral coding would read: 


inch io.arritNCKS); 
nxT'io.ornnm; 

YA*0~XO.<3TtYMOS> I 


1988 F rograa mm ' s Journal 6J 


73 







If the newly instantiated package, INCH JO. receives input 
outside the range of 1 through 12, a constraint error will be 
raised at runtime. This is one reason Ada code sometimes 
seems a little baroque. 

Some relief is available in the form of the use option. Rather 
ihanexplicitlynameTEXTJOastheparentoflNTEGERJO. 
we could have said, 

with TSX?_IO; TEXT_IO; 

package 1ST 10 i* INTEGER lOi’MTEGER); 

uit IMT^IO;” 

GET)INCHES I; 

Many Ada programming shops prohibit or discourage the 
use option because of the need for absolute clarity and con¬ 
trol over the visibility and scope of every element of the 
program. This may be of little consequence in a small software 
product but becomes a major issue in a large software system 
designed to control parallel processing in a “mission critical” 
environment. 

Tasks 

One unique feature of Ada is the task, a program unit devoted 
to concurrent processing. The task may be used in either a 
multi p ro gr a mm ing or multiprocessing environment. The task 
has no direct analogue in other languages. Historically, we 
resort to assembler language or some special purpose lan¬ 
guage we access via CALL constructs to match Ada's task. 

The task becomes an especially important programming 
construct as supercomputing and parallel processing emerge. 
With Ada we can design a system in which we launch twen¬ 


ty (not a limit) parallel tasks, all of which can communicate 
with each other. Tasks can be used with great efficiency in 
complex simulation programs where it is often convenient to 
break a problem into small pieces and merge results at dif¬ 
ferent stages of completion. 

The overall structure of a task is similar to that of a pack¬ 
age: 

:isk PACEMAKER it 

-- Specification for « Uii 
-- if. an amoaoded syata* that 


tasc oooy PACEMAKER is 

-- Aiqorithnic ispiaraancacion 
-- is placed here 

and PACEMAKER.’ 

An important aspect of Ada is the ease with which we can 
create programs for “embedded systems,” by which we mean 
software systems consisting of multiple programs and/or 
processors that operate independently of any human inter¬ 
ference. Examples would be radar guidance systems, missile 
telemetry, automated medical monitoring and control devices, 
unmanned space vehicles, etc. Reliability is the most impor¬ 
tant attribute of these kinds of systems. 

Ada's charter to be the language of embedded systems is 
one reason for the rigorous discipline it enforces on the 
software engineer. 

We can create multiple tasks that rendezvous with each 
other in a variety of ways. There ate methods for prioritizing, 
starting, stopping, and monitoring tasks. One task may start 
several others and wait until one of those others completes 




