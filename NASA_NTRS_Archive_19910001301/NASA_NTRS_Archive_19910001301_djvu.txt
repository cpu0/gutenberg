N91-10614 


n 

Experiences with Ada in an Embedded System 

Robert J. LaBaugh 
Martin Marietta Astronautics Group 

Space Systems / 

Denver, Colorado 80201 k 1 j 



Introduction 

This paper describes recent experiences with using Ada in a real time environment. The 
application was the control system for an experimental robotic arm. The objectives of 
the effort were to experiment with developing embedded applications in Ada evaluating 
the suitability of the language for the application, and determining the performance of the 
system. Additional objectives were to develop a control system based on the NASA/NBS 
Standard Reference Model for Telerobot Control System Architecture (NASREM) in Ada, 
and to experiment with the control laws and how to incorporate them into the NASREM 
architecture. 

Background 

The arm to be controlled has five degrees of freedom — one degree in each of the shoulder 
and elbow joints, and a wrist with roll, pitch, and yaw. An Intel 80386 single board computer 
in a Multibus II system was used for the controller. The board contained an 80387 math 
coprocessor, two megabytes of RAM, and a single RS-232 serial port. The clock frequency 
for the system was 16 MHz. Rather than just use the 80386 as a fast 8086, the 80386 was 
operated as a 32 bit processor in the protected mode, which provides for segment sizes of 
up to four gigabytes. 

The Ada compiler selected was the DDC-I cross compiler for the 80386, which was hosted 
on a MicroVAX. This compiler was targeted to a bare machine, so there was no operating 
system to either provide services or detract from the performance of the system. The 
runtime system supplied with the compiler provided all of the services needed to support 
the features of the language, including initialization of the hardware, memory management, 


R. LaBaugh 
Martin Marietta 
1 of 19 


time management, the Ada tasking model, and interrupt handlers. An operator interface 
for the application was implemented using the standard Ada Text JO package. This package 
uses the RS-232 port on the single board computer for the standard input and output of 
Text JO. 

Development Approach 

The software development system is shown in Figure 1. It consisted of a Rational R1000, 
a MicroVAX II, and a PC clone. The systems were connected via Ethernet, which was 
used to transfer files between the systems. Initial program development was done on the 
Rational. To facilitate code debug and checkout on the Rational, Ada routines to simulate 
the hardware were developed. These were used to replace the low level hardware interface 
routines. When the target hardware and compiler became available the source code was 
moved to the MicroVAX. Target peculiar modifications were made to the code, such as the 
specification of task entries as interrupt handlers and the hardware interface routines. The 
code was then compiled and linked on the MicroVAX, and the resulting load module was 
downloaded to the PC. The PC served as the controller for the in-circuit emulator, which 
was used to load and control the execution of the code in the target system. 



Figure 1. Development System 


R. LaBaugh 
Martin Marietta 
2 of 19 






Even though the capabilities of in-circuit emulators are improving, this was a less than 
optimal environment for debugging code. Having to move from one terminal to another, 
moving files from one system to another, and the limitations on file names on the PC all 
hinder code development and checkout. The movement is clearly toward being able to 
compile, download, and debug from a terminal on the host development system. There are 
some systems which currently allow this, but the targets are connected to the host by an 
RS-232 line. The relatively slow download speeds limit the size of programs which can be 
effectively developed using these systems. 

Ada Features Used 

Ada tasks and task rendezvous were used for synchronization and communication between 
tasks. Task priorities were established using the priority pragma. An interrupt handler 
was coded in Ada to service the timer used to provide the control loop cycle. This was 
accomplished using an address clause for a task entry — which is the technique specified 
in the Ada Language Reference Manual for defining interrupt handlers. The LowJLevel JO 
package was used to communicate with the hardware controlling the joints on the arm. 

There was one package where machine code insertions were used. This was used to provide 
procedures to disable and enable interrupts. These routines were not really needed by the 
initial application. They were used to assure safe initialization of the hardware, which 
was already guaranteed by the sequencing of the initialization routines. However, these 
routines become necessary as more Multibus II features are used. This is because some 
logical operations, such as accessing a single Multibus II interconnect space register, require 
accesses to multiple hardware ports. 

Software Application 

NASREM defines a layered, hierarchical control system with common interfaces between 
layers. The lowest layer in the hierarchy operates at the highest frequency, with a decreasing 
frequency of operation with each higher level. Ada tasks were used to implement the 
NASREM layers, with the priority of the tasks decreasing with increasing levels in the 
hierarchy. The requirement that the argument to the priority pragma be a static expression 

R. LaBaugh 
Martin Marietta 
3 of 19 


prevented the use of a generic package in defining the NASREM levels. However this was a 
minor inconvenience as there was very little code involved in defining the control structure 
within a level. 


The initial application concentrated on the two low r est levels of the NASREM architecture. 
The servo level reads current joint positions and sends motor commands based on the 
error between the current and desired position. This level was driven by a programmable 
hardware clock which generated a periodic interrupt. The primitive level determines evenly 
spaced points between desired end points and performs the kinematic transformations. The 
elemental move level initially consisted of simple canned motion generators, and the task 
level simply selected the motion to be performed. The robot control function and the 
operator interface were both run on the same CPU, with a total of eleven Ada tasks in the 
application. 

The entire application was coded in Ada. No non-standard pragmas or special interface 
routines to the runtime system were used. In addition, we were able to effectively write low 
level code in Ada. This included interrupt handlers, hardware interface routines, Multibus 
II message passing routines, and control of a DMA processor. The hardware, and the code 
generated by the compiler, provided more than adequate performance for the system. In 
experimenting with the control laws the control loop cycle time was varied between 10 and 
50 milliseconds. For most of that range all levels of the NASREM architecture were able 
to complete in a single cycle. Since the NASREM architecture is set up for approximately 
a ten to one ratio in frequency of operation between levels, this leaves plenty of room for 
growth. 

Current activity includes splitting the robot control function from the operator interface 
function and executing them on two CPUs. The initial interface and communication be- 
tween the processors is via shared memory. As an alternative, Multibus II message passing 
will also be investigated. This is being done as an exercise in distributing the application. 
Items of interest are the difficulty of implementing various communication schemes and the 
relative performance. 


R. LaBaugh 
Martin Marietta 
4 of 19 



Lessons Learned 


Most of the things which could be considered lessons learned are more appropriately clas- 
sified as common sense. Specifically, while being able to use a host system for initial debug 
and test is a useful development tool, it does not eliminate the need for low level testing 
on the target system. This testing is needed to establish the correctness of the hardware- 
software interface definitions, and to build confidence in both the hardware and low level 
software routines. Having a set of programs to incrementally checkout the low level functions 
and interface also provides the basis for trouble-shooting as problems arise. Such routines 
were needed to isolate hardware failures and identify improper system initialization, which 
happened if a specific sequence was not followed for powering on the electronics racks and 
computers. 

Another major lesson learned was that portability is not automatic with Ada. There were 
two specific instances of this. The first involved differences in the tasking implementation 
between the Rational and the 80386 target. Tasks of equal priority are time sliced on the 
Rational, but this is not the default for the DDC-I runtime system. A task which was to 
run in the background, and which checked flags in an infinite loop, was elaborated before 
some of the higher priority tasks were initiated. Since the task didn’t allow for any type 
of context switch, as soon as it started executing on the 80386 it kept control of the CPU, 
preventing the further elaboration of the system. Inserting a delay statement inside the 
loop fixed the problem. The other experience with non-portable Ada code involved a public 
domain math functions library. The functions used by the application worked correctly on 
the Rational. However on the 80386 system one of the functions produced erroneous results 
for certain input values. It was discovered that this math package had hard coded values 
for machine specific parameters. We did not try to determine if this was the cause of the 
problem as an alternative math functions library was available. This does point out the 
need for extensive test data, and a test mechanism, for “reusable” Ada packages. 

There still seems to be a tremendous resistance to using Ada language features for embed- 
ded, real-time applications. Some of this comes from “experts” who have heard Ada is not 


R. LaBaugh 
Martin Marietta 
5 of 19 



efficient enough, or just cannot support various real-time or “system” functions. This resis- 
tance is probably a positive sign. It used to be said that Ada was too inefficient for almost 
all applications, not just real-time applications. Unfortunately system specifics, such as a 
particular compiler, target, or any operating system involvement, tend to be forgotten or 
ignored. There are certainly systems which cannot come close to supporting time critical 
applications, but this does not mean all systems are that way. Much more surprising is 
the push by some Ada compiler vendors (and, less surprising, real-time kernel vendors) to 
promote special, non-Ada runtime systems. This could be seen as an attempt to distinguish 
their product, or provide a higher performance system where needed. However, it could 
also be viewed as an attempt to circumvent shortcomings in their runtime system imple- 
mentation — which could lead to speculations of what else might be inefficient or poorly 
implemented in the system. The use of such systems greatly reduces the portability of the 
code and adds another complex system which has to be maintained. 

Conclusions 

We were able to implement a complex real time system in Ada, and did not have to resort to 
circumventing Ada language features or use a special, non- Ada run time system. This was a 
result of having hardware, and an Ada compiler and runtime system, with significantly more 
performance than was needed by the application. Futhermore, using the Ada tasking system 
allowed the initial debug and test of the code to be performed on the host development 
system, which was more accessable than the target system. This also allowed the debug 
and testing to begin before the target system was available. Another advantage of using Ada 
tasks and having sufficient performance margin was that it allowed the application to be 
implemented primarily by junior engineers. Some guidance was provided on implementing 
the interrupt handler and cyclic task execution. Otherwise they were able to use textbook 
tasking solutions, such as having tasks to coordinate exclusive access to resources. All of 
this indicates that as Ada compilers continue to mature the idea of leveraging of skills can 
be extended to the real-time arena. 


R. LaBaugh 
Martin Marietta 
6 of 19 



THE VIEWGRAPH MATERIALS 


R. LABAUGH 


FOR THE 

PRESENTATION FOLLOW 



EXPERIENCES WITH ADA IN AN EMBEDDED SYSTEM 


o 

cc 

e? 

CO 



1- 

ID 

< 

CO 

o 

Q 

CD 

3 



< 

rv* 

rz 

CO 

o 

or 

LU 

h- 

o 

1 

fU 

_J 

H 

CO 

< 

CO 

>" 

CO 

o 

LJ 

4-> 

k— 

<u 

£ 

LU 

U 

of 

LU 

_Q 

O 

q: 

H 

LU 

CE 

< 

< 

Q. 

CO 

> 

2 

LU 

o 


on 

< 


MED 


PAGE , i INTENTIONALLY BLANK 


R. LaBaugh 
Martin Marietta 
9 of 19 


INTRODUCTION 


< 

o 

< 


UJ 

Qd 

3 

h- 

U 



R. LaBaugh 
Martin Marietta 
10 of 19 


BACKGROUND 


o 


< 

LU 

oh 

I 

Q 

OH 

< 

X 


5 


X 

u 


o o 

Q OH 
LU -p 
LU £ 
OH t 

^ £ 

u_ 

O H 

_ to 
CO — 
LU 

LU ^ 

ce ^ 
O Q 
LU 2 
Q < 

S s 
= S 

X I 

L m 

£ * 
LU 

^ Q 
X — I 
< = 

H § 

® CO 
CO 

O • 

x 


x 

LU 

H 


O 

LU 

Q 

x 

< 

O 

CO 


LU 

2 

CO 

OD 

CO 

ro 

o 

CO 

O 

CO 
CO 
LU 
LU 
O 
x 

CL 

O 
lu 


X 

LU 

H 


O 

lu 

H 


g 53 


X 

o 

CO 

cn 

LU 

LU 

o 

x 

CL 

O 

LU 


CL 

LU 

x 

O 


x 

6 


r- 

co 

ro 


<-> , 
P OH 

d ^ o 

d < CL 

i CQ £J 


O vO 


rsi 


co 

X 


Q 

O 


Q 

LU 

H 

LU 

LU 

H 

O 

on 

CL 

10 

CO 

ro 

o 

CO 

< 

O 

< 


LU 

Q 

Q 


X 

LU 

< 


LU 

X 

< 

CO 


O 

X 


O 

LU 


LU 


o 

LU 

CO 

LU 

Q 

> 

o 

on 

CL 


co r- 

co >- 

LU 


Q 

on 

< 

o 

CO 

X 

X 

LU 


< 

on 


LU 

on 


O 

<u 

< 

o 

< 


LU 

X 

< 


CL ^ > 

° < t 

O Q O 

2 < in 


o 

5 

o 

3 

X 

LU 

Q 

Q 


CJ 

< 

u_ 

a: 

LU 

I- 


<% OH 

o o 

Q_ O (Z. 

<x. 

OH 

LU 
Q. 

O 


<vi _ 

<3 o 

co E 

OH * 

CO LJ 
LU O 
CO —I 
3 CD 


OH 

O 

U_ 

O 

LU 

CO 

3 


R. LaBaugh 
Martin Marietta 
11 of 19 


DEVELOPMENT SYSTEM 









DEVELOPMENT APPROACH 


£ i 


o 

X o 

< LU 

> H" 
O lo 
oh O 

y. x 

CO 

Z °° 
O § 

Q OH 
LU O 
X LJl. 

z oc 


5 51 

1§ 

Q u 

LU 

_l LO 
— LO 

^ ° 
2 OH 

O <-> 

<-> < 
LO Q 
to <r 

o 


M 

< Sr! 


U LU 
CL , 


Z m Q 

O LU < 

n q o 


t s 


o E i 

S K < 

O O Q 

§ “■ < 
^ OH O 

LU LU _J 

= O O 

Q OH H- 

O H- o 
2 2 UJ 

row 

Q U 3 

§ • • 


s & 


R. LaBaugh 
Martin Marietta 
13 of 19 


- AVAILABLE NOW FOR SOME 


ADA FEATURES USED 


z 

o 

lu 


co 

LU 

LU 

fi 

qc 


O 

lu 


< 

z 

o 

fe 

M 

Z 

o 

oc 

x 

lu 

z 

>- 

CO 

(X 

O 

U. 

CO 

O 

> 

INI 


UJ 

CO q; 

CO ^ 

< CO 

Q • 

< 


> 

< h 

Q £ 

^ LU 

E * 

_ CO 


Q 

O 

LU 

OS 


oc 

O 


CO 


< u 

1 CO 
l— CO 

% s 

§ q 

OC g 

LLI < 

H . 


LU 

QC 

t 

Q 

or 

< 


LU 

6 

LU 


O 

LU 

O 

h- 

Q 

LU 

CO 


CO 
CO 

'—s 

O “l 

LU —I 

M LU 

t s 

« H 

2 <: 

« o 

Cl _j 


QC 

< 



CO 


o 


H 


QC 


CL 


< 


3 


~T~ 


QC 




QC 

LU 

H 

o 

U_ 

O 



Sc 

O 


UJ 

LU 

b 



_J 

< 


GO 

< 

CL 

CL 

M 

l 


2 

< 

< 

CO 

LU 

— 1 

H 

2 

Q 

< 


O 

H— 

< 

H 

LU 

qc 

LU 

2 

U- 

LU 

_J 


< 

CO 

CD 

2 

CO 

2 

LU 

< 

CO 

Q 

LU 

QC 

o 

Q 

Q 

Q 

Li- 


o o 
U h y 
W Q f 

2 LU t 

^ co O 

LU “ * 2 

< • • 


a 

LU 

CO 


< 

QC 

LU 

Q. 

O 

I 

□ 5 
S £ 
= 3 

UJ QC 

cn iu 

H co 

< LU 
LU CO 
UL CO 
_ LU 
— LU 
CO LU 
ZQ < 
CO UJ 
I- cc 

I § 

S Q 

1 1 1 oz 
£ < 
o x 

s UJ 

CO Q_ 

< r~ 


Q S 

LU 

LU 1 


R. LaBaugh 
Martin Marietta 
14 of 19 



APPLICATION 


QC 

oc 

ZD 


O 

h- 

O 


CL 

O 


H 

LJ 


X 

U 

QC 

< 


LU 

H 

to 

CO 

-I 

O 

DC 

H 

O 

< 

LJ 

X 

LJ 

DC 

< 

DC 

LU 


CO 

u 

LU 

> 

LU 


LU 

CO 

< 

LU 

DC 

LJ 


CO 

LU 

> 


CO 

< 


< 

X 

LU 

CL 

O 


CO 

CO 

< 


< O 1 “ 
< 
CD 
< 


s & 

to z 

LU LU -p 
O 3 lZ 

< or — 

u. uj > 

a: S 5 

LU lj_ Q 


E 2 g 


oc 

LU ^ 
OC _J 
CO 

< • 


2 1/1 111 
O < ^ 
^ LU LU 

S u a. 
O uj ^ 
U O - 


LU 

LU 


CO 

QC 

o 

QC 

DC 

LU 


CO 

_l 

LU 

> 

LU 


o 

LU 

CO 

< 

CO 

CO 

O 


O 

u 

CO 

OC 

o 

H 

o 


co 

LU 


CO 


o 

O 

CO 

QC 

O 

Ll_ 

CO 


O =: 


O 

0 . 

Q 

LU 

U 

2 

CO 


CO 

DC 

O 

DC 


LU 

O 

o 

i- 

o 

Q 


< 

LJ 


CO 

LU 


CO 


= ~ CO 


s 2 

oc I— 

LU < 


a o 

S t 


CO 




O 

o ' ^ 

Q LU 2 
^ > CC 

5 a 5 

“ O Q 

z S Q 
y £ 2 

^ co < 

O • 


OC 

O 

LL 

OC 

LU 

CL 

o 

I- 

g 

i- 

o 


2 UJ CO 
QC > H 
O UJ O 

!r — i lu 


CO lu 
— I Z > 
LU < O 

> a 5 

LU (_ ^ 

m y S 

gS £ 

r 5 uj 

s Sj ^ 

— 2 UJ 
QC — _j 
CL JaC LU 


LU 

CO 


CO 

< 


o 

Z 

CO 

LU 

< 

CO 

O 

CO 

g 

i — 
LJ 


o 

QC 

|- 

Z 

o 

u 

h- 

O 

00 

O 

QC 


CJ 

2 

rv: co 

LU ^ 

I- SG 


S § 

S 2 
s 3 

Q. • 

o 


CL 

o 

o 


O 

x 

H 

O 

LJ 

e? 


> 

DC 

Q 

H 

CL 

X 

DC 

DC 

LU 


LJ 

0 

_J 

LJ 

LU 

DC 

1 

Q 

OC 

< 

X 


R. LaBaugh 
Martin Marietta 
15 of 19 


RESULTS 


R. LaBaugh 
Martin Marietta 
16 of 19 


U 

h“ 

LD 

ID 


CO 

< 

CJ 

< 

oc 

cl 

oc 

O 

co~ 


< 

cj 


to 

CO 

2 

LU 

CJ 

< 

CO 

CO 


CO 

3 

CO 

t— 


DC 

LU 


O 

Q£ 

H 


Q O 

< <J 

Z < 


2 2 o 
^ 


CO 

> 

CO 


oc 

LU 

X 


cj 

fi 

dc 

LU 

H 


£ 

y < 


QC 

£ 

LU 

Q 

O = 

CJ LU 
QC 
1 j < 


CL 

CL 

< 


LU 


^ > 
CJ LU 
LU —I 
0- ^ 
CO > 


a 

ac 

< 

X 


CL 

o 

o 


LU 


o £ 

QC 

H <-> 
2 CJ 
O 1x1 


CJ 

M 


o 

ID 


CO 


o 

CM 


x LU 

O u. 

^ 5 

LU cj 
CJ LU 
2 X 

<£ LU 

s o 

O iii 


CO 


QC 
LU 
CL < 

LU ^ 

b UJ 

§ > 
2 . UJ 
cy _i 
1x1 

< w 

^ o: 
2 co 

< < 

I 2 


K < 

o . 


co 

CL 

CJ 


i £ 

E O 

to cc 

3 « 

qZ LU 

3 g 

>- co 

OC CO x 

lip 


^ co o 

Q =3 r 

£ “ 5 

« b y 


CO 


Cl 

CL 


LU 

Q 

O 

O 


H 

-j 
CL 
to 


CO 

CO 

LU 

U 

O 

dc 

CL 




< 

x 

< 



> 

1 - 




z 





o 


H 


LU 

6 

I- 



U 

< 

LU 

QQ 


LL. 

CJ 


DC 

— J 

DC 


h" 

o 

DC 

H 

LU 

H 

3 

DC 

LU 

CL 

to 

Q 




X 


o 

oc 

o 

LU 


CJ 

1 - 

O 

O 

6 

DC 

<J 

< 

o 

to 

-J 

< 

LU 

to 

U 

DC 

CO 

UJ 



LU 

o 

cn 

CL 

o 


1 

X 

LU 

• 

• 

• 


• 


LESSONS LEARNED 


^ CO 
CO Cd 


£ £ 


CO O 

O i= 
x < 

Q- N 


ill 

5 | 

s < 
I- ^ 
co 

LU — 

I- ± 

Q ^ 
~ LU 

I? °- 

< CO 

^ LU 

<1 — 
“ I 

co ^ 


=i k 

CO LU 
< I- 


f= 2 


o il 

00 LU 

2 O 

— LU 
LU LJ 

2 a 

uj oc 

9 h 


O u_ 
o O 

Q co 
_i to 

5 g 

co f 

O L-> 

1“ m 
QC 

Q DC 
LU O 
Q LJ 
LU 

LU 1 


—I CO 
CO >- 
X to 

O cr 

oc LU 
I— Ol 


CO ^ 

< ^ 

CO £ 

LU Z5 

9 — 

§ £ 

00 LU 

o_ oc 

g i 

^ Q 

Q cc 

LU < 

Q X 


< b 

§ I 

b s 

£ b 

LJ Q- 

g ^ 
1 ° 
o — 

t- * 

=> % 


— lu 
>- 2 


o 1x1 

£ § 

< I- 


QC ^ 

2 < 


< w 


O 2 

LJ LJ 

G G 

_J _J 

CO CO 


O 2 

2 o 

H~ O 

cc <U 

? Q 

S" “ 

9r < 

9 x 


UJ w 

LU 

< 

CO 00 
LU QQ 
<U — 
< - 1 
^ to 
LU 2 

2 2 


y < 


= UJ . . 

inn LJ_ “ r 


R. LaBaugh 
Martin Marietta 
17 of 19 


LESSONS LEARNED (continued) 


< 

UJ 

cn 


Q 

Q 

LU 

GG 


CC 

O 

LL. 

CO 

LU 

cn 


< 

LU 


O 

< 

ID 

O 

< 

< 

O 

< 


to , 

LU I— 

5 2 


LU 

CO 

< 

> 

CO 

oc 


Q 

Z 

< 

H 

CL 

ID 

oc 

QC 


CO 

> 

CO 


= LU 

CO ^r 


LU 

LJ 


CO (O 
CO 


LU O OC ^ 
QC 
CO 

O 
Q 

LU 

2 
LU 

oc 

I- 


< 

Q_ 

Q- 

< 

LU 


< 

Q 

< 

§ O 

i- 

CO i 


< 

u 

cn 

O 

x 

o 

X 

O 


UJ 

L_J 

U_ 

LI- 

LLI 

H 

o 

co 


CO 


I- 

LJ 


§ 

0 H 

cr LO 

< >■ 

LU CO 

x Hr 

gi 

< H 

1 Ji 

O < 

T LU 

£ “ 

^ CO 


to 

h- 

cn 

LU 

CL 

X 

LU 


o 

on 

LL. 


cn 

§ 

I— 

QC 

O 

CL 

CL 

3 

CO 


Q 

LU 

QC 

o 

LD 

LU 

CD 

O 

H 

Q 

LU 

H 


co 

CO 

H 

UJ 

LD 

on 

p£ 

of 

LU 


o 

to 

u 


u 

LU 

CL 

CO 


< 

LU 

QC 

< 

O 

LU 

CU 

3 

Q 

LU 

QC 


2 

to 

LU 

> 


CO 

O 

CL 


CO 

a: 

O 

a 


CO LU 

< 


CO 

LU 

H 

CO 

>" 

to 

<3 


LU 


< 

LU 

cn 

o 

< 

CO 

cn 

O 

Q 


on 

UJ 

o_ 

O 

CO 


a 

on 

< 

Q 


co 


u? o: 0 

— ill w 


Q. O 


o 


o 

on 


x 

CO 


CO 

<J 3 


O 

O 

I- 

q: 

O 

CO 

I- 


V 

CO or L. £ 


< hr 


I— <£ 


x 

LU 

—I 

Q_ 

o 

LJ 

q; 


L_J Z 

o: Q 

L_J Z 

=3 LU 

a 2 

O LU 

£ 5! 
x I 

CO — 


g H 

Z CO 

> 
CO 


CO 

O 

O 

< 


CD 

X O 
O w 

Q. ^ 

CO < 
LU I - 
U Z 

Q J 

LU ^ 
QC LU 

I “ 

O 

> [“ 
— CO 

< 

X 


LJ 


LU 


g| 

£§ 

Ss 

US 

< h- 


Q X 

O y 
a: x 
a. > 

Q£ > 


O >- 

LJ CO 


R. LaBaugh 
Martin Marietta 
18 of 19 


SUMMARY/COIMCLUSIONS 


< 

Q 

< 


X 

H 

LU 

Q 

LU 

H 

LU 


LU 

u 


x 

O 

LL_ 

x 

LU 

X 




ZD 

CO 


Ql x 


LU 

H 

CO 

>- 

CO 


x 


o 

LJ 


^ 9 


H 

CO 


< 

(Z> 

X 

CD 

LU 

Q 

—i 

< 

H 


O 

— j 

< 

LU 

H 

co 

>- 

CO 


< 

O 

< 

Q 

X 

< 5 

< £ 
>- 
CO 

g H 

= to 
co O 
ZD X 


CO 


LU 

h“ 

co 

> 

CO 

H 

LU 

O 

X 

s 

LU 

X 

H 


H 

LU 

U 

GO 
< 
CO 
CO 
LU 
L J 
LJ 
< 

LU 

X 

O 


x 

LU 


CO 

X 

LU 


LD 

LU 

X 


< 

CO 

LU 

X 


< 

LU 

Ll_ 

< 

o 

< 


LU 

LO 

X 


CO 

£ 

u 

—I 

> 

LJ 


< 

X 

UJ 

U 

Q 

< 


X 

X 

X 

X 




X 

o 


o 9 

z a 2 

ua 9 


CO 

CO 

LU 

LJ 

U 

< 

LU 

> 

CO 


LJ 

X 

LU 


CO 

O 

H 


O 

co 

O 


X 

CO 

< 


X 

O 

O 

GG 

h- 

X 

LU 


u 

oc 

Q. 

> 


H 

X 

< 

< 

o 



<c 

LU 

LU 

LU 

X 

X 

X 

z 

LU 

CO 

LU 
1 

LJ 

1- 

LU 

o 

X 

m 

< 

< 

h- 

LJ 

2 


O 

h- 

U 


LU 


QC 

LU 

< 

X 



LU 

_J 


O 

LU 

X 

Q_ 

X 

< 

X 

_l 

LD 

O 

< 


X 

Q. 




• 

LU 


• 


• 


LU 

LJ 

X 

X 

o 

co 


co 


LU 

H 

CO 

> 

CO 

Q 

LU 

Q 

O 




Q 

LU 

CO 


LU 

X 

O 

H 

X 

LD 


o 


LU 


X 

X 


LU 

X 

< 

CO 

X 

LU 


X 


o 

u 

< 

Q 

< 


R. LaBaugh 
Martin Marietta 
19 of 19 



PANEL #4 


TOOLS 


D. Drew, Unisys 

P. Usavage, Jr, General Electric 

J. F. Buser, Software Development Concepts 



