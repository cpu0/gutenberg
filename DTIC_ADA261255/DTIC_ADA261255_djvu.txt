AD-A261i^2|5 


NISTIR 4411 


THE NIST STEP 
CLASS LIBRARY 
(STEP INTO THE 
FUTURE) 

Michael J. McLay 
Katherine C. Morris 


U.S. DEPARTMENT OF COMMERCE 
National Instituta of Standards 
and Tachnology 

Cantor for ManuftctHrIng Enginaaring 
Gaitharsburg, MD 20899 




O''' 


93-03997 



U.S. DEPARTMENT OF COMMERCE 
Robart A. Mosbacher, Sacratary 

NATIONAL INSTITUTE OF StANOAROS 
AND TECHNOLOGY 
John W. Lyons, Mroetor 


98 2 25 035 


NIST 




NISTiR 4411 


THE NIST STEP 
CLASS LIBRARY 
(STEP INTO THE 
FUTURE) 


Michael J. McLay 
Katherine C. Morris 


U4(. DEPARTMENT OF COMMERCE 
National Instituta of Standards 
and TodinoloSy 

Cantor for Manufoeturlnf EnglnoorlnE 
Qaltharsburg, MO 20899 


August 1990 



UA. DEPARTMENT OF COMMERCE 
Robort A. Mosbaebor, Socrotary 

NATIONAL INSTITUTE OF STANDARDS 
AND TECHNOLOOY 
John W. Lyons, Dlroetor 




The NIST STEP Class Library^ 

(STEP Into The Future) 

Michael J. McLay (mciay@cme.nlst.gov) 
Katherine C. Morris (k^>cme.nist.gov) 
Factory Automation System Division 
National Institute of Standards and Technology 


"Any meaningful exchange of utterances depends upon the prior existence of an 
agreed set of semantic and syntactic rules. The recipients of the utterances shall use 
only those rules to interpret the received utterances if it is to mean the same as that 
which was meant by the utterer." 

"Helsinki Principle 


Key Words 

STEP, PDES, CALS, 0++, data exchange standards. National PDES Testbed, 

CAD, CAM, CAPP, IGES, STEP Class Library, Express Language 

Abstract 

This paper describes a C++ class library that implements the STandard for the 
Exchange of Product Model Data (STW). The STEP Class Library (SCL) is under 
development at the National Institute of Standards and Technology as part of the 
National PDES Testbed. It provides a core set of classes for tools used to validate 
the STEP conceptual data models and for STEP based application prototypes. The 
library is also intended to facilitate the development of STEP compliant 
applications. The current version of the library provides a file exchange mechanism 
based on a protocol defined by STEP. Consequently, users of the class library will 
not have to create an input/output mechanism for STEP. 

The paper provides an introduction to STEP and the conceptual schema language. 

Express, in which STEP models are defined. The supporting classes that provide 
the STEP compliant input/output mechanism and the mapping between the Express 
specification and the C++ classes are described. The paper concludes with 

descriptions of some applications that use the class library and a discussion of future__ 

directions for the librt^. 

_ I 

1. The liinary and its source code, are under development by the National Institute (tf Standards and i q 

Technology (NIST), a U.S. government agency. As with all strftware developed by the government, the n 
library is not subject to copyright restrictions. __ 


Rqprinted from die C++ tt Work *90 conferaice proceedings widi pennission granted by The C++ Report. 
(No qiproval or endocsement of any commercial product by the National Institute of Standards and Tedmobgy 
is intended or implied.) 


- 1 /_ 

'ty Code# 

- cric/or 


Uibl 





1.0 


Introduction 


This paper describes the STandardfor the Exchange of Product Model Data^ 
(STEP) [NCGA90] [Sinith89] and the STEP Qass Library(SCL). STEP is a 
conceptual specification that forms a basis for communicating producr information 
(e.g., shape, materials, electrical functions, part numbers, etc.)- SCL provides C++ 
classes that can be used to implement applications such as electrical and mechanical 
CAD/CAM tools. Computer Aided Pr^ss Planning (CAPP) tools, manufacturing 
systems, product configuration control systems, and engineering analysis tools. 

The STEP Qass Library (SCL) defines classes and member functions to represent 
the product information defined by STEP. The library is to be used as a basis for 
the development of tools for testing the validity of the STEP conceptual data models 
and as a basis for a prototype in^lementation of the STEP Data Access Interface 
Specification (SDAIS) [Briggs90]. These applications are able to use SO. classes 
directly or as a link between a proprietary system and the STEP exchange 
mechaiusm. For a system that provides its own STEP interface, SCL can be used 
as a reference standard for conformance testing. 

Following a brief discussion of STEP, the paper provides a short introduction to 
Express, the conceptual modeling language used for STEP. Next the components 
of SCL are describe along with examples of Express product information 
definitions translated into C-h- classes. Finally, examples of projects using SCL are 
described, and the paper concludes with a discussion of SCL development to date 
and thoughts on future directions. 

2.0 The Impact of STEP 

Although computer technology has expedited noany business transactions, sharing 
product information within and between organizations has been problematic. In 

1979 the National Institute of Standards and Technology (NIST)^, in cooperation 
with representatives from industry, began investigating solutions to this problem 
[Bloom89]. The origiiud effort resulted in the Initial Graphic Exchange 

Specification (IGES) ^[NCX}A90] [Smith89], which is suitable for exchanging 
i^ormation among CAD systems. STEP is an outgrowth of IGES and is intended 
to provide a basis for sharing product information at all levels and stages in a 
product’s life cycle. The key differences between IGES and STEP are the breadth 


1. STEP is a project of the International Organization for Standardization (ISO) Technical Committee on 
Industrial Automation Systems (TC 184) Subcommittee on Manufacturing Data and Languages 
(SC4).[NCGA901 [Sniith89] 

2. TheOnmibusTrade Act of 1988 changed the mission of the Natkmal Bureau of Standards (NBS) to include 
promotion of technology transfer between government labs and private industry. This redirection prompted 
the name change to the National Institute of Standards and Technology (NIST). With die change in mission, 
NIST is now pursuing an even mote active role in promoting conuncrce in the U.S. 

3. Versions 1.0,3.0 and 4.0 of IGES have been adopted by the American National Standards Institute (ANSI) 
as ANSI Y14.26M-1981, ASME/ANSI Y14.26M-1987 and ASME/ANSI Y14.26M-1989, respectively. 


PagB2 


The NIST STEP Class Library 






2.1 


of the infonnation covered and die switch in focus from merely exchanging data to 
sharing infonnation. 

One of the lessons of the IGES effort is that transmitting data is not the same as 
transmitting the information necessary to fully describe a product The Helsinki 
Principle, quoted at the opening of this paper, points out what is missing. Without 
the “agreed set of semantics and syntactic rules”, exchanging data is meaningless. 
STEP expanded on IGES by specifying a consistent use of the semantics of product 
data in action to the specification of the data. 

Initially, the STEP development effort focused on building conceptual data models. 
The requirement to support the models of existing CAD and CAM systems made 
this task difficult because the models overlapped and conflicted. For example, a 
curve through space can be represented as a b-spline, as a list of curve segments, or 
as a non-uniform-rational b-spline (NURB). TTie STEP modelers undertook the 
very difficult job of defining mappings between the different representations of the 
same infonnation. STEP currently consists of a group of clearly and formally 
defined conceptual data models and a physical exchange protocol based on these 
models [AlteSSb]. Ultimately, the conceptual models will be integrated into a single 
model, and the exchange protocol will t^ other forms such as a standard interface 
to a shared database and/or common menoory. 

STEP is an ambitious standardization effort that involves several hundred 
individuals in twenty-six countries. The initial draft of STEP [SmithSS], totaling 
over 6000 pages, was submitted to ISO in December 1988. The draft specification 
is divided into twenty-eight application areas, providing comprehensive coverage 
of product-related data from geometry and structural tolerances to electrical design 
and configuration management When translated into C-H-, the draft STEP model 
produces over 1300 class definitions that interweave to ensure consistent use of data 
and semantics in describing a product 

The National PDES^ Testbed^ was established at NIST in 1988 as a neutral testing 
site to provide national leadership in the STEP development and testing effort The 
facility is used to test the quality of the evolving conceptual data models [Mitch90] 
and to investigate the suitability of new technologies to the application areas 
covered by STEP [Fowlei901. 

Motivation for the NIST STEP Class Library 

The principal objectives for creating the STEP Qass Library (SCL) are to support 
the development of conceptual data model testing tools, prototype tqjpiications, and 
eventually, conformance testing. A secondary objective of developing this library 
is to reduce the economic banier of introducing STEP into the work place and. 


1. Product Data Exchange using STEP (PDES) refers to the United States development activity in siq)port of 
STEP. NIST serves as the Secretariat of the IGES/PDES Organization, whic^ coordinates the United States 
activity. 

2. Funding ftv the Testbed has been provided by die Department of Defense’s Computer-Aided Acquisition 
and Logistic Support (CALS) Office. 


The NIST STEP Class Library 


Page3 











consequently, to accelerate the rate of growdi of STEP-compliant applications. To 
facilitate application development, the STEP data exchange mechanism is built into 
member functions in the class library, thus eliminating the need to rewrite this code 
for each application. 

In addition, the use of a standard class library can also reduce ambiguities that could 
potentially be read into the specification. With over 6000 pages in the specification, 
it is likely that some misinteipretation could occur. The value of a reference library 
in simpltfying implementation and ensuring conformance was proven with the X 
Window System Project [ScheiflerSS]. The rapid acceptance and almost universal 
conformity to the X Window System protocol can be attributed largely to the fact 
that the protocol was completely covered by a layer of C library calls. For the X 
Window System, the reference implementation also provided a convenient 
mechanism for the testing of protocol implementations in other languages. SCL has 
been developed with the hope tiiat it will have a similar impact on STEP 
implementation and acceptance. 

.1.0 The Approach to Implementing STEP 

The STEP conceptual model is specified in the language Express [Schenck90]. 
Express is a conceptual modeling language that defines how data are interrelated. 
WMe Express resembles many computer languages and has an LRN(l) syntax, it 
is not an executable language. Seve^ parsers for the language are available to 
check the syntax of conceptual data mo^ls written in Express and to serve as front 
ends for translators between Express and other languages. At NIST an Express 
parser is used to translate some of the constructs of Express into SQL (Structured 
<^ery Language) [ANSI86], Smalltalk [GoldbergSS], and C++ [Ellis&Strou90]. 
Eventually the standard will provide comroon memory and shared database 
implementation rules, but for now the definition is limited to a single exchange 
format - that of an exchange file. 

3.1 The Express Language as a Conceptual Modeling Language 

The components of the Express language addressed in this version of SCL are 
schemas, types, entities, and constraints. The following sections describe each of 

these components in more detail.^ The examples used in the balance of the paper 
are derived from schemas in the draft specification [Smith88]. 

3.1.1 Schenm 

A schema is a coUection of the information needed to describe a model in the terms 
of a given discipline. A schema consists of types, entities, and constraints. They 
may be nested and/or include other schemas. A coUection of schemas is needed to 
represent the information required for a complete product model. 


1. Functions and procedures will be mapped into C++ in a future release of SCL. 


Page4 


The NIST STEP Class Library 






3.L2 


3.1J 


Type 

In Express the concept of type is similar to that of a data type in a programming 
language. Express contains a limited set of built-in types ^m which other types 
can be defined. For example, the following statement declares inspection jprocess 
to be of type STRING. 

TYPE inspection_process ■ STRING; 

END_TYPE: 

Express also provides enumerated types in a form similar to C and C-H-. The 
position in a Ust of enumerated items determines the value associated with the 
items. The value of the first item is less than the second; the second is less than the 
third, etc.. The example below is an enumerated type in Express. 

TYPE coordinate_system_type • ENUMERATION OF 
{rh_rectangular, rhjcylindrical, rh_spherical, 
lh_rectangular, Ih.cylindrical. Ih_spherical): 

END_TYPE; 

Several other constructs for type definitions are available for Express but will not 
be discussed in this paper. 

Entity 

An entity represents a data structure similar to a table in a relational database, a 
strua in a C program, or a class in a C++ program. Entities are organized 
hierarchically; an entity can have zero or more subtypes and/or supertypes. Three 
types of attributes are the components of entities: explicit, inherited, and derived. 
Eytplicit and inherited attributes indicate the set of data needed to represent an 
instance of an entity. Ejq>licit attributes are specified inside of an entity declaration 
just as a member is declared inside of a C++ class definition. An inherited attribute 
is specified in a supertype entity in Express just as a member is inherited from a base 
into a derived class in C++. Finally, a derived attribute is calculated from other 
attributes by using an algorithm defined in the conceptual data model. In C++ a 
member function is the closest construct to a derived attribute. In the example 
shown in Figure 1, the explicit attribute ]ocal_coordinate_system would be an 
inherited attribute in the entity cartesian_point. 


The NIST STEP Gass Libfary 


Pages 






3.L4 


ENTITY geometry 

SUPERTYPE OF (point XOR 
vector XOR 
curve XOR 
surface XOR 
coordnatejiystom XOR 
transformatian XOR 
axis_placemant): 

local_coordlnate_systom: OPTIONAL coordinata.system; 

axis : OPTIONAL traiwformaiion; 

END.ENTITY; 


ENTITY curve 

SUPERTYPE OF (line XOR 
conic XOR 
bounded.curve XOR 
offset.curve) 

SUBTYPE OF (geometry); 

WHERE 

arcwise_connectod(cuive); 

ate_tength_extent(curve) > 0; 

END.ENTITY; 


ENTITY line 

SUBTYPE OF (curve); 
pnt :cartosian_point; 
dt :direction; 

WHERE 

ooordinato_spaoe(pnt) ■ ooardinate_spaoe(dir); 
ooortinato_speioe(line)« ooordinato_space(pnt); 
arc length extent^ne) > 0; 

END.ENTTTY; ~ 


ENTITY point 

SUPERTYPE OF (cartosian_point XOR 
poinf_on_curve (* XOR 
point_on_surfaoe 
poin(_on surface*)) 
SUBTYPE OF (geometry); 

END.ENTITY; 


ENTITY cartBsian_point 

SUBTYPE OF (point); 
xjcooidnato; REAL; 
yjcoordinato: REAL; 
z ooordinato: OPTIONAL REAL; 

DERIVE 

space; INTEGER :• coonflnato space(z oootxfinate); 

END.ENTITY: 

Figorel. Example of Express entity definitioiisflrom the Geometry model 


Constraint 

Constraints both internal to an entity and between entities can be represented in an 
Express conceptual data noodel. Internally, an entity may have its attributes 


Paged 


The NIST STEP Qass Library 





constrained in terms of uniqueness and existence through the use of key words in 
the endty definition. For example, die endty product_assembly_definition in Figure 
2 uses the key word UNIQUE to constrain Ae attributes document jmnber and 
schematicjr^erence. A where clause can be used to further constrain the domain 
of an attribute’s value. In the example, the endty is co’^strained by the where clause 
that requires that the endty not be in the component_.iSt. 

ENTITY product_assemblyjdefinition: 
document.number : STRING: 
schematic_reference: schematic; 
componentjist : LIST (i :#] OF component_select: 

UNIQUE 

document_number: 

schematic_reference; 

WHERE 

NOT (product_asserdbly_definition IN componentjist); 

END.ENTITY; 

Figure 2. Example of constraints on an entity firom the PSCM Model 

In addition to these constraints, which are applicable within an entity, there are 
constraints specified through rules. Rules are used to describe the relationships 
among the instances of entities. Hgure 3 includes a rule named 
productJtemjmd_version that illustrates the nature of such constraints. This rule 
ensures that zproductjtem is only associated with a ^^tproductJtem_yersion. 
The produajtemjtnd jfersion rale is simple but carries important semantics 
about the relationship between the entities productjtem and productJtem_yersion. 

RULE product_item_and_version FOR (product.ltem, product_item_version): 

IF (insiantiation(product_item_version, product.item) <> 1) THEN VIOLATION; 

(• A PRODUCTJTEM_VERSION is associated with one PRODUCTJTEM *) 
ENDJF; 

END_RULE; 

Figure 3. Example of a rule from the PSCM Model 

3.2 C+-f as an Implementation Language 

C++ was chosen as the language of implementation for the STEP Class Library for 
several reasons. First, a language that supports the object paradigm 
[Cox871[Kim89][Meyer88] was desired. The STEP conceptual models are 
hierarchical, and the concept of inheritance is fundamental to their organization. 
Also, a language that would be able to handle large and complex data files or 
databases without paying a large poformance penalty was needed. Another 
consideration was the need for an implementation language that was compatible 
with a wide variety of software packages (compilers, databases, debugging tools. 


The NIST STEP Class Library 


Page? 






compatible graphics packages, etc.)- Finally, it was desirable to use a standardized 

language or at least a language that had the promise of becoming a standard soon^ 
Portability and modularity are necessities when trying to implement a standard for 
data exchange. 


4.0 The STEP Class Library Architecture 

SQL is a collection of several component libraries. The STEP Schema Class 
Library holds container classes that are directly mapped from the STEP models. 
The STEP Core Class Library provides the context-independent data access 
mechanisms for the STEP data and the mechanisms for capturing semantic 
information in the STEP s<:hemas. The STEP Data Probe Class Library supports 
the context-independent browsing and transport control to the STEP Schema Qass 
Library. These three low level libraries form the foundation for the future STEP 
Data Access Interface Specification (SDAIS) library. SDAIS[Briggs90] will 
provide a uniform interface for applications to create, retrieve, and manipulate 
STEP data. The STEP Data Probe Class Library and the SDAIS are in the design 
stage and are not covered in this paper. 

4.1 STEP Schema Class Library: Translation of the Conceptual Model 

The STEP Schema Class Library is the set of files that result from the translation of 
a STEP schema. These files are general automatically using the Fed-X Toolkit 
[Qark90] for translating Express and are producible from an Express schema. The 
program/etfex _plus, which is a backend to Fed-X, takes a conceptual data model 
written in Express as input and generates three C-h- files for each schema. The C-h- 
code in these files provides the class defiiutions and member functions for STEP 
entities needed by an application program. 

4.1.1 Schemas 

When a STEP Schema Class Library is generated from an input file of Express text, 
each schema of the Express conceptual data model generates the following files: a 
header file of class definitions, a library file of class functions, and an initialization 
file. The classes defined in the header file correspond to the entities and types 
defined in that schema. Presumably, any application using any one of these entities 
will need to use several of the entities in the schema; therefore, they are all placed 
in the same file. If the schenta includes any other schemas, the hea^ files for the 
other schemas are included, using a Mnclude statement, in the owning schema’s 
header file. The itutialization file contains a function that must be called to irutialize 
a program to use the particular schema. The files are named after tiie schema that 
they represent 


1. The ANSI X3J16 committee on “C-h- Programming Language” was formed in December 1989. An initial 
draft based on the AT&T C-h- Reference Manual is cunently under review by the committee. 


Pages 


The NIST STEP Class Library 





4.12 


Express schemas are not completely self-contained. Figure 4 shows the schemas 
de^ed in the original draft of STEP. In order to create a global schema, references 
to entities from external schemas must be resolved. To implement this in C++ the 
header files that represent the external schemas containing the referenced entities 
are included in the schema’s header file. An application based on SCL includes the 
header files for the schemas needed by an application and link in the corresponding 
archive files. The SCL file structure ensures that the references to the schema are 
resolved. 


resources 

life_cycle 

applications 

geometry 

topotogy 

shape 

design_shape 

nominaLshape 

solids 

shapejnterface 

features 

tolerances 

material 

presentation 

product_manifestation 

drafting 

mechanical_product 

pscm 

aec 

aec_core 

ship_stnjcture 

electrical 

electricaLfunctional 

e)ectricaltic_schema 

lep 

analysis 

fern 

data transfer 


Figure 4. Schemas from STEP draft 


Entities 

Every entity defined in an Express file is mapped into a corresponding class in C++. 
The supertype/subtype relationship of Express also maps into the base class/derived 
class relationship of C++. Express entity names are not case sensitive. To ensure 
that the names are consistently translated into C++ classes, the following rules are 
applied in the translation. 

1. All characters in a name are translated to lower case. 

2. Then the first letter in the name and any letter immediately following an 
underscore character are made upper case. 

The assumption is made that the Express schemas are logically divided so that no 
naming conflicts between schemas will arise in application software developed 
using these libraries. Figure 5 shows the header fUe of C++ class definitions that is 
created when fedex_plus uses the Express code from Figtue 1 as input 


The NIST STEP Class Library 


Page 9 




#tncfude 'definedtypes.h' 

#include "STEPentity.h' 

class Geometry : public STEPentity { 
protected: 

STEPen-ty * _local_coordirMite_8ystem ; // OPTIONAL 
STEPentity * _axis ; // OPTIONAL 

public: 

Geometry (); 

-Geometry (); 

char *Name () {return 'Geometry*;) 
int opcode () {return 1;} 

class Coo. dinate_System* local_coordinatB_system() 

{return (class Coofdinate_System*) Jocal_coordinate_systBm;) 
void local_coordinate_system (dass Coordinate.System* x) 

{_local_coordinate_systom « (STEPentity *)x;) 
class Transformation* axis() {return (dass Transformation*) _axis;} 
void axis (class Transformation* x) {_axis = (STEPentity *)x;} 


class Curve : public Geometry { 
protected: 
public: 

Cunre (); 

-Curve 0; 

char *Namo () {return 'Curve*;} 
int opcode () {return 4 ;) 


dass Line : public Curve { 
protected: 

STEPentity *_pnt; 

STEPentity *_dir; 

public: 

Line(): 

-Line (); 

char 'Name () {return 'Line*; J 
int opcode () {return 24 ;} 

dass Cartesian.Point* pnt() {return (class Cartesian.Point*) _pnt;) 
void pnt (dass Carte8ian_Poinr x) {_pnt»(STEPentity *)x;) 
dass Oirection* dir() {return (dass Direction*) _dir;} 
void dir (dass Direction* x) (_dir > (STEPentity *)x;) 

): 


dass Canesian_Point : public Point | 
protected: 

teal _x_coordinate; 
teal _y_ooordinatB; 
real _z_coordinate ; // OPTIONAL 

public: 

Cartesian_Point (); 

-CartB8ian_Point (): 

char ‘Name () {return *Cart88ian_Poinr;} 
int opcode () {return 10;) 

real x_coordinate() {return(real)_x_ooordinate;} 

void x_ooordinate (real x) {_x_coordinale > x;} 
real y_coordinata() (return (real) _y_ooordinale;} 

void y_ooordinate (teal x) (_y_coordinate « x;) 
real z_coordinate() (return(real)_z_ooordinate;} 

void z coordinate (real x) (_z coordinate • x;) 

Figure 5. Example of entities firom Geometry schema translated into C-r-i- 


Page 10 


The NIST STEP Qass Library 





4.13 


Attributes 


All Express attributes are implemented as C++ classes regardless of the data type 
of the attribute. Built-in Express data types are represented directly in the 
corresponding entity class; otherwise the attribute is implemented as a pointer to the 
appropriate C++ class. 

4.1.3.1 Explicit Attributes 

For each explicit attribute in an Express model there is a corresponding data 
member in the protected section of the C++ class definition. In addition, there are 
a pair of access functions for each data member one for assignment and the other 
for tetrieval of the data. In an attempt to isolate applicadons from changes to the 
conceptual model a data member is assigned or retrieved through access fiincdons 
rather than being assigned or retrieved directly. This e limin ates the maintenance 
problem that occurs when an application’s software assigns or retrieves an attribute 
directly. Using an access function eliminates the need to update every reference to 
the data member in the software when the implementation details of the data 
number are altered. This approach increases schema independence and facilitates 
modularity of the software. From the example in Figure 5, the access functions 

real x_coordinate() {return (real) _x_cooidinate;} 
and 

void x_cooftiinate (real x) (_x_coordinate » x;} 

are defined for the xjcoordinate attribute of the Cartesian_Point entity. Similar 
functions are defined for the y_coordinate and z_coordinate attributes. 

4.1.3.2 Inherited Attributes 

Inheritance of attributes in Express resembles the inheritance supported by C++. 
For the time being it is sufficient to represent inherited attributes through the 
standard C++ mechanisms; however, translating the other types of inheritance 
defined by Express into C++ is also being investigated. This issue is addressed later 
in this paper. In Figure 5 the access functions 

class Transformation* axis() {return (class Transformation*) _axis;} 
and 

vow axis (class Transformation* x) (_axis - (STEPentity *)x;} 
are inherited down into the Cartesian_Point class as inherited attributes. 

4.1.3.3 Derived Attributes 

Derived attributes are implemented as member functions. 


The NIST STEP Class Library 


Pagetl 




4 ^ 


STEP Core Class Library: Context Independent Classes 

The STEP Core Class Library (SCCL) is a collection of context independent class 
definitions used by the schema dependant classes that are found in the STEP 
Schema Class Library. Gasses found in the SCCL include a common base class for 
all STEP entity class definitions and classes to maintain meta information from the 
schemas. After a brief description of some problems solved by the SCCL, this 
section will conclude with definitions of the major classes in this library. 

A problem with any translation of a conceptual model into an implementation 
language is in the translation of the semantics conveyed by the concepmal model. 
The symbolic names used in a model store some of the meaning intended by the 
modelers. Consider the following type definition. 

TYPE inches = INTEGER; 

END_TYPE: 

To a human reading a conceptual model, the term inches conveys more information 
than the term integer. At first glance, it may seem as if inches can simply be 
translated to an integer and all would be well; however, this approach loses the 
semantics captured by the term inches. Furthermore, many of the tools that are 
being developed explicitly require that the symbolic information be available. 

To capture the symbolic information several classes have been created. The 
STEP entity class captures information pertaining to the entities of the conceptual 
model: the STEPattribute class handles the descriptions of the entity’s attributes. 
The STEPenayieration class currently stores the symbolic name of enumerated 
values. A class to retain the defirtitions types specified in the conceptual data 
models is the subject of future work. 

4.2.1 The STEPentity Class 

Meta information for every Express entity is stored in the base class STEPentity. 
This class is the root of each tree of classes corresponding to the entities in the 
Express conceptual data model. The data members and member functions for the 
class STEPentity are: 

Data Members Description 

instance_id a global identifier represented as an integer assigned to 

each instance of an entity 

STEPfile.id an identifier assigned to an instance in the input STEP 

exchange file 

reference.count an integer referring to the number of references to a 
particular instance 

application.marker an integer reserved for use specific to an application 

attributes the list of pointers to the standard data members 

specified in the STEP conceptual data riKxlel 


Page 12 


The NIST STEP Class Lilxary 








Member Functions Description 

Name the virtual function that returns the entity name for an 

instance of a class. 


opcode 

STEPwrite 

beginSTEPwrite 

STEPread 


the virtual function that returns an integer assigned to 
represent a STEP entity 

prints out an entity using the STEP exchange protocol. 

prints out any unprinted entities referenced by the entity 
being printed. 

reads an input stream of data in the STEP exchange 
format and assigns the values to the data members of the 
class instance. 


The exchange protocol implemented by STEPwrite and STEPread in the current 
version of SCL is defined in an ISO document [AlteSSa]. The ISO TC184/SC4/ 
WGl working group, which is investigating mechanisms for sharing data between 
applications, developed the protocol. Eventually, the standard will provide 
implementation rules for common memory and shared databases, but for now the 
definition is limited to this single exchange format. 

A key design goal for SCL was to isolate the implementation of the exchange 
protocol from the class definitions in the STEP Schema Qass Library. By doing 
so, it is possible to change the exchange protocol without disturbing code that uses 
the ST^ Schema Qass Library. This also hides the details of the protocol fix)m 
the application developers. The following details of the current protocol should 
never be seen directly by the developers. It has been included for reference 
purposes only. 

The exchange file has a syntactic format based on an Express schema. The 
file is a series of sets of data values. The format of the data sets is based directly on 
the entity definitions of the corresponding conceptual data model. Hgure 6 shows 
an example of the file exchange format The numbers preceded by the symbol @ 
are instance identifiers, which are assigned to the data member STEPfile Jd by the 
member function STEPread. 

STEP; 

HEADER; 

FILE.IDGNTIFICATIONflBMPRT^.lOQO 01 2418 30 lACtJICKEEl,(COMPANY ai.'l VI'.’PDES'): 

FILE.DESCRIPTIONfSIMPLE PABT): 

IMP.LEVELCUSER (DEFINED ENTfriES ONUYl; 

ENOSEC; 

DATA; 


9l0-OIRECnON(„0.70710e78450312ia0.7071067845031212.0.); 
920-OIRECTION(.,-0.70710e784S0312ia0.70710e784503121^0.); 
921 >OIRECnON(„ 0 ., 0 ., 1 .0000000308363815): 

e22-CARTESIAN_POmT(„0.062S.21 ^704904354248047.11 ^200007329711914); 

O23.TRANSFORMATION(,jn0.#204l21J22.); 

O24.C00R0INATE_SYSTEM(„.«23); 


Figure 6. Excerpt from a STEP exchange file based on the Geometry model 


Ihe NIST STEP Gass Libiary 


Page 13 




4.2J 


4JJ 


An issue of concern in this implementation was whether to make the STEPentity 
class a virtual or base parent of the schema classes. Currently the STEPentity class 
is implemented as a root node of each entity hierarchy. However, a schema is not 
required to be a true hierarchy; therefore, it would be more general to implement the 
class as a virtual parent of each STEP class. There are several reasons why this 
implementation was not chosen. Hrst, it is less generic in the sense that the ability 
to cast a pointer to a virtual parent to a pointer to the appropriate class is not built 
in to C-H-. Second, virtual classes were first supported in C++ version 2.0 which 
supports multiple inheritance. Version 1.2 of C++ does not support this, and several 
of the database systems being considered for incorporation into the software 
currently run only with Version 1.2. The problem of a non-hierarchical entity 
structure has not been a concern with the models used to date. 

STEPattribute 

The data member attributes of the class STEPentity is a list of pointers to data 
members that are STEP attributes. These pointers are represented by the class 
STEPattribute. A STEPattribute object contains the following data members: 


Data Members 

Descriotion 

shared 

a Boolean value indicating whether the anribute is also 
usable by another instance of a STEPentity 

nullable 

a Boolean value indicating whether the attribute needs to 
be populated for the instance to be a valid STEP instance 

type 

an enumerated value that indicates the data type of the 
attribute 

name 

the name of the attribute as specified in the STEP 
conceptual data model 

ptr 

the pointer to the data member representing the attribute 

type_name 

name of a type as defined in the Express conceptual data 
model 

Member Functions 

Descriotion 

aread 

reads in an attribute from an istream in the format 
specified by the STEP exchange file 

screen_rcad 

reads in an attribute’s value from standard input 

aprint 

prints out an attribute in STEP exchange format 


STEPattributeList 

The STEPattributeList class is the key to providing common functionality for 
members of the STEPentity class. A STEPattributeList is a list of STEPattributes. 
The list can be used to traverse the STEP data members of any entity instance. For 
example, STEPwrite can traverse the STEPattmibuteList for any ^EPentity and 
print the value of each elenwnt in the list in the format of the ST^ exchange file. 


Page 14 


The NIST STEP Gass Library 







The STEPwrite function is only defined in one place rather than being redefined for 
each entity. The STEPattributeUst could also be used to print the names of the 
attributes. 

4.2.4 STEPenumeration 

Enumerated data types are handled by the base class STEPenumeration. This class 
maintains a list of the symbolic values that an enumeration is able to assume. An 
enumeration has two constructors: one accepts an integer value and the other takes 
a character string, which is the enumeration’s symbolic value. The constructors 
check to make sure that the given value is in the specified domain. It may seem that 
an enumerated type in the conceptual data model should be directly translated to an 
enumerated type in C-H-; however, this translation loses the semantics of the 
enumerated type. The symbolic values of the enumeration are both necessary and 
desirable. These values are needed to interpret a STEP exchange file in which 
enumerated values are represented by their symbolic names. When building 
interactive data editors that prompt the user for values, it is desirable to have such 
information available. 

5.0 Example Applications 

Several prototype applications have been started using SCL and several others are 
in the plaiming stage. The following sections describe a few of these first attempts 
at using the library to implement STEP. 

5.1 STEP Data Probe 

The STEP Data Probe is being developed in the National PDES Testbed to support 
validation testing of the STEP model. Test data will be created, viewed, changed, 
and deleted using the STEP Data Probe. The probe can also be used to browse the 
STEP schemas. 

In some cases, using the probe directly will have limited practicality, such as when 
trying to locate a specific point or edge in a large mechanical structure. In these 
circumstances the probe will be integrated into higher level viewing aids, such as a 
solid model browser. In this configuration, the Data Probe will be given a reference 
from the graphic browser when an edge or a comer is selected. The probe will 
present a view of the STEP data that corresponds to the item that was graphically 
selected. In this role the probe will provide a practical and consistent mechanism 
for viewing STEP data. To incorporate the STEP Data Probe functionality into an 
application, the developer will li^ in the STEP Data Probe Class lAbrary (see 
Section 4.0). 

5.2 IGES to STEP Translator 

Many existing CAD systems currently support IGES and not STEP; therefore, it 
was useful to create a translamr between the two specifications. The resulting tool 
provides a convenient mechanism for generating data for testing the STEP 
conceptual data models. 


The NIST STEP Class Libiary 


Page IS 




The translator includes a parser for the IGES file format and classes that represent 
IGES entities. When the IGES file is parsed, the data are placed into a list of 
instances of the IGES classes. Each IGES class has a member function called 
makepdes that translates the IGES entity into the corresponding STEP entities. 
Figure 7 shows the defirution of a class representing the IGES construct 
Figure 8 shows the definition of the makepdes virmal member function that does the 
translation into the corresponding STEP objects. The code that cycles through an 
IGES file and builds the STEP file uses a linked list class, a string class, fewer than 
100 lines of additional code in parser routines. The function translate, shown in 
Figure 9, uses the virtual function makepdes to cycle through the various IGES 
objects and translate them into STEP objects. 

class LineEntity: public DeNode ( 
public: 
realxl; 
rcalyl; 
realzl; 
realx2; 
realy2; 
iealz2: 

void populatepaiametersfString): 
void mi^epdesO; 

); 

Figure 7. Example of the C-m- representatiou of an IGES entity 


void LineEntity:: makepdesOl 
PoiyLine ^line « new PdyLineO: 

’n^^fomadon *locaLtiansfonnation: 

if (this->tiansfonnatioa_mattix = 0 ) iocal.tiansformation s NULL; 
else 

locaLtransformadon «((TransfonnatioaMatrixEntity*) 

mylist(diis*>transfonnati(m_inatrix])->PdesTransfonnation; 
line->axis > locai_tiansformation; 

CartesianPouit *point« new CartesianPcmtO; 
point->x_coofdinate a xl; 
point->yjcootdinate * yl; 
point->z_coordinate « zl; 
line->poinis.push(point); 
pdesIistpushCpoint); 
point a new Caite^anPointO; 
point->x_coordinate = x2; 
point->y_coardinate > y2; 
point->z_coonlinaie * z2; 

Iine->points.push(point); 

pdeslistpush(point); 

pdeslist.push(Iine); 

) 

F^nre 8. Example of malw/Nfes monber hinctioo for an IGES entity 


Page 16 


The NIST STEP Class Library 










void translateOl 
int index; 

DeNode *enay = mylistPirstO: 
while (mylisLAtEndO != 1) { 
index = entry->sequence_numbcr, 

entry->makepdesO: 

if (index != entiy->sequence_nuinba') entry = mylisLlndex(index); 
entry = tnylistNextO; 

) 

) 


Figure 9. Function translate from the IGES to STEP translator 


5.3 Databases 

STEP provides the definition of pnxiuct information, but it does not define how the 
data are stored. Some applications will rely on exchange files, others may require 
relational databases, and yet other STEP applications may use an object-oriented 
database. 

The implementation of a database is not the target of the standardization e^oit. 
Within the Testbed, however, the conceptual data modeling and validation 
activities need access to a data storage and query capability. Consequently, storage 
tools have been investigated. At present, a limited SQL-based implementation of a 
STEP database has been develops The SQL statements to generate the database 
tables were directly translated from Express using the Fed-X parser. 

An object-oriented database implen^ntation of STEP is being considered for the 
Testbed, but this effon is currently limited by the lack of an object-oriented 
equivalent of the SQL standard. There is interest in STEP among object-oriented 
database vendors, and several vendors are investigating approaches to 
implementing STEP in their databases. 

5.4 Process Planning Tool 

The STEP model has incorporated many of the features of a process planning 
language called ALPS (A Language for Process Specification) [Catron&Ray90], 
which has been developed at NIST. An Express language based conceptual model 
for ALPS has been translated into C-h- using/edez _plus and the resulting classes 
are being used with SCL as pan of a C-h- implementation of a shop floor controller. 
Future plans for this project include extending the exchange mechanism of SCL to 
store the process work plans in an object-oriented database. 


Hw NIST STEP Class Library 


Page 17 








6.0 


Summary 


7.0 


The existing version of SCL only partially nwets the needs of a class library for 
implementing or testing STEP. Several of the significant tasks that will be 
ad^ssed in the future development of SCL are examined below. 

SCL has not addressed enforcement of sonae of the constraints on STEP entities. 
Without enforcement of these constraints, the semantics of STEP will not be fully 
enforced by the library. The most difficult challenge in constraint checking will be 
in implementing the rules and where clauses. The current plans for implementation 
call for a virtual member function, named STEPvalidate, in the STEPentity class. 
For each entity class in the STEP Schenoa Qass Library a specialized version of 
STEPvalidate would be generated to enforce the constraints of the entity. 

The mapping of inclusive subtypes from Express into C-h- must also be resolved. 
While the C-h- inheritance model is sufficient for representing generalization 
relationships [Smith&Smith77] where the subtype d^larations are all mutually 
exclusive, it does not directly support the type of inheritance representation found 
in the inclusive subtype construct Another method must be developed for dealing 
with this construct 

Functions and procedures from the Express language will be mapped into C-i-i- in a 
future release of SCL. 

The existing implementation of SCL only provides an exchange protocol for STEP 
data. Future releases may incorporate a database system, an SDAIS class 
implementation, and a shared memory implementation. 

In the long term it would be helpful to further develop the STEP Schema Classes 
themselves by adding functionality which, although useful and necessary to an 
application, is not directly derivable from a specification written in Express. For 
example, a move function could be added to the Geometry class to relocate it in 
space. This function would be generally applicable to any object of this type. 

Conclusion 

An alpha version of the STEP Class Library has been used in several prototype 
applications. This version meets many of the interface requirements of the d^ 
specification of STEP. The results of this proof-of-concept development effort 
demonstrates that C-h- provides an effective implementation n^h^sm for STEP 
and that the library mechaitism developed for this project provides a manageable 
development tooL The project will proceed with plam to use SCL as the basis for 
tools in the Testbed, tqiplication prototypes, and a reference inq)lementation. 


Riga 18 


The NIST STEP Class UlKBry 









References 

[Alte88a] 

[Alte88b] 

[ANSI86] 

[Bloom89] 


[Briggs90] 

[Catron&Ray90] 

(aark90] 

[Cox87] 

[Ellis&Strou90] 

[Fowlei90] 

[Goldbeig8S] 

[Kim89] 

[Meyer88] 

[Mitch90] 

[NCGA90] 


Altemueller, J., The STEP File Structure. ISO TC184/SC4/WG1 
Document N279, September, 1988. 

AltemeuUer, J., Mapping from Express to Physical File Structure . 
ISO TC184/SC4/WG1 Document N280, September, 1988. 

American National Standards Institute, Database Language SOL. 
Document ANSI X3.135-1986. 

Bloom, H. The Role of the National Institute of Standards and 
Technology as it Relates to Product Data Driven Engineering. 
NISTIR 89-4097, National Institute of Standards and Technology, 
Gaithersburg, MD, April 1989. 

Briggs, D., et al., STEP Data Access Interface Specification . ISO 
TC184/SC4/WG1/SG3 Document N499, June, 1990. 

Catron, B., and Ray, S., ALPS - A Language for Process 
Specification. International Journal of Computer Integrated 
Manufacturing, special issue on Process Planning and Design for 
Manufacture, expected November 1990. 

Qark, S.N., Fed-X: The NIST Express Translator. NISTIR 90-4371, 
National Institute of Standards and Technology, Gaithersburg, MD. 
July 1990. 

Cox, r. J., Obiect-oriented programming. Productivity Products 
International, Addison-Wesley Publishing Company, 1987. 

Ellis, M., and Stroustrup, B., The Annotated C-h- Reference 
Manual. Addison-Wesley Publishing Company, 1990. 

Fowler, J., STEP Production Cell. NISTIR, National Institute of 
Standards and Technology, Gaithersburg, MD, forthcoming. 

Goldberg, A. and Robson, D., Smalltalk-80: The Language and its 
Inmlementation. Addison-Wesley, Reading, MA, July, 1985. 

Kim, W. and Lochovsky, F., eds., Object-Oriented Concepts. 
Databases, and Applications. ACM Press, NY, 1989. 

Meyer, B., Object-Oriented Software Construction. Prentice Hall, 
Englewood Cliffs, NJ, 1988. 

MitchelL M.. Validation Testing Systems. NISTIR. National 
Institute of Standards and Technology, Gaithersburg, MD, 
forthcoming. 

National Computer Graphics Association, IGES / PDES 
Orgaruzation Reference Manual . July 1990. 


The NIST STEP Class litnry 


Page 19 





[Scheifler88] 

[Schenclc90] 

[Smith&Smit77] 

[Stnith88] 

[Smith89] 


Scheifler, R., Gettys, J., and Newman, R., X Window System: C 
Library and Protocol Reference. Digital Press, Bedford, Mass, 1988. 

Schenck, D.. ed., Information Modeling Language ExpressL 
Language Reference Manual. ISO TC184/SC4/WG1 Document 
N466, March 1990. 

Smith, J.M., and Smith, CP., Database abstractions: aggregation 
and pfeneraliTarinn. ACM Transactions on Database Systems, pp. 
105-133, vol. 2, no.2,1977. 

Smith, B., and Rinaudot, G., eds.. Product Data Exchange 
Specification First Working Draft. NISTlK 88-4004, National 
Institute of Standards and Technology, Gaithersburg, MD, 
December 1988. 

Smith, B., Product Data Exchange: The PDES Project. Stams and 
Objectives. . NISTIR 89-41654, National Institute of Standards and 
Technology, Gaithersburg, MD, September 1989. 


Page 20 


The NIST STEP Class Libruy 




NIST-114A 

(REV.M9) 


U.S. DEPARTMENT OF COMMERCE P- «J«ucatiom or report mummh 
NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY >IISTIR 4411 _ 

2. PERFORMINO OROANOATION REPORT NUMBER 


BIBLIOGRAPHIC DATA SHEET 


X PUBUCATION DATE 

SEPTEMBER 1990 


«. TITLE ANOSUBTnU 


The NIST STEP Class Library (STEP into the Future) 


X AUTMOR(S) 

HcLay, Michael J., Morris, Katherine C. 


X PERFORMINO ORGANIZATION OF JOINT OR OTHER THAN NIST, SEE INSTRUCTIONS) 
U.S. DEPARTMENT OF COMMERCE 

NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY 
GAirmRSBURO, MO 20699 


7. CONTRACT/QRANT NUMBER 


X TYPE OF REPORT AND PERIOD COVERED 


9. SPONSORINO ORGANIZATION NAME AND COMPLETE ADDRESS (STREET, CITY. STATS, ZIP) 


10. SUPPLEMENTARY NOTES 


DOCUMENT DESCRIBES A COMPUTER PROGRAM; SF-IOX FIPS SOFTWARE SUMMARY, IS ATTACHED. 


11. ABSTRACT (A 200-WORD OR LESS FACTUAL SUMMARY OF MOST SIGNIFICANT INFORMATION. IF DOCUMENT INCLUDES A SIGNIFICANT BIBUOGRAPHY OR 
UTERATURE SURVEY, MENTION IT HERE) 

This paper describes a C++ class library that implements the 
Standard for the Exchange of Product Model Data (STEP). The STEP 
class Library (SCL) is under development at the National Institute 
of Standards and Technology as part of the National PDES Testbed 
and provide the core set of STEP functions for tools that are used 
to validate the STEP information models and for STEP based 
application prototypes. The library also lowers the economic 
barrier to developing STEP based applications. The current version 
of the library provides a STEP compliant file exchange mechanism, 
consequently, users of the class library will not have to create 
an input/output mechanism for STEP. 

The paper provides an introduction to STEP and the specification 
language. Express, in which it is written. The supporting classes 
that provide the STEP compliant input/output mechanism and the 
mapping between the Express specification and the C++ classes are 
described. The paper concludes with descriptions of some 
applications that use the class library and a discussion of future 
directions for the class library. 


1Z KEY WORDS (B TO 12 ENTRIES; ALPHABETICAL ORDER; CAPITALIZE ONLY PROPER NAMES; AND SEPARATE KEY WORDS BY SEMICOLONS) 


C++; CAD; CALS; CAM; CAPP; Core Library; Data Exchange Standards; 
Express Language; IGES; National PDES Testbed; PDES; SCL 


IX AVAILABIUTV 


14. NUMBER OF PRINTED PAGES 


FOR OFFICIAL DISTRIBUTION. DO NOT RELEASE TO NATIONAL TECHNICAL INFORMATION SERVICE (NTIS). 


ORDER FROM SUPERINTENDENT OF DOCUMENTS. U.S. GOVERNMENT PRINTING OFFICE, 
WASMINOTON,DC 2040X 

ORDER FROM NATIONAL TECHNICAL INFORMATION SERVICE (NTIS), SPRINGFIELD, VA 22161. 



eLecmowcpoRM 





















