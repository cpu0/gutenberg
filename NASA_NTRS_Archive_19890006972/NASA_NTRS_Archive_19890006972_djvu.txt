N 83-16343 


RT_ BUILD : An Expert Programmer for Implementing 
and Simulating Ada Real-Time Control Software 


Larry L. Lehman* 
Steve Houtchens ** 

j/c tfc 

Massoud Navab 
Sunil C. Shah f 
Integrated Systems Inc. 
101 University Ave. 
Palo Alto, CA 04301 
(415)-853-8400 


Abstract 

RT. BUILD is an expert control system programmer that creates real-time 
Ada code from block-diagram descriptions of control systems. Since RT. BUILD 
embodies substantial knowledge about the implementation of real-time control 
systems, it can perform many, if not most of the functions normally performed 
by human real-time programmers. Though much basic research has been done 
in automatic programming, RT. BUILD appears to be the first application of 
this research to an important problem in flight control system development. 
In particular, RT. BUILD was designed to directly increase productivity and 
reliability for control implementations of large complex systems. 

RT. BUILD Capabilities 

RT. BUILD implements control systems designed with the MATRDC X control 
design package. Control systems are specified as nonlinear, multi-rate, discrete- 
time block-diagrams in the interactive graphical environment of MATRIX x ’s 
SYSTEM.BUILD™ module. RT. BUILD accesses the SYSTEM-BUILD data- 
base to create an exact implementation of the design. 

The code produced by RT. BUILD includes all specified dynamic compensation 
and control logic, a real-time application level executive, and generic software 
interfaces to hardware such as sensors, actuators, and displays. 

* Manager , Software Development 
** Member, Technical Staff 
f Manager, Real-Time Systems 


E.3.2.1 



The efficient executive performs the task scheduling and interrupt handling re- 
quired to implement real-time multi-rate controllers. Initialization/termination 
and exception handling functions are also included. 

The software elements for an application are automatically assembled from a 
modular library of Ada control functions. User supplied control or interface 
functions (such as specific hardware drivers or existing Ada control algorithms) 
can also be included from user libraries. 

The real-time code produced by RT- BUILD is highly optimized for speed. Fur- 
ther optimization (speed or memory) is normally performed by optimizing com- 
pilers. The net result is an automatic implementation of the design whose real- 
time performance is extremely difficult to surpass. 

RT. BUILD can be used at the final stage of the control engineering cycle to 
generate real-time code for most control problems including: aircraft /spacecraft 
control, robotics, process control, servo control, and any other real-time Ada 
application. Earlier in the engineering cycle, RT_ BUILD can be used to de- 
velop off-line simulations or real-time hardware-in-the-loop simulations. Since 
RT- BUILD can be used to rapidly estimate real-time processing requirements, 
implementation considerations and processor constraints can be considered much 
earlier in the control development cycle. 

RT. BUILD Design Goals 

RT. BUILD was designed to address the requirements of flight software. The 
following aspects distinguish flight software from real-time software used in pro- 
totype testing. 

(i) Flight software is used over a long time period. It must be very easy to 
maintain, update, and verify. 

(ii) Processing power and memory are at a premium. They must be used 
efficiently. 

(iii) The real-time software must be capable of handling a variety of input- 
output mediums. 

(iv) The software must handle multi-processor implementations, since most 
flight control systems must use many processors. 

(v) The software must accurately implement the designed control systems 
since costs of making errors can be very high. 


E.3.2.2 



The paper will describe how recent developments in computer-aided engineering 
have been applied to meet these requirements in RT_ BUILD. 

RT_ BUILD Design Approach 

Real-time software is generated around the concept of a modular, reconfigurable 
periodic scheduler and associated computation modules that can coexist with 
other foreground computing tasks (e.g., interrupt service routines) as well lower 
priority background processes. Device independent interfaces are incorporated 
in this design to isolate hardware dependencies. The Ada Periodic Scheduler 
(APS) is designed to provide periodic pre-emptive priority-based execution of 
tasks. The scheduler as well as the rest of the software is written in Ada. 

The detailed paper will show various details of the design procedures and soft- 
ware structure as well as the role Ada capabilities play in this automatic code 
generation. 

A Multi-Disciplinary Technology 

The paper will discuss the multi-disciplinary technology required to develop 
an integrated set of Computer-Aided Control Engineering (CACE) tools which 
include automatic code generation capabilities. 

While current tools provide a tremendous improvement in flight control systems 
development, areas where further research is being conducted will be covered in 
the detailed paper and the presentation. 


RT. BUILD, MATRIX x , and SYSTEM-BUILD are trademarks of Inte- 
grated Systems Inc., Ada is a trademark of the U.S. Department of Defense (Ada 
Joint Program Office). 


E.3.2.3 


