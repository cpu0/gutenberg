N95- 14167 


SAFETY CRITICAL 
SYSTEMS ! \ 



RESEARCH & APPLICATIONS 


37 ^ 9 / 

f- /S 

/99S" 


SYMPOSIUM *92 


CIFO 3.0 


Pat Rogers 


ABSTRACT 

The Ada Runtime Environment Working Group (ARTEWG) has, since 1985, 
developed and published the Catalog of Interface Features and Options (CIFO) for Ada runtime 
environments. These interfaces, expressed in legal Ada, provide “hooks” into the runtime 
system to export both functionality and enhanced performance beyond that of “vanilla Ada 
implementations. Such enhancements include high- and low-level scheduling control, 
asynchronous communications facilities, predictable storage management facilities, and fast 
interrupt response. CIFO 3.0 represents the latest release, which incoiporates the efforts of the 
European realtime community as well as new interfaces and expansions of previous catalog 
entries. This presentation will give both an overview of the Catalog’s contents and an 
“insider’s” view of the Catalog as a whole. 


BIOGRAPHY 

Pat Rogers is a Consulting Scientist at SBS Engineering in Houston, where he is the 
principal investigator for a project which has developed a Distributed Ada implementation for 
the U.S. Air Force. He has been involved with Ada since 1980, is a founding member of 
ARTEWG, and is a contributing member of the CIFO development subgroup. 





r « 


J CIFO 3.6 fr . 


The New CIF0 : Bridging Ada83, 
Realtime Systems and Ada9X 

Pat Rogers 

SBS Engineering, Inc. 

18333 Egret Bay Blvd., Suite 340 
Houston, Tx 77058 
713/333-5040 


Engineering RICIS’92 


CIFQ3.0 j 


What Is CIFO? 

m Catalog of Interface Features and Options 

■ A set of common packages, subprograms and pragmas used 
to extend the capabilities of the Ada baseline facilities (the RM) 
via the runtime environment 

■ Developed by the Ada Runtime Environment Working Group - 
ARTEWG (‘art-wig’) 

■ Began in 1985, first working meeting at UHCL 

• Dr. Charles McKay is chair of team 

■ Many Ada compiler vendors supporting CIFO 

■ Manyusers, including Space Station Freedom contractors 


SBS Engineering RICIS’92 


CIFO 3.0 


Page 1 


RICIS’92 




SES Engineering p*e*i RICIS’ 92 



SB 5 Engineering RICIS’92 


CIFO3.0 


Page 2 


RICIS’92 






SBS Engineering p«q** R1CIS'92 



SBS Engineering RICIS’92 


CIFO 3.0 


Page 3 


RICIS’92 



CIFQ3.0 | 

Functional Categories 

a Basic Mechanisms 

■ Scheduling Controls 

■ Asynchronous Cooperation Mechanisms 

■ Interrupt Support 

■ CompilerDirectives 

■ Memory Management Mechanisms 


•^Indicates a new entry in following pages 


SBS Englnwlng *■«•* R1CIS’92 


CIFQ3.0 | 

Basic Mechanisms 

a Task Identifiers 
w Queuing Discipline 

• Provides basic definitions for task entry and scheduling disciplines 


SBS Engineering RICIS’ 92 


CIFO 3.0 


Page 4 


RICIS’92 




J CIFO 3.0 


Scheduling Control 


m Synchronous & Asynchronous Scheduling 

•• Priority Inheritance Discipline 

• Provides priority inheritance configuration in the RTS 

■ Dynamic Priorities 

■ Time Critical Sections 

■ Abort Via Task Identifier 

■ Time Slicing 


SBS Engineering 


Pag* t 


RICIS’92 


J CIFO 3.0 | 

Scheduling Control 

•■Task Suspension 

• Provides a low-level means of controlling dispatching and 
execution, in a cooperative manner 

w Two-Stage Task Suspension 

• Provides (ow-level controls that avoid race conditions 

•^Asynchronous Task Suspension 

• Allows one task to bilaterally prevent execution of another 

; «*■ Synchronization Discipline 

- • Allows specification of criteria for queuing entry calls and choosing 

I among open select alternatives 


SBS Engineering p«o*io RICIS’92 


CIFO 3.0 


Page 5 


RICIS’92 



_ [ C1FQ3.0 \ _ 


Asynchronous Cooperation 


Resources 

• Provides efficient access control for (hardware) resources 

Events 

• Provides efficient task notification of latched conditions 

Pulses 

• Provides efficient task notification of non-latched conditions 

Buffers 

• Provides efficient asynchronous intertask communication 

Blackboards 

• Provides efficient inter-task messages 


SBS Engineering 


RICIS’ 92 


CIFQ3.0 l 


Asynchronous Cooperation 


m Mutually Exclusive Access to Shared Data 
w Broadcasts 

• Provides an efficient message broadcast capability 

w Barriers 

* Allows simultaneous resumption of a fixed number of waiting tasks 


■Asynchronous Transfer of Control 

• Supports ATC for fault recovery, mode changes etc. 

■ Shared Locks 

• Provides a very sophisticated lock facility 

'Signals 

• Supersedes previous ‘Asynchronous Entry Call' interface 


SB S Engineering 


Pag* 12 


RICIS’92 


CIFO 3.0 


Page 6 


RICIS’92 




r m 


CIFQ3.0 | 

Interrupt Support 

■ Interrupt Management 

■ Trivial Entries 

■ Fast Interrupt Pragmas 


Engineering i* RICIS’92 


CIFQ3.0 | 


Compiler Directives 

m Pre-elaboration of Program Units 

«*■ Access Values That Designate Static Objects 

* Provides a more portable means to reference static objects 

Passive Task Pragmas 

* Provides a standardized approach to task "passification’ 

•■Unchecked Subprogram Invocation 

• Provides more reliable means of invocation by address 

Data Synchronization Pragma 

• Allows CIFO task synchronization facilities to be used to share data 


S8S Engineering RICIS'OT 


CIFO 3.0 


Page 7 


RICIS’92 



JCIF03£^J 


Memory Management 

Dynamic Storage Management 

• Provides predictable, flexible storage management facility 



SBS Engineering 


R1CIS’92 


CIFO 3.0 | 

Deleted Entries 

» Special Delays 

• One of the vendors convinced us that it was counter-productive 

■ Transmitting Task Identifiers Between Tasks 

' Removed in lieu of a more safe, coordinated approach to 
distribution facilities 


SB S Engineering 


Pag* IS 


RICIS’ 92 


CIFO 3.0 


Page 8 


RICIS’92 




J CIFQ3.0 \ 

Priority Inheritance 

package PriorityJnheritance_Discipline is 

procedure Set_Priorrty_lnheritance_Criteria; 
procedure Re$et_Priority lnheritance_Criteria; 
end PriorityJnheritance_Discipline; 

pragma Set_PriorityJnheritance_Criteria; 

I ■ Enables/disables priority inheritance 
I ■ Procedural interface allows switching !! 


SBS Engineering RJCIS’92 


J CIFQ3.0 | 

Task Suspension 

with TaskJDs; 

package Task_Su$pension is 

procedure Enable_Dispatching; 
procedure DisableJDispatching; 

Function Dispatching_Enabled return Boolean; 
procedure Suspend_Self; 

procedure Resume_Task( Target : in TaskJds.TaskJd ); 
end Task_Suspension; 

- ■ Tasks can control their own suspension 

- ■ Safe if not multiprocessing 


SBS Engineering RICIS’92 


CIFO 3.0 


Page 9 


RICIS’92 



J CIFQ3.0 | 

Two-Stage Task Suspension 

with TaskJDs; 

package Two_Stage_Task Suspension is 
Suspension_Error: exception; 
procedure Will_Suspend; 
procedure Suspend_Se!f; 

procedure ResumeJTask( Target : in TaskJds.TaskJd ); 
end Two_Stage_Task_Suspension; 

■ Safe for multiprocessing 


SBS Engineering RICIS’92 


CIFO3.0 


Asynchronous Task Suspension 

with TaskJDs; 

package Asynchronous_Task_Holding is 
procedure EnableJHolding; 
procedure DisableJHolding; 
function Holding_Enabled return Boolean; 
procedure Hold_Task( T : in TaskJds.TaskJd ); 
procedure Hold_Task( T ; in TaskJds.TaskJd; Held : out Boolean ); 
procedure Re!ease_Task( Target; om TaskJds.TaskJd ); 

end AsynchronousJTaskJ-lolding; 

■ Controversial, but considered necessary 

■ All three Entries designed to interact predictably 


SBS EnginMrlng 


ZO 


RICIS’92 


CIFO 3.0 


Page 10 


RICIS’92 




CIFQ3.0 | 


Designating Static Objects 

generic 

type Object is limited private; 
type Reference is access Object; 
function Make_Access_Value{ Static ; Object ) return Reference; 
pragma May_Make_Access_Value( <type_mark > ); 
Make_Access_Supported : constant Boolean := <value>\ 


SBS Engineering RICIS’92 


CIFQ3.0 | 


CIFO Procurement Issues 

■ “More" is not “Better" 

• Unused Entries slow down others 

- Some Entries will never be implemented 

• Some Entries will conflict with others 

■ Conformance is only per Entry 

• Semantics of Entry 

• Interactions with other Entries 


SBS Engineering RICIS’92 


CIFO 3.0 


Page 1 1 


RICIS’92 



JCIF03£^) 

Adult Programming 

■ Don't mix conflicting Entries 

• Example: Various scheduling controls 

• Use the Interactions Matrix 

• Some Semantic ambiguities may still exist 

■ Don’t use the “dubious" Entries 

• The procedural interface to Priority Inheritance Discipline (use the 
pragma) 


SBS Engineering p«g*23 RICIS’ 92 




CIFO and Ada9X 

m Should 9X obviate a CIFO? 

■ A new “9X* version will eventually exist 

• Many Existing Entries will be removed 

• Some new Entries will be required! 

■ Ada83-based CIFO is needed now 


SBS Engineering p«q*24 RIC1S’ 92 


CIFO 3.0 


Page 12 


RICIS’92 



I CIFO 3.0 l 


Future Efforts 


m Distributed Systems 

■ Multiprogramming 

■ Multi-level Security 

■ CIFO test suite for “conformance’ 

■ Continuing refinement of existing Entries 


SBS Engineering 


Pag* 2$ 


* RICIS’ 92 


CIFO 3.0 | 


Concluding Remarks 

■ Some controversial interfaces are defined 

• Low level asynchronous task control 

■ Some questionable interfaces are defined 

• Procedures that require paradigm shift at runtime 

■ Still the best approach available 

• Some proven, very useful interfaces are standardized 

• Meets the needs of the realtime community now 

■ Can serve as a bridge for Ada9X 

• Some interfaces are now in Ada9X, in one form or another 

• Education re: issues addressed by CIFO as intro to Ada9X 


SBS Engineering 


Pag* 24 


RIOS’ 92 



J CIFQ3.0 \ 

Other ARTEWG Activities 

m Catalog of Runtime Implementation Dependencies 

■ Framework For Describing Ada Runtime Environments Model 
Runtime System Interface (MRTSI) 

■ Ada9X Revision Requests 

■ Ada9X Realtime facilities design review 


SBS Engineering 


Pag* 27 


RICIS’92 



CIFO 3.0 


Page 14 


RICIS’ 92 



