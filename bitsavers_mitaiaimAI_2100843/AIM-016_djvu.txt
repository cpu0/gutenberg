Artificial Intelligence Project—RLE and MIT Computation Center 

< o 

Memo 16- -A Question- Answering Routine ' 

by 
v Anthony Valiant Phillips 

A program has been written in the LISP programming language 
to answer English-language questions by consulting an English- 
language text* The program can handle questions about the si-b- 
jec;, verb, place and time of simple sentences. The program pro- 
ceeds in two steps. In the first, the machine analyzes the cues- 
tion and the sentences of the text, and puts them into a form in 
which they can be compared. For this analysis the machine must 
have as input a dictionary of part-of -speech tags, and a set of 
rules, analogous to phrase -structure rules, according to which it 
• will organize the sentences? .j This analysis organizes the sentences 
into noun-phrases, verbs, and prepositional phrases. The machine 
then picks from the seftfoence a subject, a verb, an object, and pre- 
positional phrases relating to place and time. This is the "canon- 
ical form" of the 4 sentence.' * 

The next part of the program compares the question with each 
of the sentences in the text. Those that match, i.e. contain the 
information the question is, asking for, are stored and the answer 
is made up from them. If none are found, an appropriate negative 
answer is given. 

This routine has been debugged and has run successfully. 

^ Introduction 

The original aim of this research was a routine that could 
pass a reading-comprehension text suitable for six or seven-year- 
old children, and even though we had to lower our sights, this 
still gives the best idea of the purpose of this paper. By she 
time a child has learnt to read, he is already capable of feats 
of data analysis that seem very difficult, if not impossible, to 
duplicate on a machine. The child has picked up the key to 



The author wrote this paper while working with the KechanicE;l 
Translation group in RLE, supported in part by the National 
Science Foundation and in part by the U.S. Army (Signal Corps), 
the U.S. Air Force (Office of Scientific Research, Air Research, 

i aid Development Command) and the U.S. Navy (Office of Naval Re- 
search). In addition, this work was done in part at the MIT 

- Computation Center, Cambridge, Massachusetts. 

2'i : 

// T?his paper was submitted to the Department of Mathematics on 
| May 21, i960 in partial fulfillment of the requirements for the 
1 degree of Master of Science. Thesis Supervisor for this paper 
■ was John McCarthy, Assistant Professor of Communication Sciences, 

Department of Electrical Engineering, MIT, Cambridge, Massachusetts, 



-2- 

syn tactic analysis, and has begun to assimilate the huge mao.3 of V 
.common knowledge that is taken for granted in human communica- 
tion. He is also becoming initiated, although slowly*, to the 
habit of reasoning, and is learning to handle logical connectives 
and quantifiers. These are all directions this paper did no; ex- 
plore. 1 

f The idea behind the answering process that will be described 
in the following pages is very simple.' We. assume that each oues- 
tidn asks for a piece of information, and that pieces of infor- 
mation are contained in the text, one to a sentence. The answer- 
ing routine consists then in trying to match the question against 
successive sentences of the text to see if any one of them con- 
tains the information asked for. 

The routine first performs an analysis of- the question and 
of each sentence of the text, and edits them into a form in which 
they can be compared. It then performs the comparison, and prints 
out appropriate answers. The following examples are taken from 
actual machine runs, not using the three functions mentioned above. 

Examples: text: ((AT SCHOOL JOHNNY MEETS THE TEACHER) 

(THE TEACHER READS BOOKS IN THE CLASSROOM) ) 

question: (WHERE DOES THE TEACHER READ BOOKS) i 

answer: (((IN THE CLASSROOM) (THE TEACHER READS BOOKS IN THE 
•CLASSROOM))) . 

text: (JOHNNY GOES TO SCHOOL IN THE MORNING) 

- question: (WHOM DOES JOHNNY MEET) 

answer: (THE ORACLE DOES NOT KNOW) 

Additional input is required for the sentence analysis: in • 
the examples above, the machine had also been fed three lists. 
(These are part of the "a-list".) The first, denoted by GRAMM1, 
was a part-of -speech "dictionary" of the form ((M THE) (N TEACHER) 
(V READS) (N BOOKS) (P IN) (NPL CLASSROOM) (P AT) (N JOHNNY) 
(V MEETS) (V GOES) (P TO) (NTI MORNING) (NPL SCHOOL) (AUXl DOES) 
(AUX1 DO) (V READ) (V SIT) (Q- WHERE) (Q WHAT) (Q WHOM) (N MARY)). 



See Piaget and Inhelder, La Genese des Structures Logi ques 
, Elementaire3 , Delachaux eF~Niestle, _ Neuchatel, 19557^ 



-3- 

w The second list, GRAMM2, is a set of "grammar rules" which the 
• machine uses to analyze the sentences and the question. For the 
examples above, the GRAMME list was '(((M NPL) NPL) ((M N) N) 
((P NPL) PNPL) ((P NTI) PNTI) ( (M NTl) NTl) ((p NTl) PNTl)). The 
third list, referred to as Z, is of the form (((DOES GO) GOES) 
((DOES DO) DOES) ((DOES READ) READS)). These three lists, the 
sentence and the text are processed by th3 program described In 
the following pages, and printed out in A 

Work of a similar nature is being done at the Lincoln 
Laboratory of MIT in B. P. Green's group. They are interested 
in answering questions pertaining to a table, in this case to the 
table of 1958 baseball scores. Their work should be nearly 
finished, but up to now little information has been released 
about the details of their program. (See the Lincoln Laboratory 
QPR for Division 5, December 15, 1959.) I believe that they have 
had to analyze special segments of the syntax more thoroughly 
("exactly three ..", "more than", etc.) becuase of the nature of 
their text and the questions expected about it. 

Our exposition will proceed in the following manner: first, 
to explain how our answering process works, we shall describe a 
simple example of a question-answering routine, answerl. This 
routine was written at the beginning of this study, and was de- 
bugged and will run successfully as it is presented here. It 
i answers simple-minded questions about a table, but its basic 

v mechanism is the same as that of the large program. After that 
we will present a description of the main program, followed by a 
more detailed examination of each of its subf unctions. 

A Simple Example: The program answerl 

answerl takes as input a question and a table. The table 
tells whether or not a relation R exists between any two letters 
of the alphabet.* The table is arranged as follows: 

(A R B B R C A R C ...) 

The questions that may be asked are: 

Does A R B? 

What R B? 

What does BR?, where A, B may be any two letters. 

' The program described- searches the "text" for an answer to 
the question. There is no : provision for recording two or more 



/ 



'^ 



It" will be seen below that S cannot be used. 



-if- 



answers if they should occur. Thus If A R C and A R D both ap- 
pear In the table, the answer to the question "What does A R? ™ 
will be A R C" if this entry happens to come first in the 
table. The answer will be "A R Nothing" if there is no entry of 
the form A R . . . 



answerl works as follows: It first performs qanal of th» 
question, translating it into a form where, it can be easily 
matched against the table: 

qanal changes "Does A R B? " into A R B 
"What R B?" into 'sRB 
"What does BR?" into BRB S . 

It then performs test to compare the analyzed question with the 
text, test uses testa to match the question against each suc- 
cessive table entry! If no matches are recorded, the subroutine 
neg is performed, which takes the question as input and supplies 
the correct negative answer: "A does not R B" 1, No thing R B" 
or "3 R nothing". 



testa matohes the question against an entry by using same 
to compare the words of the question with the corresponding 
words " ' ' " ■' ' 



of the table entry, same will register a match if the 
two elements it is comparing are identical, or if the question- 
element is "S", the symbol we are using for "what". This is 
expressed in the following table: 



element of table -entry 
A B 



MATCH 


NO 


MATCH 


MATCH 



element of 
question 



The LISP 'program for answerl * 

We will describe qanal in more detail than the rest of the 
program; We want qanal to operate as follows: 



A 
B 
C 



lis first word "does"? 



no^ 



yes 



Is second word "R"? 



nc 



value is 
2nd word, R, 4th word 



-yaa^. 



value is 3rd word, R, S 



value is 
S, R, 3 rd word 



for a description of the LISP language see the paper by John 
McCarthy entitled "Recursive Functions of Symbolic Expressions 
and Their Computation by Machine" in Communications of the AC M, 
Vol. 3, No. 4, April, i960. " 



-5- 



V. 



We then express A as: 

car[x] » quote[DOES] -* list[cadr[x] ,quote[R],cadddr[X] ] 

B and C are expressed similarly, and we write; 

qanalCx] -[car[X] - quote [DOES] -♦ lis t [ cadr [ X] ; quote [R] ; 
cadddr[x]];cadr[X] - quoto[R] — list[quot:>[S];quote[R] ; 
caddr[X]];T-* list[caddr[x]jquotc[R] :quote[s]] J 

answerl and its other 3ubfunctlons oan be described in a 
similar manner. We want them to act according to the flowchart: 



X 



End of table? 



no 



V 



yes 



NOTHING R X 
ft yes 



Was question 
S R X? 



no 



X R NOTHING 



j^J Was question 



JLZ *> 



-Vjl. 



yno 

X DOES NOT R Y 



Does 1st element of 
question « 1st ele- 
ment of table? 



yes 



Is 1st ele- 
no . I ment of ques- 
^tion "S 11 ?' 



no 



i 



yes 



Look at I 
next table I 



r 



entry 
A 



Does 3rd element of 
question « 3rd ele- 
ment of table? . 



P9> 



Is 3rd ele- 
ment of ques- 
tion n S ,f ? 



no 



yes 



! k 1 



t 



T 



yes 



1 Ahswer is: 1st element of table, M R", 3rd element of table. 



J 



US? definitions: 

answerl[X;Y] » tesfc[qanal[x];Y] 
tesfc[X;Y] - [null[Y] -* neg[X];T-* testa[X;Y]] 
■ testa[X;YJ « [same[car[x];car[Y] ] -*[same[caddr[x] ; 

caddr[Y]] -*• list[car[Y];quote[R];caddr[Y]]; 

T— test[X;cdddr[Y]]];T-* test[X;cdddr[Y]]] 
same[X;Y] - [X - Y -* T;X - quote[S] -* T;T -* P] . 



-6- 

neg[X] - [car[x] - quote [S] "- 11 liab[ quote [NOTHING] ; quote [R]; 
caddrtx] ];caddr[x] « qjiote[S] -* llst[car[x];quote[R] ; 
q uo;e[ NOTHING] ];T~* list[car[x];quote[D0E3] ;quote[NOT] j 
quo';e[R];caddr[X]]] 

We now wish to apply a similar matching procedure to an 
English-language question and text. The principal task will be 
to put the text in the form of a table, and the question in a 
form suitable for comparison with the "table" entries. This 
work will be accomplished by the functions lex , p arse , revert, 
edit , order which make up the "syntactic analysis" ~porti'dh~~di r 
the routine. The matching will be done by answer , que 3 and 
anal . These are all subfunctions of the main function, oracle , 
whose arguments are a question and a text, and whose value is 
the answer or answers to the question found in the text. 

The function oracle : 

I. The Syntactic Analysis ,. 

It was outside the scope of this project to embark on a 
systematic and correct analysis of even a very restricted class 
of English sentences. Accordingly a number of artificial as- 
sumptions were made about the sentences to be analyzed. The 
most important one is that no ambiguity will be encountered at 
any level in the analysis . As we assign part-of-speech tag3 to 
the words in the analyzed sentences, this assumption means, for 
instance, that a given word can be only one part of speech. 
There is % no provision, in the analysis program which will be de- 
scribed here, for backtracking or for maintaining two or more 
distinct hypotheses about the straature of the sentence. The 
analysis proceeds in two steps. 

The first step, embodied in the functions lex and parse , 
goes through the sentence looking for nouns and grouping with 
each one the adjectival structure that belongs to it. If a noun 
is preceded by a .preposition, a prepositional phrase is formed. 

The sentence is presented to this analysis in the following 
form: each word is feagged with a part-of-speech symbol. Here 
the symbols used are N (noun), M (noun-modifier), V (verb), 
NPL (place-noun, e.g. playground), NTI (time-noun, e.g. noon)*, 
P (preposition), and AUX1 for forms of the verb to do which 
play a privileged role. (This format is the resuTt of applying 
lex to the sentence and the part-of-speech "dictionary".; Also 



this distinction is necessary to distinguish "in the -garden" 
(answer to^where? ") from "in the afternoon" (answer to "when?"). 



c 



t 



c 



-7- 

part of the input la a act of rules for forming noun-phrnoea and 
prepositional phrases*, e.g. 

M + N - N 

M + NTI - NTI 

P + NTI - PNTI,. etc. 

There are also rules of the form 

V + V - V 

for grouping an auxiliary-participle combination into a single 
element. ("M + N - N" means that when a word or group of wcrds 
tagged M is followed by a word or group of words tagged N, the 
two groups should be consolidated into one, tagged N.) 

An example of theaaction of lex and parse : 

sentence (JOHNNY SEES THE DOG IN THE GARDEN) 

"dictionary" ((N JOHNNY) (N DOG) (NPL GARDEN) (V SEES) (? IN) 
(M THE)) 

rules (((M N)NN) ((M'NPL) NPL) ((P NPL) NPL)) 

The three inputs are shown in the format in which they are accep- 
table to the routine. ( (M N) N) is a representation of M + K - N. 
The result of the analysis is: 

((N JOHNNY) (V SEES) (N THE DOG) (PNPL IN THE GARDEN)). 

Up. to this point the analysis is in some sense independent 
of the routine since, if the ambiguity clause is respected, "dic- 
tionary" and grammar rules are part of the input. This concludes 
the first step# 

The second step: It was decided that the .routine would be 
written only to handle questions dealing with the subject, object, 
place-phrase and time-phrase of a sentence. This implies im- 
mediately, for example, that only simple sentences will be con- 
sidered. The function order does t&is editing. Its result is a 
list of five elements, suoject, verb, object, place and time, in 
that order. Anything else in the sentence will be discarded; 
missing elements, except subject and verb whose presence is re- 
quired, have their place marked by an (S). We give an example of 
the combined action of lex , parse and order ; these three func- 
tions are responsible for the analysis of the sentence. 



These rules are Inspired by Noam Chomsky's phrase -structure 
rules. (See his Syntactic Structures , Mouton and Co., 
»S-Gravenhage, 1957, p. 26) 



-8- 

scntcnce (IN THE GARDEN THE LITTLE BOY GAVE THE DOG A BONE) ( 

dictionary ( (NPL GARDEN) (N BOY) (N DOG) (N BONE) (V GAVE) 
(M A) (M THE) (M LITTLE) (P IN)) 

rules (((M N) N) ( (M NPL) NPL) ( (P NPL) PNPL)) 

result: ( (THE LITTLE BOY) (GAVE). (THE DOG) (JN THE GARDEN) (S)) 

The routine cannot handle double objects. 

The analysis of the question use3 the same functions: lex, 
parse and order . It also needs revert to cope with the inversion 
characteristic of the question-sentence in English, and edit zo 
take care of question-words, revert requires as part of "its in- 
put a table showing how to combine the auxiliary to do with par- 
ticiples, e.g. 

DOES + GIVE - GIVES 

DID + GO - WENT, etc. 

We give examples of the, application of lex , parse , revere, 
edit and order , in that order, to interrogative sentences: 

sentences • (WHERE DID THE TEACHER GO) 

(HAS JOHNNY COME HOME) 

dictionary ((Q WHERE)* (AUX1 DID) (M THE) (N TEACHER) (V GO) (V HAS)* 
(N JOHNNY) (V COME) (PNPL HOME)) V 

rules , (((MN)N)) 

table _' ' (((DID GO) WENT)) 

results .((THE TEACHER) (WENT) (S) (W)* (S)) 

((JOHNNY) (HAS COME) (S) (HOME) (S)) 



II. The Matching 

The 'sentence- and the question 'under consideration have now 
been edited into a canonical form in which they can be compared. 
The comparison proceeds as follows: the first block in the 
"canonical form" of the question is matched against the first in 
that of the sentence, and so forth. If all agree, question ana 
sentence are said to match. 

The blocks are compared as in the table below, where T appears 
at the conjunction of two entries if a match would be recorded, and 
F if not. 



Q is a part-of-spoech tag for question-words; (w) in fourth 
position represents WHERE. 



-9- 



Block n of the 
sentence is: 

Block n of the 
question is: 



(S) , (A B) 



(C) 



(S) 
(W) 
(B) 



T 


T 


T 


F 


T 


T 


F 


TT 

- 


F 



V 



C 



For example, if block n of the question Is (THE OLD YELLOW 
DOG) and block n of the sentence is (THE UGLY OLD YELLOW DOG), 
these blocks will match. If block n of the sentence were (THE 
DOG) or (THE YELLOW CANARY), there would be no match. If block 
n of the question is empty, it will match whatever block n of the 
question contains. If block n of the question is a question-word, 
(e.g. a (w) is the first block representing a "who"), it will 
match with block n pf the sentence as long as the latter block is 
not empty. 

The functions of oracle 

lex [X;Y] has as arguments a list of words, the sentence, and a 
list of pairs, the "dictionary". Its value is the list of 
the dictionary entries corresponding to the words in the 
sentence, lex has a subf unction lookup . 

Hookup [X;Y] has as arguments a word and a list of pairs. Its 
value is the pair whose second element is the word in ques- 
tion. Its value is ERROR if there is no such pair. 

Examples: 

X - JOHNNY 

Y - ((N MARY).(N JOHNNY) (V SITS), etc. ) 
lookup [X;Y] - (N JOHNNY) 

X m (JOHNNY GOES TO SCHOOL) 

Y - ((P TO) (N MARY) (V GOES) (N JOHNNY) (NPL SCHOOL)) 
lex[X;Y] - ((N JOHNNY) (V GOES) (P TO) (NPL SCHOOL)) 

LISP definitions: 

lookup[X;Y] - [null[Y] — ERROR : T — [X » cadarCY] -* car[Y]; 
T "* lookup[X;cdr[Y]]]3 

lex[X;Y] - [null[x] -► NIL:T — cons [lookupt car [X];Y]; 
lex[cdr[X3;Y3]J 

parse [X;Y] has as arguments a list of pairs (the result of lex 
of the sentence) and another list of pairs, the rules. Elem- 
ents of this second list are of the form ((A B) C),. correspond- 
ing to rules of the form A + B - C. The work in parse is done 
by the subfunction glob . 



-10- 



glob[X;Y;Z;W;V] : X is a marker which tells whether or notary 
rule has been applied in the last pa-3S through the senterce, 
Y contains the sentence elements that have already been 
examined in the current pass; Z contains the re3t of the 
sentence; W contains the rules that have not yet been tried 
in the analysis of the first two elements of Z; V contains 
th(!>se that have been tried and have failed. The action cf 
glob is. described in the flowchart below, where Z 1 repre- 
sents the first element of Z (car[z3) and Z 12 represents 



c 



the second element of Z 



1* 



START 



■niL 



NIL? 



yes 



no 



L_ 



W - NIL? 



no 



1 



yea 



-> 4x - NIL? | — yeg R val ue Is W; 

| no 

1 ^-SeT! 1 



Z 11 Z 21 



W ll ? 



no 



i 



joaa. 



Set: 

W - w 2 ...w n 

V - V++ W, 



1 



Set: 

X - "S" 

Z, 



W 1Q Z 12 Z 22 



2 n 3 n 




Example: 

X = ((M THE) (M NASTY) (M OLD) (N MAN)) 

Y * .(((M N) N)) 

parse[X;Y] « ((N THE NASTY OLD MAN)) 

LISP definitions: 

glob[X;Y;Z;W;V] - [null[z] -* [nulltx] — Y; T — 

glob [NIL; NIL; Y;W;V]];null[W] -♦ glob[X;nconc[Y; cons [ car [z]$ 

NIL]];cdr[z]:V;NIL];list[caar[Z.J:caadr[Z]] - caar[W] *"* 

glob [ quote [ S J ; Y; cons [ append [ cdar [ W] ; append[ cdar [ Z J ; cdadr [ Z ] ] ] ; 

c'ddr[z]];W;V];T-* globtX;Y;Z;cdr[w];nconc[V;cons[oar[W]; 

NIL]]]] 



parse[X;Y] - glob [ quote [s];X; NIL; Y; NIL] 



-11- 



V ord 3r[x] ha3 as its argument a list of nalrs, the value of 

parsc[lcx[sentencc;dictlonary] ; rules J . Its value Is a l:.st 
of five elements: it picks out from the sentence a subject 
noun-phrase, a verb, an object noun-phrase, and prepositional 
phrases of place and time, and lists them in that order. Yihen 
one of the last three is missing, it writes (s) in its place. 
orde r works through the subfunctions picks , plckv , plcko, 
plckpl, plckti . All of these take the same argument as order. 

"- picks has 
pick s has as value the first noun-phrase before the verb, i,e. 
Tt looks in the list for an element beginning with N, NPL, 
or NTI and its value is the rest of that element. If it hits 
\ the verb before having found a suitable noun-phrase, its 
value is ERROR. 

i pi|ky looks in the list for an element beginning with V, or AUXi. 
its -value is the rest of the first such element it finds. If 

I it finds none such, its value is ERROR. 

i 

jpicko looks for a verb followed immediately by an element tagged 
N, NTI or NPL. If the element following the verb is so marked, 
the value of picko is the rest of that element. If not, its 
f value is (S). 

pickpl looks for an element marked PNPL. If it finds one, 

plckp 11 looks for more. If more than one is found, they are 
consolidated to form the value of pickpl ; if none is found, 
the value is (S). 

* ' • * 

plckti and picktil do exactly the same with PNTI. 

Example: 

X - ((PNTI AT NOON) (N JOHNNY) (V GOES) (PNPL UP THE STAIRS) 
(PNPL TO HIS ROOK)) 

order[x] » ((JOHNNY) (GOES) (S) (UP THE STAIRS TO HIS ROOM) 
(AT NOON)) 



-12- 

LISP definitions: I 

picks[x3 =» [null[x]— ► ERROR;member[caar[xJ;quote[ (N NFL N?l)3 3 ~> 
cdar[Xj; member[caar[XJ;qi;ote[ (V AUX1) J ] -* ERROR; 
T — picks[cdr[x]]j 

pickvtx] - [null[x] -+ ERROR; member [caar[X]; quote [ (V AUXl) 1 ] — 
" cdar[Xj;T — pickv[cdr[XJ3 3 

picko[xJ - [ member [ca'ar[x]; quo te[(v AUX1)]] -*■ [ member [caadr[x3; 
quote[(N NPL NTI)3 3 — cdadr[X];T — quote[(S)3; 
T — picko[cdr[x]j] 

pickpl[X] - [null[x] -* quofce[(S)];caar[X] - quote[PNPL] — 

append[cdar[X];pickpll[cdrix]]];T— pickpl[cdr[x]]] 

pickpllCx] - [null[x] "- NIL;caar[x] - quote[PNPL] — apoenc[cdar[x3; 
pickpll[cdr[x3 3 3;T— pickpll[cdr[x3 3 3 

picktl[x3 - [null[x3 — quote[ (s) 3;caar[x3 « quote [PNTl] -*» 

append[cdarfX3;picktil[cdr[x33 3;T— pickti[cdr[x3 33 

picktiltx] - [null[x] -> NIL:caar[x3 - quote[PNTl3 — append [cdar[x3; 
picktil[cdr[x]j3;T-* plcktil[cdr[x3 33 

order[x3 - list[picks[x3;pickv[x3;picko[x3;pickpl[x3;pickti[x3 3 i 

rever t [X3 is a function of a list of pairs*, the result of ap- 
plying lex and parse to the question. Its value is a list 
of pairs*. It rearranges the "parsed" question to permit 
matching with the text: in particular it undoes the inver- 
sion typical -of the interrogative sentence. It has a sub- 
function Join which is responsible for grouping the auxi- 
liary and the verb when they have been separated by the in- 
terrogative construction, and Join has a subfunction compare 

which deals especially with to do, for which it needs "a 

table to tell it, DOES +.KAVE - HAS; DID + GO - WENT, etc. 
' revert works as follows: (in the following diagram, 
3 « Wi,W2, . . .,Wn represents the sentence, and "Wl » z? " 
means: "Is the tag on the first word or group of words (as 
formed by parse ) Z? ") 



* — — — — — 

Actually a list of lists.' We consider each list as a oair whose 
first element is that of the list, and whose second element is 
the rest of the list. 



(L 




Then sot 
W1,W5, ...,Wn : 



■Then set ! 

S - W2 > JoinCWl;W33,W^...Wn| 



® [Then set S ■ W2,wyW3. . .Wn | 



:r 



Examples: 

X - ((Q, WHERE) (AUX1 DOES) (N THE MAN) (V GO)) (A) 

table contains ((DDES GO) GOES) 
revert [X] - ((N THE MAN) (V GOES) (Q WHERE)) 
X - ((Q WHO) (AUX1 DOES) (N THE WORK)) ( B ) 
revert[X] - ((Q WHO) (AUX1 DOES) (N THE WORK)) 

X - ((V HAS) (N THE PROFESSOR) (V GONE) (PNPL HOME)) ( 
revert [X] =* ((N THE PROFESSOR) (V HAS GONE) (PNPL HOME)) 

X - ((V HAS) (N JOHN) (N A LIZARD)) ( D ) 
revert[x] - ((N JOHN) (V HAS) (N A LIZARD)) 



join [X;Y] is a function of two pairs. Its value is a list 
formed from the first element of the second pair, and 
either the second elements of both pairs or the value of 
compare of the second elements, when it has to do with to do. 

compare [X;Y.;Z ] is a function whose fir3t two arguments are pairs, 
and who 3 g third is a list of pairs of the form ((DOSS GO) GOES), 
({DID ;.:E3T) MET), etc. It forms the list of the last halves 
of its first two arguments and tries to match this with the 



first- half of one of the elements of its third argumen' 



Its 



value is then a pair made up from the second half of that ele- 



ment, preceded by the first half of the second argument, 
action is simple and easy to understaj 
value is ERROR if no match is found.) 



•.? -14- 

Example : # 

X - (AUX1 DOES) 

Y « (V GO) 

Z contains ((DOES 00) GOES) 

compare [X;Y;Z] - (V GOES) 

LISP definitions: 

revert[X] - [caar[X] - quote[Q] -♦ [eaadddr[x] « quote[V] ^ 
append[list[caddr[x];Join[cadr[X];cadddr[X]]]; 
cddddr[x]];T ( ^ XJ;T- [caaddr[X] - quote [V] r* 
append[list[cadr[x3;Join[carCx];caddrCx]]];^ 
cdddr[x]];T^ append[list[cadr[X];car[x]]; 
cddrCx]]]] W 

join[X;Y] « [car[x] « quote[AUXl] — compare[X;Y;Z];T — 

append[append[cons|;car[Y];NIL];cdr[x]]; 
cdr[Y]]] 

compare [X;Y;Z] - [null[Z] -+ ERROR; append [cdr[X];cdr[ Y] ] - / 

caar[z] -* append[ cons [car[Y]; NIL] ;cdar[z] ]; 
T— compare [X;Y;cdr£z] ]] 

edit[x] has as argument and value a list of lists, the result 

of lex '- parse and revert of the question. Its responsibility 
is to substitute for the question-words the symbol W with the 
appropriate tag. 

Example: 

X -• ((Q WHO) (Q WHAT) (Q WHOM) (Q WHEN) (Q WHERE)) 
edit[X] - ((N W) (N W) (N W) (PNTI W) (PNPL W)) 

LISP definition: 

editCx] - [null[X] -*■ NIL; member [cadar[x]; quote [ (WHO WHAT WHOM)]] ** 
, - append[qaote[((N W)).];edit[cdr[x]]];cadar[X] - 

quote[WHERE] — append[quote[ ((PNPL W)) ];edit[cdr[x] ]]; 
cadar[X] « quotefWHEN] '-* append[quote[ ((PNTI W))] ; 
edit[cdr[X]]];T — con3[car[X];edit[odr[X] j ] ] 



-15- . •• 

V match [X;Y] is a function of two lists of lists. It3 value ic T 
(True) if the elements of each list in X are contained in the 
corresponding list in Y, and F (False) otherwise, match has a 
•s ubf unction, contained which checks the individual lists cne 
against the other, as follows: 

contained [X;Y] i3 a function of two lists. Its value i3 T $1rue) 
if X is (s), if X is (W) and Y' is not (S). or if each element 
of X appears in Y. Its value is F (False) otherwise, contained 
uses member which was defined .to be the built-in function 
niembob~ i 

Examples: 

X - (THE OLD MAN) 

Y - (THE OLD MAN IN THE MOON) 
contained [X;Y] « T 

X - (THE MAN) '"■_.. 

Y - (THE OLD WOMAN) 
contained[X;Y] - F 

(Note also that X - (THE OLD OLD MAN) 
(^ Y - (THE OLD MAN) 

contained[X;Y] - T) 

X - ((.JOHNNY) (COMES) (S) (HOME) (S)) 

Y - ((JOHNNY APPLESEED) (COMES) (S) (HOME) (AT NOON)) 
match[X;Y] - .T 

X - ((JOHNNY) (COMES) (HOME))'=- ' 
Y- ((MARY) (COMES) (HOME)) 
match[X;Y] « F 

LISP definitions: 

contained[X;Y] - [null[X] .""♦• T;car[X] = quote[S] — T; 

. car[X] « quote[W]A~car[Y] - quote [s] — T; 

member[car[x];Y]Acontained[cdr[X];Y] -* T;T — F] 

match[X;Y] - [null[x] -♦• T;contained[car[xJ;car[Y]]match[cdr[x]; 
cdr[Y]] -* T;T-* P] 



-16- 



answ er [X;Y;Z'I is a function of three arguments: X is the pro- 
cessed question; Y is a list of processed sentences; Z ac- 
cumulates- the sentences of Y which have matched successfully 
with the question X. Its value is an appropriate answer to 
the question* answer operates as follows: 



* k>t 



Y - NIL? 

(e t nd of text? ) 



no 



I 



Does question 
match with 
first sentence 
in Y? 



no 



i 



Try next sen- 
tence in Y 



yes 



yes 



Z / NIL? 

(any answers? ) 



Store that 
sentence 
in Z 



J 



no 



yes 



Was question j 
Yes -no? j 



no | 



v^ s 



Do anal [ques- 
tion; sentence j j 



I Write "YES'Vzf *-* 



Was question 
Yes -no? 



no 



ye s 



"the oracle I 

SAYS NO" 1 



"THE ORACLE DOES NOT KNOW" 



anal is a subf unction of answer. 

anal]X;Z] is. a function of two arguments: the first is a list, 
the question; the second is a list <bf lists, the answers. The 
responsibility of an&l is to pick out the words in the answers 
which matched .with the question-words (who, where, etc.) in the 
question. The actual searching is done by ques. 



ques [X;Z] has as its arguments two lists: X is the question, Y 
~is one of the answers, ques searches through the question 
for "W llf s and its value is the list of the elements of the 
answer that correspond to ,! W M, s in the question. • 

Examples: 

X - ((W) (COMES) (W)) 

Y « ((JOHNNY) (COMES)' (HOME)) 
. ques[X;Y] - ((JOHNNY)" (HOME)) 

X - ((W) (COMES) (S)) 

Y - (((JOHNNY) (COMES) (HOME)) ((MARY) (COMES) (AWAY))) 
anal[X;Y] - (((JOHNNY) ((JOHNNY) (COMES) (HOME))) 

((MARY) ((MARY) (COMES ) (AWAY)))) 



-17- 

^- Note that in the description below ques is also used as a 

subfunction of anal , to determine wF.eTher or not we have a 
ye3-no question. This is done by null [ ques [X; quote [ (B B B 
B B)]]] which ha3 value T only if there were no "W"»3 in X. 

LISP definitions: 

answer[X;Y;Z] - [ null[Y] -*■ [nullfz] — [null[ques[x; 

\quote[(B B B B B)]]] -+- quote [ (THE ORACLE SAYSNHO)]; 
T-* quote[( THE ORACLE DOES NOT KNOW)]]; 
T — [ null [ que s[X; quo te[(B B B B B)]]] — 
list[quote[YES];Z];T-+ anal[X;Z]]];T-+ 
[rnatch[X;car[Y]] -* answer[X;.cdr[Y];append[Z; 
'' cons[ car [ Y]; NIL] ]];T— answer[X;cdr[Y];Z] ] ] 

anal[X;Z] ■ [null[Z] -* NIL;T -* append[cons[append[ques[X: 

carCz] ]; const car[z];NIL]]; NIL] ;anal[X;cdr[z]j]] 

ques[X;Y] « [null[X] -+ NIL;caar[X] « quote[W] -* constcariY]; 
quesCcdr[X];cdrtY]]];T-*" ques[cdrtX];cdr[Y]]] 

^ textanal [x] processes the list of sentences: 

textanaltx] » [nulltx] -*■ NIL;T -*■ append [const order [ parse [ 

lex[ cart X];GRAMMl];GRAMM2]]; NIL] ;textanaltcdr[X]]l] 

oracle tX;Y] has- as value the list of answers from sentences in 
y to the question X: oracle [X;Y] 

oracletX;Y] » [fix[answertordertedit[revert[parse[lextx]; 

GRAMMi] ; GRAMM2] ] ] ] ; textanaltY] ; NIL] ] 

» 

The values of answer are of the form: 

(((IN THE CLASSROOM) ((THE TEACHER) (READS) (BOOKS) (IN THE 
.CLASSROOM) (S)))) 

(YES (((THE TEACHER) (REALS) (BOOKS) (IN THE CLASSROOM) (S)))) 

, (THE ORACLE SAYS NO) r 



» 






-4fr 

The function fix, with it3 subfunctions unparen and unp has C 
the responsibility for rewriting those ail ~~ 

(0(IN THE CLASSROOM) (THE TEACHER READS BOOKS IN THE CLASSROOM)))' 
(YES ((THE TEACHER READS BOOKS IN THE CLASSROOM))) 
(THE ORACLE SAYS NO) 

fixfx] - [nulltx] — NIL;atom[car[X]] -- cons[car[x3; 

fix[cdr[x]J];T- cons[unpareri[car[x]];fix[cdr[x]] J] 
unparenfx] - [null [X] - NILjT-* cons[unp[car[x3];unparenCcdrCx3333 
unp[x3 - Cnull[x3 - NIL;atom[car[x33 -* X;car{x3 - quote[(s)3 -* 

unp[cdr[x33;T^appendCcarCx3;unp[cdrCx3333 



C 



Conclusions 
Conclusions. 



To achieve our original goal of passing a six-year- 
old 1 s reading-comprehension test we would need, as men- 
tioned in the introduction, a complex syntax-recognizer, 
a logic machine and an encyclopedia. Syntax recognition 
•■- . by machine will not come tomorrow, but it is on its way. 
Yngve's hypotheses (see Bibliography) seem both revealing 
of the true nature of language and especially appropriate 
for machine use. Theorem provers have been built, and 
perhaps a program could be written to simulate the logical 
processes of a child. The encyclopedia does not seem 
entirely out of reach, either. With lists of synonyms, 
and tabulation of objects into various categories, e.g. 
animate and inanimate, and perhaps just stockpiling infor- 
mation about every-day life, one might be able to recon- 
^ * struct the world as a six-year old knows it, the context 
in which he passes his reading-comprehension tests. Cer- 
tainly programming languages of high sophistication, such 
as LISP, used here, or COMIT*, designed for convenient 
manipulation of symbolic elements, will be an essential 
part of such an undertaking. From here, it looks feasible, 



M 



See Yngve, U A programming Language for Mechanical Transla- 
tion", Mechanical Translation , Vol. 5, No. 1, July, 1958. 



is. 



I 



20 



Bibliography 



Psychology 

1. Plaget and Inhelder, La Genese d33 Structures Logicues 
Elementaires . Delachaux et Niestle, Neuchatel, 1959. 



Syntactic Analysis 

1. Chomsky, N. A., Syntactic Structures , Mouton and Co., 
>S-Gravenhage, 1957 . 

2. Yngve, V. H., A Model and an Hypothesis for Language 
Structure , in press. - 



Machine Codes 

1. McCarthy, John, Recursive Functions of Symbolic Expressions 
and their Computation by Machine, Communications of the ACM* 
Vol. 3, .No. \, April, I960. . 

2. Yngve, V. H., A Programming Language for Mechanical Trans - 
lation , Mechanical Translation, Vol. 5, No. 1, July, 195-3. 



t 



CS-TR Scanning Project ,, c 

Document Control Form Date JiJJU^-. 

Report#_MVzJ£_ 

Each of the following should be identified by a checkmark: 
Originating Department: 

^^ Artificial Intellegence Laboratory (Al) 

□ Laboratory for Computer Science (LCS) 

Document Type: 

□ Technical Report (TR) ^^ Technical Memo (TM) 

□ Other:. ] 

Document Information Number of pages: So [Wm^f) 

' Not to include DOD forms, printer jntstrucfions. etc... original pages only. 

Originals are: Intended to be printed as : 

D Single-sided or □ Single-sided or 

X Double-sided X Double-sided 

Print type: 

□ Typewriter Q Offset Press □ Laser Print 

Q .nUet Printer Q UnKnown & Other: COf j Of /)WEogftAf« 

Check each if included with document: 

□ DOD Form □ Funding Agent Form □ Cover Page 

□ Spine □ Printers Notes □ Photo negatives 

D Other: . 

Page Data: 

Blank Pages<by W !««*«): — 



Photographs/Tonal Material (ww ««*«):. 



Other (note d»«*i|*on/p»9« numb*)'. 

Description : Page Number. 



(SJ-Jft) Jcfl» JC2frntt/H -pHPgT 



Scanning Agent Signoff: ,-,,}*, <?c 

Date Received: JJjJvjSL Date Scanned: JZjJl/JS Date Returned: J&JfJJz- 



/MjJ&uJi IN * QVi^ 



Scanning Agent Signature:. f v\Myr-o^y\ — r — \ — ^<7vi"~ Rw9W DSA.csDocum«<tco«*oiFoimc«wom«.wd 



Scanning Agent Identification Target 



Scanning of this document was supported in part by 
the Corporation for National Research Initiatives, 
using funds from the Advanced Research Projects 
Agency of the United states Government under 
Grant: MDA972-92-J1029. 



The scanning agent for this project was the 
Document Services department of the M.I.T 
Libraries. Technical support for this project was 
also provided by the M.I.T. Laboratory for 
Computer Sciences. 



Scaniied 



M.I.T. libraries 

; : 'D6 : cumen|:;;Ser:Vices;: 



darptrgt.wpw Rev. 9/94 



