Pubic rtpottine buFdMi ter Mi e 
nMdid, vd ruilMrinQ tei ooIk 
HMdquwtett Swvtoi, Dtadm 
UanigiiMm and BudgM, Wuhi 


REP AD-A246 583 


FomAppmvad 
OPM No. 0704-0188 


• ItM teriMiM*ig MncUont. MHdiina xWna dtta nuRW gtehwlno and maknMigiT&i 
faapddetMaeolaetlDnadrdonnaltentecteda'BauggaaBonatefraduetuMabudan.te W laalilngBn 
1 12M. Aih^. VA 222Ce-4302. and te tea Oltea at Idoanalan and RtguTaiory AHalti. Ofloa ol 



LY (Laave 





E AND OATES COVERED 


Rnal: 02 Oct 1991 to 01 Jun 1993 


ANOSUBTITLf 


Meridian Ada. Version 4.1.1, IBM PS/2 Model 80. (IBM PC-DOS 3.30/0S386)(Host & 
Target). 91102W^11218 


6. AaTHOR(S) 

Wright-Patterson APB, Dayton, OH 
USA 


RFORMINQ ORGANIZATION NAME(S) AND AODRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
BkJg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-509-0991 


9. SPONSORING/MONITORING AGENCY NAME(S) AND AOORESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


OTIC 


10. SPONSORING^IONITORING AGENCY 
REPORT NUMBER 



12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Meridian Ada, Version 4.1.1, IBM PS/2 Model 80,Wright-Patterson AFB, (IBM PC-DOS 3.30/0S386)(Host & Target), 
ACVC1.11. 


14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. UMITATION OF ABSTRACT 


NSN 754041-280-550 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Sid. 239-128 













AVF Control Number: AVF-VSR-509-0991 

4 December 1991 
91-08-15-MSS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 911002W1.11218 
Meridian Ada, Version 4.1.1 
IBM PS/2 Model 80, -> IBM PS/2 Model 80, 

(IBM PC-DOS 3.30/OS386) (IBM PC-DOS 3.30/OS386) 


Prepared By; 

Ada_Validation_Faci1i ty 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


92-04686 




Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 2 October 1991. 

Conpiler Name and Version: Meridian Ada, Version 4.1.1 

Host Con^juter System: IBM PS/2 Model 80, 

IBM PC-DOS 3.30/OS386 

Target Conputer System: IBM PS/2 Model 80, 

IBM PC-DOS 3.30/OS386 

Customer Agreement Number: 91-08-15-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
911002W1.11218 is awarded to Meridiem Conputer Systems, Inc. This 
certificate expires on 1 June 1993. 


This report has been reviewed and is approved. 


^a Validation Facility 
Steven p. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


AdavaHdaMopOrpmlzaHon 

Dire^or, Cgjifputer and Software Engineering Division 
Institute for Defense Analyses 
Alexemdria VA 22311 



Dr. John Solomond, Director 


Department of Defense 
Washington DC 20301 



2 24 OOf 










Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 2 October 1991. 


Conpiler Name and Version: 
Host Computer System; 

Target Conpater System: 

Customer Agreement Number: 


Meridian Ada, Version 4.1.1 

IBM PS/2 Model 80, 

IBM PC-DOS 3.30/OS386 

IBM PS/2 Model 80, 

IBM PC-DOS 3.30/OS386 

91-08-15-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
911002W1.11218 is awarded to Meridian Conpater Systems, Inc. This 
certificate expires on 1 June 1993. 


This report has been reviewed and is aj^roved. 



Ada Validation Facility 


Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



L iflat^n ^rgani zatiorT 
Dire|ftorVConpater and Software Engineering Division 
Institute^or Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of t}efense 
Washington DC 20301 








DECLARATION OF CONFORMANCE 

Customer: Meridian Software Systems, Inc. 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: Meridian Ada, Version 4.1.1 

Host Computer System: IBM PS/2 Model 80 

(with Hoating Point Co-Processor) 
(under IBM PC-DOS 3.30/OS386) 

Target Computer System: Same as Host 


Customer’s Declaration 

I, the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems, Inc. has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this declaration. I declare that 
Meridian Software Systems, Inc. is the owner of the above implementation and the certificates 
shall be awarded in the name of the owner’s corporate name. 



10 Pasteur Street 
Irvine, CA 92718 







TABLE OF CCKTENTS 


CHAPTER 1 INTRODUCTIC»I 

1.1 USE OF THIS VALIDATIC»I SUMMARY REPORT .1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES .1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATICXN DEPENDENCIES 

2-3 WITHDRAWN TESTS.2-1 

2 . INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATICMS .2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 


INTRODUCTION 


The Ada inplementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Con^jiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada inplementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATICW SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, and ccmpiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conplete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions ‘ regarding this report or the validation test results should be 
directed to the AVF vrfiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 





INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Meinual for the Ada Proqramming Lcinquage, 

ANSI/MIL-SID-ISISA, February 1983 and ISO 865i-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada in^ilementations is tested by meauis of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at conpile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the resiilt v^en they 
are executed. Three Ada library \inits, the packages REPORT eund SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Tdentity fvinctions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code \^ich must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this inplementation is provided in appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests cuid 
inplementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 








INTRODUCTiai 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITIOSI OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target conputer system to allow 
transformation of Ada programs into execute±)le form and 
execution thereof. 

Ada Conpiler The means for testing coitpliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Inplementation target conputer system. 

Ada Joint The part of the certification body vdiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body v4iich carries out the 

Validation procedures required to establish the coitpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the inpleraentation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more conputers and 

System associated softv»are, that uses coinmon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated‘data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 




INTRraXJCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Confuter 
System 

Inappliced3le 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Conqpiler 

Validated Ada 
Inp>lementa t i on 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
\diich validation status is realized. 

A computer system vdiere Ada source programs are transformed 
into execut 2 ±)le form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada iirplementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
conplete hardware inplementations are possible. 

A conpiuter system v^ere the executable form of Ada programs 
are executed. 


Ihe conpiler of a validated Ada in^lementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

Ihe process of checking the conformity ot an Ada conpiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

A test found to incorrec*- and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATIC*! DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 


publication 

date for this 

list of withdrawn tests 

is 2 August 

1991. 

E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

• CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives v*ich are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
aK>ropriate. 


2-1 





IMPLEMENTATICXa DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX__DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L.-Y (14 tests) 
C45521L.-Z (15 tests) 
C45621L..Z (15 tests) 
C46012L-.Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H checlc for the predefined type 
SHORT_FLiOAT; for this implementation, there is no such type. 

C35713C, B86001U, and C86006G checlc for the predefined type 
LCM;_FLQAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FimT, LONG_FLQAT, or SHORT_FLCiAT; for th’s 
inplementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that reinge exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINEJDVERFLOWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this implementation, MACHINE_OVERFLOWS is FALSE. 

C45531M. .P and C45532M. .P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATICX^; for this inplementation, there is no such type. 

CA2009C and CA2009F check vdiether a generic unit can be instantiated 
before its body (and any of its sxibunits) is conpiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the ccrpilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and fianctions; this implementation does not support 
pragma INLINE. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 




IMPLEMENTATICXa DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

AE2101C and EE2201D. .E (2 tests) use instantiations of pacicage 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this conpiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO 
with xinconstraired array types and record types with discriminants 
without defaults; these instantiations are rejected by this conpiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode euid access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CEIEATE 

IN FILE 

DIRECT 10 

C:E2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

C:E2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_I0 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TE3Cr_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


The ‘following 16 tests check operations on sequential, direct, and 
text files ^en multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised vdien this association is attenpted. 


CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111D CE2111H CESlllB CE3111D..E CE3114B 
CE3115A 


2-3 






IMPLEMENTATICW DEPENDENCIES 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation ceunnot restrict 
file capacity. 

C:E3304A checks that SET_LINE_^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this iirplementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vdien the value of the 
page number exceeds COUNT'LAST; for this Tnplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2.3 TEST MODIFICATICNS 

Modifications (see section 1.3) were required for 9 tests. 

•Ihe following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B83033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The conpiler rejects the use of the range 

ETXJAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the boxinds lie outside of the range of safe numbers 
(Cf. LRM 3.5.7:12). 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVD. These tests contain instantiations of a generic unit 
prior to the conpilation of that xonit's body; as allowed by AI-00408 and 
AI-00506, the conpilation of the generic unit bodies makes the conpilation 
unit that contains the instantiations obsolete. 

EA1003B was graded passed by Processing Modification as directed the 
AVO. This test checks whether legal unit? of ? compilation are accepted 
if one of the conpilation units is illegal. This test was processed with 
the conpiler option "-fl", >rtiich forces the compiler to generate code for 
legal units of a conpilation. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are coitpiled after the xinits that contain the 


2-4 






IMPLEMEI 1\TIC»I DEPEM)ENCIES 


instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
M-00506 such that the conpilation of the generic bodies makes the 
instantiating uinits obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete \anits; all intended 
errors were then detected by the coitpiler. 


2-5 







CHAPTER 3 


PROCESSING INFORMATICaa 


3.1 TESTING ENVIRCMIENT 

The Ada inplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact; 

Meridian Software Systems 
Technical Support 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 

For sales information about this Ada implementation, contact: 

Meridian Software Systems 
Attn: Jim Smith 
10 Pasteur Street 
Irvine, California 92718 
(714) 727-0700 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3-1 









PROCESSING INFORMATIOI 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vdiether the test is applicable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the niimber of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (corunted in items b 
and f, below). 


a) Total Number of i^plicable Tests 3791 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 83 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 284 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun-3 system and then transferred to the 
IBM PS/2 Model 80 system via an PC-NFS ethernet connection. From there 
they were transferred via diskettes to the IBM PS/2 Model 80 system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada iitplementation. 

The tests .were compiled, linked, and executed on the computer system, as 
appropriate. 


3-2 






PROCESSING INFORMATIC»l 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See i^pendix B for a complete listing of 
the processing options for this implementation- It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 


Program 

Switch 

Effect 

adal 

-E 

Generate error file for the Ada listing utility (alu). 

adal 

-I 

Ignore compilation errors and continue generating 
code for legal units within the same con^jilation 
(for test EA1003B). 

adal 

-Q 

Suppress "added to library" and "Generating code for" 
information messages. 

adal 

-S 

Use 80286-specific instructions where possible 

adal 

-V 

Enable overflow checking (this is normally not 
specified directly by the user but is always 
provided by the conpilation system). 

adal 

-w 

Suppress informative warning messages. 

alu 

-c 

Produce continuous form Ada listings (no page 
headers). 

alu 

-p 

Obey PRAOIA PAGE directives within program even though 
the -c flag says not to generate page breaks. 

alu 

-s 

Output Ada listing to the steuidard output file instead 
of to a disk file. 


Test output, cotrpiler and linker listings, eind job logs were captured on 
magnetic ta^and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 




APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in tUG89]. The 
parameter values are presented in two tables- The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN —also listed here- These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

200 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V => '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 »> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 »> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1. => 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 => 'A') & '1 

$BLANKS 

(1..V-20 

$MAX LEN INT BASED 

LITERAL 


"2:" & (1..V-5 -> '0') & "11:" 

$MAX LEN REAL BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 

A-1 





N^CRO PARAMETERS 


$MAX_STRING_LITERAL & {1..V-2 »> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

2 

$COUNT_LAST 

2_147_483_646 

§DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STORJUNIT 

8 

$DEFAULT_SYS_NAME 

I80386 

$DELTA_DOC 

2.0**(-31) 

$ENTRY_ADDRESS 

16#0# 

$ENTRY_ADDRESS1 

16#1# 

$ENTRY_ADDRESS2 

16#2# 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

f f 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$FLQAT_NAME 

NO_SUCH_FLQAT TYPE 

$FORM_STRING 

n II 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_ 

$GREATER THAN DURATION 


90_000.0 

$GREATER_THAN_DURATIC»} BASE LAST 

To_ooT)_ooo.o 

$GREATER_THAN_FLQAT_BASE LAST 

1 .'ffE+308 

$CaiEATER_THAN_FLOAT_SAFE LARGE 

l.^EZOB 


A-2 





MACRO PARAMETERS 


$GREATER THAN_SHORT_FLOAT_SAFE LARGE 

1.0E308 

$HIGH_PRIORITY 20 

$IIXEGAL_E3C]:TIttIAL_FILEJlPJ^^ 

VIODIRECTORY\FILENAMEl 

$ILLEGAL_EXTERNAL_FILE_NAME2 

V«DDIRECTORY\FILENAME2 

$INAPPROPRIATE LINE_LENGTH 

-1 

$INAPPROPRIATE_PAGE LENGTH 

-1 

$INCLUDE_PRAaiAl PRAGMA INCLUDE(''A28006D1.ADA") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE("B28006F1.ADA") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATICW -90_000.0 

$LESS THAN DURATIOJ BASE FIRST 

“ -1TI_000_000.0 

$LINE_TERMINATOR ASCII.CR & ASCII.LF 

$WW_PRIORITY 1 

$MACHlNE_CODE_STATEMENT 

INST1MB1»>16#90#); 

$MACHINE_CODE_TYPE INSTl 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2147483648 

$NAME 


BYTE INTEGER 







MACRO PARAMETERS 


$NAME_LIST I80386 

$NAME_SPECIFICATIC»I1 C:\ACVC\TES'I\X2102A 
$NAME_SPECIFICATIC»I2 C:\ACVC\TEST\X2102B 
$NAME_SPECIFICATIC»}3 C;\AC:VC\TEST\X3119A 
$NEGJBASED_INT 16#FFFPFFFE# 

$NEW_MEM_SIZE 1024 

$NEM_STOR_UNIT 8 

$NEW_SYS_NAME I80386 

$PAGE_TERMINATOR ASCII-CR & ASCII.LF & ASCII.FF 

$RECORD__DEFINITIC»I RECORD Bl:UNSIGNED_BYTE; END RECORD 

$RECORD_NAME INSTl 

$TASK_SIZE 32 

$TASK_STORAGE_SIZE 2048 

$TICK 1.0/18.2 

$VARIABLE_ADDRESS FCNDECL.VAR_ADDRESS 

$VARIABLE_ADDRESS1 FCNDECL.VAR_ADDRESSl 

$VARIABLE_ADDRESS2 FCNDECL.VAR_ADDRESS2 

$YOOR PRAtaiA NO SUCH PRACMA 






APPENDIX B 


COMPILATICXJ SYSTEM OPTIOTJS 


The coitpiler options of this Ada implementation, as described in this 
^pendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


MERIDIAN ADA CC»1PILER OPTIONS 


-fD Generate debugging output. The -fD option causes the 
conpiler to generate the appropriate code and data for 
operation with the Meridian Ada Debugger. 

-fe Annotate assembly language listing. The -fe option 
causes the conpiler to annotate an assembly language 
output file. The output is supplemented comments 
containing the Ada source statements corresponding to the 
assembly language code sections written by the code 
generator. To use this option, the -S option must also 
be specified, otherwise the annotated file is not emitted. 

-fE Generate error log file. Hie -fE option causes the 

conpiler to generate a log file containing all the error 
messages and warning messages produced during compilation. 
The error log file has the same name as the source file, 
with the extension .err. For exanple, the error log file 
'■ for simple.ada is simple.err. Ihe error log file is 
placed in the current working directory. In the absence 
of the -fE option, the error log information is sent to 
the standard output stream. 

-fF Disable floating point checks. This option is used to 
inhibit checks for a math co-processor before sequences 
of math co-processor instructions, resulting in a 
slightly smaller and faster program. Use of this option 
means that the resulting program requires, and you 
guarantee, the run-time presence of a math co-processor 


B-1 







COMPILATiaa SYSTEM OFn(»4S 


(either an 8087, 80287, or 80387). If a program 
containing floating point conpitations is con 5 )iled with 
the -fF option, it will behave unpredictably if run on a 
machine without a math co-processor installed; the 
machine may singly "freeze up" in this ciroimstance, 
requiring a reboot. Refer to the bamp -u option, vdiich 
causes the floating point software to be linked with a 
' program. 

-fl Ignore compilation errors and continue generating code 
for legal units within the same compilation file. 

-fL Generate exception location information. The -fL option 
causes location information (source file names and line 
numbers) to be maintained for internal checks. This 
information is useful for debugging in the event that an 
"Exception never handled" message appears vAien an 
exception propagates out of the main program. This flag 
causes the code to be somev^at larger. If -fL is not 
used, exceptions that propagate out of the main program 
will behave in the same way, but no location information 
will be printed with the "Exception never handled" 
message. 

-fN Suppress numeric checking. The -fN flag suppresses two 
kinds of numeric checks for the entire compilation: 
division check and overflow check. These checks are 
describeH in section 11.7 oT the LRM. This flag reduces 
the size of the code. 

-fQ Suppress "added to library" and "Generating code for" 
information messages normally output by the compiler. 

-fR Inhibit static initialization of variables. This option 
is intended for use in ROM-based embedded environments in 
conjiinction with the Meridian Ada Run-Time Customization 
Library. The -fR option is applicable only in the 
presence of the -fs option, v^iich suppresses certain 
runtime checks. Normally, the Ada compiler initializes 
constants or variables with static data \4ien the 
following conditions all occur: 

1. Checking is disabled with the -fs option. 

2. The initializer expression is static (known at 
‘ compile time). 

3. The object is a global (in top-level package 
specification or body). 

If the -fR flag is specified, static initialization is 
suppressed for variables (but not for constants); 
assignments to each component of a variable are performed 
in the code. Note that this always happens in the 


B-2 





COMPILATION SYSTEM OPTIONS 


absence of the -fs option. 

-fs Suppress all checks. The -fs flag suppresses all 

automatic checking, including numeric checking. This 
flag is equivalent to using pragma suppress on all checks. 
This flag reduces the size of the code, and is good for 
producing "production quality" code or for benchmarking 
the compiler. Note that there is a related ada option, 
-fN to suppress only certain kinds of numeric checks. 

-fs The -fS flag causes the conpiler to generate additional 
80286 instructions not available on the 8086/8088. 

Programs compiled in this mode tend to be smaller than 
programs conpiled using the normal 8086/8088 mode. 

-fU Inhibit library update. The -fU option inhibits library 
updates. This is of use in conjunction with the -S 
option. Certain restrictions apply to use of this option. 

-fv Compile verbosely. The conpiler prints the name of each 
subprogram, package, or generic as it is coirpiled. 
Information about the symbol table space remaining 
following conpilation of the named entity is also printed 
in the form "[nK]". 

-fw Suppress warning messages. With this option, the 

con^3iler does not print warning messages about ignored 
pragmas, exceptions that are certain to be raised at 
run-time, or other potential problems tha^- the compiler 
is otherwise forbidden to deem as errors by the LRM. 

-g The -g option instructs the compiler to run an additional 
optimization pass. The optimizer removes common 
sxab-expressions, dead code and unnecessary jumps. It 
also does loop optimizations. 

-K Keep internal form file. This option is used in 

conjunction with the Optimizer. Without this option, the 
compiler deletes internal form files following code 
generation. 

-Imodifiers 

Generate listing file. The -1 option causes the compiler 
to create a listing. Optional unifiers can be given to 
affect the listing format. You can use none or any 
combination of the following modifiers: 

c Use continuous listing format. The listing by 

default contains a header on each page. Specifying 
-Ic suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragma page directives. Specifying -Ip is only 
meaningful if -Ic has also been given. Normally -Ic 

B-3 






CXMPILATIOJ SYSTEM OPTIONS 


suppresses all pagination, whereas -Icp suppresses 
all pagination except vrtiere explicitly called for 
within the source file with a pragma page directive. 

s Use standard output. The listing by default is 
written to a file with the same name as the source 
file and the extension .1st, as in sinple.lst from 
simple.ada. Specifying -Is causes the listing file 
to be written to the standard output stream instead. 

t Generate relevant text output only. The listing by 
default contains the entire source program as well 
as interspersed error messages euid warning messages. 
Specifying -It causes the conpiler to list only the 
source lines to v^ich error messages or warning 
messages apply, followed by the messages themselves. 

The default listing file generated has the same name as 
the source file, with the extension .1st. For example, 
the default listing file produced for simple.ada has the 
name single.1st. The listing file is placed in the 
current working directory. Note: -1 also causes ein 
error log file to be produced, as with the -fE option. 

-L library-name 

Default: ada.lib 

Use alternate library. The -L option specifies an 
alternative name for the program library. 

-N No coir^jile. This option causes the ada command to do a 
"dry run" of the conpilation process. The command 
invoked for each processing step is printed. This is 
similar to the -P option, but no actual processing is 
performed. 

-P Print coitpile. This option causes the ada command to 
print out the command invoked for each processing step 
as it is performed. 

-S Produce assembly code. Causes the code generator to 
produce an assembly language source file and to halt 
further processing. 


B-4 







COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
J^jpendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

MERIDIAN ADA LINKER OPTICWS 


-A Aggressively inline. This option instructs the optimizer 
to aggressively inline subprograms when used in addition 
to the -G option. Typically, this means that subprograms 
that are only called once are inlined. If only the -G 
option is used, only subprograms for vhich pragma inline 
has been specified are inlined. 

-c ccmpiler-program-name 

Default: (as stored in program library) 

Use alternate conpiler. The -c option specifies the 
conplete (non relative) directory path to the Meridian 
Ada con^)iler. This option overrides the compiler 
program name stored in the program library. The -c 
option is intended for use in cross-compiler 
configurations, although under such circumstances, an 
appropriate library configuration is normally used 
instead. 

-f Suppress main program generation step. The -f option 
suppresses the creation and additional code generation 
steps for the temporary main program file. The -f option 
can be used vhen a simple change has been made to the 
body of a compilation unit. If unit elaboration order 
is changed, or if the specification of a unit is changed, 
or if new units are added, then this option should not be 
used. ' 

-g Perform global optimization only. The -g option causes 
bamp to invoke the global optimizer on your program. 
Compilation units to be optimized globally must have been 
compiled with the ada -K option. 

-G Perform global and local optimization. The -G option 

causes bitp to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the -g option,.compilation units to be optimized 
must have been compiled with the ada -K option. 

-i The -i option is used in conjunction with the bamp -r 

option vhen producing "pre-linked" code for use with the 
Intel Development Tools. The -i option causes certain 

B-5 





COMPILATION SYSTEM OPTIONS 


information to be emitted into the object file that is 
needed under some circumstances by the Intel linker, 
LINK86. By default, pre-linked object modules use the 
Microsoft object format. 

-I Link the program with a version of the tasking run-time 
vdiich supports pre-enptive task scheduling. This option 
produces code vliich hiuidles interrupts more quickly, but 
has a slight negative in^^ct on performance in general. 

-L library-name 

Defaxilt: ada.lib 

Use alternate library. The -L option specifies the name 
of the program library to be consulted by the banp 
program. This option overrides the default library name. 

-m Produce link map. The -m option causes a text file 

containing a link map to be written. The link map is 
Microsoft-conpatible and the link map file name has the 
extension .map for Real Mode programs (the default). 

For Eixtended Mode Programs (produced v^en the bamp -x 
option is given), the link map is OS/x86-conpatible and 
the link map file name has the extension .xmp. 

-M main-program-stack-size 

Default: 

o 20K in Real Mode programs 

o 64K in Eixtended Mode programs, when tasking is not 
used 

o 64k - <task-stack-size> in Extended Mode programs, 
when tasking is used 

Set main program stack size. Ihe -M option sets the 
stack size (number of decimal bytes) for the main program 
(excluding tasking). Note that the sum of the main 
program stack size and the tasking stack size must be no 
more than 64K bytes. 

-n No link. The -n option suppresses actual object file 

linkage, but creates and performs code generation on the 
main program file. 

-N No operations. The -N option causes the banp command to 
do a "dry run"; it prints out the actions it takes to 
generate the executable program, but does not actually 
perform those actions. The same kind of information is 
printed by the -P option. 

B-6 






ccaiPiiATiaa system options 


-o output-file-name 

Defaiilt: file.exe 

Use alternate executable file output name. The -o option 
specifies the name of the executable program file written 
the baitp command. This option overrides the default 
output file name. 

-P Print operations. Ihe -P option causes the bamp command 
to print out the actions it takes to generate the 
executable program as the actions are performed. 

-r Create re-linkable output. The -r option causes an 

object file (.obj file) to be generated rather than an 
executable file (.exe file). The resulting file contains 
all symbol and relocation information, and can then he 
used with any low-level linker accepting object files 
conpatible with the Intel or Microsoft object formats. 

-s task-stack-size 
Default: 

o 20K if tasking used 
o Zero if tasking not used 

Use alternate tasking stack size. The -s option 
specifies the number of bytes (in decimal) to be 
allocated to all the tasks to be activated in the Ada 
program. This option overrides the default task stack 
size. Note that the sum of the main program stack size 
and the tasking stack size must be scmiewhat smaller than 
64K bytes. The size of individual task activation 
stacks can be specified with a length clause. 

-u Link software floating point library. Use of the -u 
option enables a program containing floating point 
confutations to run with or without a math co-processor 
chip. A related conpiler option, the ada -fF option, 
also can be used to control the action of the run-time in 
the absence of a math co-processor chip. The ada -fF 
option and the bamp -u option should not both be used in 
t^e same program. 

-U Link in an alternative windowed debugger run-time for 
programs that were compiled with the ada -fD debugging 
option. 

-V Link verbosely. The -v option causes the banp command to 
print out information about what actions it takes in 

B-7 






COMPILATIOJ SYSTEM OPTIC»«S 


building the main program. 

-V scratch-file 

Link using "virtual" mode. This option allows larger 
programs to be linked, although slightly more slowly. A 
scratch-file must be specified. The scratch-file can 
reside on a RAM disk (if one is available) for faster 
- operation. The -V option affects only the operation of 
the low-level object linker. The scratch-file is used as 
scratch memory in which the various object files are 
linked. 

-W Suppress warnings. This option allows you to suppress 
warnings from the optimizer. 

-X The -X option is used to create an Extended Mode program. 
This option applies only to Extended Mode Meridian Ada. 
The -X option produces a program that can be run with the 
ramp command to run in Extended Mode (a .exp file). If 
the -X option is not used, a Real Mode program (a .exe 
file) is produced. 








APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed iirplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, emd to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of this Ada inqplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this i^pendix are to compiler documentation and not to this 
report. In^ilementation-specific portions of the package STANDARD, which 
are not a part of i^pendix F, are: 


package STANDARD is 

type INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 
type SHORT_INTEGER is range -32_768 .. 32_767; 
type BYTE_INTEGER is range -128 .. 127; 
type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 

end STANDARD; 


C-1 









Appendix F Implementation*Dependent Characteristics 


This appendix lists implementation-dependent characteristics of Meridian Ada. Note that there are no 
preceding appendices. This appendri^ is called Appendix F in or der to comply with the Reference Manual 
for the Ada Programming Language (LRM) ANSI/MIL-STD-1815A wh^ states that this appendix be 
named Appendix F. Implemented Chapter 13 features include length clauses, enumeration 
representation dauses, record representation clauses, address clauses, interrupts, package system, 
machine code insertioi\s, pragma interface, and unchecked programming. 


F.l Pragmas 


The implemented pre-defined pragmas are.Limplemented pragmas;: 


elaborate 

interface 

list 

pack 

page 

priority 

suppress 

inline 


See the LRM section 10.5. 

See section F.l.1. 

See the LRM Appendix B. 

See section F.l .2. 

See the LRM Appendix B. 

See the LRM Appendix B. 

See section F.13. 

See the LRM section 63.2. This pragma is not actually effective unless you 
compile/link your program using 5ie global optimizer. 


The remaining pre^lefined pragmas are accepted, but presently ignored: 


' controllad 
shared 


optlaiza 8ystani_naiiia 

storage_unlt ioeiaozy_size 


Named parameter notation for pragmas is not supported. 


When illegal parameter forms are encountered at compile time, the compiler issues a warning message 
rather than an error, as required by the Ada language definition. Refer to the LRM Appendix B ror 
additional information about the pre-defined pragmas. 


F.1.1 Pragma Interface 

The form of pragma interface in OpenAda DOS 386 is: 

pragma intarfaca (language,subprogntml,"liTik-nam^); 
where: . 

language This is the interface language, one of the names assembly, builtin, c, microsoft.c, or 

internal. The names builtin and internal are reserved for use by Meridian compiler 
maintainers in run-time support packages. 

subprogram This is the name of a subprogram to which the pragma interface applies. 


* All future references to the Reference Manual for the Ada Programming Language appear as the LRM. 


25 


OpenAda DOS 386 Users’s Guide 







AppenSxF 


link-name This is an optional string literal specifying the name of the non-Ada subprogram 

corresponding to the A<u subprogram named in the second parameter. If link-name is 
omittra, then Hnk-name defovdts to the value of subprogram translated to lowercase. 
Dep^ding on the language specified, some automatic modifications may be made to 
the link-name to produce £e actual ob^ code symbol name that is generated 
whenever references are made to the corresponding Ada subprogram. 

It is appropriate to use the optioital link-name parameter to pragma interface only 
when ^e interface subprogram has a name that does not correspoiul at all to its Ada 
identifier or when the interface subprogram name caimot be given using rules for 
constructing Ada identifiers (e.g. if the name contains a '$' character). 

The characteristics of object code symbols generated for each interfiice language are: 

assembly The object code symbol is the same as link-name. 

builtin The object code symbol is the same as link-name, but prefixed with two underscore 

characters C This language interface is reserved for special interfaces defined by 

Meridian Software Systems, Inc. The builtin interface is presently used to declare 
certain low-level nm-time operations whose names must not coixflict with 
programmer-defined or language system defined names. 

c The object code symbol is the same as link-name, but with one underscore character 

('_') prepended. This is the convention used by the C compiler. 

internal No object code symbol is generated for an internal language interface; this language 
interibce is reserved for special interfiices defined by Meri&an Software Systems, me 
The internal interface is presently used to declare certain machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface subprograms. It is up to 
the programmer to ensure that calling conventions match and that any necessary data conversions take 
place when calling interface subprograms. 

A pragma interface may appear within thesamedeclarative part as thesubprogram to which the pragma 
interface applies, following the subprogram declaratioiv and prior to the first use of the subprogram. 
A pragma interface that applies to a subprogram declared in a package specification must occur within 
the same package specification as the subprogram declaration; the pragma interface may not appear in 
the package Ix^y in this case A pragma interface declaration for either a private or nonprivate 
subprogram declaration may appear in the private part of a package spedficatioru 

Pragma interface for library tmits is not supported. 

Refer to the LRM section 13.9 for additional information about pragma interface. 

F.1,2 Pragma Pack 

Pragma pack is implemented for composite fypes (records and arrays). 

Pragma pack is permitted following the composite type declaration to which it applies, provided that 
the pragma occurs within the same declarative part as tne composite type declaration, before any objects 
or components of the composite type are declared. 

Note that the declarative part restriction means that the type declaration and accompanying pragma 
pack cannot be split across a package specification and body. 


OpenAda DOS 386 Users's (^ide 


26 





AppencSxF 


The effect of pragma pack is to minimize storage coiisumption by discrete component types whose 
ranges permit packing. Use of pragma pack does not defeat allocations of alignment storage gaps for 
some record t)qpes. Pragma pack does not affect the representations of real types, pre-defined integer 
types, and access types. 


F.1.3 Pragma Suppress 

Pragma suppress is implemented as described in the LRM section 11.7, with these differences: 

* Presently, division.check and overflowjcheck must be suppressed via a compiler flag, >fN; 
pragma suppress is ignored for these two numeric checks. 

* The optional "ON s>" parameter name notation for pragma suppress is ignored. 

* The optional second parameter to pragma suppress is ignored; the pragma always applies to the 
entire scope in which it appears. 


Attributes 

All attributes described in the LRM Appendix A are supported. The implementation-dependent 
Meridian attribute Tocoffset is applied to a parameter and returns as a universal-integer the stack offset 
of that parameter (the offset from the EBP register). It allows machine code insertions to access 
parameters using less error-prone symbolic names. An example follows. 

i na eh i nc _jgode.inst3^ (16#8B#, 16#41)#, xibytes'locoffset); 


F.3 Standard Types 

Additional standard types are defined in OpenAda DC^ 386; 

• byte_integer 

• short_integer; 

• long_integer 

The standard numeric types are defined as: 

type fcyte_intagex is range -126 .. 127; 
type short_lnteger is range -32768 .. 32767; 

type integer is range -2147483648 .. 2147483647; 

type long_integer is range -2147483648 .. 2147483647; 

type float is digits 15 

range -1.79769313486231X4-308 .. 1.79769313486231X-I-308; 

type duration is delta 0.0001 range -66400.0000 .. 86400.0000; 


F.4 Package System 

The specification of package system is: 

package systan is 

type address is new lonq inteoer; 


27 


OpenAda DOS 386 Users’s Guide 





Appendix F 


typ* aan ia (18038C) ; 

systao^xiaaa : cotkstant naaa :« i80386; 

•tor«g«_unit : eoastaxKt :■ 8; 
aaaDoryjiin : constant 1024; 

— Syatan-Dspandsnt NasMd Nuabsxs 

Bdn_lnt : coxtstant :> **2147483648; 

aax__ist : constant :» 2147483647; 

aax_digits : constant :15 

aax_mantlssa : constant 31; 
fins^dslta : constant :« 2.0 ** (**31}; 
tick : constant :* 1.0 / 18.2; 

— Other System-Oependant Declarations 
subtype priority is integer range 1 .. 20; 

The ealue of system.BMmory_aize. is presently meaningless. 


F.5 Restrictions on Representation Clauses 

F.5.1 Length Clauses 

A size specification (fsize) is rejected if fewer bits are specified than can accommodate the type. The 
minimum size of a composite type may be subject to application of pragma pack. It is permitted to 
specify precise sizes for unsigned integer ranges, e.g. 8 for the range 0..255. However, because of 
requirements imposed by the Ada language definition, a full 32*bit range of unsigned values, Le. 
0..6*^32)-1, cannot be defmed, even using a size specification. 

The specification of collection size (t'storage.size) is evaluated at run-time when the scope of the t 3 q)e 
to which the length clause applies is entered, and is therefore subject to rejection (via storage.eiror) 
based on available storat^e at the time the allocation is made. A collection may include storage used for 
run-time administration of the collection, and therefore should not be expected to accommodate a 
specific number of objects. Furthermore, certain classes of objects such as imcot\strained discriminant 
array components of records may be allocated outside a given collection, so a collection may 
accommcxlate more objects than might be expected. 

The sp>ecification of storage for a task activation (fstoxage.size) is evaluated at run-time when a task to 
which the length clause applies is activated, and is therefore subject to rejection (via storage_error) based 
on available storage at the time the allocation is made. Storage reserved for a task activation is separate 
from storage needed for any collections defined within a task body. 

The specification of small for a fixed point type (Ksmall) b subject only to restrictions defined in the 
LRM section 13.2. 

F.5.2 Enumeration Representation Qauses 

The internal code for the literal of an en\imeration type named in an enumeration representation clause 
must be in the range of standard.integer. 

The value of an internal code may be obtained by applying an appropriate instantiation of 
unchecked_conversion to an integer type. 


OpenAda DOS S86 Users ’s Guide 


28 




AppenSxF 


F33 Record Representation 

The storage unit offset (the at statk_,smple_expnssion part) is given in terms of 8-bit storage units and 
must be even. 

A bit position (the range part) applied to a discrete type component may be in the range (L15, with 0 
being the least significant bit of a component A range specification may not specify a size smaller than 
can accommodate the component A range specification for a component not accommodating bit 
racking may have a higher upper bound as appropriate (e.g. 0.31 for a discriminant string component). 
Kefer to the internal data representation of a given component in determming the component size and 
assigning offsets. 

Components of discrete types for which bit positioits are specified may not straddle 16-bit word 
boundaries. 

The value of an aligiunent clause (the optional at mod part) must evaluate to 1, X 4, or 8, and may not 
be smaller than the highest alignment required by any component of the record. 

F.5.4 Address Qauses 

An address clause may be supplied for an object (whether constant or variable) or a task entry, but not 
for a subprogram, package, or task unit. The meaning of an address clause supplied for a task entry is 
given in section F.53. 

An address expression for an object is a 32-bit offset of type system.address. 

F.5.5 Interrupts 

A task entry's address clause can be used to associate the entry with a PC DOS interrupt Values in the 
range 0..255 are meaningful, and represent the interrupts corresponding to those values. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means of type conversion. 


F.6 Implementation-Dependent Components 

No names are generated by the implementation to denote implementation-dependent components. 


F.7 Unchecked Conversions 

There are no restrictions on the use of unchecked.conversion. Conversions between objects whose azes 
do not cordorm may result in storage areas with rmdefined values. 


F.8 Input-Output Packages 

A summary of the implementation-dependent input-output characteristics is: 

• In calls to open and aeate, the form parameter must be the empty string (the default vahi^. 


29 


OpenAda DOS 386 Users’s <^ide 







AppendbcF 


* More than one internal file can be associated %^th a sin^e external file for reading only. For 
writing, only one internal file may be assodated with an external file; Do not use reset to get 
around this rule. 

* Temporary sequential and direct files are g^ven names. Temporary files are ddeted when th^ 
are dosed. 

* Hie I/O is buffeted; text files assodated widt terminal devices are lirre-buffered. 

* The packages sequentia].io and direct Jo cannot be instantiated with unconstrained composite 
types or record types with discriminants without defaults. 


F.9 Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 characters in length. 


OpenAdaDOS386Usen^ Guide 


30 






