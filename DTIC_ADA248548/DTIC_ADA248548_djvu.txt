AD-A24« b4» ION PAGE 

iiiiiiiiiiii mil mil mil mil mil ii!i nil 

Form Approved 

OPM No. 0704-0188 

l4«nao*m*At& 

1II II I I 111^ |l 11 indixinsih* Vnw lor rMlwrirg Indnjctionc, oiiWiV uurcM gdhMlf^ and mtinlalnlnfKi^ 

1 illl! Hill illil illll llll III! Ml* or my olhor tftti ol tik ooMction ol Mofflution, lneludir.e uiggMtloiw lor rodudng ihl* butdm, to wSMv. t 

li Highway, Suk* 1204, Aik^, VA 22202.4302, lid to *M ORioo oi Motrmlion md ItegulmKy Alltira. Olio* 9l 

1. AGENCY USE ONLY (Leave Blank) 12. REPORT DATE 3. REPORT TYPE AND DATES COVERED 

j Final: 17 May 1991 to 01 Jun 1993 

4. TITLE AND SUBTITLE 

Validation Summary Report: Verdix Corporation, VADS VMS» MIPS R3000, 

VAda-110-03620, Version 6.1, MicroVAX 3600 (VMS V5.2)(Host) to IDT 7RS302 
(bare machine)(Target), 910517W1.11151 

5. FUNDING NUMBERS 

6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 

USA 

i. PERf6(|MING ORGANIZATION NAME(S) AND AC0RESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING ORGANIZAYiON 

REPORT NUMBER 

AVF-VSR-462-0491 

9. SPONSOHINaiylONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm3E114 

Washington, D.C. 20301-3081 

10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 

11. SUPPLEMENTARY NOTES 

12a. DISTRIBUTION/AVAIUBILITY STATEMENT 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

Verdix Corporation,. VADS VMS=> MIPS R3000, VAda-110-03620, Version 6.1,Wright-Patterson, AFB, MicroVAX 3600 
(VMS V5.2)(Host) to IDT 7RS302 (bare machine)(Target), ACVC 1.11. 

^57IC 

- 

14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 

Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16. PRICE CODE 

17. SECURITY CLASSIFICATION 

OF REPORT 

UNCLASSIFIED 

18. SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 

OF ABSTRACT 

UNCLASSIFED UNCLASSIFIED 

20. UMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Presaibed by ANSI Std. 239-128 

































Certificate Information 


The following Ada in^jlementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 17 May 1991. 

Con^jiler Name eind Version: VADS VMS=>M1PS R3000, VAda-110-03620 

Version 6.1 

Host Conpiter System; MicroVAX 3600 (VMS V5.2) 

Target Conputer System: IDT 7RS302 (bare machine) 

Customer Agreement Number: 91-03-18-VBX 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

910517W1.11151 is awarded to Verdix Corporation. This certificate expires 

on 1 June 1993. 

This report has been reviewed and is approved. 




Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


m 



_ iM^on Organization 
Dire^torv>CDn^Juter & Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


y /7 


iooeaelon Tor 

HTIS GRAtl 
DTIC TAB 
Utiamiounoed 
Justification- 


Joint Program Office 
Dr. John Solomond, Director 
Departnusnt of Defense 
Washington DC 20301 


uUMKo 


□O 















AVF Control Nuiober: AVF-VSR-462-0491 

15-October-1991 

91-03-18-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number; 910517W1.11151 
Verdix Corporation 

VADS VMS->MIPS R3000, VAda-110-03620, Version 6.1 
MicroVAX 3600 (VMS V5.2) -> IDT 7RS302 (bare machine) 


Prepared By; 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


92-09321 

Hill mil iiBi. .... ■ 


92 ' 4 10 0 6 ? 














DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 

Declaration of Conformance 
Customer: Verdix Corporation 

Ada Validation Facility; ASD/SCEL, VPAFB OH 45433-6503 
ACVC Version; 1.11 
Ada Implementation: 

Ada Compiler Name and Version: VADS VMS«>MIPS R3000| VAda-110-03620 

Version 6.1 

Host Computer System: MicroVAX 3600 (VMS V5.2) 

Target Computer System: IDT 7RS302 (bare machine) 

Declaration: 

[I/ve], the undersigned, declare that [I/ve] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the implementation 
listed above. 














TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS. 1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS. 2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide IUG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national lavs of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the ’’Freedom of 
Information Act" <5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this repott-are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 2216? 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer & Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 










INTRODUCTION 


1.2 REFERENCES 


IAda831 Reference Manual for the Ada ProRramminR Language, 

ANSI/MIL-STD-1615A, FeSruary and ISO 665^-1587. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
office, August 1990. 

(UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CH£CK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Stalidard are detected. Some of the cla; ; B tests contain legal Ada 
code which must not be flagged illegal by the mpiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for tht^ validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Vithdravn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANS1/MIL~STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>'*. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing, A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


I-A 








CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is availab]e from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 14 March 1991. 


E28005C 

C35508J 

C45346A 

B49008A 

B83025D 

C94021A 

CB7004A 

BD1B06A 

CD2A41A 

CD4022A 

CD4051D 

CD7006E 

BD8004C 

CE2117B 

CE3118A 

CE3812A 


B28006C 

C35508M 

C45612A 

A74006A 

C83026A 

C97116A 

CC1223A 

AD1B08A 

CD2A41E 

CD4022D 

CD5111A 

AD7201A 

CD9005A 

CE2119B 

CE3411B 

CE3814A 


C34006D 

C33508N 

C45612B 

C74308A 

B83026B 

C98003B 

BC1226A 

BD2A02A 

CD2A87A 

CD4024B 

CD7004C 

AD7201E 

CD9005B 

CE2205E 

CE3412B 

CE3902B 


C35702A 

B41308B 

C45612C 

B83022B 

C83041A 

BA2011A 

CC1226B 

CD2A21E 

CD2B15C 

CD4024C 

ED7005D 

CD7204B 

CDA201E 

CE2405A 

CE3607B 


C35702B 

C43004A 

C45651A 

B83022H 

B85001L 

CB7001A 

BC3009B 

CD2A23E 

3D3006A 

CD4024D 

CD7005E 

AD7206A 

CE2107I 

CE3111C 

CE3607C 


C35508I 

C45114A 

C46022A 

B830253 

CB6001F 

CB7001B 

BD1B02B 

CD2A32A 

BD4008A 

CD4031A 

AD7006A 

BD8002A 

CE2117A 

CE3116A 

CE3607D 


2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 








IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 

C24113L..Y <14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C43503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type L0NG_FL0AT; 
for this implementation, there is no such type. 

C35713D and B860012 check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FL0AT, or SHORT_FLOAT} for this 
implementation, there is no~such type. ~ 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check whether the proper exception is raised if 
MACHINE_OVERFLOVS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINE_0VERFL0WS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 










IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implefflentation doss 
not support such sizes. 

The tests listed in the following table check that USE_EKROR is raised 
if the given file operations are not supported for the~givcn combination 
of mode and access method; this implementation supports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL~IO 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 ” 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE • 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN FILE 

sequential'io 

CE2102P 

OPEN 

OUT PILE 

SEQUENTIAL“I0 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT PILE 

DIRECT 10 ~ 

CE2102S 

RESET 

inout“file 

direct"io 

CE2102T 

OPEN 

IN FILE 

direct"io 

CE2102U 

RESET 

IN FILE 

direct“io 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

text“io 

CE3102G 

DELETE 


TEXT"I0 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT"I0 

CE3102K 

OPEN 

OUT FILE 

TEXT^IO 


The following 19 tests check operations on sequential, direct, and text 
files when multiple internal files are associated with the same external, 
file; USE_ERROR is raised when this association is attempted. 

CE2107A..H CE2107L CD2110B CB2110D CE2111D 

CE2111H CE3111A..B CE3111D..E CE3114B CE3115A 

CE2203A checks that WRITE raises USE_ERR0R if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise USE_ERR0R 
if they specify an inappropriate value for the external file; there are 
no inappropriate values for this implementation. 


2-3 






IHPLEHENTATION DEPENDENCIES 


CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2.3 TE.ST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B83008K BC1303F BC3005B BD2B03A BD2D03A 

BD4003A 


A35801E was graded Inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A24A, CD2A31A..C (3 tests) were graded passed 
by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure Length_Ch6ck, which uses 
Unchecked_Conversion according to the interpreTation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of Length_Check—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 





CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada inplenientation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada iii 5 )lementation, contact: 

Mr Darrel Lee 
Verdix Corporation 
1600 NW Compton Drive #357 
Aloha OR 97006-6905 


For sales information about this Ada implementation, contact: 

Mr David Normrra 
Verdix Corporation 
1600 NW Conpton Drive #357 
Aloha OR 97006-6905 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 


3-1 





PROCESSING INFORMATION 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of jf^plicable Tests 3807 

b) Total Number of Withdrawn Tests 93 

c) Processed inapplicable Tests 88 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 289 


g) Total Number of Tests for ACVC 1.11 4170 


All I/O tests of the test suite were processed because this inplementation 
supports a file system. The above nrraber of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the in^lementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the vali^tion team for processing. The contents of the 
magnetic tape were loaded directly onto the host coirputer. 

After the test files were loaded onto the host conputer, the full set of 
tests was processed by the Ada implementation. 

The tests were conpiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target coitputer 
system by the communications link of ethemet, and run. The results were 
captured on the host conputer system. 

Testing was -performed using command scripts provided by the customer and 
reviewed by the validation team. See i^pendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
defaid.t options. The options invoked explicitly for validation testing 
during this test were; 

Option/Switch Effect 


-w 


suppress generation of warning messages 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V” represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 499 


$BIG_ID1 

(1..V-1 -> 'AS V -> '1') 

$BIG_ID2 

(1..V-1 .> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 

<l..V/2 *> 'A') & '4' & 

(1..V-1-V/2 «> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& <l..V/2 -> 'A') & 

$BIG_STRING2 

& <l..V-l-V/2 -> 'A') & '1' & 

$BLANKS 

(1..V-20 

$MAX_LEN_INT_BASED_ 

LITERAL 

"2:" & (1..V-5 -> '0') & "11;" 


$MAX_LEN_REAL BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 


A-1 





MACRO PARAMETERS 


$MAX_STRING_LITERAL & (l,.V-2 »> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$AL1GNMENT 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

VAX_CROSS_MIPS 

$DELTA_D0C 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM.''+’'(16#80#) 

$ENTRy_ADDRESS2 

SYSTEM. "+''(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

t t 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

ni) 

$F0RM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY'’ 

SGREATER THAN DURATION 

100_000.0 


SGREATER THAN DURATION BASE LAST 

To_ooC_ooo 

$GREATER_THAN FLOAT BASE LAST 
“ 1.SE+30B 

$GREATER_THAN FLOAT SAFE LARGE 

5.5E307 


A-2 















MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLOAT_SAFE LARGE 

9.0E37 

$HIGH__PRIORITy 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

^/illegal/file_naine/2}]S:2102c.dat" 

$ILLEGAL EXTERNAL FILE NAME2 

'*^/illegal/file_name/CE2102C*.dat" 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE (''A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_^UST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURAT10N -100_000.0 

$LESS THAN DURATION_BASE FIRST 

-1?5_000_000.0 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LOW_PRIORITY 0 

■$MACHINE_CODE_STATEMENT 

C0DE_0'{0P -> NOP); 

$MACHINE_CODE_TYPE C0DE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_64B 

$MIN_INT -2_147_483_648 


A-3 










MACRO PARAMETERS 


$NAME 

$NAME LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATI0N2 

$NAME_SPECIFICATI0N3 

$NEr,_BASED_INT 

$NEW_MEM_S1ZE 

$NEW_STOR__UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_S1ZE 

$TASK_STORAGE_^SIZE 

STICK 

$VARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$yOUR_PRAGMA 


TINY^INTEGER 

VAX_CROSS_MIPS 

qc: |acvcl__ll.c.e]X2120A 

qc: [acvcl__ll.c.e]X2120B 

qc:Iacvcl_ll.c.e]X3119A 

16#F000000E# 

16_777_216 

8 

VAX_CROSS_MIPS 
ASCII.FF 

RECORD SUBP: OPERAND; END RECORD 

C0DE_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 








APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 

Syntax 

VADS ADA source_file [, ...] 

Command_Qua1ifie rs 

/APPEND Append all output to a log file. 

/DEBUG 

/DEBUG-G Write out the gnrx.lib file in ASCII. 

/DEFINE 

/DEFINE»(identifier:typ€«value, ... ) 

Define identifier of a specified type and value. See VADS ADA 
PREPROCESSOR REFERENCE. 

/DEPENDENCIES Analyze for dependencies onlyj no link will be performed if 
this option is given (/MAIN and /OUTPUT options must not be used with this 
qualifier). 

/ERRORS • ■ 

/ERRORS[*(option [, ...])] Process compilation error messages using 

the ERROR tool and direct the output to SYS$OUTPUT; the parentheses can 
be omitted if only one qualifier is given (by default, only lines containing 
errors are listed). 

Options: 

LISTING List entire input file. 

EDITOR[="editor") 

Insert error messages into the source file and call a text editor 
(EDT by default). If a value is given as a quoted string, 
that string is used to invoke the editor. This allows other editors 
to be used instead of the default. 


B-1 












COMPILATION SYSTEM OPTIONS 


OUTPUT[-file_name] 

Direct error~processed output to the specified file name; if no file 
name is given, the source file name is used with a file extension .ERR. 

BRIEF list only the affected lines [default] 

Only one of the BRIEF, LISTING, OUTPUT, or EDITOR options can be used in a 
single command. 

For more information about the /ERRORS option, see also COMPILING ADA 
PROGRAMS; COMPILER ERROR MESSAGE PROCESSING. 

/EXECUTABLE 
/EXECUTABLE-fi1e_name 

Provide an explicit name for the executable when used with the /MAIN qualifier 
the file^name value must be supplied (if the file type is omitted, .EXE is 
assumed)? 

/K££P_IL Keep the intermediate language (XL) file produced 

by the compiler front end. The IL file will be placed in the OBJECTS 
directory, with the name ADA_SOURCE.I. 

/LIBRARY 

/LIBRARY-library_name Operate in VADS 

library library_name (the current working directory is the default). 

/LINK ARGUMENTS 
/LINK"ARGUMENTS-"value" 

Pass command qualifiers and parameters to the linker. 

/MAIN 

/MAIN[=unit_name] Produce an executable program 

using the named unit as the main program; if no value is given, the 

name is derived from the first Ada file name parameter (the 

.A suffix is removed); the executable file name is derived from 

the main program name unless the /EXECUTABLE qualifier is used. 

/NOOPTIMIZE Do not optimize. 

/WARNINGS Print warning diagnostics. 

/OPTIMIZE 

/OPTIMIZE[-number] Invoke the code optimizer (0PTIM3). An optional digit 

provides the level of optimization. /OPTlMIZE-4 is the default. 

/OPTIMIZE no digit, full optimization 

/OPTIMIZE-O prevents optimization 

/OPTIMIZE-1 no hoisting 

/OPTIHIZE-2 no hoisting but more passes 

/OPTIMIZE-3 no hoisting but even more passes 

/OPTIMIZE-4 hoisting from loops 

/OPTIMIZE-5 hoisting from loops but more passes 

/OPTIMIZE-6 hoisting from loops with maximum passes 


B-2 












COMPILATION SYSTEM OPTIONS 


/OPTIMIZES? hoisting from loops and branches 

/OPTIMIZEsB hoisting from loops and branches, more passes 

/0PTIHIZEs9 hoisting from loops and branches, maximum passes 

Hoisting from branches (and cases alternatives) can be slow and does 
not always provide significant performance gains so it can be suppressed. 

For more information about optimization, see COMPILING ADA PROGRAMS, 
or pragma OPTIMIZE_CODE<OFF). 

/OUTPUT 

/OUTPUT»file name Direct the output to file name 

(the default'is sys$OUTPUT). 

/PREPROCESS Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

/RECOMPILE LIBRARY 
/RECOMPILE“LIBRARY-VADS_library 

Force analysis of all generic instantiations causing reinstantiation 
of any that are out of date. 

/SHOW Show the name of the tool executable but do not execute it. 

/SHOW ALL Print the name of the front end, code generator, 

optimizer, linker and list the tools that will be invoked. 

/SUPPRESS Apply pragma SUPPRESS for all checks 

to the entire compilation.(See also pragma SUPPRESS(ALL_CHECKS) on page .) 
/TIMING Print timing information for the compilation. 

/VERBOSE Print information for the compilation. 

Description 

The command VADS ADA executes the Ada compiler and compiles the named 
Ada source file,ending with the .A suffix. The file must reside in a 
VADS library directory. The ADA.LIB file in this directory is modified 
after each Ada unit is compiled. 

By default, VADS ADA produces only object and net files. If the /MAIN 
option is used, the compiler automatically invokes VADS LD and builds 
a complete program with the named library unit as the main program. 

Non-Ada object files may be given as arguments to VADS ADA. 

These files will be passed on to the linker and will be linked with 
the specified Ada object files. 

Command line options may be specified in any order, but the order 
of compilation and the order of the files to be passed to the linker 
can be significant. 


B-3 





COMPILATION SYSTEM OPTIONS 


Several VADS compilers may be simultaneously available on a single 
system. The VAOS ADA command within any version of VADS 
on a system will execute the correct compiler components based upon 
visible library directives. 

Program listings with a disassembly of machine code instructions are 
generated by VADS OB or VADS DAS. 

See also VADS DAS on page, VADS DB on page, VADS ERROR on page, VADS 
LD on page, and VADS MKLIB on page. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a section 
number and optionally, a paragraph number enclosed in parentheses. 








COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation^ as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

Syntax 

VADS LD unit^name 
Coinmand_Qual i £i er s 
/APPEND 

/DEBUG Debug memory overflow (use in cases where linking a large number of 
units causes the error message local symbol overflow" to occur. 

/EARLY 

/EARLY-"unit name" Force the given unit to be elaborated as early as 

possible <unlt_name must be enclosed xn double quotes). 

/EXECUTABLE 

/EXECUTABLE[=file_name1 

Put the output in'the named file. The default executable names are 
<main_unit>.EXE on self-hosts or <main_unit>.VOX on cross targets, 

/FILES Print a list of dependent files in elaboration order and suppress 
linking. 

/LIBRARY 

/LIBRARY=library name Operate in VADS library library_name 
(the current wording directory is the default). ” 

/LINK_OPTIONS 

/LINK OPTIONS«object_file or_qualifier It...]" 

Add tEe options surrounded by quotes to the invocation of the linker. 
/OUTPUT 

/OUTPUT»fi'le_nam€ Direct output to file_name. Default is SYS$OUTPUT. 

/SHOV Show the name of the tool executable but do not execute it. 

/UNITS Print a list of dependent units in order and suppress linking. 
/VERBOSE Print the VMS linker command prior to execution. 

/VERIFY Print the VMS linker command but suppress execution. 

Description 

VADS LD collects the object files needed to make unit name 

a main program and calls the VMS linker to link together all Ada 

and other language objects required to produce an executable, unit name 


B-5 







COMPILATION SYSTEM OPTIONS 


must be a non-generic subprogram that is either a procedure or 
a function that returns an Ada STANDARD.INTEGER (the predefined type 
INTEGER). The utility uses the net files produced by the Ada compiler 
to check dependency information. VADS LD produces an exception 
mapping table, a unit elaboration table, and passes this information 
to the linker. 

VADS LD reads instructions for generating executables from 
the ADA.LIB file in the VADS libraries on the search list. 

Besides information generated by the compiler, these directives also 
include VITHn directives that allow the automatic linking 
of object modules compiled from other ''inguages or Ada object modules 
not named in context clauses in the Ada source. Any number of WITH 
directives may be placed into a library, but they must be numbered 
contiguously beginning at WITHl. The directives are recorded in the 
library's ADA.LIB file and have the following form. 

WITHl|LINK|object_file| 

WITK21 LINK Iarchive_file| 

WITH directives may be placed in the local Ada libraries or in any 
VADS library on the search list. 

A WITH directive in a local VADS library or earlier on the library search 
list will hide the same numbered WITH directive in a library later in the 
library search list. 

Use VADS INFO to change or report library directives in the current library. 

All arguments after unit_name are passed on to the linker. These arguments 
may be linker options, names of object files or archive libraries, or library 
abbreviations. 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, etc. 

Occasional additional messages are produced by the linker. 

Files 

Normally VADS LD generates an intermediate file with the 
process ID as a substring, VADSOFTION<process ID>.OPT. 

With either the /VERIFY or /VERBOSE qualifiers, 

however, VADS LD will produce the intermediate file <main unit>.OPT. 


B-6 







APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648..2147483647; 
type FLOAT is digits 15 range 

-1.79769313486232E+308..+1.79769313486232E+308; 
type DURATION is delta 0.001 range -2147483.648..2147483.647; 

type SHORT_INTEGER is range -32768..32767; 

type SH0RT_FL0AT is digits 6 range -3.40282E+38..3.40282E+38; 

type TINY_INTEGER is range -128..127; 

END standard; 


C-1 











APPENDIX F OF THE Ada STMCJARD 


APPENDIX F. Implementation-Dependent C2iaracteristies 


1. Inplementation-Dependent Pragmas 

1.1. INLINEJCNLY Pragma 

The INLlNEjCMiY pragma, vdien used in the came way as pragma 
INLINE, indicates to the conpiler that the subprogram nust 
always be inlined. Ihis pragma also suppresses the genera¬ 
tion of a callable version of the routine vdiich saves code 
space. If a user erroneously makes an INLINEj^JLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAN_ERROR will be raised at run time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC ..s the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object camot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code bexiies for which no actual Ada 
body can be provided, for exanple the MACHINE_CODE package. 

1.4. SHARE_CODE Pragma 

The SHAREjCODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argxmaent. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a conpilation, but before 
any subsequent compilation unit. 

When the first argument is a generic uiait the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the coitpiler will try to 


C-2 





APPENDIX F OF THE Ada STANDARD 


share code generated for a generic insteintiation with code 
generated for other instantiations of the same generic, 
^en the second arg\jment is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
^ich code is shared between instamtiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE body is also recognized by the in^)le- 
mentation and has the same effect as SHARE_CODE. It is 
included for conpatability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elinn 
inates the overhead required to store the array in the exe- 
cuteible image. An attempt to use the IMAGE attribute on a 
type whose image array has been suppressed will ) ult in a 
con^ilation warning and PROCaiAM_ERROR raised at ru time. 

1.6. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the varieible or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to eui object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variabxe, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.8. IMPLICIT_C0DE Pragma 

Takes one of the identifiers ON or OFF as the single argu- 


C-3 









APPENDIX F OF THE Ada STANDARD 


merit. This pragma is only allowed within a machine code 
procedure. It specifies that iii?)licit code generated by the 
conpiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 
The default is CS4. 

1.9. OPTIMIZE_CX3DE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whetter the code should be optim¬ 
ized ^ the compiler. The default is ON. When OFF is 
specified, the cooqpiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CXKFROLLED 

This pragma is recognized by the inplementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in i^pendix B of the 
Ada RM. 


2.3. INLINE 

This pragma is inplemented as described in J^pendix B of the 
Ada RN. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be' scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 


C-4 












APPENDIX F OF THE Ada STANDARD 


2.7. NCW_REENTRANT 

This pragma takes one argument vrtiich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the conpiler that the subprogram will not be called 
recursively allowing the con5)iler to perform specific optim¬ 
izations. Ihe pragma can be applied to a subprogram or a 
set of overloaded subprograms within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 

2.10. PACK 

This pragma will cause the coirpiler to choose a non-aligned 
representation for composite types. It will not cause 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemer ’d as described in i^pendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms ; 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAOHA PASSIVE!INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the conpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task b^y will prevent the intended optimization, in these 
cases a warring will be generated at compile time and will 


C-5 








APPENDIX F OF THE Ada STANDARD 


raise TASK1 NG_error at riin time. 

2.13. PRIORITY 

This pragma is inplemented as described in J^^ndix B of the 
Ada RM. 


2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 


2.15. STORAGEJJNIT 

This pragma is recognized by the inplementation. The in^le- 
mentation does not allow SYSTEt4 to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is iiiplemented as described, except that 
DIVISION CHECK and in some cases CVERFLOW_CHECK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for vdiich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more Information on the use of this 
attribute. 

(For a package, task xmit, or entry, the 'REF attribute is 
not supported.) 


C-6 







APPENDIX F OF THE Ada STANDARD 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


with UNSIGNED_TYPES; 
package SYSTEM is 


pragma suppress(ALL^CHECKS); 
pragma suppress(EXCEFIIONJCABLES); 
pragma not^elaborated; 

type NAME is ( VAX__CRDSS_MIPS ); 

SYSTEMJIAME : constant NAME VAX_CROSS_MIPS; 

STORAGE_UNIT ; constant 8? 

MEMORY_SIZE : constant 16_777_216; 

— System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX DIGITS 

MAXJ1ANTISSA 

FINE_DELTA 

TICK 


: constant 
: constant 
: constant 
constant 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 ?83 F47; 
:-l?; - - 

2.0**{-31); 

0 . 01 ; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER rzmge 0 .. 99; 
MAX_REC_SIZE ; integer 1024; 
type ADDRESS is private; 

function ">" <A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function "<" (A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function ''>-"(A; ADDRESS; B: ADDRESS) return BOOLEAN; 

function ''<-"(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A; ADDRESS; B; ADDRESS) return INTEGER; 

fmction (A; ADDRESS; I: INTEGER) return ADDRESS; 

function (A: ADDRESS; I: INTEGER) return ADDRESS; 


function "+" (I; UNSIGNEDJIYPES.UNSIGNED INTEGER) return 
ADDRESS; ” 


C-7 












APPEM)IX F OF THE Ada STANEABD 


fxjnction MEWDRY__ADDRESS 

(I; UNSIGNEDjm'ES.UNSIGNED_INTEGER) return 
ADDRESS renaroes 

NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

N0_TASK_1D : constant TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

S1G_STATIJS__SI2E: constant 4; 

type PROGRAM_ID is private; 

N0__PR0GRAM_1D : constant PROGRAM_ID; 

type LQNG_ADDRESS is private; 

NO_LONG_ADDR : constant LONG_ADDRESS; 

function (A: LONG_ADDRESS; U INTEGER) return LONG_ADDRESS 

function (A: im3_ADDRESS; I: INTEGER) return LC»JG_ADDRESS 

function MAKE_LONG_ADDRESS (A: ADDRESS) return LC»«3_ADDRESS; 

function LOCALIZE (A: L(»«3__ADDRESS ; BYTE_SIZE : INTEGER) 
return ADDRESS; 

function STATION OF(A: LONG ADDRESS) return INTEGER; 


private 


type ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO_ADDR : constant ADDRESS 0; 
pragma BUILT_IN(''>"); 

pragma built_in("<"); 

pragma BUILT_IN( ) ; 
pragma BUILT_IN 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 
NO_TASK_ID ; constant TASK_ID 0; 

type FROGRAM ID is new UNSIGNED_TYPES.UNSIGNED INTEGER; 
NO PROGRAM ID : constant PROGRAM ID 0; 


type LONG_ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO LONG ADDR ; constant LONG ADDRESS :« 0; 


C-8 








APPENDIX F OF THE Ada STANDARD 


pragma BUILT IN(MAKE_LaiG_ADDRESS); 
pragma BUILT~IN(LOCALIZE); 
pragma BU1LT_IN(STAT1CN_0F); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK, record con^nents are padded 
so as to provide for efficient access the target 
hardware. Pragma PACK applied to a record eliminates the pad¬ 
ding vrtiere possible. Pragma PACK has no other effect on the 
storage allocated for record con^nents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of cos^nents; an explicit record representation 
clause miTSt te given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of cocponents only when the conp^nent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evalxiation of 
the variable address elaboration ordering requirements 
prohibit inititalization of variables vdiich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpretation and 
restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries must always 
be trying to accept each interrupt entry, unless it is handling tlie 
interrupt. The task must be executing either an accept for the entry 
(if there is only one) or a select statement vhere the interrupt entry 
accept alternative is open as defined 1^ Ada RM 9.7.1(4). This is not 
a restriction on normal tasks (i.e., signal ISRs). 


C-9 













APPEXIDZX F OF THE Ada STANDABD 


An interrupt acts as a conditional entry call in that interrupts are not 
queued (see the last sentence of Ada RM 13.5.1(2) and 13.5.1(6)). 

No additional requirements are in^sed for a select statement containing 
both a terminate alternative and an accept alternative for an Interrupt 
entiy (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt entry from another taslt are allowed and are 
treated as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify the priority 
of the interrupt. It singly specifies the interrupt vector nun^r. For 
passive ISRs, the nnn of the passive(interrupt,nnn) pragma specifies the 
interrupt priority of the task. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statementf an enumeration type of all the opcode roneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 

Oa)E^n'( opcode, operand {, operand} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 

The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 


C-10 












APP£M)IX F OF THE Ada STANDARD 


oust be used (c£. RM 4.3(4)), 

CXJDE_0'( op «> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

I4ie arguments to any of the functions defined in 
NACHINE__CODE must be static expressions, string literals, or 
the functions defined In nACHlNE_CODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expemsion of machine code procedures is supported. 

6. Conventions for Isplementation-generated Names 
There are no isplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 


8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10.' Inplementation Characteristics of I/O Packages 

Instantiations of DIRECTIO use the value MAX REC SIZE as 
the record size (expre'ssed in STORAGEJUNITS) vihen“the size 
of ELEMENTJTYPE exceeds that value. For exan^Jle for uncon¬ 
strained arrays such as string v^ere ELEMFNljryPE'SlZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide eun upper limit on the 
record size. In any case the maximum size supported is 1024 
x 1024 X STORAGEJUNIT bits. DIRECT 10 vd.ll raise USE_ERROR 
if HAX__REC_SIZE exceeds this absolu'Ee limit. 

instantiations of SBQUENTIAL__I0 use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) v^en the 
size of ELEMENTJTYPE exceeds that value. For exaitple for 


C-11 











APFE24DIX F OF !niE Ada SllANDAKD 


unconstrained arrays such as string v^ere ELEMENTJTYPE'SIZE 
is very large, MAX REC__SIZE is used instead. 
HAX__RECOED SIZE is defined in'~‘sySTEM and can be changed by a 
program before instantiating imXGER__lO to provide an upper 
limit on the record site. SEQUE34TIAL 10 inqposes no limit on 
MAX_REC_SIZE. 

11. Inqplementation Limits 

The following limits are actxmilly enforced by the implemen¬ 
tation. It is not intended to i^ly that resources up to or 
even near these limits are available to every program. 


11.1. Line Length 

The in?)lementation supports a maximum line length of 500 
characters inclijding Lm end of line character. 

11.2. Record and Anay Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAdEJUNlTS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STOIIAGEJUNITS. This is the value 
returned by T'ST0RAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In-the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'ST0RAGE_SIZE for an access type T. 

11.3. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a conpilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C~12 













