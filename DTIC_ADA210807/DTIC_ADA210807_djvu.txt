AD-A210 807 



r 

m 

UNCLASSIFIED 

SfCl't;-’ CiASS!':CR':C>h O' 1-.’$ RAG! twnr-L j * fm/'Kf 

r——-—■—---- 

-, • 1 





REPORT DOCUMENTMION PAGE 


1. HtPOP.T 12. 60*1 ACCCSSIO*. HI |3 UlClfllM S CATALOG fcjwfcift 


* 1IUI tine kj&’i't IS W. Of *£»>0». ft A£*100 COv£R£0 

Ada Compiler Validation Summa ry Report; internat-ho April ]93 Ci to 10 April 1990 
;onal k.-;!ies‘ Machines Corporation. IBM Development Svster 
t:ie Aua Lan.-uagt, AIX/R1 Ada Compiler, Version 1.1.1, 

" r% ' _*•* ' r V pf-—ll‘-» -Host £ 7 fl T* f* C t .* % ^' >47 nv T ] ^ 7 , ODht 

T. AwtiOR,*; 

Writ Tit" Fat t ersor. APB 
Davtor.. Or USA 


e. nmowiiiiw;. m^of 


ft. C0*>'RAC1 Oft ftftftft' hjMctftu; 



ft. OftiftMZATlOK AKG AODftiSS 

Wright-Patterson AFB 
Dayton, OH, USA 


n coft'fto.LiRG o 1 r icc h^i ak: aodrcsi 
Aca Joint Program. Office 
United States Department of Defense 
Washington, DC 20301-3061 

1«. *K)MT0S:aC AG'AGt AAwi ft A0DR1 SS(/f d'tft 'em f-pm Controlling Other) 

Wright-Patterson APB 
Dayton, OH, USA 


1C. RftOCSA* £ L f *<: M . 7 Ail 

Am a t uk:i mumeirs 


1Z. R£Por: da t 


It. SCCt'ftH' ClASS to 1 !h/j report/ 

UNCLASSIFIED 


li*. g£Ci»'S|f]CA:ioh ■oo^sGRAtmc 

K/A 


j It. CISTRIEjlIOh SfATlMtftil (oftMAfPOrtl 

j Approved for public release; distribution unlimited. 


C; S * P; E _ 11 on S:A*£“:M (of tht Idr.rin eritnf a ir.B oet 20 It Ofr, ren: fro-n Kepsn) 

uk-ass:f:» DT!C 

i £*k. ELECTE 55k 


DTI 


; It. SJftr.£*>;s'At. a:T£S 



It. !£>•: = :' (C o': "iuf o-i 'frt'it i‘Oi if rtfcru* r y »nd idr nj/f, bt bioik numbn) 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-S7D- 
161SA, Ada Joint Program. Office, AJPO 

20 . AESIRAC 1 (Conr.nuf pr> rr»r'i r HO* if nrcuw'; *na tdrnvf) b> bio c* numftfr) 

International Business Machines Corporation, IBM Development System for the Ada Language 
AIX/RT Ada Compiler, Version 1.1.1, Wright-Patterson APB, IBM RT PC 6150-125 under AIX, 
Release 2.2 (Host 6 Target), ACVC 1.10 


DD ,VKm 1473 toiuoh Of i no. ti is oeso.tu 

J Ja* ?j s/t. oio2-if-014-6601 _ UNCLASSIFIED _ 

SUU*n» CLAGS: I KA’IDS O' This RAGt (nvisenD«t« tnirrrd: 



















AVF Control Number: AVF-VSR-255.0689 

89-01-03-TEL 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 890420V1.10066 
International Business Machines Corporation 
IBM Development System for the Ada Language 
AIX/RT Ada Compiler, Version 1.1.1 
IBM RT PC 6150-125 


Completion of On-Site Testing: 
20 April 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 



Ai;C 10' t-or 

NTlS CRA&I 
DilJ TAB 

U .d I’iO'i' Ct d 
J i i > t 1 11 C j {i v.> i: 


By_ 

Distribution I 

Avdil.jbilify Codes 










Ada Compiler Validation Summary Report: 


Compiler Name: IBM Development System for the Ada Language, 
AIX/RT Ada Compiler, Version 1.1.1 

Certificate Number: 890420V1.10066 


Host: IBM RT PC 6150-125 under 

AIX, Release 2.2 

Target: IBM RT PC 6150-125 under 
AIX, Release 2.2 


Testing Completed 20 April 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


Ada Validation Facility” 
Steve P. Vilson 
Technical Director 
ASD/SCEL 

Vright-Patterson AFB OH 


45433-6503 



A/fa "Validation' Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 



Dr. John Solomond 
Director 

Washington D.C. 20301 






Ada Compiler Validation Summary Report: 


Compiler Name: IBM Development System for the Ada Language, 
AIX/RT Ada Compiler, Version 1.1.1 

Certificate Number: 890420V1.10066 


Host: IBM RT PC 6150-125 under 

AIX, Release 2.2 

Target: IBM RT PC 6150-125 under 
AIX, Release 2.2 


Testing Completed 20 April 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 




Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analy; 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Washington D.C. 20301 







TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 

1.2 

1.3 

1.4 

1.5 


PURPOSE OF THIS VALIDATION SUMMARY REPORT . . . . 

USE OF THIS VALIDATION SUMMARY REPORT . 

REFERENCES. 

DEFINITION OF TERMS . 

ACVC TEST CLASSES . 



CHAPTER 2 CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 


CHAPTER 3 TEST INFORMATION 


3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4. WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 


APPENDIX C TEST PARAMETERS 


APPENDIX D 


WITHDRAWN TESTS 


Csl CnJ CO CO 
























CHAPTER 1 


INTRODUCTION 


r /n. V 

This Validation Summary Report tVSRiP describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of jesting this compiler using the Ada Compiler 
Validation Capability . (ACVC)rf> An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. ) 


The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 








INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried our for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler vas conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing vas completed 20 April 1989 at San Diego CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national lavs of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Aca Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


1-2 








INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 

ANSIVMIL-STD-1M5A, February 1985 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implemented' Guide , SofTech, 
Inc.7 December 1986 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 

ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


Applicant 

AVF 


AVO 


Compiler 


The agency requesting validation. 

The Ada Validation Facility. The AVF is responsible for 
conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 


The Ada Validation Organization. The AVO has oversight 
authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

A processor for the Ada language. In the context of this 
report, a compiler is any language processor, including 


1-3 









INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


Withdrawn 

test 


1-4 




INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 


1-5 




INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is vithdravn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
vithdravn at the time of this validation are given in Appendix D. 


1-6 





CHAPTER 2 


CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 


Compiler: IBM Development System for the Ada Language, 
AIX/RT Ada Compiler, Version 1.1.1 

ACVC Version: 1.10 

Certificate Number: 890420W1.10066 

Host Computer: 

Machine: IBM RT PC 6150-125 

Operating System: AIX 

Release 2.2 

Memory Size: 10 Megabytes 


Target Computer: 

Machine: 

Operating System: 
Memory Size: 


IBM RT PC 6150-125 
AIX 

Release 2.2 
10 Megabytes 


2-1 






CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..B (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to six 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined type 
LONG_INTEGER in package STANDARD. (See tests B86001T..Z (7 
tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) Some of "ie default initialization expressions for record 
compone.; v .*; are evaluated before any value is checked for 
membership m a component's subtype. (See test C32117A.) 

(2) Assignments >or subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 
uses no extra bits for extra range. (See test C35903A.) 


2-2 









CONFIGURATION INFORMATION 


(4) Sometimes NUMERIC ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) Sometimes NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. Vhile the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises NUMERIC_ERROR sometimes. 
(See test C36003A.) 

(2) NUMERIC_EEROR is raised when a null array type with 

INTEGER'LAST + 2 components is declared. (See test C36202A.) 

(3) NUMERIC ERROR is raised when a null array type with 

SYSTEM.MAX INT + 2 components is declared. (See test 

C36202B.) ” 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. (See test C52103X.) 


2-3 





CONFIGURATION INFORMATION 


(5) A packed two-dimensional BOOLEAN array with more than 

INTEGER'LAST components raises CONSTRAINT_ERROR when the 

length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 

either when declared or assigned. Alternatively, an 

implementation may accept the declaration. Bovever, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, index 
subtype checks are made as choices are evaluated. (See tests 
C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, . 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is not supported for functions or 

procedures. (See tests LA3004A..B, EA3004C..D, and 

CA3004E..F.) 


2-4 








CONFIGURATION INFORMATION 


i. Generics 

(1) Generic library subprogram specifications and bodies can be 
compiled in separate compilations. (See test CA1012A.) 

(2) Generic non-library subprogram bodies cannot be compiled in 
separate compilations from their stubs. (See test CA2009F.) 

(3) Generic library package specifications and bodies cannot be 
compiled in separate compilations. (See tests BC3204C and 
BC3205D.) 

(4) Generic non-library package bodies as subunits cannot be 
compiled in separate compilations. (See test CA2009C.) 

(5) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_I0 cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and OUT FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN_FILE, OUT_FILE, and INOUT_FILE are supported for 
DIRECT_I0. (See tests CE2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) Modes IN FILE and OUT_FILE are supported for text files. (See 
tests CE3102E and CE3102I..K.) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_I0. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

(9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 


2-5 









CONFIGURATION INFORMATION 


(10) Temporary sequential files are given names and deleted vhen 
closed. (See test CE2108A.) 

(11) Temporary direct files are given "ames and deleted vhen 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and deleted vhen closed. 
(See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files vhen vriting or reading. 
(See tests CE2107A..E, CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file can be associated vith each 

external file for direct files vhen vriting or reading. (See 
tests CE2107F..H (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated vith each 

external file for text files vhen vriting or reading. (See 
tests CE3111A..E, CE3114B, and CE3115A.) 


2-6 







CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler vas 
tested, 43 tests had been withdrawn because of test errors. The AVF 
determined that 432 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 327 
executable tests that use floating-point precision exceeding that supported 
by the implementation . Modifications to the code, processing, or grading 
for 7 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 


Passed 

Inapplicable 

Withdrawn 

TOTAL 


TEST CLASS 
A B C D 

127 1128 1906 15 

2 10 410 2 

1 2 34 0 

130 1140 2350 17 


TOTAL 
E L _ 

22 44 3242 

6 2 432 

6 0 43 

34 46 3717 


3-1 







TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

189 

527 

472 

245 

170 

99 

159 

333 

129 

36 

250 

341 

292 

3242 

Inappl 

23 

122 

208 

3 

2 

0 

7 

0 

8 

0 

2 

28 

29 

432 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

35 

4 

43 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 43 tests were withdrawn from ACVC Version 1.10 at the time of this 
validation: 


E28005C 

A39005G 

B97102E 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD71C5A 

CD7203B 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features that 
a compiler is not required by the Ada Standard to support. Others may depend on 
the result of another test that is either inapplicable or withdrawn. The 
applicability of a test to an implementation is considered each time a 
validation is attempted. A test that is inapplicable for one validation attempt 
is not necessarily inapplicable for a subsequent attempt. For this validation 
attempt, 432 tests were inapplicable for the reasons indicated: 


a. The following 327 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113C..Y 
C35708C..Y 
C45421C..Y 
C45641C..Y 


C35705C..Y 
C35802C..Z 
C45521C..Z 
C46012C..Z 


C35706C..Y 
C45241C..Y 
C45524C..Z 


C35707C..Y 
C45321C..Y 
C45621C..Z 




TEST INFORMATION 


b. C35508I, C35508J, C35508M, and C35508N are not applicable because they 

include enumeration representation clauses for BOOLEAN types in which 
the representation values are other than (FALSE ■> 0, TRUE ■> 1). 
Under the terms of AI-00325, this implementation is not required to 
support such representation clauses. 

c. C35702A and B86001T are not applicable because this implementation 

supports no predefined type SH0RT_FL0AT. 

d. C35702B and B86001U are not applicable because this implementation 

supports no predefined type L0NG_FL0AT. 

e. The following 16 tests are not applicable because this implementation 
does not support a predefined type SH0RT_INTEGER: 


C45231B 

C45304B 

C45502B 

C45503B 

C45504B 

C45504E 

C45611B 

C45613B 

C45614B 

C45631B 

C45632B 

B52004E 

C55B07B 

B55B09D 

B86001V 


CD7101E 

f. C45231D, B86001X, and CD7101G are not applicable because this 

implementation does not support any predefined integer type with a name 
other than INTEGER, LONG_INTEGER, or SH0RT_INTEGER. 

g. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYST£M.MAX_MANTISSA is less than 47. 

h. D64005F and D64005G are not applicable because this implementation does 
not support nesting 10 levels of recursive procedure calls. 

i. C86001F is not applicable because, for this implementation, the package 

TEXT_I0 is dependent upon package SYSTEM. These tests recompile 

package SYSTEM, making package TEXT_I0, and hence package REPORT, 
obsolete. 

j. B86001Y is not applicable because this implementation supports no 

predefined fixed-point type other than DURATION. 

k. B86001Z is not applicable because this implementation supports no 

predefined floating-point type with a name other than FLOAT, 
L0NG_FL0AT, or SH0RT_FL0AT. 

l. CA2009C, CA2009F, BC3204C, and BC3205D instantiate generic units in 

compilation units whose bodies are compiled after the instantiation, or 
are recompiled after compilation of the instantiating unit. This 
implementation creates an allowable dependency on the body of the 
generic unit, and thus rejects the program at bind time. 

m. LA3004A, LA3004B, EA3004C, EA3004D, CA3004E, and CA3004F are not 

applicable because this implementation does not support pragma INLINE. 

n. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) are 
not applicable because this implementation does not support size 


3-3 





TEST INFORMATION 


clauses for floating point types. 

o CD2A61I and CD2A61J are not applicable because this implementation does 
not support size clauses for array types, which imply compression, with 
component types of composite or floating point types. This 

implementation requires an explicit size clause on the component type. 

p. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for access 
types. 

q. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL 10 vith unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected by 
this compiler. 

r. AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_I0 

with unconstrained array types and record types vith discriminants 
without defaults. These instantiations are rejected by this compiler. 

s. CE2102D is inapplicable because this implementation supports CREATE 

with INJFILE mode for SEQUENTIAL_I0. 

t. CE2102E is inapplicable because this implementation supports CREATE 

vith 0UT_FILE mode for SEQUENTIAL_I0. 

u. CE2102F is inapplicable because this implementation supports CREATE 

with INOUTJTLE mode for DIRECTJIO. 

v. CE2102I is inapplicable because this implementation supports CREATE 

vith INJFILE mode for DIRECTJIO. 

w. CE2102J is inapplicable because this implementation supports CREATE 

vith 0UT_FILE mode for DIRECTJIO. 

x. CE2I02N is inapplicable because this implementation supports OPEN with 
IN_FILE mode for SEQUENTIAL_I0. 

y. CE21020 is inapplicable because this implementation supports RESET with 
INJFILE mode for SEQUENTIAL_I0. 

z. CE2102P is inapplicable because this implementation supports OPEN with 
0UT_FILE mode for SEQUENTIAL_I0. 

aa. CE2102Q is inapplicable because this implementation supports RESET vith 
0UT_FILE mode for SEQUENTIAL_I0. 

ab. CE2102R is inapplicable because this implementation supports OPEN vith 
IN0UT_FILE mode for DIRECTJIO. 

ac. CE2102S is inapplicable because this implementation supports RESET vith 
INOUT FILE mode for DIRECT 10. 


3-4 




TEST INFORMATION 


ad. CE2102T is inapplicable because this implementation supports OPEN with 
IN_FILE mode for DIRECT_I0. 

ae. CE2102U is inapplicable because this implementation supports RESET with 
IN_FILE mode for DIRECT_I0. 

af. CE2102V is inapplicable because this implementation supports open with 
0UT_FILE mode for DIRECT_I0. 

ag. CE2102V is inapplicable because this implementation supports RESET with 
OUT_FILE mode for DIRECT_I0. 

ah. CE2201G is inapplicable because this implementation does not support 
CREATE with OUT_FILE mode for SEQUENTIAL_IO. 

ai. CE2401H is inapplicable because this implementation does not support 
CREATE with INOUT_FILE mode for unconstrained records with default 
discriminants. 

aj. CE3102E is inapplicable because this implementation supports CREATE 

with IN_FILE mode for text files. 

ak. CE3102F is inapplicable because this implementation supports RESET for 
text files. 

al. CE3102G is inapplicable because this implementation supports deletion 
of an external file for text files. 

am. CE3102I is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for text files. 

an. CE3102J is inapplicable because this implementation supports OPEN with 
IN_FILE mode for text files. 

ao. CE3102K is inapplicable because this implementation supports OPEN with 
OUT FILE mode for text files. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, processing, 
or evaluation in order to compensate for legitiiuate implementation behavior. 
Modifications are made by the AVF in cases where legitimate implementation 
behavior prevents the successful completion of an (otherwise) applicable test. 
Examples of such modifications include: adding a length clause to alter the 
default size of a collection; splitting a Class B test into subtests so that all 
errors are detected; and confirming that messages produced by an executable test 
demonstrate conforming behavior that wasn't anticipated by the test (such as 
raising one exception instead of another). 

Modifications were required for 7 tests. 


3-5 




TEST INFORMATION 


The following tests were split because syntax errors at one point resulted in 
the compiler not detecting other errors in the test: 

BA1101C BA3006A BA3006B BA3007B BA3008A BA3008E 

BA3013A 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the 
IBM Development System for the Ada Language, AIX/RT Ada Compiler was submitted 
to the AVF by the applicant for review. Analysis of these results demonstrated 
that the compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3.7.2 Test Method 

Testing of the IBM Development System for the Ada Language, AIX/RT Ada Compiler 
using ACVC Version 1.10 was conducted on-site by a validation team from the AVF. 
The configuration in which the testing was performed is described by the 
following designations of hardware and software components: 

IBM RT PC 6150-125 
AIX, Release 2.2 
IBM RT PC 6150-125 
AIX, Release 2.2 

IBM Development System for the Ada 
Language, AIX/RT Ada Compiler, Version 1.1.1 

A magnetic tape, TAR format, containing all tests except for withdrawn tests and 
tests requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation testing 
were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were not loaded directly onto the host 
computer. It was loaded onto a SUN 3 computer and from the files loaded onto 
the SUN 3, a tape cartridge compatible vith the host computer was made. This 
cartridge was then loaded onto RT PC 6150-125. 

After the test files were loaded to disk, the full set. of tests was compiled, 
linked, and all executable tests were run on the IBM RT PC 6150-125. Results 
were printed from an IBM 3083 with the results being transferred to the IBM 3083 
via the IBM RT PC 3278/3279 emulation package. 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


3-6 




TEST INFORMATION 


The compiler was tested using command scripts provided by International Business 
Machines Corporation and reviewed by the validation team. The compiler was 
tested using the following default option settings: 


OPTION 


EFFECT 


-►target 

+virt=1000 

-opt 

♦killbodies 

-►verbose 


Adds target debug information to generated code. 
Specifies the number of virtual pages use by VSM. 
Sets the optimizer off. 

Causes the intermediate data to be deleted from 
the sublibraries. 

Causes additional console out information such 
as banners and front end, middle pass, and code 
generator completion messages, and error counts 
to be generated. 


The following option settings were used instead of the defaults: 


OPTION 

EFFECT 

-t-bind 

Produces an executable from previously 
compiled code. 

-►main 

Compiles the specified file as a main program. 

+list 

Generates compilation listing. 

-verbose 

Causes additional console out information such 
as banners and front end, middle pass, and code 
generator completion messages, and error counts 
not to be generated. 


Tests were compiled, linked, and executed (as appropriate) using two computers. 
Test output, compilation listings, and job logs were captured on magnetic tape 
and archived at the AVF. The listings examined on-site by the validation team 
were also archived. 


3.7.3 Test Site 

Testing was conducted at San Diego CA and was completed on 20 April 1989. 


3-7 








APPENDIX A 

DECLARATION OF CONFORMANCE 


International Business Machines Corporation has submitted 
the following Declaration of Conformance concerning the IBM 
Development System for the Ada Language, AIX/RT Ada 
Compiler. 





DECLARATION OF CONFORMANCE 


Compiler Implemenior: TeleSoft 

Ada Validation Facility: ASD-'SCEL, Wright-Patterson AFB. OH 45433-6503 
Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 

Base Compiler Name: IBM Development System for the Ada Language, 
AIX/RT Ada Compiler, Version 1.1.1 
Host Architecture ISA: IBM RT PC 6150-125 
Operating System: AIX, Release 2.2 

Target Architecture ISA: IBM RT PC 6150-125 
Operating System: AIX, Release 2.2 


Implementor’s Declaration 


I, the undersigned, representing TeleSoft have implemented no deliberate extensions to the Ada 
Language Standard ANSI/MIL-STD-1815A in the compiler listed in this declaration. I declare 
that International Business Machines Corporation is the owner of record of the object code of the 
Ada language compiler listed above and, as such, is responsible for maintaining said compiler in 
conformance to ANS17MIL-STD-1815A. All certificates and registrations for the Ada language 
compiiejpliajed jn this declaration shall be made only in the owner's corporate name. 



TeieSoft 


Raymond A. Parra. Director. Contracts At Legal 


Date: /VV cm / O I ^ df 9 


cr 


Owner’s Declaration 


I. the undersigned, representing International Business Machines Corporation take full 
responsibility for implementation and maintenance of the Ada compiler listed above, and agree to 
the public disclosure of the final Validation Summary Report. I declare that all of the Ada 
language compilers listed, and their host/target performance are in compliance with the Ada 
Language Standard AXSI/M1L-STD-1815A. 


/ 






■ y 


Internationa/ Business Machines Corporation 

S. W. PoiaceK. Manager of Advanced Language Products 


f 



A-2 




APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed , 
restrictions on representation clauses. The implementation-dependent 

characteristics of the IBM Development System for the Ada Language, AIX/RT 
Ada Compiler, Version 1.1.1, as described in this Appendix, are provided by 
TeleSoft. Unless specifically noted otherwise, references in this Appendix 
are to compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, v~.ich are not a 
part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 

type DURATION is delta 2**(-14) range -86400.0 .. 86400.0; 


end STANDARD; 


B-l 





APPENDIX F 

OF THE LANGUAGE REFERENCE MANUAL 


The Ada language definition allows for certain target dependencies in a controlled manner. 
This section, called Appendix F as prescribed in the LRM, describes implementation-dependent 
characteristics of the IBM Ada Development System AIX/RT Compiler Version 2.1 running 
under AIX 2.2. 

1. Implementation-Defined Pragmas 

Implementation dependent pragmas are: 

PRAGMA COMMENT (string_literal); 

— embeds string_literal into object code 

PRAGMA IMAGES (enumeration_type, <immediate>| <deferred>); 

— generates a table of images for the enumeration type 

— ’deferred’ causes the table to be generated only if 

— the enumeration type is used in a compilation unit 

2. Predefined Pragmas 

Supported pragmas are INTERFACE. ELABORATE. SUPPRESS, PACK. PAGE. LIST, 
and PRIORITY. 

All pragmas have conventional meanings except LIST which suppresses listings prior to 
Pragma LIST(ON) regardless of the user request. Pragma INTERFACE supports C, Fortran 
and Assembly. 

Unrecognized and unsupported Pragmas are ignored with the appropriate warning message. 


3. Representation Clauses 

Supported representation clauses include: 

- Length Clause 

- Enumeration Representation Clauses, except 

for Boolean types 

- Record Representation Clause 

- Address Clause for variables, constants. 

and tasks 

- Interrupt support 

Record representation clauses are aligned on 16-bit boundaries. 


4. Restrictions on Unchecked Conversion 

The only restriction on Unchecked Conversion is that the two types (or subtypes) A and B 
must be the same static size, and that neither A nor B are private. 


B-2 




5. Package SYSTEM 

The package System has the following characteristics: 
PACKAGE System IS 

— for integer use 16; 

TYPE Address is access integer; 

— for Address'size use -l*Storage_Unit; 

TYPE Subprogram Value is 
Record 

KR : Address; 

Static Base : Address; 

End Record; 

TYPE Namo IS (TeleSoft_Ada); 

System Name : CONSTANT name := TeleSoft_Ada; 
Storage Unit : CONSTANT := 8; 

Memory Size : CONSTANT := 1024*16416: 


— System-Dependent Named Numbers: 

Minjnt : CONSTANT := -(2 ** 31); 

Max Jnt : CONSTANT := (2 ** 31) - 1; 

Max_Digits : CONSTANT := 6: 

Max_Mantissa : CONSTANT := 31; 

Fine_Delta : CONSTANT := 1.0 / (2 ** Max_Mantissa); 
Tick : CONSTANT := 0.1 

— Other System-Dependent Declarations 

SUBTYPE Priority IS Integer RANGE 0 .. 255; 

Max_Object_Size : CONSTANT := (32*1024)-1; 
Max_Record_Count : CONSTANT := (32*1024)-!; 
Max'TextJo Count : CONSTANT := 16*1024; 

Max Text Jo'Field : CONSTANT := 1000; 

end System: 

6 . Representation Attributes 

All defined representation Attributes shall be supported. 


B-3 





7. Implementation-Generated Names 

There are no implementation-generated names denoting implementation-dependent 
components. Names generated by the compiler shall not interfere with programmer-defined 
names. 

8. Implementation-Dependent Characteristics of the I/O Packages 

• Sequential lO, Direct_10. and Text_10 are supported. 

• Low_Level_IO is not supported. 

• Unconstrained array types and unconstrained types with discriminants may not be 
instantiated for I/O. 

• File names follow the conventions and restrictions of the target operating system, 
except that non-printing characters, blank(' ’) and asterisk (’*’) are disallowed. 

• In Text IO, the type Field is defined as follows: subtype Field is integer range 

0 .. 1000 ; 

• In Text IO, the type Count is defined as follows: type Count is range 0..16 384; 

9. Predefined Numeric Types 

The current specification of package STANDARD includes: 

type INTEGER is range -32768 .. 32727; 

type LONG_INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -1.70l4lE-r38 .. 1.7014lE-f38: 

type DURATION is delta 2 ** (-14) range -86400.0 .. 86400.0; 

INTEGER 
’First = -32768 
’Last = 32767 
’Size = 16 

LONG INTEGER 
'First = -2147483648 
’Last = 2147483647 

’Size = 32 

FLOAT 

’Machine Overflows = true 
’Machine_Rounds = true 
’Machine Radix = 2 
’Machine Mantissa = 23 
’Machine_Emax = 127 

’Machine_Emin = -128 

’Mantissa = 21 

’Digits = 6 




’Size 
’Emax 
’Safe_Emax 
'Epsilon 
’Safe Large 
’Safe Small 


= 32 
= 84 
= 126 

= 9.53674E-07 
= 8.50706E—37 
= 2.93873E-39 


DURATION 

’MachineOverflows *= false 
’Machine _Rounds = false 
’Delta = 2**(-14) 

’First = -86400.0 

’Last = 86400.0 


10. Restrictions on Machine Code Insertions 
Machine code insertions are not supported. 


B-5 


APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
belov: 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..199 *> 'A', 200 «> '1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..199 => 'A', 200 => '2') 

An identifier the size of the 
maximum input line length which 
is identical to SBIG_ID1 except 
for the last character. 


$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near~the middle. 


(1..100 «> 'A', 101 => '3', 
102..200 «> 'A') 


C-l 






TEST PARAMETERS 


Value 


(1..100 => 'A', 101 => '4' , 
102..200 => 'A') 


Name and Meaning ___ 

$BIG ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 

value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG STRING1 

A string literal which when 

catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 

catenated to the end of 
BIG_STRING1 yields the image of 
BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 

of the maximum line length. 


$C0UNT_LAST 

A universal 

integer 

literal whose 

value 

is 

TEXT_I0.COUNT'LAST. 

SDEFAULT MEM_SI2E 

An integer literal 

whose 

value 

is SYSTEM.MEM0RY_SIZE. 


SDEFAULT ST0R_UNIT 

An integer literal 

whose 

value 


is SYSTEM.STORAGE UNIT. 


(1-.197 -> 'O', 198..200 -> "298") 


(1..195 «> 'O', 196..200 «> "690.0") 


(1 «> 2..101 -> 'A', 102 «> '"') 


(1 => 2..100 => 'A', 

101..102 => ' 1 "') 


(1..180 => ' ') 


2147483646 


16809984 


8 


C-2 



TEST PARAMETERS 


Name and Meaning _ Value _ 

$DEFAULT_SYS NAME TELESOFT_ADA 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 2#1.0#E-31 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 1000 

A ~ universal integer 

literal whose value is 
TEXT_I0.FIELD'LAST. 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FL0AT_NAME N0_SUCB_FL0AT_TYPE 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0AT, or 

L0NG_FL0AT. 

$GREATER_THAN_DURATION 100000.0 

A universal real literal that 
lies be tween DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER t THAN_DURATION_BASE LAST 131073.0 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 255 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 BADCHAR **/% 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 /N0NAME/DIRECT0RY 

An external file name which 
is too long. 

$INTEGER_FIRST -32768 

A universal integer literal 
whose value is INTEGER'FIRST. 


C-3 





TEST PARAMETERS 


Name and Meaning 


Value 


$INT£GER_LAST 32767 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 32768 

A universal integer literal 

whose value is INTEGER'LAST + 1. 


$LESS_THAN_DURATION -100000.0 

A universal real literal that 
lies between DURATION'BASE FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATI0N BASE_FIRST -131073.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$ L0V_PRI0RITY 0 

An integer literal whose value 
is the lover bound of the range 
for the subtype SYSTEM.PRIORITY. 


$MANTISSA_D0C 31 

An integer literal whose value 
is SYSTEM.MAX MANTISSA. 


SMAXDIGITS 6 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 200 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX INT. 


$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL (1..2 -> "2:", 3. 

A universal integer based 198..200 => "11: 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 


.197 -> 'O', 
") 





TEST PARAMETERS 


Name and Meaning __ 

$MAX_L£N_REAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING LITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEV_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(1..3 => "16:", 4..196 => '0' , 
197..200 => "F.E:") 

(1 => 2..199 «=> 'A', 200 => 

-2147483648 

32 

N0_SUCH_TYPE_AVAILABLE 

TELES0FT_ADA 

16#FFFFFFFEir 

16809984 


C-5 


TEST PARAMETERS 


Name and Meaning 


Value 


$NEV_STOR_UNIT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE UNIT. 


$NEV SYS NAME TELESOFT_ADA 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 


$T/SK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 0.1 

A real literal whose value is 
SYSTEM.TICK. 


C-6 





APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 43 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C has been withdrawn because it expects that the string "— 
TOP OF PAGE. —63" of line 204 will appear at the top of the 
listing page due to a pragma PAGE in line 203; but line 203 
contains text that follows the pragma, and it is this that must 
appear at the top of the page. 

b. A39005G has been withdrawn because it unreasonably expects a 

component clause to pack an array component into a minimum size 
(line 30). 

c. B97102E has been withdrawn because it contains an unintended 

illegality: a select statement contains a null statement at the 
place of a selective wait alternative (line 31). 

d. BC3009B has been withdrawn because it wrongly expects that 

circular instantiations will be detected in several compilation 
units even though none of the units is illegal with respect to the 
units it depends on; by AI-00256, the illegality need not be 
detected until execution is attempted (line 95). 

e. CD2A62D has been withdrawn because it wrongly requires that an 
array object's size be no greater than 10, although its subtype's 
size was specified to be 40 (line 137). 

f. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] have 

been withdrawn because they wrongly attempt to check the size of 
objects of a derived type (for which a 'SIZE length clause is 
given) by passing them to a derived sub-program (which implicitly 
converts them to the parent type (Ada standard 3.4:14)). 
Additionally, they use the 'SIZE length clause and attribute, 


D-l 




VITHDRAVN TESTS 


whose interpretation is considered problematic by the VG9 ARG. 

g. CD2A81G, CD2A83G, CD2A84M and N, and CD50110 have been withdrawn 
because they assume that dependent tasks will terminate while the 
main program executes a loop that simply tests for task 
termination; this is not the case, and the mam program may loop 
indefinitely (lines 74, 85, 86 and 96, 86 and 96, and 58, 
respectively). 

h. CD2B15C and CD7205C have been withdrawn because they expect that a 
'STORAGE SIZE length clause provides precise control over the 
number of designated objects in a collection; the Ada standard 
13.2:15 allows that such control must not be expected. 

i. CD2D11B has been withdrawn because it gives a SMALL representation 
clause for a derived fixed-point type (at line 30) that defines a 
set of model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

j. CD5007B has been withdrawn because it wrongly expects an 
implicitly declared subprogram to be at the the address that is 
specified for an unrelated subprogram (line 303). 

k. ED7004B, ED7005C and D, ED7006C and D [5 tests] have been 
withdrawn because they check various aspects of the use of the 
three SYSTEM pragmas; the AVO withdraws these tests as being 
inappropriate for validation. 

l. CD7105A has been withdrawn because it requires that successive 

calls to CALENDAR.CLOCK change by at least SYSTEM.TICK; however, 
by Commentary AI-00201, it is only the expected frequency of 
change that must be at least SYSTEM.TICK—particular instances of 
change may be less (line 29). 

m. CD7203B and CD7204B have been withdrawn because they use the 'SIZE 

length clause and attribute, whose interpretation is considered 

problematic by the VG9 ARG. 

n. CD7205D has been withdrawn because it checks an invalid test 

objective: it treats the specification of storage to be reserved 
for a task's activation as though it were like the specification 
of storage for a collection. 

o. CE2107I has been withdrawn because it requires that objects of two 
similar scalar types be distinguished when read from a 
file—DATA_ERR0R is expected to be raised by an attempt to read 
one object as of the other type. However, it is not clear exactly 
how the Ada standard 14.2.4:4 is to be interpreted; thus, this 
test objective is not considered valid (line 90). 







WITHDRAWN TESTS 


p. CE3111C has been withdrawn because it requires certain behavior 
when two files are associated with the same external file; 
however, this is not required by the Ada standard. 

q. CE3301A has been withdrawn because it contains several calls to 
END_0F LINE and END_OF_PAGE that have no parameter: these calls 
were Intended to specify a file, not to refer to STANDARD_INPUT 
(lines 103, 107, 118, 132, and 136). 

r. CE341IB has been withdrawn because it requires that a text file's 
column number be set to COUNT'LAST in order to check that 
LAYOUT ERROR is raised by a subsequent PUT operation. But the 
former - operation vill generally raise an exception due to a lack 
of available disk space, and the test would thus encumber 
validation testing. 


D-3 



