AD-A281_528 


4 



WL-TR-94-1049 


DETAILED EXAMPLE OF USING PIWG 
ON THE SUN WORKSTATION AND THE 
DEC VAX COMPUTER 



Major Steven A. Davidson 
Software Concepts Group 
Avionics Logistics Branch 
Systems Avionics Division 


December 1993 


Final Report for Period 6 June 1993 to 18 June 1993 


Approved for Public Release; Distribution Unlimited 


94-21743 

laiii Hill Mil Mil lllil imi nil nil 


I 






DTie QUALITY INSPECTED 8 


AVIONICS DIRECTORATE 

WRIGHT LABORATORY 

AIR FORCE MATERIEL COMMAND 

WRIGHT-PATTERSON AIR FORCE BASE, OHIO 45433-7409 



7 l 8 01 ^ 





NOTICE 


When Government drawings, specifications, or other data are used for any purpose other than in 
connection with a definitely Government-related procurement, the United States Government 
incurs no responsibility nor any obligation whatsoever. The fact that the Government may have 
formulated or in any way supplied the said drawings, specifications, or other data is not to be 
regarded by implication, or otheiwise in any manner, construed, as licensing the holder, or any 
other person or corporation; or as conveying any rights or permission to manufacture, use, or sell 
any patented invention that may in any way be related thereto. 

This report is releasable to the National Technical Information Service (NTIS). At NTIS, it will 
be available to the general public, including foreign nations. 

This technical report has been reviewed and is approved for publication. 


'nDo AJLt/un. 


STEVEN A. DAVIDSON, Major 
U.S. Air Force Reserves 





ROBERT L. HARRIS, Section Chief 
Softwar Concepts Group 
Avionics Logistics Branch 


OMER KEENER, Acting Chief 
Avionics Logistics Branch 
Systems Avionics Division 


If your address has changed, if you wish to be removed from our mailing list, or if the addressee 
is no longer employed by your organization, please notify WL/AAAF, V/right-Patterson AFB, 
OH 45433-7409 to help us maintain a current mailing list. 


Copies of this report should not be returned unless return is required by security considerations, 
contractual obligations, or notice on a specific document. 











REPORT DOCUMENTATION PAGE 

Form Apprwad 

0MB No. 0704 018a 

biiblit **oon.«9 b«»a*n «8» thn collMion o1 information n ntimaita to anaiafo i hour per rtiponta. including the tima for raviawmg mitruoiont taarching e.utmo data tourcat 
tatbtring and maintaining tha data naadad. and complating and raviawing tha coflanion of information Sand commantt raoa'ding tnit burdan attimate or any othar aioart of th» 
toMattion 0* information, mrluding wgMtiont for raducing tint burdan to Watbington Haadquartari Saruicat, Oiraaorata for information Ooarationt and aaMrtt, t JlSjaffaraon 

Da>itMighway,Suita 1204. Arhngton. V* 222Q2-4N2.andtotna Officaof Managamant and Budgat. aaparwork ftaductionOroiact(0704-OtU) Wathmgton OC 20S0} 

1 . .««y u« ouiY ««« armrj |r. «rKfc8(HJ„ , 5,3 t. ««», "{?„!(;% 

*- ‘Example of Using PIWG on the SUN Workstation and 

the DEC VAX Computer 

S. FUNDING NUMBERS 

PE: 63756 

PR: 2853 

TA: 01 

WU: 03 

a author(s) 

DAVIDSON, STEVEN A., Major, USAF Reserves 

7 . SUFORMINCABGANiZATION NAME(S) AND AOORESS(ES) 

Avionics Directorate 

Wright Laboratory 

Air Force Materiel Command 

Wright-Patterson AFB OH 45433-7409 

8. PERFORMING ORGANIZATION 

REPORT Nm^ERj.R.94.,049 

9. SPONSORING/MONITORING AGENCY NAME(S) AND AODRESS(ES) 

Wright Laboratory, Avionics Directorate 

Air Force Materiel Command 

Wright-Patterson AFB OH 45433-7409 

10. SPONSORING/MONITORING 

AGENCY REPORT NUMBER 

WL-TR-94-1049 

11. SUPPLEMENTARY NOTES 

Approved for Public Release; 

Distribution Unlimited 

12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for Public Release; Distribution Dnlimited 

12b. DISTRIBUTION CODE 

13. ABSTRACT {Maximum iOOwonb) 

This r^rt is a Uboratory user’s guide for evaluating performance of ADA compilers using the 
Association of Computing Machinery’s (ACM) Performance Issues Working Group (PIWG) 
benchmarking test suite. The report covers the August 1, 1990 version PIWG suite. Part 1 of the 
report presents a detailed step-by-step instruction for installing these tests on a SUN workstation 
using a UNIX operating system, and perforaiing an evaluation of a SPARCAda compiler Part 2 of 
the report covers installation and execution of costs on the Wright Laboratory WL/AAAF VAX/ 

4000 clustCT. Results include recommendations for future work: optimization for avionics’ 
funrtions by idratification, selection, and execution of test subsets appropriate to specific functions 
such as navigation, weapon delivery, and electronic warftre; modification of UNIX senpt files so 
that execution is completely automatic; confutation of averages and variabilities of test results and 
adding graphics to show companions of various Ada compilers. 

14. SUBJEa TERMS 

Ada compilers; software performance; Ada benchmark tests; PIWG tests 

15. NUMBER OF PAGES 

125 

18. PRICE CODE 

17. security classification 18. SECURITY CUSSIFICATION 19. SECURITY CLASSIFICATION 
, OF RETORT OF THIS RAGE OF ASSTRACT 

UNCLASSIFIED UNCLASSIFIED UNCLASSIFIED 

20. LIMITATION OF ABSTRACT 

UL 


NSN 7$40-01-280-5S00 Standard Form 298 (Rev 2-89) 

4 PfCKribM by bNii Sta Z]9-i( 

* M »-102 










TABLE OF CONTENTS 


Section ! - INTRODUCTION 


1. Badeground.1 

2. Purpose.1 

3. Assumptions. 1 

4. Fomoat Convoitions.2 

Section 2 - RUNNING PIWG ON A SUN WORKSTATION 

1. Step 1 - Set up the PIWG Directory.3 

2. Step 2 • Print the "readme" File. 3 

3. Step 3 - Copy "compile.ver" to "verdix.sh".3 

4. Step 4 - Modify "venlix.sh".3 

5. Step 5 - Install PIWG... 4 

6 . Step 6 - Select the Correct CPUJTIME.CLOCK Routine. 5 

7. Step 7 - Add Other Routines to the "sup" Subdirectory.5 

8 . Step 8 - Verify Contoits of Subdirectory "sup".6 

9. Step 9 - Executing the FIRST RUN Tests.6 

10. Step 10 - Executing the SECOND RUN Tests.8 

11. Step 11 - Executing the THIRD RUN Tests.8 

Section 3 - RUNNING PIWG ON THE AAAF VAX 

1. Step 1 - Read the PIWG Files to the VAX. 10 

2. Step 2 * Create the PIWG Directory.10 

3. Stq» 3 - Copy PIWG Files Into the Work Directory.10 

4. Step 4 - Go to the PIWG Subdirectory. 10 

5. Step 5 - Modify File "coiiq)ile.com".10 

6 . Step 6 - Rename file "vaxconfi.com".11 

7. Step 7 - Execute the PIWG Files.11 

8 . Step 8 - Modify File "zcompile.com" for SECOND RUN Tests.11 

9. Step 9 - Execute the SECOND RUN Tests.11 

10. Step 10 - Modify File "z2comp.com" for THIRD RUN Tests.12 

11. Step 11 - Execute the THIRD RUN Tests.12 

Section 4-SUMMARY 

1. Observations.13 

2. Recommendations.13 

References.15 


111 

































TABLE OF CONTENTS (Cont.) 


APPENDICES 

Appendix A - "READ.ME" File......16 

Appendix B - "VERDIX.'SH".24 

Appendix C - PIWG (First) Execution Tests Result Using SPARCAda on the SUN 

Workstation.40 

Appendix D - Script File for "SECOND RUN" PIWG Tests on the SUN Workstation.55 

Appendix E - PIWG "SECOND RUN" Results Using SPARCAda on the SUN 

Workstation.57 

Appendix F - Script File for "THIRD RUN" PIWG Tests on the SUN Workstation.59 

Appendix G - PIWG "THIRD RUN" Results Using SPARCAda on the SUN 

Workstation.63 

Appendix H - "COMPILE.COM" File.65 

Appendix 1 - PIWG (FIRST) Execution Test Results Using DEC Ada on the VAX 

Computer.69 

Appendix J - Command File for "SECOND RUN" PIWG Tests on the VAX 

Computer.103 

Appendix K - PIWG "SECOND RUN" Results Using DEC Ada on the VAX 

Computer.106 

Appendix L - Command File for "THIRD RUN" PIWG Tests on the VAX 

Computer.. I JI 

Appendix M - PIWG "THIRD RUN" Results Using DEC Ada on the VAX 

Computer.115 


iv 


















FOREWORD 


This technical report was prepared by Major Steven A. Davidson, USAF Reserves, as part 
of his 2-week active-duty tour at Wright Laboratory, Avionics Directorate, System Avionics 
Division, Avionics Logistics Branch (WL/AAAF), Wright-Patterson AFB, OH during the period 
7-18 June 1993. 

This report documents using the August 1,1990 version of the PIWG benchmark test suite 
on a SUN Workstation and the WL/AAAF VAX/4000 cluster. The intent of this report is to 
provide an easier access to PIWG benchmark test suite for researchers within the Government by 
providing a "hands-on" experience guide. 

The work was acccmipHshed under the Aeronautical Systems Center Air Force Reserves 
Project 93-451-LAB. 



V 




Section 1 

INTRODUCTION 


1. Backgronnd. 

In November 1984, the Association of Computing Machinery (ACM) Special Interest Group on 
Ada (SlGAda) PCTformance Issues Woricing Group (PIWG) was formed. PlWG's charter is to 
provide performance related information on Ada compilers to the Ada community. 

Acemdin^y, a PIWG team of volunteers created a suite of Ada benchmark test programs in 
1985 to serve as a performance measurement tool. Since that time, a new version of the PIWG 
suite has been produced every year by improving measurement techniques and by adding new 
test programs. The PIWG suite is freely available and is widely distributed. It has, therefore, 
bec(^ a performance measurement standard in the Ada community. [1] 

2. Purpose. 

The purpose of this paper is to provide an explicit, step-by-step worked-example of how to 
install and execute the August 1,1990 version of the PIWG suite. Section 2 describes how to do 
this on a SUN Workstation running under the UNIX operating system using the new SPARCAda 
compiler. Section 3 covers installation and execution of the PIWG suite on a Digital Equipment 
Corporation (DEC) VAX main frame computer. 

3. Assumptions. 

This paper makes die following assumptions: 

a. PIWG Suite. The August 1,1990 versions of the PIWG suite of benchmark test 
programs, associated script files, .COM files, and "readme** file are used in this report. 

b. UNIX Commands. The reader is not required to know the UNIX command language 
used on the SUN Workstation. Information to perform essential tasks to execute PIWG on the 
SUN Workstation is provided in Section 2. 

c. DEC Command Language (DCL). The reader is not required to know the DCL used on 
the VAX computer. Information to perform essential tasks to execute PIWG on the VAX 
computer is provided in Section 3. 

d. Ada Compilation System (acs). The .COM files from the PIWG distribution tape or 
bulletin board are written such that the Ada compiler, linker, and library are invoked by means 
of the VAX DCL utility "acs". This utility software must be available on the VAX machine 
being used to conqjile the PIWG suite. 


1 


e. Text File Editors. The reader is expected to be able to use a text editor to modify script 
files on the SUN Workstation and command files (.COM) on the VAX computer. For the VAX 
computer, screen editors such as EOT or the Language Sensitive Editor (LSE) are 
recommended. 

4. Format Convoitions. 

This paper will use the following format conventions to promote clarity and minimize confusion: 

a. Interactive Commands. Commands that are to be entered on the SUN Workstation or on 
a VAX terminal are indented and set apart from the supporting text by blank lines. Each 
command appears on a separate line. The end of the line implies the carriage return (RETURN) 
key is to be jvessed. 

b. File Names. File names and directory names discussed in the test will be enclosed within 
double^uote marks (example: "read.me”). 

c. Comments. In Section 2, comments associated with inputs required for script files will 
be preceded by two hyphens (—), per the Ada convention. Do not enter the hyphens or any text 
that follows on the same line. 


2 





Scctton 2 

RUNNING PIWG ON A SUN WORKSTATION* 


1. Step 1 - Set «p the PIWG Directory 

A separate subdirectory should be created on the SUN Workstation to contain the PIWG files. 
The subdirectory should be created in a partition that has sufficient memory for the PIWG 
source files and files created as a result of compiling and executing the PIWG files. For the 
SUN Workstation diat produced the PIWG results discussed in this report, the PIWG source files 
were read into the subdirectory: 

/home/corbeaux/davidson/8_l_90piwg 

The PIWG source files were initially in a single compressed file, "8_l_90piwg.tar.z". This file 
was uncompressed using the UNIX command: 

uncompress 8_l_9{)piwg,tar.z 

This produced the uncompressed file, "8_I_90piwg.tar", The separate PIWG files were 
extracted using the UNIX command: 

tar -xvf 8_I_90piwg.tar 

As a result, numerous PIWG files were produced in the subdirectory 

"/homc/corbeaux/davidson/8_l_90piwg", with the majority having the file extension of ".ada". 

2. Step 2 - Print the **rcad.nie" File. 

The file "read.mc" should be one of the files now available after completing Step 1. Print this 
file and read it carefully. It gives guidance on executing the PIWG benchmark tests. A copy of 
the "read.me" file is in Appendix A. The steps that follow refer to the text of this file. 

3 . Step 3 • Copy "compile.ver" to "verdix.sh" 

Copy file "compile.ver" into a new file, "verdix.sh", using the UNIX command: 
cp compile. VO* verdix.sh 

4. Step 4 - Modify "verdix.8li 

Files "compile.ver" and "verdix.idi" contain the Bourne shell script for building and executing 
PiWG files under UNIX. However, they also contains explanatory text at the 


3 





beginning and near die end of die file that must be removed before the file can be executed as a 
shell script. Use a text file editor to remove all lines of file "verdix.sh” prior to the first line of 
the shell script: 

#! /bin/sh 


Remove all lines after the last lines of the shell script: 

done 
cd $cur_wd 
done 

Save the modified file as file "verdix.sh". A copy of file "verdix.sh" is in Appendix B. 

5. StepS-lnstattPIWG 

Install PIWG on the SUN Workstation using the "verdix.sh” script file. First, check you are 
located in the proper directory by using the UNIX command: 

pwd 

The response, "/home/corbeaux/davidson/8_l_90piwg" should appear on the screen. Also check 
the "verdix.sh” file is in this subdirectory by using the UNIX command: 

Is verdix.sh 

The re^nse should echo back the file name, "verdix.sh”. Make appropriate corrections as 
necessary (or get help) before proceeding. Start execution of the script file by entering the 
UNIX command: 

sh verdix.sh 


ARer execution begins, the shell will ask for a series of inputs. Respond as follows for initial 
installation: 


1 ~ to select Install PIWG 
/home/corbeaux/davidson/8_ I _9()pi wg 

~ to enter path for desired Verdix PIWG location 
1 ~ for System V timing procedure 
1 — select Self-Target 


The "verdix.sh” shell will create new subdirectories for each of the various test groups that are 
described under the heading, "FIRST OF EXECUTION TESTS" in file "read.me" (sec 
Appendix A). These subdirectories are "a”, "b", "c", "d", "e", "f, "g”, ”h”, "1", "p", "t", and ”y". 
The shell will also create the subdirectory "sup” for the basic routines in the program library for 


4 



executioa timing tests. The shell will additionally create subdirectories "z" and "zother" for the 
"SECOND RUN" and THIRD RUN” tests, respectively, described in the "read.me" file. These 
are discussed later in Paragn^hs 10 and 11 in Section 2 of this report. 

The ^ell will rename all Ada files with an ”.a" extension (instead of the original ".ada" 
extension) and copy th«n into their qipropriate subdirectory. 

6. Stq» 6 • Select the Correct CPU_TIME_CLOCK Routine 

During the installation, "verdix.sh" will write "a000019.a" to subdirectory ”sup” if System*V is 
selected or "a0000I8.a” if VAX/UNIX or SUN3 UNIX is selected. No other options are 
available. Neither "aOOOOlS.a" nor "a000019.a" allow test "y000002.a" to execute correctly 
when run interactively. Test "y000002.a" is a check for CPU_TIME_CLOCK. As the 
"read.me" file indicates, "a000017a.a” is the correct routine to use with the Verdix Ada. Until 
the "ctmipiie.ver" file (and the resulting "verdix.sh” shell) is corrected, the user must copy the 
correct routine for CPU_TIME_CLOCK into subdirectory "sup" by doing the following: 

Starting in subdirectory "/home/corbeaux/davidson/8_l_90piwg", copy "a000017a.ada" into the 
"sup" subdirectory and rename it as "a000017a.a" by using the UNIX command; 

cp a000017a.ada ysup/a()00017a.a 

Go to die "sup" subdirectory: 

cdsup 

Remove file "a()00019.a" that was writtwi to subdirectory "sup" by the "verdix.sh" shell: 
rma000019.a 

Verify tiiat "a()00017a.a" replaced file "a()()0019.a" by listing the files in subdirectory "sup": 

Is 

Return to the next higher subdirectory, "/homc/corbeaux/davidson/8_l_90piwg" for proper 
execution of the remaining steps: 

7. Step 7 - Add Other Routines to the "sup" Subdirectory 

There are three other basic routines that MUST be added to the "sup" subdirectory for proper test 
execution. The "compile.ver" file ^ould be corrected so this will be done automatically during 
installation. Until the "compile.ver” file (and the resulting "verdix.sh" shell) is corrected, the 
user must copy and rename the these files manually by entering the following UNIX commands 
(while in subdirectory /home/corbeaux/davidson/8_l_90piwg); 

cp a00()047.ada ysup/a000047.a 


5 





q> a000048.ada ./sup/a000048.a 
qi» iK)OOOS 1 .ada 78up/a000051 .a 

8. Step 8 > Verify ContMits of Subdirectory "sup" 

Subdirectory "/home/corbeaux/davidson/8_l_90piwg/sup” should contain the following files as 
a result of completing Steps 5 through 7: 

GVAS.table 

aOOOOOKa 

a000017a.a 

a000021.a 

a000022.a 

a000031.a 

a000032.a 

a000041.a 

a000042.a 

a000047.a 

a000048.a 

aOOOOSl.a 

ada.lib 

gnrx.lib 

Although some additional files may be present (such as ”ada.lib%", etc.), it is important that the 
files "aOOOOl l.a" through "a000019.a'’ are NOT in subdirectory "sup", except for file 
"a000017a.a". Refer to Paragraph 1 of the "read.me" file (Appendix A), and the comments that 
accompany the listing of files in Paragraph 3 of the "read.me" file. 

9. Step 9 - Executing the FIRST RUN Tests 

Execute the PIWG files for the FIRST RUN as described in the "read.me" file by using the 
"verdix.sh" script file. First, check you are located in the proper directory by using the UNIX • 
conunand: 

pwd 

The re^nse, "/home/corbeaux/davidson/8_l_90piwg" should appear on the screen. Also check 
the "verdix.sh" file is in this subdirectory by using the UNIX command: 

Is verdix.sh 

The re^nse should echo back the file name, "verdix.sh". Make appropriate corrections as 
necessary (or get help) before proceeding. Start execution of the script file by entering the 
UNIX command; 

sh verdix.sh 


6 




After execmion begins, the shell will ask for a series of inputs. Respond as follows: 

3 — to run PIWG 

/hoine/corbeaux/davidson/8_l_90piwg 

>- to enter path for desired Verdix PIWG location 
y — to run test WITHOUT suppressed checking 
n —to say "no", support library is not compiled 
<CR> — choose the default for output to screen 
2 - choose tests by letter (test group letter) 

a — choose the "a" tests (only) 

<CR> — (blank line signals no more tests follow) 

The "verdix.sh" shell will immediately begin compiling, linking, and executing the tests 
selected. In this case, the test routines in Group "a", as described in the "read.me" file will be 
executed. For the first execution and after ANY changes to the files in subdirectory 
"hcme/corbeaux/davidson/8_l_9()piwg/sup", ALWAYS respond with "n" for "no" when asked if 
the suf^rt library is compiled. If you have any doubts, choose "n" in response to this question. 
If the library was previously compiled and "n" is selected, a lot of warning messages ("id hides * 
outer definition") will be generate. This will not adversely affect execution of PIWG. 

However, if ANY changes are made to the files in subdirectory 

"/homc/corbcaux/davidson/"8_l_9()piwg/sup" and the support library is NOT compiled by 
selecting "y" for "yes", results are unpredictable and errors are likely to occur. 

Output to the screen is selected because this allows one to verify that the PIWG tests are 
executing. However, it is also possible to get a hard copy of these results on paper for offline 
review and analysis. With the SUN Workstation, the screen output is stored in an output buffer 
file. Using the mouse, one can scroll back to the beginning of the screen output and, using block 
marking procedures, copy the PIWG output portion from the screen buffer file to a separate user 
file for subsequent printing. For details on how to do this, get help from someone experienced 
with using the SUN Workstation. 

When the "a" test group is executed, the last test in the group. Routine "a000095.a", expects to 
read the output from a script file as an input file to produce a compressed file of results. 1 could 
not get this to work but entering a carriage return causes an error, the program is abandoned, and 
execution stqps. (Routine "a()0()095" is not addressed in the "read.me" file; its purpose is 
unknown.) 

To run all tests of the PIWG, initiate execution of the script file again by entering the UNIX 
command: 

sh verdix.sh 

After execution begins, die shell will ask for a series of inputs. Respond in a similar manner as 
described for the previous example except choose "all tests" instead of "tests by letter". A copy 
of the results of choosing all tests is in Appendix C. 


7 








10. Step 10 - Executing the SECOND RUN Tests 


Execute the PIWG files for the SECOND RUN as described in the "read.me" file by using the 
"second" script file that was created during the installation of PIWG (Step 5 of this Section). 
Appendix D contains a copy of this script file. Move to the 
"/hoinc/corbeaux/davidson/8_l_90piwg/z" subdirectory from the 
"/home/corbeaux/davidson/8_l_90piwg" subdirectory by using the UNIX command: 

cdz 

Initiate execution of the script file by entering the UNIX command: 
sh second 

Results from the SECOND RUN are provided in Appendix V. As the results state, the 
difference between the start and stop wall times is the bench mark value of interest. Appendix V 
shows this bench mark value for the SUN Workstation running "SPARCAda" is (62140 > 61811 
329 seconds. 

11. Step 11 • Executing the THIRD RUN Tests 

Execute the PIWG files for the THIRD RUN as described In the "read.me" file by using the 
"third" script file that was created during installation of PIWG (Step 5 of this Section). 

Appendix contains a copy of this script file. Move up to the 
"/homc/corbeaux/davidson/8_l_90piwg" subdirectory from the 
"/home/corbeaux/davidson/8_l_9(^iwg/z" subdirectory by using the UNIX command; 

cd.. 

Move down to the "/homc/corbeaux/davidson/8_l_90piwg/zother"subdirectory by using the 
UNIX command: 

cdzother 

Initiate execution of the script file by entering die UNIX command: 
sh third 


8 









Results from the THIRD RUN are provided in Appendix VII. As the results state, the difference 
between the start and stop wall times are the bench marie values of interest. Appendix Vll shows 
these bench mark values for the SUN Workstation running "SPARCAda" are: 


compiling files 
separately 


compiling files at 
once in z000200.a 


Stop Wall Time 37681 seconds 
Start Wall Time 37159 seconds 
Total Time 522 seconds 

Stop Wall Time 38496 seconds 

Start Wall Time 37681 seconds 

Total Time 815 seconds 









Section 3 

RUNNING PIWG ON THE AAAF VAX 


1. Step ] • Read the PIWG Files to the VAX 

Read the August 1,1990 version of die PIWO files into a public directory that has read-only 
protection. Ask your VAX System Manager to create a public directory and read the PIWG files 
into it. The PIWG files were read into public directory $1$DIA1 :[PIWG] on the AAAF VAX. 

2. Step 2 - Oeate the PIWG Directory 

A separate subdirectory ^ould be created in the user's area to contain the PIWG files. The 
remaining steps in this ptqier for executing the PIWG files are based on the following directory 
and subdirectory structure. The top directory is [davidson] on Disk 9 ($1$01A9:). Of course, 
the reader's VAX account name would be substituted for "davidson" in all the commands 
presented in this paper. The woric subdirectory is set up by entering the VAX command: 

create/dir [davidson.piwg] 

Subdirectory [davidson.piwg] is the PIWG working directory. This is where all PIWG files are 
modified and executed. 

3. Step 3 - Copy PIWG Files Into the Work Directory 

Copy the PIWG files into your directory by entering the VAX command: 

copy $l$dial:[piwg]*.* $l$dia9:[davidson.piwg]*.* 

The above command is based on the public directory being located on Disk 1 ($1$DIAI). 

4. Step 4 - Go to the PIWG Subdirectory 

Move to the PIWG subdirectory before performing the remaining steps. Enter the VAX 
Command: 

set def [davidson.piwg] 

5. Stq> 5 - Modify FUe "compile.com" 

Using an ASCII text file editor, change the sixth line of this file from: 

$ SET DEF $1$DIA1:[PIWG] 


to: 


$ SET DEF $1$DIA9:[DAV1DS0N.PIWG] 


10 




6. Step 6 > Rename fBc "vaxconfLcom” 


Change the name of this file to agree wifii the file name q)ecified in the tenth line of the 
''conq>ile.com" file: 

$@VAXCONFIG 

Enter the VAX Cmnmand: 

rename vaxconfi.ccnn vaxconfig.com 

(Alternately, the tenth line of the "compile.com" file could be modified to agree with the file 
name "vaxconfi.com".) 

7. Stq» 7 - Excente the PIWG Files 

Submit file "compile.com" as a batch job to prevent the terminal from being unusable during the 
rather long execution time (about 20 minutes) and to have the output written to a file, 
"piwg.log". Appendix VIII is a copy of the "compile.com" file after the appropriate 
modification were made. Enter the following VAX command: 

submit/notify/log.file-[davidson.piwg]piwg.log compile.com 

Print the resulting file "piwg.log" and review it. A copy of the PIWG results on the VAX is in 
Appendix A. 

8. Step 8 > Modify File **zcompile.com'' for SECOND RUN Tests 

File "zcompile.com" is provided on the distribution tape and can be used to execute the 
SECOND RUN tests (d^ribed in the "read.me" file) on the VAX conq)uter. Prior to using this 
command file, the "$ SET DEF" line must be modified, as was done in Step S for the 
"ccrnipile.com" file. Change the third line from: 

$ SET DEF $ 1$D1A1 :[PIWG] 


to: 


$ SET DEF $1$DIA9:[DAVIDS0N.PIWG] 

9. Step 9 • Exccote the SECOND RUN Tests 

Submit file "zcompile.com” as a batch job to have the output written to a file, "run2.log". 
Appendix X is a copy of die "zcompile.com" file after the modification in Step 8 was completed. 
Enter the following VAX command: 


11 







wbfiitt/iiotify/log^file^davtd8on.piwg]ruii2.1og zcon^ile.com 


Print the rerahing file "run2.log" and review it. A copy of • 
the SECOND RUN results on the VAX is in A]^)endix XI. 

!•. Stq» 10 - Modify File'*z2conip.coai'* for THIRD RUN Tests 

File ''z2con)p.com'' is provided on the distribution tape and can be used to execute the THIRD 
RUN tests (described in the "read-me" file) on die VAX computer. Prior to using this command 
file, the ”$ SET DEP line must be modified, as was done in Step 5 for the "conqiile.com" file. 
Change die third line from: 

$ SET DEF $I$DIAI:[PIWG] 


to: 

$ SET DEF $I$DIA9:PAV1DS0N.PIWG] 

11. Step 11* Execnte the THIRO RUN Tests 

Submit file "zlcomp.com" as a batch job to have the output written to a file, "runB.log”. 
Appendix XII is a copy of the "zlcomp.com" file after the modification in Step 8 was 
conqileted. Enter the following VAX command: 

submit/notify/log_file*[davidson.piwg]run3.l<^ z2comp.com 

Print the resulting file "runS.Iog” and review it. A cq>y of the THIRD RUN results on the VAX 
is in Appendix XIll. 


12 







Section 4 
SUMMARY 


1. Obicrvitiont 

The PIWG oommuid files for die DEC VAX con^uter are very easy to use. They only require 
a simple change to spedfy the q^iropriate directory in the user’s account. The one error I found 
concerning "vaxconfig.com" file (see Section 3, Step 6) is non-fatal but should be corrected so 
that test results will always include useful information about the VAX machine and version of 
DEC Ada being used. 

The PIWG UNIX script files for the SUN Workstation (or other UNIX-based computers) need 
improvement. The user must manually perform many file manipulations prior to running the 
script file to obtain useful results. 

A brief comparison of the PIWG (FIRST) Execution Tests between the VAX and the SUN 
Workstation shows that many more test results are available for the VAX version of PIWG 
(printed on 41 pages in Appendix A) than for the SUN version (printed on 16 pages in Appendix 
C). A comparison of CPU times for the PIWG tests performed by both machines shows the 
SUN Workstation is much faster than the VAX...more than 9 times faster for some tests! 

The SECOND RUN test is a compile time benchmark. As the script file comments state, it is 
meaningful only when run with no other tasks on the machine. Consequently, the result of 329 
seconds for the SUN Workstation (see Section 2, Step 10) is meaningful but the value of 966 
seconds (4244S • 41479) for the VAX (see .^qiendix XI) is not reliable because the VAX was 
always <^)erating as a time-riMre machine wiA multiple users when the PIWG tests were done. 
The SECOND RUN results for the VAX are provid^ only to show the format of the results. 

This same observation applies to the THIRD RUN tests. However, Section 2, Step 11, shows 
that k b lEMler for the SUN Woricstation to compile programs in separate files (522 seconds) 
than to compile the same number of {nx>grams luiiq;>ed together in a single file (815 seconds). 

2. Rcconmeadations 

This pqwr can serve as a starting point for additional projects. Some examples are as follows: 

a. Determine which PIWG tests are most important for Air Force avionic ^plications. 
PIWG avionic tests should be further subdivided into navigation, flight control, weapon 
delivery, or electronic countermeasure tests, for exaiiq>le. Write modified UNIX script files or 
VAX command files that execute a subset of PIWG tests for a q)ecific application, lliese 
modified script files could help the user focus a PIWG evaluation on problems most important to 
the Air Force. 

b. Improve tiw UNIX script filer so that execution is conqrletely automatic; no manual file 
manipulations are necessary. 


13 






c. Perform imiltiple PIWG runs on a single machine and compute averages and variations 
of teals results. 

d. Perftmn PIWG runs on different machines and do a detailed ctmqMiison of the test 
results between the machines. Show these differences graphically on charts. 


14 






Refcreaccs 


I. "A Rationale fw the Design and In^ilementation of Ada Benchmark Programs," AHa i .Mters 
Special Edition (Association for Computing Machinery, Inc., 11 West 42nd Street, New York, 
N.Y. 10036), Vedume X, Nundier 3, Winter 1990. 


15 






APPENDIX A 

**READ.M£'* FILE 


16 





APPENDIX A 
READ ME FILE 


README 

There ere tinee conq>lete runs to be made on each con^uter/compiler combination. The first run 
makes execution performance mouurements on Ada features and composite benchmarks. The 
second nm nukes a composite compile q)eed measurement including linking and execution. 

The third run conqtiles about 100 files the SIGAda programming contest winner, then 
oon^iles the same source code again as one file. 

Pot your convenience, scripts are |»t>vided for several computer/compiler combinations. The 
aoripts are needed beouuse there are multiple bodies for some of the Ada package specifications. 

DO NOT USE A " MAKE " ON THE ENTIRE DIRECTORY !!! 

DO NOT USE " SUPPRESS " except where indicated!!! 

A output from all three runs is shown in SAMPLE.OUT. Sample log files are shown as 


FIRST RUN 

The first run is typified by COMPILE.COM (VAX), COMPILE.CLI (ROLM/Data General) or 
COMP1LE.BAT (PC conq>atibles). 

COMPILE. VER (Verdix on UNIX). If necessary, build a script from one of these for your 
computer/compiler. The script is intended to compile a selection of the Ada source, link them 
into one or mote executable programs, and then execute the tests and print a report. Please send 
PIWG the minimum repeatable execution times. Execute tests individually if tunes differ 
significantly frmn executing the combined tests. In order for tests to fit on some embedded 
computers, every test nnist m linked and downloaded sroarately. AEMBEDDED.COM along 
with L1NKD.COM is a sample script for preparing absolute images for down loading. (These 
must be tailored for each hoWcompilerAi^et). For embedded computers, executions must be 
on real hardware. These measurements are not suitable for simulators. COPY.RAT may help 
selecting the fries for the Rational RIOOO. 

If running on a PC, get rid of the .COM files. They will cause the PC to hang if you try to use a 
.BAT file of the same name. Various .BAT files are provided to compile, link and execute each 
test individually. 

Generally, conmilation order is alphabetical, but DO NOT COMPILE EVERYTHING. There 
are a number of choices to be made depending on the computer/compiler being used. 

The test suite is designed for running with the predefined type INTEGER being 32 bits. The 
Uniformity R^tporteur Group, URG, Uniformity Issue, Ul-OOOS, states in part that an 
implementation riiould have a mode of operation in which INTEGER'LAST >= 2**31-1. Most 
tots will work with 16 bits for type INTEGER. Only a few tests will fail, turn in results even if 
stmie tests fail. A few tests are quite large. Turn in results even if these large tests do not 
compile or execute. 

Most tests do not include TEXT JO. In an embedded computer that, for some reason, can not 
handle TEXTJO, do not run the "G" tests. Remove "with TEXTJO" and calls on PUT. Try 
somedting to be sure the code to be measured is not optimized away. This applies to tests: 


17 



APPENDIX A 
READ.ME FILE 


A 


t • • •»•*• 


A000091, A000092. A000093, BOOOOlO, YOOOOOl. 


1. Choose one of AOOOOl 1 throu^ A00(X)19 for CPU_TIME_CLOCK. This is 
collqHlter/openriI^{ system depen^t. AOOOOi 1 gets only WALL time via the package 
CALENDAR. We h^ all conq^ilers can do better than this. A tailored version that gives 
belter accuracy is altowed. Pleaw send an electronic copy in with your results. 

2. Choose one of A000042 through A000044 for PIWG.IO body. A000042 produces printout 
as it rans (only one san^tle per run). Please direct die printout to disk and send in an 
electitmic cc^y, that have no TEXT_IO. (Some editing will be required.) 

3. Choose from making each {Hocedure A000090 through Y000003 a main program, or using 
AOOOlOO as a single main program with A000042, or using AOOOIOI and ACK)0102 as a pair of 
smaller main projpams, or using a script like AEh^EDDED.COM, or C0MP1LE.BAT with 
each test as an inmvidual main program. 


The first group of files below establishes the basic routines in the program library for the 
execution timing tests. The complete test suite can be compiled, hnk^ and run from one 
library. All files are of the form NAME.TYP with TYP being ADA for all Ada source 
files. 


ADA AOOOOOl DlJRATION_IO instantiation 


ADA AOOOOI I 
ADA A000012 
ADA AOOOOI3 
ADA AOOOOId 
ADA A0000I4A 
ADAAOOOOIS 
ADA A000016 
ADAA000017 
ADA AOOOOI7A 
ADAAOOOOIS 
ADA A000019 
ADAA00002I 
ADA A000022 
ADAA000031 
ADA A000032 
ADA A000041 


(manufacturers should help) 
worked on Gould HZ»60 
UNIX with HZ-100 


CPU_TIME_CLOCK.ADA 
CPUjriME_CLOCK.VAX 
CPUjnME^CLC)CK.DG 
cpu«time.clock:.unix 

CPUjnME.CLC)CK.UNlX 

cpu_time«clock.riooo 
CPU jnME_CLOCK.ULTRIX 
CPU_T1ME_CL0CK.UNIX worked on SUN 
CPU_TIME_CL0CK.UN1X Verdix 
CPU_TIME_CLC)CK.Meridian 
CPU_TIME_CLOCK.RR Janus 


PICK ONE from this set or do your own 


BREAK 

BREAK 

ITERATION 

ITERATION 

PIWGJO 


optimization control package spec 
optimization control package body 
Iteration control package spec 
Iteration control package body 
output package spec (universal) 


PICK ONE from group below: 


ADAA000042 PIWGJO 
ADAA000044 PIWGJO 

ADAA000()47 PIWGJTIMERJJENERIC 
ADAA000048 P1WG_TIMER^GENER1C 


package body for screen/printer output 

package body for save in memory, no 

TEXTJO 

^>ec 

body 


THE A000051 ..A000055 ARE FOR THE HOST ONLY! Do not compile these for an 
embedded «tecution target. 


ADAA000051 AOOOOSl 


mecutable procedure to print WALL and 


18 





APPENDIX A 
READ ME FILE 


ADA AOOOOS2 A000052 

ADA A000053 A000053 

ADA A000054 A000054 

ADA A000055 A000055 

ADA A00009S A00009S 

ADA A000098 


ADA A000099 

ADA AOOOlOO AOOOlOO 


ADAAOOOIOI 

ADA A000102 

FIRST OF EXECUTION TESTS 

ADA A000090 

ADAA000091 
ADA A000092 

ADA A000093 

ADA A000094A..K 

This group of tests measures a tracker algorithm. 


CPU time (only for HOST, not embedded 
target) 

A set of 4 executable procedures that 
can be used to measure CPU and Wall time 
without instrumenting the run beuin 
measured. Place optional control between 
A000052 and A000053. Place test being 
measured between A0000S4 and A0000S5. 

A program to read a log file from 
C<3 mP 1LE.* and produce a compact listing 
PIWGTBL. 

This is a skeleton procedure that can be 
copied and edited to construct more tests 
that have multiple parts or multiple copies 
of the same test. DO NOT COMPILE 
THIS. It is for editing to make more tests. 

This is a skeleton procedure that can be 
copied and edited to construct more tests. 
DO NOT COMPILE THIS. It is for 
editing to make more tests. 

This is a top level procedure that calls all the 
other executable timing tests. It is useful if 
there is a "MAKE" facility available. (This 
may be too big to execute on many 
computers. Tests may be run individually 
or this may be split into smaller sets.) 

This and A000102 are A(X)0100 split in two 
pieces. It includes tests A000090 .. 000004. 

This and AOOOIOI are AOOOlOO split in two 
pieces. It includes tests EOOOOOl .. 000001. 
Split up groups of tests as necessary to get 
them run. 


Measure clock resolution by second 

differences 

DHRYSTONE 

WHETSTONE using manufacturers math 
routines (must edit) 

'VHETSTONE using standard Ada math 
routines 

HENNESY benchmarks 


19 



APPENDIX A 
READ.ME FILE 

ADA BOOOOOl A 

ADA BOOOOOIB Use pragpia SUPPRESS or NOCHECK or 

other switch 

ADA B000002A 

ADAB000002B Use pra^ SUPPRESS or NOCHECK or 

other switch 

ADA B000003A 

ADAB000003B Use pragpa SUPPRESS or NOCHECK or 

other switch 

ADA B000004A 

ADA B000004B Use pra^a SUPPRESS or NOCHECK or 

other switch 

ADA BOOOOIO 
ADA BOOOOl 1 
ADA B000013 

Hits group of tests measures task creation related timing. 

ADA COOOOOl 
ADA C000002 
ADA C000003 

This group of tests measures dynamic elaboration related timing. 

ADA DOOOOOl 

ADA D000002 These may not run on some targets. DO 

NOT CHANGE THEM 

ADA DOOO(X)3 
ADAD000004 

This group of tests measures exception related timing. 

ADA EOOOOOI 
ADA E000002 
ADA E000003 
ADAE000004 
ADAE000005 

This group of tests measures coding style related timing. 

ADA FOOOOO! 

ADA F000002 

This group of tests measures TEXT JO related timing. 

ADAGOOOOOl 

ADA G000002 SOME MAY NOT RUN ON SOME 

TARGETS. 

ADAG000003 
ADA G000004 
ADA G000005 
ADAG000006 
ADA G000007 


20 




APPENDIX A 
READ ME FILE 


This group of tests measures chapter 13 related features. 

ADAHOOOOOI 
ADA H000002 
ADA H000003 
ADA H000004 
ADA H000005 
ADAH000006 
ADA H000007 
ADA H000008 
ADAH000009 

This group of tests measures loop overhead related timing. 

ADA LOOOOOl 
ADA L000002 
ADA L000003 
ADAL000004 
ADA LOOOOOS 

This group of tests measures procedure call related timing. 

ADA POOOOOl 
ADAP000002 
ADAP000003 
ADAP000004 
ADA P000005 
ADAP000006 
ADA P000007 
ADA POOOOlO 
ADAPOOOOll 
ADAP000012 
ADA P000013 

This group of tests measures task related timing. 

ADA TOOOOOl 
ADAT000002 
ADA T000003 
ADAT000004 
ADA T000005 
ADA T000006 
ADA T000007 

ADATOOOOOS 

This group of tests measures delay related timing. 

ADA YOOOOOl 
ADA Y000002 


This is a check on TOOOOOl that only works 
on some machines 


21 


This takes several minutes to run 
Run interactively to check 
CPU_TIME_CLOCK 











APPENDIX A 
READ ME FILE 

ADA Y000003 run interactively to check 

CALENDAR.CLOCK 

The file COMPILE.COM is a sample script that compiles and runs the above tests when the host 
computer is also the target. Commercial computers, software engineering workstations 

The file COMPILE.CLl is a sample script for Data General MV series for above. 

The file COMPILE.VER is a sample script for Verdix compiler on Unix. 

The file COMPILE.BAT is a sample script for a PC. It has associated files COMP.BAT and 
RUN.BAT that may need modification. COMPLMER.BAT is tailored for Meridian on a PC 

The file AEMBEDDED.COM is a sample script that compiles the above tests for later execution 
on an embedded computer. 

SECOND RUN 

This is a composite compile time measurement. 

The second run is typified by ZCOMPILE.COM (VAX) or ZCOMPILE.CLI (ROLM/Data 
General) or ZCOMPILE.BAT (PC compatibles). Build the necessary script from one of these 
for your computer/compiler. This script provides one compilation time measurement for the time 
to compile, link and execute two programs. The execution time is very small compared to 
compile time. The "execution" for this run can be performed on a simulator (the simulation time 
is not counted as part of the total time) 


The "Z" tests are for measuring compilation time using A000051. A000052 .. A000055 do a 
calibration and differencing. Tlie execution part of this test may be omitted, but use it for 
checking to see that executable code was produced and that it will execute properly. 

The files, ZOOOOOI through Z000023 are all part of one test, see sample script 
ZC0MP1LE.COM. See ZC0MPILE.CL1, ZCOMPILE.BAT for other sample scripts. 
ZC0MP1LE.LOG is a sample output. 

Compile these files as given. Do not combine in one bra file. We have data on these 
compilations from I9M. We want to be able to plot a fwe year industry trend. DONT 


CHANGE THE TESTS. 

RUN A000051 

RUN 

RUN 

AOOOOSl 

AOOOOSl 

! calibrate time to measure time 

ADA 

ZOOOOOI 

IFLTIO 

ADA 

Z000002 

IREFUNCT 

ADA 

Z000003 

IPREAL 

ADA 

Z000004 

! PUBASIC 

ADA 

zooms 

IPUMECH 

ADA 

Z000006 

! PUELEC 

ADA 

Z000007 

!PUOTHER 

ADA 

Z000008 

! MKSPMECH 

ADA 

Z000009 

! MKSPELEC 

ADA 

ZOOOOlO 

! PCONSTANT 


22 







APPENDIX A 
READ ME FILE 

ADA ZOOOOll tPUOBASIC 

ADA Z000012 ! PUOMECH 

ADA Z0000I3 ! PUOELEC 

ADA Z000014 ! PCCONST 

ADA Z0000I5 ! PUCONV 

ADA Z0000I6 IPUCMKSspec 

ADA Z000016A ! PUCMKS body (rather large) 

ADA Z000017 ! PUCENGL spec 

ADA Z000017A ! PUCENGL body (rather large) 

ADA Z000018 ! PHYSICS 1 

LINK Z000018 ! the linking time is part of the test time 

RUN Z000018 ! very short, just check to be sure it really runs 

! the timing of this is not counted for an embedded computers 
! it should M run just to be sum it was really compiled 
ADA Z0QO02Q ! GENPREAL 

ADA Z00002I ! ALLSTMT 

ADA Z000022 ! GENSORTSH 

ADA Z000023 ! GENSHELLI 

LINK Z000023 ! the linking time is part of the test time 

RUN Z000023 ! very short, just check to be sure it really runs 

! the timing of this is not counted for an embedded computers 
! it should be run just to be sure it was really compiled 
RUN AOOOOSI ! final time measurement 

! when this test can be run with no other tasks running, it 
! represents a composite software development benchmark 

THIRD RUN 

This is a compmson of compilation snjeed using each compilation unit in its own file vs. all 
compilation units in one large file. The files are from the winner of the SIGAda progranuning 
contest. This may represent a sa^Ie of a small real time program. The programming style 
may be consider^ COP. There is heavy usage of "is separate". 

RUN A000051 ! initial wall time 

ADA ZOOOlOO 
ADA ZOOOlOl 

102 files including 106A and I06B 

ADA Z0(X)I99 

RUN A000051 ! final wall time, compute difference and report 

RUN AOOOOSI ! initial wall time 
ADA Z000200 ! this includes all files ZOOOlOO.. Z000199 

RUN A000051 ! final wall time, compute difference and report 

PLEASE use common sense in analyzing results. 


23 






APPENDIX 


"VERDDLSH” 


B 


FILE 


24 










APPENDIX B 
“VERDK.Sir FILE 


#1 /bin/sh 

# veiidix.run -* Bourne shell script for building snd executing PIWGs under UNIX. 

n-'-n’ 

c^’ 

contains^'echo "Ctnitains Nc" | grep c' 
case Scmitains in 
"") n-"";; 

*) c*"";; 

esac 

TRUE-1 

echo This is the Verdix PIWG execution shell file. This file will do the following: Copy the" 
echo "tests into separate sub-directories, with the .a suffix. Select and compile the appropriate" 
echo "A files for subsequent test execution. Allow you to select the host-target combination" 
echo "that you wish to test. Allow you to run selected tests, or the entire suite.” 
echo"" 

while [$TRUE] 
do 

echo "Which operation do you wish to perform:" 

echo "1) Install PIWG's for Verdix execution" 

edio "(This will need to copy all test files to a new location)" 

echo "2) Modify tests to use Verdix-Specific Pragmas” 

echo "3) Run PIWG’s" 

echo"" 

echo $n "Enter choice: $c" 
readoption 
case $^on in 
[1-3]) break;; 

*) echo "valid choices are 1,2, and 3"; echo "";; 
esac 

done 

echo "Enter Path to Desired Verdix PIWG Location" 

echo $n "path: $c” 

readpbd 

foo-'echo $pbd | wc -w" 
if [$foo-0] 
then 
pbd-’.’ 

elif [! -d $pbd] 
then 

mkdir $pbd 
fi 

cur_wd"'pwd 
if[$(q>tion- 1] 
then 


23 



APPENDDCB 
“VERDIXSH" FILE 

echo"" 

echo "You now need to select the host-target combination that you will use. This 
echo "selection will determine the timing support routine selected. If you are going to" 
echo "run on a cross-target, you will need to perform rather substantial installation and" 
edio "configuration ptocedi^ to nin the mite. Please refer to the VADS manual" 
echo "under Installation and Maintenance* and 'Getting Started'." 
while [STRUE] 
do 

echo"" 

echo "Choices for timing im>cedure:” 

echo " 1 - System V" 

echo" 2-VAX/UNIX" 

echo" 3-Sun3UNIX" 

echo " 4 - Suii3 Cross to 68020" 

echo " q - Quit and Exit" 

echo"" 

echo $n "Enter Choice: $c" 
read choice 
case Schoice in 
[1-4]) break;; 

[qQ]) exit;; 

*) echo edio "Valid choices are 1-4"; echo ""; continue;; 

esac 

done 

if [! -dSpbd/sup] 
dien 

if [ $choice*4] 
then 

echo "You need to enter the path to die user configuration directory. If you" 
echo "have not created and configured this directory, then you are not ready to" 
echo "run the mite. Conmit the VADS manual under 'Installation and" 
echo "Maintenance'." 
echo "" 

echo $n "User Config Dir: $c" 
read confjdir 

conf^'echo Sconfjdir | wc -w* 
if [$conf-0 
then 

echo "Please re-run the script later when this directory is available." 
exit 
else 

cd Sconfjdir 

option*'grep 'OPTIONSrlNFO' ada.lib 1 wc -w' 

Iblock-'grep XINK^LOCK’ ada.lib | wc -w' 
if [Soption -eq 0 -o Slblock -eq 0] 
then 


26 









APFCNDIXB 

-VBRDDtSirnLE 

ecKo "Your user configuration library does not have all of the elements" 
echo "necessary to run the suite using diis script. It needs to have a" 
echo "LINKJBLOCK directive as well as a linker options file. This" 
echo "directive as well as a linker options file. This script is set up to" 
echo "run die tests (» a cross target assuming that these directives are" 
edio "available in that library. Refer to the VADS manual for" 
edio "information <m what these are, and how to create them." 
fi 

cd Scur.wd 
fi 

a.mklib $pbd/sup $c(mf_dir 
else 

a.inklib -i $pbd/sup 
fi 

pathlist-'grep ADAPATH $pbd/sup/ada.lib' 
standar^'echo Spathlist | awk'{ n^]it($0,a," ”); 

for (i*n;i>0;i—) print a[i]r | grep "standiud"' 
vadsJoc*'echo Sstindard | sed -n T,$sx/standardxxg>' 
if[$dKHce«4] 
then 

cd$pbd/sup 

a.path -a $vadsJoc/ax>saJo 
cd $vadsJoc 
cdSpbd/sup 

hw.chk*'echo Svadsjoc | grep 688811 wc 'W' 
echo Shwjchk 
if [Shwjdik » 0] 
then 

echo "It is probable diat test A000092 will not compile," 
echo " because a non-hardware version of AT AN is not" 
echo "provided. If you wish to run this test, you will need to" 
echo "provide diis Action." 
echo"" 
else 

cat > math.a << -endmath 

package MATH is 

— Math interfaces to MATH for use with A00092.a in PIWG 

function SIN (X: FLOAT) return FLOAT; 
function COS (X: FLOAT) return FLOAT; 
function ATAN (X: FLOAT) return FLOAT; 
function SQRT (X: FLOAT) return FLOAT; 
function EXP (X: FLOAT) return FLOAT; 
function LOGIO (X: FLOAT) return FLOAT; 
function LOG (X: FLOAT) return FLOAT; 


27 







APreNDDCB 
‘VERDIX.Sir FILE 


pragmt INLINE(S1N. COS, ATAN, SQRT, EXP, LOG 10. LOG); 
end MATH; 

with MACH1NE.CODE; 
package body MATH is 

- use co p roce s sor instructions to perform q)entions 

FL0AT_S1ZE: constant :• 64; 

SIZE_ASSERT10N_fRROR: exception; 

procedure S1N.68881(X: in FLOAT; RESULT: out FLOAT) is 

useMACHlNE.CODE; 

begin 

code_2’ (FMOVEJ), XHEF, FPO); 
codeJ'(FSIN.D,FP0); 
codc^ (FMOVEJ), FPO. RESULTREF); 
end S1N.68881; 

procedure COS_68881(X: in FLOAT; RESULT: out FLOAT) is 
u8eMACHINE.CODE; 
begin 

codej' (FMOVE^D, XTIEF, FPO); 
codeJ'(FCOSJ).FPO); 
codej’ (FMOVE^D, FPO, RESULTREF); 
endCOS.68881; 

{vocedure ATAN_6888I (X: in FLOAT; RESULT: out FLOAT) is 
useMACHlNE.CODE; 

bejpn 

codej’ (FMOVEJ), X*REF, FPO); 
codej* (FATANJ), FPO); 
codej’ (FMOVE_D. FPO, RESULTREF); 
end ATAN.6888I; 

procedure SQRT_68881 (X: in FLOAT; RESULT; out FLOAT) is 
use MACHINE.CODE; 
begin 


28 






AFPENDKB 

-VERDiX-SITFILE 


codc^ (FMOVEJD, XTUEF, FPO); 
oodeJ’(FSORTJD,FPO); 
code^’ (FMOVEJ5, FPO, RESULTREF); 
end SQRT_68881; 

procedure ETOX_68S81(X: in FLOAT; RESULT: out FLOAT) is 
iiseMACHINE.CODE; 
begin 

code^ (FMOVE_D, XTIEF, FPO); 
codeJ'(FETOX_D,FPO); 
oodc_^* (FMOVE_D, FPO, RESULTREF); 
endETOX.68881; 

procedure LOG1 Ql 68881(X : in FLOAT; RESULT: out FLOAT) is 
use MACH1NE.CODE; 


begin 

code_^’ (FMOVEJ>, XTIEF, FPO); 
code.l* (FLOG10_D, FPO); 
codc^’ (FMOVE_D, FPO, RESULTREF); 
end LOG 10.68881; 

procedure LOGN.68881 (X: in FLOAT; RESULT: out FLOAT) is 
use MACHINE.CODE; 
begin 

code.^’ (FMOVE.D, XTIEF, FPO); 
code.r (FLOGNJ), FPO); 
code^' (FMOVE_D, FPO, RESULTREF); 
end LOGN_68881; 

pragma INLINE (SIN.68881, COS_68881, ATAN_68881, SQRT.68881. ETOX.68881); 
pragma INLINE (LOG10_68881, LOGN_68881); 

function SIN (X: FLOAT) return FLOAT is 

RESULT: FLOAT; 

begin 

SIN.68881 (X RESULT); 
return RESULT; 
end SIN; 


29 




APPENDIX B 
'VERDIX.SH” FILE 


jfunclioii COS (X: FLOAT) return FLOAT » 
RESULT: FLOAT; 
begin 

COS.6888I (X. RESULT); 
return RESULT; 
end COS; 

function ATAN (X: FLOAT) return FLOAT is 
RESULT: FLOAT; 
begin 

ATAN_6888I (X. RESULT); 
return RESULT; 
end ATAN; 

function SQRT (X: FLOAT) return FLOAT is 
RESULT: FLOAT; 
begin 

SQRT_68881 (X RESULT); 
return RESULT; 
end SQRT; 

function EXP (X: FLOAT) return FLOAT is 
RESULT: FLOAT; 
begin 

ETOX_68881(X RESULT); 
return RESULT; 
end EXP; 

function LOGIO (X: FLOAT) return FLOAT is 
RESULT: FLOAT; 
begin 

LOGI0.68881 (X RESULT); 
return RESULT; 
end LOGIO; 


30 




APPENDIXB 
“VERDIX-Sir FILE 


ftmctioii LOG(X: FLOAT) return FLOAT is 
RESULT: FLOAT; 
begin 

LOGN_68881 (X. RESULT); 
return RESULT; 
end LOG; 

b^n 

if FLOATSIZE /- FLOAT.SIZE then raise SIZE_ASSERTION_ERROR; end if; 
end MATH; 

-cndmalh 

fi 

cd$cur_wd 

fi 

list-laA]000001.a* [aA)000021.a* [aA]000022.a* 

[aA)00003l.a* [aA]000032.a* [aA1000041.a* [aA]000042.a*’ 
for X in $iist 
do 

y*'echo $x | sed -n 'l,$s/.ada/.a/gp'' 
q> $x $pbd/sup/$y 
done 
else 

echo "siq> directory already present - no files copied" 
fi 

if [$dioice’= I] 
dien 

cat > $pbd/sup/a0000i9.a « -endtime 

~ This function returns the user time on a Unix system by interfacing to the c library to access - 
~ the tiroes routine 

with system; 

function CPUJTIME.CLOCK return DURATION is 

~ ticks per second of die clock: from /us’/include/sys/param.h 
HZ: constant100 

— time in ticks: from/U8r/inchide/sy8/types.h 
type TIMEJT is new INTEGER; 

— structure fille d in by times(): from ^s^/include/sys/times.h 
type TMS_,STRUCT is record 
TMS.UTIME : TIME T; 

TMS_STIME : TIME T; 

TMS^CUTIME: TIME.T; 

TMS_CSTIME: TIME.T; 


31 



APPENDIXB 
‘VBRDIX.SH” FILE 


endiecord; 

TIME^UF: TMS_STRUCT; 
procedure TIMES (T1ME.BUF: SYSTEM.ADDRESS); 
pragma INTERFACE (C.TIMES); 
beipii 

TIMES (TIME_BUFADDRESS); 

return DURATlON(DURATION (TIME3UF.TMS_imME)/HZ); 
end CPU_T1ME_CL0CK; 

~ eniftime 
fi 

if [Schoice * 2 -o Schoice * 3] 
then 

cat > $pbd/sup/a000018.a « ~ endtime 
function CPU.T1ME_CL0CK 
return DURATION; 

with System; 

package Unix.Resources is 

type timeval is 
record 

sec; integer, 
usee: integer, 

Old record; — timeval 

type rusage is 
record 

rujutime: timeval; ~ user mode time 

ru_stime: timeval; — system mode time 

ru_vaiiu:ss: integer, — max resident set (kbytes) 

rujsrss: integer, — memory shared with others (kbytes *seconds) 

rujdrss: integer, ~ unduued in memory (kbytes * seconds) 

rujminfit: integer, — page faults serviced w/o 10 

ru_majflt: integer, — page faults serviced with 10 

ru.nswp: integer; — number of times swapped out 

ru JnMock: integer, — times of file system input 

ru_outb)ock: integer, — times of file system output 

ru.msgsnd; integer; —numberof ipcmessages sent 

ru_insgrcv: integer; — number of ipc messages received 

rujnsignals: int^er, — number of signals delivered 

ru.nvcsw: integer, — number of times context switch due to process surrendering 

— the CPU before timeout 

nijnivcsw: integer, — number of times context switch due to process timing out 

— (or higher becomes eligible) 

end record; — rusage 


32 




APPENDIX B 
“VERDIXSJTFILE 


SELF: coiumuit int^er :* 0; 

CHILDREN: constant integer -1; 

{MTOoedure getrusage (i^o: integer; 

nisage.buf: SyMem.address); 
pragma interface (C, getrusage); 

Old Unix^Resources; 

with Unix.Reaources; 
function CPU_TIME_CLOCK 
return DURATION 
is 

rusage.buffer: Unix.Resources.rusage; 
prcMems: exception; 
seconds: float; 
useconds; float; 

begin 

Unix_Resources.getrusage(UnixJResource8.SELF, rusage.bufTer'address); 
seconds:«float(rusage_bufiw.ru_utiine.sec + rusage_buffer.ru_stime.sec); 
useconds:« float(ru8age_buffa'.ru_utime.usec + rusage_buffer.ru_8time.usec); 
return durationf seconds + (useconds /1000000.0)); 
end CPU_TlME_CLOCK; 

— endtime 
fi 

if [$choice*4] 
then 

x-[aA]000011.a* 

y*'echo $x | sed -n 'l,$s/.ada/.a/gp'' 
cp $x $pbd/sup/$y 
fi 

if[-rA*.a*] 

then 

list-’A BCDEFGHLPTYZ’ 
else 

list“’a bcdefghlptyz' 
fi 

echo "Copying tests and changing names (will tskc a while)..." 
for X in $list 
do 

if[!-d$pbd/$x] 

then 

a.mklib $pbd/Sx $pbd/sup 
cd $pbd/$x 

# insert any extra a.path or a.info directives here, multiplexed 

# for release based on dioice 


33 




APPENDIX B 
■VERDDCSHT FILE 


# case Schoice in 

# 4) if[$conf!-01 
#then 

# a.path-i $c(»if_dir 
#fi 



#esac 

cd$cur_wd 

ft 

if[$x»a-o$x* A] 
that 

for y in [aA]00009[0-7].a* 
do 

z*'echo $y I sed -n *l,$s/.ada/.a/gp'' 
q) $y $pbd/$x/$z 

done 

# go in and add the proper math package for test a000092 
sed -n -e •a/FLOAT_MATH_LIB/MATH/g’ -e ’p' • 
$pbd/$x/[aA]000092.a > $pbd/$x/ptmp 

mv $pbd/$x/ptnq) ^bd/$x/a000092.a 
else 

for y in $x*.a* 
do 

2 *'echo $y I sed -n 'l,$s/.ada/.a/gp'' 
cp $y $pbd/$x/$z 

dtme 

fi 

done 

echo "Done" 
echo "" 

echo "Installation is now complete. You are ready to run the tests. Re-run the script and" 
echo "select the run option." 
exit 
fi 

# This part of the script is for test modifications 
if [Soption -eq 2] 

thffl 

echo "PIWG does not endorse any test modifications. " 
fi 

# The soipt fhmi here on down is used to run the PIWG suite 
iff -r Spb^sup/aOOOOl l.a -o -r $pbd/sup/A0000I l.a ] 

then 

cros8i>»l 

else 

cro88*0 


34 




APPENDIX B 
“VERD1X.SH”F1LE 

fi 

echo"" 

echo $n "Do you wish to run the tests WITHOUT suppressed checking (y or n)? $c" 
read answer 

*'[$answer “ y -o Sanswer ■ Y] 
then 

ada_conip»' -C ada -09' 
else 

ada_comp*'-C ada -09 -S' 
fi 

echo"" 

echo The support library contains all of the appropriate A files necessary to run all of the tests" 
echo "(piwg_io, timing routine, etc). This ne^ to be compiled before any tests can be run." 
echo"" 

echo $n "Have you compiled the support library (y or n)? $c" 
read answe; 

if [Sanswer * n -o Sanswer *= N] 
then 

cd Spbd/sup 

echo "Making Support Library..." 
a.make Sada_comp -v -f *.a 
cd Scur_wd 
fi 

echo "Enter desired report file (default is screen)" 
echo Sn "filc> Sc" 
read rep_file 

rep_prcs“'echo Srep_filc | wc -w’ 
if [ Srep_pres !=0] 
then 

foo®'echo Srep_file | grep /1 wc -w' 
if[ Sfoo*0 ] 
then 

bar*'pwd' 

foo=Sbar/Srep_fiIe 

rep_file“Sfoo 

ft 

fi 

echo Srep.file 
while [STRUE] 
do 

echo"" 

echo " I) Run all tests" 
echo" 2) Run tests by letter" 
echo" 3) Run individual tests" 
echo"" 

echo Sn "Enter choice: Sc" 


35 









APPENDIX B 
“VERDIX-SH” FILE 

read runjopt 
case $run_ofrt in 
[1-3]) break;; 

*) echo " Valid options are l-S”;; 
esac 
done 

runjist-"" 
if [$run_opt*3] 
then 

echo "Ento* desired test numbers separated by spaces. Multiple lines may be used." 
echo "Terminate with a blank line" 
while [STRUE] 
do 

read onejine 

cnt*'echo $one_line | wc -w' 
if [Sent-0] 
then 
break 
fi 

run_temp*'echo Srunjist Sonejine' 
runjist*^run_temp 

done 

for cur.test in Srunjist 
do 

nin_dir*'ccho Scur.test | sed -n s/[0-9]//gp* 
cd Spbd/Srun_dir 
test_name“ScurJest 
if [! -r Stest_name.a] 
then 

test_name*'echo Scur_te8t j sed -n s/S/m/gp' 

n 

test_files«'echo Scurjtest | sed -n 8/SA*.a/gp' 
echo "Building test Stest.name...” 

8.make Sada_comp -v -f Stest^fiies 
if[Scro8s*0] 
then 

chk_math*’grep 'with ♦MATH' Stest.files | wc -w' 
if[Schk_math-gel] 
then 

a.make Sada.conq) -v Stest.name -Im -o Stest.name.out 
else 

a.make Sada.comp >v Stest.name -o Stest.name.out 
fi 
ft 

if [! *s Stest_name.out] 
dien 


36 




APPENDIX B 
“VERDDC-SITFILE 

echo "Could not create test Scur.test" 
else 

echo "Executing $test_name" 
then 

if [$rep_pres»0] 
then 

a.run Stestjname.out 
else 

a.run Stest.name.out» $rep file2>&l 
fi 
else 

if ($rep_pres “ 0] 
then 

$test_nanie.out 

else 

$test_name.out» $rep file2>&l 
fi 
fi 
fi 

cd Scur.wd # kludgey, but the easiest way around relative paths 
done 
exit 
fi 

if [$run_opt * 2] 
then 

echo "Enter desired test letters separated by spaces. Multiple lines may be used." 
echo "Terminate with a blank line" 
while [ STRUE ] 
do 

read onejine 

cnt^’echo Sonejine | wc -w' 
if [Sent* 0] 
then 
break 
fi 

run_temp*'ccho Srunjist Sonejine' 
runJist-Srunjlemp 

done 

fi 

if[$run_q)t» 1] 
then 

runJist*’a bcdefghlpty* 
fi 

for curjib in Srunjist 
do 


37 






APPENDIX B 
-VERD1X.SH” FILE 


od $pbd/$cttrjib 

echo "Bringing units up to date..." 

8.inake Sadiucon^ -v -f *.a 
exec_t l-$curJib*m.a 
foo“*echo $exec_tr 

srch-'echo "$fbo" | sed -n 'sA*//^)' | wc -w' 
if[$srch!«0] 
then 

cxec_tl»"" 

fi 

execjt2*$curjib*[0-9].a 
fbo«'echo $exec_t2' 

srch-'echo "$foo" | sed -n '8A*//gp’ | wc -w* 
if[$sich !*0] 
then 

exec t2«"" 
fi 

execjist-'echo "Sexccjl $execjt2"' 
for cur.unit in Sexecjist 
do 

curjtest*'echo Scurjunit | sed -n sA.a//gjp' 
echo "Building test Scur.test" 
if[$cross*0] 
then 

chk.nuith-'grep 'with *MATH’ Scur_unit | wc -w' 
if [$chk_inath-ge 1] 
then 

8.make Sada.comp -v $cur_test -0 Scur.test.out 
else ~ 

a.make $ada_comp -v Scur.test -o $cur test.out 
fi 
fi 

if [! -s $cur_test.out] 
then 

echo "Could not create test $cur_tcst" 
else 

echo "Executing $cur_test" 
if [$cross* 1] 
then 

if[$repjMres»0] 

then 

a.run $cur_test.out 
else 

a.run $curJest.out» $rep file2>&l 
fi 
else 


-Im 


38 






done 

odScur.wd 

done 


APPENDIX B 
“VERDiXSITFILE 

if[$rep_pre8*0] 

then 

$cur_te8t.out 

else 

$cur_test.out» $rep.file 2>&1 
fi 


39 


APPENDIX C 

PIWG (FIRST) EXECUTION TESTS RESULT 
USING 

SPARC ADA ON THE SUN WORKSTATION 


40 






APPENDIXC 

nWOlPIRSD EXECVnON TCSTS RESULT USING SPARCADA ON THE SUN WORKSTATION 


Test Name; A 


»»»u*:! 


Clock resdution measurement running. 

Test Descripticm: Determine clock resolution using second differences of values returned by the 
function CPUJTime.Clock. 


Nmnber of sam|de values is 
Clock Resolutim « 


12000 


0.01 


• ••••• III III I 


seconds. 


Clock Resolution (average) * 
Clock Resolution (variance) * 


0.01 

0 , 


I I I I 111 111 i i rj 




seconds. 

seconds. 


Capture a few sizes for later analysis 
8 Boolean'size 
8 Boolean_object'size 
8 Character'uze 
8 Character.object'size 
32 Positive'size 
32 Positive.object'size 
32 lnteger*size 
64 Float'size 
32 Duration'size 

0.0001 Duration'small 
0.0100 System.Tick 

0.0202 - clock resolution used for iteration stability 


Test Name: A00009I Class Name: Composite 

CPU Time: 33.50 MICROSECONDS plus or minus 1.675 

Wall/CPU: 1.00 ratio Iteration Count: 204800 

Test Description: Reinhold P. Weicker's DHRYSTONE cmnposite benchmaric. 


0.0202 * clock resolution used fw iteration stability 

Test Name: A000092 Class Name: Composite 

CPU Time: 106.50 MILLISECONDS plus or minus 5.325 

Wall/CPU: 1.01 ratio Iteraticm Count: 40 

Test Description; Ada version of the Whetstone Bendimark Program. Manufacturers math 
routines. 


Average Whetstone rating: 9390KWIPS 
0.0202 « clodi tesoluti(Hi used for iteration stability 


41 








APPENDIX C 

PIWO (PIRST) EXECUTION TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: A000093 ClaMName: Coi]q>osite 

CPU Time: 100.13 MILLISECONDS pluf or minus 5.006 

Wall/CPU: 1.01 ratio Iteration Count: 80 

Teat Description: Ada version of the Whetstone Benchmark Program. Built in'standard* math 
routines. 

Average Whetstone rating: 9988 KWIPS 

Test Name: A000094 Class: Coniq>osite 

Perm 0.10 

Towers 0.16 

Queens O.OS 

Intmm 0.09 

Mm 0.04 

Puzzle 0.40 

hikk 0.08 

Jubble 0.16 

Tree 0.15 

FFT 0.18 

Ack 8.18 

Test Description: Henessy benchmarks 

A000095 collects information interactively, then reads die output from COMPlLE.COM or other 
script run and produces a compressed file of results. 


Enter file name of input file: 

•* MAIN PROGRAM ABANDONED ~ EXCEPTION ’T^AME.ERROR" RAISED 
0.0202 « clock resolutimi used fw iteration stability 

Test Name: BOOOOlO Class Name: Composite 

CPU Time: 180.75 MILLISECONDS plus or minus 9.038 

Wall/CPU: 1.00 ratio iteration Count: 40 

Test Description: NASA Orbit determination heavy floating point and trig initializing and 
running. 

4.71471409E+03 4.67389156E+03 2.3859482lE+02 
-5.33895085E-K)0 5.19603808E+00 2.2567578lE+00 
0.0202 * clock resolution used for iteration stability 


42 









APPENDIXC 

PIWO (FIKST) EXECUTKm TESTS RESULT USING SEARCADA ON THE SUN WORKSTATION 

Test Name: B000013 Class Name: Coii^>osite 

CPU Time: 2.34 MILLISECONDS plus or minus 0.117 

Wdl/CPU: 1.01 ratio Iteration Count: 3200 

Test Deacription: TRACKER CENTROID Algorithm. All integer calculations searching a 60 x 
60 array. 

0.0202 ■ clock resolution used for iteration stability 
WALL time less dutn CPU time 

Test Name: COOOOOl Gass Name: Tasking 

CPU Time: 389.06 MICROSECONDS plus or minus 19.453 

V'lll/CPU: 1.00 ratio Iteration Count: 12800 

Test Deacription: Task create and terminate measurement widi one task, no entries, when task is 
in a procedure using a task type in a package, no select statement, no loop, 

0.0202 * clock resolution used for iteration stability 

Test Name: C000002 Class Name: Tasking 

CPU Time: 374.22 MICROSECONDS plus or minus 18.711 

Wall/CPU: 1.00 ratio iteration Count: 12800 

Test Description: Task create and terminate time measurement with one task, no entries when 
task is in a procedure, task defined and used in procedure, no select statement, 
no loop. 

0.0202 « clock resolution used for iteration stability 

Test Name: C000003 Class Name: Tasking 

CPU Time: 361.72 MICROSECONDS plus or minus 18.086 

Wall/CPU: 1.00 ratio iteration Count: 12800 

Test Description: Task create and terminate time measurement. Task is in declare block of 
main procedure one task, no entries, task is in the loop. 

0.0202 * clock resolution used for iteration stability 

Test Name: D/OOOOl Class Name: Allocation 

CPU Time: 1.39 MICROSECONDS plus or minus 0.070 

Wall/CPU: 1.00 ratio Iteration Count: 1638400 

Test Description: Dynamic array allocation, use and deallocation time measurement. Dynamic 
array elabtHaticm, 1000 integers in a jnrocedure get ^ce and free it in the 
procure on each call. 


0.0202 • clodc resolution used for iteration stability 






APPENDIX C 

PIWO (F»ST) EXECUTION TESTS RESULT USINO SPARCADA ON THE SUN WORKSTATION 

Test Name: D000002 Class Name: Allocation 

CPU Time: 339.06 MICROSECONDS plus or minus 16.953 

Wall/CPU: 1.00 ratio Iteration Count: 12800 

Test Descri|rtion: Dynamic array elaboration and initialization time measurement allocation, 
initialization, use and deallocation. 1000 integers initialized by others»>l 

0.0202 « clock resolution used for iteration stability 

Test Name: D000003 Class Name: Allocation 

CPU Time: 2.26 MICROSECONDS plus or minus 0.113 
WaiyCPU: 1.00 ratio Iteradon Count: 1638400 

Test Description: Dynamic recMd allocation and deallocation tinoe measurement elaborating, 
allocating, and deallocating record attaining a dynamic array of 1000 
integers. 

0.0202 * clock resolution used for iteration stability 

Test Name: D000004 Class Name: Allocation 

CPU Time: 339.84 MICROSECONDS plus or minus 16.992 

Wall/CPU: 1.00 ratio Iteration Count: 12800 

Test Description: Dynamic record allocation and deallocation time measurement elaborating, 
initializing by (DYNAMIC.SIZE, (others~>l)) record containing a dynamic 
array of 1000 integers. 

0.0202 « clock resolution used for iteration stability 

Test Name: EOOOOOl Class Name: Exception 

CPU Time: 9.74 MICROSECONDS plus or minus 0.487 

Wall/CPU: 1.01 ratio Iteration Count: 409600 

Test Description: Time to raise and handle an exception. Exception defined locally and 
handled locally. 

0.0202 clock resolutitm used for iteration stability. 

Test Name: E000002 Class Name: Exception 

CPU Time: 26.07 MICROSECONDS plus or minus 1.304 

Wall/CPU: 1.00 ratio Iteration Count: 204800 

T^ Description: Exception raise and handle timing measurement when exception is in a 
proc^ure in a package. 

0.0202 clod( resolution used for iteration stability. 


44 






APPENDIX C 

PIWG (FIRST) EXECUTION TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: E000003 Class Name: Exception 

CPU Time: 3S.S0 MICROSECONDS plus or minus 1.775 

Wall/CPU: 1.01 ratio Iteration Count: 204800 

Test Description: Exception raise and handle timing measurement when exception is raised 
nested 3 deep in procedure calls. 

0.0202 * clock resolution used for iteration stability 

Test Name: E000004 Class Name: Exception 

CPU Time: 46.29 MICROSECONDS plus or minus 2.315 

Wall/CPU: l.OI ratio Iteration Count: 102400 

Test Description: Exception raise and handle timing measurement when exception is nested 4 
deep in procedures. 

0.0202 * clock resolution used for iteration stability 

Test Name: E000005 Class Name: Exception 

CPU Time: 42.58 MICROSECONDS plus or minus 3.156 

Wall/CPU: 1.00 ratio Iterarion Count: 25600 

Test Description: Exception raise and handle timing measurement when exception is in a 
rendezvous. Both the task and the caller must handle the exception. 

0.0202 * clock resolution used for iteration stability 

*«*«* POSSIBLY INACCURATE MEASUREMENT ***** 

Test Name: FOOOOOl Class Name: Style 

CPU Time: 0.09 MICROSECONDS plus or minus 0.025 

Wall/CPU: 1.00 ratio Iteration Count: 3276800 

Test Description: Time to set a boolean flag using a logical equation, a local, and a global 
integer are compared. Compare this test with F000002 

0.0202 * clock resolution used for iteration stability 

***** POSSIBLY INACCURATE MEASUREMENT ***** 

Test Name: F000002 Class Name: Style 

CPU Time: 0.10 MICROSECONDS plus or minus 0.025 

Wall/CPU: 1.01 ratio Iteration Count: 3276800 

Test Description: Time to set a boolean flag using an 'if test, a local, and a global integer are 
compared. Compare this test with FOOOOO1. 

0.0202 - clock resolution used for iteration stability 


43 








APPENDIX C 

PiWQ (FIRST) EXECUTION TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: GOOOOOl Class Name; Input/Output 

CPU Time: 39.06 MICROSECONDS plus or minus 1.973 

.Wall/CPU: 1.00 ratio Iteration Count: 40960 

Teift Description: TEXT_IO.GET_LINE reading 20 characters, time measured. A scratch file is 
written, then read and reset. 

0.0202 * clock resolution used for iteration stability 

Test Name: G000002 Class Name: Input/Output 

CPU Time; 51.51 MICROSECONDS plus or minus 2.576 

Wall/CPU: 1.02 ratio Iteration Count: 40960 

Test Description: TEXT.IO.GET called 20 times per line, time measured. A scratch file is 

written, then read and reset. Compare to GOOOOOl for about same number of 
characters. 

0.0202 ■■ clock resolution used for iteration stability 

Test Name: G000003 Class Name: Input/Output 

CPU Time: 196.29 MICROSECONDS plus or minus 9.815 

Wall/CPU: 1.02 ratio Iteration Count: 20480 

Test Description: TEXT_IO.PUT.LINE for 20 characters, timing measurment. A scratch file is 
opened, written and reset. 

0.0202 « clock resolution used for iteration stability 

Test Name: G000004 Class Name: Input/Output 

CPU Time; 44.43 MICROSECONDS plus or minus 2.222 

Wall/CPU; 1.00 ratio Iteration Count: 40960 

Test Description: TEXT.IO.PUT 20 times with one character, time measurement. A scratch 
file is written, reset and rewritten. Compare, q)proximately, to G000003. 

0.0202 » clock resolution used for iteration stability 

Test Name: G000005 Class Name: Input/Output 

CPU Time; 19.04 MICROSECONDS plus or minus 0.952 

Wall/CPU: 1.00 ratio Iteration Count: 163840 

Test Description: TEXT_IO.GET an integer fn>m a local string, timing measuremoit. Use 

TEXTJO.PUT to convert 1..100 to a string, then use TEXT.IO.GET to get 
the number back. 

0.0202 * clock resolution used for iteration stability 



APPENDIX C 

PIWO (RRST) EXECUTION TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: G000006 Class Name: Input/Output 

CPU Time: 122.07 MICROSECONDS plus or minus 6.104 

Wall/CPU: 1.01 ratio Iteration Count: 20480 

Test Description: TEXT_IO.GET getting a floating point fnu:tion from a local string. Timing 
measurement on 0.001 to 0.01 range of numbers. Compare, approximately, to 
G000005 for integer vs float. 

0.0202 * clock resolution used for iteration stability 

Test Name: G000007 Class Name: Input/Output 

CPU Time: 1031.25 MICROSECONDS plus or minus 51.563 

Wall/CPU: 1.00 ratio Iteration Count: 5120 

Test Description: Open and close an existing file, time measurement. A scratch file is created 
and closed. The scratch file is opened IN.FILE and closed in a loop 

0.0202 * clock resolution used for iteration stability 

Test Name: HOOOOOl Class Name: Chapter 13 

CPU Time: 1.21 MICROSECONDS plus or minus 0.061 

Wall/CPU: 1.01 ratio Iteration Count: 3276800 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are PACKED with the pragma 'PACK.’ For this test the 
operations are performed on the entire arrays. 

0.0202 * clock resolution used for iteration stability 

Test Name: H000002 Cla^Name: Chapter 13 

CPU Time: 18.29 MICROSECONDS plus or minus 0.914 

Wall/CPU: 1.00 ratio Iteration Count: 409600 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are NOT PACKED with the pragma 'PACK.' For this test the 
operaticHis are performed on the oitire array. 

0.0202 * clock resolution used for iteration stability 

Test Name: H000003 Clan Name: Chapter 13 

CPU Time: 44.82 MICROSECONDS plus or minus 2.241 

Wall/CPU: 1.00 ratio Iteration Count: 102400 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are PACKED with the pragma 'PACK.' For this test the 
operations are performed on components in a loop 

0.0202 * clock resolution used for iteration stability 


47 





APPENDIX C 

PIWO (HRST) EXECUTION TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: H000004 Class Name: Chapter 13 

CPU Time: 18.48 MICROSECONDS plus or minus 0.924 

Wall/CPU: 1.01 ratio Iteration Count: 409600 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test die arrays are NOT PACKED with the pragma 'PACK.' For this test the 
operations are performed on components in a loop. 

0.0202 « clock resolution used for iteration stability 

***** POSSIBLY INACCURATE MEASUREMENT ***** 

Test Name: H000005 Class Name: Chapter 13 

CPU Time: 0.00 MICROSECONDS plus or minus 0.025 

Wall/CPU: 1.00 ratio Iteration Count: 3276800 

Test Description: The time for UNCHECKED_CONVERSION to move one INTEGER object 
to another INTEGER object. This may be zero with good optimization. 

0.0202 » clock resolution used for iteration stability 

Test Name: H000006 Class Name: Chapter 13 

CPU Time: 4.27 MICROSECONDS plus or minus 0.214 

Wall/CPU: 1.00 ratio Iteration Count: 819200 

Test Description: The time for UNCHECKED_CONVERSION to move 10 floating array 
objects to a 10 conqtonent floating record. 

0.0202 = clock resolution used for iteration stability 

Test Name: H000007 Class Name: Chapter 13 

CPU Time: 3.13 MICROSECONDS plus or minus 0.156 

Wall/CPU: 1.00 ratio Iteration Count: 1638400 

Test Description: The time to store and extract bit fields that are defined by representation 

clauses using Boolean and Integer record components. 12 accesses, 5 stores, 

1 record copy. 

0.0202 = clock resolution used for iteration stability 

Test Name: H000009 Class Name: Chapter 13 

CPU Time: 4.79 MICROSECONDS plus or minus 0.239 

Wall/CPU: 1.02 ratio Iteration Count: 819200 

Test Description: The time to perform a change of representation. If the result is near zero, 
feature probably not implemented. 

0.0202 - clock resolution used for iteration stability 


48 







APPENDIX C 

PIWO (FIRST) EXECUnON TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: LOOOOOl Class Name; Iteration 

CPU Time: 0.13 MICROSECONDS plus or minus 0.008 

Wall/CPU: 1.01 ratio Iteration Count: 10240000 

Test Description: Simple "for" loop time for I in 1 .. 100 loop time reported is for once through 

loop. 

0.0202 * clock resolution used for iteration stability 

Test Name: L000002 Class Name: Iteration 

CPU Time: 0.13 MICROSECONDS plus or minus 0.008 

Wall/CPU: 1.00 ratio Iteration Count: 10240000 

Test Description: Simple "while" loop time while I <* 100 loop time reported is for once 
through loop. 

0.0202 * clock resolution used for iteration stability 

Test Name: L000003 Class Name: Iteration 

CPU Time: 0.15 MICROSECONDS plus or minus 0.008 

Wall/CPU: 1.00 ratio Iteration Count: 10240000 

Test Description: Simple "exit" loop time, loop I:“I+1; exit when I>100; end loop; time 
reported is for once through loop. 

0.0202 = clock resolution used for iteration stability 

Test Name; L000004 Class Name: Iteration 

CPU Time: 0.12 MICROSECONDS plus or minus 0.010 

Wall/CPU: 1.00 ratio Iteration Count: 8192000 

Test Description: Measures Compiler’s choice to UNWRAP a small loop of five (5) iterations 
when given a PRAGMA OPTIMIZE(TIME). An execution time less than .05 
microseconds indicates the unwrap occurred. 

0.0202 » clock resolution used for iteration stability 

Test Name: L000005 Class Name: Iteration 

CPU Time: 0.12 MICROSECONDS plus or minus 0.010 

Wall/CPU: 1.01 ratio Iteration Count: 8192000 

Test Description: Measures Compiler's choice to UNWRAP a small loop of five (5) iterations 
when given a PRAGMA OPTIMIZE (Space). An execution speed < .05 
microseconds indicates the unwrap occurred. 

0.0202 » clock resolution used for iteration stability 







APPENDIX C 

PIWG (HRST) EXECUTION TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: POOOOOl Class Name: Procedure 

CPU Time: 0.28 MICROSECONDS plus or minus 0.014 

Wall/CPU: 1.01 ratio Iteration Count: 8192000 

Test Description: Procedure call and return time (may be zero if automatic inlining) procedure 
is local, no parameters. 

0.0202 » clock resolution used for iteration stability 

Test Name: P000002 Class Name: Procedure 

CPU Time: 0.28 MICROSECONDS plus or minus 0.014 

Wall/CPU: 1.01 ratio Iteration Count: 8192000 

Test Description: Procedure call and return time. Procedure is local, no parameters when 
procedure is not inlinable. 

0.0202 clock resolution used for iteration stability 

Test Name: P000003 Class Name: Procedure 

CPU Time: 0.28 MICROSECONDS plus or minus 0.014 

Wall/CPU: 1.01 ratio Iteration Count: 8192000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. Compare to P000002 

0.0202 = clock resolution used for iteration stability 

Test Name: P000005 Class Name: Procedure 

CPU Time: 0.38 MICROSECONDS plus or minus 0.020 

Wall/CPU: 1.01 ratio Iteration Count: 4096000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, in INTEGER 

0.0202 » clock resolution used for iteration stability 

Test Name: P000006 Class Name: Procedure 

CPU Time: 0.33 MICROSECONDS plus or minus 0.020 

Wall/CPU: 1.00 ratio Iteration Count: 4096000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, out INTEGER. 

0.0202 = clock resolution used for iteration stability 


50 







APPENDIX C 

PIWO <nRST» EXECUTION TESTS RESULT USING SPARC ADA ON THE SUN WORKSTATION 

Test Name: P000007 Class Name: Procedure 

CPU Time: 0.42 MICROSECONDS plus or minus 0.021 

Wall/CPU: 1.01 ratio lt«tition Count: 4096000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, in out INTEGER 

0.0202 * clock resolution used for iteration stability 

Test Name: POOOOlO Class Name: Procedure 

CPU Time: 1.86 MICROSECONDS plus or minus 0.093 

Wall/CPU: 1.00 ratio Iteration Count: 2048000 

Test Description: Procedure call and return time measurement. Compare to P000005 
10 parameters, in INTEGER 

0.0202 clock resolution used for iteration stability 

Test Name: POOOOll Class Name: Procedure 

CPU Time: 3.90 MICROSECONDS plus or minus 0.195 
Wall/CPU: 1.00 ratio Iteration Count: 1024000 

Test Description: Procedure call and return time measurement. Compare to P000005, POOOOlO 
20 parameters, in INTEGER. 

0.0202 = clock resolution used for iteration stability 

Test Name: P000012 Class Name: Procedure 

CPU Time: 1.79 MICROSECONDS plus or minus 0.089 

Wall/CPU: 1.00 ratio Iteration Count: 2048000 

Test Description: Procedure call and return time measurement. Compare with POOOOlO 

(discrete vs composite parameters) 10 paramaters, in MY_RECORD a three 
component record. 

0.0202 = clock resolution used for iteration stability 

Test Name: P000013 Class Name: Procedure 

CPU Time: 3.71 MICROSECONDS plus or minus 0.186 

Wall/CPU: 1.00 ratio Iteration Count: 1024000 

Test Description: Procedure call and return time measurement 20 composite 'in' parameters 
the composite type is a 3 component record. 

0.0202 clock resolution used for iteration stability 


51 







APPENDIX C 

PIWO (FIRST) EXECUTION TESTS RESULT USING SPARC ADA ON THE SUN WORKSTATION 

Test Name; TOOOOOl ClassName: Tasking 

CPU Time: 143.16 MICROSECONDS plus or minus 7.158 

Wall/CPU: 1.01 ratio Iteration Count; 51200 

Test Description: Minimum rendezvous, entry call and return time 1 task 1 mtry, task inside 
I»ocedure no select. 

0.0202 * clock resolution used for iteration stability 

Test Name: T000002 ClassName: Tasking 

CPU Time: 136.52 MICROSECONDS plus or minus 6.826 

Wall/CPU: 1.00 ratio Itoaticm Count: 51200 

Test Description: Task entry call and return time measured. One task active, one entry in task, 
task in a package, no select statement. 

0.0202 * clock resolution used for iteration stability 

Test Name; T000003 ClassName: Tasking 

CPU Time: 136.33 MICROSECONDS plus or minus 6.816 

Wall/CPU: 1.01 ratio Iteration Count; 51200 

Test Description: Task entry call and return time measured. Two tasks active, one entry per 
task, tasks in a package, no select statement. 

0.0202 « clock resolution used for iteration stability 

Test Name: T000004 ClassName: Tasking 

CPU Time: 143.16 MICROSECONDS plus or minus 7.158 

Wall/CPU: 1.00 ratio Iteration Count: 51200 

Test Description: Task entry call and return time measured. One tasks active, two entries, tasks 
in a package using select statement. 

0.0202 clock resolution used for iteration stability 

Test Name: T000005 ClassName: Tasking 

CPU Time: 146.88 MICROSECONDS plus or minus 7.344 

Wall/CPU: 1.02 ratio Iteration Count: 32000 

Test Description: Task entry call and renim time measured. Ten tasks active, one entry per 
task, tasks in a package, no select statement. 

0.0202 * clock resolution used for iteration stability 


32 





APPENDIX C 

PIWO (FIRST) EXECUTION TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

Test Name: T000006 Class Name: Taidung 

CPU Time: 169.06 MICROSECONDS plus or minus 8.453 

Wall/CPU: 1.00 ratio Iteration Count: 32000 

Test Description: Task entry call and return time measurement. One task with 10 oitries, task 
in a package, one select statmient, compare to TOOOOOS. 

0.0202 * clock resolution used for iteration stability 

Test Name: T000007 Class Name: Tasking 

CPU Time: 72.27 MICROSECONDS plus or minus 3.613 

Wall/CPU: 1.01 ratio Iteration Count: 102400 

Test Description: Minimum rendezvous, entry call and return time 1 task 1 entry no select. 

0.0202 clock resolution used for iteration stability 

Test Name: TOOOOOS Class Name: Tasking 

CPU Time: 776.56 MICROSECONDS plus or minus 38.828 

Wall/CPU: 1.00 ratio Iteration Count: 6400 

Test Description: Measure the average time to pass an integer from a producer task through a 
buffer task to a consumer task. 

Test Name: YOOOOOl Measure actual delay vs commanded delay 


Commanded 

Actual 

CPU 

Iterations 

0.0010 

0.0200 

0.0000 

1000 

0.0020 

0.0200 

0.0000 

500 

0.0040 

0.0201 

0.0000 

250 

0.0080 

0.0200 

0.0000 

125 

0.0160 

0.0200 

0.0000 

62 

0.0320 

0.0400 

0.0000 

31 

0.0640 

0.0700 

0.0000 

15 

0.1280 

0.1300 

0.0000 

7 

0.2560 

0.2600 

0.0000 

3 

0.5120 

0.5200 

0.0000 

2 

1.0240 

1.0300 

0.0000 

2 

2.0480 

2.0500 

0.0000 

2 


Y000002 Measure CPU_TIME_CLOCK against a watch for 1 minute. See if every 5 seconds 
are ticked off about right. 

0 

5 

10 

15 

20 

25 


53 






APPENDIX C 

PIWO (PIRST) EXECimON TESTS RESULT USING SPARCADA ON THE SUN WORKSTATION 

30 

35 

40 

45 

50 

55 

60 

65 

Y000003 Measure CALENDAR.CLOCK against a watch for 1 minute. See if every 5 seconds 
are tidced off about right. 

0 

•* MAIN PROGRAM ABANDONED - EXCEPTION "storage.error" RAISED 


Error in kernel:: exceptionjiandler: below bottom of user stack. 






APPENDIX D 


SCRJPTFILEFOR 
'’SECOND RUN" PIWG TESTS 
ON THE SUN WORKSTATION 


55 






APPENDIX D 

SCIUPT FILE FOR ‘‘SECOND RUFT PIWG TESTS ON THE SUN WORKSTATION 

# File SECOND 

# This b t icript file to perform tfie SECOND RUN benchmark as described in the 8_l_90piwg 

# READ.ME nie for the UNIX VERDIX version of PIWG running on the SUN station. This 

# verskm of SECOND was intended to reside and execute in the subdirectory Z where all the 

# "Z" files, "ZOOGOOLA* thru "Z000023.A'‘ also reside. 

# 

edw' conquling files separately' 
echo' Mart time' 

/hoine/oorbeaux/david8Oii/8_1.90piwg/sup/a000051 .out 

adaz00000l.a 

adaz0000Q2.a 

adaz000003.a 

adaz000004.a 

adaz00000S.a 

adaz000006.a 

adaz000007.a 

ada 29000008.a 

adaz000009.a 

ada 20000 l 0 .a 

adazOOOOl l.a 

adaz0000I2.a 

ada20000l3.a 

adazOOOOM.a 

adazOOOOI5.a 

adazOOOOI6.a 

ada z0000i6a.a 

adazOOOOI7.a 

ada 20000i7a.a 

ada -M zOOOOI8.a -o z000018.out 

z000018.out 

adaz000020.a 

adaz000021.a 

ada z000022.a 

ada -M z000023.a -o z000023.out 
z000023.out 

yhome/corbeaux/davidson/8_l_90piwg/sup/a000051 .out 
echo' end time' 
echo* ' 

echo Difference between the Start and Stop Wall Times represents a composite software* 
echo 'development benchmark if no other tarics are running on the machine under test.' 


56 








APPENDIX E 

PIWG ’’SECOND RUN” RESULTS 
USING 

SPARCADA ON THE SUN WORKSTATION 


37 








APPENDIX E 

PIWO *mt)ND RUN** RESULTS USING SPARCADA ON THE SUN WORKSTATION 


compiling files separately 
start time 


CPU time now* 0.0400 WALL time now* 64069.1366 seconds. 


Test printout and value of acceleration, 9.80665 
I.I0324812S00000E-M)1 meter 
I.SOOOOOOOOOOOI4E-KX) second 
2.(M03046I473005E'K)1 meter per second 
UP SORTED DATA 

1 l.OOOOOOOOOOOOOOE-KK) 

2 2.00000000000000E-K)0 

3 3.00000000000000E-K)0 

4 4.00000000000000E-KX) 

DOWN SORTED DATA 

4 4.00000000000000E'K)0 
3 3.00000000000000E-K)0 
2 2.00000000000000E'K)0 
I l.OOOOOOOOOOOOOOE-KX) 


»• ♦ I III 


E+OO meter per second squared 


AAA FIRST 
BBB SECOND 
CCC THIRD 
DDD FOURTH 


DDD FOURTH 
CCC THIRD 
BBB SECOND 
AAA FIRST 


1.10 

2.10 

3.10 

4.10 

4.10 

3.10 

2.10 
1.10 


indiebai^ 
gone fismng 
end FISH 

ALL_STATEMENrSJ»ROCEDURE_2 
into LOOP NAME.1 
Z000021 finished 


CPU time now* 0.0100 WALL time now* 64395.3406 seconds, 
end time 


-G 


Difference between die Start and Stop Wall Times represents a con^site software development 
benchmark if no other tasks are running on the machine under test. 


58 








APPENDIX F 


SCRIPT FILE FOR 
"THIRD RUN" PIWG TESTS 
ON THE SUN WORKSTATION 


59 







APPENDIX F 

SCRIPT FILE FOR THIRD RUN” PIWG TESTS ON THE SUN WORKSTATION 


# File THIRD 

# This is s tcriflt file to perftmn the THIRD RUN benchmark as described in the 8_l_90piwg 

# MEAD.ME nle for the UNIX VERDiX version of PIWG running on the SUN station. This 

# version of THIRD was intended to reside and ececute in the subdirectory ZOTHER where all 

# the "Z" files, "ZOOOIOO.A" thru "Z000200.A" also reside. 

# 

echo 'compiling files separately' 
echo'start time 

/home/oorbeaux/david8on/8.1_90piwg/sup/aOOOOS 1 .out 

a^z0()0100.a 

adaz000101.a 

adazOOOIOZa 

adaaOOOlOB.a 

adaz000l04.a 

achi zOOOIOS.a 

ada z!000106.a 

adazOOOlOT.a 

ada zOOOIOS.a 

adazOOOIOO.a 

adazOOOIIO.a 

adazOOOIlU 

adazOOOl I2.a 

adazOOOI13.a 

adazOOOII4.a 

adaz000115.a 

adaz000II6.a 

adazOOOl 17.a 

adaz000I18.a 

adaz0001I9.a 

ada z000l20.a 

adaz000I2I.a 

adaz000122.a 

adazOOOI23.a 

adaz000I24.a 

adaz000125.a 

adaz000I26.a 

adaz000I27.a 

adaz000128.a 

adaz000129.a 

adaz000130.a 

adazOOOI31.a 

adaz000]32.a 

ada z000133.a 

ada z000134.a 

adazOOOBS.a 

adaz000136.a 

ada z000137.a 

adaz000I38.a 

adaz000139.a 

adaz000140.a 

adazOOOI41.a 

tuia zOOOI42.a 

ad8zOOOI43.a 

adaz000144.a 


60 






APPENDIX F 

SCRIPT FiU FOR ‘THIRD RUN” PIWO TESTS ON THE SUN WORKSTATION 


aifaisOOOUS.a 
adazQ00146.a 
adt2000l47.a 
adt 100014841 
adazOOOI49.a 
a(ki z0001S0.a 
adaz0001Sl.a 
adazOOOIS2.a 
ada zOOO]S3.a 
ada2000IS4.a 
adaz00015S.a 
adaz000i56.a 
adaz000IS7.a 
adazOOOI58.a 
adaz0001S9.a 
adaz000160.a 
adazOOOI6l.a 
adaz000162.a 
adazOOOI63.a 
adazOOOI64.a 
adaz000]65.a 
adaz000166.a 
adazOOOI67.a 
adaz000t68.a 
adaz000169.a 
adaz000l70.a 
adaz000I7l.a 
ada2000l72.a 
adazOOOI73.a 
adazOOOI74.a 
adaz00017S.a 
adaz000I76.a 
adazOOOI77.a 
adaz000178.a 
adazOOOI79.a 
adaz000l80.a 
adaz000181.a 
adaz000182.a 
adazOOOI83.a 
adaz000184.a 
adazOOOlSS.a 
ada 2000186 .a 
adaz000187.a 
adazOOOlSS.a 
adazOOOI89.a 
adaz000190.a 
adaz000191.a 
adaz000l92.a 
adazOOOI93.a 
adaz000194.a 
ada z000195.a 
adaz000196.a 
ada z000197.a 
adaz000]98.a 


61 




APPENDIX F 

SCRIPT FILE FOR ‘THIRD RUFT PIWG TESTS ON THE SUN WORKSTATION 


adiz000199.« ^ . 

/home/cor^ux/d«vidson/8_l_90piwg/8up/a000051 .out 

echo 'end time' 
echo' ' 
echo' ' 

e(^ 'oonqtiltng files at once in z000200.a' 
echo 'start time 

/h«me/corbeaux/davidswi/8_l J90piwg/sup/a000051 .out 
a^z000200.a 

/homc/corbeaux/davidson/8_I_90piwg/sup/a000051 .out 
echo 'end time' 


62 



APPENDIX G 


PIWG "THIRD RUN" RESULTS 
USING 

SPARCADA ON THE SUN WORKSTATION 


63 







APPENDIX G 

PIWO “THIRD RUN” RESULTS USING SPARC ADA ON THE SUN WORKSTATION 


oompiling files separately 
start time 

CPU time now* 0.0300 WALL time now* 37158.7212 seconds, 

CPU time now* 0.0200 WALL time now* 37680.7195 seconds, 

end time 


compiling files at once in z000200.a 
start time 

CPU time now* 0.0200 WALL time now* 37680.7587 seconds. 
CPU time now* 0.0200 WALL time now* 38496.1001 seconds, 
end time 


64 









APPENDIX H 


••COMPILE.COM" FILE 


65 













APPENDIX H 
“CX)MPlLE.COM" RLE 


$! RUN THIS FIRST ON VAX VMS (Feature benchmarks) 

$! 

I VAX VMS filet to cooqpile (using standard output PIWG JO) 

SET VERIFY 
SET NOON 

SET DEF $l$DIAO:[DAVIDSON.PIWG] 

DEL [.AOALIB]*.*;* ! Clean out any old libraries 

$ ACS CREATE LIB [.ADALIB] 

SACS SET LIB [.ADALIB] 

$ @ VAXCONFIG 
$ ADA AOOOOOl 

$ ADA A0000I2 fVAX Ada dependent 
$ ADA A000021 
$ ADA A000022 
$ADAA00003I 
$ADAA000032 
$ ADA A00004I 
t ADA AOt)nM7 

$ ADA A000047! PIWG_TIMER^GENERIC spec 
$ ADA A000048 ! PIWGJTIMER^GENERIC body 
$ ADA A000051 !wall timing routines for host only 
$ ADA A0000S2! 

$ ADA A000053! 

$ADAA0000S4! 

$ ADA A00005S! 

$ ADA A000090 
S ADA A000091 

$ ADA A000092! VAX Ada dependent 
$ ADA A(K)0093 

$ ADA A000094 ljust for comparison, now split up into A..K 
$ ADA A000094A 
$ ADA A000094B 
$ ADA AQOmAC 
$ ADA A000094D 
$ ADA A000094E 
$ ADA A000094F 
$ ADA A000094G 
$ ADA A000094H 
$ ADA A000094I 
$ ADA A000094J 
$ ADA A000094K 

$ ADA A00009S fprogram to process output file 
SADABOOOOOIA 

$ ADA B000001B/N(XI!HECK/WARN»(WARN:NONE) Inudce equivalent of pragma suppress 
$ ADA B000002A 

$ ADA B000002B/NOCHECK/WARN«(WARN:NONE) 

$ ADA B000003A 

$ ADA B000003B/NOCHECK/WARN-(WARN:NONE) 

$ ADA BOtXKXNA 

$ ADA B000004B/N(X:HECK/WARN-(WARN:NONE) 

$ ADABOOOOlO 
$ ADA BOOOOl 1 
$ADABOOOOI3 
$ ADA COOOOOl 


66 









APPENDIXH 
“COMPlLE.COM” FILE 


$ADACX)00002 
$ADAC000003 
$ ADA DOOOOOl 
$ADAD000002 
$ADAD000003 
$ADAD000004 
$ ADA EOOOOOl 
$ ADA E000002 
$ ADA E000003 
$ADAE000004 
$ADAE000005 
$ ADA FOOOOOl 
$ ADA F000002 
SADAGOOOOOl 
$ADAG000002 
$ ADA G000003 
$ ADA G000004 
$ ADA GOOOOOS 
$ADAG000006 
$ ADA G000007 
$ ADA HOOOOOl 
$ADAH000002 
$ ADA H000003 
$ADAH000004 
$ ADA HOOOOOS 
$ ADA H000006 
$ ADA H000007 
$ ADA HOOOOOS 
$ ADA H000009 
$ ADA LOOOOOl 
$ ADA L000002 
$ ADA L000003 
$ ADA L000004 
$ ADA LOOOOOS 
SADAPOOOOOl 
$ ADA P000002 
$ ADA P000003 
$ADAP000004 
$ ADA POOOOOS 
$ ADA P000006 
$ ADA P000007 
$ ADA POOOOlO 
SADAPOOOOn 
$ADAP0000I2 
$ ADA P000013 
SADATOOOOOI 
$ADAT000002 
$ADAT000003 
$ADAT000004 
$ ADA T000005 
$ADAT000006 

$ ADA T000007 !execution possibly machine dependent 
$ADAT000008 


67 





APPENDDCH 
“COMFILE.COM” FILE 


SADAYOOOOOl 
$ADAY000002 
$AOAY000003 
$ADAA000100 
$ ACS LINK AOOOIOO 

SRUNAOOOlOO fall feature tests in one procedure 

$! Iran one feature at a time if re»ilts are better 

$! ! mail in printout 

$ ADA AOOOIOI labout half the features 

$ ADA A000102 !the other half 

$ ACS LINK AOOOIOI 

$ ACS LINK A000102 

$ ACS LINK AOOOOSt 

$ ACS LINK A000052 

SACS LINK A0000S3 

$ ACS LINK A0000S4 

SACS LINK A0000S5 

SACS LINK A000095 

S ACS LINK Y000002 

S ACS LINK Y000003 

SRUNAOOOOSI 

SRUNA0000S2 

S RUN A000053 

S RUN A0000S4 

S RUN AOOOIOI 

SRUNA000I02 

S RUN AOOOOSS 

S DEL SCRATCH*.*;• fiemove scratch files from "G" tests 
S DEL A0000S2D.;* Iremove intermediate timing files 
S DEL PIWGRES.;* Iremove saved results if any 
S! DEL [.ADALIB]*.*;* Iremove compilation library 


68 








APPENDIX I 

PIWG (FIRST) EXECUTION TEST RESULTS 
USING 

DEC ADA 0^ VAX COMPUTER 


69 








APPENDtXI 

nWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

IISYLOGIN.COM 
S!For tfie AAAF CLuster 
SSETNOVERIFY 
SSET NOON 

$ SET DEF $1$D1A9:[DAVIDS0N.PIWG] 

$ DEL [.ADALIB]*.*;* IClean out any old libraries 
$ ACS CREATE LIB [.ADALIB] 

%ACS-I-CLJLIBCRE, Library $1$DIA9:[DAVIDS0N.PIWG. ADALIB] created 
$ ACS SET LIB [.ADALIB] 

%ACS>1-CLJL1BIS, Current program library is 
$ 1 $D1A9:[DAV1DS0N.PIWG. ADALIB] 

$ @ VAXCONFIG 
System configuration: 

Cluster: AAAF 
Node: KNIGHT 

CPU: VAX 4000-200 

Character emulated: TRUE 
F_FLOAT emulated: FALSE 
D_FLOAT emulated: FALSE 
G_FLOAT emulated: FALSE 
H_FLO AT emulated: TRUE 
VMS version: V5.5 
Virtual page count: 240000 
Working set maximum: 16400 
Main Memory (32.00Mb) 

System device: RF72 
User device: RF71 
VAX Ada software configuration: 

ADA version: "VAX Ada V2.2-38" 

ACS version: "VAX Ada V2.2-38" 

ADARTL version: "V5.4-03" 

ADAMSG version: "1-029" 

Process configuration: 

Open file limit: SO 
Enqueue quota: 100 

Timer queue quota: 20 
Page file quota: 17000 
Woriring set memory parameters: 

WSQUOTA: 2500 
WSEXTENT: 4000 
Adjustment: enabled 
$ EXIT !0 

$ ADA AOOOOOI 

$ ADA A000012 !VAX Ada dependent 
$ADAA000021 
$ ADA A000022 


70 







AmNDIXI 

nwo (FlRSTl EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


SADAA000031 

$ADAA000032 

SADAAOOOCMl 

$ADAA000042 

$ ADA A000047 !PIWG_TIMEIL.GENERIC spec 
$ ADA A000048 IPlWGjnMER^GENERlC body 
S ADA A000051 !wall timing routines for host only 
SADAA0000S2! 

SADAA000053! 

$ADAA000054! 

$ ADA A000055! 

$ADAA000090 
$ ADA A000091 

$ ADA A000092 ! VAX Ada dependent 
$ ADA A000093 

$ ADA A000094 ljust for comparison, now ^lit up into A..K 
$ ADA A000094A 
$ ADA A000094B 
$ADAA000094C 
$ ADA A000094D 
$ ADA A000094E 
$ ADA A000094F 
$ ADA A000094G 
$ ADA A000094H 
$ ADA A0000941 
$ ADA A000094J 
$ ADA A000094K 

$ ADA A00009S 'program to process output file 
SADABOOOOOIA 

$ ADA BOOOOOIB/NOCHECK/WARNHWARN:NONE) !make equivalent of pragma suppress 
$ ADA B000002A 

$ ADA B000002B/NOCHECK/WARN-(WARN:NONE) 

$ ADA B000003A 

$ ADA B000003B/NOCHECK/WARN-(WARN:NONE) 

$ ADA B000004A 

$ ADA B000004B/NOCHECK/WARN«(WARN:NONE) 

$ ADA BOOOOlO 
SADABOOOOll 
$ ADA B000013 
SADACOOOOOl 
$ ADA C000002 
$ADACX)00003 
SADADOOOOOl 
$ ADA D000002 
$ADAD000003 









APPENDIXI 

HWO (FIRST) EXECUTION TEST RESULTS USING OTC ADA ON THE VAX C(»4PUTER 

SAOAEOOOOOl 
$ADAE000002 
$ADAE000003 
SADAE00(X)04 
$ ADA E000005 
$AOAF0(K)001 
$ADAF000002 
SADAGOOOOOl 
$ ADA 0000002 
I ADA 0000003 
$ ADA 0000004 
$ ADA 0000005 
$ ADA 0000006 
$ ADA 0000007 
$ ADA HOOOOOI 
$ ADA H000002 
$ ADA H000003 
$ ADA H000004 
$ ADA H000005 
$ ADA H000006 
$ ADA H000007 
$ ADA H000008 
$ADAH000009 
S ADA LOOOOOl 
$ ADA L000002 
$ ADA L000003 
$ ADA L000004 
$ ADA L000005 
$ADAP000001 
$ADAP000002 
$ ADA P000003 
$ADAP000004 
S ADA P000005 
$ ADA P000006 
$ ADA P000007 
$ ADA POOOOlO 
$ ADA POOOOI1 
$ ADA P000012 
$ADAP000013 
$ADAT000001 
$ ADAT000002 
$ADAT000003 
$ADAT000004 
SADATOOOOOS 
$ADAT000006 

$ ADA T000007 lexecution posnbly machine dependent 


72 



APPENDIX I 

PIWO (FlltST) EXECimON TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

SADATOOOOOS 
$ ADA YOOOOOl 
$ ADA Y000002 
$ADAY000003 
$ ADA AOOOlOO 
$ ACS LINK AOOOlOO 

%ACS-I-CLJLINKING, Invoking the VMS Linker for VAX^VMS target 
SSET DEFAULT $l$DIA9:[DAVIDSON.PIWG] 

SLINK:-"" 

SLINK- 

/NOMAP- 

/EXE-nAOOOlOO- 

SYSSlNPUTi/OPTIONS 
S1SDI A9:[DAVIDSON.PI WG] AOOO1 OO.OBJ; 1 
SSTATUS-SSTATUS 

SDELETE SI SD1A9:[DAVIDS0N.PI WG] AOOOIOO.OBJ; 1 
SDELETE S1SDIA9:[DAV10SON.P1WG]A000100.COM; t 
SEXIT 

S RUN AOOOlOO tall feature tests in one procedure 

0.0201 - clock resolution used for iteration stability 

Test Name: A000090 

Clock resolution measurement running 

Test Description: Determine clock resolution using second differences of values returned by the 
function CPUJTimc^Clock. 

Number of san^le values is 12000 

Clock Resolution - 0.009948730468750 seconds. 

Clock Resolution (average) - 0.009948730468750 seconds. 

Clock Resolution (variance) - 0.000000000000000 seconds. 

Ciqiture a few sizes for later analysis 
1 Boolean'size 
8 Boolean.ol^ect'size 
8 Character’size 
8 Characto-jobject'size 

31 Positive'size 

32 Positive.object'size 
32 Integer’size 

32 Float'size 
32 Duration'size 

0.0001 Duration'small 
0.0099 System.Tick 


73 





i 


APPENDIX I 

PIWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: A000091 Class Name: Composite 

CPU Time: 156J5 MICROSECONDS plus or minus 7.813 

Wall/CPU: 1.12 ratio. Iteration Count: 23600 

Test Description: Reinhold P. Weicker’s DHRYSTONE ccmiposite benchmark. 

TestNvne: A000093 Class Name: Composite 

CPU Time: 175.00 MILLISECONDS plus or minus 8.750 

WaiyCPU: 1.07 ratio. Iteration Count: 40 

Test Description: Ada version of the Whetstone Benchmark Program. Built in 'standard' math 
routines. 

Average Whetstone rating: 5714KWIPS 

Test Name: A000094 Class: Composite 

Perm 0.45 
Towers 0.72 
Queens 0.23 
Intmm 0.19 
Mm 0.18 
Puzzle 1.09 
Quick 0.18 
Bubble 0.25 
Tree 0.36 
FFT 0.30 
Ack 16.42 

Test Description: Henessy benchmaiks. 


Test Name: A000094A Class Name: Composite 

CPU Time: 0.44 SECONDS plus or minus 0.022 

Wall/CPU: 1.11 ratio. iteration Count: 10 

Test Description: Hennesy Benchmark, Perm highly recursive 43300 uses of procedure 
permute. 

Test Name: A000094B Class Name: Composite 

CPU Time: 0.74 SECONDS plus or minus 0.037 

Wall/CPU: 1.07 ratio. iteration Count: 10 

Test Description; Hennesy Benchmark, TOWERS highly recursive. 

Test Name: A000094C Class Name; Composite 

CPU Time: 0.24 SECONDS plus or minus 0.012 

Wall/CPU: 1.03 ratio. iteration Count: 20 

Test Description: Hennesy Benchmark, Queens highly recursive. 


74 








APPENDIX I 

PIWO (PmSD EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: A000094D Class Name: Composite 

CPU Time: 0.18 SECONDS plus or minus 0.009 

Wall/CPU: 1.09 ratio. Iteration Count: 40 

Teat Desoription: Hennesy Benchmark, Intmm integer matrix multiply performed by an 
instantiated generic procedure. 

Test Name: A000094E Class Name: Composite 

CPU Time: 0.19 SECONDS plus or minus 0.010 

Wall/CPU: 1.04 ratio. Iteration Count: 40 

Test Description: Hennesy Benchmark, Mm real matrix multiply performed by an instantiated 
generic procedure. 

Test Name: A000094F Class Name: Composite 

CPU Time: 1.12 SECONDS plus or minus 0.056 

Wall/CPU: 1.05 ratio. Iteration Count: 10 

Test Description: Hennesy Benchmark, Puzzle highly recursive. 

Test Name: A000094G Class Name: Composite 

CPU Time: 0.18 SECONDS plus or minus 0.009 

Wall/CPU: 1.08 ratio. Iteration Count: 40 

Test Description: Hennesy Benchmaric, quick sort 5000 element random integer array using 
quick sort. 

Test Name: A000094H Class Name; Composite 

CPU Time: 0.25 SECONDS plus or minus 0.012 

Wall/CPU: 1.02 ratio. Iteration Count: 20 

Test Description: Hennesy Benchmaric, Bubble sort 5000 random integer array using bubble 
sort. 

Test Name: A000094I Class Name: Composite 

CPU Time: 0.37 SECONDS plus or minus 0.019 

Wall/CPU: 1.07 ratio. iteration Count: 20 

Test Description: Hennesy Benchmark, Tree insert 5000 random elements into a tree that is 
sorted. 

Test Name: A000094J Class Name: Composite 

CPU Time: 0.27 SECONDS plus or minus 0.013 

Wall/CPU: 1.03 ratio. iteration Count: 16 

Test Description: Hennesy Benchmark, FFT perform 20 256 point complex FFTs floating point 
intensive. 


Test Name: A000094K Class Name: Composite 

CPU Time: 16.42 SECONDS plus or minus 0.821 

Wall/CPU: 1.05 ratio. iteration Count: 2 

Test Description: Hennesy Benchmark, Ack highly recursive 10 executions of Ackerman (3,6). 


75 




APPENDIX I 

PIWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


TestNune: BOOOOOIA Class Name: Application 

CPU Time: 1017.00 MICROSECONDS plus or minus 50.850 

Wall/CPU: 1.05 ratio. Iteration Count: 10000 

Test DescriiRion: Tracking mathematical applicarion using covarience matrix fixed point, delta 
2.0**(-15) all checks on. 


Test Name: BOOOOOIB Class Name: Application 

CPU Time: 546.00 MICROSECONDS plus or minus 27.300 

Wall/CPU: 1.01 ratio. Iteration Count: 10000 

Test Description: Tracking madiematical implication using covarience matrix fixed point, delta 
2.0**(-15) checks suppres^. 


Test Name: B000002A Class Name: Application 

CPU Time: 462.00 MICROSECONDS plus or minus 23.100 

Wall/CPU: 1.13 ratio. Iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 6 range - 
1.0e+9..1.0e+9 all checks on. 


Test Name: B000002B Class Name: Application 

CPU Time: 311.00 MICROSECONDS plus or minus 15.550 

Wall/CPU: 1.09 ratio. Iteration Count: 20000 

Test Description: Tracking mathematical application using covarience matrix digits 6 range - 
1.0e+-9.. 1 .Oe+9 checks suppressed. 

Test Name: B000003A Class Name: Application 

CPU Time: 781.00 MICROSECONDS plus or minus 39.050 

Wall/CPU: 1.04 ratio. iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 9 range • 
1.Oe+9.. 1.Oe+9 all checks on. 


Test Name: B000003B Class Name: Application 

CPU Time: 514.00 MICROSECONDS plus or minus 25.700 

Wall/CPU: 1.10 ratio. iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 9 range - 
1 .Oe+9.. 1 .Oe+9 checks suppressed. 

Test Name: B000004A Class Name: Application 

CPU Time: 484.00 MICROSECONDS plus or minus 24.200 

Wall/CPU: 1.09 ratio. iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 6 and 
integer all checks on. 


76 










APPENDIX 1 

PIWG (RRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: B000004B Class Name: Application 

CPU Time: 327.00 MICROSECONDS plus or minus 16.350 

Wall/CPU: 1.03 ratio. Iteration Count; 20000 

Test Description: Tracking mathematical application using covarience matrix digits 6 and 
integer checks suppressed. 

Test Name: BOOOOlO Class Name: Composite 

CPU Time: 939.99 MILLISECONDS plus or minus 46.999 

Wall/CPU: 1.12 ratio. Iteration Count; 5 

Test Description: NASA Orbit determination heavy floating point and trig initializing and 
running. 

4.75433302E+03 4.65319583E+03 2.26151483E-H)2 
-5.29274842E-K)0 5.22249948E-K)0 2.25443633E+00 


Test Name: BOOOOll Class Name: Composite 

CPU l ime: 85.37 MILLISECONDS plus or minus 4.269 

Wall/CPU: 1.03 ratio. Iteration Count: 80 

Test Description: JIAWG Kalman benchmark. Just put in PIWG measurement harness. 

Test Name; B000013 Class Name: Composite 

CPU Time; 7.42 MILLISECONDS plus or minus 0.371 

Wall/CPU: 1.04 ratio. Iteration Count: 800 

Test Description: TRACKER CENTROID Algorithm all integer calculations searching a 60 x 
60 array. 

Test Name: COOOOOl Class Name: Tasking 

CPU Time: 1890.66 MICROSECONDS plus or minus 94.533 

Wall/CPU: 1.06 ratio. Iteration Count: 3200 

Test Description: Task create and terminate measurement with one task, no entries, when task is 
in a procedure using a task type in a package, no select statement, no loop. 

Test Name: C000002 ^lass Name: Tasking 

CPU Time: 1893.75 MICROSECONDS . as or minus 94.687 

Wall/CPU: 1.07 ratio. Iteration Count: 3200 

Test Description: Task create and terminate time measurement, with one task, no entries when 
task is in a procedure, task defined and used in procedure, no select statement, 
no loop. 

Test Name: C000003 Class Name: Tasking 

CPU Time: 1893.75 MICROSECONDS plus or minus 94.687 

Wall/CPU: 1.07 ratio. Iteration Count; 3200 

Test Description: Task create and terminate time measurement. Task is in declare block of 
main procedure one task, no entries, task is in the loop. 


77 



APPENDIX I 

PIWG (HRSTJ EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: DOOOOOl Class Name: Allocation 

CPU Time: 2.91 MICROSECONDS plus or minus 0.197 

Wall/CPU: 1.03 ratio. Iteration Count: 409600 

Test Description: Dynamic array allocation, use and deallocation time measurement. 

Dynamic array elaboration, 1000 integers in a procedure get space and free it 
in the procedure on each call. 

Test Name: D000002 Class Name: Allocation 

CPU Time: 535.94 MICROSECONDS plus or minus 26.797 

Wall/CPU: 1.04 ratio. Iteration Count: 12800 

Test Description: Dynamic array elaboration and initialization time measurement allocation, 
initialization, use and deallocation 1000 integers initialized by others»l. 

Test Name: D000003 Class Name: Allocation 

CPU Time: 3.00 MICROSECONDS plus or minus 0.197 

Wall/CPU: 1.09 ratio. Iteration Count: 409600 

Test Description: Dynamic record allocation and deallocation time measurement elaborating, 
allocating and deallocating record containing a dynamic array of 1000 
integers. 

Test Name: D000004 Class Name: Allocation 

CPU Time: 542.96 MICROSECONDS plus or minus 27.148 

Wall/CPU: 1.02 ratio. Iteration Count; 12800 

Test Descriptimi: Dynamic record allocation and deallocation time measurement elaborating, 
initializing by (DYNAMIC.SIZE, (others«>l)) record containing a dynamic 
array of 1000 integers 

Test Name: EOOOOOl Class Name: Exception 

CPU Time: 86.91 MICROSECONDS plus or minus 4.346 

Wall/CPU: 1.03 ratio. Iteration Count: 51200 

Test Description: Time to raise and handle an exception. Exception defined locally and handled 
locally. 

Test Name: E000002 Class Name: Exception 

CPU Time: 145.70 MICROSECONDS plus or minus 7.285 

Wall/CPU: 1.01 ratio. Iteration Count: 25600 

Test Description: Exception raise and handle timing measurement when exception is in a 
proc^ure in a package. 

Test Name: E000003 Class Name: Exception 

CPU Time: 98.05 MICROSECONDS plus or minus 4.902 

Wall/CPU: 1.03 ratio. Iteration Count: 51200 

Test Description: Exception raise and handle timing measurement when exception is raised 
nested 3 deep in procedure calls. 


78 





APPENDIX I 

PIWG (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: E000004 Class Name: Exception 

CPU Time: 97.46 MICROSECONDS plus or minus 4.873 

Wall/CPU: 1.02 ratio. Iteration Count: 51200 

Test Description: Exception raise and handle timing measurement when exception is nested 4 
deep in procedures. 

Test Name: E000005 Class Name: Exception 

CPU Time: 982.81 MICROSECONDS plus or minus 49.140 

Wall/CPU: 1.03 ratio. Iteration Count: 6400 

Test Description: Exception raise and handle timing measurement when exception is in a 
rendezvous. Both the task and the caller must handle the exception. 

Test Name: FOOOOOl Class Name: Style 

CPU Time: 0.55 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.03 ratio. Iteration Count: 819200 

Test Description: Time to set a boolean flag using a logical equation a local and a global integer 
are compared compare this test with F000002. 

Test Name: F000002 Class Name: Style 

CPU Time: 0.43 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.04 ratio. Iteration Count: 819200 

Test Description: Time to set a boolean flag using an 'if test a local and a global integer are 
compared compare this test with FOOOOOl. 

Test Name: G^’ jOOOI Class Name: Input/Output 

CPU Time: 114.01 MICROSECONDS plus or minus 5.701 

Wall/CPU: 1.02 ratio. Iteration Count: 40960 

Test Description: TEXT_IO.GET_LINE reading 20 characters, time measured. A scratch file is 
written, then read and reset 

Test Name: G000002 Class Name: Input/Output 

CPU Time: 765.63 MICROSECONDS plus or minus 38.282 

Wall/CPU: 1.03 ratio. iteration Count: 5120 

T:st Description’ TEXT_IO.GET called 20 times per line, time measured a scratch file is 

written, then read and reset. Compare to GOOOOOl for about same number of 
characters. 


Test Name: G000003 Class Name: Input/Output 

CPU Time: 818.37 MICROSECONDS plus or minus 300.902 

Wall/CPU: 19.12 ratio. iteration Count: 5120 

Test Description: TEXT_IO.PUT_LINE for 20 characters, timing measurement a scratch file is 
opened, written and reset. 


79 






APPENDIX I 

PIWO inRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

Test Name: G000004 Class Name: Input/Output 

CPU Time: 1343.76 MICROSECONDS plus or minus 182.355 

Wall/CPU: 11.59 ratio. Iteration Count: 5120 

Test Description: TEXT_IO.PUT 20 times with one character, time measurement a scratch file 
is written, reset and rewritten compare, approximately, to G000003. 

Test Name: G000005 Class Name: Input/Output 

CPU Time: 70.80 MICROSECONDS plus or minus 3.540 

Wall/CPU: 1.03 ratio. iteration Count: 40960 

Test Description: TEXTJO.GET an integer from a local string, timing measurement use 

TEXTJO.PUT to convert 1..100 to a string then use TEXTJO.GET to get 
the number back. 

Test Name: G000006 Class Name: Input/Output 

CPU Time: 162.11 MICROSECONDS plus or minus 8.105 

Wall/CPU: 1.06 ratio. iteration Count: 20480 

Test Description: TEXTJO.GET getting a floating point fraction from a local string. 

Timing measurement on 0.001 to 0.01 range of numbers compare, 
approximately, to G000005 for integer vs float. 

Test Name: G000007 Class Name: Input/Output 

CPU Time: 18968.96 MICROSECONDS plus or minus 861.479 

Wall/CPU: 3.42 ratio. Iteration Count: 320 

Test Description: Open and close an existing file, time measurement. A scratch file is created 
and closed. The scratch file is opened IN_F1LE and closed in a loop. 

Test Name: HOOOOOl Class Name: Chapter 13 

CPU Time: 1.79 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.04 ratio. Iteration Count: 819200 

Test Description: Time to perform standard boolean operations on arrays of booleans. 

For this test the arrays are PACKED with the pragma ’PACK.’ For this test 
the operations are performed on the entire arrays. 

Test Name: H000002 Class Name: Chapter 13 

CPU Time: 41.70 MICROSECONDS plus or minus 2.085 

Wall/CPU: 1.07 ratio. Iteration Count: 102400 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are NOT PACKED with the pragma 'PACK.' For this test the 
operations are performed on the entire array. 

Test Name: H000003 Class Name: Chtqjter 13 

CPU Time: 130.47 MICROSECONDS plus or minus 6.523 

Wall/CPU: 1.04 ratio. Iteration Count: 51200 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are PACKED with the pragma 'PACK.' For this test the 
operations are performed on components in a loop. 


80 






APPENDIX I 

PfWG (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: H000004 Class Name: Chapter 13 

CPU Time: 44.63 MICROSECONDS plus or minus 2.231 

Wall/CPU: 1.05 ratio. Iteration Count: 102400 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are NOT PACKED with the pragma 'PACK.' For this test the 
operations are performed on components in a loop. 

Test Name: H000005 Class Name: Chapter 13 

CPU Time: 0.22 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.05 ratio. Iteration Count: 819200 

Test Description: The time for UNCHECKEDjCONVERSION to move one INTEGER object 
to another INTEGER object. This may be zero with g(x>d optimization. 

Test Name: H000006 Class Name: Chapter 13 

CPU Time: 7.42 MICROSECONDS plus or minus 0.371 

Wall/CPU: 1.04 ratio. Iteration Count: 409600 

Test Description: The time for UNCHECKED_CONVERSION to move 10 floating array 
objects to a 10 component floating record. 

Test Name: H000007 Class Name: Chapter 13 

CPU Time: 11.01 MICROSECONDS plus or minus 0.551 

Wall/CPU: 1.03 ratio. Iteration Count: 409600 

Test Description: The time to store and extract bit fields that are defined by representation 

clauses using Boolean and Integer record components. 12 accesses, 5 stores, 
1 record copy. 

Test Name: H000008 Class Name: Chapter 13 

CPU Time: 4.08 MICROSECONDS plus or minus 0.204 

Wall/CPU: 1.05 ratio. Iteration Count: 409600 

Test Description: The time to store and extract bit fields that are defined by nested 

representation clauses using packed arrays of Boolean and Integer record 
components. 

Test Name: H000009 Class Name: Chapter 13 

CPU Time: 13.06 MICROSECONDS plus or minus 0.653 

Wall/CPU: 1.04 ratio. Iteration Count: 409600 

Test Description: The time to perform a change of representation. If the result is near zero, 
feature jutibably not implenwnted 


Test Name: LOOOOOl Class Name: Iteration 

CPU Time: 0.25 MICROSECONDS plus or minus 0.063 

Wall/CPU: 1.04 ratio. Iteration Count: 1280000 

Test Description: Simple "for" loop time for I in I .. 100 loop time reported is for once through 
loop. 


81 









APPENDIX I 

PIWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: L000002 Class Name: Iteration 

CPU Time; 0.16 MICROSECONDS plus or minus 0.063 

Wall/CPU: 1.06 ratio. iteration Count: 1280000 

Test Description: Simple "while” loop time while I <- 100 loop time reported is for once 
through loop. 

Test Name: L000003 Class Name: Iteration 

CPU Time: 0.19 MICROSECONDS plus or minus 0.063 

Wall/CPU: 1.07 ratio. Iteration Count: 1280000 

Test Desaiption: Simple "exit" loop time; loop I:«=I+1; exit when I>100; end loop; time 
reported is for once through loop. 

Test Name: L000004 Class Name: Iteration 

CPU Time: 0.21 MICROSECONDS plus or minus 0.079 

Wall/CPU: 1.18 ratio. Iteration Count: 1024000 

Test Description: Measures Compiler's choice to UNWRAP a small loop of five (5) iterations 
when given a PRAGMA OPTIMIZE (TIME). An execution time less than .05 
microseconds indicates the unwnq) occurred. 

Test Name: L000005 Class Name: Iteration 

CPU Time: 0.19 MICROSECONDS plus or minus 0.079 

Wall/CPU: 1.06 ratio. Iteration Count: 1024000 

Test Description: Measures Compiler’s choice to UNWRAP a small loop of five (5) iterations 
when given a PRAGMA OPTIMIZE (Space). An execution speed < .05 
microseconds indicates the unwrap occurred. 


Test Name: POOOOOl Class Name: Procedure 

CPU Time: 0.06 MICROSECONDS plus or minus 0.079 

Wall/CPU: 1.05 ratio. Iteration Count: 1024000 

Test Description: Procedure call and return time (may be zero if automatic inlining) procedure 
is local no parameters. 


Test Name: P000002 

CPU Time: 7.01 MICROSECONDS 

Wall/CPU: 1.06 ratio. 


Class Name: Procedure 
plus or minus 0.351 
Iteration Count: 512000 


Test Description: Procedure call and return time. Procedure is local, no parameters when 
procedure is not inlinable. 


Test Name: P000003 Class Name: Procedure 

CPU Time: 7.07 MICROSECONDS plus or minus 0.353 

Wall/CPU: 1.08 ratio. Iteration Count: 512000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
conqtiled package. Compare to P000002. 


82 










APPENDIX 1 

PIWG (RRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name; P000004 Class Name: Procedure 

CPU Time: 0.52 MICROSECONDS plus or minus 0.079 

Wall/CPU: 1.06 ratio. iteration Count: 1024000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package pragma INLINE used. Compare to POOOOO1. 

Test Name: P000005 Class Name: Procedure 

CPU Time: 7.85 MICROSECONDS plus or minus 0.393 

Wall/CPU: 1.05 ratio. Iteration Count: 512000 

Test Description: Procure call and return tiim measurement. The procedure is in a separately 
compiled package. One parameter, in INTEGER. 

Test Name: P000006 Class Name: Procedure 

CPU Time: 8.91 MICROSECONDS plus or minus 0.445 

Wall/CPU: 1.18 ratio. Iteration Count; 512000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, out INTEGER. 

Test Name: P000007 Class Name; Procedure 

CPU Time; 8.32 MICROSECONDS plus or minus 0.416 

Wall/CPU; 1.08 ratio. iteration Count: 512000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, in out INTEGER. 

Test Name: POOOOlO Class Name: Procedure 

CPU Time: 15.35 MICROSECONDS plus or minus 0.768 

Wall/CPU: 1.05 ratio. iteration Count: 256000 

Test Description: Procedure call and return time measurement. Con^areto P000005 10 
parameters, in INTEGER. 

Test Name: POOOOIl Class Name: Procedure 

CPU Time; 22.58 MICROSECONDS plus or minus 1.129 

Wall/CPU: 1.07 ratio. iteration Count; 256000 

Test Description: Procedure call and return time measurement. Compare to P000005, POOOOlO 
20 parameters, in INTEGER. 

Test Name: P0000I2 Class Name: Procedure 

CPU Time; 10.98 MICROSECONDS plus or minus 0.549 

Wall/CPU; 1.05 ratio. iteration Count; 256000 

Test Description; Procedure call and return time measurement. Compare with POOOOlO 

(discrete vs composite parameters) 10 paramaters, in MY.RECORD a three 
component record. 


83 




APPENDIX I 

PIWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

Test Name: P000013 Class Name: Procedure 

CPU Time: 13.87 MICROSECONDS plus or minus 0.693 

Wall/CPU: 1.08 ratio. Iteration Count: 256000 

Test OescripticHi: Procedure call and return time measurement 20 con^site 'in' parameters the 
composite type is a three component record 

Test Name: TOOOOOl Class Name: Tasking 

CPU Time: 175.78 MICROSECONDS plus or minus 8.789 

Wall/CPU: 1.08 ratio. Iteration Count: 25600 

Test Description: Minimum rendezvous, entry call and return time 1 task 1 entry, task inside 
procedure no select. 


Test Name: T000002 Class Name: Tasking 

CPU Time: 171.48 MICROSECONDS plus or minus 8.574 

Wall/CPU: 1.04 ratio. Iteration Count: 25600 

Test Description: Task entry call and return time measured. One task active, one entry in task, 
task in a package, no select statement. 

Test Name: T000003 Class Name: Tadcing 

CPU Time: 183.59 MICROSECONDS plus or minus 9.180 

Wall/CPU: 1.10 ratio. Iteration Count: 25600 

Test E>escription: Tad( entry call and return time measured. Two tasks active, one entry per 
task, tasks in a package, no select statement. 

Test Name: T000004 Class Name: Tasking 

CPU Time: 205.86 MICROSECONDS plus or minus 10.293 

Wall/CPU: 1.05 ratio. Iteration Count: 25600 

Test Description: Task entry call and return time measured. One tasks active, two entries, tasks 
in a packi^e using select statement. 

Test Name: T000005 Class Name: Tasking 

CPU Time: 230.00 MICROSECONDS plus or minus 11.500 

Wall/CPU: 1.11 ratio. Iteration Count; 32000 

Test Description: Task entry call and return time measured. 10 tasks active, one entry per task, 
tasks in a package, no select ^tement. 


Test Name: T000006 Class Name: Tasking 

CPU Time: 321.25 MICROSECONDS plus or minus 16.062 

Wall/CPU: 1.06 ratio. Iteration Count; 16000 

Test Description: Task entry call and return time nteasurement. One task with ten entries, task 
in a package one select statonent, compare to T000005. 


84 







APPENDIX 1 

PIWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: T000008 Class Name: Tasking 

CPU Time: 375.01 MICROSECONDS plus or minus 18.750 

Wall/CPU: 1.09 ratio. Iteration Count: 12800 

Test Description: Measure the average time to pass an integer from a producer task through 
buffer task to a consumer task. 


Test Name: YOOOOOl Measure actual delay vs commanded delay 


Commanded 

Actual 

CPU 

Iterations 

0.0010 

0.0100 

0.0000 

1024 

0.0020 

O.OIOI 

0.0000 

512 

0.0039 

0.0107 

0.0000 

256 

0.0078 

0.0099 

0.0000 

128 

0.0156 

0.0200 

0.0000 

64 

0.0313 

0.0400 

0.0000 

32 

0.0625 

0.0699 

0.0000 

16 

0.1250 

0.1299 

0.0000 

8 

0.2500 

0.2500 

0.0000 

4 

0.5000 

0.5000 

0.0000 

2 

1.0000 

1.0000 

0.0000 

2 

2.0000 

2.0000 

0.0000 

2 


$! Iron one feature at a time if results are better 

$! Imail in printout 
$ ADA AOOOIOI labout half the features 
$ ADA A000I02 !the other half 
$ ACS LINK AOOOIOI 

%ACS-I-CL_LINKING, Invoking the VMS Linker for VAX_VMS tai^et 
$SET DEFAULT $I$DIA9:[DAVIDSON.PIWGl 
SLINK :* "" 

SLINK- 

/NOMAP- 

/EXE»[]A000I0I- 

SYS$INPUT:/OPT10NS 
$ I $DI A9:[DA VIDSON.PIWG] AOOO101 .OBJ; 1 
SSTATUS « SSTATUS 

SDELETE $ ISDl A9:IDAVIDSON.PIWG]A000101.OBJ; 1 

$DELETE$I$DIA9:[DAVIDSON.PIWG]A00010I.COM;I 

SEXIT 

$ ACS LINK A000I02 

%ACS-1-CL J-INKING, Invoking the VMS Linker for VAX.VMS target 
SSET DEFAULT $1$D1A9:(DAVIDS0N.PIWG] 

SLINK:- "" 

SLINK- 

/NOMAP- 










APPENDIX I 

PIWO (PIRST) eXECUnON TEST RESULTS USING DEC ADA ON THE VAX COMPinTR 

/EXE-aA0OOIO2- 

SYSSlNPl/Tr/OPnONS 

$I$DIA9:[DAVIDSON.P1WG1A000102.0BJ;1 

$STATUS-$STATUS 

$DELETE$i$DlA9;[DAVIDSON.PIWG]A000102.0BJ;l 
$DELETE $1$DIA9:[DAVIDSON.PIWG]A000102.COM; 1 
$EX1T 

$ ACS UNK AOOOOSl 

%ACS-1<CL LINKING, Invoking the VMS Linko* for VAX_VMS target 
$SET DEFAULT $I$DIA9:IDAVIDS0N.P1WG) 

SLINK.-"* 

SLINK- 

/NOMAP- 

/EXE-nAOOOOSl- 

SYS$INPUTA)PnONS 
$ I SDIA9:[0AV1DS0N.PI WG] A000051 .OBJ; I 
SSTATUS-SSTATUS 

SDELETE $ ISDI A9:[DAVIDSON.PIWG]A000051 .OBJ; 1 
SDELETE SI SDI A9:[DAV10S0N.PIWG] AOOOOS1 .COM; 1 
SEXIT 

$ ACS LINK A000052 

%ACS-I-CL LINKING, Invoking the VMS Linker for VAX_VMS target 
SSET DEFAULT $l$DIA9:(DAVIDSON.PIWG] 

SLINK.-"" 

SLINK- 

/NOMAP- 

/EXE>-aA0000S2- 

SYS$INPUT:/OPTIONS 
S1 SDI A9;[DAV1 DSON.PIWG]A000052.0BJ; I 
SSTATUS-SSTATUS 

SDELETE SI SDI A9:[DAVIDSON.PIWG]A000052.0BJ; 1 
SDELETE SI SDIA9:[DAVIDSON.PIWG]A000052.COM; 1 
SEXIT 

SACS LINK A0000S3 

%ACS-I.CL LINKING, Invoking the VMS Linker for VAX_VMS target 
SSET DEFAULT $I$DIA9:[DAVIDSON.PIWG] 

SLINK-"" 

SLINK- 

/NOMAP- 

/EXE-0A0000S3- 

SYSSINPUTi/OPTIONS 

$1SDIA9;[DAVIDSON.P1WG]A000053.0BJ;1 

SSTATUS-SSTATUS 

SDELETE SISDIA9:[DAVIDSON.PIWG]A000053.0BJ; 1 
SDELETE SI SDI A9:pAVIDSON J»IWG]A000053.COM; 1 
SEXIT 


86 







APPENDIX I 

nWO (FUST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 
SACS LINK A0000S4 

%ACS-1-CL_LINKING. Invoking the VMS Linker for VAX^VMS target 
SSET DEFAULT $1$DIA9:[DAV1DS0N.P1WG] 

SLINK.-"- 

SLINK. 

/NOMAP- 

/EXE>-aA0000S4. 

SYSSINPUTi/OPTIONS 
SI SDl A9:[DA V1DSON.PIWG] A000054.0BJ; 1 
SSTATUS-SSTATUS 

SDELETE SISDI A9:[DAVIDSON.PIWG]A000054.0BJ; I 
SDELETE S1 SDLA9:[DAVIDSON.P1WG]AOOOOS4.COM; 1 
SEXIT 

S ACS LINK A000055 

%ACS-I.CL_LINKING, Invoking the VMS Linker for VAX VMS target 

SSET DEFAULT S1SDIA9:[DAVIDS0N.P1WG1 

SLINK- 

SLINK- 

/NOMAP- 

/EXE-UA000055- 

SYSSINPUTr/OPTIONS 
S1 SDl A9:[DA VIDSON.PIWG]A000055.0BJ; 1 
SSTATUS • SSTATUS 

SDELETE S1 SDI A9:[DAVIDSON.PIWG]A000055.0BJ; 1 
SDELETE S1 SDl A9:[DAV1DS0N.PIWG] A000055.COM; I 
SEXIT 

S ACS LINK A000095 

%ACS-I-CL_L1NKING, Invoking the VMS Linker for VAX^VMS target 

SSET DEFAULT S1SDIA9:[DAV1DS0N.PIWG1 

SLINK - - 

SLINK- 

/NOMAP- 

/EXE-[]A000095- 

SYSSINPUT:/OPTIONS 
SISD1A9:[DAVIDSON.PIWG]A000095.0BJ;1 
SSTATUS - SSTATUS 

SDELETE SI SDI A9:[DA VIDSON.PI WG]A000095.0BJ; I 
SDELETE S ISDIA9:[DAVIDSON.PIWG]A000095.COM; 1 
SEXIT 

S ACS LINK Y000002 

%ACS-1-CL_LINKING, Invoking the VMS Linker for VAX_VMS target 
SSET DEFAULT S1SD1A9:[DAVIDS0N.PIWG] 

SLINK 

SLINK- 

/NOMAP- 

/EXE-DY000002- 


87 








APPENDKI 

PIWO (PIKST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

SYSSINPUTi/OPTIONS 
$ I $Dl A9:[DA VIDSON.P1WG]Y000002.0BJ; 1 
SSTATUS-SSTATUS 

SDELETB $ 1 $D1A9:[DAVIDSON.PIWG1Y000002.0BJ; 1 
$DELETE $ 1$D1A9:[DAV1DSON.PIWG]Y000002.COM; 1 
$EXIT 

$ ACS LINK Y000003 

%ACS-1-CL LINKING, Invoking the VMS Linker for VAX_VMS target 
$SET DEFAULT $I$DIA9:[DAV1DS0N.P1WG] 

SLINK:-"" 

SLINK- 

/NOMAP- 

/EXE-[]Y000003- 

SYSSINPUT:/OPnONS 

SISDIA9:[DAVIDSON.PIWG]Y000003.0BJ;1 

SSTATUS-SSTATUS 

SDELETESISDIA9:[DAVIDSON.PIWG]Y000003.0BJ;1 
SDELETE SISDI A9:PAV1DSON.PIWG]Y000003.COM; 1 
SEXIT 

SRUN AOOOOSl 

CPUtintenow- 1689,3900 WALL time now- 65495.6900 seconds. 

S RUN A000052 
S RUN A000053 
S RUN A000054 
S RUN AOOOIOl 

0.0201 - clock resolution used for iteration stability 

Test Name: A000090 

Clock resolution measurement running 

Test Description: Determine clock resolution using second differences of values returned by the 
function CPU_Time_Clock. 

Number of sample values is 12000 

Clock Resolution - 0.009948730468750 seconds. 

Clock R^lution (average) - 0.009948730468750 seconds. 

Clock Resolution (variance) - 0.0000000000000(X) seconds. 

Ciqnure a few sizes for later analysis 
1 Boolean'size 
8 Boolean_object'size 
8 Character’size 
8 Character^object'size 

31 Positive'size 

32 Positivejobjecf size 
32 Integer'size 

32 Floafsize 


88 








APPENDIX I 

PIWQ (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


32 Durstion'size 

0.0001 Diiratton'small 
0.0099 SystentTick 

TestNamr. A000091 Class Name: Composite 

CPU Time: 171.09 MICROSECONDS plus or minus 8.SSS 

Wall/CPU: 1.10 ratio. iteration Count: 25600 

Test Deacaription: Reinhold P. Weicker^s DHRYSTONE composite benchmark. 

Test Name: A000092 Class Name: Composite 

CPU Time: 142.50 MILLISECONDS plus or minus 7.125 

Wall/CPU: 1.07 ratio. Iteration Count: 40 

Test Description: Ada version of the Whetstone Benchmark Program. Manufacturers math 
routines 

Average Whetstone rating: 7018 KWIPS 

Test Name: A000093 Class Name: Composite 

CPU Time: 178.25 MILLISECONDS plus or minus 8.912 

Wall/CPU: 1.04 ratio. Iteration Count: 40 

Test Description: Ada version of the Whetstone Boichmark Program. Built in 'standard* math 

routines. 

Average Whetstone rating: 5610 KWIPS 


Test Name: A000094 
Perm 0.48 
Towers 0.72 
Queens 0.24 
Intmm 0.19 
Mm 0.22 
Puzzle 1.11 
Quick 0.18 
Bubble 0.24 
Tree 0.41 
FFT 0.30 
Ack 16.40 

Test Description: H«iessy benchmarks. 


Class: Composite 


Test Name: A000094A Class Name: Composite 

CPU Time: 0.43 SECONDS plus or minus 0.022 

Wall/CPU: 1.11 ratio. Iteration Count: 10 

Test Description: Hennesy Boichmaric, Perm highly recursive 43300 uses of procedure 
permute. 


89 



APPENDIX 1 

PIWG (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Tor Name: A000094B Class Name: Composite 

CPU Time: 0.73 SECONDS plus or minus 0.037 

Wali/CPU: 1.09 ratio. Iteration Count; 10 

Test Description: Hennesy Benchmaric, TOWERS highly recursive. 

Test Name: A000094C Class Name: Composite 

CPU Time: 0.24 SECONDS plus or minus 0.012 

Wall/CPU: 1,06 ratio. Iteration Count: 20 

TeM Description: Hennesy Benchmark, Queens hi^ly recursive. 

Test Name: A000094D Class Name: Composite 

CPU Time: 0.17 SECONDS plus or minus 0.009 

Wall/CPU: 1.03 ratio. Iteration Count: 40 

Test Description; Hennesy Benchmark, Intmm integer matrix multiply performed by an 
instantiated generic procedure. 

Test Name: A000094E Class Name: Composite 

CPU Time: 0.19 SECONDS plus or minus 0.010 

Wall/CPU: 1.05 ratio. iteration Count: 40 

Test Description: Hennesy Benchmark, Mm real matrix multiply performed by an instantiated 
generic procedure. 

Test Name: A000094F Class Name: Composite 

CPU Time: 1.10 SECONDS plus or minus 0.055 

Wall/CPU: 1.03 ratio. iteration Count: 10 

Test Description: Hennesy Benchmark, Puzzle highly recursive. 

Test Name; A000094G Class Name: Composite 

CPU Time: 0,18 SECONDS plus or minus 0.009 

Wall/CPU: 1.09 ratio. iteration Count; 40 

Test Description: Hennesy Benchmark, quick sort 5000 element random integer array using 
quick sort. 

Test Name: A000094H Class Name: Composite 

CPU Time: 0.25 SECONDS plus or minus 0.012 

Wall/CPU: 1.12 ratio. iteration Count: 20 

Test Description: Hennesy Benchmaric, Bubble sort 5000 random integer array using bubble 
sort. 


Test Name: A000094I Class Name: Composite 

CPU Time: 0.38 SECONDS plus or minus 0.019 

Wall/CPU: 1.09 ratio. iteration Count: 20 

Test Description: Hennesy B«ichmark, Tree insert 5000 random elements into a tree that is 
sorted. 


90 









APPENDIX I 

PIWO (RRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: A000094J Class Name: Composite 

CPU Time: 0.28 SECONDS plus or minus 0.014 

Wall/CPU: 1.09 ratio. Iteration Count: 16 

Test Description: Hennesy Benchmark, FFT perform 20 256 point complex FFTs floating point 
intensive. 

Test Name: A000094K Class Name: Composite 

CPU Time: 16.57 SECONDS plus or minus 0.058 

Wall/CPU: 1.43 ratio. Iteration Count: 2 

Test Description: Hennesy Benchmark, Ack highly recursive 10 executions of Ackerman (3,6) 

Test Name: BOOOOOIA Class Name: Application 

CPU Time: 829.00 MICROSECONDS plus or minus 23.100 

Wall/CPU: 2.87 ratio. Iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix fixed point, delta 
2.0**(-15) all checks on. 

Test Name: BOOOOOIB Class Name: Application 

CPU Time: 550.99 MICROSECONDS plus or minus 12.195 

Wall/CPU: 1.51 ratio. Iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix fixed point, delta 
2.0**(-15) checks suppressed. 

Test Name: B000002A Class Name: Application 

CPU Time: 441.00 MICROSECONDS plus or minus 11.491 

Wall/CPU: 1.43 ratio. Iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 6 range - 
1 .Oe+9.. 1 .Oe+9 all checks on. 

Test Name: B000002B Class Name: Application 

CPU Time: 313.00 MICROSECONDS plus or minus 15.650 

Wall/CPU: 1.04 ratio. Iteration Count: 20000 

Test Description: Tracking mathematical application using covarience matrix digits 6 range - 
1.Oe+9.. 1.Oe+9 checks suppressed. 

Test Name: B000003A Class Name: Application 

CPU Time: 880.00 MICROSECONDS plus or minus 10.098 

Wall/CPU: 1.25 ratio. Iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 9 range - 
1.Oe+9.. 1.Oe+9 all checks on. 


Test Name: B000003B Class Name: Application 

CPU Time: 509.00 MICROSECONDS plus or minus 25.450 

Wall/CPU: 1.04 ratio. Iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 9 range 
1 .Oe+9.. 1 .Oe+9 checks suppressed. 


91 








APPENDIX 1 

PIWO (HRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

Test Name: B000004A Class Name: Application 

CPU Time: 478.00 MICROSECONDS plus or minus 23.900 

Wall/CPU: 1.01 ratio. Iteration Count: 10000 

Test Description: Tracking mathematical application using covarience matrix digits 6 and 
integer all checks on. 

Test Name: B000004B Class Name: Application 

CPU Time: 322.50 MICROSECONDS plus or minus 16.125 

Wall/CPU; 1.03 ratio. Iteration Count: 20000 

Test Description: Tracking mathematical application using covarience matrix digits 6 and 
integer checks suppressed. 

Test Name: BOOOOlO Class Name: Composite 

CPU Time: 940.00 MILLISECONDS plus or minus 47.000 

Wall/CPU: 1.03 ratio. Iteration Count: 5 

Test Description: NASA Orbit determination heavy floating point and trig initializing and 
running. 

4.75433302E+03 4.65319583E-K)3 2.26151483E+02 
-5.29274842E+00 5.22249948E+00 2.25443633E-K)0 


Test Name: BOOOOll Class Name: Composite 

CPU Time: 87.25 MILLISECONDS plus or minus 2.990 

Wall/CPU: 2.97 ratio. Iteration C ant: 80 

Test Description: JIAWG Kalman benchmark. Just put in PIWG measurement harness. 

Test Name: B000013 Class Name: Composite 

CPU Time: 7.47 MILLISECONDS plus or minus 0.374 

Wall/CPU: 1.01 ratio. Iteration Count: 800 

Test Description: TRACKER CENTROID Algorithm. All integer calculations searching a 60 x 
60 array. 

Test Name: COOOOOl Class Name: Tasking 

CPU Time: 1943.74 MICROSECONDS plus or minus 31.937 

Wall/CPU: 1.27 ratio. Iteration Count: 3200 

Test Description: Task create and terminate measurement with one task, no entries, when task is 
in a procedure using a task type in a package, no select statement, no loop. 

Test Name: C000002 Class Name: Tasking 

CPU Time: 1903.15 MICROSECONDS plus or minus 30.451 

Wall/CPU: 1.21 ratio. Iteration Count: 3200 

Test Description: Task create and terminate time measurement, with one task, no entries when 
task is in a procedure, task defined and used in procedure, no select statement, 
no loop. 



92 







APPENDIX I 

PIWG (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: C000003 Class Name: Tasking 

CPU Time: 1890.62 MICROSECONDS plus or minus 94.531 

Wall/CPU: 1.06 ratio. iteration Count: 3200 

Test Description: Task create and terminate time measurement. Task is in declare block of 
main procedure one task, no entries, task is in the loop. 

Test Name: DOOOOOl Class Name: Allocation 

CPU Time: 2.56 MICROSECONDS plus or minus 0.197 

Wall/CPU: 5.06 ratio. Iteration Count: 409600 

Test DescriiRion: Dynamic array allocation, use and deallocation time measurement. 

Dynamic array elaboration, 1000 integers in a procedure get space and free it 
in the procedure on each call. 

Test Name: D000002 Class Name: Allocation 

CPU Time: 550.00 MICROSECONDS plus or minus 9.169 

Wall/CPU: 1.46 ratio. Iteration Count: 12800 

Test Description: Dynamic array elaboration and initialization time measurement 

allocation, initialization, use and deallocation 1000 integers initialized by 
others*>l. 

Test Name: D000003 Class Name: Allocation 

CPU Time: 2.78 MICROSECONDS plus or minus 0.197 

Wall/CPU: 1.07 ratio. Iteration Count: 409600 

Test Description: Dynamic record allocation and deallocation time measurement 

elaborating, allocating and deallocating record containing a dynamic array of 
1000 integers. 

Test Name: D000004 Class Name: Allocation 

CPU Time: 548.43 MICROSECONDS plus or minus 27.422 

Wall/CPU: 1.19 ratio. Iteration Count: 12800 

Test Description: Dynamic record allocation wd deallocation time measurement elaborating, 
initializing by (DYNAMlC_SIZE,(others»>l)) record containing a dynamic 
array of 1000 integers. 

$ RUN A000102 

0.0201 = clock resolution used for iteration stability 

Test Name: EOOOOOl Class Name: Exception 

CPU Time: 88.48 MICROSECONDS plus or minus 4.424 

Wall/CPU: 1.03 ratio. Iteration Count: 51200 

Te^ Description: Time to raise and handle an exception. Exception defined locally and handled 
locally. 


93 







APPENDIX I 

PIWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

Test Name: E000002 Class Name: Exception 

CPU Time: 146.49 MICROSECONDS plus or minus 7.324 

Wall/CPU: 1.07 ratio. Iteration Count: 25600 

Test Description: Exception raise and handle timing measurement when exception is in a 
proc^ure in a package. 

Test Name: E000003 Class Name: Exception 

CPU Time: 98.44 MICROSECONDS plus or minus 4.922 

Wall/CPU: 1.05 ratio. Iteration Count: 51200 

Test Description: Exception raise and handle timing measurement when exception is raised 
nest^ 3 deep in procedure calls. 

Test Name: E000004 Class Name: Exception 

CPU Time: 98.63 MICROSECONDS plus or minus 4.932 

Wall/CPU: 1.06 ratio. Iteration Count: 51200 

Test Description: Exception raise and handle timing measurement when exception is nested 4 
deep in procedures. 

Test Name: E000005 Class Name: Exception 

CPU Time: 995.30 MICROSECONDS plus or minus 49.765 

Wall/CPU: 1.09 ratio. Iteration Count: 6400 

Test Description: Exception raise and handle timing measurement when exception is in a 
rendezvous. Both the task and the caller must handle the exception. 

Test Name: FOOOOOl Class Name: Style 

CPU Time: 0.54 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.06 ratio. Iteration Count: 819200 

Test Description: Time to set a boolean flag using a logical equation a local and a global integer 
are compared compare this test with F000002. 

Test Name: F000002 Class Name: Style 

CPU Time: 0.46 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.08 ratio. Iteration Count: 819200 

Test Description: Time to set a boolean flag using an 'if test a local and a global integer are 
compared. Compare this test with FOOOOOl. 


Test Name: GOOOOOI Class Name: Input/Output 

CPU Time: 110.11 MICROSECONDS plus or minus 2.685 

Wall/CPU: 1.37 ratio. Iteration Count: 40960 

Test Description: TEXTJO.GETJLINE reading 20 characters, time measured. A scratch file is 
written, then read and reset. 


94 





APPENDIX I 

PIWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: G000002 Class Name: Input/Output 

CPU Time: 769.54 MICROSECONDS plus or minus 38.477 

Wall/CPU: 1.07 ratio. Iteration Count: 5120 

Test Description: TEXT_IO.GET called 20 times per line, time measured a scratch file is 

written, then read and reset. Compare to GOOOOOl for about same number of 
characters. 


Test Name: G000003 Class Name: Input/Output 

CPU Time: 832.04 MICROSECONDS plus or minus 166.720 

Wall/CPU: 21.19 ratio. Iteration Count; 10240 

Test Description: TEXTJO.PUT_LINE for 20 characters, timing measurment a scratch file is 
opened, written and reset. 


Test Name: G000004 Class Name; Input/Output 

CPU Time: 1367.20 MICROSECONDS plus or minus 167.903 

Wall/CPU: 10.67 ratio. Iteration Count: 5120 

Test Description; TEXTJO.PUT 20 times with one character, time measurement a scratch file 
is written, reset and rewritten. Compare, iq>proximately, to G000003. 

Test Name: G000005 Class Name: Input/Output 

CPU Time: 60.79 MICROSECONDS plus or minus 3.039 

Wall/CPU: 1.02 ratio. Iteration Count: 40960 

Test Description: TEXT_10.GET an integer from a local string, timing measurement use 

TEXTJO.PUT to convert 1.. 100 to a string, then use TEXT_10.GET to get 
the number back. 


Test Name: G000006 Class Name: Input/Output 

CPU Time: 177.25 MICROSECONDS plus or minus 5.513 

Wall/CPU: 1.40 ratio. Iteration Count: 20480 

Tost Description: TEXT_IO.GET getting a floating point fraction from a local string, timing 
measurement on 0.001 to 0.01 range of numbers compare, approximately, to 
G000005 for integer vs float. 

Test Name: G000007 Class Name: Input/Output 

CPU Time: 20999.91 MICROSECONDS plus or minus 1051.536 

Wall/CPU: 4.18 ratio. Iteration Count: 320 

Test Description: Open and close an existing file, time measurement. A scratch file is created 
and closed. The scratch file is opened 1N_F1LE and closed in a loop 

Test Name: HOOOOOl Class Name: Chapter 13 

CPU Time: 1.77 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.24 ratio. Iteration Count: 819200 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are PACKED with the pragma 'PACK.’ For this test the 
operations are performed on the entire arrays. 


95 







APPENDIX I 

PIWO (HRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

Test Name: H000002 Class Name; Chapter 13 

CPU Time; 42.68 MICROSECONDS plus or minus 2.134 

Wall/CPU: 1.13 ratio. Iteration Count: 102400 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are NOT PACKED with the pragma 'PACK.' For this test the 
operations are performed on the entire array. 

Test Name: H000003 Class Name: Chapter 13 

CPU Time: 132.23 MICROSECONDS plus or minus 6.611 

Wall/CPU: 1.07 ratio. Iteration Count: 51200 

Test Description: Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are PACKED with the pragma 'PACK.' For this test the 
operations are performed on components in a loop. 

Test Name: H000004 Class Name: Chapter 13 

CPU Time: 44.53 MICROSECONDS plus or minus 2.227 

Wall/CPU: 1.02 ratio. Iteration Count: 102400 

Test Description; Time to perform standard boolean operations on arrays of booleans. For this 
test the arrays are NOT PACKED with the pragma 'PACK.' For this test the 
operations are performed on components in a loop. 

Test Name: H000005 Class Name: Chapter 13 

CPU Time: 0.13 MICROSECONDS plus or minus 0.098 

Wall/CPU: 1.03 ratio. Iteration Count: 819200 

Test Description: The time for UNCHECKED.CONVERSION to move one INTEGER 
object to another INTEGER object. This may be zero with good 
optimization. 

Test Name: H000006 Class Name: Chapter 13 

CPU Time: 7.45 MICROSECONDS plus or minus 0.372 

Wall/CPU: 1.03 ratio. Iteration Count: 409600 

Test Description: The time for UNCHECKED_CONVERSION to move 10 floating array 
objects to a 10 component floating record. 


Test Name; H000007 Class Name: Chapter 13 

CPU Time: 10.74 MICROSECONDS plus or minus 0.537 

Wall/CPU; 1.02 ratio. Iteration Count: 409600 

Test Description: The time to store and extract bit fields that are defined by representation 

clauses using Boolean and Integer record components. 12 accesses, 5 stores, I 
record copy. 


96 





APPENDIX I 

PIWG (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: H000008 Class Name: Chapter 13 

CPU Time: 4.05 MICROSECONDS plus or minus 0.203 

Wall/CPU: 1.03 ratio. Iteration Count: 409600 

Test Description: The time to store and extract bit fields that are defined by nested 

representation clauses using packed arrays of Boolean and Integer record 
components. 

Test Name: H000009 Class Name: Chapter 13 

CPU Time: 12.79 MICROSECONDS plus or minus 0.640 

Wall/CPU: 1.04 ratio. Iteration Count: 409600 

Test Description: The time to perform a change of representation. If the result is near zero, 
feature probably not in^Iemented. 

Test Name: LOOOOOl Class Name: Iteration 

CPU Time: 0.27 MICROSECONDS plus or minus 0.063 

Wall/CPU: 1.04 ratio. Iteration Count: 1280000 

Test Description: Simple "for" loop time for 1 in 1 .. 100 loop time reported is for once through 
loop. 

Test Name: L000002 Class Name: Iteration 

CPU Time: 0.27 MICROSECONDS plus or minus 0.063 

Wall/CPU: 1.04 ratio. Iteration Count: 1280000 

Test Description: Simple "while" loop time while I 100 loop time reported is for once 
through loop. 

Test Name: L000003 Class Name: Iteration 

CPU Time: 0.26 MICROSECONDS plus or minus 0.063 

Wall/CPU: 1.04 ratio. iteration Count: 1280000 

Test Description: Simple "exit" loop time loop I:*l+1; exit when I>100; end loop; time reported 
is for once through loop. 

Test Name: L000004 Class Name: Iteration 

CPU Time: 0.30 MICROSECONDS plus or minus 0.079 

Wall/CPU: 1.04 ratio Iteration Count: 1024000 

Test Description: Measures Compiler's choice to UNWRAP a small loop of 5 iterations when 
given a PRAGMA OPTIMIZE(TIME). An execution time less than .05 
microseconds indicates the unwrap occurred. 


Test Name: L000005 


Class Name: Iteration 


CPU Time: 
Wall/CPU: 

Test Description: 


0.21 MICROSECONDS plus or minus 0.079 

1.03 ratio. Iteration Count: 1024000 

Measures Compiler's choice to UNWRAP a small loop of 5 iterations when 
given a PRAGMA OPTIMIZE! Space). An execution speed < .05 
microseconds indicates the unwrap occurred. 


97 





APPENDIX I 

PIWG (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

TestNune: POOOOOl Class Name: Procedure 

CPU Time: 0.06 MICROSECONDS plus or minus 0.079 

Wall/CPU: 1.05 ratio. Iteration Count: 1024000 

Test Description: Procedure call and return time (may be zero if automatic inlining) procedure 
is local, no parameters. 

Test Name: P000002 Class Name: Procedure 

CPU Time: 7.15 MICROSECONDS plus or minus 0.357 

Wall/CPU: 1.05 ratio. Iteration Count: 512000 


Test Description: Procedure call and return time. Procedure is local, no parameters when 
procedure is not inlinable. 


Test Name: P000003 Class Name: Procedure 

CPU Time: 7.32 MICROSECONDS plus or minus 0.366 

Wall/CPU: 1.02 ratio. Iteration Count: 512000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. Compare to P000002. 

Test Name: P000004 Class Name: Procedure 

CPU Time: 0.48 MICROSECONDS plus or minus 0.079 

Wall/CPU: 1.04 ratio. Iteration Count: 1024000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package pragma INLINE used. Compare to POOOOOI. 

Test Name: P000005 Class Name: Procedure 

CPU Time: 7.95 MICROSECONDS plus or minus 0.397 

Wall/CPU: 1.04 ratio. iteration Count: 512000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, in INTEGER 

Test Name: P000006 Class Name: Procedure 

CPU Time: 8.16 MICROSECONDS plus or minus 0.408 

Wall/CPU: 1.03 ratio. iteration Count: 512000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, out INTEGER. 

Test Name: P000007 Class Name: Procedure 

CPU Time: 8.44 MICROSECONDS plus or minus 0.422 

Wall/CPU: 1.04 ratio. iteration Count: 512000 

Test Description: Procedure call and return time measurement. The procedure is in a separately 
compiled package. One parameter, in out INTEGER 


98 







APPENDIX 1 

WWO (FIRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Test Name: POOOOlO 

CPU Time: 15.43 MICROSECONDS 

WaiyCPU: 1.06 ratio. 

Test Description: Procedure call and return time 
parameters, in INTEGER 

Test Name: POOOOl 1 

CPU Time: 22.89 MICROSECONDS 

Wall/CPU: 1.04 ratio. 

Test Description: Procedure call and return time 
20 parameters, in INTEGER. 


Class Name: Procedure 
plus or minus 0.771 
Iteration Count: 256000 
measurement. Compare to P000005 10 


Class Name: Procedure 
plus or minus 1.144 
Iteration Count: 256000 
measurement. Compare to P000005, POOOOlO 


Test Name: P000012 Class Name: Procedure 

CPU Time: 10.59 MICROSECONDS plus or minus 0.529 

Wall/CPU: 1.02 ratio. Iteration Count: 256000 

Test Description: Procedure call and return time measurement. Compare with POOOOlO 
(discrete vs composite parameters) 10 paramaters, in MY.RECORD a 3 
component record. 


Test Name: P000013 Class Name: Procedure 

CPU Time: 14.22 MICROSECONDS plus or minus 0.711 

Wall/CPU: 1.04 ratio. Iteration Count: 256000 

Test Description: Procedure call and return time measurement 20 composite 'in' parameters. 
The composite type is a 3 component record. 

Test Name: TOOOOOl Class Name: Tasking 

CPU Time: 176.95 MICROSECONDS plus or minus 8.848 

Wall/CPU: 1.05 ratio. iteration Count: 25600 

Test Description: Minimum rendezvous, entry call and return time 1 task 1 entry, task inside 
procedure no select. 

Test Name: T000002 Class Name: Tasking 

CPU Time: 175.00 MICROSECONDS plus or minus 8.750 

Wall/CPU: 1.06 ratio. iteration Count: 25600 

Test Description: Task entry call and return time measured. One task active, 1 entry in task, 
task in a package, no select statement. 

Test Name: T000003 Class Name: Tasking 

CPU Time: 174.22 MICROSECONDS plus or minus 8.711 

Wall/CPU: 1.03 ratio. iteration Count: 25600 

Test Description: Task entry call and return time measured. Two tasks active, 1 entry per 
task, tasks in a package, no select statement. 


99 








APPENDIX I 

PIWG (RRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

Test Name: T000004 Class Name: Tasking 

CPU Time: 217.19 MICROSECONDS plus or minus 10.859 

Wall/CPU: 1.04 ratio. iteration Count: 25600 

Test Description: Task entry call and return time measured. One tasks active, 2 entries, tasks 
in a package, using select satement. 

Test Name: T000005 Class Name: Tasking 

CPU Time: 226.25 MICROSECONDS plus or minus 11.312 

Wall/CPU: 1.01 ratio. Iteration Count: 32000 

Test Description: Ta^ entry call and return time measured. Ten tasks active, 1 entry per task, 
tasks in a package, no select statement. 

Test Name: T000006 Class Name: Tasking 

CPU Time: 304.38 MICROSECONDS plus or minus 15.219 

Wall/CPU: 1.01 ratio. Iteration Count: 16000 

Test Description: Ta^ entry call and return time measurement. One task with 10 entries, task 
in a package, 1 select statement, compare to T000005. 

Test Name: T000008 Class Name: Tasking 

CPU Time: 388.28 MICROSECONDS plus or minus 19.414 

Wall/CPU: 1.01 ratio. Iteration Count: 12800 

Test I!)escription: Measure the average time to pass an integer from a producer task through a 
buffer task to a consumer ta^. 


Test Name: YOOOOOl Measure actual delay vs conunanded delay 


Commanded 

Actual 

CPU 

Iterations 

0.0010 

0.0100 

0.0000 

1024 

0.0020 

0.0099 

0.0000 

512 

0.0039 

0.0099 

0.0000 

256 

0.0078 

0.0099 

0.0000 

128 

0.0156 

0.0200 

0.0000 

64 

0.0313 

0.0400 

0.0000 

32 

0.0625 

0.0699 

0.0000 

16 

0.1250 

0.1299 

0.0000 

8 

0.2500 

0.2500 

0.0000 

4 

0.5000 

0.5000 

0.0000 

2 

1.0000 

1.0000 

0.0000 

2 

2.0000 

2.0000 

0.0000 

2 


$ RUN A000055 

%ADA-F-NAME_ERROR, NAME_ERROR 
-RMS-E-FNF, file not found 

-ADA-l-OPERINFO, While performing TEXTJO.OPEN 
-ADA-I-MODEINFO, The Mode of the file is IN.FILE 


too 





APPENDIX I 

PIWO inRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 

-ADA-I-TEXTINFO, Column 1, Line 1, Page 1, Line length is 0, Page length is 0 

-ADA>I>FILENAME, The external file specification is: 

-ADA-I-MORE1NFO,$1$D1A9:PAVIDSON.PIWG]A000052D.; 

%TRACE-E-TRACEBACK, symbolic stack dump follows 

module name routine name line relP 

absPC 




000553AD 

000553AD 

-above condition handler called with exception 0031A264; 

%ADA-F-NAME«ERROR, NAME.ERROR 
-RMS-E-FNF, file not found 

-ADA-I-OPERINFO, While performing TEXT JO.OPEN 
-ADA-I-MODEINFO, The Mode of the file is IN.FILE 
-ADA-I-TEXTlNFO, Column 1, Line 1, Page 1, Line length is 0, Page length is 0 
-ADA-I-FILENAME, The external file qjecification is: 
-ADA-I-MOREINFO.$1$DIA9:[DAVIDSON.P1WG]A000052D.; 

-end of exception message 


0004A152 0004A152 

0004FB57 0004FB57 


0004EIID 0004EnD 

A000055 A000055 69 00000131 

00003774 

ADA$ELAB_A00005 ADA$ELAB_A000055 00000009 

00002409 

000043C9 


000043C9 


0005517D 


00055I7D 

ADA$ELAB_A00005 ADA$ELAB_A000055 0000001B 

000024IB 

000043A4 


000043A4 

$ DEL SCRATCH*.*;* Ircmove scratch files from "G" tests 
$ DEL A000052D.;* Iremove intermediate timing files 

%DELETE-W-SEARCHFAIL, error searching for $1$DIA9:[DAVIDSON.PIWG]A000052D.;* 
-RMS>E-FNF, file not found 
$ DEL PIWGRES.;* Iremove saved results if any 

%DELETE-W-SEARCHFAIL, error searching for $1$DIA9:[DAV1DS0N.PIWG]PIWGRES.;* 

-RMS-E-FNF, file not found 

$!DEL [.ADALIB]*.*;* Iremove compilation library 

DAVIDSON job terminated at 1 l-JUN-1993 18:44:37.78 


101 





APPENDIX I 

PIWO (HRST) EXECUTION TEST RESULTS USING DEC ADA ON THE VAX COMPUTER 


Accounting information: 
Buffered I/O count: 
Direct I/O count: 

Page faults: 

Charged CPU time: 


I57I3 
24392 
393869 
0 00:47:03.21 


Peak working set size: 3862 
Peak page file size: 11000 

Mounted volumes: 0 

Elapsed time: 0 01:2S:08.64 


102 













appendix; 

COMMAND FILE FOR “SECOND RUN" PIWG TESTS ON THE VAX COMPUTER 

$! FOR PIWG ON THE VAX VMS 

$! THIS IS FOR "SECOND RUN" AS DERNED IN THE 

$! "README" FILE FOR PIWG 

$! 

$! VAX VMS files to coiiq>ile (using standard output PIWG.IO) 

$ SET VERIFY 
$ SET NOON 

$ SET DEF $l$DIA9:[DAVIDSON.PIWG] 

$ DEL [.ADALIB]*.*;* ! Clean out any old libraries 

$ ACS CREATE LIB [.ADALIBJ 
$ ACS SET LIB [.ADALIB] 

$ @ VAXCONFIG 
$! 

$ ADA AOOOOOl! DURATION JO instantiation 
$ ADA A0000I2 ! CPU_TIME_CLOCK.VAX 
$ ADA AOOOOSI ! wall timing routines for host only 
$ ACS LINK A000051 

$! 

$ RUN AOOOOS I 

$ RUN AOOOOS 1 ! calibrate time to measure tinw 

$ RUN AOOOOS 1 

SADAZOOOOOl 

$ADAZ000002 

$ADAZ000003 

$ ADA Z000004 

SADAZOOOOOS 

$ ADA Z000006 

$ ADAZ000007 

SADAZOOOOOS 

$ ADA Z000009 

SADAZOOOOlO 

$ ADAZOOOOll 

$ ADAZ0000I2 

$ADAZ000013 

SADAZOOOOH 

SADAZOOOOIS 

$ADAZ000016 

$ADAZ0000I6A 

SADAZOOOOl? 

$ ADAZ000017A 
SADAZOOOOIS 
SACS LINK ZOOOOIS 
SRUNZOOOOIS 
S! 

S ADA Z000020 
S ADA Z000021 


104 







APPENDIX J 

COMMAND FILE FOR “SECOND RUN” PIWG TESTS ON THE VAX COMPUTER 

$ADAZ000022 

$ADAZ000023 

$ ACS LINK 2000023 $ RUN Z000023 
$ RUN AOOOOSI ! final time measurement 

$! when this test can be run with no other tasks running, it represents a 

$! composite software develojmient benchmark. 

$! 

$ DEL SCRATCH*.*;* ! remove scratch files from "G" tests 
$ DEL A0000S2D.;* ! remove intermediate tiimng files 
$ DEL PIWGRES.;* ! remove saved results if any 
$! DEL [.ADALIB]*.*;* ! remove compilation library 



105 







APPENDIX K 

PIWG ”SECX)ND RUN” RESULTS 
USING 

DEC ADA ON THE VAX COMPUTER 


106 







APPENDIX K 

PIWO “SECOND RUN" RESULTS USING DEC ADA ON THE VAX COMPUTER 

$!SYLOGIN.COM 
$! For the AAAF CLuster 
$ set NOVERIFY 
$ SET NOON 

$ SET DEF $!$DIA9:[DAVIDSON.PIWGl 
$ DEL [.ADALIB]*.*;* ! Clean out any old libraries 

$ ACS CREATE LIB [.ADALIB] 

%ACS-1-CL_LIBCRE, Library $1$D1A9:[DAVIDS0N.PIWG. ADALIB] created 
$ ACS SET LIB [.ADALIB] 

%ACS-1-CL_L1B1S, Current program library is 
$ 1 $DIA9:[DAVIDSON.PIWG.ADALIB] 

$ @ VAXCONFIG 
System configuration: 

Cluster AAAF 
Node; JEDl 
CPU: VAX 4000-200 

Character emulated: TRUE 
F_FLOAT emulated: FALSE 
D_FLOAT emulated: FALSE 
G^FLOAT emulated: FALSE 
H_FLOAT emulated: TRUE 
VMS version: V5.5 
Virtual page count: 230000 
Working set maximum: 16400 
Main Memory (32.00Mb) 

System device: RF72 
User device: RF71 
VAX Ada software configuration: 

ADA vereion; "VAX Ada V2.2.38" 

ACS version: "VAX Ada V2.2-38" 

ADARTL version: "V5.4-03" 

ADAMSG veraion: "1-029" 

Process configuration: 

Open filelimit: 50 

Enqueue quena: 100 

Timer queue quota: 20 

Page file quota: 17000 

Working set memory parameters: 

WSQUOTA: 2500 
WSEXTENT: 4000 
Adjustment: enabled 
$ EXIT ! 0 

$! 

$ ADA AOOOOOI! DURATIONJO instantiation 
$ ADA A000012 ! CPU_TIME_CLOCK.VAX 
$ ADA A00005I ! wall timing routines for host only 
$ ACS LINK A000051 

%ACS-I-CL.LINKING, Invoking the VMS Linker for VAX VMS target 
$SET DEFAULT $l$DU9:[DAVIDSON.PIWG] 

SLINK:-"" 

SLINK- 

/NOMAP- 

/EXE-0A000051- 

SYS$INPUT:/OPTIONS 


107 







APPENDIX K 

PIWO "SECOra> RUN” RESULTS USING DEC ADA ON THE VAX COMPUTER 

$l$DlA9:rDAVlDSON.PIWG]A000051.0BJ;l 
SSTATUS • iSTATUS 

SOELETE $ I $D1 A9:rOA VIDSON.PI WG1A0000S1 .OBJ: 1 
$DELETE$1$D1A9:[DAV1DSON.PIWG1a000051.COM;1 

SExrr 

$! 

$RUNA00(X>51 

CPU time now- 22.8199 WALL time now- 41478.8800 seconds. 

$ RUN AOOOOSl 1 calibrtte time to measure time 

CPU time now- 22.9500 WALL time now- 41479.1300 seconds. 

$ RUN AOOOOSl 

CPU time now- 23.0800 WALL time now- 41479.4200 seccmds. 
SADAZOOOOOl 
$ADAZ000002 
$ADAZ000003 
$ADAZ000004 
SADAZOOOOOS 
$AOAZ000006 
$ADAZ000007 
$ADAZ000008 
$ADAZ000009 
$ADAZ000010 
SADAZOOOOll 
$ADAZ000012 
$ ADA Z000013 
$ADAZ000014 
SADAZOOOOIS 
$ADAZ000016 
$ADAZ000016A 
$ADAZ000017 
$ADAZ000017A 
$ADAZ000018 
SACS L1NKZ000018 

%ACS-1-CL_L1NKING, Invoking the VMS Linker for VAX^VMS target 
SSET DEFAULT $1$DIA9:[DAV1DS0N.P1WG] 

SLINK:-"" 

SLINK- 

/NOMAP- 

/EXE-[]Z000018- 

SYSSINPUT:/OPnONS 

SlS01A9:rDAV10SON.PIWG]Z000018.0BJ;l 

ssTATus- Status 

SDELETESlSDIA9:rDAVIDSON.PIWGlZ000018.0BJ;l 
SDELETE S1 SD1A9:[DAV1DSON.PIWG]Z000018.COM; 1 
SEXIT 

SRUNZ000018 

Test printout and value of acceleration, 9.8066SE-K)0 meter per second squared - G 
i.i0325E-H)l meter 
1 .SOOOOE-t^ second 
2.08030E-H)1 meter per second 
SI 

SADAZ000020 

SADAZ000021 

$ADAZ000022 


los 







APPENDIX K 

PIWO “SECOND RUN” RESULTS USING DEC ADA ON THE VAX COMPUTER 


$ADAZ000023 
SACS LINK Z000023 

%ACS-I>CL LINKING. Invoking the VMS Linker for VAX VMS target 
SSET DEFAULT $I$D1A9:[DAV1DS0N.PIWG] 

SUNK:-"" 

SLINK> 

/NOMAP- 

/EXE-nZ000023. 

^SSINPUT:/OPnONS 
SISDI A9:rDAVIDSON.PIWG]Z000023.0BJ; 1 
SSTATUS-SSTATUS 

SDELETESlSDIA9:rDAVIDSON.PIWGlZ000023.0BJ;l 
SDELETE SISDIA9:tDAVIDSON.PIWGjZ000023.COM; I 
SEXIT 

SRUNZ000023 

UP SORTED DATA 

1 I.OOOOOE-KX) AAA FIRST 1.09 

2 2.00000E-K)0BBB SECOND 2.09 

3 3.00000E+00CCC THIRD 3.09 

4 4.00000E-KX)DDD FOURTH 4.09 
DOWN SORTED DATA 

4 4.0OOOOE+OODDD FOURTH 4.09 
3 3.00000E+00CCC THIRD 3.09 
2 2.00000E'K)0BBB SECOND 2.09 
I l.OOOOOE-KK) AAA FIRST 1.09 
hi tile bag 
gone fishing 
end FISH 

ALL.STATEMENrS_PROCEDURE^ 
into LOOP_NAME_l 
Z000021 finished 

SRUNA00005I ! final time measurement 

CPU time now- 695.4900 WALL time now- 42445.5900 seconds. 

S! when this test can be run witii no other tasks running, it represents a conqx>site 

S! development bendimaik. 

S! 

S DEL SCRATCH*.*;* ! remove scratch files from "G" tests 
%DELETE-W>SEARCHFAIL, error searching for 
SISDIA9:[DAVIDS0N.PIWG]SCRATCH*.*;* 

•RMS-E-FNF, file not found 
S DEL A000052D.;* I remove intermediate timing files 

%DELETE-W-SEARCHFAIL. error searching for $1$DIA9:[DAVIDSON.PIWG]A000052D.;* 
-RMS-E*FNF, file not found 
$ DEL PIWGRES.;* ! ranove saved results if any 

%DELETE-W-SEARCHFA1L, error searching for $1$DIA9:[DAVIDS0N.PIWG]P1WGRES.;* 

-RMS-E-FNF. file not found 

S! DEL [.ADALIB]*.*;* ! ranove compilation library 

DA\hDSON job terminated at 16-JUN-1993 11:47:26.54 


109 








APPENDIX K 

PIWO “SECOND RUN” RESULTS USING DEC ADA ON THE VAX COMPUTER 


Accounting information: 
BufTerodJ/O count; 2493 

Direct I/O count; 4085 

Pagefauhs: 120231 

Charged CPU time: 0 00; 11:33.94 


Peak woricins set size: 4000 
Peak paM file size: 11327 

Mounted volumes: 0 

Elq)sed time: 0 00:17:39.19 


no 




APPENDIX L 


COMMAND FILE FOR 
"THIRD RUN" PIWG TESTS 
ON THE VAX COMPUTER 


111 





APPENDIX L 

COMMAND PILE FC» “THIRD RUN" PIWG TESTS ON THE VAX COMPUTER 

$! FOR PIWG ON THE VAX VMS 

$! THIS IS FOR "THIRD RUN" AS DEFINED IN THE 

$! "READ.ME" FILE FOR PIWG 

$! 

$! VAX VMS files to coii^>iIe (using standard output PIWG 10) 

$ SET VERIFY 
$ SET NOON 

$ SET DEF $I$DIA9:[DAVIDS0N.PIWG] 

$ DEL [.ADALIB]*.*;* ! Clean out any old libraries 

$ ACS CREATE LIB [.ADALIB] 

SACS SET LIB [.ADALIB] 

$ ^ VAXCONFIG 
S! 

$ ADA AOOOOOl ! DURATION JO instantiarion 
$ ADA A000012 ! CPU_TIME_CLOCK.VAX 
$ ADA A000051 ! wall timing routines for host only 
SACS LINK AOOOOSl 
S! 

S RUN AOOOOSl 

S RUN AOOOOSl ! calibrate time to measure time 

S RUN AOOOOSl 

SADAZOOOlOO 

SADAZOOOlOl 

SADAZ000I02 

SADAZ000103 

SADAZ000t04 

SADAZOOOIOS 

SADAZ000I06 

SADAZ000I07 

SADAZOOOIOS 

SADAZ000I09 

SADAZOOOIIO 

SADAZOOOIll 

SADAZ0001I2 

SADAZ0001I3 

SADAZ000I14 

SADAZOOOIIS 

SADAZ000I16 

SADAZ000117 

SADAZOOOIIS 

SADAZ000I19 

SADAZ000120 

SADAZ000121 

SADAZ000122 

SADAZ000123 

SADAZ000124 

SADAZ00012S 

SADAZ000126 

SADAZ000I27 

SADAZ00012S 

SADAZ000I29 

SADAZ000130 

SADAZ000I31 

SADAZ000132 


112 






APPENDIX L 

COMMAND FILE FOR “THIRD RUN” PIWG TESTS ON THE VAX COMPUTER 


$ADAZ000133 
$ADAZ000134 
$ADAZOOOI35 
$ADAZ000136 
$ADAZ000137 
$ ADAZ000I38 
$ADAZ000139 
$ADAZ000140 
$ADAZOOOI41 
$ADAZ000142 
$ADAZ000I43 
$ADAZ000144 
$ADAZ00014S 
$ ADAZOOOI46 
$ADAZ000I47 
$ADAZ000148 
$AOAZ000149 
$ADAZ000150 
$ADAZ000I51 
$AOAZ0001S2 
$ADAZ0001S3 
$ADAZ0001S4 
$ ADAZ000I5S 
$ADAZOOOI56 
$ADAZ000I57 
$ ADA Z000158 
$ADAZ000I59 
$ADAZ000160 
$ADAZ000I6I 
$ADAZ000162 
$ ADAZ000I63 
$ADAZ000I64 
$ADAZ00016S 
$ADAZ000I66 
$ADAZ000167 
$ADAZ000]68 
$ADAZ000I69 
$ADAZ000170 
$ ADAZ000I71 
$ADAZ000172 
$ADAZ000173 
$ADAZ000174 
$ADAZ00017S 
$ADAZOOO]76 
$ADAZOOOI77 
$AOAZOOOI78 
$ADAZ000179 
$ADAZ000180 
$ADAZ000181 
$ADAZ000t82 
$AOAZOOOI83 
$ADAZ000184 
$ADAZ000I8S 
$ADAZ0(X)I86 


113 







APPENDDCL 

COMMAND RLE FOR ‘'HlIRD RUN" PIWO TESTS ON THE VAX COMPUTER 

SADAZOOOIS? 

$ADAZ000188 

SADAZ000189 

$ADAZ000190 

$ADAZ000191 

$ADAZOOOI92 

$ADAZ000193 

$ADAZ000194 

$ADAZ00019S 

$ADAZ000196 

$ADAZ000197 

$ADAZ000198 

$ADAZ000199 

$RUNA000051 ) final wall time 
$! 

$! 

$RUNA000051 ! initial wall time 
$ADAZ00Q200 

$ RUN A000051 1 final time measurement 

$! when this test can be run with no other tasks running, it represents a 

$! conqMshe software development benchmark. Compute difference and 

$! report. 

$! 

$ DEL SCRATCH*.*;* ! remove scratch files from "G" tests 
$ DEL A000052D.;* ! remove intermediate timing files 
$ DEL PIWGRES.;* ! remove saved results if any 
$! DEL [.ADALIB]*.*;* ! remove compilation library 


114 







APPENDIX M 

PIWG ’’THIRD RUN” RESULTS 
USING 

DEC ADA ON THE VAX COMPUTER 


IIS 



APPENDIX M 

PIWO ‘THIRD RUN” RESULTS USING DEC ADA ON THE VAX COMPUTER 

SISYLOGIN.COM 
$! For the AAAF CLurter 
$ set NOVERIFY 
$ SET NOON 

$ SET DEF $I$D1A9:[DAVIDS0N.PIWG] 

$ DEL r.ADALIB]*.*;* ! Clean out any old libraries 
$ ACS CREATE LIB [.ADALIB] 

%ACS-1-CL LIBCRE, Library $1$DIA9:[DAVIDSON.PIWG.ADALIB] created 
$ ACS SET LIB [.ADALIB] 

%ACS-1-CL LIBIS, Current program library is 
$ 1 $D1A9:[DAVIDS0N.PIWG. ADALIB] 

$ VAXCONFIG 
System configuration: 

Cluster AAAF 
Node: JEDI 

CPU: VAX 4000-200 

Character emulated: TRUE 
F_FLOAT emulated: FALSE 
D_FLOAT emulated: FALSE 
GJFLOAT emulated: FALSE 
H_FLOAT emulated: TRUE 
VMS version: V5.5 
Virtual page count: 230000 
Working set maximum: 16400 
Main Memory (32.00Mb) 

System device: RF72 
User device: RF71 
VAX Ada sofhvare configuration: 

ADA version: "VAX Ada V2.2-38" 

ACS version: "VAX Ada V2.2-38" 

ADARTL version: "V5.4-03" 

ADAMSG version: "1-029" 

Process configuration: 

Open file limit: SO 

Enqueue quota: 100 

Timer queue quota: 20 

Page file quota: 17000 

Working set memory parameters: 

WSQUOTA: 2500 
WSEXTENT: 4000 
Adjustment: enabled 
SEXIT !0 

$! 

$ ADA AOOOOOl ! DURATIONJO instantiation 
$ ADA A000012 ! CPU_TIME_CLOCK.VAX 
$ ADA AOOOOS1 ! wall timing routines for host only 
$ ACS LINK AOOOOS 1 

%ACS-1-CL LINKING, Invoking the VMS Linker for VAX_VMS target 
$SET DEFAULT $l$DIA9:[DAVIDSON.PIWG3 
SLINK:- "" 

SLINK- 

/NOMAP- 

/EXE-[]A000051- 

SYS$INPUT:/OPTIONS 


116 


APPENDIX M 

PIWO ‘THIRD RUN” RESULTS USING DEC ADA ON THE VAX COMPUTER 


$ I $DIA9;[DAVIDSON.PIWG] A000051 .OBJ; 1 
$STATUS-$STATUS 

SDELETE $ I $DI A9:[DAVIDSON.PIWG]A000051 .OBJ; 1 
SDELETE $ I $DIA9:[DAVIDSON.PIWG]a000051 .COM; 1 
$EXIT 
$! 

SRUNAOOOOSl 

CPU time now* 33.5699 WALL time now* 48105.2600 

$ RUN A000051 ! calibrate time to measure time 

CPU time now* 33.6700 WALL time now® 48105.4900 
$RUNA000051 

CPU time now* 33.7800 WALL time now* 48105.7700 


$ ADAZOOOlOO 

SADAZOOOlOl 

$AOAZ000]02 

$ADAZ000103 

$ADAZ000104 

$ADAZ000105 

$ADAZ000106 

$ ADAZ000107 

$ ADAZ000i08 

$ ADA Z000109 

S ADAZOOOnO 

SADAZOOOlll 

$ADAZ000I12 

SADAZOOOIB 

$ AOAZOOOI14 

$ADAZ0001I5 

$ADAZ000116 

$ ADAZOOOin 

SADAZOOOIIS 

$ ADAZ000119 

$ADAZ000120 

$ ADAZ000121 

$ADAZ000122 

$ ADAZ000123 

$ADAZ000124 

$ADAZ000125 

$ ADAZOOOI26 

$ADAZ000127 

$AOAZ000128 

qqqqqqqqrS ADA Z000129 

$ ADAZ000130 


$ADAZ000131 
$ADAZ000132 
$ADAZ000133 
$ ADAZ000134 
$ADAZ000135 
$ ADA Z000136 
$ADAZ000137 
$ADAZ000138 
$ ADA Z000139 
$ADAZ000I40 
$ ADAZ000141 


seconds. 

seconds. 

seconds. 


117 





APPENDIX M 

PIWO “THIRD RUN” RESULTS USING DEC ADA ON THE VAX COMPUTER 

$ADAZ000142 

$ADAZ000143 

$ADAZ000144 

$ADAZ00014S 

$ADAZ000146 

$ADAZ000147 

$ ADA 2000148 

$AOAZOOOI49 

$ADAZ000I50 

SADAZOOOISI 

$ADAZ0001S2 

$ADAZ000153 

$ADAZ000IS4 

$ADAZ00015S 

$ ADAZ0001S6 

$ADAZ000I57 

$ADAZ0001S8 

$ADAZ0001S9 

$ADAZ000160 

$ADAZ000161 

$ADAZ000162 

$ ADAZ000I63 

$ ADAZ000164 

$ADAZ000165 

$ ADAZ000I66 

$AOAZ000167 

$ADAZ000168 

$AOAZ000169 

$ADAZ000I70 

$ADAZ000I71 

$ADAZ000172 

$ADAZ000173 

$ADAZ000I74 

$ADAZ000I7S 

$ADAZ000]76 

$ADAZ000I77 

$ADAZ000I78 

$ADAZ000I79 

$ADAZ000180 

$ADAZ000181 

$ADAZ000182 

$ ADAZ000I83 

$ADAZ000184 

$ADAZ00018S 

$ADAZ000I86 

$ADAZ000I87 

$ ADAZ000188 

$ADAZ000189 

$ADAZ000190 

$ADAZ000I9I 

$ADAZ000192 

$ADAZ000193 

$ADAZ000I94 

$ADAZ00019S 


118 





APPENDIX M 

PIWG THIRD RUN” RESULTS USING DEC ADA ON THE VAX COMPUTER 

$ADAZ000196 

$ADAZ000197 

$ADAZ000198 

$ADAZ000199 

SRUNAOOOOSI ! final wall time 

CPU time now* 307.7400 WALL time now* 48836.6800 seconds. 

$! 

$! 

$ RUN A000051 ! initial wall time 

CPU time now* 307.8500 WALL time now* 48836.9500 seconds. 

$ADAZ000200 

$ RUN A000051 ! final time measurement 

CPU time now* 536.2300 WALL time now* 49496.1500 seconds. 

$! when this test can be run with no otho* tasks running, it represents a composite 

$! software development benchmark. Compute difference and report. 

$1 

$ DEL SCRATCH*.*;* ! remove scratch files from "G" tests 
%DELETE-W-SEARCHFAIL, error searching for 
$ I $DIA9:[DA V1DSON.PI WG]SCRATCH*.*;* 

-RMS-E-WF, file not found 
$ DEL A000052D.;* ! remove intermediate timing files 

%DELETE-W-SEARCHFA1L, error searching for $1$D1A9:[DAVIDSON.P1WG]A000052D.; 
-RMS-E-FNF, file not found 
$ DEL PIWGRES.;* ! remove saved results if any 

%DELETE-W-SEARCHFA1L, error searching for $1$DIA9:[DAVIDS0N.P1WG]PIWGRES.; 

-RMS-E-FNF, file not found 

$! DEL [.ADALIB]*.*;* ! remove compilation library 

DAVIDSON job terminated at 16-JUN-1993 13:44:57.17 


Accounting information: 
Buffeted I/O count: 
Direct I/O count: 

Page faults: 

Charged CPU time: 


11510 
20524 
368280 
0 00:08:56.70 


Peak working set size: 3999 
Peak page file size: 11052 

Mounted volumes: 0 

Elapsed time: 0 00:28:22.82 







