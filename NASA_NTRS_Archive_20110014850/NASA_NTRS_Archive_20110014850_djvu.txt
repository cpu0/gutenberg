Simulating Vibrations in a 
Complex Loaded Structme 

The Dynamic Response Computation 
(DIRECT) computer program simulates 
vibrations induced in a complex stracture 
by applied dynamic loads. Developed to 
enable rapid analysis of launch- and land- 
ing-induced vibrations and stresses in a 
space shuttle, DIRECT also can be used 
to analyze dynamic responses of other 
structures — for example, the response of 
a building to an earthquake, or the re- 
sponse of an oil-drilling platform and at- 
tached tanks to large ocean waves. For a 
space-shuttle simulation, the required 
input to DIRECT includes mathematical 
models of the space shuttle and its pay- 
loads, and a set of forcing functions that 
simulates launch and landing loads. DI- 
RECT can accommodate multiple levels 
of payload attachment and substructure 
as well as nonlinear dynamic responses of 
structural interfaces. DIRECT combines 
the shuttle and payload models into a sin- 
gle structural model, to which the forcing 
functions are then applied. The resulting 
equations of motion are reduced to an 
optimum set and decoupled into a 
unique format for simulating dynamics. 
During the simulation, maximum vibra- 
tions, loads, and stresses are monitored 
and recorded for subsequent analysis to 
identify structural deficiencies in the shut- 
tle and/or payloads. 

This program was written by Tim T. Cao of 
Johnson Space Center. For further infemna- 
tion, contact the Johnson Commercial Technol- 
ogy Office at (281) 483-3809. 

MSC-23333 


Q Rover Sequencing 

and Visualization Program 

The Rover Sequencing and Visualiza- 
tion Program (RSVP) is the software tool 
for use in the Mars Exploration Rover 
(MER) mission for planning rover oper- 
ations and generating command se- 
quences for accomplishing those opera- 
tions. RSVP combines three-dimensional 
(3D) visualization for immersive explo- 
ration of the operations area, stereo- 
scopic image display for high-resolution 
examination of the downlinked imagery, 
and a sophisticated command-sequence 
editing tool for analysis and completion 
of the sequences. RSVP is linked with ac- 
tual flight-code modules for operations 
rehearsal to provide feedback on the ex- 
pected behavior of the rover prior to 
committing to a particular sequence. 
Playback tools allow for review of both re- 


hearsed rover behavior and downlinked 
results of actual rover operations. These 
can be displayed simultaneously for com- 
parison of rehearsed and actual activities 
for verification. 

The primary inputs to RSVP are down- 
link data products from the Operations 
Storage Server (OSS) and activity plans 
generated by the science team. The activ- 
ity plans are high-level goals for the next 
day’s activities. The downlink data prod- 
ucts include imagery, terrain models, and 
telemetered engineering data on rover 
activities and state. The Rover Sequence 
Editor (RoSE) component of RSVP per- 
forms activity expansion to command se- 
quences, command creation and editing 
with setting of command parameters, and 
viewing and management of rover re- 
sources. The HyperDrive component of 
RSVP performs 2D and 3D visualization 
of the rover’s environment, graphical and 
animated review of rover-predicted and 
telemetered state, and creation and edit- 
ing of command sequences related to 
mobility and Instrument Deployment De- 
vice (IDD) operations. Additionally, 
RoSE and HyperDrive together evaluate 
command sequences for potential viola- 
tions of flight and safety rules. The prod- 
ucts of RSVP include command se- 
quences for uplink that are stored in the 
Distributed Object Manager (DOM) and 
predicted rover state histories stored in 
the OSS for comparison and validation of 
downlinked telemetry. 

The mtyority of components compris- 
ing RSVP utilize the MER command and 
activity dictionaries to automatically cus- 
tomize the system for MER activities. Thus, 
RSVP, being highly data driven, may be tai- 
lored to odier missions with minimal ef- 
fort. In addition, RSVP uses a distributed, 
message-passing architecture to allow mul- 
titasking, and collaborative visualization 
and sequence development by scattered 
team members. 

This tool was developed by Brian Cooper, 
Frank Flartman, Scott Maxwell, Jeng Yen, 
John Wright, and Carlos Balacuit of Cal- 
tech for NASA’s Jet Propulsion Labora- 
tory. Further information is contained in a 
TSP (see page 1 ). 

This software is available for commercial 
licensing. Please contact Karina Edmonds of 
the California Institute of Technology at 
(818) 393-2827. Refer to NPO-30845. 


Software Template for 
Instruction in Mathematics 

Intelligent Math Tutor (IMT) is a soft- 
ware system that serves as a template for 


creating software for teaching mathe- 
matics. IMT can be easily connected to 
artificial-intelligence software and other 
analysis software through input and out- 
put of files. IMT provides an easy-to-use 
interface for generating courses that in- 
clude tests that contain both multiple- 
choice and fill-in-the-blank questions, 
and enables tracking of test scores. IMT 
makes it easy to generate software for 
Web-based courses or to manufacture 
compact disks containing executable 
course software. IMT also can function 
as a Web-based application program, 
with features that run quickly on the 
Web, while retaining the intelligence of 
a high-level language application pro- 
gram with many graphics. IMT can be 
used to write application programs in 
text, graphics, and/or sound, so that 
the programs can be tailored to the 
needs of most handicapped persons. 
The course software generated by IMT 
follows a “back to basics” approach of 
teaching mathematics by inducing the 
student to apply creative mathematical 
techniques in the process of learning. 
Students are thereby made to discover 
mathematical fundamentals and 
thereby come to understand mathemat- 
ics more deeply than they could 
through simple memorization. 

This program was written by Robert O. 
Shelton of Johnson Space Center, and 
Travis A. Moebes and Anna Beall of Science 
Applications International Corp. For further 
information, contact the Johnson Commercial 
Technology Office at (281) 483-3809. 
MSC-23614 


Support for User Interfaces 
for Distributed Systems 

An extensible Java^*^ software frame- 
work supports the construction and op- 
eration of graphical user interfaces 
(GUIs) for distributed computing sys- 
tems typified by ground control systems 
that send commands to, and receive 
telemetric data from, spacecraft. 
Heretofore, such GUIs have been cus- 
tom built for each new system at consid- 
erable expense. In contrast, the present 
framework affords generic capabilities 
that can be shared by different distrib- 
uted systems. Dynamic class loading, re- 
flection, and other run-time capabilities 
of the Java language and JavaBeans 
component architecture enable the cre- 
ation of a GUI for each new distributed 
computing system with a minimum of 
custom effort. By use of this framework, 
GUI components in control panels and 


14 


NASA Tech Briefs, April 2005 


menus can send commands to a partic- 
ular distributed system with a minimum 
of system-specific code. The framework 
receives, decodes, processes, and dis- 
plays telemetry data; custom telemetry 
data handling can be added for a par- 
ticular system. The framework supports 
saving and later restoration of users’ 


configurations of control panels and 
telemetry displays with a minimum of 
effort in writing system-specific code. 
GUIs constructed within this frame- 
work can be deployed in any operating 
system with a Java run-time environ- 
ment, without recompilation or code 
changes. 


This program was written by Glenn Eychaner 
and Albert Niessner of Caltech for NASA’s Jet 
Propulsion Laboratory. Further informa- 
tion is contained in a TSP (seepage 1 ). 

This software is available for commercial 
licensing. Please contact Karina Edmonds of 
the California Institute of Technology at 
(818) 393-2827. Refer to NPO-40464. 


NASA Tech Briefs, April 2005 


15 


