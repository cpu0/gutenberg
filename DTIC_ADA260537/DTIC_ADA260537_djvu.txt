I 


An-A960 537 ENTATIONPAGE 

Form Approved 

OPMNo. 0704-0188 

■iiiiiii 

II III! '■0i 1 hour pot rooponu. InckiAng ft* Otno lor roi^ming Miucloni, ••vetting •iMng dva lounm gVhtnng and mvnttinng dot 

I II dlng*iitburdtn*«iniv*wvi|iOlhv*ap«elolM>ool(c!ionol Mormainn. mdudVtgtuggiMlontlor i*ducing«i«burd*n. 10 WaWigvn 

II III! 1215 Jtttonon □•«• HIgiNity. Suto 12M. Artn^on. VA 22202.4302. vid to tw OKict al Momitten and n»gUi«oiY Alton. Odm ol 


REPORT DATE 3. REPORT TYPE AND DaVeS COVERED 

1 Final: 17 Dec 92 

4. TITLE AND SUBTITLE 

Validation Summary Report; IBM Canada Ltd., XL Ada/6000, Internal Development 
Version RISC System/6000, model 7013-520 under AIX, 3.2 (Host & Target), 

921119W1.11299 

5 FUNDj 

S 

DTIC 

ELECTE 

FEB 8 13331 1 

c ^ 

6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 

USA 

7 PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

e. PERFORMING ORGANIZATION 

REPORT NUMBER 

AVF-VSR-558.1192 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 

10. SPONSORINGA^ONITORING AGENCY 
REPORT NUMBER 

11. SUPPLEMENTARY NOTES 

12a. DISTRIBLTTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

IBM Canada Ltd., XL Ada/6000, Internal Development Version RISC System/6000, rrxxJel 7013-520 under AIX, 3.2 (Host & 
Target), AC VC 1.11. 

14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 

15. NUMBER OF PAGES 

16 PRICE CODE 

17. SECURITY CLASSIFICATION 

OF REPORT 

UNCLASSIFIED 

18 SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 

OF ARRTPArX 

UNCLASSIFED UNCLASSIFIED 

20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev 2-89) 
Prescribed by ANSI Std 239-128 















AVF Control Number: AVF-VSR-558.1192 
Date VSR Conplete: 17 December 1992 

92-08-25-IBM 


Ada COMPILER 
VALIDATIOa SUMMARY REPORT: 

Certificate Number: 921119W1.11299 
IBM Canada Ltd. 

XL Ada/6000, Internal Development Version 
RISC Systenv/6000, model 7013-520 under AIX, 3.2 


Prepared By: 

Ada Validation Facility 

645 C-CSG/SCSL 

Wright-Patterson AFB CM 45433-6503 


Ju.' ri i' l *ii. 



mtc quality inspected 3 


»y__ __ 

'Listrt Wtl«rj/ 

;__Avaii«biutr Cod^ 

Ayflil ead/or 
Dlst I Special 




93-02172 



Certificate Information 


The following Ada implementation was tested euid determined to pass ACVC 
1.11. Testing was ccwpleted on 19 November 1992. 

Compiler Name and Version; XL Ada/6000, Internal Development Version 

Host Conputer System: RISC Systenv/6000, model 7013-520 

iinder AIX, 3.2 

Target Craiputer System: RISC Systenv/6000, model 7013-520 

under AIX, 3.2 

Customer Agreement Number; 92-08-25-IBM 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
921119W1.11299 is awarded to IBM Canada Ltd.. This certificate expires 2 
years after ANSI/MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 



/via Validation Facility 
Steven P. Wilson 
Technical Director 


645 C-CSG/SCSL 

Wright-Patterson AFB Oa 45433-6503 



Ada V^id^t^n Organization 
Director, Conputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Washington DC 20301 




OKCLMATZON Or COMTOMtMlCX 


CuatoMs: 


IBM Canada Ltd. 


Ada Validation Facility 


Wright Fattaraon XVT 
ASD/SCEL 
NPAra OH 4S433 
USA 


ACVC Varaion 


Ada Zinplamantation: 

Cooipilax Nasta and vaxaion: 
Koat Conputar Syatan: 
Targat Cosgiutar Systam; 


XL Ada/tfOOO Zntamal Davalopnant Varaion 
AZSC Syatam/fiOOO, modal 7013-520, AZX 3.2 
RISC Syatam/6000, modal 7013-520, AZX 3.2 


Cuatomar'a Daelaration 

Z, tha undaraignad, rapraaanting IBM Canada Ltd., daclara that IBM Canada Ltd. 
haa no knowladga of dalibarata daviationa from tha Ada Languaga Standard 
AMSZ/MZL-STO-181SA or tha ISO 8652-1987 atandacd in tha implamantation liatad 
in thia daelaration. 


Data: ( 




Bob Garbar 
IBM Canada Ltd. 

844 Don Milla Road 
North York, Ontario 
CANADA 


M3C 1V7 



TABLE OF CGNTEMTS 


CHAPTER 1 INTRO[XJCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES .1-2 

1.4 DEFINITION OF TERMS .1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.. . 2-1 

2.2 INAPPLICABLE TESTS .2-1 

2.3 TEST MCXJIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTICNS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 


1 


INTRODUCTION 


The Ada inplementation described edxive was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Siinnary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For emy technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF IHIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the ’’Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warremt that all statements set forth in this report are 
accurate and conplete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Ccxnputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 




INTRODUCTIGN 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Progranming Language, 

ANSI/MIL-sro-1815A, February 1983 and ISO 8652-1587. 

[Pro90] Ada CoBgiler Validation Procedures , Version 2.1, Ada Joint 
Program office, August 1990. 

[UG89] Ada Conpiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Complicmce of Ada implementations is tested by meems of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, euid L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executedble. Class B euid 
class L tests are expected to produce errors at coitpile time and link time, 
respectively. 

The executable tests are written in a self-checking m^ulner emd produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT emd SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal lemguage usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code \4iich must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exan^le, the largest integer. A list 
of the values used for this implementation is provided in i^)pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests emd 
implementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 





INTRCffiUCTION 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Stauidard. 


1.4 DEFINITIC3N OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host amd target conputer system to allow 
transformation of Ada programs into executable form auid 
execution thereof. 

Ada Compiler The means for testing conpliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation sunmary 

(ACVC) report. 

Ada An Ada compiler with its host computer system amd its 

Implementation target conputer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Complieuice of The edaility of the inpleraentation to pass an ACVC version, 
an Ada 

Inpleroentation 

Computer A functional unit, consisting of one or more conputers and 

System associated software, that uses coitmon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 



INTOCXXJCTION 


Ccnformity 


Custcaner 


Declaration of 
Conformance 


Host Conpjter 
System 

lnappliced}le 

test 

ISO 

LRM 


Operating 

System 


Target 

Con^ter 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individxial or corporate entity who enters into an 
agreement with an AVF vdiich specifies the terms euid 
conditions for AVF services (of auiy kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A conputer system vdiere Ada source programs are transformed 
into executedole form. 

A test that contains one or more test objectives found to be 
irrelevemt for the given Ada inplementation. 

International Organization for Standardization, 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system v^ere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90). 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has invalid 
test objective, fails to raeet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 







CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C9402LA 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada in?)lementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




INPLEHENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits th£m SYSTEM.MAXJDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..2 (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type LCNG_INTEGER; for 
this inplementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 

SHORT_FLQAT; for this inplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LC»}G_FLQAT, or SHORT_FLClAT; for this 
inplementation, there is no such type. 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVE3lFLCiWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHINE_OVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

CA2009C and CA20n9F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 


LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for proce^res euid functions; this implementation does not support 
pragma INLINE. 


0310090 checks v^ether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 



IMPLEMENTATION DEPENDENCIES 


CD2A84A, Q)2A84E, CD2A64I..J (2 tests), euid CD2A840 use length clauses 
to specify non-default sizes for access types; this inqplementation 
does not support such sizes. 

BD6001A, BD8003A, BD8004A. .B (2 tests), cind AD8011A use machine code 
insertions; this implementation provides no package MACHINE_CODE. 

The tests listed in the following tadsle check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode auid access method; this inplementation supports 
these operations. 


Test File Operation Mode File Access Method 


CE2102D 

o^te 

IN FILE 

SECXJENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

sequential" 

jo 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 " 


CE2102I 

CREATE 

IN FILE 

DIRECT 10 


CE2102J 

CREATE 

OUT FILE 

DIRECT 10 


CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 

10 

CE2102O 

RESET 

IN FILE 

sequential" 

'lO 

CE2102P 

OPEN 

OUT FILE 

sequential" 

‘lO 

CE2102Q 

RESET 

OUT FILE 

SE(XJENT1AL" 

'10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 " 


CE2102S 

RESET 

INOUT FILE 

DIRECT 10 


CE2102T 

OPEN 

IN FILE 

DIRECT 10 


CE2102U 

RESET 

IN FILE 

DIRECT 10 


CE2102V 

OPEN 

OUT FILE 

DIRECT 10 


CE2102W 

RESET 

OUT FILE 

DIRECT 10 


CE3102E 

CREATE 

IN_FILE 

TEXT 10 


CE3102F 

RESET 

Any Mode 

TEXT 10 


CE3102G 

DELETE 

TEXT 10 


CE3102I 

CREATE 

OUT FILE 

TEXT_IO 


CE3102J 

OPEN 

IN FILE 

TEXT 10 


CE3102K 

OPEN 

OUT FILE 

TEXT 10. 



The following 16 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file euid one or more are open for writing; USE_ERROR is 
raised when this association is atten?)ted. 

CE2107B..E CE210’’G..H CE2107L CD2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 


2-3 



INPLOIENT^TIGN DEPQCE^IES 


CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cemnot restrict 
file capacity. 

CE3304A checks that SET_LINE_^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds CXXJNT'LAST; for this Tmplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B71001Q BAIOOIA BA2001C BA2001E BA3006A BA3006B 

BA3007B BA3008A BA3008B BA3013A 

C52008B was graded passed by Test Modification as directed by the AVO. 
This test uses a record type with discriminants with defaults; this test 
also has array components whose length depends on the values of some 
discriminants of type INTEGER. On conpilation of the type declaration, 
this implementation raises NUMERIC ERROR as it attenpts to calculate the 
maximum possible size for objects oT the type. Although this behavior is 
a violation of the Ada stemdard, the AVD ruled that the implementation be 
accepted for validation in consideration of intended chemges to the 
stcindard to allow for compile-time detection of run-time error conditions. 
The test was modified to constrain the subtype of the discriminemts. Line 
16 was modified to declare a constrained subtype of INTEGER, and 
discriminant declarations in lines 17 and 25 were modified to use that 
subtype; the lines are given below: 

16 SUBTYPE SUBINT IS INTEGER RANGE 0 .. 127; 

17 TYPE REC1(D1,D2 : SUBINT) IS 

25 TYPE REC2(D1,D2,D3,D4 : SUBINT 0) IS 


CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain insteuitiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the conpilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 


2-4 





IMPLEMENTATION DEPENDENCIES 


BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instamtiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are conpiled after the units that contain the 
instantiations, and this inplementation creates a dependence of the 
instantiating \anits on the generic units as allowed by AI-00408 and 
AI-00506 such that the compilation of the generic bodies makes the 
instauntiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected the conpiler. 

CD1009I, CD2A21C, CD2A24A, CD2A31A, CD2A31B, and CD2A31C were graded 
passed ^ Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, vdiich uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 
The AVO ruled that this interpretation is not binding \jnder ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHEac—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK CN REPRESENTATICN FOR <TypE ID> FAILED." 


2-5 




CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRCMIENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical euid sales information e±)OUt this Ada implementation, contact: 

Peter Moogk 
IBM Canada Lab 
844 Don Mills Road 
North York, Ontario 
CANADA 


Testing of this Ada inplementation was conducted at OC Systems Inc. in 
Fairfax VA by a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inpleraentation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vdiether the test is applicable or inapplicable; 
otherwise, the Ada In?)lementation fails the ACVC [Pro90]. 

For all processed tests (inapplice±>le and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 





PROCESSING INFORMATION 


a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3777 

95 

97 

0 


201 

298 

(c+d+e) 

4170 

(a+b4-f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the vali^tion team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the comnunications link described above, and run. The results 
were captured on the host conputer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch 

-qsource 

-V 

-b BIND NAME 


-m 


Effect 

produces a compiler listing 

provides status messages 

binds the object into an executable with 
BIND_NAME as the main unit. 

binds the object into an executable with 
the first coopilation unit in the file as 
the main unit. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. Ihe listings examined on-site by 
the validation team were also archived. 


3-2 





APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning emd purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two teibles. The first teible lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LE1^—also listed here. These values are expressed 
here as Ada string aggregates, v^ere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 

$BIG_INT_LIi 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


200 — value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V -> •!•) 

(1..V/2 -> 'A') & '3' & 
{1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1' & 

(1..V-20 


$MAX LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 





macro parameters 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

Itie following table lists all of the other macro parameters and thei 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

268_435_456 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

AIX_6000 

$DELTA_DOC 

2#1.0#E-31 

$ENTRY_ADDRESS 

ENTRYO'ADDRESS 

$ENTRY_ADDRESS1 

ENTRYl'ADDRESS 

$ENTRY_ADDRESS2 

ENTRY2'ADDRESS 

$FIELD_LAST 

1000 

$FILE_TERMINATOR 

9 9 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$FLOAT_NAME 

NO_SUCH_FLCIAT_TYPE 

$FORM_STRING 

II II 

$FORM_STRING2 

"CANNOT_RESTRICT_FILE_ 

$GREATER THAN DURATION 

100_000.0 


$GREATER_THAN_DURATION BASE LAST 

T37_073.0 

$GREATER_THAN_FLQAT_BASE LAST 

1 .TJE308 

$GREATER_THAN_FLOAT_SAFE LARGE 

3.^E38 






MACRO PARAMETERS 


$GREATER THAN SHORT_FLQAT SAFE LARGE 

1.0E308 ' 

$HIGH_PRIORITY 255 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/NCX)IRECTORY/FILENAME 

$IIJJEX3AL_EXTHRNAL_FILE_NAME2 

/NC»IRECTORY2/FILENAME 

$INAPPROPRIATE LINE LENGTH 

-1 

$INAPPROPRIATE PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA It«:HJDE ( "A28006D1 .ADA" ) 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006E1.ADA") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE FORTRAN 

$LESS_THAN_DURATION -100_000.0 

$LESS THAN DURATION BASE FIRST 

-lll_073.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CCM)E_STATEMENT 

NULL; 

$MACHINE_CC»E_TYPE NO_SUCH__TYPE 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2147483648 

$NAME SHORT_SHORT_INTEGER 

A-3 



MACRO PARAMETERS 


$NAME_L1ST 

AIX_6000 

$NAME_SPECIFICATiaal 

/thor/prevalA'ork/ctests/X2120A 

$NAME_SPECIFICATION2 

/thor/prevalA'ork/ctests/X2120B 

$NAME_SPECIFICATION3 

/tho r/preval Aw r k/c tes t S/X3119A 

$NEG_BASED_INT 

16#F000000E# 

$NEW_MEM_SIZE 

268_435_456 

$NEW_STOR_UNIT 

8 

$NEW_SYS_NAME 

AIX_6000 

$PAGE_TERMINATOR 

ASCII.FF 

$RECORD_DEFINlTiai 

NEW INTEGER; 

$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TYPE 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

32768 

$TICK 

0.00006 

$VAR1ABLE_ADDRESS 

VARIABLE'ADDRESS 

$VARIABLE_ADDRESS1 

VARIABLEl'ADDRESS 

$VARIABLE_ADDRESS2 

VARIABLE2'ADDRESS 

$YOUR_PRAGMA 

EXPORT 


A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


IBM AIX XL Ada Conpiler/6000 - Internal Development Version 
Usage; 

xla ( Option | File ]... 
vhere File can be: 

- an Ada source file 
(for archive or object files, use -i) 
where Option can be: 

-b UnitName: bind and link the specified unitName 
-e : do not produce an executable file. 

-G : do partial optimization. 

-h : display information about the ada command 

-i FileName: include archive or object file FileName when binding 
-I : read a list of files to compile from standard input 

-L Library : use this library list file. 

-ro : compile and bind the last unit as the main program. 

-o FileName: specify the name of the executable. 

-O : produce fully optimized code. 

-p : turn on execution profiling option. 

-q : -qlist - provide object listing 

: -qsource - provide source listing 

-g : code is to be debugged 

-S : suppress run-time checks for Ada exceptions 

-u : unlock the working sublibrary 

-V : verbose - display informative messages. 

-# : don't actually compile 

-V Pages : specify the nvmmber of IK memory pages to be used. 

Some temporary options: 

-H : see if I have xla installed correctly 

-DESTROY ; destroy the currently installed xla (remove all xla files) 


B-1 





APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this ;^ppendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation euid not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of ^pendix F, are; 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type SHORT_SHORT_INTEGER is range -128 .. 127; 

type FLOAT is digits 6 reuige -3.4028E+38 .. 3.40282E+38; 
type LONG_FLOAT is digits 15 range -1.79769313486232E+308 .. 

1.79769313486232E+308; 

type DURATIW is delta 2**(-14) range -86400.0 .. 86400.0; 


end STANDARD; 


C-1 





APPENDIX F OF IHE Ada STANDARD 


Appendix F. Inplementation-Dependent Characteristics 

The Ada language definition allows for certain target dependencies in a 
controlled manner. This appendix, called Appendix F as prescribed in the Ada 
Language Reference, describes implementation-dependent characteristics of the 
AIX Ada/6000 compiler running under the AIX operating system Version 3. 

Implementation-Defined Pragmas 

Implementation dependent pragmas are: 

pragma CCXIMENK String_Literal) ; 

Imbeds String_Literal into object code. 

pragma IMAGES(Enumeration_Type, immediate | deferred); 

Generates a t2d3le of images for the enumeration type, deferred causes the table 
to be generated only if the enxaneration type is used in a conpilation unit. 

pragma INTERFACE INFORMATICS^ 

(Interfaced_SuEprogram_Name, Link_Name); 

When used in conjunction with pragma INTERFACE, provides access to any routine 
v^ose name can be specified by 2 m Ada string literal. 

pragma OS_TASK (Priority); 

Spears within the declaration for a task or task type (in the same context as 
pragma PRIORITY), and causes the task or task type to be placed into a separate 
AIX process. The priority value is of type SYSTEM.PRIORITY, and is not 
currently acted upon. To maintain upward compatibility, always use a 0 for this 
parameter. 

p ragma NO_SUPPRESS(Condition_Name); 

Prevents checks for a specified condition from being suppressed. It has the 
same scope as pragma SUPPRESS. 

pragma PRESERVE_LAYOUT (?,ecord_Type); 

Prevents the conpiler from re-ordering record conponents. It must occur in a 
declarative region, following the declaration of the record type to vdiich it is 
applied. 

pragma SUPPRESS_ALL; 

Suppresses all error checks, including elaboration checks. It has the same 
scope as pragma SUPPRESS. 

pragma EXPORT(object, String_Literal, Language); 

Makes the named object visible to other programs. The object can be 


C-2 



APPENDIX F OF THE Ada STANDARD 


a procedure or a function or a data object. The string_literal is the 
name the linker will make global. The Language must be C, FORTRAN, or 
Assembler, all of vAiich have the same effect. 

Predefined Pragmas 

Supported pragmas are INTERFACE, ELABORATE, SUPPRESS, PACK, PAGE, LIST, INLINE, 
SHARED, and PRIORITY. 

Pragma INTERFACE supports the interface languages C, FORTRAN, OLD_STYLE_C, 
and ASSEMBLY. 

Unrecognized and lonsupported pragmas are ignored with the appropriate warning 
message. 

Representation Clauses 

Supported representation clauses include: 

Length clauses 

Envimeration representation clauses, except for Booleem types 
Record representation clauses 

Address clauses, including those for interrupt entries. 

Records are aligned by default on 32-bit boundaries. You can use a 
representation clause to force them to be aligned on 64-bit boundaries. 

Restrictions on Unchecked Conversion 

The only restriction on unchecked conversion is that the two types (or 
si±>types) A and B must be the same size. 

Package System 

The package SYSTEM has the following characteristics; 

package SYSTEM is 

type NAME is (AIX_6000); 

SYSTEM_NAME ; constant NAME AIX 6000; 

MEMORY_SIZE ; constant ;■ 268_435_?56; 

STORAGE_UNIT ; constant 8; 

MIN_INT ; constant ;« -(2**31); 

MAX_INT ; constant (2 ** 31) -1; 

MAX_DIGITS ; constant 15; 

MAX_MANTISSA : constant 31; 

TICK : constant ;« 6.00000E-05; 
type ADDRESS is private; 

NULL_ADDRESS ; constant ADDRESS; 

FINE_DELTA : constant 1.0 / (2 ** MAX_MANTISSA); 
subtype PRIORITY is INTEGER range 0..255; 


C-3 






APPENDIX F OF THE Ada STANDARD 


function LABEL (NAME : STRING) return ADDRESS; 

END System; 

Representation Attributes 

All defined representation attributes shall be supported. 
Implementation-Generated Names 

There are no implementation-generated names denoting implementation-dependent 
conponents. Con^nent names generated by the conpiler shall not interfere with 
programmer-defined names. 

Inplementation-Dependent Characteristics of the I/O Packages 

Packages SBQUENTIAL_IO, DIRECT_IO, and TEXT_IO are supported. 

Package LOW_LEVEL_lO is not supported. 

Unconstrained array types 2 uid imconstrained types with discriminants 
may be instantiated for I/O. 

Filenames can contain any ascii character except ASCII.NUL. 

In TEXT_IO, the type FIELD is defined as follows: 

subtype Field is integer range 0..1000; 

In TEXT_IO, the type COUNT is defined as follows: 
type Count is range 0..2_147_483_646; 

Form Parameters for File Operations 

Section 14.2 of the Language Reference describes the Ada functions for 
manipulating files. As stated in that section, the form string parameter allows 
you to set file protections when you create a file. The details of file 
protections and privileges under the AIX operating system are described under 
the chmod call in the AIX Calls and Subroutines Reference for IBM RISC 
System/6000 (SC23-2198). 

The form string is interpreted in the following way: 

The form string consists of a series of sxabstrings, separated by 
blanks. 

The substrings are not case sensitive. 

The order of the substrings does not matter. 

Some substrings control the file protection settings. 

Some sxibstrings enable special AIX behavior for file opening. 


C-4 



APPENDIX F OF THE Ada STANDARD 


The list of recognized substrings is contained in User's Guide. 
Predefined Numeric Types 

The current specification of package STANDARD includes: 

type SHORT_SHORT_INTEGER 
is range -128 .. 127; 

type SHORT_INTEGER 

is raunge -32768 .. 32767; 

type INTEGER is 

range -2147483648 .. 2147483647; 
type FLOAT is 

digits 6 range -3.40282E+38 .. 3.40282E+38; 

type LCNG FLOAT is 
digits T5 range 

-1.79769313486232E+308 .. 1.79769313486232E+308; 
type DURATICN is 

delta 2**(-14) range -86400.0 .. 86400.0; 

SHORT SHORT INTEGER 


First 

- 

-128 

Last 

m 

127 

Size 

- 

8 

SHORT_INTEGER 

First 

* 

-32768 

Last 

a 

32767 

Size 

- 

16 

INTEGER 



First 

- 

-2147483648 

Last 

- 

2147483647 

Size 

a 

32 

FLOAT 




Digits * 6 





APPENDIX F OF THE Ada STANDARD 

E^nax - 84 

Epsilon » 9.53674E-07 

Large - 1.93428E-f25 
Machine_ESnax - 128 

Machine_Emin ■ -125 

Nachine_Nemtissa - 24 

Machine_Overflows - TRUE 

Machine_Radix - 2 

Machine_Roiinds - TRUE 

Nemtissa >■ 21 

Safe_Emax - 125 

Safe_Large * 4.25353E+37 

Safe_Sinall - 1.17549E-38 

Size - 32 
Small - 2.58494E-26 
IXM3_FLOAT 
Digits = 15 
Emax « 204 

Epsilon =- 8.88178419700125E-16 

Large = 2.571100870814^8E+61 
Machine_Eraeuc * 1024 

Machine_Eltiin - -1021 

MachineMantissa - 53 

Machine_Overflows » TRUE 

Machine_Radix ■ 2 
Machine Rounds ■ TRUE 


C-6 





APPENDIX F OF THE Ada STANDARD 


Mantissa 

- 51 

Size - 64 


Safe Eoiax 

- 1021 

Safe_Large 

= 2.24711641857789E+307 

Safe_Sinall 

= 2.22507385850720E-308 

Small - 1. 

94469227433161E-62 


DURATIOJ 

Delta - 2**(-14) 

First - -86400.0 
Last = 86400.0 
Machine_Overflows => FALSE 

Machine_Rounds - FALSE 
Restrictions on Machine Code Insertions 
Machine code insertions are not supported. 


C-7 




