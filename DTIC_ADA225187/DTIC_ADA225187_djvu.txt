">«*«- *■« I1TM1 file COPY__li_ 

REPORTDC Igstezs,* 

5 SSflS »S*Sw»C Kj^BSjfl 3B A D” ^A225 187 MMLjsSS^Es^aSSHErSs 

aaaagSSSags 


I 1. AGENCY UK ON.* OW****/ 


«.rwr 

'I Jan co 31 Jan 91 


«. ABORTTY« AMD WJl* CO*«D 

Final 


cmCMDauanTU Ada Compiler Validation Summary Report:TeleSoft 
[eleGenl Ada F, r SCO Unix V.3, ALR 380 (Host & Target>, 
>0013111.10267 


aAUTHORtt) 

1ABG-AVF 

Ottobrunn, FEDERAL REPUBLIC OF GEL -.VY 


1 1 m*omm oaa*H2ftxMw*mmMWOfEu<m 

j IABG-AVF, Industrieanlagen-Betriebsgeselschaft 

Dept. SZT 
Einsteinstrasse 20 
D-8012 Ottobrunn 
FEDERAL R-. - 3LIC OF-GERMANY 

I. mMOMOMCNTOAMG AGENCY KMCCS) and AOORESSGS) 

Ada Joint Program Office 
United States Department of Defense 
20301-3081 


AVF-IABG-066 


S| | vto.OBrmaiu< -j*/*mxahjtv statement 

Approved for public release; distribution unlimited. 


tt. AWTAAC T MB mu*) 


| lit.DttTWL^XOOOC 


TeleSoft, TeleGen2 Ada for SCO Unix V.3, Ottobrunn West Germany, ALR 386/216 under SCO 
Unix System V.3.2 (Host & Target), ACVC 1 -10. - - « fy 


DT1C 

S ELECTE M 

JUN271990I I 

fcE U 


m.Mjectizams Ada programming language, Ada Compiler Validation 
Summary Report, Ada Compiler Validation Capability, Validation 
Testing, Ada Validation Office, Ada Val uation Facility, ANSI/MIL- 
STD-1815A, Ada Joint Program Office 


tl 

CLASSIFIED 


UNCLASSIFIED 




















AVF Control Number: AVF-IABG-066 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: #90013111.10267 
TeleSoft 

TeleGen2 Ada for SCO Unix V.3 
ALR 386/216 host and target 


Completion of On-Site Testing: 
31 January 1990 


Prepared By: 
IABG mbH, Abt. SZT 
Einsteinstrasse 20 
D-8012 Ottobrunn 
Vest Germany 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Vashington DC 20301-3081 


o 06 11 t 





















TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION . 2 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.3 

1.3 REFERENCES.4 

1.4 DEFINITION OF TERMS . 4 

1.5 ACVC TEST CLASSES.5 

CHAPTER 2 CONFIGURATION INFORMATION . 8 

2.1 CONFIGURATION TESTED . 8 

2.2 IMPLEMENTATION CHARACTERISTICS . 9 

CHAPTER 3 TEST INFORMATION.15 

3.1 TEST RESULTS.15 

3.2 SUMMARY OF TEST RESULTS BY CLASS.15 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.16 

3.4 WITHDRAWN TESTS.16 

3.5 INAPPLICABLE TESTS . 16 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . 20 

3.7 ADDITIONAL TESTING INFORMATION 

3.7.1 Prevalidation.20 

3.7.2 Test Method.21 

3.7.3 Test Site.21 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER AND LINKER OPTIONS 


1 

























INTRODUCTION 


CHAPTER 1 
INTRODUCTION 


This Validation Summary Report (VSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety^,and nothing can be implemented that is 
not in the Standard. ‘ffi 'J'i ‘ " ' 1 \ ' !' i.' 

i . J fi- . I ~Sj 7''' '.I \ . < >. t( i : ■ > i ■ / . 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent, but is permitted by the Ada Standard. Six 
classes of tests are used. These tests are designed to perform checks at 
compile time, at link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 


2 









INTRODUCTION 


. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by the AVF according to 
procedures established by the Ada Joint Program Office and administered by 
the Ada Validation Organization (AVO). On-site testing was completed 11 
September 1989 at TeleSoft, San Diego, USA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 

IABG mbH, Abt. SZT 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


3 









INTRODUCTION 


1.3 REFERENCES 


1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines, Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide, SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 


4 










INTRODUCTION 


Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 
test compiler is not required to support ' or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 


Target 


The computer which executes the code generated by the 
compiler. 


Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 


Withdrawn 

test 


An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to verify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 


5 









INTRODUCTION 


every illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 


6 










INTRODUCTION 


lines with a maximum length of 72 characters, use small numeri- values, and 
tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


7 








CONFIGURATION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler Name: TeleGen2 Ada for SCO Unix V.3 
Version 1.4A 

ACVC Version: 1.10 

Certificate Number: #90013111.10267 

Host Computer: 

Machine: ALR 386/216 

Operating System: SCO Unix System V.3.2 

Memory Size: 10 MB 

Target Computer: same as host 


3 








CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 

a. Capacities. 

1) The compiler correctly processes a compilation 
containing 723 variables in the same declarative part. (See 
test D29002K.) 

2) The compiler correctly processes tests containing 

loop statements nested to 65 levels. (See tests D55A03A..H 
(8 tests) .) 

3) The compiler correctly processes tests containing 

block statements nested to 65 levels. (See test D56001B.) 

4) The compiler correctly processes tests containing 

recursive procedures separately compiled as subunits nested to 
17 levels. (See tests D64005E..G (3 tests).) 

b. Predefined types. 

1) This implementation supports the additional predefined types 
LONG_INTEGER and LONGJTLOAT in the package STANDARD. (See 
tests 886001T..Z (7 tests).) 

c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 

constraints are checked are not defined by the language. Vhile 

the ACVC tests do not specifically attempt to determine the order 

of evaluation of expressions, test results indicate the following: 

1) Some of the default initialization expressions 
for record components are evaluated before any value is 
checked for membership in a component's subtype. (See test 
C32117A.) 

2) Assignments for subtypes are performed with the same 
precision as the base type. (See test C35712B.) 

3) This implementation uses no extra bits for extra precision 
and uses no extra bits for extra range. (See test C35903A.) 


9 









CONFIGURATION INFORMATION 


4; CONSTRAINT_ERROR is raised for pre-defined integer comparison 
tests, NUMERIC_ERROR is raised for largest integer comparison 
and membership tests and no exception is raised for pre¬ 
defined integer membership tests when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

5) NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

2) The method used for rounding to longest integer is round 
to even. (See tests C46012A..Z (26 tests).) 

3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 

implementation: 

1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises NUMERIC_ERROR for a 
two dimensional array subtype where the large dimension is the 
second one. (See test C36003A) 

2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to an 

array type with INTEGER'LAST + 2 components. (See test 

C36202A.) 

3) NUMERIC_ERROR is raised when an array type with 

SYSTEM.MAX_INT + 2 components is declared. (See test 

C36202B.) 


10 










CONFIGURATION INFORMATION 


4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER’LAST 
raises no exception. (See test C52103X.) 

5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the 
length of a dimension is calculated and exceeds INTEGER’LAST. 
(See test C52104Y.) 

6) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype. (See test C52013A.) 

7) In assigning two-dimensional array types, the expression 
is not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype. (See test C52013A.) 


8) A null array with one dimension of length greater 

than INTEGER'LAST may raise NUMERIC_ERROR or 

CONSTRAINT J3RROR either when declared or assigned. 

Alternatively, an implementation may accept the 

declaration. However, lengths must match in array 

slice assignments. This implementation raises 

no exception. (See test E52103Y.) 


f. Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that index subtype checks are 
made as choices are evaluated. (See tests C43207A and 
C43207B.) 

2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 


11 









CONFIGURATION INFORMATION 


3) CONSTRAINT_ERROR is raised after all choices are 
evaluated when a bound in a non-null range of a non-null 
aggregate does not belong to an index subtype. (See test 

E43211B.) 


h. Pragmas. 

1) The pragma INLINE is not supported for procedures or func¬ 
tions. (See tests LA3004A..B (2 tests), EA3004C..D (2 tests), 
and CA3004E..F (2 tests).) 


i. Generics. 

This implementation creates a dependence between a generic body 

and those units which instantiate it. As allowed by AI-408/11, if 

the body is compiled after a unit that instantiates it, then that 

unit becomes obsolete. 

1) Generic specifications and bodies can be compiled 

in separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 

compiled in separate compilations. (See tests CA1012A and 
CA2009F.) 

3) Generic library subprogram specifications and bodies can 
be compiled in separate compilations. (See test 
CA1012A.) 

4) Generic non-library package bodies as subunits can 

be compiled in separate compilations. (See test CA2009C.) 

5) Generic non-library subprogram bodies can be 
compiled in separate compilations from their stubs. (See test 
CA2009F.) 

6) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 

7) Generic package declarations and bodies can be 
compiled in separate compilations. (See tests CA2009C, 
BC3204C, and BC3205D.) 

8) Generic library package specifications and bodies can 
be compiled in separate compilations. (See tests 
BC3204C and BC3205D.) 


12 








CONFIGURATION INFORMATION 


9) Generic unit bodies ~d their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


j. Input and output. 

1) The package SEQUENTIAL_IO cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

2) The package DIRECT_I0 cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

3) Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E,~CE2102N, and CE2102P.) 

4) Modes IN_FILE, OUT_FILE, and INOUT_FILE are supported for 
DIRECT 10. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

5) Modes IN_FILE and 0UT_FILE are supported for text files. 
(See tests CE3102E and~CE3102I..K (3 tests).) 

6) RESET and DELETE operations are supported for 
SEQUENTIAL_I0. (See tests CE2102G and CE2102X.) 

7) RESET and DELETE operations are supported for DIRECT 10. 
(See tests CE2102K and CE2102Y.) 

8) RESET and DELETE operations are supported for text 
files. (See tests CE3102F..G (2 tesrs), CE3104C, CE3110A,’and 
CE3114A.) 

9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 

10) Temporary sequential files are given names and not 
deleted when closed. (See test CE2108A.) 


11) Temporary direct files are not given names and not 

deleted when closed. (See test CE2108C.) 

12) Temporary text files are not given names and not deleted 

when closed. (See test CE3112A.) 

13) More than one internal file can be associated with 

each external file for sequential files when reading 

only. (See tests CE2107A..E (5 tests), CE2102L, CE2110B, and 
CE2111D.) 


13 









CONFIGURATION INFORMATION 


14) More than one internal file can be associated with 

each external file for direct files when reading only. (See 
tests CE2107F..H (3 tests), CE2110D and CE2111H.) 


15) More than one internal file can be associated with 

each external file for text files when reading only (See 

tests CE3111A..E (5 tests), CE3114B, and CE3115A.) 


u 







TEST INFORMATION 


CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 316 tests were inapplicable to this implementation. 
All inapplicable tests were processed during validation testing except for 
201 executable tests that use floating-point precision exceeding 
that supported by the implementation. Modifications to the code, 
processing, or grading for 15 tests were required to successfully 
demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

127 

1129 

2018 

17 

22 

44 

3357 

Inapplicable 

2 

9 

297 

0 

6 

2 

316 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


15 








TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT 

2 

3 

4 

5 

6 

TEST 

7 

CHAPTER 

8 9 

10 

11 

12 

13 

14 

TOTAL 

Passed 

198 

573 

544 

245 

172 

99 

160 

332 

129 

36 

250 

341 

278 

3357 

N/A 

14 

76 

136 

3 

0 

0 

6 

0 

8 

0 

2 

28 

43 

316 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests were withdrawn from ACVC Version 1.10 
at the time of this validation: 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84N 

CD2A84M 

CD5011O 

CD2B15C 

CD7205C 

CD2D11B 

CD5007B 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CE3301A 

CD7203B 

CE3411B 

CD7204B 

CD7205D 

CE2107I 

CE3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 316 tests were inapplicable for 
the reasons indicated. 


The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAXJJIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 


16 










TEST INFORMATION 


C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


b. C35508I, C35508J, C35508M, and C35508N are not applicable because 

they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE => 0, 

TRUE => 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 

c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORT_INTEGER: 

C45231B C45304B C455C2B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 

e. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because they acquire a value of SYSTEM.MAX_MANTISSA greater than 
32. 


f. C86001F is not applicable because, for this implementation, the 
package TEXT_IO is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_IO, and 
hence package REPORT, obsolete. 

g. B86001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, LONG_INTEGER, or SHORT_INTEGER. 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SHORT_FLOAT. 

j. CA2009C, CA2009F, BC3204C and BC3205D are not applicable because 

this implementation creates a dependence between a generic body 
and those units which instantiate it (See Section 2.2.i and 
Appendix F of the Ada Standard). 

k. LA3004A, EA3004C, and CA3004E are not applicable because this 
implementation does not support pragma INLINE for procedures. 


17 










TEST INFORMATION 


l. LA3004B, EA3004D, and CA3004F are not applicable because this 
implementation does not support pragma INLINE for functions. 

m. CD1009C, CD2A41A..B (2 tests), CD2A41E and CD2A42A..J (10 tests) 
are not applicable because of restrictions on 'SIZE length clauses 
for floating point types. 

n. CD2A61I..J (2 tests) are not applicable because of restrictions on 
'SIZE length clauses for array types. 

o. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because of restrictions on 'SIZE length clauses for access types. 

p. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 

discriminants without defaults. These instantiations are rejected 

by this compiler. 

q. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_I0 with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 


r. 

CE2102D is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

IN_FILE mode 

for SEQUENTIAL_IO. 


s. 

CE2102E is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

OUTJ'ILE mode 

for SEQUENTIAL_ 

10. 


t. 

CE2102F is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

INOUTJTLE mode for DIRECT_IO 

• 


u. 

CE2102I is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

IN_FILE mode 

for DIRECT 

.10. 



V. 

CE2102J is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with OUT_FILE mode for DIRECT_I0. 

w. CE2102N is inapplicable because this implementation supports OPEN 
with INJFILE mode for SEQUENTIAL_IO. 

x. CE2102O is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

y. CE2102P is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for SEQUENTIAL_IO. 

z. CE2102Q is inapplicable because this implementation supports RESET 
with OUT_FILE mode for SEQ(JENTIAL_IO. 


13 










TEST INFORMATION 


aa. CE2102R is inapplicable because this implementation supports OPEN 
with INOUT FILE mode for DIRECT 10. 


ab. CE2102S is inapplicable because this implementation supports RESET 
with INOUT_FILE mode for DIRECT_IO. 

ac. CE2102T is inapplicable because this implementation supports OPEN 
with IN_FILE mode for DIRECT_IO. 

ad. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE mode for DIRECT_IO. 

ae. CE2102V is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for DIRECT_IO. 

af. CE2102W is inapplicable because this implementation supports RESET 
with OUT_FILE mode for DIRECT_IO. 

ag. CE2107B..E (4 tests), CE2107L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing 

for sequential files. The proper exception is raised when 

multiple access is attempted. 

ah. CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ai. CE3102E is inapplicable because text file CREATE with IN_FILE mode 
is supported by this implementation. 

aj. CE3102F is inapplicable because text file RESET is supported by 
this implementation. 

ak. CE3102G is inapplicable because text file deletion of an external 
file is supported by this implementation. 

al. CE3102I is inapplicable because text file CREATE with 0UT_FILE 
mode is supported by this implementation. 

am. CE3102J is inapplicable because text file OPEN with IN_FILE mode 
is supported by this implementation. 

an. CE3102K is inapplicable because text file OPEN with 0UT_FILE mode 
is not supported by this implementation. 

ao. CE3111B, CE3111D..E (2 tests), CE3114B, and CE3115A are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 


19 









TEST INFORMATION 


text files. The proper exception is raised when multiple access 
is attempted. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 15 tests. 

The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B71001E B71001K B71001Q 871001W BA3006A BA3006B 

BA3007B BA3008A 3A3008B BA3013A (6 and 7M) 

Tests C34005G, C34005J and C34006D returned the result FAILED because of 
false assumptions that an element in an array or a record type may not be 
represented more compactly than a single object of that type. The AVO has 
ruled these tests PASSED if the only message of failure occurs from the 
requirements of T'SIZE due to the above assumptions (T is the aray type). 

Tests CD2C11A and CD2C11B contain 'SIZE length clauses for task types which 
were insufficient for this machine. These tests were modified to include a 
'SIZE clause of 2K. 


3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, no results produced by the TeleGen2 Ada system were 
submitted to the AVF by the applicant for review. Instead, the applicant 
assured the AVF that results would be identical with results obtained for 
validation #040 of the TeleGen2 Ada Development System for AIX PS/2 
(certificate #89091111.10177). 


20 








TEST INFORMATION 


3.7.2 Test Method 

Testing of the TeleGen2 Ada System using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The 
configuration in which the testing was performed is described by the 
following designations of hardware and software components: 

Host and target computer: ALR 386/216 
Operating system: SCO Unix System V.3.2 

A streamer cassette containing the customized test suite was loaded to the 
host machine. Results were written to tape and transferred to a SUN machine 
where they were evaluated and archived. 

The compiler was tested using command scripts provided by TeleSoft 
and reviewed by the validation team. The tests were compiled using the 
command 

ada -v -0 D (test files) 
and linked with the command 

aid <main unit) 

The -L qualifier was added to the compiler call for class B and E tests. 
See Appendix E for explanation of compiler and linker switches. 

Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were 
captured on magnetic tape and archived at the AVF. The listings examined 
on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at TeleSoft, San Diego, USA, and was completed on 31 
January 1990. 


21 









DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 


TeleSoft has submitted the following Declaration of Conformance 
TeleGen2 Ada for SCO Unix V.3. 


concerning 









DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: IABG, Dept. SZT. D-8012 Ottobrunn 
Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 


Base Compiler Name: 
Version: 

Host Computer System: 
Target Computer System: 


TeleGen2 Ada for SCO Unix V.3 
1.4A 

ALR 386/216 (under SCO Unix System V.3.2) 
Same as Host 


Customer’s Declaration 


I, the undersigned, representing TELESOFT, declare that TELESOFT has no knowledge 
of deliberate devi^ions from the Ada Language Standard ANS1/MIL-STD-1815A in the 
lentationfs) listed in this declaration. 


( LU'Xst .t 

' d —-- 

TELESOFT ~ >' 

Raymond A. Parra, Vjce f 

president and General Counsel 


Date: cA " / 7 0 










APPENDIX F OF THE Ada STANDARD 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of TeleGen2 Ada, as described in this Appendix, are 
provided by TeleSoft. Unless specifically noted otherwise, references in 
this appendix are to compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which are not a 
part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483643 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 
type LONG FLOAT is digits 15 

range -8.98846567431158E+307 .. 8.98846567431158E+307; 

type DURATION is delta 2#1.0#E-14 range -86400.0 .. 86400.0; 


end STANDARD; 











TeleGenl User Guide for UNIX 


9.6. LRM Annotations 

TeieGen2 compiles che full ANSI Ada language as defined by the Reference Manual for the 
Ada Programming Language (LRM) (ANSI/MIL-STD-1815A). This section describes the 
portions of che language chat are designated by the LRM as implementation dependent for the 
compiler and run-time environment. 

The information is presented in the order in which it appears in the LRM. In general, 
however, only those language features that are not fully impiemented by the current re lease of 
TeieGen2 or chat require clarification are included. The features chat are optional or that are 
implementation dependent, on the other hand, are described in detail. Particuiariy relevant are 
che sections annotating LRM Chapter 13 (Representation Clauses and Implementation- 
Dependent Features) and Appendix F (Implementation-Dependent Characteristics). 

9.6.1. LRM Chapter 2. 

[LRM 2.1] The host and target character set is the ASCII character set. 

[LRM 2.2! The maximum number of characters on an Ada source line is 200. 

[LRM 2.3] TeieGen2 implements all language-defined pragmas except pragma Optimize. If 
pragma Optimize is included in Ada source, the pragma will have no effect. 

Limited support is available for pragmas Memory_Size. Storage_Unit. and System_Name; 
that is. these pragmas are allowed if the argument is the same as the value specified in the 
System package. 

Pragmas Page and List are supported in the context of source/error listings: refer to the 
end of Chapter 3 for more information. 

9.6.2. LRM Chapter 3. 

[LRM 3.2.1] This release of TeieGen2 does not produce warning messages about the use of 
uninitialized variables. The compiler will not reject a program merely because it contains such 
variables. 

[LRM 3.3.1] The maximum number of elements in an enumeration type is 32767. This 
maximum can be realized only if generation of the image taoie for the type has been deferred, and 
there are no references in the program that wouid cause the image taoie to be generated. 
Deferral of image table generation for an enumeration type. P. is requested by the statement: 

pragma Images (P. Deferred); 

Refer to ‘‘Implementation-Defined Pragmas. T ’ later in this chapter, for more information on 
pragma Images. 

LRM 3.5.4] There are two predefined integer types: Integer and Long_lnteger. The attributes 
of these types are shown in Taoie 9-7. Note thac using explicit integer type definitions instead of 
precefineh integer types should result in more portable code. 


9-44 


UG-1313N-V 1.31386/UN"DC) © 1989 TeleSoft 


27JUL89 








PROGRAMMING guide 


Table 9-7. Attributes of Predefined Types Integer and Long_Integer 


Attribute 


Type 

Integer 

! Long_integer 

'First 

-32763 

1 -2147483648 

'Last 

32767 

; 2147483647 

'Size 

16 

1 32 

'Width 

6 

! 11 


'LB-M 3.5.8 There are two predefined floating point types: Float and Long_Float. The 
attributes of types Float and Long_Float are shown in Table 9-5. This floating point facility is 
based on the IEEE standard for 32-oit and 64-bit numbers. Note that using explicit real type 
definitions should lead to more portable code. 

The type 5bort_Float is not implemented. 

Table 9-8. Attributes of Predefined Types Float and Long_Float 


Attribute 


Type 

Float 

Long Float 

Macnine_Overflows 



’Machine_Rounds 



’Machine_Radix 



’Machine_Mantissa 

E9 


’Macbme_Emajc 

127 

1023 

’Machine_Emin 

-125 

-1021 

'Mantissa 

21 

51 

'Digits 

6 

15 

'Size 

32 

64 

Emax 

34 

204 

’Safe_Emax 

125 

1021 

’Epsiion 

9.53674E-07 

8.38178E-16 

'Safe_Large 

4.25253E—37 

2.24711641857789E-307 

’Sa/e_Smai] 

1.17549E-38 

2.22507385850721E-308 

'Large 

1.9342SE-25 

2.57110087081438E—61 

’Smail 

2.58494E-26 

1.9946922743316lE -62 



9.3_3. ULM Chapter 4. 

[LEM 4.101 There is no limit on the range of literal values for the compiler. 

[LILM 4.I0J There is no limit on the accuracy of real literal expressions. Real literal 
expressions are computed using an arbitrary-precision arithmetic package. 


17JITL39 


UG- 1313 N-V 1.3 ( 380/UNDC'/ £ 1989 TeieSoft 


9-45 



















TeleGenl User Guide ior UNEv 


9.6.4. LBM Chapter 9. 

[LBM 9.6] This implementation uses 32-oit fixed point numbers to represent the type 
Duration. The attributes of the type Duration are shown in Table 9-9. 

Table 9-9. Attributes of Type Duration 


Attribute 

Value 

’Delta 

’First 

'Last 

0.000061035156250 

-86400.0 

S6400.0 


[LBM 9.8] Sixty-four levels of priority are available to associate with tasks through pragma 
Priority. The predefined subtype Priority is specified in the package System as 
subtype Priority is Integer range 0..S3; 

Currently the priority assigned to tasks without a pragma Priority specification is 31; that is: 

(System.Priority’First •+* System.Priority’Last) / 3 


[LBM 9.11] The restrictions on shared variables are only those specified in the LRM. 

9.8-5. LRM Chapter 10. 

(LBM 101 All main programs are assumed to be parameteriess procedures or functions that 
return an integer result type. 

9.6.6. LUM Chapter 11. 

(LRM 11.1] Numeric_Error is raised for integer or Seating point overflow and for divide-by¬ 
zero situations. Floating point underflow yields a result of zero without raising an exception. 

Program_Error and Storage_Error are raised by those situations specified in LRM Section 
11.1. Exception handling is also discussed in the “Exception Handling” section earlier in this 
chapter. 

9.6.7. LBM Chapter 13. As shown in Table 9-10. the current release of TeleCen2 supports 
most LRM Chapter 13 facilities. The sections beiow the table document those LRM Chapter 13 
facilities that are either not implemented or that require explanation. Facilities implemented 
exactly as described in the LBM are not mentioned. 


9-46 


U G-1313N-V 1.3( 386 /UNIX) F! 1989 TeieSoft 


27JTJL89 











PROGRAM? C 


‘IDE 


Table 9-10. Summary of LILM Chapter 13 Features for TeleGen2 


13.1 Representation Clauses j Supported, except as indicated beiow (LRM 13.2 - I 

| 12.a'i. Pragma Pack is supported, except for dynam- , 
; icaily sized components. For details on the ! 
| TeieCen2 implementation of pragma Pack, see Sec- ; 
i tion 9.6.7.1. { 


13.2 Length Clauses 

SuDDorted: j 

‘Size ! 

- Siorage_Size for collections ■ 

"Storage_Size for task activation 
‘Small for nxed-point types j 

Note: length clauses can be used to reduce the 'Size | 
of data types. 1 

13.3 Enumeration Rep. Qauses 

Supported, except for type Boolean or types derived | 
from Boolean. (Note: users can easily define a non- j 
Boolean enumeration type and assign a rep resen ta- \ 
tion clause to it.) | 

13.4 Record Rep. Clauses 

Supported except for records with dynamically sized 
components. See Section 9.6.T.4 for a full discussion 
of the TeleGen2 implementation. 

13.3 Address Qauses 

Supported for: objects (including task objects). 

Not supported for: packages, subprograms, or task 
units. Task entries are not applicable to TeleCen2 
host compilation systems. 

See Section 9.S.7.5 for more information. 

13.3.1 Interrupts 

Not applicable to TeieCen2 host compilation sys¬ 
tems. 

13.6 Change of Representation 

Supported, except for types with record representa¬ 
tion clauses. 

j -Continued on the next page —— 



27JCX39 


UG-131SN-V1.31386/'LT.TC. c: 1089 TeieSoft 





























TeleGen2 User Guide for UNEt 


Table 9-10. Summary of LILM Chapter 13 Features for TeieGen2 (Coned) 


- Continued from the previous page —— i 

1 

13.7 Package System | Conforms closeiv to LR.M model. Refer to Section i 

j 9.6.7.7 for details on the TeieGen2 implementation, j 

13.7.1 System-Dependent Named 
Numbers 

Refer to the specification of package System (Sec- ! 
tion 9.6.7.7). j 

13.7.2 Representation Attributes 1 Implemented as described in LRM except that: 

1 ‘Address for packages is unsupported. 

! ‘Address of a constant yields a null address. 

13.7.3 Representation Attributes of 
Real Types 

See Table 9-8. j 

13.3 Machine Code Insertions 

Fully supported. The TeieGen2 implementation | 
defines an attribute. ’Offset, that, along with the ! 
language-defined attribute ’Offset, allows addresses : 
of objects and offsets of data items to be specified in ; 
stack frames. Refer to Section 9.5 for a full descrip¬ 
tion on the implementation and use of machine code 
insertions. 

13.9 Interface to Other 

Languages 

Pragma Interface is supported for Assembly, C, and ! 
UNIX. Refer to Section 9.4 for a description of the ! 
implementation and use of pragma Interface. ! 

13.10 Unchecked Programming 

Supported except as noted below (LRM 13.10.1 and 
13.10.2). 

13.10.1 Unchecked Storage Deallo¬ 
cation 

Supported except for types with length clauses for i 
storage size. ! 

13.10.2 Unchecked Type Conver¬ 
sions 

Supported except for unconstrained record or array 
types. 


9.6.7.1. Pragma Pack. This section discusses bow pragma Pack is used in the TeleGen2 
implementation. 

a. With Boolean Arrays. You may pack Boolean arrays by the use of pragma Pack. 
The compiier allocates 16 bits for a single Boolean. 3 bits for a component of an unpacked 
Boolean array, and 1 bit for a component of a packed Boolean array. The first figure illustrates 
the layout of an unpacked Boolean array: the one beiow that illustrates a packed Boolean array: 


9~*8 


UG-1313N-V 1.3(386/ UNCC', Q 1989 Telesoft 


;7JUL39 



























PROGRAMMING GUID" 


-Unpacked Boolean array:- 

Unpacked_Bool_Arr_Type is array (Natural range 0..1) of Boolean 
U_B_Arr: Unpacked_Bool_Arr__Type := (True,raise) ; 

MSB L33 

7 0 

Element 0 
Element 1 


0 


0 

o 1 


-— Packed Boolean array: ——— 

Packed_Bool Arr_Type is array (Natural range 0..S) of Boolean; 
pragma Pack -- (Packed Bool_Arr_Type) ; 

P_B_Am Packed_BooI_Arr_Type : = (?_B_Arr(0) => True, 
P_B_Arr(5) =*> TrueT others => False”; 


MSB/HOB 

15 


LSB/LOB 

0 


0 0 0 0 0 0 0 0 


0 0 10 


0 0 


0 1 


P B Arr 


b- With Records. You may pack records by use of pragma Pack. Packed records follow 
these conventions: 

1. The total size of the record is a multiple of 8. 

2. Packed records may cross word boundaries. 

3. Records are packed to the bit level if the elements are themselves packed. 

Below is an example of packing in a procedure. Rep_Proc. that defines three records of different 
lengths. Objects of these three packed record types are components of the packed record Rec. 
The storage allocated for Rec is 16 bits: that is. it is maximally packed. 


2TJUL39 


UG-1313N-V 1.3(386/UNDO © 1989 TeleSo/t 


9—49 











TeieGen2 User Guide for UNIX 


procedure Sep_Proc is 

type A1 is array (Natural range 0 . . 3) of Boolean; 
pragma Pack (Al); 

type A2 is array (Natural range 0 . . 3) of Boolean; 
pragma Pack (A2); 


type A3 is array (Natural range 0 . . 2) of Boolean; 
pragma Pack (A3); 


type A_Bee is 

record 

One : Al; 

Two : A2; 

Three : A3; 
end record; 
pragma Pack (A_Ree); 


Rec : A_Rec; 


begin 

Rec.One := ( 0 => True, 

3 => False, 

S => False, 

Rec.Two (3) := True; 

Rec.Three (1) := True; 

end Rep_Proc; 


1 => False, 
4 => True, 

7 => False, 


2 => False, 

5 => False, 

8 => True ); 


9.6.7.2. Length Clauses [LEM 13.2]. Length clauses of the form “for T'Storage_Sue rue 
<expression(where T is a task type) specify the size to be allocated for that task’s stack at 
run time. The use of this clause is encouraged in all tasking applications to control the size of the 
applications. Otherwise, the compiler may default this value to a large size. TeleGen2 allows 
you to specify storage for a task activation using the ’Storage^Size attribute in a length clause. 

9.8.7.3. Enumeration Representation Clauses [LRM 13.31. Enumeration representation 
clauses are supported, except for Boolean types. 

Performance note: Be aware that use of such clauses will introduce considerable overhead 
into many operations that involve the associated type. Such operations include indexing an array 
by an element of the type, or computing the ’Pos. ’Pred. or ’Succ attributes for values of the 
type. 


9.8.7.4. Record Representation Clauses [LRM 13.41. Since record components are 
subject to rearrangement by the compiler, you must use representation clauses to guarantee a 
particular layout. Such clauses are subject to the following constraints: 

« Each component of the record must be specified with a component ciause. 

• The alignment of the record is restricted to mods 1 and 2. byte and word aligned. 

• Bits are ordered right to left within a byte. 

• Components may cross word boundaries. 

Here ;s a simple example showing how the layout of a record can be specified by using 
reoresentation clauses: 


9—50 


UG-1313N-V1.3(386.'OTCC; Q 1989 TeleSoft 


2TJTTL89 












PUGG2LA.MMING GUIDE 


package RepspecJExajaple is 
Bits : consrant := 1; 

Word : constant := 4; 

type Five is range 0 .. 1S#LF#; 

type Seventeen is range 0 .. 16#1FFFF#; 

type Nine is range 0 .. 511; 

type Record—Layout—Type is record 
Eleaentl : Seventeen; 

Eleaent2 : Five; 

Eleaent3 : Boolean; 

Eleaent4 : Nine; 
end record; 

for Record—Layout—Type use record at mod 2; 
Eleaentl at 0-Word range 0 .. 15; 

Eleaent2 at 0-Word range 17 .. 21; 

Eleaent3 at 0-Word range 22 .. 22; 

Eleaent4 at 0-Word range 23 .. 31; 

end record; 

Record-Layout : Record-Layout—Type; 
end Repspec—Example; 


9. 8 . 7.3. Address Clauses [LXLM 13.3 j. The Ada compiler supports address clauses for 
objects, subprograms, and entries. Address clauses for packages and cask units are not 
supported. 

Address clauses for objects may be used to access hardware memory registers or other 
known memory locations. The use of address ’vises is affected by the fact that the 
System.Address type is private. For the 80386 target, literal addresses are represented as 
integers, so an unchecked conversion must be applied to these literals before they can be passed 
as parameters of type System.Address. For example, in the examples in this chapter the 
following declaration is often assumed: 

function Addr is new Unchecked—Conversion (Long,,, Integer,Systea.Address) ; 

This function is invoked when an address literal needs to be converted to an Address type. 
Naturally, user programs may implement a different convention. Below is a sample program that 
uses address clauses and this convention. Package System must be expiicitlv untAed when using 
address clauses. 

with Systea; 

with' Unchecked—Conversion; 
procedure Hardware—Access is 

function Addr is new Unchecked-Conversion (Long—Integer, Systea.Address) 

Hardware—Register : integer; 

for Hardware—Register use at Addr (ISaFFOOOC#); 
begin 

end Hardware—Access; 


27JUL39 


UG-1313N-Vl.5(386/UMTX) ® 1989 TeleSoft 


9-31 










TeieGen.: 'Jier Guide for UNEC 


When using an address clause for an ooject with an initial value, the address clause should 
immediately follow the object declaration: 

Qbj: Som e T ype := <init—expr>; 
for Obj use at <addr_sxpr>; 

This sequence allows the compiler to perform an optimization wherein it generates code to 
evaluate the <addr_expr> as part of the elaboration of the declaration of the object. The 
expression <init_expr> will then be evaluated and assigned directly to the object, which is stored 
at <addr_jexpr>. If another declaration had intervened between the object declaration and the 
address clause, the compiler would have had to create a temporary object to hold the 
initialization value before copying it into the object when the address clause is elaborated. If the 
object were a large composite type, the need to use a temporary couid result in considerable 
overhead in both time and space. To optimize your applications, therefore, you are encouraged 
to place address clauses immediately after the relevant object declaration. 

As mentioned above, arrays containing components that can be allocated in a signed or 
unsigned byte (8 bits) are packed, one component per byte. Furthermore, such components are 
referenced in generated code by 30386 byte instructions. The following example indicates how 
these facts allow access to hardware byte registers: 


with System; 

with Unchecked-Conversion; 
procedure Main is 

function Addr is new Unchecked—Conversion (Long Integer, System.Address); 
type Byte is range -128..127; 

HW_Regs : array (0..1) of By te; 
for HW_Regs use at Addr (18#FFF310#); 

Status—Byte : constant integer := 0; 

Next—Block-Request: constant integer := 1; 

Bequest_3yte : Byte := 119; 

Status : Byte; 



begin 

Status := HW_Regs(Status—3yte); 

HW—Regs (Next—Block-Request) : = Request—Byte; 
end Main; 

Two byte hardware registers are referenced in the example above. The status byte is at location 
16*FFF310* and the next block request byte is at location l6*FFF311y. 

Function Addr takes a long integer as its argument. Long-Integer’Last is 16#7FFFFFFF#, 
but there are certainly addresses greater than Long_Integer’Last. Those addresses with the high 
bit set, such as FFFAOOOO, cannot be represented as a positive long integer. Thus, for addresses 
with the high bit set. the address should be computed as the negation of the 2’s complement of 
the desired address. According to this method, the correct representation of the sample address 
above would be Addr! -16*00060000*). 

9.6. 7. 6. Change of Representation ’LILM 13.81. TeleGenH supports changes of 

representation, exceot for types with recorc representation clauses. 


9-52 


UG-1313N-V 1.2(336 UNIX! ^ 1989 TeleSoft 


27JUL89 



PROGRAMMING GU 


9.6.7.7. The Package System [LRM 13.7'. The specification of TeieGenl's implementation 
of package System is presented in the LRM Appendix F section at tne end of this chapter. 

9.6.7.3. Representation Attributes [LRM 13.7.31. The compiler does not support 
Address for packages. 

9.6.7.9. Representation Attributes of Real Types [LRM 13.7.31. The representation 
attributes for the predefined floating point types were presented in Taole 9~s. 

9.6.7.10. Machine Code Insertions [LRM 13.31. Machine code insertions, an optional 
feature of the Ada language, are fully supported in TeieGen2. Refer to the “Using Machine Code 
Insertions"’ section earlier in this chapter for information regarding their implementation and 
examples on their use. 

9.6.7.11. Interface to Other Languages [LRM 13.9j. In oragma Interface is supported for 
Assembly, C. and UNIX. Refer to Section 9.4 for information on tne use of pragma Interface. 
TeieGen2 does not currently allow pragma Interface for library units. 

9.6.7.12. Unchecked Programming [LRM 13.101. Restrictions on unchecked 
programming as it applies to TeleGen2 are listed in the following paragraphs. 

[LRM 13.10.2j Unchecked conversions are allowed between types (or subtypes) Tl and T2 as 
long as they are not unconstrained record or array types. 

9.6.3. LRM Appendix F for TeleG«a2. The Ada language definition allows for certain 
target dependencies. These dependencies must be described in the reference manual for each 
implementation, in an “Appendix F” that addresses each point listed in LRM Appendix F. 
Table 9-11 constitutes Appendix F for this implementation. Points that require further 
clarification are addressed in the paragraphs that follow the table. 


17JUL39 


U G-1313N-V 1.31386/TJNUC) © 1989 TeieSoft 


9-5 









TeleGenZ User Guide for UNIX 


Table 9-11. LRM Appendix F for TeleGen2 


'1) Implementation-Dependent Pragmas 


(a) Implementation-denned pragmas: Comment, 
Linkname. images, and No_Suppress (Section 
9.6.J.1). 

(b) Predenned pragmas with implementation- 
dependent characteristics: 

* Interface (assembly. UNIX, and C). 

(Section 9.41. Not supported for 
library units. 

« List and Page (in context of source/error 



(2) Implementation-Dependent Attri¬ 

butes 

TeJeGen2 uses one implementation-defined attri- i 
bute. ’Offset, which, along with the attribute ’Ad- I 
dress, facilitates machine code insertions by allowing ! 
user programs to access Ada objects with little date 
movement or setup. These two attributes and their 
usage were described in u Using Machine Code Inser¬ 
tions.” earlier in this chapter. 

’Address is not supported for packages. 

(3) Package System 

See Section 9.6.7-T. 

(4) Restrictions on Representation 

Clauses 

Summarized in Table 9-10. 

(5) Implementation-Generated Names 

None 

(6) Address Clause Expression Interpre¬ 
tation 

.An expression that appears in an object address 
clause is interpreted as the address of the first 
storage unit of the object. i 

(7) Restrictions on Unchecked Conver¬ 
sions 

Summarized in Table 9-10. j 

-— Continued on the nest page - ! 



9-34 


UG-1313N-V1.3(386/UNIX'. ^ 1989 Teiedott 



























programming guise 


Table 9-II. LUM Appendix F for TeieGen2 (Contd) 


- Continued from the previous page - | 

I 

(8) Implementation-Dependent Charac¬ 
teristics of the I. 0 Packages. 

1. In Text_IO. the type Count is defined as follows: 
type Count is range 0..System.Max Text_IO_Count; 

- or O..Max_Int—1 OR 0..2_L47_483_646 

2. In Text_IO. the type Field is defined as follows: 

subtype Field is integer range 

System.Majc_Te.xt_IO-Field: 

2. In Text—10. the Form parameter of procedures i 
Create and Open is not supported. (If you sup¬ 
ply a Form parameter with either procedure, it 
is ignored.) 

4. Sequential—10 and Direct—IO cannot be instan¬ 
tiated for unconstrained array types or discrim¬ 
inated types without defaults. 

5. The standard library contains preinstantiated 
versions of Text_IO.Integer_IO for types Integer 
and Long_Integer and of Text_IO.Float_IO for 
types Float and Long_Float. We suggest that 
you use the following to eliminate multiple in¬ 
stantiations of these packages: 

Integer_T ext—IO 

Long—Integer—Text—IO 

Float _Text _IO 

Long—Float—Text—IO J 



9.6.8.1 . Implementation-Defined Pragmas. There are four implementation-defined 
pragmas in TeleGen2: pragmas Comment, Linkname. Images, and No_5uppress. 

9.6.8.1.1. Pragma Comment. Pragma Comment is used for embedding a comment into the 
object code. Its syntax is: 

pragma Comment ( <strmg_literai> ); 

where i ‘<string_literal>” represents the characters to be embedded in the object code. Pragma 
Comment is allowed only within a declarative part or immediately within a package specification. 
Any number of comments may be entered into the object code by use of pragma Comment. 

9.8.8. 1.2. Pragma Linkname. Pragma Linkname is used to provide Interface to any routine 
whose name can be specified by an Ada string literal. This allows access to routines whose 
identifiers do not conform to Ada identifier rules. 

Pragma Linkname takes two arguments. The first : .s a suDorogram name that has been 
previously specified in a pragma interface statement. The second is a string literal specifying the 


27JTJL89 


UG-13I3N-Vl.3(3Sfl/ "OTECl © i 380 TeleSoft 


9-33 


















TeieGen.3 User Guide :'or UNIX 


exact link name to be employed by the code generator in emitting calls to the associated 
subprogram. The syntax is: 

pragma Interface ( assembly. <subprogram_name> ); 
pragma Linkname ( <subprogram_aame>. <string_Iiterai> ); 

If pragma Linkname does noc immediately foilow the pragma Interface for the associated 
program, a warning will be issued saying that the pragma has no effect. 

A simple example of the use of pragma Linkname is: 

procedure Dummy_^.ccess( Dummy—Arg : System.Address ); 
pragma Interface (assembly, Dummy—iccass ); 
pragma Linkname (Dummy—Access , 1 _access :i ) ; 


9.6.8.1.3. Pragma Images. Pragma Images controls the creation and allocation of the image 
and index tables for a specified enumeration type. The image table is a literal string consisting of 
enumeration literals catenated together. The index table is an array of integers specifying the 
location of each literal within the image taoie. The length of the index table is therefore the sum 
of the lengths of the literals of the enumeration type: the length of the index table is one greater 
than the number of literals. 

The syntax of this pragma is: 

pragma Images(<enumeration_type>, Deferred); 

~ or — 

pragma Images (< enumeration--type >, Immediate); 

The default. Deferred, saves space in the literal pool by not creating image and index tables for 
am enumeration type unless the ’Image. ’Value, or 'Width attribute for the type is used. If one of 
these attributes is used, the tables are generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in more than one compilation unit, more 
than one set of tables is generated, eliminating the benefits of deferring the table. In this case, 
using 

pragma Images;<enumeration _rype>. Immediate); 

viil cause a single image table to be generated in the literal pool of the unit declaring the 
enumeration type. 

For a very large enumeration type, the length of the image tabie will exceed Integer’Last 
(the maximum length of a string). In this case, using either 

pragma Images!<enumeration type>, Immediate); 

or the 'Image. ’Vaiue. or 'Width attribute for the type will result in an error message from the 
compiler. 

9.8.3.1.4. Pragma No_Suppress. .No_5uppress is a TeieGenl-defined pragma that prevents 
the suppression of checxs within a particular scope. It can be used to override pragma Suppress 
in an enclosing scope. No_Suppress is particularly useful wnen you have a section of code that 
reiies upon predefined checks to execute correctly, but you need to suppress checks in the rest of 


9»o8 


UG-1313N-Vl.3(386<UNIX'. 1989 TeleSoft 


2TJTJL89 









programming guide 


the compilation unit for performance reasons. 

Pragma No_Suppress has the same syntax as pragma Suppress and may occur in the same 
places in the source. The syntax is: 

pragma No_Suppress (<ident:fier> [, ;ON =>j <name>j); 

where <ideatifier> is the tvoe of check you want to suDpress (e.g., access^check; refer to 

LR\1 11.7) 

<naxne> is the name of the object, type,-subtype, task unit, generic unit, or subprogram 
within which the check is to be suppressed: <name> is optional. 

If neither Suppress nor No_5uppress are present in a program, no checks will be suppressed. 
You may override this default at the command levei. by compiling the hie with the —i(nhibit 
option and specifying with that option the type of checks you want to suppress. For more 
information on -i(nhibit, refer to Chapter 3. 

If either Suppress or No_3uppress are present, the compiler uses the pragma that applies to 
the specific check in order to determine whether that check is to be made. If both Suppress and 
No_Suporess are present in the same scope, the pragma declared last takes precedence. The 
presence of pragma Suppress or No_Suppress in the source takes precedence over an -i(nhibit 
option provided during compilation. 

9. 6.8. 2. Package System. The current specification of package System is provided below. 


3TJUL89 


UG- A 313N-Vl.3(38d/UNIX) © 1989 TeieSoft 


9-57 











TeieGen2 User Guide for UNIX 


package System is 

type Address is access integer; 

type Subprogram-Value is private; 

type Name is (TeleGen2); 

System—Name : constant name := TeieGea2; 

Storage-Unit : constant := 8; 

Memory—Size : constant := (2 «« 31) -1; 

-- System-Dependent Named Numbers: 

-- See Table 9- <2 for the value* for attribute j of 
— type* Float and Long—Float 

Min^Jnt : constant := -(2 «■ 31) ; 

Max—Int : constant : = (2 -- 31) -1; 

Max-Digits : constant : = 15; 

Max—Mantissa : constant 31; 

Fine—Delta : constant :« 1.0 / (2 »- Max—Mantissa); 

Tick : constant := 10.0E-3; 

-- Other System-Dependent Declarations 

subtype Priority is integer range 0 .. 83; 

Max—Object—Size : constant := Max—Int; 

Max—Record—Count : constant : = Max—Int; 

Max_Text. TO Count : constant := Max—Int -1; 

Max-Text—10—Field : constant : = 1000; 

private 

end System; 


9.6.8.3. Representation Clause Restrictions. Restrictions on representation clauses within 
TeieGen2 were discussed in “LRM Chapter IS.’’ earlier in this section. 

9.B.8.4. Implementation-Generated Names. There are no implementation-generated 
names to denote implementation-dependent components. 

9.6.8.5. Address Clause Expression Interpretation. .An expression that appears in an 
object address clause is interpreted as the address of the first storage unit of the object. 

9.6.8.5. Unchecked Conversion Restrictions. Restrictions on unchecked conversions were 
discussec ;n "Uncnecxed Programming,’" eariier in this section. 


9-58 


UG-1313N-V 1.3(386 /UNIX) © 1989 TeleSoft 


27JULS9 









PROGRAMMING GUIDE 


9.8.8.7. Implementation-Dependent Characteristics of the I/O Packages. 

1. In Text_IO. the type Count is denned as follows: 

type Count is range 0. .Long—Integer’Last - 1 

2. In Text_IO. the type Field is denned as follows: 

subtype Field is integer range 0. .Text_llanager .Field’Last; 

3. Sequential—IO and Direct_IO cannot be instantiated for unconstrained array types or 
discriminated types without defaults. 

4. The standard library contains preinstantiated versions of Text_IO.Integer_IO for type 
Integer and Long_Integer and of Text_IO.Float_IO for type Float and Long_Float. It 
is suggested that the following be used to eliminate multiple instantiations of these 
packages: 

lnteger_Text_I O 
Long_lntegerJText_IO 
Float_Text_IO 
Long_Float_T ext_JO 


27JUL89 


UG-1312N-V 1.3( 386/UNEC) (c) 1989 TeleSoft 


9-59 









TEST PARAMETERS 


APPENDIX C 
TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 199 * 'A' & '1' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


SBIG_ID2 199 * 'A' & ' 2 ' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 100 * 'A' & '3’ & 99 * ’A' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 









TEST PARAMETERS 


Name and Meaning Value 

$BIG_ID4 100 * 'A' & ’4’ & 99 * 'A' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 197 * '0' & "298" 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 195 * '0' & "690.0" 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 "" & 100 * 'A' & "" 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 ' & 99 * 'A' & '1' & 

A string literal which when 
catenated to the end of 
BIG STRING1 yields the image of 

bigIidi. 

SBLANKS 180 * ' ' 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 2_147_483_646 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 2147483647 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 8 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 







TEST PARAMETERS 


Name and Meaning 


$DEFAULT_SYS_NAME 

The value of the constant 
SYSTEM-SYSTEM NAME. 


$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT 10.FIELD’LAST. 


SFIXEDJJAME 

The name of a predefined 
fixed-point type other than 
DURATION. 


$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0AT, or 
LONG FLOAT. 


$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION’BASE'LAST 
and DURATION’LAST or any value 
in the range of DURATION. 


$GREATER_THAN_DURATION_BASE_LAST 

A universal real literal that is 
greater than DURATION’BASE'LAST. 

SHIGHJPRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 


SILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 


Value 

TELEGEN2 

2n.0#E-31 

1000 

NO_SUCH_FIXED_TYPE 

NO_SUCH_FLOAT_TYPE 

100 _ 000.0 

131_0 7 3.0 

63 

BADCHAR* V% 

/NONAME/DIRECTORY 











TEST PARAMETERS 


Name and Meaning 
$INTEGER_FIRST 

A universal integer literal 

whose value is INTEGER’FIRST. 

$INTEGER_LAST 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 

A universal integer literal 

whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION 

A universal real literal that 
lies between DURATION’BASE’FIRST 
and DURATION’FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST 

A universal real literal that is 
less than DURATION’BASE’FIRST. 

$LOV_PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

SMAXJ3IGITS 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 

A universal integer literal 
whose value is SYSTEM.MAX_INT+1. 


Value 

-32768 

32767 

32768 

-100JD00.0 

—131_0 73.0 

0 

31 

15 

200 

2147483647 

2 147 483 648 











TEST PARAMETERS 


Name and Meaning Value 

$MAX_LEN_INT_BASED_LITERAL ,, 2:" & 195 * ’O' & "11:" 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_L£N 
long. 

$MAX_LEN_REAL_BASED_LITERAL "16:" & 193 * 'O’ & "F.E:" 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEw long. 

SMAX_STRING_LITERAL "" & 198 * 'A' & 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT -2147483648 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

SNAME NO_SUCH_TYPE_AVAILABLE 

A name of a predefined numeric % 

type other than FLOAT, INTEGER, 

SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST TELEGEN2 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 16IFFFFFFFE# 

A based integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of the representation 
for SYSTEM.MAX INT. 








TEST PARAMETERS 


Name and Meaning 
$NEV_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 
pragma MEMORY_SIZE, other than 
$ D EFAUL T _MEM_SIZ E. If there is 
no other value, then use 
SDEFAULT_MEK_SIZE. 

SNEV.STORJJNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGEJJNIT. 

$NEW_SYS_NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 

2147483647 


8 


TELEGEN2 

32 


0.01 








WITHDRAWN TESTS 


APPENDIX D 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C This test expects that the string "— TOP OF PAGE. 

63" of line 204 will appear at the top of the listing page due 
to a pragma PAGE in line 203; but line 203 contains text that 
follows the pragma, and it is this that must appear at the top 
of the page. 

b. A39005G This test unreasonably expects a component clause to 

pack an array component into a minimum size (line 30). 

c. B97102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative (line 31) . 

d. C97116A This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleaved execution in such a way that the evaluation 
of the guards at lines 50 & 54 and the execution of task CHANGING- 
_OF_THE_GUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even though none of 
the units is illegal with respect to the units it depends on; by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95). 

f. CD2A62D This test wrongly requires that an array object’s size 
be no greater than 10 although its subtype's size was specified 
to be 40 (line 137) . 









WITHDRAWN TESTS 


g. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] These 
tests wrongly attempt to check the size of objects of a derived 
type (for which a 'SIZE length clause is given) by passing them 
to a derived subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, they use the 
'SIZE length clause and attribute, whose interpretation is 
considered problematic by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84N & M, & CD5011O [5 tests] These tests 

assume that dependent tasks will terminate while the main pro¬ 
gram executes a loop that simply tests for task termination; this 
is not the case, and the main program may loop indefinitely 
(lines 74, 85, 86 & 96, 86 & 96, and 58, resp.). 

i. CD2B15C & CD7205C These tests expect that a 'STORAGE_SIZE 
length clause provides precise control over the number of 
designated objects in a collection; the Ada standard 13.2:15 
allows that such control must not be expected. 

j. CD2D11B This test gives a SMALL representation clause for a 
derived fixed-point type (at line 30) that defines a set of 
model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

k. CD5007B This test wrongly expects an implicitly declared sub¬ 

program to be at the the address that is specified for an un¬ 
related subprogram (line 303) . 

l. ED7004B, ED7005C 4 D, ED7006C & D [5 tests] These tests check 

various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEM.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEM.TICK—particular instances of change may be 
less (line 29). 

n. CD7203B, & CD7204B These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by 
the WG9 ARG. 

o. CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task's 
activation as though it were like the specification of storage 
for a collection. 

p. CE2107I This test requires that objects of two similar scalar 
types be distinguished when read from a file—DATA_ERROR is 









WITHDRAWN TESTS 


expected to be raised by an attempt to read one object as of 
the other type. However, it is not clear exactly how the Ada 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
is not considered valid, (line 90) 

q. CE3111C This test requires certain behavior, when two files are 

associated with the same external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_OF_LINE & 
END_OF_PAGE that have no parameter: these calls were intended 
to specify a file, not to refer to STANDARD_INPUT (lines 103, 
107, 118, 132, & 136). 

s. CE3411B This test requires that a text file's column number be 

set to COUNT'LAST in order to check that LAYOUT_ERROR is raised 
by a subsequent PUT operation. But the former operation will 
generally raise an exception due to a lack of available disk 

space, and the test would thus encumber validation testing. 










COMPILER AND LINKER OPTIONS 


APPENDIX E 

COMPILER AND LINKER OPTIONS 


References and page numbers in this appendix are 
consistent with compiler documentation and not with this 
report. 












A L) A ( 1 ) 


USER COMMANDS 


ADA ( I ) 


1 


NAME 

ada - TeleGen2 Compiler 
SYNOPSIS 

ada -I libname -t templibi V vsm sizei j-C n -E nj j-i acini 
j-m unit j-b, *T n, -P options, -p objects, -o filejj 
|-0 key |-G -1 filej] [-L i FSdekvxj j-u Is j i| input spec 

DESCRIPTION 

The ada command calls the TeleGen2 compiler, which comprises the front end, middle pass, code 
generation, and list generation phases. By default the front end, middle pass, and code generation 
phases are executed. This process results in the generation of object modules, which are put into 
the working sublibrary The Ada binder and native linker may be be invoked to create an 
executable file. 

The command terminator, input_spec, indicates the file or files to be compiled. Any number and 
combination of files may be specified, up to the maximum line length. Files listed on the 
command line that have no extension are given the extension ".ada" by the compiler. Source files 
that have the ".ada" extension are assumed to contain Ada text to be compiled, whereas source 
files that have the ".ilf" extension are assumed to contain a list of files to be compiled. 

The temporary errors file is created in /Imp as errorXXXXXX, with the "XXXXXX" being 
replaced with the compilation process number to prevent file name collision. 

Compilation errors as well as compiler driver errors (e.g. "file not found") are output to stderr 
Informational output will also be directed to stderr. Banner messages as provided by the -v option 
are examples of informational output. 

OPTIONS 

Library Specification Options: 

-1 libnamc 

Use libname as the file containing the sublibrary list. The sublibrary list is the ordered set 
of sublibraries that collectively define the Ada Program Library. If this option is omitted, 
and the -t option is not used, the default liblst.alb is assumed to be the library. -1 cannot 
be used with -t. 

-t templib 

Use templib as a temporary sublibrary list for this process. The default sublibrary list file 
is not read. The first subiibrary in the list is the working sublibrary. Templib may be 
specified as "sublibl.sublib2...'’ or as "sublibl sublib2 ...". -t cannot be used with -1. 

-V vsm size 

Set the sixe of the Virtual Space Manager’s buffer space to vsm size Kbytes. The default 
vsm size for the command is 2000 Kbytes. 

The optimal value for vsm size depends on the amount of system memory available and 
the number of concurrent users. For a full description see Chapter 3 »n the TclcGtn2 User 
Guide. 

Compiler Execution Control Option*: 

-E n Abort compilation after n errors. Only errors detected by the front end phase are counted. 

The default is 999 Each error message type is counted independently of the others. For 
example, in the default situation, the user may have 998 warning messages and 998 syntax 
errors and the compilation will not abort. 

-i <key> 

(Inhibit) Suppress run-lime checks, source line references, and subprogram name 


TeleGen2( 386/UNIX) 


Last change: 23 February 1989 


1 









ADAH | 


USER COMMANDS 


ADA ( 1 ) 


information in generated object code. 

<key> is one or more of the single-letter suboptions listed below. Several combinations of 
suboptions are possible. When more than one suboption is used, the suboptions appear 
together with no separators. For example, ”-i Inc". 

a Suppress all: source line information, subprogram name information, and run¬ 

time checks. In other words, "a" (« suppress all) is equivalent to "Inc". 

c Suppress run-time checks -- elaboration, overflow, storage access, discriminant, 

division, index, length, and range checks. 

1 Suppress source line information in object code. 

n Suppress subprogram name information object code. 

As an example of use, the command "ada -v -i 1c myfile.ada", inhibits the generation of 
source line information and run-time checks in the object code of myfUt.ada. 

•m unit 

Treat "unit" as a main program. AJter all files named in the input specification have been 
compiled, the Ada binder and native linker are invoked. An executable file named unit is 
left in the current directory. If the main unit has already been compiled, it does not have 
to be in the input file(s). However, it must be present in the current working sublibrary. 
If the -m option is used, appropriate binder/linker options (-m, -b, -T, -P, -p, -o) are 
passed to the binder/linker (see a/d(l)). 

-v Be verbose. Announce each phase as it is entered. 

Output Control Optiont: 

-« Only report errors: do not produce any objects. This option causes only the front end to 
be executed. The front end detects all syntax errors and most semantic errors m the Ada 
source code. Some errors, however, can be detected only by the middle pass and code 
generator: such errors will not be detected when the -e option is specified. Examples of 
such errors are those involving the legality of specific representation specifications and 
violation of code generator capacity limitations. This option is meaningless when used 
with -k. -d. -O, and -x, since each of the latter options requires the production of code 
generated after front end processing. 

-k Keep the intermediate code (High Form and Low Form) for unit bodies in the library. By 
default, the intermediate code for bodies is deleted from the library after code generation 
to minimize library size. The intermediate code is used by the Ada Cross-Referencer (see 
azr(l)) and the Debugger (sec adbg{ 1) and the -d option of the ada command) and 
operated on by the Global Optimizer (see aopt{ 1) and the -O option of the ada command). 
The -k option must therefore be used if any of these three programs are to be used for any 
unit in the current source file. (An exception is that -k need not be used when the -d 
option is used, since use of -d automatically sets -k.j 

-d Provide for debugging. This option causes the code generator to save information needed 
by the TeleGen2 debugger, adbg, in the Ada program library. This information is used for 
mapping between source and object code locations, and for locating data objects. The -d 
option also causes some additional information to be output in object modules. However, 
there is no impact on generated code per se. Use of -d automatically sets the -k option. 

-a Update the library, either after each source file compiles successfully (-u s) or after the 
entire invocation (-u i). This option is most useful for multi-file compilations. In a single¬ 
file compilation, an error within the file prevents the library from being updated. In a 
multi-file compilation, an error within one file will prevent that file from compiling 


TeleGen2(386/UNIX) 


Last change: 23 February 1989 


2 



ADA (1) 


USER COMMANDS 


ADA (1) 


successfully (the library will not be updated with respect to the units in that file). The 
library may or may not be updated for the other (error-free) files in the compilation, 
depending on whether -u is used. If “-u i” is used, the library is updated only at the end 
of compilation. This means that an error found anywhere in any file will prevent the 
library from being updated. If “-u s” is used, the library is updated after each source is 
compiled. This means that the library will be updated for all error-free files. NOTE: “-u 
s” is the default; it is equivalent to not using -u at all. 

-O key Optimize code for each unit being compiled. The optimizer optimizes each unit separately 
as it is being compiled and does not make cross-unit optimizations. The argument to the 
-0 option, key, must be present and must immediately follow the option. This argument 
provides details about how the units are to be compiled. For example, one of the key 
arguments indicates whether subprograms being optimized may be called from parallel 
tasks. See aopt(\) for information about acceptable key values. 

Two other options may be used in conjunction with —O: 

-G Generate a call graph for the unit(s) being optimized. Refer to aopt(l) for more 
information. Note; in the TeleGenS Uter Guide, a discussion on the use of the -G 
option with ada is deferred to the Global Optimizer chapter. 

-I file Inline the subprograms listed in "file". Refer to aopt(l) for more information. 
Note: in the TeleGen2 Uter Guide, a discussion on the use of the -1 option with 
ada is deferred to the Global Optimizer chapter. 

-x Generate profiler information and put it in the object module. Profiler information 

includes execution timing and subprogram call information. If code is compiled with the 
•x option, that option must also be used with the old command when the program is 
bound and linked (see aid(l)). 

Luting Control Options: 

-L Output a source listing interspersed with error information to sourcefile.l, where 

"sourcefile" is the name of the user-supplied source file without the Ada extension. If an 
input-list file is to be processed, a listing file is generated for each source file in the input 
list. Each resulting listing file has the the same name as the source file, except it has an 
".]" extension appended to it. For example, when this option is used with an input list 
that contains 10 source file names, 10 listing files are generated as a result of the 
compilation. If the -F option is used, the listing will not be interspersed. Instead, errors 
will follow ail the source lines. 

-F Do not intersperse errors in source listing; put them after all source lines. This option is 
used only with the -L option. 

-C n Provide n source lines as context with error messages. The default is 1, which is the 

erroneous line itself. Context lines are placed before and after the error line in the error 

message. 

-S Seno a source/assembly listing to unit.s, where "unit" is the name of the unit in the user- 
supplied source file. If an input-list file is specified, a listing file is generated for each 
source file in the input-list file. For example, when this option is used with an input-list 
file that contains 10 source file names, 10 listing files are generated as a result of the 
compilation. 

SEE ALSO 

acmp(l), acp(l), acr(l), ald(l), als(l), amv(l), arec(l), arel(l), arm(l), asd(l), axr(l) 


TeleGen 2(386/UNIX) 


Last change: 23 February 1989 


3 









ALD (1 ) 


USER COMMANDS 


ALD (1) 


name 

aid — TeleGen2 binder/linker 
SYNOPSIS 

aid : -l libname -t templibi j-V vsm size) -T ni -P options; -p objectsj 
[-o name; -|bsvXxj j-Y sizej j-y sizej j-D i -w max_timej mainuim 

DESCRIPTION 

The aid command calls the Ada binder and linker. This command outputs the executable program 
to file mainumt. The binder and linker are executed by default. The user may exclude the linker 
from the run. 

A library may be specified by usi;,g the default library file, liblst.alb, specifying a library file with 
the -1 option, or specifying a temporary library list on the command line, by using the -t option. 

Option pass-through to the native linker is provided. 

The binder puts an elaboration code file, mainunit.obm, in the working sublibrary directory. 

If the native linker is not invoked, a link script file, mainunit.lnk, is put in the current directory. 
This script file may may also be modified by the user so that other object code or special linker 
options are used. 

OPTIONS 

-b Run binder phase only. Elaboration code and a link script are produced. The link script 
is put in the file mainunit.lnk. 

-1 libname 

Use libname as the file containing the sublibrary list. The sublibrary list is the ordered set 
of sublibraries that collectively define the Ada Program Library. If this option is omitted, 
and the -t option is not used, the default liblst.alb is assumed to be the library. -1 may not 
be used with -t. 

-O name 

Use "name" instead of "mainunit" as the name of the executable file. 

-P options 

Pass options to the native linker, options must be a quoted string. This option is provided 
as an escape to allow use of all native linker options without producing and editing a link 
script. An example is: old - P -r’. Refer to the Linker portion of the TeleGen2 User 
Guide for more information. 

-p objects 

Pass objects to the native linker, objects must be a quoted string; it may include archive 
files. This option is typically used with pragma Interface and the -I native linker option. 
objeets may be specified as "objectl object2 ...". An example is: aid -p 'cosine.o 
/usr/lib/libm.a' . Refer to the the Linker portion of the TeleGen2 User Guide for more 
information. 

-T n Trace back depth of exception report. When a run-time exception occurs, the name of the 
unit and the line number of where the exception occurred are displayed with a call chain 
history. The number n, which is 15 by default, defines the levels of call chain history. 

-t templib 

Use templib as a temporary sublibrary list for this process. The default sublibrary list file 
is not read. The first sublibrary in the list is the working sublibrary. Templib may be 
specified as "subiibl.sublib2..." or as "sublibl sublib2 ...". -t may not be used with -1. 

-V usm size 


TeleGen2(386/UNIX) 


Last change: 15 May 1989 


1 









ALD( 1) 


USER COMMANDS 


ALD (1) 


Set the size of the Virtual Space Manager’s buffer space to vsm size Kbytes. The default 
vsm size for the command is 2000 Kbytes. 

The optimal value for vsm size depends on the amount of system memory available and 
the number of concurrent users. For a full description see the Programming Guide 
chapter. 

Note: the -p and -P options are used to provide compatibility with the System V Interface 
Definition while dealing with the non-System V compatible Id command (-lx). 

-v Be verbose. Announce each phase as it is entered. 

-x Link in the execution profiler’s run-time support routines. During program execution. 

these run-time support routines record the profiling data in memory, then write the data 
to files as the program terminates. Units to be profiled must be compiled with the -x 
option of the ada command. 

The options below are binding options used for task execution. 

-D Select non-preemptive delay. This option works only with an interrupt run-time. -D is 
incompatible with -w. 

-w msec 

Limit task execution time to msec; the default is 0 msec, -w is incompatible with -D. 

-X Report unhandled exceptions that occur in tasks. 

-Y itaek 

Allocate "stack" bytes (32-bit bytes) of space for task execution. The default is 8192 
bytes (long-integer). A representation specification for T’storagesize overrides this 
option. 

-y guard 

Allocate "guard" bytes (16-bit bytes) of extra task space for exception and interrupt han¬ 
dling. The default is 1024 bytes (natural). A representation specification for 
T’storage size overrides this option. 

BUGS AND KNOWN LIMITATIONS 

The body of the main program must reside in the current working sublibrary. 

SEE ALSO 

ada(l) 


TeleGen2( 386/UNIX) 


Last change: 15 May 1989 


2 





A O PT ( 1 ) 


USER COMMANDS 


AOPT ( 1) 


NAME 

aopt - TeleGen2 Global Optimizer, standalone mode 
SYNOPSIS 

aopt -1 libname' -t templibj ^-V vsm_sizej '-N collection) |-0 key) |-I file; )-GkSvxi file 
DESCRIPTION 

The aopt command invokes the TeleGen2 Global Optimizer in a standalone mode. Use of the 
optimizer results in programs that are smaller and faster than those compiled without 
optimization. The optimizer works by rewriting the Low Form representations of compilation 
units and then passing the new forms to the code generator. 

As a standalone tool, the optimizer works on a specified set of previously compiled units taken as a 
collection. Optimization of a collection enables cross-unit optimizations within and between units 
of a collection, allowing for a higher level of optimization than can be achieved with optimization 
during compilation. The units in the collection may include the Ada run-time library as well as 
user code, and may constitute an entire program or a stable set of functionally related packages. 
In essence, the standalone optimizer takes the Low Form of a set of units that are to be optimized 
together as a collection, optimizes them, and runs them through the code generator. "Code 
generation" options are therefore provided with aopt. 

The optimization process is guided by the command options and suboptions listed below. The 
command terminator, file, is a text file that lists the units to be optimized. The file consists of two 
lists, separated by a semicolon. The units in each list are separated by commas. The first list 
contains visible units, which are those units that may be referenced by units outside of the 
collection. The second list consists of hidden units, or those units which may only be referenced by 
units within the collection. In the compilation of an entire program, the main program unit is the 
only visible unit, while all other units are hidden. If only one List exists, the units are compiled as 
visible. 

All units to be optimized must first be compiled with the -k option, and must not have been 
optimized during compilation. The -k option keeps the Low Form intermediate code, which is 
needed for the optimization process, in the library. For guidance in efficient use of the optimizer, 
see the Optimizer chapter of the TcicGen2 Utcr Guide. 

OPTIONS 

The " Optimiaer 1 ' Option and It* Suboption*: 

-O Optimize the code for each unit of a collection with the Optimizer in standalone mode. 

The argument to the -O option, <key>, must be present and must immediately follow the 
option. This argument provides details about how the units are to be compiled. The 
suboptions for the argument <key> are described below. If the -O option is not specified 
on the command line, the aopt command assumes the default, -O D, where D represents 
all the default <key> suboptions. 

P/p These two suboptions of the -O option indicate whether or not one or more subprograms 
being optimized might be called from parallel tasks. The default, P, indicates that 
subprograms might be called from paraJI .asks. The p suboption indicates that none of 
the subprograms can be called from para»iel tasks. The p suboption allows data mapping 
optimizations to be made that cannot be made if multiple instances of a subprogram are 
active at the same time. 

R/r These two suboptions of the -O option indicate whether or not one or more subprograms 
interior to the unit being optimized can be called recursively by an exterior subprogram. 
The default, R, indicates that an interior subprogram can be called recursively by an 
exterior subprogram. The r suboption indicates that none of the subprograms in the unit 


TeleGen2(386/UNIX) Last change: 18 February 1988 


1 









AOPT( I) 


A O PT ( 1) 


l SEE COMMANDS 


being optimized can be called recursively by subprograms exterior to the unit or collection 
being optimized. 

I/i These two suboptions of the -O option control the inline expansion of suitable 
subprograms. The default, I, causes the subprograms that are marked with an Inline 
pragma or generated by the compiler to be expanded in line. The i suboption prevents all 
inlining. If suboption i is specified, the A/a suboptions have no effect and no inlining will 
occur. 

A/a These two subopcions of the -O option enable or disable automatic inline expansion. The 
default, A, causes the automatic inline expansion of any subprogram called from only one 
place, as well as those marked by an Inline pragma or generated by the compiler. The a 
suboption disables automatic inline expansion. If a is used, inlining is controlled by the 
I/i suboptions and the -I option. If the i suboption is used, the A/a options are disabled. 
The aopt command option -I is described below 

D/d These suboptions represent all (D) or none (d) of the default suboptions of the -O option. 
If -O is not listed on the command line, then -O with its default suboption D is assumed. 
An alternative way to enter -O D is to use -O PR1A. An alternative way to enter -O d 
is to use -O pria. 

Additional Optimizer Options: 

-G Generate a call graph for the unit or collection being optimized. A call graph is a normal 
text file that displays the static calling relationships among subprograms in an optimized 
unit or collection. The -G option generates a list for each subprogram which displays 
every subprogram called by that subprogram. By default, this list (graph) is not 
generated. When -G is used, the call graph is output to a file that has the same name as 
the unit or collection being optimized, with the file extension ". grf ". See the Optimizer 
chapter of the TeleGen2 User Guide for information on the structure and interpretation of 
call graphs. 

-I file (Inline list) Inline the subprograms listed in "file". This option allows you to select 
subprograms for inlining instead of automatically mlining all subprograms. This option 
should be used with the -O option’s "key" suboption -a, which disables automatic inlimng. 

This option takes one argument. The argument specifies a file that contains the 
subprogram names in the same format as the collection file, i.e., two lists separated by a 
semicolon. The first file specifies the subprograms to be inlined. These subprograms will 
be processed as if there had been a pragma Inline in the source. The second file specifies 
the subprograms not to be iniined, and any Inline pragmas within them will be negated. 
If no items are specified in the first list, use a semicolon to mark the beginning of the 
second list. Subprogram names in these files should list the compilation unit indicating 
the location of the subprogram declaration, not the location of its body. If the 
compilation unit name is not supplied, any matching subprogram name will be affected. 
The processing of the names is case insensitive 

-N collection 

Optimize the units named in "collection". The name is used by the library units for 
storing and retrieving information about the optimized collection. The collection name is 
any name for the collection that has not been used for another collection in the same 
sublibrarv Since the name has a type associated with it. the name of a collection may 
duplicate the name of another library unit. If you do not use the -N option, the optimizer 
creates a unique name for it based on the system time associated with the creation of the 
collection. 


TeieGen2(386/UNIX) 


Last change: 18 February 1988 


2 









A OPT ( 1 ) 


USER COMMANDS 


AOPT (1) 


Library Management Optxont: 

•1 libname 

Use libname as the file containing the sublibrary list. The sublibrary list is the ordered set 
of sublibraries that collectively define the Ada Program Library Lf this option is omitted, 
and the -I option is not used, the default libUt.aib is assumed to be the library. -1 may not 
be used with -t. 

-t templib 

Use templib as a temporary sublibrary list for this process. The -1 option must not be 
used when the -t option is given. The default sublibrary list file is not read. The first 
sublibrary in the list is the working sublibrary. Templib may be specified as 
"sublibl,sublib2..." or as "subiibl sublib2 ...". -t may not be used with -1. 

-V mm size 

Set the sue of the Virtual Space Manager's buffer space to vsm sue Kbytes. The default 
vsm sue for the command is 1500 Kbytes. 

The optimal value for vsm sue depends on the amount of system memory available and 
the number of concurrent users. For a full description see the Programming Guide chapter 
of the TcleGcn2 Veer Guide. 

Code Generation Options: 

-k Keep High Form and Low Form for bodies in the library. By default, the High Form and 
Low Form for bodies are deleted from the library after code generation *o minimize library 
size. 

•S Generate a source-assembly listing of the units in the input file. 

-v Be verbose. Announce each phase as it is entered. 

-x Generate profiler information in the object module. Profiler information includes 
execution timing and subprogram call information. 

SEE ALSO 

ada(l), ald(l) 


TeleGen2(388/UNIX) 


Last change: 18 February 1988 


3 









