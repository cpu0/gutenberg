ARL-TN-0782 • Sep 2016 



akl 

US Army Research Laboratory 


Android: Call C Functions with the Native 
Development Kit (NDK) 

by Hao Q Vu 


Approved for public release; distribution is unlimited. 


NOTICES 

Disclaimers 

The findings in this report are not to be construed as an official Department of the 
Army position unless so designated by other authorized documents. 

Citation of manufacturer’s or trade names does not constitute an official 
endorsement or approval of the use thereof. 


Destroy this report when it is no longer needed. Do not return it to the originator. 



ARL-TN-0782 • Sep 2016 


ARL 

US Army Research Laboratory 


Android: Call C Functions with the Native 
Development Kit (NDK) 

by Hao Q Vu 

Sensors and Electron Devices Directorate, ARL 


Approved for public release; distribution is unlimited. 



REPORT DOCUMENTATION PAGE 


Form Approved 
OMB No. 0704-0188 


Public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, gathering and maintaining the 
data needed, and completing and reviewing the collection information. Send comments regarding this burden estimate or any other aspect of this collection of information, including suggestions for reducing the 
burden, to Department of Defense, Washington Headquarters Services, Directorate for Information Operations and Reports (0704-0188), 1215 Jefferson Davis Highway, Suite 1204, Arlington, YA 22202-4302. 
Respondents should be aware that notwithstanding any other provision of law, no person shall be subject to any penalty for failing to comply with a collection of information if it does not display a currently 
valid OMB control number. 

PLEASE DO NOT RETURN YOUR FORM TO THE ABOVE ADDRESS. 

1. REPORT DATE (DD-MM-YYYY) 2. REPORT TYPE 3. DATES COVERED (From - To) 

September 2016 Technical Note 02/2016-05/2016 

4. TITLE AND SUBTITLE 5a. CONTRACT NUMBER 

Android: Call C Functions with the Native Development Kit (NDK) 

5b. GRANT NUMBER 

5c. PROGRAM ELEMENT NUMBER 

6. AUTHOR(S) 5d. PROJECT NUMBER 

Hao Q Vu 

5e. TASK NUMBER 

5f. WORK UNIT NUMBER 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 8. PERFORMING ORGANIZATION REPORT NUMBER 

US Army Research Laboratory 

ATTN: RDRL-SES-P ARL-TN-0782 

2800 Powder Mill Road 

Adelphi, MD 20783-1138 _ 

9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 10. SPONSOR/MONITOR'S ACRONYM(S) 

11. SPONSOR/MONITOR'S REPORT NUMBER(S) 

12. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution is unlimited. 

13. SUPPLEMENTARY NOTES 

14. ABSTRACT 

The Android Native Development Kit (NDK) provides a Java Android application a simplified mechanism to call embedded 
C native codes, which are used to increase the performance of a computationally intensive application. This step-by-step guide 
is intended to assist programmers with how to attach an NDK plugin to an Android Integrated Development Environment and 
how to call C functions from a Java application. 


15. SUBJECT TERMS 

Android, NDK, Native Development Kit, C callable, Java Native Interface, JNI, Java, C/C++ 


16. SECURITY CLASSIFICATION OF: 


17. LIMITATION 

OF 

ABSTRACT 

UU 

18. NUMBER 

OF 

PAGES 

20 

19a. NAME OF RESPONSIBLE PERSON 

Hao Q Vu 

a. REPORT 

Unclassified 

b. ABSTRACT 

Unclassified 

c. THIS PAGE 

Unclassified 

19b. TELEPHONE NUMBER (Include area code) 

301-394-5324 


Standard Form 298 (Rev. 8/98) 
Prescribed by ANSI Std. Z39.18 


ii 



































Contents 


List of Figures iv 

1. Introduction 1 

2. Android Studio IDE 1 

3. Android NDK Package 1 

3.1 Method 1 1 

3.2 Method 2 2 

4. Configure NDK with Android Studio IDE 1.5.1 2 

5. Create an Android Application 6 

6. Final Build and Run Android Application 13 

7. Conclusion 13 

Distribution List 14 


Approved for public release; distribution is unlimited. 

iii 




List of Figures 

Fig. 1 Create Tool window.3 

Fig. 2 “Javah” path.3 

Fig. 3 Environment path.5 

Fig. 4 NDK-BUILD CLEAN configuration.6 

Fig. 5 Android application.6 

Fig. 6 Java codes to add 2 integer numbers.7 

Fig. 7 Native library Java class.7 

Fig. 8 JNI directory.8 

Fig. 9 JNI header file.9 

Fig. 10 Create a C source file.10 

Fig. 11 Java native C functions.10 

Fig. 12 Android.mk makefile.11 

Fig. 13 Application.mk makefile.12 


Approved for public release; distribution is unlimited. 

iv 

















1. Introduction 


With its compact form factor, portability, low power consumption, and increasing 
processing power, the Android mobile platform is gaining popularity as a 
replacement for traditional desktop or laptop computers as a processing platform. 
Most digital signal processing algorithms developed at the US Army Research 
Laboratory are written in the C programming language to provide sufficient 
processing power to satisfy typical processing and performance requirements. 
Typical applications developed for the Android mobile platform are written in 
Java. Therefore, to achieve maximum speed, there is a need to bridge Java-based 
applications to native C applications. Fortunately, a combination of the Android 
Native Development Kit (NDK) and the Java Native Interface (JNI) provides such 
a mechanism. 

NDK is a toolset that allows users to build C/C++ functions into a static or 
dynamic library or let the existing prebuilt library be called from an Android 
application. JNI defines a way for managed code written in Java to interact with 
native C/C++. 

This guide is intended to take programmers through adding an NDK package into 
an Android Studio Integrated Development Environment (IDE), to building a 
simple Android application that calls a C function to add 2 integer values received 
from the user screen. 

2. Android Studio IDE 


This guide assumes the user has already downloaded the Android Studio IDE and 
has an extensive working knowledge of this development package. As of the 
writing of this report, the version of Android Studio IDE was 1.5.1. 

3. Android NDK Package 

The Android NDK package can be downloaded via either of the following 
methods. 

3.1 Method 1 

The latest version of the NDK package for one’s operating system can be 
downloaded directly from “developer.android.com/ndk/downloads/index.html”. 

Expand the package once it has downloaded. 


Approved for public release; distribution is unlimited. 

i 









3.2 Method 2 


Download the NDK package directly from Android Studio IDE: 

1) Select the “Tools” tab. 

2) Select “Android->SDK manager”. 

3) Select “Appearance->System Settings->Android SDK”. 

4) Select the “SDK Tools” tab. 

5) Check the box labeled “Android NDK”. 

6) Select “Apply”. 

Wait for the package to be added into the Android Studio IDE. The downloaded 
package can be found at “~/Library/Android/sdk/ndk-bundle”. 

4. Configure NDK with Android Studio IDE 1.5.1 

Perform the following steps to configure the NDK with Android Studio IDE, 
version 1.5.1: 

1) Set up the Android NDK location: 

a) Select “File->Project Structure”. 

b) Select “SDK Location”. 

c) If Method 1 was chosen, enter the NDK location of where the 
downloaded NDK package was expanded. If Method 2 was chosen, 
then Android Studio will automatically fill in the NDK location. 

2) Add the JAVAH, NDK-BUILD, and NDK-BUILD CLEAN paths: 

JAVAH is a tool provided by Java SE to generate a C header and the 
source files that are needed to implement native methods. Refer to 
http://docs.oracle.eom/javase/7/docs/teehnotes/tools/windows/javah.html 
for a detailed description. 

3) Configure the JAVAH path: 

a) Select “Tools->Android->SDK Manager”. 

b) Select “Tools->Extemal Tools”. 

c) Select “+” at the bottom of the right pane. 

d) The “Create Tool” window (Fig. 1) will pop up. 

Approved for public release; distribution is unlimited. 

2 





9ft V 


« Android Studio Fda Edit View Navigate Coda Analyze Refactor BuM Run Tools VCS Window Help 

• • Create Tool 

Name: Croup: External Tools 

Description 

Options 

0 Synchronize files after execution 0 Open console 

Show console when standard out changes Show console when standard error changes 


**• Tue 10:42 AM Q, ~ 


Output Filters... 


Shown 

0 Main menu 0 Editor menu is? Project views IS? Search results 
Tool semngs 
Program: 

Parameters: 

Wording directory 


Insert macro- 
insert macro... 
Insert macro... 


Fig. 1 Create Tool window 

e) Enter the following to create a path for “javah”, as shown in Fig. 2. 


« Android Studio File EcM View Navigate Code Analyze Refactor Build Run Tools VCS Window Help 
• • _ Create Tool 

Name | javah | Croup: 

Description: javah 

Options 


► Tue 11:41 am Q, is 


0 Synchronize Files after execution 
0 Show console when standard out changes 


(S? Open console 

[v? Show console when standard error changes 


Shown 


0 Main menu 0 Editor menu 0 Project views 0 Search results 
Tool settings 

Program / Ubwy/Java/JavaVirtualMachines/jdk 1.7.0_80.jdk/Contents/Home/hin/javah 


Parameters -classpath SCIasspathS -v -Jni IFileClassS 

Working directory: SSourcepathEntryS/../jni| 


Insert macro... 
Insert macro - 
insert macro... 


Cancel i OK | 


Fig. 2 “Javah” path 


Approved for public release; distribution is unlimited. 

3 






Notes: 


• Program : This needs to point to where the JAVAH application is located 
on the host. 

• Parameters : The parameters are set to -classpath $Classpath$ -v -jni 
$FileClass$ 

o -classpath specifies the path for “javah” to look for 
classes 

o -v verbose 

o -jni tells “javah” to create an output file with JNI-style 

native method function prototypes 

• Working directory : All the required files needed to create a C callable 
object are located in the “jni” directory. 

NDK-BUILD is a shell script used to call a GNU “make” 3.81 or later. Use 
the following steps to configure it: 

1) Configure the NDK-BUILD path: 

a) Select “Tools->Android->SDK Manager”. 

b) Select “Tools->Extemal Tools. 

c) Select “+” at the bottom of the right pane. 

d) The “Create Tool” window (see Fig. 1) will pop up. 

e) Enter the following to create an environment path for NDK-BUILD, as 
shown in Fig. 3: 

• Program : This points to the location to where NDK-BUILD is 
located. 

• Parameters'. Leave blank. 

• Working directory : This points to where all the Java files are 
located. 


Approved for public release; distribution is unlimited. 

4 



Nvn« 


Croup NOK 


Description; rtdk-build 

y Synchrony# (Has altar asacution V Opart consol# 

/ Show consota whan standard out changas J Show consol* whan standard arror changas 

Shown 

•S Main manu ■/ tdrtor menu </ Project view* 'f Search mutts 
Toot settings 

Program /Users/haovu/Db'ary/'Android/sdk/ndk -bundle/ndk build 

Parameters 

Working directory SProjeclFileOirS/app/src/main 


insert macro-.. 


Insert macro... 


t TOOO . i Andre* Menltsr jj V Termesal 


trim Lee Cradh Console 


Fig. 3 Environment path 

NDK-BUILD CLEAN is used to remove all previously generated binaries. Use 
the following steps to configure it: 

1) Configure the NDK-BUILD CLEAN path: 

a) Follow the same steps as if configuring the NDK-BUILD path, except 
the parameter is set to “clean”. 

b) The final NDK-BUILD CLEAN configuration screen should look like 
Fig. 4. 


Approved for public release; distribution is unlimited. 

5 





* bdt'tuti •IFwih .Itotm t'fttc. 


N*me 


1 ndk-build dun 


Croup NDK 


Description: ndk-build dun 
Options 

<y Synchronize files after execution (j/ Open console Output Filters... 

& Show console when standard out changes & Show console when standard error changes 


J Main menu J Editor menu J Project views J Search results 
Tool settings 

Program /Usert/heovu/Ubrarv/Android/sdk/ndk-bundle/ndk-build 

Parameters: clean 

Working directory SPro>ectFileDirS/jpp/src/main 


Insert macro .. 


Insert macro... 


(?) 

- .-. 

• TODO a 6 Android Monitor Termmal 

■ CM 


Cancel OK 


Evtm Log Cradle Console 


Fig. 4 NDK-BUILD CLEAN configuration 

5. Create an Android Application 

This guide assumes that the user is well versed in using the Android Studio IDE 
to create an Android application. Therefore, a step-by-step guide on how to create 
an Android application has not been included. A simple Android application is 
provided as an example highlighting the functionality outlined in this report. 


A newly created Android application is shown is Fig. 5. 



Fig. 5 Android application 

The user can then add the ability to read in 2 integer numbers, as shown in Fig. 6. 


Approved for public release; distribution is unlimited. 

6 














+■ tiU YHUm* * 1 fanjjfcn < l Sswmf 


AddTwoNumbers ±sh> %rc main jai 

fi ♦ * O * * 

I T ri ^ p 

C ► ej manifests 

* ▼ CJjava 

▼ Cj com.example.haovu.addhvonumbers 

MainArnwHy 

* ► f com.rumplr.haovu.addrwonumbrr% 


■3 

▼ CD layout 

9» ieiivny_main.xml 

► CDmipmap 

► S3 values 
•'Cradle Scripts 


I C example haovu 
» activity mam .xmi » r MainActivityjava » 
Button btnAdd; 

EdltTaxr odltToxtA, «JitT«xtB; 
Integer intA, IntBj 
TextVicw textlnfoj 


protected void onCrrate{flundle savrdtnstanceStatc) < 
super. onCreatc< vjvedlnstanceMate); 
sctContentView<ft.layout. •ctivity_awi»); 
teetlnfs - (TextVlew) fSiwlVinwOyId(R.id. taxfl/law) ; 
btnAdd • <Button)/IndVlrwftyldfft. id.addburton} i 
cditTextA - (EdttText) findVlcwByKKR. Id.PditrextA) j 
editTextB = (CditTcxt)flndViewByldCR. Ld.mditTextO) : 
btnAdd. eetOnCUckListenerfnew View.OnCllekLietenerf) ( 

public void onCUcktVicw view) < 
addlWoNupberaO; 

> 


void atfdTwoNta«crs(){ 

String i » "“} 

intA - Integer, pareernr (edltTextA.gntText (>. toSt r wvg() >; 
intB » Integer.parsernr(editTextB.gctText().toString<)); 
i*e”A«"»intA»"B«"*intB»“\n"j 
textInfo.setText(i); | 


Android Monitor 

| Motorola Nexus 6 A 
■ ’ U Memory i a logcat • ‘ g 
O _ xu.j 


com.example.haovu addtwonumbers 

log level Verbose : (Q. 


J Reriex Show only selected application : | 


1-14 15:59:01.179 17786-17706/7 w/System: cisssloeder referenced unknown patn: /data/app/co«t.exanple.haovu.addtwonunbers-l/lio/am 
^ . 04-14 15:59:01.767 17786-17BB1/7 O/Open&iAenderer: Use FGl SWAP. BEHAVIOR.PRESFAVFD: true 

04 14 15159:01.312 17786-178«1/7 X/Adreno: tJUALCOW build ! S2af4d2. I83«i6cd0437 

° 1 Build Dote : 18/20/15 

OpenCi ES Shader Conpiler Version: XE031.05.13.02 

Local Branch : M14 

z* Remote Branch i 

Renote Branch i 

Reconstruct Branch : 

04-14 15:SB:01.329 17786-17BB1/7 I/OpenGlRenderer: Initialized EOl. version 1.4 

~r terminal _ fc AndronJ Mondor ■> fl Messa ges_ ► j. Run 'f TOOQ _ 

Setiton app' Launched on motorola-n«xui_G-ZXlG2ZLFTP(G minutes ago) 


i Lvent Los Cradle Console 


14 1 LFt LfTT-a: 


Fig. 6 Java codes to add 2 integer numbers 

To do this, the user must set up a sequence to call a C function from an Android 
application: 

1) Create a native library Java class as shown in Fig. 7. This class resides in 
the “sre “directory. This class includes an Android system call to load the 
library that was written in C and all the C function prototypes. 


*-**-►«* EL * fit i!_ Q « 



Fig. 7 Native library Java class 


7 


Approved for public release; distribution is unlimited, 















- vuti-fs 2 


2) Create the JNI directory as shown in Fig. 8, to store all related C source 
files and H header files: 

a) Select “app->New->Folder->JNI folder”. 

b) Select “Finish”. The “jni” directory should appear under the “app” 
directory. 


3 - : 


^ 

+ I* - * 


- el ^ at i ■_ a * 7 


Now Android Aalrtilly 


Customize the Activity 


V * p I in, lues 

► Grid* 


. _ Ml* 

»4-li 15I59I0 
IM-1* 


Creates, a source raot far Jam Nstlv* Inserface files. 

rnlrf-qr Lqeiline 

Taraet Sr:tire* Set: m*irr 


ir contains multiple source sets, this can Include inure* sets that do not: yet exist on disk. Please select the target source sec In which to create 


id application 


W-14 15159101.32* 127B5-17B1/1 I/OpenGUUeodererL Initialized CQL d version 1.4 

F Terminal i E; Andreid Monger 


j event Lao ■ Cradle 


* -to kr: VTT-m ...... 


Fig. 8 JNI directory 

3) Create the JNI header file using the external tool JAVAH, as shown in 
Fig. 9: 

a) Select “NativeLib->NDK->javah”: 

Based on the Java class created earlier, a header file will appear under 
the “jni” directory that has the following naming convention. 

• PackageName: com_example_haovu_addtwonumbers 

• Followed by the NativeJavaClassname: NativeLib 

• Followed by the .h extension 

• Example: com_example_haovu_addtwonumbers_NativeLib.h 

b) The newly created header file contains the Java native function 
prototypes with the following format: 

• JNIEXPORT 

• The function return type 


Approved for public release; distribution is unlimited. 

8 












• JNICALL 

• Java 

• Followed by the PackageName 

• Followed by the NativeJavaClassname 

• Followed by the FunctionName 

• Example: JNIEXPORT jint JNICALL Java_com_example_ 
haovu_addtwonumbers_NavtiveLb add (JNIEnv * jobject, jint, 
jint) 


O > 


U ■■ w v ► V- Re z' r m 

ini » cnrn_EKimpet_ha[fvu_a[ldtwihnL#mbtri_Njtii+L'li.h 

<=> jcSljrty.maln.Mni c MiMAO twit*java - 


: njdvDL.b iJfa ? apn ■ * iGm_*Klrr*lt_h«jir_ad(H*rortumlKr5^*1i\itLlb^ ■ , , fli jiJit.nroptrt-fi :■ 


f T AddTwDNumtwr-*. NDK jopport ii an experimental feature and all u» caiei are not yet supported. 

| 

C3jd '* *lncUrt* 

/* Heater ter class ffaa_M*wp'lff r jH«owi_iflrfr«nuoMJ-i^irtriv*LI* */ 


■ 

► & bulhf 
□ libs 
t Cure 

► □ uidroMTsii 

T □ main 

T Cj.fl.vi 

T E? fpm.trample .hadnjit.ntfdCwwmumbrr 
• .. MlllnAEBVitV 

■: a Natiwl.tr 

v Djii " 

‘ fQm.pKamplf.hac™,ntfi|twHWlirmlir 

► Cjni 

« AfldmidMiMiifosE.xi 

► Steal 
0 .glcignofp 
Slappiml 

bu.ld.gradlt 
El prOguird-rules.prt> 

Dyads* 


Pifnde r T _3rscLuded_co«_B:io«bljo._liwiu_siHt>«riuwberi_,Hiflti¥eLib 
•define .Included cwi eaaqile beovti eddtwonunbor! HativoLfib 
Pirn-cP _ tplusoLus 


* MefJratfJ IM 

* Signaiure; fJJ.il 


jldfiT*iinriiatH>rc_ft»i I vat 11 


JNIEXPflflT • •. JMULlL Jcra^coft.eiibmtc_ l bapvg_odil two numberSjltat i YeLili_adtl 
(JW6»V |object* Unj, liflDj 

+ flbsst cJ; ,wrv i r^iHiter Tw&n i.Mtur rj. Jtat JinptlQ 

* MprJiad.! ii#J Eb 

* ffJpnptPiitr: (JLjOiiV tsf^/String; 


i Li JNICALL Jaya^EMyc-KaffpIe^iBVbjtfdiwonuntters^aT ivvLi^Jial Is 
i Jobject!; 


Pirijef . 

y 

Prnaif 


91 AddTwoNumbtrs.jp 
boiiil.grj.aie 
I,! «radte. prsprrws 

in Jb pxih 


' 7tilbr*ryJ , Javb/ja¥irVirtuoWac!iioBiyjidlil. 7 .4^6 ». jdk.iContofita/lkiKAin/javati .. 

[Cftot ing file H.eyu Lo rH l.oribi ec t [ohf iiTaFple hbovu jddtenwiLFTibera. NbtivoLlbjh] ] 

J’r'bCes-S flftlsnfed witli tstlf qprlr -ft 


” Tsrmlmfl i C: Android Monitor «: Q: Messages _ ij; Run * TOOO 
Cridlc build ilmtncd m ir ttlMii ImSjrrtrtW ago! 


P ' S ftenr Log 
II U-- UTf-B! • ■ 


Fig. 9 JNI header file 

c) Under the “jni” directory, create a C source file (NativeLibC.c), as 
shown in Fig. 10, to implement the native C functions: 

i) Select “jni->New->C/C++ Source File”. 

ii) Enter the filename and type. 

iii) Select “OK”. 


Approved for public release; distribution is unlimited. 

9 







* « app ► 

* f Nat»v*UI»_C.e 


n .Idea 
Clapp 
► CD build 
n lib* 

▼ Dire 

a- CD androfcfTesi 
w r) mam 

▼ T i com.eMample.haovu.addtwonu'nbcr 
MnnArrv.ty 
< a NabveUO 

a C3>n< 

• «vn.r>impl» luovu iddtwonunnb* 
NafiveLib_C.c 

• NativeUb_C.h 
► Cara* 

a» AndrordMarufeit.xml 
► Hi test 


NDK support ii 

I 


da c MainAciivitvjav* > 
n experimental feature ar 


•: hlatrveLibjav* » • KatiwUti.C h x 

II ute catei are not yet supported. 


-NetiveL4b_C.lt' 


PI app.iml 
(*? build .grad le 

proguard-rules.pro 
bgradlt 

B .gitignore 

91 AddTwoNuniDm .ml 

i? budd-gradle 

!«• grad le p ropertie s 


erocett finished vit 


■ Terminal ■§■ (i Android M 

.. I Cradle build llnithed in aeSms <i 


Q Messages 4 Run I TOGO 


Fig. 10 Create a C source file 

d) Implement the Java native C functions as shown in Fig. 11. 


► • 


© + o- i* 


Ma*»v*lib_e.c 

• ty _main.it ml 


app v i * tom_eMamela_haovu_addrttonumAert.NattveUb.Iii v igradle.propertiet > 


▼ r AddTwoN umbers 

b CD grad!# 

► CD .idea 
▼ Ci*PP 
► ri bund 
nubt 
▼ Dire 

b CD and'odTest 


/OocumentsrMyAndroid Dev/Adi 


▼ Qjava 

▼ G icom.example.haovu addtwonumber 
- t, Ma.rvArtiv.ty 
C a N.ilivrliO 

* Djid 

I* com.exansple.heowi.addtwonumbe 
[• NattveUb.C.c 
[e NanveUb_C.lt 

b r. res 

«• AndroidMamfest.xmt 
b Qtett 
□ ffAgnore 
91 app.iml 
0 build grad le 
0 proguard-rules, pro 
CD grad le 
Q .glt>gnore 
91 AddTwoNumbert. imi 


VjnAtt.vtv.avi • NadveUbpva • ■ NatrveUb.C, 

NDK support is an experimental feature and all use cases are not yet supported. 

// frrufrd try tun vu an 4/iS/Jt. 

•include -CM_0MMple_lwtovu_addtMOnuttbers_Mativei.il>-h" 

JNIEXPCAT )int XICALL Jav«_coei_e*Mple_haovu «ddtttonunbcr*.NaUvsrt.ib„add<>lienv -env, ]object obj. jint vail, lint val2H 
return valleval2; 

> 

XIEXPOftT :string JNICAll Java_co*i_cxaffpVe_haovu_addtwoniar*ers_NativeLib_heUo(JNIEnv ««nv, Jobject objH 
return (a«nvJ-»NeM5tring<env.“Hello ttarld'*); 


; t i. 

* E 

u t. 


app.mergeDtbugAndroidTestResources uP-TO-OATE 
app proressDebugAndroidTrttResourcfs UP-TO-DATE 
app. gene rate OebugAndroidTestSourees UP-TO-DATE 
app comprteOebuglavaWttUavac 
app rompdeDebugNdk UP-TO-DATe 
appcompdeOebugSources 
app compileOebugAndroidTatgavaMfltl\)avac 
.app compJcOebugAndrcudTestNd k UP-TO-DATE 


i 

appcompaeOebugAndroidTestSources 


♦ 

a 

M 

O BUILD SUCCESSFU 


I 

? 

<ur Total time 0.714 sees 


i 

l 

O 0 errors 


s 


O 0 warnings 


1 


See complete output n console 




| Tnmml . $ Android Monttor Q Messages ► £ Bun * TOGO 

‘ 1 tvenl log Cradle Consol* 


U 

Cradle build finished in SO 1ms (yesterday t WWi 

12.4* 0 : Uir-a: Context. gti-armbS-vaa - 

H 


Fig. 11 Java native C functions 


Approved for public release; distribution is unlimited. 


10 


USVon uaitn ^ .won PWdwy * **<3; tubs* i*M* 3 












e) Modify “build.gradle (Module:app)”: 

i) Inside the “defaultConfig” section, add the following pseudo code: 

sourceSets { 
main{ 

jni.srcDirs « [] 

jniLibs.srcDir “src/main/libs” 

} 

} 

f) Create an “Android.mk” makefile, shown in Fig. 12, under the “jni” 
directory to determine how to build the C code: 

i) Select “jni->New->File”. 

ii) Enter “Android.mk” as the filename. 


D 

1 Hi 

i 0 

► a PP ► # ►: R y* m $ o 

•U' ? 

Q 


~~g 

AddTwoNumbers app C] src C] main Ctjni Android.mk 




3 

Ef 

1 Project ▼ , © 4= #• !*■ 


activity main.xml x c MainActivity.java x 

c NativeLib.java x | 0 Android.mk x S' app x k com_example_haovu_addtwonumbers_NativeLibJt x | 

^=7 

m 

2 

▼ 

AddTwoNumbers (~/Documents/N!yAndroidDev/Ad( 


LOCAL_PATH := $(call my-dir) 


V 

f 

u 


► CH.gradle 





<$> 


► tl.idea 


include S(CLEAR_VARS) 




s 


▼ Caapp 

► D build 


LOCAL MODULE = NativeLib C| 
LOCAL_SRC_FILES := NativeLib_C.c 



B 




CD libs 








T 

Dsrc 


include $(BUILD_SHARED_LIBRARY) 



0 




► Cl androidTest 





i 

V 



▼ Dmain 





n 

3 



► C java 






2 



▼ Djni 






M 

Android.mk 






V 



:■ com_example_haovu_addtwonumbe 
[« NativeLib_C.c 
[■r NativeLib_C.h 









► fires 









H Android Manifest.xml 









► Dtest 

0 .gitignore 

31 app.iml 

0 build.gradle 

0 proguard-rules.pro 








► Dgradle 








0 .gitignore 

51 AddTwoNumbers.iml 

0 build.gradle 

01 gradle. properties 







Messages Cradle Build 




L 



\u 

j 

:app:mergeDebugAndroidTestResources UP-TO-DATE 







:app:processDebugAndroidTestResources UP-TO-DATE 




2 

X 

“ 

:app:generateDebugAndroidTestSources UP-TO-DATE 




o 

* 

£ 

:app:compileDebugJavaWitliJavac 








m 

:app:compileDebugNdk UP-TO-DATE 






■Sil 

4 

:app:compileDebugSources 







1 1 

T 

:app:compileDebugAndroidTesijavaWithJavac 






? 


:app:compileDebugAndroidTestNdk UP-TO-DATE 




.1 

|5 


:app:compileDebugAndroidTestSources 

Q BUILD SUCCESSFUL 





'W 

> 

cL 

> 



G Total time: 1.787 secs 





o 




O 0 errors 





2 




O 0 warnings 

G See complete output in console 





£ 


HI Terminal >$< 6: Android Monitor 0: Messages ► 4: Run TODO 


T 3 Event Log E Cradle Console 

□ Cradle build finished in Is 845ms (today 11:20 AM) 

5:27 n 

a UTF-8; Context < no contexts- & 


Fig. 12 Android.mk makefile 


Approved for public release; distribution is unlimited. 

11 


















g) Create the “Application.mk” makefile, shown in Fig. 13, under the 
“jni” directory to tell the NDK what architecture it should build the 
shared library for: 

i) Select “jni->New->File”. 

ii) Enter “Application.mk” as the filename. 


■rappel ► ►; Git p §| $ It S .«• . 


Q 


AddTwoNumbers app E src E main E ini 




g Project » Q 4 s I* *" *» activity mainj<ml x c MainActivity.java x c NativeLib.java x 

0 Androidunk x | 0 Application.mk x 0 app x | 

»=2 

m 

2 ▼ EAddTwoNumbers Documents/MyAndroidDev/Adi APP_M0DULES := NativeLib_C 


V 

5 


► El .gradle 

► E .idea 
▼ CEapp 

► E build 
E libs 
▼ Esrc 

► EandroidTest 
▼ Emain 

► Ejava 

► Ejni 

► Cires 

■■ AndroidManifest.xml 

► Etest 
0 .gitignore 
91 app.iml 

0 build.gradle 
0 proguard-rules.pro 

► E gradle 

0 .gitignore 
91 AddTwoNumbers.iml 
0 build.gradle 
01 gradle. properties 
0 grad lew 
0 gradlew.bat 
01 local.properties 
0 settings.gradle 
Messages Cradle Build 


APP_ABI := all 


X #= 

t i 
+ B 

r- 


:app:mergeDebugAndroidTestResources UP-TO-DATE 
:app:processDebugAndroidTestResources UP-TO-DATE 
:app:generateDebugAndroidTestSources UP-TO-DATE 
:app:compileDebugJavaWithJavac 
:app:compileDebugNdk UP-TO-DATE 
:app:compileDebugSources 
:app:compileDebugAndroidTestlavaWithJavac 
:app:compileDebugAndroidTestNdk UP-TO-DATE 
:app:compileDebugAndroidTestSources 
Q BUILD SUCCESSFUL 
Q Total time: 1.787 secs 
O 0 errors 
O 0 warnings 

O See complete output in console 


[1 Terminal >jj< 6: Android Monitor 0: Messages ^ 4: Run ^ TODO 

Session 'app': Launched on motorola-nexus_6-ZXlG22LFTP (4/14/16,3:59 PM) 


T 3 Event Log E Cradle Console 
1:27 n/a UTF-8J Context: < no context> i 


Fig. 13 Application.mk makefile 

Note: This application.mk requests the NDK to build a shared library for all 
supported architectures. The following details how to build a shared library: 

1) Select “app->NDK->ndk-build”: 

• A “libs” directory that stores the shared library for all the architectures 
is automatically created. 

• All the supported architecture directories are created. 

• Under each architecture directory, a shared library for that particular 
architecture can be found. 


Approved for public release; distribution is unlimited. 


12 


















6. Final Build and Run Android Application 


Perform the following steps to create the final build and run the Android 
application: 

1) Select “Build->Make Project”. 

2) Select “Run-> Run ‘app”\ 

7. Conclusion 


This guide summarizes all the necessary mechanisms and steps to guide a novice 
Android application developer to build an Android application that is capable of 
handling a high-intensive computation requirement. 


Approved for public release; distribution is unlimited. 


13 






1 DEFENSE TECHNICAL 
(PDF) INFORMATION CTR 

DTIC OCA 

2 DIRECTOR 

(PDF) US ARMY RESEARCH LAB 
RDRL CIO L 

IMAL HRA MAIL & RECORDS 
MGMT 

1 GOVT PRINTG OFC 
(PDF) AMALHOTRA 

8 US ARMY RSRCH LAB 
(PDF) RDRL SES P 
C REIFF 
D GONSKI 
H VU 
L SIM 

M SCANLON 
S TENNEY 
W ALBERTS II 
RDRL SES S 
B MAYS 


Approved for public release; distribution is unlimited 



