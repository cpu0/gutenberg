» 


t 


TASK: UQ19 
CDRL:251901 
21 Oct 1991 


AD-A257 058 

m • — ____ ..,.1 . 1 ... iaii imi 


UQ19 Ada Semantic Interface 
Specification (ASIS) r 

Version 0.4 - Vendor V 

Independent ASIS (VIA) 


Informal Technical Data 



DTIC 


ELECTE 
OCT 2 8 1992 





Uziisuied 



STARS-RC-251901/003/00 
21 October 1991 


99 10 27 ii 2 





REPORT DOCUMENTATION PAGE 

Form Approved 

OMB No 0704-0? 88 

f hoik ftpe-"'? PutOfr. 'Of tuv xitfC.ion of •Moff'atior •» Biimiwc to a>fragf : hour off -etoorte. meiuairg tne time tot renewing mvirunioriv. vaaftfuic *>vi oat* vovetm 
gatUffifg a no maintaining tna oata fffOta ane tomoi fling ana revising tne tollftlion ot intotmation Sfno commenu rfga'omg tnn bufOdt t-inmatf O' an. ;tn»r avoen 01 tnn 
toifaion in*onnation. mciuomg tuggntiom <ot rooming tint puree" to Wd"ington H«»gaujnen Sewed. Directorate for mfe’mation Operation, ana iteoonv t}ti .aftervon 
OanvMiofnar, Suite UC* arimgten va JJJOJ-elOJ, ana tt tne O^ice o' Management ane Suage-. ®aoemet« MaunionPtotenlOJOWM). vtdnmgton. DC JCSOI 

1. AGENCY USE ONLY (Leave blank) 2. REPORT DATE 3. REPORT TYPE AND OATES COVERED 

21 October 1991 Informal Technical Data 

4. TITLE AND SUBTITLE 

UQ19 Ada Semantic Interface Specification(ASIS) 
Version 0.4 - Vendor Independent ASIS (VIA) 

5. FUNDING NUMBERS 

STARS Contract 

F7 9628-88-D-0031 

6. AUTHOR(S) 

Unisys Defense Systems, Inc. 

7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Unisys Corporation 

12010 Sunrise Valley Drive 

Reston, VA 22091 

8. PERFORMING ORGANIZATION 

REPORT NUMBER 

STARS-RC-2 51 901 /0 0 3/ 

00 

9. SPONSORING /MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Department of the Air Force 

Headquarters, Electronic Systems Division (AFSC) 

Hanscom AFB, MA 01731-5000 

10. SPONSORING 'MONITORING 

AGENCY REPORT NUMBER 

251901 

11. SUPPLEMENTARY NOTES 

12a. DISTRIBUTION . AVAILABILITY STATEMENT 

Approved for public release; 
distribution is unlimited 

12b. DISTRIBUTION CODE 

13. ABSTRACT (Maximum 200 words) 

The Ada Semantic Interface Specification is layered vendor- 
independent open architecture. ASIS queries and services provide 


a consistent interface to information within the Ada Program 
Library. Clients of ASIS are shielded and free from the 
implementation details of each Ada vendor's proprietary 
library and intermediate representations. 


i 


14. SUBJECT TERMS 

ASIS, Ada Program Library, 


Open 


Architecture . 


15. NUMBER OF PAGES 

160 

16. PRICE CODE 


17. SECURITY CLASSIFICATION 
OF REPORT 

Onclassified 


IB. SECURITY CLASSIFICATION 
OF THIS PAGE 

Unclassified 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

Unclassified 


20. LIMITATION OF ABSTRACT 
_SAP_ 


N5N.. 7540.0^ .280-5500 


ST3"oa’c 298 'Rev 2-89' 




TASK: UQ19 
CDRL: 251901 
21 October 1991 


INFORMAL TECHNICAL REPORT 
For The 

SOFTWARE TECHNOLOGY FOR ADAPTABLE, RELIABLE SYSTEMS 

(STARS) 

Ada Semantic Interface Specification (ASIS) 

Version 0-4 

Vendor Independent ASIS (VIA) 

STARS-RC-251901 /003/00 
Publication No. GR-7670-1344(NP) 

21 October 1991 


Data Type: A005, Informal Technical Data 

CONTRACT NO. Fl9o28-88-D-0031 
Delivery Order 0002 


Prepared for: 

Electronic Systems Division 
Air Force Systems Command, USAF 
Hanscom AFB, MA 01731-5000 


Prepared by: 

Telesoft 

under contract to 
Unisys Defense Systems, Inc. 
Tactical Systems Division 
12010 Sunrise Valley Drive 
Reston, VA 22091 


/* C • ■' 

¥?:■ 


i rr i 


tv 


PvA 


Distribution Statement “A” 
per DoD Directive 5230.24 

Authorized for public release; Distribution is unlimited. 







TASK: UQ19 
CDRL: 251901 
21 October 1991 


INFORMAL TECHNICAL REPORT 
For The 

SOFTWARE TECHNOLOGY FOR ADAPTABLE, RELIABLE SYSTEMS 

(STARS) 

Ada Semantic Interface Specification (ASIS) 

Version 0-4 

Vendor Independent ASIS (VIA) 

STARS-RC-251901 /003/00 
Publication No. GR-7670-1344(NP) 

21 October 1991 

Data Type: A005, Informal Technical Data 

CONTRACT NO. F19628-88-D-0031 
Delivery Order 0002 

Prepared for: 

Electronic Systems Division 
Air Force Systems Command, USAF 
Hanscom AFB, MA 01731-5000 

Prepared by: 

Telesoft 

under contract to 
Unisys Defense Systems, Inc. 

Tactical Systems Division 
12010 Sunrise Valley Drive 
Reston, VA 22091 









TASK: UQ19 
CDRL: 251901 
21 October 1991 


Data ID: STARS-RC-251901/003/00 

Distribution Statement “A” 
per DoD Directive 5230.24 

Authorized for public release; Distribution is unlimited. 

Copyright 1991, Unisys Defense Systems, Inc., Reston, Virginia 

and Telesoft 

Copyright is assigned to the U.S. Government, upon delivery thereto, in accordance with 

the DFAR Special Works Clause. 

Developed by: Telesoft under contract to 
Unisys Defense Systems, Inc. 

This software, developed under the Software Technology for Adaptable, Reliable Systems 
(STARS) program, is approved for release under Distribution “A” of the Scientific and Tech¬ 
nical Information Program Classification Scheme (DoD Directive 5230.24) unless otherwise 
indicated. Sponsored by the U.S. Defense Advanced Research Projects Agency (DARPA) 
under contract F19628-88-D-0031, the STARS program is supported by the military services, 
SEI, and MITRE, with the U.S. Air Force as the executive contracting agent. 

Permission to use, copy, modify, and comment on this software and its documentation for 
purposes stated under Distribution “A” and without fee is hereby granted, provided that 
this notice appears in each whole or partial copy. This software retains Contractor indemni¬ 
fication to The Government regarding copyrights pursuant to the above referenced STARS 
contract. The Government disclaims all responsibility against liability, including costs and 
expenses for violation of proprietary rights, or copyrights arising out of the creation or use 
of this software. 

In addition, the Government, Unisys, and its subcontractors disclaim all warranties with 
regard to this software, including all implied warranties of merchantability and fitness, and 
in no event shall the Government, Unisys, or its subcontractor(s) be liable for any special, 
indirect or consequential damages or any damages whatsoever resulting from the loss of use, 
data, or profits, whether in action of contract, negligence or other tortious action, arising in 
connection with the use or performance of this software. 







TASK: UQ19 
CDRL: 251901 
21 October 199i 


INFORMAL TECHNICAL REPORT 
Ada Semantic Interface Specification (ASIS) 
Version 0.4 

Vendor Independent ASIS (VIA) 


Principal Author(s): 


Steve Blake, TeleSoft 

Date 

Approvals: 



u/s'/v 

Task Manager Dr. Thomas E. Shields 

Date 


(Signatures on File) 










TASK: UQ19 
CDRL: 251901 
21 October 1991 

INFORMAL TECHNICAL REPORT 
Ada Semantic Interface Specification (ASIS) 

Version 0.4 

Vendor Independent ASIS (VIA) 


Change Record: 


Data ID 

Description of Change 

Date 

Approval 

STARS-RC-251901 /003/00 

Based on ASIS WG meeting 
of June 6, 1991. 

21 October 1991 

on file 

STARS-RC-251901 /002/00 

Successor Volume: Inte¬ 
grates Rational’s LRM in¬ 
terface, eliminating depen¬ 
dencies on the Rational 
environment. 

28 May 1991 

on file 

STARS-RC-251901/001/00 

Original Issue 

11 February 1991 

on file 




























21 October 1991 


STARS-RC-251901/003/00 


Contents 

1 SPECIFICATION LISTING 1 


Page ii 






21 October 1991 


STARS-RC-251901 /003/00 


1 SPECIFICATION LISTING 

--I 

— litem: Ada Semantic Interlace Specification (ASIS) 

— |$Revision: M 0.4‘‘$ 

—|$State: Prototype $ 

--I 

— I Distribution Statement "A", per DoD Directive 5230.24 

— I Authorized lor public release; distribution is unlimited. 

--I 

—(Copyright (c) 1991, Unisys Defense Systems, Inc., Reston, Virginia 

— I and Telesoft, San Diego, California 

— I Copyright is assigned to the U.S. Government, upon delivery thereto, 

— I in accordance with the DFAR Special Works Clause. However, Copyright 

— I in computer software developed by Rational and from which ASIS is 

— I derived in part is not assigned hereby; such software includes 

— IAda_Program, Compilation_Units, Declarations, Hames_And_Expressions, 

— I Pragmas, Representation_Clauses, Statements, and Type_Information, known 

— I collectively as the Rational LRM Interfaces. Rational LRH Interfaces 
—iCopyright (c) 1987, 1988, 1989, 1990, 1991, Rational, Santa Clara, 

— I California. 

—IDeveloped by: Telesoft under contract to Unisys Defense Systems, Inc. 

--I 

— I This software, developed under the Software Technology for Adaptable, 

— I Reliable Systems (STARS) program, is approved for release under 

—[Distribution "A" of the Scientific and Technical Information Program 
—(Classification Scheme (DoD Directive 5230.24) unless otherwise indicated. 

—(Sponsored by the U.S. Defense Advanced Research Projects Agency (DARPA) 

— I under contract F19628-88-D-0031, the STARS program is supported by the 

— I military services, SEI, and MITRE, with the U.S. Air Force as the executive 
—(contracting agent. 

--I 

—(Permission to use, copy, modify, and comment on this software and its 
—(documentation for purposes stated under Distribution "A" and without fee 

— I is hereby granted, provided that this notice appears in each whole or 
—Ipartial copy. This software retains Contractor indemnification to 

— I the Government regarding copyrights pursuant to the above referenced 

— I STARS contract. The Government disclaims all responsibility against 

— inability, including costs and expenses for violation of proprietary 
—Irights, or copyrights arising out of the creation or use of this 

— I software. 

— I 

— I In addition, the Government, Unisys, and its subcontractors disclaim all 
—(warranties with regard to this software, including all implied warranties 


Page 1 








21 October 1991 


STARS-RC-251901/003/00 


— I of merchantability and fitness, and in no event shall the Government, 

— I Unisys, or its subcontractor^) be liable for any special, indirect or 

— I consequential damages or any damages whatsoever resulting from the loss of 

— I use, data, or profits, whether in action of contract, negligence or other 
—Itortious action, arising in connection with the use or performance of this 

— I software. 

— I 


--1 $Log:" ASIS_spec. ps,v"$"-- I Revision"0.4 ,,M 1991/11/08""21:24:04""cm"-- I Based ,, on ,, ASIS"VG"meet ing” Ji 
—iRevision 0.4 1991/11/08 20:56:33 cm 

— I Based on ASIS WG meeting June 6, 1991 

~l 

--IRevision 0.4 1991/10/21 17:01:39 cm 

— I Based on ASIS WG meeting June 6, 1991. 

--I 

—IRevision 0.3 1991/05/30 15:16:14 guy 

— I Integrates Rational’s LRH interface, eliminating dependencies on the 

— I Rational environment. 

--I 

—IRevision 0.2 1991/01/17 08:58:49 cm 

— I Initial submittal. 


ASIS-PR0L0GUE 


— System 

— Version 


ADA SEMANTIC INTERFACE SPECIFICATION (ASIS) 
0.4 


— Components 


Specifications are in the following order: 


ASIS_Ada_Program 

ASIS_Environment 

ASIS_Libraries 

ASIS_Compilation_Units 

ASIS_Elements 

ASIS_Declarations 

ASIS_Type_Definitions 

ASIS_Names_And_Expressions 

ASIS.Statements 

ASIS_Representation_Clauses 

ASIS_Text 


Page 2 












21 October 1991 


STARS-RC-251901 /003/00 


— Release date : Sept 27, 1991 

— Last update : July 10, 1991 

— Date created : June 01, 1990 

— Machine/System Compiled/Run on : Sun 4, SunOS Release 4.1.1 


— Abstract : 

— The Ada Semantic Interlace Specification is a layered 

— vendor-independent open architecture. ASIS queries and 

— services provide a consistent interface to information 

— within the Ada Program Library. Clients of ASIS are shielded 

— and free from the implementation details of each Ada vendor's 

— proprietary library and intermediate representations. 


— DATE 

VE1 

— 12/28/90 

0 . 

— 01/11/91 

0 . 

— 05/13/91 

0 . 

-- 07/10/91 

0 .- 

— 09/27/91 

0 . 

— 



Revision history 


VERSI0H AUTHOR 

Steve Blake 
Steve Blake 
Steve Blake 
Steve Blake 
Steve Blake 


Distribution and 


HISTORY 

Initial Release 

Unisys/STARS Phase I deliverable 
Unisys/STARS Phase II deliverable 
Internal reveiw release 
Unisys/STARS Phase II deliverable 

Copyright - 


— This prologue must be included in all copies of this software. 


— The ASIS version 0.4 specification has been developed by 

— TeleSoft under STARS subcontract to Unisys. This information 

— is only releasable to STARS contractors and STARS subcontractors 

— until it has been approved for wider release by the ESD STARS 

— program office. 


— Version 0.4 of the ASIS specification is being distributed to 

— STARS contractors with the intention that they review the 

— specification for its applicability to Ada tools, its completeness, 

— and its relevance. The ASIS working group has been established to 

— review comments and account for them in future versions of ASIS. 


Page 3 











21 October 1991 


STARS-RC-251901/003/00 


— Please forward all comments to the members of the working group at 

— the following e-mail addresses: 

stars_asisfistars.reston.Unisys.com 


- Disclaimer - 

— This software and its documentation are provided "AS IS" and 

— without any expressed or implied warranties whatsoever. 

— No warranties as to performance, merchantability, or fitness 

— for a particular purpose exist. 

— Because of the diversity of conditions and hardware under 

— which this software may be used, no warranty of fitness for 

— a particular purpose is offered. The user is advised to 

— test the software thoroughly before relying on it. The user 

— must assume the entire risk and liability of using this 

— software. 

— In no event shall any person or organization of people be 

— held responsible for any direct, indirect, consequential 

— or inconsequential damages or lost profits. 

-END-PROLOGUE- 


— ASIS PRELIMINARY REVIEW VERSION 0.4 

— Sept 27, 1991 


package ASIS_Ada_Program is 


— ASIS_Ada_Program encapsulates declarations that are made 

— available to ASIS and its clients in a vendor-independent manner. 


— LIBRARY 


Page 4 













21 October 1991 


STARS-RC-251901/003/0U 


subtype Library is implementation_defined_limited_private_type; 

— The Ada Program Library abstraction (a limited private type). 

— A logical library handle is associated with name and parameters values 

— which are used by the implementation to identify and connect to the 

— physical information in the "library file". 

— The term "library file" refers to the information on the compilation 

— units that must be maintained by the compiler or compiling environment. 

— It does not assume the method a vendor chooses to implement or maintain 

— the information. 

— Some environments may not need name and parameters values to identify 

— their library file. Other environments may choose to implement the 

— library as a single external file in which case the name and parameters 

— values would supply the name and form values needed to open such a file. 


— COMPILATION UNITS 

subtype Compilation_Unit is implementation_defined_private_type; 

— The Ada Compilation Unit abstraction (a private type). 

— The text of a program can be submitted to the compiler in one or 

— more compilations. Each compilation is a succession of compilation 

— units. 

— Compilation units are composed of two distinct parts: 

— 1) A context clause 

— 2) The declaration of a library unit or a secondary unit. 

— The context clause contains zero or more with clauses and use clauses. 

— ASIS treats Pragmas that appear immediately after the context clause 

— and before the subsequent declaration part as belonging to the context 

— clause part. 

— The declaration associated with a compilation unit can either 

— be a package, procedure, function, generic, or subunit. 

— The abstract type Compilation_Unit is is a handle to compilation units 

— as a whole. An object of the type Compilation.Unit deals with the 


Page 5 








21 October 1991 


STARS-RC-251901/003/00 


— external vies of compilation units such as their relationships with other 

— units or their compilation attributes. 


Iil_Compilation_Unit: Compilation.Unit renames 
implementation_defined_constant; 

— A constant Ada Compilation Unit with a void or null value. 


— ELEMENTS 

subtype Element is implementation_defined_private_type; 

— The Ada program element abstraction (a private type). 

— The type Element is a distinct abstract type representing handles to the 

— lexical elements that form the text of compilation units. Elements deal 

— with the internal or "textual" view of compilation units. 

— Operations are provided to split a Compilation_Unit object into two 

— component Elements: 

— 1) A context clause represented by an Element_List containing 

with clauses, use clauses, and pragmas. 

— 2) An Element associated with the declaration. 

— Use the context clause operations in this package to decompose 

— with clauses and use clauses. 

— Use the ASIS_ELEMENTS pragma operations to decompose pragmas. 


Nil.Element: Element renames 

implementation_defined_constant; 

— A constant Ada program element with a void or null value. 


— ELEMENT SUBTYPES 

subtype Declaration is ASIS_Ada_Program.Element; 

— Use ASIS.Declarations operations. 


Page 6 







21 October 1991 


STARS-RC-251901/003/00 


subtype Type_Delinition is ASIS_Ada_Progran.Element; 

— Use ASIS.Type.Definitions operations. 

subtype Identifier_Deiinition is ASIS_Ada_Program.Element; 
subtype Identifier_Reference is ASIS_Ada_Program.Element; 

subtype Expression is ASIS_Ada_Progrsun.Element; 

— Use ASIS.Mames.And.Expression operations. 

subtype Name.Expression is ASIS_Ada_Program.Element; 

— Use ASIS_Hames_And_Expression operations. 

subtype Statement is ASIS_Ada_Program.Element; 

— Use ASIS_Statements operations. 


— TIME 

subtype ASIS_Time is Calendar.Time; 

— A private type from the predefined library package Calendar. 

— Operations on ASIS.Time are provided by Calendar. 


Nil.Time : constant Calendar.Time := 

Calendar.Time.Of ( Year => 1901, Month=> 1, Day => 1, Seconds => 0.0 ); 


— ASIS.IHTEGER 

subtype ASIS.Integer is Integer range 

implementation.defined .. implementation.defined; 

— A subtype of the predefined type Integer that allows each ASIS 

— implementation to place constraints on the lower and upper bounds. 


— ASIS.POSITIVE 

subtype ASIS_Positive is ASIS.Integer range 0 .. implementation.defined; 


Page 7 










21 October 1991 


STARS-RC-251901/003/00 


— A subtype of the predefined type Integer that allows each ASIS 

— implementation to place a constraint on the upper bound. 


— ASIS_LIST_IHDEX 

subtype ASIS_List_Index is ASIS.Integer range 1 .. implementation.defined; 

— A subtype of the predefined type Integer that allows each ASIS 

— implementation to place a constraint on the upper bound on the number 

— of components allowed in lists. 

— Used as a subtype for the :.rray index subtype definition of the various 

— lists in ASIS. 


— COMPILATIOI_UHIT_LIST 

subtype Compilation_Unit_List is implementation.defined.array; 

— Defines a list of Ada compilation units. For some operations that 

— return a Compilation_Unit_List value, the order of components may vary 

— across implementations of ASIS. Variances are noted in the commentary 

— of individual operations. 

— Implemented as an unconstrained array: 

— array ( ASIS_List_Index range <> ) of Compilation.Unit; 


Hil_Compilation_Unit_List : Compilation_Unit_List renames 
implementation.defined.constant; 

— A constant Ada Compilation Unit List with a void or null value. 


package Compilation_Unit_List_Operations is 

function "A" (Left : in Compilation_Unit_List; 

Right : in Compilation_Unit_List) 

return Compilation_Unit_List renames implementation.defined; 

function "A" (Left : in Compilation_Unit_List; 

Right : in Compilation.Unit) 

return Compilation.Unit.List renames implementation.defined; 


Page 8 










21 October 1991 


STARS-RC-251901/003/00 


function "ft" (Left : in Compilation.Unit; 

Right : in Compilation.Unit.List) 

return Compilation.Unit.List renames implementation.defined; 

function "ft" (Left : in Compilation_Unit; 

Right : in Compilation_Uait) 

return Compilation_Unit_List renames implementation_defined; 
end Compilation_Unit_List_Operations; 


— ELEMEHT.LIST 

subtype Element.List is implementation.defined.array; 

— Defines a list of Ada program elements. For some operations that 

— return Element.List values, the order of components may vary 

— across implementations of ASIS. Variances are noted in the commentary 

— of individual operations. 

— Implemented as an unconstrained array: 

— array ( ASIS_List_Index range <> ) of Element; 


Mil.Element.List : Element.List renames 
implementation.defined.constant; 

— A constant Element List with a void or null value. 


package Element_List_Operations is 


function "ft" (Left : 

Right : 
return Element.List 


in Element.List; 
in Element.List) 
renames implementation.defined; 


function "ft" (Left : 

Right : 
return Element.List 


in Element.List; 
in Element) 

renames implementation.defined; 


function "ft" (Left : in Element; 

Right : in Element.List) 

return Element.List renames implementation.defined; 


Page 9 








21 October 1991 


STARS-RC-251901 /003/00 


function "t" (Left 

Right : 
return Element.List 


in Element; 
in Element) 

renames implementation.defined; 


end Element_List_Operations; 


— ASIS.CHARACTER 


subtype ASIS_Character is implementation.defined.enumeration.type; 

— An enumeration type. 

package ASIS.Character.Operations is 

function "=" (Left, Right : in ASIS.Character) return Boolean 
renames implementation.defined; 

function “<" (Left, Right : in ASIS.Character) return Boolean 
renames implementation.defined; 

function "<=" (Left, Right : in ASIS.Character) return Boolean 
renames implementation.defined; 

function ">" (Left, Right : in ASIS.Character) return Boolean 
renames implementation.defined; 

function ">=" (Left, Right : in ASIS.Character) return Boolean 
renames implementation.defined; 

function To.ASIS.Character (Value : in Standard.Character) 
return ASIS.Character renames implementation.defined; 

function To.Standard.Character (Value : in ASIS.Character) 
return Standard.Character renames implementation.defined; 

end ASIS.Character.Operations; 


— ASIS.STRIHG 


Page 10 








21 October 1991 


STARS-RC-251901 /003/00 


subtype ASIS.String is implementation.defined.array; 

— packed array ( Positive range <> ) of ASIS.Character; 

Hil.String : constant ASIS_String (1..0) := 
package ASIS_String_Operations is 

function "=" (Left, Right : in ASIS.String) return Boolean 

renames implementation.defined; 

function "<" (Left, Right : in ASIS.String) return Boolean 
renames implementation.defined; 

function "<=" (Left, Right : in ASIS_String) return Boolean 
renames implementation.defined; 

function ">" (Left, Right : in ASIS.String) return Boolean 
renames implementation.defined; 

function ">=" (Left, Right : in ASIS.String) return Boolean 
renames implementation.defined; 

function "A" (Left : in ASIS.String; Right : in ASIS.String) 
return ASIS.String renames implementation.defined; 

function "A" (Left : in ASIS.String; Right : in ASIS.Character) 
return ASIS.String renames implementation.defined; 

function "A” (Left : in ASIS.Character; Right : in ASIS.String) 
return ASIS.String renames implementation.defined; 

function "A" (Left : in ASIS.Character; Right : in ASIS.Character) 
return ASIS.String renames implementation.defined; 

function To.ASIS.String (Value : in Standard.String) 
return ASIS.String renames implementation.defined; 

function To.Standard.String (Value : in ASIS.String) 
return Standard.String renames implementation.defined; 

end ASIS.String.Operations; 


Page 11 








21 October 1991 


STARS-RC-251901/003/00 


— ASIS.TEXT 


Maximum_Line_Length : ASIS.Integer renames implementation.defined_constant; 
— The maximum allowed length of a line of text in an Ada program. 


Maximum_Line_Mumber : ASIS.Integer renames implementation.defined.constant; 
— The maximum allowed number of lines of text in an Ada program. 


subtype Line.Humber is ASIS.Integer range 0..Maximum_line_Humber; 

— The range of line numbers within the text of programs. 

— The value 0 is used to indicate an invalid line number. 


subtype Line is implementation.defined_private_type; 
— An Ada text line abstraction (a private type). 


— ASIS.TEXT LIHE.LIST 


subtype Line.List is implementation.defined.array; 

— List of Lines 

— Implemented as an unconstrained array: 

— array ( Line.Vumber range <> ) of Line; 


Ril.Line.List : Line.List renames 
implementation.defined.constant; 

— A constant Line List with a void or null value. 


package Line_List_Operations is 

function "ft" (Left : in Line.List; 

Right : in Line.List) 

return Line.List renames implementation.defined; 


Page 12 








21 October 1991 


STARS-RC-251901 /003/00 


function "ft" (Left : in Line_List; 

Right : in Line) 

return Line.List renames implementation.defined; 


function "ft" (Left : in Line; 

Right : in Line.List) 

return Line.List renames implementation.defined; 

function "ft" (Left : in Line; 

Right : in Line) 

return Line.List renames implementation_defined; 


end Line_List_Operations; 


-- EXCEPTION 


Inappropriate_Library : exception; 

— Raised when an operation is given a Library value that is 

— not appropriate for the operation. 


Inappropriate_Compilation_Unit : exception; 

— Raised when an operation is given a Compilation.Unit value that is 

— not appropriate. 


Inappropriate_Program_Element : exception; 

— Raised when an operation is given an Element value that is 

— not appropriate. 


Failed : exception; 

— All operations may raise Failed whenever they cannot normally complete 

— their operation. 

— This is a catch-all exception that may be raised for different reasons 

— in different ASIS implementations. 

— The Diagnosis and Status functions are provided in ASIS.Libraries, 


Page 13 










21 October 1991 


STARS-RC-251901 /003/00 


— ASIS_Compilation_Units, and ASIS.Elements packages so more information 

— about the failure can be retrieved. 


end ASIS_Ada_Program; 


— ASIS PRELIMINARY REVIEW VERSION 0.4 

— Sept 27, 1991 


with ASIS_Ada_Program; 
package ASIS.Environment is 


— This package provides operations to initialize and finalize the 

— ASIS environment. 


subtype ASIS_String is ASIS_Ada_Program.ASIS_String; 


Nil.String : ASIS_String renames ASIS_Ada_Program.Nil_String; 


— EXCEPTIONS 

Failed : exception renames ASIS_Ada_Program.Failed; 

— Raised when the environment failed to initialize or finalize. 

— Raised when invalid parameters axe given to initialize or finalize. 


— ENVIRONMENT VERSION 


Page 14 





21 October 1991 


STARS-RC-251901/003/00 


function Version return ASIS_String; 

— Returns a ASIS_String that identifies the current ASIS version. 


— EIVIRONHEIT IHITIALIZATIOH 


function Is.Initialized return Boolean; 

— Returns True if the the environment is initialized. 


procedure Initialize(Parameters: in ASIS_String := Hil_String); 

— Performs any necessary initialization activities. 

— This must be invoked once before any other ASIS 

— Services. Parameter values are vendor dependent. 

— Preconditions: 

The environment is not already initialized, 
otherwise the call is ignored. 

— Raises: 

Failed if the environment failed to initialize. 

— Postconditions: (if no exception is raised; 

ASIS services are ready for use. 


— EIVIROHMENT FIIALIZATIOI 


function Is_Finalized return Boolean; 

— Returns True if the environment is finalized. 


procedure Finalize(Parameters: in ASIS.String := Hil.String); 

— Performs any necessary termination activities. 

— This must be invoked once following all other ASIS 


Page 15 









21 October 1991 


STARS-RC-251901 /003/00 


— Services. Parameter values are vendor dependent. 


— Preconditions: 

The environment must be initialized, otherwise the 
call is ignored. 


— Raises: 

Failed if the environment failed to finalize. 


— Postconditions: (if no exception is raised) 

Subsequent calls to ASIS services are erroneous. 


— ERROR INFORMATION 
type ASIS_Environment_Error_Kinds is 
(Not_An_Error, 

Environment_Error, — The environment failed to 

— initialize or finalize. 

Parameter_Error, — Invalid parameters were given 

— to initialize or finalize. 

TBD); 


— Whenever an error condition is detected and the exception Failed 

— is raised, an ASIS_Environment_Error.Kinds value is stored. That value 

— can be retrieved using the Status function. The Diagnosis function will 

— retrieve the ASIS.String diagnostic message describing the failure. 

— Error information is only kept when the catch-all exception Failed 

— is raised, and refers to the most recent failure. 

— Note that Status and Diagnosis values are vendor dependent and will 

— vary among ASIS implementations. 


function Status return ASIS_Environment_Error_Kir^s; 

— Returns the ASIS_Environment_Error_Kinds value for the the most recent 

— failure. 


Page 16 








21 October 1991 


STARS-RC-251901/003/00 


— Returns Hot_An_Error if the most recent initialize or finalize 

— operations sere successful. 


function Diagnosis return ASIS_Ada_Program.ASIS.String; 

— Returns an ASIS_String value describing the meet recent failure. 

— Returns a Iil_String if the most recent initialize or finalize 

— operations were successful. 


end ASIS.Environment; 


— ASIS PRELIMINARY REVIEW VERSION 0.4 
-- Sept 27, 1991 


with ASIS_Ada_Program; 
package ASIS.Libraries is 

— LRM Section 10.4 

— ASIS.Libraries encapsulates a set of operations that implement 

— the ASIS Ada Program Library abstraction. 

— It assumes only knowledge of the program library that is 

— specified in section 10.4 of the Ada ’„RH. 

subtype Library is ASIS_Ada_Program.Library; 
subtype ASIS.String is ASIS_Ada_Program.ASIS.String; 

Nil.String : ASIS.String renames ASIS_Ada_Program.fil_String; 


Page 17 








21 October 1991 


STARS-RC-251901 / 003/00 


— EXCEPTIONS 


Failed : exception renames ASIS_Ada_Program.Failed; 

— All operations may raise Failed whenever they cannot normally complete 

— their operation. 

— This is a catch-all exception that may be raised for different reasons 

— in different ASIS implementations. 

— The Diagnostic and Status functions are provided so more information 

— about the failure can be retrieved. 


— LIBRARY CONSTRUCTORS 


function Default_Name return ASIS_String; 

— Returns the default library name. 

— If there is no default library, a fil.String is returned. 


function Default.Parameters return ASIS.String; 

— Returns the default library parameters. 

— If there are no default parameters, a Nil.String is returned. 


procedure Associate 

(ProgramJLibrary : in out Library; 

Name : in ASIS.String; 

Parameters : in ASIS.String := Default.Parameters); 

— Associates Library with the given Name and Parameters values. 

— A library can have at most one set of values associated with 

— it at any time. Name and Parameters values previously 

— associated are replaced. 

— Preconditions: 

— Is_0pen( Program.Library ) = False 

— Postconditions: 


Page 18 









21 October 1991 


STARS-RC-251901/003/00 


— Hame( Program.Library ) = Name 

— Parameters( Program.Library ) = Parameters 

— Has_Associations( Program.Library ) = True 

— Is_Open( Program.Library ) = False 


procedure Open (Program.Library : in out Library); 

— Opens the Ada Library using the associated Hame and 

— Parameters values. 

— Preconditions: 

— Has_Associations( Program.Library ) = True 

— Is_Open( Program.Library ) = False 

— Postconditions: 

— Is_Open( Program.Library ) - True 


procedure Close (Program.Library : in out Library); 

— Closes the Ada Library. 

— Any previous associations to Library are retained. ‘ mrefore 

— allowing Library to be re-opened. 

— Preconditions: 

Is_Open( Program.Library ) = True 

— Postconditions: 

— Is_Open( Program.Library ) = False 

— Has_Associations( Program.Library ) = True 

Any value obtained from a library becomes invalid when that 
library is closed. 

— Subsequent calls to ASIS services using Compilation.Unit 

and Element handles obtained from the library are erroneous. 


— LIBRARY HAHDLE DESTRUCTOR 


procedure Dissociate (Program.Library : in out Library); 

— Severs all previous associations to Program.Library. 

— A given library with no associations is returned unchanged. 


Page 19 





21 October 1991 


STARS-RC-251901 /003/00 


— Iota that this operation has no afiect on tha physical Ada Library. 

— Preconditions: 

— Is_Open( Program.Library ) = False 

— Postconditions: 

— Any storage lor Library is deallocated. 

— Has_Associations( Program.Library ) = False 


— LIBRARY ATTRIBUTES 

function Is_Equal (Left, Right : in Library) return Boolean; 

— Returns True il Left and Right designate the same library file. 

function Exists (Program_Library : in Library) return Boolean; 

— Returns True if Program_Library designates a library file that exists. 

function Is_Open (Program_Library : in Library) return Boolean; 

— Returns True if Program_Library is open. 


function Has.Associations ( Program_Library : in Library) 
return Boolean; 

— Returns True if name and parameters values have been 

— associated to Program_Library. 


function Hame (Program_Library : in Library) return ASIS_String; 

— Returns the name associated with Program_Library. 

— if not Has_Associations( Program_Library ), a Hil_String is returned. 


function Parameters (Program_Library : in Library) return ASIS.String; 
— Returns the parameters associated with Program.Library. 


Page 20 










21 October 1991 


STARS-RC-251901 /003/00 


— if not Has_Associations( Program.Library ), a Hil_String is returned. 


— ERROR INFORMATION 

type ASIS_Library_Error_Kinds is 

(Hot_An_Error, — The library has no error condition. 

Capacity_Error, — The implementation cannot support a 

— request to open an additional library. 

Data_Error, — The library file specified by Name(Library) 

— does not contain a valid Ada library. 

— ie. The contents of the library are the 

— prong version or format. 

Initialization.Error, — The underlying components have not been 

— initialized by calling 

— ASIS.System.Services.Initialize. 

Name.Error, — The Name(Library) does not specify a 

— library file. 

— ie. The named library does not exist. 

Status.Error, — The Library is not in valid state (either 

— open or closed) to perform a given operation. 

Storage.Error, — The system can not perform new allocations. 

Use.Error, — Characteristics of the library file specified 

— by Name(Library) or Parameters(Library) do 

— not permit performance of a given operation. 

TBD); 


— Whenever an error condition is detected and the exception Failed 

— is raised, an ASIS_Library_Error.Kinds value is stored for the Library 

— involved in the failure. That value can be retrieved using the Status 

— function. The Diagnosis function sill retrieve the ASIS.String 

— diagnostic message for the Library.Error.Kinds value. 

— Status information is only kept when the catch-all exception Failed 


Page 21 





21 October 1991 


STARS-RC-251901 /003/00 


— is raised. 

— Mote that Status and Diagnosis values axe vendor dependent and will 

— vary among ASIS implementations. 


function Status (Program_Library : in Library) 
return ASIS_Library_Error_Kinds; 

— Returns the ASIS_Library_Error_Kinds value associated with 

— Program_Library. 

— Returns Mot_An_Error if Program.Library has no error kind associated 

— with it, or if not Has_Associations(Program_Libraxy). 

— EG. It has not been involved in a failed operation. 


function Diagnosis (Program_Library : in Library) return ASIS_String; 
— Returns an ASIS_String value associated with Program_Library. 


procedure Dissociate_Library_Error_Information; 

— Removes the association of status and diagnosis error information with 

— all Library handles that have been involved in a failed operation. 

— This operation does not affect Library handles in any other way. 


— DEBUGGIMG 

function Debug_Image (Program_Library : in Library) return ASIS_String; 

— Returns an ASIS.String value containing implementation defined debug 

— information associated with Program_Library. 


private 


end ASIS.Libraries; 


Page 22 









21 October 1991 


STARS-RC-251901/003/00 


— ASIS PRELIHIHARY REVIEW VERSIOI 0.4 
-- Sept 27, 1991 


vith ASIS_Ada.Program; 

package ASIS_Compilation_Units is 

— LRM Chapter 10 

subtype Library is ASIS_Ada_Program.Library; 

subtype Compilation.Unit is ASIS_Ada_Program.Compilation.Unit; 

Hil_Compilation_Unit : Compilation.Unit renames 

ASIS.Ada.Program.Iil.Compilation.Unit; 

— A constant Ada Compilation Unit vith a void or null value. 

subtype Element is ASIS_Ada_Program.Element; 

subtype Compilation_Unit_List is ASIS_Ada_Program.Compilation_Unit_List; 

Nil_Compilation_Unit_List : Compilation_Unit_List renames 

ASIS_Ada_Program.Iil_Compilation_Unit_List; 

— A constant Ada Compilation Unit List vith a void or null value. 

subtype ASIS.String is ASIS_Ada_Program.ASIS.String; 

Hil.String : ASIS.String renames ASIS_Ada_Program.Hil_String; 
subtype ASIS.Time is ASIS_Ada_Program.ASIS.Time; 


Page 23 









21 October 1991 


STARS-RC-251901/003/00 


— EXCEPTIONS 


Inappropriate.Library : exception renames 

ASIS_Ada_Program.Inappropriate_Library; 

— Raised when an operation is given a Library value that is 

— not appropriate lor the operation. 

— All ASIS_Compilation_Units operations that take a library parameter 

— will raise this exception when given a library that is not open. 


Inappropriate.Compilation.Unit : exception renames 

ASIS_Ada_Program.Inappropriate_Compilation_Unit; 

— Raised when an operation is given a Compilation.Unit value that is 

— not appropriate. 


Failed : exception renames ASIS_Ada_Program.Failed; 

— All operations may raise Failed whenever they are given appropriate 

— input but cannot normally complete their operation. 

— This is a catch-all exception that may be raised lor dillerent reasons 

— in dillerent ASIS implementations. 

— The Diagnosis and Status lunctions are provided so more inlormation 

— about the lailure can be retrieved. 


-- 10.1 COMPILATION UNITS - KINDS 


type Compilation_Unit_Kinds is 

— The kinds ol Ada Program Library compilation units. 

(A_Subprogram_Declaration, 

A_Package_Declaration, 

A_Generic_Declaration, 

A.Generic.Instantiation, 

A_Subprogram_Body, 


Page 24 








21 October 1991 


STARS-RC-251901/003/00 


A_Package_Body, 

A.Subunit, 

A_Ionexistent_Library_Unit, — A unit that no longer exists but is 

— mentioned in a with clause of another 

— unit or is the specification of a 

— library unit body. 

A_Ionexistent_Secondary_Unit, — A unit that does not exist but is 

— mentioned in a body stub of another 

— unit or is the proper body of a 

— library unit. 

Unknown, — The unit kind is not known. 

Mot_A_Compilation_Unit — A void compilation unit kind value. 

); 


function Kind (A_Compilation_Unit : in Compilation_Unit) 
return Compilation_UnitJCinds; 

— Returns the kind of the compilation unit. 

— Returns Iot_A_Compilation_Unit for any inappropriate compilation unit 

— such as a Iil_Compilation_Unit. 


-- COHPILATIOI.UKIT ASSIGIMEIT 


procedure Assign (Target : in out Compilation.Unit; 

Source : in Compilation.Unit); 

— Assigns the source compilation unit to the target compilation unit. 

— Postconditions: (if no exception is raised) 

Depending on the ASIS implementation, the target compilation unit 
may be dissociated before performing the assignment. 
Is_Equal(Target, Source) 


— 10.1 C0MPILAT10I U1ITS - BELOIGIIG TO A LIBRARY 


Page 25 








21 October 1991 


STARS-RC-251901/003/00 


— Compilation units are said to belong to a program library. 

— These queries search a given library for compilation units. 

— Successful searches have the affect of associating the logical 

— compilation unit handles with the corresponding physical compilation 

— unit values within the library. 

— Exists(A_Compilation_Unit) = True when a Compilation_Unit is successfully 

— obtained from these queries. 


— Eligible Compilation Units 

— Some ASIS implementation may allow more than one version of a library 

— unit to exist within a library. If so, then only one of those library 

— units is "eligible" to be used in an executable program. Other versions 

— of the library unit are "ineligible". The search rules used to determine 

— library unit eligibility are defined by each ASIS implementation. 


function Library_Unit (lame : in String; Program_Library : in Library) 
return Compilation_Unit; 

— Returns an eligible library unit with the distinct name belonging 

— to the library. See LRH 10.1(3). 

— If no such library unit exists, a Iil_Compilation_Unit is returned. 

— Raises Inappropriate_Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Secondary_Unit (lame : in String; Program_Library : in Library) 
return Compilation.Unit; 

— Returns an eligible secondary unit with the distinct name belonging 

— to the library. See LRM 10.1(3). 

— If no such secondary unit exists, a Iil_Compilation_Unit is returned. 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


Page 26 










21 October 1991 


STARS-RC-251901 /003/00 


subtype Library.Unit.List is Compilation.Unit.List; 

function All.Library.Units (Program.Library : in Library) 
return Library.Unit.List; 

— Returns the complete list of all versions of library units in the 

— library. 

— The occurrence and order of units in the list is implementation defined. 

— If no library units exist within the library, 

— a Vil.Compilation.Unit.List is returned. 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Library.Units (Program.Library : in Library) 
return Library.Unit.List; 

— Returns a list of eligible and distinctly named library units 

— belonging to the library. See LRM 10.1(3). 

— The order of units in the list is implementation defined. 

— If no library units exist within the library, 

— a lil.Compilation.Unit.List is returned. 

— Raises Inappropriate.Library 

— if not ASIS_Librarie8.Is.0pen(Program.Library). 


subtype Secondary.Unit.List is Compilation.Unit.List; 


function All.Secondary.Units (Program.Library : in Library) 
return Secondary.Unit.List; 

— Returns the complete list of all versions of secondary units in the 

— library. 

— The occurrence and order of units in the list is implementation defined. 

— If no secondary units exist within the library, 

— a lil.Compilation.Unit.List is returned. 


Page 27 






21 October 1991 


STARS-RC-251901 /003/00 


— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Secondary_Units (Program_Library : in Library) 
return Secondary_Unit_List; 

— Returns a list of eligible and distinctly named secondary units 

— belonging to tbe library. See LRM 10.1(3). 

— Tbe order of units in the list is implementation defined. 

— If no secondary units exist within the library, 

— a Iil_Compilation_UnitJList is returned. 

— Raises Inappropriate_Library 

— if not ASIS_Libraries.IsJ3pen(Program_Library). 


function All_Compilation_Units (Program_Library : in Library) 
return Compilation.Unit JList; 

— Returns the complete list of all versions of compilation units in the 

— Library. 

— If no compilation units exist within the Library, an empty list is 

— returned. 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Compilation.Units (Program.Library : in Library) 
return Compilation.Unit.List; 

— Returns a list of eligible and distinct compilation units belonging to 

— the given Library. See LRM 10.1(3). 

— The order of units in the list is implementation defined. 

— If no compilation units exist within the Library, an empty list is 

— returned. 


Page 28 






21 October 1991 


STARS-RC-251901/003/00 


— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Prograjn_Library). 


-- 10.1 EHCLOSIHG LIBRARY 


function Enclosing_Library (A.Compilation.Unit : in Compilation_Unit) 
return Library; 

— Returns the library to shich the compilation unit belongs. 

— Compilation units retrieved through any of the search operations 

— keep track of the library in shich they Here found. 

— Since the type Library is a limited private, this function is only 

— intended to be used to supply the library parameter to other operations. 

— This conveniently eliminates the need to make the original library 

— visible at the place of each call share a library parameter is required. 

— Raises Inappropriate_Compilation_Unit 
-- if not Exists(A.Compilation.Unit) 


— 10.1 CORRESPOIDIIG COHPILATIOI UIITS 


function Corresponding_Library_Unit 

(Secondary_Unit : in Compilation.Unit) 
return Compilation_Unit; 

function Corresponding_Library_Unit 

(Secondary.Unit : in Compilation.Unit; 

Program.Library : in Library) 
return Compilation.Unit; 

— Returns the compilation unit that is the semantically correct 

— corresponding library unit of the given Secondary.Unit. The library 

— unit returned is the library unit for shich the secondary unit is 

— the proper body. 

— Returns a lil.Compilation.Unit for all given Secondary.Unit 

— values that do not have an existing corresponding library unit. 

— The corresponding library unit sould have to have existed shen the 


Page 29 











21 October 1991 


STARS-RC-251901 /003/00 


— secondary unit was compiled, however, some ASIS implementations allow 

— compilation units to be removed without affecting other dependent 

— compilation units. 

— If a Program.Library is given, that library is used to search for the 

— corresponding compilation unit. 

— If a library unit is given, the same compilation unit is returned. 

— If no corresponding library unit exists, a Iil_Compilation_Unit is 

— returned. 

— LRM 10.1(6). A subprogram body given in a compilation unit is 

— interpreted as a secondary unit if the program library already 

— contains a library unit that is a subprogram with the same name; 

— it is otherwise interpreted both as a library unit and as the 

— corresponding library unit body (that is, as a secondary unit). 

— In this case, given a secondary unit handle whose Kind is 

— A_Subprogram_Body, this operation returns the library unit handle 

— whose Kind is A.Subprogram.Declaration. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(Secondary.Unit) or Is_Subunit(Secondary_Unit) 

or Kind(Secondary_Unit) * Unknown 

— Raises Inappropriate_Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Corresponding.Secondary.Unit 

(Library.Unit : in Compilation.Unit) 

return Compilation.Unit; 

function Corresponding.Secondary.Unit 

(Library.Unit : in Compilation.Unit; 

Program_Library : in Library) 
return Compilation.Unit; 

— Returns the compilation unit that is the semantically correct 

— corresponding library unit body (the secondary unit) of the given 

— Library.Unit. 

— Returns a lil.Compilation.Unit for all given Library.Unit 

— values that do not have an existing corresponding secondary unit, 

— for example, the library unit is a package declaration whose body is 

— not required or has not yet been compiled. 


Page 30 







21 October 1991 


STARS-RC-251901/003/00 


— If a secondary unit is given, the same compilation unit is returned. 

— If no corresponding secondary unit exists, a Iil_Compilation_Unit is 

— returned. 

— If a Program_Library is given, that library is used to search for the 

— corresponding compilation unit. 

— LRM 10.1(6). A subprogram body given in a compilation unit is 

— interpreted as a secondary unit if the program library already 

— contains a library unit that is a subprogram with the same name; 

— it is otherwise interpreted both as a library unit and as the 

— corresponding library unit body (that is, as a secondary unit). 

— In this case, given a library unit handle whose Kind is 

— A_Subprogram_Declaration, this operation returns the secondary 

— unit handle whose Kind is A_Subprogram_Body. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(Library_Unit) or Is_Subunit(Library_Unit) 

or Kind(Library_Uuit) = Unknown 

— Raises Inappropriate_Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


-- 10.1(7) COMPILATIOI PRAGMAS 


subtype Pragma_List is ASIS_Ada_Program.Element_List; 

function Compilation_Pragmas 

(A_Compilation_Unit : in Compilation_Unit) 
return Pragma.List; 

— Returns a list of pragmas that apply to the whole of the compilation 

— of the compilation unit. 

— Pragmas returned in this list must appear before the first compilation 

— unit of the compilation that contained the given compilation unit. 

— Use the Pragmas operation in ASIS_Elements to obtain a list of 

— pragmas in a given context within a compilation unit. 

— A Iil_Element_List is returned if the compilation unit has no such 


Page 31 







21 October 1991 


STARS-RC-251901/003/00 


— applicable pragmas or il the Kind(A_Compilation_Unit) = Unknown. 

— Further analysis: 

Use ASIS_Elements pragma operations to decompose pragmas. 

— Raises Inappropriate_Compilation_Unit 

— il no.. Erists(A_Compilation_ T Jnit) 


-- 10.1 COMPILATIOH UIIT ATTRIBUTES 

function Is_Hil (A_Compilation_Unit : in Compilation_Unit) return Boolean; 

— Returns True if the compilation unit has a void or null value. 

— All Compilation.Unit kinds are appropriate. 

function Is_Equal (Left, Right : in Compilation_Unit) return Boolean; 

— Returns True if Left and Right represent the same compilation unit. 

— All Compilation_Unit kinds are appropriate. 

function Hame (A_Compilation_Unit : in Compilation_Unit) return String; 

— Returns the lame associated with the given compilation unit. 

— Then name is the Ada identifier that names the compilation unit. 

— If a Iil_Compilation_Unit is given then a null string is returned. 

— All Compilation_Unit kinds are appropriate. 


function Unique.Iame (A_Compilation_Unit : in Compilation_Unit) 
return ASIS_String; 

— Returns an ASIS.String that uniquely identifies the given compilation unit. 

— The result may vary depending on the ASIS implementation. The unique 

— name may include the name of the library, file system paths, sublibrary 

— files, version numbers, kind, or any other information that a vendor 

— may use to uniquely identify the compilation unit. 


Page 32 






21 October 1991 


STARS-RC-251901 /003/00 


— II a Iil_Compilation_Unit is given then a Sil.String is returned. 

— All CompilationJJnit kinds are appropriate. 


function Exists (A_Compilation_Unit : in Compilation.Unit) return Boolean; 

— Returns True if Compilation.Unit has been successfully compiled into 

— a program library. 

— Returns False when given a Hil_Compilation_Unit. 

— All Compilation.Unit kinds cure appropriate. 


function Can_Be_Main_Prograiu (A_Compilation_Unit : in Compilation.Unit) 
return Boolean; 

— Returns True if Compilation.Unit exists and is a subprogram 

— that is a library unit that can be used as a main program. 

— See LRM 10.1(8) 

— Results of this function may vary according to the requirements 

— an Ada implementation may impose on a main program. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 


function Body_Is_0ptional (A_Compilation_Unit : in Compilation.Unit) 
return Boolean; 

— Returns True if Compilation.Unit’s body is not required. 

— See LRM 7.1(5) 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 


function Text_File_Iame (A_Compilation_Unit : in Compilation.Unit) 
return ASIS.String; 

- Returns the text file name for Compilation.Unit. 

— The text file name identifies the file or other structure that 


Page 33 





21 October 1991 


STARS-RC-251901 /003/00 


— contained the text for the given compilation unit when it was 

— submitted to the compiler. 

— If not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or if the text file name is not available, a lil.String is returned. 


function Text_File_Form (A_Compilation_Unit : in Compilation.Unit) 
return ASIS_String; 

— Returns the text file form for Compilation_Unit. 

— If not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or if the text file form is not available, a Iil_String is returned. 


function Object_File_Iame (A_Compilation_Unit : in Compilation_Unit) 
return ASIS.String; 

— Returns the object file name created for Compilation_Unit. 

— If not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or if the object file name is not available, a Iil_String is returned. 


function Object_File_Form (A_Compilation_Unit : in Compilation_Unit) 
return ASIS_String; 

— Returns the object file Form created for Compilation_Unit. 

— If not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or if the object file form is not available, a Iil_String is returned. 


function Compilation_Command_Line_Options 
(A_Compilation_Unit : in Compilation_Unit) 
return ASIS.String; 

— Returns the command line options used to compile Compilation_Unit. 

— If not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or if compilation command line options are not available, 

— a Iil_String is returned. 


Page 34 






21 October 1991 


STARS-RC-251901/003/00 


• 4 


function Time.Of_Last_Update (A_Compilation_Unit : in Compilation.Unit) 
return ASIS.Time; 

— Returns the time that Compilation.Unit was most recently 

— updated in its library. 

— If not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or if the time is not available, a Nil.time value is returned. 


function Compilation_Cpu_Time (A_Compilation_Unit : in CompilationJUnit) 
return ASIS_Time; 

— Returns the CPU time used to compile Compilation.Unit. 

— The value is relative to lil.time as defined below. 

— For example: 

A value where Year = 1901, Month = 1, Day = 1, and Seconds = 10.0 
means the compilation took 10.0 seconds. 

A value where Ye air = 1902, Month = 4, Day * 6, and Seconds = 23.0 
means the compilation took 1 year, 3 months, 5 days, 23.0 seconds. 

— If not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or if compilation CPU time is not available, a lil.time value is returned. 


— 10.1 C0MPILATI0I UIIT ATTRIBUTES - GEIERAL DR IMPLEMENTATION DEFINED 


function Has.Attribute 

(A_Compilation_Unit : in Compilation.Unit; 

Attribute : in ASIS.String) 

return Boolean; 

— Returns True if the compilation unit has the given attribute. 

— Results of this operation may vary across ASIS implementations. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A.Compilation.Unit) or Kind(A_Compilation_Unit) = Unknown 


Page 35 








21 October 1991 


STARS-RC-251901/003/00 


M 


function Attribute.Value.Delimiter return ASIS.String; 

— Returns the ASIS.String used as a delimiter separating 

— individual values within the ASIS_String Attribute_Values of 

— a compilation unit. 

— Results of this operation may vary across ASIS implementations. 


function Attribute_Values 

(A_Compilation_Unit : in Compilation_Unit; 

Attribute : in ASIS.String) 

return ASIS_String; 

— Returns the ASIS.String containing zero or more images of values that 

— may be associated with the given attribute. The Attribute.Value.Delimiter 

— separates individual values in the ASIS.String when more than one value 

— is returned. 

— Results of this operation may vary across ASIS implementations. 

— If not Exists(A.Compilation.Unit) or Kind(A.Compilation.Unit) = Unknown 

— or the compilation unit does not have the attribute or associated values, 

— a lil.String is returned. 


function Attribute.Time 

(A.Compilation.Unit : in Compilation.Unit; 

Attribute : in ASIS.String) 

return ASIS.Time; 

— Returns the ASIS.Time value associated with the given attribute. 

— Results of this operation may vary across ASIS implementations. 

— If not Exists(A.Compilation.Unit) or Kind(A.Compilation.Unit) = Unknown 

— or the compilation unit does not have the attribute or associated value, 

— lil.Time is returned. 


— 10.1 COHPILATIOI USITS - ELEMEIT GATEWAY 


Page 36 







21 October 1991 


STARS-RC-251901 /003/00 


*• 


function Enclosing_Compilation_Unit (Program.Element : in Element) 
return Compilation.Unit; 


— Returns the Compilation.Unit that contains the given Element. 

— This is a gateway from Element handles to Compilation.Unit handles. 

— Raises Inappropriate.Program.Element 

— if iSIS_Elements.Is_Iil(Program_Element). 


subtype Declaration is ASIS.Ada.Program.Element; 

function Unit.Declaration (A.Compilation.Unit : in Compilation.Unit) 
return Declaration; 

— Returns the declaration of the library unit or secondary unit. 

— This is a gateway from Compilation.Unit handles to Element handles. 

— If Kind(A.Compilation.Unit) = Unknown an ASIS.Ada.Program.lil.Element 

— is returned. 

— Use ASIS.Declarations operations to further decompose these elements. 

— Raises Inappropriate.Compilation.Unit 

— if not Exists(A.Compilation.Unit) 


— 10.1.1 COITEXT CLAUSES - ELEMEIT GATEWAY 

subtype Context.Clause.Element is ASIS.Ada.Program.Element; 

subtype Context.Clause.Element.List is ASIS.Ada.Program.Element.List; 

function Context.Clause.Elements 

(A.Compilation.Unit : in Compilation.Unit) 
return Context_Clause.Element.List; 

— Returns a list of with clauses, use clauses, and pragmas that 

— explicitly reside in the context clause of the compilation unit. 


Page 37 







21 October 1991 


STARS-RC-251901 /003/00 


• 4 


— With clause and use clauses that implicitly apply to a given secondary 

— unit axe not returned in this list. See LRM 10.1.1(4). Use the 

— compilation unit relationship operations and Relation.Kinds Supporters 

— and Direct_Supporters to find all the supporting library units. 

— Pragmas returned in this list must occur immediately alter the context 

— clause of a compilation unit before the subsequent library unit or 

— secondary unit. See LRM Appendix B. Pragma ELABORATE. 

— Results ol this operation may vary across ASIS implementations. 

— Some implementations normalize all with clauses and use clauses 

— containing multiple names ol library units into an equivalent sequence 

— ol corresponding single with or use clauses. Similarly, an 

— implementation may keep a name only once even though that name may appear 

— more than once in the with clauses or use clauses ol a compilation unit. 
-- See LRM 8.4(9) and LRM 10.1.1(8). 

— II not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 

— or il the compilation unit has no context clause, a Iil_Element_List is 

— returned 

— Further analysis: 

Use ASIS.Elements.Major.Element.Kind to analyze the kind ol elements 
in a context clause. 

Use ASIS_Elements pragma operations to decompose pragmas. 

— Raises Inappropriate.Compilation.Unit 

— il not Exists(A_Compilation_Unit) 


subtype Identifier.Reference.List is ASIS.Ada.Program.Element.List; 
function Referenced.Units 

(Hith.Clause.Or.Use.Clause : in Context.Clause.Element) 
return Identilier.Ref erence.List; 

— Returns a list ol elements ol the subtype Identifier.Reference that are 

— mentioned in the with clause or the use clause. 

— Results of this operation may vary across ASIS implementations. 

— Depending on the behavior ol the function Context.Clause.Elements, 

— this operation will either return a list containing one or more 

— identifiers or will always return a list containing a single identifier. 

— Appropriate ASIS.Elements.Major.Element.Kinds; 


Page 38 






K 


21 October 1991 


STARS-RC-251901 /003/00 


A_With_Clause 

A_Use_Clause occurring within a context clause of a compilation unit 

— A.Use.Clause that is a declarative item is inappropriate. 

— Use ASIS_Kames_And_Expressions.Iamed_Packages to analyze use clauses that 

— are declarative items. 


— 10.2 SUBUIITS OF COMPILATIOI UIITS 


function Is_Subunit 

(A_Compilation_Unit : in Compilation_Unit) 
return Boolean; 

— Returns True if the given Compilation.Unit is a subunit. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A_Compilation_Unit) or Kind(A_Compilation_Unit) = Unknown 


function Subunits 

(Parent_Unit : in Compilation.Unit) 
return Secondary_Unit_List; 

function Subunits 

(Parent.Unit : in Compilation.Unit; 

Program_Library : in Library) 
return Secondary_Unit_List; 

— Returns a list of subunits corresponding to the 

— the body stubs that appear in the given Parent_Unit. 

— Returns a Iil_Compilation_Unit_List if the parent unit does not 

— contain any body stubs. 

— The list includes subunits existing in the given library and subunits 

— that do not exist but whose name can be deduced from the body stub and 

— the name of the parent unit. These nonexistent units are known to be 

— secondary units so their Kind will be A.Ionexistent.Secondary_Unit. 

— Subunits can also be obtained through the query 

— Related.Compilation.Units using the Family relation. 


Page 39 







21 October 1991 


STARS-RC-251901 /003/00 


•« 


— Raises Inappropriate.Compilation.Unit 

— if not Exists(Parent.Unit) or Kind(Parent_Unit) = Unknown 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Subunit.Parent 

(Subunit : in Compilation.Unit) 

return Compilation.Unit; 

function Subunit.Parent 

(Subunit : in Compilation.Unit; 

Program.Library : in Library) 
return Compilation.Unit; 

— Returns the Compilation.Unit that contains the body stub 

— of the given Subunit. 

— Returns a lil.Compilation.Unit if the subunit parent cannot be 

— found within the library. 

— Raises Inappropriate.Compilation.Unit 

— if not Is.Subunit(Subunit) 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Subunit.Ancestor 

(Subunit : in Compilation.Unit) 

return Compilation.Unit; 

function Subunit.Ancestor 

(Subunit : in Compilation.Unit; 

Program.Library : in Library) 
return Compilation.Unit; 

— Returns the Compilation.Unit that is the ancestor library unit 

— of the given Subunit. The ancestor unit is a parent unit that 

— is not itself a subunit. See LRU 10.2(5). 

— Returns a lil.Compilation.Unit if the subunit ancestor cannot be 

— found within the library. 


Page 40 






21 October 1991 


STARS-RC-251901 /003/00 


— Raisas Inappropriate.Compilation.Unit 

— if not Is.Subunit(Subunit) 


— Raisas Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


— 10.3 ORDER OF C0MPILATI0I 

— Compilation Unit Relationships 

— Relationship queries provide handles to compilation units that axe 

— related in a given manner to one or more given compilation units. 

— Compilation units located by the queries are returned in an ordered 

— list. 

— The following describes the semantics of the list of units returned 

— by these queries: 

Related.Compilation.Units 
Compilation.Order 
Recompilation.Order 
Elaboration.Order 

— The list contains four possible sublists: 

1) A sublist of existing ordered units 

2) A sublist of units that are inconsistent due to the 
recompilation of one or more related units. 

3) A sublist of units that have missing (nonexistent) related units. 

4) A sublist of circularities among the related units. 

— Each of the four sublists is delimited by a lil.Compilation.Unit. 


— 1) THE ORDERED UIITS SUBLIST 

— The semantics of the ordering of units in the first sublist are 

— defined by each of the individual operations. 


— 2) THE IIC0ISISTE1T UIITS SUBLIST 

— The second sublist contains pairs of units; Each pairing contains the 


Page 41 








21 October 1991 


STARS-RC-251901/003/00 


— inconsistent unit followed by the unit causing the inconsistency. 

— An inconsistent unit is a Compilation.Unit that exists but is obsolete 

— due to recompilation of any supporters within the given Library. 

— See LRU 10.3 

— For example: 

— Given a sublist containing the units: A B A C D E 

— It can be determined that: 

A is inconsistent since its supporter B has been recompiled. 

A is inconsistent since its supporter C has been recompiled. 

D is inconsistent since its supporter E has been recompiled. 


— 3) THE MISSIIG U1ITS SUBLIST 

— The third sublist contains pairs of units; Each pairing contains the 

— existing unit followed by the missing related unit. 

— A missing unit is a Compilation_Unit that has a valid name, but its 

— Kind is either A_Ionexistent_Library_Unit or A_*onexistent_Secondary_Unit. 

— For example: 

— Given a sublist containing the units: ABAC 

— If Kind(B) = A_Ionexistent_Library_Unit 

— and Kind(C) = A_Ionexistent_Secondary_Unit 

— It can be determined that: 

A is missing its supporter B. 

A is missing a related secondary unit C. 

— 4) THE CIRCULAR DEPEIDEICIES SUBLIST 

— Circular dependencies between compilation units are provided in the 

— fourth sublist. There may be more than one set of circular 

— dependencies. The ordering of distinct sets in the sublist is 

— implementation defined. 

— The semantics of set of units in the circular sublist structures are the 

— same for each operation: 


Page 42 








21 October 1991 


STARS-RC-251901 /003/00 


u 


— The sublist contains pairs of units; Each pairing contains a unit 

— followed by its supporter unit. A circularity is established when 

— a following supporter unit is equal to the first unit in the sublist 

— (See the unit A in the example below). The next set of circular 

— dependent units, if any, starts with the next unit in the sublist 

— (the unit D below). 

— For example: 

— Given a list containing the units: ABBCCADEEFFGGD 

— It can be determined that there are two sets of circularly dependent 

— units: 

— {A, B, C> and {D, E, F, G> 

— The dependencies are: A depends on B, B depends on C, C depends on A. 

D depends on E, E depends on F, F depends on G, G depends on D. 

— IHPORTAIT IOTE: 

— For each operation that returns inconsistent, missing, or circular units, 

— the appearance of any of these units in those sublists means that the 

— first sublist containing ordered or related units cannot be guaranteed 

— valid or complete. 

— Programs that do not first check for inconsistent, missing, or circular 

— units may be ERROIEOUS. 


type Relation.Kinds is 

— Defines the kinds of relations between compilation units 
(Direct_Supporters, 

Supporters, 


— Definition: SUPPORTERS of a unit 

— Supporters of a compilation unit are units that must be compiled 

— before that compilation unit can be compiled. A compilation unit 


Page 43 









21 October 1991 


STARS-RC-251901/003/00 


— cannot be successfully compiled if one or more supporters axe 

— missing or obsolete. 

— Library units mentioned in with clauses of other compilation 

— units are direct supporters of those compilation units. 

— The property is transitive; Units that support library units withed 

— by other compilation units are indirect supporters of those 

— compilation units. 

— The package Standard is a supporter of every unit, but is not 

— considered to be a direct supporter unless it is mentioned in a with 

— clause. 

— For example: 

— If A withs B and B withs C. 

— Then C directly supports B, 

C indirectly supports A, and 
both B and C are supporters of A. 

— A library unit is a direct supporter of its correspon iing 

— secondary unit. 

— The parent unit of a subunit is a direct supporter of the subunit. 


Direct.Dependents, 
Dependents, 


— Definition: DEPEVDEVTS of a unit 

— A compilation unit that mentions other library units in its with 

— clauses directly depends on those library units. The property is 

— transitive; A unit that depends on a given unit also indirectly 

— depends on the given unit’s supporters. 

— For example: 

— If A withs B and B withs C 

then B directly depends on C, 

A indirectly depends on C, and 
both A and B are dependents of C. 

— Dependents are all the units that must be recompiled if the unit 

— is recompiled. A secondary unit is a direct dependent of its 

— corresponding library unit. 


Page 44 











21 October 1991 


STARS-RC-251901/003/00 


— Dependencies between compilation units may also be introduced 

— by inline inclusions, for certain compiler optimizations, and 

— lor certain implementations of generic program units. 

— See LRM 10.3(6-9) 


Family, 


— Definition: FAMILY of a unit 

— The family of a given unit is defined as the set of 

— compilation units that comprise the given unit’s spec, body, 

— and subunits (and subunits of subunits). 


Ext ended.Family 


— Definition: EXTEVDED FAMILY of a unit 

— The extended family of a given unit is defined as the set of 

— compilation units that comprise the given unit’s spec, body, 

— subunits and transitive supporters, and the extended family of 

— each transitive supporting unit. 

— The extended family of a unit that is a main program includes 

— all the Ada units ultimately required to form the program. 

— The term closure is commonly used to with similar meaning. 

— For example: 

— Assume the body of A has a subunit A.S. 

— If A withs B and B withs C and C does not with a library unit. 

— Then the extended family of A is: 

library unit C 

secondary unit C (if required) 

library unit B 

secondary unit B (if required) 

library unit A 
secondary unit A 
secondary unit A.S (subunit) 


Page 45 







21 October 1991 


STARS-RC-251901/003/00 


); 


function Related.Compilation.Units 

(Compilation_Units : in Conpilation_Unit_List; 

Dependent.Units : in Compilation.Unit.List; 

Program.Library : in Library; 

Relation : in Relation.Kinds ) 

return Compilation.Unit.List; 

— Produces the list of compilation units related to 

— the given compilation units by the s^ :ified relation. 

— Dependent units are only required when the relation is: 

Direct.Dependents or Dependents. 

— The extended families of the dependent units provide a context for 

— the operation to select dependents of the given compilation units. 

— The return list contains the sublists described above for the 

— operations on Compilation Unit Relationships 

— Raises lnappropriate.Compilation.Unit 

— if any of the given compilation units or dependent units do not exist. 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program.Library). 


function Compilation.Order 

(Compilation.Units : in Compilation.Unit.List; 

Dependent.Units : in Compilation.Unit.List; 

Program.Library : in Library; 

Relation : in Relation.Kinds ) 

return Compilation.Unit.List; 

— Produces, in compilation order, the list of compilation units 

— related to the given compilation units by the specified relation. 

— The given compilation units are returned as part of the list. 

— Dependent units are only required when the relation is: 

Direct.Dependents or Dependents. 

— The extended families of the dependent units provide a context for 

— the operation to select dependents of the given compilation units. 


Page 46 






21 October 1991 


STARS-RC-251901/003/00 


•* 


— The return list contains the sublists described above lor the 

— operations on Compilation Unit Relationships 

— Raises Inappropriate_Compilation_Unit 

— il any of the given compilation units or dependent units do not exist. 

— Raises Inappropriate_Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Recompilation.Order 

(Compilation_Units : in Compilation_Unit_List; 

Dependent_Units : in Compilation_Unit_List; 

Program_Library : in Library; 

Relation : in Relation.Kinds ) 

return Compilation_Unit_List; 

— Produces, in compilation order, the list of compilation units 

— related to the given compilation units by the specified relation 

— and which are in need of recompilation. 

— The effects of obsolete units are reflected, transitively, in 

— the Ordered_Compilation_Units list produced. 

— Dependent units are only required when the relation is: 

Direct.Dependents or Dependents. 

— The extended families of the dependent units provide a context for 

— the operation to select dependents of the given compilation units. 

— The return list contains the sublists described above for the 

— operations on Compilation Unit Relationships 

— Raises Inappropriate_Compilation_Unit 

— if any of the given compilation units or dependent units do not exist. 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Direct.Supporters 

(A_Compilation_Unit : in Compilation.Unit; 
Compilation.Units : in Compilation_Unit_List) 
return Compilation_Unit_List; 


Page 47 





21 October 1991 


STARS-RC-251901/003/00 


junction Direct.Supporters 

(Program.Library : in Library; 

A.Compilation.Unit : in Compilation_Unit; 

Compilation.Units : in Compilation.Unit.List) 
return Compilation.Unit.List; 

— Returns a list of units from the given Compilation.Unit.List 

— that are compiled direct supporters of Compilation.Unit. 

— Indirect (or transitive) supporters are not returned. 

— A compilation unit is not a direct supporter of itself. 

— Direct supporters duplicated in the given list are duplicated in 

— the returned list. 

— Only compilation units existing in the given library are 

— included in the return list. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A_Compilation_Unit) 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(ProgramJLibrary). 


function Supporters 

(A.Compilation.Unit : in Compilation.Unit; 

Compilation.Units : in Compilation_Unit_List) 
return Compilation_Unit_List; 

function Supporters 

(Program_Library : in Library; 

A.Compilation.Unit : in Compilation.Unit; 

Compilation.Units : in Compilation.Unit.List) 
return Compilation.Unit.List; 

— Returns a list of units from the given Compilation.Unit.List 

— that are compiled supporters of Compilation.Unit. 

— Direct and indirect (or transitive) supporters are included. 

— A compilation unit is not a supporter of itself. 

— Supporters duplicated in the given list are duplicated in 

— the returned list. 

— Only compilation units existing in the given library are 


Page 48 











21 October 1991 


STARS-RC-251901 /003/00 


— included in the return list. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A.Compilation.Unit) 

— Raises Inappropriate_Litrary 

— if not ASIS.Libraries.Is.Open(Program.Library). 


function Direct.Dependents 

(A.Compilation.Unit : in Compilation.Unit; 

Compilation.Units : in Compilation.Unit.List) 
return Compilation.Unit.List; 

function Direct.Dependents 

(Program.Library : in Library; 

A.Compilation.Unit : in Compilation.Unit; 

Compilation.Units : in Compilation.Unit.List) 
return Compilation.Unit.List; 

— Returns a list of units from the given Compilation.Unit.List 

— that are compiled direct dependents of Compilation.Unit. 

— Indirect (or transitive) dependents are not returned. 

— A compilation unit is not a direct dependent of itself. 

— Direct dependents duplicated in the given list are duplicated in 

— the returned list. 

— Only compilation units existing in the given library are 

— included in the return list. 

— Raises Inappropriate.Compilation.Unit 

— if not Exists(A.Compilation.Unit) 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Dependents 

(A.Compilation.Unit : in Compilation.Unit; 
Compilation.Units : in Compilation.Unit.List) 
return Compilation.Unit.List; 


function Dependents 

(Program.Library : in Library; 


Page 49 







21 October 1991 


STARS- RC-251901 /003/00 


A_Compilation_Unit : in Compilation.Unit; 

Compilation.Units : in Compilation.Unit.List) 
return Compilation.Unit.List; 

— Returns a list of units from the given Compilation.Unit.List 

— that are compiled dependents of Compilation_Un.it. 

— Direct and indirect (or transitive) dependents are included. 

— A compilation unit is not a dependent of itself. 

— Dependents duplicated in the given list are duplicated in 

— the returned list. 

— Only existing compilation units are included in the return list. 

— Only compilation units existing in the given library are 

— included in the return list. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A_Compilation_Unit) 

— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


— 10.4 THE PROGRAM LIBRARY - COMPILATIOI U1IT STATUS 


function Is_Obsolete 

(A_Compilation_Unit : in Compilation.Unit) 
return Boolean; 

function Is.Obsolete 

(A_Compilation_Unit : in Compilation.Unit; 

Program.Library : in Library) 
return Boolean; 

— Returns True if Compilation.Unit exists but is obsolete due 

— to recompilation or removal of any supporters within the 

— given Library. See LRM 10.3 

— It is always true that within the same library context, 

— a compilation unit is either obsolete or current, but not both. 

— Raises Inappropriate.Compilation.Unit 

— if not Exists(A.Compilation.Unit) 


Page 50 










21 October 1991 


STARS-RC-251901 /003/00 


— Raises Inappropriate.Library 

— if not ASIS_Libraries.Is_Open(Program_Library). 


function Is.Consistent 

(A_Compilation_Unit : in Compilation.Unit) 
return Boolean; 

function Is.Consistent 

(A_Compilation_Unit : in Compilation_Unit; 

Program_Librarjr : in Library) 
return Boolean; 

— Returns True if Compilation_Unit exists and is not obsolete. 

— See LRM 10.3 

— It is alsays true that vithin the sane library context, 

— a compilation unit is either obsolete or consistent, but not both. 

— Raises Inappropriate_Compilation_Unit 

— if not Exists(A_Compilation_Unit) 

— Raises Inappropriate_Library 

— if not ASIS_Libraries.Is_Open(ProgramJ,ibrary). 


— 10.4 THE PROGRAM LIBRARY - COMPILATIOI UJIT STATUS 

— The package ASIS.LIBRARY contains the operations for 

— naming and interrogating the Ada Program Library. 


— 10.5 ELAB0RATI0I OF LIBRARY UIITS 


function Elaboration_Order 

(Compilation_Units : in Compilation.Unit.List; 
Program_Library : in Library) 
return Compilation_Unit_List; 

— Produces, in elaboration order, the list of compilation units 

— required to elaborate the given compilation units. 


Page 51 









21 October 1991 


STARS-RC-251901/003/00 


*e 


— The return list contains the sublists described above lor the 

— operations on Compilation Unit Relationships 

— Use context clause elements to get pragma elaborate elements 

— lor a compilation unit. 

— Raises Inappropriate_Compilation_Unit 

— il any ol the given compilation units do not exist. 

— Raises Inappropriate_Library 

— il not ASIS_Libraries.Is_Open(Program_Library). 


— COMPILATIOI UIIT DESTRUCTOR 


procedure Dissociate 

(A_Compilation_Unit : in out Compilation.Unit); 

— Severs associations made to the Compilation.Unit. 

— A Vil_Compilation_Unit value is returned. 

— Postconditions: (il no exception is raised) 

Depending on the ASIS implementation, storage lor Compilation_Unit 
may be deallocated. 


procedure Dissociate 

(A_Compilation_Unit_List : in out Compilation_Unit_List); 

— Severs associations made to the Compilation_Unit_List. 

— A Iil_Compilation_Unit_List value is returned. 

— Postconditions: (il no exception is raised) 

Depending on the ASIS implementation, storage lor each Compilation.Unit 
may be deallocated. 


— ERROR IIFORMATIOI 

type ASIS_Compilation_Unit_Error_Kinds is 


Page 52 







21 October 1991 


STARS-RC-25190l/00o/00 


(lot.An.Error, 

Status.Error, — 1 operation that takes a library parameter 

— was given a library that was not open. 

TBD); 

— Additional Error Kind literals are yet TO BE DETERMIIED 

— Whenever an error condition is detected and the exception Failed 

— is raised, an ASIS_Compilation_Unit_Errjr.Kinds value is stored for the 

— Compilation.Unit involved in the failure. That value can be retrieved 

— using the Status function. The Diagnosis function will retrieve the 

— ASIS.String diagnostic message for the Compilation.Unit.Error.Kinds value. 

— Error information is only kept when the catch-all exception Failed 

— is raised. 

— lote that Status and Diagnosis values are vendor dependent and trill 

— vary among AS1S implementations. 


function Status (A.Compilation.Unit : in Compilation.Unit) 
return ASIS.Compilation.Unit.Error.Kinds; 

— Returns the ASIS.Compilation.Unit.Error.Kinds value associated with 

— the compilation unit. 

— Returns lot.An.Error if the compilation unit has no error kind associated 

— with it, or if Is_lil(A_Compilation_Unit). 

— EG. It has not been involved in a failed operation. 


function Diagnosis (A.Compilation.Unit : in Compilation.Unit) 
return ASIS.String; 

— Returns an ASIS.String value containing implementation defined error 

— information associated with the compilation unit. 


procedure Dissociate.Compilation.Unit.Error.Information; 

— Removes the association of status and diagnosis error information with 

— all Compilation.Unit handles that have been involved in a failed 

— operation. 


Page 53 







21 October 1991 


STARS-RC-251901 /003/00 


— This operation does not affect Compilation.Unit handles in any other nay. 


— DEBUGGIIG 

function Debug.Image (A_Compilation_Unit : in Compilation.Unit) 
return ASIS.String; 

— Returns an ASIS.String value containing implementation defined debug 

— information associated with the compilation unit. 


private 


end ASIS.Compilation.Units; 


— ASIS PRELIMINARY REVIEW VERSION 0.4 

— Sept 27, 1991 


sith ASIS.Ada.Program; 
package ASIS.Elements is 

— LRM Chapter 2 

subtype Element is ASIS.Ada.Program.Element; 
subtype Element.List is ASIS.Ada.Program.Element.List; 

— ASIS Elements are handles to the lexical elements that form the text 


Page 54 







21 October 1991 


STARS-RC-251901/003/00 


— of compilation units. 

— ISIS Elements are either terminal elements or composite elements made 

— up of component elements. For example, a simple name is a terminal element 

— while a selected component is a composite element consisting of three 

— components: a prefix, a dot, and a selector. A lexical element must fit 

— on one line of text but a composite element could span many lines. 

— ASIS defines a variety of element subtypes that identify classes of 

— elements. These subtypes classify elements into declarations, statements, 

— expressions, type definitions, and several other classes. 

— For each element class, ASIS provides enumeration types that describe the 

— kinds of elements. For example, statements can be if statements, loop 

— statements, raise statements, or any other kind of statement. 

— Operations are defined to determine the kind for elements of a 

— particular class. 

— ASIS offers many operations to decompose the various classes of composite 

— elements into constituent component elements. 

— Other ASIS operations return semantically related elements such as the 

— type of a given object or the specification of a given body. 

— Each ASIS Element may also have attributes that provide information 

— about that element. For example, all declaration elements will 

— have a name (identifier) associated with them. Certain static 

— expressions may have a value associated vith them. Operations 

— are defined to provide this information for specific kinds of 

— elements. 

— Some elements "make reference to" other elements. Declarations, 

— for example, define named elements of the class Identifier_Definition. 

— Other elements such as statements and expressions may make 

— reference to named elements. These references are handled vith 

— elements of the class Identifier.Reference. 

— Each ASIS Element has a text image whose value is a series of characters 

— that forms the text span of the Element. The text span covers all the 

— characters from the first character of the Element through the last 

— character of the Element over the range of lines. 


— EXCEPTIONS 


Page 55 








21 October 1991 


STARS-RC-251901/003/00 


• 4 


Inappropriate_Program_Element : exception renames 
ASIS_Ada_Program.Inappropriate_Program_Element; 

— All operations may raise Inappropriate_Program_Element whenever they 

— are given input that is not valid. It is generally inappropriate to 

— mix elements of distinct subtypes. EG. Passing a statement to an 

— operation expecting a declaration is inappropriate. 

— It is also inappropriate to mix kinds of elements within a subtype when 

— an operation is expecting a specific kind. EG. Passing a type 

— declaration to an operation looking for a procedure declaration is 

— inappropriate. 


Failed : exception renames ASIS_Ada_Program.Failed; 

— All operations may raise Failed whenever they cannot normally complete 

— their operation. 

— This is a catch-all exception that may be raised for different reasons 

— in different ASIS implementations. 

— The Diagnostic and Status functions are provided so more information 

— about the failure can be retrieved. 


— ELEME1T ASSIGIMEKT 

procedure Assign (Target : in out Element; Source : in Element); 

— Assigns the source element to the target element. 

— Postconditions: (if no exception is raised) 

Depending on the ASIS implementation, the target element 
may be dissociated before performing the assignment. 
Is.Equal(Target, Source) 


— ELEMEIT ATTRIBUTES 

function Is.Iil (Program.Element : in Element) return Boolean; 

— Returns True if the program element has a void or null value. 


Page 56 










21 October 1991 


STARS-RC-251901 /003/00 




— All element kinds are appropriate. 


function Is.Equal (Left, Right : in Element) 
return Boolean; 

— Returns True if Left and Right represent the same element. 

— All element kinds are appropriate. 


— MAJOR ELEMEKT KIIDS 


type Major.Element.Kinds is ( 


An.Identifier. 

— LRM 

2.3 

ASIS.Iames.And.Expressions 

A.Pragma, 

— LRM 

2.8 

ASIS_Elements 

An.Argument.Association, 

— LRM 

2.8 

ASIS.Statements 

A.Declaration, 

— LRM 

3 

ASIS_Declarations 

A.Type.Definition, 

— LRM 

3.3.1 

ASIS_Type_Definitions 

A.Subtype.Indication. 

— LRM 

3.3.2 

ASIS_Type_Definitions 

A.Constraint, 

— LRM 

3.3.2 

ASIS_Type_Definitions 

A.Discrete.Range, 

— LRM 

3,6 

ASIS_Type_Definitions 

A.Discriminant.Association, 

— LRM 

3.7.2 

ASIS_Type_Definitions 

A.Variant.Part, 

— LRM 

3.7.3 

ASIS_Type_Definitions 

A.Iull.Component, 

— LRM 

3.7.3 

ASIS_Type_Definitions 

A.Variant, 

— LRM 

3.7.3 

ASIS_Type_Definitions 

A.Choice, 

— LRM 

3.7.3 

ASIS_Type_Definitions 

A.Hame.Expression, 

— LRM 

4.1 

ASIS.Iames.And.Expressions 

A.Component.Association, 

— LRM 

4.3 

ASIS_Iames_And_Expressions 

An.Expression, 

— LRM 

4.4 

ASIS_fames_And_Expressions 

A.Statement, 

— LRM 

5.1 

ASIS_Statements 

An.If.Statement.Arm, 

— LRM 

5.3 

ASIS.Statements 

A.Case.Statement.Alternative, 

— LRM 

5.4 

ASIS.Statements 

A.Parameter.Association, 

— LRM 

6.4 

ASIS.Statements 

A.Use.Clause, 

— LRM 

8.4 

ASIS_Compilation_Units 

A.Select.Statement.Arm, 

— LRM 

9.7 

ASIS.Statements 

A.Select.Alternative, 

— LRM 

9.7.1 

ASIS.Statements 

A.With.Clause, 

— LRM 

10.1.1 

ASIS_Compilation_Units 

An.Exception.Handler, 

— LRM 

11.2 

ASIS.Statements 

A.Representation.Clause, 

— LRM 

13.1 

ASIS.Repres entation.Claus e s 

A_Component.Clause, 

— LRM 

13.4 

ASIS_Representation_Clauses 


Hot.A.Major.Element); 


Page 57 








21 October 1991 


STARS-RC-251901 /003/00 




function Major.Element.Kind (Program.Element : in Element) 
return Major.Element.Kinds; 

— Returns the Major.Element.Kind of the element. 

— Returns lot.A.Maj or.Element for a Mil.Element. 

— All element kinds are appropriate. 

— Once the Major.Element_Kind of an element is determined, 

— further decomposition or analysis can be done by calling functions 

— in the ASIS package that deals vith a specific element kind. 


— MAJOR ELEMEITS 


type Parse.Control is (Continue, 
Abandon.Children, 

Abandon.Siblings, 

T erminat e.Immediat ely); 


generic 

with procedure Pre.Operation 
(Ada.Element : in ASIS.Ada.Program.Element; 

Control : in out Parse.Control) is <>; 


vith procedure Post.Operation 
(Ada.Element : in ASIS.Ada.Program.Element; 

Control : in out Parse.Control) is <>; 


procedure Parse.Major.Element 
(Ada.Element : in ASIS.Ada.Program.Element; 

Control : in out Parse.Control); 

— Parses the element and all its component elements. For each element, 

— the formal procedure Pre.Operation is called when first visiting the 

— element. All component elements are then visited and finally the formal 

— procedure Post.Operation is called vhen returning from visiting all 

— component elements. 

— Parsing can be controlled vith the Control parameter. 

— The Abandon.Children control prevents parsing of the current element’s 


Page 58 










21 October 1991 


STARS-RC-251901/003/00 


— child components, but picks up with the next sibling element. 

— The Abandon.Sifclings control abandons parsing of the remaining siblings 

— but continues parsing at the parent. 

— The Terminate.Immediately control does just that. 

— Abandon.Children in a Post.Operation is the same as Continue as all the 

— children have been parsed. 

— Abandon.Siblings in a Pre.Operation skips the associated 

— Post.Operation. 

— Raises Inappropriate_Program_Element 

— if Major_Element_Kind(Ada_Element) = lot.A.Major.Element 


— EHCLOSIIG MAJOR ELEMEITS 

function Enclosing.Major.Element (Program.Element : in Element) 
return Element; 

function Enclosing.Major.Element 

(Program.Element : in Element; Context : in Element) 
return Element; 

— Returns the Major Element that immediately encloses the given element. 

— Some elements know what their enclosing major element is regardless of 

— a given context. For other elements, the enclosing major element may 

— have to be determined by performing a search. The context parameter 

— provides the element that is searched and thus can be used to make this 

— operation more efficient. However, if the Program.Element is not a 

— component element of the Context element and the enclosing element 

— cannot be determined without a search, then a Hil.Element is returned. 

— A nil element is also returned if the element is the declaration part 

— of a compilation unit. (EG. The ASIS.Compilation.Units.Unit.Declaration 

— of the compilation unit). 

— Use ASIS_Compilation_Units.Enclosing_Compilation.Unit to get the 

— enclosing compilation unit for an element. 

— Raises Inappropriate.Program.Element if Is.Iil(Program.Element) 

— Examples: 

Given a type declaration in a declare block, returns the block 
statement element that encloses the type declaration. 


Page 59 






21 October 1991 


STARS- RC-251901 /003/00 


Given & statement within the sequence of statements of a loop 
statement, returns the enclosing loop stat ment. 

Given an Identifier.Reference as the selector in an expanded name, 
returns the Hame_Expression representing the prefix, the dot, and 
the selector. 


— PRAGMAS - LRM 2.8 

subtype Pragma_List is ASIS_Ada_Program.Element_List; 
function Pragmas (Context : in Element) return Pragma_List; 

— Returns the list of pragmas appearing within the given context. 

— A Bil_Element_List is returned if there are no pragmas. 

— Raises Inappropriate_Program_Element 

— if Major_Element.Kind(Context) = lot.A.Major.Element 


subtype Pragma.Element is ASIS_Ada_Program.Element; 

function Is_Predefined (A_Pragma : in Pragma_Element) return Boolean; 

— Returns True if the pragma is one of the predefined language pragmas. 

— See the LRM Appendix B. 

— Raises Inappropriate_Program_Element 

— if Majoi_Element_Kind(A_Pragma) /= A_Pragma 


function lame (A.Pragma : in Pragma.Element) return String; 

— Returns the identifier name of any pragma. 

— Raises Inappropriate_Program_Element 

— if Major_Element_Kind(A.Pragma) /= A_Pragma 


subtype Argument.Association.List is ASlS_Ada_Program.Element.List; 


Page 60 









21 October 1991 


STARS-RC-251901/003/00 


function Argument.Associations (A.Pragma : in Pragma.Element) 
return Argument.Association.List; 

— Returns a list of the argument associations of the pragma. 

— Raises Inappropriate_Program_Element 

— if Major_Element_Kind(A_Pragm') /= A_Pragma 

— Further Analysis: 

Pragma argument associations take the same form as actual parameter 
associations of a procedure call. 

The ASIS.Statements operation Formal.Parameter sill extract the 
argument identifier. 

The ASIS.Statements operation Actual.Parameter will extract the 
name or expression. 


— ELEMENT DESTRUCTOR 

procedure Dissociate (Program.Element: in out Element); 

— A Nil.Element value is returned. 

— Postconditions: (if no exception is raised) 

Depending on the ASIS implementation, storage for the element 
may be deallocated. 

Program.Element = Nil.Element 


procedure Dissociate 

(Program_Element_List : in out Element.List); 

— Severs associations made to the Element.List. 

— A Nil.Element.List value is returned. 

— Postconditions: (if no exception is raised) 

Depending on the ASIS implementation, storage for each Element 
may be deallocated. 


— ERROR INFORMATION 


Page 61 





21 October 1991 


STARS-RC-251901/003/00 


type ASIS_Element_Error_Kinds is (Hot_An_Error, TBD); 

— Additional Error Kind literals are yet TO BE DETERMIIED 


— Whenever an error condition is detected and the exception Failed 

— is raised, an ASIS_Element_Error_Kinds value is stored for the Element 

— involved in the failure. That value can be retrieved using the Status 

— function. The Diagnosis function will retrieve the ASIS.String 

— diagnostic message for the Element.Error.Kinds value. 

— Error information is only kept when the catch-all exception Failed 

— is raised. 

— Vote that Status and Diagnosis values are vendor dependent and will 

— vary among ASIS implementations. 


function Status (Program_Element : in Element) 
return ASIS_Element_Error_Kinds; 

— Returns the ASIS_Element_Unit_Error_Kinds value associated with 

— the element. 

— Returns Iot_An_Error if the element has no error kind associated 

— with it, or if Is_lil(Program_Element) 

— EG. It has not been involved in a failed operation. 


function Diagnosis (Program.Element : in Element) 
return ASIS_Ada_Program.ASIS_String; 

— Returns an ASIS_String value containing implementation defined error 

— information associated with the element. 


procedure Dissociate_Element_Error_Information; 

— Removes the association of status and diagnosis error information with 

— all Element handles that have been involved in a failed operation. 

— This operation does not affect Element handles in any other way. 


Page 62 








21 October 1991 


STARS-RC-251901 /003/00 


— DEBUGGIHG 

function Debug.Image (Program.Element : in Element) 
return ASIS.Ada.Program.ASIS.String; 

— Returns an ASIS.String value containing implementation defined debug 

— information associated with the element. 


end ASIS.Elements; 


— ASIS PRELIMIIARY REVIEW VERSIQI 0.4 

— Sept 27, 1991 


with ASIS_Ada_Program; 
package ASIS.Declarations is 

-- LRM Chapters 3, 6, 7, 8, 9, 11, 12 

subtype Element is ASIS_Ada_Program.Element; 

— Use ASIS.Elements operations. 

subtype Declaration is ASIS_Ada_Program.Declaration; 

— Use ASIS.Declarations operations. 

subtype Expression is ASIS.Ada.Program.Expression; 

— Use ASIS_lames_And_Expre8sion operations. 

subtype lame.Expression is ASIS.Ada.Program.Kame.Expression; 
— Use ASIS.Iames.And.Expression operations. 

subtype Statement is ASIS.Ada.Program.Statement; 

— Use ASIS.Statements operations. 

subtype Type.Definition is ASIS.Ada.Program.Type.Definition; 


Page 63 









21 October 1991 


STARS-RC-251901/003/00 


— Use ASIS.Type.Definitions operations. 

subtype Task.Specification is Type.Definition; 

— Use operations in this package and in ASIS.Type.Definitions. 


subtype Library is ASIS.Ada.Program.Library; 


— DECLARATIOI KIIDS 


type Declaration.Kinds is 

— Declaration.Kinds include all declarations and specifications that 

— declare named entities. 

Declarations vith identifier lists can 
declare one or more identifiers: 

(A_Variable_Declaration, 

A.Component.Declaration, 

A.Constant.Declaration, 

A.Def erred.Constant.Declaration, 

A.Generic.Formal.Object.Declaration, 

A.Discriminant.Specification, 

A.Parameter.Specification, 

An.Integer.Iumber.Declaration, 

A.Real.Iumber.Declaration, 

An.Exception.Declaration, 


Declarations with a single identifier or designator: 

An.Enumeration.Literal.Specification, 

A.Loop.Parameter.Specification, 


A.Full.Type.Declaration, 

An.Incomplete.Type.Declaration 


Page 64 







21 October 1991 


STARS-RC-251901/003/00 


A.Private.Type.Declaration, 

A.Subtype.Declaration, 

A.Package.Declaration, 
A.Package.Body.Declaration, 

A.Procedure.Declaration, 

A.Procedure.Body.Declaration, 

A.Function.Declaration, 

A_Function_Body.Declaration, 

An_Object.Rename.Declaration, 
An.Exception.Rename.Declaration, 
A.Package.Rename.Declaration, 
A.Procedure.Rename.Declaration, 

A.Function_Rename.De claxation, 

A.Generic.Package.Declaration, 
A.Generic.Procedure.Declaration, 

A.Generic.Function.Declaration, 

A.Package.Instantiation, 
A.Procedure.Instantiation, 

A.Function.Instantiation, 

A.Task.Declaration, 

A.Task.Body.Declaration, 
A.Taak.Type.Declaration, 

An.Entry.Declaration, 

A.Procedure.Body.Stub, 

A.Function.Body.Stub, 

A_Package.Body.Stub, 

A.Task.Body.Stub, 

A.Generic.Formal.Type.Declaration, 
A.Generic.Formal.Private.Type.Declaration, 
A.Generic.Formal.Procedure.Declaration, 
A.Generic.Formal.Function.Declaration, 

Mot.A.Declaration); 


Page 65 








21 October 1991 


STARS-RC-251901 /003/00 


function Kind (A.Declaration : in Declaration) return Dec3 ■\ration_Kinds; 

— Returns the kind of the given declaration. 

— Returns Vot_A_Declaration for any inappropriate element such as 

— a Statement, Expression, or lil.Element. 


— IDEITIFIER 2.3 

-- IDEITIFIER LIST 3.2 

II A COMPOIEIT DECLARATIOV 3.7 

II A DEFERRED COISTAIT DECLARATION 7.4 

II A DISCRIMINANT SPECIFICATIQI 3.7.1 

— II A GENERIC PARAMETER DECLARATION FOR GElERIC FORMAL OBJECTS 3.7.1 

— II A1 OBJECT DECLARATION 3.2 
II A NUMBER DECLARATIOI 3.2 

II A PARAMETER SPECIFICATIQI 6.1 


subtype Identifier.Definition.List is ASIS_Ada_Program.Element_List; 

function Identifiers (A.Declaration : in Declaration) 
return Identifier.Definition.List; 


— Returns a list of each Identifier.Definition defined by the declaration. 

— For declarations that define a single identifier, the list returned 

— always has a length of one. 

— Examples: 

type Foo is new Integer; 

- Returns a list containing one Identifier.Definition Foo. 


One, 


Uno : constant Foo : = 1; 

- Returns a list of two Identifier.Definitions One and Uno. 


— Results of this operation may vary across ASIS implementations. 

— Some implementations normalize all multiple object declarations into 

— an equivalent sequence of corresponding single object declarations. 

— See LRM 3.2(10). If this is the case, then this operation sill 

— return a list containing a single identifier. 


— Raises Inappropriate.Program.Element 


Page 66 






21 October 1991 


STARS-RC-251901 /003/00 


— if Kind(A.Declaration) - lot.A.Declaration 


— OBJECT DECLAKATIOIS - LRM 3.2.1 

function Is.Initialized (Object.Declaration : in Declaration) 
return Boolean; 

— Returns True if the declaration has an explicit initialization. 

— Appropriate Declaration Kinds: 

A_Variable.Declaration, 

A_Component.Declaration, 

A_Constant_Declaration, 

A.Discriainant.Specification, 

A.Paraaeter.Specification, 

An.Integer.luaber.Declaration, 

A.Real.Iuaber_De claration, 

A.Generic.Foraal.Object.Declaration 


function Initial.Value (Object.Declaration : in Declaration) 
return Expression; 

— If Is.Initializud(Object.Decl) then 

Returns the expression that initializes the declaration. 

— else returns lil.Eleaent. 

— Appropriate Declaration Kinds: 

All kinds appropriate for Is.Initialized. 


function Is.Variable (Object.Declaration : in Declaration) return Boolean; 
function Is.Constant (Object.Declaration : in Declaration) return Boolean; 

— Variable, discriminant, and component declarations are always variables. 

— Constants and deferred constants are always constant. 

— A renaaed object is a constant if the renaaed entity is a constant. 

— A loop parameter specification is always a constant during each 

iteration of the loop. 

— A number declaration is always a constant. 

— A subprogram formal parameter or a generic formal object is constant 

if it is mode in. 


Page 67 







21 October 1991 


STARS-RC-251901 /003/00 


— Appropriate Declaration Kinds: 
A.Variable.Declaration, 
A.Discriiinant.Specification, 
A.Component.Declaration, 

A.Constant.Declaration, 
A.Deferred.Constant.Declaration, 
An.Object.Rename.Declaration, 

An.Integer.lunber.Declaration, 
A.Real.Iuaber.Declaration, 

A.Parameter.Specification, 
A.Generic.Fonaal.Obj ect.Declaration 


function Object.Declaration.Definition (Object.Declaration : in Declaration) 
return Type.Definition; 

— Returns the subtype indication or the constrained array definition 

— following the colon in the object declaration. 

— Appropriate Declaration Kinds: 

A.Variable.Declaration, 

A.Conponent.Declaration, 

A.Constant.Declaration, 


function Corresponding_Constant.Declaration 
(Constant.Declaration : in Declaration) 
return Declaration; 

— Returns the corresponding full constant declaration when given 

— a deferred constant declaration, or; 

— Returns the corresponding deferred constant declaration when given 

— a full constant declaration. 

— A lil.Eleaent is returned when a full constant declaration that has no 

— corresponding deferred constant declaration is given. 

— Appropriate Declaration Kinds: 

A.Constant.Declaration, 

A.Deferred.Constant.Declaration, 


— TYPE DECLARATIONS - LRM 3.3 


Page 68 






21 October 1991 


STARS-RC-251901/003/00 


function I*_Type_Declaration (A.Declaration : in Declaration) 
return Boolean; 

— Returns True for declarations that are type or subtype declarations. 

— Raises Inappropriate.Program.Element 

— if Kind(A.Declaration) = Iot_A_Declaration 


function Is_Private (Type_Declaration : in Declaration) return Boolean; 

— Returns True if the type declaration is: 

A_Private_Type_Declaration, 

A.Generic_Formal_Private_Type_Declaration, 

A_Full_Type_Declaration of a type derived fro* a private type, 

— A_Full_Type_Declaration of a composite type vith subcomponents 

of a private type. 

— Raises Inappropriate_Program_£lement 

— if not Is_Type_Declaration(Type_Declaration) 


function Is.Limited (Type_Declaration : in Declaration) return Boolean; 

— Returns True if the type declaration is: 

A_Full_Type_Declaration of a type derived from a limited type, 
A_Full_Type_Dedaration of a composite type with subcomponents 
of a limited type, 

A_Taak_Type_Declaration, 

A_Private_Type_Declaration that includes the reserved word limited, 
A_Generic_Formal_Private_Type.Declaration, that includes the 
reserved word limited. 

— Raises Inappropriate_Program_Element 

— if not Is_Type_Declaration(Type_Declaration) 


function Is.Discriminated (Type.Declaration : in Declaration) 
return Boolean; 

— Returns True if the type declaration has discriminants. 

— Raises Inappropriate.Program.Element 

— if not Is_Type_Declaration(Type_Declaration) 


Page 69 







21 October 1991 


STARS-RC-251901 /003/00 


subtype Discriminant_Specification_List is ASIS_Ada_Program.Element_List; 

function Discriminants (Type_Declaration : in Declaration) 
return Discriminant.Specification.List; 

— Returns a list of discriminant specifications in their order of 

— appearance. 

— Results of this operation may vary across ASIS implementations. 

— Some implementations normalize all multiple discriminant specifications 

— into an equivalent sequence of corresponding single discriminant 

— specifications. See LRM 3.7.1(4). 

— Further Analysis: 

Use Identifiers to obtain the identifier list. 

Use Type.Nark to obtain the parameter type mark. 

Use Is.Initialized and Initial_Value to query the information 
related to the presence of the default parameter initialization. 

— Appropriate Declaration Kinds: 

A_Full_Type_Declaration 

An_Incomplete_Type_Declaration 

A_Private_Type_Declaration 

A_Generic_Formal_Private_Type_Declaration 


function Type_Declaration_Definition (Type.Declaration : in Declaration) 
return Type_Definition; 

— Returns the type definition following the reserved word is in the 

— typ« or subtype declaration. 

— Returns a Iil_Element if given An_Incomplete_Type_Declaration. 

— Appropriate Declaration Kinds: 

A.Subtype.Declaration 

A_Full_Type_Declaration 

An_Incomplete_Type_Declaration 

A_Private_Type_Dedaration 

A_Task_Type_Declaration 

A_Generic_Formal_Type_Declaration 

A_Generic_Fomal_Private_Type_Declarat ion, 


Page 70 









21 October 1991 


STARS-RC-251901/003/00 


function Corresponding_Type_Declaration 

( Type_Declaration : in Declaration) return Declaration; 

function Corresponding_Type_Declaration 
( Type.Declaration : in Declaration; 

Program_Library : in Library) 
return Declaration; 

— Returns the corresponding full type declaration when given a private 

— or incomplete type declaration, or; 

— Returns the corresponding private or incomplete type declaration when 

— given a full type declaration. 

— A lil.Element is returned uhen a full type declaration that has no 

— corresponding private or incomplete type declaration is given. 

— A Xil.Element is returned when a corresponding type declaration 

— does not exist within the given context. 

— The Library parameter is necessary whenever the corresponding full 

— type of an incomplete type is in a corresponding package body. 

-- See LRK 3.8.1(3). 

— Appropriate Declaration Kinds: 

A_Full_Type_Dedaration 

An_Incomplete_Type_Declaration 

A_Private_Type_Declaration 

A_Task_Type_Declaration 


-- ESUMERATIOS LITERALS - LRM 3.5.1 

— Use ASIS_Type_Definitions.Enumeration_Literals to analyze the list of 

— enumeration literals in the type definition part of an enumeration type 

— declaration. 

function Is_Character_Literal 

(Enumeration.Literal.Specification : in Declaration) 
return Boolean; 

— Returns True if the enumeration literal is a character literal. 

— Appropriate Declaration Kinds: 


Page 71 






21 October 1991 


STARS-RC-251901/003/00 


An_Enumeration_Literal_Specification 


— PROGRAM UIIT DECLARATIOIS 

— LRM Chapters 6, 7, 9 

— Program units are package, subprogram, and task specifications 

— and bodies. 


function Is.Spec (A.Declaration : in Declaration) return Boolean; 

— Determines whether a package, procedure, function, or task is a 

— specification. 

— Returns True if the declaration is: 

A_Package_Declaration, 

A_Procedure_Declaration, 

A_Function.Declaration, 

A_Package_Rename_Declaration, 

A_Procedure_Rename_Declaration, 

A_Function_Rename_Declaration, 

A_Generic_Package_Declaration, 
A_Generic_Procedure_Dedaration, 
A_Generic_Function_Declaration, 

A_Package_Instantiation, 

A_Procedure_Instantiation, 

A.Function_Instantiation, 

A.Task.Declaration, 

A_Task_Type_Declaration, 

An_Entry.Declaration, 

A_Generic_Formal_Procedure_Declaration 
A_Generic_Formal_Fur ction.Declaration 

— Raises Inappropriate_Program_Element 

— if Kind(A.Declaration) = Iot_A_Declaration 


function Is.Package (A.Dedaration : in Declaration) return Boolean; 

— Returns True if the declaration is: 

A_Package_Declaration, 

A_Package_Body_Declaration, 

A_Package_Rename_Declaration, 


Page 72 








21 October 1991 


STARS-RC-251901/003/00 


A_Generic_Package_Declaration, 
A_Package_Instantiation, 
A_Package_Body_Stub, 

— Raises Inappropriate_Prograa_Element 

— if Kind(A_Declaration) = Sot_A_Declaration 


function Is.Task (A.Declaration : in Declaration) retnm Boolean; 

— Returns True if the declaration is: 

A_Task_Body_Stub, 

A_Task_Declaration, 

A_Task_BodyJDeclaration, 

A_Task_Type_Declaration, 

— Raises Inappropriate_Program_Element 

— if Kind(A_Declaration) = lot.A.Dedaration 


function Is_Procedure (A.Declaration : in Declaration) return Boolean; 

— Returns True if the declaration is: 

A_Procedure_Declaration, 

A_Procedure_Body_Declaration, 

A_Procedure_Rename_Declaration, 

A_Generic_Procedure_Declaration, 

A_Procedure_Instantiation, 

A_Procedure_Body_Stub, 

A_Generic_For*al_Procedure_Declaration 

— Raises Inappropriate_Program_Element 

— if Kind(A_Declaration) = Iot_A_Declaration 


function IsJFunction (A.Declaration : in Declaration) return Boolean; 

— Returns True if the declaration is: 

A_Function_Declar«tion, 

A_Function_Body..Declaration, 

A_Function_Rename_Declaration, 

A_Generic_Function_Declaration, 

A.Function.Instantiation, 

A_Function_Body_Stub, 

A_Generic_Foraal_Function_Declaration 


Page 73 






21 October 1991 


STARS-RC-251901 /003/00 


— Rais63 Inappropriate_Program_Element 

— if Kind(A_Declaration; = Iot_A_Declaration 


function Is.Subprogram (A.Declaration : in Declaration) return Boolean; 

— Determines if a declaration is a subprogram declaration regardless 

— if it is generic, an instantiation, rename, spec or body. 

— Raises Inappropriate_Program_Element 

— if Kind(A_Declaration) * Iot_A_Declaration 


function Unit.Specification (Program_Unit_Declaration : in Declaration) 
return Declaration; 

— Returns tbe corresponding specification of a program unit declaration. 

— If a specification declaration is given, the same element is returned. 

— If no explicit specification exists, or the declaration is the proper 

— body of a subunit, a nil element is returned. 

— If a generic instantiation is given, the same element is returned. 

— Appropriate Declaration Kinds returning a specification; 

A_Package_Body_Declaration, 

A_Procedure_Body.De'"' aration, 

A_Function_Body.Declaration, 

A.Task.Body.Declaration, 

A_Procedure_Body_Stub, 

A_Function_Body_Stub, 

A.Package.Body.Stub, 

A.Task.Body.Stub, 

— Appropriate Declaration Kinds returning the same element; 

Package.Declaration, 

A_Procedure_Declaration, 

A_Function_Declaration, 

A.Package.Rename.Declaration, 

A_Procedure_Rename_Declaration, 

A_Function_Rename.Declaration, 

A.Generic.Package.Declaration, 

A_Generic_Procedure_Declaration, 

A.Generic.Function.Declaration, 


Page 74 




21 October 1991 


STARS-RC-251901 /003/00 


A.Package.Instantiation, 
A.Procedure.Instantiation, 
A.Function.Instantiation, 
A_TaBk_Declaxation, 
A.Task.Type.Declaration, 


function Unit_Body (Program.Unit.Declaration : in Declaration) 
return Declaration; 

function Unit_Body (Program_Unit_Declaration : in Declaration; 

Program.Library : in Library) 

return Declaration; 

— Returns the corresponding body for a given program unit declaration. 

— If a body declaration is given, the same element is returned. 

— If no body exists, a nil element is returned. 

— If a generic instantiation is given, the same element is returned. 

— The Library parameter is necessary whenever the unit body is located 

— in a different compilation unit than the declaration of the 

— specification. 

— Appropriate Declaration Kinds returning a body: 

Package.Declaration, 

A_Procedure_Declaration, 

A_Function_Declaration, 

A_Generic_Package_Declaration, 

A_Generic_Procedure_Declaration, 

A_Generic_Function_Declaration, 

A.Task.Declaration, 

A_Task_Type_Declaration, 

— Appropriate Declaration Kinds returning the same element: 

A_Package_Body ..Declaration, 

A_Procedure_Body.Declaration, 

A.Function_Body_Declaration, 

A_Package_Rename.Declaration, 

A.Procedure.Rename.Declaration, 

A.Function.Rename.Declaration, 

A.Package.Instantiation, 

A.Procedure.Instantiation, 


Page 75 




21 October 1991 


STARS-RC-251901/003/00 


A.Function.Instantiation, 
A.'iask.Body .Declaration, 
A.Procedure.Body.Stub, 
A.Function.Body.Stub, 
A.Package.Body.Stub, 
A.Task.Body_Stub, 


— SUBPROGRAMS 

— LRM Chapter 6 

— PARAMETER.SPECIFICATIOI - LRM 6.1 


subtle Parameter.Specification is Declaration; 

type Parameter.Kinds is 

(A.Default.In.Parameter, 

An.In.Parameter, 

An.Out.Parameter, 

An_In.Out.Parameter, 

Hot.A.Parameter); 

function Parameter_Kind (Parameter : in «wameter_Specification) 
return Parameter.Kinds; 

— Returns the kind of the given parameter specification. 

— This operation also returns the mode for generic formal object 

— declarations. 

— Returns lot.A.Parameter for any inappropriate element such as 

— a Statement, Expression, or lil.Element. 

— Results of this operation may vary across ASIS implementations. 

— Some implementations sill not differentiate betveen An.In.Parameter 

— and A.Default.In.Parameter. 


subtype Parameter.Specification.List is ASIS. Ada.Program.Element.List; 

function Parameters (Subprogram.Or.Entry : in Declaration) 
return Parameter.Specification.List; 


Page 76 







21 October 1991 


STARS-RC-251901/003/00 


— Returns a list of parameter specifications in the formal part 

— of the subprogram or entry declaration in the order of appearance. 

— A lil.Element.List is returned if the subprogram or entry has no 

— parameters. 

— Results of this operation may vary across ISIS implementations. 

— Some implementations normalize all multiple parameter specifications into 

— an equivalent sequence of corresponding single parameter specifications. 

— See LRM 6.1(4). 

— Further Analysis: 

Use Identifiers to obtain the identifier list. 

Use Type_Mark to obtain the parameter type mark. 

Use Is.Initialized and Initial.Value to query the information 
related to the presence of the default parameter initialization. 

— Appropriate Declaration Kinds: 

Any declaration for which Is_Subprogram returns True, or 
An_Entry_Declaration, 


function Retum_Type (Function.Declaration : in Declaration) 
return lame.Expression; 

— Returns the lame.Expression of the return type. 

— Appropriate Declaration Kinds: 

Any declaration for which Is_Function returns True 


function Is.Operator.Definition (Function.Declaration : in Declaration) 
return Boolean; 

— Returns True if the function designator is an operator symbol. 

— Appropriate Declaration Kinds: 

Any declaration for which Is.Function returns True 


function Subprogram.Body.Block (Subprogram.Body : in Declaration) 
return Statement; 

— Returns the block statement for the body including the declarative 


Page 77 








21 October 1991 


STARS-RC-251901 /003/00 


— part, sequence of statements, and exception handlers, if any. 

— i lil.Element is returned if the body is a body stub. 

— Appropriate Declaration Kinds: 

A.Procedure.Body.Declaration, 

A_Function_Body.Declaration, 

A_Procedure_Instantiation, 

A_Function_Instantiation, 

A_Procedure_Body_Stub, 

A_Function_Body_Stub, 


— TYPE.MARK 

II A PARAMETER SPECIFICATIOI 6.1 

II A DEFERRED COISTAIT DECLARATION 7.4 

II A REIANIIG.DECLARATIOI 8.6 

II A DISCRIMIIAIT SPECIFICATIOI 3.7.1 

II A GEIERIC PARAMETER DECLARATIOI 12.1 


function Type.Mark (A.Declaration : in Declaration) 
return lame.Expression; 

— Returns the type mark associated with the declaration. 

— Appropriate Declaration Kinds: 

A.Parameter.Specification 
A.Deferred.Constant.Declaration 
A.Discriminant.Specification 
An.Object.Rename.Declaration 
A.Generic.Formal.Obj ect.Declaration 


— PACKAGES 

— LJ Chapter 7 


function Is.Visible (A.Declaration : in Declaration) return Boolean; 

— Returns True for units that are library level package or subprogram 

— specs, and for visible declarative items inside library level package 

— specs. 


Page 78 










21 October 1991 


STARS-RC-251901 /003/00 


— Raises Inappropriate.Program.Element 

— if Kind(A.Declaration) = Iot_A_Declaration 


function Is_Library_Unit_Declaration (A.Declaration : in Declaration) 
return Boolean; 

— Returns True for declarations that are library units and 

— for declarations of secondary units that are interpreted as 

— library units. LRM 10.1(6). 

— Raises Inappropriate.Program.Element 

— if Kind(A_Declaration) = Iot_A_Declaration 


function ls_In_Visible_Part (A.Declaration : in Declaration) return Boolean; 

— Returns true if the declaration is a declarative item in the visible 

— part of a library package. 

— Raises Inappropriate_Program_Element 

— if Kind(A_Declaration) = lot.A.Declaration 


function Is_In_Private_Part (A_Declaration : in Declaration) return Boolean; 

— Returns true if the declaration is a declarative item in the private 

— part of a library package. 

— Raises Inappropriate.Program.Element 

— if Kind(A_Declaration) = Iot_A_Declaration 


subtype Dedarative_Item_List is ASIS_Ada_Program.Element_List; 

function Visible.Part.Declarative.Items 
(Package.Specification : in Declaration) 
return Declarative.Item.List; 

— Returns a list of all basic declarations, representation specifications, 

— and use clauses in the visible part of a package in the order of 

— appearance. 

— Results of this operation may vary across ASIS implementations. 

— Some implementations normalize all multiple object declarations into 


Page 79 









21 October 1991 


STARS-RC-251901/003/00 


— an equivalent sequence of corresponding single object declarations. 

— See LRM 3.2(10). 

— Appropriate Declaration Kinds: 

A.Package.Declaration, 

A_Generic_Package_Declaration, 

A_Package_Instantiation, 


function Private_Part_Declarative_Items 

(Package_Specification : in Declaration) 
return Declarative_Iten_List; 

— Returns a list of all basic declarations, representation specifications, 

— and use clauses in the private part of a package in the order of 

— appearance. 

— Results of this operation nay vary across AS1S implementations. 

— Some implementations normalize all multiple object declarations into 

— an equivalent sequence of corresponding single object declarations. 

-- See LRM 3.2(10). 

— Appropriate Declaration Kinds: 

A_Package_Declaration, 

A_Generic_Package_Declaration, 

A_Package_Instantiation, 


function Package_Body_Block (Package.Body : in Declaration) 
return Statement; 

— Returns the block statement for the body including the declarative 

— part, sequence of statements, and exception handlers, if any. 

— A lil.Element is returned if the body is a body stub, or 

— if the body of a package instantiation does not exist. 

— Appropriate Declaration Kinds: 

A_Package_Body_Dedaration, 

A_Package_Instantiation, 

A_Package_Body_Stub, 


— REIAHIIG DECLARATIONS 


Page 80 









21 October 1991 


STARS-RC-251901 /003/00 


— LRM Section 8.5 


function Is_Renaming_Declaration (A_Declaration : in Declaration) 
return Boolean; 

— Returns True for declarations that are one of the forms of renaming 

— declarations. 

— Raises lnappropriate_Program_Element 

— if Kind(A_Declaration) = Iot_A_Declaration 


function Renamed.Entity (Renaming.Declaration : in Declaration) 
return Hame_£xpression; 

— Returns the lame.expression that follows the reserved word renames 

— in the Renaming_Declaration. 

— Raises Inappropriate_Program_Element 

— if not Is_Renaming_Declaration(Renaming_Declaration) 


function Renamed_Base_Entity (Renaming.Declaration : in Declaration) 
return lame.Expression; 

— Unwinds recursive renamings to return the lame.expression that is 

— not itself a renamed entity. 

— Raises Inappropriate_Program_Element 

— if not Is_Renaming_Declaration(Renamiug_Declaration) 


— TASK DECLARATION 

— LRM Chapter 9 


function Task_Declaration_Declarative_Items 
(Task.Declaration : in Declaration) 
return Dcclarative_Item_List; 

— Returns a list of entry declarations, and representation clauses 

— in the task declaration in order of appearance. 


Page 81 










21 October 1991 


STARS-RC-251901 /003/00 


— Further Analysis: 

Use ASIS.Declarations operations lor subprogram declarations to 
decompose task entries. 

Use ASIS.Representation.Clauses operations to analyze representation 
clauses that apply to the entries. 

— Appropriate Declaration Kinds: 

A.Task.Declaration 
A_Task_Type.Declaration 

— Task type declarations can also be analyzed by getting the type.delinition 

— part and then calling ASIS.Type.Delinitions.Task.Type.Declarative.Items. 


function Task_Body_Block (Task.Body : in Declaration) return Statement; 

— Returns the block statement lor the body including the declarative part, 

— any elaboration statements, and exception handler il any. 

— A lil.Element is returned il the body is a body stub. 

— Appropriate Declaration Kinds: 

A_Task_Body.Declaration, 

A_Task_Body_Stub, 


— EHTRY DECLARATION 

— LRM Section 9.5 


subtype Entry_Declaration_List is ASIS_Ada_Program.Element_List; 

function Entry.Declarations (Task.Declaration : in Declaration) 
return Entry.Declaration.List; 

— Returns a list ol entry declarations associated with a task declaration. 

— The operations available lor decomposing subprogram specilications 

— will also srork lor entry declarations. 

— Appropriate Declaration Kinds: 

A.Task.Declaration, 

A.Task.Type.Declaration, 


Page 82 










21 October 1991 


STARS-RC-251901/003/00 


subtype Discrete.Range is ASIS_Ada_Program.Element; 

— Use ASIS.Type.Definitions operations to analyze discrete ranges. 

function Family.Index (Entry.Family : in Declaration) 
return Discrete.Range; 

— Returns the index discrete range for the entry family. 

— If the entry is not a family, a nil element is returned. 

— Appropriate Declaration Kinds: 

An.Entry.Declaration 


— SUBUIITS AID BODY STUBS - LRM 10.2 

— Use ASIS.CONPILATIOI.UITIS operations to examine subunits as 

— compilation units. 


function Is.Subunit (A.Declaration : in Declaration) return Boolean; 

— Returns True if the declaration is the declaration part of a subunit. 

— Raises Inappropriate.Program.Element 

— if Kind(A.Declaration) = lot.A.Declaration 


function Subunit (Body.Stub : in Declaration) 

return Declaration; 

function Subunit (Body.Stub : in Declaration; 

Program.Library : in Library) 

return Declaration; 

— Returns the Subunit Declaration corresponding to the body stub. 

— A lil.Element is returned if the subunit does not exist. 

— Appropriate Declaration Kinds: 

Any declaration for vhich Is_Body_Stub(Body_Stub) = True. 


Page 83 











21 October 1991 


STARS-RC-251901 /003/00 


function Is_Body_Stub (A.Declaration : in Declaration) return Boolean; 

— Returns true if the Declaration is: 

A_Package_Body_Stub, 

A_Function_Body_Stub, 

A_Procedure_Body_Stub, 

A_Task_Body_Stub, 

— Raises Inappropriate_Program_Eleaent 

— if Kind(A_Declaration) = Iot_A_Declaration 


function Body.Stub (Subunit : in Declaration) return Declaration; 

— Returns the body stub declaration in the subunit’s parent unit 

— A Nil.Eleaent is returned if not the body stub does not exist. 

— Appropriate Declaration Kinds: 

Any declaration for which Is_Subunit(Subunit) = True. 


— EXCEPTIO* DECLARATIONS 

— LRM Chapter 11 

— Use Identifiers to get a list of identifier definitions introduced 

— by an exception declaration. 


— GENERIC PACKAGE and SUBPROGRAM SPECIFICATIONS 

— LRM Chapter 12 


function Is.Generic (Package_Or_Subprogram_Declaration : in Declaration) 
return Boolean; 

— Determines if the declaration is a generic specification or body. 

— Returns True if the declaration returned by a call to 

— Specification(Package_Or_Subprogran_Decl) is: 

A_Generic_Package_Declaration, 

A_Generic_Proeedure_Declaration, 


Page 84 








21 October 1991 


STARS-RC-251901 /003/00 


A.Generic.Function.Declaration, 

— Appropriata Declaration Kinds: 

— Any declaration lor which Is.Subprogram returns True 
Any declaration lor which Is.Package returns True 


subtype Generic.Formal.Parameter is Declaration; 

subtype Generic.Formal.Parameter.List is ASIS.Ada.Program.Element.List; 


function Generic.Formal.Parameters (Generic.Declaration : in Declaration) 
return Generic_Formal.Parameter.List; 

— Returns a list ol generic formal parameter declarations in order of 

— appearance. 

— Results ol this operation may wary across ASIS implementations. 

— Some implementations normalize all multiple object declarations into 

— an equivalent sequence ol corresponding single object declarations. 

-- See LRM 3.2(10). 

— Further Analysis: 

Object parameters can be decomposed with formal parameter 
and object declaration operations. 

The mode ol a generic lormal object can be determined using the 
Parameter.Kind operation. 

Array and access type declarations can be decomposed with the 
operations corresponding to their types. 

Subprogram parameters can be queried by the lollowing operations and 
can be lurther decomposed with subprogram declaration operations. 

— Appropriate Declaration Kinds: 

A.Generic.Package.Declaration, 

A.Generic.Procedure.Declaration, 

A_Generic_Function_Declaration, 


function Is.Generic.Formal (Program.Element : in Element) return Boolean; 

— Returns true il a subprogram, type or object declaration is a generic 

— lormal parameter. 

— Raises Inappropriate.Program.Element il the element is a lil.Element. 


Page 85 










21 October 1991 


STARS-RC-251901 /003/00 


type Generic.Formal.Subprogram.Default.Kinds is 

(A.Box, 

A.Iame, 
lone, 

Iot_A_Generic_Formal_Subprogram_Default); 

function Generic.Formal.Subprogram.Default.Kind 

(A.Generic.Formal.Subprogram : in Generic.Formal.Parameter) 
return Generic.Formal.Subprogram.Default.Kinds; 

— Returns the kind of the given generic formal subprogram default. 

— Returns Iot_A_Generic_Formal_Subprogram_Default for any inappropriate 

— element such as a Statement, Expression, or Kil.Element. 


function Generic.Formal.Subprogram.Default 

(A.Generic.Formal.Subprogram : in Generic.Formal.Parameter) 
return lame.Expression; 

— Returns the name appearing after the reserved word is in the given 

— generic formal subprogram declaration. 

— Raises Inappropriate.Program.Element if 

— Generic_Formal_Subprogram_Default_Kind(A_Generic_Formal_Subprogram) 

— /= A.Iame 


— GEIERIC IISTAITIATIOI 

— LRM Section 12.3 

— Instantiations can be analyzed in terms of the generic actual parameters 

— supplied with the instantiation. An instance is a copy of the generic 

— unit, and while there is no explicit specification in the program text, 

— an implicit specification and body, if there is one, with the generic 

— actual parameters is implied. 

— To analyze the template specification or body of a generic instantiation: 

Use Generic.Unit.Iame to obtain the name of the generic unit. 

Then use ASIS.Iames.And.Expressions.Iamed_Declaration to get to the 
generic declaration. 

Then use Unit.Body to get to the body of the generic declaration. 


Page 86 









21 October 1991 


STARS-RC-251901/003/00 


function Is.Generic.Instantiation 

(Package.Or.Subprogram.Declaration : in Declaration) 
return Boolean; 

— Returns True if the declaration is: 

A.Package.Instantiation, 

A.Procedure.Instantiation, 

A_Function_Instantiation, 

— Raises Inappropriate.Program.Element 

— if Kind(Package_Or_Subprogram_Declaration) = Iot_A_Dedaration 


function Generic.Unit.Hame (Generic_Instantiation : in Declaration) 
return Vame.Expression; 

— Returns the name expression following the reserved word new in the 

— generic instantiation. The name denotes the generic package, generic 

— procedure, or generic function that is the template for the instance. 

— Appropriate Declaration Kinds: 

A.Package.Instantiation, 

A_Procedure_Instantiation, 

A_Function_Instantiation, 


subtype Generic.Association.List is ASIS_Ada_Program.Element.List; 

function Generic.Associations 

(Generic.Instantiation : in Declaration; 

Include.Defaults : in Boolean : = False) 

return Generic.Association.List; 

— Returns an ordered list of generic associations from the generic 

— actual part of an instantiation. 

— If Include.Defaults is True: 

The (unspecified) default associations sill also be included and, 
the list sill be ordered to match the declaration order of the 
corresponding generic formal parameters. 

— If Include.Defaults is False: 


Page 87 








21 October 1991 


STARS-RC-251901 /003/00 


Only explicit actual parameters sill be included in the order they 
appeared in the program text. 

— An ASIS implementation may choose to always "Include Defaults" its 

— internal representation. If that is the case, the operation will 

— always behave as if Include.Defaults is True. 

— Appropriate Declaration Kinds: 

A.Package.Instantiation, 

A.Procedure.Instantiation, 

A_Function_Instantiation, 

— To map generic actual parameters to corresponding generic formal 

— parameters: 

Create an actual parameter list by applying the function 
ASIS.Statements.Actual_Parameter to each generic association 
returned by Generic.Actual.Parameters with Include.Defaults = True. 

Create a formal parameter list by applying the function 
ASIS.Declarations.Identifiers to -ach formal parameter 
declaration returned by Generic.Formal.Parameters. 

The Expression elements in the actual parameters list will have a 
one to one correspondence with the Identifier.Definition elements 
in the formal parameter list. 


function Generic.Associations.Include.Defaults return Boolean; 

— Returns True if this implementation will always "Include Defaults". 

— If that is the case, the Generic.Associations operation will always 

— behave as if its parameter Include.Defaults is True. 


end ASIS.Dedarations; 


Page 88 






21 October 1991 


STARS-RC-251901 /003/00 


— ASIS PRELIMIIARY REVIEW VERSIOB 0.4 

— Sept 27, 1991 


with ASIS_Ada_Prograa; 
package ASIS_Type_Delinitions is 

— LRM Chapter 3 

subtype Element is ASIS_Ada_Program.Element; 

— Use ASIS_Elements operations. 

subtype Type_Definition ia ASIS_Ada_Program.Type_Definition; 

— Use ASIS_Type_Definitions operations. 

subtype Declaration is ASIS_Ada_Program.Declaration; 

— Use ASIS_Declarations operations. 

subtype Expression is ASIS_Ada_Program.Expression; 

— Use ASIS_Iames_And_Expression operations. 

subtype Iame_Expression is ASIS_Ada_Program.Iame_Expression; 

— Use ASIS_Iames_And_Expression operations. 

subtype Statement is ASIS_Ada_Program.Statement; 

— Use ASIS_Statements operations. 

subtype Identifier_Ref erence is ASIS_Ada_Program.Identifier_Reference; 
— Use ASIS_Iames_And_Expression operations. 

subtype Subtype.Indication is Type_Definition; 

— Use operations in this package and in ASIS_Iames_And_Expressions. 


— TYPE DEFIIITI01 KIIDS 


type Type.Definition_Kinds is 

(A_Subtype_Definition, — Though not an Ada term, this kind is 

— distinct from a subtype indication which 
— is a component of several other 
— Type_Definition_Kinds 









21 October 1991 


STARS-RC-251901 /003/00 


An.Enumeration.Type.Definition, 
An_Integer.Type.Definition, 
A_Float.Type.Definition, 

A_Fixed.Type.Definition, 

An_Array.Type.Definition, 

A.Record.Type.Definition, 
An.Access.Type.Definition, 
A.Derived.Type.Definition, 

A.Task.Type.Definition, 

A.Private.Type.Def inition, 

A.Limitad_Privat e.Type.Definition, 

A_Genaric_Discrata_Subtypa_Dafinition, 
A.Generic.Integer.Subtype.Definition, 
A_Generic.Float_Subtype.Definition, 
A_Generic.Fixed_Subtype.Definition, 
A_Ganaric_Array_T 3 rpa_Def inition, 
A_Ganeric_Accass_Typa_Dalinition, 
A_Ganaric_Privata_Typa_Dalinition, 
A_Ganaric_Limitad_Privata_Typa_Dafinition, 

Iot_A_Typa_Dafinition); 


function Kind (A_Typa_Dafinition : in Typa.Dafinition) 
return Type_Definition.Kinds; 

— Returns the kind of the Type.Definition. 

— Returns lot_A_Type_Definition for any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


function Type.Definition.Declaration (A_Type_Definition : in Type_Definition) 
return Declaration; 

— Returns the type declaration or the object declaration associated 

— with the type definition. 

— A lil.Element is returned when the type declaration is anonymous. 

— EG. the type.definition is An.Array.Type.Definition from an object 

— declaration. 


Page 90 






21 October 1991 


STARS-RC-251901/003/00 


— Raises Inappropriate.Program.Element 

— if Kind(A_Type_Definition) = lot.A.Type.Definition 


— TYPES AID SUBTYPES - LRM 3.3 


function Base_Type (A_Type.Definition : in Type.Definition) 
return Type.Definition; 

— Returns the base type of the specified type definition as per LRM 3.3. 

— All subtypes are constraints applied to soae base type. This function 

— returns that base type. 

— This is an identity function if the type definition of a base type 

— is given. 

— A Hil.Element is returned when the type definition is from an 

— anonymous type or fron a predefined type. 

— Raises Inappropriate.Program.Eleaent 

— if Kind(A_Type_Definition) = Iot_A_Type_Definition 


function Last.Constraint (A.Type.Definition : in Type.Definition) 
return Type.Definition; 

— This function recursively unwinds subtyping to arrive at a type 

— definition which is either the base.type or a subtype that imposes 

— an explicit constraint. 

— This is an identity function if the type definition is not 

— A.Subtype.Definition. 

— Raises Inappropriate.Prograa.Eleaent 

— if Kind(A_Type_Definition) = lot.A.Type.Definition 


function Last.Subtype (A.Type.Definition : in Type.Definition) 
return Type.Definition; 

— This function unwinds subtyping one step at a time to return a type 

— definition which is either the base.type or a subtype that imposes 

— constraints (the case where the constraint imposes no restriction is 


Page 91 







21 October 1991 


STARS-RC-251901/003/00 


— also included). LRM 3.3(4). 

— This is an identity function if the type definition is not 

— A.Subtype.Definition. 

— Raises Inappropriate.Program.Element 

— if Kind(A.Type.Definition) = Iot.A_Type.Definition 


function Subtype.Definition.Subtype.Indication 
(Subtype.Definition : in Type_Definition) 
return Subtype_Indication; 

— Returns the subtype indication associated with the subtype definition. 

— Raises Inappropriate.Progran.Element 

— if Kind(Subtype.Definition) /= A.Subtype.Definition. 


— DERIVED TYPES - LRM 3.4 

function Parent.Subtype (Derived.Type : in Type.Definition) 
return Subtype.Indication; 

— Returns the subtype indication associated sith the derived type. 

— The subtype indication after the reserved sord nes defines the 

— parent subtype. 

— Raises Inappropriate.Program.Element 

—if Kind(Derived_Type) /= A_Derived.Type.Definition. 


function Parent.Type (Derived.Type : in Type.Definition) 
return Type.Definition; 

— Returns the parent type of the specified derived type definition as 

— per LRM 3.4. 

— The parent type is the base type of the parent subtype. 

— Appropriate Type.Definition Kinds: 

A_Derived.Type.Definition 


Page 92 







21 October 1991 


STARS-RC-251901/003/00 


function Ground_Type (A_Type_Definition : in Type.Definition) 
return Type_Definition; 

— This function recursively unwinds all type derivations and subtyping 

— to arrive at a type definition which is neither a derived type or a 

— subtype. 

— Raises Inappropriate.Program.Element 

— if Kind(A_Type_Definition) = Iot_A_Type_Definition 


— Examples of base type, parent type, and ground type. 

— type lumber is new Integer range 0 .. 100; 

A derived type definition defines a new base type whose 
characteristics are derived from those of a parent type. 

The base type of lumber is lumber. 

The parent type of lumber is Integer. 

The ground type of lumber is Integer. 


— subtype Day.lumber is lumber range 1 .. 31; 

A subtype indication defines a subtype of the base type of the 
type mark. 

The base type of Day.lumber is lumber. 

The parent type of Day.lumber is Integer. 

The ground type of Day.lumber is Integer. 

— type Ueek.Day is new Day.lumber range 1 .. 7; 

The subtype indication after the reserved word new defines the 
parent subtype. The parent type is the base type of the parent subtype. 

The base type of Ueek.Day is lumber. 

The parent type of Ueek.Day is lumber. 

The ground type of Ueek.Day is Integer. 


Page 93 








21 October 1991 


STARS-RC-251901/003/00 


function Type.Structure (A_Type_Definition : in Type.Definition) 
return Type.Definition; 

— Returns the type structure from which the specified type definition has 

— been derived. This function sill unwind recursive derivations until the 

— type definition derives a new representation or is no longer derived. 

— This function is different froa GROUID_TYPE only for enumeration types or 

— record types that have derivations with rep specs. 

— Raises Inappropriate.Program.Element 

— if Kind(A_Type_Definition) = Iot_A_Type_Definition 


function Is.Predefined (A_Type_Definition : in Type.Definition) 
return Boolean; 

— Returns true if the base type of the type definition is one of: 

— Boolean, Character, String, Integer, latural. Positive, Float, Duration, 

— or any other type declared in the predefined package Standard. 

— TRUE if given type definition of: 

subtype Weight is latural range 0..50; 

— FALSE if given type definition of: 

type Weight is new latural is range 1..10; 

— Raises Inappropriate_Progran_Element 

— if Kind(A_Type.Definition) = lot_A_Type_Definition 


— COISTRAIITS 


subtype Constraint is ASIS_Ada_Prograa.Element; 

type Constraint.Kinds is 

(A.Simple.Range, 

A.Range.Attribute, 
A_Floating_Point_Constraint, 

A_Fixed_Point.Constraint, 








21 October 1991 


STARS-RC-251901/003/00 


An.Index.Constraint, 

A.Discriminant.Constraint, 

Iot_A_Constraint); 

function Constraint.Kind (A.Constraint : in Constraint) 
return Constraint.Kinds; 

— Returns the kind of the Constraint. 

— Returns Iot_A_Constraint for any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


subtype Discriminant.Association.List is ASIS.Ada.Program.Element.List; 

function Discriminant.Associations 

(Discriminant.Constraint : in Constraint; 

Include.Defaults : in Boolean := False) 

return Discriminant.Association.List; 

— Returns the list of discriminant associations of a discriminant 

— constraint. 

— If Include.Defaults is True: 

The (unspecified) default associations will also be included and, 
The list will be ordered to match the declaration order of the 
identifiers in the corresponding discriminant specifications. 

— If Include.Defaults is False: 

Only explicit discriminant associations sill be included in the 
order they appeared in the program text. 

— An ASIS implementation may choose to always "Include Defaults” its 

— internal representation. If that is the case, the operation will 

— always behawe as if Include.Defaults is True. 

— Raises Inappropriate.Program.Element 

— if Constraint.Kind(Discriminant.Constraint) 

/= A.Discriminant.Constraint 


function Discriminant.Associations.Include.Defaults return Boolean; 

— Returns True if this implementation will always "Include Defaults". 

— If that is the case, the Discriminant.Associations operation will 


Page 95 








21 October 1991 


STARS-RC-251901 /003/00 


— always behave as if its parameter Include.Defaults is True. 


subtype Discriminant.Association is ASIS.Ada.Program.Element; 

subtype Identifier.Reference.List is ASIS_Ada_Program.Element.List; 

function Discriminant.Simple.Iames 

(A_Discriminant_Association : in Discriminant.Association) 
return Identifier.Reference.List; 

— Returns the list of simple names in the discriminant association. 

— Will be a nil list if positional notation is used. 

— Raises Inappropriate.Program.Element 

— if ASIS_Elements.Hajor_Element_Kind(A_Discriminant_Association) /= 

— A.Discriminant.Association 


function Discriminant.Ezpression 

(A.Discriminant.Association : in Discriminant.Association) 
return Expression; 

— Returns the expression for the discriminant association. 

— Raises Inappropriate.Program.Element 

— if ASIS_Elements.Hajor_Element_Kind(A.Discriminant.Association) /= 

— A.Discriminant.Association 


— DISCRETE RAIGES 


subtype Discrete.Range is ASIS.Ada.Program.Element; — LRM 3.6 

type Discrete.Range.Kinds is 

(A.Simple.Range, 

A.Range.Attribute, 

A.Discrate.Subtype.Indication, 
lot.A.Discrete.Range); 

function Discrete.Range.Kind (A.Discrete.Range : in Discrete.Range) 


Page 96 





21 October 1991 


STARS-RC-251901 /003 /00 


return Di8crete_Range_Kinds; 

— Returns the kind o1 the Discrete.Range. 

— Returns lot.A.Discrete.Range for any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


— RAIGE COISTRAIIT 


subtype Range.Constraint is ASIS_Ada_Program.Element; 

Iunction Lover.Bound 

(Simple.Range.Constraint : in Range.Constraint) 
return Expression; 

— Returns the simple expression lor the lover bound ol a simple range. 

— Appropriate elements ol the subtypes constraint or discrete range: 

— Appropriate Constraint Kinds: 

A_Simple_Range 

— Appropriate Discrete.Range Kinds: 

A.Simple.Range 


Iunction Upper.Bound 

(Simple.Range.Constraint : in Range.Constraint) 
return Expression; 

— Returns the simple expression 1or the upper bound ol a simple range. 

— Appropriate elements ol the subtypes constraint or discrete range: 

-- Appropriate Constraint Kinds: 

A.Simple.Range 

— Appropriate Discrete.Range Kinds: 

A.Simple.Range 


Iunction Range.Attribute 

(Range.Attribute.Constraint : in Range.Constraint) 
return Expression; 

— Returns the range attribute expression supplying the range. 


Page 97 





21 October 1991 


STARS-RC-251901/003/00 


— Accepts elements of the subtypes constraint or discrete range. 

— Further Analysis: 

Range attributes are expressions and can be analyzed by using 
the attribute operations in ASIS.Iames.And.Expressions. 

— Appropriate Constraint Kinds: 

A_Range_Attribute 

— Appropriate Discrete.Range Kinds: 

A.Range.Attribute 


— CHOICES 


subtype Choice is ASIS.Ada.Program.Element; 

type ChoiceJKinds is 

(A.Simple.Expression, 

A_Discrete_Range, 

An.Others.Choice, 

A_Simple_Iame, 

An_Exception_Iame, 

Iot_A_Choice); 

function Choice.Kind (A.Choice : in Choice) return Choice.Kinds; 

— Returns the kind of the choice. 

—Returns Vot_A_Choice for any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


function Choice.Simple.Expression (A.Choice : in Choice) return Expression; 

— Returns the expression associated with the choice. 

— Appropriate Choice Kinds: 

A.Simple.Expression 

function Choice.Discrete.Range (A.Choice : in Choice) return Discrete.Range; 

— Returns the discrete range associated with the choice. 


Page 98 







21 October 1991 


STARS-RC-251901/003/00 


— Appropriate Choice Kinds: 
A_Discrete_Range 


function Choice.Iame (A_Choice : in Choice) return Iame_Expression; 

— Returns the simple name or exception name associated with the choice. 

— Appropriate Choice Kinds: 

A_Simple_lame 

An_Exception_Name 


-- SUBTYPE_IIDICATIOIS AID TYPE.HARKS - LRM 3.3.2 


function Type_Mark (A_Subt>pe_Indication : in Subtype_Indication) 
return lame_Expression; 

— Returns the type mark of a subtype indication or a discrete subtype 

— indication. 

— Appropriate Type_Definition Kinds: 

A_Subtype_Indication 

— Appropriate Discrete.Range Kinds: 

A_Discrete_Subtype_Indication 

— Use Index_Subtype_Definitions query to get the type mark(s) from 

— unconstrained array Index_Subtype_Definition(s). 

function Subtype.Constraint (A_Suotype_Indication : in Subtype_Indication) 
return Constraint; 

— Returns the constraint applied to the subtype indication. 

— A lil.Element is returned if no constraint is present. 

— Appropriate Type.Definition Kinds: 

A_Subtype_Indication 

— Appropriate Discrete.Range Kinds: 

A_Discrete_Subtype_Indication 


Page 99 





21 October 1991 


STARS-RC-251901/003/00 


-- ESUMERATIOK TYPES - LRM 3.5.1 

subtype Declaration.List is ASIS_Ada_Program.Element_List; 

function Enumeration_Literal_Declarations 
(Enumeration_Type : in Type_Definition) 
return Declaration.List; 

— Returns a list of the literals declared in cm enumeration type 

— declaration. Each of these elements is a Declaration. 

— Appropriate Type.Definition Kinds: 

An_Enumeration_Type.Definition 


subtype Identifier_DefinitionJList is ASIS_Ada_Program.Element_List; 

function Enumeration_Literal_Identifiers 
(Enumeration_Type : in Type_Definition) 
return Identifier_Definition_List; 

— Returns a list of the literals declared in an enumeration type 

— declaration. Each of these elements is an Identifier_Definition. 

— Appropriate Type_Definition Kinds: 

An_Enumeration_Type_Definition 


— IITEGER TYPES - LRM 3.5.4 


function Integer_Constraint (Integer_Type : in Type_Definition) 
return Range.Constraint; 

— Returns the range constraint on the integer type definition. 

— A Hil.Element may be returned by some ASIS implementations if the 

— integer type is a predefined type. 

— Appropriate Type_Definition Kinds: 

An_Integer_Type_Definition 


Page 100 








21 October 1991 


STARS-RC-251901/003/00 


-- REAL TYPE: - LRM 3.B.6 


function Real_Type_Constraint (Real.Type : in Type.Definition.' 
return Constraint; 

— Returns the floating point constraint fro* a A_Float_Type_Definition 

— or the fixed point constraint from A_Fixed_Type_Definition. 

— A Mil.Element may be returned by some ASIS implementations if the 

— real type is a predefined type, 

— Appropriate TypeJDefinition Kinds: 

A_Float_Type_Definition 
A_Fixed_Type_Definition 

— Primary 

function Floating_Accuracy_Definition 

(Floating_Point_Con8traint : in Constraint) 
return Expression; 

— Returns the static simple expression following the reserved word digits 

— in the floating accuracy definition of a floating point constraint. 

— Appropriate Constraint Kinds: 

A_Floating_Point.Constraint 


function Floating_Point_Range_Constraint 

(Floating_Point_Constraint : in Constraint) 
return Range.Constraint; 

— Returns the optional range constraint of a floating point constraint. 

— A Vil.Element is returned if there is no range constraint. 

— Appropriate Constraint Kinds: 

A_Floating_Point_Constiaint 


function Fixed.Accuracy.Definition 


Page 101 






21 October 1991 


STARS-RC-251901 /003/00 


(Fixed.Point.Constraint : in Constraint) 
return Expression; 

— Returns the static simple expression follouing the reserved word delta 

— in the fixed accuracy definition of a fixed point constraint. 

— Appropriate Constraint Kinds: 

A_Fixed_Point_Constraint 

function Fixed.Point.Range.Constraint 

(Fixed.Point.Constraint : in Constraint) 
return Range.Constraint; 

— Returns the optional range constraint of the fixed point type definition. 

— A lil.Element is returned if there is no range constraint. 

— Appropriate Constraint Kinds: 

A.Fixed.Point.Constraint 


-- ARRAY TYPES - LRM 3.6 

function Is.Constrained.Array (Array.Type : in Type.Definition) 
return Boolean; 

— Returns True if the array type definition denotes a constrained array. 

— Appropriate Type.Definition Kinds: 

An.Array.Type.Definition 
A.Generic.Array.Type.Definition 


function Index.Constraint (Constrained.Array.Type : in Type.Definition) 
return Constraint; 

— Returns the index constraint for a constrained array type declaration. 

— A constrained array definition has one index constraint which defines 

— one or more discrete ranges. 


Page 102 







21 October 1991 


STARS-RC-251901 /003/00 


— Use the Discrete.Ranges operation to decompose the index constraint. 

— Raises Inappropriate.Program.Element 

— if not Is_Constrained_Array(Constrained.Array_Type) = True 


subtype Discrete.Range.List is ASIS_Ada_Program.Element.List; 

function Discrete.Ranges (Index.Constraint : in Constraint) 
return Discrete.Range.List; 

— Returns the list of Discrete.Range components of an Index.Constraint 

— Raises Inappropriate.Program.Element 

— if Constraint.Kind(Index.Constraint) /= An.Index.Constraint 


subtype lame.Expression.List is ASIS.Ada.Program.Element.List; 

function Index.Subtype.Definitions 

(Unconstrained_Array_Type : in Type.Definition) 
return lame.Expression.List; 

— Returns a list of the Index.Subtype.Definition (Type.Hark range <>) 

— for an unconstrained array type definition. 

— The list contains elements of the subtype lame.Expression 

— representing the Type.Mark(s). 

— Raises Inappropriate.Program.Element 

— if Is.Constrained.Array(Unconstrained.Array.Type) = True 

function Component.Subtype.Indication (Array.Type : in Type.Definition) 
return Subtype.Indication; 

— Returns the component subtype indication of the array type. 

— A lil.Element may be returned by some ASIS implementations if the 

— array type is a predefined type. 

— Appropriate Type.Definition Kinds: 

An.Array.Type_Definition 
A.Generic.Array.Type.Definition 


Page 103 







21 October 1991 


STARS-RC-251901 /003/00 


— RECORD TYPES - LRM 3.7 


subtype Record.Component is ASIS.Ada.Program.Element; 
subtype Variant is ASIS.Ada.Program.Element; 


function Is_Discriminated (Record_Type : in Type.Definition) return Boolean; 

— Returns True if the record type definition has discriminants. 

— Appropriate *"yj:>e_Def inition Kinds: 

A_Recora_Type_Definition 


subtype Discriminant.Specification.List is ASIS.Ada.Program.Element.List; 

function Discriminants (Record.Type : in Type.Definition) 
return Discriminant.Specification.List; 

— Returns a list of discriminant specification declarations 

— in their order of appearance. 

— A lil list is returned if the record type definition has no 

— discriminants. 

— Further Analysis: 

Use ASIS.DECLARATIOIS operations to decompose discriminant 
specifications. 

— Appropriate Type.Definition Kinds: 

A_Record_Type_Definition 


subtype Record.Component.List is ASIS.Ada.Program.Element.List; 

function Record.Components (Record.Type : in Type.Definition) 
return Record.Component.List; 

— Returns a list of the components of the record definition. 

— Appropriate Type.Definition Kinds: 


Page 104 






21 October 1991 


STARS-RC-251901 /003/00 


A_Record.Type.Definition 


type Component.Kinds is 

(A.Sull.Component, 

A.Component.Declaration, 

A_Variant_Part, 

Hot.A.Component); 

function Component_Kind (Component : in Record.Component) 
return Component.Kinds; 

— Returns the kind of the component. 

— Returns Iot_A_Component for any inappropriate element such as 

— a Statement, Expression, or lil.Element. 

— Component declarations can be analyzed using the ASIS.DECLARATIOIS 

— operations. 


function Corresponding.Discriminant.Siaple.Iame 
(Variant_Part : in Record_Component) 
return Identifier.Reference; 

— Returns the discriminant simple name in the variant part. 

— Raises Inappropriate_Program_Element 

— if Component_Kind(Variant_Part) /= A_Variant_Part. 


subtype Variant.List is ASIS.Ada.Program.Element.List; 

function Variants (Variant.Part : in Record.Component) return Variant.List; 

— Returns a list of variants that make up the record component. 

— Raises Inappropriate.Program.Element 

— if Component.Kind(Variant.Part) /= A.Variant.Part. 


subtype Choice.List is ASIS.Ada.Program.Element.List; 

function Variant.Choices (A.Variant : in Variant) return Choice.List; 


Page 105 









21 October 1991 


STARS-RC-251901/003/00 


— Returns & list of the ’UHEI <choice> ! <choice>* choices. 

— Use the CHOICES operations to extract further information. 

— Raises Inappropriate.Program.Element 

— if ASIS_Elements.Major_Element_Kind(A_Variant) /= A.Variant 


subtype Variant_Component_List is ASIS.Ada.Program.Element.List; 

function Variant.Components (A.Variant: in Variant) 
return Variant.Component.List; 

— Returns a list of the record components of the variant. 

— Further Analysis: 

— Use the Component.Kind operation to analyze the variant components. 

— Raises Inappropriate.Program.Element 

— if ASIS.Elements.Major.Element_Kind(A_Variant) /= A.Variant 


— ACCESS TYPES - LRU 3.8 

function Access.To (Access.Type : in Type.Definition) 
return Subtype.Indication; 

— Returns the subtype indication following the reserved word access 

— in the access type definition. 

— Appropriate Type.Definition Kinds: 

An.Access.Type.Definition. 

A_Generic.Access_Type.Definition. 


— TASK SPECIFICATION 

— LRH Chapter 9 

subtype Declarative.Item.List is ASIS.Ada.Program.Element.List; 

function Task.Type.Declarative.Items (Task.Type : in Type.Definition) 
return Declarative.Item.List; 


Page 106 










21 October 1991 


STARS-RC-251901 /003/00 


— Returns a list of entry declarations and representation clauses 

— in the specification of a task type in order of appearance. 

— Further Analysis: 

Use ASIS.Declarations operations for subprogram declarations to 
decompose task entries. 

Use ASIS.Representation.Clauses operations to analyze representation 
clauses that apply to the entries. 

— Appropriate Type.Definition Kinds: 

A_Task_Type_Definition 


end ASIS_Type_Definitions; 


— ASIS PRELIMINARY REVIEW VERSIOI 0.4 

— Sept 27, 1991 


with ASIS_Ada_Program; 

package ASIS.Iames.And.Expressions is 

— LRM Chapter 4 

subtype Element is ASIS_Ada_Program.Element; 

— Use ASIS.Elements operations. 

subtype Expression is ASIS_Ada.Program.Element; 

— Use ASIS.Iames.And.Expression operations. 

subtype lame.Expression is ASIS.Ada.Program.Element; 
— Use ASIS.Iames.And.Expression operations. 

subtype Declaration is ASIS.Ada.Program.Element; 

— Use ASIS.Declarations operations. 


Page 107 










21 October 1991 


STARS-RC-251901 /003/00 


subtype Statement is ASIS.Ada.Program. Element; 

— Use ASIS.Stateaents operations. 

subtype Type.Definition is ASIS.Ada.Progran.Element; 

— Use ASIS_Type_Deiinitions operations. 


— HAKE AID EXPRESSIOI KIIDS 


type lame.And.Expression.Kinds is 


(A.Simple.Iame, 

— LRM 

4.1 

An.Operator.Symbol, 

— LRM 

4.1 

A.Charact er.Lit oral, 

— LRM 

4.2 

An.Enumeration.Lit eral, 

— LRM 

4.2 

An_Indexed.Component, 

— LRM 

4.1.1 

A.Slice, 

— LRM 

4.1.2 

A.Selected.Component, 

— LRM 

4.1.3 

An.Attribute, 

— LRM 

4.1.4 

A_Type_Convers ion, 

— LRM 

4.6 

A.Qualified.Expression, 

— LRM 

4.7 

A.Function.Call, 

— LRM 

6.4 

A_lull_Literal, 

— LRM 

4.2 

A_String_Literal, 

— LRM 

4.2 

An.Integer.Literal, 

— LRM 

4.2 

A.Real.Literal, 

— LRM 

4.2 

An.Aggregate, 

— LRM 

4.3 

A.Parenthesized.Expression, 

— LRM 

4.4 

A.Special.Operation, 

— LRM 

4.4 

An.Allocation.From.Subtype, 

— LRM 

4.8 

An.Allocation.Fron.qualified.Expression, 

— LRM 

4.8 


lot.An.Expression); 


function Kind (An.Expression : in Expression) 
return IaBe_And_Expression_Kinds; 

— Returns the kind of the Expression, laae.Expression, 

— Identifier.Delinition, or Identifier.Reference. 


Page 108 












21 October 1991 


STARS-RC-251901/003/00 


— Returns Iot_An_£xpression lor any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


— THE TYPE OF Al EXPRESSIO* 


function Expression.Type (An.Expression : in Expression) 
return Type_Definition; 

— Returns the type definition for the expression. 

— This operation does not "unsind" subtypes or derived types to get to 

— the base type or parent type definitions. That can be accomplished 

— using ASIS.Type.Definitions operations Parent.Type and Base.Type. 

— Raises Inappropriate.Program.Element 

— if Kind(An_Expression) = Iot_An_Expreasion 


function Is_Universal (An.Expression : in Expression) return Boolean; 

— Returns True if the expression is of the type Universal.Integer or 

— the type Universal.Real. 

— Raises Inappropriate_Program_Element 

— if Kind(An.Expression) = Iot_An_Expression 


— IDEITIFIERS - LRM 2.3 


subtype Identifier.Definition is ASIS.Ada.Program.Element; 
subtype Identifier.Reference is ASIS.Ada.Program.Element; 


type Id.Kinds is 

(An_Identifier.Definition, 

An.Identifier.Reference, 

Iot_An_Identifier); 

function Id.Kind (An.Identifier : in Element) return Id.Kinds; 


Page 109 









21 October 1991 


STARS-RC-251901/003/00 


— Returns the kind o1 the Identifier.Definition or Identifier.Reference. 

— Returns lot.An.Identifier for any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


function String.Iame (An.Identifier : in Element) return String; 

— Returns the name of the identifier. 

— Appropriate Id.Kinds: 

An.Identifier.Definition, 

An.Identifier.Reference 


function Enclosing_Declaration (An.Identifier : in Identifier.Definition) 
return Declaration; 

— Returns the enclosing declaration for the identifier.definition. 

— This operations acts as the inverse of the ASIS.Declarations.Identifiers 

— operation when given an Identifier.Defintion. 

— Appropriate Kinds: 

Any element where: 

Id.Kind(element) = An.Identifier.Definition 


— REFEREICES OF IAMED EITITIES 


subtype Identifier.List is ASIS.Ada.Program.Element.List; 

function References 

( lamed.Entity : in Element; 

Context : in Element ) 

return Identifier.List; 

— Returns all direct references of the given Element within the given 

— context. 

— Appropriate Elements: 

An Identifier.Definition, Identifier.Reference, lame.Expression, or 


Page 110 









21 October 1991 


STARS-RC-251901/003/00 


expression whose ASIS.Iames_Aad_Expressions.Kind is: 

A_Simple_Iame, 

An.Operator.Symbol, 

A_Character_Litoral, 

An.Enumeration.Literal, 

function Is_Referenced 

(lamed.Entity : in Element; 

Context : in Element ) 

return Boolean; 

— Returns true if the Iamed_Entity is referenced within the given 

— context. 

— The search is discontinued after first reference is found. 

— Appropriate Elements: 

An Identifier_Definition, Identifier.Reference, or lame.Expression 
whose lame.And.Expression.Kind is: 

A.Simple.Iame, 

An_Operator.Symbol, 

A.Character.Literal, 

An_Enumeration_Literal, 

subtype Expression.List is ASIS.Ada.Program.Element.List; 

function Used.lames (An.Expression : in Expression) return Expression.List; 

— Returns a list of names of objects/types, operators, and literals 

— in an expression. 

— EG. the expression (A + B.D (Q’(4))) would return the list : 

A : A.SINPLE.IANE 

+ : AI.OPERATOR.SYNBOL 

B.D : A.SELECTED.C0KP01EIT 

Q : A.SINPLE.IANE 

4 : AI.IITEGER.LITERAL 

— The list may vary from one ASIS implementation to another 

— due to constant folding or other vendor dependent normalizations. 

— However, the lists are always semantically equivalent. 

— Raises Inappropriate.Program.Element 

— if Kind(An.Expression) = lot.An.Expression 

Page 111 


I 








21 October 1991 


STARS-RC-251901 /003/00 


— DEFIIITIOI OF REFEREICED IAME 


function Definition (A.Reference : in Element) return Identifier.Definition; 

— Returns the first definition of the given reference. 

— A fil.Eleaent is returned if the eleaent references a declaration that 

— is either predefined or implicit. 

— If given an Identifier.Definition, the same eleaent is returned. 

— Appropriate Expression Kinds: 

A.Simple.Vame, 

An_Operator_Symbol, 

A.Charact er_Lit eral, 

An_Enumeration_Literal, 

An_Indexed_Component, 

A.Slice, 

A_Selected_Component, 

An_Attribute, 


function Enclosing_Iaae_Expression (An.Identifier : in Identifier_Reference) 
return lame.Expression; 

— Returns the outermost name.expression that contains the 

— identifier.reference. 

— Appropriate Kinds: 

Any eleaent where: 

Id.Kind(eleaent) = An.Identifier.Reference 


— DECLARATIONS OF IANED EITITIES 

function Is.Predefined (laaed.Entity : in laae.Expression) 
return Boolean; 

— Returns true if the naaed entity denotes an eleaent that is 

— predefined. (EG. STAIDARD. 


Page 112 











21 October 1991 


STARS-RC-251901 /003/00 


— Appropriate Expression Kinds: 
A.Simple.Iame, 

An_Operator.Symbol, 

A.Character.Literal, 
An.Ennmeration.Lit oral, 
An.Indexed.Component, 
A.Slice, 

An.Selected.Component, 
An.Attribute 
A.Type.Conversion 
A.Qualified.Expression 
A.Function.Call 


function Is.Implicitly.Declared 

(Hamed.Entity : in lame.Expression) 
return Boolean; 

— Returns true if the named entity has r.o explicit 

— declaration associated with it. (EG. An implicit declaration of 

— a derived subprogram). 

— Appropriate Expression Kinds: 

A.Simple.Iame, 

An.Operator.Symbol, 

A.Character.Literal, 

An.Enumeration.Litoral, 

An.Indexed.Component, 

A.Slice, 

An.Selected.Component, 

An.Attribute 
A.Type.Conversion 
A.Qualified.Expression 
A.Function.Call 


function lamed.Declaration 

(lamed.Entity : in lame.Expression) 
return Declaration; 

— Returns the declaration of the entity denoted by the name. 

— A lil.Element is returned if the element references a declaration that 

— is either predefined or implicit. 


Page 113 










21 October 1991 


STARS-RC-251901/003/00 


— Appropriate lame.Expression Kinds: 
A_Simple_Iame, 
An_Operator_Symbol, 

A.Character.Literal, 
An.Enumeration.Literal, 
An.Indexed.Component, 
An.Selected.Component, 

A.Slice, 

An.Attribute 


-- IAMES - LRM 4.1 

— Simple.lames and operator symbols are instances of identifier references 


function Prefix (lame : in lame.Expression) return lame.Expression; 

— Returns the prefix (the construct to the left of the rightmost 

— left parenthesis in indexed or sliced objects, the rightmost ’dot’ for 

— selected components, or the rightmost tick for attributes). 

— Appropriate lame.Expression Kinds: 

An.Indexed.Component, 

A.Slice, 

A_Selected_Component, 

An.Attribute, 

A_Function_Call 


— IMDEXED C0NP01EVTS - LRM 4.1.1 

function Index.Expressions (Indexed.Component : in lame.Expression) 
return Expression.List; 

— Returns a list of expressions (possibly only one) within the parenthesis. 

— Appropriate lame.Expression Kinds: 

An.Indexed.Coaponent, 


Page 114 










21 October 1991 


STARS-RC-251901 /003/00 


— SLICES - LRM 4.1.2 

subtype Discrete.Range is ASIS.Ada.Program.Element; 

— Use ASIS.Type.Definitions operations to analyze discrete ranges. 

function Slice_Range (Slice : in lame.Expression) return Discrete.Range; 

— Returns the discrete range of the slice. 

— Appropriate lame.Expression Kinds: 

A_Slice, 


— SELECTED COMPOIEITS - 

LRM 4.1.3 


type Selection.Kinds is 



(A_Discriminant, 

— LRM 4.1.3 

( ) 

A.Record.Component, 

-- LRM 4.1.3 

b) 

A.Task.Entry, 

-- LRM 4 1.* 

(c) 

An.Access.Object, 

— LRM 

(d) 

An.Expanded.fame, 

— LRM 

(-.#> 


Iot_A_Selection_Kina. 


function Selection_Kind (Selected.Component : in lane.Expression) 
return Selection_Kinds; 

— Returns the selection kind of the selected component. 

— Returns Iot.A_Selection.Kind for any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


function Selector (Selected.Component : in lame.Expression) 
return Iame_Ezpression; 

— Returns the selector (the construct to the right of the rightmost 

— ’dot* in the selected component). 

— Appropriate lame.Expression Kinds: 

A_Selected_Component whose Selection.Kind is: 

A_Discriminant, 

A.Record.Component, 

A_Task_Entry, 


Page 115 







21 October 1991 


STARS-RC-251901 /003/00 


An.Expanded.Iame, 


function Record.Object 

(Discriminant.Or.Component.Selection : in lame.Expression) 
return Declaration; 

— Returns the record object declaration for the selected object. 

— Appropriate lame.Expression Kinds: 

A.Selected.Component whose Selection_Kind is: 

A.Discriminant, 

A.Record.Component, 


function Selected.Component 

(Discriminant.Qr.Component.Selection : in lame.Expression) 
return Declaration; 

— Returns the declaration of the Discriminant.Specification or 

— Component.Declaration in the record type declaration. 

— Operations in the package ASIS.Declarations can be used to 

— manipulate record components. 

— Appropriate lame.Ezpression Kinds: 

A.Selected.Component shose Selection.Kind is: 
A.Discriminant, 

A.Record.Component, 


function Selected.Task.Entry (Task.Entry.Selection : in lame.Expression) 
return Declaration; 

— Returns the entry declaration within the task type. 

— Appropriate lame.Expression Kinds: 

— A.Selected.Component shose Selection.Kind is: 

A.Task.Entry, 


function Selected.Designated.Subtype 

(Access.Object.Selection : in lame.Expression) 
return Declaration; 


Page 116 









21 October 1991 


STARS-RC-251901/003/00 


— Returns the declaration of the designated subtype. The base type of 

— this subtype is called the designated type. The designated type is 

— returned in the absence of a subtype. 

— Appropriate Vame.Expression Kinds: 

A_Selected_Component whose Selection.Kind is: 

An.Access.Object 


subtype Iame_Expression_List is ASIS_Ada_Program.Element_List; 

function Vamed_Packages (A_Use_Clause : in Element) 
return Iame_Expression_List; 

— Returns a list containing the Iame_Expression of each package 

— mentioned in the use clause. 

— Results of this operation may wary across ASIS implementations. 

— Some implementations normalize all use clauses containing multiple 

— package names into an equivalent sequence of corresponding single use 

— clauses. Similarly, an implementation may keep a name only once even 

— though that name may appear more than once in a use clause. 

— See LRU 8.4(9). 

— Appropriate Kinds: 

Any element whose ASIS.Elements.Major_Element_Kind is A_Use_Clause. 


— ATTRIBUTES - LRU 4.1.4 

function Attribute_Designator_lame (Attribute : in Iame_Expression) 
return lame.Ezpression; 

— Returns the name expression of the attribute designator. The name 

— expression may itself be an attribute if the given attribute is of the 

— form T*BASE’FIRST. 

— The attribute simple name returned here only has a name if its 

— kind = A_Simple_Iame. It is inappropriate in all other queries. 

— Appropriate lame.Expression Kinds: 

An.Attribute 

— Further Analysis: 


Page 117 







21 October 1991 


STARS-RC-251901/003/00 


— Use String_Iame to get the name as a string. 


function Attribute.Designator.Argument (Attribute : in lame.Expression) 
return Expression; 

— Returns the static expression associated with the optioned argument 

— of the attribute designator if one exists, lil.Element otherwise. 

— Appropriate lame.Expression Kinds: 

An.Attribute 


— LITERALS - LRM 4.2 

— The image of literals can be determined by using the Static.Value 

— operation. 


function Is.Literal (An.Expression : in Expression) return Boolean; 

— Determines whether the expression is a literal. 

— Returns True if the expression is: 

A_Character_Literal, 

An.Enumeration.Literal, 

A_Iull_Literal, 

A_String_Literal, 

An_Integer.Literal, 

A_Real.Literal, 

— Raises Inappropriate.Program.Element 

— if Kind(An.Expression) = Iot_An_Expression 


function Position.Iumber.Image 

(Enuneration_Or_Character_Literal : in Expression) 
return String; 

— Returns the image of the cardinality of the enumeration literal within 

— the base type of the enumeration type, (same as image of M, POS") 

— Appropriate Expression Kinds: 

A_Character_Literal, 


Page 118 





21 October 1991 


STARS-RC-251901/003/00 


An_Enumeration_I.it eral, 

function Representation.Value.Image 

(Enumeration_Or_Charact er_Lit eral : in Expression) 
return String; 

— Returns the image of the internal representation of the enumeration 

— literal. 

— (same as image of "’POS" if no rep spec defined for the enumeration type) 

— Appropriate Expression Kinds: 

A_Character_Literal, 

An_Enumeration_Literal, 

function Enumeration_Type_Declaration 

(Enumeration_Or_Character_Literal : in Expression) 
return Declaration; 

— Returns the declaration of the type that contains the literal. 

— Since characters are enumerations, both regular enumeration and 

— character literals have enumeration base type declarations. 

— Returns a Vil.Element if 

Is_Implicitly_Declared(Enumeration_Or_Character_Literal). 

— The operations in ASIS.Declarations can be used to further analyze 

— these declarations. 

— Appropriate Expression Kinds: 

A_Character_L.it oral, 

An_Enumeration_I.it eral, 


— AGGREGATES - LRM 4.3 

subtype Component.Association is ASIS_Ada_Program.Element; 

subtype Component_Association_List is ASIS_Ada_Progran.Element_List; 

function Components 

(Aggregate : in Expression; 


Page 119 








21 October 1991 


STARS-RC-251901 /003/00 


formalized : in Boolean := False) 
return Component_Associati.on_Li.st; 

— Returns a list of the component associations of an aggregate. 

— MOTE THAT IORMALIZED IIFO IS HOT AVAILABLE FOR ARRAY AGGREGATES. 

— For record aggregates, the formalized parameter has the following 

— affect: 

— If formalized is True: 

A normalized list containing all of the component associations 
of an aggregate is returned in positional notation. 

— If formalized is False: 

Only explicit component associations mill be included in the 
order they appeared in the program text. 

— An ASIS implementation may choose to always "formalize" its internal 

— representation. If that is the case, the operation will always behave 

— as if formalized is True. 

— Appropriate Expression Kinds: 

An.Aggregate 


function Components.formalized return Boolean; 

— Returns True if this implementation will always "formalize" record 

— aggregate components as described in the Components operation. 

— If that is the case, the Components operation will always behave as 

— if its parameter formalized is True. 


subtype Choice.List is ASIS_Ada_Program.Element_List; 

function Component_Choices (Component : in Component.Association) 
return Choice.List; 

— Returns the list of choices in the aggregate component. 

— The list will be a nil list if positional notation is used. 

— Further Analysis: 

Use the CHOICE operations in ASIS.Type.Definitions 

— Raises Inappropriate.Program.Element 

— if ASIS_Elements.Hajor_Element_Kind(Component) /= A_Component_Association 


Page 120 




21 October 1991 


STARS-RC-251901 /003/00 


function Component.Expression (Component : in Component_Association) 
return Expression; 

— Returns the expression for the component association. 

— Raises Inappropriate.Program.Element 

— if ASIS_Elements.Major_Element_Kind(Component) /= A_Component_Association 


— PAREITHESIZED EXPRESSIOIS - LRM 4.4 


function Expression.Parenthesized (Parenthesized.Expression : in Expression) 
return Expression; 

— Returns the expression within the parenthesis. 

— Appropriate Expression Kinds: 

A.Parenthesized.Expression 


— FUICTIOI CALLS 

AS A PRIMARY - LRM 4.4 
OPERATORS - LRM 4.6 


function Is.Prefix.Call (Function.Call : in Expression) return Boolean; 

— Returns true if the function call is in prefix form. 

— EG. - Foo (A, B); — Returns TRUE 

"< M (A, B); — Returns TRUE 

... A < B ... — Returns FALSE 

— Appropriate Expression Kinds: 

A.Function.Call 


function Is.Prefix.Call.Supported return Boolean; 

— Returns True if the ASIS implementation has the ability to determine 

— whether calls are in prefix form. 


Page 121 








21 October 1991 


STARS-RC-251901/003/00 


function Called.Function (Function.C&ll : in Expression) return Declaration; 

— Returns the declaration of the called function. 

— Returns a lil.Element if 

Is_Implicitly_Declared(Function_Call). 

— Appropriate Expression Kinds: 

A_Function_Call 


subtype Parameter_Association_List is ASIS_Ada_Program.Element_List; 

function Function_Call_Parameters 
(Function.Call : in Expression; 

Include.Defaults : in Boolean : = False) 
return Parameter_Association_List; 

— Returns a list of parameter associations for the call. 

— If Include.Defaults is True: 

The (unspecified) default parameters sill also be included and, 
the list sill be ordered to match the declaration order of the 
corresponding formal parameter specifications. 

— If Include.Defaults is False: 

Only explicit actual parameters sill be included in the order they 
appeared in the program text. 

— An ASIS implementation may choose to alsays "Include Defaults" its 

— internal representation. If that is the case, the operation sill 

— alsays behave as if Include.Defaults is True. 

— Use ASIS.Statements operations to decompose parameter associations. 

— To map actual parameters to corresponding formal parameters: 

Create an actual parameter list by applying the function 
ASIS_Statements.Actual_Parameter to each parameter association 
returned by Function.Call.Parameters sith Include.Defaults = True. 

Create a formal parameter list by applying the function 
ASIS.Dedarations.Identifiers to each formal parameter 


Page 122 







21 October 1991 STARS-RC-251901/003/00 

specification returned by ASIS.Declarations.Parameters. 

The Expression elements in the actual parameters list mill have a 
one to one correspondence with the Identifier.Definition elements 
in the formal parameter list. 

— Appropriate Expression Kinds: 

A.Function.Call 

— Further Analysis: 

— Use ASIS.Statements operations Formal.Parameter and Actual.Parameter 

— to analyze the parameter associations. 


function Function.Call.Parameters.Include.Defaults return Boolean; 

— Returns True if this implementation sill always "Include Defaults". 

— If that is the case, the Function.Call.ParameterB operation sill 

— always behave as if its parameter Include.Defaults is True. 


function Is.Parameter.Association (Program.Element : in Element) 
return Boolean; 

— Returns True if the element is a parameter association. 

— Raises Inappropriate.Program.Element if the element is a Vil.Element. 


— SPECIAL OPERATIONS 

SHORT CIRCUIT COITROL FORMS - LRM 4.5.1 

— MEMBERSHIP TESTS - LRM 4.5.2 


type Special.Operation.Kinds is 

(An.In.Range, 

A.Iot.In.Range, 

An.In.Type, 

A_Iot.In.Type, 

Rn.And.Then, 

An.Or.Else, 

lot.A.Special.Operation); 


Page 123 








21 October 1991 


STARS-RC-251901 /003/00 


function Special.Operation.Kind (Special.Operation : in Exprassion) 
return Special_Operation_Kinds; 

— Returns the kind of the special operation. 

— Returns Iot_A_Special_Operation for any inappropriate element such as 

— a Statement, Declaration, or lil.Element. 


function Special.Operation.Left.Hand.Side (Special_Operation : in Expression) 
return Expression; 

— All special operation left hand sides tore expressions. 

— Appropriate Expression Kinds: 

A.Special.Operation 


subtype Range.Constraint is ASIS_Ada_Program.Element; 

function In_Range_Operation_Right_Hand_Side 
(Special.Operation : in Expression) 
return Range.Constraint; 

— The right hand side for an IV.RAIGE operation is a range 

— Further Analysis: 

Use Constraint.Kind, Lover.Bound, and Upper.Bound operations 
in ASIS.Type.Definitions. 

— Appropriate Special.Operation Kinds: 

An.In.Range, 

A.Iot.In.Range 


function In.Type.Operation.Right.Hand.Side 
(Special.Operation : in Expression) 
return lame.Expression; 

— The right hand side for an Il.TYPE operation is a type mark which is 

— a name and can be further analyzed using this package. 

— Appropriate Special.Operation Kinds: 

An.In.Type, 

A_lot.In.Type 


Page 124 






21 October 1991 


STARS-RC-251901/003/00 


function Short.Circuit.Operation.Right.fland.Side 
(Special.Operation : in Expression) 
return Expression; 

— The right hand side for a short circuit operation can be any 

— expression kind which can be further analyzed using this package. 

— Appropriate Special.Operation Kinds: 

An.And.Then, 

An.Or.Else 


— EXPRESSION EVALUATION - LRM 4.5 

— STATIC VALUES 


function Is.Static (An.Expre :sion : in Expression) return Boolean; 

— Returns True if th ■> expression has a static value. 

— Raises Inappropriate.Program.Element 

— if Kind(An.Expression) = lot.An.Expression 

function Static.Value (An.Expression : in Expression) return String; 

— If Is.Static(An.Expression) then 

— Returns the string image of the value of the expression. 

— else returns a null string. 

— Rote that Static.Value for strings will not return the quotes around 

— a string literal. However, quotes embedded in a string literal are 

— doubled, just as they appear in the program text. 

— Raises Inappropriate.Program.Element 

— if Kind(An.Expression) = lot.An.Expression 


— TYPE CQ1VERSI0IS and QUALIFIED EXPRESSIONS 

— LRM 4.6, 4.7 


Page 125 







21 October 1991 


STARS-RC-251901 /003/00 


function Type.Mark (Type.Conversion.Or.Qualified.Expression : in Expression) 
return lame.Expression; 

— Returns the type nark of the type to shich the expression is 

— being converted or qualified. 

— Appropriate Expression Kinds: 

A_Type_Conversion 
A.Qualified.Expression 


f unction Converted.Or_Qualified.Expr ession 

(Type.Conversion.Or.Qualified.Expression : in Expression) 
return Expression; 

— Returns the expression being converted or qualified. 

— Appropriate Expression Kinds: 

A_Type_C°nversion 
A.Qualified.Expression 


— ALLOCATORS LRM 4.8 


subtype Subtype.Indication is ASIS.Ada.Progran.Element; 

— Use operations in this package and in ASIS_.Type.Definitions. 

function Allocation.Type (Allocator : in Expression) 
return Subtype.Indication; 

— Returns the subtype indication for the object being allocated. 

— Appropriate Expression Kinds: 

An_Allocation_Frosi_Subtype 


function Qualified.Object.Expression (Allocator : in Expression) 
return Expression; 

— Returns the qualified expression for the object being allocated. 

— Appropriate Expression Kinds: 

An.Allocation.From.Qualified.Expres sion 


Page 126 




21 October 1991 


STARS-RC-251901 /003/00 


end ASIS.Iames.And.Expressions; 


— ASIS PRELIMIIARY REVIEW VERSIOI 0.4 

— Sept 27, 1991 


with ASIS.Ada.Program; 
package ASIS.Statements ia 

— LRM Chapters 6, 6, 9, 11 

subtype Element is ASIS_Ada_Program.Element; 

— Use ASIS_Elements operations. 

subtype Statement is ASIS_Ada_Program.Element; 

— Use ASIS.Statements operations. 

subtype Declaration is ASIS_Ada_Program.Element; 

— Use ASIS.Declarations operations. 

subtype Expression is ASIS_Ada_Program.Element; 

— Use ASIS.Iames.And.Expression operations. 

subtype lame.Expression is ASIS.Ada.Program.Element; 

— Use ASIS.Iames.And.Expression operations. 

subtype Type.Definition is ASIS.Ada.Program.Element; 

— Use ASIS.Type.Definitions operations. 

subtype Identifier.Delinition is ASIS.Ada.Program.Element; 
— Use ASIS.Iames.And.Expression operations. 

subtype Identifier.Reference is ASIS.Ada.Program.Element; 
— Use ASIS.Iames.And.Expression operations. 


Page 127 








21 October 1991 


STARS-RC-251901 /003/00 


— STATEMEIT KIIDS 


type Statement.Kinds is 

— Simple statements: 

(A.Hull.Statement, 

An.Assignment.Statement, 

A.Procedure.Call.Statement, 

An_Exit.Statement, 

A.Retura.Statement, 

A_Goto_Statement, 

An_Entry_Call_Statement, 

A_Delay_Statement, 

An_Abort_Statement, 

A.Raise.Statement, 

A_Code_Statement, 

— Compound statements: 

An.If.Statement, 

A.Case.Statement, 

A.Loop.Statement, 

A.Block.Statement, 

An.Accept.Statement, 

A.Selective.Wait.Statement, 

A.Conditional.Entry.Call.Statement, 

A.Timed. Entry .Caill .Statement, 
lot.A.Statement); 

function Kind (A.Statement : in Statement) return Statement.Kinds; 

— Returns the kind of the statement. 

— Returns lot.A.Statement for any inappropriate element such as 

— a Type.Definition. Declaration, or lil.Element. 


— LABELED STATEMEITS - LRU 5.1 


Page 128 








21 October 1991 


STARS-RC-251901 /003/00 


function Is.Labeled (A_Statement : in Statement) return Boolean; 

— Returns True if the statement has a label. 

— Raises Inappropriate_Program_Element 

— if Kind(A_Statement) = Iot_A_Statement 


function Label.Iames (A.Statement : in Statement) return String; 

— Returns the Label.Xame(s) of the Statement. 

— The « and » delimiters are included in the string. 

— A null string is returned if no label is present 

— Raises Inappropriate.Program.Element 

— if Kind(A.Statement) = Iot_A_Statement 


— ASSIGIHE1T STATEHEITS - LRM S.2 


function Object.Assigned.To (Assignment.Statement : in Statement) 
return lame.Expression; 

— Returns the name of object to which the assignment is being made. 

— Appropriate Statement Kinds: 

An.Assignment.Statement 


function Assignment.Expression (Assignment.Statement : in Statement) 
return Expression; 

— Returns the expression on the right hand side of the assignment. 

— Appropriate Statement Kinds: 

An_Assignment.Statement 


— IF STATEHEITS - LRM 6.3 


Page 129 








21 October 1991 


STARS-RC-251901/003/00 


subtype If.Statement.Arm is ASIS.Ada.Program.Element; 

type If.Statement_Arm_Kinds is 

(An_If_Arm, 

An.Elsif.Arm, 

An.Else.Arm, 

lot.An.If.Statement.Arm); 

function If.Statement.Arm.Kind (Arm : in If.Statement.Arm) 
return If.Statement.Arm.Kinds; 

— Returns the kind of the if statement arm. 

— Returns Iot.An_If_Statement.Arm for any inappropriate element such as 

— a Type.Definition, Declaration, or lil.Element. 


subtype If.Statement.Arm.List is ASIS_Ada_Program.Element.List; 

function If.Statement.Arms (If.Statement : in Statement) 
return If.Statement.Arm.List; 

— Returns a list of the arms of the if statement in their order of 

— appearance. 

— Appropriate Statement Kinds: 

An.If.Statement 


function Condition.Ezpression (Arm : in If.Statement.Arm) return Expression; 

— Returns the condition expression for an if arm or an elsif arm. 

— Appropriate If.Statement.Arm Kinds: 

An.If.Arm 

An.Elsif.Arm 


subtype Statement.List is ASIS_Ada_Program.Element.List; 

function Arm.Statements (Arm : in If.Statement.Arm) return Statement.List; 

— Returns a list of the statements in an if statement arm. 


Page 130 






21 October 1991 


STARS-RC-251901/003/00 


— Raisas Inappropriate.Program.Element 

— if If_Statement_Arm_Kind(Ar®) = Iot.An_If_Statement.Arm 


— CASE STATEMEITS - LRM 5.4 

1unction Case.Expression (Case_Statament : in Statement) return Expression; 

— Returns the expression of the case statement that determines 

— which alternative will be taken. 

— Appropriate Statement Kinds: 

A.Case.Statement 


subtype Case_Statement_Altemative_List is ASIS_Ada_Program.Element_List; 

function Case_Statement_Altematives (Case.Statement : in Statement) 
return Case_Statement_Alternative_List; 

— Return a list of all alternatives of the case statement in their 

— order of appearance. 

— Appropriate Statement Kinds: 

A.Case.Statement 


subtype Case_Statement_Alteraative is ASIS_Ada_Program.Element; 

function Is.Vhen.Others (Case_Alternative : in Case_Stateaent_Alternative) 
return Boolean; 

— Returns True if the case statement alternative is an others choice. 

— Appropriate Major.Element Kinds: 

A_Case_Statement_Altemative 


subtype Choice.List is ASIS.Ada.Program.Element.List; 

function Case.Statement.Alternative.Choices 

(Case.Alternative : in Case.Statement.Alternative) 


Page 131 








21 October 1991 


STARS-RC-251901/003/00 


return Choice.List; 

— Returns a list of the ’WHEN <choice> I <choice>’ choices in their 

— order of appearance. 

— Further Analysis: 

Use ASIS.Type.Definitions Choices queries to extract more information. 


— Appropriate Major.Element Kinds: 
A.Case.Statement.Alternative 


function Case.Statement.Alternative.Statements 

(Case.Altemative : in Case.Statement.Altemative) 
return Statement.List; 

— Returns a list of the statements in the case statement alternative. 

— Appropriate Major.Element Kinds: 

A.Case.Statement.Alternative 


— LOOP STATEMENTS - LRM 5.5 


type Loop.Kinds is 

(A.For.Loop, 

A.Vhile.Loop, 

A.Simple.Loop, 
lot.A.Loop); 

function Loop.Kind (Loop.Statement : in Statement) return Loop.Kinds; 

— Returns the kind of the if loop statement. 

— Returns lot.A.Loop for any inappropriate element such as 

— a Type.Definition, Declaration, or lil.Element. 


function Loop.Simple.lame (Loop.Statement : in Statement) 
return Identifier.Definition; 

— Returns the Identifier.Definition of the simple name of the loop. 


Page 132 





21 October 1991 


STARS- RC-251901/003/00 


— A Iil_Eleaent is returned il the loop has no name. 

— Appropriate Statement Kinds: 

A_Loop_Statement 


junction Vhile.Condition (Loop.Statement : in Statement) return Expression; 

— Returns the condition expression associated uith the while loop. 

— Appropriate Statement Kinds: 

A_Loop_Statement whose Loop.Kind is A_Vhile_Loop 


Junction For_Loop_Parameter_SpeciJication (Loop.Statement : in Statement) 
return Declaration; 

— Returns the Declaration oJ the Loop_Parameter_SpeciJication. 

— Further Analysis: 

Use ASIS.Declarations operation IdentiJiers to get the 
IdentiJierJDeJinition oJ the loop parameter. 

— Appropriate Statement Kinds: 

A_Loop_Statement whose LoopJCind is A_For_Loop 


subtype Discrete.Range is ASIS_Ada_Program.Element; 

— Use ASIS.Type.DeJinitions operations to analyze discrete ranges. 

Junction Loop.Parameter.Range (Loop_Parameter_SpeciJication : in Declaration) 
return Discrete.Range; 

— Returns the Discrete.Range oJ the loop parameter. 

— Appropriate Declaration Kinds: 

A_Loop_Parameter_SpeciJication 


Junction Zs_Reverse_Loop_Parameter 

(Loop_Parameter_SpeciJication : in Declaration) 
return Boolean; 

— Returns True ij the reserved word reverse is present. 


Page 133 






21 October 1991 


STARS-RC-251901/003/00 


— Appropriate Declaration Kinds: 
A.Loop.Parameter.Specification 


function Loop.Statements (Loop.Statement : in Statement) 
return Statement.List; 

— Returns a list of the statements in the loop statement. 

— Appropriate Statement Kinds: 

A.Loop.Statement 


— BLOCK STATEMEITS - LRM S.6 


function Block.Simple.Vame (Block.Statement : in Statement) 
return Identifier.Definition; 

— Returns the Identifier.Definition of the simple name of the block. 

— A lil.Element is returned if the block has no explicit name. 

— Appropriate Statement Kinds: 

A.Block.Statement 


subtype Declarative.Item.List is ASIS_Ada_Program.Element.List; 

function Dedarative.Items (Block.Statement : in Statement) 
return Declarative.Item.List ; 

— Returns a list of the declarations, representation specifications, 

— and use clauses in the declarative part of the block. 

— A empty list indicates that there are no declarative items. 

— Appropriate Statement Kinds: 

A.Block.Statement 


function Block.Body.Statements (Block.Statement : in Statement) 
return Statement.List; 

— Returns a list of the statements in the block statement. 


Page 134 





21 October 1991 


STARS-RC-251901 /003/00 


— Appropriate Stateaent Kinds: 
A_Block_Stateaent 


subtype Exception.Handler.List is ASIS.Ada.Prograa.Eleaent.List; 

function Block.Exception.Bandlers (Block.Stateaent : in Stateaent) 
return Exception.Handler.List; 

— Returns a list of the exception handlers of the block. 

— Appropriate Stateaent Kinds: 

A.Block.Stateaent 


— EXIT STATEMEITS - LRU S.7 


function Exit.Loop.Iaae (Exit.Stateaent : in Stateaent) 
return Identifier.Reference; 

— Returns the naae of the exited loop. 

— A lil.Eleaent is returned if no loop naae is present. 

— Appropriate Stateaent Kinds: 

An.Exit.Stateaent 


function Exit.Condition (Exit.Stateaent : in Stateaent) return Expression; 

— Returns the when condition of the exit stateaent. 

— A lil.Eleaent is returned if no condition is present. 

— Appropriate Stateaent Kinds: 

An.Exit.Stateaent 


function Loop.Exited (Exit.Stateaent : in Stateaent) return Stateaent; 

— Returns the loop stateaent exited by the exit stateaent. 

— Appropriate Stateaent Kinds: 

An.Exit.Stateaent 








21 October 1991 


STARS-RC-251901 /003/00 


— RETURI STATEMEITS - LRM 6.8 

function Return.Expression (Retum.Statement : in Statement) 
return Expression; 

— Returns the expression in the return statement. 

— A Iil_Element is returned if no expression is present. 

— Appropriate Statement Kinds: 

A_Return_Statement 


— GOTO STATEMEITS - LRM 6.9 

function Goto.Label (Goto_Statement : in Statement) return String; 

— Returns the name of label specified by the goto statement. 

— Appropriate Statement Kinds: 

A.Goto.Statement 


function Destination.Statement (Goto.Statement : in Statement) 
return Statement; 

— Returns the named target statement specified by the goto statement. 

— Appropriate Statement Kinds: 

A_Goto_Statement 


— PROCEDURE CALL STATEMEITS - LRM 6.4 


function Called.Iame (Procedure_Or_Entry_Call_Statement : in Statement) 
return lame.Expression; 

— Returns the name of the called procedure or entry. The name of an 

— entry of a family takes the form of an indexed component. 

— Appropriate Statement Kinds: 


Page 136 









21 October 1991 


STARS-RC-251901/003/00 


A.Procedure.Call.Statement 
An.Entry.Call.Statament 


function Is.Implicitly.Declared 

(Procedure.Or_Entry_Call.Statement : in Statement) 
return Boolean; 

— Return* true if the procedure or entry call statement has no explicit 

— declaration associated with it. (EG. An implicit declaration of 

— a derived subprogram or an entry of a derived task type). 


function Called.Procedure (Procedure_Or_Entry_Call_Statement : in Statement) 
return Declaration; 

— Returns the declaration of the called procedure or entry. 

— If Is_Implicitly_Declared(Procedure_Or_Entry_Call_Statement) then 

— a lil.Element is returned. 

— Appropriate Statement Kinds: 

A.Procedure.Call.Statement 

An.Entry.Call.Statement 


— PARAMETER ASSOCIATION - LRM 6.4 

subtype Parameter.Association is ASIS.Ada.Program.Element; 

subtype Parameter.Association.List is ASIS.Ada.Program.Element.List; 

function Procedure.Call.Parameters 

(Procedure.Or.Entry.Call.Statement : in Statement; 
Include.Defaults : in Boolean False) 

return Parameter.Association.List; 

— Returns a list of parameter associations for the call. 

— If Include.Defaults is True: 

The (unspecified) default parameters mill also be included and, 
the list will be ordered to match the declaration order of the 
corresponding formal parameter specifications. 








21 October 1991 


STARS-RC-251901 /003/00 


— If Include.Defaults is False: 

Only explicit actual parameters will be included in the order they 
appeared in the program text. 

— An ASIS implementation may choose to always "Include Defaults" its 

— internal representation. If that is the case, the operation will 

— always behave as if Include.Defaults is True. 

— Appropriate Statement Kinds: 

A.Procedure.Call.Statement 

An_Entry_Call_Statement 


function Procedure.Call.Parameters.Include.Defanlts return Boolean; 

— Returns True if this implementation sill always “Include Defaults". 

— If that is the case, the Procedure.Call.Parameters operation will 

— always behave as if its parameter Include.Defaults is True. 


function Formal.Parameter (A_Parameter_Association : in Parameter.Association) 
return Identifier.Ref erence; 

— Returns the formal parameter simple name. 

— Accepts parameter associations and generic associations. 

— A lil.Element is returned if the parameter association was given in 

— positional notation. 

— An ASIS implementation may choose to always normalize named notation 

— to positional notation in procedure and entry calls. 

— Appropriate Major.Element Kinds: 

A.Parameter.Association 
An.Argument.Association 


function Is.Formal.Parameter.Iamed.Iotation.Supported return Boolean; 

— Returns True if this implementation will always normalize named 

— notation to positional notation in subprogram and entry calls. 

— If that is the case, the Formal.Parameter operation will 

— always return a lil.Element. 


Page 138 







21 October 1991 


STARS-RC-251901/003/00 


function Actual.Parameter (A.Parameter.Association : in Par^eter.Association) 
return Expression; 

— Returns the actual parameter expression. 

— Accepts parameter associations and generic associations. 

— Appropriate Major.Element Kinds: 

A.Parameter.Association 

An.Argument.Association 


— To map actual parameters to corresponding formal parameters: 

Create an actual parameter list by applying the function 
Actual.Parameter to each parameter association returned by 
Procedure.Call.Parameters with Indude.Defaults = True. 

Create a formal parameter list by applying the function 
ASIS.Declarations.Identifiers to each formal parameter 
specification returned by ASIS.Declarations.parameters. 

The Expression elements in the actual parameters list will have a 
one to one correspondence with the Identifier.Definition elements 
in the formal parameter list. 


— EITRY CALL STATEHEITS - LRM 9.6 

— Use PROCEDURE CALL STATEHEITS operations to analyze entry calls. 


function Family.Index (Entry.Call.Or.Accept.Statement : in Statement) 
return Expression; 

— Returns the entry index in the entry call statement or accept statement. 

— If the statement has no explicit entry index, a nil element is returned. 

— Appropriate Statement Kinds: 

An.Entry.Call.Statement 
An.Accept.Statement 


— ACCEPT STATEHEITS - LRM 9.6 


Page 139 






21 October 1991 


STARS-RC-251901/003/00 


function Accepted.Entry (Accept.Statement : in Statement) 
return Declaration; 

— Returns the declaration of the entry accepted in this statement. 

— Appropriate Statement Kinds: 

An.Accept.Statement 


function Accept.Entry.Simple.Iame (Accept.Statement : in Statement) 
return Identifier.Reference; 

— Returns the simple name of the entry following the reserved word accept. 

— Appropriate Statement Kinds: 

An.Accept.Statement 


subtype Parameter.Specification.List is ASIS.Ada.Program.Element.List; 

function Accept.Parameters (Accept.Statement : in Statement) 
return Parameter.Specification.List; 

— Returns a list of parameter specifications in the formal part 

— of the accept statement in the order of appearance. 

— A lil.Element.List is returned if the accept statement has no 

— parameters. 

— Results of this operation may vary across ASIS implementations. 

— Some implementations normalize all multiple parameter specifications into 

— an equivalent sequence of corresponding single parameter specifications. 

— See LRM 6.1(4). 

— Further Analysis: 

Use Identifiers to obtain the identifier list. 

Use Type.Mark to obtain the parameter type mark. 

Use Is.Initialized and Initial.Value to query the information 

— related to the presence of the default parameter initialization. 

— Appropriate Statement Kinds: 

An.Accept.Statement 


Page 140 








21 October 1991 


STARS-RC-251901 /003/00 


1unction Accept.Body.Statements (Accept.Statement : in Statement) 
return Statement.List; 

— Returns a list of the statements in the accept statement. 

— Appropriate Statement Kinds: 

An_Accept_Statement 


— DELAY STATEMEITS - LRH 9.6 


function Delay.Expression (Delay.Statement : in Statement) 
return Expression; 

— Returns the expression for the duration of the delay 

— Appropriate Statement Kinds: 

A.Delay.Statement 


— SELECT STATEMEITS - LRM 9.7 

— SELECTIVE WAIT - LRM 9.7.1 

— COVDITIOIAL EITRY CALLS - LRM 9.7.2 

— TIMED EITRY CALLS - LRM 9.7.3 


subtype Select.Statement.Arm is ASIS.Ada.Program.Element; 

type Select.Statement.Arm.Kinds is 

(A.Selective.Wait.Select.Arm, 

A_Selective.Wait_Or.Arm, 

A_Conditional.Entry_Call_Select.Arm, 
A_Timed.Entry_Call_Select.Arm, 

A_Timed_Entry_Call_Or_Arm, 

An.Else.Arm, 

lot.A.Select.Statement.Arm); 

function Select.Statement.Arm.Kind (Arm : in Select.Statement.Arm) 
return Select.Statement.Arm.Kinds; 


Page 141 






21 October 1991 


STARS-RC-251901 /003/00 


— Returns the kind of the select statement arm. 

— Returns lot.A.Select.Statement.Arm for any inappropriate eleffi.it suer, --s 

— a Type_Definition. Declaration, or Iil_Element. 


subtype Select_Statement_Arm_List is ASIS_Ada_Program.Elemeu'v..List; 

function Select_Statement_Arms (Select_Statement : in Statement) 
return Select_Statement_Arm_List; 

— Returns a list of the arms of the Select statement in their order of 

— appearance. 

— Appropriate Statement Kinds: 

A.Selective.Wait.Statement 

A_Conditional_Entry_Call_Statement 

A_Timed_Entry_Call_Statement 


subtype Select.Alternative is ASIS.Ada.Program.Element; 

type Select.Altemative.Kinds is 

(An.Accept.Alternative, 

A.Delay.Altemative, 

A.Terminate_Alt ernative, 
lot.A.Select.Alternative); 

function Select.Altemative.Kind (Alternative : in Select.Alternative) 
return Select.Alternative.Kinds; 

— Returns the kind of the select alternative. 

— Returns lot.A.Select.Alternative for any inappropriate element such as 

— a Type.Definition, Declaration, or lil.Element. 


function Arm.Select.Altemative (Arm : in Select.Statement.Arm) 
return Select.Alternative; 

— Returns the select alternative in the select statement arm. 

— Appropriate Select.Statement.Arm Kinds: 

A_Selective.lfait_Select.Arm 


Page 142 







21 October 1991 


STARS-RC-251901/003/00 


A.Selective.Wait_0r.Arm 


function Is.Guarded (Alternative : in Select.Alternative) return Boolean; 

— Returns true if a select alternative has a gu^rd. 

— Appropriate Select.Alternative Kinds: 

An.Accept.Alternative 
A.Delay.Alternative 
A.Terminate.Alternative 


function Guard (Alternative : in Select.Alternative) return Expression; 

— Returns the conditional expression guarding the alternative. 

— Returns a nil element if there is no guard. 

— Appropriate Select.Alternative Kinds: 

An.Accept.Alternative 

A.Delay.Alternative 

A.Terminate.Alternative 


function Select.Alternative.Statements (Alternative : in Select.Alternative) 
return Statement.List; 

— Returns a list of the statements in the the accept or delay alternative 

— including the accept statement and delay statements themselves. 

— Appropriate Select.Altemative Kinds: 

An.Accept.Alternative 

A.Delay.Alternative 


function Or.Statements (Timed.Entry_Call_Or.Arm : in Select.Statement.Arm) 
return Statement.List; 

— Returns a list of statements contained in the or arm of a time.entry.call. 

— Appropriate Select.Statement.Arm Kinds: 

A.Timed.Entry.Call.Or.Arm 


function Else.Statemen ilse.Arm : in Select.Statement.Arm) 


Page 143 





21 October 1991 


STARS-RC-251901/003/00 


return Statement.List; 

— Returns a list oi statements contained in the else arm of a 

— selective.uait or conditional.entry.call. 

— If no else part exists, an empty list is returned. 

— Appropriate Select.Statement.Axn Kinds: 

An_El8e_Arm 


function Entry_Call_Statements (Arm : in Select.Statement.Arm) 
return Statement.List; 

— Returns the statements associated with the conditional or timed entry 

— call, including the actual entry call statement. 

— Appropriate Select.Statement.Arm Kinds: 

A_Conditional_Entry.Call_Select.Arm 

A_Timed_Entry_Call_Select_Arm 


— ABORT STATEHEITS - LRU 9.10 

subtype lame.Expression.List is ASIS.Ada.Program.Element.List; 

function Aborted.Tasks (Abort.Statement : in Statement) 
return lame.Expression.List; 

— Returns a list of the aborted tasks. 

— Appropriate Statement Kinds: 

An.Abort.Statement 

— EXCEPTION HAIDLERS - LRM 11.2 

subtype Exception.Handler is ASIS.Ada.Program.Element; 

function Is.Others.Handler (Handler : in Exception.Handler) return Boolean; 

— Appropriate Najor.Element Kinds: 


Page 144 









21 October 1991 


STARS-RC-251901 /003/00 


An.Exception.Handler 


function Exception.Choices (Handler : in Exception_Handler) 
return Choice.List; 

— Returns a list of the ’HHEI <choice> I <choice>’ choices in their 

— order of appearance. 

— Further Analysis: 

Use the Type.Definitions package’s CHOICES queries to extract 
further information about the <choice>s. 

— Appropriate Major.Element Kinds: 

An.Exception.Handler 


function Handler.Statements (Handler : in Exception_Handler) 
return Statement_List; 

— Returns a list of the statements in the exception handler. 

— Appropriate Major.Element Kinds: 

An_Exception_Handler 


-- RAISE STATEME1TS - LRU 11.3 

function Raised.Exception (Raise.Statement : in Statement) 
return lame.Expression; 

— Returns the name of the raised exception. 

— A lil.Element is returned if there is no explicitly named exception. 

— Appropriate Statement Kinds: 

A_Raise_Statement 


— CODE STATEMEITS - LRM 13.8 

function Qualified.Expression (Code.Statement : in Statement) 
return Expression; 


Page 145 








21 October 1991 


STARS-RC-251901 /003/00 


— Returns the qualified expression representing the code statement. 

— Appropriate Stateaent Kinds: 

A_Code_Statement 


■ 

end ASIS.Statements; 


— ASIS PRELIMIIARY REVIEW VERSIOI 0.4 

— Sept 27, 1991 


with ASIS_Ada_Progra«; 

package ASIS.Representation.Clauses is 

— LRM Chapter 13 

subtype Element is ASIS_Ada_Program.Element; 

— Use ASIS.Elements operations. 

subtype Representation.Clause is ASIS.Ada.Program.Element; 
— Use ASIS_Representation_Clauses operations. 

subtype Declaration is ASIS_Ada_Prograa.Element; 

— Use ASIS.Declarations operations. 

subtype Expression is ASIS_Ada_Program.Element; 

— Use ASIS.Iaaes.And.Expression operations. 

subtype Type.Definition is ASIS.Ada_Program.Element; 

— Use ASIS.Type.Definitions operations. 

subtype Identifier.Reference is ASIS.Ada.Program.Eleaent; 
— Use ASIS.Iaaes.And.Expression operations. 


Page 146 











21 October 1991 


STARS-RC-251901/003/00 


subtype Identifier.Definition is ASIS.Ada_Program.Element; 
— Use ASIS-Iaaes.And-Expression operations. 


— REP RESEAT AUDI CLAUSE KIIDS 


type Representation_Clau8e_Kinds is 
(A.Length.Clause, 

An_Enumeration.Representation.Claus e, 
A.Record-Representation.Clause, 

An_Address_Clause, 

Iot_A_Representation_Clause); 

function Kind (Clause : in Representation-Clause) 
return Representation_Clause_Kinds; 

— Returns the kind of the Representation-Clause 

— Returns Iot_A_Representation_Clause for any inappropriate element 

— such as a Statement, Declaration, or lil.Element. 


function Associated-Type (Clause : in Representation-Clause) 
return Type-Definition; 

— Returns the definition of the type specified in the length clause, 

— enumeration representation clause or record representation clause. 

— Raises Inappropriate_Program_Element 

— if Kind(Clause) = Iot-A_Representation_Clause 


— LEIGTH CLAUSES - 13.2 


type Length-Clause-Attribute-Kinds is 


(A_Size_Attribute, 

A-Collection_Storage_Size_Attribute, 
A_Task-Storage-Size_Attribute, 
A.Small.Attribute, 
lot-A-Length.Clause.Attribute); 


-- LRM 13.2(a) 

— LRM 13.2(b) 

— LRM 13.2(c) 

— LRM 13.2(d) 


Page 147 








21 October 1991 


STARS-RC-251901/003/00 


function Length.Clause.Attribute.Kind 

(A.Length.Clause : in Representation.Clause) 
return Length.Clause.AttributeJCinds; 

— Returns the kind of the Length.Clause.Attribute. 

— Returns lot.A.Length.Clause.Attribute for any inappropriate element 

— such as a Statement, Declaration, or lil.Element. 


function Associated.Size (A_Type_Definition : in Type.Definition) 
return Expression; 

— Returns the expression that describes the size associated with a type 

— definition if there is a representation clause associated with this type. 

— A lil.Element is returned if no associated representation clause exists. 

— Raises Inappropriate_Program_Element 

— if ASIS_Type_Definitions.Kind(A_Type_Definition) = Iot.A_Type.Definition 


function Associated.Storage.Size (A.Type.Definition : in Type.Definition) 
return Expression; 

— Returns the expression that describes the storage.size associated 

— with a type definition. 

— A lil.Element is returned if no associated representation clause exists. 

— Raises Inappropriate.Program.Element 

— if ASIS_Type_Definitions.Kind(A_Type_Definition) = Iot.A_Type.Definition 


— EIUMERATIO* REPRESEITATIOI CLAUSES - 13.3 


function Associated.Enumeration.Literal.Representation 
(Enumeration.Literal : in Identifier.Definition) 
return Expression; 

— Returns the expression that describes the representation of 

— enumeration literal. 


Page 148 





21 October 1991 


STARS-RC-251901 /003/00 


— Raises Inappropriate.Program.Element 

— if ASIS_Iames_And_Expression.Kind(Enuaeration_Literal) 

/= An.Enumeration.Literal 


function Enumeration_Type.Simple.Iame 

(Enumeration.Clause : in Representation.Clause) 
return Identifier_Reference; 

— Returns the identifier reference of the type simple name in 

— the enumeration representation clause. 

— Appropriate Representation_Clause Kinds: 

An_Enumeration.Representation.Claus e 


function Representation Aggregate 

(Enumeration.Clause : in Representation.Clause) 
return Expression; 

— Returns the aggregate of the representation clause. 

— Appropriate Representation.Clause Kinds: 

An.Enumeration.Representation.Clause 


— RECORD REPRESEITATIO* CLAUSES - 13.4 


function Associated_Record_Type_Representation 
(Record.Type : in Type.Definition) 
return Representation.Clause; 

— Returns the record representation clause associated with the 

— record type definition. 

— A lil.Element is returned if there is no associated representation 

— clause. 

— Appropriate Type.Definition Kinds: 

A.Record.Type.Definition 


function Associated.Record.Component.Representation 


Page 149 






21 October 1991 


STARS-RC-251901 /003/00 


(Record.Component : in Declaration) 
return Representation.Clause; 

— Returns the record representation clause associated with the 

— record type that encloses the record component declaration. 

— A lil.Element is returned if there is no associated representation 

— clause. 

— Appropriate Declaration Kinds: 

A.Component.Declaration 
A.Discriminant.Specification 


function Record.Type.Simple.lame (Record.Clause : in Representation.Clause) 
return Identifier.Reference; 

— Returns the identifier reference of the type simple name in the 

— representation clause. 

— Appropriate Representation.Clause Kinds: 

A_Record_Repre8entation_Clau8e 


function Alignment.Expression (Record.Clause : in Representation.Clause) 
return Expression; 

— Returns the alignment expression for the representation clause. 

— A lil.Element is returned if an alignment expression is not present. 

— Appropriate Representation.Clause Kinds: 

A.Record.Representation.Clause 


— COMPOIEIT CLAUSES - 13.4 


subtype Component.Clause is ASIS.Ada.Program.Element; 

subtype Component.Clause.List is ASIS.Ada.Program.Element.List; 

function Component.Clauses (Record.Clause : in Representation.Clause) 
return Component.Clause.List; 


Page 150 









21 October 1991 


STARS-RC-251901/003/00 


— Returns a list of the component clauses of the record clause in order 

— of appearance. 

— A lil list is returned if the representation clause has no component 

— clauses. 

— Appropriate Representation.Clause Kinds: 

A_Record_Representation_Clause 


function Component_Simple_Iame 

(Record_Component_Clause : in Component.Clause) 
return Identifier.Reference; 

— Returns the identifier reference of the name of the component. 

— Appropriate Ha jor.Element_Kind: 

A_Component_Clause 


function Component.Offset (Record_Component_Clause : in Component.Clause) 
return Expression; 

— Returns the offset expression for the component. 

— Appropriate Hajor_Element_Kind: 

A.Component.Clause 


subtype Range.Constraint is ASIS.Ada.Program.Element; 

function Component.Range (Record.Component.Clause : in Component.Clause) 
return Range.Constraint; 

— Returns the range constraint for the component. 

— Appropriate Major.Element.Kind: 

A.Component.Clause 


— ADDRESS CLAUSES - 13.5 


Page 151 




21 October 1991 


STARS-RC-251901 /003/00 


function Associated.Address (Identifier : in Identifier_Definition) 
return Representation.Clause; 

— Returns the address clause associated uith the identifier. 

— A lil.Element is returned if no associated address clause exists. 

— Raises Inappropriate.Program.Element if the element is a lil.Element. 


function Entity.Simple.Iame (Address.Clause : in Representation.Clause) 
return Identifier_Reference; 

— Returns the identifier reference of the entity named in 

— the address clause. 

— Appropriate Representation_Clause Kinds: 

An_Address_Clause 


function Addressed.Declaration (Address.Clause : in Representation_Clause) 
return Declaration; 

— Returns the declaration of the entity shose address is specified. 

— Appropriate Representation.Clause Kinds: 

An.Address.Clause 


function Address.Expression (Address.Clause : in Representation.Clause) 
return Expression; 

— Returns the simple expression for the address of the entity. 

— Appropriate Representation.Clause Kinds: 

An_Address.Clause 


end ASIS.Representation.Clauses; 


Page 152 











21 October 1991 


STARS-RC-251901/003/00 


— ASIS PRELIMIIARY REVIEW VERSIOI 0.4 

— Sept 27, 1991 


with ASIS.Ada.Program; 
package ASIS_Text is 


— This package encapsulates a set ol operations to access the text of 

— ASIS Elements. It assumes no knowledge ol the existence, location, or 

— form ol the program text. 

— The text ol a program consists ol the texts ol one or more 

— compilations. The text ol each compilation is a sequence ol separate 

— lexical elements. Each lexical element is either a delimiter, an 

— identilier (which may be a reserved word), a numeric literal, a character 

— literal, a string literal, or a comment. 

— Each ASIS Element has a text image whose value is a series ol characters 

— that lorms the text span ol the Element. The text Bpan covers all the 

— characters Irom the lirst character ol the Element through the last 

— character ol the Element over the range ol lines. 


subtype Element is ASIS.Ada.Program.Element; 


Maximum_Line_Length : ASIS_Ada_Program.ASIS_Integer 
renames ASIS.Ada.Program.Maximum.Line.Length; 

— A constant value, Implementation delined. 

Maximum.Line.lumber : ASIS.Ada.Program.ASIS.Integer 
renames ASIS.Ada.Program.Maximum.Line.lumber; 

— A constant value. Implementation delined. 

subtype Line.Iumber is ASIS.Ada.Program.Line.Iumber; 

— The range ol line numbers within the text ol programs. 

— The value 0 is used to indicate an invalid line number. 


Page 153 















— TEXT SPAIS 


type Span is record 


Page 154 









21 October 1991 


STARS-RC-251901 /003/00 


First.Line 
First.Column 
Last.Line 
Last.Column 
end record; 

— A single text position is identified by a line number and 

— a col umn representing the character position within the line. 

— An implementation may choose to ignore character position values 

— in which case the function Is.Span.Column.Position.Supported returns 

— False; 

— The text of an element may span one or more lines. The Text span 

— of an element identifies the lover and upper bound of a span 

— of text positions. 

— Spans and position give client tools the flexibility to access text 

— through this package or through the external text file if any. 


: Line.Iumber := Line.Iumber’First; 

: Character.Position := Character.Position’First; 
: Line.Iumber := Line.Iumber’First; 

: Character.Position := Character.Position’First; 


function lil.Span return Span; 

— Returns a span with a void or nil value (the default initialization). 


function Element.Span (Program.Element : in Element) return Span; 

— Returns the span of the given element. 

— Returns a lil.Span if not Is_Text_Available(Program_Element), 

— and for any inappropriate element. 


function Compilation.Unit.Span (Program.Element : in Element) return Span; 

— Returns the span of the text comprising the enclosing compilation unit 

— of the given element. 

— Returns a lil.Span if text is not available for the enclosing 

— compilation unit, and for any inappropriate element. 


function Compilation.Span (Program.Element : in Element) return Span; 


Page 155 








21 October 1991 


STARS-RC-251901 /003/00 


— Returns the span of the text comprising the compilation to which 

— the element belongs. The text span may include one or more 

— compilation units. 

— Returns a lil.Span if text is not available lor the enclosing 

— compilation unit, and lor any inappropriate element. 


— LUES 

— Lists can be indexed to get each individual line. 

— The bounds ol the lists returned correspond to the line numbers ol 

— the text. 

lunction Length (Text : in Line) return Character.Position; 

— Returns the length ol the line. 


lunction Lines (Program.Element : in Element) return Line.List; 

— Returns a list ol lines covering the span ol the 

— given program element. 

— Returns a Mil list il not Is_Text_Available(Program_Element), 

— and lor any inappropriate element. 


lunction Lines 

(Program.Element : in Element; 

Text.Span : in Span) 
return Line.List; 

— Returns a list ol lines covering the given span 

— Irom the compilation containing the given program element. 

— This operation can be used to access lines Irom text outside the 

— span ol an element, but still within the compilation. For example, 

— lines containing preceding comments or lines between two elements. 

— Returns a lil list il not Is_Text_Available(Program_Element), 

— and lor any inappropriate element. 


Page 156 







21 October 1991 


STARS-RC-251901 /003/00 


— Raises Inappropriate.Line.Iumber if the Span defines a lil.Span or a line 

— whose number is outside the range of text lines that can be accessed 

— through the element. 


function Lines 

(Program.E?ement : in Element; 

First_Line : in Line_Iumber; 

Last.Line : in Line.Iumber) 

return Line_List; 

— Returns a list of lines covering the given line numbers 

— from the compilation containing the given program element. 

— This operation can be used to access lines from text outside the 

— span of an element, but still within the compilation. 

— Returns a Mil list if not Is_Text_Available(Program_Element), 

— and for any inappropriate element. 

— Raises Inappropriate_Line_Iumber if the Span defines a Hil.Span or a line 

— whose number is outside the range of text lines that can be accessed 

— through the element. 


— IMAGES 

subtype ASIS.Character is ASIS_Ada_Program.ASIS_Character; 

— The component type of the ASIS.String type. 

subtype ASIS_String is ASIS_Ada_Program.ASIS_String; 

— ASIS.String values form lexical elements in the text of programs. 

— The ASIS.String type allows implementations to include non-ASCII 

— characters in comments appearing in the text of programs. 

Hil.String : ASIS.String renames ASIS.Ada.Program.Sil.String; 

— A constant value 


Page 157 






21 October 1991 


STARS-RC-251901 /003/00 


function Image_Delimiter return ASIS_String; 

— Returns the ASXS.String used as a delimiter separating 

— individual lines of text within the ASIS.String Image of an element. 


function Image (Program.Element : in Element) return ASIS.String; 

— Returns an ASIS.String image of the element. 

— The image of an element may span more than one line, in which 

— case the ASIS_Character returned by the function Image_Delimiter 

— separates the individual lines. 

— Returns a Iil_String if not Is_Text_Available(Program_Element), 

— and for any inappropriate element. 

— IOTE: The image of a large element may exceed the range of an 

— ASIS_String in which case the exception Failed sill be raised. 

— Use the Lines operation to oporation on the image of large elements. 


function Image (Text : in Line) return ASIS.String; 

— Returns an ASIS_String image of the entire line. 

— The image of a single lexical element can be sliced from the 

— ASIS_String value using the first or last column character positions 

— from the span of an Element. 


function lon.Comment.Image (Text : in Line) return ASIS.String; 

— Returns an ASIS.String image of the lexical elements of a line 

— up to but excluding any comment on that line. 

— other than a comment. 

— The value returned includes any preceding white space characters. 


function Comment.Image (Text : in Line) return ASIS.String; 

— Returns an ASIS.string image of any comment on that line excluding 

— any lexical elements preceding the comment. 

— The value returned includes the two adjacent hyphens "—". 


Page 158 






* 21 October 1991 


STARS-RC-251901 /003/00 


— A lil-String is returned if the line has no comment. 

— The bounds of the ASIS.String correspond to the range of 

— Character.Positions the comment occupies in the line. 


— TEXT AVAILABILITY 

function Is_Text_Available (Program-Element : in Element) return Boolean; 

— Returns True if the implementation can return a valid text image for 

— the given element. 

— An implementation may choose to make text available only for certain 

— kinds of elements. 


function Is_Line_Iumber_Supported return Boolean; 

— Returns True if the implementation can return valid line 

— numbers for elements. 

— An implementation may choose to ignore line number values 

— in vhich case this function returns False; 


function Is.Span-Column-Position.Supported return Boolean; 

— Returns True if the implementation can return valid character 

— positions for elements. 

— An implementation may choose to ignore column character position 

— values vithin spans in vhich case this function returns False; 


function Is-Commentary-Supported return Boolean; 

— Returns True if the implementation can return comments. 

— An implementation may choose to ignore comments in the text 

— in vhich case the function Is.Commentary-Supported returns False; 


Page 159 





. 1 

*' 21 October 1991 


STARS-RC-251901 /003/00 


— LIME DESTRUCTOR 


procedure Dissociate (A.Line : in out Line); 

— A Line of length 0 is returned. 

— Postconditions: (if no exception is raised) 

Depending on the ASIS implementation, storage for Line 
may be deallocated. 

Length(A_Line) = 0 


procedure Dissociate (A_Line_List : in out Line.List); 

— Severs associations made to the Line.List. 

— A Iil_Line_List value is returned. 

— Postconditions: (if no exception is raised) 

Depending on the ASIS implementation, storage for each Line 
may be deallocated. 


end ASIS_Text; 


Page 160 









