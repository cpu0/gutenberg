AD-A278 036 >N PAGE 


Fanr. Apfxwtl 
CPU No.' 


PuWc reporting bon* 
and maintaining the t 
•uggaetione lor tadu 
22202-4302. and lo tK». 


«t» regar d ing the burden aa d nime of any ether aapad ol the on« ac li en ot i nfa m man . Indudag 
fcdor mm inn Opor ati ona and Rape d ? Iflt JeHaraon Derie H ghea». Stria 1304. Atiraton, VA 
and Budget, Wvhington, DC 20603 ^-\ 





-~Tu9 


- , L+A. / Vt 4 * ‘iH0 -jh- 1»95 

• l//ix / > ^ 16 


Tl-P 


t/, r ^ - 'j l 


/^u+Kc r j ; 

uj dr V - P^V+v- sc^ A r 5 



PT-5T7W«! :TT?Wr TeTTTi f«IiTTJrcTX«?! s 


NCY NAME(S) AN 



:TT7Tt^ ,T' 


Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301-3080 


10. 
AGENCY 


DTIC 



This docuxnsnt has been approved 
far public t«lsas« and sals; its 
distribution is unlirnif d. 


(Maximum 200 


t 


:, ‘ y -s_ 


K u_ • ^ '■ I „ 


/ A X 


?/ /) r ••’ .- N £ V b >< l'-'-A 

f-of* I "7u \r <r: ) L K.r. Ht r W* $ b‘ 


c\c V Tr 


r o C'. \ •>( >j —J_Ai tP A A At cU ‘ti or , , C h l (1 P 


b-> r€ 


--w • ntj., f- o tl P ^ - 


l ' .r<L 


a r P 


lP r+> 1; (por^V, Co.4- ..q ;.r* )j \){ r 5 •oo ^ h 


r-mew* 



yf . r- . ^ , /P Co^p, ! c r i/(*. St*. 15 - NU 

A' |/,. i. Tfs J .IT 

Tp ; > : /„> P. L ' P- ■ /</!---^rp -/:^P /) ,4r>- 


18. SECURITY 19. SECURITY 20, LIMITATION OF 

c CLASSIFICATION 

UNCLASSIFIED UNCLASSIFIED UNCLASSIFED 


, (Rbv. 
Proscribed by ANSI Sid. 


BU S 


r 7JB-r; 




























AVF Control Number: AVF-VSR-582.0394 
Date VSR Completed: March 14, 1994 

94-02-14-TLD 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 940305W1.11335 
TLD Systems, Ltd. 

TLD Comanche VAX/i960 Ada Compiler System, Version 4.1.1 
VAX Cluster under VMS 5.5 «> 

Tronix JIANG Execution Vehicle (i960MX) 
under TLD Real Time Executive, Version 4.1.1 



(Pinal) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


« 


DTIC QUALITY INSPECTED 3 


94-11000 




94 


4 ll 11® 










Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 5 March 1994. 

Compiler Name and Version: TLD Comanche VAX/i960 Ada Compiler System, 

Version 4.1.1 

Host Computer System: DEC Local Area Network VAX Cluster (comprising 

2 MicroVAX 3100 Model 90 machines) (VMS 5.5) 


Target Computer System: Tronix JIAWG Execution Vehicle (i960MX) 

wider TLD Real Time Executive (TLDrtx) 
(Domain Configuration), Version 4.1.1 

Customer Agreement Number: 94-02-14-TLD 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940305W1.11335 
is. awarded to TLD Systems, Ltd. This certificate expires two years after- 
MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


•£o^ r e 

Ada Validation Facility^ 

Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


JSQ* 

Ada Vi 



organization 

Director,^Co^piter and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office ' 

David R. Basel 
Deputy Director 

Defense Information Systems Agency, 
Center for Information Management 








DECLARATION OF CONFORMANCE 


Customer: TLD Systems, Ltd. 

Ada Validation Facility: 645 C-CSG/SCSL 

Wright - Patterson AFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: TLD Comanche VAX/i960 Ada 

Compiler System, Version 4.1.1 

Digital Local Area Network VAX Cluster 
executing on (2) MicroVAX 3100 Model 90 
under VAX/VMS 5.5. 

Tronix JIAWG Execution Vehicle (i960MX) 
running TLD Real Time Executive (TLDrtx), 
(Domain Configuration), Version 4.1.1 


Host Computer System: 


Target Computer System: 


* 


Customer's Declaration 


I, the undersigned, representing TLD Systems, Ltd., declare that TLD 
Systems, Ltd. has no knowledge of deliberate deviations from the Ada 
Language Standard ANSI/MIL-STD-1815A in the implementation listed in this 
declaration executing in the default mode. The certificates shall be 
awarded in-Tlfi Systems, Ltd.'s corporate name. 



Date: 10 February 1994 


vax/x960/tronxx 


PAGE 1 








TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro92] against the Ada Standard [Ada83] using the 
.current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
any technical terms used in this report, the reader is referred to (Pro92). 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro92] Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides, a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Sane of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 




INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 





INTRODUCTION 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an agreement 

with an AVF which specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for which 
validation status is realized. 

Host Computer A computer system where Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form n <section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implementation either by AVF testing or by registration [Pro92]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this implementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


-2 V 1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

, C35507L 

C35507N 

C35507O 

C35508M 

C35508N 

C35702A 

C43004A 

C45114A 

C45346A 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

C83026A 

B83026B 

C83041A 

C97116A 

C98003B 

BA2011A 

CC1223A 

BC1226A 

CC1226B 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A41E 

CD2A87A 

CD2B15C 

CD4022D 

CD4024B 

CD4024C 

CD5111A 

CD7004C 

ED7005D 

AD7201A 

AD7201E 

CD7204B 

CD9005A 

CD9005B 

CDA201E 

CE2119B 

CE2205B 

CE2405A 

CE3411B 

CE3412B 

CE3607B 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 


C32203A 

C34006D 

C35507K 

C35507P 

C35508I 

C35508J 

C35702B 

C3731QA 

B41308B 

C45612A 

C45612B 

C45612C 

B49008B 

A54B02A 

C55B06A 

B83022H 

BB3025B 

B83025D 

B85001L 

C86001F 

C94021A 

CB7001A 

CB7001B 

CB7004A 

BC3009B 

BD1B02B 

BD1B06A 

CD2A23E 

CD2A32A 

CD2A41A 

BD3006A 

BD4008A 

CD4022A 

CD4024D 

CD4031A 

CD4051D 

CD7005E 

AD7006A 

CD7006E 

AD7206A 

BD8002A 

BD8004C 

CE2107I 

CE2117A 

CE2117B 

CE3111C 

CE3116A 

CE3118A 

CE3607C 

CE3607D 

CE3812A 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Conmentaries are included as 
appropriate. 


2-1 



IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more jits than SYSTEM. MAXJDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C24113H..K (4 tests) have a line length greater than the maximum allowed 
line length of 120 for this implementation. 


The following 20 tests check for the predefined type I£NG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined 
integer type with a name other than INTEGER, LCNG_INTEG£R, or 
SHORT_INTEGER; for this implementation, there is no such type. 

C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT FLQAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LGNG_FLQAT, or SH0RT_FLQAT; for this 
implementation, there is no such type. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45536A, C46013B, C46031B, C46033B, and C46034B contain length clauses 
that specify values for 'SMALL that are not powers of two or ten; this 
implementation does not support such values for 'SMALL. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHiNE_OVERFLOWS is TRUE. 

D64005F..G (2) tests use 10 levels of recursive procedure calls nesting; 
this level of nesting for procedure calls exceeds the capacity of the 
conpiler. 


2-2 



IMPLEMENTATION DEPENDENCIES 


B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA3004E..F (2 tests) check that a program will execute when an optional 
body of one of its library packages is made obsolete; this 
implementation introduces additional dependences of the package 
declaration on its body as allowed by LRM 10.3(8), and thus the library 
unit is also made obsolete. (See Section 2.3.) 

LA5007S..T (2 tests) check that a program cannot execute if a needed 
library procedure is made obsolete by the recompilation of a library 
unit named in that procedure's context clause; this implementation 
determines that the recompiled unit's specification did not change, and 
so it does not make the dependent procedure obsolete. (See Section 
2.3.) 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A53A checks operations of a fixed-point type for which a length 
clause specifies a power-of-ten TYPE'SMALL; this implementation does not 
support decimal 'SMALLs. (See section 2.3.) 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 ruse length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

The following 264 tests check operations on sequential, text, and direct 
access files; this implementation does not support external files (See 
Section 2.3 regarding CE3413B): 


CE2102A..C 

(3) 

CE2102G..H 

(2) 

CE2102K 


CE2102N..Y 

(12) 

CE2103C..D 

(2) 

CE2104A..D 

(4) 

CE2105A..B 

(2) 

CE2106A..B 

(2) 

CE2107A..H 

(8) 

CE2107L 


CE2108A..H 

(8) 

CE2109A..C 

(3) 

CE2110A. .D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CE2120A..B 

(2) 

CE2201A. .C 

(3) 

EE2201D..E 

(2) 

CE2201F..N 

(9) 

CE2203A 


CE2204A. .D 

(4) 

CE2205A 


CE2206A 


CE2208B 


CE2401A..C 

(3) 

EE2401D 


CE2401E..F 

(2) 

EE2401G 


CE2401H..L 

(5) 

CE2403A 


CE2404A..B 

(2) 

CE2405B 


CE2406A 


CE2407A..B 

(2) 

CE2408A..B 

(2) 

CE2409A..B 

(2) 

CE2410A..B 

(2) 

CE2411A 


CE3102A. .C 

(3) 

CE3102F..H 

(3) 

CE3102J..K 

(2) 

CE3103A 


CE3104A..C 

(3) 

CE3106A..B 

(2) 

CE3107B 


CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A. .B 

(2) 

CE3111D..E 

(2) 

CE3112A..D 

(4) 

CE3114A. .B 

(2) 

CE3115A 


CE3119A 


EE3203A 


EE3204A 


CE3207A 


CE3208A 


CE3301A 


EE3301B 


CE3302A 


CE3304A 


CE3305A 


CE3401A 


CE3402A 


EE3402B 


CE3402C..D 

(2) 

CE3403A..C 

(3) 

CE3403E..F 

(2) 

CE3404B..D 

(3) 

CE3405A 


EE3405B 


CE3405C..D 

(2) 

CE3406A. .D 

(4) 

CE3407A..C 

(3) 

CE3408A..C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C..E 

(3) 

EE3410F 


CE3411A 


CE3411C 



2-3 




IMPLEMENTATION DEPENDENCIES 


CE3412A 


EE3412C 


CE3413A..C (3) 

CE3414A 


CE3602A..D (4) 

CE3603A 


CE3604A..B (2) 

CE3605A..E 

(5) 

CE3606A..B 

(2) 

CE3704A..F 

(6) 

CE3704M..0 (3) 

CE3705A. .E 

(5) 

CE3706D 


CE3706F..G 

(2) 

CE3804A..P (16) 

CE3805A. .B 

(2) 

CE3806A..B 

(2) 

CE3806D..E (2) 

CE3806G..K (2) 

CE3904A..B 

(2) 

CE3905A..C 

(3) 

CE3905L 


CE3906A..C (3) 

CE3906E..F 

(2) 


CE2103A, CE2103B, and CE3107A use an illegal file name in an attempt to 
create a file and expect NAME__ERROR to be raised; this implementation 
does not support external files and so raises USE ERROR. (See section 
2.3.) 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 63 tests. 

Note: CD2A81A is subject to two, distinct modifications as described below 
(the test name is marked with an asterisk). 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22005Z B24009A B25002A B26005A B44004D B59001E 
B73004B B83033B BA1020C BA1020F BA1101C BA2001E 
BA3006A BA3013A 

C34009D and C34009J were graded passed by Evaluation Modification as directed 
by the AVQ. These tests check that 'SIZE for a composite type is greater 
than or equal to the sum of its components' 'SIZE values; but this issue is 
addressed by AI-00825, which has not been considered; there is not an obvious 
interpretation. This implementation represents array components whose length 
depends on a discriminant with a default value by implicit pointers into the 
heap space; thus, the 'SIZE of such a record type might be less than the sum 
of its components 'SIZES, since the size of the heap space that is used by 
the varying-length array components is not counted as part of the 'SIZE of 
the record type. These tests were graded passed given that the Report.Result 
output was "FAILED" and the only Report.Failed output was "INCORRECT 
'BASE'SIZE", from line 195 in C34009D and line 193 in C34009J. 

C64104A, CB2006A, CB4002A, and CC1311B were graded passed by Processing 
Modification as directed by the AVO. These tests make various checks that 
CONSTRAINT ERROR is raised for certain operations when the resultant values 
lie outside of the range of the subtype. However, in many of the particular 
checks that these tests make, the exception-raising operation may be avoided 
as per LRM 11.6(7) by optimization that removes the operation if its only 
possible effect is to raise an exception (e.g., an assignment to a variable 
that is not later referenced). In the list below, beside the name of each 
affected test is given the line number of the check that is skipped (with a 
relevant associated operation's line number noted in parenthesis). These 
tests were processed both with and without optimization: the tests reported a 
passed result without optimization; with optimization, the checks cited below 


2-4 







IMPLEMENTATION DEPENDENCIES 


were skipped and a corresponding call to REPORT.FAILED was made. 

C64104A 174 (copy back of parameter value) 

CB2006A 36 

CB4002A 85 (initialization @ 54) 

CC1311B 55 (default parameter value @ 36) 

C98001C was graded passed by Processing Modification as directed by the AVO. 
This test checks that a non-static argument to pragma Priority is not 
evaluated; it uses the pragma for the main program and within a task unit in 
the body of this program. This implementation evaluates the argument when 
the pragma appears in a task unit (at line 27) only; this behavior is in 
conformity to the draft revised Ada standard (a non-static argument will be 
illegal for a main program). (The AVO allows implementers to adopt Ada9X 
rules for Ada83 features so as to encourage the transition to the revised 
rules.) The test was processed with and without line 27 being commented out, 
and it reported "PASSED 11 and "FAILED" respectively. 

CA3004E..F (2 tests) were graded inapplicable by Evaluation Modification as 

directed by the AVO. These tests check that a program will execute when an 

optional body of one of its library packages is made obsolete. This 

implementation, for optimization purposes, compiles all compilation units of 
a compilation into a single object module with a single set of control 
sections, collectively pooled constants, with improved addressing. As a 
consequence, the optional package body of these tests and its corresponding 
library unit have a mutual dependence, and thus the library unit is also made 
obsolete. This implementation-generated dependence is allowed by LRM 

10.3(8). 

LA5007S..T (2 tests) were graded inapplicable by Evaluation Modification as 

directed by the AVO. These tests check that a program cannot execute if a 
needed library procedure is made obsolete by the recompilation of a library 
unit named in that procedure's context clause. This implementation 

determines that the recompiled unit's specification did not change, and so it 
does not make the dependent procedure obsolete; the program executes, calling 
Report.Failed. The AVO ruled that this behavior is acceptable, in light of 
the intent for the revised Ada standard to permit such accommodating 
recompilation; further deliberation by the AVO and ARG will determine whether 
these (and many related) tests will be withdrawn. 

The tests below were graded passed by Test Modification as directed by the 
AVO. These tests all use one of the generic support procedures, LengthjCheck 
or Enura_Check (in support files LENCHECK.ADA & ENUMCHEK.ADA), which use the 
generic procedure UhcheckedjConversion. This implementation rejects 
instantiations of unchecked_Conversion with array types that have non-static 
index ranges. The AVO ruled that since this issue was not addressed by 
AI-00590, which addresses required support for Unchecked_Conversion, and 
since AI-00590 is considered not binding under ACVC 1.11, the support 
procedures could be modified to remove the use of Unchecked_Conversion. 
Lines 40..43, 50, and 56..58 in LENCHECK and lines 42, 43, and 58..63 in 
ENUMCHEK were commented out. 

CD1009A CD1009I CD1009M CD1009V CD1009W CD1C03A 

CD1C04D CD2A21A..C CD2A22J CD2A23A..B CD2A24A CD2A31A..C 


2-5 





IMPLEMENTATION DEPENDENCIES 


*CD2A8lA CD3014C CD3014F CD3015C CD3015E..F CD3015H 

CD3015K CD3022A CD4061A 

*CD2A81A, CD2AB1B, CD2A81E, CD2A83A, CD2A83B, CD2A83C, and CD2A83E were 
graded passed by Test Modification as directed by the AVO. These tests check 
that operations of an access type are not affected if a 'SIZE clause is given 
for the type; but the standard customization of the ACVC allows only a single 
size for access types. This implementation uses a larger size for access 
types whose designated object is of type STRING. The tests were modified by 
incrementing the specified size $ACC_SIZE with '+ 64'. 

CD2A53A was graded inapplicable by Evaluation Modification as directed by the 
AVO. The test contains a specification of a power-of-10 value as 'SMALL for 
a fixed-point type. The AVO ruled that, under ACVC 1.11, support of decimal 
'SMALLs may be omitted. 

CE2103A, CE2103B, and CE3107A were graded inapplicable by Evaluation 
Modification as directed by the AVO. The tests abort with an unhandled 
exception when USE ERROR is raised on the attempt to create an external file. 
This is acceptable behavior because this implementation does not support 
external files (cf. AI-00332). 

CE3413B was graded inapplicable by Evaluation Modification as directed by the 
AVO. This test includes the expression "COUNT'LAST > 150000", which raises 
OONSTRAINT_ERFOR on the implicit conversion of the integer literal to type 
COUNT since COUNT'LAST ■ 32,767; there is no handler for this exception, so 
test execution is terminated. The AVO ruled that this behavior was 
acceptable; the AVO ruled that the test be graded inapplicable because it 
checks certain file operations and this implementation does not support 
external files. 

Many of the Class A and Class C (executable) test files were combined into 
single procedures ("bundles") by the AVF, according to information supplied 
by the customer and guidance from the AVO. This bundling was done in order 
to reduce the processing time—canpiling, linking, and downloading to the 
target. For each test that was bundled, its context clauses for packages 
Report and (if present) SYSTEM were commented out, and the modified test was 
inserted into the declarative part of a block statement in the bundle. The 
general structure of each bundle was: 

WITH REPORT, SYSTEM; 

PROCEDURE <BUNDLE_NAME> IS 

— repeated for each test 

DECLARE 

<TEST FILE> [a modified test is inserted here, ...] 

BEGIN 

<TEST NAME>; (... and invoked here] 

EXCEPTION —test is not expected to reach this exception handler 
WHEN OTHERS ■> REPORT.FAILED("unhandled exception "); 

REPORT.RESULT; 


END; 








IMPLEMENTATION dependencies 


— [... repeated for each test in the bundle1 

END <BUNDLE_NAME>; 


is delimited by '<’ and 

<A21001A 

A22002A 

A22006B 

A29002A 

A29002B 

A29002C 

A29002H 

A29002I 

A29002J 

A32203D 

A33003A 

A34017C 

A35710A 

A35801A 

A35801B 

A38199A 

A39005B 

A39005C 

A54B01A 

A54B02A 

A55B12A 

A71004A 

A72001A 

A73001I 

A74106C 

A74205E 

A74205F> 

- _ A83041D 

A83A02A 

A83A02B 

A83C01E 

A83C01F 

A83C01G 

A85013B 

A87B59A> 

<AB7006A 

<ADlA0lA 

ADlAOlB 

AD1D01E 

AD7102A 

AD7103A 

AD7103O 

C23003A 

C23006A 

C24002A 

C24003C 

C24106A 

C24113A 

<£24201A 

C24202A 

C24202B 

C24211A 

C25001A 

C25001B 

<C26008A 

C27001A 

C2A001A 

C2A008A 

C2A009A 

C2A02lB> 

C32111A 

C32111B> 

<C32114A 

C34001C 

C34001D 

C34001F 

<C34004A 

C34004C 

C34005A 

C34005I> 

<C34005J 

C34005L 

C34005S 

C34005U 

C34006A 

C34007A 

C34007D 

C34007F 

C34007P> 

<C34007R 

C34007S> 

C34011B 

034012A 

C34014A 

C34014J 

C34014L 

C34014N 

C34014W 

C34014Y 

C34015B 

C35003D 

C35003F 

C35102A 

C35503C 

C35503D 

C35503E 

<C35503L 

0355030 

C35503P 

0355050 

<C35505D 

C35505E 

C35507E 

C35507G 

C35507H 

<C35706A 

035706B 

C35706C 

C35707C 

C35707D 

C35707E 

C35708E> 

<C35711A 

C35711B 

0357130 

<C35801D 

C35802A 

<C35902A 

C35902B 

C35902D 

C35A03B 

C35A03C 

C35A03D> 

C35A04A 

O35A04B 

C35A04O 

<C35A04Q 

C35A05A 

C35A05D 

<C35A06D 

C35A06N 

C35A06O> 

C35A07A 

C35A07B 

C35A07O 

C35A07Q 

O35A08B 

C36003A> 


A26004A 
A29002D 
A29003A 
A35101B 
A35801F 
A39005D 
A55B13A 
A73001J 
<A83009A 
A83A06A 
A83C01H 
AC1015B 
AD7001B 
<AD7104A 
C24002B 
C24113B 
C24202C 
C25003A 
C2A001B 
<C32107A 
C32115A 
C34002A 
C34005C> 
C34005M 
C34006F 
C340070 
<C34009A 
C34014O 
C34014P 
C34016B 
C35106A 
C35503F 
C35504A 
C35505F 
C35507I 
C35706D 
C35708A 
C35712A 
C35802B 
C35904A 
CC35A03N 
<C35A04D 
C35a05N> 
<C35A06P 
<C35A07D 
<C36004A 


A26007A 
A29002E 
A2A031A> 
A35402A 
A35902C 
A39005E 
A55B14A 
A74105B 
A83Q09B 
A83A08A 
A83C01I 
AC3106A 
AD700SA 
AD7203B 
C24002C 
C24113C 
C24203A 
C25004A 
C2A001C 
C32107C 
C32115B> 
C34002C 
<C34005D 
C340050> 
C34006G 
<0340071 
C34009F 
<C34014E 
C34014R 
C34018A 
C35404A> 
C35503G 
C35504B 
C35507A 
C35507J> 
C35706E> 
C35708B 
C35712B 
C35802C 
C35904B 
C35A03O 
C35A04N> 
<C35A05Q 
C35A06Q 
C35A07N 
C36104A 


A27003A 
A29002F 
<A32203B 
A35502Q 
A38106D 
A39005F> 
A62006D 
A74106A 
A83041B 
A83C01C 
A83C01J 
AC3206A 
AD7101A 
AD7205B> 
C24003A 
C24113D 
C24203B 
C26002B 
C2A002A 
C32108A 
<C32117A 
C34003A 
C34005F 
<C34005P 
C34006J> 
C34007J 
C34009G 
C34014G 
C34014T> 
C35003A 
<C35503A 
C35503H 
C35505A 
C35507B> 
<C35507K 
<C35707A 
C35708C 
C35712C 
C35802D 
C35A02A 
C35A03P> 
<C35A04O 
C35A06A 
C35A06R 
C35A07O 
C36104B 


A27004A 

A29002G 

A32203C 

A35502R 

A38106E 

<A39005G 

A71002A 

A74106B 

A83041C 

A83C01D 

A85007D 

AC3207A> 

AD7101C 

<C23001A 

C24003B 

C24113E> 

C24207A 

C26006A> 

C2A006A 

C32108B 

C34001A 

0340030 

C34005G 

C34005R 

<C34006L 

C34007M 

C34009L 

C34014H 

<03401417 

C35003B 

C35503B 

C35503K> 

C35505B 

<0355070 

C35507L> 

C35707B 

C35708D 

C35713A 

C35802E> 

C35A03A 

<C35A03Q 

C35A04P> 

C35A06B> 

C35A06S 

C35A07P 

C36105B 


2-7 




IMPLEMENTATION DEPENDENCIES 


C36172A C36172B C36172C> 

C36202C C36203A C36204A 

C36205C C36205D C36205E 

C36205J C36205K C36301A 

C36305A> <C37002A C37003A 

C37008A C37008B> <C37008C 

C37102B C37103A C37105A 

C37208A C37208B C37209A 

C37211C C37211D C37211E 

<C37213E C37213F C37213G 

C37214A> <C37215A C37215B> 

C37215G C37215H C37216A 

C37305A C37306A C37307A 

C37403A> <C37404A C37404B 

C38002B C38004A C38004B 

C38102A C38102B C38102C 

C38107B> <C38108A C38201A 

C39006E C39006G C39007A 

<C41101D C41103A C41103B 

C41108A C41201D C41203A 

C41207A C41301A C41303A 

C41303G C41303I C41303J 

C41303Q C41303R C41303S 

<C41304B C41306A C41306B 

C41308A C41308C C41308D 

C41323A C41324A C41325A 

C41402A C41403A C41404A 

<C42007C C42007D C42007E 

<C42007J C42007K C43003A 

<C43105A C43105B C43106A 

C43204E C43204F> <C43204G 

C43205C C43205D C43205E 

C43205J C43205K C43206A 

C43208A C43208B C43209A 

C43213A> <C43214A C43214B 

C43215A C43215B C43222A> 

C44003F C44003G C45101A 

C45101H C45101I C45101K 

<C45111D C45111E C45112A 

C45122B C45122C C45122D 

C45201B C45202A C45202B 

C45220C C45220D C45220E 

C45241A C45241B C45241C 

C45251A C45252A C45252B 

C45274A C45274B C45274C 

C45303A C45304A> <C45321A 

<C45323A C45331A C45331D 

C45345A C45345B C45345C 

C45347D C45411A C45411D 

C45421C C45421D C4542lE> 

<C45504A C45504D> <C45505A 

C45521E> <C45523A C45524A 

<C45532A C45532B C45532C 

C45532H C45532I C45532J 


<C36174A C36180A C36202A C36202B 

C36204B C36204O <C36205A C36205B 

C36205F C36205G C36205H> <C36205l 

C36301B C36302A C36303A C36304A 

C37003B C37005A C37006A C37007A 

C37009A C3701QA C37010B C37012A 

C37107A C37108B C37206A C37207A 

C37209B C3721QA> <C3721lA C37211B 

C37213A C37213B C37213C C37213D> 

C37213H> <C37213J C37213K C37213L 

<C37215C C37215D C37215E C37215F 

C37217A C37217B C37217C> <C37304A 

C37309A C37310A C37312A C37402A 

C37405A C37409A C37411A C38002A 

C38005A C38005B C38005C C38006A 

C38102D C38102E C38104A C38107A 

C38202A C39006A C39006B C39006D 

C39007B C39008A C39008B C39008C> 

C41104A C41105A C41106A C41107A 

C41203B> <C41204A C41205A C41206A 

C41303B C41303C C41303E C41303F 

C41303K C41303M C41303N C41303O 

C41303U C41303V C41303W C41304A> 

C41306C C41307A C41307C C41307D 

C41309A> <C41320A C41321A C41322A 

C41326A C41327A C41328A> <C41401A 

C42005A C42006A C42007A C42007B> 

C42007F C42007G C42007H C42007I> 

C43004B C43103A C43103B C43104A> 

C43107A C43108A C43204A C43204C 

C43204H C43204I C43205A C43205B 

C43205F C43205G C43205H C43205I 

C43207A C43207B C43207O <C43207D 

C43210A C43211A C43212A C43212C 

C43214C C43214D C43214E C43214F 

<C43224A C44003A C44003D C44003E 

C45101B C45101C C45101E C45101G 

C45104A C45111A C45111B C45111C> 

C45112B C45113A> <C45114B C45122A 

C45123A C45123B C45123C> <C45201A 

C45210A C45211A C4522QA C45220B 

C45220F C4523lA> <C45232A C45232B 

C45241D C45241E> <C45242A C45242B 

C45253A C45262A> <C45272A C45273A 

C45281A C45282A C45282B C45291A 

C45321B C45321C C45321D C45321E> 

C45332A C45342A C45343A C45344A 

C45345D> <C45347A C45347B C45347C 

C45412A> <C45413A C45421A C45421B 

<C45423A C45431A C45502A C45503A> 

C45521A C45521B C45521C C45521D 

C45524B C45524C C45524D C45524E> 

C45532D C45532E C45532F C45532G 

C45532K C45532L> <C45534A C45611A 





IMPLEMENTATION DEPENDENCIES 


C45613A C45614A C45621A C45621B C45621C C45621D C4562lE> 

<C45622A C45624A C45624B C45631A C45632A C45641A C45641B 

C45641C C45641D C45641E> C45652A C45662A C45662B C45672A 

C46011A C46012A C46012B C46012O <C46012D C46012E> <C46013A 

C46014A C46021A C46023A C46024A C46031A C46032A C46033A> 

<C46041A C46042A C46043A C46043B> <C46044A C46044B C46051A 

C46051B C46051O <C46052A C46053A C46054A C47002A C47002B 

C47002C C47002D C47003A C47004A C47005A C47006A C47007A> 

<C47008A C47009A C47009B C48004A C48004B C48004C C48004D 

C48004E C48004F C48005A C48005B C48005C C48006A C48006B> 

<C48007A C48007B C48007C C48008A C48008B C48008C C48008D 

C48009A C48009B C48009C C48009D C48009E C48009F C48009G> 

<C48009H C48009I C48009J C48010A C48011A C48012A C49020A 

C49021A C49022A C49022B C49022C C49023A C49024A C49025A 

C49026A> <C4A005A C4A005B C4A006A C4A007A C4A010A C4A010B 

C4A010D C4A011A C4A012A C4A012B C4A013A C4A013B C4A014A> 

<C51002A C51004A C52001A C52001B C52001C C52005A C52005B 

C52005C C52005D C52005E C52005F> CC52007A C52008A C52008B 

C52009A C52009B C5201QA C52011A C52011B C52012A C52012B 

C52013A> <C52103B C52103C C52103F C52103G C52103H C52103K 

C52103L> <C52103M C52103P C52103Q C52103R C52103S C52103X 

C52104A C52104B C52104C C52104F> <C52104G C52104H C52104K 

C52104L C52104M C52104P C52104Q C52104R C52104X C52104Y> 

<C53004B C53005A C53005B C53006A C53006B C53007A C53008A 

C54A03A C54A04A C54A06A C54A07A C54A11A C54A13A C54A13B 

C54A13C> <C54A13D C54A22A C54A23A C54A24A C54A24B C54A26A 

C54A27A C54A41A C54A42A C54A42B C54A42C C54A42D C54A42E 

C54A42F C54A42G C55B03A C55B04A C5SB05A C55B06A C55B06B> 

<C55B08A C55B09A C55B1QA C55B11A C55B11B C55B15A C55B16A 

C55C01A C55C02A C55C02B C55C03A C55C03B C55D01A C56002A 

C57002A C57003A C57004A C57004B C57004C C57005A> <C58004A 

C58004B C58004C C58004D C58004F C58004G C58005A C58005B 

C58005H C58006A C58006B C59001B C59002A C59002B C590020 

<C61008A C61009A C6101QA C62002A C62003A C62003B C62004A 

C62006A C62009A C63004A C64002B> <C64004G C64005A C64005B 

C64005C C64103A C64103B C64103C C64103D C64103E C64103F> 

<C64104A C64104B C64104C C64104D C64104E C64104F C64104G 

C64104H C64104I C64104J C64104K C64104L C64104M C64104N 

C64104O C64105A C64105B C64105C C64105D C64105E C64105F> 

<C64106A C64106B C64106C C64106D C64107A C64108A C64109A 

C64109B C64109C C64109D C64109E> <C64109F C64109G C64109H 

C64109I C64109J C64109K C64109L> <C64201B C64201C C64202A 

C65003A> <C65003B C65004A C66002A C66002C C66002D C66002E 

C66002F C66002G C67002A C67002B C67002C C67002D C67002E> 

<C67003A C67003B C67003C C67003D C67003E C67005A C67005B 

C67005C C67005D> <C72001B C72002A C73002A C73007A C74004A 

C74203A C74206A C74207B C74208A C74208B C74209A C7421QA 

C74211A C74211B C74302A C74302B C74305A C74305B C74306A 

C74307A> <C7440lD C74401E C74401K C74401Q C74402A C74402B 

C74406A C74407B C74409B> <C83007A C83012D C83022A C83023A 

C83024A C83025A> <C83027A C83027C C83028A C83029A C83030A> 

<C83031A C83031C C83031E C83032A C83033A C83051A C83B02A 

C83B02B C83E02A C83E02B C83E03A C83E04A C83F01A C83F03A 

C84002A C84005A C84008A C84009A C85004B C85005A C85005B 


2-9 






IMPLEMENTATION DEPENDENCIES 


C85005C 

C85006G> 

C67B04B 

C87B07D 

C87B11A 

CC87B15A 

C87B24A> 

C87B31A 

CB101QA 

CB2007A 

CB4004A 

CB5002A 

CC1018A 

CC1221A 

<CC1304A 

<CC1311A 

CC3012A 

CC3123B 

CC3128A 

CC3221A 

CC3232A 

CC3305B 

CC3407A 

CC3408B 

CC3504E 

<CC3601A 


C85005D> 

<C87A05A 

C87B04C 

C87B07E 

C87B11B 

C87B16A 

<C87B24B 

C87B32A> 

CBIOIOB 

CB3003A 

CB4005A 

CB7003A 

CC1104C 

CC1221B 

CC1304B 

CC1311B 

CC3015A 

CC3125A 

CC3203A 

CC3222A 

CC3233A 

CC3305C 

CC3407B 

CC3408C 

CC3504F> 

CC3601O 


<C85005E 

C87A05B 

C87B05A 

C87B08A 

C87B13A 

C87B17A 

C87B26B 

<CB1001A 

CB1010C 

CB3003B> 

CB4006A 

CB7005A> 

CC1107B 

CC1221C 

CC1305B 

CC2002A 

CC3106B> 

CC3125B 

CC3207B 

CC3223A 

CC3234A 

CC3305D 

CC3407C 

CC3408D 

<CC3504G 

<CC3603A 


C85005F 

C87B02A 

C87B06A 

C87B09A 

C87B14A 

C87B18A 

C87B27A 

CB1002A 

CB1010D> 

<CB3004A 

CB4007A 

<CC1004A 

CCllllA 

CC1221D> 

CC1307A 

CC3004A 

<CC3120A 

CC3125C 

CC3208A 

CC3224A 

CC3235A 

CC3406A 

CC3407D 

CC3504A 

CC3504H 

CC3606A 


C85005G 

C87B02B 

C87B07A 

C87B09B 

C87B14B 

C87B18B 

C87B28A 

CB1003A 

<CB2004A 

CB4000A 

CB4008A 

CC1005C 

CC1204A 

<CC1222A 

CC1307B 

CC3007A 

CC3120B 

CC3125D> 

CC3208B> 

CC3225A> 

CC3236A 

CC3406B 

CC3407E 

CC3504B 

CC3504I 

CC3606B 


C85006A> 

C87B03A 

C87B07B> 

C87B09C 

C87B14C 

C87B19A 

C87B29A 

CB1004A 

CB2005A 

CB4002A 

CB4009A 

CC1010A> 

CC1207B 

CC1224A 

CC1308A 

CC3011A 

CC3121A 

<CC3126A 

<CC3208C 

<CC3230A 

CC3240A 

CC3406C 

CC3407F> 

CC3504C 

CC3504J 

CC3607B> 


<C85006F 

C87B04A 

<C87B07C 

C87B10A 

C87B14D> 

C87B23A 

C87B30A 

CB1005A 

CB2006A 

CB4003A 

CB4013A 

<CC1010B 

CC122QA 

CC1225A> 

CC1310A> 

CC3011D 

CC3123A 

CC3127A 

CC322QA 

CC3231A 

CC3305A 

CC3406D 

<CC3408A 

CC3504D 

CC3504K> 


2-10 



CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Robert R. Risinger 
TLD Systems Ltd. 

3625 Del Amo Boulevard 
Torrance California 90503 
(310) 542-5433 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programing Language 
Standard, whether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC [Pro92]. 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Programming Language standard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 





PROCESSING INFORMATION 


a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3534 


104 


67 


264 


201 


532 

(c+d+e) 

4170 

(a+b*-f) 


3.3 TEST EXECUTION 


A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the Serial Ports, and run. The results were captured on the host 
computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix b for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The following options were used for testing this 
implementation: 


Compiler 
Option / Switch 

NOPhase 

NoLog 


Effect 

Suppress displaying of phase times during 
compilation. 

To cause command line to be echoed on log 
file. 


NODebug 

List 


To suppress generation of debug symbols to 
speed compilation and linking. 

To cause listing file to be generated. 


Target-i960 


Selects the TLD Intel i960 target 
architecture. 


3-2 





PROCESSING INFORMATION 


Linker 

option / Switch Effect 

NoDebug Suppresses generation of Debugger symbol 

files. 

NoVersion Suppresses announcement banners that 

contain timestamp and version information 
to facilitate file comparing. 

All tests were executed with Code Straightening, Global 
Optimizations, and automatic Inlining options enabled. Where 
optimizations are detected by the optimizer that represent deletion 
of test code resulting from unreachable paths, deleteable 
assignments, or relational tautologies or contradictions, such 
optimizations are reflected by informational or warning diagnostics 
in the compilation listings. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


e 


3-3 




APPENDIX A 
MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists tl\e 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LE2'J—also listed here. These values are expressed here 
as Ada string aggregates, where H V n represents the maximum input-line length. 


Macro Parameter Macro Value 


$MAX_IN_LEN 

120 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG ID3 

(1..V/2 -> 'A') & '3' & 


(1..V-1-V/2 -> 'A') 

$BIG ID4 

(1..V/2 -> 'A') & '4' & 


(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & '1 

$BLANKS 

(1..V-20 -> ' ') 


$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 ■»> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 »> '0') & "F.E:" 



MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 






MACRO PARAMETERS 


$GREATER_THAN SBORT_FLOAT SAFE LARGE 

no_Sjch_&ort__flqat_ttpe 

$HIGH_PRICRITY 20 

$ILLEGAL_EXTEFNAL FILE NAME1 

’BADCHARf.!" 

$ILLEGAL_EXTERNAL FILE NAME2 

^THISFILSNAMENOULDBEPERFECTLYLEGAL" & 
" IFITVJERENOTSOLCNG. SOTHERE" 

$ INAPPROPRIATE LINE LENGTH 

“ -1 

$ INAPPROPRIATE PAGE LENGTH 

~ -1 

$INCLUD£_PRAGMAl PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1.TST") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE ASSEMBLY 

SLESSJIHANJJURATICN -90000.0 

$LESS_THAN_DURATICN_BASE FIRST 

-111073.0 

$LINE_TERMINATQR ACS 11. CR 

$LOW__PRIORITY 1 

$MACHINE_CC3DE_STATEMENT 

CTRL'(B, 1, True) 

$MACHINE_CODE_TYPE CTRL 

$MANTISSA_DOC 31 

$MAX__DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2_147_483_648 

A-3 




MACRO PARAMETERS 


$NAME 

$NAME_LIST 


$NAME_SPECIFICATICNl 

$NAME_SPECIFICATION2 

$NAME_SPECIFICATICM3 

$NEGJBASED_INT 

$NEW_MEM_SIZE 

$NEWJSTQRJUNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECQRB_DEFINITION 

$RECQRD_NAME 

$TASK_SIZE 

$TASK_STQRAGE_SIZE 

$TICK 

$VARIABLE__ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR PRAGMA 


NO_SUCH_INTEGER_TYPE 

Pmachine, nsl6000, vax, afl750 z8002, z8001, 
gould, pdpll, m68000 f pe3200, caps, aadahl, 
i8086, i80286, i80386, z80000, ns32000, 
ibctsl, m68020, nebula, name_x, hp, bbl, 
hawk, rl666, i960 

Not supported 

Not supported 

Not supported 

16#FFFFFFFE# 

16110000000# 

8 

i960 

ACSII.CR & ASCII.FF 
Withdrawn 
Withdrawn 
32 

2000 

0.000001 

SYSTEM.(16#7FFFFFF4#) 

SYSTEM.(16#7FFFFFEC#) 

SYSTEM.(16I7FFFFFE8#) 


Withdrawn 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 


B—1 






TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 

3 - 8 


3.4 Compiler Option Switches 

Compiler option switches provide control over various processing and 
output features of the compiler. These features include several 
varieties of listing output, the level and kinds of optimisations 
desired, the choice of target ccsputar, and the operation of the 
caspiler in a syntax checking node only. 

Keywords are used for selecting various eospiler options. The 
complement keyword, if it exists, is used to disable a com piler option 
and is formed toy prefixing the switeh keyword with *HO*. 

Switch names may be truncated to the least number of characters 
required to uniquely identify the switch. For exaaple, the switeh 
. "CROSSREF* (explained in the list below) may be uniquely identified by 
the abbreviation "OK* or any longer abbreviation. In the list of 
switches on the following pages, the abbreviations are in bold and the 
optional extra characters are not bolded. 

If an option is not specified by the user, a default setting is 
assumed. All specified eospiler options apply to a single invocation 
of the eospiler. 

The default setting of a switch and its meaning are defined in the 
table below. The meaning of the complement form of a switch is 
normally the negation of the switeh. For same switches, the cosplesmnt 
meaning is not obvious; these eeeplement switch keywords are listed 
separately. 

In the description of the switches, the target dependent n a me target is 
used. The value of this symbol is determined by the value of the 
TARGET switch. 

Compiler-generated file specifications generally conform to host 
conventions. Thus, any generated filename is the source filename 
appended with the default file type. The output file name can be 
completely or partially specified. 


cm 







TLD ADA COMPILER 

Compiler Usage 


I960-A0A-2C 
3 - 9 


SWITCH NAME 


MEANING 


ADpRESS_SPACK«name | (hum . zubzy*cesi_aame) 

NOADdreSS_SFACE -- default 

This switch allows users to specify the association of a 
compilation unit with a logical address space. This capa b ility 
trill s u pp ort the definition of i960 Extended Architecture ■ Dom a ins 11 
and domain calls. 

The name parameter is the name of the address space and 

subsystem-name is t-*** name of the subsystem to which the address 
space belongs. If subsystem-name is not supplied, then the address 
space does not belong to a subsystem. This switch may appear in 
any compilation, and applies to all the compilation units in the 
compilation. 

NOTE: An alternate method of associating compilation unit(s) with 
a logical address space is to use the pragma Address_Spaee in the 
compilation unit(s) and compile without using this switch. The 
pragma Address_Sp&ce_Kntry is used to indicate which subprograms 
represent entities into the logical space (d efine d by this switch 
or pragma Address_Space). Safer Section S.2.T of this document 
under Implementation-Dependant Pragmas, for further information. 

This capability does not yet allow users to indicate objects that 
are to be implemented and referenced as independent objects. 

TLD Ink will verify that all comp ilation units in the link have an 
address space attribute of the same value, or have no address space 
attribute and will create either a domain (if an address attribute 
is specified) or a progr am (if no address space attribute is 
specified). 

Alo-adb-filename 
NO Alp -- default 

This switch causes information collected d urin g c o m pilation to be 
saved in a specified data base file or a default file n a me d 
I960.ADB in the compilation directory. This information includes 
the c o mp ilation units, the contained scopes, the local declarations 
of objects and types and their descriptions, external references, 
callers, calls, p rogr a m design language (FDL) which is extracted 
from stylized Ada comments embedded in the source code, and any 
other information extracted from similar stylized Ada comments. 
The TLD Ada Info Display (TIDaid) permits the user to browse this 
data base and to extract selected data base information to support 
the understanding of a program or to produce documentation 
describing the program. 







TLD ADA COMPILER 

Compiler Usage 


X960-ADA-2C 

3-10 


CAll tree 

HOCALl TREE -- d«£*ult 

This switeh is used in ccnjunction with ELABORATOR and LIST to 
causa all .CTX filaa (c or rssponding to tha complete sat of abject 
filas baing linkad for this program) to ba raad in and a eloaura of 
all calls in tha p ro gr am to ba ecoputed. The results of this 
analysis is formatted into a subprogram call eras report and output 
in tha listing file. This switch has no effeet without tha 
ELABORATOR and LIST switehas. 

BOTE: Tha call tree is incomplata if any required ccsqailaticn 
unit's .CTX files are sussing. 

CHECKS -- default 
CHECKS {- (ebecJc.identifisr { 

NOCHeCKS {• (eheek_identi£ier{,...})} 

When the CHECKS switch is used, aero or more eheck_idencifier* are 
specified tha run tine chacks are enabled. The status of run 
r-tinm checks associated with unasntianad check_id«ncifiers is 
unchanged. 

Without any cfaeck.idsntifisrs, the HOCHSCKS switch omits all run 
tima checks. If one or more cbeek_idantifiar* are specified, tba 
specified run time checks are eodtted. The status of run tins 
checks associated with uasantioosd chsck_idsncifiars is unchanged. 

Checks can be eliminated selectively or completely by source 
statement pragma Suppress. Pragma Suppress overrides the QJECKS 
switch. 

Cbeck_ideatifiers are listed below and are described in the LRM, 
Section 5.2.B. 

ALL.CHECKS -- default (consists of all the checks below) 

ACCESS_CHECK DISCRIUXKANT.CHSCK DIVTSIQH_CHECK 

ELABORATXQH_CHSCK XHDEX_CHECK LENGTH^CHECK 

OVERFLOW CHECK RANGE CHECK STORAGE CHECK 






TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 
3 - n 


dW^mrr»ehar*ccar-specificacicn{...} 

This switch allows tha uaar to override a aae of dafault nets 
characters uaad to mark consents which hawa facial naanings to tha 
Compiler. (Za tha source coda, these aata characters oust 
immediately follow the Ada consent designator ■--•.) there are 13 
aata characters defined as positional entries in the string of 
characters specified for this switch. To define one or ante 
entries, all entries up to and including ths last entry to be 
defined aust be specified. Each of these characters any be 
represented either by the character itself, or by a dollar sips "9" 
followed by the character's daeiaal ascii value. (The latter fora 
is useful for specifying characters which would otherwise be 
significant to the rowand line parser.) To specify a dollar sign 
character, use ths form a $3C". Remaining character positions are 
left unchanged. Capabilities for character positions in tbs string 
nay be disabled by specifying either blank (*832*) or null ("80*). 
Please refer to the aseii character set table in Appendix B for the 
d sc ira l value of aseii characters. The definition of each entry 
and its cu r r en t default value is as follows: 


¥ *.TT.r®^-7T.CRfTTI NRTTTJff UT-’.PV- TV T-i-T w 


X Configuration Equals (default: *•■) 

This entry defines the character used to nark 
c o n ditional source lines which will be in c l ude d in 
the coapilation only if its 
configuration-identifier is specified with the 
CONFIGURATION switch. 

2 C o n figuration Not Equal (default: "•■) 

This entry defines the character used to mark 
conditional source lines which will be included in 
the compilation only if its 
configuration-identifier is not specified with the 
CONFIGURATION switch. This sane character is used 
to begin an "else* clause within a group of 
conditional coopilation lines. The lines between 
this character and the end of the group will be 
included in the co^ilatien only if the 
configuration-i de ntifier for the group is not 
specified with the CONFIGURATION switch. 

Begin Configuration (default: "{") 

This entry defines the character used to nark the 
beginni n g of a group of conditional coopilation 
source lines. 


3 







TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 

3 - 12 


4 lad Configuration (default: *}*) 

This entry defines tha character used to aark the 
•ad of a group of condi tioaal caspilatian aourca 
liaaa. 

Sm tha CQB7I60MTZOB co—ad liaa option for more inf orm a t ion on 
conditional compilation. 


Sourea Reformatting 


EMitiflP Paaeriotion 

5 Continuation Liaa (dafault: *&*) 

This aatry dafiaaa tha character uaad to aark a 
c o— an t centinuad from tha previous liaa and for 
which word-wrapping ia performed during aourca coda 
reformatting. 

6 Raaarvad for future uaa. 

7 Raaarvad for future uaa. 


fla—at Qaagtra 

EflliLioa Daacriotian 

8 Bagin Topic (dafault: *[”) 

Thia entry dafiaaa tha character uaad to nark tha 
toaginaiag of text aasociatad with a topic naaa. 

9 Sad Topic (dafault: "]*) 

This entry dafiaaa the character uaad to nark the 
•ad of text associated with a topic naaa. 

10 Define Topic (dafault: *•*) 

This entry dafiaaa tha character used to nark tha 
definition of a co—ant nata character for a 
particular uaar-dafiaad topic aana. This character 
nay subaaquaatly ha uaad as a shorthand for tha 
above met h o d , eliminating tha need to specify tha 
topic aana at each occurrence. 

Description (default: ■:") 

This entry defines tha character used to aark a 
constant as a description associated with the 
previous declaration. 


11 







TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 

3 - 13 


12 POL (default: 

This entry Safinas tha character uaad to mark a 
rnmmant aa P rog r am Oaaigs Language (FDL) . 

13 rmanrt (default: •$•) 

This entry defines tha character ueed to mark a 
conaent as a command to control data collection. 
Ibis entry provides a mechanism for users to 
maintain compatibility between the new 
iapl sm an tation and previously coeswated source. Zt 
also may be used to p r ovide a degree of 
compatibility with tools similar to TZJDaid. 

See the Ra*arwng« Baaasas for the TLD Otilities for anre 
information on TTflaid. 

CONFIGURATION-{ (}configuration-idantifiar{,...}{)} 

where the parenthesis ( ) are required only when more than one 
configuration-identifier is specified. 

Ibis switch provides a conditional compilation (configuration) 
capability by determining the specially commented source lines that 
ere to be included in the compilation. Source lines (s) can be 
associated with a configuration-identifier which if supplied with 
this switch, causes them to be inc luded. Also, alternative source 
line (a) can be specially marked to be included if the 
configuration-identifier is not supplied. 


Mark Source Lina (s) Individually: 

••■configuration-identifier conditiaaal-eouree-line 

or: 

--icanfiguxatian-identifier eondieionel-eouree-liae 

The above format is repeated for each source line to be marked as a 
conditional source line. 

Source line (a) beginning with are included in the cospilation 

if the configuration-identifier is speeifisd with the command line 
CONFIGURATION switch. Source line(s) beginning with ■--#• are 
included in the com pilation if the configuration-identifier is not 
specified with the c om ma n d line CONFIGURATION switch (CONFIGURATION 
is not used or is used without that configuration-identifier). 






TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 
3-14 


Mark a Group of Source Liaaa: 


--{configuration-identifier 
conditional-source-line-l 


co n ditional-source-line-n 
alc-conditional-source-line-1 


alt-conditional-source-line-n 
--}configuration-identifier 


} 

} Compiled if 

} configuration-identifier 
} ii specified with this 
} switch. 

} 

} Coepiled if 

} configuration-identifier 
} is not specified with this 
} switch. 


Source line(s) between lines beginning with *--{• and *--#• are 
included in the com pilation if the configuration-identifier is 
specified with the command line COBff lOURA TIOB switch. Source 
line(s) between lines beginning with *-•#■ and *--}* are included 
in the c os p ilation if the configuration-identifier is not specified 
. with the command line C OTO lgum glOB switch (CXM fl UUWOTOW is not 
used or is used without that configuration-identifier). 


Motes op Syntax 

C o mment s are examined for configuration switches only if they 
occupy a line fay theasel-vss (i.e., the starts at the first 
non-blank character of the line. 

The special cosawnt characters •--#•, ■--{■, and •--}• must 

be entered as shown with no spaces between than. 

The characters *■", *#*, and •}" are the default nets 

characters for conf iguration switches, but they can be modified. 
See the COlOflQffT command line option for more i 

The configuration-identifier oust immediately follow the special 
comm e nt characters; no space is allowed between them. 

Thm c o nf iguration-identifier on the closing brace *--}• is 
optio n al, but if specified must match the identifier on the 
corresponding opening braee 


LTD 







TLD ADA COMPILER 

Compiler Usage 


X960-ADA-2C 

3-15 


*--§• tau on* or tbs other of two distinct — anings 1) if 
followed by a configuraticn-idengjfi ar. ie —ana "coa^ila tha 
balance of thia line conditional ly 1 ' and 2) if no identifier 
follows, it —ana "toggle the sense of the inner—at configuration 
brace*. 

Any additional text on the aa— line as the 
"--{configuration-identifier" and/or the "--} 

configuration-identifier" will be considered a consent and will ant 
be compiled aa Ada source, regardless of the configuration 
settings. 


warning Cflaisalat 

By default, a /COHFIG-I960 setting is created for the target 
co mp u ter and nodal (by the /TAASST and the /MODEL Compiler 
switches). Therefore, I960 is not a valid configuration-identifier - 
for conditional eoqpilation. if used, conditional source with that 
ns— will always be included in the compilation whether or not this 
switch is specified (since that ns— is already specified for the 
target and model, by default). 


The compiler treats nested conditional source in a m a nner similar 
to —seed "if" statements. It checks the configuration-i de n t i f ier 
to determi— if it has been specified with the COKPXSDRATXOH switch 
(similar to the checking performed to determi— w h eth er an "if* 
statement is to be perfor—d). If so, it selects the source marked 
with that configuration-identifier (just as an "if" statement is 
perfor—d for a "True" "if" condition). If no t and alter—te 
conditional source exists, it selects tha alter—te source for that 
configuration-identifier marked with (just as aa "el—" 

statement is perfor—d for a "False" "if” condition). It c on t in u es 
this checking for every —sted configuration-identifier it 






TLD ADA COMPILER 

I 960-ADA-2C 

Compiler Usage 

3-16 

Por axaaple: 

-{A 

conditiooal-source-line-Al 

} 


} Conpiled if A ift 


} pacified with 


} this switch. 

condi tional - source - line-An 

} 

—# 

alt-condi tional-eouree-line-Al 

} 

# 

} Conpiled if A is not 

* 

} specified with 


} this switch. 

el t - condi tional • source - line-la 

} 

-*{» 

condi tional-souree-line-Jl 

} 


} Compiled if A is not 

* . 

} and B i* specified 


} with this switch. 

conditional-source-line-Bn 

} 

--# 

alt-conditional-source-liae-Bl 

} 


} Compiled if A and B are 

• 

} not specified with 

• 

} this switch. 

alt-conditional-souxce-line-Btn 

} 

«-{C 

conditional-source-line-CL 

} 

• 

} Compiled if A and B are 

• 

} wot and C 1 a specified 

• 

} with this switch. 


conditional-source-line-Ch } 


—# 

alt_conditional-source -11am-a } 

} Compiled if A, B, and C 
} are not spacifiad with 
} this switch. 

alc-conditional-source-line-Qi } 

-}C 

-}A 

Configuration switches are examined and must be properly nested 
regardless of whether or not the configuration-identifiers are 
specified. 





TLD ADA COMPILER 

Compiler Usage 


X960-ADA-2C 

3 - 17 


The following exaagile format is invalid, sines •>' is not 
completely nested within a A a : 


--{A 

-{» 

-}A 

-}» 


At the close of a A a , the nested a B a will be foreed closed with the 
warning message: "Missing configuration ceosest: - - }■" . By the 
tine a --)B" is reached, a B* will have already been closed, so the 
following warning will be issued: 'Unmatched configuration 


CRossjqbp 

NOCRossKXF -- default 

This switch generates a cross reference listing that contains times 
referenced in the source code. The cross reference listing is 
included in the listing file; therefore, the LIST switch oust be 
selected or CRQSSKEF has no effect. 

CTi 

NOCTl -- default 

This switch generates a CASS tools interface file. The default 
filename is derived from the object filename, with a .CTI 
extension. The .CTI file is required to support the CBUJOBE, 
FtJLL_CALL_TRBB, and I1»VKRTSD_CAU._TRSI switches. 

DEBgg * - default 
NODEBdg 

This switch selects the production of symbolic debug tables in the 
relocatable object file. 

Alternate abbreviation: DBg, NOOBg 

DIagbostxcs 

NODIaGBOSTICS -- default 

This switch produces a diagnostic message file compatible with 
Digital's Language Sensitive Bditor and XinoTech Editor. See 
Digital's docu m entation for the Language Sensitive Bditor for a 
detailed ea^lanation of the file produced by this switeh. 






TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 
3-18 


E Lab o rator 

NO ELaBORATOR -- default 

This switch generates • setup p r ogr am (in uaie-aame$ELAB.(»J (and a 
listing file in unic«nam$BLAB.LXS if the LIST switch was 
specified)) that elaborates all cospilation units an which the 
specified library unit procedure (main pr ogr am ) d epen ds and than 
calls the procedure (wain pr og ram ) . When the ELABORATOR switch is 
used, The unit name of a previously caviled procedure must be 
specified instead of a source file. Zt is not necessary to 
distinguish a main pr ogr am from a library unit when it is compiled. 

Full_call_tree 
NOFull_CaLl_TRSE -- default 

When the FULL_CALL_TRXS switch is used, the eenpiler listing 
includes all calls including all nested ealls in every call. The 
NOFOH_CALL_TREE switch shows all nested calls in the first 
instance only and all subsequent ealls are referred to the first 
instance. This switch has no effect without the EL ABO R ATOR end 
LIST switches. 

INDEwZRTXOH-n 

INDErtaTXON- 3 -- default 

This switch controls the indentation width in a reformatted source 
listing (see the REFORMAT switch description). This switch assigns 
a value to the number of columns used in inden tation; the value n 
can range from 1 to 8. 

INFo -• default 
NOINFo 

The IRFO switch produces all diagnostic messages incl ud i n g 
information* level diagnostic messages. The SOXSFO switch 
suppresses the production of information-level diagnostic messages 
only. 

INSTAKHATE-ppCian 

NOINStantcate •• default 

This svicch is used to establish a default mode of instantiation 
for all generic instantiations within the c ompilation. 

The option parameter instructs the Cospiler to instantiate generics 
in the manner specified, as described below: 

single_body - a single body is used for all instantiations 

macro - each instantiation produces a different body 







TLD ADA COMPILER 

Compiler Usaoe 


X960-ADA-2C 

3-19 


91mm refer eo Motion 3.12 "Generics" for nor* information on eh* 
advantages and diudvanttgas in using aingle_body g*a*ries versus 
■sere generics. 

Masted instantiations and nested ganarics ara supported and 
gamaries da f inad in lihrmry units ara permitted. 

It is not possible to perform a naero instantiation for a ganaric 
whose body has not yat baas eos^ilad. 

NOTE: An altanata method of controlling naero instantiatioo 

a ganaric is by using pragna Instantiate in tha source coda 
performing compilation without this switch, tha pragna contr 
instantiation of a particular ganaric. Safer to Metian 5.2.9 
this document under mcati Pragmas, for further 

information. 

In tha event of a conflict between tha pragma and this switch, 
the switch takes precedence. 

INTsx. 

NOINTsl -- default 

This switch interspenes lines of source coda with tha as seemly 
coda generated in tha macro listing. This switch is valid only if 
tha LIST and MACRO switches are selected. It nay be helpful in 
correlating Ada source to generated code, but it increaMS tha sisa 
of the listing file. 

INVertkd_call_trxe 
NOINVkrtkd_call_trxs -- default 

This switch determines which calls led to the present one. A 
reversed order call tree is generated. This switch has no effect 
without the ELABORATOR and LX ST switches. 

LISt {■listing-file-spec} 

NOLISt •• default in interactive mods 
LISt -- default for background processes 

This switch generates a listing file. The default filename is 
derived from the source filename, with a .LIS extension. The 
Hazing-file-spec can be optionally specified. 


&&Sa 





TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 

3 - 20 


LOg 

NOLOg -- default 

Tiui switch causes tha compiler to writs in the co mpilation log, 
command line options and tha fils specification of tha Ada source 
file being cooqpiled which is written to to SYSSOCTPTTr (the 
operating system's standard output). This switch is useful in 
examining batch output logs because it allows the user to easily 
determine which files are being compiled. 

MACro 

NOMACro -- default 

This switch produces an assaably like object coda listing appended 
to the source listing file. The LIST switch oust be enabled or 
this switch has no effect. 

MAIN SLAB 

N0MAiN_KLAB .. default 

This switch makes the compiler treat the compilation unit being 
compiled as a user-defined elaboration or setup p r og ram which is 
used instead of that normally produced by the ELABORATOR switch. 
Tha source file must be specified instead of a unit name of a 
previously cosqpiled procedure. Usually, the source file is 
modified by the user, starting from the version produced by the 
¥RXTE_ELAB switch. 


MAXsrrors-s 

MAXkrrors-soo -- default 

This switch assigns a value limit to the number of errors forcing 
job termination. Once this value is exceeded, the compilation is 
terminated. Information-leval diagnostic messages ore not included 
in the count of errors forcing termination. The specified value's 
range is from 0 to 500. 

MODSL-model -name 

If this switch is not specified, TZDada provides ccnpilation 
c a p abilities that are c o mmon to all models of the target. 

If this switch is specified, where modal-name is one of the models 
below, TXDada provides compilation capabilities that are valid for 
the specified model. The compilation that is performed for a 
particular model may be valid for another modal of the target if it 
supports the same machine-specific code (machine instructions, 
domains, etc.). 






TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 

3 - 21 


The following art valid models: 

n 

SA 

CA 

XB 

SB 


XA 


NEW LIBRARY 

NONEWjUBRARY -- default 

The NEWJLXBRARY switch creates an i960 subdirectory is your cu r r ant 
working directory and an I960.LIB library in that subdirectory, 
replacing the contests of the prior subdirectory and library, if 
they existed. 

The HOHEW^LIBRARY switch checks if an I960 subdirectory exists is 
your current working directory and if it does not already exist, it 
will create the I960 subdirectory and as I960.LIB library is that 
subdirectory. 

NOTE: This switch along with the PARSHTJLZBRARY switch replaces 

the MAKEJLXB switch. 

Object{- object-file-spec} 

Object -- default 
NOObjsct 

This switch produces a relocatable object file in the I960 
subdirectory in the c ur re n t comp ilation directory. The default 
filanane is derived from the source filename, with a ".OBJ”, 
extension. 

OPt -- default 

N00fe‘ Pmr *" t “ ( — 

N00Pt{. (parameter{,...})} 


This switch enables the specified global optimisation of the 
conpiled code. The negation of this switch disables the specified 
global optimisation of the compiled code. 







TLD ADA COMPILER 

Compiler Usage 


Z960-ADA-2C 

3 - 22 


«hn the OPT switch is tseand, without any parosttra, all 
optimisations listsd bslow srs tuzasd on. This rsstorss ths 
parameters to thsir d e fa u lts. Khan it is satarad with p a rame ters, 
only tha specified parameters ara tuzaad on. 

Khan tha MOOPT switch is entered, without any pa ras *tars, all 
optimisations listsd balow ara tuxaad off. whan it is antarad with 
parameters, only tha specified paras *tar s ara turnad off. 

Default opt imi rations . such as COMMOR_SOBlUUrMSSXaR, 
CONSTANT_ARITHMEnC, DEAD_CODE, and VALOE_FOIDX»Q, ate. Should Bfi£ 
ha ehangad for normal usa. Usars may wish to change thasa 
optimisations for configuration or tasting purposes, hows war, TLD 
Systems raeosawnds that they not ha changed. Thasa default 
optimisations should be changed only whan there is an abnormal 
situation with data or tha pr ogr am or a toad, TLD- or user-created 
algorithm. For example, if tha p r o gr am has an unused procedure the 
default optimisation parameter DSAD_SDBFSOGRAW d e fault will delate 
it for production imp r o v e m ent, however, tha user may not want tha 
unused procedure delated for Debugger purposes. If usars are 
finding a need to change thasa optimisations, please n o tif y TLD 
Systems so that we can resolve the problem sore efficiently. 

Tha follovino "»iv be used with tha /DPT and /HOOtT 
HCLSfilMti 

CODE_Movxmekt 

This parameter saves code to imp r o v e execution tis*. (For 
exasple, moves invariant code out of a loop). This pa r am e ter 
is turned an by default. 

COD E_Strai ghtu»x»g 

This parameter ensures that program flow is well formed by 
performing rearrangement of segswnts of coda. This parameter 
is turned an by default. 

COMmow_subkxprsssiow 

Expressions with tha same operands are not coaputed a second 
time. (For example, if an expression uses *A ♦ B" and another 
expressions uses "A ♦ B", the Cospiler does not cospute the 
second expression, sines it Knows it has already computed the 
value) . This parameter is turned on by default. KAftHIWS: 
Turning this switch off may cause unexpected results. 


CTO 











TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 
3-23 


CONsnurT^ARTTBHsnc 

This pinwtir performs constant arithmetic. This paraaeter 
ia turned on by default. WAIOflBG: Turning ebia switch off 
■ay eauaa unexpected raaulta. 

OEAO.Cooe 

This paraaeter remove a code that cannot be reached auch aa 
unlabeled code following aa unconditional branch. Thia 
parameter ia turned on by default. VAHRX1K3: Turning thia 
ewiteh off nay cause unexpected reaulta. 

DEAD.Sdbprookah 

Thia parameter raaovea aubprograaa that are not referenced. 
Thia parameter is turned on by default. 

DEAD_Varxabxa 

This parameter removes local temporary variables that are not 
used during execution. Thia parameter is turned on by 
default. 

DELassigr 

This paraaeter optimises code by deleting redundant 
assigaaeata. It only performs deletions allowed by the 
semantics of Ada. This paraaeter is turned an by default. 

Iklxbk 

By default, the c ompiler automatically inliaes aubp r ogr aaa 
that are not visible ia a package spec aad if the estimated 
code aise is smaller thaa the actual call, it will inline it. 
This p a r aa e ter is tuned on by default. 

LIterai*_pool 

This paraaeter. overrides the Compiler's optimisation 
separation of compile time constants iato a separate m emo ry 
pool. This parameter enables the user to exsreise canplete 
control over data allocation. This paraaeter is turned on by 
default. 

LOop_unrollikg 

This paraaeter applies to register memory only. It causes aa 
wqpression c om pu ted at the end of a loop to be remembered at 
the top of the next iteration. This parameter is turned on by 
daf atilt. 








TLD ADA COMPILER Z960-ADA-2C 

Compiler Usage 3-24 


Peephole 


This partncar performs opt i mi sation in vary limited 

concsxcs. This psraasesr is turned an by de f a u lt. 

R*gister_dedxcaxxcw 


This parameter allows dedication of a register to an object or 
•agression value. This parameter is eurnsd an by d ef a u lt. 

SChedouer 


This parameter is used to activate the reorganiser phase of 
the Compiler. Instruction Scheduling, as performed by the 
Reorganiser, is a phase between the Coda Generator and the 
Object Poznatter phases. The Reorganiser reads the Coda Pile, 
reorders the code, and outputs the Code Pile. This parameter 
is turned off by default. 


The purpose of the Reorganiser is to perform optimisation on 
the code generated by the Code Generator in order to minimise 
the amount of time that the hardware has to wait for data, 
generated by earlier instructions, to become ready for use. 


NOTE: If you choose to use this switch, TU> re c o mmend s that 
the Syatam Administrator set the user's page file quota to 
at least SO,000. 

SIngle_modole 


This parameter creates one object module per compilation unit 
rather than one for each top-level subp ro gr am . Xf this 
parameter is not used, and the compilation unit spec and body 
are in separate files, the extension a Jb a is added to the 
package name in the objeet file name of the package body 
(i.e., packsge-aame_b.obj) to differentiate between the 
package body and spec. The user may locate csects from only 
the body or spec by specifying the unique objeet filename 
(package-namejb for the body or package-name for the spec) 
followed by the control section name. This parameter is 
turned on by default. 

ST RSNGTH_REDUCTXON 


This parameter selects operators that execute faster. This 
parameter is turned on by default. 


TLD 





TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 

3-25 


VaLOT_FOLDIW3 

Substitutions of aptznda known eo haw* the mm value in 
perfoxsMd before expression analysis optimisation. (For 
example, if B and C haws etaa mm value, the expression *A ♦ 
C" is usod and "A ♦ B* will bo recognised as cannon and tbo 
Compiler will not eonpute eha socond expression, sineo it 
knows it has tho mm valua as tha first). this parsnstor is 
tuznod on by dafault. WARKZWS: Turning this switeh off nay 
causa u n a xp a ctad results. 


PAGs mlixuui-pmr-pmga 
PAGsaSO -- default 

This switch assigns a valua to tha number of linos par paga for 
listing. Tha valua can rang* from 10 to 99. 

PAREht TiTBRABY aparase • library-spec 
NOPAREht_library -- default 

Tha FAR£HT_LIBRARY switch uses tha specified library as tha parent 
library for the library to be created. 1750A must be included at 
tha end of tha parent -library- spec. This switeh nay only be used 
with tha HSW_LXBKARy switch. 

If tho WDPABEHT J J B Ra B Y switch is usod, the library created by tha 
SEWjLXBRAKr switch will have no parent library. 

WOTS: This switch along with tha Mnr_T.TBRART switch replaces tha 

MAICEJUB switch. 

PARMs 

NOPARMs -- default 

This PARAMETER switch causes all option switches go vern ing tho 
compilation, incl udin g tha defaulted option switches, to be 
included in tha listing file. Tha LIST option switch must also be 
selected or this switeh has no offset. User specifiad switches are 
preceded in the listing file by a leading asterisk (*). This 
switch ad ds approximately one page to the listing file. 

PHase -• default 
NOPHase 

This switch suppresses the display of phase names during 
conpilation. This switeh is useful in batch jobs because it 
reduces the verbosity of the batch log file. 








TLD ADA COMPILER 

Compiler Usage 


i960-ADA-2C 
3-26 


REF Is case-op cion 
NOREF_Td_cass map cion -- default 

This is a reformatting option, under the control, of tha REFORMAT 
switch. This switch dstsrminss how wariahle names appear in the 
coopiler listing. The options for this switeh are: 

ALLJLOWR — All variable names are in lower case. 

AliToPPBR -- All variable names are in upper ease. 

I»X T X AL_CAFS -- All variable nows have initial caps. -- default 

REF Ket CASS-eption 
NOREF_Kjy_CASS«option •• default 

This is a reformatting option, under the control of the REFORMAT 
switeh. This switch determines how Ada key words appear in the 
compiler listing. The options for this switch are: 

ALL_LOWER -- All Ada key words are in lower case. -- default 

ALLJBPPER -- All Ada key words are in upper ease. 

INITXAL_CAPS -- All Ada key words have initial caps. 

REF0kmat{ -reforaat-file-spec} 

NOREFOrmat -- default 

This switch causes the coopiler to reformat the source listing in 
the listing file (if no reformat-file-spec was provided) or 
generate a reformatted source file, if a reformae-file-jpec is 
present. The default file extension of the reformatted source file 
is *.RFM". Reformatting consists of uniform indentation and retains 
numeric literals in their original source form. This switch 
performs the reformatting as specified by the REF_H>_CASE, 
REF_KEY_CASE, and INDENTATION switches. 

SOoRCE -- default 

NOSOorce 

This switch causes ths input sourcs p rogr a m to be included in the 
listing file. Unless they are suppressed, diagnostic messages are 
always included in the listing file. 

SYNtax_only 

N0SYNtax_ONLY -- default 

This switch performs syntax and semantic checking on the source 
program. No object file is produced and ths MACRO switeh is 
ignored. The Ada Program Library is not updated. 


i 


|TLP JSMg T »m s t TO 








TLD ADA COMPILER 

Cohpzlkr Usage 


I960-ADA-2C 
3 - 27 


TA»aT-i9€0 -- dal suit 

This switch selects the target coqwur lor which cod* is to b* 
generated lor this compilation, "i960* selects iSSO architecture 
operation. 


WAraoSGS -- default 

NOUAsbzsss 

The WAXBXNQS switch outputs warning and h i ghe r level diagnostic 

messages. 

The MOMARUXUSS switch suppresses the output ol both warning*level 
and information-level diagnostic messages. 

WlpTHicharacters -per - line 
WIuTH-XlO -- delault 

This switch sets the number ol characters per line (80 to 132) in 
the listing file. 

WOrd store 

N0W0rd_STORK -- default 

The WORD_STORE switch simulates byte and hall-word stores by using 
lull word instructions. This will allow only lull word stores to 
be performed. The HOffORD_S70RS switch will allow byte and 
half-word stores to be performed. 

WRitb_klab 

N0WRzTE_£LAB -- default 

The WRITS_ELAB switch generates an Ada source file which represents 
the main elaboration "setup" program created by the compiler. The 
unit n a me of a previously coopiled procedure must be specified 
instead of a source file. The WRXTB_SXAB switch may not be used at 
the same time as the E1AB0RAX0R switch. 

Xtra 

NOXtra - - default 

This switch is used to access features under development or 
features not defined in the LRU. See the description of this 
switch in Section 3.15. 










COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 


B-2 







TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 1 


4 DIRECTIVE LANGUAGE 


On any hose, the comand lias calling TLD Ink nay optionally specify a 
linkar directive file co control the linking operation. The directive 
file format and individual directives are described in the following 

pages. 


4.1 Directive File 

Each line of the directive file contains up to 132 characters: Tabs 
are treated as blanks. Blanks are used to separate words when no ocher 
punctuation separates them; the actual number of blanks is 
inaignifleant. Charaetsrs that follow two successive minuses (- -) are 
ignored. 

A directive ordinarily consists of one line of input, however, lines | 

may be continued using a tilde (-) . Only one directive is allowed per j 

input line. A continuation character can be used to continue directive 
values, however, a value cannot be split between two lines (if the 
value does not fit on the current line, the continuation character must 
be used after the previous value and the value must be placed on the 
following line) . Either upper or lower case may be used (they are are 
equivalent) except for file names an hosts with case-sensitive file 
names. 


A directive file may include another directive file. The format of 
this directive is: 

INCLUDE £ila*pec{ .Ink} 

where the file extension .Ink may be optionally specified if the file 
is a directive file, otherwise, if the file is an abject module file, 
its extension must be supplied (i.e., .obj or .olb must be supplied) . 

An included file may itself include another directive file, that is, in 
the example above, filespec.lok may contain yet smother directive 
file. The level of nested directive files allowed depends on the 
number of files that the operating system permits to be opened 
simul taneously. 


B-24 










TLD 32-BIT UNIVERSAL LINKER 

Ozrectzve Language 


Z960-LNK-2C 

4 - 2 


Conditional linking nay be pttiomd in the directive file. The format 
of this conditional linking is: 


if logical ‘expression than 

{alsa | alsif logical-expression than} 

andif 

If tha logical -expression raturna a trua value, tha statements 
following tha if or tha alaif clauaa will ba processed, otharviaa, tha 
anaa following tha alaa clauaa will ba procaaaad. 


4.2 Directives 

TLD Ink diractivaa ara daaeribad in thia saction, in alphabacical ordar. 

Tha following words, in lowar caaa italics, ara usad in tha 
dascriptions: 

cseec-name 

Thia is tha name of tha control saction in tha program baing 
linkad. 


file 


This is a host file specification. A file specification must ba 
completely contained on a line. 

group-name 

This is a control saction that includes specified modules and/or 
control sections of module<s) . 

module-name 

This is the name of a module in' the program being linked. 
paddreas 

This is a physical address in the fora of a hexadecimal number 
from 0 to FTFFF. 


B-25 








TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 3 


ppmgm 

This is a physical page number in eha fora of a hexadecimal 
number from o-co fffff. 


symbol 

This is ehe aaaa of aa external symbol in cha program baing 
linked. 


vaddress 

This is a virtual addrass in tha fora of a haxadaeiaal number 
from 0 to ?>T?Fm (2**32 - 1) . 

vpagra 

This is a virtual paga mimbar in cha fora of a haxadaeiaal 
number from o co FFFFF. 

Each TLD Ink directive is described below. 


ASSIGN (vpag»-£page{,...}) 

Tha ASSIGN directive causes cha specified virtual paga co be 
mapped co cha corresponding physical paga. 

For example, 

ASSIGN (40000sC0) 

causes cha specified virtual paga 40000 hex co be mapped co the 
physical page CO hex. 

ASSIGN (40000-C0, 10000-BO) 

causes ehe specified virtual pages 40000 hex and 10000 hex co 
be mapped co ehe physical pages CO hex and B0 hex, 
respectively. 

COMMENT {•}{"} Text co he pue in Load Module{"} 

The COMMENT directive contains cexe which TLD Ink puts in che 
load module. TLD Ink precedes che text within quotes by ”;; ” to 
distinguish user inserted co nsen ts from chose inserted by 
TUJlnk which begin with ";". All consents specified by COMMENT 
directives are inserted in che load module imnediacely 
following the initial consent which is created by TLDInk. If 


B-26 






TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 4 


quotes tri specified, they must um at cha bag inn i n g and and 
of eha caxe co ba craacad aa a consent. 

DEBUG {til*) 

Whan DEBUG is usad cha liakar craaeaa a dabug £ila concaining 
symbols and chair valuas for cha symbolic dabugger and a 
trmceback fila concaining call and branching information, if 
DXBOG is noc specified, cha linker doas not produca cha dabug 
fila and tracaback fila. The linkar puts symbols which wars 
included in cha relocatable object fila in tha dabug fila and 
tsaeaback information also in cha relocatable object fila in 
cha cracaback fila. The name of cha dabug and craceback files 
are derived cha same way tha map fila name is derived aa 
described in cha MA? switch. Tha format of cha dabug and 
cracaback files is described in Appendix A. 

This directive has the same functionality as cha linkar switch 
OSBOG described in Chapter S. 


END 


This directive is always required (if cha End-of-Fila is noc 
present) . Zt terminates directive input co TLD Ink, so chat any 
subsequent input is ignored. After this directive is read, 

TLD Ink allocates memory and reads tha object files co produca 
cha load modulo. 

FILL (vaddr»vaddress, lan-size-in-bytes, { * }paccern{ "} ) 

Tha FILL directive is usad to fill in all unused memory with a 
user-specifiable value. 

The vaddress parameter is eha starting virtual address of cha 
fill region, the size-ia-byres parameter is cha number of bytes 
to be filled with cha pattern, and cha pattern parameter is cha 
pattern used co fill in cha fill region. The pair of double 
quotas (" ”) are required if cha fill pattern is a character 
string. 

GROUP {:group-name-} (oamel {, name!— }) {(accribuce{ 

This directive craaces a grouping of control sections. Tha 
arguswnt name can be module-name, module-nameresect-name, or 
.-group-name. It module-name is spacifiad (without : csecz-name) 
chan cha wild card is assumed for cha csecz-name and all 
control sections of eha specified load module are usad. 

Because the group-name is associated wich cha "null" module, ie 
is always preceded by the null module name: a colon (:) . The 
group name becomes a new control section chat includes che 


B-27 





TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4 - 5 


specified control sections and tha included control sections 
any not b« specified in any ocher group. If aetribucea ara 
apacifiad, chan only choaa control sactiona with cha specified 
aetritoueaa will ba includad in cha group and cha group' a 
actribucaa conaa.se of only choaa apacifiad in cha diracciva. 

This diracciva, aa wall aa cha SET diracciva, can rafar co I 

accribucaa in pragma Accribuca in eha aouarca fila. Rafar co j 

Cha Rafaranca »"""»"’■ for cha TIP Ada Compiler for furthar I 

information ragarding pragma Accribuca. | 

If no daea or coda accribuca ia apacifiad and an instruction 
(coda) conerol saccion ia includad in cha spaeifieacian. cha 
group will hava cha coda accribuca. If daca conerol aactian(a) 
ara alao apacifiad, a warning maaaaga is displayed indicating 
that cha group contains mixed instruction and daca conerol 
sacciona and chac cha coda aecribuca is assumed for cha group. 

If no daca or coda accribuca ia apacifiad and no instruction 
(coda) conerol saccion ia includad in cha spaeifieacian, cha 
group will hava cha daca accribuca. 

Tho alignment of eha group is by eha "least common denominator* 
of all conerol saccion alignment values. Tha length of cha 
group is cha sum of eha lengths of eha includad control 
sacciona plus necessary alignment. Tha length (aa wall aa 
ocher accribucaa) of cha group may ba changed by cha SET 
diracciva. After all explicit GROUP directives hava bean 
appliad, cha Linker groups any remaining ungrouped conerol 
sections and groups by similar attributes. Groups may ba used 
ia ochar group directives. 

Accribucaa may ba ana or more of cha following co salacc groups 
with choaa accribucaa. Tha boolean accribuces ara separated by 
a comma co danoca a logical AMD. 


READ 

is a boolean TRUE if eha caacc is all readable, 
otherwise, ie is FALSE. 

DORSAD 

is a boolean TRUE if eha caacc is noc all readable, 
otherwise, ie is FALSE. 

WRITE 

is a boolean TRUE if cha csacc is all vricable, 
otherwise, it is FALSE. 

NOWRITS 

is a boolean TRUE if the csecc is noc all writable, 
otherwise, ic is FALSE. 


B-28 






TLD 32-BIT UNIVERSAL LINKER 

Dzrectivi Lansuagi 


I960-LHK-2C 

4-6 


COSE 

is a boolean TRUE if the csact is ail cods, ocherwise, 
ic is FALSE. 

NOCODE 

is a boolsan TRUE if chs csaec is noc all cods, 
ochsrwiss. ic is FALSE. 

DATA 

is a boolsan TRUE if tha csacc is all data, ocherwise, 
it is FALSE. 

NODATA 

is a boolsan TRUE if eha cssce is noc all daca, 
ochsrwiss, ic is FALSE. 

To allow grouping of sore concrol saccions c h a n can fie in a 
singla dirsccivs lina, a concinuaeion characcar can bs ussd or 
chs GROUP dirsccivs can bs rapsaead (using cha same group name) 
as many eimss as nasdad eo includs all concrol saccions nssdsd 
wichin chac group. For example, if eha following is in chs 
linker dirsccivs fils: 

GROUP :Group_l«(a,b,c)... 

GROUP :Group_la(d,a,f)... 

Group_l will concain a,b,c,d,e, and f. 

Wild card symbols as previously described may ba included in 
chs module-name, caecz-aame. and group- name (which is noc chs 
name of chs group, bue a group co bs included) . 

The ordering of cha wild card spacificacions wichin cha linker 
dirsccivs fils is imporcanc. If any wild card specificaeion is 
a subset of anocher, cha subsec should be lisced firsc. For 
example, if chs following groups are in the linker direccive 
fils: 


GROUP :Group_l«(abc*:lmn*)— 

GROUP :Group_2 »(ab": lm*)... 

concrol seen on "abed: lamp" will be included in Group_l, and 
sines ic has bean included inco a group, will noc bs included 
in Group_2. 

The following is an example of incorrecc ordering, where cha 
subsec is lisced after its containing sec: 

GROUP :Group_2 »(ab*: lm*)... 


B-29 





TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


I960-LNK-2C 

4-7 


GROUP :Group_I»(abc*:lam*)... 

la this example, control section "abed:lmno" will be included 
in Group_2 , and sine* it has bsaa includad into a group, will 
not ba includad in Group.l. 

INCLUDE {(}file{,...}{)} 

Tha INCLUDE directive specifies tha file(s) usad for subsequent 
linJear input. This is tha only linJear dirsetiva that raquiras 
a complete filename (i.a., no fila type or extension is 
sppaadad to tha supplied name) . If tha fila n a me ends in .obj 
or .olb, tha fila is assuswd to ba an object module fila. If 
tha fila name ends in .Ink, tha fila is assumed to ba a 
directive fila. If only ana filsspoe is specified, tha 
corresponding parentheses are not required. This directive may 
ba repeated. 

NOTE: The GROUP and SET directives are used, instead of this 
directive, to make specific selections of modules and/or 
control sections to be includad in the link. 

A directive file may include another directive file. Tha 
format of this directive is: 

INCLUDE Cilespe e{.Ink) 

where the file extension .Ink may ba optionally specified if 
the file is a directive file, otherwise, if the file is an 
abject module file, its extension must be supplied (i.e., .obj 
or .alb must be supplied). 

An included file may itself include another directive file, 
that is, in the example above, Silespec.lnk may contain yet 
another directive file. Tha level of nastad directive files 
allowed depends on the number of files that the operating 
system permits to be opened simultaneously. 

LET symbol ■ expression 

when LET is used, the linker sets the specified symbol to the 
specified value or expression. This directive has the same 
effect as defining the symbol as an EXPORT in an object 
module. Any external references to the specified symbol from 
an abject module are set to the value specified in the LET 
directive. Currently, the expression argument must be a 
hexadecimal number. 


B-30 






TLD 32-BIT UNIVERSAL LINKER 

Oxrectxve Language 


I960-LNK-2C 

4 - 8 


LIBRARY.{ (} £ ilm { _) } 

This directive causes the specified ohjeer modu le library or 
libraries eo be searched to resolve undefined symbols. The 
parentheses are noc required if only one filespec is specified. 

The order chat the filespecs are specified is the order in 
which they are searched, t£ library is used both an the 

line end in the directive file, the libraries specified 
on the command line will be searched first followed by chose 
specified in the directive file. 

TUlntc will process the library directive or switch at the 
point where it is specified, therefore, it should be specified 
after includes and searches. 

This directive has the same functionality as the linker SEARCH 
directive and LIBRARY switch which is described in Chapter S. 

MEMORY (mam_ cype_nama, b*se_address , 2engch_in_words, - 
word_size_in_bits) 

This directive describes a memory unit other t h a n i960 standard 
mesnry to which TLD Ink will allocate control sections 
containing objects specified in pragma MemoryJJhit. The 
meo_cype_name argument is the character string specified ?ragma 
Memory_Uni t, the base_address argument is the starting address 
hex value in special memory where the memory unit objects are 
to be allocated, the Iangch_in_worcts argument is the hex value 
of the size in words of the special memory location, and the 
word_sire_in_bi cs argument is the hex value of the size in bits 
of each word of special memory. 

RESERVE (vaddravaddress, len«sire_in_bytes{,...}) 

This directive indicates that no relocatable control sections 
are to be loaded into the specified address space. 

SEARCH file 

Whan SEARCH is used, TLD Ink searches the specified file for 
modules which define currently undefined external references. 
These modules are included as if they had been specified in an 
INCLUDE directive. Undefined weak external references (i.e., 
associated with WEAK IMPORT) do not cause inclusion on a 
search, but if an external is weakly referenced (i.e., 
associated with WEAK IMPORT) and strongly referenced (i.e., a 
regular IMPORT) , its defining module is loaded by SEARCH. New 
external references from modules included frem the search file 
may cause additional modules to be included from the search 











TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


Z960-LNK-2C 

4 - 9 


file, regardless of the order of modules in the search fila. 
For example, if cha program rafaraneaa only S. S rafarancas T, 
and cha library contains 7 followed by S, both S and T are 
included from cha library. 

This directive has cha same functionality as the linker LIBRARY 
directive and LIBRARY switch which is described in Chapter S. 

SET name' {(}actribucel»weiuel{,accribuca2«value2. ...}{)} 

This directive sets each specified attribute co the 
corresponding value for cha specified control section or 
group. The argument name can be nodule-name, 
module-name resect-name, or : group-name. If module-name is 
specified (without :csece-name) chan the wild card is 
assumed for the csece-name and all control sections of the 
specified load module are used. The parentheses are required 
only if more chan one attribute is specified. Because the 
group-name is associated with cha "null" module, ic is always 
preceded by cha null module name: a colon (:) . 

This directive, as well as the GROUP directive, can refer co 
attributes in pragma Attribute in the source file. Refer co 

the Reference Oocumene_ jpr , £&» Ttf Md CflTOiltr *°r further 

infozsiacion an pragma Attribute. 

If no data or code attribute is specified and an instruction 
(code) control section is included in the specification, the 
control section or group will have the code attribute. If data 
control section(s) are also specified, a warning message is 
displayed indicating that mixed instruction and data control 
sections have been included and that the code attribute is 
assumed for the group. If no data or code attribute is 
specified and no instruction (code) control section is included 
in the specification, the control section or group will have 
the data attribute. 

wild card symbols may be included in the module-name and 
csece-name consisting of which matches one or mors 

characters and "?” which matches exactly one character. All 
modules and conerol sections of the object module files listed 
in the include directive<s) that match the wild card pattern 
are selected. 











TLD 32-BIT UNIVERSAL LINKER 

Directive Language 


Z960-LNK-2C 

4 - 10 


Atcribucas aay be ana or mora of cha following eo sac or 
rafaranca an accribuca value: 

VAflOR 

is cha baginning virtual, address of this caacc. it 
eonsiscs of a hax or daciaal numbar. To sac addraas (aa) 
in ragion 3, an eight-digie, non-negative, hax number 
muse ba usad. 

PADDR 

is cha baginning physical addrssa of this csacc. Sinca 
cha linJcar doas not normally assign physical addrassas, 
this accribuca muse ba sac bafora ie is rafarencad. 

LE»(GTH} 

is cha langeh of chis csacc. 

to 

ALIGN 

is cha alignmanc usad for chis csacc. 

READ 

is a boolean TRUE if cha csacc is all readable, 
otherwise, ic is FALSE. 

NOREAD 

is a boolean TRUE if cha csacc is noe all readable, 

otherwise, ic is FALSE. 

WRITE 

is a boolean TRUE if cha csacc is all wri cable, 

otherwise, ic is FALSE. 

NOWRITE 

is a boolean TRUK if cha csacc is noc all writable, 

otherwise, ie is FALSE. 

CODS 

is a boolean TRUE if cha csacc is all coda, otherwise, 
ic is FALSE. 

NOCODE 

is a boolean TRUE if cha csacc is noc all coda, 

otherwise, ic is FALSE. 

DATA 

is a boolean TRUE if the csacc is all daca, otherwise, 
it is FALSE. 


B-33 









TLD 32-BIT UNIVERSAL LINKER 

OXRECTZVK LANGUAGE 


Z960-LNK-2C 

4 - U 


ia a bool mo TROT if t ha earner, ia not all data, 
ocharwiaa, it ia FALSE. 


B-34 







APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 


package standard is 


type SHORT INTEGER is range -32768 .. 32767; 
type INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -2.12676E+37 .. 2.12676E+37; 
type LONG FLOAT is digits 15 

range -T.123_558_209_288_95E+307 .. 1.123_558_209_288_95E+307; 
type DURATION is delta 2.0**(-14) range -86_400.0 .. 86_400.0; 


end STANDARD; 


C-l 









APPENDIX F 


The Ada language definition allows for certain machine.dspendencies in a 
controlled manner. Ho machine-dependent syntax or sem ant ic extens ions or 
restrictions are allowed. The only allowed isyleawntation-dspendsnciss 
c or respond to iavlementaton-dependent pragmas and attributes, certain 
machine-dependent co nven tions, as mentioned in chapter 13 of the 
MXL-STD-1815A; and certain allowed restrictions on representation 
clauses. 

The full definition of the implementation-dependent characteristics of 
the TLD VAX/i960 Ada Compiler System is presented in this section 
extracted from the compiler reference manual. 


vax/x960/tronxx 


PAGE 1 





TLD ADA COMPILER 

i960 Target Compiler 


I960-ADA-2C 

5 - 1 


5 i960 T ARGET COMPILER 

ansBaasB^auBBsanssBasssaassasasB 


This Motion identifies correspondences between features o£ tha TLDacs 
and aactions o£ tha Ada Languaga Reference Manual (LRM) . 


5.1 LRM CH.l - Introduction 

Tha formal acandarda for tha Ada Programming languaga are provided in 
tha art* Hamm Reference Manual (LRM), ANSI /MIL-STD- 1815A. TLD 
Syatema haa developed TLDaca in tha apirit of thoae standards. 

Tha m ac h ine depandanciaa permitted by tha Ada language are identified 
in LRM Appendix F. No machine dependent syntax, semantic extensions, 
or restrictions are allowed. Tha only acceptable implementation 
dependencies are pragmas and attributes, the machine dependent 
conventions explained in LRM Chapter 13, and same restrictions on 
* representation clauses. 

TLD Systems has developed implementation‘dependent software to 
specifically conform to these restrictions and has developed 
implementation-independent pragmas and attributes in the spirit of the 
LRM. This software is described, below, in individual discussions that 
follow the topical order (within chapters and appendices) of the LRM. 
For a detailed description of the Run Time environment, refer to the 
Reference Document for tha TLD Ada Run Time System. 


5.2 LRM CH.2 - Lexical Elements 

The items described in this section correspond to the standards in 
Chapter 2 of the LRM. 

The following limits, capacities, and restrictions are imposed by 
the Ada compiler implementation: 

The m a x i mum number of nesting levels for procedures is 10. There 
is no limit to nesting of ifa, loops, cases, declare blocks, select 
and accept statements. 


ii 










TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 2 


The maximum nustber of lexical alaaaats within a language a tat—ant. 
daelaration or pragma ia not aaqplicitly limited, but liaitad 
dapandlng on tha combination of Ada constructs codad. 

Tha maxi roan number of proeaduraa par compilation unit ia S00. 

Tha maxi roan number of levels of naating of XBCLODE filaa ia 10. 
Thara ia no limit on tha total mrobar of IHCLODSd or WXTHed filaa. 

Ap p roxi mately 2000 uaar*dafinad al— ant a ara allowad ia a 
compilation unit. Tha axact limit dapanda upon tha c h a r actariatica 
of tha alaawnta. 

A maximal of S00 aavara (or more aarioua) diagnoatic aaaaagaa ara 
allowad for a caopilation. 

Tha ranga of atatua values allowad ia tha aana aa tha ranga of 
intagar valuaa, -2147483640..2147483647. 

Tha maximum numbar of parameters in a procedure call ia 20. 

The maximum number of charactara in a name ia 120. 

Tha maximum source line length is 120 characters. 

The maxiaium string literal length ia 120 characters. 

The source line terminator is determined by tha editor used. 

Name characters have external representation. 


5.3 LRM CH.3 - Declarations and Types 

The itesia described in this section correspond to tha standards in 
Chapter 3 of tha LRM. 

Humber declarations ara not assigned addresses and their naaws are 
not permitted as a prefix to the 'address attribute. 

Objects are allocated by the compiler to occupy one or more 8 bit 
bytes. Only in the presence of pragma Pack or record representation 
clauses are objects allocated to less than a word. 

'Addreas can be applied to a constant object to return the address 
of the constant object. 

Except for access objects, uninitialized objects contain an 


ii 







TLD ADA COMPILER 

i960 Target Compiler 


i960 -ADA-2C 
5 - 3 


undefined value. An atteagit to reference the value of an 
uninitialised object is not da tact ad. 

The maximum number of anuoMratioa litarals of all typaa is limited 
only by available symbol table space. 

The predefined integer types are: 

Integer range -2_147_483_648 .. 2_147_483_647. 

Short_Integer range -32_768 .. 32_768 

System.Min_lnt is -2_147_483_648. 

System.Max_Int is 2_147_483_647. 

The predefined real types are: 

Float digits 6. * 

Long_Float digits 15. 

System.MaxJDigits is 15. 

There is no predefined fixed point type name. Fixed point types 
are implemented as data depending upon the range of values by which 
the type is constrained. 

Index constraints and other address values (e.g., access types) are 
limited to 2147483847. 

The maximum array size is limited to 2147483647. 

Tha maximum string length is 2147483647. 

Access objects are is^lemented as an unsigned integer. The access 
literal Null is iiqilementad as 0. 

There is no limit on the number of dimensions of an array type. 
Array types are passed as parsmeters opposite unconstrained formal 
parameters using a descriptor packet vector. 

Additional dimension bounds follow immediately for arrays with more 
than one dimension. 

Packed strings are generated instead of unpacked strings. 


ii 










TLD ADA COMPILER 

i960 Target Compiler 


I960-ADA-2C 

5 - 4 


5.4 LRM CH.4 - Names and Expressions 

Th* iena described in this section corraapood co eh* standard* in 
Chapter 4 of eh* LRM. 

Machtna_Overflows is Tru*. 

Pragma Conerollsd has no *ff*cc sine* garbag* collection is n*v*r 
performed. 


5.5 LRM CH.5 - Statements 

Th* ie*sua described in this section correspond eo eh* scandards in 
Chapter s of eh* LRM. 

Th* maximum number of seaeeaenes in an Ada source program is 
undefined and limiead only toy symbol eabl* space. 

Unless they are quite spars*. Cue statements are allocated as 
in d e xed jump vectors and therefore, are very fast. 

Loop statements with a "for* implementation scheaie are implemented 
' moat efficiently if th* range is in reverse and down to zero. 

Data declared in block statements ia elaborated as part of its 
containing scope. 


5.6 LRM CH.6 - Subprograms 

The items described in this section correspond to the standards in 
Chapter 6 of the LRM. 

Arrays, records, and task types are passed by reference. 


5.7 LRM CH.7 - Packages 

The items described in this section correspond to the standards in 
Chapter 7 of th* LRM. 

Package elaboration is performed dynamically, permitting a warm 
restart without reloading the program. 


ii 









TlH ADA COMPILER 

i960 Target Compiler 


I960-ADA-2C 

5 - 5 


5.8 LRM CH.8 - Visibility Rules 


Noe applicable. 

NOTH: TLD has not produced a modification of eha ieea(s) described in 
this LRU section or documentation parallel to the information in this 
LRM section. 


5.9 LRM CH.9 - Tasks 

The items described in this section correspond to the standards in 
Chapter 9 of the LRM. 

Task objects are implesiented as access types pointing to a Process 
Control Block (PCB). 

Type Time in package Calendar is declared as a record containing 
two integer values: the current value of the real time clock 
counter and the number of ticks that have elapsed on the countdown 
timer. 

Pragma Priority is supported with a range defined in package 
System. The restriction on a dynamic expression for a task's 
priority has been removed consistent with Ada 9 X. State: Like Ada 
9X, a pragma Priority placed in the main subprogram remains 
restricted to a compile time static expression. 

Pragma Shared is supported for scalar objects. 

TLDada allow either a duration or a clock time to be specified in 
a delay statement. Xf a duration is specified, the task is delayed 
for that duration. Xf a clock time is specified, the task is 
delayed until that clock time is reached. 

The format for specifying a duration is: 

delay expression 

where expression is of type Duration. 

The format for specifying a clock time is: 

delay until expression 
where expression is of type Calendar.Time. 


ii 






TLB ADA COMPILER 

i960 Target Compiler 


i960 -ADA-2C 

S - 6 


Package C a l e n da r is described in the Reference I?flr aMnr for the tld 
Bun Tima SvitM. iSfiQ Taroat. 


5.10 LRM CH.10 - Program Structure/Compilation 

Ads Program Library procsssing is dsscribsd in chs Reference twi«ee«r 
for the TLD Ada Library Manager, i960 Tarosc. 

Multiple Ada Program Librariss are supported with each library 
containing an optional ancestor library, The predefined packages are 
contained in the TLD standard library, I960. LIB 


5.11 LRM CH.ll - Exceptions 

Exception h a n dling is described in the Reference Document for the TLD 
Run Tima System, i960 Target. 

Exception objects are allocated access objects to the exception name 
string. The implementation of exceptions is described in the Reference 
Document for the TLD Run Time System, i960 Target. 

Exceptions are implemented by the TLD Ada Compiler System to take 
advantage of the normal policy in real time cosgmter system design to 
reserve 50% of the duty cycle. By executing a small number of 
instructions in the prologue of a procedure or block containing an 
exception handler, a branch may be taken, at the occurrence of an 
exception, directly to a handler rather than performing the time 
consuming code of unwinding procedure calls and stack frames. The 
philosophy taken is that an exception signals an exceptional condition, 
perhaps a serious one involving recovery or reconfiguration, and that 
quick response in this situation is more important and worth the small 
throughput tradeoff in a real time environment. 

TLDada allows one task to asynchrounously signal a another cask by 
raising an exception in the ocher task. The following Ada statement 
may be used in an Ada program to exercise this capability: 

raise axcepcian_name in eaak_oame 

There is no direct effect on the task raising the exception. It 
continues executing the code following the raise statement. The 
context of the target cask is sec so that the next time it runs, it 
will act as if the exception had been raised at the point at which it 
was last executing. This feature requires the compiler switch XTRA. 


ii 









TLD ADA COMPILER 

i960 Target Compiler 


i960 -ADA- 2C 

5 - 7 


5.12 LRM CH.12 - Generic Units 

Generic implementation ia described in the Reference Docum ent for rh» 
TLD Run Tima System. i960 Target. 

A aingla ganaric inscanca ia ganaracad for a ganaric body, by default. 
Oanaric apacificationa and bodiaa naad not ba compiled togachar nor 
need a body ba compiled prior to eha compilation of an inacaaeiaeion. 
Bacauaa of tha aingla axpanaion, ehia implementation of ganarica eanda 
to ba more favorable of apace aavinga. To achieve ehia tradeoff, tha 
inatantiatiana muat, by nature, ba more general and are, therefore, 
sosiewhat laaa efficient tiaawiae. Refer to pragma Xnatantiate for more 
information on controlling inaeaneiation of a generic. 


5.13 LRM CH.13 - Clauses/Implementation 

Representation clauaa support and raatrictiona are generally described 

in Section 5.2.F. 

, Additional Information 

A comprehensive Machina_Coda package is provided and supported. 

Tha specification for this package is included in the 
Machine_Coda_.Ada file. 

Tha present version of the TLD i960 Ada Compiler System supports 
two forma of code insertion language features. In addition to the 
standard LRM form od record aggregate form of code insertions that 
are fully supported, TLDaca supports an alternative form supplied 
with package Machine_Code that defines a procedure for each i960 
architecture instruction that is intrinsically implemented inline 
by using a pragma Interface with a language type of i960; each such 
procedure results in one instruction being inlined. Because a 
procedure form is used, the restrictions placed upon the 
Machine_Code aggregate form of insertion that prohibit mixing in 
the same scope with declarations, statements, and functions do not 
apply. Furthermore, the procedure form offers a more friendly 
syntax that corresponds more to assembler input that does not 
require all fields to be specified (as is true for machine code 
aggregates) and can make use of parameter defaulting for such 
fields as index registers. 

To further support those users who need to write at the assembly 
level, several additional procedures and pragmas have been added 
that assist the user in accessing Ada expressions, modifying Ada 
operands, and in manipulating registers. Pragma Register may be 


ii 






TLD ADA COMPILER 

i 960 Tarot Compiler 


X960-ADA-2C 

5 - 8 


applied to an Ada object to direct tha cosq>iler to allocate 
(dedicate) the object to the deeignated register. 0se of chi a 
object on the left side of an assignment scat ament will result in 
the right side expreseion being computed and loaded into the 
register associated with the left side object, a la C register 
variables. Use of the object in a value reference context will 
result in a use of the value currently found in the associated 
register. This approach permits direct access to values from 
complicated Ada expressions, packed and subscripted operands, 
discriminated record components without having to know how the 
cospiler actually allocated the objects. Two additional procedures 
are defined, Protect and Ohprotect, which each taka a register 
paraaieter identifying a register that is to be reserved from 
compiler use within the range of statements bracketed by the 
Protect/Ohprotect call pair. 

Pragma Interface with a language type of Interrupt will result in 
the prologue and epilogue of the indicated procedure generated to v 
conform to the TLDrtx conventions for interrupt handlers. A 
language type of Void will prevent the compiler from generating any 
prologue or epilogue coda and leave the responsibility for the 
procedure entry and exit code to the statements within the 
procedure: usually the above described intrinsically built-in 
machine code procedures. 

Uhchecked_Deallocation and Unchecked_Canversian are supported. 

Procedure Ohchecked_Deallocation (LRM 13.10.1) 

Function Onchecked_Con version (LRM 13.10.2) 


5.14 LRM CH.14 - Input/Output 

The items described in this section correspond to the standards in 
Chapter 14 of the LRM. 

Pile I/O operations are not supported. 

Input/output packages and associated operations are explained in 
Section 5.2.F of this manual. 











TLD ADA CONPILER 

i960 Target Compiler 


I960-ADA-2C 
5 - 9 


5.2.A LRM App.A - Predefined Language Attributes 

The items referenced in this section correspond to the standards in 
Appendix A of the LAM. 

All LRM-defined attributes are supported by the TLDacs. 


5.2.B LRM App.B - Predefined Language Pragmas 

Ttie items described in this section correspond to the standards in 
Appendix B of the LRM. Any differences from the implementation 
described in the LRM are listed below. 

PRAGMA CONTROLLED 

This pragma is not supported. 


PRAGMA ELABORATE 

This pragma is iagilesiented as described in the LRM. 


PRAGMA INLINE 

This pragma is implemented as described in the LRM. 


PRAGMA INTERFACE 

pragma interface ( language _name, Ada_encicy_name{, string )); 
pragma interface (system, Ada_eneity_nsme); 

Pragma Interface allows references to subprograms and objects that 
are defined by a foreign module coded in a language other than Ada. 

The following interface languages are supported: 

o Assembly for calling Assembly language routines,- 
o Intel's i960 Architecture Specification for defining built-in 
instruction procedures. 

If the Ada_encicy_name is a subprogram, LRM rules apply to the 
pragma placement. Pragma Interface may be applied to overloaded 
subprogram names. In this case, pragma Interface applies to all 
preceding subprogram declarations if those declarations are not the 
target of another pragma Interface. 


ii 










TLB ADA COMPILER 

i960 Target Compiler 


I960-ADA-2C 
s - 10 


For exaople: 

package Test is 
procedure PI; 

pragma Interface (Assembly, Pi, "Aam_Routine_l■) ; 
procedure PI (x:Long_Float) ; 

pragma Interface (Assembly, PI, ’Asm_Routine_2■) ; 
end Test; 

In the example above, the first pragma Interface applies to the 
first declaration of procedure Pi. The second pragma Interface 
appliee to only the second declaration of procedure PI because the 
first declaration of PI has already been the object of a preceding 
pragma Interface. 

If the Ada._Entity_Nama is an object, the pragma must be placed 
within the same declarative region as the declaration, after the 
declaration of the object, and before any reference to the object. 

Void may be used as the 2anguage_name to prevent the compiler from 
generating any prologue or epilogue coda and leave the 
responsibility for the procedure entry and exit code to the 
scacesients within the procedure. 

If the third parameter is omitted, the Ada name is used as the name 
of the external entity and the resolution of its address is assumed 
to be satisfied at link time by a corresponding named entry point 
in a foreign language module. 

If the optional string parameter is present, the external name 
provided to the linker for address resolution is the concents of 
the string. Therefore, this string must represent an entry point 
in another module and must conform to the conventions of the linker 
being used. 

An object designated in an Interface pragma is not allocated any 
space in the compilation unit containing the pragma. Its 
allocation and location are assumed to be the responsibility of the 
defining module. 


I 

I 

I 

I 


PRAGMA LIST 

pragma List (on | off); 

Compiler switch /LIST must be selected for the pragma List to be 
effective. 


ii 







TLD ADA COMPILER 

i960 Target Compiler 


i960- ADA-2C 

5 - 11 


PRAGMA MEMORY.SIZE 

pragma Msmory_Si»e (mmwric_li eexai) ; 

This pragma is not supported, ibis number is declared in packa g e 
System. 

PRAGMA OPTIMIZE 

This pragma is not supported. Compiler switches control ccopiler 
optimisation. 

PRAGMA PACK 

This pragma is implemented as defined in the LRM. 


PRAGMA PAGE 

This pragma is implemented as defined in the LRM. 


PRAGMA PRIORITY 

This pragma is implemented as defined in the LRU. Priority f 
contains a range defined in System_.Ada. I 


PRAGMA SHARED 

This pragma is implemented as defined in the LRM. This pragma may 
be applied only to scalar objects. 


PRAGMA STORAGE„UNIT 

pragma Storage_Uhit (numerical!taral) ; 

This pragma is not supported. This number is declared in package 
System and has 8 bits per byte. 


ii 







TLB ADA COMPILER 

i960 Target Compiler 


i960- ADA-2C 

5 - 12 


PRAGMA SUPPRESS 


pragma Suppress (access_check) 
pragma Suppress (all_checks); 


Tha all_checka paramscsr sliminacss all run time checks with a 
single pragma. Xn addition to the pragma, a compiler switch 
permits control of run time check suppression to/ command line 
option, eliminating the need for source changes. 


pragma Suppress 
pragma Suppress 
pragma Suppress 
pragsui Suppress 
pragma Suppress 
pragma Suppress 
pragma Suppress 
pragma Suppress 


(discrininant_check); 
(divisicn_check) ; 
(elatooration_check); 
(index_check) ; 
(length_check); 
(range_check) ; 
(overflow_chack) ; 

(»torage_check); 


PRAGMA SYSTEM_NAME 

pragma System_Nama (enumeration_literal) ; 

this pragma is not supported. Instead, compiler option is used to 
select the target system and target Ada library for compilation. 


5.2.C LRM App.C-Predefined Language Environment 

The items described in this section correspond to the standards in 
Appendix C of the LRM. 

PACKAGE STANDARD 

The specification for this package is included in the Standard_.Ada 
file. 


5.2.D LRM App.D - Glossary 


Not applicable. 







TLD ADA COMPILER 

i960 Target Compiler 


Z960-ADA-2C 

5 - 13 


5.2.E LRM App.E - Syntax Summary 

Refer to "Appendix B. Ada Language Syntax Croaa Reference* for the TLD 
croaa- referenced axpreaaion of this information. 


5.2.F LRM App.F - Implementation Characteristics 

The itoma described in thia section correspond to the standards in 
Appendix P of the LRU. 

Implementation-Dependent Pragmas 

PRAGMA ADDRESS.SPACE 

pragma Address_Space (name{, subtry* eem_name}) ; 

This pragma allows users to specify the association of a 
compilation unit with a logical address space. This capability 
will support the definition of i960 Extended Architecture "Domains* 
• and domain calls. 

The following switch may be entered on the TLDada comm a nd line and 
used instead of this pragma to associate compilation unit(s) with a 
logical address space. 

/address_space«aamej (name, *ub*yscem_nsme) 

In either the pragma or the switch, name is the name of the address 
space and subsyacemjaaae is the name of the subsystem to which the 
address space belongs. If subayatea_aamm is not supplied, then the 
address space does not belong to a subsystem. 

This pragma may appear in any compilation unit. The command line 
switch may appear in any compilation, and applies to all the 
compilation units in the compilation. 

This capability does not yet allow users to indicate objects that 
are to be implemented and referenced as independent objects. 

TLDlnk will verify that all compilation units in the link have an 
addresa space attribute of the same value, or have no address space 
attribute and will create either a domain (if an address attribute 
is specified) or a program (if no address space attribute is 
specified). 


ii 






TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 14 


PRAGMA ADDRESS_SPACE_ENTRY 

pragma Addrsss_Space_Entry (auw{, entry_number/ (, enery_type}) ; 

Ibis pragma allows usars Co indicaea which subp r o gr ams rsprssanc 
entries into cha defined logical address spaca. This capability 
will support cha dafixiicion of i960 Bxcandad Arehieaccura "Domains* 

«ni> Arm** -i w calls . 

Tha nans is cha naste of a praviously daclarad subprogr a m, cha 
ascry_number is an incegar axpression which is avaluacabla at 
compila eima, and eha ancxy_type is ona of cha following: Local, 
Supervisor, or Subsyscam. Zf antxy_type is noc spacifiad, ic 
dafsuits to Subsyscam. 

This pragma may appear only in a compilation unic for which an 
addrass spaca has baan spacifiad aithar by pragma or command line 
switch. 

This capability does noc yet allow usars to indicaea objects that 
are co be implemented and referenced as independent objects. 

TLDlnk will verify that all compilation units in tha link have an 
addresa space attribute of the same value, or have no addresa spaca 
attribute and will create aithar a domain (if an addrass attribute 
is specified) or a program (if no addrass space attribute is 
specified). 


PRAGMA ATTRIBUTE 

pragma Attribute (Ateribuce-Name-»AC tribute-value, - 
Item-Name{ }) ; 

This pragma allows grouping of control sections with cha specified 
attribute. 

If Item-Name is osiitted, tha specified attribute applies to all 
control sections in tha current module. 

If Item-Name is Name'csect, tha specified attribute applies to the 
control section of the module containing Name. Name may be a 
label, procedure, or data object. 

Zf Item-Name is Name'code, the specified attribute applies to the 
code control section of the module containing Name. 


ii 





TLD ADA COMPILER 

i960 Tarqct Compiler 


I960-ADA-2C 

5 - 15 


12 Ztm ■•Hubs is Mum' data, the spaei£iad attribute applies to the 
data control section of the module containing Mum. 

If rtam-Mwe is Mum' constant, the specified attribute applies to 
the constant control section of the nodule containing Mum. 

BO other font of Item-Jtsme is allowed. 

The linker directives GRQOP and SST, described in Chapter 4 of the 
Reference for the TU Linker can refer to attributes in 

pragma Attribute in the source file. 


PRAGMA AUDIT 

pragma Audit (Ada -name{,...}) ; * 

This pragma causes an error message to be generated for the 
cooqpilatian in which an Ada name, that is specified by this pragma, 
is referenced. The Ada name may be a package, scope, data, etc. 


PRAGMA COMPRESS 

pragma Compress (subtypejaaam); 

This pragma is similar to pragma Pack, but has subtly different 
effects. Pragma Compress accepts one parameter: the name of the 
subtype to compress. It is implemented to minimise the storage 
requirements of subtypes when they are used within structures 
(arrays and records) . Pragma Compress is similar to pragma Pack in 
that it reduces storage requirements for structures, and its use 
does not otherwise affect program operation. Pragma Compress 
differs from pragma Pack in the following ways: 

o Ohlike pragma Pack, pragma Compress is applied to the subtypes 

that are later used within a structure. It is not used an the 

structures themselves. It only affects structures that later 
use the subtype; storage in stack frasms and global data are 
unaffected. 

o Pragma Compress is applied to discrete subtypes only. It 

cannot be used on types. 

o Pragma Compress does not reduce storage to the bit-level. It 

reduces storage to the nearest "natural machine sise". This 
increases total storage requirements, but minimizes the 
performance impact for referencing a value. 


ii 







TLD ADA COMPILER 

i960 Target Compiler 


X960-ADA-2C 

5 - 16 


Por example: 

subtype Small_Iat is Integer rang* 0 .. 255 ; 

pragma Compress (Saall_Int) ; 

type Hum_Array is array (1 .. 1000) of Small_Int; 

In this exanple, Soall_Iae will ba reduced from a 32-bit objact to 
an unaignad 8-bit objact when usad in Num_Array. 

If pragma Comprass had not baan usad than Small_Int would ba tha 
aama size as Zntagar. This is bacausa a subtypa daclaration should 
not changa tha undarlying objact raprasantation. A subtypa 
daclaration should only impose tighter constraints on bounds. In 
this manner a subtypa does not incur any extra overhead (other than 
its range checking), whan compared with its base type. Pragma 
Compress is usad in those cases where tne undarlying raprasantation 
should changa for the subtypa, therefore: 

o SmallJXnt is compatible with Integer. It may ba usad anywhere 

an integer is allowed. This includes out and in out parameters 
to subprograms. 

o A Small_lnt objact is tha same siza as Integer whan used by 
itself. This minimizes run time overhead requirements for 
single objects allocated in the stack or as global data. 

o Small_lnt is 8 bits whan usad within a record or an array. 
This can dramatically reduce storage requirements for large 
structures. Tha access performance for compressed elaswnts is 
very near that of the un-compressed elements, but a slight 
performance cost is incurred when the compressed value is 
passed as an out or in out parameter to a subprogram. 

NCJTK: Small_Int's storage requirements could be reduced by 

declaring it as a type rather than a subtype, however, Small_Int 
would not be compatible with Integer, and this could cause 
considerable problems for soma users. 


PRAGMA CONTIGUOUS 

pragma Contiguous ( cype_name | objeec^name) ; 

This pragma is used as a query to determine whether the cosipiler 
has allocated the specified type of object in a contiguous block of 
memory words. 








TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 17 


Tha compiler generates a warning raws sag* if the allocation ia 
noncontiguous or is undetermined. The allocation is probably 
noncontiguous whan data atructuras havo dynamically sixad 
components. Tha allocation is probably undetermined whan 
unrasolvad privata types ara forward type daclarations. 

This pragsw provides information to the programmer about the 
allocation schema used by tha compiler. 


PRAGMA EXPORT 

pragma Export (2anguage_name, ada_antiey_aame, {string}) ; 

Pragma Export is a complement to pragma Interface. Export directs 
tha cosqpiler to make tha ada_enticy_name available for reference by 
a foreign language module. Tha laxigusge_n*ma parameter identifies 
the language in which tha module is coded. 

Assembly is presently supported by Export. Ada is permitted end 
presently means the same as Assembly. The semantics of its use is 
subject to redefinition in future releases of TLDada. Void may be 
used as the language_nasM to specify the user's language 
convention. As a result of specifying Void, the Compiler will not 
allocate local stack space, will not perform a stack check, and 
will not produce prologue and epilogue code. If the optional third 
parameter, string, is used, the string provides the name by which 
the entity may be referenced by the foreign module. The contents 
of this string must conform to the conventions for the indicated 
foreign language and the linker being used. TLDada does not make 
any checks to determine whether these conventions are obeyed. 

Pragma Export supports only objects tin t have a static allocation 
and subprograms. If the ada_enci cy_nsmc is a subprogram, this 
Export must be placed in the same scope within the declarative 
region. If it is an object, the ada_eneiey_name must follow the 
object declaration. 

NOTE: The user should be certain that the subprogram and object 
are elaborated before the reference is made. 


ii 





TLD ADA COMPILER 

i960 Targkt Compiler 


I960-ADA-2C 

5 - 18 


PRAGMA IF 

pragma If (cempile^tiaajaxpreaaion); 
pragma Elsif ( caopi 1 e_ cxme_ express! on ) ; 

pragma Else; 
pragma Snd{ if}; 

These a cure* directives may b* uaad to udou conditionally 
compiled source to enhance program portability and configuration 
adaptation. These directives may be located where language defined 
pragmas, statements, or declarations are allowed. The source code 
following these pragmas is compiled or ignored (similar to the 
semantics of the corresponding Ada statements), depending upon 
whether the cempi2e_eiae_expre**ion is true or false, 
respectively. The primary difference between these directives and 
the corresponding Ada statements is that the directives may enclose 
declarations and other pragmas. 

NOTH: To us* the pragma IF, ELSEXF, ELSE, or END, the /XTRA 

switch must be used. 


PRAGMA INCLUDE 

pragma Include (file_pach_nama_striag); 

This source directive in the form of a language pragma permits 
inclusion of another source file in place of the pragma. This 
pragma may occur any place a language defined pragma, statement, or 
declaration may occur. This directive is used to facilitate source 
program portability and configurability. If a partial 
file _path_name_scxing is provided, the current default pathname is 
used as a template. A file name must be provided. 

NOTE: To us* the pragma INCLUDE, the /XTRA switch must be used. 


PRAGMA INSTANTIATE 

pragma Instantiate (option{, name}); 

This pragma is used to control instantiation of a particular 
generic. 


ii 








TLD ADA COMPILER 

i960 Targkt Compiler 


i960-ADA-2C 
5 - 19 


To establish a dafaulc mode of instantiation for all generic 
instantiations within tha compilation, tha following switch may ba 
entered on tha TLDada command lina and usad instead of this pragma: 

/instantiatsappcion 

In either tha pragma or switch, option instructs tha Compiler to 
instantiate generics in the manner specified, as described below: 

single_body - a single body is usad for all instantiations 

macro - each instantiation produces a different body 

In this pragma, name is the name of the generic to which this 
pragma applies. 

There are two basic forms for this pragma. The first form omits 
the second parameter, is associated with a generic declaration, and 
is permitted to occur only within a generic formal part (i.e., 
after "generic" but before "procedure”, "function", or "package"). 
In this form, the pragma establishes the default mode of 
instantiation for that particular generic. 

The second form uses the second paraswter, is associated with the 
instantiation, and may appear anywhere in a declarative part except 
within a generic formal part. This form specifies what mode is to 
be used for the instantiation of the named generic which follows in 
the scope in which the pragma appears. This form of the pranas 
takes precedence over the first form. 

In the following exasqple, assume the following definition: 
generic 

pragma instantiate(singlejsody); •- pragma 1 

package G ... 
end G; 

generic 

pragma instantiate(macro); ■- pragma 2 

package H ... 
end H; 


ii 






TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 20 


package A is new G (...) ; 
package B is nsw G(...); 
package C is nsw H(...),- 
package 0 is nsw H (...); 

pragma inscanciats(macro, G); -- pragma 3 

package B is nsw G (...) ; 
package F is nsw G (_) ; 

In tha above example, packagss A and B share the sams body, dus to 
pragma 1. Packagss C, 0, B, and F will ba trsatsd as macro 
instantiation C and D bscauas macro instantiation is tbs default 
for H (dus to pragma. 2) and for B and F bscauss they follow pragma 
3. 

In both tha pragma and switch: 

o Basted instantiations and nsatsd generics are supported and 
generics defined in library units are permitted. 

o It is not possible to perform a macro instantiation for a 
generic whose body has not yet been compiled. 

In this pragma: 

o It is also not possible to perform a macro instantiation 
from inside a single-bodied instantiation, because the 
macro instantiation requires information at cco^ila time 
which is only available to a single-bodied generic at 
execution time. 

In the event of a conflict between the pragma and switch, the 
switch takes precedence. 

Please refer to Section 3.12 ’Generics” for more information on tha 
advantages and disadvantages in using single_body generics versus 
macro generics. 


PRAGMA XNTERFACE_NAME 

pragma Interface_Name (Ada_encity_name, string) ; 

This pragma takes a variable or subprogram name and a string to be 
used by the Linker to reference the variable or subprogram. It has 
the same effect as the optional third parameter to pragma 
Interface. 


ii 





TLD ADA COMPILER 

z960 Target Compiler 


i960-ADA-2C 

5 - 21 


PRAGMA IO.OBJECT 

pragma IO_Object (abjece_name | type_aaae{ ,...}); 

An XOjObject is an object which is fully contained within a page 
(4096 bytes) and which begins and ends on a full word (4 byte) 
boundary. 16 bytes of space preceding the IO_Object are reserved 
by the Cosqpiler for user-specified use. An object is specified to 
be an XO_Object by use of the pragma IO_Objeet. 

Xf pragma IO_Object is applied to a type, then any object of that 
type is an IO_Object. Xf pragma XO_Object is applied to an object, 
then that object is an IO_Object. 

Only static objects may be X0_0bjects. Xf an attempt is made to 
specify an object which is not static (e.g., an object declared 
within a subprogram) as an XO_Object, TLDada issues a warning and 
the object is treated as a normal object. 

The following is an example of Ada source in which pragma IO_Object 
is applied to an object: 


type Buffer_Type is ... 
pragma IO_Object (BufferjType) ; 

Buffer_Object : BufferjType; 

An XO_Object can only be applied to scalar or composite types and 
objects but cannot to component(s) of a composite type. 

An XO_Attribute can be used to determine whether or not an object 
is an XO_Object and to return its value. Refer to section 
Implementation-Dependent Attributes in this Chapter for more 
information. 


PRAGMA XNTERRUPTJCIND 

pragma XnterrupcjCind (entry_name, encry_cype{, duration}); 

An interrupt entry is treated as an "ordinary" entry in the absence 
of pragma XnterruptJCind. when pragma Interrupt_Kind is used, an 
interrupt entry may be treated as a "conditional” or "timed” entry. 


ii 





TLD ADA COMPILER 

i960 Target Compiler 


X960-ADA-2C 
5 - 22 


This pragma must appear in ths cask specification containing the 
entry named and after the entzy_name is declared. Three 
encry_types are possible: ordinary, timed, and c on diti on al. The 
optional parameter duration is applicable only to timed entries and 
is the time to wait for an accept. 

Por an ordinary entry, if the accept is not ready, the task is 
queued. For a conditional entry, if the accept is not ready, the 
interrupt is ignored. Por a timed entry, if Che accept is not 
ready, the program waits for the period of time specified by the 
duration. If the accept is not ready in that period, the interrupt 
is ignored. 


PRAGMA LOAD 

pragma Load (literal^ tring) ; 

This pragma makes the Compiler TLDada include a foreign object 
(identified by the literal_string) into the link command. 


PRAGMA MEMORY_UNIT 

•pragma Memory_Onit (mem_type_name, abject_name | eype_name, {...}); 

TLDacs will locate objects in memory units other than i960 standard 
memory. Such objects are specified by use of pragma MamoryJOhit. 
TLDada creates a control section for the specified memory unit and 
allocates the specified objects or all objects of the specified 
type to that control section. It passes the memory unit 
information to TLD Ink in the object module. The user specifies the 
location and size of the non-standard memory unit to link through a 
MEMORY directive. The mem_ cype_na®e is the name of the memory unit 
and is currently one of the following: 

SPB 

BMB 

GLOK 

LOT 

SFMMXC 

PBMMXC 

SPMCASIU 

PBMCASIU 

PITS 

MRVM 

WWPROM 

SUBBUS 


ii 









TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 23 


and either abject_name (the apaeifiad object) or tbe eype_name (all 
objects of that type) may be specified. 

For example: 

pragma MamoryJJnit (SPB, Buffer_Type) ; 

will collect all objects of Buffer_Type in a control section for 
the maeiory unit name SPB. 

the only legal reference to an abject in a memory unit is a 
'address reference. 


PRAGMA MONITOR 
pragma Monitor; 

the pragma Monitor can reduce tasking context overhead by 
eliminating context switching, this pragma identifies invocation 
by the compiler, with pragma Monitor, a single procedure call is 
used to invoke task entry. 

Generally, pragma Monitor restricts the syntax of an Ada task, 
limiting tha number of operations the task performs and leading to 
faster execution. 

tha following restrictions pertain to Ada constructs in monitor 

tasks: 

o Pragma Monitor must be in the task specification. 

o Monitor tasks must be declared in library level, nongeneric 
packages. 

o A monitor task consists of an infinite loop containing one 
select statement. 

o the "when condition* is not allowed in the select alternative of 
the select statement. 

o the only selective wait alternative allowed in the select 
statement is the accept alternative. 

o All executable statements of a monitor task must occur within an 
accept body. 


o Only one accept body is allowed for each entry declared in the 
task specification. 








TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 24 


Zf a cask body violacaa restrictions placed on monitor tasks. it is 
identified as erroneous and the compilation fails. 


PRAGMA NO_DEFAULT_XNZTXALXZATZON 
pragma Ho_Default_Initialixation; 

pragma No_Def ault_lnitialization (eypename(.... }) ; 

The LSM requires initialization of certain Ada structures even if 
no explicit initialisation is included in the code. For example, 
the LRM requires access_type objects to have an initial value of 
*NOLL." Pragma No_Default_Initialization prevents this default 
initialization. 

In addition, initialization declared in a type statement is 
suppressed by this pragma. 

TLD implementation of packed records or records with representation 
clauses includes default initialization of filler bits, i.e., bits 
within the allocated size of a variant chat are not associated with 
a record compo nen t for the variant. No_Default_Initialization 
prevents this default initialization. 

This pragma must be placed in the declarative region of the 
package, before any declarations that require elaboration code. 
The pragma remains in effect until the end of the compilation unit. 

NOTE: To use the pragma, NO_DEFADLT_INITIALIZATION, the /XTRA 
switch must be used. The use of this pragma may affect Che 
results of record comparisons and assignments. 


PRAGMA NO_ELABORATION 
pragma no_elaboration; 

Pragma No_Elaboration is used to prevent the generation of 
elaboration code for the containing scope. This pragma must be 
placed in the declarative region of the affected scope before any 
declaration that would otherwise produce elaboration code. 

This pragma prevents the unnecessary initialization of packages 
that are initialized by ocher non-Ada operations. Pragma 
No_Blaboration is used to maintain the Ada Run Time Library 
(TLDrtl). 


ii 






TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 25 


For example: 

package Test is 

Pragma No_Elaboration,- 
for Program_Statu*_Word use 
record me mod 8; 

System_Mask at 0*WORD rang* 0..7; 

ProtectionJCey at 0*WORD rang* 10 .. 11; -- bits 8,9 unused 

end record,- 
end Test; 

In the above example, the No_Slaboration pragma, prevents the 
generation of elaboration code for package Test since it contains 
unused bits. 

WOTS: To use the pragma, HO_8IABORATION, the /XTRA switch must 

be used. The use of this pragma may affect the results of record 
comparisons and assignments. 


PRAGMA NO_ZERO 

pragma NoJZero (record_ typmjaMma ) ; 

If the n a me d record type has "holes’ between fields that are 
normally initialized with zeroes, this pragma will suppress the 
clearing of the holes. Zf the named record type has no "holes”, 
this pragma has no effect. When zeroing is disabled, comparisons 
(equality and nan-equality) of the named type are disallowed. The 
use of this pragma can significantly reduce initialization time for 
record objects. 


PRAGMA PUT 

pragma Put (value{, ...}); 

Pragma Put takas any number of arguments and writes their value to 
standard output at compile tune when encountered by the Compiler. 
The arguments may be expressions of any string, enumeration, 
integer type, or scalar expression (such as integer'size) whose 
value is known at compile time. This pragma prints the values an 
the output device without an ending carriage return; pragma 
Put_Line is identical to this pragma, but adds a carriage return 
after printing all of its arguments. 





TLD ADA COMPILER 

i960 Target Compiler 


X960-ADA-2C 

5-26 


This pragma ia useful in conditionally-coe^iled coda to alart the 
programmar to problems chat might not otherwise came to hia 
attention via an exception or a eaapile-tims error. 

This pragma may appear anywhere a pragma ia allowed. 


PRAGMA PUT_LXNE 

pragma Put_Line (value{, ...}); 

Pragma Put_Line take a any number of arguments ud writea their 

value to atandard output at compile time when encountered by the 
Compiler. The argumenta may be expreeaiona of any string, 

enumeration, integer type, or acalar expreaaion (auch aa 
integer'aixe) whoae value ia known at compile time. Thia pragma 
printa the valuea on tha output device and adda a carriage return 
after printing all of ita argumenta; pragma Put ia identical to 
thia pragma, but printa the valuea without an ending carriage 

return. 

Thia pragma ia uaaful in conditionally-compiled code to alert tha 
programmer to problema that might not ocharwiaa came to hia 

attention via an exception or a compile-time error. 

Thia pragma may appear anywhere a pragma ia allowed. 


PRAGMA REGISTER 

pragma Regiater (abj ecc_naune, regia terjaumber); 

Thia pragma allowa limited regiater dedication to an object for the 
purpoae of loading regiatera with complex Ada expreaaiona or 
atoring regiatera into complex operanda within machine code 
insertion subprograms. The Compiler dedicates the specified 
regiater to the specified object until the end of the scope is 
reached or until it is released through a call to the subroutine, 
Chprotect, in the Machina_Code package. The abject_name is the 
name of the object to be dedicated to the register and 
regiaterjaumber ia the regiater number (without the "R" prefix that 
is valid for the particular target). 

These objects may be used on the left or right side of an 
assignment statestent to load or store the register, respectively. 






TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 27 


PRAGMA TCB.EXTENSZON 

pragma TCB_Bxtension (value); 

This pragma ia used to extend eha six* of tha Taak Control Block on 
tha stack. It can ba usad only within a task spaeification. Tha 
paramatar paasad to this program must ba static and raprasants tha 
sisa to ba extended in bytas. 


PRAGMA UNALIGNED 

pragma Ohalignedfname, ...); 

This pragma is usad to accasnodate an access object that cantainy, 
or might contain, an address which is not four byte aligned. Tha 
xtaam paramatar identifies an access type or object that contains 
unaligned address values. Tha neats paramatar may also refer to a 
formal paramatar paasad by address that might ba occasionally 
passed an unalignad actual paramatar. 


PRAGMA WITHIN_PAGE 

pragma Within_Paga (type_name); 
pragma Within_Page (abjectjoame) ; 

NUTS: Tha eype_aaae or abjeccjsame must have bean previously 
declared in the currant declaration region and these declarations 
must be in a static data context (i.e., in a package 
specification or body that is not nested within any procedure or 
function). 

This pragma instructs the compiler to allocate the specified 
object, or each object of tha specified type, as a contiguous block 
of memory words that does not span any page boundaries (a page is 
4096 bytes). 

The compiler generates a warning message if the allocation is 
noncontiguous or not yet determined (see tha description of pragma 
Contiguous, above) . Additio n a l ly, the compiler generates a warning 
message if the pragma is in a nonstatic declarative region. If an 
object exceeds 4096 bytes, it is allocated with an address at the 
beginning of a page, but it spans one or more succeeding page 
boundaries and a warning message is produced. 


ii 








TLB ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 28 


PRAGMA VOLATILE 

pragma Volatile (tH*riable_*impie_nasie) ; 

This pragma performs the aama function aa Pragma Shared, however, 
it also appliaa to composite cypaa aa wall aa acalar cypaa or 

accaaa typaa. 

Implementation-Dependent Attributes 

ADORESS.TYPE 

The attribute 'Addresejrype ia uaad in a length repreaentation 
clauaa to indicate that the addreaa type ia to have the 
characteristic* of an acceaa descriptor (with a tagged bit). 

The format is: 

for type-name'Address_Type use Aecess_Descriptor 


TASK_XD 

The attribute 'Task_ID is used only with task objects. This 
TLD-da fined attribute returns the actual system address of the task 
abject. 

IO_ATTRIBUTE 

The attribute ' IO_Attribute ia used to determine whether or not an 
object ia an I0_0bject. 

When IO_Attribute is applied to an object, it returns a value of 
type Object_Attribute_Type, which is a private type declared in the 
package System. 

If the object Ia an IO_Qbject, then the value returned is the 
addrese of a record containing the address of the object and the 
number of bits in the object includi n g any bits necessary for 
padding (and does not include the preceding 16 bytes of reserved 
user space). 

If the object is not an XO_Object, then the value returned is 
Invalid_Object_Attribute, which is also defined in the package 
System. 


ii 







TLB ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 29 


Tha association of an lO_Attribute with its IO_Obj act is maintained 
only at cco^ile tins. For example, if an XOjObject is passed as a 
para— tar to a subprogr a m, than within tha subp ro g ram , eha 
ZO_Attributa for that IO_Ob j act has tha valua 

Xnvalid_Ob j ect_At tribute. 

Tha following is an exas^le of obtaining tha valua r a turned by 
' IO_At tribute for the IO_Objact Buffer_Obj act shown in tha axaspla 
above (under tha Frag— IO_Object subsection heading) . 

A procedure which rands information into an IO_Object is defined as 
follows: 

procedure Get (— ; Buf f_Attr : System. Ob j act_Attributa_Typa; —) 

The procedure is called as follows: 

Get (..., BufferjQbject' ZO_Attribute, ...); 

in the above example, the address of a record containing the 
address of the object and tha number of bits in the object are 
returned for Buffer_Object. 

Package System 

The specification for this package is included in tha Systam_.Ada 
file. 

Representation Clauses 

Record representation clauses are supported to arrange record 
components within a record. Record components —y not be specified 
to cross a word boundary unless they are arranged to encompass two 
or more whole words. A record component of type record that has 
record representation clause applied to it —y be allocated only at 
bit 0. Bits are numbered from right to left with bit 31 indicating 
the sign bit. 

When there are holes (unused bits in a record specification), the 
compiler initializes the entire record to permit optimum assignment 
and compares of the record structure. A one-time initialization of 
these holes is beneficial because it allows block compares and/or 
assignments to be used throughout the program. If this 
"optimization" is not performd, record assignments and compares 
would have to be performed one component at a time, degrading the 
code. 


To avoid this initialization, the user should check to be certain 







TLB ADA COMPILER 

i960 Tarcet Compiler 


i960-ADA-2C 

S - 30 


chat no holes are loft in the record aeruccurt. This nay ba dona 
by increasing the size of eha objects adjacent to the hole or by 
defining dusny record components that fill the holes. Zf the 
latter method is used, any aggregates for the structure oust 
contain values for the holes as well as the "real* components. 
Even with the extra components, this approach should optizdze space 
and speed in com pa r ison to processing one c c ssp onen t at a time. 

If the canponent_clause of a record representation specification is 
not in the same order as the componsat_list of the record 
specification, the entire record is initialized, as indicated 
above. 


Address clauses are supported for variable objects and designate 
the virtual address of the abject. The Compiler System usee 
address specification to access objects allocated by non-Ada swans 
and does not handle the clause as a request to allocate the object 
at the indicated address. Address clauses to specify the address 
to which code should be relocated, are not supported for 
subprograms, packages, or tasks. 

NOTB: Length clausee are supported for 'Size applied to objects 
other than task and access type objects and denote the number of 
bits allocated to the object. 

Length clauses are supported for 'Storage_Size when applied to a 
task type and denote the number of words of stack to be allocated 
to the task. 

Length clauses are supported for 'Storage_Size applied to an 
access type and indicates the number of storage units to be 
reserved for the collection. 

Enumeration representation clauses are supported for value ranges 
of Integer*First to Integer'Last. 

An alignment representation clause has been added that 
corresponds to Ada 9X that requests a subtype or object to be 
allocated to an address that is a multiple of the alignment 
value. Its syntax is 

for object_or_sujbeype*Alignment use expression* 

The alignment expression must be a static value. The use of 
multiple alignment clauses within the sasw control section will 
result in the containing control section assuming an alignment 
value which is the greatest common multiple (GCM) of the 
alignment factors occurring within the control section. 


ii. 







TLD ADA COMPILER 

i960 Target Compiler 


i960-ADA-2C 

5 - 31 


Conventions for Implementation-Generated 
Names Denoting Implementation-Dependent 
Components 

The Compiler System defines no implementation dependent naaee for 
compiler generated record ccaponents. 

Two naming conventions are used by TLDacs. All visible run time 
library subprograms and kernel services begin with the character 
■A_" . Slobal Run Time System data names begin with the characters 
"AS” . The unique name created by the cospiler for overload 
reeolution is composed of the user name appended with plus a 

maximum of three characters derived from the compilation unit name, 
followed by three digits representing the ordinal of the visible 
name within the compilation unit. The maximum length of this name 
is 128 characters. 

Interpretation for Expressions Appearing 
.in Address Clauses 

Address expression values and objects of type Address represent a 
location in the program's linear address space. 

Restrictions on Unchecked Conversions 

Unchecked conversion of generic formal private types is not allowed. 

Implementation-Dependent Characteristics 
of Input-Output Packages 

PACKAGE DXRECT_XO (LRM 14.2.5) 

PACKAGE XO.EXCEPTXONS (LRM 14.5) 

PACKAGE SEQUENT!AL_XO (LRM 14.2.3) 

Input-Output packages are described in the Reference Document for 







TLD ADA COMPILER 

i960 Target Compiler 


i960- ADA-2C 

5 - 32 


PACKAGE TSXT.ZO (LRU 14.3.10) 

The following ioplesientatioa-defined types are dsclarsd in Tsxt_Io: 

eypa Count is intsgar range 0 .. Sll; 
subtype Field is Integer range 0 .. 127; 


6 i960 Target Compiler Characteristics 

The characteristics of the target coepiler are described in this 
section. 


6.1 i960 Run Time Conventions 

The Run Time conventions established for the TLD Ada Compiler and Run 

Time System are explained in the Reference for_the TLD Run 

Tima S ystem, i960 Target. This information is necessary when the 
user's application software is coded in a language other than Ada. 


6.2 External Names 

External names are supported to a maximum length of 128 characters or 
the limits imposed by the i960 Linker. The system dependent character, 
is left as a in external names since it is a legal character 
for the Linker. 


7 Relocatable Object Files 

TLDada producer Relocatable Object Files containing the results of the 
cosipilatian. 

The TLDada Compiler partitions the generated object module into several 
separately relocatable control sections. By default, instructions are 
allocated in control section, SISECTS. Literals are allocated in a 
read-only operand control section, $CONS$. Statically allocated data 
are allocated in control section SDATAS. The NOCSEG switch may be used 
to combine literals and data into the same control section. 

The TLD Relocatable Object File is described in the Reference Document 
for the. TLD .3 2_-_Blt- .Universal Linker, i960 Target. 


ii 









TLD ADA COMPILER 

i960 Target Compiler 


I960-A0A-2C 
5 - 33 


The control ■action nuti and attributes are: 

Relocatable Control Sections 


Km: SZSECTS 

Instructions 


scans 

Constanta 


SQATAS 

Data 


Attributaa: 


UNMAPPED 

Unmapped 


INDIRECT 

MAPPED 

RAM/ROM 

SU/ROM 

EMPTY 

DMA 

MPRAM 

PREG 

RQMDNSP 

0/Z 

PRLL 


DZRECT 
MAPPED 
RAM_OR_ROM 
MAIN MEMORY 
MOT EMPTY 
UNPROTECTED 
UNPROTECTED 
UNPROTECTED 
RO.MECH UNSP 
IN S T R UCT MEM 
MODULE ALLOC 


DZRECT 
MAPPED 
RAM_OR_RCM 
MAZN MEMORY 
NOT EMPTY 
UNPROTECTED 
UNPROTECTED 
UNPROTECTED 
RO.MECH UNSP 
OPERAND MEM 
MODULE ALLOC 


DZRECT 

MAPPED 

RAM 

MAIHJCEMORY 

not Empty 

UNPROTECTED 
UNPROTECTED 
UNPROTECTED 
UNPROTECTED 
OPERAND MEM 
MODULE ALLOC 


DZRECT 

UNMAPPED 

RAM 

MAXNJCKMORY 

not Empty 

UNPROTECTED 
UNPR OTECT E D 
UNPROTECTED 
UNPROTECTED 
OPERAND MEM 
MODULE ALLOC 


These attributaa ara also daacribad in the Rafairence Document for the 
TLD 32-Bit Universal Linlcar. i960 Target. Sacticna 3 and 4.2 describe 
TLDlnJt'a use of attributes. Appendix A describes the TLD Ralocatable 
Object Pile attributaa and associated values. 


8 Target Reference Table 


The following table provides i960 parameter values. 












-- type address it rang* 0..168FFFF FFFF#; 

type address it rang* -2.147.4831648. .2.147.483.647; 
for address'size uaa 32; 


•• an i960 33-bit accaat descriptor---ue ignore tha 33rd bit hara 
typo aceess.deseriptor ia ranga -2.147.483.648. .2.147.483.647; 
for access.descr1ptor's1ze uaa 32; 

typo unaignad ia ranga 0. .2_147_483_647; 
for mignod'size uaa 31; 

typo ahort_intagar ia ranga -32_768..32.767; 
for short.Tnteger'size uaa 16; 

typo long intogar ia ranga -2.147.483.648..2.147.483.647; 
for long.Tnteger'size uaa 32;” 

•• Mote: Tha ordor of tha elaaonts in tha OPERAT ING_SYSTEMS and NAME 
•* onuaerationa CANNOT bo ehanged--they must corraapond with tha valuaa 
•• in tha CONFIG.CFG fila. 

typo Operating.Systeas ia (Unix, Netoa, Vox, Ucad, Madoa, Bara, Tnap, RTX); 

typo Nana ia (Poachina, Na16000, Vax, Af17S0, 28002, 28001, 

Gould, Pdpll, N68000, Pa3200, Capa, Aadahl, 

18086, I80286, I80386, 280000, Na32000, Ibaol, 

N68020, Nebula, N«aa_X, Hp, Bbl, Hawk, R1666. I960); 

typo Object.Attribute.Type ia private; 

Invalid.Object.Attribute : constant Object.Attribute.Type; 

system.nane: conatant none :■ I960; 
oe.naaie: conatant operating.aystesN :• RTX; 

aubtypa priority ia integer ranga 1..20; -- 1 ia default priority. 

--- note: tha follouirv priority ia probably not valid for tha Hank 
and will have to be nodifiad uhan tasking is loplsawntad 
aubtypa interr»g>t_priority ia integer ranga 1.-15; 

pragma put lina('»', •>', '>', • ', ayataai.naiie, 

• ', '/', * os.naae, ' ', •<•, '<•, '<•>; 

Language Defined Constants 
storage unit: constant :■ 8; 

BNnory siza: constant :• 16#4000_0000#; -- 256M uorda par segment 
min.int: constant :■ -2**31; 

aax~int: constant :■ 2**31-1; 

max~digits: constant :> 15; 

«ax~amntissa: conatant :■ 31; 
fine.delta: constant :■ 2.0**(-31>; 

ticks_per second : constant :■ 1.000.000.0; ** Clock ticks are 1 usees, 

tick “ : conatant :■ 1.0/ticks_per_second; 

ticks.per.rtc : conatant :■ 168100.0000#; 

-- systaai specific constants 

address.0: constant address :« 0; -* 2ero address 

null.address: constant address :* 0; ** Null ptr as systaa.address 

nullJID : constant access.descriptor :■ 0; ** null AD, untagged 

private 

type Object.Attribute.Type is record 

Object Address : Address :* null.address; 

ObjecOiza : Integer :» Integer'first; 
end record; 

Invalid.Object.Attribute : Constant Object.Attribute.Type :« 

(Object.Address «> null.address, 

Objeet~Size «> Integer'first); 
and systeai; 





















