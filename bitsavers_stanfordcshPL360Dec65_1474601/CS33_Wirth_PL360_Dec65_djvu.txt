CS33 



A PROGRAMMING LANGUAGE FOR THE 360 COMPUTERS 

BY 
NIKLAUS WIRTH 



TECHNICAL REPORT CS33 
DECEMBER 24, 1965 



COMPUTER SCIENCE DEPARTMENT 

School of Humanities and Sciences 

STANFORD UNIVERSITY 




A Programming Language for the 36O Computers 

Table of Contents 

Introduction , 1 

1. Definitions, Notation 3 

2. Basic Symbols , 5 

3 . Identifiers .6 

h . Quantities, Values, and Types .8 

k.l. Numbers......... ..,..; ...8 

k.2. Strings 9 

5. Declarations ° 10 

5 . 1 o Variable Declarations .10 

5.2. Procedure Declarations ,11 

6 . Variables and Primaries , 12 

7 . Simple Statements I3 

7.1. Assignment Statements I5 

7.2. Branch Statements 13 

f • ^ 9 JjXO CiVS ai><9ao<toooo»0«ao«a««ao»a«aoaos«ea«eoo*«foo XO 

7 .^ . Procedure Statements 18 

7 • 5 . Function Statements 18 

8 o Statements ,20 

8.2. Case Statements ....,,.. 21 

8 .3 . Iterative Statements .,......, ,,..,. .22 



A Programming Language for the 36O Computers * 

Niklaus Wirth 

Introduction 

This paper is a preliminary definition of a programming language 
■which is specifically designed for use on IBM 56O computers, and is 
therefore appropriately called PL36O. 

The intention is to present a programming tool which (a) closely 
reflects the particular structure of the 36O computer, and (b) is a 
superior notation to present Assembly Codes with respect to presentation 
and documentation of algorithms. As a consequence of (a), it enables 
a programmer to design programs mentioning explicitly features of this 
machine in a degree impossible in "higher level" languages. 

- It is also felt that a highly structured language is most appro- 
priate (a) to promote the intelligibility of texts for the human user 
and (b) to encourage this user to properly structure his algorithms 
not on paper only, but in his mind as well. The language is therefore 
a phrase structure language containing many constructions which quite 
obviously correspond to a single 36O machine instruction (cf. [l]). 

Moreover, it is hoped that through certain conventions (not men- 
tioned in this preliminary paper) concerning the use of general registers 
as base address registers, programs written in PL36O can be efficiently 
run under a time-sharing monitor without requiring the presence of ad- 
ditional sophisticated relocation hardware (Model 67). 



f/ This work was partially supported by the National Science Foimdation 
(GP ^053) and the Computation Center of Stanford University. 



Pr^ently, a compiler for PL36O i3 available on th? 65500 computer. 
This compiler is mainly intended to serve as a temporary tool for a boot- 
strapping process: The compiler is being rewritten in its own language 
and then becomes automatically available on the 36O computer. Indeed, 
the primary purpose of this project is to obtain a convenient tool for 
the development of other compilers (in particular ALGOL X) and monitor 
systems, where a considerable degree of machine-orientation and -dependence 
is desirable, but where an adequate standard of program documentation is 
of no le s s importance . 



Reference: 

[1] IBM System/360 Principles of operation. IBM Systems Reference 
Library, A22-6821-1. 



1. Definitions, Notation 

The structure of the language PL56O is defined by a phrase structure 
system. Its productions have the general form 

(a) ::= x^lxgl ... |x^ 

which is an abbreviation for the set of productions 

(a) ::= x^ 
(a) ::= Xg 

• • • 

(A) ::=x^ 

and where (A) is a single nonterminal symbol, and x. is a string 
of terminal and nonterminal symbols. 

Terminal symbols of the phrase structure system are either so-called 
basic symbols or character strings. Basic symbols may consist of one or 
more characters, i.e., typographical entities of a lower order than basic 
symbols; the set of characters and the decompositions of basic symbols 
into characters are not defined here, and may depend on the hardware 
available to a particular implementation. Character strings are se- 
quences of characters delineated by string quotes. 

The set of basic symbols is defined in section 2. 

Nonterminal symbols, sometimes also called "sjmtactic entities", 
are denoted by letter strings enclosed by the brackets ( and ) . 
In addition to these letter strings, the ^script letters S', \l, and "V" 
may occur; a production containing one or more of these letters stands 
for the set of productions in each of which this letter has been replaced 
by a terminal word produced from this letter according to the following 
syntax : 



V 

u 



:=U|l3yte 

:= integer I long integer] real [long real 

:= general! floating] floating double 



If the same letter occurs more than ojice in the production, then all 
occurrences of the letter have to be replaced by the same terminal word. 

Example : 

The production 

Co variable) ::= ("Invariable identifier) 

(cfo section 6) stands for the five productions 

(integer variable) ::= (integer variable identifier) 
(long integer variable) ::= (long integer variable identifier) 
(real variable) : := (real variable identifier) 
(long real variable) ::= (long real variable identifier) 
(byte variable) ::= (byte variable identifier) 
In order to provide explanations for the meaning (semantics) of PL36O 
texts, the letter sequences denoting syntactic entities (nonterminal 
symbols) have been chosen to be English words describing approximately 
the nature of that entity. Where words which have appeared in this 
manner are used elsewhere in the text, they refer to the corresponding 
sjmtactic definition. 

Definition: A sequence of basic symbols (and character strings) is a 
PL56O program, if and only if it can be produced from the symbol 
(block) by the productions listed in sections 5-8» and a meaning can 
be attributed to it by the accompanying semantic explanations. 



2. Basic Symbols 

a1b1c1d|e1f|g|h|i|j1k|l|m1n1o|p|q|r|s|t|u|v|w|x|y|z| 

a|b|c|d|elf|gJhlibikll|m|n|o|p|q|r|slt|u|vfw|x|y|z| 

0|ll2|3|Ul5l6|7|8l9| 

+ |-h|/|and|orl xor | shl | shr | shll | shrX | 

<l<l=l/=l>l>h=lnes|absl 

goto 1 if 1 then | else | while | do | for I step 1 until [ case | of | 

begin lendUDl AA'A-l 

integer 1 real | byte | long | array | procedure | 

overflow |#l_ 



3. Identifiers 

3.1. Syntax 

(letter) ::= a1b1c1d|e|f|g|h1i| j|K|L|M|lT|o|p|Q|R|s|Tlulvlwlxlylz| 
a|b|c|d|e|f|g|hlilj|k|l|mln|o|p|q|r|s|tU|v|w|x|ylz 
(identifier). ::= (letter)| (identifier) (letter) | (identifier) (digit) 
(U identifier) ::= (identifier) 
(S* register) ::= (identifier) 
(procedure identifier) ::= (identifier) 
(function identifier) ::= (identifier) 

3.2, Semantics 

Identifiers have no inherent meaning, but serve for the identification 
of registers, variables, procedures and labels. They may be chosen 
freely, with the exception of 

RO, Rl, R2, R3 , R4, R5, R6, B7 , R8, R9, RA, RB, RC, RD, RE, RF 
which designate the I6 general registers, and 

FO, F2, Fij-, F6, FOl, F23 , F45, F67 
which designate the floating- and floating double registers respectively. 

Every identifier in a program must be defined. If it designates 
a register, definition is implied; if it designates a variable or a 
procedure, then this occurs through appropriate • declarations (cf. sec- 
tion 5), or if it designates a label, then it occurs through a label 
definition (cf. 7.3.)- 

The applicability of the rul^s given in the syntax (cf. 3-1') de- 
pends upon the definition of the identifier under consideration as 
follows : 



(a) If the Identifier is Rn, where n is either 0,1,2,..., 9, 
A^..., F, it designates the n'th general register (the letters 
A ... F have to be understood as numbers in hexadecimal notation, 
i.e., 10 ... 15). Otherwise, 

(b) if the identifier is Fn, where n = 0,2,U, or 6, then it 
designates the n'th floating register. Otherwise, 

(c) if the identifier is Fnm, where n = 0,2,'4-, or 6, and m = n+1, 
then it designates the n'th floating double register. Otherwise, 

(d) if the identifier has been defined in a U variable declaration 
in the smallest block embracing the given occurrence, then it 
identifies that 1} variable and is said to be a 1^ variable iden- 
tifier; otherwise, if it has been defined in a procedure heading 
in that block, then it identifies that procedure and is said to be 
a procedure identifier; otherwise, the rules under (d) are applied 
considering the smallest block embracing the previously considered 
block, if there exists one. Otherwise, 

(e) if the identifier occurs in the listing of function identifiers 
(cf. 7-5-)^ then it identifies that function. 

3.5' Examples: 

P 

cat 

RO 



k. Quantities, values, and types . 

The following kinds of quantities are distinguished: registers, 
variables, and constants. Every qxiantity is said to possess a value. 
The value of a. constant is determined by its denotation, (cf. 4.1.-4.2.), 
The value of a register or a variable is the one most recently assigned 
to it. Every value is said to be of a certain type. The following types 
are distinguished; 



integer , long integer 
real , long real 
byte 



the value is an integer, 
the value is a real number, 
the value is a character. 
In the computer, every value is represented by a number of binary digits 
in a suitably encoded manner (cf, [l]). The number of bits used in the 
representation of the different types of values is given as follows: 
integer l6 (half word) 



long integer 


52 


(word) 


real 


32 


(word) 


long real 


a 


(double word) 


byte 


8 


(bjrte) 



Subsequently, the denotation of constants is defined. 

k.l. Numbers 

4.1.1. Syntax 

(digit) ::^ 0|ll2l3l4|5|6|7|8l9 

(unsigned integer) ::- (digit) | (unsigned integer) (digit) 

(decimal integer) : := (unsigned integer)] _ (\ansigned integer) 

(hexadecimal digit) : := (digit) |a1b|c|d|e|f 

(hexadecimal integer) ::= #(hexadecimal digit)] 

(hexadecimal integer)(hexadecimal digit) 



(integer nioraber) ::= (decimal integer) j (hexadecimal integer) 

(fraction) ::= .(unsigned integer) 

(lonscaled real) ::= (unsigned integer)(fraction)| (fraction) 

(scale factor l) ::= E(decimal integer) 

(unsigned real) ::= (unsealed real) | (tin scaled real) (scale factor l)| 

(unsigned integer) (scale factor l) 
(real number) ::= (unsigned real)| _ (unsigned real) 
(scale factor 2) ::= D (decimal integer) 
(long unsigned real) ::= (unsealed real) | (unsealed real) (scale factor 2)| 

(unsigned integer) (scale factor 2) 
(long real number) ::= (long unsigned real)| _ (long unsigned real) 

4.1.2. Semantics 

Integers have either decimal or hexadecimal notation. Real and 
long real ntmibers use decimal notation only. _ denotes a monadic minus 
sign. The scale factor is expressed as an integral power of 10. 

4.1.5 • Examples: 

1E8 

1066 5.37861289001DO 

3.14 16 #7AB3 

4.2. Strings 
4.2.1. Syntax 

(string) ::= (sequence of characters enclosed by string quotes) 



5. Declarations 

5.1. Variable Declarations 

5.1.1. SjmtSLX 

(1^ simple tsrpe) ::= integer | long integer 1 real | long real | byte 
(D'type) : := (l)" simple type)] 

array ( (unsigned integer)) (V simple type) 
(V variable declaration) ::= (V type) (identifier) j 

(invariable declaration) , (identifier) | 

('\^ variable declaration) ( (U mornber)) 

Oy variable declaration) ( (string) ) 

5.1.2. Semantics 

A variable declaration associates an identifier and a type with 
one or several qimntities. If the tjrpe of the declaration is a simple 
type, then one quantity is declared, otherwise the unsigned integer 
between parentheses following the symbol array indicates the number of 
declared quantities of the specified simple type. The individual quan- 
tities can then be identified by subscripts (cf. 6.2.). The ensemble 
of the quantities is called an array. If a declaration is followed by 
one or several parenthesized niimbers, then this implies that the de- 
clared quantity be initialized with the given number(s). The type of 
these numbers must be identical to the type of the declaration. This 
initial assignment of values is understood to take place only upon the 
first time the block in which the declaration occurs is entered. 



10 



5.1.3. Examples: 
integer i,j 
long integer m,n,q 
real x,y 
long real z,w 
integer i(l) 
array (lOO) integer a 
array (5) integer I (2l)(0)(8)(l7 )(3'9) 

5.2, Procedure Declarations 

5.2.1. Syntax 

(procedure heading) ::= procedure (identifier) ((general register)); 
(procedure declaration) ::= (procedure heading) (statement) 

5.2.2. Semantics 

Execution of the statement following a procedure heading is invoked 
by procedure statements (cf. 7.4.). The procedure identifier defined by 
the procedure heading is assumed to be \jnknown within the procedure 
declaration. Moreover, the value of the register designated in the pro- 
cedure heading must not be altered during the execution of the statement 
following the procedure heading. 

5.2.3. Examples 

procedure P (RO); Rl := Rl+x 
procedure swap02 (RF); 

begin long real t; t := FOl; FOl := F23; F23 := t; end 



11 



6. Variables and Primaries 

6.1. Syntax 

(V variable ) ::= (V variable identifier)! 

("17 variable identifier) ((iznsigned integer)) 

(invariable identifier) ((general register)) 
(U primary) : := (U variable) J (U number) 

6.2. Semantics 

(invariable) designates a declared quantity of type '&'. If the 
variable identifier is followed by an unsigned integer or a general 
register within parentheses, called a subscript, then the identifier 
must designate an array, and the integer or the current value of the 
register identify the individual element of the array. The subscript 
values designating the elements must be 

(a) positive multiples of 2, if the array is of type integer , 

(b) positive multiples of k, if the array is of type long integer 
or real, 

(c) positive multiples of 8, if the array is of type long real , 

(d) positive integers, if the array is of type byte . 

The first element of any array is designated by a subscript value 0. 
Register RO must not be used as a subscript. The values of variables 
may be changed by means of assignment statements (cf. Y-l-)- 

A primary denotes a qimntity, either a variable, or a constant. 

6.3. Examples: 

Variables : i 

1(3) 
a(R5) 

12 



7 . Simple Statements 
Sjmtax 

(simple statement) ::= (assignment statement ) | (branch statement)] 
(block) I (procedure statement)] (fimct ion statement) 

7.1. Assignment Statements 

7.1.1. Syntax 

(simple 3^ register assignment) ::= (^register) := (UL primary)] 

(T'register) := (3^ register) ] (ST register) := neg (?^ register) ] 
(^register) := abs (9^ register) 

(arithmetic operator) ::=+]-]■*]/]++] — 

(logical operator) : 1= and ] or ] xor 

(shift operator) : : = shl ] shr ] shll ] shrl 

(3" register assignment) ::= (simple T register assignment)] 
(S' register assignment) (arithmetic operator) (IL primary) ] 
(3' register assignment) (arithmetic operator) (J' register) ] 

(general register assignment) : := 

(general register assignment) (logical operator) (long integer primary)! 
(general register assignment) (logical operator) (general register)] 
(general register assignment) (shift operator) (unsigned integer)] 
(general register assignment) (shift operator) (general register) 

(variable assignment) ::= (U. variable ) := (T register) 

(assignment statement) ::= (J'register assignment) ] (variable assignment) 

7.1.2. Semantics 

Execution of an assignment statement causes a new value to be assigned 
to the quantity designated on the left of the assignment operator (:=). 

15 



In the case of a simple register assignment, this value is the current 
value of a primary, a register, or the negative or the absolute value of 
a register. The types iL of primaries which may be assigned to a register 
of tjrpe 3^ are marked in the following Table 1: 



>---^ 


integer 


long 
integer 


real 


long real 


general 


# 


■X- 


^ 


^ 


float ing 






^ 


* 


floating 
double 






■x- 


* 



Table 1 



The arithmetic, logical and shift operators +, -, *, /, ++, --, and, 
or, xor (exclusive or), shl , shr (shift left/right), shll , shrl (shift 
left/ right logical) designate operations which are described in detail 
in Reference [l]. The operators ++ and -- designate unnormalized 
addition and subtraction if applied to floating registers, "logical" 
addition/ subtraction if applied to general registers (cf. also [l]). 

Execution of a register assignment containing one of the arithmetic 
or logical operators causes the designated operation to be performed on 
two operands and the result to be assigned to the first operand. The 
first operand is the register which occurs to the left of the assign- 
ment operator, and the second operand is the primary or register fol- 
lowing the operator. In the case of a (unary) shifting operation, the 
operand is the designated first operand, and the number of bit positions^ 
it has to be shifted is determined either by the number, or by the current 

11^ 



value of the general register following the shift operator. 

The types of a register (ST) and of a primary (IL) which may si- 
multaneously be operands of an arithmetic operator are defined in the 
following Table 2 (the tjrpe of a register assignment is said to be the 
type of the register occurring to the left of its assignment operator): 





integer 


long 

integer 


real 


long real 


general 


'^(1) 


•H- 






floating 






■X- 


4t 


float ing 
double 






* 


* 



Table 2 

Note (l): The combination of general register and integer primary is only 
permissible in the connection with the operators +, -, and * . 

Execution of a variable assignment causes the current value of the 
designated register to be assigned to a variable. The types of the 
variable (U) to which the value of a register of type 3^ may be 
assigned, are designated in Table 1. 



7.1.3* Examples 






Register assignments: 








Rl 


= R5 




Rl 


= 5 




RF 


= i+j-mfa(Rl) 




R9 


= R9 and RIO shll 8 or Rl 




F2 


= F5 + 3.lhl6 




FOl 


= z^+w 



15 



Variable assignments: 

i := RO 
X : = FO •- 
w := F25 
a(Rl) := RF 

7.2. Branch Statements 
iv2:l. Syntax 

{branch statement) ; ; = goto (identifier) 

7 .2.2. Semantics 

A branching statement determines that execution of the program be 
continued at the place of the definition of the identifier following 
the symbol goto . This definition is identified by the following rules: 

(1) If some label definition (cf. 7 0.) within the smallest block 
embracing the branch statement contains that identifier, then this 
label definition designates the place where execution has to be 
continued. Otherwise, 

(2) Rule (1) is applied considering the smallest block embracing the 
previously considered block. 

7 .5 . Blocks 
7.5.1. Syntax 

(block heading) : := begin | (block heading) (U variable declaration);) 

(block heading) (procedure declaration); 
(label definition) ::= (identifier): 
(block body) ::= (block heading)] (block heading) (statement);] 

(block heading) (l&bfel definition) (statement); 
(block) ::= (block body) end t (block body>)(label definition) end 

16 



7.3 »2. Semantics 

A block introduces a new level of nomenclature: identifiers defined 
in variable declarations or procedure headings in the block heading or 
in label definitions in the block body are said to be local to that 
block. 

Execution of a block begins with the execution of the first statement 
following the block heading. Upon termination of the execution of a 
statement, the next statement in textual sequence is executed (except 
in the case of a goto statement). 

7 .5 oj . Examples 

Innerproduct program with summation in double precision: 

begin long real s; array (lOO) real x, y; 

FOl := ODO; 

for Rl := step k until 596 do 

begin F23 := x(R1) ^ y(Rl); FOl := FOl + F23 ; 

end; 

s := FOl 
end 

Bubble sorting program: 
begin array (lOO) real a; 

for Rl := 396 step -k until do 
begin R5 := Rl - ij-; 

for R2 := step k \mtil R5 do 
begin r6 := B2+k; FO := a(R2); F2 := a(R6); 
if FO > f6 then 

begin a (R2) := F2; a(R6) := FO; 
end; 
end ; 
end ; 
end 

17 



TA. , Procedure Statements 
'J.k.l, Syntax 

(procedure statement) ::= (procedure identifier) 

7 A. 2. Semantics 

Execution of a procedure statement consists of the execution of the 
statement which, together -with the procedure heading in which the pro- 
cedure identifier is defined, consititutes a procedure declaration 
(cfo 5-2. )• The value of the general register specified in that proce- 
dure heading is altered by the procedure statement. 

7.5. Functions 
7 • 5 o 1 • Syntax 

(fimction) ::= (function identifier)] 

(function) ((integer number) ) | (fimct ion) ( (t register) )| 

(function) ((invariable)) 

7o5'2= Semantics 

The instruction set of the systen^360 processor contains instructions 
which cannot be expressed by any of the statements of this language 
(except the function statement). In order that the language be able to 
express the individual functions corresponding to these instructions in 
one single simple statement, the function statement is introduced. The 
individual instructions falling into this class are listed below» They 
are described in Reference [l]. 



18 



Fixed or Floating Point Arithmetic: Logical and Brajaching: 

Load Negative Compare 

Load and Test Load Address 

Halve Insert Character '• 

Convert to Binary Store Character 

Convert- to Decimal 

Load Multiple Shift Double 

Store Multiple Execute 

Furthermore, all instructions with SI and SS format belong to this 

category", as well as all status switching instructions. 

The parameters of the function statement correspond in the order from 

left to right to the operand fields of an instruction. 

It is suggested that the mnemonic instruction codes as defined in [l] 

be used as function identifiers. 

7. 5 "J- Examples: 

SVC(O) SPM(R5) 

ic(ro)(a(ri)) cvb(rf)(n) 

EX(0) (instruction) SLDL(Rij-)(l6) 
MVI#lF)(code) MVC(255)(a)(b) 



X9 



8. statements 
Syntax 

(statement) ::= (simple statement) | (if statement)] 
(case statement) 1 (iterative statement) 

8.1. If Statements 

8.1.1. Syntax : 

(relational operator) : := <1<1=1^1>|> 

(condition) ::= (T register) (relational operator) (IL primary) ] 

(f register) (relational operator) (9^ register) 1 overflow 
(if clause) ::= if (condition) then 
(true part) ::= (simple statement) else 
(if statement) ::- (if clause) (statement) ] 

(if clause) (true part ) (statement) 

8.1.2. Semantics: 

A condition is said to be met, if the relation indicated by the 
relational operator holds between the two opearands. The types 3^ and 
"U of the operands which may simultaneously be operands of relational 
operators are defined in Table 2 of section 7.1.2. 

The symbol overflow designates a condition which may be met after 
the occurrence of a result of arithmetic operations which cannot be 
accepted by the computer. 

The if statement expresses that execution of certain statements be 
dependent on certain conditions. In the construction 

(if clause) (statement) 



20 



the statement is executed only if the condition contained in the if clause 
is met. In the construction 

(if clause) (true part) (statement) 
the simple statement of the true part is executed and the statement 
following the true part is skipped, if the condition specified by the 
if clause is met. Otherwise, the true part is skipped, and the state- 
ment following it is executed. 

8.1.5. Examples , 

if RO > 5 then goto L 

if FO < Fl then FO := FO + I.5 

if RA. = KB then RO := RO or Rl else RO := RO and Rl 

if RO = 1 then FOl := w+z else 

if RO = 3 then Fk ; = x+y else goto L 

8.2. Case Statements 

8.2.1. Syntax 

(case clause) ::= case (general register) of 

(case sequence) ::= (case clause) begin ] (case sequence) (statement) ; 

(case statement , : : = (case sequence ) end 

8.2.2. Semantics 

Execution of the case statement 

case (register-k) of 

begin (statement-l); ... ; (statement-i) ; ... ; (statement-n) ; end 
consists of the execution of the i-th statement in the case sequence, 
where i is the current value of the general register specified by the 



21 



case clause. This value is supposed to be the ordinal number of some 
statement in the case sequence. The general register of the case clause 
must not be RO, and its value becomes imdefined through the execution 
of the case statement. 

8.2.3. Example: 

case Rl of begin RO := 100; F2 := x; P; goto L; end 

8.3 , Iterative Statements 

8.3.1. Syntax 

(while clause) ::= while (condition) do 

(step until) ::= step (integer number) until (general register)] 
step (integer number) vmtil (integer primary) 
(for clause) ::= for (general register assignment) (step until) do 
(iterative statement) ::= (while clause) (statement) ] 
(for clause) (statement) 

8.3.2. Semantics 

a. An iterative statement of the form 

while (condition) do (statement) 
is equivalent to 

L: if (condition) then begin (statement); goto L; end 

b. An iterative statement of the form 

for (general register) := (initial value) step (increment) 
until (limit) do (statement) 

is equivalent to 



22 



(general register) := (initial value); 
K: if (general register) . (limit) then goto L; 

(statement); 

(general register) := (general register) + (increment); 

goto K; 
L: 

The > sign applies, if (increment) is a positive integer, < 
applies, if it is a negative integer. 

8.3 .3 • Examples 

while Rl ^ a(Rl) do Rl := Rl + 1; 

for Rl := step k until n do RO := RO + a(Rl); 

for R3 ;= 1 step 1 until k do 

begin R2 := R1/R3; Rl := Rl - 1; 

end 



23 



