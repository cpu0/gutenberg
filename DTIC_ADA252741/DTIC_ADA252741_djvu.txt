REPORT r-Vn- a555“741 ‘E 

Form Approved 

OPMNo. 

Public reporting burbon lor this ooHootion o * ~ ....r |||r||||r||[|| i||| ||||| ■ < 

and maintaining tha data naadad. and ravN 111 11 || I I || || p I 

auggaationa lor raduemg thia burdan. to W || |l li| || 1 il ||| 11 11 

22202-4304 and to tho Oflioo o» tntomwiie • 

II |||| |||| • tim* far rmfawing jnatrudiont. Marotiing ansting daia aouraaa gadiaring 

I II III Ian aadniala or any othar aapad ol thia eeWaction of infannalion. induda^ 

f 1 II! landRaporta. 1215 JaHaraon Davia Hgharay. Suita 1204. Aitiriafan. VA 

II llll III! OC 20603. 

1. AGENCY USE (Leave J. REPORT TYPE AND DATES 

1 1 Final: 01 Jun 1992 to 01 Jun 1993 

4. TITLE AND 

Validation Summary Report: INTEL Corporation, iPSC/860 Ada Release 

6.1.0(E) Unix System V/860 Release 4 Version 3. Intel i860 Station under 
UNIX System V/860 (Host) to Intel iPSC/860 under Ada-NX, Relase 3.3.1 (T 

5. FUNDI 

MG 

6. 

Wright-Patterson AFB, Dayton, OH 

USA 


7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING 

ORGANIZATION 

AVF-VSR-533.0492 

9. SPONSORING'MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 

DT1C:_ 

10. SPONSORING^MONITORING 

AGENCY 

11. SUPPLEMENTARY 



12a. DISTRIBUTION/AVAILABILITY • B 

Approved for public release; distribution unlimited. 

12b. DISTRIBUTION 

13. (Maximum 200 

INTEL Corporation, iPSC/860 Ada Release 6.1.0(E) Unix System V/860 Release 4 Version 3, Intel i860 Station 
uixJer UNIX System V/860 (Host) to Intel iPSC/860 under Ada-NX, Relase 3.3.1 (Target), 920513W1.11255, 
ACVC 1.11. 

r ' 

14. SUBJECT 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, 

15. NUMBER OF 

16. PRICE 

17. SECURITY 16. SECURITY 

CLASSIFICATION 

UNCLASSIFIED UNCLASSIFED 

19. SECURITY 

CLASSIFICATION 

UNCLASSIFIED 

20. LIMITATION OF 


NSN 


Standard Form 296, (Rev. 2-69) 
PrescrlbadbyANSI Sid. 









AVF Control Number; AVF-VSR-533.0492 

1 June 1992 
92-03-18-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 920513W1.11255 
INTEL Corporation 

iPSC/860 Ada Release 6.1.0(E) Unix System V/860, 
Release 4 Version 3, 312425-001 
Intel i860 Station under Unix System V/860, Release 4 -> 
Intel iPSC/860 imder Ada-NX, Release 3.3.1 


Prepared By; 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB (XJ 45433-6503 


Accesion For 

NTIS CRA&I 
OTIC TAB 
Ui;atuioci>ced 
Jjstitication 



By . 

Diit' ibution / 



Availabil;*y Cfvv? 

Avail cHKi01 
Sp.'C.ai 



t>T)C 







Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was con 5 )leted on 13 May 1992. 


Conpiler Name and Version: iPSC/860 Ada Release 6.1.0(E) Unix System V/860 

Release 4 Version 3, 312425-001 


Host Con^niter System: 

Target Computer System: 

Customer Agreement Number: 92-03-18-VRX 


Intel i860 Station 

under Unix System V/860, Release 4 


Intel iPSC/860 

under Ada-NX, Release 3.3.1 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

920513W1.11255 is awarded to INTEL Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 



Ma Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB CXI 



45433-6503 


Ada Val^atfi&n prganiz^ion 

Directc^, ^apdtet and Software Engineering Division 
Institute f^:)^fense Analyses 
Alexandria VA 22311 


Ma Joint Prcjgram Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 

DECLARATION OF CONFORMANCE 
Customer: Intel Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 4S433-6503 

ACVC Version: 1.11 

Ada In^lementation: 

Ada Compiler Name and Version: iPSC/860 Ada Release 6.1.0(E) 

Unix System V/860 Release 4 Version 3, 
312425-001 

Host Computer System: Intel i860 Station 

Target Computer System: Intel iPSC/860 

Declaration: 

I, the undersigned, declare that I have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the inplementation 
listed above. 

y 

Date 








TABLE OF CXWTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MCDIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATICN SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 


INTRCffiUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro901 against the Ada Standard [Ada83] using the 
current Ada Coitpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
information Act" (5 U.S.C. #552). The results of this validation a^ly 
only to the computers, operating systems, and ccmpiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the sxibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vhich performed this validation or to: 

Ada Validation Organization 

Ccmnputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



INTRODUCTIOJ 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Progranming Language, 
ANSI/MIL-STT>-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Con^iler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89J Ada Congiler Validation Capability User's Guide , 21 Jme 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. Ihe first letter of a test name identifies the class to 
vhich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at ccmqpile time and link time, 
respectively. 

The execute±>le tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity fiinctions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used 1:^ many tests for Chapter 13 of the 
Ada Standard. Ihe procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHEO^_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a coiif}iler detects illegal language usage. Class 
B tests are not executable. Each test in this class is coopiled and the 
resulting con^ilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the cooqpiler- Ihis behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is atteiqpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. Ihe modifications required for 
this implementation are described in section 2.3. 


1-2 



INTRC»UCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn test, (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host corrputer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures rec[uired to establish the complieuice of an Ada 
Facility (AVF) inplementation. 

r 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses commion storage for all or 

part of a program a^ also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-desig-iated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone xmit or may consist of 
several inter-connected units. 


1-3 




INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Confuter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 
Confuter 
System 

Validated Ada 
Conpiler 

Validated Ada 
Implementation 

Validation 


Withdravm 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
vdiich validation status is realized. 

A conpjter system v^ere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

Ihe Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragrairfi>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
conplete hardware implementations are possible. 

A conputer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada inplementatioh. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the ^a programming 
leuiguage. 


1-4 




CSIAPTER 2 


IMPLEMENTATION DEPEM)ENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BO1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vhich are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Cormnentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATION DEPENDENCIES 


Ttie following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAXJDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

0452310 

0453040 

0454110 

0454120 

C45502C 

0455030 

0455040 

O45504F 

0456110 

0456130 

0456140 

0456310 

0456320 

B52004D 

O55B07A 

B55B09O 

B86001W 

0860060 

OD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LONG_FLQAT; for this inplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLOAT, or SHORT_FLQAT; for this 
implementation, there is no such type. ~ 

A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A. .B (2 tests) check that the proper exception is raised if 
MACHlNEjCVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINEjOVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks v4iether a length clause can specify a non-default size 
for a floating-point type; this implementaticm does not support such 
sizes. 


2-2 





IMPLEMEJJTATION DEPE2®ENCIES 


Q)2A84A, Q)2A84E, Q}2a 84I..J (2 tests), euld Q)2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR v^en the value of the 
page number exceeds COUNT'LAST; for this Tnplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2-3 




IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 20 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303F BC300CB BD2B03A BD2D03A 

BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The ccwnpiler rejects the use of the range 

FLOAT'FIRST. .FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, and CD2A31A. .C (3 tests) were graded passed 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTHjCHECK, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form; 

" * CHECK ON REPRESENTATION FOR <TyPE ID> FAILED." 


2-4 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada inplementation tested in this validation effort is described 
adequately hy the information given in the initial pages of this report. 

For technical and sales information about this Ada inplementation, contact: 

Herb Mayer, Mail Stop: C04-02 

INTEL Corporation 

5200 NE Elam Young PJcwy. 

Hillsboro, OR 97124-6497 

Tel: (503) 629-6327 Fax: (503) 629-6367 

Testing of this Ada implementation was corxiucted at the implementor's site 
by a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, \4iether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 



PROCESSING INFORMATION 


a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inaj^licable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(c+d+e) 

4170 

(a-t-bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host conputer, the full set of 
tests was processed by the Ada in^ilementation. 

Testing was performed using command scripts provided the custoner and 
reviewed by the validation team. See ^ipendix B for a ccxnplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The option invoked explicitly for validation testing 
during this test was: 

Option{s)/Switch Effect 

-w To suppress coofjiler warning messages. 


Test output, con^iler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
Ihe meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vhich is 
the value for $MAX_IN_LEN—also list^ here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 — Value of V 

$B1G__ID1 (1..V-1 -> ^AS V-> '1') 

$BIG_ID2 (1..V-1 -> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A") 

$BIG_INT_LIT {1..V-3 -> '0») & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> »A') & 

$BIG_STRING2 & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 -> ' M 

$MAX_LEN INT_BASED_LITERAL 

"2;" & (1..V-5 -> '0') & "lit" 

$MAX_LEN REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 


MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> "A') & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALI(a'lMENT 

4 

$COUNT_LAST 

2147483647 

$DEFAULT_MEM_SIZE 

16777216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

I860_SYSTEM_V 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_AIX)RESS 

SYSTEM.’*+’’(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM. •'+"(16#100#) 

$FIELD_LAST 

2147483647 

$FILE_TERMINATC» 

f 9 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLOAT_NAME 

NO_SUCH_T5fPE 

$FORM_STRING 

nn 

$FORM_STRING2 

"aVNNOTjaSSTRICT_FILE_CAPACITY" 

$GREATER IHAN DURATION 

100000.0 


$GREATER 'niAN_OURATIC)N BASE LAST 

TOOOO^OO.O 

$GREATER THAN FLOAT BASE LAST 

~ l.lE+308 

$GREATER THAN FLOAT SAFE LARGE 

5.iyE307 


A-2 





MACRO PARAMETERS 

$GREATER_THAN_SHORT_FLQAT_SAFE LARGE 

9.0E37 

$HIC2i_PRI0RI'IY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

'Villegal/file_nzune/2{ ]$%FILEl.nAT" 

$ILLEGAL_EXTERNAL_FILE NAME2 

"Villegal/filejMune/^C ]$%FILE2.nAT" 

$INAPPROPRIATE_LINE LENGTH 

-1 

$INAPPROPRIATE_PAGE LENGTH 

-1 

$INCLUDEJPRAaiAl PRAGMA INCLUDE (•’A28006D1.TST") 

$INCLUDE_PRAGMA2 pragma include ("B28006D1.TST") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$1NTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100000.0 

$LESSjrHAN_DURATIC3N_BASE FIRST 

- 1 ^ 000000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITy 0 

$MACHINE_CCX)E_STATEMENT 

CODE_0»(OP -> NOP); 

$MACHINE_CODE_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2147483648 

$NAME TINy_INTE(a» 

A-3 



MACRO PARAMETERS 

$NAME_LIST 

$NAME_SPECIFICATI0N1 

$NAME_SPECIFICATI(»J2 

$NAME_SPECIFICATIC»a3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEM_SYS_NAME 

$PAGE_TERMINATOR 

$RECORDJDEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOOR PRAGMA 


l860_SySTEM_V 

/Vc/robboy/acvcl. ll/c/e/X2120A 
/vc/robboy/acvcl. ll/c/e/X2120B 
/vc/robboy/acvcl.ll/c/e/X3119A 
16#F000000E# 

16777216 

8 

l860_SySTEM_V 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; RECORD; 

CODE_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 


1 




APPENDIX B 


CXJMPILATION SYSTEM OPTIONS 


Hie compilec options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 




B-1 



COMPILATION SYSTEM OPTIONS 


ada VADS Reference ada 

ada - invoke the Ada cotopiler 
SYNTAX 

ada t options] [source_file]... (object_file.oJ... 

OPTIONS 

-# identifier type value (define) Define an identifier of a 
specified type arKi value. See VADS ADA PREPROCESSCXt REFEREl^. 

-A (disassemble) disassemble the mits in the source file after ccmpiling 
them. -A can be followed by arguments that further define the 
disassembly display (e.g. -Aa, -Ab, -Ad, -Af, -Al, -As): 

a add hexadecimal display of instruction bytes to disassembly 
listing 

b disassemble the unit body (default) 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassembly output in file "file_name.das" 

s disassemble the linit spec 

-a file_name (archive) Treat file_name as an object 
archive file created by ar. Since scxne archive files end 
with .a, -a is used to distinguish archive files from Ada 
source files. 

-DG (debug flag) Force frong end to write out the gnrx.lib 
file in ASCII format. To use this option, you must 
conpile a file that changes the gnrx.lib file. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as unccHq)iled. Ihe -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process conpilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. Ihe file of raw error messages can 
be used as input to a.error 






COMPILATION SYSTEM OPTIONS 


-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, and call the 
environment editor ERROR_EDITOR. (If ERROR_EDITOR is 
defined, the environment variable ERROR_PATTERN should also 
be defined. ERROR_PATTERN is an editor search commaix) that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, vi(l) is invoked. 

-K (keep) Keep the intermediate language (IL) file 
produced by the conpiler front end. The IL file will be 
placed in the .objects directory, with the file name 
Ada_source.i 

-L library_name (library) Operate in VADS library 
library_name [Default: current working directory) 

-lfile_abbreviation (library search) This is an option 
passed to the UNIX linker, id(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file abbreviations, see also 
Operating system documentation, ld(l). 

-M unit_name (main) Produce an executable program by 
linking the named unit as the main program. unit_name must 
already be compiled. It must be either a parameterless 
procedure or a parameterless function returning an integer. 

The executable program will be named a.out unless overridden 
with the -o option. 

-M source_file (main) Produce an executable program by 
ccxnpiling and linking source_file. The main unit of the 
program is assumed to be the root name of the .a file (for 
foo.a the \jnit is foo). Only one .a file may be preceded by 
-N. The executable program will be named a.out (self-hosted) or 
a.vox (cross-development) unless overridden with the -o option. 

-o executable file (output) This option is to be used in 
conjunction wTth the -H option. executable_file is the name 
of the executable rather than the default a.out. 

-0(0-9) (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-3 




CXMPILATION SYSTEM OPTIONS 


-0 full optimization 

-OO prevents optimization 

-01 no hoisting 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes (and instruction 
scheduling, if available) 

-06 hoisting from loops with maximum passes (and instruction 
scheduling, if available) 

-07 hoisting from loops and branches (and instruction) 
scheduling, if available) 

-08 hoisting from loops and branches, more passes (and 
instruction scheduling, if available) 

-09 hoisting from loops and branches, maximum passes (and 
instruction scheduling, if available) 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suf^ressed. 

For more information about optimization, see COMPILING AIW 
PROGRAMS, Con^iler Optimizations. See also pragma 
OPTIMIZE_CC»E(OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (recoiq}ile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) ^>ply pragma SUPPRESS to the entire 
con^ilation for all suppressible checks. (See also pragma 
SUPPRESS (ALL_CHECKS). 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print conqpiler version number, date and time 
of compilation, name of file compiled, command input line, 
total compilation time, and error summary line. Storage 
usage information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DESCRIPTION 

The connnar ^ ada executes the Ada compiler and compiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 


B-4 




COMPILATION SYSTEM OPTIONS 


this directory is modified after each Ada unit is ccmipiled. 

By default, ada produces only object and net files. If the 
-M option is used, the ccmpiler automatically invokes a.Id 
and builds a complete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 
order of conpilation euid the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada comnand in any 
VADS location/bin on a system will execute the correct 
compTler conponents based upon visible library directives, 
the option -sh is provided to print the name of the 
components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

See also a.das, a.db, a.error, a.Id, a.roklib, and Operating 
System reference documentation for the ld(l) utility. 

DIAGNOSTICS 

The diagnostics produced by the VADS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM 
reference includes a section number and optionally, a paragraph 
number enclosed in parentheses. 

Printed 3-20-91 VADS 


B-5 



COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
Aj^ndix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

a.Id VADS Reference a.Id 


a.Id - prelinker 
SYNTAX 

a.Id [options] tjinit_naine [ld_options] 

OPTIONS 

-DX (debug) Debug memory overflow (use in cases v^ere 
linking a large number of \jnits causes the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elaborate unitjname as early in 
the elaEoration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tHe output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker ccmmand but suppress 
execution. 

DESCRIPTION 

a.Id collects the object files needed to make unitjname a main 
program and calls the UNIX linker ld(l) to link together all Ada 
and other language objects required to produce an executable image 
in a.out (self-hosted) or a.vox (cross- development), unit name is 
the main program and must name a non-generic subprogram. lf~unit_name 
is a function, it must return a value of the type STANDARD. INTEGER. 


B-6 





CXJMPILATION SYSTEM OPTIONS 


This integer result will be passed back to the UNIX shell as the status 
code of the execution. The utility uses the net files produced by the Ada 
conpiler to check dependency information, a.Id produces an exception 
mapping table and a unit elaboration table and passes this information 
to the linker. The elaboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise an exception will no longer 
have exception tables. 

a.Id reads instructions for generating executables from the ada.lib file 
in the VADS libraries on the search list. Besides information generated 
by the compiler, these directives also include WITHn directives that 
allow the automatic linking of object modules compiled from other 
languages or Ada object modules not named in context clauses in the Ada 
source. Any number of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WITHl. The directives 
are recorded in the library's ada.lib file and have the following form. 

WITHl:LINK:object_file: 

WITH2:LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in any 
VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the library 
search list will hide the same numbered WITHn directive in a library 
later in the library search list. 

Use the tool a.info to change or report library directives in the 
current library. 

All arguments after unit_name are passed on to the linker. These may 
be options for it, archive libraries, library abbreviations, or 
object files. 

VADS_location/bin/a.ld is a wrapper program that executes the correct 
executable based upon directives visible in the ada.lib file. This 
permits multiple VADS conpilers to exist on the same host. The -sh 
option prints the name of the actual executable file. 

FILES AND DIRECTORIES 

a.out/a.vox default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

DIAGNOSTICS 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the UNIX linker Id. 

Printed 3-20-91 VADS 


B-7 




APPEiroiX c 


APPENDIX F OF Hffi Ada STANDARD 


■Ae only allowed ioplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by toe custcxner. Unless specifically noted otherwise, 
references in this Appendix are to coopiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E+308 .. 1.79769313486232E+308; 
type SHORT_FIxaAT is digits 6 range -3.4028E+38 .. 3.4028E4-38; 

type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 






APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Inplementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINE_0NLY pragma, when used in the same way as pragma 
INLINE, indicates to the conpiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine vdiich saves code 
space. If a user erroneously makes an INLlNEjQNLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAN_ERROR will be rais^ at nin time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefines Ada packages, but provides no user access. It is 
used only to implement code b^ies for v^ich no actual Ada 
body can be provided, for exanple the MACH1NE_0C»E package. 

1-3. SHARECODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a ccxi^ilation, but before 
any subsequent ccxrpilation unit. 

When the first argument is a generic xjnit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiatic»i will 


C-2 






APPENDIX F OF THE Ada STANDARD 


get a xinique copy of the generated code. The extent to 
^ich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BC»Y is also recognized by the inple- 
mentation and has the same effect as SHARE_CXX>E. It is 
included for ccxipatability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenqpt to use the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a siibprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACEJNAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_arguinent. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or sul:^rogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cemnot be emy of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CC»E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallov^. A warning is issued if 
OFF is used and any implicit code needs to be generated. 


C-3 



APPENDIX F OF THE Ada STANDARD 


Hie default is ON. 

1.8. OPTIMlZE_C(X)E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies v^eUier the code should be optim¬ 
ized by the ccmpiler. Ihe default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CX)NTROLLED 

This pragma is recognized by the inplementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RN. 

2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ATORESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inpleroented as described in ^pendix B of the 
Ada RN. 

2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON_REENrRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the ccxnpiler that the subprogram will not be called 


C-4 





APPEICIX F OF THE Ada STANDARD 


recursively allowing the con 5 )iler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only aj^ar in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
tecause it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 

2.10. PACK 

This pragma will cause the con^iler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 

This pragma Pragma passive can be a{^lied to a task or task 
type declared immediately within a library package spec or 
bo^. The pragma directs the conpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKINGJERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in ippendix B of the 
Ada RM. 

2.14. SHARED 


C-5 




APPENDIX F OF THE Ada STANDARD 


This pragma is recognized by the inplementation but has no 
effect. 


2.15. STORAGE_UNIT 

This pragma is recognized by the inf)lementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK and in some cases OVERFLCW_CHECK cannot be 
supressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or. 
statement. For an entry for vhich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_C(X)E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.6 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AIX)RESS in the package SYSTEM. 

4. Specification Of Package SYSTEM 


C-6 





APPEl^IX F OF THE Ada SIANEARD 


— Copyright 1987, 1988, 1989 Verdix Corporation 

— Preserve line numbers as they are reported in ACVC tests. 

with unsigned_types; 
package SYSTEM is 


pragma suppress(ALLjCHECKS); 
pragma suppress(EXCEPTIONJEABLES); 
pragma notjeleJsorated; 


type NAME is ( i860_System_V ); 


SYSTEMJJAME 
STORAGEJUNIT 
MEMORY SIZE 


: constant 
constant :> 8; 

: constant 


NAME i860_System_V; 
16 777 216; 


— System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

F1NE_DELTA 

TICK 


: constant 
: constant 
: constant 
constant 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 783 ^47; 
1 ^; “ " 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 
MAX_REC_SIZE : integer :» 64*1024; 


type ADDRESS is private; 


function 

M^ll 

(A: 

AIX)RESS 

B: 

ADDRESS) 

return 

BOOLEAN 

f\jnction 

II 

(A: 

ADDRESS 

B: 

AIX>RESS) 

return 

BOOLEAN 

function 

II 

(A; 

ADDRESS 

B: 

AIX)RESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS 

B: 

AIX>RESS) 

return 

BOOLEAN 

function 

W^ll 

(A; 

ADDRESS 

B: 

ADDRESS) 

return 

INTEGER 

fxinction 


(A; 

ADDRESS 

I: 

INTEGER) 

return 

AIX>RESS 

function 


(A; 

ADDRESS 

I; 

INTEGER) 

return 

AIX>RESS 


function (1: UNSIGNEDJTYPES.UNSIGNED INTEGER) return AIX)RESS; 


function MEMORY_AEX)RESS 

(I: UNSIGNED TYPES.UNSIGMED_INTBGER) return AIX)RESS renames 


NO AIX)R : constant AIX)RESS; 


type TASK_ID is private; 
NO_TASK_ID : constant TASK_ID; 

subtype SIG_STA'IUS_T is INTEGER; 
SIG STATUS SIZE : constant :« 4; 


C-7 






APPE2TOIX F OF THE Ada STANDARD 


type PROGRAM ID is private; 

NO_PROGRAM_ID : constant PROGRAM^ID; 

type LONG_ADDRESS is private; 

NO_LONG_AI»R ; constant LGNG_AM)RESS; 

function "+" (A; LONG_AI»RESS; I; INTEGER) return LONG_AI»RESS; 
function (A; LONG_ADDRESS; I: INTEGER) return LC3NG_ADDRESS; 

function MAKE_LONG_AI»RESS (A; AW>RESS) return LONG_AM)RESS; 

function LOCALIZE(A: LONG_AW)RESS ; BYTE_SIZE : INTEGER) return AM)RESS 

function STATION OF(A: LONG ADDRESS) return INTEGER; 


private 


type ADDRESS is new UNSIGNED_TYPES.oi<oIGNED_INTEGER; 
NO_ADDR : constant ADDRESS :« 0; 

pragma BUILT IN(">"); 
pragma BUILT""IN("<"); 
pragma BUILT""IN( ">-"); 
pragma BUILT"IN("<»"); 
pragma BUILT""INC-"); 
pragma BUILT3 n( "+"); 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INrEGER; 
N0_TASK_ID ; constant TASK_ID 0; 

type PROGRAM_ID is new UNSIGNEDjryPES.UNSIGNED_INTBGER; 
NO PROGRAM ID : constant PROGRAM ID :« 0; 


type LONG_AI»RESS is new UNSIGNED_TXPES.UNSIGNED_INTEGER; 

NO_LONG_ADDR : constant LONG_AI»RESS 0; 

pragma BUILT_IN(MAKE_LONG_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT__IN(STATIONjOF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

in the absence of pragma PACK record con^nents are padded 
so as to provide for efficient access the target 

hardware, pragma PACK applied to a record eliminate the pad- 


C-8 




APPD^IX F OF THE Ada STANDARD 


ding v^ere possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa-- 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub^ 
type. A size clause applied to a record type idll not cause 
packing of ccmponents; an explicit record representation 
clause must be given to specify the packing of the cook 
ponents. A size clause applied to a record type will cause 
packing of components only \dien the component type is a 
discrete type. An error will be issued if there is insuffi- 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables vdiich have address 
clauses. The specified address indicates the i^ysical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINEjCODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


C-9 







APPENDIX F OF THE Ada STANDARD 


CODE_n'( opcode, operand {, operand} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

CC»EJN'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CX)DE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE 0(X>E or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CCX)E must be static expressions, string literals, or 
the functions defined in MACHINE_CXX)E. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORACS;_lK4ITS) ^en the size 
of ELENENT_TyPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEHENTJTYPE'SIZE is 
very large, MAX REC_SIZE is used instead. MAX RECORD SIZE 


C-10 







APPENDIX F OF THE Ada STANDARD 


is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case tiie maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) when the 
size of ELEMENTJTYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENTJTYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENnAL_IO isposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources vp to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including ^e end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared CXjjects 

There is an absolute limit of 6,000,000 x STORAGEJIAHTS for 
objects declared statically within a compilation unit. If 


C-11 







APPENDIX F OF THE Ada STANDARD 


this value is exceeded the con 5 )iler will tenninate the 
pilation of the tanit with a FATAL error message. 


com- 


C-12 




