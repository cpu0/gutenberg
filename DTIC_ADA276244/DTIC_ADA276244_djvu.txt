REPORT DOCUMENTATION PAGE 


Form Approval 
OPMNo. 


AD-A276 244 


■warag* 1 hour par rooponM, induding Iho timo lor roviowng inttruaior.o, Morghing outting data souroat gdharing 
aliorr. S«r<d oommanlt ragardir<g Ihii buidan aatimda or any olhar aapad ol Ihit oolJbion ol inlorTTiatm, inoludir^ 
rioa, Oiradorala tor Intormalior) Oparationt and Rapoda. IMS JaHataon Oavia Hgharay. SuKa 1204. Arlington. VA 
ioa o( Managamad and Budgal. Waahington. DC 20603. 

•ORT I 3. REPORT TYPE AND DATES 


" title and 5. FUNDING 

VADS Windows NT/486, VAda 110-36315, Version 6.2, Host; 

Compudyne 486 (with Floating Point Co-Processor) under Windows 
NT, 3.1 , 940110W1.11337 


Authors: 

Wright-Patterson AFB 


7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 


8. PERFORMING 
ORGANIZATION 


9. SPONSORING^MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301-3080 



10. SPONSORING-MONITORING 
AGENCY 



12a. DISTRIBUTION/AVAILABILITY 

Approved for public release; distribution unlimited 


(Maximum 200 

VADS Windows NT/486, VAda 110-36315, Version 6.2, Host: Compudyne 
486 (with Floating Point Co-Processor) under Windows NT, 3.1, 
940110W1.11337 



rTTC Y 


94-05674 






Ada programming language, Ada Compiler Val. Summary Report, Ada Comp 

Testing, Ada Val. Office. Ada Val. Facili 


18. SECURITY 119. SECURITY 


r-T^«ii:Tira 


CLASSIFICATION 

UNCLASSIFIED 


UNCLASSIFED 


CLASSIFICATION 

UNCLASSIFIED 


15. NUMBER OF 


16. PRICE 

y . _ 


20. LIMITATION OF 

UNCLASSIFIED 


ndart Form 296. ( 
PrMcribod by ANSI SW. 









AVF Control Number; AVF-VSR-579.1293 
Date VSR Coopleted: 1 February 1994 

93-11-22-VRX 


Ada CC»PILER 
VALIDATION SUMMARY REPORT; 

Certificate Number: 940110W1.11337 
Verdix Corporation 

VADS Windows NT/486, VAda 110-36315, Version 6.2 
COTpktyne 486 (with Floating Point Co-Processor) under Windows NT, 3.1 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB CW 45433-5707 


Accesion Fo~ 

NTIS CRA&I 
OTIC TAB 
Unannoiincod 
Justification 



By_ 

Oisfrlbution / 

Availability Codes 


Oist 


Avail and/Of 
Special 






Certificate information 


i. 


Ihe following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 10 January 1994. 

Ccxnpiler Name and Version: VADS Windows NT/486, VAda 110-36315, Version 6.2 

Host Computer System: Coopudyne 486 (with Floating Point Co-Processor) 

ttfxier Windows NT, 3.1 

Target Ccxoputer System: Same as host 

Custcaner Agreement Number: 93-11-22-VRX 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940110W1.11337 
is awarded to Verdix Corporation. This certificate expires two years after 
NIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 



Dale E. Lange 
Technical Director 


645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 




Ada ycLi 
Direptor 
Institute 
Alexandria VA 22311 


Organization 

ter and Software Engineering Division 
or Defense Analyses 




Ada Joint Program Office 
N. Dirk Rogers, Major, USAF 
Acting Director 
Department of Defense 
Washington DC 20301 







DECLARATION OF CONFORMANCE 




Ik 


Customer; v^erdix Corporation 

Ada Validation FaciUty: ASD/SCEL. VVriglit-Patterson AFB OH 45433-6503 


ACV(.'Version: 1.11 

.\da Iinpleinentatioii; 

Compiler Name and Version: 

Host Computer System: 

Target Comjiuter System: 


\ADS Windows NT/4S6. Version 6.2 
VAda 110-36315 

Compudyne 4S6 
(under Windows NT 3.1) 

Same as Host 


Customer’s Declaration 


I. the undersigned, repre.senting \'erdix Corporation, declare that \erdi.x Corporation ha,s no 
knowleilge of deliberate deviations from the .Ada Language Standard ,\NSI/MlL-STD-lf<15A 
in the implementation listed in this declaration. I declare that Verdix Coriioration is the owner 
of the above implementation and the certificates shall be awarded in the name of the owner s 
corporate name. 



Kobert S. Wilbourn. Director of Engineering 
\erdix Corporation 
10 Pasteur Street 
Irvine. CA 92718 


Date: ~ ^ 






V 


TABLE OF CONTENTS 


CHAPTER 1 INTRCXJUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 ■ DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2 1 

2.3 TEST MCX5IFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING EN'.^RONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


i 














•V 




OiAPTER 1 
INTRODUCTION 


The Ada inpleinentation described above was tested according to the Ada 
Validation Procedures [Pro92] against the Ada Standard tAda83] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Sxiinmary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
2 uiy technical terms used in this report, the reader is referred to (Pro92]. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The resxilts of this validation apply only 
to the computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conf>lete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vhich performed this validation or to; 

Ada Validation Organization 

Ccmputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRtXWCTION 


1.2 REFERENCES 

[Ada83] Reference Maniial for the Ada Proqranminq Language, 

ANSI/MIL-SH>-1815A, February 1983 and ISO 8652-1987. 

(Pro92] Ada CCTopiler Validation Procedures , Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Coiq}liance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vhich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to pro^ce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vhen they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting ccmpilation listing is examined to verify that all violations of 
the Ada Stan^rd are detected. Some of the class B tests contain legal Ada 
code vdiich must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for example, the largest integer. A list 
of the values used for this inplementation is provided in Appendix A. in 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 





iNTimjcTiaq 




For each Ada inf)leinentation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [OG89]). 

In order to pass an ACVC an Ada iiqilementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
tremsformation of Ada progreuns into executable form and 
execution thereof. 

Ada Conpiler The means for testing conpliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide amd the teiqplate for the validation summary 

(ACVC) report. 

Ada An Ada coitpiler with its host computer system and its 

Inplementation target conpjter system. 

Ada Joint The part of the certification body vdiich provides policy and 

Program guidimce for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body vdiich carries out the 

Validation procedures required to establish the coit^liance of an Ada 
Facility (AVF) in?)lementation. 

Ada The part of the certification body that provides technical 

Validation guideuice for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Inplementation 

Conpjter A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that cem execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 








INTRaXJCTiai 


Conformity 


Customer 


Declaration of 
Conformeuice 


Host Computer 
System 

Inapplicable 

test 

ISO 

LEM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Conpiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an agreement 
with an AVF vrtiich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for which 
validation status is realized. 

A conputer system vdiere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada inplementation. 

International Organization for Standardization. 

The Ada standard, or Lemguage Reference Manual, published as 
ANSI/MIL-S1T)-1815A-1983 and ISO 8652-198/. Citations from the 
LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/otitput control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The conpiler of a validated Ada inplementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration [Pro92]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming lemguage and of issuing a certificate for 
this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming leuiguage. 


1-4 






CHAPTER 2 

IMPLEMENTATIGN DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Itie following tests have been wlthdravm by the AVO. The rationale for 
withdrawing each test is available frcan either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C355C70 

C35507P 

C3b508l 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C8304IA 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB700LA 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4C24D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE360’:C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






2.2 INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Comoentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLENElflATION DEPEM)ENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX DIGITS; 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


Hie following 20 tests check for the predefined type L0NG_INTEGE3^; for 
this infilementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

C3)7101F 


C35713C, B86001U, and C86006G c*'eck for the predefined type LONGFLQAT; 

for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MAOlINEjOVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINEjCfVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type IXJRATION; for this inpleroentation, the ranges are the 
same. 


CD1009C checks vdiether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 






IMPLEMENTATION DEPEM)ENCIES 


CD2A84A, cr2A84E, a)2AB4l..J (2 tests), euid CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation does 
not support such sizes. 

■^e tests listed in the following table check that USE ERROR is raised 
if the given file operations are not supported for the given combination 
of mode and access method; this implementation supports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAI. 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOOT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOOT FILE 

DIRECT 10 

CE2102S 

RESET 

INOOT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct fii-j is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LEIK?rH and SET PAGE_LENGTH raise USE_ERROR 
if they specify an inappropriate value for the external file; thele are 
no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds CCXJNT'LAST; for this inplementation, the value of 
COUNT'LAST is greater them 150000, making the checking of this objective 
impractical. 


2-3 






IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
inqplementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVO. The conpiler rejects the use of the range FLOAT'FIRST. .FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 


CD1009A, CD1009I, CD1C03A, CD2A24A and CD2A31A..C (3 Tests) were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LE2QGTH_CHECK, v^ich uses 
unchecked Conversion according to the interpretation given in AI-00590. The 
AVO rule3 that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have the 
general form; 

” * CHECK ON REPRESENTATION EX)R <TYPE ID> FAILED. ” 


AD9001B was graded passed by Test Modification as directed by the AVO. This 
te~t checks that no bodies are required for interfaced subprograms; among the 
procedures that is used is one with a parameter of mode CUT (line 36). This 
implementation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by commenting out line 36 and 
40; the modified test was passed. 


2-4 












CHAPTER 3 

PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

Hie Ada infileinentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales Information about this Ada implementation, contact: 

Laurie J. Ogino 
Verdix Corporation 
10 Pasteur Street 
Irvine, CA 92718 
(714) 727-0700 


Testing of this Ada in^lementation vas conducted at the customer's site by a 
validation team frcxn the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, \4iether the test is a^^licable or inapplicable; otherwise, the Ada 
In^lementation fails the ACVC [Pro92]. 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the nianber of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests p>assed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 









PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3796 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (C4d-fe) 


g) Total Number of Tests for ACVC 1.11 4170 (a-t-bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sim Workstation an copied over Ethernet to 
the host machine. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada isqplementation. 

Testing was performed using ccxnmand scripts provided by the custooer and 
review^ the validation team. See ^pendix B for a ccxnplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w (warnings) Suppress warning diagnostics. 


Test output, coKfiiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 







•V 




APPENDIX A 
MACRO PARAMETERS 


nils appendix contains the macro parameters used for customizing the ACVC. 
Hie meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vhich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, vhere "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

199 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> '1') 

$B1G_ID2 

(1..V-1 -> 'A% V -> '2' ) 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & M' & 
(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STR1NG1 

& (1..V/2 -> 'A') & 

$BIG_S'miNG2 

& (1..V-1-V/2 -> 'A') & 

$BLANKS 

(1..V-20 ) 


$MAX_LEN_INT_BASED_LITERAL 

"2;" & (1..V-5 -> '0') & "11;" 

$MAX_LE1J_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E;" 


A-1 




N^CRO PARAMETERS 


$MAX_STRING_L1TERAL & (1..V-2 -> 'A') & 

Ihe following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGNMEm' 4 

$CXX]NT_LAST 2147483647 

$DEFAULT_MEM_SIZE 16777216 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME WINNT386_SELF 

$DELTA_DOC 2.0**(-31) 

$ENTRY_ADDRESS S^TEM."+"(16#40#) 

$ENrRY_ADDRESSl SYSTEM."+"(16#80#) 

$ENTRY_AM)RESS2 system."+"(16#100#) 

$FIELD_LAST 2147483647 

$FILE_TERMINAT0R » ' 

$FIXED_NAME N0_SUC3i_TYPE 

$FLQAT_NAME NO_SUC3J_TYPE 

$FC3RM_STRING "" 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER_TOAN_DURATION 

lOOOOO.O 

$GREATER_'niAN_DURATION BASE LAST 

TOOOOUOO.O 

$GREATER_THAN_FLQAT BASE LAST 

I.FE+308 

$GREATER THAN FLOAT SAFE LARGE 

“ 5.7E307 


A-2 





MACRO PARAMETIERS 


$GREATER THAN SHORT FLGAT SAFE LARGE 
“ ~ “ 9.0E37 “ 

$HICa!_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/NC»IRECTORY/FILQIAMEl 

$ILLBGAL_EXTERNAL_FILE_NAME2 

/T«»IRECTORY/FILENAME2 

$INAPFROPRIATE LINE LENGTH 

~ -1 

$INAPPR0PR1ATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ( "A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1.TST") 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATICN -100000.0 

$LESS THAN DURATION BASE FIRST 

-lUOOOOOO.O 

$LINE_TERMINATOR ASCII.CR & ASCII.LF 

$L0W_PRIORITY 0 

$MACHINE_COTE_STATEMENT 

CCOE_0'(OP -> NOP); 

$MACHINE_CC»E_TYPE CX»E_0 

$HANTISSA_OOC 31 

$MAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_1 2147483648 

$MIN_INT -2147483648 

$NAME TINY_INTBGER 

A-3 










M^CRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATIONl 

$riAME_SPECIFICAT10N2 

$NAME_SPECIFICATION3 

$NBG_BASED_INT 

$NEW_MEM_SI2E 

$NEW_STOR_UNIT 

$NEM_SYS_NAME 

$PAGE_TERMINATOR 

$REC0RD_DEFINIT10N 

$RECX)RD_NftME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VAR1ABLE_ADDRESS 

$VARIABLE_A0DRESS1 

$VARIABLE_ADDRESS2 

$YOUR_PRAGMA 


WINNT386_SELF 

Q:\vads\acvctestVt2120A 

Q:\vads\acvctest\X2120B 

Q:\vads\acvctestVC3119A 

16#FOOOOOOE# 

16777216 

8 

WINNT386_SELF 

ASCII. CR & ASCII. LF & ASCII. FF 
RECORD SUSP: OPERAND; END RECORD; 
CODE_0 
32 

2048 

0.01 

VAR_1'ADDRESS 
VAR_2'AM>RESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 






APPEIjDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada In^lementation, as described in this 
^[^ndix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 

Syntax 

ada [options 1 (source_file]... [object_file.o]... 

Arguments 

object_file.o non-Ada object file names. These files will be passed 
on to the linker and will be linked with the specified 
Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
confiiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "file_name.das" 
s Disassemble the unit spec. 

-a file name 

(arBiive) Treat file_name as an object archive file created 
by ar. Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARCompiler Ada only) 

(static) If static is indicated, the Ada program is coopiled 
and linked statically. The default is dynamic. 


B-1 





COMPILATION SYSTEM OPTIONS 


-c suppress the control messages generated v^en pragma PAGE 
and/or pragma LIST are encoxmtered. 

-D identifier type value 

(define) Define an identifier of a specified type and value. 

-d (dep>endencies) Analyze for dep>endencies only. Do not do 
semantic analysis or code generation. Ipdate the library, 
marking any defined units as unccmpiled. The -d option is 
used by a.make to establish dependencies among new files. 
This option will attenpt to do inports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce \iser disk sp}ace usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process compilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated ^ error_file. Note that there is 
no space between the -Ef and error_file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file euid call the environment editor 
ERROR EDITOR. If ERROR_EDITOR is defined, the environment 
variaHle ERROR_PATTERN should also be defined. ERROR_PATTERN 
is an editor search command that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 



CXMPIIATION SYSTEM OPTIONS 


Hie value of the environment variable ERRORJIABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 
trinaned so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or conpilation information). The trinming 
generally removes initial values of variables and all 
statements. 

-G (GVAS) Display suggested values for the MIN_GVAS_ADDR 
and MAX_GVAS_ADDR INFO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
^ the conpiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L library_name 

(library) Operate in VADS library library_name. 

[Default: current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 
(No space between the -1 and the file abbreviation.) 

-M unit name 

(main) Produce an executable program by linking the named 
unit as the main program. unit_name must alrea^ be 
conpiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out unless overridden 
with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking source file. The main unit of the program is 
assumed to be Bie root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be named a.out unless overridden 
with the -o option. 

-N (no code sharing) Conpile all generic instantiations 
without sharing code for their bodies. This option 
overrides the SHARE_BODY INFO directive and the SHARE_CODE 
or SHARE_BODY pragmas. 

-0(0-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-3 







CX^MPILATION SYSTEM OPTIONS 


-O full optimization 

-OO no optimization (use for debugging) 

-01 copy propagation, constant folding, removing 
dead variables, subsxmiing moves between scalar 
variables 

-02 add conmon subexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction and add hoisting expressions ccxnmon to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant perfornmnce gains so 
it can be suppressed. 

-o executable file 

(output) %is option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(recompile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in which the 
recoRf)ilation Ts to occur, if it is not specified, the 
reconpilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVASJEABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without recompiling all the files in the library. 

-S (suppress) A{^ly pragma SUPPRESS to the entire compilation 
for all si^ressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the coitpilation. 

-V (verbose) Print compiler version number, date and time of 
compilation, name of file compiled, command input line, 
total compilation time and error summary line. Storage usage 
information abomt the object file is projvided. 


B-4 






COMPILATION SYSTEM OPTIONS 


-w (warnings) Sufqpress warning diagnostics. 
source_£ile name o£ the source £ile to be compiled. 

Description 

The ada conanand executes the Ada conpiler and compiles the named Ada 
source £ile. The £ile must reside in a VADS library directory. Ihe 
ada.lib £ile in this directory is modi£ied a£ter each Ada unit is 
compiled. 

By de£ault, ada produces only object and net £iles. l£ the -N option 
is used, the compiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object £iles compatible with 
the host linker in VOX £onnat. Ihe VOX £ormat is discussed in 
Appendix A o£ the Programner's Guide. 

NOn-Ada object £iles (.o £iles produced by a compiler £or another 
language) may be given as arguments to ada. Ihese £iles will be passed 
on to the linker zuid will be linked with the speci£ied Ada object files. 

Cotmnand line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS compilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin on a system 
will execute the correct compiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the components actually executed. 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name frcxm different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second ccmpilation will 
overwrite the first. For example, the compilation of 
/\isr/directory2/foo.a -L /hsr/Vads/test will overwrite the 
compilation of /hsr/directoryl/foo.a -L /usr/vads/test in the 
VADS library /\isrAads/test. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 


B-5 







CX»IPILATIC»I SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in ^is ;^pendix, 
are provided fay the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation euid not to this 
report. 

Syntax 

a.Id [options] unit_name [linker_options] 

Arguments 

linker_options 

All arguments after unit_name are passed to the linker, 
library eJabreviations or object files. 

options options to the a.Id command. These are: 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects czuinot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each j^se of the prelinking process 
takes. (VADSself only) 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the neuned 
units. (VADSself only) 

-Dx (dependencies) Displays the elaboration dependencies used each 

time a unit is arbitrarily chosen for elaboration. (VADSself only) 

-DX (debug) Debug memory overflow (use in cases where linking 
a large number of units causes the error message "local 
symbol overflow" to occur). (VADSself only) 

-E unit name 

(elaborate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present when many object 
files are being linked. (SGI only) 

-L library_naffle 

(library) Collect information for linking in library_name instead 





CX3MPILATI0N SYSTEM OPTIOIS 


of the current directory. However, place the executable in the 
current directory. 

-o executable_file 

(output) Use the specified fielna.De as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
suppress linking, 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker coimand but suppress execution. 

-w (warnings) Suppress warning messages. 
unit_naroe 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit_name a main 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada con^^iler to check dependency information, a.Id produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WITHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WITHn 
directives may be placed into a library but they must be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl;LINK:obj ect_file; 

WITH2:LINK:archive file: 


B-7 







COMPILATION SYSTEM OPTIONS 


WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to cheuige or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computer Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals and dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-Explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 


B-8 






APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of ^>pendix F, are: 


package STANDARD is 


type TINy_INTEGER is range -128 .. 127; 
type SHORT_INTEGER is range -32768 .. 32767; 
type INTEGER is range -2147483648 .. 2147483647; 

type SHORT_FLQAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type FLOAT is 

digits 15 range -1.79769313486232E+308 .. 1.79769313486232E+308; 
type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 










1 Implementation-Dependent Pragmas 

• INLINE.ONLV Pragma 

The INLINE-ONL^' pragma, when used in the same way as pragma INLINE, 
indicates to the compiler that the suijprogram must always Ije inlined. This 
pragma also suppresses the generation of a callable version of the routine which 
saves code space. If a user erroneously makes an INLINE-ONL\' subprogram 
recursive a warning message will be emitted and an PROGRAM-ERROR will 
be raised at run time. 

• BUILT-IN Pragma 

The BUILT-IN pragma is used in the implementation of some predefined Ada 
packages, but provides no user access. It is used only to implement code 
bodies for which no actual Ada bodv can be provided, for e.xample the MA- 
GHINE-CODE package. 

• SHARE-CODE Pragma 

The SHARE-CODE pragma takes the name of a generic instantiation or a 
generic unit as the first argument and one of the identifiers TRUE or F.4LSE 
as the second argument. This pragma is only allowed inunedialely at (he place 
of a declarative item in a <.leclarative part or package specification, or after a 
library unit in a compilation, but before any subsec)uent com])ilation unit. 

When the first argument is a generic unit the pragma applies to all instantiations 
of that generic. VVlieu the first argument is the name of a generic instantiation 
the pragma applies only to the specified instantiation, or overloaded instantia¬ 
tions. 

If the second argument is TRUE the compiler will try to share code generated 
for a generic instantiation with code generated for other instantiations of the 
same generic. When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to which code is sihared 
between instantiations depends on this pragma and the kind of generic formal 
parameters declared for the generic unit. 

The name pragma .SHARE-BODY is also recognized by the implepiental ion 
and has the same effect as SHARE-CODE. It is included for coinpatability 
with earlier versions of V'ADS. 

• .NO-IMAGE Pragma 

The pragma suppresses the generation of the image array used for the IMAGE 
attribute of enumeration ty|)es. This eliminates the overhead re(|uired to store 
the array in the executable image. .An attempt to use the IMAGE attribute 
on a type whose image array has l)een suppressed will result in a compilation 
warning and PROGRAM-ERROR raisetl at run time. 

• EXTERNAL-NAME Pragma 

The EXTERNAL.NAME pragma lakes the name of a subprogram or variable 
defined in Ada and allows the user to specify a different external name that may 








be used to reference the entity from other languages. The pragma is allowed at 
the place of a declarative item in a package specification and must apply to an 
object declared earlier in the same package specification. 

• INTERFACEJ^AME Pragma 

The INTERFACE-NAME pragma takes the name of a a variable or subprogram 
defined in another language and allows it to be referenced directly in Ada. The 
pragma will replace all occurrences of the variable or subprogram name with 
an external reference to the second, link-argument. The pragma is allowed at 
the place of a declarative item in a package specification and must apply to an 
object or subprogram declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The object cannot be 
any of the following; 

- a loop variahle. 

- a constant. 

- an initialized variable. 

- an array, or 

- a record. 

• IMPLR'IT.CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma 
is only allowed within a machine code procedure. It specifies that implicit code 
generated by the compiler be allowed or disallowed. A warning is issuetl if OFF 
is used and any implicit code needs to be generated. The default is ON. 

• OPTIMIZE-CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma 
is only allowed within a machine code procetlure. It specifies whether the corle 
should be optimized by the compiler. The default is ON. When OFF is specified, 
the compiler will generate the code as specified. 

2 Implementation of Predefined Pragmas 

• CONTROLLED 

This |)ragma is recognized i)y the implementation but has no effect. 

• ELABORATE 

This ])ragma is implemented as described in Appendix B of the Ada RM. 

• INLINE 

This pragma is implemented as described in .\ppendix B of the Ada RM. 






INTERFACE 


This pragma supports calls to ‘C’ anti FORTRAN functions. The Ada sub¬ 
programs can be either functions or procedures. The types of parameters and 
the result type for functions must be scalar, access or the predefined type AD¬ 
DRESS in SYSTEM. All parameters must have mode IN. Record and array 
objects can be passed by reference using the ADDRESS attribute. 

LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 
MEMORY JiilZE 

This pragma is recognized by the implementation. The implementation does 
not allow SYSTEM to l)e modified by means of pragmas, the SYSTEM package 
must be recompiled. 

NON.REENTRANT 

This pragma takes one argument which can be the name of either a library 
subprogram or a subprogram declared inunediately within a lil)rary package 
spec or Ijody. It indicates to the compiler that the subprogram will not be 
called recursively allowing the compiler to perform specific optimizations. The 
pragma can l)e applied to a subprogram or a set of overloaded subprograsm 
within a i)ackage spec or package body. 

NOT.ELABORATED 

This pragma can only appear in a library package specification. It indicates 
that the package will not be elaborated because it is either part of the RTS. 
a configuration package or an Ada package that is referencetl from a language 
other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is rec|uired. 

OPTIMIZE 

This pragma is recognized by the implementation but has no elTect. 

PACK 

This pragma will cause the compiler to choose a non-aligned representation for 
composite types. It will not causes objects to be packed at the bit level. 

PACE 

This i)ragma is implemented as described in Appendix B of the Ada RM. 
PASSIVE 

The pragma has three forms : 


- PRAGMA PASSIVE: 

- PRAGMA PASSIVE(SEMAPHORE); 

- PRAGMA PASSIVE!INTERRUPT, number): 






This pragma Pragma passive can be applied to a task or task type declared 
immediately within a library package spec or body. The pragma directs the 
compiler to optimize certain tasking operations. It is possible that the state¬ 
ments in a task body will prevent the intended optimization, in these ca.ses a 
warning will be generated at compile time and will raise TASKING_ERROR at 
runtime. 

• PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

• SHARED 

This pragma is recognized by the implementation l)Ut has no effect. 

• STORAGE-UNIT 

This pragma is recognized by the implementation. The implementation does 
not allow S\’STEM to be modified by means of pragmas, the SY STEM package 
must be recompiled. 

• SUPPRESS 

This pragma is implemented as described, except that DIVISION-CHECK and 
in some cases OVERFLOW-CHECK cannot be supressed. 

• SYSTEM-NAME 

This pragma is recognized by the implementation. The implementation does 
not allow SYSTEM to be modified by means of pragmas, the S^’STEM package 
must be recompiled. 


3 Implementation-Dependent Attributes 

• P'REF 

For a prefix that denotes an object, a program unit, a label, or an entry: 

This attribute denotes the effective address of the first of the storage units 
allocated to P. For a subprogram, package, task unit, or label, it refers to 
the adc!.ess of the machine code associated with the corresponding body or 
statement. For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt. The attribute is of the type OPERAND 
defined in the package MACHINE-CODE. The attribute is only allowed within 
a machine code jnocedure. 

.See section F.4.8 for more information on the use of this attribute. 

(For a package, ta.sk ui’.it. or entry, the 'REF attribute is not supported.) 

• TTASKID 

For a ta.sk object or a value T. T’TASK-ID yields the unic|ue task id associatetl 
with a ta.sk. The value of this attribute is of the t vpe ADDRES.S in the package 
SYSTEM. 






% 


4 Specification Of Package SYSTEM 

— Copyright 1987, 1988, 1989 Vordix Corporation 

” Preserve line numbers as they are reported in ACVC tests. 

with unsigned.types; 
packaige SYSTEM is 

pragma suppress(ALL.CHECKS); 
pragma suppress(EXCEPTION.TABLES); 
pragma not.elaborated; 

type NAME is ( WINNT386_SELF ); 

SYSTEM.NAME : constant NAME ;» WINNT386_SELF; 

STORAGE_UNIT ; constant := 8; 

MEMORY.SIZE : constant ;« 16_777_216: 

— System-Dependent Named Numbers 

MIN.INT : constant -2_147_483_648; 

MAX.INT : constant ;» 2_147.483.647; 

MAX.DIGITS : constant :* 15; 

MAX.MANTISSA ; constant :• 31; 

FINE.DELTA : constant :* 2.0**(-31); 

TICK : constant :■ 0.01; 

— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 

MAX.REC.SIZE : integer 64*1024; 


t3rpe ADDRESS is private; 


function 

ll^ll 

(A: 

ADDRESS; 

B: ADDRESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS; 

B; ADDRESS) 

return 

BOOLEAN 

function 

'*>«** 

(A: 

ADDRESS; 

B: ADDRESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS; 

B: ADDRESS) 

return 

BOOLEAN 

function 

ff.M 

(A: 

ADDRESS; 

B: ADDRESS) 

return 

INTEGER 

function 

M^ll 

(A: 

ADDRESS; 

I: INTEGER) 

return 

ADDRESS 

function 


(A: 

ADDRESS; 

I: INTEGER) 

return 

ADDRESS 


function (I; UNSIGNED.TYPES.UNSIGNED.INTEGER) return ADDRESS; 


function MEMORY.ADDRESS 







(I: UNSIGNED.TYPES.UNSIGNED.INTEGER) return ADDRESS renames 

NO.ADDR : constant ADDRESS; 

tjrpe TASK.ID is private; 

NO.TASK.ID : constant TASK.ID; 

subtype SIG.STATUS.T is INTEGER; 

SIG.STATUS.SIZE: constant :■ 4; 

type PROGRAM.ID is private; 

NO.PROGRAM.ID : constant PROGRAM.ID; 

t 3 ^e LONG.ADDRESS is private; 

NO.LONG.ADDR ; constant LONG.ADDRESS; 

function "+" (A: LONG.ADDRESS; I: INTEGER) return LONG.ADDRESS; 
function (A: LONG.ADDRESS; I: INTEGER) return LONG.ADDRESS; 

function MAKE.LONG.ADDRESS (A: ADDRESS) return LONG.ADDRESS; 

function LOCALIZE(A: LONG.ADDRESS ; BYTE.SIZE : INTEGER) return ADDRESS; 

function STATION.OF(A: LONG.ADDRESS) return INTEGER; 

private 

type ADDRESS is new UNSIGNED.TYPES.UNSIGNED.INTEGER; 

NO.ADDR : constant ADDRESS :■ 0; 

pragma BUILT.IN(">''); 
pragma BUILT.IN("<"); 
pragma BUILT.IN(">-"); 
pragma BUILT.IN("<»''); 
pragma BUILT.INC'-"); 
pragma BUILT. IN ("+’’) ; 

type TASK.ID is new UNSIGNED.TYPES.UNSIGNED.INTEGER; 

NO.TASK.ID : constant TASK.ID 0; 

type PROGRAM.ID is new UNSIGNED.TYPES.UNSIGNED.INTEGER; 

NO.PROGRAM.ID ; constant PROGRAM.ID 0; 


type LONG.ADDRESS is new UNSIGNED.TYPES.UNSIGNED.INTEGER; 







NO.LONG.ADDR ; constant LONG_ADDRESS ;» 0; 


pragma BUILT_IN(MAKE_LONG_ADDRESS); 
pragma BUILT.IN(LOCALIZE); 
pragma BUILT.IN(STATION.DF) ; 

end SYSTEM; 


5 Restrictions On Representation Clauses 

• Pragma PACK 

In t he absence of pragma PACK record components are padded so as to provide 
for efficient access by the target hardware, pragma PACK applied to a record 
eliminate the padding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representation is retiuired. 

• Size Clauses 

For scalar types a representation clause will pack to the number of bits re(|uired 
to represent the range of the subtype. A size clause applied to a record type will 
not cause packing of components: an explicit record representation clause must 
be given to specify the packing of the components. A size clause applied to a 
record type will cause packing of components only when the component lype is 
a discrete type. .\n error will be issued if there is insufficient space allocatetl. 
The SIZE attribute is not supported for task, access, or floating point types. 

• Address Clauses 

Address clauses are only supported for variables. Since default initialization 
of a variable re<|uires evaluation of the variable address elaboration ordering 
requirements prohibit inititalization of a varial>les which have address clauses. 
The specified address indicates the physical address as.sociated with t he variable. 

• Interrupts 

Interrupt entries are supported with the following interpretation and restric¬ 
tions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries must always be 
trying to accept each interrupt entry, unless it is handling the interrupt. The 
task must be executing either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alternative is open as defined 
by Ada RM y.7.1(4). This is not a restriction on normal tasks (i.e.. signal ISRs). 

■An interrupt acts as a conditional entry call in that interrupts are not (|ueued 
(see the last sentence of Ada RM 13..'5.1('2) and 13.5.1(G)). 




No acldiiional requirements are imposed for a select statement containing both 
a terminate alternative and an accejjt alternative for an interrupt entry (see 
Ada RM 13.5.1(3)). 

Direct calls to an iiitprru|;t entry from another task are allowed and are treated 
as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify the priority of the 
interrupt. It simply specifies the interrupt vector number. For jjassive ISRs. 
the nnn of the passive!interrupt.nnn) pragma specifies the interruijt priority of 
the task. 

Representation Attributes 

The ADDRESS attribute is not supported for the following entities; 

— Packages 

— Tasks 

— Labels 

— Entries 

Machine ('ode Insertions 

Machine code insertions are supported. 

The general tlefiiiition of the package MAC'HINE.C.'ODE provides an assembly 
language interlace for the target machine. It provides the necessary record 
type(s) needed in the code statement, an enumeration type of all the opcode 
mneumonics. a set of register definitions, and a set of addressing mode functions. 

The general synta.x ot a machine code statement is as follows: 

— ('ODE_n'( opcodf. opr rand [. opfiand] ): 

where n indicates the number of operands in the aggregate. 

A special ca.se arises for a variable numljer of operands. The operands are listed 
within a subaggregate. The format is as follows: 

— CODE_»'( opcode, {operand [. operaix!]) ); 

For those opcodes that re(|uire no operands, named notation must l)e used (cf. 
RM 4.3(4)). 

— CODE-O ( op ■> opcode ): 

The opcode must be an enumeration literal (i.e. it cannot l)e an oI),iect. at tribute, 
or a rename). 

.An operand can only be an entity defined in .MA('HINE.CODE or the ‘REF 
attribute. 







The arguments to any of the functions defined in MACHINE.CODE must he 
static expressions, string literals, or the functions defined in MACHINE-CODE. 
The ’REF attriljute may not be used a.s an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 


6 Conventions for Implementation-generated 
Names 


There are no implementation-generated names. 


7 Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as physical addresses. 


8 Restrictions on Unchecked Conversions 

.None. 


9 Restrictions on Unchecked Deallocations 

None. 

10 Implementation Characteristics of 1/ O Pack¬ 
ages 

Instantiations of DIRECT.IO use the value MAX.REC.SIZE as the record size 
(expressed in STORAGE-UNITS) when the size of ELEMENT-TYPE e.xceerls 
that value. For example for unconstrained arrays such a.s string where ELE- 
MENT-TVPE’SIZE is very large. MAX.REC-SIZE is used instead. MAX-RECORD-SIZE 
is defined in SY STEM and can be changed l)y a program before iiistantialitig 
DIRECT-IO to provide an upper limit on the record size. In any ca.se the max¬ 
imum size supported is 1024 x 1024 x STORAGE-UNIT Ints. DIHECT-IO will 
raise USE-ERROR if MAX-REC-SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL.IO use the value M A.X-REC-SIZE as t lie record 
size (expressed in STORAGE-UNITS) when the size of ELEMENT.T't’PE ex¬ 
ceeds that value. For example for unconstrained arrays such as string where EL- 
EMENT-TVPE SIZE is very large. MAX-REC-SIZE is used instead. MAX-RECORD.SIZE 
is define<l in SYSTEM and can be changed l>y a program before instantiating 
INTEGER.IO to provide an upper limit on the record size. SEQUENTIAL-IO 
imposes no limit on MAX-REC-SIZE. 






11 Implementation Limits 


Tlip following limits are artnally enforred i>v the implomentation. It is not 
intended to imply that resources up to or even near these limits are availal)le 
to every program. 

- Line Length 

The implementation supports a maximum line length of 200 characters 
including the end of line character. 

- Record and Array Sizes 

The maximum size of a statically sized array type is 4,000.000 x STOR¬ 
AGE-UNITS. The maximum size of a statically sized record tyjje is 4,000,000 
X STORAGE-UNITS. A record type or array type declaration that exceeds 
these limits will generate a warning message. 

- Default Stack Size for Tasks 

h the absence of an explicit STORAGE-SIZE length specification every 
except the main program is allocated a fixed size stack of 10.240 
STORAGE-UNITS. This is the value returned by T‘STORAGE-SIZE for 
a task type T. 

- Default Collection Size 

In the absence of an e.xplicit STORAGE.SIZE length attribute the default 
collection size for an access type is 100 times the size of the designated 
type. This is the value returned bv T'STORAGE-SIZE for an access tvpe 
T. 

- Limit on Declared Objects 

There is an absolute limit of 6.000.000 x STORAGE-UNITS for objects 
declared statically within a compilation unit. If this value is exceeded the 
compiler will terminate the compilation of the unit with a FATAL error 
message. 




