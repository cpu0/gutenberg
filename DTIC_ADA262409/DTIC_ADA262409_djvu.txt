AD-A262 409 

IMIfiiiiBIIIIIEl' 




ISHSIMfiin 


ENTATfCNPAGE 


Form Apfxoved 
OFMNo. 


T V tr.nu T v>oc )•. 


d to ovorao* 1 hour por rooponM. irtcludirtg tho timo lor roviowing ir.ttruc:tion»« M«rehir>o •aitl)r>o data aourca* gathar 
ilormatiort. Sand oommanta raga/dmg thia bufdan aatimala or any othar aapad oi thia ooliactton ot iniormatton. irtdudi 
i Sofviea. Oiradorala lor Informi^ion Oparationa and Raporla. 121S Jatlaraor> Oavia Highway. Su(ta 1204, Ari.ogton, V 
a. Ottioa of Managamant and Budgat. Washington. DC 20503. 

ftePORT 3. REPORT TYPE AND DATES 

Final: 18 Dec 92 



8. PERFORMING 
ORGANIZATION 

lABG-VSR 114 


10. SPONSORING/MONITORING 
AGENCY 


4. TITLE AND 

Validation Summary Report: TeleSoft, TeleGen2 Ada Cross Development 
Systems, for Sun-4 to e68k. Version 4.1c, Sun-4/690 Workstation Host 
Motorola M\/ME 147S-1 (Target), 92121811.11304 


6. 

lABG-AVF 

Ottobrunn, Federal Republic of Germany 


. PERFORMING ORGANIZATION NAME(S) AND 

IABG-AVF, Industrieanlagen-Betriebsgeselschaft 
Dept. SZT/ Einsteinstrasse 20 
D-8012 Ottobrunn 

FEDERAL REPUBLIC OF GERMANY 


9. SPONSORINaMONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 5ft * 

Washington. D.C. 20301-3081 


11. SUPPLEMENTARY 


12a. DISTRIBUTION/AVAILABILITY 

Approved for public release; distribution unlimited 


13. (Maximum 200 

TeleSoft, TeleGen2 Ada Cross Development System, for Sun-4 to e68k. Version 4.1c, Sun-4/690 Workstation 
(Host) to Motorola MVME147S-1 (Target), ACVC 1.11. 



93 3 30 073 


93-06535 

_..A, M.I .in nil _ ^ 


14. SUBJECT 


15. NUMBER UF 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A. I 


17. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


18. FtCURITY 


UNCLASSIFED 


19 SECURITY 
CLASSIFICATION 

UNCLASSIFIED 




20. LIMITATION OF 


Starxlard Form 298, (Rev. 2^9) 
Prescribed by ANSI Std. 














AVF Control Number: IA3G-VSR 114 
December 18, 1992 


Ada comp: XBR 

VALIDATION SUMMARY REPORT: 
Cartiflcata Nxunber: 92121811.11304 
TalaSoft 

Tala6an2™ Ada Cross Davalopmant System 
for Sun-4 to e681c. Version 4.1c 
Sun-4/690 Workstation Host 
Motorola MVKB147S-1 Target 
(68030/68882 bare machine) 


Reproduced From 
Best Available Copy 


me QUAin'Y niSPECTED 4 


Prepared By: 
lABG mbH, Abt. ITE 
Einsteinstr. 20 
W-8012 Ottobrunn 
Germany 







Certificate Information 


The following Ada implementation was tested and detenr.ined to pass ACVC 
1.11. Testing was completed on December 18, 1992. 


Cosqpiler Name and Version: TeleGenl™ Ada Cross Development System 

for Siin-4 to eSSlc, Version 4.1c 

Host Coo^uter System: Sun Microsystems Sun-4/690 

under SunOS Release 4.1.2 

Target Cos^uter System: Motorola MVMB147S-1 (68030/68882 

bare machine) 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
92121811.11304 is awarded to TeleSoft. This certificate 
expires 24 months after ANSI approval of ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 



lABG, Abt. ITE 
Michael Tonndorf 
Einsteinstr. 20 
W-8012 Ottobrunn 
Germany 






Declaration Of Conformance 


Customer: 

Certificate Awardee: 
Ada Validation Facility: 

ACVC Version: 


TeleSoft 

5959 Cornerstone Court West 
San Diego, CA USA 92121 

TeleSoft 

lABG, Dept. ITE 
W-8012 Ottobrunn 
Germany 

1.11 


Ada Implementation 

Ada Compiler Name and Version: TeleGen2'^ Ada Cross Development 

System for Sun-4 to e68k, 

Version 4.1c 

Host Computer System: Sun Microsystems Sun-4/690 

SunOS Release 4.1.2 

Target Computer System: Motorola MVME147S-1 

(68030/ 68882 bare machine) 


Declaration: 


] the undersigned, declare that I have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/M1L-STD-1815A, 
ISO 8652?i987, FIPS 119 as tested In this validation and documented 
in the V^datlon^Summary Report. 



Date: 




TefeSoft 
V. P., General Counsel 



TABLE OF CONTENTS 

CHAPTER 1 INTRODUCTION 


1.1 USE OP THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES. 1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS. 2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS ..2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS ..3-1 

3.3 TEST EXECUTION. 3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM AND LINKER OPTIONS 

4 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 






















CHAPTER 1 
INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures tPrc92] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro92]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. j 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (S U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report, i 

I 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: i 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


X 




INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro92] Ada Compiler Validation Procedures . Version 3.1, Ada Joint 
Program Office, August 1992. 


[UG89] 


pmoiler Validation Capability User's Guide . 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and 3PPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_PILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tes^s are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, emd execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values -- for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 




INTRODUCTION 


For each Ada implementation, a customired test suite is produced by the 
AVF. This customization consists of making the modifications described 
in the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 


Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 


Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 


Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 


Ada The part of the certification body which carries out the 
Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 


Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 


Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 


Computer 

System 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 




IT 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdravm 

test 


INTRODUCTION 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial 
or complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro92]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 







aiAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 


The following tests have 

been withdrawn by the AVO 

. The rationale for 

withdrawing each 

test is 

available from 

either the 

AVO or the 

AVF. The 

publication date 

for this 

list of withdrawn tests 

is 02 August 

1991. 

E2e005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B4I308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BDIBOCA 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE21071 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3B14A 

CE3902B 



2.2 INAPPLICABLE TESTS | 

A teat Is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada \ 
Commentaries and commonly referenced in the format Al-ddddd. For this\ 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 


IMPLEMEN’VATION DEPENDENCIES 


The following,201 tests have floating-point type declarations recpiiring more 
digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (11 tests) 


C35705L..Y 
C35707L..Y 
C35802L..Z 
C4S321L..Y 
C45521L..Z 
C45621I.. .Z 
C46012L..Z 


(14 tests) 
(14 tests) 
(15 tests) 
(14 tests) 
(15 tests) 
(15 tests) 
(15 tests) 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined 
integer type with a name other than INTEGER, LONG_INTEGER, or 
SHORT_INTEGER; for this implementation, there is no such type. 


C35713B, C45423B, B86001T, and C86006H checlc for the predefined 
type SHORT_FLOAT; for this implementation, there is no such type. 


C35713D and B86001Z chec)c for a predefined floating-point type with a name 
other than FLOAT, LONG_FLOAT, or SHORT_FLOAT; for this implementation, there 
is no such type. 

C45531M..P (4 tests) and C45532M..P (4 tests) chec)t fixed-point operations 
for types that require a SYSTEM.MAX_;'ANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 


C45624A. B (2 tests) chec)c that the proper exception is raised if 
MACHINE O.'ERFLOWS is FALSE for floating point types; for this 
implementation, MACHINE_0VERFL0W3 is TRUE. 

B86001Y chec)cs for a predefined fixed-point type other than DURATION; for 
this implementation, there is no "uch type. 

CA2009C and CA2009F checlc whether a generic unit can be instantiated before 
its body (and any of its subunits) is compiled; this implementation creates 
a dependence on generic units as allowed by AI-00408 and AI-00506 such that 
the compilation of the generic unit bodies makes the instantiating units 
obsolete. (Sec section 2.3.) 

CD1009C uses a representation clause specifying a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..cr (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types; this implementation 
does not support sucn si2es. 


2-2 



IMPLEMENTATION DEPENDENCIES 


The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given combinatioi. 
of mode and access method; this implementation supports these operations. 


Test 

File Ooeration 

Mode 

Pile Acc ”5 Method 

CE2102D 

CREATE 

IN FILE 

SFQUENi .AL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2j.02J 

CREATE 

OUT_FILE 

DIRECT 10 

CE2102N 

OPEN 

IN_FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN_FILE 

SEQUENTIAL 10 

CE2i02P 

OPEN 

OUT_FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT_FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RE,SET 

IN_FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT_FILE 

DIRECT 10 

CE2102W 

RESET 

0UT_FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE • 


TEXT 10 

CE31021 

CREATE 

OUT_FILE 

TEXT 10 

CE"* 102.7 

OPEN 

IN_FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


The following 16 tests check operations on sequential, direct, and text 
files when multiple internal files are associated with the same external 
file and one or more are open for writing; USE_ERROR is raised when this 
association is attempted. 

CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 

CE2111D CE2111H CE3H1B CE3111D. .E CE3114B 

CE311SA 

CE2203A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for SEQUENTIAL_IO. This implementation does 
not restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for DIRECT_IO. This implementation does not 
restrict file capacity. 

CE3304A checks that USE_1:RR0R is raised if a call to SET_LINE_LENGTH or 
SET_PAGE_LENGTH specifies a value that is inappropriate for the external 
file. This implementation does not have inappropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises LAYCIJT_ERRCR when the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 



2-3 






, ii ■ I W I Mm 






IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications {see section 1.3) were required for 23 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada .Standard in the way 
expected by the original tests. 

B71001Q BAIOOIA BA2001C BA2001E BA3006A 

BA300oB BA3007B BA3008A BAICOSB BA3013A 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that xinit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies ma)ces the compilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests chec)c that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint.! 
However, the generic bodies are compiled after the imits that contain the 
instantiations, and this implementation creates a depende-.-ce of the 
instantiating xinits on the generic units as allowed by AI-00408 and 
AI-00S06 such that the compilation of the generic bodies malces the 
instantia ing units obsolete--no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 

CD1009A, CD1009I, CD1C03A, CD2A21C, CD2A22J, CD2A24A, and CD2A31A..C (3 
tests) use instantiations of the support procedure Length_Chec)c, which pses 
Unchec)ted_Conversion according to the interpretation given in AI-00590.! The 
AVO ruled that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instantiations of Length_Chec)t--i.e., the allowed Report.Failed messages 
have the general form: | 


♦ CHECK ON REPRESENTATION FOR <TYPE ID> FAILED. 












CHAPTER 3 

PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For information about this Ada implementation system, see: 

TeleSoft 

5959 Cornerstone Court West 
San Diego, CA 92121, USA 
Tel: (619) 457-2700 


Testing of this Ada implementation was conducted at the customer’s site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC tPro92]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programm.ing Language Standard. 


3-1 



' ' IP--J 


’*SSSPS9^«»W 








iiaBaa 


PROCESSING INFORMATION 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point precision 
that exceeds the implementation's maximum precision (item e; see section 2.2), 
euid those that depend on the support of a file system -- if none is supported 
(item d). All tests passed, except those that are listed in sections 2.1 and 
2.2 (counted in items b and f, below). 


a) 

Total Number of Applicable Tests 

3803 


b) 

Total Number of Withdrawn Tests 

95 


c) 

Processed Inapplicable Tests 

71 


d) 

Non-Processed I/C Tests 

0 


e) 

Non-Processed Floating-Point 




Precision Tests 

201 


f) 

Total Number of Inapplicable Tests 

272 

(c+d+e) 

3) 

Total Number of Tests for ACVC 1.11 

4170 

(a+b+f) 


3.3 TEST EXECUTION 

A magnetic data cartridge with the customized test suite (see section 1.3) 
was ta)cen on-site by the validation team for processing. The contents of the 
data cartridge were loaded to the host computer using networ)ting facilities. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and lin)ced on the host computer. The executable 
images were transferred to the target con^uter system by a serial 
communications linJc, and run. The results were captured from the host 
computer system onto a magnetic data cartridge. 

Test output, compiler and linker listings, and job logs we’^e captured on a 
magnetic data cartridge and archived at the AVF. The lis^ ..igs examined on¬ 
site by the validation team were also archived. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during tnis test are given in the following section, which was supplied by 
the customer. ' 


















SUN^/e«8k EElEVALIDifflON 


AmCHMENTG 


Compiler Option Information 
B TESTS: 

ada -O D -L Ctest name> 


Option 

Description 


•da 

invoke Ada con^iiler 


-OD 

perform optimizations 


-L 

generate interspersed source-error listing 


<test_naffie> 

name of Ada source file to be compiled 



Non-B Non-FamUy TESTS: 

ada -O D -m <mam_unit> -a <options_file> <test_name> 


Option 

Description 

•da 

invoke Ada con^iler 

-OD 

perform optimizations 

•m 

produce executable code for <main_unit> 

<mam_unit> 

name of main Ada compilation unit 

HI 

specify linker options file 

<options_fiIe> 

name of linker options file 

<test_name> 

name of Ada source file to be compiled 


Non-B FamOy TESTS: 

ada-OD <test_name> 

aid-a <options_file > <mainjunit> 


Option 

Description 

•da 

invoke Ada con^iiler 

-OD 

perform optimizations 

< lest name> 

name of Ada source file to be compiled 

•Id 

invoke linker 

-* 

specify linker options file 

<options_file> 

name of linker options file 

<main unit> 

name of main Ada compilation unit 


U)EC92 


Page 20 








SUN-4/e68k FREVALID/JION 


ATIACHMENTG 


Compiler Option Infonnaticn continued 
LINK: 


aid-a <options_fiIe> <main_unit> 


Option 

Description 


aid 

invoke Linker 


-a 

gpecify linker options file 


< options file> 

name of linker options file 


<main unit> 

name of tnain Ada compilation unit 



U>EC92 


Page 21 








SUN-4/e68k PREVALm^tTION 


jlTlACHMENTG 


Optimization Level D: 

The optimizer switch ’-O D* turns on full optimization within the compiler. The 
following list is a set of optimizations performed: 

Removal of unnecessary ten^raries 

Efficient cat^iadon operations 

Null array con^uuison 

Optimized compatibility check 

Ii^roved record layout 

Variant record sizes in arrays 

Aggregate literal initialization for con^sites 

Out parameter transformations 

Initialization templates for special record variants 

Optimal basic block ordering 

Optimized usage of expression intermediates 

Direct utilization of scalar targets 

Calculate sizes in storage units 

Optimize overlap setting 

Parameter reordering 

Arithmetic strength reduction 

Optimized composite operations 

Case statement generation 

Object code emission 

Full use of addressing inodes 

Reach reduction 

Small coiiqxisite values 

Boolean expression reduction 

Optimal subprogram ordering 

Semi-open inlining 

Interprocedural analysis 

Subprogram inlining 

Collection optimization 

Value propagation 

Range analysis and substitution 

Check removal 

Test Pushing 

Control flow and unreachable code elimination 
Check test pushing 
Dead code elimination 
Constant folding 

Common subexpression recognition 
Register allocation ' 

Reach reduction 

Lifetime minimization 

Loop invariant code motion 

Strength reduction of loop induction variables 

Loop counter reduction 

Tail recursion elimination 


1DEC92 


Fhge22 





ph__147.opt 

Example options file for VME147 targets. 


Usage: This option file should be used when linking with 
the phantom sublibrary. Programs that are linked 
with this option file have a boot address as 
indicated below. The phantom load module must be 
downloaded to the target in addition to the 
program load module. This option file assumes use 
of a VME147 with at least l MB of memory when using 
the serial line dbtk/rcvr. 


Memory 

Location Size (bytes) 


1 Top of used memory (serial) 

1 Serial rcvr/dotk <Boot Addr> 
1 (size of unused) 

! (unused) 

1 (ram disk size » 64k) 

1 ENV RAM DISK AREA 
! ADA'MASTER SfACK SIZE 
! ADA“MASTER~STACK”LOCATION 

I ada”interrUpt stSck size 

1 ADA“INTERRUPT“STACK“LOCATION 
I ADA USER stack SIZE" 

1 ADA"USER"STACK"LOCATION 
I ADA"HEAP"SIZE " 

! ADA"HEAP"LOCATION 
1 

1 PHANTOM <Boot address> 

1 

1 <user application> 

1 ada$vector table 
I 

I VMEBUG 



Target MC68020 

! Note; MC68020 is OK for MC68020/30/40 - It instructs the linker to 
1 Use S3 32bit records. (When producing S-Record output). 

1 Reference the phantom OEM 

INPUT/OFM/PHANTOM PHANTOM 

1 Layout Memory 

1 Note: there is a subtle assumption that the first item to be 

? laced in the code section is the Vector Table. This area 
s referenced by the phantom to pick up values provided at 
1 bind and link time for the main application. 

LOCATE/CONTROL SECTION=CODE/AT»16#5000# 

LOCATE/CONTROL"SECTION=CONSTANT/AFTER=CODE 
LOCATE/CONTROL SECTION«DATA/AFTER=CONSTANT 
LOCATE/CONTROL"SECTION=UDATA/AFTER=DATA 
LOCATE/CONTROL"SECTION=MAP/AFTER=UDATA 


'\ 






















APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89], The 
parameter values are presented in two taUoles. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN--also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$N'AX_IN LEN 

200 -- Value of V 

$BIG_ID1 

(1..V-1 »> 'A', 

V «> '1') 

$BIG_ID2 

(1..V-1 -> 'A', 

V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') 
(1..V-l-V/2 

& '3' & 

■=> 'A') 

$BIG_ID4 

(1..V/2 'A') 

(1..V-l-V/2 

& '4' & 

-> 'A') 

$BIG_INT_LIT 

(1..V-3 »> '0') 

CD 

<X\ 

$BIG_REAL_LIT 

(1..V-5 => '0') 

& "690.0" 

$BIG_STRING1 

'& (1..V/2 => 

'A') & ' 

$BIG_STRING2 

'& (1..V-l-V/2 *> 'A') 

$BLANKS 

(1..V-20 «> ' ' ) 



$MAX_LEN_INT_BASED_LITERAL 

' "2:" fc (X..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (l.,V-7 »> '0') & "F.E:" 

$MAX_STRING_LITERAIi "CCCCCCC10CCCCCCCC20CCCCCCCC30CCCCCCCC40 
~ CCCCCCCC50CCCCCCCC60CCCCCCCC70CCCCCCCC80 

CCCCCCCC90CCCCCCC10 OCCCCCCCl10CCCCCCC12 0 
CCCCCCC13 OCCCCCCCl4 0CCCCCCC15 OCCCCCCCl6 0 
CCCCCCCl7OCCCCCCCl8 0CCCCCCC190CCCCCC199" 


A-1 



MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

$AL1GNMENT 

$COUNT_LAST 

$DEFAULT_MEM_SIZE 

$DEFAULT_STOR_UNIT 

$DEFAULT_SYS_NAME 

$DSLTA_DOC 

$ENTRY_ADDRESS 

$ENTRY_ADDRESS1 

$ENTRY_ADDRESS2 

$FIE1X)_LAST 

$FH.E_TERMINATOR 

$FIXED_NAME 

$FLOAT_NAME 

$FORM_STRING 

$F0RM_STRING2 

$GREATER_THAN_DURATION 


32 

4 

2_147_483_646 

2147483647 

8 

TELEGEN2 

2#1.0#E-31 

ENT_ADDRESS 

ENT_ADDRESS1 

ENT_ADDRESS2 

1000 
t i 

NO_SOCH_TYPE 

NO_SUCH_TYPE 

n It 

"CANNOT RESTRICT FILE CAPACITY 


11 


100 _ 000.0 

$GREATEk_THAN_DURATION_BASE_LAST 

131_073.0 

$greater_than_float_base_last 

3.40283E-«-38 

$greater_than_float_safe_ijirge 

4.25354E-f37 

$greater_than_short_float_safe_large 


0.0 


$HIGH_PRI0RITY 63 

$ILLEGAL_EXTERNAL_PILE_NAME1 

BADCHAR**/% 


A-2 






MACRO PARAMETERS 


$ 1LLEGAL_EXTER1^AL_FILE_NAME2 

/NONAME/DIRECTORY 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$1NAPPR0PRIATE_PAGE_LENGTH 

-1 


$ INCIiUDE_PRAGMAl 

$ INCLU'JE_PRAGMA2 

$1NTEGER_FIRST 

$1NTEGER_LAST 

$1NTEGER_LAST_PLUS_1 32768 

$INTERFACE_IiANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS_THAN_DURATION_BASE_FIRST 

-131 073.0 


PRAGMA INCLUDE ("A28006D1.ADA") 
PRAGMA INCLUDE ("B28006E1.ADA") 
-32768 
32767 


$LINE_TERMINATOR ' ' 

$LOW_PRIORITY 0 

$MACHINE CODE STATEMENT 

mci'(OP«>NOP); 


$MACHINE_CODE_TyPE 

Opcodes 

$MANTISSA_DOC 

31 

$MAX_DIGITS 

15 

$MAX_INT 

2147483647 

$MAX_INT_PLUS_1 

2_147_483_648 

$MIN_INT 

-2147483648 

$NAME 

NO_SUCH_TYPE_AVAILABLE 

$NAME_LIST 

TELEGEN2 

$NAME_SPECIFICATIONl 

/tmp/X2120A 

$NAME_SPECIFICATION2 

/tmp/X2120B 

$NAME_SPECIFICATION3 

/tmp/X3119A 

$NEG_BASED_INT 

16#FFFFFFFE# 

$NEW_MEM_SIZE 

2147483647 

$NEW_SYS_NAME 

TELEGEN2 


A-3 



MACRO PARAMETERS 


$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_AbDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRES S 2 


ASCII.FF , 

RECORD NULL; END RECORD; 
NO_SUCH_MACHINE_CODE_TT PE 
32 

2048 

0.01 

VAR_ADDRSSS 
VAR_ADDRESS1 
VAR ADDRESS2 


A-4 






APPENDIX B 


COMPILATION SYSTEM AND LINKER OPTIONS 


The compiler and linker options of this Ada implementation, as described in 
this Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and not to 
this report. 


B-1 



TELESOFT 


TeleGen2 Ada Development System 
for SPARC Systems to 
Embedded MC680X0 Targets 

Compiler Command Options 


OPT*2129N-V1.1(SPARC.68K) 28JAN93 
TeleGen2 Version 4.1.1 


Copyright 0 1993, TeleSofl. 
All rights reserved. 





Tele£oft is a registered trademark of TeleSoft. 

RISCA^™ and TeleGen2™ are trademarks of TeleSoft. 

SPARC* is a registered trademark of SPARC 

International, Inc. Products bearing SPARC trademarks are based on an 
architecture developed by Sun Miaosystems, Inc. 

UNIX* is a re^tered trademark of UNIX System Laboratories, Inc. 


RESTRICTED RIGHTS LEGEND 

Use, duplication, or disclosure by the Government is subject to restrictions as set forth in subparagraph 
(c) (1) (ii) of the rights in Technical Data and Computer Software clause at DEAR 2S2.227>70U, or 
FAR S2.^-14, ALT III and/or F.\R 5^.727-19 as set forth in the applicable Government Contract. 


TeleSoft 

5959 Cornerstone Court West 
San Diego, CA 92121-9819 
(619) 457-2700 
(Contractor) 




Table of Contents 


1.1 ada (Ada Compiler) 

1.2 aid (Ada Linker) .... 


2 

15 







aid (Ada Unkor) 


TolaGanS for SPARCx68K 




Compiler Command Options 


This document describes the options available for invoking the TeieGen2 compiler (via the 
ada command) and the TeleGen2 linker (via the dd command). 



OFT-2129N-Vl.l(SPARC.6SK) 28JAN93 


1 





5!^ffi'®l|JI»MWJ/.iiJ9U 








B1 








ada (Ada Compiler) 


TeieGen2 for SPARCx68K 


1.1. ada (Ada Compiler) 

The ada command invokes the TeleGen2 Ada Compiler. Unless you ^)ecify 
otherwise, the compiler’s front end, middle pass, and code generator are executed 
each time the compiler is invoked. You may, however, invoke the front end only, 
to check for ^tax and semantic errors. 

The ^tax of the ada command is shown bdow. 


ada [<option>...] <lnput> 


<optlon> One of the options available with the command. Compiler options 

fail into four categories. 

Library search -l(ibfile, -t(emplib 

Execution/output Enable debugging: -d(ebug 

Abort after errors: -E(iTor_abort 

Run front end only: '^rrors_only 

Suppress checks: -i(nhibit 

Keq) source: •K(eep_source 

Keq) intermediates: •k(eep_intermediates 

CompQe, then link: •m(ain 

Optimize code: -0(ptimize, -G(raph, ^(nline 

Update Ubrary for mult^jle files: •u(pdate_invoke 

Include execution profile: •x(ecution_pronie 

Listing Output source plus errors: -L(ist 

Ou^ut errors: -F(ile_^only_errs, -j(oin 

Error context: -C(ontext 

Output assembly; •S(“asm_listing” 

Other -qCuiet, -V(space_size, -v(crbose 

<input> The Ada source flle(s) to be compiled It may be: 

• One or more Ada source files, for example: 

/uaer/J ohn/ezaople 
Frog_A.tezt 
cioazc/calc_oem.ada 
calcio.ada mypcog.ada 
*.ada 

If more than one file is specified, the names must be sqiarated 
bya:q)ace. 


2 


OPT-2129N-Vl.l(SPARC.68K) 28JAN93 




Command Options 


(Ada Compiler) ada 


• A file containing names of files to be compiled. Such a file 
must have the extension “.ilfeach name in the file must be on 
a sqiarate line. It is generally wise to limit the number of files 
in the input list to 10—20 if all files contain specifications and 
to no more than 5 if ail contain bodies (assuming one unit per 
file). You can find more information on using input-list files in 
the TeleCkn2 User Guide. 

• A combination of the above. 


Compiler defaults. Compiler defaults are set for your convenience. In most 
cases you will not need to use additional cations; a simple “ada <input> ” is 
sufficient Tlowever, options are included to provide added flexibility. You can, 
for example, have the compiler quickly check the source for syntax and semantic 
errors but not produce object code [-^rrors_only] or you can compile, bind, and 
link a main program with a single compiler invocation [-m(ain]. Other cations are 
provided for other purposes. 

The options available with ada appear below in alphabetical order. 

•C(ontext 

When an error message is sent to stderr, it is helpful to see the lines of the 
source program that surround the line containing the error. These lines 
provide a context for the error in the source program and help to clarify the 
nature of the error. The -C option controls the number of source lines that 
surround the error. The format of the q>tion is 

-C <(i> 

where <n> is the number of source context lines output for each error. The 
default for <n> is 1. This parameter q>ecifies the total number of lines 
output for each error (including the source line that contains the error). The 
first context line is the one immediately before the line in error; other context 
lines are distributed before and after the line in error. 

•<l(^ug 

To use the debugger, you must compile and link with the -d(ebug optioa 
This is to make sure that a link map and debugging information are put in the 
Ada library for use by the debugger. Using •d(ebug ensures that the 
intermediate forms and debugging information required for debugging are 
not deleted. 

Performance note: 

While the compflation time overhead generated ly the use of -d(ebug is 
minimal, retaining this rational information in the Ada library increases 
the space overhead. To see if a unit has been compiled with the -d(ebug 
option, use the oZr command with the •X(tended option. Debugger 


0FT-2129N.V1.1(SPARC.£8K) 28JAN93 


3 





ada (Ada Compiler) 


TeleGen2 for SPARCx68K 


information exists for the unit if the “dbg_info” attribute appears in the 
listing for that unit 


•E(rror_abort 

The -E(rror_abort option allows you to set the maximum number cf errors 
(^tax errors and semantic errors) that the compiler can encounter before it 
aborts. This option can be used with all other compiler options. 

The format of the option is 
-E <T> 

where <n> is the maximum number of errors allowed (combined counts of 
^tax errors and semantic errors). The default is 999; the minimum is 1. If 
the number of errors becomes too great during a compflation, you may want 
to abort the compilation by typing <ctrl>-C. 

-e(rrors_only ! 

The”e(iTors_only q)tion instructs the compiler to perform syntactic and 
semantic an^is of the source program without generating Low Form and 
object code. That is, it calls the iGront end only, not the middle pass and code 
generator. This means that only front end errors are detected and that only 
the High Form intermediates are generated. Unless you use the 
•k(eq)_intermediates q)tion along with -e, the High Form intermediates are 
deleted at the end of compilation: in other words, the bhraiy is not updated. 

j 

The -e{rrors_only option is typically used during early code development 
where execution is not required and speed of compilation is important Since 
only the front end of the compiler is invoked when -e is used, -e is 
incompatible with ada options that require processing beyond the front end 
phase of compilation. Such options include, for example, •0(ptimize and 
•d(ebug. If •< is not used (the default situation), the source is compiled to 
object code (providing no errors are found). Object code is generated for the 
^>ecification and botfy and inserted into the working sublibraiy. 

•F(Ile_only_erre 

The -F qition is used to produce a listing containing only the errors 
generate during compilation; source is not included. The ouqiut is sent to 
<file> J, where <file> is the base name of the input file. If input to the ada 
conunand is an input-list file (<file>.ilf), a separate listing file is generated 
for each source file listed in the input file. Eadi resulting listing file has the 
same name as the parent file, excqit that the extension “ J” is aj^iended. -F 
is incompatible with -L. 


4 


0PT-2129N.V1,1(SPARC.63K) 28JAN93 



Command Options 


(Ada Compiler) ada 


-G(raph 

The -G(raph option is valid only with -0(ptimize. 

This option generates a call graph for the unit being optimized The gr^h is 
a file containing a textual rqjresentation of the call graph for the unit being 
optimized For each subprogram, a list is generated that shows every 
subprogram called by that subprogram. By default, no graph is generated. 

The graph is ou^}ut to a file named <unit>.gii where <unit> is the name of 
the unit being optimized The structure and interpretation of call grr^hs is 
addressed in the Global Optimizer chapter of the TeleGen2 User Guide. 

•I(nlinejlst 

The”l(nlineji.st option is valid only with -0(ptimize. 

This option allows you to inline subprograms selectively. The format of the 
option is ' 

-I <fll«> 

where <file> is a file that contains subprogram names. The file must contain 
subprogram names in a qxscHlc form as noted below. 

— A list of subprograms to be inlined each sqparated by a comma or 
line feed then 

— A semicolon or a blank line then 

— A list of subprograms that are not to be inlined each sqiarated by a 
comma or l^e feed 

Tabs and comments are not allowed If there is no semicolon or blank line, 
the subprograms are considered to be visible. If you have no visible units to 
inline, use a semicolon to mark the beginning of Ae hidden>subprogram list 
Inline lists are commonly set with one name per line. 

♦ 

Each subprogram name in the list is in the form shown below. 

[<unlt>.]<subprograa> 

The unit name indicates the location of the subprogram declaration, not the 
location of its bodjy. If a imit name is not supplied any matching subprogram 
name (regardless of the location of its declaration) will be affected For 
ccanq)le, the list 

test; testing.test 

indicates that all subprograms named Test should be marked for inlining 
e3Ecq)t for those declared in either the specification or the bocfy of the 
compilation imit Testing. 

The first list of subprograms wiQ be processed as if there had been a pragma 


OFT-2129N-Via(SPARC.68K) 28JAN93 


5 








TeleGen2 for SPARCx68K 


\ 



ada (Ada Compllor) 


Inline in the source for them. The second list of subprograms will negate any 
Inline pragmas (including those ^plied by the it list) and will also prevent 
any listed subprograms from being automatically inlin^ (see A/a sulraption 
pair, in the discussion of •0(ptimize). 

The ability to exempt otherwise qualified subprograms from automatic 
inlining gives you greater control over c^tinuzation. For exan^le, a large 
procedure called from only one place within a case statement mi^t overflow 
the branch offset limitation if it were inlined automatically. Including that 
sut^rogram’s name in the second list in the list file prevents the problem and 
still allows other subprograms to be inlined. 

Since the Low Form contains no generic templates, pragma Inline must 
appear in the source in order to affect all instantiations. However, specific 
instantiations can be affected by the inline lists. The processing of the names 
is case insensitive. 

If you do not use •/, the qjtimizer automatically inlines any subprogram that 
is: (1) called from only one place, (2) considered small by the optimizer, or 
(3) tail recursive. Such optimizations are explained in detail in the Global 
Optimizer chapter of the TeleGen2 User Guide. 

-I(nhibit 

The -i(nhibit option allows you to siqjpress, within the generated object code, 
certain run-time checks, source line r^erences, and subprogram name 
information. The •i(nhibit qjtion is equivalent to adding pragma 
Suppress_All to the beginning of the declarative part of each compilation unit 
in a file. 

The format of the option is 
•1 <suboptlon>[...] 

where < suboption > is one or more of the single-letter suboptions listed 
below. When more than one suboption is used, the suboptions appear 
together with no separators; for example, “-i In”. 

1 pinejnfo] Suj^ress source line information in object code. 

By default, the conquer stores source line information in the 
object code. However, this introduces an overhead of 6 bytes for 
eadi line of source that causes code to be generated. Thus, a 
1000-line package with no instatiations or inlining may have up to 
6000 bytes of source line information. 

When source line information is suppressed, exertion tracebacks 
indicate the offset of the object code at which the exception occurs 
instead of the source line number. 



6 


OPr-2U9N-Vl.l(SPARC.68K) 28JAN93 







a 


Command Options 


(Ada Compiler) ada 


n [name_info] Suppress subprogram name information in object 
code. 

By default, the compiler stores subprogram name information in 
object code. Fur one compilation unit, the extra overhead (in 
t^es) for subprogram name information is the total length of all 
subprogram names in the unit (including middle pass-generated 
subprograms), plus the length of the compilation unit name. For 
q)ace-critical applications, this extra space may be unaccq^table. 

When subprogram name information is suppressed, the traceback 
indicates die offsets of the subprogram calls in the calling chain 
instead of the subprogram names. 

c [checks] Suppress run-time checks — elaboration, overflow, 
storage access, discriminant, division, index, length, and range 
checks. 

While run-time checks are vital during development and are an 
important asset of the language, th^ introduce a substantial 
overhead. This overhead may be prohibitive in time-critical 
ai^lications. 

a [all] Suppress source line information, subprogram name 

information, and nm-time checks. In other words, a (=inhibit all) 
is equivalent to Inc 

Below is a command that tells the compiler to inhibit the genet ation of 
source line information and run-time checks in the object code of the units in 
saniple.ada. 

ada -1 Ic sample. ada 


•J(oln 

The -j(oin option writes errors, warning messages, and information messages 
that are generated during compflatioh back into the source file. Such errors 
and messages ^ipear in the flle as Ada comments. The comments thus 
generated can help facilitate debugging and commenting your code. Unlike 
the other listing qptions (-L, -S, and -F), the -/ option does not produce a 
8^>arate listing since the information generated is written into the source 
flic 

-K(eep_80urce 

T^ option tells the compfler to take the source file and store it in the Ada 
libraiy. When you need to retrieve your source file later, use the orf 
command. 


0FT-2129N.VL1(SPARC.68K) 28JAN93 


7 




ada (Ada Compilar) 


TeleGen2 for SPARCx68K 


••k(eepjnt3rmedlates 

The -k(eep_intermediates option allows you to retain certain intermediate 
code forms that the compiler otherwise discards. 

By default, the compiler deletes the High Form and Low Form intermediate 
rq)resentations of aJl compiled secondary units from the working subUbrary. 
Ddetion of these interme^te forms can significantly decrease the size of 
sublibraries—typically 50% to 80% for multi-unit programs. 

Some of the information within the intermediate forms may be required later, 
which is the reason •k(eq)_intermediates is available with ada. For example. 
High Form is required if the unit is to be referenced by the Ada ctoss- 
referencer (<tcr). In addition, both the debugger and optimizer require 
information that is saved within intermediate forms. 

To verify that a unit has been compiled with the -k(eep_intermediates qption, 
use the ofr command with the -X(tended option. If the unit has been 
compiled with -k, the listing will show the attributes high_form and low_form 
for the unit 

•L(lst 

The -I^ist option instructs the compHer to ouqjut a listing of the source being 
compil^ interspersed with error information (if any). The listing is output 
to <file>.l, where <file> is the name of the source file (minus the 
extension). If <file>.l already exists, it is overwritten. 

If input to the ada command is an input-list file ( < file > .ilf), a separate listing 
file is generated for each source file listed in the input file. Each resulting 
listing file has the same name as the parent file, except that the extension “ J” 
is appended. Errors are interspersed with the listing. Ifyoudonotuse-L 
(the default situation), errors are sent to stderr only, no listing is produced. - 
L is incompatible with -F. 

•lObfile 

The -l(ibfile option is'one of the two library-search cations; the othCT is 
-t(emplib. Both of these options allow you to specify the name of a library 
fQe other than the default, Ublstalb, The two options are mutually exclusive. 

The format of the •l(ibfile option is 

-1 <flle> ) 

where <file> is the name of a library file, which contains a list of • 
sublibraries and optional comments. The file must have the extension “.alb”. 
The first sublibrary is always the working sublibraiy, the last subUbrary is 
generally the basic run-time sublibrary. Note that comments may be included 
in a library file and that each subLTirary listed must have the extension “.sub”. 



8 


OPT-2129N-Vl.l(SPARC.68K) 28JAN93 




Command Options 


(Ada Compiler) ada 


Hfn(aln 

This option tells the compiler that the unit specified with the qition is to be 
used as a main program. After all files named in the input specification have 
been compiled, the compiler invokes the the Ada linker to bind and link the 
program with its extended famify. By default an “execute form” (EF) load 
module named <unit> .ef is left in the current directory. 

The fomut of the cj:«t?on is 
-m <unlt> 

where <unit> is the name of the main unit for the program. If the main unit 
has already been compiled, make sure that the body of the main unit is in the 
current working subhbrary. 

Note: You may specify cations that are specific to the binder/lirdcer on the 
ada C' .iTmand line if you use the •m(ain option. In other words, if 
you u^ -m, you may also use -o, -a, or ai^ of the other aid options 
except -Z(“link_ony’. For example, the command 

ada 'D velcoBA >0 nev.af -a .opt sample.ada 

instructs the compiler to compiie the Ada source file sample.ada, 
which contains the main program unit Welcome. After the file has 
been compfled, the compfler calls the Ada linker, passing to it the -o 
and -a options with their respective arguments. The -a qition tells 
the linker to use the commands specified in the option file .opt to 
direct the linking process; an option file is requir^ for linking. The 
linker produces an “execute form” load modide of of the unit, 
placing it in file new.ef as requested by the linker’s -o option. 

If you use an option with 'mCain that is conunon to both ada and aid, 
the option serves for both compiling and linking. For example, using 
•5 with “ada -m” produces two assembly listings-one from 
compilation, one from elaboration. 


•0(ptlmlze 

The optimizef qjerates on Low Form, the intermediate code rqiresentation 
that is ouq}ut by the middle pass of the compiler. 

When used on the ada command line, •0(ptimize causes the compiler to 
invoke the global c^timizer during compilation; this optimizes the Low Form 
generated by the middle pass for the unit being compfled. The code 
generator t^es the optimized Low Form as input and produces more 
efficient object code. 

Note: We recommend that you do not attempt to compile with optimization 
until the code being compfled has been fully debugged and tested, 
because using the c^timizer increases compilation time. Please refer 
to the TeleGtnl User Guide for information on optimizing strategies. 


0PT-2U9N-V1.1(SPARC.68S:) 28JAN93 


9 




ada (Ada Compilar) 


TeleGen2 for SPARCx68K 


The format of the option is 
-0 <suboptlons> 

where <suboptions> is a string composed of one or more of the 
single-letter subq)tions listed below. < suboptions > is required. 

The subqjtions may appear in any order (later suboptions supersede 
earlier suboptions). The suboption string must not contain any 
characters (including spaces or tabs) that are not valid suboptions. 
Examples of valid suboptions are: 

-0 pRlA 
-0 pa 


10 


OFT-2129N-Vl.l(SPARC.68K) 2WAN93 




Command Options 


(Ada Compiler) ada 


Tabk of optimizer suboptions 


p 

[optimize with parallel tasks] Guarantees that none of subprograms 
being optimized will be called from parallel tasks. P allows data 
m^ing optimizations to be made that could not be made if multiple 
instances of a subprog^ am were active at the same time. 

p 

[optimize without parallel tasks] Indicates that one or more of the 
sul^rograms being optimized might be called from parallel tasks. 

This is a “safe” suboption. DEFAULT 

■R~ 

[qjtimize with external recursion] Guarantees that no interior 
subprogram will be called recursively a subprogram exterior to the 
unit/collection being optimized. Subprograms may call themselves or 
be called recursively by other subprograms interior to the 
unit/collection being optimized. j 

r 

[optimize without external recursion] Indicates that one or more of 
the sul^rograms interior to the unit/collection being optimized could 
be call^ recursively by an exterior subprogram. This is a “safe” 
suboption. DEFAULT j 

T~ 

[enable inline expansion of subprograms] Enables inline expansion of 
those subprograms marked with an Inline pragma or introduced by 
the compfler. DEFAULT 

i 

[disable inline expansion] Disables all inlining. 

T" 

[enable automatic inline expansion] If the I subc^tion is also in effea 
(I is the default), A enables automatic inline expansion of ^y 
subprogram not marked for inlining; that is, any subprogram that is 
(1) called from only one place, (2) considered to be small by the 
optimizer, or (3) t^ recursive. If 1 is used as well, inlining is 
prohibited and A has no effect DEFAULT 

a 

[disable automatic inline expansion] Disables automatic inlining. Ifi 
is used as well, inlining is prohibited and a has no effect 

M 

[perform maximum c^timization] Specifies the maximum level of 
optimization; it is equivalent to “PRIA”. This suboption assumes that 
the program has no subprograms that are called recursivefy or by 
parcel tasks. 

D 

[perform safe c^timizations] Specifies the default “safe" level of 
q)timiration; it is equivalent to “prIA”. It represents a combination of 
(^timizations that is safe for all compilation units, including those with 
sutprograms that are called recursively or by parallel tasks. 


0PT‘2U9N-V1.1(SPARC^K) 28JAN93 


11 




ada (Ada Compiler) 


TeleGen2 for SPARCx68K 


•q(uiet 

By default, information messages are output even if the -v(erbose qjtion is 
not used The •q(uiet option allows you to suppress such messages. Using 
•v(erbose alone gives error messages, banners, and information messages. 
Using -v(erbose with -q(uiet gives error messages and banners, but 
suppresses information messages. The option is particularly useful during 
optimization, when large numbers of information messages are likely to be 
ou^uL 


-SC'asmJIstIng” 

The -5 option instructs the compiler to generate an assembly listing. The 
listings are generated in the working directory. If more than one unit is in the 
file, separate listings are generated for each unit The format of the q)tion is 

-S <suboptlon> 

where < suboption > is either “a” or “e”. 

a [assembly] Generate a listing that can later be used as input to an 
assembler. The assembly file is named < unit > .s if it is a body or 
<unit>_.s if it is a ^lecification. 

e [ertended] Generate a paginated, extended assembly listing that 
includes code ofiEsets and object code. The assembly file is named 
<unit>.e if it is a body or <unit>_.e if it is a specification. 

The listing generated consists of assembly code intermixed with 
source code as comments. If input to the ada command is an 
input-list file ( <file> .ilf), a sqiarate assembly listing file is 
generated for each unit contained in each source file listed in the 
input file. Since S is also an old cation, if you use S along with 
•m(ain, an assembly listing is aJ 'o ou^ut during the binding 
process. 

•t(emplib 

The -t(emplib qption'is one of the two library-search options; the other is 
-l(ib£ile. Both of these (^tions allow you to select a set of sublibraries for use 
di^g the time in which the command is being executed. The two cations 
are mutually exclusive. 

Hie format of the -t(emplib ration is 

-t <subllb>[,...] 

where <sublib> is the name of a sublibraiy. The name must be orefaced by 
a path name if the sublibrary is in a directory other than the cunent 
directory. The first sublibrary listed is the working sublibrary by definition. 

If more than one sublibrary is listed, the names must be sq^arated a 
comma. Single or double quotes may be used as delimiters. 


12 


OFr-2129N-Vl.l(SPARC.68K) 28JAN93 





j it jy 4,41^ 


■"flfSWIiPfPSPRWR 

'iiiimTj'tiii'iieiiulii&s&im&iiu 








1^ 




Command Options 


(Ada Compiler) ada 


The argument string of the -t(emplib option is logically equivalent to the 
names of the sublibraries listed in a library file. So instead of using 

•1 vorkllb.tlb 

you could use •t(emplib and specify the names of the sublibraries listed in 
worklib.alb (sqjarated by commas) as the argument string. 

-u(pdateJnvoke 

The -u(pdate_invoke (short for “-u(pdate_after_invocation”) option tells the 
con^iler to update the working sublibrary only after all files submitted in that 
invocation of ada have compiled successftiUy. The option is therefore useful 
only when compiling multqjle source files. 

If the compiler encounters an error while -«is in effect, the hbrary is not 
updated, even for files that compile successfully. Furthennore, all source 
^es that follow the file in error are compiled for syntactic and semantic 
errors only. 

If you do not use the -u(pdate_lib option, the library is updated each time one 
of the files submitted has compiled successfully. In other words, if the 
compiler encounters an error in any unit within a single source file, all 
changes to the working sublibraty for the erroneous unit and for all other 
units in that file are discarded. However, library updates for units in previous 
or remaining source files are unaffected. 

Since using -u means that the library is updated only once, a successful 
compilation is faster with -u than wkhout it On the other hand, if the 
compiler finds an error when you’ve used -u, the library is not updated even 
when the other source files compile successfully. The implication is that it is 
better to avoid using -u unless your files are likely to be error free. 


-V(8pace_8ize 

The -V(space_size cation allows you to specify the size of the working space 
for Tel^en2 components that operate on Ubrary contents. The format of 
the option is ' 

•V <value> 

where the option parameter is specified in 1-Kbyte blocks; it must be an 
integer value. The default value is 4000. The upper limit is 2,097,151 
Larger values generally improve performance but increase physiejj memory 
requirements. Please read the section on adjusting the size of the virtual 
space in ChrqJter 2 of TeleCen2 Programrrter’s Rrference Manual for more 
information. 


npT^nsN.vi.irspAitCiKiQ zaiANSS 


13 











ada (Ada Compiler) TeleGen2 for SPARCx68K 


-v(erb03e 

The -v(erbose (^tion is used to dL^lay messages that infonn you of the 
progress of the command’s execution. Such messages are prefaced by a 
banner that identifies the component being executed. If -v is not used, the 
banner and progress messages are not output However, information 
messages such as those output by the q}timizer may still be output whether 
-v(crbose is used or not 


•x(ecutIon_profile 

The •x(ecutionj)rofile option is used to obtain a profile of how a program 
executes. The option is available with ada, aid, and aopt. Using -x with ada 
or aopt causes the code generator to insert special run-time code into the 
generated object Using -x with aid causes the binder to link in the run-time 
support routines that will be needed during execution. 

Important: If you have compiled any code in a program with the 

•x(ecuti6n_profile option, you >.iust also use -x when you bind 
and link the program. Refer to the Profiler chapter of the 
TeleGenl User Guide for more information on profiling. 


14 


OPT-2129N-Vl.l(SPARCX8K) 2&IAN93 



. 


Command Options 


(Ada Linker) aid 


1.2. aid (Ada Linker) 

The Ada Linker is a component of the TeIeGen2 system that allows you to link 
compiled Ada programs in prqiaration for target execution. The linker resolves 
references within the Ada program, the bare target run-time support library, and 
any imported non-Ada object code. To support the development of embedded 
applications, the linker is designed to cerate in a variety of modes and to handle 
many types of output format 

The linker is invoked by the o/^ command; it can also be invoked with the •m(ain 
option of the ada conunand. In the latter case the compiler passes appropriate 
options to the linker to direct its operation. The syntax of the aid command is 
shown below. 


aid [<optlon>...] unit 


<optlon> One of the options available with the command. 


<unlt> The name of the main unit of the Ada program to be linked. 


Important: When using the aid command, the body of the main 
unit to be linked must be in the working sublibrary. 


In the simplest case, aid takes two arguments — the name of the main unit of the 
Ada program structure that is to be linked and the name of a linker option file— 
and produces one ou^ut fOe, the complete load module produced by the linking 
process. The load mc^ule is placed in the directory from which aid was executed, 
under the name of the main unit used as the argument to old. 


linker directives are communicated to the linker as options on the conunand line 
or as rations entered via an cation file. Command-line options are useful for 
controlling options that you are likely to change often. The default option settings 
are designed to allgw for the simplest and most convenient use of the linker. 
Command-line options are discussed below. Option-file options are for specifying 
more complicated linker options, such as the specification of memory locations for 
qiecific portions of the code or data for a program. Option-file options are 
discussed in the TeIeCen2 User Guide. 


The qjtions available with aid appear below in alphabetical order. 


-A(rr8y_slze 

Tf^option specifies the amount of internal buffer space, in Kbytes, to be 
allocated fer the linker. The format of the option is 

-A <value> 


OFT-2129N-VlJ(SPARC.68K) 28JAN93 


15 






atd (Ada Linker) Te!eGen2 for SPARCx68K 



where <value> is a value between 1 and 10. The default is 2. Use this 
option only as recommended by Customer Support 

•a(dd]tlonaI_optlQns 

The -a opuoii &p::v.iScS that cld iztc proc*^ additional options obtained from 
a linker option file. The format of the option is 

-• <flle> 

where <file> is a valid file specification and rq)resents a Hie containing 
linker options. If no extension is give, the extension is considered to be 
“.opt”. A sample linker cation file is provided for each board supported in 
the product; it is named <board>.opt and exists in the respective 
examples!<board> subdirectory of $TELEGEN2. An option file is 
necessary for linking; it is not necessary for binding. 

An qjtio*' file is set with one command per line, with each command line 
having the form 

<coffiniand> [<parameter>] 

— or- <comniand>/<optlon> I<parameter>] 

-or- <coBmand>/<option>*<parameter> 

Commands and options are case-insensitive. Comment characters (-) are 
allowed Some typical command/option pairs are 

deflne/<naBe>- locate/at- oucput/complete 

Note that some commands allowed in an option file can be expressed at the 
command level. Command-line options always supercede option-file options. 
The commands in a linker qition file are shown bdow. 

define 

/<ay«bol_nane>«^alue> 

[/address] 

Input 

[/export_de fInItions] 
i/aain | /spec | /body j /ofn] 
i/phdntoo I /vorking_sublib] 
i/nosearchj <unit> 
locate 

[/control_aectIon- 

constant I code I data | udata ] map] 

[ /coaq)onent_nane-<unit> 

[/spec I /body | /ofa]] 

[/at-<address>] 

[/in-<reglon>] 


16 


0PT-2129N-V1.1(SPARC.68K) 28JAN93 




Command Options 


(Ada Linker) aid 


[/«fter»<caect__nama | comp_tinit>] 

[/«1 lgnm«nt<-<va lue> ] 

nap 

[/imaga] -Alt- -Mi 
(/lncluda_Iocala] -Alt:-Ml 
i/azcludad] -Alt: -Me 
(/wldth-<132 I 80>] -Alt:-Mn 
I/halght‘-<50 I <vaiua»l 
t<flla>] 
output 

(/objact_^£ona-I<unlt>l ] -Alt:-o 
[/complata | /incomplete] 

[/Ioad_Bodula-<flle>] 

region 

/high_boundi-<a ddr e s s> 

/low_bound»<addres s> 

I/unuaed] [<region>] 
target <processor_name> 
exit 
quit 

For more information on the syntax of the commands available in the linker 
option file, please refer to the linker chapter of the TeleGen2 User Guide. 

•B(ase 

This option is used to specify the start location of the linked output The 
linker will locate non-absolute control sections in consecutive memory 
locations. All control sections are word aligned on the MC680X0. The 
format is 

-B <addr> 

where <addr > is a valid MC680X0 address. The address can be specified as 
a decimal (%Ddecimal), a hexadecimal (%Xhex), or a hexadecimd-based 
literal in Ada ^tax (16#hex#). The default is hexadecimal (%Xhex). 

If you ^)ecify neither the -B option nor an option file LOCATE command 
and the link is/x)mplete, the l^er uses the default location value of address 
0 . 

The -B option governs the location for any code, constant, or data section not 
covered by an option file LOCATE command This option does not 
supercede any LOCATE options. •B(ase is equivalent to a LOCATE cation 
with no control section or component name q>ecified 


-b(lncl_onIy 

The -b(ind__only option instructs the linker to not invoke the link phase-in 
other worc^ to generate elaboration code only. This option is particularly 
useful when you have adapted your own linker and want to use it in place of 


0PT-2129N-V1.1(SPARC.68K) 28JAN93 


17 










aid (Ada Linker) 


TeleGen2 for SPARCx68K 


the TeleGen2 linker. The option is incompatible with -Z(“link__only.” 

-d(ebug 

This cation controls the generation of dd)ug symbol information for use witli 
the debugger. A program that is to be run with the debugger must be linked 
with the •d(ebug option. If supported by the chosen load module format, 
•d(d)ug may also cause symbol information to be ou^ut in the load module. 
In the standard configuration of the TeleGen2 system, none of the ou^uts 
siqjport symbol information in the load module. 


•f(ormat 

The -f(ormat option specifies the format of the output module. The syntax of 
the option is 

•f <auboptlon> 

where < suboption > is one of the following; < suboption > is required. 

C [Custom] The C suboption is reserved for modules the linker has 
been adajpted to support See your target’s Board Support Guide 
for information on adaptation. 

E [Execute Form] This sub<ption tells the linker that the object 
module to be generated is in TeleSoft Execute Form (the default). 
The default extension for such an output file is “.ef 

I [IEEE-695] This suboption teUs the linker that the object module 
to be generated is in IEEE-695 format. The default extension for 
such an output Hie is “.i3e”. 

S [S-record] This suboption tells the linker that the object module 
to be generated is in Motorola S-record format The default 
extension for such an output file is “.sr”. 

If -/is not used, E(xecute_form is produced. Execute Form is the default 
output format generated by the liidcer and is suitable for use as input to the 
downloader/receiver. 

•lObfile 

The -l(ibfile option is one of the two hbrary-search options; the other is 
•t(enplib. Both of these options allow you to sp>ecify the name of a lQ)rary 
file other than the default, Ublstalb. The two options are mutually exclusive. 

The format of the -l(ibfile option is 

-1 <file> 

where <file> is the name of a library file, which contains a list of 


IS 


0PT-2L19N.V1.1(SPARC.68K) 2«JAN93 






Command Options 


(Ada Linker) aid 


sublibraries and optional comments. The file must have the extension “,alb”. 
The first sublibrary is always the working sublibrary; the last sublibray is 
generally the basic run-time sublibrary. 

•M(ap 

This cation is used to request and control a link map listing. The link map 
listing is sent to 

<unlt>.map 

where <unit> is the name of the main program unit (if present), the name 
q)ecified as the command line parameter, or the name specified as the first 
INPUT ration, modified as necessary to form a valid UNIX file 
^)eciflcatioii. The format of the link map listing file is described in the 
Linker chapter of the TeleCenl User Guide. The format of the option is 

•M [<suboptioii>[... ] ] 

where < suboption > is one or more of the following: 

e [excluded] Insert a list of excluded subprograms into the link map 
listing. 

1 [image] Generate a memory image listing in addition to the map 
listing. The linker writes the image listing to the same fQe as the 
link map listing. 

1 [locals] Include local symbols in the link map symbol listing. 

n [narrow] Limit the width of the link map to 80 characters (the 
default is 132). 

If more than one of the above suboptions is used, th^ must appear together, 
withno^aces. Forexarr^le: 

•M ell 

A -M(ap cation specified on the command line supercedes a MAP command 
in an cation file. 

-S(“asmjl8tlng' 

The <5 option is used to output an assembly listing from the elaboration 
process. The format of the q>tion is 

-S <suboptlon> 

where < suboption > is either “a” or “e”. 

a [assembly] Generate a listing that can later be used as input to an 
assembler. The assembly file is named < unit > M.s. 


0FT-2129N-V1.1(SPARC.68K) 28JAN93 


19 




aid (Ada Linker) 


TeleGen2 for SPARCx68K 


e [extended] Generate a paginated, extended assembly listing that 
includes code oCEsets and object code. The assembly file is named 
<unit>_M.e. 

-8(ymbolJile 

This option produces a file that contains all of the global symbols used in the 
link. The name of the symbol file produced is <main>.sym, where < main > 
is the name of the main program unit The symbol file provides you with a 
simple means of obtaining information about symbol names and values. 

The ^mbo! file is an ASCII file that contains one entry per line. Each entry 
has the format 

NMNNNKNNTAAAAAAAAAAA 

where 

NNNNNNNN An 8-character ASCQ representation of the value of the 
symbol. 

T A l<haracter ASCII represention of the type of imit in 
which the symbol was located. Three characters are 
allowed: 

Ada Unit 
-> OfaJJnlt 

"tf" -> Link time defined symbol 

AAAAAAAA The ASCII rqjresentation of the symbol (truncated, if 
necessary). A maximum of 200 characters is allowed. 

-T(raceback 

The -T(raceback option allows you to specify the callback level for tracing a 
run-time exertion that is not handled ^ an excqjtion handler. The format 
of the option is 

-T <a> 

where <n> is the number of levels in the traceback call chain. The default is 
15. The -T(raceback ration is useful onty if you receive an Unexpected Error 
Condition message. This information may hdp you diagnose the problem. 

•t(emplib 

The -t(emph‘b option is one of the two Ubrary-search rations; the other is 
-l(ibfile. Both of these options allow you to select a set of sublibraries for use 
during the time in which the command is being executed. The two options 
are mutually exclusive. 


20 


0PT.2129N.V1.1(SPARC.S«,K) 28JAN93 



Command Options (Ada Linker) aid 


The format of the -t(emplib option is 
-t <subllb>[,...1 

where <subL'b> is the name of a sublibrary. The name must be prefaced by 
a path name if the sublibrary is in a directory other than the current 
directory. The first sublibrary listed is the working sublibrary by definition. 
If more than one sublibraiy is listed, the names must be s^arated by a 
comma. Single or double qi'otes may be used as delimiters. 

The argument string of the -t(emplib option is logically equivalent to the 
names of the sublibraries list^ in a library file. So instead of using 

•1 vorkllb.alb 

you could use •t(emplib and specify the names of the sublibraries listed in 
workIib.alb (s^arated by commas) as the argument string. 

•wCilmesllco" . 

The •H' qption allows you to specify the slice of time, in milliseconds, in which 
a task is allowed to execute before tf»e run time switches control to the 
ready task having equal priority. This timeslicing activity allow.? 
round<robin scheduling among equal-priority tasks. 

The format of the option is 
-w <value> 

where < value > is the timeslice quantum in milliseconds. If the value 
specified is IS, for example, the run time will check each 15 milliseconds to 
see if any tasks with a priority equal to that of the executing task are available 
to execute. If there are, the run time effects a context switch to the first such 
task. 

The default is 0 (Le., timeslicing is disabled). Please note that no run-time 
overhead is incurred when timeslicing is disabled. 

•V(space_8lze, 

The -V(space_size option allows you to ^>ecify the size of the working space 
for TeleGen2 components that qjerate on library contents. The format of 
the option is 

-V <valu«> 

where the cation parameter is specified in 1-Kbyte blocks; it must be an 
integer value. The default value is 4000. The upper limit is 2,097,151 
Larger values generally improve performance but increase physicd memory 
requirements. Please read the section on actuating the size of the virtual 
space in Chapter 2 of TeleGenl Programmer’s Reference Manual for more 
information. 


0FT-2129N-V1.1(SPARC.68K) 28JAN93 


21 




aid (Ada Linker) 


ToleGen2 for SPARCx68K 


•v(erbose 

The -v(erbose option is used to display messages that inform you of the 
progress of the command’s execution. Such messages are prefaced by a 
banner that identifies the component being executed If -v is not used, the 
banner and progress messages are not ouq)ut 

•X(ceptIon_8how 

By default, unhandled exceptions that occur in tasks are not reported; 
instead, the task terminates silently. The -X cation allows you to specify that 
such excqitions are to be rqiorted The output is similar to that displayed 
when an unhandled excqition occurs in a main program. 

-x(ecution_profile 

The -x(ecution_profile option is used to obtain a profile of how a program 
executes. The option is available with ada, aid, and aopt. Using -x with ada 
or aopt causes the code generator to ins^ special run-time code into the 
generated object Using -x with old causes the binder to link in the run-time 
support routines that will be needed during execution. These run-time 
support routines record the profiling data in memory during program 
execution and then write the data to two host files, profile.out and profile.dic, 
via the download line as part of program termination. The fUes can then be 
used to produce a listing that shows how the program executes. 

In^xsrtant: If you have con^iled any code in a program with the 

-x(ecutionj)rofile option, you must also use -x when you bind 
and link the program. Refer to the Profiler chjyter of the 
TeleG€n2 User Guide for more information on profiling. 


■Y("task_8tack” 

The -Y option allows you to alter the size of the task stack. In the absence of 
a rqiresentation specification for task storage_size, the run time will allocate 
4096 bytes of storage for each executing task. -T specifies the size of the 
basic task stack. The format of the option is 

-T <v«lue> ' 

where < value > is the size of the task stack in 8-bit bytes. The default is 
4096. A rqjresentation specification for task storage size overrides a value 
suf^Ued with this option. 


-y(‘‘8tack_guard” 

The -y option is used to specify the size of the stack guard. The stack-guard 
^)ace is the amount of space located per task, from the task stack, to 
accommodate interrupts and exertion-handling operations. The format of 
the r don is 

-y <value> 


22 


0IT-2129N-V1.1(SPARC.68K) 28JAN93 





Command Options 


(Ada Linker) aid 


where < value > is the size of the stack-guard size in 8-bit bytes. The value 
given ntust be less than the task-stack size. The default is 1024 bytes; this is 
the amount allocated unless otherwise specified. 


-2(‘‘llnk_onl/’ 

This'option tells the linker to sk^ the binding phase and go directly to the 
link stq). It is useful for generating phantom links where the main proram 
may not yet cdst Note: unlike other link cations, th**-Z option cannot be 
pasUd with “ada-m”. The option is incompatible with-b(ind_only. 


0FT-2129N-V1.1(SPARC.»K) 28JAN93 


23 






aid (Ada Linker) 


TeieGen2 for SPARCxGSK 



24 


OPT-2129N-Vl.l(SPARC^K) 28JAN93 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are given on the following page. 


C-1 






SUN-4/e68k PREVALIDmON 


ATIACHMENTF 


ATTAaiMENT F: PACKAGE STANDARD INFORMATION 

For this target system the numeric types and their properties are as follows: 


SHORT_INTEGER: 


size 

= 8 

first 

= -128 

last 

= +127 

INTEGER: 

size 

= 16 

first 

= -32768 

last 

= +32767 

LONG_INl’EGFR: 

size 

= 32 

first 

= -2147483648 

last 

= +2147483C47 

FLOAT: 

size 

= 32 

digits 

= 6 

’first 

= -3.40282E+38 

last 

= +3.40282E+38 

machine radix = 2 


machine_mantissa = 24 

machine_emin = -125 

machine_eraax = +128 


LONG_FLOAT: 


size 

digits 

Tirst 

last 

macbine_radix 

machine_mantissa 

machine_emin 

machine_emax 

DURATION: 


= C4 
= 15 

=-1.79769E+308 
= +1.79769E+308 
= 2 
= 53 
= -1021 
= +1024 


size = 32 

delta =2#1.0#e-14 

tirst = -86400 


1DEC92 


page 17 



LRM Annotations 


TeieGen2 pragmas 


3.10. LRM Appendix F - Implementation-Dependent 
Characteristics 

The Ada language definition allows for certain target dependencies. These 
dq)endencie3 must be descnbed in the reference manual for each implementation. 
Tl^ section addresses each point listed in LRM Appendix F. Topics that require 
further clarification are addressed in the sections referenc«i in the sunanary. 

3.10.1. (1) Impiementation-dependent pragmas 

TeleGen2 has the following implementation-dq)endent pragmas; 

pragma Comment 
pragma Export 
pragma Images 
pragma Interface_Information 
pragma Interrui< 
pragma Linkname 
pragma No^^Suj^ress 
pragma Preserve__Layout 
pragma Suppressj\ll 

3.10.1.1. Pragma Comment 

Pragma Comment is used for embedding a comment into the object code. The 
syntax is 

pragma Commane ( <strlng_llteral> ); 

where <string_literal> r^resents the characters to be embedded in the object 
code. Pragma Comment is allowed only within a declarative part or immediately 
within a package specification. Any number of comments may be entered into the 
object c(^e by use of pragma Comment 

3.10.1.2. Pragma Export 

1 

Pragma Export qiables you to e:qx>rt an Ada subprogram or object to either the 
C language or assembly. The pragma is not suj^rted for Pascal or FORTRAN. 
The syntax is 

pragma Export ( I Name ■> ] <S'abprogram_or_object_jiame> 

[, [ Link_Naffle ■> ) <atrlng_llteral> ] 

I, [ Language -> ] <ldentifler> ] ); 

The syntax and use of the pragma is explained in detail in Section 2.8.3. 

3.10.1.3. Pragma images 

Pragma Images controls the creation and allocation of the image and index tables 
for a specified enumeration type. The syntax is 


REF-1878N-V1JI(SUN4.E68) 15JAN92 


3-11 






TeleGen2 pragmas 


TeleGen2 for SPARC-E58 


pragma Images(<anumeratlon_t 7 pe>. Deferred); 

pragma Images(<eaumeratlon_t 7 pe>. Immediate); 

The syntax and use of the pragma is described in detail in Section 27 J. 

3.10.1.4. Pragma Interfacajnformation 

Pragma Interface^Information provides information for the optimizing code 
generator when interfacing non*Ada languages or doing macl^e code msertions. 
Pragma Inter£ace_Information is always associated with a pragma Interface except 
for machine codelnsertion procedures, which do not use a preceding pragma 
Interface. The syntax of the pragma is 

pragma Interface_Informatlon 

(Name, -- Ada subprogram, required 

Llnk^Name, -- string, default - "" 

Mechanism, -- string, default - 

Parameters, -- string,, default « 

Regs_Clobbered); -- string, default - "" 

Section 28.22 explains the syntax and usage of this pragma. 

3.1 ai .5. Pragma Intomipt 

Pragma Interrupt is used for function-mapped optimizations of interrupts. The 
^taxis 

pragma Interrupt (F\inctlon_Mapplng); 

The pragma has the effect that entry calls to the associated entry, on behalf of an 
interrupt, are made with a reduced call overhead. This pragma can only appear 
immediately before a simple accept statement, a while loop directly enclosing only 
a single accqit statement, or a select statement that includes an interrupt accept 
alternative. 

Pragma Interrupt is explained more fully in Sections 211,211.82, and 211.8.4. 

3.iai.6. Pragma Unkname 

Pragma Linkname was formerly used to provide interface to any routine whose 
name cannot be specified by an Ada string literal Pragma Inteiface_Information 
should now be us^ for this functionality. Pragma Linkname is descdbed here 
(mly in support of older code that may still use it 

Pragma Linkname takes two arguments. The first is a subprogram name that has 
been previously ^^edfied in a pragma Interface statement The second is a string 
literal specifying the exact link name to be employed by the code generator in 
emitting calls to the associated subprogram, lie syntax is 

pragma Interface ( <language>, <subprog> ); 
pragma Linkname ( <subprog>, <strlng_llteral> ); 


3-12 


REF.1878N-V1JI(SUN4JE68) 1SJAN92 




LRM Annotations 


TeieGen2 pragmas 


If pragma Linkname does not immediately follow the pragma Interface for the 
associated subprogram, a warning wDl be issued saying that the pragma has no 
effect 

P ‘simple exan^le of the use of pragma Linkname is 

procedure Duamiy^Access( Duamiy^^Arg : System.Address ); 
pragma Interface (assembly, Dummy_Access ); 
pragma Linkname (Dummy^Access, "_access"); 

3.iai.7. Pragma No_Suppress 

Pragma No_Suppress is a TeleGen2-defined pragma that prevents the suppression 
of ^ecks within a particular scope. It can be used to override pragma Suppress in 
an enclosing scope. The pragma uses the same syntax and can occur in the same 
places in the source as pragma Sqjpress. The syntax is 

pragma IIo_Suppress (<ldenti£ler> [, [ON »>] ■dame>]); 

<ldentlf ler> The type of check you do not want to suppress. 

<Mma> The name of the object, Qpe/subtype, task unit, generic unit, or 
subprogram within which &e check is to be suppressed. <name> 
is qptional 

Section 2322 explains the use of this pragma in more detail 
3.10.1.8. Pragma Preserve_Layout 

The TeleGen2 compfler reorders record components to minimize gaps within 
records. Pragma Preserve_Layout forces the compiler to maintain the Ada source 
order of components of a given record type, thereby preventing the compiler from 
performing this record layout optimization. 

The syntax of this pragma is 

Pragma Pres«rve_Layout ( ON ■> <record_type> ); 

Preserve_Layout must ^jpear before any forcing occurrences of the record type 
and must be in the same declarative part, package specification, or task 
q>ecifIcation. This pragma can be applied to a record type that has been packed. 

If Freseiye_Layout is applied to a record type that has a record rqiresentation 
dause, the pragma only appUes to the components that do not have con^nent 
clauses. These components wiU appear in Ada source order after the components 
with component clauses. 


REF-1878N-V1J(SUN4JE:68) 15JAN92 


3.13 










znzussrri 






TeleGen2 attributes 


TeleGen2 for SPARC-E68 


3.iai.9. Pragma Suppress_All 

Suppress_All is a TeleGen2*defined pragma that suppresses all checks in a given 
scqje. Pragma Suppress_All takes no arguments and can be placed in the same 
scopes as pragma S^ipress. 

In the presence of pragma Suppress_AlI or any other Siqjpress pragma, the scope 
that contains the pragma will have checking turned oft This pragma should be 
used in a safe piece of time<ritical code to allow for better p^ormance. 

3.10.2. (2) Impiomentation-dependent attributes 

TeleGen2 has the following implementation-dq)endent attributes: 

'Ofeet (inMa) 

’Subprogram_V{ilue 

’Extended_Image 

’Extended_Value 

’Extended_Width 

’Extended_Aft 

’Extended_Digits 

’Extended^Fore 

3.102.1. 'Offset 

’O&et yields the oSset of an Ada object from its parent frame. This attribute 
supports machine code insertions as described in Section 2.12.2.2. 

3.10.2.2. ’Subprogram_Value 

This attribute is used by the TeleGen2 implementation to facilitate calls to 
interrupt support subprograms. The attribute returns the value of the record type 
Subprogram Value defined in package System. 

3.102.3. Extended attributes for scalar types 

The extended attributes extend the concqjt behind the text attributes 'Image, 
'Value, and 'Width to give the user more power and flexibility when displaying 
values of scalars. Extended attr&utes differ in two respects from their predefined 
counterparts: 

1. Extended attributes take more parameters and allow control of the 
format of the output string. 

2. Extended attributes are defined for all scalar ^pes, including fixed and 
floating point Qpes. 


3-14 


REF-187SN-V1J(SUN4J»8) 15JAN92 















LRM Annotations 


TeieGen2 attributes 


Named parameter associations are not currently supported for the attended 
attributes. 


Extended versions of predefined attributes are provided for integer, enumeration, 
floating point, and fixed point types: 


Integer 

’Extended_Image 
’Extended Value 
•Extended^Width 


Emnaeratioa 

'ExtendedJtaiage 
•Extended Value 
•Extended^Width 


Floating Point 

’Extended_Image 

’Extended^Value 

’Extended_Digits 


Fixed Point 

•ExtendedJmage 
’Extended_Value 
’Extended_Fore 
’Extended_^ 


For int^er and enumeration types, the *Extended_Value attribute is identical to 
the ’Value attribute. For enumeration types, the ’£xtended_Width attribute is 
identical to the ’\^^dth attribute. 


The extended attributes can be used without the overhead of including Tett_IO in 
the linked program. The following examples Hlustrate the difference between 
instantiating Text_IO.Float_IO to convert a float value to a string and using 
Float’Extended^linage: 


vith Tezt_ZO: 

function Convert_^To_String ( PI : Float ) return String Is 
Teap_Str : StrLig (1 .. 6 * Float'Digits ); 
package Flt^IO Is nev Text^lO.FIoat_,ZO (Float); 
begin 

Flt_IO.Put < Tenp_Str, FI ); 
ret\im Teiitp_Str; 
end Convert_To_Strlng; 


function Convert_To__Strlng__No__Tezt_IO( FI : Float ) return String Is 
begin 

return Float'Extended^Image ( FI ); 
and Convert_To_Strlng_No^Text_IO; 


with Text_IO, Convert_To_Strlng, Convert_To_Strlng_Ho_Text_IO; 
procedTire Shov_Dlfferenc_Converslons Is ” ” ” ” ” 

Value : Float :« 10.03376; 
begin 

Text_10.Put_Llne ( "Using the Convert_To__Strlng, the value of 
the variable Is : " & Convert_To_Strlng 7 Value ) ); 

Text_I0.Put_Llne < "Using the Convert_To_Strlng__No_Text_IO, 
the value Is : " & Convert_To_StrlngjNo__Text_10'’( Value”) ); 
end Show Dlfferent_Converslons; ” 


REF-1878N-V1J(SUN4JE:68) 15JAN92 


3-15 








Integer attributes 


TeleGen2 for SPARC-E63 


3.102.3.1. Integer attributes 
'ExtendedJmage 

Z' Exteiided^^Ioage (Item, Vldth, Base, Based, Spaee__Zf_Fosltive) 

Returns the image associated with Item as defined in TDtt_IO.Integer_IO. 
Hie Text_IO definition states that the value of Item is an integer literd with 
no underlines, no exponent, no leading zeros (but a sin^e zero for the zero 
value), and a minus sign if negative. If the resulting sequence of characters 
to be output has fewer than Width characters, leading places are first 
ouqiut to make tqi the difference. (LRM 143.7:10,143.7:11) 

For a prefix X that is a discrete type ot subQpe, this attribute is a function 
that may have more than one parameter. The parameter Item must be an 
integer value. The resulting string is without underlines, leading zeros, or 
trailing ^ces. 

Parameters 

Item The item for which you want the image; it is passed to the 
function. Required. 

Width The minimum number of characters to be in the string 

that is returned. If no width is specified, the default (0) is 
assumed. (^tionaL 

Base The base in which the image is to be displayed. If no base 
is ^ledfied, the default (10) is assumed. CJptional. 

Based An indication of whether you want the string returned to 
be in base notation or not If no preference is specified, 
the default (false) is assumed. Optional. 

Space_Zf_Pos Itive An indkation of whether or not a positive integer should 

be prefixed with a space in the string returned. If no 
preference is specified, the default (false) is assumed. 
Optional. 

Examples 

subtype Z is Integer Range -10..16; 

Values yielded for selected parameters: 


Z'Eztended_Image(5) - "5" 

Z'Extended_Image(5,0) - "5" 

Z'Extended_Image(5,2} a • 5" 

Z'Extended_,I]Bage(5,0,2) - "101" 


3-16 


REF-187SN.V1JI(SUN4JE68) 1SJAN92 



LRM Annotations 


Integer attributes 


X'Estended_Ifflag«(5,4,2) 

X'Eztended_Image(5,0,2,True) 

X*Extended_Zfflag6(5,0,10,False) 

X'Extended_Zfflage(5,0,10,False,True) 
X'Extended_Iaage(*l,0,10,False,False) 
X'Extended_Iaage(•1,0,10,False,True) 
X* Extended^^Image(-1,1,10,False,True) 
X*Extended_Iaage(-1,0,2,True,True) 

X'Bxtanded_Image(-1,10,2,True,True) 


" 101 " 

" 2 # 101 #" 
ff Jfl 

If Jft 

--2m’' 

- -2m- 


IIEF-1878N-VU(SUN4JE:68) 15JAN92 


3-17 





Integer attributes 


TeieGen2 for SPARC-E68 


’Extanded__Value 

Z'Extended_Valua(Item) 

Returns the value associated with Item as defined in Text__IO Jnteger_IO. 
The Text^IO definition states that given a string, it reads an integer v^ue 
from the beginning of the string. The value returned corresponds to the 
sequence irqjut (LRM 14 J.7:14) 

For a prefix X that is a discrete type or subtype, this attribute is a function 
with a single parameter. The ac^ parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint_Error is raised. 

Parameter 

Item A parameter of the predefined type string; it is passed to 

the fiuiction. The type of the returned value is the base 
type X. Required. 

Examples 

subtype X Is Integer Range >10..16; 

Values yielded for selected parameters: 


X'Extended 7alue<"5") - 5 

X'Extended“7alue(" 5") - 5 

X'Extended“Value<"2/^01#") - 5 

X'Extended__Value("-l") <■ -1 

X'Extended Value(" -1") - -I 


MS 


REF-1878N-VlJ(SUN4i:68) 15JAN92 




LRM Annotations 


Integer attributes 


’ExtondedJMdth 

X'Ext«nd«d_tfldth(Base,Based,Space_If_Fosltlve) 

Returns the width for subtype of X. For a prefix X that is a discrete 
subtype, this attribute is a hmction that may have mult^le parameters. Tl:is 
attribute yields the maximum image length over all values of the type or 
subQpe a 

Paramoters 


Bate The base for which the width will be calculated If no base 
is specified, the de&ult (10) is assumed Optional 

Baaed An indication of whether the subtype is stated in based 

notation. If no value for based is specified, the default 
(false) is assumed Optional 


Spac8_If__Posltlve An indication of whether or not the sign bit of a positive 

integer is included in the string returned If no preference 
is ^lecified, the default (false) is assumed. Optional. 

Examples 

sobtTpe X it Integer Range *10..16; 


Values yielded for selected parameters: 


X'Extended Vldth 

- 3 -"-JO* 

X'* tended"width(10) 

- 3 -"-JO" 

X'bztended”»ldth(2) 

- 5 -"lOdOCr 

X'Extended_yidth(10,True) 

- 7 -"-JO#JO#" 

X'Extended_^Vidth(2 .True) 

- 8 -"2#J0000#" 

X'Extende d_Vldth(10.False,True) 

- 3 -"JO" 

X'Extended_iridth(10,True,False) 

- 7 -".JO#JO#" 

X'Extende d_yidth(10,True,True) 

- 7 -"J0#J(5#" 

X'ExtendedJVidth(2,True,True > 

- 9 -"2#JOOOO#' 

X'Extended_Vidth(2.False.True) 

- 6 -"JOOOO" 


R£F-1878N-V1J[(SUN4£68) 15JAN92 


3-19 








Enumeration type attributes TeleGen2 for SPARC*E68 


3.10uL3.2. Enumeration type attributes 
’Ext^dedjmaga 

X'Extended_^Zsage(Item.Width,Uppercase) 

Returns the image associated with Item as defined in 
Tott_IO.Enumeration_IO. The Text_IO definition states that given an 
enumeration literal, it will output the'^ue of the enumeration literal (either 
an identifier or a character literal). The character case parameter is 
ignored for character literals. (L^ 143.9:9) 

FtM* a prefix X that is a discrete ^pe or subtype; this attnbute is a function 
that may have more that one parameter. The parameter Item must be an 
enumeration value. The image of an enumeration value is the 
corresponding identifier, which may have character case and return string 
width specified. 

Parameters 


Item The item for which you want the image; it is passed to the 
function. Required. 

Width The minimum number of characters to be in the string 
that is returned. If no width is specified, the default (0) is 
assumed. If the Width specified is larger than the image 
of Item, the return string is padded with trailing spaces. If 
the Width specified is smaller than the image of Item, the 
default is assumed and the image of the enumeration value 
is output completely. Optional. 


Uppercase An indication of whether the returned string is in upper 

case characters. In the case of an enumeration type where 
the enumeration literals are character literals. Uppercase 
is ignored and the case specified by the type definition is 
takea If no preference is specific^ the default (true) is 
assumed. Optional. 


3-20 


REF.1878N.V1JI(SUN4.E68) 15JAN92 



LRM Annotations 


Enumeration type attributes 


Examples 

type Z is (red, green, blue, purple); 
type T Is <*«», »B', »c', 'D'); 

Values yielded for selected parameters; 

Z' Zi;tended_Ifflege (red) 
Z'Extended_Iaege(red, 4) 

Z'Excended_Iin«ge (red, 2 ) 
Z'Eztended^Ioage(red,0,false) 
Z'Eztended_Ifflage(red,10,false) 

T'Eztended_Zfflage('a') 

Y'Eztended^Image('B') 
T'Eztended__Zmage('a* .6) 
T'Eztended_Zfflage('a',0,Crue) 


REF-1878N-V1JI(SUN4J:68) 15JAN92 3-21 


- "RED" 

■ "RED " 

■ "RED" 

- "red" 
"red 

«■ 

It f It 






Enumeration type attributes 


TeleGen2 for SPARC-E68 


’Ext6nded_Va!ue 

Z'Eztended_^Valu« (Item) 

Returns the image associated with Item as defined in 
Tcxt_IO.Enumeration_IO. The Toct__IO definition states that it reads an 
enumeration value from the b^inning of the given string and returns the 
value of the eniuneration litoal that corresponds to the sequence input 
(LRM 143.9:11) 

For a prefix X that is a discrete type or subtype, this attribute is a function 
with a single parameter. The ac^ parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint_Error is raised. 

Parameter 

Item A parameter of the predefined Qpe string; it is passed to 
the function. The type of the returned value is the base 
type of X Required. 

Examples 

type Z Is (red, green, blue, purple); 


Values yielded for selected parameters: 

Z'Extended_Value("red") 
Z'Extended_Value<" green") 
Z’Extended__Value(" Purple") 
Z'Extended Value(" GreEn ") 


- red 

- green 
purple 
green 


3-22 


IUE:F-1878N.Via(SUN4J:68) 15JAN92 





LRM Annotations 


Enumeration type attributes 


’Extended_Wldth 

Z*Eztendfld^Vldth 

Returns the width for subQpe of X 

For a prefix X that is a discrete type or subtype; this attribute is a function. 
This attribute yields the maximum image length over all values of the 
enumeration Qpe or subtype X 

Parameters 

There are no {^rameters to this function. This function returns the width of 
the largest (width) enumeration literal in the enumeration type specified by 
X 

Examples 

type Z la (red, green, blue, purple); 
type Z Is (Zl, Z12, Z123, Z1234); 


Values yielded: 

Z'Extended Vidth -6 -ytuple’ 

2'Extended“width - 5 -•XllST 


REF-1878N-V1J(SUN4J:68) 15JAN92 


3-23 




N_ f 


Floating point attributes TeleGen2 for SPARC-E68 


ai(X2.3.3. Ficating point attributes 
’Extendedjmage 

X' Ext6nded_^Zfflage (Item. Fore, Af t, Exp, Base, Based) 

Returns the image associated with Item as defined in Tott_IO.Float_IO. 

The Tcct_IO definition states that it outputs the value of the param^er Item 
as a deci^ literal with the format defined by the other parameters. If the 
value is negative, a minus sign is included in the integer part of the vralue of 
Item. If Eq) is 0, the integer part of the output has as many digits as are 
needed to represent the integer part of the >^ue of Item or is zero if the 
value of Item has no integer part (LRM 143.8:13,143.8:15) 

Item must be a Real value. The resulting string is without underlines or 
trailing spaces. 

Parameters 

Item The item for which you want the image; it is passed to the 
function. Required. 

For* The minimum number of characters for the integer part of 
the decimal representation in the return string. This 
includes a minus sign if the value is negative and the base 
with the’#’ifbased notation is specified. If the integer 
part to be ouq}ut has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default vdue (2) is 
assumed Optional. 

Aft The minimum number of decimal digits after the decimal 

point to accommodate the precision desired If the delta 
of the type or subtype is greater than 0.1, then Aft is 1. If 
no Aft is specified the default (X’Digits-1) is assumed If 
based notation is specified, the trailing ’#’ is included in 
Alt Optional 

Exp The minimum number of digits in the e^qponent The 

exponent consists of a sign and the exponent possibly with 
leading zeros. If no Exp is specified the de&ult (3 ) is 
assumed If Exp is 0, no exponent is used Optional 

Base The base that the image is to be displayed in. If.no base is 
specified, the default (10) is assum^. Optional. 

Based An indication of whether you want the string returned to 
be in based notation or not If no preference is specified, 
the default (false) is assumed. Optional 


3-24 


REF-1878N.V1.1(SUN4JX8) 1SJAN92 




LRM Annotations 


Floating point attributes 


Examples 

type X is digits 5 range -10.0 .. 16.0; 


Values yielded for selected parameters: 

X'Eztended^Isiage(5.0) 
X'Extended^ImagefS.0,1) 
X'Ext«nded_^Image(-5.0,1) 

X' Extended__Ioage (5.0.2,0 ) 
X*Eztended__Iaage (5.0,2,0.0) 
X'Eztended_^Iaage(5.0,2.0.0,2) 

X'Extended'lfflsge(5.0,2,0,0,2.True) 
X'Extended“lnage(5.0,2,2,3,2.True) 


" 5.0000E+00" 
"5.0000E+00" 
•-5.0000E+00" 
« 5.0E+00" 

" 5.0" 

"101.0" 

"2#101.0r 

"2tfl.l#E+02" 


REF4878N-VU(SUN4JE68) 15JAN92 


3-25 



- . ■/ . / 


I w py y i g i^pijiglfiwpiwiPPWwwiyfwyiwiwffBfiBwcyi*^^ 


1 


Floating point attributes TeleGen2 for SPARC>E68 


’Extencled_\^lue 

Z'Extend«d_Value(Item) 

Returns the value associated with Item as defined in Text_IO Jloat_IO. 

The Text_IO definition states that it sk^ any leading zeros, then reads a 
plus or minus sign if present then reads the string according to the syntax of 
a real literal The return value is that which corre^nds to the sequence 
input (LRM 143.8:9,143.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
with a single parameter. The ac^ parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint^Error is raised. 

Parameter 

Ztetn A parameter of the predefined type string; it is passed to 

the function. The type of the returned value is the base 
type of the input string. Required. 

Examples 

type X is digits 5 range >10.0 .. 16.0; 

Values yielded for selected parameters: 

X'Extended Value<"5.0") - 5.0 

X'Extended”Value("0.5El") - 5.0 

X'Extended"Value<"2//1.01#E2") - 5.0 












LRM Annotations Floating point attributes 


’Extended_Diglts 

Z'Extended_Diglts(Base) 

Returns the number of digits using base in the mantissa of model numbers 
of the subtype X. 

Parameter 

• Bate The base that the subtype is defined in. If no base is 
specified, the default (10) is assumed Optional 

Examples 

type Z Is digits S range -10.0 .. 16.0; 

Values yielded: 

X'Extended_Dlglts - 5 


REF.lg7gN-VlJ(Sl}N4X68) 15JAN92 


3-27 












Fixed point attributes TeieGen2 for SPARC-E68 


3.10^3.4. Fix^ point attributes 
’Extsndedjmage 

X'Extended_Ifflage(Item,Fore,Aft,Exp,Base,Based) 

Returns the image associated with Item as defined in Tort_IO.Fixed_IO. 
The Tatt_IO definition states that it outputs the value of the parameter Item 
as a decimal literal with the format defined by the other parameters. If the 
value is negativti, a minus sign is included in the integer part of the value of 
Item. If E:q> is 0, the integer part of the ouQ^ut has as many digits as are 
needed to rqiresent the integer part of the ^ue of Item or is zero if the 
value of Item has no integer part (LRM 143.8:13,143.8:15) 

For a prefix X that is a discrete or subtype; this attribute is a function 
that may have more than one parameter. The parameter Item must be a 
Real value. The resulting string is without underlines or trailing spaces. 

Parameters 

Item The item for whkh you want the image; it is passed to the 

function. Required. 

Fore The minimum number of cliaracters for the integer part of 
the decimal representation in the return string. This 
includes a minus sign if the value is negative and the base 
with the '#’ if based notation is specified. If the integer 
part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is 
assumed. Optional. 

Aft The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta 
of the type or subtype is greater than 0.1, then Aft is 1. If 
no Aft is specified, the default (X’Digits*!) is assumed. If 
based notation is specified, the trailing '#’ is included in 
Optional. 

Exp The minimum number of digits in the exponent; the 

exponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is 
assumed. If Exp is 0, no exponent is used. Optional 

Base The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional. 


3-28 


REF-1878N.V1J(SUN4J:68) 15JAN92 





LRM Annotations 


Fixed point attributes 


Based An indication of whether you want the string returned to 
be in based notation or not If no preference is specified, 
the default (false) is assumed. Optional. 


Examples 

type X is delta 0.1 range >10.0 .. 17.0; 

Values yielded for selected parameters; 

Z'E3ctended_Image(5.0) > 

X'Extended_Image(5.0,l) > 

X'Extended_I]nage(*5.0,l) 
X'E3ctanded_lmage(5.0,2,0) * 

X'Extended_Iaage(5.0,2,0,0) - 

X'Extended_Znage(5.0,2,0,0,2) > 

X'Eztended_Image(5.0,2,0,0,2,Txue) ■> 

X'Extended_Zmage(5.0,2,2,3,2,Tnie) - 


" 5.00E+00" 
"5.00E+00" 
"-5.00E+00" 
" 5.0E+00" 

" 5.0" 
• 101 . 0 " 
" 2 # 101 . 0 #" 
"2//l.l#E+02' 


REF-1878N-V1J(SUN4JE68) 15JAN92 


3-29 


















Fixed point attributes 


TeieGen2 for SPARC-E68 


’ExtandddJ^lue 

X'Extendttd_Value(Image) 

Returns the value associated with Item as defined in Text_JO.Fixed^IO. The 
Text_IO definition states that it skips any leading zeros, reads a plus or 
minus sign if present, then reads the string according to the ^tax of a real 
literal The return value is thxit which corre^nds to the sequence input 
(LRM 143.8:9,143.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
with a sin^e parameter. The actual parameter Item must be of predefined 
Qpe string. Any leading or trailing spaces in the string X are ignored In 
the case where an illegal string is passed, a Constraint_Error is raised 

Parameter 

Image Parameter of the predefined Qpe string. The type of the 
returned value is the base type of the input string. 
Required 

Examples 

type X is delta O.I range -10.0 .. 17.0; 

Values yielded for selected parameters: 

X'Extended_Value("5.0") - 5.0 

X'Extended‘’value("0.5El") - 5.0 

X'Extended“value("2n.01//E2"> - 5.0 


3-30 


REF-1878N-Via(SUN4JE:68) 1SJAN92 






LRM Annotations 


Rxed point attributes 


’Extended_Ford 

Z'Extended_Fore(Base,Based) 

Returns the minimum number of dtaracters required for the integer part of 

the based representation of X. 

Parameters 

Base The base in whkh the subQpe is to be displayed. If no 
base is q)ecifled, the default (10) is assumed Optional. 

Based An indication of whether you want the string returned to 

be in based notation or not If no preference is specified 
the default (false) is assxuned Optional 

Examples 

type Z Is delta 0.1 range >10.0 .. 17.1; 

Values yielded for selected parameters: 

Z'Bxtended Fore - 3 -- "-10" 

Z’Extended”Fore(2) - 6 — " 10001" 


REF.1878N.V1J(SUN4JE68) 15JAN92 


3^1 












Fixed point attributes 


TeleG®n2 for SPARC-E68 


'ExtendodJVft 

Z'Extanded^Aft(B«sa,Basad) 

Returns the miniTniim number of characters required for the fractional part 
of the based rqiresentation of X 

Parameters 

Base The base in which the subtype is to be displayed If no 

base is ^ledGed, the default (10) is assumed Optional. 

Basad An indkation of whether you want the string returned to 
be in based notation or not If no preference is specified, 
the default (false) is assumed Optional 

Examples 

CTpa Z Is delta 0.1 range -10.0 .. 17.1; 

Values yielded for selected parameters: 

Z’Extandad Aft •- 1 -Tpom 0.1 
Z'Extandad~Aft<2) -4 ^ "OOOrpom 2*0.0001* 




REF-lS78N-Via(SUN4£68) 15JAN92 




t I 


LRM Annotations 


Package System 


3.10.3. (3) Package System 


with Cschecked_Conv«rslon; 
p«ckagfl System is 


.. CUSTOMIZABLE VALUES 


type Heme Is (TeleGenZ); 

Systea^Neme : constant name :■> TeleGenZ; 

Memory_Si 2 e : constant (2 ** 31) -1; --Available memory, in storage u] 

Tick : constant 1.0 / 100.0; --Basic clock rate, in seconds 


type Task^Cata is 
record 
null; 

end record; 


-• Adaptation-specific customization information 
•• for task objects. 


-- NOR-CUSTOMIZABLE, IMFLEMENTATION-DEPENDENT VALUES 


Storage Unit 
Min Int" 
Max“lnt 
Max_Digits 
Maz_Mantissa 
Fine Delta 


: constant 8; 

; constant ;« -<2 ** 31); 

: constant <2 ** 31) - 1; 

: constant :> 15; 

: constant :* 31; 

: constant 1.0 / (2 ** Maz_Hantissa); 


subtype Priority is Integer Range 0 .. 63; 


— ADDRESS TYPE SUPPORT 


type Memory is private; 
type Address is access Memory; 


— Enstires compatibility between addresses and access types. 
-- Also provides implicit NULL initial value. 


REF.1878N-V1L(SUN4J:68) 15JAN92 


3-33 





Package System 


TeleGen2 for SPARC-E68 


Rull_Address: constant Address null; 

-- Initial value for any Address object 


type Address_Value Is range -<2**31)..<2**31)-1; 

.. A nuaerlc representation of logical addresses for use In address clauses 


Bex 80000000 
Box'*90000000 
Bex**A0000000 
Hex''BOOOOOOO 
Eex'cOOOOOOO 
Bex'‘D0000000 
Bex‘’E0000000 
Hex'FOOOOOOO 


constant Address^Value 
constant Address__Value 
constant Address^Value 
constant Addreas^Value 
constant Addreas_^Value 
constant Address^Value 
constant Address^Value 
constant Address Value 


16/jf8 0000000]^: 

16)?70000000i!^: 

16^600000004-. 

164500000004; 

164^00000004; 

164300000004; 

164200000004; 

16/A0000000#i 


-• Define nuaerlc offsets to aid In Address calculations 
.. Example: 

• - for Bardvare use at location (BeTt^FOOOOOOO 16iS>2345678//); 


function Location Is nev nnchecked_,Converslon (Address^Value, Address); 

•• Kay be used In address clauses: 

-- Object: Some_Type; 

-- for Object use at Location (164^0004); 


ftinctlon Label (Name: String) return Address; 
pragma Interface (BETA, Label); 

-- The LABEL meta*functlon allows a link name to be specified as address 
•• for an Imported object In an address clause: 

-- Object: Some_Type; 

-- for Object use at Label("OBJECT$$LINK_NAME"); 

•- System.Label returns Bull^Address for non>llteral parameters. 


— ERKOR REPORTING SUPPORT 


procedure Report__Error; 

pragma Interface (Assembly, Report_Error); 

pragma Interface_Informstlon (Report_^Error, "REP0RT__ERR0R"); 


3 ^ 


REF.1878N-V1.1(SUN4J:68) 1SJAN92 




LRM Annotations 


Packago System 


-- Report^Error can only be called in an exception handler and provides 
— an exception traceback like tracebacks provided for unhandled 
•• exceptions 


— CALL SUPPORT 


type Subprograa_Value IS 
record 

Proc_addr : Address; 
Parent_fraBe : Address; 
end record; 


>• Value returned by the implesentation-defined 'Subprogram_Value 
•• attribute. The attribute is not defined for subprograms with 
•• parameters. 


private 


end System: 


3.10.3.1. System.Label 

The System.Label meta-function is provided to allow you to address objects by a 
linker-recognized label name. This function takes a single string literal as a 
parameter and returns a value of ^temAddress. The function simply returns 
the run-dme address of the tq^propriate resolved link name, the primary purpose 
being to addressx>bjects creat^ and referenced from other languages. 

• When used in an address clause, System.Label indicates that the Ada 

object or subprogram is to be referenced by a label name. The actual 
object must created in some other unit (normalfy by another 

language), and this capability simply allows you to import that object and 
reference it in Ada. Any ccplkit or default initialization will be applied 
to the object For exanq)le, if the object is declared to be of an access 
type, it will be initialized to NULL 

• When used in an expression, System-Label provides the link time 
address of any name, such as a name for an object or a subprogram. 


*EF.1878N-VlJ(SUN4j:fi8) 15JAN92 


3-35 




teleGen2 characteristics 


TeleGen2 for SPAROE68 


3.ia3.2. Systeni.Report_Error 

Rq)ort_Error must be called from directly within an exception handler. This 
routine displays the normal exception tnuidjack information to standard output 
It is essentially the same tracdsack that could be obtained if the exception were 
unhanefled and propagated out of the program. Report^Error simply allows you 
to handle the excq)tion and still display this information. You may also want to 
use this capability in a user handler at the end of a task since exceptions in tasks 
will not be propagated to the main program. You can also get this capability for all 
tasks by using the - X binder switch. 

For details on the ou^ut, refer to Section 2.9, “Excq)tion handling.” 

3.10.4. (4) Restrictions on representation clauses 

Representation clauses are fully supported with the following exceptions: 

• Enumeration representation clauses are supported for all enumeration 
Qrpes excq}t Boolean types. 

• Record representation clauses are supported except for records with 
dynamically-sized components. 

• Pragma Pack is supported except for dynamically-sized components. 

3.10.5. (5) lmplementation<generated names 

TeleGen2 has no implementation-generated names. 

3.10.6. (6) Address clause expression interpretation 

An expression that appears in an object address clause is interpreted as the 
address of the first storage unit of the object. 

3.10.7. (7) Restrictions on unchecked conversions 

Unchecked programming is supported excq>t for unchecked type conversions 
vdiere the destination type is an unconstrained record or array type. 

3.10.8. (8) Implementation-dependent characteristics of the I/O 
packages 

Text_IO has the following in^lementation-dqjendent characteristics: . 
type Count Is range 0..<2 ** 31)-2; 

subtype Field Is Integer range 0..1000; 


3-36 


REF-1878N-V1.1(SUN4.E68) 15JAN92 




LRM Annotations 


TeleGan2 characteristics 


The standard run-time sublibrary contains preinstantiated versions of 
Tett_IO.Integer_IO for types Short_Integer, Integer, and Long_Integer, and of 
Tact_IO.Fioat_IO for types Float and Long_FloaL Use the following packages to 
eliminate mult^le instantiations of the Te:[t_IO packages: 

Short_IntegerJTexi_IO 

Integer_Te5Ct_To 

Long_Integ^Tott_IO 

Float_Tcstt_IO 

Long_FloaTText__IO 




R£F-1878N-V1J(SUN4J;68) 15JAN92 




TeleGena for SPAROE63 


3-38 


REF-18>8N.V1.1(SUN4J:68) 15JAN92 











