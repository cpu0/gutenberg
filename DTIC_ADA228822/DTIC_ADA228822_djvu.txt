AD-A228 822 


X^SK: UR20 | 
CDRL: 00990 



BTIC FILE COPY 


UR20 — Process/Environment Integration 
Ada Command Environment (ACE) 
Version 8.0 SunOS Implementation 

Version Description Document 



STARS-RC-00990/001 /OO 
25 October 1990 


I 

^■N0Vi4199Q| |j 


XI 13 119 


I 


lY’oYf 










REPORT DOCUMENfATION PAGE 


Form Approved 
0MB No 0704-018B 


pjonc 'eoc- ‘'c cf Mcmatior *s eitimtiM tc A««f«qe • **cor oe* ’9iOOf‘\e. 'nciuoirs tre H'we fof rev»*’»Nt»ng mstrucTions. vf oau iou'c« 

ane f^atntainng the oau heeoeo. ane cof^Dtettn^ revte<«^*nQ the ccneaton o* mto^ation Seha'commehtt reoaromq th>i burden estimate O' an* ctner su)ta ot tn<k 
< 0 Meat 3 r. :* n^ormation. 'nc.uoing sw 99 estiont (or reoucmq thit ouroen to Aathm^ton neadouartert Services. Directorate tor information Ooerations and Keoom (2iS jetterson 
OarisHiQhAav. Suite t2C^ Arlington vA 222Q2’4307. and tc tneO*^ice 0 * Manaoement and Budget ^aDermcrx Redumon Project (0704^)t$8). Washmoton. DC «CS03 


1. AGENCY USE ONLY (Leive blank) 2. REPORT OATE 

25 October 1990 


4. TITLE AND SUBTITLE 

Ada Command Environment (ACE) 


6. AUTHOR(S) 


3. REPORT TYPE AND OATES COVERED 

Version Description Document 


5. FUNDING NUMBERS 

STARS Contract 
F19628-88-D-0031 


William P. Loftus 


7. PERFORMING ORGANIZATION NAME(S) AND AODRESS(ES) 

Unisys Corporation 
12010 Sunrise Valley Drive 
Reston, VA 22091 


8 PERFORMING ORGANIZATION 
REPORT NUMBER 

GR-7670-1163(NP) 


9. SPONSORING. MONITORING AGENCY NAME(S) AND AODRESS(ES) 

Department of the Air Force 

Headquarters, Electronic Systems Division (AFSC) 
Hanscom AFB, MA 01731-5000 


10. SPONSORING MONITORING 
AGENCY REPORT NUMBER 


00990 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 


12b. DISTRIBUTION CODE 


Approved for public release; 
distribution is unlimited 


13. ABSTRACT (Maximum 200 words) 


^The Ada Command Environment (ACE) is an interactive Ada environment 
coupled with a set of Ada abstract data types (ADTs). The interactive 
environment allows users to rapidly prototype general Ada 
applications, while the ADTs allow prototyping of applications for 
particular domains, such as X Window System applications. In 
addition, the ADTs provide an Ada view of underlying applications, 
which when combined with the interactive environment replaces the 
traditional role of a command language. When using ACE, Ada becomes 
the command language as well as the programming language. This 
yersion of ACE includes support for X Window System prototyping. 

' A/', - - /. ■" A/o. 


15. NUMBER OF PAGES 


16. PRICE CODE 


14. SUBJECT TERMS ^ 

, ' ' ''■ / 

Ada Command Environment (ACE) ' 'Ji 

Abstract Data Types (ADT) 

_ _ 


17. security CLASSIFICATION 18. SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 20. LIMITATION OF ABSTRACT 
OF REPORT OF THIS PAGE OF ABSTRACT j 


Unclassified 


Unclassified 


Unclassified 


SAR 





















TASK: UR20 
CDRL: 00990 
25 October 1990 


VERSION DESCRIPTION DOCUMENT 
For The 

SOFTWARE TECHNOLOGY FOR ADAPTABLE, RELIABLE SYSTEMS 

(STARS) 


Ada Command Environment (ACE) 
Version 8.0 

SunOS Implementation 


STARS-RC-00990/001/00 
Publication No. GR-7670-1163(NP) 
25 October 1990 


Data Type: A005, Informal Technical Data 

CONTRACT NO. F19628-88-D-0031 
Delivery Order 0002 


Prepared for: 

Electronic Systems Division 
Air Force Systems Command, USAF 
Hanscom AFB, MA 01731-5000 


Prepared by: 

Unisys Defense Systems 
Tactical Systems Division 
12010 Sunrise Valley Drive 
Reston, VA 22091 







TASK: UR20 
CDRL; 00990 
25 October 1990 


VERSION DESCRIPTION DOCUMENT 
For The 

SOFTWARE TECHNOLOGY FOR ADAPTABLE, RELIABLE SYSTEMS 

(STARS) 


Ada Command Environment (ACE) 
Version 8.0 

SunOS Implementation 


STARS-RC-00990/001/00 
Publication No. GR-7670-1163(NP) 
25 October 1990 


Data Type: A005, Informal Technical Data 

CONTRACT NO. F19628-88-D-0031 
Delivery Order 0002 


Prepared for: 

Electronic Systems Division 
Air Force Systems Command, USAF 
Hanscom AFB, MA 01731-5000 


Prepared by: 

Unisys Defense Systems 
Tactical Systems Division 
12010 Sunrise Valley Drive 
Reston, VA 22091 





25 October 1990 


ST ARS-RC-00990/001/00 


PREFACE 


This document was prepared by Unisys Corporation, Valley Forge Laboratories, in support of 
the Unisys STARS Prime contract under the Process/Environment Integration usk (UR20). 
This CDRL, 00990, is t)^ A005 (Informal Technical Data) and is entitled "Ada Command 
Environment (ACE) Version 8.0, Version Description Document". 


Reviewed by; 



Approved by: 







Hans W. Polzer, Progn^ Manager 


Aoossslon Fop 


NTIS GRASbl 
DTIC TAB 
Unannounced 
JuGtlf Ic.atlcEL 




□ 

□ 



by. 


Dlst 


Avai lability Codas 
Avail aad/or 
Special 


25 October 1990 


STARS-RC-00990/001 /OO 


Contents 

1 SCOPE 1 

1.1 Identification. 1 

1.2 System Overview. 1 

2 RELATED SOFTWARE 1 

3 VERSION DESCRIPTION 1 

3.1 Inventory of Contents. 1 

3.1.1 Subdirectory: ace/code. 2 

3.1.1.1 Subdirectory: ace/code/common. 2 

3.1.1.2 Subdirectory: ace/code/design. 2 

3.1.1.2.1 Subdirectory: ace/code/design/telesoft. 2 

3.1.1.2.2 Subdirectory: ace/code/design/vads. 3 

3.1.1.3 Subdirectory: ace/code/src. 3 

3.1.1.3.1 Subdirectory: ace/code/src/telesoft. 3 

3.1.1.3.2 Subdirectory: ace/code/src/vads. 3 

3.1.1.3.3 Subdirectory: ace/code/src/C. 3 

3.1.1.3.4 Subdirectory: ace/code/src/Scanner_specs. . . 3 

3.1.1.3.5 Subdirectory: ace/code/src/Parserjspecs. ... 3 

3.1.2 Subdirectory: /bf ace/bin. 3 

3.1.3 Subdirectory: ace/startups. 4 

3.1.4 Subdirectory: docs. 4 

3.2 Changes Installed. 4 

3.2.1 Xt Toolkit Support. 4 

3.2.2 Command Histories. 5 

3.2.3 Static Semantics Support. 6 

3.2.4 Expanded String Arguments. 6 

3.2.5 Miscellaneous. 6 

3.3 Adaptation Data. 7 

3.3.1 Operating Environment . 7 

3.3.2 Development Environment. 7 

3.3.3 Configuration-Unique Data . 8 

3.3.3.1 System_Dependent_Routines Package. 8 

3.3.3.2 Ace-UniversaLTypes Package. 8 

3.3.3.3 TTY-Operations Package. 9 

3.3.3.4 Command Language Scripts. 9 

3.4 Interface Compatibility. 9 

3.5 Installation Instructions . 9 

3.5.1 VADS Build Procedure. 10 

3.5.2 Startup Files . 11 

3.5.3 Execution of ACE. 12 

3.6 Potential Problems. 12 

3.7 Enhancements. 12 


Page ii 









































25 October 1990 


STARS-RC-00990/001/00 


4 NOTES 13 

A Appendix: Inventory of Contents 14 

B Appendix: Build Scripts 21 

B.l File: BuiId_ACE.var . 21 

B.2 Script: Build_ACE.VADS. 23 

B.3 Script: Build_ACE.TeleSoft . 33 


Page iii 








25 October 1990 


STARS-RC-00990/001/00 


1 SCOPE 

1.1 Identification 

Version Description Document, 

Ada Command Environment (ACE), 
Version 8.0, 

SunOS Implementation 


1.2 System Overview 

A set of Ada abstract data types (ADTs) is the underlying substrate that defines a common, 
Ada-oriented interface to diverse host environments. The Ada ADTs, in conjunction with 
the use of Ada as a command language, serve as a unifying concept in the description of a 
portable Ada command environment. The benefits provided by ADTs and Ada in a software 
engineering environment are extended into the command language arena. The Ada Com¬ 
mand Environment combines the power of Ada as a command language with the description 
of the host environment through ADTs. ACE presents to the user a consistent Ada-oriented, 
development environment that supports a uniform interface across a heterogeneous set of 
development architectures. 

This document provides an overview for version 8.0 of the Ada Command Environment 
(ACE) software. This software was developed in its original form under the STARS Foun¬ 
dations program, administered by the Office of Naval Research. This distribution includes 
modifications to the ACE software in several key areas, which are briefly described below. 


2 RELATED SOFTWARE 

The X Window System, Version 11 Release 3 (X11R3), available through the MIT/X Con¬ 
sortium. 

The Unisys STARS Ada/Xlib bindings (from Version 2 of the Unisys Ada/Xt Toolkit), 
available from Unisys STARSCenter. 

Sun-3/Unix CAIS-A Implementation, Version 4.5.3, available from Unisys STARSCenter. 


3 VERSION DESCRIPTION 
3.1 Inventory of Contents 

The ACE distribution is structured as shown below. The top-level directory ace includes 
PostScript (VDDace.ps) and clear ASCII text (VDDace.tty) versions of this document. 


Page 1 





25 October 1990 


STARS-RC-00990/001/00 


along with a complete directory listing of the ACE distribution (Contents.tty, reproduced 
herein as Appendix A). 


ace 

ace/code 

ace/code/common 

ace/code/common/vads 

ace/code/common/telesoft 

ace/code/design 

ace/code/design/vads 

ace/code/design/telesoft 

ace/code/src 

ace/code/src/vads 

ace/code/src/C 

ace/code/src/Parser_specs 

ace/code/src/Scanner_specs 

ace/code/src/telesoft 

ace/bin 

ace/docs 

ace/startups 


3.1.1 Subdirectory: ace/code 

The code subdirectory contains C shell scripts and associated support files that are needed 
to build ACE from this distribution. The Ada source code for ACE is divided into the 
following code subdirectories; 


3.1.1.1 Subdirectory: ace/code/common. The code/common subdirectory con¬ 
tains reusable Ada code (specifications and implementations) which can be used indepen¬ 
dently of ACE. Included in this directory, in addition to several commonly available packages, 
is a key binding facility that can be used to provide any Ada application with command line 
editing and history functions. 


3.1.1.2 Subdirectory: ace/code/design. The code/design subdirectory contains 
ACE-specific Ada specifications. 


3.1.1.2.1 Subdirectory: ace/code/design/telesoft. This subdirectory contains TeleSoft- 
specific versions of certain Ada specifications. 


Page 2 






25 October 1990 


STAllS-RC-00990/001/00 


3.1.1.2.2 Subdirectory: ace/code/design/vads. This subdirectory contains VADS- 
specifiC versions of certain Ada specifications. 


3.1.1.3 Subdirectory: ace/code/src. The code/src subdirectory contains ACE-specific 
Ada implementations. In addition, three subdirectories contain non-Ada source code and 
grammar definitions for ACE’s lexical scanner and parsers. 


3.1.1.3.1 Subdirectory: ace/code/firc/telesoft. This subdirectory contains TeleSoft- 
specific versions of certain Ada implementations. 


3.1.1.3.2 Subdirectory: ace/code/src/vads. This subdirectory contains VADS-specific 
versions of certain Ada implementations. 


3.1.1.3.3 Subdirectory: ace/code/src/C. This subdirectory contains “C” support 
files. 

3.1.1.3.4 Subdirectory: ace/code/src/Scannerjspecs. This si'bdirectory contains 
the specifications processed by the adalex lexical scanner generator to produce the ACE 
lexical scanner implementation in the source files listed below. This information is provided 
for reference and is not needed for installation or operation of the ACE distribution. 

lex.a 


3.1.1.3.5 Subdirectory: ace/code/src/Parserjspecs. This subdirectory contains the 
specifications processed by the ayacc parser generator to produce the ACE parser imple¬ 
mentation in the source code files listed below. This information is provided for reference 
and is not needed for installation or operation of this ACE distribution. 

compilation-unit.a 

decLpart.a 

seqjof-stmts.a 


3.1.2 Subdirectory: /bf ace/bin 

The bin subdirectory contains Unix C shell scripts that are used by ACE to execute operating 
system functions and aid in window placement. The user must modify these scripts to reflect 
the actual operating environment. 


Page 3 





25 October 1990 


STARS-RC-00990/001/00 


3.1.3 Subdirectory: ace/startups 

This subdirectory contains the interpreted Ada code necessary to define the initial Ada 
environment provided by ACE. 

startup.ace - This file should be copied to the user’s home directory. It is the file 
that is read when ACE is invoked, and it specifies what startup environment that user 
will have. 

acvc.ace - Contains routines necessary to execute the AC VC 1.10 test suite. 

commands.ace - Contains routines that are analogous to commands normally found 
in a command environment (e.g., directory list, edit, compile). 

cpu_time.ace - Defines routines to record and report CPU time 

developer.ace - Defines routines hat ACE developers use (this is not a static set of 
routines). 

startup40.ace - Release 4.0’s startup.ace file. 

standard.ace - Defines standard Ada packages (e.g., TextJo) 

windowing.ace - Defines windowing operations. 

cais.ace - Defines CAIS-A tools and operations. 

bindings.ace - Defines Key mapping functions. 

xt.ace - Defines the ACE interface to the X Window System. 

3.1.4 Subdirectory: docs 

The docs subdirectory contains PostScript (.ps) and clear ASCII text (.tty) versions of the 
ACE user’s manual. 

A complete list of files is contained in Appendix A. 

3.2 Changes Installed 
3.2.1 Xt Toolkit Support 

The major enhancement in Version 8.0 over Version 6.0 (Version 7.0 was an internal release! 
is its extensive support for the X Window System’s Xt toolkit. Ada interfaces are provided 
to the complete Hewlett-Packard widget set, as well as many of the Xt intrinsic functions. 
This makes it possible to prototype Xt widget applications with ACE. 

Files that were added to support Xt prototyping are: 


Page 4 




25 October 1990 


STARS-RC-00990/001/00 


src/ace_hp_widgets.a 
src/ace_widget.a 
src/ace_x_windows.a 
design/ace_hp_widgets.a 
design/ace_widget.a 
design/ace_x_windows.a 
common/hp.vidgets.a 
common/hp.widgets_.a 
common/intrinsics.a 
common/renamed.xlib.types.a 
common/stringdefs.a 
conunon/widget. a 
comjnon/widget.. a 
src/C/xwc.c 
startups/xt.ace 


Files that were modified to support Xt prototyping are: 


src/ebuilt.a 
src/ace_adt.a 
src/system.a 
src/C/cflush.c 
src/C/xws.c 
design/system.a 
startups/commands.ace 
startups/standard.ace 


3.2.2 Command Histories 

Several enhancements were made to the command history code, including the ability to call 
the ACE interpreter from within a key binding. This required modification of: 


common/sinput.a 
cominon/sinput.. a 
common/tty.ops.a 
common/tty_ops_.a 
common/keymap.a 
common/keymap..a 
src/ebuilt.a 
startups/bindings.ace 


Changing the package Sanctified Jnput into a generic caused the addition of: 


Page 5 






25 October 1990 


STARS-RC-00990/001/00 


design/ace.input.a 
src/ace_input.a 


3.2.3 Static Semantics Support 

Support for processing the static semantics of Array declarations and references required 
the modification of: 


src/cexpr.a 
src/semant.a 
src/smgmt.a 

src/compilation.unit.a 
src/decl_part.a 
src/seq_of_stmts.a 

src/Parser_specs/conipilation_unit .y 
src/Parser_specs/decl_part.y 
src/Parser_specs/seq_of_stmts.y 
design/semant.a 


3.2.4 Expanded String Arguments 

The following files were created or modified in order to support the use of expanded names 
in string arguments: 


design/expand.a 
src/expand.a 


3.2.5 Miscellaneous 

Many small problems were fixed. These included determining the correct size of an out string 
parameter to a built-in routine, improper exception handling during subprogram parameter 
elaboration, correctly identifying an expanded name, comment changes, etc. Files that were 
modified are: 


src/ace_adt.a 
src/euser.a 
src/user.a 
src/ebuilt.a 
src/debug.a 
src/atextio.a 
src/context.a 


Page 6 




25 October 1990 


STARS-RC-00990/001 /OO 


src/drtns.a 
src/dump.a 
src/eprag.a 
src/error.a 
src/literl.a 
src/misc.a 
design/debug.a 
design/misc.a 


File src/rwace.a was moved to design/rwace.a. 

File src/observe_window.icn was moved to src/C/observe_window.icn. 

The following files were removed from the distribution, since they were not directly related 
to the execution of ACE; 


bin/move-if-change 
misc/sysenv.a 
sre/eexpand.a 
sre/Make.script_unix 
sre/Makefile.unix_example 
src/C/sunws.c 


3.3 Adaptation Data 

3.3.1 Operating Environment 

The ACE prototype operates on a Sun-3 workstation. ACE provides an interface to the 
X Window System, but may be executed independently, without a supporting windowing 
system. Window manipulation operations are provided with the X Window System Ada/Xlib 
bindings from the Unisys Ada/Xt Toolkit. 

To execute ACE, the suggested configuration is a Sun-3 workstation running: 


SunOS, Version 4.0.3 

MIT X Window System, Version 11, Release 3 (if running ACE with X) 


3.3.2 Development Environment 

To create an ACE executable image, the suggested configuration is a Sun-3 workstation 
running; 


Page 7 





25 October 1990 


STARS-RC-00990/001/00 


SunOS, Version 4.0.3 

MIT X Window System, Version 11, Release 3 (if running ACE with X) 

Verdix Ada Development System, Version 5.5t 

Ada/Xlib binding to the X Window System, from Version 2 of the Unisys 
Ada/Xt Toolkit. 

C compiler provided with SunOS 4.0.3 

Further information on the system dependent parts of ACE and ho\. to port these to other 
environments is given in section 4.0.3 


3.3.3 Configuration-Unique Data 

aCE was designed with portability as one of its primary goals. Operating and Ada compila¬ 
tion system dependent routines have been isolated to the SystemJDependent_Routines 
package, with the minor exceptions noted below. Of the many features designed into ACE, 
the least portable is the interface to the host window system. Operating system dependencies, 
and subsequent symbolic debugger dependencies on the host OS, comprise the remainder of 
configuration-dependent features. 


3.3.3.1 System_Dependent_Routines Package. The SystemJDependent JRoutines 
package contains the procedures which implement file system manipulations and interrupt 
handling (see files system.a and system.cais.a). 

ACE’s hierarchical file system abstract data type (ADT) and command language facilities 
dictate that it provide access to the host file system utilities. Porting considerations between 
different file systems include minor differences in naming conventions (name length and 
lexical character limitations) and more complex differences between how Unix and other 
operating systems treat directory structures. In these situations, it is best to use the host 
OS-supplied routines or the interfaces directly provided by the host Ada compilation system. 

Interrupt handling is very operating system (and system architecture) dependent. Interrupt 
handling is primarily used by the ACE symbolic debugger ADT, but similar mechanisms 
could be used in the future to implement exception handling or Ada tasking. Depending on 
the host OS interface provided by the Ada compilation system, somewhat complex rework 
might be necessary. For example, the Ada compilation systems on the Unisys PC/IT provide 
an Ada interface to handle interrupts. 


3.3.3.2 Ace_UniversaLTypes Package. Data sizes for types such as Integer vary sig¬ 
nificantly from one Ada compilation system to another. In order to isolate this, ACE defines 


Page 8 






25 October 1990 


STARS-RC-00990/001/00 


its own integer type (Ace Jnteger) with an explicit range. This forces the compilation sys¬ 
tem to choose an appropriate machine representation for the Ace Jnteger type or inform 
the user of its inability to do so. 


3.3.3.3 TTY_Operations Package. The TTY_Operations package provides screen 
manipulation routines, which are necessarily configuration dependent. The current imple¬ 
mentation of TTY.Operations uses termcap, a terminal capability database, to handle 
screen manipulation. For most systems there is a public domain implementation of term- 
cap. If a version of termcap is not available for a system that is to run ACE, then the body 
of TTY_Operations would need to be rewritten to remove the references to termcap. 


3.3.3.4 Command Language Scripts. Other current host OS dependencies include 
the use of accessory native command language scripts to provide needed, high-level host 
dependent functionality. This is provided so users can interchange compatible host applica¬ 
tions without recompiling ACE itself. The ace_edit and ace_ada files are two such scripts. 
However, the need for such scripts is defined by the environment implementor, since all 
the functionality provided by the scripts could also be provided in the system environment 
implementation (i.e., the interpreted Ada ADT bodies). 


3.4 Interface Compatibility 

Changes to ACE appearing in this version will not affect other components of the user’s 
system. This is true even though this version introduces a new interface to the X Window 
System library. 


3.5 Installation Instructions 

This section contains the instructions necessary to construct ACE from the source files con¬ 
tained in the version 8.0 distribution. ACE executables have been successfully compiled using 
the Verdix and TeleSoft compilation systems. The Verdix compilation is the recommended 
ruggedized version. The following configurations are supported: 


Verdix, version 5.5t, on SunOS 4.0.3 

• with/without X11R3 support 

• with/without CAIS-A support 

TeleSoft, version 1.4, on SunOS 4.0.3 

• with/without X11R3 support 

• without CAIS-A support 


Page 9 






25 October 1990 


STARS-RC-00990/001 /OO 


Currently, only the Verdix version of ACE supports both CAIS-A interaction and stand¬ 
alone operation. All other versions of ACE are stand-alone. Only the source code for ACE 
is included in this delivery. Contact Unisys STARSCenter for the Ada/X Window System 
Xlib bindings and/or CAIS-A distributions. 


3.5.1 VADS Build Procedure 

1. Edit the environment variables in file Build_ACE.var to reflect the actual operating 
environment. The following environment variables must be modified: 

VADSJBASE (Optional) - identifies the full pathname of the VADS compila¬ 
tion system (e.g., /mybase/compilers/vadsj5.5). Needed only if building with the 
VADS compilation system. 

TELEGEN2 (Optional) - identifies the full pathname of the TeleSoft compila¬ 
tion system (e.g., /mybase/compilers/telegen_1.4). Needed only if building with 
the TeleSoft compilation system. 

ADAJCLIB (Optional) - identifies the full pathname of the Ada libraries for 
the Ada/Xt Toolkit Xlib bindings (e.g., /mybase/adaxt/code/Xlib). Needed only 
if building for operation with an X Window System interface. 

CAIS_LIB (Optional) - identifies the full pathname of the nonshared portion 
of the CAIS-A installation (e.g., /mybase/cais-a/src/nonshared). Needed only if 
you are compiling for operation under the CAIS-A object management system. 

LIB_X_SUPPORT (Optional) - identifies the full pathname of the standard C 
utility library from the X Window System distribution or from the Ada/Xt Toolkit 
(e.g., /mybase/adaxt/code/C/lib.a). Needed only if building for operation with 
an X Window System interface. 

ACE - identifies the full pathname of the top-level ACE directory (e.g., /my- 
base/ace). 

If the $ACE directory is structured as described in this document, no further modi¬ 
fications are necessary. If not, the following additional variables in Build_ACE.var 
will have to be modified to indicate which host directory contains each of the major 
code components of this release: 

ACE-CODE 

ACE-COMMON 

ACE-DESIGN 

ACE-SRC 

ACE-CLIB 

ACE-BIN 

LOG 


Page 10 




25 October 1990 


STARS-RC-00990/001/00 


Other environment variables may need to change, depending on the installer’s system 
configuration. A complete listing of the Build_ACE.var file is included in Appendix 
B. 

2. Execute Build_ACE.VADS, or Build_ACE.TeleSoft, as appropriate, providing 
configuration information when prompted by the script. 


3.5.2 Startup Files 

There are several startup files provided with this distribution (see the startups directory 
for their source). Users may (and should) configure their individual startup.ace file to suit 
their needs. The startup.ace file should reside in a user’s home directory. The following 
code is an example startup.ace: 


1 —pragma echo(on); 

2 

3 — get routines lor measuring CPU. 

4 Interpret_File ("/ace/startups/cpu_time.ace"): 

5 

6 — Variables lor clocking our startup speed. 

7 

8 Start ; Time; 

9 Stop : Time; 

10 

11 — Start ticking 

12 Start := Clock; 

13 

14 Intorpret_File ("/ace/startups/standard.ace"); 

15 Interpret_File ("/ace/startups/commands.ace”); 

16 Interpret_File ("/ace/startups/uindouing.ace”); 

17 Interpret_File ("/ace/startups/bindings.ace"); 

18 

19 — Stop Ticking 

20 Stop := Clock; 

21 

22 — Horn much time? 

23 

24 Put ("Startup CPU seconds: "); 

25 Put_Time(Dillerence(Stop, Start)); 

26 

27 — ASCII Terminal clear to EOL. 

28 Put.Line(Ascii.Esc ft "CK"); 


Page 11 







25 October 1990 


STARS-RC-00990/001/00 


3.5.3 Execution of ACE 

Type ACE at the shell prompt to invoke ACE stand-alone, where ACE is the name of 
the executable made from the compiling and linking steps described above. ACE is in¬ 
voked automatically from CAIS-A as the user’s login shell. Upon startup, the stand-alone 
ACE reads the startup file from the user’s home directory, while the CAIS-A version will 
follow the rules specified in the CAIS-A script for starting ACE. To install the new ACE 
executable and startup.ace into the CAIS-A baseline SEE, replace the existing ACE exe¬ 
cutable (in Baseline_SEE/cais-a/bin/ACE.exec) and the existing ACE startup file (in 
Baseline_SEE/cais-a/lib/startup.ace). See the Unisys STARS Baseline SEE, Virtual 
Interface Implementation 3, Informal Report, 26 September 1989 for more information. 


3.6 Potential Problems 

Several problems are known to exist in the ACE 8.0 distribution: 

1. Non-terminating recursive functions may cause ACE to lose track of declared objects. 
Currently, there is no known workaround (other than not writing non-terminating 
functions). 

2. Calling the Ace_Adt.Interpret procedure recursively is illegal and can cause ACE 
to terminate unexpectedly; sometimes this can occur without a direct call by the user, 
i.e., calling Edit_And Jnterpret during the interruption of an X callback. 

3. Several enumeration values of Key .Bindings.Commands will have no effect when 
used in the Make_Bindings command. They are: 

Get.Current.Line 
Get.Current.Character 
Get.Current.Column 

They will be removed from the enumeration type in the next release. They cannot 
be removed in the current version, since there exists an underlying dependency in the 
Evaluate.BuiltJ[nJSubprogram subprogram. 

4. A function cannot be used as one of the bounds of a String object declaration; the 
workaround is to assign the function value to an object and use the object in the String 
object declaration. 

3.7 Enhancements 

Ultimately, ACE will be an interpreter for the entire Ada language. This will provide the 
foundation for a portable interactive environment for Ada coding. By extending the inter¬ 
preter with complete support for the X Window System, an environment similar to InterLisp 


Page 12 





25 October 1990 


STARS-RC-00990/001 /OO 


and Smalltalk could be created for Ada, which would remove many of the barriers that cur¬ 
rently exist to a rapid prototyping Ada system. 


4 NOTES 


Page 13 




25 October 1990 


STARS-RC-00990/001/00 


A Appendix: Inventory of Contents 

HOTE: *'♦" identifies executables; '•/" identifies directories 

ace: 

Contents.ttf 

VDDace.ps 

VDDace.tty 

bin/ 

code/ 

docs/ 

startups/ 

ace/bin: 

ace_ada* 

ace_edite 

place.observe.eindov.cshe 
ace/code: 

Build_ACE.TeleSoft* 

Build_ACE.VADS* 

Build.ACE.var 
common/ 
design/ 
src/ 

ace/code/common: 
btrees.a 
btrees_.a 
hash.table.a 
hash_table_.a 
bp.sidgets.a 
intrinsics.a 
keymap.a 
keymap..a 
lists.a 
lists..a 

renamed.xlib.types.a 
sinput.a 
sinput_.a 
stringdefs.a 
telesoft/ 
tty.ops.a 
unix.types. a 
vads/ 


Page 14 



25 October 1990 


STARS-RC-00990/001/00 


Bidget.a 

ace/code/coBunon/telesoft: 

common.alb 

common.x.alb 

hp_Bidgats_.a 

tty_ops_.a 

unix_type8_.a 

Bidget_.a 

ace/code/common/vads: 
hp_Bidgets_.a 
tty_op8_.a 
nnix_type8_.a 
Bidget..a 

ace/code/design: 

ace.adt.a 

ace_hp_Bidget8.a 

ace.input.a 

ace.Bidget.a 

ace.x.BindoBB.a 

amain.a 

aprgut.a 

a8td.a 

atextio.a 

auntyp.a 

calendar.a 

common.paraer.a 

compilation.unit.a 

context.a 

cpu.a 

create.a 

ctree.a 

debug.a 

decl_p 2 irt. a 

dir. a 

dr8up.a 

drtn8.a 

dapprt.a 

d8ub8up.a 

dump.a 

error.a 

expand.a 

tilea.a 


Page 15 







25 October 1990 


STARS-RC-00990/001/00 


get. a 
help.a 
lex. a 
lexact.a 
literl.a 
misc.a 
Discs.a 
obj .a 
ooe. a 
preprs.a 
prsdef.a 
rvace.a 
sdb.a 
semant.a 
seq_ol_stmts.a 
set. a 

SDgDS.a 

smgmt.a 

stget.a 

stDtev.a 

string.a 

strt.a 

sts.a 

stset.a 

system.environment..a 
telesolt/ 

tokens.delinition.a 

treeb.a 

user.a 

vads/ 

undobj.a 

vs .a 

xadt.a 

yyerr.a 

ace/code/design/telesolt: 

design.alb 

design.X.alb 

sunviev.a 

system.a 

x.a 


ace/code/design/vads: 

sunviev.a 

system.a 


Page 16 






25 October 1990 


STARS-RC-00990/OO1 /OO 


x.a 


ace/code/src: 

C/ 

Parser.specs/ 

Scanner_specs/ 

ace.adt.a 

ace_hp_vidgets.a 

ace_input.a 

ace.vidget.a 

ace_x_«indoBS.a 

alloc.a 

amain.a 

aprgut.a 

astd.a 

atextio.a 

calendar.a 

carray.a 

cattr.a 

cdot.a 

cexpr.a 

cinlix.a 

Cfflsppt.a 

common.parser.a 

compilation.unit.a 

compilation.nnit.goto.a 

compilation_unit_shilt_reduce.a 

context.a 

create.a 

csmisc.a 

cstmt.a 

csubpgm.a 

ctree.a 

debug.a 

decl_part.a 

decl_part_goto.a 

decl_pazt_8hilt_reduce.a 

denum.a 

dir. a 

dpkg.a 

drees.a 

drsup.a 

drtns.a 

dspprt.a 

dsubprg.a 


Page 17 






25 October 1990 


STARS-RC-00990/001/00 


dsubsup.a 
dtypad.a 
dump.a 
eattr.a 
eblock.a 
ebuilt.a 
ebuilt.cais.a 
ebuilt.z.a 
ebuilt.xcais.a 
eexpr.a 
einlix.a 
eistmt.a 
eobject.a 
epkgb.a 
eprag.a 
error.a 
estmt.a 
esubprm.a 
eueer.a 
expand.a 
files.a 
get. a 
help.a 
initsym.a 
lex. a 
lexact.a 
literl.a 
main.a 
Disc.a 
miscs.a 
novin.a 
ooe.a 

pre.parser.a 

ruace.a 

semant.a 

seq_of_stmt8.a 

8eq_of_8tat8_goto.a 

8eq_of_8tBt8_8hift_reduce.a 

set. a 

SBgBS.a 

SBgBt. a 

staddpk.a 

stget.a 

stBtecs.a 

stBtev.a 


Page 18 






25 October 1990 


STARS-RC-00990/001/00 


strt.a 
stset.a 
telasolt/ 
user.a 
vads/ 
xadt.a 
yyerr.a 

ace/code/src/C: 
cflush.c 

observe.vindov.icn 

suhbs . c 

sys_env.c 

xvc.c 

xva. c 

ace/code/src/Parser_specs: 
compilation.unit.y 
dacl_part.y 
8eq_ol_stmt8.y 

ace/code/src/Scaimer.specs: 
scan.adalex.l 

ace/code/arc/telesoft: 

onlyx.a 

src.alb 

8rc.cai8.alb 

src.X.alb 

src.xcais.alb 

sunviea.a 

system.a 

system.cais. a 

system.environment.a 

Bs .a 

x.a 


ace/code/src/vads: 

onlyx.a 

sunviev.a 

system.a 

system.cais.a 

system.environment.a 

BS.a 

x.a 


Page 19 





25 October 1990 


STARS-RC-00990/001/00 


ac«/docs: 
UaerNanual.ps 
UserHanual.tty 

ace/startups: 
acvc.ace 
bindings.ace 
cais.ace 
comands. ace 
cpu.time.ace 
developer.ace 
standard.ace 
startup.ace 
8tartup40.ace 
vindouing.ace 
xt.ace 


Page 20 




25 October 1990 


STARS-RC-00990/001/00 


B 

Appendix: Build Scripts 

B.l File: Build_ACE.var 

1 

» 


2 

* Establish a path to the VADS compilation system. 

3 

« 


4 

setenv VADS.BASE 

<path to the VADS compilation system 

5 


(e.g. /mybase/compilers/vad8S.5)> 

6 

setenv VAOS.BII 

SVADS_BASE/bin 

7 

set path = 

( SVADS.BIV $path ) 

8 

Q 

setenv ADA 

" ada -H -00 " 

y 

10 

« 


11 

# Establish a path 

to the TeleSoft compilation system. 

12 

» 


13 

setenv TELEGEH2 

<path to the TeleSoft compilation system 

14 


(e.g., /mybase/compilers/telegen.l.4)> 

15 

setenv TADA 

•• $TELEGEH2/bin/ada -v *' 

16 

setenv TALD 

•• $TELEGEH2/bin/ald -v -V 2000 " 

17 

setenv TACR 

$TELEGEH2/bin/acr -f -m 32000 •• 

18 



19 

« 


20 

# Define C Languuage compilation variable 

21 

» 


22 

setenv CC 

" CC -g -c •• 

23 



24 

# 


25 

# Define the location of the required source code directories 

26 

# and X11R3 C archive 

27 

« 


28 

setenv ADA.XLIB 

<path to the Ada libraries for the Ada/Xt Toolkit 

29 


Xlib bindings (e.g. /myba8e/adazt/code/Xlib)> 

30 



31 

setenv CAIS.LIB 

<path to the Ada libraries for the nonshared portion of 

32 


CAIS-A (e.g. /myba8e/cais-a/src/nonshared)> 

33 



34 

setenv LIB.X.SUPPORT <path to the standard C utility library from the X Uindou 

35 


System distribution or from the kitjlt Toolkit 

36 


(e.g. /myba8e/adazt/code/C/lib.a)> 

37 



38 

setenv ACE 

<path to the top-level ACE directory (e.g. /mybase/ace)> 

39 

setenv ACE.CODE 

$ACE/code 

40 

setenv ACE.CONNOV 

tACE.CODE/common 

41 

setenv ACE.DESIGI 

lACE.CODE/design 


Page 21 







25 October 1990 


STARS-RC-00990/001/00 


42 

setenv ACE.SRC SACE.CODE/src 


43 

setenv ACE.CLIB $ACE_CODE/src/C 


44 




45 

« 



46 

# Define the location of ( 

Z support utilities for the X Window interface 

47 

« 



48 

setenv LIB_MISC 

$ACE_CLIB/cflush.o 


49 

setenv LIB.ARG 

$ACE_CLIB/sy8_env.o 


50 

setenv LIB.WIDGETCLASSES 

$ACE_CLIB/xsc.o 


51 

setenv LIB.WIIDOV.SUPPORT $ACE_CLIB/xbs. o 


52 




53 

« 



54 

# The folloving variables 

locate various components of the X11R3 distribution 

55 

# The pathnames shovn are 

typical, but can vary from one installation to 

56 

# another. Please consult your system administrator. 

57 

« 



58 

setenv LIB_HP_WIDGETS 

/uar/lib/XllR3/libXu.a 


59 

setenv LIB_ATHEHA_WIDGETS 

/usr/lib/XllR3/libXas.a 


60 

setenv LIB.XT 

/usr/lib/X1lR3/libXt.a 


61 

setenv LIB_HU 

/usr/lib/XllR3/libXmu.a 


62 

setenv LIB.Xll 

/uar/lib/XllR3/libXll.a 


63 

setenv LIB.RESOLV 

/usr/lib/libresolv.a 


64 

setenv LIB.TERMCAP 

/usr/1ib/libtermcap.a 


65 




66 

setenv LIBRARIES.WITH.X 

" $LIB_MISC 

\ 

67 


$LIB_X_SUPPORT 

\ 

68 


$LIB_WIDGETCLASSES 

\ 

69 


$LIB_WIIDOW_SUPPORT 

\ 

70 


$LIB_HP_WIDGETS 

\ 

71 


$LIB_ATHENA_WIDGETS 

\ 

72 


$LIB_XT 

\ 

73 


$LIB_MU 

\ 

74 


$LIB_X11 

\ 

75 


$LIB_RESOLV 

\ 

76 


$LIB_TERMCAP ” 


77 




78 

setenv LIBRARIES_MO_X 

" iLIB.msC $LIB_RESOLV 

$LIB_TERMCAP " 


Page 22 




25 October 1990 


STARS-RC-00990/001/00 


B.2 Script: BuiId_ACE.VADS 

1 #! /bin/csh -f 

2 echo •••• 

3 echo "Defining installation-dependent variables" 

4 echo "" 

5 source Build_ACE .vai 

6 

7 setenv TARGET $ACE_CODE/Build_VADS 

8 setenv LOG $TARGET/Build_ACE.Log 

9 

10 « 

11 set Caisop="n" 

12 set Xop="n" 

13 echo -n "Are you building for operation under CAIS-A? [y n](n) " 

14 set Caisop=$< 

15 if ( $Caisop == "y" 11 $Caisop == "Y" ) then 

16 set Caisop="y" 

17 echo "Building for operation under CAIS-A. Th 2 aiX you." 

18 else 

19 set Caisop="n" 

20 echo "Building for stand-alone operation. Th 2 mk you." 

21 endif 

22 echo "" 

23 

24 echo -n "Are you building for operation uith an X Window System interface? [y n](n) " 

25 set Xop=$< 

26 if ( $Xop == "y" I I $Xop == "Y" ) then 

27 set Xop="y" 

28 echo "Building for operation with an X Window System interface. Thank you." 

29 else 

30 set Xop="n" 

31 echo "Building for operation without an X Window System interface. Thank you." 

32 endif 

33 echo "" 

34 

35 # 

36 if ( ! -d (TARGET ) mkdir (TARGET 

37 if ( ! -d (TARGET/common ) mkdir (TARGET/common 

38 if ( ! -d (TARGET/design ) mkdir (TARGET/design 

39 if ( ! -d (TARGET/src ) mkdir (TARGET/src 

40 if ( ! -d (TARGET/bin ) mkdir (TARGET/bin 

41 

42 « 

43 echo "Building Ada libraries in each sub-directory" 


Page 23 








25 October 1990 


STARS-RC-00990/001/00 


44 echo 

45 # 

46 toreacb dir (common design src) 

47 a.mklib -f $TARGET/$dir $VlDS_BASE/verdixlib 

48 end 

49 

50 « 

51 echo "Establishing dependencies" 

52 echo "" 

53 « 

54 cd $TARGET/common 

55 if ( Slop == "y" ) then 

56 a.path -a lADA.XLIB 

57 endil 

58 

59 cd $TARGET/design 

60 a.path -a $TARGET/common 

61 il ( $Xop == "y" ) then 

62 a.path -a $ADA_XLIB 

63 endil 

64 a.path -a $TARGET/src 

65 

66 cd $TARGET/src 

67 a.path -a $TARGET/design 

68 if ( $Xop == "y" ) then 

69 a.path >a $AOA_XLIB 

70 endil 

71 a.path -a ITARGET/common 

72 

73 if ( $Caisop == "y" ) then 

74 a.path -a $CAIS_LIB 

75 endif 

76 

77 # 

78 echo "Creating source code links in $TARGET" 

79 echo "" 

80 cd $TARGET/common 

81 foreach file ($ACE_C0MH0H/e.a) 

82 In -s $file ${file:t} 

83 end 

84 foreach file ($ACE.COMNOH/vads/e.a) 

85 In -s Ifile ${file:t} 

86 end 

87 

88 cd iTARGET/design 


Page 24 





25 October 1990 


STARS-RC-00990/001/00 


89 

foreacb fil« ($ACE.DESIGI/*.a) 


90 

In -8 $lile ${1118:t> 


91 

and 


92 

loraach file ($ACE_DESI6l/vads/*.a) 

93 

In -8 $file $-Cfile:t} 


94 

end 


95 



96 

cd $TARGET/8rc 


97 

loraacb file ($ACE_SRC/a.a) 


98 

In -8 $file S'Cfilezt} 


99 

and 


100 

loraacb file ($ACE_SRC/vad8/a.a) 


101 

In -8 $lila ${fila:t} 


102 

and 


103 



104 

« 


105 

acbo "Initializing tba build log. 

file SLOG" 

106 

acbo "" 


107 

« 


108 

ii -a SLOG zn -1 SLOG 


109 



no 

* 


111 

acbo "Coapiling tba code" 


112 

acbo "" 


113 

» 


114 

acbo "Subdirectory: common" 


115 

acbo "" 


116 

« 


117 

cd STARGET/common 


118 

data 

»A SLOG 

119 



120 

SAOA uniz.typas.a 

»A SLOG 

121 

SADA uniz_typa8_.a 

»A SLOG 

122 

SADA tty_op8.a 

»* SLOG 

123 

SADA tty_op8_.a 

»A SLOG 

124 

SADA lista.a 

»S SLOG 

125 

SADA Ii8t8_.a 

»A SLOG 

126 

SADA baab.tabla.a 

»* SLOG 

127 

SADA baab.tabla..a 

»t SLOG 

128 

SADA btraaa.a 

»t SLOG 

129 

SADA btraa8_.a 

»A SLOG 

130 

SADA kaymap.a 

»* SLOG 

131 

SADA kaymap_.a 

»A SLOG 

132 

SADA 8input.a 

»* SLOG 

133 

SADA 8input_.a 

»A SLOG 



Page 25 






25 October 1990 


STARS-RC-00990/001/00 


134 




135 

il 

( $Xop == "y" ) then 


136 


$AOA renamed_zlib_types.a 

»A $L0G 

137 


$ADA stringdefs.a 

»A $L0G 

138 


$ADA intrinsics.a 

»A $LOG 

139 


$ADA vidget.a 

»A SLOG 

140 


$AOA vidget_.a 

»A SLOG 

141 


$ADA hp.uidgets.a 

»A SLOG 

142 


$ADA hp.uidgets..a 

»A SLOG 

143 

endil 


144 




145 

« 



146 

echo "Subdirectory: design" 


147 

echo "" 


148 

* 



149 

cd STARGET/design 


150 


date 

»A SLOG 

151 




152 


$ADA auntyp.a 

»t SLOG 

153 


$ADA misc.a 

»A SLOG 

154 


$ADA lex.a 

»ft SLOG 

155 


$ADA us.a 

»ft SLOG 

156 


iADA literl.a 

»t SLOG 

157 




158 

« 



159 

echo "filename src/literl.a" 


160 

echo "" 


161 

« 



162 

cd $TARGET/8rc 


163 


$ADA literl.a 

»* SLOG 

164 




165 

« 



166 

echo "Continuing with subdirectory: design' 

167 

echo "" 


168 

« 



169 

cd 

iTARGET/design 


170 


$ADA string.a 

»* SLOG 

171 


$ADA smgms.a 

»* SLOG 

172 


lADA sunvieu.a 

»* SLOG 

173 


$ADA ateztio.a 

»t SLOG 

174 


$ADA ooe.a 

»* SLOG 

175 


$AOA files.a 

»A SLOG 

176 


$ADA user.a 

»t SLOG 

177 


$ADA dir.a 

»* SLOG 

178 





Page 26 





25 October 1990 


STARS-RC-00990/001/00 


179 

if ( $Xop ss "n" ) then 


180 

$ADA system.environment..a 

»A $L0G 

181 

endif 


182 



183 

$A0A system.a 

»A $LOG 

184 

$A0A help.a 

»A $L0G 

185 

$ADA sts.a 

»A $LOG 

186 

$ADA sdb.a 

»A $L0G 

187 

$A0A context.a 

»A $LQG 

188 

$A0A amaih.a 

»A $L0G 

189 

$ADA treeb.a 

»A $L0G 

190 

$AI)A stmtev.a 

»A $L0G 

191 

$ADA debug.a 

»ft $L0G 

192 

$ADA stset.a 

»A $L0G 

193 

$ADA stget.a 

»A $L0G 

194 

$ADA preprs.a 

»A $L0G 

195 

$ADA ctree.a 

»A SLOG 

196 

$A0A dspprt.a 

»A SLOG 

197 

$ADA create.a 

»k SLOG 

198 

$A0A miscs.a 

»A SLOG 

199 

$ADA drtns.a 

»A SLOG 

200 

$ADA prsdef.a 

»A SLOG 

201 

$ADA yyerr.a 

»* SLOG 

202 

$ADA tokens.definition.a 

»A SLOG 

203 

$ADA common_parser.a 

»* SLOG 

204 

$ADA seq.of.stmts.a 

»A SLOG 

205 

$A0A get.a 

»A SLOG 

206 

$ADA set.a 

»A SLOG 

207 

$ADA ace.adt.a 

»A SLOG 

208 

$ADA dump.a 

»A SLOG 

209 

$ADA dsubsup.a 

»A SLOG 

210 

$ADA semant.a 

»A SLOG 

211 

$ADA smgmt.a 

»k SLOG 

212 

$ADA strt.a 

»A SLOG 

213 

lAOA error.a 

»A SLOG 

214 

$AI)A compilation.unit.a 

»* SLOG 

215 

$ADA decl_part.a 

»* SLOG 

216 

$AOA drsup.a 

»A SLOG 

217 

lADA x.a 

»* SLOG 

218 

$ADA lexact.a 

»A SLOG 

219 

lAOA calendar.a 

»A SLOG 

220 

lADA obj.a 

»A SLOG 

221 

$ADA vndobj.a 

»A SLOG 

222 

$A0A zadt.a 

»A SLOG 

223 

lADA astd.a 

»A SLOG 


Page 27 





25 October 1990 


STARS-RC-00990/001/00 


224 


SAOA aprgut.a 

»* SLOG 

225 


$ADA ruace.a 

»A SLOG 

226 


$ADA expand.a 

»* SLOG 

227 




228 

if 

( $Xop == "y" ) then 


229 


$ADA ace_z_«indovs.a 

»A SLOG 

230 


$ADA ace.vidget.a 

»A SLOG 

231 


SADA ace.hp.sidgets.a 

»A SLOG 

232 

endif 


233 




234 


$ADA ace.input.a 

»A SLOG 

235 




236 

« 



237 

echo "Subdirectory: src" 


238 

echo "" 


239 

# 



240 

cd 

STARGET/src 


241 


date 

»A SLOG 

242 




243 


$ADA atextio.a 

»A SLOG 

244 


$ADA context.a 

»A SLOG 

245 


SADA dir.a 

»A SLOG 

246 


lADA main.a 

»A SLOG 

247 


SADA user.a 

»t SLOG 

248 


SADA ooe.a 

»* SLOG 

249 


SADA miscs.a 

»t SLOG 

250 


SADA debug.a 

»* SLOG 

251 


SADA dump.a 

»A SLOG 

252 


SADA dspprt.a 

»* SLOG 

253 


SADA smgmt.a 

»* SLOG 

254 


SADA stmtev.a 

»* SLOG 

255 


SADA estmt.a 

»* SLOG 

256 


SADA aistmt.a 

»A SLOG 

257 


SADA stmtecs.a 

»* SLOG 

258 


SADA esubprm.a 

»A SLOG 

259 


SADA eexpr.a 

»A SLOG 

260 


SADA eattr.a 

»A SLOG 

261 


SADA amain.a 

»* SLOG 

262 


SADA set.a 

»A SLOG 

263 


SADA create.a 

»* SLOG 

264 


SADA get.a 

»A SLOG 

265 


SADA stset.a 

»* SLOG 

266 


SADA stget.a 

»* SLOG 

267 


SADA help.a 

»A SLOG 

268 


SADA semant.a 

»ft SLOG 




Page 28 








25 October 1990 


STARS-RC-00990/001/00 


269 


$iOA cezpr.a 

»* 

SLOG 

270 


$A0A cattr.a 

»A 

$L0G 

271 


$AOA csubpgm.a 

»A 

$L0G 

272 


$A0A csnisc.a 

»A 

SLOG 

273 


$ADA cmsppt.a 

»A 

SLOG 

274 





275 

it 

( $Xop == "n" ) then 



276 


$A0A system.environment.a 

»A 

SLOG 

277 

endil 



278 





279 

if 

( $Caisop == "y" ) then 



280 


$ADA system.cais.a 

»A 

SLOG 

281 

else 



282 


$ADA system.a 

»A 

SLOG 

283 

endif 



284 





285 


$ADA files.a 

»A 

SLOG 

286 


$ADA cstmt.a 

»A 

SLOG 

287 


$A0A drtns.a 

»A 

SLOG 

288 


$ADA denuffl.a 

»A 

SLOG 

289 


$ADA drees.a 

»A 

SLOG 

290 


$ADA dpkg.a 

»A 

SLOG 

291 


lADA dsubprg.a 

»t 

SLOG 

292 


$ADA error.a 

»t 

SLOG 

293 


$A0A strt.a 

»t 

SLOG 

294 


$ADA staddpk.a 

»A 

SLOG 

295 


$ADA initsym.a 

»A 

SLOG 

296 


$ADA ace.adt.a 

»A 

SLOG 

297 


$ADA dsubsup.a 

»A 

SLOG 

298 


$AOA drsup.a 

»A 

SLOG 

299 


$ADA z.a 

»A 

SLOG 

300 


$ADA lezact.a 

»t 

SLOG 

301 


$ADA yyerr.a 

»A 

SLOG 

302 


$ADA lex.a 

»» 

SLOG 

303 


$ADA misc.a 

»t 

SLOG 

304 


$ADA ctree.a 

»* 

SLOG 

305 


$AOA common.parser.a 

»* 

SLOG 

306 


$ADA decl_part_shift_reduce 

.a »* 

SLOG 

307 


lAOA decl_part_goto.a 

»A 

SLOG 

308 


$ADA decl.part.a 

»A 

SLOG 

309 


$ADA pre.parser.a 

»* 

SLOG 

310 


$AOA compilation.unit.shift 

.reduce.a »A $L0G 

311 


$ADA compilation.unit.goto. 

a »A $L0G 

312 


$ADA compilation.unit.a 

»* $L0G 

313 


$ADA 8eq_of_8tmts_shift_reduce.a »t SLOG 


Page 29 








25 October 1990 


STARS-RC-00990/001/00 


314 

$ADA seq_ol_stmts_goto.a 

»A 

tLOG 




315 

$ADA 8eq_ol_stmts.a 

»A 

$L0G 




316 

$ADA calendar.a 

»A 

$L0G 




317 

$ADA main.a 

»A 

$L0G 




318 

$AI)A rvace.a 

»A 

SLOG 




319 

$ADA aetd.a 

»A 

SLOG 




320 

$A0A expand.a 

»A 

SLOG 




321 

$ADA aprgnt.a 

»A 

SLOG 




322 

$A0A alloc.a 

»A 

SLOG 




323 

$ADA cinlix.a 

»A 

SLOG 




324 

SADA cdot.a 

»A 

SLOG 




325 

$ADA carray.a 

»A 

SLOG 




326 







327 

if (( $Caisop == "y" ) AA ( $Xop 

— — Hyll 

)) then 



328 

$ADA ebuilt.xcais.a 

»A 

SLOG 

« 

ACE under 

CAIS-A Bith X 

329 

else if ( $Xop == "y" ) then 






330 

$A0A ebuilt.X.a 

»A 

SLOG 

« 

ACE under 

Unix Bith X 

331 

else if ( $Caisop == "y" ) then 






332 

$ADA ebuilt.cais.a 

»A 

Slog 

« 

ACE under 

CAIS-A Bithout X 

333 

else 






334 

$ADA ebuilt.a 

»A 

SLOG 

« 

ACE under 

Unix Bithout X 

335 

endif 






336 







337 

$ADA einfix.a 

»A 

Slog 




338 

$ADA euser.a 

»A 

Slog 




339 

$ADA eprag.a 

»A 

Slog 




340 

$ADA eblock.a 

»A 

Slog 




341 

$ADA epkgb.a 

»A 

Slog 




342 

$ADA dtyped.a 

»A 

Slog 




343 







344 

if ( $Xop == "y" ) then 






345 

$ADA onlyx.a 

»A 

Slog 




346 

else 






347 

$ADA novin.a 

»A 

SLOG 




348 

endif 






349 







350 

lAOA eobject.a 

»A 

SLOG 




351 







352 

if ( $Xop "y" ) then 






353 

$ADA xadt.a 

»A 

Slog 




354 

endif 






355 







356 

SAOA smgms.a 

»A 

Slog 




357 

$A0A ace.input.a 

»A 

SLOG 





358 


Page 30 





STARS-RC-00990/001/00 


25 October 1990 


359 

il ( IXop == "y" ) then 


360 

$ADA ace_x_vindovs.a 

»* $L0G 

361 

$ADA aca.vidget.a 

»A $L0G 

362 

$AOA ace_hp_«idgets.a 

»A $LQG 

363 

endif 


364 



365 

« 


366 

echo "Finally, the C subroutines" 


367 

echo "" 


368 

« 


369 

cd $ACE_CLIB 


370 

date 

»A $L0G 

371 



372 

$CC cflush.c 

»A $L0G 

373 



374 

$CC sys.env.c 

»A $L0G 

375 



376 

ii ( $Xop == "y" ) then 


377 

$CC xvc.c 

»* $L0G 

378 

$CC xvs.c 

»A $LQG 

379 

endif 


380 



381 

» 


382 

echo "Linking the objects" 


383 

echo "" 


384 

« 


385 

cd STARGET/src 


386 

date 

»ft $L0G 

387 



388 

il ( $Xop == "y" ) then 


389 

a. Id main -o ACE $LIBRARIES_VITH_X »A $L0G 

390 

else 


391 

a.Id main -o ACE $LIBRARIES_IO. 

.X »A $L0G 

392 

endil 


393 



394 

date 

»* $L0G 

395 



396 

« 


397 

echo "Placing executable in $TARGET/bin" 

398 

echo "" 


399 

« 


400 

mv -1 ACE iTARGET/bin 

»A $L0G 

401 



402 

« 


403 

echo "Build complete" 



Page 31 






25 October 1990 STARS-RC-00990/001/00 

404 echo •'•* 


Page 32 




25 October 1990 


STARS-RC-00990/001/00 


B.3 Script; Build_ACE.TeleSoft 


1 

2 

3 

4 

5 

6 

7 

8 

9 

10 
11 
12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29 

30 

31 

32 

33 

34 

35 

36 

37 

38 

39 

40 

41 

42 

43 


#! /bin/csh -f 
echo 

echo "Defining installation-dependent variables" 
echo "" 

source Build_.XE.var 

setenv TARGET $ACE_CODE/Build_TeleSoft 
setenv LOG $TARGET/Build.ACE.Log 

» 

set Caisop="n" 
set Xop="n" 

echo -n "Are you building for operation under CAIS-A? [y n](n) " 
set Caisop=$< 

if ( SCaisop == "y" 1 I $Caisop == "Y" ) then 
set Caisop="y" 

echo "Building for operation under CAIS-A. Thank you." 
else 

set Caisop="n" 

echo "Building for stand-alone operation. Thank you." 
endif 
echo "" 

echo -n "Are you building for operation with an X Window System interface? [y n](n) 
set Xop=$< 

if ( $Xop == "y" I I $Xop == "Y" ) then 
set Xop="y" 

echo "Building for operation with an X Window System interface. Thank you." 
else 

set Xop="n" 

echo "Building for operation without an X Window System interface. Theoik you." 
endif 
echo "" 

» 

if ( ! -d ITARGET ) mkdir ITARGET 

if ( ! -d $TARGEV 'common ) mkdir $TARGET/common 

if ( ! -d $TARGET/design ) mkdir STARGET/design 

if ( ! -d iTARGET/src ) mkdir $TARGET/8rc 

if ( ! -d iTARGET/bin ) mkdir $TARGET/bin 

« 

echo "Building Ada libraries in each sub-directory" 


M 


Page 33 







25 October 1990 


STARS-RC-00990/001/00 


44 echo 

45 « 

46 foreach dir (common design src) 

47 cd $TARGET/$dir 

48 $TACR $dir 

49 end 

50 

51 » 

52 echo "Establishing dependencies" 

53 echo "" 

54 « 

55 cd $TARGET/common 

56 il ( $Xop == "y" ) then 

57 In -s $ACE_COMMON/telesolt/common.z.alb liblst.alb 

58 else 

59 In -s $ACE_COMMOH/telesoft/common.alb liblst.alb 

60 endil 

61 

62 cd $TAllGET/design 

63 il ( $Xop == "y" ) then 

64 In -s $ACE_OESIGN/telesolt/design.z.alb liblst.alb 

65 else 

66 In -8 $ACE_DESIGI/telesolt/design.alb liblst.alb 

67 endil 

68 

69 cd STARGET/src 

70 il ( $Xop == "y" ) then 

71 il ($Caisop == "y" ) then 

72 In -8 $ACE_SRC/telesolt/src.zcais.alb liblst.alb 

73 else 

74 In -8 SACE.SRC/telesolt/src.z.alb liblst.alb 

75 endil 

76 else il (SCaisop a= "y" ) then 

77 In -8 $ACE_SRC/telesolt/src.cais.alb liblst.alb 

78 else 

79 In -s lACE.SRC/telesolt/src.alb liblst.alb 

80 endil 

81 endil 

82 

83 « 

84 echo "Creating source code links in STARGET" 

85 echo "" 

86 cd iTARGET/common 

87 loreach lile ($ACE_C0NN0H/*.a) 

88 In -8 llile ${lile:t> 


Page 34 





25 October 1990 


STARS-RC-00990/001/00 




89 

end 


90 

loreach file ($ACE_COMMOH/telesoft/«.a) 

91 

In -8 $file S'Cfileit} 


92 

end 


93 

94 

cd $TARGET/design 


95 

foreach file ($ACE_DESIGN/*.a) 


96 

In -8 $file ${file:t> 


97 

end 


98 

foreach file ($ACE_DESIGH/telesoft/*.a) 

99 

In -8 $file ${file:t} 


100 

end 


101 

102 

cd $TARGET/8rc 


103 

foreach file ($ACE_SRC/*.a) 


104 

In -8 $file $-Cfile:t} 


105 

end 


106 

foreach file ($ACE_SRC/telesoft/* 

.a) 

107 

In -8 $file $-Cfile:t} 


108 

end 


109 

no 

« 


111 

echo "Initializing the build log. 

file ILOG' 

112 

echo "" 


113 

« 


114 

if -e $L0G m -f SLOG 


115 

116 

« 


117 

echo "Compiling the code" 


118 

echo "" 


119 

« 


120 

echo "Subdirectory: common" 


121 

echo "" 


122 

» 


123 

cd iTARGET/common 


124 

date 

»* ILOG 

125 

126 

$TADA uniz.typea.a 

»» ILOG 

127 

ITADA uniz_type8_.a 

»A ILOG 

128 

ITADA tty.opa.a 

»* ILOG 

129 

ITADA tty_op8_.a 

»» ILOG 

130 

ItADA Ii8t8.a 

»* ILOG 

131 

ITADA Ii8t8_.a 

»* ILOG 

132 

ITADA ha8h_table.a 

»* ILOG 

133 

ITADA haeh.table..a 

»* ILOG 


Page 35 






25 October 1990 


STARS-RC-00990/001/00 


134 

$TADA btrees.a 

»* ILOG 

135 

$TADA btra«s_.a 

»A ILOG 

136 

$TADA keymap.a 

»A ILOG 

137 

$TADA ke3rmap_.a 

»k ILOG 

138 

$TADA 8input.a 

»A ILOG 

139 

140 

tTADA 8input_.a 

»k ILOG 

141 

il ( $Xop == "y" ) then 


142 

$TADA renamed.zlib.types.a 

»A ILOG 

143 

$TADA stringdefs.a 

»A ILOG 

144 

$TADA intrinsics.a 

»A ILOG 

145 

$TADA vidget.a 

»A ILOG 

146 

$TADA vidget_.a 

»* ILOG 

147 

$TADA hp.sidgets.a 

»A ILOG 

148 

$TADA hp_Bidgets_.a 

»A ILOG 

149 

150 

endil 


151 

« 


152 

echo ‘'Subdirectory: design" 


153 

echo "" 


154 

« 


155 

cd $TARGET/design 


156 

157 

date 

»ft ILOG 

158 

$TADA auntyp.a 

»A ILOG 

159 

ITADA nisc.a 

»A ILOG 

160 

$TADA lex.a 

»A ILOG 

161 

$TADA vs.a 

»A ILOG 

162 

163 

$TADA literl.a 

»A ILOG 

164 

« 


165 

echo "filename src/literl.a" 


166 

echo "" 


167 

« 


168 

cd STARGET/src 


169 

170 

ITADA literl.a 

»A ILOG 

171 

« 


172 

echo "Continuing vith subdirectory 

design" 

173 

echo "" 


174 

« 


175 

cd iTARGET/design 


176 

ITADA string.a 

»k ILOG 

177 

ITADA smgBs.a 

»t ILOG 

178 

ITADA sunviev.a 

»* ILOG 

Page 36 







25 October 1990 


STARS-RC-00990/001/00 


179 

$TAOA atextio.a 

»* ILOG 

180 

$TiOA ooe.a 

»* ILOG 

181 

$TADA files.a 

»A ILOG 

182 

$TADA user.a 

»A ILOG 

183 

$TADA dir.a 

»A ILOG 

184 



185 

if ( $Xop "n” ) then 


186 

$TADA system.environment..a 

»A ILOG 

187 

endif 


188 



189 

$TADA system.a 

»A ILOG 

190 

$TADA help.a 

»A ILOG 

191 

$TADA sts.a 

»A ILOG 

192 

$TADA sdb.a 

»A ILOG 

193 

$TADA context.a 

»A ILOG 

194 

$TADA amain.a 

»t ILOG 

195 

$TADA treeb.a 

»A ILOG 

196 

$TADA stmtev.a 

»A ILOG 

197 

$TADA debug.a 

»A ILOG 

198 

$TADA stset.a 

»A ILOG 

199 

$TADA stget.a 

»A ILOG 

200 

$TADA preprs.a 

»A ILOG 

201 

ITADA ctree.a 

»A ILOG 

202 

ITADA dspprt.a 

»t ILOG 

203 

ITADA create.a 

»A ILOG 

204 

ITADA miscs.a 

»A ILOG 

205 

ITADA drtns.a 

»A ILOG 

206 

ITADA prsdef.a 

»A ILOG 

207 

ITADA yyerr.a 

»A ILOG 

208 

ITADA tokens.definition.a 

»* ILOG 

209 

ITADA common.parser.a 

»t ILOG 

210 

ITADA seq.of.stmts.a 

»* ILOG 

211 

ITADA get.a 

»A ILOG 

212 

ITADA set.a 

»* ILOG 

213 

ITADA ace.adt.a 

»* ILOG 

214 

ITADA dump.a 

»* ILOG 

215 

ITADA dsubsup.a 

»A ILOG 

216 

ITADA semant.a 

»* ILOG 

217 

ITADA smgmt.a 

»* ILOG 

218 

ITADA strt.a 

»» ILOG 

219 

ITADA error.a 

»A ILOG 

220 

ITADA compilation.unit.a 

»A ILOG 

221 

ITADA decl.part.a 

»* ILOG 

222 

ITADA drsup.a 

»A ILOG 

223 

ITADA x.a 

»* ILOG 


Page 37 





25 October 1990 


STARS-RC-00990/001 /OO 



224 

ITAOA lezact.a 

»A ILOG 

225 

$TAOA calendar.a 

»A ILQG 

226 

tTAOA obj.a 

»ft ILOG 

227 

$TADA vndobj.a 

»A ILOG 

228 

$TADA zadt.a 

»A ILOG 

229 

$TADA astd.a 

»A ILOG 

230 

$TAOA aprgut.a 

»A ILOG 

231 

$TAOA znace.a 

»A ILOG 

232 

$TADA expand.a 

»A ILOG 

233 



234 

if ( $Xop == "y" ) then 


235 

$TADA ace_z_vindoBS.a 

»A ILOG 

236 

$TAOA ace_«idget.a 

»A ILOG 

237 

$TADA ace_hp_eidgets.a 

»* ILOG 

238 

endif 


239 



240 

$TADA ace.input.a 

»A ILQG 

241 



242 

« 


243 

echo "Subdirectory: arc" 


244 

echo "" 


245 

« 


246 

cd $TARGET/8rc 


247 

date 

»* ILOG 

248 



249 

ITADA ateztio.a 

»A ILOG 

250 

$TADA context.a 

»» ILOG 

251 

ITADA dir.a 

»A ILOG 

252 

ITADA nain.a 

»* ILOG 

253 

ITAOA user.a 

»* ILOG 

254 

ITAOA ooe.a 

»A ILOG 

255 

ITADA Biscs.a 

»A ILOG 

256 

iTADA debug.a 

»* ILOG 

257 

ITADA dunp.a 

»* ILOG 

258 

ITADA dspprt.a 

»* ILOG 

259 

ITADA SBgBt.a 

»t ILOG 

260 

ITADA stBtev.a 

»ft ILOG 

261 

ITADA estBt.a 

»* ILOG 

262 

ITADA eistBt.a 

»t ILOG 

263 

ITADA stBtecs.a 

»t ILOG 

264 

ITADA esubprB.a 

»A ILOG 

265 

ITADA eexpr.a 

»A ILOG 

266 

ITADA eattr.a 

»* ILOG 

267 

ITADA aBain.a 

»A ILOG 

268 

ITADA set.a 

»t ILOG 


Page 38 





25 October 1990 


STARS-RC-00990/001/00 


269 


$TA0A 

create.a 

»A SLOC 

270 


$TADA 

get. a 

»A SLOG 

271 


ITADA 

stset.a 

»A SLOG 

272 


tTAOA 

atget.a 

»A SLOG 

273 


$TADA 

help.a 

»A SLOG 

274 


STADA 

semant.a 

»* SLOG 

275 


$TAOA 

cezpr.a 

»A SLOG 

276 


$TAOA 

cattr.a 

»A SLOG 

277 


ITADA 

csnbpgm.a 

»k SLOG 

278 


STADA 

canisc.a 

»A SLOG 

279 


STADA 

cmeppt.a 

»A SLOG 

280 





281 

if 

( Slop 

== "n" ) then 


282 


STADA 

system.environment.a 

»* SLOG 

283 

«ndif 



284 





285 

if 

( SCaisop s= "y" ) then 


286 


STADA 

system.cais.a 

»A SLOG 

287 

else 



288 


STADA 

system.a 

»A SLOG 

289 

endif 



290 





291 


STADA 

files.a 

»A SLOG 

292 


STADA 

cstmt.a 

»A SLOG 

293 


STADA 

drtns.a 

»k SLOG 

294 


STADA 

denum.a 

»A SLOG 

295 


STADA 

drees.a 

»A SLOG 

296 


STADA 

dpkg.a 

»t SLOG 

297 


STADA 

dsubprg.a 

»A SLOG 

298 


STADA 

error.a 

»t SLOG 

299 


STADA 

strt.a 

»* SLOG 

300 


STADA 

staddpk.a 

»A SLOG 

301 


STADA 

initsym.a 

»k SLOG 

302 


STADA 

ace.adt.a 

»t SLOG 

303 


STADA 

dsubsup.a 

»A SLOG 

304 


STADA 

drsup.a 

»* SLOG 

305 


STADA 

z.a 

»k SLOG 

306 


STADA 

lezact.a 

»* SLOG 

307 


STADA 

yyerr.a 

»* Slog 

308 


STADA 

lez.a 

»A slog 

309 


STADA 

misc.a 

»k Slog 

310 


STADA 

ctree.a 

»k slog 

311 


STADA 

common.parser.a 

»t SLOG 

312 


STADA 

decl_part_shift_reduce. 

a »t SLOG 

313 


STADA 

deel_part_goto.a 

»A SLOG 


Page 39 






STARS-RC-00990/001 /OO 


25 October 1990 


314 

$TADA 

decl_paTt.a 

»A SLOG 

315 

ITAOA 

pre_parser.a 

»k SLOG 

316 

ITAOA 

compilation.unit.shift. 

.reduce.a »A SLOG 

317 

$TADA 

coDpilation_unit_goto.a »A SLOG 

318 

$TADA 

compilation.unit.a 

»A SLOG 

319 

$TADA 

8eq_of_stmts_shift_reduce.a »A SLOG 

320 

STADA 

seq.of_stmts_goto.a 

»* SLOG 

321 

$TADA 

8eq_of_stsits.a 

»A SLOG 

322 

$TADA 

calendar.a 

»A SLOG 

323 

$TADA 

main.a 

»t SLOG 

324 

STADA 

rvace.a 

»A SLOG 

325 

STADA 

astd.a 

»A SLOG 

326 

STADA 

expand.a 

»A SLOG 

327 

STADA 

aprgut.a 

»A SLOG 

328 

STADA 

alloc.a 

»A SLOG 

329 

STADA 

cinfix.a 

»A SLOG 

330 

STADA 

cdot.a 

»A SLOG 

331 

332 

STADA 

carray.a 

»A SLOG 

333 

il (( SCaisop == "y" ) AA ( SXop 

__ MyM )) then 

334 

STADA 

ebuilt.xcais.a 

»t SLOG 

335 

else if ( 

SXop == "y" ) then 


336 

STADA 

ebuilt.z.a 

»* SLOG 

337 

else if ( 

SCaisop -- "y" ) then 


338 

339 

STADA 

else 

ebuilt.cais.a 

»A SLOG 

340 

341 

342 

STADA 

endil 

ebuilt.a 

»A SLOG 

343 

STADA 

einfix.a 

»A SLOG 

344 

STADA 

euser.a 

»* SLOG 

345 

STADA 

eprag.a 

»A SLOG 

346 

STADA 

eblock.a 

»* SLOG 

347 

STADA 

epkgb.a 

»* SLOG 

348 

349 

STADA 

dtyped.a 

»t SLOG 

350 

if ( SXop 

s= "y" ) then 


351 

352 

STADA 

else 

onlyx.a 

»t SLOG 

353 

354 

355 

STADA 

endif 

nosin.a 

»» SLOG 

356 

357 

STADA 

eobject.a 

»S SLOG 

358 

if ( SXop 

ss ”y” ) then 



Page 40 







25 October 1990 


STARS-RC-00990/001/00 


359 $TAOA zadt.a »* SLOG 

360 endif 

361 

362 ITAOA smgms.a »A SLOG 

363 STAOA ace.input.a »k SLOG 

364 

365 il ( Slop == ”y*' ) then 

366 STAOA ace_x_sindo«s.a 

367 STAOA ace.sidget.a 

368 STAOA ace_hp_Bidgets.a 

369 endif 

370 

371 # 


372 

echo "Finally, the G subroutines" 


373 

echo "" 


374 

* 


375 

cd SAGE.GLIB 


376 

date 

»t SLOG 

377 

378 

see cflush.c 

»k SLOG 

379 

380 

see sys.env.c 

»S SLOG 


381 

382 if ( SXop =* "y" ) then 

383 see zve. c 

384 See ZW8. c 

385 endif 

386 

387 # 

388 echo "Linking the objects" 

389 echo "" 

390 « 

391 cd STARGET/src 

392 date »* SLOG 

393 

394 if ( SXop == "y" ) then 

395 STALO -p 'SLIBRARIES_WITH_X’ -o AGE main »A SLOG 

396 else 

397 STALO -p 'SLIBRARIES_IO_X SLIB.ARG’ -o AGE main »A SLOG 

398 endif 

399 

400 date »A SLOG 

401 

402 « 

403 echo "Placing ezecutable in STARGET/bin" 


»A SLOG 
»A SLOG 


»k SLOG 
»A SLOG 
»A SLOG 


Page 41 








25 October 1990 


STARS-RC-00990/001/00 


404 •cho 

405 « 

406 mv -i ACE $TARGET/bin »* tLOG 

407 

408 « 

409 echo "Build complete" 

410 echo "" 


Page 42 







