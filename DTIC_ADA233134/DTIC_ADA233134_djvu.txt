
ocDnnT nnm 1MENTATI0N PAGE 


m, bOfY 

I FemAppfovtd 
\ OPUNo. 0704-0138 


AD-A233 134 L REPORT DATE 




(■» • mi mm mom i* eg **&**** tggffliM n. teSaftijijSJJ 
■ t»i . . o»Ai >« |W ^ .«»«»uBt.^wv.wag^g 

S.«?ORT TYPE AND OATES COWERED " 

Final 16 Jan 1991 to 01 Mar 1993 


AI1ILE AND SUSllltE Ada Compiler Validation Summary Report: 

Verdix Corporation, VAda-110-6161, Version 6.0.2, DECstation 
3100 (Host) to DECstation 3100 (Target), 900228W1.11001 

•.AUTHOR'S) 

Wright-Patterson AFB, Dayton, OH 
USA 


11. FUNDMG NUMBERS 


7. REAPOAMNQORGAMZATION NAME'S) APOAOORESS(ES) 

Ada Validation‘Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 
Wrighfc-Patterson AFB 
Dayton, OH 45433 

• SPONSORMOMOMTORMQ AGENCY MAC'S) AMD ACOFCSVES) 

Ada Joint Program Office 

United States Department of Defense 

Washington, D.C. 20301-3081 


A PERFORM WO ORGANIZATION 
REPORT NUMBER 

AVF-VSR-363.0191 


Mt. spcnsorpavmontorpiq agency 

REPORT NUMBER 


H. aUPPUICWTART NOTES 


ISA OCTRaUTOMNAAAaajTY SOTEACNT 


UB. OOTTRaUTON CODE 


Approved for public release; distribution unlimited. 


IS. ABSTRACT 

Verdix Corporation, VAda-110-6161, Version 6.0.2, Wright-Patterson AFB, OH, DECstation 
3100 (Host to'Target), ACVC 1.11. 



DT1C 

i --LECTEf|% 

)99jjff Jr: 

1 B 


K -*** CTT * W * Ada programming language, Ada Compiler Validation 
Summary Report, Ada Compiler Validation Capability, Validation 
Testing, Ada Validation Office, Ada Validation Facility, ANSI/MIL- 
STD-1815A. Ada Joint Program Office 


( Of report 

UNCLASSIFIED 

NSN7t4041-aC-*a00 


OF T>eS PAGE 

UNCLASSIFIED 


oFAasnvcr 

UNCLASSIFIED 


IS. NUAMER OF WW»S 


1*.PRXS0C£* 


20. tAOTATOt Of ASmACT 


Pw'M* •» ***i 


qi n io 10.2 


4 . 


Certificate Information 


The folloving Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 28 February 1990. 

Compiler Name and Version: VAda-110-6161, Version 6.0.2 

Host Computer System: DECstation 3100, ULTRIX 3.1 

Target Computer System: DECstation 3100, ULTRIX 3.1 

Customer Agreement Number: 90-01-15-VRX 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

900228W1.11001 is awarded to Verdix Corporation. This certificata expires 

on 1 March 1993. 

This report has been revieved and is approved. 



Steven P. Wilson 
Technical Director 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 



□ □ 







V. 


AVF Control Number: 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 900228V1.11001 
Verdix Corporation 
VAda-110-6161, Version 6.0.2 
DECstation 3100 -> DECstation 31C0 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson APB OB 45433-6503 


AVF-VSR-363.0191 
16 January 91 
90-01-15-VRX 










DECLARATION OF CONFORMANCE 

The following declaration of conformance vas supplied by the customer. 


DECLARATION OF CONFORMANCE 
Customer: Verdix Corporation 

Ada Validation Facility: ASD/SCEL, Vright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: VAda-110-6161, Version 6.0.2 
Host Computer System: DECstation 3100, ULTRIX 3.1 

Target Computer System: DECstation 3100, ULTRIX 3.1 

Customer's Declaration 

I, the undersigned, representing Verdix Corporation, declare that Verdix 
Corporation has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this 
declaration. I declare that the Verdix Corporation is the owner of the 
above implementation and the certificates shall be awarded in the name of 
the owner's corporate name. 


Date: 


1600 NW Compton Drive 
Suite 357 

Beaverton, Oregon 97006 



Stephen ^eigLac J 

Verdix Corporation 






TABLE OP CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OP THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CUSSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPIUTION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 
















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above vas tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard {Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89J. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 


INTRODUCTION 


1.2 REFERENCES 

(Ada831 Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, FiFruary 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

[’JG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CUSSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 


INTRODUCTION 


Por each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists o£ making the modifications described in 
the preceding paragraph, removing vithdravn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OP TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AV?) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 







INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

Softvare that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly softvare, but partial or 
complete hardvare implementations are possible. 

A computer system vhere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Th« following tests have been vithdravn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVP. The 
publication date for this list of vithdravn tests is 31 January 1990. 


E28005C 

B41308B 

C45114A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

C97116A 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

3C1226A 

CC1226B 

BC3009B 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

CD4022A 

CD4022D 

CD^024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2119B 

CE3111C 

CE3118A 

CE3411B 

CE3412B 

CE3812A 

CE3902B 


2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO knovn as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests vere determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 te3ts) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 


2-1 







IMPLEMENTATION DEPENDENCIES 


C45241L..Y (14 tests) C45321L..Y (14 tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

The following 21 tests check for the predefined type LONG_INTEGER: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45612C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

CD7101P 

C55B07A 

B55B09C 

B86001V 

C86006C 

C35702B, C35713C 

, B86001U, 

and C86006G 

check for 

the predefined 


LONG_FLOAT. 

C35713D and B86001Z check for a predefined floating-point type vith a 
naae other than FLOAT, L0NG_FL0AT, or SHORT_FLOAT. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this implementation 
that range exceeds the safe numbers and must oe rejected. (See section 
2.3) 

C45346A checks that NiJMERIC_ERROR is not raised if the length of the 
result of catenation exceeds INTEGER'LAST or SYSTEM.MAX INT and that 
CONSTRAINT ERROR or STORAGE_ERPOR is raised instead. 
NUMERIC/COSSTRAINT_ERROR was raised when an array of length 
INTEGER'LAST/2 ♦ l“was declared. 

C45531M..P (4 tests) and C45532M..P (4 tests) use a value for 
STSTEM.MAX_MANTISSA of 47 or greater. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOVS is FALSE for floating point types; for this 
implementation, MACH1NE_0VERFL0VS is TRUE. 

C86001F recompiles package SYSTEM, making package TEXTIO, and hence 
package REPORT, obsolete. For this implementation, the package TEXT_IO 
is dependent upon package SYSTEM. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

C96005B checks for values of type DURATION'BASE that are outside the 
rang* of DURATION. There are no such values for this implementation. 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 


2-2 









IMPLEMENTATION DEPENDENCIES 


The tests listed in the following table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access method. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 " 

CE2102I 

CREATE 

IN FILE 

DIRECT“I0 

CE2102J 

CREATE 

OUT FILE 

DIRECT~I0 

CE2102N 

OPEN 

in Pile 

SEQUENTIAL 10 

CE21020 

RESET 

in"file 

SEQUENTIAL'10 

CE2102? 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

0UT“FILE 

sequential’io 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 ' 

CE2102S 

RESET 

INOUT"FILE 

DIRECT~I0 

CE2102T 

OPEN 

IN PICE 

DIRECT”I0 

CE2102U 

RESET 

IN"FILE 

DIRECT'IO 

CE2102V 

OPEN 

OUT FILE 

DIRECT'IO 

CE2102V 

RESET 

OUT~FILE 

DIRECT~I0 

CE3102E 

CREATE 

in Pile 

TEXT 15 

CE3102F 

RESET 

Any Mode 

TEXT'IO 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT“I0 

CE3102J 

OPEN 

in Pile 

TEXT“I0 

CE3102K 

OPEN 

OUT FILE 

TEXT~I0 


CE2203A and CE2403A check that WRITE raises USE ERROR if the capacity of 
the cxternel file is exceeded, for SEQUENTIAL_l5 and DIRECT_IO 
respectively. This Implementation cannot restrict file capacity. 

CE3304A checks that USEERROR is raised if a call to SET LINE LENGTH or 
SET_PAGE LENGTH specifies a value that is inappropriate Tor tKe external 
file. tEIs implementation does not have inappropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises L4Y0UT_ERR0R when the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) vere required for 22 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in ths way 
expected by the original tests. 


2-3 








IMPLEMENTATION DEPENDENCIES 


B24009A 

B85008G 

BD4003A 


B33301B 

B85008H 


B38003A 

BC1303F 


B38003B 

BC3005B 


B38009A 

BD2B03A 


B38009B 

BD2D03A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO; the compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. ARM 3.5.7(12)). 

CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A24A, and CD2A31A..C (3 tests) use 
instantiations of the support procedure Length_Check, vhich uses 
Unchecked_Conversion according to the interpreTation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instantiations of Length_Check—i.e., the allowed Report.Failed messages 
have the general form: - 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 










CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
implementation system, see: 

Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly, VA 22021 

For a point of contact for sales information about this Ada implementation 
system, see: 


Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly, VA 22021 


Testing of this Ada implementation vas conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vhether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


3-1 


PROCESSING INFORMATION 


a) Total Number of Applicable Tests 

b) Total Number of Vithdravn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3836 

60 

73 

0 


201 

274 

(c+d+e) 

4170 

(a+b+f) 


All I/O tests of the test suite vere processed because this implementation 
supports a file system. The above number of floating-point tests vere not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler vas tested, the tests 
listed in section 2.1 had been vithdravn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler vas 
tested, the tests listed in section 2.1 had been vithdravn because of test 
errors. The AVP determined that 274 tests vere inapplicable to this 
implementation. All inapplicable tests vere processed during validation 
testing except for 201 executable tests that use floating-point precision 
exceeding that supported by the implementation. In addition, the modified 
tests mentioned in section 2.3 vere also processed. 

A magnetic tape containing the customized test suite (see section 1.3) vas 
taken on-site by the validation team for processing. The contents of the 
magnetic tape vere not loaded directly onto the host computer. The tape 
vas loaded onto a Sun Workstation and the tests vere copied over Ethernet 
to the host machine. 

After the test files vere loaded onto the host computer, the full set of 
tests vas processed by the Ada implementation. 

Testing vas performed using command scripts provided by the customer and 
revieved by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test vere: 


Suppress generation of warning messages. 


Test output, compiler and linker listings, and job logs vere captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team vere also archived. 


3-2 


APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in tvo tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vhich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada strlng~aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$BIG_ID1 

$BIG_ID2 

$BIG_ID3 


(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 «> 'A') 


$BIG IDA (1..V/2 -> 'A') & 'A' & 

(1..V-1-V/2 «> 'A') 


$BIG_INT_LIT 

(1..V-3 -> '0') & 

"298" 

$BIG_REAL_LIT 

• 

• 

< 

1 

u» 

I 

V 

o 

it* 

"69.0E1" 

$BIG_STRING1 

& (1..V/2 -> ' 

A') & 

$BIG_STRING2 

& (1..V-l-V/2 

-> 'A') & 

SBLANKS 

(1..V-20 



$MAX LEN INT BASED LITERAL 

"2:" & (1..V-5 -> '0') & "11:” 

$MAX LEN REAL BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 

$HAX_STRING_LITERAL & (1..V-2 -> 'A') & 




MACRO PARAMETERS 


The folloving table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$HAX_IN_LEN 

499 

$ACC_SIZE 

32 

SALIGNMENT 

4 

$COUNT_LAST 

2_K7_483_647 

$DEFAULT_MEM_SIZE 

16_777_21 6 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

DEC_RISC 

$DELTA_DOC 

0.0000000004656A12873077392578125 

$ENTRY_ADDRESS 

SYSTEM. "+"(16#A#) 

$ENTRY_ADDRESS1 

SYSTEM."♦"(16#B#) 

$ENTRY_ADDRESS2 

SYSTEM."+"<16#C#) 

$FIELD_LAST 

2_i47_483_647 

$FILE_TERMINATOR 

t 9 

$FIXED_NAME 

NO_SUCB_TYPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

nn 

$FORM_STRING2 

"CANN0T_RE STRICT_FILE_CAPACITY" 

SGREATER THAN DURATION 


100_000.0 

$GREATER_THAN DURATION BASE LAST 

To_oo5_ooo.o 

$GREATER THAN_FLOAT_BASE LAST 

l.SE+308 

SGREATER THAN FLOAT SAFE LARGE 
~ 5.0E3O7 

$GREATER_THAN_SHORT_FLOAT_SAFE_LARGE 


A-2 







MACRO PARAMETERS 


9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL EXTERNAL FILE NAMEl 

illegal/£ile_name/2)JX2102C. DAT" 

$ILLEGAL EXTERNAL FILE NAME2 

*/illegal/file_nane/CE2102C*.DAT" 

SINAPPROPRIATE LINE LENGTH 

-1 

SINAPPROPRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006Dl.TST n ) 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_IA3T_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

SLESS THAN DURATION BASE FIRST 

~ -10_OOO_OOO.O 

$LINE_TERMINATOR ASCII.LF & ASCII.FP 

$LOW_PRIORITT 0 

SMACHINE CODE STATEMENT 

C0DE_0'(0P -> NOP); 

$MACHINE_CODE_TYPE C0DE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX__INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

SNAME TINY_INTEGER 

A-3 





X. 


MACRO PARAMETERS 

$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATI0N2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEV_SY S_NAME 

$PAGE_TERMINAl'OR 

$RECORD_DEFINTTION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

STICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABEE_ADDRESS2 
SYOUR PRAGMA 


DECUISC 

/usr/validation/tests/c/e/X2120A 

/usr/validation/tests/c/e/X2120B 

/usr/validation/tests/c/e/X3119A 

16#FFFFFFFD# 

16 _ 777 _ 216 

8 

DEC_RISC 
ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

C0DE_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PASSIVE 


A-4 



APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-l 


/ 





ada - Ada compiler 


Syntax 

«da [options] [source Jle\... [tinker _options] [objectjlle.o]... 

Options 


~4 identifier type value 


-■ fiiejiame 


>0<3 

-a 


-E 

-Elite 
-E directory 


-a 

-El file 

-El directory * 


-K 


-L library jiame 
-Ellejbbreviatlon 


(define) Define an identifier of a specified type and value. See 
Chapter 10. VADSADA PREPROCESSOR REFERENCE. 

(archive) Tie at tile jiame at an object archive file created by v. 
Since some archive flies end with .a, -a is used to distinguish 
archive flies from Ada source files. 

Write out the gnrx.103 file in ASCII. 

(dependencies) Analyze for dependencies only. Do not do 
semantic analysis or coda generation. Update me library, marking 
any defined units as uncompiled. The -d option is used by unake 
to establish dependencies among new flies. 

(error) Process compilation error messages using a.error and send 
It to standard output. Only the souce lines containing errors are 
listed. Only one -e or -E option should be used. 


(error output) Without s file or directory argument, ada processes 
error messages using a. a nor and directs a brief output to standard 
output; the raw error messages are left In adajsource.en. If a file 
pathname is given, the raw error messages are placed in mat file. 
If a directory argument is supplied, the raw error output is placed in 
dfr/source.err. The file of raw error messages can be used as input 
to a.error. Only one -e or -E option should be used. 

(error listing) Intersperse error messages among source lines and 
direct to standard output. 


(error listing) Same as the -E option, except that source listing with 
errors is produced. 

(error v!(1)) Process syntax error messages using •.error, embed 
them in the souce file, and call me enveonment editor 
ERROR_EDfTOR, (if ERROR_EDUOR Is defined, me environment 
variable ERROR_PATTEPN should also be defined. 
ERROR_PATTERN is an editor search comm a nd that locates me 
first occurrence of 1 m the error file.) If no editor Is specified, vt(l) 
Is invoked. 

(keep) Keep the intermediate language (II) file produced by me 
compiler front end. The IL file will be placed irrt he .objects 
directory, wtm me file name Ada_sourceJ 
(library) Operate in VADS library library_name (the current working 
directory is the default). 

(library search) This is an option passed to me UNIX linker, !d(l) 
telling it to search me specified library file. (No space between me 
-1 and me file abbreviation.) 


ada 


-M unRjwm 


-M source /7/e 


-o r xacutab/eJWe 


-O(0-9J 


-P 


-R VADSJlbnry 


• -a 


-T 


For a descript i on or tha flia abbreviations. aaa also Oparattng 
system doa m artatton, ld{l). 

(main) Produce an aatacutabla program by linking the named unit as 
the main p rog ra m, unitjwn* must already be compiled. It must be 
either a parameteriesa procedure or a parameter!ess function, 
reaming an integer. The executable program wffl be named a.out . 
unless overridden with the -o option. 

(main) Produce an executable program by campiling and linking 
aourceJBe. The mam unit of the program is asauned to be the root 
name o< the ji file (for foo.a the unit is foo). Only one 41 file may be 
p receded by -M. The executable program «■ be named a.out 
iniees overridden with the -o option. 

(output) This option it to be used m conjunction wtth the-M option, 
executableJM lathe name of the executable atm than the default 

a. out. 


(optimize) Invoke the code optimizer (OPTIMA An optional digit 
(mart it no space before the digit) provides the level of 
optimization. The default la -04. 


-o 

fuiJ optimization 

-oo 

prevents optimization 

-Ol 

no hoisting 

-02 

no hoiadng but mote passes 

-03 

no notstmg but even more passes 

-04 

hoisting from loops 

-09 

hoisting from loops but mrxe passes 

-09 

hoisting from loops with maximum passes 

-07 

hoisting from loops and trenches 

-09 

hoisting from loops and branches, more 
passes 

-Of 

hoisting from loops and branches, maximum 

pasaas 


Hoiadng from b ranche s (and cases alternatives) can be slow and 
does not always provide significant perform a nce gains so it can be 

mppfHKt], 

For more raorme a cn about optimization, see COMPILING ADA 
PROGRAMS, Compiler Optimizations on page UQ 4-3. See also 
pragma Of»m«ZE_COOfe(OFF) on page PGF-4. 

Invoke me Ada P repro ce ssor. See Chapter 10. VADS ADA 
PREPROCESSOR REFERENCE. 

(recompile ins ta n ti ation) Force analysis of all gsnsric instantiations, 
causing renstaroaaon of any that are out of date. 

(suppress) Apply pragma SUPPRESS to the entire compilation for 
aft supnsM checks. (See also pragma 
SUPPRESS(AU._CHECKS) on page PG F-5 

(timing) Pm timing rtormation for the compilation. 


B-J 




-v (verbose) Pitt compiler version number, date and time of 

compilation, name at flte compiled, com ma n d input line, total 
compilation time, and amor sunmary line. Storage usage 
information about the object me la provided. Wttn OPTIM3 tne 
output format of compression (the size of optimized instructions) Is 
as a percentage of input (unoptimized instructions). 

-w (war ni n gs ) Sipprass warning diagnostics. 

Description 

The command ada executes tne Ada compiler and compiles tne named Ada soiree file, ending wttn 
me .a suffix. The file must reside in a VADS library directory. The adaJB) flle in this directory is modified 
after each Ada unit is compiled. 

By default, ada produces only object and net flies. If the-M option la used, me compiler automatically 
invokes add and builds a complete program with me named library unit as the main program. 

Non-Ada object files (.0 flies produced by a compiler for another language) may be given as 
arguments to ada. These flies will be passed on to me linker and will be linked wttn tne specified Ada 
object flies. 

Command line options may be specified in any order, but tne order of compilation and tne order of 
tne Alec to be passed to tne linker can be significant. 

Several VACS compilers may be simuitaneousiy available on a single system. Because me ada 
com me nd m any VADSJocaOcr/Wn on a system win execute tne correct compiler components based 
upon visible library directives, the option -«h is provided to print the name of me components actually 
executed. 


Program listings wttn a disassembly of machine code instructions are generated by a.db or a.das. 


See also a.das on page UQ 8-6: adb on page UG 8-7; a. error on page UG 8-10; aJd on page 
UG 8-14; amkflb on page UG 8-21; and Operating System referen ce doamentation for me ld(l) 
utility. 

Diagnostics 

The diagnostics produced by me VACS compiler are intended to be self-explanatory. Most refer to 
me RM. Each RM reference includes a section amber and optionally, a paragraph amber enclosed 
in parentheses. 





COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

Th« linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


B-5 






prelinker 


a.ld - 


Syntax 

a.ld (options] unttjarm [Idjoptions) 

Description 

aJd collects me ofiject fl les needed to make unitjiarm a main program and calls the UNIX linkerkJ(1) 
to link together all Ada and otner language onsets required to practice an executable image in a.out. 
unitjmrrm is the main program and must name a non-generic sue program. If unrtjarrm is a function, 
it must retun a value of the type STANOARD. INTEGER. This integer result will be passed back to the 
UNIX shell as the statue code of the execution. The utility uses the net files produced by the Ada 
compiler to check dependency information. aJd produces an exception mapping table and a uut 
elaboration table and passes this information to me linker. 

aJd reeds instructions tor generating executables from the •da.ttb file in the VADS libraries on the 
search list Besides information generated by the compiler, these directives also include WTTHn 
d ir ectives that allow the automatic linking of object modules compiled from other languages or Ada 
object modules net named in context clauses in the Ada source. Any number of WTTHn directives may 
be placed into a library, but they must be numbered contiguously beginning at WTTH1. The directives 
are recorde d in the library's adaJb-file and nave the following form. 

WITHl: LINK: objtct Jilt: 

WTTH2: LINK: archive Jilt: 

WTTHn directives may be placed in the local Ada libranes or m any VADS library on me search list 

A WTTHn directive in a local VADS library or earlier on the library search list will hide the same 
numbered WTTHn directive in a library later m the library search list 

Use the tool aJrtfo to change or report library directivee m me ament library. 

Alt argunenta after unff name are passed on to me linker. These may be options for it, archive llbrariee, 
library abbreviations, or object files. 

VADSjocation/Mi/aJd >s a wrapper program that executes the correct executable based uxn 
directives visible in the edaJb file. This permits multiple VADS compilers to exist on me same host. 
The -sit option prints the name of the actual executable file. 

Options 


ox 


-E unitjwrm 


-L library jama 
-o execurab/ejJ/e 


-an 


(debug) Debug memory overflow (use in cases where linking a large 
number of irrts causes the anor message "local symbol overflow" 
to occu). 

(elaborate) Elaborate unit jam* as tarty m me elaboration order as 
possible. 

(flies) Print a list of dependent flies in order and suppress linking. 

(library) Operate m VADS library library jama (the current working 
directory ie me default). 

(output) Use the specified file name as t>* name of the output rather 
man me default, *.out. 

(show) Display me name of me tool executable but do not execute 

It 


(inks) Prim a list of dependent urtits in order and suppress linking, 
(verbose) Print tbe linker command before executing It 
(verify) Print me linker command but suppress execution. 


aJd 


-u 


-v 

FH#S 


a. out 
.nets 

.objects/* 

VAOSJocatton/atandard/* 


default output fie 

Ada DIANA net flee directory 

Ada object flee 

startup and standard library routines 


See also Operating system documentation, kt(l). 


Diagnostics 

Self-explanatory diagnostics are produced tor missing flea, etc. Occasional additional messages 
are produced by me linker. 


B-7 







APPENDIX C 


APPENDIX P OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 ..127; 

type FLOAT is digits 15 range 

-16#0.1FFFFFFFFFFFFF# .. 16#0.1FFFFFFFFFFFFF#; 
type SHORT_FLOAT is digits 6 range -16#0.FFFFFF# .. 16#0.FFFFFFt; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 


C-l 







ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE ONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as pragma INLINE, indicates to the compiler 
that the subprogram must always be inlined. This pragma also suppresses the generation of a callable 
version of the routine which saves code space. If a user erroneously makes an INLINE_ONLY subpro¬ 
gram recursive a warning message will be emitted and an PROGRAM_ERROR will be raised at run 
time. 

1.2. BU1LT IN Pragma 

The BUILT_tN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Aca body can be pro¬ 
vided. for example the MACHINE_CODE package. 

1J. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument This pragma is only allowed 
immediately at the place of a declarative item in a declarative pan or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit 

When the first argument is a generic unit the pragma applies to all instantiations of that generic. When 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated for a generic instantia¬ 
tion with code generated for other instantiations of the same generic. When the second argument is 
FALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit 

The name pragma SHARE_BODY is also recognized by the implementation and has the same effect as 
SHAR£_CODE. It is included for comparability with earlier versions of VADS. 

1.4. NOJMAGE Pragma 

The pragma suppresses the generation of the image array used for the IMAGE anribute of enumeration 
types. This eliminates the overhead required to store the array in the executable image. An attempt to 
use the IMAGE attribute on a type whose image array has been suppressed will result in a compilation 
warning and PROGRAM_ERROR raised at ran time. 

1.5. EXTERNAL_NAME Pragma 

The EXTEflNAL_NAME pragma takes the name of a subprogram or variable defined in Ada and 
allows the user ©"specify a different external name that may be used to reference the entity from other 
languages. The pragma is allowed at the place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package specification. 


C-2 






li. INTERFACE_NAME Pragma 

The INTERFACH_NAME pragma lakes the name of a a variable or subprog ra m defined in another 
language and allows it to be referenced directly in Ada. The pragma will replace all occurrences of the 
variable or subprogram name with an external reference to the second. link_argument. The pragma is 
allowed at the place of a declarative item in a package specification and musT apply to an object or sub¬ 
program declared earlier in the same package specification. The object must be declared as a scalar or 
an access type. The object cannot be any of the following; 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 


I. 7. IMPUCTT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 

1J. OPTIMIZECODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is only allowed within a 
machine code procedure. It specifies whether the code should be optimized by the compiler. The 
default is ON. When OFF is specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 
2.L CONTROLLED 

This pragma is recognized by the implementation but has no effect. 

22. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

22. INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

This pragma supports calls ’o 'C and FORTRAN functions. The Ada subprograms can be either func¬ 
tions or procedures. The types of parameters and the result type for functions must be scalar, access or 
the predefined type ADDRESS in SYSTEM. All parameters must have mode IN. Record and array 
objects can be passed by reference using the ADDRESS attribute. 

J. LINK_WTTH 

Can be used to pass arguments to the target linker. It may appear in any declarative part and accepts 
one argument, a constant string expression. This argument is passed to the target linker whenever the 
unit containing the pragma is included in a link. 

2.6. LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.7. MEMORY_SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of p ra g mas, the SYSTEM package must be recompiled. 



IS. NON REENTRANT 

This pragma takes one argument which can be the name of either a library subprogram or a subprogram 
declared immediately within a library package spec or body. It indicates to the compiler that the sub¬ 
program will not be called recursively allowing the compiler to perform specific optimizations. The 
pragma can be applied to a subprogram or a set of overloaded subprograsm within a package spec or 
package body. 

2.9. NOT_ELABORATED 

This pragma can only appear in a library package specification. It indicates that the package will not 
be elaborated because it is either pan of the RTS, a configuration package or an Ada package that is 
referenced from a language other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 

2.10. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

2.11. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2.12. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.13. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT. <number>); 

This pragma Pragma passive can be applied to a task or task type declared immediately within a library 
package spec or body. The pragma directs the compiler to optimize certain tasking operations. It is 
possible that the statements in a task body will prevent the intended optimization, in these cases a warn¬ 
ing will be generated at compile time and will raise TASKING_ERROR at runtime. 

2.14. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.15. SHARED 

This pragma is recognized by the implementation but has no effect. 

2.16. STORAGE_UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.17. SUPPRESS 

This pragma is implemented as described, except that DIVIS10N_CHECK and in some case? 
OVERFLOW_CHECK cannot be supressed. 


C-4 


2J8. SYSTEM_NAME 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P’REF 

For a prefix that denotes an object, a program unit, a label, or an entry; 

This attribute denotes the effective address of the first of the storage unis allocated to P. For a subpro¬ 
gram, package, task unit, or label, it refen to the address of the machine code assoc i ated with the 
corresponding body or statement. For an entry for which an address clause has been given, it refen to 
the corresponding hardware interrupt. The attribute is of the type OPERAND defined in the package 
MACHINE_CODE. The attribute is only allowed within a machine code procedure. 

See section F.4.8 for more information on the use of this attribute. 

(For a package, task unit, or entry, the ‘REF attribute is not supported.) 

3.2. TTASKID 

For a task object or a value T. TTASK_ID yields the unique task id associated with a task. The value 
of this attribute is of the type ADDRESS in the package SYSTEM. 

4. Specification Of Package SYSTEM 


■ilk UOIOnD.TWM; 
JYITW i ■ 


m«p> surmssfALL omas): 
prtpi sur/nsuixrirricM yaauu): 
prafna WT a V>iaiATB}: 

t jf Ml if ( 4««_rii« ); 

SYTTW KMi : imiiiii MC :• 4M s riH; 

STOBACB ISflT : t» 9: 

Mftarr.iizi : >• 

IffiMhOifeidMl Nhi4 


MtJXT 
MU lift 
MU'oiam 
MU MUT1J1A 
pi Mi dclta 
not 


iHiiiat i* .J a U7 491 449: 
initial :• 3 M? 491 447; 

••••«•»! r. lJ: * “ 

•••ata.i >• 11: 

• ••anal >• It): 

initial t* 9.01: 


■ • Other Sfii«>4afaa4aai Oailintlni 
fehtype WHOUTY la INTBOH raege 9 .. 9«: 
MU KBC 5121 : iilf|«r ;• 44*1014; 
iff ACDUt it private; 


resell** ->• (A: ACOUSI; It AODMSI) ratara BOCLIAM 

fnaaiiM *<* (A: AOCKSS9; it ACCRXJS) rater* BOOM# 

fas* 1 1 •• *>•• (A: ACCRA!1; It ACD9U1) rater* KXUaK 

r*••!••« •••MAt ACDUU9; It ACCRA!S) talari 900UUM 

fmiiM *•' (A: ACDLEJ1; Bt ACCRA! 1) ratara 17471001 

(eaeli** v (A! A0CRA11; It IKTIOCR) ratara ACCRA! 1 

feeai lea ••• (A: ADDBJU1; I: IKT1CZX) ratara ACCRA!! 


f«a*tin (I: tK*ICMD .TYRIS. IMIOOB,IKTBOOI) man ACCRA! 1 


r«**t i«« m marr acckbss 

(1: umoefi.TYfM.LMiaWD.IXTkCm) l.t.'S MXUJ1 final •••; 
NO,«f* : inlliil ACCKXSt; 


C-5 
















\ 



9 


iTf* TAll.lD ii frifiit: 

NO.TAM.ID : tMtuai TAIK.1D; 

iy*« PKOUM ID ki 

m.nooRAM.id s ••••■••« raouMjD: 


I jf Mmil ia M« LMKMD^TYTtl.UCSUMD.INTSGOl; 

M) a ACH : uaiuat ACCUIS :• 0; 

ptip» WILT.!»(•»•); 
ft%wm WILT IN( *<*); 

P'*mm WILT im ">•*); 
pt.^i WILT 
prap» KJlLT.lMf * * *); 

WILT.IKC *♦•): 

try* task ;d ia m« imimd tttis.lmicw !NTiaW; 

ND.TASK.l6 : uulul TASK.I6 9; 

■riM racobw id ia u> mums nni.iMiaa intmk*: 
NO.raaabM .16 •. miuii racatM.iD !• a: 

••9 STTT1M 


5. Restrictions On Represenution Clauses 
5.L Pragma PACK 

In (he absence of pragma PACK record components are padded so as to provide for efficient access by 
the target hardware, pragma PACK applied to a record eliminate the padding where possible. Pragma 
PACK has no other effect on the storage allocated far record components a record representation is 
required. 

5.2. Size Clausa 

For scalar types a representation clause will pack to the number of bits required to represent the range 
of the subtype. A size clause applied to a record type will not cause packing of components; an expli¬ 
cit record representation clause must be given to specify the packing of the components. A size clause 
applied to a record type will cause packing of components only when the component type is a discrete 
type. An error will be issued if there is insufficient space allocated The SIZE attribute is not sup¬ 
ported for task, access, or floating point types. 

5J. Address Clausa 

Address clausa are only supported far variables. Since default initialization of a variable requires 
evaluation of the variable address elaboration ordering requirements prohibit initialization of a variables 
which have address clauses. The specified address indicates the physical address associated with the 
variable. 

5.4. Interrupts 

Interupt entries are not supported 
5-5. Representation Attributes 

The ADDRESS attribute is not supported for the following enuues: 

Packages 
Tasks 
Labels > 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported 


C-6 








/ 


The general definition of the package MACHINE_CODE provides an assembly language interface for 
the target machine. It provides the necessary record type<s) needed in the code statement, an enumera¬ 
tion type of all the opcode mneumonics, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows: 

CODE_n'( opcode, operand {, operand )); 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands are listed within a subaggregate. 
The format is as follows: 

CODE_N’( opcode, (operand (, operand})); 

For those opcodes that require no operands, named notation must be used (cf. RM 43(4)). 

CODE_0’( op ■> opcode ); 

The opcode must be an enumeration literal (Le. it cannot be an object, anrioute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the 'REF attribute. 

The arguments to any of the functions defined in MACHINE_CODE must be static expressions, string 
literals, or the functions defined in MACHINE_CODE. The 'REF attribute may not be used as an argu¬ 
ment in any of these functions. 

Inline expansion of machine code procedures is supported. 


6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as physical addresses. 

8. Restrictions on Unchecked Conversions 

None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECTJO use the value MAX _R£C_ SIZE as the record size (expressed in 
$TORAGE_UNITS) when the size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_fYPE'SIZE is very large, MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT 10 to provide an upper limit on the record size. In any cue the maximum size 
supported is 1024 x 1024 x STORAGEJJNIT bits. DIRECT JO will raise USE_ERROR if 
MAX_REC_SIZE exceeds this absolute limit. - 


C-7 




Instantiations of SEQUENTIAL JO use the value MAX_REC_SIZE as the record size (expressed in 
STORAGEJJNITS) when the tize of ELEMENT_TYPE~exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE'SIZE is very large, MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined in SVSTEM and can be changed by a program before 
instantiating INTEGER JO - to provide an upper limit on the record size. SEQUENTIAL JO imposes no 
limit on MAX_REC_S I7.E. 


1L Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources up to or even near these limits ate available to every program. 


11.1. Line Length 

The implementation supports a maximum line length of 500 characters including the end of line charac¬ 
ter. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 4,000,000 x STORAGE_UNTTS. The maximum 
size of a statically sized record type is 4,000,000 x STORAGE JJNITS. A record type or array type 
declaration that exceeds these limits will generate a warning message. 

11J. Default Stack Size for Tasks 

In the absence of an explicit ST0RAGE_SI2E length specification every task except the main program 
is allocated a fixed size stack of 10,240 STORAGEJJNITS. This is the value returned by 
T'STORAGE J> IZE for a task type T. 

11.4, Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default collection size for an access 
type is 100 times the size of the designated type. This is the value returned by T*STORAGEJ>IZE for 
an access type T. 

1L5. Limit on Declared Objects 

There is an absolute limit of 6.000,000 x STORAGEJJNITS for objects declared statically within a 
compilation unit. If this value is exceeded the compiler will terminate the compilation of the unit with a 
FATAL error message. 




C-8 


