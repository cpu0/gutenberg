AD-A28,5.108 NTATION PAGE 


1. AGENCY USE 


(Leave 


Form Approved 


OPM No. 


lated to average 1 hour per 'esponae. InciuOIng the time for reviewing instruoions. searching exisCng data 
wing the collection of Information. Send comments regaCing this buiden. to Washington i leadquaders 
ns Jefferson Oavis Highway. Suite 1204. Arlington. VA 22202-4302. and to the Office of Information and 
. in, DC 20503 


2. REPORT 


3. REPORI TYPE AND DATES 


4. TITLE AND: Compiler: SKI Computers, Inc 
Compiler: SKYvec ADA. Release 3.6 
Host; SPARCstation 10 Model 402 (under SunOS 4.1.3) 
Target: SKYbolt Model 8146-V (under SKYmpxrt release 3.6) 


6. AUTHORS: 

Wright-Patterson AFB, Dayton. OH 


7. PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 



9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Join! Piogram Office, Defense Information System Agency ^ 

Code TXEA, 701 S. Courthouse Rd., Arlington, VA T % ^ | 

22204-2199 •' /i,..- 


10. SPONSORI. :g/monitoring 
^ AGENCY 



12a. DISTRIBUTION/AVAILABILITY: Approved for public release; distribution 12b. DRISTRIBUTION 
unlimited 


(Maximum 200 


SKY Computers, Inc., 940803W1.11374 


14. SUBJECT: Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 
ANSI/Mil-STD-1815A 


15. NUMBER OF 


16. PRICE 


17 SECURITY 

CLASSIRCATION 

UNCLASSIFIED 


ia. SECURITY 


19. SECURITY 

CLASSIRCATION 

UNCLASSIFIED 


20. LIMITATION OF 


UNCLASSIFIED 


UNCLASSIFIED 
































AVF Control Niunber: AVF-VSR-602,0894 
Date VSR Completed: 8 August 1994 

94-06-22-SKY 


Ada COMPILER 
VALIDATIW SUMMARY REPORT: 

Certificate Number: 940803W1,11374 
SKY Computers, Inc. 

SKifvec ADA, Release 3.6 

SPARCstation 10, Model 402 under SmOS, 4.1.3 >«> 
SKYbolt Model 8146-7 under SKYlnpxrt, release 3.6 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


Accesion Tor 


NTIS CRA&I 
DTIC TAB 
Unannounced 
Justification 


□ 


By. 

Dh.t'ibution; 


Availabili y Codes 


Avail and for 
Dist I Special 




.D'riw ci'JAmy 






94-30981 






Q 


O 















Certificate Information 


The following Ada implementation was tested and determined to pass ACVC l.ll. 
Testing was ccaspleted on 3 August 1994. 


Con^jiler Neime and Version: SKYvec ADA, Release 3.6 

Host Computer System: SPARCstation 10, Model 402 

under SunOS, 4.1.3 


Target Ccmputer System: SKYbolt Model 8146-V 

under SKTftipxrt, release 3.6 

Customer Agreement Number: 94-06-22-SKy 


See section 3.1 for any additional information cibout the testing environment. 

As a result of this validation effort. Validation Certificate 940803W1.11374 
is awarded to SKY Computers, Inc. This certificate expires two years after 
MIL-STD-1815B is approved by ANSI. 


This report has been reviewed eind is approved. 



Ada Validation Facility 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


ASa VaJdWrtdn'X)tg anization 

/T Direc|.or ,^-ecm4^ter and Software Engineering Division 
Institute rdr Defense Analyses 
Alexandria VA 22311 



Defense information Systems Agency, 
Center for Information Management 










DECLARATION OF CONFORMANCE 


Custonsr: Sky Computers, Inc. 

Ada Validation Facility: CTAInc. 

5100 Springfield Pike, Suite 100 
Dayton, Ohio 45431 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: SKYvec ADA release 3.6 

Host Computer System: SPARCstation-10, Model 402, Sun Microsystems 
Host Operating System: SunOS 4.1.3 

Target Computer System: SKYbolt Model 8J46-V 
Target Operating System: SKYmpxrt release 3.6 

Customer's Declaration 

I, the undersigned, representing SKY Computers, Inc., declare that SKY Computers, Inc. 
has no knowledge of deliberate deviations fi-om the Ada Language Standard 
ANS1/MIL-STD-1815A in the implementation listed in this declaration. 

I declare that SKY Computers is the owner of the above implemenudon and the certificates 
shall be awarded in the name of the owner's corporate name. 


Date: July 1, 1994 



Manager, Languages Tools, 
SKY Computers, Inc. 

27 Industrial Ave. 

Chelmrford, MA 01824 








TABLE OF CONTENTS 


CHAPTER 1 


1.1 

1.2 

1.3 

1.4 

CHAPTER 2 


2.1 

2.2 

2.3 


CHAPTER 3 


3.1 

3.2 

3.3 


APPENDIX A 


APPENDIX B 


APPENDIX C 


I 

1 

I 


INTRODUCTION 


USE OF THIS VALIDATIC^I SUMMARY REPORT.1-1 

REFERENCES.1-2 

ACVC TEST CLASSES.1-2 

DEFINITION OF TERMS.1-3 

IMPLEMENTATION DEPENDENCIES 

WITHDRAWN TESTS.2-1 

INAPPLICABLE TESTS.2-1 

TEST MODIFICATIONS.2-4 

PROCESSING INFORMATION 

TESTING ENVIRONMENT.3-1 

SUMMARY OF TEST RESULTS.3-1 

TEST EXECUTION.3-2 


MACRO PARAMETERS 


COMPILATION SYSTEM OPTIONS 


APPENDIX F OF THE Ada STANDARD 


1 


















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above wae tested according to the Ada 
Validation Procedures (Pro92] against the Ada Standard [AdaBB] using the 
current Ada Conpiler Validation Capability (ACVC). This validation Sunnary 
Report (VSR) gives an account of the testing of this Ada iaplementation. For 
any technical terms used in this report, the reader is referred to (Pro92]. 
A detailed description of the ACVC may be foxond in the current ACVC User's 
Guide (UG891. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the conputers, operating systems, and ccnpiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject iaplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are availe±>le to the public from the AVF which performed this 
validation or from; 

National Technical information Service 
5285 Pert Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

institute for Defense Analyses 

1001 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 










INTRODUCTICN 


1.2 REFERENCES 

(Ada83] Reference Manual for the Ada Programmin g Language , 

ANSI/MIL-3TD-181bA, February iSS* and ISO 0652-1507. 

[Pro92] A^x compiler validation Procedures , Version 3.1, Ada Joint 
Program Office, August 19^2. 

(UG89] Compiler Validation Capaoility User's Guide , 21 June 1909. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inplementations is tested L/ means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are eirecutable. Class B eind 
class L tests are expected to produce errors at coopile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK FILE are used for this purpose. The^packag^REPOR^also 
provides a set of identity functions used to defeat comfiiler 
optimizations allowed by thie Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by mariy tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CKF.CK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, /alidation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not execut 2 ible. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada standard are detected- Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the couapiler. This behavior is 
also verified. ' 

Class L tests check thiit an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled unit.s. Errors are 
expected at link time, and execution is attemn^ed. 

In some tests of the ACVC, certain macro strings have to br replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provide in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-cependent characteristics. The modifications required for 
this implementation are described in section 2.3. 




INTRODUCTION 


For each Ada inpleinentation, a customized test suite is produced the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests vsee section 2.1), emd possibly 
removing some inapplicable ter' (‘ee section 2.2 and [0089]). 

In order to pass an AGTC an * implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Coinpiler The software and auiy needed hardware that have to be added to 
a given host and target computer system to allow 
transfonaacion of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing conpliemce of Ada inplementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user’s guide and the template for the validation summary 

(AC^C) report. 

Ada An Ada compiler with its host computer system emd its 

iKplementation target conputer system. 

Ada Joint The part of the certification body which provides policy and 

P'' 0 ' 3 ra.m gi.iidance for the Ada certification system. 

Office (AJPO) 

Ada Ttie part of the certification body which carries out the 

Validation procedores required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validatiori guidance for operations of the Ada certification system. 

Orgemization 
(AVO) 

Coapliance of The ability of the implementation to pass an ACVC version. 

2 m Ada 

Implementation r 

Ccnpv.ter A functional unit, consisting of one or ©ore computers and 

System associated software, that uses connon storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 



INTI^ODUCTiaj 


Confonaxty 


Customer 


Declaration ot 
Confonrance 


Host Computuf 
System 

Inapplicable 

test 

ISO 

LKl 


Operating 

System 


Target 

Cottputer 

System 

Validated Ada 
Compiler 

Validated Ada 
Irapleiuentation 

Validation 


Withdrawn 

test 


FuCfillraent by a product, process, or service of all 
requirements specified. 

An individual or corporate entity wiio enters into an agree-ment 
with eur avf vrfiich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized cr attainable on the Ada iitplementation for vrfiich 
validation status is realized. 

A computer system vdicre Ada source programs are trauisfcrmed 
into executable form. 

A test that contains one or more test objectives fo’ond to be 
irrelevant for the given Ada inqolementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSIy'MIL-STD-iai5A-i983 and ISO 8652-1987. Citations from the 
7JIM take tlie form "<soction>.<subsection>:<paragtaph>." 

Software that controls the execution of progreuns and that 
provides services such as resource allocation, scheduling, 
input/oi’tput control, and data management. Usually, operating 
systems are predomiriintly software, but partial or complete 
hardware implementations are possible. 

A coicputer system vdiere the executable form of Ada programs 
are executed. 


The cottpiler of a validated Pda imp3einentation. 


An Ada implementation that has been validated successfully 
either by AVF testing ot by registration [Pro92]. 

The process of checking the conformity of an Ada conpiler to 
the Ada programming language zuid of issu’.ng a certificate for 
this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect loecause it has ein invalid 
test objective, fails to meet its test objective, ot contains 
erroneous cr illegal use of the Ada programming language. 


1-4 







CHAPTER 2 

IMPLEMENTATION DEPENDENCIES 


2*1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35F>07K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43C04A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49006B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A4LA 

CD2A41E 

CD2A87A 

CD2b15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024D 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A. 

BD8004C 

CD9005A 

CD9005B 

CnA20lE 

CE2107I 

CE2117A- 

CE2117P 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

ar.36C7D 

CE3B12A 

CE3814A 

CE3902B 



1 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada iitplenentation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Conrnentaries and conroonly referenced in the forniat Al-ddddd. For this 
implementation, the follwiring tests were determined to be inapplicable for 
the reasons indicated; references to Ada Coninentaries are included as 
appropriate. 


2-1 









IMPLEMENTATICN DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM,MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (IS tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L,.Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B66001T, and C86006H check for the predefined type 

SHORT_FLCiAT; for this implementation, there is no such type. 


C35713D and D86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCX4G_FIiQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 


C45423A, C45523A, and C45622A check that the proper exception is raised 
if MACHINEjOVERFLCWS is TRUE and the results of various floating-point 
operations lie outside the range of the base type; for this 
inplementation, MACHINE OVERFLCWS is FALSE. 

C45531M..P auid C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANriSSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

CA2009C end CA2009F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and Al-00506 such that the compilation of the generic unit 
bodies makes the instantiating uidts obsolete. (See section 2.3.) 

LA3004A.,B, EA3004C.,D, and CA30G4E..F (6 tests) check pragma INLINE for 
procedures and functions; this implementation does net support pragma 
INLINE. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

BD8001A, BD8003A, DD8004A..E (2 tests), and AD8011A use machine code 
insertions; this implementation provides no package MACHINj:_CODE. 


2-2 





IMPLEMEinATIC^I DEPEI^ENCIES 


AE2101C and EE2201D..E (? tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
tiiis compiler. 

AE2101H, EE2401D, and EE2401G use insteintiations of package directio 
with unconstrained array type^ and record types with discriminauits 
without defaults; tlrese instantiations are rejected by this compiler. 

The tests listed in the following tzdale check that USE ERROR is raised 
if the given file operations are not supported for tlie given combination 
of mode and access aethod; this implementation supports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CRE^.TE 

aiT FILE 

SEQUENTIAL 10 

CE21C2F 

CREATE 

INOOT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

direcTio 

CE2102N 

OPEN 

IN FILE 

.SEQUIim'IAL 10 

CE2102O 

RESET 

JN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL lO 

CE21U2R 

OPEN 

INOvJT FILE 

DIRECT 10 " 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIPJSCT 10 

CE3102E 

CREATE 

IN FILE 

TEXT_I0 

CE3i02'^ 

RESET 

Any Mode 

TE5CT 10 

CE3102G 

DELETE 


TEXTIO 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OOT FILE 

TEXT 10. 


Thr following 16 tests check operations on sequential, direct, and text 
files vhen multiple i.iternal files arc associated wfth the same external 
file and one or more are open for writing; USEEIIKOR is raised when this 
association is attempted. 

CE2107B..E CE2107G..II CE2107L CE2110B CE2110D 
CE2111D CE211in CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE__ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 


2-3 









IMPLEMEirCATIC^ DEPENDENCIES 


CE2403A checks thiat WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LIl'ffi LENGTH and SET PAGE_LENGTH raise USE_ERROR 
if they specify an inappropriate value for the external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises IAYOUT_ERROR when the value of the page 
nuntber exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 7 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22003A B83033B B85013D 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that xmit's body; as allowed by AI-00408 and 
AI-00506, the conpilation of the generic unit bodies makes the compilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as directed 
by the AVO. These tests check that instantiations of generic units with 
unconstrained types as generic actual parameters are illegal if the generic 
bodies contain uses of the types that require a constraint. However, the 
generic bodies are conpiled after the units that contain the instantiations, 
and this implementation creates a dependence of the instantiating units on 
the generic units as allowed by AI-00408 and AI-00506 such that the 
compilation of the generic bodies makes the instantiating units obsolete—no 
errors are uetected. The processing of these tests was modified by 
re-compiling the obsolete units; all intended errors were then detected by 
the conpiler. 


2-4 








CHAPTER 3 


PROCESSING INFORMATICN 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Michael LeBlanc 
SKY Confuters, Inc. 

27 Industrial Ave. 

Chelmsford MA 01824 
(508) 250-1020 


Testing of this Ada intplementation was conducted at the customer'^ site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC [Pro92]. ^ 

For all processed tests (inapplicable auid applicable), a result was obtained 
that conforms to the Ada Programming Language Stzmdard. 

The list of items belaw gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn oecause of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All rests passed, except those that ate listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 







PROCESSING INFORMATIC»I 


a) Total Number of Applicable Tests 3781 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 84 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 285 (c+d+e) 


g) Total Number of Tests for ACVC 1-11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite {see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computet, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable iitages were transferred to the target computer 
system by the Ethernet, and run. The results were captured on the host 
computer system. 

Testing was performed using coimnand scripts provided by the customer and 
reviewed by the validation team. See /^jpendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. 

No explicit options were used for testing this implementation. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. Tlie listings examined on-site by the 
validation team were also archived. 




3-2 









APPENDIX A 


MACRO PARAMETiraS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in (1X589], The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximijm input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the meiximum input-line length. 

Macro Parameter Macro Value 


$KAX_1^;_LEN 200 — Value of V 

$BIG_ID1 (l.,V-l -> 'A', V -> '1') 

$BIG_ID2 (1..V-1 -> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$DIG ID4 (1..V/2 -> 'A') & '4' & 

(l,.V-l-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

SBIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_STBING2 & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 ) 

$MAX_LEN_INT_BAS£D_LITEIIAL 

"2;" & (1. .V-5 -=> 'O’ ) & "11:" 

$MAX_LEN_REAL_BASED LITERAL 

"16:" & (l.,V-7 «> '0') 6. "F.E:" 


A-l 











MACRO PARAMETERS 

$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SI2E 32 

$ALIGNMENT 4 

$COUNT_LAST 2_147_483_646 

$DEFAULT_MEM_SIZE 1024 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_N?\ME BOLT 

$DELTA_DOC 2.0** (-'31) 

$ENTRY_ADDRESS . 16#0# 

$ENTRY_ADDRESS1 16#1# 

$ENTRY_ADDRESS2 16#2# 

$FIELD_LAST 2_147_483_647 

$FILE_TEBMINATOR ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

§FLOAT__NAME NO_SUCH_FLOAT_TYPE 

$FORM_STRING "" ■ 

$FORM_STRING2 "C3«®?0T_RESTRICT_FILE_CAPACITY'' 

$GREATER THAN_DURATI0K '• 

90_000.0 

SGREATER THAN_IXJRATiaJ BASE LAST 

To_ooTJ_ooo.o 

$GREATER THAN_FLQAT BASE LAST 

$GREATER than FLOAT SAFE LARGE 

3.IE+36 


A-2 









MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE LARGE 

' 3.4E+38 

$HIGH_PRIORITY 20 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/NMJIRECTORY/FILENAMEI 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/NOOIRECTORy/FILENAME2 

$ INAPPROPRIATE LINE_LENGTH 

-1 

$INAPPROPRIATE PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE (•’A28006D1 .ADA" ) 

SINCLUDE_PRAGMA2 PRAGMA INCLUDE ( "B28006F1 .ADA" ) 

$INTEGER_FIRST -2147483648 

$.'NTEGER_LAST 21474S3647 

$INTEGER_LAST_PLUS__1 2147483648 

$INTERFACE_LANGUAGE C 

$LFSS_THAN_DURATION -90_000.0 

$LESS_THAN_DURATION_BASE FIRST 

-1T5_000_000.0 

§LINE_TERMINATDR ASCII. LF 

$LOW PRIORITY 1 

$MACHINE_COnE STATEMENT 

NULL; 

$MACHINE_ CODE_TYPE INSTRJUCTKX^ ' 

$MANnSSA_DOC 31 

SMAX_DIGITS 15 

$MAX_INT 2147483647 

$MAX_INT_PLUS_3 2147483648 

$MIN_INT -2147483648 

$NAME BYTE_INTEGER 

A-3 







MACRO PARAMETERS 


$NAME_LIST 

§NAME_SPECIF1CATI0N1 

SNAME_SPECIFICAT10N2 

$NAME_SPECIFICATION3 

SNEX;_BASED_INT 

$NEW_MEM_SI2E 

$N3M_ST0R_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

§VARIABLE_ADDRESS 

5VARIABLE_ADDRESS1 

$VARIABLE_AI»)RESS2 

$YOUR_PRAGMA 


BOLT 

/acvc/val/X2120A 
/acvc/val/X2l2 Ob 
/ acvc/val/X3119A 
leSFFFFFFFEt 
1024 
8 

BOLT 

ASCII.LF & ASCII.FF 
NEW INTEGER 
INSTRUCnCN 
32 

2048 

1.0 

FCNDECL. VAR_A]X)RESS 
FCNDECL.VAR_An®RESSl 
FCNDECL.VAR_AECRESS2 
NO SUCH PRAGMA 


I. 


A-4 









APB-EJ^IX B 


CX3MPIIATI0N SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
A{^ndix, ate provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 











Invocaoon ada (options . . .] fiie.ada . . . 

Description 

The ada command invokes the SKYvec Ada compiler. 

A program library must be created using mklib or newlib in advance of any 
compilation. The compiler aborts if it is unable to find a program librar. (either 
the default, ada.lib. in the current vvorking directory or the library name specified 
with the -L option). 

Note that the source file has the extension . ada. Just about any non empty file 
extension is permitted. The ones not allowed include those used by the SKYvtc 
Ada compiling system for other purposes such as .o for object module files. If 
an illegal extension is given, tlie error message "missing or improper file 
name" is displayed. Some other commonly used source file extensions are; 

. ads for package specification source files 
. adb for package body source files 
.sub for subunit (separate) source files 

Options 

- f D Generate debugging ouqjut. The - f d option causes the compiler to gen¬ 
erate the appropriate code and data for operation with the SKYvec Ada 
Debugger. For more information on using this option and using the De¬ 
bugger, sec Chapter 9. 

-f E Generate error log file. The -f e option causes the compiler to generate 
a log file containing all the error messages and warning messages pro¬ 
duced during compilation. The error log file has the same name as the 
source file, with the extension .err. For example, the error log file for 
Simple, ada is sin^Jie.err. The error log file is placed in the current 
working directory. In the absence of the -fE optioji, the error log infor¬ 
mation is ^ni to the standard output stream. 

-f L Generate exception location information. The - ft option causes location 
information (source file names and line nuirfbers) to be maintained for 
internal checks. This information is useful for debugging in the event that 
an "Exception never handled” message appears when an excention prop¬ 
agates out of the main program (see section Exception Never Handled on 
page 3-10). This option causes the code to be somewhat larger. If -f l 
is not used, exceptions that propagate out of the main program will be¬ 
have in the same way, but no location information will be printed with the 
"Exception never handled" message. 

-f N Suppress numeric checking. The - f n option supp.resscs two kinds of nu • 

meric checks for the entire compilation: 


16-2 


SKYvec Ada User's Guide 









1. ciivision_chec)t 

2. overf low_chec)t 

These checks are described in section 11.7 of ihc LRM. Using - fN re¬ 
duces the size of the code. Note that there is a related eda option, - f s to 
suppress all checks for a compilation. Sec also section Exception Never 
Handled on page 3-10. 

The “£N option must be used in place of pragma suppress for the 
two numeric checks, because presently pragma suppress is not sup- 
poned for divi3ion_check and overf low_check. Pragma sup¬ 
press woiks for other checks, as aesenbed in section Reducing 
Program Size on page 2-4. In the absence of the - £N opuon, the numeric 
checks are always performed. 

-fs Suppress all checks. The-fs option suppresses all automatic checking, 
including numeric checking. This option is equivalent to using pragma 
suppress on all checks. This option reduces the size of the code, and 
IS good for producing "prodaciion quality" code or for benchmarking the 
compiler. Note that there is a related ada option, -fN to suppress only 
certain kinds of numeric checks. See also sections Reducing Program 
Size on page 2-4 and Automatic Checks on page 3-11. 

-f V Compile verbosely. The compiler prints the name of each subprogram, 
package, or generic as it is complied. Information about the symbol table 
space rcniaiitirig following com|/ilaucncf the named entity is also printed 
inthefomi "(nKl". 

-fw Suppress warning messages. With Uiis option, the compiler does not 
print warning messages about ignored pragmas, exceptions that are cer¬ 
tain to be raised at run-time, or other poterttial problems that the compiler 
is otherwise forbidden to deem as errors by the LRM. 

-g The -g option instructs the compiler lo run an additional optimization 
pass. The optimizer removes common sub-expressions, dead code and 
unnecessary jumps. It also does loo? optimizations. This option is dif- ’ 
fereni from the -g ofaion to barop. The -g option to ada optimizes the 
specified unit when it is compiled; no inter-urui optimization is done. The 
-g option to bamp analyzes and optimizes the entire program at link time. 
Note; Even if -g is specified for the ada command, the -K option lo'ada 
must still be specified for the -g option to bamp to be effective. 

-K Keep internal form file. This option is used in conjunction with the Op¬ 
timizer (sec Chapter for more information). Without this option, ihe 
compiler deletes internal form files following code generation. 

-Imodiders 

Generate listing file. The -i option causes the compiler to create a list¬ 
ing. Optional modifiers can be given to affect the listing format. You can 
use none or any combination of the following modifiers; 

c continuous listing format 


SKYvec Ada User's Guide 


16-3 






P obey pragma page directives 

s use standard output 

t lelsvant text output only 

The fointats of and options for listings are discussed in section Listings 
on page 16-6. The default listing file generated has the same name as the 
source file, with the extension . 1 st. For example, the default listing file 
produced for siraple.ada has the name .>^impie. ist. The listing file is 
placed in the current v/orking directory. Note; -i also causes an error 
log file to be produced, as with the -£c option. 

-Ii liijzary-name 

Default: ada. lib 

Use alternate library, -l option specifies an alternative name for the pro- 
graii* library. 

Note: Options beginning with -f can be combined, as in "-fsv.” 
This is equivalent to specifying the options separately, e.g. "-f s 
-fv." Options beginning with -l can be similarly combined or 
separated, as in "-ics" or "-ic -is" (see section Listings on 
page 16-6). 


Compiler Output Files 

Files produced by compilations, other than listings and error logs, are: 

Files Description 

. at r interface description files 

. int Meridian Internal Form files 
. gnn generic description files; nn is a two-digit number 
. o object code files 

. 3«p subunit environment description files 

Also produced are various intermediate files; these are usually deleted as a mat¬ 
ter of course. You normally need not concern yourself with most of these output 
files with the exception of assembly language files. 

Output files are placed cither in the current working directory or in the auxiliary 
direaoiy, depending on the configuration of the pror^ram library (as determined 
by mkiib or newiib). The name of an auxiliary'^directory associated with a 
program library can be determined by using the -h option to the islib com¬ 
mand. 

The name of an output file is derived from the first 10 characters of the compila¬ 
tion unit name, but when a name collision occurs, the library system assigns an 
arbitrary unique name that may bear no relation to the source file name (it might 
look like "aaaaaaab"). The -l option to the isiib command must be used to 
determine the base name used to derive the output file names for a particular li¬ 
brary entry. The base name is displayed as the "Host system file name". 

The name of an output file is derived from the compilation unit name. 


J6-4 


SKYvec Ada User's Guide 







Supplementary files Uiat may be pnoduced by a compilation are; 

.err error log files (only when-fE option used) 
. ist listing files (only when -1 option used) 

These are discussed in section Listings on page 16-6. 


Non-Local Compilations 

The compiler is able to compile files that reside in direaories other than the cur¬ 
rent worWng directory. As always, a program library (typically a da .lib) must 
be present in the current working directory. All output files are placed in the cur¬ 
rent working directory or in the local auxiliary dircaory (ada. aux). 

Compile-Time Error Messages 

When syntactic or semantic errors are detected in the source code, the SKYvec 
Ada compiler produces either error messages or warning messages. These mes¬ 
sages are normally produced on the standard output stream. If the -f E option is 
given, these messages are written, instead, to an error log file. The error log file 
has the same name as the source file, with the extension .err. 

When error messages are printed, processing does not proceed beyond the first 
pass. No object code file is produced. Warning messages do not prevent further 
processing. Other passes (e.g. the code generator) may print error messages as 
well, but these are almost certain to be error messages related to problems inter¬ 
nal to the compiler itself, and should be reported to SKY Computers. Inc. 

Error messages have the form; 

"filename”, nn: English explanation of error [LRM l.m.n/p) 

where filename is the name of the program source file in which the erroi was 
detected, nn is the specific line number in the source file where the error oc¬ 
curred, followed by an explanation in English of the error, and, when appropri¬ 
ate. a reference to the LRM. The LRM reference gives the chapter (i), section 
(m). subsection (n), and paragraph number (p). 

An example follows. 

"rt.ada", 245: record component redeclared [LRM 3.7/2,j 

Depending on the severity of the error, the SKYvec Ada compUer may attempt 
to recover and continue compiling the source code, or may terminate compilation 
immediately. 

Warning messages have the form; 

"filename", n; <<warning» message 
An example warning message is shown below. 

•rt.ada", 297: <<warning» INLINE: pragma has no effect 
Error messages that begin with 


SKYvec Ada User’s Guide 


16-5 









■*** 


Compiler Error 


are irnemal compiler error messages. If any appear, they should be reported to 
SKY Computers. 

All error messages and warning messages should bt self-explanatory. 


Listings 

The compiler by default does not produce listings. The -i option causes the 
compiler to produce both a listing file and an error log file. The - f e option caus¬ 
es the compiler to produce only an error log file. In the absence of these options, 
the compiler priius an error log to the standard output stream alone. 

Listing File Contents 

■Ihe listing file contains line-numbered, paginated source text with error and 
warning messages interspersed. Listing file error messages appear in the format: 

»**»*«£ error message * 

Warning messages appear in the fonnat: 

++++++W warning message + 

The listing generated when -1 is specified obeys pragma list and pragma page 
as described in the LRM. Pragma list and pragma page have no effect in the 
absence of the -i option. 

Listing Format Control 

Listing format is controlled via modifiers to the -i option or via a compiler de¬ 
fault option description file named ada. ini. Refer to section Default Option 
Description File on page 16-7 for information about the ada. ini file. 

The -1 option has the form -imoaifiers, where modifiers are zero ormore 
of these letters: 

c Use continuous listing format. The listing by default contains a header 
on each page. Specifying -ic suppresses both pagination and header 
output, producing a continuous listing. 

p Obey pragma page directives. Specifying -ip is oiUy meaningful if 
-ic has also been given. Normally -ic 'suppresses all pagination, 
whereas -icp suppresses all pagination except where explicitly called 
for within the source file with a pragma page directive. 

3 Use siandrud output. The listing by default is v- ritten to a file with the 
same name as the source file and the extension . 1st. as in simple . 1st 
from simple. Ada. Specifying -Is causes the listing file to be wrinen 
to the standard output stream instead. This output may be redirected any¬ 
where (e.g. to the PRN device). 

t Generate relevant text output only. The listing by default contains the 
entire sourxre program as well as interspersed error messages and warning 


76-6 


SKyvec Ada User's Guide 





messages. Specifying -it causes ilic compiler to list only the source 
lines 10 which error messages or warning messages apply, followed by the 
messages themselves. 

Any. all or none of the suffix letters c. p. s, and t may be given following - i , 
as in -leg, -let, or -lent. The options can also be given separately, as in - 
Ic -Is. 


Default Option Description File 

Compiler behavior can be modified nor only by command line options, but also 
by a default option description file named ada. ini. Default options are given 
in lib/ada .ini in the installation directory^ while local overriding options 
can be given in an ada. ini file in the current woildng directory. At present, 
only listing format parameters can be set in a compiler default option description 
file. 

The ada. ini file IS an ordinary text file that may be created or edited with any 
editor used to edit Ada programs. The detault lib/ada. ini file contents are; 

— SKYvec Ada compiler default option descri,.tion f;le 


—page_length 

K 

66; ■■ 

— min: 

5 

—top_margin 

m 

6; 

— min: 

2 

—bottom_iivargin 

- 

6; 

— min: 

2 

—left_margin 

m 

4; 

— min: 

0 

—page_width 

■ 

132; 

— min: 

40 

—lineno_width 

- 

5; 

— min: 

0 

—marker__linea 

- 

1; 

— min: 

0 

—heade r_time g t amp 

- 

true 



;—summary 

- 

true 



;—graphic_control3 

“ 

true; 



—error_tag 

>= 

"E" ; - 

-warning_tag: «• 


The lib/ada . ini file as it is initially configured consists solely of comments 
showing examples of parameter assigrunents. The compiler default option de¬ 
scription file may consist of Ada comments, blank lines, or assignments. In the 
example above, the initial comment characters ("- -") must be deleted to make 
any parameter assignment effective. The comments show the default values of 
the parameters, so there is no need to un-comment any particular assignment un¬ 
less the value is to be changed. An example of a local ada. ini file might be; 

- Local SKYvec Ada . ompiler default option 

— description file 

page_width 79; 

— Use all other defaults. 


1 . See your Software Release notes for installation informauon. 


SKYvec Ada User's Guide 


16-7 







The parameters to which assignments can be made are; 

bottom_niargin This parameter sets the number of lints in the bottom mar¬ 
gin of e<u:h page. The bottommost lines a.e blank. The min¬ 
imum number of bottom margin lines that can be specified 
is 2. The bottom margin is suppressed by using the -ic 
(continuous listing) option. 

error_tag This parameter specifies the character string that is dis¬ 
played at the beginning of any error messages that occur in 
die listing. This string serves to highlight the error message. 

graphic_controls 

This parameter determines how non-printable characters in 
the Ada source file are printed. Non-printable characters 
include the ASCII DEL character and all ASCII control 
characters except for ASCII horizontal tab and the normal 
line terminator characters. If this parameter's value is true, 
then the control characters are printed as '^x where x is 
the printable character derived by adding the number 64 
(decimal) to the ASCHI code value of the control character. 
For example, the ASCII BEL character, also known as Con- 
p'ol-G is printed as '<j. Other non-printable charac¬ 
ters are displayed as '^1. If the parameter's value is set to 
false, then the non-printable characters are displayed as is 
with no conversion. 

header_timeatamp 

This parameter specifie.s whether the heading information 
should include the date and time whei Jie listing was gen¬ 
erated. If its value is true, then the date and time are dis¬ 
played. If its value is false, no date or time is printed. 

left_margin This parameter specifies the number of blanks printed in 
each line before anything else (including line numbers, 
source lines, messages, and heading information). The left 
margin can be no smaller than 0 characters. 

lineno_viidth This parameter specifics the number of characters reserved 
for the line number that appears to the left of each source 
line listed. The line number width can be no smaller than 0 
characters. If 0 is specified, no line numbers are generated. 

marker_lines This parameter specifies the numbt-.r of marker lines to 
prim before and after an error or warning message. Marker 
lines serve to make these messages stand out more from the 
rest of the listing. The minimum number of marker lines is 
0 . 

page_length This parameter sets the number of lines pnnted per page. A 
page eject ts placed at the end of each page. The minimum 
number of lines that can be specified for the page is 5. The 


16-8 


SKYvec Ada User's Guide 






page ejea can be suppressed by using the -ic (condnuous 
listing) option. 

page_width This parameter specifles the number of characters in the 
longest line that will be printed before the line is broken 
to the next line. The page width can be no smaller than 40 
characters. This value does not include the number of char¬ 
acters specified by the left_margin and lineno_widtn 
parameters. 

summary This parameter specifies whether the listing should include 

a compilation summary at the end. If a summary is aesired. 
this parameter's value should be set to true, otherwise it 
should be set to false. 

topjtnargin This parameter sets the number of lines in the top m argin of 
each page. Centered in the topmost lines of each page a 
heading is printed containing a page number, file name, and 
date. The minimum number of top margin lines that can be 
specified is 2. The top margin and heading information can 
be suppressed altogether by using the -ic (continuous list¬ 
ing) option. 

warning_tag This parameter specifies the character string that is dis¬ 
played at the beginning of any warning messages that oc 
cur in the listing. This string serves to highhgh: the warning 
message. 

Examples 

Example 34 

Compile x. ada in the usual manner 
ada x.ada 

Do not forget to type the extension. If you do not type the extension the ada pro- ' 

gram displays the error message "missing or in^roper file name". 

Example 35 

Compile x. ada with exception location maintenance code; *■ 

ada -fL x.ada 

This is most useful when debugging a program that raises an exception. 

Example 36 

Compile x. ada, but with all automatic checking suppressed; 
ada -fs x.ada 

This is most useful after a program has been debugged and it is time to generate 

a "production" version of the program that is smaller and runs more quickly. 


SKYvec Ada User s Guide 


16 - 






Examples? 

Compile x. ada, but with numeric checking suppressed; 
ada -fN x.ada 

This retains most of the useful checks, while speeding up the program and de¬ 
creasing iLs size. 

Example 38 

Compile x. ada, y. ads. and z. adb in the usual manner: 

ada x.ada y.ads z.adb 
Each source file is compiled in the order given. 

Example 39 

Compile x. ada using an alternate program library named z. lib: 
ada “L 2 .lib x.ada 

This presumes that z. lib was created in the current working directory with the 
mklib program prior to compilation. 

Example 40 

Compile x.ada verbosely, suppressing warning messages: 
ada x.ada 

For the - t v option, the compiler prints the name of each subprogram, package, 
or generic as it is compiled, ^ong with the amount of symbol table space remain¬ 
ing. For the -f w option, the compiler suppresses warning messages. 

Example 41 

Compile simple . ada, producing a listing file: 
ada -1 simple. ada 

This produces a listing file named simple. 1st and an error log file, simple .err. 

Example 42 

Compile single. ada. producing a coniinuous-form listing file on standard output; 

ada -Isc simple.ada '■ 

This produces a listing on standard output in continuous format (no headers or 
pagination), as well as an error log file, simple .err. 

Example 43 

Compile simple. ada in a non-local directory, producing a local object file: 

ada /x/ada/simple.ada 

An ada. lib file must be present in the current directory. All output files are 
placed in the current directory or in the local auxiliary directory (ada. aux). 


J6-10 


SKYvec Ada User's Guide 





Example 44 

Compile simple.ada normally, but retain information for the global optimizer 
ada -K single.ada 

Runs the compiler normally, but does not delete simple. int, which can be 
used by a subsequent global optimization (bamp -g) command. 


SKYvec Ada User's Guide 


16-11 












COMPILATION SYSTEM OPTIONS 


LINKER OPTICWS 

The linker options of this Ada implementation, as described in tliis Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 










COMPILATION SYSTEM OPTIONS 


ban^ 

Invocation 

beunp (options...] (main-procedure-name) 

Description 

The bainp (Build Ada Main Program) command creates an executable program 
given (an MPW tool by defaxilt, see section ) the name of the main subprogram. 
The main-procedure-name given to banp must be a parameterless procedure 
that has already been compiled. 

Note: Be caref\il not to confuse the name of the source file containing the 
main subprogram (e.g. sinple.ada) with the actual name of the main subprogram 
(e.g. simple). 

If a main-procedure-name is not specified on the bamp command line, baitp 
links using the last-compiled subprogram that fits the profile for a main 
subprogram. To determine v^ich subprogreua will be used when no main 
subprogram is given to baitp, use the Islib -t option. When in doubt, it may 
be best to specify the main subprogram explicitly. 

Note that v^en no main subprogram is specified, bamp selects the most recently 
compiled subprogram, not the most recently linked subprogram. If several 
different main subprograms are linked between compiles, still the most recently 
coitpiled subprograun is selected if no subprogram is explicitly sjiecified. 

The baitp program functions as a high-level linker. It works by creating a top- 
level main program that contains all necessary context clauses and calls to 
package elaboration procedures. The main program is created as an internal 
form file on which the code generator is nm. Following this code generation 
pass, all the required object files are linked. 

An optional optimization pass can be invoked via the banp contnancl. The 
details of optimization are discussed in Chapter 7. The bamp options relevant 
to optimization, -g 2 aid -G , are discussed below. 

Programs conpiled in Debug mode (with the xada -fD option) are 
automatically linked with the SKYvec Ada source level debugge'r. 

Options 

% 

-A Aggressively inline. This option instructs the optimizer to 
aggressively inline subprograms whan used in addition to the -G option. 
Typically, this means that subprograms that are only called once are inlined. 

If only the -G option is used, only subprograms for which pragma inline has 
been specified are inlined. 

-c compile r-program-name 

Default: As stored in program library. Use alternate compiler. Specifies the 
complete (nonrelative) directory path to the SKYvec Ada compiler. This 
option overrides the compiler program name stored in the progrzjn library. 

The -c option is intended for use in cross-compiler configurations, 
although under such circumstances, an appropriate library configuration is 







COMPILATION SYSTEM OPTICWS 


normally used instead, 

-f Suppress main program generation step. Suppresses the creation and 
additional code generation steps for the temporary main program l:ile. The 
-f option can be used when a simple change has been made to the tody of 
a corapUation unit. If unit elaboration order is changed, or if the 
specification of a unit is changed, or if new units are added, ttien this option 
should not be used. The -f option saves a few seconds, but places, an 
additional bookkeeping burden on you. The option should be avoided under 
most circumstances. Note that invoking bamp with the -n option lollowed 
by another invocation of bamp with the -f option has the same effect as an 
invocation of bamp with neither option <-n euid -f neutralize each other). 

-g Perform global optimization only. Causes bamp to invoke the global 
optimizer on your program. Conpilation units to be optimized globally 
must have been con^siled with the xada -K option. 

-G Causes bamp to perform both global and local optimization. This 
includes performing pragma inline. As with the -g option, compilation units 
to be optimized must have been conpiled with the xada -K option. 

-I Link the program with a version of the tasking run-time which supports 
pre-emptive task scheduling. Produces code which handles interrupts more 
quickly, but has a slight negative irpact on performance in general. 

-L library-name 

Default: ada.lib. Uss alternate library, specifies the name of tlie program 
library the baitp program consults. (Overrides default library nante). 

-n No link. Suppresses actual object file linkage, but creates and 
performs code generation on the main program file. Note that invoking bamp 
with the -n option followed by another invocation of bamp with the -f option 
has the same effect as an invocation of banp with neither option. That is, -n 
and -f neutralize each other. 

-N No operations. Causes the bamp coirmand to do a "dry run"; it prints 
out the actions it takes to generate the executable program, -but does not 
actually perform those actions. Similar to the -P option. - 

-o output-file-name 

Default: file. Use alternate executable file output nairjs. Specifies the 
name of the executable program file written by the bamp command. This 
option overrides the default output file name. 

cont. baitp 

-P Print operations. Causes the bamp command to print out thr- actions it 
takes to generate the executable program as the actions ate performed. 

-V Link verbosely. Causes the banp command to print out inforri^tion about 
what actions it takes in building the main program such as: 


The name of the program library consulted. 




COMPILATICN SY£;TEM OPTIONS 


• The library search order (listed as "saves" of the library’ units used 
by the program). 

• The name of the main program file created (as opposed to tiie main 
procedure name). 

• The elaboration order. 

• The total program stack size. 

• The name of the executable load module created. 

• The verbose code generation for the main program file. 

-W Suppress warnings. Allows you to suppress warnings from the optimizer. 










APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. unless specifically noted otherwise, 
references in this Appendix ate to compiler documentation and not to this 
report. inplementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 
type LONG_INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type BYTE_INTEGER is range -128 ..127; 

type FLOAT is digits 6 range —3.40282E+038 .. 3.40282E+038; 
type LO^G FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 

type DURATIC^I is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; ^ 


C-1 






Appendix F 

Implementation-Dependent 

Characteristics 

This appendix lists implementation-dependent characteristics of SKYvec Ada. 
Note that there are no preceding appendices. This appendix is called Appendix F 
in order to comply with the Reference Manual for the Ada Programming Lan¬ 
guage (LRM) ANSI/Mn--STD-18l5A which sutes that this appendix be named 
Appendix F. 

Implemented Chapter 13 features include length clauses, enumeration represen¬ 
tation clauses, address clauses, interrupts, package system, machine code inser¬ 
tions, pragma interface, and unchecked programming. 


Pragmas 

The implemented pre-defined pragmas* are; 


elaborate 

Sec tiie LRn'I section 10.5. 

interface 

See section Pragma Interface on page F-2. 

list 

See the LRM Appendix B. 

pack 

See section Pragma Pack on page F-3. 

page 

Sec the LRM Appendix B. 

priority 

See the LRM Appendix B. 

suppress 

Sec section Pragma Suppress on page F-4. 

inline 

See the LRM section 6.3.2^. 


The remaining predefined pragmas are accepted, but presently ignored: 

controlled optimize system_naifte 

shared storage_unit memory_size 

interface 


1. pacXNamed parameter notation for pragmas is not supported. 
'2.~ThiS'pragma is not actually effective unless you compUe/link your 
program using the global optimizer. 


SKYvec Ada User's Guide 


F-1 









When illegal paramcier forms are encouniered ai. compile lime, the compiler issues 
a warning message rather than an error, as required by the Ada language defmiiion. 
Refer to the LRM Appendix B for additional information about the pre-defmed 
pragmas. 


Pragma Interface 

The form of pragma interface in SKYvec Ada is; 

pragma interface( language, subprogram [, "link-name"]); 

where; 

language This is the interface language, one of the names assem¬ 
bly, builtin, c, or internal. The names builtin and 
internal are reserved for use in mn-time support packag¬ 
es. 

subprogram This is the name of a subprogram to which the pragma in¬ 
terface applies. If link-name is omitted, then the Ada 
subprogram name is also used as the object code symbol 
name. Depending on the language specified, some automat¬ 
ic modifications may be made to the object code symbol 
name. 

link-name This is an optional string literal specifying the name of the 
non-Ada subprogram corresponding to the Ada subprogram 
named in the second parameter. If link-name is omitted, 
then link-name defaults to the value of subprogram trans¬ 
lated to lowercase. Depending on the language specified, 
some automatic modifications may be made to the link- 
name to produce the actual object code symbol name that is 
generated whenever references are made to the correspond¬ 
ing Ada subprogram. The object code symbol generated for 
link-name is always translated to upper case. Although 
the object linker is case-sensitive, ;t is a rare object module 
that contains mixed-case symbols.Ii is appropriate to use the 
optional link-name parameter to pragma interface 
only when the interface subprograr/t has a name that does 
not correspond at all to its Ada identifier or when the inter¬ 
face subprogram name cannot be given using rules for con¬ 
structing Ada identifiers (e.g. if the name contains a ‘S’ 
character). 

The characteristics of object code symbols generated foi each interface language 
are as follows; 

assembly The Object code symbol is Uic same as link-name. If no 
link-name String is specified, then the subprogram name 
is translated to lowercase. 


SKYvec Ada Uscr'i Guide 




builtin The object code symbol is the same as link-name, but pre¬ 
fixed with one underscore character whether or not a 
link-name string is specified two underscore characters ("_ 
_”)• This language interface is reserved. The built in in¬ 
terface is presently used to declare cenain low-level run¬ 
time operations whose names must not conflict with pro¬ 
grammer-defined or language system defined names. 

c The object code symbol is the same as link-name, but with 

one underscore character prepended. This is the con¬ 
vention used by the C compiler.subprogram name. If no 
link-name String is specified, then the subprogram name 
is translated to lowercase. 

internal No object code symbol is generated for an internal language 
interface: this language interface is reserved. The internal 
interface is presently used to declare certain machine-level 
bit operations. 

No automatic data conversions are performed on parameters of interface subpro¬ 
grams. It is up to the programmer to ensure that calling conventions match and that 
any necessary data conversions take place when calling interface subprograms. 

A pragma interface may appear within the same declarative part as the subpro¬ 
gram to which the pragma interface applies, following the subprogram declara¬ 
tion. and prior to the first use of the subprogram. A pragma interface that ap¬ 
plies to a subprogram declared in a package specification must occur within the 
same package specification as the subprogram declaration; the pragma inter¬ 
face may not appear in the package body in this case. A pragma interface dec¬ 
laration for either a private or nonprivate subprogram declaration may appear in the 
private part of a package specification. 

Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additional infonnation about pragma interface . 


Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is peimitied following the composite type declaration to which it ap¬ 
plies, provided that the pragma occurs within the same declaiaiive pan as the com¬ 
posite type declaration, before any objects or components of the composite type are 
declared. 

Note that the declarative pan restriction means that the type declaration and accom¬ 
panying pragma pack cannot be split across a package specification and body. 

The effect of pragma pack is to minimize storage consumption by discrete com¬ 
ponent types whose ranges permit packing. Use of pragma pack does not defeat 
allocations of alignment storage gaps for some record types. Pragma pack does not 
affect the representations of real types, pre-defined integer types, and access types. 


F-3 


SKYvec Ada User's Guide 




Pragma Suppress 

Pragma suppress is implemented as desciibed in the LRM section 11.7, wiui 
these differences: 

□ Ptescnily, division_checic. and over £ low_chec't must be suppressed 
via a compiler flag, -f n: pragma suppress is ignored for these two numer¬ 
ic checks. 

□ The optional "ON =>” parameter name noution for pragma suppress is 
ignored. 

□ The optional second parameter to pragma suppress is ignored; the prag¬ 
ma always applies to the entiic scope in which it appears. 


Attributes 

All attributes described in the LRM Appendix A arc supported. 


Standard Types 

Additional standard types are defined in SKYvec Ada: 


□ byte_integer 

□ shott_integer 

□ long_integer 


The standard numeric types are defined as: 


Type 

byte_integer 
short_integer 
integer 
long_integer 
float (6 digits) 
long_float (15 digits) 
duration (0.0001 delta) 


Range 

-128 
-32768 
-2147483648 
-2147483648 
-3.40282E+038 
-1.79769313486231E+308 
-86400.0000 


. . 127; 

. . 32767; 

. . 2147483647; 

. . 2147483647; 

Y 3.40282S+038; 

1.79769313486231E+308; 
. . 86400.0000; 


Package System 

The specification of package system is: 
package system is 

type address is: new integer, 

type name is; (BOLT); 

systcm_nanie; constant n:ime;= BOLT; 


F-4 


SKYvec Ada User's Guide 




storage_unit: constant;= 8; 

memory _size; consiant:= 1024; 

-- System-Dependent Named Numbers 


min_int; 

maxjnt; 

max_digits: 

max.mantissa: 

fine_dclta: 

tick: 


consiant;= -2147483648; 
constant;= 2147483647; 
constant;= 15; 
constant;= 31; 

constant;= 2.0 
constant:= 1.0; 


- Other System-Dependent Declarations 

subtype priority is integer range 1.. 20; 

The value of system.memory_aize is presently meaningless. 


Restrictions on Representation Clauses 

Length Clauses 

A. size specif-cation (t' size) is rejected if fewer bits arc specified than can ac¬ 
commodate the type. The minimum size of a composite type may be subject to ap¬ 
plication of pragma pack. It is permitted to specify precise sizes for unsigned in¬ 
teger ranges, e.g. 8 for the range 0..255. However, because of requirements im¬ 
posed by the Ada language definition, a full 32-bit range of unsigned values, i.e. 

0..(2^^-l), cannot be defined, even using a size specification. 

The specification of collection size (t' storage_size) is evaluated at run-time 
when the scope of the type to which the length clause applies is entered, and is 
therefore subject to rejection (via storage_error) based on available storage at 
the time the allocation is made. A collection may include storage used for run-iime > 
administration of the collection, and therefore should not be expected to accommo- - 
date a specific number of objects. Furthermore, cenain classes of objects such as 
unconstrained discriminant array components of records may be allocated outside 
a given collection, so a collection may accommodate more objects than might be 
expected. 

The specification of storage for a task activation (t' storage_size) is evaluated 
at run-time when a task to which the length clause applies is activated, and is there¬ 
fore subject to rejection (via storage_ertor) based on available storage at the 
time the allocation is made. Storage reserved for a task activation is separate from 
storage needed for any collections defined within a task body. 

The specification of small for a fixed point type (t' small) is subject only to re¬ 
strictions defined in the LRM section 13.2. 


SKYvec Ada User's Guide 


F-5 






Enumeration Representation Clauses 

The iniemal code for the literal of an enumeration type named in an enumeration 
'xpresentation clause must be in the range of standard. integer. 

The value of an iniemal code may be obtained by applying an appropriate instan¬ 
tiation of uncheclced_conver3ion to an integer type. 

Record Representation Clauses 

The storage unit offset (the at static_siit^le_expression part) is given in 
terms of 8-bit storage units and must be even. 

A bit position (the range pan) applied to a discrete type component may be in the 
range 0..15, with 0 being the least significant bit of a component. A range specifi¬ 
cation may not specify a size smaller than can accommodate the component. A 
range specification for a component not accommodating bit packing may have a 
higher upper bound as appropriate (e.g. 0..31 for a discriminant suing component). 
Refer to the internal data representation of a given component in determining the 
component size and assigning offsets. 

Components of discrete types for which bit positions are specified may not straddle 
16-bit word boundaries. • 

The value of an alignment clause (the optional at mod pan) must evaluate lu 1,2, 
4, or 8, and may not be smaller than the highest alignment required by any compo¬ 
nent of the record. 

Address Clauses 

An address clause may be supplied for an object (whether constant or variable) or 
a task entry, but not for a subprogram, package, or task unit. The meaning of an 
address clause supplied for a task ciury's given in section Interrupts on page F-7 

An address expression for an object is a 32-bii linear segmented memory address 
of type system, address. 

Interrupts • 

A task entry’s address clause can be used to associate the entry with a UNIX signal. 
Values in the range 0..31 arc meaningful, and represent the signals corresponding 
to those values. 

An interrupt entry may not have any parameters. 

Change of Representation 

There are no restrictions for changes of representation effected by means of type 
conversion. 


F-6 


SKYver Ada User's Guide 




Implementation-Dependent Components 

No names arc generated by the implementation to denote implementation-depen¬ 
dent components. 


Unchecked Conversions 

There are no restrictions on the use of unchecked_conversion. Conversions be¬ 
tween objects whose sizes do not conform may result in storage areas with unde¬ 
fined values. 

Input-Output Packages 

A summary of the implementation-dependent input-output characteristics is: 

□ In calls to open and c reate, the form parameter must be the empty string 
(the default value). 

□ More than one internal file can be associated with a single external file for 
reading only. For writing, orJy one internal file may be associated with an 
external file. Do not use reset to get around this rule. 

□ Temporary sequential and direct files are given names. Temporary files 
are deleted when they are closed. 

□ File I/O is buffered; text files associated with terminal devices are line- 
buffered. 

□ The packages seciuentiai_io and direct_io cannot be instantiated 
with unconstrained composite types or record types with discriminants 
without defaults. 


Source Line and Identifier Lengths 

Source lines and identifiers in Ada source programs are presently limited to 200 ' 
characters in length. 


I. 


SKYvec Ada User's Guide 


F-7 


