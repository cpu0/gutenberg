AD-A219 057 


UNCLASSIFIED _ 

StCU*:^ Cl*SSi» lQA'IQS 0> 7«iS »Aj[ (tt-nenDetefWreifl 

I REPORT DOCUMENTATION PAGE 


4. T1UI (»nOiubt-vt) " 

Ada Compiler Validation Summary Report tPyramid 
Technology Corporation Pyramid Ada, Version 5.0, Pyramid 
MIServer (Host & Target), 390926W1.10175 


1. AUTNOA(i) 

WrigTTfiPatterson AFB 
Dayton, OH, USA 


• . PtKfOMlfcO 0«i»NlZ*T10N AKP A0DA1SS 

Wright-Patterson AFB 
Dayton, OH, USA 




•to t 

If'tH TO*v ^ 


3 RUIUIM 5 CATALOG fejMeiR 


s rm of ai»o«i i et «jop covmo 

26 Sept. 1989 to 01 Dec. 1990 


e. Ptnfowiiit*Dst. atpoct ajMeift 


I. CONTRACT O* (in! MUBecRo; 


10. ttIBEKT. TASt 

Am* A M0*t UK: T Hu«EiRS 


11. COK’KOalKG OfflCC A*“L AK3 ApORtSS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 2u301-3081 


14. MtSlTORlhO AGiKCT MA«i A AODRtSSpf different from Controlling Other) 

Wright-Patterson AFB 
Dayton, OH, USA 


16. DlSTSlBJllO* SUU*£».T (of this Report) 


1 2. ACPCRT 0*U 


IS. SECURITY Cl ASS ( 0 * th/i repon) 

UNCLASSIFIED 


lit. M^'ichim oowsiSAsmi 

N/A 


Approved for public release; distribution unlimited. 


17. D1S’R1B.110 , < SIA'C^iKT (of tne tbr.rtn tmt'ts <r> B ock 3C /fa frerent from Report) 


UNCLASSIFIED 


16. SJRf.£“:A7*s, 6C71S 


DTIC 

ELECTE 



IB. tltoDRuS (Continue 0 " re»erje l<dc if ntttiit'y tntf identify b) block numbtr) 

Ada Programming language, Ada Compiler Validation Summary Reprrt, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANS2/KIL-STD- 
1615A, Ada Joint Program Office, AJPO 


20. A6S7AAC1 (Continue onte.e'ie nett if nete*»«r> endidentify 6, block number) 

Pyramid Technology Corporation, Pyramid Ada, Version 5.0, Wright-Patterson AFB, OH, 
Pramid MIServer under Pyramid OSX, 5.0b (Host & Target), ACVC 1.10. 


00 * u ** 1473 tonio*. o» i nov es is oesot.ni 

I JAM 23 S/K 0107-Lf-014-6601 _ UNCLASSIFIED _ 

SlCyAMt ClASSmCAllON Of IhJS AAul (mnenPete (nte'etf) 


















AVF Control Number: AVF-VSR-337.0190 

89-06-20-PYR 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 890926W1.10175 
Pyramid Technology Corporation 
Pyramid Ada, Version 5.0 
Pyramid MIServer 


Completion of On-Site Testing: 
26 September 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 


90 08 14 085 





Ada Compiler Validation Summary Report: 


Compiler Name: Pyramid Ada, Version 5.0 
Certificate Number: 890926V1.10175 

Host: Pyramid MIServer under 

Pyramid OSX, 5.0b 

Target: Pyramid MIServer under 
Pyramid OSX, 5.0b 

Testing Completed 26 September 1989 Using ACVC 1.10 
Customer Agreement Number: 89-06-20-PYR 

This report has been reviewed and is approved. 



Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada ValidatidfTOrganization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Alfa Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 





TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site .3-7 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER OPTIONS AS SUPPLIED YRAMID 



















CHAPTER 1 


INTRODUCTION 


This Validation Summary Report (VSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 

This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 

The Ada Standard permits some implementation dependencies—for example, the \ 
maximum length of identifiers or the maximum values of integer types.. 3 * * 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 




INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 26 September 1989 at Mountain View CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rra 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


1-2 





INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures , Version 2.0, Ada Joint Program 
Office, May 1989. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 . DEFINITION OF TERMS 


ACVC 


Ada 

Commentary 


The Ada Compiler Validation Capability. The set of Ada 
programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


Applicant 

AVF 


AVO 


Compiler 


The agency requesting validation. 

The Ada Validation Facility. The AVF is responsible for 
conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures . 

The Ada Validation Organization. The AVO has oversight 
authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

A processor for the Ada language. In the context of this 
report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 


1-3 






INTRODUCTION 


Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics - . For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 
illegal construct that it contains is detected by the compiler. 


1-4 




INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 


Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 


Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 


Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 


Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 
tests. However, some tests contain values that require the test to be 


1-5 






INTRODUCTION 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 




CHAPTER 2 

CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 


Compiler: Pyramid Ada, Version 5.0 
ACVC Version: 1.10 
Certificate Number: 890926V1.10175 
Host Computer: 

Machine: Pyramid MIServer 

Operating System: Pyramid OSX, 5.0b 

Memory Size: 32768 Kbytes 


Target Computer: 

Machine: 

Operating System: 
Memory Size: 


Pyramid MIServer 
Pyramid OSX, 5.0b 
32768 Kbytes 


2-1 





CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
TINY_INTEGER, SHORT_INTEGER, and SHORT_FLOAT in package 
STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 


2-2 


CONFIGURATION INFORMATION 


(4) NUMERIC_ERROR is raised when an integer literal operand in a 
comparison or membership test is outside the range of the base 
type. (See test C45232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is not gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round away from 
zero. (See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is round away 
from zero. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.) 

(2) NUMERIC_ERROR is raised when an array type with INTEGER'LAST + 
2 components is with each component being a null array 
declared. (See test C36202A.) 

(3) NUMERIC_ERROR is raised when an array type with SYSTEM.MAX_INT 
+ 2 components with each component being a null array is 
declared. (See test C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array type is declared. (See 
test C52103X.) 


2-3 





CONFIGURATION INFORMATION 


(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERROR when the array 
type is declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERR0R or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked for identical 
bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B (2 tests), EA3004C..D (2 tests), and 
CA3004E..F (2 tests).) 


2-4 







CONFIGURATION INFORMATION 


i. Generics. 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output. 

(1) The package SEQUENTIAL_IO can be instantiated with 
unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_I0 can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E (2 tests), CE2102N, and CE2102P.) 

(4) ' Modes INJTLE, OUT_FILE, and INOUT_FILE are supported for 

DIRECT_I07 (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102V.) 

(5) Modes IN FILE and 0UT_FILE are supported for text files. (See 
tests CE3102E and CE3102I..K (3 tests).) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_IO. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 
CE3114A.) 

(9) Overwriting to a sequential file truncates to the last element 
written. (See test CE2208B.) 

(10) Temporary sequential files are given names and deleted when 
closed. (See test CE2108A.) 

(11) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and deleted when closed. 
(See test CE3112A.) 


2-5 




CONFIGURATION INFORMATION 


(13) More than one internal file can be associated vith each 

external file for sequential files when writing or reading. 
(See tests CE2107A..E (5 tests), CE2102L, CE2110B, and 

CE2111D.) 

(14) More than one internal file can be associated with each 

external file for direct files when writing or reading. (See 
tests CE2107F..H (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated with each 

external file for text files when reading or writing. (See 
tests CE3111A..E (5 tests), CE3114B, and CE3115A.) 


2-6 







CHAPTER 


3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 329 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation. Modifications to the code, processing, or grading 
for 9 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

129 

1132 

1992 

17 

28 

46 

3344 

Inapplicable 

0 

6 

323 

0 

0 

0 

329 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 









TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

577 

545 

245 

172 

99 

161 

331 

137 

36 

252 

292 

299 

3344 

Inappl 

14 

72 

135 

3 

0 

0 

5 

1 

0 

0 

0 

77 

22 

329 

tfdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests were 

withdrawn 

from ACVC Version 1.10 at 

the time of 

this validation: 

E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 

CE3411B 






See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 329 tests were inapplicable for the 
reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y (14) 
C35708L..Y (14) 
C45421L..Y (14) 


C35705L..Y (14) 
C35802L..Z (15) 
C45521L..Z (15) 


C35706L..Y (14) 
C45241L..Y (14) 
C45524L..Z (15) 


C35707L..Y (14) 
C45321L..Y (14) 
C45621L..Z (15) 


3-2 








TEST INFORMATION 


C45641L..Y (14) C46012L..Z (15) 

b. C35702B and B86001U are not applicable because this implementation 
supports no predefined type L0NG_FL0AT. 

c. The following 16 tests are not applicable because this 
implementation does not support a predefined type LONG_INTEGER: 


C45231C 

C45304C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001V 


CD7101F 

d. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 48. 

e. C86001F is not applicable because, for this implementation, the 
package TEXT_IO is dependent upon package SYSTEM. This test 
recompiles package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. 

f. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

g. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
L0NG_FL0AT, or SHORT_FLOAT. 

h. C96005B is not applicable to this implementation because there are 
no values of DURATION'BASE outside the range of DURATION. 

i. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types. 

j. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, which imply 
compression, with component types of composite or floating point 
types. This implementation requires an explicit size clause on 
the component type. 

k. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types. 

l. CD2A91A..E (5 tests), CD5012J, CD5013S, and CD5014S are not 
applicable because this implementation does not support size 
clauses for tasks or task types. 

m. CD5003B..H (7 tests), CD5011A..H (8 tests), CD5011L..N (3 tests), 

CD5011Q..R (2 tests), CD5012A..I (9 tests), CD5012L, CD5013B,. 
CD5013D, CD5013F, CD5013H, CD5013L, CD5013N, CD5013R, and 

CD5014T..X (5 tests) were ruled by the AVO to be not applicable to 


3-3 





TEST INFORMATION 


this implementation because they require initialization of an 
object which later is assigned an address, and this implementation 
requires that the address be assigned before an object is given a 
value. 

n. CE2102D is inapplicable because this implementation supports 

CREATE with IN_FILE mode for SEQUENTIAL_IO. 

o. CE2102E is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for SEQUENTIAL_IO. 

p. CE2102F is inapplicable because this implementation supports 

CREATE with INOUT_FILE mode for DIRECT_IO. 

q. CE2102I is inapplicable because this implementation supports 

CREATE with IN_FILE mode for DIRECT_IO. 

r. CE2102J is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for DIRECT JO. 

s. CE2102N is inapplicable because this implementation supports OPEN 
with IN_FILE mode for SEQUENTIAL_IO. 

t. CE21020 is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

u. CE2102P is inapplicable because this implementation supports OPEN 
with OUTJTLE mode for SEQUENTIAL_IO. 

v. CE2102Q is inapplicable because this implementation supports RESET 
with OUTJTLE mode for SEQUENTIAL_IO. 

w. CE2102R is inapplicable because this implementation supports OPEN 
with INOUTJILE mode for DIRECT_IO. 

x. CE2102S is inapplicable because this implementation supports RESET 
with INOUTJILE mode for DIRECT JO. 

y. CE2102T is inapplicable because this implementation supports OPEN 
with INJILE mode for DIRECT JO. 

z. CE2102U is inapplicable because this implementation supports RESET 
with INJILE mode for DIRECT JO. 

aa. CE2102V is inapplicable because this implementation supports OPEN 
with OUT JILE mode for DIRECT JO. 

ab. CE2102V is inapplicable because this implementation supports RESET 
with OUT JILE mode for DIRECT JO. 

ac. CE3102E is inapplicable because this implementation supports 
CREATE with IN FILE mode for text files. 


3-4 







TEST INFORMATION 


ad. CE3102F is inapplicable because this implementation supports RESET 
for text files. 

ae. CE3102G is inapplicable because this implementation supports 

deletion of an external file for text files. 

af. CE3102I is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for text files. 

ag. CE3102J is inapplicable because this implementation supports OPEN 
with IN_FILE mode for text files. 

ah. CE3102K is inapplicable because this implementation supports OPEN 
with 0UT_FILE mode for text files. 

ai. CE3115A is not applicable because resetting of an external file 
with OUT FILE mode is not supported with multiple internal files 
associate? with the same external file when they have different 
modes. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 9 tests. , 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B24009A B33301B B38003A B38003B B38009A B38009B 

B41202A BC1303F BC3005B 


3-5 







TEST INFORMATION 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the Pyramid Ada, Version 5.0 compiler vas submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3.7.2 Test Method 


Testing of the Pyramid Ada, Version 5.0 compiler using ACVC Version 1.10 
was conducted on-site by a validation team from the AVF. The configuration 
in which the testing was performed is described by the following 
designations of hardware and software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


Pyramid MIServer 
Pyramid OSX, 5.0b 
Pyramid MIServer 
Pyramid OSX, 5.0b 
Pyramid Ada, Version 5.0 


A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in" their modified form on the magnetic tape. 


The contents of the magnetic tape were loaded directly onto the host 
computer. 


After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the Pyramid 
MIServer. Results were printed from the host computer. 

The compiler was tested using command scripts provided by Pyramid 
Technology Corporation and reviewed by the validation team. See Appendix E 
for a complete listing of the compiler options for this implementation. 
The following list of compiler options includes those options which were 
invoked by default: 


-M unit_name (Main) Produce an executable program using the named 
unit as the main program. (Used for all executable 
tests. 

-el (error listing) Intersperse error messages among 

source lines. (Used for making source listings.) 


3-6 










TEST INFORMATION 


-w (warnings) Suppress warning diagnostics. (Used for 
making source listings.) 

Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Mountain View CA and was completed on 26 September 
1989. 


3-7 






APPENDIX A 


DECLARATION OF CONFORMANCE 


Pyramid Technology Corporation has submitted the 
following Declaration of Conformance concerning the 
Pyramid Ada, Version 5.0 compiler. 


A-l 







DECLARATION OF CONFORMANCE 

Compiler Implementor PYRAMID TECHNOLOGY CORPORATION 
Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433-6503 
Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Configuration 

Base Compiler Name: 
Host Architecture ISA: 
Host OS and Version: 
Target Architecture ISA: 
Target OS and Version: 


Pyramid Ada, Version 5.0 
Pyramid MIServer 
Pyramid OSX, 5.0b 
Pyramid MIServer 
Pyramid OSX, 5.0b 


Implementor’s Declaration 

I, the undersigned, representing PYRAMID TECHNOLOGY CORPORATION, have implemented no 
deliberate extension to the Ada Language Standard ANSI/MIL-STD-1815 in the compiler(s) listed in 
this declaration. I declare that PYRAMID TECHNOLOGY CORPORATION is the owner of record of 
the Ada language compiler(s) listed above and, as such, is responsible for maintaining said compiler(s) 
in conformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada language 
compiler(s) listed in this declaration shall be made only in the owner’s corporate name. 


PYRAMID TECHNOLOGY CORPORATION 


Date: 


Steve Tolchin, Vice President Software Development 



Owner’s Declaration 

I, the undersigned, representing PYRAMID TECHNO! OGY CORPORATION take full responsibility 
for implementation and maintenance of the Ada comptlerfs) listed above, and agree to the public disclo¬ 
sure of the final Validation Summary Report. I declare that all of the Ada language compilers listed, 
and their host/target performance are in compliance with the Ada Language Standard ANSI/MIL-STD- 
1815A. 


<\l ^<— ~TVCtl (- - Date: ^■~'; 7 ^ / 5 V 

PYRAMID TECHNOLOGY CORPORATION 
Steve Tolchin, Vice President Software Development 


A-2 




APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the Pyramid Ada, Version 5.0 compiler, as described in 
this Appendix, are provided by Pyramid Technology Corporation. Unless 
specifically noted otherwise, references in this Appendix are to compiler 
documentation and not to this report. Implementation-specific portions of 
the package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 3: 7 67; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -8.988465674312E(+307) .. 

8.988465674312E(+307); 

type SH0RT_FL0AT is digits 6 range -1.70141E(+38) .. 

1.70141E(+38); 

type DURATION is delta 1.00000000000000E(-03) range -2147483.648 .. 

2147483.647; 


end STANDARD; 


B-l 







APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INUNE_ONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as pragma INLINE, indicates to the compiler 
that the subprogram must always be inJined. This pragma also suppresses the generation of a callable 
version of the routine which saves code space. If a user erroneously makes an INLINE_ONLY subpro¬ 
gram recursive a warning message will be emitted and an PROGRAM_ERROR will be raised at run 
time. 

1.2. BUILT_IN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Ada body can be pro¬ 
vided, for example the MACHINE_CODE package. 

13. SHARE_CODE Pragma 

The SHARE_COD£ pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument. This pragma is only allowed 
immediately at the place of a declarative item in a declarative part or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies to all instantiations of that generic. When 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated for a generic instantia¬ 
tion with code generated for other instantiations of the same generic. When the second argument is 
FALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the land of generic formal parameters 
declared for the generic unit. 

Tne name pragma SHARE_BODY is also recognized by the implementation and has the same effect as 
SHARE_CODE. It is included lor comparability with earlier versions of VADS. 


1.4. NO IMAGE Pragma 

The pragma suppresses the generation of die image array used for the IMAGE attribute of enumeration 
types. This eliminates the overhead required to store the array in the executable image. .An attempt to 
use the IMAGE attribute on a type whose image array has been suppressed will result ir. a compilation 
warning and PROGRAM_ERROR raised at run time. 

U. EXTERNAL_NAM£ Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or variable defined in Ada and 
allows die user to specify a different external name that may fce used to reference the entity from other 
languages. The pragma is allowed at the place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFAC£_NAME pragma takes the name of an object or subprogram defined in another 
language and allows it to be referenced direedy in Ada. The pragma will repbee all occurrences of the 
object or subprogram name with an external reference to the second, link_argument. The pragma is 
allowed at the place of a declarative item in a package specification and must apply to an object or 


B-2 





subprogram declared earlier in the same package specification. The object must be declared as a scalar 
or an access type. The object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

If the pragma applies to a subprogram, then a PRAGMA INTERFACE must be also be included. 

Any violations to the above requirements will result in a warning being issued and the pragma being 
ignored. 

The form is PRAGMA INTERFACE_NAME(objeci or subprogram_name,"link_name"); 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 

IJ6. OPTLMIZE_COD£ Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is only allowed within a 
machine code procedure. It specifies whether the code should be optimized by the compiler. The 
default is ON. When OFF is specified, the compiler will generate the code as specified. 

1.9. N0N_R££NTRANT 

This pragma takes one argument which can be the name of either a library subprogram or a subprogram 
declared immediately within a library package spec or body. It indicates to the compiler that the sub¬ 
program will not be called recursively allowing the compiler to perform specific optimizations. Tire 
pragma can be applied to a subprogram or a set of overloaded subprogram within a package spec or 
package body. 

1.10. NOT_ELABORATED 

This pragma can only appear in a library package specification. It indicates that the package will not 
be elaborated because it is either part of the RTS. a configuration package or an Ada package that ;$ 
referenced from a language other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

22. INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

This pragma supports calls to ’C’ and FORTRAN functions. The Ada subprograms can be either func¬ 
tions or procedures. The types of parameters and the result type for functions must be scalar, access or 
the predefined type ADDRESS in SYSTEM. All parameters must have mode IN. Record and array 
objects can be passed by reference using the ADDRESS attribute. 


B-3 





2.5. LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

2.8. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2J. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.10. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. The static expression must be 
in the range of 0..99. 

2.11. SHARED 

This pragma is recognized by the implementation but has no effect. 

2.12. ST OR AGE_UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.13. SUPPRESS 

This pragma is supported in the single parameter form. The pragma applies from the point of 
occurrence to the end of the uttermost enclosing block. DIV1SI0N_CHECK cannot be suppressed. 
The double parameter form of the pragma with a name of an object, type or subtype is recognized, but 
has no effect in the current release. 

2.14. SYSTEM.NAME 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes » 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a label, or an entry: 

This attribute denotes the effective address of the first of the storage units allocated to ?. For a subpro¬ 
gram, package, task unit, or label, it refers to the address of the machine code associated with the 
corresponding body or statement. For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt The attribute is of the type OPERAND denned in the package 
MACHINE_COD£. The attribute is only allowed within a machine code procedure. 

(For a package, task unit, or entry, the ’REF attribute is not supported.; 


B-4 





4. Specification Of Package SYSTEM 

package SYSTEM 
is 

type NAME is ( pyr_unix ); 

SYSTEM NAME : constant NAME := pyrjinix; 

ST0RAGE_UN1T : constant := 8; 

MEMORY~SIZEi : constant := 16J777J216; 


- System-Dependent Named Numbers 


MIN INT 
MAX INT 

max-digits 

max“mantissa 

FINE "DELTA 
TICK” 


: constant := -2 147 483 648; 
: constant := 2_"l47_483_647; 

: constant := 15; 

: constant := 31; 

: constant ;= 2.0'** (-31): 

: constant := 0.01; 


- Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 90; 


MAX_REC_SIZE ; integer :« 64*1024; 
type ADDRESS is private; 


NO_ADDR; constant ADDRESS; 

function PHYSICAL_ADDRESS(I: INTEGER) return ADDRESS; 

function ADDR_GT(A, B: ADDRESS) return BOOLEAN; 

function ADDR_LT(A, B: ADDRESS) return BOOLEAN; 

function ADDR_GE(A, B; ADDRESS) return BOOLEAN; 

function ADDR_LEt A, B: ADDRESS) return BOOLEAN; 

function ADDRJDLFr(A, B; ADDRESS) return INTEGER; 

function INCR ADDRCA ADDRESS; INCR; INTEGER) return ADDRESS; 

function DECR_ADDR(A: ADDRESS; DECR; INTEGER) return ADDRESS; 


function ”>"(A, B: ADDRESS) return BOOLEAN renames ADDR_GT; 

function "<''(A. B: ADDRESS) return BOOLEAN renames ADDR_LT, 

function ">»■*(A B: ADDRESS) reiuni SOOLEAN renames ADDR_GE; 

function "<="(A, B: ADDRESS) return BOOLEAN renames ADDR_L£; 

function ".'(A, B: ADDRESS) return INTEGER renames ADDR_DIFF; 

function "+"(A: ADDRESS; INCR: INTEGER) return .ADDRESS renames INCR_ADDR; 

function "-"(A; .ADDRESS; DECK: INTEGER) return ADDRESS renames DECR_.ADDR; 


pragma inlme(ADDR_GT); 
pragma iniine(ADDR_LT); 
pragma ioline(ADDR_G£); 
pragma inline! AD DR_LE); 
pragma inline(ADDR_DIFF); 
pragma iniine!INCR_ADDR); 
pragma inline!D£CR_ADDR); 
pragma inline(PHYSICAL_ADDRESS); 


B-5 




private 


type ADDRESS is new integer; 

NO_ADDR : constant ADDRESS := 0; 
end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded so as to provide for efficient access by 
the target hardware, pragma PACK applied to a record eliminates the padding where possible. Pragma 
PACK has no ocher effect on the storage allocated for record components a record representation is 
required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the number of bits required to represent the range 
of the subtype. A si 2 e clause applied to a record type will not cause packing of components; an expli¬ 
cit record representation clause must be given to specify the packing of the components. A size clause 
applied to a record type will cause packing of components only when the component type is a discrete 
type. An error will be issued if there is insufficient space allocated. The SI2E clause is not supported 
for taste, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables and entries. 

5.4. Representation Clauses 

The ADDRESS clause is not supported for the following entities: 

Objects with explicit initializations 

Procedures 

Functions 

5.5. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides an assembly language interface for 
the target machine. It provides the necessary record typc(s) needed in the cods statement, an enumera¬ 
tion type of all the opcode mneumomes, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows; 

CODEji’( opcode , operand {, operand} ); 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands arc listed within a subaggregate. 
The format is as follows; 

CODE_N’( opcode , ( operand (, operand })); 


B-6 






For those opcodes that require no operands, named notation must be used (cf. RM 4.3(4)). 

CODE_0’( op => opcode ): 

The opcode must be an enumeration literal (i.e. it cannot be an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINEJTODE or the ’REF attribute. 

The arguments to any of the functions defined in MACHINE_CODE must be static expressions, string 
literals, or the functions defined in MACHlN£_COD£, The ’REF attribute may not be used as an argu¬ 
ment in any of these functions. 

Inline expansion of machine code procedures is supported. 


6 . Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT^IO use the value MAX_REC_SIZE as the record size (expressed in 
$?GRAGE_UN1TS) when the si 2 e of ELEXI£N7_TY?£ exceeds that value. For example ter uncon¬ 
strained arrays such as string where ELEMENT_fYPE’SJZE is very large, MAX_REC_SIZE is usea 
instead. MAX_RZC0RD_SI2£ is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the record size. In any case the maximum size 
supported is 1024 x 1024 x STORAGE^UNIT bits. DIR£CT_IO will raise USE EEP.CR it 
MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of $£QUENTIAL_lO use the value MAX_REC_$IZE as the record size (expressed in 
STORAGE_UNTTS) when the size of ELEMEN7_TY?E exceeds that value. For example for uncon¬ 
strained mays such as string where ELEMENT_fYPE’SIZE is very large, MAX REC_$IZE is used 
instead. MaX_REC 0RD_$I2£ is defined in SYSTEM and can be changed by a program before 
instantiating INTEGER 10 to provide an uoper limit on die record size. SEQUENTIAL 10 imposes ao 
limit on MAX REC SIZE. 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources up to or even near these limits are available to every program. 


B-7 




11.1. Line Length 

The implementation supports a maximum line length of 500 characters including the end of line charac¬ 
ter. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 4,000.000 x STORAGEJJNITS. The maximum 
size of a statically sized record type is 4,000,000 x STORAG£_UNlTS. A record type or array type 
declaration that exceeds these limits will generate a warning message. 

11J. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every task except the main program 
is allocated a fixed size stack of 10,240 STORAGE_UNITS. This is the value returned by 
T’ST0RAG£_$I2£ for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default collection size for an access 
type is 100 times the size of the designated type. This is the value returned by T’STORAGE_SIZE for 
an access type T. 

11J. Limit on Declared Objects 

There is an absolute limit of 6.000,000 x STORAG£_UNlTS for objects declared statically within a 
compilation unit. If this value is exceeded the compiler will terminate the compilation of the unit with a 
FATAL error message. 


B-8 








APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
vith a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 


$BIG_ID1 (1..498 »> 'A', 499 -> '1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..498 => 'A', 499 *> '2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..249 -> 'A', 250 => '3', 
251..499 -> 'A') 


C-l 








TEST PARAMETERS 


Name and Meaning _ 

$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value o90.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with $BIG_STRING2 
yields the image of $BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
$BIG_STRING1 yields the image of 
$BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A universal integer 

literal whose value is 
TEXT_IO.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


(1..249 => 'A', 250 => '4', 
251...499 => 'A') 


(1..496 -> 'O', 497..499 -> "298") 


(1..493 => 'O', 494..499 => "69.0E1") 


(1 => '"', 2..250 => 'A', 251 *> '"') 


(1 => '"', 2..250 => 'A', 
251 => '1', 252 => '"') 


(1..479 => ' ') 

2147483647 

16777216 

8 


C-2 






TEST PARAMETERS 


Name and Meaning 

Value 


$DEFAULT_SYS NAME 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

PYR_UNIX 


$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

2.0**(-31) 


$FIELD_LAST 

A universal integer 
literal whose value is 
TEXT_IO.FIELD'LAST. 

2147483647 


$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

NO_SUCH_FIXED_ 

_TYPE 

$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT FLOAT, or 
L0NG_FL0AT. 

N0_SUCH_FL0AT_ 

TYPE 

$GREATER_THAN_DURATION 

A universal real literal that 
lies be tween DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

100_000.0 


$GREATER^THAN_DURATION_BASE LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

10_000_000.0 


SHIGHPRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

99 


$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 

/ILLEGAL/FILE_NAME/2{]SZ2102C.DAT 

$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 

/ILLEGAL/FILE_ 

_NAME/CE2102C*.DAT 

$INTEGER_FIRST 

A universal integer literal 

whose value is INTEGER'FIRST. 

-2147483648 


C- 

-3 






TEST PARAMETERS 


Name and Meaning _ Value _ 

$INTEGER_LAST 2147483647 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 2147483648 

A universal integer literal 

whose value is INTEGER'LAST + 1. 


$LESS_THAN_DURATION 100_000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION BASE_FIRST -10_000_000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$ L0W_PRIORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 31 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 


$MAX_IN_LEN 499 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX INT. 


$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL (1..2 => "2:", 3 

A universal integer based 497..499 =>"11: 
literal whose value is 2#11| 
with enough leading zeroes in 
the mantissa to be $MAX_IN_LEN 
long. 


.496 => 'O', 
) 


C-4 



TEST PARAMETERS 


Name and Meaning 


Value 


$MAX_L£N_REAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be $MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
$MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task, object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

SNAME TINY_INTEGER 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT_FLOAT, SHORT_INTEGER, 

LONGJFLOAT, or LONG_INTEGER. 

$NAME_LIST PYRJJNIX 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 16#FFFFFFFD# 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX INT. 


(1. .3 => "16:", 4. 
496..499 =>"F.E:" 

(1 => , 2..498 

499 => '"') 

-2147483648 

32 


$NEV_MEM_SIZE 16_777_216 

An integer literal whose value 
is a permitted argument for 
pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


C-5 


.495 => 'O', 
) 


=> 'A', 



TEST PARAMETERS 



$NEV_STOR_UNIT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE UNIT. 


$NEU_SYS NAME PYR_UNIX 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 0.01 

A real literal whose value is 
SYSTEM.TICK. 


C-6 






APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63'' of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING 0F_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56. 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be deiected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 


D-l 







WITHDRAWN TESTS 


tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 
ARG. 

o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object as of the other type. 
However,, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 







e 


WITHDRAWN TESTS 


q. CE3111C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

r. CE3301A: This test contains several calls to END 0F_LINE and 

END_OF_PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD INPUT (lines 103, 107, 118, 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAY0UT_ERR0R is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 


D-3 







Compiler: 
ACVC Version 


APPENDIX E 

COMPILER OPTIONS AS SUPPLIED BY PYRAMID 


Pyramid Ada, Version 5.0 

1.10 


E-l 






Options 

-a fiiejiame 

-d 


-e 

-E 

-E file-name 
-E directory 


-el 
-El 

-El file-name 

-El directory (error listing) Same as the -E option, except that source listing with 
errors is produced. 

-ev (error vi) Process the raw error messages using a.error , embed them 

in the source file, and call SEDiTOR (default is vi) on the source 
file. 

-Ifile^abbreviation 

(link) Link this library file. (Do not space between the -/ and the file 
abbreviation.) See ld( 1). 

-M unitjxame (main) Produce an executable program using the named unit as the 
main program. The unit must be either a parameteriess procedure or 
a parameteriess function returning an integer. The executable pro¬ 
gram will be left in the file a.out unless overridden with the -<? 
option. 

•M adajource.a (main) Like -M unitjtwne , except that the unit name is assumed to 
be the root name of the .a file (e.g., for foo.a the unit is foo). Only 
one .a file may be preceded by -M. 

-o executable Jle (output) This option is to be used in conjunction with the -M option. 

executable Jile is the name of the executable rather than the default 
a.out. 


(archive) Treat fiiejiame as an ar file. Since archive files end with 
.a, -a is used to distinguish archive files from Ada source files. 

(dependencies) Analyze for dependencies only. Do not do semantic 
analysis or code generation. Update the library, marking any defined 
units as uncompiled. The •d option is used by a.make to establish 
dependencies among new files. 

(error) Process compilation error messages using a.error and direct it 
to stdout. Only one -e or -E option should be used. 


(error output) Without a file or directory argument, ada processes 
error messages using a.error and directs the output to stdour, the 
raw error messages are left in source.err. If a file pathname is given, 
the raw error messages are placed in that file. If a directory argu¬ 
ment is supplied, the raw error output is placed in dirt source.err. 
Only one -e or •£ option should be used. 

(error listing) Intersperse error messages among source lines and 
direct to stdout. 


E-2 




(optimize) Invoke the code optimizer. An optional digit limits the 
number of optimization passes. The default, 0, optimizes as far as 
possible. 

-R VADS library (recompile instantiation) Force analysis of all generic instantiations, 
causing reinstantiation of any that are out of date. 

-S 

(suppress) Apply PRAGMA SUPPRESS to the entire compilation. 

-T 

(timing) Print timing information for the compilation. 

-u 

(update) Cause library sums to reflect the current program source. 

Unless the source is syntactically incorrect, the compiler updates the 
library ada.lib. Normally, the library is changed only if the unit 
compiles without errors of any kind. 

-V 

(verbose) Print compiler version number, date and rime of compila¬ 
tion, name of file compiled, command input line, total compilation 
time, and error summary line. 

-w 

(warnings) Suppress warning diagnostics. 

Files 

file.a 

Ada source input file 

tmp/file.$$ 

IL code file created by front end 

ada.lib 

VADS directory information file 

gnrx.lib 

VADS generics library information file 

GVAS_table 

GVAS table in the current VADS project 

adadock 

lock link to ada.lib, for mutual exclusion 

gnrx.LOCK 

lock generics library, for mutual exclusion 

GVAS_table.LOCK 

lock link to GVAS table, for mutual exclusion 


SEE ALSO 

a.db, a.error, add, a.mkiib, ld(l) 

diagnostics 

The diagnostics produced by the VAJDS compiler are intended to be self-explanatory. 
Most refer to the RM. Each RM reference includes a section number and optionally, a 
paragraph number enclosed in parentheses. 


E-3 






