AD-A222 029 



V'AVF Control Number: AVF-VSR-AFNOR-88-19 



Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: 881121A1.10007 
Alsys 

AlsyCOMP_032, Version 4.1 
COMPAQ DESPRO 386 


Completion of On-Site Testing: 
21 November 1988 


Prepared By: 

AFNOR 

Tour Europe 
Cedex 7 

F-92080 Paris la Defense 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 


^TRTBUTl d^~8TATPiMtRTir ~ 

Approved for public miaas*/- 
_Dlrtribotton U«Umited : 



90 05 11 014 







1. REPORT »u«8ts 


|2. <0VT ACCESSION KO. 


3. RECIPIENT'S CATALOG Nl/wS-R 


—me I 4 Tm or * nM0 ° C0V ^ 3 

Ada Compiler Validation Summary ReportiAlsys 21 Nov. 1988 to 21 Nov. 1989 
UsyCOMF 032, Version 4.1, COMPAQ DESPRO 386 (Host & Target t o*m x mc "Sro . ripori 
JS1121A1. 1000/_______ 

— ' WHOm) I. CONTRACT 0* GRANT »U*e7ru; 

AF1V0R, Paris-, France. 


iTrtRfORMJNC ORGANIZATION AND ADDRESS 

AFNOR, Paris, France. 


10. PROGRAM tU*HNT. PRC.'ECT. TAS«. 
ARIA A NORA UNIT NUW6ERS 


n. CONTROLLING Office NAME and a^oress 
Ada Joint Program Office 
United States Department of Defense 
Washington/ DC 2o301-3081 


14. MONITORING ACLMCr NAME t ADORE $S</f ditttrtnt tr$m Corrtr&ltnf 0»Kr) 
AFNOR, Paris, France. 


ie. DISTRIBUTION STATEMENT (oi lha Atport) 


1Z. REPORT DATE 


is. security class (oit^mtpom 
UNCLASSIFIED 


IS*. gfCLASSIflCAHON/DCNNSRACINS 
K/A 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STATEMENT (of th* tbtttiei tnttrta in Blot* 20 HOiH*rtni hom «»po<Tj 

UNCLASSIFIED 



IB. REYnORQS (ContuNu* on ri,*riruO* if n*ctusryand i&ntity by blot* nvmb*r) * 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/MIL-57D- 
1815A, Ada Joint Program Office, AJFO 

20. ABSTRACT (Coin, mv on t*Or rin*<tn*r r bt CAX* n«m6,r) — — 

AIsy3, AlsyC0MP_032, Version 4.1, AFNOR, Paris, FranceT"COMPAQ DESPRO 386 OS/2 
Version 1.0 (Host 4 Tarege), ACVC 1.10. 


1473 I 01 TION Of 1 N 0 V «N is OBSOLETE 

«/« OlOZ'tf-BlA-CBOl 


L T NC L A S SITTF r> 


IECURITt CLASS: flc AT ION Of THJS RACE (KVnon Data t 










OFFICE OF THE DIRECTOR OF 
DEFENSE RESEARCH AND ENGINEERING 



MEMORANDUM FOR 


Director, Directorate of ^Database Services, 
Defense Logistics Agency 


SUBJECT: Technoloay Screening of Unclassified/Unlimited Reports 

7 ^ 0 / 


Your letter of '2 February 1990 to the Commander, Air Force 
Systems Command, Air Force Aeronautical Laboratory, 
wright-Patterson Air Force Base stated that the Ada Validation 
Summary report for Meridian Software Systems, Inc. contained 
technical data that should be denied public disclosure according to 
DoD Directive 5230.25 




We do not agree with this opinion that the contents of this 
particular Ada Validation Summary Report or the contents of the 
several hundred of such reports produced each year to document the 
. conformity testing results of Ada compilers. Ada is not used 
exclusively for military applications. The language is an ANSI 
Military Standard, a Federal Information Processing Standard, and 
an International Standards Organization standard. Compilers are 
tested for conformity to the standard as the basis for obtaining an 
Ada Joint Program Office certificate of conformity. The results of 
this testing are documented in a standard form in all Ada 
Validation Summary Reports which the compiler vendor agrees to make 
/public as part of his contract with the testing facility. 

On 18 December 1985, the Commerce Department issued party 
379 Technical Data of the Export Administration specifically 
listing Ada Programming Support Environments (including compilers) 
as items controlled by the Commerce Department. The AJPO complies 
with Department of Commerce export control' regulations. when 
Defense Technical Information Center receives an Ada Validation 
Summary Report,-which may be produced by any of the five U.S. and 
European Ada Validation Facilities, the content should be made 
available to the public. 

i 

If you have any further questions, please feel free to contact 
the undersigned at (202) 694-0209. 

jb4 :: 

John P. Solomond 

Director 

Ada Joint Program Office 







Ada Compiler Validation Summary Report: 


Compiler Name: AlsyCOMP_032, Version 4.1 
Certificate Number: 881121A1.10007 

Host: COMPAQ DESPRO 386 under OS/2, Version 1.0 

Target: COMPAQ DESPRO 386 under OS/2, Version 1.0 

Testing Completed 21 November 1988 Using ACVC 1.10 


This report has been reviewed and is approved. 


HP "Jj C 


AFNOR 

Fabrice Gamier de Labareyre 
Tour Europe 
Cedex 7 

F-92080 Paris la Defense 


'' Vs ‘ /: / 

- •- Jt —_ 

Ada Validation Organization 
Dr. John F. Kramer 
Institute frir Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 


| Accession Fop ^ I 

NTIS GRAJtl 
DTIC TAB 
Unannounced 
Justlflcatic 

□ 

□ 

>n_ 


Rr 

Distribution/ 

Availability Codes 

Dlst. 

V 

Avail 

Spec 

and/or 

lal 








TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT.5 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.5 

1.3 REFERENCES.6 

1.4 DEFINITION OF TERMS.6 

1.5 ACVC TEST CLASSES.7 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.9 

2.2 IMPLEMENTATION CHARACTERISTICS.10 

S 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.15 

3.2 SUMMARY OF TEST RESULTS BY CLASS.15 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.16 

3.4 WITHDRAWN TESTS.16 

3.5 INAPPLICABLE TESTS.16 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. 19 

3.7 ADDITIONAL TESTING INFORMATION.20 

3.7.1 Prevalidation.20 

3.7.2 Test Method.20 

3.7.3 Test Site.21 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B TEST PARAMETERS 

APPENDIX C WITHDRAWN TESTS 

APPENDIX D APPENDIX F OF THE Ada STANDARD 


3 

























INTRODUCTION 


CHAPTER 1 
INTRODUCTION 


This Validation Summary Report describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL- 
STD-1815A. This report explains all technical terms used within it 
and thoroughly reports the results of_t£s£ing this compiler using ^he 
Ada Compiler Validation Capability, -fACVOc? An Ada compiler must be 
implemented according to the Ada Standard, and any implementation- 
dependent features must conform to the requirements of the Ada 
Standard. The Ada Standard must be implemented in its entirety, and 
nothing can be implemented that is not in the Standard. 


Even though all validated Ada compilers conform to the Ada Standard, 
it must be understood that some differences do exist between 
implementations. The Ada Standard permits some implementation 
dependencies—for example, the maximum length of identifiers or the 
maximum values of integer types. Other differences between compilers 
result from the characteristics of particular operating systems, 
hardware, or implementation strategies. All the dependencies observed 
during the process of testing this compiler are given in this report. 

The information in this report is derived from the test results 
produced during validation testing. The validation process includes 
submitting a suite of standardized tests, the ACVC, as inputs to an 
Ada compiler and evaluating the results. The purpose of validating is 
to ensure conformity of the compiler to the Ada Standard by testing 
that the compiler properly implements legal language constructs and 
that it identifies and rejects illegal language constructs. The 
testing also identifies behav..or that is implementation-dependent but 
permitted by the Ada Standard. Six classes of tests are used. These 
tests are designed to perform checks at compile time, at link time, 
and during execution. 






INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on 
an Ada compiler. Testing was carried out for the following purposes: 

To attempt to identify any language constructs supported fay 
the compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported 
by the compiler but required by the Ada Standard 

To determine that the implementation-dependent behavior is 
allowed by the Ada Standard 

Testing of this compiler was conducted under the direction of the AVF 
according to procedures established by the Ada Joint Program Office 
and administered by the Ada Validation Organization (AVO). On-site 
testing was completed 21 November 1988 at Alsys Inc. in Waltham, USA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO 
may make full and free public disclosure of this report. In the 
United States, this is provided in accordance with the "Freedom of 
Information Act”(5 U.S.C.#552). The results of this validation apply 
only to the computers, operating systems, and compiler versions 
identified in this report. 

The organizations represented on the signature page of this report do 
not represent or warrant that all statements set forth in this report 
are accurate and complete, or that the subject compiler has no 
nonconformities to the Ada Standard other than those presented. 
Copies of this report are available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


AFNOR 

Tour Europe 
cedex 7 

F-92080 Paris la Defense 


5 






INTRODUCTION 


Questions regarding this report or the validation test results should 
be directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, ANSI/MIL- 
STD-1815A, February 1983, and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines, Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers’ Guide, 
SofTech, Inc.. December 1986. 


1.4 DEFINITION OF TERMS 

ACVC The Ada Compiler Validation Capability. The set of 

Ada programs that tests the conformity of an Ada 
compiler to the Ada programming language. 

Ada Commentary An Ada Commentary contains all information relevant 
to the point addressed by a comment on the Ada 
Standard. These comments are given a unique 
identification number having the form Al-ddddd. 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

The agency requesting validation. 

The Ada Validation Facility. The AVF is responsible 
for conducting compiler validations according to 
procedures contained in the Ada Compiler Validation 
Procedures and Guidelines. 

The Ada Validation Organization. The AVO has 
oversight authority over all AVF practices for the 
purpose of maintaining a uniform process for 
validation of Ada compilers. The AVO provides 
administrative and technical support for Ada 
validations to ensure consistent practices. 

A processor for the Ada language. In the context of 
th ; s report, a compiler is any language processor, 


Ada Standard 

Applicant 

AVF 

AVO 


Compiler 


6 








INTRODUCTION 


including cross-compilers, translators, and 
interpreters. 

Failed test An ACVC test for which the compiler generates a 

result that demonstrates nonconformity to the Ada 

Standard. 

Host The computer on which the compiler resides. 

Inapplicable test An ACVC test that uses features of the language 
that a compiler is not required to support or may 
legitimately support in a way other than the one 
expected by the test. 

Passed test An ACVC test for which a compiler generates the 

expected result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity 

regarding a particular feature or a combination of 
features to the Ada Standard. In the context of this 
report, the term is used to designate a single test, 
which may comprise one or more files. 

Withdrawn test An ACVC test found to be incorrect and not used to 
check conformity to the Ada Standard. A test may be 
incorrect because it has an invalid test objective, 
fails to meet its test objective, or contains illegal 
or erroneous use of the language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name 
identifies the class to which it belongs. Class A, C, D, and E tests 
are executable, and special program units are used to report their 
results during execution. Class B tests are expected, to produce 
compilation errors. Class L tests are expected to produce compilation 
or link errors. 

Class A tests check that legal Ada programs can be successfully 
compiled and executed. There are no explicit program components in a 
Class A test to check semantics. For example, a Class A test checks 
that reserved words of another language (other than those already 
reserved in the Ada language) are not treated a? reserved words by an 
Ada compiler. A Class A test is passed if no errors are detected at 
compile time and the program executes to produce a PASSED message. 







INTRODUCTION 


Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled 
and the resulting compilation listing is examined to verify that 
every syntax or.semantic error in the test is detected. A Class B 
test is passed if every illegal construct that it contains is 
detected by the compiler. 

Class C tests check that legal Ada programs can be correctly compiled 
and executed. Each Class C test is self-checking and produces a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when 
it is executed. 

Class D tests check the compilation and execution capacities of a 
compiler. Since there are no capacity requirements placed on a 
compiler by the Ada Standard for some parameters—for example, the 
number of identifiers permitted in a compilation or the number of 
units in a library—a compiler may refuse to compile a Class D test 
and still be a conforming compiler. Therefore, if a Class D test 
fails to compile because the capacity of the compiler is exceeded, 
the test is classified as inapplicable. If a Class D test compiles 
successfully, it is self-checking and produces a PASSED or FAILED 
message during execution. 

Each Class E test is self-checking and produces a NOT APPLICABLE, 
PASSED, or FAILED message when it is compiled and executed. However, 
the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during 
compilation. Therefore, a Class E test is passed by a compiler if it 
is compiled successfully and executes to produce a PASSED message, or 
if it is rejected by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is 
attempted. A Class L test passes if it is rejected at link time—that 
is, an attempt to execute the main program must generate an error 
message before any declaration: in the main program or any units 
referenced by the main program are elaborated. 

Two library units, the package REPORT and the procedure CHECK_FILE, 
support the self-checking features of the executable tests. The 
package REPORT provides the mechanism by which executable tests 
report PASSED, FAILED, or NOT APPLICABLE results. It also provides a 
set of identity functions used to defeat some compiler optimizations 
allowed by the Ada Standard that would circumvent a test objective. 
The procedure CHECX_FILE is used to check the contents of text files 
written by some of the Class C tests for chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set 
of executable tests. These tests produce messages that are examined 







INTRODUCTION 


to verify that the units are operating correctly. If these units are 
not operating correctly, then the validation is not attempted. 

The text of the tests in the ACVC follow conventions that are 
intended to ensure that the tests are reasonably portable without 
modification. For example, the tests make use of only the basic set 
of 55 characters, contain lines with a maximum length of 72 
characters, use small numeric values, and place features that may not 
be supported by all implementations in separate tests. However, some 
tests contain values that retire the test to be customized according 
to implementation-specific values—for example, an illegal file name. 
A list of the values used for this validation is provided in Appendix 
C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is 
inapplicable to the implementation. The applicability of a test to an 
implementation is onsidered each time the implementation is 
validated. A test that is inapplicable for one validation is not 
necessarily inapplicable for a subsequent validation. Any test that 
was determined to contain an illegal language construct or an 
erroneous language construct is withdrawn from the ACVC and, 
therefore, is not used in testing a compiler. The tests withdrawn at 
the time of this validation are given in Appendix h. 


9 





CONFIGURATION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under 
the following configuration: 

Compiler: AlsyCOMP_032, Version 4.1 

ACVC Version: 1.10 

Certificate Number: 881121A1.10007 

Host Computer: 

Machine: COMPAQ DESPRO 386 

Operating System: OS/2 

Version 1.0 

Memory Sice: 6 Mb 

Configuration informatmn : 

80287 floating point co-processor 

110 Mb hard disk 

standard monochrome display 

Target Computer: 

Mac;.me: COMP ,'Q DESPRO 386 

Operating System: OS/2 

Version 1.0 

Memory Size: 6 Mb 

Configuration information : 

80287 floating point co-processor 

110 Mb hard disk 

standard monochrome display 

Communications Network: None 






CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the 
behavior of a compiler in those areas of the Ada Standard that permit 
implementations to differ. Class D and E tests specifically check for 
such implementation differences. However, tests in other classes also 
characterize an implementation. The tests demonstrate the following 
characteristics: 

Capacities. 

The compiler correctly processes a compilation containing 
723 variables in the same declarative part. (See test 
D29002K.) 

The compiler correctly processe a test containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests) .) 

The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


Predefined types. 

This implementation supports the additional predefined 
types SHORT_INTEGER, LONG_INTEGER, LONG_FLOAT in the 
package STANDARD. (See tests B86001T..Z (7 tests).) 


Based literals. 

An implementation is allowed raise NUMERIC_ERROR or 
CONSTRAINT_ERROR when a value exceeds SYSTEM.MAX_INT . This 
implementation raises CONSTRAINT_ERROR during execution. 
(See test E24201A.) 


Expression evaluation. 

Apparently no default initialization expressions for record 
components are evaluated before any value is checked to 
belong to a component's subtype. (See test C32117A.) 

Assignments for subtypes are performed with the same 
precision as t v e base type. (See test C35712B.) 


11 




CONFIGURATION INFORMATION 


This implementation uses no extra bits for extra precision. 
This implementation uses all extra bits for extra range. 
(See test C35903A.) 

Apparently NUMERIC_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

Apparently NUMERIC_ERROR is raised when a literal operand 
in a fixed-point comparison or membership test is outside 
the range of the base type. (See test C45252A.) 

Apparently underflow is gradual. (See tests C45524A..Z.) 


Rounding. 

The method used for rounding' to integer is apparently round 
to even. (See tests C46012A..Z.) 

The method used for rounding to longest integer is 
apparently round to even. (See tests C46012A..Z.) 

The method used for rounding to integer in static universal 
real expressions is apparently round to even. (See test 
C4A014A.) 


Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 
implementation: 

Declaration of an array type or subtype declaration with 
more than SYSTEM.MAX_INT components raises NUMERIC_ERROR 
sometimes, CONSTRAINT_ERROR sometimes. (See test C36003A.) 

CONSTRAINT_ERROR is raised when 'LENGTH is applied to an 
array type with INTEGER'LAST + 2 components. (See test 
C36202A.) 

CONSTRAINT_ERROR is raised when an array type with 
SYSTEM.MAX_INT + 2 components is declared. (See test 
C36202B.) 

A packed BOOLEAN array having a 'LENGTH exceeding 
INTEGER'LAST raises no exception. (See test C52103X.) 


12 




CONFIGURATION INFORMATION 


A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the 
length of a dimension is calculated and exceeds 
INTEGER'LAST, array objects are sliced. (See test C52104Y.) 

A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 

In assigning one-dimensional array types, the expression 
appears to be evaluated in its entirety before 
CONSTRAINT_ERROR is raised when checking whether the 
expression's subtype is compatible with the target's 
subtype. (See test C52013A.) 

In assigning two-dimensional array types, the expression 
does not appear to be evaluated in its entirety before 
CONSTRAINT_ERROR is raised when checking whether the 
expression's subtype is compatible with the target’s 
subtype. (See test C52013A.) 


Discriminated types. 

In assigning record types with discriminants, the 
expression appears to be evaluated in its entirety before 
CONSTRAINT_ERROR is raised when checking whether the 
expression's subtype is compatible with the target's 
subtype. (See test C52013A.) 


Aggregates. 

In the evaluation of a multi-dimensional aggregate, all 
choices appear to be evaluated before checking against the 
index type. (See tests C43207A and C43207B.) 

In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

All choices are evaluated before CONSTRAINT_ERROR is raised 
if a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


13 





CONFIGURATION INFORMATION 



Pragmas. 

The pragma INLINE is supported for functions or procedures, 
but not functions called inside a package specification. 
{See tests LA3004A..B, EA3004C..D, and CA3004E..F.) 


Generics. 

Generic specifications and bodies can be compiled in 
separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 

Generic subprogram declarations and bodies can be compiled 
in separate compilations.. (See tests CA1012A and CA2009F.) 

Generic library subprogram specifications and bodies can be 
compiled in separate compilations. (See test CA1012A.) 

Generic non-library subprogram bodies can be compiled in 
separate compilations from their stubs. (See test CA2009F.) 

Generic package declarations and bodies can be compiled in 
separate compilations. (See tests CA2009C, BC3204C, and 

BC3205D.) 

Generic library package specifications and bodies can be 
compiled in separate compilations. (See tests BC3204C and 
BC3205D.) 

Generic non-library package bodies as subunits can be 
compiled in separate compilations. (See test CA2009C.) 

Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


Input and output. 

The package SEQUENTIAL_IO can be instantiated with 

unconstrained array types aftd record types with 

discriminants without defaults. (See tests AE2101C, 
EE2201D, and EE2201E.) 

The package DIRECT_IO can not be instantiated with 

unconstrained array types and record types with 


14 







CONFIGURATION INFORMATION 


discriminants without uwfuults. (See tests AE2101H, 
EE2401D, and EE2401G.) 

Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO, 
but not CREATE in mode IN_FILE. (See tests CE2102D..E, 
CE2102N, and CE2102P.) 

Modes IN_FILE, OUT_FILE, and INOUT_FILE are supported for 
DIRECT_IO, but not CREATE in mode IN_FILE- (See tests 
CE2102F, CE2102I.. J, CE2102R, CE2102T, and CE2102V.) 

Modes IN_FILE and OUT_FILE are supported for text files, 
but not CREATE in mode IN_FILE. (See tests CE3102E and 
CE3102I..K.) 

RESET from OUT_FILE to IN_FILE only and DELETE operations 
are supported for SEQUENTIAL_IO. (See tests CE2102G and 
CE2102X.) 

RESET except from IN_FILE to INOUT_FILE or to OUT_FILE and 
DELETE operations are supported for DIRECT_IO. (See tests 
CE2102K and CE2102Y.) 

RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

Overwriting to a sequential file truncates to the last 
element written. (See test CE2208B.) 

Temporary sequential files are given names and deleted 
when closed. (See test CE2108A.) 

Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

Temporary text files are given names and deleted when 
closed. (See test CE3112A.) 

More than one internal file can be associated with each 
external file for sequential files when reading only (See 
tests CE2107A..E, CE2102L, CE2110B, and CE2111D.) 

More than one internal file can be associated with each 
external file for direct files when reading only (See tests 
CE2107F..I, CE2110D and CE2111H.) 

More than one internal file can be associated with each 
external file for text files when reading only. (See tests 
CE3111A..E, CE3114B, and CE3115A.) 


15 







TEST INFORMATION 


CHAPTER 3 


test information 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 36 tests had been withdrawn because of test errors. The AVF 
determined that 376 tests were inapplicable to this implementation. 
All inapplicable tests were processed during validation testing 
except for 201 executable tests that use floating-point precision 
exceeding that supported by the implementation. Modifications to the 
code, processing, or grading for 52 tests were required to 
successfully demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. • 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 


TEST CLASS 


TOTAL 


A 

B 

C 

D 

E 

L 


Passed 

129 

1132 

1959 

17 

31 

46 

3305 

Inapplicable 

0 

6 

36$ 

0 

2 

0 

376 

Withdrawn 

1 

2 

33 

0 

0 

0 

36 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


16 








TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

199 

577 

555 

248 

172 

99 

161 

332 

131 

36 

252 

251 

280 

3305 

Inappl 

14 

72 

125 

0 

0 

0 

5 

1 

O 

0 

0 

US 

41 

376 

Wdrn 

0 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

29 

4 

36 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 36 tests were withdrawn from ACVC Version 1.10 at the 
time of this validation: 


A39005G 

B97102E 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CL2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84N 

CD2A84M 

CD50110 

CD2B15C 

CD7205C 

CD5007B 

CD7105A 

CD7203B 

CD7204B 

CD7205D 

CE2107I 

CE3111C 

CE3301A 

CE3411B 

See Appendix D for 

the reason 

that each 

of these 

tests was 

withdrawn 


3.5 Inapplicable tests 

Some tests do not apply to all compilers because they make use of 
features that a compiler is not required by the Ada Standard to 
support. Others may depend on the result of another test that is 
either inapplicable or withdrawn. The applicability of a test to an 
implementation is considered each time a validation is attempted. A 
test that is inapplicable for one validation attempt is not 
necessarily inapplicable for a subsequent attempt. For this 
validation attempt, 376 tests were inapplicable for the reasons 
indicated: 

The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
System.Max_Digits: 


C24113L. 

.Y 

C35705L..Y 

C35706L..Y 

C35707L. 

.Y 

C35708L. 

.Y 

C35802L. 

.Z 

C45241L..Y 

C45321L..Y 

C45421L. 

.Y 

C45521L. 

.Z 

C45524L. 

.z 

C45621L..Z 

C45641L..Y 

C46012L. 

.Z 




17 








TEST INFORMATION 


C35702A and B86001T are not applicable because this 
implementation supports no predefined type Short_Float. 

C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 
because the value of System.Max_Mantissa is less than 32. 

C86001F, is not applicable because recompilation of Package 
SYSTEM is not allowed. 

B86001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with 
a name other than Integer, Long_Integer, or Short_Integer. 

B86001Y is not applicable because this implementation supports 
no predefined fixed-point type other than Duration. 

B86001Z is not applicable because this implementation supports 
no predefined floating-point type with a name other than Float, 
Long_Float, or Short_Float. 

B91001H is not applicable because address clause for entries is 
not supported by this implementation. 

CD1009C, CD2A41A..B, CD2A41E, CD2A42A..B, CD2A42E..F, CD2A42I..J 
are not applicable because size clause on float is not supported 
by this implementation. 

CD1C04B, CD1C04E, CD4051A..D are not applicable because 
representation clause on derived records or derived tasks is not 
supported by this implementation. 

CD1C03C, CD2A83A..C, CD2A83E, CD2A84B..I, CD2A84K..L, CD2B11B 
are not applicable because storage size clause on collection of 
unconstrained object is not supported. 

CD1C04A, CD2A21C..D, CD2A22C..D, CD2A22G..H, CD2A31C..D, 
CD2A32C..D, CD2A32G..H, CD2A41C..D, CD2A42C..D, CD2A42G..H, 
CD2A51C..D, CD2A52C..D, CD2A52G..H, CD2A53D, CD2A54D, 
CD2A54H are not applicable because size clause for derived 
private type is not supported by this implementation. 

CD2A61A.,D,F,H,I,J,K,L, CD2A62A..C, CD2A71A..D, CD2A72A..D, 
CD2A74A..D, CD2A75A..D are not applicable because of the way 
this implementation allocates storage space for one component, 
size specification clause for an array type or for a record type 
requires compression of the storage space needed for all the 
components (without gaps). 

CD4041A is not applicable because alignment "at mod 8" is not 
supported by this implementation. 


18 






TEST INFORMATION 


CD5003E is not applicable because address clause for integer 
variable is not supported by this implementation. 

BD5006D is not applicable because address clause for packages is 
not supported by this implementation. 

CD5011B,D,F,H,L,N,R, CD5012C,D,G,H,L, CD5013B,D,F,H,L,N,R, 

CD5014U,tf are not applicable because address clause for a 
constant is not supported by this implementation. 

CD5013K is not applicable because address clause for variables 
of a record type is not supported by this implementation. 

CD5012J, CD5013S, CD5014S are not applicable because address 

clause for a task is not supported by this implementation. 

CE2102E is inapplicable because this implementation supports 
create with out_file mode for SEQUENTIAL_IO. 

CE2102F is inapplicable because this implementation supports 

create with inout_file mode for DIRECT_IO. 

CE2102J is inapplicable because this implementation supports 

create with out_file mode for DIRECT_TO. 

CE2102N is inapplicable because this implementation supports 

open with in_file mode for SEQUENTIAL_IO. 

CE2102O is inapplicable because this implementation supports 

RESET with in_file mode for SEQUENTIAL_IO. 

CE2102P is inapplicable because this implementation supports 

open with out_file mode for SEQUENTIAL_IO. 

CE2102Q is inapplicable because this implementation supports 

RESET with out_file mode for SEQUENTIAL_IO. 

CE2102R is inapplicable because this implementation supports 

open with mout_file mode for DIRECT_IO. 

CE2102S is inapplicable because this implementation supports 

RESET with inout_file mode for DIRECT_IO. 

CE2102T is inapplicable because this implementation supports 

open with in_file mode for DIRECT_IO. 

CE2102U is inapplicable because this implementation supports 

RESET with in file mode for DIRECT 10. 


19 





TEST INFORMATION 


CE2102V is inapplicable because this implementation supports 
open with out_file mode for DIRECT_IO. 

CE2102W is inapplicable because this implementation supports 
RESET with out_file mode for DIRECT_IO. 

CE2105A is not applicable because create with mode in_file is 
not supported by this implementation for SEQUENTIAL_IO. 

CE2105B is inapplicable because CREATE with IN_FILE mode is not 
supported for direct access files. 

CE2107B..E (4 tests), CE2107L, and CE2110B are not applicable 
because multiple internal files cannot be associated with the 
same external file when one or more files is writing for 
sequential files. The proper exception is raised when multiple 
access is attempted. 

CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the 
same external file when one or more files is writing for direct 
files. The proper exception is raised when multiple access is 
attempted. 

CE2111C,D are not applicable because reseting from in_file to 
out_file mode for sequential files is not supported by this 
implementation. 

EE2401D and EE2401G are not applicable because USE_ERROR is 
raised when the create of an instantiation of DIRECT_IO 
with unconstrained type is called. 

CE2401H is not applicable because create with inout_file mode 
for unconstrained records with default discriminants is not 
supported by this implementation. 

CE3102F is inapplicable because this implementation supports 

reset for text files, for out_file, in_file and from out_file to 
in_file mode. 

CE3102G is inapplicable because this implementation supports 

deletion of an external file for text files. 

CE3102I is inapplicable because this implementation supports 

create with out_file mode for text files. 

CE3102J is inapplicable because this implementation supports 

open with in_file mode for text files. 


20 





TEST INFORMATION 


CE3102K is inapplicable because this implementation supports 
open with out_file mode for text files. 

CE3109A is inapplicable because text file create with in_file 
mode is not supported and raises USE_ERROR. 

CE3111B, CE3111D..E (2 tests), CE3114B, and CE3115A are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing 
for text files. The proper exception is raised when multiple 
access is attempted. 


21 




TEST INFORMATION 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases 
where legitimate implementation behavior prevents the successful 
completion of an (otherwise) applicable test. Examples of such 
modifications include: adding a length clause to alter the default 
size of a collection; splitting a Class B test into subtests so that 
all errors are detected; and confirming that messages produced by an 
executable test demonstrate conforming behavior that wasn't 
anticipated by the test (such as raising one exception instead of 
another). 

Modifications were required for 5A tests. 

The test EA3004D when run as it is, the implementation fails to 
detect an error on line 27 of test file EA3004D6M (line 115 of "cat 
-n ea3004d*"). This is because the pragma INLINE has no effect when 
its object is within a package specification. However, the results of 
running the test as it is does not confirm that the pragma had no 
effect, only that the package was not made obsolete. By re-ordering 
the compilations so that the two subprograms are compiled after file 
D5 (the re-compilation of the "with"ed package that makes the various 
earlier units obsolete), we create a test that shows that indeed 

pragma INLINE has no effect when applied to a subprogram that is 

called within a package specification: the test then executes and 

produces the expected NOT_APPLICABLE result (as though INLINE were 
not supported at all). The re-ordering of EA3004D test files is 

0-1-4-5-2-3-6. 

The following 30 tests were split because syntax errors at one point 
resulted in the compiler not detecting other errors in the test; 
B23004A B24007A B24009A B25002A B26005A B27005A B28003A 

B32202A B32202B B32202C B33001A B36307A B37004A B49003A 

B49005A B61012A B62001B B74304B B74304C B74401F B74401R 

B91004A B95032A B95069A B95069B BA1101B2 BA1101B4 BC2001D 

BC3009A BC3009C BD5005B 

The following 21 tests were split in order to show that the compiler 
was able to find the representation clause indicated by the comment 
—N/A =>ERROR : 

CD2A61A CD2A61B CD2A61F CD2A61I CD2A61J CD2A62A CD2A62B 

CD2A71A CD2A71B CD2A72A CD2A72B CD2A75A CD2A75B CD2A84B 

CD2A84C CD2A84D CD2A84E CD2A84F CD2A84G CD2A84H CD2A84I 


22 





TEST INFORMATION 


3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 
produced by the AlsyCOMP_032 was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
compiler successfully passed all applicable tests, and the compiler 
exhibited the expected behavior on all inapplicable tests. 


3.7.2 Test Method 

Testing of the AlsyCOMP_032 using ACVC Version 1.10 was conducted 
on-site by a validation team from the AVF. The configuration 
consisted of a COMPAQ DESPRO 386 operating under OS/2, Version 1.0. 

A tape containing all tests was taken on-site by the validation team 
for processing. Tests that make use of implementation-specific values 
were customized by Alsys after loading of the tape. 

The contents of the tape were not loaded directly onto the host 
computer. They were loaded on a VAX/VMS machine and transferred via a 
network to the COMPAQ DESPRO 386. This is the reason why 
prevalidation tests were used for the the validation. Those tests 
were loaded by Alsys from a magnetic tape containing all tests 
provided by the AVF. Customization was done by Alsys. All the tests 
were checked at prevalidation time. 

Integrity of the validation tests was made by checking that no 
modification of the test occured after the time the prevalidation 
results were transferred on disquettes for submission to the AVF. 
This check was performed by verifying that the date of creation (or 
last J if ication) of the test files was earlier than the 
prevalidation date. After validation was performed, 80 source tests 
were selected by the AVF and checked for integrity. 

The full set of tests was compiled, linked, and all executable tests 
were run on the COMPAQ DESPRO 386. Results were printed from the from 
the host computer. 


23 






TEST INFORMATION 


The compiler was tested using command scripts provided by Alsys and 
reviewed by the validation team. The compiler was tested using all 
default option settings except for the following: 

OPTION / SWITCH EFFECT 

GENERIC=STUBS Code of generic instantiation is placed in separate 
units 

CALLS=INLINE The pragma INLINE are taken into account 


Tests were compiled, linked,.and executed (as appropriate) using 2 
computers. Test output, compilation listings, and job logs were 
captured on disquettes and archived at the AVF. The listings examined 
on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Alsys, Inc. in Waltham, USA and was completed 
on 21 November 1988. 


24 





DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 

Alsys has submitted the following Declaration of 
Conformance concerning the AlsyCOMP_032. 


DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 
Compiler Implementor: Alsys 

Ada Validation Facility: AFNOR, Tour Europe Cedex 7, 

F-92080 Paris la Defense 

Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Configuration 


Base Compiler Name: 


Host Architecture ISA: 
OS&VER #: 

Target Architecture ISA: 
OS&VER #: 


AlsyCOMP_032 Version 4.1 


COMPAQ DESPRO 386 
OS/2, Version 1.0 

COMPAQ DESPRO 386 
OS/2, Version 1.0 


Implementor’s Declaration 

I, the undersigned, representing Alsys, have implemented no deliberate 
extensions to the Ada Language Standard ANSI/MIL-STD-1815A m the 
compiler(s) listed in this declaration. I declare that Alsys is the 
owner of record of the Ada language compiler(s) listed above and, as 
such, is responsible for maintaining said compiler(s) in conformance 
tc ANSI/MIL-STD-1815A. All certificates and registrations for Ada 
language compiler (s) listed m this declaration shall be made only in 
the owner's corporate name. 


! ■' _ Date 

Alsys 

Mike Blanchette 

Vice President and Director of Engineering 


26 



DECLARATION OF CONFORMANCE 


Owner's Declaration 

I, the undersigned, representing Alsys, take full responsibility |or 
implementation and maintenance of the Ada compiler(s) listed above, 
and agree to the public disclosure of the final Validation Summary 
Report. I further agree to continue to comply with the Ada trademark 
policy, as defined by the Ada Joint Program Office. I declare that all 
of the Ada language compilers listed, and their host/target 
performance, are in compliance with the Ada Language Standard 
ANSI/MIL-STD-1815A. 


• • ." _ Date 

Alsys 

Mike Blanchette 

Vice President and Director of Engineering 







TEST PARAMETERS 


APPENDIX B 
TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, 
such as the maximum length of an input line and invalid file names. A 
test that makes use of such values is identified by the extension .TST 
in its file name. Actual values to be substituted are represented by 
names that begin with a dollar sign. A value must be substituted for 
each of these names before the test is run. The values used for this 
validation are given below. 


Name and Meaning Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to held any value of an access 
type. 

$BIG_ID1 (254 * 'A') & '1' 

Identifier the size of the 
maximum input line length 
with varying last character. 

$BIG_ID2 (254 * ’A) & '2' 

Identifier the size of the 
maximum input line length 
with varying last character. 

$BIG_ID3 (126 * 'A') & '3' & (128 * 'A') 

Identifier the size of the 
maximum input line length 
with varying middle character. 

$BIG_ID4 

Identifier the size of the 
maximum input line length 
with varying middle character. 


(126 * 'A') & '4' & (128 * 'A') 







TEST PARAMETERS 


Name and Meaning 


Value 


$BIG_INT_LIT (252 * '0') 

An integer literal of value 
298 with enough leading zeroes 
so that it is the size of the 
maximum line length. 

?big_real_l:t <250 * ■ 0 •> 

A universal real literal of 
value 690.0 with enough 
leading zeroes to be the size 
of the maximum line length. 

$BIG_STRING1 "" & (127 * 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 


$BIG_STRING2 ' & (127 * 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image 
of BIG ID1. 


SBLANKS (235 * ’ ') 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 214783647 

A universal integer literal whose 
value is TEXT 10.COUNT'LAST. 


SDEFAULT_MEM_SIZE 
An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 
An integer literal whose value 
is SYSTEM.STORAGEJJNIT. 

SDEFAULT_SYS_NAME 
The value of the constant 
SYSTEM. SYSTEMJfAME. 

$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE DELTA. 


655360 


8 


I 80X86 


2#1.0#E-31 


& '298' 


& ’690.0’ 


’A') & 


'A') & "1"' 


29 







TEST PARAMETERS 


Name and Meaning 


Value 


$FIELD_LAST 255 

A universal integer literal whose 
value is TEXT_I0.FIELD'LAST. 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME NO_SUCH_TYPE 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT_FLOAT, or 
LONG_FLOAT. 

$GREATER_THAN__DURATION 2_0 9 7_151.9 9 9_0 2 3_4 3 7_51 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE_LAST 3_000_000.0 
A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 10 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

ILLEGALV!$**&*()/_+" 


!$%'&*()?/)(* 4 \!$%‘ 


-32768 


32767 


SILLEGAL_EXTERNAL_FILE_NAME1 
An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 
An external file name which 
is too long. 

$INTEGER_FIRST 
A universal integer literal 
whose value is INTEGER'FIRST. 

$INTEGER_LAST 

A universal integer literal 
whose value is INTEGER'LAST. 


30 








TEST PARAMETERS 


Name and Meaning Value 


$INTEGER_LAST_PLUS_1 32768 

A universal integer literal 
whose value is INTEGER’LAST + 1. 

$LESS_THAN_DURATION -2_097_152.5 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION’FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST -3000_000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$LOV_PRIORITY 1 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 31 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 255 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX_INT+1. 

$MAX_LEN_INT_BASED_LITERAL '42:' & (250 * '0') 4 'll:' 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


31 







TEST PARAMETERS 


Name and Meaning Value 


$MAX_LEN_REAL_BASED_LITERAL '16:' & (248 * ’O') & 'F.E:' 

A universal real based literal 
whose value is 16: F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX__STRING_LITERAL ”” & (253 * ’A’) & 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT -2147483648 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
NULL;" as the only statement in 
its body. 

SNAME NO_SUCH_TYPE 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST I_80X86 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 16#FFFFFFFE# 

A based integer literal whose 
highest order nonzero bit falls 
in the sign bit position of the 
representation for SYSTEM.MAX_INT. 

$NEW_MEM_SIZE 655360 

An.integer literal whose value 
is a permitted argument for 
pragma memory_size, other than 
DEFAULT_MEM_SIZE. If there is 
no other value, then use 
DEFAULT MEM SIZE. 


32 









TEST PARAMETERS 


Name and Meaning 


$NEV_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma storage_unit, other than 
DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE_UNIT 

$NEW_SYS_NAM£ 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one inout 
parameter. 


Value 


8 


I 80X86 


32 


33 








TEST PARAMETERS 


Name and Meaning 


STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 


1 . 0 / 18.2 


34 








WITHDRAWN TESTS 


APPENDIX C 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to 
the Ada Standard. The following 36 tests had been withdrawn at the 
time of validation testing for the reasons indicated. A reference of 
the form Al-ddddd is to an Ada Commentary. 

A39005G This test unreasonably expects a component clause to 

pack an array component into a minimum size (line 30). 

B97102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a 
selective wait alternative (line 31). 

BC3009B This test wrongly expects that circular instantiations 

will be detected in several compilation units even 
though none of the units is illegal with respect to the 
units it depends on; by AI-00256, the illegality need 
not be< detected until execution is attempted (line 95). 

CD2A62D This test wrongly requires that an array object's size 

be no greater than 10 although its subtype’s size was 
specified to be 40 (line 137) . 

CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] These tests 
wrongly attempt to check the size of objects of a 
derived type (for which a ’SIZE length clause is given) 
by passing them to a derived subprogram (which 
implicitly converts them to the parent type (Ada 
standard 3.4:14)). Additionally, they use the 'SIZE 
length clause and attribute, whose interpretation is 
considered problematic by the WG9 ARG. 

CD2A81G, CD2A83G, CD2A84N & M, 4 CD50110 These tests assume that 
dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; 
this is not the case, and the main program may loop 
indefinitely (lines 74, 85, 86 4 96, 86 & 96, and 58, 
resp.) . 


35 





WITHDRAWN TESTS 


CD2B15C 4 CD7205C These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of 
designated objects in a collection; the Ada standard 
lyyy:15 allows that such control must not be expected. 

CD5007B This test wrongly expects an implicitly declared 

subprogram to be at the address that is specified for an 
unrelated subprogram (line 303). 

CD7105A This test requires that successive calls to 

CALENDAR.CLOCK change by at least SYSTEM.TICK; however, 
by Commentary AI-00201, it is only the expected 
frequency of change that must be at least SYSTEM.TICK— 
particular instances of change may be less (line 29). 

CD7203B, & CD7204B These tests use the 'SIZE length clause and 

attribute, whose interpretation is considered 

problematic by the WG9 ARG. 

CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task's 
activation as though it were like the specification of 
storage for a collection. 

CE2107I This test requires that objects of two similar scalar 

types be distinguished when read from a file—DATA_IRROR 
is expected to be raised by an attempt to read one 

object as of the other type. However, it is not clear 
exactly how the Ada standard 14.2.4:4 is to be 

interpreted; thus, this test objective is not considered 
valid, (line 90). 

CE3111C This test requires certain behavior, when two files are 

associated with the same external file, that is not 

required by the Ada standard. 

CE3301A This test contains several calls to END_OF_LINE 4 

END_OF_PAGE that have no parameter: these calls were 

intended to specify a file, not to refer to 

STANDARD_INPUT (lines 103, 107, 118, 132, & 136). 

CE3411B This test requires that a text file's column number be 

set to COUNT'LAST in order to check that LAYOUT_ERROR is 
raised by a subsequent PUT operation. But the former 
operation will generally raise an exception due to a 
lack of available disk space, and the test would thus 
encumber validation testing. 


36 




APPENDIX F OF THE Ada STANDARD 


APPENDIX D 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of the AlsyCOMP_032, Version 
4.1, are described in the following sections, which discuss topics in 
Appendix F of the Ada Standard. Implementation-specific portions of 
the package STANDARD are also included in this appendix. 

package STANDARD is 


type INTEGER is range -32_768 .. 32_767; 
type SHORT_INTEGER is range -128 .. 127; 

type LONG_INTEGER is range -2_147_483_648 .. 2_147_483_647; 

type FLOAT is digits 6 range 

— 2# 1. Ill 1111 1111 1111 1 111 llll#E-*-127 

2#1.111_1111_1111_1111_1111_1111SE+127; 

type LONG_FLOAT is digits 15 range 

— 2#1.1111 1111_1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111#E1023 

2#1.1111_1111_1111_1111_1111_1111_1111_1111_.111_1111_1111_1111_1 111 #E10 2 3; 

type DURATION is delta 0.001 range -2097152.0 .. +2097152.0; 


end STANDARD; 


37 







Copyright 1988 by Alsys 

All rights reserved. No part of this document may be reproduced in 
any form or by any means without permission in writing from Alsys. 


Printed: November 1988 

Alsys reserves the right to make changes in specifications and other information 
contained in this publication without prior notice. Consult Alsy c to determine whether 
such changes have been made. 


Aleys. AdaWorld AdaProbe, AdaXref, AdaReformat, and AdaMake are registered trademark# of Aliy#. 
Microsoft and MS are registered trademark# of Microsoft Corporation. 

IBM, PC AT, PS/2, IBM Operating Sy#tem/2, IBM OS/2 are registered trademarks of International 
Business Machines Corporation. 

INTEL is a registered trademark of Intel Corporation. 





TABLE OF CONTENTS 


APPENDIX F 


1 Implementation-Dependent Pragmas 

1.1 INLINE 

1.2 INTERFACE 

1.3 INTERFACE_NAME 

1.4 INDENT 

1.5 Other Pragmas 


2 Implementation-Dependent Attributes 

3 Specification of the package SYSTEM 

4 Restrictions on Representation Clauses 

4.1 Enumeration Types 

4.2 Integer Types 

4.3 Floating Point Types 

4.4 Fixed Point Types 

4.5 Access Types 

4.6 Task Types 

4.7 Array Types 

4.8 Record Types 

4.8.1 RECORD_SIZE 

4.8.2 VARIANTJNDEX 

4.8.3 ARRAY_DESCRIPTOR 

4.8.4 RECORD DESCRIPTOR 


5 Conventions for Implementation-Generated Names 

6 Address Clauses 

6.1 Address Clauses for Objects 

6.2 Address Clauses for Program Units 

6.3 Address Clauses for Entries 


Table of Contents 


7 Restrictions on Unchecked Conversions 29 

8 Input-Output Packages 29 

8.1 Correspondence between External Files and OS/2 Files 29 

8.2 Error Handling 30 

8.3 The FORM Parameter 30 

8.4 Sequential Files 31 

8.5 Direct Files 31 

8.6 Text Files 31 

8.7 Access Protection of External Files 32 

8.8 The Need to Close a File Explicitly 32 

8.9 Limitation on the procedure RESET 33 

8.10 Sharing of External Files and Tasking Issues 33 

9 Characteristics of Numeric Types 33 

9.1 Integer Types 33 

9.2 Floating Point Type Attributes 34 

9.3 Attributes of Type DURATION 34 

10 Other Implementation-Dependent Characteristics 35 

10.1 Use of the Floating-Point Coprocessor (80287) 35 

10.2 Characteristics of the Heap 35 

10.3 Characteristics of Tasks 35 

10.4 Definition of a Main Subprogram 36 

10.5 Ordering of Compilation Units 36 

11 Limitations 36 

11.1 Compiler Limitations 36 

11.2 Hardware Related Limitations 36 

INDEX 37 


Alsys OS/2 Ada Compiler, Appendix F, Version 4.2 





APPENDIX F 


Implementation - Dependent Characteristics 


This appendix summarizes the implementation-dependent characteristics of the Alsys 
OS/2 Ada Compiler. This appendix is a required part of the Reference Manual for the 
Ada Programming Language (called the RM in this appendix). 

The sections of this appendix are as follows: 

1. The form, allowed places, and effect of every implementation-dependent 
pragma. 

2. The name and the type of every implementation-dependent attribute. 

3. The specification of the package SYSTEM. 

4. The list of all restrictions on representation clauses. 

5. The conventions used for any implementation-generated name denoting im¬ 
plementation-dependent components. 

6. The interpretation of expressions that appear in address clauses, including 
those for interrupts. 

7. Any restrictions on unchecked conversions. 

8. Any implementation-dependent characteristics of the input-output packages. 

9. Characteristics of numeric types. 

10. Other implementation-dependent characteristics. 

11. Compiler limitations. 

The name Alsys Runtime Executive Programs or simply Runtime Executive refers to the 
runtime library routines provided for all Ada programs. These routines implement the 
Ada heap, exceptions, tasking control, and other utility functions. 

General systems programming notes are given in another document, the Application De¬ 
veloper's Guide (for example, parameter passing conventions needed for interface with 
assembly routines). 


Appendix F, Implementation-Dependent Characteristics 


l 



1 Implementation-Dependent Pragmas 

1.1 INLINE 


Pragma INLINE is fully supported; however, it is not possible to inline INLINE a 
subprogram in a declarative part. 


1.2 INTERFACE 

Ada programs can interface with subprograms written in Assembler and other languages 
through the use of the predefined pragma INTERFACE and the implementation-defined 
pragma INTERFACE_NAME. 

Pragma INTERFACE specifies the name of an interfaced subprogram and the name of 
the programming language for which parameter passing conventions will be generated. 
Pragma INTERFACE takes the form specified in the RM: 

pragma INTERFACE (language_name, subprogram_name)\ 

where, 

■ language_name is ASSEMBLER, ADA, or C. 

a subprogram_name is the name used within the Ada program to refer to the 
interfaced subprogram. 

The only language names accepted by pragma INTERFACE are ASSEMBLER, ADA and 
C. The full implementation requirements for writing pragma INTERFACE subprograms 
are described in the Application Developer's Guide. 

The language name used in the pragma INTERFACE does not have to have any re¬ 
lationship to the language actually used to write the interfaced subprogram. It is used 
only to tell the Compiler how to generate subprogram calls; that is, what kind of 
parameter passing techniques to use. The programmer can interface Ada programs with 
subroutines written in any other (compiled) language by understanding the mechanisms 
used for parameter passing by the Alsys OS/2 Ada Compiler and the corresponding 
mechanisms of the chosen external language. 


1.3 INTERFACE_NAME 

Pragma INTERFACE_NAME associates the name of the interfaced subprogram with 
the external name of the interfaced subprogram. If pragma INTERFACE_NAME is not 
used, then the two names are assumed to be identical. This pragma takes the form: 

pragma INTERFACE_NAME (subprogram_name, string_literal)\ 


2 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 







where, 

■ subprogram_name is the name used within the Ada program to refer to the 
interfaced subprogram. 

■ string_literal is the name by which the interfaced subprogram is referred to 
at link time. 

The pragma INTERFACE_NAME is used to identify routines in other languages that 
are not named with legal Ada identifiers. Ada identifiers can only contain letters, dig¬ 
its, or underscores, whereas the OS/2 Linker allows external names to contain other 
characters, for example, the dollar sign (S) or commercial at sign (@). These characters 
can be specified in the string_literal argument of the pragma INTERFACE_NAME. 

The pragma INTERFACE_NAME is allowed at the same places of an Ada program as 
the pragma INTERFACE. (Location restrictions can be found in section 1 3.9 of the 
RM.) However, the pragma INTERFACE_NAME must always occur after the pragma 
INTERFACE declaration for the interfaced subprogram. 

The string ^literal of the pragma INTERFACE_NAME is passed through unchanged to 
the OS/2 object file. The maximum length of the string_literal is 40 characters. This 
limit is not checked by the Compiler, but the string is truncated by the Binder to meet 
the Intel object module format standard. (For example, the IBM Macro Assembler 
limits external identifiers to 31 characters.) 

The Runtime Executive contains several external identifiers. All such identifiers begin 
with either the string "ADA@” or the string "ADAS@\ Accordingly, names prefixed by 
"ADA@" or "ADAS<S>" should be avoided by the user. 

Example 

package SAMPLEJMTA is 

function SAMPLE_OEVICE <X: INTEGER) return INTEGER; 
function PROCESS_SAMPLE <X: INTEGER) return INTEGER; 
private 

pragma INTERFACE (ASSEMBLER, SAMPIE_DEVICE); 
pragma INTERFACE (ADA, PROCESS_SAMPLE); 
pragma IMTERFACE_NAME (SAMPLE_0EVICE, "0EVI0SGET_SAMPLE">; 
end SAMPIE_DATA; 


1.4 INDENT 

Pragma INDENT is only used with AdaReformat. AdaReformat is the Alsys reformatter 
which offers the functionalities of a pretty-printer in an Ada environment. 

The pragma is placed in the source file and interpreted by the Reformatter. 

pragma INDENT(OFF); 

causes AdaReformat not to modify the source lines after this pragma. 


Appendix F, Implementation-Dependent Characteristics 


J 






pragma INDENT(ON); 


causes AdaReformat to resume its action after this pragma. 


1.5 Other Pragmas 

Pragmas IMPROVE and PACK are discussed in detail in the section on representation 
clauses and records (Chapter 5). 

Pragma PRIORITY is accepted with the range of priorities running from 1 to 10 (see the 
definition of the predefined package SYSTEM in Section 3). Undefined priority (no 
pragma PRIORITY) is treated as though it were less than any defined priority value. 

In addition to pragma SUPPRESS, it is possible to suppress all checks in a given compi¬ 
lation by the use of the Compiler option CHECKS. 


2 Implementation-Dependent Attributes 

P’IS_ARRAY For a prefix P that denotes any type or subtype, this at¬ 

tribute yields the value TRUE if P in an array type or 
an array subtype; otherwise, it yields the value FALSE. 

P’RECORD_DESCRIPTOR These attributes are used to control the representa 
P’aRRAY_DESCRIPTOR tion of implicit components of a record, see section 

4.8 

3 Specification of the package SYSTEM 

The implementation dos not allow the recompilation of package SYSTEM. 


package SYSTEM is 


****•****•*••*«••*•****•«••#« 

* (1) Required Definitions. * 

..A***..#*******.********..*. 

type NAME is (I_80x86); 

SYSTEM_NAM€ : constant NAME :« I_a0xS6; 

STt»ACE_UN!T : constant :* 8; 
MEMORY_StZE : constant :» 640 • 1024; 


4 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 






-- System-Dependent Named Nuibers: 

NINJNT : constant : = -<2 **31); 

NAXJNT : constant : = 2**31 - 1; 

MAX_DIGITS : constant :* 15; 

KAX_MANTISSA : constant := 31; 

FINEJJELTA : constant :* 2#1.0#E-31; 

-- For the high-resolution timer, the clock resolution is 
-- 1.0 / 1024.0. 

TICK : constant :* 1.0 / 18.2; 

-- Other System-Dependent Declarations: 

subtype PRIORITY is INTEGER range 1 .. 10; 

-- .The type ADDRESS is, in fact, implemented as a 
-- segment:offset pair. 

type ADDRESS is private; 

NULL — ADDRESS: constant ADDRESS : = null; 


**•«•*■•***««****•******«**•***«* 

* (2) MACHINE TYPE CONVERSIONS * 


-- If the word / doi*ile-uord operations below are used on 
-- ADDRESS, then NSW yields the segment and ISU yields the 
-- offset. 

•* In the operations below, a BYTE_TYPE is any simple type 
-- implemented on S-bits (for example, SHORT_INTEGER), a WORD_TYPE is 
-- any simple type implemented on 16-bits (for example, INTEGER), and 
-- a OOUBIE_WORO_TYPE is any simple type implemented on 
-- 32-bits (for example, L0NGJNTEGER, FLOAT, ADDRESS). 

-- Byte <*»» Word conversions: 

-- Get the most significant byte: 
generic 

type BYTE_TYPE is private; * 

type U0R0_TYPE is private; 
function MSB (W: WORD_TYPE) return BYTE_TYPE; 

-- Get the least significant byte: 
generic 

type 8YTE_TYPE is private; 
type U0R0_TYP£ is private; 
function ISB (U: WORO_TYPE) return BYTE_TYPE; 


Appendix F, Implementation-Dependent Characteristics 








type BYTE_TYP£ is private; 
type UORD_TYPE is private; 

function WORD (MSB, LSB: BYTE_TYPE) return WORD_TYPE; 


-- Word <»*> Oouble*Uord conversions: 

-- Set the most significant word: 
generic 

type W0R0_TYPE is private; 
type DCUBlE_WORD_TYPE is private; 
function MSU (W: DCUBlE_UO«D_TYPE> return WORO_TYPE; 

-- Get the least significant word: 
generic 

type UORD_TYPE is private; 
type 00U8'.F_U0RD_TYPE is private; 
function LSW(U: DOU8LE_WORD_TYPE) return UORD_TYPE; 

-• Compose a DATA double word from two words, 
generic 

type WORO_TYP£ is private; 

-- The following type must be a data type 
-- (for example, LONGJNTEGER): 
type OATA_OOUBLE_UORO is private; 
function OOUBIE_UOBO (MSW, LSW: WORO_TYPE> 
return DATA_DOUBlE_UORD; 

-- Compose a REFERENCE double word from two words, 
generic 

type WORO_TYPE is private; 

-- The following type must be a reference type 
-• (for example, access or ADDRESS): 
type REF_OOU81E_UORO is private; 
function REFERENCE (SEGMENT, OFFSET: WORD_TYPE) 
return REF_DOUBIE_WORO; 


WWW************************** 

* (3) OPERATIONS ON ADDRESS * 

#*«**««M*«*««*t*4««*t«»****t 


You can get an address via 'ADDRESS attribute or by 
instantiating the function REFERENCE, above, with 
appropriate types. 

Soma addresses are used by the Compiler. For example, 
the display is located at the low end of the DS segment, 
and addresses $S:0 through SS:128 hold the task control 


6 


Alsys OS/2 Ada Compiler, Appendix F. Version 4.2 








-- block and other information. Writing into these areas 
-- will have unpredictable results. 

-- Note that no operations are defined to get the values of 
-- the segment registers, but if it is necessary an 
-- interfaced function can be written. 

generic 

type OBJECT is private; 

function FETCH_FRON_ADORESS (FROM: AOORESS) return OBJECT; 
generic 

type OBJECT is private; 

procedure AS$IGN_TO_ADORESS (OBJ: OBJECT; TO: AOORESS); 

S 

private 


end SYSTEM; 

4 Restrictions on Representation Clauses 

This section explains how objects are represented and allocated by the Alsys OS/2 Ada 
compiler and how it is possible to control this using representation clauses. 

The representation of an object is closely connected with its type. For this reason this 
section addresses successively the representation of enumeration, integer, floating point, 
fixed point, access, task, array and record types. For each class of type the 
representation of the corresponding objects is described. 

Except in the case of array and record types, the description for each class of type is 
independent of the others. To understand the representation of an array type it is 
necessary to understand first the representation of its components. The same rule applies 
to record types. 

Apart from implementation defined pragmas, Ada provides three means to control the 
size of objects: 

■ a (predefined) pragma PACK, applicable to array types 

■ a record representation clause 
* a size specification 

For each class of types the effect of a size specification is described. Interference 
between size specifications, packing and record representation clauses is described under 
array and record types. 

Representation clauses on derived record, or derived tasks are not supported. 


Appendix F, Implementation-Dependent Characteristics 


7 







Size representation clauses on types derived from private types are not supported when 
the derived type is declared outside the private part of the defining package. 


4.1 Enumeration Types 

Internal codes of enumeration literals 

When no enumeration representation clause applies to an enumeration type, the internal 
code associated with an enumeration literal is the position number of the enumeration 
literal. Then, for an enumeration type with n elements, the internal codes are the 
integers 0, 1, 2, , n-1. 

An enumeration representation clause can be provided to specify the value of each 
internal code as described in RM 13.3. The Alsys compiler fully implements enumeration 
representation clauses. 

As internal codes must be machine integers the internal codes provided by an 
enumeration representation clause must be in the range -2 31 .. 2 31 -1. 

Encoding of enumeration values 

An enumeration value is always represented by its internal code in the program 
generated by the compiler. 


Minimum size of an enumeration subtype 

The minimum size of an enumeration subtype is the minimum number of bits that is 
necessary for representing the internal codes of the subtype values in normal binary 
form. 

For a static subtype, if it has a null range its minimum size is 1. Otherwise, if m and M 
are the values of the internal codes associated with the first and last enumeration values 
of the subtype, then its minimum size L is determined as follows. For m >* 0, L is the 
smallest positive integer such that M <* 2 L -1. For m < 0, L is the smallest positive 
integer such that -2 L ' 1 <- m and M <* 2 L ' 1 -1. 

type COLOR is (GREEN, BLACK, WHITE, RED, BLUE, YELLOW); 

-- The minimum size of COLOR is 3 bits. 

subtype BLACK_AND_WHITE is COLOR range BLACK .. WHITE; 

-- The minimum size of BLACK_AND_WHITE is 2 bits. 

subtype BLACK_OR_WHITE is BLACK_AND_WHITE range X .. X; 

-- Assuming that X'is not static, the minimum size of BLACK_OR_WHITE is 
— 2 bits (the same as the minimum size of its type mark 
BLACK_AND_WHITE). 


8 


Alsys OS/2 Ada Compiler, Appendix F, Version 4.2 







Size of an enumeration subtype 

When no size specification is applied to an enumeration type or first named subtype, the 
objects of that type or first named subtype are represented as signed machine integers. 
The machine provides 8, 16 and 32 bit integers, and the compiler selects automatically 
the smallest signed machine integer which can hold each of the internal codes of the 
enumeration type (or subtype). The size of the enumeration type and of any of its 
subtypes is thus 8, 16 or 32 bits. 

When a size specification is applied to an enumeration type, this enumeration type and 
each of its subtypes has the size specified by the length clause. The same rule applies to 
a first named subtype. The size specification must of course specify a value greater than 
or equal to the minimum size of the type or subtype to which it applies: 

type EXTENDED is 

( — The usual ASCII characters. 


NUL, 

SOH, 

STX, 

ETX, 

EOT, 

ENQ, 

ACK, 

BEL, 

BS, 

HT, 

LF, 

VT, 

FF, 

CR, 

SO, 

SI, 

DLE, 

DC1, 

DC2, 

DC3, 

DC4, 

NAK, 

SYN, 

ETB, 

CAN, 

EM, 

SUB, 

ESC, 

FS, 

GS, 

RS, 

US, 

* 1 

•»» 

• * 

♦w* 

1 

’*’, 

’S’, 

’%’, 


yyy 

T,’ 


1 

V, 

y * 

» y 

y y 

y i 


’O’, 

’1\ 

’2’, 

’3’. 

’4’, 

’5’! 

’6', 

’7’, 

’8’, 

’9’, 

M 
• y 

1.1 

i y 


i_i 


• 1 


’A’, 

’B', 

’C, 

’D’, 

’E’’, 

’F, 

’G’, 

’H\ 

T, 

T, 

’K.’, 

’L’, 

’M’, 

’N’, 

’O’, 

’P\ 

’Q\ 

’R\ 

’S’, 

’T, 

’U’, 

’V’, 

’W\ 

’X’, 

’Y\ 

’Z’, 

T. 

’V. 

T. 

1 A.1 

1 

_ » 

HI 

y 

V, 

’b\ 

•c\ 

’d’, 

*e’. 

’F, 

’s’. 

’h\ 

V, 

’j\ 

’k’. 

T. 

’m’, 

’n’. 

’o’. 

’P\ 

V, 

V, 

's’. 

’t’, 

V. 

V, 

’w’, 

’x’. 

y, 

V, 

T. 

T. 

T. 

i i 

DEL, 


-- Extended characters 
LEFT_ARROW, 

RIGHT_ARROW, 

UPPERARROW, 

LOWER_ARROW, 

UPPER_LEFT_CORNER, 

UPPER_RIGHT_CORNER, 

LOWER_RIGHT_CORNER, 

LOWER_LEFT_CORNER 

); 

for EXTENDED’SIZE use 8; 

— The size of type EXTENDED will be one byte. Its objects will be represented 
-- as unsigned 8 bit integers. 

The Alsys compiler fully implements size specifications. Nevertheless, as enumeration 
values are coded using integers, the specified length cannot be greater than 32 bits. 


Appendix F. Implementation-Dependent Characteristics 


9 






Size of the objects of an enumeration subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
object of an enumeration subtype has the same size as its subtype. 


4.2 Integer Types 

Predefined integer types 

There are three predefined integer types in the Alsys implementation for 180x86 
machines: 

type SHORTJNTEGER is range -2**07 .. 2**07-1; 

type INTEGER is range -2**15 . 2** 15-1; 

type LONG_INTEGER is range -2**31 .. 2**31-1; 


Selection of the parent of an integer type 

An integer type declared by a declaration of the form: 

type T is range L .. R; 

is implicitly derived from a predefined integer type. The compiler automatically selects 
the predefined integer type whose range is the smallest that contains the values L to R 
inclusive. 


Encoding of integer values 

Binary code is used to represent integer values. Negative numbers are represented using 
two’s complement. 


Minimum size of an integer subtype 


The minimum size of an integer subtype is the minimum number of bits that is 
necessary for representing the internal codes of the subtype values in normal binary 
form. 

For a static subtype, if it has a null range its minimum size is 1. Otherwise, if m and M 
are the lower and upper bounds of the subtype, then its minimum size L is determined 
as follows. For m >* 0, L is the smallest positive integer such that M <* 2 L -I. For 
m < 0, L is the smallest positive integer that -2 L_1 <= m and M <* 2 L_1 -1. 


10 


Alsys OS/2 Ada Compiler, Appendix F, Version 4.2 




subtype S is INTEGER range 0 .. 7; 

-- The minimum size of S is 3 bits. 

subtype D is S range X .. Y; 

-- Assuming that X and Y are not static, the minimum size of 
— D is 3 bits (the same as the minium size of its type mark S). 


Size of an integer subtype 

The sizes of the predefined integer types SHORT_INTEGER, INTEGER and 
LONG_INTEGER are respectively 8, 16 and 32 bits. 

When no size specification is applied to an integer type or to its first named subtype (if 
any), its size and the size of any of its subtypes is the size of the predefined type from 
which it derives, directly or indirectly. For example: 

type S is range 80 .. 100; 

— S is derived from SHORT_INTEGER, its size is 8 bits, 
type J is range 0 .. 255; 

— J is derived from INTEGER, its size is 16 bits, 
type N is new J range 80 .. 100; 

-- N is indirectly derived from INTEGER, its size is 16 bits. 

When a size specification is applied to an integer type, this integer type and each of its 
subtypes has the size specified by the length clause. The same rule applies to a first 
named subtype. The size specification must of course specify a value greater than or 
equal to the minimum size of the type or subtype to which it applies: 

type S is range 80 .. 100; 
for S’SIZE use 32; 

— S is derived from SHORT_INTEGER, but its size is 32 bits 
-- because of the size specification. 

type J is range 0 .. 255; 
for J’SIZE use 8; 

— J is derived from INTEGER, but its size is 8 bits because 
-- of the size specification. 

type N is new J range 80 .. 100; 

-- N is indirectly derived from INTEGER, but its size is 8 bits 
-- because N inherits the size specification of J. 


Size of the objects of an integer subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
object of an integer subtype has the same size as its subtype. 


Appendix F, Implementation-Dependent Characteristics 


11 






4.3 Floating Point Types 

Predefined floating point types 

There are two predefined floating point types in the Alsys implementation for 180x86 
machines: 

type FLOAT is 

digits 6 range -(2.0 - 2.0**(-23))*2.0** 127 .. U-0 - 2.0**(-23))*2.0** 127; 
type LONG_FLOAT is 

digits 15 range -(2.0 - 2.0**(-51))*2.0**1023 .. (2.0 - 2.0**(-51))*2.0**1023; 


Selection of the parent of a floating point type ' 

A floating point type declared by a declaration of the form: 
type T is digits D [range L .. R]; 

is implicitly derived from a predefined floating point type. The compiler automi.ically 
selects the smallest predefined floating point type whose number of digits is greater than 
or equal to D and which contains the values L to R inclusive. 


Encoding of floating point values 

In the program generated by the compiler, floating point values are represented using 
the IEEE standard formats for single and double floats. 

The values of the predefined type FLOAT are represented using the single float format. 
The values of the predefined type LONG_FLOAT are represented using the double 
float format. The .alues of any other floating point type are represented in the same 
way as the values of the predefined type from which it derives, directly or indirectly. 


Minimum size of a floating point subtype 

The minimum size of a floating point subtype is 32 bits if its base type is FLOAT or a 
type derived from FLOAT; it is 64 bits if its base type is LONG_FLOAT or a f vpe 
derived from LONG FLOAT. 


Size of a floating point subtype 

The sizes of the predefined floating point types FLOAT and LONG_FLOAT are 
respectively 32 and 64 bits. 

The size of a floating poin\ type and the size of any of its subtypes is the size of the 
predefined type from which it derives directly or indirectly. 


12 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 





The only size that can be specified for a floating point type or first named subtype 
using a size specification is its usual size (32 or 64 bits). 


Size of the objects of a floating point subtype 

An object of a floating point subtype has the same size as its subtype. 

4.4 Fixed Point Types 

Small of a fixed point type 

If no specification of small applies to a fixed point type, then the value of small is 
determined by the value of delta as defined by RM 3.5.9. 

A specification of small can be used to impose a value of small. The value of small is 
required to be a power of two. 

Predefined fixed point types 

To implement fixed point types, the Alsys compiler for 180x86 machines uses a set of 
anonymous predefined types of the form: 

type SHORT_FIXED is delta D range (-2.0**07-1 )*S .. 2.0**07*S; 
for SHORT_FIXED' SMALL use S; 

type FIXED is delta D range (-2.0** 15- 1 )*S .. 2.0** 15*S; 

for FIXED'SMALL use S; 

type LONG_FIXED is delta D range (-2.0**31 -1 )*S .. 2.0**31*S; 

for LONGJFIXED' SMALL use S; 

where D is any real value and S any power of two less than or equal to D. 

Selection of the parent of a fixed point type 
A fixed point type declared by a declaration of the form: 

type T is delta D range L .. R; 

possibly with a small specification: 
for TSMALL use S; 

is implicitly derived from a predefined fixed point type. The compiler automatically 
selects the predefined fixed point type whose small and delta are the same as the small 
and delta of T and whose range is the shortest that includes the values L to R inclusive. 

Appendix F. Implementation-Dependent Characteristics 73 


Encoding of fixed point values 

In the program generated by the compiler, a safe value V of a fixed point subtype F is 
represented as the integer 

V / FBASE’SMALL 


Minimum size of a fixed point subtype 

The minimum size of a fixed point subtype is the minimum number of binary digits that 
is necessary for representing the values of the range of the subtype using the small of 
the base type. 

For a static subtype, if it has a null range its minimum size is 1. Otherwise, s and S 
being the bounds of the subtype, if i and I are the integer representations of m and M, 
the smallest and the greatest model numbers of the base type such that s < m and M < S, 
then the minimum size L is determined as follows. For i >=» 0, L is the smallest positive 
integer such that I <=* 2 L -1. For i < 0, L is the smallest positive integer such that 
-2 L ~ l <= i and I <= 2 L ' l -l. 


type F is delta 2.0 range 0.0 .. 500.0; 

— The minimum size of F is 8 bits. 

subtype S is F delta 16.0 range 0.0 .. 250.0; 

-- The minimum size of S is 7 bits. 

subtype D is S range X .. Y; 

-- Assuming that X and Y are not static, the minimum size of D is 7 bits 
-- (the same as the minimum size of its type mark S). 


Size of a fixed point subtype 

The sizes of the predefined fixed point types SHORT_FIXED , FIXED and 
LONG_FIXED are respectively 8, 16 and 32 bits. 

When no size specification is applied to a fixed point type or to its first named subtype, 
its size and the size of any of its subtypes is the size of the predefined type from which 
it derives directly or indirectly. For example: 

type S is delta 0.01 range 0.8 .. 1.0; 

-- S is derived from an 8 bit predefined fixed type, its size is 8 bits, 
type F is delta 0.01 range 0.0 .. 2.0; 

-- F is derived from a 16 bit predefined fixed type, its size is 16 bits. 

type N is new F range 0.8 .. 1.0; 

-- N is indirectly derived from a 16 bit predefined fixed type, its size is 16 bits. 


14 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 



When a size specification is applied to a fixed point type, this fixed point type and each 
of its subtypes has the size specified by the length clause. The same rule applies to a 
first named subtype. The size specification must of course specify a value greater than 
or equal to the minimum size of the type or subtype to which it applies: 

type S Is delta 0.01 range 0.8 .. 1.0; 
for S’SIZE use 32; 

— S is derived from an 8 bit predefined fixed type, but its size is 32 bits 

— because of the size specification. 

type F is delta 0.01 range 0.0 .. 2.0; 
for FSIZE use 8; 

— F is derived from a 16 bit predefined fixed type, but its size is 8 bits 

— because of the size specification. 

type N is new F range 0.8 .. 1.0; 

— N is indirectly derived from a 16 bit predefined fixed type, but its size is 

— 8 bits because N inherits the size specification of F. 

The Alsys compiler fully implements size specifications. Nevertheless, as fixed point 
objects are represented using machine integers, the specified length cannot be greater 
than 32 bits. 


Size of the objects of a fixed point subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
object of a fixed point type has the same size as its subtype. 


4.5 Access Types 
Collection Size 

As described in RM 13.2, a specification of collection size can be provided in order to 
reserve storage space for the collection of an access type. 

When no STORAGE_SIZE specification applies to an access type, no storage space is 
reserved for its collection, and the value of the attribute STORAGE_SIZE is then 0. 

STORAGE_SlZE clause on collections of unconstrained objects is not supported by the 
implementation. 

The maximum size allowed for a collection is 64\^>ytes. 


Encoding of access values. 

Access values are machine addresses. 


Appendix F. Implementation-Dependent Characteristics 


15 



Minimum size of an access subtype 

The minimum size of an access subtype is 32 bits. 


Size of an access subtype 

The size of an access subtype is 32 bits, the same as its minimum size. 

The only size that can be specified for an access type using a size specification is its 
usual size (32 bits). 


Size of an object of an access subtype 

An object of an access subtype has the same size as its subtype, thus an object of an 
access subtype is always 32 bits long. 


4.6 Task Types 

Storage for a task activation 

When no length clause is used to specify the storage space to be reserved for a task 
activation, the storage space indicated at bind time is used for this activation. 

As described in RM 13.2, a length clause can be used to specify the storage space for 
the activation of each of the tasks of a given type. In this case the value indicated at 
bind time is ignored for this task type, and the length clause is obeyed. 

It is not allowed to apply such a length clause to a derived type. The same storage space 
is reserved for the activation of a task of a derived type as for the activation of a task 
of the parent type. 


Encoding of task values 

Encoding of a task value is not described here. 

Minimum size of a task subtype 

The minimum size of a task subtype is 32 bits. 

Size of a task subtype 

The size of a task subtype is 32 bits, the same as its minimum size. 

A size specification has no effect on a task type. The only size that can be specified 
using such a length clause is its minimum size. 


16 


Alsys OS/2 Ada Compiler, Appendix F. Version 4.2 




Size of the objects of a task subtype 

An object of a task subtype has the same size as its subtype. Thus an object of a task 
subtype is always 32 bits long. 


4.7 Array Types 
Layout of an array 

Each array is allocated in a contiguous area of storage units. All the components have 
the same size. A gap may exist between two consecutive components (and after the last 
one). All the gaps have the same size. 



Component Gap Component Gap Component Gap 


Components 

If the array is not packed, the size of the components is the size of the subtype of the 
components: 

type A is array (1 ..8) of BOOLEAN; 

-- The size of the components of A is the size of the type BOOLEAN: 8 bits. 

type DECIMAL_DIGIT is range 0 .. 9; 
for DECIMAL_DIGITSIZE use 4; 
type BINARY_CODED_DECIMAL is 

array (INTEGER range <>) of DECIMAL_DIGIT; 

-- The size of the type DECIMAL_DIGIT is 4 bits. Thus in an array of 

— type BINARY_CODED_DECIMAL each component will be represented on 

— 4 bits as in the usual BCD representation. 

If the array is packed and its components are neither records nor arrays, the size of the 
components is the minimum size of the subtype of the components: 

type A is array (1 ..8) of BOOLEAN; 
pragma PACK(A); 

-- The size of the components of A is the minimum size of the type BOOLEAN: 

— I bit. 


Appendix F, Implementation-Dependent Characteristics 


17 









type DECIMAL_DIGIT is range 0 .. 9; 
for DECIMAL_DIGITSIZE use 32; 
type BINARY_CODED_DECIMAL is 

array (INTEGER range <>) of DECIMAL_DIGIT; 
pragma PACK(BINARY_CODED_DECIMAL); 

— The size of the type DECIMAL_DIGIT is 32 bits, but, as 
— BINARY_CODED_DECIMAL is packed, each component of an array of this 
— type will be represented on 4 bits as in the usual BCD representation. 

Packing the array has no effect on the size of the components when the components are 
records or arrays. 


Gaps 

If the components are records or arrays, no size specification applies to the subtype of 
the 'components and the array is not packed, then the compiler may choose a 
representation with a gap after each component; the aim of the insertion of such gaps is 
to optimize access to the array components and to their subcomponents. The size of the 
gap is chosen so that the relative displacement of consecutive components is a multiple 
of the alignment of the subtype of the components. This strategy allows each component 
and subcomponent to have an address consistent with the alignment of its subtype: 

type R is 

record 

K. : INTEGER; — INTEGER is even byte aligned. 

B : BOOLEAN; — BOOLEAN is byte aligned. 

end record; 

-- Record type R is even byte aligned. Its size is 24 bits, 
type A is array (1 .. 10) of R; 

-- A gap of one byte is inserted after each component in order to respect the 
-- alignment of type R. The size of an array of typr A will be 320 bits. 



_>:• ■ . 





K 

a 


K 

a 

»»»»¥ 

K 

_ 

3 

.. 

•«**»* 








Component Gap Component Cap Component Gap 
Array of type A: each subcomponent K has an even offset. 

If a size specification applies to the subtype of the components or if the array is packed, 
no gaps are inserted: 


18 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 









type R is 

record 

K : INTEGER; 

B : BOOLEAN; 

end record; 

type A is array (1 .. 10) of R; 
pragma PACK(A); 

— There is no gap in an array of type A because 

— A is packed. 

— The size of an object of type A will be 240 bits. 

type NR is new R; 
for NR'SIZE use 24; 

type B is array (1 .. 10) of NR; 

— There is no gap in an array of type B because 

— NR has a size specification. 

— The size of an object of type B will be 240 bits. 



-1 




K 

B 

_ 


K 

B 


X 

B 


_ 


1 



Component Component 

Array of type A or B: a subcomponent K can have an odd offset. 


Size of an array subtype 

The size of an array subtype is obtained by multiplying the number of its components 
by the sum of the size of the components and the size of the gaps (if any). If the 
subtype is unconstrained, the maximum number of components is considered. 

The size of an array subtype cannot be computed at compile time 

■ if it has non-static constraints or is an unconstrained array type with non¬ 
static index subtypes (because the number of components can then only be 
determined at run time). 

■ if the components are records or arrays and their constraints or the 
constraints of their subcomponents (if any) are not static (because the size of 
the components and the size of the gaps can then only be determined at run 
time). 

As has been indicated above, the effect of a pragma PACK on an array type is to 
suppress the gaps and to reduce the size of the components. The consequence of packing 
an array type is thus to reduce its size. 


Appendix F. Implementation-Dependent Characteristics 


19 








If the components of an array are records or arrays and their constraints or the 
constraints of their subcomponents (if any) are not static, the compiler ignores any 
pragma PACK applied to the array type but issues a warning message. Apart f rom this 
limitation, array packing is fully implemented by the Alsys compiler. 

A size specification applied to an array type or first named subtype has no effect. The 
only size that can be specified using such a length clause is its usual size. Nevertheless, 
such a length clause can be useful to verify that the layout of an array is as expected by 
the application. 


Size of the objects of an array subtype 

The size of an object of an array subtype is always equal to the size of the subtype of 
the object. 


4.8 Record Types 

Layout of a record 

I 

Each record is allocated in a contiguous area of storage units. The size of a record 
component depends on its type. Gaps may exist between some components. 

The positions and the sizes of the components of a record type object can be controlled 
using a record representation clause as described in RM 13.4. In the Alsys 
implementation for 180x86 machines there is no restriction on the position that can be 
specified for a component of a record. If a component is not a record or an array, its 
size can be any size from the minimum size to the size of its subtype. If a component is 
a record or an array, its size must be the size of its subtype: 

type INTERRUPT_MASK is array (0 .. 2) of BOOLEAN; 
pragma PACK(INTERRUPT_MA$K); 

— The size of INTERRUPT_MASK is 3 bits. 

type CONDITION_CODE is 0 .. 1; 

-- The size of lONDITICN_CouH > 8 bits, its minimum size is 1 bit. 

type STATUS_BIT is new BOOLEAN; 
for STATUS_BITSIZE use 1; 

— The size and the minimum size of STATUS BIT are 1 bit. 


20 


Alsys OS/2 Ada Compiler, Appendix F, Version 4.2 







SYSTEM : constant :» 0; 
USER : constant := 1; 


type STATUS_REGISTER is 
record 

T : STATUS_BIT; — Trace 


s 

STATUS BIT; 


— 

Supervisor 

I : 

INTERRUPT 

MASK; 

— 

Interrupt mask 

X 

CONDITION 

CODE; 

— 

Extend 

N 

CONDITION” 

CODE; 

— 

Negative 

Z 

CONDITION 

CODE; 

— 

Zero 

V 

CONDITION- 

CODE; 

— 

Overflow 

c 

CONDITION 

CODE; 

— 

Carry 

end record; 




for STATUS 

REGISTER use 




record at mod 2; 




T 

at SYSTEM 

range 0 

.. 0 


S 

at SYSTEM 

range 2 

.. 2 


I 

at SYSTEM 

range 5 

.. 7 


X 

at USER 

range 3 

.. 3 


N 

at USER 

range 4 

.. 4 


Z 

at USER 

range 5 

.. 5 


V 

at USER 

range 6 

.. 6 


c 

at USER 

range 7 

.. 7 



end record; 


A record representation clause need not specify the position and the size for every 
component. 

Pragma PACK has no effect on records. 

If no component clause applies to a component of a record, its size is the size of its 
subtype. Its position is chosen by the compiler so as to optimize access to the 
components of the record: the offset of the component is chosen as a multiple of 8 bits 
if the objects of the component subtype are usually byte aligned, but a multiple of 16 
bits if these objects are usually even byte aligned. Moreover, the compiler chooses the 
position of the component so as to reduce the number of gaps and thus the size of the 
record objects. 

Because of these optimizations, there is no connection between the order of the 
components in a record type declaration and the positions chosen by the compiler for 
the components in a record object. 


Indirect components 

If the offset of a component cannot be computed at compile time, this offset is stored in 
the record objects at run time and used to access the component. Such a component is 
said'to be indirect while other components are said to be direct: 


Appendix F, Implementation-Dependent Characteristics 


21 








Beginning of the record 
Carpile time offset 


Caipile time offset 


Run time offset 


A direct and an indirect component 


If a record component is a record or an array, the size of its subtype may be evaluated 
at run time and may even depend on the discriminants of the record. We will call these 
components dynamic components: 

type DEVICE is (SCREEN, PRINTER); 

type COLOR is (GREEN, RED, BLUE); 

type SERIES is array (POSITIVE range <>) of INTEGER; 

type GRAPH (L : NATURAL) is 

record 

X : SERIES(1 .. L); — The size of X depends on L 
Y : SERIES(1 .. L); -- The size of Y depends on L 

end record; 

Q : POSITIVE; 

type PICTURE (N : NATURAL; D : DEVICE) is 

record 

F : GRAPH(N); — The size of F depends on N 
S : GRAPH(Q); — The size of S depends on Q 
case D is 

when SCREEN »> 

C : COLOR; 
when PRINTER «> 
null; 

end case; 
end record; 


22 


Alsys OS/2 Ada Compiler, Appendix F. Version 4.2 





Any component placed after a dynamic component has an offset which cannot be 
evaluated at compile time and is thus indirect. In order to minimize the number of 
indirect components, the compiler groups the dynamic components together and places 
them at the end of the record: 


0 * SCREEN 
N * 2 


0 = PRINTER 
N > 1 


S OFFSET 


F OFFSET 




Beginning of the record 
- Compile time offsets — 


Run time offsets 




S OFFSET 


F OFFSET 


The record type PICTURE: F and S are placed at the end of the record 


Because of this approach, the only indirect components are dynamic components. But 
not all dynamic components are necessarily indirect: if there are dynamic components in 
a component list which is not followed by a variant part, then exactly one dynamic 
component of this list is a direct component because its offset can be computed at 
compilation time (the only dynamic components that are direct components are in this 
8situation): 


Appendix F, Implementation-Dependent Characteristics 


23 












l 


yliiiiiil 




X 


r 


Beginning of the record 
Compile time offset 


———— Compile time offset 
Size dependent on discriminant L 

. i —.— Bin time offset 

Size dependent on discriminant L 


The record type GRAPH: the dynamic component X is a direct component. 


The offset of an indirect component is always expressed in storage units. 

The space reserved for the offset of an indirect component must be large enough to 
store the size of any value of the record type (the maximum potential offset). The 
compiler evaluates an upper bound MS of this size and treats an offset as a component 
having an anonymous integer type whose range is 0 .. MS. 

If C is the name of an indirect component, then the offset of this component can be 
denoted in a component clause by the implementation generated name C’OFFSET. 


Implicit components 

In some circumstances, access to an object of a record type or to its components involves 
computing information which only depends on the discriminant values. To avoid useless 
recomputation the compiler stores this information in the record objects, updates it 
when the values of the discriminants are modified and uses it when the objects or its 
components are accessed. This information is stored in special components called implicit 
components. 

An implicit component may contain information which is used when the record object 
or several of its components are accessed. In this case the component will be included in 
any record object (the implicit component is considered to be declared before any 
variant part in the record type declaration). There can be two components of this kind; 
one is called RECORD_SIZE and the other VARIANT_INDEX. 

On the other hand an implicit component may be used to access a given record 
component. In that case the implicit component exists whenever the record component 
exists (the implicit component is considered to be declared at the same place as the 
record component). Components of this kind are called ARRAY_DESCRIPTORs or 
RECORD DESCRIPTORS. 


24 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 










4.8.1 RECORD SIZE 


This implicit component is created by the compiler when the record type has a variant 
part and its discriminants are defaulted. It contains the size of the storage space 
necessary to store the current value of the record object (note that the storage 
effectively allocated for the record object may be more than this). 

The value of a RECORD_SIZE component may denote a number of bits or a number of 
storage units. In general it denotes a number of storage units, but if any component 
clause specifies that a component of the record type has an offset or a size which cannot 
be expressed using storage units, then the value designates a number of bits. 

The implicit component RECORD_SIZE must be large enough to store the maximum 
size of any value of the record type. The compiler evaluates an upper bound MS of this 
size and then considers the implicit component as having an anonymous integer type 
whose range is 0 .. MS. 

If R is the name of the record type, this implicit component can be denoted in a 
component clause by the implementation generated name R’RECORD_SIZE. i 


4.8.2 VARIANTJNDEX 

This implicit component is created by the compiler when the record type has a variant 
part. It indicates the set of components that are present in a record value. It is used 
when a discriminant check is to be done. 

Component lists that do not contain a variant part are numbered. These numbers are the 
possible values of the implicit component VARIANT_INDEX. 

type VEHICLE is (AIRCRAFT, ROCKET, BOAT, CAR); 

type DESCRIPTION (KIND : VEHICLE := CAR) is 

record 

SPEED : INTEGER; 
case KIND is 

when AIRCRAFT | CAR =*> 

WHEELS : INTEGER; 
case KIND is 

when AIRCRAFT => -- 1 

WINGSPAN : INTEGER; 
when others =•> -- 2 



null; 

end case; 


when BOAT »> 

- 3 

STEAM : 

BOOLEAN; 

when ROCKET 

-> -- 4 

STAGES : 

INTEGER; 


end case; 
end record; 


Appendix F. Implementation-Dependent Characteristics 


25 






The value of the variant index indicates the set of components that are present in a 
record value: 


Variant Index 

Set 

1 

{KIND, SPEED, WHEELS, WINGSPAN) 

2 

OCINO, SPEED, WHEELS) 

3 

{KINO, SPEED, STEAM) 

4 

(KINO, SPEED, STAGES) 


A comparison between the variant index of a record value and the bounds of an interval 
is enough to check that a given component is present in the value: 


Component 

Interval 

KIND 


SPEED 

-- 

WHEELS 

1 .. 2 

WINGSPAN 

1 .. t 

STEAM 

3 .. 3 

STAGES 

4 .. 4 


The implicit component VARIANT_INDEX must be large enough to store the number 
V of component lists that don’t contain variant parts. The compiler treats this implicit 
component as having an anonymous .uteger type whose range is 1 .. V. 

If R is the name of the record type, this implicit component can be denoted in a 
component clause by the implementation generated name R’VARIANT_INDEX. 


4.8.3 ARRAYDESCRIPTOR 

An implicit component of this kind is associated by the compiler with each record 
component whose subtype is an anonymous array subtype that depends on a discriminant 
ot the record. It contains information about the component subtype. 

The structure of an implicit component of kind ARRAY_DESCR1PT0R is not 
described in this documentation. Nevertheless, if a programmer is interested in 
specifying the location of a component of this kind using a component clause, he can 
obtain the size of the component using the ASSEMBLY parameter in the COMPILE 
command. 

The compiler treats an implicit component of the kind ARRAY_DESCRIPTOR as 
having an anonymous array type. If C is the name of the record component whose 
subtype is described by the array descriptor, then this implicit component can be 
denoted in a component clause by the implementation generated name 
C’ARRAY DESCRIPTOR. 


26 


Atsys OS/2 Ada Compiler, Appendix F. Version 4.2 






4.8.4 RECORD_DESCRIPTOR 

An implicit component of this kind is associated by the compiler with each record 
component whose subtype is an anonymous record subtype that depends on a 
discriminant of the record. It contains information about the component subtype. 

The structure of an implicit component of kind RECORD_DESCRIPTOR is not 
described in this documentation. Nevertheless, if a programmer is interested in 
specifying the location of a component of this kind using a component clause, he can 
obtain the size of the component using the ASSEMBLY parameter in the COMPILE 
command. 

The compiler treats an implicit component of the kind RECORD_DESCRIPTOR as 
having an anonymous array type. If C is the name of the record component whose 
subtype is described by the record descriptor, then this implicit component can be 
denoted in a component clause by the implementation generated name 
C’RECORD DESCRIPTOR. 


Suppression of implicit components 

The Alsys implementation provides the capability of suppressing the implicit components 
RECORD__SIZE and/or VaRIANT_INDEX from a record type. This can be done using 
an implementation defined pragma called IMPROVE. The syntax of this pragma is as 
follows: 

pragma IMPROVE ( TIME | SPACE , [ON =>] simple_name ); 

The first argument specifies whether TIME or SPACE is the primary criterion for the 
choice of the representation of the record type that is denoted by the second argument. 

If TIME is specified, the compiler inserts implicit components as described above. If on 
the other hand SPACE is specified, the compiler only inserts a VARIANT_INDEX or a 
RECORD_SlZE. 

component if this component appears in a record representation clause that applies to the 
record type. A record representation clause can thus be used to keep one implicit 
component while suppressing the other. 

A pragma IMPROVE that applies to a given record type can occur anywhere that a 
representation clause is allowed for this type. 


Size of a record subtype 

Unless a component clause specifies that a component of a record type has an offset or a 
size which cannot be expressed using storage units, the size of a record subtype is 
rounded up to a whole number of storage units. 


Appendix F. Implementation-Dependent Characteristics 


27 




r 

i 


The size of a constrained record subtype is obtained by adding the sizes of its 
components and the sizes of its gaps (if any). This size is not computed at compile time 

■ when the record subtype has non-static constraints, 

■ when a component is an array or a record and its size is not computed at 
compile time. 

The size of an unconstrained record subtype is obtained by adding the sizes of the 
components and the sizes of the gaps (if any) of its largest variant. If the size of a 
component or of a g3p cannot be evaluated exactly at compile time an upper bound of 
this size is used by the compiler to compute the subtype size. 

A size specification applied to a record type or first named subtype has no effect. The 
only size that can be specified using such a length clause is its usual size. Nevertheless, 
such a length clause can be useful to verify that the layout of a record is as expected by 
the application. 


Size of an object of a record subtype 

An object of a constrained record subtype has the same size as its subtype. 

An object of an unconstrained record subtype has the same size as its subtype if this 
size is less than or equal to 8 kb. If the size of the subtype is greater than this, the 
object has the size necessary to store its current value; storage space is allocated and 
released as the discriminants of the record change. 


5 Conventions for Implementation-Generated Names 

The Alsys OS/2 Ada Compiler may add fields to record objects and have descriptors in 
memory for record or array objects. These fields are not accessible to the user through 
any implementation-generated name or attribute. 

The following predefined packages are reserved to Alsys and cannot be recompiled in 
Version 4.2: 

ALSYS_ADA_RUNT1ME 
AL$YS_BAS1C_!0 
ALSYS_BASIC_DIRECT_10 
ALSYS_8AS1C_SE0UENTIAI_I0 

6 Address Clauses 

6.1 Address Clauses for Objects 

An address clause can be used to specify an address for an object as described in RM 
13.5. When such a clause applies to an object no storage is allocated for it in the 


I 

i 

i 



28 


Alsys OS/2 Ada Compiler, Appendix F. Version 4.2 


program generated by the compiler. The program accesses the object using the address 
specified in the clause. 

An address clause is not allowed for task objects, for unconstrained records whose size is 
greater than 8 kb., or for a constant. 


6.2 Address Clauses for Program Units 

Address clauses for program units are not implemented in the current version of the 
compiler. 


6.3 Address Clauses for Entries 

Address clauses for entries are not implemented in the current version of the compiler. 


7 Restrictions on Unchecked Conversions 

Unchecked conversions are allowed between any types. It is the programmer’s re¬ 
sponsibility to determine if the desired effect is achieved. 


8 Input-Output Packages 

The RM defines the predefined input-output packages SEQUENTIAL_10, 
DlRECT_lO, and TEXT_IO, and describes how to use the facilities available within 
these packages. The RM also defines the package IO_EXCEPT!ONS, which specifies 
the exceptions that can be raised by the predefined input-output packages. 

In addition the RM outlines the package LOW_LEVEL_IO, which is concerned with 
low-level machine-dependent input-output, such as would possibly be used to write de¬ 
vice drivers or access device registers. LOW_LEVEL_IO has not been implemented. 
The use of interfaced subprograms is recommended as an alternative. 


8.1 Correspondence between External Files and OS/2 Files 

Ada input-output is defined in terms of external files. Data is read from and written to 
external files. Each external file is implemented as a standard OS/2 file, including the 
use of STANDARD_INPUT and STANDARD_OUTPUT. 

The name of an external file can be either 

a the null string 

# an OS/2 filename 

a an OS/2 special file or device name (for example, CON and PRN) 


Appendix F, Implementation-Dependent Characteristics 


29 


If the name is a null string, the associated external file is a temporary file and will cease 
to exist when the program is terminated. The file will be placed in the current dir¬ 
ectory and its name will be chosen by OS/2. 

If the name is an OS/2 filename, the filename will be interpreted according to standard 
OS/2 conventions (that is, relative to the current directory). The exception 
NAME_ERROR is raised if the name part of the filename has more than 8 characters 
or if the extension part has more than 3 characters. 

If an existing OS/2 file is specified to the CREATE procedure, the contents of the file 
will be deleted before writing to the file. 

If a non-existing directory is specified in a file path name to CREATE, the directory 
will not be created, and the exception NAME_ERROR is raised. 


8.2 Error Handling 

OS/2 errors are translated into Ada exceptions, as defined in the RM by package 
IO_EXCEPTIONS. In particular, DEVICE_ERROR is raised in cases of drive not 
ready, unknown media, disk full or hardware errors on the disk (such as read or write 
fault). 


8.3 The FORM Parameter 

The form parameter is a string, formed from a list of attributes, with attributes sep¬ 
arated by commas.- The string is not case sensitive. The attributes specify: 

■ Buffering 

BUFFER_SIZE -> size jn_bytes 

■ Appending 

APPEND =■> YES | 
a Truncation of the name by OS/2 
TRUNCATE => YES | NO 


where: 

BUFFER_SIZE: Controls the size of the internal buffer. This option is not sup¬ 
ported for DIRECT_IO. The default value is 1024. This option has no effect 
when used by TEXT_IO with an external file that is a character device, in which 
case the size of the buffer will be 0. 

APPEND: If YES output is appended to the end of the existing file. If NO ou ( - 
put overwrites the existing file. This option is not supported for DlRECT_IO. 
The default is NO. 


30 


Alsys OS/2 Ada Compiler, Appendix F. Version 4.2 


TRUNCATE: If YES the file name will be automatically truncated if it is bigger 
than 8 characters. The default value is NO, meaning that the exception 
NAME_ERROR will be raised if the name is too long. 

The exception USE_ERROR is raised if the form STRING in not correct or if a non 
supported attribute for a given package is used. 

Example: 

FORM -> "TRUNCATE -> YES. APPEND => YES. BUFFER SIZE -> 20480" 


8.4 Sequential Files 

For sequential access the file is viewed as a sequence of values that are transferred in 
the order of their appearance (as produced by the program or run-time environment). 
This is sometimes called a stream file in other operating systems. Each object in a se¬ 
quential file has the same binary representation as the Ada object in the executable pro¬ 
gram. 


8.5 Direct Files 

For direct access the file is viewed as a set of elements occupying consecutive positions 
in a linear order. The position of an element in a direct file is specified by its index, 
which is an integer of subtype POSITIVE_COUNT. 

DIRECT_IO only allows input-output for constrained types. If DIRECT_IO is in¬ 
stantiated for an unconstrained type, all calls to CREATE or OPEN will raise 
USE_ERROR. Each object in a direct file will have the same binary representation as 
the Ada object in the executable program. All elements within the file will have the 
same length. 


8.6 Text Files 

Text files are used for the input and output of information in ASCII character form. 
Each text file is a sequence of characters grouped into lines, and lines are grouped into 
a sequei 'e of pages. 

All text file column numbers, line numbers, and page numbers are values of the subtype 
POSITIVE_COUNT. 

Note that due to the definitions of line terminator, page terminator, and file terminator 
in the RM , and the method used to mark the end of file under OS/2, some ASCII files 
do not represent well-formed TEXT_IO files. 

A text file is buffered by the Runtime Executive unless 

■ it names a device (for example, CON or PRN). 


Appendix F. Implementation-Dependent Characteristics 


31 






■ it is STANDARD_INPUT or STANDARD_OUTPUT and has not been 
redirected. 

If not redirected, prompts written to STANDARD_OUTPUT with the procedure PUT 
will appear before (or when) a GET (or GET_LINE) occurs. 

The functions END_OF_PAGE and END_OF_FILE always return FALSE when the 
file is a device, which includes the use of the file CON, and STANDARD_INPUT 
when it is not redirected. Programs which would like to check for end of file when the 
file may be a device should handle the exception END_ERROR instead, as in the fol¬ 
lowing example: 


Example 

begin 

loop 

— Display the prompt 
TEXT_IO.PUT (•—> "); 

— Read the next line: 

TEXT_IO.GET_LINE (COMMAND, LAST); 

— Now do something with COMMAND (1 .. LAST) 
end loop; 
exception 

when TEXT_IO.END_ERROR => 
null; 

end; 

END_ERROR is raised for STANDARD_INPUT when A Z (ASCII.SUB) is entered at 
the keyboard. 


8.7 Access Protection of External Files 

All OS/2 access protections exist when using files under OS/2. If a file is open for read 
only access by one process it can not be opened by another process for read/write ac¬ 
cess. 


8.8 The Need to Close a File Explicitly 

The Runtime Executive will flush all buffers and close all open files when the program is 
terminated, either normally or through some exception. 

However, the RM does not define what happens when a program terminates without 
closing all the opened files. Thus a program which depends on this feature of the 
Runtime Executive might have problems when ported to another system. 


32 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 






8.9 Limitation on the procedure RESET 


An internal file opened for input cannot be RESET for output. However, an internal 
file opened for output can be RESET for input, and can subsequently be RESET back 
to output. 


8.10 Sharing of External Files and Tasking Issues 

Several internal files can be associated with the same external file only if all the internal 
files are opened with mode IN_MODE. However, if a file is opened with mode 
OUT_MODE and then changed to IN_MODE with the RESET procedure, it cannot be 
shared. 

Care should be taken when performing multiple input-output operations on an external 
file during tasking because the order of calls to the I/O primitives is unpredictable. For 
example, two strings output by TEXT_IO.PUT_LINE in two different tasks may ap¬ 
pear in the output file with interleaved characters. Synchronization of I/O in cases such 
as this is the user’s responsibility. 

The TEXT_IO files ST AND ARD_INPUT and STANDARD_OUTPUT are shared by 
all tasks of an Ada program. 

If TEXT_IO.STANDARD_INPUT is not redirected, it will not block a program on in¬ 
put. All tasks not waiting for input will continue running. 


9 Characteristics of Numeric Types 

9.1 Integer Types 

The ranges of values for integer types declared in package STANDARD are as follows: 


SHORTJNTEGER 

-128 .. 127 

-- 2**7 - 1 

INTEGER 

-32768 .. 32767 

-- 2**15 - 1 

LONGJNTEGER 

-2147483648 .. 2147483647 

-- 2**31 - 1 

For the packages DIRECT_IO and TEXT_ 
and POSITIVE_COUNT are as follows: 

_IO, the range of values for types COUNT 

COUNT 

0 .. 2147483647 

-- 2**31 - 1 

POSITIVE_C0UNT 

1 .. 2147483647 

-- 2**31 - 1 

For the package TEXT_IO, the range of values for the type FIELD is as follows: 

FIELD 

0 .. 255 

-- 2**8 - 1 


Appendix F, Implementation-Dependent Characteristics 


33 






Floating Point Type Attributes 



FLOAT 

LONG_FLOAT 

DIGITS 

6 

15 

MANTISSA 

21 

51 

EMAX 

84 

204 

EPSILON 

9.53674E-07 

8.88178E-16 

LARGE 

1.93428E+25 

2.571106+61 

SAFE_EMAX 

125 

1021 

SAFE_SMALL 

1.17549E-38 

2.22507E-308 

SAFE_LARG£ 

4.25353E+37 

2.24712E+307 

FIRST 

-3.40282E+38 

-1.79769E+308 

LAST 

3.40282E+38 

1.79769E+308 

MACHINE_RADIX 

2 

2 

MACHINE_EMAX 

128 

1024 

MACHINE_EMIN 

-125 

-1021 

MACHINE_ROONOS 

true 

true 

machine_overflows 

False 

False 

SIZE 

32 

64 

Attributes of Type DURATION 


DURATION'DELTA 

0.001 


DURATION'SMALL 

0.0009765625 (= 2**(- 

10>) 

DURATION'FIRST 

-2097152.0 


DURATION'LAST 

2097151.999 


DURATION'LARGE 

same as DURATION'LAST 



Alsys OS/2 Ada Compiler, Appendix F, Version 4.2 








10 Other Implementation-Dependent Characteristics 

10.1 Use of the Floating-Point Coprocessor (80287) 

The Alsys OS/2 Ada Compiler generates instructions to use the floating point copro¬ 
cessor for all floating point operations (but, of course, not for operations involving only 
universal _real). 

A floating point coprocessor, 80287, is required for the execution of programs that use 
arithmetic on floating point values. The coprocessor is needed if the FLOAT_IO or 
FIXED_IO packages of TEXT_IO are used. 

The Runtime Executive will detect the absence of the floating point coprocessor if it is 
required by a program and will raise NUMERIC_ERROR. 


10.2 Characteristics of the Heap 

LTNCHECKED_DEALLOCATION is implemented for all Ada access objects except 
access objects to tasks. Use of UNCHECKED_DEALLOCATION on a task object will 
lead to unpredictable results. 

All objects whose visibility is linked to a subprogram, task body, or block have their 
storage reclaimed at exit. 

The maximum size of the heap is limited only by available memory. This includes the 
amount of physical memory (RAM) and the amount of virtual memory (hard disk swap 
space). 

All objects created by allocators go into the heap. Also, portions of the Runtime Execu¬ 
tive representation of task objects, including the task stacks, are allocated in the heap. 


10.3 Characteristics of Tasks 

The default task stack size is IK bytes (32K bytes for the environment task), but by 
using the Binder option STACK.TASK the size for all task stacks in a program may be 
set to a size from IK bytes to 64K bytes. 

Normal priority rules are followed for preemption, where PRIORITY values are in the 
range 1 .. 10. A task with undefined priority (no pragma PRIORITY) is considered to 
be lower than priority 1. 

The maximum number of active tasks is restricted only by memory usage. 

The accepter of a rendezvous executes the accept body code in its own stack. Ren¬ 
dezvous with an empty accept body (for synchronization) does not cause a context 
switch. 


35 


Appendix F, Implementation-Dependent Characteristics 








The main program waits for completion of all tasks dependent upon library packages 
before terminating. 

Abnormal completion of an aborted task takes place immediately, except when the ab¬ 
normal task is the caller of an entry that is engaged in a rendezvous, or if it is in the 
process of activating some tasks. Any such task becomes abnormally completed as soon 
as the state in question is exited. 

The message 

GLOBAL BLOCKING SITUATION DETECTED 

is printed to STANDARD_OUTPUT when th ^Runtime Executivedetects that no further 
progress is possible for any task in the program. The execution of the program is then 
abandoned. 


10.4 Definition of a Main Subprogram 

A library unit can be used as a main subprogram if and only if it is a procedure that is 
not generic and that has no formal parameters. 


10.5 Ordering of Compilation Units 

The Alsys OS/2 Ada Compiler imposes no additional ordering constraints on com 
pilations beyond those required by the language. 


11 Limitations 

11.1 Compiler Limitations 

■ The maximum identifier length is 255 characters. 

■ The maximum line length is 255 characters. 

■ The maximum number of unique identifiers per compilation unit is 2500. 

11.2 Hardware Related Limitations 


■ The maximum amount of data in the heap is limited only by available mem¬ 
ory, real and virtual. 


36 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 




INDEX 


Abnormal completion 36 
Aborted task 36 
Access protection 32 
Allocators 35 
APPEND 30 

Application Developer’s Guide 2 
Array objects 28 
Array subtype 4 
Array type 4 

ASSIGN_TO_ADDRESS 7 
Attributes of type DURATION 34 

Binder 35 
BUFFER_SIZE 30 
Buffered files 31 
Buffers 

flushing 32 

Characteristics of tasks 35 
Column numbers 31 
Compiler limitations 36 

maximum identifier length 36 
maximum line length 36 
maximum number of compilation units 36 
maximum number of unique identifiers 36 
Constrained types 
I/O on 31 
Control Z 32 
COUNT 33 
CREATE 30, 31 

Device name 29 
DEVICE_ERROR 30 
DIGITS 34 
Direct files 31 
DIRECT_IO 29, 31, 33 
Disk full 30 
Drive not ready 30 
DURATION’DELTA 34 
DURATION’FIRST 34 
DURATION’LARGE 34 
DURATION’!.AST 34 
DURATION’SMALL 34 

80287 35 
EMAX 34 


Index 



INDEX 


Empty accept body 35 
END_ERROR 32 
END_OF_FILE 32 
END_OF_PAGE 32 
EPSILON 34 
Errors 

disk full 30 
drive not ready 30 
hardware 30 
unknown media 30 

S 

FETCH_FROM_ADDRESS 7 
FIELD 33 
File closing 
explicit 32 
File names 29 
File terminator 31 
FIRST 34 
FIXED_IO 35 
FLOAT_IO 35 
Floating point coprocessor 35 
Floating point operations 35 
Floating point type attributes 34 
FORM parameter 30 


2 


Alsys OS/2 Ada Compiler, Appendix F. Version 4.2 





GET 32 
GET_LINE 32 

GLOBAL BLOCKING SITUATION 
DETECTED 36 

Hardware errors 30 
Hardware limitations 

maximum data in the heap 36 
Heap 35 

I/O synchronization 33 
IBM Macro Assembler 3 
Implementation generated names 28 
IN MODE 33 
INTEGER 33 
Integer types 33 
Intel object module format 3 
INTERFACE 2, 3 
INTERFACE_NAME 2, 3 
Interfaced subprograms 29 
Interleaved characters 33 
IO_EXCEPTIONS 29, 30 

LARGE 34 
LAST 34 

Legal file names 29 
Library unit 36 
Limitations 36 
Line numbers 31 
Line terminator 31 

long_;nteger 33 

LOW_LEVEL_IO 29 

MACHINE_EMAX 34 
MACHINE_EMIN 34 
MACHINE_MANTISSA 34 
MACHINE_OVERFLOWS 34 
MACHINE__RADIX 34 
MACHINE_ROUNDS 34 
Main program 36 
Main subprogram 36 
MANTISSA 34 
Maximum data in the heap 36 
Maximum identifier length 36 
Maximum line length 36 
Maximum number of compilation units 
36 

Maximum number of unique identifiers 
36 


NAME_ERROR 30 
Non-blocking I/O 33 
Number of active tasks 35 
NUMERIC_ERROR 35 

OS/2 conventions 30 
OS/2 errors 30 
OS/2 files 29 
OS/2 special file 29 
OPEN 31 

Ordering of compilation units 36 
OS/2 Linker 3 
OUT_MODE 33 

P’IS_ARRAY 4 
Page numbers 31 
Page terminator 31 
Parameter passing 1 
POSITIVE_COUNT 31, 33 
Pragma IMPROVE 4 
Pragma INDENT 3 
Pragma INTERFACE 2, 3 
Pragma INTERFACE_NAME 2, 3 
Pragma PACK 4 
Pragma PRIORITY 4, 35 
Pragma SUPPRESS 4 
Predefined packages 28 
PRIORIT v 4, 35 
PUT 32 
PUT_LINE 33 

Record objects 28 
Rendezvous 35 
RESET 33 

Runtime Executive 1, 3, 31, 32, 35, 36 

SAFE_EMAX 34 
SAFEJLARGE 34 
SAFE_SMALL 34 
Sequential files 31 
SEQUENTIAL_IO 29 
Sharing of external files 33 
SHORT_INTEGER 33 
SIZE 34 

STANDARD_INPUT 29, 32, 33 
STANDARD_OUTPUT 29, 32, 33, 36 
Storage reclamation at exit 35 
Stream file 31 
SUPPRESS 4 
Synchronization of I/O 33 
SYSTEM 4 


Index 


3 





Task stack size 35 
Task stacks 35 
Tasking issues 33 
Tasks 

characteristics of 35 
Text file 

buffered 31 
Text files 31 
TEXT_10 29, 33 
TRUNCATE 31 

Unchecked conversions 29 
UNCHECKED_DEALLOCATION 35 
Universal_real 35 
Unknown media 30 
USE ERROR 31 


4 


Alsys OS/2 Ada Compiler. Appendix F. Version 4.2 




