AD-A260 063 



PAGE 


Form Approved 
OPM No. 0704-0183 




Pubk nponing bunton for ui» --- iglw tfino lor roi^ooilng Mrucliont. wvcMng uMng dcu touroM guhorlng ud miMwningXKjfir 

nooOM. tndrti^owInslhocolocdonolMormiUon. Sand commotM ngudkig thh butoon OKiiMua w •..! oU«r Mpoa of ihl* colocliorr of Mormiilon, including tuggoMtano lor roOucing thio burdon. to Wasbrngcn 
Hoadquinwi Sorvloo. 00 jctondo lor Monradon Ct>oradors and Rwom. 1215 Jaltaraon Davk HIghwair. Sula 1204. Artnglon, VA 22202-4302. and to tio Odica of Infonnadon and Ragulalory Allan. Ollica ol 
ManagamantandBudgal WAahinglon. DC 20603. 


1. AGENCY USE ONLY {laeve Blank) 


4. TITLE AND SUBTITLE 


2. REPORT DATE 


3. REPORT TYPE AND DATES COVERED 

Final: i8Nov92 


Validation Summary Report; Verdix Corporation, VAOS System V/386/486 
VAda-110-3232, Version 6.1, NCR model 3450 under NCR UNIX SVR4 MP-RAS 
Release 2 (Host & Target), 921004W1.11282 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS{ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-543-1092 


9. SPONSORING/MONITORING AGENCY NAME(S) AND A00RESS<ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


10. SPONSORINGA/IONITORING AGENCY 
REPORT NUMBER 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13 ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS System V/386/486 VAda-110-3232, Version 6.1, NCR model 3450 under NCR UNIX SVR4 
MP-RAS Release 2 (Host & Target), ACVC 1.11. 


S DTIC 

BLICTElj^ 
^JAN27 1993|p 


14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


NSN 7540-01-280-550 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 




19. NUMBER OF PAGES 


16. PRICE CODE 


20. UMITATION OF ABSTRACT 


Standard Form 298. (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 























AVF Control Number: AVF-VSR-543-1092 
Date VSR Cooplete: 18 November 1992 

92-06-23-VFX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 921004W1.11282 
Verdix Corporation 

VADS System V/386/486 VAda-110-3232, Version 6.1 
NCR model 3450 under NCR UNIX SVR4 MP-RAS Release 2 


(FINAL) 


Prepared By: 

Ada_Validation_Faci1ity 
645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 









Certificate infonoation 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was completed on 4 October 1992. 


Conpiler Name and Version: 
Host Computer System: 
Target Ccm^ter System: 
Customer Agreement Number: 


VADS System V/386/486 
VAda-110-3232, Version 6.1 

NCR model 3450 

under NCR UNIX SVR4 MP-RAS Release 2 
NCR model 3450 

under NCR UNIX SVR4 MP-RAS Release 2 
92-06-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

921004W1.11282 is awarded to Verdix Corporation. This certificate expires 

two years after the ANSI adoption of ANSI/^IL-STD-ISISB. 

This report has been reviewed and is approved. 



invalidation Facility 
Steven P. Wilson 
Technical Director 


645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-6503 



_ 

Dire^ton,ycpap)uter and Software Engineering Division 
Institute tor Defense Analyses 
Alexandria VA 22311 


DTIC QUALiTV ii\;G?£Cii3D 8 



Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


ioeesalon for 

iris QRAjbi 

DTIC TAB □ 

Unanoonnoed Q 

Justlflaatlft n 


»jr—— - 

Dlat rjbu tlon/ _ 

Ava ilability Ca4at 

r Vail aad/er 
8Da«l«I 


mat 







DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 


Customer: Verdix Corporation 

Certificate Awardee: Verdix Corporation 

Ada Validation Facility: ASC/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Name and Version: VADS System V/386/486 

VAda-110-3232, Version 6.1 

Host Computer System: NCR model 3450 

under NCR UNIX SVR4 MP-RAS, Release 2 

Target Computer System: NCR model 3450 

under NCR UNIX SVR4 MP-RAS, Release 2 


Customer's De^ aration: 

[I/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 




// //?- A t. 

Date 




1ABLE OF CXXnTNTS 


CHAPTER 1 INTRCSUCTIGN 

1.1 USE OF THIS VALIDATION SimMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPEISJENOIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST Ma)IFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATICN SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















CHAPTER 1 


INTROWCnGN 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC user's Guide (UG89]. 


1.1 USE OF IHIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation a^ply 
only to the conputers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and ccmplete, or that the sxibject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public fram the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 





INTRODUCTION 


1.2 REFERENCES 

[Acla83] Reference Manual for the Ada Progranminq Language, 

ANSI/HIL-STD-l8l^, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

(UG89] Ada Compiler Validation Capability User*s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Con^liance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ai^ Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In sane tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTBCfflUCTlON 


For each Ada inpleroentation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer syitem to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide end the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host conpiter system and its 

Implementation target conpiter system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body ’i^iich carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVD) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A f\inctional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 







INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Conpater 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Con^iler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with eui AVF which specifies the terms and 
conditions for AVF services (of zutiy kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives fo\jnd to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs euid that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

Hie process of checking the conformity of an Ada compiler to 
the Ada programmiing language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BO1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives v^ich are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be su{^rted by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be ine^licable for 
the reasons indicated; references to Ada Cooinentaries are included as 
appropriate. 


2-1 





IHPLEHENTft.TION DEPENDEICIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


■rtie following 20 tests check for the predefined type li0NG_INTEX3EK; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LC»JG_FLQAT; for this inplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCM3_FLQAT, or SHORT_FLClAT; for this 
implementation, there is no such type. 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAXJIANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A. .B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLOWS is FALSE for floating point types euxl the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, nACHINE_OVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATICX^'s base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 





INPLENEZnATION DEPEI^EMCIES 


Q}2A84A, CD2A84E, a32A84l..J (2 tests), 2 uid CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The tests listed in the following table check that USE_EElROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_I0 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT^ERROR when the value of the 
page number exceeds COUNT'LAST; for this Tmplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective iitpractical. 


2-3 









IMPLEMEtnATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A 

B38009B B85008G B85008H BC1303F BC3005B 

BD2B03A BD2D03A BD4003A 


A35801E was graded inapplicable by Evalxiation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FUDAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, Cn2A3lA..C (3 tests) were graded 
passed ^ Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, vhich uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: "" 

•' * CHECK ON REPRESENTATION FOR <TTPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. 

This test checlcs that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This inf)lementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36 euid 40; the modified test was passed. 


2-4 







CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada inplementation, contact: 

Sam Quiring 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada inplementation was conducted at the customer's site by 
a vali^tion team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the custcxnized test suite in accordance with the Ada Programming 
Language Standard, whether the test is a^^licable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 







PROCESSING INFORMATION 


a) Total Number of A{^licable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(C4d+e) 

4170 

(a+bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host ccmputer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were; 


Option/Switch Effect 


-w 


suppress generation of warning messages 


Test output, ccxnpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 





APPENDIX A 


MACRO PARAMETERS 


Itiis appendix contains the macro parameters used for customizing the ACVC. 
Ihe meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_L£14—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 


499 — Value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A ') & '3' & 
(1..V-1-V/2 -> 'A') 


$BIG_ID4 

$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1' & 

(1..V-20 ) 


$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 


$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 











MACRO PARAMETE31S 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following tadale lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

I386_SYSTEM_V 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM. •’+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM."+"(161100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

9 9 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLQAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

tiff 

$FORM_STRING2 

"a\M40T_RESTRICT_FILE_CAPACITY" 

$Ca^TER THAN DURATION 

100_000.00 


$greater than duration base last 

T0_00lff_000 

$GREATER THAN FLQAT_BASE LAST 

1.9E-t-308 

$GREATER_'IHAN FLQAT_SAFE LARGE 

5.UE307 


A-2 






MACRO PARAMETERS 


$GREATER_TOAN_SHORT_FLOAT SAFE LARGE 

9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

■Villegal/file_naine/2{ ]$%FILEl.nAT" 

$ILLEGAL_EXTERNAL_FILE NAME2 

■Villegal/file_rMune/2{ 1$%FILE2.DAT" 

$INAPPROPRIATE_LlNE_LEJIGra 

-1 

$INAPPROPRIATE_PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

§INCLUDE_PRAGMA2 PRAGMA IITCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147 483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$interfac:e_language c 

$LESS_THAN_DURATION -100_000.0 

$LESS_’IHAN_DURATION_BASE FIRST 

- 1 ^_ 000 _ 000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

OODE_0'(OP -> NOP); 

$MACHINE_C(X)E_TYPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

$NAME 


TINY INTEGER 





MACRO PARAMETERS 


$NAME_LIST 

I386_SYSTEM_V 

$name_specipic:ationi 

/Vasr/vc/acvc/c/e/X2120A 

$NAME_SPECIFICAT10N2 

/us r/vc/acvc/c/e/3C2120B 

$NAME_SPEC1PICATIGN3 

/usrAc/acvc/c/e/X3119A 

$NEG_aASED_INT 

16#F000000E# 

$NEW_MEM_SIZE 

16_777_216 

$NEW_STC»_UNIT 

8 

$NEW_SYS_NAME 

I386_SYSTEM_V 

$PAGE_TERMINATOR 

ASCII.LF & ASCII.FF 

$RECORD_DEPINITION 

RECORD SUBP: OPERAND; 1 

$RECORD_NAME 

C(»E_0 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

1024 

$TICK 

0.01 

$VARIABLE_AE»RESS 

VAB_1'ADDRESS 

SVAR1ABLE_ADDRESS1 

VAR_2'AK>RESS 

$VARIABLE_ACE)RESS2 

VAR_3'AM)RESS 

$yOUR PRAGMA 

PRAGMA PASSIVE 


A-4 






APPB4DIX B 


OOHPIIATIQN SYSTTM OPTIONS 


The ccRnpiler options of this Ada implementation, as described in this 
Af^ndix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation emd 
not to this report. 


ada - invoke the Ada compiler 
SYNTAX 

ada [cations] (source_file]... (object_file.o]... 

DESCRIPTION 

The command ada executes the Ada conpiler and compiles the 
named Ada source file, eixling with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

By default, ada produces only object and net files. If the 
-n option is used, the compiler automatically invokes a.Id 
and builds a complete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada command in any 
VADS location/bin on a system will execute the correct 
compiler compcxients based \jpon visible library directives. 


B-1 






CX)MPILATION SYSTEM OPTIONS 


the option -sh is provided to print the name of ttw 
coofXKients actually executed. 

Program listings with a disassen^ly of machine code 
instructions are generated by a.db or a.das. 

OPTIONS 

-# identifier type value (define) Define an identifier of a 
specified type and value. See VADS ADA PREPROCESSOR REETMENCE. 

-A (disassemble) disassemble the units in the source file after compiling 
them. -A can be followed by arguments that further define the 
disassembly display (e.g. -Aa, -Ab, -Ad, -Af, -Al, -As): 

a add hexadecimal display of instruction bytes to disassembly 
listing 

b disassemble the xmit body [default] 
d print the data section (if present) as well 
f use the alternative format for output 

1 put the disassendsly output in file "file_name.das'* 

s disassemble the unit spec 

-a file_name (archive) Treat file_naffle as an object 
archive file created by ar. Since seme archive files end 
with .a, -a is used to distinguish archive files from Ada 
source files. 

-DG (debug flag) Force frong end to write out the gnrx.lib 
file in ASCII format. To use this option, you must 
conpile a file that changes the gnrx.lib file. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
mar)(ing any defined units as uncempiled. The -d cation is 
used by a.make to establish dependencies among new files. 

-e (error) Process compilation error messages iising a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. The file of raw error messages can 
be used as input to a.error 

-el (error listing) Intersperse error messages among source 


B-2 






CXWILATION SYSTEM OPTIONS 


lines and direct to standard output. 


-El 

-El file 

-El directory (error listing) Sane as the -E option, except 
that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, endsed them in the source file, and call the 
environment editor EBRC^_ED1T0R. (If EBPOR_EDITC^ is 
defined, the environ ment variable ERPOR_PATTERN should also 
be defined. EE<R^_PA'1TKKN is an editor search command that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, vi(l) is invoked. 

-K (keep) Keep the intermediate language (IL) file 
produced by the compiler front end. The IL file will be 
placed in the .objects directory, with the file name 
Ada_source.i 

-L library_name (library) Operate in VADS library 
library_name [Default: current working directory] 

-lfile_ad:4)reviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file abbreviations, see also 
Operating system documentation, ld(l). 

-M unit_naroe (main) Produce an executable program by 
linking~~the named unit as the main program. unit_name must 
already be compiled. It must be either a parameterless 
procedure or a parameterless fxmction returning an integer. 

The executedsle program will be named a.out xinless overridden 
with the -o option. 

-N source_file (main) Produce an executed>le program by 
compiling and linking source_file. The main unit of the 
program is assumed to be the root name of the .a file (for 
foo.a the unit is foo). Only one .a file may be preced^ by 
-M. The executable program will be named a.out (self-hosted) or 
a.vox (cross-development) unless overridden with the -o option. 

-o executable file (output) This option is to be used in 
conjunction with the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-0(0-9] (optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 

-0 full qptimization 


B-3 







CXMPILATION SYSTEM OPTIONS 


-OO prevents optimization 
-01 no hoisting 

-02 no hoisting but more passes 
-03 no hoisting but even more passes 
-04 hoisting from loops 

-05 hoisting frcmn loops but more passes (and instruction 
scheduling, if available) 

-06 hoisting from loops with maximum passes (emd instruction 
scheduling, if available) 

-07 hoisting frcan loops and branches (and instruction) 
scheduling, if available) 

-08 hoisting from loops and branches, more passes (and 
instruction scheduling, if available) 

-09 hoisting frcmi loops and branches, maximum passes (and 
instruction scheduling, if available) 

Hoisting frcrni branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

For more information about optimization, see COMPILING 
PROGRAMS, Compiler Optimizations. See also pragma 
0PTIM1ZE_CC»E(0FF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR 
REFERENCE. 

-R VADS_library (reconcile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) i^ly pragma SUPPRESS to the entire 
compilation for all suppressible checks. (See also pragma 
SUPPRESS (ALL_CHECKS). 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print canpiler version nundber, date and time 
of conpilation, name of file compiled, command ii^t line, 
total compilation time, and error sxsnroary line. Storage 
usage information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DIAGNC^TICS 

The diagnostics produced by the VADS ccmpiler are intended 
to be self-explanatory. Most refer to the RH. Each RM 
reference inclixles a section number and optionally, a paragraj^ 
number enclosed in parentheses. 





COMPILATIOJ SYSTEM 0PTIC3NS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Ikiless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


a.Id - prelinker 
SYNTAX 

a.Id (options] unitname [ld_optionsl 
OPTIOIS 

-DX (debug) Debug memory overflow (use in cases where 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elaborate unit_n 2 une as early in 
the elciEoration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tHe output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker comnuuid before executing it. 

-V (verify) Print the linker connand Imt suppress 
execution. 

DESCRIPTION 

a.Id collects the object files needed to make unit_name a main 
program and calls the UNIX linker ld(l) to link together all Ada 
and other language objects required to produce an executable image 
in a.out (self-hosted) or a.vox (cross- development). unit_naine is 
the main program and must name a non-generic sutprogram. If unit_name 
is a function, it must return a value of the type STANDARD.INTEGER. 


B-5 





COMPILATION SYSTEM OPTIOIS 


This integer result will be passed back to the UNIX shell as the status 
code of the execution. The utility uses the net files produced by the Ada 
compiler to check dependency information, a.Id produces an exception 
mapping tc±>le and a unit eleUxjration table and passes this information 
to the linker. The eleiboration list generated by a.Id does not include 
library level packages that do not need elaboration. In addition, 
packages that contain no code that can raise an exception will no longer 
have exception teddies. 

a.Id reads instructions for generating executadjles from the ada.lib file 
in the VADS libraries on the search list. Besides information generated 
by the compiler, these directives also include WITHn directives that 
allow the automatic linking of object modules compiled frtxn other 
languages or Ada object modules not named in context clauses in the Ada 
source. Any number of WITHn directives may be placed into a library, but 
they must be numbered contiguously beginning at WITHl. The directives 
are recorded in the library's ada.lib file emd have the following form. 

WITHl:LINK:object_file: 

WITH2:LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or in any 
VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the library 
search list will hide the same numbered WITHn directive in a library 
later in the library search list. 

Use the tool a.info to change or report library directives in the 
current library. 

All arguments after unit_ncime are passed on to the linker. These may 
be options for it, archive libraries, library eibbreviations, or 
object files. 

VADS_location/bin/a.Id is a wrapper program that executes the correct 
executable based upon directives visible in the ada.lib file. This 
permits multiple VADS conpilers to exist on the same host. The -sh 
option prints the name of the actual executable file. 

FILES AND DIRECTORIES 

a.out/a.vox default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup euid steindard library routines 

DIAOWSTICS 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the UNIX linker Id. 


B-6 







APPEM}IX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to conpiler documentation zuxl not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486231E+308..1.79769313486231E+308; 
type SHORT_FLQAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 

type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 








APPENDIX F OF IHE Ada STANDARD 


APPENDIX F. Inplementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. lNLINE_ONLy Pragma 

The INLINEjONLY pragma, v^en used in the same way as pragma 
INLINE, indicates to the conpiler that the subprogram must 
always be inlined. Diis pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjOMLY sul^ro- 
gram recursive a warning message will be emitted euid an 
PROGRAM_ERROR will be raised at nan time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to inclement code bodies for which no actooal Ada 
body can be provided, for exanple the NACHINE_CCX)E package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent con^ailation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instemtiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a vanique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple¬ 
mentation and has the same effect as 5HARE_CCX)E. It is 
included for compatability with earlier versions of VADS. 


C-2 





APPENDIX F OF THE Ada STANDARD 


1.4. NO_lMAGE Pragma 

The pragma su^resses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMACS attribute on a 
type whose image array has been suppressed will result in a 
conpilation warning and PROGRAN_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a sut^rogram or 
variedsle defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to am object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACEJMAME pragma takes the name of a a variable or 
subprogram defined in amother language and allows it to be 
referenced directly in Ada. Ihe pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_arg\jment. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CX»E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.8. 0PTIM1ZE_CC»E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim- 


C-3 



APPEM>IX F OF THE Ada STANDARD 


ized by the compiler. The default is ON. vBien OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in Af^ndix B of the 
Ada RN. 


2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either fvinctions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type AIXiRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RN. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The inqple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccxnpiled. 

2.7. NON_REENTRANT 

This pragma takes one argument vhich can be the name of 
either a library subprogram or a sxibprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the conpiler that the subprogram will not be called 
recursively allowing the ccnqpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded sul^rograsm within a package spec or pack¬ 
age body. 

2.8. NOT ELABORATED 


C-4 







APPENDIX F OF THE Ada STANDARD 


This pragma can only a^^ar in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of eledsoration code aund issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inpleroentation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for coiqxssite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is in^lemented as described in Af^ndix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared imro^iately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is inf>lemented as described in Appendix B of the 
Ada RM. 


2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 


2.15. STORAGE UNIT 


C-5 










APPENDIX F OF THE Ada STANDARD 


Ttiis pragma is recognized by the inplementation. The inf>le- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recoipiled. 

2.16. SUPPRESS 

This pragma is inqplemented as described, except that 
DIVISION CHECK and in some cases GVERFLONjCHECK cannot be 
supressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the iiqplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccmopiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a progreun unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a suli^rogram, pack¬ 
age, task mit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for v^ich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CCX)E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


— Copyright 1992 Verdix Corporation 
with 'JNSIGNED TYPES; 


C-6 






APPEl^IX F OF THE Ada STANCABD 


package SYSTEM is 


pragma SUPPRESS(ALL_CHECKS); 
pragma SUPPRESS(EXCEPTION_TABLES); 
pragma NOT_ELABORATED; 

type NAME is ( i386_System_V ); 

SYSTEMJNAME ; constant NAME i386_System_V; 

STORAGEJUNIT : constant 8; 

MEMORy_SIZE ; constant 16_777_216; 

— System-Dependent Named Numbers 

MIN_1NT : constant -2 147 483 648; 

MAX_INT : constant 2 T47_783_?47; 

MAX_DIGITS : constant 

MAX_MANTISSA : constant 31; 

FINE_DELTA ; constant 2.0**(-31); 

TICK : constant 0.01; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE ; integer 64*1024; 
type ADDRESS is private; 


function ">" 
function "<" 
function ">■ 
function "<- 
function 
function "+" 
function 


(A: AI»RESS 
(A: ADDRESS 
(A: AIE)RESS 
(A: ADDRESS 
(A: AESRESS 
(A: AIX)RESS 
(A: AIX)RESS 


B: AIX}RESS) 
B: ADDRESS) 
B: A[X}RESS) 
B: NODVESS) 
B: MXSBESS) 
I: INTE(^) 
I: INTEGER) 


return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return INTEGER; 
return ADDRESS; 
return ADDRESS; 


function "•••" (I: UNSIGNED TYPES.UNSIGNED INTEGER) return AIX^ESS; 


function HE310RY_ADDRESS 

(I: UNSIGNED TYPES.UNSIGNED INTECXR) return AIXSRESS renames 


NO_AIX>R : constant A[K7RESS; 

type TASK_ID is private; 

NO_TASK_ID ; constant TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG STATUS SIZE: constant :• 4; 


type PROGRAM_ID is private; 








APPENDIX F OF THE Ada STANDARD 


NO_PROGRAM_ID ; constant PROGRAM_ID; 
type LONG_AIX)RESS is private; 

NO_LQNG_AIX)R : constant LQNG_ADDRESS; 

faction (A: LONG_AIX)RESS; I: INTBCSEK) return LC»IG_AIX>RESS; 

function (A: LONG_ADDRESS; I: INTEGER) return LONG_AI»RESS; 

function NAKE_LONG_ADDRESS (A: i^RESS) return LCNG_ADI»tESS; 

function LOCALIZE(A: LQNG_ADDRESS ; BYTE_SIZE : INTEGER) return ADDRESS 

function STATION OF(A: LONG AIX)RESS) return INTEGER; 


private 


type AIX)RESS is new UNSIGNED_TyPES.UNSIGNED_INTEGER; 

NO_ADDR : constant A1X)RESS 0; 

pragma BUILT_IN( ">") ; 
pragma BUILT_IN("<"); 
pragma BUILT_IN(">-"); 
pragma BUILT_IN("<-"); 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
N0_TASK_ID : constant TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIGNEp_INTEGER; 
NO PROGRAM ID : constant PROGRAM ID :« 0; 


type LONG_AE»RESS is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO LONG AIX>R : constant LONG ADDRESS :> 0; 


pragma BUILT_IN(MAKE_LONG_ADDRESS); 
pragma BUILT_IN( LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 


5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

In the absence of pragma PACK record con^nents are padded 
so as to provide for efficient access by the target 


C-8 






APPEI^IX F OF THE Ada STANDARD 


hardware, pragma PACK a^iplied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of coiif»nents; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of coofxjnents only vdien the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables vdiich have address 
clauses. The specified address indicates the f^ysical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package NACHINE_OODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definiticms, and a set of addressing mode 
functions. 


C-9 




APPENDIX F OF THE Ada STANDARD 


The general syntax of a machine code statement is as fol¬ 
lows: 


C(X>E_n'( opcode, operand (, operand) ); 

where n indicates the mimber of operzmds in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. Ibe format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op -> opcode ); 

Ihe opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operemd can only be an entity defined in MACHINE_CXX>E or 
the 'REF attribute. 

The arguments to 2 uiy of the functions defined in 
MACHINE_CCX)E must be static expressions, string literals, or 
the functions defined in MACHINE_C(®E. The 'REF attribute 
may not be used as an argument in any of these factions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 


None. 


10. Implementation Characteristics of IA> Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STCX<AGE_UNITS) v^n the size 


C-10 





APPE24DIX F OF THE Ada STANDAPD 


of ELEMEWr_TyPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENTJTYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECX)HD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_I0 to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERR0R 
if NAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SBQUENriAL_IO use the value NAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) \^en the 
size of ELEMENr_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENTJTYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
NAX_RECORD SIZE is define? in SYSTEM and can be changed by a 
program beTore instantiating INTBGER_IO to provide an rqjper 
limit on the record size. SBQUENTIAL_IO inposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following limits are actxially enforced 1:^ the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STCXUtfiiEJUNiTS. The maximum size of a statically 
sized record type is 4,000,000 x STORACSEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORA(a:_SlZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit S'POTAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared (X}jects 


C-11 





APPEM)IX F OF THE Ada STANEABD 


There is an edssolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a conpilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 





