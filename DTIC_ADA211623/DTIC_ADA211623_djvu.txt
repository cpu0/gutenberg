ins Fit e o&py 


AD-A211 623 


O*'* f nte’etf « " 

fAT ION PAGE 

|2. SD*1 AiClSSlDn HZ i • 


4. TIKI (» neivtt ’ Vt : 

Adi Compiler Validation Summary Report: verdix 
Corporation, VADS VAX UNIX, Version 5.5, DEC VAX 11/750 
(Host & Target), 890610W1.10093 


I. AU1 mom; 

Wr igTIfi-Patter son AFB 
Dayton, OH, USA 


t. riMfOMMihc ORi*K:2*i]OK ako addmss 

Wright-Patterson AFB 
Dayton, OK, USA 


n. coa'ao.um; o'ucc m«' ah: addkss 
Ada Joint Program Office 
United States Department of Defense 
Washington, DC 2u301~3081 


14 . HC’*«nOKlAi Ajm;t fcAMi & h.DZ^liU lf difttrtnttrom Controlling OHiCt) 

Wright-Patterson AFB 
Dayton, OH, USA 


ie. DlSIRjE.'UOl S1AUMLM (ofthuHtpo'V 


i ivn o ( a f;c: co^‘4.': 

10 Junt 1 8 ‘-f ti lCi Juni 1990 

1 n atom:**.* 


t coa’aa:i o» aj- 


ic a ado** Uji 

AAl A a «rp*<k lim * 


12. AIPOs: Da ■ t 


16. C.ASS (c 1 t'lfi ftps”,/ 

UNCLASSIFIED 


isa Pi:i»*';uca , :]ok 

ai L i/wi t 

K/A 


Approved for public release; distribution unlimited. 


1?. CJS‘a;EvI0n S ~ £ •'i s t (c 4 thy tbrrtrt ente resmB set 2C ti o nt'tr,: Upm n t 

UNCLASSIFIED 




IE . Ilf *$•*$$ (Conjuve on it vt 'it t>0( il ntctu*') tno ide nhty by fc'oi* number) 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/K1L-STD- 
161SA, Ada Joint Program Office, AJPO 


20. AE $1**11 (Continue On re*e'te tide if ntctltt'y tno identity by blotk number) 

Verdix Corporation, VADS VAX UNIX, Version 5.5, Wright-Patterson AFB, DEC VAX 11/750 
under UNIX, 4.3 BSD (Host & Target), ACVC 1.10. 


V ■ 

dy; - 


1473 tamo*. o* > no* e$ ]$ oeso.iu 

Ti $/* 0102*1?*014-6601 


UNCLASSIFIED _ 

SICU»1K Cl A$si I K AT 10*1 01 TmJS EAil (*ntr,b* 1 * Inttred; 





















AVF Control Number: AVF-VSR-280.0789 

89-03-24-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 890610W1.10093 
Verdix Corporation 
VADS VAX UNIX, Version 5.5 
DEC VAX 11/750 


Completion of On-Site Testing: 
10 June 89 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 






















TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 AC VC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.2-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 























CHAPTER 1 


INTRODUCTION 


X g 

This Validation Summary Report tVSRl^ describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of —testing this compiler using the Ada Compiler 
Validation Capability /tACVC^.s>_' An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 


The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 



1-1 










INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing vas carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 10 June 89 at Aloha OR. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


1-2 











INTRODUCTION 


Questions regarding this report or the validation teet results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 198?. 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada 

Commentary 


An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 


AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 








INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for vhich the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on vhich the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for vhich a compiler generates the expected 
result. 

Target The computer for vhich a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, vhich may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to vhich it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the vay in vhich a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs vith 
certain language constructs vhich cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved vords of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved vords by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


Withdravn 

test 


1-4 











INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations ir separate 


1-5 













INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 









CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: VADS VAX UNIX, Version 5.5 
ACVC Version: 1.10 
Certificate Number: 890610V1.10093 
Host Computer: 

Machine: DEC VAX 11/750 

Operating System: UNIX 

4.3 BSD 

Memory Size: 5 MB 

Target Computer: 

Machine: DEC VAX 11/750 

Operating System: UNIX 

4.3 BSD 


Memory Size: 


5 MB 










CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(<,) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
TINY INTEGER, SHORT_INTEGER, and SHORT_FLOAT in package 
STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 


2-2 









CONFIGURATION INFORMATION 


uses all extra bits for extra range. (See test C35903A.) 

(4) Sometimes CONSTRAINT_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) Sometimes i'UMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base rype. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round to even. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINTERROR for an array having a 'LENGTH that exceeds 

STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.) 

(2j NUMERIC_ERROK is raised when 'LENGTH is applied to a null 

array type with INTEG/R'LAST + 2 components. (See test 

C36202A.) 

\i) NUMERIC ERROR is raised when 'LENGTH is applied to a null 

array type with SYSTEM.I AX INT + 2 components. (See test 

C36202B.) 


2-3 






CONFIGURATION INFORMATION 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUM£RIC_ERROR when the array type is declared. (See 
test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERROR when the array 
type is declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked for identical 
bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


2-4 













CONFIGURATION INFORMATION 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B, EA3004C..D, and CA3004E..F.) 


i. Generics 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL_IO can be instantiated with 
unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and OUT_FILE are supported for SEQUENTIALIO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN_FILE, OUT_FILE, and INOUT_FILE are supported for 
DIRECT_IO. (See tests CE2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) Modes IN_FILE and OUT_FILE are supported for text files. (See 
tests CE3102E and CE3102I..K.) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_IO. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

(9) Overwriting to a sequential file truncates to the last element 
written. (See test CE2208B.) 

(10) Temporary sequential files are given names and deleted when 
closed. (See test CE2108A.) 


2-5 












CONFIGURATION INFORMATION 


(11) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and deleted when closed. 
(See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files when writing or reading. 
(See tests CE2107A..E, CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file can be associated with each 

external file for direct files when writing or reading. (See 
tests CE2107F..H (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated with each 

external file for text files when reading or writing. (See 
tests CE3111A..E, CE3114B, and CE3115A.) 


2-6 










CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 335 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 285 
executable tests that use floating-point precision exceeding that supported 
by the implementation. Modifications to the code, processing, or grading 
for 10 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 


Passed 

Inapplicable 

Withdrawn 

TOTAL 


TEST CLASS 

A B C D E 

129 1132 1908 17 28 

0 6 407 0 0 

1 2 35 0 6 

130 1140 2350 17 34 


TOTAL 
L__ 

46 3260 

0 413 

0 44 

46 3717 


3-1 












TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

192 

547 

497 

245 

172 

99 

161 

331 

137 

36 

252 

292 

299 

2260 

Inappl 

20 

102 

183 

3 

0 

0 

5 

1 

0 

0 

0 

77 

22 

413 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests were withdrawn from ACVC Version 1.10 at the time of 
this validation: 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CE3301A 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 335 tests were inapplicable for the 
reasons indicated: 


a. The following 285 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113F..Y C35705F..Y 
C35708F..Y C35802F..Z 
C45421F..Y C45521F..Z 


C35706F..Y 
C45241F..Y 
C45524F..Z 


C35707F..Y 
C45321F..Y 
C45621F..Z 


3-2 










TEST INFORMATION 


C45641F.. Y C46012F..Z 

b. C35702B and B86001U are not applicable because this implementation 
supports no predefined type LONG_FLOAT. 

c. The following 16 tests are not applicable because this 
implementation does not support a predefined type LONG_INTEGER: 

C45231C C45304C C45502C C45503C C45504C 

C45504F C45611C C45613C C45614C C45631C 

C45632C B52004D C55B07A B55B09C B86001V 

CD7101F 

d. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 47. 

e. C86001F is not applicable because, for this implementation, the 

package TEXT 10 is dependent upon package SYSTEM. These tests 

recompile package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. 

f. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

g. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONGFLOAT, or SH0RT_FL0AT. 

h. C96005B is not applicable because there are no values of type 

DURATION'BASE that are outside the range of DURATION. 

i. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types. 

j. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, which imply 
compression, with component types of composite*or floating point 
types. This implementation requires an explicit size clause on 
the component type. 

k. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types. 

l. CD2A91A..E (5 tests), CD5012J, CD5013S, and CD5014S are not 

applicable because this implementation does not support size 
clauses for tasks or task types. 

m. The following 42 tests are not applicable because this 
implementation does not support an address clause when a dynamic 
address is applied to a variable requiring initialization: 


3-3 








TEST INFORMATION 


CD5003B..H CD5011A..H CD5011L..N CD5011Q 

CD5011R CD5012A..I CD5012L CD5013B 

CD5013D CD5013F CD5013H CD5013L 

CD5013N CD5013R CD5014T..X 

n. CE2102D is inapplicable because this implementation supports 

CREATE vith IN_FILE mode for SEQUENTIAL JC. 

o. CE2102E is inapplicable because this implementation supports 

CREATE vith 0UT_FIL£ mode for SEQUENTIAL_IO. 

p. CE2102F is inapplicable because this implementation supports 

CREATE vith INOUTJILE mode for DIRECT_IO. 

q. CE2102I is inapplicable because this implementation supports 

CREATE vith IN_FILE mode for DIRECT_I0. 

r. CE2102J is inapplicable because this implementation supports 

CREATE vith OUT_FILE mode for DIRECT_I0. 

s. CE2102N is inapplicable because this implementation supports OPEN 
vith IN_FILE mode for SEQUENTIAL_IO. 

t. CE21020 is inapplicable because this implementation supports RESET 
vith IN_FILE mode for SEQUENTIAL_I0. 

u. CE2102P is inapplicable because this implementation supports OPEN 
vith OUTJILE mode for SEQUENTIAL_IO. 

v. CE2102Q is inapplicable because this implementation supports RESET 
vith OUT_FILE mode for SEQUENTIAL_IO. 

v. CE2102R is inapplicable because this implementation supports OPEN 
vith INOUT_FILE mode for DIRECT_IO. 

x. CE2102S is inapplicable because this implementation supports RESET 
vith INOUT_FILE mode for DIRECT_IO. 

y. CE2102T is inapplicable because this implementation supports OPEN 
vith IN_FILE mode for DIRECT JO. 

z. CE2102U is inapplicable because this implementation supports RESET 
vith IN_FILE mode for DIRECT_I0. 

aa. CE2102V is inapplicable because this implementation supports OPEN 
vith OUTJTLE mode for DIRECT JO. 

ab. CE2102V is inapplicable because this implementation supports RESET 
vith OUTJILE mode for DIRECT JO. 

ac. CE3102E is inapplicable because this implementation supports 
CREATE vith IN FILE mode for text files. 


3-4 








TEST INFORMATION 


ad. CE3102F is inapplicable because this implementation supports RESET 
for text files. 

ae. CE3102G is inapplicable because this implementation supports 

deletion of an external file for text files. 

af. CE3102I is inapplicable because this implementation supports 

CREATE with OUT_FILE mode for text files. 

ag. CE3102J is inapplicable because this implementation supports OPEN 
with IN_FILE mode for text files. 

ah. CE3102K is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for text files. 

ai. CE3115A is not applicable because resetting of an external file 
with OUT FILE mode is not supported with multiple internal files 
associate? with the same external file when they have different 
modes. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that wasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 10 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B24009A B33301B B38003A B38003B B38009A B38009B 

B41202A B91001H BC1303F BC3005B 


3-5 










TEST INFORMATION 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the VADS VAX UNIX vas submitted to the AVF by the applicant for review. 
Analysis of these results demonstrated that the compiler successfully 
passes all applicable tests, and the compiler exhibited the expected 
behavior on all inapplicable tests. 


3.7.2 Test Method 


Testing of the VADS VAX UNIX using ACVC Version 1.10 was conducted on-site 
by a validation team from the AVF. The configuration in which the testing 
was performed is described by the following designations of hardware and 
software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


DEC VAX 11/750 

UNIX, 4.3 BSD 

DEC VAX 11/750 

UNIX, 4.3 BSD 

VADS VAX UNIX, Version 5.5 


A magnetic tape containing all tests exc 

requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 


The contents of the magnetic tape were loaded directly onto the host 
computer. 


After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the DEC VAX 11/750. 
Results were printed from the host computer. 


The compiler was tested using command scripts provided by Verdix 
Corporation and reviewed by the validation team. The compiler was tested 
using all default option settings. 


Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-6 









TEST INFORMATION 


3.7.3 Test Site 

Testing was conducted at Aloha OR and was completed on 10 June 89. 


3-7 



APPENDIX A 

DECLARATION OF CONFORMANCE 

Verdix Corporation has submitted the following 
Declaration of Conformance concerning the VADS VAX 
UNIX. 


w 






DECLAPJL7ICH ST ' laTJK KAKZ 


Compiler Inpieaentor: VESOIZ Corporation 

Ada Validation FieilitrT JLSI/SCZL, Wright-Patterson 1F3 OH 35533-6503 
Ada Compiler Validation Capability (1070) Version: 1.10 


Configuration 


Base Compiler Name: vads vax Unix 
Host Architecture ISA: dec vax 11-/750 
Target Architecture ISA: same as host 


Version: -- 5 

OSATEH #: UNIX. 4 .-3 BSD 

OSAVEH #: same as host 


Implementor's Declaration 

I, the undersigned, representing vebdex Corp. ' t bare implemented no deliberate 
extensions to the Ada Language Standard AKSI/KIL-S73-1815A In the compiler(s) Hated 
in this declaration. I declare that vnmrt is the owner of record of the Ada 
language compiler(s) listed above and, as sueh, is responsible for maintaining said 
compiler(s) In confomance to AXS37M2L-STD-1815A. All certificates and registrations 
for Ada l a ng uage compiler (a) listed la this declaration sfaari be made onlr in the 
owner's co r pora te name. 



Sate: 


\4 < Z C \ 


Stephen P. Zeigler 

Vice-President 

Ada Products Division 


I, the undersigned, representing vrorr taka fall responsibility for implementation 
and maintenance of the Ida coepileKs) listed above, and agree to the public 
disclosure of the final Validation Senary Report. I declare that an of the Ada 
language compilers listed, and their bost/target performance are In compliance with 
the Ada Language Standard ASSLTGL-SID-1815A. P 




Stephen T. Zeigler 

Vice-President 

Ada Products Division 


A-2 






APPENDIX E 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the VADS VAX UNIX, Version 5.5, as described in this 
Appendix, are provided by Verdix Corporation. Unless specifically noted 
otherwise, references in this Appendix are to compiler documentation and 
not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 
• • • 

type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is 

digits 9 range -16#0.FFFFFFFFFFFFFF#E127 .. 

16#0.FFFFFFFFFFFFFF#E127; 

type SHORT_FLOAT is digits 6 range -16#0.FFFFFF#E127 .. 

16#O.FFFFFF#E127; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 


B-l 









APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINEONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as pragma INLINE, indicates to the compiler 
that the subprogram must always be in lined. This pragma also suppresses the generation of a callable 
version of the routine which save code space. 

1.2. BUILT IN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Ada body can be pro¬ 
vided, for example the MACHINE_CODE package. 

1J. SHARE_C ODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument. This pragma is only allowed 
immediately at the place of a declarative item in a declarative part or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit 

When the first argument is a generic unit the pragma applies to all instantiations of that generic. When 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated for a generic instantia¬ 
tion with code generated far other instantiations of die same generic. When the second argument is 
FALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit 

The name pragma SHARE_BQDY is also recognized by the implementation and has the same effect as 
SHARE_CODE. It is included for comparability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generadon of the image array used for the IMAGE attribute of enumerauon 
types. This eliminates the overhead required to store the array in the executable image. 

1-5. EXTERNAL_NAME Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or variable defined in Ada and 
allows the user to specify a different external name that may be used to reference the enrity horn other 
languages. The pragma is allowed at the place of a declarauve item in a package specification and 
must apply to an object declared earlier in the same package specif canon. 

141. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma cakes the name of a a variable or subprogram defined in another 
language and allows it to be referenced direcdy in Ada. The pragma will replace all occurrences of the 
variable or subprogram name with an external reference to the second, link_argument. The pragma is 
allowed at the place of a declarauve item in a package specification and must apply to an object or sub¬ 
program declared earlier in the same package specificadon. The object must be declared as a scalar or 


B-2 







an access type. The object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICn_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 

2. Implementation of Predefined Pragmas 
2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect 
13. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

13. INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

This pragma supports calls to ’C’ and FORTRAN functions. The Ada subprograms can be either func¬ 
tions or procedures. The types o: parameters and the result type for functions must be scalar, aryps s or 
the predefined type ADDRESS in SYSTEM. All parameters must have mode IN. Record and array 
objects can be passed by reference using the ADDRESS attribute. 

13. LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

13. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2.9. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.10. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 


B-3 











2.11. SHARED 

This pragma is recognized by the implementation but has no effect. 

2.12. STORAGE_UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.13. SUPPRESS 

This pragma is implemented as described, except that RANGE_CHECK and DIVISI0N_CHECK can¬ 
not be supressed. 

2.14. SYSTEMNAME 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3J. P’REF 

For a prefix that denotes an object, a program unit, a label, or an entry: 

This attribute denotes the effective address of the first of the storage units allocated to P. For a subpro¬ 
gram. package, task unit, or label, it refers to the address of the machine code associated with the 
corresponding body or statement. For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt. The attribute is of the type OPERAND defined in the package 
MACHINE_CODE. The attribute is only allowed within a machine code procedure. 

See section F.4.8 for more information on the use of this attribute. 

(For a package, task unit, or entry-, the ’REF attribute is not supported.) 


B-4 






4. Specification Of Package SYSTEM 

pacl>|< SYSTEM 
i • 

tyy. NOR® It ( tti.aaU ); 


system, no*® tmmuaai no*® - tti.mmu: 

STCROC* UNIT : tomtit** :• I: 

kOCRY.SIZB : tomtltmi <.2»1_«S«; 

.. SyttwR.Dtptaa.mt Nttaom Nnttrt 

MIN I NT : tomtltmi .1.14T_4«2_«4t; 

mx~IHT : tomtltmi 1 . 1 47.4*2.441; 

MAX'DIOITS : tomtltmi »7 

MOX~MaNTlSSA : tomtltmi :• SI; 

PINE DELTA : tomtltmi 2.0**<-ll): 

Tld~ : tomtltmi 0.01; 

• • Otkor JytIw4tp*m4*ml Dttltrtilomi 


taktypt PRIORITT it INTEGER rtm(t 0 
MOC.RBC.St2E : imitfot 04*1024; 
lypt OPPRESS It ptlomto; 
n.AOE ; tomtltmi 0C0RB3S; 

fiat ilka PHYSICAL OCCRESSf I: INTEGER) roltrm ADDRESS: 

ftmtilom ODOR OT(A, •; OPPRESS) rtimrm BOOLEAN; 

fmmtilot oCOr"LT(A. S: OPPRESS) ttltrm ICCLEAN; 

ftmtilom OCOR'OSfA. B: OPPRESS) tottfm KXPLEAN; 

ftmtilom oCOR~LE(A. B: ADDRESS) rtttf* BOOLEAN; 

ftmtilom 0P)R~0IPP(A. B; ADDRESS) rtimrm INTEGER; 

ftmtilom INC1~0DDR(A: OPPRESS; INOL INTEGER) rtimrm ADDRESS; 

ftmtilom naToOORfA: OPPRESS; MOL INTEORR) rtimrm OPPRESS; 

ftmtilom *>*{A, B: ADDRESS) rtimrm BOOLEAN rtmtamt OPPR.aT; 

ftmtilom *<*(A, B: ADDRESS) rtimrm BOOLEAN rtmtatt A00R.LT; 

ftmtilom *>»*(A, B: OPPRESS) rtimrm BOOLEAN rtmtatt OCOR <K; 

ftmtilom *<-*(A. B: ADDRESS) rtimrm BOOLEAN rtmtatt OOOR LB; 

famei lorn ••■(A, B; ADDRESS) rtimrm INTEQER rtmtatt ODOR 01PP: 

famei lea •••(A: ADDRESS; INCR: INTEQER) raitra ADDRESS rtmtatt INCR.ODDR; 

ftmtilom *--(A: ADDRESS; DECK: INTEQER) rtimrm OPPRESS itatRRk CEOI.ACOR; 

prtpa Iml ImtfOCOR OT); 
prtgnt ImlImtfODOR LT); . 
praam Iml ItafOOOR.CS); 
prtimm 1ml Iat(ODOR LE); 
pram 1 ml lmt(OCOR~DIPP); 
pram tal ltt< INC* ODOR); 
pram Iml lmtfDGOi'oDDR); 
prim iallat(PHYSTcoL.OCORESS); 


pi Halt 


lypt ADDRESS It mow imttgtr; 

NO.ODOR ; tomtltmi OPPRESS ;. 0; 
tat SYSTEM; 


5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

Array components less than STORAGE_UNTT bits are packed to the next highest power of 2 bits. 
Objects and larger components are packed to the nearest whole STORAGEJJNTT. In the absence of 
pragma PACK record components are padded so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminated the padding where possible. Pragma PACK has 
no other effect on the storage allocate for record components a record representation is required. 

52. Record Representation Clauses 

For scalar types a represen anon clause will pack to the number of bits required to represent the range of 
the subtype. A record r ep res entation applied to a composite type will not cause the object to be packed 
to fit in the space required. An explicit representation clause must be given for the component type. An 
error will be issued if there is unsufficient space allocated. 


B-5 











S3. Address Clauses 

Address clauses are supported for variables and constants. 

5.4. Interrupts 

Interupt entries are not supported. 

S3. Representation Attributes 

The ADDRESS attribute is not supported for the following entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions axe supported. 

The general definition of the package MACHINE_CODE provides an assembly language interface for 
the target machine. It provides the necessary record typefs) needed in the code statement, an enumera¬ 
tion type of all the opcode mneumonics, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows: 

CODE_n’( opcode, operand {, operand] ); 
where n indicates die number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands are listed within a subaggregate. 
The format is as follows: 

CODE_N’( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation must be used (cf. RM 4.3(4)). 

CODE_0’( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the ’REF attribute. 

The arguments to any of the functions defined in MACHINE_CODE must be static expressions, string 
literals, or the functions defined in MACHINE_CODE. The 'REF atmbute may not be used as an argu¬ 
ment in any of these functions. 

Inline expansion of machine code procedures is supported. 


B-6 



6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 
Address clauses are supported for constants and variables. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC_SIZE as the record size (expressed in 
STORAGE_UNITS) when "the size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string wh<je ELEMENT_TYPE’ SIZE is very large, MAX_REC_SEZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating DERECT_IO "to provide an upper limit on the record size. In any case the maximum size 
supported is 1024 x 1024 x STORAGE_UNIT bits. DERECTJO will raise USEJERROR if 
MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE as the record size (expressed in 
STORAGE_UNITS) when the size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SIZE is very large. MAX_REC_SIZE is used 
instead. MAX_RECORD_SIZE is defined in SYSTEM and can be changed by a program before 
instantiating INTEGER_IO to provide an upper limit an the record size. SEQUENTIAL_IO imposes no 
limit on MAX_REC_SI/.h. 


1L Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources up to or even near these limits are available to every program. 


11.1. Line Length 

The implementation supports a maximum line length of 500 characters including the end of line charac¬ 
ter. 


11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 4,00",000 x STORAGE_UNTTS. The maximum 
size of a statically sized record type is 4,000,000 x STORAGE_UNITS. A record type or array type 
declaration that exceeds these limits will generate a warning message. 

11-3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every task except the main program 
is allocated a fixed size stack of 10,240 STORAGE_UNTTS. This is the value returned by 
T’STOR AGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default collection size for an access 
type is 100,000 STORAGEJUNITS. This is the value returned by T’ STORAGE_SIZE for an access 


B-7 






type T. 


11J. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for objects declared statically within a 
compilation unit. If this value is exceeded the compiler will terminate the compilation of the unit with a 
FATAL error message. 


B-8 







APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..498=>'A',499=>' 1' ) 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..498=>'A',499=>'2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 (1..249=>' A',250=>'3', 

An identifier the size of the 251..499=>'A') 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


C-l 









TEST PARAMETERS 


Name and Meaning _ 

$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRING2 

yields the image of BIG ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 
BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$C0UNT_LAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


(1..249=>'A',250=>'4' , 
251..499=>'A') 


(1..496=>'0',497..499=>"298") 


(1..493=>'0',494..499*>"69.0E1") 


(!*>'"',2..200=>'A',201=>'"') 


(!=>'"' ,2. .300=>'a' ,301=>'l', 
302=>'"') 


(1..479=>' ') 


2 147 483 647 


6 291 456 


C-2 











TEST PARAMETERS 


Name and Meaning Value 


$DEFAULT_SYS NAME 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT_IO.FIELD'LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORTFLOAT, or 

LONGFLOAT. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 

$1LLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 

$INTEGER_FIRST 

A universal integer literal 
whose value is INTEGER'FIRST. 


VAX_UNIX 

0.0000000004656612873077392578125 

2_147_483_647 

N0_SUCH_TYPE 

N0_SUCH_TYPE 

100_000.0 

10_000_000 

99 

"/illegal/file_name/2}]$22102C.DAT" 

"/illegal/file_name/CE2102C*.DAT" 

-2 147 483 648 


C-3 










TEST PARAMETERS 


Name and Meaning _ Value _ 

$INT£GER_LAST 2_147_483_647 

A universal integer literal 
whose value is INTEGER-'LAST. 

$INTEGER_LAST_?LUS_1 2_147_483_648 

A universal integer literal 
whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION -100_000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION BASE_FIRST -10_000_000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$LOV_PRIORITY 0 

An integer literal whose value 
is the lover bound of the range 
for the subtype SYSTEM.PRIORITY. 

SMANTISSADOC 31 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 9 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 499 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2_147_483_648 

A universal integer literal 
whose value is SYSTEM.MAX_INT+1. 

$MAX_LEN_INT_BASED_LITERAL (1..2=>"2:",3..496=>'0', 

A universal integer based 497..499=>"11:") 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 









TEST PARAMETERS 


Name and Meaning _ Value _ 

$MAX_LEN_REAL_BASED_LITERAL (1..3=>"16:■,4..495=>'0', 

A universal real based literal 496..499=>"F.E:") 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL (1=>'"',2..498=>'A',499 =>'"') 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT -2147483648 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME TINY_INTEGER 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SH0RT_FL0AT, SHORTINTEGER, 

L0NG_FL0AT, or L0NG_INTEGER. 

$NAME_LIST VAX_UNIX 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 16#FFFFFFFD# 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEW_MEM_SIZE 6_291_456 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


C-5 








1 


TEST PARAMETERS 


Name and Meaning ___ 

$NEV_STOR_UNIT 

An inleger literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE_UNIT 

$NEV SYS NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 


8 


VAX UNIX 


32 


0.01 


C-6 




APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 6 54 and the execution of task CHANGING 0F_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56. 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 


D-l 








WITHDRAWN TESTS 


tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented ; n the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..0, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 
ARG. 

o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage_ to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 



WITHDRAWN TESTS 




t 


q. CE3111C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

r. CE33C1A: This test contains several calls to END_OF_LINE and 

END_0f PAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 118, 
132, anc 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAY0UT_ERR0R is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk, space, and the test 
would thus encumber validation testing. 


D-3 







