AD-A240 611 IENTATION PAGE 


i 


1 AGENCY USE ONLY (Leave Blank) 


Form Approved 
OPtANo. 0704-018S 


Hi 


wag* 1 hour par r ascorat reiong tha am* tor rawaanng rwructcn*. aavcrung aiadng au aoucaa galhanr q ant maramng th* on 
irtang fim Ourdan aatimata or any orrw aapaa ot tfi» co**ction ml rtormation. rctudvg tuggaaliona lor reducing da burdan. » Waalwpon 
i. 1215 Jatfaraon Save hgtiway. Sola 1204. Aring-an. VA 22202-002, and to »>a OHic* <* attormaton and AagUaaory AKan. OdieaoI 


2 REPORT DATE 


3 REPORT TYPE AND DATES COVERED 

Final: 30 Jul 1991 to 01 Jun 1993 


4 TITLE AND SUBTITLE 

Ada Compiler Validation Summary Report:U.S. NAVY, Ada/L, Version 4.0 
(/OPTIMIZE), VAX 11/785 (Host) to AN/UYK-43 (Single CPU)(Bare BoardVTarget), 

9106Z6S1. 11175 


6 AUTHOR(S) 

National Institute of Standards and Technology 

Gaithersburg, MD 

USA 


7 PERFORMING ORGANIZATION NAME(S) AND ADDRESS,ES) 

National Institute of Standards and Technology 
National Computer Systems Laboratory 
Bldg. 255, Rm A266 
Gaithersburg, MD 20899 USA 


9 SPONSORING/MONITORING AGENCY NAME(S) AND ADORESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, RM 3E114 
Washington, D C. 20301-3081 



8 PERFORMING ORGANIZATION 
REPORT NUMBER 

NIST90USN510 9 1.11 


10 SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12a DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release: distribution unlimited. 


12b DISTRIBUTION CODE 


13 ABSTRACT (Maximum 200 words) 

U S NAVY, Ada/L, Version 4.0 (/OPTIMIZE), Gaithersburg) VAX 11/785, running VAX/VMS Version 5.3 (Host) to 
AN/UYK-43 (Single CPU)(Bare Board)(Target), ACVC 1,11. 




D TIC 



FCTE 

SEP 19 1991 3 0 



91-11049 

It ratai ...._ ■ 




14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability. Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18 SECURITY CLASSIFICATION 


UNCLASSIFED 


19 SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBER OF PAGES 


16 PRICE CODE 


20 LIMITATION OF ABSTRACT 



NSN 7540 01 280-550 


Standard Form 298, (Rev 2-89) 
Presented ' t ANSI Std 2 j *-128 





























AVF Control Number: NIST90USN510_9_1.11 
DATE COMPLETED 

BEFORE ON-SITE: 1991-04-05 
AFTER ON-SITE: 1991-06-26 
REVISIONS: 1991-07-30 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 910626S1.11176 
U.S. NAVY 

Ada/L, Version 4.0 (/OPTIMIZE) 

VAX 11/785 => AN/UYK-43 (Single CPU) (Bare Board) 


Prepared By: 

Software Standards Validation Group 
National Computer Systems Laboratory 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, Maryland 20899 


Accesion For 


f 


NTiS CRA&| 

D'i iC T/'d f 1 

-ot-. □ 

J i .t.!ic;i:.ofi 

Gy 

c. : < 


f\- 


\ 

I 

-_U- 









AVF Control Number: NIST90USN510_9_l.il 
Certificate Information 


The following Ada implementation was tested and determined to pass 
ACVC 1.11. Testing was completed on 1991-06-26. 

Compiler Name and Version: Ada/L, Version 4.0 (/OPTIMIZE) 

Host Computer System: VAX 11/785, running VAX/VMS Version 

5.3 

Target Computer System: AN/UYK-43 (Single CPU) (Bare Board) 

A more detailed description of this Ada implementation is found in 
section 3.1 of this report. 

As a result of this validation effort. Validation Certificate 
910626S1.11176 is awarded to U.S. NAVY. This certificate expires 
on 01 March 1993. 


This report has been reviewed and is approved. 






Ada'Val idation (Fici 
Dr. David K. Je^jer 
Chief, Information Systems 
Engineering Division (ISED) 

Computer Systems Laboratory 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, MD 20899 





Ada Validatl.orK/T’acility 
Mr. L. Arnold^Johnson 
Manager, Software Standards 
Validation Group 
(CLS) 



Ada vMi&MtTon Organization 
Dire<^tor^(j/omputer & Software 
Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 






Ada Joint Program Office 
S 1 *' Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 








DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the 
customer. 


DECLARATION OF CONFORMANCE 


Customer: U.S. NAVY 

Certificate Awardee: U.S. NAVY 

Ada Validation Facility: National Institute of Standards and 

Technology 

Computer Systems Laboratory (CSL) 
Software Validation Group 
Building 225, Room A266 
Gaithersburg, Maryland 20899 

ACVC Version: 1.11 


Ada Implementation: 

Compiler Name and Version: Ada/L, Version 4.0 (/OPTIMIZE) 

Host Computer System: VAX 11/785, running VAX/VMS Version 

5.3 

Target Computer System: AN/UYK-43 (Single CPU) (Bare Board) 

Declaration: 


I the undersigned, declare that I have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A ISO 
8652-1987 in the implementation listed above. 



Customer Signature 



Date 1 


Company U.S. Navy 
'T’i -M e 




^ fr¬ 


eer t if icate Awardee Signature 


Dace 


Company U.S. Navy 
Title 






TABLE OF CONTENTS 


CHAPTER 1.1-1 

INTRODUCTION . 1-1 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .... 1-1 

1.2 REFERENCES.1-1 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2.2-1 

IMPLEMENTATION DEPENDENCIES . 2-1 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-4 


CHAPTER 3.3-1 

PROCESSING INFORMATION . 3-1 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A.A-l 

MACRO PARAMETERS.A-l 

APPENDIX ..B-l 

COMPILATION SYSTEM OPTIONS . B-l 

LINKER OPTIONS. B-2 

APPENDIX C...C-l 

APPENDIX F OF THE Ada STANDARD.C-l 





























CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the 
Ada Validation Procedures [Pro90] against the Ada Standard [Adats3] 
using the current Ada Compiler Validation Capability (ACVC). This 
Validation Summary Report (VSR) gives an account of the testing of 
this Ada implementation. For any technical terms used in this 
report, the reader is referred to [Pro90]. A detailed description 
of the ACVC may be found in the current ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the 
Ada Certification Body may make full and free public disclosure cf 
this report. In the United States, this is provided in accordance 
with the "Freedom of Information Act" (5 U.S.C. #552). The results 
of this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this report 
do not represent or warrant that all statements set forth in this 
report are accurate and complete, or that the subject 
implementation has no nonconformities to the Ada Standard other 
than those presented. Copies of this report are available to the 
public from the AVF which performed this validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results 
should be directed to the AVF which performed this validation or 
to: 


Ada Validation Organization 
Computer and Software Engineering Division 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311-1772 


1.2 REFERENCES 

[Aaa83] Reference Manual for the Ada Programming Language . 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


1-1 






[Pro90] Ada Compiler Validation Procedures . Version 2.1, Ada Joint 
Program Office, August 1990. 


[UG89] Ada Compiler Validation Capability User's Guide . 21 June 
1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. 
The ACVC contains a collection of test programs structured into six 
test classes: A, B, C, D, E, and L. The first letter of a test 
name identifies the class to which it belongs. Class A, C, D, and 
E tests are executable. Class B and class L tests are expected to 
produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and 
produce a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when they are executed. Three Ada library units, the 
packages REPORT and SPPRT13, and the procedure CHECK_FILE are used 
for this purpose. The package REPORT also provides a set of 
identity functions used to defeat some compiler optimizations 
allowed by the Ada Standard that would circumvent a test objective. 
The package SPPRT13 is used by many tests for Chapter 13 of the Ada 
Standard. The procedure CHECK_FILE is used to check the contents 
of text files written by some of the Class C tests for Chapter 14 
of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. If these units are not 
operating correctly, validation testing is discontinued. Class B 
tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled 
and the resulting compilation listing is examined to verify that 
all violations of the Ada Standard are detected. Some of the class 
B tests contain legal Ada code which must not be .flagged illegal by 
the compiler. This behavior is also verified. 

Class L tests check that an Ada implementation correctly detects 
violation of the Ada Standard involving multiple, separately 
compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be 
replaced by implementation-specific values — for example, the 
largest integer. A list of the values used for this implementation 
is provided in Appendix A. In addition to these anticipated test 
modifications, additional changes may be required to remove 
unforeseen conflicts between the tests and implementation-dependent 
characteristics. The modifications required for this 
implementation are described in section 2.3. 

For each Ada implementation, a customized test suite is produced by 


the AVF. This customization consists of making the modifications 
described in the preceding paragraph, removing withdrawn tests (see 
section 2.1) and, possibly some inapplicable tests (see Section 3.2 
and [UG89]). 

In order to pass an ACVC an Ada implementation must process each 
test of the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to 
be added to a given host and target computer 
system to allow transformation of Ada programs 
into executable form and execution thereof. 

The means for testing compliance of Ada 
implementations, Validation consisting of the 
test suite, the support programs, the ACVC 
Capability user's guide and the template for 
the validation summary (ACVC) report. 

Ada An Ada compiler with its host computer system and 

Implementation its target computer system. 

Ada The part of the certification body which carries 

Validation out the procedures required to establish the 

Facility (AVF) compliance of an Ada implementation. 

Ada The part of the certification body that provides 

Validation technical guidance for operations of the Ada 
Organization certification system. 

(AVO) 

Compliance of The ability of the implementation to pass an ACVC 
an Ada version. 

Implementation 

Computer A functional unit, consisting of one or more 

System computers and associated software, that uses 

common storage for all or part of a program and 
also for all or part of the data necessary for 
the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including 
arithmetic operations and logic operations; and 
that can execute programs that modify themselves 
during execution. A computer system may be a 
stand-alone unit or may consist of several 
inter-connected units. 


Ada Compiler 
Validation 
Capability 
(ACVC) 


1-3 




Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 


Validation 


Withdrawn 

test 


Fulfillment by a product, process or service oi 
all requirements specified. 

An individual or corporate entity who enters into 
an agreement with an AVF which specifies the terms 
and conditions for AVF services (of any kind) to 
be performed. 

A ormal statement from a customer assuring that 
conformity is realized or attainable on the Ada 
implementation for which validation status is 
realized. 

A computer system where Ada source programs are 
transformed into executable form. 

A test that contains one or more test objectives 
found to be irrelevant for the given Ada 
implementation. 

Software that controls the execution of programs 
and that provides services such as resource 
allocation, scheduling, input/output control, 
and data management. Usually, operating systems 
are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada 
programs are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated 
successfully either by AVF testing or by 
registration [Pro90]. 

The process of checking the conformity of an Ada 
compiler to the Ada programming language and of 
issuing a certificate for this implementation. 

A test found to be incorrect and not used in 
conformity testing. A test may be incorrect 
because it ha an invalid test objective, fails 
to meet its test objective, or contains erroneous 
or illegal use of the Ada programming language. 


1-4 


CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Some tests are withdrawn by the AVO from the ACVC because they do 
not conform to the Ada Standard. The following 94 tests had been 
withdrawn by the Ada Validation Organization (AVO) at the time of 
validation testing. The rationale for withdrawing each test is 
available from either the AVO or the AVF. The publication date for 
tnis list of withdrawn tests is 91-05-03. 


E28005C 

B28006C 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C 5114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CF7607D 

CE3118A 

CE3812A 

CE3411B 

CE3814A 

CE3412B 

CE3902B 

CE3607B 

CE3607C 


2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are 
irrelevant for a given Ada implementation. The inapplicability 
criteria for some tests are explained in documents issued by ISO 
and the AJPO known as Ada Issues and commonly referenced in the 
format Al-dddd. For this implementation, the following tests were 
inapplicable for the reasons indicated; references to Ada Issues 
are included as appropriate. 

The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 


2-1 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 



C45241L..Y 
C45421L..Y 
C45524L..Z 
C45641L. 


(14 tests) 
(14 tests) 
(15 tests) 
(14 tests) 


C45321L..Y 
C45521L..Z 
C45621L..Z 
C46012L..Z 


(14 tests) 
(15 tests) 
(15 tests) 
(15 tests) 


C24113H..K (4 tests) use a line length greater than MAX_IN_LEN. 

C35713B, C45423B, B86001T, and C86006H check for the predefined 

type SHORT__FLOAT; for this implementation, there is no such type. 


The following 21 tests check for the predefined type SHORT_INTEGER; 
for this implementation, there is no such type: 


C35404B 

C45412B 

C45611B 

B52004E 

CD7101E 


B36105C 

C45502B 

C45613B 

C55B07B 


C45231B 

C45503B 

C45614B 

B55B09D 


C45304B 

C45504B 

C45631B 

B86001V 


C45411B 

C45504E 

C45632B 

C36006D 


C3 54 04 D, C4 52 3 ID, B86001X, C86006E, and CD7101G check for a 

predefined integer type with a name other than INTEGER, 
LONG_INTEGER, or SHORT_INTEGER; for this implementation, there is 
no such type. 


C35713D and B86001Z check for a predefined floating-point type with 
a name other than FLOAT, LONG_FLOAT, or SHORT_FLOAT; for this 
implementation, there is no such type. 


C45531M..P and C45532M..P (8 tests) check fixed-point operations 
for types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for 
this implementation, there is no such type. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types; for this 
implementation, MACHINE_OVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than 
DURATION; for this implementation, there is no such type. 

CD1009C checks whether a length clause can specify a non-default 
size for a floating-point type; this implementation does not 
support such sizes. 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length 
clauses to specify non-default sizes for access types; this 
implementation does not support such sizes. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
3EQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected 
by this compiler. 


2-2 



AE2101H, EE2401D, and EE2401G use instantiations of package 
DIRECT_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected 
by this compiler. 

The tests listed in the following table are net applicable because 
the given file operations are supported for the given combination 
of mode and file access method. 


Test 

File Operation Mode 

File Access 

Method 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 

10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 


CE2102J 

CREATE 

OUT FILE 

DIRECT 10 


CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 

10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 

10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 

10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 

10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 


CE2102S 

RESET 

INOUT FILE 

DIRECT 10 


CE2102T 

OPEN 

IN FILE 

DIRECT 10 


CE2102U 

RESET 

IN FILE 

DIRECT 10 


CE2102V 

OPEN 

OUT FILE 

DIRECT 10 


CE2102W 

RESET 

OUT FILE 

DIRECT 10 


CE3102F 

RESET 

Any Mode 

TEXT 10 


CE3102G 

DELETE 


TEXT 10 


CE3102I 

CREATE 

OUT FILE 

TEXT 10 


CE3102J 

OPEN 

IN FILE 

TEXT 10 


CE3102K 

OPEN 

OUT FILE 

TEXT 10 



The tests listed in the following table are not applicable because 
the given file operations are not supported for the given 
combination of mode and file access method. 


Test 


File Operation Mode 


File Access Method 


CE2105A 

CE2105B 

CE3109A 


CREATE 

CREATE 

CREATE 


IN_FILE SEQUENTIAL_IO 

IN_FILE DIR£CT_IO 

IN FILE TEXT 10 


The following 19 tests check operations on sequential, direct, and 
text files when multiple internal files are associated with the 
same external file; USE_ERR0R is raised when this association is 
attempted. 


CE2107A..H CE2107L CE2110B CE2110D CE2111D 

CE2111H CE3111A..B CE3111D..E CE3114B CE3115A 


CE2203A checks that WRITE raises USE_ERR0R if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 


2-3 






CE2403A checks that: WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot 
restrict file capacity. 

CE3304A checks that SET_LINE_LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the 
page number exceeds COUNT'LAST. For this implementation, the value 
of COUNT'LAST is greater than 150000 making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 44 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in 


the way expected by the 

original 

tests. 



B22003A 

B22004A 

B23004A 

B24005A 

B24005B 

B28003A 

B33201C 

B33202C 

B33203C 

B33301B 

B37106A 

B37301I 

B38003A 

B38003B 

B38009A 

B38009B 

B44001A 

B44004A 

B54A01L 

B55A01A 

B61005A 

B85008G 

B85008H 

B95063A 

B97103E 

BB1006B 

BC1102A 

BC1109A 

BC1109B 

BC1109C 

BC1109D 

BC1201F 

BC1201G 

BC1201H 

BC1201I 

BC1201J 

BC1201L 

BC3013A 

BE2210A 

BE2413A 




C83030C and C86007A were graded passed by Test Modification as 
directed by the AVO. These tests were modified by inserting 
"PRAGMA ELABORATE (REPORT);" before the package declarations at 
lines 13 and 11, respectively. Without the pragma, the packages 
may be elaborated prior to package Report's body, and thus the 
packages' calls to function REPORT.IDENT_INT at lines 14 and 13, 
respectively, will raise PR0GRAM_ERR0R. 

C34005P and C34005S were graded passed by Test Modification as 
directed by the AVO. These tests contain expressions of the form 
"I - X'FIRST + Y'FIRST", where X and Y are of an array type with a 
lower bound of INTEGER'FIRST; this implementation recognizes that 
"X'FIRST + Y'FIRST" is a loop invariant and so evaluates this part 
of the expression separately, which raises NUMERIC_ERROR. These 
tests were modified by inserting parens to force a different order 
of evaluation (i.p., to force the subtraction to be evaluated 
first) at lines 187 and 262/263, respectively; those modified lines 
are: 


[ C34005P, line 187] 


2-4 






IF NOT EQUAL (X 

[C34005S, lines 

IF NOT EQUAL (X 
Y 


(I), Y ((I - X’FIRST) + Y’FIRST)) THEN 
261..4 (only 262 & 263 were modified)] 
(1/ J) , 

((I - X'FIRST) + Y'FIRST, 

(J - X'FIRST(2)) + 

Y'FIRST(2))) THEN 


2-5 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is 
described adequately by the information given in the initial 
pages of this report. 

For a point of contact for technical information about this 
Ada implementation system, see: 

Mr. Christopher T. Geyer 

Fleet Combat Directions Systems Support Activity 
Code 81, Room 301D 
200 Catalina Blvd. 

San Diego, California 92147 
619-553-9447 


For a point of contact for sales information about this Ada 
implementation system, see: 

NOT APPLICABLE FOR THIS IMPLEMENTATION 

Testing of this Ada implementation was conducted at the 
customer's site by a validation team from the AVF. 

3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes 
each test of the customized test suite in accordance with the Ada 
Programming Language Standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC 
[Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of Applicable Tests 3772 

b) Total Number of Withdrawn Tests 94 

c) Processed Inapplicable Tests 304 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 0 


3-1 



f) Total Number of Inapplicable Tests 304 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


When this implementation was tested, the tests listed in section 
2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this 
compiler was tested, the tests listed in section 2.1 had been 
withdrawn because of test errors. The AVF determined that 304 
tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing. 
In addition, the modified tests mentioned in section 2.3 were 
also processed. 

A magnetic tape containing the customized test suite (see 
section 1.3) was taken on-site by the validation team for 
processing. The contents of the magnetic tape were loaded 
directly onto the host computer. 

After the test files were loaded onto the host computer, the 
full set of tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system 
and executed on the target computer system. 

Testing was performed using command scripts provided by the 
customer and reviewed by the validation team. See Appendix B 
for a complete listing of the processing options for this 
implementation. It also indicates the default options. The 
options invoked explicitly for validation testing during this 
test were: 


FOR /OPTIMIZE the options were: 

/SUMMARY /OPTIMIZE /SOURCE /0UT=<filename> 


The options invoked by default for validation testing during 
this test were: 


FOR /OPTIMIZE the options were: 

NO_MACHINE_CODE N0_ATTRIBUTE NO_CROSS_REFERENCE 

NO DIAGNOSTICS NO NOTES PRIVATE LIST CONTAINER GENERATION 


3-2 



CODE_ON_WARNING NO_MEASURE DEBUG CHECKS NO_EXECUTIVE 
NO_RTE_ONLY TRACE_BACK /NO_EMR 

Test output, compiler and linker listings, and job logs were 
captured on magnetic tape and archived at the AVF. Selected 
listings examined on-site by the validation team were also 
archived. 


3-3 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for 
customizing the ACVC. The meaning and purpose of these 
parameters are explained in [UG89]. The parameter values are 
presented in two tables. The first table lists the values 
that are defined in terms of the maximum input-line length, 
which is | the value for $MAX_IN_LEN—also listed here. 
These values are expressed here as Ada string aggregates, 
where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

120 




$BIG_ID1 

(1..V-l => 'A', V 

=> '1') 



$BIG_ID2 

(1..V-l => 'A', V 

=> '2') 



$BIG_ID3 

(1..V/2 => 'A*) & ' 

3' & (1. 

.V-l-V/2 => 

'A* ) 

$BIG_ID4 

(1..V/2 => 'A') & ' 

4' & (1. 

•V-l-V/2 => 

'A' ) 

$BIG_INT_LIT 

(1..V-3 => 'O') & 

"298" 



$BIG_REAL_LIT 

(1..V-5 => 'O') & 

"690.0" 



$BIG_STRING1 

"" & (1..V/2 => 

’ A' ) & ' 

ii i 


$BIG_STRING2 

"" & (1..V-l-V/2 

=> 'A') 

& ' 1' & ' " ' 


$BLANKS 

(1..V-2 0 => • ' ) 





$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => ’O') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 

$MAX STRING LITERAL "" & (1..V-2 => 'A') & "" 


A-l 





The following table contains the values for the remaining 
macro parameters. 

Macro Parameter Macro Value 


$ACC_ SIZE 

$ALIGNMENT 

$COUNT_LAST 

$ D E FAU LT_MEM_SIZ E 

$DEFAULT_STOR_UNIT 

$ DE FAULT_S Y S _NAME 

$DELTA_DOC 

$ENTRY ADDRESS 


32 

4 

2_14 7 _483_64 7 

1_048_5 7 6 

32 

ANUYK43 

2 # 0 . 0000 _ 0000 _ 0000 _ 0000 _ 0000_0 
000 _ 0000 _ 001 # 

SYSTEM.CLASS_I_UNHANDLED_ADDRE 
SS 


$ENTRY_ADDRESS1 SYSTEM.CLASS_II_UNHANDLED_ADDR 

ESS 

$ENTRY_ADDRESS2 SYSTEM.CLASS_III_UNHANDLED_ADD 

RESS 

$FIELD_LAST 2_14 7 _483_64 7 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FLOAT_NAME NO_SUCH_FLOAT_TYPE 

$FORM_STRING "" 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER_THAN_DURATION 1310 7 1.5 

$GREATER_THAN_DURATION_BASE_LAST 131_0 7 3.0 
$GREATER_THAN_FLOAT_BASE_LAST 1 .5E+ 7 5 

SGREATER THAN FLOAT_SAFE_LARGE 7 .5E+ 7 5 


A-2 






0. OEO 


$GREATER_THAN_SHORT_FLOAT_SAFE_LARGE 
$HIGH_PRIORITY 15 

$ILLEGAL_EXTERNAL_FILE_NAME1 \NODIRECTORY\FILENAME\ 

$ I LLEGAL_EXTERNAL_FI LE_NAME 2 THIS-FILE-NAME-IS-TOO-LONG-FOR- 

MY-SYSTEM 

$INAPPROPRIATE_LINE_LENGTH -1 

$INAPPROPRIATE_PAGE_LENGTH -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST" ) 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1.TST") 

$INTEGER_FIRST -2147483647 

$INTEGER_LAST 2147483647 

$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE MACRO_N ORMAL 

$LESS_THAN_DURATION -131071.5 

$LESS_THAN_DURATION_BASE_FIRST -131_073.0 
$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT fonnati'(f_lb,0,0,0,0,0,0) 

$MACHINE_CODE_TYPE fonnati 

$MANTISSA_DOC 31 

$MAX DIGITS 15 


fonnati'(f_lb,0,0,0,0,0,0) 
fonnati 


$MAX_INT 
$MAX_INT_PLUS_1 
$MIN INT 


9223372036854775807 

9223372036854775808 

-9223372036854775807 


$NAME 


NO_SUCH_TYPE_AVAILABLE 


$NAME LIST 


ANUYK43 



$NAME_SPECIFICATI0N1 

X2120A 


$NAME_SPECIFICATI0N2 

X2120B 


$NAME_SPECIFICATI0N3 

X3119A 


$NEG_BASED_INT 

16#FFFFFFFFFFFFFFFD# 


$ N EW_MEM_ SIZE 

1_048_576 


$NEW_STOR_UNIT 

32 


$NEW_SYS_NAME 

ANUYK43 


$PAGE_TERMINATOR 

ASCII.FF 


$RECORD_DEFINITION 

record f:i6_bit; a: 

i3_bit; 


k:i3 bit; b:i3 bit; i: 

il_bit; 


s:i3_bit; y:il3 bit; 

record; 

end 

$RECORD_NAME 

formatii 


$TASK_SI2E 

32 


$ TAS K_S TORAGE_SIZ E 

1024 


$TICK 

0.000048828125 


$VARIABLE_ADDRESS 

16#0020# 


$VARIABLE_ADDRESS1 

16#0021# 


$VARIABLE_ADDRESS2 

16#0023# 


$ Y OUR_PRAGMA 

EXECUTIVE 



A-4 



APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in 
this Appendix, are provided by the customer. Unless specifically 
noted otherwise, references in this appendix are to compiler 
documentation and not to this report. 


B-l 


Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


Option 

Function 

EXECUTIVE 

Enables pragma EXECUTIVE and allows 
visibility to units which have been 
compiled with the RTE ONLY option. 
Default: NO_EXECUTIVE 

MEASURE 

Generates code to monitor execution 
frequency at the subprogram level for 
the current unit. Default: NO MEASURE 

NO_CHECKS 

NO_CHECX5 suppresses all run-time 
error checking. CHECKS provides 
run-time error checking. 

Default: CHECKS 

NO_CODE_ON_WARNING 

NO CODE ON_WARNING means no code is 
generated when there is a diagnostic 
of severity WARNING or higher. 

CODE ON WARNING generates code 
only if there are no diagnostics 
of a severity higher than WARNING. 
Default: CODE_ON_WARNING 

<0_C0NTAINER_ 

GENERATION 

NO_CONTAINER_GENERATION means that no 
container is produced even if there 
are no diagnostics. 

CONTAINER_GENERATION produces a 
container if diagnostic serverity 
permits. 

Default: CONTAINER_GENERATION 


Table F-4a - Special Processing Options 


F.14 Compiler Options 


F-47 







Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Option Function 


NO_DEBUG If N0_DE3UG is specified, only that I 

j information needed to link, export I 

and execute the current unit is ! 

included in the compiler output. 1 

I I 

I With the DEBUG option in effect, 

! internal representations and 

I additional symbolic information are i 

I stored in the container. I 

I Default: DEBUG j 

I i 

I NO_TRACE_BACK Disables the location of source | 

I exceptions that are not handled by | 

I built-in exception handlers. I 

| Default: TRACE BACK ! 

i 

! OPTIMIZE Enables global optimizations in I 

I accordance with the optimization j 

I pragmas specified in the source i 

I program. If the pragma OPTIMIZE is I 

not included, the optimizations I 

I emphasize TIME over SPACE. I 

I When NOJDPTIMIZE is in effect, no I 

I global optimizations are performed, I 

I regardless of the pragmas specified. I 

I Default: NO_OPTIMIZE j 

I RTE_ONLY Restricts visibility of this unit i 

I only to those units compiled with I 

I the EXECUTIVE option. I 

I Default: NO_RTE_ONLY j 

H-+ 


Table F-5b - Special Processing Options (Continued) 


F-48 


F.14 Compiler Options 








Ada/L ?SE Handbook 


Version 3.5 
29 March 1991 


Option Function 


i i 

ATTRIBUTE Produces a Symbol Attribute Listing. 

! (Produces an attribute cross-reference j 

! listing when both ATTRIBUTE and 

! CROSS_REFERENCE are specified.) ! 

! Default: NO ATTRIBUTE. 

I “ l 

I t 

' CROSS_REFERENCE Produces a Cross-Reference Listing. i 

! (Produces an attribute cross-reference | 

! listing when both ATTRIBUTE and j 

! CROSS_REFERENCE are specified.) j 

I Default: NO CROSS REFERENCE. | 

I i 

I DIAGNOSTICS Produces a Diaanostic Summary Listing. | 

I Default: NO DIAGNOSTICS. j 

I i 

I MACHINE_CODE Produces a Machine Code Listing if | 

! code is generated. Code is generated | 

i when CONTAINER_GENERATION option is I 

I in effect and (1) there are no j 

! diagnostics of severity ERROR, SYSTEM, I 

i or FATAL, and/or (2) NO_CODE_ON_WARNING | 

I option is in effect and there are no ! 

i diagnostics of severity higher than I 

j NOTE. A diagnostic of severity NOTE 

I is reported when a Machine Code ! 

I Iisting is requested and no code is I 

I generated. OCTAL is an additional I 

! option that may be used with j 

! MACHINE_CODE to output ocatal values I 

! on the listing instead of hex values. I 

I Default: NO MACHINE CODE. I 

! ! 

I NOTES Includes diagnostics of NOTE severity i 

I level in the Source Listing. 

I Default: NO NOTES. I 

I 

f I 

I SOURCE Produces listing of Ada source I 

| statements. Default: NO SOURCE. I 

I " I 

I SUMMARY Produces a Summary Listing; always i 

I produced when there are errors in the I 

compilation. Default: NO_SUMMARY. ! 

I I 

--- 


Table F-6 - Ada/L Listing Control Options 


F.14 Compiler Options 


F-49 







Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Option 

Function ! 

MSG 

Sends error messages and the 

Diagnostic Summary Listing to the ! 

file specified. The default is to j 

send error messages and the Diagnostic I 

Summary Listing to Message Output | 

(usually the terminal). ! 

OUT 

Sends ail selected listings to a j 
single file specified. The default j 
is to send listings to Standard i 

1 

Output (ususally the terminal). j 

1 


Table F-7 - Conerol_Part (Redirection) Options 


F-50 F.14 Compiler Options 








LINKER OPTIONS 


The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation 
and not to this report. 


B-2 





Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


F. 16 Linker Options 


Option 

Function 

DE3UG 

Produces a linked container to be 
debugged. Default: NO_DEBUG. 

MEASURE 

Produces a linked container to be 
analyzed. Default: NO MEASURE. 

PARTIAL 

Produces an incomplete linked 
container with unresolved references. 
Default: NO_PARTIAL. 

RTL_SELECTIVE 

Similar to the SELECTIVE option 
except that is only refers to RTLIB 
units. This option is not supported 
during phase links. 

Default: NO_RTL_SELECTIVE. 

SEARCH 

Explicitly searches for the units to 
be included in the linked container. 
Default: SEARCH for final links; 
NO_SEARCH for phase links. 

SELECTIVE 

Maps into the program only the 
subprograms called by the main 
subprogram. Default: SELECTIVE 
for final links; NO_SELECTIVE 
for phase links. 


Table F-10 - Ada/L Linker Special Processing Options 


F.16 Linker Options 


F-53 









Version 3.5 

29 March 1991 

Ada/L PSE Handbook 

1 

Option 

Function i 

i 

! 

i 

i 

No option 

1 

Linker summary listing always 1 

produced. j 

i 

1 

| 

! 

i 

DEBUGMA? 

Generates a debugmap listing. i 

Default: NO_DEBUGMAP. i 

1 

i 

l 

elab_l:st 

1 

Generates an elaboration order I 

listing. Default: NO ELA3 LIST. j 

1 

1 

1 

1 

1 

LOADMAP 

I 

Generates a loadmap listing. | 

Default:NO_LOADMAP. j 

1 

1 

1 

1 

1 

1 

1 

1 

! 

1 

1 

i 

LOCAL_SYMBOLS 

1 

Generates a symbols listing with I 

all internal as well as external 1 

definitions in the program. j 

LOCAL_SYMBOLS is to be used in | 

conjunction with the SYMBOLS | 

option. If LOCAL_SYMBOLS is | 

specified with NO SYMBOLS, a 

WARNING is produced and the SYMBOLS 1 
option is activated. | 

Default: NO LOCAL SYMBOLS ! 

i 

1 

1 

l 

SYMBOLS 

I 

Produces a Linker symbols listing. ! 

Default: NO SYMBOLS. I 

~ 

1 

1 

1 

I 

UNITS 

1 

Produces a Linker units listing. 1 

Default: NO UNITS. j 

1 


Table F-ll 

- Linker Listings Options 

F-54 


F.16 Linker Options 







Ada/L PSE Handbook Version 3.5 

29 March 1991 


Option 

Function 

MSG 

Sends error messages to the file 
specified. The default is to send 
error messages to Message Output 
(usually the terminal). 

OUT 

Sends all selected listings to the 
single file specified. The default 
is to send listings to Standard 

Output (usually the terminal). 


Table F-12 - Control_Part (Redirection) Options 


F.16 Linker Options 


F-5 5 









Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.17 Exporter Options 


Option 

Function 

DEBOG 

Permits the generation of a load 
module with all debugging facilities 
available. When NO_DEBUG is 
specified or is in effect by default, 
no debugging facilities are made 
available. Export the program for 
debugging with either the Run-Time 
Debugger {RTD) or the Embedded Target 
Debugger (ETD). 

Default: NO_DEBUG. 

DYNAMIC 

Deferred. 

LOAD 

Deferred. 

MEASURE 

Permits the generation of a load 
module with all performance 
measurement facilities available. 

When NO_MEASURE is specified or is in 
effect by default, no performance 
measurement facilities are made 
available. Default: NO_MEASURE 

REVO 

In conjunction with the SIM_IMAGE 
argument to the IMAGE named parameter, 
this option specifies production of a 
Target System File suitable for input 
to Revision 0 of SIM/L and PORTAL/43. 


Table F-13 - Ada/L Special Processing Options 


F-56 


F. 17 


Exporter Options 










Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


| Option Function 


MSG Sends error messages to the file 

specified. The default is to send 
error messages to Message Output 
(usually the terminal). 

OUT Sends all selected listings to the 

single file specified. The default 
is to send listings to Standard 
Output (usually the terminal). 


Table F-14 - Control Part (Redirection) Options 


F.17 Exporter Options 


F-57 







Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Option 

Function 

DEBUGMAP 

Generates a segment-by-segment listing 
that describes how the units are mapped 
onto hardware. Default: NO DEBUGMAP. 

LOADMAP 

Generates a listings that describes how 
the units are mapped onto the hardware. 
Default: NO_LOADMAP. 

LOCAL_SYMBOLS 

As an option in addition to SYMBOLS 
listing, causes the symbols listing to 
include all internal as well as external 
definitions in the program. 

Default: NO_LOCAL_SYMBOLS 

NO_DETAILED 

Suppresses the listing of subprograms 
contained within each EXEC psect in 
the DEBUGMAP and LOADMAP listings. 
Default: DETAILED. 

RTEXEC 

Produces executive listings instead 
of application listings. It can only 
be used with the LOADMAP and DEBUGMAP 
options (e.g., /LOADMAP/RTEXEC). 

Default: NO_RTEXEC 

SYMBOLS 

Generates a symbols listing of all 
external definitions in the program. 
Default: NO_SYMBOLS. 

UNITS 

Generates a listing of all units. 

Default: NOJJNITS. 


Table F-15 - Ada/L Exporter Listing Options 


F-58 


F. 17 


Exporter Options 







APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
impiementucion-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of this Ada implementation, 
as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 

package STANDARD is 

type INTEGER is range -2_147_483_647 .. 2_147_483_647; 
type LONG_INTEGER is range 

-9_223_372_036_854_775_807 .. 9_223_372_036_854_775_807; 
type FLOAT is digits 6 range 

-(16#0.FF_FFF8 #E63) .. (16#0.FF_FFF8#E63) ; 

type LONG_FLOAT is digits 15 range 

-(16#0.FF_FFFF_FFFF_FFE0#E63) .. (16#0.FF_FFFF_FFFF_FFE0#E63); 
type DURATION is delta 2.0 ** (-14) range 
-131_071.0 .. 131_071.0; 

end STANDARD; 


C-l 




Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


Appendix P 

The Ada Language for tne AN/UYR-43 Target 


The source language accepted by the compiler is Ada, as 
described in the Military Standard, Ada Programming Language, 
ANSI/MIL-STD-1815A-1983, 17 February 1983 ("Ada Language 
Reference Manual"). 

The Ada definition permits certain implementation 
dependencies. Each Ada implementation is required to supply a 
complete description of its dependencies, to be thought of as 
Appendix F to the Ada Language Reference Manual. This section is 
that description for the AN/UYK-43 target. 


F.l Options 

There are several compiler options provided by all ALS/N 
Compilers that directly affect the pragmas defined in the Ada 
Language Reference Manual. These compiler options currently 
include the CHECKS and OPTIMIZE options which affect the SUPPRESS 
and OPTIMIZE pragmas, respectively. A complete list of ALS/N 
Compiler options can be found in Section 9. 

The CHECKS option enables all run-time error checking for the 
source file being compiled, which can contain one or more 
compilation units. This allows the SUPPRESS pragma to be used in 
suppressing the run-time checks discussed in the Ada Language 
Reference Manual, but note that the SUPPRESS pragma(s) must be 
applied to each compilation unit. The NO_CHECKS option disables 
all run-time error checking for all compilation units within the 
source file and is equivalent to SUPPRESSing all run-time checks 
within every compilation unit. 

The OPTIMIZE option enables all compile-time optimizations 
for the source file being compiled, which can contain one or more 
compilation units. This allows the OPTIMIZE pragma to request 
either TIME-oriented or SPACE-oriented optimizations be 
performed, but note that the OPTIMIZE pragma must be applied to 
each compilation unit. If the OPTIMIZE pragma is not present, 
the ALS/N Compiler's Global Optimizer tends to optimize for TIME 
over SPACE. The NOJ3PTIMIZE option disables all compile-time 
optimizations for all compilation units within the source file 
regardless of whether or not the OPTIMIZE pragma is present. 

In addition to those compiler options normally provided by 
the ALS/N Common Ada Baseline compilers, the Ada/L compiler also 
implements the EXECUTIVE, DEBUG, and MEASURE options. 


F.l Options 


F-01 




Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


The EXECUTIVE compiler option enables processing of PRAGMA 
EXECUTIVE and allows WITH of units compiled with the RTE_ONLY 
option. If NO_EX£CUTIVE is specified on the command line, the 
pragma will be ignored and will have no effect on the generated 
code. 

The DEBUG compiler option enables processing of PRAGMA DE3UG 
to provide debugging support. If NO_DEBUG is specified, the 
DEBUG pragmas shall have no effect. Program units containing 
DEBUG pragmas and compiled with the DEBUG compiler option may be 
linked with program units containing DEBUG pragmas and compiled 
with the NO_DEBUG option; only those program units compiled with 
the /DEBUG option shall have additional DEBUG support. 

The /MEASURE compiler option enables run-time calls to 
Run-Time Performance Measurement Aids (RTAids) to record the 
entrance into all subprograms whose bodies are in the 
compilation. Program units compiled with the /MEASURE option may 
be linked with program units not compiled with the /MEASURE 
option; at run-time, only those subprograms in program units 
compiled with the /MEASURE option shall have this additional 
MEASURE support. 


F-02 


F.l 


Options 




Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


P.2 Pragmas 

Both implementation-defined and Ada language-defined pragmas 
are provided by all ALS/N compilers. These paragraphs describe 
the pragmas recognized and processed by the Ada/L compiler. The 
syntax defined in Section 2.8 of the Ada Language Reference 
Manual allows a pragma as the only element in a compilation unit, 
before a compilation unit, at defined places within a compilation 
unit, or following a compilation unit. Ada/L associates pragmas 
with compilation units as follows: 

a. If a pragma appears before any compilation unit in a 
compilation, it will affect all following compilation units, 
as specified below and in section 10.1 of the Ada Language 
Reference Manual. 

b. If a pragma appears inside a compilation unit, it will be 
associated with that compilation unit, and with the listings 
associated with that compilation unit, as described in the 
Ada Language Reference Manual, or below. 

c. If a pragma follows a compilation unit, it will be associated 
with the preceding compilation unit, and effects of the 
pragma will be found in the container of that compilation 
unit and in the listings associated with that container. 

The pragmas MEMORY_SIZE, STORAGE JJNIT, and SYSTEM_NAME are 
described in Section 13.7 of the Ada Language Reference Manual. 
They may appear only at the start of the first compilation when 
creating a program library. In the ALS/N, however, since program 
libraries are created by the Program Library Manager and not by 
the compiler, the use of these pragmas is obviated. If they 
appear anywhere, a diagnostic of severity level WARNING is 
generated. 


F.2 Pragmas 


F-Q 3 




Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.2.1 Language-Defined Pragmas 

The following notes specify implementation-specific changes 
to those pragmas described in Appendix B of the Ada Language 
Reference Manual. Unmentioned pragmas are implemented as defined 
in the Ada Language Reference Manual. 

pragma INLINE (arg {,arg}); 

The arguments designate subprograms. There are three 
instances in which the INLINE pragma is ignored. Each 
of these cases produces a warning message which states 
that the INLINE did not occur. 

a. If the compilation unit containing the INLINEd 
subprogram depends on the compilation unit of its 
caller, a routine call is made instead. 

b. If the INLINEd subprogram's compilation unit 
depends on the compilation unit of its caller (a 
routine call is made instead). 

c. If an immediately recursive subprogram call is made 
within the body of the INLINEd subprogram (the 
pragma INLINE is ignored entirely). 

pragma INTERFACE (language_name, subprogram_name); 

The language_name specifies the language and type of 
interface to be used in calls used to the externally 
supplied subprogram specified by subprogram_name. The 
allowed values for language name are MACRO_NORMAL and 
MACRO_QUICK. MACRO_NORMAL Indicates that parameters 
will be passed on the stack and the calling conventions 
used for normal Ada subprogram calls will apply. 

MACRO_QUICK is used in RTLIB routines to indicate that 
parameters are passed in registers. See Section 7 
"Parameter Passing" for details on the space required 
to pass various types of parameters. 

You must ensure that an assembly-language body 
container will exist in the program library before 
linking. 


F-04 


F.2.1 


Language-Defined Pragmas 





Ada/L PSE Handbook 


Versio 
29 Marcn 


pragma OPTIMIZE (arg); 

The argument is either TIME or SPACE. If TIME is 
specified, the optimizer concentrates on optimizing 
code execution time. If SPACE is specified, the 
optimizer concentrates on optimizing code size. The 
default is If the OPTIMIZE option is enabled and pragma 
OPTIMIZE is not present, global optimization is still 
performed with the default argument, SPACE. Program 
units containing OPTIMIZE pragmas and compiled with the 
OPTIMIZE option may be linked with program units 
containing OPTIMIZE pragmas and compiled with the 
NO_OPTIMIZE option; but only those program units 
compiled with the OPTIMIZE option will have global 
optimization support. 

pragma PRIORITY (arg); 

The argument is an integer static expression in the 
range 0..15, where 0 is the lowest use-specifiable task 
priority and 15 is the highest. If the value of the 
argument is out of ranqe, the pragma will have no 
effect other than to generate a WARNING diagnostic. A 
value of zero will be used if priority is not defined. 
The pragma will have no effect when not specified in a 
task (type) specification or the outermost declarative 
part of a subprogram. If the pragma appears m the 
declarative part of a subprogram, it will have no 
effect unless that subprogram is designated as the main 
subprogram at link time. 

pragma SUPPRESS (arg {,arg}); 

This pragma is unchanged with the following exceptions: 

Suppression of OVERFLOW_CHECK applies only to integer 
operations; and PRAGMA SUPPRESS has effect only within 
the compilation unit in which it appears, except that 
suppression of ELABORATION_CHECK applied at the 
declaration of a subprogram or task unit applies to all 
calls or activations. 


F.2.1 


Language-Defined Pragmas 






Version 3.5 
29 March 1991 


Ada/L PSE HandocoK 


F.2.2 Implementation-Defined Pragmas 

This paragraph describes the use and meaning of those pr 

recognized by Ada/L which are not specified in Appendix B of 

Ada Language Reference Manual. 

pragma DEBUG; 

This pragma enables the inclusion of full symbolic 
information and support for the Embedded Target 
Debugger. The DEBUG PRAGMA is enabled by the /DEBUG 
command line option and has no effect if this option is 
not provided. This pragma must appear within a 
compilation unit, before the first declaration or 
statement. 

pragma EXECUTIVE [(arg)]; 

This pragma allows you to specify that a compilation 
unit is to run in the executive state of the machine 
and/or utilize privileged instructions. The pragma has 
no effect if the Compiler option NONEXECUTIVE is 
enabled, either explicitly or by default. 

If PRAGMA EXECUTIVE is specified without an argument, 
executive state is in effect for the compilation unit 
and the code generator does not generate privileged 
instructions for the compilation unit. If PRAGMA 
EXECUTIVE (INHERIT) is specified, a subprogram in the 
compilation unit inherits the state of its caller and 
the code generator does not generate privileged 
instructions for the compilation unit. If PRAGMA 
EXECUTIVE (PRIVILEGED) is specified, the executive 
state is in effect and the code generator may generate 
privileged instructions for the compilation unit. 
Currently, the Ada/L compiler does not generate such 
instructions. In the absence of PRAGMA EXECUTIVE, the 
compilation unit executes in task state and the code 
generator does not generate privileged instructions. 

If PRAGMA EXECUTIVE (INTERRUPT_CMR) is specified, the 
Ada/L compiler generates code which uses executive 
state registers instead of task state registers (i.e. 
SCI instead of SCT). 

PRAGMA EXECUTIVE is applied once per compilation unit, 
so its scope is the entire compilation unit. PRAGMA 
EXECUTIVE may appear between the context clause and the 
outermost unit. If there is no context clause, PRAGMA 
EXECUTIVE must appear within that unit before the first 
declaration or statement. The placement of the pragma 
before the context clause has no effect on any or all 
following compilation units. If PRAGMA EXECUTIVE 
appears in the specification of a compilation unit, it 


agmas 

the 


F-06 


F.2.2 Implementation-Defined Pragmas 





Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


must also appear in the body of that unit, and vice 
versa. If the pragma appears in a specification but is 
absent from the body, you are warned and the pragma is 
effective. If the pragma appears in the body of a 
compilation unit, but is absent from the corresponding 
specification, you are warned and the pragma has no 
effect. PRAGMA EXECUTIVE does not propagate to 
subunits. If a subunit is compiled without PRAGMA 
EXECUTIVE and the parent of the subunit is compiled 
with PRAGMA EXECUTIVE, you are warned and PRAGMA 
EXECUTIVE has no effect on the subunit. 

pragma FAST_INTERRUPT_ENTRY (entry_name, IMMEDIATE); 

This pragma provides for situations of high interrupt 
rates with simple processing per interrupt, (such as 
adding data to a buffer), and where complex processing 
occurs only after large numbers of these interrupts 
(such as when the buffer is full). This allows for 
lower overhead and faster response capability by 
restricting you to disciplines that are commensurate 
with limitations normally found in machine level 
interrupt service routine processing. 

pragma MEASURE (extraction_set, [arg {,arg}]); 

This pragma enables one or more performance measurement 
features. Pragma MEASURE specifies a user-defined 
extraction set for the Run-Time Performance Measurement 
Aids and Embedded Target Profiler. The user-defined 
extraction set consists of all occurences pragma 
MEASURE throughout the program. Extraction_set is a 
numeric literal, which is an index into a user-supplied 
table. Arg is a variable or a list of variables whose 
values are reported at this point in the execution. 
These values describe the nature (TYPE) of the values 
collected to an independent data reduction program. 
Pragma MEASURE is enabled by the /MEASURE command line 
option and has no effect if this option is not 
provided. This pragma should be applied to a package 
body rather than a package specification. 

pragma STATIC (INTERRUPT_HANDLER_TASK); 

The pragma STATIC is only allowed immediately after the 
declaration of a task body containing an immediate 
interrupt entry. The argument is 

INTERRUPT_HANDLER_TASK. The effect of this pragma will 
be to allow generation of nonreentrant and nonrecursive 
code in a compilation unit, and to allow static 
allocation of all data in a compilation unit. This 
pragma shall be used to allow for procedures within 
immediate (fast) interrupt entries. The effect will be 


F.2.2 Implementation-Defined Pragmas 


F-07 




Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


for the compiler to generate nonreentrant code for the 
affected procedure bodies. If a STATIC procedure is 
called recursively, the program is erroneous. 

pragma TITLE (arg); 

This is a listing control pragma. It takes a single 
argument of type string. The string specified will 
appear on the second line of each page of the source 
listing produced for the compilation unit within which 
it appears. The pragma should be the first lexical 
unit to appear within a compilation unit (excluding 
comments). If it is not, a warning message is issued. 

pragma TRIVIAL_ENTRY (NAME: entry_simple_name); 

This pragma is only allowed within a task specification 
after an entry declaration and identifies a 
Trivial_Entry to the system. A trivial entry 
represents a synchronization point, contained in a 
normal Ada task, for rendezvous with a fast interrupt 
entry body. The body of a trivial entry must be null. 

pragma UNMAPPED (arg {,arg}); 

The effect of this pragma is for unmapped (i.e., not 
consistently mapped within the virtual space) 
allocation of data in a compilation unit. The 
arguments of this pragma are access types to be 
unmapped. If a program tries to allocate more UNMAPPED 
space than is available in the physical configuration, 

STORAGE_ERROR will be raised at run-time. PRAGMA 
UNMAPPED must appear in the same declarative region as 
the type and after the type declaration. 


F-08 


F.2.2 


Implementation-Defined Pragmas 



Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


F.2.3 Scope of Pragmas 

The scope for each pragma previously described as differing 

f- 0 m rhe Ada Language Reference Manual 1= given below: 

DEBUG Applies to the compilation unit in which the pragma 

appears. 

EXECUTIVE Applies to the compilation unit in which the pragma 
appears, i.e., to all subprograms and tasks within 
the unit. Elaboration code is not affected. 

The pragma is not propagated from specifications 
to bodies, or from bodies to subunits. The pragma 
must appear consistently in the specification, 
body, and subunits associated with a library unit. 

FAST_INTERRUPT_ENTRY 

Applies to the compilation unit in which the pragma 
appears. 

INLINE Applies only to subprogram names in its 

arguments. If the argument is an overloaded 
subprogram name, the INLINE pragma applies to 
all definitions of that subprogram name which 
appear in the same declarative part as the 
INLINE pragma. 

INTERFACE Applies to all invocations of the named 
imported subprogram. 

MEASURE No scope, but a WARNING diagnostic is 

generated. 

MEMORY_SIZE No scope, but a WARNING diagnostic is 
generated. 

OPTIMIZE Applies to the entire compilation unit in 

which the pragma appears. 

PRIORITY Applies to the task specification in which it 

appears, or to the environment task if it 
appears in the main subprogram. 

STATIC Applies to the compilation unit in which the pragma 

appears. 

STORAGE_UNIT No scope, but a WARNING diagnostic is 
generated. 

SUPPRESS Applies to the block or body that contains 

the declarative part in which the pragma 
appears. 


F.2.3 Scope of Pragmas 


F-09 


Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


SYSTEM_NAME 

TITLE 

TRIVIAL_ENTRY 

UNMAPPED 


No scope, but a WARNING diagnostic is 
generated. 

The compilation unit within which the pragma 
occurs. 

Applies to the compilation unit in which the pragma 
appears. 

Applies to ail objects of the access type 
named as arguments. 


F-10 


F.2.3 Scope of Pragmas 




Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


P.3 Attributes 


The following notes augment the language-required definitions 
of the predefined attributes found in Appendix A of the Ada 
Language Reference Manual. 


T'MACHIN£_EMAX 
T'MACHINE_£MIN 
T'MACHIN£_MANTISSA 
T'MACHINE_OVERFLOWS 
T'MACHIN£_RADIX 
T*MACHINE ROUNDS 


is 

63. 

is 

-64. 

is 

6 . 

is 

TRUE. 

is 

16. 

is 

FALSE 


F.3 Attributes 


F-ll 





Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.4 Predefined Language Environment 

The predefined Ada language environment consists of the 
packages STANDARD and SYSTEM, which are described below. 


F.4.1 Package STANDARD 

The package STANDARD contains the following definitions in 
addition to those specified in Appendix C of the Ada Language 
Reference Manual. 

TYPE boolean IS (false, true); 

FOR boolean’SIZE USE 1; 

TYPE integer IS RANGE -2_147_483_647 .. 2_147_483_647; 

TYPE long_integer IS RANGE 

-9_223_372_036_854_775_807 .. 9_223_372_036_854_775_807; 

TYPE float IS DIGITS 6 RANGE 

-(16#0.FF_FFF8#E63) .. (16#0.FF_FFF8#E63); 
TYPE long_float IS DIGITS 15 RANGE 

-(16#0.FF_FFFF_FFFF_FFE0#E63) .. 

(16#0.FF_FFFF_FFFF_FFE0#E63) ; 

SUBTYPE natural IS integer RANGE 0 .. integer’LAST; 

SUBTYPE positive IS integer RANGE 1 .. integer'LAST; 

SUBTYPE long_natural IS long_integer 

RANGE 0 .. long_integer’LAST; 

SUBTYPE long_positive IS long_integer 

RANGE 1 .. long_integer'LAST; 

FOR character'SIZE USE 8; 

TYPE string IS ARRAY (positive RANGE <>) OF character; 
PRAGMA PACK(string); 

TYPE duration IS DELTA 2.0 ** (-14) 

RANGE -131JJ71.0 .. 131_071.0; 

— The predefined exceptions: 

constraint_error : exception; 

numeric_error : exception; 

program_error : exception; 

storage_error : exception; 

tasking_error : exception; 


F-12 


F.4.1 Package STANDARD 






Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


F.4.2 Package SYSTEM 

The package SYSTEM for Ada/L is as follows: 

TYPE name IS (anuyk43); 

system_name : CONSTANT system.name := system.anuyk43; 
storage_unit : CONSTANT r = 32? 
memory size : CONSTANT := 1_Q48_576; 

TYPE address IS RANGE 0..system.memory_size - 1; 

— System Dependent Named Numbers 

min_int : CONSTANT := -((2**63)-1); 

max_int : CONSTANT := (2**63)-1; 

max_digits : CONSTANT := 15; 

maxjnantissa : CONSTANT := 31; 

fine_delta : CONSTANT 

:= 2 # 0 . 0000 _ 0000 _ 0000 _ 0000 _ 0000 _ 0000 _ 0000 _ 001 #; 

tick : CONSTANT := 4.8828125e-05; 

— 1/20480 seconds is the basic clock period. 
null_addr : CONSTANT address := 0; 

— Other System Dependent Declarations 

SUBTYPE smaller__integer IS 

integer RANGE (integer'FIRST/64)..(integer'LAST/64); 

SUBTYPE priority IS integer RANGE 0..15; 

TYPE entry_kind is (normal, immediate); 

physical_memory size : CONSTANT := 2**31; 

TYPE physical_a<Idress IS 

RANGE 0..system.physical_meraory_size - 1 ; 

null_phys_addr : CONSTANT physical address := 0; 

TYPE word IS NEW INTEGER; 


— Address clause (interrupt) addresses 


Class_I_Unhandled_address 

Class_II_Unhandled_address 

CP_Operand_Memory_Resume_address 

CP_IOC_Command_Resume_address 

CP_Instruction_Memory_Resume_address 

CP_IOC_Interrupt_Code_Resume_address 

CP_Operand_Memory_Error_address 


: CONSTANT 
address :* 16#0800# 
; CONSTANT 
address : = 1611800# 
: CONSTANT 
address : = 16*1000# 
: CONSTANT 
address := 16#1100# 
: CONSTANT 
address :» 16*1200# 
: CONSTANT 
address := 16*1300# 


; CONSTANT 


F.4.2 Package SYSTEM 


F-13 









Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


CP_Instruction_Memory_Error_address 

CP_IOC_Conunand_Operand_Er ror_address 

IOC_Memory_Error_address 

IPI_Fault_address 

IOC_Memory_Resume_address 

Intercomputer_Timeout_address 

Confidence_Test_Fault_address 

CPU_IOC_Microprocessor_Stop_address 

Module_Interrupt_address 

Power_Tolerance_Interrupt_address 

Class_III_Unhandled_address 

CP_Illegal_Instruction_Error_address 

Privileged_Instruction_Error_address 

Data_Pattern_Breakpoint_address 

Operand_Breakpoint_Match_address 

Operand_Read_address 

DCU_Status_Interrupt_address 

Operand_Write_Protection_address 

Operand_Linit_Protection_address 

Instruction_Breakpoint_Match_address 


address := 
: CONSTANT 
address : = 
: CONSTANT 
address := 
: CONSTANT 
address : = 
: CONSTANT 
address : = 
: CONSTANT 
address := 
: CONSTANT 
address : = 
: CONSTANT 
address : = 
: CONSTANT 
address : = 
: CONSTANT 
address := 
: CONSTANT 
address :~ 
: CONSTANT 
address := 
: CONSTANT 
address :~ 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address := 
: CONSTANT 
address : * 
: CONSTANT 
address : 3 
: CONSTANT 
address 


16#1400#; 
16#1500#; 
1611600#; 
1611700#; 
1611900#; 
16#1A00 #; 
16#1B00#; 
16#1C00#; 
16#1D00#; 
16#1E00#; 
16#1F00#; 
16#2800#; 
16#2200#; 
1612300#; 
1612400#; 
16#2500#; 
16#2600#; 

16#2700#; 
16#2900#; 
16#2A00#; 
16#2B00#; 


F-14 


F.4.2 Package SYSTEM 





Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


— RTAS interrupt addresses (16I2B01# .. 16#2B1F#) 
rtdebug_pseudo_interrupt : CONSTANT address := 16I2B0I#; 
PMAids_pseudo address : CONSTANT address := 16#2B10#; 


RPD_Underflow_address 
Instruction_Execute_Protection_address 
Instruction_Limit_Protection_address 
Precisely_Timed_Interrupts address 


: CONSTANT 
address : = 
: CONSTANT 
address : = 
: CONSTANT 
address := 
: CONSTANT 
address := 


16I2COO# 
16#2D00# 
16#2E00 # 
16#2FOO # 


once_only pti : CONSTANT duration := 0.0; 

— Use<I to indicate that a PTI is not to be periodic. 
SUBTYPE pti_address IS address RANGE 16#2F01#..16#2F1F#; 
TYPE pti_state IS (active,inactive,unregistered); 


IOC_I1lega1_CAR_Instruction 
IOC_Memory_Protection 
IOC_Channel_Function_Error 
IOC_Illegal_Chain_Instruction 
IOC_Confidence_Test_Fault 
IOC_Breakpoint_Match 
IOC_CP_Interrupt 
lOC_External_Interrupt_Monitor 
IOC_External_Function_Monitor 
IOC_Output_Data_Monitor 
IOC_Input_Data_Monitor 


CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 
CONSTANT address 


1613000# 

16#310Q# 

16#3300# 

16#3400# 

1613800# 

16#3900# 

16#3B00# 

16#3C00# 

16I3D00# 

16#3E00# 

16#3F00# 


SUBTYPE IO_interrupts IS address RANGE 

IOC_Illegal_CAR_Instruction..IOC_Input_Data_Monitor; 
SUBTYPE channel numbers IS INTEGER RANGE 0..63; 


— The following exceptions are provided as a "convention" 

— whereby the Ada program can be compiled with all implicit 

— checks suppressed (i.e. pragma SUPPRESS or equivalent), 

— explicit checks included as necessary, the appropriate 

— exception raised when required, and then the exception is 

— either handled or the Ada program terminates. 


ACCESS_CHECK 

DISCRIMINANT_CHECK 

INDEX_CHECK 

LENGTH_CHECK 

RANGEJZHECK 

DIVISION CHECK 

OVERFLOW“CHECK 

ELABORATION_CHECK 

STORAGE CHECK 


EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 

EXCEPTION; 


F.4.2 Package SYSTEM 


F-15 








Version 3.5 
29 March 1991 


Ada/L PSE Handboox 


— imolementation-def ined exceptions. 

UNRESOLVED_REFER£NCE : EXCEPTION; 

SYSTEM_ERROR : EXCEPTION; 

CAPACITY_ERROR : EXCEPTION; 

— The exception CAPACITY_ERROR is raised by the RTExec when 

— Pre-RunTime specified resource limits are exceeded. 


FUNCTION ADDRESS_OF 

— returns the system.address of the given Class III 

— interrupt for the specified channel 
(interrupt : IN IO_interrupts; 

for_channel : IN channel_numbers 
) RETURN address; 

— The address to be used in the 
-- representation (address) clause. 

PRAGMA INTERFACE (MACRO NORMAL,ADDRESS OF); 


FUNCTION "AND" 

— returns the logical 32 bit 'AND' between two integers. 
(operand_a : IN integer; 

operand_b : IN integer 
) RETURN integer; 

PRAGMA INTERFACE (MACRO_NORMAL, "AND"); 

FUNCTION "NOT" 

— returns the logical 32 bit 'NOT' of an integer. 
(operand_a : IN integer 

) RETURN integer; 

PRAGMA INTERFACE (MACRO_NORMAL , "NOT"); 

FUNCTION "OR" 

— returns the logical 32 bit 'OR' between two integers. 
(operand_a ; IN integer; 

operand_b ; IN integer 
) RETURN integer; 

PRAGMA INTERFACE (MACRO_NORMAL, "OR"); 


F-16 


F.4.2 Package SYSTEM 





Ada/L PSE Handbook 


Version 2.5 
29 March 1991 


P.5 Character Set 

Ada compilations may be expressed using the following 
characters in addition to the basic character set: 

lower case letters: 

abcdefghijklmnopqrstuvwxyz 
special characters: 

!$%?§[ ]**{}" 

The following transliterations are permitted: 

a. Exclamation point for vertical bar, 

b. Colon for sharp, and 

c. Percent for double-quote. 


r -. 


F.5 Character Set 






Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.6 Declaration and Representation Restrictions 

Declarations are described in Section 3 of the Ada Language 
Reference Manual, and representation specifications are described 
in Section 13 of the Ada Language Reference Manual and discussed 
here. 

In the following specifications, the capitalized word SIZE 
indicates the number of bits used to represent an object of the 
type under discussion. The upper case symbols D, L, R, 
correspond to those discussed in Section 3.5.9 of the Ada 
Language Reference Manual. 


F.6.1 Integer Types 

Integer types are specified with constraints of the form: 
RANGE L..R 

where: 


R <= SYSTEM.MAX_INT & L >= SYSTEM.MIN_INT 

For a prefix "t" denoting an integer type, length specifications 
of the form: 

FOR t' SIZE USE n ; 

may specify integer values n such that n in 2..64, 

R <= 2**(n-l)-l & L >= -(2**(n-l)-l) 
or else such that 

R <= (2**n)-1 & L >= 0 
and 1 < n <= 31. 

For a stand-alone object of integer type, a default SIZE of 32 is 
used when: 

R <= 2**31 - 1 & L >= -{2**31 - 1) 

Otherwise, a SIZE of 64 is used. 

For components of integer types within packed composite 
objects, the smaller of the default stand-alone SIZE and the SIZE 
from a length specification is used. 


F-18 


F.6.1 Integer Types 



Ada/L PSE Handbook 


Version 2.5 
29 March 1991 


P.6.2 Floating Types 

Floating types are specified with constraints of the form: 
DIGITS D 

where D is an integer in the range 1 through 15. 

For a prefix "t" denoting a floating point type, length 
specifications of the form: 

FOR t'SIZE USE n; 

are permitted only when the integer value n = 32 for D <= 6 or N 
= 64 for 7 <= D <= 15. 


F.6.3 Fixed Types 

Fixed types are specified with constraints of the form: 
DELTA D RANGE L..R 

where: 


MAX (ABS(R), ABS(L)) 

- <- 2**31 - 1. 

actual delta 

The actual delta defaults to the largest integral power of 2 less 
than or equal to the specified delta D. (This implies that fixed 
values are stored right-aligned.) 

For fixed point types, length specifications of the form: 
for T ! SIZE use N; 

are permitted only when N in 1 .. 32, if: 

R - actual_delta <= 2**(N-1)-1 * actual delta, and 
L + actual delta >= -2**(n-l) * actual)<Jelta 


or 


R - actual_delta <= 2**(N)-1 * actuai_delta, and 
L >= 0 


F.6.3 Fixed Types 


19 





Version 3.5 
29 March 1991 


Ada/L ?SE Handbook 


For stand-alone objects of fixed point type, a default size of 32 
:s used. For components of fixed point types within packed 
composite objects, the size from the length specificatior. will be 
used. 


i For specifications of the form: 

FOR t'SMALL USE n; 

are permitted for any value of X, such that X <= D. X must be 
specified either as a base 2 value or as a base 10 value. Note 
| that when X is specified as otner than a power of 2, actual_delta 
I will still oe the largest integreal power of two less than X. 


F.6.4 Enumeration Types 

In the absence of a representation specification for an 
enumeration type "t," the internal representation of t* FIRST is 
0. The default size for a stand-alone object of enumeration type 
”t" is 32, so the internal representations of t 1 FIRST and t 1 LAST 
both fall within the range: 

-(2**31 - 1) .. 2**31 - 1. 

For enumeration t’pes, length specifications of the form: 

FOR t 1 SIZE USE n; 

and/or enumeration representations of the form: 

FOR t USE <aggregate>; 

are permitted for n in 2..32, provided the representations 
and the SIZE conform to the relationship specified above. 

Or else for n in 1..32, is supported for enumeration 
types and provides an internal representation of: 

t 1 FIRST >= 0 .. t’LAST <= 2**(t'SIZE) - 1. 

For components of enumeration types within packed composite 
objects, the smaller of the default stand-alone SIZE or the SIZE 
from a length specification is used. 

Enumeration representations for types derived from the 
predefined type STANDARD.BOOLEAN will not be accepted, but length 
specifications will be accepted. 


F-20 


F.6.4 Enumeration Types 







Ada/'L PSE Handbook 


Version 2.5 
29 March 1991 


p.6.5 Access Types 

For access type, "t," length specifications of the form: 

FOR t'SIZE USE n; 

will not affect the runtime implementation of "t," therefore r. = 
32 is the only value permitted for SIZE, which is the value 
returned by the attribute. 

For collection size specifications of the form: 

FOR t'STORAGE_SIZE USE n; 

for any value of "n" is permitted for STORAGE_SIZE (and that 
value will be returned by the attribute call). The collection 
size specification will affect the implementation of "t" and its 
collection at runtime by limiting the number of objects for type 
"t" that can be allocated. 

The value of t'STORAGE_SIZE for an access type "t" specifies 
the maximum number of storage_units used for all objects in the 
collection for type "t." This includes all space used by the 
allocated objects, plus any additional storage required to 
maintain the collection. 


F.6.6 Arrays and Records 

For arrays and records, a length specification of the form: 

FOR t'size USE n; 

may cause arrays and records to be packed, if required, to 
accommodate the length specification. If the size specified is 
not large enough to contain any value of the type, a diagnostic 
message of severity ERROR is generated. 

The PACK pragma may be used to minimize wasted space between 
components of arrays and records. The pragma causes the type 
representation to be chosen such that the storage space 
requirements are minimized at the possible expense of data access 
time and code space. 

A record type representation specification may be used to 
describe the allocation of components in a record. Bits are 
numbered 0..31 from the right. Bit 32 starts at the right of the 
next higher numbered word. Each location specification must 
allow at least n bits of range, where n is large enough to hold 
any value of the subtype of the component being allocated. 
Otherwise, a diagnostic message of severity ERROR is generated. 
Components that are arrays, records, tasks, or access variables 
may not be allocated to specified locations. If a specification 


F.6.6 Arrays and Records 


F-21 




Version 3.5 
29 March 1991 


Ada/L PSE HanabcoK 


of this form is entered, a diagnostic message of severity ERROR 
is generated. 

For records, an alignment clause of the form: 

AT MOD n 

specify alignments of 1 word (word alignment) or 2 words 
(doubleword alignment). 

If it is determinable at compile time that the SIZE of a 
record or array type or subtype is outside the range of 
STANDARD.INTEGER, a diagnostic of severity WARNING is generated. 
Declaration of such a type or subtype would raise NUMERIC_ERROR 
when elaborated. 


F.6.7 Other Length Specifications 

Length Specifications are described in Section 13.2 of the 
Ada Language Reference Manual. 

A length specification for a task type "t," of the form: 

FOR t 1 STORAGE_SIZE USE n; 

specifies the number of SYSTEM.STGRAGE_UNITS that are allocated 
for the execution of each task object of type "t." This includes 
the runtime stack for the task object but does not include 
objects allocated at runtime by the task object. If a 
t'STORAGE_SIZE is not specified for a task type "t," the default 
value is 2K (words). 

A length specification for a task type "t" of the form: 

FOR t'SIZE USE n; 
is allowable only for n = 32. 


F-2 2 


F.6.7 Other Length Specifications 




Ada/L PSE Handbook 


Version 3.5 
29 Marcn 1991 


P.7 Systea Generated Names 

Refer to Section 13.7 of the Ada Language Reference Manual 
and the section above on the Predefined Language Environment for 
a discussion of package SYSTEM. 

The system name is chosen based on the target(s) supported, 
but it cannot be changed. In the case of Ada/L, the system name 
is ANUYK43. 


F.8 Address Clauses 

Refer to Section 13.5 of the Ada Language Reference Manual 
for a description of address clauses. All rules and restrictions 
described there apply. In addition, the following restrictions 
apply. 

An address clause may designate a single task entry. Such an 
address clause is allowed only within a task specification 
compiled with the EXECUTIVE compiler option. The meaningful 
values of the simple_expression are the allowable interrupt en 
addresses as defined in Table F-l. The use of other values wi 
result in the raising of a PROGRAM_ERROR exception upon creation 
of the task. 

If more than one task entry is equated to the same interrupt 
entry address, the most recently executed interrupt entry 
registration permanently overrides any previous registrations. 

At most one address clause is allowed for a single task 
entry. Specification of more than one interrupt address for a 
task entry is erroneous. 

Address clauses for objects and code other than task entries 
are allowed by the Ada/L target, but they have no effect beyond 
changing the value returned by the 'ADDRESS attribute call. 


F.8 Address Clauses 


F-23 


M t —I 





Version 3.5 
29 March 1991 


Ada/L PSE Handboo* 


AN/UYK-43(V) Interrupt 

Summary 



ISC 

Interrupt 


Target-Computer Interrupt 

CODE 

Entry Address 

Registration 

CLASS 

0 



Class I Unhandled Interrupt 

None 

16#0800# 


CLASS 

I 



Class II Unhandled Interrupt 

None 

16*1800# 


CP-Operand Memory Resume 

16#0# 

16*1000# 


CP-IOC Command Resume 

16#1# 

16*1100# 


CP-Instruction Memory Resume 

16#2# 

16*1200# 


CP-IOC Interrupt Code Resume 

16#3# 

16*1300# 

, 

CP-Operand Memory Error 

16#4# 

16*1400# 


CP-Instruction Memory Error 

16#5# 

16*1500# 


CP-IOC Command/Operand Error 

16#6# 

16*1600# 


IOC Memory Error 

16#7# 

16*1700# 


IPI Fault 

16#9# 

16*1900# 


IOC Memory Resume 

16#A# 

16#1AQ0# 

; 

Intercomputer Timeout 

16#B# 

16#1B00# 


CP Confidence Test Fault 

16#C# 

16#1C00# 


CPU/IOC Microprocessor Stop 

16#D# 

16#1D00# 


Module Interrupt 

16#E# 

16#1E00# 


Power Tolerance 

16#F# 

16#1F00# 


CLASS 

II 


i 

i 

Class III Unhandled Interrupt 

None 

16#2800# 

! 

Interprocessor Interrupt 

16#0# 

16*2000# 

UNDEFINABLE ; 

Floating Point Error 

16#1# 

16*2100# 

UNDEFINABLE i 

Illegal Instruction 

16*2* 

16*2200# 

j 

Privileged Instruction Error 

16*3* 

16*2300# 


Data Pattern Breakpoint 

16*4* 

16*2400# 


Operand Address Breakpoint 

16*5* 

16*2500# 

| 

Operand Read or 



! 

Indirect Addressing 

16*6* 

16*2600# 

i 

DCU Status Interrupt 

16*7* 

16*2700# 

1 

i 

Operand Write 

16*9# 

16*2900# 

i 

Operand Limit 

16 #A# 

16#2A00# 

; 

Instruction Address Breakpoint 

: 16#B* 

16# 2B00# 

i 

RPD Underflow 

16#C* 

16# 2C00# 

i 

Instruction Execute 

16#D* 

16#2D00# 

t 

Instruction Limit 

16#E# 

16#2E00# 

i 

Monitor Clock 

16#F# 

16#2F00# 

UNDEFINABLE 

PTI 

None 

16#2F01# .. 

16# 2F1F# 


Table F-la - Interrupt Entry Addresses 


F-24 


F.8 Address Clauses 











Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


AN/UYK-43(V) Interrupt Summary 


ISC Interrupt 

Target-Computer Interrupt CODE Entry Address Registration 


CLASS III 


| IOC Illegal CAR Instruction I6#0# I6#30I0# 

IOC Memory Protection 16#1# 16#31IC# 

If the above interrupt is generated during CAR execution, no 
channel number is available. The interrupt will be 
translated to Class II Unhandled. 

i 

UNDEFINED 16#2# 1613200# UNDEFINABLE 1 

Channel Function Error 16#3# 16#33IC# i 

IOC Illegal Chain Instruction 16#4#.. 16I34IC# ! 

16#7# 

IOC Confidence Test Fault 16#8# 16#38IC# 

i 

If the above interrupt is generated during CAR execution, no 
channel number is available. The interrupt will be 
translated to Class II Unhandled. 

IOC Breakpoint Match 16#9# 16#39IC# 

If the above interrupt is generated during CAR execution, no 
channel number is available. The interrupt will be i 

translated to Class II Ur.nandled. 

IOC Monitor Clock 16#A# 16#3AI0# UNDEFINABLE j 

IOC Processor Interrupt 16#B# i6#3BIC# j 

External Interrupt Monitor 16#C# 16#3CIC# J 

External Function Monitor 16#D# 16#3DIC# 

Output Data Monitor 16#E* 16#3EIC# 

Input Data Monitor 16#F# 16#3FICt 

For class III interrupts, the following interpretations apply: 

IC => IOC, channel number where 

16100#..16I1F9 indicates IOC 0, channel 16#00..16#1F#, 
16*20#..16#3F# indicates IOC 1, channel 16#00..16#1F# 

+•—— ---———-—--- 

Table F-lb - Interrupt Entry Addresses (Continued) 


F.8 Address Clauses 


F-25 








Version 3.5 
29 March 1991 


Ada/L PSE Handboo« 


F.9 Unchecked Conversions 

Refer to Section 13.10.2 of the Ada Language Reference Manual 
for a description of UNCHECKED_CONVERSION. It is erroneous if 
your Ada program performs UNCHECKED_CONVERSION when the source 
and target objects have different sizes. 


F.10 Restrictions on the Main Subprogram 

Refer to Section 10.1 (8) of the Ada Language Reference 
Manual for a description of the main subprogram. The subprogram 
designated as the main subprogram cannot have parameters. The 
designation as the main subprogram of a subprogram whose 
specification contains a formal_part results in a diagnostic of 
severity ERROR at link time. 

The main subprogram can be a function, but the return value 
will not be available upon completion of the main subprogram's 
execution. The main subprogram may not be an import unit. 


F-26 


F. 10 


Restrictions on the Main Subprogram 










Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


P.ll Input/Output 

Refer to Section 14 of the Ada Language Reference Manual for 
a discussion of Ada Input/Output and to Section 12 of the Ada/L 
Run Time Environment Handbook for more specifics on the Ada/L 
Input/'Output subsystem. 

The Ada/L Input/Output subsystem provides the following 
packages: TEXT_IO, SEQUENT IAL_IO, DIRECT_IO, and LOW_LEVEL_IO. 
These packages execute in the~context of the user-wricten Ada 
program tasx making the I/O request. Consequently, all of the 
code that processes an I/O request on behalf of the user-written 
Ada program executes sequentially. The package IO_EXCEPTIONS 
defines all of the exceptions needed by the packages 
SEQUENTIAL_IO, DIRECT_IO, and TEXT 10. The specification of this 
package is given in Section 14.5 oF the Ada Language Reference 
Manual. This package is visible to all of the constituent 
packages of the Ada/L I/O subsystem so that appropriate exception 
handlers can be inserted. 

I/O in Ada/L is performed solely on external files. No 
allowance is provided in the I/O subsystem for memory resident 
files (i.e., files which do not reside on a peripheral device). 
This is true even in the case of temporary files. With the 
external files residing on the peripheral devices, Ada/L makes 
the further restriction on the number of files that may be open 
on an individual peripheral device. 

Section 14.1 of the Ada Language Reference Manual states that 
all I/O operations are expressed as operations on objects of some 
file type, rather than in terms of an external file. File 
objects are implemented in Ada/L as access objects which point to 
a data structure called the File Control Block. This File 
Control Block is defined internally to each of the high-level I/O 
packages; its purpose is to represent an external file. The File 
Control Block contains all of the I/O-specific information about 
an external file needed by the high-level I/O packages to 
accomplish requested I/O operations. 


F.ll.l Naming External Files 

The naming conventions for external files in Ada/L are of 
particular importance to you. All of the system-dependent 
information needed by the I/O subsystem about an external file is 
contained in the file name. External files may be named using 
one of three file naming conventions: standard, temporary, and 
user-derived. 


F.ll.l Naming External Files 


F- 27 




Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


P.11.1.1 Standard File Names 

The standard external file naming convention used in Ada/L 
identifies the specific location of the external file in terms of 
the physical device on which it is stored. For this reason, you 
should be aware of the configuration of the peripheral devices on 
the AN/UYK-43 at your particular site. 

Standard file names consist of a six character prefix and a 
file name of up to twenty characters. The six character prefix 
has a predefined format. The first and second characters must be 
either "DK," "MT," or "TT," designating an AN/UYH-3(V) 
Recorder/Reproducer Set Magnetic Disk, the RD-358 Magnetic Tape 
Subsystem, or the AN/USQ-69 Data Terminal Set, respectively. 

The third and fourth characters specify the channel on which 
the peripheral device is connected. Since there are sixty-four 
channels on the AN/UYK-43, the values for the third and fourth 
positions must lie in the range "00" to "63." 

Tie range of values for the fifth position in the prefix (the 
unit number) depends upon the device specified by the characters 
in the first and second positions of the external file name. If 
the specified peripheral device is the AN/UYH-3 magnetic disk 
drive, the character in the fifth position must be one of the 
characters "0," "1," "2," or "3." This value determines which of 
the four disk units available on the AN/UYH-3 is to be accessed. 

If the specified peripheral device is the RD-358 magnetic tape 
drive, the character in the fifth position must be one of the 
characters "0," "1," "2," or "3." This value determines which of 
the four tape units available on the RD-358 is to be accessed. 

If the specified peripheral device is the AN/USQ-69 militarized 
display terminal, the character in the fifth position depends on 
the channel type. If the channel type is parallel then this 
character must a "0." This is the only allowable value for 
the unit number when che aN/usq-69 is connected to a parallel I/O 
channel. This is because the AN/USQ-69 may have only one unit on 
a parallel channel. If the channel type is serial then the 
character in the fifth position must be one of the characters 
"0," "1," "2," "3," '*4," "5," "6," "7," or "8 H (the character "8" 
will be used to specify a broadcast mode transmission). The 
AN/USQ-69 allows up to eight terminals to be daisy chained 
together when running on a serial channel. 

The w.xon is the only character allowed in the sixth 

position. If any character other than the colon is in this 
position, the file name will be considered non-standard and the 
file will reside on the default device defined during the 
elaboration of CONFIGURER0. 

Positions seven through twenty-six are optional to your Ada 
program and may be used as desired. These positions may contain 
any printable character you choose in order to make the file name 


F-28 


F. 11.1.1 Standard File Names 



Ada/L PSE Handbook 


Version 3.5 
29 Marcn 1991 


more intelligible. Embedded blanks, however, are not allowed. 

The location of an external file on a peripheral device is 
thus a function of the first six characters of the file name 
regardless of the characters that might follow. For example, if 
the external file "MT000:01d_Data" has been created and not 
subsequently closed, an attempt to create the external file 
"MT000:New_Data" will cause the exception D£VICE_ERROR (rather 
than NAME_£RROR or CJSE_ERROR) to be raised because the peripheral 
device on channel "00" and cartridge "0" is already in use. 

You are advised that any file name beginning with "xxxxx:" 
(where x denotes any printable character) is assumed to be a 
standard external file name. If this external file name does not 
conform to the Ada/L standard file naming conventions, the 
exception NAME ERROR will be raised. 


F. 11.1.2 Temporary File Names 

Section 14.2.1 of the Ada Language Reference Manual defines a 
temporary file to be an external file that is not accessible 
after completion of the main subprogram. If the null string is 
supplied for the external file name, the external file is 
considered temporary. In this case, the high level I/O packages 
internally create an external file name to be used by the lower 
level I/O packages. The internal naming scheme used by the I/O 
subsystem is a function of the type of file to be created (text, 
direct or sequential) and the current date and time. This scheme 
is consistent with the requirement specified in the Ada Language 
Reference Manual that all external file names be unique. 

The first two characters of the file name are "TX," "D_," or 
"S_." The next eight characters are the date (four characters 
for the year, two characters for the month, and two characters 
for the day). The remaining ten characters are the time (five 
for seconds and five for the fraction part of a second). For 
instance, the temporary external file name "D_19880331123459876 
would be a DIRECT_IO file created MaiCh 31, 1988 at 12,345.9876 
seconds. 


F.11.1.3 User-Derived File Names 

A random string containing a sequence of characters of length 
one to twenty may also be used to name an external file. 

External files with names of this nature are considered to be 
permanent external files. You are cautioned from using names 
which conform to the scheme used by the I/O subsystem to name 
temporary external files (see list item "b"). 

It is not possible to associate two or more internal files 
with the same external file. The exception USE_ERROR will be 


F.11.1.3 User-Derived File Names 


F-29 


in in 






Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


raised if this restriction is violated. 


F.11.2 The FORM Specification for External Files 

Section 14.2.1 of the Ada Language Reference Manual defines a 
string argument called the FORM, which supplies system-dependent 
information that is sometimes required to correctly process a 
request to create or open a file. In Ada/L, the string argument 
supplied to the FORM parameter on calls to CREATE and OPEN is 
retained while the file is open, so that calls to the function 
FORM can return the string to your Ada program. FORM options 
specified on calls to CREATE have the effects stated below. FORM 
options specified on calls to OPEN have no effect. 

Ada/L only allows a FORM parameter when a file is open or 
created on the RD-358 tape drive. A USE_ERROR will be raised 
when a FORM parameter is associated with any other Ada/L system 
device. The FORM parameter specifically controls the positioning 
and formatting of the tape prior to tape I/O operations. This 
section identifies the arguments of the FORM parameter. Refer to 
Section 14.2.1 of the Ada Language Reference Manual and to 
Section 12 of the Ada/L Run-Time Environment Handbook for more 
detail on the use of the FORM parameter. 

The FORM parameter is a string literal of which a maximum of 
twenty characters is processed. If the supplied FORM string is 
longer than the maximum allowed (20 characters), the exception 
USE_ERROR will be raised. The string literal is interpreted as a 
sequence of arguments. If you wish to utilize the default 
arguments, a FORM parameter need not be supplied. 

Only the first two arguments within the string are processed. 
All following characters or arguments will cause the USE_ERROR to 
be raised. The arguments are not case sensitive. The arguments 
must be separated by at least one delimiter. A legal delimiter 
consists of a comma or blank. Extra delimiters are ignored. Of 
the recognized arguments, at most one formatting and one 
positioning argument are allowed. If conflicting arguments are 
used, the exception USE^ERROR will be raised. 

Positioning arguments allow control of tape before its use. 
The following positioning arguments are available: 

a. REWIND - specifies that a rewind will be performed prior to 
the requested operation. 

b. NOREWIND - specifies that the tape remains positioned as is. 

c. APPEND - specifies that the tape be positioned at the logical 
end of tape (LEOT) prior to the requested operation. The 
LEOT is denoted by two consecutive tape_marks. 


F-30 


F.11.2 The FORM Specification for External Files 





Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


The formatting argument specifies information about tape 
format. If a formatting argument is not supplied, the file is 
assumed to contain a format header record determined by che ALS/N 
I/O system. The following formatting arguments are available: 

a. NOHEAD - specifies thac the designated file has no header 
record. This argument allows the reading and writing of 
tapes used on computer systems using different header 
formats. 

b. DENSITY_800 - specifies that the tape is written/read with a 
density of 800 BPI. This is the default density. Attempting 
to write/read files of different density on the same tape 
will cause unpredictable results. 

c. DENSITY_1600 - specifies that the tape is written/read with a 
density of 1600 BPI. Attempting to write/read files of 
different density on the same tape will cause unpredictable 
results. 


F.11.3 File Processing 

Processing allowed on Ada/L files is influenced by the 
characteristics of the underlying device. The following 
restrictions apply: 

a. Only one file may be open on an individual RD-358 tape drive 
at a time. 

b. The attempt to CREATE a file with the mode IN FILE is not 
supported since there will be no data in the Tile to read. 


F.11.3 


File Processing 


F-31 




Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.11.4 Text Input/Output 

TEXT_IO is invoked by your Ada program to perform sequential 
access I/O operations on text files (i.e., files whose content is 
in human-readable form). TEXT_IO is not a generic package and, 
thus, its subprograms may bo invoked directly from your program, 
using objects with base type or parent type in the 
language-defined type character. TEXT_IO also provides the 
generic packages INTEGER_IO, FLOAT_IO, FIXED_IO, and 
ENUM£RATION_IO for the reading and writing of numeric values and 
enumeration values. The generic packages within TEXT_IO require 
an instantiation for a given element type before any of their 
subprograms are invoked. The specification of this package is 
given in Section 14.3.10 of the Ada Language Reference Manual. 

The implementation-defined type COUNT that appears in Section 
14.3.10 of the Ada Language Reference Manual is defined as 
follows: 


type COUNT is range 0 ... INTEGER'LAST; 

The implementation-defined subtype FIELD that appears in Section 
14.3.10 of the Ada Language Reference Manual is defined as 
follows: 


subtype FIELD is INTEGER range 0 ... INTEGER 1 LAST; 

At the beginning of program execution, the STANDARD_INPUT 
file and the STANDARDJDUTPUT file are open, and associated with 
the files specified by you at export time. Additionally, if a 
program terminates before an open file is closed (except for 
STANDARD_INPUT and STANDARD_OUTPUT), the last line you added to 
the file may be lost; if the file is on magnetic tape, the file 
structure on the tape may be inconsistent. 

A program is erroneous if concurrently executing tasks 
attempt to perform overlapping GET and/or PUT operations on the 
same terminal. The semantics of text layout as specified in the 
Ada Language Reference Manual, Section 14.3.2, (especially the 
concepts of current column number and current line) cannot be 
guaranteed when GET operations are interweaved with PUT 
operations. A program which relies on the semantics of text 
layout under those circumstances is erroneous. 

For TEXT_IO processing, the line length can be no longer than 
1022 characters. An attempt to set the line length through 
SET_LINE LENGTH to a length greater than 1022 will result in 
USE ERROR. 


F-3 2 


F.11.4 Text Input/Output 



Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


P.11.5 Sequential Input/Output 

SEQUENTIAL_IO is invoked by your Ada program to perform I/O 
on the records of a file in sequential order. The SEQUENTIAL_10 
package also requires a generic instantiation for a given element 
type before any of its subprograms may be invoked. Once the 
package SEQUENTIAL_IO is made visible, it will perform any 
service defined by the subprograms declared in its specification. 
The specification of this package is given in Section 14.2.3 of 
the Ada Language Reference Manual. 

The following restrictions are imposed on the use of the 
package SEQUENTIAL_IO: 

a. SEQUENTIAL_IO cannot be instantiated with an unconstrained 
array type. 

b. SEQUENTIAL_IO cannot be instantiated with a record type with 
discriminants with no default values. 

c. Ada/L does not raise DATA^ERROR on a read operation if the 
data input from che external file is not of the instantiating 
type (see the Ada Language Reference Manual, Section 14.2.2). 


F.11.6 Direct Input/Output 

DIRECT_IO is invoked by your Ada program to perform „/0 of 
the records of a file in an arbitrary order. The package 
DIRECT_IO requires a generic instantiation for a given element 
type before any of its subprograms may be invoked. Once the 
package DIRECT_IO is made visible, it will perform any service 
defined by the subprograms declared in its specification. The 
specification of this package is given in Section 14.2.5 of the 
Ada Language Reference Manual. 

The following restrictions are imposed on the use of the 
package DIRECT_IO: 

a. DIRECT 10 cannot be instantiated with an unconstrained array 
type. 

b. DIRECT 10 cannot be instantiated with a record type with 
discriminants with no default values. 

c. Ada/L does not raise DATA_ERROR on a read operation if the 
data input from the external file is not of the instantiating 
type (see the Ada Language Reference Manual, Section 14.2.4). 


F.11.6 Direct Input/Output 


F-33 



Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


F.11.7 Low Level Input/Output 

10W_LEVEL_I0 is invoked by your Ada program to initiate 
physical operations on peripheral devices, and thus executes as 
part of a program task. Requests made to LOW_LEVEL_IO from your 
program are passed through the RTEXEC_GATEWAY to the channel 
programs in CHANNEL_IO. Any status check or result information 
is the responsibility of the invoking subprogram and can be 
obtained from the subprogram RECEIVE_CONTROL within LOW_LEVEL_IO. 

The package LOW_LEVEL_IO allows your Ada program to send I/O 
commands to the I/O devices (using SEND_CONTROL) and to receive 
status information from the I/O devices (using RECEIVE_CONTROL). 

A program is erroneous if it uses LOW LEVEL_IO to access a device 
that is also accessed by high-level I7o packages such as 
SECUENTIAL_IO and TEX?_IO. The following is excerpted from the 
package LOW_LEVEL_IO. 

SUBTYPE c.hannel_range IS INTEGER RANGE 0 - .63; 

— Range of values allowed for channel number. 

SUBTYPE device_str IS STR T NG; 

— To be passed to CHANNEL_IO for future implementations 

— of logical path name. The s-ring will be ignored until 

— logical path name support is added. 

SUBTYPE btc_int IS INTEGER RANGE 0..16383; 

-- Passes transfer counts to/from IO_MANAGEMENT/RTEXEC. 

SUBTYPE io^functions IS INTEGER RANGE 0..20; 

— Specifies the I/O function to be performed by LOW^_LEVEL_IO. 

— The following table shows the values associated with device 

— and device functions available. 


F-34 


F.11.7 Low Level Input/Output 



Ada/L PSE Handbook 


Version 3.5 
29 Marcn 1991 


— VALUE — DEVICE — FUNCTION 


0 RD-358 Normal Read 

1 RD-358 Read with Search data 

2 RD-358 Normal Write 

3 RD-358 Send EF Command 

4 RD-358 Initialize Channel 

0 UYH-3 Read with 2 word EF 

1 UYH-3 Read with 1 word EF 

2 UYH-3 Write 

3 UYH-3 Send 1 word EF Command 

4 UYH-3 Send 2 word EF Command 

5 UYH-3 Send 1 word EF Command (Same as function 3) 

6 UYH-3 Initialize Channel 

0 USQ-69 Read 

1 USQ-69 Write 

2 USQ-69 Write (Same as function 1) 

3 USQ-69 Send Command 

4 USQ-69 Initialize Channel 


TYPE cap_block IS 

— Information that can be found in IOC control memory on 
— a per channel/ per function basis. 


RECORD 

cap : INTEGER 

instruct_base : INTEGER 
index : INTEGER 

accumulator : INTEGER 
status : INTEGER 

buffer_base : INTEGER 
bcw : INTEGER 

operand_base : INTEGER 
END RECORD; 


— CAP register. 

— CAP instruction base. 

— CAP index register. 

— CAP accumulator register. 

— CAP status register. 

— CAP buffer base. 

— CAP buffer control word. 

— CAP operand base. 


TYPE short_rec_control_block IS 

— I/O control block sent to LOW_LEVEL_IO as a parameter 
— when calling subprogram RECEIVE_REQUEST. 

RECORD 

channel : low_level__io. channel_range; 

— Specifies channel~of interest, 
ei word ; INTEGER; 


— External interrupt returned by the peripheral device. 
END RECORD; 


F.11.7 Low Level Input/Output 


F-35 








Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


TYPE receive_control_block IS 

— I/O control block sent to LOW_LEVEL_IO as a parameter 

— when calling subprogram RECEIVE REQUEST. 

RECORD 

data : low_level_io.short_rec_control_block; 

— Channel and ei_word. 
ef : low_Ievel_io.cap_block; 

— External Function CAP information, 
output : low_l»;vel_io. cap block; 

— Output CAP information, 
ei : low_level_io.cap_block; 

— External Interrupt CAP information, 
input : low_level io.cap_block; 

— Input CAP information. 

END RECORD; 

TYPE send_control_block IS 

— I/O control block sent to LOW_LEVEL_IO as a parameter 

— when calling subprogram SEND_REQUEST. 

RECORD 

function pos ; low_level_io.io_functions; 

— Indicates which I/O function is to be requested 

— of LOW_LEVEL_IO. 

channel : low_level_io.channel_range; 

— Specifies channel number. 
transfer_count : low_level_io.btc int; 

— Buffer transfer count for l7o operation. 
buffer_addr : system.address; 

— Address of data buffer, 

command_l : INTEGER; 

— Holds the first word of the external 

— function for the device. 

command_2 : INTEGER; 

— Holds the second word of the external 

— function for the device. 

filler_l : INTEGER; 

— Passes additional information to 
— CHANNEL_IO (such as the terminal_address 

— for the USQ-69 device). ~ 

END RECORD; 


F-36 


F.11.7 Low Level Input/Output 



Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


PROCEDURE SEND_CONTROL 

— Passes I/O control information to a procedure in 

— IO_MANAGEMENT/RTEXEC in order to send data to the 

— specified device. 

(device : IN low_level_io.device_str := 

— This string will be ignored until 
— logical path names are implemented, 
data : IN low_level_io.send_control block 

— I/O control block for senl request. 

) ; 


PROCEDURE RECEIVE_CONTROL 

— Passes I/O control information to a procedure in 

— IO_MANAGEMENT/RTEXEC in order to obtain the status of 

— the I/O operation. 

(device : IN low_level io.device_str := 

— This string will be ignored until 
— logical path names are implemented, 
data : IN OUT low_level_io.receive_control_block 
— I/O control block for receive request. 

) ; 


PROCEDURE RECEIVE_CONTROL 

— Passes I/O control information to a procedure in 

— IO_MANAGEMENT/RTEXEC in order to obtain the status of 

— tho I/O operation. 

(device : IN low_level io.device_str := 

— This string will be ignored until 
— logical path names are implemented, 
data : IN OUT low_level_io. short^ec^control^lock 
— I/O control block for receive request. 

); 


F.12 System Defined Exceptions 

In addition to the exceptions defined in the Ada Language 
Reference Manual, this implementation pre-defines the exceptions 
shown in Table F-2 below. 


F.12 System Defined Exceptions 


F-37 



Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Name 

Significance 

CAPACITY_ERROR 

Raised by the Run-Time Executive when 
Pre-Runtime specified resource limits 
are exceeded. 

PAST_PTI_TIME 

Raised by the PTI support package if 
the PTI start time is greater than the 
current CALENDAR.CLOCK. 

SYSTEM_ERROR 

Serious error detected in underlying 
AN/UYK-43 operating system. 

UNREGISTERED_PTI 

Raised by the PTI support package if 
the PTI's state is returned as 
"unregistered". 

UNRESOLVED_REFERENCE 

Attempted call to a subprogram whose 
body is not linked into the executable 
program image. 


Table F-2 - System Defined Exceptions 


F-38 


F.12 System Defined Exceptions 







Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


F.13 Machine Code Insertions 

The Ada language permits machine code insertions as defined 
in Section 13.8 of the Ada Language Reference Manual. This 
section describes the specific details for writing machine code 
insertions as provided by the predefined package MACHINE_CODE. 

You may, if desired, include AN/UYK-43 instructions within an 
Ada program. This is done by including a procedure in the 
program which contains only record aggregates defining machine 
instructions. The package MACHINE_CODE, included in the system 
program library, contains type, record, and constant declarations 
which are used to form the instructions. Each field of the 
aggregate contains a field of the resulting machine instruction. 
These fields are specified in the order in which they appear in 
the actual instruction. Since the AN/UYK-43 has several 
different formats for instructions, package MACHINE_CODE defines 
different types for each of these formats. For each of the 
fields which must have a certain value for a given instruction 
(i.e., part of the opcode), package MACHINE_CODE defines a 
constant to use for that field. 

The following procedure implements a floating point 
exponential. Note that this actual procedure would not be used, 
because package MATH_PACK implements the same operation in a more 
efficient manner. 

with machine_code; use machine_code; 
procedure floating_point_exponential 
(x : FLOAT; 
ex : OUT FLOAT) is 


BEGIN 

formatI'(f_LA,1,3,6,0,0,0); 

— LA A1,B6+0 

formatV'<f_FEX,l,f2 FEX,2,0,0,0,f6_FEX); 

— FEX A1,A2~ 

formatl'(f*>f_SA,a=>2,k*>3,b=>6,i*>0,s=>0,y*>l); 

— SA A2,B6+1 

END; 

Note that either positional or names aggregates may be used. 
Whenever a field does not appear in the MACRO/L instruction, it 
must be filled in with 0, since no missing fields are allowed. 

For formatl instructions, when k=0, the s and y field are 
collapsed and used together. For your convenience, an additional 
record type, formatli, for immediate, can be used to define the s 
and y fields as a single 16-bit quantity. This quantity is 
defined as an unsigned integer, so if a negative number x is 
desired, one should instead put the number x + 65535. 


F.13 Machine Code Insertions 


F-39 






Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


Table F-3 contains a list of MACRO/L instructions and their 
Ada/L machine code equivalents, sorted by MACRO/L mnemonic. 


F-40 


F.13 Machine Code Insertions 






Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


MACRO/L 

Ada/L 



AA 

a,y,k,b,s 

formatI'(f AA,a,k,b,i,s,y); 



AB 

a,y,k,b,s 

formatI'(f AB,a,k,b,i,s,y); 



AEI 

a,sy,b 

formatIi'{f AEI,a,k AEI,b,i,sy); 



ALP 

a,y,b,s 

format!'(£ AL?,a,k ALP,b,i,s,yj; 



ANA 

a,y,k,b,s 

formatl'jf ANA,a,k,b,i,s,y); 



ANB 

a,y,k,b,s 

formatI’(f ANB,a,k,b,i,s,y); 



ATSF 

a, b 

formatV'(f ATSF,a,f2 ATSF,b,0,0,0, 

f6 ATSF); 

BC 

ak,y,b,s 

formatIa’(^ BC,a,k,b,i,s,y); 



3S 

ak,y,b,s 

format la'(f*BS,a,k,b,i,s,y); 



BZ 

ak,y,b,s 

format la' ( f~*BZ, a, k, b, i, s ,y); 



C 

a,y,k,b,s 

formatI’{f C,a,k,b,i,s,y); 



CB 


formatIVA 1 (f CB,a CB,0,i CB ); 



CBN 

a, n 

formative(f CBN,a,f4 CBN,n ); 



C3R 

a, b 

formatV’<f CBR,a,f2 CBR,b,0,0,0,f6 

CBR 

) ; 

CCT 

a,b 

formatIVA*(f CCT,a,b,i CCT); 



CE 


formatIVA'(f CE,a CE,o7i CE ); 



CG 

a,y,k,b,s 

formatl'ff CG,a,k,b,i,s,y); 



CHCL 

a, y, b, s 

formatI'(f CHCL,a,k CHCL,b,i CHCL. 

S,y); 


CL 

a,y,k,b,s 

formatI'(f CL,a,k,b,i,s,y); 



CM 

a , y, k , b, s 

formatI’(f CM,a,k,b,i,s,y); 



CMPS 

a, b 

formatV’{f CMPS,a,f2 CMPS,b,0,0,0, 

f6 CMPS ) 

CNT 

a,y,b,s 

formatI’(f CNT,a,k CNT,b,i,s,y); 



CRB 

a,b 

formatV'(f CRB,a,f2 CRB,b,0,0,0,f6 

CRB 

); 

CXI 

a,y,k,b,s 

formatl'jf CXI,a,k,b,i,s,y); 



D 

a,y,k,b,s 

formatl’jf D,a,k,b,i,s,y); 



DA 

a,y,b,s 

formatl'jf DA,a,k DA,b,i,s,y); 



DAN 

a,y,b,s 

formatl'jf DAN,a,k DAN,b,i,s,y); 



DC 

a,y,b,s 

formatl'jf DC,a,k DC,b,i,s,y); 



DJNZ 

a,y,k,b,s 

formatin’ (f DJNZ,a,f3 DJNZ,k,b,i, 

S, y); 


DJZ 

a,y,k,b,s 

formatin'(f~DJZ,a,f3 DJZ,k,b,i,s, 

y); 


DL 

a,y,b,s 

formatI'(f DL,a,k DL,b,i,s,y); 



DS 

a,y,b,s 

formatl'jf DS,a,k DS,b,i,s,y); 



DSP 

Si f Id p m 

formatV'j f~DSP,a,?2 DSP,b,0,0,m,f6 

DSP 

); 

EECM 


formatIVA'(f EECM,a EECM,0,i EECM 

); 


ESCM 


formatIVA'(f“ESCM,a ESCM,0,i ESCM 

); 


ETCM 


formatIVA' (f ETCM,a~ETCM,0,i ETCM 

); 


FA 

a,y,b,s 

formatI'(f FA,a,k FA,b,i,s,y); 



FAC 

a, b 

formatV’(f"FAC,a,l2 FAC.b,0,0,0,f6 

FAC 

); 

FAN 

a,y,b,s 

formatl'jf FAN,a,k FAN,b,i,s,y); 



FANR 

a,y,b s 

formatl’jf FANR,a,k FANR,b,i,s,y); 



FAR 

a,y,b,s 

forraatl’jf~FAR,a,k FAR,b,i,s,y); 



FAS 

a,b 

formatV'jf“FAS,a,f? FAS,b,0,0,0,f6 

FAS 

) i 

FAT 

a ,b 

formatV'(f~FAT,a,f2 FAT,b,0,0,0,f6 

_FAT 

); 

FD 

a,y,b,s 

formatl'jf~FD,a,k FD,b,i,s,y); 



FDR 

a,y,b,s 

formatI'j f~FDR,a,k_FDR,b,i,s,y); 




Table F-3a - Machine Code Instructions 


F.13 Machine Code Insertions 


F-41 







Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


| MACRO/L 

Ada/L | 

FEX 

a,b 

formatV'(f_FEX,a,f2 FEX,b,0,0,0,f6 FEX ); 
formatV'{f FLN, a, f2~FLN, b, 0,0,0 , f 6 FLN ); 

FLN 

a,b 

FLTF 

a, n 

formatV'(f FLTF, a , f 2 FLTF,n,0,0,0,f6 FLTF); 

FM 

a,y,b,s 

formatl'(f~FM,a,k FM,b,i,s,y); 

FMR 

a,y,b,s 

formatl'(f FMR,a,k FMR,b,i,s,y); ! 

FPA 

a, b 

formatV(f FPA,a,f2 FPA,b,0,0,0,f6 FPA); ! 

FPD 

a ,b 

formatV(f FPD,a,f2 FPD,b,0,0,0,f6 FPD); 

FPM 

a,b 

formatV(f FPM,a,f2 FPM,b,0,0,0,f6 FPM ); 

FPS 

a,b 

formatV(f FPS,a,f2~FPS,b,0,0,0,f6 FPS ); ' 

formatV(f FSA,a,f2 FSA,b,0,0,0,f6 FSA); 

FSA 

a, b 

FSC 

a,b 

formatV(f FSC,a,f2 FSC,b,0,0,0,f6 FSC ); 

FSD 

a,b 

formatV(f FSD,a,f2 FSD,b,0,0,0,f6 FSD); j 

FSM 

a, b 

formatV(f FSM,a,f2 FSM,b,0,0,0,f6 FSM); 

FSS 

a,b 

formatV(f FSS,a,f2~FSS,b,0,0,0,f6 FSS); 

FTSL 

a,b 

formatV(f FTSL,a,f2 FTSL,b,0,0,0,f6 FTSL); 

HA 

a, b 

formatIVA'{f HA,a,b,0); 

HAEI 

a,b 

formatlVA'(f HAEI,a,b,i HAEI ); 

HA I 

HALT 

HAN 

a,b 

formatIVA'(f HAI,0,0,0); 
formatlVA'(f HALT,0,Q,i HALT ); 
formatIVA'(f HAN,a,b,0); 

HAND 

a,b 

formatlVA'(f HAND,a,b,i HAND ); 

HC 

a,b 

formatIVA’(f HC,a,b,0); 

HCB 

a,b 

formatIVA'(f~HCB,a,b,0); 

HCL 

a,b 

formatIVA*(f~HCL,a,b,0); 

HCM 

a,b 

formatIVA'(f~HCM,a,b,0); ! 

HCP 

a 

formatIVA'(f^HCP,a,0,0); ' 

HCRC 

a,b 

formatIVA'(f~HCRC,a,b,i HCRC ); 

HD 

a,b 

formatIVA'(f HD,a,b,0); 

HDCP 

a 

formatIVA'(f~HDCP,a,0,0); 

HDLC 

a ,m 

formatIVB'(f~HDLC,a,m); 

HDRS 

a,m 

formatIVB'(f~HDRS,a,m); 

HDR2 

a,m 

formatIVB'(f~HDRZ,a,m); 

HDSF 

a,b 

formatIVA'(f~HDSF,a,b,0); 

HLB 

a,b 

formatIVA'(f~HLB,a,b,0); 

HLC 

a,m 

formatIVB'(f~HLC,a,m); 

HLCA 

a,b 

formatIVA'(f~HLCA,a,b,i HLCA ); 

HLC I 

af 4,b 

formatIVA l'Tf HLCI,af47b,i HLCI); 

HLCT 

af 4,b 

formatIVA~1'(f HLCT,af4,b,i”HLCT); 

HLTC 

a,b 

formatIVA T (f HLTC,a,b,i HLTC ); 

HM 

a,b 

formatIVA 1 (f~HM,a,b,0); 

HOR 

a,b 

formatIVA'(f~HOR,a,b,0); 

HPEI 

a,b 

formatIVA'(f'HPEI,a,b,i HPEI ); 

HP I 

HR 

a,b 

formatIVA'(f~HPI,0,0,0); 

formatV(f HR,a,f2 HR,b,0,0,0,f6 HR); 

HRS 

a,m 

formatIVB'(f_HRS,a7m), ~ 


Table F-3b - Machine Code Instructions (Continued) 


F-42 


F.13 Machine Code Insertions 







Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


MACRO/L 

HRT 

a,b 

HRZ 

a,m 

HSCA 

a,b 

HSCI 

af 4, b 

HSCT 

af 4,b 

HSF 

a,b 

HSIM 

a, b 

HSTC 

a,b 

HST1 


HST2 


HST3 


HST4 


HSTD 

a,b 

HSTV 

a,b 

HV 

a,b 

HWFI 


HXOR 

a,b 

IBSC 

a 

IILM 

a 

10 

a,y,b,s 

IOCL 

a 

I OCR 

a 

IOCS 

a 

IOT 

a,b,m 

IPI 

y,b,s 

IR 


IRMMS 

a,b 

IRMSR 

a,b 

ISMSR 

a,b 

IS? 

a,b f m 

J 

y,k,b,s 

JBNZ 

a,y,k,b,s 

JC 

a,y,k,b,s 

JE 

y,k,b,s 

JEP 

a,y,k,b,s 

JG 

y»k,b,s 

JGE 

y»k,b,s 

JL 

y#k,b,s 

JLE 

y,k,b,s 

JLT 

y»k,b,s 

JN 

a,y,k,b,s 

JNE 

y,k,b,s 

JNF 

y,k,b,s 

JNW 

y,k,b,s 

JNZ 

a,y,k,b,s 


Ada/L 


formatIVA'(f_HRT,a,b,0); 
formatIVB'(f_HRZ,a,m); 
formatIVA'(f_HSCA,a,b,i_HSCA ); 
formatIVA_l'(f_HSCI,af4,b,i_HSCI); 
formatIVA_l'(f_HSCT,af4,b,i JiSCT); 
formatIVA'(f_HSF,a,b, 0); 
formatlVA'(f_HSIM,a,b,i_HSIM ); 
formatlVA’(f_HSTC,a,b,i_HSTC ); 
formatlVA’(f_HSTl,a_HSTl,b_HSTl,i_HSTl) ; 
formatlVA’(f_HST2,a_HST2,b_HST2,i_HST2); 
formatlVA’(f_HST3,a_HST3,b_HST3,i_HST3); 
formatlVA’(f_HST4,a HST4,b_HST4,i_HST4); 
formatlVA'(f_HSTD,a,b,i_HSTD ); 
formatlVA'(f_HSTV,a,b,i_HSTV ); 
formatV'(f_HV,a,f2_HV,b,0,0,0,f6_HV); 
formatlVA'(f_HWFI,0,0,i_HWFI ); 
formatlVA*{f_HXOR,a,b,0); 
formatlVA'(f_IBSC,a,0,i_IBSC ); 
formatlVA'(f_IILM,a,0,i^IILM ); 
formatI’{f_IO,a,k_IO,b,T,s,y); 
formatlVA'(f_IOCL,a,0,i_IOCL ); 
formatlVA'(f_IOCR,a,0,i_IOCR ); 
formatlVA'(f_IOCS,a,0,i_IOCS )j 
formatV'(f_IOT,a,f2 IOT,b,0,0,m,f6_IOT )? 
formatl'(f~IPI,a_IPl,k_IPI,b,i,s,y); 
formatl'(f_IR,0,k_IR,0,0,0,0); 
formatlVA'(f_IRMMS,a,b,i_IRMMS); 
formatlVA'(f IRMSR,a,b,i IRMSR ); 
formatlVA’(f_ISMSR,a,b,i ISMSR ); 
formatV'(f_ISP,a,f2 ISP,H,0,0,m,f6_ISP ); 
formatlXX ' (f J,a <J,?3 J,k,&,i,s,y)j 
formatin’ (f_JBNZ,a,fI_JBNZ,k,b,i,s,y) ; 
formatXXX (f_JC,a,f3 JC,k,b,i,s,y)? 
formatl II '(f_JE,a_JE,f3_JE,k,b,i,s,y)j 
formatlXX' {f___JEP,a,f3 JEP,k,b,i,s,y) j 
format II I'(f_JG,a_JG,?3 JG,k,b,i,s,y); 

formatl 11' (f _JGE, a <JGE ,73_JGE ,k,b,i,s,y); 

formatl 11' (f __JL, a, 73 _iJL ,k,b,i,s,y); 
format X X X'(f_JLE,a_JLE,f 3_JLE,k,b,i,s,y); 
formatin'(f JLT,a JLT,f3 JLT,k,b,i,s,y); 
formatin’ {f“jN,a,l3_JN,k7b,i,s,y); 
formatXXI’(f JNE,a JNE,f3 JNE,k,b,i,s,y)j 
formatin' (f“JNF,a“JNF,f3 JNF,k,b,i,s,y); 
formatin’ (f“JNW,a“JNW,f3_JNW,k,b,i,s,y) ; 
formatin' (f"JNZ,a7f3_JNZ7k,b,i,s,y); 


Table F-3c - Machine Code Instructions (Continued) 


F.13 Machine Code Insertions 


F-43 










Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


MACRO/L 

JOF 

y,k,b,s 

JOP 

a,y,k,b,s 

JP 

a,y,k,b,s 

JS 

sy,k,b 

JSC 

a,y,k,b,s 

JW 

y,k,b,s 

JZ 

a,y,k,b,s 

LA 

a,y,k,b,s 

LB 

a,y,k,b,s 

LBJ 

a,y,k,b,s 

LBMP 

a,y,b,s 

LCI 

ak,y,b,s 

LCM1 

y,b,s 

LCM2 

y,b,s 

LCM3 

y ,b,s 

LCM4 

y,b,s 

LCMA 

y,b,s 

LCMP 

y,b,s 

LCMT 

y,b,s 

LCPA 

a,y,b,s 

LCRA 

a,y,b,s 

LCT 

ak,y,b,s 

LDIF 

LECM 

a,y,k,b,s 

LIBP 

a,y ,b,s 

LIM 

a, sy ,b 

LIMP 

a,y,b,s 

LISR 

a,b 

LLP 

a,y,b,s 

LLPN 

a,y,b,s 

LM 

a,y,k,b,s 

LNA 

a,y,k,b,s 

LRR 

a,m 

LRRA 

LSCM 

a,b, i 

LSDM 

LTCM 

a,y,k,b,s 

LXB 

a,y,k,b,s 

M 

a,y,k,b,s 

MS 

a,y ,b,s 

NLP 

a,y ,b,s 

OR 

a,y ,b,s 

PEI 

PFCD 

PFCE 

a,sy,b 


Ada/L 


formatlll*(f_JOF,a_JOF,f3_J0F,k,b,i,s,y); 

formatin' { f_JOP ,a, f 3_J0P, k, b, i, s, y) ; 

formatlll'(f_JP,a,f3_JP,k, b,i,s,y ); 

formatin' ( f_JS, 0, f 3_JS, k, b, i , s , y) ; 

formatlll'(f_JSC,a,f3 JSC,k,b,i,s,y); 

formatlll'(f_JW,a_JW,?3_JW,k,b,i,s,y); 

formatin' (f_JZ,a,f3 JZ,k,b, i,s,y) ; 

formatI'(f_LA,a,k,b,I,s,y); 

formatl'(f_LB,a,k,b,i,s,y) ; 

formatlll'(f_LBJ,a,f3_LBJ,k,b,i,s,y); 

formatl'(f LBMP,a,k_LBMP,b,i,s,y); 

formatla'(?_LCI,ak,b,x,s,y); 

formatl'(f_LCMl,a_LCMl,k_LCMl,b,i_LCMl,s,y); 

formatl' { f_LCM2 ,a_LCM2 ,k__LCM2 ,b, i_LCM2, s, y) ; 

formatl’(f_LCM3,a_LCM3,k_LCM3,b,i_LCM3,s,y); 

formatl'(f_LCM4,a_LCM4,k_LCM4,b,i_LCM4,s,y); 

formatl'(f_LCMA,a_LCMA,k_LCMA,b,i_LCMA,s,y); 

formatl'{f_LCMP,a_LCMP,k_LCMP,b,i,s,y); 

formatl’(f_LCMT,a_LCMT,k_LCMT,b,i_LCMT,s,y); 

formatl'(f_LCPA,a,k_LCPA,b,i,s,y); 

formatl'(f LCRA,a,k_LCRA,b,i,s,y); 

formatla' (I__LCT,ak,b,i,s,y); 

formatl'(f_LDIF,a,k,b,i,s,y ); 

formatIVA'(f_LECM,a_LECM,0,i LECM )? 

formatl'(f LlBP,a,k_LIBP,b,i7s,y); 

formatIi'(? LIM,a,k_LIM,b,i,sy); 

formatl'(f_LIMP,a,k_LIMP,b,i,s,y); 

formatIVA'{f_LISR,a,b,i LISR ); 

formatl'(f_LLP,a,k_LLP,5,i,9,y); 

formatl'(f_LLPN,a,k_LLPN,b,i,s,y); 

formatl'(f_LM,a,k,b7i,s,y); 

formatl'(f LNA,a,k,b,i,s,y); 

formatV'(f_LRR,a,f2 LRR,0,0,0,m,f6_LRR)? 

formatIVA'(f LRRA,a7b,i); 

formatIVA'(f_LSCM,a_LSCM,0,i_LSCM); 

formatI'(f LSUM,a,k,b,i,s,y); 

formatIVA'(f_LTCM,a LTCM,0,i_LTCM ); 

formatl'(f_LXB,a,k,E,i,s,y); 

formatl'(f”M,a,k,b,i,s,y); 

formatl'(f~MS,a,k_MS,b,i,s,y); 

formatl'(f_NLP,a,k_NLP,b,i,s,y); 

formatl’(f~OR,a,k_OR,b,i,s,y); 

formatIi'{7 PEI,a7k PEI,b,i,sy); 

formatIVA'{I_PFCD,070,i PFCD ); 

formatIVA'(f PFCE,0,0,i"PFCE ); 


Table F-3d - Machine Code Instructions (Continued) 


F-44 


F.13 Machine Code Insertions 







Ada/L PSE Handbook 


Version 3.5 
29 March 1991 


| MACRO/L Ada/L 


PFR 

PIE 

a, 

y*b. 

s 

PMM 

y> 

b, s 


PMR 

Y> 

b, s 


POP 

a, 

b 


PUSH 

a, 

b 


RA 

a. 

y,k, 

b,s 

RALP 

a. 

y,b, 

s 

RAN 

a, 

y,k. 

b, s 

RCCR 

Yf 

b, s 


RD 

a. 

y,k. 

b, s 

RI 

a. 

y,k, 

b, s 

RIOAS 

a. 

b 


RISR 

a. 

b 


RJ 

Yf 

k ,b. 

s 

RJC 

a, 

y,k. 

b,s 

RJSC 

a. 

y,k. 

b, s 

RLP 

a, 

y,b. 

s 

RMMS 

a. 

bi 


RMS 

a. 

y,b. 

s 

RMSR 

Yf 

b,s 


RNLP 

a. 

y,b. 

s 

ROR 

a. 

y,b, 

s 

RP 

a. 

sy,b 


RPD 

Yf 

k ,b. 

s 

RRR 

a. 

m 


RSC 

RSD 

a, 

a 

y,b. 

s 

RXOR 

a. 

y,b. 

s 

SA 

a. 

y,k. 

b,s 

SB 

a, 

y,k. 

b,s 

SBN 

a, 

n 


SBPC 

a. 

y,k. 

b,s 

SC 

a. 

y»b, 

s 

SCI 

ak 

,y»b 

,a 

SCMA 

y * 

b,s 


SCMP 

Yf 

b, s 


SCMT 

Y> 

b,s 


SCM1 

Y> 

b,s 


SCM2 

Yf 

b,s 


SCM3 

Yf 

b,s 


SCM4 

Yf 

b,s 


SCPA 

a. 

y,b, 

a 

SCRA 

a, 

y#b, 

a 

SCSR 

Yf 

b,s 



formatI*(f_PFR,a,k_PFR,b,i_PFR,s,y); 

formatlVA'(f_PIE,070,i_PIE); 

formatl’(f_PMM,a_PMM,k_PMM,b,i,s,y); 

formatI'(f_PMR,a_PMR,k_PMR,b,i,s,y); 

formatV'(f_POP,a,f2_P0P,b,0,0,0,f6 POP); 

formatV'(f_PUSH,a,f2^PUSH,b,0,0,0,F6_PUSH ); 

formatl’(f_RA,a,k,b,T,s,y); 

formatl*(f_RALP,a,k_RALP,b,i,s,y); 

formatl'(f_RAN,a,k,b,i,s,y); 

formatl*(f_RCCR,a_RCCR,k_RCCR,b,i,s,y); 

formatl'(f_RD,a,k,b,i,s, y); 

formatl'{f_RI, a, k, b,i,s, y); 

formatlVA*(f_RIOAS,a,b,i_RIOAS); 

formatlVA*ff_RISR,a,b,i_RISR ); 

formatlII'(f_RJ , a_RJ,f3_RJ,k, b,i, s ,y); 

formatIII'(f_RJC,a,f3_RJC,k,b,i,s,y); 

formatlll’(f_RJSC,a,f3_RJSC,k,b,i,s,y); 

formatl'{fJRLP,a,k_RLP,b,i,s,y); 

formatlVA*(f_RMMS,a,b,i); 

formatl'{f_RMS,a,k_RMS,b,i,s, y); 

formatl'(f_RMSR,a_RMSR,k_RMSR,b , i,s,y); 

formatl'(f_RNLP,a,k_RNLP,b,i,s,y); 

formatl*(f ROR»a,k_ROR,b,i,s,y); 

formatli'(?_RP,a,k_RP,b,i,sy) ; 

formatl*(f_RPD,aJRPD,k,b,i,s,y ); 

formatV'{f_RRR,a,f2_RRR,0,0,0,m,f6_RRR ); 

formatl’(f RSC,a,k_RSC,b,i,s,y); 

formatlVA’Tf_RSD,a,O f i_RSD); 

formatl'(f_RXOR,a,k_RXOR,b,i,s,y) ; 

formatl'(f_SA,a,k,b,i,s,y); 

formatl’{f~SB,a,k,b,i,s,y); 

formative’,a,f 4_SBN,n) ; 

formatl*(f SBPC,a,k,b7i*s,y); 

formatl'(f SC,a,k SC,b,i,s,y); 

formatIa'(F SCI,aJc,b,i,s,y); 

formatl' (f_S>CMA,a SCMA,k SCMA,b,i SCMA,s,y); 

formatl*(f SCMP,a”SCMP,k SCMP,b,i,s,y); 

formatl'(f~SCMT,a~SCMT,k”SCMT, b r i SCMT,s,y); 

formatl*(ff_SCMl,a“SCMl,k SCMl,b,i SCMl,s,y); 

formatl'(f_SCM2,a~SCM2,k _ SCM2,b,i_SCM2,s,y); 

formatl'<f SCM3,a~SCM3,k~SCM3,b,i SCM3,s,y); 

formatl*(f — SCM4,a_SCM4,k”SCM4 , b , i~SCM4 fS»y); 

formatl’(f~SCPA,a7k_SCPA7b,i,s,y)7 

formatl’(f_SCRA,a,k SCRA,b,i,s,y); 

formatl*(f SCSR,a SCSR,k SCSR,b,i,s,y); 


Table F-3e - Machine Code Instructions (Continued) 


F.13 Machine Code Insertions 


F-45 









Version 3.5 
29 March 1991 


Ada/L PSE Handbook 


MACRO/L 

Ada/L | 

SCT 

ak,y,b,s 

formatIa'(f SCT,ak,b,i,s,y); 

SDIF 

a,y,b,s 

formatl'(f SDIF,a,k SDIF,b,i,s,y); 

SDMC 

a 

formatlVA'(f SDMC,a,0,i SDMC ); 

SIBP 

a,y,b,s 

formatl*(f SIBP,a,k SIBP,b,i,s,y); 

SIMC 

a,b 

formatlVA'ff SIMC,a,b,i SIMC ); ! 

SIMP 

a,y, b,s 

formatl*(f SIMP,a,k SIMP,b,i,s,y); 

SIRC 

a,b 

formatlVA*(f SIRC,a7b,i SIRC ); 

SITC 

a, b 

formatlVA*(f SITC,a,b,i~SITC ); 

SLP 

a,y,b,s 

formatI'(f SLP,a,k SLP,E,i,s,y); 

SM 

a,y,k,b,s 

formatl' (f"”SM,a,k,5,i,s,y); 

SMCC 

a 

formatlVA'Tf SMCC,a,0,i SMCC ); 

SMSR 

y ,b,s 

formatl*(f SMSR,a SMSR,k SMSR,b,i,s,y); 

SNA 

a,y,k,b,s 

formatI'(f SNA,a,k,b,i,s,y); 

SRRA 

a,b, i 

fcrmatIVA’Tf SRRA,a,b,i); 

SSUM 

a,y,b,s 

formatl’(f SSUM,a,k SSUM,b,i,s,y); 

STAF 

a,b 

formatv*(f STAF,a,f7 STAF,b,0,0,0,f6 STAF); j 

STSB 

ak,y,b,s 

formatIa'(7 STSB,ak,E>,i,s,y); ~ t 

SXB 

a,y,k,b,s 

formatl*(f §XB,a,k,b,i,s,y); ! 

TBN 

a,n 

formatIVC'(f TBN,a,f4 TBN,n); 

TR 

a, b 

formatV'(f TR,a,f2 TR,b,0,0,0,f6 TR); 

TSBN 

a, n 

formative(f TSBN,a,f 4 TSBN, n ); 

TSF 

y,b,s 

formatl*(f TSF,0,k TSF7b,i,s,y); 

TSM 

bi 

formatIVA'Tf TSM ,a TSM,b,i); 

TV 

a,b 

formatv*(f TV,a,f2 TV,b,0,0,0,f6 TV); 

WFBP 

a,y,b,s 

formatl'(ff~WFBP,a,k WFBP,b,i WFBP,s,y); 

WFM 

a,y,b,s 

formatl'(f~WFM,a,k WFM,b,i WFM,s,y); 

XOR 

a,y,b,s 

formatl'(f~XOR,a, k XOR,b,i,s,y)? 

XR 

y,b,s 

formatl'(f~XR,0,k XR,b,i,s,y); 

XRL 

y,b,s 

formatl '( f~XRL,0,k XRL,b,i,s,y); 

xs 

sy,b 

format I ' (f JCS,aJCS, kJCS, b, i, sy); 


Table F-3f - Machine Code Instruction* (Continued) 


F-46 


F.13 Machine Code Insertions 





