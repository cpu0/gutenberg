

TION PAGE 


Form Approved 
OPM No. 0704-0188 


HMdquuw.._ 

Managwrwnt and Budgti. WiiMngMn, TC zuaui. 


1. AGENCY USE ONLY (Leave Blartk) 


Mponu. indudkig *>• (m* Iw rMtwnng inMnjction*. Mvching uWng <M« lourcM gatlwing and maimainir^Jtia^aB 
attimala or any olhaf aapaa ol M ooiaction o( Monnalioa Including auggawlona tw fadudng this burdan. lo Waalwgton 
Oavia Highway. Suta 1204. ArtngKm. VA 22202-4302. and to lha Offica a< titoimalian and Ragulalofy Attain. Odica of 


2. REPOi^T DATE 


3 REPORT TYPE AND DATES COVERED 

Final: 18 Nov 92 


4 TITLE AND SUBTITLE 
Validation Summary Report: Verdix Corporation, VAOS System V/386/486 
VAda-110-3232, Version 6.1, AST Premium 486 under UNIX System V, Release 4.0 
(Host & Target), 921004W1.11281 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND A00RESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-542-1092 


9 SPONSORINGAHONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


10 SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS System V/386/486 VAda-110-3232, Version 6.1, AST Premium 486 under UNIX System V, 
Release 4.0 (Host & Target), ACVC 1.11 


S DTIC 

St-lCTt 

J*N27I983 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


NSN 7540-01-280-550 


18. SECURITY CLASSIFICATION 

UNCLASSIFED 


I. 


19 SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15. NUMBEROF-B 


16. PRICE CODE 


20 LIMITATION OF ABSTRACT 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 

















AVF Control Number; AVr-VSR-542-1092 
Date VSR Complete: 18 November 1992 

92-06-23-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 921004W1.11281 
Verdix Corporation 

VADS System V/386/486 VAda-110-3232, Version 6.1 
AST Premium 486 under UNIX System V, Release 4.0 


(FINAL) 


Prepared By: 

Ada_Va1idation_Faci1i ty 
645 C-CSG/SCSL 

Wright-Patterson AFB oa 45433-6503 


93-01439 


Certificate Information 


The following Ada inqplementation was tested and determined to pass ACVC 
1.11. Testing was completed on 4 October 1992. 

Compiler Name and Version: VADS System V/386/486 

VAda-110-3232, Version 6.1 

Host Computer System: AST Premium 486 

under UNIX System V, Release 4.0 

Target Ccmputer System: AST Premium 486 

under UNIX System V, Release 4.0 

Customer Agreement Number: 92-06-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

921004W1.11281 is awarded to Verdix Corporation. This certificate expires 

two years after the ANSI adoption of ANSI/ftlL-SlD-lSlSB. 

This report has been reviewed and is approved. 








Ma Validation Facility 


Steven P. Wilson 
Technical Director 
645 C-CSG/SCSL 
Wright-Patterson AFB OT 


45433-6503 


sar 

DirdctorT' 



}rganization 

iter and Software Engineering Division 
Institute for Defense Analyses 
Alexarxlria VA 22311 


DTIC QUALnr lUGFECTED S 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


1 Aeeesslon for | 

Ills QRiUkI 

HT 

DTIC TAB 

o 

Unaaaowneed 

a 

JustlXlcatien_ 



filetritut100/ 


AvaiUbUlty Qeiet 


wtet 


lAvaii 
SpeelBi 






DECLARATION OF CONFORMANCE 


Ttie following declaration of conformance was supplied by the customer. 

Declaration of Conformance 
Customer: Verdix Corporation 
Certificate Awardee: Verdix Corporation 

Ada Validation Facility: ASC/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 
Ada Inplementatim: 

Ada Compiler Name and Version: '/ADS System V/386/486 

'/Ada-110-3232, Version 6.1 

Host Conpjter System: AST Premium 486 

under UNIX System V, Release 4.0 

Target Computer System: AST Pn*)nium 486 

xinder UNIX System V, Release 4.0 

Declaration: 

Me, the undersigned, declare tlLUt we have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/T11L-STD-1815A ISO 8652-1987 in the implementation 
listed above. 



Certificatib AVardefe Signature Dace 









TABLE OF (INTENTS 


CHAPTER 1 ZNTROCXXn'ZON 

1.1 USE OF ZHZS VALIDATION SUMMARY REPORT.1-1 

1.2 REFEREl'lCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION OEPENDE24C1ES 

2.1 WITHDRAWN TESTS .2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT .3-1 

3.2 SUMMARY OP TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 


INTRODUCTION 


Hie Ada inplententation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada63] using the 
current Ada Caipiler Validation Capability (ACVC). This Vali^tion Sumnary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terns used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject iiqilementation has no 
nonconformities to the Ada Standard other than those presented. Cc^ies of 
this report are available to the public from the AVF vdiich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF \Aiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1601 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 





INTR0DUCTIC3N 


1.2 REFERENCES 

[Ada83] Reference M^u^ual for the Ada Prooranninq Language , 

ANSI/MIL-STI>-181bA, February 1^83 and ISO 86b2“1987. 

(Pro90] Ada Compiler Validation Pryedures , Version 2.1, Ada Joint 
Program Office, August 19^0. 

[UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Ccmf}liemce of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vhen they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The packa^ REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada StaiKlard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Clas^ C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a conpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resxilting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Sane of the class B tests coitain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Staixlard involving multiple, separately compiled units. Errors 
are expected at link time, and executioi is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values vised for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 



ijramxrricN 


For each Ada implementation, a custcmzed test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 emd (UG89]). 

In order to pass eui ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
treuisformation of Ada programs :nto executable form emd 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Cap>ability user's guide and the template for the validation sumnary 

(ACVC) report. 

Ada An Ada compiler with its host computer system euxl its 

Implementation target conputer system. 

Ada Joint The p)art of the certification body v^ich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada ihe part of the certification body which carries out the 

validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guiditfice for operations of the Ada certification system. 

Orgemization 
(AVD) 

Ccanpliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Implementation 

Conputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or p^art of the data 
necessa^ for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-ccxviected units. 


1-3 




INTRCXXXrriCN 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inappliceible 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Ccmipiler 

Validated Ada 
In^lementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vdio enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a custcmier assuring that conformity 
is realized or attainable on the Ada implementation for 
v^ich validation status is realized. 

A ccmoputer system where Ada source programs are treuisformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada inplementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragrai^>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predcxninantly software, but partial or 
complete hardware implementations are possible. 

A computer system vdiere the executable form of Ada programs 
are executed. 


Ihe conpiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration (Pro90). 

The process of checking the conformity of an Ada conpiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTER 2 


INPLEMEinATION DEPEMDQXTIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdravm by the AVO. Ihe rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B4130BB 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B4900aA 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AO7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD900SA 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Ccoinentaries ai^ commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




1MPLEME241ATIGN DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.NAX_DIGZTS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests checic for the predefined type LCNG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C C45412C 
C45504F C45611C 
C45632C B52004D 
C86006C CD7101F 


C35713C, B86001U, and C86006G checic for the predefined type 

LONG_FLQAT; for this inf>lementation, there is no sued) type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORr_FLQAT; for this 
inplementation, there is no such type. ~ 


A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532N..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
in^lementation, NAX_MANTZSSA is less than 47. 

C45624A. .B (2 tests) check that the proper exception is raised if 
NACHINEjOVERFLOWS is FAL<SE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this iiqplementation, NACHINEjDVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 


C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 



IMPLEMEl^TION DEPEIjDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and a32AS40 use length clauses 
to specify non-default sizes for access types; this inplenientation 
does not support such sizes. 

The tests listed in the following table check that USE_E3WOR is raised 
if the given file operations ar« not supported for the given 
combination of mode and access method; this inplenientation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUE24TIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT PILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LEl«?rH and SET_PAGE_LENGTH raise 
USE ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vdien the value of the 
page nundser exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 



inplehentation dependencies 


2.3 TEST MC»IFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A 

B38009B B85008G B85008H BC1303F BC3005B 

BD2B03A BD2D03A BO4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT' FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, and CD2A31A..C (3 tests) were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGT11_CHECR, which uses 
Unchecked_Conversion according to the interpretation given in Al-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: 

'• * CHECK ON REPRESENTATION FOR <TyPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. 

This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This in^lementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36 and 40; the modified test was passed. 


2-4 




CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Sam Quiring 

Verdix Corporation 

1600 NW Conpton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SIMIARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the custcxnized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplic 2 U 3 le; 
otherwise, the Ada Implementation fails t^ ACVC [Pro901. 

For all processed tests (inapplicable and applicable), a result was 
obtained that ccxiforms to the Ada Programming Language Standard. 

The list of items below gives the nundber of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b;'see section 2.1), those that require a 
floating-point precision that exceeds the implementation's 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is svqpported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 




PROCESSING INFORMATION 


a) Total Number of ^}plicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Ina^^liceddle Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(c+d+e) 

4170 

(a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
talcen on-site by the validation team for processing. Hie contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host ccm^ter. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

Testing was performed using connand scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


Option/Switch Effect 

-w suppress generation of warning messages 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 









APPENDIX A 
MACRO PARAMETERS 


This af^ndix contains the macro parameters used for custcoizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vdiich is 
the value for $MftX_IN__LEN—also listed here. These values are expressed 
here as Ada string aggregates, vrfiere "V” represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 — Value of V 

$BIG_ID1 (1..V-1 -> »A', V -> '1') 

$B1G_ID2 (1..V-1 «> »A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BlG_IMr_LIT (1..V-3 -> '0') • "298" 

$BIG_REAL_LIT (l..V-5-> »0') 4 "690.0" 

$BIG_STRING1 '"'4 (1..V/2 -> 'A') 4 

$BIG_STRING2 4 (1..V-1-V/2 -> 'A') & '!» & 

$BLANKS (1..V-20 •> ' ') 

$MAX_LEN_INT_BASED_LITEFAL 

"2:" ( (1..V-5 -> '0') 4 "11:" 

$MAX_LEN_REAL_BASQ>_LITERAL 

"16:" & (1..V-7 -> 'OM 4 "F.E:" 




MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

SALIGNMEirr 4 

$COOOT_LAST 2_147_483_647 

$DEFAULT_MEM_SIZE 16_777_216 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME I386_SYSTEM_V 

$DELTA_DOC 0.0000000004656612873077392578125 

$ENTRY_AI»RESS SYSTEM.(16140#) 

$ENERY_ADDRESS1 SYSTEM."+"(16#80i) 

$ENTRY_AK)RESS2 SYSTEM."♦”(16#100#) 

$FIELD__LAST 2_147_483_647 

$FILE_TERMINATOR ' ’ 

$FIXED_NAME NO_SUCH_TYPE 

$FLQAT_NAME NO_SUCH_TYPE 

$PORM_STRING "" 

$PC»M_STRING2 "atf#IC)TJ®STRlCr_FILE_atfA^^ 

$GREATER THAN DURATION 

100_000.00 

$GREATER THAN DURATION BASE LAST 

T0_007_000 

$GREATER THAN FLOAT BASE LAST 

l.lE+308 

$GREATER THAN FLOAT SAFE IAR(X 

5.UE307 

A-2 




MACRO PARAMETERS 


SOFTER THAN SHORT FLOAT SAFE LARGE 
~ “ 9.0E37 ~ 

$HIGH_PRIORITY 99 

$ILLEGAL EXTERNAL FILE NAMEl 

Villegal/f ile_naine/2 {1 $%FILE1. DAT" 

$ILLBGAL EXTEraiAL FILE NANE2 

Ville9al/file_naiDe/2{ ]$%FILE2 .DAT" 

$INAPPROPRIATE LINE LENGTH 

■ -1 

$INAPPROPRIATE PAGE LENGTH 

“ -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTBGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE__LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS THAN DURATION BASE FIRST 

“ " ~ -17J_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE CODE_STATEI1ENT 

CODE_0'(OP -> NOP); 

$MACHINE_OODE_TVPE CODE_0 

$MANnSSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INr_PLUS_l 2_147_483_648 

$MIN_INT -2_147_483_648 

$NAHE TINy_INTEGER 

A-3 




MACRO PARAMETES^ 


$NANE_LIST 

$NAME_SPEC1FICATI0N1 

$NAME_SPECIFICATI0N2 

$NAME_SPECIFICATI0N3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEM_STOR_UNIT 

$NEW_SyS_NAME 

$PACX_TERNINATC» 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_AIX)RESS 
$VARIABLE_ADDRESS1 
$VARIABLE_AIX>RESS2 
$YOUR PRAGMA 


I386_SYSTEM_V 
/\isrAc/acvc/c/e/X2120A 
/\jsrAc/acvc/c/e/X2120B 
As rAc/acvc/c/e/X3119A 
16«F00j000E« 

16_777_216 

8 

I386_SYSTEM_V 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; END RECORD 

CC»E_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR 3'ADDRESS 


PRAGMA PASSIVE 





APPENDIX B 


CXSKPILATZON SYSTEM OPTIONS 


Hie compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer, urdess specifically not^ 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


Syntax 

ada [options] [source_file]... [linker_options] 
[object_file.ol... “ 

Description 

The command ada executes the Ada compiler and conpiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

The object for each compiled Ada unit is left in a file with 
the same name as that of the source with 01, 02, etc. 
substituted for .a. The -o option can be used to pro^ce an 
executable with a name other than a.out, the defaialt. For 
cross compilers, the default name is a.vox. 

By default, ada produces only reject and net files. If the 
-M option is used, the coopiler automatically invokes a.Id 
and builds a ccxnplete program with the named library unit as 
the main program. 

Ncxv-Ada object files (.o files produced by a compiler for 
am>ther language) may be given as arguments to ada. These 
files will be passed cm to the linker and will be linked 
with the speciHed Ada <^ject files. 

Coranand line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 


B-1 




COMPILATION SYSTEM OPTIONS 


Several VADS ccxnpilers may be simultaneously available on a 
single system. Because the ada connand in any 
VADS locatiorvbin on a system will execute the correct 
compiler components based upon visible library directives, 
the (^tion -sh is provided to print the name of the 
components act\jally executed. 

Program listings with a disassendoly of machine code 
instructions are generated by a.db or a.das. 

Options 

-a file_name (archive) Treat file_name as an ar file. 

Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined \inits as xjncc»^iled. The -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E opti(Xi 
should be used. 


-E 


-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. The file of raw error messages 
can be used as ii^xit to a.error. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 


-El file 

-El directory (error listing) Same as the -E option, except that 
source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, embed then in the source file, and call the 
environment editor ERROR_EDITQR. (If ERR0 R_EDIT 0R is 
^fined, the environiBent~variable ERRGR PATTERN should also 


B-2 






CONPZIATIGN SYSTEM OPTIGNS 


be defined. ERRC:^_PATTERN is an editor search coonand that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, call vi(l). 

-K (keep) Keep the intermediate language (IL) file 
produced by the coiqpiler front end. 

-L library_naiDe (library) Operate in VhDS library 
libraryjnane (the current working directory is the default). 

-lfile_abbreviation (library search) ihis is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviaticm.) 

For a description of the file abbreviations, see also 
Operating system documentation, ld(l) 

-n unit_naffle (main) Produce an executable program using 
the named unit as the main program. The unit must be either 
a parameterless procedure or a parameterless function 
returning an integer. The executable program will be left in 
the file a.out unless overridden with the -o option. 

-N source_file (main) This option is like -M unit_name, except 
that the unit name is assiimed to be the root ~ 
name of the .a file (for foo.a the unit is foo. Only cme .a file 
may be preceded by -M. 

-o executable file (output) This option is to be used in 
conjunction with the -M option. executable_^file is the name 
of the executable rather than the default a.out. 

-0(0-9] (optimize) Invoke the code optimizer (OPTIN2). An 
optional digit (there is no space before the digit) limits 
the number of passes by the <^timizer: 

no -O option, make one pass 

-O no digit, optimize as far as possible 

-00 prevents optimization 

-01 no hoisting 

-09 full optimization 

The addition of the INFO directive, OPTIN3:INFO:TRUE, to the 
ada.lib will cause the compiler to use a new optimizer (0PTTN3) 
that generates faster code. 

The default level of optimization for 0PTIH3 is 04. Note 
that optimization levels for OPTinS are more than simply 
additional iterati<xis: 


B-3 




CXX1P1IATIGN SYSTEM OPTICNS 


-0 full c^tinization (sane as 0PTIM2 ada -09) 

-OO prevents c^tinizaticvt 

-01 no hoisting (sane as 0PnM2 ada -01) 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes 

-06 hoisting from loops with maximun passes 

-07 hoisting from loc^s and branches 

-06 hoisting from loops and branches, more passes 

-09 hoisting from loops and branches, maximum passes 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

For information on linker INFO directives see USER'S GUIUE, 
INFO Directive Names cm page 

a.info on page , and for more information about 
optimization, see USER'S GUII£, Compiler Optimizations on 
page . 

-R VADS_library (recompile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (stippress) Apply pragma SUPPRESS to the entire 
compilaticm for all suppressible checks. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print compiler version number, date and time 
of compilation, name of file compiled, command ir^t line, 
total conpilaticm time, and error summary line. Storage 
usage information about the object file is provided. With 
0PTIN3 the output format of compression (the size of 
optimized instructims) is as a percentage of ii^t 
(unoptimized instructions). 


B-4 





COMPIIATICN SYSTEM OPTIONS 


-w (warnings) Su{^ress warning diagnostics. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended 
to be self-expleu-atory. Most refer to the RM. Each RN reference 
includes a section number and optionally, a paragraph nundber 
enclosed in parentheses. 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
A(^ndix, are provided by the custcxner. Unless specifically noted 
otherwise, references in this a^^ndix are to linker documentation and not 
to this report. 

a.Id 


prelinker 

Syntax 

a.Id [options! unit_naroe tld_optionsl 
Options 

-DX (debug) Debug memory overflow (use in cases vdiere 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

>E unit name (elaborate) Elaborate unit_name as early in 
the elaEoration order as possible. 

-F (files) Print a list of dependent files in order and 
su{^ress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tHe output rather than the defaxilt, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker comnand before executing it. 
-V (verify) Print the linker command but suppress 


B-5 





COMPILATION SYSTSM OPTIONS 


execution. 

Description 

a.Id collects the object files needed to make unit_naine a 
main program and calls the UNIX 
linker ld(l) to link together all Ada and other language 
objects required to produce an executable image in a.out. 

\init_naine is the main program and must name a non-generic 

subprogram. If unit name is a function, it must return a value of the type 

STANDARD.INTEGER, ifiis integer result will be passed back to the UNIX 

shell as the status code of the execution. The utility uses 

the net files produced by the Ada compiler to check 

dependency information, a.Id produces eui exception mapping 

table and a unit elaboration table and passes this 

information to the linker. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. 

Besides information generated by the compiler, these 
directives also include WITIln directives that allow the 
autcxnatic linking of object modules compiled from other 
languages or Ada object modules not nan^ in context clauses 
in the Ada source. Any number of Wiinn directives may be 
placed into a library, but they must be numbered 
contiguously beginning at WITTll. The directives are recorded 
in the library's ada.lib file and have the following form. 

WITHI:LINK;object_file: 

wira2:LINK:archive_file: 

wiTHn directives may be placed in the local Ada libraries or 
in any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same nustered WiTHn 
directive in a library later in the library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes 
the correct executable based upcm directives visible in the 
ada.lib file. This permits nultiple VADS compilers to exist 
on the same host. The -sh cation prints the name of the 
actual executable file. 

Diagnostics 


B-6 




COMPILATION SYSTEM OPTICNS 


Self-explanatory diagnostics are produced for missing files, 
etc. Add’tional messages are produced by the UNIX linker Id. 


B-7 






APPEZ^IX C 


APPENDIX F OF IHE Ada STANDARD 


Hie only allowed inplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the custcxDer. unless specifically noted otherwise, 
references in this Aj^ndix are to conpiler documentation and not to this 
report. Inpleroentation-specific portions of the package STANDARD, vhich 
are not a part of ^pendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486231E+308..1.7976931348623lE+308; 
type SHORT_FLQAT is digits 6 range -3.40282E-f38 .. 3.40282E+38; 

type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 





APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. In^lementation-Dependent Pragmas 

1.1. INLINE_0NLY Pragma 

The INLINEjONLY pragma, v^en used in the same way as pragma 
INLINE, indicates to the conpiler that the sul^rogram must 
always be inlined. This pragma also suf^resses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be rais^ at nin time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to implement code b^ies for v^ich no actxial Ada 
body can be provided, for example the HACHINE_C(X>E package. 

1.3. SHARE_C(X)E Pragma 

The SHARE_CXX)E pragma takes the name of a generic instantia¬ 
tion or a generic \init as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic xmit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
vhich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BODY is also recognized by the imple¬ 
mentation a^ has Bie same effect as SHARE CODE. It is 


C-2 



APPENDIX F OF THE Ada SIANCARD 


included for coinpatability with earlier versions of VADS. 

1.4. N0_IMAGE Pragma 

The pragma suf^resses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
compilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTEBNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable deTined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACEJNAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or suti^rogram name with an 
external reference to the second, link_arguinent. The pragma 
is allowed at the place of a declarative item in a package 
specification and must a^^ly to an object or subprogram 
declared earlier in the same package specificaticm. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_C0DE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallov«d. A warning is issu^ if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.8. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a marine c^e 


C-3 


APPENDIX F OF THE Ada STANDARD 


procedure. It specifies vriiether the code should be optim¬ 
ized by the coopiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the iiq>lementation but has no 
effect. 

2.2. ELABC^TE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.4. INTERFACE 

This pragma supports calls to '0' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.6. MEMC»Y_SIZE 

This pragma is recognized by the implementation. The iiqple- 
mentation does not allow SYSTEK to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. N0N_REENrRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the s\^rogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT ELABORATED 


C-4 




APPENDIX F OF THE Ada STANDARD 


This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.10. PACK 

This pragma will cause the conpiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE! INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared ion^iately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning v .ll be generated at ccxnpile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no 
effect. 

2.15. STORAGE UNIT 


C-5 



APPENDIX F OF THE Ada STANDARD 


Hiis pragma is recognized by the in^lementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION C31ECK and in some cases GVERFI£W_CHECR cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recoopiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to ?. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clatise has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MAC31INE_C0DE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASR_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

— Copyright 1987, 1988, 1989 Verdix Corporation 

— Preserve line numbers as they are reported in ACVC tests. 




APPE34DIX F OF TliE Ada STANDARD 


with unsi'3ned_types; 
package SYSTEM is 

pragma su{^ress(ALL_CHEG(S); 
pragma suppress(EXCEPTIONJEABLES); 
pragma not_elaborated; 

type NAME is ( i386_System_V ); 

SYSTEM_NAME : constant NAME i386_System_V; 

STC»AGE_UNIT ; constant 8; 

MEMORY SIZE : constant 16 777 216; 


— System-Dependent Named Nund^ers 


MIN_INT 

MAX_Itn' 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant -2 147 483 648; 

: constant 2 T47_783j?47; 

: constant 1?; 

constant :• 31; 

; constant :« 2.0**(-31); 

; constant :■ 0.01; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SI2E : integer 64*1024; 
type ADDRESS is private; 


function ">" (A: A1X)RESS; 
function "<" (A: A1X)RESS; 
function ">-"(A; ADDRESS; 
fxinction "<-"(A; ADDRESS; 
function (A: AK)RESS; 
function (A: ADIX^S; 
function (A: ADDRESS; 


B: ADDRESS) return BOOLEAN; 
B: AI»RESS) return BOOLEAN; 
B: MyORESS) return BOOLEAN; 
B: M}DRESS) return BOOLEAN; 
B: ADDRESS) return INTEGER; 
I: INTEGER) return ADDRESS; 
I: INTEGER) return AZ»RESS; 


function "-f" (I: UNSIGNED TYPES.UNSIGNED INTECSSR) return ADCOtESS; 


function NEM0RY_AD[»ESS 

(I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADEOUSSS 

renames 


NO_AD[Xt : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID ; constant TASK_ID; 

subtype SIG STA'nJS_T is INTEGER; 
SIG_STA'nJS_SIZE: constant 4; 

type PROGRAM_ID is private; 


C-7 





APPENDIX F OF THE Ada STANDARD 


NO_PROGRAM_ID : constant PROGRAM_ID; 
type LGNG__AIX)RESS is private; 

^X>_LONG_ADDR : constant La«:_AIX)RESS; 

function "+" (A: LONG_ADDRESS; I: INTBOR) return LCNG_ADDRESS; 
function (A; LONG_ADDRESS; I: INTEGER) return LONG__ADDRESS; 

function MAKE_LQNG_ADDRESS (A: ADDRESS) return LONG_AIX)RESS; 

function LOCALIZE(A: LQNG_ADOR£SS ; BYTE_SIZE : IIAEGER) 
return ADDRESS; 

function STATION OF(A: LONG ADDRESS) return INTEGER; 


private 


type AIX)RESS is new UNSIGNED_TYPES.UNSIGNED_INTBGER; 
N0_AIX3R : constant AIX>RESS 0; 

pragma BUILT_IN( ">"); 
pragma BUILT_IN( "<" ); 
pragma BUILT_IN(">-"); 
pragma BUILT_IN( "<-"); 
pragma BUILT_IN("-") ; 
pragma BUILT_IN("+") ; 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED__INrEGER; 
N0_TASK_ID ; constant TASK_ID :« 0; 

type PROGRAM ID is new lJNSIGNED_TYPES.UNSIGNED_INrEGER; 
NO PROGRAM ID : constant PROGRAM ID :« 0; 


type LONGJVDDRESS is new UNSIGNED_TyPES.lJNSIGNED_INrEGER; 
NO LONG ADDR : constant LONG ADDRESS 0; 


pragma BUILT_IN( MAKE_LONG_ADDRESS ) ; 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

In the absence of pragma PACK record ccnponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the p^ 


C-8 






APPENDIX F OF THE Ada STANDARD 


ding where possible. Pragma PACK has no other effect on the 
storage allocated for record coo^nents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
nwiber of bits required to represent the range of the sub- 
type. A size clause aj^lied to a record type will not cause 
packing of conponents; an explicit record representation 
clause must be given to specify the packing of the cooh 
ponents. A size clause applied to a record type will cause 
packing of components only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluaticm of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables vdiich have address 
clauses. The specified address indicates the E^ysical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_OODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode nneumonics, 
a set of register definitions, and a set of addressing mode 
fiincticxis. 


C-9 



APPENDIX F OF THE Ada STANDARD 


The general synteuc of a machine code statement is as fol¬ 
lows: 


C^E_n'( opcode, operand (, operand} ); 

where n indicates the nusdser of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

GODE_N'( opcode, (operand {, operand)) ); 

For those opcodes that require no operands, named notaticm 
must be used (cf. RM 4.3(4)). 

CODE_0'( op ■> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in NACHINEjOODE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE CODE must be static expressions, string literals, or 
the functions defined in HACHINEjCODE. The 'REF attribute 
may not be used as an argument in any of these functicxis. 

Inline expansion of machine code procedures is suj^rted. 

6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on unchecked Conversiois 


Ncxie. 


9. Restrictions on Unchecked Deallocaticxis 


Ncxie. 


10. Implementation Characteristics of I/O Packages 

Instantiaticxis of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) when the size 
of ELEHENT_TYPE exceeds that value. For example for uncon- 


C-10 




APPENDIX F OF THE Ada STANDARD 


strained arrays such as string v^ere ELEMan'_TyPE'SlZE is 
very large, HAX_REC_SIZE is used instead. NAXjREOORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the maximum size s\q)ported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEC3UQ^IAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) when the 
size of ELENENTJTYPE exceeds that value. For exanple for 
unconstrained arrays such as string vdiere ELEMENTJTYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is define? in SYSTEM and can be changed by a 
program beTore instantiating INTBGER_IO to provide an uf^r 
limit on the record size. SEQUENriAL_lO in^ses no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORA(X_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAIXjSIZE length attribute 
the default collecticxi size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STCXUtfX_SIZE for an access type T. 

11.5. Limit on Declared Objects 


C-11 






APPENDIX F OF THE Ada STANDARD 


There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 





