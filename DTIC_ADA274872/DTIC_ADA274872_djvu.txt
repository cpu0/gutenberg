
AD-A274 872 

IIIIIIIIII 

ImI RH W Ml HI Ml MMi 



AVF Control Number: NIST93DEC505 4 l.li 
DATE COMPLETED “ 

BEFORE ON-SITE: 93-10-22 
AFTER ON-SITE: 93-11-01 
REVISIONS: 



DTIC 

ELFCTF 
JAN 2 6 1994 

G 



Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 931029S1.11330 
Digital Equipment Corporation 
DEC Ada for DEC OSF/1 AXP Systems, Version 3.1 
DEC 3000 Model 400 AXP Workstation => 

DEC 3000 Model 400 AXP Workstation 


Prepared By: 

Software Standards Validation Group 
Computer Systems Laboratory 
National Institute of Standards and Technology 
Building 225, Room A266 
Gaithersburg, Maryland 20899 



Ap : ' 

SJiatarui 



-• d- :s'ec-A®l 

r - , 

' 1 iLzc-noa 


94-02270 

Hlllllll 


94 1 25 08 7 






REPORT DOCUMENTATION PAGE 


Form Approved 
OPMNo. 


Public reporting burdon ter this flotation o> Mbnnabon ■ oottmolod to aimrago 1 *— -| - r -‘ —— * -■*— •‘■ Q *—- '-ri. n o — ‘‘i n p r ta fr i p iltai . . ullmiiij 

and maintaining tha data ntadad. and row—dn g tha flota t ion ol totontaion. Sand oonvnordfl mganiing thus bwdan ootimtoo or any olhar a a pad oi iNa flotation ol intormdon. ndudirg 
auggaationa tor raduoing thia bwdan, to Washington Haadquartar* Santos, Directorate tar Information O pa rati oni and Raporta. 1215 Jsflaraon Davis U ghway, Suita 1204. Artaton. V* 
22202-4302, and to tha QIHoa ol totormabon and fto gulatory Attain. OHtaa ol Manage m e n t and Budgal, Washington. DC 20603. 



Authors: National Institue of Standards and Technology 


li4:T^aT:ir,]i^ci>T;Tc^W7>iTa^f|?rm=rs^W 


Software Standards Validation Group, Computer Systems Laborato •9 RQANIZA " noN 
National Institute of Standards and Technology, Building 255, 

Room A266, Gaithersburg, Maryland 20899 


9. SPONSORIN 


"cYVe^llfaTlT 


ING AGENCY NAME(S) AND 

Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301-3080 


10. SPONSORINGIMONITORING 
AGENCY 




12a. DISTRIBUTION/AVAILABILITY 


Approved for public release; distribution unlimited 



14. SUBJEC 


Ada programming lanuage, Ada Compiler Val. Summary Report, 

Val. Testing, Ada Val. Office, Ada Val. Facility, Ada Comp. Val. Capa 


17. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 




UNCLASSIFIED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 



LIMITA 


UNCLASSIFED 

















AVF Control Number: NIST93DEC505_4_1.11 
Certificate Information 


The following Ada implementation was tested and determined to pass 
ACVC 1.11. Testing was completed on October 29, 1993. 

Compiler Name and Version: DEC Ada for DEC OSF/1 AXP Systems, 

Version 3.1 

Host Computer System: DEC 3000 Model 400 AXP Workstation 

under DEC OSF/1, Version 1.3 

Target Computer System: DEC 3000 Model 400 AXP Workstation 

under DEC OSF/1, Version 1.3 

See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
931029S1.11330 is awarded to Digital Equipment Corporation. This 
certificate expires 2 years after ANSI/MIL-STD-1815B is approved by 
ANSI. 

This report has been reviewed and is approved. 



Llty 

Dr. David K. Jefferson 
Chief, Information Systems 
Engineering Division (ISED) 



Ada Validation 
Mr. L. Arnold 



IlTty 


nson 

Manager, Software Standards 
Validation Group 
Computer Systems Laboratory (CSL) 

National Institute of Standards and Technology 
Building 225, Boom A266 
Gaithersburg MD 20899 



Ada Vaaiilaficton Organization 
Directory'womputer & Software 
Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 




&— 

Ada Joint Program Office 
M. Dirk Rogers, Major, USAF 
Acting Director 
Ada Joint Program Office 
Washington DC 20301 





Declaration of Conformance 


The following declaration of conformance was supplied by the customer. 
Customer: Digital Equipment Corporation 

Certificate Awardee: Digital Equipment Corporation 

Ada Validation Facility: 

National Institute of Standards and Technology 
Computer Systems Laboratory (CSL) 

Software Validation Group 
Building 225, Room A266 
Gaithersburg, Maryland 20899 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: 

DEC Ada for DEC OSF/1 AXP Systems, Version 3.1 

Host Computer System: 

DEC 3000 Model 400 AXP Workstation, 
under DEC OSF/1, Version 1.3 

Target Computer System: 

DEC 3000 Model 400 AXP Workstation, 
under DEC OSF/1; Version 1.3 

r 

Declaration: 

I, the undersigned, declare that I have no knowledge of deliberate deviations 
from the Ada Language Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the 
implementation listed above. 


(o(Z6(qj 

Date 


Certificate Awardee Signature 
Charles Z. Mitchell 
Digital Equipment Corporation 
Project Manager 





Customer Signature 
Charles Z. Mitchell 
Digital Equipment Corporation 
Project Manager 


□ □ 








TABLE OF CONTENTS 


f 


CHAPTER 1.1-1 

INTRODUCTION.. 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-1 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2.2-1 

IMPLEMENTATION DEPENDENCIES.2-1 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3.3-1 

PROCESSING INFORMATION. 3-1 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.. 


APPENDIX A.A-l 

MACRO PARAMETERS. A-l 

APPENDIX B./..B-l 

COMPILATION SYSTEM OPTIONS.B-l 

LINKER OPTIONS.B-2 

APPENDIX C.c-1 

APPENDIX F OF THE Ada STANDARD.C-1 



























CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the 
Ada Validation Procedures [Pro92] against the Ada Standard [Ada83] 
using the current Ada Compiler Validation Capability (ACVC). This 
Validation Summary Report (VSR) gives an account of the testing of 
this Ada implementation. For any technical terms used in this 
report, the reader is referred to [Pro92]. A detailed description 
of the ACVC may be found in the current ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the 
Ada Certification Body may make full and free public disclosure of 
this report. In the United States, this is provided in accordance 
with the "Freedom of Information Act" (5 U.S.C. #552). The results 
of this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this report 
do not represent or warrant that all statements set forth in this 
report are accurate and complete, or that the subject 
implementation has no nonconformities to the Ada Standard other 
than those presented. Copies of this report are available to the 
public from the AVF which performed this validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results 
should be directed to the AVF which performed this validation or 
to: 


Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming .Language . 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 


1-1 





[Pro92] Ada Compiler Validation Procedures . Version 3.1, Ada Joint 
Program Office, August 1992. 

[U689] Ada Compiler Validation Capability User's Guide . 21 June 
1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. 
The ACVC contains a collection of test programs structured into six 
test classes: A, B, C, D, E, and L. The first letter of a test 
name identifies the class to which it belongs. .Class A, C, D, and 
E tests are executable. Class B and class L tests are expected to 
produce errors at compile time and link time, respectively. 

The executable tests are written in a self-checking manner and 
produce a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when they are executed. Three Ada library units, the 
packages REPORT and SPPRT13, and the procedure CHECK_FILE are used 
for this purpose. The package REPORT also provides a set of 
identity functions used to defeat some compiler optimizations 
allowed by the Ada Standard that would circumvent a test objective. 
The package SPPRT13 is used by many tests for Chapter 13 of the Ada 
Standard. The procedure CHECK_FILE is used to check the contents 
of text files written by some of the Class C tests for Chapter 14 
of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. If these units are not 
operating correctly, validation testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is 
compiled and the resulting compilation listing is examined to 
verify that all violations of the Ada Standard are detected. Some 
of the class B tests contain legal Ada code which must not be 
flagged illegal by the compiler. This behavior is also verified. 

Class L tests check that an Ada implementation correctly detects 
violation of the Ada Standard involving multiple, separately 
compiled units. Errors are expected at link time, and execution is 
attempted. 

In some tests of the ACVC, certain macro strings have to be 
replaced by implementation-specific values — for example, the 
largest integer. A list of the values used for this implementation 
is provided in Appendix A. In addition to these anticipated test 
modifications, additional changes may be required to remove 
unforeseen conflicts between the tests and implementation-dependent 
characteristics. The modifications required for this 
implementation are described in section 2.3. 


1-2 




For each Ada implementation, a customized test suite is produced by 
the AVF. This customization consists of making the modifications 
described in the preceding paragraph, removing withdrawn tests (see 
section 2.1) and, possibly some inapplicable tests (see Section 3.2 
and [UG89]). 

In order to pass an ACVC an Ada implementation must process each 
test of the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that 

have to be added to a given host and 
target computer system to allow 
transformation of Ada programs into 
executable form and execution thereof. 


Ada Compiler 
Validation 
Capability (ACVC) 


Ada Implementation 


Ada Joint Program 
Office (AJPO) 


Ada Validation 
Facility (AVF) 


Ada Validation 
Organization (AVO) 


The means for testing compliance of Ada 
implementations, Validation consisting of 
the test suite, the support programs, the 
ACVC Capability User's Guide and the 
template for the validation summary (ACVC) 
report. 

An Ada compiler with its host computer 
system and its target computer system. 

The part of the certification body which 
provides policy and guidance for the Ada 
certification Office system. 

The part of the certification body which 
carries out the procedures reguired to 
establish the compliance of an Ada 
implementation. 

The part of the certification body that 
provides technical guidance for operations 
of the Ada certification system. 


Compliance of an The ability of the implementation to pass 
Ada Implementation an ACVC version. 


1-3 


Computer System 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable Test 

ISO 

LRM 


Operating System 


A functional unit, consisting of one or 
more computers and associated software, 
that uses common storage for all or part 
of a program and also for all or part of 
the data necessary for the execution of 
the program; executes user- written or 
user-designated programs; performs 
user-designated data manipulation, 
including arithmetic operations and logic 
operations; and that can execute programs 
that modify themselves during execution. A 
computer system may be a stand-alone unit 
or may consist of several inter-connected 
units. 

Fulfillment by a product, process, or 
service of all requirements specified. 

An individual or corporate entity who 
enters into an agreement with an AVF which 
specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer 
assuring that conformity is realized or 
attainable on the Xda implementation for 
which validation status is realized. 

A computer system where Ada source 
programs are transformed into executable 
form. 

A test that contains one or more test 
objectives found to be irrelevant for the 
given Ada implementation. 

International Organization for 
Standardization. 

The Ada standard, or Language Reference 
Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. 
Citations from the LRM take the form 
M <section>.<subsection>:<paragraph>." 

Software that controls the execution of 
programs and that provides services such 
as resource allocation, scheduling, 
input/output control, and data management. 
Usually, operating systems are 
predominantly software, but partial or 
complete hardware implementations are 
possible. 


1-4 



Target Computer 
System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 


Validation 


Withdrawn Test 


A computer system where the executable 
form of Ada programs are executed. 

The compiler of a validated Ada 
implementation. 

An Ada implementation that has been 
validated successfully either by AVF 
testing or by registration [Pro92]. 

The process of checking the conformity of 
an Ada compiler to the Ada programming 
language and of issuing a certificate for 
this implementation. 

A test found to be incorrect and not used 
in conformity testing. A test may be 
incorrect because it has an invalid test 
objective, fails to meet its test 
objective, or contains erroneous or 
illegal use of the Ada programming 
language. 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

Some tests are withdrawn by the AVO from the ACVC because they do 
not conform to the Ada Standard. The following 95 tests had been 
withdrawn by the Ada Validation Organization (AVO) at the time of 
validation testing. The rationale for withdrawing each test is 
available from either "the AVO or the AVF. The publication date for 
this list of withdrawn tests is 91-08-02. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are 
irrelevant for a given Ada implementation. The inapplicability 
criteria for some tests are explained in documents issued by ISO 
and the AJPO known as Ada Commentaries and commonly referenced in 
the format Al-ddddd. For this implementation, the following tests 
were determined to be inapplicable for the reasons indicated; 
references to Ada Commentaries are included as appropriate. 

The following 198 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..V (11 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 


2-1 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 






this 


C45241L..Y 

(14 

tests) 

C45321L..Y 

(14 

tests) 

C45421L..Y 

(14 

tests) 

C45521L..Z 

(15 

tests) 

C45524L..Z 

(15 

tests) 

C45621L..Z 

(15 

tests) 

C45641L..Y 

(14 

tests) 

C46012L..Z 

(15 

tests) 


C24113W.. Y (3 tests) contain lines that exceed 
implementation's maximum input-line length of 255 characters. 


C35713B, C45423B, B86001T, and C86006H check for the predefined 
type SHORTFLOAT; for this implementation, there is no such type. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations 
for types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for 
this implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEOVERFLOWS is FALSE for floating point types and the results 
of various floating-point operations lie outside the range of the 
base type; for this implementation, MACHINEOVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than 
type DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside 
the range of type DURATION; for this implementation, the ranges are 
the same. 


CD1009C checks whether a length clause can specify a non-default 
size for a floating-point type; this implementation does not 
support such sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length 
clauses to specify non-default sizes for access types; this 
implementation does not support such sizes. 

CD2B15B checks that STORAGE_ERROR is raised when the storage size 
specified for a collection is too small to hold a single value of 
the designated type; this implementation allocates more space than 
was specified by the length clause, as allowed by AI-00558. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine 
code insertions; this implementation provides no package 
MACHINE_CODE. 

The 18 tests listed in the following table check that USEERROR is 
raised if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


2-2 



Test 

File Operation Mode 

File Access Method 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL IO 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT IO 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT IO 

CE2102V 

OPEN 

OUT FILE 

DIRECT IO 

CE2102W 

RESET 

OUT FILE 

DIRECT IO 

CE3102F 

RESET 

Any Mode 

TEXT IO 

CE3102G 

DELETE 


TEXT IO 

CE3102I 

CREATE 

OUT FILE 

TEXT IO 

CE3102J 

OPEN 

IN FILE 

TEXT IO 

CE3102K 

OPEN 

OUTFILE 

TEXTIO 

The 3 tests listed 

in the 

following table 

check the given file 

operations for the 

given combination of mode and access method; 

this implementation does not support these < 

operations. 

Test 

File Operation Mode 

File Access Method 

CE2105A 

CREATE 

IN FILE 

SEQUENTIAL IO 

CE2105B 

CREATE 

IN FILE 

DIRECT IO 

CE3109A 

CREATE 

IN FILE 

TEXT IO 


CE2107C..D (2 tests), CE2107H, and CE2107L apply function NAME to 
temporary sequential, direct, and text files in an attempt to 
associate multiple internal files with the same external file; 
USEERROR is raised because temporary files have no name. 

CE2108B, CE2108D, and CE3112B use the names of temporary 
sequential, direct, and text files that were created in other tests 
in order to check that the temporary files are not accessible after 
the completion of those tests; for this implementation, temporary 
files have no name. 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2401H, EE2401D, and EE2401G use instantiations of DIRECTIO with 
unconstrained array and record types; this implementation raises 
USEERROR on the attempt to create a file of such types. 


2-3 







CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot 
restrict file capacity. 

CE3304A checks that SET_LINE_LENGTH and S ET_PAGE_LENGTH raise 
USEERROR if they specify an inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT*LAST; for this implementation, the value 
of COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

B27005A was graded passed by Evaluation Modification as directed by 
the AVO. This test checks that certain non-printable characters 
cannot be included in comments. This implementation supports 
Commentary AI-00866 which allows the escape character to be 
included in comments. The AVO ruled that the Commentary's 
non-binding recommendation (approved by ISO WG-9) may be 
implemented for Ada 83 compilers, and that this test may be graded 
passed if the inclusion of the escape character in a comment at 
line 34 is not detected as an error. 

C35507K, C35507L, C35507N..P (3 tests), C37310A, A54B02A, and 

C55B06A were graded passed by Test Modification as directed by the 
AVO. These tests all contain checks that depend on type CHARACTER 
being defined asC REGIST specified by [Ada83]. However, Commentary 
AI-00866/03 gives a non-binding interpretation that requires Ada 
compilers to use the 256-value, ISO 8859/1 (Latin-l) character set 
for type CHARACTER; this Commentary has been approved ISO WG-9. The 
AVO ruled that Ada 83 implementations may support the Latin-1 
character set. The AVO directed that the particular Test 
Modifications that are described below be made to the respective 
tests in order to accommodate the implementation's use of the 
Latin-1 character set: 

In these 5 tests, the position number of CHARACTER'LAST + l 
(expected to raise an exception, or as the number of values of the 
type) or 'LAST was changed from, respectively, 128 or 127 to 256 or 
255: 

C35507K, line 185: IF CHARACTER'VAL (IDENTINT (256)) = ASCII.DEL 
THEN 

C35507L, line 89: PROCEDURE PCH IS NEW P (CHARACTER, "CHARACTER", 
255) ; 


2-4 



C35507N, line 96: PROCEDURE PCH IS NEW P (CHARACTER, "CHARACTER", 

255); 

C37310A, lines 36 & 43: WHEN ASCI I. NUL. . CHARACTER* VAL( 2 55) -> NULL; 

C55B06A, line 98: IF OLDCOUNT + IDENT_INT(256) /= COUNT THEN 

In these 2 tests, the expected value for CHARACTER'LAST was changed 
from ASCII.DEL to the y umlaut: 

C355070, line 73: IF CHARACTER'LAST /= IDENT_CHAR (• •) THEN 

A — y umlaut 

C35507P, line 64: (CHARACTER, "CHARACTER", ASCII.NUL, ' '); 

A — y umlaut 

In this test, an additional choice was inserted immediately after 
line 116 so as to account for the additional 128 values of type 
CHARACTER: 

A54B02A, inserted as line 117: 

WHEN CHARACTER'VAL(128) .. CHARACTER'VAL(255) => NULL; 


To ensure that users of DEC Ada for DEC OSF/1 AXP Systems, Version 
3.1 are aware that this implementation supports IS08859/1 (Latin-1) 
character set, Digital Equipment Corporation has: 

1. included a discussion of IS08859/1 (Latin-1) character 
set in the Digital Equipment Corporation Ada Language 
Reference Manual; and 

2. included special notation about IS08859/1 (Latin-1) 
character set in the compatability section of the release 
notes. 


2-5 




CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is 
described adequately by the information given in the initial pages 
of this report. 

For technical and sales information about this Ada implementation, 
contact: 


Attn: Maryanne Cacciola 
Ada Product Manager 
Digital Equipment Corporation 
110 Spit Brook Road (ZK02-1/M11) 

Nashua, NH 03062 
(603) 881-1028 

Testing of this Ada implementation was conducted at the customer's 
site by a validation team from the AVF. 

3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes 
each test of the customized test suite in accordance with the Ada 
Programming Language Standard, whether the test is applicable or 
inapplicable; otherwise, the Ada Implementation fails the ACVC 
[Pro92]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were 
withdrawn because of test errors (item b; see section 2.1), those 
that require a floating-point precision that exceeds the 
implementation's maximum precision (item e; see section 2.2), and 
those that depend on the support of a file system — if none is 
supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 

a) Total Number of Applicable Tests 3811 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 264 

d) Non-Processed I/O Tests 0 


3-1 







e) Non-Processed Floating-Point 
Precision Tests 


0 


f) Total Number of Inapplicable Tests 264 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 
1.3) was taken on-site by the validation team for processing. The 
contents of the magnetic tape were loaded onto VAXstation 4000 
Model 60 and transferred to the host/target computer by Ethernet. 

After the test files were loaded onto the host/target computer, the 
full set of tests was processed by the Ada implementation. 

The tests were compiled, linked, and executed on the host/target 
computer system, as appropriate. The results were captured on the 
host/target computer system. The test results were transferred 
from the host/target computer to the VAXstation 4000 Model 60 where 
a magnetic was written capturing the test results. 

Testing was performed using command scripts provided by the 
customer and reviewed by the validation team. See Appendix B for 
a complete listing of the processing options for this 
implementation. It also indicates the default options. The 
options invoked explicitly for validation testing during this test 
were: 


-V 


Test output, compiler and linker listings, and job logs were 
captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team were also archived. 


3-2 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing 
the ACVC. The meaning and purpose of these parameters are 
explained in [UG89]. The parameter values are presented in two 
tables. The first table lists the values that are defined in terms 
of the maximum input-line length, which is the value for 
$MAX_IN LEN—also listed here. These values are expressed here as 
Ada string aggregates, where N V N represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX IN LEN 255“ Value of V 


$BIG_ID1 

(1..V-1 *> 'A' 

, V «> • 

1') 



$BIG_ID2 

(l..V-l«> 'A* 

, v -> • 

4 

2') 



$BIG_ID3 

(1..V/2 -> 'A') 

t 

& *3* & 

(1..V-l-V/2 

«> 'A') 

$BIG_ID4 

(1..V/2 «> *A') 

& '4* & 

(1..V-l-V/2 

»> 'A') 

$BIG_INT_LIT 

(1..V-3 *> 'O' 

) & "298 

H 



$BIG_REAL_LIT 

(1..V-5 -> 'O' 

) & "690 

.0" 



$BIG_STRING1 

(1..V/2 

=> 'A') 

£ mm 



$BIG_STRING2 

'""'4(1..(1..V 

-l-V/2 ■ 

> 'A') 

& ' 1' & 

mm 

$BLANKS 

(1..V-20 “> ' 

') 





$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => ’O') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 «> •0•) & "F.E:" 

$MAX_STRING_LITERAL & (1..V-2 => 'A') & •""• 


A-l 







The following table contains the values for the remaining 
macro parameters. 

Macro Parameter Macro Value 

$ACC_SIZE 
$ALIGNMENT 
$ COUNTLAS T 
$DEFAULT_MEM_SIZE 
$DEFAULT_STOR_UNIT 
$DEFAULT_SYS_NAME 
$DELTA_DOC 
$ENTRY_ADDRESS 
$ENTRY_ADDRESS1 
$ENTRY_ADDRESS2 
$FIELD_LAST 
$FILE_TERMINATOR 
$FIXED_NAME 
$FLOAT_NAME 
$ FORM_STRING 
$FORM_STRING2 

$GREATER_THAN_DURATION 7 5_000.0 

$GREATER_THAN_DURATION_BASE_LAST 131_073.0 
$GREATER_THAN_FLOAT_BASE_LAST 1.80141E+38 
$GREATER_THAN_FLOAT_SAFE_LARGE 1.7 014117E+3 8 
$GREATER_THAN_SHORT_FLOAT_SAFE_LARGE 1.0E3 08 
$HIGH_PRIORITY 15 


64 

4 

2_147_483_647 

2**63-l 

8 

DEC_0SF1_AXP 

2.0**(-31) 

FCNDECL.ENTRYADDRESS 
FCNDECL.ENTRY ADDRESS1 

4 —“ 

i 

FCNDECL.ENTRYADDRESS2 
2_147_483_647 

i i 

NO_SUCH_FIXED_TYPE 

LONGLONGFLOAT 
n n 

"CANNOT RESTRICT FILE CAPACITY" 


A-2 













$ILLEGALEXTERNALFILE_NAME1 BAD/CHAR-1 
$ ILLEGALEXTERNAL_F ILEH AME 2 X"* (1. . 256«> *C» ) 4"y 

$ INAPPROPRI ATE_LINE_LENGTH -1 

$INAPPROPRIATE PAGE LENGTH -1 


$INCLUDE_PRAGMA1 
$INCLUDE PRAGMA2 


PRAGMA INCLUDE ("A28006D1.TST'') 
PRAGMA INCLUDE ("B28006E1.TST") 


$INTEGER FIRST 


-2147483648 


$INTEGER LAST 


2147483647 


$INTEGER LAST PLUS 1 


2 147 483 648 


$INTERFACELANGUAGE 
$LESS_THAN_DURATION 


-75 000.0 


$LESS_THAN_DURATION_BASE_FIRST -131073.0 


$LINE_TERMINATOR 

$LOW_PRIORITY 

$MACHINE_CODE_STATEMENT 

$MACHINE_CODE_TYPE 

$MANTISSA_DOC 

$MAX DIGITS 


ASCII.LF 


NULL; 


NO SUCH TYPE 


$MAX INT 


9223372036854775807 


$MAX I NT PLUS 1 


9 223 372 036 854 775 808 


$MIN INT 


-9223372036854775808 


$NAME 


SHORT SHORT INTEGER 


$NAME LIST 


VAX_VMS,V AXEIN,OPENVMSAXP,RIS 
C_ULTRIX,DEC_OSF1_AXP,MIL_STD_ 
1750A,MC68000,MC68020,MC68040, 
CPU32 


$NAME SPECIFICATION! 


/usr/var/tmp/X212 OA 


A-3 





$NAME__SPECIFICATI0N2 

$NAME_SPECIFICATI0N3 

$NEG_BASED_INT 

$ NEW_MEM_SIZE 

SNEWSTORUNIT 

$NEW_SYS_NAHE 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAHE 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$ Y OURPRAGMA 


/usr/var/tap/X212 OB 
/usr/var/tap/X3119A 
16# FFFFFFFFFFFFFFFE# 
1_048_576 
8 

DEC_OSFl_AXP 
ASCII.LF & ASCII.FF 
RECORD NULL; END RECORD; 
NO_S U CH_MACHINECODETYPE 
128 
0 

10.0**(-3) 

FCNDECL.VARIABLEADDRESS 
FCNDECL.VARIABLEADDRESS1 
FCNDECL.VARIABLEADDRESS2 
EXPORT OBJECT 


A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-l 




DEC Ada for DEC OSF/1 AXP Systems 


Compiler Options 

The DEC Ada compiler options and defaults are summarized as follows: 
o -A 

Specifies the program library context to be used for the 
compilation. The default is the context defined by 
environment variable ADALIB. 

o -CO or -Cl 

_ Controls whether run-time error checking is suppressed. (Use 

of -CO is equivalent to giving all possible suppress pragmas 
in the source program.) The default is -Cl (error checking is 
not suppressed except by pragma). 

o -e 

Controls the number of error level diagnostics that are 
allowed within a single compilation unit before the 
compilation is aborted. By default the error limit is set to 
30 errors. 

¥ 

i 

o -gO, -gl, -g2, -g3 

Controls the inclusion of debugging symbol table information 
in the compiled object module. The default is to include 
partial debugging symbol table information (-gl). 

o -iO, -il, -i2 

Controls generic processing. By default (-il), instances are 
compiled separately from the unit in which an instantiation 
occurred unless a pragma INLINE GENERIC applies. -iO 
disables inline expansion of generTcs. -i2 provides maximal 

inline expansion of generics. 

o -J 

Enables maximal inline expansion of subprograms. By default, 
subprograms to which an INLINE pragma applies are expanded 
inline under certain conditions. 

o -n 

Suppresses updating the program library with the results of a 
compilation. By default, the library is updated when a unit 
compiles without errors. 






Page 2 


O -OO, -01, -02, -03, -04, -05 

Controls the level of optimization applied in producing the 
compiled code. The default is full optimization, with time 
as the primary optimization criterion (-04). 

o -Q0, -Q1 

With -Ql, the compiler makes a copy of the source file in the 
program library when a unit is successfully compiled. Ho 
copy is made under -Q0. The default is -Q0. 

o -V 

Produces a source listing. A source listing is not made by 
default. 

o -w 

Suppresses warning messages. By default, warning messages 
are not suppressed. 

o -y 

Syntax checks the specified input file. By default, the 
input file is compiled. 

o -z 

Processes the input file as a detailed design. By default, 
the input file is compiled. 


The default compiler options were used for validation except as 
follows: 

1. The source listing option (-V) was specified to obtain source 
listings. 

2. A high error limit (-e99999) was also specified. (By default 
a compilation is aborted once 30 errors have been reported.) 




LINKER OPTIONS 


The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and 
not to this report. 


B-2 






Page 3 


Inker Options 

trograms were linked using the DEC Ada aid command. The default 
stions were used except that -SO was specified. With DEC OSF/1 
srsion 1.3, the use of -SO is recommended. 

le options and defaults for the aid command are summarized below: 

O -A 

Specifies the program library context to be used for the 
link. The default is the context defined by environment 
variable ADALIB. 

o -n 

Does not invoke the linker. By default, the linker is 
invoked. 

o -o 

Names the output file. By default, the output file is named 
a.out. 


Links the program for profiling with prof. By default, the 
program is not linked for profiling with prof. 

o -r 

Retains relocation entries in the output object file. 
Relocation entries must be saved if the output object file is 
to become an input file in a subsequent link. By default, 
relocation entries are not retained. 

o -SO 

Links programs without using any shared libraries. With DEC 
OSF/1 Version 1.3, the use of -SO is recommended. 

o -SI 

Links programs using shared libraries. By default, programs 
are linked using shared libraries. 

o -u 

Lists the units that are to be linked. By default, the units 
are not listed. 

o -v 

Lists the linker command that is executed. By default, the 
linker command is not listed. 




APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in Chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of this Ada implementation, 
as described in this Appendix, are provided by the customer. Unless 
specifically noted otherwise, references in this Appendix are to 
compiler documentation and not to _ this report. 
Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 

package STANDARD is 

type INTEGER is range -2147483648..2147483647; 
type LONG_INTEGER is range -2E+63..2E63-1; 
type SHORT_INTEGER is range -32768..32767; 
type SHORTSHORTINTEGER is range -128..127; 


type FIXJAT is digits 6 range -1.70141E+38. .1.70141E+38; 
type IONGFLOAT is digits 15 range 

-8.988465674312E+307..8.988465674312E+307; 
type LONG_IiONG_FLOAT is digits 15 range 

-8.988465674312E+307..8.988465674312E+307; 

type DURATION is delta l.OE-4 range -131072.0..131071.9999; 

end STANDARD; 


C-l 







Predefined Language Pragmas 


i This annex defines the pragmas LIST, PAGE, and OPTIMIZE, and summarizes 
the definitions given elsewhere of the remaining language-defined pragmas. 

i 

The DEC Ada pragmas IDENT and TITLE are also defined in this annex. 


Pragma Meaning 

AST_ENTRY On Open VMS systems only. 

Takes the simple name of a single 
entry as the single argument; at most 
one AST.ENTRY pragma is allowed 
for any given entry. This pragma 
must be used in combination with the 
AST_ENTKY attribute, and is only 
allowed after the entry declaration and 
in the same task type specification or 
single task as the entry to which it 
applies. This pragma specifies that the 
given entry may be used to handle an 
OpenVMS asynchronous system trap 
(AST) resulting from an OpenVMS 
system service call. The pragma does 
not affect normal use of the entry (see 
9.12a). 

COMMON_OBJECT Takes an internal name denoting 

an object, and optionally takes an 
external designator (the name of a 
linker storage area) and a size as 
arguments. This pragma is only 
allowed at the place of a declarative 
item, and must apply to a variable 
declared by an earlier declarative 







item of the same declarative part or 
package specification. The variable 
must have a size that is known at 
compile time, and it must not require 
implicit initialization. This pragma is 
not allowed for objects declared with 
a renaming declaration. This pragma 
enables the shared use of objects that 
are stored in overlaid storage areas 
(see 13.9a.2.3). 

COMPONENT_ALIGNMENT Takes an alignment choice and 

optionally the simple name of an array 
or record type as a. guments. When no 
simple name is specified, the pragma 
must occur within a declarative part or 
package specification, and the effect of 
the pragma extends to types declared 
from the place of the pragma to the 
end of the innermost declarative part 
or package specification in which 
the pragma was declared. When a 
simple name is specified, the pragma 
and the type declaration must both 
occur immediately within the same 
declarative part, package specification, 
or task specification; the declaration 
must occur before the pragma. The 
position of the pragma and the 
restrictions on the named type are 
governed by the same rules as those for 
a representation clause. This pragma 
specifies the kind of alignment used for 
the components of the array or record 
types to which it applies (see 13.1a). 

CONTROLLED Takes the simple name of an access 

type as the single argument This 
pragma is only allowed immediately 
within the declarative part or package 
specification that contains the 
declaration of the access type; the 
declaration must occur before the 
pragma. This pragma is not allowed for 


B-2 






ELABORATE 


EXPORT.EXCEPTION 


a derived type. This pragma specifies 
that automatic storage reclamation 
must not be performed for objects 
designated by values of the access type, 
except upon leaving the innermost 
block statement, subprogram body, or 
task body that encloses the access type 
declaration, or after leaving the main 
program (see 4.8). 

Takes one or more simple names 
denoting library units as arguments. 
This pragma is oqly allowed 
immediately after the context clause 
of a compilation unit (before the 
subsequent library unit or secondary 
unit). Each argument must be 
the simple name of a library unit 
mentioned by the context clause. 

This pragma specifies that the 
corresponding library unit body 
must be elaborated before the 
given compilation unit If the given 
compilation unit is a subunit the 
library unit body must be elaborated 
before the body of the ancestor library 
unit of the subunit (see 10.5). 

On Open VMS systems only. 

Takes an internal name denoting an 
exception, and optionally takes an 
external designator (the name of a 
linker global symbol), a form (ADA 
or VMS), and a code (a static integer 
expression that is interpreted as a 
condition code) as arguments. A code 
value must be specified when the 
form is VMS (the default if the form 
is not specified). This pragma is only 
allowed at the place of a declarative 
item, and must apply to an exception 
declared by an earlier declarative 
item of the same declarative part 


B-3 






or package specification; it is not 
allowed for an exception declared 
with a renaming declaration or for an 
exception declared in a generic unit 
This pragma permits an Ada exception 
to be handled by programs written in 
another programming language (see 
13.9a.3.2). 

EXPORTJF1JNCTION Takes an internal name denoting 

a function, and optionally takes an 
external designator (the name of a 
linker global symbbl), parameter types, 
result type, parameter mechanisms, 
and result mechanism as arguments. 
This pragma is only allowed at the 
place of a declarative item, and 
must apply to a function declared 
by an earlier declarative item of the 
same declarative part or package 
specification. In the case of a function 
declared as a compilation unit, the 
pragma is only allowed after the 
function declaration and before 
any subsequent compilation unit 
This pragma is not allowed for a 
function declared with a renaming 
declaration, and it is not allowed for a 
generic function (it may be given for 
a generic instantiation). This pragma 
permits an Ada function to be called 
from a program written in another 
programming language (see 13.9a. 1.3). 

EXPORT.OBJECT Takes an internal name denoting an 

object, and optionally takes an external 
designator (the name of a linker global 
symbol) and size option (a linker 
absolute global symbol that will be 
defined in the object module—useful on 
OpenVMS systems only) as arguments. 
This pragma is only allowed at the 
place of a declarative item, and must 
apply to a constant or a variable 


B-4 







declared by an earlier declarative 
item of the same declarative part or 
package specification; the declaration 
must occur at the outermost level of a 
library package specification or body. 
The object to be exported must have 
a size that is known at compile time. 
This pragma is not allowed for objects 
declared with a renaming declaration, 
and is not allowed in a generic unit. 
This pragma permits an Ada object to 
be referred to by a routine written in 
another programming language (see 
13.9a.2.2). 

EXPORT_PROCEDURE Takes an interna) name denoting 

a procedure, and optionally takes 
an external designator (the name of 
a linker global symbol), parameter 
types, and parameter mechanisms 
as arguments. This pragma is only 
allowed at the place of a declarative 
item, and must apply to a procedure 
declared by an earlier declarative 
item of the same declarative part or 
package specification. In the case of a 
procedure declared as a compilation 
unit, the pragma is only allowed 
after the procedure declaration and 
before any subsequent compilation 
unit. This pragma is not allowed for 
a procedure declared with a renaming 
declaration, and is not allowed for a 
generic procedure (it may be given for 
a generic instantiation). This pragma 
permits an Ada routine to be called 
from a program written in another 
programming language (see 13.9a. 1.3). 

EXPORT_VALUED_PROCEDURE Takes an internal name denoting 

a procedure, and optionally takes 
an external designator (the name of 
a linker global symbol), parameter 
types, and parameter mechanisms 


B-5 





as arguments. This pragma is only 
allowed at the place of a declarative 
item, and must apply to a procedure 
declared by an earlier declarative item 
of the same declarative part or package 
specification. In the case of a procedure 
declared as a compilation unit, the 
pragma is only allowed after the 
procedure declaration and before any 
subsequent compilation unit Hie first 
(or only) parameter of the procedure 
must be of mode out This pragma is 
not allowed for a procedure declared 
with a renaming declaration and is not 
allowed for a generic procedure (it may 
be given for a generic instantiation). 
This pragma permits an Ada procedure 
to behave as a function that both 
returns a value and causes side effects 
on its parameters when it is called 
from a routine written in another 
programming language (see 13.9a. 1.3). 

FLOAT_REPRESENTATION On OpenVMS and DEC OSF/1 systems 

only. 

On OpenVMS VAX systems, takes 
VAX_FLOAT as the single argument 
On OpenVMS AXP systems, takes 
either VAX_FLOAT or IEEE.FLOAX 
as the single argument; the default is 
VAX.FLOAT. On DEC OSF/1 systems, 
takes IEEE_FLOAT as the single 
argument This pragma is only allowed 
at the start of a compilation, before 
the first compilation unit (if any) of 
the compilation. It specifies the choice 
of representation to be used for the 
predefined floating point types in the 
package STANDARD (see 3.5.7a). 

IDENT Takes a string literal of 31 or fewer 

characters as the single aigument. The 
pragma IDENT has the following form: 


B-6 







frig— IDENT (3tring_lit«ral) ; 

This pragma is allowed only in 
the outermost declarative part or 
declarative items of a compilation unit 
The given string is used to identify 
the object module associated with the 
compilation unit in which the pragma 
IDENT occurs. 

IMPORT.EXCEPTION On Open VMS systems only. 

Takes an internal name denoting an 
exception, and optionally takes an 
external designator (the name of a 
linker global symbol), a form (ADA 
or VMS), and a code (a static integer 
expression that is interpreted as a 
condition code) as arguments. A code 
value is allowed only when the form 
is VMS (the default if the form is 
not specified). This pragma is only 
allowed at the place of a declarative 
item, and must apply to an exception 
declared by an earlier declarative item 
of the same declarative part or package 
specification; it is not allowed for an 
exception declared with a renaming 
declaration. This pragma permits a 
non-Ada exception (most notably, an 
Open VMS condition) to be handled by 
an Ada program (see 13.9a.3.1). 

IMPOBT.FUNCTION Takes an internal name denoting 

a function, and optionally takes an 
external designator (the name of a 
linker global symbol), parameter types, 
result type, parameter mechanisms, 
and result mechanism as arguments. 
On Open VMS systems, a first optional 
parameter is also available as an 
argument The pragma INTERFACE 
must be used with this pragma 
(see 13.9). This pragma is only allowed 
at the place of a declarative item, and 


B-7 





must apply to a function declared 
by an earlier declarative item of the 
same declarative part or package 
specification. In the case of a function 
declared as a compilation unit, the 
pragma is only allowed after the 
function declaration and before any 
subsequent compilation unit This 
pragma is allowed for a function 
declared with a renaming declaration; 
it is not allowed for a generic function 
or a generic functiqn instantiation. 

This pragma permits a non-Ada 
routine to be used as an Ada function 
(see 13.9a. 1.1). 

1MPORT.OBJECT Takes an internal name denoting 

an object and optionally takes an 
external designator (the name of a 
linker global symbol) and size (a linker 
absolute global symbol that will be 
defined in the object module—useful on 
Open VMS systems only) as arguments. 
This pragma is only allowed at the 
place of a declarative item, and 
must apply to a variable declared 
by an earlier declarative item of the 
same declarative part or package 
specification. The variable must have 
a size that is known at compile time, 
and it cannot have an initial value. 
This pragma is not allowed for objects 
declared with a renaming declaration. 
This pragma permits storage declared 
in a non-Ada routine to be referred to 
by an Ada program (see 13.9a.2.1). 

IMPORT.PROCEDURE Takes an internal name denoting 

a procedure, and optionally takes 
an external designator (the name of 
a linker global symbol), parameter 
types, and parameter mechanisms as 
arguments. On Open VMS systems, 
a first optional parameter is also 


B-8 







available as an argument. The pragma 
INTERFACE must be used with this 
pragma (see 13.9). This pragma is only 
allowed at the place of a declarative 
item, and must apply to a procedure 
declared by an earlier declarative 
item of the same declarative part or 
package specification. In the case of a 
procedure declared as a compilation 
unit, the pragma is only allowed after 
the, procedure declaration and before 
any subsequent compilation unit This 
pragma is allowed for a procedure 
declared with a renaming declaration; 
it is not allowed for a generic procedure 
or a generic procedure instantiation. 
This pragma permits a non-Ada routine 
to be used as an Ada procedure 
(see 13.9a. 1.1). 

IMPORT_VALUED_PROCEDURE Takes an internal name denoting 

a procedure, and optionally takes 
an external designator (the name of 
a linker global symbol), parameter 
types, and parameter mechanisms as 
arguments. On Open VMS systems, 
a first optional parameter is also 
available as an argument The pragma 
INTERFACE must be used with this 
pragma (see 13.9). This pragma is only 
allowed at the place of a declarative 
item, and must apply to a procedure 
declared by an earlier declarative item 
of the same declarative part or package 
specification. In the case of a procedure 
declared as a compilation unit, the 
pragma is only allowed after the 
procedure declaration and before any 
subsequent compilation unit The first 
(or only) parameter of the procedure 
must be of mode out. This pragma 
is allowed for a procedure declared 
with a renaming declaration; it is not 


B-9 





INLINE 


INLINE. 


allowed for a generic procedure. This 
pragma permits a non-Ada routine that 
returns a value and causes side effects 
on its parameters to be used as an Ada 
procedure (see 13.9a. 1.1). 

Takes one or more names as 
arguments; each name is either the 
name of a subprogram or the name of 
a generic subprogram. This pragma 
is only allowed at the place of a 
declarative item in a declarative part 
or package specification, or after a 
library unit in a compilation, but before 
any subsequent compilation unit This 
pragma specifies that the subprogram 
bodies should be expanded inline at 
each call whenever possible; in the case 
of a generic subprogram, the pragma 
applies to calls of its instantiations 
(see 6.3.2). 

.GENERIC Takes one or more names as 

arguments; each name is either the 
name of a generic declaration or the 
name of an instance of a generic 
declaration. This pragma is only 
allowed at the place of a declarative 
item in a declarative part or package 
specification, or after a library unit 
in a compilation, but before any 
subsequent compilation unit. Each 
argument must be the simple name 
of a generic subprogram or package, 
or a (nongeneric) subprogram or 
package that is an instance of a generic 
subprogram or package declared by 
an earlier declarative item of the 
same declarative part or package 
specification. This pragma specifies 
that inline expansion of the generic 
body is desired for each instantiation 
of the named generic declarations or 
of the particular named instances; 


B-10 





s INTERFACE 


INTERFACEJNAME 


the pragma does not apply to calls of 
instances of generic subprograms 
(see 12. la). 

Takes a language name and a 
subprogram name as arguments. This 
pragma is allowed at the place of a 
declarative item, and must apply in 
this case to a subprogram declared 
by an earlier declarative item of the 
same declarative part or package 
specification. This pragma is also 
allowed for a library unit; in this case 
the pragma must appear after the 
subprogram declaration, and before 
any subsequent compilation unit This 
pragma specifies the other language 
(and thereby the calling conventions) 
and informs the compiler that an 
object module will be supplied for the 
corresponding subprogram (see 13.9). 

In DEC Ada, the pragma INTERFACE 
is required in combination with the 
pragmas IMPORT_FUNCTION, 
IMPORT PROCEDURE, IMPORT 
VALUEDJPROCEDURE, and 
INTERFACE_NAME when any of those 
pragmas are used (see 13.9a. 1). 

Takes an internal name and an 
external name as arguments. The 
internal name may be an Ada simple 
name that denotes a subprogram or 
an object. If the declared entity is a 
function, the internal name may be a 
string literal that denotes an operator 
symbol. The external name may be any 
string literal; the literal is used as a 
linker global symbol that is associated 
with the external subprogram or 
object. This pragma is only allowed 
at the place of a declarative item, 
and must apply to an entity declared 


B—11 




LIST 


LONG. 


by an earlier declarative item of the 
same declarative part or package 
specification. 

If this pragma applies to a subprogram, 
then the pragma INTERFACE must 
also apply (see 13.9). If a subprogram 
has been declared as a compilation 
unit, the pragma is only allowed after 
the subprogram declaration and before 
any subsequent compilation unit This 
pragma is allowed for subprograms 
declared with a renaming declaration. 
This pragma is not allowed for a 
generic subprogram or a generic 
subprogram instantiation. 

If this pragma applies to an object, 
then the size of the object must be 
known at compile time. This pragma is 
not allowed for an object declared with 
a renaming declaration. 

This pragma associates an external 
symbol with the internal Ada name for 
a subprogram or object (see 13.9b). 

Takes one of the identifiers ON or 
OFF as the single argument. This 
pragma is allowed anywhere a pragma 
is allowed. It specifies that listing of 
the compilation is to be continued or 
suspended until a LIST pragma with 
the opposite argument is given within 
the same compilation. The pragma 
itself is always listed if the compiler is 
producing a listing. 

FLOAT On Open VMS systems only. Also, 

the value of the pragma FLOAT. 
REPRESENTATION must be VAX_ 
FLOAT. 


B-12 






Takes either D.FLOAT or G_FLOAT 
as the single argument The default 
is G_FLOAT. TTiis pragma is only 
allowed at the start of a compilation, 
before the first compilation unit 
(if any) of the compilation. It specifies 
the choice of representation to be used 
for the predefined type LONG_FLOAT 
in the package STANDARD, and for 
floating point type declarations with 
digits specified in the range 7 .. 15 
(see 3.5.7b). 

On Open VMS VAX systems only. 

Takes one or two nonnegative static 
simple expressions of some integer type 
as arguments. This pragma is only 
allowed in the outermost declarative 
part of a library subprogram; at most 
one such pragma is allowed in a library 
subprogram. It has an effect only when 
the subprogram to which it applies is 
used as a main program. This pragma 
causes a fixed-size stack to be created 
for a main task (the task associated 
with a main program), and determines 
the number of storage units (bytes) 
to be allocated for the stack working 
storage area or guard pages or both. 
The value specified for either or both 
the working storage area and guard 
pages is rounded up to an integral 
number of pages. A value of zero for 
the working storage area results in the 
use of a default size; a value of zero for 
the guard pages results in no guard 
storage. A negative value for either 
working storage or guard pages causes 
the pragma to be ignored (see 13.2b). 

Takes a numeric literal as the single 
argument. This pragma is only allowed 
at the start of a compilation, before the 







first compilation unit (if any) of the 
compilation. The effect of this pragma 
is to use the value of the specified 
numeric literal for the definition of the 
named number MEMORY_SIZE 
(see 13.7). 

Takes one of the identifiers TIME 
or SPACE as the single argument. 

This pragma is only allowed within a 
declarative part and it applies to the 
block or body enclosing the declarative 
part. It specifies whether time or space 
is the primary optimization criterion. 

In DEC Ada, this pragma is only 
allowed immediately within a 
declarative part of a body declaration. 

Takes die simple name of a record or 
array type as the single argument. The 
allowed positions for this pragma, and 
the restrictions on the named type, 
are governed by the same rules as for 
a representation clause. The pragma 
specifies that storage minimization 
should be the main criterion when 
selecting the representation of the 
given type (see 13.1). 

This pragma has no argument, and is 
allowed anywhere a pragma is allowed. 
It specifies that the program text which 
follows the pragma should start on a 
new page (if the compiler is currently 
producing a listing). 

Takes a static expression of the 
predefined integer subtype PRIORITY 
as the single argument. This pragma is 
only allowed within the specification of 
a task unit or immediately within the 
outermost declarative part of a main 
program. It specifies the priority of the 





task (or tasks of the task type) or the 
priority of the main program (see 9.8). 

PSECT_OBJECT On Open VMS systems only. 

Has the same syntax and the same 
effect as the pragma COMMON. 
OBJECT (see 13.9a.2.3). 

12 SHARED Takes the simple name of a variable as 

the single argument. This pragma is 
allowed only for a variable declared by 
an Object declaration and whose type 
is a scalar or access type; the variable 
declaration and the pragma must 
both occur (in this order) immediately 
within the same declarative part or 
package specification. This pragma 
specifies that every read or update of 
the variable is a synchronization point 
for that variable. An implementation 
must restrict the objects for which 
this pragma is allowed to objects 
for which each of direct reading and 
direct updating is implemented as an 
indivisible operation (see 9.11). 

SHARE.GENERIC On OpenVMS systems only. 

Takes one or more names as 
arguments; each name is either the 
name of a generic declaration or the 
name of an instance of a generic 
declaration. This pragma is only 
allowed at the place of a declarative 
item in a declarative part or package 
specification, or after a library unit in a 
compilation, but before any subsequent 
compilation unit. Each argument 
either must be the simple name of a 
generic subprogram or package, or it 
must be a (nongeneric) subprogram 
or package that is an instance of a 
generic subprogram or package. If the 
argument is an instance of a generic 


B-15 







subprogram or package, then it must 
be declared by an earlier declarative 
item of the same declarative part or 
package specification. This pragma 
specifies that generic code sharing is 
desired for each instantiation of the 
named generic declarations or of the 
particular named instances (see 12.1b). 

Takes a numeric literal as the single 
argument. This pragma is only allowed 
at the start of a compilation, before the 
first compilation unit (if any) of the 
compilation. The effect of this pragma 
is to use the value of the specified 
numeric literal for the definition of the 
named number STORAGE_UNIT 
(see 13.7). 

In DEC Ada, the only argument 
allowed for this pragma is 8 (bits). 

Takes as arguments the identifier 
of a check and optionally also the 
name of either an object, a type or 
subtype, a subprogram, a task unit, or 
a generic unit. This pragma is only 
allowed either immediately within a 
declarative part or immediately within 
a package specification. In the latter 
case, the only allowed form is with a 
name that denotes an entity (or several 
overloaded subprograms) declared 
immediately within the package 
specification. The permission to omit 
the given check extends from the 
place of the pragma to the end of the 
declarative region associated with the 
innermost enclosing block statement or 
program unit For a pragma given in a 
package specification, the permission 
extends to the end of the scope of the 
named entity. 





SUPPRESS_ALL 


is SYSTEM.NAME 


TASK.STORAGE 


If the pragma includes a name, the 
permission to omit the given check 
is further restricted: it is given only 
for operations on the named object 
or on all objects of the base type of a 
named type or subtype; for calls of a 
named subprogram; for activations of 
tasks of the named task type; or for 
instantiations of the given generic unit 
(see 11.7). 

This pragma has no argument and is 
only allowed following a compilation 
unit This pragma specifies that 
all run-time checks in the unit are 
suppressed (see 11.7). 

Takes an enumeration literal as the 
single argument This pragma is only 
allowed at the start of a compilation, 
before the first compilation unit 
(if any) of the compilation. The effect of 
this pragma is to use the enumeration 
literal with the specified identifier 
for the definition of the constant 
SYSTEM_NAME. This pragma is 
only allowed if the specified identifier 
corresponds to one of the literals of the 
type NAME declared in the package 
SYSTEM (see 13.7). 

Takes the simple name of a task 
type and a static expression of some 
integer type as arguments. This 
pragma is allowed anywhere that a 
task storage specification is allowed; 
that is, the declaration of the task 
type to which the pragma applies and 
the pragma must both occur (in this 
order) immediately within the same 
declarative part, package specification, 
or task specification. The effect of 
this pragma is to use the value of the 
expression as the number of storage 


B-17 









TIME.SLICE 


TITLE 


units (bytes) to be allocated as guard 
storage. The value is rounded up to 
an appropriate boundary. A negative 
value causes the pragma to be ignored. 

A zero value has system-specific 
results: on Open VMS VAX systems, 
a value of zero results in no guard 
storage; on Open VMS AXP and DEC 
OSF/1 or ULTRIX systems, a value of 
zero results in a minimal guard area 
(se$ 13.2a). 

On Open VMS and^DEC OSF/1 systems 
only. 

Takes a static expression of the 
predefined fixed point type DURATION 
(in the package STANDARD) as the 
single argument This pragma is only 
allowed in the outermost declarative 
part of a library subprogram, and 
at most one such pragma is allowed 
in a library subprogram. It has an 
effect only when the subprogram to 
which it applies is used as a main 
program. This pragma causes the task 
scheduler to turn time slicing on or 
off and, on some systems, to limit the 
amount of continuous execution time 
given to a task (see 9.8a; see also the 
appropriate run-time reference manual 
for implementation differences across 
systems). 

Takes a title or a subtitle string, or 
both, as arguments. The pragma 
TITLE has the following form: 

pragaa TITLE (titling-option 
[,titling-option]); 

titling-option :•* 

[TITLE ->] string_literal 
| [SUBTITLE ->] string_literal 


B-18 







This pragma is allowed anywhere a 
pragma is allowed; the given strings 
supersede the default title and/or 
subtitle portions of a compilation 
listing. 

Takes the simple name of a variable 
as the single argument. This pragma 
is only allowed for a variable declared 
by an object declaration. The variable 
declaration and the pragma must 
both occur (in this order) immediately 
within the same declarative part or 
package specification. The pragma 
must appear before any occurrence of 
the name of the variable other than 
in an address clause or in one of the 
DEC Ada pragmas IMPORT OBJECT, 
EXPORT.OBJECT, COMMON. 
OBJECT, or PSECT.OBJECT. The 
variable cannot be declared by a 
renaming declaration. The pragma 
VOLATILE specifies that the variable 
may be modified asynchronously. This 
pragma instructs the compiler to obtain 
the value of a variable from memory 
each time it is used (see 9.11). 









Implementation-Dependent Characteristics 


_Note- 

This appendix is not part of the standard definition of the Ada 
programming language. 


This appendix summarizes the implementation-dependent characteristics of 
DEC Ada by presenting the following: 

• Lists of the DEC Ada pragmas and attributes. 

• The specification of the package SYSTEM. 

• The restrictions on representation clauses and unchecked type conversions. 

• The conventions for names denoting implementation-dependent 
components in record representation clauses. 

• The interpretation of expressions in address clauses. 

• The implementation-dependent characteristics of the input-output 
packages. 

• Other implementation-dependent characteristics. 

See the relevant run-time reference manual for additional implementation- 
specific details. 

F.1 Implementation-Dependent Pragmas 

DEC Ada provides the following pragmas, which are defined elsewhere in the 
text. In addition, DEC Ada restricts the predefined language pragmas INLINE 
and INTERFACE. See Annex B for a descriptive pragma summary. 


F-1 


Impiementation-Oependent Pragmas F.1 












DEC Ada cystoma 

Pragma on which k appkoo Section 


AST.ENTRY 

Open VMS 

9.12a 

COMMON.OBJECT 

All 

13.9a.2.3 

COMPONENTJILIGNMENT 

All 

13.1a 

EXPORTJEXCEPTION 

OpenVMS 

13Sa^.2 

EXPORT_FUNCTION 

All 

13.9a. 1.3 

EXPORT_OBJECT 

All 

13^2.2 

EXPORT.PROCEDURE 

All > 

13Sa.l.3 

EXPORT,VALUED_PROCEDURE 

All 

lSJa.1.3 

FLOAT_REPRESE NTATION 

OpenVMS 

DEC OSF/1 

3.5.7a 

IDENT 

All 

Annex B 

IMPORT.EXCEPTION 

OpenVMS 

13Sa^.l 

IMPORT_FUN CTION 

All 

13.9a.l.l 

IMPORT.OBJECT 

All 

13.9a.2.1 

IMPORT_PROCEDURE 

All 

13.9a.l.l 

IMPORT_VALUED_PROCEDURE 

All 

13.9a.l.l 

INLINE_GENERIC 

All 

12.1a 

INTERFACE,NAME 

All 

13.9b 

LONG_FLOAT 

OpenVMS 

3.5.7b 

MAIN_STORAGE 

OpenVMS VAX 

13.2b 

PSECT_OBJECT 

OpenVMS 

13Sa^.3 

SHARE.GENERIC 

OpenVMS 

12.1b 

SUPPRESS_ALL 

All 

11.7 

TASK_STORAGE 

All 

13.2a 

TIME J5LICE 

OpenVMS 

9.8a 

TITLE 

All 

Annex B 

VOLATILE 

All 

9.11 


F.2 Implementation-Dependent Attributes 

DEC Ada provides the following attributes, which are defined elsewhere in the 
text See Annex A for a descriptive attribute summary. 


F.2 Implementation-Dependent Attributes 


F-2 





Attribute 

DEC Ada eyeteme 
on which It appMaa 

Section 

ASTJENTRY 

OpenVMS 

9.12a 

BIT 

All 

13.7.2 

MACHINE_S IZE 

All 

13.7^ 

NULL.PARAMETER 

All 

135a.1.2 

TYPE_CLASS 

All 

13.7aJ2 


F.3 Specification of the Package System 

r 

DEC Ada provides a system-specific version of the packag^ SYSTEM for each 
system on which it is supported. The following specification is composite: it 
includes all common and system-specific features. 

package SYSTEM is 

- On ULTRIX systems: 

type NAME is (RISCJJLTRIX) ; 
for NAME use (6); 


- On all other systems: 

type NAME is 

~ DEC Ada implementations 

(VAXJ/MS, VAXELN, OpenVMS_AXP, RISCJJLTRIX, DEC_0SF1_AXP, 
— XD Ada implementations 

MILSTD1750A, MC68000, MC68020, MC68040, CP032); 
for NAME use (1, 2, 7, 8, 9, 101, 102, 103, 104, 105); 


— System-specific definitions of SYSTEM_NAME 


SYSTEMNAME 
SYSTEMNAME 
SYSTEM_NAME 
SYSTEM_HAME 


: constant NAME 
: constant NAME 
: constant NAME 
: constant NAME 


VAX VMS; 
OpenVMS AXP; 
DEC_OSFl_AXP; 
RISC OLTRIX; 


STORAGEJJN IT 
MEMORY_SIZE 
MEMORY SIZE 


: constant :» 8; 

: constant :* 2**63—1; 
: constant :» 2**31-1; 


— System-specific definitions of MAX_INT and MIN_INT 


- On AXP 

systems: 

MAX INT 

: constant := 2**63—1; 

MIN_INT 

: constant := -(2**63); 

- On all 

other systems: 

MAX INT 

: constant := 2**31-1; 

MIN~INT 

: constant :« -(2**31); 


F-3 


Specification of the Package System F.3 











— System-specific definitions of MAXJDIGITS 

- On OpenVMS VAX systems: 

MAXDIGITS : constant 33; 

- On all other systems: 

MAXJDIGITS : constant :» 15; 

MAXMANTISSA : constant :« 31; 

FINEDELTA : constant :» 2.0**(-31); 

— System-specific definitions of TICK 

- On OpenVMS VAX systems: ' 

TICK : constant :« 10.0**(-2); « 

- On AXP systems: 

TICK : constant := 10.0**(-3); 

- On OLTRIX systems: 

TICK : constant :« 3.906 * 10.0**(-3); 

subtype PRIORITY is INTEGER range 0 .. 15; 

— On OpenVMS and OSF/1 systems: 
type INTEGER8 is range -128 .. 127; 
for INTEGER_8'SIZE use 8; 

— On OpenVMS and OSF/1 systems: 

type INTEGER!6 is range -32_768 .. 32_767; 
for INTEGER_16'SIZE use 16; 

— On OpenVMS and OSF/1 systems: 

type INTEGER 32 is range -2_147_483_648 .. 2_147_483 647; 
for INTEGER_32'SIZE use 32; 

— On AXP systems: 

type INTEGER 64 is range 

-9 223 37?_036_854_775_808 .. 9_223_372_036_854_775_807; 
for INTEGER_64'SIZE use 64; 

— On OpenVMS and OSF/1 systems: 

type LARGEST_INTEGER is range MIN_INT .. MAX_INT; 

— On OpenVMS and OSF/1 systems: 

function "not" (LEFT : LARGEST_INTEGER) return LARGEST_INTEGER; 

function "and" (LEFT, RIGHT : LARGEST_INTEGER) return LARGEST_INTEGER; 

function "or" (LEFT, RIGHT : LARGEST_INTEGER) return LARGEST_INTEGER, 

function "xor" (LEFT, RIGHT : LARGEST_INTEGER) return LARGEST_INTEGER, 

— Address type 

type ADDRESS is private; 


F.3 Specification of the Package System 


F-4 









ADDRESSZERO : constant ADDRESS, 
NOADDR : constant ADDRESS, 
NOLL ADDRESS : constant ADDRESS 


— System-specific definition of ADDR£SS_SIZE 


- On OSF/1 systems: 

ADDRESS SIZE : constant :« 64; 


- On OpenVMS systems: 

ADDRESS SIZE : constant :» 32; 


function {LEFT : ADDRESS; RIGHT 
function ■+• (LEFT : INTEGER; RIGHT 
function (LEFT : ADDRESS; RIGHT 
function (LEFT : ADDRESS; RIGHT 


INTEGER) return ADDRESS, 
ADDRESS) return ADDRESS, 
ADDRESS) return INTEGER, 
INTEGER) return ADDRESS, 


— Note that because ADDRESS is a private type 

— the functions and "/«* are already available and 

— do not have to be explicitly defined 


— function ■«" 

— function "/■■ 
function •<" 
function "<=" 
function *>" 
function ’>«" 


(LEFT, RIGHT : ADDRESS) 
(LEFT, RIGHT : ADDRESS) 
(LEFT, RIGHT : ADDRESS) 
(LEFT, RIGHT : ADDRESS) 
(LEFT, RIGHT : ADDRESS) 
(LEFT, RIGHT : ADDRESS) 


return BOOLEAN 
return BOOLEAN, 
return BOOLEAN, 
return BOOLEAN, 
return BOOLEAN, 
return BOOLEAN, 


generic 

type TARGET is private; 

function FETCH_FROM_ADDRESS (A : ADDRESS) return TARGET; 
generic 

type TARGET is private; 

procedure ASSIGN_TO_ADDRESS (A : ADDRESS; T : TARGET); 


— DEC Ada floating point type declarations for the VAX 

— floating point data types 


- On OpenVMS systems: 

type F_FLOAT is (digits 6); 
type D FLOAT is (digits 9); 
type G_FLOAT is (digits 15); 

- On OpenVMS VAX systems: 

type H FLOAT is (digits 33); 

— DEC Ada floating point type declarations for the IEEE 

— floating point data types 


- On AXP and OLTRIX systems: 

type IEEE_SINGLE_FLOAT is (digits 6); 
type IEEE_DOUBLE_FLQAT is (digits 15); 


F-5 


Specification of the Package System F.3 









type TYPECLASS is (TYPE CLASS ENUMERATION, 

TYPE~CLASS~INTEGER, 

TYPE~CLASS_FIX£D POINT, 

TYPE CLASS_FLOATDK3_POINT, 

TYPE_CLASS ARRAY, 

TYPE_CLASS - RECORD, 

TYPE CLASS-ACCESS, 

TYPE~CLASS~TASK, 

TYPE_CLASS_ADDRESS); 

— AST handler type 

— On OpenVMS systems: 

type ASTHANDLER is limited private; , 

— On OpenVMS systems: • 

NOASTBANDLER : constant ASTHANDLER; 

— Non-Ada exception 
NON_ADA_ERROR : exception; 

— Hardware-oriented types and functions 

type BITARRAY is array (INTEGER range <>) of BOOLEAN; 
pragma PACK(BIT_ARRAY); 

subtype BIT ARRAY 8 is BIT ARRAY (0 .. 7); 
subtype BIT_ARRAY_16 is BIT ARRAY (0 .. 15) ; 
subtype BITARRAY32 is BITARRAY (0 .. 31); 
subtype BITARRAY64 is BIT_ARRAY (0 .. 63); 

type UNSIGNED BYTE is range 0 .. 255; 
for UNSIGNED_BYTE'SIZE use 8; 

function "not" (LEFT : UNSIGNED BYTE) return UNSIGNED JBYTE; 

function "and" (LEFT, RIGHT : UNSIGNED - BYTE) return UNSIC3JED_BYTE; 

function "or" (LEFT, RIGHT : UNSIGNED - BYTE) return UNSIGNED_BYTE; 

function "xor" (LEFT, RIGHT : UNSIGNED_BYTE) return UNSIGNED_BYTE; 

function TO_UNSIGNED_BYTE (X : BIT_ARRAY_8) return UNSIGNED_BYTE; 
function TO_BIT_ARRAY_8 (X : UNSI®ED_BYTE) return BIT_ARRAY_8; 

type UNSIGNED_BYTE_ARRAY is array (INTEGER range <>) of UNSIGNED_BYTE; 

type UNSIGNH)_WORD is range 0 .. 65535; 
for UNSIGNEDJfORD' SIZE use 16; 

function "not" (LEFT : UNSIGNED_WORD) return UNSIGNED_WORD; 

function "and" (LEFT, RIGHT : UNS I GNED_WORD) return UNSI(3IED_N0RD; 

function "or" (LEFT, RIGHT : UNSIGNED_WORD) return UNSIQIED WORD; 

function "xor" (LEFT, RIGHT : UNSIGNED_WORD) return UNSK2JED - W0RD; 

function TO_UNSIGNED_WORD (X : BIT_ARRAY 16) return UNSI®ED_WORD; 
function TO_BIT_ARRAY_16 (X : UNSIGNED_WORD) return BIT_ARRAY_16; 

type UNSIGNED_WORD_ARRAY is array (INTEGER range <>) of UNSIGNED_WORD; 


F.3 Specification of the Package System 


F-6 








type UNSIGNED_LONGWORD is range -2_147_483 648 .. 2147483647; 
for UNSIGNEDLONGWORD'SIZE use 32; 

function ’not* (LEFT : UNSIGNED_LONGWORD) return UNSIGNED_LONGWORD 

function "and" (LEFT, RIGHT : UNSIGNED LOtJGWORD) return UNSIGNED_LOWGWORD 

function "or" (LEFT, RIGHT : UNSIGNED_LONGWORD) return UNSIGNED_LONGMORD 

function "xor" (LEFT, RIGHT : UNSIGNED_LONGWORD) return UNSIGNED~LONGWQRD 

function TOUNSIGNEDLONGWORD (X : BIT ARRAY 32) return UNSIGNED LONGWORD 
function TOJBITARRAY32 (X : UNSIGNED_LONGWORD) return BIT_ARRAY_32; 

type UNSIGNEDLONGWORDARRAY is 

array (INTEGER range <>) of UNSIGNEDLONGWORD; 

— On AXP systems: ' 

type UNSIGNED32 is range 0 .. 4_294_967_295; , 

for UNSIGNED_32'SIZE use 32; ~ * 

— On AXP systems: 

function "not" (LEFT : UNSIGNED 32) return UNSIGNED_32; 

function "and" (LEFT, RIGHT : UNSIGNED~32) return UNSIQJED_32; 

function "or" (LEFT, RIGHT : UNSIQJED 32) return UNSIGNED_32; 

function "xor" (LEFT, RIGHT : UNSIGNED 32) return UNSI(2iED_32,- 

— On AXP systems: 

function TO UNSIGNED 32 (X : BIT ARRAY 32) return UNSIGNED 32; 
function TOJBIT_ARRAY_32 (X : UNSIGNED~32) return BIT ARRAY 32, 

type UNSIGNEDQUADWORD is 
record 

LO : UNSIGNEDLONGNORD; 

LI : UNSIGNED_LONGWORD; 
end record; 

for UNSIGNEDQUADWORD'SIZE use 64; 
for UNSIGNEDQUADWORD use 
record at mod 8; 
end record; 

function "not" (LEFT : UNSIQJED QUADWORD) return UNSIGNED QOADWORD, 

function "and" (LEFT, RIGHT : UNSIQJED - QUADWORD) return UNSIQJED'QOADWORD ( 

function "or" (LEFT, RIGHT : UNSIGNED_QUADWORD) return UNSIGNED_QUAD»ORD 

function "xor" (LEFT, RIGHT : UNSIQJED_QUADWORD) return UNSIGNED_QUADWORD 

function TO_UNSIGNED QUADWORD (X : BIT_ARRAY 64) return UNSIGNED_QUADWORD, 
function TO_BIT_ARRAY_64 (X : UNSIGNED_QUADWORD) return BIT_ARRAY_64; 

type UNSIGNED_QUADWORD_ARRAY is 

array (INTEGER range <>) of UNSIGNED_QUADWORD; 

function TO_ADDRESS (X : INTEGER) return ADDRESS; 

function TO_ADDRESS (X : UNSIGNED_LONGWORD) return ADDRESS; 

function TO_ADDRESS (X : ( universal_integer}) return ADDRESS; 

function TO_INTEGER (X : ADDRESS) return INTEGER; 

function TO UNSIGNED LONGWORD (X : ADDRESS) return UNSIGNED_LONGWORD; 


F-7 


Specification of the Package System F.3 










— On OpenVMS systems only: 

function TOJJNSI(2JED_L0NGW0RD (X : AST_HANDLER) return ONSIGNED_LONGWORD; 

— Conventional names for static subtypes of type UNSIGNED_LONGWORD 

subtype UNSIGNEDJl is OHSIGNED_LONGWORD range 0 .. 2»* 1-1; 

subtype UNSIGNED2 is UNSIGNED_LONGWORD range 0 .. 2** 2-1; 

subtype UNSIGNED 3 is ONSIGNEDLONGWORD range 0 .. 2** 3-1; 

subtype UNSIGNED~4 is UNSIGNED_LONGWORD range 0 .. 2** 4-1; 

subtype 0NSIGNED~5 is UNSIGNED_LONGWORD range 0 .. 2** 5-1; 

subtype UNSIGNED_6 is ONSIGNEDLONGWORD range 0 .. 2** 6-1; 

subtype 0NSI<3ffiD_7 is ONSIGNEDLONGWORD range 0 .. 2** 7-1; 

subtype 0NSIGNED8 is ONSIGNEDLONGWORD range 0 .. 2*‘ 8-1; 

subtype ONSIGNED9 is UNSIGNED_LONGWORD range 0 .. 2** 9-1; 

subtype UNSIGNED_10 is ONSIGNEDLONGWORD range 0 .. 2**10-1; 

subtype 0NSIGNED_11 is ONSIGNEDLONGWORD range 0 .. 2**11-1; 

subtype 0NSIGNED12 is ONSIGNEDLONGWORD range 0 .. 2**12-1; 

subtype ONSIGNED~13 is ONSIGNED_LONGWORD range 0 .. 2**13-1; 

subtype ONSIGNEO~14 is CJNSXGNED_LONGWORD range 0 .. 2**14-1; 

subtype ONSIGNED~15 is ONSIGNEDLONGWORD range 0 .. 2**15-1; 

subtype 0NSIGNED_16 is ONSIGNEDLONGWORD range 0 .. 2**16-1; 

subtype ONSIGNED_17 is ONSIGNEDLONGWORD range 0 .. 2**17-1; 

subtype ONSIGNED_18 is ONSIGNED_LONGWORD range 0 .. 2**18-1; 

subtype ONSIGNED_19 is ONSIGNED_LONGWORD range 0 .. 2**19-1; 

subtype ONSIGNED20 is ONSIGNEDLONGWORD range 0 .. 2**20-l; 

subtype 0NSIGNED_21 is ONSIGNEDLONGWORD range 0 .. 2**21-1; 

subtype ONSIGNED_22 is ONSIGNEDLONGWORD range 0 .. 2**22-l; 

subtype ONSIOJED_23 is ONSIGNEDLONGWORD range 0 .. 2**23-1; 

subtype ONSIGNED_24 is ONSIGNED_LONGWORD range 0 .. 2**24-l; 

subtype ONSIGNED_25 is ONSIGNED_LONGWORD range 0 .. 2**25-1; 

subtype ONSIGNED_26 is ONSIGNED_LONGWORD range 0 .. 2**26-1; 

subtype ONSIGNED_27 is ONSIGNED_LONGWORD range 0 .. 2**27-1; 

subtype ONSIGNED_28 is ONSIGNED_LONGWORD range 0 .. 2**28-1; 

subtype ONSIGNED_29 is ONSIGNED_LONGWORD range 0 .. 2**29-l; 

subtype ONSIGNED_30 is ONSIGNED_LONGWORD range 0 .. 2**30-1; 

subtype ONSIGNED_31 is ONSIGNED_LONGWORD range 0 .. 2**31-1; 

— Function for obtaining global symbol values 

function IMPORT_VALOE (SYMBOL : STRING) return ONSIGNED_LONGWORD; 

— On OpenVMS and OSF/1 systems: 

function IMPORT_ADDRESS (SYMBOL : STRING) return ADDRESS; 

function IMPORT_LARGEST_VALOE (SYMBOL : STRING) return LARGEST_INTEGER; 

— VAX device and process register operations 

— On OpenVMS VAX systems only: 

function READ REGISTER (SOURCE : ONSIGNED_BYTE) return UNSIGNED BYTE; 
function R£AD~REGISTER (SOURCE : UNSIGNED WORD) return 0NSIGNEDJ40RD; 
function READ~REGISTER (SOORCE : UNSIGNED~LONGWORD) 
return UNSIGNED LONGWORD; 


F.3 Specification of the Package System 










— On OpenVMS VAX systems only: 

procedure WRITE_R£GISTER (SOURCE : UNSIQtED_BYTE; 

TARGET : out UNS IGNED_BYTE); 
procedure WRITE_REGIST£R(SOURCE : UNSIGNED_WORD; 

TARGET : out UNSIGNED_WORD); 
procedure WRITE_REGISTER(SOURCE : UNSIGNED_LONGWORD; 

TARGET : out UN S1GNED_LONGWORD); 

— On OpenVMS VAX systems only: 

function MFPR (REGNUMBER : INTEGER) return UNSIGNED_LONGWORD; 
procedure MTPR (REGJNUMBER : INTEGER; 

SOURCE : UNSIGNED_LONGWORD); 

— For the following declarations, note, that the declaration without 

— a RETRYCOUNT parameter mean to retry infinitely. A value of 0 

— for the RETRYCOUNT means do not retry. / 

— Interlocked-instruction procedures 

— On OpenVMS and OSF/1 systems: 

procedure CLEARINTERLOCKED (BIT : in out BOOLEAN; 

OLDVALUE : out BOOLEAN); 

procedure ?ET_INTERLOCKED (BIT : in out BOOLEAN; 

OLD_VALUE : out BOOLEAN); 

— On OpenVMS and OSF/1 systems: 
type ALIGNED_WORD is 

record 

VALUE : SHORT_INTEGER; 
end record; 
for ALIGNED_WORD use 
record at mod 2; 
end record; 

— On AXP systems only: 

procedure CLEAR_INTERLOCKED (BIT : in out BOOLEAN; 

OLD VALUE : out BOOLEAN; 

RETRY_COUNT : in NATURAL; 

SUCCESS_FLAG : out BOOLEAN); 

procedure SET INTERLOCKED (BIT : in out BOOLEAN; 

OLD_VALUE : out BOOLEAN; 

RETRY_COUNT : in NATURAL; 

SUCCESS_FLAG : out BOOLEAN); 

— On OpenVMS and OSF/1 systems: 

procedure ADD_INTERLOCKED (ADDEND : in SHORT_INTEGER; 

AUGEND : in out ALIGNED_WORD; 

SIGN : out INTEGER); 


F-9 


Specification of the Package System F.3 





— On AXP systems only: 
type ALIGN£D_XNTEGER is 

record 

VALUE : INTEGER; 
end record; 

for ALIGNED_INTEGER use 
record at mod 4; 
end record; 

— On AXP systems only: 
type ALIGNED LONG_INTEG£R is 

record 

VALUE : LONG_INTEGER; 
end record; - 

for ALIGNED_LONG INTEGER use 

record at mod 3; < 

end record, 

— For the following declarations, note that the declaration without 

— a RETRYCOUNT parameter mean to retry infinitely. A value of 0 
-- for the RETRYCOUNT means do not retry. 

— On AXP systems only: 

procedure ADDATOMIC (TO : in out ALIGNEDINTEGER; 

AMOUNT : in INTEGER); 

procedure ADD ATOMIC (TO : in out ALIGNEDINTEGER; 

AMOUNT : in INTEGER; 

RETRY_COUNT : in NATURAL; 

OUTVALUE : out INTEGER; 

SUCCESS_FLAG : out BOOLEAN); 

procedure ADD_ATOMIC (TO : in out ALIGNED_LONG_INTEGER; 

AMOUNT : in LONG_INTEGER) ; 

procedure ADD_ATOMIC (TO : in out ALIGNED_LONG_INTEGER; 

AMOUNT : in LONG_INTEGER; 

RETRY_COUNT : in NATURAL; 

OUTVALUE : out LONG_INTEGER; 

SUCCESS_FLAG : out BOOLEAN); 

— On AXP systems only: 

procedure AND_ATOMIC (TO : in out ALIGNED_INTEGER; 

FROM : in INTEGER); 

procedure AND_ATOMIC (TO : in out ALIGNED INTEGER; 

FROM : in INTEGER; 

RETRY_COUNT : in NATURAL; 

OLD_VALUE : out INTEGER; 

SUCCESS_FLAG : out BOOLEAN); 

procedure AND_ATOMIC (TO : in out ALIGNED_LONG_INTEGER; 

FROi : in LONG_INTEGER); 

procedure AND_ATOUC (TO : in out ALIGNED_LONG_INTEGER; 

FROM : in LONG_INTEGER; 

RETRY_COUNT : in NATURAL; 

OLD_VALUE : out LONG_INTEGER; 

SUCCESS FLAG : out BOOLEAN); 


F.3 Specification of the Package System 


F-10 






— On AXP systems only: 


procedure OR_ATOMIC 

(TO 

: in out ALIGNED INTEGER; 


FROM 

: in INTEGER) r 

procedure ORATOMIC 

(TO 

: in out ALIGNED INTEGER; 


FROM 

: in INTEGER; 


RETRY COUNT 

: in NATURAL; 


OLD VALUE 

: out INTEGER; 


SUCCESS FLAG 

: out BOOLEAN); 

procedure OR ATOMIC 

(TO 

: in out ALIQIED LONG INTEGER, 


FROM 

: in LONG INTEGER); 

procedure OR ATOMIC 

(TO 

: in out ALIGNED LONG INTEGER, 


FROM 

: in LONG INTEGER; 


RETRY COUNT 

: in NATURAL; 


OLD VALUE 

: out LONG INTEGER; 


SUCCESS FLAG 

: out BOOLEAN); 

t 

— On OpenVMS VAX systems only: 


type INSQ STATUS is 

(OK NOT FIRST, 

FAIL NO LOCK, OK FIRST) ; 

for INSQSTATUS use 

(OK NOT~FIRST 

-> 0, ~ 


FAIL NO LOCK 

*> 1. 


OK FIRST 

=> 2); 

— On OpenVMS VAX systems only: 


type REMQSTATUS is 

(OK NOT EMPTY, 

FAIL NO LOCK, 


OK EMPTY, 

FAIL NAS EMPTY) ; 

for REMQSTATUS use 

(OK NOT EMPTY 

-> o. 


FAIL NO LOCK 

-> 1, 


OK EMPTY 

-> 2, 


FAILJtASJEMPTY => 3); 

— On OpenVMS AXP systems only: 


type INSQ STATUS is 

(FAIL NO LOCK, 

OK NOT FIRST, OK FIRST) ; 

for INSQ_STATUS use 

(FAIL~NO LOCK 

-> -C 


OK NOT FIRST 

-> 0, 


OK FIRST 

=> l); 


— On OpenVMS AXP systems only: 

type REMQ_STATUS is (FAIL_NO_LOCK, FAIL NAS_EMPTY, 
OK_NOT_EMPTY, OK_EMPTY) ; 
for REMQ_STATOS use (FAIL_NO_LOCK => -1, 

FAIL_WAS_EMPTY => 0, 

OK NOTJEMPTY => 1, 

OK~EMPTY => 2); 

— On OpenVMS systems only: 

procedure INSQHI (ITEM : in ADDRESS; 

HEADER : in ADDRESS; 

STATUS : out INSQ_STATUS); 

— On OpenVMS systems only: 

procedure REMQHI (HEADER : in ADDRESS; 

ITEM : out ADDRESS; 

STATUS : out REMQ_STATUS) ; 


F—11 


Specification of the Package System F.3 







— On OpenVMS systems only: 
procedure INSQTI (ITEM : in ADDRESS; 

HEADER : in ADDRESS; 

STATUS : out INSQ_STATUS); 

— On OpenVMS systems only: 
procedure REMQTI (HEADER : in ADDRESS; 

ITEM : out ADDRESS; 

STATUS : out REMQ_STATUS); 

private 

— Not 3hown 
end SYSTEM; 

t 

F.4 Restrictions on Representation Clauses 

The representation clauses allowed in DEC Ada are length,-enumeration, 
record representation, and address clauses. 

In DEC Ada, a representation clause for a generic formal type or a type that 
depends on a generic formal type is not allowed. In addition, a representation 
clause for a composite type that has a component or subcomponent of a generic 
formal type or a type derived from a generic formal type is not allowed. 

F.5 Restrictions on Unchecked Type Conversions 

DEC Ada supports the generic function UNCHECKED_CONVERSION with 
the following restrictions on the class of types involved: 

* The actual subtype corresponding to the formal type TARGET must not be 
an unconstrained array type. 

• The actual subtype corresponding to the formal type TARGET must not be 
an unconstrained type with discriminants. 

Further, when the target type is a type with discriminants, the value resulting 
from a call of the conversion function resulting from an instantiation of 
UNCHECKED_CONVERSION is checked to ensure that the discriminants 
satisfy the constraints of the actual subtype. 

If the size of the source value is greater than the size of the target subtype, 
then the high order bits of the value are ignored (truncated); if the size of 
the source value is less than the size of the target subtype, then the value is 
extended with zero bits to form the result value. 


F.5 Restrictions on Unchecked Type Conversions 


F-12 






F.6 Conventions for Implementation-Generated Names 
Denoting Implementation-Dependent Components in 
Record Representation Clauses 

DEC Ada does not allocate implementation-dependent components in records. 

F.7 Interpretation of Expressions Appearing in Address 
Clauses 

Expressions appearing in address clauses must be of the type ADDRESS 
defined in the package SYSTEM (see 13.7a. 1 and F.3). In DEC Ada, values 
of the type SYSTEM.ADDRESS are interpreted as virtual addresses in the 
machine’s address space. 

DEC Ada allows address clauses for objects and imported subprograms; on 
DEC OSF/1 or ULTRIX systems, the simple name may also be the name of a 
single entry (see 13.5). 

On Open VMS systems, DEC Ada does not support interrupts as defined in 
section 13.5.1. Instead, DEC ..da provides the pragma AST_ENTRY and the 
AST_ENTRY attribute as alternative mechanisms for handling asynchronous 
interrupts from the Open VMS operating system (see 9.12a). 

On DEC OSF/1 or ULTRIX systems, DEC Ada supports interrupts as defined 
in section 13.5.1, to allow some DEC OSF/1 or ULTRIX signals to be associated 
with task entry calls. For information on handling DEC OSF/1 or ULTRIX 
signals, see the DEC Ada Run-Time Reference Manual for DEC OSF/1 Systems 
or DEC Ada Run-Time Reference Manual for ULTRIX Systems. 

F.8 Implementation-Dependent Characteristics of 
Input-Output Packages 

In addition to the standard predefined input-output packages 
(SEQUENTIALJO, DIRECTJO, TEXT_IO, and ^EXCEPTIONS), DEC Ada 
provides the following packages for handling sequential and direct files with 
mixed-type elements: 

• SEQUENTIAL.MDCEDJO (see 14.2b.4). 

• DIRECTJdIXED JO (see 14.2b.6). 

DEC Ada does not provide the low level input-output package described in this 
section. 


F-13 


Implementation-Dependent Characteristics of Input-Output Packages F.6 






As specified in section 14.4, DEC Ada raises the following language-defined 
exceptions for error conditions that occur during input-output operations: 
STATUS.ERROR, MODE.ERROR, NAME.ERROR, USE.ERROR, END. 
ERROR, DATA^ERROR, and LAYOUT.ERROR. DEC Ada does not raise the 
language-defined exception DEVICE.ERROR; device-related errors cause the 
exception USE.ERROR to be raised. 

The exception USE.ERROR is raised under the following conditions: 

• If the capacity of the external file has been exceeded. 

• In all CREATE operations if the mode specified is IN.FILE. 

J 

• In all CREATE operations if the file attributes specified by the FORM 
parameter are not supported by the package. 

• In all CREATE, OPEN, DELETE, and RESET operations if, for the 
specified mode, the environment does not support the operation for an 
external file. 

• In all NAME operations if the file has no name. 

• In the SET.LJNE.LENGTH and SET.PAGE.LENGTH operations on text 
files if the lengths specified are inappropriate for the external file. 

• In text files if an operation is attempted that is not possible for reasons 
that depend on characteristics of the external file. 

DEC Ada provides other input-output packages that are available on specific 
systems. The following sections outline those packages. The following sections 
also give system-specific information about the overall set of DEC Ada 
input-output packages and input-output exceptions. 

F.8.1 DEC Ada Input-Output Packages on OpenVMS Systems 

On OpenVMS systems, the DEC Ada predefined packages and their operations 
are implemented using OpenVMS Record Management Services (RMS) 
file organizations and facilities. To give users the maximum benefit of the 
underlying RMS input-output facilities, DEC Ada provides the following 
Open VMS-specific packages: 

• RELATIVE.IO (see 14.2a.3). 

• INDEXED.IO (see 14.2a.5). 

• RELATIVE.MIXED.IO (see 14.2b.8). 

• INDEXED.MIXED.IO (see 14.2b. 10). 

• AUX.IO.EXCEPTIONS (see 14.5a). 


F.8.1 DEC Ada Input-Output Packages on OpenVMS Systems 


F-14 







The following sections summarize the implementation-dependent characteris¬ 
tics of the DEC Ada input-output packages. The DEC Ada Run-Time Reference 
Manual for OpenVMS Systems discusses these characteristics in more detail. 

F.8.1.1 interpretation of the FORM Parameter on OpenVMS Systems 

On OpenVMS systems, the value of the FORM parameter may be a string 
of statements of the OpenVMS Record Management Services (RMS) Pile 
Definition Language (FDL), or it may be a string referring to a text file of FDL 
statements (called an FDL file). 

FDL is a special-purpose OpenVMS language for writing file specifications. 
These specifications are then used by DEC Ada run-time routines to create 
or open files. See the DEC Ada Run-Time Reference Manifal for OpenVMS 
Systems for the rules governing the FORM parameter and for a general 
description of FDL. See the Guide to OpenVMS File Applications and the 
OpenVMS Record Management Utilities Reference Manual for complete 
information on FDL. 

On OpenVMS systems, each input-output package has a default string of FDL 
statements that is used to open or create a file. Thus, in general, specification 
of a FORM parameter is not necessary: it is never necessary in an OPEN 
procedure; it may be necessary in a CREATE procedure. The packages for 
which a value for the FORM parameter must be specified in a CREATE 
procedure are as follows: 

• The packages DIRECTJO and RELATIVE_IO require that a maximum 
element (record) size be specified in the FORM parameter if the item with 
which the package is instantiated is unconstrained. 

• The packages DIRECT_MIXED_IO and RELATIVE_MIXED_IO require 
that a maximum element (record) size be specified in the FORM parameter. 

• The packages INDEXEDJO and INDEXED_MIXED_IO require that 
information about keys be specified in the FORM parameter. 

Any explicit FORM specification supersedes the default attributes of the 
governing input-output package. The DEC Ada Run-Time Reference Manual 
for OpenVMS Systems describes the default external file attributes of each 
input-output package. 

The use of the FORM parameter is described for each input-output package 
in chapter 14. For information on the default FORM parameters for each 
DEC Ada input-output package and for information on using the FORM 
parameter to specify external file attributes, see the DEC Ada Run-Time 
Reference Manual for OpenVMS Systems. For information on FDL, see the 
Guide to OpenVMS File Applications and the OpenVMS Record Management 
Utilities Reference Manual. 


F-15 


Interpretation of the FORM Parameter on OpenVMS Systems F.8.1.1 







F.8.1.2 Input-Output Exceptions on OpenVMS Systems 

In addition to the DEC Ada exceptions that apply on all systems, the following 
also apply on OpenVMS systems: 

• The DEC Ada exceptions LOCK-ERROR, EXISTENCEJERROR, and KEY. 
ERROR are raised for relative and indexed input-output operations. 

• The exception USE.ERROR is raised as follows in relative and indexed 
files: 

- In the WRITE operations on relative or indexed files if the element in 

the position indicated has already been written. 

/ 

- In the DELETE.ELEMENT operations on relative |uid indexed files if 
the current element is undefined at the start of thd operation. 

~ In the UPDATE operations on indexed files if the current element is 
undefined or if the specified key violates the external file attributes. 

• The exception NAME.ERROR is raised as specified in section 14.4: 
by a call of a CRELATE or OPEN procedure if the string given for the 
NAME parameter does not allow the identification of an external file. On 
OpenVMS systems, the value of a NAME parameter can be a string that 
denotes a OpenVMS file specification or a OpenVMS logical name (in either 
case, the string names an external file). For a CREATE procedure, the 
value of a NAME parameter can also be a null string, in which case it 
names a temporary external file that is deleted when the main program 
exits. The DEC Ada Run-Time Reference Manual for OpenVMS Systems 
explains the naming of external files in more detail. 

• The exception LAYOUT.ERROR is raised as specified in section 14.4: 
in text input-output by the functions COL, LINE, or PAGE if the value 
returned exceeds COUNT' LAST. The exception LAYOUT.ERROR is also 
raised on output by an attempt to set column or line numbers in excess 
of specified maximum line or page lengths, and by attempts to output too 
many characters to a string. In the DEC Ada mixed input-output packages, 
the exception LAYOUT.ERROR is raised by the procedure GET.ITEM if 
no more items can be read from the file buffer; it is raised by the procedure 
PUTJTEM if the current position exceeds the file buffer size. 


F.8.2 Input-Output Packages on DEC OSF/1 or ULTRIX Systems 


F-16 








F.8.2 Input-Output Packages on DEC OSF/1 or ULTRIX Systems 

On DEC OSF/1 or ULTRIX systems, the DEC Ada predefined packages and 
their operations are implemented using DEC OSF/1 or ULTRIX file facilities. 
DEC Ada provides no additional input-output packages specifically related to 
DEC OSF/1 or ULTRIX systems. 

The following sections summarize the DEC OSF/1 or ULTRIX-specific 
characteristics of the DEC Ada input-output packages. The DEC Ada Run¬ 
Time Reference Manual for DEC OSF/1 Systems and DEC Ada Run-Time 
Reference Manual for ULTRIX Systems discuss these characteristics in more 
detail. y 

F.8.2.1 Interpretation of the FORM Parameter on DEC OSF/1 Systems 

On DEC OSF/1 systems, the value of the FORM parameter conforms to the 
description of the FORM parameter in IEEE Standard 1003.5-1992, IEEE 
Standard for Information Technology, POSIX Ada Language Interfaces. The 
value of the FORM parameter must be a character string, defined as follows: 

form_image ::» 

[/i«ld_naine_identifier -> field_value 

{, field_name_identif ier -> field _value}) 

field_value ::- fiel d_value_identifier | integer 

The field names and field values supported by DEC Ada are as follows: 

OWNER, GROUP, OTHER Determines the file permissions associated 

with the file. 

The field value may be NONE, READ, WRITE, 
EXECUTE, or any combination of the latter 
three values separated by underscores (for 
example, READ.WRITE). The field values set 
the access permissions for the created file. If 
no field value is specified, the default value is 
READ_WRITE_EXECUTE. 

The file permissions field names and values 
may be used only in the FORM parameter of 
a CREATE procedure. The exception USE_ 
ERROR is raised if they are used in the FORM 
parameter of an OPEN procedure. 

APPEND Determines whether or not data can be 

appended to the file. 


F-17 


Interpretation of the FORM Parameter on DEC OSF/1 Systems F.8.2.1 







BLOCKING 


TERMINALJNPUT 


FILE.STRUCTURE 


The field value must be either TRUE or 
FALSE. A value of TRUE causes any output 
to be written to the end of the named external 
file. If no field value is specified, the default 
value is FALSE. 

The append field name and value may be used 
only in the FORM parameter of an OPEN 
procedure. The exception USEJSEROR is 
raised if they are used in the FORM parameter 
of a CREATE procedure. 

J 

Determines whether or not blocking input- 
output is in effect. 

The field value must be TASKS. This value 
causes a calling task (but not other tasks) to 
wait for the completion of any input-output 
operation on the file. 

Specifies how characters are read from the 
keyboard. This field applies to text files only. 

The field value must be either LINES or 
CHARACTERS. The value LINES causes 
the canonical terminal input. The value 
CHARACTERS causes noncanonical terminal 
input If no field value is specified, the default 
value is LINES. 

The terminal input field namfe and value have 
no effect if the file is not opened for input or if 
the file is not opened on a terminal. 

Determines whether the file is first-in first-out 
’’IFO) or not. 

The field value must be either REGULAR or 
FIFO. If no field value is specified, the default 
value is REGULAR 

The file structure field name and values may 
be used only in the FORM parameter of a 
CREATE procedure. The exception USE_ 
ERROR is raised if they are used in the 
FORM parameter of an OPEN procedure. 

The exception USE_ERROR is also raised if 


F.8.2.1 Interpretation of the FORM Parameter on DEC OSF/1 Systems 


F-18 





the held name and values are applied to hies 
created or opened with operations from the 
packages DIRECTJO and DIRECT_MIXED_ 
10 . 

FILE_DESCRIPTOR Specihes a DEC OSF/1 hie descriptor for the 

Ada hie being opened. 

The held value specihes the hie descriptor. The 
hie descriptor must be open. 

If the hie descriptor is not open, if the hie 
descriptor refers to an Ada hie that is already 
open, or if the hie descriptor refers to an 
Ada hie with an incompatible mode, then the 
exception USE.ERROR is raised. Note that 
the hie descriptor option can be used only in 
the FORM parameter of an OPEN procedure. 

PAGE_TERMINATORS Determines the treatment of line, page, and 

hie terminators. This held applies to text hies 
only. 

The held value must be either TRUE 
or FALSE. A value of TRUE causes the 
external representation of line, page, and 
hie terminators to be as dehned in the DEC 
Ada run-time reference manuals. A value of 
FALSE causes the external hie to have no page 
terminators. If no held value is specified, the 
default value is TRUE. 

Output to the external hie occurs as 
follows when the held value is FALSE: line 
terminators are represented by the character 
ASCII.LF, page terminators are omitted, and 
hie terminators are represented by the physical 
end of the hie. The exception USE_ERROR is 
raised when an explicit call is made to the 
procedure TEXT_IO.NEW_PAGE or an explicit 
call is made to the procedure TEXT_IO.SET_ 
LINE and the current line number exceeds the 
value specified by the TO parameter. 


19 


Interpretation of the FORM Parameter on DEC OSF/1 Systems F.8.2.1 






Input to the external file occurs as follows 
when the field value is FALSE: any occurrence 
of the character ASCII.FF is interpreted as the 
character ASCII.FF, not as a page terminator. 

Determines the size of the buffer used during 
file operations. 

The field value must be an integer; it specifies 
the number of bytes in the buffer. 

Determines the maximum element size for a 
direct file. 

4 

The field value must be an integer; it specifies 
the maximum number of bytes in the element 

Each input-output package has an implementation-defined value form string 
that is used to open or create a file. Thus, in general, specification of a FORM 
parameter is not necessary. The packages for which a value for the FORM 
parameter must be specified in a CREATE procedure are as follows: 

• The package DIRECT_IO requires that a maximum element size be 
specified in the FORM parameter if the item with which the package is 
instantiated is unconstrained. 

• The package DIRECT_MDCED_IO requires that a maximum element size 
be specified in the FORM parameter. 

F.822 Interpretation of the FORM Parameter on ULTRIX Systems 

On ULTRIX systems, the value of the FORM parameter must be a character 
string, defined as follows: 

string "[field (,field)]" 

field field_id -> field_value 

field_id :■ BUFFER_SIZE I ELEMENT_SIZE | FILE_DESCRIPTOR 
field_value ::«■« digit {digit} 

Depending on the fields specified, the value of the FORM parameter may 
represent one or more of the following: 

• The size of the buffer used during file operations. The field value specifies 
the number of bytes in the buffer. 

• The maximum element size for a direct file. The field value specifies the 
maximum number of bytes in the element. 


BUFFER.SIZE 


ELEMENTjSIZE 


F.8.2.2 Interpretation of the FORM Parameter on ULTRIX Systems 


F-20 







• A DEC OSF/1 or ULTRIX file descriptor for the Ada file being opened. The 
file descriptor must be open. 

If the file descriptor is not open, or if it refers to an Ada hie that is 
already open, then the exception USE_ERROR is raised. Note that the 
file descriptor option can be used only in the FORM parameter of an OPEN 
procedure. 

Each input-output package has an implementation-defined value form string 
that is used to open or create a file. Thus, in general, specification of a FORM 
parameter is not necessary. The packages for which a value for the FORM 
parameter must be specified in a CREATE/procedure are as follows: 

• The package DIRECT_IO requires that a maximum ejfement size be 
specified in the FORM parameter if the item with which the package is 
instantiated is unconstrained. 

• The package DIRECT_MIXED_IO requires that a maximum element size 
be specified in the FORM parameter. 

The use of the FORM parameter is described for each input-output package in 
chapter 14. For information on using the FORM parameter to specify external 
file attributes, see the DEC Ada Run-Time Reference Manual for DEC OSFI1 
Systems or DEC Ada Run-Time Reference Manual for ULTRIX Systems. 

F.8.2.3 Input-Output Exceptions on DEC OSF/1 or ULTRIX Systems 

In addition to the DEC Ada exceptions that apply on all systems, the following 
also apply on DEC OSF/1 or ULTRIX systems: 

• The exception NAME_ERROR is raised as specified in section 14.4: by a 
call of a CREATE or OPEN procedure if the string given for the NAME 
parameter does not allow the identification of an external file. On DEC 
OSF/1 or ULTRIX systems, the value of a NAME parameter can be a string 
that denotes an DEC OSF/1 or ULTRIX file specification. For a CREATE 
procedure, the value of a NAME parameter can also be a null string, in 
which case it names a temporary external file that is deleted when the 
main program exits. The DEC Ada Run-Time Reference Manual for DEC 
OSFI1 Systems or DEC Ada Run-Time Reference Manual for ULTRIX 
Systems explains the naming of external files in more detail. 

• The exception LAYOUT_ERROR is raised as specified in section 14.4: 
in text input-output by the functions COL, LINE, or PAGE if the value 
returned exceeds COUNT'LAST. The exception LAYOUT_ERROR is also 
raised on output by an attempt to set column or line numbers in excess 
of specified maximum line or page lengths, and by attempts to output too 
many characters to a string. In the DEC Ada mixed input-output packages, 
the exception LAYOUTJSRROR is raised by the procedure GET_ITEM if 


F-21 


Input-Output Exceptions on DEC OSF/1 or ULTRIX Systems F.8.2.3 





no more items can be read from the file buffer, it is raised by the procedure 
PUT_ITGM if the current position exceeds the file buffer size. 

F.9 Other Implementation Characteristics 

Implementation characteristics relating to the definition of a main program, 
various numeric ranges, and implementation limits are summarized in the 
following sections. 

F.9.1 Definition of a Main Program 

DEC Ada permits a library unit to be used as a main program under the 
following conditions: 

• If it is a procedure with no formal parameters. 

On Open VMS systems, the status returned to the Open VMS environment 
upon normal completion of the procedure is the value 1. 

On DEC OSF/1 or ULTRIX systems, the status returned to the DEC OSF/I 
or ULTRIX environment upon normal completion of the procedure is the 
value 0. 

On DEC OSF/1 systems, the status returned to the DEC OSF/1 
environment when unhandled exceptions have been raised is the value 
42. 

• If it is a function with no formal parameters whose returned value is of 
a discrete type. In this case, the status returned to the operating-system 
environment upon normal completion of the function is the function value. 

• If it is a procedure declared with the pragma EXPORT_VALUED_ 
PROCEDURE, and it has one formal out parameter that is of a discrete 
type. In this case, the status returned to the operating-system environment 
upon normal completion of the procedure is the value of the first (and only) 
parameter. 

Note that when a main function or a main procedure declared with the pragma 
EXPORT_VALUED_PROCEDURE returns a discrete value whose size is 
less than 32 bits (on Open VMS VAX or ULTRIX systems) or 64 bits (on AXP 
systems), the value is zero- or sign-extended as appropriate. 


F.9.2 Values of Integer Attributes 


F-22 






F.9.2 Values of Integer Attributes 

The ranges of values for integer types declared in the package STANDARD are 
as follows: 


Integer type 

Range 

Systems on which it 
applies 

SHORT_SHORT_INTEGER 

-128 .. 127 

All 

SHORT_INTEGER 

-82768 .. 32767 

All 

INTEGER 

-2147483648 .. 2147483647 

All 

LONGJNTEGER 

-2147483648 .. 2147483647 
-2 s3 .. 2“-l 

, Open VMS VAX 
' AXP 


F-23 


Values of Integer Attributes F.9.2 








For the applicable input-output packages, the ranges of values for the types 
_ COUNT and POSITIVE.COUNT are as follows^ 

COUNT 0 .. INTEGER' LAST 

POSITIVE_COUNT 1 .. INTEGER' LAST 

For the package TEXT_IO, the range of values for the type FIELD is as follows: 
FIELD 0 .. INTEGER' LAST 

F.9.3 Values of Floating Point Attributes 

DEC Ada provides the following floating point types in the package 
STANDARD. Additional floating point types are declared jn the package 
SYSTEM (see 13.7b. land 13.7b.2). ' 


Type 

Default Representation 

Systems on which 
it applies 

Section 

FLOAT 

F_floating 

IEEE single float 

Open VMS 

DEC OSF/1 or 
ULTRIX 

3.5.7 

LONGJFLOAT 

G_floating 

IEEE double float 

Open VMS 

DEC OSF/1 or 
ULTRIX 

3.5.7 

LONG_LONG_FLOAT 

H_floating 

IEEE double float 

Open VMS VAX 

DEC OSF/1 or 
ULTRIX 

3.5.7 


The values of the floating point attributes for the different floating point 
representations appear in the following tables. 


F.9.3 Values of Floating Point Attributes 


F-24 






F.9.3.1 FJIoating Characteristics 


Attribute 

FJIoating value and approximate decimal equivalent 
(where applicable) 

DIGITS 

6 

MANTISSA 

21 

EMAX 

84 

EPSILON 

16#0.1000 000#e-4 

approximately 

9.53674E-07 

SMALL 

16#0.8000 000#e-21 

approximately 

2.58494E-26 

LARGE 

16#0.FFFF F80#e+21 

approximately 

1.93428E+25 

SAFE_EMAX 

127 

SAFE_SMALL 

16#0.1000 000#e-31 

approximately 

2.93874E—39 

SAFEJLARGE 

16#0.7FFF FC0#e+32 

approximately 

1.70141E+38 

FIRST 

-16#0.7FFF FF8#e+32 

approximately 

-1.70141E+38 

LAST 

16#0.7FFF_FF8#e+32 

approximately 

1.70141E+38 

MACHINEJRADIX 

2 

MACHINE.MANTISSA 

24 

MACHINE_EMAX 

127 

MACHINE_EMIN 

-127 

MACHINE JtOUNDS 

True 

MACHENE_OVERFLOWS 

True 


F-25 


FJIoating Characteristics F.9.3.1 









F.9.3.2 DJioatlng Characteristics 


Attribute 

DJIoating value and approximate decimal equivalent 
(where applicable) 

DIGITS 

9 

MANTISSA 

31 

EMAX 

124 

EPSILON 

approximately 

16*0.4000 0000 0000 000*e-7 

9.3132257461548E-10 

SMALL 

approximately 

16*0.8000 0000 0000 000#e-3l 

2.3509887016446E-38 

LARGE 

approximately 

16#0.FFFF FFFE 0000 000#e+31 

2.1267647922655E+37 

SAFE.EMAX 

127 

SAFEJ3MALL 

approximately 

16*0.1000 0000 0000 000#e-31 

2.9387358770557E-39 

SAFE_LARGE 

approximately 

16#0.7FFF FFFF 0000 000#e+32 

1.7014118338124E+38 

FIRST 

approximately 

-16*0.7FFF FFFF FFFF FF8#e+32 
-1.7014118346047E+38 

LAST 

approximately 

16#0.7FFF FFFF FFFF FF8#e+32 

1.7014118346047E+38 

MACHINE_RADIX 

2 

MACHINE.MANTISSA 

56 

MACHINE_EMAX 

127 

MACHINE_EMIN 

-127 

MACHINE_ROUNDS 

True 

MACHINE_OVERFLOWS 

True 


F.9.3.2 DJIoating Characteristics 


F-26 











F.9.3.3 Gjloating Characteristics 


Attribute 

Gjloating value and approximate decimal equivalent 
(where applicable) 

DIGITS 

15 

MANTISSA 

51 

EMAX 

204 

EPSILON 

approximately 

16*0.4000 0000 0000 00*e-12 

8.88178419700IE-16 

SMALL 

approximately 

16*0.8000 0000 0000 00*e-51 / 

1.944692274332E-62 

LARGE 

approximately 

16#0.FFFF FFFF FFFF E0#e+51 

2.571100870814E+61 

SAFEJEMAX 

1023 

SAFE.SMALL 

approximately 

16*0.1000 0000 0000 00*e-255 

5.562684646268E-309 

SAFE.LARGE 

approximately 

16#0.7FFF FFFF FFFF F0#e+256 

8.988465674312E+307 

FIRST 

approximately 

-16#0.7FFF FFFF FFFF FC#e+256 
-8.988465674312E+307 

LAST 

approximately 

16#0.7FFF FFFF FFFF FC#e+256 

8.988465674312E+307 

MACHINE JIADDt 

2 

MACHINE_MANTISSA 

53 

MACHINE_EMAX 

1023 

MACHINE_EMIN 

-1023 

MACHINE JROUNDS 

True 

MACHINE.OVERFLOWS 

True 


F-27 


Gjloating Characteristics F.9.3.3 












r 


F.9.3.4 HJIoatlng Characteristics 


Attribute 

HJIoatlng value and approximate decimal equivalent 
(where applicable) 

DIGITS 

33 

MANTISSA 

111 

EMAX 

444 

EPSILON 

approximately 

16#0.4000 0000 0000 0000 0000 0000 0000 0#e-27 
7.7037197775489434122239U7703397E-34 

SMALL 

approximately 

16*0.8000 0000 0000 0000 0000 0000 0000'0#e-lH 
1.1006568214637918210934318020936E-134 

LARGE 

approximately 

16#0.FFFF FFFFJFFFF FFFF FFFF FFFF FFFE_0#e+lll 
4.5427420268475430659332737993000E+133 ' 

SAFEJSMAX 

16383 

SAFE.SMALL 

approximately 

16*0.1000 0000 0000 0000 0000 0000 0000 0#e—4095 
8.4052578577802337656566945433044E—4933 

SAFE.LARGE 

approximately 

16M.7FFF FFFF_FFFF FFFF FFFF FFFF FFFF 0#e+4096 
5.9486574767861588254287966331400E+4931 

FIRST 

approximately 

-16*0.7FFF FFFF FFFF FFFF FFFF FFFF FFFF C#e+4096 
-5.9486574767861588254287966331400E+4931 

LAST 

approximately 

16#0.7FFF FFFF FFFF FFFF FFFF FFFF FFFF C#e+4096 
5.9486574767861588254287966331400E+4931 

MACHINE JRADK 

2 

MACHINE_MANTISSA 

113 

MACHINE_EMAX 

16383 

MACHINE_EMIN 

-16383 

MACHINE_ROUNDS 

Drue 

MACHINE_OVERFLOWS 

Drue 


F.9.3.4 HJIoating Characteristics 


F-28 











F.9.3.5 IEEE Single Float Characteristics 


Attribute 

IEEE single float value and approximate decimal equivalent 
(where applicable) 

DIGITS 

6 

MANTISSA 

21 

EMAX 

84 

EPSILON 

approximately 

16*0.1000 000#e—4 

9.53674E-07 

SMALL 

approximately 

16*0.8000 000#e-21 

2.5849E-26 

LARGE 

approximately 

16#0.FFFF F80#E+21 

1.93428E+25 

SAFE.EMAX 

125 

SAFESMALL 

approximately 

1.17549E-38 

SAFE.LARGE 

approximately 

4.25353E+37 

FIRST 

approximately 

-3.40282E+38 

LAST 

approximately 

3.40282E+38 

MACHINE_RADEX 

2 

MACHINE_MANTISSA 

24 

MACHINE_EMAX 

128 

MACHINE JEMIN 

-125 

MACHINE_ROUNDS 

True 

MACHINE_OVERFLOWS 

True 


F-29 


EEE Single Float Characteristics F.9.3.5 










F.9.3.6 IEEE Double Float Characteristics 


Attribute 

IEEE double float value and approximate decimal equivalent 
(where applicable) 

DIGITS 

15 

MANTISSA 

51 

EMAX 

204 

EPSILON 

approximately 

8.8817841970012E-16 

SMALL 

approximately 

1.9446922743316E-62 

LARGE 

approximately 

2.5711008708144E+61 

SAFEJEMAX 

1021 

SAFE.SMALL 

approximately 

2.22507385850720E-308 

SAFEJLARGE 

approximately 

2.2471164185779E+307 

FIRST 

approximately 

-1.7976931348623E+308 

LAST 

approximately 

1.7976931348623E+308 

MACHINE_RADIX 

2 

MACHINE_MANTISSA 

53 

MACHINE_EMAX 

1024 

MACHINE_EMIN 

-1021 

MACHINE.ROUNDS 

True 

MACHINE_OVERFLOWS 

True 


F.9.4 Attributes of Type DURATION 

The values of the significant attributes of the type DURATION are as follows: 

DURATION'DELTA 0.0001 
DURATION'SMALL 2~ u 
DURATION'FIRST -131072.0000 


F.9.4 Attributes of Type DURATION 


F-30 










DURATION'LAST 131071.9999 

DURATION'LARGE 131071.9999 

F.9.5 Implementation Limits 


Limit 

DEC 

system* 

on which it 
applies 

Value 

Maximum number of formal parameters in a . 
subprogram or entry declaration that are of an 
unconstrained record type 

All 

r 

/ 

32 

Maximum identifier length (number of characters) 

All 

255 

Maximum number of characters in a source line 

All 

255 

Maximum collection size (number of bytes) 

Open VMS 
ULTRDt 

2 S, -1 


DEC OSF/1 

2 BS -1 

Maximum number of discriminants for a Teem’d type 

All 

245 

Maximum number of formal parameters in an entry or 
subprogram declaration 

All 

246 

Maximum number of dimensions in an array type 

All 

255 

Maximum number of library units and subunits in a 
compilation closure 1 

All 

4095 

Maximum number of library units and subunits in an 
execution closure 2 

All 

16383 

Maximum number of objects declared with the pragma 
COMMON_OBJECT or PSECT.OBJECT 

All 

32757 

Maximum number of enumeration literals in an 
enumeration type definition 

All 

65535 

Maximum number of lines in a source file 

All 

65534 

Maximum number of bits in any object 

All 

2 31 — 1 

Maximum size of the static portion of a stack frame 

All 

2*> 


(approximate) 


, The compilation closure of a given unit is the total set of units that the given unit depends on, 
directly and indirectly. 

2 The execution closure of a given unit is the compilation closure phis all associated secondary units 
(library bodies and subunits). 


F-31 


Implementation Limits F.9.5 




