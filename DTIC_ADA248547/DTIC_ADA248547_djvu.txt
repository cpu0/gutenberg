f AD-A248 547 PAGE 


Fom Approved 
OPM No. 0704-0188 


P«Mc raponlnB bufdi 
nMdw). and ravlMrin( 
Haadquartam Saivict 
Managamant and Bw 


1. AGENCY USE ONLY 2. REPORT DAlb 3. REPORT TYPE AND DATES COVERED 

Rnal; 17 May 1991 to 01 Jun 1993 


dudtog dta Ima lor iwMng ntnicUona aaaichkig aaladng data aounaa gMhadng and maHaMng tw data 
any dinar aipacl at Wa GOltclion of Moimalion, InckidnB auggaaliona lor laducing Ma buRhn. to Waahin(don 
way. SiAal20a.Artnglon.VA 22202-4302. and 10 dia Mica at Uonnatlon and nagulaoryAltaira.Oirica of . 

13. REPORT TYPE AND DATES COVERED " 


5. FUNDING NUMBERS 


4. TITLE AND SUBTITLE 

Validation Summary Report: Verdix Corporation, VADS Sun-4 SunOS=>68K, 
VAda-110-40140, Version 6.0, Sun 4/280 (SunOS Release 4.0){Host) to Motorola 
68040-MVME165 (bare machine)(Target). 910517W1.11152 


6. AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND A0DRESS(ES) 

Ada Validation Facility, Language Control Facility ASO/SCEL 
BkJg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR^63-0491 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS{ES) 

Ada Joint Program Office 

United States Department of Defense 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 


10. SP0NS0RING440NIT0RING AGENCY 
REPORT NUMBER 



12a DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13, ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS Sun-4 SunOS*>68K, VAda-110-40140, Version 6.0, Wright-Patterson AFB, Sun 4/280 
(SunOS Release 4.0)(Host) to Motorola 68040-MVME165 (bare machine)(Target), AVCV 1.11. 


DTIC 

SrpD 


14. SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility. ANS1/MIL-STD-1815A, AJPO. 


TTTSECURITY CLASSIFICATION 
OF REPORT 
UNCLASSIFIED 


18. SECURITY CLASSIFICATION 

UNCLASSIPED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 


15-NUMBER 


16, PRICE CODE 


20. UMITATION OF ABSTRACT 


MSN 7540-01-280-550 


Standard Form 298, (Rev. 2-89) 
Proscribed by ANSI Sid. 239-128 
























Certificate Information 


The following Ada in^lementation was tested and determined to pass ACVC 
1.11. Testing was completed on 17 May 1991. 

Coiipiler Name and Version: VADS Sun-4 SxanOS <*> 68K, VAda-110-40140 

Version 6.0 

Host Con^ter System: Sun 4/280 (SunOS Release 4.0) 

Target Computer System: Motorola 68040-MVME165 (bare machine) 

Customer Agreement Number: 91-03-18-VRX 


See Section 3.1 for any additional information c0x)ut the testing 
environment. 

As a result of this validation effort. Validation Certificate 

910517W1.11152 is awarded to Verdix Corporation. This certificate expires 

on 1 June 1993. 

This report has been reviewed and is approved. 



Ada Validation Facility 
Steven p. Wilson 
Technical Director 


ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada Va^dat^n/OrganTzation 

Director, Omt^ter & Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



la Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 




AVF Control Number; AVF-VSR-463-0491 

15-October-1991 

91-03-18-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 910517W1.11152 
Verdix Corporation, 

VADS Sun-4 SxJinOS => 68K, VAda-110-40140, Version 6.0 
Sian 4/280 (SunOS Release 4.0) => Motorola 68040-MVME165 (bare machine) 


Prepared By; 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


^92-09320 


92 4 10 068 




BBCLABAtXON OF CONFOUUNCS 


lb* folloviag teelaratlon of eonfecaanet vm tuppliod by tfa« euatoaor. 

Oaeltratloa of Conforaanea 
CufltoBort Vardlx Corporation 

Ada Validation Faeilltyi Af&/SCEL« VPAFB OB 43433-0303 
iC7C Varaloni l.U 
Ada Zaplaaantationi 

Ada Conpilar Kaaa and Varsioat VADS Sua-4 SunOS ■> S8Xf TAda-110-40140 

Varaioa 6.0 

lest Coaptttar Systaat Sun 4/280 (SunOS Ralaaaa 4.0) 

Target Computer Systaat Motorola 68040-MVNB169 (1>ara aaehina) 
Oaelaratient 

(Z/vali the undarsignadf daelara that [I/va] have no 
knovladga of dalibarata davlationa froa the Ada language 
Standard ANSX/KIL-STO-ISISA ISO 8632-1987 in the implanantation 
listed abo^. 




TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS. 2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 
















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national lavs of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report^are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer & Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTION 


1.2 REFERENCES 


[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, FeEruary 1985 and ISO 8652-1987. 

(Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

[UG89] Ada Compiler Validation Capability User*s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler 


Ada Compiler 
Validation 
Capability 
(ACVC) 

Ada 

Implementation 

Ada Joint 
Program 
Office (AJPO) 

Ada 

Validation 
Facility (AVF) 

Ada 

Validation 

Organization 

(AVO) 

Compliance of 
an Ada 

Implementation 

Computer 

System 


The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

The means for testing compliance of Ada implementations, 
consisting of the test suite, the support programs, the ACVC 
user's guide and the template for the validation summary 
report. 

An Ada compiler with its host computer system and its 
target computer system. 

The part of the certification body which provides policy and 
guidance for the Ada certification system. 


The part of the certification body which carries out the 
procedures required to establish the compliance of an Ada 
implementation. 

The part of the certification body that provides technical 
guidance for operations of the Ada certification system. 


The ability of the implementation to pass an ACVC version. 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 






INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformeuice 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of euiy kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>". 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90J. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 14 March 1991. 


E28005C 

B28006C 

C34006D 

C35702A 

C35702B 

C35508I 

C35508J 

C35508M 

C35508N 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

A01B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607rj 

CE3812A 

CE3814A 

CE3902B 





2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be .supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 




IHPLEHENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAXDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 
C35707L..Y (14 
C35802L..Z (15 
C45321L..Y (14 
C45521L..Z (15 
C45621L..Z (15 
C46012L..Z (15 


tests) 

tests) 

tests) 

tests) 

tests) 

tests) 

tests) 


The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type L0NG_FL0AT; 
for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FL0AT, or SH0RT_FL0AT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANT1SSA is less than 47. 

C45624A..B (2 tests) check whether the proper exception is raised if 
MACHINE_0VERFL0WS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINE_OVERFLOWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 






IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given combination 
of mode and access method; this implementation supports these 
operations. 


Test 

File Operation Mode 

File Access 

Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 

10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 

10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 


CE2102I 

CREATE 

IN FILE 

DIRECT 10 


CE2102J 

CREATE 

OUT FILE 

DIRECT 10 


CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 

10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL 

10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 

10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 

10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 


CE2102S 

RESET 

INOUT FILE 

DIRECT 10 


CE2102T 

OPEN 

IN FILE 

DIRECT 10 


CE2102U 

RESET 

IN FILE 

DIRECT 10 


CE2102V 

OPEN 

OUT FILE 

DIRECT 10 


CE2102W 

RESET 

OUT FILE 

DIRECT 10 


CE3102E 

CREATE 

IN FILE 

TEXT 10 


CE3102F 

RESET 

Any Mode 

TEXT'IO 


CE3102G 

DELETE 


TEXT 10 


CE3102I 

CREATE 

OUT FILE 

TEXT'IO 


CE3102J 

OPEN 

IN FILE 

TEXT 10 


CE3102K 

OPEN 

OUT FILE 

TEXT 10 



CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external'direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise USE_ERROR 
if they specify an inappropriate value for the external file; there are 
no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2-3 








IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 20 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303P BC3005B BD2B03A BD2D03A 

BD4003A 


A3S801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD2A24A, CD2A31A..C (3 tests) were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure Length_Check, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of Length_Check—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 







CHAPTER 3 


PROCESSING INFORMATIW 


3.1 TESTING ENVIRCXsIMENT 

Hie Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

Mr Darrel Lee 
Verdix Corporation 
1600 NW Compton Drive #357 
Aloha OR 97006-6905 


For sales information about this Ada implementation, contact: 

Mr Sam Quiring 
Verdix Corporation 
1600 NW Compton Drive #357 
Aloha OR 97006-6905 


Testing of this Ada iirplementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Steindard, whether the test is applicedile or inappliczJale; 
otherwise, the Ada Implementation fails the ACVC [Pro901. 


3-1 





PROCESSING INFORMATICaa 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of i^plicable Tests 3807 

b) Total Number of Withdrawn Tests 93 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 


g) Total Number of Tests for ACVC 1.11 4170 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above nun±>er of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a network server and then copied onto the 
host conpater over Ethernet. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the communications link of ethernet, and run. The results were 
captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Qption/Switch Effect 


-w suppress generation of warning messages 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. Ihe listings examiined on-site by 
the validation team were also archived. 


3-2 



APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in {UGB9]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

499 

$BIG_ID1 

(1..V-1 => 'A', V *> '1') 

$BIG_ID2 

(1..V-1 => 'A', V => '2') 

$BIG_ID3 

(1..V/2 => 'A') & '3' & 

(1..V-1-V/2 => 'A') 

$BIG_ID4 

(1..V/2 => 'A') & '4' & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT 

(1..V-3 => '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 => '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 => 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 => 'A') & '1' & 

$BLANKS 

(1..V-20 => ' ') 

$MAX_LEN_INT_BASED_ 

LITERAL 

"2;" & (1..V-5 => '0') & "11:" 

$MAX_LEN_REAL_BASED 

LITERAL 

"16;" & (1..V-7 -> '0') & "F.E:" 


A-1 





MACRO PARAMETERS 


$MAX_STRING_LITERAL i (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

SUN4_CROSS_68000 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM. ••+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM.’•+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM. •’+"(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

» / 

$FIXED_NAME 

NOSUCHTYPE 

$FLOAT_NAME 

NO_SUCH_TYPE 

$FORM_STRING 

n fi 

$F0RM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

SGREATER THAN DURATION 

100_000.0 


$GREATER_THAN_DURATION BASE LAST 

To_oo0_ooo 

$GREATER_THAN FLOAT_BASE LAST 

l.gE+308 

$GREATER THAN FLOAT SAFE LARGE 

5.gE307 







MACRO PARAMETERS 

$GREATER_THAN_SeORT_FLOAT_SAFE_LARGE 

9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL EXTERNAL FILE NAMEl 

^/illegal/file_name/2)U2102c.dat" 

$ILLEGAL_EXTERNAL_FILE NAME2 

^/illegal/file_name/CE2102C*.dat" 

$INAPPROPRIATE_LINE LENGTH 

~ -1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS THAN_DURATION_BASE FIRST 

-1U_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

C0DE_0'(0P => NOP); 

$MACHINE_CODE_TYPE C0DE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 


A-3 






MACRO PARAMETERS 


$NANE 

$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATION2 

$NAME_SPECIFICATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

SRECORDNAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

STICK 

$VARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

SYOURPRAGMA 


TINY_INTEGER 
SUN4_CR0SS_68000 
/usr/acvcl.ll/c/e/X2120A 
/usr/acvcl.ll/c/e/X2120B 
/usr/acvcl.ll/c/e/X3119A 
16#F000000E# 

16_777_216 

8 

SUN4_CR0SS_68000 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; END RECORD 

C0DE_0 

32 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 








'•* "J 


APPENDIX B 

COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 

ada 


Ada compiler 
Syntax 

ada [options] [source_file]... [link.er_options] 
[object_file.o]... ~ ~ 

Description 

The command ada executes the Ada compiler and compiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

The object for each compiled Ada unit is left in a file with 
the same name as that of the source with 01, 02, etc. 
substituted for .a. The -o option can be used to produce an 
executable with a name other than a.out, the default. For 
cross compilers, the default name is a.vox. 

By default, ada produces only object and net files. If the 
-M option is used, the compiler automatically invokes a.Id 
and builds a complete program with the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 


B-1 






COMPILATION SYSTEM OPTIONS 


order of compilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada command in any 
VADS location/bin on a system will execute the correct 
compiler components based upon visible library directives, 
the option -sh is provided to print the name of the 
components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

Options 

-a file_name (archive) Treat file_name as an ar file. 

Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as uncompiled. The -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source. 

err. The file of raw error messages can be used as input to 
a.error 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 


-El file 

-El directory (error listing) Same as the -E option, except that 
source listing with errors is produced. 


B-2 







COMPILATION SYSTEM OPTIONS 


-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, and call the 
environment editor ERROR_EDITOR. (If ERROR_EDITOR is 
defined, the environment variable ERROR_PATTERN should also 
be defined. ERROR_PATTERN is an editor search command that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, call vi(l). 

-K (k.eep) Keep the intermediate language (IL) file 
produced by the compiler front end. 

-L library_name (library) Operate in VADS library 

library_name (the current working directory is the default). 

-Ifile_abbreviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file abbreviations, see also 
Operating system documentation, ld(l) 

-M unit_name (main) Produce an executable program using 
the named unit as the main program. The unit must be either 
a parameterless procedure or a parameterless function 
returning an integer. The executable program will be left in 
the file a.out unless overridden with the -o option. 

-M source_file (main) This option is like -M unit_name, except 
that the unit name is assumed to be the root 

name of the .a file (for foo.a the unit is foo. Only one .a file 
may be preceded by -M. 

-o executable_file (output) This option is to be used in 
conjunction with the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-0[0-9]' (optimize) Invoke the code optimizer (0PTIM3). An 
optional digit (there is no space before the digit) specifies 
the level of optimization. The default level of optimization 
for 0PTIM3 is 04. 

-0 full optimization 

-00 prevents optimization 

-01 no hoisting 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 


B-3 





COMPILATION SYSTEM OPTIONS 


-04 hoisting from loops 

-05 hoisting £rom loops but more passes 

-06 hoisting from loops with maximum passes 

-07 hoisting from loops and brauiches 

-08 hoisting from loops and branches, more passes 

-09 hoisting from loops and branches, maximum passes 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

For information on linker INFO directives see USER'S GUIDE, 

INFO Directive Names. 

-R VADS_library (recompile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) Apply pragma SUPPRESS to the entire 
compilation for all suppressible checks. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print compiler version number, date and time 
of compilation, name of file compiled, command input line, 
total compilation time, and error summary line. Storage 
usage information about the object file is provided. With 
0PTIN3 the output format of compression (the size of 
optimized instructions) is as a percentage of input 
(unoptimized instructions). 

-w (warnings) Suppress warning diagnostics. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM reference 
includes a section number and optionally, a paragraph number 
enclosed in parentheses. 


B-4 






COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

a. Id 


prelinker 

Syntax 

a.Id [options] unit_name [ld_options] 

Options 

-DX (debug) Debug memory overflow (use in cases where 
linking a large number of units causes the error message 
local symbol overflow to occur). 

-E unit name (elaborate) Elaborate unit_name as early in 
the elaboration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 

library_name (the current working directory is the default). 

-0 executable file (output) Use the specified file name as 
the name of tEe output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress 
execution. 

Description 

a.Id collects the object files needed to make unit_name a 
main program and calls the UNIX linker ld(l) to link 
together all Ada and other language objects required to 
produce an executable image in a.out. unit_name is the main 
program and must name a non-generic subprogram. If unit_name 
is a function, it must return a value of the type 
STANDARD.INTEGER. This integer result will be passed back to 


B-5 







COMPILATION SYSTEM OPTIONS 


the UNIX shell as the status code of the execution. The 
utility uses the net files produced by the Ada compiler to 
check, dependency information, a.Id produces an exception 
mapping table and a unit elaboration table and passes this 
information to the linker. 

a.Id reads instructions for generating executables from the 
ada.lib file iii the VADS libraries on the search list. 

Besides information generated by the compiler, these 
directives also include WITHn directives that allow the 
automatic linking of object modules compiled from other 
languages or Ada object modules not named in context clauses 
in the Ada source. Any number of WITHn directives may be 
placed into a library, but they must be numoered 
contiguously beginning at WITHl. The directives are recorded 
in the library's ada.lib file and have the following form. 

WITHl;LINK;obj ec t_file: 

WITH2:LINK:archive_file: 

WITHn directives may be placed in the local Ada libraries or 
in any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn 
directive in a library later in the library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unit_name are passed on to the linker. 

These may be options for~it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.Id is a wrapper program that executes 
the correct executable based upon directives visible in the 
ada.lib file. This permits multiple VADS compilers to exist 
on the same host. The -sh option prints the name of the 
actual executable file. 

Files 

a.out default output file 

VADS_location/standard/* startup and standard library routines 

See also Operating system documentation, ld(l). 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the UNIX linker Id. 


B-6 






APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648..2147483647; 
type FLOAT is digits 15 range 

-1.79769313486232E+308..+1.79769313486232E+308; 
type DURATION is delta 0.001 range -2147483.648..2147483.647; 

type SH0RT_INTEGER is range -32768..32767; 

type SH0RT_FL0AT is digits 6 range -3.40282E+38..3.40282E+38; 

type TINY_INTEGER is range -128..127; 

END standard; 


C-1 





APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (ty definition) dynamic. If 
pragma INITIALIZE!STATIC) is used, and an object cannot tse 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.2. INLINE_0NLY Pragma 

The INLINE_(XaLY pragma, when used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINE_CMiy subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_EE®OR will be raised at run time. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, lout provides no user access. It is 
used only to implement code Ixxiies for which no actual Ada 
body can be provided, for example the MACHINE_CODE package. 

1.4. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a conpilation, but before 
any subsequent corrpilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 


C-2 








APPENDIX F OF THE Ada STANDARD 


share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE, each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma eind the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the inple- 
mentation and has the same effect as SHARE_CODE. It is 
included for compatcibility with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type vhose image array has been suppressed will result in a 
compilation warning cind PROGRAM_ERROR raised at run time. 

1.6. EXreRNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable deTined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a variable or 
subprogram defined in euiother language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrence's of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.8. IMPLICIT_C0DE Pragma 

Takes one of the identifiers ON or OFF as the single argu- 


C-3 




APPENDIX F OF THE Ada STANDARD 


ment. This pragma is only allowed within a machine code 
procedure. It specifies that in^jlicit code generated by the 
conpiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 
The default is (XQ. 

1.9. 0PTIMIZE_C0DE Pragma 

Takes one of the identifiers CXI or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the coirpiler. The default is ON. When OFF is 
specified, the conpiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CCOTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' eind FORTRAN functions. The 
Ada subprograms cein be either functions or procedures. The 
types of. parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconpiled. 




APPENDIX F OF THE Ada STANDARD 


2.7. N(»I_REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the conpiler that the siabprogram will not be called 
recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograms within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of eleiboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.10. PACK 

This pragma will cause the conpiler to choose a non-aligned 
representation for composite types. It will not cause 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAOIA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAOIA PASSIVE (INTERRUPT, <n\amber>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
b^y. The pragma directs the conpiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization. In these 
cases a warning will be generated at compile time euid will 


C-5 





APPENDIX F OF THE Ada STANDARD 


raise TASKING_ERROR at nontime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the inplementation but has no 
effect. 

2.15. STORAGE_UNIT 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK and in some cases OVERFLCW_CHECK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or.an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for vrtiich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


C-6 





APPENDIX F OF THE Ada STANDARD 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


— Copyright 1987, 1988, 1989, 1990, 1991 Verdix Corporation 

with UNSIC]NED_TYPES; 
package SYSTEM is 

pragma suppress(ALL_CHECKS); 
pragma suppress(EXCEPTION_TABLES); 
pragma not_elaborated; 

type NAME is ( SUN4_CROSS_68000 ); 

SySTEM_NAME : constant NAME := SIIN4_CROSS_68000; 

STORAGE_UNIT : constant :== 8; 

MEMORY SIZE ; constant := 16 777 216; 


— Systenv-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


constant := -2_147 483 648; 
constant := 2 147__'?83_^47; 
constant := l5; 
constant := 31; 
constant ;* 2.0**(-31); 
constcint ;= 0.01; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 
MAX_REC_SIZE : integer := 1024; 


type ADDRESS is private; 


function 


(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN 

function 

11^ If 

(A; 

ADDRESS; 

B; 

ADDRESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN 

function 


(A; 

ADDRESS ; 

B: 

ADDRESS) 

return 

INTEGER 

function 


(A: 

ADDRESS; 

I: 

INTEGER) 

return 

ADDRESS 

function 

If^ll 

(A: 

ADDRESS; 

I: 

INTEGER) 

return 

ADDRESS 


C-7 





APPENDIX F OF TOE Ada STANDARD 


function "+" (I: UNSIC2«Ii_TYPES.UNSIGNED_INTEGER) returnADDRESS; 
function MEMORYJVDDRESS 

(I: UNSIC3NED_TYPES.UNSIC]NED_INTEGER) returnADDRESS renames "+" 

NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

private 

type ADDRESS is new UNSIGNED_TYPES.UNSIGNED_1NTEGER; 

NO_ADDR : constant ADDRESS := 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(); 
pragma BUILT_IN("<="); 
pragma BUILT_IN(; 
pragma BUILT_IN(; 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_1NTEGER; 

NO_TASK_ID ; constant TASK_ID := 0; 

type PROGRAM_ID is new IINSIGNED_TYPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID := 0; 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. pragma PACK 

In the absence of pragma PACK, record conponents are padded 
so as to provide for efficient access by the target 
hardware. Pragma PACK applied to a record eliminates the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record conpDnents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 
clause must be given to specify the packing of the 


C-8 






APPENDIX F OF THE Ada STANDARD 


components. A size clause applied to a record type will 
cause packing of components only v^en the conponent type is 
a discrete type. An error will be issued if there is insuf¬ 
ficient space allocated. The SIZE attribute is not sup¬ 
ported for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for varicibles. Since 
default initialization of a variable requires evaluation of 
the variaible address elaboration ordering requirements 
prohibit inititalization of varicibles which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpretation and 
restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries must always 
be trying to accept each interrupt entry, unless it is handling the 
interrupt. The task must be executing either an accept for the entry 
(if there is only one) or a select statement where the interrupt entry 
accept alternative is open as defined by Ada RM 9.7.1(4). This is not 
a restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that interrupts are not 
queued (see the last sentence of Ada 13.5.1(2) and 13.5.1(6)). 

No additional requirements are inpDsed for a select statement containing 
both a terminate alternative and an accept alternative for an interrupt 
entry (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt entry from another task are allowed and are 
treated as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify the priority 
of the interrupt. It simply specifies the interrupt vector number. For 
passive ISRs, the nnn of the passive(interrupt,nnn) pragma specifies the 
interrupt priority of the task. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 


C-9 







APPENDIX F OF THE Ada STANDARD 


Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, cui enumeration type of all the opcode mneumonics, 
a set of register definitions, emd a set of addressing mode 
functions. 

The general syntcix of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, operand {, operand} ); 

vrfiere n indicates the number of operands in the aggregate. 

A special case arises for a varieible nxjmber of opereuids. 
The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op «> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand cein only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the f\inctions defined in MACHINE_CODE. The 'REF attribute 
may not be used as cui argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 


C-10 





APPE3®IX F OF TOE Ada STANDARD 


Address expressions in an address clause are interpreted as 
physical addresses. 


8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_lO use the value MAX_REC_SIZE as 
the record size (expressed in STORAGEJUNITS) when the size 
of ELEMENT_TyPE exceeds that value. For example for uncon¬ 
strained arrays such as string vdiere ELEMENT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In einy case the maximum size supported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGE_UNITS) vdien the 
size of ELEMENT_TYPE exceeds that value. For exanple for 
unconstrained arrays such as string vrtiere ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program before instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO inposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a meiximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

Hie maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits 


C-11 




APPENDIX F OF THE Ada STANDAKD 


will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGE_UNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'ST0RAGE_S1ZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGEJJNITS for 
objects declared statically within a conpilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 


