

. ^ /JJ ~ o / ~ 

r -- £>/47& 

p./#£ 

ART/Ada Design Project - Phase / 
Task 2 Report: Detailed Design 


Status Report 


o 


VO 


o 

m 

H 

cn ro 

rH 

1 

03 ^ 

p- \0 


U ^ 

o 

c o 

z 

D O _ 


rH 


sO 


\ 


ro 


<3 


CD 


Cl O' 


-c O 


u o 

K 

l- O _i 

U 2T 

TO i-H 

OJ o 

a> 


1/1 o 

O CO 

0/ 

a: uj 

OC V 

Cl Q 

w y 


C 

2T O 

<y 

O Uj 

CO ■- 

-J 

00 u ^ 

CO 

0 s CO 

UJ < 

r-4 

Q H 

L. 

UJ 

• V 

HJ o 

V 4J 

TJ 

U 3 

< •• 

o a __ 

\ K 

E 

h* qC 

1 0 

OC O 

o 

< a 

* 

LU 

w T) 

C* 

to a> 


s: u 


c 

>S* 

► TO 


^ +J > 
00 co U T? 


00 < 


I 

or 
O 
I 

< UJ 
l/l </l 

< < 
^ X 




0 < 
a 

w 
o 

4- 


i/i 

3 • 

+J 
H3 t/) 
■P C 


w a co h 


Bradley P. Allen 

Inference Corporation 


October 24, 1 988 


Cooperative Agreement NCC 9-16 
Research Activity No. SE.19 

NASA Johnson Space Center 
Information Systems Directorate 
Information Technology Division 


Research Institute for Computing and Information Systems 
University of Houston - Clear Lake 



TECHNICAL REPORT 


The 

RICIS 

Concept 


The University of Houston-Clear Lake established the Research Institute for 
Computing and Information systems in 1986 to encourage NASA Johnson Space 
Center and local industry to actively support research in the computing and 
information sciences. As part of this endeavor, UH-Clear Lake proposed a 
partnership with JSC to jointly define and manage an integrated program of research 
in advanced data processing technology needed for JSC’s main missions, including 
administrative, engineering and science responsibilities. JSC agreed and entered into 
a three-year cooperative agreement with UH-Clear Lake beginning in May, 1 986, to 
jointly plan and execute such research through RICIS, Additionally, under 
Cooperative Agreement NCC 9-16, computing and educational facilities are shared 
by the two institutions to conduct the research. 

The mission of RICIS is to conduct, coordinate and disseminate research on 
computing and information systems among researchers, sponsors and users from 
UH-Clear Lake, NASA/JSC, and other research organizations. Within UH-Clear 
Lake, the mission is being implemented through interdisciplinary involvement of 
faculty and students from each of the four schools; Business, Education, Human 
Sciences and Humanities, and Natural and Applied Sciences. 

Other research organizations are involved via the "gateway” concept. UH-Clear 
Lake establishes relationships with other universities and research organizations, 
having common research interests, to provide additional sources of expertise to 
conduct needed research. 

A major role of RICIS is to find the best match of sponsors, researchers and 
research objectives to advance knowledge in the computing and information 
sciences. Working jointly with NASA/ JSC, RICIS advises on research needs, 
recommends principals for conducting the research, provides technical and 
administrative support to coordinate the research, and integrates technical results 
into the cooperative goals of UH-Clear Lake and NASA/JSC. 


ART/Ada Design Project - Phase / 
Task 2 Report: Detailed Design 

Status Report 




Preface 


This research was conducted under auspices of the Research Institute for 
Computing and Information Systems by Inference Corporation. Dr. Charles McKay 
served as RICIS research coordinator. 

Funding has been provided by the Information Systems Directorate, NASA/JSC 
through Cooperative Agreement NCC 9-16 between the NASA Johnson Space Center and 
the University of Houston-Clear Lake. The NASA technical monitor for this activity was 
Robert T. Savely, of the Software Technology Branch, Information Technology Division, 
Information Systems Directorate, NASA/JSC. 

The views and conclusions contained in this report are those of the author and 
should not be interpreted as representative of the official policies, either express or 
implied, of NASA or the United States Government. 




ART/Ada Design Project - Phase I 
Task 2 Report: Detailed Design 


Status Report 
for 

Subcontract 015 
RICIS Research Activity SE.19 
NASA Cooperative Agreement NCC-9-16 

March 1988 - October 1988 

Bradley P. Allen 
Inference Corporation 
5300 W. Century Blvd. 

Los Angeles, CA 90045 

24 October 88 16:42 


Copyright © 1988 Inference Corporation 



ART. ADA DESIGN' PROJECT • PHASE I 


TASK .* REPORT - DETAILED DESIGN 

Table of Contents 

1. Introduction * 

2. Ada Generator ** 

2.1 Introduction ° 

2.2 Invoking the Ada Generator 5 

2.3 Ada Source Code Generated by the Ada Generator 1 

3. ART/Ada Runtime System 7 

3.1 Introduction ' 

3.2 Booch Diagram of .ART/Ada Runtime System- f , ' 

3.3 Example Main Programs 9 

3.4 Package Specification of the .ART/Ada Runtime System 11 

3.4.1 Package Specification of .ART H 

3.4.2 Package Specification of ERROR __HDL__SUB 15 

3.4.3 Package Specification of USER _ INTERFACE _ SUB -I 

3.4.4 Package Specification of LEX_ADO -3 

3.4.5 Package Specification of PARSER _ ADO -5 

3.4.6 Package Specification of STRUCT^DCL 37 

3.4.7 Package Specification of .ART _ OBJECT _SLT3 40 

3.4.8 Package Specification of DATABASE _SUB ^5 

3.4.9 Package Specification of CALLIO__SUB ^ 

3.4.10 Package Specification of INFER_ENG_ SUB -19 

3.4.11 Package Specification of INIT_SUB 52 

3.4.12 Package Specification of GLOBAL_DCL 54 

3.4.13 Package Specification of SYSTEM _DCL 58 

3.4.14 Package Specification of 10 _ SUB 50 

3.4.15 Package Specification of PATTERN _ NET __ SUB 52 

3.4.16 Package Specification of JOIN_NET_ SUB 54 

3.4.17 Package Specification of ART __ OBJECT __UTEL_ SUB 56 

3.4.18 Package Specification of AGENDA^SUB 59 

3.4.19 Package Specification of INTERPRETER _ SUB 71 

3.4.20 Package Specification of ALLOC _SUB 73 

3.4.21 Package Specification of MACRO_SUB '5 

3.4.22 Package Specification of UI_ INTERNAL _ SUB SO 

3.4.23 Package Specification of MATH_SUB 82 

3.4.24 Package Specification of GC — SUB 84 

3.4.25 Package Specification of COMPILER _DCL 86 

3.4.26 Package Specification of LOGICAL — SUB 88 

3.5 Package Specification of the Booch Components 50 

3.5.1 List _ Single ^Unbounded _Managed 50 

3.5.2 String _ Sequential _ Unbounded _Managed_ Iterator 52 

3.5.3 Floating _ Point _ Utilities 56 

4. Ada Call-In and Call-Out Specification for ART/Ada and ART-IM 1.5 97 

4.1 Introduction 57 

4.2 Interface Types 97 

4.3 Scope of Objects 58 

4.4 Call-Out from ART to Ada 58 

4.5 Call-In from Ada to ART 59 

100 


References 



art; ADA DESIGN PROJECT • PHASE I 


TASK ’ REPORT DETAILED DESIGN 


1. Introduction 

Under subcontract to University of Houston - Clear Lake as part of the Cooperative Agreement between 
UHCL and NASA Johnson Space Center, Inference Corporation is conducting an Ada-Based Expert 
System Building Tool Design Research Project. The goal of the research project is to investigate various 
issues in the context of the design of an Ada-based expert systems building tool. We are taking the 
following approach: using an existing successful design as a starting point, analyze the impact of the Ada 
language and Ada development methodologies on that design, redesign the system in Ada, and analyze its 
performance using both complexity-theoretic and empirical techniques. The research project will attempt 
to achieve a comprehensive understanding of the potential for embedding expert systems in Ada systems, 
for eventual application in future projects. 

This research project consists of four discrete tasks and reports analyzing the research results at the end 
of each task. If the research demonstrates feasibility of the redesign, the design effort will continue into a 
second phase that will determine the feasibility of the redesign of a larger subset. 

In Task 1, we began our effort with an exploration and comparision of design alternatives. Because the 
research objective is the demonstration of the feasibility of developing expert systems systems in Ada, and 
because the ART program is an existing example of a development tool for constructing expert systems 
systems, ART will serve as a baseline for the design. 

The Task 1 report identified an architecture for an initial Ada version of ART, ART/Ada. and 
addressed the following topics: 

• The methodology followed in the design and implementation of the architecture. 

• Differences in the Ada architecture which may limit or expand functionality. 

• Language differences which require or allow differentiation between the base software and the 
Ada version. 

In Task 2, we began to further refine the algorithms specified in the overall design, resolving and 
documenting any open design issues, identifying each system module, documenting the internal 
architecture and control logic, and describing the primary data structures involved in the module. This 
data was compiled and provided in this report which constitutes the deliverable for Task 2. 

The report, a sequel to the previous report, Prototype Overall Design, describes the detailed design of 
the ART/Ada prototype that is composed of the Ada Generator and the ART/Ada Runtime System by 
including the followings: 

• The deflation of the user interface for the Ada generator — The Ada generator is a collection 


1 



ART. ADA DESIGN PRO JECT - PHASE I 


TASK REPORT- DETAILED DESIGN 


of C functions that are linked with ART-IM L.5, and generate the Ada source code that 
initialize the ART/ Ada knowledge base data structure. .ART-IM (the Automated Reasoning 
Tool for Information Management), formerly called ART/C, is an expert system building tool 
marketed by Inference. Written in C, .ART-IM supports the subset of .ART features ;2j 3/ 

• The Ada specifications of the Ada source code generated by the Ada generator. 

• The examples of the ART /Ad a main program. 

• The Ada package specifications of the ART/’Ada runtime system. 

• The Ada package specifications of the Booch Components [l] used to implement basic data 
structures such as list, string, etc. 


In Task 3, we will develop a comprehensive protocol for the analytic and empirical analysis of the 
performance characteristics of the specified algorithms, and implement in Ada the algorithms necessary to 
support the analytic and empirical analysis. This protocol will be compiled and provided in a deliverable 
report. , 

In Task 4, we will conduct the experiments and analysis defined in the protocol developed in Task 3, 
and will prepare a final report describing the results. To the extent that the results demonstrate the 
feasibility of redesign, we will include in this report suggestions for further specification of additional 
algorithms in a second design phase. 


o 



ART, ADA DESIGN PROJECT • PHASE I 


TASK 2 REPORT DETAILED DESIGN 


2. Ada Generator 

2.1 Introduction 

The Ada Generator is an Ada deployment option of ART-IM [3], and is an essential component of the 
ART/' Ada prototype. The generator will be written in C and linked with ART-IM. It should be invoked 
from the ART-IM command line after an ART program is loaded into ART-IM. Its output is an Ada 
source code which would be compiled and linked with the .ART/ Ada runtime system. In essence, the 
generated Ada code initializes the ART/Ada knowledge base data structures. 

In the following sections, the detailed design of the Ada generator will be described as C function 
definitions. The Ada specifications of the generated Ada code will be also shown. 


2.2 Invoking the Ada Generator 

The Ada generator traverses through the internal C data structures of ART-IM and generates the Ada 
code that will initialize the equivalent Ada data structures for ART/Ada at run time. 

The Ada generator can be invoked at the ART-IM prompt with the following command: 

(generate -ad a <filename>) 

where <file-name> is a string representing a file name or a stream. It returns T if succeeds and NIL if 
fails. 

An alternative way is to call a C function, a _ generate _ada: 

boolean a_generate_ada(output) 
art,_obJect output; 

where <file-name> is a string representing a file name or a stream. It returns non-zero if succeeds and 
zero if fails. 

This command will save only the current application, if the system is configured to run multiple 

applications concurrently. The user must switch to the desired application if another application than the 

* 

current one should be prepared for deployment. 


* 

Both ART-IM and ART/Ada are designed to support multiple ART applications and multiple users in a single inference engine 
executable image. 


3 


ART. ADA DESIGN PRO JECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


2.3 Ada, Source Code Generated by the A.da Generator 

The generated Ada code includes a procedure called IN'IT which initializes an application in the 
.ART/ Ada knowledge base. 


Below is the package specification generated by the Ada Generator for an application, 
.APPLICATION _ I 


4 


ART/ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 V. Century Blvd., 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: APPLICATION^ 

— Function: This package contains subprograms generated by the Ada Generator 

of ART-IM for an application. 

— State Variables: 

None 

— State Variable Initialization: 

Non t 

— Change Log: 


package APPLICATION^ is 

— Function: initializes an application in the ART/Ada knowledge base 
procedure INIT; 
end APPLICATION^!; 

In addition to generating a package specification for an application, the Ada generator also generates 


5 



art ADA DESIGN PROJECT ■ PHASE ! 


TASK 2 REPORT: DETAILED DESIGN 


the seperate procedure body for INTERPRETER _SUB.FUNCALL. This procedure is the top-level 
procedure called by the function call interpreter to call out to Ada subprograms. These Ada subprograms 
consist of those used internally by ART/ Ad a and those defined by the user. All user-defined Ada 
subprograms should be defined in the package LSER SLB. 


6 


ART/ ADA DESIGN PROJECT • PHASE I 


TASK -J REPORT DETAILED DESIGN 


3. ART/Ada Runtime System 

3.1 Introduction 

The .ART/' Ada runtime system is composed of Ada packages. These packages, when linked with the 
Ada code generated by the Ada generator, will yield an executable image tailored for one or more ART 
applications. 

In the following sections, the "with" interdependency of these packages will be depicted in a Booch 
diagram, and their package specifications will be included. 

In addition to these packages, some of the Booch Components [l] are used to implement basic data 
structures such as lists, strings, stacks, etc. The package specifications of these Booch Components will be 
also included. 


3.2 Booch Diagram of ART/Ada Runtime System 

The design of the ART/Ada runtime system follows the object-oriented design(OOD) methodology. 

The .ART/Ada packages are named based on the following postfix convention: 

• ADO - Abstract Data Object 

• ADT - Abstract Data Type 

• SUB - SUBroutines 

• DCL - DeCLarations 

The Abstract Data Object is a package that contains encapsulated data and operations (expressed as 
subprograms) performed upon that data. The data is static and local to that package. The data is 
known as State Data. 

The Abstract Data Type is a package that contains an abstract type and operations performed on that 
abstract type. The operations are expressed as subprograms and the abstract type is declared as the type 
of one or more parameters of the subprograms within the package. 

The package of subroutines is a package of logically related subroutines. There exists no encapsulated 
data in this package. 

The package of declarations is a package of logically related declarations. These declarations may be 
types, constants, or exceptions. 


7 



ART. ADA DESIGN PROJECT - PHASE [ 


TASK REPORT: DETAILED DESIGN 


The ART/Ada runtime system is composed of public Ada packages and internal Ada packages. The 
following is the list of public packages that can be with ed by the user: 

• .ART: This package is the top-level package that contains public functions that operate on 
ART/Ada. This package should be always with’ed by the user program. 

• ERROR _HDL_ SUB: This package contains subprograms for error handling, and the user 
can redefine the package body to customize the error handlers. 

• USER _ INTERFACE _ SUB: This package contains the command loop. This package is not 
necessary to with when the presence of the user interface is not needed (i.e. embedded 
applications). 


Other packages are with’ed only by the internal ART/Ada packages and should not be with’ed by me 
user. The following is the list of the internal packages: 

• LEX_ADO: This package contains a lexer for the command loop. It is with’ed only by the 

USER _ INTERFACE _ SUB package, and will not be included unless the 

USER _ INTERFACE _ SUB package is with’ed by the user. 

• PARSER_ADO: This package contains a parser for the command loop. It is with’ed only by 
the USER _ INTERFACE _ SUB package, and will not be included unless the 
USER _ INTERFACE _ SUB package is with’ed by the user. 

• STRUCT _DCL: This package contains declarations of the ART/Ada internal data types. 

• ART _ OBJECT _ SUB: This package contains subprograms that operates on the data type, 
ART_OBJECT. ART_OBJECT is the basic building block of ART facts. 

• DATABASE __ SUB: This package contains subprograms for the database management. 

• CALLIO_SUB: This package contains subprograms for the Ada call-in/call-out. 

• INFER_ENG_SUB: This package contains subprograms to run the inference engine. 

• INIT_SUB: This package contains subprograms to initialize .ART/Ada and is with’ed only by 
INFER _ ENG _ SUB. 

• GLOBAL _DCL: This package contains declarations of global data structures for applications 
and users. 

• SYSTEM_DCL: This package contains declarations of system variables. 

• 10 _ SUB: This package contains functions to support input and output. 

• PATTERN _ NET _ SUB: This package contains subprograms for the pattern network 
interpreter. 

• JOIN_NET_SUB: This package contains subprograms for the join network interpreter. 

• ART_OBJECT_UTIL_SUB: This package contains utility functions for handling 

.ART OBJECTS. 


3 



ART/ADA DESIGN PROJECT - PHASE [ 


TASK 2 REPORT DETAILED DE SION 


• AGENDA_SUB; This package contains subprograms for the agenda, 

• INTERPRETER _ SUB: This package contains subprograms for the function call interpreter. 

• .ALLOC _SUB: This package contains subprograms for the memory allocation. 

• MACRO __ SUB: This package contains subprograms that provides high-level access to fields of 
the internal data structures. These subprograms are in-lined using the pragma inline for 
better performance. 

• UI_ INTERNAL _ SUB: This package contains subprograms used by internal packages to 
print tracing information (e.g. watch facts). If the tracing information is not desired, its body 
can be stubbed out (i.e. Its subprograms could just contain null, or just return null or 
equivalent.). 

• MATH _ SUB: This package contains basic math programs that are used mainly by the rule 
left-hand side (e.g. +, -, *, /, =, >, <, etc.). 

• GC_SUB: This package contains subprograms that are used for garbage collection of 
ART _ OBJECTS. 

• COMPILER _SUB: This package contains data types and subprograms that are compiler- 
specific. The file name for this package varies depending on the compiler. For example, this 
package for the DEC Ada compiler is in the file, DEC_DCL_ .ADA. 

• LOGICAL _ SUB: This package contains subprograms for the logical dependency. The body 
of this package will be implemented later. 


3.3 Example Main Programs 

Two examples of the ART/Ada main programs are included in this section: one that includes the user 
interface, and one that does not. .Although the main program should be defined by the user for each 
application because the name of the package that contains the application specific procedures varies, it 
would be easy to modify the standard one supplied by the system. 

The following is an example of the main program that includes the user interface by calling the 
command loop: 


9 



ART, ADA DESIGN PROJECT • PHASE I 


TASK 2 REPORT DETAILED DESIGN 


with ART. USER_INTERFACE_SUB. ERRCR_HDL_SUB , APPLICATION^: 

procedure MAIN Is 

begin 

APPLICATION^ , INIT . 
r JSER_INTERFACE_SUB . CGMMAND_L00P ; 
exception 

when CONSTRAINT_ERROR => 

ERROR_HDL_SUB . PR0CESS_ERR0R (ERROR_HDL_SUB . CCNSTRAINT_ERR) ; 
when ?RCGRAM_ERRGR => 

ERR0R_HDL SUB . PR0CESS_ERR0R (ERROR_HDL_SUB PROGRAM_ERR) ; 
when STGRAGE_ERROR => 

ERRCR_HDL_SUB . PR0CESS_ERR0R (ERROR_HDL_SUB . STQRAGE_ERR) ; 
when TASKING_ERROR => 

ERROR HDL_SUB . PROCESS_ERROR(ERROR_HDL_SUB .TASKING_ERR) ; 
end MAIN;” 


This main program loads an expert system application called APPLICATION _ 1 , and prompts the 

for a command. The USER INTERFACE package is with ed to gain access to the command 

procedure. 

The following is an example of the main program that is tailored for an embedded application: 


with ART, ERROR_HDL_SUB . APPLICATION^ ; 

procedure MAIN is 

begin 

APPLICATION^ .INIT; 

ART . RESET ; 

ART . RUN_FOREVER ; 
exception 

when CONSTRAINT_ERROR => 

ERRCR_HDL_SUB . PR0CESS_ERR0R (ERROR_HDL_SUB . CONSTRAINT_ERR) ; 
when PROGRAM ERROR => 

ERROR_HDL_SUB . PR0CESS_ERR0R (ERRQR_HDL_SUB . PROGRAMMER) ; 
when ST0RAGE_ERR0R => 

ERR0R_HDL_SUB . PROCESS JERROR (ERROR_HDL_SUB . STORAGE JER) ; 
when TASKING_ERROR => 

ERROR_HDL_SUB . PROCESS_ERROR (ERROR_HDL_SUB . TASKING JER) ; 
end MAIN; 


This main program loads, resets, and runs an expert system application called APPLICATION_ 1. 
USER _ INTERFACE package is not with’ed by the main program, thereby reducing the size of the 
time executable image. 


user 

loop 


The 

run- 


10 


ART, ADA DESIGN PROJECT • PHASE I 


TASK 2 REPORT: DETAILED DESIGN 


3.4 Package Specification of the ART/Ada Runtime System 

3.4.1 Package Specification of ART 


11 


ART. ADA DESIGN PRO JECT • PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W . Century 31vd . , 

Los Angeles, California 90045, 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth In 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that Is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, he used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package : ART 

— Function: This package contains subprograms for the user to call into 

ART/Ada. This package is the top-level public package which 
contains all the operations on ART/Ada, This package should 
be always wlth’ed in the user’s program. 

— State Variables: 

None 

— State Variable Initialization: 

Non e 

— Change Log: 


with STRUCT DCL, ART 0BJECT_SUB, DATABASE_SUB , INFER_ENG_SUB , CALLI0_SUB, ALL0C_SUB; 
use STRUCT_DCL; 
package ART is 


-- Operations on ART objects 


12 


ART ADA DESIGN - PROJECT • PHASE I 


TASK 2 REPORT DETAILED DESIGN 


-- Returns a nev, permanent art^object reference to the ART object 
-- referred to by reference Reference may be either a permanent 
-- or automatically allocated art object. 


function REGISTER j\RT__0B JECT (REFERENCE : ARTJ3BJECT) return ART_CBJECT 
renames ART_CB JECT_SUB . REG I STER_ART_OB JECT ; 


Frees the permanent or temporary reference to an art object, 
it is an error to continue to use an art_object after freeing the 
— reference to it. 


procedure UNREGISTER_ART_OBJECT (REFERENCE : ARTJ3BJECT) 
renames ART_OBJECT_SUB . UNREG I STER_ART OBJECT; 


-- Returns TRUE if the two artjcbjects X and Y are the same object 
— EQ and EQUAL are equivalent. 


function EQ(X: ART_OBJECT ; 

Y: ART_O0 JECT) return BOOLEAN 
renames ART J3B JECT SUB.EQ; 


~ Returns TRUE if the two art_obj ects X and Y are the sane object 
— EQ and EQUAL are equivalent. 


function EQUAL (X: ARTJ3BJECT; 

Y: ARTJ3BJECT) return BOOLEAN 
renames ART_0B JECT_SUB . EQUAL ; 


Returns the type of an object, as a symbol. 


function TYPE J)F (OBJ: ART JD8 JECT) return ARTJDBJECT 
renames ART JDB JECT SUB^TYPE OF; 


A^GENTEMP : Creates a new, previously 
— unused symbol. 


function GENTEMPCSTR : STRING) return ART_OBJECT 
renames ART_OBJECT SUB .GENTEMP; 


Calls the Ada procedure PROCESS once for each permanent OBJECT 

— that has been allocated passing each permanent art_object 

— as the argument to PROCESS in turn. If PROCESS returns FALSE 

— at any time, then the iteration is terminated at that point. 


— generic 

with procedure PROCESS (THE_ITE3* : in ARTJ3BJECT; 

CONTINUE : out BOOLEAN); 
procedure FDR_ALL_PER_ART OBJECTS; 


— Returns an ART_OBJECT for the symbol resulting from performing a 
intern operation on the string str. Case is presered in str. 


function ART^SYMBOL (STR : STRING) return ART_QBJECT 
renames ARTJDBJECT SUB. ART SYMBOL; 


13 


art/ AD A DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


— Returns an ARTJDBJECT that represents the string specified. 

— Case is preserved . 

function ART_STRING (STR ; STRING) return ARTJDBJECT 
renames ART OBJECT_SUB . ART^STRING ; 


— Returns an ART_CB JECT that represents the number specified. 


function ART_ I N7EGER ( NUM : INTEGER) return ART_0B JECT 
renames ART OBJECT SUB. ART INTEGER; 


-- Returns an ART OBJECT that represents the number specified. 


function ART_FL0AT (NUM : FLOATJTYPE) return ARTJDBJECT 
renames ART CBJECT_SUB . ART^FLOAT; 


— Returns a STRING that Is the print name of the symbol. 


function ADA_SYMBOL (SYMBOL; ARTJDBJECT) return STRING 
renames ART OBJECT_SUB . ADA__SYMBOL ; 


— Returns a STRING that represents the ARTJDBJECT specified. 


function ADA_STRING (STR : ARTJDBJECT) return STRING 
renames ART OBJECT SUB. ADA STRING; 


— Returns the number represented by the ARTJDBJECT specified. 


function AD A_ I NT EGER (NUM: ARTJDBJECT) return INTEGER 
renames ART OBJECT SUB. ADA INTEGER; 


— Returns the number represented by the ARTJDBJECT specified. 


function ADA_FLQAT (NUM : ART_OBJECT) return FLOAT JTYPE 
renames ART OBJECT SUB . ADA_FL0AT ; 


— Predicates 


— Returns TRUE if the ART OBJECT, OBJ, is a symbol, otherwise FALSE. 


function SYMBOLPCOBJ: ARTJDBJECT) return BOOLEAN 
renames ART OBJECT SUB.SYMBOLP; 


— Returns TRUE if the ART OBJECT. OBJ, is a string, otherwise FALSE. 


function STRINGPCOBJ: ARTJDBJECT) return BOOLEAN 
renames ART OBJECT SUB.STRINGP; 


— Returns TRUE if the ART OBJECT, OBJ, is an integer, otherwise FALSE. 


function INTEGERPCOBJ; ARTJDBJECT) return BOOLEAN 
renames ART OBJECT SUB . INTEGERP ; 


14 


art; ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DETAILED DESIG 


— Returns TRUE If the ART OBJECT, OBJ, is a float, otherwise FALSE 


function FLOATP(QBJ: ART_OBJECT) return BOOLEAN 
renames ART OBJECT SUB . FLOAT? ; 


— Returns TRUE if the ART OBJECT, OBJ, is a number, otherwise FALSE. 


function NUMBERP (OBJ : ART_QB JECT) return BOOLEAN 
renames ART OBJECT SUB. NUMBERP; 


— Returns TRUE if the ARTJ3BJECT, OBJ, is a sequence, otherwise FALSE. 


function SEQUENCE? (OBJ: ART_OBJECT) return BOOLEAN 
renames ART_0B JECT_SUB . SEQUENCEP ; 


— Returns TRUE if the ART OBJECT, OBJ, Is a fact, otherwise FALSE. 


function FACTP(0BJ: ARTJDBJECT) return BOOLEAN 
renames ART OBJECT SUB.FACTP; 


— Fact and Sequence Manipulation 


— Returns the fact with fact number n. If no fact has that number, 

— returns NULL. 


function FIND_FACT (N : NATURAL) return ARTJDBJECT 
renames DATABASE SUB. FIND FACT; 


— Returns the fact number of fact. 


function FACT_NUMBER (FACT : ART_OBJECT) return NATURAL 
renames DATABASE^SUB , FACT_NUMBER ; 


— FOR_ALL_FACTS : Iterates over all the facts in the current database, calling a given 

— procedure once for each fact. 


— generic 

— with procedure PROCESS (THE_ITEM : in ARTJDBJECT; 

CONTINUE : out BOOLEAN); 

— procedure FOR_ALL_FACTS ; 


— Returns length of obj . 


function LENGTH (OBJ: ART OBJECT) return NATURAL 
renames ART OBJECT SUB. LENGTH; 


— Returns the position of the first occurrence of value In obj . If 

— value is not in obj, returns 0. 


function POSITION (VALUE: ARTJDBJECT; 

OBJ: ARTJDBJECT) return NATURAL 
renames ART OBJECT SUB . POSITION; 


15 






ART ADA DESIGN PROJECT • PHASE I 


TASK 2 REPORT DETAILED DESIGN 


— Returns TRUE if value is in obj, and FALSE otherwise. 


function MEMBER (VALUE : ART_OBJECT ; 

CBJ : ART_03 JECT) return BOOLEAN 
renames ART_OBJECT_SUB . MEMBER; 


— Returns the nth element of obj . 


function NTH (OBJ : ART_OBJECT; 

INDEX: NATURAL) return ART_0B JECT 
renames ART OB JECT^SUB . NTH ; 


— Fact and Sequence Creation 


— Constructs an "empty" fact template and returns a pointer to it as an 

— ART object which may later be asserted. It Is an error to assert a 

— template without Inserting something Into each of the size slots 

— allocated in it. All templates are permanent. Additionally they should 

— not be freed with unregister_art_obj ect , They should only be freed 

— with free_template 


function MAKE JTEMPLATE (SIZE: NATURAL) return TEMPLATEJTYPE 
renames CALLIO SUB . MAKE JTEMPLATE ; 


— This function sets the element of template specified by 

— index to be value. It is an error to attempt to modify a fact 

— not created with MAKE_TEMPLATE . The first element of the fact (the 
-- relation) is indexed by Index 1 . The other elements of the fact 

— have indices 2 through the length of the fact. 


procedure SET^NTH (TEMPLATE: in out TEMPLATEJTYPE; 
INDEX: in INTEGER; 

VALUE: in ARTJ3BJECT) 
renames CALLIO SUB . SET_NTH ; 


— Frees the TEMPLATEJTYPE template. It Is an error- to continue to refer to 

— template after freeing. 

procedure FREE JTEMPLATE (TEMPLATE : in out TEMPLATE_TYPE) 
renames CALLIO_SUB . FREE JTEMPLATE; 


— Asserts a fact from the contents of template into the ART database . 

— Template must be constructed using the functions and macros below 

-- prior to assertion. It is an error to assert a fact with an empty fact 

— slot. A template may be used for any number of assertions. 


function ASSERT (TEMPLATE : in TEMPLATEJTYPE) return ARTJOBJECT 
renames CALLIO SUB. ASSERT; 


— This function takes a template and returns a sequence matching the 

— template. The sequence returned will not incorporate or alter the 

— template . 

function SEQUENCE (TEMPLATE : in TEMPLATEJTYPE) return ART J3B JECT 
renames CALLIO SUB . SEQUENCE ; 


16 



ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


-- ART Control 


Retracts fact from the ART database. 


procedure RETRACT (FACT in out ARTJJBJECT) 
renames DATABASE SUB. RETRACT; 


— RESET: the purpose of this function is to reset the 

ART/Ada environment. The fact table is reset to the deffacts 
statements, the agenda is cleared, and the Join and pattern 
networks are reset. 


procedure RESET 

renames DATABASE SUB. RESET; 


— Function: Runs the inference engine (match-select-act cycle) LIMIT 
number of times. Continue to run until the agenda is 
empty, until the HALT Is encountered on the rhs of a rule, 
until a salience threshold is reached, or until a breakpoint 
is triggered. 

-- Parameters: LIMIT - Number of Inference engine cycles. (Or number of rules 
allowed to fire. 

>0 fire that many rules 

=0 then No rules fire 

= -1 then LIMIT := current default limit 

<= -2 fire until agenda becomes empty 


function RUN (RUN_LIMIT : in INTEGER) return INTEGER 
renames INFER ENG SUB. RUN; 


— Function: Also, this run procedure runs unless a halt is encountered on 
the right hand side of a rule or ART. HALT is called from Ada. 
The procedure does not halt when the agenda is empty but goes 
into an idle state and remains into that state until the 
assert or retract operation performed upon the database. 


procedure RUN_F0REVER 

renames INFER ENG SUB. RUN FOREVER; 


— Function: Complete the execution of all rhs actions of the current 
rule and halts the inference engine. 


procedure HALT 

renames INFER ENG SUB. HALT; 


— Function: It sets the asynchronous Ada function. 

The asynchronous function should be defined in the USER_SUB 
package. ART/Ada will intern this function and assign it 
a function ID. 


procedure SET_ASYNCH_FUN (FUN : STRING) 
renames INFER ENG SUB. SET ASYNCH FUN; 


17 



ART ADA DESIGN PROJECT - PHASE I 


TASK J REPORT. DETAILED DESIGN 


— Function: It returns the name of the asynchronous Ada function. 


function GET_ASYNCH_FUN return STRING 
renames INFER _ENG_SUB . GET_ASYNCH_FUN ; 


Returns the minimum salience below which rules may not fire. 


function GET_SALIENCE_THRESHQLD return SALIENCE_TYPE 
renames INFER ENG SUB. GET SALIENCE_THRESHGLD; 


— Set the minimum salience below which rules may not fire. The constant 

— min salience may be used to reset salience to the initial default. 

function S ET_SAL I ENCEJTHRESHOLD (SALIENCE: in INTEGER) return INTEGER 
renames INFER ENG_SUB . SET_SALIENCE_THRESHOLD; 


— Returns the default limit on rule firings for run. If the returned value 
-- is negative, the default is to let ART run indefinitely. 


function GET_L IM I T_DEF AULT return INTEGER 
renames INFER ENG SUB . GET_LIMIT_DEFAULT ; 


— Sets the default limit on rule firings for run. If limit is 

— negative, the default Is to let ART run indefinitely. 


function SET_LIMIT_DEFAULT (LIMIT : in INTEGER) return INTEGER 
renames INFER ENG SUB. SET LIMIT DEFAULT; 


— Returns a boolean that tells whether ART prints informational messages. 

— TRUE means they are printed; FALSE means they are suppressed. 


function GET_PRINT_MESSAGES return BOOLEAN 
renames INFER ENG SUB. GET PRI NT J4ES SAGES; 


— Controls whether ART prints informational messages. TRUE means 

— to print messages; FALSE to suppress printing of messages. 

— TRUE is the default. 


function SET_PRINT_MESSAGES (VALUE : BOOLEAN) return BOOLEAN 
renames INFER ENG SUB. SET PRINT_MESSAGES ; 


— Convert INTEGER to BOOLEAN. If 0, then FALSE. TRUE, otherwise. 


function I NTEGER_T0_B 00 LEAN (STATUS : INTEGER) return BOOLEAN 
renames CALLIO SUB. INTEGER TO BOOLEAN; 


— Convert BOOLEAN to INTEGER. If TRUE, then i. If FALSE, then 0. 


function B 00 LEAN_T 0 _INTEGER (STATUS : BOOLEAN) return INTEGER 
renames CALLIO SUB . B00LEAN_T0_INTEGER ; 


— Function: It frees a sequence. 


procedure FREE_SEQUENCE (X : in out ART_0BJECT) 
■ renames ALLOC SUB. FREE SEQUENCE; 


18 


ART/ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


end ART; 


3,4.2 Package Specification of ERROR _ HDL _ SUB 


19 



ART .ADA DESIGN PROJECT • PHASE I 


TASK -J REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W. Century Blvd., 

Lcs Angeles, California 90045. 

AN UNPUBLISHED VCRK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that Is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


-- Author: Jim Badura 

— Package: ERR0R_HDL_SUB 

— Function: This package contains a procedure that performs error 

recovery for internal ART errors. 

— State Variables: None 

— State Variable Initialization: None 

— Change Log: 

with STRUCT J)CL; 
use STRUCT J)CL; 

package ERR0R_HDL_SUB is 

type ERRCR^LOC is (LHS_L0C, RHS_L0C, T0PLEVEL_L0C, ASYNC_L0C) ; 

type ERR0R_TYPE is (CONSTRAINT_ERR , NUMERIC _ERR , PRGGRAM_ERR , ST0RAGE_ERR , 
TASKING_ERR , 

INTERNAL_ERR, RETRACT_ERR , INTERPRETER_ERR , 

USER DEFINED ERR) ; 


20 


ART. ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


INTERNAL_ERROR : exception; 

RETRACT_ERROR : exception; 

INTERPRE7ER_ERR0R : exception; — Error in the interpreter. 

USER OEFINED_ERRCR : exception; — The User can use this exception 


— Function: This procedure invokes the appropriate Ada routine for 
recovering from the current internal ART error. 

This procedure should he separate. 

-- Parameters: ERROR - The current error being handled 


procedure PROCESS_ERRQR (ERROR : in ERROR_TYPE) ; 


— Function: This procedure issues a warning message 
This procedure should be separate. 


procedure PROCESS_VARNING; 


— Function: This procedure stores an error message into a buffer 

so that the error message could be printed by PROCESS_ERRCR later. 

— Parameters: MESSAGE - The error message. 


procedure ERROR (MESSAGE: in STRING); 


— Function: This procedure store an warning message into a buffer 

so that the error message could be printed by PROCESS_VARNING, 

— Parameters: MESSAGE - The warning message. 


procedure WARNING (MESSAGE: in STRING); 
end ERROR HDL SUB; 


3.4.3 Package Specification of USER_INTERFACE_SUB 


21 



ART: ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W . Century 31 vd . , 

Los Angeles, California, 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth In 
Government Cooperative Agreement Number NCC- 
9-15 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that Is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: J. T. Badura 

-- Package: USER_INTERFACE_SUB 

— Function: This package contains subprograms that controls the user 

Interface. 

— State Variables: None 

— State Variable Initialization: None 

— Change Log: 


with LEX_AD0 , PARSER_AD0 ; 
package USER_INTERFACE_SUB is 

— Function: This procedure invokes the interactive ART/Ada command loop. 

This procedure will display the Initial banner and repeatly 
print the ART/Ada prompt for a ART command. 

-- The command loop should handle vatch/unwatch , reset, run, 

agenda, facts. 


procedure C0MMAND_L00P; 


22 



ART/ADA design PROJECT ■ PHASE I 


task j report detailed design 


end USER_INTERFACE_SUB; 


3,4,4 Package Specification of LEX_ADO 


23 


ART/ ADA DESIGN PROJECT - PRASE I 


TASK 2 REPORT DETAILED DE 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W . Century Blvd . , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author : James T. Badura 

— Package : LEX_AD0 

— Function: This package encapsulates objects necessary to perform lexical 

analysis upon the input stream. The Input stream is divided 
up mto a series of lexeme. The package also maintains the 
state of three state variables. 

— State Variables: 

BUFFER - The command line buffer 

BPTR - The buffer index 

CURR EDL - The current end of line 

— State Variable Initialization: 

— The state variables get initialized when GET_C0MMAND_LINE is 
called. Initialization Is as follows: 

BUFFERCl . .80) := (1 . . 80 => 1 ’) 

BPTR := 1 

CURR_E0L := LAST; (LAST is returned by TEXT_I0 .GET_LINE) 

-- Change Log: 

None 


with TEXT 10, STRUCT_DCL; 


24 


ART/ ADA DESIGN PROJECT - PHASE I 


task ■: report detailed design 


use TEXT_I0 , STRUCT JXX; 
package LEX_AD0 is 

type LEXEME_TYPE is (LEX_PERIOD , LEX_L_3RACKET , L£X_R_ BRACKET , LEX_L_PAREN , 

LEX_R_PAREN, LEX_EQUALS , LEX_LE5S_7HAN , LEX_GREATER_7KAN , 
LEX~L^3RACE , LEX_R_3RACE , LEX_ASTERISK , LEX_PLUS , LEX_MINUS , 
LEX_SLASH , LEX_BACK_SLASH , LEXJILDE , LEX^COMMA , LEX_C0LQN , 
LEX_SEMICOLON, LEX_AT_SIGN, LEX_LOGICAL_QR , LEX_LOGICAL_AND , 
LEX_NQT_EQUALS , LEX_LESS_THAN_OR_EQUAL , 
LEX_GREATER_THAN_OR^EQUAL , 

LEX_BREAK, LEX_UN_3REAK , LEX_VATCH, LEX_UN_VATCH, LEX_RESET , 
LEX_RUN , LEX^AGENDA , LEX_FACTS , LEX_HALT , LEX_EXIT, LEX_HELP , 
LEX_SYS7EM , LEX_RULES , LEX_MATCHES , LEX_ACTI VATIONS F 
LEX_STATUS , LEX_ALL , LEX_PRINT_MEMORY_USAGE, 

LEX_INTEGER , LEX_REAL , 

LEX IDENTIFIER, LEX CHAR STRING, LEX ERROR); 


subtype LEXJ3PERATOR is LEXEME_TYPE range LEX_PERIOD. . 

LEX_GREATER_THAN_OR_EQUAL ; 

subtype L EX_R ES ER VED_W 0 R D is LEXEME_7YPE range LEX^BREAK. . LEX_ALL; 

type LEXEME_ITEM_TYPE is 
record 

VAL: LEXEME JTPE; — Lexeme value 

STR: STR_PTR_TYPE; -- Lexeme string value 

end record; 


— Gets the next command line Into a character buffer of length BUFFER_SIZE- 
* Sets the state data (refer to state data for more details). 

procedure GET_NEXT_COMMAND_LINE; 

— Scans for the next lexeme 

procedure SCAN (LEX_ ITEM: in out LEXEME_ITEM_TYPE; 

EOL : out BOOLEAN) ; 

end LEX_ADO ; 

3,4.5 Package Specification of PARSER__ADO 


25 



art ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1S38 
INFERENCE CORPORATION, 

5300 W Century Blvd . , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: J. T. Badura 

— Package : PARS ER_ ADO 

— Function: This package contains subprograms necessary to perform a 

top-down recursive descent parsing of input commands of 
the user interface. 

— State Variables: 

CURR_LEXEME - Current lexeme being parsed 

NEXT LEXEME - The next lexeme (one lexeme look-ahead) 

PARSER_ERR0RS - An array of parser errors 

— State Variable Initialization: 

CURR LEXEME := first call of LEX. SCAN 
NEXT LEMEME := second call of LEX. SCAN 
PARSER_ERR0RS(1 . . PARSER_ERR0RS_SIZ) := null; 

— Change Log: 


with LEX_AD0 , AGENDA_SUB , DATABASE_SUB , INFER_ENG_SUB ; 
package PARSER_ADO is 

-- Function: This procedure parses a user interface command using a 

recursive descent algorithm. If an error is encountered, 
an error message Is written to the screen. 


26 



ART/ADA design PROJECT - PHASE I 


TASK -J REPORT DETAILED DESIGN 


procedure PARSE_A_CGMMAND ; 
end PARSER ADO. 


3.4.6 Package Specification of STRUCT_DCL 


27 


ART/ ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W. Century Blvd , , 

Los Angeles, California, 90045. 

AN UNPUBLISHED WORK ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


-- Author: S. Daniel Lee 

— Package : STRUCT_DCL 

— Function: This package contains declaration of data structures for 

the ART/Ada Kernel. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


— Ve are using a variable-length array as a main data structure for 

rules, LHS patterns, alpha-memory, etc. 

An example of a variable-length array, String is from Booch. 

— type Substring is array (Positive range <>) of Item; 

— type Structure is access Substring; 

— type String Is 

record 

The_Length : Natural : = 0; 


28 



ART, ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


The_Items : Structure ; 
end record; 

with TEXT_IO , List_Single JJnbounded_Managed , String_Sequential_Unbounded_Managed_Iterator , COMF1 
package STRUCT_DCL is 


ART DATABASE OBJECTS 


package CHARACTER J3TRING is new 

String Sequential_Unbounded_Managed_Iterator 

(ITEM => STANDARD . CHARACTER? 

SUBSTRING => STANDARD. STRING, 

*<■ => ■<■) ; 

subtype STR_PTR_TYPE is CHARACTER_STRING . STRING ; 

type STR_PTR_ARRAYJTYPE is array (POSITIVE range <>) of S7R_PTRJTYPE; 
subtype FLOAT JTYFE is COMPILER_SUB . INTERNAL_FLOATJTYP£; 
type FLOAT_ARRAYJTYPE is array (POSITIVE range <>) of FLOAT JTYPE; 
type SEQUENCE_TYPE ; 

type SEQUENCE__PTR_TYPE is access SEQUENCEJTYPE; 
type FACTJTYPE; 

type FACT_PTR_TYPE is access FACTJTYPE; 
type ELEMENT; 

type ARTJ3BJECT is access ELEMENT; 

type ART_OBJECT_PTRJTYPE is access ART_OBJECT ; 

— Instantiations of generic List package from Boocb components 

package ART_0B JECIJL I ST is new LIST_SINGLE_UNBOUNDED_HANAGED (ITEM => AR7JJBJECT) ; 

package INTEGER_LIST is new LI ST_S INGLE JJNBOUNDED_MANAGED (ITEM => INTEGER); 

subtype ART_OBJECT_LISTJTYPE is ART_QB JECTJ-IST . LIST ; 

subtype RULE_L I ST JTYPE is ART_0 B JECIJL I ST . L I ST ; 

subtype I NTEGER^LI ST JTYPE is INTEGER_L 1ST . LIST; 

subtype MATCH_L I ST JTYPE is INTEGERJ.IST. LIST; 

type GLOBALJ/ARIABLE is 
record 

NAME: ARTJ3BJECT; 

RULES: RULE_LI ST JTYPE ; 

VALUE: ARTJ3BJECT; 
end record; 

type GLOBAL_VARIABLE_PTR JTYPE is access GLGBALJ/ARIABLE; 


29 


ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


type FUNC_TYPE; 

type FUNC_PTR_TYPE is access FUNC_TYPE; 

type DATA ENUM TYPE is ( I NTEGER_ELEMENT , FLGAT_ELEMENT , FUN_DEF_ELEMENT , 

STR I NG_ELEMENT , SYMBCL_ELEMENT . STREAM_ELEMENT , 

SEQUENCE_F.LE.MENT , FACT_ELEMENT . 7AR_NAME_ELEMENT . 

GLCBAL_VAR_ELEMENT) , 

type DATA_SPEC (DATA_C0DE : DAT A_ENUM_TYPE ) is 
record 

case DA7A_C0DE is 

when I NTEGER_ELEMENT => INTEGER_VALUE INTEGER; 
when FLOAT_ELEMENT => FLOAT_VALUE : FLOAT_TYPE; 
when FUN_DEF_ELEMENT => FUN_DEF : FUNC_PTR_TYPE; 
when STRING_ELEMENT => STRING_VALUE: STR_PTR_TYPE ; 
when SYMBOL_ELEMENT => SYMBOL STR_PTR_TYPE; 

when STREAM_ELEMENT => STREAM : TEXT_I0 . FILE_TYPE; — Ada generic file_type 
when SEQUENCE_ELEMENT => SEQ : SEQUENCE_PTR_TYPE ; 
when FACT_ELEMENT => FACT: FACT_PTR_TYPE; 
when VAR_NAME_ELEMENT => VAR_NAME: ART_0B JECT ; 
when GLOBAL_VAR_ELEMENT => GLOBAL: GLo5aL_VARIABLE_PTR_TYPE; 
end case; 
end record; 

type DATA_SPEC_PTR_JYPE is access DATA_SPEC ; 

— The types of art-objects. 

type ELEMENT_TYPE Is ( I NTEGER_ELEMENT , FLOAT_ELEMENT, SYMBOL_ELEMENT . STRING_ELEMENT , 
STREAM_ELEMENT. SEQUENCE_ELEMENT , FACT_ELEMENT , FCALL_ELEMENT , 

BVAR_ELEMENT , BVARS_ELEMENT , NOTBVAR_ELEMENT , NOTBVARS_ELEMENT , 

TEMPLATE_ELEMENT , BVAR_DEF_INST_ELEMENT , BVARS_DEF_INST_ELEMENT . NOTBVAR_DEF_INST_ELEMENT , 
NOTBVARS_DEF_INST_ELEMENT , GLOBAL_VAR_ELEMENT , VAR r ABLE_ELEMENT . 

IO_BUFFER_ELEMENT, INTERNAL_ELEMENT) ; 

type ELEMENT is 
record 

KIND: ELEMENT_TYPE; 

P ER MA N ENT _ FLAG : BOOLEAN; 

MARKED_FLAG : BOOLEAN; 

HASH_INDEX : NATURAL; 

NEXT: ART_OBJECT; 

DATA: DATA_SPEC_PTR_TYPE ; 
end record; 

type ART_OBJECT_ARRAY_TYPE is array (POSITIVE range <>) of ARTJDBJECT; 
type ARTJ 3 BJECT_ARRAY_PTR_TYFE is access ART_OBJECT_ARRAY_TYPE ; 

type ART_GBJECT_STACK_TYFE is 
record 

SIZE : NATURAL := 0; 

STACK : ART_OBJECT_ARRAY_PTR_TYPE; 
end record; 

type I NTEGER_ARRAY_TYPE is array (POSITIVE range <>) of INTEGER; 
type INTEGER_ARRAY~PTR_TYPE is access INTEGER_ARRAY_TYPE; 
type I NT_STACK_TYPE is 
record 

SIZE : NATURAL := 0; 

STACK : I NTEGER_ARRAY_PTR_TYPE ; 
end record; 

type SEQUENCE_TYPE is 
record 

LENGTH: NATURAL := 0; 


30 



ART/ ADA DESIGN PROJECT * PHASE l 


TASK 2 REPORT DETAILED DESIGN 


REF_C0UNT : INTEGER; 

DATA: ART_08 JECT_ARRAY_PTR_TYPE, 
end record, 

subtype TEMPLATE_TYPE is SEQUENCE_PTR_TYPE; 


subtype FUNC_ID_TYPE is NATURAL; 

type CCDE_ELEMENT_TYPE is (BOXED_ELEMENT , OP_CCDE_ELEMENT , 

INDEX_ELEMENT, STRING_ELEMENT) ; 

type VALUERS P ECOTYPE is (ART_QB JEC7_ELEMENT , FLOAT ^ELEMENT , BOOLEAN_ELEMENT , 

I NT EGER_ ELEMENT , STR I NG_ ELEMENT) ; 

subtype INDEX_TYPE is INTEGER; 

type RULEINFO ; 

type RULEINFO_PTR_TYPE is access RULEINFO; 

type VALUE_SPEC is 
record 

KIND : VALUE_SPEC_TYPE; 

INDEX : INDEX_TYPE, 
end record; 


type VALUERS PEC_PTR_TYPE is access VALUE_SPEC; 

type VALUE_SPEC_ARRAY_TYPE is array (POSITIVE range <>) of VALUE_SPEC; 
type VALUE_SPEC_ARRAY_PTR_TYPE is access VALUE_SPEC_ARRAY_TYPE ; 

type QPjOODEJITPE Is (0P_BRANCH, 

— OP_BRANCH_IF_TRUE , 

OP_BRANCH_IF_FALSE, 

OP_PUSH_CONSTANT , 

OP_PUSH_VARIABLE , 

0P_P0P, 

OP_SAVE_VAR, 

0P_CALL, 

QP_ART_0B J_T0_INT r 
0P_ART_CB J_T0_ART_FL0AT , 

0P_ART_QB J_T0_C_FL0AT , 

CP_ART_FL0AT_T0 _C_FL0A7 , 

0P~ARTJ3B J_TO_ART~SYM , 
op jutTqb J_SYM_TO ~C_STR , 

GP_ART~ S YM_ T 0_ C _S TR , 

OP^ART’aB J _T0^ART_ ST R , 

0P~ART_0B J_STR_TO_C_STR , 

OP _ART_STR JTO_ c _ s TR , 

0P~ART”0BJ~T0jT0BJ , 

0 P_ART_0 B J~T Q_B 0 0 L , 

opIartIobAo.stream. 

oO^toJwtotj. 

OP_BOOL_TO_ART_OBJ , 

OP_C_OBJ TO_ART_OB J , 
op _c_float_t 0_ART_0B J . 

OP j: J^LQAT JTO JUH^FLOAT . 

0 P_ ART_FL 0 AT_T 0 _ART_0 B J . 

0P~C_5TR_TQ_ART_0BJ_SYM . 

0P_ART_$YM_T0_ART_0B J , 

0P_C STR_TO ART_SYM. 

0P_c’sTR_T0'aRT_0B J_STR , 

0P~ART_STR_T0_AR7_0B J , 

OP~C_STR_TQ_ART_STR , 

OP^STREAM JTO_ART_OB J , 

OP _ EXPAND~SEQUENCE , 


31 



art; AD A DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


CP_END , 

OP - GE T _ v AR_PA T _ s TACK, 
OP>T_VAR_PAT_VECTOR , 
0P_GET_VAR_J0 I M , 

0P_GET_F ACT_ATCM , 
GP_INIT_LGCAL , 

0P_ART_0B J_70_FACT , 
0P_FACT_7G_AR7_GB J , 
GPj r AS7_ASSER7, 
OP_PUSK_PAT_STACK , 
0P_PUSH_PAT_VEC7QR , 
GPJ’USlTjaiN, 
CP_P T JSH_FACT_A70M , 
0P_CALL_FL9AT , 
0P_PUSH_D0UBLE , 
QP_3RANCH_AG_7RUE , 
OF_BRANCH_BCOL_7RUE, 
CP_3RANCH_A0_FALSE , 

op~branch~bool _false . 

OP_SLGV_ASSERT, 

°P_ ART _ 0B J _ TC L SEGMENT . 

GP_SEGMEN7_70_AR7_CBJ , 
0P>7_7G_AR7>L0A7 , 
GP_IN7_70~C_FL0A7 , 
GP_C_FL0A7_70_IN7 , 
0P_AR7J r L0A7_70_INT , 
0P_EQ_CGNS7_VAR_A0, 
0P_EQ_C0NS7~STACK_AQ , 

op _eq_cons7_S7ack~floa7 , 
OP_EQ_CONST_STACK_LIT , 

QP~EQ J/AR_VAR_AQ , 
GP_EQJMR~S7ACK_A0 . 
CP_EQ_STACK_STACK_AO , 
0P_N0T_B00L_B00L , 
0 p _NDT_AG_B00 L J 

0P _ N0T _ B00L _ A0 ' 

0P_N07_A0_A0 , 
0P_B00L_70_AR7_SYM , 
OP_ART_SYM_TO_BGGL , 
0P_SAVE_GL0BAL , 
OP_START_TIME, 

QP_END_7IME, 

GP_CALL_DEFUN, 

OP_DEFUN_END , 

0P_PUSH_GL0BAL , 
op_open”segment, 

0P_SAVE_SP , 

aP_BRANCH_AND_POP_AQ_FRAME , 

op_set_ao”frame. 

OP_DEFSCHEMA, 

GP_SCHEMA_ASSERT, 

QP~SCHEMAJIE7RAC7. 

OP~SCHEHAJiaDIFY, 

OP BUILD SUBSEQ) ; 


for OP_CODE_7YPE use (OP_BRANCH => 1. 

OP_BRANCH_IF_TRUE => 2, 
0P_3RANCH_IF_FALSE => 3, 
0P_PUSH_C0NS7ANT => 4, 
OP_PUSH_VAR I ABLE => 5, 
OP_POP => 6, 

OP~SAVE_VAR => 8, 

OP CALL => 10, 


32 



ART. 'ADA DESIGN PROJECT - PRASE I 


task j report detailed design 


OP ART_0B J_T0_INT = > 11, 

OP I ART ^ OBJ _ TO _ ART _ FLOAT => 13 < 

OP^ART_OB J_T0_C_FL0AT => 15, 
0P_ A RT_FL0A T _ia_C_FL0A T =>17, 
op”art_obj_to_art_sym => 18. 
GP_AR7_CB J_SYM_TD~C_STR => 20. 
OP_ART_SYN_TQ_C_STR => 22, 
0P~ART_0B J_TO_ART_STR => 23, 

CP I ART _ 0BJ _ STR _ T0 _ C _ STR => 25 , 

OP_ART_STR_TO_C_STR => 27, 
0P~ART_0B J_TG_C_0B J => 28, 

OP I ART I OBJ I Ta I B ° OL => 30 ' 

0P_ART_0BJ_T0_STREAM => 31, 
0P~INT_T0_ART_0BJ => 32, 
OF”BOOL_TO_ART_OBJ =>33, 
GP_C_0BJ_T0_ART_0B J => 34, 
0P~c”FL0AT_T0_ART_aBJ => 35, 

0P I C I FL0AT _ T0 _ ART _ FL0AT =>36 ^ 
OP I ART - FLOAT -, TO _ ART - OBJ => 37 ' 

C p ~C_STR_TQ_ART_OBJ_SYM => 38, 
0P~ART_SYM_T0_ART_0BJ => 39. 
G p "c^STR_T0_ A RT_SYM => 40, 
0PjfSTRJT0~ART_QBJ_STR => 41, 
GP~ART_STR_TO_ART__CB J => 42, 
0P"C_STR_T0_ART_STR => 43, 
GP~STREAM_Ta_ART_GBi => 44, 
0P_EXP A ND_ SEQUENCE => 46. 
0P~END => 47, 

OP_GET_VAR_PAT_STACK => 48, 
OP~GET_VAR_PAT_VECTDR => 49, 
0P~GET_VAR_ JOIN => 50, 
OP~GET”fACT_ATOM => 51, 
DP_INI T _LOCAL => 53, 

0P_ART_0 B J_T0_F ACT => 55, 
OP_FACT_jrQ_ART__QBJ => 57, 
OP_FAST_ASSERT~=> 58, 
OP^PUSH^PAT^ STACK => 59, 
OP_PUSHJ s AT_VECTOR => 60, 
DP_PUSH_JOIN => 61, 
OP_PUSH_FACT_ATGM => 62, 
OP_CALL_FLOAT => 65, 
0P_PUSH_D0UBLE => 66, 
OP_BRANCH_AO_TRUE =>67, 
0P_BRANCH_B00L_TRUE => 68, 

0P_B RANCH AO FALSE => 69, 
0P~BRANCH~800L FALSE => 70, 
OP’SLOV ASSERT~=> 71. 
OP~ART_OBJjrO_SEGHENT => 72, 
OP~SEGMENT_TO_ART_0BJ => 73, 
CP~INT_TO_ART_FLGAT => 74, 

OP I INT I TO I C _ FLOAT => 75 ' 

OP C_FLOAT_TO_INT => 76, 

0 P~ART_FL 0 AT_T 0 _ I NT => 77, 
OP~EQ CONST VAR~AO => 78, 
OP_EQ”cONST~STACK_AO => 79, 

op_eq”const~stack~fldat => 80. 
op’eq~const~stack~lit => 81. 

OP~EQJ/AR_VAR_AO => 82, 
QP*EQ_VAR_STACK_AO => 83, 
OP~EQ~STACK_STACK_AO => 84, 
OP”nOT_BOOL~BOOL => 85, 
OP~NOT_AO_BOOL => 86, 
OP~NOT_BOOL_AO => 87. 

OP~NOT AO AO => 88, 


33 



ART; ADA DESIGN PROJECT - PHASE I 


TASK -2 REPORT; DETAILED DESK 


GP_BGOL_TO_ART_SYM =>89, 

0 P I ART - SYM _ Ta _ Ba0L => 90 ' 

OP_SAVE_GLQBAL => 91, 

OP_START_TIME => 92, 

OP_END_TIME => 93. 

OP_CALL_DEFUN => 94, 

QP_DEFUN_END =>95, 

CP_PUSH_GLOBAL => 95, 

OP~CPEN_SEGMENT => 97, 

0P_SAVE_SP => 98, 

OP_BRANCH_AND_POP_AO_FRAME =>99, 

0P_SET_A0_FRAME => 100, 

0P_DEFSCHEMA => 101, 

0P_SCHEMA_ ASSERT => 102, 

OP_SCHEMA_RETRACT => 103, 

OP_SCHEMA_MCDIFY => 104, 

OP_BUILD_SUBSEQ => 105); 

type C0DE_ELEMENT (ELEMENT_CGDE : CaDE_ELEMENTJTYPE) is 
record 

case ELEMENT _C0DE is 

when BOXED_ELEMENT => BOXED^GBJECT : ARTJ3BJECT; 
when S TR I NG_ ELEMENT => STRING J/ALUE : STR_PTR_TYPE; 
when 0 P_C 0 DE_ELEMENT => OP^CODE: OP _CODeJtYPE; 
when INDEX_ELEMENT => INDEX ; INDEX_TYPE; 
end case; 
end record; 

type COD E_EL EMENT _PT R_TYP E Is access CODE_ELEMENT ; 

type CGDE~ELEMENT_PTR_ARRAY_7YPE is array*CPOSITIVE range <>) of CODE_ELEMENT_PTR_TYPE; 
type CODE_ELEMENT_PTR_ARRAY__PTR_TYPE is access CODE_ELEMENT_PTR_ARRAY_TYPE ; 

— Contains the relocation information for the code_vector . 

— Index Is the location In the code vector that must be relocated. 

— Type Is the type of the object to be relocated, 
type REL0C_VECT0R is 

record 

INDEX : INTEGER; 

KIND : ELEMENT JIYPE; 
end record; 

type REL0C_VECT0R PTRJTYPE is access REL0C_VECT0R; 

type RELQC_VECTOR_ARRAY_TYPE is array (POSITIVE range <>) of REL0C_VECT0R ; 
type RELQC VECTOR_ARRAY_PTR_TYPE is access RELOCJ/ECTOR_ARRAY_TYPE; 

— The outer structure for a code vector. Points to the code_vector and 

— to the vector of relocation information. 

type ARTJ30DE is 
record 

CODE VECTOR : CODE_ELEMENT_PTR_ARRAY_PTR_TYPE ; 

RELOC VECTOR_VALUE : RELOC J/ECTCR j\RRAY_PTR_TYPE ; 
end record; 

type ART_C0DE PTRJTYPE is access ART_C0DE; 

— type ART CODE_ARRAY_TYPE is array(POSITIVE range <>) of ART_CQDE; 

— type ARTJOODE ARRAY_PTR_7YPE is access ARTj20DE_ARRAY_TYPE; 

type LOGIC is 
record 

LEFT_FACT : INTEGER; 

LEFT_ELEMENT : INTEGER; 

RIGHT^ELEMENT : INTEGER; 
end record; 


34 


ART/ ADA DESIGN PROJECT • PHASE I 


TASK 2 REPORT DETAILED DESIG 


type LOGIC_PTR_TYPE is access LOGIC; 

type LOGIC_ARRAY_TYPE is array (POSITIVE range <>) of LOGIC; 
type LOGIC~ARRAY_PTR_TYPE is access LOGIC_ARRAY_TYPE; 

type VAR_MATCH is 
record 

LENGTH : INTEGER, 

HATCHES ; L0GIC_ARRAY_PTR_7YPE ; 
end record; 

type VAR_MATCH_PTR_TYPE is access VAR_MATCH ; 

type VAR_MATCH_ARRAY_TYPE is array (POSITIVE range <>) of VAR_MATCH ; 
type VAR~MATCH_ARRAY_PTR_TYPE is access VAR_MATCH_ARRAY_TYPE ; 

type RELATION; 

type RELATION_PTR_TYPE is access RELATION; 

type TEST_FLAG_TYPE is (TEST_CONSTANT , TEST_EXPRESSION) ; 

type PARENT_NODE_TYPE is (RELATION_PARENT , PATTERN_NODE_PARENT) ; 

type PATTERN__NQDE (TEST^FLAG : TEST_FLAG_TYPE ; 

PARENTJHAG : PARENT_NODE_TYPE ; 

ST0P_FLAG : BOOLEAN) ; 

type PAT7ERN_N0DE_PTR_TYPE is access PATTERN_NODE, 

type RELATION Is 
record 

NAME: ART_OBJECT ; 

RESTRICTIONS : PATTERN_NQDE_PTR_TYPE ; 

NEXT: RELATION J>TRJTPE; 
end record; 

type RELATION_PTR_ARRAY_TYPE is array (POSITIVE range <>) of RELATI0N_PTR_7YPE ; 

type RULEINFO 0R_C0DE_ELEMENT TYPE is (RULEINFO_ELEMENT , ART CODE_ELEMENT) ; 
type RULEINF0_0R_C0DE_TYPE (FLAG : RULEINFO_OR_CODEJ*LEMENT_TYPE) Is 
record 

case FLAG is 

when RULEINFO_ELEMENT => RULE I NF0_ VALUE : RULEINFO_PTR_TYPE; 
when ART_CODE_ELEMENT => CODE_VALUE : ART_CODE_PTR_TYPE; 

end case; 
end record; 

type RULETNFU_OR_CODE_PTRjrYPE is access RULEINFO _OR_CDDE_TYPE; 
type J0IN_N0DE; 

type JOIN_NODE_PTR_TYPE is access J0IN_N0DE; 


— JQINNODE STRUCTURE: 

— up is a backward chain of join nodes. 

— down chains together the Join nodes that depend on this node; when 

— it’s zero, eval actually contains a rulelnfo structure for the rule 

— to fire . 


type J0IN_N0DE is 
record 

INITIAL_JOIN FLAG : BOOLEAN; 

POSITIVE^ J0IN_FLAG : BOOLEAN; 

— If this is a negative fact pattern, and the first 

— fact pattern in the rule, set the flag. 

LEADING JI0T_FLAG : BOOLEAN; 

DEPTH : "INTEGER; — The number of patterns processed before join 


35 


ART/ ADA DESIGN PROJECT * PHASE I 


TASK ■> REPORT DETAILED DESIGN 


HASH INDEX : INTEGER; 


EVAL; RULEINFG_GR_CGDE_PTR_TYPE ; 

-- An expression gathered from succeeding TEST constructs in the case of a NOT node 
— If the node is not a NOT node, then it is NULL. 

NOT TESTS ; ART_CODE_PTR_TYPE; 


MATCHLOGIC : VAR_HATCH_PTR_TYPE; 

RIGHT: JGIN_NODE_PTR_TYPE ; 

UP: JO I N_NODE_PTR_TYPE ; 

DOWN: JOIN_NODE_PTR_TYPE ; 
NEXT_ST0P :^JOIn'nODE_PTR - TYPE; 
ENTRY_PAT : PATTERNING DE_PTR JTYPE ; 
end record; 


variable length array 

— The joins on same level 
-- parent join 

— joins which depend on this node 

— list of join nodes feeding off a stop node 


type RHS_BIND; 

type RHS BIND_PTR_TYPE is access RHS_BIND ; 
type RHS~BIND_PTR_ARRAYJTYPE; 

type RHS_BIND_PTR_ARRAY_PTR_TYPE is access RHS_B I ND^PTR_ARRAY_TYPE ; 
type DEPENDENT; 

type DEPEND ENT_PTR_TYPE is access DEPENDENT, 

type DEPENDENT is 

record 

NEXT : DEPENDENT_PTR_TYPE; 

DATA : ARTJDBJECT ; 
end record; 

type ACTIVATION; 

type ACTIVATIGN_PTR_TYPE is access ACTIVATION; 

type PART_MATCH (LAST_J0IN : BOOLEAN) ; 

type PART_MATCH_PTR__TYPE is access PART__MATCH; 

type PART_MATCH_PTR_ARRAY_7YPE is array (POSITIVE range <>) of PART_MATCH_PTR_TYPE ; 
type PART_MATCH_PTR_ARRAY_PTR_TYPE is access PART_ttATCH_PTR_ARRAY_TYPE ; 
type PART_MATCH (LAST_J0IN : BOOLEAN) is 
record 

COUNT: INTEGER; 

DEPENDENTS: DEPENDENT_PTR_TYPE ; 

JOIN: JO I N_NODE_PTR_TYPE ; 

NEXT : PART_MATCH_PTR_TYPE ; 

B I ND_LENGTH : NATURAL ; 

BINDS : RHS_BIND_PTR_ARRAY_PTR_TYPE; 
case LAST_J0IN is 

when TRUE => ACT : ACT I VAT I ON_PTR_TYPE := null; 
when FALSE => null; 
end case; 
end record; 

type LQG_SUPPORT; 

type LOG_SUPPORT_PTR_TYPE is access L0G_SUPP0RT; 

— LOGICAL SUPPORT STRUCTURE 

— List of joins supporting a fact 
type L0G_SUPP0RT is 

record 

SUPPORT: PART_MATCH_PTR_TYPE; 

NEXT: LOG_SUPPORT_PTR_TYPE ; 
end record; 


— PATTERN NODE: This data structure describes the actions and characteristics of 

— the pattern network. It contains instructions for exactly what actions should 

— be performed at that node and what Iclnd of node it Is. 


36 


ART. ADA DESIGN PROJECT - PHASE I 


TASK •; REPORT DETAILED DESIGN 


type TEST_NODE_TYPE (TEST_FLAG : 7EST_FLAG_TYPE) Is 
record 

case TEST_FLAG is 

-- A constant to ba tested against 

when TESTjCGNSTANT => CONST ANT_ V A L 'J E ART_OBJECT; 

— A code vector to be interpreted for the result, 
when TEST^EXPRESSIGN => EXPRESSION ART_CODE_PTR_TYPE ; 

end case; 
end record; 

type PARENT JTYPE (PARENT^FLAG : PARENT_NODE JTYPE) is 
record 

case PARENT_FLAG is 

— The relation for a fact START node. 

when RELATICN_PARENT => RELATION : RELATION_FTRJTYPE; 

— The immediate mother pattern node. 

when PATTERN_NODE_PARENT => UP : PATTERN_NODE_PTR_TYPE ; 
end case; 
end record; 

type PATTERN_NODE(TEST_FLAG : TEST_FLAG_TYPE ; 

?ARENT_FLAG : PARENT_NODEJTYPE ; 

ST0P_FLAG : BOOLEAN) is 
record 

TYPE_SINGLE_FLAG : BOOLEAN; — These four mutually exclusive 
TYPE_MULT I PLE_FLAG : BOOLEAN; 

TYPE_EHPTY_FLAG : BOOLEAN; — if this node is only an into or out node 

ACTION^INTO^FLAG : BOOLEAN; 

ACTI0NJDUT_FLAG : BOOLEAN; 

ACTION_SAME_FLAG : BOOLEAN; 

ACTION_NEXT_SLQT_FLAG : BOOLEAN; 

ACTION_NEXT_VARIABLE^SLOT^FLAG : BOOLEAN; 

TES T__N 0 TH I NG_FLAG : BOOLEAN; 

BIND_FLAG : BOOLEAN; 

LEFT : PATTERN_NODE_PTR JTYPE ; — The sister to the left. 

RIGHT PATTERNING DE_PTR_TYPE ; — The sister to the right. 

TEST_N0DE : TEST JJODE JTYPE ( TEST_FLAG ); 

PARENT: PAAENT_TYPE( PARENT_FLAG ); 

case ST0P_FLAG Is 

— The start of the daughter chain. 

when FALSE => DOWN : PATTER N_NODE_PTR_TYPE ; 

— A list of those Join nodes feeding off of this STOP node, 
when TRUE => PATH : JOIN_NODE_PTRJTYPE; 
end case; 
end record; 

type PAT_REF; 

type P AT JtEFJPTR JTYPE is access PAT_REF; 

type PAT~REF~is ~ 

record 

PAT : PATTERN_NODE_PTR JTYPE; 

NEXT ; PAT REF PTR TYPE; 


37 



ART.' ADA DESIGN PRO JECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


end record; 
type J0IN_REF; 

type JOIN_REF_?TR_TYPE is access J0IN_REF; 

type JOIN_REF is 

record 

PATH : JOIN_NODE_PTRJTYPE; 

NEXT : JO I N_REF_PTR_TYPE ; 
end record. 


— RHS_BIND; What ART/LISP calls an - Instantiation V this 

— describes the items that were used in a particular 

— output of the fact pattern net. 


type RHS_BIND is 
record 

LAST_PAT_NODE : PATTERN_NODE_PTR_TYPE ; 

NEXT : RHS_8IND_PTR_TYPE; 

ITEM_LENGTH : INTEGER; 

ITEMS : ART_0B JECT_ARRAY_PTR_T YPE ; 
end record; 

type RHS_BIND_PTR_ARRAY_TYPE is array (POSITIVE range <>) of RKS_BINDJ 5 TRJTYPE; 

type FACT_TYPE Is 
record 

ID: NATURAL;' 

BIND_LIST : RHS_B IND_PTR JTYPE ; 

SUPPORT: LOG_SUPPORT_PTR_TYPE ; 

PROPOSITION: ART_0B JECT ; 
end record; 


FUNCTIONS 


type TEST_TYPE; 

type TEST_PTR_TYPE Is access TEST_TYPE; 

type TEST-TYPE Is 

record 

VALUE: ART_0B JECT ; 

ARG_LIST: TEST_PTR_TYPE ; 

NEXT_ARG: TEST_PTR_TYPE ; 
end record; 

type PARAMETER; 

type PARAMETER_PTRJTYFE is access PARAMETER; 

type PARAMETER is 

record 

ARG_TYPE : ART_0B JECT ; 

CLASS: ART_OBJECT; 

NEXT: PARAMETER_PTRJTYPE; 

OPTIONAL: TEST_PTR_TYPE ; 
end record; 

type FUNC_TYPE is 
record 

ID: FUNC_ID_TYPE ; — Function ID 

ART_NAME: ARTJDBJECT ; — ART function name 

ADA NAME: ART OBJECT; — Entry point name 


38 


ART ADA DESIGN' PRO JECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


RET_TYPE: ART_OBJECT ; 

DEFUN: ART_CODE_PTR_TYPE, 

. PAftAHS: PARAMETER_PTR_TYPE; 
MIN_ARGS: ART_09 JECT ; 
MAX_ARGS: ARTJ5BJECT; 
end record. 


— Return data type 

— Function parameters 

— Minimum number of parameters 

— Maximum number of parameters 


RULES 


subtype SALIENCE_TYPE is integer range -10000 .. 10000; 

type RULEINFO is 
record 

NAME: ART_0B JECT ; 

DOC_STRING : ART_QB JECT ; 

BREAKPGINT_SET 7 BOOLEAN; 

— if i, this is the original rule; 

— if not, one of the OR derivatives 
C0PY_ NUMBER: POSITIVE; 

SALIENCE: 5ALIENCE_TYPE; 

SALIENCE jGODE: ART_CODE_PTR JTYPE ; 

rhs_codeT artjtode^ptrJtpeT 

JOIN_NODE : JOIN_NODE_PTRJYPE; 

L0GICAL_J0IN: JOIN_NODE_PTR_TYPE; 

NEXT: RULEINFaj>TRjnrPE; 
end record; 


ACTIVATION 


type ACTIVATION is 
record 

RULE: RULEINFO_PTR_TYFE ; 

BINDINGS: PART_MATCH_PTR_TYPE ; 

SALIENCE: SALIENCE TYPE; 

NEXT: ACTIVATION PTR_TYPE; 

PREV: ACTIVATIOjfPTRJTYPE; 
end record; 

— DEFFACT STRUCTURE: Stores lnfonnation about a deffacts construct. 

Name: The name of the deffacts construct. 

Description: The string describing the deffacts construct. Used 

— after the deffacts name. 

Fllst: Pointer to the list of facts defined by this 

deffacts construct. 

Next: Pointer to the next deffacts definition structure, 

type DEFFACT; 

type DEFFACT_PTR_TYPE is access DEFFACT; 

type DEFFACT is 

record 

NAME: ART_0B JECT ; 

DESCRIPTION: ARTJ3BJECT ; 

FLIST: ART OBJECT LIST TYPE; 


39 


ART; ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


NEXT: DEFFACT_PTR_TYPE; 
end record; 

end STRUCT DCL; 


3.4.7 Package Specification of ART_ OBJECT_ SUB 


40 


ART ADA DESIGN PROJECT • PHASE I 


task j report detailed design 


COPYRIGHT NOTICE 

t) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W. Century Blvd., 

Los Angeles, California 90045. 

AM UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984} 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing tod Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package; ART_0BJECT_SUB 

— Function: This package contains subprograms necessary to manage 

the ART/Ada objects. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 

Author Date Change 

jtb 09/14/88 Added function GET_SYM80L_GL0BAL_VAL 


with STRUCT_DCL ; 

use STRUCT_DCL; 

package ART_0BJECT_SUB is 


41 


ART, ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


— Operations on ART objects 


-- Returns a new, permanent art_object reference to the AR, object 

referred to by reference. Reference may be either a permanent 

-- or automatically allocated art_object. 


function REGISTER ART OBJECT (REFERENCE : ARTJDBJECT) return ARTJDBJECT; 


-- Frees the permanent or temporary reference to an artjnbject; 

-- it is an error to continue to use an art_ob}ect after freeing the 
— reference to it. 

procedure UNREGISTER_ART_OB JECT (REFERENCE : ARTJDBJECT) ; 


-- Returns TRUE if the two art_ob]ects X and Y are the same object 
-- EQ and EQUAL are equivalent. 


function EQ(X: ART_OBJECT; 

Y: ART OBJECT) return BOOLEAN; 


-- Returns TRUE if the two art_cbjects X and Y are the same object. 
— EQ and EQUAL are equivalent. 


function EQUAL (X; ARTJDBJECT; 

Y: ART~OBJECT) return BOOLEAN; 


-- Returns the type of an object, as a symbol, 
function TYPE OF (OBJ: ARTJDBJECT) return ARTJDBJECT ; 


— Returns an ARTJDBJECT for the symbol resulting from performing a 

— intern operation on the string str. Case is presered in str . 

function ART_SYMBOL (A_STR : STRING) return ARTJDBJECT ; 


-- Returns an ARTJDBJECT that represents the string specified. 
— Case is preserved. 

function ART_STRING (A_STR : STRING) return ARTJDBJECT; 


— Returns an ARTJDBJECT that represents the number specified, 
function ART INTEGER (NUM: INTEGER) return ARTJDBJECT ; 


— Returns an ARTJDBJECT that represents the number specified, 
function ART FLOAT (NUM : FLOATJTYPE) return ARTJDBJECT ; 


— Returns a STRING that is the print name of the symbol, 
function ADA SYMBOL (SYMBOL : ARTJDBJECT) return STRING; 


42 


ART. ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


— Returns a STRING that represents the ART_OBJECT specified. 


function ADA STRING (STR : ART_0B JECT) return STRING; 


— Returns the number represented by the ART_03JECT specified. 


function ADA_ INTEGER (NUM : ART OBJECT) return INTEGER; 


— Returns the number represented by the ART_OBJECT specified. 


function ADA_FLGAT (NUM : ARTJDBJECT) return FLOAT TYPE; 


— Returns length of obj . 


function LENGTH (OBJ; ART OBJECT) return NATURAL; 


— Returns the position of the first occurrence of value In obj . If 

— value is not in obj, returns 0. 


function POSITION (VALUE; ART_0BJECT ; 

OBJ; ART OB JECT) return NATURAL; 


— Returns TRUE if value is in obj, and FALSE otherwise. 


function MEMBER (VALUE; ARTJ3BJECT; 

OBJ: ART_QBJECT) return BOOLEAN; 


— Returns the nth element of obj . 


function NTH (OBJ: ARTJJBJECT; 

INDEX: NATURAL) return ART OBJECT; 


— Predicates 


— Returns TRUE If the ART_0BJECT, OBJ, is a symbol, otherwise FALSE. 


function SYMBOLP (OBJ : ART OBJECT) return BOOLEAN; 


— Returns TRUE if the ARTJ3BJECT, OBJ, is a string, otherwise FALSE. 


function STRINGPCOBJ: ART OBJECT) return BOOLEAN; 


— Returns TRUE if the ART_OBJECT, OBJ, is an integer, otherwise FALSE. 


function INTEGERP(OBJ : ART OBJECT) return BOOLEAN; 


— Returns TRUE if the ART OBJECT, OBJ, is a float, otherwise FALSE. 


function FLOAT? (OBJ : ART OBJECT) return BOOLEAN; 


— Returns TRUE if the ART OBJECT, OBJ, is a number, otherwise FALSE. 


43 











ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


function NUMBERP COB J : ARTJ5BJECT) return BOOLEAN; 


-- Returns TRUE if the ART_0B JECT , OBJ, is a sequence, otherwise FALSE. 


function SEQUENCE? (OBJ : ARTJ3BJECT) return BOOLEAN; 


-- Returns TRUE if the ART OBJECT, OBJ. is a fact, otherwise FALSE. 


function FACTPCOBJ: ART OBJECT) return BOOLEAN; 


— HASHING SUBPROGRAMS 


— FIND_SYMBOL : Searches for the string in the hash table. If the 

string is already in the hash table, then the address of the 
string is returned. Otherwise, NULL is returned. 


function FIND SYMBOL (STR : STR PTR TYPE) return ART OBJECT; 


-- inlt_hash: Purpose is to initialize the hash tables to NULL 


procedure INIT_HASH; 


— HASH: Computes the hash table location for the given string. 


function HASH (VALUE: NATURAL; 

TABLE LENGTH : INTEGER) return INTEGER; 


— AO HASH: Hashes an ART OBJECT. 


procedure A0_HASH( CODE : INTEGER; 

ADDR : ART OBJECT) ; 


function PART_MATCH_RIGHT_HASH (RHS_BIND 

JOIN 

MAT 

function PART_MATCH_LEFT_HASH (RHS_BIND 

JOIN 

MAT 


in RHS_BIND_PTR_TYPE ; 

in J 0 1 N_NODE_PTR_TYPE ; 

in VAR_MATCH_PTR_TYPE) return NATURAL; 

in RHS_BIND_PTR_ARRAY_PTR_TYPE ; 

in join_node_ptr_type7 

in VAR MATCH PTR TYPE) return NATURAL; 


— miscellaneous subprograms 


— A_FREE_SEQUENCE : Decrements a sequence's reference count and deallocates the 

— sequence if the reference count goes to 0 (unused sequence.) 


procedure FREE_SEQUENCE (SEQ : ART_OBJECT) ; 


— A_GENTEMP: Creates a new, previously 

— unused symbol . 


function GENT EMP (STR : STRING) return ART OBJECT; 


44 


ART/ADA DESIGN PROJECT - PHASE I 


TASK -2 REPORT DETAILED DESIGN 


— SEQ LIST_INTERN : Takes a list of art-object references and nondestructive Ly copies it 

— into an interned sequence 

function SEQ_LIST_INTERN (SEQ_ITEM_LIST : ART_OBJECT_LISTJTPE) return ART^OBJECT; 


— SEQ_INTERM : Interns a sequence of art-objects into the sequence hash table Maintains 

— the reference counts of the sequences for garbage collection and freeing. 


function SEQ_INTERN( VECTOR: ARTJ3B JECT_ARRAYJ J TRJTYPE; 
OFFSET: INTEGER; 

LENGTH: INTEGER) return ART OBJECT; 


— SEQ INTERN: Interns a sequence of art-objects into the sequence hash table. Maintains 

— the reference counts of the sequences for garbage collection and freeing. 


function SEQ_INTERN (VECTOR: CODE_ELEMENT_PTR_ARRAY^PTR^TYPE ; 
OFFSET; INTEGER; 

LENGTH: INTEGER) return ART OBJECT; 


— SYMBOL_INTERN : Interns a symbol into the sequence hash table. Maintains 

— the reference counts of the sequences for garbage collection and freeing. 


function SYMBOL INTERN (SYMBOL : ART_OBJECT) return ART OBJECT; 


— GET_SYMBOL_GLOVAL_VAL : Returns the global variable associated with the 

symbol given, returns null if no global variable 
exists with that name . 


function GET_SYMBQL_GLQBAL_VAL (NAME : ART_QBJECT) return ART_OBJECT; 
end ART OBJECT SUB; 


3.4.8 Package Specification of DATABASE_SUB 


45 


ART. ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DETAILED DESIGN 


COPYRIGHT notice 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

53C0 V . Century Blvd . , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lalce and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that Is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package : DATABASE_SUB 

— Function: This package contains subprograms necessary to manage 

the ART/Ada database. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 

9-14-8Q SDL - add offset to seq_intern as the second argument. 


with STRUCT_DCL; 
use STRUCT_DCL; 
package DATABASE_SUB is 


— RESET: the purpose of this function is to reset the 

ART/Ada environment. The fact table is reset to the deffacts 
statements, the agenda is cleared, and the join and pattern 


46 



ART ADA DESIGN PROJECT - PHASE I 


TASK J REPORT. DETAILED DESIGN 


networks are reset 


procedure RESET; 


-- RKV 0LD_FACTS: Returns facts that have been retracted to the 

pool of available memory. It is necessary to postpone 
returning the facts to memory because rhs actions retrieve 
their variable bindings directly from the fact data structure. 


procedure RMV_OLD_FACTS ; 


— RETRACT: A public function to retract a fact. 


procedure RETRACT (FACT : in out ART_OBJECT) ; 


— FI_ND_FACT : 

— The function find_fact finds a fact with a given id number. 


function FIND FACT(ID: INTEGER) return ART OBJECT; 


— FACT_NUMBER : 

— The function fact^number returns a fact id number given a fact. 


function FACT NUMBER (FACT : ART OBJECT) return NATURAL; 


— FACTS: Prints out a list of the current facts 

— to the screen, in sorted order and with a 

— sum of the total current facts. 


procedure FACTS; 


— ENTER FACT: Puts a fact into the data base and sends it through the networks 


function ENTER FACTCPROPOSITION : ART OBJECT) return ART OBJECT; 


— REMOVE_RHS_BIND : Removes a RHS bind and updates the sequence reference 
counts of its items. 


procedure REMOVE_RHS_BIND(THIS_BIND : in out RHS_BIND_PTR_TYPE) ; 
end DATABASE SUB; 


3.4.9 Package Specification of CALLIO_SUB 


47 


ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT CC) 1988 
INFERENCE CORPORATION, 

5300 V. Century 31 vd . , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-15 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that Is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package : CALLI0_SUB 

— Function: This package contains subprograms necessary to support 

call-in. 


— State Variables : 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL; 
use STRUCT_DCL; 
package CALLI0_SUB is 


— Constructs an "empty* fact template and returns a pointer to it as an 

— ART object which may later be asserted. It is an error to assert a 
-- template without inserting something into each of the size slots 


48 


ART/ADA design PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


— allocated in it. All templates are permanent. Additionally they should 

— not be freed with unregister_art_ob j ect . They should only be freed 

— with f ree_template 


function MAKE TEMPLATECSI2E : NATURAL) return TEMPLATE TYPE; 


— This function sets the element of template specified by 

— index to be value. It Is an error to attempt to modify a fact 

— not created with MAKE_TEMPLATE The first element of the fact (the 

— relation) is indexed by index 1 . The other elements of the fact 

— have indices 2 through the length of the fact. 


procedure SET_NTH (TEMPLATE: in out TEMPLATE_TYPE ; 
INDEX: in INTEGER; 

VALUE: in ART OBJECT); 


— Frees the TEMPLATE_TYPE template. It is an error to continue to refer to 

— template after freeing. 

procedure FREE_TEMPLATE (TEMPLATE : in out TEMPLATE_TYPE) ; 


— Asserts a fact from the contents of template into the ART database. 

-- Template must be constructed using the functions and macros below 

— prior to assertion. It is an error to assert a fact with an empty fact 

— slot. A template may be used for any number of assertions. 


function ASSERT (TEMPLATE; in TEMPLATE TYPE) return ART OBJECT; 


— This function takes a template and returns a sequence matching the 

— template. The sequence returned will not incorporate or alter the 

— template. 


function SEQUENCE (TEMPLATE: in TEMPLATE TYPE) return ART OBJECT; 


-- Convert INTEGER to BOOLEAN. If 0, then FALSE. TRUE, otherwise. 


function INTEGER TO BOOLEAN (STATUS : INTEGER) return BOOLEAN; 


— Convert BOOLEAN to INTEGER. If TRUE, then 1. If FALSE, then 0. 


function B00LEANJT0_INTEGER (STATUS : BOOLEAN) return INTEGER; 
end CALL 10 SUB; 


3.4.10 Package Specification of INFER_ENG_SUB 


49 





ART. ADA DESIGN PROJECT - PHASE I 


TASK ‘J REPORT DETAILED DE5IG 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1968 
INFERENCE CORPORATION, 

5300 W. Century Blvd., 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - * ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

'Jse, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC* 

9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 0i5 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: J. T. Badura 

— Package : INFER_ENG_SUB 

— Function: This package contains subprograms that control functions 

, of the inference engine. 

-- State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL; 
use STRUCT_DCL; 
package INFER_ENG SUB is 

— Function: This procedure initializes ART. This procedure is called 
before any other ART procedures. 


procedure INIT; 


— Function: Runs the inference engine (match-select-act cycle) LIMIT 
number of times. Continue to run until the agenda Is 


50 


ART/ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DETAILED DESIGN 


empty, until the HALT Is encountered on the rhs of a rule, 
until a salience threshold is reached, or until a breakpoint 
is triggered, 

-- Parameters: LIMIT - Number of inference engine cycles. (Or number of rules 
Returns the number of rules fired, 
allowed to fire. 

>0 fire that many rules 

=0 then No rules fire 

= -l then LIMIT := current default limit 
<= -2 fire until agenda becomes empty 


function RUN (RUN_LIMIT : in INTEGER) return INTEGER; 


— Function: Also, this run procedure runs unless a halt is encountered on 
the right hand side of a rule or ART. HALT is called from Ada. 
The procedure does not halt when the agenda is empty but goes 
into an idle state and remains into that state until the 
assert or retract operation performed upon the database . 


procedure RUN_F0REVER; 


— Function: It sets the asynchronous Ada function. 

The asynchronous function should be defined in the USER_SUB 
package. ART/Ada will Intern this function and assign It 
a function ID. 


procedure SET_ASYNCH_FUN (FUN : STRING); 


— Function: It returns the name of the asynchronous Ada function. 


function GET ASYNCH FUN return STRING; 


— Function: Returns the current salience threshold; any rules with 
salience below this threshold are prevented from firing. 


function GET_SALIENCE_THRESHOLD return SALIENCETYPE; 

— Function: Sets the mimimun salience threshold. 

— Parameters: SALIENCE - Set the salience threshold to the value of this 

parameter 

*7 Returns the old salience threshold. 


function SET SALIENCE THRESHOLD (SALIENCE: in INTEGER) return INTEGER; 


— Function: Returns the default limit on rule firings for RUN. 


function GET LIMIT DEFAULT return INTEGER; 


— Function: Sets the default limit on rule firings for run. 
Returns the old run default limit. 


function SET LIMIT DEFAULT (LIMIT : in INTEGER) return INTEGER; 


51 



ART ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DETAILED DE 


-- Function: Returns a boolean value indicating whether ART/Ada will 

print informational messages. A True value indicates that 
the messages will be printed; False means that the messages 
vill te suppressed The value of PRIN7_MESSAGE^FLAG is read. 


function GET_PRINT_MESSAGES return BOOLEAN; 


-- Function; This procedure sets the value of PRINT_MESSAGE_FLAG , a 
state variable that controls the printing of messages. 

If PRINT_MESSAGE_FLAG is True then messages will be printed 
If PRINT_MESSAGE_FLAG is False then messages will be 
suppressed. 

-- Parameters: VALUE - The procedure sets P R I NT_M ES S AGE_FL AG to VALUE 
(True or False) 


function SET PRINT_MESSAGES (VALUE : in BOOLEAN) return BOOLEAN; 


— Function: Complete the execution of all rhs actions of the current 
rule and halts the inference engine. 


procedure HALT; 
end INFER ENG SUB; 


3.4.11 Package Specification of INIT_SUB 


52 


ART/ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT CC) 1988 
INFERENCE CORPORATION, 

5300 W. Century Blvd,, 

Los Angeles, California 90C45. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation , 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secret s and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: J. T . Badura 

— Package: INIT_SUB 

— Function; This package contains subprograms that initialize ART. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


package INIT_SUB is 

— Function: Initialize the two major data structures: 
CURJJSER and CUR_APPL. 

procedure INIT_GL0BALS ; 

— Function: Initializes ART/Ada 
procedure DQjGLEAR; 
end INIT SUB; 


53 



ART. ADA DESIGN PROJECT • PHASE I 


TASK J REPORT DETAILED DESIGN 


3.4.12 Package Specification of GLOBAL _DCL 


54 


ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 V. Century Blvd., 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure Is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-15 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package : GLQBAL_DCL 

— Function: This package contains global data structures for the user 

and the application. 

— State Variables: 

SYSTEM_INITIALIZED 

TRUE => system is initialized 
FALSE => system is NOT Initialized 

— State Variable Initialization: 

SYSTEM_INITIALIZED := FALSE 

— Change Log: 


with STRUCT_DCL, SYSTEM_DCL , ERROR_HDL_SUB , TEXT_I0; 
use STRUCT~DCL. SYSTEM J)CL, ERROR~HDL_SUB ; 
package GL0BAL_DCL is 

— This record contains all global variables which are application specific. 

type APPLICATION Is 
record 


55 


ART ADA DESIGN PRO JECT - PHASE I 


TASK J REPORT DETAILED DE 


-- these are initialized at startup 

PRCMPT : STRING Cl.. 4) : = *=> V — interactive prompt is ■=> * 

-- these are initialized as needed 
FUN_LIST : ART_OBJECT ; 

INCR.JOIN.NQDES : JOIN_REF_PTR_TYPE ; 
incr pat.ncdes PAT_REF.PTR.TYPE; 

LIST I 0F _ RULES : RULEINFO.PTR.TYPE; 

DEFLIST : DEFFACT.PTR.TYPE; 

RELATICN_TA3LE : RELATION_PTR_ARRAY.TYPE( 1 . . TABLE.SIZE) ; 

INTERNAL HASHTABLE : ART_OBJECT_ARRAY_TYPE (1 . . INTERNAL_AO_TABLE_SIZE) ; 

TEST.PATTERNS : TEST_PTR_TYPE ; 

VARIABLE_RELATIQNS : PATTERN_NODE_PTR.TYPE; 

SALIENCE.CCDE : ART_CODE_PTR_TYPE ; 

EMIT_L0AD_CR : INTEGER; 

VARS_FQUND : BOOLEAN; 

LAST_ JO IN_N0DE_ID : INTEGER; 
end record; 

type APPLICATION.PTR.TYPE is access APPLICATION; 

— This record contains all global variables which are user specific. 


type USER is 
record 

— these are 
AGENDA 
ID 
NID 

RULE_FIRE_ ERROR 
SPC.SIG 

T ERM I N ATE_EXECUT ION 

ART.ARG.COUNT 

FIRST_TIHE 

EPH.LAST.COUNT 

EPH_SYMBOL_COUNT 

DRIBBLE.STREAM 

LAST.RETURN 

PERM.INDEX 

PERM_LENGTH 

PERM_MAX 

PERM_TABLE 

LOGICAL_PART_MATCH 

GARBAGE_FACTS 

RHS_RECLAIMS 

CURRENT.PART.MATCH 

VAR.INDEDC 

RTR_C0UNT 

SP " 

WAT CH_ ACT I V AT I ON S 
VATCH_FACTS 
WATCH RULES 


initialized at startup 

ACTIVATION PTR TYPE 


null ; 


INTEGER 
INTEGER 
BOOLEAN 
BOOLEAN 
BOOLEAN 
INTEGER 
INTEGER 
INTEGER 
INTEGER 
TEXT_IO 
ARTJDBJECT 
INTEGER 
INTEGER 
INTEGER 
ART_OBJECT_ 
PART_MATCH_PT RETYPE 
ART.OBJECT” : = NULL; 
RHS_BIND.PTR.TYPE 
PART_HATCH.PTR.TYPE 
INTEGER; 

:= 0 ; 

= i; 

= FALSE; 


-I ; 

-i ; 

FALSE; 

TRUE; 
FALSE; 

0 ; 

1 
0 
o 

FILE.TYPE; 
:= null; 
0 
0 
0 

ARRAY 


PTR.TYPE := 
null ; 

null ; 
null ; 


null; 


INTEGER 
POSITIVE 
BOOLEAN : 

BOOLEAN := FALSE; 

BOOLEAN := FALSE; 
FACT_IDS_BEING_WATCHED : INTEGER.LIST.TYPE; — NULL 
IN PATTERN NET~ : BOOLEAN : = FALSE; 


ERROR BUFFER 


STR PTR TYPE; 


RESET ALREADY PERFORMED : BOOLEAN; 


STR_STK_SP 

BUF.PTR 

AO BLOCK LENGTH 


INTEGER; 

INTEGER; 

INTEGER; 


56 


TASK 2 REPORT DETAILED DE 


art; .ADA DESIGN PROJECT - PHASE I 


AO_SP 

INTEGER; 


AQ_STACK 

ART_C3JECT_ARRAY_PTR_TYPE; 

CURRENT_FUNCTIuN 

FUNC_ID_TYPE; 


CURRENT_FACT 

ART_CBJECT ; 


GLCBAL^HASHTABLE 

ART_GBJECT_ARRAY_P7R_TYPE 

-- GLCBAL_HASH_LENG7H 

FLCAT_HASHTABLE 

ART^GB JECT_ARRAY_PTR__TYPE 

— TA5LE_SIZE 

INT_HASHTABLE 

art’qbject_arrayj 5 trjtype 

-- TABLE_SIZE 

STR~HASHTABLE 

ART_QBJECT_ARRAY_PTR_TYPE 

-- TABLE_SIZE 

SYM^HASHTABLE 

ART_OB JECT_ARRAY_PTR_TYPE 

-- TABLE_SIZE 

FACT_TABLE 

art_object_array_ptr_type 

— F ACT_HASH_LENGTH 

SEQ_HASHTABLE 

art_object_array3ptr_type 

-- F ACT_HASH_LENGTH 

CURRENT_RULE 

RULEINFO_PTR__TYPE ; 


CURRENT PATTERN 

PA7TERN_N0DE_PTR_7YPE ; 


CURRENT’ JO IN 

JOIN_NODE_PTR_TYPE; 


IN_DEFFACTS_P 

BOOLEAN; 


GLGB_STACK 

VALUE_SPEC_ ARRAY TYPE(1 . .STACK MAX) ; 

STACK 

POSITIVE := 1; 



— ART/Ada Keeps tract of FLOAT, STRING, and ART_OBJECT seperately 

— GLOB^STACK will maintain the pointers to these items. 


FLOAT_STACK : FLO AT_ARRAY_TYPE < 1 . . STACK JiAX) ; 
STR_PTR_STACK : STR_PTR_ARRAY_TYPE( 1 . . STACK_HAX) ; 
ART_OBJECT_STACK : ART_OBJECT_ARRAY_TYPE (1 . . STACK_MAX) ; 

FL0AT_SP : POSITIVE := 1, 

STR_PTR_SP : POSITIVE := 1; 

ART_OBJECT_SP : POSITIVE := i; 


FLCAT_STACK_OFFSET : NATURAL := 0; 
STR_PTR_STACK_OFFSET : NATURAL := 0; 
ART_OBJECT_STACK_OFFSET : NATURAL := 0; 


L _ J0IN _ TABLE : PARTJiATCH_PTR_ARRAY_PTRJTYPE; 
R_ JO IN_T ABLE : PARt’mATCH_PTR~ARRAY_PTR JTYPE ; 
LAST BREAKPOINT REACHED : ACTIVATION PTR TYPE; 


P R I NT_MES SAGES 

SAFE_FRQM_GC 

DEFAULT_RUN_LIMIT 

CPU_TIHE 

REAL-TIME 

SALIENCE THRESHOLD 


BOOLEAN 

BOOLEAN 

INTEGER 

INTEGER 

INTEGER 

INTEGER 


J 0 1 N_TABLE_LENGTH 
JOIN TABLE~*LENGTH 


LAST_RULE_BREAK_STATUS : INTEGER; 

RUN_STATE : ERR0R_L0C; 

SAVED_TOKEN ; ART_OB JECT ; 

SAVED_T0KEN2 ; ART_OBJECT; 

RULES_FIRED_SINCE_RESET : INTEGER; 

CUR_ASYNC_FUN : STR_PTR_TYPE; — Current asynchronous function 

TEHPORARY_DATA_STATE: BOOLEAN! 

— THIS FIELD POINTS TO THE APPROPRIATE APPLICATION STRUCT 
APPL : APPLI CATI ON_PTR_TYPE ; 

end record; 


type U S ER_P TR_TYPE Is access USER; 

CURJJSER : USER_PTR_TYPE; -- current user 

CUR_APPL : APPLICATIQN_PTR_TYPE; — current application 


57 


ART,.' ADA DESIGN PROJECT - PHASE I TASK - REP0RT DETAILED DESIGN 

SYSTEM_INITIALIZED : BOOLEAN := FALSE; 
end GLOBAL DCL; 


3.4.13 Package Specification of SYSTEM_DCL 


58 



ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W. Century Blvd., 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use. reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: SYSTEM_DCL 

— Function: This package contains data structures for system variables. 

— State Variables: 

-- State Variable Initialization: 

-- Change Log: 


with STRUCT JXX; 
use STRUCTJJCL; 
package SYSTEM_DCL Is 

HASHSIZE : NATURAL := 167; 

— initial stack size 

INITIAL STACK SIZE : NATURAL := 50; 


— maximum stack size 
STACK MAX : NATURAL := 1000; 


59 


ART/ ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT: DETAILED DESIGN 


-- The maximum length of a symbol. 
SYMBOL_LENGTH NATURAL = 512, 

FACT_HASH_LENG7H NATURAL := 1009, 
TABLE_SIZE : NATURAL := 1009; 
INTERNAL_AO_TABLEJIZE : NATURAL := 1009; 
GLOBAL_HASH_LENGTH : NATURAL := 101; 
J0IN_TA8LE_LENGTH : NATURAL 10007; 

— The above should be prime. 

— T and NIL 
T : ART_OBJECT; 

NIL ; ARTJ3BJECT; 

MAX_SALIENCE : constant INTEGER : = 10_000; 

MIN_SALIENCE : constant INTEGER := -10_000; 
end SYSTEM DCL ; 


3.4.14 Package Specification of IO_SUB 


60 



ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION , 

5300 V, Century Blvd., 

Los Angeles. California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author; J. T. Badura 

— Package: I0_SUB 

— Function; This package contains subprograms that print objects out to the 

screen or to a file . 

— State Variables: None 

— State Variable Initialization: Nona 

— Change Log: 


with STRUCT_DCL; 
use STRUCT_DCL; 
package I0_SUB is 


— Function: Prints the object followed by a CR LF to the standard output. 

Standard output is, by default, the screen. 

— Parameters: OBJECT - The object to be printed 


procedure PRINT (OBJECT : ART_0BJECT) ; 
procedure PRINKOBJECT : INTEGER); 


61 


ART ADA DESIGN PROJECT - PHASE I 


TASK •: REPORT detailed design 


procedure PRINT (OBJECT : FLOAT_TYPE) , 
procedure PRINTCOBJECT ; STRING); 


-- Function: Writes the object out to the screen. 

-- Parameters: OBJECT - The object that is transferred to a string. 


function VRITE_TO_STRING (OBJECT: AR7_0BJECT) return STRING 
function VRITE_Tcf STRING (OBJECT ; INTEGER) return STRING 
function VRITE~T0 STRING (OBJECT : FLQATJTYPE) return STRING 


-- Function: Prints the object to the standard output. 

Standard output is, by default, the screen. 

-- Parameters: OBJECT - The object to be printed 


procedure PRINC (OBJECT : ART_GBJECT) ; 
procedure PRINC(OBJECT : INTEGER); 
procedure PRINC (OBJECT : FLOAT_TYPE) ; 
procedure PRINC(OBJECT : STRING): 


— Function: Prints a CR to the standard output 

Standard output is, by default, the screen. 


procedure TERPRI ; 


— Function: Redirect output from STANDARD_OUTPUT to a file. 


procedure DRIBBLE (FNAME : STRING) ; 


— Function: Redirect output from a file to STANDARD^OUTPUT . 


procedure DRIBBLE; 


-- Function: Prints out a segment of a fact to the screen 


procedure PRINT SEGMENT (SEG : ART_OBJECT_ARRAY_PTR_TYPE; 

LENGTH : NATURAL) ; 


— Function: Outputs the difference between TIME_1 and TIME_2 


procedure OUTPUT_TIME(TIME_l : INTEGER; 

TIME 2: INTEGER) ; 


end 10 SUB; 


3.4.15 Package Specification of PATTERN _ NET _ SUB 


62 


ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DE 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1983 
INFERENCE CORPORATION, 

5300 V Century Blvd., 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author; S. Daniel Lee 

— Package: PATTERN_NET_SUB 

— Function: This package contains subprograms necessary to interpret 

the pattern network data structure. 

— State Variables: 

None 

— State Variable Initialization: 

None 

-- Change Log: 


with STRUCT_DCL ; 

use STRUCT_DCL; 

package PATTER N_NET_SUB is 


— PAT_ENTER: Tests a new fact against the pattern network and 

— sends partial matches to the join network. 


procedure PAT^ENTER (FACT_PTR : ART_0BJECT) ; 


63 


ART/ADA DESIGN PROJECT - PHASE I 


TASK '2 REPORT DETAILED DESIGN 


end PATTERN NET SUB; 


3.4.16 Package Specification of JOIN_NET_SUB 


64 


ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1968 
INFERENCE CORPORATION, 

5300 V. Century B1 vd , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lalce and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lalce and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or Information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: J0IN_NET_SUB 

— Function: This package contains subprograms necessary to interpret 

the join network data structure. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL; 
use STRUCT_DCL ; 
package J0IN_NET_SUB Is 


— R DRIVE: Enter the join net from the right side, i.e. from the pattern 

— network. 


procedure R_DRIVE( JOIN: J0IN_N0DE_PTR_TYPE ; 


65 



ART ADA DESIGN PROJECT • PHASE I 


TASK J REPORT DETAILED DESIGN 


RHS BIND RHS BIND PTR TYPE); 


— L_DRIVE : 

— 1 drive drives downward from the left hand Join. 

— First saving the left in the hash table, 

-- then finding and pursuing all matches 

— Should only he entered from Itself, and from r^drive, 
-- with the possible exception of intial ization 

— of the root join . 


procedure L_DRIVE(L_BINDS : RHS_3IND_PTR_ARRAY_PTR_TYPE ; 

R_BIND : RHS_BIND_PTR_TYPE ; 

JOIN: JOIN NODE PTR TYPE); 


-- REMOVE RHS_BIND MATCHES: Removes all the matches that derived from 

— this rhs_Mnd and places the rhs_bind onto a list where it will be 

— reclaimed at the end of processing. 

procedure REMOVE_RHS_BIND_MATCHES (THIS_RHS_BIND : RHS_B I ND_PTR_TYPE) ; 


-- CREATE_INITIAL_DEFFACT : Creates the initial fact, (initial-fact), 

and places it on the deffacts list. 


procedure CREATE_INITIAL_DEFFACT ; 
end JOIN NET SUB; 


3.4.17 Package Specification of ART_ OBJECT _UTIL_ SUB 


66 



ART ADA DESIGN PROTECT - PHASE I 


TASK J REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1983 
INFERENCE CORPORATION, 

5300 V . Century Blvd , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED . 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: ART_0B JECT_UT I L_SUB 

— Function: This package contains utilities for the ART_0BJECT manipulation. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 

9-14-88 SDL - Added pusb_art_ob j ect , place_art_obj ect , push_int, place_lnt. 


with STRUCT_DCL; 
use STRUCT_DCL ; 

package ART 0BJECT_UTIL_SUB is 


— VALUE_IN_ART_0B JECT_REF_LIST_P : Checks to see whether a given value is 

— present in a list or not. 


function V ALUE_ I N_ ART_0 B J EC T_ R £F_ L I S T_P ( L I S T : ARTJDBJECTJ-ISTJTYPE; 


67 



ART ADA DESIGN' PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


VALUE : ART OBJECT) return 3C CLEAN, 


— SCRT_ART_CBJECT_REF : This functions sorts a list of art_cbject references 
-- based on lexical ordering of the schema names in the given argument list. A 
-- simple bubble sort vill be used until the need for a more advanced sort :s 
-- proven. 


generic 

with function LESSJTHAN_FUNCTIGN (0BJECT_1 , Q3JECTJ2 ART_08 JECT) 
return BOOLEAN, 

function SGRT_ART_OBJECT_REF (ART_OBJECT_REF_LIST . ART_QBJECT_LIST_TYPE) 
return ART OBJECT LIST TYPE; 


-- ART OBJECT LESS_THAN : Compares tvo art-objects and decides whether, 

-- according to a lexicographical ordering of my own, the first art-object is 
-- less than the first one or not. Used here in a search routine. 


function ART_0B JECT_LESS_THAN (0BJECT_1 , 0BJECTJ2 : ART_OBJECT) 
return BOOLEAN, 


— CREATE_MERGED_ART_OBJECT_REF_LIST : Nondestructi vely creates a merged copy 

— of the tvo given lists that contains no duplicates. 

function CREATE_MERGED_ART_OBJECT_REF_LIST (LIST_1 , LIST_2 : ART_0B JECT_L I ST_TYP E) 
return ART OBJECT LIST TYPE; 


-- INSERT ART_OBJECT_REF_INTO_LIST : Inserts a reference to a value Into a list, 

— maintaining the order. 

function I NS ERT_ART_0 B JECT_REF_ I NTO J- 1 ST ( ART^O B J ECT_L 1ST : ART_0B JECT_L I ST_TYPE ; 

NEV~VALUE : ART OBJECT) return ART_OBJECT_LIST_TYPE; 


— DEALLOCATE ART OBJECT REF LIST: Deallocates a list of art_object references, 


procedure DEALL0CATE_ARTJ3BJECT_REF_LIST(THISJ*EF : ART_OBJECT_LIST_TYPE) ; 


— PRINT ART__OBJECT_REF_LIST: Prints out a list of art-object references, one 

— reference per line and Indented. 


procedure PRINT ART OBJECT REF_L I ST ( REF_L 1ST : ART_QB JECT_LIST_TYPE ; 

INDENTATION : INTEGER) ; 


— subprograms for ART_CB JECT_STACK 


function CREATE_ART_OBJECT_STACK( INITIAL'S I ZE : INTEGER) 
return ART_0 B JECT_S T ACK JTYP E ; 

procedure RETURN_ART_OBJECT_STACK( STACK : ART_03JECT_STACK_TYPE) ; 

procedure GRQW_ART_OB JECT_STACK (STACK : ART_OBJECT_STACK_TYPE) ; 

procedure PUSH ART_OBJECT (THIS_STACK ; ART_OBJECT_STACK^TYPE; 

INDEX : INTEGER;’ 

VALUE : ARTJJBJECT) ; 
pragma INLINE(PUSH_ART_OBJECT) ; 

procedure PLACE_ART_OB JECT (THIS^STACK : ART_0B JECT_STACK_TYPE ; 


68 


ART/ADA DESIGN PROJECT - PHASE i 


TASK 2 REPORT DETAILED DESIGN 


INDEX INTEGER; 
VALUE ARTJ3BJECT) . 
pragma INLINE (PLACE_ART_OBJECT) ; 


— subprograms for INTEGER_STACK 


function CREATE_INT_STACK(INITIAL_SIZ£ : INTEGER) 
return INT_STACK_TYPE; 

procedure RETURN^ I NT_S TACK (STACK : INT_STACK_TYPE) ; 

procedure GROV_INT_STACK(STACK : INT_STACKJTYPE) ; 

procedure PUSH^INT (THIS_STACK : I NT_STACK_TYPE ; 

INDEX . INTEGER, 

VALUE ; INTEGER) ; 
pragma INLINE(PUSH_INT) ; 

procedure PLACE_INT(THIS_STACK ; INT_STACK_TYPE; 

INDEX : INTEGER; 

VALUE : INTEGER) ; 
pragma INLINE (PUSH_INT) ; 

end ART OBJECT UTIL SUB; 


3*4.18 Package Specification of AGENDA_SUB 


69 


ART, ADA DESIGN PROJECT ■ PHASE I 


TASK 2 REPORT DETAILED DE 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 V. Century Blvd., 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure Is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: AGENDA_SUB 

— Function: This package contains subprograms necessary to manage 

the Agenda mechanism. 

-- State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL; 
use STRUCT_DCL; 
package AGENDA_SUB is 


— ADD_ACTIVATIQN : Adds a rule activation to the agenda. This 
function Is called when all the patterns on the LHS of a 
rule have been satisfied. 


70 


ART ADA DESIGN PROJECT • PHASE I 


task : report detailed design 


function ADD_ACTIVATION( JOIN : JOIN_NGDE_PTR JTYPE; 

BINDS : P ART_MAT CH_PTR_TY?E) 
return ACTIVATION PTR_TYPE; 


-- DELETE^ACTIVATICN: Remove an activation 
-- from the agenda. Called when a fact 
-- gets retracted . 


procedure DELETE_ACTIVATION(ACT : in out ACTIVATION_PTR_TYP£) ; 
end AGENDA SUB; 


3.4.19 Package Specification of INTERPRETER_SUB 


71 


ART ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DET ULED DESIGN 


COPYRIGHT NOTICE 

O COPYRIGHT CC) 1988 
INFERENCE CORPORATION, 

5300 V. Century Blvd., 

Los Angeles, California 90045, 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: Interpreter_sub 

— Function: This package contains subprograms necessary to interpret 

the code vectors. 

-- State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL ; 

use STRUCT_DCL; 

package I NTERPRETER_SUB is 


-- Function: This function evaluates (interpretes) the code vector. 

— Parameter: 

ART_C0DE - It is a pointer to a stack which contains code vectors. 


72 


ART/ ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DETAILED DESIGN 


— P LEFT 
PJIIGHT 
J_LEFT 
JJUGHT 


It is a left argument for pattern net eval. 
It is a right argument for pattern net eval. 
It is a left argument for join net eval. 

It is a right argument for join net eval. 


f unction EVAL (ART_C0DE 
P_LEFT 

p’right 

J^LEFT 

J~*RIGHT 


ART_CODE_?TR_TYPE ; 
ART_CBJECT 

art~gbject_array_ptr_type 

RHS_BIND_PTR_ARRAY_PTR_TYPE 
RHS BIND PTR^TYPE 


= null; 

= null; 

= null ; 

= null) return ART OBJECT, 


— Function: This function calls Ada subprograms. 

— Parameter: 

FUNC_ID - It is an internal ID of the Ada programs, 
procedure FUNCALL (FUNC^ID : FUNC_ID_TYPE) ; 
end INTERPRETER SUB; 


3.4.20 Package Specification of ALLOC _ SUB 


73 


ART ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DETAILED PF 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W. Century 31vd., 

Los Angeles, California 90045, 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package : ALL0C_SUB 

— Function: This package contains declaration of subprograms for 

the memory allocation. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL , UNCHECKED_DEALLOCATIQN; 
use STRUCT_DCL; 
package ALL0C_SUB is 


— Function: It allocates a PART HATCH record. 


function GET_PART_MATCH (LAST_J0IN_FLAG : BOOLEAN; 

LENGTH : INTEGER) return PART MATCH PTR_TYPE ; 


74 


ART ADA DESIGN PROJECT * PHASE I 


TASK J REPORT DETAILED DESIGN 


— Function: It frees a PART MATCH record. 


procedure RTN_PART_MATCH (ITEM : in out PART_HATCH_PTR_TYPE; 

LENGTH : INTEGER) ; 


-- Function: It allocates a RHS BIND record. 


function GET RHS BIND (LENGTH : INTEGER) return RHS BIND PTR TYPE. 


— Function: It frees a RHS BIND record. 


procedure RTN_RHS_BIND(ITEM : in out R H S_B I ND_PTR_TYP E ; 

LENGTH : INTEGER) ; 


— Function: It allocates a RHS BIND record. 


function GET_RHS_BIND_PTR_ARRAY (LENGTH : INTEGER) return RHS_BIND_PTR ARRAY PTR TYPE; 


— Function: It frees a RHS^BIND array 


procedure RTN_RHS_BIND_PTR_ARRAY is new 

UNCHECKED_DEALLOCATI ON ( RHS_B I ND^PTR_ARRAY_TYPE , RHS_B I ND_PTR_ARRAY_PTR_TYPE) ; 


— Function: It creates a new fact. 


function GET FACT return ART OBJECT; 


— Function: It frees a new fact. 


procedure RTN FACT is new 

UNCHECKED DEALLOCATION (ELEMENT , ART OBJECT); 


— Function: It creates a new TEMPLATE. 


function GET TEMPLATE (LENGTH : INTEGER) return TEMPLATE TYPE; 


— Function: It frees a new TQiPLATE. 


procedure RTN_TEMPLATE is new 

UNCHECKED_DEALLOCATION(SEQUENCE_TYFE, SEQUENCE JTRJTYPE) ; 


— Function: It creates a new deffact. 


function GET DEFFACT return DfcFFACT PTR TYPE; 


— Function: It frees a new deffact. 


procedure RTN_DEFFACT is new 

UNC H ECKED_ D EALLQ C AT ION ( DEFF ACT , DEFFACT_PTR_TYPE) ; 


— Function: It creates a new activation. 


75 



ART ADA DESIGN PRO JECT - PHASE I 


TASK •: REPORT DETAILED design 


function GET_ACTIVATIGN return ACT IV AT I GN_PTR_TYPE ; 

-- Function: It frees a new activation. 

procedure RTN_ACTIVATION is new 

UNCHECKED_DEALLCCATION (ACTIVATION , ACT I VAT I GN_PTR_TYPE) ; 

-- Function- It creates a new }oin_ref. 
function GET_JOIN_REF return JO I N_REF_PTR_TYPE ; 

— Function: It frees a new join_ref. 

procedure RTN_JOIN_REF is new 

T JNCHECKED_D EALL GC AT 1 0 N ( JO I N_R EF , JOIN_REF_PTR_TYPE) ; 

-- Function : It creates a LQG_SUPPORT record . 
function GET_L0G_SUPP0RT return LOG_SUPPGRT_PTR_TYPE; 

— Function: It frees a LOG_SUPPQRT record. 

procedure RTN_LOG_SUPPDRT is new 

UNCHECKED_DEALLOCATIDN(LOG_SUPP0RT, LOG_SUPPORTJ s TRJTYPE) ; 

— Function: It frees a sequence. 

procedure FREE_SEQUENCE is new 

UNCHECKED_DEALLOCATION(ELEMENT, ART_OBJECT) ; 

function GET_AO_STACK (LENGTH . INTEGER) return ART_0B JECT_ARRAY_PTR_TYPE ; 

procedure RTN_AO_STACK is new 

UNCHECKED_DEALLOCATION (ART_OBJECT_ARRAY_TYPE, ART_CBJECT_ARRAY_PTR_TYPE) ; 
function GET_SYMBQL return ART_OBJECT; 

— Function: It returns a pointer to a string of length L 
function GET_STRING(L : NATURAL) return STR_PTR_TYPE ; 
function GET_INT_RECORD return ART_OBJECT; 
function GET_FLOAT_RECORD return ART_QB JECT ; 
end ALL0C_SUB; 

3.4.21 Package Specification of MACRO _ SUB 


76 


ART ADA DESIGN PRO JECT - PHASE I 


TASK 2 REPORT DETAILED DE 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 V. Century Blvd., 

Los Angeles, California 90045, 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that Is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package : MACR0_SUB 

— Function: This package contains subprograms that are equivalent to 

C macros in ART-IM . These subprograms are used with 
pragma INLINE. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCTJ2CL, UNCHECKED_C0NVERSI0N; 
use STRUCT J)CL; 
package MACR0_SUB is 


— Function; It returns OBJ. DATA. FACT . ID . 


function FACT ID (OBJ : ART OBJECT) return NATURAL; 


77 


ART /.ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


pragma INLINE(FACT_ID) ; 


— Function: It sets OBJ . DATA . FACT . ID to ID. 


procedure SET_FACT_ID (OBJ ARTjDBJECT ; 

ID : NATURAL) ; 

pragma INLINE (SET_FACT_ID) ; 


— Function: It returns OBJ . DATA . FACT. 3IND LIST. 


function FACT J3IND J-IST (OBJ : ARTJDBJECT) return RHS_B I ND_PTR_TYPE ; 
pragma INLINE (FAOJBIND JJST) ; 


— Function: It sets OBJ . DATA . FACT . 3IND_LIST to BIND_LIST . 


procedure SET_FACT_BIND_LIST (OBJ : ARTJDBJECT; 

BIND_LIST RHS_BIND_PTR_TYPE) ; 
pragma I NL I NE ( S ET_F ACT_B I ND_L 1ST) : 


-- Function: It returns OBJ .DATA. FACT. SUPPORT. 


function FACT_SUPPORT (OBJ : ARTJDBJECT) return L0G_SUPPORT_PTRJTYPE; 
pragma INLINE (FACIJSUPPORT) ; 


— Function: It sets OBJ . DATA . FACT . SUPPORT to SUPPORT. 


procedure SET_FACT_SUPPORT (OBJ : ART_0B JECT ; 

SUPPORT : 10G_SUPP0RT_PTRJTYPE) ; 
pragma INLINE (SET_FACIJSUPPORT) ; 


— Function: It returns OBJ . DATA . FACT . PROPOSITION. 


function FACT_PR0P0SITI0N (OBJ : ARTJDBJECT) return ARTJDBJECT; 
pragma INLINE (FACT_PR0P0SITI ON) ; 


— Function: It sets OBJ .DATA. FACT .PROPOSITION to PROPOSITION. 


procedure SET J 7 ACT PROPOSITION (OBJ : ARTJDBJECT ; 

PROPOSITION : ART_OBJECT) ; 
pragma INLINE (SET_FACT_PR0P0SITI0N) ; 


— Function: It returns 

OBJ . DATA . FACT . PROPOSITION . DATA . SEQ . LENGTH . 


function FACT_LENGTH (OBJ : ARTJDBJECT) return NATURAL; 
pragma INLINE(FACIJLENGTH) ; 


— Function: It sets OBJ. DATA. FACT. PROPOSITION. DATA. SEQ. LENGTH 
to LENGTH. 


procedure SET FACTJLENGTH (OBJ : ARTJDBJECT ; 

LENGTH : NATURAL) ; 
pragma INLINE (SET_FACT_LENGTH) ; 


78 


ART; ADA DESIGN PROJECT * PHASE I 


TASK 2 REPORT DET \ILED DESIGN 


— Function : It return 

OB J . DATA FACT . PROPOSITION DATA SEQ . DATA . 


function FACT ATOMS (OBJ : ARTJ3BJECT) return ART_GBJECT_ARRAY_PTR_7YPE; 
pragma INLINE (FAOJATOMS) ; 


— Function: It sets 

OBJ DATA . FACT . PROPOSITION . DATA . SEQ . DATA 
to ATOMS. 


procedure SET FACT_ATGMS (OBJ . ART_0B JECT ; 

ATOMS : ART_OBJECT_ARRAY_PTR_TYPE) ; 
pragma INLINE (S£T_FACT_ATOMS) ; 


— ‘Function: It returns OBJ . DATA . SEQ . LENGTH . 


function SEQ^LENGTH (OBJ : ARTJJBJECT) return NATURAL: 
pragma INLINE(SEQ_LENGTH) ; 


— Function: It sets OBJ. DATA. SEQ. LENGTH to LENGTH. 


procedure SET_SEQ_LENGTH (OBJ : ARTJJBJECT; 

LENGTH : NATURAL) ; 
pragma INLINE(SET_SEQ_LENGTH) ; 


— Function: It returns OBJ . DATA . SEQ . DATA . 


function SEQ_ELT (OBJ : ART_OBJECT) return ART JDB JECT_ARRAY_PTR JTYPE ; 
pragma INLINE (SEQ JILT) ; 


— Function: It sets OBJ . DATA . SEQ . DATA to ELT . 


procedure SET_SEQ_ELT (OBJ : ARTJ3BJECT; 

ELT : ART~OBJECIJARRAY_PTRJTYPE) ; 
pragma INLINE (SET_SEQ_ELT) ; 


— Function: It returns OBJ .DATA. SEQ. REF COUNT. 


function SEQ_REF_COUNT (OBJ : ARTJJBJECT) return INTEGER; 
pragma INLINE (SEQ_REFjDOUNT) ; 


— Function: It returns OBJ . DATA. SEQ. REF COUNT to REF COUNT. 


procedure SET SEQ_REF COUNT (OBJ : ARTJJBJECT ; 

REFjJOUNT”: INTEGER); 
pragma INLINE (SET_SEQ_REF JTGUNT) 7 


— This function increments an integer by one. 

— This is equivalent to ♦+ in C. 


procedure INCREMENT ( NUM : in out INTEGER ); 
pragma INLINE (INCREMENT) ; 


— This function decrements an integer by one. 

— This is equivalent to — in C. 


79 


ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


procedure DECREMENT ( NUM 
pragma INLINE (DECREMENT) ; 

: in out INTEGER ); 

— This function set MARK£D_FLAG of ARTJDBJECT to TRUE. 

procedure MARK A0( OBJ ; 
pragma I NL I NE (MARK_A0) ; 

ART_0B JECT ) ; 

-- This function converts 

ARTJDBJECT to INTEGER. 


function CCNVERT_ART_OBJECT_TO_INTEGER is new UNCHECKED JIONVERS I ON (ART_0B JECT ( 

procedure NINT PUSH AQ_FRAME(OLD^AO_SP : out INTEGER) ; 
pragma INLINE(NINTJ 3 USH_A0J r RAME) ; 

procedure NINT_POP_AO_FRAME(QLD_AO_SP : INTEGER); 
pragma INLINE (NINT__P0P_A0_FRAME) ; 

function GET_PAT_VAR_VECTOR (DATA ; RHS_BIND_PTRJTYPE; 

VAR_NUM : INDEXJTYPE) return ART_GBJECT; 
pragma INLINE (GET J*ATJ/AR_VECT0R) ; 

function GET_JOIN_VAR( DATA : RHS J3IND_PTR_ARRAY_PTR_TYPE ; 

PAT : INDEXJTYPE ; 

VAR_NUM : INDEXJTYPE) return ART_0B JECT ; 
pragma INLINE(GET_JOIN_VAR) ; 

end MACRO SUB; 


3.4*22 Package Specification of UI_ INTERNAL _ SUB 


INTEGER) . 


80 


ART ADA DESIGN PRO JECT - PHASE f 


TASK 2 REPORT DETAILED DE 


COPYRIGHT MO TICE 

1) COPYRIGHT (C) 1388 
INFERENCE CORPORATION, 

5300 W. Century Blvd.. 

Los Angeles, California 30045 
AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-15 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes.* 


— Author: S. Daniel Lee 

— Package: DATABASE^SUB 

— Function: This package contains subprograms necessary to manage 

the ART/Ada database. 

— State Variables: 

None 

— State Variable Initialization: 

None 


with STRUCT_DCL; 

use STRUCT_DCL; 

package UI_INTERNAL_SUB is 


— Function: It prints out 'watch facts" messages for assert. 


procedure DEBUG_FACT_ASSERT (FACT : ART_0BJECT) ; 


— Function: It prints out "watch activations" messages for add activation. 


81 


ART. ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT. DETAILED DESIGN 


procedure DEBUG_ACTIVATICN__CREATED ( ACT : ACTIVATIGN_PTR_TYPE ); 


— Function : It prints out "watch activations" messages for delete activation 
procedure DEBUG_ACTIVATION_DELETED ( ACT : ACTIVATICN_P7R_7YPE ); 


— Function: It prints out "-watch rules" messages for add activation, 
procedure DEBUG_RULE_ACTIVATED ( RULENAME AR7_CBJECT) ; 


— Function: It prints out "watch facts' messages for retract, 
procedure DEBUG_FACT__RETRACT (FACT : ART_OBJECT) ; 


— PRINT_MATCH : Prints out a list of data items that 

— were associated with a partial match or rule 

— instantiation. 

procedure PRINT JiATCH (BINDS : PART_MATCH_PTR_TYPE) ; 


— PRINT_DATA_BASIS : Prints out a list of data items that 

— were associated with a partial match or rule 
-- instantiation . 


procedure PRINT_DATA_BASIS (BINDS : PART_MATCH_PTR_TYPE) ; 


— SHQV_DATA_ITEM : Displays a single data item, 

procedure SH0V_DATA_ITEM(DATA: ART_OBJECT) ; 
end UI_INTERNAL_SUB ; 

3*4.23 Package Specification of MATH __ SUB 


82 



ART ADA DESIGN PROJECT - PHASE I 


TASK : REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT CC) 1988 
INFERENCE CORPORATION, 

5300 V . Century Blvd . , 

Los Angeles. California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-3 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation , 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: MATH_SUB 

— Function: This package contains subprograms for the math package. 

-- State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL; 
use STRUCT_DCL ; 

package MATH_SUB is 

function ART_PLUS (X : ART_0BJECT; 

Y : ART_0BJECT) return ARTJDB JECT ; 

function ARTJIINUS (X : ARTJDBJECT; 

Y : ART OBJECT) return ART OBJECT; 


83 



VRT/ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


function ART_TIMES (X . ARTJ5BJECT; 

Y : ART*CBJECT) return ART_GB JECT ; 

function ART_DIVIDE (X : ART_OBJECT ; 

Y ; ARTJ3BJECT) return ART_C8JECT; 

function ART_NUMERIC_EQUAL (X : ART_OBJECT; 

Y : ART_OBJECT) return BOOLEAN; 

function ART_NUMERIC_NOT_EQUAL (X : ART J3B JECT; 

Y ART_0B JECT) return BOOLEAN; 

function ART_GREATER (X : ARTJDB JECT ; 

Y : ART_QB JECT) return BOOLEAN; 

function ART_LESS (X : ART_0B JECT ; 

Y : ART_OBJECT) return BOOLEAN; 

function ART_GREATER_EQUAL (X : ART_OBJECT ; 

Y ; ARTJDBJECT) return BOOLEAN; 

function ART_LESS_EQUAL CX : ART JIB JECT; 

Y : ART JJB JECT) return BOOLEAN; 

end MATH SUB; 


3.4.24 Package Specification of GC_SUB 


84 



ART/ ADA DESIGN PROJECT - PHASE I 


task j report detailed design 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 V. Century Blvd., 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 
-- Package: GC_SUB 

— Function: This package contains subprograms for garbage collection. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 

Author Date Change 


with STRUCT J9CL; 
use STRUCT_DCL ; 
package GC_SUB Is 


— MARK SEQUENCE: Marks a sequence for garbage collection, and all of its 

— component data items. 


85 



ART ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DES 


procedure MARK_SEQUENCE(SEQ: ART_CBJECT) ; 

, - 

-- MARK RHS 3INDS ; Marks all of the data items contained in this list of RMS binds for 
— the garbage collector. 

procedure MARK_RHS_3INDS (BINDS : RHS_BIND_PTR_TYPE) ; 

— MARK_FACTS : 
procedure MARK FACTS; 

procedure SAFE_MARK_AQ ( OBJECT : ART_OBJECT) ; 
procedure SAVE_A0 (OBJECT : ART_OBJECT) ; 
procedure AO_SAVE_ESCAPE (OBJECT ; ART_OBJECT) ; 
end GC_SUB ; 

3.4.25 Package Specification of COMPILER DCL 


86 


ART; ADA DESIGN PROJECT ■ PHASE I 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W Century Blvd . , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lake and a subcontract 
thereunder. Number 015 between the University 
of Houston-Clear Lake and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: C0MPILER_SUB 

— Function: This package contains data structures and ' subprograms 

specific to a particular ‘compiler. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


package COMPILER SUB is 

— VAX Ada supports double float as L0NG_FL0AT. 
-- VADS supports double float as FLOAT, 
subtype I NTERNAL_FL0AT_7YPE is L0NG_FL0AT ; 

function GET_REAL_TIME return INTEGER; 

function GET CPU TIME return INTEGER; 


87 



ART/ADA DESIGN' PROJECT - PHASE I 


TASK : REPORT DETAILED DESIGN 


end COMPILER SUB; 


3.4.26 Package Specification of LOGICAL _ SUB 


88 



ART ADA DESIGN PROJECT - PHASE f 


TASK 2 REPORT DETAILED DESIGN 


COPYRIGHT NOTICE 

1) COPYRIGHT (C) 1988 
INFERENCE CORPORATION, 

5300 W . Century Blvd . , 

Los Angeles, California 90045. 

AN UNPUBLISHED WORK - - ALL RIGHTS RESERVED. 

2) Restricted Rights Notice (Short Form) (April 1984) 

Use, reproduction, or disclosure is 
subject to restrictions set forth in 
Government Cooperative Agreement Number NCC- 
9-16 between the National Aeronautics and 
Space Administration and the University of 
Houston-Clear Lalce and a subcontract 
thereunder, Number 015 between the University 
of Houston-Clear Lalce and Inference 
Corporation . 

3) Restricted Rights Notice (ART/Ada) 

These data constitute Inference 
Corporation trade secrets and/or information 
that is commercial or financial and 
confidential or privileged. They are 
submitted to the Government under NASA 
Cooperative Agreement NCC-9-16 with the 
University of Houston-Clear Lake Research 
Institute for Computing and Information 
Systems (RICIS) with the understanding that 
they will not, without the permission of 
Inference Corporation, be used or disclosed 
for other than evaluation purposes. 


— Author: S. Daniel Lee 

— Package: L0GICAL_SUB 

— Function: This package contains subprograms necessary for 

the logical dependency. 

— State Variables: 

None 

— State Variable Initialization: 

None 

— Change Log: 


with STRUCT_DCL ; 
use STRUCT_DCL ; 
package L0GICAL_SUB is 


— ADD FACT_SUPP0RT : Adds logical support information for a fact to both the 

— fact and to the current partial match. 


procedure ADD_FACT_SUPPCRT (FACT : ARTJ3BJECT; 


89 


ART; ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


SUP PTR : in out LOG SUPPORT PTR TYPE); 


-- RETRACT_SUPPORT : Retracts the support of a given partial match from all 
— data items that it had supported before . 


procedure RETRACT^SUPPORT ( PART_MATCH : PART_MATCH_PTR_TYPE ); 


-- FREE L0G_SUPP0RT: Removes all connection from a data item to supporting 

— partial matches. This occurs when the data item receives state support or 

— when the item is retracted. 


procedure FREE_LOG__SUPPORT ( FIRST_DATA : ART_OBJECT; 

SLOTJJAME : ARTJ3BJECT; 

VALUE : ART_OBJECT; 

SUP PTR : In out LOG SUPPORT PTR TYPE); 


-- VALIDATE_DATA: Validates that a piece of data (fact, schema, slot or slot 
— value) is supported by some object that is not involved in a circle. 


function VALIDATE_DATA( DATA_ITEM : ART^OB JECT ; 

SUPPORT : LOG_SUPPORT_PTR_TYPE ; 

VALIDATING DATA : ART OBJECT LIST TYPE ) return BOOLEAN; 


— COMPUTE_LOGICAL_PART_KATCH : Computes the logical partial match. 


function COMPUTE_LOGICAL_PART_MATCH (THIS_L0G_J0IN : JOINJIODE_PTR_TYPE) 
return PART_MATCH_PTR_TYPE ; 

end LOGICAL SUB; 


3.5 Package Specification of the Booch Components 


3.5.1 List _ Single _ Unbounded __ Managed 


90 



ART. ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


— This is a generic package for a singly-linked list from the 3ooch reusable 

— component library 

Unbounded - Denotes that the size of the object is not static. 

Managed - Garbage collection is provided by the component itself. 


generic 

type Item is private, 
package List_SingIe_L T r*bounded_Managed is 

type List is private; 

Null List : constant List; 


— Copy the items from one list to another list. 

procedure Copy (From_The_List ; in List; 

To_The_List : in out List) ; 

— Remove all the items (if any) from the list and make the list null, 

procedure Clear (The List in out List); 

— Add an item to the head of a list. 

procedure Construct (The_Item : in Item; 

AndJTheJ-ist : in out List) ; 

— Set the value of the head of a list to the given item. 

procedure Set_Head (Of JTheJ-ist : in out List; 

ToJThe_Item : in Item) ; 

— Exchange the tail of one list with another entire list. 

procedure Svap_Tail (Of_The_List : in out List; 

And_The_List : in out List) ; 

-- Return True If the tvo lists have the same state. 

function Is_Equal (Left : in List; 

Right : in List) return Boolean; 

— Return the current number of items in the list, 
function LengthJDf (The_Llst : in List) return Natural; 

-- Return True if the list is a sequence of zero items, 
function Is_Null (The_List : in List) return Boolean; 

— Return the first item from the sequence of items in a given list, 
function Head Of (The List : in List) return Item; 


91 


ART /'ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DET AILED DESIGN 


-- Return the list denoting the tail of a given list, 
function Tail Of (The_List : in List) return List. 


-- The list cannot grow large enough to complete the desired operation. 
Overflow : exception; 

— The desired operation cannot be completed because the list already 
-- IsJJull 

List_Is_Nul 1 : exception; 

private 

type Node; 

type List is access Node; 

Null^List : constant List := null; 
end List_Single_Unbounded_Managed ; 


3.5.2 String __ Sequential _ Unbounded ^Managed _ Iterator 


92 


ART ADA DESIGN PROJECT ■ PHASE I 


TASK J REPORT DETAILED DESIGN 


— This is a generic package for a string from the Booch reusable 

— component library 

Sequential - The semantics of an object are preserved only in the 
presence of one thread of control . 

Unbounded - Denotes that the size of the object is not static. 
Managed - Garbage collection is provided by the component itself 
Iterator - An iterator is provided for this object. 


generic 

type Item Is private; 

type Substring is array (Positive range <>) of Item; 
with function •<“ (Left : in Item; 

Right : in Item) return Boolean; 
package String_Sequential_Unbounded_Managed_Iterator is 

type String is limited private; 

-- Copy the items from one string to another string 

procedure Copy (From_The_String : in String; 

7o_The_String : in out String) ; 


-- Copy the items from one substring to another string 

procedure Copy^ (From_The_Substring : in Substring; 

To_The_String : in out String); 

procedure Clear (The_String : in out String) ; 


— Catenate a string to the front of another string 

procedure Prepend (The_String : in String; 

To_The_String : in out String) ; 

— Catenate a substring to the front of another string 

procedure Prepend (7he_Substring : in Substring; 

To_The_Strlng : in out String) ; 


— Catenate a string to the end of another string 

procedure Append (The_String : in String; 

To_The_String : in out String) ; 

— Catenate a substring to the end of another string 

procedure Append (The_Substrlng ; in Substring; 

To_The_String : in out String) ; 

— Add a string starting at the given position in another string 

procedure Insert (The_Strlng : in String; 

InJFhe^String : in out String; 

At The Position ; in Positive) ; 



ART/ADA DESIGN PROJECT * PHASE l 


TASK 2 REPORT DETAILED DESIGN 


-- Add a substring starting at the given position in another string 

procedure Insert (The_Substri ng in Substring; 

In_The_String : in out String; 

At The Position : in Positive) ; 


— Remove the items of a string from the given starting position to a 

— stop position, inclusive 

procedure Delete (In_The_String : In out String; 

From_The_Posi tion : in Positive; 

To_The_Posi tion : in Positive); 

— Starting at a given position, replace the items of a string with 

— another string. 

procedure Replace (In_The_String in out String; 

At_The_Posi tion : in Positive; 

Vith_The_S tring : in String); 

— Starting at a given position, replace the items of a string with 
-- another substring 

procedure Replace (In_The_String : in out String; 

At_Th exposition ; in Positive; 

VI th__The_Substring : in Substring), 


— Set the value of the given position of a string to the given item 

procedure Set_Item (In_The_String : in out String; 

At_The_P°sition : in Positive; 

With The Item : In Item) ; 


— Return True If the two strings have the same state 

function Is_Equal (Left : in String; 

Right : In String) return Boolean; 


— Return True if a substring and a string have the same state 

function Is_Equal (Left : in Substring; 

Right : in String) return Boolean; 


— Return true if a string and a substring have the same state 

function Is_Equal (Left : in String; 

Right : in Substring) return Boolean; 

— Return True If the first string is lexicographically smaller than 

— the second string. 

function Is_Less_Than (Left ; in String; 

Right : in String) return Boolean; 


94 


ART/ADA DESIGN PROJECT - PHASE I 


TASK -J REPORT DETAILED DESIGN 


-- Return True if the first substring is lexicographically smaller than 
-- the second string 

function Is_Less_Than (Left : in Substring; 

Right ; in String) return Boolean; 

-- Return True if the first string is lexicographically smaller than 
-- the second substring 

function Is_tess_Than (Left : in String; 

Right : in Substring) return Boolean; 


— Return True if the first string is lexicographically larger than 

— the second string 

function Is_Greater_Than (Left : in String; 

Right : in String) return Boolean; 


— Return True if the first substring is lexicographically larger than 

— the second string 

function Is_Greater_Than (Left : in Substring; 

Right : in String) return Boolean; 


— Return True if the first string is lexicographically larger than 

— the second substring 

function Is_Greater_Than (Left : in String; 

Right ’ ; in Substring) return Boolean; 


— Return the current number of items in the string 

function Length_0f (The^String : in String) return Natural; 


-- Return True if the string has a zero length 

function Is_Null (The_String : in String) return Boolean; 


— Return the item at the given position in the string 


function Item Of 


(Tbe_Strlng : in String; 

At The Position : in Positive) return Item; 


— Return the substring consisting of all the items in the given string 
function SubstringJDf (The_String : in String) return Substring; 


— Return the substring of a string from a starting position to an ending 

— position 

function Substring_Of (The_Strtng : In String; 

From_The_Pos i tion : in Positive; 

To The Position : In Positlve)return Substring; 


95 



ART ADA DESIGN PROJECT - PHASE I 


TASK J REPORT DETAILED DESIGN 


— visit every item in the string in order from the first position to 

— the last position . 

generic 

with procedure Process (The_Item in Item; 

Continue : out Boolean) ; 

procedure Iterate (Over_The_String : in String) ; 

Overflow exception; — The string cannot grow large enough to 

— complete the desired operation 

Position Error : exception; — The given position is not valid for the 

-- string 

private 

type Structure is access Substring; 
type String is 
record 

The_Length : Natural ;= 0, 

The_Items : Structure; 

end record; 

end String_SequentialJJnbounded_Managed_Iterator ; 


3.5.3 Floating _ Point _ Utilities 

generic 

type Number is digits <>; 
package Floating_PointJJtilities Is 

type Base Is range 2 . . 16; 


type Numbers is array (Positive range <>) of Number; 


function 

Integer^Part 

(The_Number 

in 

Number) 

return 

Integer; 

function 

Real_Part 

(The_Number 

' in 

Number) 

return 

Number; 

function 

Floor 

(The_Number 

in 

Number) 

return 

Integer; 

function Ceiling 

(The_Number 

in 

Number) 

return 

Integer; 

function 

Min 

(Left 

in 

Number; 





Right 

in 

Number) 

return 

Number; 

function 

Min 

(The_Numbers 

in 

Numbers) 

return 

Number; 

function 

Max 

(Left 

In 

Number; 





Right 

In 

Number) 

return 

Number; 

function 

Max 

(The_Numbers 

in 

Numbers) 

return 

Number; 

function 

Is_Posltlve 

(Tbe_Number 

in 

Number) 

return 

Boolean ; 

function 

Is_Natural 

(The_Number 

in 

Number) 

return 

Boolean ; 

function 

Is_Negative 

(The_Number 

in 

Number) 

return 

Boolean ; 

function 

Is Zero 

(The_Number 

In 

Number) 

return 

Boolean ; 

.function 

Image JDf 

(The_Number 

in 

Number; 





With_The_Base 

In 

Base := 10) 

return 

String; 

function 

Value_0f 

(The_Image 

in 

String; 





With_The_Base 

In 

Base := 10) 

return 

Number; 

function 

Is_Equal 

(Left 

in 

Number; 





Right 

in 

Number) 

return 

Boolean ; 


Lexical_Error : exception; 
end FloatIng_Point_UtilIties; 


96 



ART/ADA DESIGN PROJECT ■ PHASE I 


TASK •: REPORT DETAILED DESIGN 


4. Ada Call-In and Call-Out Specification for 
ART/ Ada and ART-IM 1.5 

4.1 Introduction 

This section describes a portable call-in/call-out interface specification for ART/Ada and ART-IM L.5, 

for communication between Ada and .ART. The standard call-in/call-out mechanism will enhance 

portability of an .ART application between .ART-IM and ART/Ada. 

4.2 Interface Types 

The following types may be passed between ART and Ada: 

INTEGER (INTEGER) This type is an integer in Ada and an integer in .ART (INTEGER in 
.ART/Ada and long in ART-IM). The exact range of integers supported in .ART varies 
between implementations. 

:BOOLEAN (BOOLEAN) In ART, this type is either NIL or non-NIL. In Ada, this type is 
BOOLEAN which is TRUE or FALSE. When translating from Ada to ART TRUE will 
translate to T. 

:FLOAT (FLOAT JTYPE) In Ada, this type is FLOAT _ TYPE which is double precision float 

whenever the Ada compiler supports it. In ART, the exact range and precision 
supported varies between implementations. For ART/Ada this will be a float. For 
ART-IM this will be a C double. 

:STRING (STR_PTR_TYPE) In Ada, this type is represented as a STR _ PTR _ TYPE which is a 

limited private type. In ART, this type is represented as an ART string. .ART may or 
may not copy the string being passed by this mechanism when passing a string from 
ART to Ada. Thus it is an error to destructively modify a string passed with this 
mechanism. ART is responsible for freeing any space necessary for the string after 
exiting the current scope. The actual implementation will be based upon constraints of 
the underlying architecture. When transferring a string from Ada to ART, ART will 
always copy the string, allowing the Ada programmer to free the string at his leisure. 

:SYMBOL ( STR_PTR_TYPE) In Ada, this type is represented as an STR _ PTR _ TYPE. In .ART, 
this type is a symbol. Case is preserved when interning an STR _ PTR _ TYPE as an 
ART symbol, just as case is preserved when passing a string to the Lisp function 
INTERN. 

: ART-OBJECT (ART_GBJECT) This type is any .ART type in ART. It is represented as a pointer to a 
discriminant record in .ART/Ada. For .ART-IM, it is an integer type which represents 
a C pointer to a C structure art_object. A set of Ada functions is provided to operate 
on these ART objects from Ada. 


97 


ART, ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


4.3 Scope of Objects 

This section gives a detailed description of the scope of objects communicated from ART to Ada and 
objects communicated from Ada to .ART. In both cases the prime motivation for scoping is that rhe 
caller should free all objects it allocates, (thus it should not allocate objects which it intends that the 
callee free). Additionally, the callee should not destructively modify objects which it did not allocate. 

All objects that are not immediate fall under these constraints. For example, strings and art-objects 
passed from .ART to Ada conform to the following semantics. 

When an art_object or string is passed from ART by call out to an Ada function, the object is 
automatically reclaimed when the Ada function returns to ART. At this point, the Ada art_object 
data structure is no longer valid for use in Ada code. It is an error to retain a pointer to an 
automatically reclaimed art_object in Ada once the Ada call has returned. 

When an art_object or string is returned from .ART to Ada, it is automatically reclaimed when 
control returns to ART from Ada In those implementations where Ada can start up and call ART as a 
subroutine so that a returned value may never be reclaimed, the returned art_object is allocated 
permanently and must be freed using a freeing function supplied in Ada. 

A function is supplied in Ada that accepts an art_obJect a s argument and returns a permanent copy 
of that artjobject. This object must be explicitly freed when no longer useful. 

4.4 Call-Out from ART to Ada 

The following is a grammar for def-user-fun which will be used to call out to Ada from ART: 

(def-user-fun <fun-name> {<comment>> 

<function-spec>*) 

<function-spec> : := 

: compiler <compiler-name> I 
: returns <return-data-type> I 
:epname <linlc-edltor-syinbol> I 
: args (<arg-spec>*) 

<fun-name> : := <art-syrabol> 

<comment> : := <art-string> 

<compiler-name> : := 

: VERDIX-ADA 
:DEC-ADA 
: ALSYS-ADA 


98 



ART/ ADA DESIGN PROJECT - PHASE I 


TASK 2 REPORT DETAILED DESIGN 


<internal-data-type> ; := 

: SYMBOL 
: STRING 
: FLOAT 
: INTEGER 
: BOOLEAN 

<return-data-type> : : = 

:VOID I <internal-data-type> 

<link-editor-symbol> : : = 

<art-symbol> | <art-string> 

<arg-spec> : := 

(<name> <internal-data-type> <arg-attribute>*) I 
(< internal -data- type> <arg-attrlbute>*) I 
< internal -data- type > 

<name> : : = <art-syrabol> 

<arg-attribute> : ;= 

<convention> I 
<status> 

<convention> : := 

: OBJECT-POINTER I 
: VALUE-POINTER I 
: VALUE 


<status> : := 

<optional> I 

<rest> 

<optional> : 

: optional I 

(: optional <default>) 

<default> : art-object 

<rest> : := :rest ; Must be the last arg 

4.5 Call-In from Ada to ART 

The specification of the ART package will serve as the standard interface specification to call in from 
Ada to ART. The ART package of ART/Ada is the public package for the ART/Ada users to call in 
from Ada to ART/Ada. 


The Ada binding for ART-IM 1.5 using the Ada pragma interface based on the standard call-in 
mechanism is also available separately. It can be used to call in from Ada to ART- EM 1.5. The Ada 
binding is composed of the specification and the body of the Ada package, ART. The specification of the 
ART package. 


99 


ART/ AD A DESIGN PROJECT • PHASE I 


TASK REPORT DETAILED DESIGN 


References 

1. Booch, G. Software Components With Ada. Benjamin/ Cummings Publishing, 1987. 

2. Inference Corporation. ART Version 3.1 Reference Manual. Inference Corporation, 1987. 

3. Inference Corporation. .\RT-IM 1.0 Re ference Manual. Inference Corporation, 1988. 


100 




