PASCAL USER'S GROUP 



Pascal News 



COMMUN 



NUMBER 15 

ICATIONS ABOUT THE PROGRAMMING LANGUAGE PASCAL BY PASCALERS 



Front Cover 

1 



3 
3 
5 
7 
7 
8 
9 
13 
13 

27 
27 
28 
55 
56 

60 
60 
62 
63 
67 
68 

71 
71 
77 
90 
99 

100 
100 
100 
104 
104 
106 
107 

125 

Back Cover 



SEPTEMBER, 1979 



d. 




,-n* 



A^ 



m 



\ 



P. U. G. 



Guardian of Rational Programming 

POLICY: Pascal News 

Thanks for not giving up hope,.. 

EDITOR'S CONTRIBUTION 

HERE AND THERE WITH Pascal 
Tidbits 

Pascal in the News 

Pascal and Teaching (postponed until #17) 
Ada (DoD-1) 

Books and Articles (mostly postponed) 
Conferences and Seminars 
PUG Finances 
Roster Increment 

APPLICATIONS 

Introduction and News 
Software Tools 
Programs 
Algorithms 

ARTICLES 

"A Contribution to Minimal Subranges" - Laurence Atkinson 

"A Note on Scope, One-Pass Compilers, and Pascal" - Arthur Sale 

"Pascal-I - Interactive, Conversational Pascal -S" - Richard Cichelli 

"Tracing the Heap" - Steve Schach 

"Why use Structured Formatting?" - John Crider 

OPEN FORUM 

Future of Pascal News - Save the PUG 

General 

Pascal Standards 

Validation Suite 

IMPLEMENTATION NOTES 
Portable Pascals 
Pascal Variants 
Hardware Notes 

Feature Implementation Notes 
Checklist 
Machine-Dependent Implementations 

POLICY: Pascal User's Group 

University of Minnesota Equal -Opportunity Statement 




1976, U.S.A. 



1977, Europe 




1977, Australia 



POLICY: Pascal News (79/09/01) 

* Pascal News is the official but informal publication of the User's Group. 

Pascal News contains all we (the editors) know about Pascal; we use it as 
the vehicle to answer all inquiries because our physical energy and 
resources for answering individual requests are finite. As PUG grows, we 
unfortunately succumb to the reality of (1) having to insist that people 
who need to know "about Pascal" join PUG and read P ascal News - that is 
why we spend time to produce it! and (2) refusing to return phone calls 
or answer letters full of questions - we will pass the questions on to 
the readership of Pascal News . Please understand what the collective 
effect of individual inquiries has at the "concentrators" (our phones and 
mailboxes). We are trying honestly to say: "we cannot promise more than 
we can do." 

* An attempt is made to produce Pascal News 3 or 4 times during an academic year 

from July 1 to June 30; usually September, November, February, and May. 

* ALL THE NEWS THAT FITS, WE PRINT. Please send material (brevity is a virtue) for 

Pascal News single-spaced and camera-ready (use dark ribbon and 18.5 cm lines!) 

* Remember: ALL LETTERS TO US WILL BE PRINTED UNLESS THEY CONTAIN A REQUEST TO 

THE CONTRARY. 

* Pascal News is divided into flexible sections: 

POLICY - tries to explain the way we do things (ALL-PURPOSE COUPON, etc.). 

EDITOR'S CONTRIBUTION - passes along the opinion and point of view of the 
editor together with changes in the mechanics of PUG operation, etc. 

HERE AND THERE WITH PASCAL - presents news from people, conference 
announcements and reports, new books and articles (including reviews), 
notices of Pascal in the news, history, membership rosters, etc. 

APPLICATIONS - presents and documents source programs written in Pascal for 
various algorithms, and software tools for a Pascal environment; news of 
significant applications programs. Also critiques regarding program/algorithm 
certification, performance, standards conformance, style, output convenience, 
and general design. 

ARTICLES - contains formal, submitted contributions (such as Pascal 
philosophy, use of Pascal as a teaching tool, use of Pascal at different 
computer installations, how to promote Pascal, etc.) 

OPEN FORUM FOR MEMBERS - contains short, informal correspondence among 
members which is of interest to the readership of Pascal News . 

IMPLEMENTATION NOTES t reports news of Pascal implementations: contacts 
for maintainers, implementors, distributors, and documentors of various 
implementations as well as where to send bug reports. Qualitative and 
quantitative descriptions and comparisons of various implementations are 
publicized. Sections contain information about Portable Pascals, Pascal 
Variants, Feature-Implementation Notes, and Machine-Dependent Implementations 

* Volunteer editors for this issue (#15) were: 

Rick Marcus, Andy Mickel , Jim Miner, Arthur Sale, and Rick Shaw. 

(Rick Shaw and Arthur dropped into Minneapolis to save the day!) 



PASCAL NEWS #15 SEPTEMBER, 1979 PAGE 1 



Thanks for not giving up hope ... 
Pascal News is alive and well ! 



Well, everyone, it's been a real struggle to get this issue done in spite of the delays 
over the last 6 months. Unfortunately we've caused some confusion. Please note: 



THIS ISSUE (#15) AND NEXT ISSUE (#16) STILL APPLY TO 78-79 SUBSCRIPTIONS!!! 



In other words, if your mailing label says "RENEW JUNE 79", your subscription has not 
expired yet. Further, our policy states that if you join PUG anytime during an academic 
year ending June 30, we will send you all k issues for that year. Well now, I'd like 
to point out that we are still in the 78-79 academic year (!), and that all new 
subscriptions are being forced to that period. Why? I expect you new members want the 
latest information that's available (such as this issue), and this is a 78-79 issue. 

Therefore whereas we say in the policy that we attempt to publish September, November, 
February, and May issues, for 78-79 subscriptions we will have had December, January, 
September, and October issues. 79-80 subscriptions will start with a November issue 
(#17). We'll get back on track eventually (I hope!). I'm sorry for the confusion. 

Now let me try to explain what happened: 

Volunteers do the work on Pascal News . As anyone in computing these days knows, talent 
(or even mere bodies ) are hard to find. With Jim Miner absorbed in standards activities 
and everyone else hard at work at regular jobs, it's been just Rick Marcus and myself 
holding things down. In fact from 79/01/22 to 79/04/15, mail piled up unopened, and we 
were still delinquent in sending out some backissues ordered since 78/11/08! So if you 
are a new member who joined during this period (nearly 800 of youl), you were the 
victims of unacceptably bad service. I apologize. By 79/05/15 we had processed the 
mail and mailed out backissues, which in some cases took 1 more month (79/06/15) to 
arrive. 

However, the next urgent task was to tidy up the PUG files (about 10000 ALL-PURPOSE 
COUPONS) and update the accounting since we let things go back in May, 1978. It was 
actually back then that our troubles began, because one article publicizing Pascal and 
PUG in ComputerWorld generated 500 new members in one month (or a 25% increase in 
membership in one single month!) We have only recently fully recovered. This summer 
Rick and I spent one month completely straightening the files. Straightened files 
( very important) allows us to process new memberships and renewals faster, because we 
can eliminate duplicates and follow up questions about membership status, lost and 
uncashed checks, etc. 

Finally on 79/08/28, I processed all subscriptions (approximately ^50) from 79/05/16 
onward and mailed backissues. Only then did we begin looking at Pascal News #15 
seriously. 

Thanks a lot for your faith and patience—miraculously we've received zero requests 
for refunds, and only 10 requests regarding what is happening. When I said in #13 
that I was quitting effective anytime after July 1, 1979, ' was intending to do the 
2 issues remaining for 78-79, and #15 and #16 represent the fol lowthrough on that 
commitment. Some people thought that #13 was my "swansong. " 




Editor's Contribution 

AbQU| = Ibi| = I|§y| 

As I said on the previous page, it's been a real struggle to get this issue of Pascal News 
produced. It was a hard task to face, too! Foremost is the fact that we were behind in 
processing the ever-increasing volumes of mail with fewer and fewer volunteers. Next, event 
surrounding standards activities effectively sapped all our energy (or so it seems!). Also 
with the uncertain future of Pascal News and PUG, lots of time was spent discussing 
"solutions." I found it really depressing to continue to have to cooperate with certain 
people and performing certain activities (e.g. someone suggesting some grand future for PUG 
such as a constitution and then requiring me to do all the transition work to implement it) 
that I don't like nor believe in. I still have my regular job to do here at the comp center 

Anyway, good news! With the help of Rick Marcus, and in the last week the air-borne 
reinforcements of Arthur Sale, Rick Shaw, and a work-liberated Jim Miner, we were able to 
deal #15 a knockout blow. The next issue (#16) will be a special one on the Validation 
Suite (see below) and my last one as editor. #16 should appear \fery shortly after this 
issue and wrap up the 78-79 academic year. 

I&s_Eytyci = Qf_Ea§Q§l_yew§ = §Qd_EUS 

(*Please see related correspondence in the Open Forum section.*) 

When we last left you, I had written an editorial and an open letter in #13 saying that I 

was quitting the editorship of Pascal News and my work informally coordinating Pascal User's 

Group, and that basically there were 4 alternative futures for consideration. One of these 

was a proposed constitution provided by Richard Cichelli which included a ballot to be 

returned by April 15, 1979. 

I claimed then that the constitution was probably the best alternative, and that the least 

likely alternative was to keep PUG the same, but to decentralize the work, 

I guess I was really wrong! 

Rick Shaw (to whom ballots were to be sent) tabulated 56 votes in favor, 22 votes agains 
and 2712 abstentions of the 2790 active members. 5 of the yes votes dissented on the 
by-laws. Some comments written-in included: the constitution effectively shuts out 
international members; affiliation with IEEE or ACM SIGPLAN was the best alternative. More 
than a dozen of the "no" votes were in favor of disbanding PUG altogether. 
In spite of their promises Steve Zilles (SIGPLAN Chairman) and Bruce Ravenel (on behalf of 
IEEE) did not send us letters to print for our consideration proposing how we might affiliat 
with them, much less inviting us to do so. So much for ACM and IEEE. 
I happened to go with Jim Miner to my first IEEE P770 / ANSI X3J9 Joint Pascal Standards _ 
meeting in Boulder the last week in April, and met many people with whom I discussed PUG's 
future (besides explaining our terrible workload, etc.!). The feeling by-and-large was 
that they wanted to see a good thing like an independent PUG continued, and that they had 
voted for the constitution because they way no other real choice, but ideally they would 
like to see PUG continued as it is now. 

There followed one of those smoke-filled-room meetings in one of the hotel rooms among Jim 
Miner, Scott Jameson, Rick Shaw, Rich Cichelli, and others (but not myself!) in which a 
heated (and smoky!) argument raged for over 4 hours. The result was the expansion of David 
Barron's idea by Jim Miner: the realization that the only important activity of PUG is the 
publication of Pascal News . Several people responded to Jim's initiative (see Open Forum), 
and the best news was that Rick Shaw volunteered to take over as editor and informal 
coordinator of Pascal User's Group for 2 years. Rick is a capable administrator (whereas I 
am not good at delegating responsibility), and he has the luck of being in a nice work 
environment at DEC's Atlanta Regional Office with ready access to clerical facilities, etc. 

We then realized that PUG could continue informally without a constitution and other politic 
baggage. The constitution vote could then be thrown safely out— after all, 97% of the membe 
did not vote! The last step was to actively decentralize the work so that Rick could avoid 
drowning quickly. We then started to recruit more section editors for Pascal News . The lis 
of new volunteers now looks like this: Rick Shaw - editor; Bob Dietrich and Greg Marshall - 
Implementation Notes editors; John Eisenberg - Here and There editor; Rich Stevens - Books 
and Articles editor; Andy Mickel and Rich Cichelli - Applications editors; and Tony Addyman 
and Jim Miner - Standards editors. Rick will simply forward material to them which they in 



turn will convert to camera-ready copy and return to Rick for paste-up. Meanwhile part of 
the subscription money to Pascal News will go to pay for clerical work (under Rick) for the 
mailing-label data base, word-processing tasks, printing, mailing, etc. Atlanta is the home 
of Georgia Tech and Georgia State University with whom Rick has close ties. 

We even got offers from the following people and organizations who have expressed the ability 
to help Pascal News in some material way: John Knight at NASA Langley, Rusty Whitney at 
Oregon Software, Marius Troost at Sperry Univac Minicomputer Operations, and Don Peckham at 
Pertec. So the future is bright. 

Frankly, at the present time it appears that Pascal News can be viable for only 2 or 3 more 
years. With the explosion in Pascal interest, the phrase "lingua franca" is often heard in 
reference to Pascal. The obvious implications of 1 ingua franca are that events surrounding 
Pascal will be covered thoroughly by every other computing journal and so will take over the 
role of Pascal News . 

In summary, we saved Pascal News and PUG from the near political demise foisted on us in 1978 

when the constitution idea was born. We'll have an informal PUG with no constitution by 

golly, or we'll have a constitution with no PUG! We've just altered the policy pages in 
Pascal News to protect ourselves from constitutions and politics in the future. 

J_Qt!iQg§ 

Pascal Standards The BSI/ISO standard's progress^ with productive and valuable American 
cooperation, has been remarkable and encouraging, proving those who have claimed such an 
effort would take at least 5 years dead wrong. See Standards in the Open Forum section. 

Pascal Validation Suite A new feather in Pascal's cap is the existence of a professionally 
produced Validation Suite of test programs to verify the standards-conformance, etc. of a 
given Pascal compiler. The collection of 300+ programs can be used by implementors and 
users alike to help enforce standards. See Standards in the Open Forum section. Pascal News 
#16 will be entirely devoted to the Validations Suite. 

Defective copies of Pascal News #14 At least one person has reported that his issue of 
Pascal News is missing pages 6-14 and has pages 15-22 duplicated. If you are suffering from 
the same problem, let us know and we'll help. 

Eurocheques David Barron sent along this note to European subscribers: "From time to time 
we are asked why we will not accept "Eurocheques", i.e. sterling cheques drawn on the 
subscriber's local bank. The answer is simple. A Eurocheque for <4 yields less than <3 
to the PUG bank account. The difference, more than 25%, is the charge made by our bank for 
processing the Eurocheque. So please ask your bank for a draft drawn on a U.K. or Irish 
bank, or pay by direct transfer into our Post Giro account (28 513 4000)." 

Pascal on Micros A large number of people have been complaining to us over the last year 
about our blind praise and support for Ken Bowles and his group's widespread Pascal interpreter 
for various micros popularly known as UCSD Pascal. They are expressing reservations about 
the lack of reliability and speed and the presence of non-standard features in UCSD Pascal. 
I'd like to make it clear that we don't blindly support Ken or anyone else even though we've 
printed some highly favorable items about UCSD Pascal in some past issues. (For some contrast 
see the checklist for UCSD Pascal in Pascal News #13 under DEC LSI-11.) Ken Bowles was one 
of the people who helped in the middle stages of Pascal's acceptance in this country. I 
might add that increasingly there is a trend among serious users of Pascal on micros to move 
away from UCSD Pascal to more standard, reliable, and faster implementations. 

An example is Andrew Tanenbaum's Pascal-E (see Implementation Notes), a highly portable Pascal 
implementation initially developed on PDP-11 's. It produces an optimal Pascal intermediate 
code called EM-1; the EM-1 optimizer on the 11 produces a full compiler in 20K bytes! Other 
examples are Boston Systems Office Pascal and 2 "native code" compilers for the Z-80 (from 
Indiana University and Zilog). According to Michael Rooney at BS0, their Pascal is a set of 
optimizing cross-compilers for use in burning ROM's. George Cohn at Indiana University has 
a compiler which can now compile itself (see Implementation Notes #13); Zilog seems to have 
a compiler as well (see Implementation Notes, this issue). Also be sure to watch Motorola's 
Pascal on the 68000 and National Semiconductor's Pascal on their 2903 and 2910. 

UNIVERSITY OF MINNESOTA University Computer Center 
TWIN CITIES 227 Experimental Engineering Building 

Minneapolis, Minnesota 55455 



c~> 

3> 



I— ' 



3> 



"H- 



Tidbits 



Peter C. Akwai, Schif ferstraBe 88 6000 Frankfurt /M. 70, GERMANY: "Yes, we now have a 
Northwest Microcomputer Systems 85/P. This is an 8085-based micro with 56k bytes of 
user-accessible memory, builtin screen and keyboard, and 2 8-inch floppy drives. It is 
distributed with TJCSD Pascal 1.4 (a bone of contention and disappointment to us since 
from the Bowles book Microcomputer Problem Solving Using Pascal we were led to expect the 
II. 3 release with graphics)." (*79/l/ll*) 

Gerald P. Allredge , Dept. of Physics, Univ. of Missouri-Rolla, 103 Physics, Rolla, MO 
65401: "Wilhelm Burger recommended that I contact you concerning Pascal implementations 
for IBM Systems 370 facilities. (I am particularly interested in getting his 
Pascal-based parser generator BOBSW running on the University of Missouri Computer 
Network, which is based on a S/370 168-158 couple.) We presently have the University of 
Manitoba Version 1 compiler, but Wilhelm thought that the Tobias and Cox version of 
Pascal 8000 would likely be substantially better. Can you give me an opinion on this? 
(If you are aware of any better S/370 version, I'd like to know about it also." 
(*78/7/14*) 

James A. Anderson , Dept. of Psychology, Brown University, Providence, RI 02912: "I am 
trying to find a Pascal program which can find the eigenvectors and eigenvalues of a 
real, symmetric matrix. An implementation of the Jacobi method is fine, or any alternate 
way of doing it. This is a very standard type of numerical task, so I suspect somebody 
must have done it. I would also be interested in finding out about programs for more 
general eigenvector and eigenvalue calculations if there are any around. I am doing some 
computer simulations of neural networks." (*79/'8/l*) 

Floyd 0. Arntz, 44 Grove Hill Ave., Newtonville, MA 02160 "I am particularly interested in 
Pascal Implementations available on soon-to-be be available on commercial time sharing 
services. Also I am considering PDP-11 or CY18(CDC) mini applications." (*78/12/l*) 



Arnold Bob , Digitron, 500 Fifth Ave., New York, NY 10036 : 
has UCSD Pascal based software for sale. We're especially 
graphics programs, however we're also interested in 
(*79/l/26*) 



"We were wondering if anybody 

interested in business and 

other applications programs." 



Edward W. Bolton , 4253 Moore St., L. A., CA 90066: "My interest is in implementing a 
subset of Pascal on an 8080 based system (SOL) in less than 44K(bytes) ." (*78/10/ll*) 

Father Mick Burns , St Katherine's Episcopal Church, Martin, SD 5 7551: "I operate a 24K 
Heath H8 system and am hot on the trail of a grant to upgrade to a 56K RAM and Heath DOS. 
As you probably know Heath will shortly make Pascal available to H8 and Hll users. 
...Particular interest is in CAI (Christian education)." (78/9/11*) 

Richard Brandt , University of Utah, Dept. of Physics, 201 N. Physics Building, Salt Lake 
City, UT 84112: "I have been running UCSD Pascal on my Terak's since last December. 
Although it is not a "pure" Pascal, computer science students who have used it have 
preferred it to the other two Pascal's on campus, specifically the ones on the Burroughs 
1700 and DECsystem 20... Our primary emphasis has been in the development of CAI 
material using both graphics and animation. We have developed the following: (1) a 
graphics editor; (2) a screen editor; (3) a CAI compiler; (4) a CAI interpreter; and (5) 
an algebraic answer analyzer." (*78/ll/15*) 

Robert Cole , GTE Automatic Electric Labs, 11226 N 23rd Ave., Phoenix, AZ 85029, (602) 
995-6900: Sent a letter on 78/10/30 soliciting help in finding a commercially produced 
PDP-11 to Intermediate code to Intel 8086 optimizing compiler written in Pascal. 

Lome Connel , University of Waterloo, Dept. of Computer Science, Waterloo, Ontario, Canada 
N2L 3G1: "We would like to obtain the SLAC Pascal compiler so that we may compare its 
performance and usablity to other Pascal compilers we have tried. Could you please 
direct us to someone in this regard." (*79/4/10*) 

Here and There With Pascal 



Paul F. Fitts, INNOVATEK MICROSYSTEMS INC., Smithfield Rd., Millerton, NY 12546: "We have 
an immediate application for preparing an extensive software package and wish to consider 
Pascal as the program language... We are interested in locating Pascal software, such as 
compilers and applications programs." (*78/10/12*) 

Charles D. Foley , 4 Knollwood Lane, Cold Spring, NY 10516: "To get to the meat of the 
request, I would like availability information on compilers for [IBM System/3 Model 



10]. 



(*79/2/26*) 



Till Geiger , Falkensteinweg 8, D-7910 Neu Ulm, Germany: "I am just a fan of Pascal. My 
knowledge of Pascal is rather limited. Last spring I started to do some Pascal 
programming for about 3 months at New Ulm (Minnesota) High School. The inspiration to 
use Pascal came from a Pascal News copy a friend lent me. Compared to BASIC, it seemed 
to offer a totally new field. Those three months I worked with Pascal I got little done, 
because there were no books or other aids around. But I started to like Pascal and would 
prefer it over BASIC. In May I left for Germany. And MECC [Minnesota Educational 
Computing Consortium] is unachieved here. The school I am going has a PDP-11 but only 
with BASIC. Other schools don't even have computers in their school. So I have to stick 
with BASIC. Maybe in the near future I will find some system with Pascal in the Ulm 
area." (*79/4/23*) 

Tony Gerber , etc., Basser Dept. of Computer Science, Madsen H08, University of Sydney, 
N.S.W., 2006 Australia: "Our department has finally switched to teaching Pascal, thus 
joining every other major Australian university in this regard." (*79/7/18*) 

George W. Gerrity , University of New South Wales, Dept. of Mathematics, Australia: "At 
the moment, we have several PDP-11 machines running RSX-11, RT-11 (and UNIX part-time) 
and are looking desperately for a Pascal and/or Concurrent Pascal compiler or interpreter 
which will run under RSX-11D." (*78/7/17*) 

J. Daniel Gersten , General Electric Co., Syracuse, NY 13201: "I am running the Swedish 
Pascal on a PDP-11/60 RSX-11M system. I have succeeded in compiling the compiler on the 
PDP-11 for version 4 and am presently working on the same for version 5." (*78/ll/17*) 

Jim Gilbert , Systems Structuring Technology, 30436 N. Hampton Rd., Laguna Niguel, CA 
92677: "Get some cooperative soul to donate original copies of issues 1-8 for 
reproduction at exorbitant rates for the faithful who must have them." (*78/9/30*) 

Pete Goodeve, 3012 Deakin St. #D, Berkeley, CA 94705: "We are using the University of 

Lancaster (P4) Pascal as the basis of a real-time experiment control installation. As 

you can guess, this needed some extensions to the systeml (mainly consisting of an 

assembly language interface via external procedures, from which we can hang any kludges 
we like)." (*78/ll/27*) 

Geoffry R. Grinton, Herman Research Laboratory, Howard St., Richmond, VA: "we are at 
present using OMSI Pascal-1 under RT-11 on a PDP-11/34 and several LSI-11 systems and 
AAEC Pascal 8000 on an IBM 370" (*79/4/24*) 

James Hargreaves , POB 14734, Cincinnati, OH 45214: "I plan to use Pascal on 990/4 and 
990/10 TI computers as well as 9900 and 770 line equipment manufactured by TI that is 
compatible with the 990/4 and 990/10 cpu's. ... If you know of anyone in the USA who 
has converted the DEC based Pascal and Concurrent Pascal software on the TI 990 or 980 or 
960 cpu's, I would like to get in touch with them." (*78/12/4*) 

J. Niel Haynie, North Ridge Data, 971 E. Commercial Blvd., Fort Lauderdale, FL 33334: "We 
at North Ridge Data have recently committed ourselves to a major software development 
effort in the Pascal language. Specifically, we will use a micro computer implementation 
of UCSD Pascal in a real-time, interactive application. .. .One of our primary concerns is 
the standardization of Pascal. We hope that the problems with Basic and its 50-odd 
versions does not befall Pascal. This would truly limit the expansion of Pascal into its 
deserved position as the "Lingua Franca" of computing." (*79/3/16*) 

Ed Johnston , 715 6th St., Rochester, MN 55901: "As an IBM employee, I am attempting to 
generate some interest in Pascal within the company. Few people seem to have heard of 
it." (*78/12/12*) 






=fe 
I— * 



GO 

m 



3> 
CD 



Here and There With Pascal 



Robert S. Kirk , American Microsytems Inc., 3800 Homestead Rd., Santa Clara, CA 95051: 
"American Microsystems, Inc. currently has Pascal running on our 6800 MDC's. We have a 
compiler on order from the University of Tasmania for our large Burroughs B7700 computer, 
and we are looking for a Pascal compiler for the PRIME 400 computer. Hopefully, your 
Users Group can aid us in locating Pascal compilers and in making this relatively young 
language a standard programming tool at American Microsystems, Inc." (*79/l/ll*) 

Les Kitchen , Comp. Sci. Ctr., Univ. of Maryland, College Park, MD 20742: "Very pleased to 
see draft standard in #14 especially type-equivalence defining occurrence & for-loop 
semantics." (*79/3/15*) 

David A. Kohler , 1452 Portobelo Dr., San Jose, CA 95118: "I love the PN idea, but find 
the format a little disconcerting and difficult to read. Keep up the fine effort and 
emphasize those algorithms and software tools" (*78/12/28*) 

Pierre J. Layelle, Rua Pompeu Loureiro, N 120 APT. 602, 22061-Copacobana, Rio De 
Janeiro-Brazil: "Traveling PUG members welcome!" (*78/ll/17*) 

Richard Linton , 3027 N. Shepard Ave., Milwaukee, WI 53211: "Here at the U. W. -Milwaukee 
we are using both the Navy's and U. W. -Madison Pascals and we are currently running 
evaluations between the two." (*79/3/3*) 

Paul C. Lustgarten , Computer Sciences Dept., U of Wisconsin, 1210 W. Dayton St., Madison, 
WI 53706: "I am a third year grad. student and teaching assistant at Univ. of Wise - 
Madison, and have been eager to use Pascal to teach introductory programming since I 
first used it. Although most of our (non-numeric) courses use Pascal whenever possible, 
almost all of our introductory courses use FORTRAN, COBOL, or BASIC! The only exception 
to this is the version of the intro. course for potential Computer Science majors, which 
uses Pascal... Also — my wife is a programmer for a company that produces data base 
systems on Data General Novas. Apparently, they view the execution speed of their 
systems as being of primary importance (over such other things as software reliability, 
cost/time of development, maintenance, etc.), and don't believe that any high-level 
language could possibly compete in this regard with the several dialects of assembly 
language they currently use (their comparison is with DG FORTRAN). Does anyone have any 
statistics or convincing arguments?" (*79/l/9*) 



David Matthews , Process Computer Sys terns . 
actual programs (PUG News #12) was 
style." (*78/8/21*) 



750 N. Maple Rd., Saline, MI 48176: "Printing 
a great help in learning better (easier to read) 



Jim McCord , 330 Verada Leyenda, Goleta, CA 93017: "I'm a hobbyist using UCSD Pascal. 
Main interests are graphics, teaching-type programs and sophisticated games ( a la 
Adventure ). How many other hobby-Pascal 'ers are there?" (*78/l 1/14*) 

Monte Jay Meldman, M. D., 555 Wilson Lane, Des Plaines, IL 60016: "I am interested in 
knowing about word processers and accounts receivable and things like that on Pascal and 
would appreciate any information you can give me about applications that have been 
written for the PDP-11/40, RSTS/E. It really sounds like Pascal is interesting." 
(*78/ll/15*) 

Paul Miller , Avera Technology, 1643 Wright Ave., Sunnyvale, CA 94087: "My company has 
recently determined to use Pascal as the primary implementation language for a new 
product development. Our current plan is to do program development on a PDP-11 system 
under RSX-11M and then cross-compile for the microprocessor in our product. Any 
information you could send me about... DEC Pascal, or available help in starting up a 
Pascal product would also be appreciated." (*79/5/7*) 

Anne Montgomery , POB 30204, Lowry AFB, CO 80230: "McDonnell Douglas has developed a 
CMI/CAI system here on Lowry Air Force Base called the Advanced Instructionial 
System(AIS). ...This system is basically an extension of the CDC Scope 3. 4. 3 (level 439) 
operating system. For the development of AIS we have developed a Pascal-like language 



called CAMIL. The machine coded generater for the CAMIL language is written in Pascal. 
Camil,' while intended primarily for CAI/CMI applications, also happens to be a very good 
general purpose language but can be run only in the interactive time sharing environment. 
Until a batch version of CAMIL can be developed, we are also using Pascal as our batch 
language. It has been used primarily to create batch versions of CAMIL programs because 
of the similarities between Pascal and CAMIL." (*78/10/12*) 



Greg Morris , 297 Turnpike Rd., Westboro, 
quickly find a job working with Pascal. 



MA 01581: "Much 
' (*79/3/28*) 



to my surprise, I was able to 



Maurice R. Munsie , Network Computer Services, 69 Clarence St., Sydney, Australia, 2000: 
"We are distibuting in Australia OMSI Pascal-1. A number of sales have been already made 
and plans are being made for the OMSI implementors to hold workshops in Australia later 
this year." (*78/7/27*) 

David Nedland-Slater , 1, Buckland Close, Farnborough, Hants. GU14 8DH, United Kingdom: 
"I am interested in Pascal for micro work as a real alternative to assembler. I hope 
Pascal keeps us away from nasty bit twiddling." (*78/10/3) 

Niel Overton , Computer Systems & Services Inc., Box 31407, Dallas, TX 75231: "Wanted- an 
accounting package in Pascal. Wish to convert to target machine: TI DS990-2." (*79/9/5*) 

G. Dick Rakhorst , Manudax Nederland B. V., 5473 ZG Heeswijk(NB) , Holland, PB 25, 
Meerstraat 7: "As a distributor of Motorola Semiconductors Division in Holland we will 
introduce within one month a Dutch-written Pascal compiler for the Motorola MC 6800 
microprocessor and also will Motorola introduce a Pascal compiler soon for the new MC 
6809 and the 16 Bits MC 68000." (*78/ll/27*) 

F. Eric Roberts , Perkin Elmer Co., Mail Station 284, Main Ave., Norwalk, CT 06856: "I'm 
introducing the virtues of Pascal to a Fortran, PL/I and assembler community, for 
applications and small systems work. Full marks for fantastic Pascal News." (*78/10/5*) 

Robert E. Rogers , Jr., 18625 Azalea Dr., Derwood, MD 20855: "I have received a copy of 
the University of Bratislava Pascal-b compiler for CDC 3500 Machines. We have been using 
it for only a short time and are attempting to compile a list of differences between this 
implementation and the UCSD Pascal. Hopefully by early spring we'll have something 
ready." (*79/l/l*) 

Antti Salava, Munkkiniemen Puistotie 17A 13, SF-00330 Helsinki 33, Finland: "...University 
of Helsinki, where I was implementing Pascal-HB compiler on Burroughs B6700. It's been 
running now a couple of years without any fatal crashes." (*7 8/8/28*) 

John M. Smart, Smart Communications, Inc., 866 United Nations Plaza, New York, NY 10017: 
"WANTED - conversion program or part time programmer, capable of converting programs in 
Burroughs extended ALGOL for B6 700 into Pascal for PDP-11 or other systems, including 
B6700." (*79/8/l*) 

Edward R. Teja, EDN, Cahners Publishing Company Inc., 221 Columbus Ave., Boston, MA 02116: 
"EDN is preparing to write an article dealing with the current interest in Pascal. Our 
intention is to look at both the historical and contemporary aspects of the situation; we 
want to put the situation into its proper perspective." (*78/12/15*) 

M. Thornbury , Totalisator Agency Board, P. 0. Box 3645, Wellington, New Zealand: "The 
N.Z. TAB are presently designing a large-scale wagering system utilising INTERDATA 
computers. We originally decided to use the RATFOR preprocessor as a front end to the 
FORTRAN compiler, but feel that FORTRAN VII does not have a sufficient instruction set to 
perform certain functions efficiently. We would therefore like to write our software in 
Pascal if we can locate a compiler presently running on an INTERDATA 8/32." (*7 9/3/1 3*) 

Bob Wallace , Microsoft, 10800 NE 8th , #819, Bellevue, WA 98004: "Microsoft is developing 
a microcomputer Pascal compiler." (*79/l/18*) 

Marie Walter , Scientific-Technical Book and Copy Center, 17801 Main St., Suite-H, Irvine, 
CA 92714: "...I am also enclosing our current bibliography on Pascal which has proved 
very popular. CIT has been distributing it with their literature on the Microengine and 
I get calls from all over the country from people just getting into Pascal. Item 3: I 



CO 






m 

XX) 



3> 
cr~> 
m 



thought you might be interested in our Pascal tee shirts which we just started turning 
out. They come small, medium, large and can be on any background. $4.95 per." 
(*79/3/23*) 



FfS^ SaENTIRC-TECHNICAL 
lrl^l BOOK CENTER 

I^SPI 17801 MAIN STREET 
yliy IRVINE. CALIFORNIA 92714 
■fc-^B C714) 557-8324 

[* letters on blocks can be clear, 
red* yellow, or blue *) 
prices subject to change 
by publishers 




in California add 6% sales tax 
mail orders add $1.50 postage 



Allen A. Watson , The Record, 150 River St., Hackensack, NJ 07602: "The Record (a 
newspaper) is not currently using Pascal on our 370/1 38s, but we are considering doing so 
in view of a possible move in the near future to other mainframes. So what we are 
looking for is general information about Pascal, advantages vs. other languages — that 
kind of thing." (*79/3/2*) 

Robert Williams , MicroMouse Enterprises, Box 69, Hollywood, CA 90028: "I am building two 
minicomputers; the first of which was up-n-running earlier this year: a DEC LS1-11 with 
20 kwords RAM and two floppy drives. The second is equally powerful (or maybe more so); 
it is the Alpha Microsystems AM-100. Pascal is to be the main software link between 
them. I have not yet obtained any code, altho I have the AlphPascal Programming System 
users reference manual which is a bargain at $7.50. I believe the source was from UC San 
Diego." (*78/10/6*) 



D. J. Yates , Botany Dept 
am running two North 



University of Queensland, St. Lucia, Qld, Australia 4067: "I 
Star Horizons. Don't yet have Pascal-but it is on order. Very 
pleased with the Horizons." (*79/3/14*) 



Earl M. Yarner, 195 Varick Rd., Newton, MA 02168: "...Hewlett-Packard presently supports 
FORTRAN and assembler but I hear rumours that they are working on adding Pascal. I am 
afraid that they will take a long time to get ready, so I would like to put Pascal 
'on-line' myself, hopefully within the next year. Any advice or assistance that you or 
any other member of the group can give me would be appreciated." (*79/3/19*) 



Pascal in the News 



ACADS Newsletter (The Association for Computer Aided Design Limited, in Australia), No. 
19, December 1978: "PASCAL-Everybody's Language?" A short note on the growing 
popularity of Pascal, the availabilty of compilers, and how to get the Australian 
Atomic Energy Commission IBM OS/ compatible compiler. 

AEDS MONITOR , Apr/May/June 1979: "Basic Thoughts on BASIC", on the use of BASIC as a 
teaching language. The author sees BASIC as a bad choice, sees hope with possibly 
Pascal, and would like to see the fundamentally important things involved in teaching 
programming be brought out. 



Australian , July 24, 1979: "Pascal Program" announcing the release of 
Validation Suite by Professor Arthur Sale at the University of Tasmania. 



the Pascal 



Business Week (industrial edition), April 23, 1979, pg 46: "Computers Rush to Talk to 
Pascal" covers the growing use of Pascal by major manufacturers. "Pascal is now the 
odds-on favorite to become the dominant language for microprocessors" says the article 
along with many other reasons for making the switch to Pascal. 

B yte , September 1978, pg.71: An ad for Northwest Microcomputer Systems NMS 85 Series 
which uses a likeness of Blaise Pascal as its drawing point. Needless to say, Pascal is 
offered with the machine. 

Byte , October 1978, pg.129: An ad for a new book entitled "A Concurrent Pascal Compiler 
For Microcomputers", by Alfred C Hartmann. 

Byte , November 1978, pg.142: A letter entitled "READER Cs PASCAL ALTERNATIVE", Which is 
one reader's comparison of C and Pascal. 

Byte , December 1978, pg.178: An ad for Cyber -Score Inc, Pontiac, Michigan, offering Pascal 
softwore, mainly business-oriented. 

Byte , February 1979, pg.185: A HELP WANTED ad for Fischer and Porter, Warminster, PA, for 
software engineers with among other qualifications, a knowledge of Pascal. 

Byte , March 1979: A letter critiquing the article "Creating a Chess Player" in the 
October 1978 issue, which was part of a series of articles on a chess program written in 
Pascal. 

Also an ad for a Pascal Engine, from Cutting Edge of Technology, pg.78. 
pg.107: A short note: "More companies jumping on the Pascal bandwagon". 

pg.59: an ad for another implementation of Pascal, on Control Systems, Inc. UDS 470. It 
says that Pascal has been used on their machines to control grain elevator operations. 
pg.237: An ad for Oregon Software's OMSI Pascal, and how to get it. 

Byte , April, 1979, pg.239: "Pascal versus Basic...", an article comparing Pascal to BASIC. 

Byte , May, 1979, pg.20: An ad for Western Digital's 16-bit Pascal Microengine. 
pg.57: An ad announcing Pascal for the North Star Horizon. 

pg.118: A note that Microsoft plans to announce a Pascal Package plus a note about the 
U.S. Joint Pascal Standards Committee. 

pg.224: A letter which opposes the bundled packaging of Pascal on microcomputers, with 
UCSD Pascal as its target. 

Byte , June 19 79, pg.130: 2 short notes, one about Pascal for the 6800 and another about 
the DOD's Pascal-like language, ADA. 

pg.194: An article which mentions an APL interpreter written in Pascal. 

pg.202: An ad for 'Tiny Pascal' for TRS-80 and North Star from: Supersoft, POB 1628, 
Champaign, IL 61820. 

Byte , July 19 79: In the section NYBBLES, an article about the "TINY Pascal Compiler", 
which has now been rewritten in 8080 assembly language. The compiler is based on the one 
published in earlier issues of Byte . 

pg.146: An ad for Technology System South's (Loris, SC) Pascal Microengine. 
pg.169: An ad for TRS-80 Pascal (a version of UCSD Pascal), available from the FMG 
Corporation, POB 16020, Fort Worth, TX 76133. 

pg.239: An ad for a Pascal compiler for the Zilog Z80. The claim is that it "is often 
twenty times as fast as UCSD's implementation". Available from: Ithaca Audio, POB 91, 
Ithaca, NY 14850. 
pg.240: An announcement for M6800 Pascal from Central Systems (Williamsburg, VA) . 

Central Scientific Computing Facility Computer Newsletter (Brookhaven) , Volume 18, no. 7, 
pg.110: A note mentioning a 7600 version of Pascal installed on MFZ, which is essentialy 
the same as Pascal version 1 on the 6600. 

Computer Design , October 1978, pg.188: "CPU Interfaces Processor to S-100 Bus, Providing 
16-Bit Minicomputer Power and Pascal", an announcement that there is available to the 
user of Marinchip Systems M9900 CPU board, which utilizes Texas Instruments TMS9900 
processor, both concurrent and sequential Pascal. Both compilers are converted from 
those developed by Per Brinch Hansen. Marinchip Systems is located at: 16 Saint Jude 
Rd., Mill Valley, CA 94941. 



"O 
CO 

3> 



GO 

m 






Computer Design , March, 1979, pg.179: "Pascal Adaptation to Development Center Will Speed 
Programming", American Microsystems will support Pascal on its MDC-100 product line. 

Computer Weekly , November 9, 19 78, pg.7: "Now National Opts for Pascal, the People's 
Language", an article about National Semiconductors decision to support Pascal and what 
National considers to be the advantages of Pascal. 

Computer Weekly , May 24, 1979: "Data General Offers Pascal" Data General's Micron, an 
operating system for their 16-bit MicroNova, which comes with a Pascal compiler. 

Computer Weekly , May 31, 1979: "DEC Pascal for VAX" about a soon-to-be-released native 
mode Pascal compiler for the VAX-1 1/780 by DEC and the University of Washington, plus the 
fact that the University of Adelaide, Australia, ordered 3 VAX machines partly because of 
the availability of the compiler. 

Computer Weekly , (Pacific) August 10-16, 1979: Letter by Arthur Sale in response to a 
quote from Cobol pioneer Grace Hopper, 'Cobol has knocked PL1 dead and it will do the 
same to Pascal'. Professor Sale asserts ' that Pascal is not a "fad 1 ". 

Computerworld : (Many issues) ads for Oregon Software (OMSI) PDP-11 Pascal. 

Comput erworld , February 12, 1979: An ad for Sperry-Univac, Minicomputer Systems, 
introducing SUMMIT. Pascal is the headlined language that goes with the system although 
there are other languages available. 

Computerworld , February 26, 1979: "Seminar to Consider Pascal Programming" announcing a 
seminar "Pascal Programming for Mini- and Microcomputers" to be held April 23-27, 1979. 

Computerworld , March 12, 1979, pg.99: A want-ad for programmers at Sperry-Univac which 
mentions of Pascal as parts of the qualifications. 

Computerworld , March 19, 1979: "Pascal Now on Level 6 Mini" about the availability of an 
extended Pascal compiler for the Honeywell, Inc. Level 6 minicomputers. The Pascal has 
shown programming time reduced by a factor of three on small to medium sized programs and 
up to 10 times for large programs compared to FORTRAN, COBOL, or assembly language. 

Computerworld , March 26, 1979: "Academic-Industrial Union Ends in VAX Pascal" about the 
University of Washington and DEC's cooperative effort to produce a Pascal compiler for 
the VAX-1 1/780. 

pg.51: "Pascal Ready for Eclipses under AOS", about the availability of a Pascal 
compiler from Gamma Technology Inc. , for use on large scale Data General Corp. Eclipse 
minicomputers running under AOS. Also, on the same page "Package Backs PDP=11 
Transaction Processing", about Cytrol's (Edina, MN) CSS-11 package for PDP-11' s providing 
transaction, database and communication processing allowing applications programs written 
in Pascal. 

Computerworld , May 14, 1979: "DOD Stops Work on 'Red' Gives Go Ahead to 'Green'", about 
the progress of the DOD's study of the 'Red' and 'Green' languages. Green was chosen and 
is to be called ADA, after Lady Ada Lovelace, who assisted Charles Babbage. 

Computerworld , May 28, 1979: "Languages, Operating System Available for DG Micronovas", 
about Data General Pascal for the MicroNovas, plus a want ad for programmers at Control 
Data in St. Paul, MN who must know Pascal among other qualifications. 



Computerworld , July 16, 1979, pg.41: "Lawsuit Could Set Dangerous Precedent" 
which mentions the use of Pascal over FORTRAN. 



an editorial 



Computerworld , July 23, 1979: "Apple Offers Users Plug-In Pascal Option", about the 
"Language System" on Apple computers, a plug in option for the Apple-II that allows users 
to develop software in Pascal. The package is available at your Apple dealer. 

Compute rwo rid , August 6, 1979: "Pascal Now Available for Zilog Z80 Systems", announcing 
Pascal for Zilog Z80 sy terns, available from Zilog at 10340 Bubb Road, Cupertino CA 95014. 

Computerworld , August 13, 1979: "Pascal/8002 Development Package Debuts", an announcement 
of the Pascal/8002 Universal Program Development Package, a software product designed for 



use with the Tektronix, Inc. 8002 Microprocessor Development Laboratory, by the Pascal 
Development Co., Suite 205, 10381 S. DeAnza Blvd., Cupertino, CA, 95014. 

Computerworld , August 20, 19 79: "Pascal Runs on DG Units", announcing the first in a 
series of five implementations of Pascal for use on Data General Minicomputers, developed 
by Rational Data Systems, 245 W. 55th St, NY, NY 10019. 

Computerworld (Australian), August 3, 1979: Announcement of the availability of the 
Validation Suite for Pascal, developed in Australia and England. "Validation Suite for 
Pascal". 

Computing News (Computing Services, Northern Illinois University), December 1978: An 
announcement of the installation of the University of Manitoba Pascal compiler for the 
IBM 360/370. 

Computing Europe , April 5, 1979, pg.l: "Pascal Draft Breaks US Language Grip", describes 
the British Standards Institutions leadership under Tony Addyman for an International 
Standard Pascal . 

Computing Europe , March 29, 1979: "Pascal is Top of the Class", concerning the use of 
Pascal for trainee programmers. The results of a study have shown Pascal to be a 
justified choice for a language to learn programming. 

Computing Europe , April 19, 19 79: "Floreat Pascal" a letter from C. A. G. Webster 
referencing the previous article 'Pascal is top of the class', and after 6 years and 500 
students agrees wholeheartedly. 

Computing Europe , May 3, 1979: An article on the rapid acceptance of Pascal in Australia. 

Computing Europe , May 24, 1979: "DG Offers 'Fast Pascal' on two Major 
Systems", announcement about an across the range compiler for Micronovas to Eclipses, 
which is according to a spokesman '...not much of a gamble. If you look at high level 
programming languages available on mini -based machines, there is not much choice'. 



3> 



Computing Europe , August 6, 1979: 
the use of Pascal in Australia. 



"Australia Loves Pascal", a short note about the rise in 



Data Communications , March 1979, pg.16: "High-level language attracting new commercial 
users "An article concerned with using Pascal for data communications, with Sperry 
Univac's Summit operating system used as an example. 

Datamation , July 1979: "Pascal Power", a collection of 4 articles on Pascal, dealing with 
Pascal's future, its use by the DOD, Pascal's structure, and its uses with micros and 
minis . 

Datamation , August 1979, pp. 166-172: Announcements for Apple II Pascal option, Zilog's new 
Z80 Pascal compiler, and Digicomp Research's new Pascal 100 system. 

Diebold Research Program Document Number T23-V 1113: Titled "Trends in Systems Software: 
1985, 1990, 1995", on page 30 has a short shot at Pascal. The document is marked 
"Confidential-For Client Use Only", so I did not take the liberty of copying it. (John 
K. McCandliss) 

Dr. Dobb's Journal of Computer Calisthenics and Orthodontia , February 1979, no. 32, pg.29: 
A fairly complete Pascal bibliography by Mike Gabrielson. 

Electronic Engineering Times. May 28, 1979, pg.10: An article about Pascal being used on 3 
major minicomputers by DEC, Data General, and Texas Instruments. 

Electronic Engineering Times, June 25, 19 79, pg.30: "Pascal Touted by Engineers As Help 
For High Software-Development Costs, But Not Seen As Panacea", which discusses the 
advantages of Pascal to engineers, and also discusses the flaws of Pascal implementations 
at this point. 

Electronic Engineering Times , Aug 20, 1979: "Plethora of PASCAL Possibilities Provided for 
Data General Users", gives information on how to obtain Pascal for Data General's 



3> 
CD 



advanced operating system, developed by Rational Data Systems. 

Electronics , December 21, 1978, pg.6: "Obeisance to Pascal Inventor", 
Niklaus Wirth, explaining his choice of the name Pascal for the language. 



a letter from 



Electronics , June 7, 1979: The cover article "Putting Pascal to Work", is about the 
adaptation of Pascal to Texas Instruments machines. Part 2 of this article covers the 
microprocessor version of TI Pascal. 

Electronics , August 16, 1979, pg.33: A notice that Softech has acquired control of UCSD 
Pascal. 

Florida State University Computer Center Newsletter: A note that release 2.3 of the E.T.H. 
Pascal compiler is going up on June 11, 1979. 

ICCC (Imperial College, London Computer Center Newsletter), March 1979: "Programming 
Notes-Pascal", a short note about the increased use of Pascal at ULCC, followed by a few 
references to Pascal. 

Intelligent Machines Journal . February 28, 19 79: "New Micro Offers Pascal in ROM for 
OEM's", another announcement for CSI Microsystem's (Kansas City, KS) UDS 470 computer 
with Pascal. 



Silicon Gulch Gazette , March 28, 1979, pg.25: "Pascal: An Aggrressive Young Language the 
Way Up", announcements for Pascal presentations at the Fourth Annual West Coast Computer 
Faire in San Francisco, May, 1979: Tom Pittman, a user of Western Digital's Pascal 
Microengine, Jack Sharp for Varian Research, and Marie Walter on the Midwifing of a 
Pascal Standard. 

Small Systems World , August, 1979, pg.32: An announcement for Pascal accounting software 
by P.S. Inc, Fargo, ND. 

UMD Computer Center Newsletter (U of Minnesota, Duluth) , February, 1979, pg«5: An 
announcement that Pascal-6000 Release 3 has been installed on their Cyber 171. 

WSU CCN (Washington State University Computer Center Newsletter), April 3, 1979, pg-4: 
"Pascal Under the Batch Monitor", a notice that Pascal 8000 is now available on the 
Amdahl 470. 



Pascal and Teaching 



We've received good response to this new section; unfortunately, in spite of 3 good contributions 
for this issue, we decided to postpone them to issue #17 so that we can save space here. Sorry. 



Intelligent Machines Journal , April 18, 1979, pg»8: "Pascal Advancement Society of 
California", an announcment of a group for the exchange of information about Pascal. It 
should be noted that this group is not PUG California style, but rather a local group 
that hopes to have its members cooperate. to obtain Pascal systems and programs. For 
information contact Mark Gang, 2262 Fairvalley Ct . , San Jose, CA 95125. 



Ada 



(ALIAS DoD-1) (ALIAS Green) 



Interface Age , June 1979: The first in a series of articles entitled "The Pascal 
Notebook", the others following in July and August. The article is a tutorial on Pascal 
and may be of interest to those just learning programming, in particular Pascal, and 
especially to students who are for the first time learning to program in Pascal. 



MACC NEWS #3 (University of Wisconsin, Madison Academic Computer center) January 
announcement of a new UW-Pascal release for the Univac 1108. 



1979: An 



MICC Digit , (Middle Illinois Computer Cooperative Newsletter) January 19 79, pg.3: An 
answer to the question "How do I format output from a PASCAL program?" 

Minicomputer News , November 9, 1978, pg.24: "LSI Chip Set Directly Executes 16-Bit Pascal 
Application Code", another announcement about Western Digital's Pascal Microengine. 

Minicomputer News , February 1, 1979, pg.20, pg.30: "Sperry Opens V77 Minis to Pascal", and 
"Micro Offers Pascal in Prom", another CSI minicomputer announcement. 

Mini -Micro Systems , November 1978, pg.10: "Jumping on the Pascal Bandwagon", an article 
what many companies are doing with Pascal, in this case all manufacturers of micros. 

Mini -Micro Systems , March 1979: "Pentagon to Debut ADA; Commercial Vendors Wary", about 
commercial vendor reaction to ADA. 



Many Pascal Users are asking about Ada. How good is it? Is it just like Pascal only 
better? When will we see it? Well, back in the heart of Pascal country we have analysed 
Ada, and we regret to say that its resemblance to Pascal is so slight that we may not 
devote any more space in Pascal News to it after this. Ada is a very large and complex 
language, which should be illustrated by the following statistics. There does not exist 
as yet any compiler for it, and what such an implementation would look like is not 
certain. It has the declaration-bef ore-use feature of Pascal which was intended to allow 
one-pass compilation, but rumour has it that seven passes through the symbol-table may be 
necessary to resolve potential ambiguities of the overloading. The resolution of 
overloading ambiguity is too complex to document, so probably programmers will have to 
leave that to the compiler to resolve. Who wants to go back to languages that can't be 
understood? 

To quote Charles Bass, general manager of Zilog's Microcomputer Systems Division: "Ada 
will become a millstone around our necks" (Mini-Micro Systems, March 1979). 

Edsger Dijkstra prophetically said that he hoped that Pascal was not better than all its 
successors. He may have been right to worry. 

Size of Defining Document 
190 pages 

(Pascal J&W = 35 pages, ISO draft standard = 43 pages) 






Mini -Micro Systems , May 19 79, pg.10: A letter entitled "Disenchanted with Pascal", in 
reaction to the above mentioned article "Jumping on the Pascal Bandwagon", which claims 
that Computer Automation has a better language (ALAMO) than Pascal, and that Pascal is 
obsolete. 

The OEM Computer Newspaper , November 7, 19 78: "Pascal Takes Off", a short article about 
the success of Pascal. 

Sandia Computing Newsletter , No. 05/19 79, May 1, 19 79: "Pascal on NOS", an announcement 
that Pascal-6000 is available on NOS for for the CDC 6600. 

Scientifi c American , August 1979: Two ads, one for Oregon Software (OMSI) and their use 
of Pascal, the other an ad for the Apple Computer, which mentions that Pascal is 
available to users of the Apple. 



Number of Reserved Words 
62 

(Pascal = 35) 

"Features" of Ada 

Generic procedures, overloading of identifiers and operators, confusing 

abstraction and representation for real types, 

much syntactic sugar, 

too many ways to do the same thing. No sets! No files or sequences in 

the Pascal sense. 

Yet another bizarre set of operator precedence rules. Optional omission 

of actual parameters (coupled with two sets of parameter association 

syntax and default values). Ability to freely specify representation of 

abstract notions without separation of concerns. 



Purpose of Ada 

Acceptance by DoD as a uniform programming language for real-time and 
other applications. So far only the US Army have shown interest, 
even though the very complexity of Ada should appeal to the military 
mind. 

Perhaps the biggest shame is that a beautiful name like Ada, and a woman like Lady 
Lovelace, should be associated with such an insensitive creation. 



Letter to the Editor, 
Australian Computer Bulletin. 



27th August, 1979 



Programming Language Ada 



Keen watchers of the U.S. Department of Defence will have been observing the 
progress of the High Order Language Commonality program. Starting in 1975 and 
progressing through a series of specifications known as Ironman, Steelman, etc, 
the U.S. DoD has now arrived at a draft of a new programming language called 
Ada after Ada Augusta, Lady Lovelace, the first programmer. 



A copy of the specification 

Association for Computing Machinery 
P.O. Box 12015, 
Church Street Station 
New York, NY 10249 



for those interested, is available from 
Inc. , 



as Volume 14, Number 6, June 1979, 



(US $ 22.00) 
Parts A § B of SIGPLAN Notices. 



Ada is stated as being heavily influenced by Pascal. I must say, however, 
that I found this heavy influence rather hard to detect on reading the documents: 
to me it seems to clearly and definitely belong to the Algol 68, PL/I or C class 
of languages in size, features, and basic principles. Apart from a few 
concepts, the resemblance to Pascal is more like a parody. 

The Department of Defence have, of course, solicited comments on the draft. 
Since it would be very improbable that they would change it substantially, it 
seems likely that a slightly modified Ada will become a Defence standard in 
1980. This means that it will be important in the U.S.: I now have consider- 
able doubts that its influence will be as widespread elsewhere (or in industry) 
as some people have predicted. However I may be wrong - there is no limit to 
the extent to whicli we ignore flaws, and Fortran 77 stands as mute witness to 
that fact. 

Arthur Sale, 

Professor of Information Science. 



Also in the big selling stakes is Programming in Pascal by Grogono, which 
has sold over 35,000 copies, with a single order of 10,000 copies going 
to Motorola. 



Book Reviews 

We understand that Jan Hext, Basser Department of Computer Science, University 
of Sydney, New South Wales 2006, Australia, has written a comprehensive review 
of all the Pascal textbooks now available which is to appear in a special issue 
of an Australian journal called Microsystems . We hope to get permission to 
reprint Jan's article in Pascal News, but in the meantime we can only extract 
the citation and one column of a table of comparisons. 

Introductory books: 

Bowles, K.L., Micro computer Problem Solving using Pascal, Springer-Verlag, 

New v 'ork, 1977, 563 pages, $A 11.45 
Conway, R.W., Gries, D. and Zimmerman, E.C., A Primer on Pascal, Winthrop 

Publishers Inc., Cambridge, Mass., 1976, 433 pages, $A 14.75 
Grogono, P., Programming In Pascal, Addi son-Wesley Publishing Inc., 1978, 359 

pages, $A9.95 
Jensen, K. and Wirth, N. , Pascal User Manual and Report, Springer-Verlag, 

Berlin, 1974, 170 pages, $A 8.70 
Kieburtz, R.B., Structured Programming and Problem- Solving with Pascal, 

Prentice-Hall Inc., Englewood Cliffs, 1978, 365 pages, $A 14.75 
and Barrett, H.J., Programming via Pascal, Cambridge University Press, 

in press, about 250 pages. 

Weingart, S.W. and Perlman, D.M., An Introduction to Programming 

and Problem-Solving with Pascal, Wiley & Sons Inc., New York, 

394 pages, $A 21.25 (hard-cover), $A 13.15 (soft cover). 

Introduction to Pascal, Heyden, 1976, 129 pages, $A 13.75 
J. and Elder, J., Introduction to Pascal, Prentice-Hall Inc., Englewood 

Cliffs, in press, about 220 pages, $A 13.95 
Wilson, I. P. and Addyman, A.M., A Practical Introduction to Pascal, MacMillan 

Press Ltd., London, 1978, 148 pages, $A 9.95 






=8= 
I— » 



Rohl, J.S. 



Schneider, G.M. 



Webster, C 
Welsh 



A.G., 



Advanced books: 

Alagic, S. and Arbib, M.A., The. Design ofi Well- Structured and Correct Program*, 

Springer-Verlag, New York, 1978, 292 pages, $A 13.60 
Coleman, D., A Structured Programming Approach, to Data, MacMillan Press Ltd, 

London, 1978, 222 pages, $A 13.75 
Wirth, N., Systematic Programming: An Introduction, 

Englewood Cliffs, 1973, 169 pages, 
Wirth, N., Algorithms + Vata Structures = Programs, 

Englewood Cliffs, 1976, 366 pages, 

Coverage of books, taken from review 



Inc. , 



Prentice-Hall 
$A 23.75 
Prentice-Hall Inc., 
26.95 



CD 



Books and Articles 

{Unfortunately I did not collect, forward, or organize materials in time for Rich Stevens to 
have the slightest chance to produce his regular section. Look for a burgeoning section in #17.} 

Publishing success story 

The Pascal User Manual and Report by Jensen & Wirth has now sold more than 
60,000 copies. We understand that this includes a bulk purchase of 10,000 
copies by Apple Computer Inc, and a similarly large quantity by National 
Semiconductor. 



First author 


Coverage of 


Pascal 


Bowles 


fair 




Conway 


poor 




Find! ay 


good 




Grogono 


very good 




Jensen 


good 




Kieburtz 


poor 




Rohl 


good 




Schneider 


fair 




Welsh 


very good 




Wilson 


good 




Alagic 


fair 




Coleman 


poor 




Wirth(1973) 


fair 




Wirth(1976) 


good 





en 



Conferences and Seminars 



I apologize for the negative impact that tardiness has on this section. John Knight, for 
example has now been stale-dated twice regarding his PUG-ACM SIGPLAN conference session 
announcements. Below we have reports from the PUG/SIGPLAN meeting at ACM '78, the DECUS 
New Orleans meeting, the Australian Computer Science Conference. Next time I'll have the 
summaries from the French AFCET sub-group meetings on Pascal (belatedly - sorry). First, 
though we have news of seminars presented to teach Pascal primarily to professionals in the 
industry, followed by a list of upcoming conferences. 

Seminars 

The Polytechnic Institute of New York's Institute for Advanced Professional Studies is 
presenting seminar/workshops on Pascal Programming for mini and microcomputers in Boston 
on October 22-26, 1979 and in Palo Alto on December 3-7, 1979 for $600. For more information 
contact George Poonen at (617) 493-3537 or to register write to: Institute for Advanced 
Professional Studies, One Gateway Center, Newton, MA 02158. Phone: (617) 964-1412 (Donald French) 

Vince Giardina by now must have information about a series of IEEE workshops on Pascal. 
He works out of the IEEE central office in New York City but the phone number I have is 
(201) 981-0060 xl74 or 175 (which is in New Jersey). He was also looking for instructors 
for this course. 

Integrated Computer Systems, Inc. has a "learning tree" (TM) 4-day course on "Pascal: 
Programming in the Structured Language". The course dates are: October 9-12 in San Diego, 
October 16-19 in Washington, DC, November 6-9 in New York City, November 13-16 in Boston, 
and December 4-7 in Los Angeles. A related set of courses are being taught on "Structured 
Programming - Scientific and Engineering Applications" The Pascal course is $795. To 
enroll write to: Integrated Computer Systems, Inc., 3304 Pico Blvd. P.O. Box 5339, 
Santa Monica, CA 90405. Phone: (213) 450-2060 or to 300 N. Washington St. Suite 103, 
Alexandria, VA 22314. Phone: (703) 548-1333. Ken Bowles is the course instructor. 

Software Consulting Services is also offering seminars by Richard and Martha Cichelli: 



Software Consulting Services 

901 Whittier Drive 

Allentown, Pa. 18103 

[2151797-9690 



July 12, 1979 



Dear Andy: 

We have planned the following seminars which may be of 
interest to your readers. 

October 17-19, 1979 

A seminar/workshop entitled "An Introduction to Pascal 
Programming". Taught by Pichard J. Cichelli and Martha 
J. Cichelli. Includes hands-on Pascal programming workshop 
sessions as well as group and .individual instruction. The 
class will emphasize learning the basics of good programming 
in Pascal and learning them right! Class size, is limited. 
Three days. For more information contact Software Consulting 
Services, 9G1 whittier Drive, Allentown, PA l6lOj (215) 797-969C 



November 1.4-16, 1979 

A seminar/workshop entitled "Advanced Programming 
Techniques Using Pascal". Taught by Richard J. Cichelli 
and Martha J. Cichelli. Requires a basic knowledge of 
the Pascal language. This class will refine the skills 
of Pascal programmers and teach them how to build a 
comprehensive and effective Pascal-based software development 
environment. The emphasis will be on significant Drogramming 
exercises blended with group and individual instruction. 
Class size is limited. Three days. For more information 
contact Software Consulting Service?, 901 Whittier Drive 
Allentown, PA 18103, (215) 797-9690. 

Sincerely, 



3> 






i^Iartha J. Cichelli 



Australian Seminars 

Arthur Sale told us of two seminars in Australia that he had been involved with 
One was a five-day intensive seminar held by his Department at the University 
or lasmama, and the other was a two-day professional development seminar 
organized by the Australian Computer Society in Melbourne, Victoria Pascal 
News acquired about 60 new members from these seminars, and even more people 
were exposed to Pascal's elegance. 

Arthur also said that he had given part of an evening seminar with Michael 
Kooney of the Boston Systems Office which was attended by around 450 engineers 
involved in microprocessor applications in Australia. The interest in Pascal 
was sufficiently great that the University of Tasmania was planning another 
seminar addressed to professional programmers for February 1980 



Upcoming Conferences 

IFIP in 1980 will be held one week in Tokyo and the next week in Melbourne Australia We 
spontaneou^ Sr"^ at * ^ " 1nterest *™ P " SeSSi °"' but we ' re ^Tlll^uT 

The Fall DECUS meeting should be held in San Diego, and John Barr expects that issues such as 
pSal'ifrbrd^sc^sed? 031 StandardS> 1m P lementatl -°" ^"^-s anS^l^nc™^ " 

t^oSgh^ou^in^rS^g^is^aie 9 - " ^ ^ * **' ^^ J ° h " ^ ™ «en 

Dear Andy: 

An informal evening session devoted to PASCAL will be held at the 1979 ACM 
conference which will take place October 29-31, 1979, in Detroit, Michigan* 
The session will be sponsored jointly by SIGPLAN and the PASCAL Users Group, 
and will be very similar to the session held at the 1978 ACM National Con- 
ference* The purpose of this session is to allow all conference attendees 
who are interested in PASCAL to get together and interact. 

This is not a technical session in the usual sense* However, in order to 
convey the most information, it will consist, at least in part, of a series 
of short presentations (i«e», approximately 10 minutes) on PASCAL related 
topics* A presentation can address just about anything related to the 
language and its software; e.g., experience with PASCAL, tools for PASCAL 
programing, implementation, etc* Anybody who is planning to attend ACM '79 
and who is interested in making a presentation should send a short descrip- 
tion of what they will discuss by September 1 to: 



John C. Knight 

Mail Stop 125A 

NASA Langley Research Center 

Hampton, Virginia 23665 

Presenters will be informed of their selection by September 15* 

The purpose of requesting descriptions is not to perform any refereeing or 
technical judgment, but merely to allow a balanced program to be prepared 
for the limited time available* 



Sincerely, 



c 




John C» Knight 

Programing Techniques Branch 

Analysis and Computation Division 



NASA 

National Aeronautics and 
Space Administration 

Langley Research Center 

Hampton, Virginia 
23665 



Conference Reports 



The Second Annual Australian Computer Science Conference was held in Hobart, February 1-2, 
at the University of Tasmania. Pascal was a recurrent theme in several papers. 

- Jeff Tobias gave a talk "A Malleable Multiprocessor" about extending Modula for 
driving 3 Intel 8086 micros. 

- Jim Welsh gave a talk on "Pascal Plus" about extending Pascal for current processes. 

- Marshall Harris gave a talk on "A Structured Programming Interpretable Instruction 
Language - or - Against Patriarchal Programming Languages" about SIPSIL, an 
alternative to Pascal. 

- Jeff Rohl gave a talk 'On Sets in Programming" about applications with Pascal sets. 

- A. M. Lister gave a talk on "Constructive Proofs of Monitors" providing experience 
with Pascal-Plus. 

The text of the invited papers (4) to this conference appeared as Volume 1 Number 1 of a 
new Australian computer science journal called the Australian Computer Science Communications . 
Also included were the prepared texts of the Panel Discussion by Arthur Sale, Jeff Rohl, and 
John Bennett on "What is Computer Science?". A report was included on computer science in China. 

This conference demonstrated the vitality of computer science research in Australia and will 
definitely become a respected institution. - Andy Mickel 

The SIGPLAN Compiler Construction Conference was held in Boulder on August 8-10 and papers 
were presented on some Pascal topics: 

- Gilbert J. Hansen, Gerald A. Shoults, and Joe Cointment of Texas Instruments 
gave a talk on "Construction of a Transportable, Multipass Compiler for Extended 
Pascal" 

- Richard J. LeBlanc of Georgia Tech and Charles N. Fischer of the University of 
Wisconsin gave a talk "On Implementing Separate Compilation in Block-Structured 
Languages" which gives examples using the Pascal 1100 compiler. 

- Richard L. Sites and Daniel R. Perkins of UC San Diego gave a talk on "Machine- 
Independent Pascal Code Optimization". 

- Philip A. Nelson of Lawrence Livermore Labs gave a talk on "A Comparison of 
Pascal Intermediate Languages" 

The proceedings of this conference appeared as SIGPLAN Notices Vol 14 No 8, August, 1979. 

Another rich conference was held in Sydney during September 10-11 being a Symposium on 
Language Design and Programming Methodology sponsored by the Australian Atomic Energy 
Commission and the University of New South Wales. The conference was organized by Jeff 
Tobias and papers covered the whole range of topics from algorithms to data structures, 
practice and experience. Invited speakers were Niklaus Wirth and Dennis Ritchie. 



Report on the DECUS (Digital Equipment Corporation Users Society) 
Pascal SIG (Spe cial Interest Group) 

by Richard J, Cichelli 

This is a second hand report of the activities of the Pascal SIG meeting 
at the Fall, 1978 DECUS symposium. It is oased on conversations with 
John Iobst (also of ANPA/Rl) who attended as PUG liaison and chaired a 
standards workshop. 

John Barr (Department of Computer Science, University of Montana, 
Missoula, Montana 39&12) is chairman of the 1200 member Pascal SIG, 

The SIG's standards subcommittee reviewed many suggested "enhancements". 
to Pascal. The commendably short report of the subcommittee is presented 
here in full. 

PROPOSED PASCAL STANDAR D 

We propose that the DECUS Standard for the language PASCAL 
be as follows: 

PASCAL is that language defined in the "PASCAL USER MANUAL AND 
REPORT", with the following two modifications: 

1) the addition of the reserved word "forward", to allow two 
or more procedures or functions on the same level to call 
each other. 

2) a method of specifying the parameter list for procedure or 
function parameters which are passed by name. This will 
allow the full type checking of parameters at compile time 
for all procedures and functions which are used as parameters. 

In addition to these modifications to the definition of PASCAL, 
the following additional conventionalized extensions are suggested: 

1) a means of defining "flexible" arrays. The method of choice 
is that which was presented by Ch. Jacob! in the September 
1976 Pascal Newsletter. 

2) the "otherwise" construct in the case statement. 

3) a method of relative record I/O. It will be either a 
predefined set of procedure(s) and/or function(s) or an 
extension of the array mechanism, possibly using the key- 
word "slow", 

h) the addition of the reserved word "external". This will 
allow a standard means of accessing separately compiled 
subprograms and libraries. 

3) the expansion of the concept of constant denotation to include 
the definition of structured constants. This requires a 
modification to the syntax of PASCAL so that constants may 
be defined after types are defined. The cyclic nature of" this 
modification may lead to undefined identifiers. It is 
suggested that each of the constant, type and var groups 
be self-consistent to control the problem. 

6) the predefined procedures of reset and rewrite to associate 
system file names with the PASCAL file variable. 



m 



3> 



We also suggest the continued discussion of: 

1) the problem of functions being able to return only simple 
type results. 

2) the comparison of structured types other than alfa (packed 
array of char) on at least the equality/inequality level. 

We also suggest that the following not be considered as part of 
the language PASCAL: 

1) strings 

2) module type encapsulation 

3) concurrency 

4) additional standard types (other than complex) 

5) real time process control 



within DECUS, with its access to users of a very popular processor 
via a relatively inexpensive process. Compare the costs to DECUS 
members for access to the PASCAL SIG's newsletters with the costs 
of the (non- DECUS) PASCAL USERS GROUP. 



The following excerpt from the DECUS U.S. Board Meeting Report which 
quotes Mark Lewis, DECUS U.S. Special Users Group Coordinator, shows 
some of the political problems within DEC and DECUS regarding Pascal. 

SIGs By Any Other Name 

It appears that DECUS U.S. has SIGs of two very distinctive types: 
(A) The Sig that organizes into a somewhat powerful force users of 
a particular subset of Digital products, and (b) the SIG that attempts 
to service users with common interests that are not represented by 
a particular subset of Digital products. Among the former are the 
traditional product-based SIGs such as the 12-BIT, RSTS, RSX- 11/IAS, 
RT-11 and SIG 18. (The DECsys tern- 10/20 Group is properly speaking 
a member of this first group). Among the latter are such diverse 
groups as BIOMEDICAL, PASCAL, TECO, and many others. Only a few 
SIGs represent the special case where the group attempts to serve 
areas that represent a global interest and a product interest. (The 
DBMS SIG is an excellent example of a failure to fit the dichotomized 
pattern since it attempts to service those users who use some sort 
of DBMS and also attempts to serve as a representative for the users 
of DBMS- 11). 

The SIGs of the first type generally have a more powerful influence 

on DECUS, since they represent the largest users of DECUS resources 

(in terms of Symposium space/time and newsletter pages), and they 

are the groups to which Digital must maintain formal liaison. In 

fact it is the need for formal liaisons between Digital and the SIG 

that discriminates between the two types. Thus, DBMS clearly belongs 

to the first group because Digital must provide (a) formal counterpart (s) 

to the SIG, while PASCAL clearly belongs to the second group since 

no purpose is served by having a formal Digital Counterpart to the SIG. 

In general this Board has been very liberal in recognizing new SIGs 
without regard for the potential demands that SIGs might make on 
DECUS resources. I now believe it is time we recognized formally 
that not all SIGs are created equal and that the best method of 
distributing resources must favor those SIGs in which Digital has 
an investment. The SIGs in the second group are really camp followers 
that would never have been organized had not DECUS become a convenient 
way of reaching a large number of users. Thus, to use my favorite 
example, the PASCAL SIG has no rationale for coming into existence 



Of course Pascal is the only popular high level language which runs 
with any compatability or reasonable efficiency on PDP 8's, 11 's, 
10' s, and 20' s. Possibly the fact that it also runs well on PDP 11 
UNIX systems and other non- DEC software environments makes DEC somewhat 
wary of the Pascal SIG. (It is the fastest growing SIG and it Is the 
third largest.) Whatever the reasons for DEC'S failure to wholeheartedly 
support Pascal, the proposal by DEC's representative on ANSI X3J9 that 
there be a five year delay in Pascal, standardization was firmly 
rejected. Certainly Pascal users on DEC equipment will welcome the 
earliest standard possible. 



A Report on Pascal Activities at the 
New Orleans 1979 Spring DECUS Symposium 



Bill Heidebrecht 

TRW DSSG 

One Space Park 

Redondo Beach, CA 90278 



The 1979 Spring Digital Equipment Computer Users Society (DECUS) U.S. Mini/Midi 
Symposium was held in New Orleans on April 17-20. Following the trend set two years 
ago when John Barr (Pascal SIG chairman) resurrected the Pascal SIG, we had a number 
of interesting and wery well attended Pascal sessions, including an excellent paper 
given by Kathleen Jensen. 

The first Pascal session was held on Tuesday, April 17th, and consisted of 
Digital's Education Computer Systems Group product announcement of VAX-11 Pascal. 
This product is the University of Washington Pascal compiler, developed under the 
leadership of Dr. Helmut Golde. The speakers at the meeting included Dr. Golde, 
Dr. Marvin Solomon (U. of Wisconsin, test site for the compiler), Leslie Miller 
(Digital Central Engineering), and several Digital managers. The compiler, which was 
bootstrapped from the CDC Pascal compiler, will probably be available in late 1979. 
Execution time of compiled Pascal programs is roughly 1.6 times longer than Fortran 
programs using Digital's optimizing Fortran compiler. While the VAX Pascal compiler 
has a number of extensions, Leslie Miller mentioned her desire to remain compatible 
with the standard. This compiler represents Digital's entry into commercial support 
of Pascal . PK 

Tuesday evening, Barry Smith of Oregon Software gave an introductory tutorial 
on Pascal. Several hundred people attended this very popular session. 

On Wednesday morning there was a session on Pascal standards, led by Justin 
Walker (Interactive Systems), Leslie Miller, and Barry Smith. (Justin was the 
convener of the first ANSI X3J9 meeting in December 1978, and Leslie and Barry are 
both members of X3J9.) The speakers expressed their support of the proposed BSI/ISO 
standard, and stated their expectation that it would succeed as the international 
standard. Some of the details of the draft were discussed, and there were many 
questions and comments from the audience. 

Wednesday afternoon Leslie Miller gave a more detailed presentation on the 
University of Washington VAX Pascal compiler. The responsibilities for the project 
are as follows: 



2> 



3> 



=tfc 
I— 1 
\J1 



§ Digital - project management, documentation, and technical assistance, 
t U. of Washington - compiler development. 
• U. of Wisconsin - testing. 

The emphasis has been on educational use, and keeping down the cost of running the 
compiler. Leslie also discussed some of the extensions (such as double and single 
precision reals, exponentiation operator, dynamic arrays, descriptor parameters, 
otherwise in the case statement, etc.) The extensions can be flagged as such through 
the use of a compiler option. 

A presentation by James Spann, Gordon Smith and Roger Anderson of Lawrence 
Livermore Labs was scheduled on "LSI-11 Writeable Control Store Enhancements to UCSD 
Pascal". Unfortunately, I was unable to attend this interesting session because of 
a session conflict. 

The next Pascal session on Wednesday afternoon was Kathleen Jensen's paper, 
"Why Pascal?", which I though was the highlight of the entire symposium. Kathleen 
worked for three years with Niklaus Wirth at ETH in the early 1970's as a research 
and teaching assistant. She also taught Pascal, worked on some of the compiler imple- 
mentation details, and of course is the coauthor of the Pascal User Manual and Report . 
Kathleen spoke about the development of Pascal, its motivation and influences, and 
gave examples of its use. She discussed the advantages of using Pascal, from both a 
programmer's as well as a project leader's viewpoint. About 400-500 people attended 
this session, and Kathleen received a rousing applause at the end of her talk. Kathleen 
has been employed at Digital since leaving ETH. 

Thursday morning the Pascal sessions began with an applications panel discussion 
led by Linda Carlock of Hughes Aircraft. John Collins of 3M described an "include" 
preprocessor and a text file inspection program he wrote. Thomas Mathieu of Battelle 
spoke, about an 8086 cross assembler and associated software, all written in Pascal. 
And I spoke briefly about the Pascal SIG library. 

After the Applications Panel, David Miller of GTE Sylvania gave a paper entitled 
"Why We Had to Change Pascal". David described some fairly extensive changes GTE made 
to a PDP-11 implementation of Pascal for a realtime application. 

A Pascal Implementation Workshop has held on Thursday afternoon. John Barr, 
Justin Walker and Brian Nelson (University of Toledo) spoke about status of the SIG's 
implementation of NBS Pascal under UNIX, RSTS, RSX-11 and RT-11 . NBS Pascal was 
written by Brian Lucas and Justin Walker, (both) previously of the National Bureau of 
Standards. The compiler is usable now for some programs, but it does not yet implement 
all of standard Pascal. We are working on finishing a few details and implementing it 
on the above systems, as well as on the VAX-11 . 

Also Thursday afternoon, Don Baccus of Oregon Software gave an interesting 
presentation on code optimization in Pascal compilers. Much of his talk was based on 
techniques used in the 0MSI Pascal-2 compiler for the PDP-11. Don discussed code im- 
provement techniques such as constant folding, subscript optimization, common subex- 
pression elimination, short circuit boolean evaluation, and machine specific improvements. 

Thursday evening Roger Vossler of TRW gave an informal presentation on our (TRW) 
implementation of Concurrent Pascal on the VAX. We are using Concurrent Pascal on our 
VAX and four PDP-11 's for research in distributed processing. 

The last Pascal session was held on Friday. This was the Pascal SIG Business 
Meeting, in which we started plans for the Fall DECUS Symposium, to be held in San Diego 
in December 79. One of the other topics discussed was the Pascal SIG library tape copy 
operation. At the previous symposium we made about 80 copies of the library tape, while 
at New Orleans we made over 150 copies. We hope to work out better methods of distri- 
buting the tape in the future, as we cannot keep up with this growth rate using our 
present distribution methods. 



As the current DECUS Pascal SIG librarian, I have discussed with Rich Cichelli 
(PN Applications Editor) methods of sharing software between the DECUS Pascal SIG 
and PUG libraries. Unfortunately, there are a number of problems to consider, such 
as copyright laws, tape format and character set differences, nonstandard Pascal 
implementations, cost and method of distribution, etc. For the present we can at 
least exchange software on a program by program basis between the two libraries. 

The New Orleans Pascal SIG tape contains two Pascal compilers for the PDP-11 
(Torstendahl's "Swedish" Pascal for RSX 11M, and interim versions of NBS Pascal for 
RSX 11 and RSTS), and a number of utility programs. Pascal News readers who are 
interested in obtaining a copy of the DECUS Pascal SIG tape should consult recent 
editions of the DECUS Pascal SIG Newsletter, or contact an RSX or RSTS Local Users 
Group. 

All in all, I think the New Orleans DECUS Symposium was a success as far as 
Pascal is concerned. Roughly 25% of the people who preregistered indicated an interest 
in Pascal. When you consider the size of the Pascal SIG membership (over 1,000), its 
phenomenal growth rate, and the fact that most of the other DECUS SIGs are organized 
around Digital products (such as RSX, RSTS, VAX/VMS, etc.) you get some idea of the 
popularity of Pascal within DECUS. 



Pascal Session at ACM '78 
by Richard J. Cichelli 



An informal evening session devoted to Pascal was held at ACM '78. This 
excellent meeting was convened by John C. Knight of SIGPLAN and NASA. 
This was the first joint SIGPLAN and PUG technical session and its 
success is attributable to the excellent organizational work of John 
Knight. There were more than 73 attendees (we completely filled the 
meeting room. ) 

At John's request, I began the session with a report on the state of PUG 
and its membership, standards activity, Pascal software tools and Pascal- 
oOOO Release #3. The Information given has since appeared in PN #13. 
The agenda of the session is listed below. 

1. Comments on the state of the Pascal world by R. Cichelli 

2. Brief announcement by a representative of Computer Science 
Press about their new text - PASCAL An Introduction to 
Methodical Pro gramming, W. Findlay and D. A. Watt. 

3. "An Interactive Incremental PASCAL Compiler", Bengt Nordstrom, 
Goteborg, Sweden 

4. "PASCAL-I", R. Cichelli, ANPA-RI 

3. "Verifiable PASCAL", S. Saib, General Research Corp. 

6. "A Parser Generator", Wilhelm Burger, Univ. of Texas 

7. "Use of PASCAL in Undergraduate Computer Science Education", 
R. Leblanc, Georgia Institute of Technology 

8. "PASCAL and Structure Charts", H. Cunningham, Tektronix 

A few personal comments on the topics: #3 is a description of a planned 
system. #4 is an existing #3 with 23 Installations. #6 is a generator 
similar to UNIX's YACC. Generated parse tables for Pascal configured 
for micro's are about 2K bytes 1 #8 is an interactive graphic editing 
system which manipulates Nassi-Shneiderman diagrams. Post processing 
turns the N-S structure charts into Pascal code. 



VJl 






3> 



I hope we will 3oon see articles from the session speakers in PN. A 
truly fine technical session. 



PUQ Finances 



Roster Incrsmsnt 



PUG FINANCES 1977-1978 

Here are the details for our finances for the 77-78 academic year by both PUG(USA) and PUG(UK). 
PUG(AUS) has decided to do independent accounting and will report in the future. We therefore 
will rebate no more money to them in the future. 78-79 finances will be reported in either 
issue #17 or #18 after we complete the academic year with the appearance of #16. 

PUG(USA) Summary of Accounts: 



Income: 



7.29 Interest on money in Bank Account 

55.70 Contributions 

1198.00 Sale of 599 backissues @ $2 

8608.00 2152 subscriptions @ $4 (2396 total - 180 UK 

9868.99 Total income. 



64 AUS) 



Expenses: 



PUG Australasian rebate for money already collected 

people who still owe us money (5 @ $4)! 

postage for 300 renewal reminders (@ $0.13) 

postage costs for all issues including return postage 

printing 9/10 - 2000 copies 

printing 11 - 2000 copies 

printing 12 - 2500 copies 

reprinting 9/10 - 750 copies 

reprinting 11 - 750 copies 

miscellaneous photocopying, titles, and production costs 

PUG(UK) rebate for 76-77 deficit 



145.00 

20.00 

39.00 

1325.14 

2180.79 

2112.78 

1676.83 

875.96 

858.34 

18.62 

420.00 

9672.46 Total expenditure. 



Excess income = $ 196.53 



PUG(UK) Summary of Accounts: 

Income: 

< 450.00 180 Subscriptions @£2.50 



Expenses: 



115.60 printing 9/10 - 350 copies 

327.60 printing 11 - 350 copies 

227.50 printing 12 - 350 copies 

226.37 postage, envelopes, etc. 

«£ 897.07 Total expenditure. 



Excess expenditure =£447.07 = $ 935.24 



Notes: No. 9/10 was the last of the discount printings, hence the very low price. 

Had the money for all 350 copies been collected, our income would have been £875, 
which would have left the books approximately in balance. 

An attempt to assess the financial health of PUG: 
Given that PUG(USA) covers the balance of PUG(UK) then: 



$ 158.63 petty cash 
193.52 bank account 
2696.35 computer center account 

$ 3048.50 Liquid assets 
2236.00 Future obligations (subscriptions 
for 78-79-80-81-82) 
| 812.50 Total assets + 1550 backissues 

on hand 



77-78 surplus 
76-77 surplus 

backissues not yet sold 

theoretical assets 
rebate to PUG(UK) 

1330.53 total theoretical assets 



196.53 
334.94 
875,96 
858.34 

2265.77 
935.24 



Roster Increment (79/05/14) 

Following is a list of PUG members who either joined or changed address or phone number 
since the last roster increment was printed dated 78/10/31 in Pascal News #13. 



Andy Mickel 79/06/30. 



01002 DUANE W. BAILEY/ DEPT. OF MATHEMATICS/ AMHERST COLLEGE/ AMHERST MA 01002/ (413) 542-2377 

01002 EARL BILLINGSLEY/ UNIVERSITY COMPUTING CENTER/ G.R.C./ UNIV. OF MASSACHUSETTS/ AMHERST MA 01002/ (413) 545-2690 

01003 JEFF BONAR/ COMPUTER AND INFO SCI DEPT./ UNIV. OF MASSACHUSETTS/ AMHERST MA 01003/ (413) 545-2744 
01060 EDWARD JUDGE/ 73 BRIDGE ST. #10/ NORTHAMPTON MA 01060 

01063 BERT MENDELSON/ COMPUTER CENTER/ 215 MCCONNELL HALL/ SMITH COLLEGE/ NORTHAMPTON MA 01063/ (413) 584-2700 X566 

01450 PETER D. MARTIN/ TOWNSEND RD. RFD #2/ GROTON MA 01450/ (617) 448-5395 

01451 RALPH S. GOODELL/ HILLCREST DRIVE/ HARVARD MA 01451/ (617) 456-8090 

01532 JANICE ANN KELSO/ 64 VALENTINE RD./ NORTHBORO MA 01532/ (617) 393-8015 (HOME)/ (617) 493-3272 (WORK) 

01545 RICHARD J. BONNEAU/ 6 TANGLEWOOD DRIVE/ SHREWSBURY MA 01545/ (617) 845-1432 

01581 GREG MORRIS/ 297 TURNPIKE RD #120W/ WESTBORO MA 01581/ (617) 366-9815 

01581 A. LYMAN CHAPIN/ SOFTWARE DEVELOPMENT/ MS A-60/ DATA GENERAL CORP/ 15 TURNPIKE ROAD/ WESTBOROUGH MA 01581/ (617) 366-8911 : 

01609 STEPHEN R. ALPERT/ COMP. SCI. DEPT./ WORCESTER POLYTECHNIC INSTITUTE/ WORCESTER MA 01609/ (617) 753-1411 X416 

01720 LEESON J. I. WINTER/ 490 GREAT RD. APT. 1R/ ACTON MA 01720/ (617) 263-4786 

01730 TERRENCE R. CULLEN/ 12 ASHBY ROAD/ BEDFORD MA 01730/ (617) 727-9500 

01730 RICHARD DEROSIER/ LINQLEX SYSTEMS INC./ 3M/ 10 CROSBY DRIVE/ BEDFORD MA 01730/ (617) 275-1420 

01730 KEN TAKAHASHI/ PRODUCT DEVELOPMENT/ 3M-LIN0LEX SYSTEMS/ 10 CROSBY DRIVE/ BEDFORD MA 01730 

01730 H. WILLMAN/ GRA-11/ RAYTHEON COMPANY/ HARTWELL RD/ BEDFORD MA 01730/ (617) 274-7100 X4632 

01740 JAMES K. SKILLING/ ACOUSTICS VIBRATION AND ANALYSIS/ MS #50/ GENRAD/ ROUTE 117/ BOLTON MA 01740/ (617) 779-2811 

01742 KEVIN T. MAHONEY/ STOP' 6/ GENRAD INC./ 300 BAKER AVENUE/ CONCORD MA 01742/ (617) 369-4400 X317 

01754 WILLIAM BARABASH/ ML3-5/E82/ DIGITAL EQUIPMENT CORP./ 146 MAIN ST./ MAYNARD MA 01754 

01754 RICHARD KIMBALL/ 145 WALTHAM ST./ MAYNARD MA 01754/ (617) 897-9004 

01754 JOHN A. MORSE/ ML3-2/E41/ DIGITAL EQUIP. CORP./ 146 MAIN ST./ MAYNARD MA 01754/ (617) 493-5801 

01754 ISAAC R. NASSI/ ML3-5/E82/ DIGITAL EQUIPMENT CORP./ 146 MAIN STREET/ MAYNARD MA 01754/ (617) 493-4487 

01775 JOHN R. GOTTHARDT/ 91 OLD BOLTON ROAD/ STOW MA 01775 

01776 WILLIAM GARD/ GRAPHICS SYSTEMS/ RAYTHEON CO./ 528 BOSTON POST ROAD/ SUDBURY MA 01776/ (617) 443-9521 
01776 RICHARD HOLMES/ INC./ ELECTRONICS FOR MEDICINE/ 56 UNION AVE./ SUDBURY MA 01776 

01776 DAVID PETERSON/ SPERRY RESEARCH/ 100 NORTH RD/ SUDBURY MA 01776/ (617) 369-4000 X250 

01824 WALTER J. RATAJ/ ACCUTEST CORP./ 25 INDUSTRIAL AVE./ CHELMSFORD MA 01824/ (617) 256-8124 

01842 R. A. FREEDMAN/ P.O. BOX 1136/ LAWRENCE MA 01842 

01851 ODD W. RYDEN/ CONTROL EQUIPMENT CORP./ 171 LINCOLN STREET/ LOWELL MA 01851/ (617) 459-0573 

01854 CHARLES A. STEELE JR./ MATHEMATICS DEPT/ UNIV. OF LOWELL/ . LOWELL MA 01854/ (617) 452-5000 X2512 

01862 LES SLATER/ TRANTI SYSTEMS INC./ 1 CHELMSFORD RD/ N. BILLERICA MA 01862/ (617) 667-8321 

01862 THOMAS BAKER/ NEW ENGLAND NUCLEAR CORP./ 601 TREBLE COVE RD./ N. BILLERICA MA 01862 

01876 BERT BEANDER/ CIO/ DIGITAL EQUIPMENT CORP./ 1925 ANDOVER ST./ TEWKSBURY MA 01876/ (617) 851-5071 X2088 

01876 REID L. BROWN/ TW/E10/ DIGITAL EQUIPMENT CORP./ 1925 ANDOVER STREET/ TEWKSBURY MA 01876/ (617) 851-5071 X2686 

01876 BILL PAGE/ CIO/ DIGITAL EQUIPMENT CORP./ 1925 ANDOVER ST./ TEWKSBURY MA 01876/ (617) 851-5071 

01880 DAVID L. PRESSBERG/ MASS. COMPUTER ASSOC. INC./ 26 PRINCESS STREET/ WAKEFIELD MA 01880/ (617) 245-9540 

01880 ROBERT VINCENT/ ANALOGIC CORP./ AUDUBON ROAD/ WAKEFIELD MA 01880/ (617) 246-0300 

01886 STEVEN 0. HOBBS/ 87 DEPOT ST./ WESTFORD MA 01886 

01890 JOHN W. JORDAN/ 5 THORNTON ROAD/ WINCHESTER MA 01890/ (617) 729-8397 

01905 THOMAS J. SOUCY/ MICROCOMPUTER SERVICES/ 13 MILDRED STREET/ LYNN MA 01905/ (617) 599-8014 

01908 JOSEPH AYERS/ MARINE SCIENCE INSTITUTE/ NORTHEASTERN UNIV./ EAST POINT/ NANANT MA 01908/ (617) 581-7370 

02062 ALAN STRELZOFF/ UNION CARBIDE IMAGING SYSTEMS/ 333 PROVIDENCE HWY./ NORWOOD MA 02062/ (617) 769-5400 X464 

02090 ALAN HOCHBERG/' ORTHO INSTRUMENTS/ 410 UNIVERSITY AVE./ WESTWOOD MA 02090 

02110 JOSEPH J. GAL/ HELLMAN GAL & CO. INC./ ONE FEDERAL STREET/ BOSTON MA 02110/ (617) 482-7735 

02114 ROY A. WILSKER/ COMPUTER NETWORK/ MASS. STATE COLLEGE/ 150 CAUSEWAY STREET/ BOSTON MA 02114/ (617) 727-9500 

02115 ROBERT J. LECHNER/ DEPT. OF E.E./ 401 DA/ NORTHEASTERN UNIV./ BOSTON MA 02115/ (617) 437-3046 

02116 BARTLEY C. JOHNSON/ 92 BOTOLPH STREET/ BOSTON MA 02116/ (617) 266-8128 

02138 NORTON GREENFELD/ BOLT BERANEK AND NEWMAN INC./ 50 MOULT ON STREET/ CAMBRIDGE MA 02138/ (617) 491-1850 

02139 ERIK T. MUELLER/ 410 MEMORIAL DRIVE/ CAMBRIDGE MA 02139/ (617) 253-1000 X5-8153 
02139 JIM PERCHIK/ 295 HARVARD ST. APT 607/ CAMBRIDGE MA 02139/ (617) 354-1993 

02139 ALLEN SPRINGER/ SCIENTIFIC CENTER/ IBM/ 545 TECHNOLOGY SQUARE/ CAMBRIDGE MA 02139/ (617) 421-9228 

02139 COYT C. TILLMAN JR./ IBM CAMBRIDGE SCIENTIFIC CENTER/ 545 TECHNOLOGY SQUARE/ CAMBRIDGE MA 02139/ (617) 421-9250 

02154 TERRY HARRIS/ SM DO/ DEPT 3920/ RAYTHEON CO./ SECOND AVE./ WALTHAM MA 02154 

02154 ALAN LILLICH/ SOFTECH INC./ 460 TOTTEN POND ROAD/ WALTHAM MA 02154/ (617) 890-6900/ (617) 926-0768 

02154 MICHAEL MCKENNA/ 4209 STEARNS HILL RD./ WALTHAM MA 02154/ (617) 894-9713 

02154 MICHAEL ROONEY/ THE BOSTON SYSTEMS OFFICE INC./ 469 MOODY ST./ WALTHAM MA 02154/ (617) 894-7800 

02154 MICHAEL T. WYMAN/ INTERACTIVE DATA CORP./ 486 TOTTEN POND ROAD/ WALTHAM MA 02154/ (617) 890-8802 

02155 BENJAMIN KUIPERS/ DEPT OF MATHEMATICS/ TUFTS UNIVERSITY/ MEDFORD MA 02155/ (617) 628-5000 X6650 

02158 DONALD D. FRENCH/ INSTITUTE FOR ADVANCED PROFESSIONAL S*/ ONE GATEWAY CENTER/ NEWTON MA 02158/ (617) 964-1412 

02160 FLOYD 0. ARNTZ/ 44 GROVE HILL AVENUE/ NEWTONVILLE MA 02160 

02162 PRESCOTT TURNER/ PRIME COMPUTER INC./ 3 NEWTON EXECUTIVE PARK/ NEWTON MA 02162/ (617) 964-1730 

02168 EARL M. YARNER/ 195 VARICK RD/ NEWTON MA 02168 

02169 GEORGE C. HETRICK/ COMPUTING CENTER/ BOSTON COLLEGE/ CHESTNUT HILL MA 02169/ (617) 969-0100 X3400 
02172 TTMOTHY ALLEN/ KEYDATA CORP./ 108 WATER STREET/ WATERTOWN MA 0217?/ (617) 237-6930 






PASCAL NEWS #15 SEPTEMBER, 1979 P A 6 E 1 4 

02173 DOUG CHAMBERLIN/ APPLIED DECISION SYSTEMS/ 33 HAYDEN AVE./ LEXINGTON MA 02173/ (617) 861-7580 

02173 GEORGE S. GORDON JR./ 7 COACH RD./ LEXINGTON MA 02173/ (617) 861-0470 

02173 FRANK SCHWARTZ/ SOFTWARE ASSISTANCE INC./ 18 HARBELL ST./ LEXINGTON MA 02173/ (617) 862-0581 

02173 GEORGE M. SHANNON/. LINCOLN LAB/ J-148G/ M.I.T./ 244 WOOD STREET/ LEXINGTON MA 02173/ (617) 862-5500 X5719 

02173 MAUREEN J. STILLMAN/ LINCOLN LAB/ M.I.T./ LEXINGTON MA 02173/ (617) 862-5500 

02173 H. YOSHIDA/ NEC SYSTEMS LABORATORY/ FIVE MILITIA DRIVE/ LEXINGTON MA 02173/ (617) 862-6415 

02178 ATTN: LIBRARY/ DIALOG SYSTEMS INC./ 32 LOCUST STREET/ BELMONT MA 02178/ (617) 489-2830 

02178 JAMES E. SMITH/ 87 BEECH ST. 3RD FL./ BELMONT MA 02178 

02181 JAMES M. HUDSON/ CULLINANE CORP./ 20 WILLIAMS ST./ WELLESLEY MA 02181/ (617) 237-6600 

02194 ALAN EPSTEIN/ IMLAC CORP/ 150 A ST./ NEEDHAM MA 02194/ (617) 449-4600 

02871 DAVID J. DE FANTI/ SUBMARINE SIGNAL DIVISION/ MS 177/ RAYTHEON COMPANY/ P.O. BOX 360/ PORTSMOUTH RI 02871/ (401) 847-8000 X2746 

02912 RICHARD B. MILLWARD/ PSYCHOLOGY DEPT./ BROWN UNIVERSITY/ BOX 1853/ PROVIDENCE RI 02912/ (401) 863-2608 

03031 H. R. MORSE/ FREY ASSOCIATES/ CHESTNUT HILL RD/ AMHERST NH 03031/ (603) 472-5185 

03051 LESLIE J. MILLER/ RFD #3/ 18 WOODCREST AVE./ HUDSON NH 03051/ (603) 889-7226 (HOME)/ 851-5071 X2653 (WORK) 

03053 JAMES A. CURTIS/ 10 HUNTER BLVD. / P.O. BOX 498/ LONDONDERRY NH 03053 

03060 STEFAN M. SILVERSTON/ 23 DEERHAVEN DR./ NASHUA NH 03060/ (603) 883-3882 

03242 J. P. MACCALLUM/ BOX 349/ HENNIKER NH 03242/ (603) 428-7275 

03801 JAMES NICHOLS/ 375 OCEAN RD/ PORTSMOUTH NH 03801/ (603) 436-4084 

03857 MARK KLEIN/ INFORMATION ENGINEERING/ BOX 198 / 8 BAY ROAD/ NEWMARKET NH 03857/ (603) 659-5891 

04469 THOMAS E. BYTHER/ COMPUTING CENTER/ UNIV. OF MAINE/ ORONO ME 04469/ (207) 581-2614 

04469 RONALD A. ROHRER/ ELECTRICAL ENGINEERING/ BORROWS HALL/ UNIV. OF MAINE - ORONO/ ORONO ME 04469 

06095 JEFFREY KATZ/ DEPT 9488 -4BB/ COMBUSTION ENGINEERING INC./ 1000 PROSPECT HILL ROAD/ WINDSOR CT 06095/ (203) 688-1911 X2600 

06103 R. REMBERT ARANDA/ MANAGEMENT SYSTEMS/ HARTFORD BOARD OF EDUCATION/ 249 HIGH STREET/ HARTFORD CT 06103/ (203) 566-6506 

06468 RICHARD L. ROTH/ TSA SOFTWARE INC/ 39 WILLIAMS DR./ MONROE CT 06468/ (203) 261-7963 

06484 MICHAEL BEETNER/ 22 COBBLESTONE DRIVE/ HUNTINGTON CT 06484/ (203) 929-1035 

06484 BRUCE HIBBARD/ 60 SAGINAW TRAIL/ SHELTON CT 06484/ (203) 929-8792 

06492 KEN M. MA/ COROMETRICS MEDICAL SYSTEMS INC./ 61 BARNES PARK ROAD NORTH/ WALLINGFORD CT 06492/ (203) 265-5631 

06520 ARTHUR PERLO/ DEPT. OF MOLECULAR BIOPHYSICS/ YALE UNIV./ BOX 1937 YALE STATION/ NEW HAVEN CT 06520/ (203) 436-4826 

06520 ROBERT W. TUTTLE/ COMPUTER SCIENCE DEPT./ YALE UNIVERSITY/ 10 HILLHOUSE AVE. - DUNHAM LAB./ NEW HAVEN CT 06520/ (203) 436-8160 

06602 ATTN: SPCC LIBRARY 24EE/ GENERAL ELECTRIC CO./ 1285 BOSTON AVE./ BRIDGEPORT CT 06602/ (203) 334-1012 

06608 CHARLES E. REED/ 3200 PARK AVE./ BRIDGEPORT CT 06608 

06787 JOHN V. VILKAITIS/ P.O. BOX 26/ THOMASTON CT 06787/ (203) 283-4232 

06810 RODNEY BLACK/ BLDG //2/ BURROUGHS CORP./ 105 NEWTON ROAD/ DANBURY CT 06810/ (203) 792-6000 

06856 F. ERIC ROBERTS/ CCF SOFTWARE ENGINEERING/ MS 284/ PERKIN ELMER CORP./ MAIN AVENUE/ NORWALK CT 06856/ (203) 762-1797 

06880 MICHAEL BEHAR/ 75 COMPO RD. NORTH/ WESTPORT CT 06880 

06896 NICHOLAS R. GETI/ 241 ROUTE 107/ W. REDDING CT 06896/ (203) 544-8109 

06897 D. KONIGSBACH/ NATIONAL CSS/ 187 DANBURY ROAD/ WILTON CT 06897/ (203) 762-2511 X559 
06902 JAMES MOLONEY/ ITT-TTC/ 1351 WASHINGTON BLVD./ STAMFORD CT 06902/ (203) 357-8000 
07044 LAWRENCE E. BAKST/ 100 PARK AVE./ VERONA NJ 07044/ (201) 239-3518 

07110 STEVEN R. RAKITIN/ SOFTECH INC./ 492 RIVER RD./ NUTLEY NJ 07110/ (201) 284-3291 

07430 JOHN RYZLAK/ WESTERN UNION TELEGRAPH CO./ 90 MCKEE DR./ MAHAWAH NJ 07430/ (201) 529-6472 

07602 ALLEN A. WATSON/ PRODUCTION SYSTEMS/ THE RECORD/ 150 RIVER STREET/ HACKENSACK NJ 07602/ (201) 646-4000 

07666 RICHARD D. SPILLANE/ DEPT OF MATH/COMPUTER SCIENCE/ FAIRLEIGH DICKINSON UNIV./ TEANECK NJ 07666/ (201) 836-6300 X427 

07730 ROBERT HALLORAN/ 21 KERRY DR./ HAZLET NJ 07730/ (201) 264-3162 

07733 P. E. RUTTER/ HO 1E-408/ BELL LABORATORIES/ HOLMDEL NJ 07733 

07753 J. F. DICKSON/ 100 LAKEWOOD RD./ NEPTUNE NJ 07753 

07801 MARTIN NICHOLS/ 100 GUY STREET/ DOVER NJ 07801/ (201) 628-9000 X777 (WORK)/ (201) 361-7180 (HOME) 

07821 BEN SCHWARTZ/ 495 CROWS NEST ROAD / FOREST LAKES/ ANDOVER NJ 07821/ (201) 786-5897 

07846 RANDOLPH BENTSON/ BOX 476/ JOHNSONBURG NJ 07846/ (201) 852-6935 

07876 ROBERT KAST/ 11 CENTER LANE/ SUCCASUNNA NJ 07876/ (201) 584-4119 * 

07922 DENNIS K. THORSON/ 243 MCMANE AVE/ BERKELEY HTS NJ 07922/ (201) 464-9534 

07960 L. RIANHARD/ 103 SHADY LANE/ MORRISTOWN NJ 07960/ (201) 533-3021 WORK 

08034 LEON S. LEVY/ 1021 MT. PLEASANT WAY/ CHERRY HILL NJ 08034 

08536 JOSEPH CUSACK/ 21-01 DEER CREEK DRIVE/ PLAINSBORO NJ 08536/ (609) 799-3088 

08540 A. CHARLES BUCKLEY/ ADR SERVICES INC./ ROUTE 206 CENTER/ PRINCETON NJ 08540/ (609) 921-8550 X396\ 

08540 D. CARAC'APPA/ DAVID SARNOFF RESEARCH CENTER/ RCA CORP./ P.O. BOX 432/ PRINCETON NJ 08540 

08540 JAMES C. EMERY/ INTERUNIVERSITY COMMUNICATIONS COUNCIL/ EDUCOM/ P.O. BOX 364/ PRINCETON NJ 08540/ (609) 921-7575 

08540 DAVID RIPLEY/ SARNOFF RESEARCH CENTER/ RCA CORP./ P.O. BOX 432/ PRINCETON NJ 08540/ (202) 

08540 HENRY WOOD/ 259 MT. LUCAS ROAD/ PRINCETON NJ 08540 

08541 JOHN C. LOCKHART/ D233/ EDUCATIONAL TESTING SERVICE/ ROSEDALE RD./ PRINCETON NJ 08541/ (609) 921-9000 X3562 
08854 ATTN: COMPUTER REFERENCE CENTER/ CCIS/ RUTGERS UNIV./ P.O. BOX 879/ PISCATAWAY NJ 08854/ (201) 932-2296 

08854 ATTN: DON T. HO/ TECHNICAL INFORMATION LIBRARY/ PY 1G114A/ BELL LABS/ 6 CORPORATE PLACE/ PISCATAWAY NJ 08854/ (201) 981-6500 

08854 NARAIN GEHANI/ 1E-134/ BELL LABS/ 6 CORP. PLACE/ PISCATAWAY NJ 08854/ (201) 981-3269 

08854 RUSSELL J. PEPE/ 142 MOUNTAIN AVE/ PISCATAWAY NJ 08854/ (201) 527-6869 

08873 ROBERT BOYLAN/ P.O. BOX 23/ EAST MILLSTONE NJ 08873/ (201) 874-5449 

10003 STEVEN L. MITCHELL/ 5 ST. MARKS PLACE APT 3/ NEW YORK NY 10003/ (212) 228-5/96 

10006 DAVID EISENBERG/" 19TH FLOOR/ CUTTING EDGE OF TECHNOLOGY INC./ 61 BROADWAY/ NEW YORK NY 10006/ (.212) 480-0480 

10010 TAIWAN CHANG/ 18V/ METROPOLITAN LIFE/ 1 MADISON AVE./ NEW YORK NY 10010/ (212) 578-2258 

10010 LUTHER SPERBERG/ EMPIRE STATE REPORT/ 17 LEXINGTON AVE./ NEW YORK NY 10010/ (212) 725-3313 

10013 BILL LIPSKY/ 310 GREENWICH ST 38E/ NEW YORK NY 10013 

10016 JUAN RADULOVIC/ SADELMI NEW YORK INC./ 2 PARK AVENUE/ NEW YORK NY 10016/ (212) 750-2462 

10016 RAMON TAN/ 305 E. 40TH ST. APT. 12W/ NEW YORK NY 10016/ (212) 754-6464 

10017 ROBIN KASCKOW/ DECISION STRATEGY CORP./ 708 3RD AVE/ NEW YORK NY 10017/ (212) 687-2660 

10020 MICHAEL ROSENBERG/ NBC - 1401W/ 30 ROCKEFELLER PLAZA/ NEW YORK NY 10020/ (212) 664-4444 X5087 

10022 LARRY ARONSON/ 16TH FLOOR/ BOEING COMPUTER SERVICES/ 825 THIRD AVE./ NEW YORK NY 10022/ (212) 486-7275 

10025 JOHN I. FREDERICK./ 306 W. 100TH ST. APT 81/ NEW YORK NY 10025 

10028 MICHAEL OLFE/ 226 E. 83RD ST. APT. 44/ NEW YORK NY 10028/ (212) 794-0178 

10028 CHRISTOPHER YORK/ THE SPENCE SCHOOL/ 22 EAST 91 STREET/ NEW YORK NY 10028/ (212) 289-5940 

10029 NORMAN R. KASHDAN/ INST. OF COMP. SCI./ MT. SINAI SCHOOL OF MEDICINE/ FIFTH AVE. AT 100TH ST./ NEW YORK NY 10029/ (212) 650-7253 
10031 HIDEI1IKO TANAtCA/ DEPT. OF ELECTRICAL ENGR./ CITY COLLECE OF NEW YORK/ CONVENT AVE. @ 140TH ST/ NEW YORK NY 10031/ (212) 690-6621 
10304 JOHN D. OWENS/ 147 NORWOOD AVE./ STATEN ISLAND NY 10304/ (212) 448-6283 

10516 CHARLES D. FOLEY III/ 4 KNOLLWOOD LANE/ COLDSPRING NY 10516/ (914) 265-9602 

10549 DANIEL R. MCGLYNN/ 71 N. MOGER AVE./ MT. KISCO NY 10549/ (914) 666-4665 

10550 CHARLES PRINDLE/ MAGNETIC ANALYSIS CORP./ 535 SOUTH 4TH AVE./ MT. VERNON NY 10550/ (914) 699-9450 
10577 JOSEPH F. SCHAUB JR./ INFORMATION SYSTEMS DEPT./ PEPSI-COLA COMPANY/ PURCHASE NY 10577 

10591 GORDON UBER/ 410 BENEDICT AVE APT 3-D/ TARRYTOWN NY 10591 

10598 VICTOR S. MILLER/ THOS J. WATSON RESEARCH CENTER/ IBM/ P.O. BOX 218/ YORKTOWN HGTS NY 10598 

10598 MARK SEIDEN/ IBM RESEARCH/ PO BOX 218/ YORKTOWN HGTS NY 10598/ (914) 945-2992 

10804 GLEN R. J. MULES/ 263 BEECHMONT DRIVE/ NEW ROCHELLE NY 10804/ (914) 235-7323 

10901 J. SCOTT DIXON/ 35 PARK AVE. APT 5K/ SUFFERN NY 10901/ (914) 357-1256 

10954 JON BANGS/ 3-2 NORMANDY VILLAGE/ NANUET NY 10954/ (914) 623-1222 

10964 NORMAN M. EVENSEN/ LAMONT-DOHERTY GEOLOGICAL OBSERVATORY/ PALISADES NY 10964/ (914) 359-2900 X302 

10965 ROBERT NORRIS/ LAWLER MATUSKY & SKELLY/ ONE BLUE HILL PLAZA/ PEARL RIVER NY 10965/ (914) 735-8300 
10996 ROBERT L. LEECH/ DEPT. OF ELEC. ENGR./ U.S. MILITARY ACADEMY/ WEST POINT NY 10996/ (914) 938-3071 
11020 ROBERT LEVINE/ MAIL STA F5/ SPERRY SYSTEMS MANAGEMENT/ GREAT NECK NY 11020 

11020 WARREN K. MELHADO/ MAIL STATION H-3/ SPERRY SYSTEMS MGMT./ GREAT NECK NY 11020/ (516) 574-3407 

11040 TOM SCALLY/ P.O. BOX 864/ NEW HYDE PARK NY 11040 

11415 GILBERT KAPLAN/ 83-52 TALBOT ST./ KEW GARDENS NY 11415 

11716 JAMES A. COLE/ MEGADATA CORP./ 35 ORVILLE DRIVE/ BOHEMIA NY 11716/ (516) 589-6800 

11725 FRED ROMEO/ 7 FRUITWOOD LANE/ COMMACK NY 11725/ (516) 575-5723 

11725 ASHOK SHENOLIKAR/ 22 GREENE DRIVE/ COMMACK NY 11725/ (516) 499-9166 

11727 DONALD R. COSCIA/ SUFFOLK C. C. COLLEGE/ 11 FAIRWOOD LN./ CORAM NY 11727/ (516) 233-5291 

11767 RICHARD J. LAW/ 75 MIDWOOD AVE/ NESCONSET NY 11767 

11772 GEORGE A. CACIOPPO JR./ 238 MARTHA AVENUE/ EAST PATCHOGUE NY 11772/ (516) 286-8475 

11776 BILLIE S. GOLDSTEIN/ UNIVERSITY GARDENS - APT. 2D/ 460 OLD TOWN ROAD/ PT JEFFERSON * NY 11776/ (516) 928-3291 

11973 ARTHUR L. Y. LAU/ DEPT OF BIOLOGY/ BROOKHAVEN NATIONAL LABORATORY/ UPTON NY 11973/ (518) 345-3394 

11973 FRANK LEPERA/ APPLIED MATH. DEPT./ BLDG 515/ BROOKHAVEN NATIONAL LABORATORY/ UPTON NY 11973/ (516) 345-4112 

12206 ALLEN BROWN/ MIKROS SYSTEMS CORP/ 845 CENTRAL AVE./ ALBANY NY 12206/ (518) 489-2561 

12305 HONOR REYNOLDS/ 33 FERRY ST./ SCHNECTADY NY 12305/ (518) 385-8489 (WORK) 

12308 JOHN D. COATES/ COMPUTER CENTER/ UNION COLLEGE/ SCHENECTADY NY 12308/ (518) 370-6293 

12309 FRANCIS FEDERIGHI/ 2109 BAKER AVE/ SCHENECTADY NY 12309/ (518) 457-3998 

12401 G. KREMBS/ DEPT 66A / BLDG 003/ IBM CORPORATION/ NEIGHBORHOOD ROAD/ KINGSTON NY 12401/ (914) 383-0123 

12546 PAUL F. FITTS/ SYSTEMS DEVELOPMENT/ INNOVATEK MICROSYSTEMS INC./ SMITHFIELD ROAD/ MILLERTON NY 12546/ (914) 373-9003 

13069 ROBERT NARAD/ 407 S. 3RD ST./ FULTON NY 13069/ (315) 598-1550 

13206 JOHN C. WYMAN/ 263 ROXBURY RD./ SYRACUSE NY 13206/ (315) 423-4320 

13440 ATTENTION: H. SPAANENBURG/ MEASUREMENT CONCEPT CORPORATION/ 1333 E. DOMINICK STREET/ ROME NY 13440/ (315) 337-1000 

13502 THEO RAMAKERS/ ICL INC/ COSBY MANOR RD/ UTICA NY 13502/ (315) 797-5750 

14215 ALLAN MOORE/ 69 EASTON/ BUFFALO NY 14215/ (716) 897-2041 

14226 MIKE MANTHEY/ C.S. DEPT./ SUNY - BUFFALO/ 4226 RIDGE LEA ROAD/ AMHERST NY 14226/ '(716) 831-1351 

14527 DAN DORROUGH/ 1103 E. BLUFF DR./ PENN YAN NY 14527 

14580 RICHARD ALRUTZ/ 241 W128/ XEROX CORP./ 800 PHILLIPS RD./ WEBSTER NY 14580/ (716) 422-5154 

14580 WERNER SCHENK/ TECHNICAL PROGRAMMING SERV./ XEROX CORP./ 800 PHILLIPS ROAD W128/ WEBSTER NY 14580/ (716) 422-5301 

14601 LEOB KOPF/ TAYLOR INSTRUMENT CO./ 95 AMES ST./ ROCHESTER NY 14601/ (716) 235-5000 

14609 LOUIS B. JAMES/ SOFTWARE ENGINEERING/ COMPUTER CONSOLES INC./ 97 HUMBOLT STREET/ ROCHESTER NY 14609/ (716) 482-5000 

14619 DANIEL A. EHMANN/ 165 WINBOURNE ROAD/ ROCHESTER NY 14619/ (716) 436-2271 

14620 LARRY GERTZOG/ COMPUTING CENTER/ UNIV. OF ROCHESTER/ '727 ELMWOOD AVE/ ROCHESTER NY 14620/ (716) 275-4181 
14627 RICHARD D. MOSAK/ DEPT. OF MATHEMATICS/ MATH SCIENCES BLDG/ UNIV. OF ROCHESTER/ ROCHESTER NY 14627 
14650 ATTN: EASTMAN KODAK CO./ 525 ENGINEERING LIBRARY/ KODAK PARK DIV BLDG 23/ ROCHESTER NY 14650 

14850 ALISON A. BROWN/ OFFICE OF COMPUTER SERVICES/ G-24 URIS HALL/ CORNELL UNIV./ ITHACA NY 14850/ (607) 256-7341 
14850 OAVTD .1. l.F.WTS/ MATHEMATICS DKPT./ ITHACA COLLEGE/ ITHACA NY 14850/ (607) 274-3L07 



PASCAL NEWS #15 SEPTEMBER, 1979 P A G E 1 5 

15146 HENRY J. BOWLDEN/ WESTINGHOUSE R&D CENTER/ 1310 BEULAH ROAD/ PITTSBURGH PA 15146/ (412) 256-3375 

15213 CHUCK AUGUSTINE/ COMPUTATION CENTER/ CARNEGIE MELLON UNIV./ SCHENLEY PARK/ PITTSBURGH PA 15213/ (412) 578-2649 

15213 ANDY HISGEN/ COMPUTER SCIENCE DEPT./ CARNEGIE-MELLON UNIVERSITY/ PITTSBURGH PA 15213/ (412) 578-3053 

15213 CHARLES Y. MORROW/ COMPUTER ENGR. DIV./ CARNEGIE-MELLON INST. OF RESEARCH/ 4616 HENRY ST./ PITTSBURGH PA 15213/ (412) 578-3361 

15213 BRIAN ROSEN/ THREE RIVERS' COMPUTER CORP./ BOX 235 SCHENLEY PARK/ PITTSBURGH PA 15213/ (412) 621-6250 

15213 JAMES B. SAXE/ COMPUTER SCIENCE DEPT./ CARNEGIE-MELLON UNIVERSITY/ PITTSBURGH PA 15213/ (412) 518-3073 

15213 RICHARD SNODGRASS/ DEPT. OF COMPUTER SCIENCE/ CARNEGIE-MELLON UNIV./ PITTSBURGH PA 15213/ (412) 578-3044 

15213 KEVIN WEILER/ SCHOOL OF URBAN AND PUBLIC AFFAIRS/ INSTITUTE OF PHYSICAL PLANNING/ CARNEGIE MELLON UNIV/ SCHENLEY PARK/ PITTSBURGH PA 15213 

(412) 578-2177 
15229 CAROL SLEDGE/ ON-LINE SYSTEMS INC/ 115 EVERGREEN HEIGHTS DRIVE/ PITTSBURGH' PA 15229/ (412) 931-7600 
16802 S. BROOKS MCLANE/, DEPT OF PHYSICS/ 104 DAVEY LABS/ PENN STATE UNIV./ UNIVERSITY PK PA 16802/ (814) 

17055 E. R. BEAUREGARD/ CODE: 9442T/ NAVY FLEET MATERIAL SUPPORT OFFICE/ MECUANICSBURG PA 17055/ (717) 790-4130/ (717) 766-1446 (HOME) 
17257 CHARLES E. MILLER/ RD 5 - CRESCENT DRIVE/ SHIPPENSBURG PA 17257/ (717) 532-5169 (HOME)/ (717) 532-1540 (WORK) 
18015 RAYMOND G. MORETZ JR./ 1102 SENECA STREET/ BETHLEHEM PA 18015/ (215) 948-7900 X377/ (215) 691-6902 (HOME) 
18042 PETER A. APCAR/ 401 FROST HOLLOW ROAD/ EASTON PA 18042/ (215) 252-2176 
18104 THOMAS M. MORRISETTE/ 2219 GREENLEAF ST./ ALLENTOWN PA 18104/ (215) 434-2993 

18936 LAWTHER 0. SMITH/ GAS SPRING CORP./ 17 COMMERCE DRIVE/ MONTGOMERYVL PA 18936/ (215) 368-7105 
18976 FRANCIS W. YEUNG/ P.O. BOX 489/ WARRINGTON PA 18976/ (215) 343-4758 
19002 IRA RUBEN/ 2104 LINCOLN DRIVE EAST/ AMBLER PA 19002/ (215) 542-2174 
19002 NEIL R. BAUMAN/ HEALTHCOM/ AXE WOOD WEST/ BROADAXE PA 19002/ (215) 643-7330 

19085 JAMES SOLDERITSCH/ DEPT OF MATHEMATICS/ VILLANOVA UNIV./ VILLANOVA PA 19085/ (215) 527-2100 X669 
19090 WILLIAM L. BAIRD/ 36 WOODHILL DRIVE/ WILLOW GROVE PA 19090/ (215) 659-4929 

19101 ROBERT A. EPPING/ ENVIRONMENTAL SYSTEMS/' 1260M/ GENERAL ELECTRIC CO./ 3198 CHESTNUT ST./ PHILADELPHIA PA 19101/ (215) 823-3242 

19102 H. R. WRIGHT/ 13TH FLOOR/ BELL OF PENNSYLVANIA/ 1 PARKWAY/ PHILADELPHIA PA 19102/ (215) 466-3478 
19104 ATTN: SERIALS DEPT./ DREXEL UNIV. LIBRARIES/ 32ND & CHESTNUT STREETS/ PHILADELPHIA PA 19104 

19104 JOHN F. LUBIN/ THE WHARTON SCHOOL/ DE-111 CC/ UNIV. OF PENNSYLVANIA/ PHILADELPHIA PA 19104/ (215) 243-7601 

19104 JOSEPH O'ROURKE/ 4103 CHESTNUT ST./ PHILADELPHIA PA 19104 

19104 STEPHEN M. PLATT/ 4060 IRVING ST./ PHILADELPHIA PA 19104/ (215) 222-6432 

19144 WARREN G. POWELL/ PHILADELPHIA COLLEGE TEXTILES AND SCI*/ SCHOOL HOUSE LANE & HENRY AVE./ PHILADELPHIA PA 19144/ (215) 843-9700 

19147 DENIS KALTHOFER/ 613 SOUTH STREET/ PHILADELPHIA PA 19147/ (215) 923-7850 

19422 RICHARD D. LADSEN/ MS A-l/ SPERRY UNIVAC/ P.O. BOX 500/ BLUE BELL PA 19422/ (215) 542-4011 

19454 KURT MEYLE/ MD #148/ LEEDS & NORTHRUP/ DICKERSON RD./ NORTH WALES PA 19454/ (215) 643-2000 X3033 

19518 RICHARD A. JOKIEL/ P.O. BOX 136/ DOUGLASVILLE PA 19518/ (215) 385-6324/ (215) 948-7900 

19713 ROBERT F. BASHFORD/ 704 MANFIELD RD./ NEWARK DE 19713 

20003 VANESSA AXELROD/ EDS FEDERAL CORP./ 229 PENNSYLVANIA AVE./ WASHINGTON DC 20003/ (202) 546-8700 

20012 RICK THOMAS/ 408 DOMER AVENUE/ TAKOMA PARK MD 20012/ (301) 565-2678 (HOME)/ (301) 454-2946 (WORK) 

20014 JOHN M. SHAW/ BLDG 36 / ROOM 2A29/ NATIONAL INSTITUTES OF HEALTH/ BETHESDA MD 20014/ (301) 496-3204 

20015 W. G. BLASDEL/ 4513 CUMBERLAND AVE./ CHEVY CHASE MD 20015 
20015 ROBERT L. MCGHEE/ 4417 BRADLEY LANE/ CHEVY CHASE MD 20015 
20018 LARRY LANGDON/ 3132 APPLE RD. N.E./ WASHINGTON DC 20018 

20024 GARY A. KUDIS/ 3224/ COMSAT GENERAL CORP./ 950 L'ENFANT PLAZA SW/ WASHINGTON DC 20024/ (202) 554-6438 

20034 ROY MADDUX/ FEDERAL SYSTEMS DIV./ IBM/ 10215 FERNWOOD RD./ BETHESDA MD 20034/ (301) 897-3345 

20036 N. RAMACHANDRAN7 LEXICO ENTERPRISES/ 1333 NEW HAMPSHIRE AVE. NW - SUITE 510/ WASHINGTON DC 20036/ (202) 457-0320 

20052 ATTN: TECHNICAL ASSISTANCE/ UNIVERSITY COMPUTER CENTER/ GEORGE WASHINGTON UNIVERSITY/ 2013 G STREET N.W. #201/ WASHINGTON DC 20052/ (202) 676-6140 

20229 STEVE O'KEEFE/ 7328/ U.S. CUSTOMS DATA CENTER/ 1301 CONSTITUTION AVE. N.W./ WASHINGTON DC 20229/ (202) 566-2974 

20590 ATTN: COMMANDANT (G-D0E-3/TP54)/ U.S. COAST GUARD/ 2100 2ND ST. SW/ WASHINGTON DC 20590 

20601 DONALD H. RINGLER/ MICROWAVE SPACE RESEARCH FACILITY/ NAVAL RESEARCH LABORATORY/ RFD NO. 2 BOX 126A/ WALDORF MD 20601 

20755 ATTN: S86/ I# PIG/ NATIONAL SECURITY AGENCY/ FT. GEO. MEADE MD 20755/ (301) 688-6015 

20760 PEGGY DUNN/ OLD DOMINION SYSTEMS/ 4 PROFESSIONAL DRIVE - SUITE 119/ GAITHERSBURG MD 20760/ (301) 948-5200 

20770 J.EO R. DAVIS/ 40 LAKESIDE DRIVE/ GREENBELT MD 20770/ (301) 474-9125 

20771 ADOLPH GOODSON/ GODDARD SPACE FLIGHT CENTER/ CODE 5331/ NASA/ GREENBELT MD 20771 
20776 BETTY A. COLHOUN/ IVY NECK/ HARWOOD PO MD 20776/ (301) 867-2348 

20795 KENNETH R. JACOBS/ 10112 ASHWOOD DR./ KENSINGTON MD 20795/ (301) 946-4769 

20852 ALLEN E. BENDER/ 5003 MACON ROAD/ ROCKVILLE MD 20852 

20854 LOUIS V. RUFFINO/ FEDERAL SYSTEMS DIVISION/ IBM/ 18100 FREDERICK PIKE/ GAITHERSBURG MD 20854/ (301) 840-7978 

20854 ATTN: APPLIED BUSINESS COMPUTER SYSTE*/ 12913 MISSIONWOOD WAY/ POTOMAC MD 20854/ (301) 340-8708 

20901 DAVID P. WALSH/ 319 HILLMOOR DRIVE/ SILVER SPRING MD 20901 

21031 ATTN: GENERAL INSTRUMENT CORPORATION/ C/O TECHNICAL LIBRARY/ 11126 MCCORMICK ROAD/ HUNT VALLEY MD 21031/ (301) 666-8700 X333 

21031 WALTER J. KLOS/ DISPLAY DATA CORP./ EXECUTIVE PLAZA IV / HUNT VALLEY MD 21031/ (301) 667-9211 

21040 LAWRENCE W. BAIN JR./ 804 FISHERMAN LANE/ EDGEWOOD MD 21040/ (301) 676-4791 

21044 RON GRAVES/ GENERAL PHYSICS CORP./ 1000 CENTURY PLAZA/ COLOMBIA MD 21044/ (301) 730-4055 

21045 RICHARD LLEWELLYN/ 5355 RED LAKE/ COLUMBIA MD 21045/ (301) 997-4079 

21202 WAYNE N. OVERMAN/ OFFICE OF THE PUBLIC DEFENDER/ 800 EQUITABLE BLDG./ BALTIMORE MD 21202/ (301) 383-7743 

21204 EDWARD W. KNUDSEN/ G/157/ AAI CORP./ P.O. BOX 6767/ BALTIMORE MD 21204/ (301) 666-1400 

21234 KEVTN A. PARKS/ 1806 DAUfOUSIE C T . APT B2/ BALTIMORE Ml) 21234/ (301) 668-2067 

21793 PAUL C. BERGMAN/ DIGITAL SYSTEMS CORP./ 3 NORTH MAIN ST./ WALKERSVILLE MD 21793/ (301) 845-4141 

22003 PATRICIA TIMPANARO/ 4504 COMMONS DRIVE #102/ ANNANDALE VA 22003/ (202) 223-5676 

22030 WILLIAM F. AMON III/ 13312 PENNYPACKER LANE/ FAIRFAX VA 22030/ (703) 790-8620 

22043 ROBERT ROSE/ 2205 GRAYSON PLACE/ FALLS CHURCH VA 22043/ (703) 534-1984 

22090 GEORGE W. CHERRY/ 1542 GOLDENRAIN CT. / RESTON VA 22090/ (703) 437-4450 

22090 STEPHEN GERKE/ 1646 PARKCREST CIR. #301/ RESTON VA 22090/ (703) 437-4319 

22091 RICHARD STADTMILLER/ 1454 GREEMONT CT./ RESTON VA 22091 

22101 J. J. LOGAN/ INFODYNAMICS/ 6636 HAZEL LANE/ MCLEAN VA 22101/ (703) 893-5436 

22102 DAVID A. GOMBERG/ W-615/ MITRE CORP./ 1820 DOLLEY MADISON BLVD./ MCLEAN VA 22102/ (703) 827-7036 
22206 PHILIP R. MYLET/ 3373 S. STAFFORD ST./ ARLINGTON VA 22206/ (202) 692-3585 

22209 ARTHUR E. SALWIN/ SUITE 711/ RIVERSIDE RESEARCH INSTITUTE/ 1701 N. FT MYER DR/ ARLINGTON VA 22209/ (703) 522-2310 

22302 CRAIG E. JACKSON/ 3778 GUNSTON ROAD/ ALEXANDRIA VA 22302/ (703) 998-8262 

22304 THOMAS E. SHIELDS/ 300 SOUTH VAN DORN STREET APT #R113/ ALEXANDRIA VA 22304 

22312 MICHAEL D. HURLEY/ 437 N. ARMISTEAD ST. APT #5/ ALEXANDRIA VA 22312 

22801 JOSEPH W. MAST/ EASTERN MENNONITE COLLEGE/ HARRISONBURG VA 22801/ (703) 433-2771 

22980 ATTN: W. H. GENTRY/ DCPBD LIBRARY/ GENERAL ELECTRIC/ WAYNESBORO VA 22980 

23185 KATHLEEN S. MICKEN/ DRAWER EE/ WILLIAMSBURG VA 23185/ (804) 564-9350 

23666 ATTN: HAMPTON TECHNICAL CENTER/ C/O DOVI-KURTZE/ KENTON INTERNATIONAL INC./ 3221 NORTH ARMISTEAD AVE./ HAMPTON VA 23666 

24501 MARK FURTNEY/ 1427 TUNBRIDGE RD/ LYNCHBURG VA 24501/ (804) 384-5799 

27101 A. J. SUTTON/ 1135 WEST FOURTH STREET/ WINSTON-SALEM NC 27101/ (919) 723-4735 

27605 LENNY HEATH/ MICRONICS INC/ P.O. BOX 12545/ RALEIGH NC 27605 

28704 CARROLL B. ROBBINS JR./ APT 32/ ARDEN ARMS APTS./ ARDEN NC 28704/ (919) 684-0168/ (704) 684-8111 (WORK) 

30060 FRANK MONACO/ 679 LOWELL DRIVE/ MARIETTA GA 30060/ (404) 424-1460 

30303 E. G. SWARTZMEYER/ INFORMATION SYSTEMS DEPT/ GEORGE STATE UNIVERSITY/ UNIVERSITY PLAZA/ ATLANTA GA 30303/ (404>) 658-3883 

30306 PAUL D. FIELD/ ATLANTA COMPUTER SYSTEMS/ 1019 ROSEDALE ROAD N.E./ ATLANTA GA 30306/ (404) 872-9968 

30313 AL SHEPPARD/ SIR-ATLANTA INC./ 331 LUCKIE STREET NW/ ATLANTA GA 30313/ (404) 522-6317 

30327 JOHN P. WEST/ DIGITAL SYSTEMS DESIGN GROUP/ 4559 DUDLEY LANE NW/ ATLANTA GA 30327/ (404) 894-2264 

30328 M. L. MCGRAW/ 655 SPALDING DR./ ATLANTA GA 30328/ (404) 394-2017 

30332 KOZAI KATSUTOSHI/ GEORGIA TECH/ P.O. BOX 33843/ ATLANTA GA 30332/ (404) 874-7881 

30332 JOHN PEATMAN/ SCHOOL OF EE/ GEORGIA TECH/ ATLANTA GA 30332/ (404) 894-2901 

30332 JERRY W. SEGERS/ OFFICE OF COMPUTING SERVICES/ GEORGIA INSTITUTE OF TECHNOLOGY/ ATLANTA GA 30332/ (404) 894-4676 

30341 MIKE HAYES/ 4122 ADMIRAL DRIVE/ CHAMBLEE GA 30341/ (404) 451-1176 

32308 C. EDWARD REID/ P.O. BOX 12578/ TALLAHASSEE FL 32308/ (904) 488-2451 

32901 CRAIG NELSON/ 635 AUBURN AVENUE/ MELBOURNE FL 32901/ (305) 727-3207 

32905 STEPHEN E. WOODBRIDGE/ 642 STEARNS AVE./ PALM BAY FL 32905/ (305) 727-5202 

33143 S. M. MINTON/ 6562 S.W. 76 TERRACE/ SOUTH MIAMI FL 33143 

33319 A. I. STOCKS/ 3730 INVERRARY DRIVE #1-W/ LAUDERDALE FL 33319 

33334 J. NIEL HAYNIE/ NORTH RIDGE DATA INC./ 971 E. COMMERCIAL BLVD./ FT. LAUDERDALE FL 33334/ (305) 771-6344 

33432 ROBERT K. STEVENS/ 601 GOLDEN HARBOUR DRIVE/ BOCA RATON FL 33432/ (305) 391-6213 

33601 JOHN L. HALL JR./ DC 156/ GTE DATA SERVICES INC./ P.O. BOX 1548/ TAMPA FL 33601/ (813) 224-3286 

33620 DAVID B. CAMERON/ COMPUTER RESEARCH CENTER/ INSTRUCTION AND RESEARCH SYSTEMS/ UNIV. OF SOUTH FLORIDA/ TAMPA FL 33620/ (813) 974-2585 

35773 MALCOLM GILLIS/ MEGA CORP./ 1001 REYNOLDS RD./ TONEY AL 35773/ (205) 828-0922/ (205) 453-1455 

35805 JERRY R. BROOKSHIRE/ 3402 WILKS PL SW/ HUNTSVILLE AL 35805/ (205) 881-9539 

35805 MIKE D. PESSONEY/ ANALYSTS INTERNATIONAL CORP./ 2317 BOB WALLACE AVE SW/ HUNTSVILLE AL 35805/ (205) 533-4220 

36582 ROY KEELEY JR/ RT. 3 BOX 316/ THEODORE AL 36582/ (205) 973-2516 

37076 LARRY D. BOLES/ 649 DENVER DRIVE/ HERMITAGE TN 37076/ (615) 885-1942 

40506 LAVINE THRAILKILL/ COMPUTING CENTER/ 72 MCVEY HALL/ U OF KENTUCKY/ LEXINGTON KY 40506/ (606) 258-2916 

43201 ATTN: COMPUTER CENTER LIBRARY/ BATTELLE MEMORIAL INSTITUTE/ 505 KING AVE./ COLUMBUS OH 43201/ (614) 424-7329 

43201 KEVIN CADMUS/ BATTELLE COLUMBUS LABS/ 505 KING AVENUE/ COLUMBUS OH 43201/ (614) 424-7331 

43402 REX KLOPFENSTEIN JR/ 400 NAPOLEON RD APT 332/ BOWLING GREEN OH 43402/ (413) 353-5311 

44022 TOM ZWITTER/ 17991 MILLSTONE RD./ CHAGRIN FALLS OH 44022/ (216) 543-5405 

44092 EDWARD S. MALLINAK JR./ BAILEY CONTROLS CO./ 29801 EUCLID AVE. 2F3/ WICKLIFFE OH 44092/ (216) 943-5500 X2821 

44103 DALE BRAINARD/ SOFTWARE ENGR. - TURNING MACHINE DIV./ WARNER & SWASEY COMPANY/ 5701 CARNEGIE AVENUE/ CLEVELAND OH 44103/ (216) 368-5000 

44107 STEVEN B. HALL/ 1599 ORCHARD GROVE/ LAKEWOOD OH 44107/ (216) 521-4178 

44115 KARL J. CASPER/ DEPT. OF PHYSICS/ CLEVELAND STATE UNIV./ CLEVELAND OH 44115/ (216) 687-2432 

44124 STUART W. ROWLAND/ 1436 GOLDENGATE BLVD. #G4/ MAYFIELD HTS OH 44124/ (216) 473-0347 

44139 ROBERT STRADER/ WARNER & SWASEY RESEARCH DIV./ 28999 AURORA RD./ SOLON OH 44139/ (216) 368-6178 

44141 DONALD E. WHILE/ RESEARCH AND DEVELOPMENT/ B.F.GOODRICH/ 9921 BRECKSVILLE ROAD/ BRECKSVILLE OH 44141/ (216) 526-4311 

44202 AUSTIN CHANEY/ 738-2 CLARIDGE LANE/ AURORA OH 44202/ (216) 562-7289 

45214 JAMES HARGREAVES/ P.O. BOX 14734/ CINCINNATI OH 45214/ (513) 385-7048 

45219 LARRY BEITCH/ 458 LLOYD PLACE/ CINCINNATI OH 45219/ (513) 621-8275 

45324 RICHARD L. TUCKER/ 8007 PHILADELPHIA DR./ FAIRBORN OH 45324 

45387 JOHN S. WADDELL/ 113 EAST NORTH COLLEGE STREET/ YELLOW SPRINGS OH 45387/ (513) 767-9157 

45429 BOB MYERS/ 4941 ACKERMAN BLVD./ KETTERING OH 45429/ (513) 434-9548 

45433 STEVEN ROGERS/ 1011 MIDDY DR./ WPAFB OH 45433/ (513) 253-5860 



PASCAL NEWS #15 SEPTEMBER, 1979 PAGE 16 

45701 MARK L. OLSON/ DEPT OF CHEMISTRY/ OHIO UNIVERSITY/ ATHENS OH 45701 

45840 EDGAR N. SVENDSEN/ 1823 PARK ST./ FINDLAY OH 45840/ (419) 422-8908 

46240 BILL ELLIOTT/ 2649 MARINA DRIVE/ INDIANAPOLIS IN 46240/ (317) 253-1085 

46514 NED J. KISER/ CROWN INTERNATIONAL INC./ 1718 W. MISHAWAKA RD./ ELKHART IN 46514/ (219) 294-5571 

46628 CHARLES DAVIS/ GENERAL MICROCOMPUTER INC./ 165/ COMMERCE DRIVE/ SOUTH BEND IN 46628/ (219) 233-9171 

46755 WILLIAM G. BENTLEY/ KING-SEELEY THERMOS CO./ KENDALLVILLE IN 46755 

46808 DALE GAUMER/ GOVT. & INDUSTRIAL DIV./ MAGNAVOX/ 1313 PRODUCTION ROAD/ FORT WAYNE IN 46808/ (219) 482-4411 

47150 DOUGLAS H. QUEBBEMAN/ COMPUTING SERVICES/ INDIANA UNIV. - SOUTHEAST/ 4201 GRANTLINE ROAD/ NEW ALBANY IN 47150/ (812) 945-2731 X287 

47401 PAUL E. DAWSON/ WRUBEL COMPUTER CENTER/ 12 MEMORIAL/ INDIANA UNIV./ BLOOMINGTON IN 47401/ (812) 337-9255 

47401 DAVE DELAUTER/ WRUBEL COMPUTER CENTER/ 78 HPER BLDG/ INDIANA UNIV./ BLOOMINGTON IN 47401/ (812) 337-1911 

47401 DAVID S. WISE/ COJ1PUTER SCIENCE DEPT./ 101 LINDLEY HALL/ INDIANA U/ BLOOMINGTON IN 47401/ (812) 337-4866 

47905 MARK SENN/ 107 DIGBY ROAD/ LAFAYETTE IN 47905 

48076 LAURENCE L. RAPER/ 29497 SPRING HILL DR./ SOUTHFIELD MI 48076/ (313) 559-6781 

48103 JAMES BLYTHE/ THE GREAT LAKES SOFTWARE SYSTEMS LTD./ 5 RESEARCH DRIVE/ ANN ARBOR MI 48103/ (313) 663-6533 

48103 JAMES W. KUIPER/ 542 LINDEN LANE/ ANN ARBOR MI 48103/ (313) 994-3500 X489 (WORK)/ (313) 663-7653 (HOME) 

48103 TOM WEISZ/ BALANCE TECHNOLOGY INC./ 120 ENTERPRISE DRIVE/ ANN ARBOR MI 48103/ (313) 769-2100 

48104 JONATHAN BAUER/ COMSHARE INC./ 3001 S. STATE ST./ ANN ARBOR MI 48104/ (313) 994-4800 
48104 W. J. HANSEN/ INC./ SYCOR/ 100 PHOENIX DRIVE/ ANN ARBOR MI 48104/ (313) 995-1234 

48104 DAVID LIPPINCOTT/ ANN ARBOR COMPUTER CORP./ 3211 PACKARD RD/ ANN ARBOR MI 48104/ (313) 971-3740 

48105 JAMES BLYTHE/ GREAT LAKES SOFTWARE SYSTEMS LTD./ 5 RESEARCH DR./ ANN ARBOR MI 48105/ (313) 663-6533 
48105 WILLIAM E. BULLEY/ 314 CLOVERDALE/ ANN ARBOR MI 48105/ (313) 995-2188 

48105 MARK HERSEY/ 1114 MAIDEN LANE COURT APT. 112/ ANN ARBOR MI 48105/ (313) 994-3934/ (517) 355-1764 (OFFICE) 

48106 RICHARD C. VILE JR./ NORTHERN TELECOM/ l'oO PHOENIX DR. - 4 W.T./ ANN ARBOR MI 48106/ (313) 973-6851 
48130 MARK WOLCOTT/ 5U51 MAST ROAD/ DEXTER MI 48130/ (313) 426-2034 HOME/ (313) 668-4313 WORK 

48176 LARRY ENGELHARDT/ P.C.S./ 750 N. MAPLE ROAD/ SALINE MI 48176/ (313) 429-4971 

48176 DAVID MATTHEWS/ PROCESS COMPUTER SYSTEMS/ 750 N. MAPLE RD./ SALINE MI 48176/ (313) 429-4971 

48176 JOHN VAN ROEKEL/ PROCESS COMPUTER SYSTEMS/ 750 N. MAPLE RD./ SALINE MI 48176/ (313) 429-4971 

48197 ROBERT M. OTTOSEN/ 4444 SWISS STONE LANE E. #3C/ YASILANTI MI 48197/ (313) 434-4969 

48197 RICHARD L. MAHN/ 2473 DRAPER/ YPSILANTI MI 48197/ (313) 761-3050 

48239 ATTN: RCS DATA SYSTEMS/ 26032 FIVE MILE ROAD/ DETROIT MI 48239/ (313) 532-0554 

48640 BOB METZGER/ COMPUTER TECHNOLOGY DEV./ DOW CHEMICAL CO./ 2040 DOW CENTER/ MIDLAND MI 48640/ (517) 636-1352 

48804 GEORGE SARGENT/ 4961 SIOUX WAY/ OKEMOS MI 48804/ (517) 353-3187 

48823 THOMAS W. SKELTON/ 315 WEST SAGINAW STREET/ EAST LANSING MI 48823/ (517) 332-4368/ (517) 351-2530 

49007 ATTN: COVELL & HARWOOD CONSULTANTS/ 714 ISB BLDG./ KALAMAZOO MI 49007/ (616) 382-6665 

49007 MARK T. 0' BRYAN/ PRESTIGE APARTMENT E/ 421 STANWOOD DRIVE/ KALAMAZOO MI 49007 

49008 JACK R. MEAGHER/ COMPUTER SCIENCE AND MATHEMATICS/ WESTERN MICHIGAN UNIV./ KALAMAZOO MI 49008/ (616) 383-0095 
49269 ROGER KLOEPFER/ 7774 BROWN ROAD/ PARMA MI 49269 

49503 MEL PRUIS/ DATA PROCESSING CENTER/ GRAND RAPIDS PUBLIC SCHOOLS/ 143 BOSTWICK N.E./ GRAND RAPIDS MI 49503 

49855 R. BHARATH/ 1330 NORWOOD ST. APT 6/ MARQUETTE MI 49855/ (906) 227-2605 

50158 DAVID HICKOK/ R.A. ENGEL TECH. CENTER/ FISHER CONTROLS CO./ P.O. BOX 11/ MARSHALLTOWN IA 50158/ (515) 754-3923 

52240 HAROLD HARTMAN/ 1912 F ST/ IOWA CITY IA 52240/ (319) 338-7092 

52240 JOHN JOHNSON/ 2906 WAYNE AVENUE/ IOWA CITY IA 52240/ (319) 354-1303 

52240 CHARLES LARSON/ RR #2/ IOWA CITY IA 52240/ (319) 351-5997 

52242 DONALD L. EPLEY/ DEPT. OF COMPUTER SCIENCE/ UNIV. OF IOWA/ IOWA CITY IA 52242/ (319) 353-5605 

52333 BOB WERNER/ ROUTE 3 BOX 237A/ SOLON IA 52333/ (319) 644-2657 

53012 MARK J. SEBERN/ SEBERN ENGINEERING INC/ W55 N815 CEDAR RIDGE DRIVE/ CEDARSBURG WI 53012/ (414) 375-2200 

53092 W. JANSSEN/ 11541 SHORECLIFF LA./ MEQUON WI 53092/ (414) 241-5768 

53115 BILL NORTON/ BORG INSTRUMENTS DIV./ BUNKER RAMO CORP./ 902 WISCONSIN STREET/ DELAVAN WI 53115/ (414) 728-5531 X265 

53126 THOMAS L. BECK/ UNICO INC./ 3725 NICHOLSON RD/ FRANKSVILLE WI 53126/ (414) 632-6121 

53141 D. T. PIELE/ UNIV. OF WISCONSIN - PARKSIDE/ KENOSHA WI 53141/ (414) 553-2231 

53151 JOHN J. MERTZ/ WISCONSIN ELECTRICAL MFG CO INC/ BOX 148/ NEW BERLIN WI 53151/ (414) 782-2340 

53210 ROBERT F. JAKOB/ 2445 N. 50TH ST./ MILWAUKEE WI 53210/ (414) 445-4800 (HOME)/ (414) 276-9200 (WORK) 

53211 W. A. HINTON/ 3469 N. CRAMER ST./ MILWAUKEE WI 53211/ (414) 964-2671 (HOME)/ (414) 963-4005 (OFFICE) 
53211 RICHARD LINTON/ 3027 NORTH SHEPARD AVE./ MILWAUKEE WI 53211/ (414) 332-0070 

53211 BROOKS DAVID SMITH/ 4473 N. NEWHALL ST./ SHOREWOOD WI 53211/ (414) 963-6413 

53214 EDWARD E. KIRKHAM/ ELECTRONIC PRODUCTS DIV./ KEARNEY & TRECKER CORP./ 11000 THEODORE TRECKER WAY/ MILWAUKEE WI 53214/ (414) 476-8300 

53280 BABAK CHUBAK/ 168/ WISCONSIN TELEPHONE/ 345 N. 35TH ST./ MILWAUKEE WI 53280/ (414) 456-3000 

53706 FRED M. JACOBSON/ ACADEMIC COMPUTING CENTER/ UNIV. OF WISCONSIN - MADISON/ 1210 WEST DAYTON STREET/ MADISON WI 53706/ (608) 262-9553 

53706 PAUL C. LUSTGARTEN/ COMPUTER SCIENCE DEPT./ UNIV. OF WISCONSIN/ 1210 W. DAYTON ST./ MADISON WI 53706/ (608) 262-7784 

53715 WILLIAM FOLZ/ 1317 MILTON ST./ MADISON WI 53715/ (608) 256-6789 

54601 JOHN A. NIERENGARTEN/ COMPUTER CENTER/ UNIV. OF WISCONSIN - LA CROSSE/ LA CROSS WI 54601/ (608) 785-8029 

55016 DANIEL DASSOW/ 8745 GREENE AVE. SO./ COTTAGE GROVE MN 55016/ (612) 459-3293 

55057 CLAYTON HAAPALA/ CARLETON COLLEGE/ NORTHFIELD MN 55057/ (507) 645-4431 X369 

55101 DANIEL ETHIER/ 507 E. NEVADA AVE/ ST. PAUL MN 55101/ (612) 771-3281 

55101 CHAD HANSEN/ TIMESHARING SERVICES/ 224-3E/ 3M CENTER/ ST. PAUL MN 55101/ (612) 736-1384 

55101 KURT PAPKE/ ES&T/ BLDG 518/ 3M CENTER/ ST. PAUL MN 55101 

55104 BRUCE NERASE/ BOX 4155/ ST. PAUL MN 55104/ (612) 645-9401 

55104 T. D. POPPENDIECK/ DEPT. OF PHYSICS/ HAMLINE UNIV./ 1536 HEWITT/ ST. PAUL MN 55104/ (612) 641-2293 

55107 KERRY SHORE/ ASTRO COM CORP./ 120 WEST PLATO BLVD/ ST. PAUL MN 55107/ (612) 227-8651 

55112 ED KATZ/ 3564 N. SNELLING/ ARDEN HILLS MN 55112/ (612) 636-3472 

55112 RUSSELL B. KEGLEY/ 316 CLEVELAND AVE S.W. #1B/ NEW BRIGHTON MN 55112/ (612) 636-1758 HOME/ (612) 631-5718 WORK 

55112 ROGER E. MILLER/ 4217 SHIRLEE LANE NO./ SHOREVIEW MN 55112/ (612) 483-5374 

55112 W.'B. CHAP IN/ ARH 242/ CONTROL DATA CORP./ 4201 N. LEXINGTON/ ST. PAUL MN 55112/ (612) 483-4673 

55112 WAYNE A. SANDERSON/ 892 SHIRLEE LANE/ ST. PAUL MN 55112/ (612) 482-2712 

55112 E. L. STECHMANN/ ARH272/ CONTROL DATA CORP./ 4201 N. LEXINGTON AVE./ ST. PAUL MN 55112/ (612) 482-2181 

55113 PETER M. RAMSTAD/' 1260 W. LARPENTEUR/ ST. PAUL MN 55113/ (612) 488-4595 

55116 HAROLD MELAMED/ 18 ORME CT./ ST. PAUL MN 55116/ (612) 699-1313 

55117 STEPHEN S. MCGRANE/ 330 W. COTTAGE AVE. #104/ ST. PAUL MN 55117 
55303 HENRY C. BROM/ 2740 NORTH FERRY ST./ ANOKA MN 55303/ (612) 421-8740 

55317 LANCE K. FISHER/ 401 HIGHLAND DRIVE/ CHANHASSEN MN 55317/ (612) 474-5138/ (612) 941-8090 WORK 
55372 DUANE W. SEBEM/ CREEKWOOD BOX 258/ PRIOR LAKE MN 55372 

55404 VICTOR A. JOHNSON/ MARC CORPORATION/ 2527 COLUMBUS AVE. S./ MINNEPOLIS MN 55404/ (612) 871-4440 

55405 ANDREW S. WOYAK/ 245 SHERIDAN AVENUE SOUTH/ MINNEAPOLIS MN 55405/ (612) 374-5377 

55406 OTTO BAADE/ 2925 37TH AVE S./ MINNEAPOLIS MN 55406/ (612) 729-6250 
55409 CARLIN R. COVEY/ 3917 3RD AVE SO./ MINNEAPOLIS MN 55409/ (612) 827-5202 

55409 MARY NOERENBERG/ 4615 1ST AVE. S./ MINNEAPOLIS MN 55409/ (612) 827-1545 

55410 DAVID E. COLGLAZIER/ 4434 THOMAS AVE S./' MINNEAPOLIS MN 55410/ (612) 854-4600 WORK/ (612) 920-7792 HOME 
55414 RICHARD KUBAT/ 1010 15TH AVE. SE - APT 204/ MINNEAPOLIS MN 55414/ (612) 379-1799 

55414 JEFF L. POMEROY/ 1321 6TH STREET S.E./ MINNEAPOLIS MN 55414/ (612) 331-5475 

55420 TOM WRIGHT/ D/B/A AERIAL SYSTEMS/ P.O. BOX 20330/ MINNEAPOLIS MN 55420/ (612) 944-3046 

55424 D. E. SAARELA/ 4508 W. 64TH ST./ MINNEAPOLIS MN 55424/ (612) 926-2561 

55424 LADONNA THOMPSON/ MTS SYSTEMS CORP./ BOX 24012/ MINNEAPOLIS MN 55424/ (612) 944-4022 

55426 PAUL MINKIN/ 3141 RHODE ISLAND AVE. S./ ST. LOUIS PARK MN 55426/ (612) 922-7366 

55427 DAVID PERLMAN/ 8309 NORTHWOOD PKWY./ MINNEAPOLIS MN 55427/ (612) 546-2627 

55427 RICHARD SCHROEDEL/ APT #318/ 2907 HILLSBORO AVE. N./ NEW HOPE MN 55427/ (612) 544-5466 

55435 GEORGE H. MUELLER/ HMR INC./ 7200 FRANCE AVE SO./ EDINA MN 55435/ (612) 831-7400 

55435 KENT SCHROEDER/ CONTROL DATA CORP./ 4550 WEST 77TH STREET/ EDINA MN 55435/ (612) 830-6487 

55435 RON THOMAS/ COMPUTER PRODUCTS CORP./ 7625 BUSH LAKE ROAD/ EDINA MN 55435/ (612) 835-7361 

55435 GREG STEELE/ NCR/ 4640 W. 77TH ST/ MINNEAPOLIS MN 55435/ (612) 831-5606 

55435 RICHARD A. STONE/ DATA 100 CORP./ 7725 WASHINGTON AVE. SO./ MINNEAPOLIS MN 55435/ (612) 932-8000 

55440 JON HANSON/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55440 GENE MARTINSON/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55440 JEREMY S. NICHOLS/ DIGITAL IMAGE SYSTEMS DIV./ HQM284/ CONTROL DATA CORP./ BOX 1249/ MINNEAPOLIS MN 55440/ (612) 374-4880 

55440 DOUG PIHL/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55440 BILL SIMMONS/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55440 RICHARD SPELLERBERG/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55440 JERRY STODDARD/ SYSTEM DEVELOPMENT/' DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55440 TOM URSIN/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 (WORK)/ (612) 784-1658 (HOME) 

55440 JAMES A. VELLENGA/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55440 JIM VERNON/ SYSTEM DEVELOPMENT/ DATA 100 CORP/ BOX 1222/ MINNEAPOLIS MN 55440/ (612) 932-8000 

55441 PAUL THOMPSON/ 2ND FLOOR - SOUTHGATE OFF. PLAZA/ CONTROL DATA CORP./ 5001 W 80TH ST./ BLOOMINGTON MN 55441/ (612) 830-6937 

55455 CHRIS BOYLAN/ UNIVERSITY COMPUTER CENTER/ 132 SPACE SCIENCE CENTER/ UNIV. OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 439-0707 

(612) 376-2895 
55455 STEVE BRUELL/ C. SCI. DEPT./ 136 LIND HALL/ UNIV. OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 373-3958 
55455 K. FRANKOWSKI/ COMPUTER SCIENCE DEPARTMENT/ 136 LIND HALL/ U OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 373-7591 

55455 RICK L. MARCUS/ UNIVERSITY COMPUTER CENTER/ 227 EXP ENGR/ UNIV OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 339-1638/ (612) 373-4181 
55455 MICHAEL ROBERT MEISSNER/ C.SCI. DEPT./ 136 LIND HALL/ U OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 373-6018 
55455 DAVE NAUMAN/ MANAGEMENT SCI. DEPT./ 761 B.A./ U OF MINNESOTA/ WEST BANK/ MINNEAPOLIS MN 55455 
55455 JOHN NAUMAN/ SSRFC/ 25 BLEGEN HALL/ U OF MINNESOTA/ WEST BANK/ MINNEAPOLIS MN 55455 
55455 STEVEN OYANAGI/ TATE LABORATORY OF PHYSICS/ ROOM 142/ UNIVERSITY OF MINNESOTA/ 116 CHURCH STREET S.E./ EAST BANK/ MINNEAPOLIS MN 55455 

(612) 771-6326 
55455 MICHAEL PRIETULA/ MGMT. SCIENCES DEPT./ 773 BA/ U OF MINNESOTA/ WEST BANK/ MINNEAPOLIS MN 55455/ (612) 373-7885 
55455 J. BEN ROSEN/ C.SCI DEPT./ 136 LIND HALL/ U OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 373-0133 
55455 TIM J. SALO/ UNIVERSITY COMPUTER CENTER/ LAUDERDALE/ U OF MINNESOTA/ MINNEAPOLIS MN 55455/ (612) 376-5607 
55455 G. MICHAEL SCHNEIDER/ C.SCI. DEPT./ 136 LIND HALL/ U OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 373-7582 
55455 C. J. WADDINGTON/ SCHOOL OF PHYSICS/ TATE LAB OF PHYSICS/ U OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612) 373-3847 
55455 KIET T. YEN/ 221 SANKORD HALL/ UNIVERSITY OF MINNESOTA/ MINNEAPOLIS MN 55455/ (612) 376-683/ 

55455 PETER H. ZECUMEISTEK/ UNIVERSITY COMPUTER CENTER/ 227 EXP. ENGR./ U OF MINNESOTA/ EAST BANK/ MINNEAPOLIS MN 55455/ (612 1 ) 373-4181 
55455 ATTN: SSRFC 1JBRARY/ SSRFC/ 25 BLEGEN HALL/ U OF MINNESOTA/ WEST BANK/ MINNEPOLIS MN 55455/ (612) 373-5599 



PASCAL NEWS #lb SEPTEMBER, 1979 P A G E 1 7 

55812 DAN BURROWS/ UMD COMPUTER CENTER/ 178 M.W.ALWORTH HALL/ U OF MINNESOTA - DULUTH/ DULUTH MN 55812/ (218) 726-7587 

55812 DAN M. LALIBERTE/ 2015 E 2ND STREET/ DULUTH MN 55812/ (218) 728-6177 

55812 DAVID K. TAYLOR/ COMPUTER CENTER/ 172 MWAH/ UNIV. OF MINNESOTA - DULUTH/ DULUTH MN 55812/ (218) 726-7587 

55901 ED JOHNSTON/ 715 6TH STREET S.E./ ROCHESTER MN 55901/ (507) 286-2635 WORK/ (507) 288-5383 HOME 

55901 DAVE MACHART/ 2412 S.W. 4TH STREET/ ROCHESTER MN 55901/ (507) 286-9147 

55901 WILLIAM SAMAYOA/ 1434 34ST NW/ ROCHESTER MN 55901/ (507) 282-9214 

55987 HUGH OUELLETTE/ 5072 W. 8TH ST./ WINONA MN 55987/ (507) 452-8732 

56464 KEITH BELLAIRS/ LAKE VALLEY DATA SYSTEMS/ R2 BOX 108/ MENAHGA MN 56464/ (218) 732-9677 

57701 BYRON G. EVERETT/ 622 E. TALLENT/ RAPID CITY SD 57701/ (605) 342-8797 

57709 MIKE HUGHES/ P.O. BOX 393/ RAPID CITY SD 57709/ (605) 348-1090 

58107 ATTN: P.S. INC./ BOX 2017/ FARGO ND 58107 

58501 JEFF HARLOW/ 1002 N. 4TH STREET - APT #2/ BISMARCK ND 58501 

59812 JOHN R. BARR/ CORP. SCI. DEPT./ UNIV. OF MONTANA/ MISSOULA MT 59812/ (406) 243-2883 

60004 R. D. STINAFF/ 324 W. BRAESIDE DR./ ARLINGTON HTS IL 60004/ (312) 394-4000 X663 

60016 MONTE JAY MELDMAN/ 555 WILSON LANE/ DES PLAINES IL 60016/ (312) 635-4123 

60016 MONTE J. MELDMAN/ 555 WILSON LANE/ DES PLAINES IL 60016/ (312) 635-4122 

60104 RICHARD VILMUR/ 418 FREDRICK AVE./ BELLWOOD IL 60104 

60137 EDWARD N. DEKKER III/ 22W 615 ELMWOOD DRIVE/ GLEN ELLYN IL 60137/ (312) 858-5302 

60164 REGIS B. SNYDER JR/ DEPT. 470/ TUBE A2/ GTE AUTOMATIC ELECTRIC LABS/ 400 NORTH WOLF ROAL) - BOX 2317/ NORTHLAKE IL 60164/ (312) 681-7100 X4327 

60164 PRAKASH THATTE/ GTE AUTOMATIC ELECTRIC LABS/ P.O. BOX 2317/ NORTHLAKE IL 60164/ (312) 681-7090 

60174 KEITH GARLAND/ ARTHUR ANDERSEN & CO./ 1405 N. FIFTH AV/ ST. CHARLES IL 60174 

60196 G. W. CAUGHRAN/ NUCLEAR DATA INC./ GOLF AND MEACHAM ROADS/ SCHAUMBERG IL 60196/ (312) 884-3600 

60196 DAVID R. HOPPE/ NUCLEAR DATA/ GOLF & MEACHAM RDS/ SCHAUMBURG IL 60196/ (312) 884-3654 

60201 RICHARD A. KARHUSE/ COMPUTER SCI. RESEARCH LAB./ TECH B626/ NORTHWESTERN UNIV./ 2145 SHERIDAN ROAD/ EVANSTON IL 60201/ (312) 492-5248 

60439 RICHARD D. GEORGE/ RAS 208/ ARGONNE NATIONAL LABORATORY/ 9700 S. CASS AVENUE/ ARGONNE IL 60439 

60540 EDWARD R. BYRNE/ 464 TICONDEROGA LANE/ NAPERV1LLE IL 60540 

60540 DAVID J. RYPKA/ 2B-401F/ BELL LABORTORIES/ NAPERVILLE IL 60540/ (312) 690-3766 

60542 JOHN R. JACKSON/ 834 SHAGBARK LANE //303/ NORTH AURORA IL 60542/ (312) 840-3522 

60601 MIKE COLLIGAN/ DEDICATED SYSTEMS INC./ 180 N. MICHIGAN AVE./ CHICAGO IL 60601/ (312) 372-4222 

60618 THOMAS P. HOVEKE/ 3223 W. BERTEAU AVE./ CHICAGO IL 60618/ (312) 661-8017 (WORK)/ (312) 539-8747 (HOME) 

60680 DAVID M. WEIBLE/ 203 GRANT HALL/ UNIVERSITY OF ILLINOIS AT CHICAGO CIR*/ BOX 4348/ CHICAGO IL 60680/ (312) 996-8836 

61008 FRANK D. DOUGHERTY/ BLACKHAWK BIT BURNERS CLUB/ 325 BEACON DRIVE/ BELVIDERE IL 61008/ (815) 544-5206 

61107 STANTON D. ERICSON/ 1816 COUNCIL CREST DR./ ROCKFORD IL 61107/ (815) 399-2943 

61625 MARIAN FROBISH/ COMPUTER CENTER/ BRADLEY UNIV./ PEORIA IL 61625/ (309) 676-7611 X468 

61701 DAVID C. BRAUGHT/ ILLINOIS WESLEYAN UNIVERSITY/ BLOOMINGTON IL 61701/ (309) 556-3146 

61742 LENN S. HUNT/ BOX 302/ GOODFIELD IL 61742/ (309) 965-2617 

61752 JACK KOCHER/ RR #1/ LEROY IL 61752/ (309) 962-6891 

61801 DICK NORTON/ 291 COORDINATED SCIENCE LAB/ UNIV. OF ILLINOIS/ URBANA IL 61801/ (217) 333-8252 

61832 SCOTT HERR/ 3819 N. VERMILION/ DANVILLE IL 61832/ (217) 446-2319 

62025 WALT PARRILL/ MID. ILLINOIS COMPUTER CO-OP/ COTTONWOOD ROAD/ EDWARDSVILLE IL 62025/ (618) 288-7268 

62563 J. R. WEISTART/ 513 E. MAIN STREET/ ROCHESTER IL 62563 

62906 JOE B. MONTGOMERY/ P.O. BOX 462/ ANNA IL 62906/ (618) 833-6013 

63045 LARRY MUSBACH/ WESTERN ELECTRIC/ 502 EARTH CITY PLAZA/ EARTH CITY MO 63045 

63045 CHARLES NEUMANN/ SOFTWARE ENGINEERING/ AUTOCONTROL INC./ 4284A RIVERLINE DRIVE/ EARTH CITY MO 63045/ (314) 291-8150 

63110 MICHAEL W. VANNIER/ MALLINCKRODT INSTITUTE/ 510 SOUTH KINGS HWY/ ST. LOUIS MO 63110/ (314) 454-2291 

63166 PETER R. ATHERTON/ DEPT. 112A/ 132 BLDG 2 - LEVEL 1/ MCDONNELL AIRCRAFT CO./ P.O. BOX 516/ ST. LOUIS MO 63166/ (314) 232-0232 

63188 SUE D. BURKLUND/ ATTN: DRXAL-TC/ ALMSA/ P.O. BOX 1578/ ST. LOUIS MO 63188/ (314) 268-5271 

63701 LARRY LOOS/ COMPUTER SCIENCE DEPT./ SOUTHEAST MISSOURI STATE UNIV./ CAPE GIRARDEAU MO 63701/ (314) 651-2244 

64108 ATTN: DOCUMENTATION CENTER/ UNITED COMPUTING SYSTEMS INC./ 2525 WASHINGTON/ KANSAS CITY MO 64108/ (816) 221-9700 

64468 GARY MCDONALD/ DIV. OF MATH / CS/ NORTHWEST MISSOURI STATE UNIV.7 MARYVILLE MO 64468/ (816) 582-7141 

65211 ATTN: ARJUN REDDY - LIBRARIAN/ HEALTH CARE TECHNOLOGY CENTER/ 137 CLARK HALL/ UNIV. OF MISSOURI/ COLUMBIA MO 65211 

65211 DAN SMITH/ CAMPUS COMPUTING CENTER/ 103 LEFEVRE HALL/ UNIV. OF MISSOURI-COLUMBIA/ COLUMBIA MO 65211/ (314) 882-7876 

65401 GERALD P. ALLDREDGE/ PHYSICS DEPARTMENT/ UNIV. OF MISSOURI - ROLLA/ ROLLA MO 65401/ (314) 341-4372 

66102 DAVID M. ALLEN/ 1317 CENTRAL AVE./ KANSAS CITY KS 66102/ (913) 371-6136 (WORK)/ (913) 381-5588 (HOME) 

66216 RUDOLF F. WROBEL/ 12725 W. 55TH TERRACE/ SHAWNEE KS 66216/ (913) 631-5131 

66506 WILLIAM J. HANKLEY/ DEPT. OF COMP. SCI./ KANSAS STATE UNIV./ MANHATTAN KS 66506/ (913) 532-6352 

66506 BRYAN D. HAROLD/ COMPUTING CENTER/ CARDWELL HALL/ KANSAS STATE UNIV./ MANHATTAN KS 66506/ (913) 532-5311 

66506 MIKE MILLER/ COMPUTING CENTER/ CARDWELL HALL/ KANSAS STATE UNIV./ MANHATTAN KS 66506/ (913) 532-6311 

67203 JEFF PALMER/ 2303 W. 1ST/ WICHITA KS 67203/ (316) 942-1988 

67226 DAN C. RICHARD/ M.S. 19/ NCR/ 3718 NORTH ROCK RD./ WICHITA KS 67226/ (316) 687-5228 (WORK)/ (316) 688-5074 (HOME) 

68005 KEN RITCHIE/ 1013 BLUFF ST./ BELLEVUE NE 68005/ (402) 291-7224 (HOME)/ (402) 291-5400 (WORK) 

68025 PAT SNYDER/ 1941 EAST 16TH ST./ FREMONT NE 68025 

68134 CURT HILL/ 7535 SHERMAN DR./ OMAHA NE 68134/ (402) 471-3701 BUS./ (402) 392-2138 HOME 

68503 S. RAY HUTTON/ 1714 N 31ST ST./ LINCOLN NE 68503/ (402) 466-0212 

68588 GEORGE NAGY/ DEPT. OF COMP. SCT./ 110 FERGUSON HALL/ U OF NEBRASKA/ LINCOLN NE 68588/ (402) 472-3200/ (402) 472-2402 

68701 ATTN: DIRECTOR OF COMPUTER SERVICES/ NORTHEAST TECHNICAL COMMUNITY COLLEGE/ 801 E. BENJAMIN/ NORFOLK NE 68701 

69341 GARY J. BOOS/ 2350 CHATEAU WAY/ GERING NE 69341/ (308) 436-4687 

70005 JOHN R. SOUVESTRE/ 211 ATHERTON DR./ METAIRIE LA 70005/ (504) 837-7882 

70118 ERVING S. PFAU/ COMPUTER LABORATORY/ TULANE UNIVERSITY/ 6823 ST. CHARLES AVE./ NEW ORLEANS LA 70118/ (504) 865-5631 

70808 JAN R. WILSON/ 3132 EUGENE ST./ BATON ROUGE LA 70808/ (504) 383-1371 

73190 MINEO YAMAKAWA/ PHYSIOLOGY AND BIOPHYSICS H. S. C./ UNIV. OF OKLAHOMA/ BOX 26901/ OKLAHOMA CITY OK 73190/ (405) 271-2226 

73505 FRANCIS B. HAJEK/ MATH DEPT./ CAMERON UNIVERSITY/ LAWTON OK 73505/ (405) 248-2200 X49 

74004 J. B. KLAHN/ APPLIED AUTOMATIC INC./ 206 RB2 PRC/ BARTLESVILLE OK 74004 

74102 KENNETH R. DRIESSEL/ AMOCO RESEARCH/ P.O. BOX 591/ TULSA OK 74102/ (418) 644-3551 

74128 NED N. MAYRATH/ 10909 E. 3RD. ST./ TULSA OK 74128/ (918) 437-6720 

74128 NED N. MAYRATH/ 10909 E. 3RD ST./ TULSA OK 74128/ (918) 437-6720 

74171 JACQUES LAFRANCE/' DEPT. OF MATHEMATICAL SCIENCE/ ORAL ROBERTS UNIV./ TULSA OK 74171/ (918) 492-6161 X2722 

74601 MIKE BURGHER/ CONTINENTAL OIL COMPANY/ 378C N PARK/ PONKA CITY OK 74601/ (405) 762-3456 X2752 

75006 RONALD DAWES/ 2211 GREEN VALLEY/ CARROLLTON TX 75006/ (214) 234-7653/ (214) 245-3200 

75006 TOM EKBERG/ MS 503/ MOSTEK/ 1215 WEST CROSBY ROAD/ CARROLLTON TX 75006 

75006 JOHN P. JENKINSON/ 2006 PETERS COLONY/ CARROLLTON TX 75006/ (214) 245-1206 

75075 GERALD PFEIFFER/ 3100 WINCHESTER/ PLANO TX 75075/ (214) 423-0597 

75075 LEO PUTCHINSKI/ 3313 REGENT DR./ PLANO TX 75075/ (214) 234-7685 

75080 MARVIN ELDER/ ELDER COMPUTING CORP./ 801 BUSINESS PARKWAY/ RICHARDSON TX 75080/ (214) 231-9142 

75080 ASHOK D. INGLE/ P.O. BOX 2902/ RICHARDSON TX 75080/ (214) 996-2273 

75080 D. W. MCCAMMISH/ 908 REDWOOD/ RICHARDSON TX 75080/ (214) 234-8432 

75223 WILLIAM LYNN/ BOX 11245/ DALLAS TX 75223 

75229 PHILLIP R. CALDWELL/ 3239 DOTHAM LANE/ DALLAS TX 75229 

75235 ATTN: LIBRARY/ HEALTH SCIENCE CENTER/ UNIV. OF TEXAS - DALLAS/ 5601 MEDICAL CTR. DR./ DALLAS TX 75235/ (214) 688-2383 

75235 ARNOLD H. MUECKE/ MCRC/ UNIV. OF TEXAS HEALTH SCIENCE CENTER/ 5323 HARRY HINES/ DALLAS TX 75235/ (214) 688-3936 

75240 ROB SPRAY/ ARTHUR A. COLLINS INC/ 13601 PRESTON RD/ DALLAS TX 75240/ (214) 661-2928 

75240 BRADLEY M. TATE/ DATA COMMUNICATIONS DIV./ HARRIS CORP./ P.O. BOX 400010/ DALLAS TX 75240/ (214) 386-2236 

75401 PAUL D. HELVICK/ 1910 LOOP 315 E. APT 248/ GREENVILLE TX 75401/ (214) 454-1226 

76101 P. L. HUTCHISON/ PLANT MZ 2811/ GENERAL DYNAMICS/ P.O. BOX 748/ FORT WORTH TX 76101/ (817) 732-4811 X3267 

77005 SCOTT K. WARREN/ ROSETTA ALGORITHMS/ 5925 KIRBY #215/ HOUSTON TX 77005/ (713) 528-8350 

77024 WILLIAM A. MITCHELL/ 365 N. POST OAK LANE/ HOUSTON TX 77024/ (213) 686-3383 

77025 JAYASHREE RAMANATHAN/ 3834 GRENNOCH LANE/ HOUSTON TX 77025/ (713) 749-3104 
77036 R. L. IRWIN/ SEISCOM/ BOX 36928/ HOUSTON TX 77036/ (713) 789-6020 

77036 PETE ZIEBELMAN/ MS 6404/ TEXAS INSTRUMENTS/ 8600 COMMERCE PARK DRIVE/ HOUSTON TX 77036/ (713) 776-6589 

77042 WESTON W. HASKELL/ 22 BRIAR HILL DRIVE/ HOUSTON TX 77042/ (713) 789-7678 

77043 ATTN: MICROPROCESSOR LABORATORIES INC./ 10690 SHADOW WOOD #110/ HOUSTON TX 77043/ (713) 465-7559 
77056 VERNON J. MALLU/ 5366 MCCULLOCH CIRCLE/ HOUSTON TX 77056/ (713) 840-7099 

77058 CHARLES W. MCKAY/ UNIV. OF HOUSTON - CLEAR LAKE CITY/ 2700 BAY AREA BLVD - PO BOX 446/ HOUSTON TX 77058/ (713) 488-9386 

77072 THOMAS BARBARA/ 6512 S. BRIAR BAYOU DR./ HOUSTON TX 77072/ (713) 933-9701 

77074 GARY L. BECHTOLD/ DATA 100 CORP./ 6776 SW FREEWAY #400/ HOUSTON TX 77074/ (713) 977-8833 

77092 PAUL L. KELLY/ THE ANALYSTS / SCHLUMBERGER/ 4120 D DIRECTOR'S ROW/ HOUSTON TX 77092/ (713) 686-5516 

77092 STANLEY M. SUTTON/ RESOURCE DEVELOPMENT & ENGINEERING/ INTER COMP/ 1201 DAIRY ASHFORD RD./ HOUSTON TX 77092/ (713) 497-8400 WORK 

77546 ATTN: INTERMETRICS INC./ 4815 FM 2351 - SUITE 103/ FRIENDSWOOD TX 77546/ (713) 482-4411 

77843 STANLEY M. SWANSON/ DEPT OF BIOCHEMISTRY/ TEXAS A&M UNIV./ COLLEGE STA. TX 77843/ (713) 845-1744 

78209 FRANCIS A. BROGEN/ 115 RIDGEHAVEN/ SAN ANTONIO TX 78209/ (512) 822-0230 

78220 GORDON B. ALLEY/ DIGITAL SYSTEMS/ AUTOMATIC CONTROL ELECTRONICS CO./ P.O. BOX 20264/ SAN ANTONIO TX 78220/ (512) 661-4111 

78291 DELL ANTONIA/ HARTE-HAWKS COMMUNICATIONS INC./ P.O. BOX 269/ SAN ANTONIO TX 78291 

78704 ROBERT L. BYRNE III/ 1114 E. OLTORF #207/ AUSTIN TX 78704/ (512) 471-3032 

78704 FRANK DUNN/ 3622 MANCHACA APT 222/ AUSTIN TX 78704/ (214) 231-3423 

78704 JAY TROW/ 2200 DE VERNE/ AUSTIN TX 78704/ (512) 444-5045 

78712 STEPHEN P. HUFNAGEL/ APPLIED RESEARCH LAB/ ACOUSTICAL MEASUREMENTS DIV./ UNIV. OF TEXAS/ P.O. BOX 8029/ AUSTIN TX 78712/ (512) 836-1351 

78712 L. KIRK WEBB/ ASTRONOMY DEPT./ UNIV. OF TEXAS - AUSTIN/ AUSTIN TX 78712 

78731 S. VAN ERP/ TCC CORP./ 3429 EXECUTIVE CENTER DR./ AUSTIN TX 78731/ (512) 345-5700 

78746 ROBERT PIERCE/ 3806B ISLAND WAY/ AUSTIN TX 78746/ (512) 327-3313 

78751 THORNTON KEEL/ 917 E. 40TH STREET/ AUSTIN TX 78751/ (512) 452-8746 

78753 JOHN ENGLAND/ 11606 OAK TRAIL/ AUSTIN TX 78753/ (512) 471-5854 WORK/ (512) 836-0375 HOME 

78766 BOB ORR/ BOX 9948/ AUSTIN TX 78766/ (512) 454-4797 X426 

79409 JOHN JENSEN/ DEPT. OF MATHEMATICS/ TEXAS TECH UNIVERSITY/ LUBBOCK TX 79409/ (806) 742-2571 

79604 JOHN L. WEAVER/ HERALD OF TRUTH/ BUSINESS DEPT./ CHURCH OF CHRIST/ P.O. BOX 2439/ ABILENE TX 79604/ (915) 698-4370 

80004 CHARLES P. HOWERTON/ 6740 YOUNGFIELD COURT/ ARVADA CO 80004/ (303) 422-6197 

80004 J. RICHARD PEARSON/ 5910 FLOWER ST./ ARVADA CO 80004 

80020 JIM TURLEY/ 2315 RIDGE CIRCLE/ BROOMFIELD CO 80020/ (303) 469-4778/ (303) 571-6742 

80027 PAULA BARRETT/ STORAGE TECHNOLOGY CORP./ 2270 S. 88TH STREET/ LOUISVILLE CO 80027/ (303) 497-7443 

80123 H. JAMES SCHNELKER/ 7932 S. LAMAR COURT/ LITTLETON CO 80123/ (303) 979-8284 

8 0202 ATTN: COMPUTING CENTER / 221/ UNIVERSITY OF COLORADO - DENVER / 1100 14TH ST./ DENV ER CO 80202/ (303) 629-2583 



PASCAL NEWS #15 SEPTEMBER, 1979 PAGE18 

80202 DAVID HORNBAKER/ 1020 15TH ST. #10K/ DENVER CO 80202/ (303) 573-6717/ (303) 629-2678 

80221 DENNIS SIMMS/ REGIS HIGH SCHOOL/ 3539 W 50TH STREET/ DENVER CO 80221/ (303) 433-8471 

80222 ARTHUR W. GOTTMAN/ BIOMEDICAL & HOSPITAL SYSTEMS LTD./ 2137 S. BIRCH/ DENVER CO 80222/ (303) 758-0517 

80222 R. KENT LEONARD/ 3071 S. RESTER WAV/ DENVER CO 80222/ (303) 499-1000 X6811/X6388 (DAY)/ (303) 629-2895 OR 756-4229 (NITE) 

80230 ANNE MONTGOMERY/ P.O. BOX 30204/ LOWRY AFB CO 80230/ (303) 394-2904 

80302 ATTN: PASCAL DISTRIBUTION/ COMPUTING CENTER LIBRARY/ UNIVERSITY OF COLORADO/ 3645 MARINE STREET/ BOULDER CO 80302/ (303) 492-8131 

80302 DONALD HALFORD/ 1492 COLUMBINE AVE./ BOULDER CO 80302 

80302 JAY SCHUMACHER/ 1322 ARAPAHOE/ BOULDER CO 80302 

80302 TERRY L. SPEAR/ 419 22ND STREET/ BOULDER CO 80302/ (303) 442-3273 

80302 PHILIP R. ZIMMERMAN JR./ 1842 CANYON BLVD. #105/ BOULDER CO 80302/ (303) 447-8591 

80303 ATTN: NATIONAL CENTER FOR ATMOSPHERIC*/ P.O. BOX 3000/ BOULDER CO 80303 
80303 PAUL H. HALENDA/ 4917 THUNDERBIRD DR. #33/ BOULDER CO 80303/ (303) 499-1468 

80307 BRUCE K. RAY/ POLYMORPHIC COMPUTER SYSTEMS/ P.O. BOX 3581/ BOULDER CO 80307/ (303) 530-2210 

80401 L. S. HENSHAW/ 2003 BEECH COURT/ GOLDEN CO 80401/ (303) 238-9804 

81212 PAUL LEBRETON/ PSITRONICS GROUP SYSTEMS LAB/ 502 ALLISON AVENUE/ CANON CITY CO 81212 

81501 BURT E. HARTMANN/ HARTMANN ENGINEERING INC./ P.O. BOX 1238/ GRAND JUNCTION CO 81501/ (303) 243-0776 

82071 HENRY R. BAUER III/ COMPUTER SCIENCE DEPT./ UNIVERSITY OF WYOMING/ BOX 3682/ LARAMIE WY 82071/ (307) 766-5134 

83401 B. H. ANDERSON/ E.G. & G. IDAHO INC./ P.O. BOX 1625/ IDAHO FALLS ID 83401/ (208) 526-1183 

83705 LAURENCE R. LANGDON/ 2710 AUGUSTA ST./ BOISE ID 83705 

83814 JACK STEVE/ NORTH IDAHO COLLEGE/ 1000 WEST GARDEN AVE./ COEUR D'ALENE ID 83814/ (208) 667-7422 

84102 DAVID L. IRVINE/ MICROPOINT CORP./ 363 SOUTH 5TH EAST/ SALT LAKE CITY UT 84102/ (801) 322-4065 

84112 RICHARD C. BRANDT/ PHYSICS DEPT/ UNIV. OF UTAH/ SALT LAKE CITY UT 84112/ (801) 581-6076 

84115 MARK MICHELSON/ BECTON DICKINSON IMMUNOD'lAGNOSTICS/ 180 WEST 2950 SOUTH/ SALT LAKE CITY UT 84115/ (801) 487-8773 

84116 RICHARD G. LYMAN/ MS U7-2/ SPERRY UNIVAC/ 322 NORTH 2200 WEST/ SALT LAKE CITY UT 84116/ (801) 539-5192 

84147 DON B. HALES/ RESEARCH CENTER/ KENNECOTT COPPER CORP./ P.O. BOX 11299/ SALT LAKE CITY UT 84147/ (801) 322-1533 

84601 FARREL OSTLER/ 987 E. 2620 N./ PROVO UT 84601/ (801) 375-3668 

85012 DENNIS K. BOSWELL/ IBM CORP./ 4502 N. CENTRAL AVE./ PHOENIX AZ 85012/ (602) 263-2005 

85019 C. R. CORLES/ PMSD-P/ MD 530/ HONEYWELL/ 2222 W. PEORIA AVE./ PHOENIX AZ 85019/ (602) 997-3000 

85019 R. H. DOUGLAS/ PMSD-P/ MD 530/ HONEYWELL/ 2222 W. PEORIA AVE./ PHOENIX AZ 85019/ (602) 997-3000 

85019 R. A. HENZEL/ PMSD-P/ MD 530/ HONEYWELL/ 2222 W. PEORIA AVE./ PHOENIX AZ 85019/ (602) 997-3000 

85019 J. C. HUNTINGTON/ PMSD-P/ MD 530/ HONEYWELL/ 2222 W. PEORIA AVE/ PHOENIX AZ 85019/ (602) 997-3000 

85019 D. P. METZGER/ PMSD-P/ MD 530/ HONEYWELL/ 2222 W. PEORIA AVE/ PHOENIX AZ 85019/ (602) 997-3000 

85019 T. L. PHINNEY/ PMSD-P/ MD 530/ HONEYWELL/ 2222 W. PEORIA AVE/ PHOENIX AZ 85019/ (602) 997-3000 

85019 E. H. RACHLIN/ PMSD-P/ MD 530/ HONEYWELL/ 222 W. PEORIA AVE/ PHOENIX AZ 85019/ (602) 997-3000 

85019 W. VAUGHN/ PMSD-P/ MD 530/ HONEYWELL/ 2222 W. PEORIA AVE/ PHOENIX' AZ 85019/ (602) 997-3000 

85021 DAVID R. WALLACE/ GTE AUTOMATIC ELECTRIC LABS/ 11226 N. 23RD. AVE./ PHOENIX AZ 85021/ (602) 995-6930 

85028 AUTHOR R. JETER/ 3946 EAST ALTADENA/ PHOENIX AZ 85028/ (602) 996-6921 

85201 DENNIS GRAY/ 1543 N. SPRUCE CIRCLE/ MESA AZ 85201/ (602) 833-8830 

85202 DOUGLAS W. HAWKINS/ MOTOROLA MICROSYSTEMS/ 2200 W. BROADWAY (M3I8)/ MESA AZ 85202/ (602) 962-5256 

85253 LARRY DI LULLO/ DI LULLO CONSTRUCTION COMPANY/ 8724 NORTH 67TH STREET/ PARADISE VLY AZ 85253/ (602) 991-4556 

85254 IAN LEMAIR/ 5030 E. POINSETTIA/ SCOTTSDALE AZ 85254/ (602) 996-5458 
85257 JAMES HENDRICKSON/ 7301 E. PIERCE ST./ SCOTTSDALE AZ 85257 

85281 JAMES E. HOLBROOK/ ITT COURIER TERMINAL SYSTEMS/ 1515 WEST 14TH STREET/ TEMPE AZ 85281/ (602) 275-7555 

85704 DON M. WRATHALL/ 6945 N. VISTA PLACE/ TUCSON AZ 85704/ (602) 538-3582 

85715 G. A. KORN/ 6801 OPATAS STREET/ TUCSON AZ 85715/ (602) 298-7054 

87002 TOM SANDERSON/ RURAL ROUTE 1 / BOX 459/ BELEN NM 87002 

87106 DENNIS S. DUNCAN/ 2948 SANTA CRUZ SE/ ALBUQUERQUE NM 87106/ (505) 266-0126/ (505) 277-5536 

87108 ATTN: LOVELACE CENTER FOR THE HEALTH */ 5200-5400 GIBSON BLVD SE/ ALBUQUERQUE NM 87108 

87112 DAVID T. SCOTT/ SCOTT SYSTEMS/ 10701 LOMAS N.E. SUITE 114/ ALBUQUERQUE NM 87112/ (505) 293-2757 

87115 BRUCE LINK/ DIVISION 1716/ SANDIA LABORATORIES/ ALBUQUERQUE NM 87115/ (505) 264-1281 

87185 B. C. CASKEY/ DIVISION 4716/ SANDIA LABORATORIES/ ALBUQUERQUE NM 87185 

87185 RONDALL E. JONES/ DIVISION 2642/ SANDIA LABORATORIES/ P.O. BOX 5800/ ALBUQUERQUE NM 87185/ (505) 264-7462 

87544 ALBERT F. MCGIRT/ 115 GLENVIEW DR./ LOS ALAMOS NM 87544/ (505) 667-7750 

87545 SUE JOHNSON/ MS-540 Q-l/ LOS ALAMOS SCIENTIFIC LAB/ LOS ALAMOS NM 87545/ (505) 667-6515 
87701 KIM A. KIRKPATRICK/ P.O. BOX 2790/ LAS VEGAS NM 87701 

90010 SANDRA DIRKS/ PAWLUK ADVERTISING INC./ 3660 WILSHIRE BLVD./ LOS ANGELES CA 90010/ (213) 386-1164 

90023 GEORGE A. MARTINEZ JR./ 654 1/2 S. SOTO ST./ LOS ANGELES CA 90023/ (213) 262-9827 

90024 BRADLEY N. YEARWOOD/ TRANSACTION TECHNOLOGY INC./ 10880 WILSHIRE BLVD./ LOS ANGELES CA' 90024/ (213) 879-1212 

90025 CALVIN W. JACKSON/ ABACUS PROGRAMMING CORP./ 12301 WILSHIRE BLVD/ LOS ANGELES CA 90025/ (213) 820-6955 

90036 PENNY CRANE/ INSTRUCTIONAL SUPPORT GROUP/ CALIFORNIA STATE UNIVERSITY/ 5670 WILSHIRE BOULEVARD/ LOS ANGELES CA 90036/ (213) 852-5789 
90045 ATTN: K. MICHAEL - LIBRARIAN/ LOS ANGELES SCIENTIFIC CENTER/ IBM/ 9045 LINCOLN BLVD./ LOS ANGELES CA 90045/ (213) 670-8350 

90045 DAVID P. MARTIN/ 9619 BELFORD AVE. #3/ LOS ANGELES CA 90045 

90046 KEN SIBERZ/ 1720 N. VISTA STREET/ HOLLYWOOD CA 90046/ (213) 874-7224 

90049 JOHN BELEW/ JOHN BELEW ASSOCIATES/ 11621 CHENAULT/ LOS ANGELES CA 90049/ (213) 476-4078 
90049 PAUL R. EGGERT/ 1151 AMHERST AV #1/ LOS ANGELES CA 90049/ (213) 826-5397 

90065 LYNN BLICKENSTAFF/ SELF-REALIZATION FELLOWSHIP/ 3880 SAN RAFAEL AVE./ LOS ANGELES CA 90065/ (213) 225-2471 

90066 EDWARD W. BOLTON/ 4253 MOORE STREET/ LOS ANGELES CA 90066/ (213) 391-9998 

90067 MICHAEL HADJIOANNOLL/ SUITE 862/ TICOM SYSTEMS INC./ 10100 SANTA MONICA BLVD./ LOS ANGELES CA 90067/ (213) 552-5328 

90068 MOSHA CORNFELD/ 6712 HILLPARK DRIVE - #408/ LOS ANGELES CA 90068/ (213) 876-6270 
90230 NORM WHEELER/ 11175 WOOLFORD STREET/ CULVER CITY CA 90230 

90245 BOB ROOSTH/ TEXAS INSTRUMENTS/ 831 SOUTH DOUGLAS/ EL SEGUNDO CA 90245/ (213) 973-2571 

90266 GENE DREHER/ 128-16TH PLACE/ MANHATTAN BCH CA 90266/ (213) 648-2345 

90266 CAROLYN A. ROSENBERG/ FORTH INC./ 815 MANHATTAN AVE./ MANHATTAN BCH CA 90266/ (213) 372-8493 

90272 ALEX J. BASKIN/ 18008 SANDY CAPE DR./ PACIFIC PALSDS CA 90272/ (213) 454-4960 

90274 DAVID J. GRIEP/ 2204 CHELSEA RD/ PALOS VERDES E CA 90274/ (213) 648-7246 

90274 LOUIS BARNETT/ 28203 RIDGEFERN CT./ RANCHO PALOS V CA 90274 

90274 JOSEPH A. O'BRIEN/ 29319 .GOLDEN MEADOW DRIVE/ RANCHO PALOS V CA 90274/ (213) 377-8657 

InVlt T^Tnuiv/ E fa\ S { ?If MCFARLAND CORPORATION/ 609 DEEP VALLEY DRIVE/ ROLL. H. ESTATES CA 90274/ (213) 377-0491 

90278 TIM LOWERY/ 1926 GATES AVE #2/ REDONDO BEACH CA 90278 

90291 PATRICK D. GARVEY/ D 3047/ 7742 REDLANDS ST/ PLAYA DEL REY CA 90291/ (213) 821-5663 

90291 BARRY A. COLE/ 540 RIALTO AVE./ VENICE CA 90291/ (213) 396-9376 

ssjs itt. luSsn^ziT^f^^ici iriot%7inirin-n% m ° cA 9o302/ <2i3) 678 - 3222 (work,/ <213) 7 "-" 46 ( ™ B) 

90403 CARROLL R. LINDHOLM/ P.O. BOX 3007/ SANTA MONICA CA 90403 

90404 LLOYD RICE/ COMPUTALKER CONSULTANTS/ 1730 21ST STREET/ SANTA MONICA CA 90404/ (213) 392-5230 
90503 JACK MCDONNELL/ COMPUTER COMMUNICATIONS INC/ 2610 COLUMBIA ST./ TORRANCE CA 90503/ (213) 320-9101 
90604 LEE L. C. SORENSEN/ 10226 VICTORIA AVE/ WHITTIER CA 90604/ (213) 941-3609 

90631 THEODORE C. BERGSTROM/ CHEVRON OIL FIELD RESEARCH CO./ BOX 446/ LA HABRA CA 90631/ (213) 694-7301 
90731 WILLIAM C. COX/ 552C OLD DOCK ST./ TERMINAL IS. CA 90731/ (213) 547-4772 

90746 D. M. WILBORN/ PACIFIC DATASYSTEMS/ 1007 E. DOMINGUEZ ST. SUITE F/ CARSON CA 90746/ (213) 538-3982 
90801 RAY WEISS/ COMPUTER CAREERS INC./ P.O. BOX 2531/ LONG BEACH CA 90801/ (213) 435-5651 

J ' I' NIEBLA/ INFOTEC DEVELOPMENT INC./ 5855 NAPLES PLAZA - SUITE 210/ LONG BEACH CA 90803/ (213) 433-5224 
90813 M. F. DOORE/ 1015 E 10TH ST./ LONG BEACH CA 90813 

91011 GARRETT PAINE/ P.O. BOX 895/ LA CANADA CA 91011/ (213) 354-4047 (WORK)/ (213) 790-3390 (HOME) 
91103 JULIAN GOMEZ/ 125-241/ JET PROPULSION LABORATORY/ 4800 OAK GROVE DRIVE/ PASADENA CA 91103/ (213) 354-2112 
91103 E. N. MIYA/ MS 125-241/ JET PROPULSION LAB./ 4800 OAK GROVE DRIVE/ PASADENA CA 91103/ (213) 354-3251 
91103 SAMUEL M. REYNOLDS/ 238 / 601/ 4800 OAK GROVE/ PASADENA CA 91103/ (213) 354-5311 
91107 ATTN: MICROSYSTEMS INC./ 2500 E. FOOTHILL BLVD. SUITE 102/ PASADENA CA 91107/ (213) 577-1471 
91107 G. DENNIS BARNES/ BLDG 100 / M.S. 241/ XEROX/ 300 N. HALSTEAD/ PASADENA CA 91107/ (213) 351-2351 
91107 BARRY SMITH/ 3343 FAIRPOINT ST./ PASADENA CA 91107/ (213) 798-7246 

91107 TOM WOLFE/ 2330 E. DEL MAR BLVD. APT #213/ PASADENA CA 91107/ (213) 354-6662 (WORK)/ (213) 793-4046 (HOME) 
91125 LARRY SEILER/ 256-80/ CALIFORNIA INST. OF TECHNOLOGY/ PASADENA CA 91125/ (213) 795-6811 X1879 
91301 BRUCE D. WALSH/ 5904 LAKE LINDERO DRIVE/ AGOURA CA 91301/ (213) 889-0529 

91303 ARI OLIVEIRA/ SYSTEMS COMPUTING INT'L/ 6919 ETON AVE./ CANOGA PARK CA 91303/ (213) 884-6655 

91303 GARY A. RICHARDSON/ BLDG 21 MS 6/ LITTON AERO PRODUCTS/ 6700 ETON AVENUE/ CANOGA PARK CA 91303/ (213) 887-2596 

91311 TOM SANDERSON/ MICROSYSTEMS DIVISION/ MAIL STOP 63-02/ PERTEC COMPUTER CORP./ 20630 NORDHOFF/ CHATSWORTH CA 91311/ (213) 998-1800 X256 
91320 ATTN: TECHNICAL INFORMATION CENTER/ VENTURA DIVISION/ NORTHRUP CORP./ 1515 RANCHO CONEJO BLVD./ NEWBURY PARK CA 91320/ (805) 498-3131 X1050 
91320 C. HENNICK/ 127 DEVIA DR./ NEWBURY PARK CA 91320 

91320 MARTIN LIPELES/ AUTOLOGIC INC./ 1050 RANCHO CONEJO BLVD./ NEWBURY PARK CA 91320/ (805) 498-9611 X173 
91326 CHARLES RIDER/ 19100 KILLOCH WAY/ NORTHRIDGE CA 91326/ (213) 360-3254 
91330 ALOIS GLANC/ DEPT. OF COMP. SCI./ CALIFORNIA STATE UNIV./ NORTHRIDGE CA 91330 
91342 CHARLES A. WOLFE/ 13376 DRONFIELD AVE./ SYLMAR CA 91342/ (213) 367-6798 
91364 JOHN SPIKER/ 5515 PENFIELD - #125/ WOODLAND HILLS CA 91364/ (213) 346-9108 
91367 GENE MURROW/ SUITE E/ 6300 VARIEL AVE/ WOODLAND HILLS CA 91367/ (213) 992-4425 
91405 L. F. MELLINGER/ 13622 HART ST./ VAN NUYS CA 91405/(213) 354-2505 
91602 FRED WILSON/ 10519 VALLEY SPRING LANE/ N. HOLLYWOOD CA 91602/ (213) 762-2808 
91604 STEVEN J. GREENFIELD/ 4311 COLFAX AVE #226/ STUDIO CITY CA 91604/ (213)' 762-6560 
91724 RICHARD DIEVENDORFF/ 1040 DARFIELD AVENUE/ CORVINA CA 91724 

91761 ROBERT L. RHODES/ DEPT 1-373/ LOCKHEED AIRCRAFT SERVICE CO./ P.O. BOX 33/ ONTARIO CA 91761 
91775 WILLIAM Y. FUJIMOTO/ SUNNY SOUNDS/ 927-B E. LAS TUNAS DR./ SAN GABRIEL CA 91775/ (213) 287-1811 
91792 DAN L. EISNER/ 2801 E. VALLEY VIEW/ WEST COVINA CA 91792/ (213) 965-8865 
92021 V. L. MOBERG/ 1127 FLAMINGO AVE/ EL CAJON CA 92021/ (714) 444-5910 
92024 ROGER A. COLLINS/ 1653 OLMEDA ST./ ENCINITAS CA 92024/ (714) 437-5586 
92037 W. H. AKESON/ 7425 CAMINITO RIALTO/ LA JOLLA CA 92037/ (715) 294-5944 

92037 BORDEN COVEL 11/ CONTROL DATA CORP./ 4455 EASTGATE MALL/ LA JOLLA CA 92037/ (714) 542-6312 
92037 K. J. HARRIS/ BOX 4455/ LA JOLLA CA 92037/ (714) 452-9252 

92037 DENNIS NICKOLAI/ CONTROL DATA CORPORATION/ 4455 EASTGATE MALL/ LA JOLLA CA 92037/ (714) 452-6000 
92041 KENNETH C. BONINE/ 7985 ANDERS CIRCLE/ LA MESA CA 92041/ (714) 277-8900 X2589 

92067 LANCE A. LEVENTHAL/ EMULATIVE SYSTEMS CO./ P.O. BOX 1258/ RANCHO SANTAFE CA 92067/ (714) 452-0101 
92093 J. A. LEVIN/ COMMUNICATIONS DEPT./ D-003/ UNIV. OF CALIFORNIA - SAN DIEGO/ LA JOLLA CA 92093/ (714) 452-4410 



PASCAL HEWS #15 SEPTEMBER. 1979 PAGE 19 

92093 TERRENCE C. MILLER/ C-014 A.P.I.S. DEFT./ UNIV. OF CALIF - SAN DIEGO/ LA JOLLA CA yzuyj/ (714) 452-3889 

92106 KENNETH 0. LELAND/ 3922 LIGGETT DRIVE/ SAN DIEGO CA 92106/ (714) 225-2176 

92110 DWIGHT R. BEAN/ ACADEMIC COMPUTING COORDINATOR/ UNIV. OF SAN DIEGO/ SAN DIEGO CA 92110/ (714) 291-6480 X4417 OR X4201 

92110 ROBERT CALDWELL/ ENVIRONMENTAL MANAGEMENT SYSTEMS/ 3045 ROSECRANS STREET SUITE 112/ SAN DIEGO CA 92110/ (714) 223-5551 

92110 G. G. GUSTAFSON/ COMPUTER SCIENCES CORP./ 2251 SAN DIEGO AVE./ SAN DIEGO CA 92110 

92111 GUY KELLY/ CUBIC WESTERN DATA/ 5650 KEARNEY MESA ROAD/ SAN DIEGO CA 92111 
92117 STEVE HARRISON/ 5161 COLE ST./ SAN DIEGO CA 92117/ (714) 273-5242 

92122 DAVID KUHLMAN/ 6885 ROBBINS CT./ SAN DIEGO CA 92122/ (714) 453-3436 

92123 CARL F. NIELSEN/ ALEXANDER ENGINEERING CO./ 9161 CHESAPEAKE DR./ SAN DIEGO CA 92123/ (714) 292-7418 

92127 F. TEMPEREAU/ BURROUGHS CORP./ 16701 W. BERNARDO DR./ SAN DIEGO CA 92127 

92128 NEAL A. HENDERSON/ 12561 CRESTA PLACE/ SAN DIEGO CA 92128/ (715) 487-6309 

92521 ATTN: DEPT. OF MATHEMATICS/ UNIVERSITY OF CALIFORNIA - RIVERSIDE/ RIVERSIDE CA 92521 

92625 PAUL MICHAEL REA/ 701-1/2 BEGONIA/ CORONA DEL MAR CA 92625/ (714) 675-1977 

92626 H. W. MOORE/ 3150 LIMERICK LANE/ COSTA MESA CA 92626/ (714) 545-3018 

92626 WILLIAM H. SEAVER/ GLOBAL COMPUTER SYSTEMS/ 3176 PULLMAN STREET #104/ COSTA MESA CA 92626/ (714) 754-0292 

92627 SHAWN M. FANNING/ 2650 HARLA AVE #121/ COSTA MESA CA 92627/ (714) 545-5148 

92634 THOMAS M. NEAL/ BECKMAN INSTRUMENTS/ 2500 N. HARBOR BLVD./ FULLERTON CA 92634/ (714) 871-4848 X 3259 

92634 VINCENT VIGUS/ FULLERTON COLLEGE/ 321 EAST CHAPMAN AVE./ FULLERTON CA 92634/ (714) 871-8000 

92663 DALE BROWN/ 164 CENTRAL SERVICES/ FORD AEROSPACE/ FORD ROAD/ NEWPORT BEACH CA 92663/ (714) 759-5030 

92663 JOE DEVITA/ WESTERN DIGITAL CORP./ P.O. BOX 2180/ NEWPORT BEACH CA 92663/ (714) 557-3550 

92663 BOB HUTCHINS/ WESTERN DIGITAL CORP./ P.O. BOX 2180/ NEWPORT BEACH CA 92663/ (714) 557-3550 X335 

92663 LARRY A. LOTITO/ WESTERN DIGITAL CORPORATION/ P.O. BOX 2180/ NEWPORT BEACH CA 92663/ (714) 557-3550 

92667 W. S. DORSEY/ BOX 5118/ ORANGE CA 92667 

92677 JIM GILBERT/ SYSTEMS STRUCTURING TECHNOLOGY/ 30436 NORTH HAMPTON RD./ LAGUNA NIGUEL CA 92677/ (714) 640-5222 WORK/ (714) 495-6039 HOME 

92680 DAVID S. BAKIN/ MD #151/ BASIC FOUR CORP./ 14101 MYFORD ROAD/ TUSTIN CA 92680/ (714) 731-5100 

92680 GEORGE HOMER/ 13271 NIXON CIRCLE/ TUSTIN CA 92680 

92683 MIKE CANADAY/ 15271 QUEENSBOROUGH ST./ WESTMINSTER CA 92683/ (714) 839-4122 

92686 FRANK BURGER/ 6750 CHAMPAGNE CIRCLE/ YORBA LINDA CA 92686/ (714) 970-0143 

92686 HARRY N. CAMPBELL/ 5721 PLACERVILLE PLACE/ YORBA LINDA CA 92686/ (714) 970-7315 

92691 JOHN FRENCH/ 26712 VALPARISO DRIVE/ MISSION VIEJO CA 92691/ (714) 768-3411 

92705 C. V. GAYLORD/ GARRETT COMPUTER ASSOCIATES/ 18702 ERVIN LANE/ SANTA ANA CA 92705/ (714) 557-1037 

92707 JAMES F. SULLIVAN/ 1330 S. ROSEWOOD/ SANTA ANA CA 92707 

92708 W. BRYAN HENNIHGTON/ 9770 LA ZAPATILLA CIR./ FOUNTAIN VLY CA 92708/ (714) 963-2368 (HOME)/ (714) 632-4079 
92713 GREGORY L. HOPWOOD/ MINICOMPUTER OPERATIONS/ SPERRY UNIVAC/ P.O. BOX C-19504/ IRVINE CA 92713/ (714) 833-2400 
92713 OSCAR RTOS/ DEPT. 11-0775/ COMPUTER AUTOMATION/ 18651 VON KARMAN/ IRVINE CA 92713/ (714) 833-8830 X295 

92713 MARIUS TROOST/ MINICOMPUTER OPERATIONS/ SPERRY UNIVAC/ P.O. BOX C-19504/ IRVINE CA 92713/ (714) 833-2400 X113 

92714 LON ATKINS/ 17112 ARMSTRONG AVE./ IRVINE CA 92714/ (714) 540-8340 X543 
92714 JIM KHALAF/ 17112 ARMSTRONG AVE/ IRVINE CA 92714/ (714) 540-8340 
92714 RICK RAGER/ 17112 ARMSTRONG AVE./ IRVINE CA 92714/ (714) 540-8340 

92714 MARIE WALTER/ SCIENTIFIC-TECHNICAL BOOK CENTER/ 17801 MAIN ST./ IRVINE CA 92714/ (714) 557-8324 

92715 PAUL HOLBROOK/ 103B CAMINO - MESA COURT/UCI/ IRVINE CA 92715/ (714) 752-2172 

92805 JAMES YORK/ GENERAL AUTOMATION/ 1055 SOUTH EAST STREET/ ANAHEIM CA 92805/ (714) 778-4800 X443 

92806 DON LEWIS/ 2880 E. HEMPSTEAD RD./ ANAHEIM CA 92806 

92807 WILLIAM F. PHILLIPS/ 482 S. PASEO SERENA/ ANAHEIM CA 92807/ (714) 998-7496 

93017 ATTENTION: DAN LAPORTE/ M.S. 72/ SANTA BARBARA RESEARCH CENTER/ 75 COROMAR DRIVE/ GOLETA CA 93017/ (805) 968-3511 

93017 THOMAS M. BURGER/ BURROUGHS CORP./ 6300 HOLLISTER AVE./ GOLETA CA 93017/ (805) 964-6881 X456 

93017 RON JEFFRIES/ 651 ARDMORE/ GOLETA CA 93017/ (805) 964-8964 

93017 STEVE LASSMAN/ IMAGE PROCESSING SOFTWARE/ 5773 DAWSON/ GOLETA CA 93017/ (805) 964-4741 

93017 RAY L. ANDERSON/ CONCEPT SYSTEMS/ 6885 TRIGO RD./ ISLA VISTA CA 93017/ (805) 968-6995 

93021 P. L. SHIMER-ROWE/ 218 HARRY STREET/ MOORPARK CA 93021 

93106 ATTN: USER SERVICES GROUP/ COMPUTER CENTER/ UNIV OF CALIF - SANTA BARBARA/ SANTA BARBARA CA 93106 

93111 JIM WINSALLER/ P.O. BOX 6679/ SANTA BARBARA CA 93111/ (805) 685-1626 

93277 K. B. HOWARD/ DEPT. OF COMP. SCI./ COLLEGE OF THE SEQUOIAS/ VISALIA CA 93277 

93407 R. H. DOURSON/ C.S.C. & STAT. DEPT./ CAL POLY STATE UNIV./ SAN LUIS OBIS* CA 93407/ (805) 546-1255 

93407 NEIL W. WEBRE/ DEPT. OF COMP. SCI. AND STAT./ CALIF. POLY. STATE UNIV./ SAN LUIS OBIS. CA 93407/ (805) 481-2969 

93555 L. W. LUCAS/ CODE 3132/ NAVAL WEAPONS CENTER/ CHINA LAKE CA 93555/ (714) 939-2836 

94010 WILLIAM E. BLUM/ SPCOMMUNICATIONS/ 1 ADRIAN COURT - P.O. BOX 974/ BURLINGAME CA 94010/ (415) 692-5600 X444 

94019 PAUL BARINA/ 404 KEHOE AVE./ HALF MOON BAY CA 94019 

94025 ARTHUR W. DANA JR./ 1670 EL CAMINO REAL/ MENLO PARK CA 94025 

94025 C. ROADS/ COMPUTER MUSIC JOURNAL/ BOX E/ MENLO PARK CA 94025/ (415) 323-3111 

94035 CHUCK JACKSON/ MS 210-9/ NASA AMES RESEARCH CENTER/ MOFFETT FIELD CA 94035/ (415) 965-6081 

94043 JEANE ABITBOUL/ SCANCOM CORP./ 1957B OLD MIDDLEFIELD WY./ MOUNTAIN VIEW CA 94043/ (415) 967-4211 

94043 D. DONAHUE/ JOHN FLUKE MFG. CO. INC./ 630 CLYDE AVE/ MTN. VIEW CA 94043 

94043 CARY KORNFELD/ 1758 VILLA ST #15/ MTN. VIEW CA 94043/ (415) 966-3731 (WORK)/ (415) 967-7004 (HOME) 

94062 MICHAEL K. STAUFFER/ 3660 ALTAMONT WAY/ REDWOOD CITY CA 94062/ (408) 732-2400 (WORK)/ (415) 367-8135 (HOME) 

94086 DENNIS S. ANDREWS/ AMDAHL CORP./ 1250 E. ARQUES AVE/ SUNNYVALE CA 94086/ (408) 746-6301 

94086 MICHAEL C. ARYA/ SIGNETICS/ 811 EAST ARQUES AVE/ SUNNYVALE CA 94086/ (408) 739-7700 

94086 PETER H. HAAS/ MS 203/ AMDAHL CORP./ P.O. BOX 5070/ SUNNYVALE CA 94086/ (408) 746-7340 

94086 RAY HOLT/ SYNERTEK SYSTEMS/ 150 S. WOLFE RD./ SUNNYVALE CA 94086/ (408) 988-5691 

94086 MASAHIRO HONDA/ AMDAHL CORP./ 1250 E. ARQUES AVE./ SUNNYVALE CA 94086/ (408) 746-6688 

94086 PETER KOOLISH/ 02-996/ AMDAHL CORP./ 1250 EAST ARQUES/ SUNNYVALE CA 94086/ (408) 746-6364 (WORK)/ 446-3156 (HOME) 

94086 GEORGE LEWIS/ R&D/ BTI COMPUTER SYSTEMS/ 870 WEST MAUDE AVENUE/ SUNNYVALE CA 94086/ (408) 733-1122 

94086 JEFFRY L. PARKER/ 1091 CLEMATIS DRIVE/ SUNNYVALE CA 94086/ (408) 247-0814 

94087 THOMAS W. CROSLEY/ SOFTWEST/ 1675 NEW BRUNSWICK AVE./ SUNNYVALE CA 94087/ (408) 737-1927 
94087 ALLAN B. DELFINO/ 1504 FANTAIL COURT/ SUNNYVALE CA 94087/ (408) 735-1534 

94087 PAUL MILLER/ ENGINEERING/ AVERA TECHNOLOGY/ 1643 WRIGHT AVE./ SUNNYVALE CA 94087/ (408) 732-8218 
94087 CRAIG W. REYNOLDS/ 400 E. REMINGTON AVE. - APT C-223/ SUNNYVALE CA 94087/ (408) 245-8106 

94087 SAMUEL SOLON/ 575 E. REMINGTON DRIVE #11B/ SUNNYVALE CA 94087/ (408) 739-8950 

94088 ROSS R. W. PARLETTE/ CHEMICAL SYSTEMS/ P.O. BOX 358/ SUNNYVALE CA 94088/ (408) 739-4880 X2149 
94088 JEFFRY G. SHAW/ P.O. BOX 60457/ SUNNYVALE CA 94088/ (408) 257-7676 (EV+WKE) 

94104 ROBERT J. RAKER/ PACIFIC GAS & ELECTRIC CO./ 1 POST ST. - NO. 2200/ SAN FRANCISCO CA 94104/ (415) 781-4211 X1296 
94104 IRA SLODODIEN/ AUTOMATED DATA EXCHANGE/ 582 MARKET STREET/ SAN FRANCISCO CA 94104/ (415) 421-8824 
94109 BRUCE W. RAVENEL/ LANGUAGE RESOURCES/ 1311 LOMBARD ST./ SAN FRANCISCO CA 94109/ (415) 928-8086 
94114 LAURA L. KING/ 330 EUREKA STREET/ SAN FRANCISCO CA 94114/ (415) 285-9804 
94122 DANIEL CARROLL/ 1709 17TH AVE./ SAN FRANCISCO CA 94122 

94131 JOHN PEMBERTON/ 3955 ARMY STREET/ SAN FRANCISCO CA 94131/ (415) 282-1387 

94132 MARK SCOTT JOHNSON/ DEPT. OF MATHEMATICS/ SAN FRANCISCO STATE UNIV./ 1600 HOLLOWAY AVE./ SAN FRANCISCO CA 94132/ (415) 469-1104 

94133 MARCUS L. BYRUCK/ 448 VALLEJO ST./ SAN FRANCISCO CA 94133/ (415) 956-6272 
94301 COLIN MCMASTER/ 202 RAMONA STREET #C/ PALO ALTO CA 94301 

94301 ATTN: JEANNE L. TOULOUSE - LIBRARIAN/ 02-558/ AMDAHL CORP./ 1250 EAST ARQUES AVENUE/ SUNNYVALE CA 94301/ (408) 746-6654 

94303 MICHAEL H. GROSS/ D-317/ VARIAN ASSOCIATES/ 611 HANSEN WAY/ PALO ALTO CA 94303/ (415) 493-4000 X3568 

94303 KIM R. HARRIS/ 1055 OREGON AVE./ PALO ALTO CA 94303/ (415) 324-1069 

94303 HANK S. MAGNUSKI/ GAMMA TECHNOLOGY INC./ 2452 EMBARCADERO WAY/ PALO ALTO CA 94303/ (415) 856-7421 

94303 JOSEPH C. SHARP/ K122/ VARIAN CORPORATE RESEARCH/ 611 HANSEN WAY/ PALO ALTO CA 94303/ (415) 493-4000 X4145 

94304 J. P. MARKS/ TELESENSORY SYSTEMS INC./ P.O. BOX 10099/ PALO ALTO CA 94304/ (415) 493-2626 

94304 R. K. SUMMIT/ PALO ALTO RESEARCH LAB/ D/5208 B/201/ LOCKHEED/ 3251 HANOVER STREET/ PALO ALTO CA 94304 

94304 LEN WEISBERG/ SYSTEMS PROGRAMMING/ BLDG 3L/ HEWLETT-PACKARD CO/ 1501 PAGE MILL RD/ PALO ALTO CA 94304/ (415) 856-2495 

94305 ATTN: LIBRARY / SERIALS/ BIN 82/ STANFORD LINEAR ACCELERATOR CENTER/ P.O. BOX 4349/ STANFORD CA 94305 
94305 JOHN HENNESSY/ COMPUTER SYSTEMS LAB./ STANFORD UNIV./ STANFORD CA 94305/ (415) 497-1835 

94305 M. SHAHID MUJTABA/ ARTIFICIAL INTELLIGENCE LAB/ STANFORD UNIV./ STANFORD CA 94305/ (415) 325-6359 

94306 ROY HARRINGTON/ 450 OLIVE AVE/ PALO ALTO CA 94306/ (415) 328-2709/ (415) 964-7400 X43 (WORK) 
94510 STANLEY J. HUBER/ 318 STEVEN CT./ BENICIA CA 94510/ (707) 745-8089 

94536 CLEVE HART/ 546 ALTURA PL/ FREMONT CA 94536/ (415) 792-2516 

94545 DICK VAN LEER/ 22634 FOOTHILL BLVD./ HAYWARD CA 94545/ (408) 371-6057 

94550 ATTN: LIBRARY L-53 (COPY B)/ LAWRENCE LIVERMORE LIBRARY/ P.O. BOX 5500/ LIVERMORE CA 94550/ (415) 447-1100 

94596 GENE POWERS/ VIRTUAL SYSTEMS INC./ 1500 NEWELL AVE SUITE #406/ WALNUT CREEK CA 94596/ (415) 935-4944 

94598 DAVE WALLACE/ CHROMATOGRAPHY DATA SYSTEMS/ 2700 MITCHELL DR./ WALNUT CREEK CA 94598/ (415) 939-2400 

94608 DAVID BATES/ 4 CAPTAIN DRIVE #301/ EMERYVILLE CA 94608/ (415) 658-2422 

94609 PETER E. DOLEMAN/ 6515 TELEGRAPH AVE. #22/ OAKLAND CA 94609/ (415) 654-1949 
94611 PHILIP F. MEADS JR./ 7053 SHIRLEY DRIVE/ OAKLAND CA 94611/ (415) 531-8172 
94611 DENNIS NEWTON/ 1 KELTON CT. APT 7-G/ OAKLAND CA 94611/ (415) 655-1057 

94703 ERIC MARTINOT/ 2206B JEFFERSON/ BERKELEY CA 94703/ (415) 849-2663 

94704 JOSEPH FALETTI/ iy45 BERKELEY , WAY #220/ BERKELEY CA 94704/ (415) 548-1192 

94705 PETE GOODEVE/ 3012 DEAKIN ST #D/ BERKELEY CA 94705/ (415) 642-6440 

94707 WALT FRENCH/ 820 ARLINGTON #1621/ BERKELEY CA 94707/ (415) 788-5454 DAYS/ (415) 526-3551 

94707 DANA WHEELER/ 1858 TACOMA AVENUE/ BERKELEY CA 94707/ (415) 869-4646 

94708 BLAND EWING/ 221 LAKE DRIVE/ KENSINGTON CA 94708/ (415) 525-5888 

94720 LAWRENCE A. ROWE/ DEPT. OF EE AND CS - TEOI/ EVANS HALL/ U OF CALIFORNIA/ BERKELEY CA 94720/ (415) 642-5117 

94903 JOHN C. FRANZINI/ 65 MERIAM DR./ SAN RAFAEL CA 94903 

94903 BILL STACKHOUSE/ 436 MILLER CREEK ROAD/ SAN RAFAEL CA 94903 

94941 ATTN: AYERS LOCKSMITHING/ 227 SHORELINE HWY./ MILL VALLEY CA 94941/ (415) 383-1415 

94941 ALEXANDER YUILL-THORNTON 11/ P.O. BOX 182/ MILL VALLEY CA 94941/ (415) 383-7806 

94960 JUNE B. MOORE/ 32 SALINAS AVE/ SAN ANSELMO CA 94960/ (415) 472-3100 X236/ (415) 456-5889 

95008 TIM BLUM/ 768 INWOOD DRIVE/ CAMPBELL CA 95008/ (408) 938-7777 X245 

95008 HERBERT H, HOY/ 4868 ROUNDTREE DRIVE/ CAMPBELL CA 95008/ (408) 378-7191 

95014 WENDY DUBOIS/ ZILOG CORPORATION/ 10460 BUBB RD./ CUPERTINO CA 95014/ (408) 446-4666 

95014 DOUG FORSTER/ 10290 PALO VISTA RD./ CUPERTINO CA 95014 

95014 LINDA SIENER/ HEWLETT PACKARD DATA SYSTEMS/ 11000 WOLFE ROAD/ CUPERTINO CA 95014 

95014 RICHARD TABOR/ ZILOG/ 10460 BUBB ROAD/ CUPERTINO CA 95014/ (408) 446-4666 

95030 KEVIN CONRY/ 23449 SUNSET DRIVE/ LOS GATOS CA 95030/ (408) 353-2748 



PASCAL NEWS #15 SEPTEMBER, 1979 PAGE 20 

95030 STEPHEN N. ZILLES/ K52/282/ IBM RESEARCH/ 5600 COTTLE RD/ SAN JOSE CA 95030/ (408) 256-7559 

95050 CHRISTINE MORRIS/ GENERAL SYSTEMS DIV./ HEWLETT-PACKARD/ 5303 STEVENS CREEK BLVD./ SANTA CLARA CA 95050/ (408) 249-7020 

95051 ATTN: AMI INFORMATION CENTER/ 800 HOMESTEAD ROAD/ SANTA CLARA CA 95051/ (408) 246-0330 
95051 JOHN BENITO/ INTEL MAGNETICS/ 3000 OAKMEAD VILLAGE RD./ SANTA CLARA CA 95051/ (408) 987-7700 
95051 KAREN CAVILEER/ OMEX/ 2323 OWEN STREET/ SANTA CLARA CA 95051/ (408) 249-5801' 

95051 AL HARTMANN/ INTEL CORPORATION/ 3065 BOWERS AVENUE/ SANTA CLARA CA 95051/ (408) 987-8080 

95051 NIKI JORDAN/ GRANGER ASSOCIATES/ 3101 SCOTT BLVD./ SANTA CLARA CA 95051/ (408) 985-7000 

95051 ROBERT S. KIRK./ SOFTWARE DEVELOPMENT SECTION/ 778 BLDG. 700/ AMERICAN MICROSYSTEMS INC./ 3800 HOMESTEAD RD./ SANTA CLARA CA 95051/ (408) 246-0330 

95051 DUFF KURLAND/ INFORMATION SYSTEMS DESIGN INC./ 3205 CORONADO DRIVE/ SANTA CLARA CA 95051/ (408) 249-8100 

95051 JOHN NAGLE/ 3665, BENTON ST. #60/ SANTA CLARA CA 95051/ (408) 244-6675 

95051 CONRAD SCHNEIKER/ MS 690/ NATIONAL SEMICONDUCTOR/ 2900 SEMICONDUCTOR DRIVE/ SANTA CLARA CA 95051/ (408) 737-5067 

95051 TAZUYKI TSUNEZUMI/ TERMINAL DIVISION/ FUJITSU LTD/ 2945 OAKMEAD VILLAGE CT./ SANTA CLARA CA 95051/ C408) 727-2670 

95051 FRED ZEISE/ DATA SYSTEMS DESIGN/ 3130 CORONADO DRIVE/ SANTA CLARA CA 95051/ (408) 249-9353 

95064 ALEC DARA-ABRAMS/ DEPT. OF INFO. SCI./ APPLIED SCIENCES BLDG./ UNIV. OF CALIF. - SANTA CRUZ/ SANTA CRUZ CA 95064/ (408) 429-2565 

95070 J. E. DOLL/ 19145 BROOKVIEW DR./ SARATOGA CA 95070 

95112 DONALD C. DELONG/ TECHNICAL SERVICES/ INTEL CORP./ 1766 JUNCTION AVE./ SAN JOSE CA 95112/ (408) 987-8080 

95118 DAVID A. KOHLER/ 1452 PORTOBELO DR./ SAN JOSE CA 95118/ (408) 395-2160 X211 

95123 NORMAN R. BARKER/ 5835 INDIAN AVE./ SAN JOSE CA 95123/ (408) 225-1737 

95129 CHOI UISIK/ 6562 IVY LANE/ SAN JOSE CA 95129/ (408) 257-5818 

95132 ANDREW HARRIS ZIMMERMAN/ 3422 DUTCHESS COURT/ SAN JOSE CA 95132 

95133 RONALD MAK/ 2363 BRUSHGLEN WAY/ SAN JOSE CA 95133/ (408) 259-8205 

95193 JACK POWERS/ A50/029/ IBM CORP./ 5600 COTTLE RD./ SAN JOSE CA 95193/ (408) 997-4110 

95211 WILLIAM H. FORD/ DEPT. OF MATHEMATICS/ IJNIV. OF THE PACIFIC/ STOCKTON CA 95211/ (209) 946-2347 

95410 B. C. MACDONALD/ P.O. BOX 69/ ALBION CA 95410/ (707) 937-4352 

95442 THOMAS TOLLEFSEN/ 4470 LAKESIDE DR./ GLEN ELLEN CA 95442/ (707) 996-5753 

95452 JOE WEISMAN/ 2040 LAWNDALE RD./ KENWOOD CA 95452/ (707) 833-6477 

95466 PAUL MEILLEUR/ BOX 365/ PHILO CA 95466 

95476 COLEMAN YOUNGDAHL/ 844 OAK LANE/ SONOMA CA 95476/ (707) 938-4643 

95540 JIM THOMSON/ BOX 794/ FORTUNA CA 95540/ (707) 725-4817 

95662 WILLIAM A. HEITMAN/ 5262 MISSISSIPPI BAR DR./ ORANGEVALE CA 95662/ (916) 988-5262 

95817 DAN EBBERTS/ 2006 57TH ST./ SACRAMENTO CA 95817/ (916) 456-4689 

95818 GENE GARBUTT/ 2025 28TH ST. #112/ SACRAMENTO CA 95818/ (916) 451-267*4 
95826 ROBERT RESS/ 9248 VANCOUVER DR./ SACRAMENTO CA 95826/ (916) 362-5712 

95926 DAN & ROBIN BARNES/ 279 RIO LINDO AVE. NO. 7/ CHICO CA 95926/ (916) 891-1232 

95926 GLENN A. BOOKOUT/ CENTRAL VALLEY MANAGEMENT/ 585 MANZANITA - SUITE 7/ CHICO CA 95926/ (916) 895-8321 

96274 DAVID A. ROSSER/ DET 5 - 1ST WEA. WG./ PSC #5 - BOX 10977/ APO CA 96274 

96821 SCOTT PLUNKETT/ 1025 KAIMOKU PLACE/ HONOLULU HI 96821 

96822 LESLIE M. HINO/ MANAGEMENT SYSTEMS OFFICE/ UNIVERSITY OF HAWAII/ 2425 CAMPUS ROAD - SL RM 10-V/ HONOLULU HI 96822/ (808) 948-8919 
96827 GEORGE W. HARVEY/ PANPAC LABS/ P.O. BOX 27785/ HONOLULU HI 96827/ (808) 524-5755 

96910 SAM E. RHOADS/ FACULTY OF MATHEMATICS/ UNIV. OF GUAM/ P.O. BOX EK/ AGANA GU 96910 

97005 JIM ENGILES/ TECHNICAL INFORMATION CENTER/ INTEL CORPORATION/ 3585 SW 198TH AVE/ ALOHA OR 97005/ (503) 642-6598 

97005 JOHN E. RIEBER/ 7780 SW WILSON AVE/ BEAVERTON OR 97005/ (503) 641-5806 

97005 DONALD A. ZOCCHI/ 2605 S.W. 203RD AVE./ PORTLAND OR 97005/ (503) 649-9262 

97034 C. R. SKUTT/ 1694 FIRCREST/ LAKE OSWEGO OR 97034/ (503) 636-0901 

97077 PAT CAUDILL/ MS 92-525/ TEKTRONIX INC./ P.O. BOX 500/ BEAVERTON OR 97077/ (503) 645-6464 X1753 

97077 GLEN FULLMER/ MS 58/126/ TEKTRONIX INC./ P.O. BOX 500/ BEAVERTON OR 97077/ (503) 644-0161 X5833 

97077 JUDY GOODMAN/ MS 43-042/ TEKTRONIX INC./ P.O. BOX 500/ BEAVERTON OR 97077/ (503) 644-0161 X6091 

97077 CHARLIE MONTGOMERY/ MS 58-126/ TEKTRONIX INC./ P.O. BOX 500/ BEAVERTON OR 97077 

97077 PAULA OCHS/ MS 92-801/ TEKTRONIX INC./ P.O. BOX 500/ BEAVERTON OR 97077 

97106 JOHN L. RUTIS/ RT 2 BOX 7H/ BANKS OR 97106 

97201 A. C. BROWN/ DEPT. OF PHYSIOLOGY/ SD 414/ UNIV. OF OREGON/ 611 SW CAMPUS DRIVE/ PORTLAND OR 97201/ (503) 225-8958 

97201 DAVID ROWLAND/ 734 SW WESTWOOD DR./ PORTLAND OR 97201 

97203 ROBERT LUCAS/ 6941 N. OLIN AVENUE/ PORTLAND OR 97203/ (503) 289-3457 

97206 SCOTT R. TRAPPE/ 2825 S.E. 68TH/ PORTLAND OR 97206/ (503) 775-9292 

97216 MARK M. MILLARD/ 8415 S.E. STEPHENS/ PORTLAND OR 97216/ (503) 253-4545 

97223 ALAN ROSENFELD/ FLOATING POINT SYSTEMS INC./ P.O. BOX 23489/ PORTLAND OR 97223/ (503) 641-3151 

97225 CHUCK FORSBERG/ R&D/ SIDEREAL CORP./ 9600 SW BARNES RD./ PORTLAND OR 97225/ (503) 227-0111 

97225 PAUL HOEFLING/ 8665 S.W. CANYON LANE #22/ PORTLAND OR 97225 

97229 JERRY SEWELL JR./ SOFTWARE ENGINEERING/ ELECTRO SCIENTIFIC INDUSTRIES/ 13900 NW SCIENCE PARK DRIVE/ PORTLAND OR 97229/ (503) 641-4141 

97301 SHELLEY GILES/ COMPUTER CENTER/ WILLAMETTE UNIV./ 900 STATE STREET/ SALEM OR 97301/ (503) 370-6439 

97330 OLE L. ANDERSON/ 4210 NW CRESCENT VALLEY DRIVE/ CORVALLIS OR 97330/ (503) 757-9878 

97330 ATTN: COMPUTER SOLUTIONS INC./ 4600 NW SULPHER SPRINGS ROAD/ CORVALLIS OR 97330/ (503) 745-5769 

97403 BOB DONAHUE/ FOLLOWTHROUGH/ UNIV. OF OREGON/ EUGENE OR 97403/ (503) 686-3555 

97404 ATTN: NORTHWEST MICROCOMPUTER SYSTEMS*/ 749 RIVER AVE./ EUGENE OR 97404/ (503) 688-6874 

97405 STEVEN HARTLEY/ 650 W. 27TH AVE./ EUGENE OR 97405/ (503) 344-1809 
97701 JOHN & BARBARA HUSEBY/ P.O. BOX 5991/ BEND OR 97701 

98007 BOB WALLACE/ MICROSOFT/ 10800 NE 8TH #819/ BELLEVUE WA 98007/ (206) 455-8080 

98031 RICHARD W. HERMANSON/ 26625 DOVER CT./ KENT WA 98031 

98033 PAUL SAMSON/ TELTONE CORP./ 10801 120TH AVE NE/ KIRKLAND WA 98033/ (206) 827-9626 

98055 ROBERT N. ADAMSON/ PACIFIC TECHNOLOGY INC./ 235 AIRPORT WAY/ RENTON WA 98055/ (206) 623-9080 

98055 STEPHEN F. MERSHON/ 1151 OLYMPIA AVE. N.E. APT. 21/ RENTON WA 98055/ (206) 226-3891 

98055 RICHARD N. TAYLOR/ 17002 159TH PL S.E./ RENTON WA 98055/ (206) 255-5856 

98107 JEAN DARSIE/ DEL-D / CMO/ HONEYWELL INC./ 5303 SHILSHOLE AVE. N.W./ SEATTLE WA 98107/ (206) 789-2000 

98107 DANIEL EDGAR/ HONEYWELL 'INC ./ 5303 SHILSHOLE AVE NW/ SEATTLE WA 98107/ (206) 789-2000 

98115 ATTN: PAT MCCLAIN/ ENGINEERING STUDIES GROUP/ NOAA/ 7600 SAND PT. WAY NE / HANGER 32/ SEATTLE WA 98115 

98115 PETER CARTWRIGHT/ 7340 23RD AVE NE/ SEATTLE WA 98115/ (206) 525-2756 

98115 DAVID C. JENNER/ 3153 NE 84TH STREET/ SEATTLE WA 98115/ (206) 527-2018 

98124 ATTN: KENT TECHNICAL LIBRARY - B/ MS 8K-38/ THE BOEING COMPANY/ P.O. BOX 3707/ SEATTLE WA 98124 

98124 ATTN: KENT TECHNICAL LIBRARY - C/ MS 8K - 38/ THE BOEING COMPANY/ P.O. BOX 3707/ SEATTLE WA 98124 

98133 RALEIGH ROARK/ METRODATA CORP./ 2150 N. 107TH ST. SUITE 120/ SEATTLE WA 98133/ (206) 367-2100 

98133 DWIGHT VANDENBERGHE/ 17541 STONE AVE. N./ SEATTLE WA 98133/ (206) 542-8370 

98144 JEAN W. BUTLER/ 714 LAKESIDE S. #207/ SEATTLE WA 98144/ (206) 773-0976 

98146 JAMES A. FORGEY/ COMPUTER RENTAL & SERVICE/ 10203 47TH AVE SW #10B/ SEATTLE WA 98146/ (206) 246-9330 

98178 CHARLES A. DANIELS/ 10215 62ND AVE. S./ SEATTLE WA 98178/ (206) 723-2525 

98195 JOHN C. CHAN/ DEPT. OF COMPUTER SCIENCE/ FR-35/ UNIV. OF WASHINGTON/ SEATTLE WA 98195/ (206) 543-2697 

98199 BRADLEY K. GJERDING/ 2806 22ND AVENUE WEST/ SEATTLE WA 98199/ (206) 285-7266 

98199 THOMAS J. PALM/ 2529 34TH AVE. W./ SEATTLE WA 98199/ (206) 282-2083 

98225 MELVIN DAVIDSON/ COMPUTER CENTER/ 334 BOND HALL/ WESTERN WASHINGTON UNIV./ BELLINGHAM WA 98225 

98225 KENDALL STAMBAUGH/ 5009 GUIDE MERIDIAN/ BELLINGHAM WA 98225/ (206) 734-9424 

98370 GARY B. STEBBINS/ VIKING TERRACE APTS. #C/ 289 HWY. 3/ POULSBO WA 98370/ (206) 779-4174 

98632 RICHARD W. HAMILTON/ P.O. BOX 1609/ LONGVIEW WA 98632 

98662 C. T. KROUSE/ 7817 NE 69TH STREET/ VANCOUVER WA 98662 

98846 ROBERT E. SANDERSON/ DATASYST/ P.O. BOX 373/ PATEROS WA 98846 

99123 MARK STEPHENS/ BOX 57/ ELECTRIC CITY WA 99123/ (509) 633-1360 X491 

99163 ALAN DEEHR/ NE 545 KAMIAKEN/ PULLMAN WA 99163/ (509) 332-2225 

99163 PAUL J. GILLIAM/ P.O. BOX 2202 CS/ PULLMAN WA 99163/ (509) 335-6611 (WORK) 

99163 ROBERT E LORD/ COMPUTING CENTER/ WASHINGTON STATE UNIV./ PULLMAN WA 99163/ (509) 335-6611 

99164 ATTN: WASHINGTON STATE UNIV./ 3960 NUCLEAR RADIATION/ PULLMAN WA 99164 

99164 J. DENBIGH STARKEY/ COMPUTER SCIENCE DEPT./ WASHINGTON STATE UNIV./ PULLMAN WA 99164/ (509) 335-4254 

99164 MASAYUKI TOMIMURO/ OFFICE OF INTERNATIONAL PROGRAMS/ 108 BRYAN HALL/ WASHINGTON STATE UNIV./ PULLMAN WA 99164/ (208) 335-1773 

99206 WILLIAM G. HAMMER/ NORTH 107 FARR ROAD/ SPOKANE WA 99206/ (509) 924-9872 

99352 ATTN: COLUMBIA MICRO-COMPUTER SYSTEMS*/ P.O. BOX" 725/ RICHLAND WA 99352/ (509; 946-4509 

99352 TOM MATHIEU/ BATTELLE PACIFIC N.W. LABS/ BATTELLE BOULEVARD/ RICHLAND WA 99352/ (509) 946-3711 

99352 ALAN OYAMA/ AZURDATA INC./ P.O. BOX 926/ RICHLAND WA 99352/ (509) 946-1683 

99501 DAVID CRAWFORD/ CENTER FOR DISEASE CONTROL/ 225 EAGLE STREET/ ANCHORAGE AK 99501/ (907) 271-4011 

99701 TOM HEAD/ DEPT. OF MATH/ UNIV. OF ALASKA/ FAIRBANKS AK 99701 
RA-1069 ARGENTINA JORGE LINSKENS/ LOGYCON S.A./ CHACABUCO 380 5P/ BUENOS AIRES RA-1069/ 33-6513 

RA-1425 ARGENTINA ADRIAN VILLANUSTRE/ BERUTI 3429 - 14B/ BUENOS AIRES RA-1425 

AUSTRALIA GEOFFREY R. GRINTON/ STATE ELECTRICITY COMMISSION OF VIC./ HOWARD STREET/ RICHMOND VICTORIA/ (03) 429 1511 

2000 AUSTRALIA D. A. FEIGLIN/ AUSTRALIA SQUARE/ P.O. BOX H143/ SYDNEY N.S.W. 2000 

2000 AUSTRALIA MAURICE R. MUNSIE/ NETWORK COMPUTER SCIENCES P/L/ 69 CLARENCE STREET/ SYDNEY N.S.W. 2000/ (02) 290-3677 

2001 AUSTRALIA W. J. MATHER/ G.P.O. BOX 3198/ SYDNEY N.S.W. 2001 

2006 AUSTRALIA ATTN: BASSER DEPT. OF COMPUTER SCIENCE/ SCHOOL OF PHYSICS/ UNIVERSITY OF SYDNEY/ SYDNEY N.S.W. 2006 

2006 AUSTRALIA JURGEN HENRICHS/ DEPT OF COMPUTER SCIENCE/ UNI OF SYDNEY/ SYDNEY N.S.W. 2006 

2006 AUSTRALIA IAN ROBERTS/ 403 SAMPLE SURVEY CENTRE/ SYDNEY UNIVERSITY/ SYDNEY N.S.W. 2006 

2007 AUSTRALIA ATTN: DIRECTOR/ COMPUTER CENTRE/ NSW INSTITUTE OF TECHNOLOGY/ P.O. BOX 123/ BROADWAY N.S.W. 2007/ (02) 218 9438 
2010 AUSTRALIA IAN SHANNON/ 39 STANLEY ST/ DARLINGHURST N.S.W. 2010/ (02) 31 3875 

2042 AUSTRALIA RODNEY PARKIN/ 16 WATKIN STREET/ NEWTOWN N.S.W. 2042/ 692-3216 

2064 AUSTRALIA BRUCE TAYLOR/ 703/4 BROUGHTON RD/ ARTARMON N.S.W. 2064 

2067 AUSTRALIA R. D. GUYON/ IP COMPUTER CONSULTANTS/ 7 RAILWAY STREET/ CHATWOOD N.S.W. 2067/ (02) 411-3522 

2070 AUSTRALIA R. A. BROWNELL/ HOUSLEY COMPUTER COMMUNICATIONS PTY L*/ 358 PACIFIC HIGHWAY/ LINDFIELD N.S.W. 2070/ (02) 467 2791 

2072 AUSTRALIA CARROLL MORGAN/ ASCOMP PTY LTD/ 870 PACIFIC HWY/ GORDON N.S.W. 2072/ (02) 498-7835 

2073 AUSTRALIA W. L. DENISON/ SEPP'L SOFTWARE/ P.O. BOX 199/ PYMBLE N.S.W. 2073 
2098 AUSTRALIA PETER BLADWELL/ 78 ROSE AVE./ WHEELER HTS. N.S.W. 2098 

2113 AUSTRALIA C.N.S. DAMPNEY/ SCHOOL OF MATHS & PHYSICS/ MACQUARIE UNIVERSITY/ NORTH RYDE N.S.W. 2113 

2119 AUSTRALIA ERNST LOOSER/ 21 KARRIL AVE./ BEECROFT N.S.W. 2119 

2120 AUSTRALIA DAVID HATCH/ 15 HYLAND AVENUE/ W PENNANT HILL N.S.W. 2120/ 816 2211 (BUS.)/ 871 7845 (HOME) 

2232 AUSTRALIA JEFFREY TOBIAS/ APPLIED MATHS AND COMPUTING DIV./ AUST. ATOMIC FNERGY COMM. RES. EST./ PRIVATE MAIL BAG/ SUTHERLAND N.S.W. 2232 

531-0111 
2500 AUSTRALIA E. H. RTGBY/ RTGRY & ASSOC. PTY. LTD./ 10 RECENT ST./ WOLLONGONG N.S.W. 2500 



PASCAL NEWS #15 



SEPTEMBER, 19 7 9 



PAGE 2 1 



2580 
2600 
2600 
2600 
2600 
2600 
2601 
2601 
2601 
2602 
2602 
2607 
2902 
3000 
3042 
3052 
3052 
3053 
3068 
3122 
3127 
3131 
3131 
3145 
3161 
3168 

3168 

3168 

3168 

3168 

3168 

3168 

3173 

3180 

3181 

3185 

3191 

4001 

4067 

4069 

4350 

4700 

5000 

5001 

5001 

5001 

5064 

5109 

6000 

7000 

7001 

7001 

7005 

7005 

7007 

7011 

A-1000 

A-1010 

A-2340 

A-4020 

B-1050 

B-1160 

B-1170 

B-1761 

B-3030 

22061 

22453 



B2Y 4A2 
E3B 5 A3 
G5L 3A1 
HEH 2J8 
H1G 3S5 
H2Z 1A4 
IOC 3J7 
H3C 3J7 
H3C 3J7 
H3C 3P8 
H4T INI 
H9R 1G1 
H9R 1T9 
J8X 1C6 

J9H 6K2 
KOA 1A0 
KOA 2 WO 
KOA 3G0 
K1A 0R6 
K1V 6N3 
K1V 9J1 
K2E 6T7 
K2H 8R6 
K2H 8S9 
K2K 1N8 
K2P 0G2 
K7L 3N6 
K7L 3N6 
K7L 3N6 
K8A 3C5 
US 3A1 
L6T 3Y3 
L7P 1W9 
L8S 4K1 
L8S 4K1 
M1J 2T1 
MIR 5A6 
M3A 1M3 
M3C 1H7 
M3H 5S9 
M4S 1J7 
NON 1J0 
N2C 2E0 
N2G 4E5 
N2J 4G5 
N2L 3G1 
N2L 3G1 
N2L 3G1 
N9B 3P4 
R3C 1P7 
R3E 0W3 
S4P 2H8 
S4P 2H8 
S7N OWO 
T2V 0H5 
T6G 2J8 
T6H 3X1 
V3C 1S5 
V3N 4N8 



AUSTRALIA I. PIRIE/ GOULBURN C.A.E./ MCDERMOTT DRIVE/ GOULBURN N.S.W. 2580 

AUSTRALIA R. BRENT/ COMPUTING RESEARCH GROUP/ AUSTRALIAN NATIONAL UNIVERSITY/ P.O. BOX 4/ CANBERRA A.C.T. 2600 

AUSTRALIA MALCOLM C. NEWEY/ COMPUTER SCIENCE DEPT./ AUSTRALIAN NATIONAL UNIV./ P.O. BOX 4/ CANBERRA A.C.T. 2600/ 81-6376 / 49-4216 

AUSTRALIA G. W. GERRITY/ DEPT OF MATHEMATICS/ UNIV. OF NEW SOUTH WALES/ DUNTROON A.C.T. 2600/ CANBERRA 663526 

AUSTRALIA M. G. SMITH/ COMPUTER CENTRE/ UNI. OF NEW SOUTH WALES/ RMC/ OUNTROON A.C.T. 2600 

AUSTRALIA P. KELLEY/ ADP SECTION/ AUSTRALIAN TAXATION OFFICE/ LANGTON STREET/ PARKES A.C.T. 2600 

AUSTRALIA M. CORBOULD/ BRUCE HALL/ AUSTRALIAN NATIONAL UNIVERSITY/ P.O. BOX 827/ CANBERRA A.C.T. 2601 

AUSTRALIA CHARLES LAYTON/ BRUCE HALL/ A.N.U./ P.O. BOX 827/ CANBERRA A.C.T. 2601 

AUSTRALIA R. J. SHARPE/ 33 WYBALENA GROVE/ COOK A.C.T. 2601 

AUSTRALIA JOHN F. AGNEW/ 37 DUMARESQ STREET/ DICKSON A.C.T. 2602/ (062) 49-7304 

AUSTRALIA D. C. GARRATT/ DARAMALAN COLLEGE/ COWPER STREET/ DICKSON A.C.T. 2602 

AUSTRALIA G. W. GORDON/ P.O. BOX 118/ MAWSON A.C.T. 2607 

AUSTRALIA W. J. CAELLI/ P.O. BOX 1/ KAMBAH A.C.T. 2902 

AUSTRALIA R. ZECTZER/ COMMUNICATION ENGINEERING DEPT./ R.M.I.T./ 124 LA TROBE ST./ MELBOURNE VICTORIA 3000/ (03) 341-2639 

AUSTRALIA T. MOWCHANUK/ P.O. BOX 268/ NIDURIE VICTORIA 3042 

AUSTRALIA PRABHAKER MATETI/ DEPT. OF COMPUTER SCIENCE/ UNIV. OF MELBOURNE/ PARKVILI.E VICTORIA 3052/ (03)341-6459 

AUSTRALIA P. C. POOLE/ DEPT. OF COMPUTER SCIENCE/ UNIV. OF MELBOURNE/ PARKVILLE VICTORIA 3052 

AUSTRALIA B. MCCRAE/ MATHS DEPT/ MELBOURNE STATE COLLEGE/ 757 SWANSTON ST/ CARLTON VICTORIA 3053 

AUSTRALIA M. CULLINAN/ 181 ST. GEORGES ROAD/ NORTH FITZROY VICTORIA 3068 

AUSTRALIA P. L. DEMPSEY/ SWINBURNE COLLEGE OF TECH./ P.O. BOX 218/ HAWTHORN VICTORIA 3122 

AUSTRALIA PETER HORAN/ DEAKIN UNIVERSITY/ P.O. BOX 125/ BELMONT VICTORIA 3127/ (052) 26 3313 

AUSTRALIA ATTN: SHATTOCK & ASSOCIATES/ 79 MAHONEYS ROAD/ FOREST HILL VICTORIA 3131 

AUSTRALIA L. P. WHITEHEAD/ AUSTRALIAN ROAD RESEARCH BOARD/ P.O. BOX 156 (BAG 4)/ NUNAWADING VICTORIA 3131/ 233 1211 

AUSTRALIA JOHN CARPENTER/ 29 WESTGARTH ST/ EAST MALVERN VICTORIA 3145/ 509 4909 (HOME) 

AUSTRALIA ATTN: MINI-COMPUTER SYSTEMS/ FIRST FLOOR/ 105 HAWTHORN ROAD/ N. CAULFIELD VICTORIA 3161 

AUSTRALIA ATTN: PROGRAMMING MANAGER/ SWITCHING AND SIGNALLING BRANCH/ TELECOM AUSTRALIA RESEARCH LABS/ 770 BLACKBURN ROAD 

CLAYTON VICTORIA 3168/ 03-5416-373 

AUSTRALIA P. COUNTY/ COMP. SCI. DEPT./ MONASH UNIVERSITY/ CLAYTON VICTORIA 3168 

AUSTRALIA W. JACKSON/ ADP CENTRAL ADMINISTRATION/ MONASH UNIVERSITY/ CLAYTON VICTORIA 3168 

AUSTRALIA J. ROSENBERG/ COMP. SCI. DEPT./ MONASH UNIVERSITY/ CLAYTON VICTORIA 3168 

AUSTRALIA P. J. TYERS/ COMPUTER APPLICATION U TECHNIQUES/ TELECOM AUST. RESEARCH LAB./ 770 BLACKBURN ROAD/ CLAYTON VICTORIA 3168 

AUSTRALIA C. S. WALLACE/ DEPT. OF COMP. SCI./ MONASH UNIVERSITY/ CLAYTON VICTORIA 3168 

AUSTRALIA C. BILLINGTON/ CSIRO/ BOX 160/ GLAYTON VICTORIA 3168/ 544-0633 

AUSTRALIA LEONARD SPYKER/ 6 CABARITA COURT/ KEYSBOROUGH VICTORIA 3173 

AUSTRALIA ATTENTION: W. WATTS/ INFORMATION & GRAPHIC SYSTEMS/ 23 PARKHURST DRIVE/ KNOXFIELD VICTORIA 3180 

AUSTRALIA HEATHER A. MACKAY/ 27 THE AVENUE/ WINDSOR VICTORIA 3181 

AUSTRALIA L. BORRETT/ 8/34 ELIZABETH STREET/ ELSTERNWICK VICTORIA 3185 

AUSTRALIA IAN J. CASEY/ 274 BLUFF ROAD/ SANDRINGHAM VICTORIA 3191 

AUSTRALIA ATTN: COMPUTERACC/ P.O. BOX 184/ NORTH BRISBANE QUEENSLAND 4001 

AUSTRALIA D. J. YATES/ BOTANY DEPT./ UNIV. OF QUEENSLAND/ ST. LUCIA QUEENSLAND 4067/ (07) 377-2070 

AUSTRALIA R. J. LONG/ 19 CEDARLEIGH ROAD/ KENMORE QUEENSLAND 4069 

AUSTRALIA F. L. IRVINE/ COMPUTER SERVICES UNIT/ DARLING DOWNS INSTITUTE OF A. E./ P.O. DARLING HEIGHTS/ TOOWOOMBA QUEENSLAND 4350 

AUSTRALIA G. FARR/ DEPTS. OF MATH AND COMPUTER SCIENCE/ MS76/ C.I.A.E./ ROCKHAMPTON QUEENSLAND 4700 

AUSTRALIA ATTN: THE MANAGER/ ADP SERVICES BRANCH/ PUBLIC BUILDINGS DEPT./ 15TH FLOOR S.A.C. VICTORIA SQ./ ADELAIDE S.A. 5000 

AUSTRALIA ATTN: THE DIRECTOR/ WEAPONS RESEARCH ESTABLISHMENT/ BOX 2151 GPO/ ADELAIDE S.A. 5001 

AUSTRALIA J. B. SOUTHCOTT/ DEPT. OF COMP. SCI./ UNIV. OF ADELAIDE/ GPO BOX 498/ ADELAIDE S.A. 5001 

AUSTRALIA KELVIN B. NICOLLE/ DEPT. OF COMPUTING SCIENCE/ UNIV. OF ADELAIDE/ G.P.O. BOX 498/ DELAIDE S.A. 5001/ (08) 223-4333 

AUSTRALIA A. C. BERESFORD/ 46 CROSS ROAD/ MYRTLE BANK S.A. 5064 

AUSTRALIA PETER G. PERRY/ SALISBURY C.A.E./ SMITH ROAD/ SALISBURY S.A. 5109 

AUSTRALIA ATTN: STATE ENERGY COMMISSION/ 365 WELLINGTON STREET/ PERTH W.A. 6000 

AUSTRALIA ATTN: ELIZABETH COMPUTER CENTRE/ 256-274 ELIZABETH STREET/ HOBART TASMANIA 7000 

AUSTRALIA ATTN: EDUCATION DEPT./ G.P.O BOX 169B/ HOBART TASMANIA 7001 

AUSTRALIA ATTN: PROGRAMMERS/ COMPUTING CENTRE/ UNIV. OF TASMANIA/ GPO BOX 252C/ HOBART TASMANIA 7001/ 23 0561 X660 

AUSTRALIA ATTN: INFORMATION SCIENCE CLUB/ DEPT. OF INFO. SCI./ UNIVERSITY OF TASMANIA/ SANDY BAY TASMANIA 7005 

AUSTRALIA JOHN PARRY/ 10 BROADWATERS PDE./ SANDY BAY TASMANIA 7005/ 25 2933 

AUSTRALIA NIGEL WILLIAMS/ 56 RIALANNAH RD/ MOUNT NELSON TASMANIA 7007 

AUSTRALIA A. J. W. HARRISON/ FAIRHAVEN/ AUSTINS FERRY/ HOBART TASMANIA 7011 

AUSTRIA MICHAEL ISTINGER/ SCHALTERLAGERND 54/ WIEN A-1000 

AUSTRIA WALTER BOLTZ/ DIE ERSTE OSTERREICHISCHE/ SPARKASSE (ABT. INFORMATIK)/ NEUTORGASSE 4/ WIEN A-1010/ 0222/66 16 37/290 

AUSTRIA HEINZ STEGBAUER/ HTL/ TECHNIKERSTR. 1-5/ MODLING A-2340 

AUSTRIA KARL PRAGERSTORFER/ GES. F. AUT. SYSTEME/ RAINERSTRASSE 23A/4/ LINZ A-4020 

BELGIUM PIERRE VAN NYPELSTEER/ UNIVERSITE LIBRE DE BRUXELLES/ AVENUE ROOSEVELT 50-CP181/ BRUXELLES B-1050 

BELGIUM ATTN: GERBER SCIENTIFIC EUROPE S.A./ RUE E. STEENO 27/ BRUXELLES B-1160 

BELGIUM ALAIN PIROTTE/ MBLE/RESEARCH LABORATORY/ AVENUE VAN BECELAERE 2/ BRUXELLES B-1170/ 673.41.90/ 673.41.99 

BELGIUM RONALD J. FARMERY/ KLEISTRAAT 31/ BORCHTLOMBEEK B-1761 

BELGIUM P. VERBAETEN/ TOEGEPASTE WISKUNDE EN PROGRAMMATIE/ KATHOLIEKE UNIV. LEUVEN/ CELESTIJNENLAAN 200-A/ HEVERLEE -LEUVEN B-3030 

BRAZIL PIERRE J. LAVELLE/ RUA POMPEU LOUREIRO NO 120 APT 602/ RIO DE JANEIRO COPACABANA 22061/ (021) 236.41.81 

BRAZIL GASTON H. GONNET/ DEPTO DE INFORMATICA P.U.C./ RUA M. DE SAO VICENTE 209/ RIO DE JANEIRO 22453 

CANADA PETER GROGONO/ 73 ROXTON CRESCENT/ MONTREAL WEST QUEBEC/ (514) 879-4251 (DAY) 

CANADA STUART LYNNE/ 315A EVERGREEN DR./ PORT MOODY B.C./ (604) 939-2757 

CANADA JACK DODDS/ 341/ BEDFORD INSTITUTE OF OCEANOGRAPHY/ P.O. BOX 1006/ DARTMOUTH N.SCOTIA B2Y 4A2 

CANADA D. G. BURNLEY/ COMPTROLLERS - I.U.C./ ROOM 001/ UNIV. OF NEW BRUNSWICK/ FREDERICTON N.B. E3B 5A3 

CANADA JEAN BOISVERT/ SERVICE INFORMATIQUE/ UNIVERSITE DU QUEBEC A RIMOUSKI/ 300 URSULINES/ RIMOUSIKI QUEBEC G5L 3A1/ (418) 724-1454 

CANADA WERNER FERCH/ 2300 ST. MATHIEU #1401/ MONTREAL QUEBEC HEH 2J8/ (514) 932-0256 

CANADA M. MICHEL COURCHESNE/ 1147 VALADE/ MONTREAL QUEBEC H1G 3S5/ (514) 324-5694/ (514) 281-8362 

CANADA MICHEL LOUIS-SEIZE/ HYDRO-QUEBEC/ 75 OUEST DORCHESTER/ MONTREAL QUEBEC H2Z 1A4/ (514) 285-1711 X8827 

CANADA PIERRE DESJARDINS/ INFORMATIQUE/ UNIVERSITE DE MONTREAL/ C.P. 6128 SUCC "A"/ MONTREAL QUEBEC H3C 3J7/ (514) 343-7662 

CANADA GUY LAPALME/ DEPT. D' INFORMATIQUE/ UNIVERSITE DE MONTREAL/ C.P. 6128 / SUCC "A"/ MONTREAL QUEBEC H3C 3J7/ (514) 343-7382 

CANADA LUC LAVOIE/ DEPT. I. R. 0./ UNIVERSITE DE MONTREAL/ C.P. 6128 SUCCURSALE A/ MONTREAL QUEBEC H3C 3J7/ (514) 737-3700 

CANADA YVES MENARD/ INFORMATIQUE/ UNIVERSITE DU QUEBEC A MONTREAL/ B.P. 8888/ MONTREAL QUEBEC H3C 3P8/ (514) 288-4948 

CANADA MARY SUTTON/ A.E.S. DATA LTD./ 570 RUE MCCAFFREY/ MONTREAL QUEBEC H4T INI/ (514) 341-5430 X307 

CANADA GEORGE MACK/ ENGINEERING DEPT./ CENTRAL DYNAMICS LTD./ 147 HYMUS BLVD./ POINTE CLAIRE QUEBEC H9R 1G1/ (514) 697-0810 

CANADA PETER ROWLEY/ 178 BRAEBROOK AVE/ POINTE CLAIRE QUEBEC H9R 1T9/ (514) 697-1898 

CANADA R. M. YOUNG/ GAATS 2 PROJECT OFFICE/ ATC SIMULATION CENTRE/ TRANSPORT CANADA/ 45 SACRE COEUR BLVD./ HULL QUEBEC J8X 1C6 

(819) 997-3888 

CANADA GENE MYLES/ 248 BOURGEAU CR. S./ AYLMER QUEBEC J9H 6K2/ (819) 684-8651 

CANADA G. X. AMEY/ WGI CORP./ RR 2/ ALMONTE ONTARIO KOA 1A0/ (613) 256-1338 

CANADA ROBERT L. FILLMORE/ R.R. 2/ OSGOODE ONTARIO KOA 2W0/ (613) 821-2216 

CANADA KENNETH G. SMITH/ BOX 193 - 115 PINE STREET/ STITTSVILLE ONTARIO KOA 3G0/ (613) 596-5217 

CANADA DAVID WARD/ DEPT OF EE - COMPUTER GRAPHICS/ BLDG 50/ NATIONAL RESEARCH COUNCIL/ OTTAWA ONTARIO K1A 0R6 

CANADA W. BRUCE FOULKES/ 2719 NORBERRY CR./ OTTAWA ONTARIO K1V 6N3/ (613) 746-4353 

CANADA DAVID J. HARRISON/ HARRISON WILLIAMS AND ASSOCIATES/ 1085 CAHILL DR. W/ OTTAWA ONTARIO K1V 9J1/ (613) 521-6812 

CANADA ATTENTION: DONALD LINDSAY/ DYNALOGIC CORPORATION LIMITED/ 141 BENTLEY AVENUE/ OTTAWA ONTARIO K2E 6T7/ (613) 226-1383 

CANADA R. T. MOORE/ PRIOR DATA SERVICES/ 16 CREDIT UNION WAY - SUITE 301/ NEPEAN ONTARIO K2H 8R6/ (613) 820-7235 

CANADA LUCIEN POTVIN/ CANADIAN MARCONI COMPANY/ 1150 MORRISON DRIVE/ OTTAWA ONTARIO K2H 8S9/ (613) 820-9760 

CANADA A. SEWARDS/ 34 SELWYN CRES./ KANATA ONTARIO K2K 1N8/ (613) 592-5512 

CANADA KEN LEESE/ MOBIUS SOFTWARE LIMITED/ 251 COOPER STREET/ OTTAWA ONTARIO K2P 0G2/ (613) 238-4727 

CANADA ATTN: REFERENCE ROOM/ COMPUTING AND INF. SCI./ QUEEN'S UNIVERSITY/ KINGSTON ONTARIO K7L 3N6 

CANADA ROGER RATHBUN/ COMPUTING CENTRE/ QUEEN'S UNIV./ KINGSTON ONTARIO K7L 3N6/ (613) 547-3273 

CANADA R. D. TENNENT/ DEPT. OF COMPUTING AND INFORMATION SC*/ QUEEN'S UNIVERSITY/ KINGSTON ONTARIO K7L 3N6/ (613) 547-2645 

CANADA THOMAS MACKENZIE/ 270A ESTHER ST./ PEMBROKE ONTARIO K8A 3C5 

CANADA F. R. SKILTON/ COMPUTING CENTRE/ BROCK UNIVERSITY/ ST. CATHERINES ONTARIO L2S 3A1/ (416) 688-2533 

CANADA ROBERT WILSON/ COMSHARE LTD/ 2 INDELL LANE/ BRAMALEA ONTARIO L6T 3Y3/ (416) 791-2525 

CANADA H. RISTITS/ ALLIED ELECTRONICS CO./ 2121 FARNAM PLACE/ BURLINGTON ONTARIO L7P 1W9/ (416) 335-2801 

CANADA ALLAN LEECHAN/ ACADEMIC COMPUTING SERVICES/ MCMASTER UNIVERSITY/ HAMILTON ONTARIO L8S 4K1/ (416) 525-9140 X4702 

CANADA N. SOLNTSEFF/ DEPT. OF APPLIED MATH./ MCMASTER UNIVERSITY/ HAMILTON ONTARIO L8S 4K1/ (416) 525-9140 X4689 

CANADA J. W. BAKER/ 73 SHIER DR./ SCARBOROUGH ONTARIO M1J 2T1/ (416) 446-4751 

CANADA MIKE WARDALE/ HUNTEC ('70) LTD./ 25 HOWDEN ROAD/ SCARBOROUGH ONTARIO MIR 5A6/ (416) 751-8055 

CANADA C. J. WILLIAMS/ INFOPRO LTD/ 9 CLINTWOOD PLACE/ DON MILLS ONTARIO M3A 1M3/ (416) 449-1510 

CANADA BRUCE DAVIDSON/ DEPT. 806/ IBM CANADA LABORATORY/ 1150 EGLINTON AVE. EAST/ DON MILLS ONTARIO M3C 1H7/ (416) 443-3162 

CANADA PEDRO BARROS/ OVAAC8 INTERNATIONAL INC/ 4800 DUFFERIN ST/ DOWNSVIEW ONTARIO M3H 5S9/ (416) 661-5088/ (416) 661-8869 

CANADA CHARLES A. ROYNTON/ 18 MILLWOOD RD APT 3/ TORONTO ONTARIO M4S 1J7/ (416) 487-7091 

CANADA ROBERT J. ENNS/ BOX 808/ FOREST ONTARIO NON 1J0/ (519) 873-2529 

CANADA RON NORMAN/ 109 HARCOURT CR./ KITCHNER ONTARIO N2C 2E0 

CANADA PAUL J. MOTZ/ KITCHENER-WATERLOO RECORD/ 225 FAIRWAY ROAD/ KITCHENER ONTARIO N2G 4E5/ (519) 579-2231 

CANADA F. A. CELLINI/ NCR CANADA LTD./ 580 WEBSTER ST. N/ WATERLOO ONTARIO N2J 4G5/ (519) 884-1710 X196 

CANADA F. D. BOSWELL/ COMPUTER SYSTEMS GROUP/ UNIV. OF WATERLOO/ WATERLOO ONTARIO N2L 3G1/ (519) 885-1211 

CANADA K. HARRISON/ DEPT. OF COMPUTING SERVICES/ UNIV. OF WATERLOO/ WATERLOO ONTARIO N2L 3G1/ (519) 885-1211 

CANADA JAMES A. SMITH/ DEPT. OF COMPUTER SCIENCE/ UNIV. OF WATERLOO/ WATERLOO ONTARIO N2L 3G1/ (519) 885-1211 X2681 

CANADA DAVID R. BROWN/ CANTERBURY COLLEGE/ CRANMER HOUSE/ UNIV. OF WINDSOR/ WINDSOR ONTARIO N9B 3P4/ (519) 256-8866 

CANADA NORMAN DIMOCK/ 10 EDMONTON ST. SUITE 409/ WINNIPEG MANITOBA R3C 1P7 

CANADA RICHARD GORDON/ COMPUTER MEDICINE S108/ UNIV. OF MANITOBA/ 753 MCDERMOT AVE./ WINNIPEG MANITOBA R3E 0W3 

CANADA DAVID L. COLE/ 2161 SCARTH ST./ REGINA SASK. S4P 2H8/ (306) 565-3949 

CANADA ROBERT D. NELL/ RESEARCH & PLANNING/ SASK COMP/ 2161 SCARTH ST./ REGINA SASK. S4P 2H8/ (306) 565-3951 

CANADA ROBERT N. KAVANAGH/ UNIV. OF SASKATCHEWAN/ SASKATOON SASK. S7N OWO/ (306) 343-2638 

CANADA CARL RICHARDS/ 403-635 57TH AVE SW/ CALGARY ALBERTA T2V OH5/ (403) 253-4057 

CANADA ATTN: LIBRARY/ PERIODICALS SECTION/ UNIVERSITY OF ALBERTA/ EDMONTON ALBERTA T6G 2J8 

CANADA BASIL MEDDINGS/ 6508-127TH STREET/ EDMONTON ALBERTA T6H 3X1/ (403; 434-36/8 

CANADA ATTN: BETA SYSTEMS LTD./ 1760 KINGSWAY AVE./ PORT COQUITLAM B.C. V3C 1S5/ (604) 687-1142 

CANADA KTM WTLLTAMS/ S1JTTR 301/ VALLEY SOFTWARE TNC/ 7R18 KTH ST./ ri^marv n.r. v?v /,vm/ ( hn/, > ^/,_Q7/,i 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 22 



V3T 1Y8 CANADA BARRY DASHER/ DYNAMIC CONTROL SYSTEMS LTD./ 13662 104A AVENUE SUITE 204/ SURREY B.C. V3T 1Y8/ (604) 585-0655 

V5A 1A6 CANADA DAVE STEVENS/ 1080 SHERLOCK AVE./ BURNABY B.C. V5A 1A6/ (604) 298-9255 

V5A 1S6 CANADA ROGER TOREN/ COMPUTING CENTRE/ SIMON FRASER UNIV./ BURNABY B.C. V5A 1S6/ (604) 291-4632 

V6E 1P5 CANADA DAVID GREER/ 108-1270 BURNABY ST./ VANCOUVER B.C. V6E 1P5/ (604) 688-3993 

V6H 1K8 CANADA DAVID HARRIS/ 1396 W. 11TH AVE. #7/ VANCOUVER B.C. V6H 1K8 

V6P 5S2 CANADA CHARLES THOMPSON/ 7339 W. BOULEVARD/ VANCOUVER B.C. V6P 5S2/ (604) 261-6702 

V6T 1W5 CANADA BRUCE JOLLIFFE/ COMPUTING CENTRE/ UNIV. OF BRITISH COLUMBIA/ VANCOUVER B.C. V6T 1W5/ (604) 228-3938 

V6T 1W5 CANADA VINCENT MANIS/ DEPT. OF COMP. SCI./ UNIV. OF BRITISH COLUMBIA/ VANCOUVER B.C. V6T 1W5/ (604) 228-6537 

V7R 4L6 CANADA D. E. SHAW/ 4371 PATTERDALE DRIVE/ N.VANCOUVER B.C. V7R 4L6/ (604) 988-2181 

V8W 2Y2 CANADA FRANK RUSKEY/ DEPT. OF MATH/ UNIV. OF VICTORIA/ P.O. BOX 1700/ VICTORIA B.C. V8W 2Y2/ (604) 477-6911 

95112 CANADA DAVID FISH/ 1042 CALUMET CT/ SAN JOSE CA 95112/ (408) 297-9334 

COLOMBIA J. C. ARANGO/ EMPAQUES/ APARTADOAEREO 1189/ MEDELLIN/ 770355 

DK-1606 DENMARK JAN HOJLUND NIELSEN/ BC NORDISKBROWNBOVERI A/S/ VESTER FARIMAGSGADE 7/ COPENHAGEN V DK-1606/ 45 1 156210 X374 

DK-2000 DENMARK ROBERT TISCHER/ INFOTEKNIK/ SDR. FASANVEJ 49/ COPENHAGEN F DK-2000 

DK-2500 DENMARK JAN LAUGESEN/ I/S DATACENTRALEN AF 1959/ RETORTVEJ 6/ VALBY DK-2500/ (01) 46 81 22 

DK-2800 DENMARK PER GOEBEL/ RAEVEHOJVEJ 36-1204/ LYNGBY DK-2800 

DK-3600 DENMARK MOHENS GLAD/ STRANDHOJEN 25/ FREDERIKSSUND DK-3600/ 03-313959 

DK-8000 DENMARK ATTN: RECAU COPY 1/ NY MUNKEGADE/ AARHUS C DK-8000/ 06-128355 

DK-8000 DENMARK ATTN: RECAU COPY 2/ NY MUNKEGADE/ AARHUS C. DK-8000/ 06-12 83 55 

DK-8200 DENMARK PEDER NEDEBOL NIELSEN/ LABORATORIET FOR GEOFYSIK/ FINLANDSGADE 6-8/ AARHUS N DK-8200 

SF-00250 FINLAND ATTN: DEPT. OF COMPUTER SCIENCE/ UNIVERSITY OF HELSINKI/ TUKHOLMANKATU 2/ HELSINKI 25 SF-00250 

SF-00400 FINLAND HEIKKI KASKELMA/ SANTAVVORENTIE IB 18/ HELSINKI SF-00400/ 358 644306 

SF-20500 FINLAND MARKKU SUNI/ COMPUTING CENTRE/ UNIVERSITY OF TURKU/ TURKU 50 SF-20500/ 912-335599 X280 

SF-33500 FINLAND JUHANI JAMIA/ ILMARINKATU 42 A 15/ TRE 50 SF-33500 

SF-33720 FINLAND REIJO MIEMINEN/ OPISKELIJANK. 4 E 275/ TRE 72 SF-33720 

SF-33900 FINLAND PERTTI YLINEN/ HARMALANKATU 32 B 5/ TAMPERE 90 SF-33900 

F-78150 FRANCE ATTN: IRIA BIBLIOTHEQUE/ B.P. NO. 205/ LE CHESNAY F-78150 

F-78150 FRANCE ATTN: IRIA / BIBLIOTHEQUE/ BP 105/ LE CHESNAY F-78150 

F-91710 FRANCE R. J. CROUZILLES/ CENTRE DE RECHERCHES DU BOUCHET/ SNPE/ BP NO 2/ VERT-LE-PETIT F-91710 

F-92410 FRANCE GERALD MASPERD/ 5 CHEMIN DES CLOSEAUX/ VILLE D'AURAY F-92410 

D-1000 GERMANY ALBRECHT BIEDL/ INSTITUT FUR SOFTWARE/ DV-GRUNDAUSBILDUNG/ TECHNISCHE UNIVERSITAT BERLIN / VSH 5/ OTTO-SUHR-ALLEE 18/20 

BERLIN 10 D-1000/ (030) 314-4891 

D-1000 GERMANY MICHAEL TEPPER/ LIMASTR. 1/ BERLIN 37 D-1000/ (030) 801 21 52 

D-1000 GERMANY LOTHAR HAMMERL/ HORNSTR 12/ BERLIN 61 D-1000/ 030 786 2235 

D-2000 GERMANY MANUEL MALL/ BISMARCKSTR. 44/ HAMBURG 19 D-2000 

D-2000 GERMANY ROLF SCHUMACHER/ SCS GMBH/ OEHLECKERRING 40/ HAMBURG 62 D-2000 

D-2800 GERMANY JAN KEISER/ EISLEBENER STR. 37/ BREMEN 41 D-2800/ 0421 / 538 2834 (WORK) 

D-3000 GERMANY ALMUTH FISCHER/ REGIONALES RECHENZENTRUM/ WUNSTORFER STR. 14/ HANNOVER 91 D-3000 

D-4790 GERMANY MICHAEL KALICINSKY/ BIBLIOTHEK ES/ NIXDORF COMPUTER AG/ FUERSTENALLEE/ PADERBORN D-4790/ 05251-200439 

D-4790 GERMANY ERNST WALTER RASCHNER/ EE2/ ENTWICKLUNG ELEKTRONIK/ FUERSTENALLEE 7/ PADERBORN D-4790 

D-5000 GERMANY DIETRICH KREKEL/ RECHEN ZENTRUM/ UNIVERSITAT ZU KOLN/ ROBERT KOCH STR 10/ KOLN 41 D-5000/ 0221/478/5587 

D-5100 GERMANY W. J. GRODDE/ PDV IM IRT/ RWTH - AACHEN/ SOMMERFELD STR. 54 - BLOCK 54/ AACHEN D-5100/ (0241) 80 7490 

D-6236 GERMANY GERHARD BLANKE/ POSTBOX 5107/ ESCHBORN D-6236/ (06198) 32448 

D-6450 GERMANY VOLKER ASSMUS/ INST. FUER WIRTSCHAFTSINFORMATIK/ TH-FONTANE-STRASSE 20/ HANAU 1 D-6450 

D-7000 GERMANY ATTN: BIBLIOTHEK/ INSTITUT FUER INFORMATIK/ UNIVERSITAET STUTTGART/ AZENBERGSTRASSE 12/ STUTTGART 1 D-7000/ 0711 2078-341 

D-7000 GERMANY WALTER WEHINGER/ LANGUAGES AND PROCESSORS GROUP/ RECHENZENTRUM/ UNIVERSITAT STUTTGART/ PFAFFENWALDRING 64/ STUTTGART 80 D-7000 

0711-784 2507 

D-7000 GERMANY GERHARD RECHEL/ RECHENZENTRUM/ UNIVERSITAET STUTTGART/ PFAFFENWALDRING 64/ STUTTGART-80 D-7000 

D-7406 GERMANY ATTN: BIBLIOTHEK/ ZENTRUM FUR DATAGAVERARBEITUNG/ UNIVERSITAT TUBINGEN/ TUBINGEN 1 D-7406 

D-7500 GERMAIN LUCIEN FEIEREISEN/ HAID-&-NEU-STR. 16 / W 81/ KARLSRUHE 1 D-7500 

D-8000 GERMANY ATTN: GESELLSHAFT FUER SOFTWARE-ENCIN*/ KARESTR. 60/1/ MUENCHEN 2 D-8000/ (089) 555 234 

D-8000 GERMANY ERWIN ZEDNIK/ ZIEBLANDSTR. 13/ MUENCHEN 40 D-8000/ 289961 

D-8000 GERMANY COLIN CLIFFORD/ NATIONAL SEMICONDUCTOR GMBH/ 808 FUERSTENFELOBRUCK/ MUNCHEN D-8000 

D-8000 GERMANY GEORGE BROOKE/ GAUTINGERSTRASSK 10/ MUNICH 71 D-8000/ (081) 755-3647 

D-8000 GERMANY MANFRED SOMMER/ DEPARTMENT D AP GE/ SIEMENS AG/ OTTOHAHN RING 6/ MUNICH 83 D-8000/ 089-722-61276 

D-8012 GERMANY BERNHARD H. BEITINGER/ INDUSTRIEANLAGEN-BETRIEBSGESELLSCHAFT*/ EINSTEINSTRASSE/ OTTOBRUN D-8012/ 089/60082363 

D-8046 GERMANY ROBERT LATHE/ INSTITUT FUER PLASMAPHYSIK/ GARCHING D-8046/ 089-3299308 

D-8520 GERMANY G. GOERZ/ RRZE/ UNIVERSITAET ERLANGEN-NURNBERG/ MARTENSSTR. 1/ ERLANGEN D-8520/ 09131/85 7410 

411 001 INDIA J. G. KRISHNAYA/ SYSTEMS RESEARCH INSTITUTE/ 6 PARVATI VILLA ROAD/ PUNE 411 001 

560 003 INDIA M. A. SRIDHAR/ 53 GAYATHRI DEVI PARK EXTN./ BANGALORE 560 003/ 31011 

560 012 INDIA SUNDAR RAJARATNAM/ CENTRE FOR THEORETICAL STUDIES/ INDIAN INSTITUTE OF SCIENCE/ BANGALORE 560 012/ 34411 X266 & X268 

560 020 INDIA A. S. BALASUBRAMANYAM/ SUBRAMANYAMSWAMY TEMPLE STREET/ KIMAR PARK WEST - NO. 6 II FLOOR/ BANGALORE 20 BANGALORE 560 020 

ISRAEL RUTH WEINBERG/ COMPUTATION CENTER/ HEBREW UNIVERSITY OF JERUSALEM/ JERUSALEM/ 02-32011/280 

49512 ISRAEL SAM LIBAI/ SDS COMPUTERS LTD./ P.O. BOX 22/ PETACH-TIKVA 49512/ 53054 

1-20000 ITALY GIOVANNI DEGLI ANTONI/ ISTITUTO DI CIBERNETICA/ VIA VIOTTI 5/ MILANO 1-20000 

1-20010 ITALY ANTONIO CICU/ HONEYWELL INFORMATION SYSTEMS - ITALY/ PREGNANA MILANESE/ MILANO 1-20010/ 02/ 93094 11 

1-20133 ITALY SIANLUIGI CASTELLI/ INSTITUTO DI CIBERNETICA/ VIA VIOTTI 5/ MILANO 1-20133 

1-50100 ITALY ATTN: INSTITUTO NAZIONALE DI OTTICA/ FIRENZE 1-50100 

177 JAPAN TOSHINORI MAENO/ 1-43 SEKI-MACHI/ NERIMA-KU TOKYO 177/ (03) 726-111 X3298 

244 JAPAN S. TAKAGI/ HIRADO-CHO 1 - TOTSUKA-KU/ YOKOHAMA-SHI KANAGAWA 244 

361 JAPAN TOSHIHIKO FUJIWARA/ NIPPON MINI-COMPUTER CO./ 2165 MOCHIDA/ GYODA CITY SAITAMA 361/ 0485-54-7161 

JAPAN NOBUKI TOKURA/ DEPT. OF INFORMATION AND COMPUTER SCI*/ OSAKA UNIVERSITY/ 1-1 MACHIKANEYAMA/ TOKONAKA 560/ 06 (856) 1151 X3245 

JAPAN A. E. TADASHI/ FAC. OF ENGINEERING (2 RUI)/ HIROSHIMA UNIVERSITY/ SENDA-MACHI 3-8-2/ HIROSHIMA 730 

JAPAN KAZUO USHIJIMA/ DEPT OF COMP. SCI. AND COMM. ENGR./ KYUSHU UNIVERSITY/ 36 HAKOZAKI/ HIGASHI-KU FUKUOKA 812/ 092-641-1101 X3185 

MALAYSIA LAURIE DAVIES VALLENTINE/ JALAN PARRY/ 10 FLOOR ORIENTAL PLAZA/ KUALA LUMPUR 04-01 

MEXICO JOSE I. KAZA/ DEPARTAMENTO DE SISTEMAS/ UNIV. AUTONOMA METROPOLITANA/ P.O. BOX 16-306/ MEXICO D.F./ 382-5000 X215 

MEXICO ATTN: IIMAS BIBLIOTECA/ UNIVERSIDAD NACIONAL AUTONAMA DE MEXI*/ APDO. POSTAL 20-276/ MEXICO 20 D.F./ (905) 548-5465 

MEXICO JOSE R. CEN ZUBIETA/ UNIDAD DE COMPUTO/ EL COLEGIO DE MEXICO/ CAMINO AL AJUSCO #20/ MEXICO 20 D.F./ 5-68-60-33 X393 

NEW ZEALAND JOHN RAE/ MEDICAL LABORATORY/ P.O. BOX 4120/ AUCKLAND/ 778-339 X49 

NEW ZEALAND ATTN: NEW ZEALAND MICROCOMPUTER CLUB/ C/O SECRETARY/ P.O. BOX 6210/ AUCKLAND 1 

NEW ZEALAND ATTN: PROCESSOR ENTERPRISES LTD./ P.O. BOX 31-261/ AUCKLAND 9 

NEW ZEALAND ATTN: THE DIRECTOR/ COMPUTER CENTRE/ UNIVERSITY OF CANTERBURY/ PRIVATE BAG/ CHRISTCHURCH 

NEW ZEALAND R. B. ALEXANDER/ COMPUTING CENTRE/ UNI. OF OTAGO/ BOX 56/ DUNEDIN 

NEW ZEALAND ATTN: JOHN G. CLEARY/ SYSTEMS & PROGRAMS LTD./ P.O. BOX 30-606/ LOWER HUTT 

NEW ZEALAND W. J. MALTHUS/ 29B HAIG STREET/ LOWER HUTT 

NEW ZEALAND M. H. VERHAART/ 25 CORNWALL STREET/ MASTERTON/ 4805 

NEW ZEALAND ATTN: DOCUMENTATION OFFICER/ COMPUTER CENTRE/ MASSEY UNIVERSITY/ PALMERSTON NORTH 

NEW ZEALAND C. R. BOSWELL/ COMPUTING SERVICES CENTRE/ VICTORIA UNIV. OF WELLINGTON/ PRIVATE BAG/ WELLINGTON/ 721-000 X703 

NORWAY FINN-MOGENS S. HAUGI/ ANATOMISK INSTITUTT/ UNIVERSITY OF OSLO/ KARL JOHANSGT. 47/ OSLO 1 

NORWAY IVAR LABERG/ COMPUTER DEPARTMENT/ UNIVERSITY HOSPITAL OSLO/ RIKSHOSPITALET/ OSLO 1/ (471) 20 10 50 

NORWAY EGIL HEISTAD/ NORWEGIAN DEFENCE RESEARCH ESTABLISHM*/ BOX 25/ KJELLER N-2007 

NORWAY MORTEN MOEN/ SKYTTERUN 19A/ STAVERN N-3290/ 034-98167 

NORWAY COLIN R. BLANCHARD/ KONGSBERG INGENIORHOGSKOLE/ KONGSBERG N-3600/ 732330 

NORWAY FRODE SANDVIK/ ELAB/ TRONDHEIM-NTH N-7034/ (047) 75-92669 

PERU GUSTAVO HUNG/ LOS GERANIOS 296/ LIMA 14 

POLAND MICHAL IGLEWSKI/ INSTITUTE OF COMPUTER SCIENCE/ POLISH ACADEMY OF SCIENCES/ P.O. BOX 22/ WARSZAWA PKIN 00901/ 200211 X2225 

SOUTH AFRICA I. A. MOULTRIE/ BOX 68882/ BYRANSTON TRANSVAAL/ 706-4053 

SOUTH AFRICA E. M. EHLERS/ PU FOR CHE/ BOX 536/ POTCHEFSTROOM 

SOUTH AFRICA ATTN: KENTRON (PTY) LTD/ PRIVATE BAG X336/ PRETORIA 0001/ 74 6041 

SOUTH AFRICA C. H. HOOGENCIOORN/ NATIONAL INST FOR AERO AND SYSTEMS TE*/ P.O. BOX 395/ PRETORIA 0001/ 74 9111 X2805 

SOUTH AFRICA ATTENTION: TONY CASTLEMAN/ PRO-DATA (PTY) LTD./ P.O. BOX 150/ BENONI 1500/ 826-5111/2/3 

SOUTH AFRICA A. M. DINKELACKER/ 11 N'GANE DIAZ AVE./ EDENVALE 1610/ 609-5582 (HOME) 

SOUTH AFRICA F. G. BOTHA/ ARTHUR ANDERSON & CO./ P.O. BOX 3652/ JOHANNESBURG 2000/ 21 1381 

SOUTH AFRICA J. A. LEWIS/ BROWN BOVERI S.A. (PTY) LTD/ P.O. BOX 1500/ JOHANNESBURG 2000/ 836-5791 

SOUTH AFRICA G. PEREZ/ P.O. BOX 3714/ JOHANNESBURG 2000/ 28 2600 

SOUTH AFRICA ATTN: PERIODICALS LIBRARY (MATHS)/ UNIV. OF THE WITWATERSRAND/ JOHANNESBURG 2001/ 39-4011 

SOUTH AFRICA ATTN: SOFTWARE MANAGER/ ASSOCIATED HOUSE/ MESSINA ELECTRONIC DEVELOPMENT/ 150 CAROLINE STREET/ BRIXTON 2092 

SOUTH AFRICA EDWARD BRITTAIN/ P.O. BOX 44210/ LINDEN 2104/ (Oil) 467180 

SOUTH AFRICA B. STRONG/ CONTROL DATA/ P.O. BOX 78105/ SANDTON 2146/ 783-5225 

SOUTH AFRICA JEREMY MCLUCKIE/ 10 HELLESPONT COURT/ 1 BIRT STREET/ SYDENHAM 2192/ 845-1804 

SOUTH AFRICA BRIAN T. STACEY/ B301 COUNTRY LANE/ 71 DORSET ROAD/ PARKWOOD 2193/ (Oil) 47-2440 

SOUTH AFRICA NEIL SARNAK/ 3 KOMATIE ROAD / EMMARENTIA/ JOHANNESBURG 2195/ 46 8432 

SOUTH AFRICA J. E. RADUE/ COMPUTER SCIENCE DEPT./ UNIV. OF NATAL/ DURBAN 4001/ 352461 

SOUTH AFRICA C. G. URMSON/ 100 SAN LEANDRO/ 80 CURRY ROAD/ DURBAN 4001/ 21-5972 

SOUTH AFRICA PETER WENTWORTH/ COMPUTER SCIENCE DEPT./ THE UNIVERSITY/ PORT ELIZABETH 6000/ 529911 

SOUTH AFRICA REG DODDS/ DEPT. OF COMPUTER SCIENCE/ THE UNIVERSITY/ STELLENBOSCH 7600 

SWEDEN JOHN TIMOTHY FRANKLIN/ KRUKMAKERGATTAN #6/ STOCKHOLM S-100 00 

SWEDEN CARL CRAFOORD/ INST. FOR METALLOGRAFI/ KTH/ FACK/ STOCKHOLM S-100 44/ (08) 787-8350 

SWEDEN ATTENTION: K. I. LARSSON/ MILITARY ELECTRONICS DIVISION/ SATT ELEKTRONIK AKTIEBOLAG/ BOX 32006/ STOCKHOLM S-126 11 

SWEDEN BJORN GIMLE/ CONTROL DATA SWEDEN AB/ BOX 42107/ STOCKHOLM 42 S-126 12/ 08 - 840200 

SWEDEN FOLKE ANDERSSON/ FACK/ SN. RADIO AB/ SPANGA S-163 00/ (08) 752-1474 

SWEDEN ATTN: DATEMA AB/ BOX 1056/ SOLNA S-171 21 

SWEDEN NEIL T. KEANE/ SYSTEM DEVELOPMENT/ DATASAAB/ VEDDESTAVAAGEN 13/ JAARFAALLA S-175 86/ 08/36 28 00 

SWEDEN HANS NORDSTROM/ TINGVALLAVAGEN 7F/ MARSTA S-195 00 

SWEDEN AKE WIKSTROM/ DEPT. OF COMPUTER SCIENCES/ CHALMERS UNIV. OF TECHNOLOGY/ FACK/ GOTEBORG 5 S-402 20 

SWEDEN GUNNAR KARLSSON/ CHALMERSSATAN 27A F-4/ GOTEBORG S-411 35 

SWEDEN LARS Y. SVENSSON/ GNEJSVAGEN 3/ HJALTEBY S-440 74/ 031-671193 

SWEDEN ENGELBERT STORK/ AB DATAKONVERTERING/ TRAKTORGATAN 16/ KUNGALV S-442 00 

SWEDEN ARNE BORTEMARK/ DEPT OF COMPUTER SCIENCE/ LINKOPING UNIVERSITY/ FACK/ LINKOPING S-581 83/ 013/ 11 17 00 

SWEDEN STEN LJUNGKVIST/ AXEL SWARTLINGS GATA 10/ NORRKOPING S-603 78/ Oil - 10 80 00 (OFFICE)/ Oil - 17 02 10 (HOME) 



730 

812 

04-01 



N-2007 
N-3290 
N-3600 
N-7034 

00901 



0001 

0001 

1500 

1610 

2000 

2000 

2000 

2001 

2092 

2104 

2146 

2192 

2193 

2195 

4001 

4001 

6000 

7600 

S-100 00 

S-100 44 

S-126 11 

S-126 12 

S-163 00 

S-171 21 

S-175 86 

S-195 00 

S-402 20 

S-411 35 

S-440 74 

S-442 00 

S-581 83 

S-603 78 



PASCAL NEWS #15 



SEPTEMBER, 197 9 



PAGE 23 



S-751 02 

S-752 51 
S-981 01 
CH-1007 
CH-1204 
CH-1211 
CH-1216 
CH-2000 
CH-2560 
CH-8092 
CH-8304 



1007 MC 
1009 AJ 
1012 VT 
1183 AV 
2501 BD 
2651 VN 
2804 HS 
7323 BA 
7500 AE 
9700 AV 



AL3 6BL 
BA2 7 AY 
BN1 2GS 
BN1 9PT 
BNl 9QH 

BT36 8LF 
B15 2TT 
B4 7PB 
CB2 3QG 
CB5 8BA 

CM17 9NA 
EX4 4PU 
EX4 4QL 

GUI 4 80H 
GU7 2DP 
G12 8QQ 
HU6 7RX 
IP5 7RE 
KT1 2EE 
LAI 4YN 
LAI 4YW 
LEI 7RH 

LN12 1NQ 
L69 3BX 

MK43 OAL 
MK7 6AA 
Ml 7ED 
M13 9PL 
M21 1JF 
NE4 8EB 
NG7 2RD 
NN7 3.LJ 

NP44 1NX 
NR4 7TJ 

NW11 8DP 
0X2 6PE 

PE19 3LS 
PL4 8AA 
P09 2PE 
RG6 2AX 
RG6 2AX 
RG6 2BG 
SA2 8PP 
SE1 7NA 
SE1 9LU 

SE18 6PF 

SK11 6SR 
SK9 3BX 
SL6 1SL 

S022 4LD 
S09 5NH 
S09 5NH 

509 5NH 
ST5 5BG 

SW11 
SW7 2AZ 
SW7 2BX 
SW7 2BX 

510 2TN 
TS1 3BA 
UB8 3PH 

WC1 
WC1H OAH 
WC1H OPY 
WC2 
WDl ISA 
W14 OES 
YU-41000 
YU-61001 
YU-71000 



SWEDEN ATTN: COMPUTING CENTRE/ UPPSALA UNIVERSITY/ BOX 2103/ UPPSALA S-751 02/ 018-111330 

SWEDEN CLAES HOJENBERG/ AGRODATA AB/ GALBO B 53/ UPPSALA S-752 51/ 018-302853 

SWEDEN CHRISTER JUREN/ KIRUNA GEOPHYSICAL INST./ KIRUNA 1 S-981 01/ 0980 12240 

SWITZERLAND CHARLES RAPIN/ CHAIRE INFORMATIQUE APPLIQUEE DMA EPFL/ 61 AVENUE DE COUR/ LAUSANNE CH-1007/ (021) 27 31 05 

SWITZERLAND RAYMOND MOREL/ COLLEGE CALVIN/ 2-4 RUE TH.-DE-BEZE/ GENEVA CH-1204 

SWITZERLAND HERVE TIREFORD/ MOTOROLA INC./ 16 CHEMIN DE LA VOIE-CREUSE/ GENEVA 20 CH-1211/ 33-56-07 

SWITZERLAND MAURICE CALVERT/ I ATA/ P.O. BOX 160 / COINTRIN/ GENEVE CH-1216 

SWITZERLAND PIERRE-JEAN ERARD/ CENTRE DE CALCUL UNIVERSITAIRE/ CHANTEMERLE 20/ NEUCHATEL CH-2000 

SWITZERLAND JEAN LOUIS DECOSTER/ LYSS. STR. 21/ NICLAU CH-2560 

SWITZERLAND SVEND ERIK KNUDSEN/ INSTITUT FUER INFORMATIK/ ETH - ZENTRUM/ ZUERICH CH-8092/ (01) 32 62 11 X2217 

SWITZERLAND RAFAEL E. EGLOFF/ SPITZACKERSTRASSE 2/ WALLISELLEN CH-8304 

THE NETHERLANDS S. D. SWIERSTRA/ TECHNISCHE HOGESCHOOL TWENTE/ P.O. BOX 217/ ENSCHEDE/ 31-53-894441 

THE NETHERLANDS G. J. STAALMAN/ C/O COMPUTING CENTRE/ WAGENINGEN UNIV./ HOLLANDSEWEG 1 WAGENINGEN 

THE NETHERLANDS ATTN: LIBRARY/ CONTROL DATA B.V./ J. C. VAN MARKENLAAN 5/ RIJSW1JK/ 070-949344 

THE NETHERLANDS ANDREW S. TANENBAUM/ WISKUNDIG SEMINARIUM/ VRIJE UNIVERSITEIT/ POSTBUS 7161/ AMSTERDAM 1007 MC/ 020 548 24 10 

THE NETHERLANDS ATTN: BIBLIOTHEEK/ INSTITUUT KERNPHYSISCH-ONDERZOEK/ POSTBUS 4395/ AMSTERDAM 1009 AJ/ (020) 930951 

THE NETHERLANDS KWEE TJOE LIONG/ INSTITUUT ATW/ SPUISTR 210/ AMSTERDAM 1012 VT/ (020) 525-3862 OR 3864 

THE NETHERLANDS DICK VAN DEN BURG/ GETSCO/ PROF E. M. MEYERSLAAN 1/ AMSTELVEEN 1183 AV/ 020-473131 

THE NETHERLANDS H.J.J. DE GIER/ PROCESSING AND STATISTICS/ INST. TNO FOR MATHEMATICS INFORMATION/ P.O. BOX 297/ THE HAGUE 2501 BD 

THE NETHERLANDS P. J. VAN DER HOFF/ PIJPERSTRAAT 5/ BERKEL EN RODENRIJS 2651 VN 

THE NETHERLANDS NICO HOLLEBEEK/ GEERTRUIEDE HOEVE 19/ GOUDA 2804 HS 

THE NETHERLANDS ATTN: RIJKS COMPUTERCENTRUM/ FAUSTSTRAAT 1/ APELDOORN 7323 BA 

THE NETHERLANDS C. BRON/ DEPT. OF ELECTRICAL ENGINEERING/ TECHNISCHE HOGESCHOOL TWENTE/ POSTBUS 217/ ENSCHEDE 7500 AE/ (031) 53 894451 

THE NETHERLANDS HARM PAAS/ DEPT. OF SPACE RESEARCH/ UNIV. OF GRONINGEN/ P.O. BOX 800/ GRONINGEN 9700 AV/ 050-116662 

UNITED KINGDOM W. L. BLUNDELL/ AYLESBURY COLLEGE OF F.E./ OXFORD ROAD/ AYLESBURY BUCKS. 

UNITED KINGDOM ROBERT NEELY/ 27 CHILTERN ROAD/ HITCHIN HERTS 

UNITED KINGDOM ROGER I. TURNER/ 13 FIRST CROSS ROAD / TWICKENHAM/ MIDDLESEX ENGLAND/ 01-894 3243 

UNITED KINGDOM T. BAYUS/ MERTON TECHNICAL COLLEGE/ MORDEN PARK - LONDON ROAD/ MORDEN SURREY 

UNITED KINGDOM J. R. DOUGLAS/ OXFORD UNIV. COMPUTING SERVICE/ 13 DANBURY ROAD/ OXFORD ENGLAND 

UNITED KINGDOM RICHARD J.D. KIRKMAN/ DEPT. OF ATMOSPHERIC PHYSICS/ CLARENDON LABORATORY/ PARKS ROAD/ OXFORD ENGLAND 

UNITED KINGDOM ALAN BLANNIN/ EUROPEAN SOFTWARE ENGINEERING/ DIGITAL EQUIPMENT CO./ FOUNTAIN HOUSE / BUTTS CENTRIC/ READING ENGLAND 

UNITED KINGDOM D. J. ALLERTON/ MARCONI SPACE & DEFENCE SYSTEMS/ WARREN LANE/ STANMORE MIDDLESEX/ 01/ 954-2311 X23 

UNITED KINGDOM JEREMY KENAGHAN/ R.A.D.C./ INTERNATIONAL COMPUTERS LTD./ FAIRVIEW ROAD/ STEVENAGE HERTS/ STEVENAGE 56111 X252 

UNITED KINGDOM RICHARD ROSS-LANGLEY/ 1 FRANCIS AVENUE/ ST ALBANS AL3 6BL 

UNITED KINGDOM ATTN: THE INFORMATION OFFICER/ SWURCC/ UNIVERSITY OF BATH/ CLAVERTON DOWN BATH BA2 7AY 

UNITED KINGDOM ATTN: COMPUTER CENTRE/ BRIGHTON POLYTECHNIC/ BRIGHTON ENGLAND BN1 2GS 

UNITED KINGDOM P. COOKE/ SCHOOL OF ENGR AND APPL. SCIENCE/ UNIV. OF SUSSEX/ BRIGHTON ENGLAND BN1 9PT 

UNITED KINGDOM ATTN: COMPUTING CENTRE/ UNIVERSITY OF SUSSEX/ FALMER/ BRIGHTON SUSSEX BN1 9QH 

UNITED KINGDOM MAURICE 0' FLAHERTY/ 3 RICHMOND PARK EAST / GLENGORMLEY/ NEWTOWNABBEY N. IRELAND BT36 8LF 

UNITED KINGDOM KATHY LANG/ THE COMPUTER CENTRE/ UNIV. OF BIRMINGHAM/ ELMS ROAD / PO BOX 363/ BIRMINGHAM ENGLAND B15 2TT/ 021-472-1301 X2233 

UNITED KINGDOM M H ACKROYD/ ELEC ENGR DEPT/ SUMPNER BUILDING/ ASTON UNIVERSITY/ 19 COLESHILL STREET/ BIRMINGHAM ENGLAND B4 7PB/ 021-359-3611 X559 

UNITED KINGDOM PETER ROBINSON/ COMPUTER LABORATORY/ CAMBRIDGE UNIVERSITY/ CORN EXCHANGE STREET/ CAMBRIDGE ENGLAND CB2 3QG 

UNITED KINGDOM C. A. LANG/ SHAPE DATA LIMITED/ 5 JESUS LANE/ CAMBRIDGE ENGLAND CB5 8BA 

UNITED KINGDOM STEVE MOLES/ STANDARD TELECOMMUNICATION LABS./ LONDON ROAD/ HARLOW ESSEX CM17 9NA/ (0279) 29531 X345 

UNITED KINGDOM KEITH TIZZARD/ DEPT. OF M.S.O.R./ UNIV. OF EXETER/ STREATHAM COURT/ EXETER ENGLAND EX4 4PU 

UNITED KINGDOM J. A. CAMPBELL/ COMPUTER SCIENCE DEPT./ EXETER UNIV./ STOCKER ROAD/ EXETER ENGLAND EX4 4QL 

UNITED KINGDOM DAVID NEDLAND-SLATER/ 1 BUCKLAND CLOSE/ FARNBOROUGH HANTS GU14 80H/ 0252-43743 

UNITED KINGDOM NIGEL STEPHENS/ HODGSONITES/ CHARTERHOUSE/ GODALM1NG SURREY GU7 2DP/ (04868) 6393 

UNITED KINGDOM J. E. JEACOCKE/ DEPT. OF COMPUTING SCIENCE/ THE UNIVERSITY/ GLASGOW SCOTLAND G12 8QQ/ (041) 339-8855 X7458 

UNITED KINGDOM D. SPRIDGEON/ COMPUTER CENTRE/ THE UNIVERSITY/ HULL ENGLAND HU6 7RX 

UNITED KINGDOM B. CANTWELL/ DEPT R18.1.1/ P.O. RESEARCH STATION/ MARTLESHAM HEATH/ IPSWICH ENGLAND IP5 7RE/ 0473-642 581 

UNITED KINGDOM D. E. LAW/ COMPUTER UNIT/ KINGSTON POLYTECHNIC/ PENRHYN ROAD/ KINGSTON-UP-TH ENGLAND KT1 2EE 

UNITED KINGDOM BRIAN A. E. MEEKINGS/ DEPT. OF COMPUTER STUDIES/ UNIVERSITY OF LANCASTER/ BA1LRIGG/ LANCASTER ENGLAND LAI 4YN/ (0524) 65201 

UNITED KINGDOM K. M. JINKS/ COMPUTER SERVICES DEPARTMENT/ UNIV. OF LANCASTER/ LANCASTER ENGLAND LA] 4YW 

UNITED KINGDOM H. J. ROWE/ COMPUTER LABORATORY/ LEICESTER UNIVERSITY/ LEICESTER ENGLAND LEI 7RH/ LEIC. 50000 

UNITED KINGDOM S. TAYLOR-REED/ AUTOMATIONS DEPT/ VIKING GAS TERMINAL/ CONOCO LTD/ MABLETHORPE LINCS LN12 1NQ 

UNITED KINGDOM MARTIN D. BEER/ COMPUTER LABORATORY/ UNIVERSITY OF LIVERPOOL/ P.O. BOX 147/ LIVERPOOL ENGLAND L69 3BX 

UNITED KINGDOM C. G. WHITAKER/ CRANFIELD COMPUTER CENTER/ CRANFIELD INSTITUTE OF TECH./ CRANFIELD BEDFORD MK43 OAL 

UNITED KINGDOM M. A. BRAMER/ MATHEMATICS FACULTY/ THE OPEN UNIVERSITY/ MILTON KEYNES ENGLAND MK7 6AA 

UNITED KINGDOM J. TURNBULL/ NATIONAL COMPUTING CENTRE/ OXFORD ROAD/ MANCHESTER ENGLAND Ml 7ED/ 061 228 6333 

UNITED KINGDOM S. S. THAKKAR/ DEPT. OF COMP. SCI./ UNIVERSITY OF MANCHESTER/ OXFORD ROAD/ MANCHESTER ENGLAND Ml 3 9PL 

UNITED KINGDOM D. L. GRAY/ 2 CHURCHFIELD/ 8 EDGE LANE / CHORLTON-C-HARDY/ MANCHESTER ENGLAND M21 1JF 

UNITED KINGDOM K. HALEY/ 24 AXBRIDGE GARDENS / BENWELL/ NEWCASTLE-U-TY ENGLAND NE4 8EB 

UNITED KINGDOM A. D. HEYES/ DEPT. OF PSYCHOLOGY/ UNIV. OF NOTTINGHAM/ NOTTINGHAM ENGLAND NG7 2RD 

UNITED KINGDOM. SILVIA SUS.SMAN/ 5 MANOR WALK / NETHER HEYFORD/ NORTHANTS ENGLAND NN7 3LJ/ WEEDON 40465 

UNITED KINGDOM ATTN: W. J. TAYLOR/ GWENT HOUSE/ FERRANTI COMPUTER SYSTEMS LTD./ GWENT SQUARE - CWMBRAN/ GWENT ENGLAND Nrnt iiMa 

UNITED KINGDOM WENDY MILNE/ SCHOOL OF COMPUTING STUDIES/ UNIV. OF EAST ANGLIA/ NORWICH ENGLAND NR4 7TJ 

UNITED KINGDOM ALAIN D. D. WILLIAMS/ 801 FINCHLEY ROAD/ LONDON ENGLAND NW11 8DP 

UNITED KINGDOM C. CURRAN/ COMPUTING LABORATORY/ OXFORD UNIVERSITY/ 13 BANBURY ROAD/ OXFORD ENGLAND 0X2 6PE 

UNITED KINGDOM T. S. MORAN/ 20 MASEFIELD AVENUE / EATON FORD/ ST. NEOTS CAMBS PE19 3LS 

UNITED KINGDOM PATRICIA HEATH/ COMPUTER CENTRE/ PLYMOUTH POLYTECHNIC/ DRAKE CIRCUS/ PLYMOUTH ENGLAND PL4 8AA 

UNITED KINGDOM FRASER G. DINGWALL/ SOUTHLEIGH PARK HOUSE/ PLESSEY ELECTRONICS RESEARCH/ EASTLEIGH ROAD/ HAVANT HANTS P09 2PE 

UNITED KINGDOM R. J. LOADER/ COMPUTER SCI. DEPT./ UNIV. OF READING/ WHITEKNIGHTS/ READING ENGLAND RG6 2AX 

UNITED KINGDOM J. D. ROBERTS/ DEPT. OF COMPUTER SCIENCE/ UNIV. OF READING/ WHITEKNIGHTS PARK/ READING ENGLAND RG6 2AX 

UNITED KINGDOM E. B. AWUAH/ BRIDGES HALL/ WHITEKNIGHTS ROAD/ READING BERKS RG6 2BG 

UNITED KINGDOM ATTN: THE SECRETARY/ DEPT. OF COMP. SCI./ UNIVERSITY COLLEGE OF SWANSEA/ SWANSEA SA2 8PP 

UNITED KINGDOM H. W. NEWLAND/ IC/32/ SHELL INTERNATIONAL PETROLEUM CO. LTD./ SHELL CENTRE/ LONDON ENGLAND SE1 7NA 

UNITED KINGDOM P. F. HEWITT/ DORSET HOUSE/ COMPUTER WEEKLY/ STAMFORD STREET/ LONDON ENGLAND SE1 9LU 

UNITED KINGDOM M. J.J. COSTELLO/ COMPUTER CENTRE/ THAMES POLYTECHNIC/ LONDON ENGLAND SE18 6PF 

UNITED KINGDOM DAVID BURNS/ SOFTWARE SCIENCES LTD/ LONDON & MANCHESTER HOUSE / PARK STRE*/ MACCLESFIELD ENGLAND SK11 6SR 

UNITED KINGDOM J. R. DORE/ 5 NESTON WAY / HANDFORTH/ WILMSLOW ENGLAND SK9 3BX 

UNITED KINGDOM D. J. CALVERT/ PARK HOUSE/ COMPUTER ASSOCIATES/ PARK STREET/ MAIDENHEAD BERKS SL6 1SL 

UNITED KINGDOM P. B. ORCHARD/ 25 SUNNYDOWN ROAD / OLIVER'S BATTERY/ WINCHESTER HANTS S022 4LD 

UNITED KINGDOM ATTN: 2900 PASCAL PROJECT/ COMPUTING SERVICE/ UNIV. OF SOUTHAMPTON/ SOUTHAMPTON ENGLAND S09 5NH/ 0703 559 122 

UNITED KINGDOM V. L. EVANS/ COMPUTING SERVICE/ UNIV. OF SOUTHAMPTON/ SOUTHAMPTON ENGLAND S09 5NH/ 0703 559 122 

UNITED KINGDOM KEN ROBINSON/ COMPUTER STUDIES GROUP/ UNIV. OF SOUTHAMPTON/ SOUTHAMPTON ENGLAND S09 5NH/ 0703 559122 

UNITED KINGDOM N. WHITE/ DEPT. OF COMPUTER SCIENCE/ UNIV. OF KEELE/ KEELE STAFFS ST5 5BG/ STOKE-ON-TRENT 621111 X410 

UNITED KINGDOM DENIS LENIHAN/ BATTERSEA LABORATORY/ BRITISH STEEL CORPORATION/ 140 BATTERSEA PARK ROAD/ LONDON ENGLAND SW11/ 01-622-5511 X6 

UNITED KINGDOM STUART J. MCRAE/ DEPT OF COMPUTING & CONTROL/ IMPERIAL COLLEGE/ 180 QUEENSGATE/ LONDON ENGLAND SW7 2AZ/ 01-589-5111 X2733 

UNITED KINGDOM DAVID BROWN/ COMPUTER CENTRE/ IMPERIAL COLLEGE/ SOUTH KENSINGTON/ LONDON ENGLAND SW7 2BX 

UNITED KINGDOM P. WHITEHEAD/ COMPUTER CENTRE/ IMPERIAL COLLEGE/ SOUTH KENSINGTON/ LONDON ENGLAND SW7 2BX 

UNITED KINGDOM CHRIS W. MARTIN/ COMPUTING SERVICES/ 2 H0UNSF1ELD ROAD/ SHEFFIELD ENGLAND S10 2TN/ (0742) 78555 X263 

UNITED KINGDOM ATTN: THE LIBRARY/ TEESIDE POLYTECHNIC/ BOROUGH ROAD - MIDDLESBROUGH/ CLEVELAND ENGLAND TS1 3BA/ 0642-44176 

UNITED KINGDOM D. JONES/ COMPUTING UNIT/ BRUNEL UNIVERSITY/ UXBRIDGE UB8 3PH 

UNITED KINGDOM V. RYBACKl/ CENTRAL COMPUTING SERVICES/ BIRBECK COLLEGE/ MALET STREET/ LONDON ENGLAND WC1 

UNITED KINGDOM ANTHONY B. WELLER/ COMPUTER CENTRE/ UNIVERSITY COLLEGE LONDON/ 19 GORDON STREET/ LONDON ENGLAND WC1H OAH 

UNITED KINGDOM I. D. GRAHAM/ INSTITUTE OF ARCHAEOLOGY/ 31-34 GORDONSQUARE/ LONDON ENGLAND WC1H OPY 

UNITED KINGDOM A. BARKER/ COMPUTER UNIT/ L. S. E./ HOUGHTON ST./ LONDON ENGLAND WC2/ 01-405-7686 X876 

UNITED KINGDOM A. J. JONES/ U.C.S.L./ P.O. BOX 110/ WATFORD HERTS WDl ISA 

UNITED KINGDOM MIKE BOUDRY/ 42 DEWHURST ROAD/ LONDON ENGLAND W14 OES/ 01 - 603 0816 

YUGOSLAVIA STJEPAN JARNJAK/ 13 PROLET. BRIG. 247/ ZAGREB YU-41000/ (041) 513-822/767 (OFFICE) 

YUGOSLAVIA ROBERT REINHARDT/ INSTITUT JOZEF STEFAN/ UNIV. V LJUBLJANI/ JAMOVA 39/ LJUBLJANA YU-61001/ 63-261 

YUGOSLAVIA SUAD ALAGIC/ ELEKTROTEHNICKI FAKULTET/ SARAJEVO I.l'KAVJCA \T-7luuO 



JEANE ABITBOUL 

M H ACKROYD 

ROBERT N. ADAMSON 

JOHN F. AGNEW 

W. H. AKESON 

SUAD ALAGIC 

R. B. ALEXANDER 

GERALD P. ALLDREDGE 

DAVID M. ALLEN 

TIMOTHY ALLEN 

D. J. ALLERTON 

GORDON B. ALLEY 

STEPHEN R. ALPERT 

RICHARD ALRUTZ 

G. X. AMEY 

WILLIAM F. AMON III 

B. H. ANDERSON 

OLE L. ANDERSON 

RAY L. ANDERSON 

FOLKE ANDERSSON 

DENNIS S. ANDREWS 



94043 
B4 7PB UNITED ' KINGDOM 
98055 

2602 AUSTRALIA 
92037 
YU-71000 YUGOSLAVIA 
NEW ZEALAND 
65401 
66102 
02172 

UNITED KINGDOM 
78220 
01609 
14580 
KOA 1A0 CANADA 
22030 
83401 
97330 
93017 
S-163 00 SWEDEN 
94086 



GIOVANNI DEGLI ANTON I 

DELL ANTONIA 

PETER A. APGAR 

R. REMBERT ARANDA 

J. C. ARANGO 

FLOYD 0. ARNTZ 

LARRY ARONSON 

MICHAEL C. ARYA 

VOLKER ASSMUS 

PETER R. ATHERTON 

LON ATKINS 

ATTENTION: DAN LAPORTE 

ATTENTION: DONALD LINDSAY 

ATTENTION: H. SPAANENBURG 

ATTENTION: K. I. LARSSON 

ATTENTION: TONY CASTLEMAN 

ATTENTION: W. WATTS 

ATTN: AMI INFORMATION CENTER 

APPLIED BUSINESS COMPUTER SYSTEMS 

ATTN: ARJUN REDDY - LIBRARIAN 

ATTN: AYERS LOCKSMITHING 



1-20000 


ITALY 


78291 




18042 




06103 






COLOMBIA 


02160 




10022 




94086 




D-6450 


GERMANY 


63166 




92714 




93017 




K2E 6T7 


CANADA 


13440 




S-126 11 


SWEDEN 


1500 


SOUTH AFRICA 


3180 


AUSTRALIA 


95051 




20854 




65211 




94941 





ATTN: BASSER DEPT. OF COMPUTER SCIENCE 

ATTN: BETA SYSTEMS LTD. 

ATTN: BIBLIOTHEEK 

ATTN: BIBLIOTHEK 

ATTN: BIBLIOTHEK 

N: COLUMBIA MICRO-COMPUTER SYSTEMS INC* 

ATTN: COMMANDANT (G-DOE-3/TP54) 

ATTN: COMPUTER CENTER LIBRARY 

ATTN: COMPUTER CENTRE 

ATTN: COMPUTER REFERENCE CENTER 

ATTN: COMPUTER SOLUTIONS INC. 

ATTN: COMPUTERACC 

ATTN: COMPUTING CENTER 

ATTN: COMPUTING CENTRE 

ATTN: COMPUTING CENTRE 

ATTN: COVELL & HARWOOD CONSULTANTS 

ATTN: DATEMA AB 

ATTN: DEPT. OF COMPUTER SCIENCE 

ATTN: DEPT. OF MATHEMATICS 

ATTN: DIRECTOR 

ATTN: DIRECTOR OF COMPUTER SERVICES 

ATTN: DOCUMENTATION CENTER 



AUSTRALIA 

CANADA 

THE NETHERLANDS 

GERMANY 

GERMANY 



2006 

V3C 1S5 

1009 AJ 

D-7406 

D-7000 

99352 

20590 

43201 

BN1 2GS UNITED KINGDOM 

08854 

97330 

4001 AUSTRALIA 
80202 
BN1 9QH 
S-751 02 
49007 
S-171 21 SWEDEN 
SF-00250 FINLAND 
92521 

2007 AUSTRALIA 
68701 
64108 



UNITED KINGDOM 
SWEDEN 



PASCAL NEWS #15 

ATTN: DOCUMENTATION OFFICER 

ATTN: DON T. HO 

ATTN: EASTMAN KODAK CO. 

' ATTN: EDUCATION DEPT. 

ATTN: ELIZABETH COMPUTER CENTRE 

ATTN: GENERAL INSTRUMENT CORPORATION 

ATTN: GERBER SCIENTIFIC EUROPE S.A. 

ESELLSHAFT FUEK SOFTWARE-ENGINEERING MB* 

ATTN: HAMPTON TECHNICAL CENTER 

ATTN: IIMAS BIBLIOTECA 

ATTN: INFORMATION SCIENCE CLUB 

ATTN: INSTITUTO NAZIONALE DI OTTICA 

ATTN: INTER11ETRICS INC. 

ATTN: IRIA BIBLIOTKEQUE 

ATTN: IRIA / BIBLIOTKEQUE 

ATTN: JEANNE L. TOULOUSE - LIBRARIAN 

ATTN: JOHN G. CLEARY 

ATTN: KENT TECHNICAL LIBRARY - B 

ATTN: KENT TECHNICAL LIBRARY - C 

ATTN: KENTRON (PTY) LTD 

ATTN: K. MICHAEL - LIBRARIAN 

ATTN: LIBRARY 

ATTN: LIBRARY 

ATTN: LIBRARY 

ATTN: LIBRARY 

ATTN: LIBRARY L-53 (COPY B) 

ATTN: LIBRARY / SERIALS 

LOVELACE CENTER FOR THE HEALTH SCIENCE* 

ATTN: MICROPROCESSOR LABORATORIES INC. 

ATTN: MICROSYSTEMS INC. 

ATTN: MINI-COMPUTER SYSTEMS 

NATIONAL CENTER FOR ATMOSPHERIC RESEARC* 

ATTN: NEW ZEALAND MICROCOMPUTER CLUB 

TN: NORTHWEST MICROCOMPUTER SYSTEMS INC* 

ATTN: PASCAL DISTRIBUTION 

ATTN: PAT MCCLAIN 

ATTN: PERIODICALS LIBRARY (MATHS) 

ATTN: PROCESSOR ENTERPRISES LTD. 

ATTN: PROGRAMMERS 

ATTN: PROGRAMMING MANAGER 

ATTN: P.S. INC. 

ATTN: RCS DATA SYSTEMS 

ATTN: RECAU COPY 2 

ATTN: RECAU COPY 1 

ATTN: REFERENCE ROOM 

ATTN: RIJKS COMPUTERCENTRUM 

ATTN: SERIALS DEPT. 

ATTN: SHATTOCK & ASSOCIATES 

ATTN: SOFTWARE MANAGER 

ATTN: SPCC LIBRARY 24EE 

ATTN: SSRFC LIBRARY 

ATTN: STATE ENERGY COMMISSION 

ATTN: S86 

ATTN: TECHNICAL ASSISTANCE 

ATTN: TECHNICAL INFORMATION CENTER 

ATTN: THE DIRECTOR 

ATTN: THE DIRECTOR 

ATTN: THE INFORMATION OFFICER 

ATTN: THE LIBRARY 

ATTN: THE MANAGER 

ATTN: THE SECRETARY 

ATTN: USER SERVICES GROUP 

ATTN: WASHINGTON STATE UNIV. 

ATTN: W. H. GENTRY 

ATTN: W. J. TAYLOR" 

ATTN: 2900 PASCAL PROJECT 

CHUCK AUGUSTINE 

E. B. AWUAH 

VANESSA AXELROD 

JOSEPH AYERS 

OTTO BAADE 

DUANE W. BAILEY 

LAWRENCE W. BAIN JR. 

WILLIAM L. BAIRD 

J. W. BAKER 

THOMAS BAKER 

DAVID S. BAKIN 

LAWRENCE E. BAKST 

A. S. BALASUBRAMANYAM 

JON BANGS' 

WILLIAM BARABASH 

THOMAS BARBARA 

PAUL BARINA 

A. BARKER 

NORMAN R. BARKER 

DAN & ROBIN BARNES 

G. DENNIS BARNES 

LOUIS BARNETT 

JOHN R. BARR 

PAULA BARRETT 

PEDRO BARROS 

ROBERT F. BASHFORD 

ALEX J. BASK IN 

DAVID BATES 

HENRY R. BAUER III 

JONATHAN BAUER 

NEIL R. BAUMAN 

T. BAYUS 

DWIGHT R. BEAN 

BERT BEANDER 

E. R. BEAUREGARD 

GARY L. BECHTOLD 

THOMAS L. BECK 

MARTIN D. BEER 

MICHAEL BEETNER 

MICHAEL BEHAR 

LARRY BE ITCH 

BERNHARD H. BEITINGER 

JOHN BELEW 

KEITH BELLAIRS 

LEE A. BENBROOKS 

ALLEN £. BENDER 

JOHN BENITO 

WILLIAM G. BENTLEY 

RANDOLPH BENTSON 

A. C. BERESFORD 

PAUL C. BERGMAN 

THEODORE C. BERGSTROM 

R. BHARATH 

ALBRECHT BIEDL 

EARL BILLINGS LEY 

C. BILLINGTON 

RODNEY BLACK 

PETER BLADWELL 

COLIN R. BLANCHARD 

GERHARD BLANKE 

ALAN BLANNIN 

W. G. BLASDEL 



SEPTEMBER, 1979 



PAGE 2 4 



NEW ZEALAND 
08854 
14650 
7001 AUSTRALIA 

7000 AUSTRALIA 
21031 

B-1160 BELGIUM 
D-8000 GERMANY 
23666 

MEXICO 
7005 AUSTRALIA 
1-50100 ITALY 

77546 
F-78150 FRANCE 
F-78150 FRANCE 
94301 

NEW ZEALAND 
98124 
98124 

0001 SOUTH AFRICA 
90045 
T6G 2J8 /CANADA 

THE NETHERLANDS 
02178 
75235 
94550 
94305 
87108 
77043 
91107 

3161 AUSTRALIA 
80303 

NEW ZEALAND 
97404 
80302 
98115 
2001 SOUTH AFRICA 
NEW ZEALAND 

7001 AUSTRALIA 
3168 AUSTRALIA 

58107 

48239 
DK-8000 DENMARK 
DK-8000 DENMARK 
K7L 3N6 CANADA 
7323 BA THE NETHERLANDS 

19104 
3131 AUSTRALIA 
2092 SOUTH AFRICA 

06602 

55455 
6000 AUSTRALIA 

20755 

20052 

91320 

NEW ZEALAND 
5001 AUSTRALIA 
BA2 7 AY UNITED KINGDOM 
TS1 3BA UNITED KINGDOM 

5000 AUSTRALIA 
SA2 8PP UNITED KINGDOM 

93106 

99164 

22980 
NP44 1NX UNITED KINGDOM 
S09 5NH UNITED KINGDOM 

15213 
RG6 2BG UNITED KINGDOM 

20003 

01908 

55406 

01002 

21040 

19090 
M1J 2T1 CANADA 

01862 

92680 

07044 
560 020 INDIA 

10954 

01754 

77072 

94019 

WC2 UNITED KINGDOM 

95123 

95926 

91107 

90274 

59812 

80027 
M3H 5S9 CANADA 

19713 

90272 

94608 

82071 

48104 

19002 

UNITED KINGDOM 

92110 

01876 

17055 

77074 

53126 
L69 3BX UNITED KINGDOM 

06484 

06880 

45219 
D-8012 GERMANY 

90049 

56464 

90403 

20852 

95051 

46755 

07846 
5064 AUSTRALIA 

21793 

90631 

49855 
D-1000 GERMANY 

01002 
3168 AUSTRALIA 

06810 
2098 AUSTRALIA 
N-3600 NORWAY 
D-6236 GERMANY 

UNITED KINGDOM 

20015 



LYNN BLICKENSTAFF 

TIM BLUM 

WILLIAM E. BLUM 

W. L. BLUNDELL 

JAMES BLYTHE 

JAMES BLYTHE 

JEAN BOISVERT 

LARRY D. BOLES 

EDWARD W. BOLTON 

WALTER BOLTZ 

JEFF BONAR 

KENNETH C. BONINE 

RICHARD J. BONNEAU 

GLENN A. BOOKOUT 

GARY J. BOOS 

L. BORRETT 

ARNE BORTEMARK 

C. R. BOSWELL 
DENNIS K. BOSWELL 

F. D. BOSWELL 

F. G. BOTHA 

MIKE BOUDRY 

HENRY J. BOWLDEN 

CHRIS BOYLAN 

ROBERT BOYLAN 

DALE BRAINARD 

M. A. BRAMER 

RICHARD C. BRANDT 

DAVID C. BRAUGHT 

R. BRENT 

EDWARD BRITTAIN 

FRANCIS A. BROGEN 

HENRY C. BROM 

C. BRON 

GEORGE BROOKE 

JERRY R. BROOKS HIRE 

ALISON A. BROWN 

ALLEN BROWN 

A. C. BROWN 
DALE BROWN 

DAVID BROWN 

DAVID R. BROWN 

REID L. BROWN 

R. A. BROWNELL 

STEVE BRUELL 

A. CHARLES BUCKLEY 

WILLIAM E. BULLEY 

FRANK BURGER 

THOMAS M. BURGER 

MIKE BURGHER 

SUE D. BURKLUND 

D. G. BURNLEY 

DAVID BURNS 

DAN BURROWS 

JEAN W. BUTLER 

EDWARD R. BYRNE 

ROBERT L. BYRNE III 

MARCUS L. BYRUCK 

THOMAS E. BYTHER 

GEORGE A. CACIOPPO JR. 

KEVIN CADMUS 

W. J. CAELLI 

PHILLIP R. CALDWELL 

ROBERT CALDWELL 

D. J. CALVERT 
MAURICE CALVERT 

DAVID B. CAMERON 

HARRY N. CAMPBELL 

J. A. CAMPBELL 

MIKE CANADAY 

B. CANTWELL 
D. CARACAPPA 

JOHN CARPENTER 

DANIEL CARROLL 

PETER CARTW RIGHT 

IAN J. CASEY 

B. C. CASKEY 
KARL J. CASPER 

SIANLUIGI CASTELLI 

PAT CAUDILL 

KAREN CAVILEER 

F. A. CELLINI 

JOSE R. CEN ZUBIETA 

DOUG CHAMBERLIN 

JOHN C. CHAN 

AUSTIN CHANEY 

TAIWAN CHANG 

A. LYMAN CHAPIN 

W. B. CHAPIN 

GEORGE W. CHERRY 

BABAK CHUBAK 

ANTONIO CICU 

COLIN CLIFFORD 

JOHN D. COATES 

BARRY A. COLE 

DAVID L. COLE 

JAMES A. COLE 

DAVID E. COLGLAZIER 

BETTY A. COLHOUN 

MIKE COLLIGAN 

ROGER A. COLLINS 

KEVIN CONRY 

P. COOKE 

M. CORBOULD 

C. R. CORLES 
MOSHA CORNFELD 

DONALD R. COSCIA 

M. J.J. COSTELLO 

P. COUNTY 

M. MICHEL COURCHESNE 

BORDEN COVEL II 

CARLIN R. COVEY 

WILLIAM C. COX 

CARL CRAFOORD 

PENNY CRANE 

DAVID CRAWFORD 

THOMAS W. CROSLEY 

R. J. CROUZILLES 

TERRENCE R. CULLEN 

M. CULLINAN 

C. CURRAN 

JAMES A. CURTIS 

JOSEPH CUSACK 

C.N.S. DAMPNEY 

ARTHUR W. DANA JR. 

CHARLES A. DANIELS 

ALEC DARA-ABRAMS 

JEAN DARSIE 



90065 


BARRY DASHER 


V3T 1Y8 


CANADA 


95008 


DANIEL DASSOW 


55016 




94010 


BRUCE DAVIDSON 


M3C 1H7 


CANADA 


UNITED KINGDOM 


MELVIN DAVIDSON 


98225 




48103 


CHARLES DAVIS 


46628 




48105 


LEO R. DAVIS 


20770 




G5L 3A1 CANADA 


RONALD DAWES 


75006 




37076 


PAUL E. DAWSON 


47401 




90066 


DAVID J. DE FANTI 


02871 




A- 10 10 AUSTRIA 


H.J.J. DE GIER 


2501 BD 


THE NETHERLANDS 


01003 


JEAN LOUIS DECOSTER 


CH-2560 


SWITZERLAND 


92041 


ALAN DEEHR 


99163 




01545 


EDWARD N. DEKKER III 


60137 




95926 


DAVE DELAUTER 


47401 




69341 


ALLAN B. DELFINO 


94087 




3185 AUSTRALIA 


DONALD C. DELONG 


95112 




S-581 83 SWEDEN 


P. L. DEMPSEY 


3122 


AUSTRALIA 


NEW ZEALAND 


W. L. DENISON 


2073 


AUSTRALIA 


85012 


RICHARD DEROSIER 


01730 




N2L 3G1 CANADA 


PIERRE DESJARDINS 


H3C 3J7 


CANADA 


2000 SOUTH AFRICA 


JOE DEVITA 


92663 




WW OES UNITED KINGDOM 


LARRY DI LULLO 


85253 




15146 


J. F. DICKSON 


07753 




55455 


RICHARD DIEVENDORFF 


91724 




08873 


NORMAN DIMOCK 


R3C 1P7 


CANADA 


44103 


FRASER G. DINGWALL 


P09 2PE 


UNITED KINGDOM 


MK7 6AA UNITED KINGDOM 


A. M. DINKELACKER 


1610 


SOUTH AFRICA 


84112 


SANDRA DIRKS 


90010 




61701 


J. SCOTT DIXON 


10901 




2600 AUSTRALIA 


JACK DODDS 


B2Y 4A2 


CANADA 


2104 SOUTH AFRICA 


REG DODDS 


7600 


SOUTH AFRICA 


78209 


PETER E. DOLEMAN 


94609 




55303 


J. E. DOLL 


95070 




7500 AE THE NETHERLANDS 


BOB DONAHUE 


97403 




D-8000 GERMANY 


D. DONAHUE 


94043 




35805 


M. F. DOORE 


90813 




14850 


J. R. DORE 


SK9 3BX 


UNITED KINGDOM 


12206 


DAN DORROUGH 


14527 




97201 


W. S. DORSEY 


92667 




92663 


FRANK D. DOUGHERTY 


61008 




SW7 2BX UNITED KINGDOM 


J. R. DOUGLAS 




UNITED KINGDOM 


N9B 3P4 CANADA 


R. H. DOUGLAS 


85019 




01876 


R. H. DOURSON 


93407 




2070 AUSTRALIA 


GENE DREHER 


90266 




55455 


KENNETH R. DRIES SEL 


74102 




08540 


WENDY DUBOIS 


95014 




48105 


DENNIS S. DUNCAN 


87106 




92686 


FRANK DUNN 


78704 




93017 


PEGGY DUNN 


20760 




74601 


DAN EB BERTS 


95817 




63188 


DANIEL EDGAR 


98107 




E3B 5A3 CANADA 


PAUL R. EGGERT 


90049 




SK11 6SR UNITED KINGDOM 


RAFAEL E. EGLOFF 


CH-8304 


SWITZERLAND 


55812 


E. M. EHLERS 




SOUTH AFRICA 


98144 


DANIEL A. EHMANN 


14619 




1 60540 


DAVID EISENBERG 


10006 




78704 


DAN L. EISNER 


91792 




94133 


TOM EKBERG 


75006 




04469 


MARVIN ELDER 


75080 




11772 


BILL ELLIOTT 


46240 




; 43201 


JAMES C. EMERY 


08540 




2902 AUSTRALIA 


LARRY ENGELHARD T 


48176 




75229 


JIM ENGILES 


97005 




92110 


JOHN ENGLAND 


78753 




SL6 1SL UNITED KINGDOM 


ROBERT J. ENNS 


NON 1J0 


CANADA 


CH-1216 SWITZERLAND 


DONALD L. EPLEY 


52242 




33620 


ROBERT A. EPPING 


19101 




92686 


ALAN EPSTEIN 


02194 




EX4 4QL UNITED KINGDOM 


PIERRE- JEAN ERARD 


CH-2000 


SWITZERLAND 


92683 


STANTON D. ERIC SON 


61107 




IP5 7RE UNITED KINGDOM 


DANIEL ETHIER 


55101 




08540 


V. L. EVANS 


S09 5NH UNITED KINGDOM 


3145 AUSTRALIA 


NORMAN M. EVENSEN 


10964 




94122 


BYRON G. EVERETT 


57701 




98115 


BLAND EWING 


94708 




3191 AUSTRALIA 


JOSEPH FALETTI 


94704 




87185 


SHAWN M. FANNING 


92627 




44115 


RONALD J. FARMERY 


B-1761 


BELGIUM 


1-20133 ITALY 


G. FARR 


4700 


AUSTRALIA 


97077 


FRANCIS FEDERIGHI 


12309 




95051 


LUCIEN FEIEREISEN 


D-7500 


GERMANY 


N2J 4G5 CANADA 


D. A. FEIGLIN 


2000 


AUSTRALIA 


MEXICO 


WERNER FERCH 


HEH 2J8 


CANADA 


02173 


PAUL D. FIELD 


30306 




98195 


ROBERT L. FILLMORE 


KOA 2W0 


CANADA 


'44202 


ALMUTH FISCHER 


tf-3000 


GERMANY 


10010 


DAVID FISH 


95112 


CANADA 


01581 


LANCE K. FISHER 


55317 




55112 


PAUL F. FITTS 


12546 




22090 


CHARLES D. FOLEY III 


10516 




53280 


WILLIAM FOLZ 


53715 




1-20010 ITALY 


WILLIAM H. FORD 


95211 




D-8000 GERMANY 


JAMES A. FORGEY 


98146 




12308 


CHUCK FORSBERG 


97225 




90291 


DOUG FORSTER 


95014 




S4P 2H8 CANADA 


W. BRUCE FOULKES 


K1V 6N3 


CANADA 


11716 


JOHN TIMOTHY FRANKLIN ! 


S-100 00 


SWEDEN 


55410 


K. FRANKOWSKI 


55455 




20776 


JOHN C. FRANZINI 


94903 




60601 


JOHN I. FREDERICK 


10025 




92024 


R. A. FREEDMAN 


01842 




95030 


DONALD D. FRENCH 


02158 




BN1 9PT UNITED KINGDOM 


JOHN FRENCH 


92691 




2601 AUSTRALIA 


WALT FRENCH 


94707 




85019 


MARIAN FROBISH 


61625 




90068 


WILLIAM Y. FUJIMOTO 


91775 




11727 


TOSHIHIKO FUJIWARA 


361 


JAPAN 


SE18 6PF UNITED KINGDOM 


GLEN FULLMER 


97077 




3168 AUSTRALIA 


MARK FURTNEY 


24501 




H1G 3S5 CANADA 


JOSEPH J. GAL 


02110 




92037 


GENE GARBUTT 


95818 




55409 


WILLIAM GARD 


01776 




90731 


KEITH GARLAND 


60174 




S-100 44 SWEDEN 


D. C. GARRATT 


2602 


AUSTRALIA 


90036 


PATRICK D. GARVEY 


90291 




99501 


G. W. GAUGHRAN 


60196 




94087 


DALE GAUMER 


46808 




F-91710 FRANCE 


C. V. GAYLORD 


92705 




Oivju 


NARAIN GEHANI 


08854 




3068 AUSTRALIA 


RICHARD D. GEORGE 


60439 




0X2 6PE UNITED KINGDOM 


STEPHEN GERKE 


22090 




03053 


G. W. GERRITY 


2600 


AUSTRALIA 


08536 


LARRY GERTZOG 


14620 




2113 AUSTRALIA 


NICHOLAS R. GETI 


06896 




94025 


JIM GILBERT 


92677 




98178 


SHELLEY GILES 


97301 




95064 


PAUL J. GILLIAM 


99163 




98107 


MALCOLM GILLIS 


35773 





PASCAL NEWS #15 



SEPTEMBER, 1979 



BJORN GIMLE 

BRADLEY K. GJERDING 

MOUENS GLAD 

ALOIS GLANC 

PER GOEBEL 

G. GOERZ 

BILLIE S. GOLDSTEIN 

DAVID A. GOMBERG 

JULIAN GOMEZ 

GASTON H. GONNET 

RALPH S. GOODELL 

PETE GOODEVE 

JUDY GOODMAN 

ADOLPH GOODSON 

G. W. GORDON 

RICHARD GORDON 

GEORGE S. GORDON JR. 

JOHN R. GOTTHARDT 

ARTHUR W. GOTTMAN 

I. D. GRAHAM 

RON GRAVES 

DENNIS GRAY 

D. L. GRAY 

NORTON GREENFELD 

STEVEN J. GREENFIELD 

DAVID GREER 

DAVID J. GRIEP 

GEOFFREY R. GRINTON 

W. J. GRODDE 

PETER GROGONO 

MICHAEL H. GROSS 

G. G. GUSTAFSON 

R. D. GUYON 

CLAYTON HAAPALA 

PETER H. HAAS 

MICHAEL HADJIOANNOLL 

FRANCIS B. HAJEK 

PAUL H. HALENDA 

DON B. HALES 

K. HALEY 

DONALD HALFORD 

JOHN L. HALL JR. 

STEVEN B. HALL 

ROBERT HALLORAN 

RICHARD W. HAMILTON 

WILLIAM G. HAMMER 

LOTHAR HAMMERL 

WILLIAM J. HANKLEY 

CHAD HANSEN 

W. J. HANSEN 

JON HANSON 

JAMES HARGREAVES 

JEFF HARLOW 

BRYAN D. HAROLD 

ROY HARRINGTON 

DAVID HARRIS 

KIM R. HARRIS 

K. J. HARRIS 

TERRY HARRIS 

A. J. W. HARRISON 

DAVID J. HARRISON 

K. HARRISON 

STEVE HARRISON 

CLEVE HART 

STEVEN HARTLEY 

HAROLD HARTMAN 

AL HARTMAN N 

BURT E. HARTMAN N 

GEORGE W. HARVEY 

WESTON W. HASKELL 

DAVID HATCH 

FINN-MOGENS S. HAUGI 

DOUGLAS W. HAWKINS 

MIKE HAYES 

J. NIEL HAYNIE 

TOM HEAD 

LENNY HEATH 

PATRICIA HEATH 

EGIL HEISTAD 

WILLIAM A. HEITMAN 

PAUL D. HELVICK 

NEAL A. HENDERSON 

JAMES HENDRICKS ON 

JOHN HENNESSY 

C. HENNICK 

W. BRYAN HENNINGTON 

JURGEN HENRICHS 

L. S. HENSHAW 

R. A. HENZEL 

RICHARD W. HERMAN SON 

SCOTT HERR 

MARK HERSEY 

GEORGE C. HETRICK 

P. F. HEWITT 

A. D. HEYES 

BRUCE HIBBARD 

DAVID HICKOK 

CURT HILL 

LESLIE M. HINO 

W. A. HINTON 

ANDY HISGEN 

STEVEN 0. HOBBS 

ALAN HOC HB ERG 

PAUL HOEFLING 

CLAES HOJENBERG 

JAMES E. HOLBROOK 

PAUL HOLBROOK 

NICO HOLLEBEEK 

RICHARD HOLMES 

RAY HOLT 

GEORGE HOMER 

MASAHIRO HONDA 

C. H. HOOGENCIOORN 

DAVID R. HOPPE 

GREGORY L. HOPWOOD 

PETER HORAN 

DAVID HORNBAKER 

THOMAS P. HOVEKE 

K. B. HOWARD 

CHARLES P. HOWERTON 

HERBERT H. HOY 

STANLEY J. HUBER 

JAMES M. HUDSON 

STEPHEN P. HUFNAGEL 

MIKE HUGHES 

GUSTAVO HUNG 

LENN S. HUNT 

J. C. HUNTINGTON 



: SWEDEN 

I 

I DENMARK 



I DENMARK 
) GERMANY 



' AUSTRALIA 
. CANADA 



AUSTRALIA 

CANADA 

CANADA 



S-126 12 : 

98199 
DK-3600 I 

91330 
DK-2800 I 
D-8520 ( 

11776 

22102 

91103 

22453 ] 

01451 

94705 

97077 

20771 
2607 i 
R3E 0W3 < 

02173 

01775 

80222 
WC1H OPY UNITED KINGDOM 

21044 

85201 
M21 1JF UNITED KINGDOM 

02138 

91604 
V6E 1P5 CANADA 

90274 

AUSTRALIA 
D-5100 GERMANY 
CANADA 

94303 

92110 
2067 AUSTRALIA 

55057 

94086 

90067 

73505 

80303 

84147 
NE4 8EB UNITED KINGDOM 

80302 

33601 

44107 

07730 

98632 

99206 
D-1000 GERMANY 

66506 

55101 

48104 

55440 

45214 

58501 

66506 

94306 
V6H 1K8 CANADA 

94303 

92037 

02154 
7011 , 
K1V 9J1 
N2L 3G1 

92117 

94536 

9/405 

52240 

95051 

81501 

96827 

77042 
2120 AUSTRALIA 
NORWAY 

85202 

30341 

33334 

99701 

27605 
PL4 8AA I 
N-2007 1 

95662 

75401 

92128 

85257 

94305 

91320 
*92708 
2006 AUSTRALIA 

80401 

85019 

98031 

61832 

48105 

02169 
SE1 9LU I 
NG7 2RD I 

06484 

50158 

68134 

96822 

53211 

15213 

01886 

02090 

97225 
S-752 51 SWEDEN 

85281 

92715 
2804 HS THE NETHERLANDS 

01776 

94086 

92680 

94086 
0001 SOUTH AFRICA 

60196 

92713 
3127 AUSTRALIA 

80202 

60618 

93277 ' 

80004 

95008 

94510 

02181 

78712 

57709 

PERU 

61742 

85019 



l UNITED KINGDOM 
' NORWAY 



I UNITED KINGDOM 
i UNITED KINGDOM 



MICHAEL D. HURLEY 

JOHN & BARBARA HUSEBY 

BOB HUTCHINS 

P. L. HUTCHISON 

S. RAY HUTTON 

MICHAL IGLEWSKI 

ASHOK D. INGLE 

DAVID L. IRVINE 

F. L. IRVINE 

R. L. IRWIN 

MICHAEL ISTINGER 

CALVIN W. JACKSON 

CHUCK JACKSON 

CRAIG E. JACKSON 

JOHN R. JACKSON 

W. JACKSON 

KENNETH R. JACOBS 

FRED M. JACOBSON 

ROBERT F. JAKOB 

LOUIS B. JAMES 



22312 

97701 

92663 

76101 

68503 

00901 POLAND 

75080 

84102 

4350 AUSTRALIA 
77036 
A-1000 AUSTRIA 
90025 
94035 
22302 
60542 

3168 AUSTRALIA 
20795 
53/06 
53210 
14609 

JUHANI J AMI A SF-33500 FINLAND 
W. JANSSEN 53092 
STJEPAN JARNJAK YU-41000 YUGOSLAVIA 
J. E. JEACOCKE G12 8QQ UNITED KINGDOM 
RON JEFFRIES 93017 
75006 
98115 
79409 
85028 
LAI 4YW UNITED KINGDOM 
02116 
52240 
94132 
87545 
55404 
55901 
19518 
V6T 1W5 CANADA 
WD1 ISA UNITED KINGDOM 
UB8 3PH UNITED KINGDOM 
87185 
01890 
95051 
01060 
-981 01 SWEDEN 
D-4790 GERMANY 
19147 
11415 
60201 



JOHN P. JENKINSON 

DAVID C. JENNER 

JOHN JENSEN 

AUTHOR R. JETER 

K. M. JINKS 

BARTLEY C. JOHNSON 

JOHN JOHNSON 

MARK SCOTT JOHNSON 

SUE JOHNSON 

VICTOR A. JOHNSON 

ED JOHNSTON 

RICHARD A. JOKIEL 

BRUCE JOLLIFFE 

A. J. JONES 

D. JONES 

RONDALL E. JONES 

JOHN W. JORDAN 

NIKI JORDAN 

EDWARD JUDGE 

CHRISTER JUREN 

MICHAEL KALICINSKY 

DENIS KALTHOFER 

GILBERT KAPLAN 

RICHARD A. KARHUSE 

GUNNAR KARLSSON S-411 35 SWEDEN 
ROBIN KASCKOW 10017 
NORMAN R. KASHDAN 10029 

HEIKKI KASKELMA SF-00400 FINLAND 



ROBERT KAST 


07876 


KOZAI KATSUTOSHI 


30332 


ED KATZ 


55112 


JEFFREY KATZ 


06095 


ROBERT N. KAVANAGH 


S7N OWO CANADA 


JOSE I. KAZA 


MEXICO 


NEIL T. KEANE 


S-175 86 SWEDEN 


THORNTON KEEL 


78751 


ROY KEELEY JR 


36582 


RUSSELL B. KEGLEY 


55112 


JAN KRISER 


D-2800 GERMANY 


P. KELLEY 


2600 AUSTRALIA 


GUY KELLY 


92111 


PAUL L. KELLY 


77092 


JANICE ANN KELSO 


01532 


JEREMY KENAGHAN 


UNITED KINGDOM 


JIM KHALAF 


92714 


RICHARD KIMBALL 


01754 


LAURA L. KING 


94114 


ROBERT S. KIRK 


95051 


EDWARD E. KIRKHAM 


53214 


RICHARD J.D. KIRKMAN 


UNITED KINGDOM 


KIM A. KIRKPATRICK 


87701 


NED J. KISER 


46514 


J. B. KLAHN 


74004 


MARK KLEIN 


03857 


ROGER KLOEPFER 


49269 


REX KLOPFENSTEIN JR 


43402 


WALTER J. KLOS 


21031 


EDWARD W. KNUDSEN 


21204 


SVEND ERIK KNUDSEN 


CH-8092 SWITZERLAND 


JACK KOCHER 


61752 


DAVID A. KOHLER 


'95118 


D. KONIGSBACH 


06897 


PETER KOOLISH 


94086 


LEOB KOPF 


14601 


G. A. KORN 


85715 


CARY KORNFELD 


94043 


DIETRICH KREKEL 


D-5000 GERMANY 


G. KREMBS 


12401 


J. G. KRISHNA YA 


411 001 INDIA 


C. T. KROUSE 


98662 


RICHARD KUBAT 


55414 


GARY A. KUDIS 


20024 


DAVID KUULMAN 


92122 


JAMES W. KUIPER 


48103 


BENJAMIN KUIPERS 


02155 


DUFF KURLAND 


95051 


IVAR LABERG 


NORWAY 


RICHARD D. LADSEN 


19422 


JACQUES LAFRANCE 


74171 


DAN M. LALIBERTE 


55812 


C. A. LANG 


CB5 8BA UNITED KINGDOM 


KATHY LANG 


B15 2TT UNITED KINGDOM 


LARRY LANGDON 


20018 


LAURENCE R. LANGDON 


83705 


GUY LAPALME 


H3C 3J7 CANADA 


CHARLES LARSON 


52240 


STEVE LASSMAN 


93017 


ROBERT LATHE 


D-8046 GERMANY 


ARTHUR L. Y. LAU 


11973 


JAN LAUGESEN 


DK-2500 DENMARK 


PIERRE J. LAVELLE 


22061 BRAZIL 


LUC LAVOIE 


H3C 3J7 CANADA 


D. E. LAW 


KT1 2EE UNITED KINGDOM 


RICHARD J. LAW 


11767 


CHARLES LAYTON 


2601 AUSTRALIA 


PAUL LEBRETON 


81212 


ROBERT J. LECHNER 


02115 


ROBERT L. LEECH 


10996 


ALLAN LEECHAN 


L8S 4K1 CANADA 


KEN LEESE 


K2P 0G2 CANADA 


KENNETH 0. LELAND 


92106 


IAN LEMAIR 


85254 


DENIS LENIHAN 


SW11 UNITED KINGDOM 



R. KENT LEONARD 

FRANK LEPERA 

LANCE A. LEVENTHAL 

J. A. LEVIN 

ROBERT LEVINE 

LEON S. LEVY 

DAVID J. LEWIS 

DON LEWIS 

GEORGE LEWIS 

J. A. LEWIS 

SAM LIBAI 

ALAN LILLICH 

CARROLL R. LINDHOLM 

BRUCE LINK 

JORGE LINSKENS 

RICHARD LINTON 

KWEE TJOE LIONG 

MARTIN LIPELES 

DAVID LIPPINCOTT 

BILL LIPSKY w„ A _, 

STEN LJUNGKVIST S-603 78 SWEDEN 

RICHARD LLEWELLYN 21045 

R. J. LOADER 

JOHN C. LOCKHART 

J. J. LOGAN 

R. J. LONG 

LARRY LOOS 

ERNST LOOSER 

ROBERT E LORD 

LARRY A. LOTITO 

MICHEL LOUIS-SEIZE 

TIM LOWERY 

JOHN F. LUBIN 

L. W. LUCAS 

ROBERT LUCAS 

PAUL C. LUSTGARTEN 

RICHARD G. LYMAN 

WILLIAM LYNN 

STUART LYNNE 

KEN M. MA 

J. P. MACCALLUM 

B. C. MACDONALD 

DAVE MACHART 

GEORGE MACK 

HEATHER A. MACKAY 

THOMAS MACKENZIE 

ROY MADDUX 

TOSHINORI MAENO 

HANK S. MAGNUSKI 

RICHARD L. MAHN 

KEVIN T. MAHONEY 

RONALD MAK 

MANUEL MALL 

EDWARD S. MALLINAK JR. 

VERNON J. MALLU 

W. J. MALTHUS 

VINCENT MANIS 

MIKE MANTHEY 

RICK L. MARCUS 

J. P. MARKS 

CHRIS W. MARTIN 

DAVID P. MARTIN 

PETER D. MARTIN 

GEORGE A. MARTINEZ JR. 

ERIC MARTINOT 

GENE MARTINSON 



PAGE 25 



80222 

11973 

92067 

92093 

11020 

08034 

14850 

92806 

94086 
2000 SOUTH AFRICA 

49512 ISRAEL 

02154 

90403 

87115 
RA-1069 ARGENTINA 

53211 
1012 VT THE NETHERLANDS 

91320 

48104 

10013 



RG6 2AX UNITED KINGDOM 
08541 
22101 

4069 AUSTRALIA 
63701 

2119 AUSTRALIA 
99163 
92663 
H2Z 1A4 CANADA 
90278 
19104 
93555 
97203 
53706 
84116 
75223 

CANADA 
06492 
03242 
95410 
55901 
H9R 1G1 CANADA 

3181 AUSTRALIA 
K8A 3C5 CANADA 
20034 

177 JAPAN 
94303 
48197 
01742 
95133 
D-2000 GERMANY 
44092 
77056 

NEW ZEALAND 
V6T 1W5 CANADA 
14226 
55455 
94304 
S10 2TN UNITED KINGDOM 
90045 
01450 
90023 
94/03 
55440 



GERALD MASPERD F-92410 FRANCE 
JOSEPH W. MAST 22801 



PRABHAKER MATETI 

W. J. MATHER 

TOM MATHIEU 

DAVID MATTHEWS 

NED N. MAYRATH 

NED N. MAYRATH 

D. W. MCCAMMISH 

B. MCCRAE 

GARY MCDONALD 

JACK MCDONNELL 

ROBERT L. MCGHEE 

ALBERT F. MCGIRT 

DANIEL R. MCGLYNN 

STEPHEN S. MCGRANE 

M. L. MCGRAW 

CHARLES W. MCKAY 

MICHAEL MCKENNA 

S. BROOKS MCLANE 

JEREMY MCLUCKIE 

COLIN MCMASTER 

STJJART J. MCRAE 

PHILIP F. MEADS JR. 

JACK R. MEAGHER 

BASIL MEDDINGS 

BRIAN A. E. MEEKINGS 

PAUL MEILLEUR 

MICHAEL ROBERT MEISSNER 

HAROLD MELAMED 

MONTE JAY MELDMAN 

MONTE J. MELDMAN 

WARREN K. MELHADO 

L. F. MELLINGER 

YVES MENARD 

BERT MENDELSON 

STEPHEN F. MERSHON 

JOHN J. MERTZ 

BOB METZGER 

D. P. METZGER 

KURT MEYLE 

MARK MICHELSON 

KATHLEEN S. MICKEN 



3052 AUSTRALIA 
2001 AUSTRALIA 

99352 
48176 
74128 
74128 
75080 

3053 AUSTRALIA 
64468 

90503 
20015 
87544 
10549 
55117 
30328 
77058 
02154 
,16802 

2192 SOUTH AFRICA 
94301 
SW7 2AZ UNITED KINGDOM 
94611 
49008 
T6H 3X1 CANADA 
LAI 4YN UNITED KINGDOM 
95466 
55455 
55116 
60016 
60016 
11020 
91405 
H3C 3P8 CANADA 
01063 
98055 
53151 
48640 
85019 
19454 
84115 
23185 



REIJO MIEMINEN SF-33720 FINLAND 



MARK M. MILLARD 

CHARLES E. MILLER 

LESLIE J. MILLER 

MIKE MILLER 

RAU1. MII.T.KR 

ROGER E. .MILLER 

TERRENCE c'. MILLER 

VICTOR S. MILLER 

RICHARD B. MILLWARD 

WENDY MILNE 

PAUL MINKIN 

S. M. MINTON 

STEVEN L. MITCHELL 

WILLIAM A. MITCHELL 

E. N. MIYA 

V. L. MOBERG 

MORTEN MOEN 



97216 

17257 

03051 

66506 

QAOK7 

55112 
92093 
10598 
02912 
NR4 7TJ UNITED KINGDOM 
55426 
33143 
10003 
77024 
91103 
92021 
N-3290 NORWAY 



STEVE MOLES CM17 9NA UNITED KINGDOM 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 26 



JAMES MOLONEY 

FRANK MONACO 

ANNE MONTGOMERY 

CHARLIE MONTGOMERY 

JOE B. MONTGOMERY 

ALLAN MOORE 

H. W. MOORE 

JUNE B. MOORE 

R. T. MOORE 



06902 

30060 

80230 

97077 

62906 

14215 

92626 

94960 

K2H 8R6 CANADA 

T. S. MORAN PE19 3LS UNITED KINGDOM 

RAYMOND MOREL CH-1204 SWITZERLAND 

18015 

2072 AUSTRALIA 
95050 
01581 
18104 
15213 
03031 
01754 
14627 
N2G 4E5 CANADA 

SOUTH AFRICA 
3042 AUSTRALIA 
75235 
02139 
55435 
94305 
10804 

2000 AUSTRALIA 
91367 
63045 
45429 
J9H 6K2 CANADA 
22206 
95051 
68588 
13069 
01754 
55455 
55455 
92634 



RAYMOND G. MORETZ JR. 

CARROLL MORGAN 

CHRISTINE MORRIS 

GREG MORRIS 

THOMAS M. MORRISETTE 

CHARLES Y. MORROW 

H. R. MORSE 

JOHN A. MORSE 

RICHARD D. MOSAK 

PAUL J. MOTZ 

I. A. MOULTRIE 

T. MOWCHANUK 

ARNOLD H. MUECKE 

ERIK T. MUELLER 

GEORGE H. MUELLER 

M. SHAHID MUJTABA 

GLEN R. J. MULES 

MAURICE R. MUNSIE 

GENE MURROW 

LARRY MUSBACH 

BOB MYERS 

GENE MYLES 

PHILIP R. MYLET 

JOHN NAGLE 

GEORGE NAGY 

ROBERT NARAD 

ISAAC R. NASSI 

DAVE NAUMAN 

JOHN NAUMAN 

THOMAS M. NEAL 



DAVID NEDLAND-SLATER GUI 4 80H UNITED KINGDOM 



ROBERT NEELY 

ROBERT D. NELL 

CRAIG NELSON 

BRUCE NERASE 

CHARLES NEUMANN 

MALCOLM C. NEWEY 

H. W. NEWLAND 

DENNIS NEWTON 

JAMES NICHOLS 

JEREMY S. NICHOLS 

MARTIN NICHOLS 

DENNIS NICKOLAI 

KELVIN B. NICOLLE 

J. F. NIEBLA 

CARL F. NIELSEN 

JAN HOJLUND NIELSEN 

PEDER NEDEBOL NIELSEN 

JOHN A. NIERENGARTEN 

MARY NOERENBERG 



UNITED KINGDOM 
S4P 2H8 CANADA 

32901 

55104 

63045 
2600 AUSTRALIA 
SE1 7NA UNITED KINGDOM 

94611 

03801 

55440 

07801 

92037 
5001 AUSTRALIA 

90803 

92123 
DK-1606 DENMARK 
DK-8200 DENMARK 

54601 

55409 



HANS NORDSTROM S-195 00 SWEDEN 

RON NORMAN N2C 2E0 CANADA 

ROBERT NORRIS 10965 

BILL NORTON 53115 

DICK NORTON 61801 

PAULA OCHS 97077 

MICHAEL OLFE 10028 

ARI OLIVE IRA 91303 

MARK L. OLSON 45701 

P. B. ORCHARD S022 4LD UNITED KINGDOM 

BOB ORR 78766 

84601 

48197 

55987 

21202 

10304 

99352 

55455 

90274 

49007 



FARREL OSTLER 
ROBERT M. OTTOS EN 
HUGH OUELLETTE 
WAYNE N. OVERMAN 
JOHN D. OWENS 
ALAN OYAMA 
STEVEN OYANAGI 
JOSEPH A. O'BRIEN 
MARK T. 0' BRYAN 
MAURICE 0' FLAHERTY BT36 8LF UNITED KINGDOM 
STEVE O'KEEFE 20229 
19104 
9700 AV THE NETHERLANDS 
01876 



JOSEPH O'ROURKE 

HARM PAAS 

BILL PAGE 

GARRETT PAINE 

THOMAS J. PALM 

JEFF PALMER 

KURT PAPKE 

JEFFRY L. PARKER 

RODNEY PARKIN 

KEVIN A. PARKS 

ROSS R. W. PARLETTE 

WALT PARRILL 

JOHN PARRY 

J. RICHARD PEARSON 

JOHN PEATMAN 

JOHN PEMBERTON 

RUSSELL J. PEPE 

JIM PERCHIK 

G. PEREZ 

DAVID PERLMAN 

ARTHUR PERLO 

PETER G. PERRY 

MIKE D. PESSONEY 

DAVID PETERSON 

ERVING S. PFAU 

GERALD PFEIFFER 

WILLIAM F. PHILLIPS 

T. L. PHINNEY 

D. T. PIELE 

ROBERT PIERCE 

DOUG PIHL 

I. PIRIE 

ALAIN PIROTTE 

STEPHEN M. PLATT 

SCOTT PLUNKETT 

JEFF L. POMEROY 

P. C. POOLE 

T. D. POPPENDIECK 

LUCIEN POTVIN 

WARREN G. POWELL 

GENE POWERS 

JACK POWERS 

KARL PRAGERSTORFER 

DAVID L. PRESSBERG 

MTCHAK1, PR1F.TUI.A 



91011 
98199 
67203 
55101 
94086 

2042 AUSTRALIA 
21234 
94083 
62025 

7005 AUSTRALIA 
80004 
30332 
94131 
08854 
02139 

2000 SOUTH AFRICA 
55427 
06520 

5109 AUSTRALIA 
35805 
01776 
70118 
75075 
92807 
85019 
53141 
78746 
55440 

2580 AUSTRALIA 
B-1170 BELGIUM 
19104 
96821 
55414 

3052 AUSTRALIA 
55104 
K2H 8S9 CANADA 
19144 
94596 
95193 
A-4020 AUSTRIA 
01880 
5 54') 5 



CHARLES PRINDLE 

MEL PRUIS 

LEO PUTCHINSKI 

DOUGLAS H. QUEBBEMAN 

E. H. RACHLIN 

J. E. RADUE 

JUAN RADULOVIC 

JOHN RAE 

RICK RAGER 

SUNDAR RAJARATNAM 

ROBERT J. RAKER 

STEVEN R. RAKITIN 

N. RAMACHANDRAN 

THEO RAMAKERS 

JAYASHREE RAMANATHAN 

PETER M. RAMS TAD 

LAURENCE L. RAPER 

CHARLES RAP IN 

ERNST WALTER RASCHNER 

WALTER J. RATAJ 

ROGER RATHBUN 

BRUCE W. RAVENEL 

BRUCE K. RAY 

LINDA LEA RAY 

PAUL MICHAEL REA 

GERHARD RECHEL 

CHARLES E. REED 

C. EDWARD REID 

ROBERT REINHARDT 

ROBERT RESS 

CRAIG W. REYNOLDS 

HONOR REYNOLDS 

SAMUEL M. REYNOLDS 

SAM E. RHOADS 

ROBERT L. RHODES 

L. RIANHARD 

LLOYD RICE 

DAN C. RICHARD 

CARL RICHARDS 

GARY A. RICHARDSON 

CHARLES RIDER 

JOHN E. RIEBER 

E. H. RIGBY 

DONALD H. RINGLER 

DAVID RIPLEY 

H. RISTITS 

KEN RITCHIE 

C. ROADS 

RALEIGH ROARK 

CARROLL B. ROBBINS JR. 

F. ERIC ROBERTS 

IAN ROBERTS 

J. D. ROBERTS 

MARK L. ROBERTS 

KEN ROBINSON 

PETER ROBINSON 

STEVEN ROGERS 

RONALD A. ROHRER 

FRED ROMEO 

MICHAEL ROONEY 

BOB ROOSTH 

ROBERT ROSE 

BRIAN ROSEN 

J. RKN ROSEN 

CAROLYN A. ROSENBERG 

J. ROSENBERG 

MICHAEL ROSENBERG 

ALAN ROSENFELD 

DAVID A. ROSSER 

RICHARD ROSS-LANGLEY 

RICHARD L. ROTH 

H. J. ROWE 

LAWRENCE A. ROWE 

DAVID ROWLAND 

STUART W. ROWLAND 

PETER ROWLEY 

CHARLES A. ROYNTON 

OSCAR RTOS 

IRA RUBEN 

LOUIS V. RUFFINO 

FRANK RUSKEY 

JOHN L. RUT IS 

P. E. RUTTER 

V. RYBACKI 

ODD W. RYDEN 

DAVID J. RYPKA 

JOHN RYZLAK 

D. E. SAARELA 

TIM J. SALO 

ARTHUR E. SALWIN 

WILLIAM SAMAYOA 

PAUL SAMSON 

ROBERT E. SANDERSON 

TOM SANDERSON 

TOM SANDERSON 

WAYNE A. SANDERSON 

FRODE SANDVIK 

GEORGE SARGENT 

NEIL SARNAK 

JAMES B. SAXE 

TOM SCALLY 

JOSEPH F. SCHAUB JR. 

WERNER SCHENK 

DONALD E. SCHLUTER 

G. MICHAEL SCHNEIDER 

CONRAD SCHNEIK.ER 

H. JAMES SCHNELKER 

RICHARD SCHROEDEL 

KENT SCHROEDER 

JAY SCHUMACHER 

ROLF SCHUMACHER 

BEN SCHWARTZ 

FRANK SCHWARTZ 

DAVID T. SCOTT 

WILLIAM H. SEAVER 

DUANE W. SEBEM 

MARK J. SEBERN 

JERRY W. SEGERS 

MARK SEIDEN 

LARRY SEILER 

MARK SENN 

A. SEWARDS 

JERRY SEWELL JR. 

GEORGE M. SHANNON 

IAN SHANNON 

JOSEPH "C. SHARP 

R. J. SHARPE 

D. E. SHAW 



10550 




JEFFRY G. SHAW 


94088 


49503 




JOHN M. SHAW 


20014 


75075 




ASHOK SHENOLIKAR 


11725 


47150 




AL SHEPPARD 


30313 


85019 




THOMAS E. SHIELDS 


22304 


4001 


SOUTH AFRICA 


P. L. SHIMER-ROWE 


93021 


10016 




KERRY SHORE 


55107 




NEW ZEALAND 


KEN SIBERZ 


90046 


92714 




LINDA SIENER 


95014 


560 012 


INDIA 


STEFAN M. SILVERSTON 


03060 


94104 




BILL SIMMONS 


55440 


07110 




DENNIS SIMMS 


80221 


20036 




THOMAS W. SKELTON 


48823 


13502 




JAMES K. SKILLING 


01740 


77025 




F. R. SKILTON 


L2S 3A1 CANADA 


55113 




C. R. SKUTT 


97034 


48076 




LES SLATER 


01862 


CH-1007 


SWITZERLAND 


CAROL SLEDGE 


15229 


D-4790 


GERMANY 


IRA SLODODIEN 


94104 


01824 




BARRY SMITH 


91107 


K7L 3N6 


CANADA 


BROOKS DAVID SMITH 


53211 


94109 




DAN SMITH 


65211 


80307 




JAMES A. SMITH 


N2L 3G1 CANADA 






JAMES E. SMITH 


02178 


92625 




KENNETH G. SMITH 


KOA 3G0 CANADA 


D-7000 


GERMANY 


LAWTHER 0. SMITH 


18936 


06608 




M. G. SMITH 


2600 AUSTRALIA 


32308 




RICHARD SNODGRASS 


15213 


YU-61001 


YUGOSLAVIA 


PAT SNYDER 


68025 


95826 




REGIS B. SNYDER JR 


60164 


94087 




JAMES SOLDERITSCH 


19085 


12305 




N. SOLNTSEFF 


L8S 4K1 CANADA 


91103 




SAMUEL SOLON 


94087 


96910 




MANFRED SOMMER 


D-8000 GERMANY 


91761 




LEE L. C. SORENSEN 


90604 


07960 




THOMAS J. SOUCY 


01905 


90404 




J. B. SOUTHCOTT 


5001 AUSTRALIA 


67226 




JOHN R. SOUVESTRE 


70005 


T2V 0H5 


CANADA 


TERRY L. SPEAR 


80302 


91303 




RICHARD SPELLERBERG 


55440 


91326 




LUTHER SPERBERG 


10010 


97005 




JOHN SPIKER 


91364 


2500 


AUSTRALIA 


RICHARD D. SPILLANE 


07666 


20601 




ROB SPRAY 


75240 


08540 




D. SPRIDGEON 


HU6 7RX UNITED KINGDOM 


L7P 1W9 


CANADA 


ALLEN SPRINGER 


02139 


68005 




LEONARD SPYKER 


3173 AUSTRALIA 


94025 




M. A. SRIDHAR 


560 003 INDIA 


98133 




G. J. STAALMAN 


THE NETHERLANDS 


28704 




BRIAN T. STACEY 


2193 SOUTH AFRICA 


06856 




BILL STACKHOUSE 


94903 


2006 


AUSTRALIA 


RICHARD STADTMILLER 


22091 


RG6 2AX 


UNITED KINGDOM 


KENDALL STAMBAUGH 


98225 


90274 




J. DENBIGH STARKEY 


99164 


S09 5NH 


UNITED KINGDOM 


MICHAEL K. STAUFFER 


94062 


CB2 3QG 


UNITED KINGDOM 


GARY B. STEBBINS 


98370 


45433 




E. L. STECHMANN 


55112 


04469 




CHARLES A. STEELE JR. 


01854 


11725 




GREG STEELE 


55435 


02154 




HEINZ STEGBAUER 


A-2340 AUSTRIA 


90245 




MARK STEPHENS 


99123 


22043 




NIGEL STEPHENS 


GU7 2DP UNITED KINGDOM 


15213 




JACK STEVE 


83814 


55455 




DAVE STEVENS 


V5A 1A6 CANADA 


90266 




ROBERT K. STEVENS 


33432 


3168 


AUSTRALIA 


MAUREEN J. STILLMAN 


02173 


10020 




R. D. STINAFF 


60004 


97223 




A. I. STOCKS 


33319 


96274 




JERRY STODDARD 


55440 


AL3 6BL UNITED KINGDOM 


RICHARD A. STONE 


55435 


06468 




ENGELBERT STORK : 


S-442 00 SWEDEN 


LEI 7RH 


UNITED KINGDOM 


ROBERT STRADER 


44139 


94720 




ALAN STRELZOFF 


02062 


97201 




B. STRONG 


2146 SOUTH AFRICA 


44124 




JAMES F. SULLIVAN 


92707 


H9R 1T9 


CANADA 


R. K. SUMMIT 


94304 


M4S 1J7 


CANADA 


MARKKU SUNI 1 


SF-20500 FINLAND 


92713 




SILVIA SUSSMAN 


NN7 3LJ UNITED KINGDOM 


19002 




A. J. SUTTON 


27101 


20854 




MARY SUTTON 


H4T INI CANADA 


V8W 2Y2 


CANADA 


STANLEY M. SUTTON 


77092 


97106 




EDGAR N. SVENDSEN 


45840 


07733 




LARS Y. SVENSSON 


S-440 74 SWEDEN 


WC1 


UNITED KINGDOM 


STANLEY M. SWANSON 


77843 


01851 




E. G. SWARTZMEYER 


30303 


*>0540 




S. D. SWIERSTRA 


THE NETHERLANDS 


07430 




RICHARD TABOR 


95014 


55424 




A. E. TADASHI 


730 JAPAN 


55455 




S. TAKAGI 


244 JAPAN 


22209 




KEN TAKAHASHI 


01730 


55901 




RAMON TAN 


10016 


98033 




HIDEHIKO TANAKA 


10031 


98846 




ANDREW S. TANENBAUM 


1007 MC THE NETHERLANDS 


91311 




BRADLEY M. TATE 


75240 


87002 




BRUCE TAYLOR 


2064 AUSTRALIA 


55112 




DAVID K. TAYLOR 


55812 


N-7034 


NORWAY 


RICHARD N. TAYLOR 


98055 


48804 




S. TAYLOR-REED 


LN12 1NQ UNITED KINGDOM 


2195 


SOUTH AFRICA 


F. TEMPEREAU 


92127 


15213 




R. D. TENNENT 


K7L 3N6 CANADA 


11040 




MICHAEL TEPPER 


D-1000 GERMANY 


10577 




S. S. THAKKAR 


Ml 3 9PL UNITED KINGDOM 


14580 




PRAKASH THATTE 


60164 


90302 




RICK THOMAS 


20012 


55455 




RON THOMAS 


55435 


95051 




CHARLES THOMPSON 


V6P 5S2 CANADA 


80123 




LADONNA THOMPSON 


55424 


55427 




PAUL THOMPSON 


55441 


55435 




JIM -THOMSON 


95540 


80302 




DENNIS K. THORSON 


07922 


D-2000 


GERMANY 


LAVINE THRAILKILL 


40506 


07821 




COYT C. TILLMAN JR. 


02139 


02173 




PATRICIA TIMPANARO 


22003 


87112 




HERVE TIREFORD 


CH-1211 SWITZERLAND 


92626 




ROBERT TISCHER 


DK-2000 DENMARK 


55372 




KEITH TIZZARD 


EX4 4PU UNITED KINGDOM 


1 53012 




JEFFREY TOBIAS 


2232 AUSTRALIA 


; 30332 




NOBUKI TOKURA 


560 JAPAN 


1 10598 




THOMAS TOLLEFSEN 


95442 


91125 
[ 47905 




MASAYUKI TOMIMURO 


99164 




ROGER TOREN 


V5A 1S6 CANADA 


K2K 1N8 


CANADA 


SCOTT R. TRAPPE 


97206 


97229 




MARIUS TROOST 


92713 


1 02173 




JAY TROW 


78704 


[ 2010 


AUSTRALIA 


TAZUYKI TSUNEZUMI 


95051 


94303 




RICHARD L. TUCKER 


45324 


; 2601 


AUSTRALIA 


JIM TURLEY 


80020 


I V7R 4L6 


CANADA 


J. TURNBULL 


Ml 7 ED UNITED KINGDOM 



PRESCOTT TURNER 

ROGER I. TURNER 

ROBERT W. TUTTLE 

P. J. TYERS 

GORDON UBER 

CHOI UISIK 

p. G. URMSON 

TOM URSIN 

KAZUO USHIJIMA 

LAURIE DAVIES VALLENTINE 

DICK VAN DEN BURG 

P. J. VAN DER HOFF 

S. VAN ERP 

DICK VAN LEER 

PIERRE VAN NYPELSTEER 

JOHN VAN ROEKEL 

DWIGHT VANDENBERGHE 

MICHAEL W. VANNIER 

W. VAUGHN 

JAMES A. VELLENGA 

P. VERBAETEN 

M. H. VERHAART 

JIM VERNON 

VINCENT VIGUS 

RICHARD C. VILE JR. 

JOHN V. VILKAITIS 

ADRIAN VILLANUSTRE 

RICHARD VILMUR 

ROBERT VINCENT 

JOHN S. WADDELL 

C. J. WADDINGTON 

BOB WALLACE 

C. S. WALLACE 

DAVE WALLACE 

DAVID R. WALLACE 

BRUCE D. WALSH 

DAVID P. WALSH 

MARIE WALTER 

DAVID WARD 

MIKE WARDALE 

SCOTT K. WARREN 

ALLEN A. WATSON 

JOHN L. WEAVER 

L. KIRK WEBB 

NEIL W. WEBRE 

WALTER WEHINGER 

DAVID M. WEIBLE 

KEVIN WEILER 

RUTH WEINBERG 

LEN WEISBERG 

JOE WEISMAN 

RAY WEISS 

J. R. WE IS TART 

TOM WEISZ 

ANTHONY B. WELLER 

PETER WENTWORTH 

BOB WERNER 



02162 

UNITED KINGDOM 
06520 

3168 AUSTRALIA 
10591 
95129 

4001 SOUTH AFRICA 
55440 

812 JAPAN 
04-01 MALAYSIA 
1183 AV THE NETHERLANDS 
2651 VN THE NETHERLANDS 
78731 
94545 
B-1050 BELGIUM 
48176 
98133 
63110 
85019 
55440 
B-3030 BELGIUM 

NEW ZEALAND 
55440 
92634 
48106 
06787 
RA-1425 ARGENTINA 
60104 
01880 
45387 
55455 
98007 

3168 AUSTRALIA 
94598 
85021 
91301 
20901 
92714 
K1A 0R6 CANADA 
MIR 5A6 CANADA 
77005 
07602 
79604 
78712 
93407 
D-7000 GERMANY 
60680 
15213 

ISRAEL 
94304 
95452 
90801 
62563 
48103 
WC1H OAH UNITED KINGDOM 
6000 SOUTH AFRICA 
52333 



JOHN P. WEST 30327 
DANA WHEELER 94707 
NORM WHEELER 90230 
DONALD E. WHILE 44141 
C. G. WHITAKER MK43 OAL UNITED KINGDOM 
N. WHITE ST5 5BG UNITED KINGDOM 
L. P. WHITEHEAD 3131 AUSTRALIA 

P. WHITEHEAD SW7 2BX UNITED KINGDOM 
AKE WIKSTROM S-402 20 SWEDEN 
D. M. WILBORN 90746 
ALAIN D. D. WILLIAMS NW11 8DP UNITED KINGDOM 



C. J. WILLIAMS 

KIM WILLIAMS 

NIGEL WILLIAMS 

H. WILLMAN 

ROY A. WILSKER 

FRED WILSON 

JAN R. WILSON 

ROBERT WILSON 

JIM WINSALLER 

LEESON J. I. WINTER 

DAVID S. WISE 

MARK WOLCOTT 

CHARLES A. WOLFE 

TOM WOLFE 

HENRY WOOD 

STEPHEN E. WOODBRIDGE 

ANDREW S. WOYAK 

DON M. WRATHALL 

H. R. WRIGHT 

TOM WRIGHT 

RUDOLF F. WROBEL 

JOHN C. WYMAN 

MICHAEL T. WYMAN 

MINEO YAMAKAWA 

EARL M. YARNER 

D. J. YATES 

BRADLEY N. YEARWOOD 

KIET T. YEN 

FRANCIS W. YEUNG 



M3A 1M3 CANADA 
V3N 4N8 CANADA 

7007 AUSTRALIA 
>J1730 

02114 

91602 

70808 
L6T 3Y3 CANADA 

93111 

01720 

47401 

48130 

91342 

91107 

08540 

32905 

55405 

85704 

19102 

55420 

66216 

13206 

02154 

73190 

02168 
4067 AUSTRALIA 

90024 

55455 

18976 



PERTTI YLINEN SF-33900 FINLAND 



CHRISTOPHER YORK 

JAMES YORK 

H. YOSHIDA 

R. M. YOUNG 

COLEMAN YOUNGDAHL 

ALEXANDER YUILL-THORNTON II 

PETER H. ZECHMEISTER 

R. ZECTZER 

ERWIN ZEDNIK 

FRED ZEISE 

PETE ZIEBELMAN 

STEPHEN N. ZILLES 

ANDREW HARRIS ZIMMERMAN 

PHILIP R. ZIMMERMAN JR. 

DONALD A. ZOCCHI 

TOM ZWITTER 



10028 
92805 
02173 
J8X 1C6 CANADA 
95476 
94941 
55455 
3000 AUSTRALIA 
D-8000 GERMANY 
95051 
77036 
95030 
95132 
80302 
97005 
44022 



Nftws 

Business Packages available 



Cyber-Score Inc, Software Dept, Suite 406 - The Riker Building, 35 West Huron Street, 
Pontiac, Michigan 48058 (313-338-6317) have advertised Pascal-written software that 
includes Depreciation, Interest, Checking, Metric, Base2816, Sortl, Sort2, Forml040, 
Stocks, Handicap, Calculator, Decision, and Vol 2 for Business soon to be released. 

NorthWest Microcomputer Systems, 121 East Eleventh Street, Eugene, Oregon 97401 
(503-485-0626) have vintage turnkey business systems, including Accounts Receivable, Word 
Processing, Client Information Management, General Ledger, Fuel Dispensing & Accounting. 

P.S.Inc, Fargo, North Dakota have Pascal business accounting packages including a general 
ledger, accounts payable, accounts receivable, inventory control, order entry. All seem 
to be linked together into a single comprehensive system. 

Interactive Technology Inc, 14350 NW Science Park Drive, Portland, Oregon 97229 
(503-644-0111) are "simply ecstatic over recent articles and the general enthusiasm that 
is growing for Pascal." In a recent letter, they gave us a lot of information on their 
plans (see Open Forum) . 

This happily matches up with the requests from James A. Anderson, Arnold Bob, Ken Leese, 
Monte Jay Meldman and Nield Overton, who are all looking for business-applications 
software. (See Here and There (Tidbits) Section except for Ken.) 

Data -Base Management Systems 



Wilhelm Burger in Texas is working on a DBMS system in Pascal. Its seems he is working 
with the AAEC IBM 360/370 Pascal, and has a Parser Generator, but is now working on the 
Data Base Manager. 



Boeing Computer Services in Seattle 
management system in Pascal. 

Interpreters 



***************** 



An APL interpreter written in Pascal won the first prize in the "Great APL Contest" of 
Byte Magazine. The authors were Alan Kaniss, Vincent DiChristofaro & John Saritlai of 1327 
McKinley Street, Philadelphia PA 19111. The program is described in Byte, June 1979, for 
those interested. 






Washington is developing a sophisticated data base (-^ 



Introduction 



The application notes introduced a few issues ago continue to flourish. However we do 
have some problems at PN headquarters in checking the quality of programs submitted, and 
therefore we welcome any comment or certification of correctness by readers. 

This section has elicited much favourable comment. Our thanks to those members who wrote 
in to let us know what they thought, and especially to those who submitted programs. 



Applications 



A portable LISP interpreter has been developed under Contract W-7405-ENG-48 for the US 
Department of Energy by L.A-Cox and W.P.Taylor. The Report is available from NTIS as 
Order Number #UCRL-52417 at $4.00 per paper copy. The title is "A Portable LISP 
Interpreter", and the complete interpreter (in Pascal) is given. Cox & Taylor worked for 
UC Lawrence Livermore Laboratory, Liver mo re, CA. 

Inter-language translators 



Roy Freak at the University of Tasmania has written a Fortran to Pascal translator which 
has successfully translated over 170 Fortran programs into Pascal, including some 
difficult examples from Ed Yourdon's books and some Fortran test programs that found their 
way into the Pascal Validation Suite (for testing the accuracy of sin, cos, etc). 

The translator makes an extensive analysis of the Fortran text, and is about the size of a 
large compiler. It is designed both to preserve equivalence in its transformations and to 
produce as good Pascal as can be achieved. It analyses expressions to see where Pascal's 
precedence rules require extra parentheses, analyses the control flow structure to try to 
produce whiles, ifs, cases, etc from Fortran's constructs, and analyses the call structure 



Applications 



so that it can nest procedure subprograms as deeply as their usage allows. It also 
handles COMMON and EQUIVALENCE by making some assumptions about Pascal representation 
mapping. These extensive analyses make the translation a relatively slow process for some 
of those very large complicated Fortran programs one sees sometimes, but most programs or 
subprograms are translatable in a reasonable time (limited by lexical analysis and other 
factors) . 

The translator does not handle Fortran I/O (because it needs run-time information to do a 
complete job, or knowledge of intent), nor does it handle adjustable arrays completely 
(because the facility is not in Pascal). Outside these restrictions however, the 
translated Pascal version should be ready to compile, or to be massaged by hand should the 
user have to cope with non-standard Fortran or wish to improve the program. Unfortunately 
the translator runs only on Burroughs B6700 computers (and compatible machines) because it 
is written in Burroughs Algol and uses random-access disk files to store its program 
blocks. 

Bits & Pieces 

William G Hutchison wins our "PUG Friend of the Month" award. With all the interesting 
information received, a virtual Captain Pascal Magic Ring is on its way. Bill writes: 



"1. Glad you liked the LLL Lisp system, 
system. 



It looks like a very clean and extendable 



"2. It appears that the Kernighan & Plauger "Software Tools" may soon be available in 
Pascal. See the writeup from the Ratfor Newsletter - "Rat Informant". Names like PUG and 
RAT are so bad they give me MUMPS i 

"3. Newman & Sproull "Principles of Interactive Computer Graphics" Second Edition 
McGraw-Hill 1979 uses Pascal to "publish" graphics algorithms. Unfortunately, they merely 
left out the hidden line program listings, rather than be bothered to translate them from 
SAIL to Pascal. So the new edition is streamlined, but less complete. 

"4. I would like to use the programs published in the PN, but I can't use any of them. 
They all use Standard Pascal or extension features not available in the P4 subset, which 
is all that I have at my disposal." 



{ P4 is neither a subset of Pascal, nor an acceptable standard, 
to implement all of Pascal. > 



We encourage PUG members 



{ The extract from Rat Informant reads: "Several people have attempted translations from 
Ratfor to other languages including Pascal, C, Algol, BCPL, and Basic (yes, even Basic 
...)." This may not mean what Bill thinks, but it is intriguing to speculate on what 
might happen if all the Software Tools were to be pascalized, perhaps by the Fortran to 
Pascal translator. } 

Donald Knuth has developed a system called TEX (Tau Epsilon Xi — rhymes with "Tech") for 
producing beautiful typography for programs and programmers (including mathematicians as a 
subset of the above) . See the article "Mathematical Typography" in the Bulletin of the 
American Mathematical Society, Vol 1 No 2 March 1979 (New Series). We understand that the 
original program, written in SAIL (or MAINSAIL, we're not too sure) is being translated 
into Pascal and this version will be the eventually published one. All Pascalers will 
applaud using Pascal to bootstrap more elegance into our systems. 

Rich Cichelli reports that ANPA/RI are close to having an enhanced version of the North 
American Philips conformity checker for Pascal. He says it is a priority project at 
ANPA/RI . 



Software Tools 

Changes to S-l "Compare" (See PN#12, June 1978, page 20.) 

Willett Kempton has certified use of Compare (Software Tool S-l), and sent in some 
corrections to fix up a bug and improve the product. We are publishing the comparison 
output of Compare run on itself and on its enhanced brother below together with the 
letter. Readers will undoubtedly note that the version of Compare used to produce the 
listing has -*—'---■ - - - - - - 

version, 
the 



GO 

3> 



few (no doubt machine-dependent) features not in the standard-conforming 

^ The letters "a" and "b" at the left margin indicate the source of the lines, and 

marks the line changes where these are minor. We have heard of many other places 



where Compare has been used successfully. 



UNIVERSITY OF CALIFORNIA, BERKELEY 



HKHKELEY • DAVIS 



' IRVINE ♦ LOS ANGELES • RIVERSIDE • SAN DIEGO • SAN FRANCISCO 




• SANTA CRUZ 



PROGRAM IN QUANTITATIVE ANTHROPOLOGY 
DEPARTMENT OF ANTHROPOLOGY 



2220 PIEDMONT AVENUE 
BERKELEY, CALIFORNIA 94720 



Dear Jim, 



Your compare program replaced a more primitive one written here and has 
been very helpful. It ran without modification on both our PDP 11 (UNIX) and 
CDC 6400 systems, and with minor modifications now runs on our DG ECLIPSE AOS 
(P4 Pascal) system. 

I enclose two mods which I believe are worth making to the distribution 
version; these 1) plug a hole, and 2) make it more useful for data files. 
More specifically: 

1) If the original version says "no differences", you cannot count on 
the files being the same. They may contain lines longer than Linelength, and 
lines are not checked past that point. A check and warning are added in the 
enclosed version. 

2) The original output display was fine for program source files, but 
very poor for fixed format data files (which presumably abound in a Social 
Science Research Facilities Center) . The modified version pairs mismatched 

lines and points out differences with an arrow. It only does this if the mismatching 

sections are the same number of lines (usually one) on each file. The output 

was also made a little more compact, despite the fact that it now contains 

more information. THis may seem like a frill if you haven't had to work with 

long data files, but it saves considerable time and keeps our coders from going 

blind. It does not seem particularly useful for source program files, and 

can be turned off by setting a constant FALSE. 

To facilitate inspection of these mods, I enclose our complete modified 
version, and output COMPAREing the version published in PASCAL NEWS (file a) 
with our version (file b). To see its use on data files, I also enclose 
output from one of our applications. Together, these mods increase the length 
of the source program about 15%, and seem to have no appreciable effect on 
execution time. 

Thank you for making this software available to the Pascal user community. 
I hope you find the enclosed material of use. 

Sincerely, 






Willett Kempton 




CD 

m 

ho 
oo 



compare, version 1.3 (7 Nov 78) 

natch criterion = 3 lines. 

filea: compare .origin 
fileb: compare. new 

************************************ 

on fileb, between lines 46 and 47 of filea 



extra 


tsxt 


b 


47 


b 


48 


b 


4? 


b 


53 


b 


51 


b 


52 


b 


53 


b 


54 


b 


55 



Another program parameter (constant), "Markuneqja I coIut,"»s", 
-- al lines are found, each line frcn 




************************************ 
mismatch: filea, line 63 not equal to fileb, line 72: 

a 63 version = «1.2p (78/03/01)*; 
b 72 version = '1.3 (7 Nov 78)'; 



************************************ 
extra text: on fileb, between lines 66 and 67 of filea 



75 

77 



markunequalcolumns = true; 



{ IF UNEQUAL LIMES UE TO 3E PAIRED, > 
{ AND UNE3UAL COLUMNS MARKED ) 



************************************ 
extra text: on fileb, between lines 78 and 79 of filea 



93 



name : char; 



************************************ 
extra text: on fileb, between lines ?S and 99 of filea 



linestoolong : boolean; 



{ FLAG IF SOME LINES NOT COMPLETELY CHEC<Ef 



************ 
extra text: on fileb, 



*********************** 
between lines 151 and 152 of filea 



165 



mismatch 


a 


285 


a 


286 


a 


287 


a 


283 


a 


289 


a 


290 


a 


291 


a 


292 


b 


299 


b 


303 


b 


301 


b 


302 


b 


303 


b 


304 


b 


305 


b 


306 


b 


307 


b 


303 


b 


309 


b 


313 


b 


311 


b 


312 


b 


313 



if not eoln(filex) then linestoolong := true; 

fileb, lines 299 thru 316: 



*********************************** 

filea, lines 285 thru 292 not equal to 



procedure writetext(p, q : linepoi nter ); 
begin { WRITETEXT } 
write In; 

while (p <> nil) and (d <> q) do 
begin writeC * '); 

if p". length = then writeln 

else writeln(p* .image : p'-Xength); 

p := p".nextline 

procedure wr i teone line (name : char; I : integer; p 

begin {. WR ITEONELINS > 

writeC *, name, 1:5,' '); 
if p". length = then writeln 
else write ln(p". image : p". length); 

end; { WRITEONELINE > 

procedure writetex t (var x : stream); 

{ WRITE FROM X.HEAD TO 0^ E LINE 8EF0RE X. CURSOR } 
var 

p, q : linepointer; lineno : integer; 
begin { WRITETEXT > 

p:=x.head; q :=x .cj rsor ; li neno: =x .head I i neno; 
while (p <> nil) and (p <> q) do 
begin 



linepointer); 



b 314 
b 315 
b 316 



wri teonel ine ( x.name, lineno, o); 
p := p*.nextline; 
lineno := lineno + 1; 



************************************ 
extra text: on fileb, between lines 297 and 2?3 of filea 






322 
323 
324 
325 
326 
327 
323 
329 
333 
331 
332 
333 
334 
335 
336 
337 
333 
33? 
340 
341 
342 
343 



procedure w 
< THIS WR 
{ UNIL<E 
{ COMPARE 
var 

tempa, te 

col, maxc 

begin { WR 

repeat 

wri teon 

unpack ( 

if pa~ . 

write( ' 
for col 
if 
writeln; 
pa := pa 
pb := pb 
until (o3 
end; { WRIT 



ritepairs( pa, Db : lineoointer; la, lb : inteaer); 
ITES FROM THE HEAD TO THE CURSOR, LIKE PROCEDURE ^RJTl-TEyT. ) 
PROCEDURE WRITETEXT, this WRITES FROM BD^ FILES AT C\CZ , } 

S COLUMNS WITHIN LINES, AND MARKS UNEQUAL COLUMNS } 

mpb : array C1 . . li ne length} of char; 
ol : integer; 
ITEPAIRS > 



eline('a», la. Da); wri teone li ne (' b » , lb, 
pa". image, tempa,1); u.naackCpb*. image, terip 

length > pb*. length 

then max col := pa". length else max col := o 

': 11); £11 spaces used for file name and 

:= 1 to maxcol do 

tempaCcolJ = tempbCcoU then writeC •) el 
writeln; 

".nextline; la := la + 1; 

".nextline; lb := lb + 1; 

= a. cursor) or (Da = nil); 

EPAIRS } 



pb) ; 
b,1); 



b~. length ; 
line nj nb 



************************************ 
mismatch: filea, line 305 not equal to fileb, line 351: 



a 305 
b 351 



else writeCs ', f:1, • to ', 1:1); 
else writeCs •, f:1, • thru *, 1:1); 



************************************ 

filea, lines 309 thru 319 not equal to fileb, lines 355 thru 566 

procedure pri ntext rat ext (va r x : stream; xname : char; 

var y : stream; yname : char); 
begin { PRINTEXTRATEXT } 

writeC extra text on file', xname, ', '); 
write li neno (x ); writeln; 
if y .head = nil then 

writelnC before eof on file', yname) 
else 

writelnC 1 between lines *, y ,h ead I i neno-l : 1 , • and ', 
y.headlineno:1, ' of file', yname); 
wri tetext (x .head, x. cursor) 

procedure pri ntext ratext(v3 r x, y : stream); 

begin < PRINTEXTRATEXT ) 

writeC extra text: on file', x.name, ', •); 

if y.head = nil then 

writelnC before eof on file 1 , y.name) 
else 

writelnC between lines ', y.head I ineno-1 :1 , • and ', 
y .head lineno: 1, * of file 1 , y.name); 
write In; 
writetext(x) 

************************************ 

filea, line 323 not equal to fileb, line 370: 

write In (' *****************************+******• ); 
writelnC' *:11, •****************-******************** ') ; 



***************************** ******* 
mismatch: filea, lines 327 thru 335 not equal to fileb, lines 374 tnru 3o6: 



ismatch : 


a 


309 


a 


313 


a 


311 


a 


312 


a 


313 


a 


314 


a 


315 


a 


315 


a 


317 


a 


318 


a 


319 


b 


355 


b 


356 


b 


357 


b 


353 


b 


359 


b 


360 


b 


361 


b 


362 


b 


363 


b 


364 


b 


365 


b 


355 


ismatch : 


a 


323 


b 


373 



3> 






327 



if emptya then pr inte xt ratsx t (b, 'b' 



a 


328 


a 


32? 


a 


333 


a 


331 


a 


332 


a 


333 


a 


334 


a 


335 


b 


374 


b 


375 


b 


376 


b 


377 


b 


37B 


b 


37? 


b 


380 


b 


381 


b 


382 


b 


383 


b 


384 


b 


385 


b 


385 



else printextratext(a, «a«, b, 'b') 
else 

begin 

writelnC mismatch:'); writeln; 

writeC filea, '); - ri te Li neno (a) ; wnteln( : ); 

*ritetext(a.head, a. cursor); 

writeC fileb, '); - ri teli neno(b) ; wntelnC.'), 

writetext (b .head, b. cursor) 

if e-nptya then pr intext ratext (o, a) 
else printextratext (a, b) 
else 
begin 

* ri te( ' mismatch : ' ) ; 
writeC filea, '); * ri te li neno (a ) ; 
writeC fileb, '); w ri te li neno(b) ; 
if markunequalcolumns and 

a.hsadlineno) = (b . cursor 1 1 neno - b.h?,dl ,n-.nnjj 



w r i t e ( ' not equal to 
write tn <■:■>; write In; 



( (a .cursor I ineno 



then 



writepairsO.head, b.head, a . head li neno, b .hea d li neno ) 



else ,- . 

begin writetex t (a) ; writetext(o) end 

************************************ 
extra text: on fileb, between lines 374 and 375 of filea 

b 425 a. name := "a 1 ; b.nane := 'b'; 
b 427 linestoolong := false; 



*********** 



******** 



extra text: 

b 447 

b 448 

b 44? 

b 453 

b 451 

b 452 



n fileb, between lines 393 and 394 of filea 
if linestoolong then 

bCg writeln(' 1 WARNING: some lines were longer than ', 
* ri linelength:1, ' characters.'); 



wr ite ln( ' 



they were not comoa 



red past that point. 



S-2 "Augment " and "Analyze" (See PN#12, June 1978, page 23.) 

Sam Hills, Crescent City Computer Club, New Orleans, has prepared a machine-dependent 
version of Augment and Analyze for the Zurich dialect of the Dec-10 Pascal, and is workxng 
on a similar modification to accept a new dialect from the University of Texas. The 
program is available presumably, with documentation, from Sam Hills, 3514 Louisiana Avenue 
Parkway, New Orleans, LA 70125 (79 Apr 16). 

{ Note that this version is ONLY useful to DEC-10 users; it accepts non-standard 
statements as input and has various "chaining" features. > 

S-3 "Prettyprint" (See PN#13, December 1978, page 34.) 



University of Lancaster 



Department of Computer Studies 

Bailrigg, Lancaster 

Telephone Lancaster 65201 (std 0524) 



Professor Bryan Higman, B.Sc, M.A. 



25th April 1979. 



Dear Andy, 



With respect to program FORMATTER (Pascal News ft 13) , with which 
you claim some acquaintance, there is a credibility problem. I do not 
believe that the program published was used to produce the version that 
was published. My reason for saying this concerns the treatment of the 
compound symbol .. used to denote subranges. That part of the body of 
procedure readsymbol which attempts to recognise a number (lines 661 - 
680 in the program in Pascal News /=/ 13) cannot possibly have inserted 
a space following the subrange symbol and preceding the B in, for 
example, lines 59, 60, 63. The spaces must be inserted between the B 
and the U in each of the three cases cited. (The same would also be 
true had these identifiers started with E rather than B, for reasons 
which should be obvious). One solution is to modify readsymbol by 
'borrowing' an appropriate piece of logic from the Pascal compiler, 
though there may be neater ways. I do not yet have an alternative 
solution to offer. 

This problem came to light when a few enthusiastic colleagues and 
myself decided to punch up and use the Formatter, and our output did 
not look as we were led to expect! Nonetheless, we were very pleased 
to have the text cf the Formatter published and you have our thanks for 
this. Maybe someone who has more time to produce a 'mend' will write 
to Pascal News - I hope so. 



Best Wishes, 



Yours sincerely, 



feo V 



h 



-o 

3> 

GO 



Unfortunately, we've misplaced a letter from an eagle-eyed reader which complained about a 
conflict in the documentation for PRETTY. Indentation Rule 3 clearly states the style for 
IF-THEN-ELSE. However, lines 336-356 of the source program clearly show that Prettyprxnt 
processing itself can produce different results. The reason is that General Pretty 
printing rule 1 overrides all other rules. In a sense, then, blank lines and blanks are 
directives to the pretty printer. 

S-4 "Format" (See PN#13, December 19 78, page 45.) 

We received many reports (unfortunately) of bugs in Format. For example, George Gonzales 
has sent a corrected though heavily modified version, fixing more than a dozen problems. 
We plan to print a list of corrections as soon as we can find the time. Bob Berry sent 
the nice letter below: 



TRUE CONFESSIONS 



I (Andy) shamefacedly admit to having edited the ".." symbol in several places. What 
happened was this: as I was preparing the source of Format for publication I noticed 
several bothersome rough places. One of these was no blank preceding some occurrences of 
"..". Because this appeared in both the source and the result of Format run on itself, I 
edited the result not thinking that this was an ingrained symptom of Format being 
continually run across itself (well before I received it). Another rough spot I confess 
to "fixing" was the ugly breaking upon wraparound of several expressions in assignment 
statements. I'm very sorry. 



-O 

3» 



S-5 ID2ID 



Recoding a Pascal Program Using ID2ID 

Andy Mickel 

University Computer Center 

University of Minnesota 

Minneapolis, MN 55455 USA 

Copyright (c) 1979. 



What ID2ID Does 



ID2ID is a program designed to quickly and accurately edit the text of a Pascal 
program by substituting new identifiers for existing ones. A typical use might be to 
recode a program with longer, more descriptive identifiers to enhance the program's 
readability. 

Ordinary text editors are not necessarily good to use for this purpose because each 
identifier substitution requires one pass through the entire text of the source program. 
Also many text editors do not easily provide the means to distinguish whole identifiers 
from those identifiers which happen to contain other identifiers (for example, "int" 
versus "integer"). 



How ID2ID Works 



ID2ID accepts two input files: "SOURCE", a text file consisting of a Pascal source 
program, and "IDPAIRS" a text file consisting of pairs of identifiers in the form: 
OLDID,NEWID one pair to a line. 

An identifier in a Pascal program consists of a letter followed by zero or more 
letters or digits. ID2ID imposes a practical maximum length of 25 characters for any 
identifier. This means that ID2ID will not distinguish between two identifiers which do 
not differ in their first 25 characters. 

ID2ID reads the file of identifier pairs and builds a search tree which is then used 
to look up identifiers during the scanning of the source program. Two output files are 
generated: "TARGET", a text file consisting of the edited source of the Pascal program 
with new identifiers and "REPORT", a text file consisting of warning and error messages 
accumulated during editing. 

Several situations can pose problems to the process of identifier substitution: 

1. An "oldid" may appear more than once in the IDPAIRS file. This prevents a 
unique substitution, and ID2ID halts and displays the message :» "DUPLICATE OLDID: ". 

2. A warning message is issued in the case of duplicate "newid's". This is just to 
let you know that you may not have intended to rename two "oldid' s" to the same "newid". 

3. A warning message is issued if ID2ID encounters a program "sourceid" which is 
the same as a "newid". You may not have realized that you picked a "newid" which already 
existed as an identifier in the source program. 



Of course an "oldid" in one "oldid, newid" 
"newid" in a different "oldid, newid" pair. 



pair may have the same spelling as 



In scanning the source program, ID2ID recognizes all identifiers including Pascal 

reserved words. Of course, identifiers within comments and strings are unchanged. The 

"E" used to specify exponents in real numbers is distinguished from an ordinary 
identifier spelled "E". 



How to Use ID2ID 



ID2ID is available as an operating-system control statement on CDC 6000/Cyber 70,170 
computer systems. The general form of the control statement is: 

ID2LD (SOURCE, TARGET, IDPAIRS, REPORT) 

Assuming SOURCE and IDPAIRS are local files, ID2ID will produce results on files 
TARGET and REPORT. For example: 



3> 



Suppose SOURCE is: 



PROGRAM EXAMPLE (OUTPUT); 

VAR VARA, VARX, VARY: INTEGER; 
BEGIN 

VARX := 24; 

VARY := 80; 

VARA := VARX * VARY; 

WRITELNC CHARACTERS = ', VARA) 
END. 

and IDPAIRS is: 

VARA, CHARACTERS 

VARX, LINES 

VARY , CHARSPERLINE 

then the TARGET produced by ID2ID is: 

PROGRAM EXAMPLE (OUTPUT); 

VAR CHARACTERS, LINES, CHARSPERLINE: INTEGER; 
BEGIN 

LINES := 24; 

CHARSPERLINE := 80; 

CHARACTERS := LINES * CHARSPERLINE; 

WRITELNC CHARACTERS = ', CHARACTERS) 
END. 

ID2ID uses an AVL-balanced binary tree of identifiers, so it is not affected by the 
order in which the identifier pairs are presented on the IDPAIRS file. The above program 
was processed in 0.043 seconds by ID2ID on a Cyber 172 computer using Pascal-6000 Release 
3. A program consisting of 891 identifiers on 400 lines was processed with ID2ID with 58 
pairs of identifier substitutions in 1.624 seconds on a 172 using Release 3- 



History 



ID2ID was originally designed and written by John T. Easton and James F. Miner at 
the Social Science Research Facilities Center in 1976 to provide a reliable means of 
transforming poorly coded Pascal programs into tolerable ones. Subsequent refinements 
were added by Andy Mickel and Rick L. Marcus at the University Computer Center in 1978 
to improve its ease of use and its error processing. 

ID2ID was redesigned in 1979 by James F. Miner and Andy Mickel to incorporate a 
better identifier table and secure error processing. This necessitated a complete 
rewrite of the program. ID2ID has now joined a long list of other Pascal software- 
writing tools. 



3> 



1 

2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
66 



ID2ID - Rename Identifiers In a Pascal Program. 

James F. Miner 79/06/01. 

Social Science Research Facilities Center. 
Andy Mickel 79/06/28. 

University Computer Center 
University of Minnesota 
Minneapolis, MN 55455 USA Copyright (c) 1979. 

(Based on an earlier version by John T. Easton and 
James F. Miner, 76/11/29, as modified by Andy Mickel 
and Rick L. Marcus, 78/12/08) 

THE NAMES AND ORGANIZATIONS GIVEN HERE MUST NOT BE DELETED 
IN ANY USE OF THIS PROGRAM. 

See the PTOOLS writeup for external documentation. 



ID2ID - Internal documentation. 

ID2ID reads a file of IDPAIRS and builds an AVL-balanced 
binary tree of identifiers while checking for duplicates. It 
then reads the SOURCE program and edits it to a TARGET file by 
substituting identifiers found in the tree. A final check is 
made for new identifiers which were already seen in the 
SOURCE, and a REPORT may be generated. 



program ID2ID( Source, Target, IdPairs, Report); 

label 

13 { FOR FATAL ERRORS >; 



const 

MaxLength =25; 
Blanks = ' 



< MUST BE MaxLength LONG >; 



type 

Char Set 

IdLength 

IdType 



set of Char ; 
1 .. MaxLength; 
record 

Name: packed array [IdLength] of_ Char; 
Leng th : IdLeng th 
end ; 
Balance - (HigherLeft, Even, HigherRight) ; 
NodePtr ■ t Node; 
Node = record 

Id: IdType; 
Left, 
Right: NodePtr; 
Bal: Balance; 
IdlsNew: Boolean; 
case 

IdlsOld: Boolean of 
True: 

(NewPtr: NodePtr); 
False: 

(SeenlnSource: Boolean) 
end; 



IdTable: NodePtr { SYMBOL TABLE }; 



IdPairs, 
Source , 



67 

68 

69 

70 

71 

72 

73 

74 

75 

76 

77 

78 

79 

80 

81 

82 

83 

84 

85 

86 

87 

88 

89 

90 

91 

92 

93 

94 

95 

96 

97 

98 

99 

100 

101 

102 

103 

104 

105 

106 

107 

108 

109 

110 

111 

112 

113 

114 

115 

116 

117 

118 

119 

120 

121 

122 

123 

124 

125 

126 

127 

128 

129 

130 

131 

132 



Target, 
Report: Text; 

Letters, 
Digits, 
LettersAndDigits: CharSet; 



procedure Initialize; 



begin 

Rewrite (Report) ; 

Letters := ['A', 

'N', 



'D', 
'Q', 

'd', 



'ri', 'I', 
'U', 'V, 



'g'» 'h', 'i', 



'B', 'C. 
'0', 'P', 
'a' , 'b' , 'c' j 
'n' , 'o', 'p'j 
Digits := ['0' .. '9'] ; 
LettersAndDigits := Letters + Digits; 
end < Initialize >; 



procedure Readld(var InFile: Tex;;: nr Ident: IdType); 
MaxLength; 
Blanks; ChCount := 0; 



'K' 
'X' 
'k' 



'L', 
'Y', 
'1', 



'M', 
'Z', 



'z'l; 



var 

ChCount : 



begin 

Ident. Name 

repeat 

ChCount := ChCount + 1; Ident .Name [ChCount] := InFilet; Get(InFile) 

until not (InFilet in LettersAndDigits) or (ChCount = MaxLength); 

Ident .Length := ChCount 
end < Readld >; 



procedure ReadldPairsAndCreateSymbolTable; 



type 

IdKind = (OldKind, NewKind) ; 



Oldld, 

Newld: IdType; 

Link: NodePtr < REMEMBER Newld POINTER }; 

LineNum: Integer; 

In cr Hg t : Bo ol ean ; 



procedure Error; 

begin 

WriteLn (Report, 'on line number ': 29, LineNum: 1, 
' of the "IdPairs" file.'); 
end { Error }; 



procedure Enter (var Identifier: IdType; Kind: IdKind; var P: NodePtr; 
var IncreasedHeight : Boolean) ; 

< Enter USES AN AVL-BALANCED TREE SEARCH ALGORITHM BY NIKLAUS WIRTH. > 
{ (SEE SECTION 4.4 IN "ALGORITHMS + DATA STRUCTURES = PROGRAMS" } 
{ PRENTICE HALL, 1976, PP. 215-222.) } 

var 
PI, 
P2: NodePtr; 



-o 
m 



133 
134 
135 
136 
137 
138 
139 
140 
141 
142 
143 
144 
145 
146 
147 
148 
149 
150 
151 
152 
153 
154 
155 
156 
157 
158 
159 
160 
161 
162 
163 
164 
165 
166 
167 
168 
169 
170 
171 
172 
173 
174 
175 
176 
177 
178 
179 
180 
181 
182 
183 
184 
185 
186 
187 
188 
189 
190 
191 
192 
193 
194 
195 
196 
197 
198 



begin 

if P = nil then 

begin < Id NOT FOUND IN TREE; INSERT IT. > 
New(P) ; IncreasedHeight := True; 
with Pt do 
begin 

Id := Identifier; 

IdlsNew := Kind - NewKind; IdlsOld := Kind - OldKind; 
Left := nil ; Right := nil ; Bal := Even; 
if IdlsNew then begin Link := P; SeenlnSource := False end 
else NewPtr := Link 
end 
end 
else 

if Identifier. Name < Pt-Id-Name then 
begin 

Enter (Identifier, Kind, Pf-Left, IncreasedHeight); 
if IncreasedHeight then { LEFT BRANCH HAS GROWN HIGHER > 
case Pt.Bal of 
HigherRight: 

begin Pt-Bal := Even; IncreasedHeight := False end ; 
Even: 

Pt.Bal := HigherLeft; 
HigherLeft: 

begin < REBALANCE > 
PI := Pt.Left; 

if PIT. Bal = HigherLeft then 
begin { SINGLE LL ROTATION > 

Pt.Left := Pit. Right; Plt-Right := P; 
Pt.Bal := Even; P := PI 
end 
else 

begin { DOUBLE LR ROTATION > 

P2 := Pit. Right; Plt-Right := P2t-Left; 

P2t«Left := Pi; Pt.Left := P2t-Right; 

P2t- Right := P; 

if P2t.Bal = HigherLeft then Pt.Bal := HigherRight 

else Pt.Bal := Even; 

HigherRight then Pt.Bal := HigherLeft 
Even; 



if P2t.Bal 
else Plt-Bal 
P := P2 
end ; 
Pt.Bal 



:= Even; IncreasedHeight := False; 
end ; 
end { CASE > 
end 
else 

if Identifier. Name > Pt.Id.Name then 
begin 

Enter (Identifier, Kind, Pt.Right, IncreasedHeight); 
if IncreasedHeight then < RIGHT BRANCH HAS GROWN HIGHER } 
case Pt.Bal of 
HigherLeft : 

begin Pt.Bal := Even; IncreasedHeight := False end ; 
Even: 

Pt-Bal := HigherRight; 
HigherRight: 

begin { REBALANCE } 
PI := Pt-Right; 
if Pit. Bal - HigherRight then 
begin { SINGLE RR ROTATION > 

Pt-Right := Plt-Left; Plt-Left := P; 
Pt.Bal := Even; P := PI 
end 
else 



199 
200 
201 
202 
203 
204 
205 
206 
207 
208 
209 
210 
211 
212 
213 
214 
215 
216 
217 
218 
219 
220 
221 
222 
223 
224 
225 
226 
227 
228 
229 
230 
231 
232 
233 
234 
235 
236 
237 
238 
239 
240 
241 
242 
243 
244 
245 
246 
247 
248 
249 
250 
251 
252 
253 
254 
255 
256 
257 
258 
259 
260 
261 
262 
263 
264 



begin { DOUBLE RL ROTATION > 

P2 := Plt-Left; Plt-Left := P2t-Right; 
P2t-Right := Pi; Pt -Right := P2t-Left; 
P2t»Left := P; 

if P2t-Bal = HigherRight then Pt-Bal := HigherLeft 
else Pt-Bal := Even; 

if P2t-Bal = HigherLeft then Plt-Bal := HigherRight 
else Plt-Bal := Even; 
P := P2 
end ; 
Pt-Bal := Even; IncreasedHeight := False 
end ; 
end { CASE } 
end 
else 

begin < Identifier IS ALREADY IN TREE > 
IncreasedHeight := False; 
with Pt do 
begin 

if IdlsOld then 

if Kind = OldKind then < DUPLICATE Oldld' S } 
begin 

WriteLn (Report, '*** Duplicate 01dld"s encountered: ', 

Identifier- Name) ; 
Error; goto 13 
end 
else begin IdlsNew := True; Link := P end 
else 

if Kind = NewKind then 
begin 

WriteLn(Report, ' WARNING: ', Identifier. Name, 

' has also appeared as another Newld'); Error; 
Link := P 
end 
else begin IdlsOld := True; NewPtr := Link end 
end 
end 
end { Enter }; 

procedure Truncation (vax Ident: IdType) ; 

begin 

WriteLn (Report, ' WARNING: Truncation for identifier, ', Ident. Name); 

WriteLn (Report, 'Extra characters ignored.': 39); Error; 

repeat Get(IdPairs) until not (IdPairst in LettersAndDigits) ; 
end { Truncation >; 

begin { ReadldPairsAndCreateSymbolTable > 

IdTable := nil ; Reset (IdPairs) ; LineNum := 1; IncrHgt := False; 
while not EOF (IdPairs) do 
begin 

while (IdPairst = ' ' ) and not EOLn(IdPairs) do Get (IdPairs) ; 
if IdPairst in Letters then 
begin 

Readld (IdPairs, Oldld) ; 

if IdPairst in LettersAndDigits then Truncation (Oldld) ; 
while (IdPairst in [' ', ',']) and not EOLn(IdPairs) do Get (IdPairs) ; 
if IdPairst in Letters then 
begin 

Readld (IdPairs, Newld); 

if IdPairst in LettersAndDigits then Truncation(NewId) ; 
Enter(NewId, NewKind, IdTable, IncrHgt); 
Enter(01dld, OldKind, IdTable, IncrHgt); 
end 



UD 



265 

266 

267 

268 

269 

270 

271 

272 

273 

274 

275 

276 

277 

278 

279 

280 

281 

282 

283 

284 

285 

286 

287 

288 

289 

290 

291 

292 

293 

294 

295 

296 

297 

298 

299 

300 

301 

302 

303 

304 

305 

306 

307 

308 

309 

310 

311 

312 

313 

314 

315 

316 

317 

318 

319 

320 

321 

322 

323 

324 

325 

326 

327 

328 

329 

330 



else 

begin WriteLn(Report, ' WARNING: Malformed IdPair ); 

end 
else 

begin WriteLn (Report, ' WARNING: Malformed IdPair') 

ReadLn(IdPairs) ; LineNum := LineNum + 1 
end 
end { ReadldPairsAndCreateSymbolTable >; 



procedure EditSourceToTarget ; 
var 



Error end 



Error end ; 



Sourceld: IdType; 
DigitsE, 
ImportantChars: Char Set; 



procedure Substitute ( var Identifier: IdType; P: NodePtr) ; 



procedure WriteSourceld; 

begin 

with Sourceld do Write(Target, Name: Length); 

while Sourcet in LettersAndDigits do 

begin Write (Target, Sourcet); Get(Source) end 
end < WriteSourceld >; 



begin { Substitute > 

if P = nil then { Identifier NOT IN TREE, ECHO } WriteSourceld 

else 

if Identifier. Name < Pt. Id. Name then Substitute (Identifier, PT-Left) 

else 

if Identifier .Name > Pf. Id. Name then Substitute (Identifier, Pt. Right) 
else < FOUND } 
with Pt do 

if IdlsOld then 
begin 

with NewPtrf.Id do Write(Target , Name: Length); 
while Sourcet in LettersAndDigits do Get (Source) 
end 

else begin SeenlnSource := True; WriteSourceld end 
end < Substitute >; 

begin { EditSourceToTarget } 

Reset (Source); Rewrite (Target) ; 

ImportantChars := LettersAndDigits + ['(', '_' , ""] ; 
DigitsE := Digits + ['E', 'e']; 
while not EOF (Source) do 
begin 

while not E0Ln( Source) do 

if Sourcet in ImportantChars then 
case Sourcet of. 

'A', 'B', 'C, 'D', 'E', 'F', 'G', 'H', 'I', 
'J', 'K', 'L', 'M', 'N', '0', 'P', 'Q', 'R', 
'S', 'T', 'U', 'V, 'W, 'X', 'Y', 'Z', 
'a', 'b', 'c', 'd', 'e', 'f, 'g', 'h', 'i', 
'j', 'k', '1', 'm', 'n', 'o', V, V, 'r' 
's', 't', 'u', 'v', 'w', 'x', 'y', 'z': 

begin Readld (Source, Sourceld); Substitute (Sourceld, IdTable) 
end ; 
'0', '1', '2', '3', '4', '5', '6', '7', '8', '9': 
repeat Write (Target , Sourcet); Get(Source) 



331 
332 
333 
334 
335 
336 
337 
338 
339 
340 
341 
342 
343 
344 
345 
346 
347 
348 
349 
350 
351 
352 
353 
354 
355 
356 
35 7 
358 
359 
360 
361 
362 
363 
364 
365 
366 
367 
368 
369 
370 
371 
372 
373 
374 
375 
376 
377 
378 
379 
380 
381 
382 
383 
384 
385 
386 
387 
388 
389 
390 
391 
392 
393 
394 
395 
396 



until not (Sourcet in DigitsE) ; 

begin 

repeat Write (Target, Sourcet); Get(Source) 
until (Sourcet = "") or EOLn(Source) ; 
if E0Ln( Source) then 

WriteLn (Report, ' WARNING: Unclosed string found 

'in source program.'); 



Write (Target 
end ; 
'(': 



Sourcet); Get (Source) 



Get (Source); 
COMMENT > 



Get (Source); 



begin 

Write (Target, Sourcet); 
if Sourcet = '*' then { 
begin 
repeat 

Write (Target, Sourcet); 
while Sourcet <> '*' do 
begin 

if EOLn(Source) then WriteLn(Target) 
else Write (Target, Sourcet) 5 
Get (Source) 
end ; 
Write(Target, Sourcet); Get(Source) 
until Sourcet = ')'; 

Write(Target, Sourcet); Get(Source) 
end 
end ; 
'{': < STDCOMMENT > 
begin 
repeat 

if EOLn(Source) then WriteLn (Target) 
else Write (Target, Sourcet); 
Get (Source) 
until Sourcet = ')'; 
Write (Target, Sourcet); 
end 
end < CASE > 
else < OTHER CHARACTERS } 

begin Write(Target , Sourcet); 
ReadLn(Source) ; WriteLn (Target) 
end 
end { EditSourceToTarget >; 



procedure CheckSeenInSource(P: NodePtr); 

begin 

if P <> nil then 
begin 

CheckSeenlnSource(Pt.Left) ; 
with Pt do 

if IdlsNew and not IdlsOld then 
if SeenlnSource then 
begin 

WriteLn (Report, ' WARNING: ', Id. Name: Id. Length, 

' was specified as a new identifier ' ) ; 
Wri teLn (Report , 'and was also seen in the source ': 46, 
'program 
end; 



Get (Source) 



Get (Source) end ; 



GO 

m 



m 



CheckSeenInSource(Pt .Right) 
end 
end < CheckSeenlnSource >; 



begin < ID2ID > 



nged . ' ) ; 




TJ 




n> 


r 397 


Initialize; 


en 


398 


Read IdPair sAndCreateSymbolTable; 


m 


399 


EditSourceToTarget; 


OvJ 


400 


CheckSeenlnSource (IdTable) ; 


_Cr 


401 


13: 




402 


end { ID2ID >. 





PASCAL MEWS #15 



SEPTEMBER, 1979 



PAGE 35 



S-6 Prose 



Disclaimer: 

The editors are not completely happy with the portability of this program, and several 
problems were noted in preparing it for publication. In particular, there is insufficient 
information about the Control Data conventions to help people to convert it to other 
systems. The pecularities of the 76B character escape and the segmented files are 
examples. Nevertheless, there is considerable demand for Prose to be released, and it is 
better than the other text-formatters we have seen. 



Prose Instruction Manual 



Prose Instruction Manual 

John P. Strait 

University Computer Center 

University of Minnesota 

Copyrignt 1978 



Prose's philosophy is tnat tne user snould not be overwhelmed oy 
a large number of complicated directives. That tne syntax of tne 
directives snould be consistent. Tnat tne text should stand out, not 
tne directives. Because of this desire for simplicity, Prose may or 
may not be tne tool for a given application. The following two taoles 
snould aid in deciding wnetner or not to use Prose. 



Aostract 



Preparation and editing of prose (such as computer orientea 
documentation) is a tedious process. Tnis process can oe made 
somewnat easier tnrough the use of computerized text processing tools 
sucn as text editors and formatters. This writeup describes a text 
formatting program named Prose. Prose and this instruction manual are 
oriented toward tne preparation of computer oriented documentation, 
and so tnis writeup assumes oasic knowledge of computer-related text 
processing tools. 



1 Historical Notes 

1 Philosophy, Goals, and Aoilities 

2 Prose and Cons 

3 Basic Units of Text 

5 A General Look at Directives 

6 Controlling tne Formatting Environment 

8 Short Directive TaDle 

Descriptions of tne Directives: 

9 Break, Comment, Count 

Id Form 

11 Indent, Input 

14 Inx, Literal, Margin 

15 Option 

19 Output 

2(3 Page 

21 Paragraph 

22 .... . Reset 

23 Select, Skip 

24 Sortindex, Suotitle, Title, Undent 

25 Weos 

Hardware and Operating System Dependant Information: 

26 . .* . . . CDC KRONOS and NOS 

Control statement call 
Cnaracter set 
Prose writeup 



f commands, wnicn provide a 
ing aoilities. 
iscretionary nypnenation. 

tne text processing 

e or upper-case-only output 

:-case-only input. 

:e a sorted index, refer- 
on request, 
with neaders, footers, and 

t to specified margins. 
aDle program, written in 
es ASCII as its internal 
encourage transporta- 
different hardware and dif- 



a. Prose nas a small numoer 
learnaole set of Dasic forma' 

b. Prose can do underlining and d 

c. Prose can rememoer and res 
environment. 

d. Prose can produce mixed-cas 
from either mixed-case or uppe 

e. Prose can accumulate and produ* 
ring to page numbers. 

f. Prose can print selected pages 

g. Prose can format text in pages 
other frills. 

n. Prose can fill and justify tex 
i. Prose is an extremely port 

standard Pascal, and 

cnaracter code. It is written 

tion oetween computers with 

ferent operating systems. 

and Cons 

a. Prose cannot control photo-typesetting machines. 

b. Prose cannot do graphics. 

c. Prose does not nave multi-column aDility. 

d. Prose does not nave macros, variaDles, or other program- 
ming language-like features. 

e. Prose does not nave the aDility to store text and 
retrieve it later, witn the exception of tne special 
purpose indexing aDility. 

f. Prose does not nave taos . 

g,. Prose does not have directives to do everytning you 
always wanted to. 

Basic Units of Text 

Some of the oasic units of natural language are the word, tne 
pnrase, the sentence, and the paragrapn. In text formatting, tne 
word, tne line, ana tne paragraph are the oasic units. A word is 
defined as any non-olank string of characters, with a Dlank on either 
side. Thus, for tne purposes of formatting, a punctuation cnaracter 
is part of tne word it is next to. By default, Prose reformats its 
input oy filling words into lines , adding clanks to justify the lines 
to left and rignt margins, and printing lines togetner to make 
paragrapns . In filling lines, Prose does not pay attention to tne 
original positions of tne words, Dut instead fills as many words as 
possiole into the output lines, preserving tne original order. Tne 
following example illustrates this process of filling and justifying. 



Tne text examples in this manual have been extract 
Alice's Adventures in Wonderland by Lewis Carroll. 



Historical dotes 



Most of tne text formatting programs available today descend from 
one of several original programs. Among tnese is RUNOFF wnich was 
developed on the Dartmouth Time-Snaring System in tne 1960s. Later, 
tne Call-a-Computer system provided a RUNOFF version called EDIT 
RUNOFF as a text editor command. In 1972, Michael riuck , working on 
tne University of Minnesota's MERITSS system (a CDC 64d0 running tne 
KRONOS operating system) , began to develop a version of EDIT RUNOFF 
tnat he called TYPESET. TYPESET went tnrough many developmental 
cnanges, and stabilized somewhat in early 1977 at version 5.0, wnicn 
is written in CDC COMPASS assemDly language. Prose is written in the 
programming language Pascal, and was developed over a year's time 
starting in the spring of 1977. Tne design of Prose was influenced 
heavily Dy TYPESET and so Prose is one of the many descendants of 
RUNOFF. 



Pnilosopny , Goals, and Abilities 



Prose is intended primarily for the preparation of machine 
retrievaole documentation, and tnis nas influenced tne choice of its 
repertoire of abilities. TYPESET was intended as a "versatile text 
information processor commonly used to typeset theme papers, term 
papers, essays, letters, reports, external documentation ..., and 
almost any other typewritten text" [ Typeset 5.0 Information , Copyright 
1977 oy Michael HuckJ . In spite of these aspirations, no program can 
oe all things to all people, and so it is with Prose. It was intended 
tnat Prose be able to do most of the tnings tnat are needed to produce 
nign quality computerized text. 

Tne design of Prose was influenced by several goals. First, it 
snould be possible to produce high quality results, with a minimum 
numoer of directives. Prose snould have aoout 90% of tne aoilities 
tnat you think are useful, and the 10% it doesn't have should oe tne 
ones tnat are so esoteric tnat they are non-essential. Some text 
formatters take tne approach of providing a minimum set of ouilt-in 
aoilities, along with a "general and powerful" feature sucn as macros. 
The idea is that you can accomplisn anytning you want (no matter now 
much effort it will take) oy defining appropriate macros. Tne proolem 
with tnis approacn is that the user is forced to learn a complicated 
feature in order to produce any but the most trivial results. 



urtle 


■ we 


nt on 


at 


la 


st, 


ttle 


now 


and t 


:nen 


i, 


"we 


was 


an 


old Tu 


irtl 


e- 


—we 



wasn't one?" 



t to Prose: 

"when we were little," the Mock Turtle went on at last, 
more calmly, tnougn still sobbing a little now and tnen, 
"we went to school in the sea. The master was an olo 
Turtle — we used to call him Tortoise — " 

"Wny did you call nim Tortoise, if he wasn't one?" 
Alice askeo. 

"We called him Tortoise because ne taught us," said tne 
Mock Turtle angrily. "Really you are very dull!" 

"You ougnt to be ashamed of yourself for asking such a 
simple question," added tne Grypnon; and then 
tney botn sat silent and looked at Alice, who felt ready to 
sink into the earth. 



Output from Prose: 

"wnen we were little," tne Mock 1 
more calmly, tnougn still soooing a li 
went to school in the sea. Tne master 
used to call nim Tortoise — " 

"wny did you call him Tortoise, 
Alice asked. 

"We called nim Tortoise oecause r 
Mock Turtle angrily. "Really you are 

"You ougnt to be ashamed of your: 
simple question," added tne Grypnon; 
silent and looked at Alice, who felt i 
eartn. 



Most of text formatting is filling and -|ustifying . In tne 
aosence of special instructions to Prose (called directives ) , it will 
fill all of tne input words into output lines, and justify all of 
those lines. 

Tne distinction oetween one paragrapn and tne next is defined oy 
a justification oreaK , wnicn causes Prose to stop filling the current 
output line, and print it without justifying. Since tne oreak is one 
of tne most frequently usee instructions (as well as one of tne 
simplest), it can oe indicated in many ways. Paragrapns can oe 
separated (oroken) by one or more blank lines, Dy leading olanxs typed 
on an input line (a paragrapn indent ation) , or oy tne Prose ".BREAK" 
directive. The following example demonstrates these tnree methods. 

Input to Prose 

At last the Gryphon said to tne Mock Turtle "Drive on, 
old fellow! Don't be all day aoout it!" and he went 
on in these words: — 



ie taught us," said 


tne 


very dull ! " 




;elf for asking sucr 


i a 


and tnen they ooth 


sat 


eaoy to sink into 


tne 



PASCAL NEWS #15 



SEPTEMBER, 19 7 9 



PAGE 36 



"Yes, we went to school in the sea, tnougn you mayn't 

Delieve it — " 

. BREAK 

"I never said I didn't!" interrupted Alice. 

. BREAK 

"You did," said tne Mock Turtle. 

"Hold your tongue!" added tne Gryphon, before Alice could 
speak again. 

Output from Prose: 

At last the Grypnon said to tne Mock Turtle "Drive on, old 
fellow! Don't De all day about it!" and he went on in tnese 
words: — 

"Yes, we went to school in the sea, tnougn you mayn't 

believe it — " 

"I never said I didn't!" interrupted Alice. 

"You did," said the Mock Turtle. 

"Hold your tongue!" added tne Grypnon, oefore Alice 
could speak again. 

Wnen you use one of these methods to create a paragrapn, Prose 
only does a justification break. Tnat is, Prose will not skip lines 
or indent unless blank lines or indentations explicitly appear on tne 
input file. There is a way to do fancier things oy using tne 
".PARAGRAPH" directive, but tnat will be introduced later. 



ouffer . There are ten keep buffers (numbered tnr.ougn 9) associated 
with each of tnese directives. A Keep parameter may be used to 
specify wnicn buffer to use, out if not specified, tne values are 
saved in tne numerically next ouffer. 

Old values may oe recalled by using tne following form: 

.directivename number 
For example: 

.MARGIN 5 
sets tne margins to tne values that were stored in Keep ouffer 5. 

If no parameter is specified, tne values are set to tnose tnat. 

were stored in the numerically previous keep ouffer. Since tne Keep 

numoer is automatically incremented when the parentnesis form is used 

and automatically decremented wnen no parameter is given, tne keep 
buffers can oe used as a stack. 

.MARGIN ( L0 R7U ) 



.MARGIN ( L10 R60 ) 



h General Look at Directives 

In its default mode, Prose automatically fills and justifies 
output lines, and formats the output in pages. Directives are needea 
to instruct Prose to do anything more fancy. Tnere are directives to 
cnange tne margins, to control options, and to define tne type of 
output device you intend to use. 

A line of directives is indicated by typing tne directive escape 
character in the first column of an input line. Tne period was cnosen 
as tne default directive escape character (although you can cnange it 
if you wisn) oecause it seems very unlikely tnat anyone would want to 
type a period in tne first column of a line of text. Tne entire line 
is scanned for directives. Several directives can oe typed on tne 
same line, provided tnat they are separated oy tne directive escape 
cnaracter. For example: 

.BREAK. SKIP 2. MARGIN ( L5 R65 ) 

Some directives, nowever, take the remainder of the line as their 
parameter, and so no other directives can follow tnese. Long 
directives may extend to several lines. Continuation lines are 
indicated by a plus sign ( + ) typed in column one. Tne continuation 
may be made anywnere that a blank is allowed. For example: 



.FORM( [ /// L58 // #73 
+ [ /// L58 // 



PAGE 1 
PAGE ' 



P /// J 
P /// J ) 



Altnough the examples in this writeup will usually 
typed entirely in upper case, upper and lower ca 
intermixed. 



snow directives 
;e letters may be 



Every directive "begins with the name of tne command, for instance 
"MARGIN". Tne name can always be abbreviated to three letters, and in 
fact, only the first tnree letters are examined oy Prose. Tne name 
may oe followed oy a parameter, but in the absence of a parameter, 
default values are used. There are four forms for the parameter: 

1) Tne absence of any parameter. 

2) A single numeric value. 

3) The remainder of the directive line. 

4) A specification enclosed in parentheses, whicn consists of 
descriptors defined by the directive itself. 

When a numeric value is required (for a parameter or as part of a 
descriptor), an explicit positive integer may oe given. In many 
directives, a relative value may be used. Tnis is indicated oy a plus 
or minus sign before the integer, and indicates tnat tne old value 
snould be incremented or decremented oy a certain amount. In the 
following example, tne left margin is set to 10 and tne rignt margin 
to 70. Tnen, tne margins are squeezed together by 5 cnaracters on 
both sides. 

•MARGIN ( L10 R70 ) 
.MARGIN ( L+5 R-5 ) 



In tne previous example, tne last MARGIN directive resets tne margins 
to thair previous values: left and rignt 70. 

Short Directive Table 



rective Meaning (ac 



BREAK 

COMMENT 

COUNT 

FORM 

INDENT 

INPUT 

INX 

LITERAL 

MARGIN 

OPTION 

OUTPUT 

PAGE 

PARAGRAPH 

RESET 

SELECT 

SKIP 

SORTINDEX 

SUBTITLE 

TITLE 

UNDENT 

WEOS 



■ion) , 



oreaK justification 
no action 
set page count 
define page format 
indent following line 
set input parameters 
store index entry 
print literal text 
set margins 
set options 
set output parameters 
eject to top of page 
set paragraphing params 
reset directive defaults 
select pages to print 
sKip output lines 
sort and print index 
set the subtitle 
set the main title 
unaent following line 
write end of section 



Parameter type 
-none- 

remainder of lin 
numeric 



( 



) 



meric 



remainder of line 



remainder 
( ... ) 
( ... ) 


of line 
or numeric 
or numeric 


numeric 
( ... ) 
(...) 


or numeric 


(...) 
numeric 




remainder 
remainder 
numeric 
-none- 


of line 
of line 



The directives marked witn an asterisk ( * ) cause a justifica- 
tion break before they are processed, since they affect the filling 
and justifying environment. 



( ... ) indicates that the parameter is enclose^ 
and is described in detail along with the description 
itself. 



Causes a justification break. 



in parentneses 
f tne directive 



Prose treats the remainder of tne directive line as a commen' 
i.e. it is ignored. The COMMENT directive allows you to include 
tne source of your document information that will not be printed < 
tne formatted copy. 



Controlling tne Formatting Environment 



COUNT numoer 
COUNT 



Tne formatting environment is defined to be all the options and 
specifications that direct Prose as it produces formatted output from 
unformatted input. The concepts that make up the formatting environ- 
ment can be loosely grouped into six areas, and tnere are directives 
to control each one: 

1) INPUT controls tne meaning and treatment of cnaracters on 
tne input file. 

2) OUTPUT describes the type of output device for which the 
formatted result is intended. 

3) FORM specifies the format of the page into whicn tne running 
text will oe inserted. This includes where to print titles, 
footers, and the like. 

4) MARGIN sets the left and rignt margins. 

.5) PARAGRAPH descrioes special actions for the beginning of 

each paragrapn. 
6) OPTION controls the rest of the miscellaneous options tnat 
affect the text formatting process. 

Of tnese six groups, tne INPUT, MARGIN, OPTION, and PARAGRAPH settings 
are likely to be changed often tnroughout the text. There will 
probably be a small numoer of different settings, and it will oe 
convenient to be able to resume old settings. To accomodate tnese 
needs, a simple device is availaOle for tnese four directives. 

Wnen setting the options controlled oy these directives, the 
following syntax is used: 

•directivename ( parameters ) 

where the parameters consist of a key letter followed oy option 
settings. For instance: 

.MARGIN ( L5 R60 ) 

sets the left margin to 5 and tne right to 60. Eacn time one of these 
four directives is processed, Prose saves tne new values in a Keep 



Sets the page counter. Tne numeric parameter can De relative. 
For example, ".COUNT +1" increments tne page number Dy one. In tne 
absence of a parameter the default is to set tne page number to one. 

FORM ( parameters ) 
FORM 

Defines the page format, including titles, footers, date/time, 
and the top and bottom of the page. Tne argument consists of 
parameters, followed oy (if appropriate) an optional field widtn. For 
example "T:30" prints the title in a field of 30 cnaracters. Text 
lines are ouilt by the FORM directive from left to right, starting in 
tne first printable column, although tne taobing specification may oe 
used to alter tnat. The following taDle oescrioes tne FORM specifi- 
cations tnat are available. 



key cnar meaning 

C 24 nour clock as hh.mm.ss 
D raw date as yy/mm/dd 
E nice date as dd Mmm yy 
Ln fill in n lines of running text 
Pf current page number, f selects tne form 
N or n arabic numerals (default) 
L upper case letter 
1 lower case letter 
R upper case roman numerals 
lower case roman numerals 



default field widt 

(15.37.58) 8 

(78/02/13) 8 

(13 Feo 78) 9 



[tne field 
widtn will 
be expanded 
if neededj 



subtitle 
main title 
wall clock 



as hh: 



i AM 



( 3:37 PM) 



its lengtn 
its length 



/ 



tao forward or backward to absolute column i 
print literal text 
print literal text 
print an end of line 
print -n- ends of lines 



PASCAL NEWS #15 



SEPTEMBER, 1079 



PAGE 37 



define top of page 
define Dottom of page 



default form: 



•FORM( [ // T #62 E /// L56 // #33 '- ' PN : 1 



Tne FORM directive is processed interpretively . Tnis means tnat 
tne format is re-scannea as eacn page of output is proauced, so 
changing one of tne title buffers witn tne TITLE or SUBTITLE 
directives will change tne title or suDtitle on the next page. 

The top of page definition is usea for several tnings. By using 
the OUTPUT directive, you can request Prose to send a page eject to 
tne output device wnen it reaches the top of a page. You can also 
request Prose to pause at the top of eacn page to allow you to cnange 
paper. At the end of the document, Prose does one last page eject, 
interpreting tne FORM specification until it reacnes tne top of page. 

The Dottom of page specification is wnere Prose i 
page number, so if you print tne page numoer Doth oefore 
oottom of page definition, you will get two different nu 



Mock Turtle, 



little 



needn't oe so proud as all tnat 

"with extras?" askeo tne 
anxiously. 

"Yes," said Alice: "we learned French ana music." 

"And wasning?" said tne Mock Turtle. 

"Certainly not" said Alice, indignantly. 

"An Tnen yours wasn't a really good scnool," said 
tne Mock Turtle in a tone of great relief. "Now, at 
OURS, tney nad, at tne end of tne oill, 'Frencn, music, 
AND WASHING — extra.'" 



At first glance, the stuttering metnod may seem clumsy, Dut 
experience snows that it is reasonably easy to get used to. To 
enter words that already have a douDle letter at tne beginning 
(like llama and oops), merely precede the word witn two case snift 
characters, causing a shif t-up/snif t-down (""LLAMA and ""OOPS). 
Keep in mind that the case snift character does not need to be used 
unless you want to create mixed-case output from upper-case-only 
input. It is recommended that if possiole, you use mixed-case 
input to create mixed-case output. 

directive escape character is tne cnaracter 



first column of an input line to flag it as a directive line. 



It is easy (once you understand the FORM directive) to produce 
fancy page formats. For example, you can design a FORM tnat will 
print the page numoer at the rignt of odd numbered pages, and at tne 
left of even pages. Tnis is done witn a FORM tnat defines two pages 
with two "["s ano two "J"s: 



.FORM( [ // T #62 E /// L56 // 
+ ( // T #62 E /// L56 // 



63 



'PAGE' 
'PAGE' 



/// ] 
/// ] ) 



In tne absence of a parameter, no special page formatting is 
done. This is similar to a FORM consisting of a single L specifi- 
cation defining an infinite numoer of lines per page. In tnis mode, 
tne PAGE directive acts as though there are 5 lines left on tne page. 



The hypnenation cnaracter is used to define nypnenation points 
witnin words. Sometimes a long wora will cause many blanks to be 
inserted to justify the preceding line. Prose will nyphenate sucn 
a word if you nave defined the syllable boundries witnin tnat word. 
Of course, not all the syllable boundries need oe specified, only 
tnose wnere you want Prose to De able to split a word. For 
example, if tne nypnenation cnaracter is set to the slasn ( / ), 
you might type "syncopation" as "syn/co/pa/tion" . Prose will 
insert a nyphen ( - ) only wnen tne characters on botn sides of tne 
hypnenation point are letters. You might type "nyper-active" as 
"nyper-/active" , and Prose will split the word, if necessary, 
witnout adding a superfluous hyphen. If Prose is forced to insert 
more blanks than a certain thresnold (set witn the OPTION direc- 
tive) , it will issue a message suggesting tnat you insert hypnen- 
ation characters. 



INDENT numoer 
INDENT 



K: The keep parameter explicitly specifies which keep buffer snould oe 
used to store tne new input options. The default is to use the 
numerically next buffer. 



Indents tne following line oy a certain number of spaces. In tne 
absence of a parameter, the default is 5. 



U: Text surrounded oy the underline 

Blanks are not underlined, Dut explicit clanks are. 



acter will oe underlined. 



INPUT J parameters ) 
INPUT "number 
INPUT 



Tne input width is used to specify now many cnaracters will oe read 
from eacn input line. If your input lines nave sequencing 
information at the rignt of each line, you will neea to set tne 
widtn to an appropriate value. 



The INPUT directive is used to define tne input environment, tnat 
is, tne interpretation of cnaracters on the input file. Tne param- 
eters can be given in any order, and consist of a key letter followed 
by a value. The following table summarizes tne parameters. 



key letter meaning 

B explicit blank character 

C case shift character 

D directive escape cnaracte 

H hypnenation cnaracter 

K keep 

U underline cnaracter 

W input widtn 



type 


default 


character 


nul 


cnaracter 


nul 


character 




character 


nul 


number 


next 


cnaracter 


nul 


numoer 


15tf 



Enters the remainc 


jer of the lii 


imber as an index entry. 


This mean; 


grates from page to 


page, tne 



togetner with tne current page 

tnat as the formatted text 

esulting index will always oe 



If a specification is not given, its value is not cnanged. Tne 
default value is the one that will be set if tne key letter is given 
Dy itself, and is also tne value that is assigned when Prose oegins 
processing . 

B: The expl icit blank cnaracter indicates a blank tnat Prose should 
not tamper witn. Tnus, if tne cross natcn ( # ) is specified as 
the explicit blank: 

. INPUT ( 6# ) 

then two words tnat are separated oy an explicit clank: 

Mr.#Smith 

will never be split from one line to the next, and Prose will never 
fill olanks in between the words to justify a line. 

C: The case snift cnaracter must be used to create mixed-case output 
from upper-case-only input. Wnen a case snift cnaracter is 
specified, Prose automatically shifts all upper case letters to 
lower case. To specify an upper case letter, one of two metnods 
may oe used. Tne first metnod is to surround letters witn tne case 
snift cnaracters, causing a shift-up and shift-down. Since most 
upper case letters are at the beginning of a word (following a 
blank), tne second method, called stuttering, is to douDle the 
first character of the word. The following example demonstrates 
the production of mixed-case output from upper-case-only input. 

Input to Prose: 

. INPUT ( C" ) 

TTHE MMOCK TTURTLE WENT ON. 

""W"E HAD THE BEST OF EDUCATIONS — IN FACT, WE WENT TO 
SCHOOL EVERY DAY — " 

""I'VE" BEEN TO A DAY-SCHOOL, TOO," SAID AALICE. H "Y"OU 
NEEDN'T BE SO PROUD AS ALL THAT." 

""W"ITH EXTRAS?" ASKED THE MMOCK TTURTLE, A 
LITTLE ANXIOUSLY. 

""Y"ES," SAID AALICE: "WE LEARNED FFRENCH AND MUSIC." 

M "A"ND WASHING?" SAID THE MMOCK TTURTLE. 

"*C"ERTAINLY NOT" SAID AALICE, INDIGNANTLY . 

M "A"ri TTHEN YOURS WASN'T A REALLY GOOD SCHOOL," SAID THE 
MMOCK TTURTLE IN A TONE OF GREAT RELIEF. ""N"OW, AT "OURS" , 
THEY 

HAD, AT THE END OF THE BILL, '"F"REnCH, MUSIC, "AND 
WASHING — " EXTRA. ' " 

Output from Prose: 

Tne Mock Turtle went on. 

"We had tne best of educations — in fact, we went to 
scnool every day — " 

"I'VE been to a day-scnool , too," said Alice. "You 



Prints tne remainder of tne line on tne output file. Tne special 
processing for upper/lower case, underlining, and literal olanks is 
performed on the text of the parameter, and tnen it is printed as a 
single output line. Tnis output line is printed independently or 
filling and justifying and page formatting processes; it is trans- 
parent to the usual Prose formatting and is not counted as an output 
line. Tne LITERAL directive is useful for producing special printer 
control cnaracters. For example, 

.LITERAL T 

sets a print density of 8 lines per inch on some CDC line printers. 



MARGIN ( parameters ) 
MARGIN numoer 
MARGIN 

Tne margin directive is used to set tne left and rignt margins 
for filling and justifying. The left margin is tne numoer of leading 
spaces oefore tne first printed cnaracter, and tne rignt margin is tne 
column numoer of ' " -_j_..-j _,„*-„.. 



he last 



naracter . 



suotracting 



left margin from the right margin gives tne numoer of printed columns. 
Tne parameters may be given in any order, and consist of a key letter 
followed oy a value. Tne following table lists tne parameters. 



key letter meaning 

K keep 

L left margin 

r rignt margin 



type default relative allowed 

number next no 

number yes 

number 7k> yes 

If a specification is not given, its value is not changed. Tne 

default value is tne one tnat will oe set if tne Key letter is given 

by itself, and is also tne value tnat is assigned wnen Prose oegins 
processing . 

Tne keep parameter explicitly specifies wnicn keep buffer snoula 
be used to store tne new margins. Tne default is to use .ne 
numerically next ouffer. 



OPTION ( parameters ) 
OPTION numoer 
OPTION 



All 



tne miscellaneous options that affect tne text formatting 
process are gathered togetner in the OPTION directive. These options 
are summarized in the following taole. For switcn options, "+" is on 
and "-" is off. 



PASCAL NEVIS #15 



SEPTEMBER, 19 79 



PAGE 38 



type 


default 


switch 


+ 


switcn 


+ 


numeric 


3 


numeric 


next 


switcn 


+ 


switch 


+ 


switcn 


+ 


switcn 


+ 


numeric 


1 


switch 


- 



relative allowed 



meaning 

print error messages 

fill output lines 

justification limit 

keep 

left justify 

multiple olanks 

2 blanks after periods 

rignt justify 

spacing 

shift to upper case 



If a specification is not given, its value is not cnanged. Tne 
default value is the one tnat will oe set if tne key letter is given 
by itself, and is also tne value tnat is assigned wnen Prose begins 
processing. 

E: Error messages are printed on tne main output file, interspersed in 
the formatted text. Tnese may oe entirely suppressed by setting 
tne E option to "£-". 



"Of course it was," said tne Mock Turtle. 

"And now did you manage on the twelftn?" Alice went on 

eagerly. 

"Tnat's enougn about lessons," the Grypnon interrupted in 
a very decided tone. "Tell her sometning aoout tne games 

now." 

If tne multiple blanxs switcn is on, multiple blanks on the input 
file are considered to be significant. Tnat is, if there are 
several olanks between two words on the input file, there will be 
at least tnat many on tne output file, but Prose may add more 
blanks during the justification process. If tne switch is off, 
multiple olanks will oe cnanged into a single olank. 

If the 2 blanks after periods option is selected, tnen Prose will 
make sure that eacn period wnich is already followed by at least 
one blank will be followed oy at least two blanks. Prose will not 
add blanks before justifying if there are already two. This makes 
it easy to have sentences separated by two blanks without requiring 
you to be extremely careful aoout typing the original text. 



F: Output lines are automatically filled and justified as descrioed in 
the section "Basic Units of Text". If tne fill switch is turned 
off, Prose will print the input lines as tney are, witnout 
reformatting to fill up the output lines. In effect, a justifica- 
tion oreak is done after eacn input line. 

J: In justifying tne left and rignt margins of an output line, Prose 
nas to insert olanks that are not explicitly on tne input file. 
The justif ication limit controls the point at wnicn Prose will 
attempt to nypnenate a word. If, for instance, tne justification 
limit is tnree, tnen tne nypnenation process will oe invoked when 
Prose inserts enough Dlanks to bring the numoer oetween any 
adjacent words to three. If nyphenation is not possiole, or Prose 
is not able to bring the numoer of inserted blanks below tne limit, 
an error message is printed. 



By setting the spacing option, you can easily produce single, 
douDle, or triple spaced output. Simply set tne spacing option to 
1, 2, or 3. 

Since some output devices are not aole to handle mixed-case files, 
you can cause Prose to shift all lower case letters to upper case 
by selecting the shift to upper case option. This is of particular 
interest to CDC users for whom lower case letters are interpreted 
as two characters wnen sent to certain output devices. Tnis option 
is also nandy for printing large sections, such as sample programs, 
all in upper case. 



OUTPUT ( terminal-type parameters ) 



The keep parameter explicitly specifies which keep Duffer should oe 
used to store the new options. Tne default is to use tne 
numerically next buffer. 



R: The left and right justify switcnes work together to determine wnat 
kind of justification is done. If ootn switches are on, output 
lines are justified to both the left and rignt margins. If ootn 
switcnes are off, lines are centered oetween tne two margins. If 
one is on and one is off, the result is one straignt margin (eitner 
left or rignt) and one ragged margin. The following demonstrates 
tnese four options. 

.OPT ION ( L+ R+ ) : 

"You couldn't nave wanted it much," said Alice; "living 
at the oottom of the sea." 

"I couldn't afford to learn it," said the Mock Turtle 
witn a sigh. "I only took tne regular course." 

"Wnat was that?" inquired Alice. 

"Reeling and Writhing, of course, to begin with," the 
Mock Turtle replied; "and tnen the different branches of 
Aritnmetic — Amoition, Distraction, Uglif ication, and 
Derision. " 

"I never heard of 'Uglif ication, ' " Alice ventured to say. 
"What is it?" 

Tne Grypnon lifted up ootn its paws in surprise. "Never 
nearo of uglifying!" it exclaimed. "You know wnat to 
beautify is, I suppose?" 

.OPTIUN( L- R- ) : 

"Yes," said Alice douotfully: "it 
means — to — make — anytning — prettier . " 

"well, tnen," tne Grypnon went on, "if you don't know 
wnat to uglify is, you are a simpleton." 

Alice did not feel encouraged to ask any more questions 

aoout it: so she turned to tne Mock Turtle, and said 

"What else nad you to learn?" 

"Well, tnere was Mystery," tne Mock Turtle replied, 

counting off the subjects on his flappers — "Mystery, 

ancient and modern, with Seaography: then Drawling — the 

Drawling-master was an old conger-eel, tnat used to come 

once a week: he taught us Drawling, Stretching, and 

Fainting in Coils." 

•OPTION ( L+ R- ) : 

"What was that like?" said Alice. 

"Well, I ca'n't show it you, myself," the Mock Turtle 
said "I'm too stiff. And tne Grypnon never learnt it." 

"Hadn't time," said tne Grypnon: "I went to tne Classical 
master, tnough. He was an old crab, he was." 

"I never went to him," the Mock Turtle said with a sigh. 
"He taught Laughing and Grief, they used to say." 

"So ne did, so he did," said the Gryphon, signing in 
turn; and botn creatures hid tneir faces in their paws. 

"And now many nours a day did you do lessons?" said 
Alice, in a hurry to change the suoject. 

.OPTION ( L- R+ ) 

"Ten nours the first day," said the Mock Turtle: "nine 
the next, and so on." 

"Wnat a curious plan!" exclaimed Alice. 

"Tnat's the reason they're called lessons," the Gryphon 
remarked: "because tney lessen from day to day." 

This was quite a new idea to Alice, and she thought it 

over a little oefore she made her next remark. "Tnen the 

eleventn day must have been a holiday?" 



Tne OUTPUT directive defines important aspects of tne output 
device tnat is tne destination of tne formatted text. Tne OUTPUT 
directive may oe used only once, and must 'appear Before any lines are 
printed on tne output device or immediately following tne directive 
" . RESET ( OUTPUT ) ". 

Terminal-type may oe one of the following; the default is ASC: 

ASC ASCII terminal, using carriage return for overprinting 
and form feed for page eject. A teletype is called an 
ASC terminal althougn the form feed will not cause a 
page eject. This is not a proolem if tne eject option 
(see Delow) is not selected. 

LPT Line printer, using "+" for overprinting and "1" for 
page eject. Carriage control is supplied automatically 
Dy Prose, and so like any other terminal, column 1 is 
tne first printing column. 

AJ Anderson/Jacobson terminal, using l/60th of inch incre- 
ments for justification. ASC may be specified for an 
AJ terminal, out the result will not have as nign 
quality. If AJ is selected, However, tne output will 
De printed more slowly. For this reason, it is 
recommended that ASC be used for drafts, and AJ only 
for the final version. Tne AJ may be followed oy a 
nuniDer specifying the desired pitch (in cnaracters per 
inch) , e.g. "AJ 10" . 

Tne parameters define further characteristics of tne output 
device, and several global output options. Tne parameters may be 
given in any order, and are selected from tne following taole. 



meaning type 

page eject at top of page switcn 

( "[" in FORM description) 

pause at top of page switch 

shift output lines to the right numeric 

underlining is available switch 



If tne page eject option is selected, a form feed or "1" will oe 
printed every time tne "[" is encountered in tne FORM specifica- 
tion. 

If the pause option is selected, every time the "[" is encountered 
in tne FORM specification, Prose will stop printing and wait for 
some operator acknowledgement. On an ASC or AJ terminal, Prose 
will sound the Dell, and wait for a carriage return to oe entered. 
For an LPT terminal, tne processing is dependent on the operating 
system. This option is handy- for using an AJ terminal with 
non-fan-fold paper, allowing you to roll paper in for each page. 
For tne CDC version, any single character (not just carriage 
return) will cause Prose to resume printing on an ASC or AJ 
terminal. For a CDC LPT terminal, Prose will print a PM message 
containing the Prose control statement. 

All output that Prose produces can oe shifted to the right by any 
numoer of spaces up to 50. Tnis makes it easy to center tne output 
on a wide printer page. 

If the destination terminal does not have underlining ability and 
your input does underlining, the underlining availaole option 
snould be turned off to prevent Prose from trying to generate 
overprinted underlines. 



PAGE number 
PAGE 



Causes a page eject if there are fewer than the specified number 
of lines remaining on tne current page. If no parameter is given, 
PAGE does an unconditional page eject. 



PASCAL NEWS #15 



SEPTEMBER, 19 79 



PAGE 39 



PARAGRAPH ( parameters ) 
PARAGRAPH number 
PARAGRAPH 



SELECT ( parameters ) 



Paragraphs can oe indicated by any of tne methods introduced 
tne section "Basic Units of Text". The PARAGRAPH directive provid 
more versatile method of creating paragraphs. 



Tne PARAGRAPH directive specifies what 
paragrapn is signalled oy typing a speci 



done wnen a new 
naracter (called tne 
paragraph flag character) in the first column of an input line. An 
automatic indent or undent can be selected, an automatic skip and/or 
automatic page eject can be specified, and you can even have Prose 
automatically number the paragraphs. 



s revised, not every page cnanges. The SELECT 
i print only certain pages. The entire text 
only selectee pages will De printed. Tnus the 
used will not oe reduced very much, but 
The descriptor consists simply of page numoers 
To select a span of pages, two numoers are typed 
by a colon ( : ) . Tne second page numDer 



As documentation 
directive may be used 
will De formatted, du 
central processor time 
printing time will be. 
separated by spaces. 

togetner, separated _ _ . 

specified relative to tne first. Tne following example sele 
3, 5, 10 through 15, and 20 througn 25 to be printed. 

.SELECT( 3 5 10:15 20:+5 ) 

Tne de"fault is to select all pages to be printed. 



:ts pages 



meaninq 


type 

character 
numoer 


default 


relative 


paragrapn character 
automatic indent 


nul 



no 


keep 


numDer 


next 


no 


numDer generator 
automatic page eject 
automatic skip 


numDer 
number 


none 





no 
no 


automatic undent 


number 





no 



If a specification is not given, its value is not changed. The 

default value is the one that will oe set if the key letter is given 

by itself, and is also the value that is assigned when Prose begins 
processing . 



SKIP number 
SKIP 



Skips a certain number of output lines, i.e. prints olank lines. 

SKIP will never print olank lines at the top of a page, so to skip 

lines at tne top of a page, at least one actual olank line must 

precede the SKIP directive. In the absence of a parameter, 5 lines 
are skipped. 



SORTINDEX ( parameters ) 
SORTINDEX 



F: The paragraph flag character is used to invoke tnis collection of 
paragrapning actions Dy typing it in the first column of an input 
line. Note tnat this character should be set in at least one 
PARAGRAPH directive, or none of tnese actions will work. 



The automatic indent or automatic undent is applied to tne first 
line of tne paragraph (see the description of INDENT and UNDENT), 
number generator is used, the indent or undent is applied 



after the number is generated. 



N: If tne number generator is specified, a new numoer (or letter) will 
De generated for eacn occurrance of tne paragraph flag cnaracter. 
The numDer generator is initialized to 1 each time new PARAGRAPH 
settings go into effect, but resuming an old setting will also 
resume tne old numoering. The numoer replaces tne paragrapn flag 
cnaracter wnen tne line is formatted. The numoer generator 
parameter has tne form: Nfn . 



Tne index entries that are accumulated by INX directives can be 
sorted eitner alphaoetically or oy page numDer, and tnen printed in a 
fairly flexiole manner. Tne SORTINDEX directive allows you to specify 
wnat column is to De considered tne first significant column for 
alpnaDetical sorting, now many leading blanks to print at tne left of 
eacn index line, where to insert tne page numoer in eacn line, and now 
to format tne page number. Tne parameters may De given in any order, 
and are selected from tne following. 



of page numoer (field widtn for numoer) 
margin (left margin Defore index line) 
column (in index entry) to insert page numDer 
rignt widtn of page numoer (blanks printed after) 
sorting option. if tnis is numeric, it is tne 
first significant column for alphabetical sorting, 
if it is the letter "P", it selects sorting by 
page numoer. 



selec 


:ts the 


numeric form: 


-c 


ilank- 


no numbering 


N 


or n 


araDic numerals 


L 




upper case letter 


1 




lower case letter 


R 




upper case roman 


r 




lower case roman 



In tne absence of parameters, tne defaults are used. 



n is the field width, whicn will De expanded if needed. 



simulate tne effec 



Enters the remainder of the directive line into the subtitle 
buffer. Tne subtitle buffer is used by tne FORM directive. 



•PAGE numoer 

Defore tne first line of tne paragrapn. If this parameter is set 
to 4, for instance, it will ensure tnat at least four lines are 
left on the page. If there are fewer lines tnan specified, a page 
eject is done. This is applied after tne automatic skip. 



TITLE text 



Enters tne remainder of tne directive line into tne main title 
Duffer. Tne title buffer is usee oy tne FORM directive. 



S: Tne automatic skip is done before tne first line of the paragraph, 
and functions tne same as a SKIP directive. 



UNDENT numoer 



K: The keep parameter explicitly specifies which keep buffer should 
used to store tne new paragraph options. Tne default is to use t. 
numerically next buffer. 



RESET 

RESET *( parameters ) 

RESET ( EXCEPT parameters ) 



Undents the following line a certain numoer of spaces. Tne 
undent is sometimes known by tne name "outdent" or "nanging indent". 
A line can never be undented past tne leftmost column of tne printer 
page, and so a large number is adjusted to a smaller value. In tne 
aosence of a parameter, the default- is to undent to tne leftmost 
printaole column. 



Tne RESET directive is used to set directives to their default 
values. If you nave changed tne values of many directives (such as 
FORM, MARGIN, or OPTION), the simple command 



resets tne values of all directives to their defaults. Directives may 
be reset selectively by using the second form of tne command. For 
example, 

. RESET ( MARGIN OPTION ) 

only resets the MARGIN and OPTION directives. Directives may also oe 
excluded selectively. For example, 

. RESET ( EXCEPT FORM OUTPUT ) 

resets all directives with the exception of FORM and OUTPUT. 



Parameters for RESET are sele' 
directive names. 



following list of 



COUNT FORM 
MARGIN OPTION 
PARAGRAPH SELECT 



INPUT INX 
OUTPUT PAGE 
SUBTITLE TITLE 



Tne values of parameters for most directives are set to their defaults 
(whicn are listed witn trie description of each directive) with tne 
exception of the keep parameters which are set to "K0". For the 
COUNT, INX, and PAGE directives, however, the action is different. 
Resetting COUNT sets tne page counter to 1, resetting INX deletes all 
index entries that have been accumulated, and resetting PAGE causes a 
page eject. In addition, since resetting FORM or OUTPUT directly 
affects tne printed result, resetting either of these directives also 
causes a page eject. 



Write an end-of-section on the output file. This directive is 
useful for creating multiple section writeups under systems witn 
utilities tnat manipulate multiple section files. In the CDC version 
of Prose, WEOS writes a CDC end-of-record mark. Specifically, tnis 
directive is used to create indexed writeups at tne University of 
Minnesota. 



CDC KRONOS and NOS 



At tne University of Minnesota, Prose is availaole tnrough the 
PROSE control statement, wnicn nas tnree order-dependant file parame- 
ters. The prototype call (whicn includes the default file names) is: 

PROSE (INFILE, OUTPUT, INPUT) 

INFILE - file containing text in Prose form. 

OUTPUT - file to receive tne formatted result. 

INPUT - file used for the pause option of tne OUTPUT directive. 

Tne following control statement will format a file named DOC and write 
the result to OUTPUT: 

PROSE (DOC) 

and to format tne same file out write the result to LIST: 

PROSE (DOC, LIST) 



PASCAL NEWS #15 



SEPTEMBER, 197 9 



PAGE 40 



i < 

2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 



PROSE - A TEXT FORMATTING TOOL. 
J. P. STRAIT. 77/06/05. 
COPYRIGHT (C) 1977, 1979. 
ALL RIGHTS RESERVED. 



PROSE IS A FORMATTING PROGRAM, DESIGNED FOR DOCUMENT 
PREPARATION. IT IS WRITTEN IN PASCAL AND IS IMPLEMENTED IN SUCH 
A WAY AS TO ENCOURAGE TRANSPORTATION BETWEEN DIFFERENT HARDWARE AND 
DIFFERENT OPERATING SYSTEMS. 

PROSE WAS DEVELOPED IN THE SPRING OF 1977, AND DRAWS 
VERY HEAVILY FROM TYPESET, A FORMATTING PROGRAM WRITTEN BY MICHAEL 
HUCK. TYPESET, WRITTEN IN COMPASS (THE CDC 6000/CYBER SERIES 
ASSEMBLY LANGUAGE), WAS IN TURN BASED ON EDIT-RUNOFF. THUS PROSE 
IS ONE OF THE MANY DESCENDANTS OF RUNOFF. 

COMPLETE EXTERNAL DOCUMENTATION IS AVAILABLE,. AND IT IS 
MAINTAINED IN PROSE FORM. REFER TO THAT FOR AN OVERVIEW OF PROSE. 

IN STRIVING FOR PORTABILITY, THE DECISION WAS MADE TO 
REPRESENT TEXT INTERNALLY IN ASCII. THIS MEANS THAT TO TRANSPORT 
THIS PROGRAM, ONE INPUT ROUTINE AND ONE OUTPUT ROUTINE MUST BE 
REWRITTEN TO TRANSLATE BETWEEN THE HOST CHARACTER SET AND ASCII. 
OTHER SYSTEM DEPENDANT DETAILS SUCH AS THE DATE AND CLOCK FUNCTIONS 
MUST BE CONSIDERED FOR TRANSPORTATION OF THIS PROGRAM. ALL AREAS 
WHICH NEED ATTENTION WHEN CONVERTING THIS PROGRAM FROM THE CDC 6000 
VERSION ARE MARKED WITH NULL COMMENTS IN COLUMNS 69-72. 

THIS VERSION OF PROSE READS AND WRITES THE CDC ASCII 63 
CHARACTER SET. IF YOU RUN SOME OTHER CHARACTER SET, YOU MAY WISH 
TO CONVERT THE INPUT/OUTPUT ROUTINES TO PROCESS THAT CHARACTER SET. 



program prose (inf lie, output+, input/) ; 



56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72 
73 
74 
75 
76 
77 
78 
79 
80 
81 
82 
83 
84 
85 
86 
87 
88 
89 
90 
91 
92 
93 
94 
95 
96 
97 
98 
99 
100 
101 
102 
103 
104 
105 
106 
107 
108 
109 
110 



const 

infinity 
maintitle 
maxinxlength 
maxiwidth « 
maxkeep > 
maxmargin = 
maxnumberwidth 
maxowidth 
maxpage • 
maxshift ■ 
maxskip ■ 
maxsplit » 
maxstringlength > 
min > 

subtitle 



CERTAIN CONSTRAINTS ARE APPLIED TO THE MIN /MAX VALUES, 

TO ELIMINATE ARRAY OVERFLOW CHECKS AND OTHER ERROR CHECKS: 

MAXSTRINGLENGTH >= MAXIWIDTH + MAXNUMBERWIDTH + 2 

MAXMARGIN <= MAXSTRINGLENGTH - 2 

(EVERYTHING) < INFINITY 

(EVERYTHING) > (REASONABLE) 



{ THE ASCII CHARACTER SET: } 



1000; { LARGEST NUMBER + 1 } 

true; { TITLE INDICATOR > 

60; { MAX LENGTH OF INDEX ENTRIES } 

200; { MAXIMUN INPUT WIDTH } 

9; < MAXIMUM KEEP VALUE } 

200; { LARGEST RIGHT MARGIN } 

20; { MAX NUMBER OF DIGITS IN A NUMBER } 

200; { MAXIMUM OUTPUT WIDTH } 

999; { MAXIMUM PAGE NUMBER } 

50; < MAX OUTPUT SHIFT } 

100; < MAXIMUM SKIP COUNT } 

20; < MAXIMUM NUMBER OF SPLIT POINTS > 

222; < MAX LENGTH OF TEXT LINES > 

10; { GENERAL REASONABLE MIMIMUM } 

false; { SUBTITLE INDICATOR } 



nul » 

soh = 

stx - 

etx - 

eot ■ 

enq » 

ack * 

bel » 

bs - 

ht - 

If - 

vt - 

ff - 

cr " 

so « 

si - 

die - 

del - 

dc2 = 

dc3 - 

dc4 - 

nak - 

syn » 

etb - 

can ■ 

em « 

sub ■ 

esc - 

fs - 

gs - 

rs - 

us - 



blank - 

exclaim ■ 

dquote ■» 

hash = 

dollar = 

percent •» 

ampersand = 

squote = 

lparen = 

rparen = 

star » 

plus » 



minus » 

period - 

slash » 

zero ■ 

one « 

two » 

three = 

four » 

five - 

six - 

seven « 

eight - 

nine * 

colon - 

semicolon = 

less » 

equal ■ 

greater ■ 

question - 



i - 

k - 
1 - 



y - 

z - 

lbracket = 

backslash * 

rbracket » 

caret - 

underscore - 



64; 

65; 

66; 

67; 

68; 

69; 

70; 

71; 

72; 

73; 

74; 

75; 

76; 

77; 

78; 

79; 

80; 

81; 

82; 

83; 

84; 

85; 

86; 

87; 

88; 

89; 

90; 

91; 

92; ven 

93; 

94; 

95; 



grav = 


96; 


smalla = 


97; 


smallb - 


98; 


smallc - 


99; 


smalld ■ 


100; 


smalle « 


101; 


smallf ■ 


102; 


smallg » 


103; 


smallh - 


104; 


small! = 


105; 


small j » 


106; 


smallk ■ 


107; 


smalll ■ 


108; 


smallm ■ 


109; 


smalln » 


110; 


smallo » 


111; 


smallp ■ 


112; 


smallq « 


113; 


smallr - 


114; 


smalls ■ 


115; 


smallt - 


116; 


smallu ■ 


117; 


smallv ■ 


118; 


smallw ■ 


119; 


smallx » 


120; 


smally « 


121; 


smallz = 


122; 


lbrace - 


123; 


icalbar ■ 


124; 


rbrace ■ 


125; 


tilde - 


126; 


del - 


127; 



type 
ascii - 0.. 127; 



111 
112 
113 
114 
115 
116 
117 
118 
119 
120 
121 
122 
123 
124 
125 
126 
127 
128 
129 
130 
131 
132 
133 
134 
135 
136 
137 
138 
139 
140 
141 
142 
143 
144 
145 
146 
147 
148 
149 
150 
>151 
152 
153 
154 
155 
156 
157 
158 
159 
160 
161 
162 
163 
164 
165 
166 
167 
168 
169 
170 
171 
172 
173 
174 
175 
176 
177 
178 
179 
180 
181 
182 
183 
184 
185 
186 
187 
188 
189 
190 
191 
192 
193 
194 
195 
196 
197 
198 
199 
200 
201 
202 
203 
204 
205 
206 
207 
208 
209 
210 
211 
212 
213 
214 
215 
216 
217 
218 
219 
220 



asciix - 0.. 255; { THE TYPE ASCII IS EXTENDED FOR INTERNAL USE } 

< IN THE FOLLOWING MANNER: } 

{ > 

{ C + 200B INDICATES THAT C IS UNDERLINED. } 



ascii2host = packed record 

c : char; < 

chr74 : boolean; { 

chr76 : boolean { 
end ; 



EXTERNAL CHARACTER } 

IF A 74 ESCAPE IS REQUIRED } 

IF A 76 ESCAPE IS REQUIRED } 



charclass 
digit 
formchar 

inputchar 

letter 

marginchar 

numform 

optionchar 

output char 

paragraphch 

pluso rminus 

quote 

sortinxchar 

end ; 



packed record 

: boolean; { 
: boolean; < 



: boolean; 
: boolean; 
: boolean; 



: boolean; { 



: boolean; 
: boolean; 
: boolean; 
: boolean; 
: boolean; 
: boolean; 



ZERO.. NINE } 

C,D,E,L,P,S,T,W, HASH, LBRACKET, RBRACKET, 

SLASH, DQUOTE, SQUOTE, RPAREN, BLANK } 

B,C,D,H,K,U,W, BLANK } 

A. .Z, SMALLA.. SMALLZ } 

K,L,R, BLANK } 

N, SMALLN, L, SMALLL, R, SMALLR, BLANK > 

E,F,J,K,L,M,P,R,S,U,BLANK } 

E,P,S,U,W,BLANK > 

C,I,K,N,P,U,BLANK } 

PLUS, MINUS > 

DQUOTE, SQUOTE > 

L,M,P,R,S,BLANK } 



ch3 - packed array [1.. 3] of asciix; 
chlO = packed array [1. .10] of asciix; 



cou, 
frm, 
ind, 
inp, 
inx, 
lit, 
mar, 
opt, 
out, 
pag, 
par, 
res, 
sel, 
ski, 
sor, 
sbt, 
ttl, 
und, 
weo, 
exc, 
ill, 



BREAK } 
COMMENT } 
COUNT } 
FORM > 
INDENT } 
INPUT } 
INX } 
LITERAL } 
MARGIN } 
OPTION } 



{ OUTPUT } 

{ PAGE > 

< PARAGRAPH } 
{ RESET } 

< SELECT } 

< SKIP > 

{ SORTINDEX > 

{ SUBTITLE } 

< TITLE } 

{ UNDENT } 

< WEOS } 

< EXCEPT (USED BY RESET) > 
{ ILLEGAL > 



THE FOLLOWING ARE NOT DIRECTIVES, 
TO INCLUDE THEM IN THIS TABLE. 



BUT IT IS CONVENIENT } 
} 



ast, < 

lpt, < 

ajt, < 

ilt) ; { 

dirset => set of direct; 



ASCII TERMINAL > 
LINE PRINTER } 
ANDERSON/JACOBSON TERMINAL } 
ILLEGAL > 



input set tings ■ packed record 
defined : boolean; 
b,c,d,h,u : ascii; 
w : 0. .infinity 
end ; 



plnxentry = finxentry; 
inxentry = record 

x : packed array [1. 

xl : integer; 

xp : integer; 

next : pinxentry 

end ; 



.maxinxlength] of asciix; 
< LENGTH OF ENTRY } 
{ PAGE NUMBER } 



marginsettings » packed record 
defined : boolean; 
l,r : 0.. infinity 
end ; 

numberform ■ (numeric, upperalpha,loweralpha,upperroman,lowerroman, 
nonumbering) ; 



optionsettings 
defined 
e,f ,l,m,p,r,u 

end; 



» packed record 
: boolean; 
: boolean; 
: 0. .infinity 



paragraphset tings » packed record 

defined : boolean; 

c : 0.. infinity; 

f : ascii; 

i : -infinity.. infinity; 

n : numberform; 

p : 0. .infinity; 

s : 0.. infinity; 

w : 0.. infinity 
end ; 

remember ■ 0.. maxkeep; 

splitpoint - packed record 



point : 0.. infinity; 
inpnt : 0. .infinity; 



POSITION OF SPLIT POINT WITHIN WORD > 
POSITION OF SPLIT POINT WITHIN INLINE } 



PASCAL NEWS #15 



SEPTEMBER, 19 79 



PAGE 4 1 



221 

222 

223 

224 

225 

226 

227 

228 

229 

230 

231 

232 

233 

234 ' 

235 

236 

237 

238 

239 

240 

241 

242 

243 

244 

245 

246 

247 

248 

249 

250 

251 

252 

253 

254 

255 

256 

257 

258 

259 

260 

261 

262 

263 

264 

265 

266 

267 

268 

269 

270 

271 

272 

273 

274 

275 
276 
277 
278 
279 
280 
281 
282 
283 
284 
285 
286 
287 
288 
289 
290 
291 
292 
293 
294 
295 
296 
297 
298 
299 
300 
301 
302 
303 
304 
305 
306 
307 
308 
309 
310 
311 
312 
313 
314 
315 
316 
317 
318 
319 
320 
321 
322 
323 
324 
325 
326 
327 
328 
329 
330 



hypnt 
end; 



boolean { SPLIT POINT REPRESENTS POSSIBLE HYPHEN } 



pstring » packed array [1. .maxstring length] of asciix; 

string - array [1. .maxstrlnglength] of { STR[1].C ALWAYS 
packed record 
c : asciix; { CHARACTER > 
nbl : 0. .infinity { IF C»' 
end ; 



NUMBER OF BLANKS, ELSE CHARWIDTH } 



badjustify 

blankcount 

blankline 

carriagecontrol : ascii; 



casech 
class 

charwidth 
dirch 
directline 
directs 

eject 

endofinput 

ensure2 

errornl 

errorn2 

errors 

errorsmall 

error 1 

errorlO 

eol 

explicitblank 

fill 

firsterror 

form 

formindex 

formlength 

formnext 

formnlength 

gaps 

host 

hyphen 

inchar 

incolumn 

infile 

inlength 

inline 

inwidth 

inxbase 

inxlast 

keepinp 

keepmar 

keepopt 

keeppar 

leftjustify 

leftmargin 

linecount 

linenumber 

linenums 

lockeddent 

lowercase 

lowerdir 

months 

moreonleft 

multipleblanks 

nblanks 

n chars 

newinline 

newoutline 

newparagraph 

ngaps 

nicedate 

nsplits 

nwords 

numbering 

numberwidth 

outlength 

outline 

outwidth 

pagenumber 

parachar 

paracount 

parapage 

paras kip 

pause 

print errors 

rawclock 

rawdate 

rightjustify 

rightmargin 

saveinp 



ascii; 
: array [ascl 



of ascii; 

CONVERT DISPLAY CODE TO ASCII } 
of ascii; 

CONVERT 74 ESCAPE CODE TO ASCII > 
of ascii; 

CONVERT 76 ESCAPE CODE TO ASCII } 

J OPTION } 

ACCUMULATED BLANK OUTPUT LINE COUNTER 

BLANK OUTPUT LINE INDICATOR } 

FOR LINE PRINTER OUTPUT } 

C INPUT } 

of charclass; 

CHARACTER CLASSIFICATIONS } 

CHAR WIDTH IN PRINTER UNITS } 

D INPUT > 

INPUT LINE IS A DIRECTIVE > 



: array [direct] of ch3; 

DIRECTIVE NAMES } 

E OUTPUT } 

INTERNAL EOF INDICATOR > 

P OPTION > 

ERROR IN NUMBER > 

ERROR IN NUMBER } 

ERRORS IN THIS PROSE RUN > 

NUMBER IS TOO SMALL } 

ERROR TEXT } 

ERROR TEXT } 

INTERNAL EOLN INDICATOR } 

B INPUT > 

F OPTION } 

FIRST ERROR ON THIS LINE } 

FORM BUFFER } 

CURRENT FORM POSITION > 

FORM LENGTH > 

FORM FOR NEXT PAGE } 

LENGTH OF FORMNEXT > 
, maxstrlnglength] of_ 1. .maxstrlnglength; 

POINTERS TO WORD GAPS > 

of ascii2host; < 

CONVERT ASCII TO DISPLAY CODE > { 
: ascii; { H OPTION } 
: asciix; < CURRENT INPUT CHARACTER > 
: integer; < CURRENT INPUT COLUMN > 
: text; { PROSE SOURCE INPUT FILE } 
: integer; { LENGTH OF CURRENT INPUT LINE } 
: string; { CURRENT INPUT LINE } 
: integer; { W INPUT } 

: pinxentry;{ BASE OF INDEX ENTRY LIST } 
: pinxentry;< LAST INDEX ENTRY } 
: integer; < CURRENT INPUT KEEP BUFFER } 
: integer; { CURRENT MARGIN KEEP BUFFER > 
: integer; < CURRENT OPTION KEEP BUFFER > 
: integer; { CURRENT PARAGRAPH KEEP BUFFER } 
: boolean; { L OPTION > 
: integer; { L MARGIN } 

: integer; < OUTPUT LINE COUNT (WITHIN PAGE) } 
: integer; { INPUT LINE COUNT (FOR ERROR MESSES) } 
: boolean; { LINE NUMBERS EXIST ON INPUT FILE } 
: integer; < I/U PARAGRAPH } 

: boolean; < FOR UPPER TO LOWER CASE CONVERSION ) 
: boolean; { LOWERCASE FLAG IN DIRECTIVES } 
: array [1. .12] of ch3; 

MONTH NAMES } 
: boolean; { INDICATOR FOR JUSTIFYING > 
: boolean; < M OPTION > 
: integer; { BLANK COUNT ON INPUT } 
: integer; { WIDTH OF OUTPUT LINE } 
: boolean; { BEGIN INPUT LINE INDICATOR > 
: boolean; { BEGIN OUTPUT LINE INDICATOR > 
: boolean; < BEGIN PARAGRAPH INDICATOR } 
: integer; { NUMBER OF WORD GAPS } 
: chlO; { DATE AS YY MMM DD > 
: integer; { NUMBER OF SPLIT POINTS IN WORD } 
: integer; { NUMBER OF WORDS IN OUTPUT LINE } 
: numberform; 

N PARAGRAPH } 
: integer; < N PARAGRAPH } 
: integer; { LENGTH OF OUTPUT LINE } 
: string; { OUTPUT LINE } 
: integer; < W OUTPUT } 
: integer; { CURRENT PAGE NUMBER } 
: ascii; { F PARAGRAPH } 
: integer; { PARAGRAPH COUNTER } 
: integer; { P PARAGRAPH } 
: integer; { S PARAGRAPH } 
: boolean; { P OUTPUT } 
: boolean; { E OPTION } 
: chlO; { CLOCK TIME AS HH:MM:SS } 
: chlO; { DATE AS YY/MM/DD } 
: boolean; { R OPTION } 
: integer; { R MARGIN > 
: array [remember] of inputsettings; 

{ INPUT STACK } 
: array [remember] of marginsettings; 



331 
332 
333 
334 
335 
336 
337 
338 
339 
340 
341 
342 
343 
344 
345 
346 

> 347 

> 348 

> 349 

> 350 

> 351 

> 352 
353 

> 354 
355 
356 
357 
358 
359 
360 
361 
362 
363 
364 
365 
366 
367 
368 
369 
370 
371 
372 
373 
374 
375 
376 
377 
378 
379 
380 
381 
382 
383 
384 

> 385 
} 386 



saveopt 

savepar 

selection 

shift 
shiftup 
space 
splits 

terminaltype 

text 

textindex 

textlength 

title 

titlelength 

under avail 

under char 

underlining 

underdir 

wallclock 

word 

wordlength 



{ MARGIN STACK } 
: array [remember] of optionsettings; 

{ OPTION STACK } 
: array [remember] of paragraphsettings; 

< PARAGRAPH STACK } 

: packed array [0. .maxpage] of boolean; 

< SELECT DIRECTIVE SETTING } 
: integer; { S OUTPUT } 

: boolean; { U OPTION } 

: integer; { S OPTION } 

: array [1. .maxsplit] of splitpoint; 

SPLIT POINTS WITHIN WORD } 

OUTPUT TERMINAL TYPE } 

FOR BUILDING FORM SPECIFICATIONS } 

CURRENT TEXT POSITION } 

LENGTH OF TEXT > 

: array [boolean] of pstring; 

{ TITLE AND SUBTITLE BUFFERS } 

: array [boolean] of integer; 

< TITLE AND SUBTITLE LENGTHS } 
U OUTPUT } 
U INPUT } 
UNDERLINING FLAG } 
UNDERLINING FLAG IN DIRECTIVES } 
CLOCK TIME AS HH: MM AM } 
CURRENT WORD } 
LENGTH OF WORD } 





procedure error( n : integer ); forward; 
procedure validate ( var num : integer; 

min,max,err : integer ); forward; 
procedure reinitialize ( which : dirset ); forward; 



387 

388 

389 

390 

391 

392 

393 

394 

395 

396 

397 

398 

399 

400 

401 

402 

403 

404 

405 

406 

407 

408 

409 

410 

411 

412 

413 

414 

415 

416 

417 

418 

419 

420 

421 

422 

423 

424 

425 

426 

427 

428 

429 

430 

431 

432 

433 

434 

435 

436 

437 

438 

439 

440 



< -- 

{ 

{ GENERAL UTILITY 

< 

< 



ASCIICHAR - CONVERT LITERAL HOST CHARACTER TO ASCII. 



function asciichar( ch : char ) 
begin { ASCIICHAR > 
asciichar := asc[ch] 
end { ASCIICHAR }; 



UPPER - CONVERT ALPHABETIC CHARACTERS TO UPPER CASE. 



function upper ( ch : asciix ) : asciix; 
begin { UPPER } 
if class [ch] .letter 
then if ch >■ smalla 
then upper := ch - 32 
else upper := ch 
else upper :« ch 
end < UPPER }; 



LOWER - CONVERT TO LOWER CASE IF ALPHABETIC. 



function lower ( ch : asciix ) : asciix; 
begin { LOWER } 
if class [ch] .letter 
then if_ ch <= z 
then lower :■ ch + 32 
else lower :» ch 
else lower :- ch 
end { LOWER }; 



NUMFORM - DETERMINE THE NUMERIC FORM. 



PARAM CH - N, SMALLN, L, SMALLL, R, SMALLR. 
ERR - ERROR IF BAD NUMERIC FORM. 



< > 



function numform( ch : 
begin { NUMFORM } 
if class [ch] .numform 



ascii; err : integer ) : numberform; 



PASCAL NEWS #15 



SEPTEMBER, 19 7 9 



PAGE 42 



441 

442 

443 

444 

445 

446 

447 

448 

449 

450 

451 

452 

453 

454 

455 

456 

457 

458 

459 

460 

461 

462 

463 

464 

465 

466 

467 

468 

469 

470 

471 

472 

473 

474 

475 

476 

477 

478 

479 

480 

481 

482 

483 

484 

485 

486 

487 

488 

489 

490 

491 

492 

493 . 

494 

495 

496 

497 

498 

499 

500 

501 

502 

503 

504 

505 

506 

507 

508 

509 

510 

511 

512 

513 

514 

515 

516 

517 

518 

519 

520 

521 

522 

523 

524 

525 

526 

527 

528 

529 

530 

531 

532 

533 

534 

535 

536 

537 

538 

539 

540 

541 

542 

543 

544 

545 

546 

547 

548 

549 

550 



then case ch of 



smalln 

1 

smalll 



r : numform 
smallr : numform 
blank : numform 
end 
else begin errorl 
end { NUMFORM >; 



numform := numeric;' 
numform := upperalpha; 
numform := loweralpha; 

= upperroman; 

= lowerroman; 

= nonumbering 



ch; error(err); numform := numeric end 



CONVERTNUMBER - CONVERT NUMBER FROM BINARY TO TEXT. 

PARAM STR - OUTPUT STRING. 

LEN - LENGTH OF OUTPUT STRING. 
NUM - NUMBER TO CONVERT. 
FW - FIELD WIDTH OF NUMBER. 
FORM- FORM OF CONVERSION. 



} 



procedure convertnumber ( var str : string; var len : integer; 

num,fw : integer; form : numberform ); 
var 
digit : array [ 1 . .maxnumberwidth] of ascii; 

{ DIGIT ARRAY } 
nextnum : integer; { FOR DECOMPOSITION } 
xl,x2 : integer; { LOOP INDECES } 



{ SEND1 - SEND ONE DIGIT. 
* PARAM DIG - DIGIT TO SEND. 



> 



procedure sendl( dig : ascii ); 
begin { SEND1 } 
if xl < maxnumberwidth 
then begin xl := xl + 1; 

digit [xl] := dig 

end 
end { SEND1 }; 



begin { CONVERTNUMBER 
xl := 0; 
case form of 
numeric 



loweralpha, 
upperalpha : 



repeat nextnum := num div 10; 

sendKnum - 10 * nextnum + zero); 

num :* nextnum 
until num = 0; 

rapeat num : » num - 1 ; 

nextnum := num div 26; 

sendl(num — 26 * nextnum + a); 

num :=» nextnum 
until num = 0; 



lowerroman, 
upperroman 



1000 end ; 
endl(m); num := num - 900 end 
num :» num - 500 end 



begin while num >= 1000 do 
begin sendl(m); num := num 
if num >= 900 
then begin send 1(d); 
else if num >= 500 
then begin send 1(d) 
else if num >= 400 
then begin send 1(c); send 1(d); num :■= num - 400 end ; 
while num >= 100 do 

begin sendl(c); num := num - 100 end ; 
if num >= 90 
then begin sendl(x); send 1(c); num :* num - 90 end 
else if num >= 50 
then begin send 1(1); num := num - 50 end 
else if num >= 40 
then begin sendl(x); sendl(l); num :» num - 40 end ; 
while num >= 10 do 
begin sendl(x); num := num - 10 end ; 
if num >== 9 
then begin sendl(i); sendl(x); num :* num - 9 end 
else if num >= 5 
then begin send l(v) ; num :« num - 5 end 
else if num >= 4 
then begin sendl(i); sendl(v); num :» num - 4 end ; 
while num >« 1 do 

begin sendl(i); num :*= num - 1 end 
end ; 
nonumbering: 
end ; 
if len + fw > maxstringlength then fw :- maxstringlength - len; 
for x2 :=■ xl+1 to fw do 
begin len := len + 1; 
with str [len] do 
begin c :=» blank; 
nbl :«= charwidth 
end 
end ; 
if len + xl > maxstringlength then xl := maxstringlength - len; 
if form In [numeric, loweralpha, upperalpha] 
then for x2 := xl downto 1 do 
begin len := len + 1; 
with str [len] do 
begin if form = loweralpha 
then c := digit[x2] + 32 
else c := digit[x2] ; 



551 

552 

553 

554 

555 

556 

557 

558 

559 

560 

561 

562 

563 

564 

565 

566 

567 

568 

569 

570 

571 

572 

573 

574 

575 

576 

577 

578 

579 

580 

581 

582 

583 

584 

585 

586 

587 

588 

589 

590 

591 

592 

593 

594 

595 

596 

597 

598 

599 

600 

601 

602 

603 

604 

605 

606 

607 

608 

609 

610 

611 

612 

613 

614 

615 

616 

617 

618 

619 

620 

621 

622 

623 

624 

625 

626 

627 

628 

629 

630 

631 

632 

633 

634 

635 

636 

637 

638 

639 

640 

641 

642 

643 

644 

645 

646 

647 

648 

649 

650 

651 

652 

653 

654 

655 

656 

657 

658 

659 

660 



nbl := charwidth 
end 
end 
else for x2 := 1 to xl do 
begin len := len + 1; 
with str [len] do 
begin if. form = lowerroman 
then c := digit[x2] + 32 
else c := digit[x2] ; 
= charwidth 




CONVERTNUMBER > ; 



SHIFTSTRING - CONVERT STRING TO UPPER/LOWER CASE, 

CONSIDERING STUTTERING AND CASE SHIFT. 



procedure shiftstring( var str 
var lcs 



var 
intch 
oldch 
oldoldch 
xl,x2 



ascii; 

ascii; 

ascii; 

: integer; 

> 



string; var len : integer; 
boolean ) ; 

INTERNAL CHARACTER } 
PREVIOUS INTERNAL CHARACTER } 
PREVIOUS PREVIOUS CHARACTER > 
LOOP INDICES } 



begin { SHIFTSTRING 
oldch := blank; 
oldoldch := blank; 
xl := 0; 
x2 := 1; 
if len >= 1 
then if str [1] .c = parachar 
then begin xl := 1; x2 := 2 end; 
for x2 := x2 to len do 
begin intch := lower(str [x2] .c) ; 
if intch = casech 
then lcs := not lcs 
else if intch = oldch 
then if (oldoldch = blank) and class [intch] .letter 
then begin str [xl] .c := upper (intch); 
lcs := true 
end 
else begin xl := xl + 1; 
if lcs 
then str[xl].c := intch 
else str[xl].c := upper(intch) 
end 
else begin xl :■ xl + 1; 
if lcs 
then str[xl].c := intch 
else str [xl] .c := upper (intch) 
end ; 
oldoldch :=» oldch; 
oldch := intch 
end ; 
len :« xl 
end { SHIFTSTRING >; 



UNDERSTRING - SET UNDERLINED CHARACTERS IN STRING, 
CONSIDERING UNDERLINE CHARACTER. 
THIS IS ALSO DONE IN READPSTRING. 



procedure understring( var str : string; var len : integer; 
var uln : boolean ) ; 



INTERNAL CHARACTER } 
LOOP INDICES } 



var 
intch : ascii; { 
xl,x2 : integer; { 
begin < UNDERSTRING } 
xl :» 0; 

for x2 := 1 .to len do 
begin intch :- str[x2].c; 
if intch = underchar 
then uln :» not uln 
else begin xl :- xl + 1; 
if (intch <> blank) and uln 
then str[xl].c :- intch + 
else str[xl] .c :- intch 
end 
end ; 
len :- xl 
end { UNDERSTRING >; 



JUSTIFY - LEFT JUSTIFY, RIGHT JUSTIFY, AND/OR CENTER 
AN OUTPUT LINE. 



procedure 

const 
floor 
cieling 


justify; 

- 0.0; 

- 0.9999; 


{ 
< 


var 
fc 


: real; 


< 


ib 
nb 
ng 


: integer; 
: integer; 
: integer; 


{ 
{ 
{ 



MAKES TRUNC DO FLOOR > 
MAKES TRUNC DO CIELING 



TO SELECT FLOOR OR CIELING 
INSERT BLANKS } 
NUMBER BLANKS (TOTAL) > 
NUMBER GAPS (ACTUAL) > 



begin { JUSTIFY } 
ng :- ngaps - 1; 

nb :- (rightmargin - nchars) * charwidth; 
if leftjustify 
then begin if rightjustify 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 43 



661 

662 

663 

664 

665 

666 

667 

668 

669 

670 

671 

672 

673 

674 

675 

676 

677 

678 

679 

680 

681 

682 

683 

684 

685 

686 

687 

688 

689 

690 

691 

692 

693 

694 

695 

696 

697 

698 

699 

700 

701 

702 

703 

704 

705 

706 

707 

708 

709 

710 

711 

712 

713 

714 

715 

716 

717 

718 

719 

720 

721 

722 

723 

724 

725 

726 

727 

728 

729 

730 

731 

732 

733 

734 

735 

736 

737 

738 

739 

740 

741 

742 

743 

744 

745 

746 

747 

748 

749 

750 

751 

752 

753 

754 

755 

756 

757 

758 

759 

760 

761 

762 

763 

764 

765 

766 

767 

768 

769 

770 



then begin if moreonleft 
then fc := floor 
else fc := cieling; 
for ng :» ng downto 1 do 
begin ib := trunc(fc + nb / ng); 
with outline[gaps [ng] ] do nbl : = nbl 
nb :- nb - ib 
end 
end 
end 
else with outline [gaps [0] ] do 
if rightjustify 
then nbl := nbl + nb 
else nbl := nbl + trunc(nb / 2); 
moreonleft :=» not moreonleft 
end { JUSTIFY }; 



WRITE 1 - WRITE ONE CHARACTER, DO CONVERSION FROM ASCII 
TO THE HOST CHARACTER SET. 



PARAM CH - CHARACTER TO WRITE. 



procedure write 1( ch : asciix ); 
begin < WRITE1 } 
with host[ch mod 128] do 
begin if chr74 
then write (chr( 60)) 
else if chr76 
then write (chr( 62)); 
write(c) 
end 
end { WRITE1 }; 



ENDLINE - TERMINATE AND COUNT AN OUTPUT LINE. 



} 



procedure endline; 
begin { ENDLINE } 
if selection [pagenumber] 
then if blankline 

then blankcount := blankcount + 1 

else writeln; 
if linecount <> infinity then linecount := linecount 
end { ENDLINE }; 



WRITEBLANKLINES - WRITE ACCUMULATED BLANK LINES. 



} 



procedure writeblanklines ; 
begin { WRITEBLANKLINES } 
blankline := false; 
if terminal type - lpt 
then while blankcount >« 2 do 

begin if selection [pagenumber] then write ('0'); 
blankcount := blankcount - 2; 

if linecount <> infinity then linecount :=* linecount + 1; 
endline 
end ; 
while blankcount > do 
begin blankcount :* blankcount - 1; 

if linecount <> infinity then linecount :- linecount + 1; 
endline 
end 
end { WRITEBLANKLINES }; 



WRITESTRING - WRITE A STRING TO THE OUTPUT FILE. 



PARAM STR « STRING TO WRITE. 
LEN « LENGTH OF STR. 



: string; len : integer ); 

GENERAL INDEX VARIABLES > 
UNDERLINING FOR THIS STRING 
LOCAL UNDERCHAR } 



procedure writestring( var str 
var 
xl,x2,x3 : integer; { 
understr : string; { 
lunderchar : ascii; { 
begin { WRITESTRING } 
if selection [pagenumber] 
then begin while (str [len] .c = blank) and (len > 1) do 
len :» len - 1; 
if str [len] .c - blank then len :« 0; 

blankline :«= (len - 0) and (carriagecontrol - blank), 
if not blankline 



771 
772 
773 
774 
775 
776 
777 
778 
779 
780 
781 
782 
783 
784 
785 
786 
787 
788 
789 
790 
791 
792 
793 
794 
795 
796 
797 
798 
799 



802 
803 
804 
805 
806 
807 
808 
809 
810 
811 
812 
813 
814 
815 
816 
817 
818 
819 
820 
821 
822 
823 
824 
825 
826 
827 
828 
829 
830 
831 
832 
833 
834 
835 
836 
837 
838 
839 
840 
841 
842 
843 
844 
845 
846 
847 
848 
849 
850 
851 
852 
853 
854 
855 
856 
857 
858 
859 
860 
861 
862 
863 
864 
865 
866 
867 
868 
869 
870 
871 
872 
873 
874 
875 
876 
877 
878 
879 



then begin writeblanklines; 
if underchar <> nul 
then begin x2 := 0; 
for xl := 1 _to len do with str[xl] do 
if odd(c div 128) 
then begin understr [xl] .c := underscore; 
understr [xl] .nbl := charwidth; 
c :- c - 128; 
x2 := xl 
end 
else begin understr [xl] .c := blank; 
understr [xl] .nbl := nbl 
end ; 
if (x2 <> 0) and underavail 
then begin lunderchar := underchar; 
underchar := nul; 
writestring(understr,x2) ; 
underchar := lunderchar; 
case terminaltype of 
ajt, 

ast : writel(cr) ; 

lpt : begin writeln; carriagecontrol := plus end 
end 
end 
end ; 
str [1]. nbl := str [1]. nbl + shift; 

if terminaltype = lpt then writel (carriagecontrol) ; 
if explicitblank <> nul 
then for xl := 1 to len d£ with str [xl] do 
jj, c = explicitblank 
then begin c := blank; nbl := charwidth end ; 
if shif tup 
then for xl := 1 Jto len jio 
str[xl].c := upper(str [xl] .c) ; 
if terminaltype = ajt 
then begin x2 := 0; 
for xl := 1 to len do 
with str[xl] do 
if. c <> blank 
then begin if x2 <> 

then begin x3 := x2 div charwidth; 
if (x2 mod charwidth = 0) and (x3 < 5) 
then for x3 := 1 to x3 do writel (blank) 
else begin writel (esc); writel(x); 
writel(x2 div 100 + zero); 
writel(x2 div 10 mod 10 + zero); 
writel (x2 mod 10 + zero) 
end 
end ; 
x2 := 0; 
writel(c) 
end 
else x2 := x2 + nbl 
end 
else for xl := 1 ££ len do 
with str[xl] do_ 
if c - blank 
then for x2 := 1 to nbl do 
writel (blank) 
else writel (c) ; 
carriagecontrol := blank; 
str [1]. nbl := str [1]. nbl - shift 
end 
end 
else blankline := false 
end < WRITESTRING }; 



ADVANCEFORM - ADVANCE FORM TO NEXT L SPECIFICATION. 



procedure advanceform; 



formch 
fw 



which 
xl 



ascii; 
asciix; 
integer ; 
integer ; 
boolean; 
integer ; 



i KEY CHARACTER } 

{ CURRENT FORM CHARACTER > 

{ FIELD WIDTH OF CURRENT ITEM } 

< LOCAL TITLE LENGTH } 

{ WHICH TITLE (MAIN, SUB) > 

{ GENERAL INDEX } 



NEXTCH - ADVANCE TO NEXT FORM CHARACTER. 



procedure nextch; 

begin { NEXTCH > 

formindex := (formindex mod formlength) + 1; 

formch := form [formindex] 

end { NEXTCH }; 



< NUMBER - READ A NUMBER FROM THE FORM. 
* 

* PARAM DEF = DEFAULT NUMBER. 
} 

function number ( def : integer ) : integer; 
var 

num : integer; { NUMBER BEGIN BUILT } 

begin { NUMBER } 
if class [formch] .digit 
then begin num := 0; 
repeat num :» num * 10 + formch - zero; 
if num >= infinity then num := infinity-1; 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 44 



881 
882 
883 
884 
885 

886 

887 

888 

889 

890 

891 

892 

893 

894 

895 

896 

897 

898 

899 

900 

901 

902 

903 

904 

905 

906 

907 

908 

909 

910 

911 

912 

913 

914 

915 

916 

917 

918 

919 

920 

921 

922 

923 

924 

925 

926 

927 

928 

929 

930 

931 

932 

933 

934 

935 

936 

937 

938 

939 

940 

941 

942 

943 

944 

945 

946 

947 

948 

949 

950 

951 

952 

953 

954 

955 

956 

957 

958 

959 

960 

961 

962 

963 

964 

965 

966 

967 

968 

969 

970 

971 

972 

973 

974 

975 

976 

977 

978 

979 

980 

981 

982 

983 

984 

985 

986 

987 

988 

989 

990 



nextch 
until not class [formch] .digit; 
number := num 
end 
else number := def 
end { NUMBER }; 



FIELDWIDTH - READ OPTIONAL FIELD WIDTH SPECIFICATION. 



DEF = DEFAULT FIELD WIDTH. 
MIN - MINIMUM FIELD WIDTH. 



procedure fieldwidth( def ,min : integer ); 
begin { FIELDWIDTH } 
fw := def; 
if formch = colon 
then begin nextch; 
fw := number(def) 
end ; 
if fw < min then fw := min 
end { FIELDWIDTH >; 



SEND1 - SEND ONE CHARACTER TO THE TEXT LINE. 
PARAM CH - CHARACTER TO BE SENT. 



> 



procedure sendl( ch : asciix ); 

begin { SEND1 } 

textindex := textindex + 1; 

if textindex + shift > maxowidth 

then begin textindex := 1; error(-l) end ; 
text [textindex] .c := ch; 
text [textindex] .nbl := charwidth; 

if textindex > textlength then textlength := textindex 
end { SEND1 }; 



• SEND UP TO 10 CHARACTERS TO THE TEXT LINE, 
DETERMINING FIELD WIDTH. 



CH - 10 CHARACTERS. 

DEF - DEFAULT FIELD WIDTH. 

MIN - MINIMUM FIELD WIDTH. 



procedure sendl0( ch : chlO; def , min 
var 
xl : integer; { 



integer ) ; 
INDEX INTO CH } 



begin { SEND10 } 
fieldwidth(def ,min); 
if fw < def 
then { SEND RIGHTMOST FW CHARACTERS } 

for xl := def-fw+1 tc> def d_o sendl (ch [xl] ) 
else { SEND LEADING BLANKS AND ALL DEF CHARACTERS } 

begin for xl := 1 J^o fw-def do sendl(blank) ; 

for xl := 1 to def do sendl(ch[xl] ) 

end 
end { SEND10 }; 



WRITETEXT - WRITE TEXT BUFFER. 



procedure write text; 

begin { WRITETEXT } 

writestring(text, textlength) ; 

end line; 

textlength := 1; 

textindex :=» 1 

end { WRITETEXT }; 



• WAIT FOR OPERATOR ACKNOWLEDGEMENT. 
HEAVILY SYSTEM DEPENDANT. 



procedure wait; 

type ch80 =■ packed array [1.. 80] of char; 

var cs : ch80; < CURRENT CONTROL STATEMENT } 

procedure csimage( var cs : ch80 ); extern; 

begin { WAIT } 
if terminaltype = lpt 
then begin csimage(cs) ; 

writeln('PM ',cs) 

end 
else begin writel(bel) ; 

writeln(chr(0),chr( 11)); 

writeln(chr(0),chr( 6),chr(0) ,chr( 1)); 

read In 

end 
end { WAIT }; 



991 
992 
993 
994 
995 
996 
997 
998 
999 
1000 
1001 
1002 
1003 
1004 
1005 
1006 
1007 
1008 
1009 
1010 
1011 
1012 
1013 
1014 
1015 
1016 
1017 
1018 
1019 
1020 
1021 
1022 
1023 
1024 
1025 
1026 
1027 
1028 
1029 
1030 
1031 
1032 
1033 
1034 
1035 
1036 
1037 
1038 
1039 
1040 
1041 
1042 
1043 
1044 
1045 
1046 
1047 
1048 
1049 
1050 
1051 
1052 
1053 
1054 
1055 
1056 
1057 
1058 
1059 
1060 
1061 
1062 
1063 
1064 
1065 
1066 
1067 
1068 
1069 
1070 
1071 
1072 
1073 
1074 
1075 
1076 
1077 
1078 
1079 
1080 
1081 
1082 
1083 
1084 
1085 
1086 
1087 
1088 
1089 
1090 
1091 
1092 
1093 
1094 
1095 
1096 
1097 
1098 
1099 
1100 



begin { ADVANCEFORM } 
ch := upper (form[formind ex] ) ; 
if not class [ch] .quote then nextch; 
if class [ch] .formchar 
then case ch oJ_ 
c : sendl 0(rawclock, 8,0); 
d : sendl0(rawdate,8,0); 
e : sendl0(nicedate,9,0) ; 

1 : begin if textlength > 1 then writetext; 
linecount := number (1) 
end ; 
P : begin if (formch = colon) or (formch = blank) 
then ch := n 

else begin ch := formch; nextch end ; 
fieldwidth(3,0); 

convertnumber (text, textindex, pagenumber,fw,numform(ch, -4)) ; 
if textindex > textlength then textlength := textindex 
end ; 
s, 

fc : begin which := (ch = t) jar_ (ch ■» smallt); 
tl := titlelength [which] ; 
fieldwidth(tl.O); 
if fw < tl 
then { SEND LAST FW CHARACTERS } 

for xl := tl-fw+1 to tl do sendl (title [which] [xl]) 
else { SEND LEADING BLANKS AND ALL TL CHARACTERS } 
begin for xl := 1 tjo fw-tl do sendl (blank) ; 
for xl :=■ 1 to tl do sendl (title [which] [xl]) 
end 
end ; 
w : sendl0(wallclock,8,0); 
hash : begin xl := number(l); 

while textindex < xl do sendl (blank) ; 
textindex := xl 
end ; 
lbracket : begin if textlength > 1 then writetext; 
if selection [pagenumber] 
then begin if eject 

then begin blankcount := 0; 
if terminaltype = lpt 
then carriagecontrol := one 
else writel(ff) 
end 
else if terminaltype <> lpt 
then writeblanklines; 
if pause then wait 
end ; 
if formnlength > 
then begin form := formnext; 
formlength := formnlength; 
formindex := 0; 

repeat nextch until formch » lbracket; 
nextch; 

formnlength := 
end 
end ; 
rbracket : begin if textlength > 1 then writetext; 
pagenumber := pagenumber + 1; 
validate (pagenumber, 0,infinity-l, -3) 
end ; 
slash : for xl := 1 to number (1) do writetext; 
dquote, 
squote : repeat nextch; 

while formch <> ch do 
begin sendl (formch) ; 
nextch 
end ; 
nextch ; 

if formch ■ ch then sendl(ch) 
until formch <> ch; 
blank : 
end 
else begin errorl := ch; error(-2) end 
end { ADVANCEFORM }; 



} 



BEGINLINE - BEGIN OUTPUT LINE, ADVANCE FORM AS NECESSARY. 



procedure beginline; 
var 
fix : integer; { 

fnl : integer; { 

begin { BEGINLINE } 
if linecount o 
then { MAKE LINECOUNT > } 
begin fix :■ formindex; 
fnl :- formnlength; 
repeat 
if fnl <> formnlength 
then begin fix :- formindex; 
fnl :- formnlength 
end ; 
advanceform 
until (linecount > 0) or ((fix 
if linecount <- 
then < BAD FORM > 
begin error(-5); 
linecount :■ infinity 
end 
end ; 
blankline :- true 
end { BEGINLINE }; 



LOCAL COPY OF FORMINDEX > 
LOCAL COPY OF FORMNLENGTH > 



formindex) and (fnl - 0)); 



PASCAL NEWS #15 



SEPTEMBER, 1979 



E >4 5 



1101 

1102 

1103 

1104 

1105 

1106 

1107 

1108 

1109 

1110 

1111 

1112 

1113 

1114 

1115 

1116 

1117 

1118 

1119 

1120 

1121 

1122 

1123 

1124 

1125 

1126 

1127 

1128 

1129 

1130 

1131 

1132 

1133 

1134 

1135 

1136 

1137 

1138 

1139 

1140 

1141 

1142 

1143 

1144 

1145 

1146 

1147 

1148 

1149 

1150 

1151 

1152 

1153 

1154 

1155 

1156 

1157 

1158 

1159 

1160 

1161 

1162 

1163 

1164 

1165 

1166 

1167 

1168 

1169 

1170 

1171 

1172 

1173 

1174 

1175 

1176 

1177 

1178 

1179 

1180 

1181 

1182 

1183 

1184 

1185 

1186 

1187 

1188 

1189 

1190 

1191 

1192 

1193 

1194 

1195 

1196 

1197 

1198 

1199 

1200 

1201 

1202 

1203 

1204 

1205 

1206 

1207 

1208 

1209 

1210 



WRITENULL - WRITE A. NULL LINE. 



procedure writenull; 

begin { WRITENULL } 

beginline; 

writestring(outline, 1) ; 

endline 

end { WRITENULL }; 



[ SKIP - SKIP OUTPUT LINES. 
> 

procedure skip( n : integer ); 

var xl : integer; 

begin { SKIP } 

if n > linecount then n :=> linecount; 

for xl := 1 to ndo writenull 

end { SKIP >; 



WRITELINE - WRITE THE OUTPUT LINE. 



} 



procedure writeline; 

begin { WRITELINE } 

beginline; 

writestring (outline, outlength) ; 

endline; 

if space <> then skip (space); 

outlength := 1; 

outline[l] .nbl := leftmargin * charwidth; 

nchars := leftmargin; 

nwords := 0; 

ngaps := 0; 

gaps [0] :- 1; 

newoutline := true 

end { WRITELINE }; 



PAGE - CONDITIONALLY PRODUCE A PAGE EJECT. 



} 



procedure page( n : integer ); 
begin < PAGE } 
if linecount < n 
then repeat while linecount > do writenull; 

while (formtformindex] <> lbracket) and (linecount <= 0) do 

advance form 
until form[formindex] = lbracket 
else if linecount = infinity then 
if 5 < n then skip (5) 
end { PAGE }; 



• ADVANCE TO THE NEXT INPUT CHARACTER, AND 
CONVERT FROM HOST CHARACTER SET TO ASCII. 



procedure nextchar; 



■ READ AN INPUT LINE, CONVERT INTO ASCII, 
CONSIDERING CASE SHIFT AND UNDERLINING. 



EXTERNAL CHARACTER } 
INTERNAL CHARACTER } 
GENERAL INDEX VARIABLES 



procedure readline; 
var 
extch : char; { 
intch : ascii; { 
xl,x2 : integer; { 
begin { READLINE } 
newinline :- true; 
xl :- 0; 

while not eoln(infile) and (xl < inwidth) do 
begin r ead(infile, extch ) ; 
xl :■= xl + 1; 
if not eoln(inf ile) 
then if ord (extch) - 60 
then begin intch :- asc74[infiletl ; 
get(infile) 
end 
else if ord(extch) - 62 
then begin intch :- asc76[inf ilef] ; 
get(infile) 



1211 

1212 

1213 

1214 

1215 

1216 

1217 

1218 

1219 

1220 

1221 

1222 

1223 

1224 

1225 

1226 

1227 

1228 

1229 

1230 

1231 

1232 

1233 

1234 

1235 

1236 

1237 

1238 

1239 

1240 

1241 

1242 

1243 

1244 

1245 

1246 

1247 

1248 

1249 

1250 

1251 

1252 

1253 

1254 

1255 

1256 

1257 

1258 

1259 

1260 

1261 

1262 

1263 

1264 

1265 

1266 

1267 

1268 

1269 

1270 

1271 

1272 

1273 

1274 

1275 

1276 

1277 

1278 

v 1279 



: 1280 

: 1281 

( 1282 
{ 1283 
( 1284 
' 1285 
1286 
1287 
1288 
1289 
1290 
1291 
1292 
1293 
1294 
1295 
1296 
1297 
1298 
1299 
1300 
1301 
1302 
1303 
1304 
1305 
1306 
1307 
1308 
1309 
1310 
. 1311 
' 1312 
[ 1313 

; 1314 

' 1315 
' 1316 
' 1317 

1318 
', 1319 

1320 



end 
else intch := asc [extch] 
else intch := asc [extch]; 
inline [xl].c := intch 
end ; 
inline [xl+l].c :- blank; 

for x2 := 1 to xl+1 do inline [x2] .nbl :- charwidth; 
if. inline [l].c = dirch 
then begin directline := true; lowerdir := true end 
else directline := directline and (inline[l].c - plus); 
if casech <> nul 
then if directline 
then shiftstring (inline, xl, lowerdir) 
else shiftstring (inline, xl, lowercase) ; 
if xl > 1 
then while (inline [xl ] .c - blank) and (xl > 1) do 
xl :- xl - 1; 
if xl - 1 
then if inline[xl].c = blank 
then xl : = 0; 
inlength := xl; 
readln(infile); 
firsterror :* true; 
end { READLINE }; 



begin { NEXTCHAR } 
incolumn := incolumn + 1; 
if incolumn > inlength 
then if eol 
then if eof (infile) 
then endof input := true 
else begin readline; 
incolumn := 1; 
if linenums 
then begin if class [inline [1] .c] .digit 
then begin linenumber := 0; 
repeat linenumber := linenumber * 10 + 

inline [incolumn] .c - : 
incolumn := incolumn + 1 
until not class [inline [incolumn] .c] .digit 
end ; 
incolumn := incolumn + 1 
end 
else linenumber := linenumber + 1; 
eol := incolumn > inlength; 
if eol 
then inchar := blank 
else inchar := inline [incolumn] .c 
end 
else begin eol := true; 
inchar := blank 
end 
else inchar := inline [incolumn] .c 
end { NEXTCHAR }; 



{ NEXTLINE - ADVANCE TO BEGINNING OF NEXT INPUT LINE. 
> 

procedure nextline; 

begin < NEXTLINE } 

incolumn := inlength + 1; 

eol := true; 

nextchar 

end { NEXTLINE >; 



{ > 
< > 
{ } 



DIRECTIVE PROCESSING 



BREAK - CAUSE A BREAK IN JUSTIFICATION. 



} 



procedure break; 
begin { BREAK } 
if not newoutline 
then begin if not (lef tjustify and rightjustify) 

then justify; 
writeline 
end ; 
underlining := false; 
newparagraph := true 
end { BREAK >; 



INUNDENT - SCHEDULE AN INDENT OR UNDENT. 



INUN > FOR INDENT, 
< FOR UNDENT. 



PASCAL NEWS #15 



SEPTEMBER, 197 9 



PAGE 46 



1321 
1322 
1323 
1324 
1325 
1326 
1327 
1328 
1329 
1330 
1331 
1332 
1333 
1334 
1335 
1336 
1337 
1338 
1339 
1340 
1341 
1342 
1343 
1344 
1345 
1346 
1347 
1348 
1349 
1350 
1351 
1352 
1353 
1354 
1355 
1356 
1357 
1358 
1359 
1360 
1361 
1362 
1363 
1364 
1365 
1366 
1367 
1368 
1369 
1370 
1371 
1372 
1373 
1374 
1375 
1376 
1377 
1378 
1379 
1380 
1381 
1382 
1383 
1384 
1385 
1386 
1387 
1388 
1389 
1390 
1391 
1392 
1393 
1394 
1395 
1396 
1397 
1398 
1399 
1400 
1401 
1402 
1403 
1404 
1405 
1406 
1407 
1408 
1409 
1410 
1411 
1412 
1413 
1414 
1415 
1416 
1417 
1418 
1419 
1420 
1421 
1422 
1423 
1424 
1425 
1426 
1427 
1428 
1429 
1430 



} 



procedure inundent( inun : integer ); 

begin { INUNDENT } 

b reak ; 

nchars := leftmargin + inun; 

if nchars < then nchars := 0; 

outlinefl] .nbl := nchars * charwidth 

end { INUNDENT }; 



INPSAVE - SAVE INPUT SETTINGS 



> 



procedure inpsave; 

begin { INPSAVE } 

validate (keepinp , 0,maxkeep , 1 151 ) ; 

with saveinp [keepinp] do 

begin defined := true; 

b := explicitblank; 

c := casech; 

d := dirch; 

h := hyphen; 

u := underchar; 

w := inwidth 

end 
end { INPSAVE }; 



} 



INPRESTORE - RESTORE PREVIOUS INPUT SETTINGS. 



procedure inprestore; 
begin { INPRESTORE } 
validate (keepinp, 0,maxkeep, 1151) ; 
with saveinp [keepinp] do_ 
if defined 
then begin explicitblank := b; 
if casech <> c 
then begin casech := c; 
lowercase := casech <> nul 
end ; 
dirch := d; 
hyphen := h; 
underchar := u; 
inwidth := w 
end 
else error(1105) 
end { INPRESTORE }; 



> 



MARSAVE - SAVE MARGIN SETTINGS. 



procedure marsave ; 

begin { MARSAVE } 

validate (keepmar , ,maxkeep , 151 ) ; 

with savemar [keepmar] do 

begin defined := true; 

1 := leftmargin; 

r := rightmargin 

end 
end { MARSAVE }; 



MARRESTORE - RESTORE PREVIOUS MARGIN SETTINGS. 



procedure marrestore; 
begin { MARRESTORE } 
validate(keepmar,0,maxkeep,151); 
with savemar [keepmar] do 
if defined 
then begin leftmargin :■= 1; 
rightmargin := r 
end 
else error(105) 
end { MARRESTORE }; 



OPTSAVE - SAVE OPTION SETTINGS. 



procedure optsave; 
begin { OPTSAVE > 
validate(keepopt,0,maxkeep,251); 
with saveopt [keepopt] do 
begin defined := true; 
= printerrors; 
= fill; 
j := badjustify; 
1 := leftjustify; 

iltipleblanks; 
*= ensure2; 
- rightjustify; 
: = space; 
:~ shiftup 



end 
end { 



OPTSAVE } ; 



1431 
1432 
1433 
1434 
1435 
1436 
1437 
1438 
1439 
1440 
1441 
1442 
1443 
1444 
1445 
1446 
1447 
1448 
1449 
1450 
1451 
1452 
1453 
1454 
1455 
1456 
1457 
1458 
1459 
1460 
1461 
1462 
1463 
1464 
1465 
1466 
1467 
1468 
1469 
1470 
1471 
1472 
1473 
1474 
1475 
1476 
1477 
1478 
1479 
1480 
1481 
1482 
1483 
1484 
1485 
1486 
1487 
1488 
1489 
1490 
1491 
1492 
1493 
1494 
1495 
1496 
1497 
1498 
1499 
1500 
1501 
1502 
1503 
1504 
1505 
1506 
1507 
1508 
1509 
1510 
1511 
1512 
1513 
1514 
1515 
1516 
1517 
1518 
1519 
1520 
1521 
1522 
1523 
1524 
1525 
1526 
1527 
1528 
1529 
1530 
1531 
1532 
1533 
1534 
1535 
1536 
1537 
1538 
1539 
1540 



( OPTRESTORE - RESTORE PREVIOUS OPTION SETTINGS. 

> 

procedure optrestore; 
begin { OPTRESTORE } 
validate (keepopt , 0,maxkeep , 251 ) ; 
with saveopt [keepopt] _do 
if defined 
then begin printerrors := e; 

fill := f; 

badjustify := j; 

leftjustify := 1; 

multipleblanks := m; 

ensure2 := p; 

rightjustify := r; 

space := s; 

shiftup :■» u 

end 
else error(205) 
end { OPTRESTORE >; 



PARSAVE - SAVE PARAGRAPH SETTINGS. 



procedure parsave; 
begin < PARSAVE } 
validate (keeppar , .maxkeep , 351 ) ; 
with savepar [keeppar] do 
begin defined := true; 

0; {IT WOULD SEEM THAT THIS IS SUPERFLUOUS > 
f := parachar; 
i := lockeddent; 
numbering; 
parapage ; 
:= paras kip; 
numberwidth 



end 
end { 



> 



PARSAVE 



PARRESTORE - RESTORE PREVIOUS PARAGRAPH SETTINGS. 



procedure parrestore; 
begin { PARRESTORE } 
validate (keeppar, 0,maxkeep, 351) ; 
with savepar [keeppar] _do 
if defined 
then begin paracount := c; 

parachar := f; 

lockeddent := i; 

numbering :=■ n; 

parapage := p; 

paraskip :>= s; 

numberwidth := w 

end 
else error(305) 
end { PARRESTORE >; 



> 



DIRECTIVE - PROCESS ONE DIRECTIVE 



procedure directive; 

var 

dir : direct; { 

fullword : chlO; { 

word : c h3; { 

wordlength : integer; { 

xl,x2 : integer; < 



CURRENT DIRECTIVE } 

CURRENT DIRECTIVE WORD } 

3 LETTERS OF CURRENT DIRECTIVE WORD } 

LENGTH OF CURRENT DIRECTIVE WORD > 

GENERAL INDEX VARIABLES } 



{ NEXTCH - ADVANCE TO NEXTCHAR, CONSIDERING CONTINUATIONS. 

procedure nextch; 
begin { NEXTCH } 
nextchar ; 

if. eol and (infilet - '+') 
then begin nextchar; 

inchar :- blank 

end 
end { NEXTCH >; 



{ SWITCH - DETERMINE A SWITCH OPTION, CONSIDERING 

* THE DEFAULT. 
* 

* PARAM DEF - DEFAULT. 
} 

function switch ( def : boolean ) : boolean; 
begin { SWITCH > 
if class [inchar] .plusorminus 
then begin switch :- inchar - plus; 



PASCAL NEWS #15 



SEPTEMBER, 19 7 9 



PAGE 4 7 



1541 

1542 

J. 543 

1544 

1545 

1546 

1547 

1548 

1549 

1550 

1551 

1552 

1553 

1554 

1555 

1556 

1557 

1558 

1559 

1560 

1561 

1562 

1563 

1564 

1565 

1566 

1567 

1568 

1569 

1570 

1571 

1572 

1573 

1574 

1575 

1576 

1577 

1578 

1579 

1580 

1581 

1582 

1583 

1584 

1585 

1586 

1587 

1588 

1589 

1590 

1591 

1592 

1593 

1594 

1595 

1596 

1597 

1598 

1599 

1600 

1601 

1602 

1603 

1604 

1605 

1606 

1607 

1608 

1609 

1610 

1611 

1612 

1613 

1614 

1615 

1616 

1617 

1618 

1619 

1620 

1621 

1622 

1623 

1624 

1625 

1626 

1627 

1628 

1629 

1630 

1631 

1632 

1633 

1634 

1635 

1636 

1637 

1638 

1639 

1640 

1641 

1642 

1643 

1644 

1645 

1646 

1647 

1648 

1649 

1650 



nextch 
end 
else switch := def 
end < SWITCH }; 



CHARACTER - DETERMINE A CHARACTER OPTION, CONSIDERING 
THE DEFAULT. 



PARAM DEF - DEFAULT. 



} 



function character^ def : ascii ) : ascii; 
begin { CHARACTER } 
if inchar <> blank 
then begin character := inchar; 
nextch 
end 
else character := def 
end { CHARACTER >; 



. - DETERMINE A NUMERIC OPTION, CONSIDERING 
THE DEFAULT AND THE PREVIOUS VALUE. 

DEF - DEFAULT. 

LAST = PREVIOUS VALUE, IF < THEN 

RELATIVE FORM IS NOT RECOGNIZED. 
MIN - MINIMUM ALLOWED VALUE. 
MAX = MAXIMUM ALLOWED VALUE. 
ERR - ERROR NUMBER (IF OUT OF RANGE). 



} 



function number ( def , last, min, max, err : integer ) : integer; 
var 
num : integer; { NUMBER BEING BUILT } 

sign : ascii; { PLUS OR MINUS SIGN } 
begin { NUMBER > 

if class [inchar] .plusorminus and (last >= 0) 
then begin sign := inchar; nextch end 
else begin sign := plus; last := end ; 
if class [inchar] .digit 
then begin num := 0; 
repeat num := num * 10 + inchar - zero; 
if num >= infinity then num := infinity - 1; 
nextch 

until not class [inchar] .digit 
end 
else num := def; 
if sign = plus 
then num := last + num 
else num := last - num; 
if num < then num := 0; 
validate(num,min,max,err) ; 
number := num 
end { NUMBER }; 



READWORD - READ THE NEXT DIRECTIVE WORD. 



procedure readword; 
var 

xl : integer; { LOOP INDEX } 

begin { READWORD } 
wordlength := 0; 
while class [inchar] .letter do 

begin wordlength ":« wordlength + 1; 

if wordlength <= 10 
then begin fullword [wordlength] := inchar; 
if wordlength <» 3 then word [wordlength] := upper(inchar) 
end ; 

nextch 

end ; 
for xl :«= wordlength + 1 to 10 do fullword [xl] :- blank; 
for xl := wordlength + 1 to 3 do wordtxl] := blank 
end { READWORD }; 



READPSTRING - READ A PSTRING UNTIL A TERMINATOR CHARACTER. 

PARAM STR - PSTRING TO BE READ. 

LEN - LENGTH OF PREDEFINED PORTION OF STR, UPDATED 

TO NEW LENGTH. 
ENDC - TERMINATOR CHARACTER. 



} 



procedure readpstring( var str : pstring; var len 

endc : ascii ) ; 
begin { READPSTRING } 
underdir :- false; 

while (inchar <> endc) and not eol do 
begin if inchar = underchar 
then underdir :■= not underdir 
else if len < maxstringlength 
then begin len : = len + 1 ; 
if underdir 
then str [len] :» inchar + 128 
else str [len] :- inchar 
end ; 
nextch 
end 



integer ; 



1651 

1652 

1653 

1654 

1655 

1656 

1657 

1658 

1659 

1660 

1661 

1662 

1663 

1664 

1665 

1666 

1667 

1668 

1669 

1670 

1671 

1672 

1673 

1674 

1675 

1676 

1677 

1678 

1679 

1680 

1681 

1682 

1683 

1684 

1685 

1686 

1687 

1688 

1689 

1690 

1691 

1692 

1693 

1694 

1695 

1696 

1697 

1698 

1699 

1700 

1701 

1702 

1703 

1704 

1705 

1706 

1707 

1708 

1709 

1710 

1711 

1712 

1713 

1714 

1715 

1716 

1717 

1718 

1719 

1720 

1721 

1722 

1723 

1724 

1725 

1726 

1727 

1728 

1729 

1730 

1731 

1732 

1733 

1734 

1735 

1736 

1737 

1738 

1739 

1740 

1741 

1742 

1743 

1744 

1745 

1746 

1747 

1748 

1749 

1750 

1751 

1752 

1753 

1754 

1755 

1756 

1757 

1758 

1759 

1760 



end { READPSTRING }; 



LOOKUP - LOOK UP THE DIRECTIVE WORD. 



PARAM FIRST = FIRST ACCEPTABLE DIRECTIVE WORD. 

ILLEGAL - LAST+1 ACCEPTABLE DIRECTIVE WORD. 



function lookup ( first .illegal : direct ) : direct; 
var 

d : direct; { LOOKUP LOOP INDEX ) 

begin { LOOKUP } 
directs [illegal] := word; 
d := first; 
while (directs[d] [1] <> word[l]) or 

(directs [d] [2] <> word [2]) or 

(directs [d] [3] <> word [3]) do 
d :*= succ(d); 
lookup :- d 
end { LOOKUP }; 



INPUT - PROCESS INPUT DIRECTIVE. 



} 



{ KEY CHARACTER > 



procedure inputd; 
var 

ch : ascii; 

begin { INPUTD > 
if inchar = lparen 
then begin nextch; 
keepinp := keepinp + 1; 
while (inchar <> rparen) and not eol do 
begin ch := up per ( inchar ) ; 
nextch ; 

if class [ch] .inputchar 
then case ch oj[ 
b : explicitblank := character (nul) ; 
c : begin ch := character (nul) ; 
if ch <> casech 
then begin casech := ch; 
lowercase := casech <> nul 
end 
end ; 
d : dirch := character (period) ; 
h : hyphen := character (nul ) ; 
k : keepinp := number (0,-l,0,maxkeep, 1151) ; 
u : underchar := character(nul) ; 

w : inwidth := number(150, -1, min, maxiwidth, 1154) ; 
blank : 
end 
else begin errorl :=■ ch; error(HOl) end 
end ; 
if inchar = rparen 
then nextch 
else error(1102); 
inpsave 
end 
else begin if class [inchar] .digit 

then keepinp := number (0,-l,0,maxkeep, 1151) 
else keepinp := keepinp - 1; 
inprestore 
end 
end < INPUTD }; 



LITERAL - PROCESS LITERAL DIRECTIVE. 



procedure literal; 
var 
ch 



: asciix; 
: integer; 
: integer ; 
pstring; 
} 



LITERAL CHARACTER } 

LOOP INDEX } 

LENGTH OF LITSTRING > 

ARGUMENT OF LITERAL DIRECTIVE } 



litlength 

litstring 
begin < LITERAL 
litlength := 0; 
readpstring (litstring, litlength, nul); 
for i := 1 to litlength do 

begin ch := litstringfi] ; 

if_ ch « explicitblank 
then write 1 (blank) 
else write l(ch) 

end ; 
writeln 
end { LITERAL }; 



MARGIN - PROCESS MARGIN DIRECTIVE. 



procedure margin; 
var 

ch : ascii; { KEY CHARACTER } 

begin < MARGIN > 
if inchar = lparen 
then begin nextch; 
keepmar := keepmar + 1; 
while (inchar <> rparen) and not eol do 
begin ch :*» up per (inchar); 
nextch ; 



PASCAL NEWS #15 



SEPTE HBER, 197 9 



PAGE 48 



1761 
1762 
1763 
1764 
1765 
1766 
1767 
1768 
1769 
1770 
1771 
1772 
1773 
1774 
1775 
1776 
1777 
1778 
1779 
1780 
1781 
1782 
1783 
1784 
1785 
1786 
1787 
1788 
1789 
1790 
1791 
1792 
1793 
1794 
1795 
1796 
1797 
1798 
1799 
1800 
1801 
1802 
1803 
1804 
1805 
1806 
1807 
1808 
1809 
1810 
1811 
1812 
1813 
1814 
1815 
1816 
1817 
1818 
1819 
1820 
1821 
1822 
1823 
1824 
1825 
1826 
1827 
1828 
1829 
1830 
1831 
1832 
1833 
1834 
1835 
1836 
1837 
1838 
1839 
1840 
1841 
1842 
1843 
1844 
1845 
1846 
1847 
1848 
1849 
1850 
1851 
1852 
1853 
1854 
1855 
1856 
1857 
1858 
1859 
1860 
1861 
1862 
1863 
1864 
1865 
1866 
1867 
1868 
1869 
1870 



if class [ch] .marginchar 
then case ch of_ 
k : keepmar := number (0,-l,0,maxkeep, 151 ) ; 
1 : leftmargin := number(0, leftmargin, 0, infinity, 0) ; 
r : rightmargin := number ( 70, rightmar gin, 0, infinity, 0); 
b lank : 
end 
else begin errorl := ch; error(lOl) end 
end ; 
if inchar = rparen 
then nextch 
else error(102); 
validate(rightmargin,min,maxmargin, 152) ; 
validate (lef tmargin.O, rightmargin, 153); 
marsave 
end 
else begin if class [inchar] .digit 

then keepmar := number(0,-l,0,maxkeep,151) 
else keepmar := keepmar - 1; 
marrestore 
end ; 
nchars :- leftmargin; 
outline [ 1] .nbl := nchars * charwidth 
end { MARGIN }; 



OPTION - PROCESS OPTION DIRECTIVE. 



procedure option; 
var 

ch : ascii; { KEY CHARACTER } 

begin { OPTION } 
if inchar = lparen 
then begin nextch ; 
keepopt := keepopt + 1; 
while (inchar <> rparen) and not eol do 
begin ch := upper(inchar) ; 
nextch; 

if class [ch] .optionchar 
then case ch c)f_ 
e : printerrors := switch(true) ; 
f : fill := switch (true); 

j : badjustify := number(3, -1,3, infinity, 265) 
k : keepopt := number(0,-l,0,maxkeep, 251) ; 
1 : leftjustify := switch(true) ; 
m : multipleblanks := switch(true) ; 
p : ensure2 := switch(true) ; 
r : right justify := switch(true) ; 
s : space := number(l,-l, 1,3,266) - 1; 
u : shiftup := switch (false) ; 
blank : 



; error(201) end 



end 
else begin errorl 
end; 

if inchar = rparen 
then nextch 
else error (202); 
optsave 
end 
else begin i£ class [inchar] .digit 

then keepopt := number (0,-1 , 0,maxkeep, 251) 
else keepopt := keepopt - 1; 
optrestore 
end 
end { OPTION }; 



OUTPUT - PROCESS OUTPUT DIRECTIVE. 



procedure outputd; 
var 

ch : ascii; { KEY CHARACTER > 

begin { OUTPUTD > 
if linecount < 
then begin if inchar = lparen 

then begin repeat nextch until (inchar <> blank) or eol; 
readword; 

if wordlength <= 3 
then terminaltype := lookup (ast, ilt) 
else terminaltype := ilt; 
if terminaltype = ilt 

then begin error(1009); terminaltype := ast end ; 
case terminaltype of_ 
ast : ; 

lpt : carriagecontrol := one; 
ajt : b egin while inchar ■= blank do nextch; 

charwidth := number(10, -1,0, infinity, 1013) ; 
if not (charwidth in [10,12]) 
then begin error(1013) ; 
charwidth := 10 
end ; 
charwidth := 60 div charwidth; 
outline [1] .nbl :» leftmargin * charwidth 
end 
end ; 
while (inchar <> rparen) and not eol do 
begin ch := upper (inchar) ; 
nextch; 

if class [ch] .outputchar 
then case ch of_ 
e : eject := switch(false) ; 
p : pause :» switch(false) ; 
s : shift :- number(0,-l,0,maxshif t, 1064) ; 
u : underavall :■ switch(true) ; 



1871 
1872 
1873 
1874 
1875 
1876 
1877 
1878 
1879 
1880 
1881 
1882 
1883 
1884 
1885 
1886 
1887 
1888 
1889 
1890 
1891 
1892 
1893 
1894 
1895 
1896 
1897 
1898 
1899 
1900 
1901 
1902 
i903 
1904 
1905 
1906 
1907 
1908 
1909 
1910 
1911 
1912 
1913 
1914 
1915 
1916 
1917 
1918 
1919 
1920 
1921 
1922 
1923 
1924 
1925 
1926 
1927 
1928 
1929 
1930 
1931 
1932 
1933 
1934 
1935 
1936 
1937 
1938 
1939 
1940 
1941 
1942 
1943 
1944 
1945 
1946 
1947 
1948 
1949 
1950 
1951 
1952 
1953 
1954 
1955 
1956 
1957 
1958 
1959 
1960 
1961 
1962 
1963 
1964 
1965 
1966 
1967 
1968 
1969 
1970 
1971 
1972 
1973 
1974 
1975 
1976 
1977 
1978 
1979 
1980 



w : outwidth := number (maxowidth, -1,0, maxowidth, 1054) ; 
blank : 
end 
else begin errorl := ch; error(lOOl) end 
end ; 
if inchar = rparen 
then nextch 
else error(1002); 
shift := shift * charwidth; 
linecount := 
end 
end 
else error(1010) 
end { OUTPUTD }; 



> 



PARAGRAPH - PROCESS PARAGRAPH DIRECTIVE. 



procedure paragraph; 
var 

ch : ascii; { KEY CHARACTER } 

begin { PARAGRAPH } 
savepar [keeppar] .c := paracount; 
if inchar = lparen 
then begin nextch; 
keeppar := keeppar + 1; 
paracount :» 0; 

while (inchar <> rparen) and not eol do 
begin ch := upper (inchar ) ; 
nextch; 

if class [ch] .paragraphchar 
then case ch of_ 
c : paracount := number (0,-1,0, infinity, 0) ; 
f : parachar := character (nul) ; 

i : lockeddent := number (5,-1,0, rightmargin-min, 355) ; 
k : keeppar := number(0,-l,0,maxkeep,351) ; 
n s begin if not class [inchar] .digit 

then numbering := numform(character (blank) ,307) 
else numbering := numeric; 
numberwidth := number(3,-l,0,maxnumberwidth,356) 
end ; 
p : parapage := number(0, -1,0, infinity, 0) ; 
s : paraskip := number (0,paraskip,0,maxskip, 357) ; 
u : lockeddent := -number (0,-1,0, infinity, 0) ; 
blank : 
end 
else begin errorl := ch; error(301) end 
end ; 
if inchar = rparen 
then nextch 
else error(302); 
parsave 
end 
else if class [inchar] .digit 
then begin keeppar := number(0,-l,0,maxkeep,351) ; 
parrestore; 
paracount :» 
end 
else begin keeppar :=« keeppar - 1; 
parrestore 
end 
end { PARAGRAPH }; 



READ FORM - READ THE FORM SPECIFICATION TO THE FORM BUFFER. 



procedure readform; 

var 
nobracket : boolean; { IF NO LBRACKET IN THE FORM } 
quote : ascii; { OUTER QUOTE CHARACTER FOR A STRING } 



{ ADDCH - ADD A CHARACTER TO THE FORM. 

* PARAM CH - CHARACTER TO ADD. 

> 

procedure addch( ch : ascii ); 
begin { ADDCH } 
formnlength :== formnlength + 1; 
f ormnext [f ormnlength] :- ch 
end < ADDCH }; 



begin { READFORM } 
formnlength :- 0; 
nobracket :« true; 
if inchar ■ lparen 
then begin nextch; 

while (inchar <> rparen) and not eol do 
begin addch (inchar) ; 

nobracket :- nobracket and (inchar <> lbracket); 
if class [inchar] .quote 
then begin quote :«■ inchar; 
nextch; 

readpst ring (f ormnext, formnlength, quote) ; 
if inchar - quote 
then nextch 
else error(403); 
addch (quote) 



PASCAL NEWS #15 



SEPTEMBER, 19 7 9 



PAGE 49 



1981 

1982 

1983 

1984 

1985 

1986 

1987 

1988 

1989 

1990 

1991 

1992 

1993 

1994 

1995 

1996 

1997 

1998 

1999 

2000 

2001 

2002 

2003 

2004 

2005 

2006 

2007 

2008 

2009 

2010 

2011 

2012 

2013 

2014 

2015 

2016 

2017 

2018 

2019 

2020 

2021 

2022 

2023 

2024 

2025 

2026 

2027 

2028 

2029 

2030 

2031 

2032 

2033 

2034 

2035 

2036 

2037 

2038 

2039 

2040 

2041 

2042 

2043 

2044 

2045 

2046 

2047 

2048 

2049 

2050 

2051 

2052 

2053 

2054 

2055 

2056 

2057 

2058 

2059 

2060 

2061 

2062 

2063 

2064 

2065 

2066 

2067 

2068 

2069 

2070 

2071 

2072 

2073 

2074 

2075 

2076 

2077 

2078 

2079 

2080 

2081 

2082 

2083 

2084 

2085 

2086 

2087 

2088 

2089 

2090 



end 
else nextch 
end ; 
If inchar - rparen 
then nextch 
else error(402); 
if nobracket then addch(lbracket) 
end 
else linecount := infinity 
end { READFORM >; 



{ READINX - READ AN INDEX ENTRY. 



: pstring; < 
: integer; { 
: pinxentry;{ 
: integer; { 

> 



INDEX BUFFER } 

LENGTH OF INDEX > 

POINTER TO NEW INDEX ENTRY } 

GENERAL INDEX VARIABLE } 



RESET DIRECTIVE NAME } 
EXCEPT KEYWORD IS PRESENT } 
FIRST DIRECTIVE NAME > 
WHICH DIRECTIVES TO RESET } 



procedure readinx; 
var 

index 

indexlength 

P 

xl 
begin { READINDEX 
indexlength := 0; 

r eadps t ring ( index , indexleng th , nul ) ; 
new(p) ; 

if indexlength > maxinxlength then indexlength :« maxinx length; 
with pt do 

begin xl := indexlength; 

xp :« pagenumber; 

for xl := 1 to indexlength do x[xl] := index [xl]; 

for xl := indexlength+1 to maxinxlength do x[xl] := nul 

end ; 
if inxbase « nil 

then inxbase := p 

else inxlastT.next :■ p; 
inxlast := p 
end { READINX }; 



RESET - PROCESS RESET DIRECTIVE. 



procedure reset; 
var 
d : direct; { 

except : boolean; { 
first : boolean; { 
which : dirset; { 
begin { RESET } 
if inchar = lparen 
then begin first :- true; 
except :™ false; 
which := []; 
nextch ; 

while inchar <> rparen do 
if inchar - blank 
then nextch 

else if class [inchar] .letter 
then begin readword ; 
d :■= lookup (bre, ill); 

if d in [cou,frm,inp,inx,mar,opt,out,pag,par,sel,sbt,ttl] 
then which := which + [d] 
else if_ d - exc 
then if first 
then except :=> true 
else error(1211) 
else begin errorlO :- fullword; 
if d - ill 
then error(1206) 
else error(1212) 
end ; 
first :« false 
end 
else begin errorl :- inchar; error(1201); nextch end ; 
if except then which := [bre.. ill] - which 
end 
else which :- [bre.. ill]; 
while not eol do nextch; 
if [out,pag,frm] * which <> [] 
then begin page(inf inity) ; 
if linecount < infinity then advanceform 
end ; 
reinitialize (which) 
end < RESET >; 



SELECT - PROCESS SELECT DIRECTIVE. 



> 



< GENERAL INDEX VARIABLES } 



procedure select; 
var 

xl,x2 : integer; 
begin { SELECT } 
if inchar = lparen 
then begin nextch; 
for xl := ££ maxpage djo selection[xl] :- false; 
while (inchar <> rparen) and not eol do 
if class [inchar] .digit 
then begin xl := number(0, -1,0, maxpage, 504); 
if inchar - colon 
then begin nextch ; 
for xl :- xl to number(xl,xl,xl, maxpage, 504) do 

selection [xl] :« true 
end 



2091 

2092 

2093 

2094 

2095 

2096 

2097 

2098 

2099 

2100 

2101 

2102 

2103 

2104 

2105 

2106 

2107 

2108 

2109 

2110 

2111 

2112 

2113 

2114 

2115 

2116 

2117 

2118 

2119 

2120 

2121 

2122 

2123 

2124 

2125 

2126 

2127 

2128 

2129 

2130 

2131 

2132 

2133 

2134 

2135 

2136 

2137 

2138 

2139 

2140 

2141 

2142 

2143 

2144 

2145 

2146 

2147 

2148 

2149 

2150 

2151 

2152 

2153 

2154 

2155 

2156 

2157 

2158 

2159 

2160 

2161 

2162 

2163 

2164 

2165 

2166 

2167 

2168 

2169 

2170 

2171 

2172 

2173 

2174 

2175 

2176 

2177 

2178 

2179 

2180 

2181 

2182 

2183 

2184 

2185 

2186 

2187 

2188 

2189 

2190 

2191 

2192 

2193 

2194 

2195 

2196 

2197 

2198 

2199 

2200 



a[xl] 



true 



else selectio 
end 
else begin if inchar <> blank 

then begin errorl := inchar; error(501) end ; 
nextchar 
end ; 
if inchar = rparen 
then nextch 
else error(502) 
end 
else for xl :=* t£ maxpage d£ selection [xl] :■ true 
end { SELECT }; 



SORTINX - SORT AND PRINT INDEX ENTRIES. 



procedure sortinx; 
var 

firstinx 

lastinx 

leftwidth 

margin 

pagecol 

rightwidth 

sortcol 



: pinxentry;{ 
: pinxentry;{ 



FIRST ENTRY FOR SORTING } 
LAST ENTRY FOR SORTING > 



integer; 
integer; 
integer; 
integer; 
integer; 



L SPECIFICATION 
M SPECIFICATION 
P SPECIFICATION 
R SPECIFICATION 
S SPECIFICATION 



PARSE - PARSE THE SORTINDEX DIRECTIVE. 



} 



ascii; 
> 



{ KEY CHARACTER } 



procedure parse; 
var 
ch 
begin { PARSE 
leftwidth := 2; 
margin := 0; 
pagecol := 0; 
rightwidth := 2; 
sortcol := 1; 
if inchar = lparen 
then begin nextch; 

while (inchar <> rparen) and not eol do 
begin ch := upper (inchar) ; 
nextch; 

if class [ch] .sortinxchar 
then case ch of_ 
1 : leftwidth := nuraber(2,-l,O,30,658) ; 
m : margin := number(0,-l,0,30,659) ; 
p : pagecol := number (0,-1 ,0, maxinx length+min, 660) ; 
r : rightwidth := number (2,-1,0,30,661) ; 
s : i£_ (inchar = p) o£ (inchar ■ smallp) 
then begin sortcol := -1; nextch end 
else sortcol :■= number (1,-1, l,maxinxlength-min,662) ; 
blank : 
end 
else begin errorl := ch; error(601) end 
end ; 
if inchar = rparen 
then nextch 
else error(602) 
end 
end { PARSE } ; 



SORT - SORT THE INDEX ENTRIES. 



procedure sort 
var 
P 

sl,s2 
xl 
begin { SORT } 
new(firstinx) ; 
new(lastinx); 
with f irstinxf do 
begin xl :- 0; 
next :- lastinx; 

for xl :=■= 1 _to maxinxlength do x[xl] : 
end ; 
with lastinxt do 
begin xl :■ 0; 
next := nil ; 

for xl :*■ 1 _to maxinxlength dp_ x[xl] :»> del 
end ; 
if sortcol < 
then begin inxlastt«next :» lastinx; 
firstinxT«next :*= inxbase; 
inxbase :* nil 
end 
else begin p :» inxbase; 
inxlastt«next :«= nil ; 
while p <> nil do 
begin inxbase := pf.next; 
s2 :■= firstinx; 
repeat si := s2; 
s2 :» slf.next; 
xl :- sortcol; 
while (xl < maxinxlength) and 

(upper(pT-x[xl]) - upper(s2T«x[xl])) do 
xl :- xl + 1 
until upper(pt«x[xl]) < upper(s2|.x[xl] ) ; 
8 It .next :» p; 



pinxentry;{ 
pinxentry;{ 
integer; { 



FOR TRAVERSING THE INDEX LIST } 
TEMPS FOR SORTING } 
GENERAL INDEX VARIABLE } 



1 nul 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 50 



2201 

2202 

2203 

2204 

2205 

2206 

2207 

2208 

2209 

2210 

2211 

2212 

2213 

2214 

2215 

2216 

2217 

2218 

2219 

2220 

2221 

2222 

2223 

2224 

2225 

2226 

2227 

2228 

2229 

2230 

2231 

2232 

2233 

2234 

2235 

2236 

2237 

2238 

2239 

2240 

2241 

2242 

2243 

2244 

2245 

2246 

2247 

2248 

2249 

2250 

2251 

2252 

2253 

2254 

2255 

2256 

2257 

2258 

2259 

2260 

2261 

2262 

2263 

2264 

2265 

2266 

2267 

2268 

2269 

2270 

2271 

2272 

2273 

2274 

2275 

2276 

2277 

2278 

2279 

2280 

2281 

2282 

2283 

2284 

2285 

2286 

2287 

2288 

2289 

2290 

2291 

2292 

2293 

2294 

2295 

2296 

2297 

2298 

2299 

2300 

2301 

2302 

2303 

2304 

2305 

2306 

2307 

2308 

2309 

2310 

2311 

2312 



pt-next := s2; 
p := Inxbase 
end 
end 
end { SORT }; 



{ PRINT - PRINT THE INDEX ENTRIES . 
> 



procedure print; 
var 



P 
xl 



: pinxentry;{ FOR TRAVERSING THE INDEX LIST } 
: integer; { GENERAL INDEX VARIABLE } 



< SEND1 - SEND ONE CHARACTER TO THE OUTPUT LINE. 
* PARAM CH - CHARACTER TO SEND. 



procedure sendl( ch : asciix ); 
begin { SEND1 } 
outlength := outlength + 1; 
with outline [outlength] do 

begin c := ch; 

nbl :» charwidth 

end 
end { SEND1 >; 



begin { PRINT > 
p := firstinxt«next; 
while p <> lastinx do 
with pt do 
begin for xl := 1 t£ margin do sendl (blank) ; 
for xl := 1 Jto pagecol do 
if xl > xl 
then sendl (blank) 
else sendl(x[xl] ) ; 
convertnumber (outline, outlength, xp.lef twidth, numeric) ; 
for xl := 1 to rightwidth do sendl (blank) ; 
for xl := pagecol+1 to xl do sendl (x[xl] ) ; 
writeline; 
dispose(f irstinx) ; 
firstinx := p; 
p := f irstinxf.next 
end ; 
dispose (lastinx) 
end < PRINT }; 



begin { SORTINX } 

parse; 

sort; 

print 

end { SORTINX }; 



begin { DIRECTIVE } 
repeat nextch; 
readword; 

dir :=■= lookup (b re, ill); 

while (inchar = blank) and not eol do nextch; 

if dir in [bre,f rm,ind,mar,opt,pag,res ,ski,sor,und,weo] then break 
case dir o£_ 
bre : ; 

com : while not eol d_o nextch; 

cou : pagenumber := number(l,pagenumber,0,maxpage,759); 
frm : readform; 

ind : inundent(number(5,-l,0,rightmargin,856)) ; 
inp : inputd ; 
inx : readinx; 
lit : literal; 
mar : margin; 
opt : option; 
out : outputd; 

pag : page (number (infinity, -1,0, infinity, 0)); 
par : paragraph; 
res : reset; 
sel : select; 

ski : skip(number(5,-l,0,maxskip,957)); 
sor : sortinx; 
sbt : begin titlelength [subtitle] :« 0; 

readpstring(title [subtitle] .titlelength [subtitle] ,nul) 
end ; 
ttl : begin titlelength [maintitle] :» 0; 

readpstring (title [maintitle] .titlelength [maintitle] ,nul) 

end ; 

inundent (-number (inf Inity, -1,0, infinity, 0) ); 

putseg (output) ; 



und 
weo 
exc, 
ill 
end; 



begin errorlO :* fullword; error(006) end 



while (inchar <> dirch) and not eol do 
begin if inchar <> blank 

then begin error 1 :*= inchar; error(l) end ; 
nextch 
end 
until eol 
end { DIRECTIVE >; 



2313 
2314 
2315 
2316 
2317 
2318 
2319 

2320 < 

2321 < 

2322 { 

2323 { 

2324 { 

2325 { 

2326 

2327 

2328 

2329 

2330 

2331 { 

2332 

2333 

2334 

2335 

2336 

2337 

2338 

2339 

2340 

2341 

2342 

2343 

2344 

2345 

2346 

2347 

2348 

2349 

2350 
2351 
2352 
2353 
2354 
2355 
2356 
2357 
2358 
2359 
2360 
2361 
2362 
2363 
2364 
2365 
2366 
2367 
2368 
2369 
2370 
2371 
2372 
2373 
2374 
2375 
2376 
2377 
2378 
2379 
2380 
2381 
2382 
2383 
2384 
2385 
2386 

; 2387 
2388 
2389 
2390 
2391 
2392 
2393 
2394 
2395 
2396 
2397 
2398 
2399 
2400 
2401 
2402 
2403 
2404 
2405 
2406 
2407 
2408 
2409 
2410 
2411 
2412 

{> 2413 
2414 
2415 
2416 
2417 
2418 
2419 
2420 



TEXT FORMATTING 



• READ THE NEXT INPUT W0RD ; 
WHEN APPROPRIATE. 



PROCESS DIRECTIVES 



{ LOOP INDEX > 



procedure nextword; 
var 

xl : integer; 

begin { NEXTWORD } 
word length := 0; 
newinline := false; 
while eol and not endof input do 
begin nextchar; 
if eol and not endof input 
then begin break; writenull end 
else if inchar = dirch 
then directive 
else if inchar = parachar 
then begin break; 
if paraskip > then skip(paraskip) ; 
if parapage > then page(parapage) ; 
inundent (lockedd en t) ; 
if numbering <> nonumbering 
then begin paracount := paracount + 1; 
convertnumber (wo rd,wordlength,paracount,numberwidth, numbering) 

end ; 
nextchar 
end 
end ; 
if not endofinput 
then begin nblanks := 0; 
if wordlength = 
then while inchar = blank do 
begin nblanks := nblanks + 1; 
nextchar 
end ; 
if newinline 
then begin if (nblanks > 0) oj: not fill then break; 
if underchar <> nul 
then begin understring (inline, inlength, underlining) ; 
incolumn := incolumn - 1; 
nextchar 
end 
end 
else if not multipleblanks and (nblanks > 1) then nblanks :■ 1; 
nsplits := 0; 
while inchar <> blank do 
begin if inchar mod 128 = hyphen 
then begin if nsplits < maxsplit 
then begin nsplits := nsplits + 1; 
with splits [nsplits] do 
begin point := wordlength; 
if incolumn > 1 
then hypnt :■ class [inline [incolumn-1] .c mod 128] .letter and 

class [inline [incolumn+1] .c mod 128] .letter 
else hypnt := false; 
inpnt :*= incolumn 
end 
end 
end 
else begin wordlength := wordlength + 1; 
with word [wordlength] do 

begin c :■ inchar; nbl :« charwidth end 
end ; 
nextchar 
end 
end 
end { NEXTWORD }; 



{ PACKWORD - PACK A WORD INTO THE OUTPUT LINE. 
} 

procedure packword; 

var 
nb : integer; { NUMBER BLANKS (PRECEDING WORD) > 

nc : integer; { NCHARS PREDICTED AFTER ADDING WORD } 



ADDWORD - ADD THE WORD TO THE OUTPUT LINE. 



> 



procedure addword; 
var 

xl : integer; < GENERAL INDEX VARIABLE } 

begin { ADDWORD > 
with outline [outlength] do nbl :- nbl + nb * charwidth; 



PASCAL NEWS #15 



2531 

242 1 for xl := 1 .to wordlength do 2532 

2422 begin outlength :- outlength + 1; 2533 

2423 outline [outlength] :- word[xl] 2534 

2424 end; 2535 

2425 outlength :■■ outlength + 1; 2536 

2426 with outline [outlength] do 2537 

2427 begin c :- blank; nbl := end ; 2538 

2428 nchars :» nc; 2539 

2429 if. nchars >« leftmargin 2540 

2430 then begin ngaps := ngaps + 1; 2541 

2431 gaps [ngaps] := outlength 2542 

2432 end 2543 

2433 else gaps [0] :«* outlength 2544 

2434 end { ADDWORD }; 2545 

2435 2546 

2436 2547 

2437 2548 

2438 2549 

2439 { SETUP - SET UP FOR PACKWORD. 2550 

2440 } 2551 

2441 2552 

2442 procedure setup; 2553 

2443 var 2554 

2444 xl : integer; { LOOP INDEX > 2555 

2445 begin { SETUP } 2556 

2446 if. newparagraph 2557 

2447 then nb := nblanks 2558 

2448 else if newoutline 2559 

2449 then nb :- 2560 

2450 else begin if newinline 2561 

2451 then nb := nblanks + 1 2562 

2452 else nb := nblanks; 2563 

2453 if. ensure2 and 2564 

2454 (outline [outlength-1 ] .c mod 128 = period) and 2565 

2455 (nblanks < 2) and (nchars >= leftmargin) 2566 

2456 then nb :- 2 2567 

2457 end; 2568 

2458 nc := nchars + rib + wordlength; 2569 

2459 if. nc > rightmargin 2570 

2460 then if rightmargin - nchars > badjustify * (ngaps - 1) 2571 

2461 then { GOING TO INSERT TOO MANY BLANKS } 2572 

2462 begin if nsplits > 2573 

2463 then begin xl := nsplits; 2574 

2464 while xl > do with splits[xl] do 2575 

2465 begin nc := nchars + nb + point + ord(hypnt); 2576 

2466 if. nc <= rightmargin 2577 

2467 then begin xl :=• 0; { EXIT LOOP } 2578 

2468 incolumn := inpnt; { RESET INPUT STREAM > 2579 

2469 eol := false; 2580 

2470 nextchar; 2581 

2471 wordlength := point + ord(hypnt); 2582 

2472 if hypnt then word [wordlength] .c := minus 2583 

2473 end 2584 

2474 else xl :- xl - 1 2585 

2475 end 2586 

2476 end" ; 2587 

2477 if nc > rightmargin then error(008) 2588 

2478 end; 2589 

2479 newoutline :» false; 2590 

2480 newparagraph := false 2591 

2481 end { SETUP }; 2592 

2482 2593 

2483 2594 

2484 2595 

2485 2596 

2486 begin { PACKWORD } 2597 

2487 setup; 2598 

2488 if. nc <- rightmargin then addword; 2599 

2489 if nc >- rightmargin 2600 

2490 then < DON-T CALL PACKWORD, TO PREVENT UNENDING RECURSION IN } 2601 

2491 { THE CASE OF A WORD THAT DOESN-T FIT BETWEEN THE MARGINS } 2602 

2492 begin justify; 2603 

2493 writeline; 2604 

2494 if nc > rightmargin 2605 

2495 then begin setup; 2606 

2496 addword; 2607 

2497 if nc >■ rightmargin then begin justify; writeline end 2608 

2498 end 2609 

2499 end 2610 

2500 end { PACKWORD }; 2611 

2501 2612 

2502 2613 

2503 2614 

2504 2615 

2505 2616 

2506 2617 

2507 2618 

2508 2619 

2509 { ) 2620 

2510 { } 2621 

2511 < ERROR PROCESSING > 2622 

2512 { } 2623 

2513 { } 2624 

2514 { > 2625 

2515 2626 

2516 2627 

2517 2628 

2518 2629 

2519 { ERROR - ISSUE AN ERROR MESSAGE. 2630 

2520 * 2631 

2521 * PARAM N - ERROR NUMBER. 2632 

2522 * N IS NEGATIVE FOR ERRORS DETECTED DURING FORM 2633 

2523 * PROCESSING TO PREVENT UNENDING RECURSION. 2634 

2524 * FOR POSITIVE N, THE FOLLOWING CONVENTION IS USED: 2635 

2525 * N DIV 100 INDICATES WHICH DIRECTIVE THE 2636 

2526 * REFERS TO. 2637 

2527 * N MOD 100 SELECTS A PARTICULAR ERROR MESSAGE. 2638 

2528 * N MOD 100 IS >» 50 FOR NUMERIC ERRORS. 2639 

2529 * GLOBAL VARIABLES ERROR10, ERR0R1, ERR0RN1, ERR0RN2, 2640 

2530 * AND ERRORSMALL ARE USED FOR PRINTING SPECIFIC 



SEPTEMBER, 19 79 

VALUES WHICH ARE IN ERROR. 



PAGE 51 



procedure error{ N : INTEGER }; 



type 
host5 
hostlO 
host20 

var 

len 
str 
xl,x2 



» packed array [1.. 5] of char; 
« packed array [1.. 10] of char; 
■ packed array [1.. 20] of char; 

: integer; { LENGTH OF STR } 

: string; { FOR PRINTING INLINE } 

: integer; { GENERAL LOOP INDEX > 



WR5.WR10.WR20 - WRITE HOST CHARACTERS TO STR. 



} 



procedure wr5 ( cs : host5; nc : integer); 

var xl : integer; 

begin { WR5 } 

for xl := 1 jto nc do 

begin len := len + 1; 

with str [len] do begin c := asciichar(cs [xl] ) ; nbl 

end 
end { WR5 }; 



procedure wr!0( cs : hostlO; nc : integer); 
var xl : integer; 
begin { WR10 > 
for xl := 1 to nc do 

begin len := len + 1; 

with str [len] do begin c := asciichar (cs [xl] ) ; nbl 



charwidth end 



charwidth end 



end { WR10 >; 



procedure wr20( cs : host20; nc : integer); 
var xl : integer; 
begin { WR20 } 
for xl := 1 Jt£ nc do 

begin len : = len + 1 ; 

with str[len] do begin c := asciichar(cs [xl] ) ; nbl := charwidth end 

end 
end { WR20 }; 



begin { ERROR } 
if printerrors 
then begin errors := true; 
str[l].c := blank; str[l].nbl := 0; 
len : ■= 1 ; 

vr5(' ',5); 

if n < 
then begin wr 20 ('FORM ERROR: ',12); 

case n of. 
-1 : wr20('LINE TOO LONG ',13); 

-2 : begin len := len + 1; 

with str [len] do begin c := errorl; nbl 

end ; 

wr20('PAGENUMBER TOO LARGE', 20); 

wr20('BAD NUMERIC FORM ',16); 

wr20('NO "L" FOUND ',12); 



: charwidth end 



-3 
-4 
-5 

end ; 

writestring(str ,len) ; 
endline 
end 
else begin if f irsterror { FIRST ERROR ON THIS LINE } 
then begin convertnumber (str, len, linenumber, 4, numeric) ; 
wr5('. ',2); 

for xl :- 1 to inlength do str[len+xl] :« inline[xl]; 
len :■» len + inlength; 
writestring(str,len) ; 
endline; 



false; 
0; 



',6); 
',6); 
',9); 

',6); 
',9); 



firsterror 
str [1]. nbl 
len :- 6 
end ; 
case n div 100 of 

: ; 

1 : wrl0('MARGIN 

2 : wrlO('OPT10N 

3 : wr 10(' PARAGRAPH 

4 : wr5('F0RM ',4); 

5 : wrl0('SELECT 

6 : wrlOCSORTINDEX 

7 : wr5('C0UNT',5); 

8 : wr 10 ('INDENT 

9 : wr5('SKIP ',4); 

10 : wrl0('OUTPUT 

11 : wr5('INPUT',5); 

12 : wr5('RESET',5); 
end ; 

wrlOC ERROR: ',8); 
n :« n mod 100; 
if n < 50 
then case n of_ 

1 : begin len :■= len +1; 

with str[len] do begin c :- errorl; nbl :■ charwidth end 
end ; 

2 : vrlOCMISSING ) ',9); 

3 : wr20('UNMATCHED QUOTE ',15); 

4 : wr20('PAGENUMBER TOO LARGE', 20); 

5 "• begin wr20(' UNDEFINED KEEP BUFFE',20); 

wr5('R ',1) 

end ; 



,6); 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 52 



2641 

2642 

2643 

2644 

2645 

2646 

2647 

2648 

2649 

2650 

2651 

2652 

2653 

2654 

2655 

2656 

2657 

2658 

2659 

2660 

2661 

2662 

2663 

2664 

2665 

2666 

2667 

2668 

2669 

2670 

2671 

2672 

2673 

2674 

2675 

2676 

2677 

2678 

2679 

2680 

2681 

2682 

2683 

2684 

2685 

2686 

2687 

2688 

2689 

2690 

2691 

2692 

2693 

2694 

2695 

2696 

2697 

2698 

2699 

2700 

2701 

2702 

2703 

2704 

2705 

2706 

2707 

2708 

2709 

2710 

2711 

2712 

2713 

2714 

2715 

2716 

2717 

2718 

2719 

2720 

2721 

2722 

2723 

2724 

2725 

2726 

2727 

2728 

2729 

2730 

2731 

2732 

2733 

2734 

2735 

2736 

2737 

2738 

2739 

2740 

2741 

2742 

2743 

2744 

2745 



nbl 



,19); 



' charwidth end 



M6); 



,20); 



> word[xl] end 



9 
10 



11 



12 



13 : 



■■ charwidth end 



,20); 



6 : begin wr20(' UNKNOWN DIRECTIVE: 
for xl ;- 1 to 10 do 

begin len : = len + 1 ; 
with str[len] do 

begin c := errorl0[xl]; 
end 
end ; 

7 : wr20('BAD NUMERIC FORM 

8 : begin wr20('HYPHENATION NEEDED: 
for xl := 1 £o wordlength d£ 

if len < maxstringlength then 
begin len := len + 1; str[len] 
end ; 

wr20('BAD TERMINAL TYPE ',17); 
begin wr 20 ('MUST BE IN INITIAL D',20); 
wr20('IRECTIVE GROUP ',14) 
end ; 

begin wr20(' "EXCEPT" MUST BE FIR', 20); 
wr5('ST ',2) 
end ; 

begin wr 20 ('DIRECTIVE NOT ALLOWE',20); 
wr5('D: ',3); 
for xl := 1 to 10 do 

begin len : = len + 1 ; 

with str[len] do 
begin c := errorl0[xl] 

end 
end ; 

begin wr 20 ('AJ PITCH MUST BE 10 
wr5('0R 12', 5) 
end ; 
end 
else begin case n of_ 

51 : wr5('KEEP ',4); 

52 : wr20(' RIGHT MARGIN 

53 : wr20('LEFT MARGIN 

54 : wr5('WIDTH',5); 

55 : wrl0('INDENT ',6); 

56 : wr20(' NUMBER WIDTH 

57 : wr5('SKIP ',4); 

58 : wrl0('LEFT WIDTH', 10); 

59 : wrl0('MARGIN ',6); 

60 : wr20('PAGE COLUMN 

61 : wr20('RIGHT WIDTH 

62 : wr20('SORT COLUMN 

64 : wr5('SHIFT',5); 

65 : wr20('JUSTIFICATION LIMIT 

66 : wrlOCSPACING ',7); 
end ; 

wr5(' OF ',4); 
if errornl < 

then begin wr5('- ',1); errornl := -errornl end ; 
convertnumber (s tr , len , errornl , .numeric) ; 
wrlOC IS TOO ',8); 

if errorsmall then wr5('SMALL' ,5) else wr5('LARGE',5); 
wr5(', ',2); 

convertnumber (str, len, errorn2,0, numeric) ; 
wr5(' USED', 5) 
end ; 
writestring(str,len) ; 
end line 
end 
end 
end { ERROR >; 



VALIDATE NUMERIC OPTION. 

PARAM NUM - NUMBER TO TEST. 

MIN - MINIMUM ALLOWED VALUE. 
MAX = MAXIMUM ALLOWED VALUE. 
ERR - ERROR NUMBER IF NOT IN RANGE. 



procedure validate{ VAR NUM : INTEGER; MIN, MAX, ERR : INTEGER }; 
begin { VALIDATE } 
errornl := num; 
errorsmall := num < min; 
if errorsmall 

then begin num := min; errorn2 : : 

else if num > max 
then begin num := max; errorn2 
end { VALIDATE }; 



',12); 

',1D; 



',12); 



',1D; 
Ml); 
',1D; 

,19); 



error(err) end 
', error(err) end 



SECONDARY INITIALIZATION 



REINITIALIZE - RE-INITIALIZE GLOBAL VARIABLES. 



2746 

2747 

2748 

2749 

2750 

2751 

2752 

2753 

2754 

2755 

2756 

2757 

2758 

2759 

2760 

2761 

2762 

2763 

2764 

2765 

2766 

2767 

2768 

2769 

2770 

2771 

2772 

2773 

27 74 

2775 

2776 

2777 

2778 

2779 

2780 

2781 

2782 

2783 

2784 

2785 

2786 

2787 

2788 

2789 

2790 

2791 

2792 

2793 

2794 

2795 

2796 

2797 

2798 

2799 

2800 

2801 

2802 

2803 

2804 

2805 

2806 

2807 

2808 

2809 

2810 

2811 

2812 

2813 

2814 

2815 

2816 

2817 

2818 

2819 

2820 

2821 

2822 

2823 

2824 

2825 

2826 

2827 

2828 

2829 

2830 

2831 

2832 

2833 

2834 

2835 

2836 

2837 

2838 

2839 

2840 

2841 

2842 

2843 

2844 

2845 

2846 

2847 

2848 

2849 

2850 

2851 

2852 

2853 

2854 

2855 



procedure reinitialize; 

var 
d : direct; { 

xl : integer; { 



DIRECTIVE LOOP INDEX 
LOOP INDEX } 



INITFORM - INITIALIZE DEFAULT FORM. 



procedure initform; 
var 

default : packed array [1. .40] of char; 
{ DEFAULT FORM } 

xl : integer; { LOOP INDEX } 

begin < INITFORM } 

default := '[//T#62E///L56//#33 M - "FN: 1" -"///] 
for xl :« 1 to 40 do 

form[xl] := asciichar (default [xl]) ; 
formlength :■ 40; 
formnlength := 0; 
formindex := 1; 
textlength :» 1; 
textindex := 1; 
text[l] .c := blank; 
text [1]. nbl := 0; 
end { INITFORM }; 



INITINP - INITIALIZE INPUT SETTINGS. 



procedure initinp; 
var 

xl : integer; { LOOP INDEX } 

begin { INITINP } 
lowercase := true; 
lowerdir := true; 
underdir := false; 
underlining := false; 
keepinp := 0; 
explicitblank := nul; 
casech := nul; 
dirch := period; 
hyphen := nul; 
underchar := nul; 
inwidth := 150; 

for xl := to maxkeep do saveinp [xl] .defined := falsi 
inpsave 
end < INITINP }; 



INITINX - INITIALIZE INX VARIABLES. 



procedure initinx; 
var 

ip : pinxentry;{ 

begin { INITINX > 
while inxbase <> nil do 

begin ip := inxbase; 

inxbase := inxbase"f«next; 

dispose (ip) 

end ; 
inxlast := nil 
end { INITINX }; 



TO DISPOSE INDEX ENTRIES > 



INITMAR - INITIALIZE MARGIN SETTINGS. 



> 



procedure initmar; 
var 

xl : integer; { LOOP INDEX ) 

begin { INITMAR } 
keepmar :-= 0; 
leftmargin :* 0; 
rightmargin :» 70; 

for xl :* to maxkeep do savemar [xl] .defined :- false; 
nchars :« 0; 
outline [1] .nbl :« 0; 
marsave 
end { INITMAR }; 



INITOPT - INITIALIZE OPTION SETTINGS. 



procedure initopt; 
var 

xl : integer; < LOOP INDEX } 

begin { INITOPT } 
keepopt :■ 0; 
printerrors :- true; 
fill i" true; 
badjustify :- 1; 
left justify :» true; 
multipleblanks :» true; 
ensure 2 := true; 
right justify :- true; 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 53 



2856 
2857 
2858 
2859 
2860 
2861 
2862 
2863 
2864 
2865 
2866 
2867 
2868 
2869 
2870 
2871 
2872 
2873 
2874 
2875 
2876 
2877 
2878 
2879 
2880 
2881 
2882 
2883 
2884 
2885 
2886 
2887 
2888 
2889 
2890 
2891 
2892 
2893 
2894 
2895 
2896 
2897 
2898 
2899 
2900 
2901 
2902 
2903 
2904 
2905 
2906 
2907 
2908 
2909 
2910 
2911 
2912 
2913 
2914 
2915 
2916 
2917 
2918 
2919 
2920 
2921 
2922 
2923 
2924 
2925 
2926 
2927 
2928 
2929 
2930 
2931 
2932 
2933 
2934 
2935 
2936 
2937 
2938 
2939 
2940 
2941 
2942 
2943 
2944 
2945 
2946 
2947 
2948 
2949 
2950 
2951 
2952 
2953 
2954 
2955 
2956 
2957 
2958 
2959 
2960 
2961 
2962 
2963 
2964 
2965 



space :- 0; 

shiftup :» false; 

for xl :■ j^o maxkeep do saveopt [xl] .defined 

opt save 

end { INITOPT }; 



} 



INITOUT - INITIALIZE OUTPUT SETTINGS. 



procedure initout; 
begin < INITOUT } 
blankcount :» 0; 
blankline :■ false; 
carriagecontrol :« blank; 
linecount := -1; 
terminaltype := astt 
charwidth := 1; 
eject :- false; 
pause := false; 
shift :- 0; 
underavail := true; 
outwidth := maxowidth 
end { INITOUT }; 



> 



INITPAR - INITIALIZE PARAGRAPH SETTINGS. 



procedure initpar; 
var 

xl : integer; { LOOP INDEX > 

begin < INITPAR } 
keeppar := 0; 
paracount := 0; 
parachar := nul; 
locked dent := 0; 
numbering := nonumbering; 
parapage := 0; 
paraskip := 0; 
numberwidth := 3; 

for xl := to_ maxkeep do savepar [xl] .defined := fals< 
parsave 
end { INITPAR >; 



begin < REINITIALIZE } 
for d := bre £o ill do 
if d in which 
then case d of_ 
bre 



com 
cou 
frm 
ind 
inp 
inx 
lit 
mar 
opt 
out 



pagenumber 
initform; 

initinp; 
initinx; 

initmar ; 
initopt; 
initout ; 



:- 1; 



initpar; 

for xl :•= _to maxpage do selection[xl] :« true; 



titlelength [subtitle] :-= 0; 
titlelength[maintitle] :» 0; 



par 
res 
sel 
ski 
sor 
sbt 
ttl 
und 
weo 
exc 
ill 
end 
end { REINITIALIZE 



PRIMARY INITIALIZATION 



{ INITIALIZE - INITIALIZE GLOBAL VARIABLES. 

} 



procedure initialize; 



{ INITASC - INITIALIZE HOST TO ASCII CONVERSION TABLES. 

> 



2966 
2967 
2968 
2969 
2970 
2971 
2972 
2973 
2974 
2975 
2976 
2977 
2978 
2979 
2980 
2981 
2982 
2983 
2984 
2985 
2986 
2987 
2988 
2989 
2990 
2991 
2992 
2993 
2994 
2995 
2996 
2997 
2998 
2999 
3000 
3001 
3002 
3003 
3004 
3005 
3006 
3007 
3008 
3009 
3010 
3011 
3012 
3013 
3014 
3015 
3016 
3017 
3018 
3019 
3020 
3021 
3022 
3023 
3024 
3025 
3026 
3027 
3028 
3029 
3030 
3031 
3032 
3033 
3034 
3035 
3036 
3037 
3038 
3039 
3040 
3041 
3042 
3043 
3044 
3045 
3046 
3047 
3048 
3049 
3050 
3051 
3052 
3053 
3054 
3055 
,3056 
(3057 
^3058 
>3059 
} 3060 
,3061 
3062 
3063 
3064 
3065 
3066 
3067 
3068 
3069 
3070 
3071 
3072 
3073 
3074 
3075 



EXTERNAL CHARACTER 
INTERNAL CHARACTER 



procedure initasc; 
var 

extch : char; 

intch : ascii; 
begin < INITASC } 
asc[chr( 0)] :*= colon; 
intch := a; 
for extch := 'A' to 'Z' do 

begin asc [extch] := intch; intch :» intch + 1 end ; 
intch :* zero; 
for extch :- '0' £o '9' do 

begin asc [extch] := intch; intch := intch + 1 end; 



asc['+'] 
asc['-'] 
asc['/'] 
asc['*'] 
asc['('] 
asc[')'] 
asc['$'] 
asc ['='] 

asc[' '] 
asc[','] 
asc['.'] 
asc['#'] 
asc['['] 
asc[']'l 
asc [ ' : ' ] 
asc[""] 
asc [ '_' ] 
asc['!'] 
asc['&'] 



» plus; 
= minus; 

■ slash; 
=■ star; 

* lparen; 
= rparen; 
m dollar; 
= equal ; 
= blank; 

■ comma; 

■ period; 

■ hash ; 

* lb racket; 
= rbracket; 
= colon; 

■ dquote; 

«■ underscore; 
= exclaim; 
*■ ampersand; 



asc[""] :~ squote; 



asc[ 

asc['<'] 

asc['>'] 



:= questio 

:= less; 

:= greater; 
asc[chr( 60)] := nul; 
asc['\'] := backslash; 
asc[chr( 62)] :■= nul; 
asc[';'] := semicolon; 
for extch := chr( 0) to chr( 63) do asc74[extch] := nul; 



asc74[chr( 
asc74 [chr( 
asc74[chr( 
asc74[chr( 
asc76[chr ( 
intch := smalla; 
for extch := 'A' 



1)] 
2)] 
4)] 
7)] 
0)] 



= at; 
= caret; 
= percent; 
= grav; 
= nul; 

to 'Z' do 



begin asc76 [extch] := intch; intch := intch + 1 end ; 
asc76[chr( 27)] := lbrace; 
asc76[chr( 28)] := verticalbar; 
asc76[chr( 29)] :«= rbrace; 
asc76[chr( 30)] := tilde; 
asc76[chr( 31)] := del; 
intch := nul; 
for extch :«= chr( 32) _to chr( 63) do 

begin asc 76 [extch] := intch; intch :=- intch + 1 end 
end { INITASC >; 



> 



INITCLASS - INITIALIZE THE CLASSIFICATION TABLE. 



INDEX VARIABLE > 

ALL FIELDS ARE FALSE } 



procedure initclass; 
var 

ch : ascii; < 

empty : charclass;{ 
begin { INITCLASS > 
with empty do 

begin letter :» false; 

digit := false; 

formchar := false; 

optionchar :» false; 

marginchar :*» false; 

paragraphch := false; 

sortinxchar :» false; 

plusorminus := false; 

quote := false; 

numform := false; 

end ; 
for ch :» nul to del do class [ch] :« empty; 
for ch :» a _t£ z do_ class [ch] .letter :» true; 
for ch :» smalla to smallz do class [ch] .letter :- true; 
for ch := zero _to nine do class [ch] .digit := true; 
classic] .formchar :«= true; 
:= true; 
true; 
:= true; 
true; 
:» true; 



class [d] .formchar 
class [e] .formchar 
class [1] .formchar 
class [p] .formchar 
class [s] .formchar 
class [t] .formchar := true; 
class [w] .formchar := true; 
class [hash] .formchar :>= true; 
class [lbracket] .formchar :* true; 
class [rbracket] .formchar :« true; 
class [slash] .formchar := true; 
class [dquote] .formchar :« true; 
class [squote] .formchar := true; 
class [blank] .formchar := true; 
class [b] .inputchar := true; 
class [c] .inputchar := true; 
class [d] .inputchar := true; 
class [h] .inputchar :« true; 
class [k] .inputchar := true; 
classtu] .inputchar :«= true; 
class [w] .inputchar := true; 
class [blank] .inputchar := true; 
class [k] .marginchar :~ true; 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 54 



3076 
3077 
3078 
3079 
3080 
3081 
3082 
3083 
3084 
3085 
3086 
3087 
3088 
3089 
3090 
3091 
3092 
3093 
3094 
3095 
3096 
3097 
3098 
3099 
3100 
3101 
3102 
3103 
3104 
3105 
3106 
3107 
3108 
3109 
3110 
3111 
3112 
3113 
3114 
3115 
3116 
3117 
3118 
3119 
3120 
3121 
3122 
3123 
3124 
3125 
3126 
3127 
3128 
3129 
3130 
3131 
3132 
3133 
3134 
3135 
3136 
3137 
3138 
3139 
3140 
3141 
3142 
3143 
3144 
3145 
3146 
3147 
3148 
3149 
3150 
3151 
3152 
3153 
3154 
3155 
3156 
3157 
3158 
3159 
3160 
3161 
3162 
3163 
3164 
3165 
3166 
3167 
3168 
3169 
3170 
3171 
3172 
3173 
3174 
3175 
3176 
3177 
3178 
3179 
3180 
3181 
3182 
3183 
3184 
3185 



class [1] .marginchar := true; 
class [r] .marginchar := true; 
class [blank] .marginchar : = true; 
class [e] .optlonchar := true; 
class[f ] .optionchar := true; 
class [j] .optionchar := true; 
class [k] .optionchar := true; 
class [1] .optionchar := true; 
class [ra] .optionchar := true; 
class [p] .optionchar := true; 
class [r] .optionchar := true; 
class [s] .optionchar := true; 
class [u] .optionchar := true; 
class [blank] .optionchar := true; 
class [e] .outputchar := true; 
class [p] .outputchar := true; 
class [s] .outputchar := true; 
class [u] .outputchar := true; 
class [w] .outputchar := true; 
class [blank] .outputchar := true; 
class [c] .paragraphch : = true; 
class [f] .paragraphch := true; 
class [i] .paragraphch :■ true; 
class [k] .paragraphch :=» true; 
class [n] .paragraphch := true; 
class [p] .paragraphch := true; 
class [s] .paragraphch := true; 
class [u] .paragraphch := true; 
class [blank] .paragraphch := true; 
class [1] .sortinxchar := true; 
class [m] .sortinxchar := true; 
class [p] .sortinxchar := true; 
class [r] .sortinxchar := true; 
class [s] .sortinxchar := true; 
class [blank] .sortinxchar := true; 
class [plus] .plusortninus := true; 
class [minus] .plusorminus := true; 
class [dquote] .quote := true; 
class [squote] .quote := true; 
class [n] .numform := true; 
class [smalln] .numform := true; 
class [1] .numform := true; 
class [smalll] .numform := true; 
class [r] .numform := true; 
class [smallr] -numform := true; 
class [blank] .numform := true; 
end < INITCLASS }; 



INITCLOCKS - INITIALIZE RAWCLOCK AND WALLCLOCK. 

> 



procedure initclocks ; 
var 

cl 

c2 

c3 

systemclock 

xl 



ascii; 
ascii; 
ascii; 
alfa; 
integer ; 



begin { INITCLOCKS } 



{ TENS DIGIT OF WALLCLOCK > 

{ ONES DIGIT OF WALLCLOCK } 

{ A OR P FOR AM OR PM } 

{ SYSTEM CLOCK AS ' HH.MM.SS.' } 

{ GENERAL LOOP INDEX } 



IF NO SYSTEM CLOCK: 



RAWCLOCK [ 1] 
RAWCLOCK [ 2] 
RAWCLOCK [ 3] 
RAWCLOCK [ 4] 
RAWCLOCK [ 5] 
RAWCLOCK [ 6] 
RAWCLOCK [ 7] 
RAWCLOCK [ 8] 
RAWCLOCK [ 9] 
RAWCLOCK [10] 



- N; 

- o; 

- BLANK; 

- C; 

- L; 

- 0; 

- C; 

- K; 

= BLANK; 
BLANK; 



WALLCLOCK :« RAWCLOCK; 



time (systemclock) ; 

for xl :« 1 to 8 do rawclockfxl] :=* asc [systemclock [xl+1] ] ; 
rawclock[9] := blank; 
rawclock[10] := blank; 
cl :* rawclock[l] ; 
c2 :» rawclock[2] ; 
c3 :* a; 
case cl of_ 
zero : ±f_ c2 * zero 

then begin cl := one; c2 :*= two end 
else cl := blank; 
one : if_ c2 » two 

then c3 :« p 
else if_ c2 > two 
then begin cl :=* blank; c2 :* c2 - 2; c3 := p end ; 
two : begin if c2 <= one 

then begin cl := blank; c2 :- c2 - 2 end 
else begin cl := one; c2 :=* c2 + 2 end ; 
c3 :» p 



end 
end ; 
wallclock[ 1] 
wallclock[ 2] 
wallclock[ 3] 
wallclockf 4] 
wallclock[ 5] 
wallclock[ 6] 
wallclock[ 7] 
wallclock[ 8] 
wallclock[ 9] 
wallclock[10] 
end { INITCLOCKS >; 



- cl; 

- c2; 
» colon; 

- rawclock[4] ; 
■ rawclock[5] ; 

- blank; 

- c3; 

» blank; 
• blank 



3186 
3187 
3188 
3189 
3190 
3191 
3192 
3193 
3194 
3195 
3196 
3197 
3198 
3199 
3200 
3201 
3202 
3203 
3204 
3205 
3206 
3207 
3208 
3209 
3210 
3211 
3212 
3213 
3214 
3215 
3216 
3217 
3218 
3219 
3220 
3221 
3222 
3223 
3224 
3225 
3226 
3227 
3228 
3229 
3230 
3231 
3232 
3233 
3234 
3235 
3236 
3237 
3238 
3239 
3240 
3241 
3242 
3243 
3244 
3245 
3246 
3247 
3248 
3249 
3250 
3251 
3252 
3253 
3254 
3255 
3256 
3257 
3258 
3259 
3260 
3261 
3262 
3263 
3264 
3265 
3266 
3267 
3268 
3269 
3270 
3271 
3272 
3273 
3274 
3275 
3276 
3277 
3278 
3279 
3280 
3281 
3282 
3283 
3284 
3285 
3286 
3287 
3288 
3289 
3290 
3291 
3292 
3293 
3294 
3295 



{ INITDATES 

> 



INITIALIZE RAWDATE AND NICEDATE. 



procedure initdates; 
var 

month : ch3; 

systemdate : alfa; 

xl : integer; 

begin { INITDATES } 



{ CURRENT MONTH NAME > 

{ SYSTEM DATE AS ' YY/MM/DD. 

{ GENERAL LOOP INDEX } 



IF NO SYSTEM DATE: 



RAWDATE [ 1] 

RAWDATE [ 2] 

RAWDATE [ 3] 

RAWDATE [ 4] 

RAWDATE [ 5] 

RAWDATE [ 6] 

RAWDATE [ 7] 

RAWDATE [ 8] 

RAWDATE [ 9] 
RAWDATE [10] 



:= N; 
:= 0; 
:= BLANK; 
:= D; 

:- A; 
:= T; 

:- E; 
:= BLANK; 
:= BLANK; 
BLANK; 



NICEDATE := RAWDATE; 



date (systemdate) ; 

for xl := 1 to 8 do rawdate[xl] := asc [systemdate [xl+1] ] ; 

rawdate[9] := blank; 

rawdate[10] := blank; 

month := months [(rawdate [4] 



nicedatet 1] 
nicedatet 2] 
nicedate[ 3] 
nicedatet 4] 
nicedate[ 5] 
nicedatet 6] 
nicedatef 7] 
nicedate[ 8] 
nicedatet 9] 
nicedatet 10] 



rawdate [7] ; 
* rawdate t8] ; 
= blank; 
= month [1] ; 

- month [2] ; 
= month [3] ; 
= blank; 

= rawdate [1] ; 
= rawdate [2] ; 

- blank 



zero) * 10 + rawdate [5] - zero]; 



end { INITDATES }; 



{ INITDIRECTS - INITIALIZE THE DIRECTS TABLE. 
} 



procedure Initdirects; 



ONEDIRECT - INITIALIZE ONE DIRECT ENTRY. 



> 



PARAM DIR = DIRECTIVE. 

A,B,C - 3 CHARACTERS OF DIRECTIVE NAME. 



procedure onedirect ( dir : direct; a,b,c : ascii ); 

begin { ONEDIRECT } 

directs[dir] [1] :=* a; 

directs [dir] [2] :- b; 

directs [dir] [3] :- c 

end < ONEDIRECT }; 



begin { INITDIRECTS } 
onedirect(bre,b,r,e) ; 
onedirect (com, c,o,m) ; 
onedirect(cou,c,o,u) ; 
onedirect (frm,f ,o,r) ; 
onedirect (ind,i,n,d) ; 
onedirect(inp,i,n,p) ; 
onedirect(inx,i,n,x); 
onedirect(lit,l,i,t) ; 
onedirect(mar,m,a,r) ; 
onedirect (opt, o,p,t) ; 
onedirect(out,o,u,t) ; 
onedirect(pag,p,a,g) ; 
onedirect(par,p,a,r) ; 
onedirect(res,r,e,s) ; 
onedirect(sel,s,e,l); 
onedirect(ski,s,k,i) ; 
onedirect(sor,s,o,r); 
onedirect(sbt,s,u,b) ; 
onedirect(ttl,t,i,t); 
onedirect(und,u,n,d) ; 
onedirect (weo , w, e , o) ; 
onedirect(exc,e,x,c) ; 
onedirect(ast,a,s,c) ; 
onedirect (lpt,l,p,t) ; 
onedirect (ajt, a, j , blank) 
end { INITDIRECTS }; 



INITHOST - INITIALIZE ASCII TO HOST CONVERSION TABLE. 



procedure inithost; 
var 

extch : char; < 

intch : ascii; < 
begin { INITHOST } 
with host [mil] do 

begin chr74 :» false; 

chr76 :- true; 

c :- chr( 45) 

end ; 
for intch :» succ(nul) to del do 



EXTERNAL CHARACTER } 
INTERNAL CHARACTER } 



PASCAL NEWS #15 



SEPTEMBER, 1979 



PAGE 55 



3296 

3297 

3298 

3299 

3300 

3301 

3302 

3303 

3304 

3305 

3306 

3307 

3308 

3309 

3310 

3311 

3312 

3313 

3314 

3315 

3316 

3317 

3318 

3319 

3320 

3321 

3322 

3323 

3324 

3325 

3326 

3327 

3328 

3329 

3330 

3331 

3332 

3333 

3334 

3335 

3336 

3337 

3338 

3339 

3340 

3341 

3342 

3343 

3344 

3345 

3346 

3347 

3348 

3349 

3350 

3351 

3352 

3353 

3354 

3355 

3356 

3357 

3358 

3359 

3360 

3361 

3362 

3363 

3364 

3365 

3366 

3367 

3368 



with host [intch] do 
begin extch := chr(0); 

while (asc [extch] <> intch) and (extch < chr( 63)) do 
extch := succ (extch); 
if asc [extch] - intch 
then begin chr 74 := false; 
chr76 := false; 
c :- extch 
end 
else begin extch := chr(0); 
while (asc74 [extch] <> intch) and (extch < chr( 63)) do 
extch := succ(extch); 
if_ asc 74 [extch] = intch 
then begin chr 74 :•> true; 
chr76 := false; 
c := extch 
end 
else begin extch := chr(0); 
while (asc76 [extch] <> intch) and (extch < chr( 63)) do 

extch := succ(extch); 
if asc76 [extch] = intch 
then begin chr 74 := false; 
chr 76 := true; 
c :- extch 
end 
else writelnC OOPS: ',intch:3/B') 
end 
end 
end ; 
host [colon] .c :«=':' 
end { INITHOST }; 



INITMONTHS - INITIALIZE THE MONTHS TABLE. 



procedure initmonths; 



ONEMONTH - INITIALIZE ONE MONTH NAME. 



PARAM MON : MONTH NUMBER. 

A,B,C : THREE LETTERS OF MONTH NAME. 



} 



procedure onemonth( mon 
begin { ONEMONTH } 
months [mon] [1] := a; 
months [mon] [2] := b; 
months [mon] [3] := c 
end { ONEMONTH }; 



integer; a,b,c : ascii ); 



begin { INITMONTHS 
onemonth( l,j,smalla, 
onemonth( 2,f,sraalle, 
onemonth( 3,m,smalla ; 
onemonth( 4,a,sraallp 
onemonth( 5,m,smalla 
onemonth( 6,j,smallu : 
onemonth( 7,j,smallu 
onemonth( 8, a, smal lu 
onemonth( 9,s,smalle 
onemonth ( 1 , o , small c 
onemonth ( 1 1 , n , smal lo 
onemonth ( 1 2 , d , smal le 
end { INITMONTHS > 



} 

smalln) ; 
smal lb ) ; 
smallr) ; 
sraallr) ; 
smally) ; 
smalln) ; 
sraalll) ; 
smallg) ; 
smallp) ; 
smal It); 
,smallv) ; 
smallc) 



3369 

3370 

3371 

3372 

3373 

3374 

3375 

3376 

3377 

3378 

3379 

3380 

3381 

3382 

3383 

3384 

3385 

3386 

3387 

3388 

3389 

3390 

3391 

3392 

3393 

3394 

3395 

3396 

3397 

3398 

3399 

3400 

3401 

3402 

3403 

3404 

3405 

3406 

3407 

3408 

3409 

3410 

3411 

3412 

3413 

3414 

3415 

3416 

3417 

3418 

3419 

3420 

3421 

3422 

3423 

3424 

3425 

3426 

3427 

3428 

3429 

3430 

3431 

3432 

3433 

3434 

3435 

3436 

3437 

3438 

3439 

3440 



begin { INITIALIZE } 

reset(infile); 

rewrite(output) ; 

linelimit(output,maxint) ; 

initmonths; { BEFORE INITDATES } 

initasc; 

initclass; 

initclocks ; 

initdates; 

initdirects; 

inithost; 

directline := false; 

endof input := false; 

eol := true; 

errors := false; 

gaps[0] := 1; 

inchar := blank; 

incolumn := 150; 

inlength :« 0; 

inxbase := nil ; 

inxlast := nil ; 

linenumber := 0; 

linenums := infilet in ['0'..'9']; 

moreonleft := false; 

nblanks := 0; 

nchars := 0; 

newinline := true; 

newoutline := true; 

newparagraph := true; 

ngaps := 0; 

nwords := 0; 

outlength := 1; 

outline[l].c :» blank; 

outlinefl] .nbl := 0; 

reinitialize( [bre. .ill] ) 

end { INITIALIZE }; 



{ UNLIMITED OUTPUT > 



{ > 
{ > 



begin { PROSE } 

initialize; 

next word; 

while not endofinput do 

begin packword; nextword end ; 
break; 

if linecount < infinity 
then begin page (infinity) ; 

selection [pagenumber] :■= true; 

advanceform 

end ; 
if. errors then halt(' PROSE ERRORS DETECTED.') 
end { PROSE }. 



< > 



Programs 



We have received a short version of the Printme program (P-l) from Japan. The program is 
printed here as a mental exercise for the interested readers who want to clean the rust 
off their reasoning mechanisms. The only clue we feel we ought to give you is that 
CHR(48) is meant to be the apostrophe character. The fun things are around the edges... 



INFORMATION ENGINEERING COURSE 

DIVISION OF ENGINEERING 
UNIVERSITY OF TOKYO GRADUATE SCHOOL 



Bunkyoku, Tokyo 113 Japan, 
Telephone: (03) 812-2111 



Dear Mr. Mickel : 



November 15, 197 8 



Program Printme (Pascal News #12, P. 32) made me write my own version. 
My Printme is as follows. 

Sincerely yours, 



£j< ItU* 



Eiiti wada 



PROGRAM PRINTME (OUTPUT) ; VAR I: INTEGER; 

PROCEDURE P(I: INTEGER) ;BEGIN CASE I OF 

0:WRITE(' :WRITE(' ) ; 

1: WRITE ('PROGRAM PRINTME (OUTPUT) ; VAR I : INTEGER; ') ; 

2:WRITE('PROCEDURE P ( I : INTEGER) ; BEGIN CASE I OF'); 

3:WRITE('END END;BEGIN P ( 1 ) ; WRITELN ; P ( 2 ) ; WRITELN; FOR 

4:WRITE('TO 7 DO BEGIN WRITE ( I : 1 ); P ( ); WRITE (CHR (48 ) ) 

5:WRITE('P(I) ; WRITE (CHR (48 ) ) ;P(7) ;WRITELN END;FOR I:= 

6:WRITE('6 DO BEGIN P(I);WRITELN END END.'); 

7:WRITE(') ;' ) ; 

END END;BEGIN P ( 1 ); WRITELN ; P ( 2 ); WRITELN ; FOR I:=0 

TO 7 DO BEGIN WRITE ( I : 1 ); P ( ); WRITE (CHR (48 )) ; 

P(I) ;WRITE(CHR(48) );P(7) ;WRITELN END ; FOR I:-3 TO 

6 DO BEGIN P(I);WRITELN END END. 



I:-0'); 

;'); 

3 TO') ; 



Algorithms 



A Perfect Hashing Function A-3 



Title: 



A Class of Easily Computed, Machine Independent, Minimal Perfect Hash Func- 
tions for Static Sets 



Author: Richard J. Cichelli 

Address: Software Consulting Services, 901 Whittier Drive, Allentown, Pa. 18103 

Abstract : 

A method is presented for computing machine independent minimal perfect hash 
functions of the form : hash value 4r- key length + the associated value of the key's 
first character + the associated value of the key's last character. Such functions 
allow single probe retrieval from minimally sized tables of identifier lists. Appli- 
cation areas include table look-up for reserved words in compilers and filtering high 
frequency words in natural language processing. Functions for Pascal's reserved words, 
Pascal's predefined identifiers, frequently occurring English words, and month abbre- 
viations are presented as examples. 
Key Words and Phrases : 

Hashing, hashing methods, hash coding, direct addressing, dictionary lookup, in- 
formation retrieval, lexical analysis, identifier-to-address transformations, perfect 
hashing functions, perfect hash coding, scatter storage, searching, Pascal, Pascal re- 
served words, backtracking 
CR Cat e gories : 

3.7, 3.74, 4.34, 5.25, 5.39 

In several recent articles CQ, pQ it has been asserted that in general comput- 
ing minimal perfect hash functions for identifier lists (keys) is difficult. Here, 
several examples of such functions are shown and an efficient method for computing 
them is described. 

The form of my hash function is: 

Hash valued- key length + 

associated value of the key's first character + 
associated value of the key's last character. 

Example #1: Pascal's Reserved Words 

For Pascal's 36 reserved words, the following list defines the associated value 
for each letter. 

A=ll, B=15, C=l, D=0, E=0, F=15, G=3, H=15, 1=13, J=0, K=0, L=15, M=15, N=13, 0=0, 

P=15, Q=0, R=14, S=6, T=6, U=14, V=10, W=6, X=0, Y=13, 1=0. 
(For lookup routines these values are stored in an integer array indexed by the letters. 
Note: associated values need not be unique.) 

The corresponding hash table with hash values running from 2 through 37 is as fol- 
lows: 

DO, END, ELSE, CASE, D0WNT0, GOTO, TO, OTHERWISE, TYPE, WHILE, CONST, DIV, AND, 

SET, OR, OF, MOD, FILE, RECORD, PACKED, NOT, THEN, PROCEDURE, WITH, REPEAT, VAR, 

IN, ARRAY, IF, NIL, FOR, BEGIN, UNTIL, LABEL, FUNCTION, PROGRAM. 



As an example, consider the computation for "CASE": 
(1<— "C") + (0<-"E") + (4 «-length("CASE")) = 5 

The advantage of hash functions of the above form is that they are simple, effic- 
ient, and machine (i.e. character representation) independent. It is also likely that 
any lexical scanning process will have, as a by-product of its identifier scanning logic, 
the identifier length and the values of the- first and last characters. Two disadvant- 
ages of functions of this form are 1) that it requires that no two keys share length 
and first and last characters and 2) for lists with more than about 45 items segmenta- 
tion into sublists may be necessary. (This is a result of the limited range of hash 
values that the functions produce.) 

The associated values for each of the letters are computed by the following proce- 
dure: 1) Order the identifier list, and 2) Search, by backtracking, for a solution. 

The ordering process is twofold. First, order the keys by the sum of the frequen- 
cies of the occurrences of each key's first and last letter in the list. For example: 
"E" occurs 9 times as a first or last letter in the Pascal reserved word list. It is 
the most frequent letter and thus, "ELSE" is the first word in the search list. "D" 
is the next most frequent letter, and thus "END" is second. After the words have been 
put in order by character occurrence frequencies, modify the order of the list such 
that any word whose hash value is determined by assigning the associated character values 
already determined by previous words is placed next. Thus, after "OTHERWISE" 1 has been 
placed as the third element of the frequency ordered list, the hash value of the word "DO" 
is determined and so it is placed fourth. (I.e. during search, after the placement of 
the word "END" a value will be associated with "D", and after the placement of the word 
"OTHERWISE" a value will be associated with "0".) The ordering process causes hash value 
conflicts during search to occur as early as possible thus pruning the search tree and 
speeding the computation. 

The completely ordered search list for Pascal's reserved words is: 

ELSE, END, OTHERWISE, DO, DOWNTO, TYPE, TO, FILE, OF, THEN, NOT, FUNCTION, RECORD, 

REPEAT, OR, FOR, PROCEDURE, PACKED, WHILE, CASE, CONST, DIV, VAR, AND, MOD, PROGRAM, 

NIL, LABEL, SET, IN, IF, GOTO, BEGIN, UNTIL, ARRAY, WITH. 

The backtracking search procedure then attempts to find a set of associated values 
which will permit the unique referencing of all the members of the key word list. It 
does this by trying the words one at a time in order. The backtracking procedure is as 
follows: If both the first and last letter of the identifier already have associated 
values, try the word. If either the first or last letter has an associated value, vary 
the associated value of the unassigned character from zero to the maximum allowed asso- 
ciated value, trying each occurrence. If both letters are as yet unassociated, vary the 
first and then the second, trying each possible combination. (An exception test is re- 
quired to catch situations where the first and last letters are the same.) Each "try" 
tests whether the given hash value is already assigned and, if not, reserves the value 
and assigns the letters. If all identifiers have been selected, print the solution and 
halt. Otherwise, invoke the search procedure recursively to place the next word. If 
the "try" fails, the word is removed in backtracking. 

The search time for computing such functions is related to the number of identifiers 
to be placed, the maximum value which is allowed to be associated with a character, and 
the density of the resultant hash table. If the table density is one (i.e. a minimal 
perfect hash) and the maximum associated value is allowed to be the count of distinct 
first and last letter occurrences (21 for Pascal's reserved words), then the above pro- 
cedure finds a solution for Pascal's reserved words in about seven seconds on a DEC 
PDP-11/45 using a straightforward implementation of the algorithm in Pascal. (Without 
the second ordering, the search required 5h hours.) If the maximum associated value is 
limited to 15, as in the above list, the search requires about 40 minutes. (There is no 
solution with 14 as a maximum value.) 

Incorporation of the above hash function into a Pascal cross reference program yield- 
ed a lOiS reduction in total run time for processing large programs. The method replaced 
a well coded binary search which was used to exclude reserved words from cross referenc- 
ing. 



Inclusion of the word "OTHERWISE" in Pascal's reserved word list anticipates the accep- 
tance by the Pascal Users Group of the recommendation for a revised CASE construct sub- 
mitted by its International Working Group for Extensions. 



7> 



3=» 



m 



CD 



Example #2 
The second example is for the list of Pascal's predefined identifiers. 
A=15, B=9, C=ll, D=19, E=5, F=3, G=0, H=0, 1=3, J=0, K=16, L=13, M=l, N=19, 
Q=0, R=0, S=15, T=0, U=17, V=0, W=10, X=0, Y=0, Z=0. 



0=0, P=18, 



GET, TEXT, RESET, OUTPUT, MAXINT, INPUT, TRUE, INTEGER, EOF, REWRITE, FALSE, CHR, CHAR, 
TRUNC, REAL," SQR; SQRT, WRITE, PUT, ORD, READ, ROUND, READLN, EXP, PAGE, EOLN, COS, 
SUCC, DISPOSE, NEW, ABS, LN, BOOLEAN, WRITELN, SIN, PACK, UNPACK, ARCTAN, PRED. 
Computation of this function required about seven minutes. Note: since the predefined 
identifier "ODD" conflicts with "ORD", it was not included in the list. 
Example #3: Frequently Occurring English Words 
This example uses the word list of Ll">33 Search time was less than one second. 
A=3, B=15, C=0, D=7, E=0, F=15, G=0, H=10, 1=0, J=0, K=0, L=0, M=12, N=13, 0=7, P=0, 



Q=0, R=12, S=6, T=0, U=15, V=0, W=14, X=0, 



as, he, and, have, in, not, 



be, but, his, 



I, it, the that, at, are, a, is, to, this, 

had, or, on, was, of, her, by, you, with, which, for, from. 

Example #4: Month Abbreviations 
This example is from C 2*3 . The function's form was modified slightly to: 
Hash value ^-.associated value of the key's second character + 

associated value of the key's third character. 
A=4, B=5, C=2, D=0, E=0, F=0, G=3, H=0, 1=0, J=0, K=0, L=6, M=0, N=0, 0=5, P=l, Q=0, 
R=6, S=0, T=6, U=0, V=6, W=0, X=0, Y=5, 1=0. 

JUN, SEP, DEC, AUG, JAN, FEB, JUL, APR, OCT, MAY, MAR, NOV. 
This form avoids the conflict between "JAN" and "JUN" and takes into account the constant 
key length. Search time was again well less than one second. Note: the method present- 
ed here is applicable to sets up to four times as large as those said to be feasible by 
the methods described in [2] 
Moral : 

This article does not have a conclusion, but it does have a moral. In the words of 
the renowned chess programmer, Jim Gillogly, author of the Technology chess program which 
was the prototype of the current generation of highly successful chess programs, "When 
all else fails, try brute force." 



References: 
[1J Sheil, 
Keys. 



B. A. Median Split Trees: A Fast Lookup Technique for Frequently Occurring 
Comm. ACM 21, 11 (Nov. 1978), 947-958. 



1 

2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 

15 

16 

17 

18 

19 

20 

21 

22 



£23 Sprugnoli, Renzo. Perfect Hashing Functions: A Single Probe Retrieving Method 
for Static Sets. Comm. ACM 20, 11 (Nov. 1977), 841-850. 

[3] Knuth, D.E. Sorting and Searching, Vol 3, The Art of Computer Programming, 506. 

program perfect(tty) < R.J.CICHELLI 2-FEB-79 >; 
{ COMPUTE A PERFECT HASH TABLE FOR PASCAL RESERVED WORDS > 
const 

debug = false; 

startsolmax = 1; 

startwordmax = .36; 

maxwordsize = 10; 

maxhash value = 50; 

maxreserved words = 50 { .. N-l }; 



type 

letter - 'A' .. 'Z'; 

possiblehashvalues = .. maxhashvalue ; 
wordsize = 1 . . maxwordsize; 
aword - array [wordsize] of_ char; 

resword = record 

fstlet, lstlet : char; 
length, sortval : integer; 
word : aword 
end ; 



23 

24 

25 

26 

27 

28 

29 

30 

31 

32 

33 

34 

35 

36 

37 

38 

39 

40 

41 

42 

43 

44 

45 

46 

47 

48 

49 

50 

51 

52 

53 

54 

55 

56 

57 

58 

59 

60 

61 

62 

63 

64 

65 

66 

67 

68 

69 

70 

71 

72 

73 

74 

75 

76 

77 

78 

79 

80 

81 

82 

83 

84 

85 

86 

87 



descletter = record usecount, representedby : integer end ; 

alfa = packed array [1..10] of char; 

var 

i: integer; 

keys : array [0 .. maxreservedwords] of_ resword; 

letterdata : array [letter] of descletter; 

taken : array [possiblehashvalues] of_ boolean; 

wordstodo, solutioncnt, maxsolutns : integer; 

wordcount, numberof reservedwords, maxcharval: integer; 

ptime, pdate : alfa; 

procedure sort(l, r : integer) < QUICKSORT >; 

var 

i, j, x : integer; 
w: resword; 



00 

=8= 



keys[(i+j) div 2] .sortval; 



begin 

i := 1; j := r; 
repeat 

while keys [i] .sortval < x do i :- i + 1; 
while x < keys [j] .sortval do j :- j - 1; 
if i <= j then 
begin 

w:=keys[i]; keys[i] :=keys[j]; 
keys[j] := w; i := i + 1;; j := j - 1; 
end ; 
until i > j; 

if 1 < j then sort(l,j); 
if i < r then sort(i,r); 
end < SORT >; 

procedure printsolution(numwords: integer); 

var 

i, j: integer; 
ch: char; 

begin 

date(pdate); time(ptime); 
solutioncnt := solutioncnt + 1; 
writeln(tty,' SOLUTION ', solutioncnt); 

writeln(tty,' LETTER REPRESENTED BY '); 

for ch := 'A' to 'Z' do 

writeln(tty,' ',ch,' ', letterdata [ch] .representedby) ; 

writeln(tty) ; 

writeln(tty,' RESERVED WORD LIST'); 
write (tty,' WORD HASH VALUE'); 

if debug then writeln(tty,' FST LST LENGTH ') else writeln(tty) ; 

writeln(tty,' '); 

if solutioncnt >= maxsolutns then sort(0, numberof reservedwords) ; 
for i := _to numwords do 
with keys [i] do 
begin 

write (tty,' ',i+l:3,' ',word 

if debug then writeln(tty ,' 

else writeln(tty) ; 
end ; 

writeln(tty) ; 

writeln(tty,' PRINTING AT ', ptime,' ', pdate); 
if solutioncnt >= maxsolutns then halt; 
end ; 

procedure initkeys; 



m 



', sortval) ; 
fstlet,' ', lstlet, 



'.length: 3) 



89 








90 


begin 






91 


keys [0] .word :='OTHERWISE '; 






92 


keys [1]. word := 'AND '; 






93 


keys [2] .word := 'ARRAY '; 


keys [3] .word := 


'BEGIN 


94 


keys [4] .word := 'PACKED '; 


keys [5] .word := 


'CASE 


95 


keys [6] .word := 'GOTO '; 


keys [7] .word : = 


'CONST 


96 


keys [8] .word := 'DIV '; 


keys [9] .word := 


'DO 


97 


keys [10] .word := 'DOWNTO 


keys [11] .word 


:= 'ELSE 


98 


keys [12] .word := 'END 


keys [13] .word 


:= 'FILE 


99 


keys [14] .word := 'FOR 


keys [15] .word 


:= 'FUNCTION 


100 


keys [16]. word := 'IF 


keys [17] .word 


:= 'IN 


101 


keys [18] .word := 'LABEL 


keys [19] .word 


:= 'MOD 


102 


keys [20] .word := 'NIL 


keys [21] .word 


:= 'NOT 


103 


keys [22] .word := 'OF 


keys [23] .word 


:= 'OR 


104 


keys [24] .word := 'PROCEDURE ' 


"keys [25] .word 


:= 'PROGRAM 


105 


keys [27] .word := 'RECORD 


' ; 




106 


keys [28] .word := 'REPEAT 


keys [29] .word 


:= 'SET 


107 


keys [30] .word := 'THEN 


keys [31] .word 


:= 'TO 


108 


keys [32] .word := 'TYPE 


keys [33] .word 


:= 'UNTIL 


109 


keys [34] .word := 'VAR 


keys [35] .word 


:= 'WHILE 


110 


keys [26] .word := 'WITH 






111 


numberofreservedwords := 35; 






112 


end; 






113 








114 


procedure clearletters; 






115 








116 


var 






117 


ch : char ; 






118 








119 


'begin 






120 


for ch := 'A' to 'Z' do 






121 


with letterdata[ch] do 






122 


begin usecount := 0; ret 


sresentedby := end; 


123 


end; 






124 








125 


procedure setkeys ; 






126 








127 


var 






128 


i, j: integer; 






12*9 








130 


begin 






131 


for i := tp_ numberofreserve( 


Iwords do 




132 


with keys [i] do 






133 


begin 






134 


fstlet := word[l] ; 






135 


j := maxwordsize; 






136 


while word [i] - ' ' do ; 


:- j - 1; 




137 


lstlet := word[j] ; 






138 


length := j ; 






139 


sortval := 0; 






140 


end; 






141 


end; 






142 








143 


procedure conflicts; 






144 








145 


var 






146 


nogood: boolean; 






147 


i , j : integer ; 






148 


chl, ch2: char; 






149 








150 


begin 






151 


nogood := false; 






152 


clearletters ; 






153 


setkeys; 






154 


for i := to numberof reserve 


jdwords do 





155 
156 
157 
158 
159 
160 
161 
162 
163 
164 
165 
166 
167 
168 
169 
170 
171 
172 
173 
174 
175 
176 
177 
178 
179 
180 
181 
182 
183 
184 
185 
186 
187 
188 
189 
190 
191 
192 
193 
194 
195 
196 
197 
198 
199 
200 
201 
202 
203 
204 
205 
206 
207 
208 
209 
210 
211 
212 
213 
214 
215 
216 
217 
218 
219 
220 



begin 

with keys[i] do 
begin 

chl := fstlet; 
ch2 := lstlet; 
end ; 
for j := i+1 _to numberofreservedwords do 
begin 

if keys [i] .length = keys[j] .length 
then 
begin 

with keys [ j ] do 
begin 

if ((chl - fstlet) and (ch2 = lstlet)) or 

((ch2 = fstlet) and (chl - lstlet)) 
then 
begin 

writeln(tty,' ', keys [i] .word,' CONFLICTS WITH 

keys [j] .word) ; 
nogood := true; 
end ; 
end ; 
end 
end ; 
end ; 
if nogood then halt else writeln(tty ,' NO CONFLICTS '); 
end ; 

procedure order; 



i: integer; 

begin 
clearletters; 
setkeys; 

for i := _t£ numberofreservedwords do 
with keys [i] do 
begin 

letterdata [fstlet] .usecount := letterdata [fstlet] .usecount + 1; 
letterdata [lstlet] .usecount := letterdata [lstlet] .usecount + 1; 
end ; 
for i := _tp_ numberofreservedwords do 
with keys [i] do_ 

sortval := -(letterdata [fstlet] .usecount + letterdata [lstlet] .usecount) ; 
sort(0, numberofreservedwords); 
end ; 

procedure reorder; 

var 
i, j, mark : integer; 

begin 

clearletters; 
setkeys ; 
mark : = 1 ; 

for i := jto numberofreservedwords do_ 
if keys [i] .sortval = then 
begin 

with keys [i] do 
begin 

sortval := mark; 

mark : = mark + 1 ; 

letterdata [fstlet] .representedby := 1; 

letterdata [lstlet] .representedby := 1; 



GO 

c-> 



m 



CO 

lo 



CD 



221 
222 
223 
224 
225 
226 
227 
228 
229 
230 
231 
232 
233 
234 
235 
236 
237 
238 
239 
240 
241 
242 
243 
244 
245 
246 
247 
248 
249 
250 
251 
252 
253 
254 
255 
256 
257 
258 
259 
260 
261 
262 
263 
264 
265 
266 
267 
268 
269 
270 
271 
272 
273 
274 
275 
276 
277 
278 
279 
280 
281 
282 
283 
284 
285 
286 



end ; 
for j := i+1 to numberofreservedwords do 
if keys[j] .sortval - then 
begin 

with keys [ j ] do 
begin 

if (letterdata[fstlet] .representedby =1) and 
(letterdata[lstlet] .representedby = 1) then 
begin 

sortval := mark; 
mark :- mark + 1 
end; 
end ; 
end ; 
end; 
sort(0, numberofreservedwords); 
end ; 

procedure init; 

var 

i, j: integer; 
ch :char; 
w : resword ; 

begin { INIT > 



wordcount := 0; 

maxsolutns := startsolmax; 

solutioncnt := -1; 

initkeys; 

conflicts; 

order; 

reorder; 

maxcharval 



words todo := star two rdmax - 1; 



0; 



for ch := 'A' _to 'Z' do maxcharval 
+ letterdata [ch] .representedby; 
setkeys ; 

printsolut ion (numberofreservedwords) ; 
clearletters; 
end ; 

procedure addword ; 

var 
chl, ch2: char; 
len, repfirstlet, replastlet : integer; 

procedure try; 

var 

hsh : integer ; 

begin 
hsh 



maxcharval 



len + letterdata [chl] .representedby + 
letterdata[ch2] .representedby; 
if not taken [hsh] 
then 
begin 

taken [hsh] := true; 

letterdata [chl] .usecount := letterdata [chl] .usecount + 1; 

letterdata [ch2] .usecount := letterdata [ch2] .usecount + 1; 

keys [wordcount] .sortval := hsh; 

wordcount := wordcount + 1; 

if wordcount > wordstodo 

then printsolution(wordstodo) 



287 else addword; 

288 wordcount := wordcount - 1; 

289 letterdata [ch2] .usecount := letterdata [ch2] .usecount - 1; 

290 letterdata [chl] .usecount := letterdata [chl] .usecount - 1; 

291 taken [hsh] := false; 

292 end 

293 end { TRY >; 
294 

295 begin < ADDWORD } 

296 with keys [wordcount] do 

297 begin 

298 chl := fstlet; 

299 ch2 := lstlet; 

300 len := length; 

301 end ; 

302 if letterdata [chl] .usecount > 

303 then 

304 if_ letterdata [ch2] .usecount > 

305 then 

306 try < BOTH CHARACTERS SPECIFIED > 

307 else 

308 for replastlet := _to maxcharval d£ 

309 begin { FIRST CHARACTER ONLY SPECIFIED > 

310 letterdata [ch2] .representedby := replastlet; 

311 try; 

312 end 

313 else 

314 if letterdata [ch2] .usecount > 

315 then 

316 for repfirstlet := _t£ maxcharval do 

317 begin < LAST LETTER ONLY SPECIFIED > 

318 letterdata [chl] .representedby := repfirstlet; 

319 try; 

320 end 

321 else 

322 for repfirstlet := _to maxcharval do 

323 begin < BOTH LETTERS UNSPECIFIED } 

324 letterdata [chl] .representedby := repfirstlet; 

325 if_ chl = ch2 then try else 

326 for replastlet := t£ maxcharval do 

327 begin 

328 letterdata [ch2] .representedby := replastlet; 

329 try; 

330 end ; 

331 end ; 

332 end ; 

333 begin 

334 writeln(tty,' FIND PERFECT HASH FUNCTIONS FOR RESERVED WORDS.'); 

335 date(pdate); time(ptime); 

336 writeln(tty,' STARTING AT ',ptime,' ON ',pdate); 

337 writeln(tty,' SOLVING FOR ', startsolmax,' SOLUTIONS'); 

338 writeln(tty,' PLACING ' ,s tar two rdmax,' WORDS'); 

339 for i := _to maxhashvalue do taken [i] := false; 

340 < ASSURE THAT THE TABLE HAS NO OPEN LOCATIONS >; 

341 for i:= 39 to maxhashvalue do_ taken [i] := true; 

342 init; 

343 time (p time); 

344 writeln(tty,' STARTING SEARCH AT '.ptirne); 

345 < SPECIAL CODE TO DO MAXCHARVAL == 15 > 

346 maxcharval := 15; { 14 DOESN'T WORK > 

347 addword; 

348 time(ptime); 

349 writeln(tty,' NO SOLUTIN AT ',ptime); 

350 end. 



-o 

2> 



3> 



=8= 
VJ1 



m 









Articles 



A CONTRIBUTION TO MINIMAL SUBRANGES 

V^'WWVt V\A/VVVVVA/V\AAA/\/VVVVV\AA/WVl/ 



Laurence V. Atkinson 
University of Sheffield 
England 



Two topics which have received recent attention in Pascal News are 
the evaluation of boolean expressions [3, 8, 10, 11, 1 4 j and extended 
subranges [4, 5, 7 J . Two articles [l , 2], prompted largely by the 
programs presented during the aforementioned discussion, show how a 
state transition approach to multi-exit loops avoids issues of boolean 
expression evaluation and, as an added bonus, facilitates minimal 
subranges. Wherever feasible in a Pascal program the range of values 
that a variable is permitted to take should be as small as possible. 
This aids program transparency (the declaration is more informative) , 
improves efficiency (see [\3}) and increases security (the assignment 
of illogical values is more readily detectable, both at compile-time 
and at run- time) . 

A recent letter from Judy Bishop [$} suggests that the relevance 
of state transition loops to minimal subranging is not fully appreciated. 
This article emphasises this particular aspect. 

The example which started all this discussion was a linear search 
algorithm presented by Barron and Mullins [_3] . A state transition 
implementation is given in [f] . Judy Bishop gives a similar solution 
in [6^ but implies that a state transition approach necessitates an 
extended subrange. This is not so! 

She identifies three mutually exclusive states: 



(i £ n) 

(i S n) 



(a. ^ item) 
(a. = item) 



searching 
item found 
item absent 



and produces a solution of the form shown in figure 1 . 



var a : array \_\ . . nj of . . . ; 
i : 1 . . nplusl ; 




state 


: (searching, absent, 


found) ; 


i := 1; state := searching; 




repeat 






if i > n 


then state := absent 


else 


if a[ 


Lj = item then state 


:= found else 


i 


:= i + 1 




until state 


<> searching 






Figu 


re 1. 



The extended subrange for i is necessitated only by the states 
chosen. In this example it is impossible for n to be less than 1 
(for then the array declaration would not compile) so testing i>n 
immediately upon entry to the loop is pointless. Instead we should 
make a[i]=item the first test and then test i=n before incrementing i. 
Thus the states which should be chosen are 






3> 



(i < n) 


A (a. ^ item) 


=> 


searching 


(i £ n) 


A (a. = item) 


=> 


item found 


(i = n) 


A (a. ^ item) 


=> 


item absent 



and the corresponding solution is in figure 2. Notice that i now 
takes its minimal subrange: the index range of the array. 

In this example the index type of the array is a subrange type 
which can be extended and the table is assumed to be full. We now 
examine the state transition approach in circumstances where the 
array index type is not a subrange and where the table may be empty. 



var a : array [I . . nj of ... ; 
i : 1 .. n; 
state : (searching, absent, found); 

i := 1; state := searching; 
repeat 

if a [i] = item then state := found else 
if i = n then state := absent else 
i := i + 1 
until state <> searching 

Figure 2. 



m 



Full range index type 

When the index type of an array is a subrange type we are able 
to extend this subrange for a subscript variable (but note that 
minimal subranging is particularly important for array subscripts) . 
If the index type of an array is not a subrange type but a full type, 
such as char, then we have no choice; we cannot extend the range. 
This point was raised by John Strait \\l\. As shown in Ll3, the 
fact that a state transition approach does not incur an extension of 
the index type makes the technique directly applicable. This is 
illustrated in figure 3. 

Table possibly empty 

A common technique is to use a variable to record the number of 
entries a table currently contains. For a table with index range 
l..n the number of entries (say,m) may be anywhere in the range to 
n. Hence, 0..n is the appropriate subrange for m. This does not 
affect consideration of the subscript work-variable : this should 
sensibly refer only to actual entries and so should never take a value 
outside the range 1 to m. Its full range is therefore 1 to max(m) 
and so its minimal subrange is 1 . .n. 






3> 
CD 

m 
en 

CD 



The states are 

(m > 0) a (i < m ) 
(m > 0) a (i £ m) 
(m = 0) v (i = m) 



(a. 4 item) 
(a. = item) 
(a. ^ item) 



=> searching 
=> item found 
=> item absent 



and the program is in figure 4. 



Alternatively, some other information may record whether or not 
the table is occupied, as in figure 5. This will probably be so, 
whatever the search algorithm, if the index type of the array is a 
full range type. 



const 


firstch = . . . ; 


lastch = 


... ; 


var 


a : array [char] of 
ch : char ; 


... ; 






state : (looking, exhausted, 


located) ; 


ch : = 


firstch; state := 


looking; 




repea 


t 






if 


a[chj = item then state := located else 
if ch = lastch then state := exhausted else 
ch := succ (ch) 


until 


state <> looking 










Figure 


3. 



var a : array [} . . n] of . . . ; 
i : 1 .. n; 
noofentries : . . n; 
state : (searching, absent, found); 

if noofentries > then 
begin 

i := 1; state := searching; 
repeat 

if a[ij = item then state := found else 

if i = noofentries then state := absent else 
i := i + 1 
until state <> searching 
end else 

state := absent 



Articles 



Figure 4. 



occupancy : (empty, occupied) ; 

case occupancy of 

occupied : 

begin 



3> 



i := 1; 



state := searching; 



end; 
emp ty : 

state := absent 
end { case } 



Figure 5. 



Efficiency 

It would be inappropriate to end this discussion without reference 
to the efficiency considerations raised by Wilsker (j4J . He stresses 
the reduction in execution time achieved by the data sentinel approach 
to linear search as advocated by Knuth [9 J . I have some sympathy with 
this view but my concern, both here and in [lj , is not with the algorithm 
itself, but the statement of the algorithm in Pascal. 

Conclusions 

OA/V/VVVVVVVV, 

Enumerated and subrange types are two of the most important features 
of Pascal. Their contribution to transparency, security and efficiency 
is often not fully appreciated. Their under-utilisation is one of the 
(many!) features I repeatedly criticise when reviewing Pascal books. 

Minimal subranging in Pascal is desirable. One benefit of a state 
transition approach to dynamic processes, as described here and in j_lj 
and [2] , is that minimal subranging can be achieved. 



References 

f &\A/\A/\AA/\Aj 

B 
H 

[3] 

H 

[5] 
[6] 



L.V. Atkinson, "Know the state you are in", 
Pascal News, 13, 66-69, 1978. 

L.V. Atkinson, "Pascal scalars as state indicators", 
Software-Practice and Experience (to appear), 1979. 

D.W. Barron and J.M. Mullins, "What to do after a while" 
Pascal News, 11, 48-50, 1978. 

J.M. Bishop, "Subranges and conditional loops", 
Pascal News, 12, 37-38, 1978. 

J.M. Bishop, Letter to John Strait, 
Pascal News, 12, p51, 1978. 

J.M. Bishop, Letter to Michael Irish, 
Pascal News, 13, p82, 1978. 



3> 
CD 

m 



[7J K. Fryxell, Letter to the editor, 
Pascal News, 13, p80, 1978. 

[8] T.M.N. Irish, "What to do after a while ... longer", 
Pascal News, 13, p65, 1978. 

[9] D.E. Knuth, "Structured programming with goto statements", 
Computing Surveys, 6, 261-301, 1974. 

[lO] M.W. Roberts and R.N. Macdonald, "A resolution of the boolean 
expression evaluation question", 
Pascal News, 13, 63-65, 1978. 

[ll] A.H.J. Sale, "Compiling boolean expressions", 
Pascal News, 11, 76-78, 1978* 

[12] J. Strait, Letter to Judy Bishop, 
Pascal News, 12, p51, 1978. 

[13] J. Welsh, "Economic range checks in Pascal", 

Software-Practice and Experience, 8, 85-97, 1978. 

[14] R.A. Wilsker, "On the article : what to do after a while", 
Pascal News, 13, 61-62, 1978. 

(* Received 79/04/04 *) 



***************** 



Re.pnlnte.d viltk the. peAmiuion o£ the. author, 

iKom 

AuA&iaJUan Compute*. Science. Communication*, 

Volume. 1 hlumbeA 1, \kaxch 1979. 



(* Received 79/05/15 *) 



program Nonstandard (output); 
type 

state = record 

status : (defined, undefined); 
value : integer 
end; 

procedure InnerScope; 
var 

ageofperson : state; {meant to be the type above) 
state : (scanning, found, no tpr es ent ) ; 
begin 

{including references to variable state} 
end; 
begin 

end. 

Most Pascal compilers will compile this program, attaching the first use of state 
in InnerScope to its outer definition. In fact, this use is inside the scope of 
the second definition and is in error on two counts: (1) it is an instance of use 
preceding definition, and (2) state is not a type-identifier in this scope, 
2. The relevant rules 

The relevant rules laid down by the Pascal Standard may be paraphrased as follows: 

2.1 The scope of an identifier extends over the whole of the program, 
procedure, function, or record definition in which it is declared with the 
exception noted in 2.2. 

2.2 If an identifier is defined in a procedure, function, or record definition, 
then that scope and all enclosed scopes are excluded from the scope of any 
identifier of the same name in an enclosing scope, {.the. Kedd^ixiltLon tuxle. } 

2.3 No two identifiers may have the same name in a scope. {uvu.qu.zneA* o£ 
a6&o(UcuU.on } 

2.4 The definition of an identifier must precede its use, with the exception 
of pointer-type definitions and forward-declared procedures and functions 
(see Standard for the exceptions). 

Note that I use identifier as meaning a handle attached to a Pascal object, and 
name as the character- string itself. Thus Arthur is the identifier to which I 
respond in appropriate contexts, but other people have the same name. 



-d 

3> 



m 



A Note on Scope, One-Pass Compilers, and Pascal 



5. Outline of the algorithm 

Consider a particular scope S. If we denote the point of definition by D, and 
uses of an identifier by U, then the allowable pattern is illustrated by 



A.E.J. Sale 

Department of Information Science, University of Tasmama 

1. Introduction 

Very few Pascal compilers correctly implement the scope rules of Pascal. Partly 
this may be due to their obscurity as some of the key statements are buried in 
the introduction to the Pascal Users Manual, and partly it may be due to the frequent 
use of one-pass recursive descent compilation techniques. However, with the 
publication of the draft Pascal Standard in issue 14 of Pascal News, the scope rules 
have been clarified and it is therefore appropriate to see how the compilers may 
be made to conform. The following program fragment illustrates the sort of error 
that should be detected. 



scope S: (. 



U 



Consequently, I can formulate the pre-condition R which must hold immediately before 
the definition of the identifier at D: 

R = "No occurrences of the name of the identifier may have occurred in 

accessible scope between the start of S and the point of definition at D." 
This follows from rules 2.1,2.3 and 2.4. Rule 2.2 is brought in by the reference 
to "accessible scope". 

Consequently, we may incorporate the precondition in a one-pass compiler by checking 
at this point. We search the symbol-table for any accessible identifier of the same 



CD 



name before entering the new use. There are three distinct possibilities: 

3.1 There is no identifier of this name. This means that no previous definitions 
have occurred in accessible scope, and any attempted uses have already been 
detected as errors (references to unknown identifiers) . 

3.2 There is an identifier of the same name declared at this scope level. This 
is an error as it violates rule 2.3 (name already defined for this scope). 

3.3 There is an identifier of the same name at an enclosing scope level. This 
is therefore a redefinition of the name. The problem that arises is that 
uses of this name preceding D will have been bound to the outer definition 
of the name, and some may have occurred in the forbidden region. 

The problem of 3.3 may be handled by associating a unique symbol with each new scope 
as it is encountered , such that the symbols are ordered. Each identifier in the 
symbol-table then carries the symbol indicating its last occurrence . When the pre- 
condition search is made, if the table-symbol is earlier in the ordering than the 
current -scope -symbol, then no use has been made of the name in the forbidden region. 
If the table-symbol is equal to or follows the current -scope- symbol, then references 
to the identifier have occurred in the forbidden region and an error has occurred. 

The simplest implementation is to make the scope-symbol a natural number stating at 
for the program block and incremented for each new scope. It would be rare for 
programs to exceed even the limits of integers in 16-bit machines I 

4. The exceptions 

The type-identifier of pointer-type definition may occur anywhere in the type part; 
this relaxes rule 2.4. In all implementations of which I am aware, there are no 
properties of pointers (such as bit-size) which depend on their bound types, though 
this is possible. Therefore, the type-definitions may be compiled normally with the 
exception that all references to type-identifiers are deferred, and examined only 
at the close of the type-part. This defers all occurrences of the type-identifiers 
to virtual occurrences at the close of the type-part, and satisfies rule 2.4 and 
the algorithm requirements. 

A full definition of a forward -declared procedure may follow a use of the procedure. 
However, the forward-declaration is a defining occurrence of the procedure identifier, 
and incorporates a pseudo-scope for the parameter list. Within the parameter list 
only references to types and definitions of variables can occur. Application of the 
algorithm is still necessary to detect uses before definition and duplicate uses of 
names. However, any names so introduced are not accessible in the intervening scopes 
between the forward-declaration and its associated body, and the algorithm will still 
work when the parameter list is again accessible in the newly created scope of the 
body. (It is not neccessary to alter the parameter list scope-symbols to the newly 
created one, but it can be done.) 

Functions may be treated identically. The Pascal Standard does not prohibit re- 
defining the function-designator name as an identifier local to the function, but 
the resulting function-definition must then be non-standard as it cannot assign a 
value to the function. 

5. Conclusions 



The scope rules set out in section 2 and now incorporated into the draft Pascal 
Standard are sufficient to permit even one-pass compilers to reject incorrect 
programs. The suggested algorithm adds an overhead at every defining occurrence, but 
since uses exceed definitions in general it may not be too expensive in time to 
implement. In any case, what price can be put on correctness? 



6. References 

Addyman, A (1979): 
Working Group" 



"The BSI/ISO Working Draft of Standard Pascal by the BSI DPS/13/4 
Pascal News, no 14, January 1979, pp 4-60. 



fg^cal^l - InteAXLdtivz., Conversational PaAcal-S 

RichaAd J. CichdUU 
901 WhlttizA Vhlvz. 
Allzntown, Fa. 181 03 



PASCAL-I is 3 version of the Wirth PASCAL-S (PASCAL 
subset) system designed to interact with the terminal user* 
The system contains a compilerr interpreter* text editor? 
formatter and 3 run-time debugging system* The compiler 
compiles the source into 3 stack code which is interpreted* 
After prodram changes* the compiler recompiles only the 
minimal set of affected procedures* The compiler also 
automatically formats the program upon compilation and 
recompilation* Extensive on-line documentation is 
available* The HELP command will dive either a list of all 
the commands with short descriptions or will give a detailed 
description of any command (s) specified* Compiler error 
messages are detailed and sometimes include recommendations 
for possible fixes* The program source text is stored to 
allow interaction with the run time system on the source 
level ♦ 

All editting commands (except the GET file and SAVE 
file commands) follow the PASCAL scope rules* (i*e* the 
LIST command defaults to listing only the block being 
editted*) Strings can be searched for and changed* The 
REPEAT command reapplies the last edit command* There are 
no line numbers; the editting scope is always very local ? 
and none seem needed nor desired* The edit pointer can be 
moved from procedure to procedure* to the top or bottom of 
any of the three sections of a PASCAL block (HEADER? 
DECLARATIONS? and BODY)? and up and down within the block* 
Text lines or entire procedures C3n be inserted? deleted or 
moved* A tree structured listing of procedure relationships 
is produced by the STRUCTURE command* 

The run time system allows the user to execute his 
program and to suspend execution at any time during 
execution* Breakpoints can be set? cleared or ignored* 
Execution limits can be set (statements executed? 
instructions executed and output lines)* A user abort 
entered from the terminal will also suspend execution of the 
users program (but not terminate PASCAL-I)* Execution 
errors and I/O errors will also suspend the program (not 
terminate it) ♦ 

Once execution is suspended? the user has several 
options* He may use the PMD command to examine any of the 
simple variables in the stack and the contents of the I/O 
buffers and may display the recent execution history of his 
program* He may also enter code for immediate execution! 
Immediate code may be anything from a PASCAL-S statement to 
an entire block (without the header or any blocks declared 
inside it). One block of immediate code may be stored for 
each procedure and can be executed anytime the program is 
suspended within that procedure* 









Jensen, K. $ Wirth, N. (1974): "Pascal User Manual and Report", 
pp 8, 69-71, 136, 150, 155-156 (Second corrected Edition). 



Spr inger-Ver lag , 



Part of the research involved in creating PASCAL-I was 
to test whether procedure oriented languages like PASCAL. 
could be easily used interactively* Some lan.Sua.de designers 
have suggested that only line oriented languages such as APL 
and BASIC could be used* The argument was th3t highly 
structured languages would inhibit programmer interaction* 
We argue that disciplined design structure is esential for 
reliable software development* PASCAL-I makes such 
discipline implicit in its commands and their scope* When 
you edit a PASCAL-S program with PASCAL-I r you modify text 
within a procedure* Error correction and most other program 
interaction is oriented towards the current statement in the 
current procedure* 

We believe that PASCAL-I 's automatic formatting and 
procedure orientation overcome any limitations that PASCAL 
might have as a conversational languager and that the 
discipline imposed by languages such as PASCAL is essential 
for reliable software design and implementation* 

BCottomD - Set pointer to bottom of environment* 

BRCeakH - Set breakpoints* 

BYCeD - Exit PASCAL-I* 

CChangeH - Change strings* 

COhTpileU - Compile program* 

COCntinueH - Continue execution of program* 

DECleteZI - Delete a block* 

DCownH - Hove edit pointer down* 

DUCitipD - Dump internal tables (debug command)* 

ECditH - Begin editting 3 specified block* 

ENCdD - Exit PASCAL-I* 

ERACseD - Erase a line of text* 

ERCrorsD - List compilation errors* 

EXCecuteH - Execute program* 

FCindD - Find strings* 

GCetU - Get a file* 

HCelpD - Print this list* 

HlCstoryU - Display recent trace history* 

IGCnoreH - Ignore breakpoints* 

ICnsertn - Insert a line* 

LIMCitD - Set execution limits* 

LCistD - List program* 

MCessageH - List selected error messages* 

MONCitorU - Display variable changes* 

MOtlvel! - Move lines of text* 

NCovetoD - Stop reouesting veto responses* 

OCverwriteU - Overwrite line of text* 

PMCdH - Post mortem dump* 

PCrintD - Print current line <3nd subseeuent lines)* 

RCepeatU - Repeat previous command* 

RESCtructD - Move a block* 

SACveH - Save program to a file* 

SCtatusH - Display current status* 

STRCuctureH - List program structure* 

TCopH - Set pointer to top of environment* 

TRCace3 - Set trace flag* 

UCpD - Move edit pointer up* 

vTetoD - Reouest veto responses on changes* 

$ - Execute PASCAL statements* 

? - Gives explanation of command errors* 



SAMPLE SESSION 



COMMAND-ecmy , Queens 

PROGRAM QUEENS (OUTPUT) J 
<* EIGHT QUEENS PROBLEM - PLACE EIGHT HOSTILE QUEENS 
ON A CHESS BOARD SUCH THAT NONE ATTACKS ANOTHER. 
THIS PROGRAM IS FOR DEMONSTRATION PURPOSES. 
IT CONTAINS BOTH SYNTAX AND LOGIC ERRORS. *> 
VAR BOARD 

:ARRAYCO. .7D0F INTEGERtCOLJARRAYCO. .730F 
BOOLEAN ? UP J ARRAYCO . . 14 HOF BOOLEAN ? DOWN : ARRAY 
C-7..+7D0F BOOLEAN?PROCEDURE PRIN [BOARD? VAR R 
: INTEGER? BEGIN FOR RJ=0 TO 7 DO WRITE <* #, 
B0ARDCR3:2) ? WRITELN? END(* PRINTBOARD *)? 
PROCEDURE GENERATE^: INTEGER) ?VAR C.MNTEGER? 
PROCEDURE SETSQUARE ( R , C : INTEGER ? VAL : BOOLEAN ) ? 
BEGIN COLCC3:=VAL»UPCR+C3:=UAL7DOWNrR-CD 
:=VALyEND<* SETSQUARE *)?BEGIN(* GENERATE *) 
FOR C:=0 TO 7 DO IF C0LCC3AND UPCR+C3AND 
D0WNCR-C3THEN BEGIN<* SQUARE FREE *>SETSQUARE 
<R,C* FALSE) 5 IF R=7 THEN(* BOARD FULL *) 
PRINTBOARD ELSE GENERATE ( Rf 1) ? SETSQUARE (Rr Cr 
TRUE)? END END(* GENERATE *) .PROCEDURE 
INITIALIZEJBEGIN FOR i:=0 TO 7 DO C0LCI3:= 
TRUE J FOR i:=0 TO 14 DO UPCID :=TRUE? FOR i: = 
-7 TO+7 DO DOWNCID:=TRUErEND<* INITIALIZE *) 
?BEGIN(* QUEENS * ) INITIALIZE.GENERATE (0) ? 
END(* QUEENS *). 

C0MMAND-P35C31 i , Queens 
- PASCALI (1.1.79) 

PROGRAM QUEENS CONTAINS 5 BLOCKS 
THE FOLLOWING BLOCKS CONTAIN ERRORS: 
QUEENS. INITIALIZE 



.list HI 
PROCEDURE INITIALIZE? 

* BEGIN 

FOR I := TO 7 DO 
'0 
COLCIII : = TRUE? 
'0'26 
FOR I := TO 14 DO 
'0 
UPC 1 2 := TRUE? 
'0'26 
FOR I := - 7 TO + 7 DO 
'0 
DOWN cm := TRUE? 
'0'26 
END (* INITIALIZE *)? 



EXPLANATIONS OF ERROR CODES J 

0: THE DESIGNATED IDENTIFIER HAS NOT BEEN 
DECLARED. 
26: THE TYPE OF AN INDEX EXPRESSION MUST BE 
IDENTICAL TO THE INDEX TYPE SPECIFIED IN 
THE ARRAY DECLARATION. 






:edit * d 



Ji vsr l* 



:edi Queens 



LiAt the input - m&>6y Jienditicn 
o£ the noto>viouA queen' i, prob- 
lem 



Invoke Paicol-l 



The. edit pointeA u> automat- 
ically &et to the. iin&t pio- 
tedan.e with emwnj> 



LUt the pnoczduxe giving fiuU 
VOiok meA&agzA 



m 






Totigot to declare i. - edit 
the declarations . . . and 
A.H&CAX the declaration. 



Recompile - system compiled 
minimum that aAi>vJieA corviiAtencV 

Let'* look at the whole tiling. 



2> 



'list 3 

PROGRAM QUEENS(OUTPUT)? 

(* EIGHT QUEENS PROBLEM - PLACE EIGHT HOSTILE QUEENS 

ON A CHESS BOARD SUCH THAT NONE ATTACKS ANOTHER. 

THIS PROGRAM IS FOR DEMONSTRATION PURPOSES. 

IT CONTAINS BOTH SYNTAX AND LOGIC ERRORS. *) 



. .. and tut all o$ it - nide.lv 
£onmatted too. 



VAR 

board: array co..73 of integer; 
col: array no.* 7: of boolean; 
up: array co.. 143 of boolean; 
down: array c- 7..+ 73 of boolean; 



procedure printboard; 



VAR 

r: integer; 



BEGIN 

for r := O TO 7 DO 

WRITE (* *, BOARDCR3: 

writeln; 
END <* printboard *>; 



procedure generate (r: integer); 
integer; 



VAR 

c: 



'exec 

5 BLOCKS RECOMPILED 

INTERPRETING QUEENS 



EXECUTED 24S95 STEPS IN 3120 STATEMENTS. 



halt at: * urite(* *» b0ardcr3: 2); 

in : queens . generate . printboard 

because of undefined value in expresion. 

user input file buffer - eoln: true; - eof: false 
user output buffer: 



Ok. Let'& tan it. RzMmlc- 
■tuxing makei evziything nn- 
compilz. It'i all in mzmoiy 
60 you gzt hat>t izipome. 



Who' 6 undzfiinzd? 

Let thz symbolic poi>t montum 

dump plint. 



3> 



PROCEDURE SETSQUARE (R, C: INTEGER; VAL: BOOLEAN); 



QUEENS. GENERATE. PRINTBOARD 

CALLED AT THE 7TH LINE OF THE BODY OF QUEENS. GENERATE 

I.E. » PRINTBOARD Hzie'i the tAacz.ba.ck. 



QUEENS. GENERATE 

CALLED AT THE 9TH LINE OF THE BODY OF QUEENS . GENERATE 

I.E. » GENERATE (R +1); 



BEGIN 

colccd := val; 
upcr + cd := val; 
downcr - C3 := val; 

END <* SETSQUARE *); 

BEGIN <* GENERATE *) 
FOR C := TO 7 DO 

IF C0LCC3 AND UPCR + C3 AND DOWNER 
BEGIN (* SQUARE FREE *) 
SETSQUARE(R, C, FALSE); 
IF R = 7 THEN <* BOARD FULL *) 

PRINTBOARD 
ELSE 

GENERATE (R +1); 
SETSQUARE(R, C, TRUE); 
END 
END <* GENERATE *) ; 

PROCEDURE INITIALIZE; 

VAR 

i: integer; 



Check out the fancy ityle ion. 
fioimatting comment*. 



QUEENS. GENERATE 

CALLED AT THE 9TH LINE OF THE BODY OF QUEENS . GENERATE 

I.E. » GENERATE (R +1); 

C = 1 

R = 6 

QUEENS. GENERATE 

CALLED AT THE 9TH LINE OF THE BODY OF QUEENS . GENERATE 
I.E. » GENERATE CR +1); 

C = 6 



QUEENS. GENERATE 

CALLED AT THE 9TH LINE OF THE BODY OF QUEENS. GENERATE 

I.E. » GENERATE (R +1); 



QUEENS. GENERATE 

CALLED AT THE 9TH LINE OF THE BODY OF QUEENS . GENERATE 

I.E. » GENERATE <R +1); 



m 



BEGIN 

for i ,'= to 7 do 

colci] := true; 
for i := to 14 do 

upc i 3 := true; 

FOR I := - 7 TO + 7 DO 

down ci 3 := true; 
end <* initialize *); 

*begin (* queens *) 
initialize; 
generate(o); 
end (* queens *). 

♦structure 

* 1 QUEENS 

2 PRINTBOARD 

2 GENERATE 

3 SETSQUARE 
2 INITIALIZE 

♦restruet printboard w Generate 

Jstr 

* 1 QUEENS 

2 GENERATE 

3 PRINTBOARD 
3 SETSQUARE 
2 INITIALIZE 



Thz a&tzil&k denotes thz zdlt 
pointzx. 



Give an ovzivizw o& thz pio- 
giam. Hzie thz aAtziiAk ihoi 
thz cuXltnt block. 



Only Gzneiatz call* Vntntboaxd 
to let'* makz it local. 



QUEENS. GENERATE 

CALLED AT THE 9TH LINE OF THE BODY OF QUEENS .GENERATE 

I.E. » GENERATE (R +1); 



QUEENS. GENERATE 

CALLED AT THE 9TH LINE OF THE BODY OF QUEENS. GENERATE 

I.E. » GENERATE (R +1); 



QUEENS. GENERATE 

CALLED AT THE 3RD LINE OF THE BODY OF QUEENS 

I.E. » GENERATE <0); 






:$writeln(r» c)r$ 



:*writeln(ho3rdC33) ;$ 



EXECUTION ERROR IN IMMEDIATE CODE. 

:history 

H» END (* SETSQUARE *)i 

LEAVING : QUEENS . GENERATE . SETSQUARE 
H» IF R = 7 THEN (* BOARD FULL *) 

H» PRINTBOARD 



1-6 "E" oi "C" undz&inzd? 
. . . nopz. 



What about thz BOARPD]? 1$ 
thl6 Lt> a solution, it ihould 
havz a value. . . . ah'. 
Lzt' i> doublzchzck what uxvi 
happening . 



3> 
CD 



CT> 



entering: queens. generate. printboard 

H» BEGIN 

H» FOR R != TO 7 DO 

H» WRITE <# *, BOARDCRD: 2) J 

tedit Generate 

:find /begin/ 

* BEGIN <* GENERATE *) 
OK?n 

BEGIN (* SQUARE FREE *> 
OK?y 

*i boardCcD J= rt 

tedit printbord 
WHAT? 

♦ ? 

NO SUCH BLOCK. 

tedit printboard 

Jbot 

•break 1 s 

{break 
BRKPNT 1 AT: 



END <* PRINTBOARD *)r 



J execute 

1 BLOCK RECOMPILED 

INTERPRETING QUEENS 



Ve6 - it think* it ha* an 
an*wex bat it doe* n't. 



We've got to put the. queen* on 
the bocuid ii we want them to 
print. 

Hexe. Thi* *hould do it. 



What did I do, mif>*pelZ it? 



Let'* *top it a&tex it print* 
iorre an*wex* - Set a breakpoint. 



- fiAjnht at the. end o& printboaxi 
Thi* should get a* thine, an*wex* 
Vo it. 



R» BOARD CCD t= Rr 

R» SETSQUARE(R, C, FALSE)? 

R» BEGIN 

r» col ecu := val? 

R» UPCR + CD := UAL , 

R» DOWNCR - CD := UAL? 

R» END <* SETSQUARE *>, 

R» IF R = 7 THEN (* BOARD FULL *> 

R» ELSE 

lim lOOOO s 

Jcont 

RESUMING QUEENS. GENERATE 



BREAKPOINT 1 AT: 
B» END <* PRINTBOARD *), 
IN : QUEENS . GENERATE . PRINTBOARD 

EXECUTED 3225 STEPS IN 412 STATEMENTS 



:* 

vsr i. integer? 
begin 

writln(r» o), 

for i := to 7 do 

writeln, 
end* 



ERROR (S) IN IMMEDIATE CODE: 



riteCboardCiDM) i 



<CR> get* the, next statement 
to execute. 



Enough o& thi*. 

Go on. 

Tin't thi* the. {ix*t *olutior.l 

Let'* look at that board again. 






VAR 

i: integer; 



i 



4 2 



5 7 2 

BREAKPOINT 1 AT: 
B» * END <* PRINTBOARD *)> 
IN: QUEENS. GENERATE. PRINTBOARD 

EXECUTED 39147 STEPS IN 49S2 STATEMENTS. 



•monitor board 

Jlimit lOt) s 

♦help status 

THE STATUS COMMAND IS USED TO REPORT THE 
CURRENT STATE OF THE USER SESSION. THE EDITING, 
BREAKPOINT, TRACING, AND LIMIT CONDITIONS ARE 
REPORTED. THERE ARE NO PARAMETERS ASSOCIATED 
WITH THIS COMMAND. 



Jsta 

EDITING BODY OF QUEENS. GENERATE. PRINTBOARD 



BRKPNT 1 AT: 



END <* PRINTBOARD *)J 



statement line limit: 100 
instruction limit: 100000 
output line limit: 1000 
veto = true 

monitoring: 

BOARD 
♦continue 
RESUMING QUEENS. GENERATE. PRINTBOARD 



BOARDCCD 

! := 5 

BOARDCCD 



M» 
M» 
M» 

M» ! := 3 

STATEMENT LIMIT AT: 
S» BEGIN (* SQUARE FREE *) 

IN.* QUEENS. GENERATE 

EXECUTED 791 STEPS IN 101 STATEMENTS. 



♦continue s 

RESUMING QUEENS, GENERATE 



Here'* the breakpoint. 

Heijl Shouldn't the*e iolution: 
look tike, they axe increasing 
in value.? 



Let'* che,ck oat what' & happen- 
ino to thz board. 



Moty where were we? 

Should I a*e the. *tata* comma, 



fair enough. 

Ok. let'* *taxt this, up again. 

What? 

Statement limit stopped a*. 

Cleax the. monitor*. 



Let' * look at it one statement 
at a time.. 



BEGIN 

WRITLNCRr Or 

'0'14 
FOR I := TO 7 DO 

writecboardcid: 4)5 

WRITELN, 

end; 

Jmes 14 

EXPLANATIONS OF ERROR CODES: 

O: THE DESIGNATED IDENTIFIER HAS NOT BEEN 
DECLARED. 
14: A SEMICOLON IS EXPECTED. 

* .c/writln/writeln/ 

WRITELN (R, C), 
1 CHANGE MADE 



Jedi generate 

Jnoveto 

If/boardC 



BOARDCCD := R, 



:o boardtrD 



!up 2 

:p4 



BOARDCCD *.= Rr 



IF COLCCD AND UPCR + CD AND DOWNCR 
BEGIN <* SQUARE FREE *) 
BOARDCRD := C, 
SETSQUARE(R, C, FALSE), 



What wa* that? 



Fix the typo. 
Ok. Try again. 



-o 

m 

to 
m 



LO 



I get it'. 



Stop verifying. 



Vat the queen on the row not 
the row on the queen'. 



Show the change in context. 



Let'* cet fiive iolution*. 



{execute 

1 BLOCK RECOMPILED 

INTERPRETING QUEENS 



Right on! 



BREAKPOINT 1 AT: 
B» END <* PRINTBOARD *>» 
IN : QUEENS . GENERATE . PRINTBOARD 

EXECUTED 57827 STEPS IN 7360 STATEMENTS. 



'bye 

WARNING - PROGRAM NOT SAVED. 

OK?n 



Thanki, fiox. KQjnindinQ me. 



issve aueensl 



For portability's sake HEAPTRACE is written in Pascal. It takes the form of a 
one-pass precompiler which produces as output the original Pascal program suitably 
modified for tracing the heap according to the user's instructions. The basis of the 
program is the Pascal -P3 compiler [1] with the code generation routines removed, and an 
additional 1500 lines of code inserted. Reasons for choosing this form of implementa- 
tion include 

(a) a precompiler needs lexical and syntax analysers, as well as data structures for 
symbol tables, etc. In order to speed up development time it seemed sensible to start 
with a thoroughly tested working program which had these features. 

(b) At a later stage, it will be relatively simple to implement HEAPTRACE as a compiler 
by re-inserting the code generation routines and producing the output in the form of 
P-code rather than Pascal. 

(c) A Pascal user may wish to implement this form of trace for the heap as an option 
to his or her own Pascal compiler. As HEAPTRACE consists of additions and modifications 



3> 



- END PASCALI 
COMMAND- 



(* Received 79/04/02 *) 



***************** 



TRACING THE HEAP 

*Steve Schach 

Applied Mathematics Department 

Weizmann Institute of Science 

Rehovot, Israel 



A programmer using a high-level language rightly expects to be shielded from 
machine implementation details. If there is a bug in a Pascal program, one does not 
wish to be presented with an assembler listing, or a core dump, but rather with infor- 
mation in a format as close as possible to the original source code. Watt and Findlay 
[3]have constructed a trace for the stack (i.e., the static Pascal data structures) 
whichgives the user diagnostic information in the terminology of his program. However, 
the dynamic data structures created by the procedure new , and stored on the heap, are 
not traced at all. 

The package HEAPTRACE outlined in this paper aids the user to debug his programs 
by providing information as to the contents of the records on the heap. Each field is 
named, and its value is given in what might be termed "high-level format". For 
example, the values of types defined by enumeration (including Boolean) are explicitly 
printed out as identifiers. The contents of sets are similarly handled. The first and 
last elements of arrays are given, or the first and last strings of packed arrays of 
char . 

The user may specify which record types are to be traced, and whether variants are 
to be ignored (if a tag field is not assigned). At any point he may request the entire 
heap to be dumped, or just the contents of the last n records. He may even specify a 
variable name, and if that variable is a pointer to a record being traced, then the 
values of the fields of that record are given. 



*0n leave from: Department of Computer Science, University of Cape Town, 

Rondebosch, 7700 South Africa. 
This work is supported in part by the South African Council for Scientific and 
Industrial Research. 



to a well-known and widely circulated compiler, the chances are good that such a 
person could rapidly understand the principles of HEAPTRACE merely by examining the 
clearly marked changes to the P3 compiler. 

HEAPTRACE works as follows: the command new is modified so that when the user 
wishes a record to be created on the heap, a second record, a so-called "hyperrecord", 
is also created. The hyperrecords form a doubly- 1 i nked list (the "hyperlist") and 
each hyperrecord is two-way linked to its associated user-created record. In this way 
one can ensure that the records to be traced are vertices of a connected graph, even 
if the user has somehow erred in his handling of pointers. Tracing the heap is then 
effected by moving along the hyperheap and dumping the contents of the records as 
selected by the user. 

An example of a variant record is given on pages kk-kS of the Pascal User Manual 
[2]. A program for that example was submitted to HEAPTRACE; the output of the result- 
ing program appears below. 

***«« HLAPTKACF CALlFO AT LP': 3" 

N D F a 1 TYPE-- F I : f: £ U 



r I RST 
LA^ T 



SS 
SF X 



nth 
d p p t r s 



: m Co-.. r 

; t <■ t. 

STRING : r 

: a p ^ 

5 T P I K G : a 

m s t e o r . ""* 

:ALf 

-. rcr-' o 
: a i',', 



l 



i \ c r p u . t 

NODFff ?TY^F 

NA"t 



Ttl'L 



F I K S T 
LAS) 






Vf A r 
FLPTFS 



: r r K a y 

s t 9 i v t : n I -. r L 

: / v ■< a y 

s t r i \ o : h c . r * 

t 2 1 2 S 9 J r- J 
v A L r 



-u 



Yt AR 

F I o S T V.. 



I 15 7/ 

" A L - r 



format", the underlying structure of each record is reflected in the indentation. 

HEAPTRACE is currently in the testing stage. It is hoped to make it available to 
any interested user as soon as its machine independence has been adequately 
demonstrated. 

REFERENCES 

[1] U. Ammann, "The Zurich Implementation", Proc. Symp . en Pascal - the language and 
its implementation, Southampton, 1977. 

[2] K. Jensen and N. Wirth, "Pascal User Manual and Report", Springer-Verlag , Berlin. 
1974. 

[3] D.A. Watt and W. Findlay, "A Pascal Diagnostics System", Proc. Symp. on Pascal - 
the language and its implementation, Southampton, 1977- 

(* Received 78/11/21 *) 
***************** 



WHY USE STRUCTURED FORMATTING? 



J. E. Crider 
Shell Oil Company 
P.O. Box 20329 
Houston, Texas 77025 



(This paper should be construed as a personal rather than an organiza- 
tional statement.) 

What is Structured Formatting? 

"Structured formatting" is a technique for formatting ("prettyprinting") 
Pascal programs. It is described in a paper in SIGPLAN Notices 1_3, No. 11 
(1978), pp. 15-22. It is designed to display clearly the Pascal statements 
and their structural relationships. 

Structured formatting is based upon a single indented display pattern, 
which is: 

introductory phrase 
dependent clause 
dependent clause 



dependent clause 

This pattern is used to display almost all of the structured statements 
of a Pascal program. Each dependent clause is typically a statement; if 
such a statement is itself structured, then it, too, is displayed in the 
above form. The resulting display clearly shows the nesting that is the 



Each dependent clause is typically a statement. If the introductory 
phrase of a structured statement ends in begin or of , then the last line 
of the pattern ends with end (possibly followed by a semicolon). For a 
repeat statement, the last dependent clause is the until clause. 

hallmark of structured programs. 

Each type of structured statement has its own form of introductory 
phrase. The complete list of introductory phrases for Pascal statements 
is: 

while expression do_ begin 

for control variable := for list do begin 

with record variable list do begin 

case expression of 

repeat 

if expression then begin 

else rf expression then begin 

else begin 

begin 

In order for structured statements to begin with these introductory 
phrases, certain Pascal statements in a program must first be modified. 
The display preparation modification involves the insertion of redundant 
begin-end pairs, as follows: every controlled statement in a while , for , 
with , or i£ statement is converted into a compound statement, with two 
optional exceptions. The first exception is that, if the controlled 
statement is a simple statement such that the complete structured state- 
ment can fit on one line, then it need not be converted. An example is: 

while a[i] <> x do i := i + 1 ; 

The other optional exception is that, if the controlled statement in 
the else clause of an rf statement is itself an if, statement, then it 
need not be converted. This exception leads to restatements displayed 
in a very useful form: 

if k = n then begin 

count := count + 1 ; 

r := r + d[k]; 

k := k - d[k] end 
else if k > then begin 

r := r + d[k]; 

k := k - d[k] end 
else begin 

r := r + 1 end; 

Thus it is seen that the rf_ statement may appear as a sequence of display 
patterns: one pattern for the "if" part, one for each "else-if" part, and 
one for the final "else" part. (Note also that the last two lines in the 
example above could be replaced by the single line "else r := r + 1;", 
according to the first exception.) 



3> 

CO 

c-> 

3> 



(JO 



en 
00 



The one structured statement that is not usually displayed through 
the display pattern is the compound statement. Instead, it is typically 
used with another structured statement to indicate the range of control 
of the latter. Generally, the only compound statements that are displayed 
through the display pattern are those that represent selection statements 
in a case statement and those that represent the statement part of a 
program, procedure, or function. Thus, begin is an introductory phrase 
only when it cannot be part of another introductory phrase. 

From a slightly different point of view, it is seen that the com- 
pound statement is always displayed in the same form. This form is: 

[introductory phrase prefix] begin 
statement; 
statement; 



statement end 

Note that begin and end symbols always appear on the ends of lines (followed 
only by semicolons and comments). 

It is worthwhile to force a single exception to this compound statement 
form. For the compound statement that is the statement part of a program, 
procedure, or function, the end symbol should appear by itself as the last 
dependent clause. This last end is treated specially to emphasize the end 
of the statement part; typically this end is followed on its line by the 
name of the program, procedure, or function in a comment. 

Another important element of the structured format is the indentation 
increment; it must be the same for eyery application of the display pattern 
throughout the program. This facilitates counting the level of nesting, 
which can be very useful, as seen below. 

What about Other Formatting Techniques? 

Structured formatting differs from other formatting techniques in 
several ways. These are: 

1. Other techniques generally combine at least two display patterns 
in various ways. The other display pattern commonly used has all lines 
indented except the first and the last. 

2. Other techniques generally allow for the vertical alignment of 
matching begin and end symbols. Structured formatting places begin and 
end symbols at the ends of lines, and provides other ways of confirming 
val id structures. 

3. Structured formatting may require program modification, as 
described above. Most other techniques can be applied directly to any 
Pascal program. 



4. Other techniques treat the compound statement as a structured 
statement. In contrast, structured formatting uses begin and end symbols 
as markers to confirm the range of control of other structured statements; 
this range of control is expressed primarily through indentation. 

What are the Advantages of Structured Formatting? 

1. The structured format clearly displays the structure of a Pascal 
program. The indentation shows the range of control and indicates the 
dependency of the controlled statements. The overhanging introductory 
phrase begins with a keyword that indicates the nature of control and also 
usually includes the controlling condition. 

2. The structured format is simple. It uses a single display pattern 
that has three distinct and well defined parts: an introductory phrase, 

a sequence of dependent clauses, and the indentation increment. 

3. Each line starts with the beginning of a new statement (or else 
or until clause). Each statement begins on a new line (exceptions: most 
compound statements, rf_ statements in "else-if" structures, and simple 
controlled statements). These two properties add to the clarity of the 
display by emphasizing the statement content, while the indentation pattern 
emphasizes the control relationships. 

4. The structured format is conservative of lines. There are 
few lines that contain only single symbols; in particular, begin and 
end symbols rarely appear alone on lines. Thus, the structured format 
brings the statements of a program structure close, so that their inter- 
relationships may be easily comprehended by the reader. 

5. The structured format is conservative of indentation. Each in- 
dentation increment corresponds to a change in the level of control of 
statements; the begin and end symbols of a compound statement are auxi- 
liary to this correspondence, and do not of themselves cause additional 
indentation increments. These last two advantages mean that space is 
conserved both horizontally and vertically, an important factor in the 
publication of programs. 

6. If a line contains end^ or until symbols, then the number of 
indentation increments that it has, relative to the following line, is 
equal to the total number of end and until symbols that it contains. 
This is the indented end relationship ; it is extremely useful in desk- 
checking the structure of Pascal programs. It is a localized relation- 
ship, applying to two adjacent lines at a time. (Note that treating 
the last end symbol of the statement part of a program, procedure, or 
function as the last dependent clause allows any preceding end 
symbols to participate in this relationship). 



2> 

CO 
O 

2> 



en 
m 

cn 



7. The begin and end symbols are always the last symbols of the 
lines on which they appear (excluding semicolons). Although matching 
pairs of these symbols are not vertically aligned, arcs connecting them 
can be drawn easily, if needed. 

8. The display preparation modification leads to the very small 
set of introductory phrases, and also to the valuable indented end 
relationship . Further, it inhibits the use of some of the more con- 
fusing structured statement sequences, such as "rf_ . . . then if . . . 
then . . . else . . .". 

9. The "else-if" exception to the display preparation modification 
provides for a valuable and commonly used control structure, and avoids 
the "stair-step" pattern that would otherwise appear. 

10. With the display preparation modification , the fundamental 
algorithm for managing indentation and display is quite simple: for 
each begin , of or repeat symbol, increment indentation and follow with 
a new line; put out a new line after each semicolon and before each 
else or until symbol, and also before the last end symbol of the 
statement part of a program, procedure, or function; and for each end or 
until symbol, decrement indentation for the lines following. 

11. The structured format allows every line to end with a semi- 
colon; the sole exception is the line preceding a line that begins with 
the else symbol. Further, semicolons need appear nowhere else but at 
the end of a line. 

12. Structured formatting can be applied to complete Pascal pro- 
grams, as well as to Pascal statements. At the top level, the display 
pattern gives: 



program heading 

label declaration part 
constant declaration part 
type declaration part 
variable declaration part 
procedure or function declaration 
procedure or function declaration 



procedure or function declaration 
statement part . 



The display pattern is then applied to each of the declaration parts. 
Thus, the introductory phrases for Pascal include the program heading, 
the procedure heading, the function heading, and the keywords label , 
const, type , and var , as well as the introductory phrases for statements 
(note that the introductory phrase for the statement part is begin ). 



13. Structured formatting can be applied to each procedure or 
function declaration as well, for each one has a structure quite similar 
to that of a program. Because procedure and function declarations can 
be nested, the number of indentation increments at a procedure heading 
or a function heading is equal to the static level of that procedure 

or function. 

14. Structured formatting can be used to advantage with structured 
programs in many other languages as well. In other languages, however, 
the indented end relationship may not obtain. 

What about an Example? 

This example is Program 3.7 from Niklaus Wirth's book, Algorithms 
+ Data Structures = Programs (Prentice-Hall, 1976). The comments have 
been changed and semicolons have been inserted before the last end 
symbols. Further, the display preparation modification has been made to 
the first for statement in the program (the controlled statement was not 
simple or compound) and to the for statement within the repeat statement 
(the controlled statement was too long). 






I— 1 



program selection (input, output); 

(* find optimal selection of objects under constraint *) 
const 

n = 10; 
type 

index = 1 . .n; 

object = record 

v, w: integer end; 
var 

i: index; 

a: array [index] of object; 

limw, totv, maxv: integer; 

wl, w2, w3: integer; 

s, opts: set of index; 

z: array [boolean] of char; 

procedure try (i: index; tw, av: integer); 
var 

avl : integer; 
begin (* try *) 

if tw + a[i].w <= limw then begin 

s := s + [i]; (* try inclusion of 

object i *) 
if i < n then try (i + 1, tw + a[i].w, av) 
else if av > maxv then begin 
maxv := av; 
opts := s end; 
s := s - [i] end; 
avl := av - a[i].v; (* try exclusion of 

object i *) 
if avl > maxv then begin 

if i < n then try (i + 1, tw, avl) 
else begin 
maxv := avl ; 
opts := s end end; 
end; (* try *) 



begin 

totv := 0; 

for i := 1 to n do begin 
with a[i] do begin 

read (w, v); 

totv := totv + v end 
read (wl, w2, w3); 
z[true] := '*'; 
z[false] := ■ '; 
write 



(* selection *) 



end; 



weight '); 
for i := 1 to n do write (a[i].w: 4); 
write! n; 

value '); 

1 to n do write (a[i].v: 4); 



wl; 
0; 



write (' 
for i 
write! n; 
repeat 

limw 

maxv 

s := []; 

opts := []; 

try (1, 0, totv); 

write (limw); 

for i := 1 to n do begin 

write (' ', z[i in opts]) end; 

write! n; 

wl := wl + w2 

until wl > w3; 
end (* selection *) 



(* Received 79/03/22 *) 



CD 

to 



CD 



Future of Pascal News - Savs ths PUG 

The University of Southampton 

Computer Studies 
Professor D W Barron 



30th January 1979. 



Dear Andy, 

Here are some thoughts on the future of PUG, prompted by 
your Open Letter in PN13. Perhaps I should start by stating my 
own position, which is this. PUG has succeeded beyond all reasonable 
expectation because it has been informal and unconventional. To 
institutionalise it is to administer the kiss of death. I have been 
happy to support PUG in its present form with my volunteer effort, 
but I want no part in an institutionalised PUG. The day the proposed 
constitution is adopted, someone else can take over the European 
printing and membership services. 

Reading various contributions to PN13, it is clear that there 
are two very different views of PUG. There are those who want PUG to 
be "pre-eminent with regard to Pascal", and to have some sort of 
authority over the language. Obviously, institutionalising PUG is 
attractive to this group. But there already exist organisations to 
deal with standards - ISO, ANSI and BSI. It is folly to believe that a 
self-appointed, institutionalised PUG can keep Pascal to itself. And has 
anyone thought about the logistics of obtaining a consensus from 3000 
members in 41 countries and 49 states? 

The alternative school of thought, to which I adhere, recognises 
that the enormous success of Pascal has been achieved not through the 
existence of PUG per se , but from the publication of Pascal Newsletter and 
Pascal News. It is the dissemination of the "vast quantities of 
information" that has done the trick. The value of Pascal News is 
incalculable, but institutionalising PUG won't make any difference to it, 
except by probably putting the price up and adding layers of unnecessary 
formality and bureaucracy to the production process. 

Pascal News is the most valuable thing we do - not so much the 
articles, which could perfectly well go into SIGPLAN Notices (or Software 
Practice and Experience), but the Implementation Notes and the miscellaneous 
information. We don't need a Constitution to keep on producing Pascal 
News, just an Editor and a sympathetic print-shop. If we can't maintain 
our informal but effective publication without a lot of (^expletive 
deleted*) formality, let's shut down the enterprise. We've nothing to 



Department of Mathematics, The University, Southampton, S09 5NH, 



continued 

Tel: 0703 559122 Exf "'00 Telex: 47661 



Open Forum for Members 



be ashamed of: we've done what many people thought was impossible. 
Your description of such an act was a quotation - "for one brief 
shining moment there was Camelot" . Let me close with another 
quotation (from that excellent European, James Joyce); ".. better 
pass boldly into that other world, in the full glory of some 
passion, than fade and wither dismally with age..." 



Yours sincerely, 
D.W. Barron. 



P.S. You should worry about passing 30. I just passed 44, but 
few people still trust me. 



=tfc 



******* 



March 12, 1979 

Mr. Andy Mickel 

Pascal User's Group 

University Computer Center: 227 EX 

208 S.Eo Union Street 

University of Minnesota 

Minneapolis, MN £5U£S 

Dear Andy: 

I have sent my ballot on to Rick Shaw, but I wanted to say that I can 
understand your position* toith each issue of Pascal News I have been 
amazed that you could have produced such a product. I know the time it 
takes to bring it all together. In a real way Pascal News is PUG „ I 
would urge you to pass the editor's job on to someone else very carefully. 
And while I agree you should try to keep the cost of PUG membership down, 
you are perhaps being unrealistic about the help needed to produce a 
quarterly publication for 3,000 members. 
Sincerely, 



m 

7X3 










Paul Brainerd 

1630 £>* 6th Street, D-l60$ 
Minneapolis, MN $$\&k 



Open Forum for Members 



19 March 19? Q 



Dear Andy, 



3> 
CO 



2918 Kevin Lane 
Houston, Texas 77043 
March 19, 1979 



Andy Mickel 

University Computer Center: 22T} EX 

208 SE Union Street 

University of Minnesota 

Minneapolis, Minnesota 55k55 

Dear Andy: 

I am writing this letter for several reasons. First. I have now 

received my copies of Pascal News #13 and #14. I wrote you earlier 

wondering what had happened to the Pascal News, because I had read ' 

the minutes of the first ANSI X3J9 meeting in which #14 was mentioned, 
at a time when I had not even received #13! 

Second, enclosed is a paper that I am herewith submitting to you 
for publication as an article in the Pascal News. Its purpose is 
to promote "structured formatting", a technique that I have found 
very useful in visualizing statement structures. The technique 
also has features that are important for the publication of programs 
Ut saves space, at one line per statement yet!). While it takes 
some getting used to, I hope that you and other Pascalers will erive 
it a try. & 

Third, enclosed is a copy of a letter that I am writing to Tony 
Addyman regarding his standardization efforts. The letter describes 
two additional changes to Pascal that I have found in the working 
draft published in Pascal News #1^. I hope that both changes can 
be removed. 

Fourth, I have a correction to Wirth»s EBNF of Pascal in Pascal 
News #12: additional Predeclared identifiers are FALSE and TRUE. 

Fifth, as a PUG member and a Pascal user, I want to tell you that 
I appreciate very much the incredible effort that you have put into 
PUG and the Pascal News. The Pascal News has become an impressive 
journal that is my major link with Pascal developments, and I am 
sure that it serves most other PUG members the same way. If Pascal 
helps the computing community to move on to better languages that 
supplant primitive languages like FORTRAN, it is largely through 
your work m promoting Pascal in these last few years. 



Sincerely yours, 




Here is that quote that I read to^you on the phone; I've 
translated it from the book "10 anos con mafalda", drawn 
by Quino: 

"This air of happiness, of tranquility that you have now, 
Quino; is it due to the fact that you've killed off Ma fa Ida? 

--I stopped doins: her a few months ago, and yes, I am mo^e 
comfortable. More free. It's been ten years of cartooning, 
and I was beginning to reoeat myself. It seemed to me mo^e 
honest, more healthy to stop doing her. 

--Have you ever regretted at any moment creating her? 

--No, not that. I did her with much enthusiasm. What haopened 
is that she came to be an oooressive personality, an obligation, 
and then it wasn't fun any longer; I was fed uo with it. 

— Nonetheless, you owe your pooularity to Mafalda. 

— Yes, (he admits), and that used to irritate me. 

--I must confess that it's hard to imagine you irritated. 

— Well, I had spent the previous twelve years doing humorous 
cartooning when Mafalda came out; it's not that I was a 
complete unknown (not like they stop me on the streets now 
either), but only when the comic started did I get the "boom". 
And actually, one could say that the whole world, more or 
less, knows who Mafalda is. 

A little bit earlier, on the street, we saw a Mafalda 
made of coloured wood displayed on the balcony of a store 
selling infants' goods, and Quino stopped for a moment and 
said, "Hey, look at her!" 

— Does the inveitable commercialisation of your characters 
bother you? 

--It disgusts me more than it bothers me. As you said, it's 
inevitable. The time comes when, if one doesn't have a 
license to make shirts or whatnot, someone will do it, and 
you'll have to orosecute and all that... thus, there's no sense 
in denying it. What irks me is the need that some oeonle have 
to buy a shirt or blouse with the character. It's a bit sad, 
because you notice that it's a matter of oure consumerism; that 
this year Mafalda can be in style and sell a mountain of blouses 
with her effigy, while the next year the style could change... 

— Has Mafalda made you rich? 

Quino smiles broadly, and, with an almost energetic negative: 

— No, no. Rich, for me, no. Perhaps, for the editors. For 
them surely. It's like every process: he who gains the least 
is he who creates. li 



I have enclosed a couple of cartoons from the book; you don't 
have to know Spanish to enjoy them. The man really is a genius. 
In case you're wondering, he's currently back doing editorial 
cartooning and, from a recent cartoon I saw, he has not lost his 
touch. 

As for the other topic we discussed (the constitution), I 
oroudly give you the following (with apologies to Eugene Ionesco, 
whose play The Bald Soprano I highly recommend; if for nothing 
other than the fable about the fox and the snake). 



CO 



GO 

m 



CD 



The Bald Organization 
(An Anti-Constitution) 

ARTICLES 1,11, and III 

_A, an, and the (respectively) 

ARTICLE IV - Name of the organization 

The name of this organization shall be "The Organization 
With No Name". This will enable us to, en masse, star in 
Spaghetti Westerns and acquire great masses of money. 

ARTICLE V - Purposes of the Organization 

To promote Pascal by keeping it in as tight a strait-.iacket 
as possible. 

To promote Pascal by adding extensions to it willy-nilly. 

(Choose one of the above depending on which side of the 
fence you're on.) 

To fight for Truth, Justice, and the American Way (you'll 
believe a program can fly! ) 

ARTICLE VI - Membership 

You pays your money, you takes your choice. Voting 
rights i one person, one vote. (In deference to historical 
tradition, Chicago members need not be alive at the time their 
votes are cast. ) 

ARTICLE VII - Officers 

The Organization With No Name will have the following 
officers: 

-The Chair 

-The Vice-Chair (a.k.a. the Social Director - in charge of vice) 

-The Secretary/Treasurer 

-The Editor of the "No News is Good News" no-name newsletter 

-The Sergeant-at-Arms 
Officers have terms as follows, and are elected by the 
means stated below: 

The Chair: elected by voice vote or Applause-O-Meter, 
in office until another election is held, or Chair is deposed 
or impeached. (Impeachable offense: actually doing something). 
The Chair's major duty is to be a figurehead. 

The Vice-Chair: elected by reputation. This person, being 
social director, must have impeccable taste in pizza and beer. 
Holds office until tired of throwing parties, deposed, or impeached. 
(Impeachable offense: ordering anchovies on the pizza) 

The Secretary/Treasurer: must be able to type at least 
50 words a minute, and be able to acid and subtract simple 
quantities without the aid of a hand calculator. Must have 
great legs and a decent figure (yes, this DOES go for male 
candidates as well: we don't want to be sexist and surely 
there are women out there who can judge men's figures). 
Holds office until tired, elected out, deposed, or impeached. 
{Impeachable offense: absconding with the funds — and getting 
caught at it. ) 

The Editor of the "No News is Good News" no-name newsletter: 
also must be able to type at least 50 words a minute, but 
nobody cares how good he/she/it looks. Must have a nodding 
acquaintance with the grammar of the English language; helpful 
if candidate does not cringe in terror when confronted by the 
wrong use of "its" vs. "it's" in a document. Holds office 
until elected out, deposed, impeached, or taken off to the 
Laughing Academy. (Impeachable offense: printing an issue 



without at least one article that can start a stream of nasty 
debates. ) 

The Sergeant-at-Arms: elected in trial by combat among; 
candidates. Must be able to bench press 100 kilograms; at 
least a brown belt in judo or karate is helpful. Major duties 
include keeping decormm at meetings (see below). Holds office 
until thrashed severly by up-and-coming candidates, deposed, 
or impeached. (Impeachable offense: are you kidding? YOU want 
to tell the Sergeant-at-Arms that he/she/it is out?) 

ARTICLE VIII - Meetings 

Meetings are called by the Vice-Chair (social director) 
and are held, if possible, in low-class dives late at night 
or early in th« morning. The Annual meeting is an exception, 
being held during the annual ACM conference; these usually 
take place in high-class dives. Elections are held during 
the Annual meeting; the secretary/treasurer wshould be 
prepared to pay for damages to the premises (see Sergeant-at- 
Arms, above). All copies of Robert's Rules of Order will 
be confiscated at the door for use 'when the meeting place 
runs out of toilet paper. 

ARTICLE IX - Dress Code 

Of course it's ridiculous to have a dress code, but with 
all the other mickey-mouse crap you usually find in a 
constitution don't you think one belongs here? Men: Black 
tie and sneakers (Adidas and Puma preferred, but deck shoes 
are permitted). Women: Plumed hat and high heels. 
Other clothing is optional (for both sexes). 

ARTICLE X - Amendments 

If you want to change the costitution, go ahead, 
but that puts you first in line for the Chair position. 

Bylaws 

ARTICLE I - Buy low, sell high. 

-0- 

No hard news in this letter; I'll send another in a few 
days with some of the stuff I heard at San Diego (if I find 
the time to write it before heading off to the gymnastics 
tournament this weekend.) By the way, congratulations to 
the University of Minnesota gymnastics team, who won Big 10 
a couole of weeks ago here in Michigan. (An addition error 
in scoring almost gave the title to Ohio State, but it was 
found and corrected. Ohio State was mightily unamused.) 

I leave you with the following ooem by the wondrous Dorothy 
Parker: 

Observation i\ 



If I don't drive around the park, 
I'm pretty sure to make my mark. 
If I'm in bed each night by ten, 
I may get back my looks again. 
If I abstain from fun and such, 
I'll probably amount to much; 
But I shall stay the way I am, 
Because I do not give a damn. 




3> 



3> 



CO 



CO 

m 






3> 
CD 



JDEisenberg 

1510 Plymouth Rd. 

A 2 , MI ^3105 



#59* 



i5n 



UNIVERSITY OF MINNESOTA 

TWIN CITIES 



| Social Science Research 

| Facilities Center 

I 25 Blegen Hall 

I 269 19th Avenue South 

| Minneapolis, Minnesota 55455 

1 612-373-5599 



79/05/01 



To: "Friends of PUG" 
Tony Addyman 
David Barron 
Judy Bishop 
Rich Cichelli 
Scott Jameson 
Bob Johnson 
Andy Mi eke 1 
Bill Price 
Arthur Sale 
Rick Shaw 
Barry Smith 
Rich Stevens 

From: Jim Miner ' ..~- ^ - 

Enclosed is a draft contribution to Pascal News #15. 

Because of the fundamental importance of the issue to the 
future of PUG, I am requesting that you return comments 
(of any kind) to me as soon as possible. 

The following address is simplest: 

Jim Miner 

SSRFC: 25 Blegen Hall 

University of Minnesota 

Minneapolis, MN 55455 

U.S.A. 

Thanks in advance'. 



Save the PUG! 



Pascal News is a "bulletin board" where nearly anyone can post or read messages. It is 
accessible to large numbers of people. It is inexpensive. It is simple. And many 
members of the Pascal community have told me that it is very important that Pascal News 
not die. 

PUG is the fastest-growing, and possibly the largest group of its kind in the world. Its 
membership (i.e., Pascal News subscribers) includes a very broad base of experience and 
interests. 

It is important that PUG has never taken an "official" stand on any important issue. But 
PUG has provided the means for coordinating the actions of individuals who have had 
lasting effects on the language and its implementations. For example, Tony Addyman is 
undoubtedly the major force behind the current international standardization effort for 
Pascal. But PUG itself has never done any work on the standard. Tony, along with other 
individuals, has taken the burden, and has reported on progress to the rest of .the 
community in Pascal News. 

Many individual members of PUG played an important role in the UCSD Workshop last summer. 
Rich Cichelli endangered his own pride and reputation to act as a conscience for the 
entire group. In spite of the unkind things that have been said about his viewpoints, his 
individual actions strongly influenced the results of the Workshop. Ken Bowles insisted 
that there should be an "official" PUG stand, but those of us attending knew all too well 
that we could not represent a group of 2000 people other than by reporting the results in 
Pascal News. We could, and did, act as individuals. 

All of this leads me to the most basic observation. PUG is NOT a policy-making body. For 
it to adopt "official" positions on anything requires either a consensus from its 3000+ 
members, or else a formal means for deciding that one viewpoint is "better" than another 
one. Any such formal decision mechanism is inherently political, and as such is subject 
to power struggles, costly overhead, and bureaucracy. In my view, there is no better way 
to destroy what we have. 

The Proposed Constitution 

Before going any farther I want to say that I respect Rich Cichelli as a person and as a 
member of the Pascal community. But I do not agree with his view of what PUG "should be". 

The Constitution and Bylaws proposed in Pascal News #13 would effectively allow PUG to try 
to legislate policy, in addition to its current status as a publisher. I think there 
would be several very specific harmful effects of this change. 

First, we can expect that the cost of Pascal News would probably increase substantially. 
The overhead involved in holding meetings, supporting the necessary bureaucracy, etc., 
must be paid somehow. As individual members, we can expect to do the paying. And we can 
expect that some subscribers will not continue at the higher rates. Also the true cost of 
participating would be prohibitively high for most members, especially those outside the 
United States. This is a simple case of economic discrimination. PUG policy would be 
determined by those who could afford to attend the yearly business meetings. 



oo 

3> 



=Jfc 
I— » 






There may still be a chance to save the PUG from extinction. 



What Is PUG? 



To anyone who cares to look, it is obvious that PUG is a mailing list used to distribute 
Pascal News to individuals around the world. PUG was really started by George Richmond at 
the University of Colorado when he decided to publish the Pascal Newsletter. Later, Andy 
Mickel at the University of Minnesota extended George's efforts and added the name PUG. 



Second, a political PUG may lose many of its members for non-economic reasons. David 
Barron has already stated that he will not continue to support European distribution under 
such a regime. Andy Mickel has told me personally that he would not even be a member. 
Another individual, a highly respected software engineer in the industry, has told me that 
he might not have the time necessary to participate in a political PUG, and further that 
his participation might constitute a conflict of interest with his job. Another person 
from industry offered his company's support for PUG, but only if it remains "informal" 
(read "apolitical") . I personally have no desire to spend the time and money to attend 
yearly meetings where I can expect the inevitable power plays designed to capitalize on 
the influence of PUG in the industry and consumer market. 



Third, the creation of PUG policy will very likely cause factions of the community to 
break off in order to form their own biased organizations and publications to counter what 
they perceive as the biases in PUG. Certainly if PUG tries to claim that it "represents" 
its members with a position on an issue, either some members will be left out or else only 
those who agree with the position will stay in PUG. Either way, somebody loses. 

One other thought occurs: if the proposed constitution did not actually destroy PUG, it 
might have the opposite effect — to make PUG outlive its usefulness, and to promote 
Pascal long after better languages have overtaken it. How ironic this would be, and how 
sad! 



Where Now, PUG? 




KITT PEAK NATIONAL OBSERVATORY 

Operated by The 

ASSOCIATION OF UNIVERSITIES FOR RESEARCH IN ASTRONOMY, INC. 

Under Contract With The 

National Science Foundation 









Member Institutions: 

UNIVERSITY OF ARIZONA 
CALIFORNIA INSTITUTE OF TECHNOLOGY 
UNIVERSITY OF CALIFORNIA 
UNIVERSITY OF CHICAGO 
HARVARD UNIVERSITY 
INDIANA UNIVERSITY- 
UNIVERSITY OF MICHIGAN 
OHIO STATE UNIVERSITY 
PRINCETON UNIVERSITY- 
UNIVERSITY OF TEXAS AT AUSTIN 
UNIVERSITY OF WISCONSIN 
YALE UNIVERSITY- 
UNIVERSITY OF HAWAII 



Saturday, May 12 



950 North Cherry Avenue 


2i_ 


P. 0. Box 26732 


CO 


Tucson, Arizona 85726 


=& 


AC 602 327-5511 


1— ' 


Cable Address: 


Ul 


AURACORP, Tucson 





Well, the votes are in, and as detailed elsewhere, the results are fairly certain: 



For 

Against 

Abstain 



2 % 

1 % 

97 % 



The meaning of this is not obvious, but we can make some guesses. As one person said to 
Andy Mickel, "I didn't vote because I didn't think you were serious." He probably spoke 
for a large number of members. 

But rather than try to second-guess 2900+ people, let's consider constructive alternatives 
to the Constitution. What is it that we really need? 

First, as Bill Price explained to me, any publication has two functional components: a 
publisher, and an editor (and staff). Currently Andy Mickel (with help from friends and 
the University of Minnesota) is providing both services. With the growth of PUG and the 
explosion of Pascal it is no longer feasible for these volunteers to do both tasks. 

What we need to create (or find) is a publisher whose only purpose is to provide the 
support functions necessary to providing Pascal News. It should assure editorial autonomy 
and the availability of Pascal News as an open forum for members of the Pascal community. 
It must obtain funds from memberships, subscriptions, grants, etc. 

Based on discussions with a number of other PUG members, I think our best chance lies in 
creating a non-profit institution whose one and only goal is the publication of an 
autonomous and open Pascal News. 

We also need an editor. 

The success of this scheme will depend on support from individuals and (at least in the 
short term) from corporations. It is notable that a number of companies have already 
offered monetary or other support. 

Save the PUG 



Dear Jim, 

Many thanks for your draft contribution to Pascal News #15. 
I too was very against the constitution when it first came 
out in the News. That is not what I joined Pascal News for 
and I dislike the political implications of a constitution. 

I agree with your proposals for the News (full time publisher, 
etc.). I think that the goals of the Pascal News have changed 
considerably since its inception mainly since Pascal has now 
become an accepted language, something that was not at all obvious 
at the outset I I personally feel that the size of the News should 
shorten. The main goals should be to keep up with new Pascal 
literature (mainly books, as there are just too many journal 
articles, etc on Pascal now a days to keep track of) and to keep 
up with implementations on different computers so that one has a 
quick acess to an implementation for his machine. Articles on 
Pascal should still be published but I feel that perhaps a lot of the 
personal correspondence should be trimmed down. I myself would 
rather see a more frequent publication (say 6 times a year) with 
a smaller size that the huge size that it now is. 



Well, there are my feelings, 
luck. 



for whatever they're worth. Best of 



Sincerely, 



Rich Stevens 



Pascal is growing like never before. This growth will continue. Pascal News is needed to 
unite the Pascal community, to aid its communication, and to prevent a vacuum which 
special interests will inevitably fill. 

Arthur Sale remarked in these pages in 1977 that "Pascal has much more to fear from its 
friends than its enemies." These words might just as well have been spoken about PUG. 



3> 
en 



The University of Tasmania 

Postal Address: Box 252C, G.P.O., Hobart, Tasmania, Australia 7001 
Telephone: 23 0561. Cables 'Tasuni' Telex: 58150 UNTAS 

18th May, 1979 




3> 
CO 



vanan 



This letter is in reply to yours of 1st May to "Friends of PUG". 

I agree with your sentiments, expressed in your draft. I have only two points to 
make: 

(a) Policization of PUG on a US-basis as proposed would effectively eliminate 
international co-operation by ignoring it. I think the non-US PUG members 
deserve a few moments thought. 

(b) A non-profit corporation seems a good idea, so long as it is possible 
to wind it up when we want to . I completely agree with the bad effects 
of PUG surviving beyond its legitimate life-span, and I said so to 
Andy while he was here. 

More power to your pen; go ahead. 




Arthur Sale, 

Information Science Department . 



******* 



A Note on the future of PUG 



I wholeheartedly support Jim Miner's proposal 
to create a non-profit institution to publish Pascal News. 
When Andy changed the name from "PUG Newsletter" to 
"Pascal News" he recognised implicitly that the only real 
function of PUG is to publish "Pascal News". If such 
a body is to be set up I shall be happy to help in any way 
I can. 

(Incidentally, I had already had a similar idea 
as a contingency against the vote going in favour of a 
"Political PUG". My scheme was to pre-empt the issue by 
separating Pascal News from PUG, creating a new company 
to publish the former, leaving the latter to indulge in 
pointless politics). 



May 11, 1979 



Mr. Andy Mickel 

Pascal User's Group 

University Computer Center: 227 EX 

208 SE Union Street 

University of Minnesota 

Minneapolis, MN 55455 

Dear Andy: 

Attached is an all-purpose coupon with my new mailing address and phone number. 

It was nice talking to you last week. I called Rick Shaw and volunteered my 
services. He said he would call as soon as he has finished his move. Between 
Rick's and a couple of local PUG members' comments, I think the vote results 
were a combination of confusion and simply not noticing the ballot. In any event, 
I am left with the impression that PUG will continue as currently organized with 
Rick et al. taking over most of your tasks. In light of the current situation I 
believe a distributed work approach will provide a workable, though not optimal, 
solution to PUG's immediate needs. 

I still feel Pascal News provides a useful source of information and will vehemently 
oppose any movements which advocate dissolution, or radical change from the 
current editorial policies. I hope my conviction to PUG is substantiated by my 
volunteering to help with the production of Pascal News . 

The group PASCAL (see attached) is a local interest group and wants to stay 
strictly local. The article in Intelligent Machines Journal is a bit misleading. 

I look forward to working with Rick and you in the near future. 



CO 
CO 



Sincerely, 

Gregg E. Marshall 
Scientific Programmer 
Software Development 

GEM:bb 



*** (* See Pascal in the News in the Here and There 
section. The Pascal Advancement Society of 
CALifornia (PASCAL) was also publicized in the 
May, 1978 Byte . - Andy *) 



David Barron 



cc : Rick Shaw 
Enclosures 



instrument division / aerograph operations 
2700 mitchell dr./ walnut creek /calif. 94598/415 939-2400 



TRW 



30 May 1979 
Dear Andy: 

This letter is about two somewhat unrelated topics. 

The Fate of PUG 

First, in regard to the debate over the future course of PUG, I think we 
should use PUG's existing structure (if there is one) for a model, and not stray too 
far from that. You and the other editors are doing a fantastic job in creating a 
refreshing, unique and immensely useful publication for the serious Pascal programmer. 
At this point I don't care much if we have a constitution or not. What I do care 
about is that PUG be kept alive, independent, and international. PUG has not outlived 
its usefulness. Its value continues to increase with the increasing worldwide usage 
of Pascal . I sympathize with your desire to get out from under the tremendous burden 
of having to crank out issue after issue of Pascal News. But please don't under- 
estimate the beneficial effect you are having on the Pascal community and the computing 
field in general. Please help us find a viable way to keep PUG and Pascal News going. 

Software Tools and Algorithms 

One of the most compelling arguments for keeping PUG alive is the Applications 
section of PN. There have already been some really good programs published, and they 
are available to anyone for the cheap price of typing them on one's own computer. I 
am enthusiastic about the Applications section, and I liked many of the ideas Rich 
Cichelli presented in his "Software Tools" article in PN 13. I agree with Rich that 
distribution of tools is one of the most difficult problems. Even in a restricted 
machine environment (such as the DECUS Pascal SIG) distribution can be a real hassle. 

In his article, Rich mentions two utility programs, UPDATE and PLAP, for library 
maintenance and documentation respectively. I would like to propose alternatives to 
these. Many CDC users are familiar with MODIFY, which I believe is easier to use than 
UPDATE. We have a Pascal version of MODIFY, written by Dennis Heimbigner, which uses 
only sequential i/o. For documentation, RUNOFF (familiar to DEC users) is a very nice 
tool. Michelle Feraud has written a RUNOFF subset in Pascal, which has most of RUNOFF'S 
features. It does not do hyphenation, but I generally turn off hypenation even when 
it's available on other such tools. I believe there is also a much more sophisticated 
Pascal version of RUNOFF, but I have not used it. We will try to make these and other 
Pascal software tools available to PUG as we have time to implement them in standard 
Pascal . 

I am also very interested in the other utilities Rich mentions in his article, 
particularly algorithms and the Pascal validation suite. We have used Jim Miner's 
COMPARE and like it very much. 

Thanks once again, Andy for all the hard work you have put into publishing 
Pascal News. 



General 



(702) 623 2345 



THOMAS C.KING 



0//< 



'Uftiffflftiy 



Professional Bldg. #8 
P. 0. Box 1146 
Winnemucca, Nevada 89445 



Mr. Andy Mickel, Univ. Minn. Comp . Center 
227 Exp. Engr. Univ. of Minnesota 
Minneapolis, Mn 55455 



Dear Andy, 



Thank you for the most encouraging telephone conversation. 
As I told you I purchased an Alpha Micro AM100 - AM500 system from the 
Byte Shop of Reno, 64K core memory, Control Data 10 megabyte hard disc 
IBM Selecterm printer and Soroc terminal to use in my own business. 

When I mentioned the computer around town I immediately 
was faced with inquiries from the Ford dealership, the attorney in 
the next office, a mining company, and a large ranch, all in the same 
building, for time sharing on the computer for their individual 
problems. The prospect of altering canned basic bookkeeping programs 
for this diverse group was appalling, considering my novice status. 



fo 

After a 
encouraging commen 
handle the individ 
since some limited 
own programs once 
programming approa 
programs on X-Ray 
for comments my fi 
left me in a state 
as conditions requ 
to Pascal the pro 
Pascal is thus a 1 



two week study of Pasca 
ts the possibility of pr 
ual needs of this diver 

experience by each may 
they have some experienc 
ch follows my work with 
matrix effects. Since th 
rst programs were sprink 

of confusion trying to 
ired. Switching to the s 
rams were easy to unders 
ogical extension much mo 



1, however, and your most 
ogramming the computer to 
se group may be possible, 
enable them to alter their 

This Pascal or structured 
a HP97 in involved 500 step 
e HP97 doesn't allow room 
led with GOTO's which later 
debug them or alter them 
tructured format similar 
tand and debug later, 
re comprehensive than basic. 



Enclosed is a check for $16.00 covering a one year sub- 
scription of the Pascal Newsletter and 3 back issues. 

Sincerely, 



-o 

3=» 



3> 



Thomas 



King 



Best regards, 



Bill Heidebrecht 

TRW DSSG 

One Space Park 

Redondo Beach, CA 90278 



1510 Plymouth Rd. #59 
Ann Arbor, MI ^«105 
2 November 1Q?S 



Dear Andy, 



Thanks very much? I now have all the back issues. (I accident- 
ally got two copies of #11 and #12, and am sending one of 
each back to you.) 

As anyone who has been a member of PUG for over a year knows, 
a lot of verbiage about extending Pascal in one form or another 
has appeared in the PUGN pages. New members, though, may be 
wondering "What is all this bickering about?". Well, I've been 
doing some thinking about this, and would like to present a 
(perhaps overly simplistic) view of all this confusion. (If 
the reasons are really obvious to everyone, then I guess 
I'm just slow catching on.) 

There appears to be one group of people who wish to repair the 
minor inconsistencies in the definition of Pascal (User Manual 
and. Report j Axiomatic Definitinn). The best example of this 
group's views is in the article by Welsh, Sneeringer, and Hoare 
[1] . I don't think anyone really has any argument about the 
things they point out; if they are fixed or not, the essential 
"character" of Pascal remains the same. 

The three major groups (as I see it) who are arguing about 
Pascal extensions arei 

Group A: Educators using Pascal to teach computer 
science students about programming and computing 

Group B* "Working stiffs" (usually non-educational 
environment) who wish to use Pascal in their day- 
to-day endeavours. 

Group C i Educators using Pascal to teach people 
in a non-computer science discipline about 
programming and computing as a tool for that 
discipline. 

Arguments about extensions usually go like this* 



B: 



I think Pascal should have feature X. I can demonstrate 
its immense utility for the work I am doing in discipline 



A± Feature X is not needed. It is merely a combination of 
Y,Z f and W, which are already part of Pascal. Computer 
science students need to know about Y,Z, and W anywayi 
therefore they should use them instead of X. 



2 Nov. 19?R / o. 2 

Cj_ I am teaching my students to use Pascal for solving 
problems in discipline Q. I would prefer to have X 
available so that my students need not worry about 
Y, Z, and W — after all, I'm teaching Q, not 
computer science. But Pascal still has to be easy 
enough so my students can appreciate the value of 
computing (and Pascal) in relation to Q. 

And the damn shame is that they are all making absolutely 
correct statements. The computer scientist SHOULD learn 
how to combine elementary features of Pascal to make 
complex functions. The educator (outside computer science) 
doesn't want his students to worry about those details; 
that's not their province. The "applications" (non-educators) 
either have been through Corn-outer Science and know about 
the elementary features, or have had the "canned" features 
available — in any case, their goal is not to learn about com- 
puting but to get some task done. 

All of this seems to come down to the question of the design 
goals of Pascal. Vavra [21 also realizes, and points out the 
existence of these different groups and their differing goals. 
I agree wholeheartedly that some heavy thinking has to occur 
in this area. At any rate, for those of you who might have 
been confused about all this argument about "Whither Pascal?", 
you now have another viewpoint to (hopefully) make things 
clearer. End of Sermon. 

Just a random thought — and this idea is one I've heard 
before; certainly not original with me. Credit to whomever 
came up with it. Those who wish to implement some new 
control structure in Pascal which is a combination of existing 
elementary functions should provide a standard Pascal program 
that translate programs using the extension into the standard 
version. For features which can be implemented equally 
well as calls to user-defined procedures, some body of 
people should start collecting those procedures so that 
everyone can use the same ones and portability won't go down 
the tubes. (This includes things like the IMSL library, 
data base manipulation, formatted I/O, et al.) I am sure 
this has all been said before; someone out these please jog 
my memory and tell me where I've seen it. Take this entire 
paragraph for what it's worth, and call me in the morning. 

It's getting late again, and I'm beginning to flake out. 
I'd best quit while I'm ahead. 

John Eisenberg 

REFERENCES (they always make ideas seem so official...) 

1. Welsh, Sneeringer, and Hoare, "Ambiguities and Insecurities 
in Pascal", Software — Practice and Experience . Vol. 7 
(1977), 685-696' 

2. Vavra, R, "What are Pascal's Design Goals", Pascal News 
No. 12 (June 1978), pp. 3^-35 ' 



CO 

3> 



m 
m 






■^1 
CO 




ORGANISATION EUROPEENNE POUR LA RECHERCHE NUCLEAIRE 
EUROPEAN ORGANIZATION FOR NUCLEAR RESEARCH 

SIEGE: GENEVE, SUISSE 



R. Cailliau PS Division 
CERN 

CH 1211 GENEVE 23 
SUISSE/SWITZERLAND 



TELEX: 23698 CH 

TELEGRAMMES: CERNLAB-GENEVE 

TELEPHONE: GENEVE (022) 

Direct: 83 5041 /83 2535 /83 

Central/Exchange: 83 61 11 



PASCAL News 

c/o Andy Mickel 

University Computing Center/227EX 

208 SE Union Street 

University of Minnesota 

Minneapolis, MN 55455 
U.S.A. 

Votre/Your ref. Notre/Our ref. 

PS/CCl/RC/ww 



Geneva, 16th October, 1978 



Dear Andy, 

Here are a few comments on things I read in the latest Pascal News: 
1. Mr. Terje Noodt's letter on the user interface and environment interface 
of Pascal is indeed to the point. The manipulation of sequential files is 
elegantly supported by the procedures READ, WRITE, RESET, REWRITE, GET, PUT 
and the functions EOF and EOLN. There is, however, no way of setting up a 
relationship between a file variable FV and an externally existing file EEF. 
The only way of indicating that such a relationship is supposed to exist is 
to put the name FV in the list of program parameters. This means a) a Pascal 
program is not a stand-alone unit but nothing more than a "procedure", called 
by the external world (see P4-implementation for example) , b) the externally 
existing files are passed as VAR-parameters to the program (although the re- 
served word VAR is not used in the program header) , and the program is not 
able to change the relationships. 

This approach may work well for the classical student program that is 
submitted in a batch environment, reads from one file (INPUT!) and writes 
output to one other file (OUTPUT!) both of which exist only as long as the 
job lasts. Problems arise immediately when one wants to write a useful, inter- 
active program. These programs have the following characteristics: 

- they obtain information from the user, and must try to 
recover from his typing errors, .> * 

the relationships between internal file variables 

and externally existing files cannot be set up at 

load time, since they are obtained from the user 

at run time. 
As Pascal programs always execute under supervision of an operating system, 
externally existing files will have to be supported (in most cases) by that 
operating system or by its associated file system. This implies that 
setting up the above mentioned relationships must be done according to the 
ideosyncrasies of the underlying system. 

In principle, just two procedures suffice to do the job: 

CONNECT relates an FV with an EEF, 
DETACH (FV) ends the connection. 



The problem is in the parameters of CONNECT: one of them clearly is 
the FV. The rest must specify an EEF in a system dependent manner, and 
to be useful probably some extra information and system return codes. 

I have received a preliminary copy of the manual for Mr. Noodt's 
implementation on the Sintran-III system for the N0RD-10 computer, and 
he did a very good job on the system interface. He was able to provide 
a CONNECT procedure with only 3 parameters: the FV, a string specifying 
the name of the EEF, and an integer returning system provided file status. 
It must be added that Sintran-III is a very user-friendly system, in which 
files (including peripheral devices) are specified by a string with an 
internal syntax. (Buffering, blocking, file control blocks, etc. are pro- 
vided by the system and transparent to the user by default.) 

2. Several problems remain with Pascal I/O. Again, in interactive use 
(and as Mr. Noodt pointed out) any call of the kind 

READ (F, I) (^integer I*) 
will crash the program if I is not given a string convertible to an integer. 
And again, fortunately the Sintran-III system lets a program find out whether 
or not it was called interactively, so that the following loop can be built 
into the run-time support system: 

0K:=FALSE; 
REPEAT 

READ(F,I); 

IF interactive AND error THEN BEGIN 

WRITELN ; WRITE ( f NOT AN INTEGER VALUE') 
END; 
ELSE IF error THEN abort 
ELSE 0K:=TRUE; 
UNTIL OK; 

Further, Pascal adopts the philosophy that all variables must be initialized 
before their contents can be used. Although this is not a requirement, some 
systems go to great lengths to abort programs that access undefined values. 
This philosophy is in fact very good. But why are file buffers initialized 
automatically ? This exception of the rule of explicit initialisation leads 
to problems with character files connected to terminal inputs, as everyone 
knows. Why not insist on an explicit first GET ? 

Finally, (and again for interfactive input mainly) why do READ and 
WRITE work in the way they do ? For batch jobs, the equivalence 

READ(F,CH) <==> CH:=F+; GET(F) 

is acceptable, because you never notice anyway. Try to explain this to 
someone writing an interactive program ! I have now resigned to the simple 
recommendation: use GET, and do everything character by character yourself. 
It suffices to look at how the P4 compiler reads characters to be convinced 
that READ(F,CH) should be equivalent to GET(F) ; CH:=F+ (just notice how 
the EOLN is delayed !) 

3. The problem of the controlled variable in the FOR statement: 
Mr. John Nagle (Pascal News No. 12) writes that it should be truly 
undefined outside the FOR and proposes as a solution that it be considered 
as a variable declared local to the FOR. To this I can only remark : 

a) many programmers, including myself, would in fact be happy with a 
truly defined value. There are many arguments for either case. 

b) a language called ALGOL68 does exactly what Mr. Nagle proposes 

10 years after its definition. In fact, many Pascalers, especially 
those who write in Pascal News, Sigplan Notices and other respectable 
periodicals as if they have discovered the Only True Religion, 
would in fact do well to look up the Algol68 report 1 ). Nearly all 
the "problems" with Pascal that are so frequently discussed in these 






3> 
en 
m 



columns have a decent solution in Algol68. 
seems a taboo subject. 



Yet somehow that language 



4. Mr. Nagle further addresses the problem of the GOTO. I have written 
a 3000 line program in Pascal without a single GOTO. However, the abolish- 
ment of the GOTO would mean programming with flags. It becomes then nearly 
impossible to program an efficient and understandable sequential machine 
(another taboo subject ?). How do we get out of inner loops that must 
be fast and therefore should not test flags ? Or is efficiency completely 
gone from our list of desirable program properties ? 

Consider Knuth's article on programming with GOTOS 2 ) . Consider also 
the following program: 



type T= record 
var head, p, newt: 
begin 



next : 
found: Boo lean; 



p:=head; found : =FALSE ; 

while ( not found) and (po nil ) do 

jl| p+=newt+ then found :=TRUE 
else p:=p+.next; 

if found then this else theother; 



The search can be written : 

1: if_ po nil then 

if p+=newt+ then begin this;goto2 end 

else begin p:=p+.next ;gotol end ; 
theother; 
2: 

The last version is even easier to explain. I am not advocating writing 
this particular example in the way I did. What I would much prefer to 
write is": 



if p=nil then theother; exit endif ; 
if pt=newt+ then this; exit 
else p:=pt.next 
endif 
endloop 

But alas that is another programming language 3 ) . The removal of the GOTO is 
only practical when some new structures are added at the same time. 

Since Von Neumann computer architecture is probably here for several more 
decades, we will continue to have machines on which it is much faster and more 
economical to program jumps than to program any other operation. IF-THEN-ELSE 
and the other control structures are nothing but elegant ways to safely write 
common combinations of jumps. Every practical program contains also combina- 
tions that can only be built efficiently by explicit jumps, i.e. GOTO's. 

At CERN we have a continuous flow of students from the member states 
that spend some time here as apprentices. Those educated in Pascal come here 
with mental blocks against GOTO's, and overload their programs with flags of 
all colours. The flags create a software maintenance problem no less formidable 
than locallv used GOTO's. 

A flag has to be declared (like a label), it must be set initially 
(the label planted) and it must be correctly used (the GOTO's written). 
Where is the improvement ? Witness the many different uses of the global 
flag TEST in the <P> compiler. 



As an aside, a lot of "flag-waving" or "GOTO-ing" is caused by the 
absence from Pascal of the conditional AND and OR operators. Since the 
Report does not solve the question of how 

A and B 

is evaluated, another heated discussion ensues: when A is FALSE, do we still 
want to evaluate B??Dijkstra' s answer is: yes, because if we do not want to 
evaluate B, we write 

A cand B 

indicating clearly that B is only evaluated on the condition that A is TRUE. 
The example program reduces to : 

while (po nil ) cand (pt<>new+) do p:=pt.next; 
if p=nil then theother else this; 

This still tests (p=nil) more than necessary, but at least the loop is fast. 
(Incidentally, can anybody provide me with a sound explanation of why the 
parentheses in the while expression are necessary ?) 

Finally, if the GOTO must go, then why not also pointers ? They are 
far more dangerous .' 

5. Bugs in the portable P4 compiler: 

a) the bug of the non-closed comment at the end of a program which 
produces an infinite loop printing the message 

**** EOF ENCOUNTERED 

can also be fixed in a more economical way by testing at the printing 
of the message that this printing occurs only once. That requires 
the inclusion of a STOP procedure or the setting of a flag (to be 
tested after the comment loop) . Remembering that the compiler spends 
80% of its time in the lexical scanner, that seems to pay. 

b) the sentence at the bottom of page 8 in the Implementation Notes: 

"Also, storage allocation of data is according to the simple 
rule that consecutively declared entities are allocated 
the requisite number of consecutive storage units" 

is quite ambiguous. It is certainly not true that the declaration 

var I, J, K: integer; 

leads to allocation of I,J,K in that order: the allocated order is 
K,J,I ! This is the case in several places, e.g. fields in records. 



type Tl =record I: integer; J: integer end ; 
T2 =record K,L: integer end ; 

should declare two compatible types, but after 
var X:T1; Y:T2; 



-O 






begin 

Y:=X; 

Y.L has the value of X.I ! Inspection of the compiler reveals where 
the lists I,J,K... are built, and it is sufficient to put in a line 
or two that turns them around. 

References 

Revised Report on the Algorithmic Language Algol68 
A. Van Wyngaarden et al , 
Sigplan Notices, vol. 12, No. 5, May 1977 



-a 

3> 
CD 

m 
oo 

CD 



2) 



Structured Programming with GOTO statements 
D.E. Knuth, 
Computer Surveys, vol. 6, No. 4, December 1974, pp. 261-301 

Modula, a language for modular multiprogramming 
N. Wirth, 
Software-Practice and Experience, vol. 7, No. 1, Jan/Febr. 1977 



ICL 



Yours sincerely, 



Robert Cailliau 
PS Division 



Bibliography 

Ignorance of Algol69 considered harmful 
R. Hamlet, 
Sigplan Notices Vol. 12, No. 4, April 1977 

- Can programming be liberated from the Von Neumann Style ? 
AC Turing Award Lecture 1977, 
J. Backus 
Communications of the ACM, Vol. 21, No. 8, August 1978 

***** 



Peopled Computer Company 

P. O. Box E, 1263 El Camino Real, Menlo Park, California 94025, Telephone (415) 323-3111 

October 22, 1978 
Dear Mr. Mickel, 



PASCAL NEWS readers may be interested to know of two special events 
related to the use of PASCAL in music applications . 

There will be a lecture / demonstration on "PASCAL and Music" at 

the 1978 Fall DECUS Symposium (a meeting of users of Digital Equipment 

Corporation's computers) in San Francisco, in late November. 

In addition, COMPUTER MUSIC JOURNAL will be running an article 
on the PASCAL language, with music applications, and a survey of 
the available PASCAL compilers. This article should appear in early 
January . 

I'm looking forward to the next issue of PASCAL NEWS. 
Best regards, 

CPU 

C. Roads 

Editor 

COMPUTER MUSIC JOURNAL 



ICL Belgium 

Avenue I icy) Gt 
1050 - Brussels 



MEMO 



LOG/sm i gi e>t 

Laurent O. Gelinier 
ICL Belgium S.A. 
Avenue Lloyd George 7 
B-1050 BRUSSELS 
Belgium 



International 

Computers 

Limited 

7/11/1978 Vour ret. 

PASCAL User's Group 

c/o Andy Mickel 

University of Minnesota 

Computer Center 

208 S.E. Union Street 

MINNEAPOLIS MN 55455 

U.S.A. 

Andy: 

The European Division of ICL is responsible for the first field trial 
of some new equipment designed for large distributed systems. This 
new equipment includes mainly: 

File processor: - 16-bit mini computer 

- large capacity disks 

- up to 1 Mega-byte of memory. 

Intelligent terminal: - 2 or more 8085 microprocessors 
- up to 64K of memory. 

The field trial consists of 800 file processors and 4.000 terminals 
in a bank application. 



We are currently looking for a high level language for "system" 
programming which would be implemented on both file processor and 
terminal. Specific application environments or programming tools 
would be built using this system tool, achieving hopefully ease of 
implementation, ease of maintenance and portability. 

We are considering: - PL/M 

- CORAL (UK standard) 

- PASCAL. 



At this stage we have the basic documentation on PASCAL, mainly the 
language definition. But, in order to speed up the implementation 
of PASCAL on our machines, we would like to investigate the possibi- 
lity of acquiring and using some existing PASCAL compilers. 
More specifically, could you provide me with some documentation/ 
information/references about: 

PASCAL compiler imp]tnentations for the INTEL 8080/8085 
(except the adaptation of the Hartmann's compiler to the INTEL 
MDS system) 

potentially "portable" PASCAL compilers. 

a possible PASCAL User's Group contact in Europe. 



-o 



Regards, 



CO 

m 



WovewV O . GeUNIER 



en 



People 's Computers 



Dr. Dobb's Journal of Computer Calisthenics ^Orthodontia 



Computer Music Journal 



Laurent O. Gelinier 



-^ 



■ JET PROPULSION LABORATORY California Institute of Technology • 4800 Oak Grove Drive, Pasadena, California 91103 

November 8, 1978 

Refer to: 366-ENM:amn 

Mr. Andy Mickel 

PASCAL Users Group 

University Computing Center 

227 Experimental Engineering Bldg. 

208 SE Union Street 

University of Minnesota 

Minneapolis, MN 55^55 

Dear Mr. Mickel: 

The Jet Propulsion Laboratory has recently taken an interest in PASCAL 
development and operation. The Lab has over 300 computers from many 
different manufacturers. We have started a Special Interest Group for 
the Lab-wide development of PASCAL and are currently collecting infor- 
mation about PASCAL off Lab. In particular, we would like to make three 
things known: 

1) The Deep Space Network (DSN) and the Mission Control and Computing 
Center (MCCC) are interested in the development of PASCAL compilers 
for Modcomp II and IV minicomputers. 

2) JPL is interested in efforts to write PASCAL standards and PASCAL 
validation programs. There are ten different PASCAL implementations 
at JPL and CalTech. The DSN would like to see a minimal set of guide- 
lines for PASCAL compilers purchased by the Lab. 

3) We are attempting to accumulate literature concerning PASCAL. We 
would like to obtain copies of PASCAL Notes #1 thru #8 for reproduction 
and distribution on the Lab. JPL will cover postage and reproduction 
costs if any PUG member is willing to loan us his or her Notes. We 
would prefer a complete set of Notes if possible. 

In the future, we hope to be more aware of the developments taking place in 
the PASCAL community, but for now we would just settle for getting our 
PASCAL SIG off the ground. 



Sincerely yours, 



Eugene N. Miya 

Cognizant Engineer for PASCAL Development 

Programming Development Section 



Telephcn 



Twx 910-588-3269 



Twx 910-588-3294 



Psitronics Group Systems Lab, 

502 Allison Avenue, 

Canon City, Colorado 81212 

November 27th, 1978 

Dear Sir(s) : 

Enclosed is my money order for $4.00; Please enter my subscription 
to the Pascal Newsletter... 

Here's an "early rumor" of Things -to-Come: I've been in communica- 
tion with Ken Bowles (UCSD) and Motorola; And found out that "they've" 
been discussing the possibility of extending Motorola's recently an- 
nounced M68,000 uP (utilizing some of it's uncommitted real estate & 
capabilities) to come up with something in line with Western Digital's 
new P-Code microMachine. Motorola just flew me to Austin last month 
reguards this same ambition; And it feels to me like it just may be 
worth waiting for... 

I've asked Ken for his endorsement reguards M68,000 and my personal 
"project"; And would like to lay it out to you (The Pascal Users Group) 
for feedback / suggestions -and finally your endorsement: 

I am trying to put together a "Standard Bus / Board" for (specificly) 
M68,000; But also for any 16 bit uP's -present or future: Towards this 
end I lean towards the "Industry Standard" Drawer Mount Planar Panel 
Boards (i.e. 16.2" x 7.5" nom.) -And further suggest the universal use 
of Planar .1" x .1" grid 26 pin (13 x 2) I/O connectors. This elimin- 
ates notching and finger plating of boards; Permits horizontal stacking 
in low cost enclosures with simple "wrap-pin to socket" spacers without 
any need for backpane wiring or motherboards; Etcera. I'm hoping that 
this hardware concept (like Pascal) will "sell itself" as the 16 bit 
answer to "S-100", . .As a "Public Domain" contribution to state-of-art. 

I am in the process of doing the tape up's for a "Universal uC S.B„C. 
Wire-Wrap Prototyping Board" using this ,concept; And aimed for not only 
M68,000 but also 9900, etc. I'm hoping to get enough interest to be 
able to start an "Information Exchange / User Group -and if so; To be 
able to offer these ProtoBoards (-Socketed for:40 or 64 pin uP; Either 
16K or 64K x 16 dynamic ram; And either 8K x 16 -2708- or 16K x 16 -4716 
250 ns-EPROM; Plus parallel & serial I/O) at cost to group members with 
a newsletter similar to your own and development aids, co:op purchasing, 
etc. If this project goes well; I hope, by 2nd Qtr of '79 to be able to 
offer plans, kits, etc. for S.B.C.'s based on this board -utilizing any 
popular uP: From the W.D. microMachine chip set:to M68,000; 9440, 9900. 
These could be done as pre-etched & socketed boards quite inexpensively. 

Again; I am not seeking any g£in save to further 'state-of-art', this 
proposed "Group" to be set up as a non-profit group to come up with an 
optimum replacement for S-100 in the Public Domain. I do encourage feed- 
back; But please S.A.S.E. if you wish a reply -As this is totally "out 
of pocket" at present... 



Sinci 



PoS. 



(erv^u) 



Paul Le Breton, 
Director, PSI/G 

I've also been corresponding with Dr. Lamb at Semionics / Berkeley 
about the possibility of jointly developing compatable R.E.M. memory 
boards for these "Std." S.B.C.'s -That should interest you students 
of Winograd, McCarthy, and Nilsson ' Can you imagine the potential 
of; Say: M68,000 teamed up with about 1£0 @ 512 bit "superwords" of 
low cost Content Addressable memory: Which can also be used as 3-0K 
x 16 of conventional static RAM ?!? 






CO 

m 



m 



cr> 
m 

oo 



Dear Mr. l&ckel, 

Recently I f ve carried out an experiment in using Pascal for 
document at ion* The problem was to specify the syntax of a graph 
produced by some phases of an optimizing compiler; previously it 
was fixed in a BLISS- like machine -oriented language, without any 
thought of such a documentation in Pascal, although with a certain 
idea of regularity in mind. 

It was a pleasant surprise for me to discover how easily Pascal 
suited this purpose, and how informative it was of the intended use 
of the node attributes. In fact, there was only one minor problem, 
and this is what this letter is about. 

I had to render in Pascal a double -variant node, i.e. a node 
which had two groups of variants, each group conditioned by an inde- 
pendent tag of its own. A less particular example might be 

type person * 

record first name, name : alfa; 

age : 0..2 55; 
case sex : (male, female) of 
male s (enlisted : boolean); 
female : (maidenname : alfa); 
case position t (student, lecturer, assistant) of 

lecturer, assistant : (subject : (algebra, geometry); 
degree : (none, phd, master)); 
student : (year j 1 . . 5; scolarship : integer) 
end ; 

This example presents the extention I f ve used in my document; namely, 
several variant parts are allowed at the same level, which are 
gathered at the end of the record definition. 

Of course I could make the first variant part into a record 
field, and thus remain within the standard Pascal; but the very simp- 
licity of this transformation calls for its inclusion into a compiler; 
this would eliminate the necessity to invent irrelevant field identi- 
fiers and repeat them in field selectors. Furthermore, alignment 
of all the variants at their logical level enables an intelligent 
compiler to produce a better packing. 

I think that such multi-variant notions emerge quite naturally 
at a certain level of complexity. I could mention the file concept 
in which there are three logically independent variant groups condi- 
tioned by transmission mode (record, stream), buffering and function 
(input, output, update) - and e.g. attribute "keyed' 1 is meaningful 
only within record mode; the concept of a variable in, say JORTRAN, 



which could have storage class and structure attribute groups etc. 
Sincerely yours, 



3> 



1 tfoCfrr?- 



21 



CL VZU^t 



/Joy/ 49U 

Sergei Pokrovsky 
Computing Center 
Novosibirsk 630090 
USSR 



******* 



^SANDERS 

*^1 ASSOCIATES, INC. 



FEDERAL SYSTEMS GROUP 

95 Canal Street, Nashua, N. H. 03060 

Telephone (603) 885-4321 

Telex 094-3430 



OCEAN SYSTEMS DIVISION 



Dear Andy: 



26 March 1979 



I've been meaning to write for some time to express 
my gratitude for the way you've been steering PUG through 
the last few years, but your farewell letter in #13 really 
pushed me to action. Somehow you've been able to adminis- 
ter PUG through a period of rapid growth, organize the News 
and recruit good section editors, and mediate some thorny 
disputes over changes to the language. And all this was 
done on a volunteer basis! I think its obvious that we 
wouldn't have gotten as far as we have without your enormous 
energy and good humor. Thanks for everything. 

By the way, the four PASCAL implementations we have here 
at Sanders show a remarkable diversity of ways to deal with 
TRUNC and ROUND for negative arguments. Here's a summary: 



TRUNC (-4.3) 
-5 



ROUND (-4.3) 
-4 



Implementation 

PDP-10 (Hamburg) 
Dec. '76 version 

PDP-11 (Stockholm) 
Apr. '77 version 

PDP-11 (OMSI) 
RSX VI. IF 

NOVA (Manchester) 
Rev 2 Update 

Correct Result 

(User Manual & Rept: -4 "4 

p. 107) 

(Newer versions of the first two have been issued and they 
may have corrected these errors . ) 

Best wishes, 



-5 



Bill Marshall 



CD 



THE UNIVERSITY OF NEBRASKA 

COMPUTER NETWORK 



LINCOLN PRODUCTION SERVICES 



February 9, 1979 



Dear Andy, 



This is a remedial letter to let you know of my change of 
address and to try to update the general knowledge of the 
status of Pascal at Nebraska. First the technicalities. 



My old home address was: 



My new home address is: 



Curt Hill 

7535 Sherman Drive 

Omaha, NE 68134 

2314 Orchard St. 
Lincoln, NE 68503 



The business address remains the same, 
stuff. 



Now on to the good 



Pascal is alive and well at the University of Nebraska, as we 
all might have suspected. We are now on our second semester 
of teaching computer science majors Pascal as their first and 
principal language. Progress in other majors who use program- 
ming is slower but coming along. The sure sign that it has 
caught on here is that thesis projects are being done in 
Pascal rather than the competition. Furthermore, I was asked 
to talk to the state chapter of IEEE on Pascal which shows 
that interest is spreading. As a part of the Computer Network, 
I also teach a three day (two hours a day) mini course to Uni- 
versity users at large. Pascal is available on all three of 
the available large systems, and there are several copies of 
UCSD Pascal and other micro or mini versions. 

I would also like to comment, for the record, on our compiler 
for IBM 360/370. We are using the Stanford implementation by 
Sassan Hazeghi and it is by far the best one we have looked 

at for our machines. It is very compatible with the standard, 
and Pascal-6000 programs usually run, only after massaging the 
character set (no "I s ) . The code generated is pretty good, and 
reliability excellent. I have managed to find two obscure 
bugs and both were quickly fixed. Anyone who has an older 
copy of the compiler should get July of 78 or newer version, 
if only for the nice symbolic dump for runtime problems. We 
implemented three compilers and looked at about three more and 
Stanfords was the clear winner. 

Well that is the current status. I am sorry I did not get this 
out sooner for your use. 



Sincerely, 




Curt Hill 

Computer Programmer/Analyst II 

CH/mw 



DENISON § UNIVERSITY 




GRANVILLE, OHIO 43023 



DEPARTMENT OF MATHEMATICAL SCIENCES 



March 8, 1979 



Dear Andy, 

I've been meaning to write this letter for some time, but the latest 
PASCAL News finally moved me to action. 

First, I'm sorry vou feel the need to get out from under. I'm sure that 
none of us realize fullv how much work vou have expended on this proiect, but 
I know that I for one appreciate it. 

Second, I have some mixed emotions about the trend towards non-Standard 
(new Standard, Revised Standard, etc) PASCAL. I was particularly interested 
in Richard Cichilli's report on the UCSD workshop since it made me reconsider 
manv of my views. Using his discussion on the desirability of an exponentiation 
operator, I freely concede that a function can be written, but bv the same logic 
we could eliminate the multiplication and division since these could be handled 
by addition and subtraction. Similarly, three Boolean operators could be re- 
duced to one (NAND, NOR) or two (AND - NOT, OR - NOT). On the other band, im- 
plementing all the nice-to-have operations would create a PL/1 mess, something 
none of us want. Thus, it seems to me that the problem is to decide where to 
draw the line. Mv suggestion is to meet the problem bv a compromise. Leave 
STANDARD PASCAL where it is, but define one or two supersets. My method would 
work as follows. Any PASCAL program which may be transported from one system to 
another must be written in the STANDARD version. Thus, we would have a language 
which is appropriate for teaching , for exchanging algorithms, etc. However, for 
some production programming in which a multiplicity of procedures mav be reouired, 
have a PASCAL II. PASCAL II would have certain features added to it. Fxternal 
procedures, better I/O instructions, a few text handling instructions are obvious 
candidates. These would have to be as well defined as in STANDARD, but would not 
have to be implemented. Further, require that anv PASCAL II comniler have all and 
only the specified options. Thus, a PASCAL II program would be transportable to 
any other PASCAL II system. Bv requiring that STANDARD PASCAL programs could also 
be compiled by a PASCAL II system, upward comnatibilitv could be attained. Admit- 
tedly this implies some sort of certification, but I don't believe that this is 
unreasonable. Admittedly this is a compromise, but I believe that it mav satisfv 
a majoritv of the users. 

Finally, on a more philosonhical note, I wonder if it is reallv possible 
to define a language without also defining implementation methods. The articles 
in PN//13 on evaluating Boolean expressions, and several articles over the last 
few years in IEEE Transactions on Software Engineering, have pointed out that 
two or more different implementations of language specifications can produce 
different results while remaining faithful to the definitions of the lanpuage. 

Sorrv this is so Ion", thus addin? to vour workload, but T wanted to throw 
in my two cents worth. 

Sincerel.v vours , 



.Tames Cameron, p rofessor 
Dppt. of Mathematical Sciences 



CO 

3> 



m 

OO 



oo 

m 






-a 

en 
m 

oo 



University of Illinois at Urbana- Champaign 

Nuclear Physics Research Laboratory • 23 Stadium Drive • Champaign, Illinois 61820 • (217)333-3190 

March 13, 1979 

Dear Andy and all PUG members, 

I would like to reply to a few articles that I have seen 
in Pascal News. In particular, I would like to reply to 
Richard J. Cichelli. He has said that complex numbers 
"are easily created within the standard mechanisms of 
the language". As far as this statement goes, I agree. 
However, this only mentions creation, not use! No one 
argues that it is not possible to create a "complex" record 
type. But the standard does not allow simple usage of 
these records. In particular a function is only allowed 
results of "scalar, subrange, or pointer type". Given 
this restriction I would like the ivory tower types (i.e. 
people whose major source of income does not cone from 
their ability to program computers ' (talking about does 
not constitute programming)) to use STANDARD Pascal to 
produce a simple, usable, and UNDERSTANDABLE optical 
potential calculation (this calculation relies heavily on 
complex arithmetic). I think this only goes to show a 
major weakness of Pascal. One of the reasons that I find 
Pascal so useful is the ease of creating complicated data 
types. But it is not always easy to use, and initialize 
these structures. In order to overcome these problems, 
I would like to suggest some additions to Pascal. I don't 
claim that these ideas are in a polished form, but I hope 
that they will stimulate discussion. 

The first point, which is not new by any means, is that 
Pascal needs a method to initialize data, and in particular 
structured data. Whatever form this takes it should have 
the capability of allowing the data to determine the structure. 
The particular case that comes to nind is an array whose 
maximum subscript is determined by the number of data elements 
(table generation). The only way (that I know) of doing 
this is to use assembly language I 

The second addition is structured type binary operators. *** 
A simole example should indicate what I mean by this. 



3> 

3> 



TYPE COMPLEX = REG 
VAR G1, C2, C3 : 



,RD R,I : REAL 
COMPLEX; 



SNO: 



OPERATOR MPY ( Z1 , Z2 : COMPLEX) : COMPLEX; 

BEGIN MPY.R := Z1.R*Z2.R - Z1.I*Z2.I ; 

MPY. I := Z1.R*Z1.I + Z2.I*Z1.R 

END; 

BEGIN ... C3 := C1 MPY C2 ; ... END; 
*** (* David A. Mundie suggested this idea in a letter dated 78/07/17. - Andy *) 



While I don't think that it is 
standard operators (+,-,*, etc 
names, it would certainly lead 
such as are possible with FOR"" 
this does not look all that di 
functions, there are several p 
Notably is the absence of the 
can exist from complicated exp 
also nake vector and array cal 
on vector computers. Also, fo 
possible to have these operate 
it should be possible to "crea 
operators which are distinguis 
operators are). 



realistic to use the 
.) as structured operator 

to simple expressions (C1*C2) 
RAN. While I agree that 
fferent from "all type" 
oints that should be made, 
oarenthesis forest that 
ressions. This form should 
dilations easily imolenentable 
r efficiency, it should be 
rs expanded as a macro. And, 

e" several like named 
hed by type (the standard 



Another addition, which does not con 
rather the implementation, is the ne 
While it may be true that on nost ma 
efficient as FORTRAN, this is certai 
large mainfra nes like the CDC Cyber 
the Cray 1. As soue ne fibers of PUG 
computer does a substantial part of 
community's number crunching. Consi 
efficiency of Pascal compilers for 
simply not economical to convert fro 
is one of those cases where one cann 
caused by a dinosaur architecture 
fastest computer can hardly be calle 
note that It is unfortunate that a s 
cannot m-ke sufficient use of oarall 
Maybe the dinosaurs in this case are 
unwilling to go beyond simple one pa 
production programs). 



cern Mae language but 
ed for code optiii7ers. 
chines Pascal is as 
nly not true of the 
7 L , the CDC 760O, and 
may know this class of 
the scientific 

ering the present 
hese machines it is 
m FORTRAN. And this 
ot say that this is 
After all, the world's 
a a dinosaur. (I will 
imple stack architecture 
el computation.) 
the people who are 
s compilation (for 



I hate to have this sound like I have joined the ranks of 
those who want to add everything to Pascal, including the 
kitchen sink. I realize that it was just this way of 
thinking that created PL/1. I just find it difficult to 
promote a language that cannot in a simple, efficent, and 
understandable way handle calculations that are part of 
my everday life. And, I would like these consents to be 
taken in a positive lighto I happen to like Pascal very 
much. It, among other things, makes it difficult to write 
sloppy programs. I wish I could understand why some (FORTRAN) 
people abuse the GO TO the way they do. I don't think even 
a sewer rat could decipher the logical (??) flow of some 
programs that I have been coerced to work on. Maybe when 
Pascal supercedes it predecessors this t3Hpe of program will 
vanish! 



Sincerely, 

<-^<N'. /, .fctfi: ■:>.-, 
Roger L a Gulbranson 



3> 
en 
m 

oo 






nun- 

^Kk^KB ^HBHv ^H HV COMPUTER 



INTERACTIVE TECHNOLOGY INCORPORATED 

4350 N.W. SCIENCE PARK DR. • PORTLAND, OR 97229 
TELEPHONE (503) 644-0111 

COMPUTER SYSTEMS CONSULTANTS 



April 30, 1979 

Dear Mr. Mickel, 

I recently read your latest publication "Pascal News" with 
great interest. Our firm is simply ecstatic over recent 
articles and the general overall enthusiasm that is growing 
for Pascal. Our firm has spent many man months developing a 
Data Base Management System in Pascal plus developing business 
applications from our DBMS. I would like to expose to "Pascal 
News" just exactly what ITI has been up to these past few 
years and primarily of late. 

First of all, two gentlemen on our staff began approximately 
two years ago (Bruce Johnson and Peter Mackie, formerly of 
Electro Scientific Industries and Tektronix, respectively) 
developing a Data Base Management System (DBMS) called 
"Realtime Database Manager" (RDM) . Just a few quick "bullets" 
on RDM: 



Transportable from the LSI-1 
(Compatibility Mode). Same 
all DEC PDP-11' s. 
Runs under OMSI Pascal 1. 
Will run under DEC's RT-11, 
Operates with TSX (RT-11) al 
Has complete routine of Form 
which displays in most cases 
originating document. 
Interactive Report Generator 
Accesses data bases with fre 
that merely by typing Engl is 
terminal, an operator can re 
modify data. Inquirer even 
capabilities, such as report 
headings, page numbering, da 
even subtotals, totals, and 
developed a product brochure 
in additional information, 
market place at this time. 



1 through the VAX 
set of tools runs on 



RSX-11, and RSTS/E. 
lowing up to 8 users, 
s Input or "ITI Prompt" 
the format of the 

or "ITI Inquirer", 
e form inquiry language 
h-like commands on a 
ad, enter, delete, or 
gives special formatting 

titles, page and column 
ta sorting by categories- 
averages. We have 

for those interested 
RDM is for sale in the 



Secondly, to date ITI has proven that RDM and Pascal are very 
powerful tools for developing commercial oriented 
applications. One of many comments coming out of the DECUS 
meeting in New Orleans was that indeed Pascal is a viable 
higher level language but it is oriented to the education 
field and not in business applications field. We have 
disproved that "grossly"!! We have to date many successful 
applications going beautifully, and our programmer 
productivity is probably in the area of 10 to 1 — seriously! ! 
To date we have applications in General Ledger, Accounts 
Receivable, Accounts Payable, Order Entry - Inventory Control, 
Parts and Inventory for automotive dealerships and parts 
houses, Order Processing, and Payroll. By the time this 
reaches you and Pascal News, we will have generated many more 
applications. 



Thirdly, we now are teaching formal classes in Introduction to 
Pascal (programming experience required), Advanced Pascal, and 
RDM and Pascal in data base management systems and how to use 
them. The Introduction class and Advanced class will run one 
week each. The RDM class (requires Intro) will run three 
days. 

I look forward to your upcoming "Pascal News", and if I can be 
of additional assistance, don't hesitate to contact me. 

Best regards, 

, /j. Smith 
Vice President, Marketing 



***** 



GO 

o 

3> 




Director of the Laboratory 

D. L Fisher. M.A.. F.B.C.S.. F.I.M.A. 



PJH/AVD 



COMPUTER LABORATORY 

THE UNIVERSITY 

LEICESTER LE1 7RH 

Telephone 0533-50000 

From 18 June 1979 
Tel: 0533 554455 

20th July 1979 



Dear Andy, 

I am writing on behalf of the Numerical Analysts (although not 
one myself) here. It seems that a language without the ability to 
specify arrays of undefined bounds as formal procedure /function 
parameters cannot even be considered for replacing Fortran as it is 
then impossible to write generalised procedures/functions for dealing 
with arrays as is generally required. For this reason it would greatly 
aid our conversion to Pascal if such a standardised extension existed, 
and even more so if it were the same as that currently used by CDC 6000 
Pascal 3. 

Hoping this input is of use to you, 

Yours sincerely, 



DO 
m 



CD 

■^ 

LD 



r 



?.' 



.(f 



im 



Peter Humble. 



-o 

:o 

m 

CO 
CD 



STORAGE TECHNOLOGY 

2270 South 88th Street / Louisville / Colorado 80027 



Mr. Andy Mickel, Editor 
Pascal News 

University Computer Center: 
208 SE Union Street 
University of Minnesota 
Minneapolis, Minnesota 55455 



CORPORATION 

(303)666-6581 / TLX4-5690 

5 June 1979 



Dear Andy: 



The other error is in passing elements of a packed structure thru VAR formal 
parameters. This is obviously impossible (and the CDC compiler prohibits) passing 
of a field which is less than a full word. However, the standard prohibits but the 
compiler allows passing a field that exactly occupies one word. 

Other errors in the PASCAL-P compiler are as follows: 

1) An element of a packed structure is passed thru a VAR formal parameter. A 
quick fix is to remove the word PACKED from line PASCP.127. 

2) Although most compilers don't check identifiers to more than 8 or 10 characters, 
the identifier STRINGCONSTSY at line PASCP.813 should have the SY removed. 

3) The three changes here are due to passing a subrange of integer variable thru 
a VAR formal parameter of type integer. Sometime an integer actual parameter 
is used. 






=8= 

r— » 



I was delighted to meet you and Jim Miner in person at the ANSI/ IEEE PASCAL 
Standards meeting in April in Boulder. Let me bring you and the readers of 
PASCAL News up to date on my professional involvement with PASCAL. 

I am now working for Storage Technology Corporation in Louisville, Colorado. 
STC is a leading supplier of tape and disk devices in the IBM marketplace. STC 
has begun development of new products requiring software support. Our project 
has chosen PASCAL as a base for developing a system implementation language. 
The reasons for chosing PASCAL include the availability of a compiler (AAEC-IBM) , 
the excellent characteristics of the language (syntax, sematics, programmer 
productivity, etc.), the ease of modifying the compiler, and the availability 
of expertise to support the language. Our intention is to maintain the proposed 
ISO standard for PASCAL as a proper subset of the language accepted by the 
compiler and to extend the language to aid the development of our project. 

We are using as a base the Australian Atomic Energy Commission PASCAL compiler 
for IBM machines. Our experience with the compiler has been good, although we 
have encountered a number of minor bugs. I've been pushing our compiler group 
to report the bugs and fixes to the authors. 

PASCAL distribution at the University of Colorado has changed since my departure. 
Steve Winograd carried on the distribution at the Computing Center from my 
departure in October until his in mid-May. In that time, he arranged for Wally 
Wedel at the University of Texas at Austin to distribute the CDC PASCAL compiler 
(Release 3) from the University of Minnesota. And he also arranged for Dr. William 
Waite of the Electrical Engineering Department to distribute the portable PASCAL 
compiler from Zurich and Per Brinch Hansen's Concurrent PASCAL. Thus the Computing 
Center is no longer associated with any PASCAL distribution activity. 

In my spare time, I have worked on a number of large PASCAL programs. The first 
is a version of Adventure written in PASCAL. The original work was done on a CDC 
machine using the Release 2 Zurich compiler. Then I transported it to an IBM 
machine using our modified AAEC compiler. The IBM operating system is MVS with 
TSO. It took about two weeks of occasional work to accomodate the character set 
differences and compiler changes. Then the program executed perfectly on the first 
run. Even the interactive PASCAL solution used for the CDC system worked fine on 
the IBM system. 

I believe there is a machine readable copy of my Adventure in Minneapolis. You 
have my permission to add it to the Release 3 distribution software if appropriate. 

Another PASCAL program I've been working on is PASCAL-P. I've encountered a 
number of descrepancies between this compiler (and I assume the CDC compiler too) 
and the proposed ISO standard. The compiler does not restrict the usage of subrange 
variables passed thru VAR formal parameters. A subrange of integer variable may 
be used as an actual parameter for a VAR integer formal parameter. There will be 
no subrange assignment check within the procedure. 



Line P. 117 
Line P. 166 
Line P. 305 



Change INTEGER to ADDRRANGE 

Change type of LSIZE from INTEGER to ADDRRANGE 

Change type of LSIZE from INTEGER to ADDRRANGE 



4) For bootstrapping on a CDC machine, the set range here is correct. But once 
on the target machine, change 0..58 to SETL0W. .SETHIGH at line PASCP.2517. 

5) This is not really an error but a limitation of the AAEC compiler. The static 
nesting of the PASCAL-P compiler is to deep for the AAEC compiler. This can be 
fixed by moving the. procedure headings and declaractions for SIMPLEEXPRESSION 
and TERM to PASCP.2650 and PASCP.2705. 

Other departures from the proposed ISO standard are as follows: 

1) The sequence 

TYPE P = @ INTEGER; 

INTEGER = REAL; 
VAR Q : P; 
results in Q having type pointer to integer. 

2) Assignments to FOR loop variables are not checked in even the most obvious cases. 

3) (I) is not recognized as an expression when passed as an actual parameter for 
a VAR formal parameter. 

4) File types are not implemented. 

5) PACKED attribute is ignored so that use of the standard procedures PACK and 
UNPACK is impossible. 

6) The tag field in variant records cannot be omitted. 

I hope this information is of use to other user of PASCAL. 

Sincerely, 

George HT Richmond 
Storage Technology Corporation 
P. 0. Box 98, Mail Drop 93 
Louisville, Colorado 80027 
(303) 497-6375 






m 
oo 



!M£fcr> THE ROCKEFELLER UNIVERSITY 

^University I? 1230 york avenue • newyork, new york 10021 



June 7, 1979 



Dear PUG, 



Enclosed please find dues for PUG membership, and also some 
extra for back issues of Pascal News . 

We are a fairly recent Pascal installation. We have obtained 
OMSI's Pascal, running on DEC's RT-11 operating system for the PDP- 
11, and are extremely pleased with it. In addition, the University's 
central computer facility has a version of Pascal, running under 
Unix. 

I will be teaching a course in Pascal in the fall. In the 
past, the staff of the computer center has given a FORTRAN course 
yearly, but their enthusiasm for this language seems to be waning. 
I hope that my course can fill the need for the novice computer user 
who wants to know how to handle his data (we tend to do a lot of 
data analysis, of various sorts). 

In my fall course, I want to present "vanilla" Pascal (i.e., 
in its purest, most standard form) . I have a question concerning the 
use of the PROGRAM declaration. It is not clear from the Report (or 
the standardization summary in Pascal News #14) whether this declara- 
tion is required or not (OMSI Pascal, for example, does not require 
it) . Furthermore, is one required to declare FILE variables as PRO- 
GRAM parameters? I am not sure about the logic behind this - I can 
understand the PROGRAM as a kind of super- PROCEDURE, perhaps with 
its "parameters" coming (in some unspecified way) from the operating 
system (i.e. by assigning real files to file variables) , but I am 
not sure this is correct. I would like to have a cogent explanation 
before I get asked the embarrassing question I 

The problems about standardization that have appeared in Pascal 
News are very well taken, particularly as programs are exchanged 
between users. I recently received a copy of the tape prepared by 
the DECUS Pascal SIG. Besides being written using an obsolete tape 
format (so-called DOS format, rather than ANSI- standard, which both 
RI-11 and RSX support) , with variable word-length blocks (even assum- 
ing you can read "raw" tape in Pascal, how could you handle different 
block sizes?) , almost all of the utilities on the tape use some non- 
standard features which the OMSI compiler could not handle (the most 
common were the LOOP construct, and a Unix-like method of passing 
file names to the program, which is most opaque!). Some of these 
programs were adopted from Pascal News (with credit given) - why did 
the implementer (who was presumably making the program available, 
not for himself, but for others) choose to include these non-standard 
features? Please keep up the pressure to prevent a proliferations 
of pseudo-Pascals, which will only serve to fragment the user commun- 
ity. 

I look forward to future Pascal (and Pascal News ) developments. 

Sincerely, 



<gLU 



huntec 

(70) LIMITED 




Huntec C70) Limited, 

c/o Room ^31. B. I. 0., 

Box 1006, 

Dartmouth, Nova Scotia 

Canada B2Y 4A2 

June 29, 1979 

Tony Addyman, 

Department of Computer Science, 

University of Manchester, 

Oxford Road, 

Manchester, England 

Ml 3 9PL 

Dear Sin 

I am most interested in the application of Pascal to 
scientific and mathematical problems, especially time 
series analysis f on processors ranging from micros to^ 
large mainframes. I can see a problem in the application 
of the Pascal defined in the draft BSI standard to these 
areas. This is the absence of variable dimensions for 
arrays which are variable formal arguments of 
procedures. Object code libraries everywhere contain 
numerous Fortran routines which use this feature to 
perform operations on arrays and matrices of arbitrary 
size, and the very generality with which the capability 
is used argues for its serious consideration as part of 
Pascal, or as a conventionalized extension. I do not, 
however, believe that it should necessarily be coupled 
with variable dimensions for all arrays. This would 
introduce complications in. the implementation which 
might be serious, especially on very small systems. 

A second area which could use better definition is an 
EXTERNAL statement for seperately compiled procedures. 
Such procedures are almost universally used in actual 
production environments, and contribute to the modular- 
ization of software by seperating modules physically 
and psychologically. There are good arguments for 
allowing no communication of data to seperately compiled 
procedures except through the argument list. In most cases, 
the effect of the external procedure should not be 
changed by compiling it with the mainline routine. 

I gather from Wirth's letter in Pascal News #13 p. 82 
that these matters are already under consideration. Add 
my name to the list of those who support these 
extensions. 

Jack Dodds 



Rick Shaw 
Pascal News 



OO 

3> 



OO 






D> 
CD 

m 

00 
00 



Bob Schor 



s , , UNIVERSITY OF MINNESOTA 

S9 I TWIN CITIES 



University Computer Center 

227 Experimental Engineering Building 

Minneapolis, Minnesota 55455 



v * 



STEP-WISE DEVELOPMENT OF A PASCAL COMPILER 

****************************************** 



c~> 

3> 



1979 September 20 

Ken Bowles 

Institute for Information Systems - C-021 
University of California - San Diego 
La Joll a, CA 92093 

Dear Ken, 

Thank you for Newsletter #4 of the Pascal project at UC San Diego. It and 
the previous newsletters have provided us with news of your and your group's plans. 
Because subscribers to UCSD Pascal also have a need for general information about 
Pascal, I was wondering if you could insure that SofTech Microsystems will continue 
to send out Pascal User's Group ALL-PURPOSE COUPONS with the software package. Thanks! 

Newsletter #4 carries the implication that UCSD Pascal in and of itself 
constitutes a viable "standard" for Pascal?! Also, suppose Niklaus Wirth trademarked 
Pascal, copyrighted the P2 portable Pascal system (on which UCSD Pascal was derived) 
and set up a marketing organization? There most probably would be no Pascal user 
community right now— nor, for that matter any UCSD Pascal! 

Pascal-P is public-domain software. The least you could do is provide 
adequate recognition/credit/modification history in the comments of the source of the 
UCSD Pascal compiler. Right now I'm looking at a listing which has: 



********************************************* \ 

* *\ 

* UCSD PASCAL COMPILER *) 

* BASED ON ZURICH P2 PORTABLE *) 

* COMPILER, EXTENSIVLY (sic) *) 

* MODIFIED BY ROGER T. SUMNER *) 

* SHAWN FANNING AND ALBERT A. HOFFMAN *) 

* 1976.. 1978 *) 



STEP 5: SYNTAX ANALYSIS INCLUDING ERROR 

HANDLING; CHECKS BASED ON DECLARATIONS 

AUTHOR: URS AMMANN 

FACHGRUPPE COMPUTERWI SSENSCHAFTEN 
EIDG. TECHNISCHE HOCHSCHULE 
CH-8006 ZUERICH 

ADAPTED TO GENERATE CODE FOR A PDP 11 BY: 
W. DE VRIES 

UNDER GUIDANCE OF DRS C. BRON 
VAKGROEP INFORMATICA 
TECHNISCHE H0GESCH00L TWENTE ENSCHEDE 
APRIL '75 

CHANGED TO RUN UNDER RSX-11M BY: 
SEVED TORSTENDAHL 
TELEFONAKTIEBOLAGET LM ERICSSON 
S-126 25 STOCKHOLM 
APRIL '77 

MODIFIED SLIGHTLY FOR PDP-11/70 UNDER IAS BY: 
JYRKI TUOMI AND MATTI KARINEN 
TAMPERE UNIVERSITY OF TECHNOLOGY 
COMPUTING CENTER 
SF-33100 TAMPERE 10 
OCTOBER '77 



The first 14 lines of this heading are those from the original Pascal-P2 
compiler which give credit to Urs Ammann on whose back 90% of the Pascal compilers 
in the world are now riding, thanks to his labor and dedication. 






do 
m 



RELEASE LEVEL: 



INSTITUTE FOR 
UC SAN DIEGO, 



1.3 AUGUST, 1977 

1.4 JANUARY, 1978 

1.5 SEPTEMBER, 1978 

INFORMATION SYSTEMS 
LA JOLLA, CA 92093 



Sincerely, 




(* KENNETH L. BOWLES, DIRECTOR *) 

(* *) 

(* COPYRIGHT (C) 1978, REGENTS OF THE *) 
(* UNIVERSITY OF CALIFORNIA, SAN DIEGO *) 

(* *) 

/ ********************************************* \ 

Contrast this to the entry in the PDP-11 Pascal compiler from Tampere, Finland 
produced by Jyrki Tuomi and Matti Karinen at the Tampere University of Technology: 



3> 

CD 

m 



Pascal Standards 



In this section are reports by Jim Miner, Rich Cichelli, and myself on this year's 
whirlwind of standards activity which has consumed so much of our time and was a major 
reason that this issue is late. We had wanted to provide a much-postponed report on 
the International Working Group on Pascal Extensions—Olivier Lecarme has written an 
excellent summary (in French) for the Bulletin of the AFCET Pascal Sub-Group. That will 
have to wait until issue #17 unfortunately, because the translation is not complete yet. 
Our current work in the Working Group about conformant array parameters is about to be 
pre-empted by the ISO Pascal Standards activities, and so Arthur Sale will have some 
information for us in issue #17. Information on the Validation Suite concludes this 
section. 



Pascal Standards Progress Report 

Jim Miner, with Tony Addyman, Andy Mickel, Bill Price, and Arthur Sale 



Another possible outcome of the Turin meeting Is agreement of the BSI to produce and 
circulate another Working Draft for comment only. This might significantly delay the 
international standard because SC5 does not meet often and business between meetings 
must be conducted by letter. Also, working drafts are not normally circulated before 
the Draft Proposal stage. The United States, which initiates most standards in this 
field, usually proceeds directly to the Draft Proposal stage. So, precedent firmly 
established by the United States in previous standards efforts argues against another 
Working Draft. 

A third possible outcome is the establishment by SC5 of an international Working 
Group to attempt resolution of remaining problems in the Working Draft. This usually 
turns out to be expensive and time -corns uming. 

A fourth possibility is that the BSI could postpone or even drop the ISO effort and 
concentrate on development of a British standard. The United States often develops 
an American National Standard before initiating ISO consideration. Unfortunately 
this is seen by some non-U. S. groups as coercion by the U.S. reflecting an 
unfriendly attitude to the rest of the world. This route would also result in a 
significant delay in obtaining an international standard. 



This Report is divided into two main sections. The first deals with the 
international standardization effort, the second with national efforts, primarily in 
the United States. 

One topic not addressed in this report is the political and organizational 
maneuvering which inevitably occurs in standards work. To get some ideas about this 
aspect read the pieces by Andy Mickel and Rich Cichelli following this report. 

The ISO /BSI Standard 



Standards Activities in the United States 

As reported in Pascal News #13, the American National Standards Conn! <:i-..->..-.. i.i 
Computers and Information Processing (ANSI/X3) has established a Technical Committee 
on Pascal called X3J9. About the same time, the Institute of Electrical and 
Electronics Engineers (IEEE) established a Pascal standards project and committee 
called P770. X3J9 met initially in December 1978 in Washington D.C. (See the 
accompanying piece by Rich Cichelli about that meeting.) The IEEE committee met in 
January 19 79 in San Francisco. Both of these meetings were primarily organizational. 



The history of the British Standards Institution (BSI) work on an international 
standard is covered in Pascal News #14 up through late 1978. Since then, the Working 
Draft 3 developed by BSI's DPS/13/4 was slightly revised and submitted to the 
International Standards Organization (ISO) subcommittee TC97 SC5. (See the 
accompanying glossary of standards group names.) The revisions to Working Draft 3 
were mainly formalization of language (such as changing "is" to "shall be") and 
section renumbering. Working Draft 3 was printed in Pascal News #14 and subsequently 
in Software - Practice & Experience 9 (May 1979), pages 381-424. 

The revised draft submitted to SC5 was given the document number "N462". (This 
document was published in the IEEE's Computer , April 1979, pages 68-82.) N462 was 
distributed in February by SC5 to its members for comment. Official comments were 
received by the British (through ISO channels) from several countries including 
Japan, the United States, Canada, the Netherlands, and Austria. 

In addition to the "official" comments, DPS/13/4 has received a large volume of 
comments from the public. The massive task of examining these comments has been 
accomplished, and DPS/13/4 met this September to decide on changes to be included in 
the next draft (Working Draft 4). We expect this draft to be distributed in October 
through ISO for additional comments. 

Working Draft 4 will be the subject of discussion at an ad_ hoc "Pascal experts group" 
meeting to be held in Turin, Italy in November. This group will advise SC5 (which 
meets at the same time) concerning further processing of the BSI working draft. It 
is not clear at this time what the outcome of the SC5 meeting will be, but the most 
likely result seems to be that the experts group will offer a revision of Working 
Draft 4 (with correction of errors) to SC5, and that SC5 will vote to register it as 
a Draft Proposal. If this occurs, the Draft Proposal will be circulated to SC5 
member bodies for voting. The voting period is nomally three months, but precedent 
exists for fixing a longer period. Each SC5 member may vote "Yes", "Yes but please 
clarify ...", or "No because of ...". Negative votes must include specific 
objections. If these objections can be resolved then the "No" vote becomes a "Yes" 
vote. When a Draft Proposal is accepted by SC5 it goes into the next stage of voting 
as a Draft International Standard (DIS) . When a Draft Proposal is not accepted, it 
will normally be revised and go through another round of voting. 



Since then, both committees have met jointly in Los Angeles (February), Boulder 
(April), New York (June), and Houston (September). (In the rest of this report we 
will call this joint committee "X3J9".) Attendance at these meetings has averaged 
about 70 persons, perhaps half of which are official voting members. All such 
meetings are open to the public. 

At the February meeting, discussion centered on the creation of an "SD-3" document. 
The SD-3 is a proposal to initiate a standards project, and outlines the nature of 
the standard desired, expected benefits of the standard and feasibility of its 
development, committee program of work, etc X3J9 needed to submit such a proposal 
in order to work on an American National Standard, even if the result were identical 
to the ISO standard. 

A final SD-3 proposal (printed below as subsequently modified by SPARC) was agreed 
upon at the April meeting. This document was submitted to X3 and SPARC for approval. 
Perhaps its most important feature is the stated intention that the (first) American 
National Standard should be compatible with the ISO standard. 

A second immediate concern at the February meeting was the creation of a means for 
reviewing the British Working Draft then being circulated through ISO. X3J9 
established a Technical Review Task Group (TRTG) under the direction of Bill Price to 
coordinate this review. 

A third area of concern at the February meeting was the establishment of a mechanism 
for exploring extensions to Pascal. The proposed SD-3 mentioned above states this 
concern as seeking to "identify and evaluate common existing practices in the area of 
Pascal extensions." To create such a mechanism, X3J9 agreed to set up an Extensions 
Task Group (ETG) under the direction of Jim Miner. However, X3J9 also prohibited 
consideration of extensions during the initial review of the working draft (N462). 

The April meeting was spent almost entirely on discussion of N462 and public comments 
on it which were received by X3J9. (The TRTG had met a week earlier in San Francisco 
to compile a draft response to the British.) After several exhausting rounds of 
discussion X3J9 agreed in principle to a response, but due to insufficient prior 
notice the committee was not able to generate an official response to the British. 






CD 



By the time X3J9 met again in New York in June, more comments had oeen received. 
After another set of exhausting sessions X3J9 agreed on a final official response to 
the British draft: a 50+ page, very detailed document. (I think we are all indebted 
to Bill Price for the effort he put in on this review process!) 



The June meeting also saw the development 
statements to guide the X3J9 extensions work. 



of proposed Procedures and Policy 



In August, SPARC recommended to X3 that the X3J9 SD-3 be approved, but without 
provisions for developing an extended standard. In order to pursue an extended 
standard, X3J9 prepared a second SD-3 at its September meeting in Houston. Although 
not given final approval (because of lack of prior notice) , it is expected that this 
document will be approved and sent to SPARC and X3 in November. The document 
tentatively agreed on in Houston is printed below. 

X3J9 also came closer in Houston to agreement on procedures to cover extensions work. 
These procedures call for publicly soliciting proposals for extensions. The 
proposals may vary in content from merely stating an area of need for a capability in 
the language, up to a "formal" proposal including the following: a problem 
statement, specific revisions to the Standard Pascal document, syntax, semantics both 
in English and using some formal technique such as axioms, examples of use, 
implementation details, summary of experience using the extension, discussion of 
consistency with the existing language and expected benefit of the extension, and a 
list of related documents. Given the extensive detail needed in a formal proposal, I 
expect that most proposals will be relatively informal. 

A library of "candidate extensions" will be maintained. These extensions will be 
those judged to be technically sound and desirable by X3J9. The library will be used 
later as the source of language features which may be included in an extended 
language. X3J9 has not established procedures for the synthesis of an extended 
language from these individual features. 

Other National Standards Efforts 

Several of us have been puzzled by the lack of official comments on N462 from several 
countries, including France and Germany. We have been told that Albrecht Biedl 
organized a technical committee which met in late May or early June to prepare some 
official German comments. Apparently the German standards organization (DIN) 
requires that such comments be reviewed by the next-higher committee before being 
submitted to ISO, and this committee will not meet until later this year. 

We hope standards workers in more countries will report on their activities in future 
issues of Pascal News . 



X3J9 Chair: Marius Troost, Sperry Univac 

P770 Chair: Bruce Ravenel, Language Resources 

Vice Chair (both committees): Scott Jameson, Hewlett-Packard 

Secretary (both committees): Jess Irwin, Gould-Modicon 

X3J9 International Representative: David Jones, Control Data 

All correspondence with or about the committee may be addressed to: 

Jess Irwin 
c/o X3 Secretariat 
CBEMA: Suite 1200 
1828 L Street NW 
Washington D.C. 20036 



ISO - International Standards Organization. 

ISO TC97 - ISO Committee on Computers and Information Processing. 

ISO TC97 SC5 - ISO TC97 Sub-Committee on Programming Languages. 

Draft Proposal (DP) - A document under consideration by ISO TC97 SC5. 

Draft International Standard (DIS) - A document in a second stage of consideration 
by TC97 and all of ISO. 

ANSI - American National Standards Institute. 

ANS - American National Standard, which is a standard issued under the umbrella of 
ANSI. 

dpANS - draft proposed American National Standard, a document on its way to 
becomming an ANS. 

X3 - The committee recognized by ANSI for the area of Computers and Information 
Processing. 

SPARC - Standard Planning and Requirements Committee, which advises X3 on functional 
and economic (not technical) aspects of new standards projects and review of 
proposed standards. 

X3J9 - X3 Technical Committee on Pascal, which does the technical work on an 
American National Standard Pascal, and which advises X3 on the international 
standardization of Pascal. 

IEEE - Institute of Electrical and Electronics Engineers. 

IEEE Pascal Standards Committe e - The committee established under IEEE standards 
project P770 to develop an IEEE Pascal standard. 

JPC - Joint Pascal Committee, which is an unofficial term for the joint workings of 
X3J9 and the IEEE Pascal Standards Committee. 



2> 



3> 



VJ1 



CO 



ANS Pascal SD-3 As proposed by X3J9 (X3J9/79-026) and amended bv SPARC . 
Subject to approval by X3 . 

Proposal for an American National Standard (ANS) Programming Language Pascal 
1. IDENTIFICATION 

1.1 Title: 

ANS Pascal 

1.2 Proposer: 

Proposed by the X3 Technical Committee on Pascal (X3J9) 

1.3 Date of Submission: 



2. DESCRIPTION 

2.1 Purpose: 

The purpose of the standard is to provide an unambiguous and machine 
independent definition of the language Pascal. 

2.2 Goal: 

The goal is an implementable Pascal standard. 

2.3 Nature of the standard: 

A standard for a digital computer programming language. 

2.4 Scope: 

The programming language Pascal is a simple high-level language. It is 
a general-purpose rather than an all-purpose language. Pascal is being 
used increasingly in three areas: 

1) The writing of system software 

2) The writing of application software 

3) The teaching of programming 

2.5 Program of Work: 

1) Maintain a liaison with the ISO, BSI and IEEE Committees to work 
toward a common working draft standard. This work should include 
review of those bodies' documents and forwarding of comments 
based on that review. The eventual draft proposed ANS Pascal 
shall be compatible with any ISO Pascal standard and identical in 
content with the jointly developed proposed IEEE Pascal standard. 

2) Provide a means for review of all Pascal standardization activi- 
ties. 

3) Carry out the development of a Pascal standard. 

4) Identify and evaluate common existing practices in the area of 
Pascal extensions. 

5) Act as a liaison group with organizations interested in interpre- 
tation of ANS Pascal. 

3. EXPECTED BENEFITS 

3.1 Intrinsic: 

Development of a standard Pascal reduces costs of extra training for a 
particular Pascal implementation and costs of conversion when transport- 
ing a program to a different machine. 

3.2 Interchange : 

A standard Pascal will facilitate portability. 

3.3 Educational: 

A standard Pascal enables production of educational documents or manuals 
usable with any standard implementation. Costs of re-education for a 
different implementation are reduced. 



3.4 Economic: 



~0 



While no estimates of economic impact are available at this time, it is °° 
felt that because of Pascal's widespread popularity, the economic bene- c ~ ) 
fits of a standard will be commensurately large. ^ 



DEVELOPMENT FEASIBILITY 
4.1 State of the Art: 



The most important factor in this proposal is the timeliness of the 
standardization of Pascal. Pascal has been implemented on a large 
number of different computers. If the problems relating to the defi- 
nition of Pascal are not resolved in the very near future, there is a 
danger that the various implementations will become incompatible. The 
growth of a large number of incompatibilities would severely hinder 
any subsequent standardization activities. 

The current lack of any significant incompatibilities should be seen 
as a good reason for standardization now. 



4.2 Available Resources: 



There are already three working groups concerned with the production of 
a Pascal standard. They are: 

Pascal User's Group (International) 

DPS/13/4 (United Kingdom) 

International Working Group on Pascal Extensions (UK/USA) 

These three groups are cooperating with each other and are correspond- 
ing with interested parties in the following countries: USA, Australia, 
Canada, Denmark, France, Germany, Poland, Sweden, and Switzerland. Many 
of these correspondents are suppliers of Pascal compilers. 

Bibliography: 

Jensen, K. and Wirth, N. (1978) Pascal - User Manual and Report , 2nd ed. 
(Springer-Verlag, New York) 

Hoare, C.A.R. and Wirth, N. (1973), An axiomatic definition of the pro- 
gramming language Pascal, Acta Informatica 2, 335-55 

Haberman, A.M. (1974), Critical comments on the programming language 
Pascal, Acta Informatica 3, 47-57. 

Lecarme, 0. and Desjardins, P. (1975), More comments on the programming 
language Pascal, Acta Informatica 4, 231-45 

Welsh, J., Sneeringer, W.J. and Hoare, C.A.R. (1977), Ambiguities and 
insecurities in Pascal, Software-Practice and Experience 7, 685-96 

Wirth, N. (1975), An assessment of the programming language Pascal, 
SIGPLAN Notices 10, 23-30 

Wirth, N. (1971), The programming lnaugage Pascal, Acta Informa tica 1, 
35-63 

Wirth, N. (1971), The design of a Pascal compiler, Software-Practice and 
Experience 1, 309-333 

Wirth, N. (1972), The programming language Pascal and its design cri- 
teria, Infotech State of the Art Report 7: High Level Languages, 
451-473 ~ * ' 



m 

GO 






Hoare, C.A.R. (1973), Hints on programming language design, Stanford 
University Computer Science Dept. Report 403 

Wirth, N. (1974), On the design of programming languages, North Holland 
Information Processing : P rogramming Methodology 

Wirth, N. (1976), Programming languages: What to demand and how to 
assess them, and Professor Cleverbyte's visit to heaven, ETH Institute 
fur Informatik, Technical Report 17 



4.3 Estimated Costs: 

The cost of developing a Pascal standard will be borne by the sponsors 
of the membership. It is difficult to estimate the total cost as mem- 
bership totals will undoubtedly fluctuate. 

The total cost is expected to be on the order of $500,000.00 

IMPLEMENTATION FEASIBILITY 

5.1 Supplier Conformance Considerations: 

In developing the Pascal standard, care will be taken to maintain machine 
independence. The final specification will encourage unambiguous in- 
terpretation. The above goals, in addition to the participation of many 
suppliers in the standardization effort, should provide an opportunity 
to achieve and /or determine conformance. Note that a suite of programs 
is currently being developed by groups based in Australia and the U.K. 
which could form the basis of a conformance test. 

5.2 User Operational Considerations: 

The current lack of widespread incompatibilities in existing practice 
should make conversion of existing programs a minimal expense. 

5.3 Legal Considerations: 

Preserving machine independence and compatibility with any ISO Pascal 
standard should prevent problems related to res taint of trade and 
public interest. 

5.4 Estimated Costs: 

Implementation may necessitate some modification of existing Pascal 
compilers and programs. No detailed cost figures can be developed at 
this time. However, the announced goals and constraints of this stan- 
dardization effort should hold such necessary modifications to a mini- 
mum. 

MAINTENANCE REQUIREMENTS 

6.1 Extent and Frequency of Anticipated Changes: 

X3J9 intends to provide interpretation and clarifications of the even- 
tual ANS Pascal standard as the need arises . 

The committee also intends to comply with the requirement that an ANSI 
standard be reviewed within a five year period. 

6.2 Resources: 

The committee accepts its responsibility to maintain the eventual stan- 
dard and to continue this activitiy along with any revision efforts. 



6.3 Cost: 

The cost of maintaining the standard on an annual basis is estimated to 
be comparable to the original development cost. 

7. CLOSELY RELATED STANDARDS ACTIVITIES 

As mentioned previously, ISO is undertaking the development of a Pascal standard. 
The Technical Committee will maintain close liaison with this group to assure that 
the resulting standards define the same language. 

The IEEE P770 Committee is developing the ANS Pascal standard jointly with X3J9. 

8. RECOMMENDED TIME FRAME 

Every effort will be made to submit a candidate standard to X3 by June 1, 1979. 



VJl 



***** 



ANS EXTENDED PASCAL SD-3, September 14, 1979 



X3J9/79-187 
(Revised) 



Proposal for an American National Standard (ANS) Extended 
Programming Language Pascal. 

1. IDENTIFICATION 

1.1 Title: 

ANS Extended Pascal 

1.2 Proposer: 

Proposed by the X3 Technical Committee on Pascal (X3J9) 

1.3 Date of Submission: 

2. DESCRIPTION 

2 . 1 Purpose: 

The Extended Pascal standard is intended to define areas 
in which Pascal may be reasonably extended in a 
machine -independent and unambiguous manner 
consistent with existing practice. 



m 






2 . 2 Goal : 



The goal is an implementable , internationally 
acceptable, Extended Pascal standard. The Extended 
Pascal standard is intended to replace the standard 
referred to in 7(a). 



-o 

3> 



2.3 Nature of a standard: 



The standard shall define extensions to the ISO 
Pascal standard and the corresponding ANS standard. 



2.4 Scope: 



The standard shall encompass those Pascal extensions 
found to be: 

(a) compatible with the Pascal language 
referred to in section 7(a), and 

(b) beneficial with respect to cost. 



There have been previous efforts on extensions by 
the UCSD Workshop on Pascal Extensions for Systems 
Programming and the International Working Group 
on Pascal Extensions. These efforts have shown 
that consensus can be reached on at least some 
extensions . 



2.5 Program of work: 



The program of work shall include: 

(a) solicitation of proposals for extended language 
features; 

(b) the critical review of such proposals; 

(c) synthesis of those features found to be acceptable 
individually and which are mutually consistent 
into a draft proposed standard; 

(d) interface with all interested standards bodies, 
both domestic and international; 

(e) submission of draft as a dpANS and as an ISO 
draft proposal. 



3. BENEFITS 



3.1 Intrinsic: 

Development of a standard Extended Pascal reduces 
costs of extra training for a particular Extended^ 
Pascal implementation and costs of conversion 
when transporting a program to a different machine. 

3.2 Interchange: 

A standard Extended Pascal will facilitate portability. 

3.3 Educational: 

A standard Extended Pascal enables production of 
educational documents or manuals usable with any 
standard implementation. Costs of reeducation for 
a different implementation are reduced. 

3.4 Economic: 

While no estimates of economic impact are available 
at this time, it is felt that because of Pascal's 
widespread popularity, the economic benefits of a 
standard will be commensurately large. 

4. DEVELOPMENT FEASIBILITY 

4.1 State of the Art: 

There is growing sentiment in both consumer and 
producer communities that Pascal should be extended. 
A wide variety of extensions are available in 
currently existing language processors. Without a 
standard for an extended language, these processors 
will become increasingly incompatible. 



4.2 Resources: 

The membership of X3J9 shall be a resource for 
this draft. In addition, cooperation and 
consultation with other standard bodies and 
Pascal experts shall be sought. 

Bibliography: 
Pascal News 

ACM SIGPLAN Notices 

Software Practice and Experience 

4.3 Estimated Costs: 

The cost of developing an Extended Pascal standard 
will be borne by the sponsors of the membership. 
It is difficult to estimate the total cost as 
membership totals will undoubtedly fluctuate. 

The total cost is expected to be on the order of 
$500,000.00 per year. 

5. IMPLEMENTATION FEASIBILITY 

5.1 Supplier Conformance Considerations: 

In developing the Extended Pascal standard, care 
will be taken to maintain machine independence. The 
final specification will encourage unambiguous 
interpretation. The above goals, in addition to 
the participation of many suppliers in the 
standardization effort, should provide an opportunity 
to achieve and/or determine conformance. Note 
that a suite of programs is currently being 
developed by groups based in Australia and the 
U.K. which could form the basis of a conformance 
test. 

5.2 User Operational Considerations: 

The expected growh in the use of extensions to 

Pascal suggests that costs incurred by users due 

to the timely adoption of an extended standard will 

be insignificant compared with the Benefits (section 3) , 



5.3 Legal considerations: 

Preserving machine independence and compatibility 
with any ISO Pascal standard should prevent 
problems related to restraint of trade and public 
interest. 



3> 



=tfc 

J— » 



m 



-o 

3> 



CD 



5.4 Estimated Costs: 

Producers will face conversion costs. Effort 
will be made to ensure that extensions are 
efficiently implementable in language processors 
and may be used efficiently on existing hardware. 

6 . MAINTENANCE 

6.1 Extent and Frequency of Anticipated Changes: 

X3J9 intends to provide interpretation and 
clarifications of the eventual ANS Extended Pascal 
as the need arises. 

X3J9 also intends to comply with the requirement 
that an ANSI standard be reviewed within a five 
year period. 

6.2 Resources: 

X3J9 accepts its responsibility to maintain the 
eventual standard and to continue this activity 
along with any revision efforts. 

6.3 Cost: 

The cost of maintaining the standard on an annual 
basis is estimated to be comparable to the original 
development cost. 

7. CLOSELY RELATED STANDARDS ACTIVITIES 
Related standardization efforts include: 

(a) the development of an ANS Pascal by X3J9 as per 
X3J9/79-026 (proposed), 

(b) the development (jointly with X3J9) of a proposed 
IEEE Standard for Pascal (IEEE Project P770) , and 

(c) the associated ISO standardization of Pascal. 

These efforts have a different objective and a different time 
frame than the herein proposed effort, and thus should be 
carried to completion as planned. 



8. RECOMMENDED TIME FRAME 



June 30, 1981 

December 30, 1981 

June 30, 1982 

December 30, 1982 

June 30, 1983 



End of public^ proposal initiation 

Processing of proposals complete 

Draft of proposed Extended Pascal 

document complete 

End of public comment 

Submission of proposed Extended Pascal 

Document for ANSI/IEEE/ISO consideration. 



ANSI X3J9 Meeting of December 19, 1978 
by Richard J. Cichelli 



Most of the results presented here have been reported in the trade press. 
Behind the stuffy formality of the official news releases there is an 
undersurrent of the personalities and politics. And it's for big stakes. 
Pascal is viewed as a threat to the established order in computing. 

The following report by John Knight of NASA and ACM's SIGPLAN gives most 
of the details. 

The X3J9 committee has been set up by ANSI to establish a standard 
for the programming language PASCAL. The first meeting was held 
on 19 December 1978 at the offices of the Computer and Business 
Equipment Manufacturers Association (CBEMA) in Washington D.C. 
This association will provide organisational and secretarial support 
for X3J9 but no technical or managerial support. 

To obtain membership of X3J9 it is necessary to apply in writing 
to the membership secretary at CBEMA. A Member is required to 
attend at least two out of three meetings and respond to at least 
every other letter ballot. There must be at least one and at most 
six meetings per year. The committee must prepare an SD3 document 
which is its justification for existence to ANSI. 

The convenor of this meeting was Justin Walker. Normally ANSI 
organises language specific subcommittees based on industrial and 
academic demand from inside the U.S.A. In this case X3J9 was 
established because of a request for support from the International 
Standards Organisation (ISO). 

It seems that none of the attendees of this meeting had applied 
for membership of X3J9 in writing as required so technically all 
attendees were observers. Thus this meeting was in a sense informal. 
ANSI requires a committee to elect a chairperson and secretary from 
within its membership. No chairperson was available because none 
of the participants were formal members of X3J9. The meeting was 
conducted by the convenor. 

The first surprise which occurred was an announcement by a 
representative of the IEEE that the IEEE had established its own 
PASCAL standards committee with the goal of producing a standard 
for the language. This announcement met with a lot of comment and 
considerable disapproval. The theme of the disapproval was that 
it is ANSI's job to establish standards and this would be a 
duplication of effort. Despite these comments, it is clear that 
the IEEE will continue its effort. 

Following the debate over the IEEE announcement, the discussion 
turned to organisational matters of X3J9- It was explained that 
four officials are required. They are: 

fl) Chairperson 

(2) Vice Chairperson 

(3) Recording Secretary 

(4) International Liason Officer 

The reason for the relatively high level of activity at the ISO 
is the current work being done by tne British Standards Institute 
(ESI). The BSI has prepared a draft PASCAL standard and will 
submit it to the ISO. There is a high probability that it will 
be accepted (after revision) by the BSI and ISO. A move was made 



3> 



m 



-a 

CD 



at the X3J9 meeting to accept this draft standard as an ANSI draft 
standard. This was rejected on the grounds that few people had 
seen it. The meeting agreed to consider it at a later date after 
it had been circulated, The BSI document has been published by 
the PASCAL Users Group as PASCAL Newsletter no. 14. One point 
which generated a lot of debate and few conclusions is that the 
ISO has stated that its PASCAL effort will not involve any 
development of the language. ANSI has adopted the view that this 
is not necessarily its policy. 

The next meeting of X3J9 will be hosted by UNIVAC in Irvine, 
California and will be held February 20 - 22. The proposed agenda is; 



I suggest that any of you who would like more information on this 
subject contact John Knight (804) 627-387 d/302d. in addition to 
being SIGPLAN' s representative, he has a strong personal interest 
in Pascal and in the effort to standardize it. 



3> 
GO 



Nomination of committee officials. 

Preparation of the SD3 document. 

Establishment of a review process. 

Review of written comment on the BSI/ISO document. 

Submission of proposals to the BSI and the ISO via the 

International Liason Officer. 

Action items. 

Report on ISO standard situation. 

Future meetings schedule. 



Some further clarification of the SIGPLAN' s stand on the issues can be 
gained from Paul Abrahams' message to the SIGPLAN membership. 

From the Vlce-Chairman of SIGPLAN to SIGPLAN Members 

I w6uld like to report to you on the recent upsurge of standardization 
activity with respect to Pascal, since I know that Pascal is a 
language that many of you are Interested in. I am grateful to John 
Knight, our semi-official representative to committee X3J9, for 
providing me with the input for this report. 

There are three different groups currently interested in developing 
a PASCAL standard: the American National Standards Institute (ANSI), 
the IEEE, and the International Standards Organisation (ISO). A 
draft standard has been submitted to ISO by the British Standards 
Institute (BSI) (forgive the alphabet soup), and Niklaus Wirth, 
the author of Pascal, has expressed his wholehearted support of this 
draft. The BSI draft is likely to serve as an initial version for 
all the standardization efforts. 

Meanwhile, back at the ranch, ANSI has established Technical 
Committee X3J9 on Pascal, and the committee will serve as technical 
advisory group to its ISO counterpart. Thus the ISO and ANSI 
standards will probably be developed in coordination with each 
other. X3J9 has already met once as of this writing, and its 
second meeting was scheduled for February 20-22. The first meeting 
had 70 potential members in attendance — surely a strong indication 
of Interest. The IEEE Pascal Standards Committee has been estab- 
lished under the chairmanship of Bruce Ravenal, and its first 
meeting took place on January 29. No details about this meeting 
are available as of this writing. 

It is probably not in anyone's interest to have three incompatible 
Pascal standards, and so the pressures for consolidation of the 
different efforts are likely to be strong. However, there are 
both technical and political obstacles to be oversome. The primary 
technical issue is whether the standard should involve any new 
development of the language. ISO's opinion is that it should not; 
ANSI wants to keep its options open; and IEEE has yet to express 
an opinion. The political issue is whether the IEEE and ANSI 
efforts can be merged; cooperation with ISO (at least from ANSI's 
viewpoint) is not at issue. 



But it's not over yet I 

On that fateful December 19 three more meetings occurred which I attended. 
There was the Linda Hecht/IEEE meeting, the combined dinner meeting and 
the ANSI organizers' after dinner meeting. 

Try to appreciate the politics of the situation. The ANSI X3 committee's 
secretariate is CBEMA- X3 uses CBEMA facilities and personnel. CBEMA 
looks to many like an East coast mainframe manufacturers clique. Power 
in this clique is related to market dominance. 

When X3 met to consider the PUG sponsered BSI/ISO activities, according 
to J.A.N, Lee who is ACM's representative on X3* the vote was taken to 
start a divergent competitive standards activity. This was done by 
deleting the "no language development" clause from the ISO work order. 
With this deletion a number of X3 members voted against starting X3J9* 
It is not a usual X3 policy to institute such a committee. Normally a 
committee of this sort approaches ANSI for recognition. As Lee reports 
it, this action was a direct rebuff to PUG and BSI. 

How did the IEEE get involved? Believe it or not, the IEEE actually did 
some standardization on a numerical control "language", so there is a 
precedent for their activities. Most ACM affiliates regard this somewhat 
tenuous precedent as specious. However, if you consider that the IEEE 
is the professional home of many of those affiliated with West coast 
semi-conductor manufacturers and their kindred software technologists # 4 # 

It's not hard to realize that the existing Pascal software support systems 
could help bridge the software gap between what established vendors 
provide and what the West coast upstarts need in order to sell their iron. 
It wouldn't hurt to tap the Pascal user community for customers as well. 

As soon as X3J9 adjourned, Linda Hecht, the IEEE representative, invited 
me, Jim Miner (Univ. of Minnesota), Scott Jameson (H-P), Rick Shaw (SEL), 
Bruce Ravenel (Language Resources), and Gabe Moretti (Signetics) to a 
pre-arranged meeting place In Washington. Linda explained the advantages 
of an IEEE Pascal standard - namely, speed. There were only two problems. 
1) ANSI and 2) such an IEEE committee gets carte blanche. We PUG members 
had some reservations about giving the language over to a committee one 
potential member of which asserted that he wanted to "fix Pascal so it 
would work for the engineer at his test bench." Linda's attitude was 
interesting: "Do it with us or we will do it without you." After I 
promised to solicit direct PUG membership response to the IEEE board of 
directors about this approach, she modified her position and we 
established Bruce Ravenel as liaison between IEEE and PUG. 

While Hecht, Ravenel and Company are proposing a six month standards 
activity, DEC's representative at X3J9 is talking about a five year 
ANSI effort to fix Pascal for us. 

The Pragmatics ! 

Pursuing the typical ANSI programming language standards activity over 
the usual five to seven years can cost a company or individual upwards 
of $30,000. 

Some control of ANSI X3J9's activities can be had by using their 
constitution and bylaws. Duplication of work and production of 
conflicting standards is expressly forbidden. Consensus of all major 



GO 

m 



m 



CD 
CO 



en 



interest groups is required. If PUG isn't a "major interest group" 
concerned with Pascal, I don't know what is. I believe the PUG 
membership at large should advise and consent to the standard. I have 
represented and defended this viewpoint at all meetings that I have 
attended. Incidentally the ANSI charter is designed to provide committees 
which formalize and recognize existing practice not formulate new designs . 

After the IEEE meeting on the 19th, another meeting took place over dinner. 
Those from that meeting were joined by Justin Walker (NBS), Barry Smith 
(OMSI), Bill Price (Tektronix) and a few others. Confusion about the 
day's events reigned. Then, like a light breaking through the darkness, 
someone suggested that Ruth Richert (Burroughs) be made X3J9's 
chairperson. Brilliant 1 The idea and Ruth both I I was given the job 
of calling her and asking if she would accept such a responsibility. 
(She wasn't present at the X3J9 meeting.) I called her directly from 
the restaurant. She agreed provided her management approved. Ruth has 
coordinated similar activities within Burroughs and has a track record 
for success that is legendary. (incidentally, it was Ruth who aff ectionatel 
awarded me the "order of the claw" - see PN #13 cover - at the UCSD 
workshop. ) 

The final meeting of the evening was with Justin* Walker, Bruce Price, 
Barry Smith, and about half a dozen others. Those of us who were 
particularly disturbed by X3J9's failure to elect a chairperson (as 
required by Robert's Rules of Order which govern ANSI meetings) 
explained to Justin that the lack of a chairman allowed self appointed 
officials present at the speakers platform all through the meeting to 
effectively prevent the group from voting to restrict the standards 
committee work to reviewing, clarifying and formalizing the de facto 
standard. Justin felt overwhelmed by the events of that afternoon and 
felt someone with Ruth's organizational skill would better guide the 
X3J9 work. 

No matter what happens, PUG is likely to have the final say on Pascal 
standards. I believe the important thing is to get the de facto core 
standard through ISO as soon as possible. 



american national standards committee A I f™ \ A / O ^J T I C A O C 

X3— computers and information processing IlL 1* w I 1 1_ k k f» w L> 

X4— office machines and supplies March 19 1979 

For more information, contact: 

Jess M. Irwin 

408/249-1111 (until April 4) 

617/475-4700 (after April 9) 

TECHNICAL COMMITTEE X3J9, PROGRAMMING LANGUAGE PASCAL, 
SOLICITS PUBLIC COMMENT ON THE DRAFT INTERNATIONAL STANDARD FOR PASCAL 

Washington, D. C. —The X3 Technical Committee, X3J9, Programming Language PASCAL, 
is requesting comments from the public on the ISO draft proposed standard for PASCAL. 
The ISO document is being used as a base document for the draft American National 
Standard which the committee hopes to circulate for public review within the next 
few months. X3J9 serves as the United States' Technical Advisory Group (TAG) for 
ISO/TC97/SC5, Programming Languages, and is the focal for input to the International 
arena. 

Copies of the document are available by mail order only. Requests must be accompanied 
by a $4.00 check and mailing label, addressed to: x3 Secretariat staff 

CBEMA 

1828 L Street, N. W., Ste. 1200 
Washington, DC 20036 

It is requested that comments reference the source document by section number, state 
the problem and suggest a solution. The commenter should include name, address, 
and telephone number. All comments should be returned to the Administrative Secretary, 
X3 at the same address not later than April 12 for consideration by the technical 



committee. 



Computer and Business Equipment 
1828 L Street NW (Suite 1200). 



Manufacturers Association 
Washington DC 20036 



Tel: 202/466-2299 



CBtVWSw 



CO 

3> 



CO 



do 
m 



***** 



* * * * * 



Niklaus Wirth in a letter to me dated 8 December and received 12 December, stated: 

"I have now also received a codv of Tony Addyman's proposal for an ISO standard, 
and I am irrmressed by the care and attention to details of this report. There 
is not much doubt that ISO will finally adopt it (or a later revision of it), 
and I therefore consider this document as of great significance. ..." 

"...I wholeheartedly support the ISO draft, and perhaps you should exert your 
influence on implementors to at least follow that reoort. ..." 

- Andy Mickel 78/12/13. 



A Few Experiences at the Boulder Joint Pascal Committee Meeting 1979 April 26 & 27. 

The main purpose of the Boulder meeting was to convene the TRTG chaired by Bill Price in 
order to produce an official American response to the BSI/ISO document N462. At the time 
the general feeling was that the Boulder meeting was a success although final agreement on 
the response by the whole JPC was delayed. In retrospect, the Boulder meeting was the 
most productive of the American standards effort. I was really impressed with the 
general quality of the technical discussion by most voting members at the meeting whereas 
my preconceptions were quite skeptical. The population of frustrated language designers 
which usually plague standards committees and which get their chance to ruin a language 
was fortunately small. 

Also apparent was the positive influence of JPC co-chair Bruce Ravenel from the IEEE P770 
Pascal Committee. The site of the meeting was the Computing Center at the JJm vers lty of 
Colorado, and Bruce naturally provided a historical continuity because he "cut his Pascal 
teeth" at the same university. One should not underestimate the significance of the 
joint standards effort (IEEE and ANSI) without which a protracted standards process would 
have been a certainty. 

Last but not least, the meetings were principally chaired by the very able and jovial 
Marius Troost. I feel that the group benefitted greatly from Marius's experience and 
judgment, and we were indeed fortunate to have his services. Marius congratulated Bill 
Price for his hard work with TRTG. 






-a 

3> 



Hey! Guess what I learned at Boulder? That there are people who work for computer 
companies whose sole job is to represent that company on standards committees. In other 
words, these people may know nothing about Pascal at all--never have written a program— 
and still they are there with considerable weight. Imagine my amusement when the DEC 
representative kept referring to the meeting as "X3J3" (the name of the ANSI FORTRAN 
committee). You could sure tell where she had been spending the last few years! 

Reflections 

I'd like to share some other information I've learned about the USA standards process in 
general. Actually I'm not even sure I have it all straight myself! 
First of all, terminology and basic procedures are confusing. ANSI is a non-profit, 
private (non-governmental) body whose purpose is to aid standards development of all kinds. 
The ANSI committee in charge of the area of Computers and Data Processing is called X3. 
A look at the standing membership of X3 shows a predominance of computer manufacturers and 
large businesses— not ordinary users. Additionally there is NBS (the National Bureau of 
Standards), a governmental agency within the U.S. Department of Commerce which is completely 
Separate from ANSI, and it or another agency handle Federal Standards for computing such 
as those which exist for COBOL and FORTRAN. 

One strange term you hear is "secretariat." The duty of carrying on the communications, 
document-copying and distribution, and scheduling of meetings, etc. for each standards 
committee is performed by the secretariat. The member of X3 which happens to perform 
the secretariat of X3 is CBEMA: The Computer Business Equipment Manufacturers Association. 
As the name implies, you know who controls this group! And guess who is the secretariat 
of ISO? ANSI! 

Suppose we (PUG) had decided to get an official Pascal standard adopted by ANSI. Roughly, 
the correct procedure is to make an application to X3's SPARC (Standards Planning and 
Requirements committee) to get them to consider forming a committee to consider creating 
a standards committee! This can take about a year if you are successful. 

Now the conventional view of some people in the US (and indeed some PUG members) was that 
we should have of course approached ANSI for a standards effort, because it has undertaken 
standards efforts for other programming languages and this represents a kind of precedent. 

This line of thought totally ignored the fact that other language standards efforts 
undertaken by ANSI have produced unsatisfactory results: in other words bad precedents! 
Look at the size and complexity of COBOL produced by X3J4; the original designers of BASIC 
are still crying in their sleep over the work of X3J2; and I won't waste any more words 
about FORTRAN and X3J3 (see David Barron's editorial on page 3 of PN #13). 

These were all committee efforts dominated by representatives of the large computer 
manufacturers and the US government and took many, many years. Why did we have to make 
these mistakes? 

Fortunately we didn't. Although there was an attempted move at the first X3J9 meeting in 
Washington to not even consider the work on a Pascal Standard already done by PUG and BSI 
and to undertake an effort from scratch, it was fortunately defeated. It was also simply 
amazing that so many of the attendees of this meeting were not even PUG members! We may 
be only lucky that the real reason we were able to defeat such a chauvinistic American 
move (in the face of a cooperative international initiative) was that we users were 
organized through PUG and informed through Pascal News . 



So everything has turned out fine so far and people ask me why I was so worried and sure 
that things would go wrong. Well, there was a lot at stake: there were no guarantees 
about avoiding a long, misguided effort directed by the manufacturers instead of the users, 
and we knew that the international effort was already underway. My hope was expressed in 
a letter to SPARC on page 86 of PN #13: ANSI had an opportunity to reciprocate its respect 
with ISO—several ISO standards are one line saying "see ANSI standard xxx" and for Pascal, 
a language with European origins, the standardization whould be left to Europeans. 

Before the December X3J9 meeting in Washington, the BSI/ISO proposal caught X3 off guard 
and several SPARC steps were skipped over and X3J9 was immediately set up and then this 
first meeting was set (wasn't that easier than the regular procedure?) . I was still 
personally very angry that only afterwards did the secretariat inform PUG. Why didn't 
they check with us for information? No matter that PUG already existed and represented 
the majority of Pascal users! Anyway, at the December meeting, Justin Walker of NBS 
chaired X3J9 temporarily and several committees were set up: one produced the SD-3 
reproduced above— a document outlining the goals of X3J9 similar to documents existing 
for the BSI and ISO Pascal initiatives. 

Jess Irwin was selected by the group as secretary, who has the important task of indexing, 
reproducing, and distributing documents. These documents range from announcements (and 
pronouncements) from X3 to papers discussing technical issues. So far the Joint Pascal 
Committee has over 200 documents, and even the document register (index) itself is a 
numbered document! 

The people attending the Washington meeting with the intention of representing PUG were 
Jim Miner, Rich Cichelli, and Rick Shaw. Because Rich and Rick wanted to also represent 
their organizations (ANPA/RI and SEL respectively), they weren't allowed to do this. Thus 
Jim became PUG's representative and I became his alternate. 

Fortunately the standards activity is a public process, but unfortunately the resources 
required by the attendees are immense in order to pay for the time, lodging, and travel 
expenses. This greatly favors individuals representing big corporations with expense 
accounts (tax deductible, no doubt). In fact the longer the computer manufacturers can 
drag out the standards proceedings, the more power their representatives have toward the 
end of the process because they will be practically the only ones there! So standards 
activities, supposedly in the best interests of the users, effectively exclude user 
participation! 

Jim Miner, in fact, has gone to 2 meetings on his own money, and we both went to the 
Boulder meeting on our own money. Finally NBS is helping Jim pay for plane fares to 
upcoming meetings. 

- Andy Mickel 79/08/31. 



l^^TlVlV^riVlVlV 






CO 

m 
-o 



Did you know that pascal has already been standardized? 
One ISO SI Pascal is a newton/m 2 



no 

CD 






Validation Suit* 

The University of Tasmania 




Postal Address: Box 252C, G.P.O., Hobart, Tasmania, Australia 7001 
Telephone: 23 0561. Cables 'Tasuni' Telex: 58150 UNTAS 

Dear Pascal User, 

In the past you have asked about the availability of a Pascal validation suite of 
programs, or I have reason to suspect that you are interested in this topic. 

I enclose therefore a copy of a press release concerning Release 2.0 of this 
package (the first public one) as at 13th July 1979. Should you wish to receive a 
copy of the Validation Suite, contact your nearest distributor. Only handling 
charges will be levied to cover the average cost of a magnetic tape, postage, and 
follow-up information. 

Any comments on the package and its use will be welcomed, though as I anticipate 
a number of letters, I may not be able to acknowledge each one personally. 

Distribution Centres 

In the USA and the Americas: 
Richard J Cichelli 
ANPA/RI 
P.O.Box 598 
Easton, Pa. 18042 
USA 

In Europe: 

Brian Wichmann 

National Physical Laboratory 

Teddington, Middlesex 

England TW11 OLW 

United Kingdom 

In Australia, New Zealand and Japan: 
Pascal Support 

Department of Information Science 
University of Tasmania 
Box 252C G.P.O. 
Hobart, Tasmania 7001 
Australia 

Other places: 

Choose the nearest distributor. 

Addresses for suggestions or complaints: 

Sept 1979 . . Feb 1980 March 1980 on 

Prof A. H.J. Sale Prof A. H.J. Sale 

c/o Computer Studies Group Department of Information Science 

The University University of Tasmania 

Southampton Box 252C G.P.O. 

England S09 5NH Hobart, Tasmania 7001 

United Kingdom Australia 

The distribution format convenient to each distributor varies, so please enquire 
before sending money. 

Yours sincerely/^ 



Phone (215) 253-6155 
Fee US $ 50.00 

Phone (01) 977-3222 
Fee not known 

Phone (002) 23-0561 X435 
Fee Aus $ 50.00 



JS<(j<k- 



-o 

3> 






PRESS RELEASE 

PASCAL VALIDATION SUITE AVAILABLE 

Pascal has joined the select group of languages, which include COBOL, which 

have a validation set of programs to check that compilers and machines 

conform to the requirements of the Standard. Released on Friday 13th July 

by Arthur Sale at the University of Tasmania, the validation suite is expected to 

find wide use almost immediately. Many machine suppliers and software houses have been 

waiting for its release in order to assist them in developing compilers for Pascal 

that will be acceptably correct. 

The present release, numbered 2.0 as there was a previous unreleased version, 
contains 283 separate programs. About 150 of these are tests to check that 
compilers and machines conform to the requirements of the Pascal Standard, and 
about another 70 check that the system does not deviate outside its requirements. 
The remainder explore the requirements of the Standard in areas defined to be 
errors or implementation-defined, or attempt to assess the quality of the compiler in 
various areas. 

Release tapes can be obtained from a number of distribution centres around the world, 
for basically handling charges. Further information is obtainable from the 
Department of Information Science, University of Tasmania, Box 252C G.P.O., 
Hobart, Tasmania 7001. 

The validation suite was developed by Brian Wichmann in the U.K. and Arthur Sale 
in Tasmania under the auspices of the Pascal Users Group. The intention of the 
package is to encourage a very high degree of portability of Pascal programs 
(even higher than presently exists), and to provide users with a mechanism to 
assure themselves that vendors 1 products comply with the Standard. It is expected 
that validation reports on compilers will shortly be published in Pascal News: 
three are already complete. Such reports will encourage suppliers to enhance the 
quality of their products. 

The announcement again highlights the rapid development of Pascal as a serious 
programming language for use in the computing marketplace, and not simply 
another academic toy. 



CO 



at®*jN<g &<®m 



alfftatton ^lttt* 



Pascal News #16 









Arthur Sale 



Implementation Notes 



Portable Pascals 



PASCAL-P 



Pascal-P ordering information has changed. In North and South America, order from: 

William Waite 

Software Engineering Group 

Electrical Engineering Department 

University of Colorado 

Boulder, Colorado 80309 

Phone (303) 492-7204 
In Australia, order from: 

Tony Gerber 

Basser Department of Computer Science 

University of Sydney 

Sydney, New South Wales 2006 

Australia 

Phone 61-02-692-3756 (Gerber), 61-02-692-2541 (Dept Sec) 

Tony reports that his Pascal-P distribution costs are now A$20 for an unconfigured tape 
and A$40 for a configured tape. Of course Chris Jacobi is still distributing Pascal-P in 
Europe, Africa, and Asia from ETH, Zurich. 



Arthur Sale reports that he may embark on producing a Pascal P5 which will 
forthcoming ISO Standard Pascal, when he knows what it is. 



implement the 



{For those that don't know, Pascal-P is the parent of many of the present crop of Pascal 
compilers - not very useful by itself but modifiable to other target machines by supplying 
a changed code-generator. The bugs in Pascal-P are very widely distributed! > 



PASCAL 



A new portable Pascal compiler has been under development for some time at Vrije 
University in Amsterdam by Andrew Tanenbaum and his co-workers. This compiler was 
initially derived from Pascal-P2 and generates an intermediate code called EM-1. EM-1 
(for Experimental Machine) is an optimal stack machine architecture for stack languages 
such as Pascal. 

The PDP-11 implementation of Pascal-E comes with an EM-1 code optimizer which produces a 
final compiler in only 20k bytes. This compiler has been covered in Pascal News #11 p87 
under DEC PDP-11. The system runs under UNIX and Andrew Tanenbaum described the system at 
the UNIX Conference in Toronto in June. 



His address is: Computer Science Group, Vrije University, 
Amsterdam, The Netherlands (020-5482410). 



De Boelelaan 1081, 1007 MC, 



Pascal Variants 



TINY PASCAL 



3> 
OO 



Supersoft < What does that make you think of? > have announced a Tiny Pascal fpr TRS-80 
and North Star. It is supposed to run at least 4 times faster than Basic and requires a 
Level II TRS-80 with 16k and a 24k North Star. Tiny Pascal is < of course } Tsubset o? 
Pascal, and apparently includes: ouuoeu Ui 

"recursive procedures /functions, if -then-else, repeat /until, 
peek and poke, while, case, & more" 
Cost: $40, from 

Supersoft 

P.O.Box 1628 

Champaign, IL 61820 

(217) 344-7596 
{Lie back, relax, and let Supersoft Pascal take care of your troubles. PUG makes a free 
girt of the above slogan. > 



PASCAL 



PASCAL-I 



We have some new information on an implementation of Pascal-S for the PDP-11 presented 
below. Rich Cichelli sent an update for Pascal-I (see article in this issue), the very 
nn^Vh? ^mentation of Pascal-S designed for highly interactive use. Note that we 
put Rich s previous checklist under CDC 6000 in Pascal News #11 p 82. . 

EASTERN KENTUCKY UNIVERSITY 

Richmond, Kentucky 40475 



COLLEGE OF ARTS AND SCIENCES 
Department of Mathematical Sciences 

Dear Andy, 



October 19, 1978 



I have developed an extended version of PASCAL-S which runs on a PDP 11/70 
using RSTS version 6C. The compiler-interpreter is written in 0MSI PASCAL and 
seems to execute about 2000 P-code instructions per second when the execution 
profiler is turned off. Extensions to PASCAL-S include: 

1. Graphics similar to UCSfc PASCAL for the Tektronics 4006. 

2. Scalar types and associated operators. 

3. Strings and arrays of characters can be compared and assigned. 
*t. Arrays of characters can appear in READ and WRITE statements. 

5. READ and WRITE default to the user terminal; however, the user can specify 
files for READ and WRITE at runtime. 

6. A weak form of the IN operator is supported, i.e., IF CH IN [ , A , ..'Z'-, '0'.. 

7. A legible symbol table dump can be obtained. 

8. An execution profile can be obtained. This report gives the number of 
instructions and the time spent in each procedure. 

9. A random number generator and a time call are built in. 



m 



DO 

m 

ZX3 



CD 

to 



'9']. 






CD 



10. All programs are given a DAY, DATE, and TIME stamp. 

Current symbol table size is 120; code vector size is 1000, and the runtime 
stack size is 1500; consequently, the system's primary use is educational. 

The code section compiles into a little over 16K words with the syntax analyzer 
and interpreter overlaying each other. This leaves about 12K words for variable 
storage and 10 Buffers. 

Extensions 1 and 2 are essentially due to Don Baccus of 0MSI; however, 
the bizarre way our system handles control characters and carriage returns' 
necessitated extensive reworking of the graphics system. Extension 8 was 
adapted from Matwin and Missala (PUG #12). 

1 would like to correspond with and/or trade implementation details 
with the other PASCAL and PASCAL-S users. Enclosed is a sample program 
which finds knights tours of a chessboard. 



10. DEVELOPMENT METHOD: Started with PASCAL-S and Wirth-Jensen 1/0 routines. Built suitable 
data structures for storage of compressed program source and interpreter code. Modified 
PCSYSTM to fully recover from user aborts and system timeouts. Also added file access 
primitives and moved stack and heap to low core to enable the segmented loader to vary 
field length. The system is about 7500 lines of tightly formatted PASCAL. 

Implementor responsibilities: 

Curt Loughin - Editor, Formatter, PASCAL-S compiler rewrite, PASCAL-S interpreter 
rewrite, and Immediate code routines. 

John McGrath - 1/0 routines rewrite, HELP command, PCSYSTM mods. 

Richard Cichelli (project leader) - Post mortem dump and other run-time control 
and status routines. 



3> 



CONCURRENT 



PASCAL 



0. 

1. 



4. 



6. 
7. 



Sincerely yours, 



Dr. Jerome ft. LeVan 

Associate Professor of Mathematical Sciences 



DATE/VERSION: PASCAL-I, 30-MAR-79, Release 2.03 



IMPLEMENTATOR/DISTRIBUTOR/MAINTAINER: 
Richard J. Cichelli, 901 Whittier Drive, 
J. Curtis Loughin 
John P. McGrath 



Allentown, Pa. 18103 



Note: We have had no word from Per Br inch-Hans en on the 
Pascal promised for this issue. Perhaps in PN #17... 



survey of users of Concurrent 



MACHINE: Machine independent. 25 installations on CDC, DEC, IBM, and other computers. 
Written entirely in PASCAL using some features of PASCAL 6000 (segmented files for terminal 
1/0 to flush buffers and read past EOF on terminal input). 

SYSTEM CONFIGURATION: Developed under SCOPE 3.4 with INTERCOM using the CDC segmented 
loaded. Installed on many others. 



DISTRIBUTION: 600' magnetic tape. 
800 bpi ASCII or EBCDIC. Pascal-I 
payable in U.S. dollars drawn on a 



SCOPE internal format, 7 track, 800 bpi, or 9 track 
isn't in the public domain. Price - $100. Make check 
U.S. Bank to Richard J. Cichelli. 



DOCUMENTATION: 
System Level : 
User Level : 



Very readable code (guaranteed) 

Machine readable users manual 

System explains itself in response to the HELP command (full details 

oriented towards novice programmers.) 



MAINTENANCE: Accepting bug reports. 

STANDARD: Supports PASCAL-S. Differences from standard PASCAL - files - only INPUT 
and OUTPUT, no sets, pointer variables, case variants, labels, goto's or with statements 
Any PASCAL-S/PASCAL-I program is a valid PASCAL program. 

MEASUREMENTS: Interpreter and overlayed. The compiler forms the largest overlay segment 
and runs at 33,000 (octal) words. The editor segment runs in about 24,000 (octal) words. 
PASCAL-I will compile and interpret PASCAL-S programs of up to about 500 lines as the 
system is currently configured. 




9. RELIABILITY: Runs just great. 



Implementation Notes 



Osterreichische 

Studiengesellschaft f iir Atomenergie Ges.m.b.H. 

Lenaugasse 10 • A-1082 WIEN • Austria 

Cyrrent_State_of_the 
B§^llLLl3}eismentation 
of Concurrent Pascal 



We have moved P.B. Hansen's Concurrent and Sequential Pascal 
compilers from the Solo operating system to RSX11M (and RT1 1 ) 
so that we could develop Concurrent and Sequential Pascal 
programs in a customary timesharing environment. 

This was done about 2 years ago. 

In the meantime we have developed a new Concurrent Pascal 
Kernel which differs from the original Kernel in some points. 

The main differences are: 

- The system can run on all types of PDP11. 

- An interactive trace facility can be used to make program 
flow and process switching visible on a, terminal. 

- The number of processes is only restricted by the available 
memory space. Process switching is very fast. A process 
needs only 9 words system overhead. 

We had a pilot project using 60 concurrent processes. 

- The process scheduling strategy is a simple demand scheduling 
(no time slicing or "round robin" scheduler) 

- The kernel runs as a single task under RSX11M. No memory 
management directives are used. 

- The interface to the operating system is simple. The kernel 
communicates with RSX11M only via a few QIO/AST statements. 
At the moment the Concurrent Pascal kernel supports only 
terminal I/O. Other devices may be connected in the same way. 



CO 

m 






- At the moment the loading and executing of sequential programs 
in a Concurrent Pascal program is still not supported. 

- Only one process at a time can execute a "WAIT"-instruction. 

- A "powerfail restart" facility can be used by a Concurrent 
Pascal program in the same way as a device. A process 
performing an I/O operation on the power fail device is 
suspended until power fail restart occurs. 

The trace facility is very useful for demonstration purposes 
and program testing. The following lines show a sample trace 
output of P.B. Hansen's "realtime scheduler": 



>f USE THE INTERACTIVE TRACE FACILITY 



>CER SCI 

*** CONCURRENT PASCAL KERNEL START *** 



f T CER>HP 4 

ft CER>LL 273 HL 282 

ft CER>EVENT 10 OFF 

f T CER>PRINT ON 
EXIT ROUTINE 
EXIT MONITOR 
EXIT MONITOR 
EXIT ROUTINE 
EXIT MONITOR 
EXIT MONITOR 
EXIT ROUTINE 
EXIT MONITOR 



set upper limit cf process numbers to be traced 
set range of line numoers to be traced 



IN PROCESS 00002 , 

IN PROCESS 00003 ♦ 

IN PROCESS 00004, 

IN PROCESS 00003* 

IN PROCESS 00002, 

IN PROCESS 00003, 

IN PROCESS 00003, 

IN PROCESS 00004,. 



AT LINE 00279, 
AT LINE 00277, 
AT LINE 00276, 
AT LINE 00278, 
AT LINE 00276, 
AT LINE 00279, 
AT LINE 00279, 
AT LINE 00277. 



f T CER>ENTER EXIT MENTER MEXIT DELAY CONTINUE OFF LINE ON 



NEW LINE 




IN 


PROCESS 


00003, 


NEW LINE 




IN 


PROCESS 


00004, 


NEW LINE 




IN 


PROCESS 


00003, 


NEW LINE 




IN 


PROCESS 


00004, 


NEW LINE 




IN 


PROCESS 


00004, 


NEW LINE 




IN 


PROCESS 


00003, 


NEW LINE 




IN 


PROCESS 


00002, 


NEW LINE 




IN 


PROCESS 


00004, 


ttCER>LINE 


OFF 


DELAY CONTINUE 


ON 


TTCER>CONTINUE 


OFF 






TTCER>LP 3 


HP 4 








TT CER>LL 


HL 








DELAY 




IN 


PROCESS 


00004, 


DELAY 




IN 


PROCESS 


00004, 


DELAY 




IN 


PROCESS 


00003, 


DELAY 




IN 


PROCESS 


00003, 


DELAY 




IN 


PROCESS 


00004, 


DELAY 




IN 


PROCESS 


00004, 


CER>LP 


HP 


CONTINUE ON 




CONTINUE 




IN 


PROCESS 


00002, 


, ♦ ♦ 




IN 


PROCESS 


00003, 


DELAY 




IN 


PROCESS 


00002, 


CONTINUE 




IN 


PROCESS 


00005, 


♦♦♦♦♦♦,♦ 




IN 


PROCESS 


00005, 


DELAY 




IN 


PROCESS 


00002, 


CONTINUE 




IN 


PROCESS 


00003, 


.»,♦,,,, 




IN 


PROCESS 


00004, 


DELAY 




IN 


PROCESS 


00003, 



AT 


LINE 


00281, 


AT 


LINE 


00278, 


AT 


LINE 


00276, 


AT 


LINE 


00279, 


AT 


LINE 


00280, 


AT 


LINE 


00277, 


AT 


LINE 


00278, 


AT 


LINE 


00281, 



AT LINE 
AT LINE 
AT LINE 
AT 
AT 



00160, 

00139, 

00160, 

LINE 00139, 

LINE 00160, 



AT LINE 00139, 



fC 



AT 
AT 
AT 
AT 
AT 
AT 
AT 
AT 
AT 



LINE 00145,- 
LINE 00139, 
LINE 00160," 
LINE 00166,1 
LINE 00324,/ 
LINE 00139, 
LINE 00145,\ 
LINE 00139, 
LINE 00160, 



>■) 



i:} 



PROGRAM HISTORYt 



DELAY 



DELAY 



DELAY 



IN PROCESS 00003, AT LINE 00139, 

IN PROCESS 00004, AT LINE 00139, 

IN PROCESS 00003, AT LINE 00160, 

IN PROCESS 00004, AT LINE 00139, 

IN PROCESS 00003, AT LINE 00160, 

IN PROCESS 00004, AT LINE 00139, 

IN PROCESS 00003, AT LINE 00160, 

IN PROCESS 00004, AT LINE 00139, 



3> 

GO 



*** CONCURRENT PASCAL KERNEL END *** 



This system has been used successfully in an industrial process 
control application under RSX11S. It will probably run under 
IAS and RSX11D, too. The complete software package is available 
for 5.000,- Austrian Schilling i> 350 US$). 

The main drawback of the Concurrent Pascal compiler is that 
it produces relatively slow threaded code (PDP1 1 -Fortran is 
about 2.5 times faster). To overcome this disadvantage we 
plan to build a Concurrent Pascal precompiler for the highly 
efficient OMSI Pascal compiler. 

Nevertheless the current system is an excellent programming 
tool for non time critical or I/O-bounded tasks. Compared to 
RSX1 1 -realtime-multitask applications the Concurrent Pascal 
system is many times faster, since task switching and eventflag 
synchronisation is a very slow process in RSX1 1 . 






Yours sincerely, 
Dipl.Ing. Konrad Mayer 



GO 

m 



CO 



M D U L A 



Modula is an experimental attempt to build a real-time programming language with 
structure. We reproduce the abstract page of the Modula-2 report by Niklaus Wirth, which 
is an attempt to put Pascal back into Modula. The other abstracts in this section relate 
to work done by York University on Modula-1, and their implementation. Write to them for 
copies or distribution tapes. 



PROGRAM TERMINATED AT LINE 00277, IN PROCESS 00004, 



Modula-2 
Inst it ut 


by 
fur Inf 


*. Wirth 
ormatik, 


ETH, CH-8092 Zurich, 


December 


1978. 












Abstract 
























Modula-2 is a 
implementation . 
style. 


general 
This 


-purpose programming 
report constitutes 


language primarily designed for 
its definition in a concise, though 


systems 
informal 


Note: No 


compiler is available 


for distribution at this 


time. 













CD 



UNIVERSITY OF YORK 

HESLINGTON, YORK, YOl 5DD 

TELEPHONE 0904 59861 



their experiences with the language or with the York compiler. Of 
course we would be delighted to hear from anyone who would like 
to take delivery of their first Modula compiler! 



12 January 1979 



Yours sincerely 



Dear Mr Mickel 



Univers ity of York Modula Compiler 
Second Release 



The second release of the Modula (UNIX/PDP-11) compiling system 
will be made during February 1979. In comparison with the first 
release the following changes are incorporated in the second 
release : 

* all known compiler errors will be corrected, 

* the VALUE clause (for the load-time initialisation of 
level variables) and the standard functions 'off and 
'among' will be implemented, 

* optional run-time checks for CASE expression out of 
range, array index out of range and a procedure exceeding 
its stated depth of recursion will be implemented. The 
recursion depth of procedures inside Device Modules will 
not be checked , 

* the port ability /boo ts t rapp ing interface between passes 2 
and 3 of the compiler will be brought into line with the 
description in Wand(1978), and 

* the set of test programs will be extended and improved. 

The only language restriction remaining in this release will be 
'declaration before use'. 

Users of the first compiler release who received a magnetic tape 
from York are requested to return the tape for the second 
release. No charge will be payable for existing users of the com- 
piler who wish to update to the new release. Our charges to new 
users are 300 pounds to commercial customers and 50 pounds to 
educational and research institutions not in the United Kingdom. 



- \%L^~ 



I C Wand 



,L y.£&a 



I D Cottam 



[* Note: we have reports that Jeff Tobias has modified this compiler to produce code 
for the Intel 8086. Jeff is at the AAEC Research Establishment, Private Mail Bag, 
Sutherland 2232 N.S.W. Australia. Also Steve Bruell , Pete Zechmeister, David Boone, 
and others are working with John Collins at 3M in St. Paul, Minnesota to modify the 
comoiler to produce code for the Motorola 6809. John is at 3M Center, Bldg 235 F247, 
St. Paul, MN 55101, phone: (612) 736-0778. *) 

Ref erence 

I C Wand, 'MCODE: A description of the bootstrapping interface of 
the University of York Modula compiler', Report Number 14, 
Department of Computer Science, University of York (1978) 

ABSTRACT OF "MCODE" 



by Ian Cottam, Dept of Computer Science, 
England. Phone (0904) 59861. 



University of York, Heslington, York YOl 5DD, 



"The front-end of the York Modula compiler is a two-pass compiler that translates Modula 
(Wirth 1977) source programs into an object program for a hypothetical target processor. 
In this document we will call this object code MCODE and the hypothetical processor, the 
MMACHINE. The architecture of the MMACHINE has been designed so that MCODE can be mapped 
without undue difficulty onto existing mini and microcomputer hardware. 

It should be emphasized that the MMACHINE is only suitable for the realization of Modula 
programs and that it contains many primitives, eg DO 10, which directly reflect the 
operations required in a Modula run-time environment." 

{ We apologize for the capitalization in the above abstract, but the introduction was 
written that way. > 



Suggestions from users (and others) for longer-term enhancements 
are most welcome. At the present time the following seem the most 
likely: 

* an alternative 'back-end' producing code for one of the 
new 16-bit microprocessors. This will probably be one of 
the set [68000, Z8000, 8086], 

* a User Guide, and 

* facilities for separate compilation. 

At present the University of York has no plans to produce ver- 
sions of the Modula compiling system that run under different 
PDP-11 operating systems, although it is hoped that versions 
which run under RSX-11M and RT-11 will be developed by collabora- 
tion with other UK Universities. 

We would be interested in hearing from any Modula user about 



Holden, J. and Wand I.C., An <U£>oj>&me.Yit o& Modula, York Computer Science 
Report No 16, November 1978, 41 pages. 



Abstract: 



calle 

of pr 

inpu t 

for M 

same 

numbe 

quenc 

f icul 

inves 

langu 

shows 

gener 

langu 



Wirth 
d Mo 
oces s 
/ ou tp 
od ula 
mach 

of 
y cl 
ties 
tigat 
age o 

the 
al p 
age; 



has 
dula 

cont 
ut d 

runn 
Ine . 
PDP-1 
ocks , 

ros e 

d 
by 
ext 
urpos 
areas 



recen 
whic 

rol s 

evice 

ing o 
The 

1 dev 
disk 
duri 

nd 

minor 

ent 

e re 
of d 



tly pub 
h he su 
y s terns , 

drivers 
n a PDP- 
ir exper 
ices is 
s, CAMAC 
ng the w 
olutions 

mod if Ic 
to whic 
al-time/ 
ef icienc 



lished 
ges ts 
compu t 

The 
11 and 
ience 
report 

and a 
riting 

propo 
at ions 
h Modu 
sy s t em 
y are 



is su 
erise 
autho 

gene 
in wr 
ed, i 

grap 

of t 
sed 

to 
la me 
s 1m 
noted 



new pr 

itable 

d labor 

rs have 

rating 

iting d 

ncludin 

hies pr 

hese pr 

either 

the la 

ets the 

plement 



ogra 
for 
a tor 

wri 
ob j e 
evic 
g si 
oces 
ogra 
with 
ngua 

req 
atio 



mmi 
the 

y 

tte 
ct 

d 
mpl 
sor 
ras ; 
In 
ge • 
uir 



ng 

pro 
quip 
n a 
code 
rive 
e ma 
S 
th 
the 

Th 
emen 
pro 



language 
gramming 

ent and 
compiler 

for the 
rs for a 
ins fre- 
ome d If - 
e s e are. 
exis t ing 
e study 
t s for a 
gramming 



CD 



Cottam, I.D., Functional Apzci&lcation oi tkz Modulo. ComplleA, York Computer 
Science Report No 20, March 1979, 69 pages. (Release 2 for 
PDP-11/UNIX systems) 

Abstract : 

This document is the functional specification of the 
University of York Release 2 PDP-11 MODULA compiler. It 
is assumed that the reader is familiar with the defining 
document for the programming language MODULA: 



"N.Wirth; MODULA, A language for modular 
Software - Practice and Experience 1_ 
No.l, 3, (1977)" 



multiprogramming . 



York MODULA conforms closely to standard MODULA as defined in 
[1J. Differences between the two versions are detailed in 
Section 3. As well as being the specification against which 
the compiler is written and tested 15J, this document 
serves as a programmer's reference manual. 

The York MODULA compiler operates under the control of the 
UNIX operating system and in conjunction with the standard 
UNIX PDP-11 assembly language processor "as". 



Rumours Department 



UDS-470 

A new microcomputer is being marketed by Control Systems Inc, 1317 Central, Kansas City, 
Kansas 66102 (931-371-6136), also Minneapolis & Williamsburg. This is a microcomputer 
development system offering UCSD Pascal(TM), but with special features for putting the 
developed code into ROM/PROM. Designed for fast development of prototypes, one-off 
systems, etc, in industrial environments. 

Western Digital Micro Engine 

Probably everyone has heard of the Western Digital chip set which implements a 16-bit 
microcomputer based on the highly modified version of P-code generated by Ken Bowles' 
compilers. Naturally it runs a lot faster than an interpreter, and provides super speed 
when it works (and if you can get one). The race is now on between Western Digital's 
direct frontal attack on the speed issue in microcomputers, their competitors heading in 
the same direction, and the highly optimizing compilers generating native code for the 
older micros and their strange architectures. Watch this with interest, it should be fun. 
So, Pascal, cut another notch in your belt: even specially designed computers have come so 
you're right up there with Algol 60 (the Burroughs large machine range) and Fortran (the 
Control Data crunchers) . 

S-100 Bus 

Digicomp Research Corp., Ithaca, N.Y., have developed a processor board which incorporates 
the WD Micro Engine (TM) and which plugs into an S-100 bus. The board is said to run at 
least 2 times faster than the interpreter system on a PDP-11 /34, and complies with the 
IEEE S-100 Standard. Price: around $995. 

Pascal/8002 

A Pascal /8002 Universal Program Development Package has been designed for use with 
Tektronix's 8002 Microprocessor Development Laboratory. It provides editor, compiler, 
assembler, linker, etc. Contact Pascal Development Co, Suite 205, 10381 S DeAnza Blvd, 
Cupertino, California 95014, with your ready $2000. 



CO 



Kees Smedema in North American Philips is believed to be working on a Modula compiler for 
the LSI-11 written in Pascal. Kees's address is Philips, 345 Scarborough Rd, Briarcliff 
Manor, NY 10510 (Phone 914-762-0300). 

Wendy DuBois, Zilog Corporation, 10460 Bubb Rd, Cupertino, CA 95014 (408-446-4666) has not 
kept us informed about the York Modula written in C at Zilog. 

Modula for Z-80: Gerd Blanke, Postbox 5107, D-6236, Eschborn, Germany, may have a system 
for Zilog MCS with 64k under RIO. Phone (06198) 32448. 



PASCAL-PLUS 



National Semiconductor 

We are watching with interest National's efforts to support Pascal on a micro chip set 
(based on their 16-bit 2903A and 2910A microprocessors) 

better than their competitors. It is certain that most of the current micro 
architectures are unsuitable for any software, so it is not hard to do better. But 
wouldn't it be nice to have a computer architecture which was as elegant as Pascal? 

F«atur« Implementation Not«» 



James B Saxe and Andy Hlsgen 
c/o Pascal User's Group 
University Computer Center 
208 SE Union Street 
University of Minnesota 
Minneapol is, MN 55455 



Montreal, March 26, 1979 



DO 

m 



CO 
U3 



A new entry. Pascal-Plus is a set of extensions to Pascal making up an experimental 
language which provides concurrency and modularity. We reproduce the abstract of a report 
received on Pascal-Plus. A working compiler for ICL 1900 computers is available from 
Belfast (address below), and we understand that a Pascal-Plus-P is in preparation. 



Dear James and Andy, 

I read with great satisfaction your paper In PN #13 describing 
"Lasy Evaluatin of the File Buffer for Interactive I/O". I arrived 
exactly to the same solution when making an ASCII version of Pascal 
6000 compiler for CDC Cyber 173 at Unlverslte de Montreal In April 
1976. I used 1t with real pleasure and without problem since that 
time. 

I hope this solution be widely accepted and I suggest Pascal 
standard stick to it < cf PN #14). 



Hardware Notes 



A new section; devoted to retailing gossip and news of Pascal's influence on new hardware. 
Marginally relevant is the discovery of an instruction in the DEC VAX 11/780 which MUST 
have been influenced by Pascal. It is even called the CASE instruction. How's that, Tony 
Hoare, even an instruction named after your invention! 



. r ^ -- 



4 <=> 



r\ 



en 



Serge Froment 

Unlverslte de Montreal 

Projet C.A.F.E. 

Case Postale 6211, succursale 

Montreal (Quebec) H3C 3Y9 



R. K. RJdalJ & CO. Inc. ^ 620 Tanglewood Lane, Devon, Pennsylvania 19333 ^= (215) 647-4212 

1979 January 26 
Dear Andy: 

We have been using the University of Lancaster's P4 Pascal for 
the Data General NOVA series computers for some time now. It 
Is quite good for its purpose -- teaching programming. What is 
so tantalizing about this system is that it is almost complete 
enough for writing sophisticated applications, but not quite. 
I offer the following "wish list" as a guide to Pascal implemen- 
tors : 

1: Full ASCII character set, especially lower case. 

2: Sets of 128 members, to accommodate SET OF CHAR. 

3: Date and time of day routines, for labelling reports. 

4: Elapsed time function, so that one could use the 

instrumentation program AUGMENT in Pascal News #12. 

5: Real numbers of 12.. 16 significant digits (in addi- 
tion to ordinary real, not instead). 

6: Full output formatting of real numbers (of the form 
WRITE(X: 10:2) as in standard Pascal). 

7: Random access files with records from 16.. 512 bytes 
in length, not just two fixed sizes. The record size 
should be deduced from the RECORD type declaration. 

Pete Goodeve's assembly language interface makes it possible 

to do 3 and 4, but it would be much more convenient to have 

these "built in" to the compiler. 

Yours truly, 

■->;'■:'. ■'".<*£ //>' /"' * ; ''-' :v :.'><**: - . 

William G. Hutchison, Jr. 
Consul tant 



^T i* & 



: -^ , ,~™~ r-rrf March 28, 1979 

rr-r""- "t" ". jQhn F|uke Mfg Cq |nc _ / pQ Bqx 4321Q / Mount | ake Terrace WA 98043 / (206) 774 2211 

To: All Pascal Implementors 

Having used many different Pascals on different 
machines, and having had the opportunity to study some 
forthcoming and as yet unannounced compilers, I notice a 
disturbing trend in some of the more recent implementations: 
that of embedding program semantics in the compiler 
directives to increase the "power" of the language and to 
compensate for laziness on the part of the implementors. 



My suggestion: a compiler directive is acceptable as 
long as it does not affect the semantics of a program. A 
program should run correctly independently of directives. 
This means the following are acceptable: 

a. Listing Control (including titling, underlining of 
keywords, prettyprinting, the printing of warnings). 

b. Optimization Control (as long as the optimizations 
will not affect the correctness of the program). 

c. Acceptance or rejection of language extensions. 

The following are definitely not acceptable because they 
hinder transportability and are often implemented because of 
sheer laziness on the part of the implementor. 

a. Options changing the meaning of functions or 
operations (e.g. turning i/o checks on and off) that 
a programmer could use to affect the correctness of 
program execution. Even if a programmer utters the 
names of seven demons in the right order, he should 
not be given a "window to hell" or other access to 
magical powers. 

b. Selective Compilation (I could really take off here). 
Selective compilation is used where it is known at 
compile time that certain code if not needed. I 
assert that the following examples show how this may 
be done in an alternative way if the compilers are a 
little more intelligent: 

const debugversion = false; 

if debugversion then writeln( output, '...' ); 

(an intelligent compiler can eliminate the above] 

const outputformatversion = 3; 
case outputformatversion of 



end; {case} 

{an intelligent compiler can select, the right 
alternative and compile it in-line} 

it's not as if this is particularly difficult: at 
least one existing compiler can incorporate the above 
with a minimal additional effort. Another compiler 
that is under implementation incorporates a 
complicated meta-ianguage embedded in the comments; 
if that were eliminated and the above implemented 
(the implementors say there will be extensive 
optimization too...), the compiler would be so much 
simpler and better. 






The dinosaurs a 
L/1 .. ) so let's keeo 



s extinct (well, almos 
it that. way. 



There is still 




K.S. Ehaskar 

E n g i n e e r • i n g S y s t era s 

Programmer- / Analyst 






CD 



IMPLEMENTATION FEATURE NOTE 

PROBLEM 

The user of Pascal is entitled to rely on the features of the language 
being correctly implemented, however difficult this may be. The 
abstraction takes precedence over implementation convenience. 

In one problem I have observed, the for-loop fails to carry out the 
expected action if the second limit expression evaluates to maxint 
and the statement has the to. form, (in some processors the downto 
form will similarly fail if the second expression evaluates to —maxint, J 
For example, the statement: 

for i := (maxint-2) to. maxint do. writelni i) ; 

has been known to print 

32765 

32766 

32767 
-32768 
-32767 



and so on. This is of course entirely erroneous behaviour and should 
not be tolerated. The problem is, of course, that the value of the 
for-control-variable has overflowed the integer representation, and in 
the case cited the overflow is simply ignored. 

If the overflow causes a program abort, the user might be slightly more 
satisfied at knowing of the implementation deficiency, but will still note 
that perfectly correct Pascal statements are not acceptable ... (Reducing 
maxint by one is an ugly solution. J 

SOLUTIONS 

In some computers; for example the Burroughs B6700, the architecture makes 
it easy to avoid this problem. However, in most mini- and micro-computers 
it may appear to be very difficult. 

One solution is to substitute a "trip-counter*' in the implementation as 
the loop-controlling value; another is to use the code- template: 

Source statement 

for v := el to. e2 do. body; 
Code template 

tempi := el; la temporary location^ 

temp2 := e2; {another} 

if (tempi <r= temp2) then begin 
v := tempi; 

goto 22; { violates Pascal rules } 

repeat 

v :- succ(v); 
22: 

body; 
until (v - temp2) ; 
end; 

Recently, I noted a very simple solution which is applicable to a large 
class of hardware architectures, notably those that use the condition- 
code and conditional-branch structures. The equivalent code template 
in pseudo-Pascal is: 

tempi := el; 
temp2 := e2; 
v := tempi; 



while (v <= temp2) do 

body; 

v := succ(v); 
until overflow; 

In one PDP-11 implementation which had the straightforward while test 
at the top of the generated code, this was achieved by simply replacing 
an unconditional branch (BR) at the end of the loop body code by a 
branch if overflow had not been set (BVCj, The net cost in execution 
speed and space to do it right — nil I 

Of course, optimizing compilers that use highly transformed versions 
of the basic for-statement (for example by moving the test to the end 
of the loop to save one branch instruction every loop iteration) will 
need to inhibit the optimization if they cannot determine that the 
second limit expression pannot ever be*- maxint. Of course this is not a 
problem with enumerated types, and may act as a minor encouragement to 
programmers to use subranges more than type integer - a practice they 
ought to be employing anyway. (Doing the right thing for the wrong 
motives still reaps the rewards of virtue,..) 

ACKNOWLEDGEMENT 

The technique reported here is due to Barry Smith, Oregon Software, and 
is used in (at least) the Pascal-1 XI. 2 compiler. Its discovery was 
prompted by the Pascal Validation Suite. 

1979 September 15 



-a 









^JdurSk^ 



Arthur Sale 



Checklist 



0. DATE. Of the information provided. 

1. IMPLEMENTOR/MAINTAINER/DISTRIBUTOR. Whatever, but give a person, an address and a 
phone number. If the source of information is not the person named, give the source too. 

2. MACHINE. Obvious. 

3. SYSTEM CONFIGURATION. Any known limits on the configuration or support software 
required, eg operating system. 

4. DISTRIBUTION. Who to ask, how it comes, in what options, and at what price. 

5. DOCUMENTATION. Specify whatever there is. 

6. MAINTENANCE. Is it unmaintained, fully maintained at a profit, or what? 

7. STANDARD. How does it measure up to standard Pascal? Is it a subset, or extended? 
How? Quality? 

8. MEASUREMENTS. Of its speed or space, or relative to other systems. 

9. RELIABILITY. Any information about field use, or sites installed. 

10. DEVELOPMENT METHOD. Outline: to tell what parentage it had and what it is written 
in. 

11. LIBRARY SUPPORT. Any other support for the compiler in object linkages to Fortran, 
source libraries, etc 

NOTE: Pascal News publishes all the checklists it gets. Implementors should send us their 
checklists for their products so that the 1000s of committed Pascalers can judge them for 
their merit. Otherwise we rely on the rumours. 



m 



CD 

en 



Machine-Dependent Implementations 

{ This section summarizes the information we have on Pascal implementations 
since the last issue, in checklist format where possible- > 

Apple Computer: Apple II (Cupertino) 



profiram 



PA&TKA <THK, CK, HK); 



1. IMPLEMENTOR/MAINTAINER/DISTRIBUTOR. Apple Computer Inc, 10260 Bandley Drive, 
Cupertino, California 95014 (Calif 800-622-9238, other States 800-538-9696). 

2. MACHINE. Apple II incorporating 6502 processor. 

3. SYSTEM CONFIGURATION. Minimal is Apple II, 48k RAM, Apple Language Card and one 
mini-floppy disk drive. Works better with two. 

4. DISTRIBUTION. Apple dealers. Suggested price $495. 

5. DOCUMENTATION. Full set of manuals included in distribution. 

6. MAINTENANCE. Supported by Apple Computer Inc. 

7. STANDARD. Based on UCSD Pascal(TM), with a reasonably full implementation but several 
non-standard extensions. 

8. MEASUREMENTS. None provided. 

9. RELIABILITY. Good, but little field experience as yet. Number of field sites and 
systems on order not reported. 

10. DEVELOPMENT METHOD. Extensively modified from Pascal-P2 via a portable system 
involving interpretation of a modified P-code instruction set. 

11. LIBRARY SUPPORT. Editor provided (written in Pascal), and FILER. Support for 
graphics and string manipulation. 



BTI-4000, 5000, 8000 



(x rjsfi THK - TeKCT nporpaMMH "HOBoro" KOiOEJiffropa, 

CK - KOjm "cTaporo" KOMiuuiHropa (Ha «3HKe acceud.iepa) , 
HK - Kom "HOBoro" (pacKpy<ieHHoro) KOMmuwropa «) 

var B, BI, B2: BOOLEAN 

THK, CK, HK, EKI, HKCK: TEXT; 

procedure IIPJ4MEHKTB ( 222. HP/iJEiEHO : BOOLEAN; 

var HOB'riH KCV., KOMIjHIHTOP , T!5KCTI?0r?AJ.Ui : TEXT); ... 
(x Ma KpaTKOCTH 6nonn npoaeayp h ifyHKnwH onymcuw *) 
(* nponej^'pa UPKnEHJiTB noaaeT ITSKUTIiPOiriVLHJ na KOMIE'JIHTOP 
n no^y^aeT H0Ei2 KOfl. Ecnn npE otom ho daao tu>u3Jieiio oaiaOoK, 
to UPtiMEHJSHO npHCBanBaeTCfl true , imaie ?ki£>E *) 

procedu re K0PPEKTKPG3AT&; ... 
C* npoae;iypa KOPPiiKTEPOBATB ncnpoBJweT omidiu: b THK z i-Moraa 
«ase b CK (ocodeHHo, ecjin CK - a-ro kos, "oTTp;ujc;i>ipoi;a:iHjj2" 
pyKofi), npz 3Tom ncno^B3ya "^ejioBeiecKnil" ftaKTop" «) 
function PABHLi ( yar K0JU K0.HI : TEXT) : BOOLEAN ; ... 
(* $ynKmm PABHLI BupadaTUBaex TRUEb cjiyqae paBUHCTBa ftaiLuoB 
Iffltfi m K0JLI, HHane. falsek) 
begin rspsat 

flPBffiHHIB (BI, HKCK, CK, THK); 
i£ BI t&s .IIPuJEHKTB (B2, HK, HKCIC, TEK); 
(a nepBHe saa BusoBa npouesyps HPiSuEHHTL odecimjsBaDT pacKpyriqr. 
Jfenee 2LD.8S npop.epKa npasmtiKCCTK a sosaosaaa acnpasjieana *) 
If EI a 32 tijen nPMfflHMTB (B2, HKI, HK, THK); 
B :=» BIaB2 a PABHU (HK, HKI); 
j[£ not B then K0PPEKTMP0BATL; 
until B 

gnd. 



CO 

3> 



We would appreciate ANY information anyone has about these Pascal implementations, 
how about it? 



BESM - 6 (Moscow) 



Burroughs B5700 (Edinburgh) 



We have obtained a few more details on S. Pirin's Pascal implementation on 
the BESM-6 from the proceedings of a May 10-15, 1976 conference on Programming 
Methodology and Program Verification held in Dresden, Germany. 

S. Pirin describes how the BESM-6 compiler was derived from the ETH Zurich 
compiler for the CDC 6600 by changing the code generators to produce BESM-6 
assembly code. 

The paper describes the advantages of Pascal for programming and its efficient 
implementation, and describes the bootstrap process. The bootstrap process is 
itself described by a Russian Pascal program which we reproduce below. The 
compiler compiled itself in 24 sees, producing 105653 bytes of assembler text. 
The assembler takes 36 sees to produce the object code of 21507g words. 

The total bootstrap process thus takes 60 sees. The compiler was made 
operationally available as Pascal-BESM-6 in the Computer Center in early 1976. 

The author of the paper was S. Pirin, USSR Academy of Sciences Computer Center, 
Moscow. The paper was printed in the proceedings of the Thematischen Konferenz 
KNWWT , Methodik der Programmierung und Programmverifikation, 10-15 May 1976, 
Dresden (Technische Universitat Dresden, DDR). 



1. IMPLEMENTOR/DISTRIBUTOR/MAINTAINER. Prof Balfour, Head, Dept of Computer Science, 
Heriot-Watt University, 37-39 Grassmarket, Edinburgh, Scotland. (Information provided by 
David Cooper, CACI Inc, Keizersgracht 534, Amsterdam, Netherlands.) 

2. MACHINE. Burroughs B5700. 

3. SYSTEM CONFIGURATION. Not known. 

4. DISTRIBUTION. Reported sites at HQ US Army Electronic Command, Fort Monmouth, New 
Jersey 07703 (Bob Bebeki) ; Union College, Schenectady, New York, N.Y. 12308 (Nancy 
Croll). 

5. MAINTENANCE. Not known. 

6. DOCUMENTATION. Not known. 

7. STANDARD. Allows 94-element sets, corrects several errors in earlier version from 
Oslo. 

8. MEASUREMENTS. Claimed considerably faster at compilation than earlier Oslo version. 



CD 



CO 



9. RELIABILITY, "in constant use at Heriot-Watt, both by staff and students. Has been 
used extensively for projects such as a MODULA compiler, an error- detector-corrector, a 
frequency analyser and a Diplomacy game." 



10. DEVELOPMENT METHOD. Not known. 

11. LIBRARY SUPPORT. Not known. 



Written in XALGOL. 



Control Data 6000, Cyber 70, Cyber 170 (Zurich, Minneapolis) 



0. DATE/VERSION. Pascal 6000 Release 3; 79/01/01. 



IMPLEMENTOR/DISTRIBUTOR/MAINTAINER. 



Implementor: 
Urs Ammann 

Ins ti tut fur Informatik 
E. T. H. Zentrum 
CH-8092 Zuerich 
SWITZERLAND 



Maintainer: 

John Strait / Andy Mickel 
University Computer Center 
227 EX 
University of Minnesota 

Minneapolis, MN 55455 
U. S. A. 
(612) 376-7290 



Distributors: 

(Europe, Asia and Africa) 

Ric Collins 

UMRCC 

Oxford Road 

Manchester Ml 3 9PL 

England, UNITED KINGDOM 

(061) 273-8252 
(North and South America) 

Wally Wedel 

Computation Center 

University of Texas-Austin 

Austin, TX 78712 

U. S. A. 

(512) 472-3242 
(Australia and New Zealand) 

Tony Gerber 

Basser Dept. of Computer Science 

University of Sydney 

Sydney, N. S. W. 2006 

AUSTRALIA 

61-02-692-3756 or 692-2541 

2. MACHINE. Control Data Corporation 6000, Cyber 70 and 170 series. 

3. SYSTEM CONFIGURATION. Minimum central memory-32K words. Operates under SCOPE 3.4, 
NOS/BE 1, KRONOS 2.1 or NOS 1.3 under ASCII subset or CDC scientific character sets and 
63- or 64-character sets. 

4. DISTRIBUTION. Tape format is binary SCOPE internal, 7/9 track, unlabelled, 800/1600 
bpi. Distribution tape includes installation notes, source for compiler, library, 
software tools and machine- retrievable documentation. Contact the distributor nearest to 
to you for more information. A release agreement must be signed and the cost is 50 pounds 
sterling (Manchester), $100.00 (Texas) or $A30.00 (Sydney). 

5. DOCUMENTATION. One printed copy each of the following: 70 page supplement to Pascal 
User Manual and Report , 60 page description of the extended library routines and 60 pages 
of documentation that describes the various software tools included on the release tape. 
Machine-retrievable copies of all of this documentation are Lnclu-led on the release tape - 

6. MAINTENANCE. Will except bug reports at Minnesota for forseeable future. 

7. STANDARD. Nearly full standard. Restrictions include: standard procedures and 
functions cannot be passed as actual parameters; file of file is not allowed. Extensions 
include: segmented files and predefined procedures and functions. Extensions new in 
release 3 include: conformant array parameters; an otherwise clause in case statements; a 
variable initialization facility ( value ) ; a text-inclusion facility for building source 
libraries and full specif iciation of parameters to formal procedure and function 
parameters. New features in release 3 include: a new post-mortem display; pointers to 
files; numerous compiler option enhancements; improved run-time tests; more descriptive 
error messages; interactive support for INTERCOM and TELEX/IAF; many code generation 



optimizations; numerous bug corrections and improved installation procedures. 

8. MEASUREMENTS. Compilation speed: 10800/5800 characters per second on a Cyber 
74/Cyber 172. Compilation size: 45K (octal) words for small programs, 57K for 
self-compilation. Execution speed: self- compiles in 65/120 seconds. Execution size: 
binaries can be as small as 1.7K, compared with FORTRAN minimum of over 7.5K. 

9. RELIABILITY. Unknown, as this is a new release. However, release 2 was very reliable 
and was in use at over 300 known sites. First version of this compiler was operational in 
late 1970. The present version was first released in May 1974. A pre-release version of 
release 3 was tested by 11 sites for up to 5 months prior to the official release. 

10. DEVELOPMENT METHOD. Bootstrapped from the original Pascal 6000 compiler, but 
developed in a 6-phase stepwise-refinement method. Approximately 1.5 person-years. 
Run-time system was completely rewritten for release 3. 

11. LIBRARY SUPPORT. Allows calls to external Pascal routines, assembler subprograms and 
FORTRAN (FTN) subroutines. The library supplied on the release tape contains many 
procedures and functions in addition to the standard Pascal ones. A number of library 
routines have been added in release 3 including a tangent routine, sorting routines, 
random number generators, plotting packages, formatted-read routines, double-precis Lon 
routines, etc. 

Data General Eclipse 



DG Eclipse (Medical Data Consultants) 



PRODUCT DESCRIPTION 

MDC PASCAL Version 4 (BLAISE) is an efficient PASCAL compiler and runtime 
support system designed for the execution of PASCAL programs in a mini-computer 
environment. The development criteria are as follows: 

1. To support interactive I/O in a reasonable way. 

2. To be compatible with, as far as possible, existing MDC ECLIPSE RDOS PASCAL 
Compilers . 

3. Close agreement with the P4 'standard 1 . 

4. A reasonable integration into RDOS. (We support background/foreground, 
subdirectories, and a simple command-line form of activation). 

5. Version 4 features high-speed compilation as well as efficient execution. 

DATE /VERSION 

MDC ECLIPSE RDOS PASCAL Version 4 (BLAISE) January, 1979. 

DISTRIBUTER/IMPLEMENTOR MAINTAINER 
Ted C. Park 

Director, Systems Development 
Medical Data Consultants 
114 Airport Drive, Suite 105 
San Bernardino, CA 92408 

MACHINE 

Data General - any ECLIPSE-line computer 

SYSTEM CONFIGURATION 

ECLIPSE must have FPU or EAU 
Minimum of 24K words user memory 
RDOS REV 6.1 or greater 

DISTRIBUTION 

Executable obiect modules and documentation are supplied on 9-track 800 BPI 
tape in RDOS •dump' format. The cost is $150.00 to cover our mailing and 
duplicating costs. 



-rj 

CO 

<—> 

3> 



=ffc 
I— » 









oo 



DOCUMENTATION 

Machine readable documentation and operating procedures are supplied on the 
tape , however , it is recommended that the user obtain his own copy of Pascal 
Users Manual and Report . 

MAINTENANCE POLICY 

Bug reports are welcome but no formal commitment for support can be made at this 
time. Extensive testing of the product has been done and all known bugs have 
been eliminated. 

STANDARD 

PASCAL P4 subset 

MEASUREMENTS 

Compilation Speed: 
Word Size: 
Real Arithmetic: 
Integer Arithmetic: 
Set Size: 
Execution Speed: 



Minimum Memory Needed: 

RELIABILITY 

MDC PASCAL Compilers are in use worldwide, 
At present no known bugs exist. 



300 chars/sec (400 lines per minute) 

16 bits 

Uses 32 bits 

Uses 16 bits 

64 bits 

Approximately the same as the code 

produced by the Data General FORTRAN 

compiler 

24K words 



and are performing very satisfactorily. 



DEVELOPMENT METHOD 

Developed from PASCAL P4. The heart of Version 4 consists of approximately 
30K bytes of near optimum coding of the Standard PASCAL-P4 P-CODES. A small 
but powerful interpreter which executes the P-CODES allows the entire compiler 
to occupy less than 17K words of memory thus alleviating the necessity of 
overlaying, swapping or any other virtual memory scheme. An efficient 
post-processor along with standard Data General utilities and a run-time library 
supplied on the tape combine to produce an executable core image file. 

LIBRARY SUPPORT 

The system is totally self-contained so that no Data General libraries are 
needed. 



DG Eclipse (Gamma Technology) 
Dear Andy: 



March 14, 1979 



Gamma Tech is happy to announce the completion of our effort to 
convert the University of Lancaster PASCAL Compiler (RDOS) to Data 
General's new AOS (Advanced Operating System) on their ECLIPSE and 
M600 series. 

I enclose some information we are getting ready to send to the 
press, PASCAL contacts and customers, and a copy of the 8-page docu- 
ment for the AOS PASCAL Compiler. Pete Goodeve in Berkeley is respon- 
sible for the conversion and is working with Gamma Technology on its 
distribution and maintenance. The compiler itself and the math 
routines are the same Lancaster versions in this release. We are 
committed to a major update as detailed in the enclosed bulletin. 

Also I enclosed a checklist for the PUG News , plus some other 
miscellaneous PASCAL items that have come our v/ay. 



Yours sincerely, 



^) 



Alice Dawson 

Gamma Technology, Inc. 



AOS PASCAL Bulletin 



Gamma Technology, Inc. now has available an AOS implementation of 
PASCAL based on the Lancaster compiler. 

The distribution package presently consists of sources and binaries 
on 9-track, 800 bpi magnetic tape, an 8-page document and one copy each 
of the RDOS "User's Guide" and source manuals (for background informa- 
tion). The compiler itself and math routines have not been altered in 
this release. 



We plan to do a major revision of the AOS compiler by July, 
release will include: 



This 



- fixing known P4 compiler bugs 

- conversion to hardware floating point arithmetic 

- expansion of the character set to the full ASCII set 

- more complete documentation 

Feedback from Release I users will also be included in the update. 



The pricing schedule for the AOS Lancaster/Berkeley PASCAL Com- 
piler is as follows: 

Release I (immed. delivery) $250.00 

Release II update to Release I customers (7/79) 50.00 

Release II to new AOS customers (7/79) 300.00 

Less $40.00 for previous purchasers of the Lancaster Compiler 
sources (we are passing on the savings to those customers who have 
already paid Lancaster's royalty). 

Release I for Lancaster RDOS source customers $210.00 

Release II update to Release I customers (7/79) 50.00 

Release II for Lancaster RDOS source customers 

(if Release I has not been purchased) 260.00 

Once again, we ask that California customers add the appropriate 
state tax or enclose a resale certificate form. Foreign customers 
(except Mexico and Canada) should add $5.00 for additional mailing 
costs. 



0. Date: March 1979 
Version: 1.00 

1. Distributor: Gamma Technology, Inc. 

2452 Embarcadero Way 
Palo Alto, CA 94303 

(415) 856-7421 
TOX: 910-373-1296 

Implemented and maintained by Pete Goodeve 

2. Machine: Data General Corp. ECLIPSE and M600 Series machines 

3. System Configuration: AOS Rev. 2.00 or later 

96 K core memory 
Floating Point Hardware 



3> 



3> 
CD 



CD 



4. Distribution: $300 package includes sources and binaries on 9-track, 800 bpi 

magnetic tape in AOS dump format and documentation (see point 5). 

5. Documentation: Currently includes 8 page AOS PASCAL document and keysheet. 

Also included are one copy each Lancaster (RDOS) "User's Guide" and 
internals manual for reference. User purchase of Manual and Report is 
strongly urged. PASCAL.DOC and PASCAL. KEY are machine-retrievable. 

6. Maintenance Policy: Gamma Technology is committed to a major update of this 

compiler (extending character set to full ASCII set, math routine con- 
version, fixing P4 Compiler bugs). We encourage bug reports and will 
distribute fixei and modifications. 



7. Standard: PASCAL P4 subset accepted, 
from Lancaster's RDOS version. 



Compiler itself is currently unchanged 



8. Measurements: Since AOS is a multi -user/process system, all time measure- 
ments are subject to change depending on what is going on in the system. 
These measurements were done on a quiet system, e.g. PASCAL was the only 
user. 



As the space and timing figures demonstrate, the larger programs are, 
the more efficient PASCAL becomes. For example, a lower to unoer 
case converter in PASCAL runs in 6K while a similar program in' PL/I 
needs over 25K. 

9. Reliability: The first site has been running for about 3 months. There 

are now 5 sites. We anticipate that the system will be fairly solid 
because it is based on University of Lancaster's RDOS implementation 
(now over 130 sites worldwide). 

10. Development Method: P4 Compiler (Wirth) used is same as Lancaster version. 

The interpreter (DG assembly) was rewritten for AOS. ALGOL libraries 
no longer required as AOS itself is now the run-time monitor. Effort 
took about one person-month by a very experienced person. 

11. Library Support: External procedures and libraries can be compiled 

separately and later bound in with a main program. Intermediate P- 
code, object binary, load map, and symbol table files can be retained. 
AOS provides library file editors. 



CO 



Program 


Source Size 
(in bytes) 


Executable 
Prgm. File 
Size (bytes) 


Approximate 
Compilation 
Time (sec) 


Approx. P-code 
Conversion and 
Assembly time 


Begin/End Program 


26 


10240 


6 




12 


Graph (Output) 


301 


10240 


10 




16 


RGCD (example in User's 
Manual and Report) 


330 


10240 


14 




16 


Countchars (Input, Output) 


727 


10240 


11 




14 


Roman # Conversion (Output) 


765 


10240 


10 




17 


Primes (Output) 


1154 


10240 


14 




23 


Life (Input, Output) 


3060 


12288 


22 




44 


P4Compiler 


116515 


57344 


10:33. 




13:14 (min:sec) 


Program Execution Time 


(sec) 








Begin/End 
Graph 


2 

4 











RGCD 
Countchars 

Roman 
Primes 



Using Graph as Input - 3 
Using Life as Input - 5 

2 



Execution Space - The default setting of the compiler allocates 4K bytes 
for the stack and heap space. This can be changed at either compile 
or run time by using command switches. Options range from a minimum 
of 2K bytes to the maximum space available. 

All of the small programs executed above were compiled with the 
minimum stack/heap space. At run-time they all took 6 pages of 
unshared memory. A page is 2K bytes. AOS allocates memory to pro- 
cesses in page increments. In comparison, SC0M (compare 2 ASCII 
files), an AOS utility program, takes 3 shared and 5 unshared pejes 
of memory. 



Compilation Space 
process. 



The PASCAL compiler under aOS is a 32K Word swappable 



DG Eclipse (Rational Data Systems) 

Rational Data Systems 

21 June 1979 245 West 55 Street New York City 10019 212-757-0011 



Dear Andy, 

Enclosed is a copy of our 14-page brochure describing our Pascal 
implementations for Data General computers. It is available free 
of charge to anyone who writes to us requesting a copy. Feel free 
to duplicate any portions of it for any purpose you please. 

We have five different implementations for various Data General 
configurations. I have attempted to summarize them per your standard 
f o rma t : 

0. DATE/VERSION 

New. Availability of the various versions as follows: 

AOS: 7/79 

RD0S/D0S Single User: 8/79 

RD0S/D0S Multi-Terminal : 9/79 

RDOS Multi-User (via remapping): 10/79 

RD0S/D0S Multi-User (via swapping): 13/79 



1 . D I STR I BUT0R/ I MPLEMENTOR/MA I NTA I NER 

Rational Data Systems 
245 West 55th Street 
New York City 10019 USA 
212/757-0011 

2. MACHINE 

Data General Eclipse, Nova or microNova. 

All configurations and optional instruction sets supported. 

3. SYSTEM CONFIGURATION 

AOS, RDOS or DOS operating systems. 
Single-User DOS will run with floppy disks. 
All others require standard system hard disk. 



to 
m 



CD 



DISTRIBUTION 
Med i a : 



Version 



9-track 800bpi Magnetic Tape 

Data General Floppy Disk 

5M byte Top-Load Disk ($200 extra) 



License 


S . S . Renewa 1 


$ 3,500 


$ 400 


2,500 


250 


3,000 


300 


*t,000 


500 


4,000 


500 



A0S 

RD0S/D0S Single User 
RDOS/DOS Multi-Terminal 
RDOS Multi-User (Remap) 
RDOS/DOS Multi-User (Swap) 

5. DOCUMENTATION 

User Manual. Distributed both hardcopy and machine-readable. 
The current version describes differences from J&W and proposed 
standard as well as operational details. The manual will evolve 
to eventually become a complete language reference manual. 

6. MAINTENANCE POLICY 

Initial license includes one year subscription to software 
updates and fixes. Renewable at the above prices. These 
are fully supported products. All bug reports accepted. 
Enhancements already underway. We will be dependent upon 
customer and marketplace feedback to help determine direction. 

7. STANDARD 

Used Jensen S Wirth and proposed standard as guide. Extensions 
include STRING and DECIMAL data types, READONLY and APPEND file 
accessing, random file positioning via SEEK procedure, TERMINAL 
files for interactive applications, CLOSE and PURGE procedures 
to control file disposition, DATE and TIME procedures, general- 
ized procedure SYSCALL for host system interfacing, SEGMENT 
procedures/functions for automatic load-on-call handling of 
large programs. See #10 for insight into other changes. 



MEASUREMENTS 

Compilation speed: 
Compilation space: 
Execution Speed: 
Execution Space: 



355 chars/sec (A0S Eclipse S/130) 
Compiler compiles self with l6kb avail. 
Compiler compiles self in 8 minutes. 
Interpreter (with all transcendental s, 
etc.) less than 12k bytes. P-code is 
byte oriented. 



9. RELIABILITY 

Excellent (but still new). As of 6/21/79, two test sites 
for A0S version. All known bugs fixed. 



which includes an operating system, text editors and other 
utilities. We simply used their (very good) compiler as 
a starting point in the development of our systems. 

11. LIBRARY SUPPORT 

We offer no assembler language interface or library capability 
at this time. Both may be influenced by customer reaction. The 
speeds of the compilers are such that the INCLUDE facility we 
provide is an adequate substitution for a subroutine library. 

A major feature is that compiled code is immediately ready for 
execution. There is no use of any binder, loader or linkage- 
editor utility. These utilities are often slower than the 
compilers themselves. The compiler can compile itself in 8 
minutes (see #8) and the output is immediately ready to run. 

All five versions are source and p-code compatible thus permit- 
ting full cross-compilation capabilities. 



Thanks again for your great work. 






Sincerely, 



'SUA, 

Douglas R. Kaye 
President 

Digital Equipment DEC PDP-11, LSI-11 

< — See also entry under Zilog Z-80, Darmstadt — } 

DEC PDP-11 (Berkeley) 

Mike O'Dell reports on 79 June 5 that William Joy of Berkeley UNIX Pascal is rewriting it 
for the new portable code generators of the C compiler. This will mean that Pascal, C, 
and Fortran are all code compatible and share the same library. 

DEC PDP-11 (Stanford Systems Corporation) 



m 



10. DEVELOPMENT METHOD 

We began with the UCSD Pascal (TM) compiler which was based 
upon P2. We made major changes, enhancements and deletions. 
The hypothetical p-machine has been greatly modified. Our 
first step was a cross-compiler running on a UCSD-based Z-80 
microcomputer. This compiler compiled an Eclipse version 
which was then moved in object form to the Eclipse. Finally 
the source version was moved. The interpreters were developed 
on the Eel ipse. 

The process has required 14 person-months to date. The impele- 
mentors have had previous experience in language implementation 
and compiler design. The compilers are all written in Pascal. 

We have secured proper licensing arrangements for the UCSD 
Pascal compiler through Softech Microsystems, Inc. Please 
note that this is NOT the complete UCSD Pascal (TM) System 



1. IMPLEMENTOR/DISTRIBUTOR/MAINTAINER. Stanford Systems Corporation, Suite 1020, 525 
University Avenue, Palo Alto, California 94301 (415-321-8111). 

2. MACHINE. DEC PDP-11. 

3. SYSTEM CONFIGURATION; 4. DISTRIBUTION; 5. DOCUMENTATION; 6. MAINTENANCE. Not known. 

7. STANDARD. "Significant syntactic generalizations: ELSE clauses in CASE statements, 
embedded assignments in expressions, substitution of expressions for constants, labeled 
END's for error-checking, relaxation of parameter- passing restrictions, return of 
additional function value types." { Some of these hardly seem good generalizations... > 



8. MEASUREMENTS; 9. RELIABILITY; 10. DEVELOPMENT METHOD; 11. 
known . 



LIBRARY SUPPORT. Not 



cr> 



DEC PDP-11 ( UCSD Pascal (TM) ) 

Events have again overtaken UCSD Pascal. The name has now been registered as a trademark 
of the Regents of the University of California, and has been licensed to a single 
commercial profit-making firm. The address for UCSD Pascal matters is now 

SofTech Microsystems, Inc. 

9994 Black Mountain Road, Building 3, 

San Diego, California 92126 (Phone not known) 
All of the UCSD's regular services in support of the UCSD Pascal System have been 
transferred to SofTech Microsystems, but the University will continue to work in distinct, 
but related areas. 

{ Information derived from UCSD Institute for Information Systems Newsletter #4, popularly 
known as the Swans ong } 

DECUS 

This is a brief report on DECUS Pascal SIG, for Digital's Pascal users. The current 
Pascal SIG Chairman is John R. Barr, Dept of Computer Science, University of Montana, 
Missoula, Montana 59812. The SIG has information on a selection of DEC-10/20 compilers, 
PDP-11 compilers, and PDP-8 compilers. The Chairman's phone number is (406) 243-2883. 

The Pascal SIG Newsletter has a new editor: Charles A Baril, P0 Box 1024, University of 
New Orleans, New Orleans, Louisiana 70122, or Pascal SIG c/o DECUS, One Iron Way, 
MR2-3/E55, Marlboro, MA 01752. The SIG held a symposium in New Orleans in April, and was 
addressed by Kathleen Jensen (of Jensen & Wirth fame) on "Why Pascal?", based on her 
experiences with Wirth and Ammann. There was also a presentation on Pascal for the VAX 
series. (See Bill Heideb recht ' s report in the Here and There Conferences Section.) 

In Vol 3 No 1 of the SIG Newsletter we discovered the following highlights 

In a letter from the SIG Chairman: "DIGITAL has not yet committed to offer a Pascal 
compiler for any of their machines. ... Digital is interested in new languages which 
will provide better programming environments, but is committed to supplying a complete 
environment including libraries, debuggers and other programming aids. When Ada, the DoD 
embedded systems language, is defined, DIGITAL will be required to implement complete 
programming environments for that language. The amount of work required to implement any 
new language may prevent DIGITAL from offering both Ada and Pascal." If this is so, we 
echo Gordon Bell's comments: Pascal users on DEC machines will have to do it themselves. 
What about some concentration on tools now we have a lot of good compilers floating 
around? 

The Pascal SIG Library tape is maintained by Bill Heidebrecht, TRW DSSG, One Space Park, 
Redondo Beach, CA 90278 (213-535-3136). The library contains "Swedish Pascal" and "NBS 
Pascal" for PDP-lls, and a number of utility programs. Bill makes a plea for DEC users to 
check with the Local User Group first for a copy, otherwise check to see if someone nearby 
has a copy you can borrow, and only in last resort to ask the DECUS library or him for a 
copy. You can understand why. 

PUG and the DECUS SIG cross-reference each other as a service to Pascal users; after all 
we are here to help. However, we were perturbed to read in the DECUS SIG Newsletter (Vol 
3 No 1 Feb 79) that Bill Page, responsible for Fortran, APL, and other languages such as 
Pascal on mid-range DIGITAL computers, large PDP-lls and VAX-11, "did not see Pascal in 
its present form as a language suitable for implementation." {Ill} He "cited the lack of 
1/0 capabilities similar to Fortran's as one drawback." Perhaps the 1000 DECUS SIG 
members will educate DIGITAL, especially as they are faced with the N machine 
architectures by M operating systems problem. 



Digico Micro 16E 

See entry for GEC 4082 (Keele) . 



Facom 230-45S 



The following news of the use of Pascal in Japan may be of interest, especially the target 
language the compiler generates. { I always said that Fortran was a medium-level assembly 
language . > 



FACULTY OF ENGINEERING 

YAMANASHI UNIVERSITY 

TAKEDA-4, KOFU, JAPAN 

May 5. 1979 
Andy Kickel, 
Pascal News Editor 
University Computer Center: 227 EX 
208 SE Union Street 
University of Minnesota 
Minneapolis, MN 55^55 USA 

Dear Andy; 

As a member of PUG, I would like to report Pascal activities 
at Yamanashi University, Dept. of Computer Science. 

We now use FACOM 230-A5S (ten old year computer) with loOK 
bytes, where less than 100K bytes available for user space. 
Therefore we only have a very primitive version of Pascal 
system. We usually make use of a hand made version of 
recursive structured Fortran (named Star) in coding system 
programs . 

My undergraduate students (H.Harada, Y.Himeda, S.Oshiba and 
S.Takanashi) had an exercise to implement a Standard Pascal 
syntax checker based on the syntax diagram in Jensen-Wirth 
book (Springer 197*0 . Within two months they completed it 
in Star, and two of them (Harada and Oshiba) tried to extend 
it by adding a code generation phase. Generated codes were 
to be Fortran statements because of operating system rest- 
rictions, so that the total system turned out to be a Pascal 

to Fortran prepr ocessor: 

1 Pascal -> F ortran 1 
T Star | 
Unfortunate thing for the students was that Star environment 
did not allow memory overlay, and the memory space shortage 
was serious problem. They found 41 pages of 20^8 bytes are 
quite near the limit and full Pascal could not fit in there. 
As far as I understand they spent most of their time in 
reducing memory space in order to include more facilities. 

I was happy to hear that after six months the final 8369^ 
bytes of code ran successfully. These two students are 
now working for Hitachi, hopefully with more memory space. 

Sincerely, 

QvLccfey £x£'v~*> £ i <. „. ^ 

Makoto Arisawa 
Associate Professor 
Dept. of Computer Science 



1— » 



CO 



General Electric GEC 4082 



{ Are there any more machines waiting to be conquered? Sometimes it 
seems as though there are no more mountains to climb! > 

University of Keele 



Department of Computer Science 



Keele, Staffordshire, ST5 5BG 

Telephone: Newcastle (Staffs) (0782) 621111 
Telex: 36113 UNKLIB G 

12 July 1979 



Dear Sir, 

It may interest your readers that we have recently implemented PASCAL 
on a Digico Micro 16E and a GEC 4082 at Keele. The implementations are based on 
the Zurich P4 compiler and both systems are interpretive. The GEC 4082 system 
accommodates the full BSI draft standard with the exception of procedural 
parameters. It is intended to eliminate this exception before October 1979. In 
addition, random access files have been included as has the ability to connect 
PASCAL files to actual devices under the program's control. Other work being 
carried out is the implementation of a high quality run-time diagnostic package 
allowing examination, by display, of linked data structures and the creation of 
a 'user friendly* interactive system for the typing in and correction of PASCAL 
programs. The implementation on the GEC 4082 is used extensively for teaching and 
research in the Computer Science department. The availability of PASCAL on the 
GEC 4082 has received a very warm reception from many users of Keele's computing 
services and it is envisaged that the slow response from the compiler when the 
machine is saturated with, for example, a teaching class will be eliminated by 
the imminent completion of a true PASCAL compiler which will permit the 
compilation and run-time systems (which are written in PASCAL) to perform five 
or more times faster. 



Yours faithfully 



Honeywell Level 6 



An "extended Pascal compiler" has been developed for Honeywell Level 6 minicomputers by 
California Software Products Inc (CSPI), Suite 300, 525 North Cabrillo Park Drive, Santa 
Ana, California 92701. Speeds up to 2000 lines /minute are reported. Estimated cost 
$6500. However, their last Pascal did not have pointers according to our information. We 
hear that the people at Oregon Software also may have a compiler. (See entry under DEC 
PDP-11.) 



Honeywell 6000 / Series 60 Level 66 (Waterloo) 



On 79 May 13 Peter Rowley sent us a note saying: 

"As an undergrad at the Univ of Waterloo who had to struggle with Pascal Version 5, I 
appreciated the comments of J.Q. Arnold in #11. Pascal 6 is, however, quite pleasant to 
use and fairly reliable. There are times, though, when one is reminded of the strong 
influence of the language B on the compiler; this influence sometimes makes portability a 
problem. (eg the 'procedure main' convention and dynamic file opening." 



University of Waterloo 



s 



3> 
co 

> 






April If, 297? 



Dear ?■ n d y : 



Waterloo, Ontario, Canada 
N2L 3G1 

Mathematics Faculty Computing Facility 
Director: 519885-1211 



I just read Pascal News #1? and decided it was time 
PUG received an update on the state of Pascal/6^. I am 
enclosing an updated checklist. 

Pascal standards committees appear to be springing up 
all over. Pecause of the high probability of disagreement between 
the resulting standards, I view this development with, some 
apprehension . 

The preamble to the pretty print program (5-?) claims 
that the published program is an example of its own results. 
However the " if-then-else-if " sequence in routine "getchar" 
violates rule 3 of the documentation. Fither the program does 
not run through itself unchanged, or the documentation is wrong. 
Neither situation speaks well for the program. 

Yours truly, 



/'Ian Powler 
Product Support 

0. Date/Version 

Release 6.1 of Pascal/66 was distributed in January 1979. 

1 . Distributor/Implementor/Maintainer 

Pascal/66 is distributed by Honeywell Information Systems. Actual development and maintenance is 
done by the University of Waterloo. 

Contact: Dr. W. Morven Gentleman 

Director, Math Faculty Computing Facility 
University of Waterloo 
Waterloo, Ontario, Canada 
N2L 3G1 

2. Machine 

Pascal/66 runs on Honeywell Series 6000 (with EIS) and Series 60 Level 66 machines. 

3. System Configuration 

Pascal/66 runs under the GCOS III operating system (release 3/1 or later) in timesharing or in batch. 
The compiler needs 31 or 32k words for most programs, but may grow larger depending on the program be- 
ing compiled. Compiled programs may be as small as 6k words. 



CO 

m 



CO 



4. Distribution 

Pascal/66 is distributed on magnetic tape as a save of the files, programs and documentation necessary to 
run Pascal. Installation time is estimated at less than 1 man hour. 

Pascal/66 is available on a purchase basis. For price information contact your local Honeywell represen- 
tative. 

5. Documentation 

A machine readable supplement to the Pascal User Manual and Report is provided. Also included are a 
set of documentation files for library routines, support programs, and other useful information. A program 
is provided to allow convenient access to these files from a timesharing terminal. 

6. Maintenance 

Maintenance is included in the purchase price. Bug reports are accepted no matter how they arrive, but 
those submitted via the normal Honeywell System Technical Action Requests are guaranteed a reply. 

Pascal/66 is undergoing active development to improve its functionality and performance. Current 
development is aimed at making the B library available to Pascal users. This will give the Pascal user easy 
access to the full capabilities of the full GCOS III operating environment, and greatly enhance Pascal's 
usability as system development language. 

7. Standard 

As with most implementations there are some deviations from the standard. 

Violations: 

- The keyword "program" and the corresponding "end." (with a period) are not currently implemented. We 
have not yet invented an interpretation of the program parameters that is meaningful in the GCOS 111 
environment. 

- "nil" is a predeclared identifier rather than a reserved word. 

- The construct "file of file" is not supported. 

- Anonymous tag fields are not yet supported. 

- Functions of indeterminate type such as "abs* may not be passed as arguments. 

- The words "forward" and "extern" are reserved. 

Extensions: 

- String constants are adjusted in the obvious manner to conform in type to the variable they are used with 
in compares or assignments. 

- Constant valued expressions (e.g. n+1) are valid wherever a constant is allowed. 

- There is an "else" option on case statements and variant records. 

- Value ranges are accepted on variant and case labels. 

- Null record sections and field lists are allowed. 

- Procedures "read" and "readln" will read variables of type "packed array of char". 



Manual and Report. 

Procedures are provided to dynamically attach and detach a file. 

Procedures "new" and "dispose" work by managing a free storage list, avoiding the extra overhead and 

unpredictable behaviour of a garbage collector. 



CO 



IBM Series 1 



Thanks to Neil Bauman of Healtham, and William Hutchison of Ridall & Co, Inc., we now know 
that both previously reported Series 1 Pascal efforts are defunct: specifically those of 
Gus Bjorklund and SPAN management. 

But new rumours exist. Robin Kasckow and Peter Farley of Decision Strategy Corp., 708 
Third Ave, New York, NY 10017 (212-599-4747) have indicated that they may attempt a Series 
1 implementation since none seem to be around. Also, IBM itself seems to have partially 
awakened and has approached the University of Southern California, UC San Diego, 
University of Minnesota, and finally the University of Illinois about doing an 
implementation. 

IBM 360 or 370 

{ — Introduction — > 

Ever wonder what THEY are THINKing about Pascal? IBM policy is that they have not offered, 
recommended, or endorsed Pascal. In their view Pascal is a recently developed programming 
language for instructional applications that generates many questions of availability from 
university customers. The Pascal expert at IBM seems to be Loren Bullock, Public Sector 
Marketing (Education Industry), 10401 Fernwood Road, Bethesada, MD 20034 (301-897-2102). 
Perhaps it would help if we wrote to IBM about PASCAL instead of Pascal? 

< — The AAEC compiler running at Amdahl — > 

The following letter relates to getting the Australian Atomic Energy Commission compiler 
up and running on an Amdahl system. The User Guide referred to was received by PUG, so is 
presumably available on request to Amdahl. 

April 30, 1979 



td 

m 



9. Reliability 

Release 6.1 corrected all known and reported bugs. It is considered very reliable. 

10. Development Method 

This compiler is an independent implementation written in the system programming language B. It is 
about 11000 lines. It uses an LALR(l) parser implemented using the YACC parser generator. It compiles 
machine code in standard relocatable object decks. The library is written in B and assembler. The present 
library is being revised to merge with the standard B library; at present it uses a non-standard B library. 

11. Library support 

Pascal programs may be linked with separately compiled procedures written in Pascal, Fortran, B or 
assembler. These routines may be included as object decks or loaded from standard libraries. Facilities are 
provided in the package to allow easy creation and maintenance of libraries. 

Source text inclusion facilities are not presently provided, this is partially because such capability is easi- 
ly available in the GCOS III environment. 

12. Notable features - Details often missed 

- Sets are not restricted to a maximum size (other than the availability of address space on the machine). 
Thus Pascal/66 will run the first 2 versions of Hoare's prime sieve program given in chapter 8 of the 
Pascal User Manual. 

- There is a compile time option to decide if the compiler is case sensitive to identifiers and reserved words. 

- Predeclared procedures of fixed type, such as "sin" and "cos" may be passed as arguments. 

- Non-local goto's are supported. 

- AH standard functions, procedures and identifiers are supported. 

- Procedures "read" and "write" work with non-text files as per the corrected printing of the Pascal User 



J. M. Tobias, G. W. Cox 

Australian Atomic Energy Commision 

Systems Design Section 

New Illawara Road 

Lucas Heights, N.S.W. Australia 



Dear Jeffrey and George, 

Thank you for the tape containing the Pascal 8000 system. 

I had very little difficulty bringing the compiler up under 
VM/370 on our Amdahl system. I made a few minor changes to the 
run-time system and added a front end that handles the CMS com- 
mand interface. 

I'm sorry, but I don't have any bugs to report. The only dif- 
ficulties I encountered were due to the somewhat limited support 
VM/CMS provides for OS macros and services. 

While installing the system, I attempted to keep to a minimum 
the changes to the compiler itself as well as to the run-time 
system. I did this in the hope that I can install any future 



CO 



version with a minimum of work. 

I'm enclosing a copy of the "User's Guide" I put together and 
a summary of what I did to install the system. 



Sincerely, 



Robert S Lent 

Amdahl Corporation 
Department of Computer Architecture 
1250 East Arques Avenue 
Sunnyvale, CA 94086 



cc: Pascal User's Group, c/o Andy Mickel 



{ — a new IBM implementation: Michal Iglewski, Poland — } 

Dear Mr. Mickel 28 February 1^79 

At the end of 1978 we have obtained the implementation 
of Pascal for I3Iu 360/370. The System Pascal 3G0 is 
derived from tiie Pascal Compiler developed by Virth 
and Amman at STH Zurich. The preliminary version has 
been distributed to several European centers. It is 
also used in some Polish universities. Delow v;e enclose 
some information about our system and rsbovt t'.ie • way 
of its distribution. 



Hirs sincerely, 
,.'ic : -a5 I^le-vs'ii 



0. Date/version; 1.11.1978 Pascal 360 release 1.0 

1 • Pi stri butor/Implemen tor/Ma inta iner ; 

Implementors: krzysztof Anacki, Michai Iglewski, Artur 
Krepski, Marek Missala 
Institute of Computer Science 
Polish Academy of Sciences 
Programming Methods Department 
00-901 Warsaw, PKiN, P.O. Box 22 
tel. 200211 (2225) 
telex: 813556 
Maintainer: Distributor: 

M. Iglewski A. Krepski 

address as above address as above 



2. Machine : IBM 360 and IBM 370 - compatible machines 

(The implementation is done on a 360/50) 

3. System configuration : operates under OS. The monitor 

may be modified with minimal effort vbo run under 
VS,MV3etc. Minimal required memory is 110K. 
Standard OS object modules are generated. 
4c Distribution : the Pascal 360 system is distributed on 

a magnetic tape at the density of 800 or 

1600 bpi. 

On the tape there are: 

- description of the installing procedure 

- source version of the system (Pascal and 
assembly code) 

- binary version of the system 

- program to update Pascal programs. 

The tape should be supplied by the user. Ehe 
Pascal* 360 system is distributed free of charge 
with the right <of exploitation till the end 
of 1981. After that period it is possible to 
prolongate this permission to unlimited time. 

5. Documentation : a supplement to the Revised Report (not 

available in machine retrievable form) 

6. Maintenance policy : The system will be in distribution 

at least till 1980 by ICS PAS. At the 
beginning of 1980, the "release 2.0, 
taking into account the users remarks, 
is expected. We deeply appreciate any 
critical remarks and comments concerning 
our system. 
7* Standard (accepted language) 
Basic restrictions: 

- files cannot be assigned, passed as value parameters, 
or occur as components of any structured type} disposi- 
tion packed for files is ignored; it is not permitted to 
declare file variables in procedure (functions) activated 
recursively, 

- sets are limited to x..y where 4 ord(x) 4 ord(y )4 63 

- standard procedures and functions are not accepted < as 
actual parameters 

- the program heading must contain the formal parameter 
output. 

Technical restrictions: 

- the maximum number of elements of an enumeration type 
is 256 

- only the first 8 characters of identifiers are signi- 
ficant 

- the length of 'the object code of a procedure (or of 
a main program) cannot excess 8192 bytes 

- the types of an actual parameter and of the correspond- 
ing formal variable parameter must be the same. 

Additional specifications: 

- the file name in the Pascal program and the name of the 
corresponding DD card must be the same 

- for every procedure (function; "being a formal parameter, 
the types of its parameters must be specified*. 

Extensions : 

- external procedures can be declared 

- the procedure pack and unpack enable the data transfer 
between two unpacked arrays, too 

- the additional predefined procedures and functions are: 
date, time, halt, message, clock, expo, linelimit, 
release, assert. 

8. Measurements : 

- compilation speed: about 1670 chars/sec on IBM 360/50 

- compilation space: 160K for small programs 



3> 



CO 



en 



175K for medium programs 
225K for self compilation 
It is possible to reduce the required compilation space 
by means of overlays. The decrease of compilation space 

a) by 19K implies the decrease of compilation speed by 3 % 

b) by 51K implies the decrease of compilation speed by *\2%* 
- execution speed: comparable with Fortran G as shown in 

the following table 



""^^^^^ compiler 
program ^^^-^^^ 


Fortran 

H 
(op=2) 


Fortran 

G 


Pascal 
360 
(T-) 


Pascal 
360 
(T+) 


Algol 

F 

(T-) 


Algol 
F 
(T+) 


matrix multiplication 


1 


1.58 


1.97, 


2.95 


1.55 


1.84 


recursive program 


1 


1.10 


0.99 


1.16 


14*68 


15.31 


sorting of table 


1 


2.50 


2.30 


3.72 


5.44 


6.31 


character count on 
file 


1 


1.10 


0.25 


0.35 


2.24 


2.39 



- execution space: about 3K plus the size of the compiled code, 

stack and heap. 
The compiler generates re-entrant code and may be shared 
among all users. 
9 - Reliability : current reliability is moderate to good. 

10. Development method : the compiler was developed from 
Ammann's Pascal CDC 6200 Compiler and transported via 
cross-compilation (CDC 6200) to IBM 360. 

The Pascal 360 system consists of 

a) compiler written in Pascal 360 (8600 lines) 

b) monitor written in 360 Assembler (3K) 

c) monitor support procedures written in Pascal 
(535 lines! and in 360 Assembler (6K). 

During $ v years work (1974 - 1978) on the compiler other 
smaller software projects have been realized, e.g. the 
Pascal-P for the IBM 370 and SMAPS - the system of macros 
and procedures for structured programming in the O.S. 
360 Assembler (monitor is written using SMAPS). The actual 
work on the Pascal 360 system deals with 

- improvement of compilation process 

- extension of the Pascal file concept to the other 
O.S. file organizations 

- dynamically called procedures 

- program generating the profile of Pascal user work 

- system for testing Pascal programs 

11. Library support : the Pascal 360 user can form a library 
of subprograms and then use (link) them by means of: 

- separate compilation 

- call of external procedures (e.g. Fortran) preserving 
the IBM conventions. 

The Pascal 360 utility library (including among others 
update program, dynamic profile, cross-reference program) 
has been prepared and will be developped in the future. 



< — See also Zilog Z-80 entry (Darmstadt) — } 



I.C.L. — INTRODUCTION (Slightly Revised) 



PCHICL - Pascal Clearing House for ICL Machines - exists for the purposes of: 



- Exchange of library routines; 

- Avoidance of duplication of effort in provision of new facilities; 

- Circulation of user and other documentation; 

- Circulation of bug reports and fixes; 

- Organization of meetings of Pascal users and implementors; 

- Acting as a "User Group" to negotiate with Pascal 1900 and 2900 suppliers. 

There are currently about 70 people on PCHICL' s mailing list, mainly in Computer Science 
Departments and Computing Centres of UK Universities and Polytechnics. Any user of Pascal 
on ICL machines whose institution is not already a member of PCHICL should contact: 

David Joslin 

Hull College of Higher Education 

Inglemire Avenue 

Hull HU6 7LJ 

England (0482-42157) 
All ICL Pascal users are urged to notify David of any bugs they find, any compiler 
modifications they make, any useful programs or routines or documentation they have 
written, anything they may have that may be of use or interest to other users. 

ICL 1900 Series 



3> 



PASQ Issue 3 

This compiler is most suitable for ICL 1900s operating under George 4 and for those with 
large core store (256k say) operating under George 3. This is the compiler described 
under the implementation checklist in Pascal News. It incorporates a Diagnostics Package 
(written by D Watt & W Findlay of Glasgow University) and a source library facility. It 
takes 44k to compile most programs, 60k to compile itself. 

PASQ Mark 2A 

This compiler is suitable for all ICL 1900s (except 1901, 1901A, 1902, 1903, 1904, 1905) & 
2903/4s with at least 48k of core; it is the most suitable compiler for ICL 1900s 
operating under George 2 and for those operating under George 3 where core is at a 
premium. The compiler lacks some of the facilities of Issue 3, but compiles most programs 
in 36k, 40k for itself. 

XPAC Mark IB 

This compiler is suitable for all ICL 1900s and 2903/4s with at least 32k of core. The 
language processed is Pascal Mark I, the language of the ORIGINAL report. The compiler 
takes 24k to compile most programs, 32k to compile itself. 

ICL 1900 (Belfast) 



0. DATE/VERSION. Updated this issue from letter March 1979. 

1. IMPLEMENTOR/MAINTAINER/DISTRIBUTOR. Jim Welsh, Colum Quinn & Kathleen McShane, Dept 
of Computer Science, Queens University, Belfast BT7 INN, Northern Ireland (0232-45133). 
Enhancements by David Watt & Bill Findlay, Computer Science Dept, University of Glasgow, 
Glasgow G12 8QQ, Scotland, UK (041-339-8855). 

2. MACHINE. ICL 1900 series. 

3. SYSTEM CONFIGURATION. Has been installed under George 3, George 4, Executive, 
MAXIM0P, and COOP operating systems. Requires 36k, uses CR, DA, LP files. (Source 
library facility only, and diagnostic package only practicable under George 3 or 4.) 

4. DISTRIBUTION. Free: send 9-track 1600bpi PE or 7-track 556bpi NRZI tape to Belfast. 

5. DOCUMENTATION. Belfast Users Guide (Supplement to Pascal User Manual & Report) and 
implementation documentation is distributed with the compiler. 

6-10. See Pascal News #13; unchanged. 

11. LIBRARY SUPPORT. Pascal source library facility. 



CO 



CO 



3> 



Intel 8080, 8085, 8086, etc 



Intel 8080, 8085, Zilog Z-80 (Sorrento Valley Associates) 



CONSULTING ENGINEERS 
COMPUTER APPLICATIONS 



SORRENTO VALLEY ASSOCIATES- 



MEMBER, SORRENTO VALLEY GROUP 



July 18, 1979 



Mr. Andy Mi eke 1 
Pascal Implementations 
University Computer Center: 227EX 
University of Minnesota 
Minneapolis, MN 55455 



Dear Andy, 

I am writing to add to your list of Pascal implementations for 
the Intel 8080, 8085 and Zilog Z80. Our Pascal compiler processes a 
subset of the entire Pascal language. Our compiler is designed to meet 
the need of program implementors who are now programming in assembly 
language or PL/M. It is oriented towards those who need the ability 
to place the resultant object code in a ROM. 

As per the Pascal News I am furnishing the attached checklist. 

I hope that you will publish this letter in the next Pascal News 
to help us get the word out about our product. We have developed this 
product to make our software development efforts more efficient. We 
find that writing programs in Pascal and translating them for the target 
machine (previously done by hand and now utilizing MicroPascal) is much 
more efficient than working only with assembly language. We have now 
made two giant steps in developing ROMable computer programs: 



and 



1) Writing and debugging our programs in Pascal 

2) efficiently translating the programs for the target machine 
using MicroPascal/80. 



We are looking forward to an improving market for this compiler 
as Pascal becomes more in vogue for writing microcomputer software. 



Sincerely yours 



^JJi^liCLt^ 




SORRENTO VALLEY ASSOCIATES INC. 
Michael G. Lehman 



11722 SORRENTO VALLEY ROAD. SAN DIEGO. CA. 92121 
TELEPHONE: (714) 452-0101 



1 - 



MicroPascal/80 Implementation Specification 



Date: July 19, 1979 
Version: MicroPascal/80 
Release 1 .0 

Distributor/Implementor/Maintainer 

Distributed and Maintained by Sorrento Valley Associates 

11 722- D Sorrento Valley Road 
San Diego, CA 92121 
(714) 452-0101 

Implemented by: Michael G. Lehman 

Machine: Intel 8080/8085 and Zilog Z80 

System Configuration: 

The compiler executes under the UCSD Pascal system and thus is 
portable across a wide variety of systems. 

It generates assembly language code in one of two forms: 

either a) compatible with the UCSD assembler/linker 

or b) compatible with the Digital Research CP/M MAC 
macro assembler 

In either case (a or b) only the run- time routines which are 
actually used by the user's program are actually included at 
assembly time. 

For interfacing to CP/M we provide a program to transfer files 
from UCSD file format to CP/M file format. 

Distribution: 

The MicroPascal/80 compiler is distributed on 2-8" floppy 
diskettes (single density) which contain: 

1. Compiler object code 

2. Run-time object code for using UCSD linker 

3. Run- time source code for using UCSD assembler 

Note: These disks utilize UCSD directory format. 

Optionally the user may request a third diskette which contains: 

4. (In CP/M format): the CPMRTP.LIB file containing 



-o 

GO 



21 
GO 






5. 



the run- time source code. 

The UCSD to CP/M file transfer program 



The disk utilizes CP/M directory format and executes only on an 
8080/8085/Z80. 

Cost of the above package is $500.00 

Source for the compiler is not available for purchase. 

- 5 - Maintenance Policy 

We will fix bugs promptly for a user for one year from date of 
purchase. 

In the future we are working on versions of this compiler for the 
DEC PDP-11, Intel 8086 and Zilog Z8000. 

- 6 - Standard 

MicroPascal/80 does not implement the full standard for Pascal. 



- 7 



This was done to allow efficient code to be generated for a 
processor like the 8080. 

MicroPascal/80 is a pure subset of the UCSD language and contains 
the following omissions from UCSD Pascal (1.5, 11.0): 

No LABEL declaration (and therefore no GOTOs). 

TYPE declarations for ARRAYS only (to allow passing 
arrays as parameters )« 

No RECORD declarations. 

No FILE support (because most systems which would utilize 
this will not have a disk to need support). 

Only singly dimensioned ARRAYs- 
PACKED is ignored on .BOOLEAN ARRAYs- 
PROCEDURES and FUNCTIONS not allowed as parameters- 
ALL VARiables and procedure parameters 
No STRING data type 
No UNIT capability- 
Measurements 



Compilation speed (executing on a 4MHz Z80) is 1000 chars/sec 
(note this number was derived from 400 Lines/Min * average of 
15 chars/line. 

Compilation space is a minimum 56K byte system. 

Execution speed is estimated to be from 3x to 5x the execution 
speed of the same program executing interpret!* vely under UCSD 
system. 

Execution space is a minimum of 1.5K bytes and grows from there 
depending upon the user's program and run- time routines needed. 

Compactness of the code is from 2x to 5x as large as the UCSD 
P-code but the tradeoff point comes at about 24K bytes since 
MicroPascal/80 does not need an interpreter or operating system 
to support programs. 

- 8 - Reliability 

The stability of the system seems good to us at this point. We 
(and our customers) have been using the compiler for about two 
months with no major problems. 

First release to a customer's site was 79/06/05. 

- 9 - Development method 

This compiler was written from scratch in Pascal. The total effort 
to implement was approximately 4 person-months. The implementor 
had previously implemented about a dozen different compilers for 
various languages. 

- 10 - Library Suppor t 

We supply no library of support routines but the user can by 
using EXIERNAL procedures build a library of supporting routines. 
We have successfully used MicroPascal/80 to generate "assembly 
language" subroutines for use in a library. 

Prospective users should note that since the compiler produces 
assembly language, MicroPascal/80 can be used to generate "sub- 
routines" as well as complete programs. 



We have developed this product to make our software development 
efforts more efficient. We find that writing programs in Pascal and 
translating them for the target machine (previously done by hand and now 
utilizing MicroPascal) is much more efficient than working only with 
assembly language. We have now made two giant steps in developing ROMable 
computer programs: 



CO 



and 



1) Writing and debugging our programs in Pascal 

2) efficiently translating the programs for the target machine 
using MicroPascal/80. 



MicroPascal/80 Language Definition 

* Legal Constructs: 

CONST 

TYPE (ARRAY'S only) 

VAR 

PROCEDURE 

FUNCTION 

IF... THEN... ELSE 

CASE... OF 

WHILE... DO 

REPEAT... UNTIL 

FOR... TO... DO 

FOR... D0WNT0... DO 

* Complete expressions 

including the operators: 
+,-,*,DIV,/,M0D,AND,0R,N0T 

* Single dimensioned ARRAYs 

* Integer, Character, Boolean and Real data types 

Intel 8080A (DMC Division of Cetec Corporation) 



DMC a Division of Cetec Corporation 
2300 Owen Street 
Santa Clara, California 95051 
(403) 249-1111 



Dear Dr. Wirth: 



DMC 



November 22, 19 78 



It is with pleasure I write to you announcing the release of a 
new software product by DMC Division of CETEC Corporation. 

Our software development staff has produced a PASCAL compiler to 
run on our 80 80A microcomputer floppy disk system, the CommFile. 
The details are: 



Implementation 



Machine 



Marketing Department 
DMC Division of CETEC Corp. 
2 300 Owen Street 
Santa Clara, CA 95051 
(408) 249-1111 

8080A 



3> 



3. System Configuration 

4. Distribution 

5. Documentation 

6. Maintenance Policy 

7. Standard 

8 . Measurements 

9. Reliability 

10 . Development 

11. Library Support 



DMC CommFile 130 with 44K bytes 
of RAM and dual floppies. 

DMC CommFile 130 with 44K bytes 
of RAM, dual floppies, and PASCAL 
compiler retails for $6320.00 U.S. 

PASCAL Users Manual and Report, 
second edition. DMC PASCAL Opera- 
tors Manual. 

Full maintenance. 

PASCAL Users Manual and Report, 
second edition. 

Not yet available. 

Stability excellent. 

Recursive Descent Compiler. 

Standard PASCAL Procedures and 
Functions. 



Intel 8080 (TSA Software ASP) 

TSAsDFTIMBE.iwc 

3R 071 LL142D5 DR., /DONRQE. CT. D&U&B 

79.3.9 



Dear Andy, and fellow Pascal - Ligraphers 

(caligraphy is the art of fine hand-writing and 
Pascal is the ) 






CO 



You will be kept informed as we develop PASCAL further at DMC. 

Very truly yours, 



Phil Devin 
Manager 
Marketing Support 



j/^Ai^y<2z^^ e ^^/^>^^' 



Intel 8080, 8086, Zilog Z-80, Z-8000 (Microsoft) 



The Microsoft Pascal is to be compatible with UCSD, ANSI and ISO Pascal. The target 
processors are 8080, Z-80, 8086, Z-8000 and LSI-11, and will run under CP/M on 8080 and 
Z-80, and is expected early in 1980. 

There appear to be some un-needed extensions; the following list is selected from some 
documentation we received: 

- predefined type WORD (16-bit unsigned integer) <??> 

- attributes for variables: 

STATIC, INITIAL, ORIGIN, REGISTER, INTERNAL, EXTERNAL 

- capabilities from the C language { 1 1 > 

embedded assignment operator 
increment and decrement operators 

- control structure extensions { when we. have too many* already } 

BREAK and CYCLE in FOR, WHILE & REPEAT 

RETURN statement 

FOR variable IN set DO statement 

- address functions PEEK and POKE 

Fortunately, the language will be structured in levels, and at the best level looks rather 
like Pascal ought to look. At the "Extended" level and the "System" level these rather 
useless and dangerous features are enabled, according to the manual to give "the ability 
to easily do in Microsoft Pascal those operations that are easy in assembly language". We 
always thought that Pascal was supposed to preserve us from undesirable practices and lead 
us away from temptation. Readers of the News may like the following two examples from the 
SYSTEM level of the Microsoft Manual; we do not: 

ALPHA[I.=(BASE+INCR(Q))] :=ALPHA[I*2-1]+J 

FOR IX:-1 TO J. -(LIMIT + 2 * INCR) DO ... 
Apart from these additions, the standard level of Microsoft Pascal looks like being a good 
job. 



As you can see from the date of my PUG renewal check (78.11.7), 
this letter has been a long time in the finishing, I hope it is 
useful . 

It is important that the reader understands the machine 
environment I work in, because it is very different from the usual 
Pascal environment. I work primarily on systems programs for 
micro-computers. We deal with "BIG" micros - 32K Bytes or more, at 
least a mini-floppy disk (80K)and usually a video display terminal 
and printer. We sell operating systems and related support 
software, with occasional applications projects. 

The net result is an machine environment with: 

imited memory 

imited and slow disk storage 

speed but totally unaided 
sor 8080/Z80 (no 1/0 or 
ary processors) 
1 operating system support, 

CP/M variety. (no protected 
ng - memory or I/O) 
ow budget projects, with no or 
1 institutional support 
te reliability requirement 
ess software) with very 
users . 

All in all, a rather harsh operating environment. As a result, 
most programming is either assembler or assembler. Business 
software is done primarily using a rather poor selection of 
Basics . 

I've been using Pascal as a design language since 1975 when 
Pascal - P2 came out, but haven't had a compiler to actually use. 
When USCD Pascal came out, I had hopes for it, however it does' t 
run within our software environment. It is interpretive and does 
not provide escape to assembly code when necessary. At that point 
I broke down and initiated our "ASP" project. "ASP" (a small/ 
system Pascal, TM -TSA Software) is a full compiler, and outputs 
8080 assembler for use with our 8080 linking assembler. (much to 



(1) 


Very 1. 


(2) 


Very 1: 


(3) 


Medium 




proces: 




auxil i< 


(4) 


Minima; 




of the 




anythii 


(5) 


Very 1< 




minima. 


(6) 


Absolui 




(busin< 




naive i 









most people's amazement, most micro computer assembly code is 
still written with absolute non-linking assemblers.) It is 
detailed in the attached implementation checklist. 

The discussions herein are related to our experience with our 
compiler and using Pascal in a general system environment. In some 
cases, our own solutions are discussed; in others, a plea for 
suggestions is made. 



Measurements: 



I find the current discussion in the popular 
periodicals abut Pascal, rather amusing; since I see 
difference in the place of Pascal vs Basic. Pascal i 
friendly language, in fact to be so, would fail it's p 
requirement: To allow the programmer to produce fun 
reliable, maintainable programs. Basic, on the other h 
appropriate to an environment where laxity and int 
processing is more appropriate. The problem as to when a 
crosses the dividing line and how to place it in the 
environment initially is the critical item, but beyond th 
of this letter. 

Implementation Checklist 



The TSA Software 'ASP' (tin) compiler is a minimal 
implementation of Pascal. It is intended to be the bottom end of a 
line of compilers. 'ASP' - A small Pascal or a system Pascal 
provides basic functions for system programming and acts as a 
basis for application programming. 



omputing 

a vast 

not a 

r imar ily 

ctional , 

and, is 

eract ive 

program 

correct 

scope 



2. 
3. 



4. 
5. 

6. 
7. 



Date / Version: 
Implementor 



79.2.5; ASP/1 version x00.14 



Richard Roth 
TSA Software, Inc. 
39 Williams Drive 
Monroe, Connecticut 06468 
(203) 261-7963 

Machine: 8080 / Z80 / 8085 Micro Processor 

Configuration: 32K..64K Bytes 

At least one floppy disk 

Running CP/m, CDOS, IMDOS, TSA/OS 

or any other compatable operating system 

Distribution: ALPHA test copies only being supplied 

Documentation: 40 pages of test notes, and library calling 
sequences, 10 sample programs 



Maintenance: Not defined yet 
Standard: Major subset of Pascal 



(A) All program structures except CASE, WITH 

(B) Only scalar variables and arrays. 

Pseud'o — Structures using 'CONST' offsets 
and 'type casting'. Value procedure 
parameters only 



Extensions : 



Text file include 

External and module declaration 

Static data initialization 

In-line machine code 

String functions: CONCAT, SUBSTR, etc. 

Bit-wise boolean on integers 



Reliability: 



Development 



Compile: 230 line/min. to 8080 Macro assembler 
Total: 24 line/min. to linked executable code 
10K Bytes for compilier 
Execution: Full 8080 machine code 
Library size: String- 1600 bytes 
I/O- 6200 bytes 
Real- 1800 bytes 
General- 260 bytes 
Still in development 
Rev X00.00 since September 78 
2 Alpha test sites since December 78 



-a 



11. 



Recursive decent technique 
Coded in 8080 machine code 
Outputs macro's, table driven for different 

macro formats of assembler code 
Approximately 70K Bytes of source code 

(2K lines) 
3-4 man-months of super programmer time. 

Library / Support 

Linkable support library for: 

Variable length strings 

32 Bit / 16 bit integers, 12 digit reals 

Sequential and block random I/O, recursive coding. 
Source file include with some supplied 

external declarations 
Utilities: Symbol cross-reference, Documentation 

comment printer 



i— » 



Interdata 



See Perkin-Elmer (change of company name) . 
Modcomp II & IV 



Larry D Landis, United Computing Systems, 2525 Washington, Kansas City, MD 64108 reports 
that Syd Weinstein (a co-worker) says that the University of Illinois School of Medicine 
has a ModComp Pascal. No other details. (78 Nov 17) 

Also Eugene N Miya, Pascal Development, Jet Propulsion Laboratory, 4800 Oak Grove Drive, 
Pasadena, CA 91103 (213-354-4321) reports that JPL is undertaking an effort to come up 
with a Pascal compiler for the ModComp II and IV. (79 Mar 08) 

Motorola 6800 






Control Systems Inc, Kansas City, KS, seem to have a 6800 version of Pascal. Sorry, no 
more information do we have. 

Nord-10 & Nord-100 



Terje Noodt 

Computing Center, Unirersity of Oslo 

Pb. 1059, Blindern 

Oslo 3, Norway 



CD 

m 



May 14, 1979 



Terj$ Noo'at 



Dear Andy, 

Could you please send me another copy of Pascal News number 13? 
In my copy pages 85 to 94 are missing. A,, 

The work you have done for PUG and Pascal has been tremendous - 
I can understand that you feel you've had the burden long enough. 
I only pray that PUG doesn't die. 

We have now finished a new version of Pascal for the Nord-10 and 
the recently announced Nord-100. A description is enclosed, 
together with a copy of the User Manual. 

Yours sincere 



Nord-10 and Nord-100 Pascal 

0. MTE/YERSION. 79/04/23 

1 . IMPIBMENTOR/DISHJRIBUTOR/MAINTAINER. 
Implementors: P. Gjerull and T. Noodt, 

Computing Center, University of Oslo 

Pb. 1059, Blindern 

Oslo 3, Norway 
Distributor: Norsk Data A. S. 

Pb. 4, Lindeberg gard 

Oslo 10, Norway 
Maintainer: The implementors and distributor in 

collaboration. 

2. MACHINE. Nord-10 and Nord-100. 

3. SYSTEM CONFIGURATION. Nord-10 or Nord-100 running SINTRAN III. 
A Pascal program may use up to 128K of virtual memory. 

4. DISTRIBUTION. Prom Norsk Data A.S. on floppy disks. 

5. DOCUMENTATION. User Manual (40 pages) describing use of Pascal 
system, restrictions and extensions. Machine retrievable. 

6. MAINTENANCE. Norsk Data grade A (highest level). 

7. STANDARD. Restrictions: Declaration of file variables in 
main program only. MARK and RELEASE implemented instead of 
DISPOSE. Extensions: Initialization of main program variables. 
Piles may be opened dynamically. Separately compiled Pascal 
and FORTRAN procedures may be called. Several minor extensions 
and utilities. 

8. MEASUREMENTS. Performance comparable to Nord FORTRAN (estimated). 

9. RELIABILITY. Good. 

10. DEVELOPMENT METHOD. Developed from the TRUNX compiler. 
Produces standard relocatable code (BRF). 

11. LIBRARY SUPPORT. A set of external utility procedures to 
interface with the operating system. 



Perkin-Elmer 7/16 (Melbourne) 

{ running Brinch-Hansen's "Sequential Pascal" > 



3> 
CO 



UNIMELB PARKVULE 




WLnibtx&ity of Melbourne 

DEPARTMENT OF COMPUTER SCIENCE 



Parkville, Victoria 3052 



7th June, 1979. 



Dear Andy, 



I am writing in response to queries in the Pascal User's 
Newsletter concerning Pascal on the Interdata 7/16. You and some 
of your readers may be interested to know that we have had Brinch 
Hansen's Sequential Pascal running on our 7/16 since mid-1977. I 
have included a description of our system in the form of implementation 
notes, and will welcome any inquiries that are made as a result of 
these notes. 

Yours sincerely, 



c. Joe Longo . 

VERSION: 

Brinch Hansen's Sequential Pascal 

IMPLEMENTORS : 

JOSEPH LONGO, 

DEPT. OF COMPUTER SCIENCE, 

UNIVERSITY OF MELBOURNE, 

PARKVILLE, VICTORIA, 3105, 

AUSTRALIA. 

MACHINE : 

Interdata 7/16, with high-speed ALU and 64 Kb memory 

SYSTEM CONFIGURATION: 

Home-grown "Hynos" disk-oriented operating system provides the 
host environment, but its support functions can be easily provided 
in a stand alone environment. 






Z3> 
CD 



DISTRIBUTION: 

The original distribution tapes and documentation from which this 
implementation has been derived can be obtained from the 
distributor for a total cost of $US60. 



DOCUMENTATION: 

"Sequential Pascal Report", per Brinch Hansen, Alfred C. Hartman, 
Cal .Inst. Tech. , July 1975 (comes with the distribution tapes and 
notes.) "The Architecture of Concurrent Programs, per Brinch 
Hansen, Prentice-Hall. 



Sequential Pascal is a subset of Pascal. Some of the differences/ 
limitations are: 

- no "goto" statements (and therefore no "labels") 

- maximum set size: 128 elements 

- no nested procedure definitions 

- non-standard input-output: I/O defined at compilation time through 

"prefix procedures" 

- procedure names can not be passed as parameters in procedure calls. 



MEASUREMENTS: 

The seven-pass Sequential Pascal Compiler compiles at a rate of 
approx. 6 lines per second, but is 30% I/O bound within the Hynos 
operating system. The compiler requires a 16-1 7Kb program space and 
12- 13Kb data space. 

Code produced by the compiler is interpretive. The average execution 
time of a virtual instruction is about 40 micro-sees. 

RELIABILITY: 
Very good. 

DEVELOPMENT METHOD: 

Sequential Pascal is an interpretive language developed by 
Brinch Hansen for use in writing utility programs for and as 
the job-control language of Concurrent Pascal Programs. The 
original interpreter was written in PDP-11 assembly code and 
was transferred to the Interdata 7/16 with about one man-month 
of effort. Translation of the interpreter from the PDP-11 into 
7/16 assembly code was relatively simple. The difficulty en- 
countered arose from trying to implement Sequential Pascal outside 
of its Concurrent Pascal environment. Not only did we have to 
make our operating system respond to the system calls as would 
Concurrent Pascal, but also we found it necessary to investigate, 
at a very basic level, the operations of the Concurrent Pascal 
Compiler in maintaining the working environment for program 
execution. These operations are transparent to the Sequential 
Pascal programs and unfortunately none of this work for implementing 
Sequential Pascal on its own is documented by the developers. 
Finally, the size of the Interdata Interpreter is about 4Kb 
(compare this to 2Kb for the PDP-11) but includes all of the 
virtual instructions needed for interpreting Concurrent Pascal 
code also. 



10 LIBRARY SUPPORT: 

One of the features of Sequential Pascal is that all library 
routines are defined as "prefix procedures" at compilation time. 
This feature has been used extensively to enable our Sequential 
Pascal programs to exploit a number of facilities available in 
the host environment. This means that, apart from the basic 
procedures described in Brinch Hansen's book (see 5 above), all 
other library routines are entirely implementation dependent. 
It is conceivable that this facility may be used to link to 
FORTRAN programs, but we have no intentions of doing so. 

One of the prefix procedures defined by Brinch Hansen, called 
"RUN", enables a Sequential Pascal program to execute another 
sequential program. It is not an overlay in that, to the calling 
program, it appears like a normal procedure call, but it is a very 
useful method for linking separately compiled programs at 
execution - rather than at load -time. In fact this is what makes 
the running of the seven -pass compiler feasible. 

Perkin-Elraer 3220 (Champaign) 

Roger L Gulbranson, Nuclear Physics Research Laboratory, University of Illinois 23 
Stadium Drive, Champaign, IL 61820 (217-333-3190) reports that he is writing data 
acquisition software (to perform at a rate of 10000 samples /second) on his new 3220 
written in Concurrent Pascal. He will also be improving the efficiency of the kernel and 
the Pascal compiler's code generator. 



3> 

<— > 

3> 



RCA/RCS 1802 Microprocessor 



LEADERS IN ELECTRONIC INSTRUMENTATION 



1 



Dear Andy/ 



17 July 1979 



GOLDEN RIVER 
COMPANY LTD 

Telford Road Bicester Oxfordshire England OX6 OUL 
Telephone: Bicester (086 92) 44551 



Having read your letter in Pascal News No. 13, I am loathe to 
write 7 adding to your load, but perhaps the enclosed brochure 
of our Pascal Compiler for the RCS 18 02 Microprocessor will 
be of interest to your readers . 

The language was developed by our Company in response to 
our own needs for an easy to use high-level language at 
present not available with the 1802 Microprocessor. 

We intend marketing the compiler, which requires use of 
RCA's full development system, on a World wide basis, 
through direct sales and via distributors. If any of your 
readers are interested in either purchase or distribution 
agreements, we would of course, be pleased to hear from them. 

The Compiler is priced at £1190-00 complete with 
documentation . 



Yours faithfully 



m 







M. J. DALGLEISH 



3> 
CD 






< Oxfordshire > 

0. DATE. 1979 July 17 

1. DISTRIBUTOR. Golden River Company Ltd, Telford Rd, Bicester, Oxford^. ,: .r - W. 'Y'\ 
England. (08692-44551) 

2. MACHINE. RCA 1802 Development System. 

3. CONFIGURATION. 20k RAM, CDP18S Dual floppy drives, RS232-compatible terminal. 

4. DISTRIBUTION. 1190 pounds sterling for licence of nominated system only. 
Distribution medium: floppy disk. 

5. DOCUMENTATION. Printed User Manual (not machine retrievable). 

6. MAINTENANCE. For forseeable future. 

7. STANDARD. Pascal subset implemented. No reals, enumerated or subrange types, no 
variant records, no binary i/o, no integer or real i/o to text files, no nested procedure 
declarations, 64-element set limit, maxint= ! 32767, no file declarations, packed not 
implemented. 

8. MEASUREMENTS. Compiles in 17k bytes, run-time support requires 2-3k byte kernel. No 
speed given. 

9. RELIABILITY. Not known. 

10. DEVELOPMENT METHOD. 3-pass compiler with intermediate results to disk. 

11. LIBRARY. None specified. 

Siemens 7-748 



See also Zilog Z-80 (Darmstadt) entry 
Southwest Technical Products SWTP6800 



7th June, 1979 



lueiddhd 



oosteinde 223 voorburg 

telephone 070-862387 
bank: a.b.n. voorburg 

account 516610384 

registration no. 86871 

the hague chamber of commerce 



Dear Sir 

Please include the enclosed CheckList in your next 
Newsletter. 

Sincerely, 




Dr. N.W. Bennee 



P-6800 PASCAL - CHECKLIST FOR PUG NEWSLETTER 



3> 



0. DATE/VERSION 

Version 1 released May 1979. 



IMPLEMENTOR/DISTRIBUTOR/MAINTAINER 

Lucidata, 
Oosteinde 223, 
Voorburg, 
Holland. 



go 



South-West Technical Products 6800 or equivalent. 



SYSTEM CONFIGURATION 

Mini floppy disc with 12K + 4K bytes memory as a minimum 
configuration, using the Technical Systems Consultants 
mini FLEX or FLEX 2 Operating System. 

DISTRIBUTION 

Lucidata. 

The cost is 300 Dutch Guilders (approx. 150 US dollars) 
for the compiler, the run-time system, utilities and 
demonstration programs on a floppy disc, together with 
the documentation. 



DOCUMENTATION 



User manual. (Not machine retrievable). 

Gives details of the PASCAL subset, sufficient information 
on the run-time system to permit building of customised/ 
specialist systems, and specimen programs. A list of 
PASCAL books is included, and the address of PUG! 



MAINTENANCE 



Matters requiring attention should be reported to Lucidata. 
Subsequent releases will include any corrections which may 
be necessary. 



STANDARD 



Version 1 is a self -compiling subset of PASCAL. Principal 
omissions are records and pointers, with certain restrictions 
on type declarations. Version 2 (planned for late 79 release) 
will include more features. 



MEASUREMENTS 



Compilation speed: depends on the amount of memory in 
the configuration, but is independent of program size. 
A page mode (which is about half as fast as normal 
mode) is invoked automatically if there is insufficient 
memory for any program (e.g. the compiler) and its 
stack space. 

Speeds measured for self-compiling the compiler on a 1 MHz 
system with SWTP MF-68 dual floppy discs are as follows: 

32K bytes : 78 characters/second (130 lines/minute) 



24 + 4K 
20 + 4K 
16 + 4K 



44 characters/second ( 74 lines/minute) 
42 characters/second ( 70 lines/minute) 
32 characters/second ( 54 lines/minute) 



Zilog Z-80 



Execution speed: finds all 92 solutions to the Eight queens 
problem in 58 seconds, using the recursive alogrithm given 
in "Algorithms+Data Structures=Programs", by N. Wirth. 

Execution space: between 3K and 4K bytes for the run-time 
system, depending on the number of different P-codes to 
be executed, plus space for the P-code instructions for 
the programs - typically. 12 bytes per line of source 
PASCAL, plus stack space. 



RELIABILITY 



So far, excellent - but insufficient use by non-professionals 
to make a meaningful claim. 

DEVELOPMENT METHOD 

Two pass recursive descent compiler which generates 
P-code in fixed, length 4 byte format, executed by the 
run-time system.. Bootstrapped up from a much smaller 
subset of PASCAL. 

LIBRARY SUPPORT 

Separately assembled routines may be linked in. 



Sperry-Univac V77 (Irvine) 



Sperry Univac Minicomputer Operations has announced Summit, a uulti-task operating system 
for V7 7-800 & V77-600 minicomputer systems, supports Pascal as a component. Prices seem 
to be $6000 for Summit and $2000 for Pascal. 

Write to Sperry Univac Minicomputer Operations, 2722 Michelson Drive, Irvine, California 
92713 (714-833-2400 X536) or London, NW10 8LS, England or 55 City Centre Drive, 
Mississauga, Ontario L5B1M4, Canada. 

Tandy Radio Shack TRS-80 

A UCSD Pascal System has been announced by FMG Corporation (PO Box 16020, Fort Worth TX 
76133 Phone: 817-294-2510) for the TRS-80. The package costs $150 and requires a 48k 
system with two disk drives. 



Texas Instruments 9900 



Ticom Systems (10100 Santa Monica Blvd, Suite 862, Los Angeles, CA 90067, Phone 
213-552-5328) have announced a version of Pascal for the TI 9900. Our blurb from Michael 
Hadjioannou was not in the form of a checklist and contained no technical details. 

Univac 



Zilog have announced Z-80 Pascal at $950 from 7. Hog at 10340 '.Vnb Road, Cupertino, 
California 95014. Very little more is known at PUG HQ. 

See also Intel 8080 (SVA, Microsoft). 

Zilog Z-80 (Ithaca Audio Pascal-Z) 

Ithaca Audio, P Box 91, Ithaca, NY 14850 (607-257-0190) have announced "the first Pascal 

compiler for the Z-80, and the fastest Z-80 Pascal ever is now ready" (Byte, 79 July). 

The compiler requires the Ithaca Audio K2 operating system and 48k memory. The output is 

native assembly code for the Z-80, which has to be assembled thrmig'- ;\ m. r.\. . ■-.{.-> .. 
Price: $175.00; distribution: 8" K2 floppy disk. 



Zilog Z-80 (Darmstadt) 

The following letter was received by a PUG member on 79 Feb 5, from Dipl-Ing M. Becker. 



Institut f Qr Theoretische Informatik 61 00 Darmstadt, 

Fachbereich Informatik »«L*aW|&D4£* *2XMagdalenenstraBe 1 1 

Dipl.-Ing. M. Becker Teiefon (O6151) 163 411 

PASCAL Users Group 
c/o Judy Mull i ns 
Mathematics Department 
The University 

Southampton S09 5NH 



Technische Hochschule 
Darmstadt 



5.2.1979 



Dear Mrs Mul Tins, 

I would like to inform you of a PASCAL-Compi 1 er which is running 
on the following machines: IBM 370, SIEMENS 7.748, DEC PDP 11 
and PDP 15. Last year we finished the development of a compiler 
and cross-compiler for Z 80-mi nicomputers . 

In some sense our system is portable and therefore it might be of 
interest for other people. If you are interested in further 
information concerning this system please write to 

Technische Hochschule Darmstadt 
Institut fur Theoretische Informatik 
MagdalenenstraBe 11 
D - 6100 Darmstadt 



Yours sincerely 



See Sperry-Univac 



Zilog Z-8000 



jl%L 



CO 






CD 



See Intel 8080 



