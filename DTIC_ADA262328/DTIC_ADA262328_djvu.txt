Reproduced From 
Best Available Copy 





» 



I DconoT nnm 

AD-A262 328 



. ^iooooPi^niDS 


'MENTATION PAGE 


Form Approved 
OPMNo. 


timated to avefaga 1 hour per reaponse. irKlud<ng the time lor reviewing matructiona. searching evisting data sou 
•n o< inlomialion. Sartd comments regarding this burden estimate or any othsr aspect ol this collection ot mtorma 
iarlem Servtoe. Diredorate tor Information Operations and Reports. 1215 Jefferson Davis Highway, Suite 1204, t 
Affairs. Office of Management and Budget. Washington. DC 20503. 


2. REPORT 


3. 


REPORT TYPE AND DATES 


Final: 19 Marchg 92 


4. TITLE AND 

Validation Summary Report: Verdix Corporation, VADS Sun-4 Solaris 2.1, 
VAda-110-4040, Version 6.2, Sun SPARCstation LX 4/30 under Solaris 2.1 
(Host & Target), 921004W1.11285 

5. FUNDING 

6. 

Wright-Patterson AFB, Dayton, OH 

USA 


7. PERFORMING ORGANIZATION NAM£(S) AND 

Ada Validation Facility, Language Control Facility ASD/SCEL 

Bidg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING 
ORGANIZATION 

AVF-VSR-556-1092 

9, SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 1 

United States Department of Defense Ij 1 1 

Pentagon, Rm 3E114 

Washington, D.C. 20301-3081 

___-- n, M_ 

10. SPONSORING/MONITORir 
AGENCY 

11, SUPPLEMENTARY U v 


12a. DISTRIBUTION/AVAILABILITY 

12b. DISTRIBUTION 

Approved for public release: distribution unlimited. 



13, (Maximum 200 


Verdix Corporation, VADS Sun-4 Solaris 2.1, VAda-110-4040, Version 6.2, Wright-Patterson AFB, Sui 
SPARCstation LX 4/30 under Solaris 2.1 (Host & Target), ACVC 1.11. 


n, 93-0 

98 3 ^9 002 lllllll 

16373 

14. SUBJECT 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, 

1^. NUMBER OF 

16. PRICE 

17. SECURITY 

CUSSIFICATION 

UNCLASSIFIED 

18. SECURITY 

UNCLASSIFED 

19. SECURITY 

CLASSIFICATION 

UNCLASSIFIED 

20. LIMITATION OF 


NSN StaruJard Form 298 

Prescribed by ANS 




















» 


Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 4 October 1992. 

Compiler Name and Version: VAOS Sun-4 Solaris 2.1 

VAda-110-4040, Version 6.2 

Host Con^juter System: Sun SPARCstation LX 4/30 under Solaris 2.1 

Target Conpiter System: Sun SPARCstation LX 4/30 under Solaris 2.1 

Customer Agreement Number: 92-06-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

921004W1.11285 is awarded to Verdix Corporation. This certificate expires 

tvro years after the ANSI adoption of ANSI/M1L-STD-1815B. 


This report has been reviewed and is approved. 



Ada Validation Facility 
Steven P. Wilson 
Technical Director 
645 C-CSG/SCSL 
Wright-Patterson AFB OH 


45433-6503 



Ada Vali^ti^ terganizatioh 

fj'Director^ Compueter and Software Engineering Division 
^ Institute for Defense Analyses 
Alexandria VA 22311 


Ade^ Joint Program office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 






AVF Control IA.Tnber; AVF-VSR-556-1092 
Date VSR Complete: 18 November 1992 

92-06-23-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 921004W1.11285 
Verdix Corporation 

VADS Sun-4 Solaris 2.1 VAda-110-4040, Version 6.2 
Sun SPARCstation LX 4/30 under Solaris 2.1 


(PINAL) 


Prepared By: 
Ada_Validation_Faci1i ty 
645 C-CSG/SCSL 

Wright-Patterson APB OH 45433-6503 


DECLARATION OF CONFORHAMCE 


The following declaration of conformance was supplied by the customer. 


Declaration of Conformance 
Customer: Verdix Corporation 
Certificate Awardee: Verdix Corporation 

Ada Validation Facility: ASC/SCEL, Wright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Name and Version: VADS Sun-4 Solaris :2.1 

VAda-110-4040, Version 6.2 

Host Computer System: Sun SPARCstation LX 4/30 under Solaris 2.1 
Target Computer System: Sun SPARCstation LX 4/30 under Solaris 2.1 


Declarstion: 


We, .he undersigned, declare that we have no 

knowledge of deliberate deviations from the Ada Language 

Standard ANSI/m:l-STD- 1815A ISO 8652-1987 in the implementation 





Aceessl on For 

MIS 0RA4I "" 
MIC TAB 
Unazuicunced 
JuatiricatloiL. 


□ 

□ 


By- 


Ava 1 l abinty 
lAvtrtl and/or 
Dlst I Special 




I 


TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT .1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES ..1-2 

1.4 DEFINITION OF TERMS ............... 1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS .2-1 

2.2 INAPPLICABLE TESTS .2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRCaNMENT .3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION. 3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 
INTRCOUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures (Pro901 against the Ada Standard [Ada83) using the 
current Ada Compiler Validation Capeibility (ACVC). This Validation Summary 
Report (VSR) gives ein account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be foxand in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATI(»I SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may malce full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systems, emd compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the s\jJ:>ject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from; 1 

1 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA' 22161 

Questions regarding this reflort or the validation test results should be 
directed to the AVF which performed this validation or to: 

i 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Deifense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 


INTRODUCTH:»I 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1587. 

tPro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program"Office, August 1990. 

(UG89] Ada Compiler Validation Capability User's Guid e, 21 June 1989. 


1.3 ACVC TEST CLASSES 

Coitpliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executaible. Class B and 
class L tests are expected to produce errors at compile time eind link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library mits, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
te.sting is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the conpiler. Ihis behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately conpiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certe'n macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this inplementation is provided in ^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 



INTRODUCTIOT 


For each Ada inplenentation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITIOl OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capeibility user's guide and the tenplate for the validation suitmiary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Inplementation target conputer system. 

Ada Joint The part of the certification body vdiich provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the coirpliar.ee of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Coitpliance of The ability of the inplenentation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more conputers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 



INTRODUCTION 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity vho enters into an 

agreement with an AVF wiiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada inplementation for 
vrtiich validation status is realized. 

Host Computer A computer system v^^ere Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predominzuitly software, but partial or 
conplete hardware implementations are possible. 

Target A computer system vrtiere the executable form of Ada programs 

Coitputer are executed. 

System 

Validated Ada The con^iler of a validated Ada inplementation. 

Compiler 

Validated Ada An Ada inplementation that has been validated successfully 
Inplementation either by AVF testing or by registration [Pro90). 

Validation The process of checking the conformity of an Ada conpiler to 
the Ada programming leuiguage and of issuing a certificate 
for this iiiplementation. 

Withdrawn A test found to "be incorrect and not used in conformity 

test testing. A test may be incorrect because ic has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 










OiAPTER 2 

IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1S91. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C456?2A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

ED1B02E 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3C06A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD403iA 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD720LA 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

Cr9005B 

CDA201E 

CE2107T 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3tl2B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inappliceibility may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the fontat Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


IMPLE21ENTATIC»J DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests chec)t for the predefined type LCM5_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C8500SC 

CD7101F 

C35713C, B86001U, and 

C86006G 

check for 

the predel 

LCM3_FLQAT; 

for this inplementation. 

there is no 

such type. 


type 


C35713D and B86001Z cheeJt for a predefined floating-point type with a 
name other than FLOAT, LC»lG_FLCiAT, or SriORT__FLOAT; for this 
in^lementation, there is no such type. “ 


A35801E checks that FLOAT'FIRST..FLOAT'LAST may lie used as a range 
constraint in a floating-point type declaration; for this 
implementation, that r 2 uige exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, MAX_MANTISSA is less than 47. 


C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFUWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACH1NE_0VERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks vdiether a length clause Ccin specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 









i.M> y j i i j n ;j|iii|wi!fi;^i»ii«p;^i!Wff ) »! .) iiftn.iy ' ii ,W).ip » , U' f. ' W ! « || 


IMPLEMENTATI(»I DEPE2®ENCIES 


CT)2A84A, CD2A34E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

The tests listed in the following table checlt that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this in^jlementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102M 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OLT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

IIvOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIPiCT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT~IO 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT“10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

text"* 10 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

JPEN 

OUT FILE 

TEXT 10 


CE2203A checks that V?RITE raises Ui;E_ERROR if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that •6ET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify "an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYCXJT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 




IMPLEMENTATIC^I DEPE3®ENCIES 


2.3 TEST MODIFIO^TIONS 

Modifications (see section 1.3) were required for 23 tests. 

The following tests ' 'e split into two or more tests because this 

implementation di_ _ report tlie violations of the Ada Standard in the 

way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A 

B38009B B85008G B85008H BC1303F BC3005B 

BO2B03A BD2D03A BD4003A 


A35801E was graded inappliccible by Evaluation Modification as directed by 
the AVO. The conpiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A24A, CD2A31A..C (3 tests) were 
graded passed by Evaluation Modification as directed lay the AVO. These 
tests use instantiations of the support procedure LENGTH_aiECK, v^ich uses 
Unchecked_Conversion according to the interpretation given in Al-00590, 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: “ 

" * CHECK REPRESENTATION FOR <TYPE ID> FAILED." 


AD9001B was graded passed by Test Modification as directed by the AVO. 
Itiis test checks that no bodies are required for interfaced subprograms; 
eunong the procedures that it uses is one with a parameter of mode OUT 
(line 36). This implementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
commenting out line 36 and 40; the modified test was passed. 




CHAPTER 


3 


PROCESSING INFORM'TION 


3.1 TESTING ENVIRCWMENT 

The Ada iir^jlementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact; 

Sam Quiring 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada iirplementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inclementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, vrtiether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 



PROCESSING INFORMATICS 


a) Total Number of Applicable Tests 3805 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 


f) Total Number of Inapplicable Tests 270 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a RDI Britelite ITX laptop and copied over 
Ethernet to the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada in^lementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


Option/Switch Effect 


-w 


suppress generation of warning messages 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 




APPOroiX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning amd purpose of these parameters are explained in (UG891. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maiximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 — Value of V 

$BIG_ID1 (1..V-1 -> 'A', V -> '1') 

SBIG_ID2 (1..V-1 -> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') I 

$BIG_ID4 a..V/2 -> 'A') & '4' & ^ 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 , & (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 



MACRO PARAMETERS 


$MAX_STR1NG_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALZGNMENT 

4 

$COUNT_LAST 

2 147 483 647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

SUN4_UNIX 

$DELTA_DOC 

0.000000000465612873077392578125 

$ENTRY_ADDRESS 

SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM. "+''(16#100#) 

$FIELD_LAST 

2_147_483__647 

$FILE_TERMINATOR 

r » 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLOAT_NAME 

Nq_SUCH_TYPE 

$FORM_STRING 

nn 

$FORM_STRING2 

"CANNOT RESTRICT FILE CAPACITY" 

$GREATER THAN DURATION 


- 100 _ 000.00 

$GREATER_THAN_DURATION BASE LAST 

T0_00U_000 

$GREATER_THAN FLOAT_BASE LAST 

1.5E+308 

$GREATER_'IHAN_FLOAT_SAFE LARGE 

s.Ueso? 


A-2 




MACRO PARAMETERS 


$C21EATER_THAN_SH0RT FLQAT_SAFE_LARGE 

9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

■Villegal/f ile_name/2 {]$%FILE1.DAT 

$ILIJSX3AL_E3CTERNAL_FILE NAME2 

Villegal/f ile_naine/2 {] $%FILE2 .DAT 

$INAPPROPRIATE_LINE_LENGTH 



-1 

$INAPPRCPRIATE_PAGE_ 

LENGTH 


-1 

$INCLUDE_PRAC3^ 

PRAGMA INCLUDE ('’A28006D1 .TST") 

$INCHJDE_PRAGMA2 

PRAGMA INCLUDE {'’B28006D1 .TST") 

$INTEGER_FIRST 

-2_147_483_648 

$INTEGER_LAST 

2_147_483_647 

$INTEGER_LAST_PLUS_1 

2_147_483_648 

$INTERFACE_LANGUAGE 

C 

$LESS_THAN_DURATION 

-100_000.0 

SLESS THAN DURATIOM BASE FIRST 


-1^ 000 000.0 


tf 


M 


$LINE_TERMINATOR 
$LOW PRIORITY 


ASCII.LF 

0 


$MACHINE_CODE_STATEMENT 

CODE OMOP -> NOP); 


$MACHINE_CODE_TYPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 


CODE_0 

31 

15 

2_147_483_647 
2_147_483_648 
-2_147_483_648 
TINY INTEGER 


A-3 




MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATIC»J2 

$NAME_SPECIFICATICW3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK__SIZE 

$TASK_STORAGE_SIZE 

STICK 

SVARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOUR_PRAGMA 


SUN4_UNIX 

/export/hoine/acvcl. ll/c/e/OC2120A 
/export/home/acvcl. ll/c/e/X2120B 
/export/home/acvcl.ll/c/e/X3119A 
16#F000000E# 

16_777_216 

8 

SUN4_UNIX 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

CODE_0 

32 

1024 

0.01 

VAR__1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 


A-4 





APPENDIX B 


CX)MPILATIC»I SYSTEM OPTIONS 


The coitpiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler doojmentation and 
not to this report. 


Syntax 

ada (options] [source_file]... (linker_options) 
(object_file.o]... 

Description 

The corarazmd ada executes the Ada compiler and compiles the 
named Ada source file, ending with the .a suffix. The file 
must reside in a VADS library directory. The ada.lib file in 
this directory is modified after each Ada unit is compiled. 

The object for each conpiled Ada unit is left in a file with 
the same name as that of the source with 01, 02, etc. 
substituted for .a. The -o option can be used to produce an 
executable with a name other than a.out, the default. For 
cross conpilers, the default name is a.vox. 

By default, ada produces only object and net files. If the 
-M option is used, the compiler automatically invokes a.Id 
and builds a complete program with the named library \init as 
the main program. 

Non-Ada object files (.o files produced by a coitpiler for 
another language) may be given as arguments to ada. These 
files will be passed on to the linker and will be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the . 
order of conpilation and the order of the files to be passed 
to the linker can be significant. 


B-1 


COMPILATIOI SYSTEM OPTIOJS 


Several VADS coitpilers may be simultaneously available on a 
single system. Because the ada command in any 
VADS location/bin on a system will execute the correct 
conpTler components based upon visible library directives, 
the option -sh is provided to print the name of the 
components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

Options 

-a file_name (archive) Treat file_name as an ar file. 

Since some archive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as uncompiled. The -d option is 
used by a.make to establish dependencies among new files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 


-E 


“E file 

-E directory . (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source.err. The file of raw error messages cem 
be used as input to a.error . 

-el (error listing) Intersperse prror messages among source 
lines and direct to standard output. 

I 

-El ' 1 

-El file 

-El directory (error listing) Sam^ as the -E option, except that 
source listing with errors is prodijced. 

I 

-ev (error vi(l)) Process syntax e'rror messages using 
a.error, embed them in the source file, and call the 
environment editor ERROR_EDITOR. (If ERROR_EDITOR is 
defined, the environment variable ERROR PATTERN should also 


B—2 


aM5S^i’"S!sag5ia 


COMPILATION SYSTEM OPTIONS 


be defined. ERROR_PATTERN is an editor search command that 
locates the first occurrence of ’###' in the error file.) If 
no editor is specified, call vi(l). 

-K (keep) Keep the intermediate language (IL) file 
produced by the coirpiler front end. 

-L library_name (library) Operate in VADO library 
library_naine (the current working directory is the default). 

-lfile_abbreviation (library search) This is an option 
passed to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description rf the file abbreviations, see also 
Operating system documentation, ld(l) 

-M xanit_naine (main) Produce an executable program using 
the named unit as the main program. The unit must lae either 
a parameterless procedure or a parameterless function 
returning an integer. The executable program will be left in 
the file a.out unless overridden with the -o option. 

-M source_file (main) This option is like -M unit_name, except 
that the unit name is assumed to be the root 
name of the .a file (for foe..a the unit is foo. Only one .a file 
may be preceded by -M. 

-o executable file (output) This option is to be used in 
conjunction with the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-0(0-9] (optimize) Invoke the code optimizer (OPTIM2). An 
optional digit (there is no space before the digit) limits 
the number of passes by the optimizer: 

no -O option, make one pass 

-0 no digit, optimize as far as possible 

-OO prevents optimization 

-01 no hoisting 

-09 full optimization 

The addition of the INFO directive, 0PTIM3:INFO;TRUE, to the 
ada.lib will cause the compiler to use a new optimizer (0PTIM3) 
that generates faster code. 

The default level of optimization for 0PTIM3 is 04. Note 
that optimization levels for 0PTIM3 are more than simply 
additional iterations -. 


B-3 


COMPILATIOl SYSTEM OPTIONS 


-O full optimization (same as 0PTIM2 ada -09) 

-OO prevents optimization 

-01 no hoisting (same as 0PTIM2 ada -01) 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes 

-06 hoisting from loops with maximum passes 

-07 hoisting from loops and branches 

-08 hoisting from loops and branches, more passes 

-09 hoisting from loops and branches, maximum passes 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

For information on linker INFO directives see USER'S GUIDE, 
INFO Directive Names on page 

a.info on page , and for more information about 
optimization, see USER'S GUIDE, Compiler Optimizations on 
page . 

-R VADS_library (recompile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) i^ply pragma SUPPRESS to the entire 
conpilation for all suppressible checks. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print compiler version number, date eind time 
of conpilation, neime of file conpiled, command input line, 
total conpilation time, and error summary line. Storage 
usage information about the object file is provided. With 
0PTIM3 the output format of compression (the size of 
optimized instructions) is as a percentage of input 
(unoptimized instructions). 


B-4 















COMPILATION SYSTEM OPTICWS 


-w (warnings) Suppress warning diagnostics. 

See also a.das on page ; a.db on page ; a.error on page ; 
a.Id on page ; a.mklib on page ; and Ooerating System 
reference docvimentation for the ld(l) jtility. 

Diagnostics 

The diagnostics produced Icy the VADS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM reference 
includes a section number euid optionally, a paragraph number 
enclosed in parentheses. 


LINKER OPTIONS 

The linlter options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


a.Id 


prelinker 

Syntax 

a.Id (options] unit_name (ld_options] 

Options 

-DX (debug) Debug memory overflow (use in cases where 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elciborate unit_name as early in 
the elaBoration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file name as 
the name of tHe output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 


B-5 


COMPILATICW SYSTEM OPTICWS 


suppress linking. 

-y (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress 
execution. 

Description 

a.Id collects the object files needed to make unit_naroe a 
main program and calls theUNiX 
linker ld(l) to link together all Ada and other language 
objects required to produce an executable image in a.out. 
unit_name is the main program and must name a non-generic 
subprogram. If unit_name is a function, it must return a 
value of the type STANDARD.INTEGER. This integer result 
will be passed back to the UNIX shell as the status code 
of the execution. The utility uses the net files produced 
by the Ada compiler to check dependency information, a.Id 
produces an exception mapping table and a unit elaboration 
table and passes this information to the linker. 

a.Id reads instructions for generating executcibles from the 
ada.lib file in the VADS libraries on the search list. 
Besides information generated by the compiler, these 
directives also include WiTHn directives that allow the 
automatic linking of object modules compiled from other 
languages or Ada object modules not named in context clauses 
in the Ada source. Any number of WITHn directives may he 
placed into a library, but they must lae numbered 
contiguously beginning at WITHI. The directives are recorded 
in the library's ada.lib file eind have the following form. 

WITHI;LINK:Object_file; 

WITH2;LINK:a rchive_file; 

WiTHn directives may be placed in the local Ada libraries or 
in any VADS library on the search list. 

A WiTHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WiTHn 
directive in a library later in the library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unit_name are passed on to the linker. 
These may be options for it, archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a.ld is a wrapper program that executes 
the correct executable based upon directives visible in the 







ii ._HUyii; i ui.j! ! . I, I I I. m il . 1 1 i p^pip^IPWi ^ i i |^|m j u i iiiyyWiWWWPippiPWPW^y H if ^^ ^ 


COMPILATION SYSTEM OPTIOIS 


ada.lib file. This permits multiple VADS compilers to exist 
on the same host. The -sh option prints the name of the 
actual executable file. 

Diagnostics 

Self-explematory diagnostics are produced for missing files, 
etc. Additional messages are produced by the UNIX linker Id. 



APPEJ'IDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed iin)lementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, emd to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is remge -32768 .. 32767; 
type TINY_INrEGE3t is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E+308..1.79769313486232E+308 
type SHORT_FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 

type DURATICN is delta 0.0001 range -214748.3648 .. 214‘’48.3647; 


end STANDARD; 




APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Irapleinentation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINE_0NLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefines Ada packages, but provides no user access. It is 
used only to implement code b^ies for which no actual Ada 
body can be provided, for example the MACHINE_CODE package. 

1.3. SHARE^CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument tJid one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a con^ilation, but before 
any subsequent corrpilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE- the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation \ ill 
get a unique copy of the generated code. The extent to 
'^ich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the inple- 


C-2 




/ 


APPE3®IX F OF THE Ada STANDARD 


mentation and has the same effect as £HARE_CODE. It is 
included for conpatedsility with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An atteirpt to use the IMAGE attribute on a 
type vrtiose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at run time. 

1.5. EJCTERNALJOAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable deTined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the varicible or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to 2 ui object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object Ccinnot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CX)DE Pragma 

Takes one of the identifiers W or OFF as the single argu¬ 
ment. This pragma is only*allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 
Ti.o default is (XJ. 


1.8. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu- 


C-3 


APPENDIX F OF THE Ada STANDARD 


ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CCWTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RN. 

2.3. INLINE 

This pragma is in^lemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' amd FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parcimeters must have m^e IN. Record emd array objects 
Cctn be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in ^jpendix B of the 
Ada RM. 

2.6. MEMORy_SIZE 

This pragma is recognized by the inplementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.7. NON_REENTRANT 

This pragma takes one argument which cam be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the conciler that the subprogram will not be called 
recursively allowing the conciler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 







C-4 


APPENDIX F OF THE Ada STANDARD 


2.8. NOT_ELABORATED 

This pragma czm only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS> a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 

2.10. PACK 

This pragma will cause the conpiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms ; 

PRAC31A PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the con?>iler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.14. SHARED 

This pragma is recognized by the in$)lementation but has no 
effect. 


C-5 





APPEM)IX F OF THE Ada STANDARD 


2.15. STORAGE_UNIT 

This pragma is recognized by the implementation. Hie inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHEQC and in some cases OVERFLOW_CHECK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes eui object, a program unit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID j 

For a task object or a value T," T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIGNED_TYPES; ) 
package SYSTEM is 


C-6 




APPENDIX F OF TEE Ada STANDARD 


pragma SUPPRESS (ALL_CHECKS); 
pragma SUPPRESS(EXCEPTiaJ_TABLES); 
pragma NOT_ELABORATED; 


type NAME is ( sun4_unix ); 


SYSTEM NAME 


constant 


STORAGEJJNIT 
MEMORY SIZE 


: constant 8; 

: constant 


System-Dependent Named Numbers 


NAME sun4_unix; 
16 777 216; 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant :■ -2 147 483 648; 
: constant :« 2 T47_783_?^47; 

: constant :«« I"?; 
consteint 31; 

i constant :■ 2.0**(-31); 

: constant :« 0.01; 


— Other System-dependent Declarations 
sxjbtype PRIORITY is INTEGER range 0 .. 95 


MAX_REC_SIZE : integer 64*1024; 
type ADDRESS is private; 


fijnction 

function 

function 

function 

fxanction 

function 

function 


">" (A; 
"<" (A: 
">-"(A: 
"<-"(A: 

(A: 
"+" (A: 
(A: 


ADDRESS 

ADDRESS 

ADDRESS 

ADDRESS 

ADDRESS 

ADDRESS 

ADDRESS 


B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
I; INTEGER) 
I; INTEX3ER) 


return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return INTEGER; 
return ADDRESS; 
return ADDRESS; 


function "+" (I; 


UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS; 


function MEMORY_ADDRESS 

(I; UNSiaJED_TYPES.UNSIGNED_INTEGER) 
return ADDRESS renames "+"; 


NO ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID ; constant TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 
SIG_STATUS_SIZE: constant 4; 

type PROGRAM_ID is private; 
NO_PROGRAM_ID : constant PROGRAM ID; 


C-7 







APPENDIX F OF THE Ada STANDARD 


type LONG_ADDRESS is private; 

NO_LONG_ADDR : constant LONG_ADDRESS; 

function "+" (A: LONG_ADDRESS; I: INTEGER) return LONG_ADDRESS; 
function (A; LC»W_ADDRESS; I: INTEGER) return LONG_ADDRESS; 

function MAKE_LCM;_ADDRESS (A: ADDRESS) return LONGJVDDRESS; 

function LOCALIZE(A: LONG_ADDRESS ; BYrE_SIZE : INTEGER) 
return ADDRESS; 

function STATI(^_OF(A: LONG_ADDRESS) return INTEGER; 

private 

type ADDRESS is new UNSia^_TyPES.UNSIGNED_INTEGER; 

NO_ADDR : constant ADDRESS :■ 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN{"<"); 
pragma BUI1,T_IN( ">-") ; 
pragma BUILT_IN("<-"); 
pragma BUILT IN("-"); 
pragma BUILT~IN("+"); 

type TASK_ID is new UNSIGNED_TYPES.UNSIC3^_INTEGER; 

NO__TASK_ID ; constant TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO_PROGRAM ID ! constant PROGRAM ID 0; 


type LONG_ADDRESS is new UNSI(2raD_TYPES.UNSIGNED_INTEGER; 
NO_LONG_ADDR ; constant LONG ADDRESS 0; 


pragma BUILT_IN(MAKE_LONG_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad- 


C-8 


APPENDIX F OF THE Ada STANDARD 


ding vHiere possible. Pragma PACK has no other effect on the 
storage allocated for record conpanents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of conponents only v^en the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

Ttje general definition of the package MACHINE_C0DE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 


C-9 


APPEJTOIX F OF THE Ada STANDARD 




The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n'( opcode, opercind {, operand} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operarids are listed within a sxibaggregate. The format 
is as follows: 

CODE_N'{ opcode, (operand {, operand)) ); 

For those opcodes that require no opereuids, named notation 
must be used (cf. RM 4.3(4)). 

(X)DE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be ein entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the fxonctions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MACHINE_C0DE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no inplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_I0 use the value MAX REC_SIZE as 
the record size (expressed in STORAGE UNITS) when the size 
of ELEMENT_TyPE exceeds that value. For "example for uncon- 


C-10 



APPENDIX F OF THE Ada STANDARD 




Strained arrays such as string vrfiere ELEMnTr_TYPE'SIZE is 
very large, .•1AX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM euid can be changed by a program before 
insteuitiating DIRECT_I0 to provide an upper limit on the 
record size, in any case the maximum size supported is 24 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_F ROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) when the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEi'!?>Tr_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defineH in SYSTEM and can be changed by a 
program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUQTriAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following lindts are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are availeible to every program. 

11.1. Line Length 

The inpleroentation supports a maucimum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the e^Dsence of an explicit ST0RAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 


C-11 





APPENDIX F OF THE Ada STANDARD 


There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 













