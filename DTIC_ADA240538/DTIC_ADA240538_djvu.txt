w 


AD-A240 538 ientation page 

# * __ B>iM mai Itil Itll ___ 


Form Approved 
OPMNo. 0704-<3188 


*tpt 1 hour por roopoTM. rndurthg S'* lim* lor i»w«»ing nuudion*, •otnMng oiBOng iMa iiMioai galartng orj monnirOiglVSMi 
■ding ihk Ourdoh Mtimoi* or tr> olhoi upod ol Oik ocktctlon ol Hormdiorv mdukrig ouppMiiono tor roductog tik buRton. u W hti^ 
1215 Joltoraon Divk Higrwty. SuM 1204. Artrxjlon. VA 22202-4X2. irid to Oik OAico at totomikion trto FtogUaory AKin. OOtoo ol 


1. AGENCY USE ONLY (Leave Blank) 


2 REPORT DATE 


4 title AND SUBTITLE 

Verdix Corporation, VADS Sun-4=> 68k, Sun OS 4.0, VAda-110-40125, Version 6.0 
Sun-4/260 (Host) to MVME147 (Motorola 68030)(Target), 901129W1.11097 


6 AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7 PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASO/SCEL 
Bldg 676, Rm 135 
Wright-Patterson AFB 
Dayton, OH 45433 


9 SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


3. REPORT TVPE AND DATES COVERED 

Final; 01 Aug 1991 to 01 Jun 1993 


S. FUNDING NUMBERS 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-407-0891 


10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 


12a. distribution-availability STATEMENT 

12b. DISTRIBUTION coo 

Approved for pubi c rele’ce: distribution unlimited. 




13 ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADS Sun-4=> 68K, Sun OS 4.0, VAda-110-40125, Version 6.0, Wright-Patterson AFB, Sun-4/260, 
Sun OS 4.0 (Host) to MVME147 (Motorola 63030)(bare machine)(Target), ACVC 1.11. 



OTIC 

' SEP 19 1991 

^ D 



ifiiiiiii? 


14 SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


NSN 7540-01-ZSO-SSO 


18 SECURITY CUASSIFICATION 

UNCLASSIFED 


19 SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


9 19 


15. NUMBER OF PAGES 


16. PRICE CODE 


20. LIMITATION OF ABSTRACT 


SlatyJard Form 298. (Rev 2-C9) 
Prescribed by ANSI SW 239-128 


















AVF Control Number:AVF-VSR-407-0891 

1 August 1991 
90-09-25-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 90n29Ul . 11097 
Verdix Corporation 

VADS Sun-4 => 63K, Sun OS 4.0, VAda-110-40125, Version 6.0 
Sun-4/260 => MVME147 (Motorola 68030) 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFD OH 45433-6503 


Accesion For 

NTIS CRA&I 
OTIC TAB 
U dunoui Cfcd 
J.iitilication 


By. 

Oct tb tio -/ 


AvdiiabiiUy coi-cs 


, j li/or 

Di'-t j cwl 












Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 29 November 1990. 

Compiler Name and Version: VADS Sun-4 => 68K, Sun OS 4.0, 

VAda-110-40125, Version 6.0 

Host Computer System: Sun-4/260, Sun OS 4.0 

Target Computer System: MVME147 (Motorola 68030) (bare machine; 

Customer Agreement Number: 90-09-25-VilX 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

901129U1.11097 is awarded to Verdix Corporation. This certificate expires 

on 1 March 1993. 

This report has been reviewed and is approved. 



Ada Validation Facility 


Wilson 
Director 


Steven P, 
Technical 
ASD/SCEL 

Wright-Parterson 


AFB OH 45433-6503 




Ada Val^atAoa '(Organization 
Director, domoufer & Software Engineering 
Institute for defense Analyses 
Alexandria VA 22311 


Division 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 















declaration of conformance 


Customer; 

Ada Validation Facility: 


AC VC Version: 


Verdix Corporation 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 
l.II 


Ada Implementation: 

Co.pi,. Na.. VADS .> San OS 4.0. VA44.„0^.25, Ve^„„ s.O 
Host Computer: Sun-4y260. Sun OS 4.0 

Target Computer; MVME147 (Motorola 68030) 


SSiJ ;;rf' -s. 

tnc Verdix Corporation is the owner of X it . * declaration. I declare that 

shnil be awnried i„ u.e name of .he VerdU Co^io'aZ «"'«<="« 


Stephen Zeigler 
1600 N W Compton Drive 
Suite 357 

Beaverton, Oregon 97006 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-3 


CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 

3.2 SUMMARY OF TEST RESULTS 

3.3 TEST EXECUTION .... 


APPENDIX A MACRO PARAMETERS 


APPENDIX B COMPIUTION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


to 

























CHAPTER 1 


INTRODUCTION 


The Ada implementation described above vas tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard {Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
lPro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG90). 


1.1 USE OF THIS validation SUMMARY REPORT 

Consistent with the national lavs of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from; 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 





INTRODUCTION 


1.2 REFERENCES 


[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, Fe^uary 1985 and ISO 8652-1987. 

[Pro901 Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CUSSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2 . 2 - 


1-2 







INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF, This customization consists of making the modifications described in 
the preceding paragraph, removing vlthdravn tests (see section 2.1) and, 
possibly some Inapplicable tests (see Section 2.2 and [UG90]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


l.A DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada Implementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs: performs 

user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or m.ay consist of 
several inter-connected units. 


Computer 

System 


1-3 




INTRODUCTION 


Conformity 

Fulfillment by a product, process or 
requirements specified. 

service 

of 

all 

Customer 

An individual or corporate entity who 

enters 

into 

an 


agreement with an AVF which specifies 

the 

terms 

and 


conditions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for 
which validation status is realized. 

Host Computer A computer system where Ada source programs are transformed 
System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

Operating Software that controls the execution of programs and that 

System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implementation either by AVF testing or by registration |Pro90]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing, A test may be incorrect because it has an Invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 


CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 UITHDRAVN TESTS 


The following tests have 

been withdrawn 

by the AVO. 

The rationale for 

withdrawing each 

test is 

available from 

either the 

.‘VO or the AVF. The 

publication date 

for this 

list of withdrawn tests i 

12 October 

1990. 

E28005C 

B28006C 

C34006D 

B41308b 

C43004A 

C45114A 

C45346A 

C45612D 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025E 

B83025D 

B83026B 

B85001L 

C83026A 

C83041A 

C97116A 

C90003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 





2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vhich are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IMPLEMENTATION DEPENDENCIES 


The folloving 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
.Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..2 (15 tests) 
C45321L..y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..2 (15 tests) 


The folloving 21 tests check for the predefined type LONG_INTEGER: 


C35404C C45231C 
C45502C C45503C 
C45612C C45613C 
B52004D C55B07A 
CD7101F 


C45304C C45411C C45412C 
C45504C C45504F C45611C 
C45614C C45631C C45632C 
B55B09C B86001U C86006C 


C35702B, C35713C, B86001U, and C86006G check for the predefined type 
LONG FLOAT. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG FLOAT, or SH0RT_FL0AT. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this implementation 
that range exceeds the safe numbers and must be rejected. (See section 
2.3) 


C45531M..P (4 tests) and C45532M..P (4 tests) check fixed-point 
operations for types that require a SYSTEM.MAX MANTISSA of 47 or 
greater. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_0VERFL0US is FALSE for floating point types; for this 
implenientation, MACHINE_0VERFL0VS is TRUE. 

C86001F recompiles package SYSTEM, making package TEXT_I0, and hence 
package REPORT, obsolete. For this implementation, the package TEXT_I0 
is dependent upon package SYSTEM. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

C96005B checks for values of type DURATION'BASE that are outside the 
range of DURATION. There are no such values for this implementation. 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), md CD2A840 use representation 
clauses specifying non-default sizes for access types. 


2-2 




IMPLEMENTATION DEPENDENCIES 


The tests listed in the following table are not applicable because the 
given file operations are not supported for the given combination of 
mode and file access method: 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

-RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT"I0 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102U 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT'IO 

CE3102J 

OPEN 

IN PILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT_I0 

CE2203A checks that URITE raises USE ERROR 

if the capacity of the 

external file is 

exceeded for 

SEQUENTIAL 10 

. This implementation 

not restrict file 

capacity. 




CE2403A checks that URITE raises USE ERROR if the capacity of the 
external file is exceeded for DIRECT 10. This implementation does not 
restrict file capacity. 

CE3304A checks that USE_ERR0R is raised if a call to SET LINE LENGTH or 
SET PAGE_LENGTH specifies a value that is inappropriate Tor tRe external 
file. This iniplementat ion does not have inappropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises LAYOUTERROR when the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2-3 





IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) vere required for 21 tests. 

The folloving tests vere split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests: 

B24009A B33301B B38003A B38003B B38009A 

B38009B ' B85008G B85008H BC1303F BC3005B 

BD2B03A BD2D03A BD4003A 


A3b801E was graded inapplicable by Evaluation Modification as directed by 
the AVO; the compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. ARM 3.5.7(12)). 

CDi009A, CD1009I. CD1C03A. CD2A24A, and CD2A31A..C (3 rests) vere graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, which uses 
Unchecked Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH CHECK--!.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 


CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The host and target computer systems for the Ada implementation were 
connected by Ethernet. The rest of this Ada implementation tested in this 
validation effort is described adequately by the information given in the 
initial pages of this report. 

For a point of contact for technical information about this Ada 
implementation system, see: 

Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly VA 22021 

For a point of contact for sales information about this Ada implementation 
system, see: 


Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly VA 22021 


Testing of this Ada implementation vas conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance vith the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 


3-1 


PROCESSING INFORMATION 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


a) Total Number of Applicable Tests 

b) Total Number of Vithdravm Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3816 

81 

72 

0 


201 

273 

(c+d+e) 

4170 

(a+b+f) 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above number of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler was 
tested, the tests listed in section 2.1 had been withdrawn because of test 
errors. The AVF determined that 273 tests were inapplicable to this 
implementation. All inapplicable tests were processed during validation 
testing except for 201 executable tests that use floating-point precision 
exceeding that supported by the implementation. In addition, the modified 
tests mentioned in section 2.3 were also processed. 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were not loaded directly onto the host computer. The tape 
was loaded onto a Sun Workstation, and the tests were copied over Ethernet 
to the host machine. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by the communications link described above, and run. The results 
were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. 


3-2 














PROCESSING INFORMATION 


Test output, compiler and linker listings and 

magnetic tape and archived at the AVF Tha captured on 

the validation team vere also archived. examined on-site by 



3-3 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in (UG89]. The 
following macro parameters are defined in terms of the value V of 
$MAX_IN LEN which is the maximum input line length permitted for the tested 
implementation. For these parameters, Ada string expressions are given 
rather than the macro values themselves. 

Macro Parameter Macro Value 


$BrG_IDl (1..V-1 => 'A', V -> '1') 

$BIG_ID2 (1..V-1 -> 'A', V -> '2') 

$BIG ID3 <l..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 *> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 i (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 -> 'A') & '1' & 

SBLANKS (1..V-20 -> ' ') 

$MAX_LEN INT BASED LITERAL 

"2:" & (1..V-5 => '0') & "11:" 

$MAX LEN REAL BASED_LITERAL 

"16;" & (1..V-7 => '0') & "F.E:" 

SMAX STRING LITERAL A n..V~2 => 'A') & 


A-1 







MACRO PARAMETERS 


respective values^* lists all of the other macro parameters and thei 


Macro Parameter 

Macro Value 

$max_in_len 

499 

$ACC_SIZE 

32 

Salignment 

4 

SCOUNT^UST 

2_147_483_647 

$DEFAULT_MEM_SIZE 

16_777_216 

$DEFAULT_STOR UNIT 

8 

$default_sys_name 

SUN4_CROSS_68000 

SDELTA_DOC 

0.00000000046566128 

$ENTRY_ADDRESS 

SYSTEM.'V'dAtAO#) 

$ENTRY_A0DRESS1 

SYSTEM. 

SENTRY^ADDRESS2 

SYSTEM. 16#100#) 

$FIELD_UST 

2^147_483_647 

$file^terminator 

/ / 


SFIXED_NA«E 
SFL0AT_NAWE 
$PORM_STRING 
SF0RM_STRING2 

$greater_than^duration 


NO_SUCH_TYPE 
NO_Si;CH TYPE 


"CANN0T_RESTRICT_FILE_CAPACITY' 
100_000.0 


$GR£ATER_THAN_DURATI0N base LA'^'r 

TO_OO0_OOO.O 

$greater_than_float Base last 

1.5Ev308 

$greater_than_float_saee large 

5.0E*307 





MACRO PARAMETERS 

SGREATER THAN_SHORT FLOAT SAFE LARGE 

9.0E+37 

SHIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE_NAME1 

"/illegal/file_nanie/2) ]X2102c.dat" 

$ILLEGAL EXTERNAL FILE NAME2 

"/illegal/file_name/CE2102C*.DAT" 

$inappropriate_line_lengtb 

-1 

SINAPPROPRIATE PAGE LENGTH 

■ -1 

SINCLUDE_PRAGMA1 pragma INCLUDE ("A28006D1.TST") 

SINCLUDE_PRAGMA2 pragma include ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_UST 2_147_483_647 

$INTEGER_UST_PLUS_1 2_147_483_648 

SINTERFACE_LANGUAGE C 

$LESS_THAN_DURATI0N -100_000.0 

SLESS THAN DURATION_BASE FIRST 

-lO_000_000.0 

SLINE_TERMINAT0R ascii.LF (. ASCII.FF 

SLOV_PRIORITY 0 

SMACHINE C0DE_STATEMENT 

C0DE_0'(0P -> NOP); 

$MACeiNE_CODE_TYPE C0DE_0 

SMANTISSA^DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INrr_PLUS_l 2_147_483_648 

$MIN INT -2 147 483 648 


A-3 























MACRO PARAMETERS 


SNAME 

$NAME_LIST 

$NAME_SPECIFICATI0N1 

SNAME^SPECIFICATION2 

$NAME_SPECIFICATI0N3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEV_ST0R_UNIT 

SNEV_SYS__NAME 

SPAGE_TERMINAT0R 

SRECORD_DEFINITION 

$REC0RD_NAME 

STASK^SIZE 

STASK_ST0RAGE_SI2E 

STICK 

SVARIABLE^ADDRESS 

SVARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$your_pragma 


TINY_INTEGER 

SUN4_CR0SS_68000 

/nushuz/usr/kim/acvcl.ll/c/e/X2120A 
/nushu 2 /usr/kim//acvcl.ll/c/e/X2120B 
/nushuz/ust/kim/Zacvcl.ll/c/e/X3119A 
16#FOOOOOOE# 

16_777_216 

8 

SUN4_CR0SS_68000 
ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

C0DE_0 

32 

1024 

0.01 

VAR__3'ADDRESS 
VAR_1'ADDRESS 
VAR_2'ADDRESS 
PRAGMA PASSIVE 


A-4 




APPENDIX B 


COMPIUTION SYSTEM OPTIONS 


The conpiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-1 








COMPIUTION SYSTEM OPTIONS 


ada 


VADS Reference 


ada 


ada 


Ada compiler 
Syntax 

ada [options] (source_file]... (linker_options) 
(obJect_file.oi... ” 

Description 

The command ada executes the Ada compiler and compiles the 
named Ada source file, ending vith the .a suffix. The file 
must reside in a VADS library directory. The ada .lib file in 
this directory is modified after each Ada unit is compiled. 

The object for each compiled Ada unit is left in a file vith 
the same name as that of the source vith 01, 02, etc. 
substituted for .a. The -o option can be used to produce an 
executable vith a name other than a.out, the default. For 
cross compilers, the default name is a.vox. 

By default, ada produces only object and net files. If the 
-M option is used, the compiler automatically invokes a.Id 
and builds a complete program vith the named library unit as 
the main program. 

Non-Ada object files (.o files produced by a compiler for 
another language) may be given as arguments to ada. These 
files vill be passed on to the linker and vill be linked 
with the specified Ada object files. 

Command line options may be specified in any order, but the 
order of compilation and the order of the files to be passed 
to the linker can be significant. 

Several VADS compilers may be simultaneously available on a 
single system. Because the ada command in any 
VADS location/bin on a system will execute the correct 
compiler components based upon visible library directives, 
the option -sh is provided to print the name of the 
components actually executed. 

Program listings with a disassembly of machine code 
instructions are generated by a.db or a.das. 

Options 

-a file_name (archive) Treat file_name as an object 
archive file created by ar. Since some archive files end 
vith .a, -a is used to distinguish archive files from Ada 


B-2 


COMPILATION SYSTEM OPTIONS 


source files. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as uncompiled. The -d option is 
used by a.make to establish dependencies among nev files. 

-e (error) Process compilation error messages using a.error 
and send it to standard output. Only the source lines 
containing errors are listed. Only one -e or -E option 
should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory 
argument, ada processes error messages using a.error and 
directs a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname is 
given, the raw error messages are placed in that file. If a 
directory argument is supplied, the raw error output is 
placed in dir/source. 

err. The file of raw error messages can be used as input to 
a.error 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 


-El 


-El file 

-El directory (error listing) Same as the -E option, 
except that source listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using 
a.error, embed them in the source file, and call the 
environment editor ERROR_EDITOR. (If ERROR EDITOR is 
defined, the environment variable ERROR_PATTERN should also 
be defined. ERROR_PATTERN is an editor search command that 
locates the first occurrence of '###' in the error file.) If 
no editor is specified, vi(l) is invcl'.ed. 

-K (keep) Keep the intermediate language (IL) file 
produced by the compiler front end. The IL file will be 
placed in the .objects directory, vith the file name 
Ada_source.i 

-L library_name (library) Operate in VaDS library 
library_name (the current vorking directory is the default). 


B-3 


COMPILATION SYSTEM OPTIONS 


-Ifile_abbrevlation (library search) This is an option 
passed'to the UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the -1 and the 
file abbreviation.) 

For a description of the file abbreviations, see also 
Operating System documentation, ld{l). 

-M unit_name (main) Produce an executable program by 
link.ing~the named unit as the main program. unit_name must 
already be compiled. It must be either a parameterless 
procedure or a parameterless function returning an integer. 
The executable program will be named a.out unless overridden 
with the -o option. 

-M source_file (main) Produce an executable program by 
compiling and linking sourcefile. The main unit of the 
program is assumed to be the root name of the .a file (for 
foo.a the unit is foo). Only one .a file may be preceded by 
-H. The executable program will be named a.out unless 
overridden with the -o option. 

-0 executable_file (output) This option is to be used in 
conjunction with the -M option. executable_file is the name 
of the executable rather than the default a.out. 

-0(0-9) (optimise) Invoke the code optimizer (0PTIM3). An 
optional digit (there is no space before the digit) provides 
the level of optimization. The default is -04. 

-0 full optimization 

-00 prevents optimization 

-01 no hoisting 

-02 no hoisting, but more passes 

-03 no hoisting, but even more passes 

-04 hoisting from loops 

-05 hoisting from loops, but more passes 

-06 hoisting from loops with maximum passes 

-07 hoisting from loops and branches 

-08 hoisting from loops and branches, more passes 

-09 hoisting from loops and branches, maximum passes 

Hoisting from branches (and cases alternatives) can be slow 


B-4 


COMPILATION SYSTEM OPTIONS 


and does not always provide significant performance gainsi so 
it can be suppressed. 

For more information about optimization, see COMPILING ADA 
PROGRAMS. See also pragma OPTIMIZE_CODE(OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA 
PREPROCESSOR REFERENCE. 

-R VADS_library (recompile instantiation) Force analysis 
of all generic instantiations, causing reinstantiation of 
any that are out of date. 

-S (suppress) Apply pragma SUPPRESS to the entire 
compilation for all suppressible checks. (See also pragma 
SUPPRESS(ALL_CHECKS)) 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print compiler version number, date and time 
of compilation, name of file compiled, command input line, 
total compilation time, and error summary line. Storage 
usage information about the object file is provided. With 
0PTIM3 the output format of compression (the size of 
optimized instructions) is as a percentage of input 
(unoptimized instructions). 

-V (warnings) Suppress warning diagnostics. 

See also a.das; a.db; a.error; a.Id; a.roklib; and 

Operating System reference documentation for the ld(l) utility. 

Diagnos tics 

The diagnostics produced by the VADS compiler are intended 
to be self-explanatory. Most refer to the RM. Each RM 
reference includes a section number and, optionally, a 
paragraph number enclosed in parentheses. 


B-5 



COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 

a.Id VADS Reference a.Id 


a. Id 


prelinker 

Syntax 

a.Id [options] unit_name [ld_options] 

Options 

-DX (debug) Debug memory overflow (use in cases where 
linking a large number of units causes the error message 
local symbol overflow" to occur). 

-E unit name (elaborate) Elaborate unit_name as early in 
the elaboration order as possible. 

-F (files) Print a list of dependent files in order and 
suppress linking. 

-L library_name (library) Operate in VADS library 
library_name (the current working directory is the default). 

-o executable file (output) Use the specified file n, me as 
the name of tHe output rather than the default, a.out. 

-sh (show) Display the name of the tool executable but do 
not execute it. 

-U (units) Print a list of dependent units in order and 
suppress linking. 










COMPILATION SYSTEM OPTIONS 


-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress 
execution. 

Description 

a.Id collects the object files needed to make unit name a 
main program and calls the UNIX linker ld(l) to link 
together all Ada and other language objects required to 
produce an executable image in a.out. 

Unit_nane is the main program and must name a non-generic 
subprogram. If unit_name is a function, it must return a 
value of the type STANDARD.INTEGER. This integer result 
will oe passed b ck to the UNIX shell as the status code of 
the execution. The utility uses the net files produced by 
the Ada compiler to check dependency information. A.Id 
produces an exception mapping table and a unit elaboration 
table and passes this information to the linker. 

a.Id reads instructions for generating executables from the 
ada.lib file in the VADS libraries on the search list. 
Besides information generated by the compiler, these 
directives also include VITHn directives that allow the 
automatic linking of object modules compiled from other 
languages or Ada object modules not named in context clauses 
in the Ada source. Any number of VITHn directives may be 
placed into a library, but they must be numbered 
contiguously beginning at VITHl. The directives are recorded 
in the library's ada.lib file and have the following form. 

VITHl:LINK:object_file: 

VITH2sLINK:archive_files 

VITHn directives may be placed in the local Ada libraries or 
in any VADS library on the search list. 

A VITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered VITHn 
directive in a library later in the library search list. 

Use the tool a.info to change or report library directives 
in the current library. 

All arguments after unit name are passed on to the linker. 
These may be options for^it. archive libraries, library 
abbreviations, or object files. 

VADS_location/bin/a. Id is a vrapoer picgra.i; that executes 
the correct executable based upon directives visible in the 
ada.lib file. This permits multiple VaD 3 compilers to exist 
on the same host. The -sh option prints t.he name of the 


B-7 





COMPIUTION SYSTEM OPTIONS 


actual executable file. 
Files 


a.out default output file 

VADS.loca,lon/s.a„rf,rd/* and arand.rd library rourln.s 

See also Operating System documentation, ld(l). 

Diagnostics 


Self-explanatory 
etc. Additional 


diagnostics are produced for missing files 
messages are produced by the UI^IX linker Id! 


3-8 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only alloved 'mplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 

type SHORT_INTEGER is range -32768 .. 32767; 

type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486E-t-308 .. 

+ 1.797693U486E+308; 

type GHORTFLOAT is digits 6 range 

-3.40282E>38 .. 3.40282E+38; 

type DURATION is delta 0.001 range -2147483.648 .. 

2147483.647; 

end STANDARD; 


C-1 











APPENDIX F OF THE Ada STANDARD 


ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINE ONLY pragma, when used in the same vay as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINE ONLY subpro¬ 
gram recursive, a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefine? Ada packages, but provides no user access. It is 
used only to implement code bodies for which no actual Ada 
body can be provided, for example the MACHINE_CODE package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE r 'igma takes the name of a generic instantia¬ 
tion or a gene .. unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library uniL in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit, the pragma applies 
to ail instantiations of that generic, when the first argu¬ 
ment is the name of a generic instantiation, the pragma 
applies only to the specified instantiation, or overloaded 
Instantiations. 

If the second argument is TRUE, the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 


C-2 












APPENDIX F OF THE Ada STANDARD 


When the second argument is FALSE, each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple¬ 
mentation and has The same effect as SHAR£_C0DE. It is 
included for comparability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
compilation warning and PRCGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable delined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 

a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only alloved vithin a machine code 


C-3 









APPENDIX F OF THE Ada STANDARD 


procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.8. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vhe..her the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 


2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the 
Ada RH. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access, or the predefined type ADDRESS in SYSTEM 
All parameters mu.':t have mode IN. Record and array objects 
can be passed by leference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada Rh. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. Tha imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas; the SYSTEM package must be recompiled. 


C-4 



APPENDIX F OF THE Ada STANDARD 


2.7. NON_REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively, allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograms within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age, or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for composite types. It will not cause 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms: 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>): 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization; in these 
cases, a warning will be generated at compile time and will 


C-5 












APPENDIX F OF THE Ada STANDARD 


raise TASKING_ERI10R at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 
Ada RH. 

2.14. SHARED 

This pragma is recognized by the implementation but has no 
effect. 


2.15. STORAGE_^UNIT 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas; the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION_CHECK and in some cases OVERFLOy_CeECK cannot be 
suppressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas; the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the typf- 0PERA^!^ defined in the 
package MACHINE_CODE. The atiiib' te is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
at tribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


C-6 













APPENDIX F OP THE Ada STANDARD 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification of Package SYSTEM 


— Copyright 1987, 1988, 1989, 1990 Verdix Corporation 


with unsigned_types; 
package SYSTEM is 


pragma suppress(ALL_CHECKS); 
pragma suppress(EXCEPTION_TABLES); 
pragma nor_elaborated; 

type NAME is ( S'JN4_CR0SS_68000 ); 

SYSTEM_NAME ; constant NAME SUN4_CR0SS_68000; 

STORAGE UNIT : constant :■ 8; 

MEMORYjlZE : constant :* 16_777_216; 

— System-Dependent Named Numbers 


MIN INT 
MAX'INT 

max'digits 

max^mantissa 

FINE_DELTA 

TICK 


: constant 
: constant 
: constant 
constant := 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 583 547; 
15; “ “ 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE ; integer := 64*1024; 


type ADDRESS is private; 


function 

(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN 

function 

"<" (A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN 

function 

”>="(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN 

func tion 

"<="(A: 

ADDRESS: 

B: 

ADDRESS) 

return 

BOOLEAN 

function 

(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

INTEGER 

func tion 

(A: 

ADDRESS: 

I: 

INTEGER) 

return 

ADDRESS 

function 

(A: 

ADDRESS; 

I: 

INTEGER) 

re turn 

ADDRESS 


C-7 









APPENDIX F OF TBE Ada STANDARD 

function (I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS; 
function MEMORY ADDRESS 

(I: UNSTGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS renames "t-" 

N0_ADDR ; constant ADDRESS; 

type TASK ID is private; 

N0_TASK_ID : constant TASK^ID; 

type PROGRAM ID is private; 

NO PROGRAM ID : constant PROGRAM ID; 


private 


type ADDRESS is nev UNSIGNED_TYPES.UNSIGNED_INTEGER; 

NO ADDR : constant ADDRESS 0; 

pragma BUILT_IN(">"): 
pragma BUILT_IN(; 
pragma BUILT IN( 
pragma BUILT~IN(; 
pragma BUILT"IN("-"); 
pragma BUILT"IN("+"); 

type TASK_ID is new UNSIGNED TYPES.UNSIGNED INTEGER; 
N0_TASK_ID ; constant TASK_ID 0; 

type PROGRAM ID is nev UNSIGNED TYPES.UNSIGNED INTEGER; 
N0_PR0GRAM_ID : constant PROGRAM_ID :» 0; 

end SYSTEM; 


5. Restrictions on Representation Clauses 

5.1. Pragma PACK 

In the absence of Pragma PACK, record components are padded 
so as to provide for efficient access by the target 
hardware; pragma PACK applied to a record eliminates the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components; a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types, a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 


C-8 










APPENDIX F OF THE Ada STANDARD 


packing of components; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address, elaboration ordering requirements 
prohibit initialization of variables which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINECODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the cote 
statement, an enumeration type of all the opcode mnemonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


C0DE_n'( opcode, operand {. operand; ); 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 


C-9 



appendix F of the Ada STANDARD 


The operands are listed vithin a subaggregate. The format 
is as follows; - 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(A)). 

CODE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e., it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_I0 use the value MAX_REC SIZE as 
the record size (expressed in STORAGE_'JNITS) vhen'the size 
of ELEMENT TYPE exceeds that value. For example, for uncon¬ 
strained irrays such as string, where ELEMENT^TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_I0 to provide an upper limit on the 
record size. In any case, the maximum size supported is 1024 
X 1024 X ST0RAGE_UNIT bits. DIPECT_I0 will raise USE_ERR0R 
if MAX REC SIZE exceeds this absolute limit. 


C-10 











APPENDIX F OP THE Ada STANDARD 


Instantiations of T'i’'ENTIAL_IO use the value MAX_REC_SIZE 
as the record s .to (expressed in STORAGE_UNITS) when the 
size of ELEHENT_TYPL exceeds that value. For example, for 
unconstrained arrt.ys such as string, where ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX RECORD SIZE is defined in~SYSTEM and can be changed by a 
program beTore instantiating INTEGER^IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even nea these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STOElAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit ST0RAGE_SIZE length specifica¬ 
tion, every task except the main program is allocated a fixed 
size stack of 10,240 ST0RAGE_UNITS. This is the value 
returned by T'ST0RAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit ST0RAGE_SIZE length attribute, 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'ST0RAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000.000 ;< STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded, the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 











