AD-A285 172 


NTATION PAGE 


Form Approved 


OPM No. 


Public raporting burden lor this collection of Information is esfimaied to average i hour per response, Including the time tor reviewing instructions, searching existing data 
sources gathering and maintaining the data needed, and reviewing the collecDon ot intormation. Send comments regading this burden, to Washington Headquarters 
Service. Directorate for Information Operations and Reports. 12tS Jefferson Davis Highway. Suite 1204, Arlington. VA 22202-43C2. and to the Office ot Information and 
Regulatory Affairs, Office of Management and Budget, Washington. DC 20503. 


1. AGENCY USE 


(Leave 


2. REPORT 


3. REPORT TYPE AND DATES 


4, TITLE AND Compiler: VADS System V/88 Release 4, V Ada-100-8383, 
product #2100-00736, Version 6.2 

Host/Target; Motorola Seris 900 Model 911 (M88110) (under UNIX System V 
Release 4) 


6. AUTHORS; 

Wright-Patterson AFB, Dayton, bH 


7. PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 



9. SPONSORING/MONITORING AGENCY NAME(S) AND 
Ada Joint Program Office, Defense Information System Agency 
Code TXEA, ,701 S. Courthouse Rd., Arlington, VA 
22204-27^ 


1C 


10. SPONSORING/MONITORING 
AdENCY 



12a. DISTRIBUTION/AVAILABILITY: Approved for public release; distribution 12b. DRISTRIBUTION 
unlimited 


(Maximum 200 


Rational Software Corporation, 940630W1.11371 


14. SUBJECT; Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 
ANSI/Mil-STD-1815A 


15. NUMBER OF 


16. PRICE 


17 SECURITY 
CLASSIRCATION 

UNCLASSIFIED 


18. SECURITY 


19. SECURITY 
CLASSIRCATION 

UNCLASSIFIED 


20. LIMITATION OF 



UNCLASSIFIED 


UNCLASSIFIED 




































AVF Control Number: AVF-VSR-599.0694 
Date VSR Completed: July 21, 1994 
, 94-05-12-RAT 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 940630W1.11371 
Rational Software Corporation 
VADS System V/88 Release 4, VAda-110-8383, 

Product Number: 2100~00736, Version 6.2 
Motorola Series 900 Model 911 (M88110) under UNIX System V Release 4 


(Pinal) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


Accesion For 


NTIS CRA&I 
DTIC TAB 
Unannounced 
Justification 


1 

□ 


B/... 

Distribution / 


Availability Codes 

Dist 

Avail 

Spe 

nd / or 
cial 


94-30978 

94 9 28 080 







Certificate Znfonnation 


The following Ada itaplementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 30 June 94. 

Coopiler Name and Version: VADS System V/B8 Release 4, VAda-110-e383, 

Product Number: 2100-00736, Version 6.2 

Host Cooputer System: Motorola Series 900 Model 911 (M88110) 

\jnder UNIX System V Release 4 

Target Computer System: Same as host 

Customer Agreement Number: 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a resvdt of this validation effort. Validation Certificate 940630W1.11371 
is awarded to Rational Software Corporation. This certificate expires two 
years after MIL-STT>-1815B is approved by ANSI. 


This report has been reviewed and is approved. 



Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 



Direc^,^^Cdm^ter and Software Engineering Division 
Institute foV^oefense Analyses 
Alexandria VA 22311 



Center for Information Management 















DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 


Customer: Rational Software Corporation 

Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 

Ada In^lenventation: 

Con^Jiler Name and Version: VADS SYSTEM V/Bfi RELEASE 4 VAda-110-8383 

Product Number : 2100-00736, Version 6.2 

Host Computer System: Mot' la Series 900 Model 911 (M88110) 

ur ' >''^X System V Release 4 

Target Computer System: Same - host 

Customer's Declaration 


I, the undersigned, declare that I have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-18'5A 
ISO 8652-1987, FIPS 119 as tested in this validat-on and documented 
in the Validation Summary Report. 


Sam B. Ouiring 

1600 N W Compton Drive 

Suite 357 

Beaverton, Oregon 97006 





TABLE OF CONTENK 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATICN 

3.1 TESTING ENVIRONMEJIT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B CCNPILATICN SYSTEM OPTIONS 

APPENDIX C APPENDIX F OP THE Ada STANDARD 




1 

















CHAPTER 1 


INTROTUCTION 


Hie Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro92] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capeibility (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
any technical terms used in this report, the reader is referred to (Pro92). 
A detailed description of the ACVC may be found in the currwit ACVC User's 
Guide (UG891. 


1.1 USE OF THIS VALIDATiai SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). Ihe results of this validation apply only 
to the conputers, operating systems, and conpiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performi^ this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 







INTRCXJUCTION 


1.2 REFERENCES 

(Ada83] Reference Mauriual for the Ada Programning LMiquaqe > 

ANSI/^IL-STD-i 81^, Febrxiary 15&3 and ISO 8652-1587. 

(Pro92] Ada Congiler Validation Procedures / Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89) Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Coftpliance of Ada in^lementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vhen they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would ciraxnvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK__FILE is used to check the contents of text 
files written by some of the ~~Class C tests for Chapter 14 of the Ada 
St 2 uidard. The operation of REPORT euid CRECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting ccmpilation listing is examined to verify that oil violations of 
the Ada Stan^rd are detected. Scxne of the class B tests contain legal Ada 
code vhich must not be flagged illegal by the compiler. This behavior is 
also verified. 

i 

Class L tests check that an Ada inplementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In scxne tests of the ACVC, certain macro strings have to be replaced by 
inplementaticxi-specific values — for exa^le, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, aciditional changes may be 
recjuired to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications recjuired for 
this implementation are described in section 2.3. 


1-2 







INTROWXrriON 


For each Ada implementation, a customized test suite is produced by the AVF. 
This customization consists o£ making the modifications described in the 
preceding paragraph, removing withdravm tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Ccxnpiler The software zuid any needed hardware that have to be added to 
a given host and target computer system to allow 
tratnsformation of Ada programs into executable form emd 
execution thereof. 

Ada Conpiler The means for testing ccmpliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capedsility user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host computer system 2 md its 

Inpleroentation target computer system. 

Ada Joint The part of the certification body vdiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVD) 

Compliance of The ability of the implementation to pass an Acvc version, 
an Ada 

Inplementation 

i 

Ccxtputer A functional unit, consisting of one or more conputers and 

System associated software, that uses coimaon storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 



INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Confuter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 
Confuter 
System 

Validated Ada 
Conpiler 

Validated Ada 
Inplementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity v*o enters into an agreement 
with an AVF v^ich specifies the terms and conditions for AVF 
services (of auny kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for v^ich 
validation status is realized. 

A conputer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-Sm-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<section>.<subsection>:<paragrai*>." 

Software that controls the execution of programs end that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or conplete 
hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The coRf)iler of a validated Ada isplementation. 


An Ada in^lementation that has been validated successfully 
either AVF testing or by registration tPro92). 

The process of checking the conformity of an Ada compiler to 
the Ada prograimning language and of issuing a certificate for 
this implementation. < 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 




CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVD. The rationale for 
withdrawing each test is available from either the AVO or the AVF. Ihe 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BO1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BDe004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A • 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A ■ 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






t 


2.2 INAPPLICABLE TESTS 


A test is inappliceible if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
support^ by documents issued by the ISO and the AJPO known as Ada 
Ccmnentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are inclxided as 
appropriate. 


2-1 







IMPLEMENIATION DEPE34DENCIES 


Hie following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_D1GITS; 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type L0NG_INTEGE3?; for 
this implementation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type LONG_FLQAT; 

for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FLQAT, or SHORT_FLOAT; for this 
in?)lementation, there is no such type. 


A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, NAX_MAMTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MWMINEJOVERFLCWS is TRUE. 

t 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DORATICM's base type that are outside the 
range of type DURATION; for this implementation, the rauiges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 



INPLEaiEamVTIGN DEPENDENCIES 


CD2A84A, CD2A84E, C:D2a 84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

The tests listed in the following table check that USE^ERROR is raised 
if the given file operations are not supported for the gTven ccanbination 
of mode and access method; this implementation su^^rts these 
operations. 


Test File Operation Mode File Access Method 


CE2102D 

CREATE 

IN FILE 

SEQUOrriAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2]''2J 

CREATE 

OUT FILE 

DIRECT 10 

CE21v,zN 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INCTT FILE DIRECT 10 

CE2102S 

RESET 

INOUT FILE DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_I0 

CE31021 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT_FILE 

TEXT_10. 

CE2203A checks 

that 

NRITE raises 

USE ERROR if the capacity of an 

external sequential 

file is exceeded; this inplementation cannot 

restrict file capacity, 



CE2403A checks 

that 

WRITE raises 

USE_ERROR if the capacity of an 

external direct file 

is exceeded; 

this implementation cannot restrict 

file capacity. 



1 

CE3304A checks 

that SET LINE LEJJGTH 

>1 

and SET PAGE LENGTH raise USE ERI«3R 


if they specify an inappropriate value for the external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAY(XJT_ERROR when the value of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2-3 




IHPLEMENIATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or raore tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVO. The con^iler rejects the use of the reuige FLOAT'FIRST..FIDAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe nun^rs (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, and CD2A31A..C were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
insteuitiations of the support procedure LENGTH_CHECK, which uses 
Unchec)<ed Conversion according to the interpretation given in AI-00590. The 
AVO ruleH that this interpretation is not binding \inder ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instatfices of LENGTHjCHECK—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TYPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed lay the AVO. This 
test chec)cs that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
implemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified IiTy commenting out line 36 and 
40; the modified test was passed. 




2-4 









CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


The Ada iirpletnentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical eind sales information about this Ada implementation, contact; 

Sam Quiring 

Rational Software Corporation 
1600 NW Conpton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada inpleroentation was conducted at the customer's site by a 
validation team frcxn the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Lauiguage 
Standard, whether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC [Pro92]. ( 

For all processed tests (inafqplicable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

Ihe list of items below gives the nimnber of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn liecause of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the s\^;port of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 








PROCESSING INFORMATION 


a) Total Number of ^plicable Tests 3796 

b) Total Number of Withdravoi Tests 104 

c) Processed Inapplicable Tests 69 

d) NOn-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inaj^licable Tests 270 (C4d-fe) 


g) Total Number of Tests for ACVC 1.11 4170 (a-fbff) 


3.3 TEST EXECUnCN 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 and then copied to the 
host computer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

The tests were coopiled, linked and executed on the host computer system. 
The resxilts were captured on the host ccxoputer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this isplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Optiorv'Switch Effect 

-w Suppress warning diagnostics. 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape aixl archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 








APPENDIX A 


MACRO PARAMETERS 


Ttiis appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in (UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, vhere ''V represents the maximum ii^t-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

499 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(l.,V/2 -> 'A') & '4' & 
U..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

< 

$BIG_STRING1 

A 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & 

$BLANRS 

(1..V-20 


$MAX Lei IMT BASED LITERAL 

- - - - «2i” & (1..V-5 -> '0') & "11;" 

$MAX LEN REAL BASED LITERAL 

- - - - 5 (1..V-7 -> '0') & "F.E;" 


A-1 









MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIGNMEMT 4 

$aXINT_LAST 2147483647 

$DEFAULT_MEM_S1ZE 16777216 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME BCS_SELF 

$DELTA_DOC 0.0000000004566612873077392578125 

$ENTRY_ADDRESS SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 SYSTEM."+"(16#80#) 

$EJ«»Y_ADDRESS2 SYSTEM.’•+"(16#100#) 

$F1ELD_LAST 2147483647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NOJSUCHJTYPE 

$FLCIAT_NAME NO__SUCH_TYPE 

$PORM_STRING "" 

$FORM_STRING2 '’CaNNOTJffiSTRICT_FILE_CAPACITY" 

$GREATER_THAN_DURATION ' 

100000.0 

$(aiEATER_THAN_DURATIC)N BASE LAST 

TOOOOTJOO.O 

$(3ffiATER_THAN_FLQAT_BASE LAST 

l.^E+308 

$GREATER_THAN_FLQAT_SAFE LARGE 

SJ5E301 


A-2 








MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE LARGE 

9.0E37 

$HIGH_PR10RITY 99 

$ILLEX3AL_EXTERNAL_FILE_NM1E1 

/illegal/file_name/2}J%2102c.dat 

$ILLEX»L_EXTERNAL_FILE_NAHE2 

/ilIe9al/£ile_naine/CE2102C*. dat 

$INAPPR0PR1ATE LINE LENGTH 

~ -1 


$ INAPPROPRIATE_PAGE_LE»»GrH 



-1 

$lNCLUDE_PRAG^lAl 

PRAGMA INCLUDE 

$INCLUDE_PRAGMA2 

PRAGMA INCLUDE 

$1NTEGER_FIRST 

-2147483648 

$INTEGER_LAST 

2147483647 

$1NTEGER_LAST_PLUS_1 

2147483648 

$INTT31FACE_LAM3UAGE 

C 

$LESS_THAN_DURATICN 

-100000.0 

$LESS THAN DURATION BASE FIRST 

-ITJOOOOOO.O 


("A28006D1.TST") 

("B28006D1.TST") 


$LINE_TERMINATOR ASCII.LF & ASCIIFF 

$LOW_PRIORITY 0 

$HACHINE CODE STATEMENT 


$MACHINE_CODE_TTPE 

$MANnSSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NANE 


Ca5E_0'(OP -> NOP); 

OC»E_0 

31 

15 

2147483647 

2147483648 

-2147483648 

TINy_INTEGER 

A-3 









MACRO PARAMETERS 


$NAME__LIST 

BCS_SELF 

$NAME_SPEC1FICATI0N1 

Aisr/acvcl.ll/c/e/X2120A 

$NAME_SPEC1FICATICN2 

A»sr/acvcl. ll/c/e/X2120B 

$NAME_SPECIF1CATI0N3 

/usT/acvcl. ll/c/e/X3119A 

$NEGJBASED_INT 

16«F000000E* 

$NEW_MEM_SIZE 

16777216 

$new_stor_unit 

8 

$NEW_SyS_NAME 

BCS_SELF 

$PAGE_TERMINATOR 

ASCII.FF 

$RECORD_DEFINITICN 

RECORD SUSP: OPERAND; END 

$RECQBO_NAME 

CODE_0 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

1024 

$TICK 

0.01 

$VAR1ABLE_ADDRESS 

VAR_1'ADDRESS 

$VARIABLE_ADORESSl 

VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 

VAR_3'ADDRESS 

$YOUR_PRAGMA 

PRAGMA PASSIVE 


d 


A-4 





APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The cotipiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer, unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 









COMPILATION SYSTEM OPTIONS 


add Cooinand Reference ada 

ada - invoke the Ada compiler 

Syntax 

ada (options] [source_file)... Iobject_file.o1... 

Arguments 

object_£ile.o non-Ada object file names. Iliese files will be passed 

on to the linker and will be linked with the specified 
Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
con^iling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 


a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "file_name.das" 
s Disassemble the unit spec. 

-a file name 

(arBiive) Treat file name as an object archive file created 
by ar. Since some arBiive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARConpiler Ada only) 

(static) If static is indicated, the Ada program is donpiled 
and linked statically. The default is dynamic. 

-c suppress the control messages generated vhen pragma PAGE 
and/or pragma LIST are encountered. ‘ 

-D identifier type value 

(define) Define an identifier of a specified type and value. 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the conpiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default; -DAl.l) (HP PA-RISC only) 


-d (dependencies) Analyze for dependencies only. Do not do 


B-2 




OOMPIIATION SYSTOM OPTIONS 


semantic analysis or code generation. Update the library, 
marking any defined units as unconpiled. The -d opticm is 
used by a.make to establish dependencies among new files. 
This option will attempt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E 

-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process coopilation error messages using a.error and 
send it to standard output. Ckily the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated By error_file. Note that there is 
no space between the -Ef and error file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
directed to standard out vhile the raw errors are placed in 
source_file.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to standard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages usin^ a.error, 
embed them in the source file and call the environment editor 
ERROR EDITOR. If ERROR_EDITOR is defined, the environment 
variaEle ERROR_PATrERN should also be defined. ERROR_PATTERN 
is an editor search command that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERRORJEABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 

B-3 




CXJMPIIATION SYSTEM OPTIONS 


trinmed so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be milled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or compilation information). The trimming 
generally removes initial values of variables and all 
statements. 

-G ((3VAS) Display suggested values for the MIN_(3VAS_ADDR 
and MAX_GVAS_ADDR INTO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
by the compiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L library_name 

(library) Operate in VADS library library__name. 

[Default: current working directory) 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(NO space between the -1 2 uid the file at^reviation.) 

-M xaiit name 

(main) Produce an executable program by linking the named 
unit as the main program, unitjiame must alrea^ be 
compiled. It must be either a ^rameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out (VADSself) or a.vox 
(VADScross) \inless overridden with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking source file. The main unit of the program is 
assxjmed to be Bie root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be nam^ a.out (VADSself) or 'a.vox 
(VADScross) unless overridden with the -o option. 

-N (no code sharing) Conpile all generic instantiations 
without sharing code for their bodies. This option 
overrides the SHARE_BODY INFO directive and the SHARE_CODE 
or SHARE_BC^Y pragmas. 

-NX (NX) Link with NX startip code and with the NX archive libraries. 
This option is valid only if the -M option has also been invoked. 

(Sun SPARC *> Paragon only) 


-O[0-91 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 





CXMPIIATION SYSTOl OPTIONS 


-O full optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, sxibsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global coomon subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instructicm scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of inductim expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction and add hoisting expressions comnon to 
the then and the else parts of if statements 

Hoisting frcxn branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

Note that using the -OO option can alleviate some problems when 
debugging. For exanple, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) ^is option is to be used in conjunction with 
the -N option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(reccmpile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in ^e 

recompilation Ts to occur. If it is not specified, the 
recoa{>ilation occurs in the current working direfctory. 

-r (recreate) Recreate the library's (SVASJEABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without recompiling all the files in the library. 

-S (suppress) A{^ly pragma SUPPRESS to the entire conpilation 
for all su{pressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the conpilation. 







C0MP1LATIC3N SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-V (vertxDse) Print compiler version number, date and time of 
-compilation, name of file compiled, command input line, 
total compilation time and error summary line. Storage usage 
information about the object file is provided. 

-w (warnings) Su^ress warning diagnostics. 

source_file name of the source file to be conpiled. 

Description 

Hie ada command executes the Ada ccsnpiler and compiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
ccnnpiled. 

^ default, ada produces only object and net files. If the -M option 
is used, the conpiler automatically invokes a.Id and iDuilds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will ]De passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
conpilation and the order of the files to be passed to the linker cem 
be significemt. 

Several VADS conpilers may be simulteuieously available on a single 
system. Because the ada command in any VADS_location/bin oil a system 
will execute the correct compiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the conponents actually executed. «, 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE; If two files of the same name frcxn different directories are 
compiled in the same ada library using the -L option (even if the 
coitents and unit names are different), the second compilation will 
overwrite the first. For example, the ccwpilation of 
/usr/directory2/foo.a -L /usr/vads/test will overwrite the 
compilation of /usr/directory 1/foo.a -L Aisr/vads/test in the 
VADS library AisrAads/test. 



CXatlPILATION SYSTCM OPTIONS 


NOTE; It is possible to specify the directory for temporary files by 
setting the environment variable IMPDIR to the desired path. If .aiPDIR 
ip not set, /tap is used. If the path specified by TMPDIR does not exist 
or is not writeable, the progreun exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS ccxnpiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, aj^ndixf 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this Appendix, 
are provided by the customer. Iftiless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 



COMPILATION SYSTEM OPTIONS 


a.Id Comand Reference a.Id 

a.Id - build an executable program from previously conpiled units 
Syntax 

a.Id [options] unit_jiaine [linker_options] 

Arguments 

linker_options 

All arguments after \init_name are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id command. Ohese are: 


-DAl.O 
-DAl.l 
• -DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default: -DAl.l) (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of t).e prelinking process 
takes. 

-Du unit_list 

(\inits) Traces the addition of indirect dependencies to the named 
units. 

I 

-Dx (dependencies) Displays the elaboration dependencies'used each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases where linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E unit name 

(elaborate) Elaborate unitjnaroe as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. This file is only present ^en many object 

B-8 









OOMPIIATICN SYSTEM OPTIONS 


files are being linked. 

-L library_nanie 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-NX (NX) Link with NX startup copde and with the NX archive libraries. 
(Sun SPARC "> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the defaxilt a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
suf^ress linking. 

-V (verbose) Print the linker coninand before executing it. 

-V (verify) Print the linker camnand but siippress execution. 

-w (warnings) Suppress warning messages. 
unit_name 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD. INTEGER. Hiis integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit_name a Aain 
program and calls the ld(l) linker to link together all AdA and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). Hie utility uses the net files produced 
by the Ada ccmpiler to check depei^ency information, a.Id produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. Hie elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include wlHin 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of NITHn 

B-9 







CX}MPILAT10N SYSTEM OPTIONS 


directives may be placed into a library but they must be 
nundsered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK;object_file: 

WITH2:LINK:archive_f ile: 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computer Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals and dependencies. 

VADS_location/bin/a.Id is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS ccxnpilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE; It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TMPDIR 
is not set, /tmp is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Piles 

a.out (self), a.vox (cross) default output file 

•nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker'. 


B—iO 








APPE34DIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed iiif>lenientation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this ^>pendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 


package STANEtARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY_INTBGER is range -128 .. 127; 
type SHORT_INTEGER is range -32768 .. 32767; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type SHORT_FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


4 


C-1 













APPEXroiX F OF THE Ada STANDARD 


APPEM)IX F. Inplementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are si^ject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.2. INLINEJONLY Pragma 

The INLINE ONLY pragma, v^en used in the same way as pragma 
INLINE, irklicates to the con^iler that the subprogram must 
always be inlined. This pragma also sui^^resses the genera¬ 
tion of a callable version of the routine vhich saves code 
space. If a user erroneously nakes an INLINEJGMLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAN_ERROR will be rais^ at run time. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some^ 
predefined Ada packages, but provides no user access. It isj 
used only to inclement code b^ies for \diich no actual Ada 
body can be provided, for exanple the MACHINEjOODE package. 

1.4. SHARE_CCX>E Pragma 

The SHARE_aX)E pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a cotqpilation, but before 
any subsequent conpilation unit. 

When the first argument is a generic xuiit the prag^ applies 
to all instantiations of that generic. When the first argu- 


C-2 










APPENDIX F OF THE Ada STANDARD 


nent is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argxanent is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
v4iich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

Ihe name pragma SHARE BCX)y is also recognized by the imple¬ 
mentation and has Bie same effect as SHARE_CODE. It is 
included for compatability with earlier versions of VADS. 

1.5. NOIMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
conpilation warning PROGRAM_ERROR raised at run time. 

1.6. EXTERNALJOAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable deTined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity frcxn other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The IMTERFACE_NAHE pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, linkjargument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following; 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 










APPENDIX F OF THE Ada STANDARD 


1.8. IMPLICIT_CODE Pragma 

Takes one of the identifiers C3N or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 
The default is ON. 


1.9. OPnMIZE_CCX)E Pragma 

Tedces one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies \diether the code should be optim¬ 
ized ^ the conpiler. The default is ON. When OFF is 
specified, the conpiler will generate the codA as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 


2.2. ELABORATE 


This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.3. INLINE 

This pragma is implemented as described in J^ppendix B of the 
Ada RN. 

2.4. INTERFACE 

t 

This pragma s\jpports calls to 'C' and FORTRAN functions. The* 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADIXlESS in SYS’fEH. 
All parameters must have mode IN. Record euid array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in ippendix B of the 
Ada RM. 


2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The inple- 


C-4 








APPE34DIX F OF THE Ada STANDARD 


mentation does not allow SYSTEM to be modified by means of 
pragmas, the S^TEH package must be recoof)iled. 

2.7. NON_REENTHANT 

This pragma takes one argument vhich can be the name of 
either a library subprogram or a subprogram declared imnedi- 
ately within a library package spec or body. It indicates 
to the compiler that the si^rogram will not be called 
recursively allowing the coopiler to perform specific optim¬ 
izations. The pragma can be a^^lied to a sxibprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. ihe presence of this pragma suppresses the 
generation of elaiboration code euid issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 


2.10. PACK 

This pragma will cause the conpiler to choose a non-aligned 
representation for ccmiposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in i^jpendix B of the' 
Ada RN. 


2.12. PASSIVE 

i, 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE! INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared imm^iately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 


C-5 







APPENDIX F OF THE Ada STANDARD 


task bcx}y will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASRING_ERRCXl at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Afpendix B of the 
Ada RN. 

2.14. SHARED 

This pragma is recognized by the isplementation but has no 
effect. 


2.15. STORAGEJUNIT 

This pragma is recognized by the inplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is inplemented as described, except that 
DIVISION CHEGC and in s<xne cases OVERFLOH_CHECK cannot be 
supresse3. 

2.17. SYSTEMJNAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recoopiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage \jnits allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of «the 
machine code associated with the corresponding botfy or 
statement. For an entry for vhich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MAC3IINE_CXX>E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 


C-6 




appendix r OF the Ada STANCARD 


not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AIX)RESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIGNED_TYPES; 
package SYSTEM is 

pragma su{^ress(ALL_CHECKS); 
pragma suppress(EXCEPTIGN_TABLES); 
pragma not_elaborated; 

type NAME is ( bcs_self ); 

SYSTEM_NAME : constant NAME bcs_self; 

STORAGEJUNIT : constant 8; 

MEMORY_SIZE : constant .— 16_777_216; 

— System-Dependent Named Numbers 

MIN_INT : constant :« -2 147 483 648; 

MAX_INT ; constant :• 2 T47_783j?47; 

MAX_D1GITS : constant iS; 

MAX_NAMTZSSA : constant :* 31; 

FINEJJELTA ; constant 2.0**(-31); 

TICK : constant 0.01; 

— Other System-dependent Declarations 

subtype PRIORITY is INTECffiR range 0 .. 99; ^ 

MAX_REC_SIZE : integer 1024; 

type AIX3RESS is private; * 

function ">" (A; AIMDRESS; B: ADDRESS) return BOOLEAN; 

function "<" (A: ADDRESS; B: AK)RESS) return BOOLEAN; 

function ">-"(A: A[X)RESS; B: ADDRESS) return BOOLEAN; 

function "<-"(A; ATORESS; B: ADDRESS) return BOOLEAN; 

function (A: AMJRESS; B: AKJRESS) return INTEGER; 

function (A; AWJRESS; I: INTEGER) return AIX)RESS; 

function (A: ATORESS; I: INTEGER) return ADDRESS; 

function (I: UNSIGNED TYPES.UNSIGNED_INTEGER) return AM)RESS; 


C-7 






APPENDIX F OF THE Ada STANDARD 


function MEMORYJVDDRESS 

(I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return AI»RESS renames "+" 

NO_AIX)R : constant AIX)RESS; 

type TASK_ID is private; 

NO_TASK_ID ; constant TASK_ID; 

type PASSIVE_TASK_ID is private; 

Np_PASSlVE_TASK_ID : constant PASSIVE_TASK_ID; 

subtype SIG_STA1US_T is INTEGER; 

SIG_STAIUS_SIZE: constant 4; 

type PROGRAM_lD is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type BYTEjORDER_T is ( 

LITTLE_ENDIAN, 

BIG EUDIAN 

); 

BYTEjORDER; constant BYTEjORDERJT BIG_E3®IAN; 
type LONG_ADDRESS is private; 

NO_LONG_AI»R ; constant LONG_ADDRESS; 

function (A: LONG ADDRESS; 1; INTEGER) return LONG_AI»RESS; 

function (A: LOtKfADDRESS; I: INTEGER) return LONGJVDDRESS; 

function I1AKE_LaiG_ADDRESS (A: ADDRESS) return L0NG_ADDRES5; 

function LOCALIZE(A: LONG_ADDRESS ; BYTE_SIZE : INTEGER) return ADDRESS 

function STATION_OF(A: LONG_AIX)RESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 
— then, this is the julian day. 
subtype DAYJT is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVDCATION_BY_ADDRESS : constant BOOLEAN TRUE; 

SUPPORTS_PREELABORATION : constant BOOLEAN lEUE; 

MAKE_ACCESS_SUPPORTED ; constant BOOLEAN TRUE; 

— Arguments to the CIFO pragma INTERRUPT TASK, 
type INTERRUPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

function RETl)RN_AIX>RESS return ADDRESS; 

private 

type A£E>RESS is new UNSIGNEDJTYPES.UNSIGNED INTEGER; 


C-8 




APPENDIX F OF THE Ada STANDARD 


NO_AIX)R : constant ADDRESS ;■ 0; 

pragma BUILT_IN(">"); 
pragma BU1LT_IN("<"); 
pragma BU1LT_IN; 
pragma BU1LT_IN( ; 
pragma BU1LT_IN(; 
pragma BUILT_IN(; 

type TASK_ID is new UNSlGNED_TyPES.UNSlGNED_INTECTR; 
NO_TASK_ID ; constant TASK_ID :■ 0; 

type PASSIVE_TASK__ID is new 1»«1GNED_TYPES.UNSIGNED_INTEX3ER; 
N0_PASS1VE_TASK_ID : constant PASSrVE_TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED TYPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PR0GRAR_ID :« 0; 

type LCING_ADDRESS is 
RECORD 

Station : UNS1GNED_TYPES.UNSIGNED_INTEGER; 
addr : ADDRESS; 

END RECORD; 

NO LONG ADDR : constant LONG AIX>RESS (0, 0); 


pragma BUILT IN(MAKE_LONG ADDRESS); 
pragma BUILT~IN(LOCALIZE)? 
pragma BUILT__IN(STATIGN_OF); 

pragma BUILT_IN(RETURN_AK)RESS); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record confx?nents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding vdiere possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause ai^lied to a record type will not cause 
packing of components; an explicit record representation 


C-9 






APPENDIX F OF THE Ada STANDARD 


clause must be given to specify the packing of the coie- 
ponents. A size clause applied to a record type will cause 
packing of components only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. Itie SIZE attribute is not sijpported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only su^^rted for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. Ihe specified address indicates the [diysical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. Ihe task must be executing 
either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada RN 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RN 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are inposed for a select state¬ 
ment containing both a terminate alternative and an accept 
alternative for an interrupt entry (see Ada RN 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
interrupt vector ntjanber. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 


C-10 





APPENDIX F OF THE Ada STANDARD 


The ADDRESS attribute is not suf^rted for the following 
entities; 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code insertions 
Machine code insertions are su^^rted. 

The genera' definition of the package MACHINEjCODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, ard a set of addressing mode 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CCX)E_n'( opcode, operand {, operand} ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a stibaggregate. The format 
is as follows: 

OC»E_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0' ( op «> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be' 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_COD& or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CCH}E must be Static expressions, string literals, or 
the fxinctions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 


C-11 




APPENDIX F OF THE Ada STANDARD 


There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on IMchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of OIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) when the size 
of ELEMENTJTYPE exceeds that value. For exeunple for uncon¬ 
strained arrays such as string where ELEMENTJTYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_I0 to provide an \xppat limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT_IO will raise USE_EaRROR 
if MAX_REC_SIZE exceeds this absolute limit. 

instantiations of SBQUENTIAL^IO use the value MAX__REC_S1ZE 
as the record size (expressed in STORAGEJUNITS)"when the 
size of ELEHEmjTYPE exceeds that value. For example for 
unconstrained arrays such as string vdiere ELEMHTTJTYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is define? in SYSTEM and can be cheunged a 
program before instantiating INTEGER_I0 to provide an u^>er 
limit on the record size. SEQUENTIAL 10 imposes no limit on 
MAX_REC_SIZE. “ 

11. Inplementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to inply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The implementation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 


C-12 








APPEX4DIX F OF THE Ada STANDARD 


sized record type is 4,000,000 x STORASE_UMITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STQRAGEJUNITS. This is the value 
returned by T'STORASE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE^SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared CSsjects 

There is an absolute limit of 6,000,000 x STX3RAGEJUNITS for 
objects declared statically ^thin a conpilation unit. If 
this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-13 








