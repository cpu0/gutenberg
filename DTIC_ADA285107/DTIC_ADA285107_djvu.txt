AD-A285 107 NTATION PAGE 


Form Approved 


OPM No. 


8ted to average 1 hour per response. Induding the time lor reviewing instructions, searching existing data 
wing the coikcuon of tnlormaiion. Send commenis regading ;hir burden, to Wash ngton Headquariars 
MS Jefferson Davis Highway, Suite 1204. Ariingtcn, VA 22202*4302. and to the Office of Information arid 
in. DC 20503. 


1. AGENCY USE (Leave 


2. REPORT 


3. REPORT TYPE AND DATES 


5. FUNDING 


4, TITLE AND: Compiler: VADS Sun4 => PowerPC. Prduct #2100-01444. 
Version 5.2 

Host: Sun SPARCcenter 2000 (under Solaris 2.3) 

Target: Motorola MVME1601 (PowerPC 601) (bare machine) 


6. AUTHORS: 

Wright-Patterson AFB. Dayton, OH 


7. PERI ORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 


9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Prografri Office, Defense InforiTiation System Agency 
Code TXEA, 701 S. Courthouse Rd., Arlington, VA 
22204-2199 L I \ 


10. SPONLORING/MONITORING 
AGENCY 


vi..^ 'i 



12a. DIST RIBUTION/AVAILABILITY: Approved for public release; distribution 
unlimited 

12b. DRISTRIBUTION 

13. (Maximum 200 



Rational Software Corporation, 940630W1.11369 

14. SUBJECT; Ada Programming Language, Ada Compiler i/alidation Summary 


15. NUMBER OF 

Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Olfice, Ada Val. Facility 


ANSI/MII-STD-1815A 


16. PRICE 


17 SECURtTV 
CLASSIFICATION 

UNCLASSIFIED 

NSN 


18 . security 
UNCLASSIFIED 


19. SECURITY 

CLASSIFICATION 

UNCLASSIFIED 


20. LIMITATION OF 
UNCLASSIFIED 



























AVF Control Number: AVF-VSR-597.0694 
Date VSR Completed: July 21, 1994 

94-05-12-RAT 


Ada COMPILE31 
VALIDATIOJ SUMMARY REPORT: 

Certificate Number: 940630W1.11369 
Rational Software Corporation 

VADS Sun4 "> PowerPC, Product lAimber: 2100-01444, Version 6.2 
Stin 4 Model SPARCcenter 2000 under Solaris 2.3 ■> 
Motorola MVME1601 (PowerPC 601 bare machine) 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


Accesion For 

NTIS CRA&! 

D'llC TAB 
Ui.o'iii'j'i.iccd LJ 


By. 

Di.t ib.-'tiu'i / 




'tibiiity Co(lo‘j 

Avjii aid/or 
Bpucial 








o. 


y*. > ^ 









Certificate Information 


Ilie following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was ccmpleted on 30 June 1994. 

Conqpiler Name and Version: VADS S\an4 -> PowerPC, 

Product Nun±)er: 2100-01444, Version 6.2 

Host Cooputer System: Sxon 4 Model SPARCcenter 2000 under Solaris 2.3 

Target Computer System: Motorola KVI1E1601 (PowerPC 601 bare machine) 

Customer Agreement Number: 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11369 
is awarded to Rational Software Corporation. This certificate expires two 
years after M1L-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 



Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB C« 45433-5707 


Ada ya^[^ation Organization 

Dire'etorv-Computer and Software Engineering Division 


truititute for Defense Analyses 
Alexandria VA 22311 



Defense infonnation Systems Agency, 
Center for Infonnation Management 











DECLARATION OF CONFORMANCE 


Customer; Rational Software Corporation 

Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC version; 1.11 

Ada Implementation; 

Ada Compiler Name and Version; VADS Sun4 => PowerPC 

Product # 2100 01444, Version 6.2 

Host Computer System: Sun 4 Model SPARCcenter2000 under Solaris 2.3 
Target Computer System: Motorola M'/ME1601 (PowerPC 601 bare machine) 


Declaration; 

I, the undersigned, declare that I have no jtnowledge of deliberate 
deviations from the Ada Language Standard ANSI/MlL-STD-1815A, 

ISO 8652-1987, FIPS 119 as tested in this validation and documented 
in the Validation Summary Report. 



Stephen Zeigler 

1600 N W Compton Drive 

Suite 357 

Beaverton, Oregon 97006 


Date: 









TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTICW 

1.1 USE OF THIS VALIDATICX^ SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATIOJ DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATIOJ 

3.1 TESTING ENVIRONMENT .3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


( 


i 



















CHAPTE31 


1 


INTRtXXJCTION 


The Ada Implementation described above was tested according to che Ada 
Validation Procedures (Pro92] against the Ada Stemdard {AdaB’j using the 
current Ada Compiler Validation Capability (ACVC). ‘rhis Validation Sunmary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
any technical tentiS used in this report, Uie reader is referrea to (Pro92). 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide (UG891. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consx sten t vith the national of the originating country, the Ada 

Certification Body may make full arid free public disclosure of this report. 
In the United States, this is pro'/ided in accordance with the "Freedcm of 
Information Act" (5 U.S.C. fc552). The results of this validation apply only 
to the con?)uters, operating systems, and conpjler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject in^lementation has no 
nonconformities to the Ada Struxlard other than those presented. Copies ct 
this report are available to the public froo the AVF wtiich perform^ this 
validation or from; 

National Technical Information Service ‘ 
b285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results shoulci bs 
directed to the AVT vhich performed this validation or to: 

Ada Validation Orgemizatiun 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming L^guage , 

ANSI/MIL-STD-18lFiA, February 1983 and ISCT8652-1987. 

[Pro92] Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program Office, August 1992. 

[UG89J Ada Compiler Validation CapabiJity User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada ia 5 )lementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, arxi L. The first letter of a test name identifies the class to 
vdiich it belongs. Class A, C, D, and E tests are executeJale. Class B and 
class L tests are expected to produce errors at compile time and link tine, 
respectively. 

The executable tests are written in a self-checking raeuiner and produce a 
PASSED, F.MLED, or NOT APPLICABLE message irviicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and tho 
procedure aiECK_FILE are used for tinis purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Stendatd that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a coBf)iler detects illegal language usage, class B 
tests are not executable. Each test in this class is coitpiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada StsndUird are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the con^iler. This behavior is 
also verified. ^ 

Class L tests check tliat zu'i Ada inpleroentation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, emd execution is atterpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implem&ntition-specific values — for exeunple, the largest -ntegec. A list 
tlie values used for this implementation is provided in Appendix A. in 
addition to these anticipated test sjodifications, additional changes may be 
reqiiired to ren»ve unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implemer.tation are described in section 2.3. 








INTRODUCTION 


For each Ada implementation, a customized test suite is prcxiuced by the AVF. 
This customization consists of making the mtxJifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inapplicable t'^sts (see section 2.2 and [UG89]). 

In order to pass an ACVs_ da implementation must process each test of the 
customized test suite acr cirig to tiie Ada Steuidard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler Tne means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host ccxnputer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification bod^ which carries out the 

Validation procedures required to esteiblish the cotapliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVC) 

Compliance of The ability of the iaplementatiun to pass an ACVC version, 
an Ada 

Implementation 

i 

Computet A fttnctional unit, consisting of one or mote computers and 

System associated software, that uses coiaion storage for all or part 

of a prcgcaa and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated prograss; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A conputer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 










TNTRODUCTia^ 


Conformity t'ulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity vho enters into an agreement 

with an AVF vrtiich specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

Declaration of A formal statement from *. customer assuring that conformity 
Conformance is realized or attainable on the Ada impleraentaticn for which 
validation status is realized. 

Host Conputer A computer system v4iere Ada source programs are transformed 

System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LBM The Ada standard, or Leufiguage Reference Manual, pubxished as 

ANSI/MIIr-STD-iaiBA-igas and ISO 8652-1987. Citations from the 
LBM take the form "<section>.<6ubsection>:<paragtaph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, euid data management. Usually, operating 
systems are predominantly softv?&re, bi>t partial or complete 
hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
ImpleiTientation either by AVF testing or by registration [Pro?2i, 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this in^lementation. •• 

Withdrawn A test found to be incorrect and not used in corformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to n«et its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 










CHAPTER 2 


IMPLEMENTATIC»J DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507M 

C35507O 

C35507P 

C35508I 

C35508J 

C355O0M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B4900BB 

A54B02A 

CSbBObA 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CD7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

A01BC8A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD40i.2D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CDSlllA 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CnA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CESlilC 

CE3116A’ 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

C:E5902B 








2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2~1 








IHPLEMEN'CATICX^ DEPENDENCIES 


Hie following 201 tests have floating-point type declarations requiring 
more digits tlian SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L.,Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L,.Y (14 tests) 
C45524 l,.Z (15 tests) 
C45641L,.Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C4532lL..y (14 tests) 
C45521L-.Z (15 tests) 
C45621L-.Z (15 tests) 
C46012L..Z (15 tests) 


The foD.owing 20 tests check for the predefined type L0NG_1NTEGER; for 
this implementation, there is no such type; 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09^ 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, euid C8600eG check for the predefined type LCY4G_FU)AT; 

for this implementation, there is no such type. 


C35713D and B860012 check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLQAT, or SHORT_FLQAT; for this 
iR?)lementation, there is no such type. 


A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; tor this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and neust be rejected. iSee 
section 2.3.) 

C45531M..P and C45532M..P (8 te^ts) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
inplementation, MAX MANTISSA is less than i'l. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjDVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this i^^le^■^entation, MACHINE OVERFIOWS is TRUE. 

i, 

B86001Y uses the name of a predefined fixed-point t^^pe other than type 
DUPATICH4; for this istplenventation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DUR.ATICS’I; for this implementation, the ranges are the 
same. 


n)1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 





IMPLEMENIATICXJ DEPE3®ENCIES 


CD2A84A, CXI2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

Th.j tests listed in tlie follotnng taUale check that USE^ERROR is raised 
if the given file operations are not supported for the qTven combination 
of mode and access method; this implementation supports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILS 

SEX3UENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT TO 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

CXJT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEIJ 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3j02b 

CREATE 

IN FILE 

TEXr 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 

..-.... 

TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_10 

CE3102J 

OPEN 

IN FILE 

TEXT__I0 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE22G3A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cannot restrict 
filfj capacity. 

I 

CE3304A checks that SET_LINE__^LENGTH and SET PAGE^LElXyiH raise USE_ERR0R 
if they specify ein inapproprTate value for the external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUT_EIRROR when the valiie of the page 
number exceeds COUNT'LAST; for this implementation, the value of 
CCKJNT'IAST is greater than 150000, making the checking of this objective 
impractical. 


2-3 











IMPLEMENTATICM4 DEPENDENCIES 


2.3 TEST MODIFICATICWS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B33009A B38009B 
B85008G B8500aH BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVD. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe numbers (cf. LBM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, and CD2A31A..C were graded passed by Evaluation 
Modification as directed by the AVO. These tests use instantiations of the 
support procedure lENGTH CHECK, vdiich uses Uncheclced_Conversion according to 
the interpretation give.. Tn Al-00590. The AVO ruled that this interpretation 
is not binding under ACVC 1.11; the tests are ruled to be passed if they 
produce Failed messages only from the instmces of LENGTH_CHECK—i.e, the 
allowed Report.Failed messages have the general form; 

" * CHECK Cti REPRESENTATIOI FOR <T«>E_ID> FAILED." 

&D9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
implemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by conmenting out line 36 and 
40; the modified test was passed. 




2-4 







CHAPTER 3 


PROCESSING INf'ORMATICN 


3.1 TESTING ENVIRONMENT 


The Ada in^jlementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada inplementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 MW Comoton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada implen»entation was conducted at the cusv.omer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accotd 2 mce with the Ada Programming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC (Pro92). <■ 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Pcogtaraming Language Standard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2,1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2,2 (counted in items b and f, below). 







PROCESSING 1NP0RMAT1C»4 


a) Total Number of Applicable Tests 3796 

b) Total Number of Withdrawn Tests 104 

c) Processed Inapplicable Tests 69 

d) Non-Processed lA) Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (c+d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTIOI 

A magnetic tape contaiuing the customized test suite (see section 1.3) was 
taken on-site by the validation teesm for processing. The contents of the 
magnetic tape were loaded onto the host conputer systeir. 

After the test files were loaded onto the host conputer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system. The 
executable images were then downloaded to the target via a serial port and 
executed. The results were captured on the host computer system. 

Testing was performed using command scripts provided by the custonver and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

~w Suppress warning diagnostics. 


Test output, cOTipiler and .linker listingSr aiid job logs were captured on 
magnetic t<v;’« and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 









APFIfllDIX A 
MACRO PARAMEl'ERS 


This appendix contains the macro parameters used for customizing the ACVC. 
Hie meaning and purpose of these parameters are explained in [UG891. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maucimum input-line length, vhich is 
the value for $MAX_1N_LEN—also listed here. These values are expressed here 
as Ada string aggregates, v^ere "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


SKAX_IN_LEN 499 — Value of V 

$BIG_ID1 (1..V-1 -> 'A', V -> '1') 

§BIG_ID2 (1..V-1 =»> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' 6 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (l.,V/2 -> 'A') & '4' & 

(1..V-1-V/2 -’> 'A') 

$BIG_INT_LIT (1..V-3 »> '0') & "298" 

$BIG_REAL_LIT (l..V-5»> '0') & "690.0" 

I, 

$BIG_STRING1 & (l..V/'2 »> 'A') & 

$BIG_STRING2 & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 ) 

5MAX LEH_INT BASED LITERAL 

"2;" i (1..V-5 »> ’O') & "11:" 

$MAX LEN PEAL_3ASED LITERAL 

"16;" & ■«> '0') & "F.E;" 







MACRO PARAMETERS 


$MAX_STRING_LITERA:- ' "' & (l. .V-2 -> ' A' ) & ' " ' 

The following te±ile lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SI2E 32 

SALIGNMENT 4 

$COUNT_LAST 2147483647 

$DEFAULT_MEM_SIZE 16777216 

$defal;lt_stor_unit 8 

$DEFAULT_SYS_MAME StJN4_ CROSS_NEW_PPC601 

$DELTA_DOC 0.0000000004566612873077392578125 

SENTRY_ADDRESS SYSTEM."+”(16#40#) 

$ENTRY_ADDRESS1 SYSTEM.''+"(16#80#) 

SENTRY_ADDRESS2 SYSTEM. "+"a6#100#) 

$FIELD_LAST 2147483647 

SFILEJTERMINATCR ' ' 

$FIXED_NAME N0_SUCH_TYPE 

$FLOAT_NAME NO_SUCH_TYPE 

$FOFM_STRING ’ 

SPORM_STRING2 ''CAN^X^J^STRICT_FILE_CAPACITY" 

$GREATEB_THAN_DURATICW ' 

100000.0 

SGREATER_THAN_DURATIC«4 BASE LAST 

TOOOO^OO.O 

$GREATER_THAN_FLQAT BASE LAST 
"■ I.'BE+SOS 

$GREATER_TKAN FLOAT_SAFE LARGE 

5.IJE307 


A-2 








MACRO P/JW1ETERS 


^aREATER_THAN_SKORT FLQAT_SAFE_]LARGE 

9.0E37 

SHIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILF_NAME1 

/illegal/file_naune/'2) ]$%FILEl.nAT 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/illegal/file_naine/2))$%FILE2.DAr 

$ INAPPROPRIATE_LINF_LENGTH 

-1 


$ INAPPROPRIATE_PAGE_LENGTH 

-1 


$INCLUDE_PRAGMA1 
$INCLUDE_PRAGMA2 
$1NTEGER_FIRST 
$INTEGER_LAST 
$INTEGER_rAST__PLUS_l 2147483648 
§ItmilFACE_]:^?«JGUAGE C 
$LESS_THAN_DURATION -100000.0 
$LESS THAN DURATION_BASE FIRST 

-iiyoooooo.o 


PRAGMA INCLUDE ("A28006D1.TST") 
PRAGMA INCLUDE ("B28006D1.TST") 
-2147483646 
2147483647 


$LIl^E_TERMINATOR ASCII. LF 

$Law_PRIORITY 0 

$MACHINE CCOE STATEMENT 


$MACHINE_CCE)E_TYPE 

0MANTISSA_DOC 

$MAX_D1GITS 

$MAX__INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAHE 


CODE_0'(O? -> NOP); 

CODE_0 

31 

15 

2147483647 
2147483643 
-2147483648 
TINY INTEGER 










MACRO PARAMETERS 


SKAME_LIST 

$NAME_SPEC1 FICATIONl 

SNAME_SPECIFICATIQN2 

§NAME_SPECIFICATION3 

SNEG_BASED_INT 

SNEW_MEM_SIZE 

$NBM_STOR_UNIT 

SNEW_SYS_NAME 

SPAGEJTERMINATOR 

$RECORD_DEFXNITIGN 

$RECORDJ«tf!E 

STASK_SIZE 

$mSK_STORAGE_SIZE 

$tic:k 

$VARIABLE_AODP£SS 
$VAR1ABLE_AIX)R£SS1 
SVARLABLE A£K}RESS2 


SUN4_CROSS_rJEW_PPC60l 

/usr/acvcl.ll/c/e/X2120A 

/\isr/acvcl. ll/c/e/X2120B 

/usr/acvcl.ll/c/e/X3119A 

16#FOOOOOOEi 

16777216 

8 

SUN4_CROSS_NEW_PPC601 

ASCII.LF & ASCII.FF 

RECORD SUBP: OPERAND; £1® RECORD; 

CCH3E_0 

32 

2048 

0.01 

VAR_1'AK)RESS 
VAR_2'ADDRESS 
VAR 3'AW)RESS 


SYOUP PRAGMA 


PRAGMA PASSIVE 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 







COMPILATION SYSTEM OPTIONS 


ada Ccanmnd Reference ada 

ada - invoke the Ada compiler 

Synteuc 

ada [options) (soucce_file]... tobject_file.o)... 

Arguments 

object_file.o non-Ada object file names. These files will be passed 
on to the linker and will be linked with the specified 
Ada object files. 

options options to the ccaipiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
conpiling them. -A can be followed by argun«nts that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body (default), 
d Print the data section (if present) as well, 
f use the alternative format for outr"Jt = 

1 Put the disassembly output in file ’'file_nane.das” 
s Disassemble the ruiit spec. 

-a file name 

(archive) Treat file name as an object archive file created 
by ar. Since some archive files end with -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dyriamic (SPARCon?3iler Ada only) 

'static) If static is indicated, the Ada program is compiled 
and linked statically. The default is dynamic. 

-c suppress the control messages generated when pragma PAGE 
and/or pragma LIST are encountered. ‘ 

-D identifier type value 

(define) Define eui identifier of a specified type emd value. 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default: -DAl.l] (HP PA-RISC only) 


-d (dependencies) Analyze for dependencies only. Do not do 






u u 


CXVIPIIATION SYSTEM OPTIONS 


semantic analysis or code generation. Update the library, 
marking any defined units as uncompiled. Th* -d option is 
used by a.make to establish dependencies among new files. 
This option will attempt to do in^wrts foe any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
soucce_file.etr. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process con^jilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Efertorfile source_file 

^error) Process source file and place any error messages 
in the file indicated By error_file. Note that there is 
no space between the -Ef and crtor_file. 


“El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
directed to standard out \diile the raw errors are placed in 
source__file.ecr. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferrot_file source file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to standard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file and call the environment editor 
ERROR EDITOR. If ERROR_EDiTOR is defined, the environment 
vaciaBle ERROR_PATTERN should also be defined. ERROR_PATTERN 
is an editor search comnand that locates the first occurrence 
of in the error file. If no editor is specified, vi(l) 

is invoked. 

The value of the environment variable ERROR_TABS, if set, 
is used instead of the default tab settings (8), 


-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 









COMPILATION SYSTEM OPTIONS 


trinroed so that all pointers to nodes that did net involve 
a subtree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
oenetic or certain other values needing to be retained for 
the debugging or conpilation information). The triraaing 
generally removes initial values of variables and all 
statements. 

~G (GVAS) Display suggested values for the MIN_v5VAS_ADDR 
and MAX_GVAS_AE®R INFO directives. 

-K (keep) Keep the interuiediate lauiguage (IL) file produced 
by the compiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L library_nanie 

(library) Operate in VAD3 library libtary_name. 

[Default; current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(No space between the -1 and the file atioreviation.) 

-M unit name 

(main) Produce an executable progreun by linking the named 
unit as the main program. unit_name must already be 
con^iled. It must be either a paraiaetecless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out (VM>Sself) or a.vox 
(VADSccoss) unless overridden with the -o option. 

-M source file 

(aainT Produce an executable program by compiling emd 
linking source file. The main unit of the program is 
assumed to be root name of the file (for foo.a the 
unit is foo). Only one file may be preced^ by -M. The 
executable program will be named a.out (VADSself) or a.vox 
(VADScross) unless overridden with the -o option. 

-N (no code sharing) Compile all generic instantiations 
without sharing code for their bodies. This option 
overrides the SHARE_30DY info directive emd the SHARE_CODE 
or SHAR£_BCX)Y pragmas. 

-NX (NX) Link with NX startup code end with the NX archive libraries 
This option is valid only if the -M option has also been invoked 
(Sun SPARC «> Paragon only) 


-O[0-9) 

(optimize) Invoke the cede optimizer. An optional digit 
(there is no space before the digit) provides the level of 
Optimization. The default is -04. 


B-4 







COMPILATION SYSTEM OPTIONS 


-O full optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression ''limination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction and add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant perfonneuice gains so 
it can be suppressed. 

Note that using the -OO option can alleviate sojne problems when 
debugging. For example, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) ^his option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vo.x (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(recompile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any chat are out 
of date. VADS library is the library in which the 
recompilation Ts to occur. If it is not specified, the 
reconpilation occurs in the current working dirtbctory. 

-r (recreate) Recreate the library's GVAS_TABLE file. This option 
reinitializes the file emd exits. This allows recovery from 
"GVAS exhausted" without recompiling all the files in the library. 

-S (suppress) ^ply pragma SUPPRESS to the entire conpilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

B-5 







COMPILATION SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns {for use with a.trace only) 

-V (verbose) Print coapiler version number, date and time of 
conpilation, name of file conpiled, coitmand input line, 
total compilation time and error sxannary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

source_file name of the source file to be compiled. 

Description 

The ada command executes the Ada compiler and ccitpiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

Dy default, ada produces only object and net files. If the -M option 
is used, the compiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
^pendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. niese files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
conpilation and the order of the files to be passed to the linker can 
be significemt. 

Several l^ADS conpilers may be simultaneously available on single 
system. Because the ada command in any VADS_location/bin oh a system 
will execute the correct conpiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the conponents actually executed. ' 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das, 

NOTE; If two files of the same name from different directories are 
compiled ir. the same ada library using the -L option (even if the 
contents and unit names ace different), the second conpilation will 
overwrite the first. For example, the conpilation of 
/'usr/directory2/foo.a -L /usrAads/test will overwrite the 
compilation of /usr/directoryl/foo.a -L /usrAads/test in the 
VADS library AsrAads/test. 


B--6 






C0MPILATIC3N SYSTEM OPTTCWS 


NOTE; It is posit,ible to specify the directory for tentporary files by 
setting the environment vari 2 dDie TMPDIR to the desired path. If TEMPDIR 
is not set, /tmp is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by tfie VP.DS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number aurd optionally, a paragraph nurrJoer enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this Appendix, 
ate provided by the customer. ihiless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 


B-7 








COMPIIATI(»I SYSTEM OPTIOJS 


a.Id Command Reference a.Id 

a.Id - build an executable program from previously compiled units 
Syntax 

a.Id (options] unit_name [linkerjoptions] 

Arguments 

linker_options 

All arguments after unit_naiDe are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id command. These are: 


-DAl.O 

-DAl.l 

--DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default; -DAl.l] (HP PA-RISC only) 

-DO (objects) Use ^rtially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. 'Riis option is 
useful because of limitations in the archiver on sesns hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the preli. xing process 
takes. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the elaboration dependencies used each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases >rtiece linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E unit_name 

(elaborate) Elaborate unit_name as early in the eleUaoration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the tecmocary file containing the list of 
object files to link. This file is only present when nany object 







CaiPILATION SYSmi OPTIONS 


files are bein.j linked. 

-L library_name 

(library) Collect information for linkiny in library name instead 
of the current directory. However, place the execut^le in the 
current directory. 

-NX (NX) Link with NX startup copde and with the NX archive libraries. 
(Sun SPARC *> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox. (cross). 

-sh (show) Display the naioe of the tool executable but do not 
execute it. 

-T (tedsle) List the symbols in the elaboration teible to standard 
output. 

. -U (units) Print a list of dependent units in order eind 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker cemnand but suppress execution. 

-w (warnings) Suppress warning messages, 
unitjname 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a,Id collects the object files needed to make unit name a main 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada compiler to check dependency information, a.Id produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception t 2 U}les. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WiTHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WlTHn 

B-9 







COMPILATION SYSTEM OPTIONS 


directives may be placed into a library but they must be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK:object_file; 

W1TH2:LINK:a rchive_f ile: 

VNiTHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A wiTHn directive in a local VADS librairy or earlier on the 
library search list will hide the same numbered WiTHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Confuter Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, theXr types, seals and dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE; It is possible to specify the directory for temporary files by 
setting the environment varieible TMPDIR to the desired path. If TT’iPDIR 
is not set, /tmp is used. If the path specified by TMPDIR does not exist 
or is not writeable, the progreun exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) 

.nets 

.objects/* 

VADS_location/standard/* 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linke;;. 


default output file 

Ada DIANA net files directory 

Ada object files 

startup emd standard library routines 


B-10 








APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed iapleinentation dependencies correspond to 
ircplementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as der rribed in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are; 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY_1NTEGER is range -128 .. 127; 
type SHORT_INTEGER is range -32766 .. 32767; 

type FLOAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type SHORT_FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type DUFATIW is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


f 


C-1 







APPENDIX F OF THE Ada STANDARD 


APPEJIDIX F. In?)lementation-Dependent Characteristics 


1. Implementation-Dependent pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object zuid a warning message will be generated. 

1.2. INLINEJDNLY Pragma 

The INLINE_0NLY pragma, when used in the same way as pragma 
INLINE, indicates to the conpiler that the subprogram must 
always be inlined. This pragma also sujpresses the genera¬ 
tion of a callable version of the routine vdiich saves code 
space. If a user erroneously makes an INLINEjONLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefines Ada packages, but provides no user access. It is 
used only to implement code bcxiies for which no actual Ada- 
body can be provided, for exanple the MACHINEjCXXJE package. 

1.4. SHARE_CODE Pragma t 

The SHAREjCODE pragma takes the nair« of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu- 


C-2 



APPENDIX F OF THE Ada STANDARD 


went is the name ot a generic instantiation the pragma 
applies only to the specified instantiation, ot overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instamtiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BODY is also recognized by the imple¬ 
mentation euid has the same effect as SHARE_CODE. It is 
included for ccm?«itability with earlier versions of VADS. 

1.5. Nr)_IMAl3E Pragma 

The pragma suppresses the generation of the image array used 
for th? IMAGE attribute of enumeration types. This elim- 
in?tes the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at run time. 

1.6. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_l'y\ME pragma takes the ruune of a a variable or 
subprogram defined in euiother leunguage and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_arguroent. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

initialized variable, 
an array, or 
a record. 


C-3 








APPEiroiX F OF THE Ada STANDARD 


1.8. IMPLICIT_C0DE Pragma 

Takes one of t±ie identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
cotipiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.9. OPTIMIZE_CODE Pragma 

Takes one of the identifiers W or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies vrtiether the code should be optim¬ 
ized by the conpiler. The default is ON. When OFF is 
specified, the conpiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. Ca'jTROLLED 

This pragma is recognized by the inplementation but has no 
effect, 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.3. INLINE 

This pragma is inplemented as described in ^pendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The' 
Ada subprograms cam be either functions or procedures. The 
types of parameters and the result type for fxanctions roust 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters roust have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is inplemented as described in appendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the inplementation. The inple- 


C-4 






APPE3®IX F OF THE Ada STANDARD 


mentation does not alia.’ SYSTEM to be modified by raeams of 
pragmasr the SYSTEM package must be reconciled. 

2.7. NQN_REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared inmedi- 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABOhATED 

this pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela- 
toration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the in^jlementation but has no 
effect. 

2.10. PACK 

This pragiTia will cause the compiler to chcose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level, 

2.11. PAGE 

This pragma is implemented as described in Appendix B of tlic 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms s 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVEdNTSRRUPT, <number>); 


This pragma Pragma passive ceun be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the con^iler to optimize certain 
tasking operations. It is possible that the statements in a 

C-5 







APPENDIX F OF THE Ada STANDARD 


task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B o£ the 
Ada PH. 


2.14. SHARED 

This pragma is recognized by the inqplementation but has no 
effect. 

2.15. STORAGE_UNIT 

.This pragma is recognized by the in^lementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISICW CHECK and in some cases OVERFLCW_CHECK czmnot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The inple- 
roentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry; J 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of’ the 
machine code associated with the corresponding body or 
statement. For an entry for wtiich an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for mere information on the use of this 
attribute. 

(For a package, task \jnit, or entry, the 'REF attribute is 


C-6 




APPENDIX F OF THE Ada STANDARD 


not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AIX>RESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


with UNSIGNED_TYPES; 
package SYSTEM is 


pragma suppress(ALL_C3IEa^); 
pragma suppress(EXCEPTI0N_TABLES); 
pragma notjelaborated; 


type NAME is ( 

SYSTEM_NAME 

STOFAGEJUNIT 
MEMORY SIZE 


sun4_cross_new_ppc601 ); 

: constant NAME sun4_cross_newjppc601; 

: constant 8; 

; constzuit 16 777 216; 


—- System-Dependent Named Numbers 


MIN_INT 

MAX_INT 

MAX_D1G1TS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant 
: constant 
; constant 
constant :■ 31; 

: constetnt 
; constant 


j- -2 147 483 648; 
2 T47 783 ^47; 
15; ■ " 

2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE : integer 1024; 
type AKDRESS is private; 


function ">" (A: ADDRESS 
function "<" (A; ADDRESS 
function ">-"(A; ADDRESS 
function ADDRESS 
function (A: ADDRESS 
function "+" (A: ADDRESS 
function (A: ADDRESS 


B: ADDRESS) 
B; ADDRESS) 
B; ADDRESS) 
B: ADDRESS) 
B; ADDRESS) 
I; INTEGER) 
I: INTEGER) 


return BOOLEAN 
return BOOLEAN 
return BOOLEAN 
return BOOLEAN 
return INTEGER 
return ADDRESS 
return ADDRESS 


function (I: UNSIGNED TYPES.UNSIGNED INTEGER) return ADDRESS; 


C-7 








APPEl^IX F OF THE Ada STANDARD 


function MEMORY_ADDRESS 

(I: UNSIGNED_T«>ES.UNSIGNED_INTEGER) return ADDRESS renames "+" 

NO_ADDR : constant ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID : constant TASK_ID; 

type PASSIVE_TASK_ID is private; 

NO_PASSIVE_TASK_ID ; constant PASSIVE_TASK_ID; 

subtype SIG_STATOS_T is INTEGER; 

SIG_STATUS_SI2E; constant :« 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PR0GRAM_1D; 

type BYTE_jORDER_T is ( 

LITTLE_END1AN, 

PIG ENDIAN 

); 

BYTEjORDER; constant BYrE_ORDER_T BIG_ENDIAN; 
type LONG__ADDRESS is private; 

NO__LCXW_ADDR : constant LONG_ADDRESS; 

function "+" (A: LONG_ADDFESS; 1: INTEGER) return LC3NG_ADDRESS; 
function (A: LONG_ADDRESS; I: INTEGER) return LCNG_ADDRESS; 

function MAKE_LONG_ADDRESS (A: ADDRESS) return LCNG_AI»RESS; 

function LOCALIZE(A: LONG_ADDRESS ; BYTE_SIZE ; INTEGER) return ADDRESS 

function STATICW_OP(A; LONG_ADDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 

— then, this is the julian day, 
subtype nAY_T is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVOCATlC»l_By_AI»RESS : constant BOOLEAl/I TRUE; 

SUPPORTS_PREELABORATION ; constant BOOLEAN TRUE; 

MAKE_ACCESS_SUPPORTED : constant BOOLEAN TRUE; 

— Arguments to the CIFO pragma INTERRUPT_TASK. 

type INTERRUPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

function RETORN_ADDRESS return ADDRESS; 

private 

type ADDRESS is new UNSIGNED_TYPES.UNSIC2JED_INTEGER; 


C-8 






JVFPENDIX F OF THE Ada STANDARD 


NO_ADDR ; constant AM)RESS ;■ 0; 

pragma BUILT_IN(; 
pragma BUILT IN("<''); 
pragma BUILT2 in(); 
pragma BUILT_IN(; 
pragma BUILT_IN(; 
pragma BUILT_IN(; 

type TASK_ID is new UNSIGNEDjm»ES.UNSIGNED_rNTBGER; 
N0_TASK_ID : constant TASK_ID 0; 

type PASSIVE_TASK_ID is new UNSIGNED_TYPES.ONSIGNED_INTEGER; 
NO__PASSaVE_TASK_ID : constant PASSIVEJEASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TYPES.UNSIGN2D_INTEGER; 
Nq_PROGBAM_ID : constant PROGRAM_JD 0; 

type LCWG_ADDRESS is 
RECORD 

Station ; UNSIGNED_TYPES.UNSIGNED_INTEGER; 
addr : ADDRESS; 

END RECORD; 

NO LONG ADDR ; constant LONG ADDRESS (0, 0); 


pragma BUILT_IN( MAKE_LONG_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

pragma BUILT_IN(RETUBN_ADDRESS); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1, Pragma PACK 

in the absence of pragma PACK record conponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of conponents; an explicit record representation 


C-9 







APPENDIX F OF THE Ada STANDARD 


clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only ^en the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 
clauses. Tbe specified address indicates the physical 
address associated with the Vcriable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is handling the interrupt. The task must be executing 
either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RN 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative and an accept' 
alternative for an interrupt entry (see Ada RM 13.5.1(3)). ' 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. ^ 

Interrupts are not queued. 

The address clause for aun interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
interrupt vector number. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 


C-10 






APPENDIX F OF TOE Ada STANDARD 


The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MW31INE_C0DE provides 
an assembly language int'‘rface for the target machine. It 
provides the necessary rec rd type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing node 
functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CODE_n*( opcode, operand {, operand) ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

OODE_N'( opcode, (operand {, operand)) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0' ( op ■> opcode ) ; 

The opcode roust be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE CODU or 
the 'REF attribute. 

The arguments to any of the functions defined in 
NACHINE_CCX)E roust be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an argument in any of these f\inctions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 


C-11 






APPEMJIX F OF THE Ada STANDARD 


There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 

10. Implementation Characteristics of I/O Packages 

Instantiations of D1RECT_I0 use the value MAX REC_SI2E as 
the record size (expressed in STORAGEJUNITS) ^en the size 
of ELEMENT_TyPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENTJTVPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORp_S12E 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In euiy case the maximum size supported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT_IO will raise USE_ERROR 
if riAX_REC_SI2E exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAXJREC^SIZE 
as the record size (expressed in STORAGEJUNITS)”’when the 
size of ELEMENTJTYPE exceeds that value. For example for 
un''onstrained arrays such as string where ELH1ENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program before inst 2 Uitiating INTEGER_IO to provide an upper 
limit on the record size. SBQUENTIAL_I0 imposes no limit on 
MAX_REC_SIZE. 

11. Inplementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to inply that resources up li,o or 
even near these limits are available to every program. 

11.1. Line Length 

The inplementation supports a roaucimura line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The roaximum size of a statically 


C-12 




p 


APPENDIX F OF THE Ada STANDARD 


Sized record t^»pe is 4,000,000 x STORAGSJUNITS. A record 
type or array t^pe declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit ST0RAG£_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
sizo stack of 10,240 STORAGE UNITS. This is the value 
returned by T'STORAGE_SI7.E for a task type T. 

11.4. Default Collection Size 

In the absence of cun explicit STORAGE_SlZE longxh attribute 
the default collection size for an access type is 100 times 
the size of the desigiiated type. This is the value returned 
by T'STORAGE_SI2E for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 




C-13 





