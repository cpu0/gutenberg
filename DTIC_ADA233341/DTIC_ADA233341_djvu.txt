
MENTATION PAGE 


Form Approved 
OPHNO-0704-C1U 


AD-A233 341 


J. REPORT DATE 


wassmssss* mesmur : 

t REPORT TYPE AND OATES CCVEREd""”~''~‘~~'“ ““ 

Final 16 Jan 1991 to 01 Mar 1993 


4 .Tfn£AM>MTlTl£ Ada Compiler Validation Summary Report: 

Verdix Corporation, VAda-110-0202, Version 6.0, VAXsystem 3100 
(Host & Target), 900228W1.11002 


•.AUTHORS) 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMS* OAGAMZOlONNAMEfS) AM) AOOAES8(ES) 

Ada Validation'Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 
Wright-Patterson AFB 
Dayton, OH 45433 


S. SPONSOR NQMONnDRMQ AGENCY NAME(S) AND A0OAESS(ES) 

Ada Joint Program Office 

United States Department of Defense 

Washington, D.C. 20301-3081 



‘aBBaST™ 

AVF-VSR-364.0191 





ISA OSTRBtmOMAMUABUTY STATE WENT 

Approved for public release; distribution unlimited. 


i2b.nsTRauraNC00E 


IS. ABSTRACT (SNMrvniBO Mr*; 

Verdix Corporation, VAda-110-0202, Version 6.0, Wright-Patterson AFB, OH, VAXsystem 
3100 (Host & Target), ACVC 1.11. 


DTIC 

^ELECTS f% 
RylAR221991,'^J 


i.SUBJECTTl rms Ada programming language, Ada Compiler Validation 
Summary Report, Ada Compiler Validation Capability, Validation 
Testing, Ada Validation Office, Ada Validation Facility, ANSI/MIL 
da Joint Program Office _ _ 


IS. NUMBER OF AMES 





• :TI |7*f 1 1 r i Cm 


OF7HBRME 

UNCLASSIFIED 



"IT r ’.*.YJt",Y •' 


91 3 19 131 

















AVF Control Number: AVF-VSR-364.0191 

16 January 91 
90-01-15-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 900228V1.11002 
Verdix Corporation 
VAda-110-0202, Version 6.0 
VAXsystem 3100 «> VAXsystem 3100 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 




Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 28 February 1990. 

Compiler Name and Version: VAda-110-0202, Version 6.0 

Host Computer System: VAXsystem 3100, ULTRIX 3.1 

Target Computer System: VAXsystem 3100, ULTRIX 3.1 

Customer Agreement Number: 90-01-15-VRX 

See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 900228W1.1102 
is awarded to Verdix Corporation. This certificate expires on 1 March 
1993. 

This report has been reviewed and is approved. 





Ada Validation Facility 
Steven P. Wilson 


Technical Director 


ASD/SCEL 


Wright-Patterson AFB OH 



45433-6503 


Ada Validation Organization 

Director, Computer & Sof twar^Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 

Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 









DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 
Customer: Verdix Corporation 

Ada Validation Facility: ASD/SCEL, Vright-Patterson AFB OH 45433-6503 
ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: VAda-110- 0202 Version 6.0 
Host Computer System: VAXsystem 3100, ULTRIX 3.1 

Target Computer System: VAXsystem 2100, ULTRIX 3.1 

Customer's Declaration 

I, the undersigned, representing Verdix Corporation, declare that Verdix 
Corporation has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this 
declaration. I declare that the Verdix Corporation is the ovner of the 
above implementation and the certificates shall be awarded in the name of 
the owner's corporate name. 

Date: d /£ ?/^Q _ 

1600 NV Compton Drive 
Suite 357 

Beaverton, Oregon 97006 


tepheri iawief m . " 


Stepheri Saigi e f 
Verdix Corporation 


2rC*L 




TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 
















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 





INTRODUCTION 


1.2 REFERENCES 


[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, FeEruary 1583 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECKFILE is used to check the contents of 
text files vritten by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 





INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing vithdravn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90], 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVP. The 
publication date for this list of withdrawn tests is 31 January 1990. 


E28005C 

B41308B 

C45114A 

C45612B 

C45651A 

C46022A 

B49008A 

A74006A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

C97116A 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2119B 

CE3111C 

CE3118A 

CE3411B 

CE3412B 

CE3812A 

CE3902B 


2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


The following 285 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 

C24113F..Y (20 tests) C35705F..Y (20 tests) 

C35706F..Y (20 tests) C35707F..Y (20 tests) 

C35708F..Y (20 tests) C35802F..Z (21 tests) 


2-1 





IMPLEMENTATION DEPENDENCIES 


C45241F..Y <20 tests) 
C45421F..Y <20 tests) 
C45524F..Z <21 tests) 
C45641F..Y <20 tests) 


C45321F..Y <20 tests) 
C45521F..Z <21 tests) 
C45621F..Z <21 tests) 
C46012F..Z <21 tests) 


The following 21 tests check for the predefined type L0NG_INTEGER: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45612C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

CD7101F 

C55B07A 

B55B09C 

B86001W 

C86006C 

C35702B, C35713C 

, B86001U, 

and C86006G check for the 

predefined 


LONG FLOAT. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, L0NG_FL0AT, or SH0RT_FL0AT. 

C45346A checks that NUMERIC_ERROR is not raised if the length of the 
result of catenation exceeds INTEGER'LAST or SYSTEM.MAX_INT and that 
CONSTRAINTERROR or STORAGEERROR is raised instead. 
NUMERIC/CONSTRAINT_ERROR was raised when an array of length 
INTEGER'LAST/2 + 1 was declared. 


C45531M..P <4 tests) and C45532M..P <4 tests) use a value for 
SYSTEM.MAXMANTISSA of 47 or greater. 

C45624A..B <2 tests) check that the proper exception is raised if 
MACHINE OVERFLOWS is FALSE for floating point types; for this 
implementation, MACHINEOVERFLOVS is TRUE. 

C86001F recompiles package SYSTEM, making package TEXTIO, and hence 
package REPORT, obsolete. For this implementation, the package TEXT_I0 
is dependent upon package SYSTEM. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

C96005B checks for values of type DURATION'BASE that are outside the 
range of DURATION. There are no such values for this implementation. 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 


2-2 





IMPLEMENTATION DEPENDENCIES 


The tests listed in the following table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access method. 


Test 

File Operation Mode 

File Access Me 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

IN0UT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT~I0 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE21020 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

inout'file 

DIRECT~I0 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT“I0 

CE2102W 

RESET 

OUT“FILE 

DIRECT 10 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A and CE2403A check that WRITE raises USEERROR if the capacity of 
the external file is exceeded, for SEQUENTIALIO and DIRECTIO 
respectively. This implementation cannot restrict file capacity. 

CE3304A checks that USEERROR is raised if a call to SET LINE LENGTH or 
SET_PAGE LENGTH specifies a value that is inappropriate lor tKe external 
file. TKis implementation does not have inappropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises LAYOUT_ERROR when the value of the page 
number exceeds COUNT'LAST. For this implementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 20 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 


2-3 





IMPLEMENTATION DEPENDENCIES 


B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 


CD1009A, CD1009I, CD1C03A, CD2A22J, and CD2A31A..C (3 tests) use 
instantiations of the support procedure Length_Check, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instantiations of Length_Check—i.e., the allowed Report.Failed messages 
have the general form: 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
implementation system, see: 

Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly, VA 22021 

For a point of contact for sales information about this Ada implementation 
system, see: 


Steve Hodges 
Verdix Corporation 
14130-A Sully Field Circle 
Chantilly, VA 22021 


Testing of this Ada implementation vas conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


3-1 







PROCESSING INFORMATION 


a) Total Number of Applicable Tests 

b) Total Number of Vithdravn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3753 

60 

72 

0 


285 

357 

(c+d+e) 

4170 

(a+b+f) 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above number of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. Vhen this compiler was tested, the tests 
listed in section 2.1 had been vithdravn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. Vhen this compiler vas 
tested, the tests listed in section 2.1 had been vithdravn because of test 
errors. The AVF determined that 357 tests vere inapplicable to this 
implementation. All inapplicable tests vere processed during validation 
testing except for 285 executable tests that use floating-point precision 
exceeding that supported by the implementation. In addition, the modified 
tests mentioned in section 2.3 vere also processed. 

A magnetic tape containing the customized test suite (see section 1.3) vas 
taken on-site by the validation team for processing. The contents of the 
magnetic tape vere not loaded directly onto the host computer. The tape 
vas loaded onto a Sun Workstation and the tests vere copied over Ethernet 
to the host machine. 

After the test files vere loaded onto the host computer, the full set of 
tests vas processed by the Ada implementation. 

Testing vas performed using command scripts provided by the customer and 
revieved by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test vere: 


-v 


Suppress generation of varning messages. 


Test output, compiler and linker listings, and job logs vere captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team vere also archived. 


3-2 







APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used £or customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$BIG_ID1 (1..V-1 «> 'A', V «> '1') 

$BIG_ID2 (1..V-1 «> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 «> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-l-V/2 -> 'A') 

$BIG_INT_LIT (1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (1..V-5 «> '0') & "69.0E1" 

$BIG_STRING1 & (1..V/2 -> 'A') & 

$BIG_STRING2 & (1..V-l-V/2 -> 'A') & '1' & 

SBLANKS (1..V-20 «> ' ') 

$MAX_LEN INT_BASED_LITERAL 

"2:" & (1..V-5 => '0') & "11:" 

$MAX LEN REAL_BASED_LITERAL 

"16:" & (1..V-7 «> '0') & "F.E:" 

$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


A-l 










MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$MAX_IN_LEN 499 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COUNT_LAST 2_147_483_647 

$DEFAULT_MEM_SIZE 6291456 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME VAX_UNIX 

$DELTA_DOC 0.0000000004656612873077392578125 

$ENTRY_ADDRESS SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 SYSTEM."+"(16#100#) 

SFIELDLAST 2_147_483_647 

$FILE_TERMINAT0R ' ' 

$FIXED_NAME NO_SUCH_TYPE 

$FLOAT_NAME N0_SUCH_TYPE 

$FORM_STRING »» 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER_THAN_DURATION 

100_000.0 

SGREATER THAN DURATION BASE LAST 

To_ooC_ooo.o 

$GREATER_THAN_FL0AT_BASE LAST 

l.SE+38 

SGREATER THAN FLOAT SAFE LARGE 

1.701411837E+38 

$GREATER_THAN_SHORT_FLOAT_SAFE_LARGE 


A-2 






MACRO PARAMETERS 


1.701415E+38 

$HIGH_PRIORITY 99 

SILLEGAL EXTERNAL FILE NAMEi 

”/illegal/file_name/2}JX2102C.DAT" 

SILLEGAL EXTERNAL FILE NAME2 

*/illegal/file_name/CE2102C*.DAT" 

SINAPPROPRIATE LINE_LENGTH 

-1 

SINAPPROPRIATE PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

SLESSTHANDURATION BASE FIRST 

-1<3_000_000.0 

SLINETERMINATOR ASCII.LF & ASCII.FF 

$LOW_PRIORITY 0 

$MACHINE_CODE STATEMENT 

C0DE_0'(0P -> NOP); 

$MACHINE_CODE_TYPE C0DE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 9 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

SNAME TINY INTEGER 


A-3 









MACRO PARAMETERS 


$NAME_LIST 

VAX_UNIX 

$NAME_SPECIFICATIONl 

/usr/acvcl.11/c/e/X2120A 

$NAME_SPECIFICATION2 

/usr/acvcl.ll/c/e/X2120B 

$NAME_SPECIFICATION3 

/usr/acvcl.ll/c/e/X3119A 

$NEG_BASED_INT 

16#FFFFFFF0# 

$NEV_MEM__SIZE 

6291456 

$NEW_STOR_UNIT 

8 

$NEV_SYS_NAME 

VAXJJNIX 

$PAGE_TERMINATOR 

ASCII.FF 

$RECORD_DEFINITION 

RECORD SUBP: OPERAND; END RECORD; 

$RECORD_NAME 

C0DE_0 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

1024 

STICK 

0.01 

SVARIABLEADDRESS 

VAR_1'ADDRESS 

SVARIABLEADDRESS1 

VAR_2'ADDRESS 

SVARIABLEADDRESS2 

VAR_3'ADDRESS 

SYOURPRAGMA 

PASSIVE 


A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


B-l 




aud 


ada — Ada compiler 


Syntax 

ada [options] ( sourceJile j... [iinker_options] [objectJiie.o \... 


Options 

-# Identifier type value 
•a filename 


-DG 

-d 


-« 


-E 

-Eff/e 
-E directory 


-el 


-a 

-Bff/e 
-El directory 


-ev 


-K 


-L libraryjiame 
-Vflejabbreviation 


(define) Define an identifier of a specified type and value. See 
Chapter 10. VADS ADA PREPROCESSOR REFERENCE. 

(archive) Treat fiiejtame as an odject archive file created by ar. 
Since some archive files end with .a, -a is used to distinguish 
archive files from Ada source files. 

Write out the gnrx.llb file in ASCII. 

(dependencies) Analyze for dependencies only. .Do not do 
semantic analysis or code generation. Update the library, marking 
any defined units as uncompiled. The -d option is used by a.make 
to establish dependencies among new files. 

(error) Process compilation error messages using a.error and send 
it to standard output. Only the source lines containing errors are 
listed. Only one -e or -E option should be used. 


(error output) Without a file or directory argument, ada processes 
error messages using a.error and directs a brief output to standard 
output; the raw error messages are left in adajsource.en. If a file 
pathname is given, the raw error messages are placed in that file. 
If a directory argument is supplied, the raw error output is placed in 
dirfsource.en. The file of raw error messages can be used as input 
to a.error. Only one -e or -E option should be used. 

(error listing) intersperse error messages among source lines and 
direct to standard output. 


(error listing) Same as the -E option, except that source listing with 
errors is produced. 

(error vl(l)) Process syntax error messages using a.error, embed 
them in the source file, and call the environment editor 
ERROR_EDITOR. (If ERROR_EDITOR is defined, the environment 
variable ERROR_PATTERN should also be defined. 
EHROR_PATTERN is an editor search command that locates the 
first occurrence of '###' in the error file.) If no editor is specified. vi(t) 
is invoked. 

(keep) Keep the intermediate language (IL) file produced by the 
compiler front end. The IL file will be placed int he .objects 
directory, with the file name AdajsourceA 
(library) Operate in VADS library libraryjiame (the current working 
directory is tne default). 

(library search) This is an option passed to the UNIX linker, ld(l) 
telling it to search tne specified library file. (No «pace between the 
-I and the file abbreviation.) 




ada 


-M unttjiame 


-M source file 


-o executableJUe 


0(0-9] 


-P 


-R VADSJIbrary 


• -S 


-T 


For a description of the file abbreviations, see also Operating 
system documentation, ld(1). 

(main) Produce an executable program by linking the named unit as 
the main program, unitjiame must already be compiled. It must be 
either a parametertess procedure or a parameterless function 
returning an integer. The executable program will be named a.out 
unless overridden with the -o option. 

(main) Produce an executable program by compiling and linking 
sourcejlle. The main unit of the program is assumed to be the root 
name of ihe ^ file (for foo.a the unit is foo). Only one ji file may be 
preceded by -M. The executable program will be named a.out 
unless overridden with the -o option. 

(output) This option is to be used in conjunction with the -M option. 
executable JUe is the name of the executable rather than the default 
a. out. 


(optimize) Invoke the code optimizer (0PT1M3). An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


-0 

full optimization 

-oo 

prevents optimization 

-01 

no hoisting 

-02 

no hoisting but more passes 

-03 

no hoisting but even more passes 

-04 

hoisting from loops 

-OS 

hoisting from loops but more passes 

-06 

hoisting from loops with maximum passes 

-07 

hoisting from loops and branches 

-08 

hoisting from loops and branches, more 
passes 

-09 

hoisting from loops and branches, maximum 
passes 


Hoisting from branches (and cases alternatives) can be slow and 
does not always provide significant performance gains so it can be 
suppressed. 

For more information about optimization, see COMPILING ADA 
PROGRAMS, Compiler Optimizations on page UG 4-3. See also 
pragma OPT1MIZE_CODE(OFF) on page PG F-4. 

Invoke the Ada Preprocessor. See Chapter 10, VADS ADA 
PREPROCESSOR REFERENCE. 


(recompile instantiation) Force analysis of all generic instantiations, 
causing reinstantiation of any that are out of date. 

(suppress) Apply pragma SUPPRESS to the entire compilation for 
all suppressibie checks. (See also pragma 
SUPPRESS(AU.CHECKS) on page PG F-5 

(timing) Print ummg information tor the compilation. 


B-3 





ada 


-v * (verbose) Print compiler version number, date and time of 

compilation, name of file compiled, command Input line, total 
compilation time, and error summary line. Storage usage 
information about the object file is provided. With OPTIM3 the 
output format of compression (the size of optimized instructions) Is 
as a percentage of input (unoptimized instructions). 

-w (warnings) Suppress warning diagnostics. 

Description 

The command ada executes the Ada compiler and compiles the named Ada source file, ending with 
the .a suffix The file must reside in a VAOS library directory. The adaJlb file in this directory is modified 
after each Ada unit is compiled. 

By default, ada produces only object and net files. If the -M option is used, the compiler automatically 
invokes aJd and builds a complete program with the named library unit as the main program. 

Non-Ada object files (.0 files produced by a compiler for another language) may be given as 
arguments to ada. These files will be passed on to the linker and will be linked with the specified Ada 
object files. 

Command line options may be specified in any order, but the order of compilation and the order of 
the files to be passed to the linker can be significant. 

Several VAOS compilers may be simultaneously available on a single system. Because the ada 
command in any VADS_lacatianib\n on a system will execute the correct compiler components based 
upon visible libmy directives, the option -sh is provided to print the name of the components actually 
executed. 

\ 

Program listings with a disassembly of machine code instructions are generated by a.db or a.das. 


See also a.das on page UG 8-6; a.db on page UG 8-7; a.error on page UG 8-10; a.id on page 
UG 8-14; a.mkllb on page UG 8-21; and Operating System reference documentation for the ld(l) 
utility. 

Diagnostics 

The diagnostics produced by the VAOS compiler are intended to be self-explanatory. Most refer to 
the RM. Each RM reference includes a section runoer and optionally, a paragraph number enclosed 
in parentheses. 







COMPILATION SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


B-5 





a.ld 


a.ld — prelinker 


Syntax 

a.ld (opffonsi unitjiame [ld_options\ 

Description 

•.Id collects the object flies needed to make unitjiame a main program and calls the UNIX linker !d(i) 
to link together all Ada and other language objects required to produce an executable image in a.out. 
unitjiame is the main program and must name a non-generic subprogram. If unit name is a function, 
it must return a value of the type STANDARD.INTEGER This integer result will be'passed back to the 
UNIX shell as the status code of the execution. The utility uses the net files produced by the Ada 
compiler to check dependency information, add produces an exception mapping table and a unit 
elaboration table and passes this information to the linker. 

a.ld reads instructions for generating executables from the ada.!!b file in the VADS libraries on the 
search list. Besides information generated by the compiler, these directives also include WTTHn 
directives that allow the automatic linking of object modules compiled from other languages or Ada 
object modules not named in context clauses in the Ada source. Any number of WlTHn directives may 
be placed into a library, but they must be numbered contiguously beginning at wm-li . The directives 
are recorded in the library's ada.Ub file and have the following form. 

WITHI: LINK: object Jilt: 

WITH2: LINK: archive Jilt: 

WlTHn directives may be placed in the local Ada libraries or in any VADS library on the search list. 

A WlTHn directive in a local VADS library or earlier on the library search list will hide the same 
numbered WlTHn directive in a library later in the library search list. 

Use the tool a.info to change or report library directives in the current library. 

All arguments after unitjiame are passed on to the linker. These may be options for it, archive libranes, 
library abbreviations, or object files. 

VADSjocanon/blnJeAd is a wrapper program that executes the correct executable based upon 
directives visible in the ada.lU9 file. This permits multiple VADS compilers to exist on the same host. 
The -sh option prints the name of the actual executable file. 

Options 


ox 


-E unitjiame 


-F 

-L libraryjiame 
-o executable Jle 


-aft 


(debug) Debug memory overflow (use in cases where linking a large 
number of units causes the error message “local symbol overflow’' 
to occur). 

(elaborate) Elaborate unitjiame as early in the elaboration order as 
possible. 

(files) Print a list of dependent files in order and suppress linking. 

(library) Operate m VADS library library jiame (the current working 
directory is the default). 

(output) Use (he specified file name as the name of the output rather 
than the default, a.out. 

(show) Display the name of the tool executable but do not execute 

it. 


B-6 







-u 

-v 

-V 


(units) Print a list of dependent units in order and suppress linking. 
(verPose) Print the linker command before executing it. 

(verify) Print the linker command but suppress execution. 


Files 

a.out default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VWDS_/ocaoon/standard/* startup and standard library routines 

See also Operating system documentation, ld(l). 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, etc. Occasional additional messages 
are produced by the linker. 


B-7 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 9 range -1.70141183E+38 .. 1.70141183E+38; 
type SHORT_FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 


C-l 




ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 
1.1. INUNE ONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as pragma INLINE, indicates to the compiler 
that the subprogram must always be inlined. This pragma also suppresses the generation of a callable 
version of the routine which saves code space. If a user erroneously makes an INLINE_ONLY subpro¬ 
gram recursive a warning message will be emitted and an PROGRAM_ERROR will be raised at run 
time. 

11 BUILT_IN Pragma 

The BUILTJN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Ada body can be pro¬ 
vided, for example the MACHINE_CODE package. 

U. SHARE CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument. This pragma is only allowed 
immediately at the place of a declarative item in a declarative part or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unit. 

When the first argument is a generic unit the pragma applies to all instantiations of that generic. When 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated far a generic instantia¬ 
tion with code generated far other instantiations of the same generic. When the second argument is 
FALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit 

The name pragma SHARE_BODY is also recognized by the implementation and has the same effect as 
SHARE_CODE. It is included for comparability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used for the IMAGE attribute of enumeration 
types. This eliminates the overhead required to store the array in the executable image. An attempt to 
use the IMAGE attribute on a type whose image array has been suppressed will result in a compilation 
warning and PROGRAM_ERROR raised at run lime. 

U. EXTERN AL_NAME Pragma 

The EXTERNALJNAME pragma takes the name of a subprogram or variable defined in Ada and 
allows the User to specify a different external name that may be used to reference the entity from other 
languages. The pragma is allowed at the place of a declarative uem in a package specification and 
must apply to an object declared earlier in the same package specification. 


C-2 








1.6. INTERFACE_NAME Pragma 

The 1NTERFACE_NAME pragma takes the name of a a variable or subprogram defined in another 
language and allows it to be referenced directly in Ada. The pragma will replace all occurrences of the 
variable or subprogram name with an external reference to the second, linkjugument. The pragma is 
allowed at the place of a declarative item in a package specification and must apply to an object or sub¬ 
program declared earlier in the same package specification. The object must be declared as a scalar or 
an access type. The object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPUCIT CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument This pragma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 

11. OPTTMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument This pragma is only allowed within a 
machine code procedure. It specifies whether the code should be optimized by the compiler. The 
default is ON. When OFF is specified, the compiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 
2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect 

12. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

This pragma supports calls to ’C and FORTRAN functions. The Ada subprograms can be either func¬ 
tions or procedures. The types of parameters and the result type for functions must be scalar, access or 
the predefined type ADDRESS in SYSTEM All parameters must have mode IN. Record and array 
objects can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the Ada RM 

2.6. MEMORY SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by^ means of pragmas, the SYSTEM package must be recompiled. 

2.7. NON REENTRANT 

This pragma takes one argument which can be the name of either a library subprogram or a subprogram 
declared immediately within a library package spec or body. It indicates to the compiler that the sub¬ 
program will not be called recursively allowing the compiler to perform specific optimizations. The 
pragma can be applied to a subprogram or a set of overloaded subprograsm within a package spec or 


C-3 







package body. 

2.S. NOT_ELABORATED 

This pragma can only appear in a library package specification. It indicates that the package will not 
be elaborated because it is either part of the RTS. a configuration package or an Ada package that is 
referenced from a language other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no effect 

2.10. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVEONTERRUPT, <number>); 

This pragma Pragma passive can be applied to a task or task type declared immediately within a library 
package spec or body. The pragma directs the compiler to optimize certain tasking operations. It is 
possible that the statements in a task body will prevent the intended optimization, in these cases a warn¬ 
ing will be generated at compile time and will raise TASK2NG_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no effect 

2.15. STORAGEJJNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that DIVISION_CHECK and in some cases 
OVERFLOW_CHECK cannot be supressed. 

2.17. SYSTEMJNAME 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3.1. PREP 

For a prefix that denotes an object a program unit a label, or an entry: 


C-4 







This attribute denotes the effective of the first of the storage units allocated to P. For a subpro¬ 
gram. package, task unit, or label, it refers to the address of the machine code associated with the 
corresponding body or statement For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt The attribute is of the type OPERAND defined in the package 
MACHINE_CODE. The attribute is only allowed within a machine code procedure. 

See section F.4.8 for more information on the use of this attribute. 

(For a package, task unit or entry, the 'REF attribute is not supported.) 

3 2. T’TASKID 

For a task object or a value T, TTASKJD yields the unique task id associated with a task. The value 
of this attribute is of the type ADDRESS’ in the package SYSTEM. 

4. Specification Of Package SYSTEM 


Cappt ipkl 1*17. IMS. Its* Var4il CArparattaa 

• ilk UNSIOBD.TYPBS; 

*uki|i SYSTEM it 

filial aappraatf ALL .OBOES): 
pra^a • appr,»,(EXCEPTION.TASLES) ; 
fiipa aat.ajak«rtta4; 

ippa KM ia ( vaa.aala ); 


SYITM.MAkB : aaaaiaai NM :■ vaa aaii: 

IIDWI WIT : aaaaiaai :• I: 

IMIKYjia i aaaaiaai !• 4 . 2 »I_«S 4 ; 

-• Spaiaaa-Oapaalaat Naaal Nnkara 

kON.IMT : aaaaiaai :• >2 147 . 41 ) < 4 t; 

MkX.INr : aaaaiaai :• 2 147 4(3 447 ; 

MUE.DIOITS : aaaaiaai t- »T " * 

MIX MANTISSA : aaaaiaai :a Jl; 

P 1 NB.DELTA : aaaaiaai :• 2 . 0 —E-Jl); 

T 1 CX : aaaaiaai :• 0 . 01 ; 


•• Oikar SpaiaanlapaaSaai Daalaraiiaaa 
aakippa PKI0K1TY ia (OTICM raapa 0 .. *»; 

M4X.PIC.Sia : iaiapai <• 44-1024; 
tppa «nS) ia priaaia; 

faaaiiaa •»• (A: ACCMSS; ■: ACCMSS) ralara MCLEaN; 

(aaatiaa *<• (A: ACCMSS; •: ACCMSS) ratata HCUaN; 

faaaiiaa *>«*(A: ACCMSS: »; ACCMSS) ralara I0CUAN; 
faaaiiaa "<«’(A; ACCMSS; It ACCMSS) ralara lOCUAN; 

(aaaiiaa *•* (A; ACCMSS; I; ACCMSS) ratata IKTIOM; 

faaaiiaa '•* (A; ACCMSS; I: UfIBCM) ratata ACCMSS; 

faaaiiaa *•* (A: ACCMSS; I: UfiaCM) ralara ACCMSS; 

faaaiiaa '•* (I: tMKMD.TYTU.IMKm.llfiaSB) ralara ACCMSS; 

faaaiiaa SMOKY ACCMSS 

(I; UfSIOMD.TYMS.IMKMD.UfTMM) ralara ACCMSS faawt 

NO.ACCB : aaaaiaai ACCMSS; 

ippa TASK ID ia prlaala; 
f®.TASK.ID : aaaaiaai TASZ.ID; 

ippa nBORAM ID la ptiaata; 

M> v reocHAM.l6 : aaaaiaai MOOUM.ID; 


pri-ala 


ippa ACCMSS ia aa« lMlfMD.YYfU .UMKMD.UfTKM; 
ND.ACOB : aaaaiaai MCMSS :a 0; 


C-5 


prtMi WILT IN(*>‘); 
prapaa WILT~IN(*<*); 










<■4 


pi**m BUILT IN(•»•*); 
rttpM ■ntT'iNc*-*) : 
pf(«M ■JILT'lHC- - ): 

!>•■■ ■ntr.im***); 

• TM Task ID >• ••• UNSKMD TYTU-IMIOCD INTEOU; 
ND.TAMC.ID : »UIH1 TASK.lS :• •; 

iy»« PKOUM ID ia UOIOCD TYHS.UmiCVED 1NTB0EK; 
NO.noaM4.ID : anatui nOCRAM.lD :• 0; 

SYSTEM; 


5. Restrictions On Representation Clauses 
5.1. Pragma PACK 

In the absence of pragma PACK record components are padded so as to provide for efficient access by 
the target hardware, pragma PACK applied to a record eliminate the padding where possible. Pragma 
PACK has no other effect on the storage allocated for record components a record representation is 
required. 

5 2 . Size Clauses 

For scalar types a representation clause will pack to the number of bits required to represent the range 
of the subtype. A size clause applied to a record type will not cause packing of components; an expli¬ 
cit record representation clause must be given to specify the packing of the components. A size clause 
applied to a record type will cause packing of components only when the component type is a discrete 
type. An error will be issued if there is insufficient space allocated. The SIZE attribute is not sup¬ 
ported for task, access, or floating point types. 

5J. Address Clauses 

Address clauses are only supported for variables. Since default initialization of a variable requires 
evaluation of the variable address elaboration ordering requirements prohibit inidtalization of a variables 
which have address clauses. The specified address indicates the physical address associated with the 
variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5J. Representation Attributes 

The ADDRESS attribute is not supported for the following entities: 

Packages 

Tasks 

Labels 

Entries 

541. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides an assembly language interface for 
the target machine. It provides die necessary record type(s) needed in the code statement, an enumera¬ 
tion type of all the opcode mneumonics, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows: 

CODEji’( opcode , operand {, operand }); 


C-6 






¥ 


where it indicues the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands an listed within a subaggregate. 
The format is as follows: 

CODE_N*( opcode, (.operand {, operand })); 

For those opcodes that require no operands, named notation must be used (cf. RM 43(4)). 

CODE_0’( op ■> opcode ); 

The opcode must be an enumeration literal (ix. it cannot be an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the 'REF attribute. 

The arguments to any of the functions defined in MACH!NE_CODE must be static expressions, string 
literals, or the functions in MACHINE_CODE. The 'REF attribute may not be used as an argu¬ 

ment in any of these functions. 

Inline expansion of machine code procedures is supported. 


6. Conventions for Implementation-generated Names 
There are no impiementation-geneiated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked DeaOocatioiis 
None. 


10. Implementation Characteristka of I/O Packages 

Instantiations of DIRECTJO use the value MAX_REC_SIZE as the record size (expressed in 
ST0RAGE_UN1TS) when dm size of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_fYPE'SIZE is very large, MAX_REC_SEZE is used 
instead. MAXJRECORDJS1ZE is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT 10 lo provide » upper limit on the record size. In any case the maximum size 
supported is 1024 x 1024 x STORAGEJJNIT bits. DIRECT JO will raise USE.ERROR if 
MAXJUEC.SEZE exceeds this absolute limit” 

Instantiations of SEQUENTIAL 10 use the value MAX R£C_SIZE as the record size (expressed in 
STORAGEJJNITS) when the site of ELEMENTTYPE - exceeds thet value. For example for uncon¬ 
strained mays such as siring where ELEMENT TYPE’SIZE at very large, MAX_REC_SIZE is used 
instead. MAXJREC0RDJ1ZE is defined in SYSTEM and can be changed by a program before 
instantiating INTEGER 10 to provide m upper limit on the record size. SEQUENTIAL JO imposes no 
limit on MAX_REC_SEE. 


C-7 




* 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources to or even near these limits are available to every program. 


11.1. Line Length 

The implementation supports a maximum line length of 300 characters including the end of line charac¬ 
ter. 


11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 4.000,000 x STORAGE_UNTTS. The maximum 
size of a statically sized record type is 4,000,000 x STORAGEJJNITS. A record type or array type 
declaration that exceeds these limits will generate a warning message. 

11J. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every task except the main program 
is allocated a fixed size stack of 10,240 STORAGE_UNITS. This is the value returned by 
T’STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute the default collection size for an access 
type is 100 times the size of the designated type. This is the value returned by T'STORAGE_SIZE for 
an access type T. 

lli. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGEJJNITS for objects declared statically within a 
compilation unit. If this value is exceeded the compiler~wil! terminate the compilation of the unit with a 
FATAL error message. 


C-8 





