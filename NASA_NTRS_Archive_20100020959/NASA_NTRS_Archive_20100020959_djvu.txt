ration of Ground Operations 
Command and Control; 

Scripting in C# and Visual Basic 


George Ritter 

Computer Science Corporation (CSC), MSFC, Huntsville, Alabama 

And 

Ramon Pedoto 

COLS A Corporation, MSFC, Huntsville, Alabama 


Space Ops 2010 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 




Scripting in C# aiid Visual Basic (at P 



ISS POIC Payload Operations 


Space 
Shuttle 




S-Band Uplink & 
Downlink 


JSC 

SSCC/MCC-H, 

SSTF 


White Sands Complex (WSC) 


International 
Partner Payload 
in International 
Partner Rack 
Uplink 


K-Band 

Downlink 


Payload Uplink (Payloads in U.S. Racks in any ISS location) 


Payload Uplink (Payloads in U.S. Racks in any ISS location) 


International 
Space Station 
(ISS) 


S-Band Downlink 


Columbus, JEM and USOS Labs/Payloads Science Ku-Band Downlink 

Payload Uplink 


f 



Payload Ku-Band Downlink 
(Payloads in U.S. Racks in any ISS location) 


EPC/TReK Users 
At Various 
Remote User Sites 


International 

Partner/ 

Participant 

Facilities 


ESA GRC 

JAXA ARC 

ASI JSC 

CSA MSFC 

RSA 


US User 
Telescience 
Support 
Centers 


Payload Data Exchange 
(Payloads in U.S. Racks) 


US 

Payload 
User Sites 








•I 


i 


Script: A pre-planned s5t of instructions to execute or perform a task 
such as the dialog in a play or a “small” job in a computer. 


Scripts have become mainstream tools for solving more of the “house- 
keeping” computer problems such as managing file systems 


• Where compiled programming languages focus on performance, 
scripts are geared towards ease of use. 

- Ease of use lends itself to being interpreted 

• MSFC has developed a tool called the Enhanced and Redesigned 
Scripting Language (ERS) 


• ERS combines the ease of use of the typical interpreted scripting 
language with the power and richness of a full featured programming 
language. 

- Yup, ERS Scripts are complied 

- No, don’t leave yet © 


Space )ps2010 


3 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 




* • From JCL to Ruby/Perl ? Sys Admins and software developers 
have sought to “avoid the compiler 95 in an effort to simplify 
common and repetitive tasks that are not as performance 
oriented 


• Space ground systems have adapted and extended scripting 
concepts to the command and telemetry processing domains in 
order to “simplify repetitive tasks.” 

I S' 

• What makes the interpreted languages so useful in the Space 
Operations world? 


• Are there other solutions that combines the graphical richness of 
a complied language with the ease and flexibility of a scripting 
development environment? 


Space Ops 2010 


4 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 




■ 

G 



196G 9 s: IBM introduces (JCL) on their 03/360 where files could be copied 
from one location to another using only 9 lines of instructions! 



• JCL was followed by Data General’s (CLI) and Unix Bourne .Shell. 

• These Scripts store a series of commands in a file. Data General called them 
“macros”. Unix called them “shell scripts.” In all cases, the scripts ran as 
interpreted statements, no compiling. 

■ 1 

• Local variables and flow control were slowly added. As complexity grew, 
these languages continued to be interpreted, most likely because compute 
power was also increasing. 


• Today’s dynamic scripting languages, include Perl, Python, Ruby, Hypertext 
Preprocessor (PHP), Active Server Page (ASP), and JavaScript 

• Today’s scripting languages have progressed beyond simple file manipulation 
to complex programming tasks. They satisfy the needs of providing fast-to- 
develop and easy-to-maintain programming solutions in many of today’s 
computer problem domains. 


Space Dps 2010 


5 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 





■ 0 SCL by SRA International “ greatly reduces workload and automates routine 
tasks through procedural , time-sequenced and event based responses to real- 


time data, m 


• TSTOL, derived from System Test and Operations Language (STOL), is a 
procedural command language consisting of a core set of generic commands , 
supplemented by mission-specific extensions 

- TSTOL includes typical programming capabilities such as various data types, arithmetic, 
logical, and relational operators, global and local variables, and looping constructs. 

- TSTOL also has built in “procedures” or commands specific to the Goddard Mission 
Systems. 

• SLP (Scripting Language Processor) at the MSFC ISS POIC, and also 
currently used by the Chandra X-ray Observatory Control Center, is based on 
the TSTOL design 

- In SLP many of the same things can be done as in TSTOL with respect to arithmetic, 
logical, and looping functions. 

- The SLP directives also include POIC/Chandra command and telemetry specific 
procedures for remote control of the ISS Payload and Chandra spacecraft. 


Space Ops 2010 


6 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 





language syntax. 


• A single Scripts statement does lots of work, i.e., 

“uplink command,” 

ii f * 

• The script developer gets immediate feedback from the 
interpreter. 

• Scripts provide easy to use constructs for user-controlled 
program flow. 

- It is necessary to have ground operations personnel monitor 
the script. With SCL, TSTOL, and SLP, the script user has 
many control options. 


Space Ops 2010 


7 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 






rich in graphic capabilities. 


- At the MSFC POIC, the operations Cadre personnel use a 
combination of scripts (SLP and now ERS), a data display 
tool, and custom programs or 'comps (compiled languages) 
to provide them with the best combination of all the features 
they need to automate their flight operations tasks. 

■ 1 

I: ft ** 

• Why reinvent and maintain program flow constructs? 

• Are there better options for debug environments? 

• Do Scripting Languages really have a simple and 
limited syntax? 


Space )ps2010 


8 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 



r 


> • Is it possible to combine the features of a scripting language with the graphical 
and IDE richness of a programming language like Visual Basic. 

• Some scripting language syntax had become more complex and more work to 
maintain just to provide features that basic programming languages already 
offer. 

• Visual Basic and C# programmers are becoming more readily available. 

■ 1 

• Let us allow programming languages do what they do best and we add in 
classes and methods (script commands or directives) that do lots of work, i.e. 
“uplink command.” 

• But we have to develop a way to provide run-time “script” control that made 
execution feel and act like a script. 

• Thus was bom the Enhanced and Redesigned Scripting language or ERS. 




Space Ops 2010 


9 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 




i • ERS uses the Microsoft Visual Studio programming environment and 
offers custom controls that enable an ERS developer to extend the 
Visual Basic and Visual C# languages to interface with the POIC 
telemetry and command system 

• ERS Offers: 

- the richness of ^ full featured programming language 

- Simplicity of integration with POIC command and telemetry services 

- execution control features that make an ERS program feel and operate like 
a script. 

• ERS consists of 3 major pieces 

1 . ERS Operations: creating, starting, stopping. . . . 

2. Microsoft Visual Studio (can be free: Visual Studio Express) 

3. Custom wizards developed at Marshall to provide point and clink 
integration with the POIC ground system’s core libraries. 


Space Ops 2010 


10 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 





In ERS Operation the user can create, edit, delete, validate, and run 
ERS scripting projects. 

When creating a new ERS project, the ERS developer selects “add new 
script” from the File menu option in ERS Operation, which will launch 
Visual Studio’s New Project Wizard * 


ERS Operation ISS:TST1^-Test J ^dt,J.nasj.J,EHSJl,2 a 23MdteQaU0. 


BB® 


Space Ops 2010 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 


File View Options 

[> .JD if X ^ P ^ Data Mode: 

Script Projects: 


Realtime 


TDB Version: 

Baseline - PROP 

V" 


i-i <— ERS scr ots 
i+l Custom 1 

+ ^Demol 
I ±) ^ LogMSID 
l+i L_| Legacy Scripts 


Active Scripts: 


Assembly 


L BSS 


Messages: 













1 


rx 


■ ° 


In the Visual Studio Project Wizard, the user then selects a desired 
programming language, the ERS Script Project template, and a project 
name. 

Clicking “okay” brings up the ERS New Project Wizard 


New Project 





■ 

Project types: 

Templates: 

. M E T Fra m e w o r k 3 . 5 


1 1 Hlz 



Space Ops 2010 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 






t 


R 




■ 

Here the user must select an active “EPC session” to run against. The 
EPC session selection connects the ERS project to a specific set of 
telemetry and command meta-data within the POIC ground system. 

Clicking “okay” causes this Wizard to create a new .NET project that 
contains a code file plus an ERS-specific Validation File 




» 


Space Ops 2010 


13 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 













File Edit View Project Build Debug ClearCase Data Tools Test Analyze Window Help 


'Demo' 


Space Ops 2010 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 


ass called bcrii 




An ERS script is a custom . 

This base class is defined in the ERS library and contains many useful “EPC/POIC methods. 
These methods will appear in Visual Studio’s Intellisense, whenever the user types code. 
Included in the Intellisense are descriptions for each method. 

User code goes after the green “insert scripting code here” 


a Demo - Microsoft Visual Studio 


MBS 


Solution Explorer - Demo -w X 

DemoScript.vb* 

▼ X 

BLA 

| ^DemoScript v | S>Run(ParamArray Stringf)) v 


□ Demo 

i*ai My Project 

[S] Demo5cript. Validation. ers 

s^j DemoScript.vb 


Option Strict Off 
Option Explicit On 

Imports ERSLibrary 
Imports System 

Imports System. Collections .Generic 
Imports System. Text 


Partial Public Class DemoScript 
Inherits ScriptEngine 


Public Overrides Sub Run(ByVal ParamArray args() As String) 


' Insert scripting code here. 
Up| 

=♦ UpdateCommandForm 

UpdateCommandFromDataset 
^ UpdatePseudo 
UpdatePseudos 


UplinkCommand 


Common 


End While 
End Sub 


Public Sub UplinkCommand(cmdMnem As String) (+ 2 overloads) 
Initiates the transmission or uplink to the spacecraft for the command 
defined in the Operational Command Database. The actual command tr. 
Command System Services processes. 


<System. STAThre ad At tribute () > 

-i r. I \ 


Error Listj !□ Pending Solution Checkins 1 i=] Output Find Results 1 j^Find Symbol Results 






New Project Wizard 



ERS Operation > File >Ne\v 


New Project 

B® 

Eroject types: 

lemplates: ' NET Framework 3.5 v> | 1 1 1 sis: 


Reporting •*» 

Visual Studio installed templates 


WCF 

Workflow 

£3 


ER5 Script 


(B Visual Basic 



B Visual Basic 
ERS 

My Templates 


B Visual C++ 


0 

3 Other Project Types 

4UM 

• 

B - Test Projects 

Search Online v 


Creates an ER5 script project. 

Name: | Customl 

Location: | C:\Docunnents and 5ettings\testtDesktop\Code v | Brow 

Solution : | Create new Solution v] I I Create directory For solution 

□ Add to Rational ClearCase (must be in a view) 


VS Project Wizard: Choose 
Language, Template, Name 


MOP: None 

Folder: C:\Documents and Settirgs\pedotrw\Desktop\Code\Demo 


ERS Project Wizard: Select 
TLM and CMD Meta Data 



VS: Develop 


Space Ops 2010 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 











resume directive is entered. The value entered is stored in 
variable. 


• Sample Latest (): Updates all M SIDs (variables) with their latest 
packet values. 

k # ■ 

• Sample Next (): Updates all MSIDs (variables) with their next 
packet values. 

• Uplink Command (String, Verify): Initiates the transmission or 
uplink to the spacecraft for the command referenced by a unique 
mnemonic (variable) as defined by the Meta Data selection. 


Space Ops 2010 


16 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 





Space Ops 2010 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 


To use the methods or procedures previously presented, individual 
telemetry mnemonics and Command Mnemonics must be assigned to 
variables in the program. 


ERS (DemoScript. Validation. ers) - ISS: ISI1:l»s1. dtlnasl (EHS 1 2. 2): dteOaUO - Rea^.. |- ||n|[x | 


Input MSIDs [ Output MSIDs |[ Commands || UDEs || Advanced 


All Samples Limits/ES Variable Type Variable Name 
I I 0 I STRING fs 


■i i- : D 


Processing 


PKT1C31-CCCS- CALL ERA ED S' 


CONVERTED ^ 


PK1 1LKJ11MJ1A 


REAL ^ 


| Add MSID(s) 


Edit 


Dets Is 


Va sate 


Cance 


!-■= - - 


Descriptor. 


If STRING. IsDataNew Then 

Write("New data is available!") 

End If 






Select MSIDs ISS:TST1 :Test , dtlnasl (EHS 1 2.2): dteOallO 


Search Criteria 

M5ID 

Technical Name 
EM Error Description 
Owner ID 


Limits/Expected States I I 


Search Results 


MSID 

Technical Name 

Owner ID EM Error Description 

A 

PKT1001-0004 

COUNTER MEASURMENT 

PDL-PKT1001 


PKT1 001-0005 

COUNTER2 MEASURMENT 

PDL-PKT1001 


PKT1 001-0006 

RANGE MEASURMENT 

PDL-PKT1001 

LJJ 

PKT1 001-0007 

Bit Non-Conitiguous Group IUNS 

PDL-PKT1001 


PKT1 001 -0008 

Single 3it Discrete 

PDL-PKT1001 


PKT1 001 -0009 

Single 3it Discrete 0=OFF, l=ON 

PDL-PKT1001 


PKT1 001-0010 

32 Bit Signed Integer Twos Comp Word Swap 

PDL-PKT1001 


PKT1 001-0011 

Multisyllable Range-dependent parameter 

PDL-PKT1001 


PKT1 001-0012 

Bit Non-Contiguous Super 

PDL-PKT1001 


PKT1 001-001 3 

Multisyllable Counter-dependent 

PDL-PKT1001 


PKT 100 1-00 14 

Typical Super Sampled FEEE 

PDL-PKT1001 


PKT1 001-001 5 

Bit Non-Contiguous Super Sampled IUND 

PDL-PKT1001 


PKT1001-0016 

Bit-Contiguous Counter Dep FIBM 

PDL-PKT1001 


PKT1 001-001 7 

Bit Non-Contiguous Counter-dependent 

PDL-PKT1001 


PKT1001-001S 

Bit-Conitiguous Group FSPL 

PDL-PKT1001 


PKT1OO1-0O19 

Multisyllable Super Sampled FVAX 

ti mif n — I. ■ y- 1 - r>. : i~. . :i — » 

PDL-PKT1001 



Found 100 MSIDs 


Select 


Search 


Clear 


Close 


Space Ops 2010 


18 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 











' Scale the first sample value of the MSID 'PktlOOltest' 

Dim scaledValue = PktlOOltest.Sample(O) * scale 
' Write the scaled value back out as the Pseudo MSID 'ExtOtestOOl' 
ExtOtestOOl .Update(scaledValue) 

Next 

■ 

Set the modifiable fields on a command, update it in the DB, then uplink to spacecraft 
With AddDwnlinkFile.Fields.FileNames = "test.txt" 

End With 

' Update the command in the database 
AddDwnlinkFile .Update() 

' Verify that the user wants to uplink the command 

If AskPushButton("Are you sure you want to uplink?", "Yes", "No") = 0 Then 
* Uplink the command 
AddDwnlinkFile.Uplink() 

End If 


Space Ops 2010 


19 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 







ERS scripts can be controlled in debug mode inside the Visual Studio debugger where the script 
developer is provided with a rich set of the latest source level debug tools provided by Microsoft. 

ERS provides script control for a verified ERS script at run-time through ERS-provided 
input/output methods. 

These include methods to write out messages and to prompt a user for input. 

An ERS script that perfo/ms input and output is assigned its own logging window where both the 
input prompts and output messages are displayed. 

User Input Window Logging Window 


S DemoScript - ISS:TST1 :Test , dtlnas... [ — || □ | [ X | 


View •' y Logs 


^ DemoScript ISS:TST1 :Test , dtlnas..^ | — ]( □ [| X | 


El View ■! y Logs 


2.010:040:00:05:42. Enter number of samples: 


2010 : 040 : 00:0 5:42 


I 


OK 


[ Cancel 



Prompt Request: Enter number of 
samples: 

Prompt Reply: 5 

1 123. ■4559936523-34 

2 123.455993652344 

3 123.455993652344 

4 123.455993652344 

5 123.455993652344 
The script has completed. 


Exit 


Restart 



Space Ops 2010 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 




■ 

i 4 r m rt l 4^ ip n " 4 Jjp 3 I 

° Scripts are a power tool for space ground operations 

offering a relatively simple syntax and an environment that 
is integrated well with the host ground system. 

4 i fli 

• Scripts offer flow-control functions that make them ideal 
for remote control including things like execution 
confirmation. 

• However, scripting languages can be graphically 
challenged, and maintaining the typical program constructs 
becomes time consuming and unnecessary. 


Space Ops 2010 


21 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 





•i ERS is Integrated with Microsoft's Visual Studio. 
- Lots of VB and C# coders, and we concentrate on 


more hooks to our ground system 


• ERS wizards allow easy program startup and access to telemetry and command 
objects. 

4 d * 

• ERS provides a powerful input/output flow-control feature that allows the user to 
monitor progress and for confirmation execution of critical tasks if necessary, 

■ 

• ERS records of all user input/output actions in textual log files. 

• ERS programs are not scripts, but ERS programs offer the same features as many 
scripting languages, while also having the ability to include rich graphical 
components. 

• ERS is an Enhanced and Redesigned Scripting environment that is lowering our 
scripting development and maintenance costs while increasing our ground systems 
automation capability. 


S[ ace Ops 2010 


22 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 






ASP = Active Server Page 
CLI = Command Line interface 
CSC = Computer Science Corporation 
C2 = Command and Control 


C3ISR= 
C# = 
EHS = 
EPC = 
ERS = 
HOSC = 
HTML = 
ISS = 
MSFC = 
PHP = 
POIC = 
SCZ. = 
SZ.P = 
STOL = 
TSTOL 
VB = 
\/S = 


Command, Control, Communications, Intelligence, Surveillance and Reconnaissance 
‘C’ “sharp”, a programming language 
Enhanced HOSC System 

Enhanced Personal Computer (MSFC HOSC Telemetry and command tool-set) 

Enhanced and Redesigned Scripting Language 

Huntsville Operations Support Center 

Hypertext Markup Language 

International Space Station 

Marshall Spaceflight Center 

Hypertext Preprocessor 

Payload Operations Integration Center 

Systems Control Language 

Scripting Language Processor 

Systems Test and Operations Language 

= The System Test and Operations Language 

Visual Basic 

Visual Studio 


Space Ops 2010 


23 


NASA MSFC 
Mission Operations 
Laboratory (MOL) 




