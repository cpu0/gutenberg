AD-A210 806 


iX-iJ 


StCUB:^< CL»5SUI&>*10N 0> '»hIS >Au! (When Dtu fntete(f> ^ 


V 1 »yi 


< iLC 


U>?T 


REPORT DOCUMENTATION PAGE 


1. RePORT NJMBiR 


12. 60VT ACCeSSlOk NC. 


I. TITl£ cnaiubnrit) 

Ada Compiler Validation Sununary Report :Verdix 
"orporation, VADS VAX UNIX-)b8K, Version 5./ DEC VAX-11/750. 
(Host) to Tektronix 8541 Emulator (MV 68020 Support Systemj 

(Target), 890331W1.10045 _ 


AUTHORuI 

X’right-Patterson AFL 
Dayton, OH, USA 


. RERrORMlNu ORuAMZRTlOK AKO AOORiSS 

Zright-Patterson AFB 
)ayton, OK, USA 


. coKTRoaiNG Office rami and addrcss 
\da Joint Program Office 
Jnited States Department of Defense 
Zashington# DC 2t301-3081 


14. HOKITORIMG AGLNCY MAML i tiitifftm from Controlling Ofiict) 

Wright-Patterson AFB 
Dayton, OH, USA 


UaI/ wmi'.Tnoss. 
■r'’OP.i coy~,rTr'*»c POP.<* 


3 RiClRUAT'S CA'A..0C NUMBiR 



S. T»Rl Of RtRORT i RIRIOO COveRLD 

31 Mar. 1989 to 31 Mar. 1990 


e. nRfORMINO^RG. REPORT kjMBlR 


e. contract or &RAKT kUMEcRpJ 


1C. program eieMiNT. prcjict. tasa 

AREA a WORA UhlT NUMBERS 


12. REPORT date 


nrSlWEIS' Dr PAGli" 


15. security Cl. ass <ol tnis report} 
UNCLASSIFIED 


15a. ^ICATlOK-DOWNGRADING 

K/A 


16. DISTRIBUTION statement (of this Report) 

Approved for public release; distribution unlimited. 


17, DISTRIBUTION statement (of tht eOstrect e 

UNCLASSIFIED 


16. supplementary notes 



DTre 

£tECTE 
AUG Q 3 1989 


|C^0 If t/'ffererit from Report) 


0 





18. KEYWORDS (Continue on reverse siOi if rteceue'y ena identify by block number) 


a Prograirjt.ing language, Ada Compiler Validation Summ.ary Report, 
npiler Validation Capability, ACVC, Validation Testing, Ada 


Ada 

Comp- -,,-, . - - -,, 

Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 


Ada 


20. ABSTRACT (Continue on reverse Side if necessery end identify by block number) 

Verdix Corporation, VADS VAX UKIX-J68K, Version 5.7, Wright-Patterson AFB, DEC VAX-11/750 
under UNIX 4.3 BSD (Host) to Tektronix 8541 Emulator (MV 68020 Support System) using 
TEKDB Version 5.01 emulation Software(Target), ACVC 1.10. 


DO HTT 

t JAM 73 


EDITION Of 1 NOV 65 IS OBSO.ETE 
S/N 0102-Lf-0I4-6601 


UNCLASSIFIED 


security Classification of this page (^rienDet*(ntered) 









AVF Control Numbe*': AVF-VSR-239.0589 

89-01-3'-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT; 

Certificate Number: 890331W1.10045 
Verdix Corporation 
VADS VAX UNIX->68K, Version 5.7 
DEC VAX-11/750 Host and 

Tektronix 8541 Einulator (MV 68020 Support System) Target 


Completion of On-Site Testing: 
31 March 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Prepared For; 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 

A^CesiO" Fbr 

NTIS CRAiii 

I'.r,: lAfcj 

U J ' H L'd 




By... 

Di.-'t- ib:.ti0f' / 


Avjil.ibil'ty Codes 


Dist 

W-/ 


Avail a'ld/or 
Special 

I 

I 













Ada Compiler Validation Summary Report: 


Compiler Name; VADS VAX DNIX->68K, Version 5*7 
Certificate Number; . 100^45 

Host; DEC VAX-11/750 under 
UNIX U.3 BSD 

Target: Tektronix 85^1 Emulator (MV 68020 Support System) using 

TEKDB Version 5.01 emulation software 

Testing Completed 31 March 1989 Using ACVC 1.10 

This report has been reviewed and is approved. 



Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH U5U33-6503 


J. iC 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Washington D.C. 20301 










Ada Compiler Validation Summary Report; 


Compiler Name: VADS VAX UNIX->68K, Version 5.7 
Certificate Number: 890331W1.100U5 

Host; DEC VAX-11/750 under 
UNIX 11.3 BSD 

Target: Tektronix 85111 Emulator (MV 68020 Support System) using 

TEKDB Version 5.01 emulation software 

Testing Completed 31 March 1989 Using ACVC 1.10 

This report has been reviewed and is approved. 



Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 1151133-6503 


Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond 
Director 

Washington D.C. 20301 













TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.i< DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3-3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-5 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 


APPENDIX D 


WITHDRAWN TESTS 























CHAPTER 1 


INTRODUCTION 


This Validation Summary Report describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results o f testi^ this compiler using the Ada Compiler 

Validation Capability _An Ada compiler must be implemented 

according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. , 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 











INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing war carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 31 March 1989 at Aloha OR. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). Ihe results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the sigpnature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from; 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 115433-6503 


1-2 









INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22r;11 


1.3 REFERENCES 

1. Reference Manual for the Ada Prograraming Language , 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines . Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers * Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User’s Guide, December 1986. 


1.4 DEFINITION OF TERMS 

ACVC The Ada Compiler Validation Capability. Ihe set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 










INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


Withdrawn 

test 








INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation anc execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for exaunple, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are exoected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanisit by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 1U of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 


1-5 












INTRODUCTION 


tests. However, some tests contain values that require the test to be 
custcjlzed according to implementation-specific values—for example, an 
illegal file nzune. A list of the values used for this valioation is 
provided in Appendix C. 

A compiler must correctly p-ocess each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapolicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that as 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 








CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration; 

Compiler: VADS VAX UNIX->68K, Version 5.7 

ACVC Version; 1.10 
Certificate Number: 890331W1.10045 
Host Computer; 

Machine; DEC VAX-11/750 

Operating System; UNIX 4.3 BSD 

Memory Size; 16 Megabytes 

Target Computer; 

Machine; Tektronix 8541 Emulator 

(MV 68020 Support System) using 
TEKDB Version 5.01 emulation software 

Operating System; None 

Memory Size; 2 Megabytes 

Communications Network; ETHERNET 


2-1 










CONFIGURATION INFORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The uests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests contsdning loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(U) The compiler correctly processes tests contaiining recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D6M005E.,G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
TINy_IKTEGER, SHORT_INTEGER, and SHORT__FLOAT in package 
STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component’s subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 


2-2 









CONFIGURATION INFORMATION 


(4) Sometimes CONSTRAINT_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C^5232A.) 

(5) Sometimes NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C^5252A.) 

(6) Underflow is gradual. (See tests C45524A..2.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..2.) 

(3) The method used for rounding to integer in static universal 
real expressions is round to even. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINT_ERROR for an array having a ’LENGTH that exceeds 

STANDARD.INTEGER’LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises no exception. (See test 
C36003A.} 

(2) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 
array type with INTEGER'LAST 2 components. (See test 
C36202A.) 

(3) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 

array type with SYSTEW.MAX_INT + 2 components. (See test 

C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array type is declared. (See 
test C52103X.) 


2-3 








CONFIGURATION INFORMATION 


(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER’LAST components raises NUMERIC_ERROR when the array 
type is declared. (See test C5210i<Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype, (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT^ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates, 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests CU3207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
all choices are evaluated before being checked for identical 
bounds. (See teat E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B, EA3004C..D, and CA3004E..F.) 


I 





CONFIGURATION INFORMATION 


(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009r, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


J. Input and output 

(1) The package SEQUENTIAL_IO can be instantiated with 
unconstrained array types and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.} 

(2) The package DIRECT_IO can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN FILE and ODT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN FILE, OUT FILE, and INOUT FILE are supported for 
DIRECT loT (See tests CE2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) Modes IN_FILE and OUT^FILE are supported for text files. (See 
tests CE3‘102E and CE3102I..K.) 

(6) RESET and DELETE operations are supported for SEQUENTIAL_IO. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_IO. (See 
tests CE2102K and CE2102y.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

(9) Overwriting to a sequential file truncates to the last element 
written. (See test CE2208B.) 

(10) Temporary sequential files are given names and deleted when 
closed. (See test CE2108A.) 

(11) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and deleted when closed. 
(See test CE3112A.) 


2-5 













CONFIGURATION INFORMATION 


( 13 ) More than one internal file can be associated with each 

external file for sequential files when writing or reading. 
(See tests CE2107A. .E, CE2102L, CE2110E, and CE21Hj.) 

(14) More than one internal file can be associated with each 

external file for direct files when writing or reading. (See 
tests CE2107F..H (3 tests), CEEIIOD, and CE2niK.) 

( 15 ) More than one internal file can be associated with each 

external file for text files when reading or writing. (See 
tests CE3111A..E, CE3114B, and CE3115A.) 


2-6 











CHAPTER 3 


TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. Vhen this compiler was 
tested, 43 tests had been withdrawn because of test errors. The AVF 
determined that 329 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation . Modifications to the code, processing, or grading 
for 10 tests were required to successfully demonstrate the test objective. 
(See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

129 

1132 

1993 

17 

28 

46 

3345 

Inapplicable 

0 

6 

323 

0 

0 

0 

329 

Withdrawn 

1 

2 

34 

0 

6 

0 

43 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 












TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

u 

c; 

6 

7 

8 

0 

y' 

10 

11 

12 

13 

14 


Passed 

198 

577 

545 

245 

172 

99 

161 

332 

137 

36 

252 

292 

299 

3345 

Inappl 

14 

72 

135 

3 

0 

0 

5 

1 

0 

0 

0 

77 

22 

329 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

35 

4 

43 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 43 tests were withdrawn from ACVC Version 1.10 at the time of this 
validation: 


E28005C 

A39005G 

B97102E 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 


CE3411B 

See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features that 
a compiler is not required by the Ada Standard to support. Others may depend on 
the result of another test that is either inapplicable or withdrawn. The 
applicability of a test to an implementation is considered each time a 
validation is attempted. A test that is inapplicable for one validation attempt 
is not necessarily inapplicable for a subsequent attempt. For this validation 
attempt, 329 tests were inapplicable for the reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX_DIGITS: 

C24113L..Y C35705L..Y C35706L..Y C35707L. .Y 

C35708L..Y C35802L..Z C45241L..Y C45321L..Y 

C45421L..Y C45521L..Z C45524L..Z C45621L..Z 


3-2 







TEST INFORMATION 


C45641L..Y C46012L..Z 

b. C35702B and B86001U are not applicable because this implementation 
supports no predefined type L0NG_FL0AT. 

c. The following 16 tests are not applicable because this implementation 
does not support a predefined type LONG_INTEGER: 


C45231C 

C45304C 

C45502C C45503C 

C4!^504C 

C45504F 

C45611C 

C45613C C45ei4C 

C45631C 

C45632C 

CD7101F 

B52004D 

C55B07A B55B09C 

B86001W 

d. C45531M..P 

(4 tests) and 

C45532M..P (4 tests) 

are not applicable 

because the 

value of SYSTEM, 

.MAX_MANTISSA is less than 47. 


e. B86001Y is not applicable because this implementation supports no 

predefined fixed-point type other than DURATION. 

f. B86001Z is not applicable because this implementation supports no 

predefined floating-point type with a name other than FLOAT, 
L0NG_FL0AT, or SHORT_FLOAT. 

g. C86001F is not applicable because, for this implementation, the package 

TEXT_IO is dependent upon package SYSTEM. These tests recompile 

package SYSTEM, making package TEXT_I0, and hence package REPORT, 
obsolete. 

h. C96005B is not applicable because there are no values of type 

DURATION'BASE that are outside the range of DURATION. 

i. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) are 
not applicable because this implementation does not support size 
clauses for floating point types. 

j. CD2A61I and CD2A61J are not applicable because this implementation does 

not support size clauses for array types, which imply compression, with 
component types of composite or floating point types. This 

implementation requires an explicit size clause on the component type. 

k. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for access 
types. 

l. CD2A91A..E (5 tests), CD5012J, CD5013S, and CD5014S are not applicable 
because this implementation does not support size clauses for tasks or 
task types. 

m. The following 42 tests are not applicable because this implementation 
does not support an address clause when a dynamic address is applied to 
a variable requiring initialization: 

CD5003B..H CD5011A..H CD5011L..N CD5011Q 


3-3 











TEST INFORMATION 


CD5011R C1)5012A. .1 CD5012L CD5013B 

CD5013D CD5013F CD5013H CD5013L 

CD5013N CD5013R CD5014T..X 

n. CE2102D is inapplicable because this implementation supports CREATE 

with IN_FILE mode for SEX3UENTIAL_I0. 

0 . CE2102E is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for SEQUENTIAL_IO. 

p. CE2102F is inapplicable because this implementation supports CREATE 

with INOUT_FILE mode for DIRECT_IO. 

q. CE2102I is inapplicable because this implementation supports CREATE 

with IN_FILE mode for DIRECT_IO. 

r. CE2102J is inapplicable because this implementation supports CREATE 

with OUT__FILE mode for DIRECT_IO. 

s. CE2102N is inapplicable because this implementation supports OPEN with 
IN_FILE mode for SEQUENTIAL_IO. 

t. CE21020 is inapplicable because this implementation supports RESET with 
IN_FILE mode for SEQUENTIAL__IO. 

u. CE2102P is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for SEQUENTIAL_IO. 

V. CE2102Q is inapplicable because this implementation supports RESET with 
OUTJFILE mode for SEQUENTIAL_IO. 

w. CE2102R is inapplicable because this implementation supports OPEN with 
INOUT_FILE mode for DIRECT_IO. 

X. CE2102S is inapplicable because this implementation supports RESET with 
INOUT_FILE mode for DIRECT_IO. 

y. CE2102T is inapplicable because this implementation supports OPEN with 
IN_FILE mode for DIRECT_IO. 

z. CE2102U is inapplicable because this implementation supports RESET with 
IN_FILE mode for DIRECT_IO. 

aa. CE2102V is inapplicable because this implementation supports open with 
OUT_FILE mode for DIRECT_IO. 

ab. CE2102W is inapplicable because this implementation supports RESET with 
OUT_FILE mode for DIRECT_IO. 

ac. CE3102E is inapplicable because this implementation supports CREATE 
with IN_F‘,LE mode for text files. 

ad. CE3102F is inapplicable because this implementation supports RESET for 


3-4 









TEST INFORMATION 


text files. 

ae. CE3102G is inapplicable because this implementation supports deletion 
of an external file for text files. 

af. CE3'I02I is inapplicable because this implementation supports CREATE 
with OUT_FILE mode for text files. 

ag. CE31Q2J is inapplicable because this implementation supports OPEN with 
IN_FILE mode for text files. 

ah. CE3102K is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for text files. 

ai. CE3115A is not applicable because resetting of an external file with 
OUT_FILE mode is not supported with multiple internal files associated 
with the same external file when they have different modes. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, processing, 
or evaluation in order to compensate for legitimate implementation behavior. 
Modifications are made by the AVF in cases where legitimate implementation 
behavior prevents the successful completion of an (otherwise) applicable test. 
Examples of such modifications include: adding a length clause to alter the 
default size of a collection; splitting a Class B test into subtests so that all 
errors are detected; and confirming that messages produced by an executable test 
demonstrate conforming behavior that wasn’t anticipated by the test (such as 
raising one exception instead of another). 

Modifications were required for 10 tests. 

The following tests were split because syntax errors at one point resulted in 
the compiler not detecting other errors in the test: 

B2U009A B33301B B38003A B38003E B38009A B38009B 

B41202A B91001H BC1303F BC3005E 


3.7 ADDITIONAL TESTING INFORMATION 


3-5 












TEST INFORMATION 


3-7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the 
VADS VAX UNIX->68K was submitted to the AVF by the applicant for review. 
Analysis of these results demonstrated that the compiler successfully passed all 
applicable tests, and the compiler exhibited the expected behavior on all 
inapplicable tests. 


3.7.2 Test Method 

Testing of the VADS VAX UNIX->68 k using ACVC Version 1.10 was conducted on-site 
by a validation team from the AVF. The configuration in which the testing was 
performed is described by the following designations of hardware and software 
components: 

Host computer: DEC VAX-11/750 

Host operating system: UNIX ^.3 BSD 

Target computer: Tektronix 85^1 Bnulator 

(MV 68020 Support System) using 
TEKDB Version 5-01 emulation software 
Compiler: VADS VAX UNIX->68K, Version 5.7 

The host and target computers were linked via ETHERNET. 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of implementation-specific 
values were customized before being written to the magnetic tape. Tests 
requiring modifications during the prevalidation testing were included in their 
modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the host computer. 

After the test files were loaded to disk, the full set of tests was compiled and 
linked on the DEC VAX-11/750, then all executable images were transferred to the 
Tektronix 8541 Emulator (MV 68020 Support System) via ETHERNET and run. Results 
were printed from the from the host computer. 

The compiler was tested using command scripts provided by Verdix Corporation and 
reviewed by the validation team. The compiler was tested using the following 
default option settings: 

OPTION EFFECT 


-01 Level one optimization. 

-S No suppression. 


3-6 







TEST INFORMATION 


The fcllo*/ing option settings were used instead of the defaults: 
OPTION EFFECT 


-w 


Suppress generation of warning messages. 


Tests were compiled, linked, and executed (aa appropriate) using 2 host 
computers and 1 target computer. Test output, compilation listings, and job 
logs were captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team were also archived. 


3 . 7.3 Teat Site 

Testing was conducted at Aloha OR and was completed on 31 March 1989 . 


3-7 












APPENDIX A 


DECLARATION OF CONFORMANCE 


Verdix Corporation has submitted the following Declaration 
of Conformance concerning the VADS VAX UNIX->68F.. 




DecujULTiai OP co g owu jg 


CoBpilcr IapI«9«ator: vbbdzx corporation 

Ada Validation Facility: ASD/SCS.* Hrl^t-Pattanoo AFB OB A5A33-6503 
Ada Conpilar Validation Capability (ACTC) Vanieo: 1.10 


Baao Conpilor Hmo: vads vax unix 68k Vaniont 
Boat Architaetura ISA: vax 11/750 OSAVEB #: 

TarfOt Arehitoctur# ISA: Tektronix 8541 OSAVEB #; TEKDB 5.01 

Emulator (MV 68020 
Support System) 

ZfeplaMatar*a Doolarntion 

I, ttia undoraignod* roproaontlnc vnoxx corp. 't laplanontod no doliboraU 

•xtansiona to tba Ada languagt Standard ABSI/KXL-STD-1815A la ttao ooapilarCa) 
in this declaration. Z doclara that vsbdzz la the owner of record of the Ada 
laacuagc eoBpilar<a) liated above and, aa aneh, ia reaponaible for said 

ccnpilerCa) ia confomaace to ANSI/KZL-STD-181SA. All eertiflcatea and regiatrationa 
for Ada laaguaga ooapilerCa) liated ia thia declaration ahall bo aade only ia the 


Revised 4/10/89 Original 2/13/89 


Ada P r o d ucte Division 




Z» the oaderaigaedt repreaentlng vkbozx taJee fttU respoaaibllity for lapi 
and aalntenanee of the Ada eaKpller(a} listed above, and agree to 
diaelonure of the flaal Validatloa SiHary Beport. Z declare that all of 
language coapUera liated, aad thalr hoet/targK perforaaace are ia eenp' * 
the Ada Language Standard AIBZ/1QX,-SZI^1815A» 


Revised 4/10/89 Original 2/13/B9 


tioa 
public 
the Ada 
with 



StepUbo P. Sciglf 
Vice-President 
Ada Prodneta Division 













APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the VADS VAX UNIX->68K, Version 5.7, as described in 
this Appendix, are provided by Verdix Corporation. Unless specifically 
noted otherwise, references in this Appendix are to compiler documentation 
and not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -21*47483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 15 remge 

-16#0.1FFFFFFFFFFFFF#E1024 .. 16#0.1FFFFFFFFFFFFF#E1024; 
type SH0RT_FL0AT is digits 6 range -16)?0.FFFFFF#E128 .. 16#0.FFFFFF#E128; 

type DURATION is delta 0.001 range -2147483.648 .. 2147483.647; 


end STANDARD; 


B-1 









APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as progma INLINE, indicates to die compile." 
that the subprogram must always be inlined This pragma also suppresses the generanun oi a callable 
version of the routine which save code space. 

1.2. BUILTJN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada packages, but provides 
no user access. It is used only to implement code bodies for which no actual Ada body can be pro¬ 
vided, for example the MACHINE_CODE package. 

IJ. SHARE_CODE Pragma 

The SHARE_^CODE pragma takes the name of a generic instantiation or a generic unit as the first argu¬ 
ment and one of the identifiers TRUE or FALSE as the second argument. This pragma is only allowed 
immediately at the place of a declarative item in a declarative pan or package specification, or after a 
library unit in a compilation, but before any subsequent compilation unic 

When the first argument is a generic unit the pragma applies to all insDniiations of that generic. \\’hen 
the first argument is the name of a generic instantiation the pragma applies only to the specified instan¬ 
tiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated for a generic instantia¬ 
tion with code generated for other instantiations of the same generic. When the second argument is 
FALSE each instantiation will get a unique copy of the generated code. The extent to which code is 
shared between instantiations depends on this pragma and the kind of generic formal parameters 
declared for the generic unit. 

The name pragma SHARE_BODY is also recognized by the implementation and has the same effect as 
SHARE_CODE. It is included for compatability with earlier versions of VADS. 

1,4. NO_IMAGE Pragma 

The pragma suppresses the gene.'ation of the image array used for the EvlACE attribute of enumeration 
types. This eliminates the overhead required to store the array in the executable image. 

Ij. EXTERNAL_NAME Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or variable defined in Ada and 
allows the user to specify a different external name that may be used to reference the entity from other 
languages. The pragma is allowed at the place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package specification. 

1.6. INTERFACE NAME Pragma 

The IN'rERFACE_NAME pragma takes the name of a a variable defined in another language and 
allows it to be referenced directly in Ada. The pragma will replace all occurrences of the variable 
name with an external reference to the second, link_argument. The pragma is allowed at the place of a 
declarative item in a package specification and must apply to an object declared earlier in the same 
pxkage specification. The object must be declared as a scalar or an access type. The object cannot be 
any of the following: 

a loop variable, 
a constant. 


B-2 









an initialized variable, 
an array, or 
a record. 

1.7. IMPLIClT_CODE Pragma 

Takes one of the identihers ON or OFF as the single argument This prui;ma is only allowed within a 
machine code procedure. It specifies that implicit code generated by the compiler be allowed or disal¬ 
lowed. A warning is issued if OFF is used and any implicit code needs to be generated. The default is 
ON. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

23 . INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

This pragma supports calls to ’C* and FORTRAN functions. The Ada subf'rograms can be either func¬ 
tions or procedures. The types of parameters and the result type for functions must be scalar, access or 
the predefined type ADDRESS in SYSTEM. All parameters must have mode IN. Record and array 
objects can be passed by reference using the ADDRESS attribute. 

2j. list 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.6. MEMOF.Y^SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
nuxlified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. NON_REENTRANT 

This pragma takes one argument which can be the name of either a library subprogram or a subprogram 
declared immediately within a library package spec or body. It indicates to the compiler that the sub¬ 
program will not be called recursively allowing the compiler to perform specific optimizations. The 
pragma can be applied to a subprogram or a set of overloaded subprograsm within a package spec or 
package body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specification. It indicates that the package will not 
be elaborated because it is either part of the RTS, a configuration package or an Ada package that is 
referenced from a language other than Ada. The presence of this pragma suppresses the generation of 
elaboration code and issues warnings if elaboration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 


B-3 



2.10. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite types. It will 
not causes objects to be packed at the bit level. 

2.11. PAGE 

This pragma is implen*ented as described in Appendix B of the Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 

This pragma Pragma passive can be applied to a task or task type declared immediately within a library- 
package spec or body. The pragma directs the compiler to optimize certain tasking operations. It is 
possible that the statements in a task body will prevent the intended optimization, in these cases a warn¬ 
ing will be generated at compile time and will raise TASKING_ERROR at runtime. 

2.13. PRIORITi' 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no effect 

2.15. STORAGE_UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that RA.NGE_CHECK and D1VIS10N_CHECK can- 
no: oe supressed. ~ 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The implementation does not allow SYSTEM to be 
modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3.1. P’REF 

For a prefix that denotes an object, a program unit, a label, or an entry: 

This attribute denotes the effective address of the first of the storage units allocated to P. For a subpro¬ 
gram, package, task unit, or label, it refers to the address of the machine code associated with the 
corresponding body or statement. For an entry for which an address clause has been given, it refers to 
the corresponding hardware interrupt. The attribute is of the type OPERAND defined in the package 
MACHINE_CODE. The attribute is only allowed within a machine code procedure. 

See section F.4.8 for more information on the use of this attribute. 

(For a package, task unit, or entry, the ’REF attribute is not supported.) 












4. Specification Of Package SYSTEM 


•ilh UNS1 0NED_ TYPES; 
pt«kagc SYSTCM i% 

pri|H» •ipprcs»(ALL Q£CKS): 
prtm •■ppr«t«(EXCEmC»<_TABlJES); 
prtpHi aot^cltbottictf: 

typt it ( VAX_CROSS_680XO ); 

SYSTEM^hUNC : coot lint NANC VAX_C»OSS_6«OXC; 

STORACC^UHtT : coot ttot :> 8; 

M&)ORY^S!2£ : coatttoi 16_7?7_216. 

•• Syttcm^Dcpendcot Ntmcd Numbeit 

MIN^INT : cootttnt 

MCC IVT : cootttnt 

KIO(*DlCITS : eootitot 

MCC'MASTISSA : eootitot 31: 

FINE^DCLTA : eootitot 

TIOC coot I to t 

•• Other Syiicm*dcpcodcoi Dceltrttioot 

loblypc PRIORITY it If^GER rtoic 0 .. 99; 

MAX_R£C_SIZE : inteter :■> 1024; 

type ADDRESS it priettc; 

fonelioo (A: ADDRESS; B: ADDRESS^ return BOOLEAN; 

fttociioa "<" (A: AOCXIESS; B: >tfX)R£SS) rciarn BOOLEAN; 

functieo *>-*‘(A: ADDRESS; B: ADORESSl return BOOLEAN; 

fooetioo "o’CA: ADDRESS; B: ADDRESS) return BOOLEAN; 

fnociioo *•*' (A: ADDRESS: B: ADDRESS) return INTEGER; 

rooeiioo (A: ADDRESS; I: INTEGER) return ADDRESS; 

fooetioo "•’* (A: ADDRESS: I: INTEGER) return ADDRESS; 

fonction (I: UNSIGSED^TYPES .CNSIGMX)_ INTEGER) return .\DaRj:SS; 

fooetioo \OC«Y ADDRESS 

(I: t^SIGNED^TYPES-UNSiasED.INTECER) return ADDRESS tceuoct 
NO.ADDR : eootitot ADDRESS; 

pr iutit 

type ADDRESS it new UNSIG>ED^TYPES.L>iSIGNXD_INTEGER; < 

NO^ACOR : const to 1 ADDRESS :• 0; 

prtfBM BUILT IN(*>'); 
prtiM BUILT 1N(*<*); 
prifBt BUILT~1N(*>«*); 
prifBO BUILT^INC^-”); 
prtfoi BUILT“iN(---); 
prtgn BUILT^INC-.’); 

«od SYSTEM; 


5. Restrictions On Representation Clauses 


5.1. Pragma PACK 

In the absence of pragma PACK record components are padded so as to provide for efficient access bv 
the target hardware, pragma PACK applied to a record eliminate the padding where possible. Pragma 
Pack has no other effect on the storage allocated for record components a record representation is 
required. 

5.2. Record Representation Clauses 

For scalar types a represenation clause will pack to the number of bits required to represent the range of 
the subtype. A record representation applied to a composite type will not cause ihe object to be packed 
to fit in the space required. An explicit representation clause must be given for die component type. An 
error will be issued if there is insufficient space allocated. 


-2 147 483 648; 
2 T47 483 647; 

15; 

:.0**(.31); 

O.Ol ; 


B-5 













53. Address Clauses 

Address clauses are supported for variables and constants. 

5.4. Interrupts 

Interupt entries are not supported. 

53. Representation Attributes 

The ADDRESS attribute is not supported for the following entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACH1NE_C0DE provides an assembly language interface for 
the target machine. It provides the necessary record type(s) needed in the code sDtement. an enumera¬ 
tion type of all the opcode mneumonics, a set of register definitions, and a set of addressing mode func¬ 
tions. 

The general syntax of a machine code statement is as follows: 

CODE n’( opcode, operand {, operand] ); 
where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. The operands are listed within a subaggregate. 
The format is as follows: 

CODE_N’( opcode, (operand {, operand]) ); 

For those opcodes that require no operands, named notation must be used (cf. RM 4.3(4)). 

CODE_0’( op »> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CODE or the ’REF attribute. 

The arguments to any of the functions defined in MACHINE_CODE must be static expressions, string 
literals, or the functions defined in MACHINE_C0DE. The ’REF attribute may not be used as an argu¬ 
ment in any of these functions. 

Inline expansion of machine code procedures is supported. 


B-6 





6. Conventions for Implemenution-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 
Address clauses are supported for constants and variables. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocation 
None. 


10. Implementation Characteristics of I/O Packages 

Insuntiations of DIRECT 10 use the value MAX_REC_SIZE as the record size (expressed in 
STORAGE_UNrTS) when the size of ELEMENT TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SIZE is very large, MAX_REC_SIZE is used 
instead. Mi^_RECORD SIZE is defined in SYSTEM and can be changed by a program before 
instantiating DIRECTT 10 to provide an upper limit on the record size. In any case the maximum size 
supponed is 1024 x 1024 x STORAGE_UNIT bits. DIRECTJO will raise USE_ERROR if 
MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_10 use the value MAX_REC_SIZE as the record size (expressed in 
STORAGE_UNITS) when the size of ELEMENT TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE’SIZE is very large, MAX_REC_S1ZE is used 
instead. MAX_REC0RD_si2E is defined in SYSTEM and can be changed by a program before 
insuntiating INTEGER ICJto provide an upper limit on the record size. SEQUE.NT1AL 10 imposes no 
limit on M.AX_REC_Si^. 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply that 
resources up to or even near these limits are available to every program. 


11.1. Line Length 

The implementation supports a maximum line length of 500 characters including the end of line charac¬ 
ter. 


11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 4.(X)0.000 x STORAGE_UNITS. The maximum 
size of a suticaily sized record type is 4.000,000 x STORAGE_UNITS. A record type or array type 
declaration that exceeds these limits will generate a warning message. 

lU. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SlZE length specification every task except the main program 
is allocated a fixed size stack of 10,240 STORAGE_UNITS. This is the value returned by 
T’ST0RAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE^SIZE length attribute the default collection size for an access 
type is 100 times the size of the designated type. This is the value returned by TSTOKaGE_S 1ZE for 


B-7 










an access type T. 


113. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNrTS for objects declared statically within a 
compilation unit If this value is exceeded the compiler will terminate the compilation of the unn with a 
FATAL error message. 


B-8 










APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 


$BIG_ID1 (1..498 => ’A’,499 => '1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 (1..498 => »A',499 => ’2*) 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 

An identifier the size of the 
maximuoD input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..249 => ’A’,250 => *3’, 
251..499 => ’A’) 


C-1 








TEST PARAMETERr 


Name and Meaninp __ Value 


$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a Character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG STRING' yields the image of 

big“idi. 

$BLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A universal integer 

literal whose value is 
TEXT_IO.COUNT’LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


(1..249 => ’A’,250 => *4', 
251..499 => 'A') 


(I..496 => ’O',497..499 => "298”) 


(I ..493 => 'O', 494..499 => " 69 .OEI'') 


(1 => '"',2..200 => 'A',201 => ’"') 


(1 => '"’,2 ..300 => 'A ',301 => '1', 

302 s> ’"’) 


(I..479 => ' ') 


2147483647 


16777216 


C-2 










TEST PARAMETERS 


Name and Meaning _ 

$DEFAULT_SYS_NAME 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal whose value is 
TEXT_IO.FIELD'LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME 

The naune of a predefined 
floating-point type other than 
FLOAT, SHORT_FLOAT, or 

LONG^FLOAT. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE*LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN__DURATION_BASE_LAST 

A universal real literal that is 
greater than DURATION’BASE'LAST. 

$HIGH__PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 


Value _ 

VAX_CROSS_680X0 

0.000000000^)6566': 2B'’307?3925'’Sl 25 

2147483647 

N0_SUCH_TYPE 

N0_SUCH_TYPE 

100000.0 

10000000.0 

99 

/illegal/file name/2)]$?2102C.DAT 


$ILLEGAL_EXTERNAL_FILE_NAME2 /illegal/file_name/CE2102C».DAT 

An external file name which 
is too long. 

$INTEGER_FIRST -2147483648 

A universal integer literal 
whose value is INTEGER'FIRST. 


C-3 










TEST PARAMETERS 


Name and Meaning _ Value _ 

$INTEGER_LAST 214748364? 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 2147483648 

A universal integer literal 

whose value is INTEGER’LAST + 1. 


$LESS_THAN_DURATION -100000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THANJDURATION_BASE_FIRST -10000000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 


$L0W_PRI0RITy 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA__D0C 31 

An integer literal whose value 
is SYSTEM.MAX MANTISSA. 


$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 499 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX INT. 


$MAX_INT_PLUSJ 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


$MAX_LEN_INT_BASED_LITERAL (1..2 => "2:", 

A universal integer based 497..499 => " 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 


3..496 => 'O', 
11 ;") 





TEST PARAMETERS 


Name and Meaning 


Value 


$MAX_LEN_REA L_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enougn leading zeroes in the 
mantissa tc be MAX_IN_LEN long. 

$MAX_STP.ING_LITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT INTEGER, 

LONG_FLOAT, or LONG“iNTKER. 

$NAME_LIST 

A list of enuneration literals 
in the type SYSTEM. NAME, 
separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEW_MEM_SI2E 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT MEM SIZE. 


(1..3 => "16;",M..U95 => ’0*, 

1^96. .U99 => "F.E:",' 

(1 => '"',2 ..498 => 'A’,499 => "" 

-2147483648 

32 

TINY_INTEGER 

VAX_CR0SS_680X0 

16#FFFFFFFD# 

16777216 









TEST PARAMETERS 


Name and Meaning 


Value 


$NEW_STOR_UNIT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE UNIT. 


$NEW_SYS_NAME VAX_CROSS_680X0 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one *IN OUT’ 
parameter. 


$TICK 0.01 

A real literal whose value is 
SYSTEM.TICK. 


C-6 








APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 43 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C has been withdrawn because it expects that the string "— 
TOP OF PAGE. —63" of line 204 will appear at the top of the 
listing page due to a pragma PAGE in line 203; but line 203 
contains text that follows the pragma, and it is this that must 
appear at the top of the page. 

b. A39005G has been withdrawn because it unreasonably expects a 

component clause to pack an array component into a minimum size 
(line 30). 

0 . B97102E has been withdrawn because it contains an unintended 

illegality: a select statement contains a null statement at the 
place of a selective wait alternative (line 31). 

d. BC3009B has been withdrawn because it wrongly expects that 

circular instantiations will be detected in several compilation 
units even though none of the units is illegal with respect to the 
units it depends on; by AI-00256, the illegality need not be 

detected until execution is attempted (line 95). 

e. CD2A62D has been withdrawn because it wrongly requires that an 
array object's size be no greater than 10, although its subtype's 
size was specified to be 40 (line 137). 

f. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] have 

been withdrawn because they wrongly attempt to check the size of 
objects of a derived type (for which a 'SIZE length clause is 
given) by passing them to a derived sub-program (which implicitly 
converts them to the parent type (Ada standard 3.4:14)). 
Additionally, they use the 'SIZE length clause and attribute. 


D-1 












WITHDRAWN TESTS 


whose interpretation is considered problematic by the WG9 ARG. 

g. CD2A81G, CD2A83G, CD2A8MM and N, and CD50110 have been withdrawn 
because tney assume that depenaent taslcs will terminate while the 
main program executes a loop that simply tests for task 
termination; this is not the case, and the main program may loop 
indefinitely (lines 74, 85, 86 and 96, 86 and 96, and 58, 
respectively). 

h. CD2B15C and CD7205C have been withdrawn because they expect that a 
'STORAGE_SIZE length clause provides precise control over the 
number of designated objects in a collection; the Ada standard 
13 *2:15 allows that such control must not be expected. 

1. CD2D11B has been withdrawn because it gives a SMALL representation 
clause for a derived fixed-point type (at line 30) that defines a 
set of model numbers that are not necessarily represented in the 
parent type; by Commentary Al-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

j. CD5007B has been withdrawn because it wrongly expects an 
implicitly declared subprogram to be at the the address that is 
specified for an unrelated subprogram (line 303). 

k. ED7004B, ED7005C and D, ED7006C and D [5 tests] have been 

withdrawn because they check various aspects of the use of the 
three SYSTEM pragmas; the AVO withdraws these tests as being 
inappropriate for validation. 

l. CD7105A has been withdrawn because it requires that successive 
calls to CALENDAR.CLOCK change by at least SYSTEM.TICK; however, 
by Commentary AI-00201, it is only the expected frequency of 
change that must be at least SYSTEM.TICK—particular instances of 
change may be less (line 29). 

m. CD7203B and CD7204E have been withdrawn because they use the 'SIZE 
length clause and attribute, whose interpretation is considered 
problematic by the WG9 ARG. 

n. CD7205D has been withdrawn because it checks an invalid test 
objective: it treats the specification of storage to be reserved 
for a task's activation as though it were like the specification 
of storage for a collection. 

o. CE2107I has been withdrawn because it requires that objects of two 
similar scalar types be distinguished when read from a 
file—DATA_ERR0R is expected to be raised by an attempt to read 
one object as of the other type. However, it is not clear exactly 
how the Ada standard 14,2.4:4 is to be interpreted; thus, this 
test objective is not considered valid (line 90). 


D-2 











WITHDRAWN TESTS 


p. CE3111C has been withdravm because it requires certain behavior 
when two files are associated with the same external file; 
however, this is not required by the Ada standard. 

q. CE3301A hais been withdrawn because it contains several calls to 
END_OF_LINE and END_OF_PAGE that have no paraueter: these calls 
were intended to specify a file, not to refer to STANDARD_INPUT 
(lines 103, 107, 118, 132, and 136). 

r. CE3411B has been withdrawn because it requires that a text file's 
column number be set to COUNT'LAST in order to check that 
LAY0UT_ERR0R is raised by a subsequent PUT operation. But the 
former operation will generally raise an exception due to a lack 
of available disk space, and the test would thiis encumber 
validation testing. 


D-3 








