GC21-7514-2 
File No. S3-28 



M.to RPG II 
Report Writing 



GC21-7514-2 
File No. S3-28 



Introduction to RPG II 
Systems Report Writing 



Third Edition (July 1978) 

This is a major revision of, and obsoletes, GC21-7514-1. Major changes include 
using the latest level specification forms and updating the terminology. 

Changes are periodically made to the information herein; before using this 
publication in connection with the operation of IBM systems, be sure you have 
the latest edition and any technical newsletters. 

This publication contains examples of data and reports used in daily business 
operations. To illustrate them as completely as possible, the examples include 
names of individuals, companies, brands, and products. All of these names are 
fictitious and any similarity to the names and addresses used by an actual 
busine.ss enterprise is entirely coincidental. Use this publication only for the 
purpose stated in the Preface. 

Publications are not stocked at the address below. Requests for copies of IBM 
publications and technical information about the systems should be made to your 
local IBM representative or to the branch office serving your locality. 

This publication could contain technical inaccuracies or typographical errors. Use 
the Reader's Comment Form at the back of this publication to make comments 
about this publication. If the form has been removed, address your comments to 
IBM Corporation, Publications, Department 245, Rochester, Minnesota 55901. 
IBM may use and distribute any of the information you supply in any way it 
believes appropriate without incurring any obligation whatever. You may, of 
course, continue to use the the information you supply. 



© Copyright International Business Machines Corporation 1971, 1978 



Preface 



This book is intended for persons who want to learn to 
write programs which will produce printed reports using 
the RPG II language. The book is designed to be used 
by a person with no previous knowledge of computers 
and programming, or by a person who already knows a 
programming language but wants to learn about report 
writing in RPG II. 

After reading this book, you should not expect to be 
able to write complex RPG II programs. You will be 
introduced to only a small part of RPG II. Many 
important features in RPG II are not discussed in this 
manual. The RPG II reference manual for your system 
contains all of the information about RPG II features on 
your system. You should have gained enough 
background knowledge so that you can readily learn 
more detailed information-either from reference 
manuals, classes, or IBM personnel-which is required 
for writing programs for your system. 



How This Manual Is Organized 

The first chapter describes, in general terms, how a 
system operates and the things you must do to run a 
particular job. The information presented should answer 
such questions as: 

• What are the parts of a data processing system? 

• What is a program? 

• What is a programming language? 

• What is an RPG II program? 

• How is an RPG II program run on a system? 



The second chapter describes the RPG II program cycle 
and the RPG II specifications you must write to do a 
particular task. The material in this chapter is arranged 
to provide a gradual development of concepts, 
proceeding from the simple to the more complex. Thus, 
it is important to read the material in sequence. Sample 
jobs are used to illustrate the concepts presented. 

The third chapter explains an RPG II programmer's job 
more fully. It shows, by means of a sample job, the 
things a programmer must do from the start of a job to 
its completion. 



RPG II Coding Forms 

Following is a list of forms used to code and debug 
RPG II programs. Contact your local IBM branch office 
to order any of these materials: 

• RPG Control and File Description Specifications, 
GX21-9092 

. RPG Input Specifications, GX21-9094 

• RPG Calculation Specifications, GX21-9093 

• RPG Output Specifications, GX21 -9090 
. RPG Indicator Summary, GX21-9095 

. RPG Debugging Template, GX21-9129 
. Printer Spacing Chart, X20-1776 

• Record Layout Form, X21 -9088 

. Disk File Layout Chart, GX21-9108 
. Printer/ Display Layout, GX21-9174 



Contents 



CHAPTER 1. BASIC DATA PROCESSING AND 
PROGRAMMING CONCEPTS 

Parts of a Data Processing System 

Input Devices 

Output Devices 

Processing Unit 

Programs and Programming Languages 3 

Source Programs 3 

Source Programs to Object Programs 5 

Summary 6 

Data Processing Terms and Programming Aids 7 



CHAPTER 2. RPG II PROGRAMMING LANGUAGE . . 11 

RPG II PR0t5RAM CYCLE 11 

WRITING SPECIFICATIONS FOR INPUT AND 

OUTPUT OPERATIONS 14 

Program Cycle Operations 14 

Describing the Files 16 

File Names 17 

Device Designation 18 

File Use 18 

File Designation 18 

Record Size 19 

Describing Input Records 20 

File Names 21 

Field Names 22 

Field Location 24 

Type of Data 24 

Describing Output Records 25 

File Names 26 

Record Type 27 

Field Names 29 

Field Location 29 

Printed Reports 30 

Spacing 30 

Skipping 31 

Editing 33 

Job 1 (TRNREG): Printing a Simple Report Using the 

Three Basic Cycle Operations 36 

Job Definition 36 

Job Requirements 37 

Job Specifications 38 

WRITING SPECIFICATIONS FOR 

CALCULATION OPERATIONS 40 

Program Cycle Operations 40 

Describing Type of Operation 42 

Describing Data to be Used 42 

Describing the Result Field 45 

Result Field Length 47 

Decimal Positions 47 

Half-Adjusting Results (Rounding) 47 

Job 2 (TRNREG): Doing Simple Calculations 49 

Job Definition 49 

Job Requirements 50 

Job Specifications 51 

WRITING SPECIFICATIONS FOR INDICATORS 53 

Control level Indicators 54 

Program Cycle Operations 56 



RPG II Specifications 57 

Using the Blank-After Specification 59 

Job 3 (TRNREG); Using Control Level Indicators to 

Calculate and Print Totals 60 

Job Definition 60 

Job Requirements 61 

Job Specifications 62 

First Page Indicator 64 

Program Cycle Operations 65 

RPG II Specifications 66 

Overflow Indicators 68 

Program Cycle Operations 70 

RPG II Specifications 72 

Using Spacing with Overflow 72 

Using Overflow and IP Indicators Together 74 

Last Record (LR) Indicator 74 

Program Cycle Operations 75 

RPG II Specifications 76 

Job 4 (TRNREG): Using First Page, Overflow, and 
Last Record Indicators to Print 

Headings and Totals 77 

Job Definition 77 

Job Requirements 77 

Job Specifications 79 

Record Identifying Indicators 81 

Program Cycle Operations 82 

RPG II Specifications 83 

Specifying Record Identification Codes 85 

Specifying Record Identifying Indicators 86 

Specifying Record Type Sequence 87 

Job 5 (STOKST): Using Record Identifying Indicators 

to Process Different Record Types 89 

Job Definition 89 

Job Requirements 89 

Job Specifications 92 

Resulting Indicators 96 

Program Cycle Operations 96 

RPG II Specifications 98 

Using the Compare Operation 99 

Using an Arithmetic Operation 102 

Job 6 (STOKST): Using Resulting Indicators to 

Test Contents of Result Fields 105 

Job Definition 105 

Job Requirements 105 

Job Specifications 108 

Field Indicators 1 1 1 

Program Cycle Operations 1 1 1 

RPG II Specifications 112 

Job 7 (AGETB): Using Field Indicators to 

Test Contents of Input Fields 114 

Job Definition 114 

Job Requirements H^ 

Job Specifications 116 

Conditioning Operations by More Than 

One Indicator 118 



Contents 



CHAPTER 3. THE PROGRAMMER'S JOB 121 

Determining the Job Requirements 122 

Determine RPG II Specifications Needed for the Job . . 127 

Write the Specifications 129 

Document the Program I33 

Prepare for Compilation I34 

Specifications Form Order I34 

Control Specifications Preparation I35 

Checking the Specifications I35 

Compile the Source Program I37 

Test the Program 140 

GLOSSARY 141 

INDEX 145 



Chapter 1. Basic Data Processing and Programming Concepts 



PARTS OF A DATA PROCESSING SYSTEM 

Data processing systems differ widely in appearance, usually consisting of 
several connected units. Regardless of their size or shape, however, all data 
processing systems have common features. 

Data processing systems operate electronically. They are complex machines 
with thousands of circuits and wires. Fortunately, you do not have to 
understand the purpose of each circuit or wire. To write a program which will 
produce a report, all you need to know are the purposes of the main parts of a 
data processing system: the input devices, the output devices, and the 
processing unit. 



Input Devices 

Data you give a system to work with is called input. The device used for 
getting that data into the system is called an input device. Several kinds of 
input devices may be used; among them are card readers, disks, diskettes, 
tapes, and keyboards. For the purposes of this manual, specific input devices 
will not be discussed. Information about the input devices applicable to your 
system is in the RPG II reference manual for your system. 



Output Devices 

Data produced by a system is called output. The device that produces the 
output is called an output device. Several kinds of output devices may be 
used; among them are card punches, disks, diskettes, tapes, printers, and 
display screens. For the purposes of this manual, specific output devices will 
not be discussed. Information about the output devices applicable to your 
system is in the RPG II reference manual for your system. Because this 
manual deals only with report writing in RPG II, we will refer only to printed 
output. 



Processing Unit 

The main part of a data processing system is the processing unit. The 
processing unit can be divided into three sections-storage, control, and 
arithmetic/logic-according to the special function each performs. 



Basic Data Processing and Programming Concepts 1 



storage 



Storage is the systems memory area. This area is divided into many storage 
positions which the system uses to electronically store information. The actual 
number of positions in storage depends upon the size of the storage unit. 
Each storage position has an identifying number called an address. 

A storage address serves the same purpose as a house address. Information is 
sent to and received from these locations. The information can be easily 
retrieved using the address where the information is stored. 



Arithmetic /Logic 

Calculations (such as add, subtract, multiply, and divide) are performed in the 
arithmetic/logic unit. When your instructions tell the system to do an operation 
such as add, the information to be added is transferred from storage to the 
arithmetic/logic unit. The operation is then performed and the result is sent 
back to storage. 



Control 



The control section is the system's decision maker. It retrieves instructions 
from storage, determines what has to be done, and directs other units or 
devices to perform the required operations. 



PROGRAMS AND PROGRAMMING LANGUAGES 

Data processing systems do only what you tell thenn. When you give a system 
instructions, however, it might seem as though the system requires more than 
you would need to do the same job. But remember, a data processing system 
cannot think: it requires explicit instructions, even for those things you would 
do almost without thinking. 

When you are to do a job yourself, you need three basic things: 

• Information to work with (input). 

• Instructions telling you how to work with (process) the information. 

• Additional instructions describing the expected results (output). 

In data processing terms, input is what you put into the system, processing is 
what the system does with the input, and output is the result of processing. 
Every job you run on a system has these three parts. You write instructions to 
describe what you want the system to do with each part. These instructions 
are called a program. 

To communicate with the system, you must use the system's language, or one 
that can be translated into that language. The system's language is called 
machir)e language. It consists of letters, numbers, and symbols that, when 
properly arranged, have a specific meaning to the system and, when 
interpreted by the system, cause it to perform a desired function. 

Because machine language is so very different from our own language, it is 
extremely difficult to use it to write a program. For this reason, programming 
languages have been created. A programming language allows the programmer 
to use familiar words and symbols to write instructions. 

The RPG II programming language is composed of letters, numbers, and 
symbols which you put together to form an instruction (express a thought). 
When creating instructions in the RPG II language, you must follow certain 
rules just as you would when constructing a sentence in English. You will learn 
about these rules in the second part of this manual. 

The set of instructions you write is called a source program. This source 
program is translated by a program called the compiler, resulting in a machine 
language program called the object program. It is the object program that you 
use to do a job. In fact, you can use it over and over to do the same job. 

Source Programs 

The instructions you write for any program must describe the input, processing, 
and output requirements of the job. For example, one instruction might direct 
the system to read an input record, another might specify the adding of two 
numbers, and another may tell the system to print a line on the printer. 
Because all jobs are not the same, you provide a different set of instructions 
(program) for each job. 



Basic Data Processing and Programming Concepts 3 



To write the instructions, you fill out RPG II specification forms (see Figure 1). 
These forms have been specially designed to help you write instructions 
according to the rules of RPG II language. The act of writing instructions on 
these forms is called coding; the entries you make on the forms are called 
spec/7/caf/ons. 



IBM 



RPG OUTPUT SPECIFICATIONS 



Keying [Graphic 



Card Elpclio Numtit 



RPG CALCULATION SPECIFICATIONS 



IBM , . 


,B„..i,.„M«. 


elCo.p 


„„On 
















P.o„jm 


Keying 


Graphic 












Programme' 






Dale 


Key 








. _.i 





Cdri.! Eletlro Numl! 



RPG INPUT SPECIFICATIONS 



IBM . .B 


...,.» Macn,,,. Co,. 








Program 






Kevi"q 


Graphic 










Pr.,grdmme. 




1 Dale 


Key 











-LIJ^ 



i:.X21 90'JO IJMOBir 



/C // /a /9 80 



-'Q]"'^ ^-;ia.i.i[rn:rrj 



?b ?f) ;/ 78 ?9 80 

lden„f„-,„onL_J__l___|_^___|__J 



Gx:n 9034 JM 050' 



!b !lj ! I ?B /9 BO 
- -I l._.L_J l._J 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



ion*l Bunnell Machinei Corp 



Program 


Ksying 
Inttruction 


Graphic 






___ 




__ 


— 


~1 


Card Electro Number 


Progranmer Date 


Key 














" 



Page l I | q< 



Progra 
Idenipl 



Control Specifications 



H 



Size tc 
Cotnpilt 



BULU 



1 






N-mber 
Of Print 
Positioni 



I 



27 2B 29 30 31 32 33 34 35 36 



GX21 9092 UM/050* 
Primed in U.S.A 



75 76 77 78 79 1 



Refer (o the specific Systen 
Library manual for actual e 



57 56 59 60 61 62 63 64 S5 66 67 68 69 70 ) 



File Description Specifications 





p 






















IfHttviW 




Mode of Ptocesiing 


1 


~ 


™ 











— 







— 


— 


— 


— 


— 


1 


— 


— 


— 









_- 


■— 


— 






— 


]— 


File Addition/Unurdered 


■ 


Filename 
7 B 9 10 n 12 n M 


iti 




File Deiignatiort 


28 


Ungth of K*y ?i»bl or 


Devkt* 


Symbolic 
Device 


Name d1 
Label Exit 


Extant Exit 
for DAM 






Line 
3 4 5 


6_^ 


b 

D 

a. 
1^ 






ofRWorttAddranfiMd 








mn 








m 




Sequence 




Record Address Type 




Nu 


nbPr o1 Extents 


18 


— 


mtimtm 


1 

31 


OrQH^ttion 


StOf»9e imJw 




Tape 


1 

21 


Block 

Length 

20 21 22 23 


AwpKf 


8 
1 


r Aet(»tion«l Ar«« 






s 


File 
Condition 


0«ff 


0*v Indicator 


33 J4 


Uwition 


Continualion Lines 


U1 








K 


Option 


EfttfV 





2 














- 


- 






- 






- 
































































1 

1 








































-- 






_ 





3 
































































1 — 









































4 
























- 


- 


- 
























- 


^ 
























































- 





5 



























































































6 














































































































~ 





7 






_j 








— 




















































































_ 








" 




_ 





8 












k- 












































- 




































~ 


1 








■*** 






" 




_ 





9 


































































■* 






















- 































1 















— 
































































~T, 


" 








" 




_ 
























-- 






- 


- 


























- 


- 
























































^ 


N- 








"" 






-- 






r 


h- 




M 














1 — 




























































, 










1_ 




- 




^ 






























tKi 


{■i 


w 


99 


v« 


eg 


cs 


15 


OS 


6¥ 


B» 


I* 


9t 


Sfr 


n 


* 


t* 


iV 


0* 


ee 


K 


iC 


9C 


SE 


fC 


EE 


IE 


IE 


OC 


6; 


8Z Ll 91 52 f£ 


Zl 


{.L 


M 


o; 


61 


81 


a 


91 


gi 


fri 


Cl 


;i 


u 


01 


6 


S 


'— ' 


9 


V 


V 


E 


; 



Figure!. RPG II Specifications Forms 



To describe the input, processing, and output requirements of your job, you 
supply different information on each form. For example, you have to describe 
what your input data is like and specify the device (such as a disk unit) that 
will read it. You also have to describe how the input data is to be processed. 
This includes specifying what type of operations (such as add or subtract) must 
be performed upon the data. Finally you specify what kind of output you want 
(such as a printed report), what information must be included in the output, 
and how that information should be arranged. 

After you have coded the specifications forms, the next step is to get the 
coded information into the system. The system cannot read the coded forms, 
so you must put the specifications into a format that the system can read. 
Depending on your system, you key the specifications onto a diskette, into 
punched cards, or directly into the system. 



Source Programs to Object Programs 

As we said earlier, the system understands only machine language. It cannot 
use a coded program (written in a programming language like RPG II) directly. 
Any program you write in RPG II must be translated into machine language. 
The translator is a program called a compiler. The RPG II Compiler program is 
available from IBM. 

The compiler translates your RPG II specifications (source program) into 
machine language (object program). The translating it does is called 
compilation. Essentially, the compiler performs three functions during 
compilation: 

• It determines what machine instructions are necessary for the system to 
perform the job described by your RPG II specifications. 

• It translates your RPG II specifications into a machine language program. 

• It assigns storage locations to program instructions and data. 



Basic Data Processing and Programming Concepts 5 



Summary 

Figure 2 illustrates the RPG II data processing concepts. 




(Jj Determine the requirements of your job. 
Define the input and printed output. Also 
decide what processing must be done in 
order to get the proper results. 







Output 








Calculation 








Input 








Control 
and File 








Desc 


riptic 


)n 









(2j Write the source program by describing your 
job on the RPG II specification forms. 



Figure 2 (Part 1 of 2). Summary of RPG II Data Processing Concepts 



\3J Key the source program on cards, 
disk, or diskette. 



Keyboard 



(^ The source program In punched //f?'/, 
cards, diskette, or disk is read 
into main storage. v^ 



Main Storage 




Compiler program on disk 



Compiler Program 



Source Program 




© 



5^ The compiler program, read from 
disk into main storage, translates 
the source program into an object 
program. 





Object program l_ . 
on disk 



From disk, diskette, or cards, the ob- 
ject program is read into main storage. 



Main Storage 



Input 
Data files 



Object program in 
punched cards or 
on diskette. 



Object Program 



Data 



Output 
Printed report 



(T) The object program processes the 
data specified by the RPG II pro- 
gram and produces the desired result. 

Figure 2 (Part 2 of 2). Summary of RPG II Data Processing Concepts 

Basic Data Processing and Programming Concepts 7 



DATA PROCESSING TERMS AND PROGRAMMING AIDS 

In the discussion of RPG II, you will find reference to data processing terms 
and programming a^ds. Figure 3 describes some basic programming terms. 
Figure 4 and Figure 5 are examples of some programming aids. 



Disk File 




Field: An area in a record reserved 
and used for a particular item of 
information. 



Record: A group of related fields 



File: A group of related records. 




Record 



Fields 



Fields 



Record 

(A record 
on a printed 
report is 
commonly 
called a 
line.) 



Date 



File (Printed Report) 



Accounts Receivable Register 



Cust 
No 



07/11 7560 

07/11 7632 

07/11 8392 



Figure 3. Basic Programming Terms 

8 



Cust Name 



Fields 



Invoice 
No 



Allstons 06340 

Village Shop 06341 

Ray's Repair 06342 



Invoice 
Amount 

$ 44.32 

148.39 

4.28 




IBM 



INTERNATIONAL BUSINESS MACHINES CORPORATION 



Application 



PROPORTIONAL RECORD LAYOUT FORI 

Type of Records ITEM TRRNSROION H^COHD 



RECORD NAME AND REMARK 



He« CD 



CZI 






b 6 10 



OB or 



10 14 




33 3? 



Order 



Or<J<sr 






I7l£A/| 
NUMBER 



'TEM DESCRIPTZO/V 



LIST 
PRICE 



SELLIWG. 
PRICE 



V 



' I 1 ■ I 



I 



I 



I 



The record layout form shows what records in a file look like. This form is filled out at 
the time a file is designed. It shows what fields are in the record (i) and the exact loca- 
tion and length of each Q) . It may also show field names and explain what kind of data 
is in each field (T) . 

There are different record layout forms for disk, 80 column cards, 96 column cards, and 
tape. The form shown above is the Proportional Record Layout form. 



Ill I I I I I ' I 



_L_l I'll I 1 I I— I Lj I I u. 



-L_l — 1—1 I 1 I I 1_J I I 1 



_I ' ' ■ 1 I Lj I I I I I I L 



Hex. □ 



DA OF 



Dee. C3 



15 19 



'Two numbering arrangements, eacri in hexadecimal and decimal notation, are shown Select the arrangement and notation used by checking the appropriate box 
IThe number of forms per pad may vary slightly 

Figure 4. Record Layout Form 



50 54 



Basic Data Processing and Programming Concepts 9 



»OG. ID. 

CHARACTERS PER INCH, ( LINES PER VERTICAL INCH) 



PAGE . 
DATE. 



- Fold bock oi dortcd lini 




The printer spacing chart indicates what a printed report should look like by showing what 
information is included in the report and how that information is organized. It shows how 
many different lines are needed © , what spacing is required between lines © , what 
information to include in the lines © , and the exact location of that information © . 
You determine where to place information by the numbers at the top of the form. These 
numbers correspond to print positions on the printer. Any heading information is printed 
in spaces corresponding to the desired print positions ® . Xs are used to show where 
data is tobe printed © . Field names are entered under the Xs to indicate what field is 
shown © . Any punctuation to be used is also indicated on the chart © . (You could 
also use the Printer/Display Layout Form, GX21-9174, to show the format of a printed 
report.) 



Figure 5, Printer Spacing Chart 



10 



Chapter 2. RPG II Programming Language 



RPG II Program Cycle 

When you do any job, you must do it in a particular order. The system must 
also do its job in a particular order. This logical order for the job is supplied by 
the RPG II compiler and/or your coding. 

The logic the compiler supplies is called a program cycle (see Figure 6). The 
object program goes through this cycle of operations every time a record is 
processed. Depending on your specifications, the object program may or may 
not use a particular operation in the cycle. However, the program still goes 
through the complete program cycle every time. Because one program cycle is 
needed for each record read, many program cycles are required for every job. 



RPG II Programming Language 11 



START 



<3 



Perform detail 
calculations. 
Set resulting 
indicators. 







Perform heading 
operations. 
Perform detail 
output operations. 
If overflow line 
has been reached, 
set on overflow 
indicator. 



Move data from record selected at 
beginning of cycle into processing area. 
Set field indicators. 



i^ 



Overflow indicator on? Yes, do 
overflow operations and set 
overflow indicator off. 



Program 
Cycle 



LR indicator on? Yes, end of 
job has been reached. 



xp- 



Perform total output operations. 
If overflow line has been reached, 
set on overflow indicator. 



Set off control 
level indicators. 
Set off record 
identifying indicators. 



Read a record. 



Last record? Yes, set on 
control level and LR 
indicators and perform 
total calculations. 






^ 



Set on record identifying 
indicator. 



Perform total 
calculations. 
Set resulting 
indicators. 







Change in control 
field? Yes, set 
on control level 
indicators. 



ti 



Notes: 

1 . The program cycle shown gives the general order of the operations. There may be minor variations 
between this cycle and the detailed cycle discussed in the reference manual applicable to your 
system. 

2. You do not need to memorize the program cycle. The cycle is only shown at this time to give you 
an idea of the cycle of the operations. The operations will be discussed in greater detail later. 

Figure 6. Program Cycle 



12 



It is important that you know the order of the operations in the RPG II program 
cycle. This enables you to write specifications that will make correct use of the 
cycle. By knowing the order in which the operations in the cycle are 
performed, you can organize your program in an efficient manner and save 
yourself unnecessary coding. 

In this chapter, the operations in the RPG II program cycle are explained a few 
at a time. You will learn: 

• Which operations are used for a particular function. 

• Which RPG II specifications you must write to use the function. 



RPG II Programming Language 13 



Writing Specifications for Input and Output Operations 

One of the simplest jobs you can do on a system is read information from an 
input record, such as a card, then put that same information out, such as in 
the form of a printed report. No calculations are done. 



Program Cycle Operations 

To do this simple job, the system uses only the three most basic operations in 
the RPG II program cycle. Figure 7 shows these operations. 

Notice that two operations are concerned with the basic requirements of a job: 
input (read a record) and output (detail output). The third operation is the 
movement of data inside the system. 

START 



'^ 







Perform detail 

output 

operations. 



Move data from record selected at 
beginning of cycle into processing area. 



■Qk 



a 



Program 
Cycle 



Read a record. 



Cr 







<1 






t^ 



Figure 7. Three Basic Operations in tlie RPG II Program Cycle 



14 



Data read by an input device must be transferred to the system s process't>ti 
unit before it can be used. Moving data is a mandatory opeffuion done fu' 
every job. Because this operation is mandatory and is done exactly the sam- 
for every job, the compiler can supply instructions to do if. 

When the program is executed, the program cycle is repeated over and ovf. 
All three operations are used for every record in the input tile. The term dei-vi 
output, in the cycle operation, means that the specified output operations are 
performed for every input record. 

It may seem strange that detail output comes before a record is read. This 
occurs, however, so that headings can be printed on a report. If a job (such as 
this one) does not print headings, no information is printed during the first 
cycle. 

To make proper use of these cycle operations, your specifications must 
describe the records in the input file and specify how the output records 
should be created. You must also indicate what devices are used in the job. 



RPG II Progt, I, (lining Language 15 



DESCRIBING THE FILES 

The File Description Specifications form is used to describe all the files used 
by your program. This information includes the name of the file, the device 
used with the file, and information on how the file is to be used. You fill out 
the indicated positions on the bottom half of the form. 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



Gfaphir 














1 











aid Eiecirtj Number 



.CD" 



Program 
Ideniific. 



GX21-9092. UM/050' 
Punted in U.S.A. 



75 76 77 78 79 80 



^LT 



H 



Name 
of file 



Km to 



Control Specifications 



ii: 



n 



File Description Specifications 



How file 
Is used 



i 



■- M 



li U 01 69 (S ,'.9 99 59 P9 LI L9 19 09 bS 89 i9 95 95 P5 LS ^5 I, OS 6b 6 



Size of records 
In the file 



1 I I i 




Input or output 
devices used 



■ 01. hE 8E ZL 4C qe W VI Jf I nr bZ sc 



91 qi fl El ?l tl 01 6 8 ( 9 



16 



You must describe, on a separate line, every file used in your job. Many simple 
jobs require only one input and one output file. In the first jobs we discuss, 
therefore, we will use only one input and one output file. 



File Nannes 



Evrery file used in a job must be named. The name provides you and the 
compiler a means of identifying the file. During compilation, the compiler 
associates the file name with other characteristics of the file. Thus, you can 
refer to that file by name throughout your program and the compiler knows 
exactly which file you are referring to. 

The compiler, however, recognizes file names only if they conform to these 
rules: 

• A file name must be 1-8 characters long. 

• The first character of a file name must be alphabetic. (The letters A-Z and 
the @, $, and # signs are considered alphabetic characters.) The remaining 
characters in the name can be either alphabetic or numeric. 

• Blanks must not appear between characters in the file name. 

No two files used in the same program can have the same name. (Because 
some RPG II compilers use only the first seven letters of an 8-letter file 
name, be certain, when using these systems, to make the first seven letters 
unique; for example, use TRANSACT and TRANFILE, not TRANFILA and 
TRANFILB.) 

• The file name must begin in position 7 on the specifications form. 




jj ■ 

I -1 ' 



TTMEpm 

m fiia 

lOUT 



-Valid filename. 
*■>— Invalid filename. Name must start in position 7. 
2r*— Invalid filename. A blank must not be used between letters, 
i-*— Valid filename. 
J-«— Valid filename. 
-,"•— Invalid filename. 



The first character of the name must be 



an alphabetic character. 



It is a good practice to assign meaningful file names'. Meaningful names 
indicate something about the file, such as the type of records in the file or the 
use of the file. Because file names can be no longer than eight characters, 
abbreviations may be necessary. But these too can be meaningful. For 
example, the abbreviation CUSTCHG might be assigned to an input file 
consisting of records for all customers having charge accounts. 



RPG II Programming Language 17 



Device Designation 

You must also specify which devices your job will use for input and output. 
The ones you use, of course, depend upon the system you have, the devices 
you have, and your job. 

To indicate the device used for the file you named, enter the RPG II code 
name for that device in positions 40-60. The name must begin in position 40. 

Note: In the examples in this manual, you will see shading in the device name 
positions rather than actual RPG II code names for devices. Code names differ 
for each system. The RPG II reference manual for your system will tell you the 
code names that are applicable. 

During compilation, the compiler associates the file name with the device 
name. When you use the same file name in the rest of your program, the 
system will know which device to use. 



File Use 

You must also describe how each file and its associated device is used in a 
program. Files can be used as either input or output. (Files with other uses 
will not be discussed in this manual.) If records are read from a file, the file is 
an input file. If a new file is created during the job, the new file is an output 
file. Printed reports are the only output files discussed in this manual. 

You specify file use by placing either an I (input) or (output) in position 15: 



F 


















Q 

6 
o 


ileT/, 




1 

S 


1 4 « wit IZ M.*4 


Ifi 







. 




F 
















/ 






« 


a 




F 




















■ Input File 
Output File 



File Designation 

Position 16 is used to explain more about the use of input files. In this manual 
we are discussing the use of only one type of input file, the primary file. For 
this, you place a P in position 16. The designation of a file as a primary file in 
an RPG II program indicates that the RPG II program cycle will supply some of 
the program logic. For more information on primary files, and other types of 
input files, see the appropriate RPG II reference manual. 



Record Size 



When describing files, you must specify the length (in characters) of records in 
the file. Record length is entered in positions 24-27. Enter the length so the 
last digit is in position 27: 



+-1-+ 



44- 



f lie OwtflMJaA 



I^Fenntt 



",>'." 



1^0 
?6 
S 



J 



r 






a» 



RMOrd ArtAHi Tnt 



Osani'atran 



Owrfloik lrHlii.MW 



Startmfl 
Lnffiwi 

,*,t.-".t 



■ -4 



t : 



The record length specification does two things: 

• It tells the compiler how much storage space to set aside for a record (input 
or output). 

• It specifies how many characters must be read to get a complete input 
record. 

Record size for card files is easy to determine. It is either 80 or 96 depending 
upon the size of cards you have. Maybe not all your cards have information in 
all columns, but all columns must be read to get an entire record. Blanks are 
placed in storage positions corresponding to unpunched card columns. 

The size of records (lines) on the printer is also easy to determine. Printed 
records are limited by the size of your printer (the number of print positions in 
a line). 

You may, if you wish, specify a record size smaller than actual printer size. If 
you do this, make certain that none of the lines to be printed are longer than 
the length you specify; otherwise the RPG II compiler will give you an error 
message which requires that the program be corrected and recompiled. 

Records on other files, such as disk, can be any size. The maximum size is 
limited only by the capability of the device. When you use one of these files 
for a job, make sure you enter the correct record size; that is, enter the one 
established at the time the file was created 

Other information may be required to describe how the input file is stored on 
the specific device in positions 29-38. See the RPG II reference manual for 
your system for these entries. 



RPG II Programming Language 19 



DESCRIBING INPUT RECORDS 

Besides describing files, you must describe the records in each file. The 
compiler needs this information to create an object program that will read 
records properly. Input records are described on the Input Specifications form. 
Information needed to describe the record in a file includes the name of the 
file containing the record, the name of each field in the record, and where each 
field is located in the record. You fill in the indicated positions to describe 
fields and data in the record: 




Name of input file 
containing records 
you are describing 



■M i U 



■i 



^ 



Location of each 
field in the record 



i 



Type of data 
in each field 



-J-l f 



Names of fields 
In record 



-i- 






To help in describing input records, you can use the record layout form 
described in Chapter 1. This form shows the location and length of all 
fields in the record. 



20 



File Names 



To tell the compiler which records you are describing, enter the name of the 
file containing them in positions 7-14. The name must be the same (and 
spelled exactly the same) as the one you assigned to the input file on the File 
Description Specifications form: 



IBM 



'•■Stock TranS3<.fi'on fisgiste.>~ 
«■•■•' John Doe. \".' l/lf-^^' 



RPG INPUT SPECIFICATIONS 



h., -^ 



HrcoKl Idcmtticjtion Coilsi, 



"TIT 



'•••^[[j' 



n ri 

File Description Specifications 




Mode o' Procesiinij 






Recoid Aadr(;ss Tyf)e 
TviMof run 



RPG I) Programming Language 21 



fitji',-;. Names 



1(1 identify individua! fields in the record, you must give each field a unique 
^icirne. From inf on nation you placed on the File Description Specifications form 
the compiler determines the size of the storage area for each input record. The 
field names you supply on the Input Specifications form tell the compiler to 

. :vide ill!;, storaye area nito i^maller sections so each can be addressed 

The rules for forming field names are as follows: 

. The tieid name must be from 1-6 characters long. 

. The first character must be alphabetic. Remaining characters can be either 
alphabetic or numeric. 

• Blanks must not be placed between characters in a field name. 

• The field name must begin in position 53 on the input Specifications form. 



nM\e 

ORV 'M 

shtM 



-Valid name. 

-Invalid name. A blank cannot be used between letters in the name. 

-Invalid name. A field name can be no longer than six characters. 

-Valid name. 

■ Invalid name. The name must start with an alphabetic character (A-Z, #, $, @). 



22 



It is a good practice to assign meaningful field names. For example, a field 
containing customer numbers would be more meaningful if it were called 
CUSTNO rather than FIELDA. CUSTNO indicates something about the data m 
the field. 

Enter field names one line below the file name, using a separate line for each 
field: 



(J 2 

3 

4 

i 
5 , 

6 j 

7 j 
;8 j 
9 



Customer 
NJumber 



LIMILilAlIIiIJ 



Order 
Numbtr 



II 

<0 Z 



Item 
Number 



Xte-rn 



r5 ]lV| l T ; l8 yi9]?07?r |2?|?T[?4]? 5T?6T?fj?8J;9|3OJil J3?|i3|}4!i5!}6|»|i8|j8[41)[4i;4?[<3|4' 



TRms 







List 
Price 



^Sfcllin2 
Pric» 



5J46!4?T48|4S'50l5j/^2tb3]M S5]56r5(|Ml^^^^ 




CUSThIO 

odDHd 

SZ-SAf/V 

iTe'MMo 

[D£SC 



LIST PR 
SELL PR 



Be sure to name every field that contains information necessary for your job. If 
you need all fields on the record, name them all; if you need only a few, name 
only those you will need. The entire record is read, of course, regardless of 
how many fields you are using from that record. However, only information in 
the fields you name can be used by the program. 



RPG M Programming Language 23 



Field Location 



After you assign a field name, you must tell where the field is located in the 
record. This enables the compiler to associate the field name with the right 
information. To describe the field location, you specify the position in the 
record at which the field begins and ends. Starting position is specified in 
positions 44-47 (From); ending position is specified in positions 48-51 (To). 
When a field is only one character long, starting and ending position entries 
are the same. Field location entries can be easily determined from the record 
layout form: 




The compiler also determines field length from the To and From entries. The 
compiler needs field length to determine how many storage positions to allow 
for each field. If the field locations you specify indicate a field length of 6, the 
compiler allows six positions in storage for the field. 



Type of Data 



To complete your description of the input fields, the compiler checks position 
52. This position indicates whether data in each field is alphameric or numeric. 
A numeric field can contain only numbers; an alphameric field can contain 
numbers, letters, and special characters. 

If position 52 is blank, the compiler assumes the field is alphameric. For 
numeric fields, position 52 must contain an entry. This entry indicates the 
number of decimal positions (digits to the right of the decimal point) in the 
field. 



24 



firi« le<a«lan 



front 



To 



f «« 



^tmUmn 



I » a » B S« 



II 









» » s» » $r tt 



Leave position 52 blank for alpha- 
meric fields. Enter 0-9 to indicate 
the number of decimal positions 
in a numeric field. 



Although you do not include decimal points in fields in Input records, you must 
consider them if you want correct calculation results and output data. By 
specifying to the compiler the number of decimal positions you know to be in 
a numeric field, you provide the information necessary to produce an object 
program that will handle numeric data with decimals. 

Remember, any field used In an arithmetic operation (add, subtract, multiply, or 
divide) must be specified as numeric. 



DESCRIBING OUTPUT RECORDS 

Output records are described on the Output Specifications form. Information 
needed includes the name of the file containing the output record, the name of 
each field in the record, and the location where each field is to be placed in 
the record. You fill in the indicated positions to describe how the output 
records should look: 



Name of output file 
containing records 
you are describing 



RPG 



OUTPUT 



SPECIFICATIONS 




RPG II Programming Language 25 



For a printed report, you make additional entries describing the format of the 
report; that is, make entries indicating the spacing and punctuation you want. 
These entries are discussed later under Printed Reports. 

The printer spacing chart and record layout forms are useful when you are 
writing output specifications. The record layout form shows the organization of 
fields on a card or disk record; the printer spacing chart shows the format of 
printed records. 



File Names 



You indicate the output record you want created and the device you want to 
create the record by entering an output file name in positions 7-14. Make sure 
the name you enter is the same (and spelled exactly the same) as the name 
you entered on the File Description Specifications form for the output file: 



IBM 



RPG OUTPUT SPECIFICATIONS 






T' 



T 



Card Elect'o Num 




-m 



Output Indicdtors 



f>;a,.™>! 



File Description Specificatii 



■f 1-- 



MJi, 



33 



sa 



Mode ot Procesiiny 






Record Address Type 



Tvpaoiflte 
.or A<Mfioort*y«» 



Overflow Indicator 



K«v Ptetcf 
Sttrtin« : 
tocttiaft 



13 la 15 

OtWCO r.H 59 50 



26 



Record Type 



Three different types of records which can be specified on the Output 
Specifications form are heading, detail, and total. You usually find all three 
types in a printed report. 



Heading 
Records 



Detail 
Records 



Total 
Record 







ACCOUNTS RECEIVABLE 


TRANSACTION REGISTER 










07/11/ 


-- 








PAGE 01 




CUST 




JOURNAL 


INVOICE 


CASH 


INVOICE 


JOURNAL 


DATE 


NO 


CUSTOMER NAME 




NO 


NO 


AMOUNT 


AMOUNT 


AMOUNT 


07/11/ — 


759820 


SOUND OF THE SEVENTIE 






063420 




i 46.23 




07/11/ — 


633870 


OLDE VILLAGE SHOPPE 






063421 




89.70 




07/11/ — 


642990 


PARAGON TV SALES 






063422 




20.30 




07/11/ — 


122620 


CANNI20NI STUDIOS 






063422 




129.76 




07/11/ — 


682030 


RAYMONDS RAPID REPAIR 








$ 63.80 






07/11/ — 


742950 


SARATOGA VARIETY 








29.72 






07/11/ — 


014280 


BAKER BRADLEY £ CO 








43.50 






07/11/ — 


872060 


UNIVERSITY ELECTRIC 








97.75 






07/11/ — 


883290 


VILLAGE MUSIC C TV 


07 


-036 








$18.23CR 


07/11/ — 


006280 


ALLSTONS 


07 


-037 








10.70CR 






TOTALS 








$234.77* 


$285.99* 


$28.93CR* 



Heading records are printed at the top of a page. They include report titles, column headings, 
or any other information needed to identify the kinds of information found in the report. 

Detail records contain information about an individual item. Information in a detail record is 
often taken directly from an input record. 

Total records are written after a group of detail records. They usually contain data that is the 
result of calculations on information in a group of detail records. 



RPG II Programming Language 27 



To specify record type, place an appropriate entry in position 15. If the printer 
spacing chart was properly filled out, you can refer to it to determine record 
type: 



These entries specify the record type; 



Refer to the printer spacing chart 
to deternnine the record type: 



Record Type 



o 






1 


i 

n 


A 



16 


Sp 


ttne 

3 4 a 


1 
6 


Filename 

; 8 S (9 tl t? H 



* 

H 


5 


a 


I 











"" 










H 
D 
T 




. 





2 




o 




- 




- 






■'■ 








3 

■4 




















1 


G 


$■ 




s 


















-i 



Heading Record 
" Detail Record 
" Total Record 




28 



Field Names 



To specify the information to be placed in each output record, you must name 
each field to be included. You specify these fields on separate lines of the 
Output Specifications form in positions 32-37. Begin the list of fields one line 
below the file name: 



IBM 



RPG OUTPUT SPECIFICATIONS 



Gij[)h,r 
















Card Electro Number 


K,, 




J 













om\ 



U ; i - 



R 1 



Oi(t[Ju1 Indic-uors 



*AUTO 
3? « 34 36 36 3T 






PC 



0£Sc 



tm 



rzz. — 



u 



o- 



4ft J6 4/ 4B a9 '..O bl h7 ^3 &4 55 56 



Commas 

Yes 
Yes 
Mo 
No 


Zero Balances 
lo Print 

No 
Yes 
No 





Constan 

) 9 10 It 



When listing the fields, make sure you enter a name that was previously given 
to a field (for example, a field named on the Input Specifications form). If the 
name you enter on the Output Specifications form is not one previously used, 
the compiler will not know what information you are referring to. 

Field names are used to create the output record in the output storage area. 
Information is placed in the storage area one field at a time in the order you 
list them on the Output Specifications form. 



Field Location 

To specify where you want fields placed in the output records, you make an 
entry in positions 40-43 (End Position in Output Record). This entry must be 
the exact position where the last character in a field should be placed in the 
output storage area at the time the record is being created. The entry is easy 
to determine if you use a printer spacing chart or record layout form. 



RPG II Programming Language 29 



1 ' 1111111 l22ZZ22222f233333 
ItO 1 2345879901 2345fi7el9 01 234 


'1 1 ^ " "" Jy 

5533344444444445553555559«6S666«6B67777777l7 
567890 1 2345678901 2 345678901 254S67B901 2545€l^ 


7 78aea6e808( 

• 901 2S49t7a! 


_j_ 1 j 1 1 






-4- -i- -I 1 


i 1 ' i 1 i i 






i * I t ' : ' 








ut"t^i"" 


1 ; ■ ! 1 1 ! 


''■I'M' 1 . ' ! ' '11 






i 1 : . : . 1 1 : M 1 ] [ 1 : 1 1 { 1 , ! 


' 


'"^ i ' mm\ )t 








■[[If 1 ■ i i 1 ■ 1 ' ! ; : ! ■ ■ T r , ■ , ■ ; 


\ 


|i:ij:r^:^rfe^^:t^ 


vj j i j I ' 1 ■ 1 i 1 1 i i ( . . 1 f M i ' 1 i 1 ■ ' i — H rH-iM+-tyf — i 1 ' j i I- 




PRINTED REPORTS 

When your output is a printed report, additional entries are needed on the 
Output Specifications form to make the report easy to read. Information must 
be neatly arranged in rows and columns with adequate space between items in 
a line and between lines. 



Spacing 

Your field location entries (positions 40-43) control space between fields, but 
to control spaces between lines you code positions 17-18 (Space). 

You can have the printer single, double, or triple space between lines by 
entering the number 1, 2, or 3 in the appropriate positions. If you enter the 
number in Space Before (position 1 7), the printer spaces before printing the 
line; if you enter the number in Space After (position 18), the printer spaces 
after printing the line. You may enter numbers in both positions 17 and 18. By 
specifying three spaces before printing and three spaces after, you can have 
five blank lines between printed lines. The printer spaces three lines after 
printing a line, then spaces three lines before printing the next line. This next 
line is then printed six lines beyond the last line printed. 



30 



RPG OUTPUT SPECIFICATIONS 



IBM ,„,.™„...= 


„n...M.n.,n.,Co,po,.„an 


PrO0'.t'" 


PfogF;immer 


lo.-e 



K,.v,r.g ^-O-^- 











C^r,l Eh;ctn, N>i-it> 



CiX?l 9090 UM'05O* 

PrirUt'd in U S A 



76 76 77 78 79 



^.4:D'''_ ^::::.4ii:z:n 



Ouliiul Indicatorb 



M 33 34 36 3637 



-v> 



... Sk|ii I CR 

i" ' a' 

? . B 

't ■ ( 



Constant or Fdit Word 



1 


X 


R*' 


„ovi. 




T ' 


Y 


n.i 


sSig 




L 




^" 


d L< 


' ' 


1 " 






,.,.■, 


.J 



i b' ba (ii 70 



££^JL 



»!| 



OUST 



ffilCB 



ITEMNO 

i9£SP 



I^C 



53 
65 



To single space the detail lines of a report, a space 
specification of 1 must be specified in position 18 






i 



\ ^ H 



Skipping 



You can use Skip entries in positions 19-22 to control spacing between lines 
on a page and to control printing the first and last lines on a page. A skip can 
be made before or after a line is printed. You indicate this by coding the skip 
in either positions 19-20 (Before) or 21-22 (After). The entry you place in 
these positions depends on the type of printer you have. 

In this manual, we will discuss and show examples only for printers with 
tapeless carriage control. If your system uses a carriage control tape, you will 
find the appropriate entries for skipping in the RPG II reference manual for 
your system. 

The Skip entry for a printer with tapeless carriage control can be any line 
number (1-112) on the printer paper. (The standard 11 -inch printer paper has 
66 lines per page when 6 lines are printed per inch.) A Skip entry in positions 
19-20 indicates the line to which the printer skips before it prints the next line. 



RPG II Programming Language 31 



IBM 



RPG OUTPUT SPECIFICATIONS 



-^m,_ :z:L,..rYl 



GX?1 9090 UM ObO" 

Printed in U S A 



75 76 77 78 79 I 



'^pfMrlfj/ 



tl 



Output IndiCdtor' 



*AUTO 
32 33 3* 36 3C 3T 



65 



No Sutn 


CR 

ti 


J 


_.^ 




M 



X 


Re 


liov.- 




PU 


s Sign 


^ 


l)d 




' 


Z.' 


■ 









Constant or Edit Word 

i =* H) M 1? Ij 14 IS '6 17 18 19 20 ^1 72 23 24 



'->9 t^O hi (,? fi:) M Gb (it, 6' 68 h9 



'JRflNS/IC^ToM 'I^^PORT' 



To print a heading on line 10, a Skip specification of 10 in positions^, 
19-20 must be made. When this instruction is executed, the printer 
skips to line 10 and prints the heading. 



Hm ^ M i H-fllHH :H: 



Printer paper is not rolled backward. If the printer is on line 50 when the 
program issues a skip instruction to line 10, the printer skips to line 10 on the 
next page. 



32 



Editing 



Editing is a means of punctuating numeric fields by adding decimal points, 
commas, and negative signs. Editing can also suppress the printing of leading 
zeros (in the number 00149, 00 are called leading zeros). 

When a numeric field is read into storage, it contains no decimal point or 
commas; when an unedited numeric field is printed, it appears exactly as it is 
in storage. A large number printed without commas or decimals is hard to 
read. Furthermore, an unedited field may not be meaningful when printed 
because of the way the system stores negative numbers. 

The system uses the last digit in a numeric field to indicate sign (plus or 
minus). If the field is minus, the system combines a minus sign with the last 
digit. When a negative number is printed unedited, the combination of digit 
and sign appears as a letter. For example, minus 6439 prints as 643R. On the 
other hand, a positive field has no sign (a numeric field that does not have a 
negative sign is assumed to be positive). A positive field, therefore, prints 
normally. Positive 6439 prints as 6439. 

The compiler can provide instructions to edit in a number of ways. All you 
have to do is enter an edit code in position 38 of the Output Specifications 
form. Many codes are available, each indicating a different type of editing. 
Figure 8 shows the codes and the editing done for each. Figure 9 shows some 
examples of editing. 

Note: When you edit a field, you often add characters to it. When printed, the 
edited fields require more space than they did on input records or in storage. 
When specifying end position for an edited field, always take into account the 
spaces needed for the punctuation that will be added. The printer spacing 
chart shows the amount of space needed for the edited field. 



RPG II Programming Language 33 



Edit 
Code 


Commas 


Decimal 
Point 


Sign For Negative Balance 


Zero 
Suppress 


Printout On 
Zero Balance 


No Sign 


CR 


- (Minus) 


1 


Yes 


Yes 


No Sign 






Yes 


.00 or 


2 


Yes 


Yes 


No Sign 






Yes 


Blanl<s 


3 




Yes 


No Sign 






Yes 


.00 or 


4 




Yes 


No Sign 






Yes 


Blanks 


A 


Yes 


Yes 




CR 




Yes 


.00 or 


B 


Yes 


Yes 




CR 




Yes 


Blanks 


C 




Yes 




CR 




Yes 


.00 or 


D 




Yes 




CR 




Yes 


Blanks 


J 


Yes 


Yes 






- 


Yes 


.00 or 


K 


Yes 


Yes 






- 


Yes 


Blanks 


L 




Yes 








Yes 


.00 or 


M 




Yes 






- 


Yes 


Blanks 


x' 
















Y^ 












Yes 




Z^ 












Yes 




The X code removes the plus sign of the field. 

The Y code is used for date fields. It suppresses only the leftmost zero and puts slashes 

in a three to six digit field according to the following pattern: 

nn/n 

nn/nn 

nn/nn/n 

nn/nn/nn 
The Z code removes signs and suppresses zeros. 

Note: The edit codes shown in the first column are used in position 38 of the Output 
Specifications form to punctuate the field named on the same line. Only numeric fields 
can be edited. The decimal point is automatically inserted in the correct position. 



Figure 8. Edit Codes 



34 



Field Length 
and Digits 


1769532 


02 


00 


000 


041345 


F 
C 
is 


eld 

iaracter- 

tics 


Positive 
Number- 
Two Decimal 
Positions 


Negative 
Number- 
Two Decimal 
Positions 


Zero— Two 

Decimal 

Positions 


Zero-No 

Decimal 

Positions 


Positive 
Number- 
Three Decimal 
Positions 


;: 


1 


17,695.32 


.02 


.00 





41.345 


1 


2 


17,695.32 


.02 






41.345 


II 


3 


17695.32 


.02 


.00 





41.345 


;:■>■;■:■:■>; 


4 


17695.32 


.02 






41.345 


llll 


A 


17,695.32 


.02GR 


.00 





41.345 


liiiii 


B 


17,695.32 


.02CR 






41.345 


iiilii 


C 


17695.32 


.02CR 


.00 





41.345 


Edit Codes | 


D 


17695.32 


.02CR 






41.345 


liiiii 


J 


17,695.32 


.02- 


.00 





41.345 


■iiiii 


K 


17,695.32 


.02- 






41.345 


■?:?■§:;?: 


L 


17695.32 


.02- 


.00 





41.345 




M 


17695.32 


.02- 






41.345 




X 


1769532 


OK 


00 


000 


041345 




Y 


Must be used with 


a 3 to 6-digit field. 




0/0 


4/13/45 




^ 


1769532 


2 






41345 



Note: This table shows the effect of editing on five different fields. It illustrates what will be printed by 
using each edit code on the fields. 



Figure 9. Examples of Editing 



RPG II Programming Language 35 



JOB 1 (TRNREG): PRINTING A SIMPLE REPORT USING THE THREE BASIC 
CYCLE OPERATIONS 



Job Definition 

Print a report listing all items sold during a week. The selling of an item is 
known as a transaction, so the report is titled Transaction Register. 

During the week, a transaction file is created. At the end of each day, 
transaction records are created from information obtained from order forms 
received during the day. To get the printed transaction report, you list the 
information from all input records on the printed report. 



36 



Job Requirements 
Input: 



Sales transaction file consisting of 96-character records. The format 
of the input records is shown on this record layout form: 



Traiwaction 

D&t£ 



UMM^T^ 






T]t [ 9 j io l i iTT; 



Itftm 
DescnptiOTi 



I3[ i4[r5[ l6]l7ri8 [l 9j?0[2l{?2];3[?4l?5|?6[?rb» l 29[30]3l|3; 33[34|35|36[3I 



Quantity 



Output: A printed transaction register: 




43 44 45 46 4? 



Tvuo decimal positions 



^/^^/ -- 


".l J910 


CHOOl BOX lOOA FLUSH 


10 


"1.90 


7/2?/ -- 


<.! il-tfc 


Ch1<.8 RRFAKER ISA 


100 


.89 


7/^3/ - 


"111116 


1500 rwiN SOCKET B 


5 00 


1.12 


7/i't/ - 


'>030i9 


MOTOR 1/2 HP 60 CYC 


2 


1'.6. 7 8 


1 w,/ - 


il 7802 


TERMINAL CLIP 


100 


5.12 


1 / It,/ - 


3?6917 


TERMINAL BAR 


100 


'..12 


?/<;<./- 


<.ll Wl 


150b >olkt adapt aR.N 


<.0J 


. 1 9 


'/^<./ - 


". 1 i^m 


CH173 BRFAKfcR 1JA 


60 


1.15 


7/^',/ - 


H\ ioas 


CHI 76 BRFAKtR 60 A 


-.O 


1.15 


7/^^./ - 


tl 1 1 7<. 


CIS! STL SWI TCH BRN 


20u 


1.16 


7/^'./ - 


•» 1 3T-(n 


CHOj"! PR B0» ISQA 


IJ 


<..98 


uit,/ -- 


71U126 


FCSji FjSfc ISA 


200 


. 32 










J 



This printer spacing chart shows how the report is formatted: 



111111111)2 
1254SC7«<012S4967a9a 


222 2222223 333333333444444444455SSS5 
1 2345678901 234567890 1 234567690 1 2345 


555566 666666667 

678901 234567890 


77777777 786868 
12345678901234 


1 

IB8Be9999 
S « 7 8 9 12 3 


1 ~1 


1 


1 






1 i 4I 4I 


_(_... ... . f 1 , 




1 








1 


' ■■ 














V 5 a/h.tm 


^ ?S^)^>)X'"^T^0i5(kS5«X)i;5^5<S(!X)^)^ 


I'Mu MlM 


"^ikc^iT"^ 


i 








! 1 ; 1 i 


IL -u 


^ ""\i%\ivX'- 


^Tf-eH \ /IVt.vi :^k-kc.P. 


fPffi)'^) K>Lfii\ 


-i-K^ W'X.^ 


XlT't 












f 1 


\IS\^int\zi^)- -t-- ' ' 1 I 


' ' I ' 1 ' 1 


^ ' [ ■ ^ 




10 1 




! ' i i i 




tr ^'^ i" 


- - <r!-U- 




! M ! ! j 1 


' ' ' t 1 1 1 j- -i — H- 


! T 


" X-X--i^- 


per- *. p <.<::2' at* \//,hi?.s' 




' i t ! ' f "t 


-|_ _i_ -1- 








1 i 1 i 1 i 1 1 






■ j N 1 ' t 


; M ' 1 












1 ' : t 








: 




1 1 












\\ \ 1 


+ + -■ ■ 1 ! 1 i I'! i 1 


' i 






19 "T 


1 i i : 1 i 


\ |_j- 1 ) j 1 j- - 


[ t ! 1 t 1 




20 1 


^ r~*- f4 ^ *■■'■■-+■■-? !■+■■■ 




!,' ■' ] 1 




-^ ^-X- 


— 4-^-— i-— 4t-+ ^- 


1 

1 ri-^+-H 


- M M i 4++^-t 


--^-tH 



RPG II Programming Language 37 



Job Specifications 



IBM J^»,„.„„„„ B„„„..„ Mo.h,„„ Co.„o„„™ 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



Prog-ai 
trieoKti 



GX21 9092 UM/050* 

PrrrH«<l in U S.A. 

'_5_ 76 1 1 78 79 80 



H 



Control Specifications 



Szeto 



F 



File Description specifications describe the files used: one input and one output 
The input file, consisting of 96-character transaction records, is given the name 
TRANS. I in position 15 indicates input file; P in position 16 indicates primary 
file; 96 m positions 24-27 tells how long the records are. The device used to read 
the file depends upon your system. The output file is a printer. Filename is 
REPORT. The print line (record length) is 96 positions long. 



□ 



Notice that entries have been made in positions 1-2 and 75-80 in the upper right- 
___ hand corner of each form. Page number (positions 1-2) along with line numbers 
..«^ (positions 3-5) help you keep your specifications in order. These numbers are 
keyed in the source program. Positions 75-80 identify your program 



\ 




IBM .,.„.„.„.„„,„ „ 

'-'<-^Tran sacfi on fieg /s te. r 
->•'"'""■ -John Doe. |^> j/iof-- 



RPG INPUT SPECIFICATIONS 



C;X21 9094 UM'050" 

Pri.11,.,1 „. LJ r> A 



n. n. n /H /9 80 



ffii^W 



^~M\ 




Input specifications describe the input records. The input file is 
named first. The name entered must be the same as the name given 
to the input file on the File Description Specification form. Fields 
on the input records are then described. Most of the information 
for describing fields is taken from the record layout form. The 
record contains five fields, all of which are needed for output. Therefore, 
all five fields are described, starting one line below the file name. Field 
description entries include field location, field name, and decimal position 
which indicates type of data (alphameric or numeric). Any field to be used 
m arithmetic operations or edited must be numeric. The output shows that 
three fields are edited. Thus, three fields have an entry in position 52 to 
indicate numeric fields. 



'The Record Identifying Indicator (entry 01 in positions 19 and 20) is needed to get correct 
output. It w,ll be explained later under Job 5 (STOKST): Using Record Identifying Indicators 
to Process Different Record Types. 



38 



IBM 



RPG 



OUTPUT 



SPECIFICATIONS 



Tra nsaction Re.c,lst&r 
"John Doe. \°" 'ilioJ-- 



X7\ 9n'H) UM'UbO' 



lb ;t> // mm m 

[7-T«]/V[^]g] 



7v 




Nn Sk;, 


■ CR 




V.., 


1 

2 


■ A "" 
J B 




Vri 


I ' 


. 1) 



Constjnt or Edit Wor( 




Output specifications describe how an output record will look. The output file is 
named first. D is entered in position 15 to indicate a detail line (one printed for 
every record read). A 1 in position 18 specifies single spacing. All fields to be 
printed are now listed, one per line, starting one line below entries describing the 
entire line. End Position, taken from the printer spacing chart, is given for each 
field. Again, according to the printer spacing chart, three fields are to be edited. 
DATE needs slashes (edit code Y), QTY must be zero suppressed (edit code Z), and 
PRICE must be zero suppressed and punctuated with decimals (edit code 3). Edit 
code 3 was chosen for the PRICE field instead of edit code 2 because PRICE, being 
a 5-position field with two decimals (xxx.xx), needs no commas. 



i9 99 'ig W 19 d 



HHrHI+ - 



tt. 



^-L-i 1- 



i 99 1-9 C9 29 I 



'The Record Identifying Indicator (entry 01 in positions 24 and 25) is needed to get correct 
output. It will be explained later under Job 5 fSTOKST): Using Record Identifying Indicators 
to Process Different Record Types. 



RPG II Programming Language 39 



Writing Specifications for Calculation Operations 

Most jobs require some processing. In RPG II, processing can include 
calculating, comparing, moving, or changing data. In this discussion we will 
consider only calculating (adding, subtracting, multiplying, and dividing). 



Program Cycle Operations 

When you specify a calculation operation related to each input record 
processed, you are adding one more operation to the basic program cycle: the 
detail calculation operation (see Figure 10). 

START 



Move data from record selected at 
beginning of cycle into processing area. 





Vi^ calculations. ' 

^ 



Perform detail |/ Perform detail 

calculations. ' output operations. 



-Q. 



Read a record. 

Program 
Cycle 



Cf 



>C:i 



'^ 



Note: This is a basic program cycle showing the addition of detail operations. Because this is a 
detail operation, it is performed during every cycle for every record read. 



Figure 10. Program Cycle for Detail Calculations 

40 



The Calculation Specifications form is used to describe the operations you 
want performed. Information needed includes the type of operation to be 
done, the field(s) or constant to be used in the calculation, and the location 
where the result of the calculation is to be placed. You fill in the indicated 
positions: 



RPG CALCULATION SPECIFICATIONS 



IBM 



t-i- -I- 



L.,i!>l f" I'l-iM! NmF 



/b '6 // /8 '!M 80 

.m.TTn 
















... 




— 


— 


" 




— 








— 


— 


~ 


— 


__ 


— 


^ 


— 




jlt Fii 




" 


X 

f 

i 


■— 


~T 


— 


— 


— 


~ 




— 






c 

1 ■■ 
[) ; 1 






Fector 1 """""^ 
Jt 22 23 X' 2S 23 J7 


Factor 2 

33 34 3y36 37 3B 33 40 ^1 A7 


Rrs 


Ui 


i„d,.„„.;', 


Cuiiunprits 


Type of operation 
(ADD, SUB, MULT, 
DIV) 






L&ngth 

49 CD 51 


1 


Anthrnrr.i 


N,<me 


Plus iMtnuil /.■!(> 


CmiMn' 


1 ■?h<2]i '^ 


Look,j|.lK,iUor ?),:, 






HKjh 


Cow 


Eiiujl 


^ 


■ \ 

\ 

i 

! 


_ - 

; ! 


„H . 


^ 






- 








\ 


V 




. . . i 




/ 












- 




' :\ 


k- 




\ 


\ 


-{ 


"" 


- 


j 


i :! : 1 1 ; : ::: ; 




(J 
■ 


4 










\ 




^ 


/ 














\ 


















\\ 












^ 


._ 


-__.- 




_ 








.. 




...L- 










- 












■ ' ; i 


-- 
— 
- 


1 
i 


-! ■ 


- 


— 


— 


- 


Data to be used 
in operation 


. , . 


Where to put result 
and in what form 
to leave it 












1 ,;,.,,;.,. . 




' 


















: !i 

■ 1 ■ 

fi 

Yin' 
■ [ ' 

Ml 

18' 

i t 

1 ■ !l ' 




f 




- 


- 


-' 


- 






1 ■■■ 




. 




- 


' 1 1 1 

! ■ 1 ' 

' i i j 


~ 


- 






! 
























i 
-4- 












- 


- 


- 




- 


'• 












- 


-- 


















• 1 ; 1 1 

j i 1 1 1 


- 




. ■ i , ■ , 1 . . 










-- 




' 


- 










































, 


















- 














- 




- 


- 




1 


; ; i , : ■ 












































II 1 i i i ! ! J i 


~ 


-- 
















- 


- 




















' ! ! 1 
, ! 


- 


- 


- 










! '!■''' 




















. . ; i ; , . . . 


- ■ 
































i 1 ' : 


: ! ; ■ 

. . 1 . . , ; i j . , ! . . 
i ' ' ' 






-- 


















i 


7 




. 






j 


























I ' ' , ! 












: 


- 


i 


- 


' 


















, , i 
















^ 


-- 


■ 1 

i , , 1 , 

i ■ ■ ; i 

j ; ■ 
i '■ 




- 






- 






- 




' 


[.,,:;. 




. i 


- 





--- 










^- 




H t 


- 






















! 






- 


- 


- 
































1 






















1 








! 




























1 





Specify one operation per line. In each program cycle, processing steps are 
done in the order you specified on this form. If calculations must be done in a 
particular order, you must list the operations in that order. 



RPG II Programming Language 41 



DESCRIBING TYPE OF OPERATION 

To indicate the type of calculation operation, you enter one of the following 
operation codes in positions 28-32 on the Calculation Specifications form: 

ADD (add) 

SUB (subtract) 

MULT (multiply) 

DIV (divide) 

DESCRIBING DATA TO BE USED 

After you have specified the type of operation, you must identify the data to be 
used. |f you specified ADD, for example, you must tell the system what to 
add. You do this by naming the fields to be used in positions 18-27 (Factor 1) 
and 33-42 (Factor 2). 

Instead of naming a field in Factor 1 or Factor 2, you can enter a constant; that 
is, you can enter actual data instead of the name of a field containing the data. 
For example, you can enter either of the following: 

500 Constant (actual data) 

AMOUNT Name of a field containing data 

Constants can be either numeric or alphameric, but for now we will discuss 
only numeric constants. The rules for using numeric constants are as follows: 

• Constants can be up to ten numeric digits (0-9). 

• Constants can have a sign and decimal point. The sign, if used, must be the 
leftmost character. The decimal point, if used, must be shown as part of 
the constant (4.12). 

• The first character of the constant must be placed in the leftmost position 
of the Factor field. 

• Constants cannot contain blanks. 



42 



The contents of a field can change during execution of a program, but 
constants do not. If you want to add, multiply, subtract, or divide the same 
number during every program cycle, you can use a constant: 



1 laiB ?0 31 22 23 34 25 19 27 



HUi 



QJT 



mo 



Count 



DIV 



33 34 35 3<i 37 38 39 40 41 43 



ISl 



Ht 



5? 



cdkMf 

■ ! ■ ■ 



^Mtttuij 



. Add a constant 1 to COUNT at detail calcula- 
tion time, thus providing a count of the records 
processed. 

■ Calculate the circumference of a circle by multi- 
plying diameter by the constant 3.14159. 

' Convert a units quantity to a dozens quantity 
by dividing QTY by constant 12. 



RPG II Programming Language 43 



To the compiler, a constant is like a field name. During compilation, the 
compiler checks Factor 1 and Factor 2 for constants. If there are any, the 
compiler assigns a storage location for the constant and gives instructions to 
the computer to put the appropriate constant in that location at the beginning 
of job execution. 

When you enter the fields in Factor 1 and Factor 2, be sure to consider their 
order because the specified operation may have an affect on the result; 



ADD 

Factor 2 Is added to Factor 1 and 
the sum placed in the Result Field. 



18 19 JO il Tl 73 24 n 16 27 



'Mia. 






33 34 3S 36 37 3a J9 W 41 42 



4A(T5 



TOTftMT 
T'OtftMT 



n 



Either line adds the two amount 
fields. The order of the fields makes 
no difference in addition. 



MULTIPLY 

Factor 1 is multiplied by Factor 2 and 
the product placed in the Result Field. 



18 19 ;C J1 2? 23 24 3a 26 21 



Mm§ 



u 






MTi 



35 36 ;i7 38 39 40 41 4! 



OiiHi 






Either line multiplies the hours and rate 
to obtain the gross pay. The order of 
the fields makes no difference in multi- 
plication. 



SUBTRACT 

Factor 2 Is subtracted from Factor 1 and 
the difference placed In the Result Field. 



19 JO 21 -21 -n 24 2b 2€ J7 



ffWfli 



VE0(/C 



H 



4'.] -~ 



WW 
SO0 



33 3J DS 36 37 3S 39 ap 41 42 



DEpW. 

romi 



DITF 
01 FF 



The order of factor 1 and factor 2 In sub- 
tract operations is Important. The bottom 
line would not produce the desired result. 



DIVIDE 

Factor 1 is divided by Factor 2 and the 
quotient Is placed In the Result Field. 
Factor 2 cannot be zero. 



_ 


















<" ■'- 














R.'Suit F.rli! 


Factor 1 
■ IH ^9 ?a 21 22 23 24 25 26 n 


Factor 2 

3 34 36 36 37 38 3S 40 4) 4 


N.tiHf 


L 




Y 




- 














IS. 

n 


Y 










*~ 






- 








\ 
































' 1" 




\ 








\ 





The order of the fields In divide 
operations Is Important. The bottom 
line will not convert a units quantity 
to dozens. 



44 



DESCRIBING THE RESULT FIELD 

You must specify where you want the result of a calculation stored by naming 
that field in positions 43-48 (Result Field). The name you enter in the Result 
Field can be the name of a field already defined on the input or calculation 
specifications forms or a new field. 

You would not need to name a new result field in these two situations: 

• The contents of an input field are no longer required in your program, and 
the field is the correct size. 

• The contents of an input field or a result field already defined on the 
Calculation Specifications form is to be replaced with a new value. 



RPG II Programming Language 45 



If you name a new field, you must specify field length (positions 49-51) and 
decimal position (position 52) so the compiler can assign adequate storage for 
the new field: 



ilBI^. 



F?PG INPUT SPECIFICATIONS 






1 1^ VILE 



1 I 



from 



16 



tivf 



■^ 



5 
9l5 



D£SC 
QTf 
aCOST 



RPG CALCULATION SPECIFICATIONS 



G.,ii.n.i i 

':"■ L J 






119 38 -it ?? 21 I426W 7? 



m 



iv^irirT 



33 3<..?S 36 37 3 



m 



1 



CJMT' 



The result field COST is not a new field 
because it is already defined by Input 
specifications. Field length and decimal 
position entries are not needed because 
the compiler already has this information 
and has set aside storage space for the 
field. 



Length 






IBf 



RPG INPUT SPECIFICATIONS 



--4. 4-.+ .-i- 



Cj.,1 E;ruri, Mumt). 



f J4f [ 



ItfflTT 



5 
9l0 



ITBmo 
J>ESC 

303iCoST 



RPG CALCULATION SPECIFICATIONS 



Key.no 



Card Eleciro Numbe- 



tf i« » p n UM n » n 



m 



operation 



a a 30 31 32 



¥m 



factor 2 



»,a»>Hll.J>>H»:.W w« 



ai 



» 



43 44 48 46 <? 46, 



r\o\m\L 



l.<n«tt 



MnSlI 



J^i 



The result field TOTAL is a new field because 
it is not defined on the Input Specifications 
form. Field length and decimal position entries 
are needed so that the compiler can set aside a 
storage area for this field. 



46 



Result Field Length 

When you name a result field, make sure you specify one large enough to hold 
the results. Always consider the length of the fields involved in the operations. 
For example, if you are adding a two-position field to a three-position field, 
you must determine the largest result you could possibly have: 

999 

99 

1098 

Because there are four digits in this result, you would specify at least 4 as the 
result field length. 

If this calculation would occur many times in your program, as in a running 
total, you would probably need a result field length larger than 4. It is up to 
you to determine the largest field length needed; failure to specify a large 
enough result field can mean a loss of data. 



Decimal Positions 

For a new result field, be certain to place an entry in position 52. If the new 
field is to be numeric but contains no digits to the right of the decimal point, 
enter a zero. Remember, this entry indicates type of field (numeric or 
alphameric) as well as decimal position. If the result field is not specified as 
numeric by an entry in position 52, the compiler will not provide instructions 
for the calculation operation. 



Half-Adjusting Results (Rounding) 

In RPG II, rounding results is called half-adjusting. When the digit to the right 
of the last digit you want to keep is greater than 4, 1 is added to the last digit. 
The number 3.14159 rounded to four decimal positions becomes 3.1416. The 
same number rounded to two decimal positions is 3.14. 



RPG II Programming Language 47 



To half-adjust any calculation result, you place an H in position 53 of the 
Calculation Specifications form on the same line as the field to be 
half-adjusted: 



z z 



i TO ■;; aa...a3..;4 ?s ?g ;t 



mum 



a3 34 35 36 3? 3S 3fl 40 *1 4? 



aimm \ ^ 



Plus JMinmj 7rm 



LookijplFjrtuT 2)i 



High Low Equal 



m\LT 



In this example, DISCNT is half-adjusted. The entry in position 52 (Decimal Positions) 
indicates the number of digits to be retained after half-adjusting is completed. In this 
case, two digits are required. The multiplication and half-adjusting would be done like 
this: 

74.98 - — Assumed value of PRICE. 
X .06 -" — Constant representing 6% discount rate. 
4.4988 -• — Result which must be half-adjusted to 2 places. 

1 -• — 1 is added to 9 because 8 is greater than 4. 
4.50j8j8 -• — Slashed digits are dropped since only two decimal positions 
are required. 



48 



JOB 2 (TRNREG): DOING SIMPLE CALCULATIONS 



Job Definition 



Print a report listing all sales transactions for a week. This report is similar to 
the report created in Job 1. The only difference is the addition of the last 
column on the report which is the sales amount per item. Sales amount 
(quantity sold times item price) is not found in the input record and must, 
therefore, be calculated. 



RPG II Programming Language 49 



Job Requirements 

Input: Sales transaction file consisting of 96-character records. The format 
of the input records is shown on this record layout form: 



Transaction 



Nunib£.T 



Description 



UK'':' lit '].« js ii4"iiiT#M'iIillill!9!2ollll?.My-I»Il6]l'M23j«Jli^^ 



Quantity 



33[34j35j36[3? 



nee. 



18jii[4£[y42]l3]44j45j46|47j 



Output: A printed transaction register: 



Two decimal positions 



//. 


V 


•, ! ' ^ 1 -1 


f M n ^ 1 H ^ y I ij M A F L U S M 


IJ 


^ .40 


'.q-oo 




1 /. 


,' 




f hi 1 ', tV f A K t P 1 b A 


100 


.89 


dq.Ou 




<,/ -- 


^ ' rV '5 


■'ulijo 1/? HP bT rye 


bOu 


.1.1? 
1<.5. 7'1 


SbO.Ou 
?4l. =)6 






../ -_ 




T(WMr\AL k,LIP 


1 n^ 


i.l? 


■sip.oj 




, ^ 


" ^■' ' ' ' 


f I ° '; I N A 1 .i A « 


1 Oj 


".. 1 ? 


'<l?.00 






, 




I'v-i;, S'1L<I ATAPI tlR M 


hC'J 


. 1<) 


76. OJ 








' ■ ^ y 


( M 1 M " -, 1= A ' t. R ! u A 


hj 


1 . IS 


ai-Oij 










r H 1 7^ =>-, FA't R '.J A 


'» J 


1.1' 


'.'j.Ou 






■'/ 




Fl"!! jIl iWilL-l PkN 


<:nj 


1 . 1 h 


? J?.Ou 






. 1 :i • y 


r,iOt,s n^ ^jQx IS.jA 


Ivj 


H.va 


't'l.flu 










' >- '! J 1 '' J S t ! =) A 


^•nu 


. i? 


C.OJ 








" 


■ _ ■ 



This printer spacing chart shows how the report is formatted: 




50 



Job Specifications 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



p,o„.n, jr'sn taction Heqisfer 


KBvma 
Instruction 


Graptiic 


n 


"" 


- — 


— 






— 


CariJ ElectruNumt* 


'ri'm-^' John Doe. \d.„j/jo/-- 


K=v 



















! 9092 UM.'OW 



;=> /ti ;; 78 n ho 



m-' .^ ::z:L...[rMMM 



Control Specifications 



H 



Si«to 
Emcuu 



27 ;B 29 30 31 32 33 34 35 : 



The same files are used for Job 1. Therefore, 
the File Description entries are the same. 






File Description Specifications 



TRftN\S 
f REPORT 



Block 



fi 



iength of Key *^'eld or 
of Raoord Addran Fi«ld 



Type of Pil« 



Key Field 

Smarting 

Location 




1; 

nM\m 



Extent Ex 
tor 0AM 



t 



Entry 
>. 61 aj 63 w e 



Number o< Tracks 
for Cyiindef Over f( en 



Tape 
RewinO 



IBM 



RPG INPUT SPECIFICATIONS 



'•■"^Jranss ctio n Beqister 
'""•--" 7ohn Doe. V"- JJloJ- - 



<^Sl\ 



'rmmt'G^ 



I 






















_ 


1 




Rt'cord IdiTititicjtion Codi'S 


5 


; 










~ 


' 








— 


— 


1 


:;7 









n 




1 


1 


X 


' 




. 


; - i ; 


1, .„ ! 


Ln. 


- 


f- 


i 












Filename 




Pos.Iion 
;i 2? 33 n 




26 


' 


Posit.oo 


i 


ij 


- 


Position 


-: 


a 




Fioni 


To 


J 


J : ; ' 1 


...... 








, ., ,, ,,^ , , , , 1 





R 




1 


j 


M 


H 

55 


D 

16 










0.1 : 


-^ 


*■-■- + ■ 

1 
- • • -! 1 - • ■ 

+ i t t - 4 . 


" 


-. 




•- 


h 






^ 










' 1 ■■ 




^ 






■- '- - - 




— 




- 






5 3a 

i 37 

i ■ ■ 
i i '• 

1; • 
-4 ■' ■ 


a, 


ITBMf/d' 
DBSC i ' 




i 

i 


! 


i 
■i 


---fYr-H 







7 ; 

3 
4 '■ 












•i 


I 




.„ 


^^ 




; 1 

8 1 

9 ' 

1 iD 




- 


- 


PRICE 


































1 








u^ 








, . . - , 




■ 1 






r t 










-f 1 
' -^ - f 

I ; i 

j ; . 
t 1 


Input specifications are the same as for Job 1 
because the same input file is used. 




2 i 






• 


..,._ 


-- 


6 

7 

8 
9 



-^ 


1 


, 1 1 






- 






- 


; 




























































































- 














- 


- 


- 


- 




































" 


-- 


- 


. 




h-t- 






































1 










! 


















































--H 












!- 


- 








^ 




- 




































































- 






- 




:: 




t 


-^ 








1 






































^ 










' 


















































1 








-^ 
































































: 




il 


\L 


L 69 




1 

! 1 


9 W C9 


1 
J9 19 


_ 


_ 


— 


^ 


oq 


■iq 


tq 


rq 


?<; 


_ 





















„ 






L 


J 


_ 


L 








1 


__ 


J 


, 


L_ 



RPG II Programming Language 51 



IBM 



RPG CALCULATION SPECIFICATIONS 






Cdrd Electro Numb.=p 



GX21 9093 UM.'050" 

PnnU'd in U S A 



75 76 7 7 78 79 80 



35 



Qf; 



?a. J3:a4i-gti. ;» 2?. 



OiiL'ration 



>[f;|/.|7^ pi||C 



Facfejf 2 



33 w.ig M.gjj.ag. as ^g 41 'i:i 



.. 



Result Field 






tenaife 



^a 



Plus iMtiail Zm 



' 2 [1 < tl I 



tow 

stay 



-f 4- I 



This specification tells the system what calculation to perform. QTY must be multiplied by 
PRICE. QTY and PRICE are fields from the input record and are described on the Input 
Specifications form. Notice, however, that a new field, EXTCST, is created to hold the result. 
■We needed a new result field because we could not use any of the fields described on the 
Input Specifications form. If we had used one of them, we would lose information needed 
for printing the detail line. 

Any new field must be defined by describing field name, field length, and decimal positions. 
We chose the name EXTCST. Any valid name could be used. According to the printer spac- 
ing chart, the EXTCST field is 7 positions long with two decimal positions. We, therefore, 
used these figures when defining field length and decimal positions. 



1 1:^ . 



:i.'-:i''r"ii i .1 „±_ 



I I I 11 I 



T I 1 -I L 



IBM 



RPG OUTPUT SPECIFICATIONS 



fill l__l L- 



p'°3'"" Iran 



■Jbh 



sacfion Heqisfer 
n Doe. \°«'i/iol -- 



. '"r"":" I^"' ±1 



p.,.Hy 



GX?I 9090 UM.'ObO' 

PnntHtl in U S A 

/5 76 77 78 79 80 



SEPORT 



i -I- 







Output liidicdtors 



Wi 



•autq 

a 33 34 « mm 



Fie|<)N»iw 



UEmt 



one 

mm 3 

BXTCSfl 



C> 



Y 



40 41 43 13 



18 



















Commas 


to Print 


No Sign 


CR 




X 


Fie 


11 ov,. 






















Yfs 


Ye^ 


1 


A 


J 


Y 


Ud 


c 


Y<;s 


No 


2 


B 


K 




^le 


d Edit 


No 


Vn 


3 


C 


L 


I 


Ze 


1 


____N,, ^ _ 


No 


4 


" 


M 




Su 


p,„s 



Constant Of Edit 
( 9 10 n 12 13 14 



18 19 30 21 72 



4h 46 4; as 49 ^0 F)l 53 53 54 b'^ 56 E,/ 58 5^1 60 61 62 63 t 



This Output Specifications form differs from the one in Job 1 by only one 
entry. The field EXTCST was added because it is to be included in the output 
line. EXTCST is to be edited with commas. Thus, we use edit code 1. 



52 



Writing Specifications for Indicators 

So far you have learned how to use an RPG II progrann cycle for producing 
simple reports. However, actual business reports would be more complex. 
They would include more information, have page and column headings, and 
probably include subtotals and final totals. 

A report like that shown in Figure 1 1 would require printing four different types 
of lines: report heading, column headings, detail lines, and total lines. Some of 
these lines must be printed only at certain times: headings would be printed 
only at the top of the page and totals only after all detail lines are printed. To 
produce the report correctly, you must use indicators to specify when you want 
certain things done. 

To you, indicators are two numbers or alphabetic characters you specify on the 
specification forms. To the object program, indicators are like switches, 
located in the system. They mean one thing when on; another when off. You 
can use several types of indicators; each type signals something different. 

You must know how program cycle operations affect indicators in order to 
use in*cators correctly. In this section, indicators are discussed one at a 
time. You will learn when to use indicators, how to specify them, and which 
program cycle operations are associated with each type of indicator. 



TRANSACTION RfcGISTER 



R ANSAC T I ON 


I Tf H 


DESCRIPTION 


DATE 


NO 




7/ii/ " 


".13010 


CHOOl BOX loOA FLUSH 




'.IJl'.b 


CH1",8 BREAKER 15A 




'.11116 


1500 TWIN SUCRE! B 


7/2<./ - 


b0i029 


MOTOR 1/2 HP 60 CYC 




327802 


TERMINAL CLIP 




(2601 3 


TERMINAL BAR 




".11121 


150b SOCKI ADAPT BRN 




".12997 


CH173 BREAKER 3JA 




".1 3088 


CH176 BREAKER 60A 




".1117". 


C151 SIL SWI TCH BRN 




".1 3090 


CH005 BR BOX L50A 




718326 


FCe03 FUSE 15A 


7/27/- 


321071 


2-SPEED SAW 




325 781 


SATIN-CUT DADU SET 




".121",6 


CHl".3 BREAKER 15A 




'>73022 


6-VOLI POWER BATTER* 



UUANI IIV 


UNIT 


SALES 




PRICE 


AMOUNT 


10 


"..90 


".9.00 


100 


.89 


89.00 


500 


1.12 


560,00 
698.00 


2 


i'<t,.ie 


293.56 


lOU 


5.12 


512.00 


100 


"..12 


<.I2.00 


".00 


.19 


76.00 


60 


1.15 


69.00 


".0 


1.15 


".6.00 


200 


1.16 


232.00 


10 


"..98 


".9.R0 


200 


.32 


6".. 00 
I. 75".. 36 


1 


28.".'. 


28. ".i. 


1 


39.50 


39.50 


50 


.89 


".'..50 


2 


I".. ".5 


28.90 
l".l .3". 


WEEKLY TOTAL 


2,593.70 



Note: This report is similar to those shown before, but note the addition of headings and totals. 
Figure 11. Printed Report 



RPG II Programming Language 53 



CONTROL LEVEL INDICATORS 

Control level indicators are used when you want to calculate and print totals. 
Nine different indicators can be used (LI through L9), allowing as many as nine 
different levels of totals in the same program. The control level indicators tell 
the program two things; 

• When totals should be calculated. 

• Which calculations and output operations are total operations. 

A control level indicator in positions 59 and 60 next to an input field specified 
on the Input Specifications form determines when totals should be calculated 
and printed. This input field is called a control field. Whenever the contents of 
the control field changes, a control break occurs. A control break turns on the 
control level indicator assigned to the control field and all lower control level 
indicators. The system performs all calculations and output operations (total 
operations) that are conditioned by these control level indicators. If a control 
break causes L3 to be turned on, LI and L2 are turned on. This allows control 
over several levels of totals and subtotals. Examples are daily, weekly, and 
monthly totals. * 

In Figure 11, the records are grouped by date and a total of the sales amount 
field should be printed when the contents of the input record date field 
changes. 



54 



IBM. 



RPG INPUT SPECIFICATIONS 



«?l J0M4 iJM.OSO' 

























































































T 




1 


E 


O 

'8 




Record Identification Codes 


1 
1 

*2 




Fu-ld LiH;Jtion ! 


f ll'ld r\l,(;r,(. 


5 

i 

69 90 


■■■"rT"' 




71 77 7^ M 






1 


? 




















1 

1 

E 
» 
O 

5J 


s i ''■ 




- ^ 


Filename 




7t 73 J3 24 






i 
S 


» ?? ]0 31 




i 

33 


1 


36 36 37 38 




*0 


6 


-FQtll 


To 




1 

a: 

1 
s 

(r 
1 

6J fit 


■ 


6? 68 


;;:..,. 




o 


R 




« 46 «6 fl7 


A 


N 

15 



J6 


1 
5 
J 


I 
I 
I 


Mi : 










^ 

■ 


1 
1 












" 










- 




- 






- 


4- 




- 




„ 




~1 " 




- 






- 


# 


1^ 




1™' 






■^- 






1 ! 






















^ 1 ■ 


























h-j- 













IBM 



RPG CALCULATION SPECIFICATIONS 



is MacninnCo^l, 



T^yT 



IBM 



RPG OUTPUT SPECIFICATIONS 



isintis Machmei Corpo.jnor- 



IMZT: 



— +. i 



-f— ^- 



Control level indicators are specified at(T) to tell the compiler when total opera 
tions are to be done. They are used at (2) to tell which operations are total 
calculations. They are used with a T in position 15 at (?) to tell which lines are 



total lines. 



(.X21 W93 UM 0^0' 





r 


e 
5 

6 


6 _ 
o: 

Is 

J 8 


indicators 












































n 


Rcsull F 


kl 


% 


f 










1 1 

And And 


Factor 1 
18 i« w at w M 34 « M 37 


Opefation 


Factor 2 

33 34 3% 36 JI 36 J9 40 41 42 






Ndnii' 


Lsnoth 
49 50 SI 


- 
7. 


^>^^^ |Mirt»| ^->n' 




Line 
3 4 S 




^-U 






Corr.i,.,.. 


'' ' '""'""''^ 


! -?[l<3|i ? 




1 

9 


10 


,, 


1 


- 


,. 


1 


. 


„ 


(uok.,plF.J<^,, ?.„ 




M„;h 


Low 
&6 57 


Lmi.,i( 







\ '■ 


^^1 


^ 










~ 


-i 

t 






















■ ■ 1 
















j 




' ■ * ■ ■ 


I 

A 
\ 


- 








— 




:■;:,;: 1 ^ ;; ■ 






2 

r 1- 
3 


c 
c 


- 




\A 








































,,,.,. 1 , ,. 


-. 
























, , , , 
























, ^ .......,: . 


0^4, 

1 


c 


1 I 










































.J , 


.... 


, . . . . 



1 90-r.) "W ;i-iO' 



/6 v/ 'B T^ 90 



, 









































































E 

6 


Filename 


X 

1 


-c 
R 


Space 


Skip 


Output Intiicators 


Field Name 








Constdnl 


. :. . __| Plus -.mn 

or tdit Wok: 


71 n 73 74 


/ 






> r,.:n-i,(i 


Lme 
3 4 & 


^ 




g 


2 


1 


< 

?1 27 




i 


J 


tc 
3s 

i 




K 

a 

44 





E 


L 




1 


1 '■ 


.■' 28 


1 

29 


30 n 


■auto 

33 33 3* 36 36 37 






A 


D 


D 


^ B 9 10 11 1? Vi 





fl 




U 




A 


»5 


D 

16 


4- .1., .1 48 .fl 


) -.1 ■,; '■- : '.^ ■/, ',1. 


.' 'M W> 1.0 ..i ..,' •, ; ,..-. !,■, I.t. u, 06 t,'. 70 





1 















1 1 




- 




- 








1 


,M 


■ ■ 






r^ 










■ . I I , . . ! 1 , . 


"T~ 


"T- 





2 

















[i»>l 




- 


"n 










— 






















I J 1 









RPG II Programming language 55 



Program Cycle Operations 

Figure 12 shows the program cycle operations associated with control level 
indicators. The system can do calculations and output operations at two 
different times in one cycle: at detail time and at total time. Total operations 
associated with control level indicators are not done in every cycle; they are 
done during the cycle in which the control field changes. 

After a record is read, the program determines whether the control field in the 
record just read is different than the control field in the previous record. If it is, 
a control break occurs and the control level indicator you specified is set on. 
When the indicator is on, it means that all records in the control group have 
been read and total operations can be performed. Control level indicators 
remain on through the detail calculations and output processing of the record 
that caused the control break. They are then set off before the next record is 
read. START 



'^ 



Perform detail 
calculations. 







Perform detail 
output operations. 



Move data from record selected at 
beginning of cycle into processing area. 



^ 



•Q> 



Set off control level indicators. 



Program 
Cycle 



Read a record. 



>a 



Perform total output operations. 



/:? 



Perform total 
calculations. 



xn 







Change in 
control field? 
Yes, set on 
control level 
indicators. 



ti 



Figure 12. Program Cycle Operations for the Control Level Indicators 



56 



Detail operations for the record that caused the control break are done only 
after total operations for previous records. The control level indicator assigned 
to the field that caused the control break rennains on so that the first record of 
the group may be identified with that indicator. The record that caused the 
control break is not processed before the total operations are done, because 
information from that record would be included with information from records 
in the previous group. The totals from the previous group would then be 
wrong. 



RPG II Specifications 

To specify a field as a control field, you assign a control level indicator (L1-L9) 
to an input field in positions 59-60 on the Input Specifications form: 



NPUT SPECIFICATIONS 



> C.Kiri 








41 






i 






•• 








22 




^ 


?5 36 J7 3tt 




1 

46 


j 


from 

« «6 46 47 






f- 


-4— 




- 




"" 




















1 






1 









(oMf\ 





5; 




1 


i iflH 

hullfdlors 






















































% 
















i, 
















^ 




a: 




Minui 












1 












BB SC 




E^m 




ft' SB 




7i r^ 73 ?• 


TE 


11 








. . . 




, y ,, , 



LI , assigned on the same specification line 
as the date field, tells the system to use 
DATE as the control field. 



To specify which operations are total operations, you assign the same control 
level indicator in positions 7-8 on the Calculation Specifications form and in 
positions 24-25, 27-28, or 30-31 on the Output Specifications form. On the 
Output Specifications form, you must also enter a T in position 15. 



RPG II Programming Language 57 



IBM 



RPG INPUT SPECIFICATIONS 

G.,,l)h,r j 



GX31 909-3 UM/050* 
Printed in U S.A 




IBM 



RPG CALCULATION SPECIFICATIONS 



I- 



1 1 r [ ^ T 




Cdrci Eleciri) Number 







PageQJot_ ^^^ 



GX 21 9093 UM/050' 
Primed in U S.A 



75 76 77 78 79 




n I 'j 

i fi 



[ d ] 
n \ 

rt 

-trf- 



IBM 



Use a control level indicator in positions 7-8 to show that a total operation is to be 
done only when a control break occurs. The operations on line 01 and line 02 are 
done during the detail processing of each input record. The ADD operation in line 
03 is a total operation that will be done when LI is on; that is, when the DATE 
field changes. 






FtH-f -f-l-FH+Ftti-ffl^fft 



TTI -f- 



RPG OUTPUT SPECIFICATIONS 



::2::iK 



Card Elucrro Number 



P^ae[_J_Jo 



GX 2 19090 UM/050* 
Pfinied in U S A. 



75 76 77 78 79 : 




No Sii-jn 


CFt 
a' 




X 
Y 


Remote 
Plus Sign 
Diile 






2 


» 






Field e. Ill 


?i 


c 


L 


^' 


Z<.fQ 


4 


...P_.. 


.". 


-_ 


Supiiress 



Const£int or f tlit Word 



116 6 7 8 9 



19 m 21 2> 23 24 ' 



18 A9 60 61 62 Sn 64 ;,b 5G 'j! 68 59 60 C1 6? 63 64 66 66 fi ' 68 69 70 



Op T Plum 



The T in position 15 indicates which output 
records are total records. Every total record 
should also have a control level indicator 
specified to tell the system when to do the 
operation. The output operation described 
on lines 06 and 07 is done only when LI is on. 



¥H 



58 



You can specify up to three different indicators on a line on the Output 
Specifications form. If you are using only one indicator, you can enter it in any 
one of the three positions. The control level indicators specified on this form 
can be used to condition an entire output record or only certain fields in the 
output record. 



IBM 



RPG 



OUTPUT 



SPECIFICATIONS 



4- - ■-- 



'[!> 



X2! 90yO UM/ObO' 
inti'd in U S A 



lb /6 7 7 78 V9 I 



ov 



TP 



W 







. .X-r 1 



la 



m 



Output Indicjtois 






Ll 






field »*»« 



^MtM 






iSi 



I 



is 

IB 



i 



c 



Uc, I .1 i D 1 M j 

CoiisUuit or tdit Word 



Fi^id t.i 



i '.'<J IjO ( 



A control level indicator specified on the same line as the field name (7) 
indicates that the field should be written only when the control level indi- 
cator is on. Indicator LI will be on at detail output time only for the first 
record of each group. This record is the same record which caused the 
control break and allowed the total operations for the previous group to 
take place. DATE will print only on the first detail line of each group. 
However, a control level indicator specified on the same specification line 
as the line type entry in position 15 (T) indicates that the entire line 
should be written when the control level indicator is on. 



» wig Ml 



Using the Blank-After Specification 

In RPG II, you can set fields in storage to blanks (in the case of alphameric 
fields) or zeros (in the case of numeric fields) after they have been written out. 
You do this by entering a B in position 39 of the Output Specifications form. 

This is a particularly useful feature when you are doing total operations. It 
allows you to use the same field over and over for accumulating and printing 
totals. For example, you could use a numeric field to accumulate totals for a 
particular group of records. After the totals are accumulated and printed for 
that group, you can use the same numeric field to accumulate the totals for the 
next group of records. To do this, place a B in position 39 for the total field. 
If you do not place a B in position 39, the totals for the second group of 
records would be added to the totals for the first group of records. 



RPG II Programming Language 59 



JOB 3 (TRNREG): USING CONTROL LEVEL INDICATORS TO CALCULATE 
AND PRINT TOTALS 



Job Definition 

Print a weel^ly sales transaction report that lists all daily transactions and gives 
the total sales for each day. This report is similar to the reports produced In 
Jobs 1 and 2. All items sold each day are listed. Item number, item 
description, quantity sold, unit price, and sales amount (quantity times unit 
price) are included for each item. The date is printed only for the first 
transaction encountered that has a new date. The total sales amount for a day 
IS printed after all transactions for that day have been recorded. 



60 



Job Requirements 

Input: Sales transaction file consisting of 96-character records. The records 
are arranged in ascending order by date. The format of the input 
records is shown on the record layout form: 



Jramaetiort 
bate 



miui 5 6 



Ittm 
Humbtr 



7 [a 1 9 |IO|ll jl? 



Item 
Dtscription 



lITilis |l 6 I l?TlT T l9rMT?l ]??[?3f2 4Tz5l26]nj?8f 2i[30]3l]32 



Quantfti/ 



Unit 
Price. 




Processing: 

• Multiply quantity times unit price to find sales amount. 

• Find total of all item sales per day. 

Output: A printed transaction register: 



Two decimal positions 



Group 
Indication 




^ 1 /^-i/ - 


".1 3010 


CHOJl BOX lOOA FLUSH 


10 


"f .90 


<.9.0U 




'.lil'.fc 


CH1>,8 BREAKfcR 15A 


100 


.89 


89.00 




<. U 116 


150J rwIN SUCkFI B 


500 


1.12 


560.00 
698.00 


1 /Zt./ - 


■jO J0<'9 


MlITUR 1/2 HP bO c rc 


2 


i'..6.7e 


293.56 




3! 78J? 


TfcOMINAL CLIP 


100 


5.12 


512.00 




3?5qi7 


TtRMINAL BAR 


100 


'..12 


".U.OO 




"»! 1 1<?1 


1506 SOCKT ADAPT BRN 


hOO 


.19 


76.00 




".1^9.97 


CH173 RKFAKtR 30A 


60 


1.15 


69.00 




"tl 3088 


CH17(> BRc AKfcR 6UA 


'.O 


1.15 


^,6.00 




"il 1 1 7'. 


C IS I i IL SWI TCM BRN 


iOO 


1.16 


232.00 




".l 30V0 


ChOOS BR bOX ISdA 


10 


<..98 


'.9. 80 




7183^6 


FC803 FjSt ISA 


iOO 


.32 


64.00 
1 ,75'..36 


-"^ 






— ^ 



This printer spacing chart shows how the report is formatted: 





l2I49(7t*ai234S«r»IO)2349«ra«012349«r>9ai2349 


l4449S9595ft95»»«»t«««««ft7 7777777 7 1 %%%%%%%% %%y %% 

>7a90 1 2349«7«90l 2149<7tt01 2S43«7a»01tS49«7«»0 12 




' . T 


















4 1 + "^ T 






* ... _ _ _ _1 , , 1 


i"~^ I 


D 


♦ "^f/Wy^ I'xwx -^mti) 


\m\i\iii\iiii iim"~iiy-ii"ii'MT-iv:. 










• ::\::Eiii::::y':vu'uuK Wi 


7/ jir.'-.^i^V^,! i\L^^imw^ci} Vjlifl-' 






, i II 


T 


10 1 1 1 


-^---^—A w- )^xk;t55Ji:^)" 




11 


. j X 11 1 




'», lililjh l>t,c,zt'. ji .1 jc'ajIiZ 


'/^|f-> 1 '<\Xii\' 






.i.XL-= -_|_-_j__| _t_ . ^AJ/tT 




'«- - i llviiJIt i,y<^.is'AiM\ii It 3'i'/2 


li y J;°S ^>7ci' n?{j^^|. |>||,^:^ 









RPG II Programming Language 61 



Job Specifications 



il Business Miicni.u'sCtiiii 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



yin.i 


Graphic 
















Caid Electro Number 


iruniuri 


Key 

















P.g.ai of 



IderMific 



GX21-9092 UM/050' 
Printed in U.S.A. 

75 "^6 "?? 7B 79 BO 

































Control 


Specifications 


























H 




Si/r (u 


o 


o 


tr iJ 14 


1 


1 
16 


1 

i 


i 




S 


1 

22 


Nurlilnir 
Ot Print 
Posilicjns 


3 

S 
< 

2fi 


7/ ^-H .'y ji! n s) T', J-i ;!'j is 


.17 


1 


I 


,1 

1 
S 

a. 




1 
43 


\ 

3. 


1 

6 

? 

f 


1 


I 
-i 
1 


9 


•o 

J 


1 

Q 
1 


1 

i 

S 


i 1 


1 


1 


o 


":;!;: i;';;::;;;;:';;!,",*;!:::,"!:'; 


L.'ir 


f 


No new entries are n 


«,» n, ,1 ,2 :: n 


1 


H 








1 






1 










1 i 
1 ! 




i I 1 1 1 1 




1 










lade on this form, i | ; | 














































'« 


K 




n 






K 


H 


Kg 


■ 


m 


■ 





File Description Specifications 



7^^/? 



A/S, 



fi/W[r 



Block 

Lfn^th 



?6 



?^ 



Modi! ol Ptocessiny 






Record Addruis Type 

■■■Tyjuii'ftf^iii 

B^ <ifAi)^tiaftitfAf» 



Overflow Indicator 






Symbolic 
Device 




wis; 



u 



Namf 
Labe 



lixtnt Em 
lor 0AM 



Stongt (ii4k 



fiKFf 



fiife»lniiHtOiiilH^ 



m a 



Tim. 



%£ 



RPG INPUT SPECIFICATIONS 



IBM 



^ Transact /'on Pe.^isTe.r 
'•■"■John Doe. [•''"••■ ifiof-- 



Krym^ 


G.,ii)h,c 












i 


Kev 

















Cinl EkTtHi Ni.tr 



GX?t 9094 UM.'05C' 
Pnj,t«fin USA 



75 76 77 79 /Q 80 

■■\Tmmm 




Input fields are described as before. In this job, totals must be 
accumulated and printed. You know that totals must be printed 
whenever a record with a different date field is read. The date 
field determines when total operations should be done. The date 
field is the control field and must be specified as such. This is 
done by the LI entry in positions 59-60. 



62 



IBM 



RPG CALCULATION SPECIFICATIONS 



GX21-9093 UM/050" 
Prmtflb in U S A 



p. og..m Tr,3nS3cfion Regist&r 




For each item, QTY must be multiplied by PRICE to get EXTCST (sales amount). To get 
the total of all sales made during the day, EXTCST is added to DAYTOT (the field used to 
accumulate daily sales total). 



Lir 



XL 



IBM 



RPG OUTPUT SPECIFICATIONS 



GX?1 9090 UM,ObO" 




Two different lines-detail and total-are needed for this report (note D and T in position 15). 
The detail line is described first. According to the report, the date field is to print only for 
the first record in a new control group. We do this by conditioning the date field with the LI 
indicator. The date will now print only when LI is on; that is, for the first record in each 
control group. 

The total line, which contains only one field is described next. The entire line is conditioned 
by L1 because it is a total line. The B in position 39 causes the DAYTOT field to be reset to 
zero after it is output, but before sales from the next group are added to it. If DAYTOT were 
never blanked out, the totals of all days would be accumulated. 



m m g 



* fiS 85 i5 Sn 55 t 



Jll 



I I i m I n 



RPG II Programming Language 63 



FIRST PAGE INDICATOR 

The first page (IP) indicator is used on the Output Specifications form to 
specify the headings you want printed only on the first page of a report. 
Headings, usually printed at the top of the page, include such things as 
report titles or column names: 



IBM 



RPG OUTPUT SPECIFICATIONS 



1" 



X'21 '1090 UM/ObO' 



/b 76 n 7!i /<J 80 



o 








^ 


,. 




Ol 


i| 


I h 1 


t1lS 


- Fieid 


Mame f 






...J- , 


. ' i:...n,.US ''/ 


■-„ 


i),i 




N 


S 


l'i 


CR ! 


1 


X 


'" ■ '] 










c. 


Fjleii.inK- * — 
1- 


1 












71 73 ?C1 74 


1: 


1 






I.,i 


a 

1 

44 


r'jii ■ -J ,' '■■ 4 j i) ! M 


.,,.Mta. I 




>- D 


IM 


ij 


•9 


i 

!S J? 34 44 




3S 36 37 3 


Cofibtdiit or Fdit WoKl 

. 1 ^ , , ;, L. / H ■! in " ''J M '-l ''> 'f; " IH '5 ^0 7\ -J-^ ?i 7A ■ 


R 


17 1 19 3 


AMD 


' H <) ui n ij nln )& 


V, .1., 4.' -1,-. -!■) ',0 M ^; Si '■'1 ■/. '-. ■>.' '>»; ^'! i>0 (.1 hj (.1 ','1 (iS bb h' f,n h-i .'i; 


o!,! o 


PRl/^r! 1 ' h 


h 




- 1 

1 
1 
1 


1 

i 
1 

1 
J 


1 
\ 

1 


t \ 


1 ; 


- 


I 1 ' ! 1 ' \ ' ' \ ■ \ ' ': ! ! 1 1 1 ' ■ ' 

















I 


?j 
31 

.[ 
s 

6i 

i 

' 

8 

9 

1 



1 ^ 

2i 


1 


: 


--- 




- 


; 1:1 

1 ■ : i 

j ! ; 1 ! ■ 


i ! 


!l 








- 


- 




1 Li 

■■14- 


j ! , , 


. 


I ..... . - , 1 




- 


:: 


— 


1 
1 

1 

2 


5 

6 
! 

a 
9 



1 : 1 
I J i 


Space should be left at the top of the paper in order to avoid printing close to the perfora- 1 
tion. The paper is inserted into the printer so that the first print line will be just below the 1 
perforation. The skip to line 06 before printing in positions 19 and 20 will begin the print- 1 


i 




1 
1 






































-■-- ■ 1 ■[ 

L i 1 










^^^ 


1 








1 i ; M ! M 








III 
11! 















i 


M ■ ~ 


- -- 


i 
- 1 


~""f 


— ■ i 




- 


- I 1 : 


- 




' ' M 


1 

1 








i 






1 
i 


^- i- 

1 ■ 
■-[ 








;ito 








' 1 ■ ! 


1 
















• 


- M i r 

„ , . 1 j — 

_ __ i 1 .J .i.. . 


M i i N 




i t 

' 1 


i r 1 1 1 
. 1 . ! 1.-. 








■■^rin 






- 






: 




_._ 


i i 















1 




1 


" 




j ! . i i 1 ; 1 ^ 


J l.i i.._ 


_ 







64 



Program Cycle Operations 

One operation in the program cycle is concerned with the 1 P indicator (see 
Figure 13). The IP indicator is automatically set on at the beginning of every 
job, so the first operation taken by the system is to print any output record 
conditioned by 1 P. After this is done, the first record is read and the program 
cycle operations are executed in order. 

Headings conditioned by 1 P are printed only once-at the beginning of the job 
on the first page of the report. Any heading records that are not conditioned 
by 1 P are handled in the same way as detail records. This means that they will 
be printed along with detail records in every cycle. 

START 



k Perform heading 

|\ operations. 

Perform detail \\J Perform detail 

^^^ calculations. ' output operations. 

^ c 

Move data from record selected at 

beginning of cycle into processing area. 

Set off control 
level indicators. 



Read a record. 

Program 
Cycle 



C^ 



Perform total output operations 







. .... t:^ 



Perform total Change in control 

calculations. J^ field? Yes, set 

on control level 
indicators. 



Note: The first operation in the first program cycle concerns output operations conditioned by the 
first page (IP) indicator. 

Figure 13. Program Cycle Operations for IP Indicators 

RPG II Programming Language 65 



RPG II Specifications 

Heading information to be printed on the first page of a report is specified by 
using constants (actual information instead of field names). Constants for 
headings must be specified according to these rules: 

• Constants must be entered in positions 45-70 of the Output Specifications 
form. 

• Constants can contain any of the characters in the data character set (the 
256 EBCDIC characters). 

• Constants must be enclosed in apostrophes. (The beginning apostrophe is 
always entered in position 45.) 

• No field name can be used on the same line as a constant. 

• An end-position entry must be entered for every constant. 



FieW iMame 



•AUTO 
»::» 3* as 36 37 



trcsf 



40 ■!! 4-2 43 



^ 



1\5 

fi 

^3 






No i ^" 



Const;inI or Ldil W',r(l 



'umii COST.' 

; I j ; ! I ■ ■ : I ■ ■ ■ 



0tLrTf{f(Nsft err ON R 



E6IS 



TER' 



-\-^ 



r 

Ttt 



4„.|_ 



Valid constant. 

. Invalid constant. The constant must be preceded 

by an apostrophe in position 45. 
■Invalid constant. A field name cannot be specified 

on the same line as a constant. 

■ Invalid constant. The last character in the constant 

must be followed by an apostrophe. 

■ Valid constant. 

Valid constant. Although the constant is specified 
correctly, it will be unreadable when printed 
because no spaces, were left between words. 



66 



Headings too long to specify on one line of the Output Specifications fornn can 
be split and placed on separate lines. You must, however, give an end position 
for each part. 

The heading shown In the printer spacing chart takes 28 positions. A constant 
containing a maximum of 24 characters can be specified on one specification 
line. Because the entire heading cannot be specified on one line, it must be 
broken into parts. The examples given show three different ways to specify 
this heading: 





I 

2 2!2 


2 2 2 

4 5 6 


1 1 

2 2|2|3 
T 8J9|o 


5 5 5 
1 2 3 


5 513 3 3 3 « 
« 5|6 r e 9 


4 4 

) 2 


4 4 4 
3 4 5 


! I 

4 4 4 4 5 5 5 

6 7 8 9 12 


T 

5 5 5 5 5)5 
3 .4 5 6 7 8 9 


[ r I ' 

66666666 

1 2 3 4 5 6 7 


667777777777B8e( 
8901254967890123 


4S67890IL 






' ' 


I 






' J 






, i_i_J ^_i_ 1 






t-'-t^ 1 ; . 






' ' ' ' MM r 


' : ' 


I 1 ' 


-|rM|-++|-^-"^ 










' 


,1 1 , , 


■ ' ! 












-- -t i--t-^-4 ., t .. 






, ^ 


j! 


_L 1... . . . M > 








,r'^^5A 


; H. L.+. ...^_t.. 


] 1 




, , ; !PM,tlY 


cTjfpW .}^Q,\^-m-^'TV[jr 


1 


^- 






... 




>-_ -^.;-^,,-K_ 




; , ' : 1 \ 


> i 1 ' ' [ - 


- • • \ .1 


' ■ 1 1 M , i 1 i 1 1 


M[ ; ' 



7^: 

71 



Consiani ot ("ilii VV< 



18 19 ?0 -.'^ 






/*'''! ' ■ ' ' ' M 



UMM. 



(luiput IndiCciturs 



Xf.aB, :M jMj.M.a? 



51 

M 
7 



: 7:y„ 



Con'.lcirit oi r.(!it Word 



19 2U 21 ?2 



Vfiiqf' ' 

TfiflNSfiCTION' 
'/REGISTER' 



I; 
--f 4 

3 



Outpjl InilnMIo 



Fitld Nxrha 



, .'AUTO 



//-■■ 



6Y 













^.S,qn 


CR 




^ 


Remove 
Plus Sign 


1 
1 


C 


J 

K 

1 


V 


■ Date 
F.eld Ed 


4 


D 


M 




Suppress 



Constant or Edit Word 

J 3 IQ n 12 13 la 15 16 I' 



1 'jB b9 60 61 t)? B3 tja 






STEH' 





" 


nan 




- 


r 













Heading lines should be specified first on the Output Specifications form. The 
best method is to specify your record types in this order: heading, detail, and 
total. 



RPG II Programming Language 67 



OVERFLOW INDICATORS 

You use overflow indicators to: 

• Print headings on every page but the first page of a report (the IP indicator 
allows headings to be printed on the first page). 



• Control where printing begins and ends on a page. 

• Advance forms from one page to the next (provided a skip specification is 
also used). 

To understand how overflow indicators work, you must know how the concept 
of overflow is defined in RPG II: 

• Overflow-Lines that remain to be printed after a page is full. 

• Overflow handling-Advancing forms to a new page after the last line has 
been printed on the current page. 

• Overflow line-The last line to be printed on a page. 

• Overflow page-The new page to be printed when overflow occurs. 



The last line to 
be printed on a 
page is known as 
the overflow line. 




Overflow occurs 
when the overflow 
line is printed. 



Printers use continuous forms (a series of pages divided by perforations). Overflow 
handling refers to the means of advancing forms from one page to the next. 



68 



Overflow can be handled automatically by the systenn or through specifications 
you write. 

Note: This discussion assumes that you are using standard 66-line forms in the 
printer. 

Printing always begins on line 06 (assuming the operator positions the first 
page properly) and ends with line 60. Overflow occurs after line 60 is printed; 
that is, forms advance to line 06 of a new page. 

When overflow is handled automatically, heading lines can be printed on the 
first page if 1 P is used. No instructions are provided, however, to print 
headings on overflow pages. Heading lines are considered to be detail lines 
and will print on each detail cycle if the conditions placed on printing are met. 

When you do not want overflow handled automatically, you can specify on the 
coding forms how you want it handled, using overflow indicators: 

File Description Specifications 





E 
























(%ty(» ■ 




Mode of Pfocessing 


1 

1 


— 


— 


— 








"1 






— 








" 


i 


_ 


— 


— 




— 


-] 




— 






— 


„ 


— 


File Addilion/Unordered 




Filename 

7 3 9 10 n 12 13 14 


!! 




File Designation 


28 


U/r^mtsnfiiiv 




Symbolic 
Device 

47 48 49 50 51 53 


Name of 
Label Exit 




5 


tmtmSti^id i 


Line 

3 4 5 


s 

E 
6^ 


a. 

11 




eM««rtW ■■ 


Htn 


or nKonf A(«(tF*it i^mm 




iff^t^mir^tit^lumi, 






Sequerice 




Record Atldteis Type 




Number of Extents 


>?. 


1 


PHUFartJWt 


31 




^dr9tmeSm 


$toriiiM.i>i#i( 








Block 
Length 

20 31 2'2 23 




"* 
^ 


Overflow Indicator 




File 
Condition 


33 34 


samnt 


Continuation Lines 


Ul U8 






1^ 


Option 







2 


J 


f 




-U 














- 


































1 
1 






, 




-- 






































... 





































3 




F 




















- 












- 






- 


- 






-y 












p 


R 


i: 


w 


r 


£ 


R 










- 












- 


' 












— * 


" 




"" 


^ 


^^ 


mf 




r 


T 


rr 





4 




F 






- 






[- 








y 


- 










- 




























































' 





5 




F 




























































^- 












































' 





6 


_^ 


F 


L 


1 


L„ 


L 


J 


^, 


J 


_^ 












_J_. 














































































^ 




















** 



IBM 



RPG 



OUTPUT 



SPECIFICATIONS 




Card Electro Number 



•m-_ 



GX31 eOO&l UM/OSO* 



75 76 77 78 79 80 



Program 
Identificatio 



Commas 


Zero Balances 
to Print 


No Sign 


CR - 


X " Remove 
Plus Sign 

Y » Date 

Field Edit 

Z = Zero 

Suppress 


Yes 
No 
No 


Yes 

No 
Yes 
No 


2 
3 
4 


A J 
B K 
C L 
D M 



Constant or Edit Word 



2 3 4 S 6 J 8 9 10 11 12 13,14 15 16 17 



I 20 21 22 23 24 



46 47 48 49 M SI 52 53 t>4 55 56 57 58 59 60 6! 63 63 64 65 66 67 

rm '^ 



\ t i - 



Assign an overflow indicator to the printer at (7), then use it on the Output Specifi- 
cations form at (?) to show which operations must be done when overflow occurs. 



RPG II Programming Language 69 



Program Cycle Operations 

Figure 14 shows operations in a program cycle in which overflow indicators are 
used. 

The program sets on the overflow indicator you assigned whenever the 
overflow line is passed. By setting the overflow indicator on, the prograim 
remembers that overflow has occurred. As you can see in Figure 14, overflow 
indicators can be set on at one of two times: at detail time when a detail 
record prints on the overflow line or at total time when a total record prints on 
the overflow line. Notice that the only time a check is made to see if the 
overflow indicator is on is right after total output. If the overflow indicator is 
on, overflow operations are done in this order: 

1. Print any total lines conditioned by the overflow indicator. 

2. Skip to new page, provided a skip specification was made on a line 
conditioned by the overflow indicator. 

3. Print all heading and detail lines conditioned by the overflow indicator. 



70 



If multiple detail or total lines are to be printed in a single cycle, printing may 
occur past the designated overflow line. This is because all detail and total 
printing for a single cycle is completed before overflow operations occur. 



START 



^ 



Perform detail 
calculations. 







Move data from record selected at 
beginning of cycle into processing area. 



"Q^ 



Overflow indicator on? Yes, 
do overflow operations and 
set overflow indicator off. 



Perform heading 
operations. 
Perform detail 
output operations. 

If overflow line 
has been 
reached, set on 
overflow 
indicator. 



^ 



Set off control 
level indicators. 



Read a record. 



Program 
Cycle 



4^" 



Perform total output operations. 

If overflow line has been reached, 

set on overflow indicator. 



x:^ 



^ 



Perform total 
calculations. 







Change in control 
field? Yes, set 
on control level 
indicators. 



c* 



Figure 14. Program Cycle Operations for Overflow Indicators 



RPG II Programming Language 71 



RPG II Specifications 

There are eight overflow indicators: OA through OG and OV. You can enter 
any one of these indicators in positions 33-34 on the File Description 
Specifications form. If you have more than one printer file, however, you must 
specify a different overflow indicator for each file. 

After you have specified an overflow indicator on the File Description 
Specifications form, you must specify the same indicator on the Output 
Specifications form. This specifies what you want done when overflow occurs. 

Besides specifying the overflow indicator, you must also specify that forms 
should advance. You do this by placing a skip specification in positions 19-20 
on the Output Specifications form. 



IBM 



?nim- 



ER 



RPG OUTPUT SPECIFICATIONS 






Cddl FU'ctrc NumU-F 



-lU" 



789 10 1i 12 13 



m 



Output Indicatorb 



B^* 



"AUTO 
33 3i3 3< ^ 36 : 



':-~^\ 



I No Skji \ cn 



onslant or iiilit Wort 



(.iX;'l 9090 DM ObO' 



7& 11 ,8 ?9 8U 



I 71 ii n u 



The skip specification should be made on the first line you want printed on the 
page (usually a heading line). The skip entry is the line number of the 
beginning line (usually 6). 

Always remember to enter a skip specification for advancing forms in ei 
heading line conditioned by the overflow indicator. If you forget, forms will not 
advance when overflow occurs. 



Using Spacing with Overflow 

You already know that the overflow indicator is turned on when a record is 
printed on the overflow line. However, this indicator also turns on whenever 
the overflow line passes under the printing mechanism. This means that 
spacing to a line past the overflow line to a line on the same page causies the 
overflow indicator to turn on. Figure 15 shows an example of spacing after 
printing. 



72 



IBM 



RPG 



OUTPUT 



SPECIFICATIONS 






'FRfWrY/^ 



Oul[)ut ImiIumK, 



¥iMi 



"AUTO 
33.3?'>* Se 36 ^7 



amwi 



2^ 



1 I ') I M 



Assume, for example, the overflow line for a job Is line 60. Assume also that 
the detail line specified prints on line 59. Printing the detail line does not cause 
the overflow indicator to be turned on. However, this detail specification allows 
for two spaces. Spacing two lines moves line 61 into printing position. The 
overflow line (line 60) has been passed so the overflow indicator is turned on. 



-^-r 



IL 



1: 



Figure 15. Spacing after Printing 



RPG II Programming Language 73 



Using Overflow and IP Indicators Together 

The overflow indicator is most often used with other indicators. However, we 
will discuss the use of overflow indicators only with the IP indicator. Both IP 
and OV cannot be on at the same time. 

If you want headings on all pages of a report, you can use both the 1 P 
indicator and an overflow indicator. 1 P causes headings to print on the first 
page; the overflow indicator causes them to print on all succeeding pages. If a 
record should be printed when either one or another condition occurs (either 
1 P or OV is on), you can specify indicators in an OR relationship. 



IBM 



O 



XT" 



RPG 



OUTPUT 



SPECIFICATIONS 






'MSWrf 



'-i 



H 



SiW 



Ouliiiit Imlu.Mur 



P 

OV 



fMAWim 



'AUTO 

^2 A3 34 » M :^ 



iJ 



S3 



3;6 



CoMM,li;t Ol [ ilrt V:!< 



-pfiLm nEPpRf' 



'I' 

'OTY SOI'd' 
'TOTAL moUNT' 



If a record can be written when either one of two conditions exists, place the conditioning 
indicator in an OR relationship. Specify the indicator signaling one condition (IP n this 
case) on the same line as the line type. Place the indicator signaling the other condition 
(OV in this case) on the following line with the word OR in positions 14-15. Then specify 
fields and constants to be included in the record in the normal way. In this example, headings 
will print when either IP or OV is on. 



Space and skip entries are not necessary in the OR line. The entries in the line preceding the 
OR line also apply to the OR line. 



LAST RECORD (LR) INDICATOR 

The last record (LR) indicator is associated with end-of-job procedures. The 
program uses LR to indicate that the last data record has been read and that 
end-of-job processing is to take place. 

Use of the last record (LR) indicator is optional. When LR is not used in 
specifications, the compiler automatically supplies end-of-job instructions. If 
you use LR, you are indicating that certain operations, such as printing a total 
count of all records read, must be done after all input records are processed. 



74 



Program Cycle Operations 

Figure 16 shows the operations in the program cycle associated with the last 
record indicator. RPG II is set up so that it senses an end-of-file record 
containing some identifying information to indicate end of the data file. Each 
data file has an end-of-file record. 



Whenever a record is read, the program checks to see if all records in a file 
have been processed. If all records in all of the files have been processed, the 
program sets on all control level indicators L1-L9. It also sets on the LR 
indicator to indicate that all records have been processed. All total operations 
(those conditioned by LR and L1~L9) are performed. After total operations 
have been done, the program checks to see if LR is on. If it is, processing 
stops. 5^^p^ 



Perform heading 
operations. 
Perform detail 
output operations. 
If overflow line 
has been reached, 
set on overflow 
indicator. 



^5 



Perform detail 
calculations. 



c> 



Move data from record selected at 
beginning of cycle into processing area. 



Overflow indicator on? Yes, do 
overflow operations and set 
overflow indicator off. 



Program 
Cycle 



LR indicator on? Yes, end 
of job has been reached. 






Perform total output operations. 
If overflow line has been reached, 
set on overflow indicator. 







Perform total 
calculations. 







Change in control 
field? Yes, set 
on control level 
indicators. 







Set off control 
level indicators. 



Read a record. 



Last record? Yes, set on 
control level and LR 
indicators and perform 
total calculations. 






t^ 



Figure 16. Program Cycle Operations for Last Record (LR) Indicator 



RPG II Programming Language 75 



RPG II Specifications 

The LR indicator is specified by an LR on the Calculation Specifications form or 
Output Specifications form. This entry specifies which operations are to be 
done after the last record is processed: 



IBM 



RPG CALCULATION SPECIFICATIONS 



IBM 



m 



,t^i,i^?I,.^?„i^^„^^>^^^^^'^^' 




7 



m 



Oulijul Inilirjto 



33,HJ4 35 as 37 M m «S:4J:4? 



Lso-jth 



|Mii«n| 



RPG OUTPUT SPECIFICATIONS 







3? 3a 3* 3S JK 37 



Cdnsl.ml (H r.dil Wiinl 



// m /'i Hii 



The LR indicator is specified at (T) to tell the system which calculations are to be 
done after the last record is processed. The LR indicator is specified at (J) to tell the 
system which output operations are to be done after the last record is processed. 



76 



JOB 4 (TRNREG): USING FIRST PAGE, OVERFLOW. AND LAST RECORD 
INDICATORS TO PRINT HEADINGS AND TOTALS 



Job Definition 

Print a weekly sales transaction report that lists daily transactions, total sales 
for the day, and total sales for the week. This report is similar to the one 
created in Job 3. The only difference is the addition of headings and final 
total. 

The report title and column headings are printed on every page of the report. 
All items sold each day are listed. Item number, item description, quantity 
sold, unit price, and sales amount are included for every item. The date is 
printed for the first transaction in each group. After all transactions for a day 
are listed, the daily sales amount is printed. A final total of all daily sales is 
printed at the end of the report. 



Job Requirements 

Input: Sales transaction file consisting of 96-character records. Records are 
arranged in ascending order by date. The format of the input records 
is shown on this record layout form: 



Transaction 



iihl^Akll 



Nwmbtr 



'lUMl"]"!!? 



X3t.s<iriptior\ 



I3jr4ll5] ieTiTjieTis I20l2 ijaziyj] 24|25 [26[271 28| 29l30]3ll 32 



Qirtntffy 



33 34 35 36 3? 




43J44l45J46]47]4«]49[' 



Two decimal positions 



Processing: 

• Multiply quantity times unit price to find sales amount. 

• Accumulate sales amount to find total item sales per day. 

• Accumulate total daily sales to find total weekly sales. 



RPG II Programming Language 77 



Output: A printed transaction register: 



TRANSACTION 
DATE 



7/23/-- 



7/2<./ 



7/27/- 



ITFM 

NO 



'.13010 
'.121'.6 
'.I 1 I lb 



503029 
327802 
326013 



321071 
325781 
'tl21<.6 
573022 



TRANSACTION REGISTER 
DESCRIPTION 



CMOOl BOX lOOA FLUSH 
CH1'.8 BREAKER 15A 
1500 TWIN SOCKET B 



MOTOR 1/2 HP 60 CYC 
TERMINAL CLIP 
TERMINAL BAR 



2-SPEEO SAM 
SATIN-CUT DADO SET 
CHl^S BREAKER 15A 
6-VQLT POWER BATTERY 



UUANTITY JNIT 
PRICE 



10 
100 
500 



2 146.7 8 
100 5.12 
100 



1 

1 

50 

Z 



28.4'. 

39.50 

.89 

1'..'.5 



WEEKLY TOTAL 



SALES 

AMOUNT 



<.9.00 

89.00 

560.00 

698.00 

293.56 
512.00 



28.'.'. 
39.50 
*'..50 
28.90 

l'.1.3<. 



2,593.70 



This printer spacing chart shows how the report is formatted: 





Li'*»«7«*O'2'«»«'»»OI2J45«7«»0123»»«r»»012345S7890123«»«7«»OI234S«r«»0125.«5«7«»OllS4S«';;oi2J 




' I 




I X-- ' i ^ i 




J -j- -t- -1- -- , 1 , 




4 ' i " ' ! f - ' ■ ■ t - ■"■ ' ■ 




i T "^ ^ ' . ' 1 ! ,. 4 f ..■ 


ri 


♦ .__X--i -1^ TRA'JsjifTi (^ niisief 






H 


•-- — iMlfiWm _ IcEk de^cr(^t;(Ja i ! quIawt/tV yJA/ " S/1ces 


ti 


t ?3i£-Ih - ^3 1 1! " "R/cej 4i^yjij 




It , ! : ! ' ! ' ; ! ' ' 1 ! 




11 1 ' ! 1 ' 1 1 1 1 i 1 1 " ! 


[> 


11 X—'^^l'^'^UU-X—mm 1 1 mm^iiiMmmi^ \ i' i^yv rm-tt il^iii-i\ 








11 ±--i??:ji^_JZz^>i/:ii^£i/<^^ ".'-i-kmrn'mtL^ ^ii%kc'-'imui '//#V" 




" - 1 i ' . i 


T 


u i-T- ' ^ ■ 1 i ni<^.xs<^-K^ 




,7 1 T T~^ j"j~ M 1 ' ! ^ ' 7^ 




1! t ■■ '■ 1 li ! (^'''-^-'i'-^-J 




1* T 1 tH; I! ■ ■ It ! ^*f" t^f'-'T--'' ' ■'■ 


r 


M.. _. . _ _.j : \te.KL\ ^c^Ai\ i.MUXW.it 








n__. A^^jA~^h.A}"\.cii ^',('\iU IUaH' i X X i(I ^'il-^^ni'T^rJ^.i-:;, i 




11 L. J__J^....| j, 1 1 




21 I .ICLjlt. i''C<..ce itUJei'n cfM/l\ atki loial li/,(".ii \\ 








»• ^. _ j'q]i' <Ty/?ac ■? ht?for^'. j'^/rV'' ^'W''' cm i'i:'i.\ j-/.rc.' ' 




" .... 1. . i ' 1 i "^ 




«l 1 1 M M M 1 h 1 \ W— H \W in M ! i ' -H \ K-[+h-^---t-H 1 



78 



JOB SPECIFICATIONS 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



p rog,. , n Jransac tlon_ Pieaisie.r 

\il°^l':'^Tghn Doe- __ C°'"'J'7^?/f ~ 



K..,„„; 


Graphic 




~' 


'' 




- 


-■- 


K.'v 


--_ 









.jom 



/b // m /9 KO 



File Descript 






F(ffltw?B: 






ii^ 



U 



,.M 



Mode of ProceisiFKj 









The only new entry here is the OV indicator. Headings are 
to be printed at the top of every page. Overflow must be 
controlled in order to specify exactly where headings are to 
print. The overflow indicator is, therefore, assigned to the 
printer file to tell the compiler that it should not handle 
overflow automatically. 



IBM ,.„ „ 

'i:! Transaction Re-oister 

•:-- -John Dos. \" I//0/-- 




RPG INPUT SPECIFICATIONS 




\rm/\Ka'& 



IBM 



tlilJllllllBlilllltfii 

RPG CALCULATION SPECIFICATIONS 



0DRTE 
ID ESC ' 

}TY : ^ 







^ 


J 


fl(i 


,,s 


















!■ 




























-J 




u 


i'l. 1 


Mmi'. 
























■* 










'^9 «t3 




ftj M 




6? se 




n rj n /4 


l 


I 










- 




























-..4'. 
















- 




— 




"T- 




„ 






... 


_^, 




„ 




~ 




















- 





Transaction Pe.aist'S.r 




x^i ^m'i UM o')(i' 



\t\MM:p\ 



Lines 01 and 02 are the same as 
for Job 3. Line 03, conditioned 
by LI, will be done only when a 
control break occurs. Once daily 
sales have been accumulated for 
a group (LI is on), daily total can 
be added to the field WEEKTO 
used for accumulating weekly total 
(Weekly total could also have been 
obtained by adding EXTCST to 
WEEKTO for every record read.) 



RPG II Programming Language 79 



IBM,,,,, 

^p...,.„, TransdcTion fle.^ ist&r 

I'™ -""'John Doe. ['-""/Jioj-- 



RPG 



OUTPUT 



SPECIFICATIONS 



lb /f. n 1% I'-i 80 




Coii'ildnt or f.dit Wor :l 



'70f^J^<^^ON^ : Hi £61/ 






ITEM '. 



'DffT^B 



■ yd 



SPECIFICATIONS 



I P,,„,3,..„ j^^^^ _DQe..__ I °:"i I Ij°/— 







"\" i 


"]" F" 










4 







- ^ . _ _ 




Kev 


.__.. ..i_. 


1 



'im 



(.X7t 40't0 DM.OSO" 
Pnnlcrl .n U S A 

/b V6 ^/ /!! '9 80 



■■-I 4 



la 



Output Indicitors 



/.J 



K aa ?4: 35 '!» a? 



HMwi 






2 

3 



— t^ 



3ii 
If 

ft 



Consl<)nt Of Filil Woid 



19 m 2\ 12 2' 



' l^f j£/(iLlr 



L' 



Six different lines are to be printed, so six are described. The three heading lines should be 
printed either when IP is on (first page) or when OV is on (overflow has occurred and forms 
have advanced). Thus, each heading is conditioned by IP and OV used in an OR relationship. 
Notice the first heading line has the skip specification. This must be made before forms will 
advance. 

The weekly total is printed only once on the report, after all records have been processed. It 
is conditioned by LR. A constant is specified for this total record so the words WEEKLY 
TOTAL will print as indicated on the printer spacing chart. 



80 



RECORD IDENTIFYING INDICATORS 

In the jobs discussed so far, we have assumed that all records in the input file 
were alike. They did not necessarily contain the same information, but they 
had the same fields and the same kind of information in each field. They were 
of the same type. 

However, in real jobs, often data files will not contain records of all the same 
type. Files often contain many types of records with different fields and 
different information. When using different record types in a job, you must 
have a way of telling the system what operations (calculations and output) you 
want done for each record read. Record identifying indicators are used for this. 



RPG II Programming Language 81 



Program Cycle Operations 

Figure 17 shows program cycle operations associated with record identifying 
indicators. A record identifying indicator is set on right after a record is read 
and is set off before the next record is read. 

Normally, record identification indicators condition detail calculations and detail 
output operations because detail operations are done for the record just read 
(the one associated with the record identifying indicator). On the other hand, 
total operations are not performed for any one record type; they are done after 
a certain number of records are processed. 



START 



'^ 



Perform detail 
calculations. 







Move data from record selected at 
beginning of cycle into processing area. 



-Q^ 



Perform heading 
operations. 
Perform detail 
output operations. 
If overflow line 
has been reached, 
set on overflow 
indicator. 



^ 



Set off control 
level indicators. 

Set off record identifying 
indicators. 



Overflow indicator on? Yes, do 
overflow operations and set 
overflow indicator off. 



Program 
Cycle 



LR indicator on? Yes, end of 
job has been reached. 



jC^ 



Perform total output operations. 
If overflow line has been reached, 
set on overflow indicator. 



^ 



F.ead a record. 



Last record? Yes, set on 
control level and LR 
indicators and perform 
total calculations. 



t:i 



Set on record 
identifying indicator. 



Perform total 
calculations. 



<1 



Change in control 
field? Yes, set 
on control level 
indicators. 



ti 



Figure 17. Program Cycle Operations for Record Identifying Indicators 



82 



RPG II Specifications 

These are the RPG II specifications you must make when using different record 
types and record identifying indicators: 



IBM 



RPG INPUT SPECIFICATIONS 



1 9094 IJM ObU" 



k,;t„," ' 


K(-v 


- ■■ 1 

i 

... .1 


-- 


--]/- 












Assign a record identifying indicator (a 2-digit number from 01-99) to each 
record as (T), then use that same indicator to condition calculations at (T)and 
detail output operations at (?) , which must be done for that record only. 
Identify each record type by describing a code which identifies It at (7). 
If records must be In a certain order, indicate that sequence at (J). 



RPG II Programming Language 83 



As we said earlier, you must describe each type of record in your input file. 
This description includes the names of all fields used from the record, the 
location of the fields, and the type of data in the fields: 



Custowar 

Numbsr 
CCUSTNO) 



I|2|3|4|5|6|tU 



Order 
(ORDNO) 



1 10 I II | i; | i3 | i4 



m 

m 



ITEM 

Number 

(irCMNO) 



18 19 20 21 22 23 24 25 





T 




















i 


i 


z 

1 


^ 


B 




Recow Identification Codes ^s^ 


i 


S 




F 


nl. 




i 

in 












I 








; 


F 


eld 










:1 


^ 




1 


1 

1 ° 

19 30 


1 




3 




Field Name 


o 

f ? 

-c E 

Is 


r 


Indicators 


*r Tsm?i* 


Line 
3 4 5 










I! 




Filename 






25 


If 


5 
is 


iatB** 


3,» 


i34 




z > 


: ™ 
» 41 


'^fi^;;:;;. 


4S m bO ill 


PItiS 




Blank 

G9 '0 


7 8 9 10 n 12 13 



A 


m 

1 


i 


mmmM 





1 






r/? 


fl 


f/ 


S 








•^ 
r? 


s 
^ 




1 


-1-- 


■,iv 


«r 


s^ 


s 




4 


- 






fi 




-- ^ 










:f; 




' V. 


> 


^ 


! 


^^ 


i 


;^: 


'i? 




! 1 1 S 


C 
> 


1 






„ 


rr^ 


1 

-!■ 


^ 


^ 
ii. 













2 














- 


1 


i 


■■■^ 


, 


«* 


•^ 


^ 




"* 











3 






. -p 










- 










1: 




OR 
Si 


DUO 




- 












4 
5 








^ 










^■:- 














t 


« 


S/M/V 




~1™ 














































' 










1 


t 


■ ; : ! 














6 

7 










■:^ 


















': 


















:■;; ^- 


















>* 
















„ 
















'^ 

















8 ! 










1 






* 


•^ 






















... 










9l 

— t— (— 


"\ ^ 1 




— ,- 

















































When you describe fields from each record type in the input file, give a unique 
field name to every different field from all record types. If, however, two or 
more record types contain identical fields, you can assign the same name to 
the field in each record type. Only one storage area would be assigned for the 
same field from several record types, but it would not matter because the 
information in the field is the same. 

You must do more, however, than merely list the fields in all records because 
the RPG II compiler would not know which fields were in each type of record. 
Furthermore, it would not know which record it was reading. To give the 
compiler a means of identifying records, you use record identification codes 
and record identifying indicators. 



84 



Specifying Record Identification Codes 

When you create records, you should include an idenTlfication code in each 
one. For example, to identify an item transaction record, you might place the 
code TR somewhere in that record. You can use any combination of letters 
and numbers for the identification code and you can place the code in any 
record positions. 



When you describe the record on the Input Specifications form, you use 
positions 21-41 to describe the record's identification code and the location 
where the code is located in the record: 



RPG INPUTS 




For each character In the code 
you must specify: 

(T) Where in the record the 
character is found. 

(T) What the character is. 

(T) The letter C to indicate 
character. 

(T) If the code requires that a 

character must not be present, 
enter N before the letter C. 



You can specify a code of up to three characters on one line. If your code 
contains more than three characters, use the next line and the word AND in 
positions 14-16. Figure 18 shows some examples of how to specify record 
identification codes. 

IBM ,. ,. 



RPG INPUT SPECIFICAT 



Codes 



T in position 80 
ST in positions 1, 2 



1A in positions 95, 96 



No A in position 95; 1 in position 96 " 

ABCD in positions 1-4 .- ) 



i 



?1 St W 24: 



ilAf/? 



I 



CT' 



ii 



1^ 

3 



i 



S 







iff+ it 


■>■ 


Si H 
■ 1 


f8"T| ic^ 




p ' ':'. 



Figure 18. Valid Specifications for Record Identification Codes 



RPG II Programming Language 85 



Specifying Record Identifying Indicators 

You specify a record identifying indicator in positions 19-20 for each record 
type used in the job. Record identifying indicators are numbered 01-99. Use a 
different number for each record type. 

A record identifying indicator is specified on the same line as the identification 
code. All fields for the record are then listed, starting one line below the 
identification code and identifying indicator. The file name need be specified 
only once, on the specification line describing the first record in the file. 



IBM 



RPG INPUT SPECIFICATIONS 



GX21 9094 IIM.(B0' 



Koying 


Grapliii; 














Kcv 














..ij]^.. 



iiin 



Wi^^fi 



I . 



m 



0A 



Record identification Codes 



' ^ r 



cc 



cs 



m 

t +-4 



C/? 



T 




cust'Mq 



3^SA 



CUST^O 

SHiP'ro 
nfPzp 



r icid 

Inciicators 



Two record types from the master file are described here. One record type is identified by 
the code CA in positions 1 and 2. It is assigned record identifying indicator 01. The other 
record type, which is assigned record identifying indicator 02, is identified by ST in positions 
1 and 2. Note that no file name is used for the second record type. The compiler assumes 
that this record is in the master file because MASTER was the last file name given. 



W4 M 



H i-fif^-j |- 



H m^ w»\-\ '\ v-\^ I 



I, f I ; I' l vi :: :.i y \ I 



After reading a record, the program checks the identification codes to 
determine which record it has read. When it finds a match between the code 
on the record and the code stored from the Input Specifications form, it turns 
on the record identifying indicator associated with that record. This is the 
program's way of remembering which record it read. 

Record identifying indicators can be used to condition calculations, output 
records, or output fields. In this way, the program performs the proper 
operations for each different record type. 



86 



When you use record identifying indicators to condition calculation and output 
operations, you are assured that these operations are done only for appropriate 
records. If you do not use these indicators, operations will be done on all 
records. 

Record identifying indicators should be assigned even when there is only one 
record type in a file. If you do not use them, the compiler prints a message 
telling you that record identifying indicators have not been assigned. 

The record identifying indicator should also be used to condition detail output 
records. This prevents detail lines from being written on the first cycle. If the 
detarl line is not conditioned by a record identifying indicator, any constants 
you specified on the detail lines would be printed even though the first record 
has not been read. 



Specifying Record Type Sequence 

Sometimes records must be in a particular order within a record-type group, 
but at other times the order makes no difference. When records need not be 
in a particular order, enter two alphabetic characters in positions 15-16. 
Different alphabetic characters can be used for each record: 



WE 



4-+-t 



M 



Record Identification Codes 



u 



u 



Field Location 



■■F*(WR:^ 



RPG II Programming Language 87 



If the records must be in a specific sequence, you must make entries in 
positions 15-18. 




(T) Positions 15-16 (Sequence) contain numeric entries (01-99). 
The sequence entries must be in numeric order. 

(i) Position 17 (Number) tells how many records of this type 
to expect in the record-type group: 

1 = One and only one 
N = One or more 

(T) Position 18 (Option) indicates whether the record type is 
required in the record-type group: 

Blank = Record type is required 
= Record type is optional 



Positions 15-16 should have an entry for every record type specified. If there 
is only one type per file the entry should be alphameric. If you fail to use a 
sequence entry, the compiler prints a message saying that no entry was made 
in positions 15-16. 



88 



JOB 5 (STOKST): USING RECORD IDENTIFYING INDICATORS TO PROCESS 
DIFFERENT RECORD TYPES 



Job Definition 

Print a stock status report. This report is printed whenever the Inventory is 
updated. It gives detailed Information on all active merchandise. The first line 
for each item in the report shows standard descriptive data for the Item: item 
number, item description, quantity on hand, and quantity on order. This 
information is taken directly from the input record. 

Subsequent lines give the detail on current transactions involving the item: 
sales to customers and receipts from suppliers. This Information is also taken 
directly from input records. 

Quantities remaining on hand and on order are calculated for each Item and 
printed after ail transactions for the Item are listed. 



Job Requirements 

Input: An Inventory file consisting of three different types of records. 
Formats of the three record types are: 



/TEM MA3T£ R -RECORD 



8 



Wumbcr 



2 3 H 5 6 7 



_9_ I()_jl^_12^j3^j4_l5 16 IJ|l8|l9 20 21 22 23 2< 25 26 27 28 29 



Descr/ption 




Name ISSUl ^ECORD 



Two decimal positions 



N 

u 
O 

8 




Quantity 
6old 










1 


2 


3 


4 


5 


6 


7 


T 


9 


10 II 


12 


13 


14 


15 


16 1? 18 I9|20 


21 


22 


23 


24 25 


26 


27 


28 


29 


50 M 


_ 








J 






__. 


1 












_ Li_Lj 


, 






1 




^ 


J 








RPG II Programming Language 89 



ILCglPTLBECORD 



a 
o 
o 


Numbtr 


Qiwntity 






h 


5 


4 


5 


6 


I 


8 


9 


lOllI ''i 


IJ 14 


15 


16 


!? 


16 


19 


!0 


21,22125 


24125 


2fc2; 


28129 


30 


31 


32 


33 [34 

i 




_ 










L- 








i 














1 


. 










. 



,35|36[3J 



The file is organized in ascending order by item number. For each item, one 
master record is required. Issue and receipt records are optional. When 
present, however, there may be any number of each. Records for each item 
are in this order: 

1 . Item master 

2. Issue(s) 

3. Receipt(s) 



90 



Processing: 

• Find total number of each item sold. To do this, perform the calculation 
ISSUE + TOTAL ISSUE = TOTAL ISSUE for each issue record. 

• Find total number of each item received. Perform the calculation 
RECEIPT + TOTAL RECEIPT = TOTAL RECEIPT for each receipt record. 

• When all transaction records for one item have been read, find new 
quantity onhand (ONHAND + TOTAL RECEIPT - TOTAL ISSUE = NEW 
ONHAND) and new quantity on order (ON ORDER - TOTAL RECEIPT = 
NEW ON ORDER). 

Output: A printed stock status report: 



STOCK STATUS REPORT 



I T "^ M HO 


DESCRIPTION, 


QUANTITY 
ON HAND 


QUANTI TV 
ON OROER 


TRANSACT ION 
auANTITY 


<.ini6 


B500 TWIN 

ISSUE 

RECEIPT 


SOCKET BLUE 




90 8i'« 




500 
Q '.'■■> 


50 
5 00 


'.1 U?J 


B506 SOCKET ADAPT BRN 

ISSUE 

ISSUE 

ISSUE 




325 







20 
38 
10 










2 5 7*» 




0** 




<.11173 


C15i: SIL 
RECEIPT 


SWITCH IVJRY 




50 
200*- 




150 


150 


'.1125', 


AeiO PULL 

ISSUE 

ISSUE 


CORD GOLD 




52 




75 


16 
30 



RPG II Programming Language 91 



This printer spacing chart shows the format of the report: 



1-4- H- 



6'6i6[6 



7 7 7|7'7 7 7 7 
1 2 31415 6 7 



-i *-^-- 



M I i 



ST 



OCK 



STATU 



Si mfom 



' M l! 



+4-+- 



■+^ 



-+-,+: 



10 



Jim #0 



04$ 



; r'DtTtDrr^Tt 



-t^+- 



m 



-±+ 



w^: 



-v-W 



xixix:x'xxx^x 



t-t++4- 



R'liPTTloW 



I du:;^N 



J.. l .. . ., i .. ' .. i .. i . 



XiXX!X:X'X;(,XX 



XX 



Nl 



T'lTV 



m. 



nx 










I I ' i I ! i t i 



w 



,x 



TR'dtfS'PiC 

ctmHfij 






'-7t— ^-+- 



B. 



r 



13 



T 



-i- i i i I- 



-i4- 



\LS^M^ 



.REiQi^Zi 






i M ' i I I ^ I 



44^ 



]X|XvXX 



+-rt~ 



imx 



ii^ 



EV 



j^ 



m 



»v 



+-'— + — ^-^^- 



Vs+- 



flwtl) 



I I ' " I I I I 



XX,, XiXX*" 



^rWpfiRy 



_,x:x^i;XA\ , 



1»T- 






! ' ' 1 M 



I ' ! ' ! I I 



20 



21 



22 



23 



24 



25 



26 



27 



21 



m. 



M I M 



+4- 



-^+— +- 



. +.^_^t.i4 



■++- 



T*TT 



+4 



1 — r 



-+J — k 



^+-4-t-4--- 



rn i j ^ i j e , ; 5 , P 



Slo'u'b'lie' 's!p 



4-U- 



r /;nt' krd 



s.Cj ,a,5;t: e:lr 



ce 



de 



._+. 



b.€ 



3^ 



KS! 



i-^-^ 



tfe 



I r? 






-i ' ' I ^-"-+T' 



--+-t 



1 I . ' I , ' ! . < , i ■ 



nd itoTail J 



i • i 






^jn^.i+v — ^- 



I i 1-^-4-4 



VC'rV P:g |9;e. 



H—t; 



olf .t:Ve :r:ep 



,d7^: 



P ; HaS'/z : e We 



w. On Hdrii' 



^\nd^ /^ gv j : qn 



OTJTT 



IBM 



Job Specifications 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



i! Machine) Corp 



p-9'3m Stock Stalus 


Keying 
Instruction 


Graphic 
















Card Elecirp Number 


Programme- Joh O D OG^ \ ^^** V'^/" ' 


Key 


















Proqra 
Idenm 



GX21 9092 UM/050* 
Pruuet) in U.S.A. 

7b 76 7 7 78 79 8Q 

































Control 


; 


Specif 


Ications 


























H 




S./e I.) 
Coni:>ile 


1 

1 

10 


o 


Execute 

J? 13 )4 


1 


1 
1 

5 


1 


1 


£ 
20 


? 
1 

21 


aa 


Numbe 
Of Pnn 
Position 

73 21 : 


1 




























1 


















Two files are used for the job: one input and one output. In the job description 1 
given, the output file was associated with the printer, but the input file was not 1 
associated with any device. Darkened polumns show required entries; the entry 1 


1 


H 




— 


U 


1 1 




— 


1 


— 


L 






I 


c 


lepenas on tne d 


iV 


ice 


D 


e 


n( 


J 


Jb 


ei 


J. 








^ 


^^ 


■ 




^ 




J 



§ 






+-t:-f-+^- 



Vi 



File Description Specifications 




92 



IBM 



RPG INPUT SPECIFICATIONS 



""Win Doe. 



Ijioj- 



C,j(d Elfcuo Niii 



GX21 9094 UM'OSO' 

Pnnl.Hlin USA 



.[sMMt] 



I 

,• 

on ] 

D 3 1 ] 

1 11 i ] 
1 1 : 


File-idm... 1 


^ Record Identilication Codes 


Field Location 

X Fram To ^ 

n «««9,4? 48 4-1 so :,, 6 




v 


Fiel 

i::|if 
*■ 1 ? ■J:.'. i-i,is s» 


cators 


% ; ; : PMitioo , i iVsilion _ j Pesitioi) ' - : S 

isi ■ iS-6 i|,5 , ifjl 

W '!■; i;i :.() ?y 22 23 « ,-■, to ,•/ 28 2& 30 31- :w as <4 3B 3ft yr 3a (.] 40 ^1 ftj 


\ Fteld Name 

i 

> 


" filar. k . 


B 
A sT'd 

. ■ i> 1 l(. M 1.. 1 : T.1 15 15 


■ 1 1 ' i 1 1 

i i . ■' 

• • 1 . ! 1 ' 


/ I^T i Cm 




.:■ 1 1 : 


: 1 1 

'TfeMm. 

-Dm:, ^ 

jTfmph 


1 i ::i ' I 








-^■'i r]i- 


~ 1 .,J™ 


- . -.,-,- 




. :~:r;cj^^ 








-^ : ~™^-„ 






I^osiff: I CI 


T: i^ ■■ 






. ™ _J^- — „ _ ^ 


■■"^■■'S !'7^ 


; 


Xa i u'-si 


Ncs'ft. t ;/? 


t r 

i ■ 1 y 


1 ! ■ 


:■ ; - — 






i 


4-1 \-\ -1 — 4 - - 


-^^-4 m 


All three types of records m the input file must be described. Because they are to be arranged in a certain 
sequence m the record-type group, they are described in the order they will be read. The first record in the group 
IS the Item master record (identified by M in position 1 ). The 01 in positions 1 5-16 indicates that this record is 
list. The record IS required (position 18 is blank) and there must be only one per group (1 in position 17). It is 
as..gned record identifying indicator 10. Ail fields found in the record are then described. Note that the record 
code appears as a field on the record layout form. However, on the Input Specifications form it is not described 
as a field but as the record identification code. 

The second record in the group (02 in positions 15-16) is the issue record, identified by 1 in position 1. There may 
be several of these records per group (N in position 17). The record is optional (0 in position 18). The record 
Identifying indicator 20 is assigned. Fields in the record are then described. The third record in the group is 
described as were the previous two. 

ITEMNO field in the item master record is assigned as the control field. When it changes, ail transaction records 1 
for the Item number have been processed. 1 



RPG II Programming Language 93 



RPG CALCULATION SPECIFICATIONS 



IBM 

in:: 



SToch; Status 

■ d'ohn Doe. ]°"' il'o/- 



X?1 9093 IJW O'^n" 



lb ?6 '/ /8 7H 80 



c 







R |Minusl Z.;r 



E<in 



Low Eqiiii 
&6 57 '-." [.: 



fil/V^D; 'f/BWfapftL- 



fOTl?£C 



f 



To update the quantity on hand and on order, total number issued (TOTISU) and total number 
received (TOTREC) for each item is needed. Quantity sold is found only in the issue record. 
Thus, the calculation to find TOTISU is done only when the issue record is read. Record identifying 
indicator 20 was assigned to the issue record. When 20 is on (an issue record has been read), we can 
calculate TOTISU. Thus, the operation (line 01 ) is conditioned by indicator 20. The operation to 
find TOTREC can be done only when a receipt record is read. The operation (line 02) is conditioned 
by 30, the record identifying indicator assigned to the receipt record. 

Calculations to update quantity on hand and on order are total operations and can be done only 
after all transaction records for the item have been processed. They are conditioned by LI which 
is set on when a new item number is read. 

The operations on line 06 and 07 must be used to clear the total issues (TOTISU) and total receipts 
(TOTREC) fields after the quantity on hand and on order have been calculated. 



94 



IBM: _„e_ . 

""" - St ocjf_ _stafus _ 







!8 
; 9 



511 

j 1 

h\ 
I3 I 

— r--i 
4 I 

-■| I 
B ; 

6 ' 



2 i 



uffl^UT 



H 

H 

PR 



P^ 



D 



t I 



l-Q- 



3M 



la 



RPG 



n t| t I nil to s 



OUTPUT 



SPECIFICATIONS 



X21 9090 UM/050' 

.rued in U S A 



75 /8 71 78 79 



3-__^_ :;:;"i„„„[s0q/fi]7 



^ip 



V 



P 



IP 



Z^0 



w 



30 



'11 



r-i 



Fteid Wame 



3 H 34 35 i« 3i 



UEM/io 



7MM 



--L* I 



mwo^oi 



ISSUES 



'^CWfT3: 



m 



■OMH 



'59 



? 

as 

71 



56 



11 



1? 
^'8 



•is 



o Sign I CfM - 



Constant 01 t dil Word 



PkiLSign 






MIISISUE 



75 76 7; 78 79 



s;:;„„„„|s]7P51sl7i 



: t. 



^RECfXPT 



i ! 






Heading lines are to print on every page. Tliey are conditioned by IP and OV used in an OR relationship. 

Not all detail lines are to print for each record. The first should be printed when the item master record 
is read. It is conditioned by 10, which is the record identifying indicator assigned to the item master 
record. The second detail line prints when an issue record is read, so it is conditioned by 20. The 
third detail line prints when a receipt record is read. It is conditioned by 30. 

The printer spacing chart shows that the words ISSUE and RECEIPT are to print on the detail lines. 
These words are not fields so they are entered as constants on the appropriate detail lines. Note that 
asterisks indicating totals are also entered as constants on the total line. 



' 69 89 Z9 39 59 1-q VJ i9 i 



H 






RPG II Programming Language 95 



RESULTING INDICATORS 

Sometimes your decision to do a certain operation is based on the result of a 
previous operation. Resulting indicators allow you to specify which operations 
you want done and the conditions under which the operations are to be done. 
Resulting indicators can be used to determine such things as: 

• Whether a result is larger, smaller, or equal to a predetermined number. 

• Whether a certain result is plus, minus, or zero. 

Program Cycle Operations 

Figure 19 shows the operations in the program cycle associated with resulting 
indicators. Resulting indicators are set when the associated calculation 
operation is performed. This means that resulting indicators can be set either 
at detail or at total calculation time. 

Resulting indicators are not set off automatically. They change their setting 
only at the time a calculation is performed or when they are set off 
intentionally. For example, if a resulting indicator is set on by a detail 
calculation, it retains this setting until the next time it is used as a resulting 
indicator. 



96 



START 



'^ 



Perform detail 
calculations. 
Set resulting 
indicators. 







Move data from record selected at 
beginning of cycle into processing area. 



Perform heading 
operations. 
Perform detail 
output operations. 
If overflow line 
has been reached, 
set on overflow 
indicator. 



-Q^ 



Overflow indicator on? Yes, do 
overflow operations and set 
overflow indicator off. 



Program 
Cycle 



LR indicator on? Yes, end of 
job has been reached. 



Perform total output operations. 
If overflow line has been reached, 
set on overflow indicator. 



^ 



Set off control 
level indicators. 
Set off record 
identifying indicators. 



Read a record. 



Last record? Yes, set on 
control level and LR 
indicators and perform 
total calculations. 






C^ 



Set on record identifying 
indicator. 



Perform total 
calculations. 

Set resulting 
indicators. 







Change in control 
field? Yes, set 
on control level 
indicators. 



ti 



Figure 19. Program Cycle Operations for Resulting Indicators 



RPG II Programming Language 97 



RPG II Specifications 

The type of operation used to check the result field depends on the type of 
result being checked. If you want to determine whether the result field is 
larger, smaller, or equal to a certain number, you must use a compare (COMP) 
operation. If you want to determine if the result field is plus, minus, or zero, 
use an arithmetic operation (ADD, SUB, MULT, DIV). You can specify resulting 
indicators 01-99 on these specifications forms: 



IBM 



RPG CALCULATION SPECIFICATIONS 



Miitional Bus.neis Machmei Co. 



Graphic 












[^ 




Key 

















Card Electro NumbPr 



X?1 9093 UM'050' 



7G i; /8 /y 80 



'LD-^ ^-"..mzii 



Wl 



And And 



%MMMM.MMMM^' 



7V, ?■! 30 Jl J? 



1.34 35 38 37 3a 38 AQ Ji 4g 



4 1 I i] 



tenyth 



RPG OUTPUT SPECIFICATIONS 



mt 



2h<?il 



L k (Fa 21 



uT' 



IJDJfl Inlsrniit 


onal Buiin 


It IVlKh.I> 


MCorpt 


,.,.on 


























Program 


Keying 
Instruction 


Graphic 








^ 






" 


Card Elec 


roNu 


Tiber 


Programmar 








Date 


Key 

















































CD"'__ 



-- \ - 



\ — ^ t- f-j- ■ "t- 

VAIW.X. 

GX31 9090 UM/ObO* 
Printed in U S.A. 

76 76 7/ 78 79 80 



Program 
Identific 



o 




















1 


ft 
R 


Siaci 




Rk 








n 














™-. 


























— 




~ 


— 




— 


— 






— 




— 


— 


n 




Filename 








FwKI Nsme 




CR 




X - Remove 
Plus Sign 

Y = Udte 

Pield Edii 

Z = Zero 

Sijpprt:ss 






Line 


1 

E 
o 

6 




J ""' 


_ -.^^^, 




1 
< 


1 


r 
< 

21 22 


And And 








r 


A 
Ft 
C 
D 


J 
K 
L 
M 


38 


1 


End 
Position 

Output 
Recoul 

40 41 4^ 43 


Ik 

44 


Nil Yes 2 

No j^ No 4 


n 


«: 


1 


i 


24 


25 


1 


27 


28 


1 






•auto 

3* » » 35 « 37 






A 


i 


D 








J a 9 10 n 12 13 

— 1 — 1 — 1 — 1 — 1 — \ — 





J. 




W 


18 


• 1 J 3 4 5 6 7 S 9 10 11 12 13 1« 15 16 17 18 19 20 21 22 33 24 ' 


A 




D 
16 


30]3j_ 


-- 




-1 


45 46 47 48 49 50 51 52 63 54 55 5C 6? 58 5!i SO 51 62 B3 M 65 66 67 68 m 70 


(1 





















- 


- 




- 




- 




p 


ri^' 




1 


1 


i_; 


- 






- 


i 


!" 


_ 


_. 


- 










1 

1 \ - 




^ 




! 1 




1 : 

1 ; 


1 1 


"! 1 ' ! ! M ! 1 I 1 


- 




- 


■*" 


„ 


CI 

























! ' i i ' 1 ' 


1 ■ ' 


-1 
i 

--4- ■■ 
I 






1- 










CI 





















■v- 


y 














Pi : i rr- 


■t-t 
i i- 








"""" 


— 


~ 


CI 



























~ 


















- 






- 




1 






- 












n • r r^ 




- ■ 

-}■ 
I 








j 
i 












Ci 


5 

















— 


- 




■^ 










- 


- 




- 


























6 

7 






h- 

























. 








M j ' j M i ' ' 




■ 1 


i 
1 


































1- '■ 

' ; I 
! i 


. ' j ' ■ ! i i 1 : 1 : 1 I 1 1 ' 1 ■ 













8 



































i 1 j 1 ; ; 1 I . 1 . ,-: . ; 1 , . 1 .. 1 : ; 1 






































































- 




-A....l__i„,J. J__l , I A 



Resulting indicators are assigned at (T), then used to condition calculation 
operations at (7) and output operations at (T) . 



Resulting indicators and record identifying indicators are used in the same way 
to condition output and calculation specifications. You should not use the 
same entry as both a resulting indicator and a record identifying indicator. 



98 



Using the Compare Operation 

In many jobs you need to know whether a field is greater than, smaller than, or 
equal to another field. RPG II language has an operation code, COMP, which 
allows you to compare fields. The compare operation requires entries in these 
columns on the Calculation Specifications form: 




• Factor 1 (either a field name or constant) 

• Factor 2 (either a field name or constant) 

• Resulting indicators 



When compared, Factor 1 and Factor 2 can be in one of three relationships: 

• Factor 1 can be greater than Factor 2. 

• Factor 1 can be less than Factor 2. 

• Factor 1 can be equal to Factor 2. 

You Indicate that a test should be made to check for one, two, or all three of 
these relationships by entering indicators in the appropriate columns: 



n 


i 


Rrsultint] 




































Cumparp 


MK 




mm 




>i 






r 






























































- 


- 



























































































































(T) A resulting indicator entered in positions 54-55 
tells the system to determine if Factor 1 is 
greater than Factor 2. 

Q A resulting indicator entered in positions 56-57 
tells the system to determine if Factor 1 is 
less than Factor 2. 

(T) A resulting indicator entered in positions 58-59 
tells the system to determineif Factor 1 is 
the same as Factor 2. 



The test you specify is made each time the COMP operation is executed. 
However, the resulting indicator is set on only when the proper relationship 
exists. If you entered indicator 50 in positions 54-55 to test whether Factor 1 
Is greater than Factor 2, indicator 50 would be set on only when Factor 1 is 
greater than Factor 2. If the relationship does not exist, the indicator is set off. 



RPG II Programming Language 99 



When testing for more than one condition, you can use the same or different 
indicators in these positions. If you intend to do different operations for each 
of the three conditions, enter a different resulting indicator to test for each 
condition on the Calculation Specifications form: 



IBM 






RPG CALCULATION SPECIFICATIONS 






TB isi jc 3i g;,g?,:?4 jB.ae.Ji' 



WTM 



cdJ¥ 




In this operation, the contents of the field MAX is compared to the con- 
tents of the field TOTAL. If MAX is greater than TOTAL, indicator 1 1 
is set on and the operation on line 02 is done. If MAX is less than 
TOTAL, indicator 22 is set on and the operation on line 03 is done. If 
MAX is equal to TOTAL, indicator 33 is set on and the operation on line 
04 is done. Only the resulting indicator for the condition that is true is 
set on. The other resulting indicators are set off. 



Bffiir 



100 



If you want to do the same operations when either one of two conditions 
exists (Factor 1 is greater than Factor 2; Factor 1 equals Factor 2), you could 
use the same indicator to test for both conditions on the Calculation 
Specifications form: 




b 

' r> 
n ■ 7 



These operations are used for finding the amount of discount to give 
customers. If the customer purchases goods worth $5000.00 or more, 
he receives a 3% discount, but if he purchases goods worth less than 
$5000.00, he receives only a 2% discount. TOTSLS is first compared 
to $5000.00. If TOTSLS is less than $5000.00, indicator 15 is set on 
and the operations on line 02 are performed (2% discount is calculated). 
However, if TOTSLS is either equal to or greater than $5000.00, indi- 
cator 10 is set on and the operation on line 03 is performed (3% dis- 
count is calculated). 



tT 



w^rrwf 



Mil 



RPG II Programming Language 101 



We explained previously that constants can be used in arithmetic calculation 
operations, but they must be numeric constants. In a COMP operation 
however, constants can be either alphameric or numeric. Rules for using 
alphameric constants as Factor 1 or Factor 2 are a little different from those 
for using numeric constants: 



Rules for Numeric Constants 


Rules for Alphameric Constants 


• A numeric constant can be any 


• An alphameric constant can be any 


combination of digits 0-9. Decimal 


combination of characters (letters. 


points and signs can also be 


digits, and special characters). 


included. 


Blanks are also valid. 


• The maximum length of a numeric 


• The maximum length of an alpha- 


constant is 10 characters, including 


meric constant is 8 chciracters. 


sign and decimal point. 




• Numeric constants must not be 


• Alphameric constants must be 


enclosed in apostrophes ('). 


enclosed in apostrophes ('). 



When you use the COMP operation code, remember to always compare two 
numeric fields or constants or two alphameric fields or constants. You cannot 
compare a numeric field or constant to an alphameric field or constant. 



Using an Arithmetic Operation 

You can test the results of an arithmetic operation (ADD, SUB, MULT, DIV) for 
plus, minus, or zero by entering resulting indicators in the appropriate piositions 
on the Calculation Specifications form. 




(T) A resulting indicator entered in positions 54-55 
tells the system to determine if the result field 
is positive (plus). 

(T) A resulting indicator entered in positions 56-57 
tells the system to determine if the result field 
is negative (minus). 

(T) A resulting indicator entered in positions 58-59 
tells the system to determine if the result field 
is zero. 



The tests you indicate are performed each time the operation is executed. 
However, the assigned indicator is set on only if the field satisfies the 
condition tested. If you entered indicator 99 in positions 54-55 to test the 
result field for plus, indicator 99 would be set on only if the result field were 
plus. If the condition is not met, the indicator is set off. 



102 



Again, as with the COMP operation, you can test for one, two, or all three 
conditions at the same time. When testing for more than one condition, you 
can use the same or different indicators in these positions. If you intend to do 
different operations for each of the three conditions, enter a different resulting 
indicator to test for each condition: 



IBM 



RPG CALCULATION SPECIFICATIONS 



GX21 9093 UM O&O" 

PrinlfKl in U S.A 



Keyiny 


Graphic 






! 








Card ElflCIro Number 


-/'!_._ 







1 


_J 


_ 






75 76 77 

:;:!;:; rr-rT 



-1 - 



WWW- 

Fj£\iPf 



Lws* 



0' 



• l*^W!!rf^ 



I 2l.t<;;|i ; 



LuokuplF.nu. 2) 



WWW 



FIELDC is tested for all three conditions. If the field is positive, 
indicator 10 is set on and the operation on line 02 is performed. 
If the field is negative, indicator 25 is set on and the operation on 
line 03 is done. If the field is zero, indicator 49 is set on and the 
operation on line 04 is done. 



-i H 



+ 






- 



f -I 1 l 

rfh 



I I -! - 



RPG II Programming Language 103 



If you want to do the same operations when the result field meets either one 
of two conditions (plus or zero, minus or zero), you could use the same 
indicator to test for both: 



IBM 



RPG CALCULATION SPECIFICATIONS 



■ 8 
<i 



H-: 



i I L . 



/b /b /.' ;!j 'y yj 



c 







it?, M: 3& 36- , 37::::8s ; 35 .90- . -tl- i? 




FJ 
FfBLDc 

JULPC 







Phi-, \mnui\ 7v,n 



-2:i,.<z; 1 2 



Lijokup(Fii(:io. ?1 



Wm^ 






FIELDC is tested for three conditions, but only two indicators are 
used. If FIELDC is either plus or zero, indicator 10 is turned on 
and the operation on line 02 is performed. However, if FIELDC 
is minus, indicator 20 is set on and the operation on line 03 is 
performed. 



tellNI^ f~-i • Ir4^ 



104 



JOB 6 (STOKST): USING RESULTING INDICATORS TO TEST CONTENTS OF 
RESULT FIELDS 



Job Definition 

Print a stock status report similar to the one in Job 5. The only difference is 
the addition of maximum and minimum balances. Item master records usually 
include the maximum and minimum on-hand quantity for all items. These 
figures are kept so that checks can be made, whenever the inventory is 
updated, to determine if quantity on hand is within the limits set. 

The first line for each item in the report shows standard descriptive data for 
the item: item number, item description, quantity on hand, quantity on order, 
maximum and minimum balances. Subsequent lines give the detail on current 
transactions involving the item. Quantities remaining on hand and on order are 
calculated for each item and printed after all transactions for the item are 
listed. Whenever shipments reduce stock on hand below the predetermined 
minimum balance or whenever receipts push the quantity on hand above the 
predetermined maximum, an exception condition is noted on the report. 



Job Requirements 

Input: An inventory file consisting of three different record types. Formats of 
the three record types are: 



Name _Jim- MASTER -ftECORD 



ITEM 
NUMBER 



g hU'TsU ii 



DESCftlPTlON 



UNIT 



igKMii5Mi6MiSSiM?MME?i^^ 



QUANTITY 

ON 
HAMO 



qUANTin MAX MIN 
ON BAL bAL 

'wl4lI«j43l44t«l46]«[48!49l50J5ll52]53iMl55l56l5l!58l59i60 



Two decimal positions 



RPG II Programming Language 105 



Name I SSUE 'REOORD 




IIjJililjiibMi»IiiljIIl3ljlMLiIi'M'9l?oIjiI»i?^ 



RECEIPT mconh 



Item 
Mumbev 



liliiU 



Quantity 
Beceived 



I | 9 |lO|ll| 



I3|H|I5|I6||?|I8|I9|20[2I|;;I?3 



3Ti4T;5T?6Tzy[?eT?9ri0 r3lT32|MT34] i5[56 [37[38|39|40T4l|4?R3T44| 45 T46[4 )]4e 



i49 50 51 52 53 54 55 56 5158 59 6 



The file is organized in ascending order by item number. For each item, one 
master record is required. Issue and receipt records are optional. When 
present, however, there may be any number of each. Records for each item 
are in this order: 

1. Item master 

2. Issue(s) 

3. Receipt(s) 
Processing: 

• Find total number of each item sold. To do this, perform the 
calculation ISSUE + TOTAL ISSUE = TOTAL ISSUE for each issue 
record. 

• Find total number of each item received. To do this, perform the 
calculation RECEIPT + TOTAL RECEIPT = TOTAL RECEIPT for each 
receipt record. 

• When all transaction records for one item have been read, find new 
quantity on hand (ON HAND + TOTAL RECEIPT - TOTAL ISSUE = 
NEW ON HAND) and new quantity on order (ON ORDER - TOTAL 
RECEIPT = NEW ON ORDER). 

• Compare the new quantity on hand to maximum and minimum 
balances to determine if an exception condition should be noted on 
the report. 



106 



Output: A printed stock status report: 









STOCK 


STATUS 


REPORT 








ITEM NO 


DESCR 


IPTION 


OUANTI TY 
ON HAND 


QUANTITY 
ON ORDER 


TRANSACT ION 
QUANTITY 


MIN. 
BAL. 


MAX. 
BAL. 


".iiiia 


B500 THIN 

ISSUE 

RECEIPT 


SOCKET BLUE 


908» 




500 
0** 


50 
500 


800 


1600 


'.11122 


B506 SOCKET ADAPT BKN 

ISSUE 

ISSUE 

ISSUE 


325 







20 
38 

10 


300 


800 








257* 




* * 




U-lDtR 




4U173 


C151C SIL 
RECEIPT 


SWITCH IVORY 


5D 
200* 




150 
0** 


150 


100 


200 


<m25* 


A210 PULL 

ISSUE 

ISSUE 


CORD GOLD 


62 




75 


16 

30 


60 


165 










16* 


-■= 


75** 




u:Ott! 






This printer spacing chart shows the format of the report: 



+-1-4 



Slqcj«; jSiT|A|T. 



ts 



^-t 



m. 



M 



LWi. 



M. 



Ph 



OH 



a^*^ 



dH 



OH 



i&m 



+*-*- 



Af^V.T./ 



Oft 



.0^ 



VB 



rnit: 






Ays/t.c[r/ p|(V 



+++ 



mh 



m 



:mui 



M^i^i^^mmi 



II 



^i 



mt. 



+++--4- 



Ml 



mm 



iU 



l>f 



see; 



E» 



H-+ 



H 



B^ 



m 



Im' 



m 






-n 



Cf^ 



++ 



n£(t 



H^- 



C.i? 



ILo 



\Te£ 



iax 



tLjSiL 



im. 



%7L 



^-^-t-t 



JJSjS- 



"iiE. 



t^21 



cf 



Jl2 



m 



'i7 



iSB 



n 



:il 



3: 



tubulin 



A'-i- 



S±i 



e.iMri 






-^ 



W 



^'-U'-P- 



nxf 



2! 



^ 



\t 



2i 



cSiLzt. 



Ul 



ttt 



w^ 



ij^2. 



W 



Ic'sL 



Hi'Mi. 



£c. 



44 



RPG II Programming Language 107 



Job Specifications 



IBM 



Stock Status 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



-jl°hn^_Qoei_J^'_]7/ol- 



ymg 


Graphic 
















Curd Elpclro Numhec 





Kuy 


, 


u 


- _ 


-_J 









.gg- 



GX21 9092 UM/050* 
Printed in U S.A. 

'-^ ^6 7 7 78 79 8Q 



Control Specifications 



H 



Darkened columns show required entri 
that depend on the input device used 



File Description Specifications 



-Jes 1^ 




IBM.,,,,,,..,,,,.. ,„.. ,c,.,„.„.„„., 

pv.,:„„ sto ck Sfstus_S 
^p,„„„.,,„, Tfohn Do&. Y"..,. ljio[^- 



RPG INPUT SPECIFICATIONS 





G,oi,f 


'-'T 




K,,V 


\ __ 



C.X21 9094 UM'UbO' 



/b ;f> 7/ /8 ;^! iiO 



--^aj"'_. :::;;::.„.„ [siTMIslTj 



1 j 
. 1 



11 



! r' ii' 



■M-H 



i li/^i^; 



I?; 



Record klenlification Codes 



M 



m 



Field Locatioi, 



^11 



No new functions are described on 
Input Specifications form. 



i Y'MM 

1 the W't 



i 






7 



7 

■ 7 
IS. 





DE'Sf, 
'MM 



sTMmt/. 



TfEmkym 

ISSUES 



'im 



t4-+- 



Field 
Indicators 



■M 



108 



IBM 



RPG CALCULATION SPECIFICATIONS 



GX2' 9093 7 UM 060* 



Stoc^: StA-tus 

•John Doe [d^.. i/iof- 



Kpv m<! 


GrdDhic 


1 










1 


Citd Fi.ri.- NumI,.. 


In triJLlion 


Kev 



















'1^1 






■^ T|OTRj£iC 



Calculations on lines 01-05, 08, and 09 are needed to update quantity on 
hand and quantity on order. See Job 5 for an explanation of these entries. 
After new quantity on hand (NEWONH) has been calculated, it is compared 
to MAX to see if it exceeds the maximum limits set (line 06). Indicator 99 
in positions 54-55 specifies a test to determine whether Factor 1 (NEWONH) 
is greater than Factor 2 (MAX). If NEWONH is greater, indicator 99 is set on. 
On line 07, NEWONH is compared to MIN to see if quantity on hand is less 
than the minimum set. If it is, indicator 88 is set on. 



I •'! iq 00 G5 <J<; ;3 95 ^q t-q n ?g I 



»_ 5E i^ et: ;c ir nr 6i sc l: 9c ' 



1 ! 



-t- 



[--'■■ 



RPG II Programming Language 109 



IBM, 



RPG OUTPUT 



SPECIFICATIONS 



f .o,.,^ SfocR Stdtus' 



P,09..mm ., Xro|,„ Qo ^ 



TTfoJ^n 



;;::„o,. h 



Graphic 
















Card Electro Number 


KpV 

















S"'. 



GK?1 •iO'jQ UM ObO' 

Pnmed in U S.A 



75 76 7 7 78 19 80 



puTPm 



i 

pr 

a 

.-! Pi 






g 



^1 



1:^ 



, a»p/ 






Output Indicators 



IP 
OV 



Ul' 



WI 



T 



\L1 



Cfc, 



-t 



:%l<i«am« 






rfpp 



^liSv; 






mmmi 







01 



t> 



40 41 42 4:1 



B'? 



5|6 



[5| 



3 



gl 



5^ 



Eg. 



I.? 



;^3 



'I 



Commas 


^ero a 
loP 






Yes 


Y 




N 


No 


Y 


No 


N 



Zero Balances 



IT 



--^\ 



X = Hemove 
Plus Sign 
Y - DdtB 

Fielu tdii 
I Zero 



Constant or Edit Word 
t 9 101112I3141516W 



la 19 20 21 



45 46 4? 48 49 50 5 i t)2 53 54 55 56 57 58 Sii GO i;i 62 63 64 65 66 67 68 69 70 



iiSrpcE. 



eM Vo 



im. 



^^issu 






\[l 



a$ 



m 



R\iPmT: 



miff' 



M/JXI.!': 



-.-— f-i -t 



.SgL 



m^0p£R 



GX21 9090 UM/050"" 



75 7b 7; 78 79 80 

[s\fW K\sf 



T" 



V ■ \ 






r-t-t- 



T] 



-: t ■ ! 



Resulting indicators, which indicate whether the new quantity on hand exceeds the maxi- 
mum or is less than the minimum, are used on the Output Specifications form to tell when 
exceptional conditions should be noted. Notice on the total line, the words UNDER and 
OVER will print only when conditions set by the conditioning indicators are met. UNDER 
is printed when indicator 88 is on. Remember that 88 is set on when NEWONH is less than 
the minimum. OVER prints only when 99 is on; that is, when NEWONH is greater than 
the maximum. 






110 



FIELD INDICATORS 

Field indicators, like resulting indicators, are used to test the contents of a field 
and to condition operations based on the results of the test. 



Program Cycle Operations 



Figure 20 shows the operations in the program cycle associated with field 
indicators. Note that input fields are tested and field indicators are set to 
reflect the result of the test at the time data is moved into the processing area. 
Field indicators are not set off at the end of the program cycle. If a field 
indicator is set on when data is moved into the processing area in the first 
cycle, it is not reset until the appropriate field is moved into the processing 
area in a subsequent cycle. 

START 



<;] 



Perform detail 
calculations. 
Set resulting 
indicators. 







Move data from record selected at 
beginning of cycle into processing area. 
Set field indicators. 



Perform heading 
operations. 
Perform detail 
output operations. 
If overflow line 
has been reached, 
set on overflow 
indicator. 







-Q^ 



Set off control 
level indicators. 
Set off record 
identifying indicators. 



Overflow indicator on? Yes, do 
overflow operations and set 
overflow indicator off. 



Program 
Cycle 



Read a record. 



LR indicator on? Yes, end of 
job has been reached. 



Last record? Yes, set on 
control level and LR 
indicators and perform 
total calculations. 



Perform total output operations. 
If overflow line has been reached, 
set on overflow indicator. 



>Ci 



c^ 



Set on record identifying 
indicator. 



Perform total 
calculations. 
Set resulting 
indicators. 



<I 



Change in control 
field? Yes, set 
on control level 
indicators. 



t^ 



Figure 20. Program Cycle Operations for Field Indicators 



RPG II Programming Language 111 



RPG II Specifications 

Make these RPG II specifications when you use field indicators: 



RPG INPUT SPECIFICATIONS 



GX21 9094 UM/050" 



IBM 


-■■ - --1^^^; ■- 










2 


Primed in USA 


■'■'"■'■'"' 







— I 






Oi 


dfi..troN..: 


__J -1 


rro,i„„, p T 1 T'l 


p, ..,,,,.,, 










l^J^ L 










' - - - 








^, 










I 


" 






z 


'6 


1' 


Record Identification Codes 


i 


c: 


Field Location 


a. 

I 


Field NdmF' 


1 

59 go 




J 
1 

a: ' 
a; 

i, 

93 64 


Field 
Indicators 


7t 7? ?3 74 


' 


2 


3 


Filpnjnip 




Position 

?1 ii 23 31 


^. 


26 


1 


PofitiOft 
ja 3B 30 31 




1 

33 


o 


35 36 3' 38 


Z 


40 


(J 


from 

44 « 46 4? 


To 


P,u. 


Mima 
e^ 68 


t!l„nk 


1 '1 ; 1 • ' 1 





ft 




■^ 


N 

t!. 


D 




1 

I 
1 
I 






J 


- 




-- 












■ 


" 














- 








1 








„ 








III 




1 ' 1 




1 


- 


— 







* 




i 


II 






~ 












































"" 


~ 




-~ 


- 


























, 












1 






.. 






" 


■" 










































^ 





IBM 



c; 



RPG CALCULATION SPECIFICATIONS 



Catd Electro NumU 




:»» ^f) .to ji .ij 



Length 




X21 9093 UM.050* 
inred in U S A 



■/b 76 /; 78 79 80 



;;;j -^[Ji'L,. ^;-;-.j:inrD 



TTT 



f t 



-.j !- 



1 ^- 



-t-i- 



IBM .. 




„.».„.,„ 


• Cp 


r.,.o» 




j Program 


Krying 


1 Programmer 








[ Date 


""""'" 



±:-- 



RPG OUTPUT SPECIFICATIONS 





Graphic 
















Card Electro Numtwr 


".'_ 


K„ 







-_J 











•m^ 



GX21-9O90 UM/050* 
Primed m U.S.A. 



75 76 77 78 79 80 



Program 
Identificatio 



'4-1 

j 




i 49 50 51 57 



Name of 
Lahel E> 



Extent Fx 
for DAM 



Opnor 
S4 <.is be, ' 



h\h: Addition/Uni 



if 



NumlHT (.f Tra 



fa* 

<>)rtd!tion 
U1-U8 



^ 



Field indicators are assigned at (T) . They may be used to condition calculation 
operations at (T)and output operations at (?) . 



112 



You can enter any one of the indicators 01-99 in positions 65-70 on the Input 
Specifications form to test an input field. You may assign indicators to test for 
three possible conditions: 




(T) A field indicator assigned in positions 65-66 
tells the system to determine if a numeric 
input field is positive (plus). 

(£) A field indicator assigned in positions 67-68 
tells the system to determine if a numeric 
input field is negative (minus). 

(V) A field indicator assigned in positions 69-70 
tells the system to determine if an alpha- 
meric input field is blank or a numeric field 
is zero. 



RPG II Programming Language 113 



JOB 7 (AGETB): USING FIELD INDICATORS TO TEST CONTENTS OF INPUT 
FIELDS 



Job Definition 

Create an aged -trial balance report that lists: 

. Name and customer number of all charge customers who have payments 
due. 

• Amount due. 

• Overdue balances. 

The customer master file, which contains records for all customers regardless 
of their balance, is used as the input file. The report is to show only those 
customers with payments due. Thus, information from customer records that 
contain a zero or credit balance should not be printed. 

Job Requirements 

Input: A customer master file consisting of one record type: 



n 

hi 

O 
O 

VJ| 



CmtOhfr 
Wumbcr 



m&LSi 



Custoiner 



iiMi!iinj^MiSiiiiii^^ 



V 



Last 

Payment 

Bate 



Crtdit 
Limit 



) [il2\iili^^i[i^lJiiJislKj*[lKlii 



Current 
Charges 



y[45[4i[4f[48]4i[50 



50 

Uays 

Overdue 



60 

Davi 
Overdue 



51 ^52]5ij55y|56j5^s¥[59]6^^ 



90 

Days 

Overdya. 



65j66|6f|6e|6s| f0TTr '? 



Processing: Check Input balance due field for zero or credit balance 
(use field Indicators). 



114 



Output: A printed aged-trial balance report: 



CUSrOMEK CUiTuXER 

NUMBER Mi^f 

10U67 ALLEN C CO. 

16'>3b ANriEKSO.N auTO SUPPLY 

na',9 ANDREWS AND SUNS INC 

18^(78 ARGONAUT ENGINEERING 

£<,,r<,3 IeRkLEV paper CU 

^'i:ni BEST UliTHIBUT lUN CU 



AGEU TRIAL 


dAL AfNjCE 












LAST PAY 


DATE 




CPEDl r 
LIMIT 


Current 
Charges 


nvE 
30 Hays 


ROjE aCCJU,^JTS 
60 OAYS i(y OAYS 


^/16/ 

^/us/ 




15 

I 


000.00 
500.00 
750.00 


6.=)19. 77 
I f 665.^9 


37:,. 5B 


l^s.^., 

31?. 13 
1 .<.oO. 35 




10/06/ 




I 
b 
I 


000,00 

JOG. on 

000.00 


? . I 1 1 . 30, 

I * 105.50 

3.^5 


611 .5<. 


5 1 .00 

n.c. it 



This printer spacing chart shows how the report is formatted: 




RPG II Programming Language 115 



Job Specifications 






RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



"' ^ ).'^/9 Doe^_[°^^iJjoJ_ 



y 


Graphic 
















Card Eleclr.o Number 


'■' "" 


K,. 










_ 







GX2I-9092 UM/050" 
Printed in U S.A 



75 in n 78 7y : 



S"'_ ;"z:,i„„„ HMM 



Control Specifications 



H 



Execute 



Darkened columns show required entries 
that depend on the input device used. 



File Description Specifications 




IBM 






RPG INPUT SPECIFICATIONS 



" i#, 



X2I 90C4 UM UbG" 



m^B. 



M'flSTBR : ^:g 



Wl 



SI 2S ?g 24 



Cv\ 



Jo prevent listing custonners who have a zero or credit balance, we 
must know if the current charge field (CHARGE) or the overdue 
fields contain a plus amount. Indicators 96-99, specified in posi- 
tions 65-66, test the fields for these conditions. These indicators 
will be set on when the fields are plus. 

Note that the record identification code has been described (posi- 
tions 21-27) and a record identifying indicator assigned (positions 
19-20). This should always be done even though there is ofily one 
record type per file. 



3 



w 



I- 1 



mH^ 



H 



■H-fH44H 



30^, - 



5^ 
71 



CUS'TNO 

npME 
srPfl 

L1N\IT 

HflRGE 
OVE-R3 



ac 
a 



1 irid 

rulu-Jl(. 



99 

f7 
9i> 



116 



IBM 



RPG OUTPUT SPECIFICATIONS 



'^:^:LAf-e^d_Jr[ar_33lanc.^_ 



3:ohn_Jlo&^J°j^ol-_- _ 




p.o,..^.^^ e^ Tri 6T BdJance^ 



Progrsmrr 



[7hbn_Do£^ 



id/an 



wl- 



Graphic 










.- 




PK., ^ 










--^._j 





Card Electro N.imbtfr 




'-M'-'^ «:::„„„ [^^iiTj^ J 



Const:in: or Edit Word 

t) y 10 n 12 I i u 15 (6 1/ lij 19 :'o ; 



Field indicators 96-99, used to test the CHARGE 
and overdue fields for a plus condition, are used 
to condition detail records. The record is to be 
printed when one of the fields is plus; that is, 
when indicator 99798, 97, or 96 is on. Note 
that record identifying indicator 01 is also used 
to condition the detail record. This is done to 
prevent printing information from a record 
type other than 01 (one that may have acci- 
dentally gotten into the file). 



I I I I i { I 



RPG II Programming Language 117 



Conditioning Operations by IVIore Than One Indicator 

In this chapter, you have learned about many different kinds of conditioning 
indicators: control level, first page, overflow, last record, record identifying, 
resulting, and field indicators. In many jobs you will use two or more 
conditioning indicators. Indicators used together can be in either an OR or 
AND relationship. 

You have already read about indicators in an OR relationship. You learned that 
if an operation can be done when either one of two conditions or both 
conditions exist, you can specify the conditioning indicators like this: 



IBM 



RPG OUTPUT SPECIFICATIONS 



lonsi Bunnell Mactiingi Co'pat 




Card Electro Numb 



This line is written when either 
indicator IP or OV is on. 



This line is written when either 
indicator 10 or 20 is on, or when 
both are on. 



IBM 



RPG CALCULATION SPECIFIC/ 




This calculation will be performed if 
indicators 1 and 2 are on and 3 is off, or if 
indicators 1 and 3 are on and 2 is off. 



Conditioning indicators can be used in the OR relationship on both the 
Calculation Specifications form and the Output Specifications form. 



118 



If you specify two or more conditioning indicators on one line, they are in an 
AND relationship. The AND relationship means that all conditions must be 
satisfied before the operation will be performed: 



IBM 



RPG CALCULATIOI 



>l E^iiiPi-. Wjtf,,,-., 



1^' 



C o 

1 - 

3 4 5 6 7 


Indicators 


?t,a 33 ?* » 36 


OpfHaiion 




— 


R. AN/OR) 
> 


An 


' 


Paetor? 


5| . 

8 "p: in n \ 


1 


1 j •.,■ 




OM c 
2 C 


-Ml 


t^P-. 


Ti ^./ . 




ffm ! s 


f ■ 


n 


4 1 ■ ■ "■ : 




_ 'p^i'^j j ^ 




. — 


4, C 

ej c 
7 ! c 

8 C 




.15. 

— -f ■ - 

- - 1 ~ 


Wr,. 




™5|^ifl'i £ 


4X^ 


"~~ ' 






: i ' . : 


~T->^ 


-, ^^^^ 


psr^- 


Ml/iL\f^ I 




-4-1- K-i ^ ." 






. j^ 


s 










\ 












^- I ■ ■■ 











This operation is performed 
when 10 is on and 20 is not on. 

This operation Is performed 
when LI, 10, 15, and 99 are all on. 

This operation is performed 
when LI is on and 15 Is not on. 




This detail line Is written when 
15 and 10 are both on. 

This total line is written when 
LI, 10, and 15 are all on. 



RPG II Programming Language 119 



If your calculation or output operation must be conditioned by more than three 
indicators, additional indicators can be specified on the next line if AND is 
entered in positions 14, 15, and 16 of the Output Specifications form or AN is 
entered in positions 7-8 of the Calculation Specifications form: 



IBM 



RPG 



OUTPUT 



SPECIFI 



Keying 
Inslruction 


Graphic 














Key 






































i 
1 


"r 


Space 




Sk 








n 


It 


ut In 
















— . 


""" 


y 






Filename 








Flrtd Name 






Line 


1 
o 

6 


1 r 




I 


< 


» » 


s 

< 

?1 22 


And And 






u 

S 


£ 


End 
Poiilion 

Output ^ 
Record 5 






L 


1 

33 




1 


1 
i 


» 


i 


•auto 






A 





D 


> 8 9 10 11 i; 13 





n 




1> 


IB 




?fi 


A 


t5 


D 

16 


24 


25 


ID 


1 













- 






■ 


A 


* 





- 


I 




- 






-t« 


i 
1 


5 




l\6 


^ 


/ 


5 






- 


- 


^ 












D 


2 












3 



















C 


r 


«; 


r 






■ 1 i 





" 











— 




J 






] 




\ 

! 















Five indicators used in an AND relationship 
condition this detail record. Three indicators 
are specified on one line; the remaining are 
specified on the following line with the word 
AND in positions 14-16. Indicators 10, 11, 12, 
15, and 16 must all be on before the detail line 
will be printed. 



IBM 



RPG CALCULATK 





C 






6 _ 
.J < 

Is 

! B 


Indicator;^ 






















Operation 

/H rj !0 (1 1.' 










Lir>e 


i 


A 


ij A 


-111 


Fsctof 1 
la T8 20 31 22 23 t* 25 26 27 


Facto 


3 




1 

9 


10 


N 


1 

1? 


1 


1 

t5 




13 34 36 36 57 3 





1 




C 






5 


5 


I 


fi 

4- 


31 






















'"lit 
'1 


Jfi 


X 


- 


— 







2 
3 




c 
c 
c 


m 

i 

t 




S0 

1 






C 





s 


tr 











































































This calculation operation Is done only If 
indicators 25, 30, 31, and 90 are on and 
91 Is not on. Note that the operation Is 
specified on the AN line. 



120 



Chapter 3. The Programmer's Job 



Your responsibilities as a programmer include: 

• Determining the job requirements 

• Determining what RPG II specifications and program cycle operations are 
needed for the job 

• Writing the specifications 

• Documenting the program 

• Preparing your source program for compilation 

• Compiling the source program 

• Testing the program 



The Programmer's Job 1 21 



DETERMINING THE JOB REQUIREMENTS 

The requirements for a job are generally described in terms of the input 
provided and the output required. The following paragraphs and illustrations 
describe the job requirements. 

An invoice is to be prepared like that shown below: 



ACCOUNT NUMBER 09621 



NAME 
ADDRESS 



SMITH MANUFACTURING 

13620 9TH ST NE 

BERNALILLO 

NEW MEXICO 56120 



SHIPPING INSTRUCTIONS BY AIR 
ITEM NUMBER DESCRIPTION 

'♦39167 SHEARS 

<>^"»''08 GASKET CORK 

10^139 SPRIOGET WHITE 



INVOICE 






QUANTITY 


UNIT PRICE 


AHGUijT 


100 


27.56 


2.756.00 


3000 


1.15 


3.<.50.00 


50 


750.00 


37,500.00 ,— 




122 



The input file contains two types of records: name/address records for all 
customers who made purchases on credit during the month and transaction 
records for each item purchased by the customers during the month. The 
name/address and transaction records look like this: 



Nam. Nfi^Ms/AvpREis Record 




Name 



i| II 1 1? 1 l3il4li5li6Ti 7Tl8Ti9Tg"0T?iTg?M;4y?5T M 



ADpii^ss Line 1 



W^W^\i^iMiKi^iMMiM*^I^M»hMi¥(J^_ M>W^^^^^ 



ADDRESS 



59 60 



L IN£ Z 



6 ir62[63l64|65T66|6T|68[69|T0 i;if7; 



ADDR.E-SS Line 3 



Iilji|71[l]n|78|r9lj0[8l|i?f¥[e4i85i86[87|88|a9|90i9l|9?|93l94l95 



Name T R A N SACT 1 fsj RFmpT) 



Shipping code (either 1, 2, or 3) 



II 



Account 
NuMeetK 



2!3|'l [5|6 



Item 



m 



9|lO|llTi?TlI[ l4 



descRiPTioi^ 



]i6li7]ieTi9i?or;iT??]l3|?4|F5p '6]?r7?»[?a' 



i0T3r[32]33j34 



qvmni\^ p^ll-^ 



35l3 6["37[38[39 



M«]ilJi5j<i R' 14 8 [49150 [51 l5?F3|54T55T56l57T58T59[6""l 



The Programmer's Job 1 23 



The input file is organized so that all transaction records for a customer follow 
the customer's name/address record. Each customer has one name/address 
record, but might have one or more transaction records. 



Customer C- 



/, 




T 13500 



T 13500 



T 13500 



Customer B- 



Customer A 




N 13500 



T12347 



N12347 



T12345 



T12345 



N 12345 



y "* Transaction Records 
— Name/Address Record 



124 



Standard computer paper is to be used for printing the invoices. Each invoice 
should be formatted like this: 




The Programmer's Job 1 25 



Your first step is to analyze the problem and decide what processing must be 
done to get the desired results. Always keep in mind how things are done 
using RPG II. In your analysis of the job, you would probably think of these 
points: 

• Information for the first part of the invoice is taken from the name/address 
record. Information for the second part (list of transactions) is taken from 
transaction records. 

• In order to print shipping instructions, the shipping code recorded in the 
record must be determined: 

1 = By truck 

2 = By rail 

3 = By air 

. AMOUNT and INVTOT (invoice total) must be calculated because this 

information is not in the input records. These calculations must be done for 
all transaction records: 

QTY X PRICE = AMOUNT 

AMOUNT + INVTOT = INVTOT 

• INVTOT should be printed only after all transaction records 
for one account have been processed. 

• The invoice for each customer must be on a separate page. This means that 
forms must advance each time a new customer name/address record is 
found. It is possible that one customer has purchased so many items that 
they cannot be listed on one page. In this case, forms should advance 
when the end of a page is reached. When an invoice includes more than 
one page, headings should be printed on all pages. 



126 



DETERMINE RPG II SPECIFICATIONS NEEDED FOR THE JOB 

After you have carefully analyzed the job, determine what RPG II specifications 
and program cycle operations you need. For example, consider the following: 

• Different record types are used. This means that record identifying 
indicators must be specified to tell what to do for each record. 

• The shipping code must be determined. One way to do this is to compare 
the shipping code to 2. Through the use of resulting indicators, you can 
determine if the code is less than 2 (1), greater than 2 (3), or equal to 2. 

• INVAMT is printed only after all transaction records for one account have 
been processed. This is a total operation, done only after a group of 
records has been processed. Therefore, control fields and control level 
indicators must be used to do a total operation. The account number field 
can be used as the control field. 

• Forms should advance each time a different name/address record is 
encountered or whenever overflow occurs. Thus heading lines must be 
conditioned by a record identifying indicator and the OV indicator. 

If the indicators and steps just listed are used, the RPG II program cycle would 
include the steps shown in Figure 21. 



The Programmer's Job 1 27 



START 







^ 



Perform detail 
calculations. 
Set resulting 
indicators. 







© 

Perform heading 
operations. 
Perform detail 
output operations. 
If overflow line 
has t}een reached, 
set on overflow 
Indicator. 



Move data from record selected at 
beginning of cycle into processing area. 
Set field indicators. 



^ 



© 



^ 



Overflow indicator on? Yes, do 
overflow operations and set 
overflow indicator off. 



Program 
Cycle 



LR indicator on? Yes, end of 
job has been reached. 



® 



m 



Perform total output operations. 
If overflow line has been reached, 
set on overflow indicator. 



Set off control 
level indicators. 
Set off record 
identifying indicators. 



Read a record. 



Last record? Yes, set on 
control level and LR 
indicators and perform 
total calculations. 






^ 



Perform total 
calculations. 
Set resulting 
indicators. 



® 



Set on record identifying 
indicator. 







Change in control 
field? Yes, set 
on control level 
indicators. 



ti 



(?) Did Account Number change? 

(T) Print total only after all transaction records for one customer 
have been processed. 

(j) Print ail heading lines if overflow occurs. 

(T) The operation to find shipping instructions can be done only 
for name/address record. The operations to find AMOUNT and 
INVTOT can be done only for transaction records. 

(T) Headings for the invoice can be printed only w/hen name/address 
record is read and detail lines only when transaction records are 
read. 

Figure 21 . Program Cycle Operations for Sample Job 



128 



WRITE THE SPECIFICATIONS 

After you have analyzed the problem and determined how to solve it using 
RPG II, you can write the specifications. Figure 22 shows the specifications for 
the job. 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



ernational Busmen Machines Corpof»tio 



p.og..i„ Inuoice. Preparation 



Programs, Jph H QoQ, 1°"' >//°/ 



Vmg 


Graph ir 
















Card ELeciro Number 


Struct. on 


Kt^y 






— 1 











lo, 



GX 21 9092 UM/050' 
Piinteil jn U S A 

75 76 77 78 79 80 

































Control 


Speci 


ications 


























H 




Sl7t 10 

I a 9 


1 
1 

o 


o 


Execute 


1 

a 


1 

t 
t 

16 


W 18 


1 
19 


^ 

^Q 


(£ 


1 
1 


Numljfp 
Of Print 
Positions 

^3 ^4 -Jb 


! 
< 

7IS 


Rfiserved 


5 


1 


1 


1 


^ 
V 


H 
-^ 




1 
2 


1 


X 


O 


£■ 


6 




2 il' 


J 


E 
1 


° 


-;::;-,;;;;::;:;;;■;;:;::•::;:: 


Linr 


1 
6 


1 


h 


i 


_ 










1 










1 1 








1 


































' 1 1 ■ 1 : [ 1 i 1 1 i ' 1 I 



File Description Specifications 





c: 























RiiiiiiFvfW;, ^,^; 




Mode of Processing 


1 

1 

33 


^ 


_ 




-__ 











— 


__ 


— 


— 


~^ 


1 








— 





~ 


■~ 




— 







-^ 


— 


rile Addilion/UnoMlcM?(i 




Filename 

7 8 9 10 11 13 13 14 


^b 




■lie Designation 


28 


twflth trf K»y f JeM or 


Device 

40 rtl 43 43 44 45 46 


Symbolic 
Device 

4; 48 49 bO b\ !>3 


Name of 
Label Exit 


Extant Exit 
for DAM 


if 


Nunibw of 7ratA.t 


Line 

3 1b 


1 

6 


s 




E«to»fila 


8?^ 


^Vws(aAPA^ae»Wim 




for CtiinOt^' Ovwffow | 






Sequence 




Hecord Address Type 




Nij 


il>erof E<tems ' 


1 

18 




Fita FWttW 


1 

31 




Storage tnd«x 






R«wmd 


1 


Block 
Length 

20 21 32 23 


RMnrd 
iw»ftth 

Mi6«w 




or W0rt»n«( Ar«i 


? 


File 


Overt 


ow Indicator 


33 34 


^36- J7»i 


Cnt.nuat.on Lmes 






K 


Option 
M bb 56 '37 1j8 b9 


Entfv 






2 

3 




'' 


I 


Y 


f} 


ft 






£ 




I 


p 








! 




- 




i 


a 








™ 


















- 






1 


i 


1 




i 










■ 


















t 


















j 
i 
i 

- 1 




- 








1 


p! 









\J 


- 


- 


_ 


-T 




/? 


/ 


A/ 


r 


£ 


/? 
































4 
5 
6 
7 














i 
















- 






^ 




























- 



































: 






























































































































-1 
































































— 




- 


™ 


- 




































































8 
9 





































































- 




















































































































































































































































- 








- 






- 


-^ 












- 










- 




















- 












- 


















- 




















































- 






























































^.a 


w 


ty 


£9 


19 


09 


By 


Hi. 


L^ 


U(i 


%'3 


w 


eg 


Vi 


IS 


05 


e» 


s» 


it 


9fr 


5t 


ft 


Efr 


ZV 


If 


Of 


6E 


ae 


iC 


9C 


SE 


fC 


EC 


;e 


IE 


OE 


62 


K 




9; 


92 


Ml 


£Z 


;; 


a 


o; 




81 




91 


qi 


fi 


El 


Zt 




01 


6 


R 


, 




'2 


f 


c 


; 


L 



Figure 22 (Part 1 of 4). Specifications for Invoice Preparation Program 



The Programmer's Job 129 



RPG INPUT SPECIFICATIONS 



IBM 



Ihvojce,_ Preparation j 
-7ohn Doe, ]•■"■■' ijio]-- j 



m^' 



l,X?l 9094 UM 050" 



/') /ii 7 7 ;e !'.i 80 

WMOP^E}^ 



I 



HMApp 



011 



jZ^A/ 



w 



?i 2! 21 24 



a<25: 



Rfcoid l(!onI(li(<iI(On C( 



C^ 



i 



cr 



J=v (i , J JU 



1-+- 



44 ■4'' 4ti •)? 



I 7 
1/5 

M 

Is 



,„., 


fiL'kl N.iiiu; - 




IrulK.itors 


lo 5 


^ 1 ' Minus II 


^6 A//?A(£ ' 

ff? MD.Rl. ^\ 
7a /?pz?/?a 1 

ifaiSHPCp. 

64ficcNo Ci 

l^^ITBW/O 

a? pE^ff^p 

3?i(/Pfi;I:C£l 1 


. 


1 



IBM 



In voice Prep arati on 
" To hn Doe , 1^" 'i/io/-- _ 



And And 



m 

m 



RPG CALCULATION SPECIFICATIONS 



[ Cu-I i:k'an>Niirnb,'. 



.q». 



)» 18 3B n ti. «24 as-?g tf 






:piMP 



mm. 

m 



V 



a3..3<>,a$ 3& :^7 3B 39 40 ■*' ■i-'ji 



yp^fci 



*vrot 



I'MvirpT 



Lervgith 



31 



79 
3 



Lo<>k,Ji)(F,jcli)i 2) 



V 



Pii-is fMi)4ttj"z7^ 



?h;i<2ii 



n9\9 



LOW' 



CX:?! 9093 UM'ObO" 

t'.iiui'd in USA 



7b /6 7/ 78 79 



:;:::;:..... M^Ml 



1S\ 



CODE. 



FII^D 



P 



MV 



EM 70T^\L 



\r] 



3 i' 



OTflL 



Figure 22 (Part 2 of 4). Specifications for Invoice Preparation Program 



130 



IBM 



RPG OUTPUT SPECIFICATIONS 



p.o>,-.m Jni/o/c&~Pr epar^qn 



3hhrLD^Q& A°ilLho / - ■ 



Keymy 


G.aph,.- 










^ 


ri 


__K.v 















Card Elfciro Niir 



Proyra 
Idonlil 



GX21 9090 UM.'ObO' 
Prmled m U S.A 

75 76 7 7 78 79 80 

„ [I7v|71o|c|£l 



O 



8 9 10 11 I? 13 



INVOICE 



h 
OR 

H 



P 



pi 



OR 



H 



5S 



3P 



Output Indicdloi; 



IL 1/. Oi 69 89 i9 99 59 1-9 i:9 J9 19 09 69 85 i5 99 95 



:/i 



•ovM'^ 

. i 



1 






"J 11 



ami. 



^__:::: 



3? 33 34 35 36 3? 



^cctvo 



A«/^«£: 



--1, 



^?2gS. 



r,, I7,™b.,i 



C>'^" ' 



No Sign 


C. 




, 


A 


.1 


2 


B 


K 


3 


C 


L 


_^__. 


D 


M 



X Remove 
Plusbiyn 

Y Diitf 

Fifk) TicliI 



^5 



i7 



5!? 






V5 



i i I 



3 3 4 5 



Constant or Edit Word 

t 9 "J n 12 13 14 15 16 17 18 19 20 21 77 23 24 ■ 



^ 4B 40 ^0 ;i1 5; 53 54 5^ 5!i ' 



^i/V!/ 



1 60 Gl 62 63 G^ 6r> 66 67 68 69 1 



Ci£ 



I ' j I I I I ■ ' 

! : I 
it 

"■Ifl/'flME 



: I • ; p- 
t-r-'-i •■■■ 



' 6L" Ml, n: yr 9e tr t.c ^e i 



: Hi: I ^. ii£ 9j' v^. \y. ii u o<: ei hi 



Figure 22 (Part 3 of 4). Specifications for Invoice Preparation Progr 



The Programmer's Job 131 



IBM 



RPG OUTPUT SPECIFICATIONS 



-Invoi ce. Pr eparafio n_ 



Keying 


Graphic 








'~ 








Card Electro Numbef 


Instruction 


__Ke,___^ 




1 




_j 









Pcogram 
Identi'icatic 



GX21 gO'JO UM/050' 
Printed •\^ U.S A 

75 76 77 78 79 80 



5 



is 

9 

1 



\ I 






H 
OR 



D 



351 



Output Indicators 



And And 



1^ 
O 



vv:i^ 



10Z 
oyvi 



'M 



!^' 



dDOR.-^ 



9? 



Fiekl Name 



•auto 

32 aa 34 36 36 3T 



SIZ. 



^e?£SE 



1>£SZRP 



MqmiI 



lEViHOi 



=>[ 



^1 



La 



40 41 4? 43 44 4!. 46 47 46 49 50 bl 5? 53 54 55 56 &? 56 59 60 61 6? 63 64 65 66 67 6R 69 70 



m 



33 
33 



3|f 

5 

615 



^: 



49 
631 



££ 















lint 


No Siqn 


CR 




X 
Y 

Z 


Remove 
Plus Skjn 
Date 

field Edit 
Zero 


" 


"" , "1 
2 
3 


A 
S 
C 


J 
K 
L 




^ 


D 


M 




SuppreM 



Constant or Edit Word 

^7 U 14 15 16 17 



19 20 21 22 23 24 ' 



'BY 

y 



B 



M 



iim 



'D 



QUMTl 



UNI 



{\N\0(JH<T 



cm 

N 

T 



PING 
K 



4m 



JRPC 



A/S 



IHV 



a 



id/vsi' 



/^om 



PRIC 



TI 






L" 



IBM 



RPG OUTPUT SPECIFICATIONS 



p,„„am .277 uo /c. e Prepa ra t io n 


Keying 
Instmction 


Graphic 












r^ 


n 


Card Electro Number 


Prosramm,, J^/7;r-, OOG, [O'^'jJlO/-- 


Key 

















Program 
Ideniitic. 



GX21 9090 UM/050" 
Printed in U S A 

75 76 77 78 79 80 



K 9 ■011171 



Output Indicatots 



33 35 34 36 3S 37 



C> 



Cnmm 


as!^' 


o Baldnces 
to Pnnt 


No Siijn 


CR 


















YC5 






Yes 


1 


A 


J 


Yes 






No 


2 


B 


K 


No 






Yes 


:) 


C 


L 


No 






No 


4 


n 


W 



Plus Sign 
Y - Date 

Field Edit 
I - Zero 



Constant or Edit Word 

2 J 4 e> 6 7 H 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 : 



! 49 50 61 52 ^.T 54 ^ 



[)9 SO 01 f.2 G3 64 65 66 67 68 m 70 



3a 



.^; 



msLioii^ 



6i5 



'jtivpizi- trdj^i-:' 



TTT 



-i--| -I I 1^ 



Figure 22 (Part 4 of 4). Specifications for Invoice Preparation Program 



132 



DOCUMENT THE PROGRAM 

An important part of every programmer's job is to explain his program. This 
documentation provides information for people who will run the program and 
for programmers who may later need to alter or update it. Documentation is 
also useful to you. It is not always easy to remember what every program you 
wrote does. Reading documentation is a much easier way to recall the 
program than figuring out each instruction. 

Documentation consists of: 

1 . Telling generally what the program does. 

2. Describing input and output. (Record layout forms and printer spacing 
charts are an excellent means of describing input and output.) File names 
and field names should be meaningful. 

3. Explaining the coding. 

4. Telling the operator how to run the program, what to do if the system 
stops because of an error, and what to do when the job is completed. 

All documentation cannot be done at the time you write specifications. 
However, when writing your specifications, you can also write an explanation 
for a line or lines of coding on the specifications forms. You have probably 
noticed positions labeled Comments on the specifications sheets. Here is 
where you write an explanation for your coding. 

In addition to using the comment positions on the coding forms, you can use 
comment lines. A comment line is indicated by an • (asterisk) in position 7 of 
the coding form: 



IBM 



RPG INPUT SPECIFICATIONS 



GX21 9094 UM/050" 
Ppiim^it in U S A 



;6 7G /7 7b 79 BO 



[U^^ :- U.. IlLn 




The Programmer's Job 133 



Comment lines can be used anywhere on any specifications form. There is no 
limit to the number you can use. The RPG II compiler does not regard 
comments and comment lines as part of the program. Therefore, the compiler 
does not translate the comments into instructions; however, the lines are 
printed as part of the source program listing. 



PREPARE FOR COMPILATION 

After completing your source program, you must prepare it for compilation. 

Specifications Form Order 

Your specifications forms must be in this order: 

1 . Control and File Description Specifications form 

2. Input Specifications form 

3. Calculation Specifications form 

4. Output Specifications form 

Number the forms in positions 1 and 2. At this time, you might also check to 
see that the top part of each form is completely filled in. 

If you are planning to give these specifications to someone to key, it is a good 
idea to fill in the box labeled Keying Instructions: 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



Grj(.hic- 














Cdrd ElPCIiwNumlwr 


fy>n<:h 






. _ 


Lj 









You indicate in this box the graphic symbols you are using and their meaning. 
Some printed letters and numbers are easily confused. For example, it is 
sometimes difficult to differentiate between the number and the letter O and 
the number 2 and the letter Z. You may, therefore, devise a graphic symbol 
that you use for certain letters. Some people use for zero, 2 for the letter Z. 
Explain your symbols so that the operator will know what to key when the 
symbol appears on the coding forms. 



134 



Control Specifications Preparation 

Some systems require control specifications. If yours does, you will have to fill 
out the control specifications at the top of the Control and File Description 
Specifications form. 

Control specifications give the compiler information about the system and tell 
whether any special RPG 11 functions are used in the program. The entries are 
such things as: 

~1P forms control allows operator 
positioning of forms at the begin- 
ning of program execution 



IBM 



RPG CONTROL AND FILE DESCRIPTION SPECIFICATIONS 



lnt«rn*(ion«I Butinm Machine Corporation 



Control Specif 



H 



»«»»♦ 



I 



Number 
Of Prini 
Positions 



n 



12930 31 32 33 34 35 ; 



Card ElectfjO Number 



12 
Pag* ! I | o' _ 



Progrim 
IdanTific 



cations 



Z u. 
62 b: 



Rettr lo Thf spt.'ci'ic Sysl 
Library manual lor acnial 



6X21-9092 UM/050' 
Printed in U.S.A. 



76 76 77 78 79 80 



I 65 66 67 68 69 71 



It 



Format of date 
month/day/year 
year/month/day 
day /month/year 



"Alternate decimal notation, 
decimal periods, or decimal 
commas 



In some systems, the name in 75-80 
of the Control and File Description 
Specifications form is used to name 
the object program 



Checking the Specifications 

Desk checking is a good way to reduce the number of potential program 
errors. Desk checking means carefully checking through your specifications to 
see whether you have: 

• Placed entries in appropriate positions 

• Used correct entries in positions 

• Spelled the same field and file names identically throughout your program 

• Used your indicators correctly 

If you should find that you have omitted a specification (did not name an input 
field or an output field or did not enter a calculation), you can enter it on a line 
following line 20 (line 10 on the Control and File Description Specifications 
form under File Description). 



The Programmer's Job 135 



Notice that no line numbers have been entered in positions 3-5 of the 
specification lines located below line 20. You can place numbers in these 
positions to tell where the missing specification belongs: 



IBM 



RPG OUTPUT SPECIFICATIONS 



0X21 9090 UM/050' 

Printed in U 5 A 



Program 


Keying 
Instruction 


Graphic 


■" 


■ ■ 
















Card tleclro Numljei 


Programmer 1 Date 


Key 


■" 












"" 



•m^ 



75 ;6 77 78 79 1 



D 



I 



^ 



SI 



sa 



H 9 10 11 t3 13 



1/^1/ 



OJC 



OH 

I 

on 
S 

0^ 



0% 



j:9 99 59 t^ s;9 ;9 19 



31 







Output Indicators 



And Arid 



01/ 



01 











•AUTO 
« 3? g* 36 38 37 



f MO Name 



ki.m 



iOQM 



(\ccm 



^ 



40 41 42 43 



fS 



:Bil 






H 



'^- 


^ero Balani:e5 


1 Yes 

No 
No 


Yeb 
No 
Yes 
No 



No Sign j CH 




X 


Remove 


i_. — 1 






Plus Sign 


1 


t.. 


1 


Y 


Ddie 


2 


e 


K 




f^ield Edit 


•■i 


c 


L 


I 


Zero 


4^ 


_P_., 


M 


L 


Suppress 



Constant or Edit Word 

J 9 10 11 12 13 14 li !6 17 18 19 20 21 22 33 24 ■ 



.46 47 48 49 bO 51 ri2 53 54 ^5 56 57 58 59 6Q 61 62 63 S4 er. 66 67 6H 69 70 



TTT 



^ijjA/v; 



omB 



li n n 74 



4 -J 



Wd^ 



ACCOUNT 



ss 



- i-4- 



AiVmBS^ 



r: 



in this example, the programmer did not specify information to be included 
on the second heading line. On the lines following line 20, he entered the 
missing specifications. Notice that positions 3-5 tell where the specifications 
belong. The line numbers 051 and 052 Indicate that the specifications belong 
between lines 05 and 06. 



+-4-- 



g f c ; 



If your specifications are being keypunched, the out-of-order cards must be 
inserted in the appropriate place. If the source program is being entered 
directly into the system through a keyboard, the missing specifications will 
have to be inserted in the appropriate place when the specifications are keyed. 



136 



COMPILE THE SOURCE PROGRAM 



©-. 



© 



When you think your source program is free of errors, it can be keyed 
according to the source entry method for your system. You can then compile 
your source program. The important part of compilation is, of course, 
translating the source program into machine language. But in addition to this, 
the compiler also produces the following program listing: 



0001 H 



01^ 



0001 0002 PNAMADD IP 

0002 0003 FINVOICfc 



0003 


0004 


INAM40D 


OOO'f 


0005 




0005 


0006 




0006 


0007 




0007 


0008 




0008 


0009 




0009 


0010 




0010 


0011 




0011 


0012 




0012 


0013 




0013 


0014 




001^ 


0015 




0015 


0016 





Oil 10 



128 128 
120 120 

1 CN 



OV 



DSIK 

PK INTfcR 



02N 20 



1 CT 



0016 0017 C 10 

0017 0018 C 20 

0018 0019 C 20 



0019 


0020 





0020 


0021 





0021 


0022 





0022 


0023 





0023 


0024 





0024 


0025 





0025 


0026 





0026 


0027 





0027 


0028 





0028 


0029 





0029 


0030 





0030 


0031 





0031 


0032 





0032 


0033 





0033 


0034 





0034 


0035 





0035 


0036 





0036 


0037 





0037 


0038 





0038 


0039 





0039 


0040 





0040 


0041 





0041 


0042 





0042 


0043 





0043 


0044 





0044 


0045 





0045 


0046 





0046 


0047 






2 


60ACCNO Ll 


7 


26 NAME 


27 


49 AOORl 


50 


72 A0DR2 


73 


95 ADJR3 


96 


960SHPC0 


2 


60ACCND LI 


9 


140ITEMN0 


15 


29 JESCRP 


30 


340JTY 


35 


392UPRICE 



I NVOCE 


liNVOCF 


INVOCE 


INVOCE 


INVOCE 


INVOCE 


1 NVOCE 


I NVOCE 


I NVOCE 


I NVOCE 


INVOCE 


INVOCE 


INVOCE 


INVOCE 


INVOCE 


INVOCE 



SHPCO 


COMP 2 






OTY 


MULT UPRICE 


AMOUNT 


52 


AMOUNT 


ADO INVTQT 


INVTOT 


102 



979899IS CODE 1 , 2 , 3, ? I NVOCE 
FIND ITEM TGTALINVOCE 
FIND INV TOTAL INVOCE 



304 



OR 



H 
OR 



H 
OR 



H 
OR 



H 
OR 



OR 



10 

OVNIO 

10 
OVNIO 



10 
OVNIO 



10 
OVNIO 



10 
OVNIO 



45 'INVOICE' 



H 32 

OR 



10 



OVNIO 

10 
OVNIO 



ACCNO 



NAME 



AOORl 



ADDR2 



A00R3 



17 


'ACCOUNT NJMaEK' 


23 




7 


'NAME' 


39 




10 


•ADDRESS' 


42 





97 
98 
99 



42 



42 



24 'SHIPPING INSTRUCTIONS' 

33 'BY AIR' 

33 'BY TRUCK' 

33 'BY RAIL* 



10 



I NVOCE 
INVOCE 
I NVOCE 
INVOCE 
INVOCE 
I NVOCE 
INVOCE 
INVOCE 
I NVOCE 
I NVOCE 
INVOCE 
I NVOCE 
I NVOCE 
INVOCE 
I NVOCE 
I NVOCE 
INVOCE 
INVOCE 
INVOCE 



INVOCE 
I NVOCE 
INVOCE 
INVOCE 
I NVOCE 
INVOCE 
INVOCE 
I NVOCE 
INVOCE 



The Programmer's Job 137 



<? 



© 



0050 
0051 
0052 
005 3 
005'» 
0055 
0056 
005 7 
005 8 
0059 
0060 
0061 



00<»8 

oo'fq 

0050 

0051 

0052 

0053 
005<» 

0055 

0056 

0057 

0058 

0059 

0060 G 

0061 

0062 



OR 



OVNIO 



20 



T 32 



LI 





U 


' ITEM NUMBER* 




34 


•DESCRIPTION* 




50 


•QUANTITY' 




65 


*UNIT PRICE* 




81 


'AMOUNT* 


ITEMNOZ 


11 




DESCRP 


36 




OTY Z 


-^9 




UPRICEl 


63 




AMOUNT 1 


82 






65 


•INVOICE TOTAL* 


INVTOTIB 


82 





iNvoce 

I NVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 
INVOCE 



®( 



© 



© 



INDICATORS USED 

LI OV 10 20 97 98 99 

FIELD NAMES USED 



STMTS 


NAME 


DEC 


LNG 


OISP 


000<f 


ACCNO 





0005 


016C 


0005 


NAME 




0020 


0113 


0006 


AODRl 




0023 


012A 


0007 


ADDR2 




0023 


Ol'.l 


0008 


ADDR3 




0023 


015d 


0009 


SHPCD 





0001 


016D 


0012 


ITEMNO 





0006 


0173 


0013 


DESCRP 




0015 


0167 


OOl'f 


QTY 





0005 


0178 


0015 


UPRICE 


2 


0005 


0170 


0017 


AMOUNT 


2 


0005 


0182 


0018 


INVTOT 


2 


0010 


018C 


ERROR 


NUMBER 


STATEMENT 


NUMBER 


RPG 


-0221 




00 n 





ERROR SEVERITY TEXT 
RPG-0025 T INVALID DEVICE NAME IN COLUMNS '►0-'.6f ASSUME DISK. 
RPG-0221 W RESULT FIELD LENGTH MAY NOT BE LARGE ENOUGH. 



The most important parts of the program listing' are: 

(a) a printout of source specifications including comment lines. Notice 
the number at the left of each line. This is the sequence number the 
compiler assigns to the specification. 

r B} a list of all indicators used in the program. 

[Cj A list of all fields used in the program. Included in the list is the 
storage location assigned to each field and a description of each 
field as indicated in your specifications. Some compilers also 
provide this information for constants used in the program. 

{Dj Diagnostic messages indicating the types of errors made and the 
statement in which they occur. 



Note that the sample listing shown is the program listing for the 
invoice job (INVOCE). 



138 



If the compiler finds any errors in your source specifications, it will print 
diagnostic messages telling you what errors were made. You will find that 
different types of messages are printed: warning, terminal, or informative. A 
warning message is an indication that something may be wrong. It you check 
the questioned specification and find that it is all right for your program, you 
need not make changes. If you get a terminal message, however, something is 
wrong with your coding. You must fix the specification and recompile the 
program before the compiler will actually translate your specifications. 

The diagnostic message section of the program listing contains two basic 
parts: a list of messages Q and an explanation of each message |0. 







ERROR NUMBER/ STATEMENT NUMBE 
RPG-OZZl'^ 0017 

n E 

ERROR SEVERITY,....--!!* Jta TEXT 

RPC-0025 T-'^'^INVALID DEVICE 'NiAME IN COLUMNS ^O-'tb, ASSUME DISK. 
RPG-0221 W RESULT FIELD LENGTH MAY NOT BE LARGE ENOUGH. 



Each error message in the list is identified by a 3-digit number Q. Next to the 
message number is either a statement number identifying the specification in 
which the error appears or a field name or constant associated with the error 
Q. Following the list of messages is an explanation of each error Q and an 
indication of the severity of each error (W = warning; T = terminaDlQ. 

The sample shown above shows diagnostic messages printed for the invoice 
job. Note that message 221 is a warning. A warning is an indication that 
something may be wrong. If you check the specification noted and find that it 
will work for the job, you need not change it. 

Checking the message in the listing, you would find that the warning points to 
the AMOUNT field in statement 0017: 

0017 0018 C 20 QTY MULT UPRICE AMOUNT 52 FIND ITEM TOTALINVOCE 



The AMOUNT field is specified as five characters with two decimal positions. 
In checking your specifications, you will find that the amount should have been 
7 digits with 2 decimals, and it was incorrectly keyed in the source data. 

Message 0025 is a terminal error. This error number appears belovi/ the 
statement at which the error occurred. Checking the listing where it appears at 
statement 1, the device entry DISK, was miskeyed as DSIK. You must correct 
this error. (Check the RPG II reference manual for your system for the correct 
entries for the Device positions.) 



The Programmer's Job 139 



TEST THE PROGRAM 

It is good practice to test your program before using it for an actual job. To do 
this, make up test data representing all possible situations that could arise 
during an actual job. Run your program using that data to see if your program 
will really handle the situations your think it does. If you get the wrong results 
when testing, you know your program is not doing what you thought it would. 
You can usually find your errors by using actual input data and doing the 
operations specified yourself, step-by-step, in the order the system would do 
them. When doing this, you have to follow closely your specifications and the 
program cycle operations taken by your program. After you test your program 
and the results show it can handle all situations, your job is complete. 



140 



Glossary 



address: A number identifying a location in storage. 

alphabetic: In general usage, any of the letters A-Z. In 
RPG II programming, any of the letters A-Z and special 
characters @, #, and $. 

alphameric: Any alphabetic or numeric characters. 



card reader: A device that electronically senses 
information on punched cards and transfers that 
information to the processing unit. 

character: Any individual data item that can be 
represented in printed form; that is, a letter, a digit, or a 
special character. 



alphameric constants: Any of the characters in the 
data character set. 

alphameric field: A field that contains any of the 
characters in the data character set. 



coding: Making entries on RPG II specification forms. 

comments: Words or statements in a program that 
serve as documentation rather than as instructions to 
the compiler. 



AND relationship: The specifying of conditioning 
indicators such that the operation conditioned will be 
performed only when all conditions are met. 



compile: Translate a source program (such as RPG II 
specifications) into an object program (machine language 
program) using the compiler. 



arithmetic/logic unit: An area inside the processing 
unit where calculations are performed. 



compiler: A program that translates a source program 
into a machine language program. 



arithmetic operation: An operation such as addition, 
subtraction, multiplication, and division performed in the 
processing unit. 

ascending order: The arrangement of records in a file 
from low to high, based on the contents of a specified 
field in each record. 

blank after: Changing the contents of a field so that it 
contains only zeros or blanks after that field has been 
written to the output record. 

Calculation Specifications form: An RPG II coding 
form which specifies the type and order of calculations 
to be performed on the input data. 

card: In data processing, a card containing 
combinations of holes representing data to a system. 

card file: A group of related punched-card records. 

card layout form: A chart for planning the design and 
format of cards. 

card punch: A device that records information on a 
card in the form of combinations of holes representing 
characters. 



conditioning: Using indicators to control when 
calculations or output operations are done. 

constant: A data item that does not change during 
execution of a program. This item represents itself and 
is actually used in processing rather than being a field 
name representing the data. For example, COST is a 
name representing a field containing data that changes, 
whereas the constant 100 is actual data used that does 
not change. 

control break: A change in the contents of a control 
field. 

Control and File Description Specifications form: An 

RPG II coding form that gives, for a particular job, 
information needed for control of the system and a 
description of the files used. 

control field: One or more fields that are compared 
from record to record to determine when certain 
operations should be performed. 

control group: A set of records all having the same 
control field information. 



Glossary 141 



control level Indicator: An indicator used to specify 
certain fields as control fields and to indicate which 
operations to perform at total time. 

control unit: An area inside the processing unit that 
determines from instructions what has to be done. It 
directs other units or devices to perform the required 
functions. 

data: A collection of facts, numbers, letters, and 
symbols that can be processed or produced by a 
system. 

data character set: All of the 256 EBCDIC characters. 

descending order: The arrangement of records in a file 
from high to low, based on the contents of a specific 
field in each record. 

detail record: An output record produced during the 
detail output operation of the RPG II program cycle. 

detail time: An operation in the RPG II program cycle 
in which calculation and output operations are 
performed for each tecord read. 

diagnostic message: An output message that identifies 
RPG II specification errors and their severity. 

digit: One of the characters 0-9. 

disk: A flat, circular plate with a magnetic surface on 
which data can be stored. 

disk drive: A device that reads data from or writes data 
on a disk. 

Disk file: A group of related records stored on disk. 

diskette: A thin, flexible magnetic disk permanently 
enclosed in a semirigid protective jacket. 

documentation: A written explanation of a program, its 
use, function, and operations. 

edit: To punctuate a numeric field by suppressing zeros 
and inserting commas, decimal points, dollar signs, or 
other constant information. 

edit code: A number or letter indicating that editing of 
a numeric field should be done according to a 
predefined pattern. This includes zero suppression and 
punctuation. 



eighty-column card: A punch card with 80 vertical 
columns representing 80 characters. 

end of file: The end of records in a file. 

error message: See diagnostic message. 

execute: To process input data files according to 
machine language instructions to produce the desired 
output. 

factor: In RPG II programming, a field name or 
constant used in a calculation operation. 

field: One or more adjacent record positions which 
contain related information. 

field indicator: An indicator used to show whether a 
given field in an input record is plus, minus, zero, or 
blank. 

field length: The number of positions allowed for a 
given field, determined by the maximum length of 
information that will be entered in the field. 

field name: In RPG II programming, a combination of 
no more than six alphabetic or numeric characters (the 
first of which must be alphabetic) that identifies a field. 

file: An organized collection of related records. 

file name: In RPG II programming, a combination of no 
more than eight alphabetic or numeric characters (the 
first of which must be alphabetic) that identifies a file. 

first page indicator: An indicator used to specify which 
lines (such as headings) should be printed on the first 
page only. 

half adjust: A method of rounding off a number by 
adjusting the last digit to be kept. When the number to 
the right of the last digit to be retained is 5 or greater, 1 
is added to the last retained digit. For example, 2.475 
half adjusted to two decimal places becomes 2.48, but 
2.474 becomes 2.47. 

heading: A constant, usually printed at the top of a 
page, identifying the information or report on that page. 

indicator: (1) A 2-digit or 2-character entry on the 
RPG II specification forms used to tell when certain 
calculation or output operations are to be performed. (2) 
An internal switch used by the object program to 
remember when a certain event occurs. 



142 



input: Data that is to be operated on (processed) by the 
system. 

input 1File: A set of records a program uses as a source 
of data. 

input specifications form: A coding form used to 
identify the different types of records in each input file 
and to describe the fields in each record. 

instruction: A statement that specifies an operation to 
be performed by the system and the locations in storage 
of all data involved in that operation. 

Keyboard: A device used to enter data into a system. 

Keypunch: A device, similar to a typewriter, used for 
punching information into cards. 

last record indicator: An indicator that signifies when 
the last data record has been processed. 

machine language: A language that can be interpreted 
and used by a system. 

ninety-six column card: A punch card with 96 vertical 
columns representing 96 characters. The columns are 
divided horizontally into thirds, such that the columns in 
the upper third are numbered 1 -32, in the middle third, 
33-64, and in the lower third, 65-96. 

numeric: Any combination of the digits 0-9. 

numeric constant: A constant used to represent a 
number than can consist of a decimal point, a sign, and 
the digits 0-9. 

object program: A set of instructions in machine 
language. The object program is produced by the 
compiler from the source program. 

operation: A defined action performed on one or more 
data items, such as adding, multiplying or comparing. 

operation code: A word or abbreviation specified on 
the Calculation Specifications form to identify an 
operation such as, SUB for subtract or ADD for 
addition. 

OR relationship: Specifying conditioning indicators so 
that the operation conditioned is performed when either 
one or both of the conditions are met. 



output: Data transferred from storage to an external 
medium such as printed form, punched cards, or disk. 

output file: A set of records that is written, punched, 
or printed by the system to an external medium. 

Output Specifications form: An RPG II coding form 
used to specify the records to be written in each output 
file and the format of the records. 

overflow: The condition that occurs when the last line 
to be printed on the page has been passed. 

overflow indicator: An indicator that signifies when the 
last line on a page has been printed or passed. It can 
be used to specify which lines are to be printed on the 
next page. 

overflow line: The line speicified as the last line printed 
on a page. 

overflow page: The new page after an overflow has 
occured. 

primary file: The main file from which a program first 
reads records. 

printer: An output device that records information on 
paper in the form of printed characters. 

printer spacing chart: A form used to plan the location 
of data in the printer output file. 

processing: To perform operations on data from an 
input record. 

processing unit: The part of a system that controls the 
system and its attached devices, provides storage area 
for the programs and data, and performs the operations 
specified in the program. 

Program: A set of instructions that (when stored) tells 
the system which operations; are to be done and how to 
do them. 

program cycle: A series of operations performed by 
the system for each record read. 

program listing: A printout which gives information 
about the source program, such as source statements, 
diagnostic messages, indicators used, storage addresses 
of fields, and constants used. 



punched card: See card. 



Glossary 143 



record: A group of related fields or data items treated 
as a unit. 

record identification code: A code placed in a record 
when it is created to identify that record type. 

record identifying indicator: An Indicator that 
identifies the type of record being processed during the 
current program cycle. 

record length: The total number of positions in a 
record. 

record types: The classification of records in a file. 
Records are classified according to a specific field or 
fields within each record. Records of the same type 
have the same fields in the same order and identical 
record identification codes. 

result field: The name of a field where the outcome of 
arithmetic calculations is kept. 

resulting indicators: An indicator that can signify (1) 
whether the result of a calculation is plus, minus, zero, 
or blank, or (2) whether a field is greater than, less than, 
or equal to another field. 

secondary file: Any file other than the primary file used 
in multifile processing. 

Source program: A set of instructions representing a 
particular job as defined by the programmer. These 
instructions are written in a programming language, such 
as RPG II. 

Special character: A character other than a digit, letter, 
or @, #, and $. For example, •, +, and % are special 
characters. 

Specification forms: Forms on which an RPG II 
program is coded and described. The four specification 
forms described in this manual are the Control and File 
Description Specifications form, the Input Specifications 
form, the Calculation Specifications form, and the 
Output Specifications form. 

Storage unit: An area inside the processing unit where 
instructions and data are stored. 

Total operations: Operations performed only after a 
group of records has been processed. 



Total time: That part of the RPG II progam cycle in 
which calculation and output operations specified for a 
group of records are done. 

Zero suppression: The elimination of leading zeros in a 
number. For example, 00057, when zero suppressed, 
becomes 6&B57 (B represents one blank space). 



144 



Index 



address 2 

alphameric constants 102 

alphameric field 24 

AND relationship 119 

arithmetic/logic unit of system 

arithmetic operation 102 



edit codes 34 
editing 33 
error messages 



139 



blank-after 59 



calculation operations 

description 40 

program cycle operations 40 

types of 42 

sample job 49 
calculation specifications form 41 
coding 4 
comment lines 133 
compare operation 99 
compilation 5 
compiler 5 
constants 

alphameric 102 

definition 42 

headings 66 

numeric 42, 102 
control break 54 
control field 54 
control level indicators 

definition 54 

program cycle operations 56 

RPG tl specifications 57 

sample job 60 
control section of system 2 
control specifications form 1 35 



data processing terms 8 
decimal positions 20, 47 
describing output records 25 
desk checking specifications 135 
detail output 15 
detail records 27 
device designation 18 
diagnostic messages 139 
documentation 133 



factor 1 42, 99 
factor 2 42, 99 
field 8 
field indicators 

definition 1 1 1 

program cycle operations 1 1 1 

RPG II specifications 112 

sample job 114 
field location 24, 29 
field names 22, 29 
files 

definition 8 

input 18 

output 18 
file description specifications form 16 
file designation 18 
file names 17, 21, 26 
first page (IP) indicator 

definition 64 

program cycle operations 65 

RPG II specifications 66 

sample job 77 



half-adjusting 47 
heading records 27 



indicators 53 
input 1 
input devices 1 
input/output operations 

description 14 

program cycle operations 1 4 

sample job 36 
input record description 20 
input specifications form 20 



Index 145 



job 1 


36 


job 2 


49 


job 3 


60 


job 4 


77 


job 5 


89 


job 6 


105 


job 7 


114 



last record (LR) indicator 

definition 74 

program cycle operations 75 

RF'G II specifications 76 

sample job 77 
LR indicator (see last record indicator) 
L1-L9 indicators (see control level indicators) 



primary file 18 
printed output 1 
printed reports 30 
printer spacing chart 10 
processing unit 1 

arithmetic/logic 2 

control 2 

storage 2 
program 3 
program cycle 1 1 
program cycle operations 
program listing 137 
programming aids 8 
programming language 3 
programming terms, basic 
programmer's job 121 



12 



machine language 3 



numenc constants 
numeric field 24 



42, 102 



OA-OG, OV indicators (see overflow Indicators) 

object program 3 

OR relationship 74, 118 

output 1 

output devices 1 

output record description 25 

output specifications form 25 

overflow 68 

overflow handling 68 

overflow Indicators 

definition 68 

program cycle operations 70 

RPG II specifications 72 

sample job 77 
overflow line 68 
overflow page 68 



record 8 

record identification codes 85 

record identifying indicators 

definition 81 

program cycle operations 82 

RPG II specifications 83 

sample job 89 
record layout form 9 
record length 19 
record size 19 
record type 27 
record type sequence 87 
reports, printed 30 
result field 45 

length 47 
resulting indicators 

definition 96 

program cycle operations 96 

RPG II specifications 98 

sample job 105 
rounding 47 
RPG II program cycle 11 
RPG II programming language 3 
RPG II specification forms 4 



146 



skip 72 
skipping 31 

tapeless carriage control 31 
source program 
connipjiation 4 
description 3 
translation 5 
spacing 

after printing 73 
description 30 
with overflow 72 
specifications forms 4 
specification form order 134 
specifying record identification codes 85 
specifying record identifying indicators 86 
specifying record type sequence 87 
storage section of system 2 
system, data processing 
description 1 
input devices 1 
output devices 1 
processing unit 1 



test the program 140 
total records 27 
t/pe of data 24 



1 P indicator (see first page indicator) 
01-99 indicators (see field indicators, 

record identifying indicators, resulting 

indicators) 



Index 147 



148 



Introduction to RPG II 
Report Writing 



GC21 -7514-2 



tc 
o 



UJ 

s 



UJ 

Q 

< 

oc 



E 
E 

n 





03 O 



!8 ^ 






5 i£ 



o e 



c 



«> >■ r 
•- »- -o 

<» i: -X 

<A (D ^ 

0) O > 

o i^' 

3 8 E 
3= ? 

^ . c 
c E M 



2 S -c 

|3» O * ra 

■o " - 
IS 



1= .£ w » 
i5 3 ° ! 

— ™ a .5 






I 



5 



8 % 



IS ^ 

s i 






O 0) 



I § 

3 n 
a .a 
>■ 3 

11 



o 1^ 

O J3 
f & 

a ^ 

il 



a 



o 
2 



3 

a 
c 



> o 



> > 

O CD 

II 

c ro 
O .5} 



a o 
i uj 

c 
o 



I 
I 



ro .2 
.E S 
t E 
3 o 
■E •£ 



™ 2 ?! 

I g 3 

i: 0) o 

2* m ^ 

■° S- i 

c o .= 

s a- ° 

3 ra o 

>. S ,» 

<D > "• 

E .2 3 

5 1 8 

e - •s 



< 

CO 



? 



a 

8 

a. 
o 

z 



GC2 1-7514-2 



> 
o 



Fold 



Fold 



FIRST CLASS 
PERMIT NO. 40 
ARMONK, N. Y. 



BUSINESS REPLY MAIL 

NO POSTAGE STAMP NECESSARY IF MAILED IN THE UNITED STATES 



POSTAGE WILL BE PAID BY 



IBM Corporation 
General Systems Division 
Development Laboratory 
Publications, Dept. 245 
Rochester, Minnesota 55901 




§. 

c 



o 

3) 
■D 



T3 
O 

3 



2 

o 



Fold 



Fold 



International Business Machines Corporation 

General Systems Division 
4111 Northside Parkway N.W. 
P.O. Box 2150 
Atlanta, Georgia 30301 
(U.S.A. only) 

General Business Group/International 

44 South Broadway 

White Plains, New York 10601 

U.S.A. 

(International) 



c 
'v> 
> 

Q 
O 
to 



Introduction to RPG II 
Report Writing 



GC21 -7514-2 





i: 


CA 


flj -» 






JE 


3 


■£ o 






!E 


s 


> ^ 






JO 




•£ "D 









0) 


(0 "8 






m 








'a. 




^'i 






ii 


(1- 

C 

.9 


^4 






c: (D 


.13 


1- (0 






Mr « 


3 

1 


8 E 

— O) 

» o 






*^ S 


e 


. c 
E .» 






«.> ID 










M, 0) 


"i 






cc 
o 


5^ 

Ee o 
si 


is 
1= 
is 

<♦- 

(: 

i? 


s postage-iJaid 
ou why a chai 
nd address. 


1 


u. 


Si 


/ using thi 
n, or tell y 
ur name a 




lU 


3 £ 

15 S 


£: 


a 


^ 


c o 

■c a 


1 


.Q o o 

- CO 0) 


Q> 

1 




s S 


3 


S:M? 


a. 


S 01 


iltl 




UJ 

111 










cc 


? 2 

e o 

li 
|i 

5 T3 

o 

0) 


t 



Z 

"c 
o 
o 

o> 

T3 
C 
OJ 

1 








re 








1 <»■■ 

1 § 


(ft 








^ -;:: 


~! 








3 re 










Q. .9 


"re 








> ^ 


o 








^ 3 


£' 








C ^^ 


& 








11 


1 


^ 






sS 


a 

5- 


1 






> -a 




Uj 






1? 


c 
.2 








II 


i 


1 






« <i> 


3 


3 








a 


a 






c 


9 






8 -. 

3 M 

S 





1 






S a 


111 








J '9- 









1 5 



> o 
S > 



11 
M 

c re 

I! 

o c 



o o 



2-c 



< 

ui 

c 



.t; 0* 
.■9 § 3 

^ a; o 



o .E 

a c 

a o 

<o u 



E .3! 3 

sE 8 
5 .= •s 



8 
a 
o 

z 

• 



GC2 1-7514-2 



Fold 



Fold 



FIRST CLASS 
PERMIT NO. 40 
ARMONK, N. Y. 



BUSINESS REPLY MAIL 

NO POSTAGE STAMP NECESSARY IF MAILED IN THE UNITED STATES 



POSTAGE WILL BE PAID BY 



I BM Corporation 
General Systems Division 
Development Laboratory 
Publications, Dept. 245 
Rochester, Minnesota 55901 




Fold 



Fold 



International Business Machines Corporation 

General Systems Division 
4111 Northside Parkway N.W. 
P.O. Box 2150 
Atlanta, Georgia 30301 
(U.S.A only) 

General Business Group/International 

44 South Broadway 

White Plains, New Yorl( 10601 

U.S.A. 

(international) 



Introduction to RPG II 
Report Writing 



GC21-7514-2 



o 



UJ 

S 

OC 
UJ 

Q 
< 
ui 
OC 



iS) 
o 



c: (5 

CF) ,_ 

«' Si 

SI s 



5 ^ 



(5 "8 



11 

_ O 
CO ■»- 






2 S 
1° 









Q- .2 



T3 
re 

E 



JO = 



.!= E 

i: o 

o -^ 

io •= 



g i^ 1= S 



O * re 
IJ "> c 

■p E" " I 

ff ^§ I 
t; — (D a» 

Si 11^ 

— > (0 Q. .— 



i 



I 



E 

re 

Z 



5 



5 E 



o 

z 



> 


o 


c 


> 


CD 




c 


jj 




0) 


> 


> 




OJ 


c 




a 


tu 



O 

> 



t E 



< 
ui 



S c 

o .2 

§ :^ 

E £ 



a o 



? 



3 

3 

a 



o 

lU 



I 



CD 


o 

■c. 


j=: 


E 


D 




S 


Jtr 


.^ 


1 


3 


i 


*J 


S 


o 




+j 




fS 




re 




n 


"D 




(U 


9 


■D 


Q. 






C 


O 














a 


c 




di 


a 


o 


ft 


3 


CO 


o 


(0 










^ 


$ 


CD 


8 


E 


V 


o 


a 


5 




o 
u 


o 

z 


CO 










.— 


o 


• 



GC21-7514-2 



> 

o 



Fold 



Fold 



FIRST CLASS 
PERMIT NO. 40 
ARMONK, N. Y. 



BUSINESS REPLY MAIL 

NO POSTAGE STAMP NECESSARY IF MAILED IN THE UNITED STATES 



POSTAGE WILL BE PAID BY . . . 



IBM Corporation 
General Systems Division 
Development Laboratory 
Publications, Dept. 245 
Rochester, Minnesota 55901 




Fold 



Fold 



International Business Machines Corporation 

General Systems Division 
4111 Northside Parkway N.W. 
P.O. Box 2150 
Atlanta, Georgia 30301 
(U.S.A. only) 

General Business Group/International 

44 South Broadway 

White Plains, New York 10601 

U.S.A. 

(International) 



International Business Machines Corporation 

General Systems Division 
4111 Northside Parkway N.W. 
P.O. Box 2150 
Atlanta, Georgia 30301 
(U.S.A. only) 

General Business Group/International 

44 South Broadway 

White Plains, New York 10601 

U.S.A. 

(International) 



2 
O 



C 
in 
> 



o 



GC21-7514-2 



