pc AD"“A242 272 dagf 

■ I 111111111 mil mil mil mil nil nil • 


Ptx>lic roponing burdtn lor It 
DMdod, M rtviowng ttw a 
HtadquaiUn Swvic*. Oirtc 
Manigwnont and Budgal. Waahinglon. DC 20503 


1. AGENCY USE ONLY (Leave Blank) 


4. TITLE AND SUBTITLE 


Form Approved 
OPM No. 0704-0188 




2. REPORT DATE 


lia dma lor laviawing inunictiont, saardiing txiiting data sourca* gatharlng and maintaining tha data 
M aspact ol thia colaction ol Hormalioa Including suggaationc lor raductng ttila burdan, to WaahmgKm 
la 1204. Artinglon, VA 22202-4302. and to tha Ollica ol bibimation and Ragulaloiy Attain. Ollica ol 


3. REPORT TYPE AND DATES COVERED 

Rnal: 02 Nov 1990 tp 01 Jun 1993 


901102W11055A!sys, Inc., AlsyCOMP_016 Version 5.1, CompuAdd 320 (Host & 
Target), 901102W1.11056 





7. PERFORMING ORGANIZATION NAME{S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-410-0891 


9. SPONSORING/MONITORING AGENCY NAME(.S) AND ADD,RESS{ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm3E114 
Washington, D.C. 20301-3081 


10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 


11. SUPPLEMENTARY NOTES f I i I I P 

l\}o 2 tXJ 'Jt/v cLc-'O , hiy V t C-KcilJCt., 


12a. DISTRIBUTION/AVAILABIUTY STATEMENT 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Alsys, Inc., AlsyCOMP_016 Version 5.1, Wright-Patterson AFB, OH, CompuAdd 320 (Host & Target), ACVC 1.11. 


91-15078 

mill nil! iim ..- " ^ 




14. SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CUSSIFICATION 
OF REPORT 

UNCLASSIFIED 


NSN 7540-01-280-550 


18. SECURITY CLASSIFICATION 


UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 


1 1104 i;i 


15. NUMBER OF PAGES 


16. PRICE CODE 


20 LIMITATION OF ABSTRACT 


Standard Form 298, (Rev. 2-89) 
Prescribed by ANSI Std. 239-128 























AVF Control Num^r: AVF-VSR-412-0891 

23-August-1991 

90-06-01-ALS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate I'lumber: 901102W1.11058 
Alsys, Inc. 

AlsyCOMP 003 Version 5.x 
HP Vectra RS/2'?C => HP Vectra RS/25C 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Aciftaal&ii ?or 


I L-T’iC TiF, 

I 1' ’jKTed 


m 

□ 

n 


I 



■ A.nil and/or 


;Di^t i Kpsoial 










Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was conpleted on 2 November 1990. 

Con 5 )iler Name and Version: AlsyCOMP_003, Version 5.1 

Host Computer System: HP Vectra RS/25C (under MS/BOS 3.30) 

Target Con^Juter System: HP Vectra RS/25C (;mder MS/DOS 3.30) 

Customer Agreement Number: 90-06-01-ALS 


See Section 3.1 for any additional information about the testing 
environment. 

As a restilt of this validation effort, Validation Certificate 
901102W1.11058 is awarded to Alsys, Inc. This certificate expires on 1 
June 1993. 

This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Director, Computer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Dr. John Soloraond, Director 
Department of Defense 
Washington DC 20301 





DECLARATION OF CONFORMANCE 


CUSTOMER: Alsys, Inc. 


ADA VALIDATION FACIUTY: Ada Validation Facility (ASD/SCEL) 

Computer Operations Division 
Information Systems and Technology Center 
Wright-Patterson AFB OH 45433-6503 

ACVC VERSION: 1.11 


ADA IMPLEMENTATION: 

COMPILER NAME AND VERSION: ALSYS_COMP_C03-ADA 

HOST COMPUTER SYSTEM: HP Vectra RS/25C 

under MS/DOS 3.30 

TARGET COMPUTER SYSTEM: HP Vectra RS/25C 

under MS/DOS 3.30 


CUSTOMER'S DECLARATION: 

I, the undersigned, representing Alsys, Inc., declare that Alsys, Inc. has no knowledge of 
deliberate deviations from the Ada Language Standard ANSI/ML-STD-1815A in the 
implementation listed in this declaration. 

Mike Blanchette, Date 

Vice President, Engineering 
Alsys, Inc. 

67 South Bedford Street 
Burlington, MA 01803-5152 




TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTIOJ 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION 3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 

















CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the ’’Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from; 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 


Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-1 



INTRODUCTION 


1,2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

. ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint Program 
Office, August 1990. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class B 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set ct identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_PILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer, A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 




INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 


Ada Compiler 


The software and any needed hardware that have to 
to a given host and target computer system 
transformation of Ada programs into executable 
execution thereof. 


be jdded 
to allow 
form and 


Ada Compiler 
Validation 
Capability 
(ACVC) 


The means for testing compliance of Ada implementations, 
consisting of the test suite, the support programs, the ACVC 
user's guide and the template for the validation summary 
report. 


Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 


Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 


Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 


Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 


Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 




INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRH 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 12 October 1990. 


E28005C 

B28006C 

C34006D 

B41308B 

C43004A 

C45114A 

C45346A 

C45612B 

C4565LA 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

B85001L 

C83026A 

C83041A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CnA20lE 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 




addition to 

the tests 

indicated above 

, C35702A was withdrawn 

as a result 


of a challenge by this customer; it was included in the subsequent list of 
withdrawn tests, dated 21 November 1990. 


2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 







IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35404D, C45231D, B86001X, C86006E, and CD7101G check for a predefined 
integer type with a name other than INTEGER, LONG_INTEGER, or 
SHORT INTEGER. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCNG_FLOAT, or SHORT_FLClAT. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45536A, C46013B, C46031B, C46033B, and C46034B contain 'SMALL 
representation clauses which are not powers of two. 

CD2A53A checks operations of a fixed-point type for \diich a length 
clause specifies a power-of-ten TYPE'SMALL; this implementation does not 
support decimal 'SMALLs. (See section 2.3.) 

C45624A checks that the proper exception is raised if MACHINE_OVERFLCWS 
is FALSE for floating point types with digits 5. For this 
implementation, MACHINEjOVERFLCWS is TRUE. 

C45624B checks that the proper exception is raised if MACHINEjOVERFLCWS 
is FALSE for floating point types with digits 6. For this 
implementation, MACHINEjOVERFLCWS is TRUE. 

C86001F recompiles package SYSTEM, making package TEXT_IO, and hence 
package REPORT, obsolete. 

C96005B checks for values of type DURATION'BASE that are outside the 
range of DURATION. There are no such values for this inplementation. 

CD1009C uses a representation clause specifying a non-default size for a 
floating-point type. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 

B86001Y checks for a predefined fixed-point type other than DURATION. 


2-2 



IMPLEJffiNTATION DEPENDENCIES 


BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions. 

The tests listed in the following table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access method. 


Test 

File Operation Mode 

File Access Method 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT_FILE 

DIRECT 10 

CE3102F 

RESET 

Any Mode 

TEXl 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


The tests listed in the following table are not applicable because the 
given file operations are not supported for the given combination of 
mode and file access method. 

Test File Operation Mode File Access Method 


CE2105A CREATE IN_FILE SEQUENTIAL_IO 
CE2105B CREATE IN_FILE blRECT_IO 

CE3109A CREATE IN_FILE TEXT_IO 

The following 16 tests check operations on sequential, direct, and text 
files vdien multiple internal files are associated with the same external 
file and one or more are open for writing; USE_ERROR is raised when this 
association is attempted. 


CE2107B,.E CE2107G..H CE2107L CD2110B CE2110D 

CE2111D CE2111H CE3111B CE3111D..E CE3114B 

CE3115A 

CE2111C raises a USE_SRROR when file is RESET from IN_FILE to OUT_FILE. 

CE2203A checks that VJRIT^ raises USE_ERROR if the capacity of the 
external file is exceeded for SEQUENTlAL_IO. This implementation does 
not restrict file capacity. 


2-3 





IMPLEMENTATION DEPENDENCIES 


EE2401D and EE2401G use instantiations of package DIRECT_I0 with 
unconstrained array types and record types with discriminants without 
defaults. These instantiations are rejected by this con^jiler. 

CE2401H raises USE_ERROR v4ien CREATE with mode INOUT_FILE is used for 
unconstrained records with default discriminants. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for DIRECT_IO. This iiiplementation does not 
restrict file capacity. 

CE3304A checks that USE_ERROR is raised if a call to SET LINE LENGTH or 
SET_EAGE LENGTH specifies a value that is inappropriate Tor tEe external 
file. TEis implementation does not have inappropriate values for either 
line length or page length. 

CE3413B checks that PAGE raises LAYOUT_ERROR vdien the value of the page 
number exceeds COUNT'LAST. For this inplementation, the value of 
COUNT'LAST is greater than 150000 making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 


Modifications (see section 1.3) were required for 24 tests. 


The following tests were split into two or more tests because this 
iii 5 )lementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 


B23004A 

B28003A 

B61012A 

BC2001D 


B24007A 

B32202A 

B9i004A 

BC3009A 


B24009A 

B32202B 

B95069A 

BC3009C 


B25002A 

B32202C 

B95069B 


B26005A 

B37004A 

B97103E 


B27005A 

B45102A 

BAllOlB 


BA2001E was graded passed by Evaluation Modification as directed by the 
AVO. The test expects that duplicate names of subunits with a common 
ancestor will be detected as coitpilation errors; this implementation 
detects the errors at link time, and the AVO ruled that this behavior is 
acceptable. 

CD2A53A was graded inapplicable by Evaluation Modification as directed by 
the AVO. The test contains a specification of a power-of-10 value as small 
for a fixed-point type. The AVO ruled that, under ACVC 1.11, support of 
decimal smalls may be omitted. 

EA3004D was graded passed by E>/aluation and Processing Modification as 
directed by the AVO. The test requires that either pragma INLINE is obeyed 
for a function call in each of three contexts and that thus three library 
units are made obsolete by the re-conpilation of the inlined function's 
body, or else the pragma is ignored conpletely. This implementation obeys 


2-4 





IMPLEMENTATION DEPENDENCIES 


the pragma except \^en the call is within the package specification. When 
the test's files are processed in the given order, only two units are made 
obsolete; thus, the expected error at line 27 of file EA3004D6M is not 
valid and is not flagged. To confirm that indeed the pragma is not obeyed 
in this one case, the test was also processed with the files re-ordered so 
that the re-conpilation follows only the package declaration (and thus the 
other library units will not be made obsolete, as they are compiled later); 
a "NOT APPLICABLE" result was produced, as expected. The revised order of 
files was 0-1-4-5-2-3-6. 


2-5 









CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For a point of contact for technical information about this Ada 
inplementation system, see: 

Mike Blanchette 
67 South Bedford Street 
Burlington MA 01803-5152 

For a point of contact for sales information about this Ada implementation 
system, see: 


Mike Blanchette 
67 South Bedford Street 
Burlington MA 01803-5152 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada In^jlementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


3-1 





PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3805 

b) Total Number of Withdrawn Tests 82 

c) Processed Inapplicable Tests 82 

d) ' Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

' Precision Tests 201 

f) Total Number of Inapplicable Tests 283 


g) Total Number of Tests for ACVC 1.11 4170 


All I/O tests of the test suite were processed because this inplementation 
supports a file system. The above number of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTICW 

A magnetic tape containing the customized test suite (?ee section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a VAX/VMS system and then transferred to the 
host computer via a FTP LAN network. 

After the test files were loaded onto the host conpiter, the full set of 
tests was processed by the Ada in^Dlementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this inplementation. The options invoked 
explicitly for validation tec-ting during this test were; 


OPTION/SWITCH 

EFFECT 

SHOW => NO 

Do not show header nor error 
summary in listing. 

WARNING => NO 

Do not include warning messages. 

GENERIC => STUB 

Place code of generic instantiation 
in separate subunits. 

ERROR *> 999 

Maximum number of compilation errors 
permitted before terminating the 
compilation. 

CALLS => INLINED 

This option allows insertion of code for 
subprograms inline and must be set for 
the pragma INLINE to be operative. 


3-2 







PROCESSING INFORMATION 


MODULE => \alsys\duiimves.obj 

Required by run-time library. 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$BIG_ID1 (1..V-1 => 'A', V => '1') 

$BIG_ID2 (1..V-1 => 'A', V => '1') 

$BIG_ID3 (1..V/2 => 'k') & '3' & 

(1..V-1-V/2 => 'A') 

$BIG_ID4 (1..V/2 => 'A') & '4' & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT (1..V-3 => '0') & "298" 

$BIG_REAL_LIT (1..V-5 => '0') & "690.0" 

$BIG_STRING1 & (1..V/2 => 'A') & 

$BIG_STRING2 & (1..V-1-V/2 => 'A') & 'V & 

$BLANKS (1..V-20 => ' ') 

$MAX_LEN_INT_BASED_LITERAL 

"2;" & (1..V-5 => '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 

$MAX_STRING_LITERAL & (1..V-2 => 'A') & 


A-1 






MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$MAX_IN_LEN 

255 

$ACC_SIZE 

32 

$ALIGNMENT 

2 

$COUNT_LAST 

2147483647 

$DEFAULT_MEM_SIZE 

2**24 

$default_stor_unit 

8 

$DEFAULT_SYS_NAME 

180X86 

$DELTA_D0C 

2#1.0#E-31 

$ENTRY_ADDRESS 

SYSTEM.VALUE("00010:0040”) 

$ENTRY_ADDRESS1 

SYSTEM.VALUE("00010:0080") 

$ENTRY_ADDRESS2 

SYSTEM.VALUE("00010:0100") 

$FIELD_LAST 

255 

$FILE_TERMINAT0R 

t t 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$FLOAT_NAME 

NO_SUCH_FLOAT_TYPE 

$FORM_STRING 

nil 

$F0RM_STRING2 

"CANNOT_RESTRICT_FILE_CAPACITY 

$GREATER THAN DURATION 

75000.0 


$GREATER_THAN_DURATION_BASE_LAST 

131073.0 

$GREATER_THAN_FLOAT_BASE_LAST 

1.30141E+38 

$GREATER_THAN_FLOAT_SAFE_LARGE 

1.0E308 


A-2 





MACRO PARAMETERS 


$GREATER THAN_SHORT FLOAT_SAFE_LARGE 

“ 1.0E308 

$HIGH_PRIORITY 10 

$ILLEGAL_EXTERNAL FILE_NAME1 

\NODIRECTORY\FILENAME 

$ILLEGAL EXTERNAL_FILE_NAME2 

THIS_FILE_NAME_IS_TOO_LONG_FOR_HY_SYSTEM 

$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST”) 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ':"B28006D1.TST") 

$INrEGER_FIRST -32768 

$INTEGER_LAST 32767 

$INTEGER_UST_PLUS_1 32768 

$INTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -75000.0 

SLESS THAN_DURATION_BASE_FIRST 

-131073.0 

$LINE_TERMINATOR ASCII.CR & ASCII.LF 

SLOFPRIORITY 1 

$MACHINE CODE STATEMENT 



NULL; 

$MACHINE_CODE_TYPE 

N0_SUCH_TYPE 

$MANTISSA_DOC 

31 

$MAX_DIGITS 

15 

$MAX_INT 

2147483647 

$MAX_INT_PLUS_1 

2147483648 

$MIN INT 

-2147483648 


A-3 





MACRO PARAMETERS 


$NAME 

NO_SUCH_TYPE_AVAILABLE 


$NAME_LIST 

180X86 


$NAME_SPECIFICATIONl 

D:\WORK\X2120A 


$NAME_SPECIFICATION2 

D:\V0RK\X2120B 


$NAME_SPECIFICATION3 

D:\WORK\X3119A 


$NEG_BASED_INT 

16#F000000E# 


$NEW_MEM_SIZE 

2**24 


$NEW_STOR_UNIT 

16 


$NEW_SYS_NAME 

180X86 


$PAGE_TERMINATOR 

ASCII.CR & ASCII.LF & ASCII.FF 

$RECORD_DEFINITION 

NEW INTEGER; 


$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TYPE 

$TASK_SIZE 

32 


$TASK_STORAGE_SIZE 

1024 


STICK 

1.0/18.2 


$VARIABLE_ADDRESS 

SYSTEM.VALUE("0010:0020" 

) 

$VARIABLE_ADDRESS1 

SYSTEM.VALUE("0010:0024" 

) 

$VARIABLE_ADDRESS2 

SYSTEM.VALUE("0010:0028" 

) 

$YOUR PRAGMA 

INTERFACE 



A-4 




APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


Compile Options 


COMPILE (SOURCE => 

LIBRARY => 

OPTIONS => 

(ANNOTATE 
ERRORS 
LEVEL 
CHECKS 
GENERICS 
TASKING 
MEMORY 

DISPLAY => 

(OUTPUT 
WARNING 
TEXT 
SHOW 
DETAIL 
ASSEMBLY 
ALLOCATION => 
(STACK 

IMPROVE => 

(CALLS 
REDUCTION 
EXPRESSIONS 


KEEP 

(COPY 

DEBUG 

TREE 


=> 


source_name | INSTANTIATION, 
library_name, 

=> character_string, 

=> positive Integer, 

=> PARSE I SEMANTIC | CODE I 
=> ALL I STACK | NONE, 

*> STUBS J INLINE, 

=> YES ) NO, 

=> number_of_kbytes), 


UPDATE, 


SCREEN I NONE | AUTOMATIC | file name, 
YES ) NO, - 

YES I NO, 

BANNER I RECAP ) ALL I NONE, 

YES I NO, 

CODE I MAP I ALL 1 NONE), 


=> positive_integer), 

=> NORMAL 1 INLINED, 

=> NONE I PARTIAL | EXTENSIVE, 
=> NONE 1 PARTIAL j EXTENSIVE); 

=> YES I NO, 

=> YES 1 NO, 

=> YES I NO)); 


B-1 


COMPILAl.'ON SYSTEM OPTIONS 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and 
not to this report. 

bind Options 


BIND (PROGRAM => 

main 

program name, 

LIBRARY => 

library name, 

OPTIONS => 



(LEVEL 

=> 

CHECK 1 BIND | LINK, 

EXECUTION 

=> 

EXTENDED | PROTECTED, 

FLOAT 

=> 

AUTOMATIC 1 HARDWARE | SOFTWARE, 

MATHLIB 


1287 1 1387, 

OBJECT 

=> 

AUTOMATIC 1 file name. 

UNCALLED 


REMOVE 1 KEEP, 

TIMER 


NORMAL 1 FAST, 

SLICE 

=-> 

NO 1 positive integer). 

STACK => 

(MAIN 

=> 

positive_integer, 

TASK 

=> 

positive integer. 

HISTORY 

=> 

YES I NO), 

HEAP => 

(SIZE 

=> 

positive_integer. 

INCREMENT 

=> 

positive integer). 

INTERFACE => 

(DIRECTIVES 

1 => 

options_for_linker, 

MODULES 

=> 

file_names. 

SEARCH 

=> 

library_names), 

DISPLAY => 



(OUTPUT 

=> 

SCREEN 1 NONE | AUTOMATIC | file name. 

DATA 

=> 

BIND 1 LINK 1 ALL | NONE, 

WARNING 

=> 

YES 1 NO), 

KEEP => 

(DEBUG 

=> 

YES 1 NO, 

TUNE 

=> 

YES 1 NO)); 


B-2 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767? 
type SHORT INTEGER is range -128 ..127? 
type LONG_lNTEGER is range -2147483648 .. 2147483647? 
type FLOAT is digits 6 range 

-2#1.11111111111111111111111#E+127 .. 

2#1.11111111111111111111111#E+127? 
type SH0RT_FL0AT is digits 6 range 

-2#1.11111111111111111111111#E+127 .. 

2#1.11111111111111111111111#E+127? 
type L0NG_FL0AT is digits 15 range 

2#1.1111111111111111111111111111111111111111111111111111#E1023 .. 
2#1.1111111111111111111111111111111111111111111111111111#E1023? 
type NATURAL is Integer range 0..INTEGER'last? 
type DURATION is delta 2#0.00000000000001# range 
-131072.0000 .. 131071.99994? 
type POSITIVE is INTEGER range 1..INTEGER'last? 


end STANDARD? 


C-1 





PRE-RELEASE DOCUMENTATION- OCTOBER 1990 


Alsys FirstAda Development Environment 


APPENDIX F 


Version 5 




Copyright 1990 by Alsys 


All rights reserved. No part of this document may be reproduced in any form or by any 
means without permission in writing from Alsys. 


Printed: Oaoberl990 

Alsys reserves the right to make changes in specifications and other information 
contained in this publication without prior notice. Consult Alsys to determine 
whether such changes have been made. 


Al*y«i AdsWorid, Ad»Prob«, AdkXnf, AdaRefomutt, AdsMak*, AdaVarify, AdaCount, and 
AdaflpU t iM rt(uUr«d tradamarki of Alayi. 

Mienacft, MS-DOS, and MS art r«ci*ttrtd trademarka of Mieroaoft Corporation. 

IBM, PC AT, PS/3, and PC-DOS ar« ragUtartd tradamarka of Intamational Buainaaa Machinaa 
Corporation. 

INTEL ia a rapatarad tradamark of Intal Corporation. 






TABLE OF CONTENTS 


APPENDIX F 


1 Implementatioii'Dependent Pragmas 

1.1 INLINE 

1.2 INTERFACE 

13 INTERFACE NAME 

1.4 INDENT 

1.5 Other Pragmas 


2 Implementation-Dependeiit Attributes 

11 PTS_ARRAY 

12 EEXCEPnON_CODE 

13 Attributes Used in Record Representation Clauses 


3 Specification of vUe package SYSTEM 


4 Support for Representation Clauses 

4.1 Enumeration Types 

4.1.1 Enumeration Literal Encoding 

4.1.2 Enumeration Types and Object Sizes 

4.2 Integer Types 

43.1 Integer Type Representation 
4.23 Integer T^ and Object Size 

4.3 Floating Point Types 

43.1 Floating Point Type Representation 

43.2 Floating Point T^ and Object Size 

4.4 Fixed Point Types 

4.4.1 Fixed Point Type Representation 

4.4.2 Fixed Point T^ and Object Size 


Table of Contents 





4.5 Access Types and GiUeaiocs 24 

4.6 Task Types 24 

4.7 Array Types 25 

4.7.1 Array Layout and Structure and Pragma PACK 25 

4.7.2 Array Subtype and Object Size 28 

4.8 Record Types 29 

4.8.1 Basic Record Structure 29 

4.8.2 Indirea G}mponents 31 

4.8 J Implicit Components 34 

4.8.4 Size of Record Types and Objects 38 

5 Conventions for Implementation-Generated Names 39 

6 Address Qauses 41 

6.1 Address Clauses for Objects 41 

6.2 Address Clauses for Program Units 42 

63 Address Clauses for Interrupt Entries 42 

7 Unchecked Conversions 43 

8 Input'Outpnt Packages 45 

8.1 Correspondence between External Hies and DOS Hies 45 

8.2 Enor Handling 46 

%3 The FORM Parameter 46 

8.4 Sequential Hies 47 

8.5 DireaHles 48 

&6 Text Hies 48 

8.7 Access Protection of External Files 49 

8.8 The Need to Gose a Hie Explicitly 49 

8.9 Limitation on the Procedure RESET 49 

8.10 Sharing of External Hies and Tasking Issues 50 


u 


Appendix F, Version 5 







9 


Characteristics of Numeric Types 


9.1 Integer Types 

9.2 Floating Point Type Attributes 

9.3 Attributes of Ty^ DURATION 


10 Other Implemeiitation>Dependent Characteristics 

10.1 Use of the Floating-Point Coprocessor 

10.2 Characteristics of the Heap 
103 Charaaeristics of Tasks 

10.4 Definition of a Main Subprogram 

10.5 Ordering of Compilation Units 

11 Limitations 

11.1 Compiler Limitations 

11.2 Hardware Related Limitations 


INDEX 


Table of Contents 





Appendix F, Version 5 



APPENDIX F 


Implementation - Dependent Characteristics 


This appendix summarizes the implementation-dependent characteristics of the Alsys 
FirstAda Development Environment Appendix F is a required part of the Reference 
Manual for the Ada Propamming Language (called the RM in this appendix). 

The sections of this appendix are as follows: 

1. The form, allowed places, and effect of every implementation-dependent pragma. 

2. The name and the type of eveiy implementation-dependent attribute. 

3. The specification of the package SYSTEM. 

4. The description of the representation clauses. 

5. The conventions used for any implementation-generated name denoting im¬ 
plementation-dependent components. 

6. The interpretation of expressions that appear in address clauses, including those 
for interrupts. 

7. Any restrictions on unchecked conversions. 

8. Any implementation-dependent characteristics of the input-output packages. 

9. Cbaraaeristics of numeric types. 

10. Other implementation-dependent characteristics. 

11. Compiler limitations. 


Implementation-Dependent Characteristics 


1 






The mmeAIsys Runtime Executive Programs or simply Runtime Executive refers to the 
runtime hbraiy routines provided for all Ada programs. These routines implement the 
Ada heap, exceptions, tasking control, and other utility functions. 

General systems programming notes are given in another document, the Application 
Developer’s Guide (for example, parameter passing conventions needed for interface with 
assembly routines). 


2 


Appendix F, Version 5 


Section 1 


Implementation-Dependent Pragmas 


1.1 INLINE 

Pragma INLINE is fully supponed; however, it is not possible to inlin e a subprogram in a 
declarative part 


1.2 INTERFACE 

Ada programs can interface with subprograms written in Assembler and other languages 
through the use of the predefined pragma INTERFACE and the implementation-defined 
pragma INTERFACE_NAME 

Pragma INTERFACE specifies the name of an interfaced subprog, am ar>.u the name of 
the programming language for which parameter passing conventions will be generated. 
Pragma INTERFACE takes the form specified in the RM: 

pragma INTERFACE {languagejume,subpro^amjtamey, 

where, 

■ languagejtame is ASSEMBLER, ADA or C 

■ subprogram juime is the name used within the Ada program to refer to the 
interfaced subprogram. 

The only language names accepted by pragma INTERFACE are ASSEMBLER, ADA and 
C The full implementation requirements for writing pragma INTERFACE subprograms 
are described in theApplicaiion Developer’s Guide. 

The language name used in the pragma INTERFACE does not have to have any 
relationship to the language aaually used to write the interfaced subprogram. It is used 
only to tell the Compiler how to generate subprogram calls; that is, what kind of 
parameter passing techniques to use. The programmer can inter&ce Ada programs with 
subroutines written in any other (compiled) language by understanding the mechanisms 


Implementation-Dependent Pragmas 


3 



used for parameter passiag by the compiler and the corresponding mechanisms of the 
chosen external language. 


IJ INTERFACE^NAME 

Pragma INTERFACE.NAME associates the name of the interfaced subprogram with the 
external name of the interfaced subprogram. If pragma INTERFACE.NAME is not used, 
then the two names are assumed to be identical This pragma takes the form: 

pragma INTERFACE_NAME (subprogram jume, stringJiural); 

where, 

■ subprogram jiame is the name used within the Ada program to refer to the 
interfaced subprogram. 

• stringJiteral is the name by which the interfaced subprogram is referred to at link 
time. 

The pragma INTERFACE.NAME is used to identify routines in other languages that are 
not named with legal Ada identifiers. Ada identifiers can only contain letters, digits, or 
underscores, whereas the DOS Linker allows external names to contain other charaaers, 
for example, the dollar sign (S) or commercial at sign (@). These characters can be 
specified in tixtstring^Uteral argument of the pragma INTERFACE_NAME 

The pragma INTERFACE.NAME is allowed at the same places of an Ada program as the 
pragma INTERFACE. (Location restrictions can be found in section 13.9 of the RM.) 
However, the pragma INTERFACE.NAME must always occur after the pragma 
INTERFACE declaration for the interfaced subprogram. 

The string Jiteral of the pragma INTERFACE.NAME is passed through unchanged to the 
DOS objea file. The maximum length of the sinngjtiera/is 40 characters. This limit is 
not checked by the Compiler, but the string is truncated by the Binder to meet the Intel 
object module format standard. 

The user must be aware however, that some tools from other vendors do not fully 
support the standard object file format and may restria the length of symbols. For 
exrunple, the IBM and Microsoft assemblers silently truncate symbols at 31 characters. 

The Runtime Executive contains several external identifiers. All such identifiers begin 
with either the string *ADA@' or the string 'ADAS®*. Accordingly, names prefixed by 
'ADA®' or 'ADAS®' should be avoided by the user. 


4 


Appendix F, Version 5 



Example 


package SAMPLE.DATA is 

ftinctioa SA\ffLE_DEVICE (X: INTEGER) return INTEGER; 
ftuictioa PROCESS_SAMPLE(X: INTEGER) return INTEGER; 
private 

pragma INTERFACE (ASSEMBLER, SAMPLE.DEVICE); 
pragma INTERFACE (ADA, PROCESS.SAMPLE); 
pragma INTERFACE_NAME(SAMPLE_DEVICE,"DEVIO$GET_SAMPLE"); 
end SAMPLE_DATA; 


1.4 INDENT 

Pragma INDENT is only used vnihAdaReformat. AdaReformat is the Alsys reformatter 
which offers the functionalities of a pretty-printer in an Ada environment. 

The pragma is placed in the source file and interpreted by the Reformatter. The line 

pragma INDENT(OFF); 

caMses AdaReformat not to modify the source lines after this pragma, while 
pragma INDENT(ON); 

cavses AdaReformat to resume its action after this pragma. 


1.5 Other Pragmas 

Pragmas IMPROVE and PACK are discussed in detail in the section on representation 
clauses and records (Chapter 4). 

Pragma PRIORITY is accepted with the range of priorities running from 1 to 10 (see the 
definition of the predefined package SYSTEM in Seaion 3). Undefined priority (no 
pragma PRIORITY) is treated as though it were less than any defined priority value. 

In addition to pragma SUPPRESS, it is possible to suppress all checks in a given compi¬ 
lation by the use of the Compiler option CHECKS. (S^ Chapter 4 of the User’s Guide.) 


Implementation-Dependent Pragmas 


5 



6 


Appendix F, Version 5 



Section 2 


Implementation-Dependent Attributes 


2.1 FIS_ARRAY 

For a prefix P that denotes any type or subtype, this attribute yields the value TRUE if P 
is an array type or an array subtyi^ otherwise, it yields the value FALSE. 

2.2 E’EXCEPnON_CODE 

For a prefix E that denotes an exception name, this attribute yields a value that 
represents the internal code of the exception. The value of this attribute is of the type 
INTEGER. 


23 Attributes Used in Record Representation Clauses 

In addition to the Representation Attributes of [13.7.2] and [13.73], the following 
attributes are used to form names of indirect and implicit components for use in record 
representation clauses, as described in Section 4.8. 

'OFFSET 
’RECORD_SIZE 
VARIANT^INDEX 
’ARRAY_DESCRIPTOR 
’RECORD_DESC3UPTION 


Implementation-Deptndent Attributes 


7 





Appendix F, Version 5 



Section 3 


Specification of the package SYSTEM 


The implementation does not allow the recompilation of package SYSTEM. 


package SYSTEM Is 


•• * <1) Requirad Oafinitfons. • 


type NAME is (180X86); 

SYSTEMJAME : constant NAME :> 180X86; 

STORAG£_UNIT : constant :« 8; 

MEMORY^SIZE : constant :■ 2**24; 

-* SystCM-Ocpendent Named Nunbers: 

MAX_INT : constant :« 2**51 - 1; 

MIM_INT ; constant ;■ - <2*»31); 

MAX.MANTISSA : constant :■ 31; 

FINE.OELTA : constant :■ 2»1.0#E*31; 

MAX_0IG1TS : constant :• 15; 

-* For the high-resolution timer, the clock resolution is 
" 1.0 / 1024.0. 

TICK : constant :■ 1.0 / 18.2; 


Specification of the package SYSTEM 


9 





“ other SystwOependent Delcaretiont: 
sUbtype PRIORITY is INTEGER range 1 .. 10; 

— The type ADDRESS ia, in fact, implefflentad aa a 
•• segmentzoffset pair, 
type ADDRESS is private; 

NULL_ADORESS : constant ADDRESS; 


(2) Operations on Address 


VALUE converts a string to an address. The syntax of the string and its 
meaning are target dependent. 

For the 8086, 80186 and 80286 the syntax is: 

'*SSSS:0000« where SSSS end 0000 are a 4 digit or less hexadecimal 
nuiber representing a segment value and an offset. 

The physical address corresponding to SSSS:0000 dependents 
on the execution mode. In real mode it is 16*SSSS'KX)00. 

In protected mode the value SSSS represents a segment 
descriptor. 

Example; 

"0014;OOFO" 


•• The exception CONSTRAINT_ERROR is raised if the string does not have 
** the proper syntax. 

function VALUE (LEFT : in STRING) return ADDRESS; 


10 


Appendix F, Version 5 






■* IMAGE coirvtrts an address to a string. The syntax of the returned string 
•• is described in the VALUE function. 

subtype A00RESS_STR1NG is STR1NG(1..9); 

function IMAGE (LEFT : in ADDRESS) return ADDRESS.STRIMG; 


•* SAME.SEGNENT returns true if the tuo addresses have 

-* the saaw segnant vatua. 

function SAME.SEGMENT (LEFT, RIGHT : in ADDRESS) return KXJLEAN; 


** The following routines provide support to perfona address 
-> cesputation. For the '*'*^*' and operators the OFFSET paratwter 
•' is added to, or subtracted fro« the offset part of the address, 
** the segeent remaining untouched. 

type OFFSET is range 0 .. -1; 


— The exeception ADORESS_ERROR is raised by "<», "<■*, ">", 

■■ if the tuo addresses do not have the same segment value. 

— The exception (mSTRAINTJRROR can be raised by and 

AOORESS_ERROR : exception; 

function ■H* (LEFT : in ADDRESS; RIGHT : in OFFSET) return ADDRESS; 

function (LEFT : in OFFSET; RIGHT : in ADDRESS) return ADDRESS; 

function (LEFT : in ADDRESS; RIGHT : in OFFSET) return ADDRESS; 


Specifkaaon of the package SYSTEM 


11 




— Th« exception ADORESS_ERROR is raiaed if the tuo addresses do 
•• not have the saae segnMnt value. 

function (LEFT ; in ADDRESS; RIGHT ; in ADDRESS) return OFFSET; 


— Perfom an unsigned coqsarison on offset part of addresses. 

function "<>•• (LEFT, RIGHT : in ADDRESS) return BOOL^; 

function "<•• (LEFT, RIGHT : in ADDRESS) return BOOLEAN; 

function ••>-•• (LEFT, RIGHT : in ADDRESS) return BOOLEAN; 

function »>“ (LEFT, RIGHT : in ADDRESS) return BOOLEAN; 

function "fflod* (LEFT : in ADDRESS; RIGHT : in POSITIVE) return NATURAL; 


-• Returns the given address rounded to a specific value. 

type ROUNO_DlRECTION is (DOWN, UP); 

function ROUND (VALUE : in ADDRESS; 

DIRECTION : in ROUNOJDIRECTION; 

MODULUS : in POSITIVE) return ADDRESS; 


•• These routines are provided to perform REAO/URITE operation 
" in mesBry. 

** Uaming: These routines will give unexpected results if used with 
*• unconstrained types. 

generic 

type TARGET is private; 

fmetion FETCN.FRONJIDORESS (A : in ADDRESS) return TARGET; 
generic 

type TARGET is private; 

procedure ASSIGN_TO_ADDRESS (A ; in ADDRESS; T ; in TARGET); 


12 


AppendixF, Versions 





•• Procedure to copy LENGTH ttorege tnit starting at the address 
-• FROM to the address TO. The source and destination nay overlap 
“ oeJECT_LENGTH designates the size of an object in storage units 

type OBJECT.LENGTH is range 0 .. 2**16 -1; 
for OSJECT.LENGTH'SIZE use 16; 

procedure MOVE (TO : in ADDRESS; 

FROM : in ADDRESS; 

LENGTH : in OGJECT.LENGTK); 

private 


end SYSTEM; 


Specification of the package SYSTEM 




14 


AppetuiixF, Version 5 



Section 4 


Support for Representation Clauses 


This section explains how objects are represented and allocated and how it is possible to 
control this using represenution clauses. Applicable restrictions on representation 
clauses are also described. 

The representation of an objea is closely conneaed with its Qqie. For this reason this 
section addresses successively the representation of enumeration, integer, floating point, 
fixed point, access, task, array and record types. For each class of type the representation 
of the corresponding objects is described. 

Except in the case of array and record types, the description for each class of type is 
independent of the others. To understand the representation of array and record types it 
is necessary to understand first the representation of their components. 

Apart from implementation defined pragmas, Ada provides three means to control the 
size of objects: 

■ a (predefined) pragma PACK, applicable to array types 

■ a record representation clause 

■ a size specification 

For each class of types the effect of a size specification is described. Interactions among 
size specifications, packing and record representation clauses is described under the 
discussion of array and record types. 

Representation clauses on derived record types or derived tasks types are not supported. 

Size represenution clauses on types derived from private types are not supported when 
the derived type is declared outside the private part of the defining package. 


Support for Representation Clauses 


15 





4.1 Enumeration I^es 


4.1.1 Enumeration Literal Encoding 

When no enumeration representation clause applies to an enumeration type, the 
internal code associated with an enumeration literal is the position number of the 
enumeration literal Then, for an enumeration type with n elements, the internal codes 
are the integers 0,1,2,, n-1. 

An enumeration representation clause can be provided to specify the value of each 
internal code as described in RM133. The Al^ compiler fully implements enumeration 
representation clauses. 

As internal codes must be machine integers the internal codes provided by an 
enumeration representation clause must be in the range -2^^.. 2^^-l. 

An enumeration value is always represented by its internal code in the program 
generated by the compiler. 


4.1.2 Enumeration IVpes and Object Sizes 

MUumum size of an enumeration subtype 

The minimum possible size of an enumeration subtype is the minimum number of bits 
that is neoessaiy for representing the internal codes of the subtype values in normal 
binary form. 

A static subtype, with a null range has a minim um size of 1. Otherwise, if m and M are 
the values of the internal codes associated with the first and last enumeration values of 
the subtype, then its minim um size L is determined as follows. For m > » 0, L is the 
smallest positive integer such that M < = 2^-1. For m < 0, L is the smallest positive 
integer such that -2^° < » m and M < = 2^'^-l. For example: 

typ* COLOR U (GREEN, BLACK, WHITE, RED, BLUE, YELLOW); 

~ The minimum size of COLOR is 3 bits. 

sobfype BIACK_AND_WHrrE is COLOR range BLACK.. WHITE; 

~ The minimum size of BLACK_AND_WHnE is 2 bits. 


16 


Appendix F, Version 5 









subtype BLACK.OR.WHTTE is BLACK_AND_WHITE range X.. X; 

- Assuming that X is not static, the minimum size of BLACK_OR_WHITE is 

- 2 bits (the same as the minim um size of its type mark BLACK_AND_WHITE). 


Size of an enumeration subtype 

When no size specification is applied to an enumeration type or first named subtype, the 
objects of that type or first named subtype are represented as signed machine integers. 
The machine provides 8,16 and 32 bit integers, and the compiler selects automatically 
the smallest signed machine integer which can hold each of the internal codes of the 
enumeration type (or subtype). The size of the enumeration type and of any of its 
subtypes is thus 8,16 or 32 bits. 

When a size specification is applied to an enumeration type, this enumeration type and 
each of its subtypes has the size specified by the length clause. The same rule applies to a 
first named subtype. The size specification must of course specify a value greater than or 
equal to the minimum size of the type or subtype to which it applies: 

type EXTENDED Is 

(~ The usual ASCII character set 

NUL, SOH, SIX, ETX, EOT, ENQ, ACK, BEL, 

V, y, ’z*,’I’. del* 

' ~ Extended characters 

C.CEDILLA^CAP, U_UMLAUT, E.ACUTE, ...); 
for EX'IENDED’SITT. use 8; 

- The size of type EXTENDED will be one byte. Its objects will be represented 

- as unsigned 8 bit inregen. 

The Alsys compiler fully implements size specifications. Nevertheless, as enumeration 
values are ood^ using integers, the specified length cannot be greater than 32 bits. 


Size of the objects of an enumeration subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
object of an enumeration subtype has the same size as its subtype. 


Support for Representation Clauses 


17 








4.2 Integer T^es 

There are three predefined integer types in the Alsys FirstAda implementation: 

typeSHORT_INTEGER is range-2**07..2**07-l; 

typelNTEGlil is range-2**15..2**15-1; 

typeLONG_INTEGER Is range-2**31..2**31-1; 

4.2.1 Integer lype Representation 
An integer type declared by a declaration of the form: 
type T Is range L.. R; 

is implicitly derived from a predefined integer type. The compiler automatically selects 
the prede^ed integer Qrpe whose range is the smallest that contains the values L to R 
inclusive. 

Binaiy code is used to represent integer values. Negative numbers are represented using 
two’s complement 


4.2.2 Integer Type and Object Size 
Minimum size tf an integer subtype 

The minimum possible size of an integer subtype is the minimum number of bits that is 
necessaiy for representing the internal codes of the subtype values in normal binary 
form. 

For a static subtype, if it has a null range its minimum size is 1. Otherwise, if m and M are 
the lower and upper bounds of the sub^pe, then its minimum size L is determined as 
follows. For m >s 0, L is the smallest positive integer such that M < => 2^^ For m < 
0, L is the smallest positive integer that -2^^ < = m and M < » 2^^-l. For example: 

sob^ppe S b INTEGER range 0.. 7; 

- The minimum size of S is 3 bits. 


18 


Appendix F, Version 5 





subtype D is S range X.. Y; 

- Assuming that X and Y are not static, the minimum size of 

- D is 3 bits (the same as the minim um size of its type mark S). 


Size of an integer subtype 

The sizes of the predefined integer types SHORT.INTEGER, INTEGER and 
LONG_INTEGER are respectivefy 8,16 and 32 bits. 

When no size specification is applied to an integer type or to its fint named sub^rpe (if 
any), its size and the size of any of its subtypes is the size of the predefined type from 
which it derives, directly or indirectly. For example: 

type S Is range 80.. 100; 

- S is derived from SHORT_INTEGER, its size is 8 bits, 
type J is range0.. 255; 

- J is derived from INTEGER, its size is 16 bits. 

type N is .lew J range 80.. 100; 

- N is indirectly derived from INTEGER, its size is 16 bits. 

When a size specification is applied to an integer type, this integer type and each of its 
subtypes has the size specified by the length clause. The same rule applies to a first 
named subtype. The size specification must of course specify a value greater than or 
equal to the minimum size of the type or subtype to which it applies: 

type Sis range 80.. 100; 
forS’SIZEuse32; 

- S is derived from SHORT.INTEGER, but its size is 32 bits 

- because of the size specification. 

type J Is range 0.. 255; 
forrsIZEiiscS; 

- J is derived from INTEGER, but its size is 8 bits because 
~ of the size specification. 

fype N Is new J range 80.. 100; 

- N is indirectfy derived from INTEGER, but its size is 

- 8 bits because N inherits the size specification of J. 


Support for Representation Clauses 


19 



Siatcf the objects of an integer subtypt 


Provided its size is not constrained by a record component clause or a pragma PACK, an 
objea of an integer subtype has the same size as its subtype. 


43 Floating Point T^pes 

There are three predefined floating point types in the Alsys implemenution for 180x86 
machines: 

type SHORT FLOAT Is 

digits 6 nmgc -(2.0 - 2.0**(-23))*2.0**127.. (2.0 - 2.0**(-23))*10**127; 
type FLOAT is 

digits 6 range -(10 -10**(-23))*10**127.. (10 -10**(-23))*10**127; 
type LONG FLOAT is 

digits 15 range -(10 -10**(-51))*10**1023.. (10 -10**(.51))*10**1023; 
Note that SHORT^FLOAT has th*. same range as FLOAT. 


4 J.l Floating Point lype Representation 
A floating point type declared by a declaration of the form: 
type T is digits D [range L - R]: 

is implicitly derived from a predefined floating point type. The compiler automatically 
selects the smallest predefined floating point type whose number of digits is greater than 
or equal to D and which contains the values L to R inclusive. 

In the program generated by the compiler, floating point values are represented using 
the VBEE. standard formats for single and double floats. 

The vilaa of the predefined types SHORT.FLOAT and FLOAT are represented using the 
single float format The values of the predefined type LONG.FLOAT are represented 
using the double float format The values of any other floating point type are represented 
in the same way as the values of the predefined type from which it derives, directly or 
indirectly. 


20 


Appendix F, Version 5 




43.2 Floating Point Type and Object Size 

The minimum possible size of a floating point subtype is 32 bits if its base type is 
SHORT_FLOAT or FLOAT or a type derived from SHORT_FLOAT or FLOAP, it is 64 bits 
if its base type is LONG_FLOAT or a type derived from LONG_FLOAT. 

The sizes of the predefined floating point types SHORT_FLOAT and FLOAT is 32 bits 
and LONG_FLOAT is 64 bits. 

The size of a floating point type and the size of any of its subtypes is the size of the 
predefined Qrpe from which it derives directly or indirect^. 

The only size that can be specified for a floating point type or first named subtype using a 
size spe^cation is its usu^ size (32 or 64 bits). 

An object of a floating point subtype has the same size as its subtype. 


4.4 Fixed Point ly^ies 


4.4.1 Fixed Point Type Representation 

If no specification of small applies to a fixed point type, then the value of small is 
determined by the value of delta as defined by RM 33.9. 

A specification of small can be used to impose a value of small The alue of small is 
required to be a power of two. 

To implement fixed point types, the Aisys FirstAda compiler uses a set of anonymous 
predefined types of the form: 

tyft SHORT_FIXED is delta D range (-2.0**7-l)*S.. 2.0**7*S; 
for SHCRT.nXED’SMALL use S; 

^FKED is delta D range (-2.0**15-1)*S.. 2.0**15*S; 

Ibr FIXEO’SMALL use S; 

type L0NG_F1XEDUdeltaDran, . '.0**31-1)*S.. 10**31*S; 
forLONG.FKED’SM. .. 5; 

where D is any real value anc.. jny power of two less than or equal to D. 


Support for Representation Clauses 


21 





A fixed poiat type declared by a declaration of the form: 

type T is delta D range L ~ R; 
possibly with a small specification: 
for TSMALL use S; 

is implicitly derived from a predefined fixed point type. The compiler automatically 
selects the predefined fixed point type whose small and delta are the same as the small 
and delta of T and whose range is the shortest that includes the values L to R inclusive. 

In the program generated by the compiler, a safe value V of a fixed point subtype F is 
represented as the integer 

V/PBASE’SMALL 


4.4.2 Fixed Point Type and Object Size 
Minimum size cf a fixed point sub^pe 

The minimum possible size of a fixed point subtype is the minimum number of binary 
digits that is necessary for representing the values of the range of the subtype using the 
small of the base type. 

For a static subtype, if it has a null range its minimum size is 1. Otherwise, s and S being 
the bounds of the subtype, if i and I are the integer representations of m and M, the 
smallest and the greatest model numbers of the base type such that s < m and M < S, 
then the minimum size L is determined as follows. For i > » 0, L is the smallest positive 
integer such that I < =* 2^^ For i < 0, L is the smallest positive integer such that - 
2L-^<=iandI<=2L-M. ’ P- 

type F Is delta ZQ range 0.0.. 500.0; 

- The minimum size Of F is 8 bits. 

subtype S is F delta 16.0 range 0.0.. 250.0; 

- The minim um size of S is 7 bits. 

subtype O is S range X _ Y; 

•> Assuming that X and Y are not static, the minimum size of D is 7 bits 

- (the same as the minimum size of its type mark S). 


22 


AppendixF, Versions 






Size of a fixed point subt^ 

The sizes of the predefined fixed point types SHORT_FIXED, FIXED and LONG_FIXED 
are respectivety ^ 16 and 32 bits. 

When no size specification is applied to a fixed point type or to its first named subtype, 
its size and the size of any of its subQrpes is the size of the predefined type from which it 
derives directly or indire^. For example: 

type S is delta 0.01 range 0.8.. 1.0; 

~ S is derived from an 8 bit predefined fixed type, its size is 8 bits, 
type F Is delta OiOl range 0.0.. 2.0; 

~ F is derived from a 16 bit predefined fixed type, its size is 16 bits, 
type N is new F range 0.8.. 1.0; 

- N is indirectly derived from a 16 bit predefined fixed type, its size is 16 bits. 

When a size specification is applied to a fixed point type, this freed point type and each of 
its subtypes has the size specified by the length clause. The same rule applies to a first 
named subtype. The size specification must of course specify a value greater than or 
equal to the minim um size of the type or subtype to which it applies: 

type S is delta 0.01 range 0.8.. 1.0; 
forS'SIZEase32; 

- S is derived from an 8 bit predefined fixed type, but its size is 32 bits 

- because of the size specification. 

type F is delta 0.01 rang, 0.0.. 2.0; 
forF’SIZEaaefi; 

- F is derived from a 16 bit predefined fixed type, but its size is 8 bits 
~ because of the size specification. 

type N is new F range 0.8.. 1.0; 

- N is indirectly derived from a 16 bit predefined fixed type, but its size is 

- 8 bits because N inherits the size specification of F. 


Support for Representation Clauses 


23 




The Alsys compiler fully implements size specifications. Nevertheless, as fixed point 
objects are represented using machine integers, the specified length cannot be greater 
than 32 bits. 


Size of the objects of a fixed point subtype 

Provided its size is not constrained by a record component clause or a pragma PACK, an 
objea of a fixed point type has the same size as its subtype. 


4.5 Access T^pes and Collections 

Access Types and Objects of Access Types 

The only size that can be specified for an access type using a size specification is its usual 
size (32 bits). 

An objea of an access subtype has the same size as its subtype, thus an objea of an 
access subQrpe is always 32 bits long. 


Collection Size 

As described in RM 13.2, a specification of collection size can be provided in order to 
reserve storage space for the collection of an access type. 

When no STORAGE_SIZF, specification applies to an access type, no storage space is 
reserved for its collection, and the value of the attribute STORAGE_SIZE is then 0. 

The maximum size allowed for a collection is 64k bytes. 


4.6 Taskl^es 

StorateforataskaetiratioH 

As described in RM 13.2, a length clause can be used to specify the storage space (that is, 
the stadtsize) for the activation of each of the tasks of a given type. Alsys also allows the 
task stack size, for all tasks, to be established using a Binder option. If a length clause is 
given for a task type, the value indicated at bind time is ignored for tins task type, and the 
length clause is obeyed. When no length clause is used to specify the storage space to be 


24 


Appendix F, Version 5 




reserved for a task activation, the storage space indicated at bind time is used for this 
activation. 

A length clause may not be applied to a derived task type. The same storage space is 
reserved for the aaivation of a task of a derived type as for the activation of a task of the 
parent type. 

The minimum size of a task subtype is 32 bits. 

A size specification has no effect on a task type. The only size that can be specified using 
such a length clause is its usual size (32 bits). 

An object of a task subtype has the same size as its subtype. Thus an objea of a task 
subtyjK is always 32 bits long. 


4.7 Array Types 

Each array is allocated in a contiguous area of storage units. All the components have 
the same size. A gap may exist between two consecutive components (and after the last 
one). All the gaps have the same size. 


4.7.1 Array Layout and Structure and Pragma PACK 



^3 




B 

Componant 

Gap 

Cayonant 

Gap 

Coaponant 

Gap 


If pragma PACK is not specified for an array, the size of the components is the size of the 
subtype of the components: 


Support for Representation Clauses 


25 















type A is array (1.. 8) of BOOLEAN; 

- The size of the components of A is the size of the type BOOLEAN: 8 bits. 

type DEQMAL^DIGIT Is range 0.. 9; 
for DECIMAL_DIGrrsiZE use 4; 
type BINARY_CODED_DECIMAL is 

array (INTEGER range < >) of DEOMAL.DIGrr; 

- The size of the type DECIMAL_DIGIT is 4 bits. Thus in an array of 

- type BINARY_CODED_DECIMAL each component will be represented on 

- 4 bits as in the usual BCD representation. 

If pragma PACK is specified for an array and its components are neither records nor 
arrays, the size of the components is the minimum size of the subtype of the components: 

type A is array (1.. 8) of BOOLEAN; 
pragma PACK(A); 

- The size of the components of A is the minim um size of the type BOOLEAN: 
-IbiL 

type DECIMAL_DIGIT is range 0.. 9; 
for DECIMAL.DIGrrSIZE use 32; 
type BINARY_CODED.DECIMAL is 

array (INTEGER range < >) of DECIMAL_DIGn'; 
pragma PACK(BINARY_CODED_DECIMAL); " 

- The size of the type DECIMAL_DIGIT is 32 bits, but, as 

- BINARY.CODED.DECIMAL is packed, each component of an array of this 

- type will be represented on 4 bits as in the usual BCD representation. 

Packing the array has no effect on the.size of the components when the components are 
records or arrays, since records and arrays may be assigned addresses consistent with the 
alignment of their subtypes. 


Gaps 

If the components are records or arrays, no size specification applies to the subtype of 
the components and the array is not packed, then the compUer vaay choose a 
representation with a gap after each component; the aim of the insertion of such gaps is 
to optimize access to the array components and to their subcomponents. The size of the 
gap is chosen so that the relative displacement of consecutive components is a multiple 


26 


Appendix F, Version 5 



of the alignment of the subtype of the components. This strategy allows each component 
and subcomponent to have an address consistent with the alignment of its subtype: 

typeRls 

record 

K: INTEGER; 

B: BOOLEAN; 
end record; 

for Ruse 
record 

KatOrangeO.. 15; 

B at 2 range 0.. (h 
end record; 

- Record type R is byte aligned. Its size is 17 bits. 

type A is array (1.. 10) of R; 

- A gap of 7 bits is inserted after each component in order to respea the 

- alignment of Qrpe R. The size of an array of type A will be 240 bits. 



I 


1 



iim 

a 

ilDii 

a 

IBI 

□ 



mii 






Component Gap Component Gap Component Gap 
Array of type A: each subcomponent K has an even offset 


If a size specification applies to the subtype of the components or if the array is packed, 
no gaps are iascried: 


typeRls 

rword 

K: INTEGER; 

B: BOOLEAN; 
end record; 

type A Is array (1.. 10) of R; 
pragma PACK(A); 

~ There is no gap in an array of type A because A is packed. 
~ The size of an objea of type A will be 270 bits. 


■ 27 


Support for Representation Clauses 











type NR is new R; 
for NR’SIZE use 24; 

type B is array (1.. 10) of NR; 

~ There is no gap in an array of type B because 

- NR has a size specification. 

- The size of an object of type B wiii be 240 bits. 



Conponcot Conponant 

ArrayoftypeA orB 


4.7.2 Array Subtype and Object Size 
SmofanarrtQsubtypt 

The size of an array subtype is obtained by muitiplying the number of its components by 
the sum of the size of the components and the size of the gaps (if ai^). If the subtype is 
unconstrained, the maximum number of components is considered. 

The size of an array subtype cannot be computed at qsmpile time 

■ if it has non-static constraints or is an unconstrained array type with non-sutic 
index subtypes (because the number of components can then only be determined at 
run time). 

■ if the components are records or arrays and their constraints or the constraints of 
their subcomponents (if any) are not static (because the size of the components and 
the size of the gaps can then only be determined at run time). 

As has been indicated above, the effect of a pragma PACK on an array type is to suppress 
the gaps. The consequence of packing an array type is thus to reduce its size. 

If the components of an array are records or arrays and their constraints or the 
constraints of their subcomponents (if any) are not static, the compiler ignores any 
pragma PACK applied to the array type but issues a warning message. Apan from this 
limitation, array packing is fully implemented by the Alsys compiler. 


28 


Appendix F, Version 5 





A size specification applied to an array type or first named subtype has no effect The 
only size that can be specified using such a length clause is its usual size. Nevertheless, 
such a length clause can be useful to verify that the layout of an array is as expeaed by 
the application. 


Sizitof the objects of an amjsubtjpe 

The size of an object of an array subtype is always equal to the size of the subtype of the 
object 


4.8 Record Types 


4.8.1 Basic Record Structure 
Layout of a record 

Each record is allocated in a contiguous area of storage units. The size of a record 
component depends on its type. 

The positions and the sizes of the components of a record type objea can be controlled 
using a record representation clause as descnbed in RM 13.4. In the Alsys FirstAda 
implementation there is no restriction on the position that can be specified for a 
component of a record. If a component is not a record or an array, its size can be any size 
from the minimum size to the size of its subtype. If a component is a record or an array, 
its size must be the size of its subtype. 


type OEVKXJNFO.RECCftO is 
record 


BIT15 : BOOLEAN; 
CTRL : BOOLEAN; 
NETWORK : BOOLEAN; 
BIT1Z : BOOLEAN; 
BIT11 : BOOLEAN; 
BIT10 : BOOLEAN; 
BIT9 r BOOLEAN; 
BITS : BOOLEAN; 
ISOEV : BOOLEAN; 


— Bit 15 (reserved) 

" Bit U (true if control strings processed) 
** Bit 13 (true if device is on network) 

" Bit 12 (reserved) 

" Bit 11 (reserved) 

" Bit 10 (reserved) 

— Bit 9 (reserved) 

" Bit 8 (reserved) 

•• Bit 7 (true if device, false if disk file) 


Support for Representation Clauses 


29 



EOF 


BOOLEAN 

BINARY 


BOOLEAN 

B1T4 


BOOLEAN 

ISCLK 


BOOLEAN 

ISNUL 


BOOLEAN 

ISCOT 


BOOLEAN 

ISCIN 


BOOLEAN 

end record; 




-* Bit 6 (tru# if at end of file) 

** Bit 5 (true if binary (raw) mode) 

" Bit 4 (reserved) 

“ Bit 3 (tnje if clock device) 

*- Bit 2 (true if NUL device) 

" Bit 1 (true if console output device) 
** Bit 0 (true if console input device) 


for OEVlCEJNFO_RE(X(iO use 
record 


Bins 

at 1 

rang# 7 


7; 

-• Bit 15 

CTRL 

at 1 

ranga 6 


6? 

-- Bit 14 

NETWORK 

at 1 

rang# 5 


5; 

-- Bit 13 

BtT12 

at 1 

rang# 4 



- Bit 12 

BITII 

at 1 

range 3 


3; 

- Bit 11 

B1T10 

at 1 

range 2 


2; 

Bit 10 

BIT9 

at 1 

range 1 


1; 

- Bit 9 

BITS 

at 1 

range 0 


0; 

•• Bit 8 

ISOEV 

at 0 

range 7 


7 ; 

- Bit 7 

EOF 

at 0 

range 6 


6; 

- Bit 6 

BINARY 

at 0 

range 5 


5; 

- Bit 5 

BIT4 

at 0 

range 4 


«; 

-- Bit 4 

ISCLK 

at 0 

range 3 


3; 

- Bit 3 

ISNUL 

at 0 

range 2 


2; 

-• Bit 2 

ISCOT 

at 0 

range 1 


1; 

— Bit 1 

ISCIN 

at 0 

range 0 


0; 

-- Bit 0 


end record; 

Pragma PACK lias no effect on records. It is unnecessary because record representation 
clauses provide full control over record layout 

A record representation clause need not specify the position and the size for every 
component If no component clause applies to a component of a record, its size is the 
size of its subtype. 


30 


Appendix F, Version 5 


4.8^ Indirect Components 

•OFFSET 


If the offset of a component cannot be computed at compile time, this offset is stored in 
the record objects at run time and used to access the component Such a component is 
said to be indirect while other components are said to be direct: 



Befliming of the record 
Coepile time offset 


Conpile tisw offset 


Run time offset 


A direa and an indirect component 

If a record component is a record or an array, the size of its subtype may be evaluated at 
run time and may even depend on the discriminants of the record. We will call these 
components dynamic components: 

^ DEVICE is (SCREEN, PRINTER); 

type COLOR is (GREEN, RED, BLUE); 

type SERIES is array (POSITIVE range <>) of INTEGER; 

^ GRAPH (L: NATURAL) is 
reoonl 

X: SERIES(1 „ L); - The size of X depends on L 
Y: SERIES(1.. L); ~ The size of Y depends on L 
end record; 

Q: POSmVE; 


Support for Representation Clauses 


31 





type PICTURE (N: NATURAL; D: DEVICE) U 
record 

F: GRAPH(N); - The size of F depends on N 
S: GRAPH(Q); - The size of S depends on Q 
case D is 

when SCREEN = > 

C: COLOR; 
when PRINTER => 
null; 
end case; 
end record; 

Any component placed after a dynamic component has an offiet which cannot be 
evaluated at compile time and is thus indirect In order to minimiae the number of 
indirect components, the compiler groups the dynamic components together and places 
them at the end of the record: 

0 * SCREEN D « PRINTER 

N > 2 N > 1 


S OFFSET 


F OFFSET 




Scflinning of tht record 
- CoMpile tint offeet* — 


Run time offsets 


4 


S OFFSET 


F OFFSET 




77te record type PICTURE: F and S are placed at the end of the record 


32 


Appendix F, Version 5 



Note tbat Ada does not allow representation clauses for record components with non¬ 
static bounds [RM 13.4.7], so the compiler’s grouping of dynamic components does not 
conflict with the use of representation clauses. 

Because of this approach, the only indirect components are dynamic components. But 
not all dynamic omiponents are necessarily indirect: if there are dynamic components in 
a component list which is not followed by a variant part, then exactly one dynamic 
component of this list is a direa component because its of%et can be computed at 
compilation time (the only dynamic components that are direct components are in this 
situation): 



Beginning of tht record 
Conptle time offset 


" ■ ■ Compile time offset 

Size dependent on discriminent L 
I — Run time offset 
Size dependent on discriminent L 


The record type GRAPH: the dynamic component X is a direct component 


The ofbet of an indirect component is always expressed in storage units. 

The space reserved for the offset of an indirea component must be large enough to store 
the size of any value of the record type (the maximum potential o^t). The compiler 
evaluates an upper bound MS of this size and treats an of&et as a component having an 
anonymous integer type whose range is 0.. MS. 

If C is the name of an indirea component, then the oQset of this component can be 
denoted in a component clause by the implementation generated name COFFSET. 


Support for Representation Clauses 


33 




4.8 J Implicit Components 

In some circumstances, access to an object of a record type or to its components involves 
computing information which only depends on the discriminant values. To avoid 
recomputation (which would degrade performance) the compiler stores this information 
in the record objects, updates it when the values of the discriminants are modified and 
uses it when the objects or its components are accessed. This information is stored in 
special components called implicit components. 

An implicit component may contain information which is used when the record objea or 
several of its components are accessed. In this case the component will be included in any 
record object (the implicit component is considered to be d^lared before any variant 
part in the record type declaration). There can be two components of this kind; one is 
called RECORD JIZE and the other varIANT.INDEX. 

On the other hand an implicit component may be used to access a-given record 
component In that case the impUcit component exists whenever the record component 
exists (the implicit component is considered to be declared at the same place as the 
record component). Components of this kind are called ARRAY DESCRIPTORS or 
RECORD.DESCRIPTORs. 


'RECORDJIZE 

This implicit component is aeated by the compfler when the record type has a variant 
pan and its discriminants are defaulted. It contains the size of the storage space 
necessary to store the cunent value of the record object (note that the storage effectively 
allocated for the record objea may be more than this). 

The value of a RECORD.SIZE component may denote a number of bits or a number of 
storage units. In general it denotes a number of storage units, but if any component 
clause specifies that a component of the record type has an offiet or a size which cannot 
be expressed using storage units, then the value designates a number of bits. 

The implicit component RECORD_SIZE must be large enough to store the maximum 
size of any value of the record type. The compiler evaluates an upper bound MS of this 
size and then considen the implicit component as having an anonymous integer type 
whose range is 0.. MS. 

If R is the name of the record type, this implicit component can be denoted in a 
component clause by the implementation generated name R’RECORD.SIZE This 
allows user control over the position of the implicit component in the record. 


34 


Appendix F, Version 5 




VARIANTJNDEX 

This implicit component is created by the compiler when the record type has a variant 
part It indicates the set of components that are present in a record value. It is used when 
a discriminant check is to be done. 

Component lists in variant parts that themselves do not contain a variant part are 
numbered. These numbers are the possible values of the implicit component 
VARIANT.INDEX. 

^ VEHICLE Is (AIRCRAFT, ROCKET, BOAT, CAR); 

type DESCRIPTION (HND: VEHICLE := CAR) U 
record 

SPEED: INTEGER; 
case KIND is 

when AIRCRAFT | CAR => 

WHEELS: INTEGER; 
case KIND is 

when aircraft 3 > ~1 

WINGSPAN: INTEGER; 
when others a> > ~ 2 

null; 
endcas^ 

when BOAT » > — 3 
STEAM : BOOLEAN; 
when ROCKET =»> -4 

STAGES: INTEGER; 
end case; 
end record; 

The value of the variant index indicates the set of components that are present in a 
record value: 


Variant Indax 

Sat 

1 

(KINO, SPEED, WHEELS, U1NGSPAN> 

2 

(KIND, SPEED, WHEELS} 

3 

(KIND, SPEED, STEAM) 

t, 

(KINO, SPEED, STAGES) 


Support for Representation Clauses 


35 







A comparison between the variant index of a record value and the bounds of an interval 
is enough to check that a given component is present in the value: 


ConponMit 

Inttrval 

■■SHI 

• • 


-- 


1 .. 2 

WINGSPAN 

1 .. 1 

STEAM 


STAGES 



The implicit component VARIANT_INDEX must be large enough to store the number V 
of component lists that don’t contain variant parts. The compiler treats this implicit 
component as having an anonymous integer type whose range is 1 _ V. 

If R is the name of the record type, this implicit component can be denoted in a 
component clause by the implementation generated name R’VARIANT^INDEX. This 
allows user control over the position of the implicit component in the record. 


^ARRAYJDESatJPTOR 

An implicit component of this kind is associated by the compiler with each record 
component whose subtype is an anonymous array subtype that depends on a discriminant 
of the record. It contains information about the component subtype. 

The structure of an implicit component of kind ARRAY.DESCRIFTOR is not described 
in this documentation. Nevertheless, if a programmer is interested in specifying the 
location of a component of this kind using a component clause, size of the component 
may be obtained using the ASSEMBLY parameter in the COMPILE command. 

The compiler treats an implicit component of the land ARRAY.DESCRIFTOR as having 
an anoifymons array type. If C is the name of the record component whose subtype is 
described by the array descriptor, then this implicit component can be denoted in a 
component clause by the implementation generated name CARRAY_DESCRIPTOR. 

This allows user control over the position of the implicit component in the record. 


36 


Appendix F, Version 5 










'RECORDJ)ESCRIPTOR 

An implicit component of this kind is associated by the compiler with each record 
component whose subtype is an anonymous record subtype that depends on a 
discriminant of the record It contains information about the component subtype. 

The structure of an implicit component of kind RECORD.DESCRIPTOR is not described 
in this documentation. Nevertheless, if a programmer is interested in specifying the 
location of a component of this kind using a component clause, the size of the 
component may be obtained using the ASSEMBLY parameter in the COMPILE 
command 

The compiler treats an implicit component of the kind RECORD_DESCRlPTOR as 
having an anonymous array type. If C is the name of the record component whose 
subtype is described by the record descriptor, then this implicit component can be 
denoted in a component clause by the implementation generated name 
C’RECORD_DESCRIPTOR. This allows user control over the position of the implicit 
component in the record. 


Suppression of Implicit Components 

The Alsys implementation provides the capability of suppressing the implicit 
components RF.CORD_SI2E and/orVARIANT_INDEX from a record type. This can be 
done using an implemenution defined pragma called IMPROVE The syntax of this 
pragma is as follows: 

pragma IMPROVE (TIME | SPACE, [ON = >] simple_name); 

The first argument specifies whether TIME or SPACE is the primary criterion for the 
choice of the representation of the record type that is denoted by the second argument 

If TIME is specified the compiler inserts implicit components as described above. If on 
the other hand SPACE is spewed the compiler only inserts a VARIANT.INDEX or a 
RECORO_SIZE component if this component appears in a record representation clause 
that applies to the record type. A record represenution clause can thus be used to keep 
one implicit component while suppressing the other. 

A pragma IMPROVE that applies to a given record type can occur anywhere that a 
representation clause is allowed for this type. 


Support for Representation Clauses 


37 







4.8.4 Size of Record Types and Objects 

Siu of a record subtype 

Unless a component clause specifies that a component of a record type has an o&et or a 
size which cannot be express^ using storage units, the size of a record subtype is 
rounded up to a whole number of storage units. 

The size of a constrained record subtype is obtained by adding the sizes of its 
components and the sizes of its gaps (if any). This size is not computed at compile time 

■ when the record subtype has non-static constraints, 

« when a component is an array or a record and its size is not computed at compile 
time. 

The size of an unconstrained record subtype is obtained by adding the sizes of the 
components and the sizes of the gaps (if any) of its largest variant. If the size of a 
component or of a gap cannot be evaluated exactly at compile time an upper bound of 
this size is used by the compiler to compute the subtype size. 

A size specification applied to a record type or first named subtype has no effect The 
only size that can be specified using such a length clause is its usual size. Nevertheless, 
such a length clause can be useful to verify that the layout of a record is as expected by 
the application. 


Size of an object of a record subtype 

An object of a constrained record subtype has the same size as its subtype. 

An object of an unconstrained record subtype has the same size as its subtype if this size 
is less than or equal to 8k bytes. If the size of the subtype is greater than this, the objea 
has the size necessary to store its current value; storage space is allocated and released as 
the discriminants of the record change. 


38 


Appendix F, Version 5 






Section 5 


Conventions for Implementation-Generated Names 


The following forms of implementation-generated names [13.4(8)] are used to denote 
implementation-dependent record components, as described in Station 4.8 in the 
sections on indirea and implicit components: 


COFFSET 
R’RECORD_SIZE 
R'VAJRIANf INDEX 
R’ARRAY_DESCRIPTORs 
R’RECORD.DESCRIPTORS 


where C is the name of a record component and R the name of a record type. 

The following predefined packages are reserved to Alsys and cannot be recompiled: 

ALSYS^BASICJO 

ALSYS_ADA_RUNTIME 

ALSYS_BASIC_DIRECT_IO 

AISYS_BASICJEQUENTIAL_IO 


Conventions for Implementation-Generated Names 


39 





40 


Appendix F, Version 5 



Section 6 


Address Clauses 


6.1 Address Clauses for Objects 

An address clatise can be used to specify an address for an object as described in RM13^. 
When such a clause applies to an objea the compiler does not cause storage to be 
allocated for the object The program accesses the objea using the address specified in 
the clause. It is the responsibility of the user therefore to make sure that a v^d 
allocation of storage h^ been done at the specified address. 

An address clause is not allowed for task objects, for unconstrained records whose size is 
greater than 8k bytes or for a constant 

There are a number of ways to compose a legal address expression for use in an address 
clause. The most direct ways are: 

■ For the case where the memory is defined in Ada as another object use the 
’ADDRESS attnbute to obtain the argument for the address clause for the second 
object 

■ For the case where the desired location is memory defined in assembly or another . 
non-Ada language (is relocatable), an interfaced routine may be used to obtain the 
appropriate address from referencing information known to the other language. 

■ For the case where an absolute address is known to the programmer, use the 
function SYSTEM.VALUE. This function has one (1) parameter of type string, ’fhe 
string is of the form *sssK)000*. The length is 9, and the is required to separate the 
segment and oflbet portion of the address. SYSTEM.VALUE returns a value of type 
SYSIEMADDRESS. The string representing the desired address can be passed as 
the actual parameter to SYSTEM.VALUE in the simple expression pan of the 
address clause. See Section 3 for the specification of package SYSTEM. 

In all cases other than the use of an address attribute, the programmer must ensure 
that the segment pan of the argument is a selector if the program is to run in 
protected mode. Refer to Application Developm' Guide, Section S.1.5 for more 
information on proteaed mode machine oriented programming. 


Address Clauses 


41 






6.2 Address Clauses for Program Units 

Address clauses for program units are not implemented in the current version of the 
compiler. 

63 Address Clauses for Interrupt Entries 

Address clauses for interrupt entries are supponed. (See Chapter 7 of theApplication 
Developer’s Guide for details.) 


42 


Appendix F, Version 5 






Section 7 


Unchecked Conversions 


Unchecked type conversions are described in [13.10.2]. The following restrictions apply 
to their use: 

■ Unconstrained arrays are not allowed as target types. Unconstrained record types 
without defaulted discriminants are not allowed as target types. Access Q^pes to 
unconstrained arrays are not allowed as target or source types. Notes also that 
UNCHECKED_CONVERSION cannot be used for an access to an unconstrained 
string. 

■ If the target type has a smaller size than the source type then the target is made of 
the least significant bits of the source. 

If the source and the target types are each of scalar or access type or if they are both of 
composite type, the effect of the function is to return the operand. 

In other cases the effect of unchecked conversion can be considered as a copy: 

« If an unchecked conversion of a scalar or access source type to a composite target 
type is performed, the result is a copy of the source operand. The result has the size 
of the source. 

■ If an unchecked conversion of a composite source type to a scalar or access target 
type is performed, the result is a copy of the source operand. The result has the size 
of the target 


Unchecked Conversions 


43 






44 


Appendix F, Version 5 



Section 8 


Input-Output Packages 


The RM defines the predefined input-output packages SEQUENTIAL_IO, DIR£CT_IO, 
and TEXT.IO, and describes how to use the facilities available within these packages. 
The RM ai^ defines the package lO.EXCEFnONS, which specifies the exceptions that 
can be raised by the predefined input-output packages. 

In addition the RM outlines the package LOW_LEVEL JO, which is concerned with low- 
level machine-dependent input-output, such as would possibly be used to write device 
drivers or access device registers. LOW_LEVELJO has not been implemented. The use 
of interfaced subprograms is recommended as an alternative. 


8.1 Correspondence between External Files and DOS Files 

Ada input-output is defined in terms of external files. Dau is read from and written to 
external files. Each external file is implemented as a sundard DOS file, including the use 
of STANDARD.INPUT and STANDARD_OUTPUT. 

The name of an external file can be either 

■ the null string 

■ a DOS filename 

■ a DOS special file or device name (for example, CON and PRN) 

If the name is a null string, the associated external file is a temporary file and will cease 
to exist when the program is terminated. The file will be placed in the current direaory 
and ittname will be chosen by DOS. 

If the name is a DOS filename, the filename will be interpreted according to standard 
DOS conventions (that is, relative to the current directory). The exception 
NAME.ERROR is raised if the name part of the filename has more than 8 charaaers or if 
the extension part has more than 3 charaaers. 


Input-Output Packages 


45 







If an existing DOS 61e is specified to the .LCREATE;CREATE procedure, the contents 
of the file will be deleted before writing to the file. 

If a non-existing directory is specified in a file path name to CREATE, the direaoiy will. 
not be created, and the exception NAME.ERROR is raised. 


8.2 Error Handling 

DOS errors are translated into Ada esKeptions, as defined in the RM by package 
IO_EXCEPnONS. In particular, DEVICE_ERROR is raised in cases of drive not ready, 
unimown media, disk full or 8.3 Thc l^RM Parameter 

The form parameter is a string, formed from a list of attributes, with attributes separated 
by commas. The string is not case sensitive. The attributes specify: 

■ Bufiering 

BUFFER_SIZE = > siztjnjytes 

■ Appending 

APPEND »> YES I NO 

■ Truncation of the name by DOS 

TRUNCATE «> YES | NO 

■ DIRECTJO on UNCONSTRAINED Objects 

RECORD_SIZE » > sizejnjjytes 


where: 

BUFFER.SIZE: Controb the size of the internal buffer. This option is not sup¬ 
ported for DIRECTJO. The default value is 1024. This option has no effea when 
used by TEXTJO with an external file that is a charaaer device, in which case the 
size (rf the buffer will be 0. 

APPEND: IfYES output is appended to the end of the existing file. If NO output 
overwrites the existing file, litis option is not supported for DIRECTJO. liie 
default is NO. 


46 


Appendix F, Version 5 






TRUNCATE: If YES the ffle name will be automatically truncated if it is bigger than 
8 characters. The default value is NO, meaning that the exception NAME_ERROR 
will be raised if the name is too long. 

RECORD_SIZE: This option is supported only for DIRECTJO. This attribute 
controls the logical record length of the external file. 

- When DIR£CT_IO is instantiated with an unconstrained type the user is 
required to specify the RECORD_SIZE attribute (otherwise USE_ERROR will 
be raised), llie value given must be larger or equal to the largest record which 
is going to written. If a larger record is proces.sed the exception USE_ERROR 
will be raised. 

- When DIRECTJO is instantiated with a constrained type the user is not 
required to specify the RECORD_SIZE but if the RECORD_SIZE is specified 
the only possible value would be the element size in bytes. Any other values 
will raise USE^ERROR. 

The exception USE^ERROR is raised if the form STRING in not correa or if a non 
supported attribute for a given package is used. 


Example: 

FORM a> TRUNCATE => YES, APPEND => YES, BUFFERJIZE => 20480" 


8.4 Sequential Files 

For sequential access the file is viewed as a sequence of values that are transferred in the 
order of their appearance (as produced by the program or run-time environment). This 
is sometimes called a stream fUe in other operating systems. Each object in a sequential 
file has the same binary representation as the Ada objea in the executable program. 


Input-Output Packages 


47 






8.5 Direct Files 


For direct access the file is viewed as a set of elements occupying consecutive positions in 
a linear order. The position of an element in a direct file is specified by its index, which is 
an integer of subtype POSrnvE_COUNT. 

DIRECrjO only allows input-output for constrained types. If DIRECTJO is instantiated 
for an unconstrained type, all calls to CREATE or OPEN will raise USE.ERROR. Each 
objea in a direa file will have the same binary representation as the Ada objea in the 
executable program. All elements within the file will have the same length. 


8.6 Text Files 

Text files are used for the input and output of information in ASCII character form. 

Each text file is a sequence of characters grouped into lines, and lines are grouped into a 
sequence of pages. 

All text file column numbers, line numbers, and page numbers are values of the subtype 
POSmVE^COUNT. 

Note that due to the definitions of line terminator, page terminator, and file terminator 
in the RM, and the method used to mark the end of file under DOS, some ASCII files do 
not represent well-formed TEXTJO files. 

A text file is buffered by the Runtime Executive unless 

■ it names a device (for example, CON or PRN). 

■ it is STANDARD_INPUT or STANDARD_OUTPUT band has not been redireaed. 

If not redireaed, prompts written to STANDARD_OUTPUT with the procedure PUT will 
appear before (or when) a GET (or GET_LINE) occurs. 

The functions END_OF_PAGE and END_OF_FILE always return FALSE when the file is a 
device, which inclu^ the use of the fileTlON, and STANDARD_INFUT when it is not 
redirected. Programs which would like to check for end of file when the file may be a 
device should handle the exception END.ERROR instead, as in the following example: 


48 


Appendix F, Version 5 




Example 

begin 

loop 

■■ Display the prompt: 

TEXTJO.PUT (“-> ••); 

" Read the next line: 

TEXTJO.GET.LIRE (CONMARO, LAST); 

•• Non do soawthing with CONMANO (1 .. LAST) 
end loop; 
exception 

when TEXT^IO.EHOJRROR »> 
null; 

end; 

END_ERROR is raised for STANDARD_INPUT when ^ Z (ASOLSUB) is entered at the 
keyboard. 

8.7 Access Protection of External Files 

All DOS access protections exist when using files under DOS. If a file is open for read 
only access by one process it can not be opened by another process for read/write access. 

8.8 The Need to Close a File Explicitly 

The Runtime Executive will flush all buffers and close all open files when the program is 
terminated, either normally or through some exception. 

However, the RM does not define what happens when a program terminates without 
closing all the opened files. Thus a program which depends on this feature of the 
Runtime Executive might have problems when ported to another system. 

8.9 Limitation on the Procedure RESET 

An internal file opened for input cannot be RESET for output However, an mtemal file 
opened for output can be RESET for input and can subsequently be RESET back to 
output 


Input-Output Packages 


49 






8.10 Sharing of External Files and Tasking Issues 

Several internal files can be associated with the same external file only if all the internal 
files are opened with mode IN_MODE. However, if a file is opened with mode 
OUT_MODE and then changed to IN_MODE with the RESET procedure, it cannot be 
shared. 

Care should be taken when performing multiple input-output operations on an external 
file during tasking because the order of calls to the I/O primitives is unpredictable. For 
example, two strings output by TEXT_IO.PUT_LINE in two different tasks may appear 
the output file with interleaved characters. Synchronization of I/O in cases such as this 
the user's responsibili^. 

The TEXTJO files STANDARD^INPUT and STANDARD_OUTPUT are shared by all 
tasks of an Ada program. 

If TEXT_IO.STANDARD_INPUT is not redireaed, it will not block a program on input. 
All tasks not waiting for input will continue running. 


50 


Appendix F, Version 5 


k-5- 






Section 9 


Characteristics of Numeric I^es 

9.1 Integer T^es 

The ranges of values for integer types declared in package STANDARD are as follows: 
SHORT_INTEO£R -128 .. 127 -- 2**7 - 1 

IMTECER -32768 .. 32767 -- 2**15 - 1 

LONG^IMTEGER -2147483648 .. 2147483647 - 2**31 - 1 

For the packages DIRECTJO and TEXTJO, the range of values for types COUNT and 
POSmVE.COUNT are as foUows: 

COURT 0 .. 2147483647 - 2^31 - 1 

POSITIVE_COURT 1 .. 2147483647 - 2**31 - 1 

For the package TEXTJO, the range of values for the type FIELD is as follows: 

FIELD 0 .. 255 -- 2**8 - 1 

9.2 Floating Point I^pe Attributes 


c 

SHORT_rLOAT 
and FLOAT 

LORG.FLOAT 

0I61TS 

4. 

6 

15 

MAMTISSR 

21 

51 

EMAX 

’ 84 

204 


Characteristics of Numeric Types 


51 





EPSILON 

9.53674E-07 

8.88178E-16 

LARGE 

1.93428E-''2S 

2.57110E+61 

SAFEJKAX 

12S 

1021 

SAFE_SHALL 

1.17549E-38 

2.22507E-30S 

SAFE.LARGE 

4.25353E-'^37 

2.24712E+307 

FIRST 

•3.402a2E-'-3a 

-1.79769E+308 

LAST 

3.40282E^38 

1.79769E+308 

NACH1NE_RA0IX 

2 

2 

HACHINEJMAX 

128 

1024 

NACHINE_EM1N 

-125 

-1021 

MACHINE_ROUNOS 

trua 

trua 

NACHINE_OVERFLOWS 

falsa 

• falsa 

SIZE 

32 

64 


93 Attributes of Type DURATION 

OURATlON'OEtTA 2.0 ** <-14) 

OURATION'SMAU 2.0 •* (-14) 

OURATIOII'FIRST -131_072.0 

OURATICW'UST 131_072.0 

DUUT ION'LARGE SMC at DURATION'LAST 


52 


Appendix F, Version 5 






Section 10 


Other Implementation>Dependent Characteristics 


10.1 Use of the Floating-Point Coprocessor 

Floating point coprocessor instructions are used in programs that perform arithmetic on 
floating point values in some fixed point operations and when the FLOATJO or 
FIXEDJO packages of TEXTJO are used. The mantissa of a fixed point value may be 
obtained through a conversion to an appropriate integer type. This conversion does not 
use floating point operations. Objea code running on an 80286 or 80386 using floating 
point instructions does not require the coprocessor, since software floating point 
emulation is provided (see Binder option FLOAT in User’s Guide, Section 5.2). Objea 
code running on an 8086,8088 or 80186 does require an 8087 coprocessor, since 8087 
software emulation is not supported. See i^pendix D of the..^p/tcaiion Developer’s 
Guide for more deuils. 

The Runtime Executive will detea the absence of the floating point coprocessor if it is 
required by a program and will raise CONSTRAINT.ERROR. 

10.2 Characteristics of the Heap 

All objects aeated by aUocators go into the heap. Also, pordons of \he Runtime Execu¬ 
tive representation of task objects, including the task stacks, are allocated in the heap. 

UNCHECKED^DEALLOCATION is implemented for ail Ada access objects except access 
objects to taskl Use of UNCHECKED_DEALLOCATION on a task objea will lead to 
unpredictable results. 

i 

All objects whose visibOi^ is linked to a subprogram, task body, or block have their 
storage redained at exit, whether the exit is normal or due to an exception. Efiectively 
pragma CONTROLLED u automatically applied to all access types. Moreover, all 
compiler temporaries on the heap (generated by such operations as function calls 
returning unconstrained arrays, or many concatenations) allocated in a scope are 
deallocated upon leaving the scope. 


Other Implementation-Dependent Characteristics 


53 



Note that the prograicner may force heap reclamation of temporaries associated with 
any statements by enclosing the statement in a begin.. end block. This is especially 
useful when complex concatenations or other heap-intensive operations are performed 
in loops, and can reduce or eliminate STORAGE.ERRORs that might otherwise occur. 

The maTimum size of the heap is limited only by available memoiy. This includes the 
amount of physical memory (RAM) and the amount of virtual memoiy (hard disk swap 
space). 


10 J Characteristics of Tasks 

The default task stack size is IK bytes (32K bytes for the environment task), but by using 
the Binder option STACK.TASK the size for all task stacks in a program may be set to a 
size from IK bytes to 64K bytes. 

Normal priority rules are followed for preemption, where PRIORITY values are in the 
range 1.. 10. A task with undefined priority (no pragma PRIORITY) is considered to be 
lower than priority 1. 

The maximum number of active tasks is restricted only by memoiy usage. 

The accepter of a rendezvous executes the accept body code in its own stack. 

Rendezvous with an empty accept body (for synchronization) does not cause a context 
.switch. 

The main program waits for completion of all tasks dependent upon Ubrary packages 
before terminating. 

Abnormal completion of an aborted task takes place immediately, except when the ab¬ 
normal task is Uie caller of an entry that is engaged in a rendezvous, or if it is in the 
process of activating some tasks. Any such task becomes abnormally completed as soon 
as the state in question is exited. 

The message 

dOm. dOCXIHG SITUATION DETECTED 

is printed to STANDARD_OUTFUT when the Runtime Executive detects that no further 
progress is possible Ibr any task in the program. The execution of the program is then 
abandoned. 


54 


Appendix F, Version 5 



10.4 Deflnition of a Main Subprogram 

A libraiy unit can be used as a main subprogram if and onfy if it is a procedure tbat is not 
generic and that has no formal parameters. 

FirstAda imposes no additional ordering constraints on compilations beyond those 
required by the language. 





Othtr Implementation-Depfndent Characteristics 


55 










56 


Apptnda F, Version 5 



Section 11 


Limitations 


11.1 Compiler Limitations 

■ The maximum identifier length is 255 characters. 

■ The maximum line length is 255 charaaeis. 

■ The maTimum number of unique identifiers per compilation unit is 2500. 
a The maTimum number of compilation units in a library is 1000. 

a The maximum number of Ada libraries in a family is 15. 


11.2 Hardware Related Limitations 

a The maximum amount of data in the heap is limited only by available memory. 

a If an unconstrained record type can exceed 4096 bytes, the type is not permitted 
(unless constrained) as the element type in the definition of an array or record type. 

a The maxim um size of the generated code for a single compilation unit is 65535 
bytes. 

a The maximum size of a single array or record obje« is 65522 bytes. An object 
bigger than 4096 bytes will be indirectly allocated Refer to ALLOCATION 
parameter in the COMPILE command. (Section 4.2 of the User's Guide.) 

a The maximcm size of a single stack frame is 32766 bytes, including the data for 
inner package subunits unnested to the parent frame. 

a The maximum amount of data in the global data area is 65535 bytes, including 
compiler generated data that goes into the GDA (about 8 bytes per compilation unit 
plus 4 bytes per externally visible subprogram). 


Limitations 


51 








58 


Appendix F, Version 5 


INDEX 


Abnonnal completion 54 
Aborted task 54 
Access protection 49 
Access types 24 
Allocators 52 
APPEND 46 

Application Dt^'eloper’s Guide 3 
Array gaps :!6 
Array subtype't 

Array subtype and objea sire 28 
Array type 7 

ARRAY_DESCRIPTOR 36- 
ASSEMBLER 3 

Atinou^'is of type DURATION 52 

Basic record stnicture 29 
Binder 54 
BUFF-ERJIZE 46 
Buffered ffles 48 
Buffers 
flushing 49 


I/O on 48 
Control Z 49 
COUNT 51 
CREATE 46,48 


Device name 45 
DEVICE_ERROR 46 
DIGITS 51 
Direct files 48 
DIRECT lO 45,48,51 
Disk full“ 46 
DOS conventions 45 
DOS files 45 
DOS Linker 4 
DOS special file 46 
Drive not ready 46 
DURAHONDHLTA 52 
DURATIONTIRST 52 
DURATIONTARGE 52 
DURATIGNTAST 52 
DUR.\TION’SMAiL 52 


C 3 

Characteristia of tasks 54 
CliUection SUDC 24 
Collections 24 
Column numters 48 
Compiler UmitatioM 57 

nuBimuB identiltor length 57 
57 

mczibarWiaamber^Ads libraries 

mao&tanjiiijtDber of compilation 

maximuja number of unique 
identifiers 57 

ConstrHinC'i! types 


E’EXCEPTION.CODE 7 
EMAX 51 

Empty accept body 54 
END_ERROR 48,49 
END„OF_FILE 48 
ENd”ofIpaGE 48 
Enumeration literal enajding 16 
Enumeration subtype si 2 e 17 
Enumeration types 16 
EPSILON 52 
Errors 

disk full 46 
drive not ready 46 
hardware 46 

Uuiu^Owij: jLur^iii ‘Ui 


Indgx 


59 




EXCEPnON_CODE 
Attribute 7 

FIELD 51 
File closing 
explicit 49 
Filenames 45 
File tcnninator 48 
FIRST 52 

Fixed point type representation 21 
Fixed point type size 22 
Floating point coprocessor 53 
Floating point type attributes 51 
Floating point type representation 20 
Floating point type size 21 
FORM parameter 46 

GET 48 
GET_LINE 48 

GLOBAL BLOCKING SITUATION 
DETECTED 54 

Hardware errors 46 
Hardware Limitations 

maximum amount of data in tbe 
global data area 57 
maximum data in the heap 57 
maximum size of a single array or 
record object 57 

maximum size of the generated code 

HardTrire itittted limiutlons 57 
Heap 53^ _ , . 

I/O synchronization 50 
Implicit component 36,37 
Implicit components 34 


IN_MODE 50 
INDENT 5 

Indirect record components 31 
INTEGER 51 

Integer type and object size 18 
Integer type representation 18 
Integer types 51 
Intel objca module format 4 
INTERFACE 3,4 
rNTERFACE_NAME 3, 4 
Interfaced subprograms 45 
Interleaved charaaers 50 
IO_EXCEPTIONS 45,46 
IsJuiRAY 
Attribute 7 

LARGE 52 
LAST 52 

Layout of a record 29 
Legal file names 45 
Library unit 55 
Limitations 57 
Line numbers 48 
Line terminator 48 
LONG.INTEGER 51 
LOW_LEVELJO 45 

MACHINE_EMAX 52 
MACHINE_EMIN 52 
MACHINE_MANT[SSA 52 
MACHINE_OVERFLOWS 52 
MACHINE_RADD£ 52 
MACHINE„ROUNDS 52 
Mam program 54 
Main subprogram 55 
MANTISSA 51 


60 


Appendix F, Vexsion 5 






Maximum amount of data in the global 
data area 57 

Maximum data in the heap 57 
Maximum identifier length 57 
Maximum line length 57 
Maximum number of Ada libraries 57 
Maximiun number of compilation units 
57 

Maximum number of omque identifiers 
57 

Maximum size of a single array or 
record objea 57 

Maximum size of the generated code 57 

NAME^ERROR 45,46 
Non-blocldng I/O 50 
Number of active tasks 54 


OPEN 48 

Ordering of compilation units 55 
OUT^MODE 50 


P’IS_ARRAY 7 
PA<i 5 


Page numbers 48 
Page terminator 48 
Parameter passing 2 
POSmVE_COUNT 48,51 
PragmaA^OVR 5,37 

.. 

NAME 4 

_ *3^25,25,30 

Prat^MilORfrY 5,54. 
PragiwSUPSRESS 5 
Predefined packages 39 

PP?n7JTTV ^ flA 



PUT 48 
PUT_LINE 50 

RECORD_DESCRIPTOR 37 
RECORd'sEZE 34,37,47 
Rendezvous 54 
Representation clauses 15 
RESET 49.50 

Runtime Executive 2,4,48,49,53,54 

SAFE_EMAX 52 
SAFE_LARGE 52 
SAFe’sMALL 52 
Sequential files 47 
SEQUENTIAL JO 45 
Sharing of external files 50 
SHORT.INTEGER 51 
SIZE 52 

Size of record types 38 
SPACE 37 

STANCARD.INPUT 45,48,49,50 
STANDARD_OUTPUT 45,48,50,54 
Storage redamatiOD at exit 53 
STORAGE_SIZE 24 
Stream file 47 
SUPPRESS 5 

Synchronization of I/O 50 
SYSTFJd 5 

Task activation 24 
Task stack size 24,54 
Task stacks 53 
Task types 24 
Tasking issues 50 
Tasks 

characteristics of 54 

t ViAi laaw 


/nder 


61 







buffered 48 
Text files 48 
TEXTJO 45,51 

time's? 

TRUNC4TE 47 

UNCHECKED_DEALLOCATION 53 
Unknown media 46 
USE_ERROR 47,48 

Variant part 35 
VARIANT..INDEX 35,36,37 


62 


Appendix F, Version 5 









