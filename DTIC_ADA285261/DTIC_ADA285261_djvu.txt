REPORT DOCUMENTATION PAGE 


K istlmated to average 1 hour per response, InduOIng me 

1 isvlewing the oolleclior) of information. Send comment 

• ■ I s. 1215 Jefferson Davis Highway, Suite 1204, Ariington, 


Form Approved 


OPM No. 


•stimated to average 1 hour per response, inducing the time for reviewing instructions, searching exisDng data 
isviewing the collection of information. Send comments regading mis burden, to Washington Headquarters 
s, 1215 Jefferson Davis Highviray, Suite 1204, Arlington, VA 22202-4302, and to the Office of Information and 
Ington, DC 20503. 


2. REPORT 


3. REPORT TYPE AND DATES 


4. TITLE AND Compiler.VADS IBM RS/6000 => PowerPC. Product 

#2100-01445. Version 6.2 

Host; IBM RS/6000 Model 530 (under AIX 3.2.5) 

Target: Motorola MVME1601 (PowerPC 601) (bare machine) 


6. AUTHORS: 

Wright-Patterson APB. Dayton, OH 


7. PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 




9. SPON! 
Ada Joint 
Code TXI 
22204-21 


11. SUPPLEMENTARY 


10. SPONSORING/MONITORING 
AGENCY 




12a. DISTRIBUTION/AVAILABILITY: Approved for public release; distribution 12b. DRISTRIBUTION 
unlimited 


13. (Maximum 200 

Rational Software Corporation, 940630W1.11364 


14. SUBJECT: Ada Programming Language, Ada Compiler Validation Summary 15. NUMBER OF 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office. Ada Val. Facility 
ANSI/Mil-STD-1815A 16. PRICE 


17 SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


NSN 


18. SECURITY 

19. SECURITY 


CLASSIRCATION 

UNCLASSIFIED 

UNCLASSIFIED 


20. LIMITATION OF 

UNCLASSIFIED 








































AVF Control Number: AVr-VSR-592 .0694 
Date VSR Completed: July 21, 1994 

94-05-12~rat 


Ada CC^ILER 
VALIDATIOi SUMMARY REPORT: 
Certificate Number: 940630W1.11364 


Accesion For 




NTIS CRA&I 
OTIC TAB 
Up.anno‘inced □ 

JjslifiCcUion ... 


. 

Distribi'tion / 



AvaiipbilTy Codes 
A'v 


uii oi'e/or 
SpOOidl 


Rational Software Corporation 

VADS IBM RS/6000 -> PowerPC, Product Number: 2100-01446, Version 6.2 
IBM RS/6000 Model 530 under AIX 3.2.5 -> 

Motorola MVME1601 (PowerPC 601 bare machine) 


(Final) 


Prepared By; 

Ada Validation Facility 
645 CeSG/SeSL 

Wright-Patterson AFB OH 45433-5707 




94 9 28 








94-31050 

Hill mil mil 11,TT... .-■..V ^ v 















Certificate Information 


The following Ada inpleroentation was tested ^u^K3 determined to pass ACVC 1.11. 
Testing was ccsnpleted on 30 Jme 1994. 


Compiler Name and Version; VADS IBM RS/6000 -> PowerPC, 

Product Number: 2100-01446, Version 6.2 


Host Computer System: IBM RS/6000 Model 530 

under AIX 3.2.5 

Target Conputer System: Motorola MVME1601 

(PowerPC 601 bare machine) 


Customer Agreement Number: 94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11364 
is awarded to Rational Software Corporation. This certificate expires two 
years after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is ajproved. 



Dale E. Lange 
Technical Director 


645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 



Defense Information Systems Agency, 
Center for Information Mar»gement 













DECLARATION OF CONFORMANCE 


The following declaration of confonnzmce was supplied by the customer. 


Declaration of Conformance 
Customer: Rational Software Corporation 


Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 
Ada Inplementation: 

Ada Conpiler Name and Version: VADS IBM RS/6000 -> PowerPC, 

Product Nunijer: 2100-01446, Version 6.2 

Host Conputer System: IBM RS/6000 Model 530 

under AIX 3.2.5 

Target Conputer System: Motorola MVME1601 

(PowerPC 601 bare machine) 


Declaration: 


I, the undersigned, declare that I have no 

knowledge of deliberate deviations from the Ada Language 

Standard ANSI/MIL-STD-1815A ISO 8652-1987, FIPS 119 as tested 

in this validation and documented in the Validation Summary Report. 











TABLE OF CONTENTS 


CHAPTER 1 INTRCX)UCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDEIICIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COlPILATiai SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 



















CHAPTER 


1 


INTRODUCTION 


The Ada inplementation described eJx>ve was tested according to the Ada 
Validation Procedures (Pro92] against the Ada Steuidard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an accoiont of the testing of this Ada implementation. For 
any technical terms used in this report, the reader is referred to [Pro92]. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the computers, operating systems, and coitpiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF vdiich performed this 
validation or from: 

National Technical Information Service ^ 

5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF >^ich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTZCSN 


1.2 REFEREITCES 

(Ada83] Reference Heuiiaal for the Ada Progransninq Language, 

ANSI/MIL-STD-1615A, February 1983 and lOT 8652-1987. 

(Pro92] Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program office, August 1992. 

tUG891 Ada Compiler Validation Capability user's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Complieunce of Ada implementations is tested by meeuis of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. Zhe first letter of a test name identifies the class to 
v^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result ^en they are 
executed. Three Ada library xanits, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circxmrvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_PILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests Contain legal Ada 
code vhich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in /ppendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraph, removing withdrawn tests (see section 2.1), and possibly 
removing some inappiic2d3le tests (see section 2,2 and [UG89]). 

In order to pass an ACVC cin Ada implenentation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITICX4 OF TERMS 


Ada Compiler 


Ada Compiler 
Validation 
Capability 
(ACVC) 

Ada 

Implementation 

Ada Joint 
Program 
Office (AJPO) 

Ada 

Validation 
Facility (AVF) 

Ada 

Validation 

Organization 

(AVO) 

Compliauice of 
an Ada 

Implementation 

Computer 

System 


The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executedale form and 
execution thereof. 

The means for testing compliance of Ada implementations, 
consisting of the test suite, the support programs, the ACVC 
user's guide auid the template for the validation summary 
report. 

An Ada conpiler with its host computer system and its 
target conputer system. 

The part of the certification body v?hich provides policy and 
guidance for the Ada certification system. 


The part of the certification body which carries out the 
procedures required to establish the compliance of an Ada 
implementation. 

The part of the certification body that provides technical 
guidance for operations jf the Ada certification system. 


The ability of the implementation to pass an ACVC version. 


t. 

A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or part 
of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 

manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 







INTRODUCTION 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an agreement 

with an AVF which specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada implementation for which 
validation status is realized. 

Host Computer A computer system vrtiere Ada source programs are transformed 

System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada inplementation. 

ISO International Organization for Standardization. 

LBM The Ada standard, or Language Reference Manual, published as 

ANSI/MIl.-S'n)-1815A-1983 arxi ISO 8652-1987. Citations from the 
LRM take the form ''<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs amd that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware inplementations are possible. 

Target A conputer system \diere the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The conpiler of a validated Ada implementation. 

Conpiler 

Validated Ada An Ada inplementation that has been validated successfully 
Inplementation either by AVF testing or by registration (Pro92J. 

Validation The process of checking the conformity of eun Ada conpiler to 
the Ada programming language and of issuing a certificate for 
this implementation. ^ 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 





chapter 2 


IMPLEMEl^TIGN DEPENDENCIES 


2.1 WITHDRAWN TESTS 


The following tests have been withdrawn by the AVO. Tbe rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C35507L 

C35507N 

C35507O 

C35508M 

C35508N 

C35702A 

C43004A 

C45114A 

C45346A 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

C83026A 

B83026B 

C83041A 

C97116A 

C98003B 

BA2011A 

CC1223A 

BC1226A 

CC1226B 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A41E 

CD2A87A 

CD2B15C 

CD4022D 

CD4024B 

CD4024C 

CD5111A 

CD7004C 

ED7005D 

AD7201A 

AD7201E 

CD7204B 

CD9005A 

CD9005B 

CDA201E 

CE2119B 

CE2205B 

CE2405A 

CE3411B 

CE3412B 

CE3607B 

CE3814A 

CE3902B 



C32203A 

C34006D 

C35507K 

C35507P 

C355081 

C35508J 

C35702B 

C37310A 

B41308B 

C45612A 

C45612B 

C45612C 

B49008B 

A54B02A 

C55B06A 

B83022H 

B83025B 

B83025D 

B85001L 

C86001F 

C94021A 

CB7001A 

CB7001B 

CB7004A 

BC3009B 

BD1B02B 

BD1B06A 

CD2A23E 

CD2A32A 

CD2A4LA 

BD3006A 

BD4008A 

CD4022A 

CD4024D 

CD4031A 

CD4051D 

CD7005E 

AD7006A 

CD7006E 

AD7206A 

BD8002A 

BD8004C 

CE2107I 

CE2117A ■ 

CE2117B 

CE3111C 

CE3116A * 

CE3118A 

CE3607C 

CE3607D 

CE3812A 




2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are iiipipvant 
for a given Ada inplementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENlATXCXa DEPEMDEMCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAXDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type L0NG_INTEGER; for 
this inf>leinentation, there is no such type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, emd C86006G check for the predefined type LONG_FLCiAT; 
for this inplementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LQNG_FLCAT, or SHORT_FLCAT; for this 
iBfilementation, there is no such type. 

A35801E checks that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point ty]pe and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_NANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the rzmge of the base 
type; for this implementation, MACHINEJDVERFLGWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than ty{)e 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this implementation, the ranges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 





IMPLEMENIATION DEPEM>ETrciES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), euid CD2A840 use length clauses 
to specify non-default sizes for access types; this inplenentation does 
not support such sizes. 

The tests listed in the following table check that USE ERROR is raised 
if the given file operations are not supported for the gTven combination 
of node and accer ' method; this implementation supports these 
operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

C:E2102F 

CREATE 

INOOT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESEI 

IN FILE 

SBQUQITIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

C:E2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOOT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT l5 

CE3102F 

RESET 

Any Mode 

TEXT”10 

CE3102G 

DELETE 


TEXT"10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of etn 
external direct file is exceeded; this inplementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENCTH and SET PA£2:_LENGTH raise USE ERROR 
if they specify an inapproprTate value for ^e external file; there are 
no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUTJERKCR when the value of the page 
number exceeds COONT'IAST; for this inplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this objective 
inpractical. 


2-3 






IMPLEMENTATIW DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
inplen»entation did not report the violations of the Ada Stauidard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 

A35801E was graded inapplicadale by Evaluation Modification as directed by the 
AVO. The con^jiler rejects the use of the range FLOAT'FIRST. .FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 
lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, and CD2A31A..C were graded passed by Evaluation 
Modification as directed by the AVO. These tests use instemtiations of the 
support procedure LENGTH CHECK, which uses uncheclced Conversion according to 
the interpretation given Tn AI-00590. The AVO ruled Biat this interpretation 
is not binding \jinder ACVC l.ll? the tests are ruled to be passed if they 
produce Failed messages only from the instzmces of LENGra_CHECK—i e, the 
allowed Report.Failed messages have the general form: 

" * CHECK CW REPRESENTATION FOR <TyPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
implemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by commenting out line 36 and 
40; the modified test was passed. 


2-4 







CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIR(»JMENT 


The Ada implenventation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW Con^iton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the Ada 
Inpleinentation fails the ACVC [Pro92J. *■ 

For all processed tests (inapplicedile and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the inplementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b emd f, below). 


3-1 










PRCXrESSING INFORMATICS 


a) Total Number of Applicable Tests 3796 

b) Total Number of Withdravm Tests 104 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 270 (c+d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTICS 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto Sun SPARCcenter 2000 and then copied to the 
host conqputer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implen»ntation. 

The tests were conpiled and linked on the host computer system. The 
executable images were then downloaded to the target board via a serial port 
and executed. The results were captured on the host computer system via a 
serail port. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validat. i testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. ^ 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape emd archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3-2 










APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
Ttie meaning and purpose of these parameters are explained in [UG89]. Itie 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vdiich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the maximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

499 

— Value of V 



$BIG_ID1 

(1. 

.V-1 -> 'A', 

V 

-> 

'1') 

$BIG_ID2 

(1. 

.V-1 -> 'A', 

V 

-> 

'2') 

$BIG ID3 

(1. 

.V/2 -> 'A') 

& 

'3' 

& 



(1..V-1-V/2 

-> 

'A 

') 

$BIG ID4 

(1. 

.V/2 -> 'A') 

& 

'4' 

& 



(1..V-1-V/2 

-> 

'A 

') 

$BIG_INT_LIT 

(1. 

.V-3 -> '0') 

& 

"298" 

$BIG_REAL_LIT 

(1. 

.V-5 -> '0') 

& 

"690.0" 

$BIG_STRING1 

r H r 

& (1..V/2 - 

> ' 

A') 


$BIG_STRING2 

r «r 

& (1..V-1-V/2 

-> 

'A') & 

$BLANRS 

(1. 

.V-20 -> ' " 

) 




$MAX LEN INT BASED LITERAL 

~ ~ "2;" & (1..V-5 -> '0') & "11:" 

$MAX LEN REAL_BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 









MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 32 

$ALIC]MMENT 4 

$COUNT_LAST 2147483647 

$DEFAULT_MEM_SIZE 16777216 

$DEFAULT_STORJJNIT 8 

$DEFAULT_SYS_NAME PCIWER_CROSS_NEW_PPC601 

$DELTA_DOC 0.0000000004566612873077392578125 

$ENTRY_ADDRESS SYSTEM.''+"(16#40#) 

$ENrRY_ADDRESSl SYSTEM.(16#80#) 

$ENTRY_ADDRESS2 SYSTEM.(16#100#) 

$FIELD_LAST 2147483647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_TYPE 

$FDQAT_NAME NO_SUCH_TYPE 

$FORM_STRING "" 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER THAN_DORATIClN 

100000.0 

$GREATER THANJDURATION BASE LAST 

TOOOOTJOO.O 

$GREATER THAN_FLQAT_BASE LAST 

I.FE+308 

$GREATER THAN FLQAT_SAFE LARGE 

5.TJE307 


A-2 







MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE_LARGE 

9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL EXTERNAL FILE NAMEl 

7illegal/f ile_naine/2) 1$%FILE1 .DAT 

$ ILLEGAL_EXTERNAL_FILE_NAME2 

/illegal/file_neune/2}]$%FILE2.DAT 

$INAPPROPRIATE_LINE_LENGTH 

-1 


$INAPPROPRIATE PAGE_LENGTH 

-1 


$ INCLUDE_PRAaiAl 
$INCLUDE_PRAGMA2 
$INTEGER_F1RST 
$INTEGER LAST 


PRAGMA INCLUDE ("A28006D1.TST") 
PRASIA INCLUDE ("B28006D1.TST") 
-2147483648 
2147483647 


$INTEGER_LAST_PLUS__1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_THANJDURATION -100000.0 

$LESS THAN DURATION BASE FIRST 

“ “ “ -lUOOOOOO.O 


$LINE_TERMINATOR ASCII. LF 

$LOW_PRIORITY 0 

$MACHINE CODE STATEMENT 


$MACHINE_CODE_TyPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 


C(®E_0'(OP -> NOP); 

CODE_0 

31 

15 

2147483647 

2147483648 

-2147483648 

TINY_INTEGER 

A-3 








MACRO PARAMETERS 


$NAME_LIST 

POWER_CROSS_NEW_PPC601 

$NAME_SPECIF1CATI0N1 

/usr/acvcl.ll/c/e/X2120A 

$NAME_SPECIFlCATiaJ2 

/usr/acvcl.ll/c/e/X2120B 

$NAME_SPECI FICATl W3 

/usr/acvcl.ll/c/e/X3119A 

$NEG_BASED_INT 

16#F000000E# 

$NEW_MEM_SIZE 

16777216 

$NEW_S'IOR_UNIT 

6 

$N.EW_SYS_NAME 

PCIWER_CR0SS_NEW_PPC6 01 

$PAGE_TERMINATOR 

ASCII.LF & ASCII.FF 

$RECORD_DEFINITI(»I 

RECORD SUBP; OPERAND; EJ 

$RECORD_NAME 

CODE_0 

$TASK_SIZE 

32 

$TASK_STORAGE_SIZE 

2048 

$TICK 

0.01 

$VAR1ABLE_ADDRESS 

VAR_1'ADDRESS 

$VARIABLE_ADDRESS1 

VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 

VAR_3'ADDRESS 

$YOUR_PRAGMA 

PRAC91A PASSIVE 




A-4 








APPENDIX B 


CX3MPILATICW SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 






COMPILATION SYSTEM OPTIONS 


add Conmzind Reference ada 

ada - invoke the Ada compiler 
Synteuc • 

ada (options] (source_fileJ... {object_file.o]... 

Arguments 

object_file.o non-Ada object file names. These files will be passed 

on to the linker and will be linked with the specified 
Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
conpiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the xinit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file ”file_name.das'' 
s Disassemble the xinit spec. 

-a file_name 

(archive) Treat file name as an object archive file created 
by ar. Since some arBiive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARCoitqpiler Ada only) 

(static) If static is indicated, the Ada program is Con^iled 
and linked statically. The defaxilt is dynamic. 

-c suppress the control messages generated vdien pragma PAGE 
euid/or pragma LIST are encountered. x 

-D identifier type value 

(define) Define an identifier of a specified type and value. 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default: -DAl.l] (HP PA-RISC only) 


-d (dependencies) Analyze for dependencies only. Do not do 







COHPIIATION SYSTEM OPTIONS 


semantic analysis or code generation. Update the library, 
marking any defined vinits as xmcompiled. The -d option is 
used by a.make to establish dependencies among new files. 
This option will attenqpt to do inerts for any units 
referenced from outer libraries. This should reduce 
relocaticm and reduce user disk space usage. 


-E directory 

(error output) without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process compilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated ^ error_file. Note that there is 
no space between the -Ef and error file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
directed to standard out vhile the raw errors are placed in 
source_file.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that source 
listing with errors is produced a^ directed to standard output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file and call the environment editor 
ERBC^ EDITOR. If ERROR_EDITOR is defined, the environment 
variaEle error_PATTERN should also be defined. ERPOR_PATTERN 
is an editor search c(xnmand that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERRORJEABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. TO save disk space, the DIANA tree will be 

B-3 






OQNPIIATION SYSTEM OPTIONS 


tcinned so that all pointers to nodes that did not involve 
a subtree that define a syndaol table will be nulled 
(\jnless those nodes are part of the body of an inline or 
generic or certain other values needing to be retain^ for 
the debugging or coopilation information). The trimning 
generally removes initial values of variables and all 
statements. 

-G (GVAS) Display suggested values for the MIN_GVhS_ADDR 
and MAX_GVAS_AIX)R INFO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
^ the conqpiler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L libraryjname 

(library) Operate in VADS library libraryjiame. 

[Default: current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(NO space between the -1 and the file abbreviation.) 

-M unit name 

(main) Produce an executable program by linking the named 
unit as the main program, unitjfiame must alrea^ Ise 
con^iled. It must be either a parameterless procedure or 
a parameterless fimction returning an integer. The 
executable program will be named a.out unless overridden 
with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking source^file. The main unit of the program is 
assumed to Ise Bie root name of the file (for foo.a the 
wit is foo). Only one file may be preceded by -H. The 
executable program will be nami^ a.out unless overridden 
with the -o option. 

-N (no code sharing) Coipile all generic instantiations 
without sharing code for their bodies. This option 
overrides the SHARE_B(X)Y INFX> directive and the SHAREjCX^E 
or SHAREJBCOY pragmas. 

-NX (NX) Link with NX startup code and with the NX archive libraries. 
This option is valid only if the -M option lias also been invoked. 

(Sun SPARC *> Paragon only) 


-0(0-9) 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 





CXMPILATION SYSTEM OPTIONS 


-O full optimization 
-OO no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add coanon subexpression elimination within 
basic blocks 

-03 add global coanon sxibexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 
-08 add one more pass of induction expression reduction 
-09 add one more pass of induction expression 

reduction and add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be siippressed. 

Note that using the -OO option can alleviate some problems v4ien 
debugging. For example, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active, if you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) Ihis option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(recuqpile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in vAii^ the 
reconpilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the librae's GVASJIABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GWAS exhausted" without reconciling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire ccxnpilation 
for all sufci^essible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 


B-5 



CXMPIIATIGN SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-V (verbose) Print coopiler version nisnber, date and tiae of 
compilation, name of file coo^iled, coonand input line, 
total compilation time and error summary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

source_file name of the source file to be compiled. 

Description 

Ihe ada command executes the Ada coopiler and compiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

By default, ada produces only object and net files. If the -M option 
is used, the compiler automatically invokes a.Id and builds a cooplete 
program with the named library xmit as the main program. 

For cross systems, the compiler generates object files compatible with 
the host linker in VOX format. The VOX format is disoissed in 
Aj^ndix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will be passed 
cm to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
compilation and the order of the riles to be passed to the linker can 
be significant. 

Several VADS coo^ilers may be simultaneously available on ^ single 
system. Because the ada coonand in ar^ VAD6_locatioiVbin on a system 
will execute the correct coopiler components based ipon visible 
library directives, the option -sh is provided to print the name of 
the cooponents actually executed. ^ 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name frcn different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names ace different), the second coopilation will 
overwrite the first. For exanple, the compilation of 
/\isr/directory2/foo.a -L /^isrAads/test will overwrite the 
compilation of Asr/directoryl/foo.a -L /usrAads/test in the 
VADS library /\xst/va.ds/test. 






CXllPILATION SYSTEM OPTIONS 


NOTE: It is possible to specify the directory for tenporary files by 
setting the environment variable ■mPDlR to the desired path. If TEMPDIR 
is not set, /top is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS conpiler are intended to be 
self-explanatory. Most refer to the RN. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTIONS 

The linker options of this Ada iiq>lementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 


B-7 




COMPIIATICN SYSTEM OPTIONS 


a.Id Coinnand Reference a.Id 

a.Id - build an executadjle program from previously compiled units 
Syntax. 

a.Id [options] unit_naine [linkerjoptions] 

Arguments 

linkerjoptions 

All arguments after unit_name are passed to the linker, 
library ali^reviations or object files. 

options options to the a.Id ccmnand. These are: 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Default: -DAl.l] (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on scmie hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. 

-Du unit list 

(xmiEs) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the elaboration dependencies^used each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases whe];;e linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E unit name 

(elalxjrate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the terroorary file containing the list of 
object files to link. This file is only present when many object 


B-8 








CONPIIATIGM SYSTEM OPTIGNS 


files are being linked. 

-L libraryjiame 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-NX (NX) Link with NX startup copde and with the NX archive libraries. 
(Sun SPARC •> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent \mits in order aixi 
sufqpress linking. 

-V (verbose) Print the linker connand before executing it. 

-V (verify) Print the linker command Ixit suppress execution. 

-w (warnings) Suppress warning messages. 
unit_name 

' name of an Ada unit. It must name a non-generic subprogram. 

If unitjname is a function, it must return a value of the 
type STANDARD. INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unitjname a dkain 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada cooqpiler to check dependency information, a^ld produces 
an exception ma^^ing table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WITHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any nundser of NITHn 

B-9 









COKPIIATION SYSTEM OPTIONS 


directives nay be placed into a library but they must be 
numbered contiguously beginning at WlTHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITOl:LINK:object_file; 

Wira2:LINK:archive_file; 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same nisobered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computer Systems, the 
USE_LAST_LlNK^INPO directive speeds relinking by retaining a list 
of units, their types, seals and dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS compilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NCXTE: It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TMPDIR 
is not set, /tmp is used. If the path specified by THFDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker'; 


B-10 









APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed in^lenentation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. unless Sj^cifically noted otherwise, 
references in this Appendix are to conpiler documentation eund not to this 
report. Implementation-specific portions of the package STANDARD, v^ich are 
not a part of .^ipendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY_INTEGER is range -128 .. 127; 
type SHORT_INTEGER is range -32768 .. 32767; 

tvnp FTiQAT 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type SHORT_FLQAT is digits 6 range -3.40282E+38 3.40282E+38; 

type DURATICXI is delta 0.0001 range -214748.3648 .. 214746.3647; 


end STANDARD; 


t, 


C-1 












APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Inplementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are sxobject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITIALIZE(STATIC) is used, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.2. INLINEjCWLY Pragma 

The INLINEjK^Y pragma, vrtien used in the same way as pragma 
INLINE, indicates to the compiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine vhich saves code 
space. If a user erroneously makes an INLINE_ONLY sxjbpro- 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefineH Ada packages, but provides no user access. It is. 
used only to inplement code b^ies for >diich no actual Ada 
body can be provided, for exanple the MACHINE_CC3DE package. 

1.4. SHARE_CODE Pragma ' 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library \init in a cwnpilation, but before 
any sxibsequent conpilation unit. 

When the first argument is a generic imit the pragma applies 
to all instantiations of that generic. When the first argu- 


C-2 







APPE20IX F OF THE Ada STANDARD 


ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the coiqpiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. Die extent to 
which code is Glared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

Die name pragma SHARE BCElY is also recognized by the iiqple- 
mentation and has the same effect as SHARE_C(X>E. It is 
included for conpatability with earlier versions of VADS. 

1.5. NO_IHAGE Pragma 

Die pragma suppresses the generation of the image array used 
for. the IMAGE attribute of enumeration types. Diis elim¬ 
inates the overhead required to store the array in the exe> 
cutable image. An attespt to use the IMAGE attribute on a 
type vdiose image array has been su{^ressed will result in a 
coopilation warning and PROGRAM_ERROR raised at run time. 

1.6. EXTERNAL_NAME Pragma 

Die EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. Die pragma is allowed at the 
place of a declarative item in a package specification and 
must a^ly to an object declared earlier in the same package 
specification. 

1.7. INTERFAiCE_NAME Pragma 

I 

The INTEE^ACE_NAME pragma takes the name of a a variable or* 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or sui^rogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in tiie same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 











APPENDIX F OF THE Ada STANDARD 


1.8. IMPL1CIT_CCX)E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that inplicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any implicit code needs to be generated. 
The default is ON. 


1.9. OPTiniZE_CCX>E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine c^e 
procedure. It specifies vhether the code should be optim¬ 
ized by the compiler. The defatilt is ON. When OFF is 
specified, the cosqpiler will generate the code as specified. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 
Ada RN. 


2.3. INLINE 

This pragma is implemented as described in /^^pendix B of the 
Ada RN. 


2.4. INTERFACE 

This pragma supports calls to 'C' and F^TRAN functions. The 
Ada suli^rograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type AKS^S in SYS^TEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the AIX3RESS attribute. 

2.5. LIST 

This pragma is implemented as described in i^jpendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The isple- 


C-4 








APPENDIX F OF 'HIE Ada STANDARD 


mentation does not allow SYSTESM to be modified by means of 
pragmas, the SYSTEM package must be recooqpiled. 

2.7. NON_REENTRANT 

This pragma takes one argument \^ich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It Indicates 
to the compiler that the subprogram will not be czdled 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a Iwguage 
other than Ada. Ihe presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 


2.10. PACK 

This pragma will cause the compiler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in Appendix B of the ’ 
Ada RH. 


2.12. PASSIVE 

% 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE (SEMAPHORE); 

PRAGMA PASSIVE(INTERRUPT, <number>); 


This pragma Pragm passive can be applied to a task or task 
type declared immi^iately within a library package spec or 
body. The pragm directs the coopiler to optimize certain 
tasking operations. It is possible that the statements in a 


C-5 






APPENDIX F CF THE Ada STMCARD 


task body will prevent the intended optimization, in these 
cases a warning will be generated at conpile time and will 
raise TASKING_ERBOR at runtime. 

2.13. PRIORITY 

This pragma is iiq>lemented as described in Appendix B of the 
Ada RN. 


2.14. SHARED 

This pragma is recognized by the in^lementation but has no 
effect. 


2.15. STORAGEJUNIT 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION GlECK and in some cases OVERFLOWjOHECK cannot be 
supresse?. 

2.17. SYSTEMJNAME 

This pragma is recognized by the iaplemntation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reccopiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task xinit, or label, it refers to the address of^ the 
machine code associated with the corresponding bod^ or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MAaiINE_CXX>E. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 


C-6 





APPENDIX F OF THE Ada STANDARD 


not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK^ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type AIX)RESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIGNED_TYPES; 
package SYSTEM is 


pragma suppress(ALL_CHE:a^); 
pragma, suppress (EXCEPTIONJIABLES); 
pragma not_elaborated; 


type NftME is ( power_cross_new_jjpc601 ); 


SYSTEM_NAME : constant NAME :> power_cross_new_|:pc601; 

STORAGEJUNIT : constant 8; 

MEMORY SIZE : constant :« 16 777 216; 


— System-Dependent Named Numbers 


M1N_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


; constant :■ -2 147 483 648; 
; constant ;■ 2 T47_T83j?47; 

: constant I"?; ” 
constant :« 31; 

; constant 2.0**(-31); 

: constant :> 0.01; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE ; integer .— 64*1024; 

type AIX)RESS is private; ^ 


function ">" (A; AI»RESS 
function "<" (A: ACTRESS 
function ">-"(A: AIX}RESS 
function "<-"(A; ADDRESS 
function (A; ADDRESS 
function "+" (A; ADDRESS 
function (A: AIXIRESS 


B: AISRESS) return BOOLEAN; 
B: AIX>RESS) return BOOLEAN; 
B: AIX>RESS) return BOOLEAN; 
B: A£X)RESS) return BOOLEAN; 
B: ADDRESS) return INTEX^; 
I: INTEGER) return ADDRESS; 
I: INTEGER) return ADDRESS; 


function "+" (I; 


UNSIGNED TYPES.UNSIGNED INTEGER) return AIX>RESS; 


C-7 









APPENDIX F OF THE Ada STANDARD 


function MEMORy_ADDRESS 

(I; UNSIGNED_TYPES.UNSIGNED_INTEGER) return AM)RESS renames "+" 

NO_ADDR ; constzmt ADDRESS; 

type TASK_ID is private; 

NO_TASK_ID ; constant TASK_ID; 

type PASSIVE_TASK_ID is private; 

NO_PASSIVE_TASK_ID : constant PASSIVE_TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATOS_SIZE: constant 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type BYTE_ORDER_T is ( 

LITTLE_ENDIAN, 

BIG ENDIAN 

); 

BYTEjORDER; constant BYTE_ORDER_T :» BIG_ENDIAN; 
type LONG_ADDRESS is private; 

NO_LONG_AIX)R ; constant LC3NG_ADDRESS; 

function ”+" (A; LONG_ADDRESS; I; INTEGER) return LONG_ADDRESS; 
function (A; LONG_ADDRESS; I: INTEGER) return LONG_ADDRESS; 

function MAKE_LONG_ADDRESS (A: ADDRESS) return LCNG_AW)RESS; 

function LOCALIZE(A; LONG_ADDRESS ; BYTE_SIZE : INTEGER) return ADDRESS 

fimction STATION_OF(A: LONG__ADDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 
— then, this is the julian day. 
subtype DAYJT is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVOCATION_BY_AI»RESS ; constant BOOLEAt]; TRUE; 

SUPPORTS PREELABORATION : constant BOOLEAN TRUE; 

MAKE_ACCTSS_SUPPORTED ; constant BOOLEAN TRUE; 

— Arguments to the CIFO pragma INTERRUPTJIASK. 
type INTERRUPT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

ftinction RETURN_ADDRESS return ADDRESS; 

private 

type AMJRESS is new UNSIGNED TYPES.UNSIGNED_INTEGER; 


C-8 







APPE34DIX F OF THE Ada STANDARD 


NO_ADDR : constant ADDRESS 0; 

pragma BUILT_IN(; 
pragma BUILT_IN("<"); 
pragma BUILT_IN( 
pragma BUILT_IN(; 
pragma BUILT_IN(); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSIC21ED_TyPES.lJNSIC21El)_INrEGER; 
NO_TASK_ID : constant TASK_ID 0; 

type PASSIVE_TASK_ID Is new l»tSIGNED_TyPES.UNSIGNED_INTBGER; 
N0_PASSIVE_TASK_1D : constant PASSIVE_TASK_ID 0; 

type PROGRAM_ID is new t]NSiaiEDjryPES.l]NSXGMED_lNTBGER; 
NO_PROGRAM_ID : constant PROGRAM_ID 0; 

type LONG AIX)RESS is 
I^CXM) 

Station : UNSIC3^_TyPES.UNSIGNED_IinTX>ER; 
addr : AIX}RESS; 

END RECORD; 

NO LONG ADDR : constant LONG AIX>RESS (0, 0); 


pragma BUILr_IN(MAKE__LONG ADDRESS); 
pragma BUILT_IN(LOCALIZE)! 
pragma BUILT_1N(STAT10N_OP); 

pragma BUILT_IN(RETURN_AIX)RESS); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the tbrget 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of conqoonents; an explicit record representation 


C-9 






APPENDIX F OP THE Ada STANDARD 


clause must be given to specify the packing of the con- 
ponents. A size clause applied to a record type %idll cause 
packing of components only when the component type is a 
discrete type. An error will be issxied if there is insuffi¬ 
cient space allocated. Hie SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variadile address elaboration ordering requirements 
prohibit inititalization of a variables vdiich have address 
clauses. Hie specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is hanging the interrupt. Hie task must be executing 
either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). TMs is not a 
restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
nets are not queued (see the last sentence of Ada RH 
13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative and an accept; 
alternative for an interrupt entry (see Ada RN 13.5.1(3)). ' 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. ^ 

Internets ai3 not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
interrupt vector number. For passive ISRs, the nnn of the 
passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 


C-10 





APPENDIX F OF THE Ada STANDARD 


The ADNtESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CGOE provides 
an assembly language interface for the target machine. It 
provides the necessary record ty|^(s) needed in the code 
statement, an enumeration type of all the opcode onetimonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general synteuc of a machine code statement is as fol¬ 
lows: 


OCDE_n'( opcode, operand {, operand) )t 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable number of operands. 
The operands are listed within a subaggregate. The format 
is as follows: 

OCX)E_N'( opcode, (operand (, operand)) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

O0DE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be' 
an object, attribute, or a rename). 

An operand can only be an entity defined in HACHINEJCODE* or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHlNE_aX)E must be static expressions, string literals, or 
the functions defined in MACHINEjCODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is svqpP^rted. 

6. Conventions for Implementation-generated Names 


C-11 




APPENDIX f OF THE Ada STANDARD 


There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (expressed in STORAGEJUNITS) v^en the size 
of ELEMENT_TYPE exceeds that value. For exanple for uncon¬ 
strained arrays such as string vhere ELEMENTJTYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM emd can be changed by a program before 
instantiating DIRECT_I0 to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 
X 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in STORAGEJUNITS) vhen the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string vhere ELEMENTJTYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be chzunged by a 
program beTore instantiating INTEGER_lO to provide an upper 
limit on the record size. SBQUENTIAL_IO inqposes no limit on 
MAX_REC_SIZE. 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up tio or 
even near these limits are available to every program. 

11.1. Line Length 

The inple.i«ntation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGEJUNITS. The maximum size of a statically 


C-12 






APPENDIX F OF THE Ada STANDARD 


sized record type is 4,000,000 x STORAGEJUNITS . A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGEJSIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 ST0RAGE_UNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
1^ T'ST0RA£3E_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is jm absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 




C-13 






