o 

CN 

CD 

9 

ct 


LU 

cr 

cr 

o 


o 

Q 

cr 

LU 



us Army Corps 
of Engineers® 

Engineer Research and 
Development Center 


Object-Oriented Approach to Manipulating 
Acoustic and Seismic Spectra 

D. Keith Wilson and Jacob I. Torrey December 2006 


O 

^ CO 

o o 

(D 

CO 

0 tXO 

DC C 


(0 


0 

0 


tdO -cr. 


0 

DC 


XXD 

LU 


B -o 

o c 

O CO 


Approved for public release; distribution is unlimited. 






ERDC/CRREL TR-06-20 
December 2006 


Object-Oriented Approach to Manipulating 
Acoustic and Seismic Spectra 


D. Keith Wilson and Jacob I. Torrey 

Cold Regions Research and Engineering Laboratory 
U.S. Army Engineer Research and Development Center 
72 Lyme Road 
Hanover, NH 03755-1290 


Approved for public release; distribution is unlimited. 


Prepared for U.S. Army Corps of Engineers 



ERDC/CRREL TR-06-20 


ii 


Abstract; The software design and underlying mathematics for an object- 
oriented, Java-based approach to creating and manipulating frequency- 
dependent functions, such as power spectral densities, is described. The 
frequency dependence is modeled as a series of power-law bands, which 
provides a high degree of flexibility and efficiency for representing 
common spectral models such as evenly spaced bands, octave bands, 
narrow spectral lines, broadband noise, and power laws. Conversions 
between the various spectral models are easily performed. Many common 
operations on spectra, such as filtering, incoherent addition, application of 
transfer functions, and calculation of signal-to-noise ratios, can be 
conveniently applied. While this capability was developed to serve as a 
basis for future development of tactical decision aids and mission planning 
tools for battlefield seismics and acoustics, many other applications 
involving spectra are possible. 


DISCLAIMER: The contents of this report are not to be used for advertising, publication, or promotional purposes. 
Citation of trade names does not constitute an official endorsement or approval of the use of such commercial products. 
All product names and trademarks cited are the property of their respective owners. The findings of this report are not to 
be construed as an official Department of the Army position unless so designated by other authorized documents. 

DESTROY THIS REPORT WHEN NO LONGER NEEDED. DO NOT RETURN IT TO THE ORIGINATOR. 




ERDC/CRRELTR-06-20 Mi 


Contents 

Preface.vi 

1 Introduction.1 

2 Background and Definitions.4 

3 Spectral Representation Scheme and Java Implementation.7 

a. Banded Power-Law Spectrum.7 

b. Representing Common Spectral Models.8 

White-noise bands .8 

Spectral lines .8 

Power-law spectra .9 

Proportional bands .9 

Discrete Fourier transform (DFT) .9 

Broadband white noise .10 

Broadband pink noise .10 

Transfer functions .10 

Dual power-law spectrum .11 

c. Java Implementation.12 

d. Constructors.14 

e. Representing Frequency Bounds.14 

f. Lower-Level Get/Set Methods.15 

g. Clones, Equality Tests, and String Conversions.16 

h. Evaluating the Spectrum.17 

4 Signal Power and Moment Methods.18 

a. Higher-Level Set Methods.18 

b. Higher-Level Get Methods.21 

c. Decibel Conversions.24 

5 Filtering and Frequency Bands.25 

a. Removing Bands and Eliminating Overlap.25 

b. Low-, High-, Bandpass, and Stopband Filtering.25 

c. Converting Frequency Bands.27 

6 Multi-Spectra Operations.29 

a. Developing Common Frequency Bounds.29 

b. Adding Spectra Incoherently.31 

c. Dividing Spectra.32 

d. Multiplying Spectra.32 

7 Conclusion.33 






































ERDC/CRRELTR-06-20 iv 

References.34 

Report Documentation Page.35 





ERDC/CRREL TR-06-20 


V 


Figures 

Figure 1. Procedure for the frequency-domain caicuiation of the signai-to-noise ratio 

received by a seismic or acoustic sensor .1 

Figure 2. Exampie of the banded, power-iaw spectrai representation .7 

Figure 3. liiustration of approximating the duai power-iaw spectrum with a set of bands 
described by singie power iaws.12 

Figure 4. Determination of the unique bounding frequencies from a pair of Spec objects.30 







ERDC/CRREL TR-06-20 


vi 


Preface 

This report was prepared by D. Keith Wilson and Jacob 1. Torrey, 

Signature Physics Branch, Cold Regions Research and Engineering 
Laboratory (CRREL), U.S. Army Engineer Research and Development 
Center (ERDC), Hanover, NH. 

This development was funded in part by the ERDC Battlefield Terrain Rea¬ 
soning and Awareness AT42 work package. The authors also thank David 
Marlin of the Army Research Laboratory and Sean Mackay and Marah 
McClelland of Atmospheric and Environmental Research, Inc., for their 
comments and programming advice. 

The report was prepared under the general supervision of Dr. Justin 
Berman, Acting Chief, Civil and Infrastructure Engineering Branch; Dr. 
Lance Hansen, Deputy Director; and Dr. Robert Davis, Director, CRREL. 

The Commander and Executive Director of ERDC is COL Richard B. 
Jenkins. The Director is Dr. James R. Houston. 



ERDC/CRREL TR-06-20 


1 


1 Introduction 

Because of their low cost, low power consumption, wide field of regard, 
and other factors, acoustic and seismic sensors are becoming increasingly 
common for battlefield applications. However, their performance depends 
strongly on environmental transmission effects and background noise, 
both of which depend on the acoustic or seismic frequency. The energy 
emitted by acoustic and seismic sources also usually has a strong fre¬ 
quency dependence. It is thus typical to model the performance of the 
sensors with a frequency-domain calculation, in which the source emis¬ 
sion, transmission, and noise are calculated at a number of frequencies 
independently. 

The general flow of a frequency-domain, sensor performance calculation is 
illustrated in Figure i. Models or field data are used to estimate the fre¬ 
quency spectra of the source (target) and the environmental background 
noise. The source spectrum is multiplied by a transfer function representing 
the environmental transmission effect, and then by a transfer function for 
the sensor response, to obtain the source signal spectrum as it appears to 
the sensor. The environmental background noise is multiplied by the 
transfer function for the sensor response and then added to the sensor self¬ 
noise spectrum to obtain the total noise spectrum at the sensor. Lastly, the 
apparent signal spectrum is divided by the noise spectrum to obtain a 
frequency-dependent signal-to-noise ratio, from which metrics of interest 
such as the probabilities of detection and false alarm can be calculated. 



Figure 1. Procedure for the frequency-domain caicuiation of the signai-to-noise ratio received 
by a seismic or acoustic sensor. 



















ERDC/CRREL TR-06-20 


2 


The operations involved in Figure i include representing spectra (such as 
the source and environmental noise), multiplying by frequency-dependent 
transfer functions, adding spectra together, and dividing spectra. Although 
these operations are not all that complicated in principle, in practice they 
can be challenging to implement in a consistent and computationally effi¬ 
cient manner, due to the different methods for representing frequency 
bands in spectra and transfer functions. An example of a software tool that 
performs these operations is the Sensor Performance Evaluator for Battle¬ 
field Environments (SPEBE) (Wilson et al. 2002, Wilson 2006), which 
models the performance of battlefield acoustic and seismic sensors. Typi¬ 
cally, the source spectrum is described most conveniently as a set of 
harmonically related bands, whereas the noise background is described 
with a broadband or octave band representation. Due to their computa¬ 
tional intensiveness, the transmission effects are calculated at a fixed set of 
frequencies that do not usually align with the source and noise spectra. 

The sensor response and self noise are described by their own frequency- 
dependent behaviors, which usually are broadband or have transitions 
between two or more characteristics. By the time the signal-to-noise ratio 
is calculated, many conversions and operations involving different 
frequency-domain representations have been performed. 

This report describes the formulation of new object-oriented software 
tools that are designed to conveniently, consistently, and efficiently 
manipulate spectral information. The software is implemented in the Java 
language because of its support for object-oriented programming and 
because it is the main language for the Battlefield Terrain Reasoning and 
Awareness (BTRA) project, which includes acoustic/seismic sensor 
performance prediction as one of its goals. It is also hoped that the new 
Java code can serve as a basis for future versions of SPEBE and for 
developing an acoustic/seismic computational engine to support other 
Army modeling and simulation efforts. Although acoustics and seismics 
are the explicit focus of this report, the approach to manipulating spectra 
and frequency-dependent functions is general enough to be useful in many 
other applications. 

The new tools differ from currently available spectral processing packages 
in that they have been designed to easily accommodate spectral data of all 
kinds, including broadband noise, power laws, narrow harmonic lines, 
data stored in evenly spaced frequency bins, and octave-band data. Ron- 



ERDC/CRREL TR-06-20 


3 


tines (methods) provide conversion between the various representations 
and manipulations including addition, multiplication, and division of the 
frequency-dependent functions. 

This report is not intended as a replacement for the customary Java-style 
software documentation, known as JavaDocs. The purpose is rather to 
describe the conceptual approach and mathematics underlying the new 
Java code. It is expected that programmers will still refer to the JavaDocs 
for detailed information on the Java methods and data fields. 

The next section of this report. Section 2, provides some general back¬ 
ground and definitions related to spectra. This background will be impor¬ 
tant in describing the operation of the code. Next, in Section 3, the basic 
framework for manipulating spectra (fields, constructors, etc.) is dis¬ 
cussed. Section 4 describes higher-level methods that primarily serve the 
purpose of setting and retrieving the frequency-dependent signal power. 
Methods for filtering spectra and selectively removing bands are described 
in Section 5. Lastly, in Section 6, we describe methods that operate on 
multiple spectra, including addition, multiplication, and division. 



ERDC/CRREL TR-06-20 


4 


2 Background and Definitions 


A spectrum describes the frequency content of a time-varying signal. Let 
us designate the time-varying signal as x{t), where t is time. Suppose that 
x{t) is passed through a perfect bandpass filter that removes all but the sig¬ 
nal variations between a lower frequency/and an upper frequency/-!- A/ 
where A/is the analysis bandwidth of the filter. We designate the power 
that remains in the signal as E(f,f+ Af). The (single-sided) autospectral 
density for the signal power is then defined as 


which implies 


S(/)= lim 

^ ' A/^O 


E{f,f + Af) 
A/ 


E(/,/ + A/) = j^"^-^S(/')d/'. 


( 1 ) 


The total power in the signal is found by integrating over all possible 
frequencies: 


E(o,«) = j”s(/')d/'. (2) 

For the purposes of this report, power generically refers to a quantity pro¬ 
portional to the squared amplitude of the signal. In acoustics, the sensors 
usually measure the pressure of a sound wave, in which case the amplitude 
is in Pa and the so-called power in Pa^. In seismics, a geophone produces 
the velocity of a ground vibration, which has units ms“i and the so-called 
power has units m^s-^. In either case, multiplication by other constant fac¬ 
tors converts the squared-amplitude units to true power. 

We define the mth moment of the spectral density, between two frequen¬ 
cies/ and/, as 


Je 


( 3 ) 



ERDC/CRREL TR-06-20 


5 


Note from (i) that = E{ff,fu). 

In many cases the spectral density is well described hy a. power-law 
relationship.* Specifically, S(f) is described by an equation 


S{f)=Afp, (4) 

where A is a spectral coefficient and p the power-law exponent. This repre¬ 
sentation is useful for describing wideband white noise (p = o), pink noise 
(p = -i), red noise (p = -2), and many other physical processes. For exam¬ 
ple, a turbulence spectrum usually has a frequency range over which p = - 
5/3. Substituting (4) into (3) and integrating, we find for the moments 

^log(/„//^), p + m = -i 

It is very common, particularly in acoustics, to represent a spectrum in 
proportional bands. In proportional bands, the ratio of the upper fre¬ 
quency bound/u to the lower frequency bound/^ is constant. For octave 
bands, fu jfi = 2. For 1/3-octave bands, fu Ife = 2h3. in general,/^ jfi = 2ha, 
for i/a-octave bands. The geometric center frequency of the band is 
defined as/g = ^Jf^, from which it follows that fg = 2i/2ay^ = 2-i/2ay^_ The 
bandwidth (also called the interval) of the i/a-octave, Af=fu -fi, is there¬ 
fore (2i/2a _ 2-i/2a) = (21/a - 1)/^ = (1 - 2i/a)/u. lu acoustics, a standard 

set of analysis bands has been established. The standard geometric center 
frequencies for audible-range, octave-band analyses are 16, 31.5,125, 250, 
500,1000, 2000, 4000, and 8000 Hz. 

It is also common practice in acoustics to specify signal loudness in deci¬ 
bels (dB). Such quantities are referred to as levels. The sound-pressure 
level is related to E(f(,fu) according to 




The word power as used here in power-law refers to an exponent in a mathematical equation. This 
should not be confused with the usage in the previous paragraph, where power referred to power in 
a signal. 



ERDC/CRREL TR-06-20 


6 


E{hJu) 

Pr 


( 6 ) 


where Af=fu -fi is an analysis bandwidth andpr (20 |aPa for outdoor 
acoustics) is a standard reference pressure. The analysis bandwidth may 
be a unit band (1 Hz), or it may be an octave band or fraction thereof. 

So far the discussion has focused on autospectral densities. Autospectral 
densities are equivalent to the Fourier transform of the correlation func¬ 
tion between a signal, x(f), and the same signal advanced in time, x{t + t) 
(e.g., Bendat and Piersol 1986). One can also define a cross-spectral den¬ 
sity, Sxy(f), which is the Fourier transform of the correlation function 
between a signal, x(f), and a different signal advanced in time, y{t + t). The 
cross-spectral density, in general, is a complex number since it includes 
information on the relative phases of the signals as well as power. With the 
extension to complex functions, most of the previous discussion can apply 
to cross-spectral densities as well. 



ERDC/CRREL TR-06-20 


7 


3 Spectral Representation Scheme and 
Java Implementation 

a. Banded Power-Law Spectrum 

The original ABFA program (Wilson and Szeto 2000), a tactical decision 
aid for battlefield acoustics, represented the spectral densities as the sum 
of the spectral densities in a number of discrete, non-overlapping bands. 
Each band was described by a power-law relationship. Mathematically, 

s(/) = Zs„(/), (7) 

72=1 

where 


S = ft,n^f<fu,n 

" 1 o, elsewhere. 


( 8 ) 


In these equations,/^,n is the lower frequency bound,/u,n is the upper fre¬ 
quency bound. An is the spectral coefficient, andpn is the power-law expo¬ 
nent. The subscript n is the index of the frequency band. To accommodate 
cross-spectral densities and other complex-valued, frequency-dependent 
functions, phase information is also included in the representation. A sin¬ 
gle phase angle (pn is stored for each band, which is interpreted as being 
constant throughout the band. 


When the power-law bands are plotted on logarithmic axes, they appear as 
linear segments. An illustration is shown in Figure 2. 


CD 

CO 

c 

0) 

TO 

o 

CL 

00 



Figure 2. Example of the banded, power-law spectral representation. The frequency and 
power axes are shown logarithmically. 




ERDC/CRREL TR-06-20 


8 


b. Representing Common Spectral Models 

Many spectral models familiar from signal processing can be readily repre¬ 
sented with the banded power-law scheme described in the previous sec¬ 
tion. Here we show how the variables (fi,n,fu,n, An, pn, (pn), n = i, ... ,N can 
be set to obtain various common spectral models. A recurring theme is 
that it is often more convenient to specify the power in a band (relative to 
an analysis bandwidth of either Afy =fu,n -fe,n, a unit bandwidth, or a frac¬ 
tional octave band) than the spectral coefficients An. Therefore, it is desir¬ 
able that the software implement conversions between power and the 
spectral coefficients. Such methods will be described later. For now, we 
assume that the conversions are available. 


White-noise bands 

In many situations we may regard the spectral density as a set of finite- 
width bands, where each band contains white (frequency-independent) 
noise. Mathematically, this situation is described by the equation 


N 


s(/) = Sc„n 


fu,n fi,n 
Afn 


( 9 ) 


where N is the number of bands, Cn is the spectral density of the particular 
band, and H is i for arguments between o and i and is o otherwise. To 
store such a spectrum using the representation described in the previous 
section, the power-law exponents pn are all set to zero. The An are equiva¬ 
lent to the Cn. 


Spectrai iines 

This is a special situation where the power spectral density contains power 
at a set of infinitely narrow bands. Mathematically, 

S(/) = f5„8(/„) (10) 

n=i 


where Bn is the energy in the spectral line, 5 () is the unit impulse, and fn is 
the frequency of the line. To represent spectral lines, we could set the/^,n = 
fn - 5//2 and/u,n =fn + 5//2, where 5 /is very small. The signal power in 
each band, E(ff,n,fu,n) = Bn, is most conveniently specified (rather than the 



ERDC/CRREL TR-06-20 


9 


spectral coefficients An), since it is independent of the somewhat arbitrary 
width of the bands. The power-law exponents are immaterial and there¬ 
fore can all be set to zero. 

Power-law spectra 

This model is described directly by Eqs. (7) and (8), which extend (4) to 
the case of multiple power-law bands. The/^,n and/ii,n are set according to 
the boundaries between the bands. The spectral coefficients An and slopes 
Pn are known directly. 

Proportional bands 

Presuming the signal power has been analyzed into the proportional 
bands, we would set the/^,71 and fu,n to the corresponding lower and upper 
frequencies of the proportional bands. Typically, when an analysis into 
proportional bands is performed, there is no information on the variation 
of the spectrum within the bands and therefore pn is unknown. There may 
be a preference to set the pn to o to correspond to white noise in the bands, 
or to -1 for pink noise. The power in each band is normally specified, 
which can be converted to find the An. 

Discrete Fourier transform (DFT) 

Spectra are normally calculated on computers using DFTs. The DFT trans¬ 
forms a discretized, finite-length time signal to yield the complex Fourier 
coefficients 


n = i,2,...,Ar (11) 

where theXn represent the Fourier spectrum at the discrete frequencies/n 
= nA/^ n = o,..., N-i. The power spectral density is proportional to the 
square of the absolute values of the complex coefficients: 

S{fn)^\X{fnf . 

The constant of proportionality depends on conventions that are used to 
define the DFT. In this report, we assume that the DFT convention pro¬ 
duces a variance spectrum such that 



ERDC/CRREL TR-06-20 


10 


n=i 

Regarding the X(fn) as constant between fn and/n + A/, we then have 

S(/„) = |X(/„)|"/A/. (12) 

In the case of DFT data, the signal has been transformed into bands of a 
fixed width A/. The lower frequency bounds are/^,n = (n - i)Af, n = i,N, 
and the upper frequency bounds SLrefu,n = nAf. Since no information is 
available on the variation of the spectral density within each band, we 
assume constant bands and set pn = o. This implies = \X (/„ )| / A/ . The 
phase angles are zero for autospectra. For cross spectra, they would be 
(])„ = Z X* (/^ „ )f „) , where the asterisk indicates complex conjugation. 

If desired, an ordinary DFT could also be stored directly. In this case, the 
An would simply be X(fn), and the phase angles (])„ = ZX „). However, in 
this report we focus on spectral densities. 

Broadband white noise 

For broadband white noise (noise with a power spectral density that is 
independent of frequency over a wide frequency range), one would nor¬ 
mally specify the signal power per unit bandwidth. The fi,n and fu,n are the 
lower and upper frequencies of the white noise band. 

Broadband pink noise 

For broadband pink noise (noise with a power spectral density propor¬ 
tional tofyi over a wide frequency range), one would normally specify the 
signal power per octave or 1/3 octave. The pn are set to -1. Note that the 
frequency range of the pink noise could be longer or shorter than an octave 
(or 1/3 octave), even though the power is specified for that analysis band¬ 
width. 

Transfer functions 

A transfer function refers to the ratio H(f) = Sxy(f)/Sxx(f), where Sxx(f) is 
the autospectral density of the input signal to a system x(f) and Sxy(f) is the 
cross-spectral density between the output y{t) and the input. Hence a 



ERDC/CRREL TR-06-20 


11 


transfer function is not a power spectral density, but rather just a 
frequency-dependent function. The transfer function can be partitioned 
into segments that are approximated by the functional form Eqs. (7) and 
(8) as desired. 


Dual power-law spectrum 

Typically, a power-law representation applies only to a range of frequen¬ 
cies. To represent a spectrum over a broad range of frequencies, a more 
complex representation must be used. For example, the following spec¬ 
trum, originating with von Karman (1948), is often used for turbulence: 


Hf) 



(13) 


where is the variance of the process and t a time scale. This spectrum is 
an example of the general form 


«(/)= 



(14) 


in which A, B, p, and q are constants. For low frequencies, Bf<< 1, this 
reduces to the power law S(f) - Afp. For high frequencies, Bf>>i, it hap¬ 
pens to also reduce to a power law: 

(15) 

A transition between the two power laws occurs at intermediate frequen¬ 
cies (Bf^ 1). To represent a spectrum such as (14) using Eqs. (7) and (8), it 
must be broken down into some finite number of bands, each of which can 
be approximated as a power law. Clearly, it is reasonable to represent fre¬ 
quencies Bf «i with one such band and Bf»i with a second. The inter¬ 
mediate frequency region should be partitioned into a sufficient number of 
bands that the change in slope is well approximated. An example is shown 
in Fig. 3. 



ERDC/CRREL TR-06-20 


12 



Figure 3. Illustration of approximating the dual power-law spectrum with a set of bands 
described by single power laws. This case has A = 1, p = 2, b = 0.01, and = 5/3. The dual¬ 
power law is shown with the dashed line, and the bands for the approximation are solid lines. 


c. Java Implementation 

Having established that the power-law representation has sufficient 
flexibility to represent a wide variety of spectral models and frequency- 
dependent functions, we turn to the issue of implementation in software. 
This report describes such an implementation as a class in the Java pro¬ 
gramming language. A class represents the variables and methods (func¬ 
tions, procedures, or routines in the terminology of other programming 
languages) that are associated with an objeet (in this case the spectral 
representation).* The variables are structured in a manner similar to the 


*Since this report describes a Java-language software implementation, it is rather difficult to avoid 
the jargon associated with that language and object-oriented programming in general. We have 
endeavored to define the terms as they occur, although some background in Java would certainly be 
helpful to understanding parts of the report. 













ERDC/CRREL TR-06-20 


13 


one previously used in the Matlab-based ABFA software, but with some 
simplifications and improvements in flexibility. The following fields (vari¬ 
ables) are stored: 

• numBands: the number of frequency bands N. 

• lowFreq: the lower frequency bounds/^,n. 

• highFreq: the upper frequency bounds/u^n. 

• specCoef: the coefficients An. 

• specSlope: the power-law exponents pn. 

• phaz: the signal phases cpn. 

• dBref: the reference for conversions between decibels and spectral 
units. 

The first of these is an integer; the middle five are AT x i double-precision 
floating-point arrays; the last is a double-precision floating-point value. 

The phaz field was not present in the original ABFA representation. It has 
been added to accommodate cross spectra, coherent signals, and transfer 
functions. A field called OctaveBand, which contained information on the 
analysis bandwidth, has been removed, as that functionality will now be 
handled through the software interface. Also, a field called Active, which 
contained Boolean values representing whether the band was activated 
(turned on for calculations) has been removed. (Bands are now assumed to 
always be active.) The loudness field [which normally stored E(f(,n,fu,n) in 
dB] has been replaced by specCoef for simplicity. 

In the remainder of this report, we refer to the Java class that defines these 
seven fields and the methods for manipulating them as the BandedPower- 
LawSpec class. The BandedPowerLawSpec class is used to create 
(instantiate) and manipulate BandedPowerLawSpec objects. 

At the time of writing of this report, the BandedPowerLawSpec class is 
part of the package mil.army.usace.erdc.btraacoustics, which also includes 



ERDC/CRREL TR-06-20 


14 


methods for reading signatures in HDF5 format, representing weighting 
curves for human audibility, and for calculating wind noise produced by 
atmospheric turbulence. 

d. Constructors 

In the Java programming language, a constructor creates and initializes 
new objects. Two BandedPowerLawSpec class constructors are available. 
One of these takes no argument and creates an object with no bands (num- 
Bands = o). The second takes a single integer argument whose value is N, 
and creates an object with ATbands. All five of the field arrays, lowFreq, 
highFreq, specCoef, specSlope, and phaz, are allocated and filled with 
zeros. Both constructor methods set dBref to its default value, 1. 

Once a BandedPowerLawSpec object has been constructed, the fields must 
be set to their desired values. Shortly we will discuss a family of low-level 
methods that accomplish this task. However, it is envisioned that the 
approach of invoking the constructor followed by calls to the low-level 
methods will normally not be used directly. Instead, the BandedPower¬ 
LawSpec class provides many high-level methods for creating and intializ- 
ing BandedPowerLawSpec objects. Most of the high-level methods accept 
the signal power over a convenient bandwidth to determine the power-law 
parameters. It is normally easier and less error prone to use these meth¬ 
ods. They are described in more detail in Section 4. 

e. Representing Frequency Bounds 

The BandedPowerLawSpec class allows the frequency bounds/^,n and/u,n 
to be specified in three different formats. The first, and most obvious, for¬ 
mat is direct specification as separate, AT-element arrays. 

The second format is a 2 x AT array. For example, suppose the variable 
f reqLims is such a 2 x AT array, f reqLims [ 0 ] would contain the lower 
frequency bounds and f reqLims [ 1 ] the upper frequency bounds. The 
main utility of this format is that it allows a Java method, which is limited 
to producing a single output object, to return frequency bounds as its out¬ 
put. 

The third format is a single (AT + i)-element array. The lower frequency 
bounds are the first AT elements of this array; the upper frequency bounds 



ERDC/CRREL TR-06-20 


15 


are the last N elements. Hence fi,n+i =fu,n. This format is more compact 
than the other two and again involves only a single object. However, it 
applies only to spectra that have contiguous bands (i.e., no gaps or over¬ 
laps between the bands). 

f. Lower-Level Get/Set Methods 

The lower-level set methods provide (essentially) direct specification of the 
lowFreq, highFreq, specCoef, specSlope, phaz, and dBref fields. The lower- 
level get methods retrieve the values of these fields. 

The lower-level set methods are setFreqBounds, setSpecCoef, setSpec- 
Slope, setPhase, and setDBref. The first of these accepts the frequency 
bounds in any of the three formats mentioned in the previous section. The 
next three accept the spectral coefficient, slope, and phase, respectively, as 
AT X 1 arrays. These methods all test whether the specified inputs are 
consistent with the size that was specified when the BandedPowerLawSpec 
was constructed. An error message is returned if not. 

Note that the numBands field can only be set at the time of construction 
and cannot be changed by the user, since that would increase the likeli¬ 
hood of array indexing errors. 

To illustrate the use of the constructor and low-level set methods, suppose 
we wish to construct a power-law spectrum that has An = 6.2 andpn = -5/3 
between the frequencies of 50 and 1000 Hz. Since only a single band is 
involved, we first construct the object with 

BandedPowerLawSpec specO = new 

BandedPowerLawSpec(1) ; 

Next, we create double-precision Java arrays fl={50}, fu={iooo}, sc={6.2}, 
and ss={-5/3}, which represent the lower frequency bounds, upper fre¬ 
quency bounds, spectral coefficients, and spectral slopes, respectively. For 
example, 

double[] fl = {50}; 


Then, we call the set methods 



ERDC/CRREL TR-06-20 


16 


specO.setFreqBounds(f1, fu); 
specO.setSpecCoef(sc); 
specO.setSpecSlope(ss); 

The desired BandedPowerLawSpec object has now been created. 

As mentioned earlier, it is expected that the higher-level set methods will 
normally be used instead of the lower-level methods described here. The 
exceptions are setPhase and setDBref. The higher-level set methods do not 
alter the values of the phaz and dBref fields. If non-zero phases are 
desired, setPhase must be invoked. Similarly, if a decibel reference other 
than the default value of i is desired, setDBref must be invoked. (Conver¬ 
sions to and from decibels will be discussed later in this report.) 

The lower-level get methods, which are self-explanatory, are getLowFreq, 
getHighFreq, getSpecCoef, getSpecSlope, getPhase, and getDBref. 

g. Clones, Equality Tests, and String Conversions 

The BandedPowerLawSpec class overrides the Java Object class methods 
clone, equals, and toString. It also provides additional functionality for 
comparing and copying BandedPowerLawSpec objects. 

In Java, a clone refers to an exact copy of an object. (Simply setting one 
object equal to another creates two references to the same object, rather 
than a copy.) The BandedPowerLawSpec class provides its own clone 
method. It also provides a method called copy, which is the same as clone 
but recasts the Java object as a BandedPowerLawSpec object. Both clone 
and copy create a new object from the current instance. For example, if 
speci is a previously instantiated BandedPowerLawSpec object, the 
statement spec2=specl.copy() makes a copy and places it in the 
BandedPowerLawSpec class object spec2. The method copyRev reverses this 
pattern by copying into the current instantiation: sped . copyRev (spec2) 
makes a copy of spec2 and places it in speci. (Both speci and spec2 must 
first be instantiated to invoke copyRev.) 

The BandedPowerLawSpec class also provides a method called copyBand, 
which copies a single band from one BandedPowerLawSpec object to 



ERDC/CRREL TR-06-20 


17 


another. The BandedPowerLawSpec objects must already be instantiated 
and have arrays allocated to hold the data. The user specifies the indices of 
the band in each object. 

Three varieties of equality tests are provided by the BandedPowerLawSpec 
class. One is a conventional Java equals test for the BandedPowerLawSpec 
class, which tests whether all of the fields in two objects are identical. A 
second, called equalsBand, tests whether a particular band in one Banded¬ 
PowerLawSpec object is equal to a particular band in another. The user 
specifies the indices of the bands to be tested. Lastly, a method called 
equalsFreqBounds is provided to test whether all of the frequency bounds 
(the lowFreq and highFreq fields) are identical between two objects. 

The contents of a BandedPowerLawSpec object may be displayed with the 
toString method. For example, 

System.out.println(sped.toString()); 

displays the BandedPowerLawSpec object. Each band appears on a sepa¬ 
rate line. The fields are printed in the following order: lowFreq, highFreq, 
specCoef, specSlope, and phaz. 

h. Evaluating the Spectrum 

The method evalSpec takes as input an array of frequencies, with an arbi¬ 
trary length M, and returns the values of the spectrum at those frequen¬ 
cies. The output is a 2 X M array, where the first row represents the magni¬ 
tude of the spectrum and the second its phase. 



ERDC/CRREL TR-06-20 


18 


4 Signal Power and Moment Methods 

This section describes methods for calculating and setting the signal power 
and moments of BandedPowerLawSpec objects. These are termed the 
higher-level get and set methods. 

a. Higher-Level Set Methods 

In many applications it is more convenient to specify the signal power in 
an analysis band than the coefficients An. The setSpecPower method pro¬ 
vides this capability. It creates a new BandedPowerLawSpec object with 
the desired properties. In this sense, it replaces both the constructor and 
lower-level set functions.* 

The main form of setSpecPower takes the following as input: (i) a scalar 
BW that describes the analysis bandwidth for the signal powers, (2) the 
frequency boundsfy,n and/ii,n, (3) an array specifying the signal powers 
in each band, and (4) an array specifying the center frequencies fc,n in each 
band. 

A form is also available that omits the explicit specification of the center 
frequencies, in which case the center frequencies are set equal to the aver¬ 
age of the lower and upper bounds. The following explains how BW affects 
the mapping of C,n and/c,n into An andpn: 

• When BW = o, an error is issued. BW is reset to 1 (unit bandwidth), 
and the C,n are interpreted as power in constant analysis bands, as 
described in the following. 

• When BW > o but is finite in value, its value is interpreted as the power 
in a constant analysis bandwidth Afsach that l^n = E (fi,n,f^,n + A/). The 
input/c,n have no effect and the pn are all set to zero. In this case, E (f(,n, 


*Note that setSpecPower and the other higher-level set methods descrihed in this section extend 
the functionality normally provided by a Java set method, in that they also construct the Spec 
object. This extension is simply a matter of convenience; it is not anticipated that users will have a 
need to separately construct the objects and set their properties. 



ERDC/CRREL TR-06-20 


19 


fi,n + Af) = An Afis independent of frequency. Hence, the contain the 
power in a fixed analysis bandwidth Af. 

• When BW < o, its value is used to calculate an analysis bandwidth for 
proportional bands according to the formula A/= (2l^w|/2 - 

Thus, a value BW = -i represents octave bands, whereas BW = -1/3 
represents 1/3-octave bands. The values C,n are interpreted as 
^ 2\Bw\/2j^ and the pn are all set to -1. In this case, 

p; (2~|Bw|/2y^ 2lBw|/2y) = An|BW|log2 is independent of frequency. Hence 
C,n describes the power per octave (or other fractional octave) band. The 
values of the/c,n have no effect. 

• When BW = co,C,n = E (ff,n,fu,n), the total energy in the signal band. The 
values of An and c are determined from the C,n and the/c.n. 

Let us consider some examples. Suppose we wish to construct a white 
noise spectrum between o and 100 Hz, with a power of 3.0 relative to i-Hz 
bands. This can be accomplished with the following command, where 
fl={o.o}, fu={ioo.o}, and powr={3.o}: 

BandedPowerLawSpec specl=setSpecPower(1.0,f1,fu, 

powr); 

Here sped is the new BandedPowerLawSpec object. Pink noise, extend¬ 
ing from 10 to 1000 Hz, and with a power of 3.0 per 1/3-octave band, can 
be created with 

BandedPowerLawSpec spec2=setSpecPower(-1.0/3.0, 

f1,fu,powr); 

where spec2 is the new BandedPowerLawSpec object, fl={io.o}, 
fu={iooo.o}, and powr={3.o}. A spectrum with three narrow (0.2-Hz) 
lines, centered at 20,40, and 60 Hz, and having a power of 1.0, 3.0, and 
2.0, respectively, can be created as follows: 

BandedPowerLawSpec spec3=setSpecPower(Double. 

POSITIVE INFINITY,fl,fu,powr); 



ERDC/CRREL TR-06-20 


20 


where specs is the new BandedPowerLawSpec object, fl={i9.9,39.9,59.9}, 
fu={20.1,40.1,60.1}, and powr={i.o,3.0,2.0}. Replacing the first argument 
(BW) by 0.2 would have accomplished the same purpose. Lastly, consider 
the creation of octave band data with geometric center frequencies 
fg={20.0,40.0,80.0} and power in the bands of powr={i.o,3.o,2.o}. The 
lower frequency bounds fl are set to fg divided by the square root of 2, and 
the upper frequency bounds fu are fg times the square root of 2. The com¬ 
mand 

BandedPowerLawSpec spec4=setSpecPower(Double. 

POSITIVE_INFINITY,fl,fu,powr); 

creates the desired object with slopes pn = o. Alternatively, 

BandedPowerLawSpec spec4=setSpecPower(-1.0,fl,fu, 

powr); 

could be used to create bands with slopes pn = -1. BW = co and BW = -1 
give the same result in this case, since the frequency bands are octave 
bands. 

The higher-level set methods setSpecCoefAndSlope and setSpecEndPoints 
provide alternatives to specifying signal power with the setSpecPower 
method. The method setSpecCoefAndSlope directly takes input arrays 
specifying the lower frequency bounds, upper frequency bounds, spectral 
coefficients, and (optionally) spectral slopes. Its main utility is for creating 
power-law spectral models. For example, for the situation described in 
Section 3f, once the arrays fl, fu, sc, and ss have been created, we could set 
up the object in one step as 

BandedPowerLawSpec specO=setSpecCoefAndSlope(fl,fu, 

s c, s s) ; 

The method setSpecEndPoints takes as input an (AT + 1) x 1 array of 
contiguous bounding frequencies and an (AT + 1) x 1 array of powers at 
these frequencies. The values of An andpn are determined by matching the 
power laws in each band at the end points. On a log-log plot, this can be 
interpreted as simply drawing linear segments connecting the specified 
frequencies and powers. 



ERDC/CRREL TR-06-20 


21 


Numerous other higher-level set methods are available that create 
BandedPowerLawSpec objects by invoking setSpecPower, 
setSpecCoefA.ndSlope, or setSpecEndPoints. They are associated with 
many of the common spectral models described in Section 3b. White 
noise, pink noise, fractional octave bands, standard octave bands, stan¬ 
dard one-third octave bands, evenly spaced bands, and dual-power law 
spectra can be created directly. For example, the following command pro¬ 
duces the white noise spectrum described earlier and is somewhat more 
convenient than calling set setSpecPower: 

BandedPowerLawSpec specl=setWhiteNoise 

(0.0,100.0,3.0); 

More information on these short-cut set methods is provided in the Java 
class documentation. 

b. Higher-Level Get Methods 

The method getSpecPower complements setSpecPower. Like 
setSpecPower, it takes as input a scalar BW that controls the interpretation 
of the signal powers. In its basic form, though, there are no other input 
arguments; it operates on the current BandedPowerLawSpec object 
instance. The output of getSpecPower is an AT-length array of signal pow¬ 
ers C^n for each band in the current instance. The interpretation of BW is as 
follows: 

• When BW = o, = o is returned. 

• When BW > o but is finite in value, the pn are all assumed to equal o. 
The value of BW is interpreted as a constant analysis bandwidth A/j 
and C,n = E (fi,n,f^,n + Af) is returned. 

• When BW < o, the pn are all assumed to equal -1. The value of BW is 
used to calculate an analysis bandwidth for proportional bands accord¬ 
ing to the formula A/= (21^^172 _ 2-|Bw|/2y^ and C,n = E 

2|Bw|/2^ is returned. 

• When BW = go, = E (fi,n,fu,n) (the total power in the signal band) is 
returned. This value depends on the An andpn for the bands. 



ERDC/CRREL TR-06-20 


22 


Another form of the getSpecPower method omits the specification of BW 
and simply returns the total power in each band (as corresponds to BW = 
oo). The methods getSpecMoment (which takes an integer m as an argu¬ 
ment, indicating the desired moment) and getCenterFreq similarly return 
the spectral moments and center frequencies corresponding to each band. 
For example, 

sped . getSpecPower (1) 

returns the power per unit bandwidth in each band of the BandedPower- 
LawSpec object speci (assuming thepn are zero), 

sped . getSpecPower () 


or 


sped . getSpecPower (Double . POSITIVE_INFINITY) 

returns the total power in each band, and 
sped . getCenterFreq () 
returns the center frequency for each band. 

The center frequency/c.n of a band is defined by the BandedPowerLawSpec 
class as m;; Note that when = o, from (5) we 

have 


f 2 _ f 2 

r _ ^ Ju,n Jf.,n f ^ 

Jc,n f --[Ju,n +Je,n)- 


(16) 


That is, the center frequency is the average of the bounds. The center fre¬ 
quency as defined here is not normally equal to the geometric center fre¬ 
quency mentioned in Section 2 in connection with proportional band data, 
namely 7/tn/u,n • 


Finally, there are forms of getSpecPower, getSpecMoment, and getCenter¬ 
Freq that take as input an arbitrary lower frequency/^ and upper fre¬ 
quency/u. These are useful if one wants to calculate, for example, the total 



ERDC/CRREL TR-06-20 


23 


signal power between two frequencies, regardless of the positions of the 
bands in the representation. Calculation of moments for such a general 
situation where the frequencies do not align with the bands of the 
representation is rather complicated. The frequencies may be positioned 
within the bands and may even span multiple bands. In general, 




n=i 




n=i 


(17) 


Defining 


=max(/^,/^^„) (18) 

and 

=min(/u,/u^„), (19) 


one can show that 




f e,n - f u,n 


(20) 


This leads to the following recipe for calculating the moments between two 

arbitrary frequencies: 

1. Change the lowFreq field to the values given by (18). Change the highFreq 
field to the values given by (19). If the value in the highFreq field is less 
than the value in lowFreq, set the values in the two fields so they are equal 
(zero bandwidth). 

2. Add m to each element in the specSlope field. 

3. Call getSpecPower to determine the power in each band. 

4. Return the sum of the powers returned by getSpecPower. 



ERDC/CRREL TR-06-20 


24 


c. Decibel Conversions 

As mentioned earlier, spectra are often represented with decibels. The 
methods dBConvTo and dBConvFrom convert between signal power in 
decibels and in amplitude squared units. In their basic, static form, each of 
these take two inputs: an array (or scalar) containing the powers, followed 
by the decibel reference value (in squared amplitude units) to be used for 
the conversion. They then perform the conversion to or from decibels and 
return the result as an array (or scalar, if that was the input). If a reference 
value of o is specified, no conversion is performed. If a negative value is 
specified, the absolute value is used. 

Alternatively, dBConvTo or dBConvFrom may be invoked as instance 
methods. Then the reference value is not explicitly provided, and the 
implicit value for the BandedPowerLawSpec object is used. The implicit 
value can be set by the user with the setDBref method. 

For convenience, the BandedPowerLawSpec class defines a number of 
static variables containing commonly used reference values. As an exam¬ 
ple, suppose a BandedPowerLawSpec object speci has been created and 
one wishes to associate with it the normal decibel reference for water 
acoustics, 1 pPa. This would be done as show below: 

sped .setDBref (Math.pow (dBrefWater, 2.0)); 

Then, any time the instance form of dBConvTo or dBConvFrom is called to 
convert to or from decibels, the reference value for water acoustics would 
be used, unless it is explicitly overridden. 

Consider next the example in Section qa, where we created an octave-band 
BandedPowerLawSpec object. If we wished to create an object with the 
same frequency bands but with powers of to, 30, and 20 dB relative to the 
normal dB reference for air acoustics (20 pPa), we could use the command 

BandedPowerLawSpec spec4=setSpecPower(-1.0,fl,fu, 

dBConvFrom(powrDB,Math.pow(dBrefA 
ir,2.0))); 


where powrDB={io.0,30.0,20.0}. 



ERDC/CRREL TR-06-20 


25 


5 Filtering and Frequency Bands 

Up to this point, we have described how the BandedPowerLawSpec class 
represents spectra, how BandedPowerLawSpec objects are created, and 
how their properties are set and retrieved. The main utility of the Banded¬ 
PowerLawSpec class lies, however, in manipulating the spectra in various 
ways. This section describes operations that involve a single spectrum: fil¬ 
tering its frequency content and converting it to a different set of fre¬ 
quency bands. All of these are instance methods, meaning that they oper¬ 
ate on the current object instance. The next section will describe 
operations involving multiple objects. 

a. Removing Bands and Eliminating Overlap 

The filterCull method removes bands from a BandedPowerLawSpec object 
whose power is below a specified threshold. If no threshold is passed to the 
method, the threshold is assumed to be zero, in which case bands having 
no power (equivalently. An = o) are removed. 

The methods for creating BandedPowerLawSpec objects generally permit 
overlapping bands to be created. The overlap can be removed by invoking 
the method filterRemOverlap. In regions where there is overlap, this 
method will create a single, new band by summing the powers from the 
overlapping bands. The frequency bounds of the overlapping bands are 
changed so there is no longer overlap. 

b. Low-pass, High-pass, Bandpass, and Stopband Filtering 

Filtering involves removal of signal power over a range of frequencies. A 
low-pass filter retains signal power below a specified frequency. A high- 
pass filter retains signal power above a specified frequency. A bandpass 
filter retains signal power between a pair of specified frequencies. A stop- 
band filter removes all signal energy between a pair of frequencies. The 
filterLowPass, filterHighPass, filterBandPass, and filterBandStop methods 
implement these operations. 

The low-pass filter can be considered a special case of the bandpass filter 
with the passband starting at o. Similarly, the high-pass filter is a band- 



ERDC/CRREL TR-06-20 


26 


pass filter with the passband ending at infinite frequency. The stopband 
filter can also be considered a passband filter, where the frequency ranges 
outside of the stopband become the passbands. Since all of the other filters 
can thus be considered special cases of the bandpass filter, we describe 
here only the implementation of the bandpass filter. In the following 
discussion, the user-specified passband is 

• Find the last band m for whichRemove all bands preceding 
this one. life ^fu,m (indicating that/^ falls in a gap between bands), 
remove this band also. Otherwise, change the lower frequency of this 
band to fi. 

• Find the first band n for which/u ^fu,n. Remove all bands following this 
one. lifu ^fe,,n (indicating that fu falls in a gap between bands), remove 
this band also. Otherwise, change the upper frequency of this band to 

fu. 

For the filterBandPass and filterBandStop methods, either single values or 
arrays may be input for/^ and fu. Arrays are used to create multiple pass- 
bands or stopbands. Only single values may be passed to filterLowPass 
and filterHighPass. As an example, the code 

sped . filterLowPass (100.0) ; 

removes all signal power above loo.o Hz from the BandedPowerLawSpec 
object speci. The code 

sped.filterBandPass(fl, fu); 

where fl is an array containing {20,60}, and fu is an array containing 
{40,80}, removes all signal power except that between 20 and 40 Hz and 
60 and 80 Hz. 

The filtering procedure described here is perfect in the sense that all power 
outside of the passband is removed without affecting the power within the 
passband. Actual filters do not achieve this perfect characteristic. To 
implement an actual filter, one can multiply two BandedPowerLawSpec 
objects, as will be described later. 



ERDC/CRREL TR-06-20 


27 


c. Converting Frequency Bands 

Suppose one wishes to change the frequency bounds (the lowFreq field, 
containing the/^,n, and the highFreq field, containing the fu,n) of a spectral 
representation. For example, one may wish to convert from frequency 
bands with a constant analysis bandwidth to proportional bands. Without 
loss of generality, we can consider conversion of a spectral representation 
to a single frequency band the case of converting to a multiple- 

banded representation with new frequencies would just be a repetition of 
the process for a single band. 

If the frequencies/^ and fu are contained within a single band of the initial 
representation, the conversion is straightforward: we simply copy the val¬ 
ues of An and pn and replace the former values of/,n and/ii,n with/^ and fu. 

When spans multiple frequency bands, conversion becomes more 
complicated. It is not possible to equate a single power-law band to two or 
more power-law bands, unless the two bands happen to have the same 
slope Pn. In general, the conversion can only be performed approximately. 
The procedure we have adopted is based on preserving the zeroth moment 
(energy) and first moment of the representation.* To do this, one first 
calculates Mo(/,/ii) and M^(ff ,fu) using the methods described in Section 
4. These values can then be used to determine A and p in the new 
representation. From (5), 


and 




A ( fP+i _ fP+i) 
p+l /’ 

Alog(/u//), 


p^-i 
p = -i 





P ^-2 
p = -2 


(21) 


(22) 


*The band conversion method described here, based on equating moments, is one possibility of 
many. An example alternative is minimization of the squared difference, integrated over frequency, 
between the two representations. The method described here was chosen for its simplicity and 
generality. 



ERDC/CRREL TR-06-20 


28 


Taking the ratio / M°{fi,fu), we need to solve the following equa¬ 

tion forp: 




p+i 

p+2 ’ 

^ yp+2_yp+2 

P+2 l0g(/„//,)’ 

log(/^//') 

^P+1_ ^ 


(P + l) 


p -1 or -2 

p = -l 
p = -2 


(23) 


This equation must generally be solved numerically. Oncep has been 
determined, we can calculated by solving for it in (21): 


{p+i)M°{h,fu)/[fr^-fr^), p^-i 

ff,), p = -i 


(24) 


The method convFreqBands implements the operation just described. This 
method can be invoked with any of the three formats described in Section 
3e for representing the target frequency bounds. 



ERDC/CRREL TR-06-20 


29 


6 Multi-Spectra Operations 

This section describes operations involving two BandedPowerLawSpec 
objects. The main operations are incoherent addition of spectra and coher¬ 
ent multiplication and division. Each of these three operations are imple¬ 
mented in the BandedPowerLawSpec class with a static method and an 
instance method. An example of the static form is 

spec3 = addSpectraInc(sped, spec2); 

where speci and spec2 are existing BandedPowerLawSpec objects, and 
specs, their incoherent addition, is created. An example of the instance 
form is 

sped.addSpectraInc(spec2); 

where speci and spec2 are again existing BandedPowerLawSpec objects, 
and the object speci is changed by incoherently adding spec2 to it. 

The multi-spectra operations require that the frequency bounds,and 
fu,n, are the same for both BandedPowerLawSpec objects. If the two objects 
do not initially meet this requirement, they are first converted to a com¬ 
mon set of frequency bounds. We discuss this topic before describing the 
available multi-spectra operations. 

a. Developing Common Frequency Bounds 

This section describes how a set of common, bounding frequencies are 
devised for a pair of BandedPowerLawSpec objects. The procedure is illus¬ 
trated in Figure 4. 

An array of frequencies/b is created containing all the unique values oifi,n 
and/ii,n from both spectral representations. The array is sorted in order of 
increasing frequency, and repetitions are removed. The lower frequency 
bounds for a common representation can now be defined as/^,n =fb,n, n = 
o,..., AT- 1, where Ar+ 1 is the total number of bounding frequencies. The 
upper frequency bounds are/u,n =fb,n, n = 1,..., AT. 



ERDC/CRREL TR-06-20 


30 


Spectrum 1: 



frequencies: 

Figure 4. Determination of the unique bounding frequencies from a pair of Spec objects. 

Once the common bounding frequencies have been determined, it is 
straightforward to individually convert the two BandedPowerLawSpec 
objects to these new bands. Note that each frequency band in the original 
spectral representations contains one or more frequency bands, or sub¬ 
bands, based on the new frequency bounds. Each of these subbands 
inherits the values of An and pn from its parent. Any new frequency bands 
outside of those in the parent representation take An = o. 

















ERDC/CRREL TR-06-20 


31 


b. Adding Spectra Incoherently 

Suppose two autospectra that are to be added have the banded power-law 
form of (7) and (8). For example, we might want to add the autospectra of 
two types of uncorrelated noise to find the overall noise background. Such 
operations are not readily supported by the power-law form. If the power- 
law exponents in the two spectra being added differ, their summation can 
no longer be described by a plain power law. Therefore, summations 
involving differing exponents must be handled approximately. 

The process of adding two spectra begins by finding the common fre¬ 
quency bands and partitioning the spectra into these new bands, as 
described in Section 6a. Once this has been done, common bands from the 
two spectra are independently added. In the following discussion, we 
assume that the spectra have been processed into such common bands, 
and therefore we need consider only the summation of one band with 
another that shares the same bounding frequencies/^ and fu. This process 
is repeated for each of the bands. Let us designate the spectral coefficients 
for the two spectra as Aa and Ab. The spectral slopes arepa andpb. There¬ 
fore, the summation is 


S{f)^AafP‘-+AhfP^. (25) 

Since the summation cannot be represented directly in the form S(f) = Afp 
(unless Pa = pb), we have chosen to assign A and p in a way that preserves 
the zeroth and first moments of the summation. Integrating both sides of 
(25) fromfi tofu, we have 

(/,/„) = (/,/„) + M° (/,/„). (26) 

Multiplying both sides of (25) by/and again integrating from/ to/, we 
have 


M^(/,/) = M^(/,/) + M^(/,/). (27) 

Hence, to determine p in the approximate spectral summation of the form 
S(f) = Afp, we can apply (23) with 



ERDC/CRREL TR-06-20 


32 


Next, A follows from (24). 

c. Dividing Spectra 

Often it is desirable to take the ratio of one spectrum or frequency- 
dependent function to another. This happens, for example, when we calcu¬ 
late the signal-to-noise ratio, which plays a key role in signal detection. 
Another example is the calculation of a transfer function by dividing the 
cross spectrum between two signals by an autospectrum. 

As with the addition of spectral bands, we first repartition the two spectra 
into common frequency bands. Then, on a band-by-band basis, the ratio 
can be calculated simply as , which is equivalent to setting A 

= Aa/Ab andp = pa- pb- The overall phase angle is (p = (pa- (pb- The 
BandedPowerLawSpec class includes methods that implement division in 
this manner. The method divSpectra is the static version, divSpectraNum 
is the instance version with the current instance in the numerator, and 
divSpectraDen is the instance version with the current instance in the 
denominator. 

d. Multiplying Spectra 

Multiplication of spectra or frequency-dependent functions is also a com¬ 
mon operation. It may occur, for example, when we wish to multiply an 
autospectrum by a transfer function representing a filter. As with the divi¬ 
sion of spectra, this operation is straightforward if we first repartition the 
two spectra into common frequency bands. Then, on a band-by-band 
basis, the product is (a^/^- j, which is equivalent to setting A = 

AcAb and p =pa+ Pb- The phase angle is (p = (pa + (pb- 



ERDC/CRREL TR-06-20 


33 


7 Conclusion 

This report has described the software design and underlying mathematics 
of an object-oriented approach to creating and manipulating spectra. The 
new software provides a high degree of flexibility for representing common 
spectral models such as evenly spaced bands, octave bands, narrow spec¬ 
tral lines, broadband noise, and power laws. A library of methods has been 
developed to easily set up such spectral models. Conversions between the 
various spectral models are also easily performed. Many operations on 
spectra, such as filtering, incoherent addition, and application of transfer 
functions, can be applied. 

This capability will serve as a foundation for future development of acous¬ 
tic and seismic tactical decision aids and mission planning tools, such as 
ERDC Battlefield Terrain Reasoning and Awareness and its successors. 
Extensions to the class have already been written to represent audibility 
weighting curves and wind noise produced by atmospheric turbulence. 
Another potential acoustical application is the modeling of outdoor noise 
propagation and annoyance. Because of its generality, the new software 
could potentially be used for many other problems involving spectral 
manipulations. 



ERDC/CRREL TR-06-20 


34 


References 

Bendat, J.S., and A.G. Piersol. 1986. Random Data: Analysis and 
Measurement Procedures. New York: Wiley-Interscience. 

von Karman, T. 1948. Progress in the statistical theory of turbulence. 
Journal of Marine Research, 7: 252-264. 

Wilson, D.K. 2006. Sensor Performance Evaluator for Battlefield Environ¬ 
ments (SPEBE) tutorial. ERDC/CRREL TR-06-12. Hanover, NH: U.S. 
Army Engineer Research and Development Center, Cold Regions Research 
and Engineering Laboratory. 

Wilson, D.K., V.A. Nguyen, N. Srour, and J. Noble. 2002. Sound exposure 
calculations for transient events and other improvements to an acoustical 
tactical decision aid. ARL-TR-2757. Adelphi, MD: U.S. Army Research 
Laboratory. 

Wilson, D.K., and G.L. Szeto. 2000. Reference guide for the acoustic 
battlefield aid (ABEA), version2. ARL-TR-2159. Adelphi, MD: U.S. Army 
Research Laboratory. 



REPORT DOCUMENTATION PAGE 


Form Approved 
0MB No. 0704-0188 


Public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, gathering and maintaining 
the data needed, and completing and reviewing this collection of information. Send comments regarding this burden estimate or any other aspect of this collection of information, including suggestions for 
reducing this burden to Department of Defense, Washington Headquarters Services, Directorate for Information Operations and Reports (0704-0188), 1215 Jefferson Davis Highway, Suite 1204, Arlington, 
VA 22202-4302. Respondents should be aware that notwithstanding any other provision of law, no person shall be subject to any penalty for failing to comply with a collection of information if it does not 
display a currently valid 0MB control number. PLEASE DO NOT RETURN YOUR FORM TO THE ABOVE ADDRESS._ 


1. REPORT DATE (DD-MM-YYYY) 2. REPORT TYPE 3. DATES COVERED (From - To) 

December 2006 Technical Report 


4. TITLE AND SUBTITLE 5a. CONTRACT NUMBER 


Object-Oriented Approach to Manipulating Acoustic and Seismic Spectra 


5b. GRANT NUMBER 


5c. PROGRAM ELEMENT NUMBER 


6. AUTHOR(S) 

D. Keith Wilson and Jacob I. Torrey 


5d. PROJECT NUMBER 


5e. TASK NUMBER 


5f. WORK UNIT NUMBER 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

U.S. Army Engineer Research and Development Center 
Cold Regions Research and Engineering Laboratory 
72 Lyme Road 
Hanover, NH 03755-1290 


8. PERFORMING ORGANIZATION REPORT 
NUMBER 

ERDC/CRREL TR-06-20 


9. SPONSORING / MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Office of the Chief of Engineers 
Washington, DC 


10. SPONSOR/MONITOR’S ACRONYM(S) 


11. SPONSOR/MONITOR’S REPORT 
NUMBER(S) 


12. DISTRIBUTION / AVAILABILITY STATEMENT 

Approved for public release; distribution is unlimited. 

Available fromNTIS, Springfield, Virginia 22161. 



14. ABSTRACT 

The software design and underlying mathematics for an object-oriented, Java-based approach to creating and manipulating frequency- 
dependent functions, such as power spectral densities, is described. The frequency dependence is modeled as a series of power-law 
bands, which provides a high degree of flexibility and efficiency for representing common spectral models such as evenly spaced bands, 
octave bands, narrow spectral lines, broadband noise, and power laws. Conversions between the various spectral models are easily 
performed. Many common operations on spectra, such as filtering, incoherent addition, application of transfer functions, and calculation 
of signal-to-noise ratios, can be conveniently applied. While this capability was developed to serve as a basis for future development of 
tactical decision aids and mission planning tools for battlefield seismics and acoustics, many other applications involving spectra are 
possible. 


15. SUBJECT TERMS 

Acoustic spectra 
Object-oriented modeling 


Seismic spectra 
Spectral models 


16. SECURITY CLASSIFICATION OF: 


17. LIMITATION 
OF ABSTRACT 

18. NUMBER 
OF PAGES 

19a. NAME OF RESPONSIBLE 

PERSON 

a. REPORT 

b. ABSTRACT 

c. THIS PAGE 

u 

43 

19b. TELEPHONE NUMBER (include 
area code) 

u 

u 

u 


Standard Form 298 (Rev. 8-98) 

Prescribed by ANSI Std. 239.18 



































