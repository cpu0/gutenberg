REPORT DOCUMENTATION PAGE 


fomApftiwa 

OPMNo. 


nponii^ buntan lor Ite eoltaclion ot intormalion is wtiiiMtad to » f Qi 1 hour pot toopomo. fnduding Iho limo (or roMowing inslaidiono. tooiehing outing toutoM g«honi« 
oM nwMoMng Iho d«o noodod, and roMowing Iho oodoolian o< jnlormotion. Sond oenwionio togoidtng Ihio bmdon oodmalo or pry olhor aopoel oi Ihit eolo rt ion ol Mormaiion. inohidii^ 
oiiggoil~it~i lor loducing Ihio bwdon, lo Woohinglon Hoadquuloio S otvioo. OirodorMo (or Inleimdion Oporolioni and Bapotla. 1215 JoHorton Dons Hghmy. SuiU 1204, Aitif^lon. VA 
22202-002. and (o Iho 0(5ao o( hdonnolion and Ro g uldory AHoiw. OWioo ol M M iags rn anI and Budgot. Washingtor^ DC 20600. 






ENDING 


CASEWorks/RT Ada i860. Version 1.1, Host: Sun SPARCstation 2 
Target: CSPI Supercard 2 (80860) with VSB daughtboard 
930722W1.11320 


Authors: 


AD-A273 713 

liilililii 


Wright-Patterson AFB 


8. PERFORMING 
ORGANIZATION 


10. SPONSORING^MONITORING 
AGENCY 



12a. DISTRIBUTIC3N/AVAILABILITY 

Approved for public release; distribution unlimited 


13. (Maximum 200 

CASEWorks/RT Ada i860. Version 1.1, Host: Sun SPARCstation 2, CSPI Supercard 2 (80860) 
with VSB daughterboard, ACVC 1.11 



14. SUBJECT 


Ada programming language, Ada Compiler Val. Summary Report, Ada Como 

• Testing, Ada Val. Office, Ada Val. Facili 


CLASSIFICATiON 

UNCLASSIFIED 


18. SECURITY 

UNCLASSIFIED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


15. NUMBER OF 


16. PRICE 

y 


20, LIMITATION OF 

UNCLASSIFIED 


ndard Form 298, ( 
Prescribed by ANSI SU. 















Best 

Available 

Copy 




AVF Control Number: AVr-VSR-567.0693 
Date VSR Completed: 10 August 1993 

93-04-21-Mn 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 930722W1.11320 
Multiprocessor Toolsmiths Inc. 
CASEHorks/m* Ada i860, Version 1.1 
Sun SPARCstation 2 under SunOS, 4.1.1 -> 

CSPI Supercard 2 (80860) with VSB daughterboard 


(Final) 


Prepared By: 

Ada Validation Facility 
645 C-CSG/SCSL 

Wright-Patterson AFB (» 45433-5707 


lync quauty IKSPECTRD 3 


1 Accesion For 

NTIS CRA&I 

D'lC TAB 
Unannounced 
Justification. 

□ 

By 

Dis 



t.ibution/ 


Availability Codes 

Dist 

u 

Avail a 
Spe 

nd / or 
cial 


93 12 13 04e 


93—3Q^ *]g 

iiiiiiiii 



Certificate InfonnaticMi 


Ttie following Ada inplementation vfas tested and determined to pass ACVC 
1.11. Testing was coof>leted on 22 July 1993. 

Compiler Name and Version: CASENorks/RT Ada i860, Version 1.1 

Host Computer Systos: Sun SPARCstation 2 

under SunOS, 4.1.1 


Target Ccmputer System: CSPI Supercard 2 (80860) 

with VSB dau^terboard 


Custooer Agreement Number: 93-04-21-»!TI 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
930722W1.11320 is awarded to Multiprocessor Toolsmiths Inc. This 
certificate expires two years after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


^ ^ _ 

Ada Validation Facili^ 

Dale E. Lange 
Technical Director 
645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-5707 



Ada 

Diredto 
Institute 




Alexandria VA 22311 


Organization 

ter and Software Engineering Division 
or Defense Analyses 


Ada Joint Program Office 

John Solomond, Director 
Department of Defense 
Washington DC 20301 









declaration of conformance 


Customer: Multiprocessor Toolsmiths Inc 

Ada Validation Facility: Ada/Jovial Validation Facility 

ACS/Coimnunications-Computer Systems 
Wright-Patterson AFB, Ohio 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Coit^iler Naune/ Version: CASEWorks/RT Ada i860 version 1.1 

Host Computer: Sun SPARCStation 2 

Host Operating System: Sun OS (Unix) 4.1.1 

Target Con^uter: CSPI Supercard 2 (Intel 80860) 

with VSB daughterboard 

I, the undersigned, representing Multiprocessor Toolsmiths Inc., declare 
that Multiprocessor Toolsmiths Inc. has no Icnowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A in the 
implementation listed in this declaration. 



Ada Progreun Manager 






TABLE OF CCmENTS 


CHAPTER 1 INIRCDOUCTZON 


1.1 USE OF THIS VALIDATION SUMMARY REF(»T.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS. 1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHI«AMN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 




















C HAP TER 1 


nnRQoucnoN 


The Ada inpleaentatlon described above was tested according to the Ada 
validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Ccopiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the compters, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF \diich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 







ZimtODUCTZCM 


1.2 REFERENCES 

[Adia83] Reference Manual for the Ada Progranminq Language, 
ANSI/MIL-S1IK1815A, February 1983 and 8652-ld87. 

lPro90] Ada Conpiler Validatiw Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

CoBf>liance of Ada inplementaticHis is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSES, FAILED, or NOT APPLICABLE message indicating the resiilt vhen they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are \ised for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is \i8ed many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK__FILE is \ised to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPC^ and CHECK_FILE is checked by a set of 
executable tests. If these xmits are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is conpiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Staixiard are detected. Some of the class B tests contain legal Ada 
code vhich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada isplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are ejected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
ioplementaticm-specific values — for exanple, the largest integer. A list 
of the values used for this inplementation is provided in J^^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 







INIRODUCnON 


For each Ada iii(>leiiientati(xi, a custooized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an AG/C an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITIGN OF TERNS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing coopliance of Ada implementations. 
Validation consisting of the test suite, the sxjpport programs, the ACVC 
Capability xiser's guide and the teiq;>late for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer syston. 

Ada Joint The part of the certification body vhich provides policy and 
Program guidwce for the Ada certification system. 

Office (AJFO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidwce for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the iiqplementation to pass an ACVC version, 
an Ada 

Implementation 

Cooputer A functional unit, consisting of one or more ccoputers and 

System associated software, that \jses common storage for all or 

part of a program arxl also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic (^rations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





ZNIItOOUCTZON 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LBN 


Operating 

System 


Target 

Conputer 

System 

Validated Ada 
Compiler 

Validated Ada 
Iiif>lementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF t^ch specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that coitains one or more test objectives found to be 
irrelevant for the given Ada inplementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRH take the form ''<section>.<s\ibsection>:<paragraph>." 

Software that controls the executicm of programs and that 
provides services such as resource allocation, scheduling, 
ii^t/output control, and data management, usually, 
operating systems are predominantly software, but partial or 
complete hardware inplementations are possible. 

A cooputer system \4iere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada inplementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada conpiler to 
the Ada programming language euxi of issuing a certificate 
for this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 







CHAPTER 2 


ZHPLEMENTATIGN DEPE31DENC1ES 


2.1 WITHUWMN TESTS 

Ttie following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. Ihe 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025O 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives vhich are irrelevant 
for a given Ai^ inplementation. Reasons for a test's inapplicability may 
be supported by docxnnents issued by the ISO and the AJPO known as Ada 
Comnentaries and coonroonly referenced in the format Al-ddddd. For this 
iaplementation^ the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Coonentaries are included as 
appropriate. 


2-1 







IMPLEHENmTIGN DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEN.MAX DIGITS: 


C24113L..Y (14 tests) 
C35706L..y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35e02L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SIKXn'_FLGAT; for this ijif>lementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LQNG_FLQAT, or SHQ!BT_FLQAT; for this 
ioplementation, there is no such type. 

A35801E includes a check that FLOAT'FIRST..FLOAT'LAST can be used as 
the range constraint in a floating-point type declaration; this 
in{)lementation, rejects the declaration. (See section 2.3.) 

C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINEjOVERFLONS is TBUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this implementation, MACHlNEjOVERFLOWS is FALSE. 

C45531I1..P and C45532n..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.HAX^HANTISSA of 47 or greater; for this 
iiqplementation, NAX_NANTISSA is less than 47. 

D64005G uses 17 levels of recursive procedure calls nesting; this 
level of nesting for procedure calls exceeds the capacity of the 
compiler. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATICM; for this iii{)lementation, there is no such type. 

Q^009C and CA2009F check v4iether a generic unit can be instantiated 
before its body (and any of its subunits) is compiled; this 
inplementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and a^004E..F (6 tests) check pragma INLINE 
for proce^res and functions; this inqplementation does not support 
pragma INLINE. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 








IMPLENSmATICN I^ElOESdES 


CD2A84A, CD2A84E, CD2AB4I..J (2 tests), eund CD2A840 use length clauses 
to specify non^efault sizes for access types; this isfjlenentation 
does not srqppoct such sizes. 

BOaOOlA, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this iiqplementation provides no paclcage HACHINE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTZAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 

AE2101H, EE2401O, and EE2401G use instantiations of package DIRECT_I0 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

The tests listed in the following table check that USE_ERBC^ is raised 
if the given file operations are not su{ported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

C:e2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 " 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

sequential" 10 

CE2102R 

OPEH 

FILE 

DIRECT 10 " 

C:E2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TEXT__IO 

CE3102I 

CREATE 

OUT FILE 

TEXT^IO 

CE3102J 

OPEN 

IN_FILE 

text"io 


The tests listed in the following table check the given file 
operations for the given combination of mode and access method; this 
implementation does not sipport these operations. 

Test File Operation Node File Access Method 


CE2105A 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2105B 

CREATE 

IN FILE 

DIRECT 10 

CE2111A 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2208B 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE3103A 

OPEN 

OUT FILE 

TEXT 10 

CE3104B 

OPEN 

OUT FILE 

TEXT 10 

CE3109A 

CREATE 

IN_FILE 

TEXT_IO 



2-3 






ZMPLEMEN1ATIQN DEa?QO>ENCIES 


Ihe following 15 tests check citations on sequential, direct, and 
text files when multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERROR is 
raised when this association is atten{>ted. 

CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111H CE3111B CE3111D..E CE3114B CE3115A 

CE2111C..D (2 tests) reset a SEQUENTIAL_IO file from IN_FILE to 
OUT_FILE mode; this implementation does not support such a reset. 

CE2111F and CE2111I reset a SBQUENTIAL_IO file from CXJT_FILE to 
OUT_FZLE mode; this isfjlementation does not sxqpport such a reset. 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3104C resets a TEXT_IO file from OUT_FILE to OUT_FILE mode; this 
implementation does not support such a reset. ~ 

CE’:.<4A -hecks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERR(» if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT^ERRQR vdien the value of the 
page n\imber exceeds CXXJNT'LAST; for this Implementation, the value of 
CXXJNT'IAST is greater than 150000, soaking the checking of this 
objective impractical. 


2.3 TEST MMJIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
eoqoected by the original tests. 

B22003A B83033B B85013D 

A35601E was graded inapplicable by Evalxoation Modification as directed by 
the AVO. This test checks that various floating-point attritoutes can be 
used in static expressions, and includes the range FLOAT'FIRST..FLOAT'LAST 
as the constraint in a floating-point type declaration. Such a constraint 
may be rejected by the compiler if the values for 'FIRST & 'LAST are not 
within the range of safe numbers for any of the implementation's floating 
point base types (cf. AI-00469/04). But this implementation rejects the 


2-4 





IMPLEMENTATION DEPENDENCIES 


declaration even though it has a large enough base type; however, this 
error was not discovered xjntil after testing had begun. 

CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed the AVO. These tests contain instantiations of a generic unit 
prior to the con^ilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the conpilation of the generic unit bodies makes the conf>ilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. Ttiese tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are conpiled after the units that contain the 
instantiations, and this inplementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the conpilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-coiq)iling the obsolete units; all inte^ed 
errors were then detected by the compiler. 

CE3104A was graded passed by Test Modification as directed by the AVO. 
This test checks that the current column, line, and page numbers of text 
files are set to one after a create, open, or reset qperation; it 
incorrectly allows an execution path wherein an attempt is made to delete a 
file that is not open, and there is no handler for the resulting 
STATUS ERROR. In order to avoid this problem, the test's code was changed 
as indicated below: 

line 198 was changed frcxn ' DELETE (FILE); ' to 
' IF ISJOPEN (FILE) THEN DELETE(FILE); END IF; —AVF ' 

and ' COMMENT (" I! lUSE ERROR: OPEN + OUT FILES I!—AVF") ; ' 
was inserted iamediateTy after line 147 (this output confirmed 
the particular execution path that justified excluding DELETE) 


2-5 






CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada ioplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

Ste{dien Michell 
Multiprocessor !Rx>lsmiths Inc. 

200-6 Gurdwara Drive 
Nepean, Ontario 
rarmH;! K2E 8A3 
(613) 727-8707 Ext;111 


Testing of this Ada implementation was conducted at the custciner's site by 
a vali^tion team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Staixlard, vAiether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC (Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the numdser of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's tsaximum 
precision Utem e; see section 2.2), and those that depend on the srpport 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 


3-1 







PROCESSING ZNFORIVkTION 
and £, below). 


a) Total NUndser of Applicable Tests 3783 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 91 

d) Non-Processed I/O Tests 0 

e) NOn-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 292 (C4dt«) 


g) Total Nunter of Tests for ACVC 1.11 4170 (a-t-bff) 


3.3 TEST EXECUTIGM 


A magnetic tape containing the custcoiized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host ccnputer. 

After the test files were loaded onto the host computer, the fxill set of 
tests was processed by the Ada inqplementation. 


The tests were ccoqpiled and linked on the host conpiter system, as 
appropriate. The executable images were transferred to the target computer 
system by the TCP/IP executing over Ethernet, and run. The results were 
captured on the host computer system. 


Testing was performed using command scripts provided the customer and 
reviewi^ by the validation team. See J^jpendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 


-fE 

-fw 

-fl 


-fQ 

-L libraryjiame 
-Q "linker_options 


Generate the auxiliary file so that 
the lister will work. 

Suppress warnings. 

Ignore errors in deciding which units 
should be added to a library in a given 
compilation. 

Don't emit messages about adding units 
to the program library. 

uses a validation-specific library name 
" passes through board-specific and 

build-specific information to Composer(tm) 

The following Composer selections are used 

-b up Use the single-cpu pSOS+ variant 
of the executive 

-r SC80860 Use SC80860-specific modules 
(timers, serial line drivers) 


3-2 








PROCESSING INFGRmnON 


for the executive 

-8 bptcpd Include the backplane TCP/IP 

server for network coenunication 
with the host 

-s vtty Include the Virtual Terminal 
server vm for coonunicatifxi 
with a terminal emulator on the 
host computer. Used for logging 
of test results to the host. 

-s Unix Include the unix-compatibility 

layer. Needed for package Calendar. 

-8 ada Includes the Ada run-time specific 
additions to the unisorvt)SOS+ 
executive. 

-8 nfs Includes the Network File Server 
to mount a filing system over 
the network. This server is cxily 
included for the applicable CE 
and EE tests. 

-s rpc Incltxles the Remote Procedure 

Call server. Only used in these 
tests with NFS, hence is only 
inclxided when NFS is included. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 






APPE24DIX A 


MACRO PABAMEUSS 


Ihis appendix contains the macro parameters used for custcnizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
valiMS that are defii^ in terms of the maxinim input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vhere "V" represents the maximum ii^t-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEM 

200 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A», V -> 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> 'OM & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

i (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS 

(1..V-20 

$MAX_LEN_INTJBASED_ 

LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 


$MAX_LEN_REAL_BASED_LnERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 






MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALZGNMENT 

4 

$COUKr_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STOR_UNIT 

8 

SDEFAULT_SYS_NAME 

i860 

$OELTA_DOC 

2.0**(-31) 

$ENTRY_AOORESS 

16*0« 

$ENIRY_ADI»ESS1 

16«1« 

$B4TRY_AIX»ESS2 

16«2« 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

F 9 

$FIXED_NAHE 

NO_SUCH_FIXED_TTPE 

$FLQAT_NANE 

NO_SUCH_FLQAT_TYPE 

SPOBM_STRING 

nn 

$F0RH_STRING2 

"CAJ®IOT_RESTRICT_FILE_ 

SGREATER THAN DURATION 

90_000.0 


$GREATER THAN DURATIGN BASE LAST 

T0_00Di_000.0 

$GREATER THAN FLOAT BASE LAST 

1.I&-308 

$GREATER THAN_FLQAT SAFE LARGE 

3.TFE38 









MACRO PARAMETERS 


$greater_than short float safe large 

1.01308 “ 

$H1GH_PRI0R1TT 250 

$illegaljexternal_file NAME^ 

^^X30ZRECTORy/FILENMIEl 

$ILLEGAL_EXTERNAL_FZLE NAME2 

^CDZRBCTQRy/FZLEMAME2 

$ZNAPPR0PRZATE_LZNE LENGTH 

” -1 

$ZNAFPR0PRZATE PAGE_LE2«3IH 

-1 

$ZNCLUDE_PRAGMA1 pragma ZNCLUDE ("A28006Dl.AnA") 

$ZNCWJDE_PRAGMA2 PRAGMA ZNCLUDE ("B28006rl.ADA") 

$ZNIBGEK_FZRST -2147483648 

$ZNTBGERJJVST 2147483647 

$ZN1BGER__LAST_PLUS_1 2_147 483_648 

$ZOTT»PACEJLANaUAGE C 

$LESSJEHAN_DURATZON -90_000.0 

$LESS_THAN_DURA!rZON_BASE FIRST 

-17_000_000.0 

$LZNE_TERHZNATOR ASCZZ.LF 

$LOW_PRZORZTY 1 

$MACHZNE_OOOE_STATEMEMr 

NULL; 

$MACHZNE_OOM:jrXPE ZNSTRUCTZQN 

$MANTZSSA_DOC 31 

$MAX_DZGZTS 15 

$MAX_ZNT 2147483647 

$MAX_ZNT_PLUS_1 2_147_483_648 

$MZN_1NT -2147483648 

BTra_ZNTBC2R 

A-3 





MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPBaFICATXGMl 

$NAME_SPEaFZCATZC3M2 

$NAME_SPBC:iFICATION3 

$NE6_BASED_INT 

$NEMJ1EM_SIZE 

$NEW_STQRJUNIT 

$NEW_SySJNAME 

$PACZJIERMZNATOR 

$REOORDJSFINITICXI 

$RBCX»p_NAME 

$TASK_SZZE 

$TASK_STQRAGE_SIZE 

$TICK 

$VARIABLE_ADORESS 

$VARIABLE_AD0RESS1 

$\aVRIABLE_ADCffiESS2 

$YOUR_PRAGMA 


i860 

/hoM/q;)arc6/avalAal • SPARC/X212QA 
/1ioM/sparc6/avalAAl • SPARC/X2120B 
/hane/sparc6/avalAal. SPARC/X3119A 

16» FFFF F FFE » 

1024 

8 

1860 

ASCII.LF & ASCII.FF 
NEM TtfTBCER 
INSTRUCTION 
32 

8000 

0.025 

FCNDECL.VARJVDDRESS 
FCMDECL.VAR_ADDRESS1 
FCNI»CL.VAR_ADORESS2 
NO SUCH PRAGMA 


A-4 






APPEX4DXX B 


OOHPILATIQN SYSTEM OPTIONS 


The compiler cations of this Ada implementation, as described in this 
i^jpendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documntation and 
not to this report. 


-L - Perform cospile on a program library named something other 
than ada.lib. 

-g - Run additional q;>tifflization pass. 

-R - Keep internal form file. This option is used in conjunction 
vdth the Optimizer. 

-k - Save all of the intermediate files. This option is useful 

for viewing or debugging the intermediate "C" code generated 
by the back end of the compiler. 

-1 " modifiers" - 

Generate listing file. The >1 option causes the compiler to 
create a listing. Optional modifiers may be given to affect 
the listing format. Any combination of the following 
modifiers can be used: 

c - continuous listing format, 
p - obey pragma page directives, 
s - use stan^rd output, 
t - relevant text output only. 

-fv - Verbose mode. Print out the names of the rmits with'd, 
and vtot units are added to the symbol table. 

-fD - Debug mode. Generate debugging information. 

-fq - Quiet mode. Don't print any information about a ccxipilation. 

-fL - Enables the compiler to give the filename and line numbers 
where an exception takes place. 

-fr - Do not release memory at compile time. 


B-1 








OONPXIATIGN SYSTEM OPTIONS 


-£U - Compile this unit, but do not iqxiate the program library. 

-fvr - Suppress warnings. 

-fs - Compile time switch to si^ress checking operations. 

-£N - Compile time switch to suppress numeric checking. 

-fz - Emit code to zero all locals. 

-fZ - Ignore errors in deciding which units should be added to a 
library in a given coqpilation (see ealOOSb). 

-£E - Generate the auxiliary file so that the lister will work. 

-£R - Generate RONable code. 

-£Q - Don't emit messages about adding units to the program library. 

-£o - Don't r^idate the program library if a change is made that 
won't affect the program library (useful when spec and body 
are in the same file). 

-fP - Change the .int extension to .pre. This is used vdien the 
optimizer is invoked. 

-£C - Coaf>ile only if this unit is out-of-date. This is used in 
conjunction with the tool "adaorder". 

-£V - Change common to data. Explicitly initialize globals so 
that objects that would go into the common area will be 
placed in the data area. 

-fT - Trace C functions. This inserts tracing code on entry and 
exit from each subprogram. This is useful on a system with 
no debugger ^dien it is first being brought up. 

-£b - Debug mode. Output iform blocks to a .b file. 

-£e - Intersperse source lines as comments in C (assembly) code. 

-£n - Output translations of globals to C names to .n file. 


LINKER OPTIONS 

The linker options of this Ada inqplementation, as described in this 
Appendix, are provided by the customer. Ikiless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


c - Use a different ccxnpiler than the one specified for this 





COMPILATION SYSTEM OPTIONS 


program library. 

-L - Perform bamp on a program library named something other than 
ada.lib. 


-o - Takes a parameter. This specifies a different name for the 
executable. 

-r - Produce a relocatable object. 

-s - Specify an explicit default for the size of a task stack. 

^ - Don't actually call the linker. Prints out the program steps 
\tfhich vrould be executed in the bamp phase 

-P - Print the steps (or subtools) invoked as part of banp. 

-V - Verbose mode. 

-q - Quiet mode. 

-k - Save all of the intermediate files associated with bamp. 

-f - Don't conpile the elaboration main routine. 

-n - Stop before the link step. 

-m - Create a link map. 

-u - Target software floating point. 

-I - Link in Preenptive tasking runtime. 

-g; -G - Invoke the global optimizer. 

-z - Create executable that will perform dynamic linking. 

-Q "linkerjoptions" passes through board-specific and 

build-specific information to Ccnposer(tm) 
The following Ccsposer selections may be 
used in this implementation: 

-b up Use the single-cpu pSO&t- variant 
of the executive 

-r SC80860 Use SC80860-specific modules 
(timers, serial line drivers) 
for the executive (other 
options are sc3 and sc6 
-s t^tcpd Incliide the backplane TCP/IP 
server for network 
coranunication with the host 
-s vtty Include the Virtual Terminal 
server VTTY for communication 


B-3 










OQKPIIATIGN SYSTEM OPTIGNS 


-6 Unix 

-s ada 

-s nfs 

-s rpc 


with a terminal emulator on 
the host computer. Used for 
logging of test results to the 
host. 

Include the Unix-coopatibility 
layer. Needed for package 
Calendar. 

Includes the Ada run-time 
specific additions to the 
Unison/pSO&f executive. 
Includes the Network File 
Server to mount a filing 
system over the network. This 
server is only included for 
the applicable CE and EE 
tests. 

Incl\x)es the Ronote Procedure 
Call server. Only used in 
these tests with NFS, hence is 
only included when NFS is 
inclixled. 


B-4 




APPENDIX C 

APPENDIX F OF IHE Ada STANDARD 


Itie only allowed is^lementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Stai^rd, and to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type LONG_INTBGER is range -2147483648 .. 2147483647; 
type SIiORT_INTBGER is range -32768 .. 32767; 
type ByTE_lNTEGER is range -128 .. 127; 

type FLOAT is digits 6 range -3.40282&»-38 .. 3.40282E-t-38; 
type LONG FLOAT is 

digits 15 range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0000 ..86400.0000; 


end STANDARD; 


C-1 







APPENDIX F OF THE Ada STANDARD 


J^^ndix F 

Implementation-Dependent Characteristics 


This a{^ndix lists inplementation-dependent characteristics of 
CASEMorks/RT Ada for the Intel 80660 executing with Unison/pSO&f in 
an embedded environment. Note that there are no preceding 
appendices. This appendix is called ^;^ndix F in order to comply 
with the Reference Manual for the Ada Progranming Language* (LRM) 
ANSI/MIL-STD-ISISA vAiich states that this appendix be named 
J^ppendix F. 

Implemented Chapter 13 features include length clauses, enumeration 
representation clauses, record representation clauses, address 
clauses, intern;^ts, package system, pragma interface, and unchecked 
programming. 

F.l Pragmas 

The implemented pre-defined pragmas are: 
elaborate See the LRM section 10.5 
interface See section F.1.1 
list See the LRM ^^ndix B 
pack See section F.l.2 
page See the LRM i^^ndix B 
priority See the LRM ^^ndix B 
suppress See section F.l.3 
shared See the LRM, chapter 13. 

The remaining pre-defined pragmas are accepted, but presently 
ignored: 

controlled 

optimize 

inline 

systemjname 

storagejunit 

memory_size 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms are encountered at compile time, the 
compiler iss\jes a warning message rather than an error, as required 
by the Ada language definition. Refer to the LRM J^pendix B for 
additional information about the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma interface in CASEWorks/RT Ada is: 

pragma interface( language, subprogram [,"link-name”] ); 


C-2 






APPENDIX F OF THE Ada STANDARD 


where: 

language This is the interface language, one of the names 
assembly, builtin, c, or internal. The names 
builtin and internal are reserved for use by 
Toolsmiths cca{>iler maintainers in run-time suqpport 
packages. 

sxibprogram 

This is the name of a suli^rogram to which the 
pragma interface applies. 

link-name This is an optional string literal specifying the 

name of the non-Ada subprogram corresponding to the 
Ada sxibprogram named in the second parameter. If 
link-name is omitted, then link-name defaults to 
the value of sut^rogram translated to lowercase. 
Depending on the language specified, some automatic 
modifications may be made to the link-name to 
produce the actijal object code symbol name that is 
generated whenever references are made to the 
corresponding Ada subprogram. The object code 
symbol generated for link-name is always translated 
to upper case. 

It is appropriate to use the optional link-name 
parameter to pragma interface only when the 
interface subprogram has a name that does not 
correspond at all to its Ada identifier or when the 
interface subprogram name cannot be given using 
rules for constructing Ada identifiers (e.g., if 
the name contains a character). 

The characteristics of object code symbols 
generated for each interface language are: 

assembly - The object code symbol is the same as 
link-name. 

builtin - The object code symbol is the same as 
link-name, but prefixed with the following 
characters (_mss_). This language interface is 
reserved for special interfaces defined by 
Toolsmiths. The builtin interface is presently used 
to declare certain low-level run-time operations 
vhose names must not conflict with 
programmer-defined or language system defined 
names. 

c - The object code symbol is othe same as 
link-name, but with one underscore character (_) 
prepended. This is the convention used by the C 
compiler. 


C-3 








APPENDIX F OF THE Ada STMOARD 


internal - No reject code symbol is generated for 
an internal language interface; this language 
interface is reserved for special interfaces 
defined by TOolsmiths. The internal interface is 
presently used to declare certain machine-level bit 
operations. 


No automatic data conversions are performed on parameters of any 
interface subprograms. It is to the programmer to ensure that 
calling conventions match and that ar^ necessary data conversions 
take place when calling interface sut^rograms. 

A pragma interface may appear within the same declarative part as 
the subprogram to which the pragma interface applies, following the 
subprogram declaration, and prior to the first \;ise of the 
subprogram. A pragma interface that applies to a subprogram 
declar^ in a package specificaticm must occur within the same 
package specification as the subprogram declaration; the pragma 
interface may not appear in the package body in this case. A pragma 
interface declaration for either a private or nonprivate subprogram 
declaration may appear in the private part of a package 
specification. 

Pragma interface for library wits is not supported. 

Refer to the LRH section 13.9 for additional information about 
pragma interface. 


F.1.2 Pragma Pack 

Pragma pack is isplemented for cos^nsite types (records and 
arrays). 

Pragma pack is permitted following the ccoposite type declaration 
to \diich it applies, provided that the pragma occurs within the 
same declarative part as the conifxjsite type declaration, before any 
objects or cc»f»nents of the con{)osite type are declared. 

Note that the declarative part restriction means that the type 
declaration and acccopanying pragma pack cannot be split across a 
package specification and body. 

The effect of pragma pack is to minimize storage consumption 
discrete component types vhose ranges permit packing. Use of pragma 
pack does not defeat allocations of alignment storage gaps for some 
record types. Pragma pack does not affect the representations of 
real types, pre-defin^ integer types, and access types. 


F.1.3 Pragma Suppress 

Pragma stppress is inplemented as described in the LRM section 
11.7, with these differences: 

Presently, division_check and overflow check must be 


C-4 





APPENDIX F OF THE Ada STANDARD 


suppressed via a cooipiler flag, -£M; pragma suppress is 
ignored for these two numeric checks. 

The optional GN «» parameter name notation for pragma 
sv^ress is ignored. 

The c^tional second parameter to pragma suppress is ignored; 
the pragma always applies to the entire scope in which it 
«qppears. 


F.1.4 Pragma Shared 

Pragma shared tells the compiler that the variable specified by 
this pragma is to be shared between 2 or more tasks and that any 
vqpdate or read of this variable should be synchronized with all 
other tasks which have visibility to the data item. CASENorks/RT Ada's 
approach to shared variables is to have the cco^iler generate calls to 
a user-accessible ftinction for each read or update of to which a pragma 
shared has been applied. These functions have been implemented by 
CASEWorks/Ada and pragma shared is supported. Should a project need extra 
behaviour, such as disabling interrupts, flushing cache, or setting a 
semaphore before each update, these subprograms can be rewritten and 
recoepiled into a project library, so long as the specifications exactly 
match those specifications which follow. 

with system; 
with access_types; 
with unsigned_types; 

package pragma_shared is 

— shared get routines — 

function shared get_byte ( 

byie_p“; in access_byte_integer) 
return byte_integer; 

function shared getjunsignedjsyte ( 

unsigned_%tejp : in accessjunsigned_byte_integer) 
return unsigned_types.unsigned_byte_integer; 

function shared get_int ( 

iriEeger_p : in access_integer) 
return integer; 

function shared get_pointer ( 

ihEegerjp : in access_integer) 
return system.address; 

— shared assigns — 

procedure shared_asgn_byte ( 


C-5 









APPENDIX F OP THE Ada STANDARD 


bytejp : in acce8s_byte_integer; 

: in byte_inte 9 er); 


procedure shared asgnjunsignedjkyte ( 

b^e_p T in accessjunsi 9 ned_byte_integer; 
^^ue : in un 8 i 9 nedjbyte_inte 9 er); 

procedure shared asgn_int ( 

integerjp : in acces8_integer; 

value : in integer); 

procedure shared asgn^pointer ( 

ihEeger_p : in access_integer; 
value : in system.address); 

end pragcia_shared; 


F.1.5 Implementation-Defined Pragmas 

The following Implementation-defined pragmas are defined by 
CASEMOrks/RT Ada. 

Pragma Volatile 

F.1.7 Pragma Volatile 

This pragma applies to the same Ada types as Pragma Shared - simple 
types and access types. Pragma Volatile applied to a variable 
directs the Ada compiler to never store this variable as a register 
variable but to always perform all reads and writes to memory. 


F.2 Attributes 

All attributes described in the LRH i4)pendix A are supported. 


F.3 Standard Types 

Additional standard types are defined in CASENOrks/PT Ada: 
byte integer 
shorlE integer 
long_rnteger 
long_float 

The standard numeric types are defined as: 

type byte_integer is range -128 .. 127; 
type short_integer is range -32768 .. 32767; 


C-6 






APPENDIX F OF THE Ada STANCARD 


type 

integer 

is range -2147483648 

.. 2147483647; 

type 

long_integer 

is range -2147483648 

.. 2147483647; 

type 

float 

is digits 6 

range -3.40282E+38 . 

. 3.40282E4-38; 

type 

long_float 

is digits 15 

range -1.79769313486231E^308 
.. 1.79769313486231E^308; 

type 

duration 

is delta 0.0001 
range -86400.0000 .. 

86400.0000; 


F.4 Package System 

The specification of package system is: 

package system is 

type address is new long_integer; 

type name is (i860); 

system_name : constant name :• i660; 

storage_unit : constant :> 8; 
meinory_size : constant 1024; 


— System-Dependent Named Nusdsers 


min_int 

max_int 

maxjdigits 

maxjnantissa 

finejdelta 

tick 


: constant -2147483648; 

: constant 2147483647; 

: constant 15; 

: constant :•> 31; 

: constant 2.0 ** (-31); 

: constant :■ 20.0/1000.0; 


— Other Systeia-Dependent Declarations 
subtype priority is integer range 1 .. 250; 

The value of system.fflemory_size is presently meaningless. 
F.5 Restrictions on Representation Clauses 


F.5.1 Length Clauses 

A size specification (t'size) is rejected if fewer bits are 
specified than can accommodate the type. The minimum size of a 
conposite type may be subject to application of pragma pack. It is 
permitted to specify precise sizes for unsigned integer ranges, 


c-7 







APPDOIX F or TOE Ada STANDAKD 


e.g., 8 for the range 0..255. However, becavise of requirements 
lapsed by the Ada language definiticm, a full 32^it range of 
unsigned values, i.e. 0..(2**32)-l, cannot be defined, even using 
a size specification. 

The specification of collection size (t'storage_size) is evaluated 
at run-tia» when the scope of the type to vdiich the length clause 
i^iplies is entered, and is therefore sxibject to rejection (via 
storage error) bas^ on available storage at the time the 
allocation is made. A collection may include storage used for 
run-time administration of the collection, and therefore should not 
be expected to accomeodate a specific number of objects. 
Furthermore, certain classes of objects such as unconstrained 
discriminant array components of records may be allocated outside 
a given collection, so a collection may accommodate more cdt>jects 
than mi^t be expected. 

The specification of storage for a task activation (t'storage_size) 
is evaluated at run-time when a task to \thich the length clause 
applies is activated, and is therefore subject to rejection (via 
storage error) based on available storage at the time the 
allocation is made. Storage reserved for a task activation is 
separate from storage needed for any collecticxis defined within a 
task body. 

The specification of small for a fixed point type (t'small) is 
subject (xily to restrictions defined in the LRH section 13.2. 


F.5.2 Enumeration Representation Claxises 

The internal code for the literal of an enumeration type named in 
an enumeration representation claxise must be in the range of 
standard.integer. 

The value of an internal code may be (Stained ^ applying an 
appropriate instantiation of xmdieckedjconversion to an integer 
type. 


F.5.3 Record Representaticm Clauses 

The storage unit offset (the "at static_6imple expression" part) is 
given in terms of 8-bit storage \inits and must~be even. 

A bit positicm (the range part) applied to a discrete type 
component may be in the range 0..15, with 0 being the least 
sig^fleant bit of a component. A range specification may not 
specify a size smaller than can accommodate the component. A range 
specificatioi for a component not accommodating bit packing may 
have a hig^r xqiper bound as appropriate (e.g., 0..31 for a 
discriminant string coofxsnent). Refer to the internal data 
representation of a given component in determining the compoient 
size and assigning offsets. 


C-8 






APPDIDIX F OF THE Ada STANDABD 


Conpcments of discrete types for which bit positions are specified 
nay not straddle 16-bit word boundaries* tnless they begin at bit 
position 0. In these cases the conpiler %d.ll allocate 32 bits for the 
unit, and will not permit other coaf)Cffients to be assigned to these bits. 

The value of an alignment clatise (the c^tional at mod part) must 
evaluate to 1, 2, 4, or 8, and may not be smaller than the highest 
alignment requdred any coapcmtnt of the record. This means that 
some records may not have alignment clauses smaller than 2. 


F.5.4 Address Clauses 

An address clause may be supplied for an object (whether constant 
or variable) or a task entry, but not for a subprogram, package, or 
task unit. The meaning of an address claiise suppli^ for a task 
entry is given in section F.5.5>. 

An address expressicm for an object is a 32-bit segmented memory 
address of type system.address. 


F 5.5 Interrupts 

A task entry's address claxise can be used to associate the entry 
with a physical hardware address, valuws supplied are hardware 
dependant. See the CASEMorks/RT reference manual and the processor 
reference manual for interrupt ranges on your processor. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by 
means of type conversion. 


F.6 Implementation-Dependent Components 

No names are generated by the inplementation to denote 
inplementation-dependent components. 


F.7 unchecked Conversitms 

There are no restrictions on the use of unchecked conversion. 
Conversions between objects ^diose sizes or vhose~basic machine 
representation do not conform may result in 

Storage areas with undefined values. 

Wrong values read because of differing underlying 
representations, such as a character stored in the high-order 









APPfMDIX F OF THE Ada STANDARD 


byte of a 32-bit integer. 

Exceptions due to aisaligned data, trying to read an integer 
on a 2-byte boundary on a RISC processor, for example. 


F.8 Ii^t-Ou^t Packages 

A susnary of the ioplmentation-dependent input-output 
characteristics is: 


In calls to open and create, the "fonn” parameter aajst be the 
empty string (the default value). 

More than one internal file can be associated with a single 
external file for reading only. For writing, only one internal 
file nay be associated with an external file; do not use reset 
to get around this rule since 

- Reset from IN FILE mode to 0UT_FILE mode will raise USEJERROR 
for SequentiaJ^lO and Text_IO opened files 

- Oirect_IO files are internally buffered and output to the 
physicil file will be different and possibly w^redictable 
or corrupted. 


Temporary sequential aixi direct files are given names. 
Temporary files are deleted vAien tlwy are closed. 

In calls to reset, out_file and inout_files cannot be reset, 
except as IN FILE. This is because the underlying NFS must 
delete and attempt to recreate the file. Network timeout 
issues preclude this activity currently. 

Files cannot be deleted and recreated with the same name until 
the network timeout has expired - about 4 minutes. This 
limitation applies to deleting a file and attespting to 
recreate it within the same program, or attempting to 
re-execute the same program within this time. 

File I/O is buffered; text files associated with terminal 
devices are line-buffered. 

The packages sequential^io and direct^io cannot be 
instantiated with unconstrained conposite types or record 
types with discriminants without defa\d.ts. 


F.9 Source Line and Identifier Lengths 

C-10 







k 


APPENDIX F OF THE Ada STANDARD 


lines and identifiers in Ada scurce proorans are presently 
limited to 200 characters in length. 


C-11 



