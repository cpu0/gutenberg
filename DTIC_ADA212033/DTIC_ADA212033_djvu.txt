TrtpR2i2 QfT *im COMPILER VALIDATION SUMNftRV TflEPCTr 

NUMBER■ 890113U110024 (U) INFORMATION SYSTEMS AND 

TECHNOLOGV CENTER URIGHT-PATTERSON AF 13 JAN 89 
UNCLASSIFIED F/G 12/5 














1-25 






AD-A212 033 



AVF Control Number: AVF-VSR-223.0589 

88-09-23-RRS 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 890113W1.10024 
R.R. Software, Inc. 
IntegrAda 4.1.0 

Compaq Deskpro 286 Host and Target 



Completion of On-Site Testing: 
13 January 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB, OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 


| — ON STATEMENT A 
AppiavM f* p::b!j- relooT*” 


D- 








Appendix F: Implementation Dependencies 


F Implementation Dependencies 

This appendix specifies certain system-dependent characteristics of IntegrAda, 
version 4.1. 

F.l Implementation Dependent Pragmas 

In addition to the required Ada pragmas, IntegrAda also provides several others. 
Some of these pragmas have a textual range. Such pragmas set some value of 
importance to the compiler, usually a flag that may be On or Off. The value to he 
used by the compiler at a given point in a program depends on the parameter of 
the most recent relevant pragma in the text of the program. For flags, if the 
parameter is the identifier On, then the flag is on; if the parameter is the 
identifier Off, then the flag is off; if no such pragma has occurred, then a default 
value is used. 

The range of a pragma - even a pragma that usually has a textual range - may 
vary if the pragma is not inside a compilation unit. This matters only if you put 
multiple compilation units in a file. The following rules apply: 

1) If a pragma is inside a compilation unit, it affects only that unit; 

2) If a pragma is outside a compilation unit, it affects all following 
compilation units in the compilation. 

Certain required Ada pragmas, such as INLINE, would follow different rules; 
however, as it turns out, IntegrAda Ignores all pragmas that would follow different 
rules. 


The following system-dependent, pragmas are defined by IntegrAda. Unless 
otherwise stated, they may occur anywhere that, a pragma may occur. 

ALL_CHECKS Takes one of two identifiers On or Off ns its argument, and has a 
textual range. If the argument is Off, then this pragma causes 
suppression of arithmetic checking (like pragma ARITHCHECK - see 
below), range checking (like pragma RANGEOHECK - see below), 
storage error checking, and elaboration checking. If the argument is 
On, then these checks are all performed as usual. Note that pragma 
ALI._CHECKS does not affect the status of the DEBUG pragma; for the 
fastest run time code (and the worst run time checking), both 
ALL_CHEOKS and DEBUG should be turned Off and the pragma 
OPTIMIZE (Time) should be used. Note also that ALL_CHECKS does not 
affect the status of the ENUMTAB pragma. Combining check 
suppression using the pragma ALL_CTIEOKS and using the pragma 
SUPPRESS may cause unexpected results; it should not he done. 

Accesion For 

NTIS CRA&I 

DUG TAB 

Unannounced 

Justification 


By_ 

Distribution/ 


AvaiUUMv C 1 U".' 


1 B-2 

-*v« 

'»• *1 


; A' 

. o; | 

1 


Dist 

f\-i 

l 

>JI | 

J_L_ 









Appendix F: Implementation Dependencies 


However, AI.L_CHECKS may be combined with the IntegrAda pragmas 
ARITIICHECK and RAXGECHECK; whichever relevant pragma has 
occurred most recently will determine whether a given check is 
performed. ALL_CHF1CKS is on by default. Turning any checks off may 
cause unpredictable results if execution would have caused the 
corresponding assumption to be violated. Checks should be off only in 
fully debugged and tested programs. After checks are turned off, full 
testing should again be done, since any program that handles an 
exception may expect results that will not occur if no checking is 
done. 


ARITHCHECK Takes one of the two identifiers On Off as its argument, and has a 
textual range. Where ARITHCHECK is on, the compiler is permitted to 
(and generally does) not generate checks for situations where it is 
permitted to raise NUMERIC_ERRQR, these checks include overflow 
checking and checking for division by zero. Combining check 
suppression using the pragma ARITHCHECK and using the pragma 
SUPPRESS may cause unexpected results; it should not be done. 
However, ARITHCHECK may be combined with the IntegrAda pragma 
ALL_CHECKS; whichever pragma has occurred most recently will be 
effective. ARITHCHECK is on by default. Turning any checks off may 
cause unpt edictable results if execution would have caused the 
corresponding assumption to be violated. Checks should be off only in 
fully debugged and tested programs. After checks are turned off, full 
testing should again be done, since any program that handles an 
exception may expect results that will not. occur if no checking is 
done. 

CI.E.W'UF Takes an integer literal in the range 0..3 as its argument, and has a 
textual range. Using this pragma allows the IntegrAda run-time 
system to be less than meticulous about recovering temporary memory 
space it uses. This pragma can allow for smaller and faster code, but 
can bo dangerous; certain constructs can cause memory to be used up 
very quickly. The smaller the parameter, the more danger is permitted. 
A value of 3 - the default value - causes the run-time system to he 
its usual immaculate self. A value of 0 causes no reclamation of 
temporary space. Values of 1 and 2 allow compromising between 
"cleanliness" and speed. Using values other than 3 adds some risk cf 
your program running out of memory, especially in loops which contain 
certain constructs. 


B-3 





Appendix F: Implementation Dependencies 


DEBUG 


EN'UMTAB 


Takes one of the two identifiers On or Off as its argument, and has a 
textual range. This pragma controls the generation of line number 
code and procedure name code. When DEBUG is on, such code is 
generated. When DEBUG is off, no line number code or procedure 
names are generated. This information is used by the walkback which 
is generated after a run-time error (e.g., an unhandled exception). 
The walkbaek is still generated when DEBUG is off, but. the line 
numbers will be incorrect, and no subprogram names will be printed. 
DEBUG's initial state can be set by the command line; if no explicit 
option is given, then DEBUG is initially on. Turning DEBUG off saves 
space, but causes the loss of much of IntegrAda's power in describing 
run time errors. 

Notes: 

DEBUG shov’d only be turned off when the program has no errors. The 
information provided on an error when DEBUG is off is not very 
useful. 

If DEBUG is on at the beginning of a subprogram or package 
specification, then it must be on at the end of the specification. 
Conversely, if DEBUG is off at the beginning of such a specification, 
it must be off at the end. If you want DEBUG to be off for an entire 
compilation, then you can either put a DEBUG pragma in the context 
clause of the compilation or you can use the appropriate compiler 
option. 

Takes one of the two identifiers On or Off as its argument, and has a 
textual range. This pragma controls the generation of enumeration 
tables. Enumeration tables are used for the attributes IMAGE, VALUE, 
and WIDTH, and hence to input and output enumeration values. The 
tables are generated when EN'UMTAB is on. The state of the EN'UMTAB 
flag is significant only at enumeration type definitions. If this pragma 
is used to prevent generation of a type's enumeration tables, then 
using the three mentioned attributes causes an erroneous program, 
with unpredictable results; furthermore, th *" pe should not be used 
as a generic actual discrete typ- and in particular 

TEXT_10.EN'T'MERATION'_T0 should not be ins. Mated for the typ*. If 
the enumeration type is not needed for any of these purposes, the 
tables, which use a lot of space, are unnecessary. EN'UMTAB is on by 
default. 


B-4 




Appendix F: Implementation Dependencies 


PAGE_LENC.TH 

This pragma takes a single integer literal as its argument. It says 
that a page break should be added to the listing after each 
occurrence of the given number of lines. The default page length is 
* 32000, so that no page breaks are generated for most programs. Each 
page starts with a header that looks like the following: 

IntegrADA Version 4.1 compiling file on date at time 

RANGECHECKTakes one of the two identifiers On or Off as its argument, and has a 
textual range. Where RANGECHECK is off, the compiler is permitted to 
(and generally does) not generate checks for situations where it is 
expected to raise CONSTRAIXT_ERROR; these checks include null 
pointer checking, discriminant checking, index checking, array length 
checking, and range checking. Combining check suppression using the 
pragma RANGECHECK and using the pragma SUPPRESS may cause 
unexpected results; it should not be done. However, RANGECHECK may 
be combined with the Integr.Ada pragma ALL_CHECKS; whichever 
pragma has occurred most recently will be effective. RANGECHECK is 
on by default Turning any checks off may cause unpredictable results 
if execution would have caused the corresponding assumption to be 
violated. Checks should be off only in fully debugged and tested 
programs. After checks are turned off, full testing should again bo 
done, since any program that handles an exception may expect results 
that will not occur if no checking is done. 


SYSLIB This pragma tells the compiler that the current unit is one of the 

standard Integr.Ada system libraries. It takes as a parameter an 
integer literal in the range 1 .. 15; only the values 1 through 4 are 
currently used For example, system library number 2 provides floating 
point, support. Do not use this pragma unless you are writing a 
package to replace ore of the standard Integr.Ada system libraries. 


VERBOSE 


Takes On or Off as its argument, and has a textual range. VERBOSE 
controls the amount of output on an error. If VERBOSE is on, the two 
lines preceding the error are printed, with an arrow pointing at the 
error. If VERBOSE is off, only the line number is printed. 


VERBOSE(Off) : 


Li lie 16 at Position 5 

*ERR0R* Identifier is not defined 


B-5 



Appendix F: Implementation Dependencies 


VERBOSE(On): 

15: if X = 10 then 
16: Z := 10; 


*ERROR* Identifier is not defined 

The reason for this option is that an error message with VERBOSE on 
can take a long time to be generated, especially in a large program. 
YERBOSE's initial condition can be set by the compiler command line. 

Several required Ada pragmas may have surprising effects in IntegrAda. The 
PRIORITY pragma may only take the value 0, since that is the only value in the 
range System.Priority. Specifying any OPTIMIZE pragma turns on optimization; 
otherwise, optimization is only done if specified on the compiler’s command line. 
The SUPPRESS pragma is ignored unless it only has one parameter. Also, th? 
following pragmas are always ignored: CONTROLLED, INLINE, MEMORY_SIZE, PACK, 
SHARED, STORAGE_UNIT, and S YS T E M_N A ME. Pragma CONTROLLED is always ignored 
because IntegrAda does no automatic garbage collection; thus, the effect of pragma 
CONTROLLED already applies to all access types. Pragma SHARED is similarly 
ignored: IntegrAda's non-preemptive task scheduling gives the appropriate effect 
to all variables. The pragmas INLINE, PACK, and SUPPRESS (with two parameters) 
all provide recommendations to the compiler; as Ada allows, the recommendations 
are ignored. The pragmas MEMORY_SIZE, STORAGE_UNIT, and SYSTEM_NAME all 
attempt to make changes to constants in the System package; in each case, 
IntegrAda allows only one value, so that the pragma is ignored. 


F.2 Implementation Dependent Attributes 


IntegrAda does not provide an}' attributes other than the required Ada att 


but.es. 


F.3 Specification of the Package SYSTEM 


The package System for IntegrAda has the following definition. 


B-6 






Appendix F: Implementation Dependencies 


package Systerr. is 


-- System package fcr IntegrAda 


-- Types to define type Address, 
type Word is range 0 .. 65536; 
for Word'Size use 16; 
type Offset_Type is new Word; 
type Address is record 
Offset ; Offset_Type; 

Segment : Word; 
end record; 

Function "+" (Left : Address; Right : Offset_Type) Return 

Function (Left : Offset_Type; Right : Address) Return 

Function (Left : Address; Right : Offset_Type) Return 

Function (Left, Right : Address) Return Offset_Type; 


Address; 
Address; 
Address; 


type Name is (MS_D0S2) ; 


System_Nane : constant Name := MS_D0S2; 

Storage_Unit : constant := 8; 

Memory_Size : constant := 65536; 

— Note; The actual memory size of a program is determined 
— dynamically; this is the maximum number cf bytes in the data 
-- segment. 


53643; 


— System Dependent Named Numbers: 

”in_Int : constant := -2_147_4S: 

Nax'lnt : constant ;= 2_147_483_647; 

Ma;-:_Digits : constant := 15: 

Maxjiantissa : constant ;= 31; 

Fine_Celta : constant := 2*1.0#E-21; 

-- equivalently, 4.656512373077392578125E-10 
Tick : constant := 0.01; -- Some machines have less accuracy; 
-- for example, the IBM PC actually ticks about 
-- every 0.06 seconds. 


-- Other System Dependent Declarations 
subtype Priority is Integer range 0..0; 

type Byte is range 0 .. 255; 
for Byte'Size use 3; 


B-7 








Appendix F: Implementation Dependencies 


end System; 

The type Byte in the System package corresponds to the 8-bit machine byte. The 
type Word is a 16-bit Unsigned Integer type, corresponding to a machine word. 


F.4 Restrictions on Representation Clauses 


If T is a discrete type, or a fixed point type, then the size expression can give 
any value between 1 and 1000 bits ( subject, of course, to allowing enough bits for 
every possible value). For other types, the expression must give the default size 
for T. 


A length clause that specifies T'STORAGE_SIZE for an access type is not 
supported; IntegrAda uses a single large common heap. 

A length clause that specifies T'STORAGE_SIZE for a task type T is supported. 
Any integer value can be specified. Values smaller than 256 will be rounded up to 
256 (the minimum T'Storage_Size), as the Ada standard does not allow raising an 
exception in this case. 

A length clause that specifies T'SMALL for a fixed point type must give a value 
(subject to the Ada restrictions) in the range 
2.0 ** (-99) .. 2.0 ** 99, 
inclusive. 

An enumeration representation clause for a type T may give any integer values 
within the range System.Min_Int .. System.Max_Tnt. If a size length clause is not 
given for the type, the type's size is determined from the literals given. (If all of 
the literals fit in a byte, then Byte'Size is used; similarly for Integer and 
Long_Tnteger). 


The expression in an alignment clause in a record representation clause must 
equal 1. 

A component clause must, give a storage place that is equivalent to the default 
value of the POSITION attribute for such a component. 

A component clause must give a range that starts at zero and extends to one less 
than the size of the component. 


B-8 








Appendix F. Implement at ion Dependencies 


In tog! - Ada supports address clauses on most objects. Address clauses are not 
allowed on parameters, generic formal parameters, and renamed objects. The 
address given for an object address clause may be any legal value of typo 
System.Address. It will be interpreted as an absolute machine address, using the 
segment part as a selector if in the protected mode. It is the user's responsibility 
to ensure that the value given makes sense (i.e., points at memory, does not 
overlay other objects, etc.) \ r o other address clauses are supported. 

F.5 Implementation Defined Names 

IntegrAda uses no implementation generated names. 

F.6 Address Clause Expressions 

The address given for an object address clause may be any legal value of type 
System.Address. It will be interpreted as an absolute machine address, using the 
segment part as a selector if in the protected mode. It is the user's responsibility 
to ensure that the value given makes sense (i.e., points at memory, does not 
overlay other objects, etc.) 

F.7 Unchecked Conversion Restrictions 


Wo first make the following definitions: 

A tyf>‘ or sub typo is said to he a ?irr.f!> 

if * *• t ■- n ~ «-* 1 o t f •*• i • y ^ *■ - * ~ - r n n *•> 1 •» S ' *■ 

tho foilo• i.;r-.g two cc.nditlors: 

11 If i* is an array tyre or subtype. 

constraint is static; and 
2) If it is a composite type or subtype, 
AV.j’c subtyn.-. 


typo or a simple x:;In;r (r--sp-- i vely) 
. . t,cV u v yp if it * a t • s f < < • s 

then it is constrained and its index 

then all of its subcomponents have a 


D i :> c ;■ i rn: n a r fi 

constrain*'''. 


whir 1 , does 

records can 


not rr.ee* these conditions is called non -simple. 
h-- simple; variant records can ho simple. However, 
or. discriminants arc- non-simple (because they are 


Integrd da imposes the following restriction on instantiations of 
T * r. o h >I: c ■d_Conve:"'ior: for su-h an instantiation to he legal, both the source 


B-9 




Appendix F: Implementatiori Depend. ncios 

actual subtype and the target actual subtype must bo simple subtypos, and they 
must have the same size. 


F.8 Implementation Dependencies of I/O 


The syntax of an external file name depends on the operating system being used. 
Some external files do not really specify disk files; these are called devices. 
Devices are specified by special file names, and are treated specially by some of 
the I'O routines 

The syntax of an MS-DOS 2.xx or 3.xx filename is: 

[d:][path]filename [.ext] 

where "d ” is an optional disk name; "path" is an optional path consisting of 
directory names, each followed by a backslash; "filename" is the filename 
(maximum 8 characters); and ".ext" is the extension (or file type). See your 
MS-DOS manual for a complete description. I" addition, the following special 
device names are recognized: 

STI: MS-DOS standard input. The same as Standard_Input. Input is buffered 

by lines, and all MS-DOS line editing characters may be used, fan 

only be read. 

STD: MS-DOS standard output. The same as Standard_Output. Can only be 
w r i 11 e r. 

ERR: MS-DOS star, lard error. The output to this device cannot be 
redirected Can only be written. 

CO',’. The console d ri vb’o. Single character input with echoing. Due to the 

d“s : g-. T MS-DOS. this device ran he redirected. ( an be read and 
w rit ten 

A'"'.- The auxiliary device. Car; be read or written. 

LST. The list, (printer) device. Can only be written. 

KPD: The console input device. No character interpretation is performed, 

and there is no character echo. Again, the input to this device can 

be redirected, so it does not a/trays refer to the physical keyboard 

Tin. MS-DOS device files may also be used (CON, AFX, and PRX without 
colors ':’). For compatibility reasons, we do not recommend the use of these 
names. 


B-10 





Appendix F Imp'd,;. atatior. 0 • ■ p«■ 11d>:■ n ‘i.’s 


The MS-P ' 2.xx version of the I 0 system will do a soarch of the default 
s. arch i>at'i (sot by the DOS PATH command) if the following conditions are 


1) No dish name or path is present in the file name; and 

2) Tho name is not that of a device. 

Alternatively, you may think of the soarch being done if the file name does 
not contain any of the characters or 'V. 

Th. default search path, cannot be changed while the program is running, as 
the path is copied by the IntegrAda program when it starts running. 


Creates will never cause a path search as they must work in the current 
directory. 

rerrr.a! completion of a program, any open external files are closed. 
N- v -. rtholess, to provide portability, we recommend explicitly closing any files that 


Sharing externa! files between multiple file objects causes the corresponding 
extornal fto be opened multiple limes by the operating system. The effects of 
this are defined by your operating system. This external file sharing is only 
a!! '.;,'d if all internal fibs associated with a single external file are opened only 
f r reading (tr .de Tr,_Fi!e), and. no internal file is Created. l’se_Frror is raised if 
ti - requirements are v: dated A Re-sot to a writing mode of a file already 
l i f r r- ading aS.- raise Fse_Frror if the external file also is shared by 
a;v rher int--rr a! file 


Pi; ary I c of valu.-s T a--cess tyres will give rr.ear.ir.g'ess results and shmuhl r,..t 
b- d m. Pi. a;g. I A of typ.-s wh>h ar n not simp!- types (see definition in S.- T lor. 
F ?. ah. v-'d ad'! r*«i"s-^Krrur wh<»n the fih- is opened. Such type s reqipr-- 


'V- ' a. , 


of tf. hi .of; si,a in the- form, a capability which is not yet 


form pa ram.-ter f-.r Sequent; a I_T 0 ami Direct_IC is always expected to be M 


•unr in the re- t'c nirla^ Direct to is defined to have the ranee A .. 


■xinterne of special markers called tormina tors in a text file. 


B-ll 




Ap:v r.dix F: Implementation Dependencies 


a ! d: 'bo; a. <CR> (carriage return). Tho page terminator is the <FF> (form food) 
character; if it is not pr c-or-dod by a <I.F>. a lino terminator is also assumed. 

TV-- f i!- terminator the end -<.-f-file returned by the host operating system. If n-< 
h * ■ and nr pare terminator diroetly precedes the file terminator, they nr" 
assumed. If the Form "7." is used, the <Ctrl>-7 character also represents th>* 

• o d-"f-fiVo This form is not necessary to correctly read files produced with 

Inb-grAda and most other programs, but may bo occasionally necessary. The only 
b md forms for text files are "" (the null string) and "Z". All other forms raise 

fsf_freor. 

'. c T ~ form is the <Ctri>-Z character is ignored on input. The <CR> character 

is always ignore! < n ;r; d (They will not be returned by Get, for instance). All 
'Of r c .ntr d characters are sent directly to the user. Output of control chan 'tors 
! • ' no* afF cr the layout that Text_IO generates. In particular, output of a <I.F' 
1 • f a !._Fage dees not suppress the \*cw_Line caused by tho \'ew_Page. 

fp utput, the "Z" form causes the ond-of-fi!e to he marked by a <Ctrl>-7; 

cth- raise, r,o explicit en.d-of-file character is used. The character pair <CR> <1,F> 
is written to represent the line terminator. Because <CR> is ignored on input, this 
;•= c otpatibi" with input. 


■; - 

Te\t_ 

_I0. 

n ~ . 

V. • .1 • i t 

* h: 

is the ran 

CT 

o 

0 .. 32707 

; the t*. 

po Text_I 

0.Field 

also 

has 

t'g-' 

n 

O l-N - 

r- 











t e p t ! n n s. t 

•SF 

t rpp 


is raised 

if 

someth! r.g 

c a n n o t 

be done 

be 

cans 

e of 

t h i 

a! 

file 

' T T y 

rn; s 

u •■'V 

situations 

ar 

isc when o 

nr- attempts: 





t > J 

ere at 

'* I’ 


,*. ra 

an extern 

t-. 1 

l i 

file for -■ 

firing -. 

.'be r. the 

P \ 

orro 

i! fi’ 


a! r 

ea iy 

1' ‘ 

, f* 

n a 

diff.-rep: 

internal fib-b 







to 

c v - n * t* 

or 

r t y. 

*; ar 

e term! 

fi! 

a ’t/Vir-t; t |' t r 

n ■■ t e rn 

a’ file is 

- 1 

I . 

•ad.y 

r.pi‘i 

r 

v T* 

* i n w ( 

V; '• 

r i * 

v 

•nt intern 

1 

\ i 

fib ). 







t- p 

reset 

a r 

: i - «- 

' > a 

wrbing rp. 

■ do 

•Vher. the 

externa 

file is a 

Ire- 

tdy 


/ . . ; 

^ . • l 

n * 

1 * rc 

J - i : i ‘ 

to 


„ ., 1 

fib-'. 









to 

Wri te 

t , 

a ft; 

n a ; 

>1: (W >• i * r■, 

Ch 









erea*e 

a 

f i 1 e 

in a 

full dirot 

■tor 

y (Create) 







* ,, 

have 

m o; 

- fi! 

es r 

pen than 

the 

OS allows 

( Open . 

Create); 





* . 

r, : 1 1 > n 

n. i 

v: i-' 


V an illec 

n] 

mnd o: 







t ) 

* • 

. - 

-. c; t 


1-•-'*,-- a I 

C.\*t 

r t*v • 







r . 

r r^’i i 

: a 

fib 

U 

■ re rt r rot 

0 r r 

ed file 

e .. a i i 

pr- .-'Vif-v or 

;v 

ad- 

' ^ 1 ’/ 

f ! b>' 


* . p-l, r. ar.r o,- *-.! fibs 

* ■ ip, j ’ 1 ■ >*, j ^ *• -p fC)*'.i ,r \ c** % *i^i*^" or 

t. open a fib- f, r non-simp! - typ. without specify 
to open a devi.-c fur dir -ft T'O. 


B-12 









Appendix. F: Implementation Dependencies 


IO_Exeeptions.DEVICE_ERROR is raised if a hardware error other than those 
covered by USE_ERROR occurs. These situations should never occur, but may on 
rare occasions. For example, DEVICE_ERROR is raised when: 

- a file is not found in a Close or a Delete; 

- a seek error occurs on a direct Read or Write; or 

- a seek error occurs on a sequential End_Of_File. 

The subtypes Standard.Positive and Standard.Matural, used by some I/O routines, 
have the maximum value 32767. 

\’c package Low_Level_TO is provided. 


F.9 Running the compiler and linker 


The IntegrAda compiler is invoked using the following format: 

COMFILE [d:] filename [.ext] {/option! 

where filename is an MS'DOS file name with optional disk name [d:], optional 
extension [.ext], and compiler options {/option}. If no disk name is specified, the 
current disk is assumed. If no extension is specified, .PKG is assumed. 

The compiler options are: 

B Brief error messages. The line in error is not printed (equivalent to turning 
off pragma VERBOSE). 

D Don’t generate debugging code (equivalent, to turning off pragma DEBUG) 

F Use in-line 8087 instructions for Floating point, operations. By default the 

compiler generates library calls for floating point, operations. The 8087 may 
be used to execute the library calls. A floating point support, library is still 
required, even though this option is used. 

L Create a listing file with name filename.PRX on the same disk as filename. 

The listing file will be a listing of only the last compilation unit in a file. 
Ld Create a listing file on specified disk ’d’. Choices are '.V through ’V,". 

Ox Object code memory model. X is 0 or 1. Memory model 0 creates faster, 

smaller code, but limits all code in all units of a program to one MS-DOS 

segment (i.e., 64 kilobytes); Memory model 1 allows code sire limited only by 
your machine and operating system. See the linker (B1XD) manual for more 
information. Memory model 0 is assumed if this option is not given. The 
compiler records the memory model for which each library unit was compiled, 
and it will complain if any mismatches occur. Thus, the compiler enforces 
that if it is rur '~.ng the /ol option, then all of the withed units must 
have been comp'U- with the same option. 


B-13 








Appendix F: Implementation Dependencies 


Q 


Rd 


Sd 


T 


V\ 


Quiet error messages. This option causes the compiler not to wait for the 
user to interact after an error. In the usual mode, the compiler will prompt, 
the user after each error to ask if the compilation should be aborted. This 
option is useful if the user wants to take a coffee break while the compiler 
is working, since all user prompts are suppressed. The errors (if any) will 
not stay on the screen when this option is used; therefore, the console 

traffic should he sent to the printer or to a file. Be warned that, certain 

syntax errors can cause the compiler to print many error messages for each 

and every line in the program. A lot of paper could be used this way! Note 

that the ,'Q option disallows disk swapping, even if the /S option is given. 
Route the JRL file to the specified disk 'd'. Choices are 'A' through '\T. The 
default is the same disk as filename. 

Route Scratch files to specified disk. This option is useful if you have a 

RAM disk or if your disk does not have much free space. The use of this 
option also allows disk swapping to load package specification (.SYM) files. 
Normally, after both the compiler and source file disks are searched for .SYM 
files, an error is produced if they are not all found. However, when the /S 

option is used, the compiler disk may be removed and replaced by a disk to 

search. The linker has a similar option, which allows the development of 
large programs on systems with a small disk capacity. Note that disk 
swapping is not enabled by the /S option if the ,/Q (quiet option) is also 
given. The /Q option is intended for batch mode compiles, and its purpose 
conflicts with the disk swapping. The main problem is that when the /S 

option is used to put scratch files on a RAM disk, a batch file may stop 
waiting for a missing .SYM or ERROR.MSG file; such behavior would not be 
appropriate when 'Q is specified. 

Generate information which allows trimming unused subprograms from the 
code. This option tells the compiler to generate information which can be 
used by the remove subprograms from the final code. This option increases 
the sire of the ,.TR T . files produced. We recommend that it be used on 
reusable libraries of cod - (like frig, libraries or stack packages) - that is 
th so cnmp'IaAions for which it is like’y that some subprograms are not 
milled 

T h,r;'f point any warning messages. For mere control of warning messages, use 
the following option form (W\). 

Print only warnings of level less than the specified digit 'x'. The given 
value of \ may he from 1 to 0. The more warnings you are willing to see, 
tli ' higher the number vnij should give. 


Handle nYfra symbol table information. This is for the use of debuggers and 
other future tools. This option requires large quantities of memory and disk 
space, and thus should he avoided if possible. 

Turn on optimisation This has the same effect as if the pragma OPTIMIZE 
were set to SPACE throughout your compilation. 


6-14 






Appendix F: Implementation Dependencies 


The default values for the command line options are: 

B Error messages are verbose. 

D Debug code is generated. 

F Library calls are generated for floating point operations. 
L Xo listing file is generated. 

0 Memory model 0 is used. 

Q The compiler prompts for abort after every error. 

R The JRL file is put on the same disk as the input file. 

S Scratch files are put on the same disk as the compiler. 

T Xo trimming code is produced. 

W All warnings are printed. 

X Extra symbol table information is not generated. 

2 Optimization is done only where so specified by pragmas. 


Leading spaces are disregarded between the filename and the call to COMPILE. 
Spaces are otherwise not recommended on the command line. The presence of 
blanks to separate the options or between the filename and the extension will be 
ignored. 


Examples- 

COMPILE test/Q/L 
COMPILE test.run/V4 
COMPILE test 

COMPILE test .run /B /V/L 


The compiler produces a SYM (SYMbol table information) file when a specification 
is compiled, and a SRI. or JRL (Specification Relocatable or Janus ReLocatah'e) file 
when a body is compiled. To make an executable program, the appropriate SRL and 
JRL files must be linked (combined) with the run-time libraries. This is 
accomplished by running the TntegrAda linker, BIYD. 

The Integr \da linker is invoked using the following format: 

BHID [d:] filenarr.e [/option! 


Here "filename" is the name of the SRL or JRL file created when the main program 
was compiled (•••ithout the .SRI. or .JRL extension) with optional disk name (d:J, 
and compiler options ('option). The filename usually corresponds to the first eight 
letters of the name of your main program. -\ disk may be specified where the files 
are to be found. See the linker manual for more detailed directions. We summarize 
here, however, a few of the most commonly used linking options: 


B -15 







Appendix F: Implementation Dependencies 


E Create an EXE file. This is assumed if the ,'01 option is given. This allows 
allow a slightly larger total program size if memory model is used. 

FO Use software floating point (the default). 

F2 Use hardware (ROST) floating point. 

L Display lots of information about the loading process. 

CO Use memory model 0 (the default); see the description of the /O option in 

the compiler, above. 

01 Use memory model 1. 

Q Use quiet error messages; i.e., don’t wait for the user to interact after an 
error. 

T Trim unused subprograms from the code. This option tells the linker to 

remove subprograms which are never called from the final output file. This 

option reduces space usage of the final file by as much as 30K. 

Examples: 

BIND test 
BIND test /Q/L 
BIND test/01/L/F2 

Note that if you do not have a hardware floating point chip, and if you are using 

memory model o, then you generally will not need to use any linker options. 


B -16 








Appendix F: Implementation Dependencies 
This page intentionally left blank 


B-17 






r 




3-B3 

DTIC 


