AD-A210 808 


UNCLASSIFIED 


ski 1 *:'' c.assi 1 :Cr*' :o«- c>* i«:s paci fwv*o«-» i 


.a 




tgf 


Rf PORT OOCLiwr NT AT 1 ON PAGE 


i. Hi eon 


(2. ton ACCESS10R «: 


eiau jKsm.TnoNi 

»r 1 ! :o»’.r*i•■>~ ro>- 


3 HUJeUfc' S C4H.OC MJ«r:R 


i. TJHI (#'«H/fcf'tif ’ 

Ada Cor.piler Validation Summary Report: leleSo: l , 
IeleGenl Ada Development System, Version 1.4, Sun Micro¬ 
systems Sun-3/280 Workstation (Host) to Motorola J!YME133A- 
12C' fTarfmj 890409WI.10CH4 


.. type O' m:*dr' i pipjc: covered 

09 Apr. J 989 to 09 Apr. ]99f 


t. PiMC>A*;RD*DRD. mean Mj-HR 


ma: 


(Target 1. 


7 . AlDHORiJ , 1 

WrigTit*Patterson AFE 
Dayton, OH, USA 


t CD*>7 «a:7 0^ fcfcAi,- kjmitka, 


8. PERFOAAlRi ORDARIZAUOR ah: ADDRESS 

Wright-Patterson APB 
Dayton, OH, USA 


ic. pfio:R**< prd.’edh usr 

API A l MDRi UR2' klXEiRS 


11. COR’RO.ElAD OFFICE AA“L ARD ADDRESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 2U301-3082 


12. mpor: date 


13. RJHclR O' PA^lS 


14. WC'MtORlRD AuERDY fcA“E l ADORE SS(/F O'fit rtnt from Controlling Ofiitt) 

Wright-Patterson AFB 
Dayton, OH, USA 


IS. SECURITY CtASS (of tnn rtponj 

UNCLASSIFIED 


IS*. p'CifSJIfICAIlOR -DOWRSRADJRC 

JJlI 

K/A 


16. D1S7R1BJ110R SfATEMERI (of this Rrpon) 

Approved for public release; distribution unlimited. 


1 7. CIS : RE£»TI0s STR'E^iRT (of mt tbr.ttrt tntt x" ,r 6-of* 2C it o^rrtn: ftcn Repina) 

DTIC 

ELECTE 
AUO 0 3 19 8 9 

pQS 


It. tETRDRDS (Continue on rtvt'it l‘d( if ntttlify tno ibrntify by blot* rwmbr') 

Ada Programming language, Ada Compiler Validation Summary Kepcrt, Ada 
Cor.piler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, AKSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 


2C . ABS7R*C 1 (Continue on t’Or if nrttut’y tnaidtnhfy by blot* rujmbf') 

TeleSo'ft, TeleGen2 Ada Development System, Version 1.4, Wright-Patterson AFB, 

Sun Microsystems Sun-3/280 Workstation under Sun UNIX, Version 4.2, Release 3.5 (Host 
and Target), ACVC 1.10 

■ . / f' .. 

V J y 

DD n?55 1473 idhior o' i mov ts is obsolete ~ 

i jam n s/r 0102 * 17 >014-6601 _ UNCLASSIFIED__ 





SECURITY UASSmCAIlDR or inis PACE (^■■enPtt* Intrrfb) 
















AVF Control Number: AVF-VSR-263.0589 

89-01-25-TEL 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890409W1.10044 
TeleSoft 

TeleGen2 Ada Development System, Version 1.4 
Sun Microsystems Sun-3/280 Workstation Host and 
Motorola MVME133A-20 (MC68020) Target 


Completion of On-Site Testing: 
9 April 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 


Accesion For | 

NT1S 

CRA&I 

a 

1 one 

TAB 

□ 

U' announced 

□ 

Justification 



J Distribution 1 

J 

| Availability Copies J 


Avjit a 

i.d / or 

DiM 

Spe 

cial 

M 


_ 








Ada Compiler Validation Summary Report: 


Compiler Name: TeleGen2 Ada Development System, Version l.u 
Certificate Number: 890409W1.100^ 


Host: Sun Microsystems Sun-3/280 Workstation under 

Sun UNIX, Version ^.2, Release 3«5 

Target: Motorola MVME133A-20 (MC68020) 

(bare machine) 


Testing Completed 9 April 1 989 Using ACVC 1.10 


This report has been reviewed and is approved. 



Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH ^5^33—6503 



Adfc Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 



Department of Defense 
Washington DC 20301 





Ada Compiler Validation Summary Report: 


Compiler Name: TeleGen2 Ada Development System, Version 
Certificate Number: 890409W1.10044 


Host: Sun Microsystems Sun-3/280 Workstation under 

Sun UNIX, Version 4.2, Release 3-5 

Target: Motorola MVME133A-20 (MC68020) 

(bare machine) 


Testing Completed 9 April 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ada Validation Organization^ 
Dr. John F. Kramer 
Institute for Defense Anajlfses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 










TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CLASSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CLASS.3-1 

3-3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3-6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3-7.1 Prevalidation.3-6 

3-7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 


APPENDIX D 


WITHDRAWN TESTS 






















CHAPTER 1 


INTRODUCTION 


This Validation Summary Report (VSR5' describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of this compiler using the Ada Compiler 
Validation Capability. (ACVC)C. An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report.'' 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results.- The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 





1-1 







INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTeeh, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 9 April 1989 at San Diego CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 


Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


1-2 





INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1• Reference Manual for the Ada Programming Language , 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers * Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User’s Guide, December 1986. 


1.4 DEFINITION OF TERMS 

ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 







INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests ar* executable, 
and special program units are used tc report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
3 tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class E test is passed if <.- f ery 


Withdrawn 

test 






INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECKJFILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may net be supported by all implementations in separate 


1-5 






INTRODUCTION 


tests. However, some tests contain values that require the test to be 
custc-j.zed according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The test3 
withdrawn at the time of this validation are given in Appendix D. 


1-6 






CHAPTER 2 

CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: TeleGen2 Ada Development System, Version 1.4 

ACVC Version: 1.10 

Certificate Number: 890409W1.10044 

Host Computer: 

Machine: Sun Microsystems Sun-3/280 Workstation 

Operating System: Sun UNIX 

Version 4.2, Release 3*5 

Memory Size: 24 megabytes 

Target Computer: 

Machine: 

Board: Motorola MVME133A-20 (MC68020) 

CPU: MC68020 

Bus: VME 

I/O: MC68901 

Timer: MC68901 

Operating System: (bare machine) 


Memory Size: 


One megabyte 






CONFIGURATION INFORMATION 


Communications Network: RS232 Serial Line 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
LONG_INTEGER and LONG_FLOAT in package STANDARD. (See tests 
B86001T..Z (7 tests).) 


c. Expression evaluation. 

TL order in which expressions are evaluated and the time at which 
• traints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of * 'iuation of expressions, test results indicate the following: 

(1) Some of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assignments for subtypes are performed with the same precision 
as the base type. (See test C35712B.) 


2-2 







CONFIGURATION INFORMATION 


(3) This implementation uses no extra bits for extra precision and 
uses no extra bits for extra range. (See test C35903A.) 

(4) Sometimes NUMERIC_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) NUMERIC_ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 

CONSTRAINT_ERROR for an array having a ’LENGTH that exceeds 

STANDARD.INTEGER’LAST and/or SYSTEM.MAX_INT. 

For this implementation: 

(1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises NUMERIC_ERROR for a 
two-dimensional array subtype when the big dimension is the 
second one. (See test C3&003A.) 

(2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to a null 

array type with INTEGER'LAST + 2 components. (See test 

C36202A.) 

(3) NUMERIC_ERROR is raised when a null array type with 

SYSTEM .MAX_INT + 2 components is declared. (See test 

C36202B.) 


2-3 








CONFIGURATION INFORMATION 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. (See test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 

INTEGER'LAST components raises CONSTRAINT_ERROR when the 

length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 

either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, index 
subtype checks are made as choices are evaluated. (See tests 
C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINTJSRROR is raised after all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 






CONFIGURATION INFORMATION 


h. Pragmas. 

(1) The pragma INLINE is supported for procedures and for 
non-library functions. (See tests LA3004A..B, EA3004C..D, and 
CA3004E..F.) 


i. Generics 

(1) Generic unit declarations, bodies, and subunits can be 

compiled in separate compilations. (See tests CA1012A and 

CA3011A.) 

(2) If a generic unit body or one of its subunits is compiled or 
recompiled after the generic unit is instantiated, the unit 
instantiating the generic is made obsolete. The obsolescence 
is recognized at binding time, and the binding is stopped. 
(See tests CA2009C, CA2009F, BC3204C, and BC3205D.) 


j. Input and output 

(1) The package SEQUENTIAL_IO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECTJEO cannot be instantiated with 
unconstrained array types or record types with discriminants 
without defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

(3) Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

(4) Modes IN_FILE, OUT_FILE, and INOUT_FILE are supported for 
DIRECT_IO. (See tests CE2102F, CE2102I..J, CE2102R, CE2102T, 
and CE2102V.) 

(5) Modes IN_FILE and OUT_FILE are supported for text files. (See 
tests CE3102E and CE3102I..K.) 

(6) RESET and DELETE operations are supported for SEQUENTIAL 10. 
(See tests CE2102G and CE2102X.) 

(7) RESET and DELETE operations are supported for DIRECT_I0. (See 
tests CE2102K and CE2102Y.) 

(8) RESET and DELETE operations are supported for text files. 
(See tests CE3102F..G, CE3104C, CE3110A, and CE3114A.) 

(9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 


2-5 








CONFIGURATION INFORMATION 


(10) Temporary sequential files are given names and not deleted 
when closed. (See test CE2108A.) 

(11) Temporary direct files are given names and not deleted when 
closed. (See test CE2108C.) 

(12) Temporary text files are given names and not deleted when 
closed. (See test CE3112A.) 

(13) More than one internal file can be associated with each 

external file for sequential files when reading only. (See 
tests CE2107A..E, CE2102L, CE2110B, and CE2111D.) 

(14) More than one internal file car. be associated with each 

external file for direct files when reading only. (See tests 
CE2107F..h (3 tests), CE2110D, and CE2111H.) 

(15) More than one internal file can be associated with each 

external file for text files when reading only. (See tests 
CE3111A..E, CE3114B, and CE3115A.) 


2-6 






CHAPTER B 


TEST INFORMATION 


3-• TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 43 tests had been withdrawn because of test errors. The AVF 
determined that 314 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding tnat supported 
by the implementation. Modifications to the code, processing, or grading 
for nine tests were required to successfully demonstrate the test 
objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 

conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

TEST 
B C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

127 

1129 2019 

17 

23 

45 

3360 

Inapplicable 

2 

9 

297 

0 

5 

1 

314 

Withdrawn 

1 

2 

34 

0 

6 

0 

43 

TOTAL 

130 

1140 2350 

17 

•34 

46 

3717 


3-1 






TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

573 

544 

245 

172 

99 

160 

333 

132 

36 

250 

340 

278 

3360 

Inappl 

14 

76 

136 

3 

0 

0 

6 

0 

5 

0 

2 

29 

43 

314 

Wdra 

1 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

35 

4 

43 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 43 tests were withdrawn from ACVC Version 1.10 at the time of this 
validation: 


E28005C 

A39005G 

B97102E 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 

CE3301A 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features that 
a compiler is not required by the Ada Standard to support. Others may depend on 
the result of another test that is either inapplicable or withdrawn. The 
applicability of a test to an implementation is considered each time a 
validation is attempted. A test that is inapplicable for one validation attempt 
is not necessarily inapplicable for a subsequent attempt. For this validation 
attempt, 314 tests were inapplicable for the reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y 
C35708L..Y 
C45421L..Y 
C45641L..Y 


C35705L..Y 
C35802L..Z 
C45521L..Z 
C46012L..Z 


C35706L..Y 
C45241L..Y 
C45524L..Z 


C35707L..Y 
C45321L..Y 
C45621L..Z 


3-2 









TEST INFORMATION 


b. C355081, C35508J, C35508M, and C35508N are not applicable because this 

implementation does not support enumeration representation clauses for 
BOOLEAN types. 

c. C35702A and B86001T are not applicable because this implementation 
supports no preaefined type SHORT_FLOAT. 

d. The following 16 tests are not applicable because this implementation 
does not support a predefined type SHORT_INTEGER: 

C45231B C45304B C45502B C45503B C45504B 

C45504E 04561 IB C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 

e. C45231D, B86001X, and CD7101G are not applicable because this 

implementation does not support any predefined integer type with a name 
other than INTEGER, L0NG_INTEGER, or SH0RT_INTEGER. 

f. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because the value of SYSTEM.MAX_MANTISSA is less than 47. 

g. C86001F is not applicable because, for this implementation, the package 

TEXT_I0 is dependent upon package SYSTEM. These tests recompile 

package SYSTEM, making package TEXT_I0, and hence package REPORT, 
obsolete. 

h. B86001Y is not applicable because this implementation supports no 

predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 

predefined floating-point type with a name other than FLOAT, 
L0NC_FL0AT, or SH0RT_FL0AT. 

j. CA2CD9C, CA2009F, BC3204C, and BC3205D are not applicable because this 
implementation does not support separate compilation of generic 
specifications, bodies, and subunits, if an instantiation is given 
before compilation of its bodies or subunits. The created dependency 
is detected at bind time. 

k. LA3004B, EA3004D, and CA3004F are not applicable because this 

implementation does not support pragma INLINE for library functions. 

l. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) are 
not applicable because this implementation does not support size 
clauses for floating point types using less than 32 bits. 

m. CD2A61I and CD2A61J are not applicable because this implementation does 
not support size clauses for array types,-which imply compression, with 
component types of composite or floating point types. 

n. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for access 


3-3 








TEST INFORMATION 


types using less than 32 bits. 

o. CD4041A is not applicable because this implementation does not support 
record representation clauses with 32 bit alignment. 

p. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected by 
this compiler. 

q. AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_I0 

with unconstrained array types and record types with discriminants 
without defaults. These instantiations are rejected by this compiler. 

r. CE2102D is inapplicable because this implementation supports CREATE 

with IN_FILE mode for SEQUENTIAL_IO. 

s. CE2102E is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for SEQUENTIAL_IO. 

t. CE2102F is inapplicable because this implementation supports CREATE 

with IN0UT_FILE mode for DIRECTED. 

u. CE2102I is inapplicable because this implementation supports CREATE 

with IN_FILE mode for DIRECT_IO. 

v. CE2102J is inapplicable because this implementation supports CREATE 

with OUT_FILE mode for DIRECT_I0. 

w. CE2102N is inapplicable because this implementation supports OPEN with 
INJFILE mode for SEQUENTIAL_IO. 

x. CE21020 is inapplicable because this implementation supports RESET with 
IN_FILE mode for SEQUENTIAL_I0. 

y. CE2102P is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for SEQUENTIAL_IO. 

z. CE2102Q is inapplicable because this implementation supports RESET with 
OUT_FILE mode for SEQUENTIAL_IO. 

aa. CE2102R is inapplicable because this implementation supports OPEN with 
INOUT_FILE mode for DIRECT_I0. 

ab. CE2102S is inapplicable because this implementation supports RESET with 
IN0UT_FILE mode for DIRECT_I0. 

ac. CE2102T is inapplicable because this implementation supports OPEN with 
IN_FILE mod:,* for DIRECT_IO. 

ad. CE2102U is inapplicable because this implementation supports RESET with 
IN FILE mode for DIRECT 10. 








TEST INFORMATION 


ae. CE2102V is inapplicable because this implementation supports open with 
OUT_FIL£ mode for DIRECT_IO. 

af. CE2102W is inapplicable because this implementation supports RESET with 
OUT_FILE mode for DIRECTJEO. 

ag. CE2107B..E (4 tests), CE2107L, CE2110B, and CE2111D are not applicable 

because multiple internal files cannot be associated with the same 
external file when one or more files is writing for sequential files. 
The proper exception is raised when multiple access is attempted. 

ah. CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable because 

multiple internal files cannot be associated with the same external 
file when one or more files is writing for direct files. The proper 
exception is raised when multiple access is attempted. 

ai. CE3102E is inapplicable because this implementation supports CREATE 
with IN_FILE mode for text files. 

aj. CE3102F is inapplicable because this implementation supports RESET for 
text files. 

ak. CE3102G is inapplicable because this implementation supports deletion 
of an external file for text files. 

al. CE3102I is inapplicable because this implementation supports CREATE 
with OOT_FILE mode for text files. 

am. CE3102J is inapplicable because this implementation supports OPEN with 
IN_FILE mode for text files. 

an. CE3102K is inapplicable because this implementation supports OPEN with 
OUT_FILE mode for text files. 

ao. CE3111B, CE3111D..E (2 tests), CES^I^B, and CE3115A are not applicable 

because multiple internal files cannot be associated with the same 
external file when one or more files is writing for text files. The 
proper exception is raised when multiple access is attempted. 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, processing, 
or evaluation in order to compensate for legitimate implementation behavior. 
Modifications are made by the AVF in cases where legitimate implementation 
behavior prevents the successful completion of an (otherwise) applicable test. 
Examples of such modifications include: adding a length clause to alter the 
default size of a collection; splitting a Class B test into subtests so that all 
errors are detected; and confirming that messages produced by an executable test 
demonstrate conforming behavior that wasn't anticipated by the test (such as 
raising one exception instead of another). 


3-5 





TEST INFORMATION 


Modifications were required for nine tests. 


The following tests were split because syntax errors at one point resulted in 
the compiler not detecting other errors in the test: 

3A3006A SA3306B BA3007E BA3008A BA3008B BA3013A 

C34005G, C34005J, and C34006D required evaluation modifications because the 

tests include some comparisons that use the 'SIZE attribute under assumptions 
that are not fully supported by the Ada Standard and are subject to ARG review. 
Thus, the AVO ruled that an implementation is considered to have passed these 
tests if the only REPORT.FAILED output is because of various 'SIZE checks. This 
implementation produced the messages "INCORRECT TYPE'SIZE", "INCORRECT 
OBJECT'SIZE", and "INCORRECT 'BASE'SIZE" for C34005G and C34005J, and the 
message "INCORRECT TYPE'SIZE" for C34006D. 

3-7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced by the 
TeleGen2 Ada Development System was submitted to the AVF by the applicant for 
review. Analysis of these results demonstrated that the compiler successfully 
passed all applicable tests, and the compiler exhibited the expected behavior on 
all inapplicable tests. 


3.7.2 Test Method 

Testing of the TeleGen2 Ada Development System using ACVC Version 1.10 was 
conducted on-site by a validation team from the AVF. The configuration in which 
the testing was performed is described by the following designations of hardware 
and software components: 

Host computer: Sun Microsystems Sun-3/280 Workstation 

Host operating system: Sun UNIX, Version 4.2, Release 3.5 

Target computer: Motorola MVME133A-20 (MC68020) 

Target operating system: (bare machine) 

Compiler: TeleGen2 Ada Development System, Version 1.4 

The host and target computers were linked via a RS232 Serial Line. 

A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of implementation-specific 
values were customized before being written to the magnetic tape. Tests 
requiring modifications during the prevalidation testing were included in their 
modified form on the magnetic tape. 


3-6 






TEST INFORMATION 


The contents of the magnetic tape were loaded directly onto the host computer. 

After the test files were loaded to disk, the full set of tests was compiled and 
linked on the Sun Microsystems Sun-3/280 Workstation, then all executable images 
were transferred to the Motorola MVME133A-20 (MC68020) via a RS232 Serial Line 
and run. Results were printed from the host computer. 


The compiler was tested using command scripts provided by TeleSoft and reviewed 
by the validation team. The compiler was tested using all default ortion 
settings except for the following: 

OPTION EFFECT 


ada 

-m 

-L 


-a 


_p 


-R 


-I 


-A 


-0 D 
aid 


Invoke TeleGen2 Ada cross compiler. 

Invoke TeleGen2 Ada linker. 

Generate interspersed error listing. 

Use additional options from the named linker options 
file. 

Indicates that one or more of the subprograms being 
optimized may be called from parallel tasks. 

Indicates that one or more of the subprograms interior 
to the unit/collection being optimized could be called 
recursively by an exterior subprogram. 

Enables inline expansion of those subprograms marked 
with an inline pragma or generated by the compiler. 
Enables automatic inline expansion of any subprogram 
called from only one place, as well as those me-ked by 
an inline pragma or generated by the compiler. 
Optimizer switch which is equivalent to "-P ~R -I -A”. 
Invoke the TeleGen2 Ada cross linker. 


Tests were compiled, linked, and executed (as appropriate) using a single host 
and target computer. Test output, compilation listings, and job logs were 
captured on magnetic tape and archived at the AVF. The listings examined 
on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at San Diego CA and was completed on 9 April 1989 . 


3-7 








APPENDIX A 


DECLARATION OF CONFORMANCE 


TeleSoft has submitted the following Declaration of 
Conformance concerning the TeleGen2 Ada Development System. 


A-1 








DECLARATION OF CONFORMANCE 


Compiler Implememer: TELESOFT 

Ada Validation Facility: ASL) SCEL. W right-Patterson AFB OH 45433-6503 
Ada Compiler Validation Capability (AC\C) \ ersion: 1.10 


Base Compiler Name: 
Version: 

Host Architecture ISA: 
OS L VER *: 


Base Configuration 

TeleGen2 Ada Development System 
1.4 

Sun Microsystems Sun-3/280 Workstation 
Sun UNIX, V ersion 4.2, Release 3.5 


Target Architecture ISA: Motorola MVME133A-20 (MC68020) 

OS &: VER f: bare machine 

Implemented Declaration 

I, the undersigned, representing TELESOFT. have implemented no deliberate extensions 
to the Ada Language Standard ANSI MIL-STD-1S15A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and. as such, is responsible for maintaining said compiler(s) in 
comformance to ANSI 'MIL-STD-J815A. All certificates and registrations for Ada 
language compiler(s) list t-d in this declaration shall be made only in the owner's corporate 


»: /O &C/UJ? 


TELESOFT 
Raymond A. Parra. 


Dir^tcjr. 


Contracts Legal 


Owner's Declaration 


I. the undersigned, representing TELESOFT take full responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure of 
tne final Validation Summary Report. I declare that all of the Ada language compilers 
listed, and their host/target performance are in compliance with the Ada Language 
Standard ANSI/MIL-STD-1815A. 




TELESOFT A \ 

Raymond A. Parra, Dir^cKor, Contracts/Legal 


v./o (ZtyuJ 







APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the TeleGen2 Ada Development System, Version 1.4, as 
described in this Appendix, are provided by TeleSoft. Unless specifically 
noted otherwise, references in this Appendix are to compiler documentation 
and not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 
type LONG_FLOAT is 

digits 15 range -8.98846567431158E+307 .. 8.98846567431158E+307; 
type DURATION is delta 2#1.0#E-14 range -86400.0 .. 86400.0; 


end STANDARD; 


B-1 







APPENDIX F 


1. Implementation Dependent Pragmas 

pragma COMMENT(-'.string literal.'): 

It may oniy appear within a compilation unit. 

The pragma comment has the effect of embedding the given 
sequence of characters in the object code of the compilation unit. 

pragma LINKNAME(<subprogram_name>, <string_literal>): 

It may appear in any declaration section of a unit. 

This pragma must also appear directly after an interface pragma 
for the same <subprogram_name>. The pragma linkname has the 
effect of making string literal apparent to the linker. 

pragma INTERRUPT(Function Mapping); 

It may only appear immediately before a simple accept statement, 
a while loop directly enclosing only a single accept statement, 
or a select statement that includes an interrupt accept alternative. 
The pragma interrupt has the effect that entry calls to the 
associated entry, on behalf of an interrupt, are made with a 
reduced call overhead. 

pragma IMAGES(<enumeration_type>,Deferred) or 
pragma IMAGES(<enumeration_type>.Immediate): 

It may only appear within a compilation unit. 

The pragma images controls the creation and allocation of 
the image table for a specified enumeration type. The 
default is Deferred, which saves space in the literal pool 
by not creating an image table for an enumeration type 
unless the ’Image, ’Value, or ’Width attribute for the type 
is used. If one of these attributes is used, an image table 
is generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in 
more than one compilation unit, more than one image table is 
generated, eliminating the benefits of deferring the table. 

pragma SUPPRESS_ALL; 

It may appear anywhere that a Suppress pragma may appear as 
defined by the Language Reference Manual. The pragma 
Suppress^All has the effect of turning off all checks 
defined in section 11.7 of the Language Reference Manual. 

The scope of applicability of this pragma is the same as 
that of the pre-defined pragma Suppress. 


B-2 









2. Implementation Dependent Attributes 


’Offset Attribute 

’Offset along with the attribute ’Address, facilitates machine code 
insertions. For a prefix P that denotes a declared parameter 
object, P’Offset yields the statically known portion of the 
address of the first of the storage units allocated to P. The 
value is the object’s offset relative to a base register and is 
of type Longlnteger. 


INTEGER ATTRIBUTES 


’Extendedlmage Attribute 

Usage: X’Extended_Image(Item, Width,Base,Based,SpacelFPositive) 

Returns the image associated with Item as per the Text lo definition. 
The Text lo definition states that the value of Item is an integer 
literal with no underlines, no exponent, no leading zeros 
(but a single zero for the zero value) and a minus sign if negative. 

If the resulting sequence of characters to be output has fewer than 
Width characters then leading spaces are first output to make up 
the difference. (LRM 14.3.7:10,14.3.7:11) 

For a prefix X that is a discrete type or subtype: this attribute 
is a function that may have more than one parameter. The parameter 
Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 


B-3 







Parameter Descriptions: 


Item -- The user specifies the item that he wants the 

image of and passes it into the function. This 
parameter is required. 

Width -- The user may specify the minimum number of 

characters to be in the string that is returned. 

If no width is specified then the default (0) is 
assumed. 

Base — The user may specify the base that the image is 

to be displayed in. If no base is specified then 
the default (10) is assumed. 

Based -- The user may specify whether he wants the string 

returned to be in base notation or not. If no 
preference is specified then the default (false) 
is assumed. 

Space lf Positive - The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then 
the default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 

X'Extended_Image(5) = "5” 

X’Extended_lmage(5.0) = ”5" 

X’Extended_Image(5.2) = " 5" 

X'Extended_lmage(o.0.2) = ”101" 

X"Extended_lmage(5.4.2) = " 101" 

X ? Extended_Image(5,0,2.True) = "2#101£" 

X’Extended_Image(5,0.10,False) = "5" 

X’Extended_Image(5,0,10,False,True) = " 5" 
X’Extended_lmage(-l,0,10,False,False) = "-1" 
X’Extended_Image(-l,0,10, False, True) = "-1" 
X’Extended_lmage(-l,1,10,False,True) = "-1" 
X’Extended_Image(-l,0.2,True,True) = ”-2#l^" 
X’Extended_Image(-l,10.2,True,True) = " -2#1#" 


B-4 









"Extended Value Attribute 
Usage: X'Extended_Value(ltem) 

Returns the value associated with Item as per the Textlo definition 
The Text lo definition states that given a string, it reads an 
integer value from the beginning of the string. The value returned 
corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT_ERROR is raised. 

Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type X. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended_Valuef"5") = 5 

X’Extended_Value(" 5") = 5 

X’Extended JValue("2#101*") = 5 

X , Extended_Value( ,, -l") = -1 

X’Extended Value("-1") =-1 










‘Extended Width Attribute 


Usage: X’Extended Width(Base,Based.Space_lf_Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype; this attribute 
is a function that may have multiple parameters. This attribute 
yields the maximum image length over all values of the type 
or subtype X. 

Parameter Descriptions: 

Base ~ The user specifies the base for which the width 

will be calculated. If no base is specified 
then the default (10) is assumed. 

Based — The user specifies whether the subtype is stated 

in based notation. If no value for based is 
specified then the default (false) is assumed. 

Space_If_Positive — The user may specify whether or not the sign bit 
of a positive integer is included in the string 
returned. If no preference is specified then the 
default (false) is assumed. 

Examples: 

Suppose the following subtype was declared: 

Subtype X is Integer Range -10.. 16; 

Then the following would be true: 

X’Extended Width 
X’ExtendedWidth(lO) 

X’Extended _Width(2) 

X’Extended_Width(10,True) 

X’Extended Width(2.True) 

X’Extended _Width( 10,False,True) 

X’Extended_Width( 10,True,False) 

X’Extended_Width(10,True,True) 

X’Extended_Width(2,True,True) 

X’Extended _Width(2,False,True) 


B-6 


- 3 - "-10” 

= 3 - ”-10" 

= 5 - "10000” 

= 7 - ”-10#10#" 

= 8 — " 2 # 10000 #" 

= 3 - " 16" 

= 7 - ”-10#10#" 

= 7 - " 10# 16#" 

= 9 - " 2# 10000#" 
= 6 - " 10000 " 









ENUMERATION ATTRIBUTES 


'Extendedlmage Attribute 

Usage: X’Extended_lmage(ltem, Width,Uppercase) 

Returns the image associated with Item as per the Text lo definition. 
The Text lo definition states that given an enumeration literal, 
it will output the value of the enumeration literal (either an 
identifier or a character literal). The character case parameter 
is ignored for character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more that one parameter. The parameter 
Item must be an enumeration value. The image of an enumeration 
value is the corresponding identifier which may have character case 
and return string width specified. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Width — The user may specify the minimum number of characters to 
be in the string that is returned. If no width is 
specified then the default (0) is assumed. If the Width 
specified is larger than the image of Item, then the 
return string is padded with trailing spaces; if the 
Width specified is smaller than the image of Item then 
the default is assumed and the image of the enumeration 
value is output completely. 

Uppercase — The user may specify whether the returned string is in 
uppercase characters. In the case of an enumeration 
type where the enumeration literals are character 
literals, the Uppercase is ignored and the case 
specified by the type definition is taken. If no 
preference is specified then the default (true) is 
assumed. 


B-7 








Examples: 


Suppose the following types were declared: 

Type X is (red, green, blue, purple); 

Type Y is (V, ’B\ V, ’D*); 

Then the following would be true: 


X’Extended Image(red) 

="RED" 

X’Extended Image(red, 4) 

= "RED ” 

X'Extended Image(red„2) 

="RED" 

X’Extended lmage(red.O.false) 

= "red" 

X’Extended lmage(red, 10,false) 

= "red " 

Y’Extended Image(’a’) 

= "V" 

Y’Extended Image(’B’) 

_ mgin 

Y’Extended Image('a’.6) 

= "’a’ " 

Y’Extended Image('a'.O.true) 

= "V" 


’Extended Value Attribute 
Usage: X’Extended Value(Item) 

Returns the image associated with Item as per the Textlo definition. 
The Text Io definition states that it reads an enumeration value 
from the beginning of the given string and returns the value of 
the enumeration literal that corresponds to the sequence input. 

(LRM 14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAlNT_ERROR is raised. 


B-8 






Parameter Descriptions: 

Item — The user passes to the function a parameter of the 
predefined type string. The type of tne returned 
value is the base type of X. 

Examples: 


Suppose the following type was declared: 


Type X is (red, green, blue, purple); 

Then the following would be true: 

X’Extended_Value("red") = red 

X’Extended_Value(" green") = green 

X’Extended Value(" Purple") = purple 

X’Extended_Value(" GreEn ") = green 


’ExtendedWidth Attribute 
Usage: X’Extended Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype: this attribute 
is a function. This attribute yields the maximum image length over 
all values of the enumeration type or subtype X. 


Parameter Descriptions: 

There are no parameters to this function. This function 
returns the width of the largest (width) enumeration literal 
in the enumeration type specified by X. 


B-9 









Examples: 


Suppose the following types were declared: 

Type X is (red. green, blue, purple); 

Type Z is (Xl. X12. X123, X1234); 

Then the following would be true: 

X’Extended Width = 6 -- "purple” 

Z’Extended "Width = 5 - "X1234" 


FLOATING POINT ATTRIBUTES 
’Extended Image Attribute 

Usage: XExtended_Image(ltem.Fore, Aft,Exp,Base. Based) 

Returns the image associated with Item as per the Textlo definition. 
The Text lo definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined by the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 

For a prefix X that is a discrete type or subtype: this attribute 
is a function that may have more than one parameter. The parameter 
Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


B-10 







Parameter Descriptions: 


Item -- The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore -- The user may specify the minimum number of characters for 
the integer part of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the if based 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft -- The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no Aft is specified then the 
default (X’Digits-1) is assumed. If based notation is 
specified the trailing is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is 0 then no exponent 
is used. 

Base — The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based — The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


B — 11 





Examples: 


Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0; 

Then the following would be true: 

X’Extended lmage(5.0) = " 5.0000E—00" 

X’Extended_Image(5.0,l) = "5.0000E-rOO" 

X’Extended_Image(-5.0.1) = "-5.0000E-t-00" 

X’Extended_lmage(5.0.2.0) = " 5.0E-t-00" 

X’Extended Image(5.0.2,0,0) = " 5.0" 

X’Extended_Image(5.0,2.0,0,2) = "101.0" 

X’Extended_Image(5.0,2,0,0,2,True) = "2#101.0#" 

X’Extended_Image(5.0,2.2,3,2,True) = "2#l.l#E-r02" 


B-12 








'Extended Value Attribute 
Usage: X'Extended Value!llem) 

Returns the value associated with Item as per the Text lo definition. 
The Text lo definition states that it skips any leading zeros, 
then reads a plus or minus sign if present then reads the string 
according to the syntax of a real literal. The return value is 
that which corresponds to the sequence input. (LRM 14.3.8:9, 
14.3.8:10) 

For a prefix X that is a discrete type or subtype: this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINTERROR is raised. 

Parameter Descriptions: 

Item -- The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 

Examples: 

Suppose the following type was declared: 

Type X is digits 5 range -10.0 .. 16.0: 

Then the following would be true: 

X'Extended_Value("5.0") = 5.0 

X'Extended_ Vaiue("0.5El") = 5.0 

X'Extended Value("2#1.01#E2") =5.0 


B-13 








'Extended Digits Attribute 
Usage: X'Extended_Digits(Base) 

Returns the number of digits using base in the mantissa of model 
numbers of the subtype X. 


Parameter Descriptions: 


Base — The user may specify the base that the subtype is 
defined in. If no base is specified then the default 
(10) is assumed. 

Examples: 

Suppose the following type was declared: 


Type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 
X’Extended Digits = 5 


FIXED POINT ATTRIBUTES 
’Extendedlmage Attribute 

Usage: X ’Extended Image (Item, Fore. Aft, Exp. Base. Based) 

Returns the image associated with Item as per the Text Io definition. 
The Text_Io definition states that it outputs the value of the 
parameter Item as a decimal literal with the format defined by the 
other parameters. If the value is negative then a minus sign 
is included in the integer part of the value of Item. If Exp 
is 0 then the integer part of the output has as many digits as 
are needed to represent the integer part of the value of Item or 
is zero if the value of Item has no integer part. (LRM 14.3.8:13, 
14.3.8:15) 


B-14 





For a prefix X that is a discrete type or subtype; this attribute 
is a function that may have more than one parameter. The parameter 
Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


Parameter Descriptions: 

Item — The user specifies the item that he wants the image of and 
passes it into the function. This parameter is required. 

Fore — The user may specify the minimum number of characters for 
the integer part of the decimal representation in the 
return string. This includes a minus sign if the 
value is negative and the base with the if based 
notation is specified. If the integer part to be output 
has fewer characters than specified by Fore, then leading 
spaces are output first to make up the difference. If no 
Fore is specified then the default (2) value is assumed. 

Aft -- The user may specify the minimum number of decimal digits 
after the decimal point to accommodate the precision desired. 
If the delta of the type or subtype is greater than 
0.1 then Aft is one. If no Aft is specified then the 
default (X’Digits-l) is assumed. If based notation is 
specified the trailing is included in aft. 

Exp — The user may specify the minimum number of digits in the 
exponent; the exponent consists of a sign and the exponent, 
possibly with leading zeros. If no Exp is specified then 
the default (3 ) is assumed. If Exp is 0 then no exponent 
is ’.sed. 

Base -- The user may specify the base that the image is to be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based -- The user may specify' whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


B-15 









Examples: 


Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 1T.0; 

Then the following would be true: 

X’Extended_lmage(5.0) = " 5.00E-1-00" 

X’Extended lmage(5.0,l) = "5.00E-t-00" 

X’Extended_lmage(-5.0.1) = "-5.00E—00" 

X’Extended_lmage(5.0,2,0) = " 5.0E—00" 

X’Extended_lmage(5.0.2.0.0) = " 5.0" 

X’Extended_lmage(5.0.2.0,0,2) = "101.0" 

X’Extended_lmage(5.0,2,0,0,2,True) = "2# 101.0#" 

X’Extended_Image(5.0,2.2,3,2.True) = "2#l.l#E-t-02" 


’ExtendedYalue Attribute 
Usage: X’Extended_ v aiue(lmage) 

Returns the value associated with Item as per the Text Io definition. 
The Text lo definition states that it skips any leading zeros, 
then reads a plus or minus sign if present then read the string 
according to the syntax of a real literal. The return value is 
that which corresponds to the sequence input. (LRM 14.3.8:5, 
14.3.8:10) 

For a prefix X that is a discrete type or subtype: this attribute 
is a function with a single parameter. The actual parameter Item 
must be of predefined type string. Any leading or trailing 
spaces in the string X are ignored. In the case where an illegal 
string is passed, a CONSTRAINT ERROR is raised. 

Parameter Descriptions: 

Image -- The user passes to the function a parameter of the 
predefined type string. The type of the returned 
value is the base type of the input string. 


B-16 






Examples: 


Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.0; 

Then the following would be true: 

X’Extended_Value("5.0") = 5.0 

X’Extended Value("0.5El") = 5.0 

X’Extended Value("2#1.01#E2") = 5.0 


’ExtendedFore Attribute 
Usage: X’ExtendedFore(Base.Based) 

Returns the minimum number of characters required for the integer 
part of the based representation of X. 

Parameter Descriptions: 

Base -- The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based -- The user may specify w'hether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 


B-17 






Examples: 


Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended Fore = 3 — "-10" 

X’Extended~Fore(2) =6 - " 10001" 


’Extended Aft Attribute 
Usage: X 'Extended Aft (Base, Based) 

Returns the minimum number of characters required for the fractional 
part of the based representation of X. 


Parameter Descriptions: 

Base -- The user may specify the base that the subtype would be 
displayed in. If no base is specified then the default 
(10) is assumed. 

Based -- The user may specify whether he wants the string returned 
to be in based notation or not. If no preference is 
specified then the default (false) is assumed. 

Examples: 

Suppose the following type was declared: 

Type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended_Aft = 1 — "1" from 0.1 

X’Extended_Aft(2) =4 - "0001" from 2#0.0001# 


B-18 






3. Specification of Package SYSTEM 

PACKAGE System IS 

TYPE Address is Access Integer; 

TYPE Subprogram_Value is PRIVATE: 

TYPE Name IS (TeleGen2); 

System Name : CONSTANT name := TELEGEN2 

StorageUnit : CONSTANT := 8; 

MemorySize : CONSTANT := (2 ** 31) - 1; 

— System-Dependent Named Numbers: 

Minjnt : CONSTANT := -(2 ** 31): 

Max Int : CONSTANT := (2 ** 31) - 1: 

Max Digits : CONSTANT := 15: 

MaxMantissa : CONSTANT := 31: 

Fine Delta : CONSTANT := 1.0 / (2 ** Max Mantissa): 
Tick : CONSTANT := 10.0E-3; 


— Other System-Dependent Declarations 
SUBTYPE Priority IS Integer RANGE 0 .. 63: 
PRIVATE 

TYPE Subprogram Value IS 
RECORD 

Proc addr : Address: 

Static_link : Address: 

Global frame : Address: 

END RECORD: 

END System; 


B-19 






4. Restrictions on Representation Clauses 


The Compiler supports the following representation clauses: 

Length Clauses: for enumeration and derived integer types ’SIZE 
attribute (LRM 13.2(a)) 

Length Clauses: for access types ’STORAGE_SIZE attritube (LRMl3.2(b)) 
Length Clauses: for tasks types ’STORAGE_SIZE attribute (LRM 13.2(c)) 
Length Clauses: for fixed point types ’SMALL attribute (LRMl3.2(d)) 
Enumeration Clauses: for character and enumeration types other than 
boolean (LRM 13.3) 

Record representation Clauses (LRM 13.4) with following constraints: 

- Each component of the record must be 
specified with a component clause. 

- The alignment of the record is restricted to 
mod 2, word (16 bit) aligned. 

- Bits are ordered right to left within a byte. 

Address Clauses: for objects, entries, and external subprograms 

(LRM 13.5(a)(c)) 

This compiler does NOT support the following representation clauses: 

Enumeration Clauses: for boolean (LRM 13.3) 

Address Clauses for packages, task units, or non-external Ada 
subprograms (LRM 13.5(b)) 


5. Implementation dependent naming conventions 

There are no implementation-generated names denoting 
implementation dependent components. 


6. Interpretation of Expressions in Address Clause 

Expressions that appear in address specifications are interpreted 
as the first storage unit of the object. 


B-20 






7. Restrictions on Unchecked Conversions 

Unchecked conversions are allowed between am types or subtypes unless 
the target type is an unconstrained record or array type. 


8. I/O Package Characteristics 

Sequential lO and DirectIO cannot be instantiated for 
unconstrained array types or unconstrained types with discriminants 
without default values. 

In TEXTIO the type COUNT is defined as follows: 

type COUNT is range 0 .. 2 147 483 645; 

In TEXT IO the subtype FIELD is defined as follows: 

subtype FIELD is INTEGER range 0..1000: 

According to the latest interpretation of the LRM. during a 
TEXT IO.Get Line call, if the buffer passed in has been filled, 
the call is completed and any succeeding characters and/or 
terminators (e.g.. line, page, or end-of-file) will not be read. 

The first Get Line call will read the line up to but not 
including the end-of-line mark, and the second Get_Line will read 
and skip the end-of-line mark left by the first read. 


* 


B-21 






APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning __ Value _ 

$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..199 => 'A’, 200 => ' 1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 

*BIG_ID2 (1..199 => ’A’, 200 => *2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 

$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID*J except 
for a character near the middle. 


C1 -.99 => ’A’, 100 => *3', 
101..200 => ’A’) 


C-1 






TEST PARAMETERS 


Name and Meaning value 


$BIG_ID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for ? character rear the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 
BIG_ID1. 

$BLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 

A universal integer 

literal whose value is 
TEXT_IO.COUNT»LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM .MEMORY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


(1..99 => ’A’, 100 => *4', 
101..200 => ’A’) 


(1..197 => *0', 198..200 => "298") 


(1..195 => ’O’, 196..200 => "690.0") 


(1 => »"», 2..101 => »A’, 102 => *"’) 


(1 s> ,2..100 => 'A’,101 => *1», 
102 => »"•) 


( 1..180 => » ») 


2147483646 


2147483647 


C-2 






Name and Meaning_ 


$ DEFAULT_SY S_NAME 

Tne value of the 
SYSTEM.SYSTEM NAME. 


$FIELD_LAST 

A universal 

literal whose 
TEXT 10.FIELD'LAST. 


integer 
value is 


TEST PARAMETERS 


Value 


constant 


4DELTA_D0C 

A real literal whose value is 
SYSTEM.FINE DELTA. 


$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FL0AT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0AT, or 

L0NG_FL0AT. 

$GREATER_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE_LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRI0RITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 

$INTEGER_FIRST 

A universal integer literal 
whose value is INTEGER'FIRST. 


TELEGEN2 


2#1.0#E-31 


NO SUCH TYPE 


NO SUCH TYPE 


100000.0 


131073.0 


"BADCHAR»~/?" 


"/N0NAME/DIRECT0RY" 


-32768 


C-3 






TEST PARAMETERS 


Name and Meaning _ Value _ 

$INTEGER_LAST 32767 

A universal integer literal 
whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 32768 

A universal integer literal 
whose value is INTEGER'LAST + 1. 

$ LESS_THA N_DURATION -100000.0 

A universal real literal that 
lies between DURATION'BASE’FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST -131073.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$L0W_PRI0RITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_D0C 31 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 200 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX__INT+1. 

$MAX_LEN_INT_BASED_LITERAL (1..2 => "2:",3..197 => 'O', 

A universal integer based 198..200 => "11:") 

literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN__LEN 
long. 


C-4 





TEST PARAMETERS 


Name and Meaning _ 

$MAX_LEN_REAL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORT_FLOAT, SHORT_INTEGER, 

LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAX_INT. 

$NEW_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_SIZE. If there is 
no other value, then use 
$DEFAULT MEM SIZE. 


Value 


( 1..3 => " 16 :", 4..196 => * 0 ', 

197..200 => "F.E:") 


(1 => 2..199 => ’A’, 200 => 


-2147483648 


32 


NO SUCH TYPE 


TELEGEN2 


16#FFFFFFFE# 


2147483647 





TEST PARAMETERS 


Name and Meaning 


$NEVi_STOr _ T JNIT 

An int-eger literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOF._UNIT. If there is 
no other permitted value, then 
use value of SYSTEM•STORAGE_UNIT 

$ NEW_SY S_NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one ’IN OUT' 
parameter. 

$TICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 


8 


TELEGEN2 


32 


0.01 


C-6 




APPENDIX D 


WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 43 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clause to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 3D* 

d. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

e. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

f. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 

tests wrongly attempt to check the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3*4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 


D-1 







WITHDRAWN TESTS 


g. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

h. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

i. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

j. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

k. ED7004B, EB7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

l. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29)- 

m. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 
ARG. 

n. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

o. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERROR is expected to be 
raised by an attempt to read one object as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 

p. CE3111C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

q. CE3301A: This test contains several calls to END_OF_LINE and 
END_0F_?AGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD_INPUT (lines 103, 107, 118, 


D-2 








WITHDRAWN TESTS 


132, and 136). 

r. CE3^11B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAYOUT_ERROR is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 


D-3 







