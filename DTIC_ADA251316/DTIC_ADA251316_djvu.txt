REPORTI AD-A251 316 


PuWie raporting bunlan tor thia ootodlon i 
and maMaMfig tha data naada d , and ravi 
auggaaliona tor radueing thia bmdan, to W 
22202-430^ «id to tha Otfioa at Infonnaa 





K 4 I FormApfimved / 

I OPMNo. _ ( 

a tima tor raviaaiin g Inatrucliotra. aaarchlng abating data 
dan aatknala or any olhar aapaot ol thia oollaction el intorm 
a and Raporta. 1215 Jaltotaon Dawia I Ighar^. Suita 1204. 
ion. DC 20603. 




Rnal: 17 Dec 1991 


4.TITLEAND 

Validation Summary Report: TeleSoft, TeleGen2 Ada Compilation System 
for VAX to 80960, Version 4.1. Micro VAX 3800 under VAXA/MS Version 
V5.4(Host) Intel EXV 960 MC-MIL (i960 XA) (bare target). 91121311.11235 


6 . 

lABG-AVF 

Ottobrunn, Federal Republic of Germany 


ING ORGANIZATION NAME(S) AND 

IABG-AVF. Iixlustrieanlagen-Betriebsgeselschaft 
Dept. SZT/ Einsteinstrasse 20 
D-8012 Ottobrunn 

FEDERAL REPUBLIC OF GERMANY 


9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington. D.C. 20301-3081 


11. SUPPLEMENTARY 



B. PERFORMIN 
ORGANIZATION 

lABG-VSR 100 


10. SP0NS0RING440Nrr0RING 
AGENCY 


ELECTE 
JUN 0 41992 


12a. DISTRIBUTION/AVAILABILITY 


Approved for public release; distribution unlimited. 


13. (Maximum 200 

TeleSoft, TeleGen2 Ada Compilation System for VAX to 80960, Version 4.1, MicroVAX 3800 under VAXA/MS 
Version V5.4(Host) Intel EXV 960 MC-MIL (i960 XA) (bare target). ACVC 1.11 



15. NUMBER OF 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability. Val. Testing, Ada Val. Office. Ada Val. Facility, ANSI/MIL-STD-1815A, I 


17 . seouftif 

CLASSIFICATION 

UNCLASSIFIED 


CURITY 

UNCLASSIFED 


19. SECU 
CLASSIFICATION 

UNCLASSIFIED 



Standwd Form 296, (Rev. 2^9) 
Prescribed by ANS' Std. 
















AVF Control Number: lABG-VSR 100 
17 December 1991 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: 91121311.11235 
TeleSoft 

TeleOen2™ Ada Compilation System 
for VAX to 80960, Version 4.1 
MicroVAZ 3800 under VAZ/VMS Version V5.4 
Intel EZV 960 MC-MIL (i960 ZA) (bars target) 


Accesion For 


NTIS CRA&I 
DTIC TAB 
Ut!ar«*.0’ji»ced 
Justification 


¥ 


□ 


By. 

Dist. ibutior, / 


Availabiiity Cocos 

Dist 

Av3ii c 

,.dlor i 

Special 1 





sz based on TEMPU^TE Version 91-05-08 



Prepared By: 
lABG mbH, Abt. ITE 
Einsteinstr. 20 
W-8012 Ottobrunn 
Germany 


92 6 01 


92-14406 

iiiieiMii 







Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 91-12-13. 


Compiler Name and Version: Tale0en2™ Ada Compilation System 

for VAX to 80960, Version 4.1 

Host Computer System: NicroVAX 3800 under VAX/VMS Version V5.4 

Target Computer System: Intel BXV 960 MC-NXL (i960 XA) running 

the Ada RTS interface of Hughes O.S. 
(bare target) 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
#91121311.11235 is awarded to TeleSoft. This certificate 
expires on 01 June 1993. 


This report has been reviewed and is approved. 


(XuiLj -i 

lABG, Abt. XTE 
Michael Tonndorf 
Binsteinstr. 20 
W-8012 Ottobrunn 
Germany 


Ada JAl Or^nizat ion 

Dir^tom/^mputer S Software Engineering Division 
Xnstituccr^or Defense Analyses 
Alexandria VA 22311 



“Ma Joint Program Office 
Dr. John Solofflond, Director 
Department of Defense 









DECLARATION OF CONFORMANCE 


Customer: 

Ada Validation Facility: 

ACVC Version: 

Ada implementation: 

Ada Compiler Name and Version: 

Host Computer System: 

Target Computer System: 


TeleSoft 

5959 Cornerstone Court West 
San Diego CA USA 92121 

lABG, Dept ITE 
W-8012 Ottobrunn 
Germany 

1.11 


TeleGen2™ Ada Compilation System 
for VAX to 60960, Version 4.1 

MicroVAX 3800 

(under VAXA/MS Version V5.4) 

Intel EXV 960 MC-MIL (i960 XA) 
running the Ada RTS interface of 
Hughes O. S. (bare target) 


Customer's Declaration 


I, the undersigned, declare that TeleSoft has no knowledge of 
deliberate deviations from the Ada Language Standard ANSI/M IL- 
STD-1815A ISO 8652-1987 In the implementation listed above. 



Date: 


TELESOFT 
Raymond A. Parra 
V. P., General Counsel 


1 / 








TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 


CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-4 


CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


















CHAPTER 1 


INTRODUCTION 


The Ada in^leinentation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Coit^iler Validation Capability (ACVC) . This Validation Summary 
Report (VSR) gives an account of the testing of this Ada iit5>lementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and con^iler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to; 

Ada Validation Organization 

Conputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INTRODUCTION 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language. 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

IPro90] Ada Compiler Validation Procedures. Version 2.1, Ada Joint 
Program Office, August 1990. 

(UG89] Ada Compiler Validation Capability User's Guide, 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, O, and E tests are executable. Class B 
and class L tests are expected to produce errors at con^ile time and link 
time, respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_F1LB is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a coit^iler detects illegal language usage. Class 
B tests are not executable. Each test in this class is conpiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 










INTRODUCTION 


For each Ada iiqplenventation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described 
in the preceding paragraph, removing withdrawn tests (see section 2.1) and, 
possibly some inapplicable tests (see Section 2.2 and [UG89]). 

In order to pass an ACVC an Ada in^lementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Conpiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing con^liance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada con^iler with its host coit^uter system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the coirpliance of an Ada 
Facility (AVF) inplementation. 

Ada 

Validation 
Organization 
(AVO) 

Conpliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more con^uters and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
con^uter system may be a stand-alone unit or may consist of 
several inter-connected units. 


The part of the certification body that provides technical 
guidance for operations of the Ada certification system. 


1-3 









INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Con^uter 
System 

Inapplicable 

test 

ISO 

Operating 

System 


Target 

Conputer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A conputer system where Ada source progreuns are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization-. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial 
or complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 











CHAPTER 2 


implementation dependencies 


2.1 WITHDRAWN TESTS 


The following tests have 

been withdrawn by the AVO. 

The rationale for 

withdrawing each 

test is 

available from 

either the AVO or the 

AVF, The 

publication date 

for this 

t list of withdrawn tests is 

02 August 

1991. 

E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

B08002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2,2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are Irrelevant 
for a given Ada in^lementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
lirplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 









IMPLEMENTATION DEPENDENCIES 


The following 159 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 

C241130..Y (11 tests) C35705O..Y (11 tests) 

C35706O..Y (11 tests) C35707O..Y (11 tests) 

C35708O..Y (11 tests) C35802O..Z (12 tests) 

C452410..Y (11 tests) C453210..Y (11 tests) 

C454210..Y (11 tests) C455210.,Z (12 tests) 

C455240..Z (12 tests) C456210..Z (12 tests) 

C456410..Y (11 tests) C46012O..Z (12 tests) 

The following 20 tests checlc for the predefined type LONG_INTEGER; for this 


implementation. 

there is no 

such type: 



C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001H 

C86006C 

(n)710lF 


C35713B, C45423B/ B86001T, and C86006H chec]c for the predefined 
type SHORT_FLOAT; for this inplementation, there is no such type, 

C45531M..P and C45532M..P (8 tests) chec)c fixed-point operations for 
types that require a SYSTEM.MAXJMANTISSA of 47 or greater; for this 
inclementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) checlc that the proper exception is raised if 
MACHINE_OVERFLOWS is FALSE for floating point types; for this 
implementation, MACHINE_OVERFLOWS is TRUE. 

B86001Y checks for a predefined fixed-point type other than DURATION; for 
this inq^lementation, there is no such type. 

CA2009C and CA2009F check whether a generic unit can be instantiated 
before its body (and any of its subunits) is conpiled; this 
in^lementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE for 

procedures and functions; this Jjqjlementation does not support pragma 
INLINE. 

CD1009C uses a representation clause specifying a non-default size 
for a floating-point type; this in^lementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types; this implementation 
does not support such sizes. 


2-2 









IMPLEMENTATION DEPENDENCIES 


The following 264 tests check operations on sequential, text, and 
direct access files; this implementation does not support external 
files: 


CE2102A. C 

(3) 

CE2102G..H 

(2) 

CE2102K 


CE2102N..y 

(12) 

CE2103C,.D 

(2) 

CE2104A..D 

(4) 

CE2105A..B 

(2) 

CE2106A..B 

(2) 

CE2107A..H 

(8) 

CE2107L 


CE2106A..H 

(8) 

CE2109A..C 

(3) 

CE2110A..D 

(4) 

CE2111A..1 

(9) 

CE2115A..B 

(2) 

CB2120A..B 

(2) 

CE2201A..C 

(3) 

EE2201D..E 

(2) 

CE2201F. .N 

(9) 

CE2203A 


CE2204A..D 

(4) 

CE2205A 


CE2206A 


CE2208B 


CE2401A..C 

(3) 

EE2401D 


CE2401E.-F 

(2) 

EE2401G 


CE2401H..L 

(5) 

CE2403A 


CE2404A..B 

(2) 

CE2405B 


CE2406A 


CE2407A..B 

(2) 

CE2408A..B 

(2) 

CB2409A..B 

(2) 

CE2410A..B 

(2) 

CE2411A 


CE3102A..C 

(3) 

CE3102F..H 

(3) 

CE3102J..K 

(2) 

CE3103A 


CE3104A..C 

(3) 

CE3106A..B 

(2) 

CE3107B 


CE3108A..B 

(2) 

CE3109A 


CE3110A 


CE3111A..B 

(2) 

CE3111D..E 

(2) 

CE3112A..D 

(4) 

CE3114A..B 

(2) 

CE3115A 


CE3119A 


EE3203A 


EE3204A 


CE3207A 


CE3208A 


CE3301A 


EE3301B 


CE3302A 


CE3304A 


CE3305A 


CE3401A 


CE3402A 


EE3402B 


CE3402C. .D 

(2) 

CE3403A..C 

(3) 

CE3403E..F 

(2) 

CE3404B..D 

(3) 

CE3405A 


EE3405B 


CE3405C..D 

(2) 

CE3406A..D 

(4) 

CE3407A..C 

(3) 

CE3408A..C 

(3) 

CE3409A 


CE3409C..E 

(3) 

EE3409F 


CE3410A 


CE3410C..E 

(3) 

EE3410F 


CE3411A 


CE3411C 


CE3412A 


EE3 112C 


CE3413A..C 

(3) 

CB3414A 


CE3602A..D 

(4) 

CE3603A 


CE3604A..B 

(2) 

CE3605A..E 

(5) 

CE3606A..B 

(2) 

CE3704A,.F 

(6) 

CE3704M..0 

(3) 

CE3705A.,E 

(5) 

CE3706D 


CE3706F. .G 

(2) 

CE3804A..P 

(16) 

CE3805A..B 

(2) 

CE3806A..B 

(2) 

CE3806D..E 

(2) 

CE3806G..H 

(2) 

CE3904A..B 

(2) 

CE3905A..C 

(3) 

CE3905L 


CE3906A..C 

(3) 

CE3906E..F 

(2) 


2-3 











IMPLEMENTATION DEPENDENCIES 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 15 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original testa. 

B71001Q BAIOOIA BA2001C BA2001E BA3006A 

BA3006B BA3007B BA3008A BA3008B BA3013A 

C52008B was graded passed by Test Modification as directed by the AVO. This 
test uses a record type with discriminants with defaults; this test also 
has array components whose length depends on the values of some 
discriminants of type INTEGER. On elaboration of the type declaration, 
this implementation raises NUMERIC__ERROR as it attempts to calculate the 
maximum possible size for objects of the type. The AVO ruled that this 
behavior was acceptable, and that the test should be modified to constrain 
the subtype of the discriminants. Line 16 was modified to create a 
constrained subtype of INTEGER, and discriminant specifications in lines 
17 and 25 were modified to use that subtype; these lines are given below: 

16 SUBTYPE SUBINT IS INTEGER RANGE -128 .. 127; 

17 TYPE REC1(D1,D2 : SUBINT) IS 

25 TYPE REC2(D1,D2,D3,D4 : SUBINT 0) IS 


CA2009C and CA2009F were graded inapplicable by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies malces the compilation 
unit that contains the instantiations <^solete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are conpiled after the units that contain the 
instantiations, and this iirqplementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the coitpilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all intended 
errors were then detected by the compiler. 


2-4 





CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 


For technical and sales information about this Ada implementation, 
contact: 


TeleSoft 

5959 Cornerstone Court West 
San Diego, CA 92121-3731, USA 
(619) 457-2700 


Testing of this Ada in^lementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Inclementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 


3-1 










PROCESSING INFORMATION 


The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of Applicable Tests 3603 

b) Total Number of Withdratm Tests 95 

c) Processed Inapplicable Tests 49 

d) Non-Processed I/O Tests 264 

e) Non-Processed Floating-Point 

Precision Tests 159 


f) Total Number of Inapplicable Tests 472 (c+d+e) 

g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
ta]cen on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto the host conputer via DECNET. 

After the test files were loaded onto the host conputer, the full set of 
tests except 264 I/O Tests and 159 Floating-Point Precision Tests were 
processed by the Ada inplementation. 

Test output, conquer and linker listings, and job logs were captured on a 
magnetic tape and archivcKi at the AVF. The listings examined on-site by 
the validation team were also archived. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See*Appendix B for a complete listing of 
the processing options for this isplementation. It also indicates the 
default options. The options invoked explicitly for validation testing are 
given on the two next pages, which were supplied by the customer. 


3-2 










VAX/80960 PREVALIDATION 


ATIACHMENTG 


Compiler OpdoH InformatlOB 
B Tests aod E Tests: 

tsoda/E960ada/moiiitor/eiiable/Iist/viitual_q>ace* 10000 <test_iiame> 


optioii 

descriptkni 

tsada 

invoke Ada compilation system 

E960 

qiedfy the 80960 taiget 

ada 

comf^ the test 

mcMutor 

verbose mode, output pass info during cmnpiladon 

enable 

enable traceback for unaq)ected emns 

list 

generate compilation listing 

virtual__space 

memory allocation control 

<test_name> 

name of Ada source file to be compiled 


All Execution Tests except E Tests: 

tsada/E960ada/moiiitor^iitiial_space>10000/iidist <test_iume> 


option 

description 

tsada 

invoke Ada compilation system 

E960 

specify the 80960 target 

ada 

cmni^ the test 

monitor 

verbose mode, output pass info during compilation 

virtual^space 

memory allocation control 

nolist 

do not generate compilation listing 

<test_name> 

name of Ada source file tobe ccanpOed 


BIND: 

tsada/E960 biiid/moiiitor/viitual_^space * 10000 < mainjinit > 


option 

description 

tsada 

invoke Ada compilation system 

E960 

specify the 80960 target 

bind 

Innd the main unit 

moniten 

verbose mode, output pass info during compilation 

virtual_qMice 

memory aDocatica control 

<]|UU]I uiut> 

name of main compilation unit 


December 9,1991 


Page 31 











VAX/80960 PREVALIDATION 


ATIACHMENTG 


UNK; 

tsada/E960 link/monitor/options=mcmil_main.opt/enable/virtuaI=10000 < main_unit > 


option 

description 

tsada 

invoke Ada compilation system 

E960 

specify the 80960 target 

link 

link the test 

monitor 

verbose mode, output pass info during compilation 

map 

generate link map listing 

options 

spedfy linker options file 

enable 

enable traceback for unexpected errors 

viitual_space 

memory allocation control 

<mam unit> 

name of main compilation unit 


December 9,1991 


Pkge32 









APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_1N_LEN 200 — Value of V 

$BIG_ID1 {1..V-1 -> 'A', V -> '1') 

$BIG_ID2 (1..V-1 -> 'A', V -> '2') 

$BIG_ID3 (1..V/2 -> 'A') S '3' ft 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') ft ft 

(1..V-1-V/2 -> 'A') 

$BIG_INT_L1T (1..V-3 -> '0') ft "298" 

$BIG_REAL_LIT {1..V-5 -> '0') ft "690.0" 

$BIG_STRING1 ft (1..V/2 -> 'A') ft 

$BIG_STR1NG2 ft (1..V-1-V/2 -> 'A') ft '1' ft 

$BLANKS (1..V-20 M 

$MAX_LEN_INT_BASED_LITERAL 

"2:" ft (1..V-5 -> '0') ft "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16;" ft (1..V-7 -> »0') ft "F.E:" 

$MAX_STRING_LITERAL "CCCCCCCl0CCCCCCCC2 0CCCCCCCC3 0CCCCCCCC4 0 

CCCCCCCC50CCCCCCCC60CCCCCCCC7 0CCCCCCCC8 0 
CCCCCCCC90CCCCCCC100CCCCCCC110CCCCCCC120 
CCCCCCCl30CCCCCCC14 OCCCCCCCl5 OCCCCCCCl6 0 
CCCCCCCl70CCCCCCC18 OCCCCCCCl90CCCCCC199" 


A-1 











MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

SACC_SI2E 32 

SALIGMMENT 4 

$COUNT_LAST 2_147_483_646 

$DEFAULT_MEM_SIZE 2147483647 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME TELESOFT_ADA 

$DELTA_DOC 2#1,0#E-31 

$ENTRY_ADDRESS INTERRUPTl 

$ENTRY_ADDRESS1 INTERRUPT2 

$ENTRY_ADDRESS2 INTERRUPT3 

$FIELD_LAST 1000 

$FILE_TERMINATOR ASCII.EOT 

$FIXED_NAME NO_SUCH_TYPE 

$FLOAT_NAME LONG_LONG_FLOAT 

SFORM_STRING "" 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

$GREATER_THAN_DURATION 

100 _ 000.0 

$GREATER_THAN_DURATION BASE_LAST 

T31_073.0 

$GREATER_THAN_FLOAT_BASE_LAST 

3.9E+39 

$GREATER_THAN_FLOAT_SAFE_LARGE 

1.0E38 

$GREATER_THAN_SHORT_FLOAT_SAFE_LARGE 

0.0 

SHIGH PRIORITY 31 


A-2 










MACRO PARAMETERS 


$ILLEGAL_EXTERNAL_FILE_NAME1 

BADCHAR*'‘/% 

S1LLEGAL_EXTERNAL_F1LE_NAME2 

/NONAME/DIRECTORY 

$INAPPROPRIATE_LINE_LENGTH 

-1 


$INAPPROPRIATE_PAGE_LENGTH 

-1 


$INCLUDE_PRAGMA1 
$INCLUDE_PRAGMA2 
$INTEGER_FIRST 
$INTEGER LAST 


PRA(^ INCLUDE 
PRAGMA INCLUDE 
>2147483648 
2147483647 


$1NTEGER_LAST_PLUS_1 2147483648 

$1NTERFACE_LANGUAGE C 

$LESS_THAN_DURATION -100_000.0 

$LESS_THAN_DURATION_BASE FIRST 

-131_073.0 

$LINE_TERMINATOR ASCII.CR 

$LOW_PRIORITY 0 

$MACHINE CODE STATEMENT 


{"A28006D1.ADA") 

("B28006D1.ADA") 


MCI'(addi,gO,gO,gO); 


SMACHINE_CODE_TYPE 

SMANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 

$NAME_LIST 
$NEG_BASED_INT 
$NEW MEM SIZE 


INSTRUCTION; 

31 

18 

2147483647 

2147483648 

-2147483648 

SHORT_SHORT_INTEGER 

TELESOFT_ADA 

16#FFFFFFFE# 

2147483467 


A-3 










MACRO PARAMETERS 


SNEW_SYS_NAME 

TELESOFT_ADA 

$PAGE_TERMINATOR 

ASCII.FF 

$RECORD_DEFINITION 

record null; end record; 

$RECORD_NAME 

INSTRUCTION; 

$TASK_SIZE 

32 

5TASK_STORAGE_S IZE 

4096 

$TICK 

0.01 

$VARIABliE_ADDRESS 

ADDRESS1 

$VARIABLE_ADDR£SS1 

AODRESS2 

$VARIABLE_ADDRESS2 

ADDRESS3 


A-4 









APPENDIX B 


COMPILATION SYSTEM AND LINKER OPTIONS 


The conpiler and linker options of this Ada in^lementation, as described in 
this Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to con^iler documentation and not 
to this report. 


B-1 







80960 ACS Ada Compilation System 
for VAX/VMS Systems 
to Embedded 80960 Targets 


Compiler Command Options 

OPT-1941N-V1.1(VAX.E960) 02DEC91 


Version 4.01.03 



Copyright 01991, TelcSoft. All rights reserved. 

TeleSoft* is a registered trademark of TdeSoft. 

TeleGeii2^ is a trademark of TeleSoft. 

VAX* and VMS* are registered trademarks of Digital Equipment Corporation. 
InteT is a registered trademark of Intel Corporation. 


RESTRICTED RIGHTS LEGEND 

Use, dupUcadon, or disclosure by the Govemment is sulqect to restrictioiis as set forth in subparagraph 
(c) (1) (ii) of the rights in Technical Data and Computer Software clause at DFAR 2S2.227>7013, or FAR 
52.227-14, ALT III and/or FAR 52227-19 as set forth in the qiplicable Government Contract. 


TeleSoft 

5959 Cornerstone Court West 
San Die^, CA 92121-9819 
(619) 457-2700 
(Co^actor) 











Chapter 1 Contents 


1 Compiler command options. 1*1 

1.1 ADA. 1-1 

1.2 BIND. 1-16 

1.3 UNK. 1-21 

1.4 The linker options file. 1-30 

1.4.1 Options file format. 1-30 

1.4.2 Linker options and their qualifiers. 1-31 

1.43 DEFINE: Defining global symbols . 1-32 

1.4.4 EXIT: Ending user ii^ut. 1-32 

1.43 INPUT: Specifying the input. 1-32 

1.4.6 LOCATE: Specifying locations of control sections-- 1-35 

1.4.7 MAP: Producing a link map listing. 1-36 

1.4.8 OUTPUT: Specifying the ouq)ut. 1-37 

1.4.9 QUIT: Terminating options file input and linking__ 1-39 

1.4.10 REGION: Specifying a range of memory--- 1-39 

1.4.11 Example linker options file; ONKOPT. 1-39 























80960 ACS for VAX/VMS-E960 











1 

Compiler command options 


1.1. ADA 

[Compiler] 

Introduction 

After access to 80960 ACS has been established anu a library has been created, 
you can invoke the Ada compiler via the ADA command. Ibe general command 
format for compilation is 

TSADA/E960 ADA[/<quallfier>I,...]] <file> 


where 

<quallf ler> One of the qualifiers available for the compiler. 

<f ile> One in a possible series of file specifications, sqiarated 

commas, indicating the unit(s) to be compiled. If 
/INPUT_UST is used, <file> is interpreted as a file 
containing a list of files to be compiled. The default 
source file ^pe is ADA, and the default list file type is 
XIS. A file name may be qualified with a location in 
standard VAX/VMS format A source or input list file 
may reside on any directory in the ^em. 

The default qualifier settings are deseed to allow for the simplest and most 
convenient use of the compiler. For most applications, no additional qualifio* 
setting need be specified. However, optional qualifiers are provided to 
perform special functions. 


OFT-1941N.V1J(VAXJ»60) 02DEC91 


1*1 









ADA 


80960 ACS for VAX/VMS-E960 


Qualifiers 

/ABORT COUNT=<n> 

/ABORT~COUNT=999 (defauH) 

The /ABORT_COUNT qualifier is an execution control qualifio* for the 
con^iler. It allows you to set the maximum number of m'ors the compiler can 
locate before it aborts. This qualifier can be used with any combination of 
compiler cations. The minimum value is 1 and the default value is 999. 

The con^iler maintains separate counts of all syntactic orors, sonantic otots, 
and warning messages issued during a compilation. If any of these counts 
becomes too great, you may want to abort Ae con^pilation. If the con^Q^ 
does find errors, you can abort the compilation altering control-Y C^Y) or 
you can wait until the checking is completed. The /ABORT_COUNr 
qualifier allows you to determine the number of errors that you believe is 
reasonable before the conqiSo: aborts. 

/ASSEMBLY_CODE[= <file>] 

/NOASSEMBLY_CODE (default) 

With the /ASSEMBLY_CODE qualifier, you can obtain an assembfy listing of 
compiler generated code for a unit or a collection. You can use this qualifier 
with the compiler, the binder and the optimizer m the same way. The listing is 
similar to that produced with the /MACHINE_CODE qualifier, except that it 
will not contain location or o&et information. 

The file produced with the /ASSEMBLY CX>DE qualifier is suitable as iiqiut 
to an assemble. In contrast, the file proceed /MACHINE CODE is 

more suitable for human readabili^. The default ffle name is the same as it 
would be for /MACHINEjCODE, Le., the unit name being con^iled. 
/ASSEMBLY_CODE and /MACHINE_CODE are mutualfy exdusive. 

/BIND[s <main>][<qualifier>] 

/NOBIND (default) 

This qualifier, when used with the compiler, enables you to bind a main 
program more efficiently by combining the binding process with the 
compilation process. This feature is especially usefhl when compiling single¬ 
unit test programs. The binding of more than one main program is not 
supported though programs that contain mult^le con^^tion units may be 
bound. 

If you do not specify a main unit with the /BIND qualifier, the last unit to be 
compiled will be the unit that is bound as a main unit 


1-2 









Command options 


ADA 


Default settings for the qualifier values were chosen for the simplest and most 
convenient use of the binder. For most applications, no additional qualifiers 
are required. Optional qualifiers are provided, as shown in the list that 
follows. For more information on these qualifiers, see the BIND command in 
this “Command Summary” chapter. 


/LIBFILE Specify a library other than the default 

UBLSTj\LB. 

/TEMPLIB Specify a library other than the default 

LIBLST.ALB. 

/SHOWTASKEXCEPTIONS 

Cause unhandHed exceptions in tasks to be 
reported in the same manner as those that occur 
in the main program. 

/TASK_S’IACK._SIZE Set the default amount of stack to allocate from 

the Ada heap for each task. 

/TIME_SLICEjQUANTUM Specify the amount of time, in milliseconds, in* 

which a task is allowed to execute before the 
run>time switches control to anothor ready task of 
equal priorify. 

/TRACEBACK Set the dq)th of the run-time excqition traceback 

rqx)rt 


Note: The main program unit must be located in the working sublibrary. If this 
is not the case, reorder the sublibraries in the library ffle or use Ae 
library manager’s MOVE or COPY commands to move or copy the unit 
to the working sublibrary. 

If these conditions are met, you may proceed to bind and link the program. 

/CONTEXT=<n> 

/CONTEXT^I (deteuK) 

When an oror message is ouq)ut, it is hdpfiil to include the lines of the source 
program that surround the line containing the error. These lines provide a 
context for the error in the source program and he4> to clarify the nature of the 
error. The /CONTEXT qualifier controls the number of source lines that 
immediately precede and follow the error. The qualifier affects the error 
messages ouq)ut on SYSSOUTPUT. The default setting for this qualifier is 1. 


OFT-1941N-V1J(VAXJE960) 02DEC91 


1-3 











ADA 


80960 ACS for VAX/VMS-E960 


/COPY SOURCE 
/NOCOPY_SOURCE 

This qualifier tells the compiler to take the source file and store it in the Ada 
library. When you need to retrieve your source file later, use the EXTRACT 
conunand. 

/DEBUG 

/NODEBUG (defduK) 

To use the debugger, you must conq>ile, or assonble and link program units 
using the /DEBUG qualifier. This enstires that source debugging information 
is properly stored for later use the debugger. The /DEBUG qualifier 

causes the compiler to save Hi^ Form for debugging purposes. It also causes 
the compiler to generate Debugging Information (DI) for any unit that is to be 
used wiA the debugger. 

Because this qualifier is positional, the debug information is generated onfy for 
the specified ffles. For example, 

$ TSADA/E960 ADA A.B/DEBU6.C 

compiles AADA and B ADA without dd>ugging informatioD, and conq>iles 
CADA with debugging information. For information on positional qualifiers, 
see the “Overview” chapter in the Overview and Command Summary. 

The default setting of this qualifira- is /NODEBUG. The use of /DEBUG 
oisures that the High Form and dd>ugga’ information for secondary units are 
not deleted. While the compilation time ov^head generated by use of 
/DEBUG is minimal, retaining this optional information in the Ada Library 
increases the space overhead. To che^ if a compilation unit has been 
compiled using /DEBUG, use the SHOW/EXTENDED command for the 
unit 

/DIAGNOSTICS[= <flle>] 

/NODIAGNOSTICS (default) 

If warnings or mors are encountered during con^ilation, this qualifier 
specifies that the compfler or binder is to produce a diagnostks file (with the 
file type .DIA). This file contains information that allows you to use the \AX 
Language Sensitive Editor (LSE) to quiddy correct source mors. More 
information can be found in the LSE 

This qualifio* is positional, so the location of the command and its parameters 
on the conunand line is important Onfy diagnostics files for the specified files 
are goierated. 


1-4 









Command options 


ADA 


/ENABLE TRACEBACK 

/noenabLe_traceback (default) 

In the unlike^ event that you should receive an Unesqpeaed Error Condition 
message, you should contact Customer Support Customer Siqiport may 
request that you provide additional information about the error condition 
including the /ENABLEJTRACEBACK qualifier in the con^iler invocation 
that fails. This qualifier allows the tool to display the accq)tion tracd)ack 
associated with the unecqiected error condition. The information provided in 
the traceback will allow Customer Support to diagnose the problem more 
eSicientfy. 

/GRAPH[=<file>] 

/NpGRAPH (default) 

The /GRAPH qualifier is used with the optimizer (/OPTIMIZE) vdiile 
compiling to generate a textual representation call graph for the unit being 
con^iled and optimized. This qualifier is positicmal, so the location of the 
command and its parameters on the command line is in^xirtant The iq)ecified 
parameters for /GRAPH are the gr^h files to be generated For instaiKre, the 
command 

TSADA/E960 ADA/OPTIMIZE-ALL A.B/GRAPH, C 

compiles A-ADA, th«i sends a gnq)h to B.GRF, then compiles CADA. For 
information on positional qualifiers, see the “Ovoview” dipto- in the 
Overview and Convnand Summary. 

The default setting is /NOGRAPH. If you spedSy grtph, the following file 
specifications can result: 

<f lle> A name you specify for the file to which the genmited 

graph is sent 

<unlt>. GRF A name provided for the file by default, where <unit> is 

the name of the unit being con^>iled when optimizing 
during conpilation. 

If multple units are being optimized and call graphs are desired /GRAPH 
should be used without spedfying a file name. The grtph for each unit will be 
located in a sq)arate file named afto* the unit If you q)ecify a <file>, 
separate versions of the file will be created for earh unit 


OPT-1941N.V1.1(VAXJB960) 02DEC91 


1-5 








ADA 


80960 ACS for VAX/VMS-E960 


/INPUTUST 
/NOINPUT_UST (default) 

As a default, the file list q}edfied in the TSADA/E960 command is the list of 
specifications of the files containing the Ada units to be con^iled When you 
specify the /INPUT_LIST qualifier, the con^iler assumes that the command 
parameters are specifications of files which contain lists of source files to be 
compiled. When this qualifier is used, the iiq)Ut files should contain the source 
file specifications, one per line. For .exanq>le, to conq>ile source files 
CAIjC_ARrnLADA and CALC_MEM.ADA in the curroit d^ult directory 
and file CA1 jC_IOADA in directory [CIOSRC], you could first prq)are a file 
CAIjC_COMPILE.OS containing the following text: 

CALC ARITH 
CALCJIEM 
ICIOSRC]CALC_I0 

The command: 

$ TSADA/E960 ADA/INPUT_LIST CALC^COMPILE.LIS 
would then cause these three files to be compiled in sequence. 

In addition to the names of the source files, the iiq)ut list may contain 
comments in Ada syntax, ie., all text on a line including and following the 
comment marker will be ignored 

/INPUTJLIST is a positional qualifier. Ibe specified parameters are input 
lists, and all other parametos are source files. For exanq)le, the command 
line 

$ TSADA/E960 ADA A.B/IMFDT_LIST,C 

compiles AADA first It then compiles all files in B.LIS, and finalfy, it 
compiles CADA. 

/INPXJr_LlST has the same advantages and effects as a multi-file compilation 
specified on the command lin& See the “Con^ila^’ dieter in User Guide, 
Part A for a full descr^tion. /INPUT_L1ST is useful when a long list of files 
to con^ile has been readify obtained from a directory listing or a SHOW 
library rqwrt 

When the /INPUr_LIST qualifier is used in conjunction with the default 
/UPDAIE qualifier, the working sublibraiy is i^dated after each unit that 
successfully compiles. If a unit in the list fails to conq>ile due to errors, the 
sublibraiy is still updated for all other successfully compiled units b^ore and 
aftOT it in the list If /NOUPDATE is used the sublibraiy is not i^xlated for 
any unit if one unit fafls to cotiqiile. See the /UPDATE entiy in this ^ipendix 
for more infonnation. 


1-6 









Command options 


ADA 


If the /BIND qualifier is used with the /TNPUTJLIST qualifier, the main 
program unit liame may be given as the value of the /BIND qualifier to 
identify which unit in the list is the main program. If not specified, the last unit 
of the input list is assumed to be the main prc^am. 

/UBFILE=<fiie> 

/UBFILE^UBLST (deteult) 

By default, the library file named LIBLST with a default type of .ALB is used 
by the 80960 ACS tool set to determine which set of sublibi^es are to be 
referred to during the operation of the tool Ibis file must be present in the 
working directory. With the /UBFUJE qualifier, you can qjedfy a library 
other than the default, LTBLCT. The /TEMPLIB qualifier may also be used to 
create an alternative library. Howevor, the /TEMPUB and /UBFUE 
qualifiers are mutually estdusive; onfy one or the other qualifier may be used at 
the same time. 

When you specify the /LEBFILE qualifier, you indicate the file specification of 
an alternative library ffle that contains the list of sublibraries and optional 
comments. If you do not specify a file type with the file name, the system uses 
the file fype ALB. 

For example, consider a library file named WORKUB ALB with the contrats: 

Name: NTVORK 

Name: [CALCFROJ]CALCLIB 

Name: TSADA$E960:[LIB]RTL_960.SUB 

You could specify 

$ TSADA/E960 AUA/LIBFILE-VORKLIB 

As an alternative to using /LEBFILE, you may assign the library file 
specification to the lo^cal name LIBLST. For exanq)le, 

$ ASSIGN WOKKLIB.ALB LIBLST 

/LINKS <niain > [<quaiifier>] 

/NOUNK (default) 

This qualifier invokes the linko- when you are compiling. Using onfy one 
conunand line, you can cmnpile, bind and link a program. This feature can be 
very useful when conq)iling single-unit test programs. If you are using the 
ADA command to invoke the linker, the program must be compiled and bound 
as well as linked. Because you carmot bind more than one main program when 
you con^ile and bind in the same process, you also carmot link more than one 
main program. You can ctHiq}ile, bind and link programs that contain mult^le 
con^ilation units. 


OPT-1941N-V1.1(VAXJ»60) 02DEC91 


1-7 










ADA 


80960 ACS for VAX/VMS-E960 


Default settings for the /LINK qualifier values are similar to those used with 
the standalone invocation of the linker. For most applications, no additional 
qualifio^ are required. Optional qualifio's are provided, as shown in the list 
that follows. For more information on these qualifiers, see the LINK 
command in this “Command Summary” chapter. 


/BASE 

/EXCLUDED 

/FORMAT 


/IMAGE 

/LOAD_MODULE 

/LOCALS 

/MAP 

/OFORM 

/OPTIONS 

/PAGE 

/SYMBOL_FILE 

/VIRARS_SIZE 

/WIDTH 


Specify the starting location of the linked output 

Show the excluded sul^ograms in the link map. 

Output a load module in one of these formats: 
Td^oft EFORM, Motorola S-records, IEEE- 
695 object format, Mkrotec S-records, OASYS 
object format, or a user-adapted object module 
format 

Indude a memory image listing in the link map. 

Specify the VMS file name for the load module 
ouqjut created by the linker. 

Indudes local ^mbols in the link map i^bol 
listing. 

Requests and controls a link mq> listing. 

Specifies that one ouqrut of the linker is to be 
linked OF. 

Specifies that the linker is to process additional 
options obtained inta-activefy, or from a linko* 
cations file. 

Output a user-specified number of lines po* 
listing page. 

This qualifier produces a file that contains all of 
the global symbols used in the link. The default 
file name is <main>.SYM., 

Specifies the amoimt of qrace, in kilobytes, of 
buffer ^>ace to be allocated for the linker. 

Specifies the width of the lines in the listing file. 


1-8 









Command options 


ADA 


/UST=<fIle> 

/NOUST (default) 

The /LIST qualifier to the ADA compiler command produces a file containing 
a source listing with numbered lines and any error messages. This qualifier is 
positional, so the location of the qualifio- and its parameters on the command 
line is in^rtant. A list will only be generated for the specified parameters. 

For information on positional qualifiers, see the “Overview” ch^ter in the 
Overview and Command Summary. 

The compiler always ouq)uts error messages to the device specified 
SYSSOUTPUT. The /LIST qualifio^ causes the error listing to be 
incorporated in the source listing file as welL The ddault listing contains the 
OTors intermixed with the source code. 

You can provide a file specification to the /LIST qualifier which indicates the 
VMS file to receive the error ouq)ut 

The default is /NOUST. The /NOUST qualifier will siqipress error output to 
the listing file. 

If the /UST qualifier is used without a file specification, the error output is 
sent to the file named <file> .US, where <file> is the name of the source file 
being con^)iled. If you provide a file specification, the ouq)ut is sent to the 
specified file instead of <file> US. If your file ^)ecification does not include 
a file Qpe, the ^em gives the file the Qpe, US. 

If a file name is specified and mtilt^le source files are being compiled, the 
listing for each file is ouqjut to a sq)arate vo^icm of the file name ^)ecified. 

/MACHINE_CODE[= <file>] 

/NOMACHINE_CODE (default) 

The /MACHINEjOODE qualifier allows you to obtain an assembly listing of 
the code that the conqiiler generates for a unit or a collectioiL The listing 
consists of assembly cixle intmnixed with source code as ocHnments. Note that 
the listing generate by this qualifier is indq)endent of the source/error listing 
gen^ated by the /UST qualifier. The default for this qualifier is 
/NOMACHINE_CODE. 

The listing output is s«it to a file named <unit>_.S if the unit is a library unit, 
and < unit >.S if the unit is a secondary unit < unit > is the name of the 
con^ilation unit that is being listed. 

If mult^le compilation units are being con^iled and you have provided a file 
specification, the machine code listing for eadi con^ilati(Hi unit will be ouq)ut 
to a differoit version of the same file name. 


OFT-1941N.V1.1(VAXJE:960) 02DEC91 


1*9 









ADA 


80960 ACS for VAX/VMS-E960 


If the con^ilation unit name is longer than 39 characters, the name will be 
truncated at 39 characters. No listing will be goio'ated if there are ^tactic or 
sonantic errors in the compilation. 

/MONITOR 

/NOMONITOR (default) 

Normally, the only visible ou^ut produced by the 80960 ACS tool set during 
operation is error or warning messages. The /MONITOR qualifier oiables 
the reporting of version numbers and messages that allow you to monitor the 
tool’s progress. When you specify /MONITOR, the output is sent to standard 
ouq)ut (SYSSOUTPUT). 

/OBJECT (default) 

/NOOBJECT 

The /NOOBJECI qualifio* instructs the compiler to perform syntactic and 
sonantic anafysis of the source program without generating object code. 
/NOOBJECI sets a default of /NOSQUEEZE to ensure that the High Form 
and Low Form are preserved for secondary units. The d^ult setting is 
/OBJECT, which allows the generation of object code. . 

/OFnMIZE[s <option > [,...]][<qualifier>] 

/NOOPTIMIZE (deiault) 

The /OPTIMIZE qualifier causes the compila* to invoke the optimizer to 
c^tinuze the Low Form generated 1^ the middle pass for the unit being 
con^iled The code generator takes the (^timized Low Form as input and 
produces more eSidoit object code. 

/NOOPTIMIZE is the default The /NOOPTIMIZE qualifier gives the 
quickest compilation turnaround, but does not perform many co^ 
qrtimizations. This results in code that may run slowo’ and be largo’ than 
normal. Code intended for use with the d^ugger must be conqriled with 
/NOOPTIMIZE. You should be fa miliar with the information on the 
optimizer presented in User Guide, Fart A before you use this qualifier. 

This qualifier is positional, so the location of the qualifio and its parameters is 
important /OPTIMIZE will onfy q>timize the qrecified parameters. For 
example, the qualifier may appear on both on the vob that is changing the 
defaidt and on one or more parameters. The verb qualifier indicates that all 
parametors wiU be optimized. The parameter qualifier indicates that Y is not 
to be qrtimized 

$ TSADA/E960 ADA/OPTIMIZE Z.T/NOOPTIMIZE,Z 

The result is that XADA is corrqjfled and optimized, followed by the file 
YADA. The file 2LADA is compiled, but not optimized. 


1-10 









Command options 


ADA 


TTiere are two parameters that are used with /OPTIMIZE. These are: 

<option> An c^tunizo' option used on the command line. A list of 
these options would be separated commas. 

<q\iallf ler> The qualifio' /NOGRAPH or /GRAPH[= <file>] 

/NOGRAPH is the default value. /GRAPH generates a 
call gr^h for the unit being con^iled. The ddault ou^ut 
file is <unit>.GRF when you do note ^lecify a <file>. 
(See Ae “Optimizer” chapter in User Guide, PartB for 
more information on Ae gotoated graph.) 

You can specify zero or more opAnizo’ options to control optimization. These 
options are listed here brieffy. For more information on Aese (ptions, see Ae 
OPTIMIZE command in this diapto-. 


Table -L Optimizer Optkms 


Options 

De&ults 

€>penition 

ALL 1 NONE 1 SAFE 

SAFE 

Enable/disable certain 
optimizations, or pennit 
onfy safe cptimizations. 

[NOJAUTOINLINE 

ADTOINLINE 

Controls automatic inlining. 

[NOlINLINE 

INLINE 

Enables inline epansion of 
subprograms. 

[NO]PARALLEL 

PARALLEL 

Subprograms may be called 
from paralld taslb. 

[NO]RECURSE 

RECURSE 

Subprograms may be called 
recursivefy. 


/SQUEEZE (detautt) 

/NOSQUEEZE 

When you compile an Ada program, Ae compiler stores two intermediate code 
rq)resentations of Ae program in Ae library. These code rq)resaitations are 
known as High Form and Low Form. Hi^ Form must be retained for a 
library unit because it is required for Ae compilation of any units that 
refo-ence it 

For example, a conpiled package pecifkation’s Form are used by Ae 

correponding package b^ when it is conpiled However, intermediate 
forms of a secondary unit such as a package body, may frequentfy be 
discarded after its compilation. Dis(^ding this iMormation results in a 
significant decrease in library size (typically SO to 70 percent for multi-unit 
programs). 


OFT.1941N-V1J(VAXJ:960) 02DEC91 


1-11 










ADA 


80960 ACS for VAX/VMS-E960 


The /SQUEEZE qualifier can be used with the conq>iler or the optimizer 
(OPTIMIZE). Using the /SQUEEZE qualifier during conq)ilation causes the 
intermediate forms to be discarded after compilation, if possible. 
/NOSQUEEZE causes the full Intennediate forms to be saved in all cases. 

Note: The optimizer (OPTIMIZE), and cross-referencer (XREF) 

programs require unsqueeze units. If you are going to use one of 
these programs, you must compile the units using /NC^QUEEZE. 

The default for this qualifier is /SQUEEZE, with one excq^don. This is the 
/NOOBJECT qualifier which is commonfy used when compiling units for 
collective optimization. In this case, the object code is not required, but 
unsqueezed units are. Thus, use of the /NOOBJECT qualifier also causes 
/NOSQUEEZE to be the d^ult In either of these cases, use of an explicit 
/SQUEEZE or /NOSQUEEZE qualifier overrides the d^ult 

To verify whether or not a unit has been squeezed, use the 
SHOW/EXTENDED command for the unit as, as described in the “Library 
Manager” chapter in User Guide, Part A. A unit has not been squeezed if and 
only if the attributes High_Form and LowJForm ^>pear in the listing for that 
unit 

/SUPPRESS[=(<optlon > [,...]) 3 
/NOSUPPRESS (deteult) 

The /SUPPRESS qualifier allows you to suppress sdected run-time diecks 
and/or source line references in g«ianted object code. 

The Ada language requires, as a default, a wide variefy of nm-time checks to 
ensure the validity of operations. For example, arithmetic overflow checks are 
required on all numeric cperadons, and range checks are required on all 
assignment statemoits that could result in an illegal value being assigned to a 
variable. While these checks are vital durmg development and an important 
asset of the language, th^ introduce a substantial overhead. This overhead 
may be prohibitive in time-critical applications. Thus, the Ada language 
provides a way to selectivefy suppress dasses of checks via the Sippress 
pragma. Howeva-, use of Ae pragma requires modifications to the Ada 
source. 

The /SUPPRESS qualifier provides a functional alternative to the Siq>press 
pragma. /SUPPRESS allows you to suppress chedcs in the conqjfler 
invocation command without modifying the sotirce code. The Siqipress 
pragma is valid in ai^ declarative region of a package and affects ^ nested 
regions. The /SUPPRESS qualifier is equivalent to adding pragma Suppress 
to the beginning of the declarative part of each compilation unit in a file. 


1-12 








Command options 


ADA 


The compiler also stores source line and subprogram name information 
default in the object code. This information is used to display a source level 
traceback when an unhandled excqjtion propagates to the outo* levd of a 
program. This information is also particular^ valuable during development as 
it provides a direct indication of the source line at which the excqition occurs 
and the sulprogram calling chain that led to the line generating the excqjtion. 

The source line information introduces an overhead of 6 bytes for each line of 
source that causes code to be generated. Thus, a 1000-line package may have 
up to 6000 bytes of source information. For one con^ilation unit, the extra 
overhead (in t^es), is the total length of all sul^ogram names in the unit 
(including Middle Pass goierated sul^pgrams), plus the loigth of the 
con^ilation unit name. For cotain space-critical z^lications, this extra space 
may be unaccqitable and may be inhibited with the /SUPPRESS qualifi^. 
When the source line information is inhibited, the traceback indicates the 
offset of the object code at whk;h the excq)tion occurs, instead of the source 
line number. When the subprogram name information is inhibited, the 
traceback indicates the o&ets of the subprogram calls in the calling chain, 
instead of the subprogram names. 

When you specify an <option>, it rqiresents one of a possible list of options 
separated by commas. Tliese options indicate the features to be suppressed. 
The default setting is /NOSUPPRESS. 

The options and their actions are presented in the following table The names 
of the options may be abbreviated as long as th^ ronain unique within the set 
of options. All cations except SOURCE INFO and ALL function as if a 
corresponding Suppress pragma were present in the Ada source. The 
exception is that /SUPPRESS=(EIABORAnON_CHECK) differs from 
pragma Suppress(Elaboration_Check). The switch suppresses elaboration 
checks made by other units on this unit The pragma siq^resses elaboration 
checks made on other units from this unit The NAME INFO opdcm specifies 
that subprogram name information is to be stq^ressed in the c^ect co^ The 
SOURCE_INFO option specifies that source l^e informaticm is to be 
suppressed in the object code. The ALL_CHECKS cation siqqiresses all nm- 
time checks listed in the table. The ALL option specifies that subprogram 
name information, source line information, and all run-time diecks in the table 
are to be suppressed. 

For example, the qualifier 

/SUPPRESS-(SOURCE,EIAB) MT.FILE 

inhibits the generation of source line information and elaboration checks in the 
object code of the units in file MY FILE. 


OFT-1941N-V1J(VAXJE960) 02DEC91 


1-13 









ADA 


80960 ACS for VAX/VMS-E960 



ALL Suppress source line information and all run-time checks listed 

below. 

NONE Equivalent to /NOSUPPRESS 

S0nRCE_INF0 Suppress source line information in object code. 

NAME_INF0 Stqjpress subprogram name information in object code. 

ALL_CHECKS Suppress all access checks, discriminant checks, division checks, 

elaboration checks, index checks, length checks, overflow checks, 
range checks, and storage checks. 

ELAfiORATION^CHECK Suppress all elaboration checks. 

OVERFLOW_CHECK Suppress all overflow diecks. 


/TEMPUB- (<sublib > 

/UBFILE-UBLST (defauR) 

This qualifier allows you to define a temporary library consisting of a selection 
of sublibraries. The temporary library may be used for the duration of a single 
command. In all uses, the /IBMPLIB and /UBFILE options are mutuality 
exclusive; only one or the other qualifier may be used at the same time. 

<subl ib> The name of the sublibrary, qptionaUy prefixed with the 

specification of the VMS directory in which it resides. If 
no directory is qiecified, the curroit default directory is 
assumed. Mult^le sublibrary file specifications are 
sqiarated ty commas in a list 

Semantically, the argumoit string of this qualifier is the logical equivalent of a 
library file containing the listed sublibraries, one per line, in the order listed. 

Thus, we could list the sublfliraries: 

/TEMPUB-CKYVORK,[CALCPROJ]CALCLIB.TSADA$E960:[LIB]RTL_E960.SUB) 

/UPDATE (default) 

/[NOJUPDATE 

When mult^le source f3es are being conpiled, the /UPDATE qualifier 
instructs the compiler to update the library after each source file is compiled. 

The default setting is /UPDATE. 


1-14 







Command options 


ADA 


If /NOUPDATE is used, and an error occurs during con^ilation, the working 
sublibrary is not updated at aU, for any unit, even for remaining units in the 
source file in error. All remaining sotu’ce files will be compiled for ^tactic 
and semantic errors only. The /NOUPDATE qualifier is advantageous to use 
when it is known that aU the sotirce files will compile without error and the 
user wishes to save the overhead time involved in updating the library for eadi 
source file. 

/VIRTUAL SPACE=<n> 

/VIRTUAL~SPACE=10000 (default) 

This qualifier specifies the number of Ikb pages that will be used in monory 
while the tool executes. Greater values will usually improve performance, but 
will result in more physical memory requirements. 


OFT-1941N-V14(VAXJ:960) 02DEC91 


1-15 









BIND 


80960 ACS for VAX/VMS-E960 


1.2. BIND 

[Binder] 

Introduction 

The object code files gaierated by the coii^iler are 80960 ACS-defined Object 
Form files stored in the Ada Ubraiy. These files must be boimd to create a 
linkable object The binder program generates the code needed to elaborate the 
components in a consistent order. The binder is invoked v/h&i you use the BIND 
command 

The general command format of the bind stq> is 


$ TSADA/E960 BIND[/<quall£ier>,...] •Cnain> 


where 


•cnalit> The name of the unit to be used as the main program 

<qual if lez> A binder qualifier 

Information on the qualifiers and parameters used to invoke the binder are listed below. 

Qualifiers 

/ASSEMBLY_CODE[= <file>] 

/NOASSEMBLY_CODE (default) 

With the /ASSEMBLY_CX>DE qualifier, you can obtain an assembly listing of 
compiler generated code for a unit or a collection. You can use this qualifier 
with the con^iler, the binder and the optimize' in the same way. The listing 
similar to that produced with the /MACHINE_CXI>D£ qualifier, estcqjt that 
will not contain location or ofEset information. 

The file produced with the /ASSEMBLY_CODE quahfio' is suitable as input 
to an ass«nbler. In contrast, the file produced by /MACHINE_CX)DE is 
more suitable for human readability. The default ffle name is the same as it 
would be for /MACHINE_CX>DE, Le., the unit name being compiled 
/ASSEMBLY_CXDDE and /MACHINE_OODE are mutually exclusive. 


1-16 


.S3 .tt 












Command options 


BIND 


/ENABLETRACEBACK 
/NOENABLE^TRACEBACK (default) 

In the unlikely event that you should receive an Unexpected Error Omdition 
message, you should contact Customer Support Customs Support may 
request that you provide additional information about the error condition 
including the /ENABLEJTRACEBACK qualifier in the con^iler invocation 
that fails - This qualifr^* allows the tool to display the excq}tion tracdiack 
associated with fte unesqpected oror condition. The information provided in 
the traceback will allow Customo* Support to diagnose the problem more 
effidoitfy. 

/UBFILE=<file> 

/UBFILE=UBLST (default) 

By default, the library file named LIBLST with a default ^pe of .ALB is used 
by the 80960 ACS tool set to determine which set of sublibraries are to be 
rderred to during the q>eration of the tool This file must be present in the 
working directoiy. With the /UBFTLE qualifier, you can q)e(^ a library 
other than the default, LIBL^. The /TEMPLIB qualifia- may also be used to 
create an alternative library. However, the /TEMPUB and /UBFILE 
qualifiers are mutually exclusive; onfy one or the other qualifier may be used at 
Ae same time. 

When you specify the /UBFILE qualifier, you indicate the file specification of 
an alternative library ffle that contains the list of sublibraries and rational 
cormnents. If you do not sp>ecify a file type with the file name, the system uses 
the file fype .ALB. 

For example, consider a library file named WORKLIB.ALB with the contents: 

Name: MTVORK 

Name: [CALCFROJICALCLIB 

Name: TSADA$E960:[LIB]RTL_960.SUB 

You could specify 

$ TSADA/E960 BIND/LIBFILE-«ORKLIB «^in> 

As an alternative to using /UBFILE, you may assi^ the library file 
specification to the logical name UBLST. For exartqile, 

$ ASSIGN VORKLIB.ALB LIBLST 


OFT*1941N-V1.1(VAXJ:960) Q2DEC91 


1-17 










BIND 


80960 ACS for VAX/VMS-E960 


/MACHINE_CODE[= <file>] 

/NOMACHINE_CODE (default) 

Tlie /MACHINE_CX!)DE qualifier allows you to obtain an assembly listing of 
the code that the compiler generates for a unit or a collection. The listing 
consists of assembly code intermked with source code as comments. Note that 
the listing generated this qualifier is independent of the source/^ror listing 
generated by the /LIST qualifier. The default for this qualifier is 
/NOMACHINECODE. 

The listing output is sent to a file named <unit>_.S if the unit is a library unit, 
and <unit>.S if the unit is a secondary unit. <unit> is the name of the 
compilation unit that is being listed. 

If multqrle compilation units are being compiled and you have provided a file 
q)ecification, the machine code listing for each conopilation unit will be ouq)ut 
to a different version of the same file name. 

If the compilation unit name is longer than 39 characters, the name will be 
truncated at 39 characters. No listing will be gorerated if there are syntactic or 
semantic errors in the compilation. 

/MONITOR 

/NOMONITOR (default) 

Normally, the only visible output produced by the S0960 ACS tool set during 
<q>a’ation is error or warning messages. The /MONITOR qualifier enables 
the reporting of version numbers and messages that allow you to monitor the 
tool’s progress. When you specify /MONITOR, the output is sent to standard 
output (SYSSOUTPUT). 

/SHOW TASK EXCEPTIONS 
/NOSHOW_T/&K_EXCEPTIONS (default) 

The /SHOW_TASK_EXCEPTIONS qualifier causes unhandled exoq)tions in 
tasks to be reported in the same manner as those that occur in the mam 
in-ogram. If you use this qualifier with the ADA command, it is onfy valid if 
you also use the /BIND qualifier. 

/TASK STACK SIZE=<n> 

/TASK~STACK'SIZEs«t>Q6 (default) 

The /TASK_STACK_SIZE qualifier sets the defiiult amount of stack to 
allocate from the Ada heap for each task. The <n> you specify is the size of 
the task stack in l^es. If you use this qualifier with the ADA command, you 
must also use the /BIND qualifier. 


1-lS 












Command options 


BIND 


/TEMPUB=(<sublib> [,...]) 

/UBFILE^UBLST (default) 

Tliis qualifier allows you to define a temporary library consisting of a selection 
of sublibraries. The temporary library may be used for the duration of a single 
comnumd. In all uses, the /lEMPIJB and /LEBFILE options are mutualfy 
exclusive; onfy one or the other qualifio' may be used at the same time. 

<subl lb> The name of the sublibrary, q>tionally prefixed with the 

specification of the VMS Rectory in whidi it resides. If 
no directory is qredfied, the current default directory is 
assumed. Mult4>le sublibrary file specifications are 
sqiarated by commas in a list 

Senuuitically, the argumoit string of this qualifier is the logical equivaloit of a 
library file containing the listed sublibraries, one per line, in the order listed. 

Thus, we could list the sublibraries: 

/TEMPLIB-dfTVORK. [CALCPROJ]CALCLIB.TSA1}A$E960: [LIB]RTL_E960.SnB> 

The /TEMPIIB qualifi^ qrplies to both compilation and binding, so it need 
be specified only once and may appear in ai^ order on the command line when 
you use the BIND command. The binder needs to have present every 
compilation unit referenced by the main program. If a urrit is missing, the 
binder will report the orror and will not be invoked. Therefore, you should be 
sure that the set of sublft>raries specified by the /TBMPIJB qus^er contains 
all the units belonging to the main program. 

/nME_SUCE QUANTUM=<n> 

/TIME^SUCE^QUANTUMsO (default) 

This qualifier species the slice of time, in milliseconds, in which a task is 
allow^ to execute before the nin-time switches control to another ready task 
of equal priori^. This timeslicing activiQr allows for periodic round-robin 
scheduling among equal-priority tasks. Timeslking may or may not be 
implemented for a particular environment 

The default value for /TIME_SLICE_QUANTUM is 0 (Le., timeslidng is 
disabled). No run-time overhead is incurred when timeslidng is disabled. This 
qualifier must be used with the /BIND qualifio* whoi you are con^iling with 
the ADA command. 


OFT-1941N.V1.1(VAXJE:960) Q2DEC91 


1-19 





BIND 


80960 ACS for VAX/VMS-E960 


/TRACEBACK 
/NOTRACEBACK (default) 

Tliis qualifier sets the dq. ^ of the run-tune exception traceback rqx>rt 

If you use this qualifier with the ADA command, you must also use the /BIND 
qualifier. 

/VIRTUAL SPACE=<n> 

/VIRTUAL~SPACE=5000 (default) 

This qualifier specifies the number of lid) pages that will be used in memory 
while the tool executes. Greats* values will usually inwove performance, but 
will result in more physical memory requirements. 











Command options 


LINK 


1.3. LINK 

[Linker] 

Introduction 


The Ada Linker is a component of the 80960 ACS ^trai that allows you to link 
compiled Ada programs m prq>aration for target execution. The linker resolves 
referoices wit^ the Ada program, the bare target run-time su{^x)rt library, and 
any iiiyx>rted non-Ada object code. To support the development of embedded 
applications, the linker is designed to operate in a variety of modes and to handle 
many types of ou^ut format 

Hie linker links together OF modules to construct executable load modules. (See 
the “Linker” chapter in the User Guide for details). Optionalty, the linker outyiuts 
tymbol location information that is used by the d^ugger. The linker can also 
ou^iut information used by the profiler. All imused subprograms will be 
eliminated from the executable image. 

The command tyntax for the Ada Linko* is: 


$ TSADA/E960 LINK[/<qualifier>I,...]] [<unit>] 


where 

<quallf ier> One of the command line qualifies available for the 

linker. 

<unlt> An optional command line parameter indk:ating the name 
of the Ada conqpilation unit to be linked as a mam 
program. 

Note that the conciliation unit must have been bound as a main program (nior to 
linking. If you do not provide the unit name on the command line, then the unit is 
specified using the INPUT option in an options file. 

Linker directives are communicated to the linker as qualifiers on the VMS 
command line or as coitions entered via an options file or SYS$INPUT. Command 
line qualifiers are usdiil for controlling options that you are likety to diange often. 
The default qualifier settings are designed to allow for the sincdest and most 
convenient use of the linker. 


OPT-ljMlN-VlJl(VAXi:960) 02DEC91 


1-21 









LINK 


80960 ACS for VAX/VMS-E960 


Command line qualifiers and parameters enable you to: 

• Specify the name of the linked ouqjut file 

• Control the g&ia^tion and format of listing map files 

• Specify an options file 

• Specify the Ifiiraiy file containing the continents to be linked 

• Control the output of debug symbol information for debugging 

• Monitor the linking process 


More complicated linker options, such as the specification of memoiy locations 
for spedHc portions of the code or data for a program, are iut via q>tions in a 
linker options file. Unko* q>tions may be used to: 

• Specify the compilation units to be used as iiq)ut to the Linko*, 

the library search paths, and the usage of the iiq>ut files 

• Specify the luune and format of the linked output file 

• Control the generation and format of listing imp files produced by 

the Linker. 

• Specify the location of named memoiy regions and reserved 

memoiy regions in pl^skal memoiy 

• Specify the location of control sections in physical memoiy 

• Define symbol values 

Each of the LINK command qualifiers is described in detail in the Qualifier 
section below. Following the qualifier descrptions, there is a detailed discussion 
on linker options files and their qualifiers. 

Qualifiers 

/DEBUG 

/NODEBUG (default) 

To use the debuggo-, you must conpile, or assemble and link program units 
using the /DEBUG qualifier. This ensures that source debugging information 
is prtperfy stored for later use by the debugger. This qualifia- controls the 
generation of debug symbol information for use with the debugger. The 
information is in the form of a link map that associates madiine addresses with 
the symbol names found in a compilation unit The ddiugger uses the link 
map to locate the address of the b^inning of a compilation unit and the 
addresses of source lines and link names. 

A program that you want to run with the dd^ugger must be linked with the 
/DEBUG qualifier. If sipported by the chosen load module format, 
/DEBUG may also cause symbol information to be ouput in the load module. 
The qualifier is ignored if you select /OFORM. In the standard configuration 
of the 80960 ACS system, none of the ouputs siqport symbol information in 
the load module. The d^ult is /NODEBUG. 


•22 











Command options 


LINK 


/ENABLETRACEBACK 
/NOENABLEJTRACEBACK (default) 

In the unlikdy event that you should receive an Unesqiected Error Condition 
message, you should contact Customer Support Customer Support may 
request that you provide additional information about the error condition fay 
induding the /ENABLEJTRACEBACK qualifi^ in the con^ila: invocation 
that fails. This qualiGer allows the tool to display the excqjtion tracdiack 
associated with the unexpected error condition. The information provided in 
the traceback will allow Customer Siqiport to diagnose the problon more 
efhdently. 

/EXCLUDED 
/NOEXCLUDED (default) 

The /EXCLUDED qualifier is used with the linker to ins^ a list of exduded 
subprograms into the link map listing. The defiiult is /NOEXCLUDED. 

/EXCLUDED is a subqualifier of the /MAP linker qualifier. The /MAP 
qualifier controls the generation and format of the listing map files that the 
linker produces. With the /EXCLUDED subqualifio^, the /MAP qualifier 
generates a section of the link m^ that lists subprograms that have been 

exduded from the linked object file. These subprograms were exduded 
because they were not used in the call graph of the main program that is being 
linked. 

/FORMATS <obj_fonnat> 

/FORMATsCOFF960 (default) 

This qualifier specifies that an object module file of a ^)ecified format is to be 
linked. The object module format is q)ecified as a parameter to this qualifier. 
You may specify one of the following ^ject module fcxmats for <obj_mod>: 

<obJ fonnae> C0FF960 
ZC0FF960 

COFF960 With the linker, /FORMATsCOFF960 qiecifies that the format 
of the linko^s load module ouq)ut should be Intd 80960 COFF. It 
is the ddault ouq>ut format generated fay the linker. 

XCOFF960 When you are linking programs for 80960 Extended Architecture, 

/FORMATsXCOFF960 causes the linker to produce a load 
module in extended COFF format The default is 
/FORMAT-OOFF960, the Intel 80960 COFF format 


OPT>1941N-V1J(VAXE960) 02DEC91 


1-23 










LINK 


80960 ACS for VAX/VMS-E960 


/IMAGE 

/NOIMAGE (default) 

The /IMAGE qualifier is used with the /MAP qualifier or MAP cation in the 
linker. /IMAGE generates a memoiy image listing in addition to tiie link map 
listing generated by /MAP. The linker writes the image listing to the same file 
as the link map listing. This is the only optional section of the listing. The 
default is/NOIMAGE. 

In a memoiy image listing, each nonsequential section of the image in monoiy 
starts on a new page. The image listing contains the locations in memoiy that 
are printed as hexadecimal values. Each line in the listing is filled with the 
amount of data on a line that is a multiple of 16 bytes and up to the spedfied 
or ddault WIDTH limit 

Relocatable control sections are printed with a location that is relative to the 
start of the control section. 

/UBFIL£=<file> 

/UBFILE^UBUST (default) 

By default, the library file named LlBLSTwith a ddault Qpe of ALB is used 
\3^ the 80960 ACS tool set to determine which set of sublibraries are to be 
r^erred to during the operation of the tool This file must be present in the 
working directory. With the /OBFILE qualMo^, you can !^)e(^ a library 
other than the default, JJBL^. The /TEMPLIB qualifier may also be used to 
create an alternative library. However, the /TEMPLIB and /UBFILE 
qualifim are mutualfy exclusive onfy one or the othra* qualifier may be used at 
the same time. 

Whoi you specify the /I JB FIT F. qualifio:, you indicate the file qjedfication of 
an alternative libraiy file that contains the list of sublibraries and rational 
comments. If you do not specify a file fype with the file name, the system uses 
the file fype ALB. 

For example, consider a library file named WORKLIB ALB with the contents: 

Name: MYVORK 

Name: [CALCFROJ]CALCLIB 

Name: TSADA$E960:[LIB]RTL_960.SUB 

You could specify 

$ TSADA/E960 LINK/LIBFILE-WORKLIB 









Command options 


LINK 


As an alternative to using /UBFIUE, you may assign the library file 
specification to the logical name LIBLST. For exan^le, 

$ ASSIGN WORKLIB.ALB LIBLST 

/LOAD_MODULE[= <fiie>] 

/LOAD_MODUL£=<main>.CF (default) 

This qualifier is used with the linker to specify the VMS file name for the load 
module ouq)ut created the linker. 

The <file> is the optional VMS file q)ecification for the output If <file> 
does not indude an file type, the linker will append the .CF file type. If you do 
not specify an output file, the linker writes the linked ouqrut to: 

<naiii>.CF 

The <main> is the Ada name of the main program unit (if present), the name 
specified as the command line parameter, or the name specified as the first 
INPUT option, modified as necessary to form a valid Vl^ file q)ecificadon. 

You can use the /LOAD^MODULE qualifier with the /OPTIONS qualifier. 
Any output file ^redfication present in the cations file is suporceded by the 
specification on &e command line. If the /LOAD^MODlfiJE qualifier is 
tii«d with the /OFORM qualifier, both formats be produced. 

AOCALS 

/NOL3CALS (default) 

This qualifier indudes local symbols in the link map ^mbol listing. 

/MAP[s<file>] 

/NOMAP (default) 

This qualifio’ is used to request and control a link map listing. The format of 
the liiik m^ listing file is described in the User Guide. 

When you specify this qrtion, you can optionally list a <file>. This is the 
optiond VMS file specification for the ouq)ut If you do not ^lecify a file 
fype, the linker uses a de&ult file fype of .MAP. IT you do not spec^ an 
output file, the linker writes the listing to 

<tmlt>.MAF 

where 


<unlt> Rqrresoits the name of the main program unit (if 
present), the name specified as the command line 
parameter, or the name ^)ecified as the first INPUT 
option, modified as necessary to fcmn a valid VMS file 


OFT-1941N-Via(VAXJE960) 02DEC91 


1-25 




UNK 


80960 ACS for VAX/VMS-E960 


specification. 


You control the output of the MAP qualifier using one or more of the 
following qualifiers: 


/[NOJIMAGE 
/[NOJLOCALS 
/{NojEXCLUDED 
/WIDTHS <132 1 80> 
/PAGES <66 1 n> 


/IMAGE generates a memoiy image listing in addition to the map listing. The 
linker writes the image listing to the same file as the link map listing. This is 
the only optional section of the listing. The default is /NOIMAGE. 

/LOCALS includes local symbols in the link map symbol listing. The default is 
/NOLOCALS. 

/EXCLUDED inserts a list of exduded sul^ograms into the link map listing. 
The default is /NOEXCLUDED. 

/WIDTH specifies the width of the lines in the listing file. The default value is 
132 characters. The alternate width is 80 characters. 

/PAGE specifies the number of lines per listing page. The ddault is 66. You 
may specify a positive integer greater than 10. 

A command line /MAP qualifier supo-cedes any MAP options in an options 
file. The default is /NOMAP. /NOMAP can be used on the conunand line to 
suppress MAP options specified in an options file. 

/MONITOR 

/NOMONITOR (default) 

Normally, the onfy visible ouq^ut produced by the 80960 ACS tool set during 
operation is error or warning messages. The /MONITOR qualifio- enables 
the reporting of version numbers and messages that allow you to monitor the 
tool’s progress. When you specify /MONITOR, the output is sent to standard 
output (SYSSOUTPUT). 

/OFORM[=<lib comp>] 

/NOOFORM (d^ult) 

This qualifier q)ecifies that one output of the linker is to be linked OF. Linked 
OF is suitable for incon^lete modules and can be used subsequently as ii^ut 
to the Ada linker. The linked OF is put into the library as an object form 
module (OFM) conqxment 


1-26 











Command options 


LINK 


<1 lb_comp> Rq>resents a library con^nent name. 

<anlt> The Ada name of the main program unit (if presort), the 

name specified as the command line parameter, or Ae 
name ^sedfied as the first INPUT option. The ou^ut of 
the link is put into the library as the object form mo^e 
called <unit> if you have not specified a library 
corrqx>nent name. 

Note that the object form module of <unit> is a library componoit sqiarate 
from that of the specification or bodjy of the unit 

If an object form module library con^nent with the specified name already 
exists in the current working sublibrary, that corrqxmort is ddeted and 
replaced by the new ou^ut 

The /OFORM qualifier may be used with the /OPTIONS qualifier. Any 
format or name presort in the options file is stqrerceded by the format and 
name specified on the command line. You may request /OFORM instead of 
the default /EXECUTE_FORM, or in addition to a load module format To 
obtain both an object form module and a load module, you must enter both 
qualifiers. 

/OPnONSt=<file>J 
/NOOPTIONS (default) 

/OPTIONS specifies that the linker is to process additional options obtained 
interactively, or from a linker options file. 

<flle> This is a valid VMS file ^redfication. It represents a file 
that contains linker options. If no file ^pe is present, the 
linka* uses the default file type .OPT. 

The default file specification is SYSSINPUT. The default is /NOOPTIONS. 

The /LOAD_MODUL£ qualifier and the /OFORM qualifier may be used 
with the /OPTIONS qualifier. Any format present in Ae options file is 
superceded hy the format specified on the command line when you use 
/ljDAD_MODULE with /OPTIONS. When /OFORM is used with 
/OPTIONS, arty output file specification present in the options file is 
superceded Ity Ae specification on the command line. 

Linker qrtions files are discussed in this chapter, in section 1.4, "The linker 
options ffle.” For ^redfic linker options file comnumds, see secticm 1.4.2, 
"Linker qrtions and their qualifiers.” 


OPT.1941N-VU(VAXJ;960) 02DEC91 











LINK 


80960 ACS for VAX/VMS-E960 


/PAGE=<n> 

/PAGE=66 (default) 

With the LINK conunand, /PAGE specifies the number of lines per listing 
page. The default is 66. You may specify a positive integer greater than 10. 

/SYMBOL_FILE[= <flle>) 

/NOSYMBOL FILE (default) 

This qualifier produces a file that contains all of the ^obal symbols used in the 
link. The default file name is <main > .SYM., with a default file fype of .SYM. 
This file provides you with a simple means of obtaining information about 
symbol names and values. 

The <main> .SYM file is an asdi file that contains one entry per line. An 
entry consists of the following format: 

NNNNNNNNTAAAAAAAAAAA 

Where 

NNNNNNNN An 8 character asdi rq}resmtion of the value of the 

symbol. 

T A one character asdi rq>resention of the fype of unit in 

which the ^nmbol was located. The charact^ have the 
following meaning: 

^> Ada_Unit 
-*« -> Ofm'unit 

Link time defined symbol 

AAAAAAAA The asdi rq^resentation of the symbol (truncated, if 
necessary, to a maximum of 200 characters). 

/TEMPUBs (<8Ublib> [,...]) 

/UBFILE=UBIJST (default) 

This qualifier allows you to d^ne a toqroraiy library consisting of a selection 
of sublibraries. The tenqrorary library may be used for the duration of a single 
command. In all uses, the /TEMPLIB and /LEBFILE options are mutually 
exdusive; only one or the other qualifier may be used at the same time. 


1-28 









Command options 


LINK 


<sublib> The name of the sublibraiy, optionally prefixed with the 
specification of the VMS dfrectory in which it resides. If 
no directory is specified, the current default directory is 
assumed. Mult^le sublibrary file specifications are 
sqrarated by commas in a list 

Semantically, the argumoit string of this qualifier is the logical equivalent of a 
library file containing the listed sublibraries, one per line, in the order listed 
Tbus, we could list the sublibraries: 

/TEMPLIB-CMYWOWC,tCALCPROJ]CALCLIB,TSADA$E960:[LIB]RTL_E960.SUB) 

When used with the linker, this qualifier specifies a list of sublibraries to be 
used for a single run of the linker. If you do not specify /LDBFTLR or 
/TEMPIIB, the linko* assumes that the library is q>ecified by the library file 
named LEBLST in the current working directory. 

/VIRARS SIZE=<n> 

/ViRARS~SIZE=lOOO (default) 

This qualifier specifies the amount of space, in kilobytes, of buffer space to be 

allocated for the linker. You must spec^ a value for the 

size when you use /VIRARSJSIZE. The default amount of space is 1000 

kilobytes. 

/VIRTUAL SPACE-<n> 

/VIRTUAL'SPACE-IOOO (default) 

This qualifier specifies the number of Ikb pages that will be tised in mraiory 
while the tool executes. Greater values will usually improve performance, but 
will result in more physical memory requirements. 

/WIDTH=<n> 

/WIDTH=132 (default) 

This qualifier, used with the linker, specifies the width of the lines in the listing 
file. The default value is 132 characters. The alternate width is 80 characters. 

<n> The width of the lines in the listing file. The value can be 

132 or 80 characters. 


OPT-1941N-V1J(VAXJ:960) 02DEC91 


1*29 









LINK 


80960 ACS for VAX/VMS-E960 


1.4. The linker options f iie 

The /OPTIONS command line qualifier is used to specify that the linker is to 
read in additional options from an cations file or from SYSSINPUT. An q)tions 
file is a text file that contains linker co mm ands to be interpreted by LINK You 
spedfy the name of the options file on the command line with the /OPTIONS 
qualifier. The default file specification is SYSSINPUT, so the link^ may read 
commands from a command file or from the terminal immediately after you oiter 
the linker command line. If you are ratering the options interactivdy, there are 
no pronqjts on the screen. To rad your iiq>ut, you enter an EXIT command. 
Options cannot be entered both interactivefy and in an options file. 

There is a basic linker options file provided with this release. It is tailored to your 
target You may obtain additional options files for more targets. 

1.4.1. Options file format 

You must rater each linker option on a sqiarate line. To continue to the next line, 
use the standard VMS continuation character (-). Commrats may be ratraed with 
the VMS comment (!) or the Ada comment (~). Options and qualifiers may be 
abbreviated to as few letters as needed to make a unique abbreviation. The linker 
reads and processes options until it finds an EXIT or QUIT command, or an 
rad-of-file marker. For more information on the linker options file format, see 
the “linker” chapter in User Guide, Part B. 


1-30 










Command options 


LINK 


1.4.2. Linker options and their qualifiers 

The avaflable linker commands and options are summarized in the table bdow. 
Defaults are shown in italics. 


Table 1*1. linker options and tiieir qualiflo^ 


DEFINE 

/<symbol> ® <value> 

[/ADDRESS] 

— Specify link-time values for symbols. 


- Terminate options list 

INPUT 

— Identify object modules to be linked and 

[/MAIN 1 /SPEC 1 /BODY | /OFM] 

specify the search path. 

[/EXPORT DEFINITIONS] 


{/PHANTOM 1 /WORKING_SUBLIB] 
[/NOSEARCH] <libraiy_component_name> 



LOCATE — Specify addresses for control sections. 

[/CONTROL_SECnON=CODE 1 DATA | LTRL | STACK] 

[/COMPONENT NAMEs <libraiy component name> 

[/SPEC 1 /BODY I /OFM | /MAIN 1 /ASMj] 

{/AT® <address>] 

[/IN=<repon>l 

[/AFTER® <contrd^section> | <Iibraiy_component_name>] 

[/ALIGNMENT® < value >] 


MAP 

[/[NO]IMAGE] 

[/[NO]LOCALS] 

[/[NO]EXCLUDED] 

[/WIDTH® <132 1 80>] 
[/LINES_PER_PAGE®<n>] {50) [<fde>] 

— Control link map generation. 

OUTPUT 

— Specify complete or incomplete output 

[/COMPLETE 1 /INCOMPLETE] 

and its format 

[/LOAD MODULE]® <filc>] 


[/OBJECT_FORM[® <libraTy_component name>]] 

QUIT 

— Abandon link operation. ] 

REGION 

— Define and name memory regicms. j 

/LOW_BOUND= < address > 

/HIGH BOUND® <address> 

[/UNUSED] [<region>] 



OFT-1941N-V1.1(VAX£960) 02DEC91 


1-31 













LINK 


80960 ACS for VAX/VMS-E960 


1.4.3. DEFINE: Defining giobai symbois 

Hiis coimnand allows you to d^ne global ^mibols referoiced in the Ada CX3S 
and otho* inqx)rted OF modules. Multiple DEFINE commands can be used The 
format is: 

DEFINE/<s 7 mbol_name><-<value> [ /ADDRESS ] 
where: 

<symbol_name> A name that you ^>ecify, or one of the standard CGS 

names. 

<value> Specified 1^ the uso*. <value> can be q>eciEed by using 
a decimal value, a hexadecimal-based litoal in Ada ^tax 
(16#hex#), or an unsigned hexadecimal value in the 
format (%^ex). 

/ADDRESS Specifies that the value ii^ut is to be used as an address 
rather than a signed long integer value. This option is 
necessary only when address values are 16#80000000# or 
larger. 

1.4.4. EXIT: Ending user input 

This option may be used to specify the end of user ii^ut within the options file: 
no options are processed afto: the EXIT q)tion. An end-of-file is equivalent to 
the EXIT option. The format is: 

EXIT 

1.4.5. INPUT: Specifying the input 

This command specifies the name of the Ada library unit to be linked, its usage, 
and its seardi path. Mult^e INPUT options may be used 

By default, the object associated with the qjedfied ruune is induded in the linked 
ouqrut If the link is inconplete, the symbols defined in the OF modules will not 
be exported as global definitions. The /EXPORT_DEFINmONS option may be 
used to override this default In complete linkage, all references are to be 
resolved, so the linker does not esqx>rt global definitions and ignores this option. 
The /MAIN and /PHANTOM options may be used to specify spedal usage for 
the input OF modules. 

The use of an INPUT option does not prevent an unreferenced Ada unit from 
being exduded from the module because of unused subprogram elimination. If an 
uru’eferoiced unit needs to be induded in the module, such as to jn-ovide an 
intern^ handler, it can be dmie linking in two stq}s. 


1-32 




Command options 


UNK 


First, include the unreferenced unit in an incomplete link. Thai do a conqilete 
link that inputs the result of the incomplete link. 

When the default search path for a specified libraiy unit is used, the linked output 
includes all conipilation units comprising the extended famify of the unit that exist 
in the current libraiy. The search path cptions /NOSEARCH and 
/WORKING_SUBLIB may be used to override the default and include onfy the 
unit itself or <^y those oitities of the extended family in the working siiblibraiy. 

The format of the INPUT command is: 

INPUTI/MAIN] [/SPEC I \ /BODY | /OFM] 

[/^ORT DEFINITIONS] 

[/PHANTOM I /W0RKING_SDBLIB1 
[/NOSEARCH] <coiBp_tmlt> 

where: 


<eomp_imlt> The name of the libraiy compilation unit The following 
options ^lecify the kind of libraiy con^ilation unit ii^ut: 

qualifier libnury component 
/SPEC libraiy unit 

/BODY secondaiy unit 

/OFM linked OF 

/ASM assembled program unit 

/MAIN main program library unit 


/SPEC should be used only for libraiy units without 
bodies, since those are the only libraiy units that have 
object associated with them. All other compilation units 
should be included in the link using either /BODY or 
/MAIN, if the unit is a main program unit In a conqilete 
link, using /SPEC or /BODY makes sense onfy when 
combined with /WORKING_SUBLIB since the libraiy ot 
secondaiy unit will automatiralfy be brought into die link if 
needed and excluded if not needed. 

/MAIN Specifies that the libraiy unit is to be the main 
program in the link. The libraiy unit name ^ledfied with 
the first INPUT command is as the default 
OUTPUT and MAP name, unless you ^ledfy other 
names. Specification of both /OFM and /MAIN is an 
error. 


OPT-1941N-V1J(VAXJ:960) 02DEC91 


1-33 





LINK 


80960 ACS for VAX/VMS-E960 


/EXP0RT_DEFINITI0NS Used with incxHoplete linking. It indicates that the global 

qrmbols defined in the ii^ut unit are e3q)orted as global 
definitions. Hius, the interface remains visible to the uso- 
of the incon^lete linked ou^ut The definitions of ai^ 
imported units that are included by the library search are 
not exported as global definitions, however, llie linker 
Ignores this option in con^)lete linkages. 

/PHANTOM Specifies that the symbols ddined in the object associated 
with the input may be used to resolve references in the 
linked ou4)uL Hie linker does not g^ierate executable 
object for the phantom module or indude it in the linked 
ou^uL The l^raiy unit specified with a phantom ii^ut 
unit must be an incon^ete linked object that has no 
unresolved references. Using the/WORKINGJ5UBLIB 
cation with a phantom ii^ut file is an error. The default 
search action for a phantom ii^iut file is /NOSEARCH. 

/V0RlCIN6_snBLIB Specifies that only those eictended family entities in the 

current working sublibrary are to be induded in the linked 
ou^ut 

/nosearch Specifies that only the specified irqiut unit is to be induded 
in the linked output For complete links, this option is onfy 
effective for linked or imported OF, as when used in 
combination with /OFM. 

When the name of the OUTPUT and MAP files are not specified, the linko- 
names the files after the first INPUT command’s named unit 


1-34 






Command options 


LINK 


1.4.6. LOCATE: Specifying iocations of controi sections 

This cominand specifies the location of a control section in physical memory or 
within a named region of physical monoiy. The format is: 

LOCATE 

[/CONTROL_SECTION-CODE | DATA | DDATA | MAP] 
[/COMPONENT NAME—<comp unlt> 

[/SPEC P/BODY I /Ohi]] 

[/AT-<address>] 

[/IN—Cregion_naae>] 

[/AFTER—ccsect name | comp_unlt>] 

[/ALICNMENT-<value>] 


where: 


/CONTROL_SECTION Specifies the irame of the control section to be located 

The valid control section names for the 80960 are CODE, 
DAIA, LTTR and STACK. If a control section name is 
omitted and a con^ilation unit name is given, none of the 
control sections are esqplidtly located. 


/COMPONENT_NAME Specifies the name of the library compilatiQn unit that is to 
be located and has one of the following options: 

/SPEC -- library isilt, 

/BODY -- secondary unit, 

/OFM -- linked OF or imported unit, 

/ASM -- assembled unit, or 
/MAIN -- main program unit. 

The only Ada compilation units that have object associated 
with the library unit are bod|y-less con^ilation units. All 
others shotild be located using the /BODY option. If no 
/COMPONENT_NAME option is used with the 
LOCATE command the linger assumes that LOCATE 
refers to all compilation units not explicitfy located by 
otho* LOCATE commands. 


/AT %)ecifies that the image is to be located at the q>ecified 

memory location. The address specified must be a valid 
80960 memory location. The <address> can be spedHed 
by using a dedmal value, a hotadedmal-based literal in 
Ada ^tax (16#hex#), or an uns^ned hocadecimal value 
in VMS format (%Xbe3t). 


OPT-1941N-V1J(VAX£960) Q2DEC91 


1-35 





LINK 


80960 ACS for VAX/VMS-E960 


/IN Specifies that the image is to be located in the first 

available location in the named monoiy region. The 
memory region, <r^on_irame> must have been defined 
by a previous REGION command. This q)tion may be 
used in conjunction with the /AFTER qjtirm to locate 
compilation units in a specific order in a memory r^on 
and/or with the /ALIGNMENT q)tion to specify 
alignment 

/AFTER %)ecifies that the image is to be located immediatefy after 

the specified control section or con^ilation unit (using 
default alignment or /ALIGNMENT). Hie specified 
control section or compilation unit must have been located 
explicitly in a previous LCXIATE command. 


/ALIGNMENT Specifies the byte alignment of the image, if any. If no 

alignment is specified, control sections on the MCMIL are 
word-aligned. 


The cations /IN, /AFTER, and /ALIGNMENT can be used in any combination. 
The use of /IN, /AFTER, or /ALIGNMENT in the same LOCATE command as 
the /AT option is an error. 


A LOCATE command with no compilation unit name and no control section 
name is equivalent to a /BASE cmnmand line qualifier, Le., all non-located 
sections are located starting at the base ^ledfi^ 

Control sections not designated in a LOCATE command are jiaccd at the first 
available location after the default location, if any. An inconqilete link with no 
default location will cause the control sections in the ouq)ut to remain relocatable. 

1.4.7. MAP: Producing a link map listing 

This cation is used to request and control a link map listing. The format of the 
link nuq) listing file is described in the User Guide. This option operates in the 
same way as the /MAP command line qualifier. The format is: 

HAP 

[/[NO]IMAGE] 

[/[NO]INCLUDE LOCALS] 

[/[NO]EZCLDDED] 

[/WIDTH-<132 I 80>] 

[/HEIGHT-<Value>] 

[<file>] 


1-36 






Command options 


LINK 


where: 

/IMAGE Generates a memory image listing. 

/IMCLnDE_LOCALS Includes local symbols in the link map symbol listing. The 
default is/NOLOCALS. 

/EXCLUDED Inserts a 1^ of excluded subprograms into the link map 

listing. The defatilt is /NOEXCLUDED. 

/WIDTH Specifies the width of the lines in the listing file. The 

default value is 132 characters. The alternate width is 80 
characters. 

/HEIGHT Specifies the number of lines per listing page. The ddault 

is 50. You nuy spedfy a positive integer greater than 10. 

<f lle> Allows you to to override the default of sending the ou^ut 
to <unit>.MAP 

A command line /MAP qualifier siq>ercedes any MAP qualifiers in an options 
file. 

1.4.8. OUTPUT: Specifying the output 

This conunand specifies the Qpe, format, and name of the linked ouq>ut Onfy 
one OUTPUT option may be used. The format is: 

OUTPUT[/COMPLETE | /INCOMPIETE] 

[/LOAD_MODULE-I<file>]] 

[/OBJECT__FORM-[<coinp_ui:»lt>] ] 

where: 

/COMPLETE Specifies that con^lete modules are to be genoated. 

/COMPLETE is Ae d^ult Whoi the ouqrut type is 
complete, the linker rqxrrts any unresolved references as 
errors. 

/IMCOMPIZTE Specifies that an incon^lete module is to be generated, 
either as a load module or as OF. A linked OF module is 
incomplete if it (1) contains unresolved references diat will 
be resolved in subsequent /LINK operations or (2) is a 
fully resolved module that does not contain an entry point 
A module that is incomplete because it does not contain 
an entry point may be ouqrut as a load module or as OF. 
IrKomplete modules with unresolved references must be 
output in OF. 

W7 


OPT-1941N-V1.1(VAX£960) 02DEC91 





LINK 


80960 ACS for VAX/VMS-E960 


/LOAD^MODULE Specifies that one output of the linker should be an 

executable load modide. <file> is the optional VMS file 
specification for the output If <file> does not include a 
file type, the linker appoids a .CF file type to the file 
specification. If you do not specify an output file, the 
linker writes the outy>ut of the link to 

<unlt>.CF 

where <unit> is the Ada name of the main program unit 
(if presoit), the name specified as the command line 
parameta*, or the name qiecified as the first INPUT 
option, modified as necessary to form a valid VMS file 
specification. 

/OB JECT_F0KM Specifies that the output of the link^ is to be linked OF. 

linked OF is output in the Ada library as an object form 
module unit <co!np_junlt> is any valid library unit name. 
If you do not specify an ou^ut file, the linker puts the 
outyjut of the link into the hljraiy as the object form 
mo^e, <anlt> where <unit> is the Ada name of the 
main program (if present), the name specified as the 
command line parameter, or the name specified as the 
first INPUT option. Incomplete linked OF files may be 
used as input in subsequent linker operations. 

The linker can generate a load module, an OF module, or both. For example, 
incomplete objects that will be used as phantoms must be ouq>ut both as a load 
module for downloading and as OFM for subsequent linkage. 

Specification of both /CX>MFLETE and /INCOMPLETE is an error. 


1-38 









Command options 


LINK 


1.4.9. QUIT: Terminating options file input and linking 

Hiis option is used to terminate intoactive options input and abort the /LINK 
operation. The format is; 

QUIT 

1.4.10. REGION: Specifying a range of memory 

This command names a memory region and specifies its location in physical 
monoiy. This named memory region may be used in subsequent LOCATE 
commands. In addition, the REGION command may be us^ to specify an 
unused memory region. 

Multiple REGION options may be used. The format of the command is: 
REGION 

/LOW BOUNl>-<address> 

/HIGH_BOnND-<address> 

I/DNDSED] 

[<reglon_name>] 


where: 


<reglon_name> A user-specified name for a region of memory. 


/L0W_B00ND 

/high”bound 


The bounds of the memory region. These options and 
associated values are mandatory. An <address> can be 
q)ecified as a decimal value, a hexadecimal-based lito^ in 
Ada ^tax (16#hex#), or an unsigned hexadecimal value 
in VMS format (%Xhex). 


/UNUSED Specifies that the linker is not to use this memory regicni. 
Unused memory regions do not need to be nam^. 


1.4.11. Example linker options file: LINK.OPT 


This linker options file is used to verify the installation of the linker. This options 
file is also located in TSADA$E960:[TARGET.MCMELEXAMPL£S]. 


TARGET 180960MC 


INPUT/OFM/FBANTOM MCMIL_FHANT0M 
C0NTR0L_SECTI0N/DATA BSS 

LOCATE/CONTROL SECTION-CODE/AT-16^180dOOOO# 
LOCATE/CONTROL~SECTION-DATA/AFTER-CODE 

-- MAP 


OPT-1941N-V1J(VAXJ»60) 02DEC91 


1-39 






UNK 


80960 ACS for VAX/VMS-E960 


1-40 



APPENDIX C 


APPENDIX F OF T IE Ada STANDARD 


The only allowed inclementatIon dependencies correspond to 
iitqpleinentation-dependent pragmas, to certain machine-dependent conventions 
as mentioned In Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The Implementation-dependent 
characteristics of this Ada Isplementatlon, as described In this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references In this Appendix are to conpller documentation and not to this 
report. Inplementatlon-speclfIc portions of the package STANDARD, which 
are not a part of Appendix F, are given on the following customer supplied 
page. 


C-1 






XMTBOER 


■Ize 

'first 

'last 


- 32 

■ -2147483648 
« 214748367 


SHORX_INTB6ER: 

size 

'first 

'last 


SHORX_SHORX_XIITEOER: 

size 

'first 

'last 


FLOAT: 

size 
digits 
'first 
' last 

machine_radix 
machine_mantissa 
machine_emin 
machine emax 


LONG_FLOAI: 

size 
digits 
'first 
' last 

machine_radix 
machine_mantissa 
machine_emin 
machine emax 


LONG_LONG_rLOAT; 

size 
digits 
'first 
' last 

machine_radix 
machine_mantissa 
machine_emin 
machine emax 


DURATION: 

size 

delta 

first 

last 


« 16 

■ -32768 
• 32767 


» 8 

* -128 
« 127 


* 32 

* 6 

* -3.40282E+38 

* -t-S. 40282B-«-38 
« 2 

* 24 

* -125 

* +128 


a 64 

» 15 

* -1.7976931349E+308 
« +1.7976931349E+308 

* 2 
» 53 

a -1024 
= +1024 


= 96 
* 18 

* -1.18973149535723177E+4932 
» +1.18973149535723177E+4932 
« 2 

a 64 

« -16381 

* +16384 


■ 32 

*■ 6.10351562500000E-005 
a -86400 
* +86400 





i960 ACS Ada Development System 
for VAX/VMS 

to Embedded i960 Targets 

Attachment H 

Appendix F of the 

Ada Language Reference Manual 

APF-1940N-V1.1 02DEC91 


Version 4.1 









Copyrigl^ 01991, TeleSoft. All rights reserved. 

TeleSoft® is a registered trademark of TeleSoft. 

TeleGen2^ is a trademark of TeleSoft. 

VAX* and VMS* are registered trademarks of Diptal Equipment Corp. 
i960 is a trademark of Intel Corporation. 


RESTRICTED RIGHTS LEGEND 

Use, duplication, or disclosure by the Go>«mment is subject to restrictions as set forth in 
subparagraph (c) (1) (ii) of the rights in Technical Data and Computer Software clause at 
DEAR 252227-7013, or FAR 52227-14, ALT m and/or FAR 52.227-19 as set forth in the 
applicable Govenunent Contract. 


TeleSoft 

5959 Cornerstone Court West 
San Diego, CA 92121-9819 
(619) 457-2700 
(Contractor) 





Table of Contents 


1 Introductioii. 1 

2 Implemaitation-depaideiit pragmas. 1 

2.1 Pragma Comment. 1 

2.2 Pragma Export. 1 

23 Pragma Images. 2 

2.4 Pragma Interface_Information. 2 

23 Pragma No_Sippress. 2 

2.6 Pragma Preserve_Layout_ 2 

2.7 Pragma Suppress_All. 3 

3 Impleiiientation^q>endait attributes. 3 

3.1 ’QfiEset. 3 

3.2 ’Subprogram_Value. 3 

33 Extended attributes for scalar types.. 3 

33.1 Integer attributes. 6 

333 Enumeration type attributes. 10 

333 Boating point attributes. 14 

33.4 Fixed point attributes. 18 

4 Package System. 23 

5 Restrictions on representation clauses. 28 

6 Implementation-generated names —. 28 

7 Address clause e:q>resskm interpretation. 28 

8 Restrictions on unchecked conversions. 28 

9 Implenientation-dq>endent characteristics of the I/O packages 


28 



































Appendix F of the Ada LRM 


1. Introduction 

The i960 ACS compiler con^iles the full ANSI Ada language as defined by the 
Refereme Manual for ^ Ada Programming Language (LRM) (ANSI/MIUSTD- 
181SA). This appendix describes the characteristics of the compiler and run-time 
environment that are designated the LRM as implemoitation dqiendent 
These language-related issues are presented in the order in which th^ appear in 
the LRM .^jpendix F. 

2. Implementation-dependent pragmas 

i960 ACS has the following in^lemottation-dqiendent pragmas: 

pragma Commoit 
pragma Esqxirt 
pragma Images 
pragma InterfaceJtafOTmation 
pragma NoJSuppress 
pragma Preserve_Layout 
pragma Suppress_All 

2.1. Pragma Comment 

Pragma Comment is used for embedding a comment into the object code. The 
^taxis 

pragma Comment ( <8tring_llteral> ); 

where <string_literal> rq)resents the characters to be ranbedded in the object 
code. Pragma Comment is allowed onfy within a declarative part or immediatdy 
within a package specification. Any number of comments may be ottered into Ae 
object cc^e use of pragma Comment 

2.2. Pragma Export 

Pragma Export enables you to esqport an Ada subprogram or object to either the 
C language or assembly. The pragma is not siqtported for Pascal or FORTRAN. 
The syntax is 

pragma Export ( [ Name ■> ] <subprogram_or_object_name> 

[, [ Llnk_Name -» ] <string_llteral> ] 

I, [ Language ^ ] <identlfier> ] ); 


APF-i940N-VlJ 02DEC91 


1 






i960 ACS pragmas 


i960 ACS for VAX/VMS-E960 


2.3. Pragma images 

Pragma Images controls the creation and allocation of the image and index tables 
for a specified enumeration type. The ^tax is 

pragma Images(<enumeratlon_t 7 pe>, Deferred); 
pragma Images(<en'umeraclon_t 7 pe>. Immediate); 

2.4. Pragma Interfacejnformation 

Pragma Interfacejinformation provides information for the optimizing code 
generator when interfacing non-Ada languages or doing machine code insotions. 
Pragma Interface_Information k always associated with a pragma Interface excqjt 
for machine code insertion procedures, which do not use a preceding pragma 
Interface. The syntax of the pragma is 

pragma Incer£ace_Informatlon 

(Name. -- Ada subprogram, required 

Llnk_Name, -- string, default ■ 

Mechanism, -- string, default - 

Parameters, -- string, default » 

Regs^Clobbered): -- string, default ■ 

2.5. Pragma No_Suppress 

Pragma NoJSuppress is a i960 ACS-d^ined pragma that prevents the suf^ression 
of checks within a particular sc(^>e. It can be tised to override pragma Suppress in 
an enclosing scope. The pragma uses the same ^tax and can occur in the same 
places in the source as pragma Suppress. The syntax is 

pragma No_Suppress (<identlfier> [, [ON ->] <iame>]); 

<identif ler> The type of chedcyou do not want to suppress. 

<Mme> The name of the object, type/subtype, task unit, goieric unit, or 

subprogram within which the check is to be suppressed. <name> 
is optional 

2.6. Pragma Preserve_Layoiit 

The i960 ACS compiler reorders record continents to minimiz e gaps within 
records. Pragma I¥eserve_Layout forces the compiler to maintain the Ada source 
order of components of a given record type, there^ prevoiting the compiler from 
performing this record layout optimization. 

The syntax of this pragma is 

Pragma Pre8erve_Layout ( ON »> <record_type> ); 


2 


Ani'-1940N-VlJl 02INEC91 






LRM Annotations 


i960 ACS pragmas 


Preserve_Layout must qipear before any forcing occurroices of the record type 
and must be in the same declarative part, package specification, or task 
specification. This pragma can be allied to a record type that has been packed. 
If Presave_Layout is applied to a record type that has a record rq)resentation 
clause, the pragma onfy ^plies to the components that do not have conponent 
clauses. These components will appear in Ada source order after the conponaits 
with conponent clauses. 

2.7. Pragma Suppress_Ail 

Suppress_All is an inplonentation-defined pragma that suppresses all checks in a 
given scope. Pragma Stppress_All takes no arguments and can be placed in the 
same scopes as pragma Suppress. 

In the presence of pragma Stppress_All or any other Si^press pragma, the scope 
that contains the pragma will have checking turned off This pragma should be 
used in a safe piece of time-critical code to allow for better p^ormance. 


3. Impiementation-dependent attributes 

i960 ACS has the following implonentation-dpendrat attributes; 

‘Qffiset (inMQ) 

’Sulprogram_yalue 

’Extaided_Image 

’Extended_Value 

’Ejrtended_Width 

’Extended_Aft 

*ExtaidedJDigits 

’Extended Fore 


3.1. 'Offset 

’Offset yields the offset of an Ada object from its paroit frame. This attribute 
supports machine code insertions. 

3.2. ’Subprogram_Vaiue 

This attribute returns the value of the record type Subprogram Value defined in 
package System. 

3.3. Extended attributes for scalar types 

The extended attributes extend the concqjt behind the text attributes Tmage, 
’Value, and ’Width to give the user more power and flexibility what dipl^ing 
values of scalars. Extended attributes differ in two respects from their predefined 
counterparts: 


APF-1940N-V1.1 02DEC91 


3 







i960 ACS attributes 


i960 ACS for VAX/VMS-E960 


1. Extended attributes take more parameters and allow control of the 
format of the output string. 

2 . Extended attributes are defined for all scalar ^'pes, induding fixed and 
floating point ^pes. 

Named parameter associations are not current^ supported for the extended 
attributes. 


Extended versions of predefined attributes are provided for int^er, enumo'ation, 
floating point, and fixed point types; 


Integer 

’Extendedjbnage 
*Extended_Value 
’Extended Width 


EmuneratioD 

•Extended^Image 
’Extended_^Value 
’Extended Width 


Floating Point 

’Extaided_Image 

’Extended_Value 

’Extended_Digits 


Fixed Point 

’Exta)ded_Image 

’Extended_Value 

’Extended_Fore 

’Extended_Aft 


For integer and enumo-ation ^pes, the ’Extaided_Value attribute is identical to 
the ’Value attribute. For enum^tion types, the ’Extended_Width attribute is 
identical to the ’Width attribute. 


The extended attributes can be used without the overhead of including Text^IO in 
the linked program. The following examples illustrate the difference betweoi 
instantiating TextJ[O.Float_IO to convert a float value to a string and using 
Float’Extended_Image; 


4 


Ani'-1940N-VlJ 02DEC91 






LRM Annotations 


i960 ACS attributes 


vlth Teact_IO; 

function Convert_To_String ( FI : Float ) return String is 
Teinp_Str : String (1 .. 6-1- Float'Digits ); 
package Flt_IO is new Text_^IO.Float_IO (Float); 
begin 

Flt_IO.Put ( Teiop_Str, FI ); 
return TeiBp_Str; 
end Convert_To_String; 


function Convert_To__String_No_Text_10( FI : Float ) return String i 
begin 

return Float'Extended_Iinage ( FI ); 
end Convert_To__String_No_Text_IO; 


with Text_IO, Convert_To_String, Convert_To_String_No_Text__IO; 
procedure Show Different_Conversions is ” 

Value : Float 10.03376; 
begin 

Text_I0. Put__Line ( "Using the Convert__To_String, the value of 
the variable is : " & Convert_To_Strlng ( Value ) ); 
Text_IO.Put__Line ( "Using the Convert_To__String_No_Text_IO, 
the value is ; " & Convert_To_String_No_Text_I0”( Value”) ); 
end Show Different Conversions;” ” ” 


APF-1940N-V1J 02DEC91 


5 




Integer attributes 


i960 ACS for VAX/VMS-E960 


3.3.1. Integer attributes 

’ExtendedJmage 

X’Eztended__IiDage (Item, Vldth, Base, Based, Space_I£_Posltlve) 

Returns the image associated with Iton as d^ined in Text_IO.Integer_IO. 
The Text_IO definition states that the value of Iton is an integer literal with 
no underlines, no exponent, no leading zeros (but a single zero for the zero 
value), and a minus sign if negative. If the resulting sequence of charactos 
to be ouq)ut has fewer than Width characters, leading spaces are first 
ouq)ut to make up the diffo'ence. (LRM 143.7:10,143.7:11) 

For a prefix X that is a discrete ^pe or sub^pe, this attribute is a function 
that may have more than one parameter. The parameter Iton must be an 
integer value. The resulting string is without underlines, leading zeros, or 
trailing spaces. 


Parameters 


Item The item for which you want the image; it is passed to the 
function. Required. 

Width The minimum number of characters to be in the string 

that is returned. If no width is specified, the default (0) is 
assumed. Optional. 

Base The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional. 

Based An indication of whether you want the string returned to 
be in base notation or not If no preference is specified, 
the default (false) is assumed. Optional. 


Space_If_Fos itIve An indication of whetho* or not a positive int^er should 

be prefixed with a space in the string returned. If no 
preference is specified, the default (false) is asstuned. 
Optional 


Examples 

subtype Z Is Integer Range -10..16; 


Values yielded for selected parameters: 


Z'Extended_Image(5) - "5" 

Z'E3ctended_Image(5,0) > "5” 

Z'Eztended_Image(5,2) > 5 " 

Z'Eztended_Image(5.0,2) - "101" 


6 


APF.1940N-V1J 02DEC91 







LRM Annotations 


Integer attributes 


X'Extended_Image(5,4,2) 
Z'Eztended_Ii&age (5,0,2 ,True) 

Z'Eztended_Image(5,0,10,False) 

Z'Eztended^Image(5,0,10,False,True) 

Z'Extended_Inage(-1,0,10,False,False) 
Z'Extended_lmage(-1,0,10,False,True) 
Z' Extended__I]Bage( -1,1,10, False,True) 
Z'Extended_Image(-1,0,2,True,True) 

Z'Extended_Image(-1,10,2,True,True) 


. " 101" 

- - 2 # 101 #" 
m ** 5 ** 

K ** 5" 

K 

- "- 2 # 1 #" 
- 2 // 1 //" 


APF-1940N-V1.1 02DEC91 


7 



Integer attributes 


i960 ACS for VAX/VMS-E960 


*Extended_V(alue 

X'Eztended_Value(Itern) 

Returns the value associated with Item as defined in Text_IO.Int^er_IO. 
The Text_IO definition states that given a string, it reads an integer >^ue 
from the ^ginning of the string. The value returned correqxmds to the 
sequence input (LRM 143.7:14) 

For a prefix X that is a discrete Qpe or subtype, this attribute is a function 
with a single parameta. The actual parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored In 
the case where an illegal string is passed ^ Constraint_Error is raised 

Parameter 

Item A parameter of the predefined type string; it is passed to 
the fimction. The typ)e of the returned value is the base 
type X. Required. 

Examples 

subtype X Is Integer Range -10..16; 

Values yielded for selected parameters: 


X'Extended_Value("5") - 5 

X'Extended_Value(" 5") • 5 

X'Extended~Value("2#101f/") - 5 

X'Extended_Value('’-l") ■ -1 

X'Extended_Value(" -1") » -1 


8 


AIT-1940N-Vld 02DEC91 




LRM Annotations 


Integer attributes 


’Extended_Wiclth 

Z'ExtendedJiridth(Base.Based,Space_If_Posltive) 

Returns the width for subQpe of X. For a prefix X that is a discrete 
subtype, this attribute is a function that may have mul%le parameters. This 
attr&ute yields the maximum image Iragth over all values of the type or 
subtype X. 

Parameters 


Base The base for which the width will be calculated. If no base 
is specified, the default (10) is assumed. Optional 

Based An indication of whetho-the sub^pe is stated in based 

notation. If no value for based is specified, the ddault 
(false) is assumed. Optional 


Space_I£_Pos It Ive An indication of whether or not the sign bit of a positive 

integer is included in the string returned. If no prefo-oice 
is qiecified, the default (false) is assumed. Optional 

Examples 

subtype X is Integer Range -10..16; 


Values yielded for sdected parameters: 

X'Extendedjridth 
X'Extended_Width(10) 

X' Ext ende d__Width ( 2 ) 

X'£xtended_Vldth(10,True) 
X'Extended_¥idth(2,True) 

X'Extended_Vidth( 10 ,False,True) 
X'£xtended_Vidth(10,True,False) 
X'Eztended_Vidth(10,True,True) 
X'Extended_Vldth(2,True.True) 
X'Extended Vldth(2,False,True) 


- 3 - 

- 3 

- 5 -’ 10000 ” 

- 7 -’- 10 * 10 *'’ 

- 8 -’ 2 * 10000 *’ 

- 3 -’ 16 ’ 

- 7 -’- 10 * 10 *’ 

- 7 -’ 10 * 16 *’ 

- 9 -’ 2 * 10000 *’ 

- 6 -’ 10000 ’ 


Ani'-1940N-Vl.l 02DEC91 


9 






Enumeration type attributes 


i960 ACS for VAX/VMS-E960 


3.3.2. Enumeration type attributes 

'Extendedjmage 

Z' Ext ended_Iinage (I tern, V Idth, Uppercase ) 

Returns the image associated with Item as defined in 
Text_IO.Enumeration_IO. The Te3ct_IO definition states that given an 
enumeration literal, it will output the value of the enumeration literal (either 
an identifier or a character literal). The character case parameter is 
ignored for character literals. (LRM 143.9:9) 

For a prefix X that is a discrete ^rpe or subtype; this attribute is a function 
that may have more that one parameter. The parameter Item must be an 
enumeration value. The image of an enumeration value is the 
corresponding identifier, which may have character case and return string 
width specified. 

Parameters 

Item The item for which you want the image; it is passed to the 
function. Required. 

Width The minimum number of charaaers to be in the string 
that is returned. If no width is specified, the default (0) is 
assumed. If the Width specified is larger than the image 
of Item, the return string is padded with trailing spaces. If 
the Width specified is smaller than the image of Item, the 
default is assumed and the image of the enumeration value 
is output completely. Optional. 

Uppercase An indication of whether the returned string is in upper 

case characters. In the case of an numeration ^pe where 
the enumeration lit^als are character literals, l^jpercase 
is ignored and the case q)ecified the type definition is 
taken. If no preference is specified the d^ult (true) is 
assumed. Optional. 


10 


APF-1940N-V1J (I2DEC91 




LRM Annotations 


Enumeration type attributes 


Examples 

type X Is (red, green, blue, purple): 
type Y is ('a', 'B', 'c', 'D'); 


Values yielded for selected parameters: 


X' Extended_Iinage (red) 

- 

"RED" 

X'Extended_Image(red, 4) 

- 

"RED " 

X'£ztended_Image(red,2) 

- 

"RED" 

X'Eztended_linage(red, 0, false) 

- 

"red" 

X'Extendsd_Image(red,10,false) 

- 

"red 

Y' Extended_I]Bage (' a') 

- 

"»a'" 

Y' Eztended_I]sage (' B') 

- 

n »gm 

Y * Extended_Image('a',6) 

- 

"'a' " 

Y'Extended__Image('a' ,0,true) 

- 

"»a'" 


APF-1940N.V1.1 02DEC91 


11 







Enumeration type attributes 


i960 ACS for VAX/VMS-E960 


’Extended_Value 

X'Extended_Value(Item) 

Returns the image associated with Item as defined in 
Text_IO.Enumeration_IO. The Text lO definition states that it reads an 
enumeration value from the beginning of the given string and returns the 
value of the enumeration literal that corresponds to the sequence input 
(LRM 14.3.9:11) 

For a prefix X that is a discrete type or subQpe, this attribute is a function 
with a single parameter. The actual parameter It«n must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint Error is raised. 

Parameter 

Item A parameter of the predefined type string; it is passed to 
the function. The type of the returned value is the base 
type of X Required. 

Examples 

type X is (red, green, blue, purple); 

Values yielded for selected parameters; 

X'Extended_Value("red") » red 

X'Extended_Value(*' green") - green 

X'Extended_Value(" Purple") - purple 
X'Extended_Value(" GreEn ") - green 


12 


APF-1940N-V1.1 02DEC91 







LRM Annotations 


Enumeration type attributes 


’ExtendedWidth 

Z'ExtendedJtfidth 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute is a function. 
This attribute yields the marim um image length over all values of the 
enumeration type or subtype X. 

Parameters 

There are no parameters to this function. This function returns the width of 
the largest (width) enumeration literal in the enumo’ation type ^)ecified Ity 
X. 

Examples 

type X is (red> green, blue, purple); 
type Z is (XI, X12, X123, X1234); 

Values yielded: 

X’Extended Width » 6 - "pwple” 

Z^Extended^Width - 5 -•^1234” 


APF4940N-V1.1 02DEC91 


U 





Floating point attributes 


i960 ACS for VAX/VMS-E960 


3.3.3. Floating point attributes 

’ExtendedJmage 

Z'Eztended^Image(Item,Fore,Aft,Ezp.Base,Based) 

Returns the image associated with Item as defined in Text_IO.Float_IO. 

The Te3ct_IO definitmn states that it outputs the value of the parameter Itan 
as a ded^ literal with the format defined by the other parameters. If the 
value is negative, a minus sign is induded in the integer part of the value of 
Item. If Exp is 0, the integer part of the output has as many digits as are 
needed to rqiresent the int^er part of the ^ue of Iton or is zero if the 
value of Item has no integer part (LRM 143.8:13,143.8:15) 

Item must be a Real value. The resulting string is without underlines or 
trailing spaces. 

Parameters 

Item The it^ for which you want the image; it is passed to the 

function. Required. 

Fore The minimum number of characters for the int^o: part of 

the decimal represoitation in the return string. This 
includes a minus sign if the value is negative and the base 
with the *#’ if based notation is :^)ecified If the integer 
part to be ouq>ut has fewer characters than specified by 
Fore, leading spaces are output first to make iq> the 
difference. If no Fore is specified, the default ^ue (2) is 
assumed. Optional 

Aft The minimum number of decimal digits after the decimal 

point to accommodate the precision desired. If the ddta 
of the type or subtype is greater than 0.1, then Aft is 1. If 
no Aft is specified, the default (X’Digits-1) is assumed. If 
based notation is !^>ecified, the trailing ’#’ is induded in 
Aft Optional 

Exp The minimum number of digits in the exponent The 

exponent consists of a sign and the egq)onent possibly with 
leading zeros. If no Exp is specified, the default (3) is 
assumed. IfExpisO, noe^qxmentisused. Optkmal 

Base The base that the image is to be di^layed in. If no base is 

qjedfied, the default (10) is assum^ OfXkmal 

Based An indication of whether you want the string returned to 

be in based notation or not If no fn’eferenoe is specified, 
the ddault (false) is assumed. Optional 


14 


APF-IMON-VU «2DEC91 





LRM Annotations 


Floating point attributes 


Examples 

type Z is digits 5 range -10.0 .. 16.0; 

Values 3 delded for selected parameters: 

Z'Eztended_Image(5.0) 

Z'Extended_Image(5.0,1) 

Z'Extended^Inage(-5.0,1) 

Z'Eztended_Image(5.0,2,0) 

Z' Extended_Iinage ( 5.0,2,0,0 ) 

Z'Extended_Ifflage(5.0,2,0,0,2) 

Z'Eztended_Image(5.0,2,0,0,2.True) 

Z'Extended_Image(5.0.2.2.3,2,True) 


APF-1940N-V1.1 02DEC91 


" 5.0000E+00" 
"5.0000E+00" 
"-5.0000E+00" 
" 5.0E+00" 

" 5.0" 

" 101 . 0 " 

"2#101.0//" 

"2#l.l#E+02" 





Floating point attributes 


i960 ACS for VAX/VMS-E960 


’Extended_V(alue 

Z'Eztended_Value(Item) 

Returns the value associated with Item as defined in Text_IOJ^oat_IO. 

The TextJlO ddinition states that it sk^ any leading zeros, then reads a 
plus or minus sign if present thra reads the string according to the ^tax of 
a real literal. The return value is that which corresponds to the sequence 
input. (LRM 143.8:9,143.8:10) 

For a prefix X that is a discrete ^pe or subtype; this attribute is a function 
with a single parameter. The actual parameto' Item must be of predefined 
type string. Any leadmg or trailing q)aces in the string X are ignored. In 
die case where an illegal string is passed, a Constraint_Error is raised. 

Parameter 

Item A parameto* of the predefined Qpe string; it is passed to 
the function. The Qpe of the returned value is the base 
Qrpe of the input string. Required. 

Examples 

type Z Is digits 5 range -10.0 .. 16.0; 

Values yidded for selected parameters: 

Z'Extended_Value("5.0") - 5.0 

Z'Extended Value("0.5El") - 5.0 

Z'Extended'‘value("2#1.01#E2") - 5.0 


16 


APF-1940N-V1J OIMm 





LRM Annotations 


Floating point attributes 


’Extended_Digtts 

Z'Eztended_Diglts(Base) 

Returns the numbo' of digits using base in the mantissa of model munb^ 
of the subtype X. 

Parameter 

Base The base that the subtype is defined in. If no base is 
^)ecified, the default (10) is assumed Optional. 


Examples 

type Z Is digits 5 range -10.0 .. 16.0; 
Values yielded: 

Z'Eztended_Dlglts - 5 


APF.1940N.VU 02DEC91 


17 






Fixed point attributes 


i960 ACS for VAX/VMS-E960 


3.3.4. Fixed point attributes 

’ExtendedJmage 

Z' Extended__Iiiiage (I tem, Fore. Af t, Exp, Base, Based) 

Returns the image associated with Iton as defined in Text_IO.Fixed_IO. 
The Text_IO definition states that it outputs the value of the parameter Item 
as a decimal literal with the format defined the other parameters. If the 
value is negative, a minus sign is included in Ae integer part of the value of 
Item. If Exp is 0, the integer part of the ou^ut has as many digits as are 
needed to represent the integer part of the value of Item or is zero if the 
value of Item has no integer part (LRM 14.3.8:13,14.3.8:15) 

For a prefix X that is a discrete type or subQpe; this attribute is a function 
that may have more than one parameter. The parameter Item must be a 
Real value. The resulting string is without imderlines or trailing spaces. 

Parameters 

Item The item for which you want the image; it is passed to the 

function. Required. 

Fore The minimum number of characters for the integer part of 
the decimal representation in the return string. This 
includes a minus sign if the value is negative and the base 
with the ’#’ if based notation is specified. If the integer 
part to be output has fewer characters than specified by 
Fore, leading spaces are ouq^ut first to make the 
difference. If no Fore is specified, the default ^ue (2) is 
assumed. Optional. 

Aft The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta 
of the qpe or subtype is greater than 0.1, then Aft is 1. If 
no Aft is specified, the default (X’Digits-1) is assumed. If 
based notation is specified, the trailing ’#’ is included in 
Aft. Optional. 

Exp The minimum number of digits in the oqponent; the 

exponent consists of a sign and the esqxinent, possibfy with 
leading zeros. If no Exp is specified, the default (3) is 
assumed. IfExpis0,noe3qpon«ntisused. Optional. 

Base The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional. 


18 


APF-1940N-V1J 02DEC91 





LRM Annotations 


Fixed point attributes 


Based An indication of whether you want the string returned to 
be in based notation or not If no preference is ^>ecified, 
the default (false) is assumed Optional. 


Examples 


type Z is delta 0.1 range -10.0 .. 17.0; 
Values yielded for selected parameters: 


Z' Eztended__I]Bage (5.0) 
Z'Eztended_Iiiiage (5.0,1) 
Z'Eztended^ImageC-5.0,1) 

Z'Extended_Image(5.0,2.0) 

Z'Extended^Image(5.0,2,0,0) 

Z'Extended_Image(5.0,2,0,0,2) 
Z'Eztended_I]iiage(5.0,2,0,0,2 ,True) 
Z'Extended^Image(5.0,2,2,3,2,True) 


- " 5.00E+00" 

- "S.OOE+OO" 

- "-5.00E+00" 

- " 5.0E+00" 

- " 5.0" 

- " 101 . 0 " 

- "2#101.0#" 

- -2//1.1//E+02" 


APF-1940N-V1J 02DEC91 


19 





Fixed point attributes 


i960 ACS for VAX/VMS-E960 


’Extended^Value 

Z'Extended^Value(Image) 

Returns the value associated with Item as defined in Text_IO.Fixed_IO. The 
Text_IO definition states that it sk^s any leading zeros, reads a plus or 
minus sign if present, thoi reads the string according to the ^tax of a real 
literal. The return value is that which corresponds to the sequence input 
(LRM 143.8:9,143.8:10) 

For a prefix X that is a discrete Qpe or subtype; this attribute is a function 
with a single parameter. The actual parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
Ae case where an illegal string is passed, a Constraint_Error is raised. 

Parameter 

Image Parameter of the predefined type string. The type of the 
returned value is the base type of the input string. 
Required. 

Examples 

type Z is delta 0.1 range -10.0 .. 17.0; 

Values yielded for selected parameters: 

Z'Extended_Value("5.0") - 5.0 

Z'Extended“value("0.5El") - 5.0 

Z'Extended''value("2#1.0iy/E2") - 5.0 


20 


APF-1940N-V1J 02DEC91 








LRM Annotations 


Fixed point attributes 


’Extended_Fore 

Z*Eztended_Fore(Base,Based) 

Returns the minimum number of characters required for the int^er part of 

the based rqiresentation of X. 

Parameters 

Base The base in which the subtype is to be displayed. If no 

base is specified, the default (10) is assumed Optional 

Based An indication of whether you want the string returned to 
be in based notation or not If no prderence is ^)ecified, 
the default (false) is assumed Optional 

Examples 

type Z Is delta 0.1 range >10.0 .. 17.1; 

Values yielded for selected parameters: 

Z'Extended Fore - 3 -- "-10" 

Z'Extended-Fore(2) - 6 " 10001" 


APF-1940N-V1.1 02DEC91 


21 




Fixed point attributes 


i960 ACS for VAX/VMS-E960 


'Extended_Art 

Z'Extended_Aft(Base,Based) 

Returns the minimum number of characters required for the fractional part 

of the based rqjresoitation of X. 

Parameters 

Base The base in which the subtjpe is to be displayed. If no 

base is spedfied, the defaiilt (10) is assumed Optional 

Based An indication of whetho* you want the string returned to 
be in based notation or not If no preference is specified 
the default (false) is assumed Optional. 

Examples 

type Z is delta 0.1 range -10.0 .. 17.1; 

Values yielded for sdected parameters; 

Z'Extended Aft - 1 - Tfront 0.1 

Z»Extended~Aft(2) - 4 - "0001”pom 2*0.000W 


22 


APF-1940N-V1J[ 02DEC91 





LRM Annotations 


Package System 


4. Package System 


with Unchecked_Conversion; 
with Ordinals; 

package System is 


-- CUSTOMIZABLE VALUES 


type Name is (TeleGenZ); 


System_Name 


constant name TeleGenZ; 


Memory_Size 

Tick 


constant (2 ** 31) -1; --Available memory, in storage 
constant 1.0 / 100.0; --Basic clock rate, in seconds 


type Task_Data is 
record 
null; 

end record; 


-- Adaptation-specific customization information 
-- for task objects. 


-- NON-CUSTOMIZABLE, IMPLEMENTATION-DEPENUENT VALUES 


Storage Unit 

Min_Int“ 

Max_Int 

Hax^Digits 

Max_Mantissa 

Pine Delta 


constant 

constant 

constant 

constant 

constant 

constant 


8 ; 

-(2 ** 31); 

(2 ** 31) - 
18; 

31; 

1.0 / (2 *★ 


1 ; 


Max Mantissa); 


subtype Priority is Integer Range 0 .. 31; 


ADDRESS TYPE SUPPORT 


-- The following type, Mixed_tford, is a Phase 1 contract requirement. 
-- Ref: SRR dated December 7, 1990 (page 2-4). 

-- This type must be be implemented as an access descriptor (AD) 

“-/jW type Mixed_Word is private; 


APF-1940N-VU 02DEC91 


23 






Package System 


i960 ACS for VAX/VMS-E960 


type Mixed_Vord is new Ordinals.Ordinal; 

type Memory is private; 

tjrpe Address is access Memory; 

pragma Access_Address (Address, Virtual); 

type Linear_Address is access Memory; 

pragma Acccss_Address (Linear_Address, Linear); 

type AD_Address is access Memox^; 

pragma Access_Address (AD_Address, AD); 

-- Ensures compatibility between addresses and access types. 
-- Also provides implicit NULL initial value. 


function Convert is new nnchecked_Conversion (Ordinals.Ordinal, Address); 
function Convert is new nnchecked_Conversion (Integer, Address); 

Null_Address: constant Address Convert (Integer'(0)); 

-- Initial value for any Address object 

type Address_Value is range -(2**31)..(2**31)-1; 

--A numeric representation of logical addresses for use in address clauses 


•- For the 80960MC, we choose not to "define nximeric offsets to aid in 
-- Address calculations", e.g. Bex_80000000, Hex_90000000, .... Hex_F0000000 
-- These were defined on the 68K; they are Judged not vital here. 


fxmction Location is new nnchecked_Conversion (Address_Value, Address); 
-- May be used in address clauses: 

Obj ect: Some^Type; 

for Object use at Location (16//4000//); 


function Label (Name: String) return Address; 
pragma Interface (META, Label); 

-- The LABEL meta-function allows a link name to be specified as address 
-- for an imported object in an address clause: 

-- Obj ect: Some_Type; 

-- for Object use at Label("OBJECT$$LINK_NAME"); 

-- System.Label returns Null_Address for non-literal parameters. 


24 


APF-1940N-V1.1 02DEC91 






LRM Annotations 


Package System 


-- Unchecked relative address calculations 

function "+" C Left, Right : Address ) return Address; 

function Ord_Flus ( Left. Right : Address ) return Address renames 

pragma Interface (Assembly, Ord^Plus); 

pragma Interface_Informatlon (Ord_Pltis, "Ord^^Plus”, "gO.gl.gO"); 

function ( Left, Right : Address ) return Address; 

function Ord_Mlnus ( Left, Right : Address ) return Address renames 

pragma Interface (Assembly. Ord_lflnus); 

pragma Interface_Informatlon (OrdJMlnus, "Ord_Mlnus", "gO.gl.gO"); 

function ( Left, Right : Address ) return Address; 

function 6rd_lfultlply ( Left, Right : Address > return Address renames 

pragma Interface (Assembly, Ordjtfultlply); 

pragma Interface_Informatlon (Ord_lfultlply, "Ord_llultlply", "gO.gl.gO"); 
function "/" ( Left, Right : Address ) return Address; 

function Ord_Dlvlde ( Left, Right : Address ) return Address renames "/"; 
pragma Interface (Assembly, Ord_Dlvlde); 

pragma Interface_Informatlon (Ord_Dlvlde, "Ord_Dlvlde", ”", "gO.gl.gO"); 


-- For the 80960MC. we choose not to Include the ERROR REPORTING SUPPORT 
-- (procedure Report_Error) In System. Due to the embedded nature of the 
-- 80960MC target, an unhandled exception traceback procedixire Is not 
-- necessary In the System package. 


-- ERROR REPORTING SUPPORT | 


-- procedure Report_Error; 

-- pragma Interface (Assembly, Report_Error); 

-- pragma Interface_Infor]natlon (Report^Error, "REPORT_ERROR"); 


Report^Error can only be called In an exception handler and provides 
an exception traceback like tracebacks provided for unhandled 
exceptions 


-- ORDINAL SUPPORT 


The basic ordinal types are Imported here to simplify use of these 


APF-1940N-VU 02DEC91 


25 








Package System 


i960 ACS for VAX/VMS-E960 


26 




-- types. Note: literal assignment to these types Is still United to 
-- literals In the Integer range. 

type Short_Short_Ordlnal Is new Ordinals.Short_Short_Ordlnal; 
type Short_Ordlnal Is new Ordinals. Short__Ordlnal; 
type Ordinal Is new Ordinals.Ordinal; 
type IiOng_0rdlnal Is new Ordinals. liOng_0rdlnal; 

function Convert Is new nnchecked_Converslon (Ordinal, Address); 
function Convert Is new Dnchecked^Converslon (Address, Ordinal); 


-- CALL SUPPORT 


type Subprograffi_Entry Is 
record 

OFFSET : Ordinals.Ordinal; 

DOMAIN_AD : Mixed_Word; 
end record; 

type Subprograsi_Value Is 
record 

Froc_addr : Address; 
Parent^frame : Address; 
end record; 


-- Value returned by the implementation-defined 'Subprogram_Value 
-- attribute. The attribute Is not defined for subprograms with 
-- parameters, or functions. 


For the 809601fC, we choose not to include the 88K/Mlps CALL procedure 
at this time. 

procedure Call (Subprogram: Subprogram_Value); 
procedure Call (Subprogram: Address); 

pragma Interface (META, Call); 

-- The CALL meta-functlon allows Indirect calls to subprograms 
-- given their subprogram value. The result of a call to a nested 
-- procedure whose parent frame does not exist (has been deallocated) 
--at the time of the call. Is undefined. 

-- The second form allows calls to a subprogram given Its address, 
--as returned by the 'Address attribute. The call Is undefined if 
-- the subprogram Is not a parameterless non-nested procedure. 


AFF-1940N.VU 02MO1 













LRM Annotations 


Package System 


- For the 80960MC, we choose not to Include the following 88R/Mlps 

- declarations at this time. 


-- Maz_ObJect_Slze : CONSTANT 
-- Max_Record_Count : CONSTANT 
-- Max_Text_Io__Count : CONSTANT 
-- Max Text”lo”Fleld : CONSTANT 


Max_Int; 
Max_Int; 
Max_Int-l; 
1000; 


private 

type Memory Is 
record 
null; 

end record: 

type Mlxed_Vord Is array(natural range 0..31) of boolean; 
-- There's one more bit In Mlxed_tford. but It's Invisible. 

pragma pack(Mlxed Vord); 

-- for Mlxed_Word'SIZE use”32; 

end System; 


System.Label 

The System.Label meta-funcdon is provided to allow you to address objects by a 
linker-recognized label name. This function takes a single string literal as a 
parameter and returns a value of %stem.Address. The function sinqjfy returns 
the run-time address of the aj^ropriate resolved link name, the primary purpose 
being to address objects created and referenced from other languages. 

• When used in an address clause, ^temXabd indicates that the Ada 
object or subprogram is to be referenced 1^ a label name. The actual 
object must created in some other unit (normally by another 
language), and this capability sinq}ly allows you to in^xirt that object and 
reference it in Ada. Any e^qplicit or default initialization will be sailed 
to the object For exan^le, if the object is declared to be of an access 
type, it will be initialized to NULL. 

• When used m an e:q>ression, ^tem.LabeI provides the link time 
address of any name, suc^ as a name for an object or a subpr()gram. 


APF-1940N-Vld 02DEC91 


27 









i960 ACS characteristics 


i960 ACS for VAX/VMS-E960 


5. Restrictions on representation ciauses 

Rq>resentation clauses are fully supported with the following excqjtions: 

• Enumeration representation clauses are supported for all enumeration Qpes 
except Boolean types. 

• Record rqiresentation clauses are si^orted excqit for records with 
(j^mamically-sized con^nents. 

• Pragma Pack is s'i^ported excqjt for dynamkaliy-sized components. 

6. implementation-generated names 

i960 ACS has no implemaitatiorngenerated names. 

7. Address clause expression interpretation 

An eaqpression that appears in an object address dause is interpreted as the 
address of the Erst storage unit of the object. 

8. Restrictions on unchecked conversions 

Unchecked progranuning is supported excq)t for unchecked Qpe conversions 
where the destination type is an unconstrained record or array Qpe. 

9. Implementation-dependent characteristics of the I/O 

packages 

Text_IO has the following in^lemaitation-d^joident characteristics: 
type Count Is range 0..(2 ** 31)-2; 

subtype Field Is Integer range 0..1000; 

Ute standard run-time sublibraiy contains preinstantiated versions of 
Text_IO.Integer_IO for tjpes Short_Short_Integer, Shortjnteger, and Int^er, 
and of Te*t_IO.Float_IO for types Float, Long_Float, and Long_Long Float Use 
the following packages to elin^te multple in^antiations of the Text lo 
packages: 

Short_Short_Integer_Text_IO 

Short_Integer_Text_ro 

Int^er_Text_IO 

Float_Text_IO 

Long_Floatjrext_IO 

Long_Long_FloaT_Text_10 


28 


APF-1940N-V1J 02DEC91 









