REPORT DOCUMENTATION PAGE 


FOrmApprouad 


OPMNo. 

WmiSr. 


>\i>lew»oitii^> M «<tnfcrlW» w l nl l nr iotl n li ii ii1 nn li«>liiw1«d Win i l Hautpif wipoi m .lwBlu rih gltwlimafc 
■nd wW ^ nl nQlMdif I wg ttWQ Bte o l ltnBlInImMtIon. ••ndaoiiiiMXiiagirtbiglMihurtafiMili 

“—‘T"— ■—^ ~ jb 

a2203>(30>, aid M ttw OMe* ot MoniwNon wd difiiMaqr Miim. OHos at Mra^mw* and lurigal. WaaMngton, DC 


dng kimuaUaM, aaMNne oaMing d«a 
any othof —goa d tWa Ml mi an a odaniiaiow. I w tudfi M 
lais JrilMion Oada H dt a wy. Suto ISM. Mn|len. VA 




r.«=ir?i.TTJ:c= 


VADS Sun4 *) MIPS R30000/VAda-110-42620, Version 6.2, Host: 
Sun SPARCstation 2 , Target: Lockheed Sanders STAR MVP(MIP'' 
R3000 bare board) , 930901W1.11323 


AD-A273 718 


Authors: 

Wright-Patterson AFB 




Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 




Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington. DC 20301-3080 








lON/AVAl 

Approved for public release; distribution unlimited 


13. (Maximum 

VADS Sun4 =) MIPS R3000/VAda-100-42620, Version 6.2, Host: Sun SPARCStation 2, Target: 
Lockheed Sanders STAR MVP (MIPS R3000 bare board) 

ACVCl.il 



* J I 


ns£LtC-i^-. 

W fil li 


Ada programming language, Ada Compiler Val. Summary Report, Ada Comp 
A*!r/)(fi-sftP!§UA?^AJ^6^- Testing, Ada Val. Office, Ada Val. Faclll 


17. SECUROY 18. SECURITY 19. SECURITY radTUMITA 

CLASSIFICATION c CLASSIFICATION 

UNCLASSIFED UNCLASSIFED UNCLASSIFIED UNCLASSIFED 






UNCLASSIFED 









AVr Control NUnber: AVF-VSR-570.0893 

Dat« VSR Coopleted: Sopteober 28 , 1993 

93-07-23-Via 


Ada COMPILER 
^a^IOAnGN SUMMARY REPORT: 

Certificate Number: 930901N1.11323 
Verdix Corporation 

VADS Sun4 -> HIPS R3000/VAda-110-42620, Version 6.2 
Sun SPARCstation 2 under Solaris, 2.2 ■> 
Lockheed Sanders STAR MVP (MIPS R3000 bare board) 


(Final) 


Prepared By: 

Ada Validation Facility 
645 C CSG/SCSL 

Wri^t-Patterson AFB OR 45433-6503 


93 i2 13 055 


93-30205 

nmua 








Certificate Infomtion 


Itie follotring Ada iaplenentatlon vme tested and determined to pass ACVC 
1.11. Testing eas caB(>leted on Septraber 1, 1993. 

Ccmpiler Name and version: VKDS Sun4 •> MIPS R3000/VAda-110-42620, Version 6.2 

Host COsfXJter System: Sun SPARCstation 2 

under Solaris, 2.2 


Target Comfiuter Systra: Lockheed Sanders SXkR MVP (HIPS R3000 bare board) 

customer Agreement fkmter: 93-07-23-VIO( 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
930901H1.11323 is awarded to Verdix Corporation. This certificate expires 
two years after MIL-STD-ISISB is approv^ by ANSI. 


This report has been reviewed and is approved. 


-e. -- 

Ada' valida€ion Pac 


L 


Dale E. Lange 
Technical Director 
645 CCSG/SCSL 
Wri^t-Patterson AFB OH 



TSE 
Direi 
Institute for 
Alexandria VA 


45433^6503 


brganisaticxi 
Iter and Software Engineering Division 

Ilia* inio QUiUW IH8PE0TBD s 




Ada i^bint Program Office 
M. Dirk Rogers, Major, USAF 
Acting Director 
Department of Defense 
Nashington DC 20301 


Aooesslon For 

t 

STIS GRAftl 


DTIC TAB 

□ 

Unannoucoed 

□ 

Justificatioo_ 

■. . i 

\ 

By 



Dlatributlop/ 


»l8t 


Avfillf<blllty Codes 

'..r'l/or 

Spi'olil 


I* 


I 


ATTACHMENT I 


DECLARATION OF CONFORMANCE 
Customer; Verdix Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Compiler Name and Version: VADS Sun4 -> MIPS R3000/ Version 6.2, 

VAda-110-42620 

Host Computer System: Sun SPARCstation 2, Solaris 2.2 

Target Computer System: Lockheed Sanders STAR MVP 

(MIPS R3000 bare board) 


Customer's Declaration: 

[I/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 









TABLE OP OCNTBfTS 


CHAPTER 1 nURCXXICnON 

1.1 USE OP THIS VALIDATION SUHHARY REFOStT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINinGN OP TERMS.1-3 

CHAPTER 2 IMPLENDHATIGN OEPEIOENCIES 

2.1 NITBDftMHN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-3 

CHAPTER 3 FROCESSINS INPQRIATION 

3.1 T ES T IN G ENVUtONONT.3-1 

3.2 SUMMARY OP TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX P OF THE Ada STANDARD 














nUROOUCTIGN 


Hm Ada iaplaMiitatlan dascribtd above tma taatad according to the Ada 
Validation Procaduras [Pro90] against tha Ada Standard [Ada83] \iting tha 
currant Ada Ooapilar validation Ci^tability (ACVC). This vali^tion Suanary 
Report (VSR) ^vas an account of the tasting of this Ada iaplas»ntation. 

For any technical tarns \isad in this report, tha reader is referred to 
[ProSOj. A detailed description of the ACVC nay be found In the current 
ACVC User's Guide [UG89]. 


1.1 USE OF IBIS VALIOSnCN SUVABY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body nay nake full and free public disclosure of this report. 
In the united States, this is provided in accordance %d.th the "Freedon of 
Infomation Act" (5 U.S.C. #552). The results of this validation apply 
only to the conputers, operating systans, and conpiler versions identified 
in this report. 

Itie organisations represented on the signature page of this report do not 
represent or warrant that all statewnts set forth in this report are 
accurate and conplete, or that the subject inplensntation has no 
nonconfomities to the Ada Standard other than those presented, copies of 
this report are available to the public fron the AVF ^diidi perfomed this 
validation or fron: 

National Technical Inforaation Service 
5285 Port Bpyel Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF %diidi perfomed this validation or to: 

Ada validation Organisation 

CoBfuter and Software Bogineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311<-1772 






INXICCUCnON 


1.2 REFERDCBS 


[Ada83] Rvftrtnc* Manual for the Ada Prograaadno Language, 
AN8t/M!L-51&-ieiSA,'Fe^ry 19il and flo esl2=I987. 

[Pro90] Ada Coepller validation Procedurea , version 2.1, Ada Joint 
Progriu office, ^igust 1990. 

[UG89) Ada Coapiler validation Capability Oser^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Goaopliance of Ada iaplenentations is tested by naans of the ACVC. The ACVC 
contains a collection of test prograas structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test nans identifies the class to 
%dU.ch it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at coo|>ile tine and link tine, 
respectively. 

The executable tests are written in a self-diecking manner and produce a 
PASSED, fAILED, ot NOT APPLICABLE message indicating the result when t hey 
are executed. Three Ada library ixiits, the Mckages REPORT and SPPBT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
qptinisations allowed by the A da Standard that would circuevent a test 
(^jective. The package SPPRn3 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK FILE is used to check the contents of 
text files %rritten by some of the ^ass C tests for Qupter 14 of the Ada 
Standard. The qperation of REPORT and CBECKJFILE is dwcked by a set of 
executable tests. If these units are ix>t operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting coopilation listing is examined to verify that all violations of 
the Ada Standard are detected. Sosm of the class B tests contain legal Ada 
code ^ch must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implmentation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are e:qpected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced b/ 
implementation-specific values — for exaaple, the largest integer. A list 
of the valxies usm for this implementation is provided in Jppendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove ixiforesem conflicts between the tests and 
implementation-dependent duiracteristics. The modifications required for 
this implmeentation are described in section 2.3. 


1-2 






nmoxicnGN 


For Mch Ada iaplaMntation, a cuatoadsad test suita is producad by tha 
AVr. This custcadsation ccxisists of aaking tha Modifications dascribad in 
tha pracading paragraph, raaoving withdrawn tasts (saa saction 2.1), and 
possibly raaovlng soa* inapplicabla tasts (saa saction 2.2 and [UG89]). 

in ordar to pass an ACVC an Ada iaplsaantation aust procass aadi tast of 
tha custcadsad tast suita according to tha A^ Standard. 


1.4 DEFINITION OF TERNS 

Ada Coapilar Tha softwara and any naadad hardwara that have to ba addad 
to a givan host and targat caa|iutar sysUn to allow 
transforaation of Ada prograas into axacutabla fora and 
axacution tharaof. 

Ada COapilar Tha aaans for tasting coaplianca of Ada inplaaantations, 
validation consisting of the tast suita, tha si^port prograas, tha ACVC 
Capability usar's guida and tha taaplata for tha validation suaaary 

(ACVC) raport. 

Ada* An Ada coapilar with its host coaputar systaa and its 

Inplaaantation targat coaputar systaa. 

Ada Joint Tha part of tha cartification body providas policy and 

Prograa guidance for tha Ada cartification systaa. 

Office (AJPO) 

Ada Tha part of tha cartification bo(^ which carries out the 

validation procedures required to establish tha coaplianca of an Ada 
Facility (AVF) iapleaantation. 

Ada Tha part of tha cartification body that providas technical 

validation guidimea for operations of tha Ada cartification system. 

Organization 
(AVD) 

coaplianca of Tha ability of the iaplaaentation to pass an ACVC version, 
an Ada 

Iaplaaentation 

Coaputar A functional unit, consisting of one or more coaputars and 

Systaa associated softwara, that uses c oaaon storage for all or 

part of a program and also for all or part of the data 
necessary for tha axacution of tha prograa; executes 
usar-writtan or usar-dasignatad prograas; performs 
user-designated data aanipulatlon, including arithmetic 
operations and logic operations; and that can execute 
programs that modify theasalves during axacution. A 
computer systaa may be a stand-alone unit or may consist of 
several intar-connectad units. 



1-3 






INXKmCTZON 


Gonfondty Fulfillamt by a product, process, or service of all 
requiresmts specified. 

CustcsMr An individual or corporate entity %dio enters into an 

agreesMnt with an AVr %diich specifies the teres and 
conditions for AVF services (of any kind) to be perforaed. 

Declaration of A foreal statssent fron a custoner assuring that conforadty 
Conforeance is realised or attainable on the Ada isfileaentation for 
whidi validation status is realized. 

Host Ctanputer A coa|)uter systeai %diere Ada source programs are transforoed 
System into executable form. 

Inapplicable A test that contains one or more test dbjectives found to be 
test irrelevant for the given Ada impleiBentatian. 

ISO International Organization for Standardization. 

LRH The Ada standard, or Language Reference Manual, published as 

ANSI/MIL>sro-1815A^1983 and ISO 8652-1987. Citations from 
the LRM take the form ''<section>.<subsection>:<paragri43h>.'' 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, sdieduling, 

ii^t/oul^t control, and data management. Usually, 
operating systems are predominantly software, but partial or 
coB^ete hardware inplem»)tations are possible. 

Target A computer system where the executable form of Ada programs 

Cosgiuter are executed. 

System 

Validated Ada Ihe coapiler of a validated Ada inploeentation. 

Compiler 

validated Ada An Ada implesmtation that has been validated successfully 
Implementation either by AVF testing or by registration [Pro90]. 

validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this im^ementation. 

Withdrawn A test found to be incorrect and not used in conformity 
test testing. A test may be incorrect because it has an invalid 

test ^jective, fails to meet its test cd>jective, or 
contains erroneous or illegal \ise of the Ada programming 
language. 


1-4 




CHAP TE R 2 


IHPLEMBnATION DEPEMDDXnBS 


2.1 mTHDWtn TESTS 

Th* folloiring tasts hav* baan withdrawn by tha AVO. Tha ratlonala for 
withdrawing aa^ tast la avallabla fron aithar tha AVO or tha AVF. Tha 
publication data for this Hat of withdrawn taata la 2 Auguat 1991. 


E2S005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C3S508H 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45U4A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C9402U 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

ca223A 

Ba226A 

Ca226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051O 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD700dA 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CB2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A taat la Iraqpplicabla If It contalna taat objactlvaa idilch are irrelevant 
for a given Ada iaplaaantatian. Reaaoia for a teat'a Inapplicability nay 
be avpportad by dccuaienta iaaued by tha ISO and the AJPO known aa Ada 
CoBB wn tariea md coaomly reference in the fomat Al-ddddd. For thia 
iapleanntation, the following teata were determined to be inamlicable for 
the reaaona indented; referencea to Ada Connentariaa are included aa 
i^ropriata. 


2-1 



IMPLDlDniMnGN OEPDIieiCIES 


The following 201 tests have floa ting-point type declarations 
requiring sore digits than sySTEH.MMMDIGITS: 


C24113L..y (14 tests) 
C35706L..y (14 tests) 
C35708L..y (14 tests) 
C4524lL..y (14 tests) 
C4542lL..y (14 tests) 
C45524L..Z (15 tests) 
C4564lL..y (14 tests) 


C35705L..y (14 tests) 
C35707L..y (14 tests) 
C35802L..Z (15 tests) 
C4532lL..y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


ISw following 20 tests check for the predefined type I£NG__INTBGER; for 
this iaplensntation, there is no sudi type: 


C35404C 

C45502C 

C45613C 

C55B07A 


C45231C 

C45503C 

C45614C 

B55B09C 


C45304C 

C45504C 

C45631C 

B86001H 


C45411C 

C45504P 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

C3>7101P 


C35713D and B86001Z check for a predefined floating-point type with a 
nane other than FLOAT, LQN6JFLQAT, or SHGRr_FLQMr; for this 
iBfdenientation, there is no such Qpe. 

C45531M. .P and C45532M. .P (8 tests) check fixedt-point operations for 
^^s that require a SYSTEM.HMMIMinsSA of 47 or greater; for this 
iaplenentation, HAX^HANTISSA is less than 47. 

C45624A. .B (2 tests) check that the proper exception is raised if 
MACBINEJOVERFLCMS is FALSE for floating point types and the results of 
various floating-^int operations lie outside the range of the base 
type; for this iaplwaentation, NACHINEJCVERFLOWS is TRUE. 

B8600iy uses the name of a predefined fixed-point type other than type 
DURATIGN; for this implonentation, there is no such type. 

C96005B \wes values of type DURATION'S base type that are outside the 
range of type DURATION; for this inplenentation, the ranges are the 
sane. 


OD1009C checks vAiether a length clause can specify a non-default size 
for a floating-point type; this iaplementation does not si^sport sudi 

sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this iqplonentation 
does not srqpport such sizes. 

The tests listed in the following table check that USEJERROR is raised 
if the given file c^rations are not sii^jported for the given 
conbination of node and access method; this implementation m^iports 
tlwse operations. 


Test Pile Operaticxi Node 

2-2 


File Access Method 







IMPLEHENDenON OEPEMDDICIES 


CE2102D 

CREATE 

IN FILE 

SBQUSITIAL 10 

CE2102E 

CREATE 

cuff FILE 

SEQUENTIAL 10 

CE2102P 

CREATE 

INOOr FILE 

DIRECT 10 

CE21021 

CREATE 

IN FICB 

DIRECT 10 

CE2102J 

CREATE 

Off FILE 

DIRECT 10 

CE2102N 

OPEN 

IN Tile 

sequential 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

C»D4 

CUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

oot file 

SEQUENTIAL 10 

CE2102R 

OPEN 

inoDt file 

DIRECT 10 

CB2102S 

RESET 

INQUI FILE 

DIRECIT10 

CE2102T 

OPEN 

IN FllB 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

Olff FILE 

DIRECT 10 

CB2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN Tile 

TEXT l5 

CE3102F 

RESET 

Any Mode 

TE3CT_I0 

CE3102G 

mlete 

TEXT 10 

CE3102I 

CREATE 

OUT file 

TE3CT 10 

CE3102J 

OPEN 

IN Tile 

TE*T_IO 

CE3102K 

OPEN 

off FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERRCR if the capacity of an 
external sequential file is exceeded; this inplenentation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERRCR if the capacity of an 
external direct file is exceeded; this ii^lsnentation cazmot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_FA(Z LENOIH raise 
USEJBSIROR if they specify an Tn£q)prppriate value for the external 
file; there are no inappropriate valiies for this implementation. 

CE3413B checks that PAGE raises lAIOUT ERROR when the value of the 
page nuiober exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST nODIFTCATIGNS 

Modifications (see sectioi 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
implementatim did not report the violations of the Ada Stan^rd in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H Ba303F BC3005B BD2B03A BD2D03A 

BD4003A 


2-3 





IMPLDlDnimGN OCPDIDBICIES 


CD1009A, CD1009I, CD1C03A, CD2A22J, CD2A24A, and a>2A3lA..C (3 Tests) were 
graded passed by Evaluation Modification as direc ted b y the AVO. These 
tests use instantiations of the support procedure LENGTHjCHBac, vdiich uses 
UhcheckedjCcnversian according to the interpretatim given in AI-00590. 
The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTHjCHECK—i.e, the allowed Report.Failed messages have the 
general form: 

” * CHECK GN REPRESENTAnON FOR <TTPE ID> FAILED." 


AD9001B was graded passed by Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is cm %dth a parameter of mode GUT (line 
36). This inplemenation does not support pragma INTERFACE for proce^res 
with parameters of mode OUT. The test was modified by coanenting out line 
36 and 40; the modified test was passed. 


2-4 






C HAP TE R 3 


PRCXZSSmS INPQBHATION 


3.1 TESTING ENVIRONMENT 

The Ada Inplanentation tested in this validation effort is described 
adequately by the infomation given in the initial pages of this report. 

For technical and sales infomation about this Ada inplesMntation, contact: 

Corey Ashford 
Verdix Corporation 
1600 N.w. Conpton Drive 
Aloha, OR 97006-6905 


Testing of this Ada inplementation vas conducted at the custoewr's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the custoeiized test suite in accordance with the Ada Programming 
Language Standard, \diether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
detained that conforms to the Ada Programming Language Standard. 

The list of items below gl )s the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (iton d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 



3-1 






FRXZ8SIM8 mPQRIMnGN 


a) Total Mnbar of J^plicabla Testa 3809 

b) Total tluabec of Withdrawn lasts 95 

c) Processed Inapplicable Tests 65 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total NOnber of Ini^iplicable Tests 266 (C4d4«) 


g) Total NUeber of Tests for hOVC 1.11 4170 (a4l>«-f) 


3.3 TEST EXECUnCN 

A nagnetic tiqpe containing the custcsdsed test suite (see section 1.3) was 
taken on-site by the valiwtion team for processing. The contents of the 
nagnetic tape were loaded onto a Sun Norkstation and copied over Ethernet 
to the host cooputer. 

After the test files were loaded onto the host cosputer, the full set of 
tests %<as processed by the Ada iaplenentatlon. 

Testing was performed using cosnand scripts provided by the customer and 
review^ by the validation team. See appendix B for a cosplete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked ex^dicitly for validation testing 
during this test were: 

Opticn/Switch Effect 

-w Suppress %mming diagnostics. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and ardiived at the AVF. The listings exea^ined on-site by 
the validation team were also archived. 


3-2 




APPBOIX A 
MACStO PARAMETERS 


This appendix contains the nacro paranatars used for custcnizing tha ACVC. 
Tha naaning and purpose of these pamatars are asqidainad in [UG89]. Tha 
parameter values are presented in teo tables. The first table lists the 
valxMS that are defii^ in terms of the maximum if^t-line length, vAiidi is 
the valtw for $HAX_IN_LEN—also listed here. These values are ejqpressed 
here as Ada string aggregates, vhere "v** represents the maximum input-line 
length. 


Macro Parameter 


Macro value 


$MAX_IN_LEN 

$BIG_IOl 

$BI6_ID2 

$BIG_ID3 

$BI6_ID4 


499 — value of V 

(1..V-1 -> V -> a») 

(1..V-1 -> V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> »A») & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT__LIT 

(1..V-3 -> '0') a 

"298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') a 

"690.0" 

$BIG_STRING1 

a (1..V/2 -> 

'A') a 

$BIG_STRINS2 

a (1..V-1-V/2 

-> »A») a a' a 

$BLAMKS 

(1..V-20 •> • •) 


$MAX LEN INT BASED LITERAL 

- “ - "2:" a (1..V-5-> 

'0») a "11:" 


$MAX LEM REAL BASED LITERAL 

“ - - - "16i" & (1..V-7 -> & "F.E:" 


r « r 







$mx STRZNS LITERAL 


tni 


& (1..V-2 -> 'A') & 


» Hr 


Tha followiiig tabla lists all of tha otbar sacro parasatars and thair 
caspactiva valuas. 


Macro Paranstec 

Macro valua 

$ACC_SIZE 

32 

$ALIGNMEMT 

4 

$aXJNT_LAST 

2_147__483_647 

$1XFAULT_HEH_SIZE 

16_777_216 

$DERAULT_STaR_UNIT 

8 

$DEEAULT_SYSjnHE 

SUN4_CR06SJi3000B 

$I«LTAJDOC 

0.0000000004656612873077392578125 

$ENIRy_AIX»ESS 

SySTSII.V( 16140#) 

$ENIRT_AQOBESSl 

SySTEII.V”(16«80i) 

$ENIRYJU}I»ESS2 

SYSTEM. *•«>"( 1611001) 

$FIEIJ>_LAST 

2_147_483_647 

$FILE_TERHINATOR 

» » 

$FIXED_NAHE 

no_such_type 

$FLQAT_NAHE 

NO_SUCH_TYPE 

$FORH_STItINS 

NN 

$F0BM_STRINS2 

"CANMOT_RESTiaCT_FILEjCAPACITY" 

$GREATER THAN DURATION 

100__000.0 


$GREATER THAN DURATIGN BASE LAST 

To_ooTr_ooo.o 

$GREAIER THAN FLOAT BASE LAST 

1.7Ef308 

$GREATER THAN FLOAT SAFE LARGE 

“ " 9.TJE37 







mcno BMtMRERS 


$GRBMIlil 1BMI SBQRT FLOAT SAFE LMKZ 
“ ~ ” 9.C*37 " 

$HIGH_FRICItm 99 

$ILLBGAL BOBIMAL FILE IMBl 

“ l%2102c.dat" 

$ZLLIGM. EXIERNAL FILE NAIIE2 

’/ill«9i‘Vfll«_n«»/CE2102C*.<tot" 

$ItAPPIIQRtIATB LIME LDOIB 

“ -1 


$IIS^PPICRtIATE_PAGE_IJMSIB 



-1 

$INCLUDEJPIttfiHAl 

FRAGHA mCLUDE 

$IIICLUDE__PIlAfiHA2 

PEAGHA INCLUDE 

$INIBGER_FI8ST 

-2_147_483j548 

$INIBGER_LAST 

2_147_483_647 

$INIBGERJA8T_PLUS_1 

2_147_483_648 

$ZNIERr3yCEJLAIIQ(]AGE 

C 

$IiESSJIBANJX]RATIGN 

-100_000.0 

$LESS THAN DURATIGN BASE FIRST 

- “ ■" -liy 000 000.0 


("A28006D1.TST*) 
("82800601.TST**) 


$LINE_TE!Q(INATOR 

ASai.LF 4 ASai.FF 

$L0N_FItI0RIT]r 

0 

$HACEINE CODE STA3EHEMT 

OODE__OMOiP-> NOP); 

$nAC31INEJXX)BJ 

O0DE_0 

$iiANnssAjxx: 

31 

$HAXJ>I6I1S 

15 

$IIAX__INT 

2_147_483j647 

$MAX_INT_PLDS_1 

2_147_483_648 

$I!IN_INT 

-2_147_483_648 

$NAHE 

TINT_INrPJGER 


A-3 



mcao PANMEIIRS 

$NMIE_UST SljN4_CROSSJt3000B 

$NMlE__SPECIFICAnGNl /\urA«st_suit«s/acvcl.ll/c/«/X212GA 
$NMlE_SPECinCMnGN2 A»rA«st__suit*s/acvcl. 11/C/9/X2120B 
$NMlE_SFBClFICMnON3 AarA«*t_suitaa/acvcl. ll/c/e/X3119A 
$MEGJBASEp_INT 16«P000000Ei 

$NENJ1BH_SIZE 16_777_216 

$iaNJST»JUNIT 8 

$NRr_SyS_NMS SUM_CR0SS_R3000B 

$PA[ZjrERNINM10R ASCII.FF 

$RBCQBDDBFINITIGN RECORD SIBP: OPERMD; END RECOO); 

$regqr)jaiie OGra;_o 

$TRSKJSIZE 32 

$TRSK_STCI»GE_SIZE 1024 

$TICK 0.01 

$^aIlIABLEJMXRESS VAR_1'ADDEUESS 

$VARIABLE_ADORESSl VAR_2'ADDRESS 

$\ARIABLE_ADORESS2 VAR_3'ADDRESS 

$your_praqna pragma passive 


Ar-4 





jyPPEM)ZX B 


OQHPILMIIGN 8YSTDI OmONS 


Ih* coopllcr (^tions of this Ada ioplaaMntation, aa daacclbad in this 
Appandix, ara providad by tha euatoa»r. Uhlaas ^cifieally notad 
otterwiaa, rafarmcas in this iqppandix ara to coapilar docuimtatlon and 
not to this raport. 


Syntax 

ada [options] [ 80 urca_£ila]... [objact_£ila.o)... 

Arguamts 

objact fila.o non-Ada objact fila naaas. ibasa filas will ba passad 
on to tha linkar and will ba linkad with tha spacifiad 
Ada objact filas. 

options options to tha coa|>ilar. lhasa ara: 

-A (disassasbla) Disassaabla tha units in tha sourca fila aftar 
eoBDiling thaai. -A can ba followad by argusMnts that furthar 
dafina tha disassaably di^ay (a.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 


a Add haxadaciaal display of instruction bytas to 
disassaafcly listing, 
b Disassasbla tha unit body [dafault]. 
d Print tha data saction (if prasant) as wall, 
f Usa tha altamativa fonsat for output. 

1 Put tha disassaslaly output in fila "filajnaaa.das" 
s Disassaabla tha xxiit spac. 

-a fila nana 

(arBdlva) Traat fila naM as an objact ardiiva fila craatad 
^ ar. Sinca soon ar3iiva filas and with .a, -a is \isad to 
distinguish ardiiva filas froa Ada sourca filas. 

Static/dynamic (SPARCogpilar Ada only) 

(static) If static is indicated, tha Ada program is cospilad 







ooNPiiAncN smrm options 


and linkad statically, lha dafault is dynasdc. 

-c sufiprass tha control Mssagas ganaratad whan pragaa PAGE 
ani^or pra^Mi LIST ara ancountarad. 

-D idantifiar typa valua 

(dafina) Dafina an idantifiar of a ^wcifiad typa and valua. 

-d (dapan d ancias) Analysa for dapandancias only. Do not do 
sanantic analysis or coda ganaratlon. Updata tha library, 
satrking any dafinad units as unconpilad. lha -d option is 
usad by a.aaJca to astablish dapandmcias aaong naw filas. 
Ibis (^tion will attaapt to do iaports for any units 
rafarancad from outar librarias. Diis should raduca 
ralocation and raduca uaar disk spaca usaga. 


-E diractory 

(arror ou^t) Without a diractory argumnt, ada procassas 
arror sMssagas xising a.arror and diracts a briaf aassaga to 
standard output; tha raw arror mssagas ara laft in 
sourca fila.arr. If a diractory nam is givan, tha raw arror 
output'~is plaead in diractory/sourca fila.arr. Tha fila of 
raw arror mssagas can ba usad as in^t to a.arror. Only 
ona -a or -E option should ba usad. 

-a (arror) Procass coapilation arror mssagas using a.arror and 
sand it to standard output. Only tha sourca linas containing 
arrors ara listad. Only ona •-a or ~E option should ba usad. 

-E farror^flla sourca fila 

(arror) Procass sourca fila and placa any arror mssagas 
in tha fila indicatad ^ arror fila. Nota ttiat thara is 
no spaca batwaan tha and aTror fila. 


-El diractory 

(arror listing) Sam as tha -E option, axcapt that a sourca 
listing with arrors is producad. 

-al (arror listing) Intarsparsa arror mssagas asmg sourca 
linas and diract to stmdard output. 

-E Ifarror fila sourca_fila 

(arror'^isting) Sam as tha -Ef option, axcapt that a sourca 
listing with arrors is producad. 

-av (arror vi(l)) Procass syntax arror mssagas using a.arror, 
anbad than in tha sourca fila and call tte anvironamt aditor 
ERRGR EDITOR. If ERRQR^^TOITOR is dafinad, tha anvironsmt 
variaiBLa ERROR__PAITEiar'should also ba dafinad. EEROR_PATIERN 
is an aditor saardi cooaand that locatas tha first occurranca 
of '###' in tha arror fila. If no aditor is spacifiad, vi(l) 
is invtdcad. 


B-2 






OGHPIIAnON SYSIBl OPnCNS 


ISi* valu* of th* •nvircwnt variabl* ERROR_TABS, if Mt, 
is xissd instsad of tha dsfault tab sattings (8). 

-r (full DZANK) Do not tria tha DIANA traa bafora outsit to 
nat filas. To sava disk apme», tha DIANA traa will ba 
trlaaad so that all pointars to nodas that did not involva 
a subtraa that dafina a syidK)! tabla %#ill ba nullad 
(unlass thosa nodas ara part of tha body of an inlina or 
ganaric or cartain othar valuas naading to ba ratainad for 
tha dabugging or coapilation inforaation). Tha trissdng 
ganarally raaovas initial valuas of variablas and all 
stataaants. 


-G (GUAS) Display auggastad valtias for tha MIN GUAS ADOR 
and MAX GUAS ADCXl noo diraetivas. 


-K (kaap) Kaap tha intaraadiata languaga (IL) fila producad 
IV tha coapilar front and. Tha IL fila will ba placad in 
tha .objacts diractory with tha fila naaa Ada sourca. 


■L libraryjiaaa 

(library) Oparata in VAD6 library library^naaa. 
(Dafault: currant working diractory] 


-1 fila abbreviation (VADSsalf only) 

(liErary saardi) This is an option passed to tha ld(l) 
linker, tailing it to search tha specified library fila. 
(No space between tha -1 and tha fila abbreviation.) 


-M unit nana 

(anlh) Produce an executable program by linking tha named 
unit as tha main program, \init_nama must alraa^ ba 
compiled. It must ba either a psramatarlass procedure or 
a paramatarlass function returning an integer. Tha 
executable program will ba named a.out unlass overridden 
with tha -o option. 


-N sourca fila 

(mainT Produce an executable program by compiling and 
linking sourca fila. Tha main unit of tha program is 
assuoNd to be Bia root name of tha fila (for foo.a tha 
vnit is foo). Only one file may ba preceded by -N. Tha 
executable program will ba named a.out unlass overridden 
with tha -o option. 

-N (no coda sharing) Ccnpila all gmeric instantiations 
without sharing coda for their bodies. This option 
overrides tha SHARE_BQDY INTO directive and the SHARE CODE 
or SBABE__BGEV pragmas. 

-0(0-9] 

(optimize) Invoke tha coda optimizer. An optional digit 
(there is no ^ca before tha digit) provides the level of 

B-3 








OJNPZIAnCN SYSnM CmCNS 


optiaiutlon. ttm default is -04. 

-O full (^laization 

-OO no optiaisation (use for debugging) 

copy propagation, constant folding, resovlng 
deed variables, sdaeuaing aoves between scalar 
variables 

-02 add ccaenn subeiqpression eliadnation within 
basic blocks 

-03 add global coanen subexpression eliadnation 
-04 add hoisting invariants from loops and address 
optladsaticns 

-05 add range optiaisations, instruction sdMdullng 
and one pass of reducing inducticn expressions 
-06 no diange 

-07 add one aore pass of induction e3q>ression reduction 
-06 add one aore pass of induction egression reduction 
-09 add one aore pass of induction e3q>ression 

reduction and add hoisting e:q>ressions ccaawn to 
the then and the else parts of if stateaents 

Hoisting frea branches (and cases alternatives) can be slow 
and does not always provide significant perforaance gains so 
it can be suppressed. 

-o executable file 

(ou^t) ^s option is to be used in conjunction with 
the -M option, executable file is the naae of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invcdce the Ada Preprocessor. 

-R VADS^library 

(reoaapile instantiation) Force analysis of all generic 
instantiations, causing reinstantiatian of am that are out 
of date. VRDS library is the library in %<hi» the 
recoapilation Ts to occur. If it is not specified, the 
reccapilaticn occurs in the current working directory. 

-r (recreate) Recreate the library's (^VASJZkBLE file. This option 
reinitializes the file and exits. This allows recovery froai 
"(RAS exhausted” %rithout reconpiling all the files in the library. 

-S (suppress) Apply pragma SUPPRESS to the entire compilation 
for all suppresslble checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

-V (veriXMe) Print compiler version number, date and tine of 
compilation, name of file coopiled, command iiput line, 
totad coepilation time and error sumeary line. Storage usage 


B-4 







CXlfflLKnON SYSTBf OPTIGNS 


inforaatlon about the object file is pcovldad. 

-w (%nmlngs) Suppress warning diagnostics. 
source__£ile naae of the source file to be coa()iled. 

Description 

The ada cowand executes the Ada coapiler and eoaipiles the nawd Ada 
source file. The file aust reside in a VhDS library directory, ihe 
ada.lib file in this directory is aodified after ead> Ada unit is 
conpiled. 

By default, ada produces only object and net files. If the -N option 
is used, the coapiler autowtically invokes a.Id and builds a axqplete 
program with the named library \aiit as the aain program. 

For cross systems, the compiler generates object files compatible %rlth 
the host linker in VCK format. Ihe VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files %d.ll be passed 
on to the linker and %#ill be linked with the specified Ada object files. 

Coammnd line options nay be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VAOS compilers nay be simultaneously available on a single 
system. Because the ada command in any VAD8_locatioiv1>in on a system 
will execute the correct compiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the components actrmlly executed. 

Program listings with a disasseably of machine code instructions 
are gmerated by a.db or a.das. 

NOTE: If two files of the same nwa from different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second cospilation will 
overwrite the first. For example, the compilation of 
Amr/directory2/foo.a -L /\isrAa<l*/test will overwrite the 
compilation of /Dsr/directoryl/foo.a -L /uBr/vadB/fBt in the 
VADS library /\isrA^A«st. 

Diagnostics 

The diagnostics produced by the VADS coepiler are intended to be 
self-ex]^anatory. Host refer to the BN. Each BN reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 


B-5 





OGHPIIATIGN SYSTBf OFTIGNS 


LINKER OPTIGNS 

Th* linker options of this Ada iaplsanntation, as described in this 
J4)pendix, are provided fay the custoswr. Uiless ^lecifically noted 
o^ienfise, references in this appendix are to linker docuanntation and not 
to this report. 


Syntax 

a.Id Cc^ions] \init_naae (linker_options] 

Arguments 

linker options 

Xll arguments after unit_name are passed to the linker, 
library abbreviations or dsject files. 

(^tions options to the a.Id coonmnd. These are: 

* -DO (dsjects) Use partially linked objects instead of ardiives 
as an intemmdiate file if the mtire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the ardiiver on some hosts 
(Including ULTRIX^ BP~UX and Systoi V). (VADSself only) 

-or (time) Displays how long each phase of the prelinking process 
takes. (VADSself only) 

-Du XBlit list 

(xmi^) Traces the addition of indirect dependencies to the named 
units. (VADSself only) 

-Dx (dependencies) Displays the elaboration dependencies xised each 
time a unit is arbitrarily chosen for elaboration. (VADSself only) 

-DOC (debug) Debug memory overflow (use in cases where linking 
a large nundoer of units caxises the error message "local 
symbol overflow" to occur). (VADSself only) 

-E unit name 

(elalboratej Elaborate unit_name as early in the elaboratim 
order as possible. 

-F (files) Print a list of dependent files in order and si:qppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
(k>ject files to link. This file is only present vdien many object 
files are being linked. (SGI only) 


-L libraryjname 









OGHPIIATXGN SYSTSf OPTIGNS 


(library) Collect inforaation for linking in library naw instead 
of the current directory. However, place the executable in the 
current directory. 

>o executable file 

(output) Use the specified fielnaae as the naa» of the ou^ut 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
svgjpress linking. 

-V (verbose) Print the linker cnewand before executing it. 

•V (verify) Print the linker coanand but sv^ress execution. 

-w (warnings) Siqppress warning messages. 
unit_name 

name of an Ada unit. It oust name a non-generic subprogram. 

If unit naam is a function, it must return a value of the 
t]npa SlfiCMRD.INTBGESt. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit__naam a main 
program and calls the ld(l) linker to link together all Ada and 
other language dPjects required to produce an executable image in 
a.out (self) or a.vox (cross). Hue utili^ uses the net files produced 
by the Ada compiler to check dependency information, a.Id produces 
an exception mapping table and a xmit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not inclixie library level packages that do not need 
elaboraticm. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WlTBn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WiTBn 
directives may be placed into a library but they must be 
numbered contiguously beginning at WIT^. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK:Object_file: 

WITH2:LINK:archive file: 


B-7 





CSHPILATIGN SYSTEM OPTICXIS 


WITHn directives nay be placed in the local Ada libraries or in 
any VMDS library on the search list. 

A MITHn directive in a local VADS library or earlier on the 
library search list will hide the sane lumbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Coaster Systens, the 
USEJLAST_LINK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals and dependencies. 

VADS locatiorv/biVa.ld is a wrapper progran that executes the 
correct executable based upon directives visible in the ada.lib 
file. This pemits nultiple VADS ccopilers to exist on the sane 
host. The -sh cation prints the name of the actual executable file. 

Files 

a.out (self), a.vox (cross) default ou^ut file 
.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS^locatiorv^standard/* startup and standard lib^'ary routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced the Id linker. 





APPENDIX C 


APPENDIX F CW THE Ada STANDARD 


The only allowad Inplenentation dapandanciaa corraspond to 
inplontntatlon-dapmdant pragnas, to eartain aadilna-dapandant convantiona 
as nantionad in du^tar 13 of the Ada Standard, and to certain allowed 
restrictions on raprasantation clauses. The iiqplanentation-dapandant 
diaractaristics of this Ada inplenentation, as described in this Appendix, 
are provided by the custoner. Unless specifically noted otherwise, 
references in this Appendix are to ccnpiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, \d)ich 
are not a part of Appendix F, are: 


package STANDARD is 


type INIBGE N is ra nge -2147483648 .. 2147483647; 

^pe SHORT INTEXZR is range -32768 .. 32767; 

^pe TINy_lllTBi^ is range -128 .. 127; 

type FLOAT is digits 6 range -3.40282Ef38 .. 3.40282E+38; 
tj^ SHORT FLOAT is digits 6 range -3.40282B4'38 .. 3.40282Ef38; 
type LONGJRXIAT is digits 15 range -1.79769313486232E+308 .. 

1.79769313486232E4-308; 

type OURATIGN is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 










APPBiDIX r OF THE Ada STMCABD 


APPB4DIX F. lapleMntatlcn-Dapandant Charactarlstlcs 


1. Ia|>laaMntation-Oependent Pragmas 

1.1. INLINEjaMLy Pragaa 

Tha INLINE GNLY pragma, %dMn usad in tha sama %«ay as pragma 
INLINE, indlcatas to tha compilar that tha subprogram must 
al%inys ba Inlinad. This pragma also supprassas tha ganara- 
tlon of a callabla varslon of tha routina whidi savas coda 
spaca. If a usar arronaously makas an INLINEjONLY subpro¬ 
gram racursiva a warning massaga will ba adttad and an 
PllCX3lMf_BRR0R %d.ll ba rais^ at run tima. 

1.2. INITIALIZE Pragma 

Takas ana of tha idantifiars STATIC or DYNAMIC as tha single 
argument. This pragma is oily allowed within a library- 
laval package spec or body. It specifies that all objects 
in tha packam ba initialized as requested by the pragma 
(i.a. statically or dynamically). Only library-level 
objects are subject to static initialization; all dbjacts 
within procedures are always (1^ definition) dynamic. If 
pragma INITIALIZE (STATIC) is \ased, and an object cannot ba 
initialized statically, coda will ba generated to initialize 
tha cbjact and a warning message will ba generated. 

1.3. BUILT_IN Pragma 

Tha BUILT IN pragma is usad in the implementation of some 
pradafineH Ada packages, but provides no iisar access. It is 
luad only to implement coda b^as for < d>ich no actual Ada 
body can ba provided, for example tha HACHINEjOOOE package. 

1.4. SHARE_OQOE Pragma 

The SHAPE CODE prawns takas the name of a generic instantia¬ 
tion or a generic \init as tha first argument and one of the 
idantifiars TPUE or FALSE as the second argument. This 
pragma is only allowed imemdiataly at tha place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library xnit in a compilation, but before 
any subsequent coopilation unit. 

Nhen the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 


C-2 





APPIMDIX F or THE Ada STMONfS) 


shara coda ganaratad for a ganaric instantiation with coda 
ganaratad for othar instantiations of tha saw ganaric. 
Whm tha sacond argummt is FALSE aach instantiation will 
got a uniqua copy of tha ganaratad coda, lha axtant to 
%diich coda is sharad batwam instantiations dqpands on this 
pra^ and tha kind of ganaric foraal |^raa»tars daclarad 
for tha ganaric unit. 

Tha naaa pragaa SHkSE BQOy is also racognizad by tha iapla- 
nantation and has Bm ssm offset as SHkBEjOCDB. It is 
included for cospatability with aarliar varsions of VADS. 

1.5. NO__IIIAGE Pragna 

Tha pragna s^qiprassas tha ganaration of tha inaga array usad 
for tha IMMX attributa of anuneration typos. This elin- 
inatas tha ovarhaad raquirad to store tha array in tha axa- 
cutabla inaga. An attanpt to use tha IMASE attributa on a 
typo vhosa inaga array has bean suppressed will result in a 
cospilation warning and PR0G8AN__EItRQR raised at run tins. 

1.6. EXIERNAL_NM(E Pragna 

Tha EXTERAL NAME pragna takas tha nane of a subprogran or 
variable daTinad in Ada and allows tha user to specify a 
different axtamal nans that nay be x»ad to rafarmca the 
antify fren othar languages. Tha pragna is allowed at tha 
place of a declarative itan in a package specification and 
nust apply to an dbjact declared aarliar in tha sane package 
specification. 

1.7. INIERFACEJAME Pragma 

Tha INTERFACE NAME pragma takes the nane of a a variable or 
subprogran defined in another language and allows it to be 
rafarancad directly in Ada. Tha pra^BS will replace all 
occurrences of the variable or subprogran nans %fith an 
axtamal rafaranca to tha sacoid, link argunent. Tha pragna 
is allowed at the place of a declarative item in a package 
specificaticxi and nust apply to an object or subprogram 
declared earlier in the same package specification. The 
object nust be declared as a scalar or an access type. The 
(^ject cannot be axy of the following: 
a loop variable, 
a constant, 

an initialised variable, 
an array, or 
a record. 

1.8. IHPLICITJOCXX: Pragna 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragna is only allowed within a machine code 


C-3 








AFIWDIX r or IBE Ada STAWMD 


proewkuT*. It naeiflaa that iaplleit ooda oanaratad fay tha 
coapilar faa alloMad or diaalloMad. A warning is laauad if 
OFF is uaad and my iaplicit coda naads to ba ganaratad. 
lha dafault is GN. 

1.9. GPTXIIIZB__OQOB PragM 

Ihkas ana of tha idantifiara ON or OFF as tha singla argu- 
■ant. This pragna is only allowad within a andiina 
procadura. It qpacifias ^diathar tha coda should ba optisH 
isad fay tha cospilar. lha dafault is ON. Mhan OFF is 
qwcifiad, tha eoa^lar will ganarata tha cote as spacifiad. 

2. laplaanntatian of Pratefinad Prawns 

2.1. C0NIIK3LLED 

Ihir pragoa is racognizad by tha iaplaowntaticn but has no 
affact. 

2.2. EEABGBAXE 

This pragan is iaplamantad as tescribad in Appandix B of tha 
Ada RH. 


2.3. INLINE 

This pragna is iaplanantad as dascrifaad in Appandix B of tha 
Ada BN. 


2.4. INIEBFACE 

Ihis pragna supporU calls to and PORIRAN functions. lha 
Ada subprograas can ba aithar functions or procaduras. lha 
typas of paraaatars and tha rasult for functions nust 
bo scalar, accass or tha pratefinad typa ADDRESS in SYSTEK. 
All paranatars aust hava mote IN. Bacord and array objacts 
can ba passad by rafaranca tjsing tha ADDRESS attributa. 

2.5. LIST 

This pragna is inplanantad as tescribad in Appandix B of the 
Ada BN. 


2.6. NDCRY_SIZE 

This pragna is racogat^ad by tha ioplanantation. Tha iapla- 
Bwntation doa s no t edlow SYSTEM to ba aodifiad by amans of 
pragnas, tha SYSTEM packaga must ba racospilad. 

2.7. NGNJREDmtANT 

This pragna takas one argunent which can bo tha name of 

C-4 












APPODIX r OP IBE Ada STNDMtD 


•ithar a library sudaprogram or a aubprograa daclarad iawdi- 
ataly within a library packaga spac or body. It indicataa 
to tha coapilar that tha tubprogru will not ba callad 
racuraivaly allowing tha coapilar to parfora spacific optia- 
isationa. lha pragaa can ba appliad to a aubprograai or a 
aat of ovarloadad aubprograaai within a padcaga or pack- 
aga boc^. 

2.8. tXJTJELNBGBAXED 

Thla pragma can only appaar in a library packaga apacifica- 
tlon. It indicataa that tha packaga will not ba alaboratad 
bacauaa it la aithar part of tha RTS, a configuration pack¬ 
aga or an Ada padcaga that ia rafarancad froai a languaga 
othar than Ada. Tte praaanca of thla pragaa auppraaaaa tha 
ganaration of alaboratlon coda and iaauaa waminga if ala- 
boration coda ia raquirad. 

2.9. OPTIMIZE 

Thia pragaa ia racogniaad by tha iaplaaantation but haa no 
affact. 

2.10. PACX 

Thla pragma will cauaa tha coapilar to dwoaa a non-alignad 
rapraaantation for coapoaita not cauaaa 

objacta to ba packad at tha bit laval. 

2.11. PAGE 

Ihia pra^na la iaplaaantad aa daacribad in ^pandix B of tha 
Ada BH. 

2.12. PASSIVE 

lha pragaa haa thraa forma : 

PRASHA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRASHA PASSIVEdNIERRUPT, <nuBbar>); 

Ihia pragma Pragma paaaiva can ba ifjpliad to a taak or taak 
typa daclarad iamadiataly within a library packaga ^ac or 
body, lha pragaa diracta tha coapilar to optiaiaa cartain 
taaking oparationa. It ia poaaUua that tha atataaanta in a 
taak body will pravant tha intmdad optiaizaticxi, in thaaa 
caaaa a warning will ba ganaratad at coopila tiaa and will 
raiaa TkSKINS_ERROR at runtime. 

2.13. PBICRITT 

Ihia pragma ia implamentad aa daacribad in Appendix B of the 

C-5 





» r or m Ada simoard 


Ada m. 


2.14. SBARED 

this pragaa is racognisad fay tha iaplaaantatlon faut has no 
affact. 

2.15. STQRAGEJJNIT 

This pra^M is racognisad fay tha iaplaMntation. lha iapla- 
aantation doa s no t alloa SYS'ilH to ba aodifiad fay mans of 
prajMis, tha SYSim padcaga sust faa racoapilad. 

2.16. SUPPRESS 

This pragm is isplasantad as dascribad, axcapt that 
DZVISIGN CHECK and in som casas GyERFLC3M_CBECK cannot ba 

suprassaS. 

2.17. SYSTENJAHE 

This pragm is racognisad by tha isplaaantaticn. Tha iapla- 
santaticn doa s no t allow SYSTEM to ba scdifiad by saans of 
pragaas, tha SYSTEM packaga sust ba raccnpilad. 

3. Isplasantation-oapandent Attributas 

3.1. P'REP 

For a prafix that danotas an objact, a progran xmit, a 
labal, or an antry: 

This attributa danotas the affactiva addrass of tha first of 
tha storaga units allocatad to P. For a subprogram, pack- 
aga, task unit, or labal, it rafars to tha addrass of tha 
mdiina coda associatad with tha corresponding body or 
statesant. For an antry for ^diidi an addrass clausa has 
bean given, it rafars to tha corresponding hardware inter¬ 
rupt. Tha attr ibuta is of the OPERAND defined in tha 
packaga HACHINEjOQOE. The attriluta is only allowed within 
a mdtine code procedure. 

Sea section F.4.8 for more infomation on tha use of this 
attributa. 

(For a packaga, task unit, or antry, tha 'REF attributa is 
not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK ID yields the unique 
task id associated with a task. The >^ua of this attribute 
is of the type ADDRESS in the package SYSTEM. 


O 






APPBOIX r OF THE Ada STMCARD 


4. ^^pacification Of Package SYSTEM 

with UNSIOID TYPES; 
package SYSitf is 

pragea suppress(ALL CHECKS); 
pragea suppresa(EXCSmGN_TMBLES); 
pragaa notjelaborated; 

type NAME is ( sun4_cross_r3000b }; 

SYSTEM^NMIE : constant NAME :> sun4_cross_r3000b; 

STQHAQE tMIT : constant 8; 

HEnQRY_?IZE : constant 16_777_216; 

— SystesHDependent Nanad Nuaters 

MIN_INT : constant -2 147 483 648; 

MMC_Ilir ! constant 2 T47_T83j?47; 

mx DIGITS : constant :•> 1?; 

MMTMMinSSA : constant :• 31; 

FUS delta : constant 2.0**(>31); 

TICR'~ : constant :•> 0.01; 

— Other SystesMtependent Declarations 

subtype PRIORITY is D U BCS ER range 0 .. 99; 

mx__RBC_SIZE : integer 1024; 

type AIX3RESS is private; 

function (A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function ”<” (A: ADDRESS; Bt ADDRESS) return BOOLEAN; 

function ">-”(Ai ADDRESS; B: ADDRESS) return BOOLEAN; 

function ''<-''(A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function (A: ADDRESS; B: ADDRESS) return miEGER; 

function V” (A: ADDRESS; I: INTEGER) return ADDRESS; 

funcUon (A: ADDRESS; I: INTEGER) return ADDRESS; 

function (I: UNSIGNED_TYPES.UNSIGNED_INTEGER) return ADDRESS; 

function NENORY ADDRESS 

(I: lJNSI(a<^jrYPES.UNSIGNED_INTEGER) return ADDRESS renasMS 

NO_ADDR : constant ADDRESS; 

type TASK ID is private; 

N0_TASK__I& : constant TASK_ID; 

type PASSIVEJEASK_ID is private; 









APPBCix r or OBI Ada stmcard 


N0_PA8SXVE_1ASX_ID : constant PASSZVB_TASK_ID; 

subtypa 8IG 8XMXUS T is INIBGSR; 

SZG_S1KEasJ5lZB: constant 4; 

typs PKGRMf ID Is privats; 

NO_FIIOGRMf_lC : constant PIKXautfl_lD; 

typa BYTE onm T is ( 
lIttle Sdian, 

BIG BCIAN 

)} 

BYTEjOBDERt constant BYTE_QBDER_T BIG^BDIAN; 
typs LCNG_AratES8 is privats; 

NO__LaNG_ADn t constant LGN8_AD0KES8; 

function V (A: LGNG^ADCBESS; I: miBGER) rstum LONGJUXBOSS; 
function (A: LGMGJUXBESSi I: IMIBQER) cstum LQNS_ADOBESS; 

function fa^JLCNGJtfXXtESS (A: AZXJBESS) rstum LCNG_A1X«ESS; 

function bOCaLIZE(A: LCMG_AEOBESS ; BYTE_SIZE : ZNIBGER) rstum ADORESS; 

function SrarZCNOPCAt LONSJ^DOBEBS) rstum INTEGER; 

— Intsmal RIS rmrss«ntation for day. If ths calsndar packags is ussd, 
— thm, this is ths julian day. 
subtyps DRYjr is INTEGER; 

— Constants dsscribing ths configuration of ths CIFO add-on product. 
SUPPQRIS_INVOCAnGN BY ADCBESS : constant BOOLEAN TRUE; 
SQPPOB TSJPR EE LABOBkiRc R : constant BOOLEAN :> TRUE; 

MAKE_A0CS5SjSUPF0BIED : constant BOOLEAN TRUE; 

— Arguamts to ths CIFO pragaa INTERRUPT TASK, 
typs INTERRUPT_TASK_KIIO is ( SIMPLE, SICi&^INS ); 

privats 

typs ADDRESS is nsw UNSIGNEDJTYPES.IJNSIGNED^INIEGER; 

NO_ADOR : constant ADDRESS 0; 

pra^na BUILT IN(''>''); 
pragaa BUILT~IN(''<"); 
pragaa BUILT_IN( ">>”); 
pragaa BUILTJDIC ; 
pragaa BUILT~IN( ; 

pragaa BUILT_IN( ; 

typo TASK__IO is rmt IXGIGNEDJIYPES.UNSIGNED_INTBGER; 

C-8 







APPBDIX r OF IBE Ada SUVNEARD 


1K)JEASK_ID : constant TASK__ID :> 0; 

typa RASSIVE TASK ID is naw UNSIGNED TYPES.UNSIQOD^INTBZR; 
Nq_PASSIVE_lSn_lC I constant PAS8rCjIASK_ID t- 0; 

typa PHOGRAH id is naw UNSIGNB) TYPES.UNSI(1III>_IIITBGER; 
N0_PII0GRAM_lC : constant PII0GMlji_ID 0; 

typa LGNG_A1X»ESS is naw UNSIGNED_TYPES.UNSIGNED_INTBGER; 

NO_LCNS_ADOR : constant LCNS_ADOilESS 0; 

pra9n BUILT_IN(HAKE LQNSJtfXRESS); 
pra^M BUILT IN(L0CI£IZE)| 
praqna BUILT~IM(STATiai_OF); 

and SYSTEM; 

5. Rastrictions On Reprasantation Clausas 

5.1. Pragaa PACK 

In tha absanca of praona PACK racord coaixnants ara paddad 
so as to provida for afficiant accass by tha targat 
hardwara, pragsa PACK appliad to a racord aiiaiMta tha pad¬ 
ding «diara possibla. Pra^w BACK has no othar affact on tha 
storsM alloeatad for racord coaponants a racord raprasanta- 
tion is raquirad. 

5.2. Size Clausas 

For scalar ^^s a raprasantation clausa will pack to tha 
nuabar of bits raquirad to raprasant tha ranga of tha sub- 
typa. A siza clausa appliad to a racord typa will not causa 
packing of coaponants; an ai^icit racord raprasantation 
clausa aust ba givan to qpacify tha packing of tha cosh 
ponants. A siza clausa appliad to a racord typa will causa 
packing of coaponants only whan tha c osponant typa is a 
discrata typa. An arror will ba issuad if thara is insuffi- 
ciant mca alloeatad. Tha SIZE attribute is not supported 
for task, accass, or floating point 

5.3. Address Clausas 

Address clausas ara only supported for variablas. Since 
default initialization of a variable requires avalxiation of 
tha variable address elaboration ordering requir«Mnts 
prohibit inititalizatlon of a variablas whi^ have address 
clausas. Tha specified address indicates tha ptq^ical 
address associated with the variable. 

5.4. interrupts 


C-9 







AFPDDIX r or THE Ada STMOABD 


Intarn^t antriaa ara supported %dth tha following intarpra- 
tation and rastrictionsi 

An interrupt entry any not have any paraiMtars. 

A passive task that contains one or aora interrupt mtrias 
aust al%nqfs be trying to acc^ each interrupt «itry, unless 
it is handQ.ing the interrupt. The task aust be executing 
either an accept for the entry (if there is only one) or a 
select statenant %diere the interrupt entry accept alterna¬ 
tive is open as defined by Ada m 9.7.1(4). This is not a 
restriction on nomal tasks (i.e., signal ZSRs). 

An interrupt acta as a conditional entry call in that inter- 
r\pts are not queued (see the last sentence of Ada BM 
13.5.1(2) and 13.5.1(6)). 

No additional requireannts are iaposed for a select state- 
snnt containing both a terainate alternative and an accept 
alternative for an interrupt entry (see Ada RH 13.5.1(3)). 

Direct calls to an interrupt entry froai another task are 
allowed and are treated as a nomal task rendesvous. 

Interrupts are not queued. 

The address clause for an ijiterrupt entry does not specify 
the priority of the interrupt. It siaply specifies the 
interrupt vector nuaber. For passive iSRSr the nnn of the 
passive( interrupt,nnn) prapaa specifies the interrupt prior¬ 
ity of the task. 

5.5. Representation Attributes 

Itw ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHZME CODE provides 
an assenbly language interface for the tar^t sadiine. It 
provides the necessary record type(s) needed in the code 
stateannt, an enuneration typB of all the opcode nneumonics, 
a set of register definitions, and a set of addressing node 
functions. 


C-10 








APPBDIX F or IBE Ada STMCARD 


Dm ganaral syntax of a nadilne coda stataaant is as fol¬ 
lows: 


C0DE_n'( opcode, operand (, operand} ); 

where n indicates the maiher of operands in the ^gregate. 

A special case arises for a variable nunber of operands. 
The operands are listed vrithin a subaggregate. The forsMt 
is as follows: 

OCDBjti'i opcode, (operand (, operand)) ): 

For those opcodes that require no operands, naned notation 
gust be used (cf. RM 4.3(4)). 

O0ra:_0'( op •> opcode ); 

The opcode oust be an enusuration literal (i.e. it cannot be 
an daject, attribute, or a renaae). 

An operand can only be an entity defined in MACBIME OQOB or 
the 'REF attribute. ~ 

The arguments to any of the functions defined in 
MAC3IINE OQK must be static expressions, string literals, or 
the functions defined in HACHIME C30DE. The 'REF attribute 
nay not be used as an argument in any of these functions. 

Inline e:q>ansi(»i of machine code procedures is supported. 

6. Conventions for Znplementation-generated Nanes 
There are no inplementation-generated names. 

7. Interpretation of B)q>ressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical a^resses. 

8. Restrictions on unchecked Conversions 


None. 

9. Ripstrictions on Unchecked Deallocations 


None. 


10. Inplementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX REC_SIZE as 
the record size (e:q>ressed in STORAGEJUNITS) v^Mn the size 
of ELEND1T_TYPE exceed^ that value. For exanple for toicon- 


C-11 







AFPDDIX r OP TBE Ada STAICARD 


strainad arrays sudi as string where ELElffiNT nPE'SXZE is 
very large, MAX BBC SIZE is used instead. HA3MtEOORD_SlZE 
is defined in SsfSlfil and can be changed by a program before 
instantiating DIBECr_IO to provide an upper limit on the 
record sise. In any case the —sise supported is 1024 
X 1024 X SIOBAGE UNIT bits. DIBECT 10 will raise USE^EBBQR 
if HAX_BEC_SIZE wceeds this absolu^ limit. 

Instantiations of SBQUENTIAL^IO use t he value MAX_BBC_SIZE 
as the record sise (expressed in STOBAGB UNITS) when the 
sise of ELEHENTJTXPE exceed that value. I^r example for 
unconstrained arrays such as string where ELEMB1T_TYPB'SIZE 
is very large, MAX BBC SIZE is used instead. 
MAX_BEOOBD SIZE is define? in SYSIDt and can be changed by a 
program be7ore instantiating ntStCER 10 to provide an upper 
limit on the record size. SBQUENriAE 10 ia|x>ses no limit on 
MAX_BEC_SIZE. 

11. loplementation Limits 

Hie following limits are actually enforced by the implemen¬ 
tation. It is not intended to isply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The iiqplementation supports a maxissmi line length of 500 
diaracters including the end of line character. 

11.2. Record and Array Sizes 

The maxiazim size of a statically sized array type is 
4,000,000 X STCBAGE UNITS. The maxiaza size of a statically 
sized record type is 4,000,000 x STQBA(ZJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an eiqilicit ST0BAO;__SIZE length specifica¬ 
tion every task except the main progrin is allocated a fixed 
size stack of 10,240 STORAGE UNITS. This is the value 
returned by T'STGRAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absmce of an eiqplicit ST0RA(Z__SIZE length attribute 
the default collection size for an access type is 100 times 
the s ize of the designated type. This is the value returned 
by T'STQRAGEJSIZE for an access type T. 


C-12 






APPSDXX P OF THE Ada STM4DMID 


11.S. Liait on Daclarad Gbjacta 

Thara it an absoluta liadt of 6,000,000 x STQBMGEJUNITS for 
objactt daclarad ttatlcally within a coa()ilation \mit. If 
thla valua it axcaadad tha conpilar will tacainata tha coah- 
pilation of tha unit with a FATAL arror aattaga. 


C-13 








