REPORT DOCUMENTATION PAGE 


FomApprovaa 

OPMNo. 


Public reporting burdon tar this oollaelian ol intormilion it aotimalad to b uf ga 1 hour par raaportaa. biduding ttia Ima tar roMtwing instrtMtiont. aaarahing aiiating data aouroa^lRarir^ 
and maintaining tha data naadad. arwt r awanoing tha aoUaclion o> Inlarmatien. Sand oommarbt ragaiding Ihia burden aabm^a or any othar aapad el Ihit aobaetien of mlormitien, including 
auggaationt tor reducing thia burden, to Waahington Haadquartara Sarvioa. Directorate tor tntomiatien Oparationa and Raperta, 1215 JaHaraon Dairia tiglaaay. Suba 1204, Arlir^gton. VA 
22202-4302. and to tha OHiea of Intormation and Ragula l ety AKaiia. Oflioe ol M a naga m am and Budget. Waahington, DC 20603. 


1. AGENCY! 


(Leave 


13. REPORl 


4. TITLE AND 

CASEWorks/RT Ada MC980x0, Version 1.1, Host: Sun SPARCstatio 
10, Target: Motorola MVME 147 (MC68030 processor) 

930722W1.11319 


FUNDING 


AD-A273 714 


Authors: 

Wright-Patterson AFB 

PERFORMING ORGANIZATION NAME(S) AND 

Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 


8. PERFORMING 
ORGANIZATION 


9. SPONSORING^MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301-3080 


10. SPONSORINGIMONITORING 
AGENCY 


11. SUPPLEMENTARY 


12a. DISTRIBUTION/AVAILABILITY 

Approved for public release; distribution unlimited 


12b. DISTRIBUTION 


3. (Maximum 200 

CASEWorks/RT Ada MC680x0, Version 1.1, Sun SPARCstation 10, Target: 
(MC68030 processor) 

ACVC 1.11 


Motorola MVME 147 


i 




14. SUBJECT 


115. NUMBER OF 


Ada programming language, Ada Compiler Val. Summary Report, Ada Comp ppirp" 
Alllff/Kfll-sMUA^^AJ^B^ ■ Testing, Ada Val. Office. Ada Val. Facili y' 


17. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


18. SECURITY 

UNCLASSIFIED 


19. SECURITY 

CLASSIFICATION 

UNCLASSIFIED 


20, LIMITATION OF 

UNCLASSIFIED 

Standard Form 298, (hei 
PrsBcribedbyANSI Std. 


X 









AVF Control Number; AVF-VSR-566.0693 
Date VSR Completed: 10 August 1993 

93-04-21-MTI 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 930722W1.11319 
Multiprocessor Toolsmiths Inc. 
CASEWorks/RT Ada MC680x0, Version 1.1 
Sun SPARCstation 10 under SunOS, 4.1.3 •> 
Motorola MVME 147 (MC68030 processor) 


(Pinal) 


Prepared By: 

Ada Validation Facility 
645 C-CSG/SCSL 

Wright-Patterson AFB CM 45433-5707 


93 i2 13 05 0 


93-30200 

iiilillll 





Certificate information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 22 July 1993. 

Conpiler Name and Version: CASEHOrks/RT Ada MC680x0, Version 1.1 

Host Ccmputer System: Sun SFARCstation 10 

under SunOS, 4.1.3 


Target Conputer System: Motorola MVME 147 (NC68030 processor) 

Customer Agreement Number: 93-04-2H1T1 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
930722W1.11319 is awarded to Multiprocessor Toolsmiths Inc. This 
certificate expires two years after MIL-S'n>-1815B is approved by ANSI. 


This report has been reviewed and is approved. 



Ada Validation Facility 
Dale E. Lange 
Technical Director 


645 C-CSG/SCSL 

Wright-Patterson AFB OT 45433-5707 


ixnc QUALITY mSPTITrF.^ ’ 




Ada y^y^dAp.6n i^ganization 
Direct^^^cmputer and Software Engineering Division 
Institutefor Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
/r' Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


i looesalon For i 

KITS j 

DTir. TrtB n ( 

1 UiiF rrii^U-T oetJ Q I 

j Jur;*' Ct;t 1 on__ 


Py—__ 

HistributIcr/ 

1 







DECLARATIGN OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


Declaration of Conformance 
Customer: Multiprocessor Toolsmiths Inc. 


Ada Validation Facility: 645 C-CSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 
Ada Implementation: 

Ada Compiler Name and Version: CASEWorks/RT Ada MC680x0, Version 1.1 

Host Computer System: Sun SPARCStation 10 

\uider SunOS, 4.1.3 

Target Computer System: Motorola MVME 147 (MC68030 processor) 
Declaration: 

I, the undersigned, declare that I have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A ISO 8652-1987 in the iaplementation 
listed above. 





_ _- 

Custdmer Signature 


a"!- 

Date'' 









TABLE OF (XNIENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLE31ENTATION DEPENDENCIES 

2.1 wirarawMN tests. 2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFC»MATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTER 1 


INTRODUCTZQN 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Conpiler Validation Capability (ACVC). This Validation Sxinniary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the ^!VC may be found in the current 
ACVC User's Guide [UG69]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the cosqputers, operating systems, and coopiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and ccoplete, or that the subject inqplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF \diich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

(Questions regarding this report or the validation test results should be 
directed to the AVF vhich performed this validation or to: 

Ada Validation Organization 

Conputer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 


INTBODUCTIGN 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programninq Language, 

ANSI/MIL-STD-1813a, February 1983 and ISO 8652-1987. 

[Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program office, August 1990. 

IUG891 Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Conpliance of Ada inplemen tat ions is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, 0, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executedile tests are written in a self-checking meuiner euid produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Tdentity functions used to defeat some compiler 
optimizations allowed by the A^ Standard that would circumvent a test 
objective. The package SPPRT13 is used ty many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, ^’alidation 
testing is discontinued. 

Class B tests check that a conqpiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Standard are detected. Seme of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada ioplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In scxne tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exanple, the largest integer. A list 
of the values used for this implementation is prov;ded in ;^>pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. %e modifications required for 
this in^lementation are described in section 2.3. 


1-2 







INTROTUCTION 


For each Ada in^lementation, a custcxnized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing vathdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing conpliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the conpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guid^ce for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Computer A fxinctional unit, consisting of one or more computers and 

System associated software, that uses coomon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; perfonns 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 









INTRCCUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Con^ter 

System 

Validated Ada 
Conpiler 

Validated Ada 
Infilementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF vrtiich specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A ccxnputer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STT>-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, aixi data management. Usually, 
operating systems are predominantly software, but partial or 
con^lete hardware implementations are possible. 

A conputer system wliere the executable form of Ada programs 
are executed. 


The conpiler of a validated Ada inplementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or by registration [Pro90I. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ma programming 
language. 


1-4 




CHAPTESt 2 


INPLEKEinATICM DEPE14DEMCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B8302SB 

B83025D 

CB3026A 

B83026B 

C83041A 

B85001L 

C86001F 

C9402U 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BO4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

ri:3liic 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ai^ inplementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 










IHPLEMEarDVTIGN DEPENLeKCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAXJDIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..2 (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H checic for the predefined type 
SHORT_FLQAT; for this implementationr there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LQMG_FLQAT, or SHORT_FLGAT; for this 
implementation, there is no such type. 

A35801E includes a check that FLOAT'FIRST..FLOAT'LAST can be used as 
the range constraint in a floating-point type declaration; this 
inplementation, rejects the declaration. (See section 2.3.) 

C45423A, C45523A, and C45622A check that the proper exception is 
raised if NACHINEjQVERFLOHS is TTMJE and the results of various 
floating-point operations lie outside the range of the base type; for 
this inplementation, HACHINEjOVERFLOWS is FALSE. 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAXJMANTISSA of 47 or greater; for this 
implementation, MAX_MANnSSA is less than 47. 

D64005G uses 17 levels of recursive procedure calls nesting; this 
level of nesting for procedure calls exceeds the capacity of the 
compiler. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

CA2009C and CA2009F check >rtiether a generic unit can be instantiated 
before its body (and any of its subunits) is conpiled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the conpilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..0, and CA3004E..F (6 tests) check pragma INLINE 
for proce^res and functions; this implementation does not support 
pragma INLINE. 

CD1009C checks vAiether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 






IMPLEMENTATION DEPENDENCIES 


CD2A84A, a)2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this irrpleinentation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A. .B (2 tests), and ADSOliA use machine code 
insertions; this inplementation provides no package MACHlNE_CODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record t>^s with 
discriminants without defaults; these instantiations are rejected by 
this conpiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_io 
with unconstrained array types 2 Uid record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this inplementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102E 

CREATE 

OUT FILE 

SEQUEOTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIPJSCT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOJT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT_FILE 

DIRECT 10 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT 10 


The tests listed in the following table check the given file 
operations for the given combination of mode and access method; this 
inplementation does not support these operations. 


Test 

File Operation Mode 

File Access Method 

CE2105A 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2105B 

CREATE 

IN FILE 

DIRECT 10 

CE2111A 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2208B 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE3103A 

OPEN 

OUT FILE 

TEXT_I0 

CE3104B 

OPEN 

OUT FILE 

TEXT 10 

CE3109A 

CREATE 

IN FILE 

TEXT_I0 


2-3 





IMPLEMESgiATION DEPEl^ENCZES 


The following 15 tests check operations on sequential, direct, and 
text files vhen multiple internal files are associated with the same 
external file auxJ one or more are open for writing; USE_ERROR is 
raised when this association is attempted. 

CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111H CE3111B CE3111D..E CE3114B CE3115A 

CE2111C..D (2 tests) reset a ‘;EQUENTIAL_IO file from IN_FILE to 
CXJT_FILE mode; this inplementation does not support such a reset. 

CE2111F and CE2111I reset a SEQUE2JTIAL_IO file from OUT_FILE to 
0UT_FILE mode; this inplementation does not support such a reset. 

CE2203A checks that WRITE raises U3E_ERR0R if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3104C resets a TEXT_IO file from CXJT_FILE to OUT_FILE mode; this 
inqplementation does not support such a reset. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USEJERROR if they specify an Tnappropciate value for the external 
file; there are no inappropriate values for this inplementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page nxnnber exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B22003A B83033B B85013D 

A35801E was graded inapplic€d)le by Evaluation Modification as directed by 
the AVD. This test checks that various floating-point attributes can be 
used in static expressions, and includes the range FLOAT'FIRST..FLOAT'LAST 
as the constraint in a floating-point type declaration. Such a constraint 
may be rejected by the compiler if the values for 'FIRST & 'LAST are not 
within the range rf safe numbers for any of the implementation's floating 
point base types (cf. Al-00469/04). But this inpleroentation rejects the 


2-4 








IMPLEMENTATION DEPENDENCIES 


declaration even though it has a large enough base type; however, this 
error was not discovered until after testing had begun. 

CA2009C and CA2009F were graded -: applic2ible by Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the compilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the compilation of the generic unit bodies makes the ccmpilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. Ihese tests check that instantiations of generic 
mits with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are conpiled after the tonits that contain the 
instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00408 and 
AI-00506 such that the conpilation of the generic bodies makes the 
instantiating mits obsolete—no errors are detected. The processing of 
these tests was modified by re-conpiling the obsolete units; all intended 
errors were then detected by the compiler. 

CE3104A was graded passed by Test Modification as directed by the AVO. 
This test checks that the current column, line, and page numbers of text 
files are set to one after a create, open, or reset operation; it 
incorrectly allows an execution path v^erein an attempt is made to delete a 
file that is not open, and there is no handler for the resulting 
STATUS ERROR. In order to avoid this problem, the test's code was changed 
as indicated below: 

line 198 was changed from ' DELETE (FILE); ' to 
' IF IS_OPEN (FILE) THEN DELETE(FILE); END IF; —AVF ' 

and ' COIMENT ("11 lUSE ERROR; OPEN + OUT FILE! 11—AVF"); ' 
was inserted immediately after line 147 (this output confirmed 
the particular execution path that justified excluding DELETE) 


2-5 







CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada iiqplementation, contact: 

Stephen Michell 
Multiprocessor Toolsmiths Inc. 

200-6 Gurdwara Drive 
Nepean, Ontario 
Canada K2E 8A3 
(613) 727-8707 Ext:111 


Testing of this Ada implementation was conducted at the customer's site by 
a vali^tion team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Progranning 
Language Standard, whether the test is aj^licable or inac^licable; 
otherwise, the Ada luplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 


3-1 







PROCESSING ZNFORMtVTION 


euxi £, below). 


a) Total Number of A^^licable Tests 3783 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 91 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 292 (c-fd-fe) 


g) Total Number of Tests for ACVC 1.11 4170 (a^t-bt-f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host ccoputer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada iiqplementation. 

The tests were ccoqpiled and linked on the host cooputer system, as 
appropriate. The executable images were transferred to the target conqputer 
system by the TCP/IP executing over Ethernet, and run. The results were 
captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviev^ by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
defaxilt options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch 

-fE 

-fw 
-fl 


-fQ 

-L library_name 
-Q linker_options 


Effect 

Generate the auxiliary file so that 
the lister will work. 

Suppress warnings. 

Ignore errors in deciding vAiich units 
should be added to a library in a given 
compilation. 

Don't emit messages about adding units 
to the program library, 
uses a validaticxi-specific library name 
passes throuG^ board-specific and 
build-specific information to Composer(tm) 

The following Cooposer selections are used 
-b up Use the single-cpu pSOSf variant 

of the executive 

-r mvmel47 Use nVNE147-specific modules 


3-2 







PROCESSING INFORMATION 


-S tty 
-S tcp 
-s vtty 

-s Unix 
-s ada 

-s nfs 

-s rpc 


(timers, serial line drivers) 
for the executive 
Include the TIY server for 
conmunication with the serial 
coiiinunications device. 

Inclijde the TCP/IP server for 
ethernet connounication and TCP/IP 
network comnunication with the host 
Include the Virtual Terminal 
server VTTY for coiiinunication 
with a terminal emulator on the 
host computer. Used for logging 
of test results to the host. 

Include the unix-coopatibility 
layer. Needed for package Calendar. 
Includes the Ada nxi-time specific 
additions to the Unison/pSOS-t- 
executive. 

Includes the Network File Server 
to mount a filing system over 
the network. This server is only 
included for the applicable CE 
and EE tests. 

Includes the Remote Procedure 
Call server. Only used in these 
tests with NFS, hence is only 
included when NFS is included. 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 


APPQ4D1X A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_1N_LEN—also listed here. These values are expressed 
here as Ada string aggregates, vrtiere "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX IN LEN 


200 — Value of V 


$B1G_ID1 

(1..V-1 -> V -> '1') 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
{1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 »> 'A') & '1' 

$BLANKS 

(1..V-20 

$MAX LEM INT BASED LITERAL 

"2;" & (1..V-5 -> '0') & "11;" 


$MAX_LEN_REAL_BASED_LITERAL 

"16;" & (1..V-7 -> '0') & "F.E:" 


A-1 





MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and thei 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALZGNHE11T 

4 

$COUNT_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

M68020 

$DELTA_DOC 

2.0**(-31) 

$ENTRY_AIX}RESS 

16«0« 

$BNrRY_ADDRESSl 

16«1* 

$ENTRY_AIX)RESS2 

16«2« 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

r 9 

$FIXED_NAME 

NO_SUCH_FIXED_TYPE 

$FLQAT_NAME 

NO_SUCH_FLQAT_TYPE 

$FC»W_STRING 

tiff 

$PC»M_STRING2 

'•CANNOT_RESTRICT_FILE_ 

$GREATER THAN DURATION 

90_000.0 


$(a^TER THAN DURATIGN BASE LAST 

T0_00l3t_000.0 

$GREATER THAN FLOAT BASE LAST 

l.^E+308 

$GREATER THAN_FLQAT_SAFE LARGE 

3.iyE38 





MACRO PARAMETE3^ 


$GREATER_THAN_SHORT_PLQAT SAFE LARGE 

1.0E308 ~ 

$HI(2J_PRI0RITy 250 

$ILLEGAL_EXTERNAL_FZLE_NAME1 

/NODIRECTORY/FILENAMEI 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/N0DIRECTC»y/FILENAHE2 

$inappropriate_line_length 

-1 

$INAPPROPRIATE PAGE LENGTH 


$INCLUI»;_PRAGNA1 

$INCLUDE_PRAGHA2 

$INTBGER_FIRST 

$1NTBGER_LAST 

$INTEGER_LAST_PLUS_1 

$INTERFACEJLANGUAGE 

$LESS__THAN_DORATICN 


-1 

PRAGMA INCLUDE ('*A2e006Dl .ADA**) 

PRAGMA INCLUDE ("B28006F1.ADA") 

-2147483648 

2147483647 

2_147_483_648 

C 

-90 000.0 


$LESS_THAN_DORATICN_BASE FIRST 

-1TJ_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LQW_PR10RITy 1 

$MACHINE_CODE_STATEMENT 

NULL; 


$MACHINE_OODE_TYPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NANE 


INSTRUCTION 

31 

15 

2147483647 

2_147_483_648 

-2147483648 

BYTE_INTBGER 

A-3 



MACRO PARAMETERS 


$NAME_LIST 

$NAME_SPECIFICATI0N1 

$NAME__SPECIFICATICN2 

$NAME_SPECIFICATI0N3 

$NEG_BASED_INT 

$NBW_MEM_SI2E 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEF1NITION 

$RECORD_NAME 

$TASK_SI2E 

$TASK_ST0RAGE_S12E 

$T1CK 

$VARIABLE_ADDRESS 

$VARIABLE_ADDRESS1 

$VARIABLE_ADDRESS2 

$YOUR_PRAGMA 


H68020 

/haine/sparc6/aval/val. SPARC/X2120A 
/honie/sparc6/aval/val. SPARC/X2120B 
/home/sparcB/aval/val. SPARC/X3119A 
16#FFFFFFFE# 

1024 

8 

N68020 

ASCII.LF & ASCII.FF 
NEW INTEGER 
INSTRUCTION 
32 

8000 

20.0/1000.0 
FCNDECL.VAR_ADDRESS 
FCNDECL.VAR_ADDRESS1 
FCNDECL. VAR_AW)RESS2 
NO SUCH PRAGMA 


A-4 




APPENDIX B 


COMPZLATIGN SYSTEM OPTIONS 


The compiler options of this Ada inplementation, as described in this 
^jpendix, are provided by the customer, unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 

-L - Perform conpile on a program library named something other 
than ada.lib. 

-g - Run additional optimization pass. 

-K - Keep internal form file. This option is used in conjunction 
with the Optimizer. 

-k - Save all of the intermediate files. This option is useful 

for viewing or debugging the intermediate "C code generated 
by the back end of the compiler. 

-1 " modifiers" - 

Generate listing file. The -1 option causes the compiler to 
create a listing. Optional modifiers may be given to affect 
the listing format. Any combination of the following 
modifiers can be used: 

c - continuous listing format, 
p > obey pragma page directives, 
s - use standard output, 
t - relevant text output only. 

-fv - Verbose mode. Print out the names of the xjnits with'd, 
and vhat units are added to the symbol table. 

-fD - Debug mode. Generate debugging information. 

-fq - Quiet mode. Don't print any information about a compilation. 

-fL - Enables the compiler to give the filename and line numbers 
\^ere an exception takes place. 

-fr - Do not release memory at compile time. 

B-1 








CONPIIATIGN SYSTEM OPTIONS 


-fU - Cc»?)ile this lonit, but do not update the program library. 

-fw - Suppress warnings. 

-£s - Ccnipile time switch to suppress checking operations. 

-£N - Compile time switch to suitress numeric checking. 

-fz - Emit code to zero all locals. 

-£l - Ignore errors in deciding which units should be added to a 
library in a given conpilation (see ealOOSb). 

-£E - Generate the auxiliary £ile so that the lister will work. 

-fR - Generate ROMable code. 

-£Q - Don't emit messages about adding units to the program libra ly. 

-£o - Don't update the program library i£ a chauige is made that 

won't a££ect the program library (use£ul when spec and body 
are in the same £ile). 

-£P - Change the .int extension to .pre. This is used vhen the 
optimizer is invoked. 

-£C - Ccmpile only i£ this xjnit is out-o£-date. This is used in 
conjunction with the tool "adaorder". 

-fV - Change common to data. Explicitly initialize globals so 
that objects that would go into the common area will be 
placed in the data area. 

-£T - Trace C £unctions. This inserts tracing code on entry and 
exit £rom each subprogram. This is use£ul on a system with 
no debugger when it is first being brought up. 

-£b - Debug mode. CXitput iform blocks to a .b file. 

-fe - Intersperse source lines as comments in C (assembly) code. 

-fn - Output translations of globals to C names to .n file. 


LINKER OPTIONS 

The linker options of this Ada inplementation, as described in this 
^^ndix, are provided by the customer, unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


-c - Use a different compiler than the one specified for this 


B-2 









C0MPILATIC3N SYSTEM OPTIONS 


progrzun library. 

-L - Perform banp on a program library named sanething other than 
add.lib. 


-o - Takes a parameter. Diis specifies a different name for the 
executable. 

-r - Produce a relocatable object. 

-s - Specify an explicit default for the size of a task stack. 

-N - Don't actually call the linker. Prints out the program steps 
which would be executed in the bamp (^se 

-P - Print the steps (or sxibtools) invoked as part of bamp. 

-V - Verbose mode. 


-q - Quiet mode. 

-k - Save all of the intermediate files associated with bamp. 
-f - Don't coopile the elaboration main routine. 


-n - Stop before the link step. 

-m - Create a link map. 

-u - Target software floating point. 

-I - Link in Preemptive tasking runtime. 

-g; -G - Invoke the global optimizer. 

-z - Create executable that will perform dynamic linking. 

-Q - linker options passes through board-specific and 
~build-specific information to Composer(tm) 


The following Ccxtqposer selections may be used 
in this inplementation: 

-b up Use the single-cpu pSOS+ variant 

of the executive 

-r mvmel47 Use MVMEl47-specific modules 
(timers, serial line drivers) 
for the executive (other options 
supported are mvmel62 and mvmel67 
-s tty Include the TTY server for 

communication with the serial 
communications device. 

-s tcp Include the TCP/IP server for 

ethemet communication and TCP/IP 
network communication with the host 


B-3 






COMPILATION SYSTEM OPTIONS 


-S vtty 

-s Unix 
-s ada 

-s nfs 

-s rpc 


Include the Virtual Terminal 
server VTTY for coraraunication 
with a terminal emulator on the 
host computer. Used for logging 
of test results to the host. 

Include the unix-con^tibility 
layer. Needed for package Calendar. 
Includes the Ada run-time specific 
additions to the unison/pSOS+ 
executive. 

Includes the Network File Server 
to mount a filing system over 
the network. This server is only 
included for the applicable CE 
and EE tests. 

Includes the Remote Procedure 
Call server. Only used in these 
tests with NFS, hence is only 
included when NFS is included. 


B-4 







APPm)IX C 


APPENDIX F OF IHE Ada STANDARD 


The only allowed iiqplementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The iru^lementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to cc^iler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, which 
are not a part of ^pendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
t^ LONG_INTBGER is range -2147483648 .. 2147483647; 
type SHORT_INTBGER is range -32768 .. 32767; 
type BYTE_INTBGER is range -128 .. 127; 

type FLCAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type LONG FLOAT is 

digits 15 range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0000 ..86400.0000; 


end STANDARD; 


C-1 









APPE24DIX F OF TOE Ada STANDARD 


^jpendix F 

Implementation-Dependent Characteristics 


This appendix lists iiqplementation-dependent characteristics of 
CASEWorks/RT Ada for the Motorola NC680x0 family of processors 
executing with unison/pSO&f in an embedded environment. Note that 
there are no preceding af^ndices. TOis appendix is called ^^^pendix 
F in order to cooply with the Reference Manual for the Ada 
Programming Lwguage* (LRM) ANSI/MIL-STT>-1815 a which states that 
this ai^ndix be horned Appendix F. 

Implemented Chapter 13 features include length clauses, enxjmeration 
representation clauses, record representation clauses, address 
clauses, interrupts, package system, pragma interface, and mchecked 
programming. 

F.± Pragmas 

The implemented pre-defined pragmas are: 
elaborate See the LRM section 10.5 
interface See section F.1.1 
list See the LRM .^^pendix B 

pack See section F.1.2 

page See the LRM ^>pendix B 

priority See the LRM i^jpendix B 

suppress See section F.1.3 
shared See the LRM, chapter 13. 

The remaining pre-defined pragmas are accepted, but presently 
ignored: 

controlled 

optimize 

inline 

system_name 

storagejunit 

memory_si 2 e 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms are encountered at compile time, the 
compiler issues a warning message rather than an error, as required 
by the Ada language definition. Refer to the LRM Appendix B for 
additional information about the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma interface in CASEWOrks/RT Ada is: 

pragma interface( language, sxibprogram [,"link-name"] ); 


C-2 



APPENDIX F OF IHE Ada STANDARD 


vAiere: 

language This is the interface language, one of the names 
assembly, builtin, c, or internal. The names 
builtin and internal are reserved for use by 
TDolsmiths compiler maintainers in run-time support 
packages. 

sxibprogram 

This is the name of a sul^rogram to which the 
pragma interface applies. 

link-name This is an optional string literal specifying the 

name of the non-Ada sijbprogram corresponding to the 
Ada subprogram named in the second parameter. If 
link-name is omitted, then link-name defaults to 
the value of siibprogram translated to lowercase. 
Depending on the language specified, some automatic 
modifications may be made to the link-name to 
produce the actual object code symbol name that is 
generated whenever references are made to the 
corresponding Ada subprogram. The object code 
symbol generated for link-name is always translated 
to upper case. 

It is appropriate to use the optional link-name 
parameter to pragma interface only v^en the 
interface subprogram has a name that does not 
correspond at all to its Ada identifier or when the 
interface subprogram name cannot be given using 
rules for constructing Ada identifiers (e.g., if 
the name contains a character). 

The characteristics of object code symbols 
generated for each interface language are: 

assembly - The object code symbol is the same as 
link-name. 

builtin - The object code symbol is the same as 
link-name, but prefixed wi^ the following 
characters (_mss_). This language interface is 
reserved for special interfaces defined by 
Toolsmiths. The builtin interface is presently used 
to declare certain low-level nm-time operations 
whose names must not conflict with 
programmer-defined or language system defined 
names. 

c - The object code symbol is othe same as 
link-name, but with one underscore character (_) 
prepended. This is the convention used by the C 
coopiler. 


C-3 






APPENDIX F OF THE Ada STANDARD 


internal - No object code symbol is generated for 
an internal language interface; this language 
interface is reserved for special interfaces 
defined by Toolsmiths. The internal interface is 
presently used to declare certain machine-level bit 
operations. 


No automatic data conversions are performed on parameters of any 
interface subprograms. It is to the programmer to ensure that 
calling conventions match and that any necessary data conversions 
take place when calling interface sut^rograms. 

A pragma interface may appear within the same declarative part as 
the sut^rogram to v^ich the pragma interface applies, following the 
subprogram declaration, and prior to the first use of the 
subprogram. A pragma interface that applies to a subprogram 
declared in a package specification must occur within the same 
package specification as the siit^rogram declaration; the pragma 
interface may not appear in the package body in this case. A pragma 
interface declaration for either a private or nonprivate subprogram 
declaration may appear in the private part of a package 
specification. 

Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additional information about 
pragma interface. 


F.1.2 Pragma Pack 

Pragma pack is inplemented for con^site types (records and 
arrays). 

Pragma pack is permitted following the conposite type declaration 
to ^ich it applies, provided that the pragma occurs within the 
same declarative part as the conposite type declaration, before any 
objects or components of the coo^site type are declared. 

Note that the declarative part restriction means that the type 
declaration and acccxnpanying pragma pack cannot be split across a 
package specification and body. 

Itie effect of pragma pack is to minimize storage consumption by 
discrete ccsnponent types whose ranges permit packing. Use of pragma 
pack does not defeat allocations of alignment storage gaps for scmte 
record types. Pragma pack does not affect the representations of 
real types, pre-defined integer types, and access types. 


F.1.3 Pragma Suppress 

Pragma svippress is implemented as described in the LRN section 
11.7, with these differences: 

Presently, division_check and overflow_check must be 


C-4 





APPENDIX F OF TOE Ada STANDARD 


suppressed via a ccopiler flag, -£N; pragma suppress is 
ignored for these two numeric checks. 

Ihe optional ON -» parameter name notation for pragma 
suppress is ignored. 

The optional second parameter to pragma suppress is ignored; 
the pragma always applies to the entire scope in which it 
appears. 


F.1.4 Pragma Shared 

Pragma shared tells the compiler that the variable specified by 
this pragma is to be shared between 2 or more tasks and that any 
update or read of this variable should be synchronized with all 
other tasks vAiich have visibility to the data item. Q^EWOrks/RT Ada's 
approach to shared variables is to have the conpiler generate calls to 
a user-accessible function for each read or update of to \^ich a pragma 
shared has been applied. These functions have been iiq)lemented by 
CASENorks/Ada and pragma shared is supported. Should a project need extra 
behaviour, such as disabling interrupts, flushing cache, or setting a 
sema^^ore before each update, these su^rograms can be rewritten and 
recanpiled into a project library, so long as the specifications exactly 
match those specifications which follow. 

with system; 
with access_types; 
with imsigned_types; 

package pragma_shared is 

— shared get routines — 

function shared_getj:^e ( 

byte_p : in access_byte_integer) 
return byte_integer; 

function shared get_unsignedjt3yte ( 

unsignedj^e_p ; in access_unsigned_byte_integer) 
return unsigned_types.unsignedJt^e_integer; 

fwiction shared_get_int ( 

integer_p : in access_integer) 
return integer; 

function shared_get_pointer ( 

integer_p j in access_integer) 
return system.address; 

— shared assigns — 

procedure shared_asgn_byte ( 


C-5 






APPENDIX F OF THE Ada STAICARD 


byte_p ; in access_byte_integer; 

value : in byte_integer); 


procedure shared_asgn_unsignedjbyte ( 

bytejp ; in access_unsigned_byte_integer; 
value ; in unsigned_byte_integer); 

procedure shared_asgn_int ( 

integerjp ; in access_integer; 

value : in integer); 

procedure shared_asgnjpointer ( 

integer_p ; in access_integer; 
value : in system.address); 

end pragma shared; 


F.1.5 Inf)lementation-De£ined Pragmas 

The following liH)lementation-defined pragmas are defined bv 
CASEWorks/HT Ada. 

Pragma Volatile 

F.1.7 Pragma Volatile 

This pragma aj^lies to the same Ada types as Pragma Shared - sinple 
types and access types. Pragma Volatile applied to a variable 
directs the Ada compiler to never store this variable as a register 
variable but to always perform all reads and writes to memory. 


F.2 Attributes 

All attributes described in the LRM Appendix A are supported. 


F.3 Standard Types 

Additional standard types are defined in CASEWOrks/RT Ada: 
byte_integer 
short integer 
long_Tnteger 
long_float 

The standard numeric types are defined as: 

type byte_integer is range -128 .. 127; 
type short_integer is range -32768 .. 32767; 


C-6 



APPENDIX F OF 'HIE Ada STANDARD 


type integer 
type long_integer 
type float 

type long_float 

type duration 


is range -2147483648 .. 2147483647; 

is range -2147483648 .. 2147483647; 

is digits 6 

range -3.40282E't-38 .. 3.40282E-I-38; 

is digits 15 

range -1.79769313486231E-I-308 
.. 1.79769313486231E+308; 

is delta 0.0001 

range -86400.0000 .. 86400.0000; 


F.4 Package System 

The specification of package system is: 

package system is 

type address is new long_integer; 

type name is (M68020); 

system_name : constant name :« M66020; 

storage_unit ; constant 8; 
memory^size : constant :> 1024; 

— System-Dependent Named Numbers 


min_int 

max_int 

max_digits 

max_mantissa 

fine_delta 

tick 


: constant 
: constant 
: ccmstant 
: constant 
: constant 
: constant 


-2147483648; 

2147483647; 

15; 

31; 

2.0 ** (-31); 

20 . 0 / 1000 . 0 ; 


— Other System-Dependent Declarations 
subtype priority is integer range 1 .. 250; 

The value of system.memory_size is presently meaningless. 
F.5 Restrictions on Representation Clauses 


F.5.1 Length Clauses 

A size specification (t'size) is rejected if fewer bits are 
specified than can acccanodate the type. The mininum size of a 
composite type may be subject to application of pragma pack, it is 
permitted to specify precise sizes for unsigned integer ranges, 


C-7 



APPEI0)1X F OF THE Ada STANDARD 


e.g., 8 for the range 0..255. However, because of requirements 
imposed by the Ada language definition, a full 32-bit range of 
unsigned values, i.e. 0..(2**32)-l, cannot be defined, even using 
a size specification. 

The specification of collection size (t'storage_size) is evaluated 
at run-time vhen the scope of the type to vhich the length clause 
applies is entered, and is therefore subject to rejection (via 
storage error) based on available storage at the time the 
allocatTon is made. A collection may include storage used for 
rim-time administration of the collection, and therefore should not 
be expected to accommodate a specific number of objects. 
Furthermore, certain classes of objects such as unconstrained 
discriminant array cos^nents of records may be allocated outside 
a given collection, so a collection may accommodate more objects 
thw might be expected. 

The specification of storage for a task activation (t'storage_size) 
is evaluated at run-time \dien a task to which the length clause 
applies is activated, and is therefore subject to rejection (via 
storage error) based on available storage at the time the 
allocatTon is made, storage reserved for a task activation is 
separate from storage needed for any collections defined within a 
task body. 

The specification of small for a fixed point type (t'small) is 
subject only to restrictions defined in the LRM section 13.2. 


F.5.2 Enxiroeration Representation Clauses 

The internal code for the literal of an enxsneration type named in 
an enumeration representation clause must be in the range of 
standard.integer. 

The value of an internal code may be obtained by applying an 
appropriate instantiation of unchecked_conversion to an integer 
type. 


F.5.3 Record Representation Clauses 

The storage unit offset (the "at static_siii{>le expression” part) is 
given in terms of 8-bit storage units and must~be even. 

A bit position (the range part) applied to a discrete type 
ccmponent may be in the range 0..15, with 0 being the least 
significant bit of a coo^nnent. A range specification may not 
specify a size smaller than can accommodate the com^nent. A range 
specification for a coo^nent not acccxnroodating bit packing may 
have a higher upper boi^ as appropriate (e.g., 0..31 for a 
discriminant string coo^nent). Refer to the internal data 
representation of a given continent in determining the cooqponent 
size and assigning offsets. 


C-8 


APPEI4DIX F OF THE Ada STANDARD 


Components of discrete types for ^ich bit positions are specified 
may not straddle 16-bit word boundaries, unless they begin at bit 
position 0. In these cases the compiler will allocate 32 bits for the 
unit, and will not permit other conponents to be assigned to these bits. 

The value of an alignment clause (the optional at mod part) must 
evaluate to 1, 2, 4, or 8, aixl may not be smaller than the highest 
alignnvent required by any conponent of the record. This means that 
scxne records may not have alignment clauses smaller than 2. 


F.5.4 Address Clauses 

An address clause may be supplied for an object (whether consteuit 
or variable) or a task entry, but not for a sxabprogram, package, or 
task lonit. The meaning of an address clause suppli^ for a task 
entry is given in section F.5.5>. 

An address expression for an object is a 32-bit segmented memory 
address of type system.address. 


F 5.5 Interrupts 

A task entry's address clause can be used to associate the entry 
with a physical hardware address. Values supplied are hardware 
dependant. See the CASENorks/RT reference manual and the processor 
reference manual for interrupt ranges on your processor. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by 
means of type conversion. 


F.6 Implementation-Dependent exponents 

No names are generated by the implementation to denote 
implementation-dependent conponents. 


F.7 Ikichecked Conversions 

There are no restrictions on the use of unchecked conversion. 
Conversions between objects whose sizes or whose“basic machine 
representation do not conform may result in 

Storage areas with undefined values. 

Wrong values read because of differing underlying 
representations, such as a character stored in the high-order 


C-9 






APPENDIX F OF IHE Ada STANDARD 


byte of a 32-bit integer. 

Exceptions due to misaligned data, trying to read an integer 
on a 2-byte boundary on a RISC processor, for exaiq>le. 


F.8 Input-Output Packages 

A sumnary of the implementation-dependent input-output 
characteristics is: 


In calls to open and create, the "form" parameter must be the 
empty string (the default value). 

More than one internal file can be associated with a single 
external file for reading only. For writing, only one internal 
file may be associated with an external file; do not use reset 
to get around this mle since 

- Reset from IN FILE mode to OUT_FILE mode will raise USE_ERROR 
for SequentiaT_IO and Text_IO opened files 

- Direct_IO files are internally buffered and output to the 
physical file will be different and possibly unpredictable 
or cornqpted. 


Tenporary sequential and direct files are given names. 
Temporary files are deleted v^en they are closed. 

In calls to reset, out_file and inout_files cannot be reset, 
except as IN_FILE. This is because the underlying NFS must 
delete and attenpt to recreate the file. Network timeout 
issues preclixie this activity currently. 

Files cannot be deleted and recreated with the same name until 
the network timeout has expired - about 4 minutes. This 
limitation applies to deleting a file and attempting to 
recreate it within the same program, or attenpting to 
re-execute the same program within this time. 

File I/D is buffered; text files associated with terminal 
devices are line-buffered. 

The packages sequential_io and direct_io cannot be 
instantiated with unconstrained composite types or record 
types with discriminants without defaults. 


F.9 Source Line axxi Identifier Lengths 

C-10 




APPEM)IX F OF THE Ada STANDARD 


Source lines and identifiers in Ada source programs are presently 
limited to 200 characters in length. 




