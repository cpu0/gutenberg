! AD-A266 422 


Proceedings of the 

Association for Computing Machinery 
Special Interest Group for Ada 
Artificial Intelligence Working Group 
1992 Summer Workshop 


Janet Faye Johns 



MITRE 

Bedford. Massachusetts 


r* r ' 


93 r 


07 ? 














June 1993 


> 


Proceedings of the Association for Computing Machinery 
Special Interest Group for Ada Artificial Intelligence 
Working Group 1992 Summer Workshop 


Janet Faye Johns 


The MITRE Corporation 

202 Burlington Road M 93B0000072 

Bedford, MA 01730-1420 


same as above 


same as above 


Approved for public release; distribution unlimited. 


On 24-27 June 1992, the Association for Computing Machinery (ACM) Special 
Interest Group for Ada (SIGAda) Artificial Intelligence Working Group (AIWG) 
held a workshop to discuss Ada real-time and Artificial Intelligence (AI) issues. 
Workshop discussions covered blackboard architectures, experiences and lessons 
learned, real-time development approaches and issues, and Ada 9X issues for AI 
systems. These proceedings included papers by workshop participants describing 
their large-scale AI with Ada systems. A summary of the related workshop 
experiences and lessons learned discussions in the areas of requirements analysis, 
design methodologies, development techniques, test and validation, and 
maintainability are included. 


Ada systems. Artificial Intelligence 


Unclass i. f ied 


Unclassif ied 


Unclassified 


Un1imited 












Proceedings of the 

Association for Computing Machinery 
Special Interest Group for Ada 
Artificial Intelligence Working Group 
1992 Summer Workshop 


Janet Faye Johns 


Contract Sponsor N/A 
Contract No. N/A 
Project No. G30D 
Dept. G033 

Approved for public release; 
distribution unlimited. 




M 93BOOOOO"2 

June 1993 


ACCc'iC 

•’ fcr ( 

NT IS 

fN 

U • 

\J .. . 

J ; .: ;. . 

i ’O 

* .•>, 

ay 

.0. ! r. 

... , . . - - - 

■ ! 

A 

v-C" e c ' 

Oi t 

Avc. ' O' 

1 

/H 

1 

! 


**XCQU ALjry 




Bedford. Massachusetts 




ABSTRACT 


On 24-27 June 1992, the Association for Computing Machinery (ACM) Special 
Interest Group for Ada (SIGAda) Artificial Intelligence Working Group (A1WG) held a 
workshop to discuss Ada real-time and Artificial Intelligence (AI) issues. Workshop 
discussions covered blackboard architectures, experiences and lessons learned, real-time 
development approaches and issues, and Ada 9X issues for AI systems. These proceedings 
include papers by workshop participants describing their large-scale AI with Ada systems. A 
summary of the related workshop experiences and lessons learned discussions in the areas of 
requirements analysis, design methodologies, development techniques, test and validation, 
and maintainability are included. 





I 


IV 







EXECUTIVE SUMMARY 


Artificial Intelligence (AI) with Ada is a reality! Based on the information presented 
at the 1992 Summer Association for Computing Machinery (ACM) Special Interest Group 
for Ada (SIGAda) Artificial Intelligence Working Group (AIWG) workshop, Ada is a viable 
language for AI applications. This workshop provided a valuable opportunity to accumulate 
more empirical evidence proving that Ada is being used successfully to implement large- 
scale AI systems. Congratulations to the participants for their AI with Ada successes! 


Workshop Highlights 

The SIGAda AIWG held a very busy and informative workshop in conjunction with 
the Summer '92 SIGAda meeting in Seattle, Washington. The workshop focus was Ada real¬ 
time and Artificial Intelligence (AI) issues. Software researchers and practitioners from the 
real-time and AI communities were brought together to exchange ideas and lessons learned. 
Most of our workshop time was devoted to presentations by those who have implemented 
large real-time AI with Ada systems. A summary of these AI with Ada applications is shown 
in figure 1 with the size in Thousands of Source Lines of Code (KSLOCl and the number of 
Knowledge Based Systems (KBS) rules. 


AI with Ada 
Applications 


TC&E 
ARTIE SM 
ARTIE SP 
ARTIE MM 
DFTDS 


JP 

m 

■ 

■ 

IWHMMH 

amo 


■ 

lame j 

■ 

■ 

1 

1 

Iwaro 

am 

■■■ ■ 

«W8 

wm 

B M 


0 50 100 150 200 250 

KSLOC 


Number of Rules in the 
Knowledge Based Systems 


ARTIE SM 
ARTIE SP 
ARTIE MM 
DFTDS 



200 400 600 800 

KBS Rules 


1000 1200 


Figure 1: Summary of AI with Ada Applications 


The acronyms used in the figure are Data Fusion Technology Demonstrator System 
(DFTDS), Ada Real-Time Inference Engine (ARTIE), tactical cockpit mission manager 
(ARTIE MM), search area planner (ARTIE SP), automated sensor manager (ARTIE SM), 


v 
















and Training Control and Evaluation (TC&E). These systems are a sampling of larger 
applications than most of those documented in the 1991 A1VVG applications survey 1 . 


Workshop participants shared their experiences implementing large-scale real-time 
Knowledge-Based Systems (KBSs) in Ada. Participants from the Defense Research Agency 
(DRA) in the United Kingdom (UK) shared their experiences developing a real-time ship 
borne Command and Control system and their research activities in the area of validation and 
verification of safety-critical KBSs. A pair of related articles describing their activities. The 
Data Fusion Technology Demonstrator System (DFTDS) Project by John Miles and 
Validation and Verification of Safety Critical Knowledge-Based Systems by Jonathan Haugh 
are included in these proceedings. DFTDS is undergoing sea trials at the present time. 

Boeing provided an update on the latest developments with their Ada Real-Time 
Inference Engine (ARTIE) and described some of their complex real-time reasoning based 
avionics applications including a tactical cockpit mission manager, a search area planner, and 
an automated sensor manager. George (Rick) Wilber and Robert Ensey provided a copy of 
their briefing slides which are enclosed in these proceedings as the article Embedded Real- 
lims-Rfias gning Congepi s a raLAp pIi saiip p a* 

BBN has developed an AI with Ada application called Training Control & Evaluation 
(TC&E). Their experience provides some insight into rapid prototyping with Ada followed 
by the transition of a legacy prototype to Full Scale Engineering Development (FSED). 
Although Dan Massey was unable to attend the workshop, he provided an article which is 
titled Training Control & Evaluation (TC&E1 for these proceedings. 

Minutes of the workshop have been written in the form of a workshop discussion 
summary which is included with the Message from the Panel Chair for the Applications 
Experiences and Lessons Learned Panel. A workshop participant list follows this Executive 
Summary. Recommendations for specific AIWG actions are made at the end of this 
Executive Summary. 


Issues 


The panel discussed issues covering the complete software life cycle including the 
challenges of software engineering AI applications; the difficulties with AI requirements 
analysis; the legacy of an AI requirements analysis; testing, verification, and validation of AI 
applications; and maintenance for AI applications. Many of the issues and problems 
discussed during the workshop are applicable to AI applications developed with any 
language including the Ada programming language. 


1 J. Johns, June 1992, 1991 Annual Report for the ACM Special Interest Group for Ada 
Artificial Intelligence Working Group, MITRE Document M92B0000056 and the 
January/February issue of Ada Letters. 


VI 




Software Engineering 


AI applications typically begin with few documented requirements and are defined as 
well as developed with a series of evolutionary prototypes. This is the current sta^e-of-the-art 
for AI applications design and development with Ada or any other programming language. 
Software engineering and Ada design methodologies typically begin with a set of well- 
defined, testable, verifiable requirements. Therefore, due to the lack of requirements, 
software engineering is a challenge for AI with Ada developers. Without a set of well- 
defined requirements, how do you "engineer" AI applications? This question is the subject of 
on-going debates and research. However, while there are no textbook solutions today, the 
information in these proceedings describes how AI with Ada practitioners are successfully 
"engineering" AI applications today. 


AI Requirements Analysis 

Requirements for AI applications are defined through iteration; that is, learning by 
doing. AI requirements are difficult, if not impossible, to specify without prototypes. Most 
of the effort for AI projects is spent defining requirements and prototyping. In the case of a 
70,000 source line of code Ada application, 2/3 of the calendar time and labor were expended 
developing prototypes to define the requirements for the AI application. 

AI requirements analysis requires a flexible process because defining AI requirements 
is an evolutionary process. This type of process is not a fixed price problem, and the typical 
use of DOD-STD-2167A may be too rigid for A! applications even w'ith the software 
engineering discipline provided by the Ada programming language. We discussed many AI 
specific issues associated with the software engineering process and DOD-STD-2167A. 
These discussions led us to question whether AI requirements and design are the same as 
understood in the DOD-STD-2167A and other software engineering environments. Based on 
these discussions, the AIWG decided to be more active in expressing AI specific 
requirements and concerns to the standards bodies that are developing standards which 
impact the development of AI applications with the Ada programming language. 

The Legacy of AI Requirements Analysis 

Prototypes and human understanding of the problem domain are the standard legacy 
of an AI requirements analysis effort. What happens to this legacy? We would like to use 
our human understanding to specify the desired system in clear unambiguous requirements, 
but this is rarely possible. Prototypes typically reflect our understanding of how to 
implement a solution, and in many cases are required to prove that it is possible to "engineer" 
the full scale system. Can you successfully "re-engineer" a prototype into a supportable and 
maintainable system? Based on panel experiences described in these proceedings. Ada 
prototypes are being re-engineered into supportable and maintainable systems. 


vii 






Testing, Verification, and Validation 


The difficulties inherent in AI requirements analysis inevitably lead to problems with 
the testing, verification, and validation (V&V) of Al applications. Testing and validation 
activities ensure that the developed software system satisfies a well-defined set of 
requirements which unfortunately do not normally exist for AI applications. Verification 
activities ensure that the developed system is supportable and maintainable which raises 
issues associated with the feasibility of verifying non-deterministic systems that can leam and 
adapt over time. Testing and V&V are critical areas of current research because the public 
and the software engineering community have begun to focus attention on building trusted 
systems that are correct, dependable, robust, safety critical, efficient, and secure 

The panel discussions regarding testing and V&V led to two interesting thoughts. 
First, AI applications seek to emulate human intelligence and behavior. How do we test and 
validate humans? In general, the proof of human intelligence and their ability to learn is 
through on-the-job performance. Therefore, in essence, humans do not undergo the same 
scrutiny of test and V&V that we are trying to impose on AI applications. Second, instead of 
trying to perform an unnatural test and V&V scrutiny of Al applications, perhaps it would be 
more meaningful to develop techniques and tools that determine if an AI application is fit- 
for-purpose; that is, does it match the problem domain, is it operable in the proposed 
environments, and can it be learned with relative ease. 


Maintenance 

Maintenance is an area of critical concern as large-scale AI applications are fielded 
and must be supported for a long life cycle. Knowledged-base maintenance is also a critical 
concern during the iterative development of large knowledge-based systems. For an expert 
system, maintenance traditionally involves changes to the rule base as well as the facts which 
art normally considered data. The discussions in this area included questions such as "What 
is knowledge? Are rules considered data or software? Should facts in a knowledge-based 
system be treated as data or software? 

During the panel discussions, several implementation techniques currently being used 
for expert systems were described as: 

1. Implementing the rules in Ada for runtime performance. 

2. Use two modes for the rule base: an interpretive mode for rale execution 
during development and a runtime mode that involves translating the rules to 
Ada for runtime performance. 

3. A runtime mixture of interpreted rules and rules implemented in Ada. 

One of the developers who is using the first approach of implementing the rules in 
Ada lamented about the tremendous overhead - approximately 1 week -- to rebuild his real¬ 
time command and control system for any changes to the 510 rules in the rule base. The 






selected implementato r techniques for an expen systems rule base influence both system 
maintainability and < .rformance. Based on their development and maintenance experiences, 
the panel identit- j a critical need for a support environment that includes a real-time 
browser for runtime "peeks" into the system and knowledge-base maintenance tools. 


Recommendations 

Software engineering is a challenge for the AI community due to the evolutionary 
nature of AI applications. Software engineering is one of the strengths and advantages 
offered by a properly managed Ada environment. We, the AI with Ada community, should 
develop processes and tools that support the "engineering" of AI applications with Ada 
The AIWG should add a section to the AIWG's annual report to describe software 
engineering processes for AI applications and assess the progress that has been made in the 
use of software engineering principles to develop AI applications. The AIWG should 
develop a database cataloging software engineering processes, tools, and applications w ith 
periodic publication of this information in Ada Letters. 

In order to manage and engineer AI with Ada projects, the AIWG should establish a 
set of software metrics that are compatible with the evolutionary nature of AI applications. 
Further, the AIWG should conduct annual surveys to determine the current values for the 
software metrics so that this information can be used by the Ada community to manage and 
engineer AI applications. The software metrics should be published in the AIWG's annual 
report and Ada Letters. 

The AIWG should become actively involved with standards bodies that are 
developing standards and other guidance that impact the development of AI applications with 
Ada. Of course, the first step in this process is to identify the AI specific requirements that 
need to be communicated to the standards bodies. The issues and problems discussed at this 
workshop should be matured into concrete requirements and recommendations for formal 
submittal to the appropriate standards bodies. 

Many of the issues and problems faced by the AI with Ada community are the same 
problems faced by all AI researchers and developers. The AIWG should work closely with 
the AI community to concentrate our combined efforts on solving our common problems 
rather than focusing on the perceived differences between the AI and the Ada communities. 


IX 





ACKNOWLEDGMENTS 


I would like to thank all of the workshop attendees for their participation and 
contributions to the discussions and presentations that led to these proceedings Jorge L 
Diaz-Herrera gave an excellent presentation covering the current state-of-the-art in 
blackboard architectures. James Baldo coordinated the participation of our colleagues from 
the United Kingdom and led an interesting discussion about the challenging aspects of using 
Ada to implement real time systems. Rich Hilliard provided the AIWG workshop attendees 
an update on the activities of the Ada Run-Time Environment Working Group (ARTEWG). 
Henry Baker led the thought provoking discussions about Ada9X issues for the AIWG. 

The workshop attendees extend a hearty "thank you" to Boeing for hosting a tour of 
their Boeing 757 testbed aircraft. While aboard the aircraft, we saw "A! with Ada in action" 
with demonstrations of Boeing's Ada Real Time Inference Engine (ARTIE) and the complex 
reasoning based avionics systems developed with ARTIE. 

The MITRE Corporation has published these proceedings as pan of their continued 
support for my activities as Vice-Chair of the ACM SIGAdu AIWG. I want to thank Susan 
Maciorowski for her professional encouragement of my AIWG activities. Many thanks and 
words of appreciation go to my secretary, Kimberly Cole Taylor, w ho has worked very hard 
to put together this and other AIWG reports. 


x 







AIWG '92 Workshop Participants 


Henry Baker 
Nimole Computer 
16231 Meadow Ridge Way 
Encino, CA 91436 
818-501-4956 (phone) 
818-986-1360 (FAX) 

James Baldo Jr. 

Institute for Defense Analysis 
1801 N. Beauregard St 
Alexandria, VA 22311-1772 
703-845-6624 (phone) 
703-845-6848 (FAX) 
baldo@ida.org 

Mark R. Bowyer 
DRA Famborougb Q153 
Hants GUI4 6TD.UK 
252-24461 x2503 (phone) 
252-377247 (FAX) 
r_bowyer@ uk. mod.hermes 

Jorge L. Diaz-Herrera 
SEICMU (MSE project) 

4500 Fifth Ave 
Pittsburgh, PA 15213-3890 
412-268-7636 (voice) 
412-268-5758 (FAX) 
jldh@sei.cmu.edu 

Rob Ensey 

Boeing Computer Services 
Box 24346, Mailstop 9H-84 
Seatde, WA 98124 
206-394-3055 (phone) 
206-394-3064 (FAX) 
rob@patty.amas.ds.boeing.com 

Jonathan Haugh 
DRA Portsdown 
Portsmouth Hants P06 4AA 
Hampshire, UK 
0705-333839 
0705-333543 (FAX) 


Rich Hilliard 
fntermetrics 
Cambridge, MA 08138 
617-661-1840 
rh@inmet.com 

Janet Johns 

MITRE Mailstop K203 
202 Burlington Road 
Bedford, MA 01730 
617-271 -8206 (phone) 

617-271-2753 (FAX) 
jfjohns@mitre.org 

Mark Johnson 
SMC/CNWS 

Los Angeles AFB, CA 90009-2960 
310-363-8770 (phone) 

310-363-8725 (FAX) 

Michael Looney 
DRA Portsdown 
Portsmouth Hants P06 4AA 
Hampshire, UK 
44-0705-332330 (phone) 

44-0705-333543 (FAX) 

MJ L7rARE-PN. M OD. U K@ Re la v. M OD- 
UK 

John Miles 

DRA - Maritime Division 
ARE Portsdown 
Portsmouth Hampshire 
P064AA England 
0705-333839 


Howard E. Neely III 
Hughes Research Laboratories 
3011 Malibu Canyon Rd 
Mailstop MA/254/RL69 
Malibu, CA 90265 
310-317-5606 (phone) 

310-317-5484 (FAX) 
NEELY@MAXWELL.HRL.HAC.COM 


xi 





John Tunnicliffe 
DRA Ponsdown 
Portsmouth Hants P06 4AA 
Hampshire, UK 
0705-332002 (phone) 
0705-333543 (FAX) 

George (Rick) Wilbur 
Boeing Computer Services 
Box 24346, Mailstop 9H-84 
Seattle, WA 98124 
206-394-3055 (phone) 
206-394-3064 (FAX) 

Mik Yen 

Boeing Defense & Space Group 
Box 3707, MS4C-63 
Seattle, WA 98124-2207 
206-662-0213 (phone) 
206-662-0115 (FAX) 









T ABLE OF CONTENTS 


SECTION 


PAGE 

Appendix A 

Welcome Message by Jorge L. Diaz-Herrera 

A-1 

Appendix B 

The Data Fusion Technology Demonstrator System (DFFDS) Project 

B-i 

Appendix C 

Validation and Verification of Safety Critical Knowledge-Based 
Systems 

C-l 

Appendix D 

Embedded Real-Time Reasoning Concepts and Applications 

D-l 

Appendix E 

Training Control & Evaluation (TC&E) 

E-I 

Appendix F 

Ada 9X Issues for AI Systems 

F-l 

Appendix G 

Message from the Applications Experiences and Lessons Learned 
Panel Chair 

G-l 


xiii 




APPENDIX A 


Welcome Message by Jorge L. Diaz-Herrera 
Editor's Notes 

Jorge L. Diaz-Herrera is the Chair of the ACM SIGAda AIWG. Jorge opened the 
AIWG Workshop with a welcome message describing the background and focus of both the 
AIWG and the workshop. In his welcome message, Jorge addressed several key issues with 
Ada, AI, real-time systems, and embedded systems. 








k £ s Ml 

S.-sSI 
Is SSt-S ~ 


||Sigc 
5 » ? 5 2 o 

k * •• k • i 

!||!|| 

! Mils 

* = i 
5?*Jfi 

•8||t e 


±r 



CM 

o> 

CD 

is 

o> a 
c c 

♦3 V 
O O) 

a> = 
5 <u 

©I 
p © 
IS 

cog 

I 5 

a 

55 




i 


Pnl. JLOlM-H»rr»<» *•*• * 





«• w ■ 
3 ?§ 

:! j 

0*5 
c S • 
0—0 
is a ■ 

tea 

j:j 


go- 

III 

!sl 

zzi 

£ • 3 

• 5? m 

w a. ■ 


C 3 

« O 

0^1 

c *> ® 

® JE 

E « o 

I & 
< 2 « 
o c*2 
c £ a 

|i* 

its 

• CM 
t: m cb 


<?f 

o g c 

*> - O) 

J5 5 

o a 2! 

go.® 

2 c 

c c r 

$ w O 
par- 


os^ 
c » <o 
•* C 3 

£ ® « 

> ® > 

• a ® 

•o j c 
® g ra 

a o -c 

o « f 

° « * 

« 2 m £ 

• c 2 £ 

w ir 22 n 

• §5 g 

• c ® 2 
E o o. S- 
e o « fc 

s 2 s 8 

2 c © 5 

C OT> W 
o o c £ 

« "T m « 

CD 2 - J5 
£ £ •» x 
® o o • 

| 2 S o 

O 


ai — m 

- £ i 2 

J€l i 

o « « S 
>* © *- 
= ^ CL « 

S S E E 

*S S 2 

® 5 < w 

£ o s o 

>T3 4 ! > 

* £ fc 5 

■o a 3 » 

• X) O -H . 

SC . *r 

q. ® • ° 


a * 2 _ 

p >* E ® 

® -o * v 

• £■ 2. e 

5 * * d ' 
ffi TJ 5 o 
S C ® 5 
. o q a ■ 
S a C “ 

■ ® £ • > 
®Or- 

• 2 o g , 

E o a„ . 

2 5 5 S 

2 | 2 5 ! 

ft Sc s ; 

11 8 2 j 
af *> 2; 


== o o 

•f ® +* 

3 £ e 




«> » 


a ~ 

© £ 
i_ © 

S? 

© ss 

© ® 

I* 

W 


, © 

c o 
_ o >. 

Ill 
1I" 
1 !• 
2 I 8 

I || 

£ ?I 


o 8 ■= 

I «*3 

1 £ c § 

I Hi 

• -=L "O £ 

5 5 5 1 


H ® >» 

a> a ? 
c ® o 

III 

■S c o 

Q. E ® 
• S H 
^ 2 ® 

•» > a 
« c > 
>. e Z 
i x> o 
c c OT 
< « 
o « C 
■= ® • 

1 H 
°ls 

■o • ts 


£ ' 

o 2 

£ c Q. 

c a» ° 
e o v 
fog 
® c . 

-C m 
3 0" 
C ® C 
a ** ® : 

S*| 
is 5’ 

1 2 E 

1 ® I 

Ti 1 0 ■ 

{2 § c. 

j ® &• 

© -£ = 

*. a ® 

?2 c 

«I i ■ 

s u ■ 
csi 
2 

2 J = 

• Is 

£ C C 

rr a. o ; 
2 o » . 
a ® c 

|5 i 

■g -o o 


O 3 

o c 

•* t»JC 

>• c •* 

■O -r >. 

« £ a> 

^ £ o 

"Co 

g g 5 

ao| 
2- a. « 


« u. W 

c E 8 

5k 55 5; 

5 S2.-2 
o 5* o 

o " " 

S S9 
S?“ 

~ c ^ 

®» 9 n © 

-f c 

• I S e 

III! 

3 ® — « 
■R o O ® 
«H£ C 

S : ® “P 
2S 

• tin 

> s s « 

• E 5 ■° 

73 £ C 2 

T>e | 5 

c w o 2 

« o 2 « 














SIG Ad» AfWG: Summer 92, Sealle _ Mwa_SKI Ada AIWG: Summer 92, Sealte 


m • 

© 

3 C 

S • 

© © 

Z n 

o c 

5 8 
1 I 

I - 

i 5 5 
| g g 

“5 is 

|* & 
S -a g 
,S * 

!!§: 

2^3 


' 1 if 

a *- <u -o 
3 o r 3 

Ooxi 
n O * . 
rock 
pcoS 

£ ~ C 

> * * Tt Tm 

» « o <o <u 
S s> ® c « 

52tiS- 
C o m E P 


• n 

& 3 Si 

O = o r K 

O or «»* 


cS * Q 

O 2 K EE ® w 

E S ? ® g-sis 


*c x> CLIO £ <2>o5« 

p__«eT‘r'“®2£a. 

~a=_ c — 0 «XJ/n_c 


° W O « c 

3®'TJ-®(5X)'D(n'D — 

®oi‘£<=* l 5 c Ho-- 


_ « 

3 U) 

£ « o 

• cl 

Sis 

•> o t» 

— nn 
< — c 

• = « 


«■= 2=5.5- 6 c'T.-gSS® SX5 

® C fT r CO -- O c ® * «n C ?•- w 
CL _ C)-^ ® •- C T, T> « w 

?K®«n-n«U flt 03 m a®«oT>» 


i> w = 

®o g 

: « i: fi 

L o| < 

: I §■ S 

1 a. o a 
, Q. 2 X> 

1 < O < 


m c o 

I 11 
3£®. 
• ?! 

‘ w* 5 L* 

* < % 

515; 

SJS. 
O C o . 


’"je3cv'~«t«T 3 axt 2« nuc^o *»« E 
®^°? 2 8 £:1 «Sow38«S®®»2” 


3 •» ca -o is — ir tr “-2 to « v 


g mJ~ 

® T 1 ** 


3:« 5 


if 

« 3 

2 3 

2 v • 

til 

afl 

• * • 
£ • a 

5 8f 

o c 2 


^ 10 
$ < 

<2 

if) 


3 ^ » 

f 8 « 

H « S 

* •§ 

f « g 

l 1 ! 

Sts 

IH 


5 | . 

Si? 
8 8 § 
£ 3 ! 

|?§ 
5 a o 

2 : • 

*z • «t 

85* 

• f C 

-c E • 

t « 

a i ” 

2 s 3 

_ t» 9 


- 2 5 

* ? • 

ill 

•s a o 

3 S M 

a a • 


£ £• 

cf 

1 ?. 

EdJ 

I C c 
® o 0) 
S £ S3 

S|< 

5 8,8 

a Pc 

c O © 

V ® O 

jO» 


$ > 

S § 

a ? 

$ 2 i 
. ■o 

g “ & 
S _- o> 
® 5 f 

5 f 5 

L I J 

• A 
■S 0 « 
| 5 S 
5 J 2 

i &s 

(O o s 
as -J 00 


2 c 
O « 

£ fc 
■D C 
W J 

S 2 
o > 
at « 

S. o 

N jj 

2 < 0 

c - 2 

2 c 2 

^ O 06 

■o « 

s ff 1 

S o s 

2 W £ 

L. 0> *- 

® T* ® 

X - X 

N ® N 

0 x> o 
5 E a 
J ? J 

0 o 0 

?z ? 

000 

-> p -J 
< 
o 






SIGAdi AIWG: Summer 92, Settle 


CM 

Q.O> 

Jgg 

w E 

t E 

$0) 

<£% 

$ < 

<<3 

co 


s 

o 

» I 

S s 

s c ^ 
s = s 

** a • 

• 2 “ 
c £ s 
3 8 ? 

“> •S* C 


(D 

M 


I 

TJ 

£ 


€ 

it; 

8 M 

S3! 




tret. J.Li 







APPENDIX B 


The Data Fusion Technology Demonstrator System (DFTDS) Project 

Editor's Notes 

This article is a treasure trove of information about the advantages of using Ada to 
implement large-scale real-time Knowledge-Based Systems (KBSs). The United Kingdom's 
Defence Research Agency (DR A) has implemented a large-scale real-time KBS for ship 
borne Command and Control. DFTDS has been implemented with 220 KSLOC of which 50 
KSLOC imple ment s KBSs for time-critical functions such as data fusion and situation 
assessment. DFTDS is a true KBS in Ada application as the rules are coded directly in Ada 
to achieve the run-time efficiency required by Command and Control applications which 
must process data from radar, sonar, navigation, electronic support measures (ESM), and 
other sensors. At the present time, DFTDS is installed on the Royal Nava! Frigate HMS 
Marlborough and is undergoing sea trials. 

This article discusses the lessons learned using Ada to implement DFTDS. Dr. Miles 
finds "Ada as a language has been found to be quite simple to use for a large real-time KBS 
and in some respects, notably run-time efficiency, abstraction, exception handling, strict 
typing, has distinct advantages over AI toolkits and expert system shells for engineered real¬ 
time applications." Prototyping to assess the potential of implementing time-critical 
functions such as those required for data fusion, situation assessment, planning, and reaction 
are discussed in this article. Dr. Miles also describes the DFTDS Ada shell and the use of a 
rule specification template with a semi-formal rule specification language to ensure a 
consistent style was used to specify the hypotheses and rules. 


AI Topics: Blackboard architecture, expert system, data fusion, situation analysis, planning 

Domain Area: Command and control 

Language Interfaces: Unknown 

Project Status: Undergoing sea trials and evaluation 

Size of Ada Source Code: 220 KSLOC 

Number of Rules in Knowledge-Based System: 510 

Design/Development Methodology: Iterative prototyping 

Hardware Platforms: MicroVAX 3800 


B-l 





THE DATA FUSION TECHNOLOGY DEMONSTRATOR SYSTEM (DFTDS) PROJECT, 
(presented at the SIGAda meeting Ada/AI workshop, Seattle, Washington, June 1992) 

John A H Miles 

DRA Portsdown, Portsmouth, Hampshire, UK. 


ABSTRACT 

A large-scale real-time Knowledge-Based System (KBS) has been implemented entirely in 
Ada. The application is Data Fusion for shipbome Command and Control and the KBS is 
interfaced to several sensor systems, a relational database and provides five user workstations. 

Ada was chosen for its real-time performance and its system engineering features. An Ada 
Shell using the Blackboard Model has been developed and a methodology for knowledge 
specification and implementation in Ada has evolved; these are described in the paper. 

The real-time performance of the KBS has met its targets and few problems have been 
encountered with the Ada development system chosen. Experience with Ada, lessons learned 
and suggestions for Ada improvements for KBS are included. 


L I NTRODU CTION 

This paper describes a demonstrator project which resulted from a research programme to look 
at the application of AI, particularly KBS techniques, to command and control. Several 
laboratory prototypes were developed for functions such as Data Fusion, Situation 
Assessment, Planning and Reactive Resource Allocation. The success of these prototypes and 
particularly the potential of those addressing time-c ritical functions has led to a large-scale Data 
Fusion Technology Demonstrator System (DFTDS) being constructed and fitted to a warship 
for a two-year period of sea trials (reference [1]). The objectives of this programme are: 

• to explore the use of KBS and other new technologies for providing automated support 
to Data Fusion and Situation Assessment functions 

* to reduce the risk of procuring systems which use these technologies by examining all 
stages of the development, setting-to-work, performance and in-service support of a 
large-scale prototype 

Both the conventional software and knowledge-based modules of the DFTDS have been 
successfully developed in Ada. All the modules including KBS op erate in real-time, typically 
processing 100 messages per second. These features make the DFTDS a valuable, in some 
respects probably unique, source of data from a practical Ada/KBS application. 


2. DFIDS DESCRIPTION 

Figure 1 shows a block diagram of the main DFTDS modules. The Front-End Processor 
(FEP) receives real-time input messages from all the ship's sensor systems, from data 
communication links and from operators via the user interface module. Its main purpose is to 
present the Data Fusion module with messages in a suitable format for knowledge-based 
processing. The module provides filtering, re-formatting and recording of messages. It can 
also operate in a replay mode using data previously recorded or simulated scenario data. 


t 





Radar — 

IFF — 

ESM — 

Datalink M 
Sonar —i 
Nav. _ 

Figure 1 DFTDS Block Diagram of Modules 


Data Fusion 
Module 
(DFM) 


Front-End 

Processor 

(FEP) 


Database 

Terminal 


Situation 

Assessment 

Prototype 

(SAP) 


User Interface 
Module 
(UIM) 




The Data Fusion Module (DFM) is the First and currently largest KBS module in the DFTDS. 
It is structured along the lines of a Blackboard System with rules, knowledge sources and a 
blackboard data structure entirely written in Ada. The purpose of the module is to correlate 
and combine data from all available sources (sensors and manual inputs) to form a fused 
tactical picture. It allows operators access to and interaction with each stage in the reasoning 
through the user interface module. Some of the reasoning in DFM requires access to the 
geographic and encyclopaedic databases held in the Database Module. Further details of DFM 
operation are given later. 

The Database Module (DBM) provides geographic data (coastlines, navigation features, seabed 
features, shore features, air-lanes, etc.) for display and for answering on-line queries from 
DFM. Similarly, the encyclopaedic database in DBM, contains ship, aircraft, shore base, 
equipment, identity data etc., and provides query facilities for both DFM and for operators via 
the user interface module. 

All user interaction with the DFTDS other than system control and database maintenance is 
carried out through the User Interface Module (UIM). This module provides a WIMP 
(Windows, Icons, Menus, Pointer) style interface on five colour graphics terminals and a form 
fill style interface for some data entry on two ordinary terminals. The windows on the 
graphics terminals give visibility of all stages in the data fusion process and allow the user to 
configure the display in any desired manner to suit his tasks. 

The Situation Assessment prototype (SAP) is a second KBS module written in Ada using a 
similar framework to DFM. Its purpose is to take the detailed tactical picture produced by 
DFM and by applying further stages of reasoning construct a concise situation display showing 
the main groupings of objects and a prioritised threat table. All user interaction with this 
module is also through the UIM so that it appears as one system to the user even though it uses 
distributed KBSs. SAP will be enhanced in functionality in a second phase of the project. 

All the DFTDS application modules communicate using the facilities provided by a System 
Support Module (SSM). This module, part of which resides with each application module, 
also provides control, timing, monitoring and fault reporting. 


2 









The overall size of the Ada source code in the DFTDS is about 220,000 DSI (Deliverable 
Source Instructions). Of this about 50,000 DSI are KBSs. Other sizing metrics for 
individual modules arc as follows: 


DEM KBS: 

Input Message Types 

Number of Rules 

Number _,f Knowledge Sources 

SAP KBS: 

Number of Rules 

Number of Knowledge Sources 

DBM (Encyclopaedic Database): 
Number of Tables 
Number of Stored Procedures 
Number of MMI Forms 
Overall data size 

DBM (Geographic Database): 

Number of Tables 
Number of Queries 
Overall data size 


UIM: 

Number of windows 
Number of window overlays 


100 

510 

180 


90 

31 


244 

112 

68 

15 Mbytes 


12 

23 

350 Mbytes 


44 

18 


The main performance criteria for the DFTDS are: 

Front-end maximum input message rate 
Maximum message rate input to DFM 
Maximum response delay in any module 
Database queries 


180 messages/second 
100 messages/second 
1 second 
20 per second 


4,BAR p W A R £ and S OF TWA R E 

The DFTDS runs on a network of five DEC Microvax* 3800 processors. Each main module 
(i.e. FEP, DFM, DBM, UIM, SAP) is allocated to a separate processor. This ensures that 
there is no contention for processing resource between modules. Ethernet with Decnet* 
software has been used for inter-processor communications. This has proved to have 
considerable overheads when used for high volumes of short messages and on some routes 
messages have had to be blocked into larger packets to achieve required throughput. 

The DEC VMS* operating system and the DEC Ada^ compiler have been used throughout. 
Apart from the SSM and the encyclopaedic database server each module is a single Ada 
program which runs as a single VMS process. DBM is written in Ada but uses a commercial 
Relational DBMS (Sybase^) for storing the encyclopaedic data and performing queries. The 
Ada part of DBM interfaces to the SQL routines using the Sybase provided Ada libraries. 


1 Microvax, Decnet, VMS, Dec Ada are trademarks of Digital Equipment Corporation. 

2 Sybase is a trademark of Sybase inc. 


3 




5. CHOICE OF ADA 

Previous laboratory prototypes of the data fusion function had used a specially written 
blackboard framework, called MXA (reference (2]>, because no suitable real-time KBS 
package could be found at that time (1983); MXA was based on the Pascal language. This 
framework provided some elaborate set intersection mechanisms but would only cope with 
simple scenarios in real-time. At the beginning of the DFTDS programme a method had to 
found to achieve real-time performance with the data rates found in a real operational setting. 

A survey of available tools was carried out and three styles of implementation were 
benchmarked using a subset of a data fusion knowledge base with a test scenario. This 
benchmarking experiment is more fully reported and discussed in references [3] & [4], 
Briefly it showed that a 'pure' production system implemented in a LISP machine environment 
was far too slow whereas a hybrid production system - procedural language based solution 
using an AI toolkit specially designed for embedded real-time applications produced better than 
real-time performance. Even though good performance was achieved with this toolkit, only a 
conventional language solution using a blackboard style framework actually achieved the 
required real-time performance. Figure 2 summarises the benchmark implementations and 
results. 


System 

Hardware 

Time in minutes to process 
30 minutes of data 

Fraction of 

real-time 

ART 

Symbolics LISP machine 

600 

20.0 

MUSE 

Sun 4/260 workstation 

15 

0.5 

Ada Shell 

Microvax 3500 workstation 

3 



Figure 2 Benchmark Implementations and Results 


Ada was chosen for the conventional language implementation because it is the latest language 
specifically designed for real-time applications and on the results of some very simple 
benchmarks seemed to have no significant performance penalties providing a good compiler 
was chosen. Various compiler/machine combinations were tested using the data fusion 
benchmark and the DEC Ada compiler running on a microvax proved to be the best 
combination for speed, support and reliability. These results were obtained in the first quarter 
of 1988. 


fL KBS I M PLE ME N TATIO N. VS C SQ A D A 

In order to produce the Ada data fusion benchmark a blackboard style framework had to be 
developed. This proved relatively simple for a small rule-set but it was recognised that a more 
engineered version with diagnostic facilities would be required to construct a large knowledge 
base and an 'Ada Shell' was produced. Initially an Ada tasking approach was taken to various 
functions of this shell but this was found to introduce run-time overheads owing to the high 
input message rates required. The final versio n has proved very efficient and has remained 
largely unchanged over the two and a half year DFTDS development programme. 

A particular attribute of the Ada KBS approach taken is that the rules are coded directly in Ada 
making it a true KBS in Ada application. Apart from the excellent run-time efficiency that this 
approach gives it has also been found that the abstraction capability of Ada and the flexibility of 
a conventional language used in conjunction with a blackboard model, allows for an easier and 


4 














better designed implementation than the more common production system approach. The latter 
is driven by the need for exact patterns to be specified for the implicit rule firing mechanism to 
work whereas the rule firing mechanism in the Ada blackboard approach, although requiring 
more hand-crafting, is much simpler, flexible and efficient and results in more concise rules. 

A drawback in using Ada for the DFM is that a KBS demands a large amount of global data in 
the form of blackboard hypotheses, whereas Ada data handling concentrates on data abstraction 
and data hiding. The Ada compilation suite is not best suited to deal with this global data and 
this means that relatively minor changes to the blackboard specification result in prohibitively 
long re-compilation times - lasting an entire working day in some cases. 


IJ&AStiEU* 

Figure 3 shows a diagram of the components of the Ada shell and the blackboard elements that 
are part of the application. In normal operation the Scheduler takes the highest priority Event 
off the Event Queue and calls the appropriate Knowledge Source(s) (if any). On completion 
of the Knowledge Source control returns to the Scheduler and the cycle repeats. The 
Scheduler also checks for input messages and for delayed Events as part of its cycle. A Clock 
task maintains time and an Input task places input events on the Event Queues. 



«? 

d 


Blackboard 



Figure 3 Ada Shell Components 


Browser 

Terminal 


For development purposes there is a Browser task which can be invoked by typing control-C 
on the Browser Terminal. This action transfers control to the Browser task and stops time and 
further events from being processed. The Browser has commands for displaying the contents 
of the Blackboard and Event Queues, for setting breaks on time/events and for stepping single 
events. It also allows events on the queues iu be explicitly fired in any order, events to be 
removed and specific events to be inhibited or permitted. A DCL sub-process can be spawned 
from the Browser to provide access to the host operating system for viewing files, etc. With 
these simple facilities the action of each Knowledge Source can be closely monitored. 


5 
















A blackboard system has a number of components and these are represented in Ada in the 
following manner 


The Blackboard - this is a data structure consisting of hypotheses and links. Hypotheses are 
implemented as record structures and these can be easily specified in Ada Links are provided 
by set operations in a generic package. These operations allow links with a many-to-one, one- 
to-many and many-to-many relationships to be represented. 

Rules - these are written as if...then..endif constructs within a procedure. The use of a 
procedure allows rules to be called from one or more knowledge sources. Although in 
principle similar to production rules, the Ada rules tend to contain more functionality and have 
more complex actions than those typically found in other KBSs. Output, in the form of 
messages to other modules, is generated directly by the rules. This output includes copies of 
blackboard data and explanations generated on request from the UIM. 

Knowledge Sources - these are implemented as procedures which generally contain nothing but 
calls to rule procedures. In some cases it has proved convenient to provide some logic within 
knowledge sources for more 'intelligent' invokation of rules. 

Events - there are three types of event; input events which have a type and an input message 
associated with them, normal events which have a type and a hypothesis reference associated 
with them and, delayed t ents which have a type, a hypothesis reference and a time associated 
with them. 


The Ada shell operates as follows: 

An input event is generated for every input message and there is a one-to-one correspondence 
between input event types and message types. Other events are generated explicitly by rules to 
indicate particular changes to the blackboard or to invoke processing at a later time. In theory 
there could be an event type for every type of change to every type of hypothesis but in practice 
events types are only created as required to suit the knowledge source and rule structure. 

There are four normal event queues of different priority and the delayed event queue. The 
scheduler takes the highest priority event and using a look-up table calls the knowledge source 
applicable to the type of event. There can be more than one knowledge source assigned to an 
event or none at all; in practice there is usually just one since any rules that can potentially fire 
for the event can be put in a single knowledge source. 

The event contains either a message or a hypothesis reference to which all of the rules called by 
the knowledge source have access. In other words the rules are directed at the change in the 
blackboard and they then apply their exact conditions to attempt to fire. This mechanism 
means that there is no guarantee that a rule called by a knowledge source will fire and 
consequently some time may be wasted evaluating rule conditions that fail but the event 
mechanism is so simple and efficient that it easily out-performs more rigorous approaches such 
as the RJETE algorithm used in productions systems. 

Rules from different functions can be called from the same knowledge source if their firing 
conditions are similar thus implementing the opportunistic nature of the blackboard model. It 
would be possible to implement more complex scheduling but the simple system described has 
been found quite adequate for the real-time data fusion application. It has sometimes proved 
useful to invoke a rule conditionally depending on the result of a previous rule but this can 
easily be implemented within the knowledge source. 


6 











The knowledge base is specified in terms of Hypotheses and Rules; definition of events and 
knowledge sources is considered to be part of the implementation process. Rules arc written 
in a declarative style so that each one completely defines when and what processing will occur. 
A specification template has been designed (figure 4) together with a semi-formal language to 
ensure a consistent style of specification. The semi-formal language contains a range of 
keywords including 'if, 'and', 'actions’, and a number of verbs for various types of action. 
Each rule is restricted at the top level to one or more 'anded' conditions followed by one or 
more actions. Conditions and actions may invoke further operations which can be of arbitrary 
complexity. These operations are specified with the rules in a pseudo-code form because they 
contain important domain knowledge. In other cases the rule specification may use a function 
or procedure in order to keep the specification concise but for which the details of operation arc 
either self-explanatory or of a house-keeping nature unrelated to the domain knowledge; in 
these cases no further specification is given. 


Rule No RXXXnnn <name> 
(a' r mmary 
(\ -vdle Specification 
kuLE'RHWnnn <name> 
if <condition 1> 
and <condition 2> 

actions 


END RULE RXXXnnn 

(c) Assumptions/Limitations 

(d) Definition of Criteria 

(e) Supporting Operations 

(f) Hypotheses 

(g) Data Structures 


Figure 4 Rule Specification Template 


The summary (a) of each rule is an English version of the domain knowledge contained by the 
rule. The rule specification (b) is a more precise definition of what the rule does and it is 
required that the Ada code, although more detailed, follows the content and order of this 
specification, thus retaining the KBS philosophy of keeping specification and source code 
closely aligned. Part (c) is a comment heading under which any assumptions or limitations 
about the scope of the rule can be noted. Part (d) provides a 'definition of criteria'. This is 
used to reference more detailed specifications of any conditions used in the rule; Complex 
conditions or simply constants are generally expressed in meaningful words within the rule 
specification in order to keep it concise. Part (e) is intended for specifying any supporting 
mathematical operations used by the rule - in practice this is rarely used because such 
operations are usually not visible at the rule specification level and if they are, they arc mostly 
self explanatory. Parts (0 and (g) list hypotheses and other blackboard data structures 
accessed by the rule. This was originally intended as a means to trace rule access and hence 
interaction between rules but such analysis has still to be performed. 

Specification of the knowledge base, principally in terms of hypotheses, rules and operations, 
is contained in a document called the 'Acquired Knowledge-base Specification' or AKS'. 
This document is then used both for implementation in Ada and for validation of the 
knowledge-base by domain experts - it is the definitive reference for users, implemented and 
maintainers. Because the user interface to the KBS is also a very complex piece of software, a 


7 







separate specification has been generated to detail every window and interaction with the user 
and knowledge-base. 


9. PFTPS PROJECT STATUS 

The main development phase of the DFI DS is complete and the system including the data 
fusion KBS has been integrated and set-to-work. Current activity is concerned with working- 
up the system onboard the trials ship and tuning the knowledge-base to optimise its 
performance against real data from ship's sensors. 


A trials and evaluation programme has been formulated and has already commenced. It 
encompasses die following areas of investigation: 

• KBS Performance 

• Technology Issues 

• Human Computer Interface (HCI) 

• Manning and Personnel 

• Value to command 

KBS Performance involves the measurement of data fusion performance under a variety of 
normal and extreme operating conditions. This performance can then be compared with that of 
existing more manual systems, and the value and limitations of the KBS approach can be 
found. 

Technology Issues include all technical aspects of development and in-service support; the use 
of Ada is one such topic. 

The Human Computer Interface (HCI) has novel features for this type of shipbome system 
both in terms of its WIMP style and its KBS features such as explanations. Feedback from 
users who will be using the system under realistic conditions will be sought and will form 
valuable guidelines for future KBS procurements. 

Manning and Personnel issues will be examined to determine the impact which the advanced 
level of automated support enabled by KBS technology has on the level of manning, the skills 
and knowledge required and the training requirements. 

Value to Command addresses the impact which the quality o f outp ut from the DFTDS will have 
on the higher levels of command within the ship. If the DFTDS produces a more complete, 
accurate and timely tactical picture and assessment then this should result in improvements to 
the decision making process and hence to the whole command and control performance. 


10. LESSONS LEARNED 

At this stage in the programme the main lessons learned concern the development process. 
Those that relate to the use of Ada for KBS applications are as follows: 

Knowledge Engineering - Ada as a language has been found to be quite simple to use for a 
large real-time KBS and in some respects, notably run-time efficiency, abstraction, exception 
handling, strict typing, has distinct advantages over AI toolkits and expert system shells for 
engineered real-time applications. The drawbacks to Ada are that does not directly provide the 
KBS styles of programming and these have to be hand-crafted before knowledge engineering 
can start. It might be possible, of course, to design a number of general purpose packages to 
suit a range of Ada KBS applications. 


s 









DEC Vax Ada Experience - this Ada system has pro ved e xtremely reliable with very few bugs 
or limitations being experienced throughout the DFIDS development. It does, however, 
require substantial computing resources to support the development teams and as the software 
has grown, the re-compile times have become very long (several hours). This seems to be due 
to contention for access to central libraries. No doubt other Ada systems have similar 
problems with large systems. It is a particular difficulty with a KBS as a considerable amount 
of iteration in developing and tuning the knowledge base is inevitable and indeed part of the 
development philosophy. 

Performance - The run-time performance targets have been achieved though some optimisation 
has been carried out; the use of a run-time analysis tool (PCA) has proved very useful for 
identifying where most time is spent. Use of generics seemed to cause unexpected overheads 
and in some cases these have been removed. Run-time checking and exception handling has 
proven to be most useful in ensuring that the system continues running even when errors 
occur, the overheads in this checking seem surprisingly low. 

Ada Shell Facilities - Although rudimentary, the facilities of the Ada shell have proved to be 
extremely useful for developing the data fusion KBS. The small units of processing 
(knowledge sources) and simple scheduling cycle coupled with the break, step and display 
facilities of the Browser provide good visibility of the program operation, though it is intrusive 
and non-real-time. In fact the facilities would be beneficial to any Ada program whether 
considered a KBS or not Of course the facilities are not as sophisticated as an AI toolkit 
because the Ada language does not allow easy access to the program source code at run-time 
(though it can be used in conjunction with the source level Ada debug facility). Also, the 
display of blackboard data structures by the Browser has to be hand-crafted as the system is 
developed. If the Ada shell was integrated with the Ada debug tool then these drawbacks 
could be overcome. 

Ada Language Facilities - Ada is obviously not an AI prototyping language but as a means of 
engineering a large real-time KBS application it has proved quite effective. A few features 
could be added to make AI programming easier, such as: 

• Variables could have a 'nil' state; KBSs particularly deal with partial data sets and very 
large numbers of variables. To indicate whether a variable is set in Ada a further 
variable must be defined whereas in most AI languages a variable can have a nil' state 
to indicate it is unset 

• Objects; the DFTDS has used a rule-based approach throughout because rules are 
simple and reasonably predictable in processing terms which is important in a real-time 
system. However, it is recognised that Object Oriented Programme (OOP) is useful 
for some knowledge representation and has been used in some of our laboratory 
prototypes. Explicit support for OOP would be a useful addition to Ada. 

• Type Hierarchies; Ada has a rather inflexible system of types, sub-types and 
discriminents. It should be possible to define a hierarchical data structure and to wntc 
packages or procedures with any required visibility of that structure. Currently, Ada 
requires code to have full downwards visibility of the structure even though it may only 
need visibility of one level. An example of this is where software is required to handle 
messages without needing to know their content. A similar problem arose in the 
design of the blackboard hypothesis structure where there are a number of different 
types of hypothesis but general purpose links are required between them. Eventually a 
single type of hypothesis was defined with discriminents for the contents. 

• Atoms; For symbolic processing most AI languages have atoms' which are general 
purpose identifiers for arbitrarily complex structures. Ada has enumerated type 
variables, all possible values for which must be specified at compile time, and strings 
Strings are cumbersome in a strictly typed language and are inefficient for processing 





purposes. The DFTDS implements an Ada interface to a relational database; the 
database holds identifiers as strings and the interface converts some of these into 
enumerated types, where they match types in the rest of the system, and some it keeps 
as strings. The problem is that the strings are unchecked and inefficient and the 
enumerated types are inflexible so that simple changes to the database require changes 
throughout the Ada code. There seems to be a need for a run-time enumerated type 
which is held internally as a number but appears as a symbol at input and output 


11. FUTURE WORK 

As far as the DFTDS trials and evaluation programme is concerned the use of the Ada 
language, Ada environment and tools will be reported under the technology issues area. 
Further studies are p lanned into the knowledge engineering and knowledge base maintenance 
aspects of the DFTDS. These studies will formalise the methodology for using Ada for KBS 
which has evolved and will i nvestigate tools for assisting the maintenance of a large knowledge 
base. Now that the DFTDS rule set contains 500 or more rules it is becoming increasingly 
difficult to maintain the specification and carry out verification of changes. 


12. CONCLUSIONS 

The DFTDS project has proved that Ada can be used effectively for large real-time KBS 
applications with very little additional support software. 

A large knowledge base has been established and this is entering an evaluation phase which 
will report on all aspects of performance, procurement, support, HCI, manning and value to 
users. 

The experience with the Ada products selected has been good and some suggestions for 
improvement to Ada for KBS have been put forward. 


13. ACKNOWLEDGEMENTS . 

The help of Dave Shaw and Mark Jcffard in checking and commenting on this paper is 
gratefully acknowledged. 

This work has been carried out with the support of the Procurement Executive, Ministry of 
Defence, UK. 


14. REFERENCES 

[ 1] Byrne, C D, Miles, J A H, Lakin, W L, "Towards Knowledge-Based Naval Command 
Systems", pp 33-42, procs. of 3rd IEE C^I Conference, Bournemouth, May 1989. 

[2] Tailor, A, "MXA - A Blackboard Expert System Shell", pp315-333, Blackboard 
Systems, edited by Engelmore and Morgan, published by Addison-Wesley, 1988. 

[3] Miles, J A H, Daniel, J W, Mulvaney, D J, "Real-Time Performance Comparison of a 
Knowledge-Based Data Fusion System using MUSE, ART and Ada", Presented at the 
Expert Systems Conference, Avignon, 1988. 

[4] Miles, J A H, "Artificial Intelligence Applied to Data Fusion and Situation Assessment 
for Command and Control", Ph.D Thesis with Supplement, University of 
Southampton, 1988. 


*. V* 










APPENDIX C 


Validation and Verification of Safety Critical Knowledge-Based Systems 


Editor's Notes 


The United Kingdom's Defence Research Agency (DRA) has a three year program to 
study the validation and verification (V&V) of safety critical Knowledge-Based Systems 
(KBSs) with the use of domain dependent virtual machines. In the first year, a Data Fusion 
Language (DFL) was identified and formally defined and the requirements for a virtual 
machine to support the DFL were established. A virtual machine to support the DFL was 
designed and the design verified in the second year. A virtual machine prototype to support 
the DFL will be implemented in the third year. At the present time (year two), the virtual 
machine design is being verified. 

This article provides some useful insight into the potential of domain dependent 
virtual machines for V&V of large-scale Ada KBSs. This approach is being tested with a 
subset of the Ada KBS which is currently installed on the Royal Naval Frigate HMS 
Marlborough and descri bed in the associated article "The Data Fusion Technology 
Demonstrator System (DFTDS) Project". 


C-l 





Validation and Verification 
















This presentation concerned an investigation of the use of domain dependent virtual machines 
to aid the verification and validation processes carried out during the development process of a 
Knowledge-Based Systems (KBS). This virtual machine approach to KBS development may be 
summarised as: prototype KBS for solving one or more specific problems from a domain of 
interest; identify, from this prototyping exercise, a domain specific language (DSL) for expressing 
solutions to problems in this domain; implement a virtual machine that has this DSL as its source 
language; use this virtual machine to implement prototypes and deliverable KBS. The potential 
advantages of this approach include: 

• much of the development process is brought into the realm of conventional software 
engineering; 

• less distortion of domain knowledge than would arise if it was expressed in the knowledge 
representation language (KRL) of a development environment or KBS shell; 

• satisfying engineering constraints, e.g. required speed of execution, target hardware, etc., 
can be addressed within virtual machine design, independently of particular knowledge 
representations. 

Additional benefits may result if formal semantics are defined for the domain specific language 
and formal specification and development techniques are used to ensure that the virtual machine 
implements those semantics.The utility of a virtual machine approach is to be tested by the creation 
of a Data Fusion KBS, using a suitable subset of the knowledge-base of a large scale Knowledge- 
Based Sensor Data Fusion Technology Demonstrator System currently installed on a Royal Naval 
Frigate HMS Marlborough. 

The work began in 1 st June 1991, just over a year before this presentation and most of the 
work is being carried out at the Royal Military College of Science, Shrivenham, Swindon, 
Wiltshire, England. We are now at the stage of verifying our virtual machine design. By June 
1993 we will have completed a review into the first two years of work. This review is intended to 
assess the viability of our original concept and perhaps redirect the final year of the investiganon in 
the light of the problems we have encountered. 












Separate out those aspects of the system 


that can be developed using conventional software 

engineering techniques 

from 

those that are particular to the knowledge-base 

approach. 





This research item investigates the effectiveness of 
formally engineering virtual machines to support 
application specific knowledge representation 
languages. The objectives of this item are: 

• to being to bring as much possible of the 
development of KBS within the domain of 
conventional software engineering; 

• to apply the software engineering techniques 
associated with ‘Safety Critical’ software to 
appropriate parts of KBS development. 

• Thus to increase the effectiveness of verification 
and validation of such Knowledge-Based Systems. 










Verification and Validation 


Verification 


• The use of formal specification techniques in the 
design and implementation of the virtual machine. 

• The formal definition of the semantics of the 
supported application specific KRL. 

Validation 


The proof of properties of a system implemented in 
the application specific KRL that is simpler to 
perform than the direct formal transformation of a 
knowledge specification into an implementation. 



Representation Languages (KRLs) 


• The success of the virtual machine approach rests 
with their definition. 

• They will imply one or more relevant knowledge- 
based system paradigms 

• They will incorporate domain specific abstractions. 


6 






Naval Data Fusion Example 


TDS Like Application 
Naval Data Fusion Language 
Data Fusion Blackboard System Primitives 
Blackboard System Primitives 
Ada Code 












“Validation & Verification 
of ‘safety critical’ KBS” 

Is being done under a 3 year contract by the Royal 
Military College of Science at Shrivenham. 

The work commenced on the 1 st June 1991 and is, 
therefore, due for completion by the end of May 
1994. 


8 





Year 1: 

to identify and formally define a Data Fusion Language for 
Naval Tactical Data Fusion, and to establish the requirements 
for a virtual machine to support this Data Fusion Language. 

Year 2: 

to produce a verified design, using appropriate structured and 
formal techniques, for the virtual machine to support the Data 
Fusion Language, and to animate the design to validate the Data 
Fusion Language. 

Year 3: 

to implement a prototype virtual machine to support the Data 
Fusion Language, and to evaluate its utility for Naval Tactical 
Data Fusion and the ability of the approach to provide high 
levels os assurance for knowledge-based systems for domains 
where reliability is regarded as a key requirement of those 
systems. 






First Year 

(June 1991-June 1992) 

V Familiarisation - with the ARE Technical Demonstrator Programme 
and Data Fusion Technical Demonstrator System. 

V Review Formalisms - vdm; z ; [b ; j csp r ccs,* 3 obj [ and 

similar methods 3 and Scott«Strachey denotational semantics. 

V Specify Subset of TDS Knowledge-Base - delivered in 

English, VDM and Ada form. 

V Identify Data Fusion Language • postulated in terms of a 

BNF syntax. 

-> Define Formal Semantics of the Data Fusion 

Language • taking slightly longer than anticipated but a complete 
definition will be provided - almost complete. 

X Investigate Non-functional Requirements - postponed 

after an initial look. 


10 







Definition of Data Fusion Language 
Formal Semantics 


• No one formalism sufficient for defining the DFL 
semantics. 

• VDM for the semantics of the parts of the DFL 
used to define the blackboard structure. 

• CSP for the semantics of the parts of the DFL used 
to define the control structures. 

• Validity of the particular VDM/CSP mix will be 
demonstrated. 


11 






Not fully investigated because: 

• Priority given to the definition of DFL semantics; 

• Available time limited; 

• Initial investigation indicated problem even more 
difficult than originally seemed. 












Second Year 

Identify Virtual Machine Design Approach. an 

investigation of structured and formal methods to see which are applicable 
and the tool support which is available. 

Design Virtual Machine • design will comprise an architectural 
model and a formal specification defining that model. 

Verify Virtual Machine Design * it is unlikely that fun 

formal verification can be brought to a logical conclusion within the cost 
constraints of the project. However it is hoped that sufficient progress will 
be made to establish what may be achievable in this area. 

Animate Virtual Machine Design - by translating the formal 

specification for the virtual design into an executable language. 


Review Data Fusion Language • so that amendments to its 

definition can be made in the light of the design, design validation and 
design animation of the virtual machine. 





Third Year 

Identify Virtual Machine Implementation - a review of 

languages and tools suitable for the implementation of the virtual machine 
on an available hardware such as a Vax or Sun. 

Implement Virtual Machine - testing win be based upon 

conformance to the formal semantics of the Data Fusion Language and the 
virtual machine design (this will be the largest single task of the project). 

Evaluate Virtual Machine - In order to evaluate the utility of 
the virtual machine approach, a different subset of the TDS knowledge¬ 
base will be identified and translated into the Data Fusion Language - a 
final report on the utility of this virtual machine approach will be generated 
bringing this contract to a close. 


14 









End Products 

• The Virtual Machine Prototype. 

• Assessment Of The Virtual Machine 
Approach. 


15 







APPENDIX D 


Embedded Real-Time Reasoning Concepts and Applications 


Editor’s Notes 

Boeing has successfully implemented several intelligent real-time embedded avionics 
systems with the Ada programming language. These systems include a Tactical Cockpit 
Mission Manager (40 KSLOC of Ada, 250 rules), a Search Area Planner Tool (45 KSLOC of 
Ada, 300 rules), and an Automated Sensor Manager (153 KSLOC of Ada, 1,181 rules). This 
information is in these proceedings, but 1 wanted to emphasize that these applications are 
operational AI with Ada applications totaling of 238 KSLOC that implements 1,731 rules of 
complex reasoning based avionics systems. 

Boeing developed these applications with an innovative approach that combines the 
"engineering" rigor of conventional software development with Al rapid prototyping 
techniques. Ada Real-Time Inference Engine (ARTIE) is a tool which provides an 
interpretive development environment and a small, fast embeddable inference engine for 
runtime performance. ARTIE offers an innovative approach to rapidly prototyping 
embedded real-time reasoning software with an interpretative development mode and an 
automatic code generator for generating embedded real-time code for execution on the target 
platform. Workshop participants were in mutual agreement that interpretive tools such as 
ARTIE are a valuable asset for real-time embedded systems prototyping, development, and 
debugging. 

AI Topics: Cooperating expert systems, forward chaining, iteratively recursive inferencing 
Domain Area: Intelligent Avionics Systems 

Language Interfaces: A Pascal inference engine was developed in 1987. 

Project Status: Test and evaluation 

Size of Ada Source Code: ARTIE is 25 KSLOC with associated tools and the 

embedded inference engine is less than 3 KSLOC; 

Avionics reasoning based applications total 238 KSLOC 

Number of Rules in Knowledge-Based System(s): 1,731 rules in 3 Ada applications 

Design/Development Methodology: Iterative prototyping 

Hardware Platforms: Apollo 3000,4000, and 590; Sun 2/60, 3/60, and 4/60; Digital 

Equipment MicroVAX and VAX; Silicon Graphics IRIS 


D-1 






Real-Time Embedded Reasoning Rick Wilber and Rob Ensey 



October 21,1992 Boeing Defense & Space Group 








Agenda 

Overview Embedded Real-Time Reasoning? 


CL 

0> 

c 

P, 

U oxi 

c/5 © 

£ 5 

QJ T3 

to ® 

CO a$ 
OX) 5 

c ^ 

*£ w> 

o .£ 

C/J 

CO C/3 
<U <L> 

■8 £ 
XJ c 

*8 | 
X> 

£ Q 

rjj UJ 

<u 

« W> 

£ *o 

.S3 CJ 

*7 ■? 

73 ® 
o c 

C* *4 


1/5 

</5 

0) C/5 


ha r 

fik H .£ 


C W 

o> r: 

£ fc 

g u 
a) .£ 
D W) 
c 

& W 

£ y 

© 

o h, 

CO ,<L> 

U-* 

*o c 

<u t—< 

Srt © 

M .§ 

cu H 
oo jl, 
*0 eo 
O o 

£ ^ 
O 03 
C X> 

us < 


OJ 

os S 
e s 

.5 03 

f- o 

I s-a' 

8 o 

* SP 

*o £ 

a> 

XJ "X 
X3 ^ 
2 C 

X) o 
E To 
UJ .52 


o o S 

© g 
g H c 

o u j2 

2 g cl 

- c <y 


C/5 TD 

I s 

™ « 

W c 

=a o 

CL 

< • 


CO Va " 

2 g a, 

_ c <y 

§ 2 3 

‘co ^ 5 
.52 co K 

S £ g 
_ < £ 

5 -g H 

O eo To 

eo o ^ 
h W ttl 


d> 

OX) 

CO c/3 

c c 

CO CO 

£ E 

o -g 

S£ « 

§ 00 


22 on 
eo w 


October 21,1992 Boeing Defense & Space Group 








Embedded Real-Time Reasoning Systems 

Why? 


c /3 Z2 

OD c 

~ o 

•= u 

CO c 

& ?. 


.a -Q 

c -o o 
O qj hr 

> 2? * 3 

<■ ® cr 

x OC 

pu 0> **“ 
£ x> 
o - r 

u S 5 

2 2-; 
3 ec ii 
o“ c3 tu 

S o § 

C .« tfl 
O <*3 ■- 

•2 tfl > 

.SS s te 

s £ £ 

W O <0 
Cd C /3 *3 

e := S 

O dd < *~ m 
rj E O 
W § CO 

r- 13 

5 cx t« 

D w 3 

•2 s 5 

© cd O 

2 > o£ 


_ 

.5 o 

r~ «3 

o «* 

GO « 

cd 0 £ 
CD 

a: g 

-d . 5 
<u e— 
.ri ;7 

£ 

•== <u 

^ o« 

^ C /3 

S T2 
> « 
d £ 

*d cd 

> Q 
2 c 
£ .2 
£ cd 

e e 


C/3 

>V 


cd 

Q DO 
w c 

5/5 'Z 

a 

*—» CO 

1 2 
C c 
JS 5 

< *55 

* 

C/3 CD 
C CD 

gd Q 

4 —* 

C/3 *0 

>> c 
CO cd 

too too 

c c 

* 

c c 

o o 

C/3 C/3 

cd cd 
0) CD 

OC OC 

CD -O 

£ <D 

-o 

E—! *0 

. % 

Cd r* 

cd E 


c 

cd 

« E 

c & 
§ O 

E CD 

c > 

O « 

*t Q 

aj 

E3 l_ id 

E £> 


0 

+—* 

< 

oe: 

T5 

CD 

XJ 

l u 

£ 

t— 

0 

DC 

CD 

T3 

• 

1^ 1 

*gd 

tS *5 

>3 

O 

*-> 

CD 

cd 

T3 

CD 

X5 

E 

't: 

(D 

P-t 

> 

2 

CL 

CD 

D LP 

tL 

w 

• 

• 

• • 


W-I ,75 

toO 2 

e 

'E 

0 *2 
C/3 cd 

cd Cl 
cd cd 

oc u 
*§ E 

s g 

g» I. 

•c ® 

CD CD 

2 > 
C CD 

‘So Q 

c <u 

PJ *= 

. cto 

^ £ 

cd <t: 

-g O 

§ ^ 

CD 

CO > 

ft 3 -*—# 

C cd 
.E u. 
X> to> 

E - 

1 O ts 

U S 

• *■* 

>v CD 


* cS 


£ 

o 

ffi 


Development and Processing Techniques 

Use Iterative Development Process: Concepts - Prototypes - Applications 



« 

'r 


£ c 

Pu W 


cto W) 
£ c 
<4— 

O T3 
on o 

~ *—> 


c oo 
o 


g>« 

S3 ffi 

O »> 

u c 
o o 


CJ o T3 

•— o 

£ > 2 

J3 C T3 

*C £ -g 

o_E £ 

JtoO *5 (£} 

< o .5 
S .SP 4) 

2 - i 

o £ c 

3 o £ 

*3 tto ,© 

C/5 <U— 

p* *—■ U. 

§ 2 # 

u - °- 

_r <u 
<u £ c 
00 o c 
cto m S rZ 

3 3 C7 
&0 o -1 
CO eto 

c5 x o 

ju o: 


Q (iT) 

£ £ 

CX 3 

© O 
o 3 

> is 
o 00 

Q o 

<u *r fl 
u- too 

3 O 

£ J 

£5 X 
O O 

^ u 

73 £ 
g o 
.2 U 

c o 
S xj 

> o 

§ o 

U S 


V > JC 
to > o 

o o 
00 s= H 
^ ^ too 

T3 w C 

£ •& '•* 
ca too 3 

« ^ S 

00 too g 
■o e .2 

o \c c/3 

•> c '5 

> o (U 

= £ Q 

^ o- -g 

W d) C 

o 0* ^ 


X- d) Ud 

r= 5 ^3 
2^o 

.2 c c3 

£ .2 6 

Coo 

< £- 3 

to U < 


c/2 O 

£ £ 

B -a 

C/3 

>» C3 
00 <U 

~o £* 


X>. U, 

too <D 


O | 

c Z 


• Lack Engineering Rigor 

• Require Specialized Computing Platforms, Languages & Engineers 




Embedded Reasoning vs. Conventional Systems 




<D 

JE 


O £ 

5 £ 

o c: 
« o 

CQ CO 

C/2 — 

E 2 
a C 

£ ° 

CO u 

| g? 

c •* 
o _5 
> !> 
c 

o c 
U .2 
g .22 
5 o 
o a> 

*= q 



i- 

£ 

•o 

c 


GO 

o 


co 



5 

GO 

c 


GO 

C/3 



c 

£ 

<D 

C/2 

'£ 

o 

on 

co 

<u 


■ »—4 

-X 

eO 

s 

CO 



c 


on 


_o 

E 

3 


_cn 

*£ 

o 

o 

£ 


o 

<U 

cn 

o 


Q 

CO 

0£ 

c 

o 

3 


o*- 

O 

C/3 

XJ 

< 

C 

• m* 

on 

UJ 

T3 

T3 


.2 
*—i 

CO 

CQ 

O 

X) 

E 

l 

u. 

0> 

3 

o 

o 

X 

u. 

• 0—* 

<L> 

x: 

w 

CL. 

PJ 

P 







These Networks are Coded as Conditionals with Numerous Flags and Switches 
which are Difficult to Develop, Understand and Maintain 


















Knowledge Based Approach 




o •z 

o Q 
> — 
o cn 
c 

t: .2 

£ s 

CkO OJ 

« .£ 

*-> c/; 

C3 c o 
*c O ’O 

O — ° 

c /2 C3 f) 

— 

O O cj 

cL°^ ’ob 

X o o 

u z: j 

C/2 CS X 
— ~ CD 

--Ed. 

| 

o | U 
_c «* 

H CQ Jj 

<u — 

W) CL) 

1 3 

I u 

C CL) 
* .£ 
«u W) 

c 

- W 

.E <u 


o $3 

w «- 

u A) 

2 1= 

"So 

X5 w 

< J 


s 


October 21,1992 Boeing Defense & Space Group 








Real-Time Embedded Reasoning Rick Wilber and Rob Ensey 





O 

o o 
c c 

rtl 

jZ DO 

c 


V 

CuO 

T3 

o W) 


C 03 
V! 

if U 

C *0 

03 

c/3 re 

u E 

re c 


mmmm® 


<L> 

O C/3 

re re 
tu CQ 


o 

00 

T3 

O <U 
mS. c/3 

> re 
O CQ 

c 


Oi "O 
_ 0> 


u 

? c 


.s I I 

o p re 

c E *- 

5 r ° ^ 

h U — 


Knowledge Driven 

• Fact Assertions Automatically Focuses & Drives Appropriate Code Execution 











Knowledge Based Software Development 

Rapid Prototyping 


as 2Z 
<U <L> 4) 

.ir c 
•os* 

^ cr <u c 


*- c 

X 5 


B - 
o £ 
Q <L> 

bp Q 
c <u 

o £ 
> cz? 
W o 

-o 00 

c <u 


«3 r>S 

>>-o 00 

CO C <L> 

5 o < .t 
‘5b ^2 ? 
■ Oc s 

» J <D *- 

x £ — 

O <D 3 

D.-I .2 

£ cr i~ 
o a> c 

uoi u 


*= o .3 

<3 — 


= 6 5 
CQ c 

-t: u- 
&0 0> 
c o a. 

£2 h 

o .a g. 

e o " 

i j s 

s I -i 

Gu’ZZ 
c3 T o> 
q/ c x: 

,o : 


£ w <u 

o 3 g 
= g* -o 

1 £ 

W-» k. 

£ O ~ 

£ p. w 

& §- £ 
c co a 


03 

U &0 U 


*2 c 

o 


r* 

3 C3 
C/3 1) 

C/3 J- 

<d a 


o o o c 

w 3 E ~ 

© < o- . 


CO 

a 

rs 03 

O o 

<D 3 
_C T3 

2P O 00 

.© o c 

“ £ & 
o « S' 
c -o o 

£ < p 

£ o a“ 
c ~ _. 
•— >> !2 
o ~ Q, 

£ O 03 


3 O CL 

os w> ©• 

a)O r 5 
x: J <*> 

to f2 o 

8 S z 

3 ?> 03 

*o C <L> 

o o o 
oi U Q 


October 21,1992 Boeing Defense & Space Group 





Knowledge Based Software Development 

Requirements » Control Logic -► Emulation -► Code Generation-► Object Code 



• Supports Tighter Coupling Between the Coders and Engineers 

• Allows Shorter Development Time 

• Eliminates AI Code From the Final Product 

October 21,1992 Boeing Defense & Space Group 














Ada Real-Time Inference Engine (ARTIE) Tool 

ARTIE is the Main Tool that Facilitates Embedded Reasoning Software Development 


-C 

tX) 

3 

2 

Q £ 
<% H 

£ g* 

^ & 

CL O 

O P 

g £ 

Q ~ 

On 
bO cd 

.£ c* 

d> c« 

o tr 


«j 2 

W w {3 

0d 9 H 

35 ^ O 

d> 33 C—I 

«o « ^ 
T3 y u 

S 'em 

w £ ^ 

8 g is 

35 is 3 

•r 3 o 

g os u 

t - 


• • C3J 

■£ B 
W V) 


01 C*3 

33 P 

O g 

03 >i 

33 C/3 

< r 

w <u 
d> O- 

*5 ^ 
*§ ffl 
tC <L> 
O > 


3 

C* 

o 

8 2 

OO 03 


UL O 


33 £ 

C CD 

< CL 
^ O 

d> o 

S U 

-2 <*> 
33 *-* 

■g o 

p & 

C 3 

UJ C/3 


C/3 .3 
CD — 

eS •§ 

CD g. 
& U 

1 f 

S ° 

© 03 

c £ 

«■§ 

.9* < 

•75 w> 

3 3 

S -g 

-s>e 

o o 

j= J£ 

C— <D 

^ > 
>■* a> 
.3 JJ 

V- 

C3 c/3 

l.i 

II 

w d> 
35 *3 

> = 

2 g 

A. — 


ARTIE with all associated tools (parser, interactive user interface, debug/ 
monitoring tools, etc.) 25 KLOC 







.a u 

c /2 

o ■— 

—1 -o 


w <u 
£ 'O 

•— o 

T3 U 



.2 w) 

> T3 
< ^ 
T3 ^ 

d> O 
50 C 
«* V* 

ro **< 

j— 

W) O 

.2 u 


'5 £ 

w r; 

C 

O 

u s 

c/3 W) 

>> ^ 
.d CO 
>< * — 
a <i> 

cu £ 


o *§> 

£ 

3 


C/2 Q 

o 

O 

o 

C9 J 

U 

> 

‘5b 

W >t.... 

DC O 

<u 

x: 

o 

X 


>< 

w 


X 

« C 

<—. 

o 

u-, 

o 


o- 3 
6 § 
o c 

to 

o 

4-4 

co 

O 

XT' 

Cu 

£ 

o 



U < 


October 21,1992 Boeing Defense & Space Group 




Technology Development Time Lines 



October 21,1992 Boeing Defense & Space Group - 13 - 









Demonstrated Technology Applications 



October 21,1992 Boeing Defense & Space Group - 14 - 









Demonstrated Technology Applications 



October 21,1992 Boeing Defense & Space Group - 16 - 












Automated Sensor Manager Overview 


i 


X 

U 

s- 

d 

<D 

C/3 oo 

<—* fj 

-C fco 

GO b 
• — os 

5= H 

j3 2 

« *§ 

£ <5 
C o 

• o 

« ,2 

<u PC 

& -o 

GO C 
3 03 

O <y 
£ rzL 
o •£ 
c 5 

£ S 

< o 
c 

£ ° 
• • <L) ^ 

U CO S 


r \ * 

W 

£ g 
<2 


o 

r _ V2 

52 c 
o *> 

00 C/3 

g 

c/3 3 

« S 


~ 3 

I < 

^ C 
6Jj 03 

.£ T3 
on 3 
3 03 


3 

Q. 

£ c 
o o 
U £ 

<5 W) 
&o 5 

03 C 

c 2 

03 ^ 

l'i 

e .£ 


T3 T3 
<U <L> 
•*—> •*—> 
03 03 

£ £ 

o o 

*-> *—• 

3 3 

< < 


oo o> 
C (V 
0> *** 
J>0 T3 

— w 

T3 3 
C 3 
03 -O 


o rj 
ft* r 


js c/3 
o 


■o r; 

3 r - 

c5 

O- 03 
X fj 

cu os: 


Advanced Man-Machine Interfaces 





Automated Sensor Manager Overview 



October 21,1992 Boeing Defense & Space Group -19 







































Automated Sensor Manager Overview 



October 21,1992 Boeing Defense & Space Group - 20 - 














October 21,1992 Boeing Defense & Space Group .21 
















Real-Time Embedded Reasoning Rick Wilber and Rob Ensey 


<N 




C/3 

3 

o. 

c 

T3 

i— 

03 

O 

X 

>% 

<U 

JU 

X) 

03 

E 

£ 

03 

i- 

W> 

o 

!_ 

CL 

C/3 

o 

C/3 

D 



Provides Facilities for Storage and Retrieval of Multiple Freeze Frame Sensor 
Images 

















































Real-Time Embedded Reasoning Rick Wilber and Rob Ensey 






1> 

>> 

UJ 

C/3 

T3 

O 

a 


C/3 

C 

O 

JJi 

*JE 

D- 

ea 

u* 

o 


o 

£ o 

w eg U 
Q. jc 

C/3 <U *- 

5 6 '“ 


o 

60 

C3 

c 

a 


o 

C/3 

c 

o 

00 


C/3 

<u 

C/3 

c/3 

03 


u 


C/3 

_u 

*JE 

Cl 

03 

u. 

o 


C/3 

<u 

60 

C3 


>> 

J33 

O- 

C/3 


C/3 

C/3 

<D 

C 

£ 

03 

£ 

< 

C 

o 


03 

3 


O 

C/3 

c 

Q 

o oo 00 

j_ 

j= 

It - • • 


N 

v. 

V 

•o 

a 

w 

© 


Sensor Manager Reasoning & Targeting Displays 



















Real-Time Embedded Reasoning Kick Wilber and Rob Ensey 



October 21 , 1992 Boeing Defense & Space Group 
















Real-Time Embedded Reasoning Status 


«<5 

b 

s*3 

•c 

o 

as 

•b 

B 

« 

I 


3 


B 

! 

OS 

I 

a 

Si 

E 


2 


C/3 

4 —> 

c 

cj 

£ 

x 


60 

C 

‘E 

o 

C/3 

03 

4) 

Q£ 

*o 

4> 

C/3 

03 

CQ 

03 

-a 

< 


DO 

g 

*5 

o 

C/3 

03 

4> 

a: 

•o 

cj 

T3 

T 3 

4J 

X) 

£ 


C/3 

CJ 

3 

_cr 

'£ 

X 

cj 

E- 

c 

CJ 

£ 

a. 

_c 

cj 

> 

CJ 

Q 

*o 

cj 

C/3 

03 

CQ 


C/3 

CJ 

CJ 

60 

’E. 

£ 

T3 

£ 

o 

CJ 

CJ 

H 

i 

03 

CJ 

o 

< 

T3 

CJ 

a: 

G 

CJ 


4-4 


X 

C 

03 

i— 

60 

CJ 

•*—< 

C/3 

C 

E 

i 

u 

o 

£ 


<4—. 

W 

CJ 



a 

• 

• 


60 

C 

*33 

C/3 

cj 

CJ 

o 

u. 
CL 
i— «rj 
« CJ 

a cj 

£ e- 

e- 5/5 

CJ JZ 

G .BP 

c ^ 

03 

C “■ 

11 

60 2 
c 

’a. 
o 

4—t 

2 

CL 

“O _ 

o 

« = 

QC < 


cj 

c 

CJ 

a 

CJ 

*a 

o 

U 


c 

3 

C/2 

<rv 

03 

O 

W 

o 


60 

C 

"33 

C/3 

CJ 

CJ 

O 


03 

C 

.2 

•4—* 

C 

o 

> 

c 

o 

U 

13 

C 

03 

< 

*n 

x 

>> 

ac 

CJ 

> 


CJ 

oj 15 
C. v- 
<*-. o3 
CQ CL 


C/3 

e 

o 

a 

03 

CJ 


S £ 
o 

£ 


C/3 

a 


•r o 

« £ 


PQ 

CQ 

H 

0* 

60 

G 

’£ 

o 

C/3 

03 

<J 

oc 

T3 

C 

03 

60 

G 

"35 

C/3 

CJ 

cj 

o 


T 3 

4) 

3 

X) 


C/3 


O 

. C/3 

c 

(U 

C /2 

«K 

2 

3 

O 

QC 

60 

G 

’£ 

c 

03 


c 

o 

*cw 

C/3 


T3 

4) 

"O 

T3 

CJ 

X 

£ 

CQ 

CJ 

£ 

P 

i 

C3 

4> 

a: 


03 

CJ 


60 

.£ 

'£ 

3 

03 


CJ 

4-4 

3 

O 

QC 


60 

E 

G 

CJ 

60 

03 

G 

03 


C 

o 

"E 

C/3 


03 O 

O C 

PQ 4> 

C £ 
>-V CJ 
60 
03 
C 

4- 03 

2 S 

4-^ 

C = 

o .2 
£ £ 


T3 

CJ 


cj x 

Q 5 


CL 

H 

QC 

C /2 

T3 

CJ 

C8 

£ 

o 

3 

< 


CL 

< 

c /2 

CD 

o 

"o 

o 

H 

s- 

4) 

C 

C 

03 


03 

CJ 

t- 

< 


03 

CJ 

c /2 

T 3 

CJ 

CJ 

> 

”cj 

Q 


C/3 


60 

C 

’£ 

c 

=2 5 » 


— 

3 

C 


-a 

G 

03 

C/3 

o 

O 

E- 


CJ 

X 

C /2 


CJ •— 


CJ 

03 

P 

T3 

CJ 

■*-» 

CB 

i— 

60 

CJ 


60 

C 
• «—» 

G 

O 

C/3 

03 

CJ 

Q£ 


£ 

cj a 
X ^ 
L- 


3 

UL 

u« 

,o 


CJ 

60 

03 

C 

03 


G 

O 

'vi 

C/3 


03 

CJ 


G 

_o 

c5 

i— 

60 

CJ 


w 

H 

Qi 

< 

ffl 

QQ 

H 

QC 


C/3 

C/3 

CJ 

CJ 

CJ 

3 

C /2 


October 21,1992 Boeing Defense & Space Group -2 5. 



Ongoing Activities 

Continue Refining and Applying Embedded Reasoning Concepts 


I 


H u. 
a 
txo 

u g 

CO 5 

£ s 

U« i- 

£ ° 

DC c/2 

^ C 
CO w 

U 5/3 

< CQ 

£ "T 

» <« 

-3 z jz 

c mm TJ 

O ^ c 
7 : U ^ 

O vT PQ 

O C* 

H 2 o 

CJ W v_ 

d. C •£ 

^ u ° 

q yu 

O <L> 3 
4. 5/3 *zv 

Dm S3 00 

ffl - 

« 7. 

d. <u h 
O <*5 **3 
jr. —-> cc 

fli 

> w CO 
d> d r- 

Q g o 

*2 5 H 

|«Q 

u3 o°r 
ts S:Q 

03 3 CO 

Du CO W 


c 

o 

tzs O 

p. C/2 

.2 

w c 

5 o 


r < 

§ o 
c 

o « 

u 2 

u CD 

'§> 3 

J -g 

d> o 

.£ J 


C/3 

C/3 O 

O 0 - 

h£ 

r-s 

CJ -O 

'5b ^ 

o ~ 

j § 

—H 

S o 

H* 
© © 
y. S3 

00 CQ 

C C3 

'3 w 
C C3 

o n 

C/2 4-1 
03 —. 
d> 03 

c 

~ .2 

cu 3 

C3 J2 
*T3 d> 

< CtD 


S3 

d. c 

3-c 

< S 

bo g 
.S Q£ 

c ^ 
o 

C/3 M- 
C3 C 

d) o 
«£ a; w 

E _ & 
d> E .2 
to £> c 
>% «s 3 
co >> g 

T3 ^ E 
£ = o 

rd c/3 

u. d> it) 

328 

Q si 

^ d; °r 
+ o S3 
U £ e 
S3 55 ^ 
-o CQ fl r 

< h § 

^ ^ C 

« j= 2 

X3 .d .£> 

2 £ o 

5- C-M 

o c ^ 
d O £S 

s 3 s 

o 

11 s 

d. £ 0 
O *-H 

• 7 * x: 3 
d) C/3 O 

> •= CO 

<U .E d) 

Q tu dJ 


3 C/2 d. 

c d> O 

E 71 
55 J 2 > 

- o 0 

53 « a 

e 0- y 

C ^ u- 

cct C CT3 

W 1 o 

S c co 

H 2 <u 

r/ E ~ 

< o 0 

^ O 

.22 Q o 

O w 00 

o c> ^ 

H 3iJ 1 


2 

O y 


S3 

d> 


W C^3 

u <£ = 

4- ^ C3 

° P > 


d) ^ 

C e c 

V2 d) ^ 

5 o g 

owe 

« O <g 

o x: w 

a •? t 
c .5 3 

kO Pm Dm 


Exploit the Technology in Depth on Current Projects 












APPENDIX E 


Training Control & Evaluation (TC&E) 

Editor's Notes 

BBN has successfully used an iterative prototyping approach to perform requirements 
analysis, design, and Full-Scale Engineering Development (FSED) for a 70 KSLOC 
Artificial Intelligence (AI) application. This application. Training Control & Evaluation 
(TC&E), is a valuable example of the success that can be achieved by rapid prototyping AI 
applications with Ada. One of the most difficult tasks in a rapid prototyping requirements 
analysis activity is the transition of the legacy prototypes and knowledge to the FSED. The 
TC&E experience offers some valuable insight into a successful transition of prototypes from 
the requirements analysis to a FSED for a DOD-STD-2 167A project. 

AI Topics: Blackboard architecture, goal-setting, path-following, progress tracking, obstacle 
avoidance, target selection 

Domain Area: Training, simulation and modeling 

Language Interfaces: C and 4GL 

Project Status: Fielded 

Size of Ada Source Code: 70 KSLOC 

Design/Development Methodology: Iterative, rapid prototyping 
Hardware Platforms: Sun 


E-l 



Training Control & Evaluation (TC&E) 


Dan Massey 
BBN 

Cambridge, Massachusetts 
617-873-3515 

BBN recently completed development of a major distributed simulation system 
(called AGPT) for the German Army. This system was built in Ada, and includes a group of 
CSCIs (abo ' 70 KSLOC of Ada) which support the instructor's interface to the system and 
provide interactive control over simulated elements of a virtual environment which are 
endowed with the ability to adapt and react to a changing tactical situation in an "intelligent” 
manner. This part .;f AGPT, called the Training Control & Evaluation (TC&E) segment, is 
based on a segment of the SIMNET system previously implemented in the US for DARPA, 

The original SIMNET implementation (called Semi-Automated Forces, or SAF) was 
built as a prototype in LISP on Symbolics workstations and gradually ported to C over a 
number of years. The present implementation of SAF is about 300 KSLOC. These program 
sizes are not comparable since TC&E includes functionality not present in SAF, and vice- 
versa. In addition, about 65 KSLOC of C libraries (counted in the SAF total) are used in 
TC&E to support certain system housekeeping functions (network connections, matrix and 
quaternion math, real-time terrain analysis) that were common to both systems and for which 
assured consistency of implementation was deemed to be very important. 

Although the "higher-level cognitive functions" simulated in TC&E are entirely 
written in Ada, including such functions as goal-setting, path-following, progress tracking, 
obstacle avoidance, target selection, etc., and involve the systematic application of a set of 
rules (some impletn. ■'ted explicitly as Ada procedures and others provided in a more general 
rule definition language, the ability of the system to operate in real time does depend on the 
fact that the most computationally intensive parts of terrain analysis (computing the lines of 
visibility surrounding a point in the virtual world) are implemented in carefully crafted and 
tightly coded C. 

Most of TC&E Ada (about 80%) was built bottom-up, prior to agreement on either a 
system specification or a definite detailed design. Essentially, the core of TC&E is a rapid 
prototype, written in Ada, which has been subsequently refined through a series of 
incrementally enhanced releases. During the early phases of development (prior to 
agreement on the system specification) a number of pre-release versions of parts of TC&E, 
up to about 50% functionality, were demonstrated and evaluated in depth with the client to 
help in finalizing the specification. 

The TC&E prototype (about 80% functionality) became an operational definition of 
segment design that was used in the full-scale engineering development of the production 
code. Through an agreed process of CSU documentation and test, large parts of the 


E-2 











prototype code were formally "adopted" into the final product. Other parts were significantly 
reworked to improve testability, reusability, and reliability before adoption. Only about 20% 
of the TC&E segment code was produced de novo during FSED. These pans, largely 
enhancements to the prototype backbone, were specified, designed, and documented through 
a relatively formal engineering change process. 

We consider that the entire prototype development phase of TC&E (which 
represented more than two thirds the calendar time and labor to obtain the final product) was 
a requirements analysis activity (in the sense of Royce’s water-fall life cycle) and covered the 
inner cycles of a spiral development process (in the sense of Boehm). 

TC&E Acronym List 

CSCI Computer Software Configuration Item 

CSU Computer Software Unit 

DARPA Defense Advanced Research Agency 

FSED Full Scale Engineering Development 

KSLOC Thousands of Source Lines of Code 

SAF Semi-Automated Forces 

SIMNET Simulation Network 

Training Control & Evaluation 


TC&E 




appendix f 


Ada 9X Issues for AI Systems 
Editor's Notes 

Henry Baker chaired this panel at the workshop and led some very thought provoking 
discussions about Ada 9X issues for AI. Henry describes the classic implementation 
characteristics of traditional AI programs -* late binding, large address spaces, extensive use 
of shared memory for communication, extremely large programs, very dynamic problem 
spaces, complex and non-homogeneous data structures -* and offers suggestions for an AI 
Annex that includes procedures as parameters, a pragma Garbage_Collection, provides more 
general type initialization, generic types, and type instantiation parameters. His issues paper 
and briefing are titled Ada9X Issues for AI Systems . 


F-l 




Issues paper for Ada/AI/RT WG Workshop, Summer '92 SigAda Meeting, June 24-25, 1992. 


Ada9X Issues for Al Systems 

Henry G. Baker 

Nimble Computer Corporation, 16231 Meadow Ridge Way, Encino, CA 91436 
(818) 501-4956 (818) 986-1360 (FAX) 

We must offer suggestions to the Ada-9X Committee for allowing/enhancing AI programs in Ada. 


Defense Al Applications in Ada-83? In Ada-9X? What are the issues? 

Can AI programs be successfully written and deployed in Ada-83? Do the changes contemplated in 
Ada-9X make the writing and deployment of AI programs any easier? Do there still exist major 
"gotchas" in Ada-9X which will seriously decrease the performance and/or increase the cost of 
developing and deploying AI programs in Ada? 

Al programs are some of the largest programs around, in terms of lines of code, complexity, cost, 
etc. I.e., they are large programs, but small amounts of data, relative to more traditional embedded 
systems programs. E.g., compiled program text of large AI system can take 20 megabytes, 
whereas "large" non-AI programs use 1-2 megabytes for both program and data (not counting large 
passive databases such as terrain mapping databases). 

What are the design, implementation and maintenance implications of such large programs in an 
Ada environment? E.g., small changes may cause massive recompilations—it could take hours or 
days to "make" a new version of a system. With a program of this size, is it ever "delivered"? If 
only 10' 3 of such a program is changed annually, this may still be 10,000 lines of code changed per 
year. Rumors exist of massive software changes/fixes for the Patriot missile system while the unit 
was already in battle. Significant changes may be required in a "Pilot's Associate" program for 
every mission. In other words, "program" may have become "data", to be loaded for each and 
every mission. Does this mean that "dynamic loading" a la Berkeley Unix or Unix V Rel. 4 should 
become part of an Ada run-time system? Does this require a "persistent Ada heap", a la current 
"object-oriented databases"? 

A "signature" characteristic of AI programs is their "late binding" of control constructs, which are 
universally implemented by means of first-class function closures. These closures are dynamically 
constructed functions which can be passed as arguments, returned as values, and stored into data 
structures as values. Ada-83 was expressly forbidden by its Steelman Requirements to have no 
such capability. Ada-83 offers generic functions and procedures, which can emulate some, but not 
all, of these late binding constructs. Do the capabilities of Ada-9X provide enough relief to satisfy 
the AI developer, or should we send the Ada-9X team back to the drawing board? 

AI people have been requesting garbage collection for Ada at least since 1980 [Schwartz80], yet no 
vendor provides it, and Ada compiler/runtime validation does not require garbage collection. Yet 
GC is an extremely valuable tool in allowing the decomposition of large systems without increasing 
the probability of failure due to dangling references. Such dangling references are becoming more 
and more likely with the dramatic increase in pointer-based programs due to the popularity of 
"object-oriented" programming. Can garbage collection be emulated on top of Ada with enough 
efficiency to support the heavy computational demands of AI programs? 

Traditional AI systems require a large address space and the shared-memory paradigm. Yet many 
embedded systems are designed with hardware that supports a distributed-memory/message¬ 
passing model, and it may be quite difficult to map AI programs onto these platforms. The Ada 
parallel process model clearly prefers an explicit exchange of information via the rendezvous 
mechanism, and only grudgingly supports the notion of asynchronous access to shared data. Yet 
the most popular model for parallel, embedded real-time AI systems is the blackboard model, 
which has at its core a database shared and asynchronously updated by all processes! 


© 1992 by Nimble Computer Corporation. 


1 


6/20/92 





Issues paper for Ada/AI/RT WG Workshop, Summer '92 SigAda Meeting, June 24-25, 1992. 


Although Ada was standardized in 1983, production quality compilers were not available until the 
1986-87 time frame, and significant bugs are still prevalent in Ada83 compilers today. For 
example, generics could not be used reliably in the first generation of Ada83 compilers, and 
"storage leaks" continue even in today’s Ada83 runtime systems. Thus, it seems prudent to 
recognize that it may be 1995 before debugged, reliable compilers and runtime systems are available 
for Ada-9X. In this case, another generation of weapons systems will be developed in Ada83— 
i.e., they will not be able to take advantage of any of the newer Ada-9X capabilities. Since Al 
capabilities are being put into systems today, what is the near-term effect of doing this in Ada83 v. 
Ada-9X? What are the long-term effects—i.e., efficiency, maintenance, obsolete protocols, etc.— 
of this delay? 

Some "100% Ada" projects are using Ada as "just another language", to be loaded into a separate 
address space on a classical operating system with multiple address spaces. Any synchronization 
between the separate address spaces is implemented by means of non-Ada capabilities—e.g., 
locking in a "file" system. The Ada strong typing system is side-stepped by reading and writing to 
external "files”. Worst of all, Ada run-time checks within an "application" (i.e., address space) are 
disabled, with any protection provided by the hardware—e.g., "bus error". Do such system 
designs conform to the spirit, as well as the letter, of the Ada law, or are they a pragmatic solution 
to an inflexible language standard? Perhaps such systems recognize the inevitable need to interface 
Ada with COTS technologies—most likely C, C++ or even Lisp(!). 

Issues of ancillary standards and tools. Are the MIL-STD's for software design, documentation, 
implementation and testing appropriate for AI programs, or are they too rigid? Can the complex 
notions of Al programs even be expressed in these "design methodologies" and "design tools", or 
are new methodologies and tools required. Do the proposed documentation and coding standards 
put the AI programmer into a straight-jacket (assuming that Ada itself hasn't already)? Are the 
APSE/KAPSE/... tools part of the solution, or part of the problem? 

Are real-time AI programs a mirage? Can an AI program ever be expected to always respond within 
a fixed latency, or must we start planning for only stochastic response latencies? What sorts of 
scheduling capabilities do AI programs require beyond those useful for other real-time programs? 

Overall Goal of Workshop and Summary 

Potential contractor/developers of defense software systems have little incentive to make 
investments in standards or tools for the uncertain likelihood of future contracts. Since AI 
capabilities are new, there is no established pool of experience in the defense software contracting 
industry which can fight for the language changes and tools which will make AI programming 
easier, cheaper and more effective. There are, on the other hand, major established groups to argue 
for better signal processing support, better decimal/mainframe support, better network support, 
better real-time support for traditional software control loops, etc. It is therefore likely that 
significant "holes" exist in the Ada language and infrastructure, which will only become evident 
later, when projects become late and costs balloon. 

The overall goal of this workshop is a document which clearly states the requirements for 
programming languages to support real-time embedded AI programs for defense applications . 
These requirements need to be prioritized, and the consequences and costs of not meeting the 
requirements need to be estimated. Since modem warfare puts the ultimate premium on up-to-date 
intelligence, efficient resource allocation, and pin-point accuracy, AI will play a pivotal role in 
making sure that the weapons are located at the right place and the right time, and used against the 
right target with the appropriate ammunition with sufficient accuracy and concentration to knock out 
the target once, but only once. We have to make sure that we are fighting the next war rather than 
the previous war. 


© 1992 by Nimble Computer Corporation. 


2 


6/20/92 







Issues paper for Ada/AI/RT WG Workshop, Summer '92 SigAda Meeting, June 24-25, 1992. 


REFERENCES 

Ada83. Reference Manual for the Ada® Programming Language. ANS1/MIL-STD-1815A-1983, US. Gov't Priming 
Office, Wash., DC, 1983. 

Baker, Henry. "List Processing in Real Time on a Serial Computer". Comm of the ACM 21.4 
(April 1978),280-294. 

Baker. H.G. "The Automatic Translation of Lisp Applications into Ada". Proc. 8ih Conf. on Ada Tech.. Atlanta. GA 
(March 1990),633-639. 

Baker, H.G. "Structured Programming with Limited Private Types in Ada: Nesting is for the Soaring Eagles". Ada 
Letters XI,5 (July/Aug 1991), 79-90. 

Baker, H.G. "Object-Oriented Programming in Ada83—Genericity Rehabilitated". Ada Letters XI, 9 (Nov/Dec 1991), 
116-127. 

Baker, H.G. "CONS Should rot CONS its Arguments, or A Lazy Alloc is a Smart Alloc". ACM Sigplan Not. 27,3 
(March 1992), 24-34. 

Baker, H.G. "The Treadmill: Real-Time Garbage Collection without Motion Sickness". ACM Sigplan Not. 27,3 
(March 1992), 66-70. 

Baker, H.G. "Equal Rights for Functional Objects or, The More Things Change, The More They Are the Same". 
ACM OOPS Messenger, 1992, to appear. 

Baker, H.G. "Iterators: Signs of Weakness in Object-Oriented Languages". ACM OOPS Messenger, 1992, to appear. 

Barnes, J.G.P. Programming in Ada: Third Edition. Addison-Wesley, Reading, M A, 1989,494p. 

Hosch, Frederick A. "Generic Instantiations as Closures". ACM Ada Letters 10,1 (1990), 122-130. 

Kemighan, Brian W., and Ritchie, Dennis. The C Programming Language. Prentice-Hall, Englewood Cliffs, NJ, 
1978. 

Kownacki, Ron, and Taft, S. Tucker. "Portable and Efficient Dynamic Storage Management in Ada". Proc. ACM 
SigAda Int'l Conf., Ada Letters, Dec. 1987,190-198. 

Mendal, Geoffrey O. "Storage Reclamation Models for Ada Programs". Proc. ACM SigAda Int'l Conf, Ada Letters, 
Dec. 1987,180-189. 

Perez, E.P. "Simulating Inheritance with Ada". ACM Ada Letters 8,5 (1988),37-46. 

Rosen, Steven M. "Controlling Dynamic Objects in Large Ada Systems". ACM Ada Letters 7,5 (I987),79-92. 

Schwartz. Richard L„ and Melliar-Smith, Peter M. "The Suitability of Ada for Artificial Intelligence Applications". 
Final Report, Contract #AAG29-79-C-02l6, SRI Int'l., Menlo Park, CA, May I980,48p. 

Smith, D. Douglas. "ALEXI—A Case Study in Design Issues for Lisp Capabilities in Ada". Wash. Ada Symp. 5 
(June 1988),109-116. 

Steele, Guy L. Common Lisp, The Language ; 2nd Ed. Digital Press, Bedford, MA, I990,1029p 

Taft, Tucker, et al. [Ada-9X] DRAFT Mapping Document. Ada-9X Proj. Rep., Feb. 1991. 

Taft, Tucker, et al. [Ada-9X] DRAFT Mapping Rationale Document. Ada-9X Proj. Rep., Feb. 1991. 

Yen, Mike. "Adapting an AI-Based Application from its Lisp Environment into a Real-Time Embedded System". 
Proc. AIAA Comps, in Aerospace VII, Monterey, CA, (Oct. 1989), 1114-1122. 

Yen, Mike. "Using a Dynamic Memory Management Package to Facilitate Building Lisp-like Data Structures in 
Ada". Proc. AIDA-90, Nov. 1990, 85-93. 


© 1992 by Nimble Computer Corporation. 


3 


6/20/92 





Ada9X Issues for AI Systems 

Why are AI people here discussing Ada9X now? 


X 

on 

G 

TD 

< 


T3 

CD 

4—> 

03 

Oh 

13 <3 

^ 03 

8 ^ 

U o 

03 <U 
*C CD 

O g 

Ph fa 

o 2 

<d r n 

M 

«•£ 

P< p 
P -G 

no O 
<u +-» 
> <D 

CD CD 
£ 8 
• Ph 


CD 

4-> 

CD 


X 


03 = 


CD P CD 
> CD H 
03 CD 5 

PP ^ 

-f§ 

03 jC 

G 


CW 

o 

<D 


Q.O & 


»—H • i—H 

<”3 


C3 {- 


PJ 
03 <C 

£CJ 

2 CO 
I > 

•O G 
G « 

• fH • 

co 2* 
Vh o 
CD 

't—> CD 

P > 
Ph o 
G ’■O 


O 

cd 


CD 

Vh 


<2 

<D 

JG 

4-> 

CO 

£ 

O 


s 

G 
5—i 
W) 

O 

Vh 

Pu 

co CD 

413 -4-* 

Cl <D 

ST - 

CD co 
G <D 
O W) 

8 g 


I 

“O § 

, " h 

o (D = 

o 

3.2 G 

^ ’o P 
O* G 


< 


<? 


G 

CD 

» rH 

CD 

co 

CD 

Vh 

p-t 


G 

G 


CD 

5-1 

CD 

5-i 

CD 

& 

O 

oo 

ON 


G 

T3 

<C 

2 

CO 

4-» 

G 

* tH 

G 

r—H 

P^ 

6 

o 

CD 


< 


G 

CD 

W) 


CD CD 

4~i 40 

G <D 

• fH 

co 

O <D 
ON o 
ON *t3 


o § 

{2 o< 

S p 

to £ 

^T* CD 

co .£5 

. >*—» 

T3 O 

CD X) 

So 

T3 5-h 
CD „ 

-2 so 
S G 

<D 'g 

<+•* G 
O G 


=tt= Ph 

CD G 

5 

V • r-( 

cu CO 

H-J .$£ 

• s 




/992 Nimble Computer Corporation 







© 1992 Nimble Computer Corporation 





Ada9X Issues for AI Systems 

• Can AI programs be successfully written and deployed in Ada? 

• Does Ada9X make writing/deploying AI programs easier? 


O 


>X 
<u i2 
o< 

G 

O 

M 

< s 

on G 

E G 
g‘c3 
W> g 
o ^ 

g T3 

CX c 

D G 

5 e 

. <D 
>> > 
’rG 
2 P 
G -O 

P X 
Uh _T 
h-j ’TD 

X P 
P Oh 

G ^ 
03 o 

u > 

• ^ 


45 O* 

cX 
§ q\ 


2 5 

. r-H 

4-» jyrj 

OO cn 

g'e 

• iH 

rrt ^ 
03 

CJ <d 

X > 

Ph P 

Oh U 

G o 

HH ^ 

<c^ 

Vh O- 

<2 ^ 
^ p 

O X 
\G Oh 

2 s 

c« o 
O 0 

H-» O' 

X T3 
*Z3 P 

C/3 Vh 

X 60 

cd c 
T3 o 
< P 

<D 

on J—t 


x r- 

P on 

7v p 

on 

g ^ 

P S 

o 43 

X TD 


P O 
P r 


G ^ 
P T3 


Oh 2 
cx~R 
G 


• X) 


© 1992 Nimble Computer Corporation 



"The Suitability of Ada for Artificial Intelligence Applications 
Schwartz, R.L. & Melliar-Smith, P.M., SRI, May 1980 



© 1992 Nimble Computer Corporation 





"The Suitability of Ada for Artificial Intelligence Applications 
Schwartz, R.L. & Melliar-Smith, P.M., SRI, May 1980 



© 1992 Nimble Computer Corporation 




The Suitability of Ada for Artificial Intelligence Applications 



1992 Nimble Computer Corporation 















The Suitability of Ada for Artificial Intelligence Applications 



© 1992 Nimble Computer Corporation 














"The Suitability of Ada for Artificial Intelligence Applications 
Schwartz, R.L. & Melliar-Smith, P.M., SRI, May 1980 


G 

<D 

. s 

«a 

g 
i o3 


' a 

c3 <3 


G ~ 

^ G 

Sf? S 


Tv n 

O X) 

2 g 

f , 4—* 

o © 

G XJ 

•ns 

O :S 

•+-» c/j 

C/2 

o o 

• G 


bJO 

C 

W).G 
c ^ 
*c cS 
'3 ^ 

cr c 

2 o 

§ ^ 

G i—t 

.2 G 


o r 

*c 

03 oo 
> <D 
G 

(D SJ 

O = 

^ to o 

^ 03 

G j j 2 > 
O . 

T3 G 

<D fi cd 

3 o* 
o x 'O 

S g 

p; *■—h 03 

o3 2 1 (V) 

u §•>; 
• o c/2 


© 7992 Nimble Computer Corporatio 












The Suitability of Ada for Artificial Intelligence Applications 


t—S 

w> 

o 

a e 
•2 & 
on 2 

2 

fc & 

c g 

O co 

Oh cd 

co 4-i 
XJ co 

t ^ • rH 

O (U 

.5 g 

8 o 

(73 co 

+-» 

cd <D 
T3 g 
<L> co 

fa O 
p *—( 

co O 

Q co 

n 

• Cu 


CO 

*£-> Vh 

a P 

cd G 

U « 

• o 


© 7992 Nimble Computer Corporation 







The Suitability of Ada for Artificial Intelligence Applications' 



© 1992 Nimble Computer Corporation 











"The Suitability of Ada for Artificial Intelligence Applications 
Schwartz, R.L. & Melliar-Smith, P.M., SRI, May 1980 


? § 
O 


03 

xi 

*>P 

o © 

g CD 

^1 

u 3 

60+^ 
G O 

O ^ 

as G 

JD 

T—< 

£ £ 

5 - 

O c/3 
cG 

« b 

6 s> 


m 

oo x* 

<cu 

• m 


a, 

6 * 

CD +-> 
60 03 
c3 *-< 
G r 
60 G 
G O 

43 '‘O 

C/3 g 

X3 = 

5 o 

C ~ 

s § 

n, > 


r-J <U 

1 S’ 

G <U 

2 ^ 
c 3 
U.H 

o& 

• X) 


T3 

G -G 
d O 

CD c3 


C3 

<D O 
Vh _ 

G 

•r-l &JJ 

GO X) 

<D CD 
rG 60 

G £2 
o 1G 

• rH X) 

?S 8 

-o 3 

-+-> r 
03 

<d 

G x: 


• "Generational" GCs which are good for development envs. 
are not appropriate for embedded systems 




C/3 

g 

o 


G 

O 


a. 

Ox 

< 


<D 

O 

g 

CD 

W) 


CD 

x-> 

a 


G 

■ i—i 

O 


s 


t-4 

£ 

4-x 


G 

X> 

< 


O 

>> 


03 


G 

00 


<o 

43 

H 


o 

oo 

o\ 


>» 

03 


P4 

oo 


Oh 

«f\ 

45 


£ 

00 


<D 


<« 


H-) 

04 


N 


£ 

43 

O 

00 


g 

o 


o 

(O 


O 

u 


<D 

W) 

03 

43 

& 

a 


C/3 

<0 


a 

G 

CO 


O 


<4-< 

4) 


Q 


G 

O 


J-x 

u 


03 

T3 

< 


<4-< 

O 

I 

a< 

o 


I 

a 

o 


a 

a 


W) 

G 


03 


G 

s 

PJ 


CO 

oo 

I 

03 

T3 

< 


<D 


43 

03 

t: 


o 

Ox 


c\ 

<0 

k-H 

G 

03 


^4) 

3 


C/3 

C/3 

O 

cu 


a 

G 

43 


C/3 

G 


C/3 


O 

o 

}-H 


G 


CO 

W) 

G 


G 

G 

O 


43 

O 


43 

£ 


CO 

Ox 


<0 
X—> 

G 


• 

V-x 

Ox 


X) 

<D 


• H 


CO 

C/3 


43 

X—> 

U 

43 


C/3 

G 

43 


P4 

hJ 


O 

c« 

^ XJ 
X-T CO 
O O 

o G 

G H 


G 


<0 

>s43 

So 


C/3 <-X 

5 G 
4) fcl 
t3 W) 

<0 ^ 
G 43 
O +■* 

§ O 

O C/3 


<0 O 

Ox o 

>> 

+“* Vh 

Ox ,0 


G H 
O G 

• 8 


C/3 

Vh 

0) 


CO 

s 

G 




Ox 


G 

O 


CO 

C/3 

G 


<U 

> 


C/3 

G 

4) 


X 

<0 


C/3 

.8 

§- 

4) 

Ph 


G 

O 


G 


O 

G 


G 

O 


C/3 

O 

Ox 


o 

CO 


G 

O 


o 

G 

a 


X) 

CO 


C/3 

(O 

G 


G 

G 

O 


T3 

G 

»-x 


CO 

C/3 

G 


G 

G 

u 


Ofl 

G 


rX 

C/3 

G 


X> 

G 

G 


c/3 

X 

G 

CO 

Vh 

43 


CO 


G 

V-x 

G 

Ox 


CO 


CO 


G 

O 

C/3 


G 

C/3 

CO 

O 

Q 




J o 


/992 Nimble Computer Corporation 









"The Suitability of Ada for Artificial Intelligence Applications 
Schwartz, R.L. & Melliar-Smith, P.M., SRI, May 1980 


£ •'S 
O - 

35 <o 

.ss IS 
-3 ^ 

o o 


2 o 
Bb sp 
o g 

(X o 


§ u 

CO o 

00 (U 

J3 ^ 

"Tj • iH 

< 0O 

• o 


• Ada83 ”in out” can't decide between "by reference 
"copy-in, copy-out" 

v____ 

© 1992 Nimble Computer Corporation 



The Suitability of Ada for Artificial Intelligence Applications 


c/3 

on T3 

<D 4—> 

OX) G 
b 

•2’C 

a 

•i-H 

i—( C/3 

73 <D 
.2 g 
o 5 

<D O 
C/3 X 

<D 

^ Cl 

2 5 

s-g 

f-i G 
CD O 
OX) O 

G OG 
G G 
nd 0) 

i 


«rH jQ 

O Gh 


G 

<D 

GS g 
3 g 
o o 
jG 2 

4-( * r" 

• t—i 

T3 g 

. rv <D 

U 13 
c3 s 

-C G-< 

I- s 

ii 

s> CX 

q 8 

^ g 

G 8 

2 S3 

2 T3 

IG <u 

<U G 
G 

♦ T-4 • 

4-4 

I § 

4-4 O 

G O 

o ^ 

6 a 

CD <L> 

s ^ 

G g 

g § 

<& a 

o3 G 

Oh W> 

• o 


f* 4-4 

* § 

- o 

4-4 

G <D 
(D O 

•n c 

e 2 

Sh <D 
<D <+-■ 
G a 

• 1-H 


C/3 S 

CD G 
G ^ 

3 <D 

2 G 
2 G 
-£ H 
C/D G 
G 
GO 

S O 

G 4— > 
O w 

U1 

<U 

OC, • 

^ \ ^ 

c a 5 

c3 § 

<D u 

G -G 

hJ G 


<D nd 

E <L) 

§ S 

C/3 T3 

G C**3 
C 

c/3 G 

^ <D 

Vh «, 


g B. 

« S 


i_§ 

4—» *N 

G c/3 

■ r -4 ■ % 

> G 
<D 2 

•g S 

S <= 

IG o 

S 

(D G 

^ +-» 
~ G 

8 § 

QJ 4-4 

_$-! C/3 


Q G 

T o 


No "silver bullets" for storage management problems 






"The Suitability of Ada for Artificial Intelligence Applications 
Schwartz, R.L. & Melliar-Smith, P.M., SRI, May 1980 







The Suitability of Ada for Artificial Intelligence Applications' 


<D 

oo 

G 

03 

O 

CD_ 

r 

- g 

G ^ 

^ • T 

(D 

*r3 ^ 

CJ 4—* 

vEl G 

2 £ 

.s 

CD O-t 

■° s 

H'2 

oo •£ 

D o 

^ <+-4 

8 ® 

2 g 

oo b 

o 3 

b g 

G- 1 . <D 


Q 

W 

oo 

•-* -g 

hJ ^ 

< ^ 
, o 

W S 

PQ "g 

H o 

o,r 

Z13 


oo ^ 

G 

X) g 

03 S 

•q <5 

53 4—> 

S? CO 
^ >> 


%—> 

G 

as 

G o3 

y—1 4—» 

JO co 

^ t_l 

*4—» 

G 

W-i 

CD 

fH 

O 

<D v~< 

3 o 

O 

s 

G 

O <D 

G ^ 

o > 

G< <d 

G 

* 

•fH 
4—» 

1 

G 

• 

• G 

• T~i 

• yG 

4—» 

• 

2 


© 1992 Nimble Computer Corporation 




"The Suitability of Ada for Artificial Intelligence Applications' 


<4-i 

0=3 

S 


cd c2 

« § 

o> • rt 

J3 Sr 

D £ 

• u 


g 

> N 


on c 

CL> P 


T3 \G 
O Qh 


E ° 

> o 


Cm ^ 

<D Vh 


M <D 

L E 


c E 

cd cd 

M 

S , W) 


G P 


O & 


G o 

pC 


c3 G3 

CX Cd 

<D Frt 
on ^ 

m M 

• cd 


G cd 

i 


cd > 
+-* ^ 
G O 

<D G 

E ^ 

<D 73 


E g 

♦ i—« < 

M 

o g 

S I 

CD G 

S 2 

<d y 

S p« 

Jd 4—> 
on G 

O M 
G G 

r-H D 

•r~t (J 

<d ;<m 

Td <4—t 

o g 

E m 
, rH 


- >> 
4-t H 

<o & 

jG > 


• J2 


I 


1992 Nimble Computer Corporation 






The Suitability of Ada for Artificial Intelligence Applications 


vo 


2* 

8 « 

o ° 
~ .p >> 


O H O 
*P o3 03 

c 71 x 

5> o u 
•° T3 T3 

XJ ,_i <D 

T3 o3 % 

3 O 3 
P O ca 


* & 

03 Pn.y 
-*-» ^3 r"| 

&0 £ 
^ C H 

£ 55 03 

03 O *■< 
Vh Pm Of) 
&DO O 
P^h b 

o Ph 

X> v-i 3 
33 55 

M S <D 
= ^2 33 

go 5 

O CD CD 

33 £3 o 

E ^ 
•* ^ 


> C/D 

I> <D 

* ^ Oj 

<D ■*—> 

& O 

V-« 

t- 33 
Vh rrl 

Bo 
c o 
•5 o 
o £ 

P< pH 
<D CL) 

=a .S: 

c/2 

co vh 

°° s 

1 CJ 
03 CD 
T3 *-> 

< X3 
^ CD 
P CD 
,rH P 

00 ^ 
CD £ 

CP O 

>>P 

CD O 

> £ 

c /2 ^ 

Vh 00 

P O 
O P 
cd *r3 

Vh 03 

> 

^<D 
8| 
S « 
H 8 

• pH 


1992 Nimble Computer Corporation 









APPENDIX G 


MESSAGE FROM THE 

APPLICATIONS EXPERIENCES AND LESSONS LEARNED 

PANEL CHAIR 


SIGAda Artificial Intelligence Working Group 
Summer '92 SIGAda Workshop 


Janet Faye Johns 


The MITRE Corporation 
Bedford, Massachusetts 
617-271-8206 

This paper assesses the current state-of-the-art for Artificial Intelligence (AI) 
applications development processes. The human and safety reasons why we need to 
"engineer" AI applications is discussed and information about the current processes used to 
develop knowledge-based systems is presented. Issues associated with requirements 
analysis, design methodologies, development techniques, test and validation, and 
maintainability are discussed for AI applications and for AI with Ada applications. 

Viewgraphs are in this paper with an accompanying discussion section that is divided 
into two parts. The first states current issues while the secord pan provides a summary of the 
related workshop discussions. 


G-l 




APPLICATIONS EXPERIENCES AND LESSONS LEARNED PANEL 


MESSAGE FROM THE PANEL CHAIR 


BACKGROUND 

During the past year, I have been collecting information about existing Artificial 
Intelligence (AI) applications developed with the Ada programming language for the SIGAda 
Artificial Intelligence Working Group's (AIWG) first annual survey |3J. This was a 
challenging task for a number of reasons, but I have come to believe that the major 
impediment to my data collection efforts is the state-of-the-art of developing Al applications. 
The basic nature of specifying and developing Al systems is a major stumbling block to 
formulating detailed software metrics and other measures that are so common for 
"engineered" systems. AI systems generally begin with few- documented requirements and 
are developed with a series of evolutionary prototypes. Typical software metrics are not 
readily available for Al systems. This fact led me to investigate the current processes used to 
develop AI applications and the problems of applying current software engineering principles 
to AI applications. 

This briefing was presented at the general session of the Summer '92 SIGAda 
conference. I presented this material as a devil’s advocate challenge that stated the issues in 
an effort to generate open discussions about the issues. These and many other issues were 
discussed during the workshop. For the publication of this briefing in the workshop 
proceedings, I have added relevant information from the workshop discussions to the 
briefing. My briefing combined with my interpretation of the workshop discussions is the 
method I have chosen to document the workshop discussions for these proceedings. 


G-2 










REFERENCES 


1. P. Collard and A. Goforth, November/December 1988, Knowledge Based Systems and 
Ada: An O verview of the Issues . Ada Letters, pp 72-81. 

2. C. Culbert, D. Hamilton, and K. Kelley, 1991. State-of-the-Practiee in Knowledg e- 
Based System Verification and Validation . Expen Systems With Applications, Vol. 3, 
No. 4,pp 403-410. 

3. J. Johns, June 1992, 199.1 Annual Reportior the ACM Special Interest Group for Ada 
Artificial Intelligence Working Group . MITRE Document M92B0000056. 

4. N. Leveson, May 1992, High Pressure Steam Engines and Computer Software . Keynote 
address at the 14th International Conference on Software Engineering, pp 2-14 of the 
Proceedings. 

5. Xiaofeng Li, September 1991, What's so bad about rule-based programming? . IEEE 
Software, Vol. 8, No. 5, pp 103-105. Editor's Note: Paul Sanders responded to this 
article in the January 1992 issue of IEEE Software. 

6. D. Woods, April 1992, Space Station Freedom: Embedding Al . A1 Expen. Vol. 7. No. 
4, pp 32-39. 


G-3 




SIGAda Artificial Intelligence 


Q. 

3 

O 




O) 

c 



(0 






G-5 






SIGAda Artificial intelligence Working Group 



G-6 


software engineering principles when we 
write software to solve our problems. 




The 1991 AIWG industry survey |3| provided empirical evidence that the Ada programming language has been used 
successfully to develop Artificial Intelligence (AI) applications. The difficulty encountered in collecting software metrics 
for the 1991 AIWG survey raised many questions about the current state-of-the-art for AI requirements analysis, desien. 





SIGAda Artificial inteiiigence Working Group 


Oi 

o» 

VO 



CO 


CD 


<D 


! 8 | 
2 85 

- 0) o 

5 <5 

!>«g 

2 Ol'Z 

a c 0> 

s*> (0 
5 o o 
2 o)Q> 

2 co «5 

3 o £ 

Etjo 

qok 

ojS c 
ct; o 

2 CD 5 

3 > ’Z 

2 T? ° 

N W n 

c 3 2 

- o ® 

CD 5-3 
c <D. 

- 0)0) 

. £ 2 


c 0) 

JS co <2 <5 

■►- O o w 
w <d.2 C 

2 'o c .2 

2 a f § 

w oi.E > 

"5 = -c 

2 m ° 3 

Ilf? 

a =E| 
a> a> ©£ 

2 2 o-Jc 

■2 S “ * 
o%°° 

co Si2 

p *- O.E 

E c o-o . 

OO-CO 

** u Jr CO ^ 
- O W U. > 

> r- a> o ■£ 

>£ o>-o $ 
°™coc. 
C$33q 
■o OjSPjC >* 

$ .£ « Q.-C 

c cl - ” a> & 
Z. o ^- 0-3 

« w Scc 
® c c ~ (5 

(Q b * O CD 
® £$ § > 
otoEl 

b= o c *- o>. 

• •* £Z 3 StZ ‘ 

: O w .S2 jq <5 


G-8 


Nancy Leveson, May l992, High Pressure Steam Enqines_and 
Computer Software Keynote address at the 14th International 
Conference on Software Engineering, p 2 - 14 of the Proceedings. 






3 

O 

0 

O) Q. 

c o 

15 


0) 
o _ 
c « 
m 13 

s>< 

= o 
0) 

c 


21 c/j 

CM 

_ o> 

CO * 
O G> 


CO 

"U 

< 

o 

cn 


E 

3 

(/> 


c 2 

oEf 

o o H 

C ^ T3 w 

<5 C C 

£ MO 05 <0 *° 

S ”« oic c 
ct 0 ) c o o 

® O *3 *3> 

j= 5 C E ® i 

•£: c © c -0 O 

u » r O C r 

o —. •== '-J 5 

u. TJ flj </) > 

«8Eg2f 
W-O O'O * ° 
2 o >,-d£ ® 
■“is .'e ® ™2 


CTO> w 3 

c co a> o. c o c 

> </>£ Exj^'n 
co j= H 0 c D) 

■=S .85* » 

- >5 *>>?>• 

^ ® r £ m « 



C_ 

| TO S 5 » CO & 
C ^ C TO 5 CO r 

J*2 2 = 8 52 

c §5 cS £ co © 

— ^ ^ 3 



© 

co 


a>> 

’co 

£ 

E 

o 

|o 

o 

•rere^ 

c 

IM 

h. 

'© 

c 

CO 

TO W 

*- a> 

TO 

E 

E 

co 

■o 

03 

0) 

X) 

'X3 JZ 

a> ** 

O.C 

< 

■ 

03 

O 

'co 

*5 

0.0) 

o£ 

• 

• 

» 

• 

V. 

a 

s 

<75 

?>5 


© 

0) 

© 

> — 

or= 

Z £ . 

O u.T3 
(0 0)0 

2^3 © 

1 £'</> 
doc 
o O o 
« <U o 


TO *- = 

Ex: 3 
>|2 
5 5 S 

«.So 

© *j C 
O C 

c o> £ 

co E co 

c §2 

a> t: o 

o>o 

«S2 

*J= TO 

ais | 


E 

o 

o 


o 

© o 
^5=£ 
O 

Sc 
m * 
O TJ 
CO 0.0) 
-JC 0.0) 
; j— o 3 


a> 

cn 

3 


©j 

CO 

*p- 

o 
<n 


© 


d 


o> 
c 

w 
0) 
0) 
c 

o> 

c 
3|UJ 

»£ 
re 


to 


LL. 


o 
<0 

3= 

8° 
© 
_* o 
2Jc 


UJ 

E 

re 

re 

CO 

re 

V. 

re 

w 

re 

*•» 

o. 


£ 

re 

•» 

c 

o 

o 

re 

c 

o 

h* 

re 

c 

». 

re 

c 


"=<«r ® 

CM t- OJ 

05 C 

5 JS 5 
>.-8 


5 re 


o 
o 

— re £ 
-r re “• 

g re © 
re xj 5 

©"O ~ 

S « o 

■ J ®'T 
>.0 T " 
o c • 
c 5X.JV, 
re © 04 
ZX CL 


G-30 








We must understand the human impact of our inventions. 


<u-= 

-*= -a 

t3 C3 

S s? 

u -O j= 

•S ii 

C ^ 

S3 W5 >■» 


£ u o 

1 * fc 
*■ «• « .. 

aj 

„ — nj 

Tn a. C 
3 0 = 

E 8J 

|e -£ g 

a 9 

« Jj 8 

.2 5 o 

£2 « 5 

c c 

C w 4> 
0> M > 

•C£a 

^ «>. J5 
«Eu 
3 Si « 

Q.« “ 
P £ 

s 4/5 fe 

O ._. uz. 

O ' w- 

S3 < "5 

W ' ' ei 

60 o •£ 
o £ c 
E ,SP 2 

= 1 I 

§•0 * 

EC y 

i'gfi 

o “ « 

<£f 


> «•: 
jj s; 
> u 
S => 
o cr 

9J HJ 


^'•3 . 

*- IS t/5 

1 sg 

<L> C >> 
-c O ^ 

*1 M 3 

u,c o 

Q. T3 C 

E>Z 

«? e g 

2 &. g 

y> « v 

I'll 

z| i 

■s'c.g 


si 

i & 

*0 c* 

l'i 

o .3 

u X 


~ o s e 

Jg gl .2 
2 § 5. 8 


g ^ 

§>■2 

U c 

c "5 
v ao 
t> .5 
u ? 

u 

ll 


G-ll 







G-12 







Theorem: An optimal software engineering process exists for all Artificial Intelligence problems 

Our greatest challenge is the application of software engineering principles to the development of AI applications. This 


o SP o 

e/5 C • — 

— c (3 

E w U O 

<L> 

•- = CL 

q. Sb 9- 
o c n 

i «< 

g 11 

a.,— o 

-Sis 

u o< 

•o = 60 
13 8 C 

■2 8J 

S 1 -— 

4> 3 > 

83 ' O 
« "O 4/ 
2 <.« 
O 

a 

■c-o s 

Jt e/5 e/5 

.1 E g 


e B.2 
« P <u 

*< i 

a -g w 

Q C8 CO 

15? 

E 

i|s 

O X) fc 

te o 

f *.< 

<< o 


e/j *S 

& I 

O T 

£ S 

D. 73 


c« «/5 

5 C 

w> E .. 

CCU 
'<?■ £ o 

= ! s* 

® Sei 
u r — 
g u E 

J E ! 
c a.? 

go* 

* u S 

£ > * 
a> 

d-o?, 

-C ^ 
•■'J Q, 

of E 

s « 8 

u o u 

SS-g § 

8 8 g. 

c g-s 
< «■ -5 


< s 
k e 

.5 o. 


*5 

=6 ^ 

8 1 

<2 <2 
c e 


.g .g 

3 3 

ff 8T 

oc ac 


G-13 


-C o 

.S3 *X3 

" k ^ 

i 3 

8 > 

Si 1 

£ J 

C -3 

O g 

s s 

o 

4> 

c > 

W) 

•f! m 

K ^ 

fi fS 


CO o 


ro Tf io sD 


7) Scalability from the requirements analysis and design prototypes to a full scale system is an ill-defined area for Al 
software. 






SIGAda Artificial Intelligence Working Group 



G-14 


This “design for evolution" is accomplished by conforming to 
standards (UNIX, FDDI, Ada, X Windows) and designing the 
interconnections with sufficient bandwidth to allow for 
faster components as they become qualified for space. 






Our Challenge: Software Engineering with Ada and A! 


~ 5 

O ir. 

Z E 

<u o 

tS! 

C *5 
cd _ 
cu <C 

£ w - 
H o 


al 

w ■ — 

x — 
MX 
*C rt • 
X »- 'Ll 

3 oo 
,2 o ® 
g g M 
3 © c 
3 T5 ^ 
^2 c u. 

£&| 


s«e© 

u -J 

“ S5 C/2 

K-o* 

u c_ 

? 

X &<N 
.O c-O 

"112 « 
w— H 
O m 

>—v U. •—• 

# a_f 

£ wp 

x“^f 

ap.E _c 
«-o x 

aJS’S 

u’C " 

3 y 2 

111 

p. Kt r- 

« c X 
TJ O > 

<■ X 5 

x 5 g 

•f cL-2 

- S-g 

< «x . 

__ *rj D. tr - 

^ ^ S c 

— < «o 

*8 *=.g « 

C S < ;* 

«-0 a 

Ec-s a 

3 *r* cd 

If-- 

73 “ < <c 


— T3 
< 4J U 
^ ^ CO 
tt f! 

£ e-i 
5*| 

ts o £ 

X c X 
l> l> 3 
C b !J 

c *E 

>~>-o "O 
X c 
a « C 
= w 

■E E > 

> — 
t) Zr Yi 
ia ^ 

.o < E 

X b. c 

* £.2 

o — « 

• a 3 3 
buX 
yir «« 

C ^ i/) 

Sa e - 

> Cd >? 

,«— </; 0> 

0-2 « 

^ ta = 

fe 2 

£ £ i 

-o E < c 

M= 

X O C 

■“ 4/5 o 
•o a ••= 
u S «d 

s — .y 

c "8 "a 
<U g Q. 

*© C « 

2f w 

>> to X3 

t%< 

3 X x 

t/5 60 .— 

U-K * 

!?< 

Cd 0> fc 

.ag«2 

q| « g 

rt </! 

« g g 
i a| . 
g-s’sa 

«P V K 
n 3 §>.2* 

£ • £ a 

% x _ 

^ 5 «C 
*r .3 D Tj 
j 3x S 
2; o Z ° 

X 3 w 
« Q. © -O 

!—§"«§ 


» 1 

Iasi 

asi« 

.y C U-4 *■“ 

bo^- o 5 

0> Ui ^ ^ 

I*<! 

i8is 

•= a « *- 

55 oo c 
S Cl 60 

■fix* 
1 u” o 

5 £ ^-a 

e - oo3 a 


/■- Jj S 4> X 

£ c? 2 ^ v5 •£ *r 

v a> 3 y c w- c 

V5 4 > H 0.2 ° o 


^ §o o .2 
o ^■s’g.a 

3 ol 

w *3 X M 
4> C gs £ — 

£«E « ft o 

^ I « > c/3 
g 5 .§ "8 

o c/5 C -X 

•c <5 s § E 
Sf »-2 u 
X-5 S MJE 
o. § .© ,3 T8 

Co So 5 **. u 

«“Su? 

<11^1 
ll«ll 
8-< p«2 

—'I s . o E « 

-I la-S S 
s5l&.S 


(J - Or. ^ 

» w ST" - 
c g S « 

«-i -5 S £ 
“.gaS'5 


= ET <« m > 

•g «£ i -c ^ 
b^e 8 1 

S S1 -a-x 

b®5»i 


B.S-S g ' 
V x > c • 
P £-8 S 


>*r .3 

2 a 

K 60 

M X 

x ■£ 
x « 

in a® 

O 4> 

■g t 

•Ssg 
5 60 Si 

.2 C m 

t; o >x 

g-g «« 
X W eo 

D.XX 

a'3.< 

« a r 

w B.*; 

<o* 

■£^< 
’> « 4> 

'■0 13 

<a a 

•n «d l> 

R 61 - 
W fc 

Z-ViB 

•O O 4, 

^ 00 B 
s.e i 

a 3 g 

|.§S 
E e| 

a u c 

181 
53 12 g 

|y 

ill 


G-15 






SIGAda Artificial Intelligence Working Group 



Phillippe Collard and Andre Goforth, November/December 1988, 
Knowledge Based Systems and Ada: An Overview of the Issues. 
Ada Letters, p 72 - 81. 












SIGAda Artificial Intelligence Working Group 



G-18 


Phillippe Collard and Andre Goforth, November/December 1988, 







Requirements Definition with Prototypes 


oc .3 
00 00 
O c 

— flj 

S £ 

JK ca 

E £ 

o O 

<U I/O 

i-s 

JJ < 

E j= 
o — 
> .c 
O — 

Z * 

<y 00 
•£■ c 

c ’ 0 . 


V IV 

r Etf) 

*- c 

r- C «o </: 

.h C3 

1) 0> -C 

-C -D U — 

WO « P g 

— E 0 .-° 

Is^l 

o « e«Si 
Sf ^ 

£l|! 

Cl. Op o C 
ca © Yi -*= 

* 0.-S g 

§>*8 ej* 

•S SL.2 c 
13.2 « £ 

g g 

poo. 
c. - © Q..2 
o E - s 

Jr O Sfl 

|i^< g 

“ ©xj-S-B 

•= c .3 > « 
•o o 3: ^ .2 
v > _ 00— 
■Oca^cg- 
• c a. 

« cx: ? n 

-S .2 S 2 5 
= 1= §-■£ 
•= ° < «'1 
So ^-2- 

~ p c o <. 

al-s s» 

" jj o'o'a 
<_•.= ■> o 

w Mg;0 w 

J © S S-S 

If-’OCu- 

§ < < O. O 

</> r £ S 

.£ c J /. 5 

g 

3 SC” a. 

tf»li 

o 2 .5 H e 
■5 TJ g;-g « 

•a < * * °- 

O j: ts 

8.E E 
u * °-9;g 
■£53 « c 
c < d. 2 ca 
o g E £ u 

•o v. <*- cl E 
g*C5 0 -o o 

^ u O 1) U 

JS v* & 35 ^ 

CQ 3 D 3 JD 


</; 

c 

.-.2 w 

o-i-f I 

•- 3 / 

-3 P 3 W) -j 

3-5 E-c~ 

~ ea 

3s e C v. u 
0) .SP O « ? 
r « " o = 

- o « fi.3 

XJT3-5 g 1 *- 

2 *3 oi^-£ 

5 2 Z = o 

MOCC^*" 
u ti u 3 C 

T3 c £ cr o 

i||£I 
if > 2 1 

.2 c Wca'c 
S 2. « c C 
2-0 c 8-2? 
c « = « g 

g £ E g-S 

« i'2-8 gK. 

.2 £ S g 5 s • 

— o w ©: <u s c 

« n 3 r > o n 
.2 U crEii fc.2 

— l> ."®X) D- mo 

g- cL £ Mi U. Mj 

CL n c U £ U 3 

ca 2 o *o ~E Li 
ca is, - 1 in • r ■- 

■O ^ ca « ^ fa-D 

2 I sill's 

> ISgfgg- 

< «1 g &! « 

■2 ^§2<-So 

o- “5 E ■£ <«- v 2 

•2 u 5 0 ®S y 

V in rj- m U 3 

> a 5 a b • e 

U T3 C S 3 £ 

■° >.U H «.2 = 

'-x C cf c £ o 

o v c ■“ r S u 
«i ’C « S2 =3 
£ 

y mi o y o £■ > 
5 ca — «13 « a> 

l- > m U . — Mi 

o. ? i S ca 

w P 0" o ■© ^ J= 

J o S W 2 a* 

z ■o2s« 5 S 

5 Hi ill 

6 S8-8^il 

1 1^11 s S 

C O >, B 2 S4, g> 

ca « 2 £ T u ‘c 

E .£ g Z -a c 
X {S1 1 ^ a g 



G-19 




SIGAda Artificial Intelligence Working Group 
Summer ’92 SIGAda Workshop 



JFJ 6/92 






SIGAda Artificial Intelligence Working Group 
Summer '92 SIGAda Workshop 


w 

Cft 



>* 

•a £ 

c o 

CO — 

c ® 
S-o 

i| 

o.£ 

■552 
> c 

<D ■= 
•n <0 


o a> ft 

o o 
Q. 

a> c o 
0 ) 0 - 5 : 

C3 - 4 s §> 
■*-» T% > 

c cS 
<u .E *0 

■n « O 


c o 


o 

c 

I 


00 

a) 

N 


</> c 

<D.= 

-°.E 
aj £ 


(Q 


0 ) . 
(0 (0 
o a> 
< 0-5 
o g 
o 

Q) +- 

o o 

C 3 
( 0*0 
c o 

So. 


<!>£•=£ 

. c <0 .ts 

:O.S2 E £ 


a> 2 

£ JC 

oi 

4 - 0) 
r* -4-* 

® « 

e§ 

® c 
Q-o 
o c 

o 

= & 
a> o 

E 0 
sr 
</> — 
c a> 
o.b 

“ c 

>*«> 

3«- 

c.£ 

a> ~ 

> o 

3 2 
o a 

Q) h. 

= 2 

« a> 

§ 3 
!« 
:5o 


advantage is not realized in practice...." 

Xiaofeng Li, September 1991, What’s so bad about rule-based program ming?, 
IEEE Software, Vol 8, No 5, p 133 - 105. Paul Sanders responded to this article 
in the January 1992 issue of IEEE Software. 




The difficulties inherent in A1 requirements analysis inevitably lead to problems with the testing, verification, and 


/ 

4J 


■s. .r — 




> zz ;= 

i -C r- 


V 




w- (/; 


ts c e ^. 

5 v a £ 

x: C ^ v; 


u .o, 


: -o — 


« = v 


U 3^, 
— > i/: C 
s ? c u 

> t3 4> > 




<u 

c 


c .5= 


C — 7= 


J 5 s ss E 

3 y C “ u 

5 c * e 5 

f Hi V 3 s 

i • — g rs 5 

, == C -£ T3 

■ O z c “ ^ 



Mu - 

= 5 U 5 S « 

: J ■= ^ t </; ~ 

3 V 3 C 

g-'S 5 0-2-5 

- if ea-c « 
<^.5^ 
si* g 

;r “ 2 £ .2 ~ 

““ « £ o w 

£ a x= « w ' 
r r . u “ _c 
’f Ml y « 2 « 

J~ 5“ 3 I 

- s -g 'a-® 

.sgc li i 

8Itf*!l 

i! x; c ^ = a. 

• - - Sf o ^ u 

_ -a Jr .2 Ox: 

I .-2 M « E - 

- X « 
c > • 11 *° 

• 2 ^ 2-2 


(8 


*9 £ g « 3 


A *3 5— 5 
> - £< ? 

? * 1 1 %.£ 


sr. 

8 


> 


« ■§ -e S 


an j -2..E H.'S 

■§ i i 2 </ 

5“ ^ MO 
« fe o •£ s 
E'S-e c .2 
•P « 2 ?~ o. 


a. 2 


ig j= § £ §: fe 5 

mV £ a n “T-S 
eu 43 j= w — ," .t: 
K T3 ** S < 1— _ 
c Hi ? 


O C 2 w e w 

u S“ 

= 6 a > -O s 5 
^^o«a “ ■■ - 

■5 rr 


XS 40 eM 1 
5 c w — Sr 
o. n . </> > 

» E-C^-o „ ? 
hl£ o I Its 5 




o 3 o -S 5 £ 
>>« ? | = - 



t> u V c ■ 
8 . 

c o A * 

8..S15 

Cu: A , ■ 
3J .* « 3 “ 
«« V > « 



E.o uv 
c 2 o « E t» 

•o ^ ^ 1/5 

i> 3 f 3 v c ^ 

= E i s is > 

T5-S S'* 


o- 1 « ™ — 

„ g o. U 5 o. 

w « w g< O 
•c e J= •£, 

« i-fev-S’P 

X hn 


0 ) 

> 


S > w j” a 

« O W Si’o ^ 3 
■o 75 go « 5 V 
t> Si b > — J-> 

S v— g « 2 
gu o “'S 3 


■O U "33 

o-S g g.1 

!2 X5 —* o O. 

age'" 


£ S u ^ > 
S v e 3 A ^ 
S-o 5 2^3 - 


. . 3 « > 

5 T3 2 TO ~ 

.9-= euo .2 o 2 
O V _ , a "X 

s*“lis-5 

6 2 c “ p « 8 

o-’S 0^93“ 
o u -® -S | *3 A 

t/5 2 2 M ^ 5 ■£ 
U£ 5 O p 1 U O J3 
IlO % U3 .2 M U S 



G-23 





SIGAda Artificial Intelligence Working Group 


co 
to d 
w-o 

2* E 

5 8. 

G> 2 

E 

o 0 
°-c 

CO — 

E £ 

a> o 

co £ 

2To> 
w co 
a> o> 


o o 

vO vP 
0 s * 0 s * 

in co 


0) CO CO 
g33 

s> o o 
0-0 o 
S w co 

® v o v o 
rff s o s 
m O tO 
£0)0) 

~ c c 

G) CD CO 

t- JZ n 
CO +* ++ 

3 <0 CO 
o CO CO 

So o 

a Q) 0) 
(0 w. w. 
co a> a> 

a> 5 5 

At CD 

g com 


G*24 


David Hamilton, Keith Kelly, and Chris Culbert, 1991, 

State-of-the-Practice in Know)edqe_Based System Verification and Validati 
Expert Systems with Applications, Vol 3, No 4, p 403 - 410. 












Case Study: Accuracy of Existing Systems 

Gilbert, Hamilton, and Kelly documented the experiences and problems encountered by knowledge based systems 
developers and users. In their paper, the terms knowledge based systems and expert systems were used interchane 


>. E - 

Z ± £ o p 

S3 -C CJ J= tL 

U 2 g-“ o' 

>3 .2 TO Jh 

re T3 j= &. 

> > *" -2£ c 

w o a £ 

>>•0 CO £ O 

> s » 2 g 

£ P C >»tr 
C 2 <D W 

o e h H = 

on u-. ci 3 O 

t/5 C {« ’5 
•= 4> O 5 

^ ^ U rX 
O c xs C/5 

5* ft rri <11 


2 &5.S Q 

v s «t 3 a 

7> ‘i = £ oo 

.11 *b 

rSi/O* - 
•c o c O 
“ S3 £ 3 « 

mg’s 

.2 aj o c « 
rtU-g « = 
-o -p > x> 25 
— a v O £ 
re «*o ^ 5 
> u J: a “ 

■of?" >> 

(SO » 
lffl W otl 

c c « ^ “ 
.2 E « : « 


■S u 3 O £ 
| 

I ~ “D CL 4> 
> v: -n £ J 

g -8 gig 

^ S)JS2 5 g* 
O jg "» « © 

J= ■> w ^ 

3 5 o t- — 
re g - .2 

-c £_ 22 e ^ 
~ o 3 « w 
V-xi ex-£ 

« « s .2 w 
*3 2 
w'B « E 

|>2 iJf 

o"£°« 
•S - = >,-£ 

< 1 s 
eli 5 l-g 

o c - « .g 

f -2 g-| g 
«g IS * E 

K o 

j5\s § ft g 


g • >' 

3 P O 

cx 5 

/. O f3 

O — 

fc § £2 

■£ * c: 
u o 

.3 u «n 

■ft U W> 
g JC C 

S c S 

W *■* S 
? 22^ 

/. £c- 
£ 3 C 

£« = 

* g & 

- 3 

W5 U 

O *- w 

c v-s 
“> * * 

.2 to on 

•a £ g 

O 4J to 
u £! £ 
r£ ^ o 

U— W. (2 

o'C u 
$ - 8 

•O ~ . 

£ — c 

«,« 4> 
l/I Q. 

•33 J^x 
o ^ v 
c C c 
2® 3 « 

« « C 
^ .2 3 

-a jc jc 

g c w 

p .= c 

,2 2 J . 

t: 4) ^ 

1> CL sj C 

Q. O “ o 

« u u 3 

i S 3 S 
g g. 

t/; C ^ ?3 

T3 W — "53 

ICo < 
U m V o 
? 3 5 l - 

litf g 

ur n b 
•£ . so .55 
u- rf' C >, 

^ = CS 

jcltfi 


•o > -a 

X> i_ 

» So 

3 > 

U > 2* 
O ^ ft 

c 

s S* 

•2 3r 

co ++ 

CO 55 r- 
■j 1/3 C 

j &i 


i« s 




fe t> rS 

o-g 

CO c>. 
M CO 

a. 

§o « 

^ •£ CO 

5 13 

< § 

o 

Sft S g. 


STS 

is 

<s 

« 

JC 

u 

o 

E 8 -* 

ii -8 
< 8 l 

e e 

V S 3 

fa 


G-25 





SIGAda Artificial Intelligence Working Group 


co 

CO 1-T3JC . 
>OOOc/) 

> qlo o 

,tr ra o«- c 

q. o ■*- o 

Scaog 
D 0_C J 
o ss 2 o ■- 

O *J~ 3 4- 2. 

o > o c 
n > § o o 

07 : c O c 
js 2 o o o 

i c iff 2 . 

O O W 

o ra o 10 o) 

C(0>O)C 

li’il 

*llfi 

4-* c o O o 
c S: o 

03 Q.T3 
r O w 

'5 « 2 <5 -o 

?S|£$ 

v- S (0.— o 


<8 2-S » » 3 

S cr*- o co o 

° o«o co £ s 

o *- o <o_ S 


o a 

« | 
c o 
o o 

C*D 
O XI 

.is c 
3 CO 
cr_ 

O 3 

2: o 

5 2 

O <d 
-c c 
*- o 
o o> 

0)0 

CXI 

*5 2 

2o 

»£ 

O » 

1 E 

5 a> 


CO o 
U T- 

«5 ** 


- w 

3” > c»> 

2? o 
o> c ^ 

r- C 
. © Q- 


O *“ o co 
c CO 13 013 

n 4 • fl) I. C 

§ CO o o co 


o S* oi E 

S« |i| 

+* ci? 


© > ~ 
X> (/) o 

O *° Z 

o © « 
„ © «*> 
J2 co — 
-mo 

o © . 
-,5 10 

aj *■* 
► 2 co 
> O Q 

© :*: a. 
* _ al 


© 0£ 

* ~ 5 
_ o 

c © © 

o£ E 

ST . © 


CO o 

i& 

O ®s 

:h § 


4p (/) 
* o — 

2 ©5 

sss- 

: omluj 


G-26 












SIGAda Artificial Intelligence Working Group 


i 


V. o 

0 H- 

IS 

l! 

X 0 
■D 
O 
C £ 
0 

Eg 

Q. c 

a> sz 

> *- 

“T 3 
10 0) 

oS 

n w 
0 0 
■o£ 

£•§ 

»§ 

o 9 - 

(J 0 
0 0 

§o 

:OCM : 

cm 


c c 
0 0 

E E 


EE g 

Q. 0 .9 

o.fc t: 

— -5 0 

> cr 00 

0 0 CO. 
■O *" 0 >» 

® E °>0 

.E c,S > 0S 

Hitt 


G-28 


David Hamilton, Keith Kelly, and Chris Culbert, 1991, 

State-of-the-Practice in Knowledge Based System Verification and Validati 
Expert Systems with Applications, Vol 3, No 4, p 403 - 410. 








Case Study: Design Methodologies 


c 

.BP 

V 

-a 
v 

JC. 

S 

S3 

C3 


60 

O 

o 

■g 

-C 

<U 

E 

c 

V 

E 

o. 

o 

v 

> 

<d 

XI 

X 

c 

f3 

c 

60 

■ — C-. 

v, 

« c 

^ .2 

g § 

£ "Sl 

V- Q. 

a « 

t> iS 

5 x 
3 < 
© x: 
c .n 
x ? 

*< 

gf 

e 2 

6 3 

3 (/! 
c/5 (U 

«'5a 
•5 .o 
<*- o 

H 

2 E 


x 

o 

m 

B 

a 

60 

X 

JJ 

5 

o 

c 

60 

C 

'5b 

c 

« 

X 

u 

c 

S3 

«w 

</: 

C 

o 

3 


jy 

o 

o 

,<U 


E 

u 

CA 

>> 

m 

to 

e 

O 


o 

o_ 

Cl 

3 

c/5 

in 

■H 

"bb 

O 


8 




C 

60 

5? 

t> 

X 

V 

C /3 

o 


o 

X 


« O- 

* E 
5 Si 

O w> 

X 


c 

o 

o. 

D. 

3 

tn 

0 

*•- 


X> 

eo 


U= 

c 

8 

60 


C 

o 

M 


£ 

c 

c 

.o 

•*■■< 

CJ 

03 

u. 

CA 

-C 

03 


c r. 

u 

*c 

<L> 

C3 

-C 

£<6 

•si 

o (A 

<D 

C 

‘IP'S 

£ $ 


1 


.X -D 


t: _ -r, V 


>» 

c/: 


V 

* 

£ 


IT. 


S3 

-a 

c 

03 

VI 

W 

3 

3“ 


L> 

L> 

C 

op 

<u 

“O 

u- 

O 

>> 

a3 

*c 

S3 

> 

S3 

30 

.£ 

'7j 

3 

K 

S3 

j r. 

tn 

OJ 

CL 

© 

V 

> 

<u 

X 

S3 

X 

< 


<n 

c 

O 


x> 

i> 

£ 60 


O 


8? 

(3 O 

< •* 

|| 

~ Sb 

O c 

X <3 


in 

in 


u 

in 


a 

s 

m 

U 

L. 

© 

£ 


1 S? 

•? O 

f e 

-c a. 

I > 
*1 
« s 

-C 

<—• f/i 

C V 

3 a- 
X -3 

« S 

c/v XI 


00 


0) 

00 • 
T t/J 
V3 </> 
C 3 QJ 


S *o 



« 

"8 "1 > K 
U X « = 

X W X j>-o _ 

S 5 2 •" 3 2 

S 0-5 S3 o u 
KJ X t/) 'S u 
5 ” w ? 42 60 

§ g^-g g « 

c C is c c nd 

2 Q u !» ° s 

3 c3 P ^ 'g w 

g>i i § § & 
IS-sllL* 

« 2 o E 

x-s ts jc £3 Q C 

•« g t: « j: « 
-J g ° So^ 1/5 
O | c « « « 

^ CL j/5 3 «C 
‘ - © V 60 § - 

•c S3 
03 XS 



M c in ^ 

fix 8 if 
list If 

3 v<^x 2 

£ *2 S © c S 
o £ gX 

3 c w o 5 S 
s oo£ 5 

4 > « -M— «» w 

S|JI583 
!f 

5 | 9 sSi’s 

j||fg.S 

i« © S c u p. 

XX i 8 g.S 

^12 §«3 

6 5 r C W c 



f r ra v 

H 00 E 5 55 - 


G-29 




SIGAda Artificial Intelligence Working Group 


(1)0^ 

*£■■ * co 

C m r> 

© 


»© 

OOC^ 

&S|e 

w O O 
♦- 

©* SS2 

O) m ■■■ 3 

_ o 
5iXJs: 

** « fl) iJH 

■o © >« 

Q.CO O g 

E*2e 

© £ Q> ° 

« 2.^5 
S»Sc 
•C * o .S 

O) © ^ ♦f 

3.C CO S 
O 2. C 
£ 0> *= 

: 4- (0 CLCft: 

■<£.°5 : 


(0 o 

O r- 

E ^ 

-flS * 

s>s 

? E' r 

. ® 

. r ** 

r « 

G) > - 
JD C/) o 

f ^*o 2 
O a> • 
^ co co 
.2 co —. 
£ CD O 

O •. 

_o » 

^ T> c 
g ® O 
* *ss 
- 2: co 

5kO o 

1*1 

J5- .£ < 


2&I® 

> n a. 

co i2 x 
Q COlLU 


G-30 



Case Study: Operational Prototypes 

As discussed in the survey, 70% of the systems were operational and the rest were considered prototypes but some of 
these prototypes had operational users. The respondents could not clearly distinguish between prototypes and operational 

. » . .. ...... v f_J__ir. H r:. .. *.L .L- A J_•__I J_I__ 


C 

<D 

E 

a. 

o 

53 

> 

c 

o 

c 

sa 

c 

OX) 

V3 

a; 

O 

C3 

a 

<D 


U. 

tA 

£ 

'>5 

8 

o 

s 

o 

r 


</: 

4> 

Q. 


« 

c 

O 


a. 

o 

e 

<u 

s 

4/5 

E 

a 

4/5 

£ 

b v; 

JC 

w DX) 

. O 

C/3 .2 

E^ 

o x: 
oo S 

>» C 
C/3 C 


O 

SJ 

O- 

c/3 

K 

JC 

2 

to 

c/5 


O 

c/: 


-> w 

> tl 


E 


>5 B- 

•3 ® 


c 

O 

3 

T3 

"a 

> 


TJ 

C 

: a 


ill.! 

^ M'S ♦- 

ID S5 
C r O 

c c: 


r*- 

<u 

c C 

C G 
<u w 

OX) c 
«.= 
C c* 

1 E 

o a 

’3 ir. 

a c 

3.2 


eI ! § 


§ 8- 
U 0 





IA ti-_ X 


tT-E u-; c 

13 TJ > w E 
oog g. 
g § g .2 &• 

— C o c w 

t) Q.'— O " 

> u £ ;s § e 

- £ 3 f * « 
S£.s§-- 

■O T3 fa g 


C/3 


n «/5 
_ ° V fc- 

C OX) CX V3 CL V 

a 2 gr frg- 
o 


— 0> 

e > 


«■§ jjj s 

D.— •£ 5 
>»< O-S 5." 

p JE ^.E c -5 

£ £E |-B^ 

U W 3 ?S C 

r^. « to r IS 

^ D WJ to 
* >> «5 

oo 


i 


C ort -3 

■*= E c <= 

g S.o.2 

5 >*E 

— ^ S c *' 
■O V Cl 
C£ O 
a — _ </! 

u-« O ■ — 
O-Q SX U 

= S.S r-8 

J ViaC 
p 


V 

4/5 


« —1 
■5^a 
_ c 


S/5 

S 

.2 4> C 

tfl ‘ 

4/5 

3 

o 

C/5 


g © 


(A 

X 

I. 

O 

£ 



c 

sB 

<D 


C/3 V- 

>s3£ 
13 « 

S-S 

a E 
= a 


5 

u 


E 

t/. 


C/5 

E 

C/3 


-rs *n r- w , 

C ^ — X) ^ 

O 60*3 a ~ c 

vSB u » n 

f?.Z O -3! C g. 

</) 

E 


1 

•a 

5 i 


O J> 

T> S 


oo 

o 
e 

W! f* V3 
>s X >S 

o 5 jy 
13|oS«-§ 

| 1/5 w.S 

“ T3 .E — o. 3 
= E-g>2 c C 

E'gli* ® g 

-■8 = 

X fc « C 

5 - c uBJ « 
£ 4>> = .s^“ 

° O = c 5 E ■« 
>*« ° 5 « c 

“ M 6. 

3 

■■ 3^*3 8 1 

2 .5 8.3 ^ 

12 5. c« .E T3 

oj a Jj 

T3 -“ F 5> 

3 V ea T3 .E 
_ Q.J- c 00 

E a C 

g o « « V 

3 © p X E 
q.^oc 


C5 

00 o . 

u a i 


cs 

I 

*o 


&c s 


dC ci. £ w 
g « 2 |-n 

4/5 •— ?< 


3 

4/5 


3 

2 g. 0-0 ^ 
s£k|s. 


c v ■== 

sis 

Si & 

-■ o 

15 

all |i| 

JJ c .S 7) y > 

« -K I « 1 - 
S «g-s i-g 

P«^ . m ii C 

X — v c o 

« CuS <A « . a 

O dj 3 4A «- “! 

s Sc u 

Meg 

H V u 

Bui. u 
0 0 3 
>> J. <A 

c 



G-31 




