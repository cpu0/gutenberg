AD-A229 270 



Research Product 90-26 


Tactical Planning Workstation 
Software Description 



DT1C 

ELECTE 
NOVI 41990 




September 1990 

Field Unit at Fort Leavenworth, Kansas 
Systems Research Laboratory 

U.S. Army Research Institute for the Behavioral and Social Sciences 


Approved for public release; dfctibution is unlimited 

90 n 


X * 176 


UNCLASSIFIED 


UNIFICATION OF THIS PAGE 


REPORT DOCUMENTATION PAGE 


la. REPORT SECURITY CLASSIFICATION 
Unclassified 


2a. SECURITY CLASSIFICATION AUTHORITY 


2b. DECLASSIFICATION /DOWNGRADING SCHEDULE 


Form Approved 
OMB No. 0704-0188 


1b. RESTRICTIVE MARKINGS 


3 . DISTRIBUTION/AVAILABILITY OF REPORT 
Approved for public release; 

distribution is unlimited. 


4. PERFORMING ORGANIZATION REPORT NUMBER(S) 


5. MONITORING ORGANIZATION REPORT NUMBER(S) 
ARI- Research Product 90-26 


6a. NAME OF PERFORMING ORGANIZATION 
Science Applications 
International Corporation 


6c ADDRESS (City. State, and ZIP Code) 

424 Delaware, Suite C3 
Leavenworth, KS 66048 


8a. NAME OF FUNDING/SPONSORING 

ORQanizatiqnU.S. Army Research 
Institute for the Behavioral 
and Social Sciences 


8c ADDRESS (City, State, and ZIP Code) 
5001 Eisenhower Avenue 
Alexandria, VA 22333-5600 


6b. OFFICE SYM80L 
(If applicable) 


8b. OFFICE SYMBOL 
(If applicable) 

PERI-S 


7a. NAME OF MONITORING ORGANIZATION 
U.S. Army Research Institute 

Field Unit at Fort Leavenworth, KS 


7b. ADDRESS (City, State, and ZIP Code) 

P.0. Box 3407 

Fort Leavenworth, KS 66027-0347 


9. PROCUREMENT INSTRUMENT IDENTIFICATION NUMSER 


9-X5E-7825E-1 


10. SOURCE OF FUNDING NUMBERS 


PROGRAM 
ELEMENT NO. 

62785A 


11. TITLE (Include Security Classification) 

Tactical Planning Workstation Software Description 


PROJECT 

TASK 

NO. 

NO. 

790 

1304 


WORK UNIT 


12. PERSONAL AUTHOR(S) 
Packard, Bruce R. 


13a. TYPE OF REPORT 
Interim 


13b. TIME COVERED 
FROM 88/12 TO 90/05 


14. OATE OF REPORT (Year, Month, Day) 15. PAGE COUNT 

1990, September 756 


16. SUPPLEMENTARY notation Dr, Stanley M. Halpin, Contracting Officer s Representative, see 
related document, Flanagan, J. P. and Fallesen, J. J., Tactical Planning Workstation 
Functional Description, ARI Research Product. 


17. 

COSATI COOES | 

FIELD 

GROUP 

SUB-GROUP j 


18. SUBJECT TERMS ( Continue on reverse if necessary and identify by block number) j 

Command and control 

Software design 

Workstation 

Decision support 

Software architecture 

Ada 

Tactical planning 

Scenario development 

X Windows 


19. ABSTRACT (Continue on reverse if necessary and identify by block number) 

'---^This document describes the Tactical Planning Workstation software, including a dBASE 

scenario development system and a dBASE data recording and analysis system. These systems 
are integrated into the Experimental Development Demonstration and Integration Center (EDDIC) 
facility located at the Army Research Institute Field Unit at Fort Leavenworth, Kansas. 

The Tactical Planning Workstation Functional Description provides a description of the sys¬ 
tem and definitions of terms. This software document is for programmers who require 
detailed knowledge of the software, data files, and command files. 

The overall system architecture of the Tactical Planning Workstation is in Section 2. 
Section 3 describes the operations and maintenance procedures. It includes a description of 
the command files, dBASE operating instructions, installation procedures, and procedures to 
adapt the system for specific experiments. Section 4 describes the software and contains 
Ada Utilities, Ada programs, C utilities, and dBASE programs._—_ _ 

(Continued) 


20. DISTRIBUTION/AVAILABILITY OF A8STRACT 
Q UNCLASSIFIED/UNLIMITED □ SAME AS RPT. 


22a. NAME OF RESPONSIBLE INDIVIDUAL 
Jon J. F 


DO Form 1473. JUN 86 


21. ABSTRACT SECURITY CLASSIFICATION 
□ OTIC USERS Unclassified 


22b TELEPHONE (Include Area Code) 22c. OFFICE SYMBOL 

(913) 684-4933 PERI-SL 


Previous editions are obsolete. SECURITY CLASSIFICATION OF THIS PAGE 

UNCLASSIFIED 


i 







































UNCLASSIFIED 


SECURITY CLASSIFICATION OF THIS PAGE(»>l«n Data Bnlarad) 


ARI Research Product 90-26 


ABSTRACT (Continued) 


Appendixes A, B, and C contain the Ada package specifications for the Ada 
utilities, the Ada programs, and the Ada and C bindings. Appendixes D and E 
describe the data base formats for the EDDIC workstation data bases and for the 
PC-based dBASE data bases. Appendix F describes the Unix environment 
variables. f x 


" (^ 


UNCLASSIFIED 


SECURITY CLASSIFICATION OF this PAGEf>»Ti»rt Data Bntarad) 

ii 








DISCLAIMS! NOTICK 



THIS DOCUMENT IS BEST 
QUALITY AVAILABLE. THE COPY 
FURNISHED TO D7TC CONTAINED 
A SIGNIFICANT NUMBER OF 
PAGES WHICH DO NOT 
REPRODUCE LEGIBLY. 







Research Product 90-26 


Tactical Planning Workstation Software Description 

Bruce R. Packard 

Science Applications International Corp. 


Field Unit at Fort Leavenworth, Kansas 
Stanley M. Halpin, Chief 

Systems Research Laboratory 
Robin L. Keesee, Director 

U.S. Army Research Institute for the Behavioral and Social Sciences 
5001 Eisenhower Avenue, Alexandria, Virginia 22333-5600 

Office, Deputy Chief of Staff for Personnel 
Department of the Army 

September 1990 


Army Project Number Human Performance Effectiveness 

2Q162785A790 and Simulation 


Approved for public roleuo; dtotrbution h unlimited. 


« 


U.S. ARMY RESEARCH INSTITUTE 

FOR THE BEHAVIORAL AND SOCIAL SCIENCES 

A Field Operating Agency Under the Jurisdiction 
of the Deputy Chief of Staff for Personnel 


EDGAR M. JOHNSON JON W. BLADES 

Technical Director COL, IN 

Commanding 


Research accomplished under contract for 
the Department of the Army 

Science Applications International Corp. 

Technical review by 

Jon J. Falleson 
Alfred Taylor 


Aooesslon For 


HTIS GRAftI 


DTIC TAB 


Unannounced 

□ 

Justification_ 

By 


Distribution/ 



Availability Codes 



[Avail and/or 
Special 



NOTICES 



FINAL DISPOSITION: This report may be destroyed when it is no longer needed. Please do not 
return it to the U.S. Army Research Institute for the Behavioral and Social Sciences. 


NOTE: The findings in this report are not to be construed as an official Department of the Army 
position, unless so designated by other authorized documents. 



FOREWORD 


This document provides the software description for the Tactical Planning 
Workstation developed by the Fort Leavenworth Field Unit. The purpose of the 
workstation is to demonstrate and assess an integrated set of information and 
decision aids for division-level staff operations. This document is intended for 
software managers and programmers who are supporting requirements generation 
for tactical command and control systems. The workstation is being used by the 
Field Unit in experiments on the utility of decision support systems for staff 
operations. The software also has been transported to other Army laboratories for 
their use and demonstrations. 


EDGAR M. JOHNSON 
Technical Director 


v 






TACTICAL PLANNING WORKSTATION SOFTWARE DESCRIPTION 


CONTENTS _ 

Page 

INTRODUCTION . 1-1 

SYSTEM ARCHITECTURE. 2-1 

File Server. 2-2 

Workstation . 2-4 

OPERATIONS AND MAINTENANCE. 3-1 

Running and Maintaining the System. 3-1 

Installation Instructions. 3-19 

Customization Procedures. 3-21 

SOFTWARE . 4-1 

Ada Utilities . 4-1 

Ada Programs . 4-52 

C Utilities. 4-108 

dBASE Programs . 4-119 

APPENDIX A. ADA UTILITY SPECIFICATIONS. A-1 

B. ADA PROGRAM SPECIFICATIONS . B-1 

C. C BINDING SPECIFICATIONS. C-1 

D. EDDIC DATA BASES. D-1 

E. EDDIC dBASE DATA BASES . E-1 

F. EDDIC ENVIRONMENT VARIABLES . F-1 


vii 






















CONTENTS (Continued) 


Page 

LIST OF TABLES 

Table 3-1. Echelon codes. 3-7 

3-2. Unit type codes . 3-7 

3-3. Battle function codes. 3-8 

3-4. Unit relationship codes . 3-8 

3-5. Unit activity codes. 3-9 

3-6. Unit mission codes. 3-9 

3-7. Control measure types . 3-11 

3-8. Product description files. 3-22 

3- 9. Tactical map menu files. 3-23 

3-10. Tactical situation files. 3-25 

3-11. Task organization tool files. 3-26 

4- 1. Data required by ARREPORT. 4-134 

4-2. Data required by RPTWGAM . 4-136 

4-3. Data required by RPTCCOA. 4-138 

4-4. EDDIC application file usage . 4-139 

4-5. EDDIC export application file usage . 4-146 

4-6. EDDIC scenario application file usage. 4-147 


viii 






















CONTENTS (Continued) 


Page 

Table E-1. EDDIC Sun-based data bases . E-1 

E-2. EDDIC PC-based data bases. E-13 

LIST OF FIGURES 

Figure 1-1. Directory tree structure . 1-1 

2-1. Software distribution . 2-1 

2-2. File server . 2-2 

2-3. Workstation . 2-4 

4-1. Tree display options . 4-25 

4-2. Form field editors . 4-28 

4-3. Internet communications . 4-32 

4-4. Tactical map packages . 4-36 














TACTICAL PLANNING WORKSTATION SOFTWARE DESCRIPTION 

1. INTRODUCTION 

This document describes the Tactical Planning Workstation software, the dBASE 
scenario development system, and the dBASE data recording and analysis system. These 
systems are integrated into the Experimental Development Demonstration and Integration 
Center (EDDIC) facility. Reference the Tactical Planning Workstation functional description 
document for a description of the system and for definitions of terms. This document is for 
programmers who require detailed knowledge of the software, data files, and/or command 
files. 


The overall system architecture of the Tactical Planning Workstation is in Section 2. 
Section 3 describes the operations and maintenance procedures. It includes a description of 
the command files, dBASE operating instructions, installation procedures, and procedures to 
adapt the system for specific experiments. Section 4 describes the software and contains 
Ada Utilities, Ada programs, C utilities, and dBASE programs. 

Appendices A, B and C contain the Ada package specifications for the Ada utilities, 
the Ada programs and the Ada to C bindings. Appendices D and E describe the data base 
formats for the EDDIC workstation data bases and for the PC-based dBASE data bases. 
Appendix F describes the Unix environment variables. 

Figure 1-1 shows a high level tree diagram of the Tactical Planning Workstation 
(EDDIC) directory structure. The Ada directory contains the Ada libraries and Ada source 
code. The data files are in the data directory and the gen directory contains the program 
executables and the C object libraries. The command files are in the shell directory and the 
C source code is in the source directory. 


EDDIC Directory 


Ada data gen sliell source 


Figure 1-1. Directory Tree Structure 


1-1 




2. SYSTEM ARCHITECTURE 


The Tactical Planning Workstation is a distributed network system consisting of a 
server and numerous workstations as shown in Figure 2-1. The server contains the data 
base managers and data routers and is a repository for Network File System (NFS; shared 
files. The high-resolution color workstations contain the software to control the display of and 
interaction with the windows. The PCs use the PC-NFS package to load scenario data into 
the server and to transfer data recorded during an experiment to dBASE for data organization 
and analysis. 



Figure 2-1. Software Distribetion 


2-1 




















2.1 FILE SERVER 


Figure 2*2 shows the server processes. The routers are message routing processes 
that handle all interaction between the window display manager processes in the workstations 
and the data base managers in the server. They also perform all the data recording in the 
system. The following routers are part of the server: 



Figure 2-2. File Server 


REFERENCE - Handles the message passing duties for all Reference and Help data. 
The View Reference Window requests the reference data through the router and the 
Reference Data Base Ma> .ger provides the data. The Help Button process requests 
the help data through the router and the Help Data Base Manager provides the data. 

C2 PRODUCT - Handles the message passing duties for all Command and Control 
(C2) Products. The View Situation window views the products, the Build window 
builds and transmits the products, the View Message window receives and processes 
the messages, and the C2 Product Data Base Manager maintains the products. 


2*2 













SITUATION - Handles the message passing duties for all tactical situation data such 
as unit strengths and locations. The View Situation, Build, and View Messages 
windows require the situation data for the display of the tactical map overlays and the 
Task Organization Tool requires the situation data for display of the task organization. 
The Situation Data Base Manager maintains the situation data. 

CONTROL - Handles the message passing duties for ail experiment control data and 
color lookup table updates. Hie Experiment Display window generates the experiment 
control products and the Control Display window displays them. The Control Data 
Base Manager maintains the Experiment Control Products. The Map Control software 
passes the color lookup table updates through the router to the Station Control 
Manager on the workstation. 

The Data Base Managers maintain the data bases and provide access to the data in 
the data bases through the routers. The following data base managers are part of the EDDIC 
server: 


HELP - Maintains the help data base. The help data base contains the help messages 
displayed in the Help window on the workstations. 

REFERENCE - Maintains the technical reference data base. The reference data base 
contains the products displayed in the View Reference window on the workstations. 

C2 PRODUCT - Maintains the command and control data base. The C2 product data 
base contains textual products, computer-generated report layouts, and tactical 
overlay descriptions. In addition to sending products to requesting processes, this 
process is responsible for generating the computer-generated products using the 
product layout along with data from the Situation Data Base Manager. This process 
also maintains all messages generated in the Build window and passes the messages 
to the View Message window for display. 

SITUATION - Maintains the situation data base. The situation data base contains the 
current and past tactical scenario data. The scenario data includes unit strengths, unit 
locations, task organization, control measures and obstacles. This process passes 
situation data to requesting processes through the Situation Data Router and updates 
the data base with data received from the Build window and the Task Organization 
Tool in the Tool window. 

CONTROL • Maintains the experiment control data base. The experiment control data 
base contains the predefined control messages and any new messages defined in the 
Experimenter Display window during an experiment. The Control Display window 
displays the experiment control messages. 


2-3 



2.2 WORKSTATION 


Figure 2-3 shows the workstation processes. It also shows the connection of the 
processes to the window creation buttons and the use of server routers by each process. 
The workstation processes consist of Station Control processes and Window Display 
Manager processes. 



Figure 2-3. Workstation 


The Station Control processes are responsible for initializing the screen, interfacing 
with the window creation buttons, controlling the color lookup table and the map legend. The 
following processes are the Station Control processes: 

STATION MANAGER - Controls the color lookup table for the workstation and controls 
the interface for the map legend button. It also starts up the View Message Window 
process and the Control Window process when it receives a message and a window 


2-4 































of the appropriate type does not exist. The Station Manager uses the Control Router 
to receive color lookup table updates and to transmit color lookup table status to 
requesting processes. Currently, the only processes that update the lookup table are 
those which contain a tactical map. Only one Station Manager process exists in a 
workstation. 

SCREEN MANAGER - The Screen Manager is the process running in the Console Icon 
(upper left corner of the screen). It displays the window creation buttons along the 
top of the screen and waits for a select (left) mouse button click on one of the 
buttons. When a click occurs, the Screen Manager starts up the appropriate Window 
Display Manager process. Only one Screen Manager exists in a workstation. The 
Screen Manager is the only process that is written in C. 

X SERVER - The X*Window server is in complete control of the workstation screen and 
the Console Icon. All processes that interact with the screen are clients to the X- 
Window server. The Tactical Planning Workstation is currently using Version 10, 
Release 4 of X-Windows. 

The Window Display Manager processes are responsible for the contents of the 
Tactical Planning Workstation specific windows. The Screen Manager starts the Window 
Display Manager processes, except the Help window, when the user clicks the mouse select 
button on one of the window creation buttons. The Help Window Manager starts during 
workstation initialization. The following processes are the Window Display Managers: 

HELP - Controls the interaction with the Help Icon and the Help Windows. The Help 
Display Manager uses Ada tasking to allow the display of multiple Help Windows at 
the same time. A separate Ada task controls each Help Window. This process uses 
the Reference Router to obtain a list of the help products for display of the walking 
menu on the Help Icon and to request help products from the Help Data Base 
Manager. Only one Help Display Manager exists in a workstation. 

VIEW REFERENCE * Controls the display of and Interaction with the View Technical 
Reference Windows. The Screen Manager initiates this process when the user clicks 
the select mouse button on the VW REF button. It uses the Reference Router to 
obtain a list of the reference products and to request products from the Reference 
Data Base Manager. Up to seven View Reference processes can exist at one time. 

VIEW SITUATION - Controls the display of and interaction with the View Situation 
Windows. The Screen Manager initiates this process when the user clicks the select 
mouse button on the VW SIT button. It uses the C2 Product Router to obtain a list of 
the C2 products and to request products from the C2 Product Data Base Manager. It 
uses the Situation Router to obtain tactical overlay data when the product is a tactical 
map and uses the Control Router for color lookup table updates. Up to seven View 
Situation processes can exist at one time. 


2-5 



VIEW MESSAGE - Controls the display of and interaction with the View Message 
Windows. The Screen Manager initiates this process when the user clicks the select 
mouse button on the VW MSG button or the Station Manager initiates it when it 
receives a message but no View Message Window is open, it uses the C2 Product 
Router to obtain the message log and to request products from the C2 Product Data 
Base Manager. It uses the Situation Router to obtain tactical overlay data when the 
product is a tactical map and uses the Control Router for color lookup table updates. 
Up to seven View Message processes can exist at one time. 

BUILD - Controls the display of and interaction with the Build Windows. The Screen 
Manager initiates this process when the user clicks the select mouse button on the 
BUILD button. It uses the C2 Product Router to obtain a list of the build products, to 
request a product from the C2 Product Data Base Manager, and to send a message 
to other participants. When the product is a tactical overlay, it uses the Situation 
Router to obtain the tactical overlay data and to update the Situation Data Base with 
changes made to the tactical overlay. It uses the Control Router for color lookup table 
updates. Up to seven Build processes can exist at one time. 

TOOL - Controls the display of and interaction with the Tool Windows. The Screen 
Manager initiates this process when the user clicks the select mouse button on the 
TOOL button. It uses the Situation router as part of the Task Organization Tool to 
obtain the current task organization and to send task organization updates to the 
Situation Data Base Manager. It sends all window control interactions to the Control 
Router for data recording. Up to seven Tool processes can exist at one time. 

EXPERIMENT CONTROL - The Experiment Control process is one of two different 
processes depending upon if the workstation is a participant or experimenter 
workstation. 

If the workstation is a participant workstation, this process controls the display 
of and interaction with the Control Display Windows. The Station Manager initiates 
this process when it receives an Experiment Control Message and no Control Window 
exists. It uses the Control Router to request the control message to display and to 
route the message back to the experimenter if the message requires an answer. Up 
to seven Control Display processes can exist at one time. 

If the workstation is an experimenter workstation, this process controls the 
display of and interaction with the Experiment Display Windows. The Screen Manager 
initiates this process when the experimenter clicks the select mouse button on the 
CONTROL button. It uses the Control Router to obtain a list of Experiment Control 
products, to request a product from the Control Data Base Manager, and to route an 
Experiment Control Message to the appropriate participants. Up to seven Experiment 
Display processes can exist at one time. 


2-6 





3. OPERATIONS AND MAINTENANCE 


This section describes the procedures for running and maintaining the Tactical 
Planning Workstation and the PC based dBASE systems, instructions for installing the 
workstation software on another compatible system, and procedures to customize the system 
for an experiment. 


3.1 RUNNING AND MAINTAINING THE SYSTEM 

The system consists of programs that run on the Sun system and on Personal 
Computers (PC). The programs that run on the Sun system are executed by command files 
and are described in section 3.1.1 The PC based programs are dBASE programs and are 
used for maintaining the scenario and performing post-experiment data analysis. The 
procedures for running the programs are contained in the follow sections. 


3.1.1 Tactical Planning Workstation Command Files 

Workstation command files provide an easy method to run the Tactical Planning 
Workstation system and to maintain the data bases. The command files are in the shell 
directory and have a suffix of ".csh". 

The following command files perform different aspects of running the system: 

alone.csh - Starts both the server and workstation processes in one computer. For 
optimum performance, the server and workstation should be different computers. 
Terminate the ’xterm' window to stop fills command file. 

demo.csh - Starts the interface on a high-resolution color workstation. The file server 
must be running on another computer and the environment variable ’server’ must be 
set to the server computer name before executing this command file. Terminate the 
■xterm' window to stop this command file. 

record_convert.csh - Converts the data recorded during an experiment to ASCII files 
for import into dBASE. Stop the file server (stop_eddic.csh) before executing this 
command file. 

server.csh - Starts the file server processes in a computer. A high-resolution screen is 
not necessary for the server processes. Terminate the server processes by executing 
the 'stop_eddic' command file. 


3-1 



stop_eddic.csh - Stops the file server. To insure all data bases are properly closed, 
always use this command file to terminate the Tactical Planning Workstation system. 
This command will only work on the computer where the server is running. 

The following command files perform the data base maintenance functions: 

build.csh - Builds all the data bases from the ASCII source files. This command file 
initializes the following data bases: C2 Product, Experiment Control, Help, Reference, 
and Situation Data. Execute this command file on the file server if possible. It takes 
approximately twenty minutes to execute. 

help build.csh - Builds the Help Product data base and Help walking menu description 
file. Because the Help data base is a read-only data base, the only time you need to 
execute this command file is when the help source file has changed. See section 3.3.1 
for help source file update instructions. 

offgerm_c2_product_build.csh - Builds the C2 Product data base and the View 
Situation and Build walking menu description files for the Central Germany offensive 
scenario. Execute this command file when the C2 Product source file is updated or 
when the C2 Product data base requires reinitialization. Reinitialization is required to 
empty the message queues or when the allocated file space for the C2 Product data 
base is exceeded (causes a 'CONSTRAINT ERROR’ in 

CDB_C2_PRODUCT_DB_MANAGER). See section 3.3.1 for C2 product source file 
update instructions. 

offgermcontrolbuild.csh - Builds the Experiment Control data base and the Control 
Product walking menu description file for the Central Germany offensive scenario. 
Execute this command file when the Control source file is updated or when the 
Control data base requires reinitialization. Reinitialization is required when the 
allocated file space for the Control data base is exceeded (causes a 'CONSTRAINT 
ERROR’ in HDB_HELP_DB_MANAGER). See section 3.3.1 for Experiment control 
source file update instructions. 

offgerm_load_higher_ech.csh - Loads the unit asset portions of the Situation Data 
Base for the parent units. The assets of a parent unit are equal to the sum of the 
assets of the children units. Execute this command file whenever the Situation Data 
Base is rebuilt (offgerm_situation_build.csh). Execute this command file on the file 
server if possible. It takes approximately ten minutes to execute. 

offgerm_reference_build.csh - Builds the Reference Product data base and the 
Reference walking menu description file. Because the Reference data base is a read¬ 
only data base, the only time you need to execute this command file is when the 
reference source file has changed. See section 3.3.1 for reference source file update 
instructions. 


3-2 







offgerm_situation_build.csh - Builds the Situation Data base for the Central Germany 
offensive scenario. Execute this command file when any of the situation data source 
files are updated or when the Situation Data base requires reinitialization. 
Reinitialization is required to eliminate changes to the tactical overlay or task 
organization or when the allocated file space for the Situation Data base is exceeded 
(causes a ’CONSTRAINT ERROR' in SDB_SITUATiON_DB_MANAGER). See section 
3.3.3 for Situation Data source file update instructions. 

reference_hardcopy.csh • Produces a listing file of all the products contained in the 
Reference data base. The Reference walking menu description file is used to define 
the list of reference products. 

report_hardcopy.csh - Produces a listing file of all the products contained in the C2 
Product data base. The View Situation walking menu description file is used to define 
the list of C2 products. 


3.1.2 Scenario Maintainor 


This section describes how to run the scenario maintainer program. It is a dBASE 
program that runs on an IBM PC or compatible clone. 


3.1.2.1 Getting Started 

A. Power up the PC. (should come up with default drive = D:) 

B. Change the default directory to the scenario directory by entering: 

CD D:\SCENARIO 
(this MUST be D:\SCENARIO) 

C. Start DBASE SCENARIO PROGRAM by entering: 

DBASE SCENARIO 


3.1.2.2 dBASE General Rules 

The following rules apply to the interacting with the screen layouts and menus used in 
the scenario program. 

A. Selecting Options from a Menu 

Options are selected from a menu by typing in the number that is directly left of 
the desired option followed by a RETURN. 


3-3 






B. Selecting Items from a List 


Items are selected from a list by using the arrow, PGUP, or PGDN keys to 
backlight the desired item followed by an ESC. 

C. Entering Data in Screen Layouts 

Data is entered in the fields by typing the input data followed by a RETURN. 
The RETURN will automatically advance to the next field. The arrow keys may 
be used to move to other fields on the screen. 

D. Terminating the Entry of Data in Screen Layouts 

To Write the changes to the data base enter a CTRL W. 

To Quit the changes without saving enter a CTRL Q. 

E. Overhitting Keys 

All keyboard inputs are buffered up until the computer can process them. 
Because of the time required to update the data base, it may appear at times 
that the computer is not working. Wait for a prompt before hitting multiple 
RETURNS. In many situations multiple returns will cause exiting from a 
menu and possibly out of dBASE. 


3.1.2.3 Scenario Program Operation 

The program is designed to use data from either an offensive or defensive scenario. 
The two scenarios were developed by SAIC as part of the C2LAB prototype development. The 
choice of scenario must be made immediately after starting the program and can only be 
changed by exiting and restarting the program. The same screen provides for a selection of 
side, Blue or Red. 

This selection will be followed by a prompt for selection of the desired day of the 
scenario, if the offensive or defensive scenario was chosen. Days are numbered in 
chronological order, 1 through 3, and then Current. The selection of the day will be followed 
by the program main menu. 

The following options are available from the scenario main menu: 

1. Base Unit Update 

2. Copy One Day to Another 

3. Adjust Unit Strength by % 

4. Adjust Unit Strength by # 




5. Adjust Personnel Strength by Loss/Gain Factors 

6. Task Organize Units 

7. Report Unit Strength 

8. OPLAN Update 

9. DAY Update 

10. Control Measure Update 

11. Change Scenario Day 

A. Base Unit Update 

This option will provide the following menu. 

1. Add Base Unit 

2. Change Base Unit 

3. Remove a Base Unit 

4. Display a Base Unit 

5. Print Base Unit Data Base 

0. EXIT 

This option provides the capability to Add, Change, Delete, Display or Print the 
Base Units. The Base Units are generic units that define the authorized assets for 
different unit types. They are used as part of the company definition in the Task 
Organization Option. 

B. Copy One Day to Another 

This option provides the capability to copy the Task Organization and current 
strengths from Day 1 to Day 2, Day 2 to Day 3, or Day 3 to Current. This option 
should be executed only when data for the day to be copied from is complete. It will 
destroy any data which exists in the Copy To data bases. 

C. Adjust Unit Strength by % 

This option provides the capability to adjust the assets for each company 
assigned to a battalion, by a percent When selected, a list of all battalion size units 
will appear. The desired unit is selected by positioning the cursor (backlight) and 
pressing ESC(ape). The officers, enlisted personnel, and total equipment can each 
be adjusted for the desired percentage strength. 

D. Adjust Unit Strength by # 

This option provides the capability to adjust the number of officers, enlisted 
personnel, and each equipment line item assigned to a company. When selected, a 


3-5 






list of all company size units will appear. The desired company is selected by 
positioning the cursor (backlight) and pressing ESC(ape). 

E. Adjust Personnel Strength by Loss/Gain Factors 

This option will provide the following menu: 

1. Update Loss Rate Data for DAY X 

2. Adjust Strength for DAY X 

3. Print Loss Rate Data for DAY X 

0. EXIT 

This option provides the capability to adjust the personnel strength of each 
company sized unit using a loss rate factor for each category of personnel, officer 
and enlisted. A single gain rate factor is used for both officers and enlisted 
personnel. These factors must be input for each company sized unit. The loss rate 
data base is required for each day, except Day 1. Losses are computed by applying 
the loss rate factor to the unit strength of the previous day. Gains are computed by 
applying the gain factor to the unit shortage after the losses have been computed and 
subtracted. A loss and gain report is available showing the losses and gains and net 
for officers, enlisted, and total. The routine may be run without actually changing the 
strengths in the company data base, this allows trial runs to be made and factors to 
be adjusted prior to updating the company data base. 

F. Task Organize Units 

This option provides the following menu: 

1. Update Company Data Base 

2. Battalion Task Organize 

3. Brigade Task Organize 

4. Division Task Organize 

5. Verify Task Organization 

6. Print Task Organization 

7. Print Unit Status Report 

0. EXIT 

This option provides the capability to define company level units in terms of the 
base units, task organize companies into battalions, battalions into brigades, and 
brigades into divisions, verify the task organization, print the task organization, and 
print unit status reports. Tables 3-1 through 3-6 shows the codes to use for echelon, 
unit type, battle function, unit relationship, activity, and mission and their 
corresponding enumeration value In the SDB_SITUATION_DB package. 


3-6 





Table 3-1. Echelon Codes 


Echelon 

SDB FORCE ECHELON 

ARMGRP 

ARMY GROUP 

FRONT 

FRONT 

ARMY 

ARMY 

CORPS 

CORPS 

DIV 

DIVISION 

BOE 

BRIGADE 

RGMT 

REGIMENT 

GROUP 

GROUP 

BN 

BATTALION 

SQDRN 

SQUADRON 

CO 

COMPANY 

BTRY 

BATTERY 

TROOP 

TROOP 

PLTN 

PLATOON 

SECT 

SECTION 

SQUAD 

SQUAD 

TEAM 

TEAM 

Table 3-2. 

Unit Type Codes 

Typ-g. 

SDB UNIT TYPE 

AIRBRN 

AIRBORNE 

AIRASL 

AIR ASSAULT 

AIRDEF 

AIR DEFENSE 

AIRDFM 

AIR DEFENSE MISSLE 

ANTARM 

ANTI ARMOR 

ARMCAV 

ARMOR CAV 

ARMTNK 

ARMOR TANK 

ARTYTW 

ARTY TOWED 

ARTYSP 

arty"sp 

ATKHEL 

ATTACK HELICOPTER 

AVATON 

AVIATION 

AVATFW 

AVIATION FW 

AVATRW 

AV1AT!0N~RW 

BAND 

BAND 

CAVRCN 

CAV RECON 

CHEM 

CHEMICAL 

CIVAFR 

CIVIL_AFFAIRS 

CAA 

COMBINED ARMS ARMY 

ENGR 

engineer” 

FNANCE 

FINANCE 


3-7 





Table 3-2. Unit Type Codes (Continued) 


lyee 

SDB UNrr TYPE 

INFMCH 

INF MECHANIZED 

INFMTR 

inf’motorized 

MAINT 

MAINTENANCE 

MEDICL 

MEDICAL 

MILINT 

MILITARY INTEL 

MILPOL 

MIUTARY_POLICE 

ORDNCE 

ORDNANCE 

PERSVC 

PERS SVC 

PSYOPS 

PSYCH OPNS 

QMASTR 

QUATERMASTER 

RCKART 

ROCKET_ARTILLERY 

SIGNAL 

SIGNAL 

SPFORC 

SPECIAL FORCES 

SPTCOM 

SPT COM 

SUPSRV 

SUPPLY SERVICES 

S2SMSL 

SURF TO SURF MISSLE 

TRANSP 

TRANSPORTATION 

Table 3-3. 

Battle Function Codes 

Battle Function 

SDB BATTLE FUNCTION 

COMBAT 

COMBAT MANEUVER 

CS 

COMBAT SUPPORT 

CSS 

COMBAT_SERVICE SUPPORT 

COMMIT 

COMMITTED 

REINF 

REINFORCE 

ARTIL 

ARTILLERY 

Table 3-4. 

Unit Relationship Codes 

Relate 

SDB BLUEFOR TO RELATE 

ORGNIC 

ORGANIC ASSIGNED 

ATTACH 

ATTACHED 

DS 

DS 

GS 

GS 

GSR 

GSR 

OPCON 

OPCON 


3-8 




Table 3-5. Unit Activity Codes 


Activity 

SDB FORCE ACTIVrTY 

ADVGRD 

ADVANCE GUARD 

ADVANC 

ADVANCING 

AIRAST 

AIR ASSAULT 

ARBAST 

AIRBORNE ASSAULT 

ARMAST 

airmobile" ASSAULT 

AMPLND 

AMPHIBIOUS_LAND!NG 

CLOSNG 

CLOSING 

COMNCT 

COMMUNICATION 

CNTATK 

COUNTER ATTACK 

COVFRC 

COVERING FORCE 

XPOLIT 

EXPLOITATION 

FLNKGD 

FLANK_GUARD 

INFILT 

INFILTRATION 

MAINTN 

MAINTAINING 

MANAGE 

MANAGING 

OCCUPY 

OCCUPY 

PENETR 

PENETRATION 

PURSUT 

PURSUrr 

PREPAR 

PREPARING 

RAOPS 

REAR AREA OPERATIONS 

REARGD 

REAR GUARD 

REAMFl 

REARM REFUEL 

RECON 

RECONNAISSANCE 

REINF 

REINFORCING 

REORGN 

REORGANIZATION 

RiVCRS 

RIVER CROSSING 

SEARCH 

SEARCH 

SCREEN 

SCREEN 

SERVIC 

SERVICE 

SUPPLY 

SUPPLY 

TRNSPT 

TRANSPORT 

Table 3-6. 

Unit Mission Codes 

Misson 

SDB FORCE MISSION 

ATTACK 

ATTACK 

OEFEND 

DEFEND 

DELAYD 

DELAYED 

RESERV 

RESERVE 

SUPPRT 

SUPPORT 

WTHDR 

WITHDRAW 


3-9 




The task organization verification goes through the task organization verifying the unit 
names. An error report is generated on the printer if any errors are found. (The error tells 
you that the name listed in the higher level organization cannot be found at the lower level.) 
Invalid companies must be corrected in either the battalion task organization or in the 
company data base. Invalid battalions must be corrected in either the-brigade task 
organization or the battalion task organization. Invalid brigades must be corrected in either 
the division task organization or the brigade task organization. 

G. Report Unit Strength 

This option provides the following menu: 

1. Company Strength 

2. Battalion Strength 

3. Brigade Strength 

4. Division Strength 

5. Print Percent Strength, Units of a Brigade 

6. Page or Line Feed 

0. EXIT 

This option provides the capability to get reports of actual unit strength for 
each organization from division (all brigades in the brigade data base) to company 
level. The report provides the authorized, on-hand, and the percentage on-hand for 
officers, enlisted, and each line item of equipment. An option is also provided to print 
out the percentage strength, officer, enlisted, and total equipment, for each unit with 
recaps for each battalion of a brigade. 

H. OPLAN Update 

This option provides the following menu: 


1. Add OPLAN 

2. Change OPLAN 

3. Delete OPLAN 

4. OPLAN Report 

0. Exit 

This option provides the capability to Add, Change, Delete, Display or Print the 
Operation Plans (OPLAN). The OPLAN system provides a convenient way to 
segregate planning situation data. There should always be a current situation OPLAN 
along with a working OPLAN for each participant. 


3-10 






I. DAY Update 


This option provides the following menu: 


1. Add DAY 

2. Change DAY 

3. Delete DAY 

4. DAY Report 

0. Exit 

This option provides the capability to Add, Change, Delete, Display, or Print 
the Days contained in the scenario. Each day has a list of data bases that contain 
the scenario data for that day. ff data do not change from one day to the next, the 
same file name can be used for both days. 

J. Control Measure Update 

This option provides the following menu: 

1. Add Control Measure 

2. Change Control Measure 

3. Delete Control Measure 

4. Control Measure Report 

0. Exit 

This option provides the capability to Add, Change, Delete, Display or Print the 
control measures contained in the scenario. See Table 3-7 for the control measure 
type codes. 


Table 3-7. Control Measure Types 


CODE 

TYPE 

AROPS 

AREA OF OPERATIONS 

ASMAR 

ASSEMBLY AREA 

ATKPOS 

ATTACK POSITION 

BTLPOS 

BATTLE POSITION 

BGSPAR 

BRIGADE SUPPORT AREA 

BNSPAR 

BATTALION SUPPORT AREA 

DVSPAR 

DIVISION SUPPORT AREA 

DROPZN 

DROP ZONE 

FREFIR 

FREE FIRE AREA 


3-11 



Table 3-7. Control Measure Types (Continued) 


CODE TYPE 


LANDZN 

NFIRAR 

OBJCTV 

RSFRAR 

ZONACT 

ASLTCS 

RFTSIT 

GRPTGT 

BONDRY 

BRDGLN 

CRDFLN 

FEBA 

FSPCDL 

FLOT 

HOLDLN 

UTELN 

LMTADV 

LNCNCT 

LNDEPT 

PHASLN 

COALN 

RSTFLN 

AIRFLD 

BRIDGE 

BLDING 

CITY 

LAKE 

MPRFPT 

MTNPK 

RDX1NG 

TOWN 

VILLAG 

CHKPNT 

CLCTPT 

CNCTPT 

CORDPT 

CRTEVT 

LKUPPT 

PASGPT 


LANDING ZONE 
NO FIRE AREA 
OBJECTIVE 

RESTRICTIVE FIRE AREA 
ZONE OF ACTION 
ASSAULT CROSSING 
RAFT SITE 

GROUP OF TARGETS 

BOUNDARY 

BRIDGEHEAD LINE 

COORDINATED FIRE LINE 

FORWARD EDGE OF BATTLE AREA 

FIRE SUPPORT COORDINATION LINE 

FOWARD LINE OF TROOPS 

HOLDING LINE 

LIGHT UNE 

LIMIT OF ADANCE 

UNE OF CONTACT 

UNE OF DEPARTURE 

PHASE UNE 

COURSE OF ACTION UNE 

RESTRICTIVE FIRE UNE 

AIRFIELD 

BRIDGE 

BUILDING 

CITY 

LAKE 

MAP REFERENCE POINT 
MOUNTAIN PEAK/HILL TOP 
ROAD INTERSECTION 
TOWN 
VILLAGE 
CHECKPOINT 
COLLECTION POINT 
CONTACT POINT 
COORDINATING POINT 
CRITICAL EVENT 
UNK UP POINT 
PASSAGE POINT 


3-12 




Table 3-7. Control Measure Types (Continued) 


CODE TYPE 

PTDEPT POINT OF DEPARTURE 

RELSPT RELEASE POINT 

STRTPT START POINT 

STNGPT STRONG POINT 

TRFCTL TRAFFIC CONTROL POINT 

AAXADV AIR AXIS OF ADVANCE 

ARCORR AIR CORRIDOR 

GAXAVM GROUND AXIS OF ADVANCE MAIN ATTACK 

GAXAVS GROUND AXIS OF ADVANCE SUPPORT 

DIRATK DIRECTION OF ATTACK 

FEINT FEINT 

MNSPRT MAIN SUPPLY ROUTE 

ROUTE ROUTE 


J. Change Scenario Day 

The default day is Day 1, this must be verified or changed at startup of the 
system. This option provides the capability to change that selection (after system 
startup) to Day 1, Day 2, Day 3, or the Current day of the scenario. Make sure the 
day exists before selecting it. Days 2 through Current are created by the Copy One 
Day to Another option. No loss rates are required or used for Day 1, and strengths 
cannot be adjusted by these factors for Day 1. 


3.1.2.4 Ending the Scenario Session 

Select EXIT on the top level scenario menu. This will exit dBASE and set the default 
drive to D:. 


3.1.3 Exporting the Scenario to the Sun System 

This section describes the procedures to transfer the dBASE Scenario data to the Sun 
system. The following scenario data CAN be exported to the Sun system: 

- BLUEFOR Equipment 

- BLUEFOR Personnel 

- BLUEFOR Fuel 


3-13 


- BLUEFOR Ammunition 

- BLUEFOR Task Organization 

- BLUEFOR Unit Locations 

- BLUEFOR Unit Status 

- BLUEFOR Asset Unit List 

- OPFOR Equipment 

- OPFOR Asset Unit List 

- Control Measures 

The following scenario data currently CANNOT be exported and must be updated 
manually on the Sun system: 

- OPFOR Task Organization 

- OPFOR Unit Locations 

- OPFOR Unit Status 

- Obstacles 

Perform the follow steps to export the scenario data: 

1. Copy the scenario data bases and index files into the Export directory 
(D:\SCENARIO\EXPORT). 

2. Set the default directory to the Export Directory. 

3. Start dBASE IV by entering: 
dBASE 

4. Start the EXPORT by selecting the EDDIC_EX Application. 

5. Choose the UPDATE DAY option and make updates so the DATE/TIMEs and 
File Suffixes are correct for the scenario data that is to be exported. 

6. The displayed menu system can be used to create the export files; however, it 
will take forever and I suggest exiting back to the Control Center and execute 
individual programs to create the desired files. The following lists the scenario 
data and the corresponding dBASE program: 


Scenario Data Program 

All BLUEFOR Items EX BALL 

BLUEFOR Equipment EX BEQP 

BLUEFOR Personnel EX BPRS 

BLUEFOR Fuel EX_BFUL 

BLUEFOR Ammunition EX_BAMM 

BLUEFOR Task Organization EX_BTSK 


3-14 




BLUEFOR Unit Locations 

EX BLOC 


BLUEFOR Unit Status 

EX BSTAT 


BLUEFOR Asset Units 

EX_BUNIT 


All OPFOR Items 

ex'rall 


OPFOR Equipment 

EX_REQP 

- 

OPFOR Asset Units 

EX~RUNIT 


Control Measures 

EX~CM 


Each of the above programs create an ASCII file that must be transferred 
Sun system. The following table shows the Data type, MS-DOS file name, 

the Sun system file name. 



Data TvDe 

MS-DOS File 

Sun File 

BLUEFOR Equipment 

BEQUIP.US 

beqload.dat 

BLUEFOR Personnel 

BPERS.US 

bprload.dat 

BLUEFOR Fuel 

BFUEL.US 

bfuel.dat 

BLUEFOR Ammunition 

BAMMO.US 

bamload.dat 

BLUEFOR Task Org 

BTSKHST.US 

btskhst.dat 

BLUEFOR Unit Locations 

BUNLOC.US 

bunloc.dat 

BLUEFOR Unit Status 

BUNSTAT.US 

bunstat.dat 

BLUEFOR Asset Units 

BUNIT.US 

bunit.dat 

OPFOR Equipment 

REQUIP.US 

reqload.dat 

OPFOR Asset Units 

RUNIT.US 

runit.dat 

Control Measures 

CNTLMSR.LIS 

cntrlmsr.dat 


3.1.4 Data Analysis 

The data analysis program was developed using the dBASE IV application developer 
and therefore must be executed in dBASE IV. To start the program, perform the following 
steps: 


1. CD \TASK3\dBASE 

2. dBASE/T EDDIC 

The data analysis program starts by presenting a welcome screen and then displays 
the following top level menu: 



3-15 






options in the menus can be selected either by typing the first letter of the option 
or by moving the cursor to the desired option and hitting the ENTER key. Each option in the 
top-level menu (except the Exit key), displays a pull-down menu with subsequent options. 
The following section gives a brief description of the options available within each option on 
the main menu. 

A. ADD 

The following types of data can be added to the data analysis data base: 

- Automated data from Sun and Symbolics 
• COA analysis data: 

Critical Event Identification 
War Gaming Summary 
COA Comparison Measure Weights 
COA Comparison Measure Scales 

- Experiment Questionnaires: 

COA Task Evaluation 

Personal Demographics 

Human Machine Interface 

Human Machine Interface (with COAAT) 

Personal Style 
Situation Awareness 
Workload Assessment 

- Experimenter Observations: 

Team Profile 
Experiment Time Line 

- Experiment Scoring: 

Gathering Pertinent Facts 
Arraying Forces 
Identifying Critical Events 
COA Justification 
Concept of Operations 

B. CHANGE 

The following types of data can be changed in the data analysis data base: 

- COA analysis data: 

Critical Event Identification 
War Gaming Summary 
COA Comparison Measure Weights 
COA Comparison Measure Scales 

• Experiment Questionnaires: 

3-16 





COA Task Evaluation 

Personal Demographics 

Human Machine Interface 

Human Machine Interface (with COAAT) 

Personal Style 

Situation Awareness 

Workload Assessment 

- Experimenter Observations: 

Team Profile 
Experiment Time Line 

- Experiment Scoring: 

Gathering Pertinent Facts 
Arraying Forces 
Identifying Critical Events 
COA Justification 
Concept of Operations 


C. DELETE 

The following types of data can be deleted from the data analysis data base: 

- Automated data from Sun and Symbolics 
• COA analysis data: 

Critical Event Identification 
War Gaming Summary 
COA Comparison Measure Weights 
COA Comparison Measure Scales 

- Experiment Questionnaires: 

COA Task Evaluation 

Personal Demographics 

Human Machine Interface 

Human Machine Interface (with COAAT) 

Personal Style 
Situation Awareness 
Workload Assessment 

- Experimenter Observations: 

Team Profile 
Experiment Time Line 

- Experiment Scoring: 

Gathering Pertinent Facts 
Arraying Forces 
Identifying Critical Events 
COA Justification 
Concept of Operations 


3-17 





D. REPORT 

The following reports can be printed from the data analysis data base: 

- Automated Data from the Sun System 

View Situation Requests 

View Reference Requests 

Map Control Interaction 

Workstation Window Operations 

New Control Measures 

BLUEFOR Task Organization Updates 

Unit Location Updates 

- COA Analysis 

Critical Event Identification 
War Gaming Summary 
COA Comparison Objective Measures 
COA Comparison Subjective Measures 

- Questionnaires: 

COA Task Evaluation 

Personal Demographics 

Human Machine Interface 

Human Machine Interface (with COAAT) 

Personal Style 
Situation Awareness 
Workload Assessment 

- Experimenter Observations: 

Team Profile 
Experiment Time Une 

- Experiment Scoring: 

Gathering Pertinent Facts 
Arraying Forces 
Identifying Critical Events 
War Gaming 
COA Comparison 
COA Justification 
Concept of Operations 


E. SPECIAL 

The following special functions are contained in the data analysis program: 

Process the ASCII files received from the Sun system. This 
option must be completed before adding the automated data to 


3-18 



the data base. If this step is skipped, old recorded data will be 
added to the data base with the new experiment code. 

Export the data bases to ASCII files for import into SAS or other 
statistical, analytical, or database management packages. 

Remove all deleted records from the data base. 


F. EXIT 

This option exits the data analysis program and returns to dBASE. 


3.2 INSTALLATION INSTRUCTIONS 

This section describes the typical steps to install the Tactical Planning Workstation 
executable and data files. EDDIC should run on any Sun system with the following attributes: 

120 MB of disk space 

(note: less disk space is required, if some of the digital map files are not 
installed) 

32 MB swap partition 

Sun 3/160C compatible display 

(note: The system will run on a 3/110 display with a different version of 
X-Windows) 

Maxusers set to at least 12 
Ethernet enabled system 

Use the following steps to load the system. Some of the steps require ’Superuser’ 
privileges. 

1. Add an EDDIC account to the passwd file. 

2. Make a Directory for EDDIC: 
su 

cd /(disk path) 
mkdir eddic 

chown eddic "EDDIC account" 

<CTRL>d 

3. Login to the new "EDDIC account". 


3-19 






4. Copy System from tape: 


tar xvf /dev/rmtO 

5. Set-up Links 
cd shell 

(Make path changes to links.csh) 

1. Replace /usr/cherokee/eddic_demo with disk path from step 2. 

2. Replace /usr2/demo with location of map files. 

3. Replace /usr/cherokee/Xrun with /edemo/Xrun. 

su 

links.csh 

<CTRL>d 

6. If network system, change server name to the 

new servers name in the following file: 

demo.csh 

7. Append services.add to /etc/services (you must be SU). 

8. Load the Digital Map Tapes 

cd /emaps 
cd .. 

tar xvf /dev/rmt8 

(Repeat the above command for all 3 map tapes) 

9. To start the File Server: 

Login to EDDIC 
cd shell 
server.csh 


3-20 





10. To start a Workstation: 

Login to EDOIC 
cd shell 
demo.csh 

11. To start the Standalone System: 

Login to EDDIC 
cd shell 
alone.csh 

12. To reinitialize data bases 
build.csh 


3.3 CUSTOMIZATION PROCEDURES 

This section describes the procedures to customize the Tactical Planning Workstation 
interface for a specific experiment. ASCII files contain the descriptions of the system 
attributes and can be modified using an editor on the Sun fileserver. The following classes of 
system attributes can be modified: 

Products Available in the Windows 
Tactical Map Menu Options 
Tactical Situation Data 
Task Organization Tool Options 

Be sure to make backup copies of the files before making modifications to them. See 
Appendix D for the format of the description files. 


3-21 







3.3.1 Products Available in Windows 


Directory "data/offgerm" contains the ASCII files describing the products available in 
the workstation windows. The list of product description files is shown in Table 3-8. See 
Section 3.1.1 for the description of the command files used to integrate the updates into the 
system. 


Table 3-8. Product Description Files 


Filename 


c2ref.dat 


control.src 


edhist.dat 


help_source.dat 


menu/tools 


Description 

Products available in the View Reference window. See 
REFERENCE_SOURCE in Appendix D for the format of this file. 
Updates to this file are integrated into the system with the 
offgerm_reference_build.csh command file. 

Products available in the Experimenter’s Experiment Control 
window. See EXP_CONTROL_SOURCE in Appendix D for the 
format of this file. Updates to this file are integrated into the 
system with the offgerm_control_build.csh command file. 

Products available in the View Situation and Build windows. See 
C2_PRODUCT_SOURCE in Appendix D for the format of this file. 
Updates to this file are integrated into the system with the 
offgerm_c2_product_build.csh command file. 

Products available in the Help window. See HELP_SOURCE in 
Appendix D for the format of this file. Updates to this file are 
integrated into the system with the help_build.csh command file. 

Tools available in the Tool window. See TOOL_MENU in 
Appendix D for the format of this file. No command file is 
required to integrate updates to this file into the system. 


3.3.2 Tactical Map Menu Potions 

Directory "data/maps/menu" contains the ASCII files describing the map menu options 
available in the workstation windows containing the tactical map. The list of menu files is 
shown in Table 3-9. No command files are required to integrate updates to these files into the 
system. The updates are integrated as soon as the fife has been saved by the editor. 


3-22 







Table 3-9. Tactical Map Menu Files 


Filename 

blue_cm.edit 

blue_cm.view 

blue_obs.edit 

blueobs.view 

blue_unit.edit 

blue_unit.view 


map.edit 


map.view 


opfor_cm.edit 


opfor_cm.view 


Description 

Options for BLUEFOR control measures with edit capability. See 
BLUEFOR CM EDIT MENU in Appendix D for the format of this 
file. 

Options for BLUEFOR control measures without edit capability. 
See BLUEFOR_CM_VIEW_MENU in Appendix D for the format of 
this file. 

Options for BLUEFOR obstacles with edit capability. See 
BLUEFOR OBS EDIT MENU in Appendix D for the format of this 
file. 

Options for BLUEFOR obstacles without edit capability. See 
BLUEFOR_OBS_VIEW_MENU in Appendix D for the format of 
this file. 

Options for BLUEFOR units with edit capability. See 

BLUEFOR UNIT EDIT MENU in Appendix D for the format of this 

file. 

Options for BLUEFOR units without edit capability. See 
BLUEFOR_UNIT_VIEW_MENU in Appendix D for the format of 
this file. 

Options for the map with edit capability. See MAP_BUILD_MENU 
in Appendix D for the format of this file. 

Options for the map without edit capability. See 
MAP_VIEW_C2_MENU in Appendix D for the format of this file. 

Options for OPFOR control measures with edit capability. See 
OPFOR CM EDrT_MENU in Appendix D for the format of this 
file. 

Options for OPFOR control measures without edit capability. See 
OPFOR CM_VIEW MENU in Appendix D for the format of this 
file. 


3-23 




opfor_obs.edit 


opfor_obs.view 


opfor_unit.edit 


opfor_unit.view 


Options for OPFOR obstacles with edit capability. See 
OPFOR_OBS_EDIT_MENU in Appendix D for the format of this 
file. 

Options for OPFOR obstacles without edit capability. See 
OPFOR_OBS_VIEW MENU in Appendix D for the format of this 
file. 

Options for OPFOR units with edit capability. See 
OPFOR_UNIT_EDIT MENU in Appendix D for the format of this 
file. 

Options for OPFOR units without edit capability. See 

OPFOR UNIT_V1EW MENU in Appendix D for the format of this 

file. 


3.3.3 Tactical Situation Data 

Directory "data/offgerm/situation" contains the ASCII files describing the tactical 
situation. The Tactical Situation data are also maintained in dBASE on a PC. The normal 
procedure for updating the scenario is to use the dBASE scenario program (see section 
3.1.2) to change and export the files to the Sun fileserver for integration. However, 
emergency updates can be made directly to the ASCII files on the Sun. The list of tactical 
situation description files is shown in Table 3-10. See offgerm_situation_build.csh in Section 
3.1.1 to integrate updates into the system. 




Table 3-10. Tactical Situation Files 


Filename 

bamload.dat 


beqload.dat 


bfuel.dat 


blue_organic.dat 

bprload.dat 

btskhst.dat 

bunloc.dat 

cntrlmsr.dat 

c2obst.dat 

opplan.asc 


Description 

Ammunition strengths for BLUEFOR units. See 
BLUEFOR_AMMO SOURCE in Appendix D for the format of this 
file. 

Equipment strengths for BLUEFOR units. See 
BLUEFOR_EQUIP SOURCE in Appendix D for the format of this 
file. 

Fuel strengths for BLUEFOR units. See 

BLUEFOR_FUEL SOURCE in Appendix D for the format of this 

file. 

Organic BLUEFOR Task Organi 2 ation. See 
BLUEFOR_ORGANIC_TASK_ORG in Appendix D for the format of 
this file. 

Personnel strengths for BLUEFOR units. See 
BLUEFOR_PERSONNEL_SOURCE in Appendix D for the format 
of this file. 

BLUEFOR task organization. See 

BLUEFOR_TASK_ORG_SOURCE in Appendix D for the format of 
this file. 

Unit locations for BLUEFOR units. See 
BLUEFOR_UNIT_LOC_SOURCE in Appendix D for the format of 
this file. 

Control measures. See CONTROL_MEASURE_SOURCE in 
Appendix D for the format of this file. 

Obstacles. See OBSTACLE_SOURCE in Appendix D for the 
format of this file. 

Predefined Operational Plans. See OPLAN_UST_SOURCE in 
Appendix D for the format of this file. 


3-25 






Equipment strengths for OPFOR units. See 
OPFOR_EQUIP_SOURCE in Appendix D for the format of this 
file. 

Reinforcing Times for OPFOR units. See 
OPFOR_REINFORCE_TIME in Appendix D for the format of this 
file. 

OPFOR Task Organization. See OPFOR_TASK_ORG_SOURCE in 
Appendix D for the format of this file. 

Unit status for OPFOR units. See 

OPFOR_UN(T_STATUS_SOURCE in Appendix D for the format of 
this file. 

runloc.dat Unit locations for OPFOR units. See 

OPFOR_UNIT_LOC_SOURCE in Appendix D for the format of this 
file. 


reqload.dat 

rreinf.dat 

rtskhst.dat 

runitptch.dat 


3.3.4 Task Organization Tool Potions 

Directory "data" contains the ASCII files describing the menu options available for the 
Task Organization Tool in the workstation Tool window. The list of menu description files is 
show in Table 3-11. No command files are required to integrate updates to these files into the 
system. The updates are integrated as soon as the file has been saved by the editor. 


Table 3-11. Task Organization Tool Files 


Filename 


tot_options 


tou_options 


utb_options 


Description 

Task Organization Tool options. See TASK_ORG_TOOL_MENU 
in Appendix D for the format of this file. 

Options for units in the Task Organization Tool. See 
TASK_ORG_TOP_UNIT_MENU in Appendix D for the format of 
this file. 

Options for the unit type button. See 

TASK_ORG_UNIT_7YPE_MENU in Appendix D for the format of 
this file. 


3-26 






4. SOFTWARE 


This section describes the software architecture of the Tactical Planning Workstation. 
Since the Tactical Planning Workstation is part of an experimental design and development 
system, the software design uses programming standards that allow easy porting to other 
system architectures. The major standards include Ada as the programming language and X- 
Windows as the network windowing system. The software consists of the following modules: 

Ada Utilities - Ada packages that provide commonly used capabilities to the Ada 
programs. All utility packages start with the letter "U*. 

Ada Programs - Each Ada Program is an individual process In the system. The data 
base managers, routers, and window managers are all examples of Ada programs. Ada 
programs start with a three-letter prefix that abbreviates the function of the program. The 
letter "R" is reserved for network message routers. 

C Utilities - C procedures were written to allow access to the low-level system, 
communication, and X-Window capabilities from Ada. The C procedures are functionally 
separated into libraries and each library has an Ada binding specification for interfacing with 
Ada. All C utilities start with the letter "C". 

dBASE Programs - The EDOIC system requires a relational data base system to easily 
maintain and update the scenario data and to process data recorded during an experiment. 
Because dBASE is readily available and it is easy to transfer data from the Sun fileserver to 
a PC, dBASE is the EDDIC relational data base system. dBASE programs provide a user- 
friendly interface for working with the scenario and experiment data. 


4.1 ADA UTILITIES 

The Ada utilities consist of a large pool of powerful utility procedures that provide a 
consistent and modular approach to software development Each utility package has a 
specification C_s.a" suffix) and a body ("_b.a" suffix). The specification is the interface 
between the package and the calling application and the body is the Ada code to perform the 
function of the procedures. To use a utility package, a programmer should use this 
document along with the appropriate package specification. The only access required to a 
package body is to update specific procedures. The following major utility categories are in 
the Tactical Planning Workstation. 

COMMON • Ada types that are available throughout the system. 

UED - EDDIC utilities such as math functions, string functions, and list and queue 
managers. 


4-1 




UFM - Form Manager utilities 

U!N • Internet communications utilities 

UIW - Color image window utilities 

UTM - Tactical map utilities 

UUX - Unix command utilities 

UWN - Window display and control utilities 


4.1.1 Common Ada Specifications 

The common Ada specifications provide global access to system types and objects. 
Many of the types defined in these specifications are required for the message passing 
utilities (UIN). The following Ada specifications are contained in the common library: 

- CDB C2_PRODUCT_DB 

- CTL CONTROL DB~ 

- FDB_REFERENCE_DB 

- HDB_HELP_DB 

- LUT SYSTEM 

- MSG_MESSAGE 

- SDB SITUATION DB 

- SYSTEM_PACKAGE 


4.1.1.1 CDB_C2_PRODUCT_DB 

Abstract . Global Command and Control (C2) product Ada specification. 

Major Capabilities . This package contains Ada type specifications for the C2 product data 
base records and for all the C2 product messages. All types in this package start with "CDB". 

Special Instructions . The CDB messages must be passed through the C2 product router 
(CDB). 

Data Bases . None 

Environment Variables . None 


4-2 


4.1.1.2 CTL CONTROL DB 


Abstract . Global experiment control product Ada specification. 

Major Capabilities . This package contains Ada type specifications for the experiment control 
product data base records and for all the experiment control product messages. All types in 
this package start with "CTL". The CTL messages must be passed through the experiment 
control router (RCN). 

Special Instructions . None 

Data Bases . None 

Environment Variables. None 


4.1.1.3 FDB_REFERENCE_DB 

Abstract . Global reference product Ada specification. 

Major Capabilities . This package contains Ada type specifications for the reference product 
data base records and for all the reference product messages. All types in this package start 
with "FDB". 

Special Instructions . The FDB messages must be passed through the reference router (RRF). 
Data Bases . None 
Environment Variables. None 


4.1.1.4 HDB_HELP_DB 

Abstract . Global help product Ada specification. 

Major Capabilities . This package contains Ada type specifications for the help product data 
base records and for all the help product messages. All types in this package start with 
"HDB". 

Special Instructions . The HDB messages must be passed through the reference router (RRF). 
Data Bases . None 


4-3 




Environment Variables. None 


4.1.1.5 LUT_SYSTEM 

Abstract . Global color lookup table Ada specification. 

Major Capabilities . This package contains Ada type specifications to define the color lookup 
table and messages to update and determine the status of the lookup table. It also contains 
objects that define specific colors in the lookup table. All types in this package start with 
•Lur. 

Special Instructions . The majority of the types in this packages are reserved for use by the 
lookup table manager (LUT) in the station control manager (SCL). Normal applications will 
use this package to define messages to communicate with the station control manager and 
to use predefined colors in the lookup table. The LUT messages must be passed through the 
experiment control router (RCN). 

4.1.1.6 SDB_SITUATION_DB 

Abstract . Global situation data Ada specification. 

Major Capabilities . This package contains Ada type specifications for the situation data base 
records and tor all the situation data messages. All types in this package start with "SDB". 

Special Instructions . This package is the primary source to use for all tactical situation data. 
The messages in this package must be routed through the situation data router (RSD). 

Data Bases . None 

Environment Variables . None 

Data Bases . None 

Environment Variables. None 


4.1.1.7 MSG_MESSAGE 

Abstract . Global Ada Internet communications message specification. 


Major Capabilities . This package contains Ada type specifications for ail the messages that 
are passed through the Internet communications utilities (UIN). All types in this package start 
with "MSG". 





Special Instructions . The normal procedure for adding a message to this package is to 
define the message in the appropriate package specification in the common library and then 
using that type to define a new message variant. 

This package controls which messages are recorded by each router. 

Data Bases . None 

Environment Variables. None 


4.1.1.8 SYSTEM_PACKAGE 

Abstract . Global system Ada specification. 

Major Capabilities . This package contains Ada type specifications for the system. These 
types include data base limitations, menu limitations, window system limitations and types, 
color lookup table limits, system error codes, and the processes. All types in this package 
start with "SYS". 

Special Instructions . All types and objects that are defined in other packages and programs 
should use the base types defined in this package rather than Ada types such as INTEGER 
and FLOAT. There should be a type in this package that is appropriate for all objects in the 
system, if there is not, add one. 

Data Bases . None 

Environment Variables . None 


4.1.2 UWN Window System 

The window system contains utilities for displaying and interacting with windows. The 
utilities are divided into the following separate Ada specifications: 

• Button Menu Manager 

• Walking menu Utilities 

• Walking Menu Layout Display 
- Window Utilities 


4-5 






4.1.2.1 UWN_WINDOW_SYSTEM 

Abstract . UWN_Window_System is the window utilities system using the X-window protocol. 
This package is linked to the cwn.lib library via the Ada binding CWN_Window_System. 

Major Capabilities . The Soldier Machine Interface (SMI) software is based on a window and 
icon protocol with user selection and input via the mouse or keyboard. Application 
programmers can create many user interface tools within process windows and popup 
windows, using any combination of subwindows, panels, and subpanels. The interfaces 
provided by the window utilities include system messages, message boxes, buttons, menus, 
and a variety of field editors. 

As previously stated, the devices for user input are the mouse and the keyboard. 
Typically, any input within a tool is processed by the tool. The application is notified only of 
the resultant input, not the means by which the input was performed. At times, user input or 
software will cause parts of the display tools to be partially hidden, and later exposed. Tools 
defined with the UWN utilities will redisplay automatically. 

The only outside input (i.e. not by the user) which an application may receive, is input 
from any open network socket. The application calls UWN_ADD_INPUT_SOCKET with the 
socket id to notify the window system to watch for input. When input is detected, UWN 
notifies the application which is responsible for getting the input from the socket. The socket 
may be removed when it is no longer needed. 

Input is sent to an application from UWNJNPUT in the form of an event as outlined 

below: 


InDut Event 

Description 

Exit 

Hie user wishes to terminate a process window. 

Menu 

A menu option has been selected. 

Checkbox 

A checkbox has been selected. 

Scrollbar 

A scrollbar has been scrolled. 

XrFILE 

A network message is waiting to be read. 

Button 

A button has been toggled. 

Mouse Button Pressed 

The user has pressed a mouse button within a window 
which selected this event notification. 

Mouse Button Released 

The user has released a mouse button within a window 
which selected this event notification. 

Field Traversal 

A traversal key was entered from the keyboard within an 
activated numeric or string field. 

Exposure 

Some portion of a window which selected this event 
notification may need to be redrawn. 

Open Window 

A process window was opened from its icon state. 


4-6 



Window Resized 
Close Window 
Pushbutton 
Radiobutton 


A process window was resized. 

A process window was closed into an icon. 
A pushbutton was selected. 

A radiobutton was selected. 


Most communications with the interface tools are for the following operations and are 
indicated in the names of the functions: 


activate 

- 

Activates a specific tool, making it visible and ready for 
input. 

change 

- 

Change a specific aspect of a defined tool. 

create/ define 

- 

Usually creates a tool with a specified location and size. 

delete 

• 

Deletes the tool. Once deleted the tool should not be 
referenced again. 

move 

• 

Provides the capability of changing the tool's location 
within the window or panel. 

query 

“ 

Provides the application the ability to query the size of 
the already defined tool in screen pixels. 

resize 

• 

Provides the capability of resizing and changing the 
location of the tool on the screen. 


.Windows 

Every window application relies on at least one of the two basic types of windows, 
process windows and popup windows. These windows can be created and destroyed as 
required by the program. All windows, when defined, may be created to be visible on the 
screen, "mapped", or invisible, "unmapped". The mapping and unmapping operations of the 
windows are provided in UWN. 

All windows are also capable of displaying bit images, pixmaps, or raster images; e.g., 
a map, and performing other graphics operations using other utilities in the system. (See UIW 
and UTM.) Applications using these utilities will need to know when an exposure event has 
occurred. The application can notify the window system it needs this information to redraw 
the graphics by calling UWN_SELECT_INPUT. This routine also provides for the notification 
of mouse button input that takes place within the window but outside of any of the window’s 
tools. 


A process window is one associated with one of the Tactical Planning Workstation 
system processes and associated icon stacks as follows: 


4-7 



View Reference 
View Situation 
Process Messages 
Build Situation 
Tools 

Experiment Control 

An application creates a process window via UWN_CREATE_WINDOW, specifying the 
window’s label and process type. It will return the icon stack position assigned to the 
window. The window label will appear in a popup identification window in the upper left 
corner of the display. This will signal the user which window is waiting to be manually sized 
and/or placed. If the label input is NULL then there will be no window title or prompt 
displayed. 

A flashing dotted line display will show the window’s default size when the user clicks 
the left mouse button at the location desired for the window. The user may increase the 
window's size by pressing the middle mouse button to define one comer and, keeping the 
mouse button pressed, moving the cursor to the desired opposite corner before releasing the 
button. 


The displayed process window consists of a border containing a title, darkened 
corners, and a popup menu option. The border provides the capability of moving the window 
by pressing the left button anywhere except the darkened comer areas, and releasing the 
button at the new desired location. The darkened comer areas provide window resizing 
when the left mouse button is clicked within that area. The popup menu is activated by 
pressing the right mouse button in the border area. The popup menu, entitled Frame Menu, 
offers options for the window operations of moving, resizing, hiding, exposing, redisplaying, 
closing the window into an icon on the corresponding icon stack, zooming the window to full 
screen display, and terminating the process. 

Since a process window is associated with a process, UWN provides some routines 
specifically for use only with a process window. For instance, if an application wishes to 
change all the tools within the window, the application can call UWN_CLEAR_WINDOW to 
delete all buttons, editors, and panels. The entire window can be terminated via 
UWN_TERMINATE_WINDOW and a new window created. A popup window is quite limited in 
its dynamic operations compared to the process window, it is located as specified in the call 
to UWN_DEFINE_POPUP_ WINDOW and does not have the border or the inherent operations 
of the frame menu. However, the programmer may give some of these features to the popup 
window using menus and other operations provided in UWN; e.g., 
UWN_HANDLE_WINDOW_MOVE. 

Subwindows are windows that are considered to be children of process windows, 
popup windows, or of other subwindows. A subwindow’s size may exceed the size of its 


4-8 





parent window, but the visible portion of the window is limited to, or clipped by, the parent 
window. A subwindow, like the popup window must be given operational aspects. 

.Panels and Subpanels 

A panel is a collection of field editors displayed in a window and controlled by the 
panel manager. The panel manager is responsible for the display of the editors, passing 
control to a field editor selected by the user, and routing the editor activity back to the 
application. A panel must have at least one field editor defined and the application must 
determine the size of the panel needed, using UWN_QUERY_PANEL_SIZE, so that all of the 
editors are visible. 

Panels may contain subpanels when the application requires different editors 
according to the state of the panel or application. A panel may contain an unlimited number 
of subpanels, but caution should be taken not to overlap the editors of panels and 
subpanels. By default, panels and subpanels are displayed when completely defined, but 
may be hidden and displayed again as required. 

.System Messages 

UWN provides the capability for displaying messages about what is going on in the 
system. Many times it takes a while for an application to respond to user input because of 
initialization or processing time. When this happens, usually nothing is visibly taking place 
on the screen, thus leaving the user to wonder if the system received the input. System 
messages e.g. "BUSY", are provided to give a visual status of something taking place in the 
software. They are displayed at the top middle of the display screen when created. The 
messages are limited to one line. 

.Message Boxes 

Many times an application needs to relay a message to the user in the form of a 
warning or instruction on how to do something or as a simple question asking or confirming 
the user’s intentions. This may be done through a message box via UWN_MESSAGE_BOX, 
which displays a message in a rectangular region centered in the middle of the screen and 
grabs all mouse input until one that is acceptable causes the message box to be taken away. 
The application must inform the routine of the message and the mouse button events which 
are acceptable for having the message removed. The capability of multiple mouse events is 
provided for simple multiple choice questions which the application will process according to 
the input returned. 

.Buttons 

Buttons can be defined anywhere within a window as long as it is not within a panel. 
Each button may include a text label which will be displayed in the center of the rectangle 


4-9 




representing the button. This label may be single or multiple lines of text; however, care 
should be taken to insure the button is sized correctly to have the full label visible. There is 
no routine to determine the minimum size required, so the application should calculate the 
size required based on font size, number of characters, and number of lines in the label. 

When the button is defined as being "enabled, 1 * it will toggle its background when 
selected and UWNJNPUT will notify the application. In some cases, the application may 
want the toggle feature only as an indication to the user that performance of some action is 
taking place; i.e., the button is not truly representing an "on" state. UWN_TOGGLE_BUTTON 
has been provided to toggle the button back off when the processing is finished. This routine 
may also be used to show default "on" states of buttons as they are first created and 
displayed. The routine toggles the button from the current state, off to on, to the other state. 
A button may activate a popup or walking menu through UWN_ACTTVATE_MENU. 

.Menus 


Menus in UWN are presented in a popup window either as simple list of options or as 
a tree of primary options with branches to submenus which are presented after selection of a 
primary option. One menu may be activated per window, button, or panel. If the application 
wishes to activate another menu for the same display unit, it must first deactivate the present 
menu and then activate the defined menu. 

An activated menu is always brought up by the user by pressing the right mouse 
button within the unit where the menu was activated. A deactivated menu can be displayed 
by capturing the right mouse button with UWN SELECTJNPUT and displaying the menu with 
UWN_PQST_MENU. 

A tree menu, called a walking menu, is displayed similar to the simple list menu but 
will have arrows on the right side of those options which have submenus. The user “walks" 
down the menu by placing the cursor over one of the options and proceeding over to the 
section of the box containing the right arrow. When the cursor comes in dose proximity to 
the arrow, the submenu will be presented. A walking menu may have an infinite number of 
submenus. 

Another menu system, the button menu manager, is also provided in the UWN utilities 
and is discussed in Section 4.1.2.2. 

.Field Editors 

Field editors are the collection of interface tools that aid application programmers by 
providing them with a common user interface across a wide variety of programs. Field editors 
are defined in size by the number of display pixels. All input within field editors is processed 
by the editors and the application is notified of the final selection through UWNJNPUT. The 
field editors provided by UWN are described in the following sections. 


4-10 





Checkbox Editor 


A checkbox editor is used to create and process a group of related checkboxes, 
where the user is allowed to select a number of options. The application creating the 
editor has flexibility in the number of rows and columns into which the boxes will be 
displayed. Each checkbox may have an optional label which will be displayed to the 
right of the box. The editor determines from these factors the layout of the display. UWN 
provides the capability to query the created editor for the actual coordinates of the 
checkboxes. The application may specify which checkboxes should be selected upon 
creation and may change states as required. 

Number Field Editor 


The number field editor allows applications to create and display single lines of 
editable numeric text within a rectangular region. The numeric text entered is limited to 
integers. The application may limit the range of integers that can be entered as well as 
the length of the string. The field may be created with an optional label and an initial 
value. The activated field accepts insertions, deletions, and traversal keys. Traversal 
keys consist of the up and down arrow keys, the tab, back tab (shift tab), and return. 
Input of any of the traversal keys causes the field to be exited and the application notified 
of the direction of traversal as follows: 


Traversal Key Direction of Traversal 


Tab 

Back Tab 
Return 
Up Arrow 
Down Arrow 


Next field 
Previous field 
Next field 
Up field 
Down field 


Use of the traversal keys is applicable if the application is a form manager where the 
user is allowed to move about numerous fields with keystrokes instead of constantly 
mousing new fields to input. The application uses UWN_ACTIVATE_NUMBER_FIEI_D to 
activate the appropriate field for the user whenever a traversal event is received. 

Pushbuttons 


Pushbuttons are provided for immediate action selections. They are drawn as an oval 
with an optional label displayed Inside the oval. The editor is defined in the number of 
rows and columns into which the button Is to be displayed. The actual coordinates of 
the individual buttons may be queried from UWN after the editor has been created. 


4-11 





Radiobutton 


The radiobutton editor is similar to the checkbox editor except that the editor operates 
in a fashion very similar to the channel select buttons on a radio. At no time will it allow 
the situation to occur where no button is active. Each time a new button is selected, the 
previously active button is made inactive. Like the checkbox and pushbutton editors, the 
application has great flexibility in the editor’s layout in terms of the number of rows, 
columns, and labels and can query the editor for the actual coordinates of each 
individual button after creation. 

Scrollbar 


An application can create either a vertical or horizontal scrollbar wherever the need 
arises. The scrollbar provides the capability to position the display within a file, 
document, or display that would be impractical or impossible to display in its entirety. 
When a scrollbar is drawn, it is drawn as a rectangular box, with a scroll arrow at each 
end. The area between the two scroll arrows is known as the scroll region and contains 
the scroll box. The scroll region represents the information in its entirety whereas the 
size of the scroll box represents the portion of information which is currently being 
displayed. The position of the scroll box in the scroll region portrays the position of the 
displayed information with respect to the entire informational unit. 

All selections within the scrollbar cause a slide position to be returned to the 
application via UWN INPUT. It is up to the application to do the actual scrolling. If the 
application wishes to change the scrollbar size or notes a change in size of the 
informational unit, it can use the routine UWN_CHANGE_SCROLLBAR to make 
adjustments. 

Static Text 


The static text editor provides the application with the means for placing uneditable 
blocks of text anywhere within the bounds of a panel or window. The application 
specifies the rectangular region, text to be drawn into it, and the alignment of the text 
within the region. If the text will not fit completely within the rectangle, then only that 
portion which fits will be displayed. The static text may be displayed as multiple lines by 
including a carriage return character at the end of each line. 

The four forms of text alignment provided by the editor are: 


4-12 



Centered - The center of each line of text is positioned at the center 

of the rectangle. All leading and trailing spaces in the 
line will be stripped. 

Left - The first character of the line is positioned at the leftmost 

edge of the rectangle, with all leading and trailing spaces 
in the line stripped. 

Right - The last character in each line is placed at the rightmost 

edge of the rectangle, with all leading and trailing spaces 
in the line stripped. 

None - The first character of the line is positioned at the leftmost 

edge of the specified rectangle. Leading and trailing* 
spaces in the text are not stripped. 

The static text editor also has a popup menu option for copying text in to a text editor. 

String Field Editor 


The string field editor is similar to the number field editor except that it creates and 
displays single lines of editable alphanumeric text. It too accepts traversal keys as 
described in the above number field section. 

Text Editor 


The text editor provides an application the means for displaying multiple lines of text 
with the option of allowing the user to edit the text. It consists of a scrollbar on the left 
side of the text buffer. When activated, a cursor is visible to the user in the buffer to 
indicate the place of operation within the text buffer. The operations available to the user 
are displayed in a popup menu activated by a right mouse button dick within the editor. 
When created as a read-only buffer, the only operations available are find and copy. The 
find function locates the next occurrence of user selected text The copy function saves 
user selected text for later retrieval into another text editor that is defined to be editable. 

A text editor created without the read only option has these two functions along with cut 
and paste and insert and delete text functions. 

An application may use the same editor for numerous documents by simply using 
UWN_CHANGE_EDITOR_TEXT to change from one document to another. All text 
contained within the buffer at the time of creation will be displayed. A text editor may be 
created without any text to allow users to create their own text buffer. 


4-13 





User Input Field 


The user input field is a special interface tool using either the number field or string 
field editor in a popup window. The intention of this tool is for the occasion when the 
application needs to have immediate specific input before proceeding. The user input 
field is displayed and ignores all input of the system until the information is complete. 

Special Instructions . Use of the window system first requires its initialization by calling 
UWNJNrriAUZE_WINDOW_SYSTEM. 

All UWN utilities using text use a default font whose size may be queried by the 
function UWN_QUERY_FONT_SIZE. 

All text passed to a routine is expected to be a null terminated string. 

Every object of the window system is located with respect to its destination’s origin 
which is defined to be 0,0 in the upper left hand comer. The coordinate system increases 
positively for X going to the right, and for Y going down. 

All object operations require the id that was given to the object at the time of it’s 
creation. The object creation procedures return the object id for ail objects except menus, 
which are defined by the calling application. 

.Windows 

A process window’s default size is that required for an 80 character wide by 24 
character high text editor and one row of buttons. A process window cannot be initially 
defined with a size smaller than this default After activation it may be resized as desired. 

If a process window's label input is NULL then there will be no window title or prompt 
displayed. 

An application is limited to one process window but is unlimited in the number of 
popup windows, subwindows, panels, and subpanels. 

UWN_CLEAR_WINDOW clears every object; i.e„ buttons, panels, and menus. 
Subwindows must be deleted by the application. 

UWN_TERMINATE_WINDOW performs the UWN_CLEAR_WINDOW operation so the 
application need not call both. 

An application may not select exposure events for windows containing field editors. 


4-14 



Exposure events are sent for a window and all of its subwindows when the window 
has been moved. This is the only way of detecting whether a window has been moved. 

All input selected for a window and any menu activated for a window will also be 
effective for its subwindows if input is not individually selected or menus activated for them. 

.Panels 


Before creation of any field editors in a panel, UWN_DEFINE_PANEL must be called. 
The user then creates the desired field editors, which will not be displayed and operational 
until UWN_END_PANEL has been called. 

If a panel is to be deleted, all of its field editors must be deleted first. 

The query size routines for panels and subpanels are unlike the other UWN query size 
routines in that they do not return the size of the panel as specified by the user when the 
panel’s definition was ended via UWN_END_PANEL. The size returned is the size needed if 
all the defined field editors were to fit completely within it and not be clipped. The size also 
includes white space padding on the bottom and right sides of the panel. 

If many changes are being made within a panel, the application can reduce the 
number of window redraws and "screen flashing* by first calling UWN_HIDE_PANEL After 
the changes are made UWN_SHOW_PANEL can be called to show the final output. 

UWN_UPDATE_PANEL must be called to show any editors added to or clear any 
deleted from a panel after the panel has been completely defined; i.e., calls to both 
UWN_DEFINE_PANEL and UWN_END_PANEL have been made. 

.Message Boxes 

UWN_MESSAGE_BOX is the one exception to the rule that all input will be returned 
via UWNJNPUT. This tool will ignore all Input other than that specified when the call was 
made. It "grabs" the server and the mouse input and will return them to the application only 
after its processing is complete. Any other event; e.g., exposure events will be ignored and 
lost. 


A message may consist of multiple lines. The carriage return character must be 
included in the message string to indicate new lines. 

.Menus 


All arrays used in the definition of a menu are indexed starting at zero. 


4-15 





.Field Editors 


Checkbox Editor 

The checkbox labels are not included In the coordinates returned by a query operation. 
Pushbutton Editor 

The pushbutton labels are not included in the coordinates returned by a query 
operation. 

Radiobutton Editor 


The radiobutton labels are not included in the coordinates returned by a query 
operation. 

Text Editor 


The programmer must be aware of the width and height parameters in 
UWN_DEFINE_EDITOR and UWN_RESIZE_EDiTOR, in that they take exception to the 
rule of defining these dimensions in screen pixels. Rather, they are defined in the 
number of character rows and columns. 

If the text is in a special format requiring specific new lines, the buffer must contain the 
line feed at the end of each line. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/ued 

To load a program that uses this package, links must be established with the following 
libraries using the *a.info" command: 

/egen/cwn util/cwn.lib 
/usr/lib/libXr.a 
/usr/lib/libX_p.a 


4-16 



/usr/lib/libX.a 

/usr/Iib/libm.a 


Data Bases 


ICON_STACK_DB INPUT/OUTPUT 

Environment Variables 


ICON_PATH 


4.1.2.2 UWN_BUTTON_MENU_MANAGER 


Abstract . The UWN_BUTTON_MENU_MANAGER is contained in the 
UWN_WlNDOW_SYSTEM package as a manager of a popup menu system capable of 
allowing multiple selections. 

Major Capabilities . The button menu manager is a unique menu tool consisting of a 
combination of a title, a scrollbar, either a radiobutton or checkbox editor, and a pushbutton 
editor. It supports either a single selection or multiple selection menu as defined by the 
application with flexibility in the number of columns in which the options are to be displayed. 
The application may also specify the number of rows of options which may visible to the user 
at one time. If the number of rows visible is less than the total number of rows required to 
display all the options, a scrollbar will be incorporated in the creation of the tool, thus giving a 
means for the user to scroll through all the options. 

Pushbuttons are an option in the tool for specifying four specific functions: 


DONE An indication to the application that the user is done selecting options. 


CANCEL An option which allows the user to cancel the menu selection process. 


SET ALL An option which applies only to multiple selection menus and causes all 
the options to be selected. 

CLEAR ALL An option which applies only to multiple selection menus and causes ail 
option selections to be cleared. 


Special Instructions . A button menu may be defined as unmapped and be mapped later via 
UWN_MAP_WINDOW passing the window id of the popup window in which the menu was 
defined. After selections have been made the menu may be unmapped, available for future 
use, or deleted. The application is responsible for detecting input to the button menu using 


4-17 





UWNJNPUT. Any input received must then be passed to UWN_BUTTON_MENU_INPUT for 
processing. This input will consist of one of three possibilities: DONE, CANCEL, or 
NO_ACTION_REQUIRED. If the DONE or CANCEL was selected, the application can detect 
what was selected through the button menu's description buffer. This buffer is owned by the 
application and is only updated from the button menu manager. A NO_ACTION_REQUIRED 
output indicates that the input was handled internally by the button menu manager; i.e., 
scrolling of the options or resetting all the options on or off. 

The scrollbar will not be displayed when the number of visible rows requested is less 
than three, the minimum space required for displaying a scrollbar. 

To compile this package, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/ued 

To load a program that uses this package, links must be established with the following 
libraries using the “a.info" command: 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/IibX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables. None 


4.1.2.3 UWN_WALK1NG_MENU 


Abstract . Walking and multiple selection menu utilities. 


Major Capabilities . The walking menu utilities provide procedures for reading a walking menu 
file into an ASCII buffer and its associated array and loading the ASCII buffer into the walking 
menu structures required by the UWN window utilities. 


Special Instructions . This is a generic package and must be instantiated with the associated 
data type, the associated array type, and a pointer to the associated array type. 


4-18 



When the menu description file contains multiple selection menus, 
UWN_READ_WALKING_MENU builds a list of the multiple selection menu records. The 
application is responsible for looping through the list and calling UWN_BUILD_MULTIPLE for 
each multiple selection menu in the list. See the UTM map menu software for an example. 

See Appendix 0 for the format of some sample walking menu files. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 
/usr. MC68020/cherokee/VADS55/standard 
/eddic/Ada/ued 

To load a program that uses this package, links must be established with the following 
libraries using the *a.info" command: 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

Data Bases . None 

Environment Variables . None 


4.1.2.4 DML_DSPL_MENU_LAYOUT 

Abstract . DML_DSPL_MENU_LAYOUT is an acronym for the Display Menu Layout package, 
which draws, graphically, the walking and/or multiple selection menu hierarchy. 

Major Capabilities . DML_DSPL_MENU_LAYOlTT displays a hierarchical picture of any walking 
menu or multiple selection menu in the Tactical Planning Workstation, using the tree structure 
builder (TSB) package. DML_DSPL_MENU_LAYOUT will not edit a menu; It merely displays it. 
If a display will not fit in the window, then scroll bars will be added automatically in the 
direction(s) needed. 

Special Instructions . DML_DSPL_MENU_LAYOUT will only display one menu at a time, and 
that menu's file name is passed in by argument. It is the applications responsibility to create 
the file name of the menu to be displayed, and provide the user a means of selecting the 
desired menu. 


4-19 



The display menu layout uses Ada tasking. There are three tasks within DML: First, is 
a one time, per execution, initialization (DSPLJNrT_MENU); second, is a one time, per 
execution, termination (TERMINATETASK); third, is all other event processing 
(PROCESSJNPUT). PROCESSJNPUT does not receive events directly from the system, via 
UWNJNPUT; the calling process passes input events to it through the procedures arguments. 
Because PROCESSJNPUT does not have its own call to UWNJNPUT, it must tell the 
application if the event received was a window termination event. PROCESSJNPUT is called 
once for each event. 

To compile this package, the following paths must be established using the "a.path- 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the *a.info" command: 

/egen/cwnutil/cwn.lib 

/egen/ciw_util/ciw_util.lib 

/usr/lib/tibXr.a 

/usr/lib/libX__p.a 

/usr/Iib/libX.a 

Data Bases . Any menu file, determined by the input arguments. 

Environment Variables. None 


4.1.3 UED EDDIC Utilities 

The EDDIC utilities consist of general purpose utilities that are used throughout the 
system. The utilities provide the following major functions: 

Math Functions 

String Manipulation Utilities 

List Manager 

Queue Manager 

Tree Layout Manager 

Each major function has its own Ada specification and body and will be described 
separately in the following section. 


4-20 



4.1.3.1 UED_EDDIC_MATH_UTIL 
Abstract . All-purpose math utilities. 

Major Capabilities . The math utility package provides the following capabilities: 

- Ordering units in a task organization 

- Distance between two points 

- Distance between a point and a line segment 

- Intersection of two lines 

- Sine and cosine of a line 

- Intersection of two line segments 

- Offset a point a distance from a line 

- Intersection of a point and a line 

Special Instructions . To compile this package, the following paths must be established using 
the "a.path" command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info“ command: 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables. None 


4.1.3.2 UEDJJST 

Abstract . UEDJJST is a generic utility package for creating and maintaining an ordered list of 
data items. 

Major Capabilities . The list utility enables the user to create a list by providing the capability 
to insert before or after another data item. Functions are provided to go to the beginning of 
the list, check for the end of a list, or obtain the count of the number of elements in the list. 
Other capabilities include retrieving an item from the list without deleting the item from the list, 
deleting an item from the list, setting the current item in the list to a specific item, or querying 
the contents of the list via receiving an array of the list's data. 


4-21 




Special Instructions . The list always maintains a pointer to the current Item in a list and 
operates with respect to the current position. An insertion operation always causes the newly 
inserted item to be the current item. Therefore, if item A is inserted before item B and the 
next operation performed is a retrieval of the next item, item B would be retrieved, whereas, if 
the next operation was delete, item A would be deleted from the list. A query of the list’s 
contents always sets the current position to the beginning of the list. 

To compile this package, the following paths must be established using the ‘ , a.path“ 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

Data Bases . None 
Environment Variables. None 


4.1.3.3 UED_QUEUE 

Abstract . UED_QUEUE is a generic utility package for creating and maintaining a queue of 
data items where the data items are added to the end of the list and retrieved from the 
beginning of the list. In other words, this Is a first-in-first-out list utility. 

Major Capabilities . The user has the capability of peeking at the next item on the queue or 
deleting the item from the queue. Functions are provided for determining if the queue is 
empty or how many items are left in the queue. One may also query the contents of the 
queue via receiving an array of the queue's data. 

Special Instructions . To compile this package, the following paths must be established using 
the "a.path* command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

Data Bases . None 

Environment Variables . None 


4-22 





4.1.3.4 UED STRING UTILITIES 


Abstract . All-purpose string utilities. 

Major Capabilities . The string utility packages provides the following general purpose string 
utilities: 


- Count the number of lines in a string buffer 

- Convert an integer to a string 

- String search 

Special Instructions . To compile this package, the following paths must be established using 
the "a.path" command: 

/eddic/Ada/common 

/usr.MC68Q20/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

Data Bases . None 

Environment Variables. None 


4.1.3.5 TSB_LOCATION 

Abstract . TSB_LOCATION is an acronym for Tree Structure Builder Location package, which 
determines (builds) the placement (location) of all the elements in a hierarchical tree structure, 
as well as drawing all of the connecting lines to each element. 

Major Capabilities . Before addressing the capabilities, some terms need to be defined. All 
elements in the tree will be equated to a family. The first element is called a parent. If that 
element has any elements hierarchically below It (inferior), then these are his children. If 
children have children then the former also become parents, and so on. If any element has 
any elements hierarchically equivalent to it, then these are his siblings. This is true for 
parents as well as children. The very first element in the list is the ’oldest’, and each 
subsequent set of children is a generation. 

TSB.LOCATION builds a hierarchical tree structure where a parent is above, in the 
Y-direction, and centered, in the X-directlon, on it’s children. The calculation of locations is 
done in inverse order, lowest to highest. The application passes in the oldest (highest) 
element and the algorithm steps down until an element is found with no children, and it is 
placed. Then Its siblings are placed, again stepping down to a level of no children before 
placing. Internally there is a position availability tracker for each generation. Entire 


4-23 






generations may be shifted to the right in order to accommodate elements from a previous 
lower generation. This is accomplished with recursive programming. 

In a lot of tree structures the display X to Y ratio is very lop-sided in the X-direction. In 
an attempt to make this ratio more even; i.e., the display more square, children may be 
displayed by one of three methods, see Figure 4-1: 

1. This method is the normal way trees are displayed with each child displayed one 
next to the other forming a horizontal line under the parent. This method does not save any 
horizontal space. This method is accomplished by setting both the VRT_CHLDRN_R_L£GAL 
and VRT_SIBLNG_R_LEGAL arguments to ’False’ on the call to TSB_FIND_XY_LOC. 

2. This method will save space by stacking the children under the parent forming a 
vertical line down. This can only be done to a generation of children who have no children of 
their own. If any child in that generation has a child, then the whole generation must be 
displayed horizontally. There are also checks in the program to make sure that vertical 
placement will result in actual X-direction space savings. If a previous siblings lower 
generation would block the families vertical display then the entire mini-family would be 
shifted over to accommodate. If the shift is so great that displaying horizontally would have 
been less costly, then the whole generation is displayed horizontally. This method is 
accomplished by setting the VRT CHLDRN_R LEGAL argument to True’ on the call to 
TSB_FIND_XY_LOC. 

3. This method will also save space and is a spin off of method two. This method is 
best explained with an example: There are six children in the family, the first two 

(oldest) siblings have children, the last (youngest) four siblings do not; The last four children 
are then displayed vertically after the last sibling with children, child number two. The 
resultant display would have the first three children in a horizontal line with the last three 
children in a vertical line underneath the third child. The parent is then centered in the X 
direction above the first three children. This method is accomplished by setting the 
VRT_SIBLNG_R_LEGAL argument to True’ on the call to TSB_FIND_XY_LOC. 

The greatest space savings occurs with a combination of methods two and three. 

This is accomplished by setting both the VRT_CHLDRN_R_LEGAL and 
VRT_SIBLNG_R_LEGAL arguments to True’ on the call To TSB_FiND_XY_LOC. 

Special Instructions . The TSB_LOCATION package is called by the outside world for one of 
two reasons: (a) to determine the x-y location of each element in the tree, (b) to draw the 
connecting lines between each element of the tree. 

Upon return the upper left comer x,y and center x,y points will be set for each 
element. 


4-24 











Within this package there is a record structure which contains the attributes of each 
tree element. One of the attributes in this structure is a pointer to the elements first child; 
another attribute points to the elements next sibling. Using these two attributes of the 
structure a forward pointing link list can be built. A parent with multiple children points to its 
first child and each child then points to its next sibling. This record structure also contains 
an attribute reserved for application dependent data. This data structure is determined by the 
application. This is accomplished by having the application define the data structure type, 
then instantiating this package with that structure type. If the application does not require any 
special data associated with each element, then it must create a dummy structure type. 

Before this package is called the entire link list must be established and the width and 
height attributes must be set for each element. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
iibraries using the *a.info" command: 

/egen/cwn_util/ciw.lib 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

Data Bases . None 

Environment Variables. None 


4.1.4 UFM Form Manager 

The form manager consists of a high-level package that controls form display and 
interaction, and a low-level package for interacting with individual editors within a form. The 
high-level package (UFM_FORM_MANAGER) uses an ASCII buffer to describe the layout and 
contents of a form. Once the ASCII buffer is passed to the form manager, the form manager 
takes control of the form. The low-level package (UFM_FORM_FIELDS) provides procedures 
to dynamically add or delete individual editors in a form. The wiling application is 
responsible for the location of all editors and processing all input except field traversal. 


4-26 








4.1.4.1 UFM_FORM_MANAGER 

Abstract . High-level form manager package that provides capabilities to read a form 
description from a file, validate a form description, and display and maintain a form. 

Major Capabilities . The Form Manager provides a easy and flexible tool for designing and 
maintaining a form based user interface. A form consists of static text, form field editors, 
geometric symbols. Figure 4-2 shows the editors that are available in a form. The form 
manager provides procedures to read a form description buffer from a file, validate a form 
buffer, and display the form buffer. 

The ASCII buffer that describes the form is divided into three sections. The first 
section contains the static text and the layout or position of the editors. Space must be 
reserved in both the X and Y direction for the size of the editors. The second section 
describes the geometric symbols to be drawn in the form. The third section describes the 
attributes of each editor. See "FORM_DESCRIPTION" in appendix D for a complete 
description of the form ASCII buffer. 

Special Instructions . The validator procedure checks a form description for accuracy and 
completeness. The following lists some of the warnings or errors which are detected: 

Invalid form size 

Invalid static text size in terms of absence of carriage returns 

Absence of a static text section terminator 

Invalid editor parameter values 

Insufficient parameters to define an editor 

Detection of an editor located but not described 

Detection of an editor described but not located 

If insufficient parameters are used to define an editor, the validator will display 
warnings stating that default parameters will be used. The default parameters for the editors 
are shown as part of the "FORM_DESCRIPTION" in appendix D. 

The form manager was implemented as an Ada task. The typical order of processing 
from the application’s standpoint, is to define the form, pass detected input to the task for 
processing, query the results of the input processing, and lastly, terminate the form task. 

The form's visible size is specified by the application. If the form exceeds the size in 
either width or height, a scrollbar is inserted into the form. The form manager utilizes three 
windows for displaying a form (form, parent, and clipping). The form window contains the 
whole form including the portions that are outside the visible window. The parent window 
contains the optional scrollbars and the clipping window. The clipping window defines the 
visible portion of the form. If the whole form fits into the window, the form window and the 
clipping window are the same size. 


4-27 




SELECT 8ISI1II OpTJOI 

El 

ortioi oik 

□ 

0 f T 1 01 TfO 

□ 

o v t i o i mu 

m 


□ 

OfTIOI flfl 

□ 

oftioi srx 




SELECT OPTIOI 

□ 

OPTIOI 0IE 

□ 

OPTIOI TIO 

□ 

OPTIOI TliEE 

B 

OPTIOI POOR 

□ 

OPTIOI FITE 

□ 

OPTIOI SIX 


Multiple Selection 
Menu 


Single Selection 
Menu 


Memo Text 
Editor 


□ 

□ 

□ 


OPTIOI 0 X E 
OPTION TIO 

OPTIOI THKEE 
OPTIOI POO! 


□ 

E3 

□ 


OPTIOI Oil 

OPTIOI TWO 

OPTIOI THSEE 
OPTIOI FOBS 



Radio Button 


Checkbox 


Digital Map 


HUP BETTOR 


BEIO TITLE 


Heao lift Oat 


Beau 11 1 a Tvo 


Bill 

I tea 

Tint 


► 

Bibb 

I tea 

Fan 


leas 

11 • a 

Piet 



Pulldown Menu 


Sib 

I tea 

0 a e 

Sab 

I tea 

T»a 

St b 

I tea 

Tit • t 

Sub 

I tea 

Peer 

Sub 

1 tea 

Plee 

Sab 

Itea 

Six 


■Eli TITLE 


itn 

tte» 

Oat 


Beau 

lt«» 

Two 


III! 

Itea 

Title 

► 

Itn 

I tea 

Post 


Bibb 

I tea 

Plee 



Popup Menu 


Sub 

Itea 

0 a e 

Sub 

11«» 

Ta o 

Sub 

Itea 

Tb I Cl 

Sub 

Itea 

Tour 

Sub 

11II 

r l ee 

Sub 

1 tea 

S 1 x 


Push Button 

IITT01 


String Editor 


STIIIO 


AICPEPG 


Numeric Editor 


HIES IC 


12 34567 


Figure 4-2 Form Field Editors 


4-28 





















An additional feature was incorporated into the form manager to handle the memo-text 
scrollbars. If the user scrolls the form so that both of the memo-text scroll arrows are not 
visible, the form manager resizes the memo-text field to fit in the visible portion of the form. 

Once a static text indicator is found in the static text section, all lines of the text will 
align with the column where the indicator was first detected, until another static text indicator 
is found. 

Entry point TERMINATE_FORM_TASK“ deletes the form editors, therefore, 
“DELETE_FORM" does not need to be called before TERMINATE_FORM_TASK". 

To compile this package, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/ued 

/eddic/Ada/utm 

/eddic/Ada/uux 

/eddic/Ada/uwn 

/eddic/Ada/uin 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/ciw_util/ciw_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

Aisr/lib/IibX_p.a 

/usr/lib/libX.a 

/usr/Iib/libm.a 

Data Bases . F0RM_DESCRIPT10N INPUT/OUTPUT 
Environment Variables. None 


4.1.4.2 UFM_FORM_FIELDS 

Abstract UFM_FORM_FIELDS is the base utility package for defining and managing fields 
within a form defined via UFM_FORM_MANAGER or manually from software. 


4-29 







Major Capabilities . The form field manager is similar to that of the form manager but has the 
distinct advantage of performing dynamic interaction within a form; i.e., defining, moving, 
deleting, and resizing individual editors. It also performs the traversal from one traversal 
editor to another. The traversal editors include the number field editor, the string field editor, 
and the full page text editor. 

Special Instructions . Procedure UFMJNITIAL1ZE_F0RM_FIELDS must be called before any 
editors are added to a form. 


The form field manager was developed to be used in conjunction with the UWN 
window utilities system. It does not keep track of individual panels, windows, or menus an 
application wishes to use. It is only concerned with the location of the physically displayed 
objects within a form. 


The valid form fields consist of the following: 
Field Description 


Button_Walk 

Checkbox_Menu 

Memo 

Number_Field 

Pushbutton 

Radiobutton 

Scrollbar 

Static_Text 

String_Field 


A pulldown walking menu activated by a button 
A checkbox editor 
A full page text editor 
A numeric field editor 
A push button field editor 
A radio button field editor 
A scrollbar field editor 
A static text field editor 
A string field editor 


A button_wa!k editor can be defined, but cannot be changed or moved. The 
incorporation of this editor was for the development of the form manager only. It should also 
be noted, that the tracking of a digital map’s location and size is not included in this package. 

To compile this package, the following paths must be established using the “a.path" 
command: 


/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/ued 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 


4-30 





/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/(ib/IibX_p.a 

/usr/Iib/libX.a 


Data Bases . None 
Environment Variables. None 


4.1.5 UIN INTERNET COMMUNICATIONS 

Abstract . UIN_INTERNET_COMMUNICATIONS is an acronym for a set of utility 
communications primitives that allows processes to communicate with each other using an 
InterNet protocol. Programs may communicate with each other both within one processor 
and over an ethemet network. 

Major Capabilities . UINJNTERNET_COMMUNICATIONS is a stand alone utility package (not 
a process) that does not require the fileserver routers and/or data base managers to 
operate. This utility package is founded on a server client relationship, which is defined 
below in the special instructions. 


Special Instructions . The server client relationship is best defined with an example (see 
Figure 4-3): Process A needs to communicate with process B, so process A becomes the 
server via UIN_ESTABUSH_SERVER. Once established as the server, process A may go 
about other business, but must ultimately come to the place where it sits, via 
UIN SERVER WAIT, and listens for others to call. Process B then connects, via 
UIN~CUENT_CONNECT_SERVER, to the server, via UIN_SERVER_CONNECT_CUENT, 
becoming a client This is a one time connection and the connection should not be broken 
or closed via UIN_CLOSE_SOCKET, until the process is terminated or the client is sure there 
is no longer a need to communicate with the server. Once these connections are 
established, process B may go about other business. When the need arises for process B to 
communicate with process A, a message is sent via UIN_SEND_MSG, and the server, who is 
waiting via UIN_SERVER_WArT receives it via UIN_RECv[MSG. "There is a current UNIX 
system limit of thirty-one processes (clients) connected to any given server. 

Within the Tactical Planning Workstation there are special processes set up, called 
routers, whose soul purpose is to facilitate communications among other processes. These 
routers are the servers, and all communications get routed (hence the clever name) through 
them en route to their final destination. 


4-31 







Figure 4-3 Internet Communications 

The structure and layout of the message is almost entirely process dependent; i.e., the 
process may create an Ada structure of any size, shape, and type. The only stipulation is the 
beginning four bytes must contain the length (size in bytes) of the message. It then becomes 
the applications responsibility to make sure the clients and server have matching Ada 
structures, as UIN_SEND_MSG and UIN_RECV_MSG will merely pass a bit stream. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixiib 

/usr.MC68020/cherokee/VADS55/standard 

To load a program that uses this package, links must be established with the following 
libraries using the “a.info" command: 

/egen/dn_util/cin_util.lib 

/egen/cux_util/cux_util.lib 

Data Bases . None 


4-32 



















Environment Variables . None explicitly, two implicitly passed in by argument. 


host Jd - name of the server machine, 

servicejd - name of the service id (INET port number). 


4.1.6 UIW Image Window System 

The Image Window system contains the utilities to display color images, fonts, and 
text. The image processing utilities are separated into a generic package (UIW_GENERIC) to 
allow the display of different image types. The other color utilities are contained in 
UIW_IMAGE_W!NDOW. 


4.1.6.1 UIW_GENERIC 

Abstract . U!W_GENERIC is an acronym for a set of Utility Image Windowing 
primitives, which allows programmers to perform certain color graphics imaging functions 
within the X Windows System environment. 

Major Capabilities . UIW_GENERIC is a stand alone utility package (not a process) which 
does not require the fileserver routers and/or data base managers to operate. This utility 
package allows programs to access X Windows color graphics imaging commands from high 
level languages, without having an intimate knowledge of the X Windows system. However, 
the programmer must have some knowledge or concept of X Windows or graphics 
processing. There is net a one to one pairing of modules to X Windows commands; only 
those commands required by the Tactical Planning Workstation have been developed. 

Special Instructions . The application calling this package must define a data structure type 
for the image data, then instantiate this package with that structure type. 

An image, laid straight into a bit pattern will be the inverse of what X Windows is 
looking for. So adjust it with UIWuuxJ 6BfT_SWAP. Then a pixmap of the swapped image 
must be created with UIW_CREATE_PIXMAP, and finally it can be displayed with 
UIW_DISPLAY_BITJMAG£f (uiw_image_window_s.a). UIW_DISPLAY_IMAGE displays images 
that are eight bits deep. 

To compile this package, the following paths must be established using the "a.path” 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 


4-33 






To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/ciw_util/ciw_util.lib 

/usr/Iib/libX.a 

/usr/Iib/libX_p.a 

Data Bases . None 

Environment Variables. None 


4.1.6.2 UIWJMAGEJVINDOW 

Abstract . UIW_IMAGE_WINDOW is an acronym for a set of Utility Image 

Windowing primitives, which allows programmers to perform certain color graphics imaging 

functions within the X Windows System environment. 

Major Capabilities . UIW_IMAGE_WINDOW is a stand alone utility package (not a process) 
which does not require the fileserver routers and/or data base managers to operate. This 
utility package allows programs to access X Windows color graphics imaging commands 
from high level languages, without having an intimate knowledge of the X Windows 
system. However, the programmer must have some knowledge or concept of X Windows or 
graphics processing. There is not a one to one pairing of modules to X Windows commands; 
only those commands required by the Tactical Planning Workstation have been developed. 

Special Instructions . UIW_INfT_FONT must be called one time, up front, for each font type 
being used, before UIW_DISPLAY_SYMBOL or UIW_DISPLAY_TEXT may be used. 

UIWJNfTJ_OOKUP_TABLE must be called one time, up front. 
UIW_LOAD_LOOKUP_TABLE is the means for loading colors into the lookup table, but the 
addition or alteration of color entries will not appear until a UIW_STORE_LOOKUP_TABLE is 
performed. 

A plane mask returned by UIW PLANE MASK is required by 
UIW_DISPLAY_BFT_IMAGE, UIW DISPLAY CIRCLE, UIW DISPLAY IMAGE (uiw generic_s.a), 
UIW_DISPLAY_UNE, UIW.DISPLAY LINES] UIW DISPLAY SYMBOL, UIW DISPLAY TEXT, 
UIW_ERASE_PLANES, and UIW_RUBBERBANDJJNE. 

A bit image must be converted to a pixmap by U!W_CREATE_P1XMAP 
(uiw_generic_s.a) before UIW_DISPLAY_BfTJMAGE can be called. Provided the application 
does not need the pixmap again the memory can be freed by calling UIW_FREE_P1XMAP. 


4-34 




UIW_FLUSH_BUFFER forces a flushing of the graphics command buffer. This module 
is called automatically by any X Windows module which returns a value or calls to XPending, 
XNextEvent, XWindowEvent, or XSync. Three of these, XPending, XNextEvent, and XSync, 
are called in UWNJNPUT. Which means tnat UWNJNPUT flushes the graphics command 
buffer. 


To compile this package, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

To load a program that uses this package, links must be established with the following 
libraries using the H a.info H command: 

/egen/ciw_util/ciw_util.lib 

/usr/lib/libX.a 

/usr/lib/libX_p.a 


Data Bases . None 
Environment Variables . None 


4.1.7 UTM TACTICAL MAP 


The Tactical Map Ada package provides the procedures to display and interact with a 
digital map and the tactical overlays on top of the map. The Tactical Map software consists 
of several layered packages with "UTM* being on top. Figure 4-4 shows the Tactical Map 
package hierarchy. 

The four system packages (MAP_SYSTEM, UNfT_SYSTEM, CM_SYSTEM, and 
OBS_SYSTEM) contain data types and objects that are common for the whole map system. 
Descriptions of the individual Tactical Map packages follow. 


4.1.7.1 CM_SYSTEM 

Abstract . Data types and objects for the control measures displayed on the digital map. 
Malor Capabilities . Type definition and object storage. 


4-35 





4.1.7.1.1 Speciallnstructions . This package is meant for internal use to the UTM package. 
Although the objects in this package are visible to the calling application, it is unwise to 
change the contents of any of the objects. 


OTH TACTICAL.HAP 




Figure 4-4. Tactical Map Packages 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 


Data Bases . None 
Environment Variables . None 


4-36 



4.1.7.2 MAP SYSTEM 


Abstract . Data types and objects for the map objects of the digital map system and object 
orientated graphics utilities. 

Major Capabilities . Type definition and object storage and object control utilities to determine 
which object was selected on the map and to delete objects displayed on the map. 

Special Instructions . This package is meant for internal use to the UTM package. Although 
the objects in this package are visible to the calling application, it is unwise to change the 
contents of any of the objects. 

The overlays displayed on the map consist of the following types: lines, points, 
polygons, rectangles, and circles. A list of the displayed objects and a list of popup menus 
associated with the objects are maintained by this package. Working with the lists is very 
simple and uses the UED_UST utilities. The only time a programmer must work with these 
lists is to implement a new control measure or obstacle, or add a new overlay category to the 
map system. 

To implement a new control measure or obstacle, the new object must be added to 
the object list when it is displayed. This package contains a package to determine if any part 
of an object will be displayed in the digital map window. 

To add a new map overlay category, such as a new operational planning tool, the 
following steps must be completed: 

1. A new popup menu must be defined for the new object. Normally this would 
be accomplished by adding a new menu definition procedure to UTM 
specification. 

2. The popup menu description must be added to the menu list in the package. 

3. The new object must be added to the object list when it is displayed. 

4. Procedures must be added to UTM_PROCESS_INPUT to process the 
selections on the new popup menu. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/ued 


4-37 





Data Bases. None 


Environment Variables. None 


4.1.7.3 OBS_SYSTEM 

Abstract . Data types and objects for the object displayed on the digital map. 

Major Capabilities . Type definition and object storage. 

Special Instructions . This package Is meant for internal use to the UTM package. Although 
the objects in this package are visible to the calling application, it is unwise to change the 
contents of any of the objects. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

Data Bases . None 

Environment Variables. None 


4.1.7.4 UNIT_SYSTEM 

Abstract . Data types and objects for the BLUEFOR and OPFOR units displayed on the digital 
map. 

Major Capabilities . Type definition and object storage. 

Special Instructions . This package is meant for internal use to the UTM package. Although 
the objects in this package are visible to the calling application, it is unwise to change the 
contents of any of the objects. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 


4-38 




Data Bases. None 


Environment Variables. None 


4.1.7.5 UCE_CNTRL_MSR_EDITOR 

Abstract . Low level control measure utilities for displaying and erasing specific control 
measure types. 

Major Capabilities . This package contains an individual procedure for each control measure 
type in the system. Each procedure is responsible for the display and erasure of a specific 
control measure and is the only software that knows exactly what the control measure looks 
like in the digital map window. 

Special Instructions . These procedures are responsible for adding control measure objects to 
the object list in MAP_SYSTEM. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load a program that uses this package, links must be astablished with the following 
libraries using the "a.info" command: 

/egen/ciw_util/ciw_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables . None 


4-39 





4.1.7.6 UCM_CONTROL_MEASURE 

Abstract . Intermediate level control measure display package responsible for the defining, 
displaying, and interacting with control measures on the digital map. 

Major Capabilities . This package provides procedures to: 

1. Define control measure areas, crossings, fire plans, lines, map features, points, 
and routes. 

2. Selective display and erase of control measures by echelon, type, and color. 

3. Delete a control measure from the digital map window. 

4. Move a control measure in the digital map window. 

5. Interact with the control measure definition and display menus. 

6. Redisplay all control measures in the digital map window. 

Special Instructions . The control measure initialization procedure 
UCM_INrTIAL!ZE_CNTRL_MSR must be called as part of the map initialization steps and 
before other procedures in this package are used. 

The normal procedures for defining control measures with multiple points is for the 
“DEFINE" procedure to display the control measure define menu and accept the first point. 
The other points are processed by UCE_DEFINE_NEXT_POINT. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the “a.info* command: 

/egen/ciw_util/ciw_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/IibXr.a 

/usr/lib/libX_p.a 


4-40 




/usr/?ib/JibX.a 


Data Bases . None 
Environment Variables. None 


4.1.7.7 UME_MAP_EDITOR 

Abstract . Low level digital map utilities for reading and displaying digital map images and 
displaying grids. 

Major Capabilities . The map editor utilities determine the file name to use for a digital map 
image, open the map image file, determine the map blocks to display, display the map 
blocks, and close the map image file. They also determine the grid interval and display the 
grid lines and labels. 

Special Instructions . Procedure UME_INIT_MAP_SYSTEM must be called before the other 
procedures in this package. UME_DEFINEF_MAP]_COORD should be called whenever the size 
of the map panel changes or the map scale changes. 

To compile this package, the following paths must be established using the H a.path" 
command: 

/eddic/Ada/common 

/usr. MC68Q20/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the *a.info" command: 

/egen/ciw_util/ciw_util.lib 

/egen/cux_util/cux_util.lib 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 


4-41 




Data Bases 


CONTOURJTO160 INPUT 

CONTOUR~lTO400 INPUT 

CONTOURJT080 INPUT 

CONTOUR~1T0800 INPUT 

contour'desc INPUT 

CONTOUR~DESC_1 TOI60 INPUT 

CONTOUR~DESC_1 T0400 INPUT 

CONTOURj)ESC~1T080 INPUT 

CONTOUR_DESC~1 T0800 INPUT 

ELEVATION 1T0400 INPUT 

ELEVATION~DESC 1T0400 INPUT 

ELEV BAND~1T0160 INPUT 

ELEV_BAND_1T0400 INPUT 

ELEV_BAND_1 T080 INPUT 

ELEV_BAND_1 T0800 INPUT 

ELEV~BAND_DESC_1T0160 INPUT 
ELEV~BAND_DESC_1 T0400 INPUT 
ELEV BAND_DESC 1T080 INPUT 
ELEV~BAND_DESC~1 T0800 INPUT 
MAP_DESC INPUT 

SHAD_RELF 1 TOI 60 INPUT 

SHAD RELFJT0400 INPUT 

SHAD_RELF_1 T080 INPUT 

SHAD RELFJT0800 INPUT 

SHAD_RELF_DESC 1 TOI 60 INPUT 
SHAD_RELF~DESC 1T0400 INPUT 
SHAD__RELF_DESC 1T080 INPUT 
SHAD~RELF_DESCJ T0800 INPUT 
VEGETATIONJTO160 INPUT 

VEGETATIONJT0400 INPUT 

VEGETATION_1T080 INPUT 

VEGETATION_1T0800 INPUT 

VEGETATION_DESC 1T0160 INPUT 
VEGETATION DESC~1T0400 INPUT 
VEGET ATION_DESC~1 TO80 INPUT 
VEGETAT10N_DESC_1 T0800 INPUT 

Environment Variables . None 


4-42 



4.1.7.8 UMP MAP 


Abstract . Intermediate level digital map utilities for displaying and erasing the digital map and 
digital map features. 

Major Capabilities . The map utilities provide the procedures to display and erase the digital 
map, contours, and grids. Also included are procedures for highlighting and unhighlighting 
hydrography, roads, urban areas, and miscellaneous features on the digital map. 

Special Instructions . Procedure UMPJNITIAUZE_MAP must be called before the other 
procedures in this package. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/ciw_util/ciw_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libXjD.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables . 

CHARACTER FONT FILE 
CONTROL ROUTER" HOST 
CONTROL ROUTER"SERV 
CONTOUR DESCRIPTION FILE 


4-43 





ELEV_DESCR!PTION FILE 
MAP_DESCRIPTION FILE 
SYMBOL_FONT FILE 


4.1.7.9 UNT_UNIT 

Abstract . Intermediate unit display utilities for displaying and erasing units on the digital map. 

Major Capabilities . The unit utilities provide the procedures for displaying, moving, and 
erasing the BLUEFOR and OPFOR units and displaying the OPFOR unit status report. 

Special Instructions . Procedure UNTJNmALIZEJJNITS must be called before the other 
procedures in this package. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info“ command: 

/egen/cin_util/cin_util.lib 

/egen/ciw_util/ciw_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables . None 


4.1.7.10 UOB_OBSTACLE 

AfrStfflfil- Intermediate obstacle display utilities for displaying and erasing obstacles on the 
digital map. 






Major Capabilities . The obstacle utilities provide the procedures for displaying, moving, and 
erasing obstacles on the digital map. 


Special Instructions . Procedure UOB_INITlALIZE_OBSTACLE must be called before the other 
procedures in this package. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixJib 

/usr.MC68020/cherokee/VADS55/standard 

To load a program that uses this package, links must be established with the following 
libraries using the n a.info” command: 

/egen/ciw_util/ciw_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables . None 


4.1.7.11 UOE_OBSTACLE_EDITOR 

Abstract . Low level obstacle utilities for displaying and erasing specific obstacle types. 

Major Capabilities . This package contains an individual procedure for each obstacle type in 
the system. Each procedure is responsible for the display and erasure of a specific obstacle 
and is the only software that knows exactly what the obstacle looks like in the digital map 
window. 

Special Instructions . These procedures are responsible for adding obstacle objects to the 
object list In MAP_SYSTEM. 

To compile this package, the following paths must be established using the ”a.path" 
command: 


4-45 


/eddic/Ada/common 

/us r. MC68020/cherokee/VA0S55/verdixiib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/ciw_util/ciw_util.lib 

/egen/cwn_util/cwn.IiL 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables. None 


4.1.7.12 UTM_TACT1CAL_MAP 

Abstract . Top level digital map utilities for displaying the digital map and overlays. Overlays 
consist of units, control measures, and obstacles. 

Major Capabilities . The tactical map utilities provide the interface between the digital map 
system and the application program. This is the only package an application should require 
to use the complete capabilities of the tactical map system. The tactical map system consists 
of map, unit, control measure, and obstacle utilities. 

The map utilities include procedures to display the digital map background, resize the 
map panel, erase the overlays, and delete the map panel. The utilities for units, control 
measures, and obstacles include procedures to display the overlay, change the overlay, and 
attach a popup menu to the overlay. 

Special Instructions . Procedure UTM_DEFINE_MAP_PANEL must be called before the other 
procedures in this package. 

Procedure UTM_DEFINE_OPLAN must be called whenever the overlay data’s date-time 
group or OPLAN id changes. 

To allow interaction with the tactical map, procedure UTMJNPUT must be used for ail 
input instead of UWNJNPLfT. UTMJNPUT passes ail input, that te not part of the map panel, 






to the calling process. It also passes the following map updates back to the calling process: 
unit location change, control measure location change, new control measure, obstacle 
location change, and new obstacle. 

After deleting the map panel, procedure UTM_DELETE_MAP_MENUS should be called 
to deallocate the memory used for the map walking menus. 

To compile this package, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usr. MC68020/cherokee/VADS55/verdbdib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/ciw_util/dw_utii.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables . REC0RD_MAP_1NTERACT10N 


4.1.7.13 UUE_STATUS_REPORT 

A&StffiSt Displays the graphical unit summary and detail status reports. 

Mafor Capabilities. The status report package provides procedures to display detail and 
summary reports. The detail report presents unit strength with a "Mercedes-type" chart 
surrounded by the actual counts and percentages corresponding to each section of the 


4-47 







"Mercedes-type" chart. The summary report presents the percentage strength for a unit and 
its subordinates. 


Special Instructions . Procedure UUE_DEFINE__STATUS_PIXMAP must be called before using 
the other procedures in this package. 

This package uses Ada tasking to allow the display of multiple status windows at the 
same time. There are two tasks in this package, the detail status task and the summary 
status task. Both tasks have the same entry points, as follows: 

INITIALIZE • Creates the popup window and displays the report. 

PROCESSJNPUT • Processes ail input for the status popup window. The application 
is responsible for determining if the input belongs to the status window and for calling 
this procedure to process it 

TERMINATE_TASK - Deletes the status report window and deallocates memory 
allocated for status structures. This procedure should be called when the application 
program wants to terminate the status report rather than having the user terminate it 
from the popup menu. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr. MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info’ command: 

/egen/dn_util/cin_utll.lib 

/egen/ciw_utll/dw_util.lib 

/egen/cux_utU/cux_utJl.lib 

/egen/cwn util/cwn.lib 

/usr/lib/libXr.a 

/usr/Ub/lfbXj>.a 

/usr/Hb/NbX.a 

/usr/lib/libm.a 


4-48 






Data Bases. None 


Environment Variables . CHARACTER_F0NT_F1LE 


4.1.7.14 UUE_UN(T_EDITOR 

Abstract . Low-level unit display utilities to display the unit symbol, echelon, name and status. 

Major Capabilities . The unit editor package contains procedures to display and erase unit 
symbols, echelon symbols, names, and unit status report. The unit symbol procedure is the 
only software that knows exactly what the unit looks like in the digital map window. 

Special Instructions . These procedures are responsible for adding unit objects to the object 
iist in MAP_SYSTEM. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the “a.info* command: 

/egen/ciw_util/ciw_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libXjp.a 

/usr/lib/libX.a 

/usr/lib/llbm.a 

Data Bases. None 

Environment Variables. None 


4-49 



4.1.7.15 UCC COORD CONVERT 


Abstract . General purpose coordinate conversion utilities. 

Major Capabilities . The coordinate conversion package contains procedures to perform the 
following conversions. 


World Coordinate 

to 

Military Grid 

World Coordinate 

to 

Pixel 

Military Grid 

to 

World Coordinate 

Pixel 

to 

World Coordinate 


Special Instructions . Procedure UCC_DEFINE_MAP_AREA must be called whenever the size 
of the digitized map area changes and UCCj5eFINE_MAP_DISPLAY must be called 
whenever the map scale or map window size changes. 

Currently, this package will only work with the Central Germany digitized area. Future 
enhancements should be made to allow this package to work for any digitized area in the 
world. 


To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

Data Bases . None 

Environment Variables . None 


4.1.8 UUX Unix Utilities 

The Unix Utilities consist of procedures to communicate with the Unix operating 
system. The input and output (I/O) utilities are separated into a generic package (UUXJO) to 
allow binary I/O of all types of buffers. The other Unix utilities are located in the UUX_UTIL 
package. 


4-50 


4.1.8.1 UUX 10 


Abstract . UUXJO is an acronym for a set of utility input and output primitives, which allow 
programs access to low level input and output. 

Major Capabilities . UUXJO is a stand alone utility package (not a process) which does not 
require the fileserver routers and/or data base managers to operate. This utility package 
provides a means for programmers to perform very rudimentary input and output functions, 
which some high level languages do not permit 

Special Instructions . The application calling this package must define a data structure type 
for the input/output data, then instantiate this package with that structure type. 

All files must be opened with UUXJDPEN FILE before they can be read 
(UUX_BINARY_READ) or written to (UUX_BINARY_WRITE). Once a file is opened it must be 
explicitly closed with UUX_CLOSE_FILE; do not expect the system to dose the file at 
process termination, because it won't. 

To compile this package, the following paths must be established using the “a.path” 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

To load a program that uses this package, links must be established with the following 
libraries using the “a.info" command: 

/egen/cux_util/cux util.lib 

Data Bases . None explicitly, all implicitly. Procedures uux_openJile, uux_close_file, 
uuxj)inary_read, and uux_binary_write will work with any data base. 

Environment Variables . None 


4.1.8.2 UUX_UTIL 

Afegtfflct- UUXJJT1L is an acronym for a set of utility primitives, which allow programs to 
access Unix operating commands. 


4-51 




Major Capabilities . UUX_UTIL is a stand aJone utility package (not a process) which does not 
require the fileserver routers and/or data base managers to operate. This utility package 
provides a means for programmers to perform certain Unix operating system commands 
which many high level languages do not permit. There is not a one to one pairing of 
modules to Unix commands; only those commands required by the Tactical Planning 
Workstation have been developed. 

Special Instructions . UUX_SYSTEM will not return any data, so query type commands must 
redirect their output to a file. 

To compile this package, the following paths must be established using the "a.path" 
command; 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 
/usr. MC68020/cherokee/VADS55/standard 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/cux_util/cux_util.lib 

Data Bases . None 

Environment Variables . None explicitly, all implicitly. Procedure uux_getenv will decipher any 
environment variable. 


4.2 ADA PROGRAMS 

The Ada programs are the processes in the Tactical Hanning Workstation. The data 
base managers, routers, and window managers are all examples of Ada programs. Each 
program source file has *_p.a" suffix. The following major programs are in the system: 

CDB - Command and Control (C2) product data base manager 

CTL - Experiment control data base manager 

FOB - Reference data base manager 

HDB - Help data base manager 

HLP • Help window display manager 


4-52 







RCN - Experiment control message route 

RCP - Command and Control (C2) product message router 

RRF - Reference and help message router 

RSD - Situation data message router 

SCL - Station control manager 

SDB - Situation data base manager 

WBD - Build window display manager 

WCD - Participant experiment control window display manager 

WED - Experimenter’s experiment control window display 
manager 

WMS - View message window display manager 
WTD - Tool window display manager 
WVC - View situation window display manager 
WVR - View reference window display manager 


4.2.1 C2 Product Data Base Manager (CDB) 

The Command and Control (C2) data base manager consists of a program to build 
the C2 data base, a program to control access to the C2 data base, a program to print 
hardcopy reports of the command and control products, and a specification ("_s.a" suffix) and 
body CJ>.a" suffix) to generate the reports that require tactical situation data. 


4.2.1.1 CDB_C2_PRODUCT_DB_MANAGER 

Abstract . Command and Control (C2) product data base manager. 

Major Capabilities . The C2 product data base manager maintains the C2 product data base 
and allows network access to it. C2 products include the products in the view situation, view 
message, and build windows. A product can be a textual report, a computer generated 


4-53 



report, or a digital map with tactical overlay. This process also maintains the message log 
and controls the routing of messages from a build window to a view situation window. 

This program maintains a list of the number of view message windows that are active 
on each workstation. When a summary message is received, the summary message is 
routed to all active view message windows. If a view message window does not exist for a 
participant that is a recipient of a message, a window creation message is sent to the station 
control manager to create a view situation window. 

Special Instructions . The following processes must be executing before the C2 product data 
base manager is started: 

RCP_C2 PRODUCT ROUTER 
RSD SITUATION DATA ROUTER 

sdb~situationIdb_manager 

All C2 product requests must be routed through the C2 product router (RCP). The 
process name that must be used is C2_DB_MANAGER. The following messages are 
processed by the 02 product data base manager: 

Message Requests 

MSG MENU TREE 

MSG~TEXT_BUFFER 

MSG_HEADER_BUFFER 

MSG_C2_PRODUCTS 

MSG_C2_PART_UST 

MSG_MESSAGE_LOG 

Other Messages 

MSG_TEXT BUFFER 
MSG C2 MESSAGE 
MSG TERM WINDOW 
MSG~STOP~ 

The C2 product data base and the message log are initialized by 
CDB_PRODUCT_BUILD. 

To compile this program, the following paths must be established using the "a.path" 
command: 


4-54 






/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

To load this program, links must be established with the following libraries using the 
"a.info" command: 


/egen/cin_util/dn_util.lib 

/egen/cux_util/cux_util.lib 

Data Bases 


C2__PRODUCT 
C2~PRODUCT_DESC 
C2~PRODUCT HEADER 
G2_BUILD_MENU 
G2~VIEW_C2_MENU 
G3_BUILD_MENU 
G3~VIEW_C2 MENU 
G4_BUILD_MENU 
G4 VIEW_C2_MENU 
MESSAGE LOG 
SEND_PARTICIPANT SOURCE 


INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT 

INPUT 

INPUT 

INPUT 

INPUT 

INPUT 

INPUT/OUTPUT 

INPUT 


Environment Variables 

BUILD_EX 
BUILD G2 
BUILD G3 
BUILD"G4 

C2_PRODUCTROUTER HOST 
C2 PRODUCT ROUTER~SERV 
CDB_HEADER DB 
CDB PARTICIPANT OB 
CDB_PROD DESC DB 
CDB.PRODUCT DB 
CONTROL_ROUTER HOST 
CONTROL_ROUTER~SERV 
MESSAGE DISPLAY”MANAGER 
MESSAGE LOG DB~ 
SrTUATiON_ROUTER SERV 

situation’router"host 


4-55 







START DATE 
VIEW EX 
VIEW"G2 
VIEW~G3 
VIEW"G4 


4.2.1.2 CDB_GENERATE_PRODUCT 

Abstract . Generates the Command and Control (C2) reports that contain tactical situation 
data. 

Major Capabilities . The generate product package formats the following reports into a ASCII 
buffer: 


BLUEFOR Ammunition 
BLUEFOR Equipment 
BLUEFOR Fuel 
BLUEFOR Personnel 
BLUEFOR Task Organization 
OPFOR Committed Forces 
OPFOR Equipment 
OPFOR Reinforcing Units 
OPFOR Task Organization 


Special Instructions . The calling application must connect to the situation data router before 
using the procedures in this package. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/ued 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 


/egen/dn_utH/dn_util.lib 

/egen/cuxjitil/cuxjjtil.lib 

/usr/lib/libm.a 


4-56 





Data Bases . None 
Environment Variables. None 


4.2.1.3 CDB_HARDCOPY 

Abstract . Creates an ASCI) print file of C2 or reference products. 

Major Capabilities . This program provides the capability to print selective reports from the C2 
product or reference data base. 

Special Instructions . To print C2 products, the following processes must be executing before 
starting this process: 


RCP_C2_PRODUCT ROUTER 
RSD_SfTUAT10N DATA ROUTER 
SDB_SmjATION_DB_MANAGER 
CDB_C2_PRODUCT_DB_MANAGER 

Environment variable "db_manager* must be set to C2_DB_MANAGER and "viewJ32" 
must be set to the file that contains the list of products to print. The file is the same format as 
G2_VIEW_C2_MENU. 

To print reference products, the following processes must be executing before starting 
this process: 


RCP_REFERENCE_ROUTER 

FDB_REFERENCE~DB_WANAGER 

Environment variable "dbjnanager must be set to REFERENCE_DB_MANAGER and 
"ref_view_one" must be set to the file that contains the list of products to print. The file is the 
same format as G2_REFERENCE_MENU. 

To compile this program, the following paths must be established using the "a.path“ 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

/eddic/Ada/uwn 


4-57 






To toad this program, links must be established with the following libraries using the 
“a.info" command: 

/egen/cin_util/cinjjtil.lib 

/egen/cux_util/cux_util.lib 

/usr/Iib/libm.a 

Data Bases 


PRODUCTJHARDCOPY 


Environment Variables 


DBMANAGER 

REPORT_OUTPUT 

router” HOST 

ROUTE FfSERV 


4.2.1.4 CDB_PRODUCTBUILD 

Abstract . Builds the C2 product data base and initializes the message log. 

Major Capabilities . Creates the C2 product data base from the C2 product source data base. 
It also creates the menu description files for the product selection walking menus in the view 
situation and build windows. 

Special Instructions . This program must be run after changes have been made to the C2 
product source file. 

To compile this program, the following paths must be established using the "a.path“ 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cux_util/cux_util.lib 

/usr/Iib/libm.a 

4-56 





Data Bases 


BLUEFOR UNIT CONVERT 

INPUT 

C2_PRODUCT 

OUTPUT 

C2>R0DUCT DESC 

OUTPUT 

C2_PRODUCfHEADER 

OUTPUT 

C2 PRODUCT NAME 

OUTPUT 

C2~PR0DUCT*S0URCE 

INPUT 

G2~BUILD MENU 

OUTPUT 

G2 ~VIEW C2 MENU 

OUTPUT 

G3~BUILD MENU 

OUTPUT 

G3 VIEW C2 MENU 

OUTPUT 

G4 BUILD MlNU 

OUTPUT 

G4~VIEW C2 MENU 

OUTPUT 

MESSAGi LOG 

OUTPUT 

OPFOR UNIT CONVERT 

INPUT 


Environment Variables 

BLUEFOR_UNfT_CONVERSION 

BU!LD_ONE 

BUILD_THREE 

BUILDTWO 

C2LAB_DB 

HEADER_DB 

MESSAGEJ.OG DB 

OPFOR_UNIT_CONVERSION 

PRODUCT_DB 

PRODUCT DESC DB 

PRODUCT XREF 

VIEW_ONE 

VIEWTHREE 

VIEW TWO 


4.2.2 Experiment Control Product Data Base Manager (CRj 

The Experiment Control data base manager consists of a program to build the 
experiment control data base, a program to control access to it, and a program to stop the 
system. 


4-58 






4.2.2.1 CTL_EXPERIMENT_CONTROL 

Abstract . Experiment control product data base manager. 

Major Capabilities . The experiment control product data base manager maintains the 
experiment control product data base and allows network access to it The experiment 
control products appear in the experimenter's experiment control window, and in the 
participants experiment control window when the experimenter sends a control message to a 
participant. A product can be a textual report, a computer generated report or a digital map 
with tactical overlay. This program also controls the creation of the participant experiment 
control window. The following rules are used for the creation of experiment control windows: 

H the experiment control message requires a response, a window creation message is 
sent to the station control manager to create a new experiment control window. If the 
message is informative and doesn't require a response, the message is sent to an existing 
informative experiment control window if one exists, if one does not exist, a window creation 
message is sent the station control manager to create it. 

Special Instructions . The following processes must be executing before the experiment 
control product data base manager is started: 

RCN CONTROL ROUTER 
RSDjSmJATION~ DATA ROUTER 
SDB_SmjATION_DB_MANAGER 

All experiment control product requests must be routed through the experiment control 
ro uter (RCN). The process name that must be used is CONTROL_MANAGER. The following 
messages are processed by the experiment control product data base manager: 

Message Requests 

MSG_MENU TREE 
MSG~TEXT BUFFER 

msg“head~er BUFFER 
MSG CONTROL PRODUCTS 
MSG_CONTROL~PART_UST 

Other Messages 

MSG TEXT BUFFER 
MSG_CONTROL ROUTING 
MSG~STATION UP 
MSGJTERMJVINDOW 
MSG~STOP~ 


4-60 







The experiment control product data base is initialized by 
CONTROL_PRODUCT_BUILD. 

To compile this program, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usii/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

To load this program, links must be established with the following libraries using the 
*a.info" command: 

/egen/cin_util/cin_util.lib 
/egen/cux_util/cux_util.lib 
/usr/lib/Iibm.a 

Data Bases 

EXP_CONTROL_MENU 
EXP_CONTROL_PARTICIPANT 
EXP_CONTROL_PRODUCT 
EXP_CONTROL_PROD_DESC 

Environment Variables 

C2_PRODUCT_ROUTER_HOST 
C2_PRODUCT_ROUTER~SERV 
CONTROL_DISPLAY MANAGER 
CONTROL_MENU 
CONTROL~ROUTER HOST 
CONTROL ROUTER'SERV 

ctl_partTcipant OB 

CTL PROD DESC DB 
CTL PRODUCT DB 
START DATE 


4.2.2.2 CTL_PRODUCT_BUILD 

Abstract . Builds the experiment control product data base and the experiment control 
product selection walking menu file. 


INPUT 

INPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 


4-61 







Major Capabilities . Creates the experiment control product data base from the experiment 
control source data base. It also creates the menu description file for the product selection 
walking menu in the experimenter's experiment control window. 

Special Instructions . This program must be executed after changes have been made to the 
experiment control product source file. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

To load this program, links must be established with the following libraries using the 
"a. info" command: 

/egen/cux_util/cux_util.lib 

/usr/lib/libm.a 

Data Bases 


EXP_CONTROL_MENU OUTPUT 

EXP CONTROL_NAME OUTPUT 

EXP_CONTROL_PRODUCT OUTPUT 

EXP_coisrmoL prod_desc output 

exp conttrol"source input 


Environment Variables 


CONTROL.DB 
CONTROL MENU 
PRODUCT DB 
PRODUCT"DESC DB 
PRODUCT"XREF 


4.2.2.3 STOP_EDDIC 

Abstract . Stops the Tactical Planning Workstation system. 


4-62 




Major Capabilities . Sends a stop (MSG_STOP) message to all the routers. In turn, the 
routers forward the message to ail processes connected to them. 


Special Instructions . This program must be executed in the file server computer. It connects 
to the following routers: 

C2 PRODUCT ROUTER 
CONTROL ROUTER 
REFERENCE ROUTER 
SfTUATION_ROUTER 

To compile this program, the following paths must be established using the "a.path“ 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uin 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 

Data Bases . None 

Environment Variables 


C2_PRODUCT_ROUTER_HOST 
C2_PRODUCT~ ROUTER~SERV 
CONTROL ROUTERJHOST 
CONTROL ROUTER SERV 
REFERENCE_ROUTER_SERV 
REFERENCE_ROUTER HOST 
SITUATION ROUTER SERV 
SITUATION ROUTER~HOST 


4.2.3 Reference Product Data Base Manager (FDB) 

The reference data base manager consists of a program to build the reference data 
base, and a program to control access to it 


4-63 






4.2.3.1 FDB_REFERENCE_DB_BUILD 

Abstract . Builds the reference product data base and reference product selection walking 
menu file. 

Major Capabilities . Creates the reference product data base from the reference source data 
base. It also creates the menu description file for the product selection walking menu in the 
view reference window. 

Special Instructions . This program must be run after changes have been made to the 
reference product source file. 

To compile this program, the following paths must be established using the "a.path” 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/ued 

/eddic/Ada/uux 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cux_util/cux_util.lib 

/usr/lib/libm.a 

Data Bases 


G2 REFERENCE MENU 

OUTPUT 

G3_REFERENCE~MENU 

OUTPUT 

G4 REFERENCE MENU 

OUTPUT 

REFERENCE DB 

OUTPUT 

reference~header 

OUTPUT 

REFERENCE NAME 

OUTPUT 

REFERENCE>ROD desc 

OUTPUT 

REFERENCE SOURCE 

INPUT 


Environment Variables 

C2LAB DB 
HEADER DB 
PRODUCT DB 
PRODUCT~DESC DB 



PRODUCT XREF 
VIEW ONE 

view'three 

view'two 


4.2.3.2 FDB_REFERENCE_DB_MANAGER 
Abstract . Reference product data base manager. 

Major Capabilities . The reference product data base manager maintains the reference data 
base and allows network access to it. 

Special Instructions . The following process must be executing before the reference product 
data base manager is started: 

RRF_REFERENCE_ROUTER 

All reference product requests must be routed through the reference router (RRF). The 
process name that must be used is REFERENCE_DB_MANAGER. The following messages 
are processed by the reference product data base manager: 

Message Requests 

MSG_MENU TREE 
MSG_TEXT_BUFFER 

MSG_HEADER BUFFER 
MSG_REFERENCE_PRODUCTS 

Other Messages 
MSG_STOP 

The reference product data base is initialized by FDB_REFERENCE_DB_BUILD. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

To load this program, links must be established with the following libraries using the 
“a.info" command: 


4-65 






/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_util,Iib 

Data Bases 


G2 REFERENCE MENU 

INPUT 

G3~REFERENCE MENU 

INPUT 

G4 REFERENCE~MENU 

INPUT 

REFERENCE_DB 

INPUT 

REFERENCE~HEADER 

INPUT 

REFERENCE>ROD DESC 

INPUT 


Environment Variables 


FDB_HEADER_DB 

FDB_PROD DESC DB 

FDB_PRODUCT_DB 

REF VIEW_EX 

REF~VIEW_ONE 

REF~VIEW_THREE 

REF_VIEW_TWO 

REFERENCE_ROlfTER_SERV 

REFERENCE_ROUTER_HOST 


4.2.4 Help Product Data Base Manager (HDB) 

The help data base manager consists of a program to build the help data base, and a 
program to control access to it. 


4.2.4.1 HDB_HELP_DB_BUil_D 

Abstract . Builds the help product H ata base and help product selection walking menu file. 

Major Capabilities . Creates the help product data base from the help source data base. It 
also creates the menu description file for the product selection walking menu on the help 
button. 

Special Instructions . This program must be run after changes have been made to the help 
product source file. 

To compile this program, the following paths must be established using the "a. path" 
command: 


4-66 






/eddic/Ada/common 
/usr/cherokee/VADS55/verdixl ib 
/usr/cherokee/VADS55/standard 
/eddic/Ada/ued 
/eddic/Ada/uux 

To load this program, links must be established with the following libraries using the 
“a.info" command: 

/egen/cux_util/cux_util.lib 

/usr/lib/libm.a 

Data Bases 


HELP_MENU OUTPUT 

HELP_NAME OUTPUT 

HELP_PROD_DESC OUTPUT 

HELP_PRODUCT OUTPUT 

HELP~SOURCE INPUT 


Environment Variables 

HELP_MENU_FILE 
HELP SOURCE 
PRODUCT DB 
PRODUCT_DESC_DB 
PRODUCT_XREF 


4.2.4.2 HDB_HELP_DB_MANAGER 
Abstract . Help product data base manager. 

Major Capabilities . The help product data base manager maintains the help data base and 
allows network access to it. Help products include textual reports and menu tree layouts. 

Special Instructions . The following process must be executing before the help product data 
base manager is started: 

RRF_REFERENCE_ROUTER 

All help product requests must be routed through the reference router (RRF). The 
process name that must be used is HELP_DB_MANAGER. The following messages are 
processed by the reference product data base manager: 


4-67 







Message Requests 

MSG MENU_TREE 
MSG_TEXT_BUFFER 
MSG HEADER BUFFER 

msgIhelp_products 

Other Messages 
MSG_STOP 

The help product data base is initialized by HDB_HELP_DB_BUILD. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/dn_util/dn_util.lib 
/egen/cux_util/cux_util.lib 

Data Bases 

HELP_MENU 
HELP~PROD DESC 
HELP_PRODUCT 

Environment Variables 

HDB_HELP DESC DB 
HDB HELP TEXT DB 
HEIP MENU 

REFERENCE ROUTER HOST 
REFERENCE ROUTER _ SERV 


INPUT 

INPUT 

INPUT 


4-68 






The help display manager consists of a program to interact with the help button and 
an Ada task to display the textual heip windows. The walking menu layout help windows are 
displayed by the DML task (Part of the UWN library). 


4.2.5.1 HLP_HELP_DISPLAY_MANAGER 
Abstract . Help button and window display manager. 

Major Capabilities . The help display manager controls the interaction with the help button 
and uses either the help report or menu layout Ada task to display the appropriate help 
window. Because Ada tasks are used to display the help windows, an unlimited (within 
reason) number of help windows can be displayed at the same time. 

Special Instructions . The help display manager maintains a link-list of Ada help tasks and 
their associated window id. When input is received from the UWN system, the window id is 
used to determine which task to pass the input to. When a help window is terminated, the 
task is deleted from the link-list. 

The following programs must be executing before this program is started: 

RRF_REFERENCE_ROUTER 

HDB_HELP_DB_MANAGER 

To compile this program, the following paths must be established using the "a.path“ 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uwn 

/eddic/Ada/ued 

/eddic/Ada/uux 

/eddic/Ada/uiw 

To load this program, links must be established with the following libraries using the 
"a.info“ command: 

/egen/cin_utif/cin_utjl.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 






/egen/ciw_util/ciw_util.lib 

/usr/lib/libXr.a 

/usr/llb/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables 

CHARACTER_FONT FILE 
EDDIC_STAT10N USER 
REFERENCE ROlfTER SERV 
REFERENCE ROUTER HOST 


4.2.S.2 HLP_HELP_REPORT 

Abstract . Textual help window control task. 

Major Capabilities . Displays a textual help report window and processes all input for the 
window. The calling process is responsible for passing all user input to the task via the 
PROCESSJNPUT entry point 

Special Instructions . To compile this package, the following paths must be established using 
the “a.path" command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uwn 

/eddic/Ada/ued 

/eddic/Ada/uiw 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/cux_util/cux_util.!ib 

/egen/cwn_utll/cwn.lib 

/egen/dw_utll/dw_util.lib 

/usr/llb/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 









Data Bases. None 


Environment Variables. None 


4.2.6 Experiment Control Message Router (RCN1 

The experiment control router consists of a program to route experiment control 
messages among the experiment control processes and a program to convert the recorded 
messages to ASCII format. 


4.2.6.1 RCN_CONTROL_ROUTER 
Abstract . Experiment control message router. 

Major Capabilities . Routes and records experiment control messages among processes 
that are connected to the router. Experiment control messages include experiment control 
products, product requests, lookup table updates, and window operations. 

Special Instructions . The normal sequence of operations to use a router is to connect to it 
and then send and receive messages through it The connect is accomplished by calling 
UIN_CLIENT_CONNECT_SERVER and then sending the process id to the router via the 
connect message (MSG_CONNECT). Messages are sent through the router by 
UIN_SEND_MSG and received by UIN_RECV_MSG. There are two ways to determine if a 
message is being sent to a process. The first way is to use UIN_RECV_MSG with the no¬ 
peek flag. The process will suspend operation at this statement until a message is received. 
The other way is to use UWN_ADD_INPUT_SOCKET to tell the UWN system to watch for input 
from a socket number. When a message is received, UWNJNPUT returns with a data type of 
SYS_INPUT_MESSAGE. This method allows a process to handle both window and message 
inputs. 


Before terminating a process that is connected to a router, a dose socket message 
(MSG_CLOSE_SOCKET) must be sent to the router. 

Environment variable RECORD_SESSION must be set to true to record routed 
messages. Only messages identified in MSG_EC_RECORD_UST will be recorded. The 
recorded message data base is initialized when the router is started. 

To compile this program, the following paths must be established using the "a. path* 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 


4-71 




/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_util.lib 

Data Bases 


EXP_CONTROL_RECORD 


OUTPUT 


Environment Variables 


CONTROL_RECORD_DB 

control_router“host 

CONTROL_ROUTER_SERV 

RECORD_SESSION 


4.2.6.2 RCN_RECORD_TO_ASCII 

Abstract . Converts the recorded experiment control data to ASCII. 

Major Capabilities . Reads the experiment control recorded data base and creates an 
individual ASCII file for each record type in the recorded data base. 

Special Instructions . The system must be stopped (see STOP_EDDIC in CTL) before running 
this program. The recording data base is initialized whenever the router is started. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

To load this program, links must be established with the following libraries using the 
"a.info* command: 


4-72 




/egen/cux_util/cux_util.lib 

/usr/lib/libm.a 

Data Bases 


EXP CONTROL RECORD INPUT 

TRAN CONTROL REQUEST OUTPUT 

tran"control"window OUTPUT 

tran'lookup table output 

TRAN~MAP " OUTPUT 


Environment Variables 

CONTROL_RECORD 
CONTROL REQUEST 

control'window 

LUT UPDATE 
MAPSTATUS 


4.2.7 C2 Product Message Router (RCP) 

The Command and Control (C2) router consists of a program to route C2 product 
messages between the processes that require C2 product data, and a program to convert the 
recorded messages to ASCII format. 


4.2.7.1 RCP_C2_PRODUCT_ROUTER 

Abstract . Command and Control (C2) product message router. 

Major Capabilities . Routes and records C2 product messages between processes that are 
connected to the router. C2 product messages include C2 products, product requests, 
summary messages, message logs, and window operations. 

Special Instructions . The normal sequence of operations to use a router is to connect to it 
and then send and receive messages through ft. The connection is accomplished by calling 
UIN_CUENT_CONNECT_SERVER and then sending the process id to the router via the 
connect message (MSG_CONNECT). Messages are sent through the router by 
UIN_SEND_MSG and received by UIN_RECV_MSG. There are two ways to determine if a 
message is being sent to a process. The first way is to use UIN_RECV_MSG with the no¬ 
peek flag. The process will suspend operation at this statement until a message is received. 
The other way is to use UWN_ADD_INPUT_SOCKET to tell the UWN system to watch for input 
from a socket number. When a message is received, UWNJNPUT returns with a data type of 


4-73 






SYSJNPUT_MESSAGE. This method allows a process to process both window and message 
inputs. 


Before terminating a process that is connected to a router, a dose socket message 
(MSG_CLOSE_SOCKET) must be sent to the router. 

Environment variable RECORD_SESSION must be set to true to record routed 
messages. Only messages identified in MSG_C2_RECORD_UST will be recorded. The 
recorded message data base is initialized when the router is started. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/Verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

To load this program, links must be established with the following libraries using the 
"a. info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_uti!.lib 

Data Bases 


C2_PRODUCT_RECORD OUTPUT 

Environment Variables 


C2 PRODUCT RECORD DB 
C2~PRODUCT~ROUTER~HOST 
C2 PRODUCT_ROUTER~SERV 
RECORD SESSION 


4.2.7.2 RCP_RECORD_TO_ASCII 

Abstract . Converts the recorded C2 product data to ASCII. 

Major Capabilities . Reads the C2 product recorded data base and creates an individual ASCII 
file for each record type in the recorded data base. 


4-74 






Special Instructions . The system must be stopped (see STOP_EDDIC in CTL) before running 
this program. The recording data base is initialized whenever the router is started. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

To load this program, links must be established with the following libraries using the 
*a.info* command: 

/egen/cux_util/cux_util.lib 

/usr/lib/libm.a 

Data Bases 


C2_PRODUCT_RECORD INPUT 

TRAN_C2_REQUEST OUTPUT 

TRAN_C2_WINDOW OUTPUT 

TRAN_NEW_C2 OUTPUT 


Environment Variables 


C2_NEW_PROD 

C2_RECORD 

C2_REQUEST 

C2_WINDOW 


4.2.8 Reference Message Router (RRFl 

The reference router consists of a program to route reference and help product 
messages between the processes that require reference or help data, and a program to 
convert the recorded messages to ASCII format 

4.2.8.1 RRF_REFERENCE_ROUTER 

Abstract . Reference and help product message router. 


4-75 





Major Capabilities . Routes and records reference and help messages between processes 
that are connected to the router. Reference and help messages include reference and help 
products, product requests, and window operations. 

Special Instructions . The normal sequence of operations to use a router is to connect to it 
and then send and receive messages through it. The connection is accomplished by calling 
UIN_CUENT_CONNECT_SERVER and then sending the process id to the router via the 
connect message (MSG_CONNECT). Messages are sent through the router by 
UIN_SEND_MSG and received by UIN_RECV_MSG. There are two ways to determine if a 
message is being sent to a process. The first way is to use UIN_RECV_MSG with the no¬ 
peek flag. The process will suspend operation at this statement until a message is received. 
The other way is to use UWN_ADD_INPUT_SOCKET to tell the UWN system to watch for input 
from a socket number. When a message is received, UWNJNPUT returns with a data type of 
SYS_INPUT_MESSAGE. This method allows a process to process both window and message 
inputs. 


Before terminating a process that is connected to a router, a close socket message 
(MSG_CLOSE_SOCKET) must be sent to the router. 

Environment variable RECORD_SESSION must be set to true to record routed 
messages. Only messages identified in MSG_RF_RECORD_UST will be recorded. The 
recorded message data base is initialized when the router is started. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/cin_uti!/cin_util.!ib 

/egen/cux__util/cux_util.lib 

Data Bases 

REFERENCE_RECORD OUTPUT 


4-76 






Environment Variables 


RECORD.SESSION 
REFERENCE RECORD DB 

reference”router "serv 
reference"router“host 


4.2.8.2 RRF_RECORD_TO_ASCII 

Abstract . Converts the recorded reference data to ASCII. 

Major Capabilities . Reads the reference recorded data base and creates an individual ASCII 
file for each record type in the recorded data base. 

Special Instructions . The system must be stopped (see STOP_EDDIC in CTL) before running 
this program. The recording data base is initialized whenever the router is started. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

To load a program that uses this package, links must be established with the following 
libraries using the “a.info* command: 

/egen/cux_util/cux_util.lib 

/usr/Iib/libm.a 

Data Bases 

INPUT 
OUTPUT 
OUTPUT 



REFERENCE RECORD 
TRAN REF_REQUEST 
TRAN_REF_WINDOW 

Environment Variables 

REF RECORD 
REF_REQUEST 
REF WINDOW 







4.2.9 Situation Data Message Router (RSDi 


The situation data router consists of a program to route situation data messages 
between the processes that require situation data, and a program to convert the recorded 
messages to ASCII format. 


4.2.9.1 RSD_SmJATION_DATA_ROUTER 
Abstract . Tactical situation data message router. 

Major_Capabilities . Routes and records situation data messages between processes that are 
connected to the router. Situation data messages include unit status, control measures, 
obstacles, and situation data updates. 

Special Instructions . The normal sequence of operations to use a router is to connect to it 
and then send and receive messages through it The connection is accomplished by calling 
UIN_CUENT_CONNECT_SERVER and then sending the process id to the router via the 
connect message (MSG_CONNECT). Messages are sent through the router by 
UIN_SEND_MSG and received by UIN_RECV_MSG. There are two ways to determine if a 
message is being sent to a process. The first way is to use UIN_RECV_MSG with the no¬ 
peek flag. The process will suspend operation at this statement until a message is received. 
The other way is to use UWN_ADDJNPUT_SOCKET to tell the UWN system to watch for input 
from a socket number. When a message is received, UWNJNPlfT returns with a data type of 
SYSJNPlfT_MESSAGE. This method allows a process to process both window and message 
inputs. 


Before terminating a process that is connected to a router, a close socket message 
(MSG_ClOSE_SOCKET) must be sent to the router. 

Environment variable RECORD_SESSION must be set to true to record routed 
messages. Only messages identified in MSG_SD_RECORD_UST will be recorded. The 
recorded message data base is initialized when the router is started. 

To compile this program, the following paths must be established using the "a-path” 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixIib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 


4-78 









To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_util.lib 

Data Bases 

S!TUATION_RECORD OUTPUT 

Environment Variables 


RECORD_SESSION 
SITUATION RECORD DB 
SITUATION ROUTER "SERV 
SITUATION_ROUTER~HOST 


4.2.9.2 RSD_RECORD_TO_ASCII 

Abstract . Converts the recorded situation data to ASCII. 

Major Capabilities . Reads the recorded situation data base and creates and individual ASCII 
file for each record type in the recorded data base. 

Special Instructions . The system must be stopped (see STOP_EDDIC in CTL) before running 
this program. The recording data base is initialized whenever the router is started. 

To compile this program, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 

To load this program, links must be established with the following libraries using the 
■a.info" command: 

/egen/cux_util/cux_util. lib 
/usr/lib/libm.a 


4-79 




Data Bases 


SITUATION_RECORD 
TRAN ACTiviTY 
TRAN~AMMUNITION 
TRAN BLUEFOR TASK_ORG 
TRAN_CNTRL_MSR_DEL 
TRAN CNTRL MSR~EFF TIME 

tran_cntrl“msr~loc~ 

TRAN CNTRL"MSR~STAT 
TRAN EQUIPMENT" 

TRAN FUEL 

TRAN~NEW_CNTRL MSR 

TRAN NEW OBSTACLE 

TRAN_OBSTACLE_DEL 

TRAN_OBSTACLE EFF_TIME 

TRAN_OBSTACLE_LOC 

TRAN OBSTACLE STAT 

TRAN_OPFOR_REINFORCE 

TRAN_OPFOR_STRENGTH 

TRAN_OPFOR_TASK_ORG 

TRAN_PERSONNEL 

TRAN_SITUAT10N_REQUEST 

TRAN SITUATION_WINDOW 

TRAN_UNIT_LOCATION 

TRAN_UNIT MISSION 


Environment Variables 


srr_ACTivrry 

srr_AMMO 

SIT_BLUE TASK ORG 
Srr_CNTRL_MSR DELETE 
SIT CNTRL~MSR~EFFECT 
Srr_CNTRL~MSR~LOCATE 
srr” cntrl"msr status 
sit_equip 
sit_fuel 
sit_mission 

SIT_NEW CNTRL MSR 
Srr_NEW _ OBSTACLE 
SfT_OBSTACLE DELETE 
SIT_OBSTACLE_EFFECT 
SIT_OBSTACLE~LOCATE 


INPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

OUTPUT 

ouiput 

OUTPUT 


4-80 







SIT_OBSTACLE STATUS 
Srr"0PF0R TASK ORG 
SIT PERS 
SIT RECORD 
SIT REINF 
SIT_REQUEST 
SfT_STRENGTH 
SIT UNIT LOC 

sit"window 


4.2.10 Station Control Manager (SCL1 

The station control manager consists of the station control program and a set of 
lookup table utilities. 


4.2.10.1 SCL_STATION_CONTROL_MANAGER 
Abstract . Station control manager for a workstation. 

Major Capabilities . The station control manager controls the color lookup table for the 
workstation, controls the screen (root) popup menu, handles the interaction with the map 
legend, and creates new view message and experiment control windows when a create 
window message is received. 

Special Instructions . The following processes must be executing before the station control 
manager is started: 


RCN_CONTROL_ROUTER 

All lookup table updates must be routed through the experiment control router to this 
process using the MSG LUTJJPDATE message. The process name that must be used is 
G2_STATION_MANAGER, G3_STATION_MANAGER, G4_STATION_MANAGER, or 
EX_STATION_MANAGER depending upon which station is being used. It has total control of 
all 255 colors available in the system. This was required to display the map with two overlay 
planes (Blue and Red). 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 


4-81 




/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/uiw 

/eddic/Ada/uwn 

To load this program, links must be established with the following libraries using the 
“a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/ciw_util/ciw_utiUib 

/egen/cwnjjtil/cwn.lib 

/egen/cux_util/cux_util.lib 

/usr/Iib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

Data Bases 

MAP_LEGEND INPUT 

ROOT_WINDOW_MENU INPUT 

Environment Variables 

CHARACTER FONT FILE 
CONTROL ROUTER HOST 
CONTROL ROUTER~SERV 
EDDIC_STATION_USER 
HILITE DESCRIPTION FILE 
LASER SERVER 
MAP LEGEND 
OVERLAY_LOOKUP TABLE 
ROOT MENU 
SPOOL_PATH 

UNHIUTE_DESCRIPTION FILE 


4.2.10.2 LUT_MANAGER 

Abstract . Low-level color lookup table utilities. 

Major Capabilities . Procedures to initialize the color lookup table, read the lookup description 
files, and to load the colors into the lookup table. 


4-62 






Special Instructions . In the current configuration, these utilities should only be used by the 
station control manager (SCL). 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 
/usr. MC68020/cherokee/VADS55/standard 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/ciw_util/dw_util.lib 
/usr/lib/libX_p.a 
/usr/lib/libX.a 

Data Bases . None 

Environment Variables. None 


4.2.11 SCREEN MANAGER 

Abstract . The screen manager is the top level foreground process which starts the Soldier 
Machine Interface system, it creates the base window creation icons and spawns the 
appropriate background processes on icon selection. 

Major Capabilities . The screen manager displays a window creation icon for every base 
process in the workstation system. It determines if it should also put up a "Control" process 
icon via the environment variable eddic_station_user being set to "experimenter". It opens or 
creates the icon data base file specified by the environment variable, lcon_Path, stores the 
upper X coordinate of each icon for retrieval by other processes, and initializes the file for 
storage of the process ids associated with the maximum number of process windows that 
can be stacked as icons on the base icon. When an icon is selected, the appropriate 
background process is executed. 

Special Instructions . The processes associated with each base icon are programmed into the 
file /esource/cwn_util/Create_Functions.c. If the application programmer changes this file, the 
screen manager can be rebuilt by the following command: 

make -f smc.make 


4-83 







The programmer should also be aware that it Create_Functions.c is modified, then the 
own library should also have this module replaced after the above command has been 
performed. To do this, perform the commands: 

cd /egen/cwn_util 

ar r cwn.lib Create_Functions.o 

ranlib cwn.lib 


Data Bases 

ICONSTACK_DB 


OUTPUT 


Environment Variables 

EDDIC STATION USER 
ICON_PATH 


4.2.12 Situation Data Base Manager fSDB) 

The situation data base manager consists of a program to build the situation data 
base, a program to build the situation data index files, a program to control access to it, a 
program to load asset levels into the higher echelon units, a specification f s.a* suffix) and 
body ("_b.a" suffix) to handle all input and output to the situation data base, a specification 
and body to control updates to the situation data base, and a specification and body to send 
data to requesting processes. 


4.2.12.1 SDB_INPUT_OUTPUT 

Abstract . Situation data input and output utilities. 

Major Capabilities . The input and output utilities handle all the interaction with the Ada 
situation data bases. This includes, finding, reading, writing, updating, and maintaining the 
appropriate index files. 

Special Instructions . Procedure SDB_0PEN_SITUAT10N_DB must be called to open the 
situation data bases and SDB_READ_INDEX_FILES must be called to read the index files 
before the other procedures in the package are used. Before the calling process terminates, 
procedures SDB_WRITEJNDEX_FIIES and SDB_CL0SE_SrTUAT10N_DB must be called to 
save any changes made to the situation data base. 


4-84 









To compile this package, the following paths must be established using the "a.path" 
command: 


/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 
/usr. MC68020/cherokee/VADS55/standard 
/eddic/Ada/uux 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info“ command: 

/egen/cux_util/cux_util.lib 

Data Bases 


BLUEFOR_AUTH AMMO 

BLUEFOR”aUTH_AMMO_INDEX 

BLUEFOR AUTH_EQUIP INDEX 

BLUEFOR__AUTH_EQUIP 

BLUEFOR~CURR_AMMO 

BLUEFOR_CURR_AMMO_INDEX 

BLUEFOR CURR~EQUIP~INDEX 

BLUEFOR CURR EQUIP 

BLUEFOR_FUEL 

BLUEFOR FUELJNDEX 

BLUEFOR PERSONNEL 

BLUEFOR_PERSONNEL INDEX 

BLUEFORJJNIT LOC 

BLUEFORJJNITLOCJNDEX 

BLUEFOR_UNIT_STATUS 

BLUEFOR_UNrT_STATUS INDEX 

CNTRL_MSR_POINT 

CNTRL~MSR~POINT INDEX 

CONTROL_MEASURE 

CONTROL~MEASURE INDEX 

OBSTACLE 

OBSTACLEJNDEX 

OPFOR_AUTH EQUIP 

opfor_auth”equip INDEX 

OPFOR CURR~EQUIP”INDEX 

opfor_curr”equip” 
opfor”unit LOC 

OPFOR"UNfT”LOC INDEX 
OPFOR_UN!T~STATUS INDEX 


INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 

INPUT/OUTPUT 


4-85 






OPFOR UNIT STATUS 


INPUT/OUTPUT 


Environment Variables 

BLUEFOR AMMO AUTH 
BLUEFOR AMMO _ AUTH NDX 
BLUEFOR_AMMO CURR 
BLUEFOR AMMO CURR NDX 
BLUEFOR EQUIP AUTH NDX 
BLUEFOR EQUIP”aUTH _ 

BLUEFOR EQUIP CURR NDX 
BLUEFOR EQUIP“CURR~ 

BLUEFOR FUEL 
BLUEFOR~FUEL NDX 
BLUEF0RJ.0CAT10N NDX 
BLUEFOR_LOCATION~ 

BLUEFOR_PERS 

BLUEFOR_PERS_NDX 

bluefor_unit_status_ndx 

BLUEFOR_UNIT_STATUS 

CNTRL_MSR_POINT_NDX 

CONTROL_MEASURE 

CONTROL_MEASURE NDX 

CONTROL_MEASURE_POINT 

OBSTACLE 

OBSTACLE_NDX 

OPFOR_EQUIP_AUTH 

OPFOR~EQUIP_AUTH_NDX 

OPFOR_EQUIP_CURR NDX 

OPFOR EQUIP_CURR” 

OPFOR_LOCATION 
OPFOR~LOCATION NDX 
OPFOR_UNIT STATUS NDX 
OPFOR~UNIT~STATUS” 

4.2.12.2 SDB_LOAD_HIGHER_ECH 

Abstract . Load assets into higher echelon units. 

Major Capabilities . In the Tactical Planning Workstation system, the situation data base 
contains asset levels for units of all echelons. The initial scenario data contain assets for only 
the low-level units, so this program is necessary to roil-up the assets into the higher echelon 
units. 


4-86 






Special Instructions . Currently this program operates on only BLUEFOR units. The OPFOR 
higher echelon units were assigned assets in the initial scenario data. 

The situation data base build program (SDB_SfTUATION_DB_BUILD) must be run 
before this program, if it is not run, the higher echelon units wilt have twice as many assets 
as authorized. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uux 

To load this program, links must be established with the following libraries using the 
*a.info“ command: 

/egen/cux_util/cux_uti!.lib 
Data Bases 


BLUEFOR ASSET UNIT 

INPUT 

BLUEFOR TASK ORG SOURCE 

INPUT 

BLUEFOR UNIT CONVERT 

INPUT 

OPFOR ASSET UNIT 

INPUT 

OPFOR_TASK_ORG SOURCE 

INPUT 

OPFOR UNfT CONVERT 



Environment Variables 

BLUE_ASSET_UNIT 
BLUEFOR UNIT CONVERSION 
C2LAB_BLUE_TASK ORG 
C2LA8 OPFOR TASK ORG 
OPFOR_ASSETJJNIT~ 

OPFORJJNfT_CONVERSION 


4-87 





4.2.12.3 SOB PACKAGE 


Abstract . Situation data manager object storage area. 

Major Capabilities . This package is used as a common storage area for objects that must be 
visible to the whole situation data base system. The objects include situation data messages, 
Operational Planning (OPLAN) lists, and other objects required by the situation data system. 

Special Instructions . Although the objects in this package are visible to the world, it is highly 
recommended that the SOB utility packages be used for accessing data, rather than 
accessing the objects in this package directly. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

Data Bases . None 

Environment Variables . None 


4.2.12.4 SDB_SEND_DATA 

Abstract . Situation data utilities to send data to requesting processes through the situation 
data router. 

Major Capabilities . When situation data are requested of the situation data base manager 
through the situation data router, the situation data base manager uses the procedures in this 
package to read the requested data, format it into a message, and send it to the requesting 
process. 

Special Instructions . This package exists mainly for use by the situation data base manager. 

It may be used by other programs but it is not recommended. 

To compile this package, the following paths must be established using the 'a.path'' 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 


4-88 





To load a program that uses this package, links must be established with the following 
libraries using the "a.info" command: 

/egen/cin_util/cin_util.lib 

Data Bases . None 

Environment Variables. None 


4.2.12.5 SDB_SITUATI0N_DB_BU1LD 
Abstract . Builds the tactical situation data bases. 

Major Capabilities . Creates the situation data bases from the situation scenario source data 
bases. It also creates the OPLAN data base. 

Special Instructions . This program must be run after changes have been made to the 
situation source files. The following separates are included in this program: 

SDB_BLUEFOR DBASE_STAT_BUILD 
SDB_BLUEFOR~UNIT FUEL_BUILD 
SDB_BLUEFOR_UNIT_AMMO BUILD 
SDB.BLUEFOR UNIT PERS BUILD 
SDB_BLUEFOR UNfT STAT_BUILD 
SDB_BLUEFOR_UNIT EQUIP BUILD 
SDB_BLUEFOR UNfT”ULOC_BUILD 
SDB CONTROL_MEASURE BUILD 
SDB_DBASE_CNTRL_MSR_BUILD 
SDB.OBSTACLE BUILD 
SDB_OPFOR UN?T EQUIP BUILD 
SDB OPFOR~UNrfREINF BUILD 
SDB_OPFOR~UNIT_STAT_BUILD 
SDB OPFOR~UNIT ULOC BUILD 

sdbjdpplan_db_build ” 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/ued 


4-89 







To load this program, links must be established with the following libraries using the 
"a.info“ command: 

/egen/cux_util/cux_util.lib 

/usr/lib/libm.a 

Data Bases 


BLUEFOR AMMO SOURCE 

OUTPUT 

bluefor~ammo”track 

OUTPUT 

BLUEFOR AUTH AMMO 

OUTPUT 

bluefor”auth~equip 

OUTPUT 

bluefor”curr“ ammo 

OUTPUT 

bluefor”curr equip 

OUTPUT 

BLUEFOR EQUIP” SOURCE 

INPUT 

bluefor”equip!track 

INPUT 

BLUEFOR FUEL ” 

OUTPUT 

BLUEFOR FUEL SOURCE 

INPUT 

BLUEFOR ORGANIC TASK_ORG 

INPUT 

bluefor”personnel 

OUTPUT 

BLUEFOR PERSONNEL S JRCE 

OUTPUT 

BLUEFOR UNIT COWER X 

INPUT/OUTPUT 

BLUEFOR UNIT”LOC_SOURCE 

INPUT 

BLUEFOR UNIT i_OC~ 

OUTPUT 

BLUEFOR UNIT~NAME 

OUTPUT 

BLUEFOR UNIT STATUS 

OUTPUT 

CNTRL MSR POINT 

OUTPUT 

CNTRL MSR POINT NAME 

OUTPUT 

CONTROL MEASURE 

OUTPUT 

CONTROL~MEASURE SOURCE 

INPUT 

control”measure!name 

OUTPUT 

OBSTACLE 

OUTPUT 

OBSTACLE NAME 

OUTPUT 

OBSTACLE SOURCE 

INPUT 

OPFOR AUTH EQUIP 

OUTPUT 

opfor"curr” EQUIP 

OUTPUT 

opfor'equip” NAME 

OUTPUT 

opfor'equip source 

INPUT 

OPFOR ORGANIC TASK_ORG 

INPLF 

OPFOR REINFORCE TIME 

INPUT 

opfor"task org SOURCE 

INPUT 

OPFOR~UNIT CONVERT 

INPUT/OUTPUT 

opfor'unit loc 

OUTPUT 

OPFOR UNIT LOC SOURCE 

INPUT 


4-90 




OPFORJJNrr STATUS 
OPLANUST " 
OPLAN~UST SOURCE 


OUTPUT 

OUTPUT 

INPUT 


Environment Variables 

BLUEFOR_AMMO AUTH 

BLUEFOR_AMMO~CURR 

BLUEFOR_AMMO TRACK 

BLUEFOR_EQUIP~AUTH 

BLUEFOR_EQUIP CURR 

BLUEFOR_EQUIP~TRACK 

BLUEFOR_FUEL 

BLUEFOR_LOCAT!ON 

BLUEFOR ORGANICJJNIT 

BLUEFOR_TOP_UNIT 

BLUEFOR_UNIT CONVERSION 

BLUEFOR_UNIT~STATUS 

BLUEFOR UNIT_XREF 

BUILD_BLUE_AMMO 

build_blue!equip 

BUILD_BLUE_FUEL 

BUILD_BLUE_PERS 

BUILD_BLUE STATUS 

BUILD_BLUE_ULOC 

BUILD_CNTRL_MSR 

BUILD_OBSTACLE 

BUILD_OPFOR_EQUIP 

BUILD_OPFOR_REINF 

BUILD_OPFOR STATUS 

BUILD OPFOR~ULOC 

BUILD~OPPLAN 

C2LAB" BLUE TASK ORG 

C2LAB_BLUEFOR AMMO 

C2LAB BLUEFOr"eQUIP 

C2UB_BLUEFOR~FUEL 

C2LAB_BLUEF0r"L0CAT10N 

C2LAB_CONTROL* MEASURE 

C2LAB OBSTACLE 

C2LAB_OPFOR_EQU!P 

C2LAB_OPFOR_LOCATION 

C2lab_opfor"reinforce 

C2LAB_OPFOR_TASK ORG 


4-91 





CNTRL MSR_XREF 
cntrl'point XREF 
CONTROL MEASURE 
CONTROL~MEASURE POINT 
OBSTACLE 
OBSTACLE XREF 
OPFOR EQUIP.AUTH 

opfor'equipIcurr 

OPFOR~EQUIP_LIST 
0PF0R~L0CAT10N 
OPFOR~ORGANIC UNIT 
OPFOR~UNfT_CONVERSION 

opforjjnitstatus 

OPPLAN DB " 
OPPLAN~SOURCE 
USE DBASE_BLUE_STATUS 
USE_DBASE CNTRL MSR 


4.2.12.6 SDB_SITUATION_DB_MANAGER 
Abstract . Tactical situation data base manager. 

Major Capabilities . The situation data base manager maintains the situation data base and 
allows network access to it. Access includes both retrieving and updating situation data. 

Special Instructions . The following process must be executing before the situation data base 
manager is started: 


RSD_SrrUATiON_DATA_ROUTER 

All situation data requests must be routed through the situation data router (RSD). 

The process name that must be used is S!TUATION_DB_MANAGER. The following messages 
are processed by the situation data base manager: 

Message Requests 

MSG CONTROL_MEASURE 
msg”cntrl MSR_POINT 
MSGJDBSTACLE 
MSG AMMO AUTH 
msg!ammo”on_hand 
MSG EQUIP AUTH 

msg“equip OPER 
msg”personnel 


4-92 





MSG FUEL 

msg’bluefor STATUS 
msg'location 
msg'bluefor task_org 

MSG~ALL_LOCATIONS 
msg'opfor STATUS 
msg~opfor~task org 

MSG~0PPLAN_L1ST~ 

Other Messages 

MSG AMMO UPDATE 
msg'equip UPDATE 
msg"pers UPDATE 
MSG~FUEL~UPDATE 
msgj_oc UPDATE 
msg'blue task_org_update 

MSG_ACTIVrTY UPDATE 
MSG~MISSION UPDATE 
MSG_OPFOR TASK_ORG UPDATE 
MSG_REINFORCE UPDATE 
msg'strength UPDATE 
MSG~CNTRL_MSR ADD 
MSG~CNTRL POINT ADD 
msg'cntrl'msr CHG EFF 
MSG_CNTRL_MSR_CHG_LOC 
MSG_CNTRL~MSR_CHG~STAT 
MSG_CNTRL~MSR DEL 
MSG_OBSTACLE_ADD 
MSG_OBSTAC LE~CHG_EFF 
MSG OBSTACLE~CHG LOG 
MSG_OBSTACLE CHG~STAT 
MSG OBSTACLE~DEL 
MSG NEW OPPLAN 
MSG_STOP 

To compile this program, the following paths must be established using the “a.path“ 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uin 


4-93 





To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_uti!/cux_util.lib 

Data Bases 


OPLAN_LIST INPUT/OUTPUT 

Environment Variables 


OPPLAN_DB 

SITUATION_ROUTER_HOST 
SUUATION_ROUTER SERV 
START_DATE 


4.2.12.7 SDB_SITUATIONJNDX_BUILD 
Abstract . Situation data base index file build. 

Major Capabilities . Reads the situation data base files and creates and index file for each 
situation data base file. The files are indexed in OPLAN, date/time order. 

Special Instructions . This program must be run after SDB_SmJATION_DB_BUILD is executed. 

To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uux 

To load this program, links must be established with the following libraries using the 
*a.info“ command: 

/egen/cux_util/cux_util.lib 

Data Bases 

BLUEFOR_AUTH AMMO INPUT 

BLUEFOR_AUTH_AMMO_INDEX OUTPUT 


4-94 






BLUEFOR AUTH EQUIPJNDEX 

OUTPUT 

BLUEFOR AUTH EQUIP 

INPUT 

BLUEFOR~CURR~AMMO 

INPUT 

BLUEFOR CURR~AMMO_INDEX 

OUTPUT 

BLUEFOR CURR - EQUIP_INDEX 

OUTPUT 

bluefor’curr EQUIP 

INPUT 

BLUEFOR FUEL" 

INPUT 

BLUEFOR FUEL INDEX 

OUTPUT 

BLUEFOR PERSONNEL 

INPUT 

BLUEFOR PERSONNELJNDEX 

OUTPUT 

BLUEFOR UNIT LOC 

INPUT 

BLUEFOR UNIT”LOC INDEX 

OUTPUT 

BLUEFOR UNIT”STATUS 

INPUT 

bluefor"unit”statusjndex 

OUTPUT 

CNTRL MSR POINT 

INPUT 

CNTRL MSR POINTJNDEX 

OUTPUT 

CONTROL MEASURE 

INPUT 

control"measure INDEX 

OUTPUT 

OBSTACLE 

INPUT 

OBSTACLE INDEX 

OUTPUT 

OPFOR AUTH EQUIP 

INPUT 

OPFOR AUTH EQUIP INDEX 

OUTPUT 

OPFOR CURR EQUIP INDEX 

OUTPUT 

OPFOR CURR EQUIP 

INPUT 

OPFOR UNIT LOC 

INPUT 

OPFOR UNIT LOC INDEX 

OUTPUT 

OPFOR UNIT STATUSJNDEX 

OUTPUT 

OPFOR UNIT STATUS 

INPUT 


Environment Variables 


BLUEFOR AMMO AUTH 
BLUEFOR_AMMO_AUTH_NDX 
BLUEFOR_AMMO~CURR 
BLUEFOR AMMO CURR_NDX 
BLUEFOr”eQUIP~AUTH_NDX 

bluefor”equip~auth“ 

BLUEFOR EQUIP CURR NDX 
BLUEFOR EQUIP CURR 
BLUEFOR FUEL 
BLUEFOR FUEL NDX 
BLUEFOR LOCATION NDX 
BLUEFOR LOCATION 
BLUEFOR PERS 


4-95 







BLUEFOR PERS NDX 
BLUEFOR - UNIT STATUS NDX 

bluefor~unit”status 

CNTRL MSR POINT NDX 
CONTROL MEASURE 
CONTROL MEASURE NDX 
control”measure"point 
OBSTACLE 
OBSTACLE_NDX 
OPFOR_EQUIP AUTH 
opfor_equip[auth_ndx 
OPFOR EQUIP"CURR NDX 

opfor_equip"curr 

OPFOR LOCATION 
OPFOR~LOCATION_NDX 
OPFORJJNIT STATUS NDX 
OPFOR~UNrfSTATUS 


4.2.12.8 SDB_UPDATE_DB 

Abstract . Situation data base update utilities. 

Major Capabilities . The procedures in this package extract update information from the 
situation data update messages and uses the procedures in SDBJNPUT_OUTPUT to update 
the data base. 

Special Instructions . This package is currently used by SDB_SITUAT10N_DB_MANAGER and 
SDB_LOAD_HIGHER_ECH. 

To compile this package, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/ued 

To load a program that uses this package, links must be established with the following 
libraries using the "a.info* command: 


/egen/cin_util/dn_util.lib 

/usr/lib/libm.a 


4-96 



Data Bases. Non© 


Environment Variables. None 


4.2.13 WBD BUILD DISPLAY MANAGER 
Abstract . Build window display manager. 

Major Capabilities . This process controls the interaction with the build window. It is 
responsible for allowing the user to select a build product, displaying the product, and 
sending the product to another participant. Build products can be textual reports or digital 
maps with tactical overlays. 

Special Instructions . The build display manager is started by the screen manager when the 
left mouse button is clicked on the build window creation button. 

The following processes must be executing before the build window display manager 
is started: 


RCP C2_PR0DUCT ROUTER 
RSD_SITUATION DATA_ROUTER 
CDB_C2 PRODUCTJDB MANAGER 
SDB_SrrUATION_DB_MANAGER 

To compile this program, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/utm 

To load this program, links must be established with the following libraries using the 
•a.info* command: 


/egen/cin_util/dn_util.lib 

/egen/cfw_utll/ciw_util.lib 

/egen/cux_util/cux_util.lib 


4-97 









/egen/cwn_util/cwn.!ib 
/usr/lib/libXr.a 
/usr/lib/libX_p.a 
/usr/Iib/libX.a 
/usr/lib/libm.a 

Data Bases 


MAP_BU1LD_MENU INPUT 

Environment Variables 


BUILD_C2 MAP MENU 
C2 PRODUCT_ROUTER SERV 
C2_PRODUCT_ROUTER~HOST 
EDDIC STATION USER" 
SmJATION_ROufER SERV 
SlTUAT10N_ROUTER_HOST 


4.2.14 WCD CONTROL DISPLAY MANAGER 

Abstract . Participant experiment control window display manager. 

Major Capabilities . This process controls the interaction with the participants experiment 
control window. It is responsible for displaying the experiment control product and sending 
the product to the experimenter. Experiment control products can be informative or require a 
response. Informative messages are displayed in the experiment control window until another 
experiment control product is received or until the window is terminated. If the window is 
closed into an icon when a new message is received, a blue bar is displayed in the icon. 
Experiment control messages that require a response are displayed with a send button in the 
upper left comer of the screen. The message is displayed in the window until the send 
button is hit by the participant. 

Special Instructions . The experiment control display manager is started by the station control 
manager (SCL) when it receives a window creation message from the experiment control 
manager (CTL). 

The following processes must be executing before the experiment control window 
display manager is started: 

RCN CONTROL ROUTER 
CTL_EXPERIMENT_CONTROL 


4-98 








To compile this program, the following paths must be established using the “a. path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

To load this program, links must be established with the following libraries using the 
"a.info“ command: 

/egen/cin_util/cin_util.lib 

/egen/ciw_util/ciw_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libX _p. a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases . None 

Environment Variables 


CONTROL ROUTER HOST 
CONTROL" ROUTER'sERV 
EDDIC STATION USER 


4.2.15 WED EXPERIMENT DISPLAY MANAGER 

Abstract . Experimenter's experiment control window display manager. 

Major Capabilities . This process controls the interaction with the experimenter’s experiment 
control window. It is responsible for allowing the experimenter to select an experiment control 
product, for displaying the experiment control product, and for sending the product to the 
participant. Experiment control products can be informative or require a response. 

Special Ins tructions . The experimenter experiment control display manager is started by the 
screen manager when the left mouse button is clicked on the experiment control window 
creation button. 


4-99 





The following processes must be executing before the experiment control window 
display manager is started: 

RCN_CONTROL ROUTER 
CTL_EXPERIMENT_CONTROL 

To compile this program, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/utm 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lfb 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/iibm.a 

Data Bases 


MAP_BUILD_MENU INPUT 

Environment Variables 

BUILD C2 MAP MENU 
CONTROL~ROUTER HOST 
CONTROL ROUTER~SERV 
SITUATIONROUTER HOST 
SITUATION_ROUTER~SERV 


4-100 







4.2.16 WMS MESSAGE DISPLAY MANAGER 


Abstract . View message window display manager. 

Major Capabilities . This process controls the interaction with the view message window. It is 
responsible for displaying the incoming message, maintaining the message queue, and 
maintaining the save and message log. 

if a message is currently displayed when a new message is received, the message is 
added to the message queue and the number of messages in the queue is updated in the 
drop button. If the window is closed into an icon when the message is received, a blue bar is 
displayed in the icon. 

Special Instructions . The view message display manager is started by the screen manager 
when the left mouse button is clicked on the view message window creation button or by the 
station control manager (SCL) when it receives a window creation message from the C2 
product data base manager (CDB). 

The following processes must be executing before the view message window display 
manager is started: 


RCP_C2_PRODUCT ROUTER 
RSD SITUATION DATA ROUTER 
CDB_C2_PRODUCT DB MANAGER 
SDB_SmjAT!ON_DB_MANAGER 

To compile this program, the following paths must be established using the "a.path” 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/uiw 

/eddic/Ada/utm 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/ciw_uti!/ciw_util.lib 


4-101 





/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/Iib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 


Data Bases 

MAP_MESSAGE_MENU INPUT 

Environment Variables 


C2_PRODUCT_ROUTER HOST 
C2_PRODUCT_ROUTER _ SERV 
EDDIC STATION USER~ 
MESSAGE CREATED BY USER 
MESSAGE~MAP MENU 
SITUATION~ROUTER HOST 
SlTUATION_ROUTER - SERV 


4.2.17 WTD Tool Display Manager 

The tool display manager consists of the tool window manager program, the calculator 
specification, and the task organization tool. 


4.2.17.1 CALC_CALCULATOR 
Abstract . Graphical calculator tool. 

Major Capabilities . The calculator is a mouse-based tool that functionally duplicates the 
Microsoft Windows calculator. 

Special Instructions . To compile this package, the following paths must be established using 
the "a.path" command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdbdib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uux 

/eddic/Ada/uwn 


4-102 




To load a program that uses this package, links must be established with the following 
libraries using the “a.info" command: 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/libXjp.a 

/usr/lib/libX.a 

/usr/lib/libm.a 


Data Bases . None 
Environment Variables . None 


4.2.17.2 WTD_TOOL_DISPLAY_MANAGER 
Abstract . Tool window display manager. 

Major Capabilities . This process controls the interaction with the tool window. It is 
responsible for allowing the user to select a tool, calling the procedure to display the tool, 
and passing input to the appropriate input processing procedure for the selected tool. 

Special Instructions . The tool display manager is started by the screen manager when the left 
mouse button is clicked on the tool window creation button. 

The following processes must be executing before the tool window display manager is 
started: 


RCN_CONTROL_ROUTER 

To compile this program, the following paths must be established using the "a.path” 
command: 

/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/uwn 

/eddlc/Ada/ufm 

/eddic/Ada/ued 

/eddic/Ada/utm 


4-103 




To load this program, links must be established with the following libraries using the 

"a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_util. lib 

/egen/cwn_util/cwn.lib 

/egen/ciw_util/ciw_util.lib 

/usr/Iib/libXr.a 

/usr/lib/libX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases 


TOOL_MENU INPin - 

Environment Variables 


CONTROL_ROUTER_HOST 
CONTROL_ROUTER~SERV 
EDDIC STATION_USER 
TOOLS 


4.2.17.3 TOT_EDITOR 

Abstract . TOT_EDITOR is an acronym for the Task Organization Tool Editor 
package, which edits a task organization unit structure. 

Major Capabilities . TOT_EDITOR displays and edits task organizations using the tree 
structure builder (TSB) package, for any OPLAN currently in the system. Some of the task 
organization displays can be quite large. These displays can be deciuttered by displaying 
only certain unit types (combat, combat support, combat service support) or altering the top 
unit (a particular division, or a particular brigade...), thus displaying a smaller subset of the 
original. If a task organization display wilt not fit in a single window, and the user can not or 
does not wish to declutter, the user may optionally split the view. Splitting the view means 
the user divides the existing window either horizontally or vertically in what-ever proportions 
are desired. The view may be split an infinite number of times. When the split view is no 
longer required it may be destroyed, as long as there is always at least one view. 

Once a task organization is displayed the user may request detail and summary 
reports on any given unit. The user can also alter the task organization by attaching or direct 
supporting a unit(s) from one place to another. 


4-104 





Special Instructions Use of the task organization tool requires the situation router to be up. 
This is needed so that OPLANs can be retrieved and updated. 

There are three main functions within TOT: First, is a one time, per execution, 
initialization (TOTJNITIALIZE); second, is a one time, per execution, termination 
(TOTTERMINATE); third, is all other event processing (TOT_PROCESSJNPUT). 
TOT_PROCESS_INPUT does not receive events directly from the system, via UWNJNPUT, so 
the calling process, WTD, passes input events to it through the procedure arguments. 
TOT.PROCESSJNPUT does not call UWNJNPUT. It must handle events that have nothing 
to do with task organization and report back when it is finished processing a given event. 
TOT_PROCESS_INPUT is called once for each event. 

To compile this package, the following paths must be established using the "a.path“ 

command: 


/eddic/Ada/common 

/usr/cherokee/VADS55/verdixlib 

/usr/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/uwn 

/eddic/Ada/ued 

/eddic/Ada/uiw 

/eddic/Ada/utm 

To load a program that uses this package, links must be established with the following 

libraries using the "a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/egen/ciw_util/ciw_util.lib 

/usr/lib/libXr.a 

/usr/lib/!ibX_p.a 

/usr/lib/libX.a 

/usr/lib/libm.a 

Data Bases 

TASK ORG_TOP UNIT MENU 
TASK_ORG_UNIT MENU 
TASK_ORG UNIT TYPE MENU 
TASK.ORGJTOOL MENU 


4-105 






Environment Variables 


CHARACTER FONT FILE 
SITUATION ROUTER HOST 
SrrUATION - ROUTER~SERV 
SYMBOL FONT FILE* 
TOPJJNfr MENU 
UNIT MENU 
UNIT~TYPE_BTN_MENU 
VIEW~MENU 


4.2.18 WVC VIEW C2 DISPLAY MANAGER 
Abstract . View situation window display manager. 

Major Capabilities . This process controls the interaction with the view situation window. It is 
responsible for allowing the user to select a C2 product and displaying the selected product. ' 
The product can be either a textual report or a digital map with tactical overlay. 

Special Instructions . The view situation display manager is started by the screen manager 
when the left mouse button is clicked on the view situation window creation button. 

The following processes must be executing before the view situation window display 
manager is started: 

RCP_C2 PRODUCT_ROUTER 
RSD SITUATION DATA_ROUTER 
CDB" C2_PRODUCT_DB MANAGER 
SDB_SITUATION_DB_MANAGER 

To compile this program, the following paths must be established using the “a.path" 
command: 

/eddic/Ada/common 

/us r MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

/eddic/Ada/utm 


4-106 




To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 
/egen/ciw_util/ciw_util.lib 
/egen/cux_util/cux_util .lib 
/egen/cwn_util/cwn.lib 
/usr/lib/libXr.a 
/usr/lib/JibX_p. a 
/usr/lib/libX.a 
/usr/lib/Iibm.a 


Data Bases 

MAP_VIEW_C2_MENU 


INPUT 


Environment Variables 


C2 PRODUCT_ROUTER_HOST 
C2_PRODUCT_ROUTER SERV 
EDDIC_STATION USER 
S(TUATION_ROUTER HOST 
SlTUATION_ROUTER_SERV 
VIEW_C2_MAP_MENU 


4.2.19 WVR VIEW REFERENCE DISPLAY MANAGER 
Abstract . View reference window display manager. 

Major Capabilities . This process controls the interaction with the view reference window, it is 
responsible for allowing the user to select a reference product and displaying the selected 
product. Currently reference products can only be textual reports. 

Special Instructions . The view reference display manager is started by the screen manager 
when the left mouse button is clicked on the view reference window creation button. 

The following processes must be executing before the view reference window display 
manager is started: 


RRF REFERENCE_ROUTER 
FDB_REFERENCE_DB_MANAGER 


4-107 





To compile this program, the following paths must be established using the "a.path" 
command: 

/eddic/Ada/common 

/usr.MC68020/cherokee/VADS55/verdixlib 

/usr.MC68020/cherokee/VADS55/standard 

/eddic/Ada/uin 

/eddic/Ada/uux 

/eddic/Ada/ued 

/eddic/Ada/uwn 

To load this program, links must be established with the following libraries using the 
"a.info" command: 

/egen/cin_util/cin_util.lib 

/egen/cux_util/cux_util.lib 

/egen/cwn_util/cwn.lib 

/usr/lib/libXr.a 

/usr/lib/IibX_p.a 

/usr/lib/libX.a 

/usr/Iib/libm.a 


Data Bases . None 
Environment Variables 


EDDIC STATIONUSER 
REFERENCE_ROUTER HOST 

referencejiouter'serv 

4.3 C UTILITIES 

The C utilities are low level utilities required to access existing system capabilities. The 
C utilities are functionally organized with each function being contained on a separate library. 
The following C libraries exist in the Tactical Planning Workstation: 

CIN - Internet communications utilities 

CIW - Color image window utilities 

CUX - Unix command utilities 


4-108 







CWN - Window display and control utilities 
XR - Hewlett-Packard X-window utilities 

Many of the C procedures have Ada bindings with the same name except the 
procedure name starts with a "U" instead of a "C". Those procedures are described in section 
4.1. The following sections describe only C utilities that are not currently accessible from 
Ada. 


4.3.1 CIN UTIL 

Abstract . CIN_UTIL is an acronym for a set of utility communications primitives which allows 
processes to communicate with each other using an InterNet protocol. Programs may 
communicate with each other both within one processor and over an ethernet network. 

Ada Binding . The routines in this library are used by the UIN_INTERNET_COMMUNlCATIONS 
package and have Ada bindings to it through the ClNJNTERNET_COMMUNICATIONS 
specification package. Both of these packages can be found in the /eddic/Ada/uin directory. 

Major Capabilities . CIN_UTIL is a stand alone utility library (not a process) which does not 
require the fileserver routers and/or data base managers to operate. This utility library is 
premised on a server-client relationship. That relationship is defined in the 
UIN_INTERNET_COMMUNICATIONS special instructions. 

Special Instructions . All of the routines which bind with an application must pass their 
arguments as pointers (starting address in memory) rather than passing actual data in the 
arguments. 

The complete instructions for CIN UTIL use can be found in the 
UIN_INTERNET_C0MMUNICAT10NS section. 

There are a couple of routines which are not used by the outside world which will be 
described here. The first routine (CIN_MSTR_SOCK_INFO) will load the master socket 
(server) address information structure. That information is needed when creating the server 
and creating a client. The other routine (CIN_WHICH_BiT_ON) not used by the outside world, 
determines which bit, in a 32 bit word, is on. That information is used by the server waiting 
routine to determine who just called him. 

CIN_RECV_MSG needs a special mention. The first item in the message structure 
being passed is a four byte word which holds the length of the message. The remainder of 
the structure is application dependent, and the exact format and layout are of no concern to 
this routine because it will not try to interpret the message, it will merely be passed on as a 
bit stream. CIN_RECV_MSG has been modified to accommodate Ada programs, in that the 


4-109 







first two bytes of the message are some sort of Ada overhead, so they must be ignored by 
"C", and the next four bytes are the length of the message. Therefore "C" language routines 
need to use structures which begin with an appropriate two byte buffer. 

There are no include files used in CINJJTIL; everything is passed by argument. 

To compile this library, use the "make" command and associated Makefile found in the 
directory. 

To load a program with this library, links must be established with the following 
libraries using the “a.info" command: 

/egen/cin_util/cin_util.!ib 

Data Bases . None 

Environment Variables . None explicitly, two implicitly passed in by argument. 

hostjd - name of the server machine 

service id - name of the service id (INET port number). 


4.3.2 C1W UTIL 

Abstract . CIW UTIL is an acronym for a set of Image Windowing primitives which provides a 
means for programmers to perform certain color graphics imaging functions within the X 
Windows System environment. 

Ada Binding . The routines in this library are used by the UIW_IMAGE_WINDOW and 
UIW_GENERIC packages and have Ada bindings to it through the ClW_IMAGE_WINDOW 
specification package. Both of these packages can be found in the /eddic/Ada/uiw directory. 

Major Capabilities . CIWJJTIL is a stand alone utility library (not a process) which does not 
require the fileserver routers and/or data base managers to operate. This utility library allows 
programs to access X Windows color graphics imaging commands from high level languages 
without having an intimate knowledge of the X Windows system. However, the programmer 
must have some knowledge or concept of X Windows or graphics processing. There is not a 
one to one pairing of routines to X Windows commands; only those commands required by 
the Tactical Planning Workstation have been developed. 

Special Instructions . All of the routines which bind with an application must pass their 
arguments as pointers (starting address in memory) rather than passing actual data in the 
arguments. 


4-110 




The complete instructions for CIW use can be found in the UIW_GENERIC and 
UIW_IMAGE_WINDOW sections. 

The C include files used in CIW are: 

ciw_parm.h - Some parameter constants used by the C routines. 
ciw_color.h * Variables that hold interim values used in initializing, 
loading, and storing the color lookup table. 

To compile this library, use the "make" command and associated Makefile found in the 
directory. 

To load a program with this library, links must be established with the following 
libraries using the "a.info" command: 

/egen/ciw_util/ciw_util.lib 
/usr/lib/libX.a 
/usr/lib/libX_p.a 

Data Bases . Whatever font file is passed in by the application. 

Environment Variables. None 


4.3.3 CUX UTIL 

Abstract . CUX_imL is an acronym for a set of utility primitives, which allow programs to 
access UNIX operating system commands. 

Ada Binding . The routines in this library are used by the UUX_UTIL and UUXJO packages 
and have Ada bindings to It through the CUXJJTIL specification package. Both of these 
packages can be found in the /eddic/Ada/uux directory. 

Major Capabilities . CUX_UT!L is a stand alone utility library (not a process), which does not 
require the fileserver routers and/or data base managers to operate. This utility library 
provides a means for programmers to perform certain UNIX operating system commands, or 
very rudimentary functions, that high-level languages do not permit. There is not a one-to- 
one pairing of routines to UNIX commands; only those commands required by the Tactical 
Planning Workstation have been developed. 

Special Instructions . All of the routines that bind with an application must pass their 
arguments as pointers (starting address in memory) rather than passing actual data in the 
arguments. 


4-111 









The complete instructions for CUX use can be found in the UUX_UTIL and UUXJO 
sections. 

There are no include files used in CUX_UTIL; everything is passed by argument. 

To compile this library, use the "make" command and associated Makefile found in the 
directory. 

To load a program with this library, links must be established with the following 
libraries using the “a.info" command: 

/egen/cux_util/cux_util.lib 

Data Bases . No explicit data base, all are implicit. cux_open_file, cux_close_file, 
cux_binary_read, and cux_binary_write will open, dose, read, or write to any data base. 

Environment Variables . No explicit environment variables, all are implicit. 

cux_getenv will decipher any environment variable. 


4.3.4 CWN UTIL 

Abstract . The CWN library consists of the window utilities written in the C language for the 
Tactical Planning Workstation. It uses the X Window System protocol designed at MIT and a 
modified version of the Xrlib user interface library developed by Hewlett-Packard. Some of 
the Hewlett-Packard Xrlib routines of version 10 Release 4, were corrected for errors or 
enhanced under the present effort and were therefore placed in this library also. The library 
was also designed to be used in conjunction with the system’s start-up routine 
screenjnanager. 

Ada Binding . The routines in this library are used by the UWN_WlNDOW_SYSTEM package 
and have Ada bindings to it through the CWN_WINDOW_SYSTEM specification package. 
Both of these packages can be found in the /eddic/Ada/uwn directory. 

Major Capabilities . CWN contains the C equivalence of all UWN window system utilities, 
including the internal routines called to support the capabilities and automatic functions of 
some of the UWN utilities using Xrlib and X utilities. 

Special Instructions 

.A Brief History 


4-112 







The implementation of the window utilities uses the Xrlib programming tools described 
in the manual "Programming with the X Window System", November 1986. The programmer 
not familiar with the capabilities of Xrlib should read this manual. 

The CWN system has undergone extensive changes since its initial conception and 
implementation. This is important to keep in mind, as some remnants of the earlier 
developments may be disconcerting to the programmer looking at it for the first time. A brief 
history is therefore given to give insight into the change of the usage of terminology, 
structures, and routines evident throughout the system. 

Initially, the system presumed all utilities would be displayed in what is now referred to 
as a process window. The window was created by placing a subwindow inside another 
window to give the visual effects of the subwindow having a wide border. The border window 
was considered the primary window and the subwindow was considered the working window, 
the area in which applications could define and work within. Most utilities were named and 
documented in the comments with respect to this type of window referencing. Also, the 
coordinate system used in defining was in terms of character rows and columns instead of 
pixels. 


All field editors were required to be defined within a panel or subpanel, as the panel 
manager eliminated the handling of a number of events an application would otherwise have 
to deal with. However, the application was responsible for assigning unique IDs to each 
object, despite the fact Xr used a pointer to the editor instance as a unique ID for all 
operations on an object. To keep track of both IDs and be able to search for one or the 
other, link lists were the primary data structures utilized. 

As the need arose for the capability of defining within windows, the automatic 
functions of the panel manager had to be incorporated; e.g., redrawing when an exposure 
event was received. At the same time, development of the system required the notification of 
special events initially considered of no import to the application. These and the increase of 
other capabilities, along with the rise of problems associated with using them, has caused the 
CWN library to become increasingly complex and under constant development. 

. Overview of the Library Design Structure 

The main C include files of the CWN window system are cwn_window_system_types.h 
and cwn_window.h. The rest of the include files are used only by specific routines, although 
they may contain the external declarations of some variables declared in the former two 
include files. The specific include files are as follows; 


4-113 





Include File Used Bv: 

cwn_window_system_init.h cwn_initialize_window_system.c 
cwn_create_window.h cwn_create_window.c 

cwnjcon.h Any routine requiring icon information 

screen_manager.h screen_manager.c 

The CWN system uses link list structures for buttons, menus, panels, and windows as 
found in the include file cwn_window_system_types.h. These link structures were designed 
with record components to store data needed for window system management of all that has 
been defined and requested by an application. The most notable link lists are those for 
determining where an editor was defined; in a panel, a subpanel, or a window. Two data 
components are used for determining this; a pointer to the panel list and a pointer to the 
subpanel list. A panel defined editor will have a NULL value for its subpanel designation, 
whereas a window will have a NULL value for its panel designation. A subpanel will have a 
non-null value in both the panel and subpanel designators. The following table summarizes 
the algorithm for the process of determining an editor’s destination when defined: 


Destination 

Panel Pointer 

Suboanel Pointer 

Panel 

X 

NULL 

Subpanel 

X 

X 

Window 

NULL 

X 


Menus in Xr, especially walking menus, are not defined using one simple data 
structure, thus requiring a link list structure and recursive routines for definition. Note that 
such a menu is defined by linking submenus to menus or other submenus and requiring 
separate menu structures and routine calls for definition. Rather than forcing the application 
to be responsible for the incorporation of code handling these details, the menu system 
simply receives from the application arrays of labels and indices indicating the links to be 
made and handles the definition process. 

Xr panels were difficult to implement for the dynamic requirements of the system, thus 
they have a more complex link list structure. The panel structure used for defining a panel in 
Xr requires the application to know up front the number of editors to be created within the 
panel. This implied that if any editors were to be added or deleted after the initial creation the 
application had to delete the original panel and define a panel with additional or fewer editors. 
To expedite this process the design approach taken had the user define a panel up front, call 
the appropriate define editor routines, and notify CWN when the definition was complete by 
calling cwn_end_panei. 

When defined, a panel first allocates a field list of five fields. Each time an editor is 
specified to be within the panel, the panel’s field allocation is checked to see if more fields 
need to be allocated. In the event of adding or deleting editors it is mandatory that the 


4-114 






application calls cwnjjpdate_panel. This routine performs the actual removal of the original 
panel and creates a new panel with the new set of editors. 

. Event Processing 

The processing of events for multiple purposes has always been a nemesis for the 
window system. This is mostly due to the methodology used in Xr for processing event lists. 
One way event lists are established is by setting up xrPFI functions which process 
automatically upon a particular input or inputs to a window. If a registered window has more 
than one function declared for the same input event, only the function declared first will be 
invoked. In other words Xr, Xrlnput in particular, loops through the went list until it finds a 
process flag set for the selected input. When one is found, the function is called, returns, and 
Xrlnput exits without continuing its search for any further processing of the same event. Even 
if a copy of the event was pushed back onto the input queue, only the first function would be 
performed as Xrlnput would have started its search at the beginning of the event list. 

Another factor in the event processing problem is that for Xrlnput to receive a 
particular event for a window the event has to be selected for the window via XSelectlnput. 
The problem is that any subsequent calls to this routine nullify the previous calls. This 
problem became evident when field editors were permitted to be defined within a window 
instead of a panel, and applications were allowed to select exposure events of a window for 
notification. 

To perform automatic redraw capability for the editors defined within a window an 
XSelectlnput was performed to select exposure event notification for the window. The xrPFI 
function cwn_redraw_editor was then established to handle the redraw. However, to prevent 
multiple redraws of the screen, screen flashing, the routine cwn_purge_window_exposure was 
defined to purge other exposure events caused by the redraw itself. 

If an application also wished to be notified of an exposure event it called 
cwn_select_input with the exposure flag set true. This routine would also perform 
XSelectlnput and set up the process function cwn_input_selected for pushing a notification 
onto the input queue for cwnjnput to return to the application. Again, depending on which 
was performed first, only one of these functions would be performed. 

The final solution implemented is the routine cwn_XSelect!nput. This routine is used 
throughout the CWN system and is the only routine with a direct call to XSelectlnput. The 
reasoning is that different editors require different event selections and to insure all events 
needed are selected for a particular window, cwn_XSelectlnput searches the window editor 
field list "or-ing" all the necessary event masks. Once this is complete the final XSelectlnput 
call is made. 


4-115 




. Notes 


All routines passing information back to the application require the application to pass 
the starting address of memory for storage of the information. 

A null event must be pushed onto the event queue after processing has been 
completed in an xrPFI function call. Failure to do this may cause some user interaction to go 
undetected. 

The cwn_delete_subwindow routine does not actually attempt to delete a subwindow 
by removing it from Xr's registered window list. Instead, It simply unmaps the window. This 
approach was taken after it was discovered that too many levels of subwindows seem to 
cause the Xrlib to lose track of the window’s information. The problem is probably in the 
QueryTree routine used in Xr. 

. Linking to cwn.lib 

To load an Ada application to cwn.lib, the following libraries must be visible: 

/usr/lib/libX.a 

/usr/lib/libXr.a 

/usr/lib/libX_p.a 

/egen/cwn_util/cwn.fib (where egen is a symbolic link to / usr2/eddic/gen) 

To link a C application, the link command line would have the following appended to 
it: 

-IX -IXr -IX_p /egen/cwn_util/cwn.lib 


Data Bases 


ICON_STACK_DB INPUT/OUTPUT 

Environment Variables 
ICON_PATH 


4.3.5 Xrlib Corrections and Enhancements 


4-116 





Abstract . X-Window high-level utilities developed by Hewlett-Packard. 

Ada Binding . None 

Major Capabilities . X-Windows version 10 release 4 contained the X-Window system and 
some high-level graphic utilities developed by various companies. To save software 
development time and cost, it was decided to use the Hewlett-Packard utilities as a starting 
point. The utilities provide such things as scrollbars, text editors, button utilities and walking 
menus. This section does not describe the whole Xr system, only the C procedures that were 
changed for integration into the system. A complete description of the Xr system is contained 
in the X-Window documentation. 

Special Instructions . The following changes were made to the Xr system for integration into 
the system: 

ExpPageEdit.c 

ExpPageEdit is a text field editor developed and expanded from the Xrlib field editor 
PageEdit. The editor was enhanced with a scrollbar on the left side of the editor for scrolling 
within the editor buffer, an option for read-only, and a popup menu was incorporated for 
editor operations. These operations include the capabilities to: (1) copy text to and from 
editors or static text, (2) cut and paste, (3) find other instances of a text string within the 
editor or another editor. The editor defined as read-only has only the operations of copy and 
find. Each of these operations may be invoked using the keyboard rather than the popup 
menu. Usually, entering the first letter of the function name as a control character invokes the 
operation. For example, entering a Control C, invokes the Copy function whereas entering a 
Control T would invoke the Cut function. 

Other menu options coded in ExpPageEdit, but not currently in use, include a reset 
function, a save function, and a split screen function. 

NumericEdit.c 


This special editor is a modified version of the Xrlib TextEdit routine, the string field 
editor in UWN. The modification required adding new event types to the defs.h include file, a 
new editor information structure (XrNumericEditlnfo, to types.h), and an internal editor data 
structure (XrNumericEditData, in the file in_types.h). The editor was modified to accept the 
traversal keyboard keys to send appropriate events back to the application. Numeric input is 
limited to integers, but the application was given the capability to constrain the input range by 
specifying the minimum and maximum values accepted. 






MenuEdit.c and MenuMar.c 


These two modules of Xr were modified to decrease the sensitivity of menu selections 
within the system. Often times, users were found to have clicked the right mouse button 
rapidly in an area where a menu was activated. The menu would popup and detect an item 
selection because the menu was displayed with the mouse within a menu selection area. To 
place the mouse outside any active selection fields, MenuEditc required a check for the 
cursor being in a null area of the menu’s x coordinates. MenuMgr.c was changed to 
calculate the menu’s origins with respect to the cursor position. 

RadioButton.c 


This module was changed to display radiobuttons as squares like checkboxes. The 
procedure is a modified copy of the Xrlib routine RButton.c which displays round 
radiobuttons. 

Scrollbar.c 

The scrollbar displayed on the Sun workstation using the original Xr utility did not 
display the scroll arrows at the end. To correct this problem calls to XrFillPoly were replaced 
with calls to XrPoly. 

StaticText.c 

This editor was enhanced by adding a copy function invoked by popup menu 
selection. The primary purpose for this function is to provide the capability for copying static 
text into an editor. The internal data structure for static text (stData) was modified by adding 
components to keep track of text selection endpoints. The selected text is stored in the X 
buffer zero, using XStoreBytes, for later retrieval via the paste function option in the page 
editor. 

panelmar.c 

The panel manager routine panelmgr.c, was modified as follows: 

1. The xrPanellnfo data structure had a record component specified as 

•relativeTo’’ in which the application was to specify the window the panel 
window was to be created relative to. This field was ignored in the panel 
manager, making the option useless. The code was changed to create the 
window as a child of the relativeTo window under the case statement of 
MSGJMEW, instead of creating the panel’s window with the RootWindow as the 
parent. 


4-118 







2. Another problem was that the panel’s group instance was returned despite 
input taking place within a subpanel of the panel. The variable ‘‘vaiuePtr" was 
corrected to return a subpanel editor group instance if editor input was to a 
subpanel. This correction is under the case statement of MSG_EDIT. 

3. Every panel was given its own panelContext instead of pointing to the default 
panel context which caused every panel to have the same current editor 
despite the fact the editor was not in every panel. The code would loop 
forever reactivating the same editor when the user selected an editor in 
another panel. The event would never be processed as the proper panel would 
always activate an editor it did not have. This correction may be found in the 
case MSGJMEW statement. 


4. A similar situation existed when no action was taken in an activated field and 
the user opted to select into another field. The process had already set the 
current editor to the activated one and would loop forever activating the same 
editor. The event would be passed to the editor, the editor it would recognize 
the event was not within its rectangle of definition and push the event back 
onto the input queue. Since the current Editor had not been changed, the 
same process would then repeat. The condition was corrected by setting the 
current Editor field to null whenever panel input was a known editor event type 
which was pushed back onto the event queue. This correction may be found 
under the MSG_EDIT case statement. 

Data Bases . None 


Environment Variables. None 


4.4 dBASE PROGRAMS 

dBASE is used in EDDIC for maintaining the scenario data, exporting the scenario 
data to the Sun system, and maintaining the experiment analysis data. These programs are 
described in the following section. 


4.4.1 EDDIC 

Abstract . Maintains the experiment analysis data. 


4-119 







Major Capability . This program accepts three categories of experiment data: 

(1) - Computer recorded 

(2) - Experiment observations 

(3) - Participant Questionnaires 

The program maintains the data by experiment id and allows complete editing and 
printing capabilities. It also provides the capability to export the data in ASCII format for the 
purpose of importing into SAS or other statistical packages. 

Special Instructions . This program was developed using the dBASE IV application developer 
and will not run in dBASE ill Plus. Use the application developer to modify this program. 

The following section describes the EODIC application. dBASE applications consist of 
a group of menus chained together. The top menu is a bar menu that appears at the top of 
the screen and all other menus are pull-down menus from the bar menu. The format of this 
section shows the menu layout as it would appear on the screen, the menu attributes, and 
the menu item attributes. The menu attributes include the following items: 

Menu Name - Name assigned to the menu. 

Data Base - The database assigned to this menu. 

Embedded Code Before - Logical indicator if dBASE code has been embedded in the 
application to be executed before the menu is displayed. 

Embedded Code After - Logical indicator if dBASE code has been embedded in the 
application to be executed after the menu is exited. 


After the menu attributes are described, the attributes for each item in the menu is 
described. The menu item attributes include the following items: 

Item No. - Sequential number of the menu items. This number corresponds with the 
items in the menu layout. 


Action - The action to be taken when this menu item is selected. The following 
actions are used in this program: 


Open Menu - 
Quit 

Run Program - 

Append 

Edit 

Delete Records • 


Opens the named menu 

Exit the program 

Run a dBASE program 

Add a record to the data base 

Modify a record in the database 

Delete a record from the data base 


4-120 







Run Report - Generate the named report 
dBASE Code - Execute the embedded dBASE code 

No Action - ignores user selection 

Data Base - The database assigned to this menu item. 

Embedded Code Before - Logical indicator if dBASE code has been embedded in the 
application to be executed before the menu item is executed. 

Embedded Code After - Logical indicator if dBASE code has been embedded in the 
application to be executed after the menu item is executed. 



MENU NAME: MAIN 
Embedded Code Before: Yes 

ITEM 

NO. ACTION 

1 Open Menu: ADD * 

2 Open Menu: CHANGE 

3 Open Menu: DELETE 

4 Open Menu: REPORT 

5 Open Menu: SPECIAL 

6 Quit 


DATABASE: DUMMY 
Embedded Code After: No 

EMBEDDED CODE 

DATA BASE BEFORE AFTER 

No No 

No No 

No No 
No 
No 
No 


No 

No 

No 








ITEM# 


1 

2 

3 

4 

5 

6 


Automated Data 

COA Analysis 

Questionnaires 

Observations 

CCAB 

Scores 


Menu Name: ADD Data Base: 

Embedded Code Before: No Embedded Code After: No 


ITEM 



EMBEDDED CODE 

NO. 

ACTION 

DATA BASE 

BEFORE 

AFTER 

1 

Run Program: DBASE LD 


No 

No 

2 

Open Menu: ADDCOA 


No 

No 

3 

Open Menu: ADDQST 


No 

No 

4 

Open Menu: ADDOBS 


No 

No 

5 

Append: CCAB 

CCAB 

No 

No 

6 

Open Menu: ADDSCOR 


No 

No 


ITEM# 


' COA Analysis 

~ Questionnaires 

3 Observations 

J CCAB 

5 Scores 

1 1 

Menu Name: CHANGE Data Base: 

Embedded Code Before: No Embedded Code After: No 


ITEM 

NO. ACTION 

1 Open Menu: CHGCOA 

2 Open Menu: CHGQST 

3 Open Menu: CHGOBS 

4 Edit: CCAB 

5 Open Menu: CHGSCOR 


DATA BASE 


EMBEDDED CODE 


BEFORE 

AFTER 

No 

No 

No 

No 

No 

No 

Yes 

No 

No 

No 


CCAB 








ITEM# 


Automated Data 
COA Analysis 
Questionnaires 
Observations 
CCAB 

Whole Session 
Scores 


Menu Name: DELETE 
Embedded Code Before: No 


Data Base: 

Embedded Code After: No 


ITEM EMBEDDED CODE 


NO. 

ACTION 

DATA BASE 

BEFORE 

AFTER 

1 

Run Program: DELAUTO 


No 

No 

2 

Open Menu: DELCOA 


No 

No 

3 

Open Menu: DELQST 


No 

No 

4 

Open Menu: DELOBS 


No 

No 

5 

Delete Records 

CCAB 

Yes 

No 

6 

Run Program: DELEXPR 


No 

No 

7 

Open Menu: DELSCOR 


No 

No 


REM# 

1 

2 

3 

4 

5 

6 
7 


Automated Data 

COA Analysis 

Questionnaires 

Observations 

CCAB 

Scores 

All 


Menu Name: REPORT 
Embedded Code Before: No 


Data Base: 

Embedded Code After: No 


ITEM EMBEDDED CODE 


NO. 

ACTION 

DATA BASE 

BEFORE 

AFTER 

1 

Open Menu: RPTAUTO 


No 

No 

2 

Open Menu: RPTCOA 


No 

No 

3 

Open Menu: RPTQST 


No 

No 

4 

Open Menu: RPTOBS 


No 

No 

5 

Run Report: CCAB 

CCAB 

Yes 

No 

6 

Open Menu: RPTSCOR 


No 

No 

7 

dBASE Code 


No 

No 


4-f23 






ITEM# 

1 

2 

3 


Process ASCII Files 
Export Files to SAS 
Pack Databases 



Menu Name: SPECIAL 
Embedded Code Before: No 

ITEM 

NO. ACTION 

1 Run Program: EDDIC LD 

2 dBASE Code 

3 Run Program: PACK 


Data Base: 

Embedded Code After: No 

EMBEDDED CODE 

DATA BASE BEFORE AFTER 

No No 

No No 

No No 


ITEM# 


1 

Critical Event Ident 

2 

War-Gaming Summary 

3 

Weights 

4 

Scales 




Menu Name: ADDCOA 
Embedded Code Before: No 

ITEM 

NO. ACTION 

1 Append: COAATM1 

2 Append: COAATM2 

3 Append: COAATWT 

4 Append: COAATSC 


Data Base: 


Embedded Code After: No 

EMBEDDED CODE 

DATA BASE 

BEFORE AFTER 

COAATM1 

No No 

C0AATM2 

No Yes 

COAATWT 

No Yes 

COAATSC 

No No 


4-124 







ITEM# 


1 

-—------ 

COA Task Evaluation 

2 

Demographics 

3 

HMI (EDDIC) 

4 

HMI (EDDIC/COAAT) 

5 

Personal Style 

6 

Situation Awareness 

7 

Workload Assessment 


Menu Name: ADDQST 
Embedded Code Before: No 


Data Base: 

Embedded Code After: No 


ITEM 

NO. ACTION 


EMBEDDED CODE 

DATA BASE BEFORE AFTER 


1 Append: TASKEVAL 

2 Append: PERSON 

3 Append: HMIED 

4 Append: HMIEDCT 

5 Append: PERSTYLE 

6 Append: SITAWARE 

7 Append: WORKASMT 


TASKEVAL 

No 

No 


PERSON 

No 

No 


HMIED 


No 

No 

HMIEDCT 

No 

No 


PERSTYLE 

No 

No 


SITAWARE 

No 

No 


WORKASMT 


No 

No 


ITEM# 

1 

2 


Team Profile 
Time Line 




Menu Name: AD DOBS 
Embedded Code Before: No 


Data Base: 

Embedded Code After: No 


ITEM 

NO. ACTION 


EMBEDDED CODE 

DATA BASE BEFORE AFTER 


1 Append: TEAMPRF 

2 Append: TIMELINE 


TEAMPRF No No 

TIMELINE No No 


4-125 









ITEM# 


1 

2 

3 

4 

5 

6 
7 


Gathering Facts 
Array Main Forces 
Array Spt Forces 
Array Res Forces 
Critical Events 
Justification 
Concept Operation 


Menu Name: ADOSCOR Data Base: 

Embedded Code Before: No Embedded Code After: No 


ITEM 

NO. ACTION 


EMBEDDED CODE 

DATA BASE BEFORE AFTER 


1 Append: SCFACTS 

2 Run Program: ARFORCE 

3 Run Program: AR FORCE 

4 Run Program: AR FORCE 

5 Run Program: IDEMTCE 

6 Append: SCJUST 

7 Append: SCCNOP 


SCFACTS 

No 

No 


Yes 

No 


Yes 

No 


Yes 

No 

SCCRTEVT 

No 

No 

SCJUST 

No 

No 

SCCNOP 

No 

No 


ITEM# 


1 

Critical Event Ident 

2 

War-Gaming Summary 

3 

Weights 

4 

Scales 



Menu Name: CHGCOA 
Embedded Code Before: No 

Data Base: 

Embedded Code After: No 

ITEM 

NO. 

ACTION 

DATA BASE 

EMBEDDED CODE 
BEFORE AFTER 

1 

Edit: COAATM1 

COAATM1 

Yes No 

2 

Edit: COAATM2 

C0AATM2 

Yes No 

3 

Edit: COAATWT 

COAATWT 

Yes No 

4 

Edit: COAATSC 

COAATSC 

Yes No 


4-126 





ITEM# 


1 

COA Task Evaluation 

2 

Demographics 

3 

HMI (EDDIC) 

4 

HMI (EDDIC/COAAT) 

5 

Personal Style 

6 

Situation Awareness 

7 

Workload Assessment 


Menu Name: CHGQST Data Base: 

Embedded Code Before: No Embedded Code After: No 


ITEM 

NO. ACTION 


EMBEDDED CODE 

DATA BASE BEFORE AFTER 


1 Edit: TASKEVAL 

2 Edit: PERSON 

3 Edit: HMIED 

4 Edit: HMIEDCT 

5 Edit: PERSTYLE 

6 Edit: SITAWARE 

7 Edit: WORKASMT 


TASKEVAL 

Yes 

No 

PERSON 

Yes 

No 

HMIED 

Yes 

No 

HMIEDCT 

Yes 

No 

PERSTYLE 

Yes 

No 

SfTAWARE 

Yes 

No 

WORKASMT 

Yes 

No 


fTEM# 

1 

2 


( Team Profile 
Time Une 


Menu Name: CHGOBS 
Embedded Code Before: No 

ITEM 

NO, ACTION 

1 Edit: TEAMPRF 

2 Edit: TIMELINE 


Data Base: 

Embedded Code After: No 

EMBEDDED CODE 

DATA BASE BEFORE AFTER 

TEAMPRF Yes No 

TIMELINE Yes No 


4-127 






ITEM# 


1 

Gathering Facts j 

2 

Array Main Forces 

3 

Array Spt Forces 

4 

Array Res Forces 

5 

Critical Events 

6 

Justification 

7 1 

Concept Operation 


Menu Name: CHGSCOR Data Base: 

Embedded Code Before: No Embedded Code After: No 


ITEM 

NO. ACTION 

1 Edit: SCFACTS 

2 Run Program: ARFORCE 

3 Run Program: AR FORCE 

4 Run Program: AR FORCE 

5 Run Program: IDENTCE 

6 Edit: SCJUST 

7 Edit: SCCNOP 


EMBEDDED CODE 


DATA BASE 

BEFORE 

AFTI 

SCFACTS 

Yes 

No 


Yes 

No 


Yes 

No 


Yes 

No 


No 

No 

SCJUST 

Yes 

No 

SCCNOP 

Yes 

No 


ITEM# 


1 

2 

3 

4 

5 


Critical Event Ident 
War-Gaming Summary 
Weights 
Scales 

All COA Analysis 


Menu Name: DELCOA 
En,bedded Code Before: No 

ITEM 

NO. ACTION 

1 Delete Records 

2 Delete Records 

3 Delete Records 

4 Delete Records 

5 Run Program: DELACOA 


Data Base: 


Embedded Code After: 

No 


EMBEDDED CODE 

DATA BASE 

BEFORE AFTER 

COAATM1 

Yes 

No 

COAATM2 

Yes 

No 

COAATWT 

Yes 

No 

COAATSC 

Yes 

No 


No 

No 


4-128 





ITEM# 


1 

COA Task Evaluation | 

2 

Demographics | 

3 

HMI (EDDIC) | 

4 

HMI (EDDIC/COAAT) 

5 

Personal Style 

6 

Situation Awareness 

7 

Workload Assessment 

8 

All Questionnaires 


Menu Name: DELQST 
Embedded Code Before: No 


Data Base: 

Embedded Code After: No 


ITEM 

NO. ACTION 


EMBEDDED CODE 

DATA BASE BEFORE AFTER 


1 Delete Records 

2 Delete Records 

3 Delete Records 

4 Delete Records 

5 Delete Records 

6 Delete Records 

7 Delete Records 

8 Run Program: DELAQST 


TASKEVAL 

Yes 

No 

PERSON 

Yes 

No 

HMIED 

Yes 

No 

HMIEDCT 

Yes 

No 

PERSTYLE 

Yes 

No 

SITAWARE 

Yes 

No 

WORKASMT 

Yes 

No 


No 

No 


ITEM# 

1 

2 

3 


Team Profile 
Time Line 
All Observe 


Menu Name: DELOBS Data Base: 

Embedded Code Before: No Embedded Code After: No 


ITEM EMBEDDED CODE 


NO. 

ACTION 

DATA BASE 

BEFORE AFTER 

1 

Delete Records 

TEAMPRF 

Yes 

No 

2 

Delete Records 

TIMELINE 

Yes 

No 

3 

Run Program: DELAOBS 


No 

No 


4-129 





ITEM# 


1 

--"""l 

Gathering Facts 

2 

Array Main Forces 

3 

Array Spt Forces 

4 

Array Res Forces 

5 

Critical Events 

6 

Justification 

7 

Concept Operation 

8 

All 


Menu Name: DELSCOR 
Embedded Code Before: No 

ITEM 

NO. ACTION 

1 Delete Records 

2 Delete Records 

3 Delete Records 

4 Delete Records 

5 Delete Records 

6 Delete Records 

7 Delete Records 

8 Run Program: DELASCR 


Data Base: 


Embedded Code After: No 


EMBEDDED CODE 

DATA BASE 

BEFORE 

AFTER 

SCFACTS 

Yes 

No 

SCFORCE 

Yes 

No 

SCFORCE 

Yes 

No 

SCFORCE 

Yes 

No 

SCCRTEVT 

Yes 

No 

SCJUST 

Yes 

No 

SCCNOP 

Yes 

No 


Yes 

No 


4-130 









ITEM# 


1 

View Situation 

2 

View Reference 

3 

Map Control 

4 

Window Operations 

5 

New Cntrl Measures 

6 

BLUEFOR Task Org 

7 

Unit Location Update 

8 

All 


Menu Name: RPTAUTO 
Embedded Code Before: No 

ITEM 

NO. ACTION 

1 Run Report: C2RQST 

2 Run Report: REF_RQST 

3 Run Report: MAP CTRL 

4 Run Report: WINDOW 

5 No Action 

6 No Action 

7 No Action 

8 Run Program: ALLAUTO 


Data Base: 


Embedded 

Code After: 

No 


EMBEDDED CODE 

DATA BASE 

BEFORE 

AFTER 

C2 RQST 

Yes 

No 

REF RQST 

Yes 

No 

MAI 1 2 3 4 5- CTRL 

Yes 

No 

WINDOW 

Yes 

No 


No 

No 


ITEM# 


1 

Critical Event Ident 

2 

War-Gaming Summary 

3 

Objective Measures 

4 

Subjectives Measures 

5 

Ail 


Menu Name: RPTCOA 
Embedded Code Before: No 

ITEM 

NO. ACTION 

1 Run Report: C0AATM1 

2 Run Report: C0AATM2 

3 Run Report: COAOBJ 

4 Run Report: COASUB 

5 Run Program: COAATPRT 


Data Base: 


Embedded 

Code After: 

: No 


EMBEDDED CODE 

DATA BASE 

BEFORE AFTER 

COAATM1 

Yes 

No 

COAATM2.QBE 

Yes 

No 

COAOBJ.QBE 

Yes 

No 

COASUB.QBE 

Yes 

No 


No 

No 


4-131 







Menu Name: RPTQST Data Base: 

Embedded Code Before: No Embedded Code After: No 


ITEM EMBEDDED CODE 

NO. ACTION DATA BASE BEFORE AFTER 


1 Run Report: TASKEVAL 

2 Run Report: PERSON 

3 Run Report: HMIED 

4 Run Report: HMIEDCT 

5 Run Report: STYLDATA 

6 Run Report: PERSTYLE 

7 Run Program: RPTSITA 

8 Run Report: WORKASMT 

9 Run Program: ALLQUEST 


TASKEVAL 

Yes 

No 

PERSON 

Yes 

No 

HMIED 


Yes 

HMIEDCT 

Yes 

No 

PERSTYLE 

Yes 

No 

PERSTYLE.QBE 

Yes 

No 

Yes 

No 


WORKASMT 

Yes 

No 


No 

No 


ITEM# 

1 

2 

3 


Menu Name: RPTOBS Data Base: 

Embedded Code Before: No Embedded Code After: No 

ITEM 

NO. ACTION 

1 Run Report: TEAMPRF TEAMPRF Yes No 

2 Run Report: TIMELINE TIMELINE Yes No 

3 Run Program: ALLOBS No No 


EMBEDDED CODE 
BEFORE AFTER 



4-132 





HEM# 


1 

Gathering Facts | 

2 

Array Forces f 

3 

Critical Events 1 

4 

War-Gaming 

5 

COA Compare 

6 

Justification 

7 

Concept Operation 

o 

All 


Menu Name: RPTSCOR Data Base: 

Embedded Code Before: No Embedded Code After: No 

ITEM EMBEDDED CODE 


NO. 

ACTION 

DATA BASE 

BEFORE 

AFTER 

1 

Run Program: RPTFACT 


Yes 

No 

2 

Run Program: ARREPORT 


Yes 

No 

3 

Run Program: RPTSCCE 


Yes 

No 

4 

Run Program: RPTWGAM 


Yes 

No 

5 

Run Program: RPTCCOA 


Yes 

No 

6 

Run Program: RPTJUST 


Yes 

No 

7 

Run Program: RPTCNOP 


Yes 

No 

8 

Run Program: RPTSCALL 


Yes 

No 


Some of the experiment scoring programs require certain data to exist in certain data 
bases. The data defines thresholds and expert solutions required for generation of scoring 
reports. By having this data in a data base, a scoring report can be changed without 
changing the dBASE source code. Tables 4-1 through 4-3 show the programs that require 
the data and which data is required. 


4-133 







Table 4-1. Data Required by ARREPORT 


Data Base FIELD VALUE DESCRIPTION 


SCFORCE 

SEQ NO 

AEXPT 


COA" 

1 


POWER 

26.30 


MISSION 

M 

SCFORCE 

SEQ NO 

AEXPT 


COA" 

1 


POWER 

11.10 


MISSION 

S 

SCFORCE 

SEQ NO 

AEXPT 


COA 

1 


POWER 

7.50 


MISSION 

V 

SCFORCE 

SEQ NO 

AEXPT 


COA 

2 


POWER 

26.60 


MISSION 

M 

SCFORCE 

SEQ NO 

AEXPT 


COA 

2 


POWER 

11.20 


MISSION 

S 

SCFORCE 

SEQ NO 

AEXPT 


COA 

2 


POWER 

7.10 


MISSION 

V 

SCFORCE 

SEQ NO 

BEXPT 


COA 

1 


POWER 

26.60 


MISSION 

M 

SCFORCE 

SEQ NO 

BEXPT 


COA" 

1 


POWER 

11.20 


MISSION 

S 

SCFORCE 

SEQ NO 

BEXPT 


COA" 

1 


POWER 

7.10 


MISSION 

V 


Expert score for the main attack for 
COA 1 in balance condition A. 


Expert score for the supporting 
attack for COA 1 in balance condition 
A. 


Expert score for the reserve forces 
for COA 1 in balance condition A. 


Expert score for the main attack for 
COA 2 in balance condition A. 


Expert score for the supporting 
attack for COA 2 in balance condition 
A. 


Expert score for the reserve forces 
for COA 2 in balance condition A. 


Expert score for the main attack for 
COA 1 in balance condition B. 


Expert score for the supporting 
attack for COA 1 in balance condition 
B. 


Expert score for the reserve forces 
for COA 1 in balance condition B. 


4-134 






p 


I 


Table 4-1. Data Required by ARREPORT (Continued) 


DATA BASE 

FIELD 

VALUE 

DESCRIPTION 

SCFORCE 

SEQ NO 
COA - 
POWER 
MISSION 

BEXPT 

2 

26.30 

M 

Expert score for the main attack for 
COA 2 in balance condition B. 

SCFORCE 

SEQ NO 

COA 

POWER 

MISSION 

BEXPT 

2 

11.10 

S 

Expert score for the supporting 
attack for COA 2 in balance condition 
B. 

SCFORCE 

SEQ NO 
COA" 

POWER 

MISSION 

BEXPT 

2 

7.50 

V 

Expert score for the reserve forces 
for COA 2 in balance condition B. 

SCFORCE 

SEQ NO 

COA 

POWER 

PRCNT 

0 

10.00 

Percentage threshold around the 
experts score to count the 
participants score as a match. 

SCFORCE 

SEQ NO 

POWER 

MISSION 

WEGHT 

50.00 

M 

Weight to assign to the participants 
score for a match on the main attack. 

SCFORCE 

SEQ NO 

POWER 

MISSION 

WEGHT 

20.00 

S 

Weight to assign to the participants 
score for a match on the supporting 
attack. 

SCFORCE 

SEQ NO 

POWER 

MISSION 

WEGHT 

30.00 

V 

Weight to assign to the participants 
score for a match on the reserves. 


4-135 






Table 4-2. Data Required by RPTWGAM 


DATA BASE 

FIELD 

VALUE 

C0AATM2 

SEQ NO 

AEXPT 


COA 

1 


AVENUE 

A 


FR PERS 

0 


FR~EQUIP 

341 


EN PERS 

0 


EN'EQUIP 

219 


POL 

0 


AMMO 

0 


FEBA 

0 


TIME 

46.4 

COAATM2 

SEQ NO 

AEXPT 


COA" 

2 


AVENUE 

B 


FR PERS 

0 


FR~EQUIP 

327 


EN" PERS 

0 


EN~EQUIP 

224 


POL 

0 


AMMO 

0 


FEBA 

0 


TIME 

33.2 

COAATM2 

SEQ NO 

BEXPT 


COA" 

1 


AVENUE 

B 


FR PERS 

0 


FR EQUIP 

327 


EN PERS 

0 


EN EQUIP 

224 


POL 

0 


AMMO 

0 


FEBA 

0 


TIME 

33.2 

COAATM2 

SEQ NO 

BEXPT 


COA" 

2 


AVENUE 

A 


FR PERS 

0 


FR~EQUIP 

341 


EN" PERS 

0 


EN’EQUIP 

219 


POL 

0 


AMMO 

0 


FEBA 

0 


TIME 

46.4 


DESCRIPTION 

Expert war-gaming results for COA 1 
in balance condition A. The main 
attack avenue (A) is defined in 
AVENUE. It is used to sum the FEBA 
and TIME for only the main attack. 


Expert war-gaming results for COA 2 
in balance condition A. The main 
attack avenue (B) is defined in 
AVENUE. It is used to sum the FEBA 
and TIME for only the main attack. 


Expert war-gaming results for COA 1 
in balance condition B. The main 
attack avenue (B) is defined in 
AVENUE. It is used to sum the FEBA 
and TIME for only the main attack. 


Expert war-gaming results for COA 2 
in balance condition B. The main 
attack avenue (A) is defined in 
AVENUE. It is used to sum the FEBA 
and TIME for only the main attack. 


4-136 







Table 4-2. Data Required by RPTWGAM (Continued) 


DATA BASE 

FIELD 

VALUE 

DESCRIPTION 

COAATM2 

SEQ NO 

COA" 

FR_PERS 

APRCT 

2 

10 

Acceptable percentage threshold of 
the expert war-gaming results for 
each COA divided by the base COA 
results for balance condition A. The 
base COA is contained in COA and 
the percentage is in FR_PERS. 

COAATM2 

SEQ NO 

COA" 

FR_PERS 

BPRCT 

1 

10 

Acceptable percentage threshold of 
the expert war-gaming results for 
each COA divided by the base COA 
results for balance condition B. The 
base COA is contained in COA and 
the percentage is in FR_PERS. 

COAATM2 

SEQ NO 

FR FERS 
FR"EQUIP 

EN PERS 

EN"EQUIP 

POL 

AMMO 

FEBA 

TIME 

WEGHT 

0 

33 

0 

33 

0 

0 

0 

33 

The weight assigned to each 
category for a participant value that 
falls within the acceptable range. 




DATA BASE 
COAATWT 

COAATWT 


COAATSC 

COAATSC 

COAATSC 


Table 4-3. Data Required by RPTCCOA 


FIELD 

VALUE 

DESCRIPTION 

SEQ NO 

PRCNT 

Percentage threshold of the experts 

FRIERS 

20 

weights for the participants weights 
to be acceptable. 

SEQ NO 

EXPRT 

Expert weights assigned to objective 

FR FERS 

0 

and subjective measures. 

fr'equip 

100 

EN~ PERS 

0 


EN"EQUIP 

60 


POE 

0 


AMMO 

0 


FEBA 

0 


TIME 

80 


SUB A 

100 


SUB B 

60 


SUB C 

80 


SUB D 

40 


SUB“E 

80 


SUB F 

0 


SUB G 

0 


SUB~H 

0 


SEQ NO 

AEXPT 

Expert subjective scales for COA 1 in 

COA 

1 

balance condition A. 

SSUB A 

5 


SSUB B 

6 


SSUB C 

4 


SSUB D 

7 


SSUB_E 

5 


SEQ NO 

AEXPT 

Expert subjective scales for COA 2 in 

COA" 

2 

balance condition A. 

SSUB A 

8 


SSU8~B 

8 


SSUB"C 

7 


SSUB'D 

6 


SSUB~E 

8 


SEQ NO 

BEXPT 

Expert subjective scales for COA 1 in 

COA" 

1 

balance condition B. 

SSUB A 

8 


SSUB~B 

8 


SSUB“C 

7 


SSUB"D 

6 


SSUB'E 

8 



4-138 





Table 4-3. Data Required by RPTCCOA (Continued) 


DATA BASE 

FIELD 

VALUE 

COAATSC 

SEQ NO 

BEXPT 


COA" 

2 


SSUB A 

5 


SSUB~B 

6 


SSUB~C 

4 


SSUB~D 

7 


SSUB~E 

5 

COAATSC 

SEQ NO 

WEGHT 


sfr~Fers 

1 


SFR~EQUIP 

2 


DESCRIPTION 

Expert subjective scales for COA 2 in 
balance condition B. 


Weight to assign the absolute and 
relative subjective scaling scores. 
SFR PERS is absolute and 
SFR~EQUIP is relative. With the 
current numbers, each score in the 
relative scaling counts twice as much 
as a score in the absolute scale. 


Data Bases . The data bases for the dBASE programs include the dBASE data bases, report 
layouts, form layouts, program files that are called by a program, and queries. Table 4-4 
shows which files are used by each program within the EDDIC Application. 


Table 4-4. EDDIC Application File Usage 


PROGRAM 

DATA BASES 

REPORTS 

FORMS 

PROGRAMS 

QUERIES 

ACDATA 



PERSTYLE 

CHKDATA 


ALLAUTO 

C2 RQST 

MAf» CTRL 
REFltQST 
WINDOW 

C2 RQST 
MAT 5 CTRL 
REF "ftQST 
WINDOW 


GETEXPR 

PRINTSET 


ALLOBS 

TEAMPRF 

TIMELINE 

TEAMPRF 

TIMELINE 


GETEXPR 

PRINTSET 


ALLQUEST 

HMIED 

HMIEDCT 

PERSON 

PERSTYLE 

SITAWARE 

TASKEVAL 

HMIED 

HMIEDCT 

PERSON 

PERSTYLE 

SITAWARE 

STLYDATA 

TASKEVAL 


GETEXPT 

PRINTSET 

PERSTYLE 

ARREPORT 

COAATSC 

ARREPORT 



FRCERPT 

AR_FORCE 

SCFORCE 

SCPOWER 



DSP_UST 



4-139 







Table 4-4. EDDIC Application File Usage (Continued) 


PROGRAM 

DATA BASES 

REPORTS 

FORMS 

PROGRAMS 

COAATPRT 

COAATM1 

COAATM1 

COAOBJ 

COASUB 


GETEXPR 

PRINTSET 

DBASE_LD 

C2 RQST 
C0AATM1 
COAATM2 
COAATSC 
COAATWT 

CTL RQST 





ED EUT 

ED~MAP 

ED'WIND 

EDC2RQ 

EDCOTM1 

EDCOTM2 

EDCOTSC 

EDCOTWT 

EDCTLRQ 

EDNEWC2 

EDREFRQ 

EDSTBLTO 

EDSTCMDL 

EDSTCMLC 

EDSTNWCM 

EDSTOPTO 

EDSTRQST 

EDSTULOC 

LUT CTRL 

MAFCTRL 

NEW C2 

REF "ftQST 

SITCTMDEL 

sitcmloc 

SITNEWCM 

SITRQST 

SITTASKO 

sniiLOC 

WINDOW 

DELACOA COAATM1 DELW1ND 

COAATM2 
COAATSC 
COAATWT 

DELAOBS TEAMPRG DELWIND 

TIMEUNE 


QUERIES 

COAATM2 

COAOBJ 

COASUB 


4-140 







Table 4-4. EDDIC Application File Usage (Continued) 

PROGRAM DATA BASES REPORTS FORMS PROGRAMS QUERj.ES 

DELAQST HMIED DELWIND 

HMIEDCT 
PERSON 
PERS7YLE 
SITAWARE 
TASKEVAL 
WORKASMT 

DELASCR SCCNOP DELWIND 

SCCRTEVT 
SCFACTS 
SCJUST 

DELAUTO C2 RQST DELWIND 

COAATM1 
COAATM2 
COAATSC 
COAATWT 
CTLRQST 
LUT CTRL 
MAP" CTRL 
NEW" C2 
REF TlQST 

sitCMdel 

SITCMLOC 

SITNEWCM 

SITRQST 

SriTASKO 

SITULOC 

WINDOW 





Table 4-4. EDDIC Application File Usage (Continued) 

PROGRAM DATA BASES REPORTS FORMS PROGRAMS QUERIES 

DELEXPR C2 RQST DELWIND 

CCAB 
COAATM1 
COAATM2 
COAATSC 
COAATWT 
CTL RQST 
HMlED 
HMIEDCT 
LUT CTRL 
MAP CTRL 
NEW C2 
PERSON 
PERSTYLE 
REF RQST 

sitaWare 

SITCMDEL 

SrTCMLOC 

SITNEWCM 

SITRQST 

SITTASKO 

situloc 

TASKEVAL 

TEAMPRF 

T1MEUNE 

WINDOW 

WORKASMT 


EDDIC_LD BUNXREF SESSION ED TRANS 

CMXREF 
CTL XREF 
HLP~ XREF 
HSrXREF 
REF"XREF 

rumxref 


4-142 





PROGRAM 

ED_TRANS 


IDENTCE 

PACK 


Table 4-4. EDDIC Application File Usage (Continued) 

DATA BASES REPORTS FORMS PROGRAMS Q UE RIES 

BUNXREF 

CMXREF 

CTL XREF 

ED EUT 

ED'MAP 

ED”STBLTO 

ED'WIND 

EDC2RQ 

EDCOTM1 

EDCOTM2 

EDCOTSC 

EDCOTWT 

EDCTLRQ 

EDNEWC2 

EDREFRQ 

EDSTCMDL 

EDSTCMLC 

EDSTNWCM 

EDSTOPTO 

EDSTRQST 

EDSTULOC 

HLP XREF 

HST_XREF 

REF XREF 

RUltfCREF 

SCCRTEVT GETEXPR 

C2RQST 

COAATM1 

COAATM2 

COAATSC 

COAATWT 

CTL RQST 

LUT~CTRL 

MAP CTRL 

NEW C2 

refRqst 

SITCMDEL 

sitcmloc 

srrNEWCM 

SITRQST 

SrTTASKO 

srruLOC 

WINDOW 


4-143 





r 


Table 4-4. EDDIC Application File Usage (Continued) 


PROGRAM 

DATA BASES 

REPORTS 

FORMS 

PROGRAMS 

QUERIES 

RPTCCOA 

COAATSC 

COAATWT 




COAOBJ 

COASUB 

RPTCNOP 

SCCNOP 





RPTFACT 

SCFACTS 





RPTJUST 

SCJUST 





RPTSCALL 




ARREPORT 

RPTCCOA 

RPTCNOP 

RPTFACT 

RPTJUST 

RPTSCCE 

RPTWGAM 


RPTSCCE 

COAATSC 

SCCRTEVT 

SCCRTEVT 




RPTWGAM 

COAATM2 

COAATSC 






4.4.2 EDDIC EX 

Abstract . Exports the scenario data base to ASCII files. 

Major Capability . This program exports the scenario data (maintained by the SCENARIO 
program) to ASCII files for the purpose of moving the files to the Sun fileserver. 

Special Instructions . This program was developed in dBASE IV because dBASE III Plus does 
not allow printing to a file. 

The scenario data base files must be copied into EXPORT directory before running 
this program. 

The following section describes the EDDIC scenario export application. dBASE 
applications consist of a group of menus chained together. Each item of a menu is assigned 
an action arid can have a data base assigned to it. The following menus exist in the EDDIC 
scenario export application. 



4-144 



Item # 1 


2 


3 


4 


5 


UPDATE DAY EXPORT ITEM EXPORT BLUEFOR EXPORT OPFOR EXIT 


ITEM 

NO. 

1 

2 

3 

4 

5 


ITEM 

NO. 

1 

2 

3 

4 

5 

6 
7 


Menu Name: EDDIC 
Embedded Code Before: No 


Data Base: DAY 

Embedded Code After: No 


ACTION 


EMBEDDED CODE 

DATA BASE BEFORE AFTER 


Browse File 
Open Menu: EX ITEM 
Run Program: EXJ3ALL 
Run Program: EX RALL 
Quit 


No 

No 

No 

No 

No 

No 

No 

No 

No 

No 


ITEM# 

1 

2 

3 

4 

5 

6 
7 


BLUEFOR TASK ORG 
BLUEFOR EQUIP 
BLUEFOR AMMO 
BLUEFOR PERS 
BLUEFOR FUEL 
OPFOR TASK ORG 
OPFOR EQUIP 


Menu Name: EXJTEM 
Embedded Code Before: No 


Data Base: 

Embedded Code After: No 


ACTION 


EMBEDDED CODE 

DATA BASE BEFORE AFTER 


Run Program: EX_BTSK 
Run Program: EX~BEQP 
Run Program: EX~BAMM 
Run Program: EX~B p ERS 
Run Program: EX~BFUL 
Run Program: EX'RTSK 
Run Program: EX'REQP 


No 

No 

No 

No 

No 

No 

No 

No 

No 

No 

No 

No 

No 

No 


Data Bases . The data bases for the dBASE programs include the dBASE data bases, report 
layouts, form layouts, program files that are called by a program, and queries. 

Table 4-5 shows which files are used by each program within the EDDIC Export Application. 


4*145 




Table 4-5. EDDIC Export Application File Usage 


PROGRAM 

EX_BALL 

EX_BAMM 

EX_BEQP 

EX_BFUL 

EXBLOC 

EX_BPRS 

EXBTSK 

EX_CM 

EX_OPLAN 

EX_RALL 

EX_REQP 


DATA BASES REPORTS FORMS PROGRAMS QUERIES 

EX BAMM 

EX'BEQP 

EX BFUL 

EX'BLOC 

EX'BPRS 

EX“BTSK 


BASEUNIT 

COMPANY1 

DAY 

BASEUNIT 

COMPANY1 

DAY 

BASEUNIT 

COMPANY1 

DAY 

BATTAL1 PRNTLOC 

BRIGADE1 

COMPANY1 

DAY 

DIVISN1 

BASEUNIT 

COMPANY1 

DAY 

BATTAL1 PRNTASK 

BRIGADE1 

COMPANY1 

DAY 

DIVISNt 

CNTLMSR1 

DAY 

OPLAN 

EX REQP 
EX'RTSK 
EX~RUNIT 

DAY 

RBASEUNI 

RCOMPNY1 


4-146 







Table 4-5. EDD1C Export Application File Usage (Continued) 


PROGRAM DATA BASES REPORTS FORMS PROGRAMS QUERIES 

EX_RTSK DAY 

EX RUNIT DAY 

RCOMPNY1 


4.4.3 Scenario 

Abstract . Maintains the scenario data base. 

Major Capability . All EDD1C scenario data except the following can be updated and printed 
with this program: 

- OPFOR Task Organization 

- OPFOR Unit Locations 

- OP FOR Unit Status 

Special Instructions . This program can be executed in either dBASE III Plus or dBASE IV. It 
executes much faster in dBASE IV. 

Data Bases . The data bases for the dBASE programs include the dBASE data bases, report 
layouts, form layouts, program files that are called by a program, and queries. Table 4-6 
shows which files are used by each program within the EDDIC Scenario Application. 


Table 4-6. EDDIC Scenario Application File Usage 


PROGRAM 

DATA BASES 

REPORTS 

FORMS 

PROGRAMS QUERIES 

ADJUST 

DAY 

PERDISP 



OPENLR 

OPEN 

PERSTRNG 

AMOUNT 

READONLY 




BASEUPDT 



BASELOOK 

BASEUNIT 

BSREPORT 

BDETASK 



BDEADD 

BDEFORM 


BNTASK 



BNADD 

BNFORM 


CNTL_MSR 

CNTLMSR1 

CNTL_MSR 


READONLY 


4-147 


Table 4-6. EDDIC Scenario Application File Usage (Continued) 


PROGRAM 

DATA BASES 

REPORTS 

FORMS 

PROGRAMS 

COUPDATE 



COFORM 


DAY 

DAY 

DAY 

DAY 


COPYDAY 




OPENDB 

DAYSEL 

DAY 




DIVTASK 



DIVADD 

DIVFORM 


OPEN 

8ASEUN1T 

BATTAL1 

BRIGADE1 

COMPANY1 

DIVISN1 

RBASEUNI 

RBATTL1 

RBRIGAD1 

RCOMPNY1 

RDIVISN1 




OPENDB 

BASEUNIT 

BATTAL1 

BRIGADE1 

COMPANY1 

DIVISN1 

RBASEUNI 

RBATTL1 

RBRIGAD1 

RCOMPNY1 

RDIVISN1 




OPENLR 

LOSSRATE 




OPLAN 

OPLAN 

OPLAN 

OPLAN 


PERCENT 

PERCENT 



READONLY 

PERSTRNG 

BDEDISP 

PERDISP 

PERDISP 


OPENLR 

READONLY 


4-148 






f 


Table 4-6. EDDiC Scenario Application File Usage (Con'inued) 


PROGRAM 

DATA BASES 

REPORTS 

FORMS 

PROGRAMS QUERIES 

SCENARIO 




ADJUST 

AMOUNT 

BASEUPDT 

CNTL MSR 

DAY “ 

DAYCOPY 

DAYSEL 

INIT 

OPENDB 

OPLAN 

PERCENT 

STRNGRPT 

TASKORG 

STRNGRPT 

EQDISPLA 



BNSTRNG 

COREPORT 

FRNTPC 

STRENGTH 

STREPORT 

TASKORG 




BDETASK 

BNTASK 

COUPDATE 

DIVTASK 

PRNSTAT 

PRNTASK 

READONLY 

VERTASK 

VERTASK 

VERTASK 

VERTASK 



4-149 






APPENDIX A - Ada UTILITY SPECIFICATIONS 


This appendix contains the Ada package specifications for the EDDIC 


utility packages, 
categories: 

The appendix is divided into the following major utility 

COMMON 

- 

Ada types that are available throughout the EDDic system. 

UED 

- 

General EDDIC utilities such as math functions, string 
functions, and list and queue managers. 

UFM 

- 

Form Manager utilities 

UIN 

- 

Internet communications utilities 

UIW 

- 

color image utilities 

UTM 

- 

Tactical map utilities 

UUX 

- 

Unix command utilities 

UWN 

- 

Window display and control utilities 


A—1 







common utility Package Specif i cationa. 

The following package apecifications are contained in the common function 

CDB C2_PR0DUCT_DB 
CTL~CONTROL_DB~ 

FDB~REFERENCE_DB 

HDB_HELP_DB 

LUT_SYSTEM 

MSGMESSAGE 

SDB_SITUATION_DB 

SYSTEM_PACKAGE 

TSTM DB 


A-2 


■ 



—cpc package specification name: CDB_c2_PRODUCT_DB 

—cpc description: The CDB_C2_PRODUCT_DB cpc describes the objects that are used 

— for interacting with the c2 product databases. 

—cpc design notes: 

—cpc package author: Bruce Packard 

— Science Applications International Corporation 

424 Delaware, Suite C3 

Leavenworth, XS 66048 


with SYSTEMJPACKAGE; use SYSTEM_PACKAGE; 

package CDB_C2_PRODUCT_DB is 

— Number of records in header and product database 
subtype CDB_NUM_HEADER_REC is SYS_DB_SIZE range 0..5000; 
subtype CDB_NUM_PRODUCT_REC is SYS_DB_SIZE range 0..20000; 

— Product Description record 
type CDB_PRODUCT_DESC_TYPE is 

record 

CDB_PRODUCT_CAT : SYS_PRODUCT_CAT; 

CDB_PRODUCT_HDR_START : CDB_NUM_HEADER_REC; 

CDB_PRODUCT_HDR END : CDB_NOM~HEADER_REC; 

CDBPRODUCTjSTART : CDB_NUM~PRODUCT_REC; 

CDB_PRODUCT_END : CDB_NUM~PRODUCT_REC; 

CDB_PRODUCT_DATE : SYS_DATE_TIME; 

CDB_PRODUCT_OPPLAN : SYS_OPPLAN; 

end record; 

CDB_PRODUCT_DESC_REC : CDB_PRODUCT_DESC_TYPE; 

— Report Header record 

CDB__HEADER_SIZE : SYS_HEADER_LENGTH :» 252; 

type CDB_HEADER_TYPE is 
record 

CDB_HEAD_NUMBER_CHAR : SYS_HEADER_LENGTH range 0.. 

CDB_HEADER_SIZE; 

CDB_HEADER_TEXT : String (1..CDB_nEADER_SIZE); 

end record; 

type CDB_HEADER_POXNT is access CDB_HEADER_TYPE; 

CDB_HEADER_REC : CDB_HEAOErJpOINT new CDB_HEADER_TYPE; 

— Report record 

CDB_PRODUCT_SIZE : SYS_PRODUCT_LENGTB :- 252; 

type CDB_PRODUCT_TYPE is 

record 

CDB_REPT_NUMBER CHAR : SYS_PRODUCT_LENGTB range 0.. 

” CDB_PRODUCT~SIZE; 

CDB_PRODUCT_TEXT : String {1..CDB_PRODUCT_SIZE); 

end record; 


A-3 








type COB PRODUCT POINT is access CDB_PRODUCT_TYPE; 

CDB_PRODUCT_R£C ” : CDB_PRODUCT_POlfNT s* new CDB_PRODUCT_TYPE 

— c2 Product List 

subtype COB NUM product is SYS_WALKING_CELL range 0..800; 

subtype CDB NUM~BUILD is SYS_WALKING~CELL range 0..100; 

subtype CDB~NUM VW_MENU is SYS_WALXING”MENU range 0..250; 

subtype CDb2nUM _ BL~MEKU is SYS~WALKING~MENU range 0..50; 


type CDB_PROD_LIST_TYPE is array (CDB_NUM_PRODUCT range <>) of 
CDB_NUM_PRODUCT; 

type CDB_PROD_LIST_POINT is access CDB_PROD_LIST_TYPE; 

subtype CDB_MSG_NAM£_LEN is INTEGER range 1..80; 

subtype CDB_PART_NAME_LEN is INTEGER range 1..10; 

— summary message record 

subtype CDB_MSG_NAME_TEXT is string (CDB__MSG_NAME_LEN); 

subtype CDB_PART_NAME_TEXT is String (CDB_PART_NAKE_LEN); 

type CDB_ROUTING_ARRAY is array (SYS_PARTICIPANTS) Of BOOLEAN; 

type CDB_SUM_MESSAGE_REC is 
record 

CDB_C2_FROM : CDB_PART_NAME_TEXT; 

CDB_C2_TO S CDB_ROUTING__ARRAY; 

CDB__C2_SUBJECT s CDB~MSG_NAM£_TEXT; 

CDB~C2_DAY { SYS_DAYT 

CDB~C2_TIME s SYS_TIKE; 

CDB_C2_PR0DUCT s CDB~NUM_PRODUCT; 

end record; 

type CDB_SUM_MESSAGE_POINT is access CDB_SUM_MESSAGE_REC; 

— Message Log record 

type CDB_LOG_LIMIT is range 0..100; 
type CDB_MESSAGE_LOG is array (CDB_LOG_LIMIT) of 
CDB_SUM_MESSAGE_REC; 

type CDB_MESSAGE_LOG_POINT is access CDB_MESSAGE_LOG; 

type CDB_MESSAGE_LOG_REC is 
record 

CDB_COUNT 1 CDB_LOG_LIMIT; 

CDB~LIST J CDB_MESSAGE__LOG; 

end record; 

— Participant Record 
type CDB_PART_REC is 

record 

CDB_TEXT » CDB_PART_NAME_TEXT; 

CDB~PART » SYS“PARTICIPANTS; 

end record; 

- List of participants that a message can be sent to 

subtype CDB PART LIMIT is SYS MENU_BUTTON_INDEX range 0..4; 
type CDB PART ARRAY is array (CDB_PART__LIMIT) Of CDB_PART_REC; 


A-4 






type CDB_PARTICIPANT_POINT is access CDB_PART ARRAY 
end CDB_C2_PRODUCT DB; 


A-5 






—cpc package specification name: CTL_CONTROL_DB 

—cpc description; The CTL_CONTROL_DB cpc describes the objects that are used 

— for interacting~with the experiment control databases. 

—cpc design notes: 

—cpc package author: Bruce Packard 

— Science Applications international Corporation 

424 Delaware, suite C3 

— Leavenworth, KS 66048 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

package CTL_CONTROL_DB is 

— Number of records in control database 

subtype CTL_NUM_PRODUCT_REC is SYS_DB_SXZE range 0..10000; 

— Product Description record 

type CTL_PRODUCT_DESC_TYPE is 

record 

CTL_PRODUCT_TYPE : SYS_PRODUCT; 

CTL_PRODUCT_START J CTL_NUM PRODUCT_REC; 

CTL_PRODUCT_END : CTL_NUMJ»RODUCTJREC; 

CTL_PRODUCT_DATE : SYS_DATE_TIHE; ~ 

end record; ” 

CTL_PRODUCT_DESC_REC : CTL_PRODUCT_DESC_TYPE; 

— Report record 

CTL_PRODUCT_SIZE : SYS_PRODUCT_LENGTH :» 252; 

type CTL_PRODUCT_TYPE is 
record 

CTL_REPT_NUMBER_CHAR : SYS_PRODUCT__LENGTH range 0.. 

CTL_PRODUCT~SIZE; 

CTL_PRODUCT_TEXT : string (1..CTL_PRODUCT_SIZE); 

end record; _ 

type CTL w PRODUCT_PO!NT is access CTL_PRODUCT_TYPE; 

CTL_PRODUCT_REC : CTL_PRODUCT_POINT :« new CTL_PRODUCT_TYPE; 

— Experiment control Product List 

subtype CTL_NUM_PRODUCT is SYS WALKING_CELL range 0..800; 

subtype CTL_NUM_VW_MENU is SYS~walking“henu range 0..50; 


type CTL_PROD_LIST_TYPE is array <CTL_NUM product range <>) of 
CTL~NUM_PRODUCT; 

type CTL_PROD_LIST_POXNT is access CTL_PROD_LIST_TYPE; 

— Experiment control routing record 

type CTL_ROUTING_ARRAY is array (SYS_PARTZCZPANTS) of BOOLEAN; 


A-6 






type CTL_ROUTING_R£C is 
record 

CTL_PRODUCT s CTL_NUM_PRODUCT; 

CTL~PRODUCT_TYPE : SYS~PRODUCT; 

CTL__LIST s CTL_ROUTING_ARRAY; 

end record; 

type CTL_ROUTING_POINT is access CTL_ROUTING_R£C; 

— Participant Record 

subtype CTL_PART_NAHE_LEN is INTEGER range 1..10; 

subtype CTL~PART_NAME~TEXT is String (CTL_PART_NAME_LEN); 
type CTL_PART_REC is 
record 

CTL_TEXT : CTL PART_NAME_TEXT; 

CTL_PART s SYS~PARTICIPANTS; 

end record; 

— List of participants that a message can be sent to 

subtype CTL_PART_LIMIT is SYS_MENU_BUTTON_INDEX range 0..4; 
type CTL_PART_ARRAY is array <CTL_PART_LIMIT) of 
CTL_PART_REC; 

type CTL_PARTICIPANT_POINT is access CTL_PART_ARRAY; 
end CTL CONTROL DB; 


A-7 



—cpc package specification name: FDB_R£FERENCE_DB 

—cpc description: The FDB_REFERENCE_DB cpc describes the objects that are used 

— for interacting with the reference databases. 

—cpc design notes: 

—cpc package author: Bruce Packard 

— Science Applications International Corporation 

424 Delaware, Suite C3 

— Leavenworth, KS 66048 


with SYS TEM__PA<_ S AGE; use SYSTEMJPACKAGE; 
package FDB_R£F£RENCE_DB is 

— Number of records in header and reference product database 

subtype FDB_NUM_HEADER_REC is SYS_DB_SIZE range 0..5000; 

subtype FDB_NUM_PRODUCT_REC is SYS_DB_SIZE range 0..20000; 

— Product Description record 
type FDB_PRODUCT_DESC_TYPE is 

record 

FDB_PRODUCT_CAT : 

FDB_PRODUCT_HDR_START : 

FDB_PRODUCT_HDR_END : 

FDB_PRODUCT_START : 

FDB_PRODUCT_END : 

end record; 

FDB_PRODUCT_DESC_REC : FDB__PRODUCT_DESC_TYPE; 

— Report Header record 

FDB_HEADER_SIZE : SYS_HEADER_LENGTH :* 252; 

type FDB_HEADER_TYPE is 
record 

FDB_HEAD_NUMBER_CHAR 

FDB_HEADER_TEXT 
end record; 

type FDB_HEADER_POINT is access FDB_HEADER_TYPE; 

FDB__HEADER_REC : FDB_HEADER_?OINT :» new FDB_HEADER_TYPE; 

— Report record 

FDB_PRODUCT_SIZE : SYS_PRODUCT_LEHGTH 252; 

type FDB_PRODUCT_TYPE is 
record 

FDB_REPT_NUMBER_CHAR : SYS_PRODUCT_LENGTH range 0.. 

~ FDB~PRODUCT~SIZE; 

FDB_PRODUCT_TEXT : string (1.7 fDB_PRODUCT_SIZE); 

end record; 


: SYS_HEADER_LENGTH range 0.. 

FDB_HEADER_SIZE; 

: string (1..FDB_HEADER_SIzE); 


SYS__PRODUCT_CAT ; 
FDB3»tm_HEADER_REC; 
FDB~NUM_HEADER~REC; 
FDB~NUM~PRODUCT_REC; 
FDB~NUM~PRODUCT REC; 


A-8 


type FDB_PRODUCT_POINT is access FDB PRODUCT TYPE? 

FDB_PRODUCT_REC “ : FDB_PRODUCT_PoYnT *- new FDB_PRODUCT_TYPE 

— Reference Product List 

subtype FDB_NUM_PRODUCT is sYs WALKING CELL range 0 .. 300 ; 

subtype FDB~NUM~MENU is SYS_WALXING~MENU range 0..75; 

type FDB_PROD_LIST_TYPE is array (SYS WALKING CELL range <>) of 
FDB_NUM_PRODUCT; 

type FDB_PROD_LIST_POINT is access FDB__PROD_LIST_TYPE; 
end FDB_REFERENCE DB; 


A-9 


—cpc package specification name: 8DB_BELP_DB 

—cpc description: The HDB_help_DB cpc describes the objects that are used 

— for interacting with the help databases. 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications International Corporation 
424 Delaware, Suite C3 

— Leavenworth, KS £6048 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 
package HDB_HELP_DL is 

— Number of records in header and reference product database 
subtype BDB_NUM_PRODUCT_REC is SYS_DB_SIZE range 0..20000; 

— Product Description record 
type BDB_PRODUCT_DESC_TYPE is 

record 

HDB_PRODUCT_CAT : SYS_PRODUCT_CAT; 

HDB_PRODUCT_START : HDB_NUM_PRODUCT_R£C; 

HDB_PRODUCT_END : BDB_NUM_PRODUCT_REC; 

end record; ”” 

BDB_PRODUCT_DESC_REC : BDB_PRODUCT_DESC_TYPE; 

— Report record 

BDB_PRODUCT_SIZE : SYS_PRODOCT_LENGTB :« 252; 

type BDB_PRODUCT_TYPE is 
record 

BDB_REPT_NUMBER_CHAR : SYS PRODUCT_LENGTH range 0.. 

BDB~PRODUCT_SIZE; 

BDBJPRODUCTJTEXT : String (1..BDB_PRODUCT_SIZE); 

end record; 

type BDB_PRODUCT_POINT is access BDB_PRODUCT_TYPE; 

BDB_PRODUCT_REC : BDB_PRODUCT_POINT new HDB_PRODUCT_TYPE 

— Belp Product List 

subtype BDB_NUM_PRODUCT is SYS_WALKING CELL range 0..300; 

subtype HDB_NUM_MENU is SYS_WALKINg”henu range 0..75; 

type BDB_PROD_LIST_TYPE is array (SYS_WALXING CELL range <>) of 
HDB_NUM_PRODUCT; 

type »DB_PROD_LIST_POINT is access BDB_PROD_LIST_TYPE; 
end BDB BELP DB; 


A-10 


—cpc package specification name: LUT_SYSTEM 

—cpc description: Defines types and objects that are common to the color 

— lookup table system. 

—cpc design notes: 

—cpc package author: Bruce Packard 

— science Applications International Corporation 

— 424 Delaware, Suite C3 

— Leavenworth, KS 66048 

With SYSTEMJPACKAGE; use SYSTEM__PACKAGE; 

package LUTjSYSTEM is 

— Define the color tables 
type LUT_RGB is 

record 

LUTJRED 
LUT_GREEN 
LUT_8LUE 
end record; 

— Define the color look up table indexes 

subtype LUT_BACK_LUT_INDEX is SYS_COLOR_TABLE range 2..30; 

subtype LUT_GEN_LUT_INDEX is SYS~COLOR_TABLE range 31..38; 

subtype LUT_HYDRO_LUT_INDEX is SYS_COLOR_TABLE range 39..41; 

subtype LUT HISC_LUT_INDEX is SYS~COLOR~TABLE range 52..61; 

subtype LUT~ROAD~LUT INDEX is SYS~COLOR_TABLE range 45..51; 

subtype LUT“URBAN LUT INDEX is SYS~COLOR_TABLE range 42..44; 

subtype LUT_CONT__LUT_INDEX is SYS~COLOR_TABLE range 63..63; 

subtype LUT_GRID~LUT_INDEX is SYS~COLOR_TABLE range 62..62; 

subtype LUT_RED_LUT_INDEX is SYS_COLOR_TABLE range 64..127; 

subtype LUT_BLUE_LUT_INDEX is SYS~COLOR_TABLE range 128..255; 

— Type and pointer for lookup table arrays 

type LUT_ARRAY is array (SYS_COLOR_TABLE range <>) of LUT_RGB; 
type LUT_POINT is access LUT~ARRAY; 

— Color table for the background 

LUT_BACK_COLOR : LUT_POINT :■ new LUT_ARRAY (LUT_BACK_LUT_INDEX); 

LUT~CONT_COLOR : LUT_P0INT :» new LUT_ARRAY (LUT_CONT_LUT_INDEX); 

LUT_GRID_COLOR : LUT~POINT new LUT~ARRAY (LUT_GRID_LUT_INDEX); 

LUTjGENjCOLOR ; LUT~POINT new LUT~ARRAY (LUT_GEN_LUT_INDEX) ; 

— Color Tables with highlighted colors on 

LUT_HYDRO_COLOR_ON « LUT_POINT :- new LUT ARRAY (LUT HYDRO LUT_INDEX) ; 

LUT~MISC_COLOR_ON j LUT~POINT :- new LUT~ARRAY (LUT~MISC_LUT_INDEX); 

LUT~ROAD_COLOR~ON : LUT~POINT :• new LUT_ARRAY (LUT_ROAD_LUT_INDEX) ; 

LUT~URBAN_COLOR_ON : LUT_POINT :- new LUT~ARRAY (LUt”uRBAN_LUT_INDEX) ; 

— Color Tables with highlighted colors off 

LUT_HYDRO_COLOR_OFF : LUT_POINT :■ new LUT ARRAY (LUT_HYDRO_LUT_INDEX) ; 

LUT~MISC_COLOR_OPP t LUT~POINT :■ new LUT~ARRAY (LUT_MISC_LUT_INDEX) ; 

LUT~ROAD~COLOR OFF I LUT~POINT :- new LUT ARRAY (LUT~ROAD~LUT_INDEX) ; 


SYS COLOR; 
SYS~COLOR; 
SYS COLOR; 


A-11 



LUT_URBAN_COLOR_OFF : LUTJPOINT :» new LUT_ARRAY (LUT_URBAN_LUT_INDEX ); 

— Color tables of the overlay planes 

LUT_R£D_OVERLAY COLOR s LUT_POINT !- new LUT_ARRAY (LUT_RED_LUT_INDEX); 
LUT _ BLUE OVERLAY COLOR * LUT~POINT t- new LUT ARRAY (LUT~BLUE_LUT_INDEX); 



— Define the EDDIC General colors 


lut_color_cyan 


SYS_COLOR 

m 

31; 

LUT COLOR GREED 

• 

• 

SYS COLOR 

m 

32; 

LUT~COLOR VIOLET 

: 

SYS COLOR 

■ 

33; 

LUT COLOR ORANGE 

: 

SYS COLOR 

■ 

34; 

LUT COLOR AMBER 

• 

• 

SYS COLOR 


35; 

LUT COLOR BROWN 

: 

SYS COLOR 

* 

36; 

LUT COLOR WHITE 

: 

SYS“C0L0R 

ae 

37; 

LUT_COLOR_YELLOW 

• 

• 

SYS _ COLOR 

= 

38; 

LUT_COLOR BLACK 

: 

SYS COLOR 

- 

62; 


— Define the depth of the digital map image 

LUT LUT DEPTH : SYS BITS DEEP := 8; 


— Color lookup table file names 

type LUT_BACKGROUND is (LUT_NONE, LUT_SHADE_VEG); 
type lut_count_limit is range 0..1; 

LUT_HILITE_LUT : array (LUT_COUNT_LIMIT) of 

Btring (SYS_NAME_SIZE); 

LUTJJNHILITEJLUT J array (LUT_COUHT_LIMIT) of 

string (SYS_NAME_SIZE); 

Definition of the color look-up table update 
type LUT_UPDATE_R£CORD is 
record 

LUT_BACK_TYPE s LUT_BACKGROUND; 

LUT~BACK J SYS~LUT_STATUS; 

LUT_ROAD : SYS~LUT~STATUS; 

LUT~WATER : SYS _ LUT _ STATUS; 


A-12 









LUT_URBAN s SYS_LUT_STATUS; 

LUT_MISC s SYS_LUT~STATUS; 

end record; 

— current status of the lookup table 

LUT_CURR_STATUS : LUT_UPDATE_RECORD; 

— Tactical Map Attribute record - Used to record changes in the nap display 
type LUT_MAP_ATTRIBUTES is 

record 


MAPJ3ACK TYPE 


s SYS MAP_BACKGROUND 

MAP_MAP_SCALE 


SYS MAP SCALES; 

MAP_GRID_STATUS 


BOOLEAN; 

MAP_CONTOUR_STATUS 


BOOLEAN; 

MAP_CENTER_X 


SY S_COORDINATE; 

MAP_CENTER_Y 


SYS COORDINATE; 

BLUEFOR_UNIT_DIV 


BOOLEAN; 

BLUEFOR~UNIT_BDE 


BOOLEAN; 

BLUEFOR_UNIT_RGMT 


BOOLEAN; 

BLUEFOR UNIT BN 


BOOLEAN; 

BLU E F OR_UNIT_CO 


BOOLEAN; 

BLUEFOR_UNIT_CBT_COMMIT 


BOOLEAN; 

BLUEFOR_UNIT~CS REINF 


BOOLEAN; 

BLUEFOR_UNIT_CSS_ARTIL 


BOOLEAN; 

BLUEFOR UNIT NAME 


BOOLEAN; 

BLUEFOR UNIT SYMBOL 


BOOLEAN; 

OPFOR UNIT DIV 


BOOLEAN; 

OPFOR UNIT BDE 


BOOLEAN; 

OPFOR UNIT RGMT 


BOOLEAN; 

OPrOR UNIT BN 


BOOLEAN; 

OPFOR_UNIT_CO 


BOOLEAN; 

OPFOR_UNIT_CBT_COMMIT 


BOOLEAN; 

OPFOR_UNIT_CS_REINF 


BOOLEAN; 

OPFOR_UNIT_CSS_ARTIL 


BOOLEAN; 

OPFOR_UNIT_NAME 


BOOLEAN; 

OPFOR_UNIT_SYMBOL 


BOOLEAN; 

CM_BLUE EAC 


BOOLEAN; 

CM_BLUE CORP 

: 

BOOLEAN; 

CM_BLUE_DIV 


BOOLEAN; 

CM_BLUEJBDE 


BOOLEAN; 

CM_BLUE_BN 


BOOLEAN; 

CM_BLUE__CO 


BOOLEAN; 

CM_BLUE~POINT 


BOOLEAN; 

CM~BLUE~LINE 

: 

BOOLEAN; 

CM_BLUE~AREA 

: 

BOOLEAN; 

CM_BLUE~ROUTE 

t 

BOOLEAN; 

CM_BLUE__CROSS ING 

: 

BOOLEAN; 

CM_BLUE~FIRE_PLAN 

: 

BOOLEAN; 

cm_blue~map_feat 

i 

BOOLEAN; 

CM_OPFOR ARMY 

s 

BOOLEAN; 

CM_OPFOR DIV 

t 

BOOLEAN; 

CM_OPFOR~RGMT 

t 

BOOLEAN; 

CM~OPFOR~BN 

t 

BOOLEAN; 

CM~CPFOR~CO 

: 

BOOLEAN; 

CM~OPFOR~POINT 

• 

• 

BOOLEAN; 

CM~OPFOR LINE 

i 

BOOLEAN; 


A-13 












CM_OPFOR_AREA 

cm“opfor~route 

CH_OPFOR~CROSSING 

cm_opfor“fire_plan 

CM_OPFOR~MAP_FEAT 
end record; " ~ 

end LUT__SYSTEM; 


BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 


A-14 






—cpc package specification name: MSG_MESSAGE 

—cpc description: The MSG_MESSAGE package contains the definitions of all 

messages that are transferred between process in EDDIC. 

—cpc design notes: 

—cpc package author: Bruce Packard 

— Science Applications International Corporation 

— 424 Delaware, Suite C3 

Leavenworth, KS 66048 


with SYSTEMJPACKAGE; use SYSTEM_PACKAGE; 
with SDB_SITUATION_DB; use SDB_SITUATION_DB; 
with CDB_C2_PRODUCT_DB; use CDB_C2_PRODUCT_DB; 
with FDB~REFERENCE_DB; use FDB“REFERENCE_DB; 
with HDB_HELP_DB; use HDB_HELP_DB; 

with CTL_CONTROL_DB; use CTL_CONTROL_DB; 

with TSTM_DB; use TSTM_DB; 

With LUT_SYSTEM; use LUT_SYSTEM; 

with CALENDAR; 

package MSG_MESSAGE is 

— EDDIC message length 

type MSG_MESSAGE_LEN is range 0..32576; 

for MSG_MESSAGE_LEN'SIZE use 4*SYS_BITS_IN_BYTE; 

type HSG_MESSAGES is (MSG_IGNORE, 

MSG_TEXT_BUFFER, MSG_HEADER_BUFFER, MSG_REQUEST, 
HSG_LUT_UPDATE, MSG_CREATE_WINDOW, MSG_TERM_WINDOW, 
MSG_STATION_UP, MSG~CONTROL_ROUTING, MSG_MENU_TREE, 
MSG_CONTROL “PRODUCTS, MSG_CONTROL_PART_LIST, 
MSG_REFERENCE_PRODUCTS, MSG_C2_PRODUCTS,MSG_C2_MESSAGE, 
MSG_MESSAGE_LOG, MSG_NEW_OPPLAN, MSG_OPPLAN_LIST, 

MSG_C2_PART_L1ST, MSG_HELP_PRODUCTS, MSGjSDJREQUEST, 
MSG_AMMO_AUTH, MSG AMMO_ON_HAND, MSG_EQUIP_AUTH, 
MSG~EQUIP_OPER, MSG PERSONNEL, MSG FUEL, MSG_LOCATION, 
MSG_ALL_LOCATIONS, MSG_AMMO_UPDATe7 MSG_EQUIP UPDATE, 
MSG_PERS_UPDATE, MSG_FUEL UPDATE, MSG LOC_UPDATE, 
MSG~ACTIVITY_UPDATE, MSG_MISSION UPDATE, 

MSGJR£INFORCE_UPDATE, MSG_STRENGTH_UPDATE, 
MSG7BLUE70R_STATUS, MSG_BLUEFOR TASK_ORG, 

hsg7blue_task_org_update , 
msg7opfor_status,“msg_opfor task org, 
msg7opforjtask_org update, “ 
msg7control_measure, MSG_CNTRL_MSR_ADD, 

msg7cntrl_msr_point, msg7cntrl7foint_add, 
msgjcntkl^msr^chgjwjc, msg_cntrl msr7chg_stat, 
msg^cntrl^msr^chg^ff, msg cntrl“msr7del7 

MSGJDBSTACLE , “mSG^OBSTACLE^ADD , “ 

MSGJOBSTACLE CHG LOC, MSG OBSTACLE CHG STAT, 
MSGJ3BSTACLE3cHG_EFF, MSG^OBSTACLE^DEL, 


A-15 







MSG_TSTM_HATRIX, MSG_TSTM_COL_FBACK, 
MSG~TSTM_ROW_FBACK, MSG TSTM_OCOKA_FBACK, 
MSGJTSTM^COAJFBACK, MSG~TS TM_MATRIX_SAVE, 
MSG~TSTM~INIT_INSTR, MSG_TSTM_NEW_PHASE, 
MSG~EC_ROUTER_BUFFER, MSG_RF_ROUTER_BUFF, 
MSG~C2_ROUTER~BUFF, MSG_SD ROUTER_BUFFER, 
MSG_WINDOW_OPEN, MSG_WINDOW_CLOSE, 

MSG~CONN£CT, MSG_STOP, MSG_CLOSE_SOCKET, 
MSG~MAP_STATUS, MSG_XFER_COMPLETE, MSG_TOOL); 

— Buffer for Experiment Control Router (Max var - msg TEXT_BUFFER); 

subtype MSG_EC_MAX_MSG_LEN is SYS_DB_SIZE range 1.. 1350; 

type MSG_EC_ROUTER_REC is array (MSG~EC_MAX_MSG_LEN) of INTEGER; 

— Buffer for Reference Router (Max Var « MSG_TEXT_BUFFER); 

subtype MSG_RF_MAX_MSG_LEN is SYS_DB_SIZE range 1..2600; 

type MSG__RF_ROUTER_REC is array (MSG_RF_MAX_MSG_LEN) of INTEGER; 

— Buffer for C2 Product Router (Max Var - MSG_MENU_TREE); 

subtype MSG_C2_MAX_MSG_LEN is SYS_DB_SIZE range 1..6100; 

type MSG_C2_ROUTER_REC~ is array (MSG_C2_MAX_MSG_LEN) of INTEGER; 

— Buffer for situation Data Router (Max Var * MSG_sd_rd_TASK_org_REC ) 

subtype MSG_SD_MAX_MSG_LEN is SYS_DB_SIZE range l7.8000; ~ 

type MSG__SD_ROUTER_REC is array (MSG_SD_MAX_MSG_LEN) of INTEGER; 

— Length of the message header 

MSG_HEADER_LEN : MSG_MESSAGE_LEN :» 18; 

EDDIC MESSAGE VARIANCE RECORD 


type MSG_VAR_MESSAGES (MSG_MESSAGE_TYPE:MSG_MESSAGES) is 
record 


MSG_MESSAGE_LEN; 
MSGMESSAGES; 
SYS_EDDIC_PROCESSES 
SYS_EDDIC PROCESSES 
BOOLEAN := false; 
CALENDAR.TIME; 


MSG_BYTES_IN_MSG 
MSG__RECORD_TYPE 
MSG~DESTINATION 
MSG_STATION ID 
MSG_ACKNOWLEDGE 
MS G~DAT E_TIME 

case MSG_MESSAGE_TYPE is 

— Text Messages 

When MSG__TEXT_BUFFER »> 

MSG_TEXT_COUNT 
MSG~PROD~TYPE 
MSG~OPPLAN_ID 
MSG~TEXT DATE_TIME 

msg“text“ 


— Report Header Messages 


SYS PRODUCT LENGTH; 

SYS~PRODUCT; 

SYS_OPPLAN; 
SYS~DATE_TIME; 

SYS_TEXT~( 1. . 

SYS_PRODUCT_LENGTH' LAST) 


A-16 







when MSG HEADER BUFFER «> 


MSG_H£ADER_COUNT 
MSG~HEADER 


— Request for message 
when MSG REQUEST -> 


MSG_MESSAGE_REQ 

MSG~RPT_REQUESTOR 

MSG~PRODUCT 


t SYS HEADER LENGTH; 

S SYS~TEXT ( 1 ..SYS_HEADER_LENGTH' 
LAST); _ ~ 


: MSG_MESSAGES; 

: SYS EDDIC_PROCESSES; 

t SYS~WALKING CELL; 


— Color look-up table update 
when MSG LUT UPDATE -> 


MSG COLOR UPDATE 


LUT UPDATE RECORD; 


— Create a new window on a station 
when MSG CREATE WINDOW *> 


MSG_WINDOW_EXEC S STRING (SYS_ENV_STRING); 

— Experiment Control window termination 
When MSG_TERM_WINDOW -> 

MSG_TERM__TYPE : SYS_PRODUCT; 

— Experiment control routing message 
when MSG_CONTROL_ROUTING -> 

MSG_CONTROL_ROUTE l CTL_ROUTING_REC; 

— Menu tree structure - Used by UED_WALKING_MENU 
when MSG_MENU_TREE -> 

MSG MENU_TREE_COUNT J SYS_MENU_TREE_LIMIT; 

MSG_TREE : SYS_MENU_TREE (SYS_MENU_TREE_LIMIT); 


— Products available in the control database 
when MSG_CONTROL_PRODUCTS -> 

MSG_NUMBER_CTL PROD l CTL NUM_PRODUCT; 

MSG~CTL_PROD ~ s CTL~PROD_LIST_TYPE (CTL_NUM_PRODUCT); 

When MSG CONTROL PART LIST -> 


MSG_NUMBER_CTL PART S CTL PART_LIMIT; 

MSG~CTL_PART_LIST t CTL~PART_ARRAY; 

— Products available in the reference database 
when MSG REFERENCE PRODUCTS ■> 


MSG NUMBER REF PROD I FDB NUM PRODUCT; 

MSG~REF PROD ~ I FDB _ PROD LIST TYPE (FDB_NUM PRODUCT); 


A-17 








— Products available in the help database 
when MSG_HELP_PRODUCTS -> 

MSG__NUMBER_HELP_PROD * HDB_NUK_PRODUCT; 

MSG~HELP_PROD ~ : HDB_PROD_I.IST_TYPE <HDB_NUM^PRODUCT) ; 

— c2 Products in the C2 Product database 
When MSG_C2_PRODUCTS -> 

MSG_NUMBER_C2_PR0D : CDB_NUM PRODUCT; 

MSG~C2_PROD “ : CDB_PROD_LIST_TYPE (CDB_NUM_PRODUCT); 

when MSG_C2_MESSAGE -> 

MSG__C2_SUM_HESSAGE : CDB_SUM_MESSAGE_REC; 

When MSG_MESSAGE_LOG *> 

MSG__C2_MESSAGE_LOG : CDB_MESSAGE_LOG_REC; 

when MSG_C2_PART_L1ST «> 

MSG__NUMBER_PART ! CDB_PART__LIMIT; 

MSG~PART_LIST s CDB_PART_ARRAY; 

when MSG_OPPLAN_LIST »> 

MSG - SD _ OPPLJVN _ LIST { SDB_OPPIAN_LIST_REC; 

— SITUATION DATA 
when MSG_SD_REQUEST ■> 

MSGSDMESSAGEREQ 
MSG~SD_MSG_REQUESTOR 
MS G~S D_T 1 ME 
MSG~SD_OPPLAN 
MSG~SD_FORCE 
MS G~S D_UN 1 T_X D 

when MSG_AKMO_AUTH -> 

MSG__SD_AMM°_AUTH : SDB_AMMO_AUTH_LIST; 

When MSG_AMMO_ON_HAND «> 

M SG__SD_AMM°_ON_ H AN D : SDB_AMMO_ON_RAND_REC; 

when MSG_EQUIP_AUTB -> 

MSG_S DJEQUX P_AUTH l SDB_EQUIP_AUTH_LIST; 

when MSG_EQUIP_OPER -> 

MSG SD EQUIP OPER i SDB EQUIP OPER REC; 


t MSG_KESSAGES; 

s sys”eddic_processes; 
: SYS_DATE_TIME; 
s SYS_OPPLAN; 

S SDB_SIDE_TYPE; 
t SDB UNIT; 


A-18 






when MSGJPERSONNEL «> 

HSG_SD_PERSONNEL s SDB_P£RSONNEL; 

when hsgjfu el -> 

MSG_SD_FUEL : SDB_FUELS; 

when MSG_LOCATION ■> 

M SG_SD_L° C ATI°N : SDB_UNIT_LOCATION; 

when MSG_ALL_LOCATIONS => 

MSG_S d _ALL_LOC : SDB_ALL_LOC__REC; 

When MSG_AMMO_UPDATE => 

MSG_SD_AMMO_UPD s SDB_AMMO_UPDATE_REC; 

When MSG_EOUIP_UPDATE => 

MSG_SD_EQUIP_UPD s SDB_EQUIP_UPDATE_REC; 

when MSG_PERS__UPDATE »> 

MSG_ SD _PERS_UPr> : SDB_PERS_UPDATE_REC; 

when HSGJFVELJJPDATE -> 

MSG_SD_FUEL_UPD ; SDB_FUEL_UPDATE_REC; 

When MSG_LOC_UPDATE ■> 

MSG_SD_LOCATION_UPD s SDB_LOCATIOH_UPDATE_REC; 

when MSG_ACTIVITY_UPDATE -> 

MSG_SD_ACTIVITY_UPD : SDB_ACTIVITY_UPDATE_REC; 

when MSG_MISSION_UPDATE ■> 

MSG_SD_M I SSION_UPD s SDB_MISSION_UPDATE_REC; 

when MSG_REZNFORCE_UPDATE “> 

MSG_SD_RZINF_UPD j S D B_0 P FOR_REINF_UPDATE_REC 

when KSG_STRENGTH_UPDATE -> 

MS G_S D_S TR__UP D s SDB_OPFOR_STR_UPDATE_REC; 

when MSG_BLUZFOR_STATUS ■> 

MSG_SD_ B L_STATUS : SDB BLUE UNIT STATUS; 


A-19 







when MSG_BLU£FOR_TASk_ORG «> 

MSG SD_BL_TASK_ORG : SDB_BLUE_TASK_ORG_REC; 

When MSG_BLUE_TASK_ORG_UPDATE -> 

M SG_S D _BL_TASK_°RG_UPD : SDB_BLUE_TASK_ORG_UPDATE_R£C; 

when MSG_OPFOR_STATUS -> 

MSG_SD_RD_STATUS : SDB_OPFOR_UNIT_STATUS; 

when MSG_OPFOR_TASK_ORG «> 

MSG_SD_RD_TASK_ORG : SDB_OPFOR_TASX_ORG_R£C; 

when MSG_OPFOR_TASK_ORG_UPDATE => 

MS G_S D_RD_TASK_ORG_UPD : SDB_OPFOR_TASK_ORG_UPDATE_REC; 

when MSG_CONTROL_MEASURE => 

MSG_SD_CNTRL_MSR : SDB_ALL_CNTRL_MSR; 

when MSG_CNTRL_MSR_ADD => 

MSG_SD_CNTRL_MSR_NEW s SDB_CONTROL_MEASURE_REC; 

when MSG_CNTRL_MSR_POINT *> 

MSG_SD_CNTRL_MSR_POINT : SDB_ALL_CNTRL_POINT; 

when MSG_CNTRL_POINT_ADD »> 

MSG_SD_CNTRL_NEW_POINT s SDB_CNTRL_MSR_POINT_REC; 

when MSG_CNTRL_MSR_CHG_LOC »> 

MSG_SD_CMTRl._MSR_I.OC : SDB_CNTRI._MSR_L.OC_REC; 

when MSG_CNTRL_MSR_CHG_STAT »> 

MSG_SD_CNTRL_MSR_STAT s S D B_C N T RL_MS R_S TAT_RE C; 

When MSG_CNTRL_MSR_CHG_EFF »> 

MS G_S D_CN TRL_MS R_E F r : SDB_CNTRL_MSR_EFF_R£C; 

When MSG_CNTRL_MSR_DEL -> 

MS G_SD_CNTRL_MS R _DEL_ID : SDB_CONTROL_MEASURE_ID; 

MS G~S D~D EL_TIME i SYS_DATE_TIME; 

MSG“si>“ D EL”0P p LAN * SYS_OPPLAN; 

MSG~SD LOCATION TYPE * SDB~CONTROL MEASURE LOC TYPE; 


A-20 







when MSG OBSTACLE => 


MSG_SD_OBSTACLES * S D B_ALL__OB S TACLE ; 

when MSG_OBSTACLE_ADD => 

MSG SD OBSTACLE_NEW S SDB_OBSTACLE_REC; 

when MSG_OBSTACLE_CHG_LOC “> 

MSG SD_OBSTACLE_LOC s SDB_OBSTACLE_LOC_REC; 

when MSG_OBSTACLE__CHG_STAT -> 

MSG SD OBSTACLE_STAT : SDB_OBSTACLE_STAT_REC; 


when MSG_OBSTACLE_CHG_EFF 
MSG_SD_OBSTACLE_EFF 
when MSG_OBSTACLE_DEL »> 

MSG_SD_OBSTACLE_DEL_ID 

msg_sd_ob_del_time 
msg_sd OBS_DEL_OPPLAN 

when MSG_NEW_OPPLAN *> 

MSG_SD_NEW_OPPLAN 

— Tactical Map Attributes 
when MSG_MAP_STATUS -> 

MSG_MAP_ATTRIB 

— TSTM Messages 
when MSG_TSTM_MATRIX *> 

MSGMATRIX 
when MSG_TSTM_COL_FBACK »> 
MSG_COL_FBACK 

when MSG_TSTM_ROW_FBACK -> 
MSG_ROW_FBACK 

When MSG_TSTM_OCOKA_FBACK - 
MSG_OCOKA_FBACK 
When MSG_TSTM_COA_FBACK -> 
MSG COA FBACX 


s SDB OBSTACLE_EFF_REC; 


t SDB_OBSTACLE_ID; 
: SYS~DATE_TIME; 

s SYS OPPLAN; 


s SDB NEW OPPLANJREC; 


s LUT MAP ATTRIBUTES; 


: TSTM INITIAL_MATRIX; 


S TSTM COLUMN_FEEDBACK; 


j TSTM ROW FEEDBACK; 


I TSTM OCOKA_FEEDBACK; 


t TSTM COA FEEDBACK; 


A-21 


when MSG_TSTM_MATRIX_SAVE > 

MSG_MATRIX_SAVE 

When MSG_TSTM_NEW_PHASE *=> 

MSG_PHASE 

— Router Buffers 

When MSG_EC_ROUTER_BUFFER > 

MS G_E C _S TATI°N_I D 
MSG~EC~BUFFER 

When MSG_RF_ROUTER_BUFF -> 

MSG_RF_STATI°N_ I D 

MSG_RF_BUFFER 

When MSG_C2_ROUT£R_BUFF *> 

MSG_C2_STATION_ID 

MSG_C2_BUFFER 

When MSG_SD_ROUTER__BUFFER 

MSG_SD_STATION_ID 

msg“s d _buffer 

when MSG_TOOL «> 
MSG_TOOL_TYPE 
when others *> 


: TSTM MATRIX SAVE; 


t TSTM PHASE; 


: SYS_EDDIC_PROCESSES; 

: MSG EC ROUTER REC; 


: SYS_EDDIC_PROCESSES; 

: MSG RF ROUTER REC; 


: S Y S_EDDIC_PROCESSES; 

: MSG C2 ROUTER REC; 


: SYS_EDDIC_PROCESSES; 

: MSG__SD_ROUTER_REC; 

: SYS_TOOLS; 

null; 


end case; 
end record; 

type MSG_MESSAGE_POINT is access MSG_VAR_KESSAGES; 

— Message Recording Record Descriptions for the routers 

— Experiment control router 

subtype MSG_EC_REC_LIMIT is SYS_DB_SIZE range 1..12; 

MSG_EC_RECORD LIST ~ l array (MSG EC REC LIMIT) of MSGJMESSAGES :=> 

(MSG_REQUEST, MSG LUT_UPDATE, MSG~CREATE_WINDOW, MSG JTERM_WINDOW, 
MSG_STATION_UP , MSG_WINDOW_OPEN,~MSG_WINDOW_CLOSE, MSG_CONNECT, 
MSG_MAP_STATUS, MSG~CLOSE_SOCKET, MSG_STOP,”MSG_TOOL) ; 

— Reference router 

subtype MSG RF REC LIMIT is SYS_DB SIZE range 1..6; 

MSG_RT_RZCORD LIST “ : array (MSG_RF_REC_LIMIT) of MSGJMESSAGES :■ 

~ (MSGjREQUEST, MSG WINDOW_OPEN, ~MSG_WINDOW_CLOSE, MSG~CONNECT, 
MSG~CL0 SEjS0CKET7 MSG_STOP); 


A-22 


— C2 product router 

subtype MSG_C2_R£C_LIMIT is S¥S_DB_SIZE range 1..7; 

MSG_C2_RECORD_LIST ~ t array (MSG_C2_REC_LIMIT) Of MSG_MESSAGES := 

(MSG_REQUEST, MSG_C2_MESSAGE, MSG_WINDOW_OPEN, MSG_w7nDOW_CLOSE, 

msg'connect, msg~close_socxet, msg_stopJ; ~ 

— situation DB router 

subtype MSG_SD REC LIMIT is SYS_DB_SIZE range 1..28; 
MSG_SD_RECORD_LIST ~ : array (MSG_SD_REC_LIMIT) of HSG_MESSAGES := 

(MSG_SD_REQUEST, MSG_AMMO UPDATE, MSG~EQUIP_UPDATE, MSG_PERS_UPDATE, 
MSG“FUEL_UPDATE, MSG_LOC~UPDATE, MSG_BLUE_TASK_ORG_UPDATE, 
MSG~ACTIVITY_UPDATE,~MSG_MISSION_UPDATE, MSG_OPFOR~TASK_ORG_UPDATE, 
MSG~REINFORcI_UPDATE, MSG_STRENGTH_UPDATE, MSG_CNTRL_MSR_ADD, 
MSG~CNTRL POINT_ADD, MSG_CNTRL_MSR~CHG_STAT, MSG_CNTRL_MSR_CHG_EFF, 
KSG_CNTRL_MSR__CHG_LOC, MSG_CNTRL_HSR_DEL, MSG_OBSTACLE_ADD, 
MSG_OBSTACLE CHG_LOC, MSG_OBSTACLE_CBG_STAT, MSG_OBSTACLE_CHG_EFF, 

msg_obstacle“del7 MSG_WINDOW__OPEN, msg_window_close, msg_connect, 

MSG^CLOSE SOCKET, MSG_STOP) 


end MSG MESSAGE 


—cpc package specification name: SDB_SITUATI0N_DB 

--cpc description: This package describes the records in the EDDIC situation 
database 

—cpc design notes: 

—cpc package author: Bruce Packard 

science Applications International Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEM_PACKAG£; use SYSTEM_PACKAGE; 
package SDB_SITUATION_DB is 

subtype SDB_UNIT is SYS_DB_SIZE range 0..500; 

subtype SDBJEQUIPMENT is SYS_DB_SIZE range 0..100; 

subtype SDB_AMMUNITION is SYS_DB_SIZE range 0..50; 

— Situation Database Limitations 

subtype SDB_BLUEFOR_UNIT_ID is SDB_UNIT range 0..200; 

subtype SDB_OPFOR_UNIT_ID is SDB_UNIT range 0..400; 

subtype SDB_BLUEFOR_EQUIP_ID is SDB_EQUIPMENT range 0..100; 

subtype SDB_OPFOR_EQUIP_ID is SDB_EQUIPMENT range 0..100; 

subtype SDB_BLUEFOR_AMMO_ID is SDB_AMMUNITION range 0..50; 

subtype SDB_BLUEFOR_EQUIP_OWN is SDB_EQUIPMENT range 0..50; 

subtype SDB_OPFOR_EQUIP_OWN is SDB_EQUIPMENT range 0..50; 

subtype SDB_BLUEFOR_AMMO_OWN is SDB_AMMUNITION range 0..50; 

subtype SDB_CONTROL_MEASURE_ID is SYS_DB_SIZE range 0..200; 

subtype SDB_CONTROL_MEASURE_PT is SYS_DB_SIZE range 0..15; 

subtype SDB_OBSTACLE_ID is SYS_DB_SIZE range 0..50; 

subtype SDB_BLUE_STAT_PTR is SYS_DB_SIZE range 0.. 1024; 

subtype sdb_blue_eq_auth_PTR is SYS_DB_SIZE range 0. .500; 

subtype SDB_BLUE_EQ_CURR_PTR is SYS_DB_SIZE range 0. .3000; 

subtype SDB_BLUE_AM_AUTH_PTR is SYS_DB_SIZE range 0..500; 

subtype SDB_BLUE_AM_CURR_PTR is SYS_DB_SIZE range 0..4000; 

subtype SDB_BLUE_FUEL_PTR is SYS_DB_SIZE range 0..1024; 

subtype SDB_BLUE_PERS_PTR is SYS_DB_SIZE range 0..1024; 

subtype SDB_BLUE_ULOC_PTR is SYS_DB_SIZE range 0..1024; 

subtype SDB_OPFOR__STAT_PTR is SYS_DB~SIZE range 0..1024; 

subtype SDB_OPFOR_EQ_AUTH_PTR is SYS_DB~SIZE range 0..600; 

subtype SDB_OPFOR~EQ~CURR~PTR is SYS_DB_SIZE range 0..3000; 

subtype SDB_OPFOR~ULOC_PTR is SYS_DB~SIZE range 0..1024; 

subtype SDB_CNTRL~MSR_PTR is SYS~DB~SIZE range 0..200; 

subtype SDB_CNTRL_POINT_PTR is SYS~DB_SIZE range 0..200; 

subtype SDB~OBST PTR ~ is SYS~DB_SIZE range 0..200; 

subtype SDB_UNIt”name_LEN is SYS~NAME_SIZE range 1..15; 

subtype SDB_EQUIP_NAME_LEN is SYS~NAHE~SIZE range 1..12; 

subtype SDB_AMMO_NAME_LEN is SYS~HAME~SIZE range 1..12; 

subtype SDB~CNTL~MSR_NAHE_LEN is SYS~NAME~SIZE range 1..12; 

— EDDIC Coordinate location 
type SDB_LOCATION_REC is 


A-24 





record 

SDB_X : SYS_COORDINATE; 

SDB_Y : SYS~COORDINATE; 

end record; 

— side of the confrontation (BLUEFOR, OPFOR) 
type SDR_SIDE_TYPE ia (BLUEFOR, OPFOR); 


— BLUEFOR Equipment Pointer Record 
type SDB_BLUEFOR_EQUIP_PTR ia 
record 


SDB_UNIT_ID : SDB_BLUEFOR_UWIT_ID; 

SDB_TIME s SYS_DATE_TIME; 

SDB_OPPLAN : SYS_OPPLAM; 

SDB_RECORD S SYS_DB_SIZE; 

end record; 


— BLUEFOR unit Equipment operational Quantity oatabaae Record 
type SDB_BLUEFOR_EQUIP_QTY is 
record 


SDB_UNIT_ID s 

SDB_EQU1P_ID S 

SDB_TIME t 

SDB_OPPLAN s 

SDB_OPERATIONAL s 
end record; 


SDB_BLUEF0R_UN1T_ID; 
SDB_BLUEFORJEQUIP_ID; 
S Y S_DATE_TIME; 
SYS_OPPLAN; 
SYS~QUANTITY; 


— BLUEFOR Equipment Quantity Pointer Record 


type SDB_BLUEFOR_EQUIP_QTY 
record 

SDB_UNIT_ID ; 

SDB~EQUIP_ID S 

SDB_TIME 5 

SDB_OPPLAN S 

SDB_RECOR D i 

end record; 


PTR ia 

SOB BLUEFOR_UNIT_ID; 
SDB~BLUEFOR_EQUIP_ID; 
SYS~DATE_TIME; 
SYS_OPPLAH; 

SYS DB SIZE; 


— OPFOR Equipment Pointer Record 
type SDB_OPFOR_EQUIP_PTR ia 
record 


SDB_UNIT_ID 
SDBJTIME 
SDB_OPPLAN 
SDB_R£CORD 
end record; 


SDB_OPFOR_UNIT_ID; 

SYS~DATE_TIME;~ 

SYS_OPPLAH; 

SYS DB SIZE; 


— OPFOR Unit Equipment Operational Quantity Database Record 
type SDB_OPFOR_EQUIP_QTY is 
record 


SDB_UNIT_ID t 

SDB EQUIP ID t 

SDBJTIME ~ s 

SDB~OPPLAN l 

SDb”oPERATIOHAL : 
end record; 


SDB_OPFOR_UNIT_ID; 
SDB_OPFOR EQUIP ID 
SYS DATE_TIME; 
SYS~OPPLAN; 

sys”quamtity; 


A-25 




— OPFOR Equipment Quantity Pointer Record 
type SDB_OPFOR_EQUIP_QTY_PTR is 
record ’ ~ 

SDB_UNIT_ID : SDB_OPFOR_UNIT_ID; 

SDB~EQUIP_ID s SDB_OPFOR_EQUIP_ID; 

SDB_TIME “ : SYS~DATE TIME; ~ 

SDB~OPPLAN : SYS~OPPLAN; 

SDB~RECORD : SYS~DB_SIZE; 

end record; 


— BLUEFOR Ammunition Pointer Record 


type SDB_BLUEFOR_AMMO_PTR is 
record 

SDB_UNIT_ID s 

SDB_TIM£~ : 

SDB_OPPLAN s 

SDB_RECORD : 

end record; 


SDB_BLUEFOR UNIT_ID; 
S Y S~DATE_TIKE; 
SYS_OPPLAN ; 

SYS~DB SIZE; 


— BLUEFOR Unit Ammunition on-hand Quantity Database 
type SDB_BLUEFOR_AMMO_QTY is 
record 


SDB_UNIT_ID j 

SDB_AMMO_ID : 

SDB_TIME S 

SDB_OPPLAN : 

SDB_ON_HAND j 

end record; 


SDB_BLUEFOR_URIT_ID; 
S D B_BLUE FOR_AMMO_ID; 
SYS_DATE TIKE; 
SYS_OPPLAN; 
SYS~QUANTITY; 


— bluefor Ammunition on-hand Pointer Record 
type SDB_BLUEFOR_AMMO_QTY_PTR is 
record 

SDB_UNIT_ID 
SDB_AMMO_ID 
SDBJTIME 
SDB_OPPLAN 
SDB_RECORD 
end record; 


— BLUEFOR Fuel Description 
type SDB_FUELS is 
record 

SDB_UNIT_ID j 

SDB~TIME j 

SDE_OPPLAN s 

SDB_MOGAS RSQ : 

SDB~MOGAS~ON HAND t 
SDB~AVGAS_REQ j 
SDB_AVGAS_ON_HAND l 
SDB_DIESEL_REQ j 
SDB DIESEL ON HAND: 


SDB_BLUEFOR_UNIT_ID; 
SDB_BLUEFOR_AMMO_ID; 
SYS_DATE_TIME; 

SYS_OPPLAN; 

SYS_DB SIZE; 


Database Record 


SDB_BLUEFOR_UNIT_ID; 
SYS_DATE_TIKE; 
SYS_OPPLAN; 
SYS~QUANTITY range 0 
SYS~QUANTITY range 0 
SYS~QUANTITY range 0 
SYS~QUANTITY range 0 
SYS_QUANTITY range 0 
SYS~QUANTITY range 0 


end record; 

— BLUEFOR Fuel Pointer Record 
type SDB_BLUEFOR_FUEL_PTR is 
record 


Record 


..999999 
..999999 
..999999 
..999999 
..999999 
..999999 


A-26 







SDB_UNIT_ID : SDB_BLUEFOR_UNIT_ID; 

SDB_TIME : SYS_DATE_TIME; 

SDB_OPPLAN : SYS_OPPLAN; 

SDB_RECORD s SYS_DB_SIZE; 

end record; 


BLUEFOR Unit Personnel Database Record 


type SDB_PERSONNEL is 
record 

SDB_UNIT_ID 
SDB_TIME 
SDB_OPPLAN 
SDB_OFFICERS_AUTH 
SDB_OFFICERS_CURR 
SDB_ENLISTED_AUTH 
SDB_ENLISTED_CURR 
end record; 


S D B_BLUE FOR_UNIT_ID; 
SYS DATE_TIME; 
SYS_OPPLAN; 
SYS_QUANTITY range 
SYS_QUANTITY range 
SYS_QUANTITY range 
SYS_QUANTITY range 


0..9999; 

0..9999; 

0..999999; 
0..999999; 


— BLUEFOR Personnel Pointer 
type SDB_BLUEFOR_PERS_PTR is 
record 

SDB_UNIT_ID : 

SDB_TIME S 

SDB_OPPLAN : 

SDB_RECORD ; 

end record; 


Record 


SDB_BLU :FOR_UNIT_ID; 
SYS_DATE_TIME; 
SYS_OPPLAN; 

SYS DB SIZE; 


— Force Echelons 

— The task organization tool needs these in descending order 1 
type SDB_FORCE_ECHELON is ( 

ARMY_GROUP, FRONT, ARMY, CORPS, DIVISION, BRIGADE, REGIMENT, GROUP, 
BATTALION, SQUADRON, COMPANY, BATTERY, TROOP, PLATOON, SECTION, SQUAD, 
TEAM) ; 


— Unit Type (BLUEFOR and OPFOR) 

type SDB_UNIT_TYPE is (AIRBORNE, AIR_ASSAULT, AIR_DEFENSE, 

AIR_DEFENSE_MISSLE, ANTI_ARMOR, ARMOR_CAV, ARMOR_TANK, ARTY_TOWED, 
ARTY_SP, ATTACK_HELICOPTER, AVIATION, AVIATION_FW, AVIATION_RW, BAND, 
CAV_RECON, CHEMICAL, CIVIL_AFFAIRS, COMBINED_ARMS_ARMY, ENGINEER, 
FINANCE, INF_MECHANIZED, INF_MOTORIZED, 

MAINTENANCE, MEDICAL, MILITARY_INTEL, HILITARY_POLICE, ORDNANCE, 
PERS_SVC, PSYCH_OPNS, QUARTERMASTER, KOCKET_ARTILLERY, SIGNAL, 
SPECIAL_FORCES, SPT_COM, SUPPLY_SERVICES, SURF_TO_SURF_MISSLE, 
TRANSPORTATION); 

— Battle Function 

type SDB_BATTLE_FUNCTION is ( 

COMBAT_MANEUVER, COMBAT_SUPPORT, COMBAT_SERVICE_SUPPORT, 

COMMITTED, REINFORCE r ARTILLERY); ~ 


— BLUEFOR Task Organization Relationships 
type SDB_BLUEFOR_TO_RELATE is ( 

ORGANIC_ASSIGNED, ATTACHED, DS, GS, GSR, OPCON); 

— Force Activity 

type SDB_FORCE_ACTIVITY is ( 


A-27 









ADVANCE_GUARD, ADVANCING, AIR_ASSAULT, AIRBORNE_ASSAULT, 
AIRMOBILE_ASSAULT, AMPHIBIOUS_LANDING, CLOSING, COMMUNICATION, 
COUNTERATTACK, COVERING_FORCE, EXPLOITATION, FLANKJ3UARD, 
INFILTRATION, MAINTAINING, MANAGING, OCCUPY, PENETRATION, PURSUIT, 
PRE: ARING, REAR_AREA_OPERATIONS, REAR GUARD, REARM_REFUEL, 
RECONNAISSANCE, REINFORCING, REORGANIZATION, RIVER~CROSSING, SEARCH, 
SCREEN, SERVICE, SUPPLY, TRANSPORT); 

— Force Mission 

type S DB_FORCE_MISSION is ( 

ATTACK, DEFEND, DELAYED, RESERVE, SUPPORT, WITHDRAW); 

— BLUEFOR Unit Status Database Record 

type SDB_8LUE_UNIT_STATUS is 

record 

SDB_UNIT ID 
SDBJTIME - 
SDB~OPPLAN 
SDB~NAME 
SDB_ECHELON 
SDBJTYPE 
SDB~BATTLE_FUNC 
SDB_TO_RELATE 
SDB_PARENT 
SDB~HIGHER_ECH 
SDB_NEXT_SIBLING 
SDB_ASSET_SIBLING 
SDB~FIRST_CHILD 
SDB~ACTIVITY : 

SDB~MISSION 
end record; 


SDB_BLUEFOR__UNIT_ID; 
SYS~DATE TIME; 

SYS~OPPLAN; 

String (SDB_UNIT_NAME_LEN); 
SDB_FORCE_ECHELON; 
SDB__UNIT_TYPE ; 
SDB_BATTLE_FUNCTION; 
SDB_BLUEFOR_TO_RELATE; 
SDB_BLUEFOR~UNIT_ID; 
SDB~BLUEFOR_UNIT_ID; 
SDB_BLUEFOR_UNIT_ID; 
SDB_BLUEFOR_UNIT_ID; 
SDB_BLUEFOR UNIT_ID; 
SDB_FORCE_ACTIVITY; 

SDB FORCE MISSION; 


— BLUEFOR Unit Status Pointer Record 
type SDB_BLUEFOR_STATUS_PTR is 
record 


SDB_UNIT_ID : SD8_BLUEFOR_UNIT_IP; 

SDB_TIME ! SYS_DATE_TIME; 

SDB_OPPLAN : SYS_OPPLAN; 

SDB_RECORD s SYS_DB_SIZE; 

end record; 


— BLUEFOR Unit Location Pointer Record 
type SDB_BLUEFOR_LOCATION_PTR is 
record 


SDB_UNIT_ID : 

SDB~TIME~ s 

SDB~OPPLAN : 

SDB_RECORD t 

end record; 


SDB_BLUEFOR_UNIT_ID 

SYS~DATE_TIME; 

SYS~OPPLAN; 

SYS~DB SIZE; 


— OPFOR Unit Status Database Record 
type SDB_OPFOR_UNIT_STATUS is 
record 


SDB_UNIT_ID 

SDB~TIME~ 

SDB~OPPLAN 


SDB_BLUEFOR UNIT_ID; 
SYS_DATE_TIME; 
SYS_OPPLAN; 


A-28 









SDB NAME : 

SDB~ECHELON : 

SDB~TYPE s 

SDBJPARENT : 

SDB_HIGHER_ECH s 

SDB~NEXT_SIBLING : 

SDB~FIRST_CHILD : 

SDB MISSION : 

SDB~ACTIVITY s 

SDB_REINFORCE_HR s 

SDB_PERCENT_STR s 

end record; 

— OPFOR Unit Status Pointer 
type SDB_OPFOR_STATUS_PTR is 
record 

SDB__UNIT__ID : 

SDB~TIME~ : 

SDB_OPPLAN : 

SDB_RECORD : 

end record; 


string (SDB_UNIT_NAME_LEN); 
SDB_FORCE_ECHELON; 
SDB_UNIT_TYPE; 
SDB~OPFOR_UNIT_ID; 
SDB~OPFOR~UNIT_ID; 
SDB_OPFOR~UNIT_ID; 
SDB~OPFOR_lINIT~ID; 
SDB~FORCE~MISSION » 
SDB~FORCE_ACTIVITY; 
SYS~HOUR;“ 

SYS PERCENT; 


Record 


SDB OPFOR_UNIT_ID; 

sys”date_tike; 

SYS“0PPLAN; 

SYS DB SIZE; 


— OPFOR Unit Location Pointer Record 
type SDB_OPFOR_LOCATION_PTR is 
record 

SDB_UNIT_ID : SDB_OPFORJUNIT_ID; 

SDB_TIME S SYS_DATE_TIME; 

SDB_OPPLAN I SYS_OPPLAN; 

SDB RECORD : SYS DB SIZE; 


end record; 


— Control Measure Types in order by Area, Crossing, Fire Plan, Line, 

— Map Feature, Point, Route, 
type SDB_CONTROL_MEASURE_TYPE is ( 

AREA_OF_OPERATIONS, ASSEMBLY_AREA, ATTACK_POSITION, BATTLE_POSITION, 
BRIGADE_SUPPORT_AREA, BATTALION_SUPPORT_AREA, DIVISION_SUPPORT_AREA, 
DROP_ZONE, FREE_FIRE_AREA, LANDING_ZONE, NO_FIRE_AREA, OBJECTIVE, 
RESTRICTIVE_FIRE_AREA, ZONE_OF_ACTION, 

ASSAULT_CROSSING, RAFT_SITE7 
GROUP_OF_TARGETS, 

BOUNDARY, BRIDGEHEAD_LINE, COORDINATED_FIRE_LINE, FEBA, 

FIRE_SUP_COORD_LINE,~FORWARD_LINE_OF_TROOPS, HOLDING_LINE, LIGHT_LINE, 
LIMIT_OF_ADVANCE, LINE_OF_CONTACT, LINE_OF_DEPARTURE, PHASE_LINE, 
COA_LINE, RESTRICTIVE_FIRE_LINE, 

AIRJFIELD, BRIDGE, BUILDING, CITY, LAKE, MAP_REFERENCE_POINT, 
MOUNTAIN_PEAK_HILL_TOP, ROAD_INTERSECTION, TOWN, VILLAGE, 

CHECKPOINT, COLLECTION_POINt7 CONTACT_POINT, COORDINATING_POINT, 
CRITICAL_EVENT, LINK_UP_POINT, PASSAGE_POINT, POINT_OF_DEPARTURE, 

RELEASE POINT, START~POINT, STRONG_POINT, TRAFFIC_CONTROL_POINT, 

AIR_AXIS OF ADVANCE, ”aIR_CORRI DOR, GRND_AXIS_OF_ADV_MAIN_ATK, 
GRND_AXIS_OF_ADV_SUPPORt7 DIRECTION_OF_ATTACK, FEINT, MAIN_SUPPLY_ROUTE, 
ROUTE); “ 


subtype SDB AR£A_CM_RANGE is SDB CONTROL_MEASURE_TYPE range 

area_of_operations.7zone_of_action; 
subtype SDB_CROSSING_CM_RANGE is SDB_CONTROL_MEASURE_TYPE~range 


A-29 








subtype 

SDB_FIRE_PLAN_CM_RANGE 

is 

ASSAULT_CROSSING..RAFT_SITE; 
SDB_CONTROL_MEASURE_TYPE range 

subtype 

SDB_LINE_CM_RANGE 

is 

GROUP_OF_TARGETS..GROUP_OF_TARGETS 
SDB CONTROL MEASURE_TYPE range 

subtype 

SDB_MAP_FEAT_CM_RANGE 

is 

BOUNDARY..RESTRICTIVE_FIRE_LINE; 
SDB CONTROL_MEASURE_TYPE range 

subtype 

SDB_POINT_CM_RANGE 

is 

AIR_FIELD..VILLAGE;” 
SDB_CONTROL_KEASURE_TYPE range 

subtype 

SDB_ROUTE_CM_RANGE 

is 

CHECKPOINT.7tRAFFIC - CONTROL_POINT; 
SDB CONTROL_MEASURE_TYPE range 




AIR_AXIS_OF_ADVANCe7.ROUTE; 


— Control Measure Location Type 
type SDB_CONTROL_MEASURE_LOC_TYPE is < 

AREA, CROSSING, FIRE PLAN, LINE, MAP_FEATUR£, POINT, ROUTE); 


— Control Measure Status 

type SDB_CONTROL_MEASURE_STATUS is ( 

PLANNED, ACTUAL); 

— Points defining the Control Measure 

type SDB_CONTROL_MEASURE_POINTS is array (SDB_CONTROL_MEASURE_PT) of 

SDB_LOCATION_REC; 

— Boolean array of map scales to be displayed in 

type SDB_CONTROL_MEASURE_SCALES is array (SYS_MAP_SCALES) of 

BOOLEAN; 


Control Measure Database Record 


type SDB_CONTROL_MEASURE_REC is 
record 

SDB_ID J 

SDB_OPPLAN : 

SDB_NAME S 

SDB_SIDE : 

SDB_OWNER_BLUE : 
SDB_OWNER_OPFOR S 
SDB~TYPE ~ s 

SDB_LOCATION_TYPE : 
SDB_SCALE ~ t 

SDB~STATUS s 

SDB_EFF_FROM_DATE * 
SDB_EFF_TO_DATE : 
SDB_LABEL_ECHELON J 
SDB_NUMBER_POINTS S 
SDB~LOCATION ! 

end record; 

— Control Measure Pointer Record 
type SDB_CONTROL_MEASURE_PTR is 
record 

SDB_CNTRL_MSR ID 
SDB~OPPLAN ~ 

SDBJBFF FROM 
SDB~EFF~TO 
SDB~RECORD 


SDB_CONTROL_MEASURE_ID; 

SYS_OPPLAN; 

string (SDB_CNTL_MSR_NAME_LEN) 
SDB_SIDE TYPE; 
SDB_BLUEFOR_UNIT_ID; 
SDB_OPFOR_UNIT_ID; 
SDB_CONTROL_MEASURE_TYPE ; 
SDB_CONTROL_MEASURE_LOC_TYPE; 
SDB_CONTROL_MEASURE_SCALES; 
SDB_CONTROL_MEASURE_STATUS ; 
SYS_DATE_TIKE; 

SYS_DATE_TIME; 
SDB_FORCE_ECHELON; 
SDB_CONTROL_MEASURE_PT; 

SDB~CONTROL MEASURE_POINTS; 


SDB_CONTROL_MEASURE_ID; 
S Y S_OPPLAN ; — “ 

SYS_DATE TIME; 
SYS_DATE~TIME; 

SYS DB 8IZE; 


1 


A-30 





end record 


Point Control Measure Database Record 

R£C is 


type SDB_CNTRL__MSR_POINT 
record ” 

SDB_ID 

SDB~OPPLAN 

SDB_NAME 

SDB_SIDE 

SDB_OWNER_BLUE 

SDB~OWNER_OPFOR 

SDB_TYPE 

SDB~LOCATION_TYPE 
SDB~SCALE 
SDB__STATUS 
SDB EFF_FROM_DATE 
SDB~EFF_TO_DATE 
SDB_LABEL_ECHELON 
SDB_LOCATION 
end record; 


SDB_CONTROL_MEASURE_ID; 
SYS~OPPIAN; - 

string (sdb_cntl_msr_name_len) 
SDB__SIDE__TYPE; 

SDB~BLUEFOR_UNIT_ID; 

SDB~OPFOR UNIT_ID; 
SDB~COHTROL_MEASURE_TYPE; 
SDB~CONTROL_MEASURE_LOC_TYPE; 

S DB~C ON TROL~MEASURE_S CALE S; 
SDb“c0NTR0L_MEASUR£_STATUS ; 
SYS~DATE_TIME; 

SYSJDATEJTIME; 
SDB~FORCE_ECHELON; 

SDb“lOCATION REC; 


— Control Measure Pointer Record 


type SDB_CNTRL_MSR_POINT_PTR i8 
record 

SDB CNTRL MSR ID : 


SDB_OPPLAN S 

SDB_EFF_FROM 
SDB_EFF_TO S 

SDB_RECORD S 

end record; 


SDB__CONTROL_H£ASURE_ID; 
SYS~OPPIAN; 
SYS~DATE_TIME; 
SYS~DATE_TIME; 

SYS^DB SIZE; 


— Obstacle Types 

type SDB_OBSTACLE_TYPE is ( 

ABATIS, ANTI_TANK_DITCH, BRIDGE_DEMO, CHEMICAL, CRATER, DAM_DEMO, 
FLOODING, LOG_POSTS, MINEFIELD__AP, MINEFIELD_AT, MINEFIELD_AT_AP, 
NUCLEAR, SCAT_HINEFIELD_AP, SCAT_MINEFIELD_AT, SCAT_MINEFIELD_AT_AP, 
TUNNEL_DEMO, HIRE); 


— Obstacle Status 

type SDB_OBSTACLE_STATUS is ( 

PLANNED, PREPARED, EXECUTED, BREACHED); 


— Obstacle Database Record 
type SDB_OBSTACLE_REC is 
record 


SDB_ID I 
SDB_OPPLAN : 
SDB_SIDE : 
SDB~TYPE t 
SDBJ3TATUS t 
SDB~EFF_FROH_DATE : 
SDB~EFF~TO_DATE l 
SDBJLOCATION S 
SDB~FRONTAGE : 
SDB_DEPTH S 
SDB ORIENTATION I 


SDB_OBSTACLE_ID; 
SYS^OPPLAN; 
SDB~SIDE_TYPE; 
SDB~OBSTACLE_TYPE; 
SDBJ3BSTACLE~STATUS 
S Y S~DATE_TIME; 
SYS~DATE~TIME; 
SDB~LOCATION_REC; 
SYS~WIDTH_DEPTH; 
SYS~WIDTH_DEPTH; 
p*pSBB5BEGREE; 


A-31 







SDB_LANES_OR_GAPS s 
SDB_ECHELON ~ S 

end record; 

— Obstacle Pointer Record 
type SDB_OBSTACLE_PTR is 
record 

SDB_ID s 

SDB_OPPLAN : 

SDB~EFF_FROM : 

SDB_EFFJTO s 

SDB_RECORD ; 

end record? 


boolean; 

SDB FORCE ECHELON; 


SDB_OBSTACLE_ID; 
SYS~OPPLAN; “ 
SYS~DATE_TIME; 
SYS~DATE_TIME; 
SYS DB SIZE; 


— Structures definitions for messages passed through routers 


— Ammunition structures 

— Unit Authorized Ammunition 
type SDB_AMMO_REC is 

record 

SDB_ID : 

SDB_NAME : 

SDB_BASIC_LOAD : 

SDB_KEY_ITEM s 

end record; 


Description 


SDB_AMMUNITION; 

string {sdb_ammo_name_len); 

SYS_QUANTITY; 

BOOLEAN; 


— Authorized Ammunition Array 

type SDB_AMMO_ARRAY is array (SDB_AHMUNITION) of 

SDB_AHHO_RBC; 

type SDB_AMMO_POlNT is access SDB_AKMO_ARRAY ; 


— Unit Ammunition authorized list record 
type SDB_AMMO_AUTH_LIST is 
record 


SDB_UNIT_ID 
SDB_TIME 
SDB_OPPLAN 
SDB_COUNT 
SDB_LIST 
end record; 


SDB_UNIT; 

sys”date_tike; 

SYS_OPPLAN; 
SDB_AHMUNITION 
SDB AMMO ARRAY 


— Ammunition on-hand list 

type SDB_AMMO_ON_HAND_L1ST is array (SDB BLUEFOR_AMMO_OWN) 

Of SYS_QUANTITY; 

type SDB_AMMO_ON_HAND_POINT is access SDB_AMMO_ON_HAND_L1ST; 


type SDB AMMO ON HAND REC IS 


record 

SDB_UNXT_ID 
SDB_TIME~ 
SDB~NUMBER_TYPES 
SDB_LIST 
end record; 

type SDB_AMMO_UPDATE_REC 
record 


: SDB UNIT; 

J S Y S _ DATE_TIME; 

: SDB~AMMUNITZ ON; 

: SDB AMMO ON HAND LIST; 


A-32 






SDB_UNIT_ID 
SDB_TIME~ 
SDB_OPPLAN 
SDB_SIDE 
SDB_AMHO_ID 
SDB AMOUNT CHG 
SDB_KEY_IT£M 
end record; 


: SDB__UNIT; 

s sys“date_time; 

t SYS^OPPLAN; 

» sdb“sxde_type; 

i SDB_AMMUNITION; 
: SYS~QUANTITY; 

: BOOLEAN; 


— Equipment Structures 

— Unit Authorized Equipment Description 

type SDB_EQUIP__CATEGORY is (PACING_ITEM, SUPPORT_SYSTEM, C3_SYSTEM, 
“OTHER ITEM); 
type SDB_EQUIP_REC is 
record 


SDB_ID 
SDB_NAME 
SDB_AUTHORIZED 
SDB_CATEGORY 
end record; 


SDB_EQUIFMENT; 

String (SDB_EQUIP NAMEJLEN); 
SYS_QUANTITY; 

SDB EQUIP CATEGORY; 


— Authorized Equipment Array 

type SDB_EQUIP_ARRAY is array (sdb_equipment) of 

SDB_EQUIP_REC; 

type SDB_EQUIP_POINT is access SDB EQUIP ARRAY; 


— Unit Equipment authorized list record 
type SDB_EQUIP_AUTH_LIST is 
record 


SDB__UNIT ID s 

SDB~TIME“ » 

SDBOPPLAN 8 

SDB~COUNT : 

SDB_LIST s 

end record; 


SDB_UNIT; 

sys”date_time; 

SYSOPPLAN; 
SDB_EQUIPMENT; 
SDBJEQUIP ARRAY; 


— Operational Equipment list 

type SDB_EQUIP_OPER_L1ST is array (SDB_EQUIPMENT) 

Of SYS_QUANTITY; 

type SDB_EQUIP_OPER_POINT is access SDB_EQUIP_OPER_LIST; 


type SDB_EQUIP_OPER_REC is 
record 

SDB_UNIT_ID 

SDB_TIME~ 

SDB_SIDE 
SDB~NUMBER_TYPES 
SDB~LIST 
end record; 


; SDBJJNIT; 

J SYS_DATZ TIME; 

8 SDB_SIDE~TYPE; 

8 SDB_EQUIPMENT; 

8 SDB~EQUIP OPER LIST; 


type SDB_EQUIP UPDATE REC is 


record “ 

SDB_UNIT_ID * 

sdb“time“ 8 

SDB~OPPLAN : 

SDB~SIDE t 


SDB_UNIT; 

SYS_DATE_TIMEJ 

SYS_OPPLAN; 

SDB SIDE TYPE; 


A-33 







SDB EQUIP_ID 
SDB~AMOUNT_CHG 
SDB”cAT£GORY 
end record; 

— Personnel Structures 
type SDB_PERS_UPDATE_REC is 

record 

SDB_UNIT_ID 

sdbjtihe 

SDB_OPPLAN 
SDB_SIDE 
SDB_OFFICER_CHG 
SDB_ENI/ISTED_CHG 
end record; 

— Fuel Structures 

type SDB_FUEL_UPDATE_REC is 
record 

SDB_UNIT_ID 
SDB_TIME 
SDB_OPPLAN 
SDB_SIDE 
SDB_MOGAS_CHG 
SDB_AVGAS_CHG 
SDB_DIESEL_CHG 
end record; 


SDB EQUIPMENT; 

SYS~QUANTITY; 

SDBJEQUIP_CATEGORY 


SDB_UNIT; 

S Y S~DATE_TIME; 
SYS~OPPI*AN; 
SDB_SIDE_TTPE; 
SYS~QUANTITY; 
SYS~QUANTITY; 


SDB_UNIT; 

S Y S~DATE_TIME; 
SYS~OPPLAN; 
SDB*~SIDE_TYPE ; 
SYS~QUANTITY; 
sys”quantity; 
SYS~QUANTITY; 


— unit status structures 
type SDB_ACTIVITY_UPDATE_REC is 
record 

SDB_UNIT_ID S 

SDB_TIME : 

SDB_OPPLAN s 

SDBJSIDE « 

SDB~ACTIVITY s 

end record; 


SDB_UNIT; 
SYS_DATE_TIME; 
SYSOPPLAN; 
SDB_SIDE_TYPE; 

SDB FORCE ACTIVITY 


type SDB_MISSION_UPDATE_REC is 
record 

SDB_UNIT_ID 

SDB_TIME i 

SDB_OPPLAN « 

SDB_SIDE s 

SDB_MISSION X 

end record; 


SDB_UNIT; 
SYS~DATE_TIME; 
SYS_OPFLAN; 
SDB~SIDE_TYPE ; 
SDB”FORCE MISSION; 


type SDB_OPFOR_REINF_UPDATE_REC is 

record 

SDB_UNIT_ID S SDB_OPFOR_UNIT_ID; 

SDB_TIME _ : SYS~DATE_TIME; 

SDB_OPPLAN s SYS~OPPIAN; 

SDB_HOUR_CHG J SYS^BOUR; 

end record; 


type SDB_OPFOR_STR_UPDATE_REC is 











record 

SDB_UNIT_ID s 

SDB_TIME~ : 

SDB_OPPLAN J 

SDB_PERCENT_CHG I 

end record; 

— unit Location Structures 
type SDB_UNIT_LOCATION is 
record 

SDB UNIT_ID s 

SDBJTIME : 

SDB_OPPLAN ! 

SDB_LOCATION S 

end record; 

type SDB_LOCATION_MSG_REC is 
record 

SDB_UNIT_ID : 

SDBNAME : 

SDB_ECHELON S 

SDB_TYPE : 

SDB_BATTLE_FUNC S 

SDB_LOCATION t 

end record; 


SDB_OPFOR_UNIT_ID; 
SYSJDATE_TIME; 
SYS_OPPLAN; 
SYS~PERCENT; 


SDB_UMtT; 

SYS~DATE_TIHE; 

SYS_OPPLAN; 

SDB LOCATION REC; 


SDB_UNIT; 

String (SDB_UNIT_NAME_LEN); 
SDB_FORCE_ECHELON; 
SDB_UNIT_TYPE; 
SDB_BATTLE_FUNCTION; 
SDB - LOCATION REC; 


type SDB_LOCATION_LIST is array <SDB_UNIT range <>) of 

SDB_LOCATION_MSG_REC; 

type SDB_LOCATION_LIST_POINT is access SDB_LOCATION_LIST; 

type SDB_ALL_LOC_REC is 
record 

SDBjriME * S Y S_DATE_TIME; 

SDB_NUMBER_UNITS J SDBJUNIT; 

SDB_LIST s SDB_LOCATION_LIST (SDB_UNIT); 

end record; 


type SDB_LOCATION_UPDATE_REC is 
record 

SDB_UNIT; 

S Y S_DATE_TIME; 
SYS_OPPLAN; 
SDB_SIDE_TYPE; 

S D B_L OCATION_REC; 

end record; 


SDB_UNIT_ID l 
SDB_TIME s 
SDB_OPPLAN s 
SDB_SIDE S 
SDB LOCATION : 


bluefor Task Organization 
type SDB_BLUE_TASK_RECORD 
record 

SDB_UNIT_ID 
SDBNAKE 
SDB_ABBREV NAME 
SDB 8IGBER~ECHELON 
SDB~NEXT_SIBLING 
SDB - FIRST_CHILD 
SDB~RELATE 


structures 

is 

j SDB BLUEFOR_UNIT_ID; 

J String (SDB - UNIT_NAME_LEN); 
X string (SDB~UNIT_NAME_LEN); 
1 SDB_BLUEFOR - UNIT - ID; 

J SDB_BLUEFOR~UNIT_ID; 

: SDB - BLUEFOR - UNIT - ID; 

l SDB~BLUEFOR - TO RELATE; 


A-35 







SDBJTYPE 
SDB~ECHELON 
SDB_BATTLE_FUNC 
end record; 


SDB_UNIT_TYPE; 
SDB_FORCE_ECHELON; 
SDB BATTLE FUNCTION; 


type SDB_BLUEFOR_TASK_ORG_LIST is array (SDBJBLUEFOR UNIT_ID range <>) of 

SDB_8LUE_TASK_REC0RD; 

type SDB_BLU£FOR_TASK_POINT is access SDB_BLUEFOR_TASK_ORG_LIST; 


type SDB_BLUE_TASK_ORG_REC is 
record ” 

SDBJTIME j 

SDB~NUMBER_UNITS : 

SDB~LIST i 

end record; 


S Y S_DATE_TIHE; 

S D B~BLUEFOR_UNIT_ID; 
SDB~BLUEFOR_TASK_ORG LIST ( 
SDB_BLUEFOR_UNIT_ID); 


type SDB_BLUE_TASK_ORG_UPDATE_REC is 


record 

SDB_UNIT_ID 
SDB_TIME~ 
SDB_OPPLAN 
SDB_HIGHER_ECHELON 
SDB_RELATE 
end record; 


SDB_BLUEFOR_UNIT_ID; 
SYS_DATE__TIME; 
SYS_OPPLAN; 
SDB_BLUEFOR_UNIT_ID; 
SDB_BLUEFOR~TO_RELATE; 


- OPFOR Task organization Structures 


type SDB_OPFOR_TASK_RECORD is 
record 

SDB_UNIT_XD 

SDB_NAME 

SDB_HIGHER_ECHELON 
SDB_NEXT_SIBLING 
SDB_FIRST_CHILD 
SDB_TYPE 
SDB_ECHELON 
SDB_BATTLE_FUNC 
end record; 


SD8_OPFOR_UNIT_ID; 
string (SDB unit_name_len); 
SDB_OPFOR_UNIT_ID; 
SDB_OPFOR_UNIT_ID; 
SDB_OPFOR_UNIT~ID; 
SDB_UNIT_TYPE; 
SDB_FORCE_ECHELON; 

SDB BATTLE FUNCTION; 


type SDB_OPFOR_TASK_ORG_LIST is array (SDB_opfor_unit_id range <>) of 

SDB_OPFOR_TASK_RECORD; 

type SDB_OPFOR_TASK_POINT is access SDB__OPFOR__TASK_ORG_LIST; 

type SDB_OPFOR_TASK_ORG_REC is 
record 

SDB_TIME : S Y S_D ATE__T I ME; 

SDB~NUMBER_UNITS i SD8~0PF0R_UNIT_ID; 

SDB_LIST : SDB~OPFOR_TASK~ORG_LIST (SDB_OPFOR_UNIT_ID) 

end record; " ” 


type SDB_OPFOR_TASK_ORG_UPDATE_REC is 
record 

SDB_UNIT_ID I SDB OPFOR UNIT ID; 

SDB~TIHE~ : SYS_DATE__TIHE;~ 

SDB_OPPLAN s SYS_OPPLAN; 

SDB~HIGHER ECHELON : SDB OPFOR UNIT ID; 


A-36 


end record 


- control Measure structure 

type SDB_CONTROL_MSR_LlST is array (SDB_CONTROL_MEASURE_ID range <>) of 

SDB__CONTROL_KEASURE_REC; 

type SDB_CONTROL_MSR_POINT is access SDB~CONTROL_MSR_LIST; 

type SDB_ALL_CNTRL_MSR is 
record 

SDB_NUMBER_CM 
SDB_LXST 
end record; 

type SDB__CNTRL_POINT_LIST is array (SDB_CONTROL_MEASURE_ID range <>) of 

SDB__CNTRL_MSR_POINT_REC ; 

type SDB_CNTRL_POINT_POINT is access SDB~CHTRLJPOINT_LIST; 

type SDB_ALL__CNTRL_POINT is 
record ~ 

SDB_NUMBER_CM : 

SDB_LIST : 

end record; 

type SDB_CNTRL_MSR_LOC_REC is 
record 

SDB_ID ; 

SDB_TIME : 

SDB_OPPLAN s 

SD B_LOCATION_TYPE ; 

S DB_LOCATION s 

end record; 

type SDB_CNTRL_MSR_STAT_REC is 
record 

SDB_ID : SDS_CONTROL_KEASURE_ID; 

SDBJTIME : SYS_DATE_TIME; 

SDB_OPPLAN s SYS_OPPIJVM; 

SDB_LOCATION_TYPE s SDB~CONTROL_MEASURE_LOC_TYPE; 

SDB_STATUS : SDB_CONTROL_MEASURE_STATUS; 

end record; 

type SDB_CNTRL_MSR_EFF_REC is 

record 

SDB_ID ! 

SDBJ3PPLAN : 

SDB_LOCATION_TYPE : 

SDB_EFFECT_FROM s 

SDB~EFPECT_TO : 

end record; 

Obstacle Structure 

type SDB_OBSTACLE_L1ST is array (SDB_OBSTACLE_ID range <>) of 

sdb_obstacle_rec7 

type SDB_OBSTACLE_POINT is access SDB_OBSTACLE_LIST; 
type SDB_ALL OBSTACLE is 


SDB_CONTROL HEASURE_ID; 

SYS OPPLAN;” 

SDB~CONTROL MEASURE_LOC_TYPE; 
SYS_DATE_TIKE; 

SYS DATE TIME; 


SDB_CONTROL_MEASURE_ID; 
SYS_DATE_TIME; 

SYS_OPPLAK; 

S DB_CONTROL_MEASURE_LOC_TYPE; 
SDB CONTROL MEASURE POINTS; 


SDB_CONTROL_MEASUR£_ID; 

SDB CNTRL POINT_LIST (SDB CONTROL_MEASURE_ID) 


: SDB_CONTROL_MEASURE_ID; 

: SDB CONTROL MSR_LIST (SDB CONTROL_MEASURE_ID) 


A-37 





record 

SDB_NUMBER_OBS J SDB OBSTACLE_ID; 

SDB_LIST “ : SDB~OBSTACLE_LXST (SDB_OBSTACLE_ID); 

end record; 

type SDB__OBSTACLE_LOC_REC is 
record 

SDB_ID S SDB_OBSTACLE_ID; 

SDBJTIME : S Y S~DATE_TIME; 

SDB~OPPLAN S SYS~OPPLAN; 

SDB_LOCATION : SDB_LOCATION_REC; 

end record; 

type SDB_OBSTACLE_STAT_REC is 
record 

SDB_ID j SDB OBSTACLE_ID; 

SDB_TIME s S Y S~DATE_TIHE; 

SDS_OPPLAN : SYS_OPPLAN; 

SD8_STATUS : SDB~OBSTACLE_STATUS; 

end record; 

type SDB_OBSTACLE_EFF_REC is 
record 

SDB_ID s S DB_OBSTACLE_ID; 

SDB_OPPLAN ; SYS_OPPLAN; 

SDB_EFFECT_FROM s SYS DATEJTIME; 

SDB_EFFECT_TO « SYS~DATE~TIME; 

end record; ~ 

- operational Planning records 

type SDB_OPPLAN_TYPE is (G2 JPERSONAL, G3_PERSONAL, G4 PERSONAL, EX_PERSONAL, 
SHARED, BASE_SCENARIO); 

— List of Operational plans 
type SDB_OPPLAN_REC is 

record 

SDB_OPPLAN_ID s SYS_OPPLAN; 

SDB_TYPE : SDB_OPPLAN_TYPE; 

SDB_OPPLAN_NAME » STRING (SYS_POP_UP_TEXT); 

SDB_BASE ~ j SYS OPPLAN; ~ 

SDB_DATE__TIME : SYS_DATE_TIKE; 

end record; 

— List of current operational Plans 

type SDB_OPPLAN_LIST is array <SYS_OPPLAN) of SDB_OPPLAN_REC; 

type SDB_OPPLAN_LIST_REC is 
record 

SDB_COUNT : SYS_OPPLAN; 

SDB_LIST j SDB~OPPLAN_LIST; 

end record; 

— New Operational Plan record 
type SDB_NEW_OPPLAN_REC is 

record 


A-38 



SDB_OPPIAN_ID 
SDB~TYPE 
S D B~OP PUVN_NAME 
SDB~BASE ~ 
SDBJTIME 
end record; 


end SDB SITUATION DB; 


SYS_OPPLAN; 
SDB_OPPLAN_TYPE; 

STRING (SYS_POP_UP_TEXT); 

SYS_OPPLAN;~ 

SYS DATE TIME; 



—cpc package specification name: SYSTEM_PACKAGE 

—cpc description: Defines types that are used throughout the EDDIC system. 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications International Corporation 
424 Delaware, suite C3 
— Leavenworth, Ks 66048 


package SYSTEM_PACKAGE is 

— computer limitations 

— Number of bits in a byte 

SYS_BITS_IN_BYTE : constant INTEGER := 8; 

SYS_BITS_IN_NIBBLE : constant INTEGER := 4; 

— EDDIC database limitations; 

— Number of records in a database 

type SYS_DB_SIZE is range 0..INTEGER'LAST; 

for SYS_DB__SIZE'SIZE use 4*SYS_BITS_IN_BYTE; 

— Number of characters for names in a database 
subtype sys_name_size is INTEGER range 1..40; 

— File descriptor storage for using c based file I/O utilities 
type SYS_FILEJDESC is range INTEGER'FIRST..INTEGER'LAST; 

for SYS_FILE_DESC'SIZE use 4*SYS_BITS_IN_BYTE; 

— Asset Quantity range 

type SYS_QUANTITY is range -999999..999999; 

— Width and Depth of items 

type SYS_WIDTH__DEPTH is range 0..9999; 

— Orientation - as in a compass 

type SYS_DEGREE is range 0..359; 

— String Items 

subtype SYS_TEXT is string; 

type SYS_TEXT_PTR is access SYS_TEXT; 

— EDDIC product limits 

— Number of characters in header 

subtype SYS_HEADER_LENGTH is INTEGER range 0..600; 

— Number of characters in a Product 

subtype SYS_PRODUCT_LENGTH is INTEGER range 0..32000; 

— Product categories 


A-40 


type SYS_PRODUCT CAT is (DETAIL, AGGREGATE, SUMMARY); 


— Blank Line f/r blank filling strings 
subtype SYS_BLANK_LEN is integer range 1..80; 

SYS_BLANK : String (SYS BLANK LEN) x« (SYS_BLANK_LEN => ' '); 


EDDIC pop-up and walking menu limitations 


— Types used by ued_walking_menu to create walking menus 

subtype SYS_MENU_NAME_LEN is INTEGER range 1..30; 

type SYS_MENU_TR£E_LIMIT is range 0..1000; 

subtype SYS_MENU_TREE_STRING is STRING (SYS_MENU_NAME_LEN); 

type sYS_MENU_TREE ~is array (SYS_MENU_TREE~LIMIT range <>) of 

sys_menu_tree_string7 

type SYS_MENU_TREE_PTR is access SYS_KENU_TREE; 


— Menu Tree limits for the 
subtype SYS_REF_TREE 
subtype SYS_HELP_TREE 
subtype SYS_VIEW_C2_TR£E 
subtype SYS_BUILD_C2_TREE 
subtype SYS_CONTROL_TREE 
subtype SYS_MAP_TREE 
subtype SYS_UNIT_TREE 
subtype SYS_CM_TREE 
subtype SYS_OBS_TREE 


types of menu trees in the system; 


is SYS_MENUJTR£E_LIKIT 
is SYS_MENUJTREE_LIMIT 
is SYS_M£NU_TREEJLIMIT 
is SYS_MENU_TREE_LIKIT 
is SYS _ME N U_TREE_LIMIT 
is S Y S_MENU_TREE_LIMIT 
is SYS_MENU_TREE_LIMIT 
is SYS_MENU_TREE_LIMIT 
is SYS MENU TREE LIMIT 


range 0..400; 
range 0..400; 
range 0..800; 
range 0..100; 
range 0..100; 
range 0..200; 
range 0..30; 
range 0..2 0; 
range 0..2 0; 


— Number of pop-up menus in a walking menu 

type SYS_WALKING_MENU is range 0..250; 

for SYS WALKING MENU'SIZE use 2*SYS BITS IN BYTE; 


— Number of pop-up menu cells in a walking menu 

type SYS_WALKING_CELL is range 0..800; 

for SYS WALKING CELL'SIZE use 2*SYS BITS IN BYTE; 


— Values of pop-up menu cells in a walking menu 

type SYS_WALKING_CELL_VALUE is range -1..800; 

for SYS WALKING CELL VALUE'SIZE use 2*SYS BITS IN BYTE; 


— Number of pop-up menu cells in a pop-up menu 
type SYS_POP_UP_CELL is range 0..20; 

for SYS_POP_UP_CELL'SIZE use 2*SYS_BITS_IN_BYTE; 

— Length of the text in a pop-up menu element (Last char must be a null 
subtype sys_pop_up_text is integer range 1..21; 


— Text for each cell of each pop-up menu in the walking menu 
subtype SYS_MENU_TEXT__STRING is STRING (SYS_POP_UP_TEXT); 
type SYS MENU_TEXT is'erray (SYS_WALKING_CELL range <>) of 

SYS_MENU~TEXT_STRING; 

type SYS_MENU_TEXT_PTR is access SYS_KENU_TEXT; 

— Pop-up index of the pop-up menu that is the child of each pop-up menu cell 

— index into UWN_POP_UP START and UWN_POP_UP_LENGTH 

type SYS_POP_UP_CHILD**is”array (SYS_WALXING_CELL range <>) of 

SYS WALKING MENU; 


A-41 








type SYS_P0P_UP_CHILD_PTR is access SYS_POP_UP_CHILD; 

— index into sys_pop_up_text for the start of each pop-up menu in the 

— walking menu 

type SYS_P0P_UP_START is array (SYS_WALKING_MENU range <>) of 

SYS_WALKING_CELL; 

type SYS_POP_UP_START_PTR is access SYS_POP_UP_START; 

— Number of cells in each pop-up menu 

type sys_pop_up_length is array (SYS__KALKING_MENU range <>) of 

SYS_POP_UP_CELL; 

type SYS_POP_UP_LENGTH_PTR is” access SYS_POP_UP_LENGTH; 

— Types of Pop-up menus for the digital map 

type SYS_MAP_MENUS is (MAP_CONTROL_MENU, BLUEFOR_UNIT_MENU, 

BLUEFOR_CNTRL_MSR_MENU, BLUEFOR_OBSTACLE_MENU, OPFORJJNIT_HENU, 
OPFOR_CNTRL_MSR_MENU, OPFOR_OBSTACLE_MENU); 

— Types of products in the system 

type SYS_PRODUCT is (TEXT_R£PORT, TACTICAL_OVERLAY, FORM, 

INSTRUCTIONS, FEEDBACK, ACKNOWLEDGEMENT); 

— Map and map overlay menu options 
type sys_map_control is 

(GRID_ON, CONTOUR_ON, ROAD_ON, HYDRO_ON, URBANON, MISC_ON, 

GRID_OFF, CONTOUR_OFF, ROAD_OFF, HYDRO_OFF, URBAN_OFF, MISC_OFF, 
FEATURE_MENU, 

BACK CCM, BACK_ELEV, BACK_SHADE, BACK_3D, BACK_VEG, BACK_NONE, 

SCALE_40, SCALE_80, SCALE 160, SCALE_400, SCALE_800, 

BLUE_DIV_ON, BLUE_BDE_ON,~BLUE_BN_ON, BLUE_CO_ON, 

BLUE_DIV_OFF, BLUE_BDE_OFF, BLUE_BN_OFF, BLUE_CO_OFF, 

BLUE_CBT_ON, BLUE_CS_ON, BLUE_CSS_ON, 

BLUE_CBT_OFF, BLUE_CS_OFF, BLUE_CSS_OFF, 

BLUE_NAME_ON, BLUE_NAME_OF F, BLUE_SYMBOL_ON, BLUE_SYMBOL_OFF, 
BLUE_UNIT_MENU, 

OPFOR_DIV_ON, OPFOR_REG_ON, OPFOR_BN_ON, OPFOR_CO_ON, 

OPFOR_DIV_OFF, OPFOR_REG_OFF, OPFOR_BN_OFF, OPFOR~CO_OFF, 
OPFOR_COMMIT_ON, OPFOR_REINF_ON, OPFOR~ARTIL_ON, "" 

OPFOR_COMMIT_OFF, OPFOR_REINF_OFF, OPFOR_ARTIL_OFF, 

OPFOR NAME_ON, OPFOR_NAME_OFF, OPFOR_SYMBOL_ON, OPFOR_SYMBOL_OFF, 
OPFOR - UNIT_MENU, 

BLUE_CM_EAC_ON, BLUE CM_CORP_ON, BLUE_CM_DIV_ON, BLUE_CM_BDE_ON, 
BLUE_CM~BN_ON, BLUE_CM_POINT”oN, BLUE~CM_LINE_ON, BLUE_CM_AREA_ON, 
BLUE_CM~ROUTE_ON, BLUE_CM_OBST_ON, BLUE_CM_CROSS_ON, BLUE_CM_FIRE_ON, 
BLUE_CM~MAPF ON, 

BLUE_CM~EAC OFF, BLUE CM CORP_OFF, BLUE_CM_DIV_OFF, BLUE_CM_BDE_OFF, 

BLUE CM~BN OFF, BLUE CM POINT_OFF, BLUE“cm”lINE_OFF, BLUE_CM_AREA_OFF, 
BLUE~CM_ROUTE OFF, BLUE~CM_OBST_OFF, BLUE_CM_CROSS_OFF, BLUE~CM_FIRE_OFF 
BLUE~CM~MAPF_OFF, 

BLUE~CM~ECHELON MENU, BLUE CMJTYPE MENU, 

OPFOR_CM ARMY ON, OPFOR CM~DIV_ON, _ OPFOR_CM_REG_ON, OPFOR_CM_BN_ON, 
OPFOR_CM~POINT_ON, OPFOR_CM_LINE_ON, OPrOR_CM_AREA_ON, OPFOR~CM_ROUTE_ON 
OPFOR“cM~OBST ON, OPFOR_CM_CROSS~ON, OPFOR~CM_FIRE_ON, OPFOR_CM~MAPF_ON, 
OPFOR~CM _ ARMY _ OFF, OPFOR CM_DIV_OFF, OPFORjCM_REG__OFF, OPFOR_CM_BN_OFF, 
OPFOR~CM~POINT_OFF, OPFOR_CM_LINE_OFF, OPFOR_CM_AREA_OFF, 

OPFOR - CM _ ROUTE - OFF, OPFOR - CM_OBST~OFF, OPFOR_CM_CROSS_OFF, 




OPFOR_CM_FIRE_OFF, OPFOR_CM_MAPF_OFF, 

OPFOR~CM_ECHELON_MENU, OPFOR_CMJTYPE_MENU, 

BLUE__NEW_AREA_OPER, BLUE_NEW~ASSMBLY_AREA, BLUE_NEW_ATTCK_POS, 
BLUE~NEW_BATTLE_POS, BLUE_NEW_BDE_SPT_AREA, BLUE_NEW_BN_SPT_AREA, 
BLUE_N£W_DIV_SPT_AREA, BLUE_NEW__DROP_ZONE, BLUE_NEW_FREE_FIRE_AREA, 
BLUE~NEW~LAND_ZOME, BLUE_NEW_NO~FIRE_AREA, BLUE_NEW_OBJECTIVE, ' 
BL’JE~} tEW _ RS T R CT_FIRE_AREA, BLUe7nEW_ZONE_ACTION, BLUE_NEW_ASSLT_CROSS, 
BLUE~NEW_RAFT_SITE, BLUE_NEW_GRP_TRGTS, BLUE_NEW_BOUNDARY, 
BLUE~NEW_BRIDGE_LINE, BLUE NEW_COORD_FIR_LN,~BLUE_NEW_FEBA, 
BLUE~NEW~FIRE_SPT_COORD Ln7 BLUE_NEW_FLOT, BLUE_NEW_HOLD_LINE, 
BLUe7nEW_LIGHT_LINE, BLUE_NEW_LIMIT_ADV, BLUE_NEW_LINE_CONTACT, 

blue_new_lineJdepart, blue_new_phase_line, blue_new_coa__line, 

BLUE_NEW_RSTRCT_FIRE LINE,” 

blue7new_air_field, blue_new_bridge, blue_new_building, blue_new_city, 
BLUe3»EW_LAKE, blue_new_map_ref, blue_new_mount_peak, 

BLUE_NEW_ROAD__INTRCT, BLUE_NEW_TOWN, BLUe7nEW_VILLAGE, BLUE_NEW_CHECKPNT 
BLUE_NEW_COLLECT_PNT, BLUE_NEW_CONTACT_PNT, BLUE_NEW_COORD_PNT, 
BLUE_NEW_CRIT_EVENT, BLUE_NEW_LINK_UP_PNT, BLUE_NEW_PASS_PNT, 
BLUE_NEW_PNT_DEPART, BLUE_NEW_RELEAS,£_PNT, BLUE_NEW_START_PNT, 
blue7new_strong_pnt, blue7hew_traff_cntrl_pnt, BLUE_NEW_AIR_AXIS_ADV, 
blue7new_air_corr, blue_new_grnd_axis_atk, blue_new_grnd_axis_sup, 

BLUE_NEW_DIR_ATTACK, BLUE_NEW_FEINT, BLUE_NEW_MAIN_SPLY_RTE, 
BLUE_NEW_ROUTE, 

OPFOR_NEW_AREA__OPER, OPFOR_NEW_ASSMBLY_AREA, OPFOR_NEW_ATTCK_POS, 
OPFOR_NEW_BATTLE_POS, OPFOR_NEW_J3DE_SPT_AREA, OPFOR_NEW_BN_SPT_AREA, 
OPFOR_NEW_DIV_SPT_AREA, OPFOR_NEW_DROP_Z ONE, OPFOR_NEW_FREE_FIRE_AREA, 
OPFOR_NEW_LAND_ZONE, OPFOR NEW_NO_FIRE_AREA, OPFOR_NEW_OBJECTIVE, 

OPFOR_NEW_RSTRCT_FIRE_AREA, OPFQR_NEW_ZONE ACTION, OPFOR_NEW_ASSLT_CROSS 
OPFOR_NEW_RAFT_SITE, OPFOR_NEW_GR? TRGTS, OPFOR_NEW_BOUNDARY, 
OPFOR_NEW_BRIDGE_LINE, OPFOR_NEW_COORD_FIR_LN, OPFOR_NEW_FEBA, 
OPFOR_NEW_FIRE_SPT_COORD_LN, OPFOR_NEW_FLOT, OPFOR_NEW_HOLD_LINE, 
OPFOR_NEW_LIGHT_LINE, OPFOR_NEW_J,IMIT_ADV, OPFOR_NEW_LINE_CONTACT, 
OPFOR_NEW_LINE_DEPART, OPFOR_NEW_PHASE_LINE, OPFOR_NEW_COA_LINE, 
OPFOR_NEW_RSTRCT_FIRE_LINE, 

OPFOR_NEW_AIR_FIELD, OPFOR_NEW_BRIDGE, OPFOR_NEW_BUILDING, 
OPFOR_NEW_CITY, OPFOR NEW_LAKE, OPFOR_NEW MAP_REF, OPFOR_NEW_MOUNT_PEAK, 
OPFOR_NEW_ROAD_INTRCT7 OPFOR_NEW_TOWN, OPFOR_NEW_VILLAGE, 
OPFOR_NEW_CHECKPNT, OPFOR NEW_COLLECT_PNT, OPFOR_NEW_CONTACT_PNT, 
OPFOR~NEW_COORD_PNT, OPFOR_NEW_CRIT_EVENT, OPFOR_NEW_LINK_UP_PNT, 
OPFOR_NEW_PASS_PNT, OPFOR_NEW_PNT_DEPART, OPFOR_NEW_RELEASE_PNT, 
OPFOR_NEW_START_PNT, OPFOR_NEW_STRONG_PNT, OPFOR_NEW_TRAFF_CNTRL_PNT, 
OPFOR_NEW_AIR_AXIS__ADV, OPFOR_NEW_AIRj:ORR, OPFOR_NEW_GRND_AXIS_ATK, 
OPFOR_NEW_GRND_AXIS_SUP, OPFOR_NEW_DIR_ATTACK, OPFOR_NEW_FEINT, 
opfor_new_main7sply7 r te, OPFOR_NEW_ROUTE, 

BLUE_NEW_ABATIS, BLUE NEW AT_DITCH, BLUE_NEW_BRIDGE DEMO, 

BLUE_NEW_CHEMICAL, BLUE_NEW_CRATER, BLUe7»IEw7dAM_DEMO, 

BLUE_NEW_FLOODING, BLUE~NEW~LOG_POSTS, BLUE NEW_HINE AP, 

blue7new_mine_at, blue_new_mine7ap_at, blue7new_nuclear, 

BLUe7nEW_SCT_MINE_AP , blue”NEW_SCT _ MINE_AT , ~BLUE_NEW_SCT_MINE_AP_AT, 
BLUE_NEW_TUNNEL DEMO, BLUe'nEW^WIRE, ~ ~~ 

OPFOR_NEW_ABATIS, OPFOR NEW_AT_DITCH, OPFOR_NEW_BRIDGE_DEMO, 

OPFOR~NEW~CHEMICAL, OPFOR NEW CRATER, OPFOR^NEW^DAM DEMO, 

OPFOR^WEW”FLOODING, OPFOR _ NEw7LOG POSTS, OPFOR_NEW_MINE_AP, 

opfor7new7mine_at, opfor_new_mine“ap_at, OPFOR^NEW^NUclear, 
opfor”new7sct_mine ap, opfor_new_sct7mihe_at, opfor_new_sct_mine_ap_at, 

OPFOR~NEW~TUNNEL DEMO, OPFOr7nEW _ WIRE, “ 






NEW_OPPLAN, NEW_WORKING_OPPLAN, ELEVATZON_QUERY, NO_ACTION); 

type SYS_UNIT_OPTION is 

(MOVE_UNIT, UNIT_STATUS, DEACTIVATE_UNIT); 

type SYS_CM_OPTION is 

<MOVE_CNTRL_MSR, CNTRL_MSR_STATUS, MOVE_POINT, IHSERT_POINT, 
INSERT_POINT_AFTER, DELETE_CNTRL_MSR, DELETE_POINT); 

type SYS_OBS_OPTION is 

(MOVE_OBSTACLE, OBSTACLE_STATUS, DELETE_OBSTACLE); 

— Map and map overlay menu limits 

subtype SYS_MAP CELL is SYS_WALKING_CELL 

subtype SYS_UNIT_CELL is SYS_WALKING_CELL 

subtype SYS_CM_CELL is SYS_WALKING~CELL 

subtype SYS_OBS_CELL is SYS_WALKING~CELL 

subtype SYS_MAP~MENU is SYS_WALXING_MENU 

subtype SYS_UNXT_MENU is SYS_WALKING_MENU 

subtype SYS_CM_MENU is SYS_WALKING_MENU 

subtype SYS_OBS_MENU is SYS_WALKING_MENU 

— Map and map overlay option array 
type SYS_MAP_CONTROL_ARRAY is array (SYS_WALKING_CELL range <>) of 

SYS_MAP_CONTROL ; 

type sys_map_control_ptr is access SYS_MAP_CONTROL_ARRAY; 


— Unit overlay menu option array 

type SYS_UNIT_OPTION_ARRAY is array (SYS_WALKING_CELL range <>) of 

SYS UNIT_OPTION; 

type SYS_UNIT_OPTION_PTR is access SYS_UNIT_OPTION_A\RAY; 

— Control Measure overlay menu option array 

type sys_cm_option_array is array (SYS_WALKING_CELL range <>) of 

SYS_CM_OPTION; 

type SYS_CM_OPTION_PTR is access SYS_CM_OPTION_ARRAY; 

— obstacle overlay menu option array 

type sYs_OBS_OPTION_ARRAY is array (SYS_WALKING_CELL range <>) of 

S YS_OBS__OPTION ; 

type SYS_OBS_OPTION_PTR is access SYS_OBS_OPTION_ARRAY; 

EODXC Textual message limitations 

— Number of message routing options 

subtype SYS_ROUTE_OPTION is SYS_WALKING_CELL range 0..10; 

— Number of Operational Plans and limits on the OPPLAN IDs 
type SYS_OPFLAN is range 0..50; 

EDDXC window system limitations 

— window Name 

subtype SYS_WXNOOW_NAME is SYS_TEXT (1..30); — This allows name to have max 

— of 29 chars + terminating 


range 0..200; 
range 0..4; 
range 0..7; 
range 0..4; 
range 0..50; 
range 0..1; 
range 0..1; 
range 0..1; 





NULL 


— Types for buttonjnenus 

type SYS_M£NU_BUTTON_VALUES is range -1..32760; 

for SYS_MENU_BUTTON_VALUES ' SIZE use 2*S YS_BITS_IN_BYTE; 

subtype~SYS_M£NU BUTTON INDEX is SYS MENU~BUTTON_VALUES 

range 0 ..sys_kenu_button_values'last; 

— Value for indicating no default pushbutton 
SYS_NO_D£FAULT_PUSHBUTTON s constant SYS_KENU_BUTTON_VALUES s» -1; 

type SYS_M£NU BUTTON LABEL is array (SYS_MENU_BUTTON_INDEX range <>) of 

~ SYS_MENU_TEXT__STRING; — 

type SYS_MENU_BUTTON_LABEL_PTR is access SYS_MENU_BUTTON_LABEL; 
type sys_menujbotton“status ig array ( sys_mbnu_button_INDEX range <>) of 
Boolean; 

type SYSJKENU_BUTTON_STATUS_PTR is access SYS_MENU_BUTTON_STATUS; 

— scrollbar's orientation 

type SYS_SB_DIR£CTION is range 

for SYS_SB_DIRECTION' SIZE use SYS_BITS_IN_BYTE; 

SYS_SB_DIR_HORZ : SYS_SB_DIRECTION -7; 

SYS_SB_DIR_VERT : SYS_SB_DIRECTION 1* -6; 

— text alignment 

type SYS_TEXT_ALIGNMENT is range 1..4; 

for SYS_TEXT_ALIGNMENT'SIZE use 4*SYS_BITS_IN_BYTE; 

SYS_TEXT_ALIGN_CENT s SYS_TEXT_ALIGNKENT «* 1; 

SYS_TEXT_ALIGN_LEFT : SYS~TEXT~ALIGNMENT J- 2; 

SYS_TEXT_ALIGN_RIGHT l SYS~TEXT_ALIGNHENT !« 3; 

SYS_TEXT~ALIGN_NONE j SYS_TEXT_ALIGNMENT »« 4; 

— Window Types 

type SYS_wiNDOW_TYPE is range 0..2; 

for SYS_WINDOW_TYPE'SIZE use 2*S YS_BITS_IN_BYTE; 

SYS_WINDOW j SYS_WINDOW_TYPK :« 0; 

SYS_DISPLAY_PANEL j S Y S_W I NDOW_TYPE 1; 

SYS_DEPINED_BUTTON t SYS_WINDOW__TYPE 2; 

subtype SYSJDESTINATIONJTYPE is’~SYS_wiNDOW_TYPE range 0..1; 
SYS_WINDOW_DEST t SYS_DESTINATION_TYPE 0; 

SYS_PANEL_DEST : SYSJDESTINATIONJTYPE 1; 

— Label position for field editors 

type SYS_LABEL_POSITION is range 0..1; 

for SYS_LABEL__POSITION'SIZE use SYS_BITS_IN_BYTE; 

SYS_LABEL_LEFT X SYS_LABEL POSITION »- 0; 

sys_label“right < SYS_LABEL~POSITION I- 1; 

— Number of icon stacks on EDDIC screen and size of the stack 

type SYS_iC0N is range 0..5 j 

for SYSjrcON' SIZE use 2*SYS_BITS_IN_BYTE; 

type SYS icon STACK is range 0..6; ~ 

for SYS_ICON_STACK'SIZE use 2*SYS_BITS_IN_BYTE; 

SYS_ICON_RETERENCE l SYS_ICON “ J- 0; 

SYS~ICON~VIEW C2 : SYS _ ICON t» 1; 





SYS_ICON_MESSAGE : SYS_ICON J- 
SYS_ICON_BUILD_C2 : SYS_ICON !■= 
SYS_ICON_AIDS : SYS_ZCON !» 
SYS_ICON_CONTROL s SYS~ICON :■> 
— Icon Name 

subtype SYS_ICON_NAM£ is SYS_TEXT(1..7)} — 


2 ; 

3; 

4; 

5; 


This includes space for 6 
characters plus terminating Null 


— Types of tools in the tool window 

type SYS_TOOLS is (NO_TOOL, SCRATCH_PAD, TSTM, CALCULATOR, 
TASK_ORGANIZATXON, FORM); 


— Range of ID's for elements of a window 
subtype SYS_WINDOW_ELE_ID is INTEGER} 

SYS_NO_WINDOW ~ : constant SYS_WINDOW_ELE_ID -1} 

SYS_ROOT_WINDOW s constant sys_window~ele_id :« 0} 

— Global value for indicating no subpanel 

SYS NULL SUBPANEL : constant SYS WINDOW ELE ID : = 0; 


— Input types returned from window utilities 

type SYS_window_input is range 0..20; 

for SYS WINDOW INPUT'SIZE use 2*SYS BITS IN BYTE: 


SYS_INPUT_NONE 

S Y S_INPUT_TERMINATE 

SYS_INPUT_MENU_SELECT 

SY3_INPUT_CHECKBOX 

SYS~INPUT_SCROLLBAR 

SYS_INPUT_MESSAGE 

SYS_INPUT_BUTTON 

SYS_INPUT_MOUSE_PRESS 

SYS_INPUT_MOUSE_RELEASE 

SYS_INPUT_TRAVERSAL 

SYS_INPUT_EXPOSURE 

SYS_INPUT_OPEN 

SYS_INPUT_RESIZE 

SYS_INPUT_CLOSE 

SYS_INPUT_SAVE 

SYS_INPUT_RESET 

SYS_INPUT_PUSH_BUTTON 

SYS INPUT RADIO BUTTON 


constant sys_window_input 
constant sys_window_input 
constant SYS_WINDOW_lNPUT 
constant sys_window_input 
constant sys_W!NDOW_input 
constant SYS_window_input 
constant SYS_window_INPUT 
constant SYS_window_input 
constant SYS_wiNDOW_lNPUT 
constant SYS_WINDOW_INPUT 
constant SYS_window_input 
constant SYS_window_INPUT 
constant SY3_WINDOW_INPUT 
constant SYS~WINDOW_INPUT 
constant SYS_WINDOW_INPUT 
constant SYS_WINDOW_INPUT 
constant SYS window_input 
constant SYS~WINDOW INPUT 


:« 0 
1 

!« 2 
3 

:« 4 

- 5 

:» 6 
» 7 

- 8 
» 9 
- 10 
- 11 
- 12 

- 13 
■ 14 

- 15 

- 16 
- 17 


— input types returned from the digital map control system 
SYS INPUT MAP : constant SYS WINDOW INPUT 20; 


— Input type codes returned from window utilities 
type SYS_ACTION_COUNT is range 0..5; 
subtype SYS_WINDOW_VALUE is INTEGER; 

subtype SYS_BUTTON~COUNT is SYS WINDOW VALUE range 0..2; 
SYS_VALUE_RIGHT_BUTTON : constant SYS WINDOW_VALUZ 0; 

SYS“VALUE~MIDDLE_BUTTON : constant SYS _ WINDOW~VALUE 1; 

SYS_VALUE~LEFT_BUTTON : constant SYS~WINDOW~VALUE 2; 

— Traversal type codes returned 

SYS_TRAVERSE_NEXT : constant SYS_WINDOW_VALUE J- 1; 

SYS TRAVERSE~PREV t constant SYS _ WINDOW VALUE »- 2; 


A-46 








sys_traverse_up 

SYS TRAVERSE~DOWN 


constant SYS_WiNDOW_VALUE :« 3; 
constant SYS WINDOW VALUE 4; 


— Button Pressed Down 
SYS_RIGHT_BUTTON_DOWN 
SYS_MIDDLE_BUTTON_DOWN 
S YS_LEFT_BUTTON__DOWN 
SYS_RIGHT_BUTTON UP 
SYS_MIDDLE_BUTTON_UP 
SYS_LEPT_BUTTON_UP 

— Input types returned 
SYS_MAP_CHANGE 
SYS_BLUEFOR_UNIT CHANGE 
SYS_BLUEFOR_UNIT~DEACT 
SYS~OPFOR_UNIT_CHANGE 
sys_opfor~unit“deact 

SYS_CNTRL_MSR_CHANGE 

SYS_CNTRL_MSR~DELETE 

SYS_OBSTACLE_CHANGE 

SYS_OBSTACLE_DELETE 

SYS_OPPLAN_CHANGE 

SYS WORK OPPLAN CHANGE 


or Up actions 

j constant SYS_ACTION_COUNT :« 0; 
: constant SYS_ACTION~COUNT 1; 
s constant SYS ACTION~COUNT s- 2; 
t constant S Y S~ACTION~COUNT 3; 
j constant SYS~ACTION_COUNT J- 4; 
s constant SYS ACTION~COUNT s« 5; 


from the digital map input utiliity 

constant SYS_WINDOW_VALUE 0 

constant SYS_WINDOW_VALUE 1 

constant SYS_WINDOW_VALUE :=* 2 

: constant SYS_WINDOW~VALUE s- 3 

s constant SYS_WINDOW_VALUE 4 

! constant SYS_WINDOW_VALUE 5 

t constant SYS_WINDOW_VALUE •■ 6 

s constant SYS_WlNDOW_VALUE 7 

: constant SYS_WINDOW_VALUE :« 8 

t constant SYS_WlNDOW_VALUE :» 9j 

s constant SYS WINDOW VALUE 10; 


— Input data returned from the window utilities 
type sys_window_data_count is range 1..4; 

type SYS_WINDOW DATA is array {SYS_WINDOW_DATA_COUNT) of SYS_WINDOW_VALUE 

type SYS_FIELD_TYPE is range 1..2? 

for SYS FIELDJTYPE' SIZE Use SYS BITS INJBYTE; 

SYS_STRING_FIELD : constant SYS_FIELD_TYPE :« 1; 

SYS_NUHBER_FIELD * constant SYS_FIELD_TYPE s* 2; 

type SYS_PIXEL is range -32767.-32767; 

for SYS_PIXEL' SIZE use 2*SYS_BITS_IN_BYTE; 

— Number of columns and rows in a window 

subtype SYS_window_pixel is SYS_PIXEL range -1024..2048; 
subtype SYS_WINDOW~COLUMN is SYS_WINDOW_PIXEL; 
subtype SYS_WINDOW_ROW is SYS~WINDOW~PIXEL; 

SYS_NULL_COLUMN : constant SYS_WINDOW~PIXEL 0; 

SYS_NULL_ROWi constant SYS~WINDOW_PIXEL :» 0; 

type sys_window_location is record 
X j SYS_WINDOW_COLUMN 0; 

Y * SYS_WINDOW_ROW :■ 0; 

end record; ~ 

type SYS_RECTANGLE is record 
X * SYS_WINDOW_COLUMN; 

Y * SYS~WINDOW~ROW; 

WIDTH S SYS WINDOW_COLUMN; 

HEIGHTl SYS~WINDOW_ROW; 

end record; 

— Width and height of a virtual image in pixels, 
subtype SYS_IXACE_PIXEL is SYS_PIXEL; 

subtype SYS~IKAGE~COLUMN is SYS_IMAGE__PIXEL; 
subtype SYS^IKAGe'rOW is SYS _ IMAGE~PIXEL; 











type SYS_iMAGE_LOCATION is record 
X : SYS_IMAGE COLUMN :■ 0; 

Y : SYS_IMAGE~ROW 0; 

end record; 

type SYS_GRID_LABEL is range 0..99; 

— Digital map scales 
type SYS_MAP_SCALES is 

(Sl_4000‘0, Sl_80000, Sl__160000, Sl_400000, Sl_800000); 

— Digital map background types 
type SYS_MAP_BACKGROUND is 

(CROSS_COUNTRY_MOVE, ELEVATION_BANDED, SHADED_RELIEF, THREE^D, 
VEGETATION, NO_BACKGROUND); 

— Coordinate system sizes 

subtype SYS_UTM LETTER is INTEGER range 1..2; 

type SYS_COORDINATE is range -99999999..99999999; 

subtype SYS_UTM_COORD is SYS_COORDINATE range 0..99999; 

— Color lookup table size 

type SYS_COLOR_TABLE is range 0..255; 

for SYS_COLOR_TABLE'SIZE use 2*SYS_BITS_IN_BYTE; 

type SYS_COLOR is range 0..255; 

for SYS_COLOR*SIZE use 4*SYS_BITS IN_BYTE; 

type SYS_COLOR_PLANE is range 1..8; 

for SYS_COLOR_PLANE’SIZE use SYS_BITS_IN_BYTE; 

type SYSCOLORMASIC is range INTEGER'FIRST..INTEGER'LAST; 

for SYS COLOR_MASK'SIZE use 4*SYS_BITS IN_BYTE; 

type SYS_BITS_DEEP is range 8..32;~ 

for SYS_BITS_DEEP'SIZE use SYS_BITS_IN BYTE; 

type SYS_MAX_PLANES is range 0..8; 

for SYS_MAX_PLANES'SIZE use SYS_BITS_IN_BYTE; 

— Hexadecimal bit images 

type SYS_HEXADECIMAL is ('0','1','2','3','4','5','6','7','8',•9',*A',-B','C', 
'D','E','F'); 

for SYS_HEXADECIMAL'SIZE use SYS_BITS_IN NIBBLE; 

for SYSJBEXADECIMAL use ('0'«>0, '1'»>1,~'2'»>2, *3'»>3, '4'=>4, -5'*>5, 

»7'->7, '8'«>8, '9'»>9, 'A'»>10, 'B'*>11, 'C'*>12, 'D’=»13, 
'E'->14, 'F'»>15); 

— Color lookup update flags 

type SYS_LUT_STATUS is range 0..2; 

SYS_LUT_NO_CRANGE ! SYS_LUT STATUS 

SYS_LUT_3ILITE s SYS~LUT~STATUS 

SYS_LUT UNHILITE l SYS LUT STATUS 


3; 
7; 

eddic communications limitations 


— color Image Action flags 

type SYS_COLOR_ACTION is range 0..16; 

for SYS_COLOR_ACTION'SIZE use SYS BITS IN BYTE; 

SYS_COPY_XHAGE : SYS COLOR~ACTION 

SYS_OR_IMAGE j SYS~COLOR“acTION :• 



A-48 






— List of stations in EDDIC 

type SYS_PARTICIPANTS is (G2, G3, G4, EXPERIMENTER) 


— List of processes in the EDDXC network 


type SYS_EDDIC_PROCESSES is 

<G2_REFER£NCE_1, G2_REFERENCE__2 
G2_REFERENCE~5, G2_REFERENCE~6 
G2_VIEW_C2_1~ , G2_VIEW_C2_2~ 
G2_VIEW~C2_5 , G2~VIEW“C2_6 
G2_MESSAGE_1 , G2_MESSAGE_2 
G2_MESSAGE~5 , G2_MESSAGE_6 
G2_BUILD_C2 1 , G2_BUILD C2_2 
G2_BUILD_C2~5 , G2_BUILD~C2~6 
G2_AIDS_1 “ , G2 AIDS_2 

G2_AIDS_5 , G2~AIDS_6 

G2_CONTROL_ 1 , G2_CONTROL_2 

G2_CONTROL_5 , G2_CONTROL_6 
G3_REFER£NCE_1, G3_REFERENCE_2 
G3_REFERENCE 5, G3~REFERENCE~6 
G3_VIEW_C2_1~ , G3_VIEW_C2_2~ 
G3_VIEW_C2_5 , G3_VIEW“C2_6 
G3_MESSAGE_1 , G3_MESSAGE_2 
G3_MESSAGE_5 , G3~MESSAGE_6 
G3_BUILD_C2_1 , G3_BUILD_C2_2 
G3_BUILD_C2 5 , G3_BUILD~C2_6 
G3_AIDS_1 “ , G3_AXDS_2 

G3_AIDS_5 , G3_AIDS~6 

G3CONTROL 1 , G3_CONTROL_2 

G3_CONTROL~5 , G3 CONTROL_6 
G4_REFERENCE 1, G4~REFERENCE_2 
G4_REFERENCE 5, G4~REFER£NCE~6 
G4VIEW C2_l , G4~VIEW_C2_2~ 
G4_VIEW~C2_5 , G4_VIEW_C2_6 
G4_MESSAGE_1 , G4_MESSAGE_2 
G4_MESSAGE_5 , G4_MESSAGE_6 
G4_BUILD_C2_1 , G4_BUILD_C2_2 
G4_BUILD_C2_5 , G4 BUILD_C2~6 
G4_AIDS_1 , G4_AIDS 2 

G4_AIDS_5 , G4 AIDS”6 

G4_CONTROL_l , G4~CONTROL_2 
G4_CONTROL_5 , G4 CONTROL~6 
EX_REFERENCE_1, EX_REFERENCE 2 
EX_REFERENCE_5, EX_REFERENCE~6 
EX_VIEW_C2_1 , EX_VIEW C2 2~ 
EX_VIEW~C2_5 , EX_VIEW~C2~6 
EX_MESSAGE~1 , EX_MESSAGE_2 
EX_MESSAGE_5 , EX_MESSAGE_6 
EX_BUILO C2 1 , EX“BUILD C2_2 
EX_BUILD~C2~5 , EX _ BUILD~C2~6 
EX_AIDS I ~ , EX~AIDS 2 

EX_AIDS~5 , EX _ AIDS*”6 

EX_CONTROL_1 , EX~C0NTR0L_2 
EX_CONTROL~5 , EX _ CONTROL_6 


G2 REFERENCE_3, 

G2 

_REFERENCE_4 

G2 REFERENCE_7, 



G2 VIEW_C2_3 , 

G2 VIEW C2 4 

G2~VIEW~C2_7 , 



G2~MESSAGE_3 , 

G2 MESSAGE 4 

G2 MESSAGE 7 , 



G2 BUILD_C2_3 , 

G2 BUILD C2 4 , 

G2 BUILD~C2_7 , 
G2 AIDS 3 , 

G2 

_AIDS_4 , 

G2 AIDS 7 , 



G2 CONTROL_3 , 

G2 CONTROL 4 , 

G2~CONTROL_7 , 

G2 

HELP , 

G 3 _ REFERENCE_3 , 
G3~REFERENCE_7, 

G3^ 

_REFERENCE_4, 

G3 VIEW_C2_3 , 

G3 VIEW C2 4 , 

G3 VIEW_C2_7 , 
G3 MESSAGE 3 , 
G3 MESSAGE 7 , 

G3 

_MESSAGE_4 , 

G3 BUILD_C2_3 , 

G3 BUILD C2 4 , 

G3 BUILD C2_7 , 



G3 AIDS_3 , 

G3 AIDS 4 , 

G3 AIDS_7 , 



G3 CONTROL_3 , 

G3 CONTROL_4 , 

G3 CONTROL 7 , 

G3 HELP , 

G4 REFERENCE_3, 

G4 REFERENCE 4, 

G4 REFERENCE 7, 



G4 VIEW C2_3 , 

G4 VIEW C2 4 , 

G4 VIEW_C2_7 , 



G4_MESSAGE_3 , 

G4 

_MESSAGE_4 , 

G4~MESSAGE_7 , 



G4 _ BUILD_C2_3 , 

G4 BUILD C2 4 , 

G4~BUILD_C2_7 , 



G4 AIDS_3 , 

G4 AIDS 4 , 

G4 AIDS_7 , 



G4 CONTROL_3 , 

G4 CONTROL_4 , 

G4 CONTROL_7 , 

G4_HELP , 

Ex“REFERENCE_3, 

EX_REFERENCE_4, 

EX REFERENCE_7, 


EX VIEW_C2_3 , 

EX VIEW C2 4 , 

EX VIEW~C2_7 , 



EX MESSAGE_3 , 

EX MESSAGE 4 , 

EX MESSAGEJ7 , 



Ex“bUILD_C2_3 , 

EX BUILD C2 4 , 

EX BUILD~C2~7 , 



EX_AIDS_3 ” , 

EX AIDS 4 , 

EX - AIDS”7 , 



EX CONTROL_3 , 

EX CONTROL 4 , 

EX~CONTROL_7 , 

EX_ 

help , 


SITUATION DB MANAGER, C2 DB_MANAGER , REFERENCE_DB_MANAGER, 

BELP_MANAGER , CONTROL MANAGER , G2_STATION_MANAGER, 


A-49 







G3_STATI0N_MANAGER , G4_STATI0N_MANAGER, EX_STATION_MANAGER, 
C2_PRODUCT_ROUTER, CONTROL_ROUTER, REFERENCE_ROUT£R, SITUATION_ROUTER) 
for SYS_EDDIC_PROCESSES use 

(G2_REFERENCE_1->1 , G2 REFERENCE_2->2 , G2_REFER£NCE_3->3 ,* 

G2_REFERENCE 4»>4 , G22REFERENCE_5->5 , G2~REFERENCE~6«>6 , 

G2_REF£RENCE~7->7 , “ 

G2_VIEW_C2_1->11 , G2 VIEW C2_2->12 , G2 VIEW_C2_3->13 , 

G2_VIEW_C2_4->14 , G2 _ VIEW~C2~5->15 , G2~VIEW_C2_6«>16 , 

G2_VIEW_C2_7«>17 , ~ 

G2_KESSAGE_1->21 , G2_MESSAGE 2->22 , G2_MESSAGE_3->23 , 

G2_MESSAGE_4->24 , G2_MESSAGE~5->25 , G2_MESSAGE_6->26 , 

G2_M£SSAGE_7*>28 , 

G2_BUILD C2 1->31 , G2 BUILD_C2_2->32 , G2_BUILD_C2_3«>33 , 

G2_BUILD~C2~4«>34 , G2~BUILD_C2 5->35 , G2_BUILD_C2_6»>36 , 

G2_BUILD_C2~7«>37 , 

G2_AIDS_1->41 , G2_AIDS_2=>42 , G2_AIDS_3«>43 , 

G2_AIDS 4«>44 , G2_AIDS_5«>45 , G2_AIDS_6«>46 , 

G2_AIDS_7«>47 , 

G2_CONTROL_l->51 , G2_CONTROL_2«>52 , G2_CONTROL_3->53 , 

G2_CONTROL_4 «>54 , G2~CONTROL_5»>55 , G2_CONTROL_6- > 5 6 , 

G2_CONTROL_7»>5 7 , G2 HELP->5? , ~ 

G3_REFERENCE_l->61 , G3~REFERENCE_2-»62 , G3_REFERENCE_3=>63 , 
G3_REFERENCE~4*>64 , G3_REFERENCE_5->6 5 , G3_REFERENCE_6«>66 , 

G 3_REFERENCE_7•>6 7 , 

G3_VIEW_C2 l->71 , G3_VIEW_C2_2“>72 , G3_VIEW_C2_3->73 , 

G3_VIEW_C2_4->74 , G3_VIEW_C2 5->75 , G3_VIEW_C2_6->76 , 

G3_VIEW_C2_7->77 , 

G3_HESSAGE_1»>81 , G3_HESSAGE_2->82 , G3_MESSAGE_3«>83 , 

G3_MESSAGE_4—>8 4 , G3_MESSAGE_5->85 , G3_HESSAGE_6«>86 , 

G3_MESSAGE_7—>87 , 

G3_BUILD_C2_1«>91 , G3 BUILD_C2_2«>92 , G3_BUILD_C2_3«>93 , 

G3_BUILD_C2_4«>94 , G3j3UILD_C2_5->95 , G3_BUILD_C2_6->96 , 

G3_BUILD_C2_7—>9 7 , 

G3_AIDS_1->101 , G3_AIDS_2->102 , G3_AIDS_3->103 , 

G3_AIDS_4->104 , G3 AIDS_5->I05 , G3_AIDS 6«>106 , 

G3_AIDS_7«>107 , ” 

G3_C0NTR0L_1«>111 , G3_CONTROL_2->112 , G3_CONTROL_3=*>113 , 

G3_COHTROL_4«>114 , G3_CONTROL_5->115 , G3~CONTROL_6->116 , 

G3~CONTROL_7->117 , G3_HELP->1I8 , 

G4_REFERENCE_X—>121, G4_REFERENCE 2->122, G4_REFERENCE_3->123, 
G4_R£FERENCE_4->124, G4 REF~RENCE~5->125, G4JREFERENCE_6->126, 
G4_REFERENCE_7->127, 

G4_VIEW C2_l->131 , G4 VIEW C2_2->132 , G4 VIEW_C2_3->133 , 

G4~VIEW~C2~4—>134 , G4~VIEW~C2_5->135 , G4~VTEW_C2_6->136 , 

G 4_VIEW_C 2_7->138 , ” 

G4_MESSAGE_1—>141 , G4_MESSAGE_2->142 , G4_HESSAGE_3->143 , 

G4_MESSAGE_4—>144 , G4 MESSAGE 5->145 , G4 MESSAGE_6->146 , 

G4 MESSAGE_7—>147 , ™ 

G4~B0ILD C2 1->151 , G4 BUILD C2 2->152 , G4 BUILD_C2_3->153 , 

G4 BUILD_C2_4—>154 , G4 _ BUILD~C2~5->155 , G4 _ BUILD C2~6->156 , 

G4~BUILD*”c2 — 7—> 15 7 

G4~AXDS 1->161 , G4 AIDS 2->162 , G4 AIDS_3->163 , 

G4~AIDS“'4->164 , G4 _ AIDS _ 5->165 , G4 _ AIDS~6->166 , 

G4~AIDS~7->167 , 


A-50 






G4_CONTROL_l=>171 
G4_CONTROL_4->174 
G4_CONTROL 7->177 
EX_REFERENCE 1->181 
£X_R£FERENC£~4—>184 
EX_REFER£NCE_7—>187 
EX~VIEW_C2_1“>191 
EX_VIEW~C2 4—>194 
EX_VIEW~C2~7->198 
£X~MESSAGE~l->2 01 
EX_MESSAGE 4->204 
EX~MESSAGE~7->2 07 
EX_BUILD_C2_1»>211 
EX_BUILD_C2_4->214 
EX_BUILD C2_7—>217 
EX_AIDS_1»>221 
EX_AIDS_4«>224 
EX_AIDS“7*>227 
E X_C ONTROL 1->231 
EX_CONTROL~4->234 
EX CONTROL 7->237 


G 4_CONTROL_2->172 
G4_CONTROL_5->175 
G4_HELP->17 8 
EX_REFERENCE_2->182 
EX_REFERENCE~5->185 

EX_VIEW_C2_2->192 

EX_VIEW_C2_5->195 

EX_MESSAGE_2->2 02 
EX_MESSAGE_5->205 

EX_BUILD_C2_2->212 
EX_BUILD_C2_5->215 

EX_AIDS_2->222 
EX_A1DS_5—>225 

EX_CONTROL_2*>232 
EX_CONTROL_5->235 , 
EX HELP->238 , 


G4_CONTROL_3->173 
G4_CONTROL_6->176 

EX_REFERENCE_3->183 
EX_REFERENCE_6—>186 

EX_VIEW_C2_3*>193 
EX_VIEW_C 2_6->19 6 

EX_MESSAGE_3—>20 3 
EX_MESSAGE_6->206 

EX_BUILD_C2_3->213 
EX_BUILD_C2_6=>216 

EX_AIDS_3—>223 
EX~AIDS_6->226 

EX_CONTROL_3->2 3 3 , 

EX CONTROL 6=>236 


SITUATION_DB_MANAGER*>2 41, C2_DB_MANAGER->242, 

REFERENCE_DB_HANAGER»>243, HELP_MANAGER ->244, CONTROL_MANAGER—>245, 
G2_STATION_MANAGER->2 4 6, G3_STATION_MANAGER->2 4 7, 

G4_STATION MANAGER=>248, EX STATION_MANAGER=>249, 


C2_PRODUCT_ROUTER*>2 5 0 , CONTROL_ROOTER—>2 51, REFERENCE_ROUTER—>252 , 
SITUATION_ROUTER->253); 

for SYS EDDIC PROCESSES'SIZE US® SYS BITS IN BYTE; 


— Position of a process within the process list 
type SYS_PROCESS_POSITION is range 0..255; 

— Client (socket) counts, IDs and indexes 

type SYS_CLIENT is range 0..31; 

for SYS CLIENT'SIZE use 4*SYS BITS IN BYTE; 


EDDIC system limitations 


— Maximum length of a environment string passed from the operating 

— system to the software. 

subtype SYS_ENV_STRING is INTEGER range 1..80; 


— Error code ranges 

type SYS_ERROR is range 0..127; 

for SYS ERROR'SIZE use SYS BITS IN BYTE; 


SYS_NO ERROR 
SYSJEXCEPTION 
SYS~LUT_EXCEPTION 
SYSJ5DB_IO_EXCEPTION 
SYS~SDB~SEND_EXCEPTION 
SYS~SDB_UPDT~EXCEPTION 
SYS_TOT~EXCEPTION 
SYS TSB EXCEPTION 


: SYS_ERROR s- 0; 

i exception; 
t exception; 

: exception; 

< exception; 

: exception; 

: exception; 

t exception; 


A-51 




: exception; 

s exception; 

: exception; 

: exception; 

t exception; 

: exception; 

: exception; 

: exception; 

exception; 
exception; 
exception; 
exception; 
exception; 
exception; 
exception; 
exception; 

— Number of seconds a process can be suspended 

type SYS_DELAY is range 0..3600; 

for SYS_DELAY'SIZE use 4*SYS_BITS_IN_BYTE; 

— Oates and times 

type SYS_DAY is range 1..31; 

type SYS_TIKE is range 0..2359; 

type SYS_YEAR is range 0..9999; 

type SYS_MONTH is (JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, 

SEP, OCT, NOV, DEC); 

type SYS_HOUR is range 0..9999; 

subtype SYS MINUTE_TOTAL is INTEGER; 
type SYS_PERCENT is range 0..100; 

— EDDIC Date and Time 
type SYS_DATE_TIME is 

record 

SYS_MINUTE s SYS_MINUTE_TOTAL; 

end record; 

end SYSTEM_PACKAGE; 


SYS_UCC_EXCEPTION 
SYS_UCE_EXCEPTION 
SYS_UCM_EXCEPTION 
SYS_UED_EXCEPTION 
SYS_UFM_EXCEPTION 
SYS~UIN_EXCEPTION 
SYS_UKE_EXCE?TION 
SYS~UMP_EXCEPTION 
S Y S_UNT_EXCEPTION 
SYS_UOB_EXCEPTION 
SYS_UOE_EXCEPTION 
SYS_UTM_EXCEPTION 
SYS~UUE_EXCEPTION 
SYS_UUX_EXCEPTION 
SYS_UWN_EXCEPTION 
SYS UIW EXCEPTION 






—cpc package specification names TSTM_DB 

—cpc descriptions The TSTM_DB cpc describee the objects that are used 

— for interacting with the TSTM Feedback Module. 

—cpc design notes: 

—cpc package authors Bruce Packard 

Science Applications international corporation 
424 Delaware, Suite C3 

— Leavenworth, KS 66048 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

package TSTM_DB is 

type TSTMJPARTICIPANTS is (G2, G3, G4); 

type TSTM_MATRIX_DATA is (MATRIX, OCOKA, COA); 

type TSTM_FBACK_ACTION is (NONE, INITIAL, COLUMN_COMPLETE); 

type TSTM~PHASE~ is (PRETEST, TRAINING, GROUPJRESULT, FINAL_SOLUTION, 

POSTTEST, TERMINATION); 

— TSTM Matrix limitation 

type TSTM_COA_VALUE is (' ', 'O', '1', '2', '3'); 

type TSTM_OCOKA_VALUE is (' ', 'O', '1', '2', '3', '4', '5'); 

subtype TSTM_NUM_ROW iB SYS_niNDOW_ROW range 1..5; 

subtype TSTM_NUM_OCOKA is SYS_window_column range 1..5; 

subtype TSTM_NUM_COA is SYS_WINDOW_COLUMN range 1..3; 

subtype TSTM_TITLE_LEN is INTEGER range 1..40; 

subtype TSTM_ROW_HDR_LEN is INTEGER range 1..20; 

subtype TSTM_COL_TITLE_LEN is INTEGER range 1..30; 

subtype TSTM_ROW_TlTLE~LEN is INTEGER range 1..30; 

subtype TSTM_FBK_TIXLE__LEN is INTEGER range 1..25; 

— Number of records in TSTM databases 

subtype TSTM_NUMJTBACK_DESC is SYS_DB_SIZE range 0..200; 

subtype TSTM_NUM_TEXT ~ is SYS_DB_SIZE range 0..500; 

subtype TSTM_NUM_MATRIX__DESC is SYS_DB_SIZE range 0..3; 

subtype TSTM_NUM_MATRIx“vAL is SYS_DBJSIZE range 0..1000; 

subtype TSTM_NUM_OCOKA_VAL is SYS_DB__SIZE range 0..50; 

— Matrix Definitions 

type TSTM_COA_VALUES is array (7STM_NUM_COA) Of TSTM_COA_VALUE; 

type TSTM_ROW_VALUES is array (TSTM~NUM_OCOKA) of TSTM_COA_VALUES; 

type TSTM COL_VALOES is array (TSTM~NUM_ROW) of TSTM_COA_VALUES; 

type TSTM~MATRIX_VALUES is array (TSTH_NUM_ROW) of TSTM_ROW_VALUES; 

type TSTM_OCOKA_VALUES is array (TSTM~NUM_OCOKA) of TSTM_OCOKA_VALUE; 

— Feedback Description record 
type TSTM_FBACK_DESC_TYPE is 

record 

TSTM PARTICIPANT : TSTM_PARTICIPANTS; 

TSTMJTYPE I TSTM~HATRIX_DATA; 

TSTM~ROW I TSTM~NUM ROW; 


A-53 


TSTM_COL 

TS TM~MTRX_EXPERT 

TSTM_OCOKA_EXPERT 

TSTM~START 

TSTM~END 

end record” 


TSTM_NUM_OCOKA ; 

T S TM~C OA_VALUE S} 
TSTM~OCOKA_VALUES; 
TSTM_NUM_TEXT; 

TSTM NUM TEXT; 


TSTM FBACK DESC REC 


TSTM FBACK DESC TYPE; 


— Feedback Text record 

TSTM TEXT SIZE : SYS PRODUCT LENGTH 8® 252; 


type TSTM_TEXT_TYPE is 
record 

TSTM NUMBER CHAR 


TSTMJTEXT 

end record; 
type TSTM_TEXT_POINT 
TSTM TEXT REC 


8 SYS_PRODUCT_LENGTH range 0.. 
TSTM_TEXT_SIZE; 

: SYS_TEXT (1..TSTM_TEXT_SIZE); 

is access TSTM_TEXT_TYPE; 

s TSTM TEXT POINT :« new TSTM TEXT TYPE 


— Matrix Description Record 
type TSTM_COL_REC is 
record 

TSTM_TITLE 
TSTM_FBACK_COL 
TSTM_FBACK 
TSTM_FBACK_TITLE 
end record; 

type TSTM_COL_ARRAY is 
type TSTM_COL_POINT is 

type TSTM_ROW_REC is 
record 

TSTM_TITLE 
TSTM_FBACK_ROW 
TSTM_FBACK 
TSTM_FBACK_TITLE 
end record; 


SYS_TEXT (TSTM_COL_TITLE_LEN); 
TSTM_NUM_OCOKA; 
TSTM_FBACK_ACTION; 

SYS_TEXT (TSTM_FBK_TITLE_LEN); 


SYSJTEXT (TSTM_ROW_TITLE_LEN); 
TSTM_NUM_ROW; 

TSTM_FBACK_ACTION; 

SYS_TEXT (TSTM_JFBK_TITLE_LEN); 


array (tstm_num_ocoka) of tstm_col_rec; 
access TSTM~COL_ARRAY; 


type TSTM_ROW_ARRAY is array (TSTM_NUM_ROW) of TSTM_ROW_REC; 
type TSTM_ROW_POINT is access TSTM~ROW~ARRAY; 


type TSTM_MATRIX_DESC_TYPE is 
record 

TSTM__TITLE 
TSTM~ROW_HEADER 
TSTM~COA_COUNT 
TSTM~COL~COUNT 
TSTM~COL~ 
TSTM~ROW_COUNT 
TSTM~ROW~ 
TSTM~OCOKA_FBACK 
TSTM_COA_FBACK 
end record; 


8 SYS_TEXT (TSTM_TITLE_LEN); 

8 SYS_TEXT (TSTM_ROW_HDR_LEN) 
8 TSTM_NUM_COA; 

8 TSTM_NUM_OCOKA; 

8 TSTM_COL_ARRAY; 

8 TSTM~NUM_ROW; 

s tstm“row”array; 
s tstm”fback_action; 

8 tstm“fback”action; 


A-54 





TSTM_MATRIX_DESC_REC : TSTM MATRIXDESCTYPE 

— Matrix Value record 
type TSTM_MATRIX_VAL_TYPE is 

record 

TSTM_PARTICIPANT 
TSTM_TIME 
TSTM_TYPE 
TSTM_ROW 
TSTM_COL 
TSTM_VALUE 
end record; 

TSTM_MATRIX_VAL_RBC : TS TM_MATRIX_VAL_TYPE; 

— ocoka Value record 
type TSTM_OCOKA_VAL_TYPE is 

record 

TSTM_PARTICIPANT 
TSTM_TIME 
TSTM_VALUE 
end record; 

TSTM_OCOKA_VAL_REC : TSTM_OCOKA_VAL_TYPE; 

— TSTM MESSAGE RECORDS 

— TSTM Matrix definition record 
type TSTM_INITIAL_MATRIX is 

record 

TS TM_LAY OUT ; TSTM_MATRIX_DESC_TYPE; 

TSTM_VAL s TSTM2MATRIX_VALUES; 

TSTM_OCOKA_VAL : TSTM~OCOKA_VALUES; 

TSTM_COA_VAL j TSTM~COA_VALUES; 

end record; 

— Column Feedback record 
type TSTM_COLUMN_FEEDBACK is 

record 

TSTMJREQUESTOR 
TSTM_COL_NUMBER 
TSTM_VAL 
end record; 

— Row Feedback record 
type TSTM_ROW_FEEDBACK is 

record 

TSTM_REQUESTOR : SYS_EDDIC_PROCESSES; 

TSTM_ROW_NUMBER : TSTM_NUM_ROW; 

TSTM~COA~COUNT : TSTM~NUM~COA; 

TSTM_VAL _ s TSTM~ROW~VALUES; 

end record; ~ 

— ocoka Feedback record 
type TSTM_OCOKA_FEEDBACK is 


SYS_EDDIC_PROCESSES; 
TSTM_NUM_OCOKA; 
TSTM~COL~VALUES; 


TSTM_PARTICIPANTS; 
SYS_DATE_TIME; 
TSTM OCOKA VALUES; 


TS TM__PART ICI PANTS; 
SYS_DATE_TIME; 

TS TM__MATRI X_DATA; 
TS TM~NUM_ROW; 
TSTM~NUM~OCOKA; 
TSTM~COA~VALUES; 


A-55 









record 

TSTM_REQUESTOR 
TSTM_VAL 
end record; 

— COA Feedback record 
type TSTM_COA_FEEDBACK is 
record” — 

TSTM REQUESTOR 
TSTM~VAL 
end recordj 

— Matrix save record 
type TSTM_MATRIX_SAVE is 
record 

TSTM_REQUESTOR 
TSTM~ROW_COUNT 
TSTM_OCOKA_COUNT 
TSTM~COA_COUNT 
TSTM~VAL 
TSTM_OCOKA_VAL 
TSTM_COA_VAL 
end record; 

end TSTM DB; 


SYS_EDDIC_PROCESSES 
TSTM OCOKA VALUES; 


SYS_EDDIC_PROCESSES 
TSTM COA VALUES; 


SYS_EDDIC_PROCESSES 
TSTM_NUM_ROW; 
TSTM_NUM”0C0KA; 
TSTM~NUM_COA; 
TSTM2MATRIX_VALUES; 
TS TM_OC OKA_VALUES; 
TSTM COA VALUES; 


A-56 








UED Utility Package Specifications 


The following package specifications are contained in the EDDIC general purpose 
utility functions 

TSB_LOCATION 

UED EDDIC_MATH UTIL 

UED~LIST ~ 

UED~QUEUE 

UED STRING UTILITIES 


A-57 







—CPC package specification name: 

TSBJLOCATION 

—CPC description: 

TSB_LOCATION CPC is the Tree Structure Builder, written in the "Ada" 

— programming language, which defines the variables and variable types 

— needed to determine general hierarchical tree structure elements X-Y 
Locations. 

—CPC design notes: 

1. ) This package has generic formal parameters. 

2 . ) The generic parameter is an application dependent data structure 

— the likes of which are of no concern to this package. If the application 
wants to associate some data with each element, this is the place to put 
it. If not the application must create a dummy structure so the package 
can be instantiated. 

3. ) This package can raise the following exceptions: 

SYS_TS B_EXCEPTION. 

—CPC package author: 

Richard T. Zarse 30 Aug 1988 

Science Applications International Corporation (SAIC) 

424 Delaware, Suite c-3 

Leavenworth, KS 66048 (913) 651-7925. 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 
generic 

type APPL_DEP_DATA is private; — Application dependent data 
package TSB_LOCATION is 

type TSB_TREE_DEPTH is range 0..10; 
type TREE_RECORD; 

type TREE_RECORD_PTR is access TR£E_RECORD; 
type tree_record is record 

UL : SYS_IMAGE_LOCATION; 

CENTER : SYS_IMAGE_LOCATION; 

WIDTH : SYS_IMAGE_COLUMN :«■ 25; 

HEIGHT : SYS_IMAGE_ROW :« 30; 

CHILD : TREE_RECORD_PTR :- null; 

SIBLING : TREE_RECORD~PTR :- null; 

CHLDRNJBRZ 2_ME : BOOLEAN :« True; 

CHLDRN~vrt~ 2~ME : BOOLEAN Palse; 

SIBLNG_HRZ_2 ME : BOOLEAN !■ True; 

SIBLNG_VRT_2~ME : BOOLEAN :- raise; 

A_D_D : APPL_DEP_DATA; 

end record; 

TSB X SPACING : constant SYS IMAGE_COLUMN 25; 

TSB~Y _ SPACING : constant SYS_IMAGE_ROW :- 30; 

TSB~HALF_X_SPACING : constant SYS_IMAGE~COLUMN :- TSB_X_SPACING / 2; 

TSb'hALP Y SPACING : constant SYS IMAGE ROW :- TSB~Y~SPACING / 2; 


A-58 





— *#*#**#***#**#*##*##*#*«*##*#***##**#t##«##**##*f*####*#*##***f#####*##**#* 


procedure TSB_riND_XY_LOC (TREE_ELMNT 

VRT_CHLDRN_R_LEGAL 
VRT~SIBLNG_R~LEGAL 
TREE SIZ ~ 


in TREE_RECORD_PTR; 
in BOOLEAN; 
in BOOLEAN; 
out SYS_IHAGE_LOCATION); 


--CPM description: 

This module, as part of the Tree Structure Builder, determines (Finds) 
the X and y Locations of the given element and all of its siblings 
— and children. 


—CPM design notes: 

— 1.) This module is called passing in the hierarchically first or 
oldest sibling and all of its children and siblings locations are 

— determined as well. 

2. ) one of the attributes in the element structure is a pointer to 

— its first child; another attribute points to its next sibling. 

— Using these two attributes of the structure a forward pointing link 
list can be built. A parent with multiple children points to its 
first child and all the other children are pointed to by that childs 
siblings, etc, etc. 

3. ) Before this module is called the entire link list must be 
established and the width and height attributes must be set for each 
element. 


--formal parameters 
—IN TREE_ELMNT 

—IN VRT_CHLDRN_R_LEGAL 

— - True 

— «■ False 

—IN VRT SIBLNG R LEGAL 


— ■ True 

m False 

—OUT TREE_SIZ 

—end formal parameters; 


The hierarchically first Tree Element whose 
location is desired. 

A boolean which tells if it is Legal to 
display Children vertically. 

It's legal to display children vertically for 
resultant horizontal space savings. 

All children will be displayed horizontally. 

A boolean which tells if it is Legal to 
display remaining siblings vertically, 
ie: There are six children in the family, the 
last (youngest) four siblings have no 
children; then they are candidates to be 
displayed vertically after the last sibling 
with children. 

It's legal to display siblings vertically for 
resultant horizontal space savings. 

All siblings will be displayed horizontally. 
The size (x & y), in pixels, of the current 
Tree. 


##*###*#f##*#<####f#######<f####|#|#######|##############«t####f####||###># 


procedure TSB DISPLAY CONNECTING LINES 


(TREE_ELMNT ; in 
WINDOW_ID : in 
OFFSET - : in 
LUT_COLOR : in 
PLANE MASK : in 


TREE RECORD_PTR; 
SYS_WINDOW_ELE_ID; 
SYS_IMAGE_LOCATION; 

sys_color7 

SYS~COLOR_MASK); 


A-59 






r 


—CPM descriptions 

— This nodule, as part of the Tree Structure Builder, Displays the Lines 

~ which Connect parent to child and sibling to sibling for the given 

— hierarchical tree. 

—CPM design notes: 

1. ) This nodule is called passing in the hierarchically first or 
oldest sibling and all of its children and siblings locations are 
determined as well. 

2. ) Before this nodule is called all of tree elements must already 
have been placed by TSB_FIND_XY_LOC. 

— 3 .) The format used here for connecting children and siblings is 

— that of a normal general tree with one exception. Based on certain 
rules in TSB_FIND_XY_L0C some parents may display their children 

— vertically under the parent (stacked up and down), instead of 

— horizontally centered under the parent (placed side by side). 

— 4.) This procedure is recursive. 


—formal 

parameters 


—IN 

TREEJELMNT 

- The hierarchically first Tree Element whose lines are 
to be drawn. 

—IN 

WINDOW ID 

- The Id of the Window to display the lines in. 

—IN 

OFFSET 

- The number of x t Y pixels, within the window, to 
Offset these lines. 

—IN 

LUT_COLOR 

- The index into the color Lookup Table for the Color 
of the lines. 

—IN 

PLANE_MASK 

- A bit map representation of the Planes to be affected 
by the lines. Value can be obtained from 


* UIW_PLANEJKASK *. 
—end formal parameters; 

end TSB_LOCATlON; 





—cpc package specification name: UED_EDDIC_MATH_UTIL 

—cpc description: UED_EDDIC_MATH_UTIL contain* all-purpose Ada math utility 
— procedures that are required throughout the EDDIC system. 

—cpc design notes: 

This package raises the SYS_UED_EXCEPTION when an exception is detected. 

—cpc package author: Bruce J. Packard 

Science Applications International Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

with SDB_SXTUATXON_DB; use SDB_SITUATION_DB; 

package UED_EDDIC_KATH_UTIL is 


function UED_BLUEFOR_ECH_RANK (FIRST_UNIT I in SDB_BLUE_TASK_RECORD; 

SECOND_UNIT : in SDB_BLUE_TASK_RECORD) return 
BOOLEAN; 

—cpm procedure name: UED_BLUEFOR_ECH_RANK 

—cpm description: Determines if the FIRST_UNIT should be positioned before 

the second unit in a task organization structure. If it 
should, this function returns true, otherwise, it returns 
false. 

—formal parameters 

—IN first_unit The description of the first unit. 

—IN SECOND_UNlT The description of the second unit. 


function 

UED 

DIST 

(X_POINT_l 

t 

in 

INTEGER; 




Y _ POINT_l 

X 

in 

INTEGER; 





X_POINT~2 

X 

in 

INTEGER; 





Y_POINT~2 

X 

in 

INTEGER) return 

FLOAT; 

function 

UED 

DIST 

(X POINT 1 

X 

in 

SYS PIXEL; 




Y~POINT_l 

X 

in 

SYS_PIXEL; 





X~POINT”2 

• 

• 

in 

SYS PIXEL; 





Y_POINT~2 

• 

* 

in 

SYS_PIXEL) return FLOAT 

function 

UED 

DIST 

(X POINT_l 

i 

in 

SYS_COORDINATE; 




Y POINT_I 

1 

in 

SYS_COORDINATE; 





X~POINT~2 

s 

in 

SYS_COORDINATE; 





Y~POINT~2 

X 

in 

SYS_COORDINATE) 

return i 


—cpm procedure name: UED_DIST 

—cpm description: Computes the distance between two points 


A-61 





-formal parameters 


-IN 

X POINT 1 

X 

-IN 

Y POINT 1 

Y 

-IN 

X POINT 2 

X 

-IN 

Y POINT 2 

Y 


coordinate of first point 
coordinate of first point 
coordinate of second point 
coordinate of second point 


function ued_dist_point_to_line ( 

X_POINT~ t 

Y~POINT t 

X~LINE_P0INT_1 i 
Y~LINE~POINT~l t 
X_LINE_POINT_2 * 
Y_LINE_P0INT_2 s 

function UED_DIST_POINT_TO_LINE ( 

x_po7nt : 

Y~POINT : 

X_LINE_POINT_l : 
Y_LINE_POINT~l » 
X_LINE_POINT_2 : 
Y_LINE_POINT_2 l 

function UED_DXST POINT_TO LINE ( 

“ X_POINT : 

Y_POINT : 

X_LINE_POINT_l : 
Y_LINEJPOINT_l l 
X_LINE_POINT_2 : 
Y LINE POINT 2 : 


in INTEGER; 

in INTEGER; 

in INTEGER; 

in INTEGER; 

in INTEGER; 

in INTEGER) return FLOAT; 


in sys_pixel; 

in SYS_PIXEL; 

in SYS_PIXEL; 

in SYS_PIXEL; 

in SYS_PIXEL; 

in SYS PIXEL) return FLOAT; 


in SYS_COORDINATE; 

in SYSjCOORDINATE; 

in SYSjCOORDINATE; 

in SYSCOORDINATE; 

in SYS_COORDINATE; 

in SYSjCOORDINATE) return float 


—cpm procedure name: UED_DIST__POINT_T0_LINE 


—cpm description: Computes the distance between a point and a line segment 


— 


defined by 

two points 

s 








—formal 
—IN X 

parameters 

_POINT 

The 

X 

coordinate 

of 

the 

Point. 






—IN 

Y_ 

_POINT 

The 

Y 

coordinate 

of 

the 

Point. 






--IN 

X_ 

_LINE_P0INT_1 

The 

X 

coordinate 

of 

the 

start 

of the 

line 

segment 

—IN 

Y_ 

_LINE_POINT_l 

The 

Y 

coordinate 

of 

the 

start 

of the 

line 

segment 

—IN 

X_ 

LINE_P0INT_2 

The 

X 

coordinate 

of 

the 

end of 

the 

line 

segment. 

—IN 

Y_ 

_LINE_P0INT_2 

The 

Y 

coordinate 

of 

the 

end of 

the 

line 

segment. 




V 


I 


procedure UED INTERSECT LINES 


procedure UED INTERSECT LINES 


(X_POINT_l 


in 

INTEGER; 

V POINT~l 


in 

INTEGER; 

X_POINT_2 

: 

in 

INTEGER; 

Y~POINT 2 

$ 

in 

INTEGER; 

X POINT - 3 


in 

INTEGER; 

Y POINT 3 

t 

in 

INTEGER; 

X~POINT - 4 

: 

in 

INTEGER; 

y“pOINT~4 

i 

in 

INTEGER; 

INTERSECTION 

t 

out 

BOOLEAN; 

X INTERSECT 

• 

e 

out 

INTEGER; 

y_INTERSECT 

• 

• 

out 

INTEGER); 

(X POINT 1 

I 

in 

SYS_PIXEL; 

y point“i 

• 

e 

in 

SYS_PIXEL; 

X~POINT 2 

: 

in 

SYS - PIXEL; 

y poxnt ”2 


in 

SYS_PIXEL; 

X~POINT 3 

: 

in 

sys_PiXEL; 

y“P0INT 3 

• 

e 

in 

SYS PIXEL; 

X P0INT~4 

: 

in 

SYS_PIXEL; 

y~POINT 4 


in 

SYS PIXEL; 

INTERSECTION 


out 

BOOLEAN; 

X_INTERSECT 

: 

out 

SYS PIXEL; 

y“lNTERSECT 

i 

out 

SYS_PIXEL); 

(X POINT 1 

• 

e 

in 

SYS_COORDINATE; 

y POINT~l 

• 

e 

in 

SYS_COORDINATE; 

X~POINT~ 2 

: 

in 

SYS COORDINATE; 

y POINT 2 

t 

in 

SYS COORDINATE; 

X_P0INT“3 

: 

in 

SYS COORDINATE; 

y”pOINT 3 

: 

in 

SYS COORDINATE; 

X POINT”4 

: 

in 

SYS COORDINATE; 

y POINT 4 

• 

• 

in 

SYS_COORDINATE; 

INTERSECTION 

: 

out 

BOOLEAN; 

X INTERSECT 

: 

out 

SYS_COORDINATE; 

y”INTERSECT 


out 

SYS_COORDINATE) 


—cpm procedure name: UED_INTERSECT_LINES 

—cpm description: Calculates the intersection of two lines specified by 
endpoints. 


— formal parameters 


— 

IN 

X_POINT_l 

The x coordinate of one 

of the endpoints of the 


IN 

Y_P0INT_1 

first line segment. 

The y coordinate of one 

of the endpoints of the 


IN 

X_POINT_2 

first line segment. 

The x coordinate of the 

other endpoint of the 


IN 

Y_POINT_2 

first line segment. 

The x coordinate of the 

other endpoint of the 

— 1 M 

IN 

X_POINT_3 

first line segment. 

The x coordinate of one 

of the endpoints of the 


IN 

Y_POINT_3 

second line segment. 

The y coordinate of one 

of the endpoints of the 


IN 

X_POINT_4 

second line segment. 

The x coordinate of the 

other endpoint of the 


second line segment. 


A-63 










— IN 

Y_P0INT_4 

— OUT 

INTERSECTION 

— OUT 

X_INTERSECT 

— OUT 

y“intersect 


The y coordinate of the other endpoint of the 
second line segment. 

A logical indicating whether an intersection was 
found for the two input line segments. 

The x coordinate of the intersection point. 

The y coordinate of the intersection point. ' 


procedure UED_LINE_ANGLE (X_POINT 1 

Y_POINT~l 
X_POINT~2 
Y_POINT 2 
SIN_LINE_ANGLE 
COS_LINE~ANGLE 

procedure UED_LINE_ANGLE (X_POINT 1 

Y_P0INT~1 

X~POINT_2 

Y_P0INT~2 

SIN_LINE_ANGLE 

COS_LIN£~ANGLE 

procedure UED_LINE_ANGLE (X_POINT 1 


•cpm procedure name 


Y_P0INT_1 s 
X_POINT_2 S 
Y_POINT 2 : 
SIN_LINE_ANGLE : 
COS__LINE_ANGLE : 

UED LINE ANGLE 


in 

INTEGER; 

in 

INTEGER; 

in 

INTEGER; 

in 

INTEGER; 

out 

FLOAT; 

out 

FLOAT); 

in 

SYS PIXEL; 

in 

SYS PIXEL; 

in 

SYS PIXEL; 

in 

SYS_PIXEL; 

out 

FLOAT; 

out 

FLOAT); 

in 

SYS COORDINATE 

in 

SYS_COORDINATE 

in 

SYS COORDINATE 

in 

SYS_COORDINATE 

out 

FLOAT; 

out 

FLOAT) ; 


—cpm descriptions Computes the sine and the cosine of the angle formed by a 

line and the x-axis. 


— formal parameters 

— IN x_POINT_l The x coordinate of one of the end points of the 

— line. 

— IN Y_P0INT_1 The y coordinate of one of the end points of the 

— line. 

— IN X_POINT_2 The x coordinate of the other endpoint of the line. 

— IN y_P0INT_2 The y coordinate of the other endpoint of the line. 

— OUT SIN_LINE_ANGLE The sine of the angle formed by the input line and 

— the x axis. 

— OUT COS_LINE_ANGLE The cosine of the angle formed by the input line and 

— the x axis. 


procedure UED_INTERSECT_LINE__SEGS ( 


X_POINT_l 

• 

• 

in 

INTEGER, 

Y~POINT_l 

t 

in 

INTEGER; 

X point"”2 

l 

in 

INTEGER; 

Y~POINt”2 

: 

in 

INTEGER; 

X~P0INT 3 

: 

in 

INTEGER; 

y"poINT 3 

X 

in 

INTEGER; 


A-64 







X_POINT_4 

: 

in 

Y_P0INT~4 

* 

in 

INTERSECTION 

i 

out 

X_INTERSECT 

t 

out 

Y_INTERSECT 

i 

out 

SGS ( 



X_POINT_l 

t 

in 

Y P0INT~1 

t 

in 

X POINTJ2 

t 

in 

Y P0INT_2 

t 

in 

X P0INT_3 

t 

in 

Y P0INT_3 

t 

in 

X POINT_4 

s 

in 

Y_POINT_4 

t 

in 

INTERSECTION 

t 

out 

X INTERSECT 

t 

out 

Y_INTERSECT 

t 

out 

:gs ( 



X_P0INT_1 

X 

in 

Y POINT 1 

: 

in 

XJ?OINT_2 

e 

e 

in 

Y POINT - 2 

X 

in 

X_POINT_3 

: 

in 

Y POINT 3 

s 

in 

X_POINT_4 

X 

in 

Y POINT_4 

: 

in 

INTERSECTION 

X 

out 

X INTERSECT 

X 

out 

Y INTERSECT 

X 

out 


INTEGER; 
INTEGER; 
BOOLEAN; 
INTEGER; 
INTEGER); 


SYS_PIXEL; 

SYSJPIXEL; 

SYS_PIXEL; 

SYS_PIXEL; 

SYS_PIXEL; 

SYSPIXEL; 

SYS_PIXEL; 

SYS_PIXEL; 

BOOLEAN; 

SYS_PIXEL; 

SYS_PIXEL); 


SYS_COORDINATE; 
SYS_COORDINATE; 
SYS_COORDINATE; 
SYS_COORDINATE; 
SYS_COORDINATE; 
SYS_COORDINATE; 
SYS COORDINATE; 
SYS_COORDINATE; 
BOOLEAN; 
SYS_COORDINATE; 
SYS COORDINATE) 


—cpm procedure name: UED_INTERSECT_LINE_SEGS 

—cpm description: Calculates the intersection of two line segments 
specified by endpoints. 


— formal parameters 


_ 

IN 

X_POINT_l 

— 

IN 

Y_P0INT_1 

— 

IN 

X_POINT_2 

— 

IN 

Y_P0INT_2 

— 

IN 

X_POINT_3 

— 

IN 

Y_POINT_3 

— 

IN 

X_P0INT_4 

— 

IN 

Y_POINT_4 

— 

OUT 

INTERSECTION 


The x coordinate of one of the endpoints of the 
first line segment. 

The y coordinate of one of the endpoints of the 
first line segment. 

The x coordinate of the other endpoint of the 
first line segment. 

The x coordinate of the other endpoint of the 
first line segment. 

The x coordinate of one of the endpoints of the 
second line segment. 

The y coordinate of one of the endpoints of the 
second line segment. 

The x coordinate of the other endpoint of the 
second line segment. 

The y coordinate of the other endpoint of the 
second line segment. 

A logical indicating whether an intersection was 
found for the two input line segments. True if the 


A-65 




intersection point is within the line segments. False 
if the lines don't intersect or the intersection 
-- is not within the line segments. 

— OUT x_INTERSECT The x coordinate of the intersection point. 

— OUT Y_INTERSECT The y coordinate of the intersection point. 


procedure UED_OFFSET 

JPOINT 

(X^POINT : 

in 

INTEGER; 



Y^POINT : 

in 

INTEGER; 



SIN_LINE_ANGLE : 

in 

FLOAT; 



COS_LINE_ANGLE * 

in 

FLOAT; 



OFFSET_ANGLE » 

in 

FLOAT; 



OFFSET DISTANCE: 

in 

FLOAT; 



OFFSET_X : 

out 

INTEGER; 



offset”y * 

out 

INTEGER); 

procedure UED_OFFSET_ 

_POINT 

(X_POINT 1 

in 

SYS PIXEL; 



Y^POINT : 

in 

SYS_PIXEL; 



SIN LINE_ANGLE : 

in 

FLOAT; 



COS LINE_ANGLE : 

in 

FLOAT; 



OFFSET ANGLE : 

in 

FLOAT; 



offset_distance: 

in 

FLOAT; 



OFFSET_X : 

out 

SYS_PIXEL; 



offset”* * 

out 

SYS_PIXEL); 

procedure UED_OFFSET__ 

POINT 

(X__POINT » 

in 

SYS COORDINATE; 



Y~POINT : 

in 

SYSjCOORDINATE; 



SIN LINE_ANGLE : 

in 

FLOAT; 



COS LINE ANGLE t 

in 

FLOAT; 



OFFSETJUJGLE » 

in 

FLOAT; 



OFFSET_DISTANCE: 

in 

FLOAT; 



OFFSET_X : 

out 

SYS_COORDINATE; 



OFFSET_Y * 

out 

SYS_COORDINATE) 


—cpm procedure names ued OFFSET POINT 


—cpm description: offsets a point by a specified distance and angle from 
— the original point on a line specified by its angle from 

the x-axis. 


— formal parameters 

— IN X_POINT 

— IN Y_POINT 

— IN SIN_LINE_ANGLE 

— IN COS_LINE_ANGLE 

— IN OFFSETJUJGLE 

— IN OFFSET_DISTANCE 

— OUT OFFSET_X 

— OUT OFFSET”Y 


The x coordinate of the point to be offset. 
The y coordinate of the point to be offset. 
The sine of the angle formed by the line 
containing the point and the x axis. 

The cosine of the angle formed by the line 
containing the point and the x axis. 

The angle at which the point is to be offset 
from the line. 

The distance from the line which the point is 
to be offset. 

The x coordinate of the resultant point. 

The y coordinate of the resultant point. 


A-66 



function UED_OPFOR ECH_RANK (FIRST UNIT : in SDB_OPFOR_TASK_RECORD; 

SECOND UNIT * in SDB_OPFOR_TASK_RECORD) return 
BOOLEAN; 

—cpm procedure name: UED_OPrOR_ECH_RANK 

—cpm description* Determines if the FIRST_UNIT should be positioned before 

the second unit in a task organization structure. If it 
should, this function returns true, otherwise, it returns 
false. 

—formal parameters 

—IN FIRST_UNIT The description of the first unit. 

—IN SECOND UNIT The description of the second unit. 


procedure UED_POINT_LINE_XING ( 

X_POINT l 

Y_POINT t 

X_LINE_POINT_l s 
Y_LINE~POINT~l s 
X_LINEJP0INT_2 : 
Y_LINE_POINT~2 : 
X_XING ~ s 

Y~XING * 

procedure UED_PoiNT_LINE_XING ( 

X POINT 

Y~POINT S 

X_LINE POINT_l s 

Y LINE_POINT_l s 

X_LINE_POXNT_2 * 
Y_LINZ_POINT~2 : 
X_XING ~ l 

Y~XING l 

procedure ued_POINT_LINE_XING ( 

XJPOINT i 

Y~POINT * 

X_LINE_POINT_l * 

y_line“point“i * 

X_LINE_P0INT~2 * 
Y_LINE~P0INT~2 * 
X_XING » 

Y XING t 


in 

INTEGER; 

in 

INTEGER; 

in 

INTEGER; 

in 

INTEGER; 

in 

INTEGER; 

in 

INTEGER; 

out 

INTEGER; 

out 

INTEGER); 

in 

SYS PIXEL; 

in 

SYS PIXEL; 

in 

SYS PIXEL; 

in 

SYS_PIXEL; 

in 

SYS_PIXEL; 

in 

SYS_PIXEL; 

out 

SYS_PIXEL; 

out 

SYS_PIXEL); 


in 

SYS COORDINATE; 

in 

SYS 

COORDINATE; 

in 

SYS_COORDINATE; 

in 

SYS COORDINATE; 

in 

SYS__COORDINATE ; 

in 

SY S_COORDINATE; 

out 

SYS_COORDINATE; 

out 

SYS_COORDINATE) 


—cpm procedure name: UED_POINT_IiINE_XING 

—cpm description: Computes the intersection of a line defined by two points 
— and by a perpendicular line that passes through a point. 


—formal parameters 

—IN X POINT The X coordinate of the Point. 


A-67 



! 


—IN 

Y_POINT 

—IN 

X_LINE_POINT_l 

— IN 

Y_LINE_POINT_l 

35 
H 
» 1 

1 1 

X_LINE_POINT_2 

—IN 

Y_LINE_POINT_2 

—OUT 

X_XING 

—OUT 

Y XING 

«•<*> 



The Y coordinate of the Point. 

The X coordinate of the start of the line segment. 

The Y coordinate of the start of the line segment. 

The X coordinate of the end of the line segment. 

The Y coordinate of the end of the line segment. 

X coordinate of the Intersection Point. 

Y coordinate of the Intersection Point. 


end UED_EDDIC MATH UTIL; 


A-68 




—cpc package specification name: UED_Liat 


—cpc description: UED_List contains a generic list system. 


—cpc exceptions: 

— UED_No_More_space_in_List signalled when no more information can 

be put into the liBt. 


— UED_Beyond_End_of_List 


signalled when user attempts to access 
information beyond the end of the list. 


—cpc design notes: 

The list always maintains a pointer to the current item in a list 
and operates with respect to the current position. An insertion operation 
always causes the newly inserted item to be the current item. A query of 

the list's contents always sets the current position to the beginning of 
the list. A deletion or retrieval sets the current position to the next 
available item. 

—cpc package author: Laura M. McClanahan 

Science Applications International corporation 
424 Delaware, Suite c3 
Leavenworth, KS 66048 

with System_Package; use system_Package; 
generic 

type List_Item__Type is private; 
package UED_List is 

UED_No_More_Space_In_List, UED_Beyond_End_Of_List : exception; 

type UED_List_Contents is array (SYS_DB_SIZE range <>) of List_Item_Type; 
type UED_List_Content_Ptr is access UED List_Contents; 


procedure UED_Delete_List Item; 

—cpm description: This procedure deletes the current item from the list. 

— The current position of the list is set to the next 

— available item. 


—formal parameters 
—None 

—end formal parameters; 


function UED_End_of_List return boolean; 

—cpm description: This function returns "true" if there are no more 
— items in the list, otherwise, it returns "false". 


—formal parameters 
—None 

—end formal parameters; 


A-69 







procedure UED__Get_Next_Item_Froro_List (information s out List_ltem_Type); 

—cpm description: This procedure retrieves the next item from the list. 

It retrieves the first item if this procedure was 
preceded by a call on "Go_To_Beginning_Of_List". 


—formal parameters 

—OUT Information The data item corresponding to the current position 

pointer of the list. 

—end formal parameters; 


procedure UED_Go_To_Beginning_of_List; 

—cpm description: This procedure resets the list pointer to the beginning 
of the list. 


—formal parameters 
—None 

—end formal parameters; 


procedure UED_Insert_After_List_Item (Information : in List_Item_Type); 

—cpm description: This procedure places information after the current 
item in the list. 


—formal parameters 

—IN Information The data to be inserted into the list. 

—end formal parameters; 


procedure UED_Insert_Before_List_Item (information : in List_Item_Type); 

—cpm description: This procedure places information before the current 
item in the list. 


—formal parameters 

—IN Information The data to be inserted into the list. 

—end formal parameters; 


function UED_List_Count return SYS_DB_SIZE; 

—cpm description: UED_List_Count returns the number of items currently 
— queued. 


—formal parameters 
—None 

—end formal parameters; 


procedure UED_Query_List (List_Contents : in out UED_List_content_Ptr); 


A-70 






—cpm description: UED_Query_List returns an array of the List containing 

pointers to all the items. Mote the array should be 
— allocated by the application to the total item count 

which may be obtained via UED_List_Count. 

—formal parameters 

—IN out List_contents The array of the List and its item pointers. 

—end formal parameters; 


procedure UED_set_Liat_current_Item (Information : in List__Item_Type); 

—cpm description: UED_Set_List_Current_Item sets the given item as the 

current”itemT 

—formal parameters 

—IN Information The information in the list to be considered the 

— current item. 

—end parameters; 


end UED List; 


A-71 







—cpc package specification name: UED_QUEUE 

—cpc description: UED_QUEUE contains a generic queue system. 

—cpc exceptions: 

— UED_Queue_Underflow Raised whenever an attempt is made to remove 

an item off of an empty queue. 

—SYS_UED_EXCEPTION Raised whenever a system CONSTRAINT, NUMERIC, or 

STORAGE error is raised. 

—cpc design notes: 

—cpc package author: Laura M. Mcclanahan 

science Applications International Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

generic 

type Queue_Item_Type is private; 
package UED_Queue is 

type UED_Queue_Contents is array (SYS_DB_SIZE range <>) of Queue_Item_Type; 
type UED_Queue_Content_Ptr is access UED_Queue_Contents; 

UED_Queue_Underflow : exception; 


function UED_Queue_count return SYS_DB_SIZE; 

—cpm description: UED__Queue_Count returns the number of items currently 
queued. 

--formal parameters 
—None 

—end formal parameters; 


function UED_Queue_Empty return Boolean; 

—cpm description: UED_Queue_Empty returns "true" if the queue is empty; 
otherwiseT it returns "false*. 

—formal parameters 
—NONE 

—end formal parameters; 


procedure UED_Queue_lnsert (information : in flueue_ltem_Type); 

—cpm description: UED_Queue_Insert pushes an item into the queue. 


A-72 








—formal parameters 

—IN Information The information to be pushed into the queue. 

— end formal parameters; 

procedure UED_Queue_Delete (Information : out Queue_Item_Type); 

—cpra description: UED_©uaue_Delete deletes an item from the queue. 
—formal parameters 

—OUT Information The information to be deleted from the queue. 

— end formal parameters; 


procedure UED_Queue_Peek (Information : out Queue_Item_Type); 

—cpm description: UED_Queue_Peek peeks at the next item on the queue, 
without deleting the information from the queue. 


—formal parameters 

—OUT Information The information peeked from the next item on the 

queue. 

—end formal parameters; 


procedure UED_Queue_Query (Contents : in out UED_Queue_Content_Ptr); 

—cpm description: UED_Queue_Query fills the array pointed to by the input 

— pointer with all the information currently queued. 

The access pointer must already be allocated to the 
current number of items in the queue; obtained via 
UED_Queue_Count. 

—formal parameters 

—IN OUT Contents The pointer to an array containing all the information 

— currently queued. 

— end formal parameters; 
end UED_Queue; 


A-73 






—cpc package specification name: UED_STRING_UTILITIES 

—cpc description: UED_STRING_UTILITIES contains the string utilities 

— used throughout the EODZC system. 

—cpc design notes: 

This package raises the SYS_UED_EXCEPTION when a exception is detected. 

—cpc package author: Laura M. HcClanahan 

Science Applications International corporation 
424 Delaware, suite C3 

— Leavenworth, KS 66048 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 
package UED_STRING_UTILITIES is 


procedure UED_COUNT_LINES 


(TEXT 

WIDTH 

HEIGHT 


in SYS_TEXT_PTR; 

out SYS_WINDOW_COLUMN; 

out SYS PRODUCT_LENGTH); 


—cpm procedure name: UED_COUNT_LINES 

—cpm description: Counts the number of lines a in string buffer and 
— determines the width of the longest line. 


—formal parameters 
—IN TEXT 

—OUT WIDTH 

—OUT HEIGHT 


Textual Buffer 

Length of the longest line in the buffer (characters) 
Number of lines in the buffer 


procedure UED_INTEGER STRING (INTEGER_VALUE 

Z£RO_FILLED 

STRING_FIELD 

—cpm procedure name: UED_INTEGER_STRING 


in INTEGER; 
in BOOLEAN; 
in out STRING); 


—cpm description: Converts an integer into a string of specified length, 

right justified within the string field given and 
either blank filled or zero filled depending upon the 
— user's request. 


—formal parameters 

—IN INTEGER VALUE The integer value to be converted into a string. 


—IN ZERO_FILLED The logical indicating whether the resultant 

~ string should include leading zeroes or not. 

TRUE ■ After the string ia right justified within 
the given string field, zero fill any 
leading blanks 


A-74 







FALSE =* Do not zero fill any leading blanks 

—IN-OUT STRING_FIELD The string field to contain the resultant 
— conversion of the integer into characters. 


function UED STRING SEARCH 


return Natural; 


(TEXT: in 

WORD: in 

START INDEX: 


STRING; 

STRING; 

in Positive 


1 ) 


function UED_STRING_SEARCH (TEXT: in SYS_TEXT_PTR; 

WORD: in STRING; 

START_INDEX: in Positive := 1) 

return Natural; 


function UED STRING SEARCH 


return Natural; 


(TEXT: 

WORD: 

START INDEX: 


in SYS_TEXT_PTR; 
in SYSTEXTPTR; 
in Positive :* 1) 


—cpm procedure name: UED_STRING_SEARCH 


—cpm description: UED_STRING_SEARCB provides a string search implementation 
— of the Boyer_Moore approach as written by David P. wood 

and David Turcaso in the article "Implementing a Faster 
String Search Algorithm in Ada" published in the 1988 
May/June issue of Ada Letters. The implementation here is 
the second implementation provided in the article, found 
on pages 96 and 97 with the enhancement and correction 
made by David Wood in his letter to the editors in the 
November/December issue. 


— 

formal 

parameters: 


— 

IN 

TEXT 

The string of text to 

— 

IN 

WORD 

The word or string to 

__ 

IN 

START_INDEX 

The index of the text 

— 



start. 


be searched, 
be found. 

buffer at which the search will 


— end formal parameters; 
end UED STRING UTILITIES; 


A-75 







The following package specifications are contained in the form manager function: 


UFM_FORM_FIELDS 
UFM~FORM MANAGER 


A-7$ 





—cpc package specification name: UFM_FORM_FIELDS 

—cpc description: UFM_FORM_FIELDS provides the capabilities of creating, 

handlingT and deleting the individual fields of a fora. 

—cpc design notes: 

—cpc package author: Laura Meclanahan 

Science Applications International Corporation 
424 Delaware, Suite C3 
— Leavenworth, KS 66048 

with System_Package; use system_Package; 

package UFM_Fora_Fields is 

type UFM_Fora_Editor is private; 


type UFM_Fora_Src is private; 


procedure ufm_change_checkbox_STATES (Cheekbox_IDi in UFM_Fora_Editor; 


Num_Fields: 

in 

SYS_MENU BUTTON 

INDEX; 

Start_Index: 

in 

SYSMENU BUTTON” 

’INDEX; 

Status_Array: 

in 

SYS MENU BUTTON" 

’status ptr 

StateJFlag: 

in 

BOOLEAN); 


— CPM description: UFM_CHANGE_CBECKBOX_STATES changes one or more 

— checkbox states according to the input state flag. 


— formal parameters 


Z 

H 

1 1 
1 1 

Checkbox_ID 

The ID attached to the checkbox editor. 

—IN 

Num_Fields 

The number of checkbox(es) states to be changed. 

—IN 

Start_lndex 

The correlating index of the checkbox which the 
start of the array to the order the items were 
originally created; the first element is always 
zero. 

—IN 

status_Array 

The array of current status of the checkboxes to 
be changed. 

—IN 

State_rlag 

The flag indicating the state all the checkboxes 
are to match. 

— end 

formal parameters 

» 

procedure UFM_CHANGE_MEMO_TEXT (EDIT0R_ID: in UFM_Fora_Editor; 

MAX_8UFFER_SIZE: in SYS_PRODUCT_LENGTH; 

TEXT_BUFFER: in SYS_TEXT_PTR; 

BUrFER_SI2E: in SYS_PRODUCT_LENGTH); 


— CPM description: changes the text buffer used by a fora's memo. 


A-77 





— formal parameters 


—IN 

EDITOR_ID 

ID attached to the memo. 


i 1 1 1 

III 
H 

z 

MAX__BUFFER_SIZ E 

Maximum number of pixels that 
can hold. 

the TEXT_BUFFER 

—IN 

TEXT_BUFFER 

Buffer of the initial text to 

display in the memo 

—IN 

BUFFER_SIZE 

The number of pixels in TEXT_BUFFER. 


— end formal parameters; 


SCROLLBAR_ID: 

in 

UFM FORM_EDITOR; 

DOC_SIZE:“ 

in 

SYS IMAGE PIXEL; 

PIXELJLENGTH: 

in 

SYS WINDOW_PIXEL; 

DISP_POSITION: 

in 

SYS IMAGE_PIXEL; 

SCROLL_INTRVL: 

in 

SYS_WINDOW_PXXEL) 


— CPM description: Changes the size of a scrollbar. 

— formal parameters 


—IN 

SCROLLBAR_ID 

ID to attached to the scrollbar. 

This ID was defined by UFM_DEFlNE_SCROLLBAR. 

—IN 

DOC_SIZE 

The number of lines in the document buffer. 

Z 

H 

1 1 1 
III! 

PIXEL_LENGTH 

The number of pixels to be occupied by the 
scrollbar. 

—IN 

SCROLL_INTRVL 

The number of pixels the work will be scrolled 
whenever the user selects an arrow button. Note 
The work will not be scrolled by these utilities 


but, this argument is required to calculate 
the interactive slidepositioning. 

— end formal parameters; 


WALK (EDITOR: 


out UFM_Form_Editor 

FORMSRC: 

in 

UFM_Form Src; 

DEST_ID ! 

in 

SYS_WINDOW ELE ID; 

MEN U_S TRU CT_ID: 

in 

SYSJWINDOW ELE ID; 

MENU_INDEX: _ 

in 

SYS_WALKING_CELL; 

PIXEL COL: 

in 

SYS_WINDOW_COLUMN; 

PIXEL - ROW: 

in 

SYS_WINDOW_ROW; 

PIXEL WIDTH: 

in 

SYS~WINDOW_COLUMN; 

PIXELJHEIGHT: 

in 

S YS_WINDOW_ROW ; 

BUTTON_TEXT: 

in 

string); 

a button walking menu 

within a form. 


— formal parameters 

—OUT EDITOR ZD attached to the editor. This 

ID is required for all interactions with the editor. 


A-78 





— IN 


FORM SRC 


The ID of the Source of the Form as output by 
UFM INITIALIZE FORM FIELDS. 


— IN 


DEST ID 


ID attached to the destination that the editor is 
assigned to. This is set to NULL when the - 
destination is the RootWindow. 


-IN 

-IN 


MENU_struct_id The ID attached to the menu. 

MENU_INDEX The index into the Text__Array of the submenu to 

be activated for a particular window, if applicable. 
If the menu to be activated is not a walking menu, 
or is the top level of a walking menu, then this 
parameter should be set to NULL. 


—IN PIXEL_COL Column number from within the window where the left 

~~ side of the button shall be placed, column 0 is at 

left of the window. 


—IN PIX£L_R0W row number from within the window where the top side 

— of the button shall be placed. Row 0 is at the top 

of the window. 


—IN PIXELJWIDTH 

—IN PIXEL_HEIGHT 

—IN BUTTON_TEXT 
— end formal parameters 


The number of columns to be occupied by the button. 
The number of rows to be occupied by the button. 
Textual string to display in the button. 


procedure UFM Define Checkbox Menu 


FORM_SRC: 

in 

DEST_TYPE: 

in 

DEST_ID : 

in 

PIXEL_COL: 

in 

PIXEL~ROW: 

in 

NUM_FIELDS: 

in 

NUM_COLS: 

in 

LABELS: 

in 

STATUS: 

in 

PIXEL_WIDTH: 

in 

PIXEL~HEIGHT: 

in 


(Editor: out UFM_Form_Editor; 

UFM_For*_Src; ~~ 

SYS_DESTINATION_TYPE ; 
SYS_WINDOW_ELE_ID ; 

SYS_WINDOW_COLUMN; 

SYS_WINDOW_ROW; 

SYS_MENU_BUTTON_INDEX ; 

S Y S_MENU_BUTTON_INDEX; 

S Y S_KENU_BUTTON~LABEL ; 
SYS_MENU~BUTTON_STATUS ; 
SYS_WINDOW_COLUMN :» SYS NULL_COLUMN; 
S Y S_WINDOW_ROW :» SYS_NULL_ROW); 


CPM description: This defines a menu where the user is allowed to 
make multiple selections. 


—formal parameters: 
—OUT EDITOR 

—IN FORM SRC 


ID attached to the editor. This 

ID is required for all interactions with the editor. 

The id of the source of the Form as output by 
UFM INITIALIZE FORM FIELDS. 






-IN 


DEST TYPE 


—IN DEST ID 


—IN PIXEL COL 


—IN PIXEL ROW 


—IN NUM FIELDS 


The type of the destination for the editor, where: 
SYS W!NDOW_DEST - window 

sys“panel_dest - panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 

Column number from within the form where the left 
side of the menu shall be placed. Column 0 is at 
left of the form. 

Row number from within the form where the top side 
of the menu shall be placed. Row 0 is at the top 
of the form. 

The total number of checkbox buttons to be in the 
menu. 


—IN NUM_COLS 

—IN LABELS 

—IN STATUS 


The number of columns the checkbox buttons are to be 
arranged in. 

Pointer to the array of label addresses for all 
the checkbox buttons. 

Pointer to the boolean array of statuses for all the 
checkbox buttons. 


—IN PIXELJWIDTH The number of pixel columns wide the checkbox editor 

— is to be created. If wish width to be calculated, 

— use the default value of zero. 


—IN PIXEL_HEIGHT The number of pixel rows height the checkbox editor 

— is to be created. If wish height to be calculated, 

— use the default value of zero. 

— end formal parameters; 


procedure UFM_Define_Map; 
— cpm description: 

—formal parameters: 

—end formal parameters; 


procedure UFM Define Memo 


(Editor: out UFM Form Editor; 


FORM_SRC: 

in 

DEST~TYPE: 

in 

DEST~ID t 

in 

PIXEL_COL: 

in 

pixel”row» 

in 

PIXEL_WIDTH: 

in 

PIXZL_HEIGHT: 

in 

READ ONLY: 

in 

MAX BUFFER_SZZE> 

in 

TEXT BUFFER: 

in 


UFM_Form_Src; 
SYS~DESTINATION_TYPE; 
SYS_WINDOW ELE_ID; 
8YS_WIND0W COLUMN; 

SY 8_WIND0W_R0W ; 
SYS_WINDOW COLUMN; 
SYS~WINDOW ROW; 
BOOLEAN; ~ 

SYS PRODUCT_LENGTH; 
SYS~TEXT PTR; 


A-80 





BUFFER_SIZE: in SYS_PRODUCT_LENGTH); 

— CPM description: This procedure defines a memo area within a form. 


—formal parameters: 


— OUT 

EDZTOR 

—ZN 

FORM__SRC 

—ZN 

DESTJTYPE 

—ZN 

DEST_ZD 

55 

H 

1 1 1 1 
till 

PZXEL_COL 

—ZN 

PZXEL_ROW 

1 1 1 1 

1 1 1 1 

H 

as 

PZXEL_WZDTH 

— ZN 

PZXEL_HEZGHT 

--ZN 

READ_ONLY 

1 t < l 1 l 

1 1 1 l 1 1 

H 

55 

MAX_BUFFER_S Z Z E 

1 1 1 

1 1 1 

H 

55 

TEXT_BUFFER 

—ZN 

BUFFER_SIZE 

— end 

formal parameters 


The zo attached to the memo. This ID is reguired 
for all interactions with the memo. 

The ZD of the source of the Form as output by 
UFM_INITIALIZE_FORM_FIELDS. 

The type of the destination for the editor, where: 
SYS_WINDOW DEST - Window 
SYSJPANEL_DEST - Panel 

ZD attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the Rootwindow. 

Column number from within the form where the left 
side of the memo shall be placed. Column 0 is at 
left of the form. 

Row number from within the form where the top side 
of the memo shall be placed. Row 0 is at the top 
of the form. 

The number of columns to be occupied by the memo. 

The number of rows to be occupied by the memo. 

Flag indicating if the user has full editing 
capabilities or is limited to only scroll and copy 
operations. 

true - Read only 
false • Full edit 

Maximum number of pixels that the TEXT_BUFFER 
can hold. 

Buffer of the initial text to display in the memo. 
The number of pixels in TEXT_BUFFER. 


procedure UFM_Define_Number Field (Editor: out UFM_FormjEditor; 


FORM SRC: 

in 

UFM_Fona_Src; 

DEST~TYPE: 

in 

SYSJJESTZMATION TYPE 

dest“id : 

in 

SYS_WINDOW_ELE_ID; 

PIXEL_COL: 

in 

SYS~WINDOW COLUMN; 

PIXEL_ROW: 

in 

SYSJWINDOW ROW; 

LABEL? 

in 

STRING; 

LABEL POSITION: 

in 

SYSJLABEL POSITION; 

NUMBER VARIABLE: 

in out 

STRING; ~ 

MZN NUMBER: 

in 

STRING; 

HAX _ NUMBER: 

in 

STRING; 


A-81 


MAX_CRARACTERS: in SYS_PRODUCT_LENGTH); 

— CPM description: This procedure defines a number field within a form. 


-formal parameters: 
-OUT Editor 


The ID attached to the editor. This ID is required 
all interactions with the number field. 


FORM SRC 


The ID of the source of the Form as output by 
UFM INITIALIZE FORM FIELDS. 


DEST TYPE 


The type of the destination for the editor, where: 
SYS_WIND0W_DEST - window 
SYS PANEL DEST * Panel 


DEST ID 


ID attached to the destination .'at the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 


PIXEL COL 


Column number from within the form where the left 
side of the editor shall be placed, column 0 is at 
left of the form. 


—IN PIXEL ROW 


Row number from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 


—IN LABEL 


LABEL POSITION 


-INOUT NUMBER VARIABLE 


—IN MIN NUMBER 


The optional label before the number field. This 
should be set to NULL if no label will be displayed. 

Value specifying whether the optional label should 
be placed to the left or the right of the number 
field. The two valid settings for this field are: 

0 * Left aligned 
1 * Right aligned 

If no label is specified, this parameter will 
be ignored. 

The address of the variable to store the 
input number at. This variable may be 
initialized to some number value, which would 
be displayed. This must be a NULL terminated 
strung. 

The string representing the minimum number 
to be allowed as input from the user. This 
string must be MAX^CHARACTERS long with each 
digit of the string representing the minimum 
value for that digit and the string must be NULL 
terminated. 


—IN MAX NUMBER 


The string representing the maximum number to be 
allowed as input from the user. This string roust 
be MAX_CHARACTERS long with each digit of the string 
representing the maximum value for that digit and 
the string must be NULL terminated. 


A-82 


— IN 


MAX CHARACTERS 


The maximum number of characters which will 
be allowed to be entered into the field. 


— end formal parameters; 


>N (EDITOR: 

out 

UFM 

_Form_Editor; 

FORM_SRC: 

in 

ufm' 

Form src; 

DEST_TYPE: 

in 

SYS DESTINATION TYPE; 

DEST~ID : 

in 

SYS 

WINDOW ELE ID; 

PIXEL_COL: 

in 

SYS WINDOW COLUMN; 

PIXEL ROW: 

in 

SYS 

WINDOW_ROW; 

NUM_FIELDS: 

in 

SYS* 

_ MENU_BUTTON INDEX; 

NUM_COLS: 

in 

SYS" 

"MENU BUTTON INDEX; 

LABELS: 

in 

SYS MENU BUTTON LABEL_PTR; 

DEFAULT_BUTTON: 

in 

SYS_MENU_BUTTON_VALU£S); 


— cpm description: Creates a pushbutton editor within the form. 


— formal parameters 
—OUT EDITOR 


— IN 


FORM SRC 


—IN DEST TYPE 


—IN DEST ID 


—IN PIXEL COL 


—IN PIXEL ROW 


—IN NUM FIELDS 


—IN NUM COLS 


—IN LABELS 


—IN DEFAULT BUTTON 


ID attached to the editor. This 

ID is required for all interactions with the editor. 

The ID of the Source of the Form as output by 
UFM_INITIALIZE_FORM_FIELDS. 

The type of the destination for the editor, where: 
SYS_WINDOW_DEST - Window 
SYS_PANEL_JM5ST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to null when the 
destination is the Rootwindov. 

column number from within the form where the left 
side of the editor shall be placed. Column 0 is at 
left of the form. 

Row number from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 

The total number of pushbuttons to be in the 
editor. 

The number of columns the pushbuttons are to be 
arranged in. 

Address of the array of label addresses for all the 
pushbuttons. 

The index into the pushbutton array of the button to 
be drawn 'active" or displayed as the default 
button. A value of SYS_NO_DEFAULT_BUTTON will 
disable this feature. 


— end formal parameters; 






procedure UFM_Define_Radiobutton_Menu (Editor: out UFM_Form__Editor; 


FORM_SRC: 

in 

UFM_Form_Src; 

DEST~TYPE: 

in 

SYS~DESTINATION TYPE; 

DEST~ID : 

in 

SYS~WINDOW_ELE ID; 

PIXEL COL: 

in 

SYS_WINDOW_COLUMN; 

PIXEL~ROW: 

in 

SYS WINDOW ROW; 

NUM_FIELDS: 

in 

SYS_MENU_BUTTON_INDEX; 

NUM_COLS: 

in 

SYS_MENU_BUTTON~INDEX ; 

LABELS: 

in 

SYS_HENU BUTTON LABEL; 

DEFAULT_BUTTON: 

in 

SYS_MENU_BUTTON_INDEX) ; 


— CPM description: This procedure defines a single selection menu within 

a form. If the specified area is not large enough to 

— have all the options visible to the user, a scrollbar 

will be added to provide the capability to scroll the 
options. 

—formal parameters: 

—OUT EDITOR ID attached to the menu editor. This 

ID is required for all interactions with the editor. 


—IN FORM_SRC 

— IN DESTJTYPE 

—IN DEST ID 


The ID of the source of the Form as output by 
UFM_INITIALIZE_FORM_FIELDS. 

The type of the destination for the editor, where: 
SYS_WINDOW DEST - Window 
SYS_PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to null when the 
destination is the RootWindow. 


—IN PlXEL_COL column number from within the form where the left 

— side of the menu shall be placed. Column 0 is at 

left of the form. 


—in pixel_row Row number from within the form where the top side 

of the editor shall be placed. Row 0 is at the top 
of the form. 

—IN NUM_FIELDS The total number of radiobuttons to be in the 

— editor. 


—IN NUM_COLS 

—IN LABELS 


The number of columns the radiobuttons are to be 
arranged in. 

Address of the array of label addresses for all the 
radiobuttons. 


—IN DEFAULT_BUTTON The index into the radiobutton array of the button to 

be drawn "active" or displayed as the default 
button. 

— end formal parameters; 


A-84 





procedure UFM_Define_Scrollbar (Editor: out 

FORM_SRC: 

DEST~TYPE: 

DEST_ID : 

ORIENTATION: 

PIXEL_COL: 

PIXELJROW: 

PIXEL_WIDTH: 

PIXEL_LENGTH: 

DOC_SIZE: 

DISP_POSITION: 

SCROLL INTRVL: 


UFM_Form_Editor; 
in UFM_Form_Src; 
in SYS_DESTINATION_TYPE; 
in SYS_WINDOW_ELE_ID; 
in SYS_SB_DIRECTION; 
in SYS_WINDOW_COLUMN; 
in SYS_WINDOW_ROW; 
in SYS_WINDOW_PIXEL; 
in SYS_WINDOW_PIXEL; 
in SYSI«AGE_PIXEL; 

in SYS_IMAGE_PIXEL; 
in SYS_WINDOW_PIXEL); 


— CPM description: This provides the fora with a scrollbar either at 

— the side or bottom of the fora. 


—formal parameters: 
—OUT EDITOR 

—IN FORMSRC 

—IN DEST TYPE 


—IN DEST_ID 

—IN ORIENTATION 

—IN PIXEL_COL 

—IN PIXEL_ROW 

—IN PIXELJWIDTH 

—IN PIXEL_LENGTH 

—IN DOC_SIZE 

—IN DISP POSITION 



The ID attached to the scrollbar. This ID is 
required for all interactions with the scrollbar. 

The ID of the source of the Form as output by 
UFM_INITIALIZE_FORM_FIELDS. 

The type of the destination for the editor, where: 
SYS_WINDOW_DEST * Window 
SYS_PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to sys_Root_window when 
the destination is the Rootwindow. 

Direction of the scrollbar (Horizontal or vertical) 

Column number from within the form where the left 
side of the scrollbar shall be placed. Column 0 is 
at the left of the fora. 

Row number from within the form where the top side 
of the scrollbar shall be placed. Row 0 is at the 
top of the fora. 

The number of pixels to be occupied by the 
scrollbar's width. 

The number of pixels to be occupied by the 
scrollbar's length. 

The number of lines in the document buffer. 

The offset from the beginning of the work surface to 
first pixel visible to the user. 


SCROLL INTRVL 


The number of pixels the work will be scrolled 
whenever the user selects an arrow button. Note: 







The work will not be scrolled by these utilities 
but, this argument is required to calculate 
the interactive slidepositioning. 

— end formal parameters; 


procedure UFM_Define_Static_Text (Editor: out UFM_Form_Editor; 


FORM SRC: 

in 

UFM_Form_src; 

DESTJTYPE: 

in 

S Y S_DESTI NAT I ON__TYPE 

DEST ID : 

in 

SYS_WINDOW_ELE_ID; 

PIXEL COL: 

in 

S Y S_WINDOW~COLUMN; 

PIXEL_ROW: 

in 

SYS_WINDOW_ROW; 

PIXEL WIDTH: 

in 

SYS_WINDOW_COLUMN; 

PIXEL~HEIGHT: 

in 

SYS_WINDOW_ROW; 

TEXT: 

in 

SYS_TEXT_PTR; 

TEXT_ALIGNMENT: 

in 

SYS_TEXT_ALIGNMENT); 


— CPM description: This procedure defines a static text area within a 

— form. 

—formal parameters: 

—OUT EDITOR 


The ID attached to the static text area. This ID is 
required for all interactions with the static text 
area. 


—IN FORM_SRC 

— IN DESTJTYPE 

—IN DEST_ID 

—IN PIXEL_COL 

—IN PIXEIi_ROW 

—IN PIXEL WIDTH 


The ZD of the source of the Form as output by 
UFM_INITIALIZE_FORM_FIELDS. 

The type of the destination for the editor, where: 
SYS_WINDOW_DEST » Window 
SYS_PANEL_DEST ** Panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 

Column number from within the form where the left 
side of the static text area shall be placed. 
Column 0 is at the left of the form. 

Row number from within the form where the top side 
of the Btatic text area shall be placed. Row 0 is 
at the top of the form. 

The number of columns to be occupied by the static 
text area. 


—IN PIXEL HEIGHT 


The number of rows to be occupied by the static 
text area. 


—IN TEXT Textual string to display in the button. 

—IN TEXT_ALIGNMENT Alignment of the text within the static text area 

~ (CENTER ALIGNED, LEFT_ALIGNED, RIGHT ALIGNED, 

NO ALIGNMENT) " 


— end formal parameters 









procedure UFM_Define_string_Field (Editor: out UFM_Form_Editor; 


FORH_SRC: 

in 

UFM_Form_Src; 

DEST~TYPE: 

in 

SyS_DESTINATION TYPE; 

DEST~ID t 

in 

SYS_WINDOW ELE ID; 

PIXEL COL: 

in 

SYS~WINDOW COLUMN; 

PIXEL ROW: 

in 

SYS_WINDOW ROW; 

LABEL: 

in 

STRING; 

LABEL POSITION: 

in 

SYS LABEL POSITION; 

STRING_VARIABLE: 

in out 

STRING; 

MAX_CHARACTERS t 

in 

SYS_PRODUCT_LENGTH); 


— CPM description: This procedure defines a string field within a form. 


I 




—formal parameters: 

—OUT EDITOR 

The ID attached to the string field. This ID is 
required for all interactions with the string field. 

— IN 

FvRM_SRC 

The ID of the Source of the Form as output by 
UFM_INITIALIZE__FORM_FIELDS. 

—IN 

DEST_TYPE 

The type of the destination for the editor, where: 
SYS_WINDOW_DEST - Window 

SYS“PANEL_DEST - Panel 

1 1 1 1 1 
i 1 1 1 1 
H 

Z 

DEST_ID 

ID attached to the destination that the editor is 
assigned to. This ia set to NULL when the 
destination ia the Rootwindow. 

z 

H 

1 1 1 1 1 
1 1 1 1 1 

PIXEL_COL 

Column number from within the form where the left 
side of the editor shall be placed, column 0 is at 
left of the form. 

—IN 

PIXEL_ROW 

Row number from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 

—IN 

LABEL 

The optional label before the string field. This 
should be set to MULL if no label will be displayed. 

i i i i i i i i 

i i i i i i i i i 

H 

z 

LABEL_POSITION 

Value specifying whether the optional label should 
be placed to the left or the right of the number 
field. The two valid settings for this field are: 

0 - Left aligned 

1 ” Right aligned 

If no label is specified, this parameter will 
be ignored by the editor. 

—INOUT 

STRING_VARIABLE 

The address of the variable to store the 
input string at. This variable may be 
initialized to some string value, which would 
be displayed. This must be a NULL terminated 
string. 

—IN 

MAX_CHARACTERS 

The maximum number of characters which will 


A-87 





be allowed to be entered into the field. 


— end formal parameters; 


procedure UFM_DELETE_CHECKBOX_MENU (CHECKBOX_ID s in UFM_Form_£ditor); 

— CPM description: UFM_DELETE_CHECXBOX_MENU deletes a multiple selection 

menu that has been defined by UFM_DEFINE_CHECKBOX_MENU. 

— formal parameters 

--IN checkbox_id The ID of the checkbox menu to delete. 

— end formal parameters; 


procedure UFM_Delete_Form_Fields (Form_src: in out UFM_Form_Src); 

— CPM description: This procedure deletes a form's fields. 

—formal parameters: 

—IN FORM_SRC The ID of the Source of the Form as output by 

UFM_INITIALIZE_FORM_FIELDS. 

—end formal parameters; 


procedure UFM_DELETE_M£MO (EDITOR_lD : in UFM_Form_£ditor); 

~ CPM description: UFM_DELETE_MEMO deletes a memo that is defined by 

UFM~DEFINE_MEMO. 

— formal parameters 

—IN ED!TOR_ID The ID of the editor to delete. 

— end formal parameters; 

procedure UFM_DELETE_NUMBER_FIEDD ( 

EDITOR_ID : in UFM_Form_Editor); 

— CPM description: Deletes an numeric field from within a form that 

is defined by UFM_DEFINE_NUMBER_rIELD. 

— formal parameters 

—IN EDIT0R_ID The ID of the editor to delete. 

— end formal parameters; 


procedure UFM_DELETE_PUSHBUTTON (PUSHBUTTON_ID : in UFM_Form_Editor); 

— CPM description: UFM DELETE_PUsHBOTTON deletes a pushbutton editor that 

— is defined~by UFM_DEFINE_PUSHBUTTON. 

— formal parameters 

—IN PUSHBUTTON_iD The id of the pushbutton editor. 





— end formal parameters; 


procedure UFM_DELETE_RADIOBUTTON_MENU ( 

RADIOBUTTON ID : in UFM_Form_Editor); 


— CPM description: 


UFM_DELETE RADIOBUTTON _MENU deletes a radiobutton menu 
that is defined by UFM _DEFINE_RADIOBUTTON_MENU. 


— formal parameters 

—IN RADlOBUTTON_ID The ID of the radiobutton editor. 

— end formal parameters; 


procedure UFM_DELETE_SCROLLBAR (SCROLLBAR_ID: in UFM_Form_Editor); 

— CPM description: UFM_DELETE_SCROLLBAR deletes a scrollbar that is defined 

by~UFM_DEFINE_SCROLLBAR. 


— formal parameters 

—IN scrollBAR_ID The id of the scrollbar to delete. 

— end formal parameters; 


procedure UFM_DELETEjSTATIC_TEXT (STATIC_ID : in UFM_Form_Editor); 

— CPM description: UFM_DELETE_STATIC TEXT deletes static text that is 

— defined in a formTby ufm_define_static_text. 

— formal parameters 

—IN static_ID The ID of the static text to delete. 

— end formal parameters; 


procedure UFM_DELETE_STRING_FIELD ( 

EDITOR_ID : in UFM_Form_Editor); 

— CPM description: Deletes an string field editor that 

is defined by UFM_DEFINE_STRING_FIELD. 


— formal parameters 

—IN EDITORJCD The ID of the editor to delete. 

— end formal parameters; 


procedure UFM_INITIALIZE_FORM FIELDS (Form_Src 

DEST_TYPE: 
DEST ID: 


: out UFM_Form_Src; 

in SYS_DESTINATION_TYPE; 

in SYS_WINDOW_ELE ID); 


— CPM description: This procedure initializes the form fields for a 

— particular form. 


—formal parameters: 


A-89 







The 


—OUT FormjSrc The ID to be used in defining any form field(a) 

within a particular form. 


—IN DEST_TYPE type of the destination for the editor, where: 

sys_window_dest - window 

SYS_PANEL_DEST - Panel 

—IN DEST_ID ID attached to the destination that the editor is 

— assigned to. 

— end formal parameters; 


procedure UFM_Input (INPUT_TYPE 

INPUT~WINDOW__ID 
INPUT~VALUE ~ 
INPUT~DATA 
INPUT*”EDITOR 


in out SYS_WINDOW_INPUT; 

in out SYS_WINDOW_EL£_ID; 

in out SYS_WINDOW_VALUE; 

in out SYS_WINDOW_DATA; 

out UFH_Form_Editor); 


— CPM description: Receives user input and internet messages and 

— determines if it is within the form. If it is 

— it processes it and returns appropriate data to 

— the application software. 


—formal parameters: 
—IN OUT INPUT TYPE 


—IN OUT 
—IN OUT 
—IN OUT 


Type of input returned from the window system 
input_window_id The id of the window which received input. 
INPUT_VALUE The value of the input that accompanies the type 


INPUT DATA 


—OUT 


INPUT EDITOR 


The value of the data that accompanies the type 
and input values, if appropriate. 

The ID of the editor associated with the input 
if appropriate. 


— The following table lists the output returned to the application 

— for its own processing: 

— window- 

— input_type id type_code data 


— 1 Exit n/a 

— 2 Menu X 

— 3 Checkbox X 

— 4 Scrollbar X 

— 5 XrFILB n/a 

— 6 Buttonwindow X 

— 7 House Button X 

— Pressed 

— 8 Mouse Button X 

— Released 


n/a 

Kenu_Xd 

Editor_Id 

Editor"*Id 

fd 

n/a 

Button: 

0 - R 

1 - M 

2 - L 

Button: 

0 - R 
1 - M 


n/a 

aenu_index 

Checkbox_index 

SlidePosition 

n/a 

n/a 

window_type: 

1 ■ window 

2 - panel 

3 - button 
x, y 

windov_type: 

1 ■ window 

2 - panel 


A-90 












— 



2 - L 

3 « button 

— 




X, y 

— 9 

Field Traversal 

X 

Editor_id 

editor_type: 

— 




1 - string_field 

—— 




2 " Number_field 

— 




type of traversal: 

— 




1 - Next 

— 




2 - Previous 

— 




3 - Up 

— 




4 - Down 

—10 

Exposure 

X 

n/a 

x, y, width, height 

—11 

Open window 

n/a 

n/a 

n/a 

—12 

Window Resized 

n/a 

n/a 

n/a 

—13 

close Window 

n/a 

n/a 

n/a 

—14 

XrEEDIT SAVE 

X 

Editor_Id 

bufferCount 

—15 

XrEEDIT_RESET 

X 

Editor Id 

n/a 

—16 

Pushbutton 

X 

Editor”ld 

Button_index 

—17 

Radiobutton 

X 

Editor_Id 

Ac tive_index, 

— 




Previous_Index 

—end formal parameters; 




procedure UFM_move_CHECKBOX_MENU (CHECKBOX_ID: 

PXXEL_COL t ~ in 
PIXEL ROW: in 


in out OFM_Form_Editor; 
SYS_WINDOW_COLUHN; 
SYS_WINDOW_ROW); 


— CPM description: changes the location of a checkbox Menu within a form. 

— formal parameters 


IN 

CHECKBOX_ID 

ID attached to the checkbox menu. 


IN 

PIXEL_COL 

Column number from within the form where the 
side of the editor shall be placed, column 0 
left of the form. 

left 
is at 

IN 

PIXEL_ROW 

Row number from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 


— end formal parameters; 


procedure UFM_MOVE_MZMO (EDITOR: 

PIXEL_COL: 
PIXEL ROW: 


in out UEM_Pozm_Editor; 
in SYS_WINDOW_COLUMN; 
in STS WINDOW_ROW) ; 


— CPM description: changes the location of a memo within a form. 

— formal parameters 


-IN 

EDITOR 

ID attached to the 
ID is required for 

editor. This 

all interactions with the 

editor. 

-IN 

PIXEL_COL 

Column number from 
side of the editor 

within the form where the 
shall be placed. Column 0 

left 

is at 


A-91 




left of the form. 


—IN PIXEL ROW Row number from within the form where the top aide 

” of the editor shall be placed. Row 0 is at the top 

— of the form. 

— end formal parameters; 


procedure UFM_MOVE_NUMBER_FIELD ( 

“ EDITOR; 
PIXEL_COL: 
PIXEL ROW; 


in out UFM_Form_Editor; 
in SYS_WINDOW_COLUMN; 

in SYS_WINDOW_ROW); 


— CPM description: Changes the location of a numeric field within a form. 


— formal parameters 
—IN EDITOR 


—IN 


—IN 


PIXEL COL 


PIXEL ROW 


ID attached to the editor. This 

ID is required for all interactions with the editor. 

Column number from within the form where the left 
side of the editor shall be placed. Column 0 is at 
left of the form. 

Row number from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 


— end formal parameters; 


procedure UFM_MOVE_PUSHBUTTON (PUSHBUTTON_ID: 

PIXEL_COL: 
PIXEL ROW: 


in out UFM_Form_Editor; 

in SYS_WINDOW_COLUMN; 
in SYS_WINDOW_ROW); 


— CPM description; Changes the location of a pushbutton editor within a form. 


— formal parameters 
—IN PUSHBUTTON ID 


—IN 


—IN 


PIXEL COL 


PIXEL ROW 


ID attached to the pushbutton editor to move. 

Column number from within the form where the left 
side of the editor shall be placed, column 0 is at 
left of the form. 

Row n umb er from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 


— end formal parameters; 


procedure UFM_HOVE_RADIOBUTTON_K£NU ( 

RADIOBUTTON_ID; in out 

?IXEL_COL: “ in 

PIXEL - ROW: in 


UFM_Form_Editor; 

S YS_WINDOW__COLUMN ; 
SYS WINDOW ROW); 


A- 92 






— CPM description: changes the location of 


a radiobutton menu within a form. 


— formal parameters 

—IN RADiOBUTTON_ID ID attached to the radiobutton editor to move. 

—IN PlX£L_COL column number from within the form where the left 

— side of the editor shall be placed. Column 0 is at 

left of the form. 


—IN PIXEL_ROW Row number from within the form where the top side 

of the editor shall be placed. Row 0 is at the top 

— of the form. 

— end formal parameters; 


procedure UFM_MOVE_SCROLL8AR ( 

SCROLLBAR_ID: 
PIXEL_COL: 
PIXEL ROW: 


in out UFM_Form_Editor; 
in SYS_WINDOW_COLUMN; 

in SYS_WINDOW_ROW); 


— CPM description: Changes the location of a scrollbar within the form. 


— formal parameters 
—IN SCROLLBAR ID 


—IN PIXEL COL 


ID attached to the scrollbar. 

This ID is required for all interactions with the 
scrollbar. 

Column number from within the form where the left 
side of the scrollbar shall be placed. Column 0 is 
at left of the form. 


—IN PIXEL__row row number from within the form where the top side 

of the scrollbar shall be placed. Row 0 is at the 
top of the form. 

— end formal parameters; 


procedure UFM_MOVE_STATIC_TEXT ( 

TEXT_ID: in out UFM_Form_Editor; 

PIXEL_COL: in SYS_WINDOW_COLUMN; 

PIXEL~ROW: in SYS_WINDOW_ROW); 


— CPM description: Changes the location of static text within a form. 

— formal parameters 

—IN EDITOR_ID ID attached to the text. This 

ID is required for all interactions with the text. 

PIXEL^COL Column number from within the form where the left 

side of the text shall be placed. Column 0 is at 
left of the form. 



A-93 






—IN PlXEL_ROW Row number from within the form where the top side 

— of the text shall be placed. Row 0 is at the top 

— of the form. 

— end formal parameters; 

procedure UFM_MOVE STRING_FIELD ( 


EDITOR: 

in out 

UFM 

_Form_Editor; 

PIXEL_COL: 

in 

SYS* 

"WINDOW COLUMN; 

PIXEL_ROW: 

in 

SYS_WINDOW_ROW); 


— cpm description: changes the location of a string field editor within a 

— form. 


— formal parameters 

—IN EDITOR ID attached to the editor. This 

— ID is required for all interactions with the editor 

—IN PIXEL_C0L Column number from within the form where the left 

— side of the editor shall be placed. Column 0 is at 

left of the form. 


—IN PlXEL_ROW Row number from within the form where the top side 

— of the editor shall be placed. Row 0 is at the top 

— of the form. 

— end formal parameters; 


procedure UFM_0UERY_CHECKBOX SIZE (CHECKBOX_ID: 

PIXEL_COL: 
PIXEL ROW: 


in UFM_Form_Editor; 
out SYS_WINDOW_COLUMN 
out SYS_WINDOW_ROW); 


— cpm description: Returns the number of pixel columns and rows that 

— a checkbox menu within a form occupies. 

— formal parameters 


—IN 

CHECKBOX_ID 

ID attached to the menu 

• 

—OUT 

PIXEL_COL 

Number of pixel columns 

in the menu. 

—OUT 

PIXEL_ROW 

Number of pixel rows in 

the menu. 

— end 

formal parameters 

t 



procedure UFM_QUERY MEMORIZE (EDITOR_ID: 

in 

UFM_Form Editor; 

PIXEL_COL: 

out 

SYS_WINDOW_COLUMN; 

PIXEL_ROW: 

out 

SYS WINDOW ROW); 


— CPM description: Returns the number of pixel columns and rows that 

— a memo within the form occupies. 


— formal parameters 

—IN EDITOR_ID ID attached to the memo. 

—OUT PIXEL_COL Number of pixel columns in the memo. 


A-94 






—out PIXel_row Number of pixel rows in the memo. 

— end formal parameters; 


procedure UFM_QUERY_NUMBER_FIELD_SIZE ( 

*~EDITOR_ID: 
PIXEL COL: 
PIXEL~ROW: 


in UFM_Form_Editor; 
out SYS_WINDOW_COLUMN; 
out SYS_WINDOW_ROW); 


— CPM description: Returns the number of pixel columns and rows that 

— an numeric field editor within the form occupies. 


— formal parameters 


—IN EDITOR_ID 

—OUT PIXEL_COL 

—OUT PIXEL_ROW 

— end formal parameters; 


ZD attached to the editor. 

Number of pixel columns in the editor. 
Number of pixel rows in the editor. 


procedure UFM_QU£RY_PUSHBUTTON_SIZE (PUSHBUTTON_ID: 

PIXEL_COL: 

PIXEL ROW: 


in TiFM_roiia_Editor; 
out SYS_WINDOK_COLUMN; 
out SYS WINDOW ROW); 


— cpm description: Returns the number of pixel columns and rows that 

a pushbutton editor within the form occupies. 


— formal parameters 


IN 

PUSHBUTTONJCD 

ID attached to the editor. 

OUT 

PIXEL _COL 

Number of pixel columns 

in the editor. 

OUT 

PIXEL_ROW 

Number of pixel rows in 

the editor. 


— end formal parameters; 


p355X 

procedure UFM_QUERY_RADIOBUTTON_SZZE ( 


RADIOBUTTON ID: 

in 

UFM_Form_Editor; 

PIXEL_COL: ~ 

out 

SYS_WINDOW_COLUMN; 

PIXEL_ROW: 

out 

SYS_WINDOW ROW); 


— CPM description: Returns the number of pixel columns and rows that 

— a radiobutton menu within the form occupies. 


— formal parameters 


-IN 

RADIOBUTTON_ID 

ID attached to 

the menu 

• 

-OUT 

PIXEL_COL 

Number of pixel 

columns 

in the menu. 

-OUT 

PIXEL J10W 

Number of pixel 

rows in 

the menu. 


— end formal parameters; 


procedure ufm_query_scrollbar_size ( 


SCROLLBAR_ID: 

in 

UFM_ 

Form Editor; 

pixel_col7 

out 

SYS' 

"WINDOW COLUMN 

PIXEL_ROW: 

out 

SYS_WINDOW_ROW); 


— CPM descriptions Returns the number of pixel columns and rows that 

a scrollbar within the form occupies. 


— formal parameters 


—IN SCROLLBAR_ID 

—OUT PIXEL_COL 

—OUT PIXEL_ROW 

— end formal parameters; 


ID attached to the scrollbar. 

Number of pixel columns in the scrollbar. 
Number of pixel rows in the scrollbar. 


procedure UFM_QUERY_STRING FIELD SIZE ( 


EDITOR_ID: 

in 

PIXEL_COL: 

out 

PIXEL ROW: 

out 


UFM_Form_Editor; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW); 


— CPM description: Returns the number of pixel columns and rows that 

a string field editor within the form occupies. 


— formal parameters 


—IN EDITOR_ID 

—OUT PIXEL_COL 

—OUT PIXEL_ROW 

— end formal parameters; 


ID attached to the editor. 

Number of pixel columns in the editor. 
Number of pixel rows in the editor. 


procedure UFM_RESIZE_CHECKBOX_MENU(CHECKBOX_ID: 


PIXE COL: 

in 

PIXEL 

ROW: 

in 

PIXEL WIDTH: 

in 

PIXEL 

HEIGHT: 

in 


in UFM_Form_Euitor; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
SYS_WINDOW_Col>UMN ; 
SYS_WINDOW_ROW); 


— CPM description: changes the size of a checkbox menu within the form. 


— formal parameters 

—IN CHECKBOX_ID ID of the menu. 

—IN PIXEL_C0L Column number from within the form where the left 

side of the menu shall be placed, column 0 is at 
left of the form. 


—IN PlXEL_ROW Row number from within the form where the top side 

of the menu shall be placed. Row 0 is at the tcp 
— of the form. 


—IN PIXEL_WIDTH 
— IN PIXEL HEIGHT 


The number of columns to be occupied 
The number of rows to be occupied by 


by the menu, 
the menu. 


A-96 


— end formal parameters; 


procedure UFM_RESIzE_ME«o (EDITOR; in out 

PZXEL_COL t in 
pixel - row; in 
PIXEL HIDTB: in 
PIXEL - HEIGHT; in 


UFM_Fozm_Editor; 
SYS WINDOW_COLUMN; 
SYS~WINDOW_ROW; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW); 


— CPM description: Changes the size of a memo within a form. 


— formal parameters 
—IN EDITOR 


ID of the memo. 


PIXEL COL 


Column number from within the form where the left 
side of the memo shall be placed. Column 0 is at 
left of the form. 


PIXEL ROW 


Row number from within the form where the top side 
of the memo shall be placed. Row 0 is at the top 
of the form. 


—IN PIXEL_WIDTH 

—IN PIXEL_HEIGHT 

— end formal parameters; 


The number of columns to be occupied by the memo. 
The number of rows to be occupied by the memo. 


procedure UFM_RESIZE_NUMBER_FIELD ( 

EDITOR: in out 

PIXEL_COL: in 

PIXEL_ROW: in 

PIXEL_WIDTH: in 

PIXEL HEIGHT; in 


UFM_Form_Editor; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW); 


— CPM description; changes the size of a numeric field editor within a form. 


— formal parameters 
—IN EDITOR 


ID of the editor. 


PIXEL COL 


Column number from within the form where the left 
side of the editor shall be placed. Column 0 is at 
left of the form. 


PIXEL ROW 


Row number from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 


—IN PIXELJWIDTH 

—IN PIXEL_HEIGHT 

— end formal - parameters; 


The number of columns to be occupied by the editor. 
The number of rows to be occupied by the editor. 






procedure UFM_RESIZE_PUSHBUTTON ( 


PUSHBUTTON_ID: 

in 

PIXEL COL:~ 

in 

PIXEL~ROW: 

in 

PIXEL^WIDTH: 

in 

PIXEL - HEIGHT: 

in 


UFM_Form_Editor; 
SYS_WINDOW_COLUHN; 
SYS~WINDOW~ROW; 
SYS~WINDOW_COLUMN; 
SYS~WINDOW_ROW); 


— CPM description: Changes the size of a pushbutton editor within a form. 

— formal parameters 

—IN pushbutton__id ID of the pushbutton editor. 

—IN PlXEL_COL Column number from within the form where the left 

aide of the editor shall be placed. Column 0 is at 

— left of the form. 


—IN pixel_ROW Row number from within the form where the top side 

of the editor shall be placed. Row 0 is at the top 
of the form. 


—IN PlXEL_wiDTH The number of columns to be occupied by the editor. 

—IN PIXEI,_HEIGHT The number of rows to be occupied by the editor. 

— end formal parameters; 


procedure UFM_RESIZE_RADIOBUTTON_MENU { 


RADIOBUTTON ID: 

in 

UFM Form Editor; 

PIXEL COL: 

in 

SYS WINDOW COLUMN; 

PIXEL ROW: 

in 

SYS_WINDOW ROW; 

PIXEL_WIDTH: 

in 

SYS_WINDOW_COLUMN; 

PIXEL~HEIGHT: 

in 

SYS_WINDOW_ROW); 


— CPM description: changes 


the size of a radiobutton menu in a form. 


— formal parameters 

—IN rad i obutton_iD ID of the radiobutton menu. 

—IN PIXEL_COL Column number from within the form where the left 

side of the menu shall be placed, column 0 is at 
left of the form. 


--IN PIX£L_R0W Row number from within the form where the top side 

of the menu shall be placed. Row 0 is at the top 
of the form. 


—IN pixel_width The number of columns to be occupied by the menu. 

—IN PIXEL_HEIGHT The number of rows to be occupied by the menu. 

— end formal parameters; 


procedure UFM_RESIZE STRING FIELD ( 

” EDITOR: 


in out UFM Form Editor; 



PIXEL 

COL: 

in 

SYS_WINDOW_COLUMN 

PIXEL ROW: 

in 

SYS~WINDOW _ ROW; 

PIXEL*”WIDTH : 

in 

SYS~WINDOW_COLUMN 

PIXEL, 

.beigbt: 

in 

SYS~WINDOW_ROW); 


— cpm description: changes the size of a string field editor in a font. 

— formal parameters 


-IN 

EDITOR 

ID of the editor. 

-IN 

PIX£L_COL 

Column number from within the form where the left 
side of the editor shall be placed. Column 0 is at 
left of the form. 

-IN 

PIXELJROW 

Row number from within the form where the top side 
of the editor shall be placed. Row 0 is at the top 
of the form. 

-IN 

PIXEL_WIDTH 

The number of columns to be occupied by the editor. 

-IN 

PIXEL_HEIGHT 

The number of rows to be occupied by the editor. 


— end formal parameters; 


private 

type UFM_Node_Type is (Row_Head, Rov_Elament); 

type UFM_Form_Node (Code: UFM_Node _Type); 

type UFM_Form_Editor is access UFM_Form_Node; 

type UFM_Form_Matrix_Head is 
record 

Dest_Type: SYS_OESTINATION_TYPE; 

Dest_ID: SYS_wiNDOW_ELE_ID ; 

Bead: UFM_Form_Editor; 

end record; 


type UFM_Form_Src is access UFM Form_Katrix Bead; 


type UFM_Form_Field is (Button, CheckBox, Map, PushButton, RadioButton, 

ScrollBar, Static Text, Memo, Numeric, Alpha String) 

— NOTE: “* 

— the traversal editors must be listed at end between Memo and Alpha_string 
See the package body for type UFM_Traversal_FieIds 


(Code: UFM_Node_Type) is 


type UFM_Form_Node 
record 

Form_src: 
Dest_Type: 
Dest_ID: 
Previous: 
Next Editor: 
Field Ptr: 


UFM_Form_src > 

SYS Destination_Type; 
SYS~WINDOW_ELE_ID; 
UFM_FormjEditor; 
UFM~FormjBditor; 
SYS~Window Ele_Id; 


A-99 








Field_Type: UFM_Fonn Field} 

Fi«ld_Rects SYS~Rectangle; 

case code is 

when Row_Head ■»> 

Next_Row: UFM_Fora_Editor j 

Prev_Row: UFM_Formjsditor; 

when Row_Elenent •> 
null;” 
end case; 
end record; 

end UFM_Form_Fields; 




r 


—cpc package specification names ufm_FORM_manager 

—cpc descriptions UFM_FORM_MANAGER is the utility package for defining and 

— managing forms. 

—cpc design notess 

— This package raises SYS_UFM_EXCEPTION when a system error is encountered. 
—cpc package authors Laura McClanahan 

— Science Applications International Corporation 

424 Delaware, Suite C3 

— Leavenworth, KS 66048 


with CM_System; 
with MapjSystem; 
with OBS_System; 
with syfctem_Paekage; 
with Unit_System; 
package UFM_Form_Manager is 


use CM_system; 
use MapjSystem; 
use OBS_System; 
use syatem_Package; 
use Unit_system; 


I 


subtype UFM_Form_Buffer is SYS_TEXT_PTR? 
subtype UFM_ID is SYS_TEXT_PTR; 

type UFH_Fie1d_Type is (MEMO_TEXT, NUMERIC FIELD, STRING_FIELD, 

" RADIO_BUTTON, CHECKLIST, BUTTON_WALK, FORM_WALK, 

MULTIPLE_SELECT_MENU, SINGLE_SELECT_MENU, 
DIGITAL_MAP, PUSHJBUTTON, STATIC_TEXT); 
type UFM_Editor_status (Fields UFM_Field_Type ) is 
record 

case Field is 


when MEMO_TEXT -> 

CONTENT s SYS_TEXT_PTR; 

SIZE s SYS_PRODUCT_LENGTH; 

When NUMERIC_FIELD -> 

N_VALUE S SYS_TEXT_PTR; 

When STRING_FIELD -> 

S_VALUE s STS_TEXT_PTR; 

When RADIO__BUTTON ■> ~ 

STATE S BOOLEAN; 

When CHECKLIST -> 

STATES I SYS MENU__BUTTON_STATUS_PTR; 
When BUTTONJHALK J FORM_WALK -> 

RET_VAL* SYS WALKING_CELL_VALUE; 

When MULTIPLE SELECT_MENU -> 

Status; SYS_MENU BUTTON_STATUS_PTR; 
when SINGLE SELECT ffiNU -> ” 

Default S SYS )CNU BUTTON INDEX; 


When DIGITAL MAP ■> 
WIDTH “ S 
HEIGHT S 

DATE_TIME S 

OPLAN t 

MAP OPTIONS S 
BLUEFOR_UNITS S 
CM_OPTIONS S 
OBS OPTIONS S 


SYS_WINDOW_COLUMN; 

SYS~WINDOW~ROW; 

SYS~DATE_TIME; 

SYS OPPLAN; 

map”map_options; 

UNIT__OPTIONS; 

CM CNTRL KSR_OPTIONS; 
OBS OBSTACLE~OPTIONS; 



A-101 




OPFOR UNITS : UNIT_OPTIONS; 

when PUSHJBUTTON -> 

PUSHED? SYS_MENU_BUTTON_VALUES; 

When STATIC_TEXT~”> " 

NULL; — The UZD field is used to store the static text string 
end case; 
end record; 

type UFM_Editor_Stat_Ptr is access UFM_Editor_Status; 


procedure UFM_Read_Form_File (Fiie_Name: in string; 

" Form_Buffer: out UFM_Form_Buffer); 

— CPH description: UFM_Read_Form_File reads in a file designated by the 

— input environment variable and puts it into a form 

ascii buffer for either validation or defining a form. 


— formal parameters: 

—IN File_Name The name of the data file containing a form 

description. 

—OUT Form_Buffer The buffer containing the form description as read 

— from the data file designated by the Env_Variable. 

— end formal parameters; 


procedure UFM_Validate_Form (Form_Description: in UFM_Form_Buffer); 

— CPM description: UFM_Define_Form defines a form from an ASCII buffer. 

— formal parameters: 

—IN Form_Description The description of the form to be created. 

— end formal parameters; 


task type Form_Manager_Task is 
entry Define_Form ( 


Pixel_Hidth: 

in 

Pixel_Height: 

in 

Form_Description: 

in 

Process_ID: 

in 

Form_ID: 

out 

Map_Window: 

in 

Parent_Window: 

in 

Parent_Window_x: 

in 

Parent Window Y: 

in 


SYS WINDOW_COLUMN; 

SYS_WINDOW_ROW; 

UFM~Form_Buf fer; 

SYSJEDDIC_PROCESSES; 

SYS WINDOW_ELE_ID; 

BOOLEAN :« FALSE; 

SYS_WINDOW_ELE_ID :- SYS_ROOT_WINDOW 
S Y S~WINDOW~COLUMN :- 0; 

SYS WINDOW~ROW :- 0); 


— CPM description: UFM_Define_Form defines a form from an ASCII buffer. 

— formal parameters: 

—IN Pixel_Width The pixel width of the form. 

—IN Pixel_Height The pixel height of the form. 


A-102 




—IN Forin_DeBcription The description of the form to be created. 

—IN Process_lD The ID of the calling process. 


—OUT Form id 


The id given the form object. 


—IN MAP_WIND0W The logical indicating whether the form 

— window should be mapped upon creation or not. 

If it is not, the application can make the 
form window be visible later via a call 
to UWN MAP WINDOW. 


—IN Parent_window The ID of the window to which the form 

manager window will be a subwindow to. The 
default is the root window thus making the 
form a popup window. 


—IN Parent_window_x The pixel column of the parent window where the 

form window's origin will be placed. The 
— default is zero, where the window may be moved 

via UWN MOVE WINDOW. 


—IN Parentjwindow_Y The pixel row of the parent window where the 

form window's origin will be placed. The 
default is zero. 


— end formal parameters; 


entry Delete_Form; 

— CPM description: This entry deletes a form's editors. 

—formal parameters 

— NONE 

—end formal parameters; 


it (INPUT TYPE : 

in 

SYS_WINDOW INPUT; 

INPUT_WINDOW_ID: 

in 

SYS~WINDOW ELE ID; 

INPUT_VALUE ~ : 

in 

SYS_WINDOW_VALUE; 

INPUTJDATA : 

in 

SYS_WINDOW_DATA; 

Input~Processed: 

out 

Boolean; 

Field”lD : 

out 

UFM_ID; 

Field_Type : 

out 

UFM_Field__Type); 


— CPM description: Receives user input and internet messages and 

— determines if it is within the form, if it is 

— it processes it and returns appropriate data to 

— the application software. 


— formal parameters 

—IN INPUT_TYPE Type of input returned from the window 

~ system 


A-103 


—IN input_window_id The id of the window which received the 

input. 

—IN INPUT_VALUE The value of the input that accompanies 

~ the type 

—IN INPUT_DATA The value of the data that accompanies 

— ~ the type and input values, if appropriate. 

—OUT Znput_Processed A boolean flag indicating whether the 

— input was processed. 

—OUT Field_lD The ZD of the field which received input. 

— This ID may be NULL if it is not 

— input within the form's fields but still 

processed by this task. 


—OUT FieldJType 


The type of field which received input. 


— end formal parameters; 


entry Query_Form_Description (Form_Buffert out UFM_rorm_Buffer); 

— CPH description: Returns a buffer containing the editor 
— description section of the form. 


— formal parameters 

—out Form_Buffer The ASCII buffer contains the editor 

— description section of the form. 


— end formal parameters; 


entry Query_Form_Editor_status (Editor_ID: in UFH_ID; 

Editor_Stat : in UFM_Editor_Stat_Ptr); 

— CPH description: Returns the status of a form's editor. 

— formal parameters 

—IN Editor_XD The ID of the editor whose status is being 

— queried. 

—out Editor_stat The status of the editor. 

— end formal parameters; 


entry Query_Form_Size (Pixel Width; out SIS_WiNDOW_COLUMN; 

Pixel_Height; out 8Ys“wiNDOW_ROW); 

— CPH description: Returns the number of pixel columns and rows that 

— a form occupies. Mote this is not the number of pixel 

— columns and rows necessarily visible to the user but 

— the total required if it was entirely visible. 


A- 104 



—OUT Pixel_width 

Number 

of 

pixel 

columns 

in the form. 

—OUT Pixel_Height 

Number 

of 

pixel 

rows in 

the form. 


— and formal parameters; 


entry Resize_Form (Pixel_Col: 

in 

SYS WINDOW_COLUMN 

Pixel~Row: 

in 

SYS WINDOW~ROW; 

Pixel~Width: 

in 

SYS~WINDOW~COLUMN 

Pixel~Beight: 

in 

SYS~WINDOW~ROW); 


— CPM description: changes the size of a form. 


— formal parameters 
—IN Pixel_Col 

—IN Pixel_Row 

—IN Pixel_Width 

—IN Pixel_Height 


Column number from within the window where the 
left side of the form shall be placed. Column 0 
is at left of the window. 

Row number from within the window where the top 
side of the form shall be placed. Row 0 is at the 
top of the window. 

The number of columns to be occupied by the form. 
The number of rows to be occupied by the form. 


— end formal parameters; 


entry Terminate_Form_Task; 

— CPM description: Terminates the form task. 

— formal parameters 

— NONE 

— end formal parameters; 


end; 

end UFM_Form_Manager; 


A-105 







The following package specification ia contained in the Internet communications 
function: 


UIN INTERNET COMMUNICATIONS 


A-106 







—CPC package specification name: 

UIN_INTERNET_COMMUNICATIONS 

—CPC description: 

UIN_INTERNET_COMMUNICATIONS CPC is set of utility communications. 
primitives, written in the “Ada* programming language, which allows 
— processes to communicate with each other using an InterNet protocol. 
These primitives work both within one processor and over an ethernet 
network. 

—CPC design notes: 

1.) This package can raise the following exceptions: 
SYS_UIN_EXCEPTION. 

—CPC package author: 

Bruce J. Packard 

science Applications International Corporation (SAIC) 

424 Delaware, suite C-3 

Leavenworth, KS 66048 (913) 651-7925 


with SYSTEMPACKAGE; use SYSTEM_PACKAGE; 
with MSG_MESSAGE; use MSG_MESSAGE; 

package UIN_INTERNET_COMMUNICATIONS is 

— List of client socket numbers. 

type UIN_CLIENT_NUMB_ARRAY is array (SYS_CLIENT) of SYS_CLIENT; 
type UIN_CLIENT_NUMB_PTR is access UIK_CLIENT_NUMB_ARRAY; 

— List of client ID's. 

type UIN_CLIENT_ID_ARRAY is array (SYS_CLIENT) of SYS_EDDIC_PROCESSES; 
type UIN_CLIENT_ID~PTR is access UIN~CLIENT__ID_array ; 

— Host and Service name definition. 

subtype UIN_HOST_TYPE is string (SYS_ENV_STRING); 
subtype UIN_SERV_TYPE is string (SYS_ENV_STRING ); 

— Peek and no peek flags. 

UIN_PEEK : BOOLEAN i- true; 

UIN_N0_PEEK : BOOLEAN :» false; 

-- **###*****#**#**#*#**#******#**#*##**##******#*#***#*#****###**#*#*##***#*# 

procedure UIN_CLIENT_CONNECT_SERVER (HOST_ID : in UIN_HOST_TYPE; 

SERVICE_ID : in UIN_SERV_TYPE; 

MSTR SOCK_NUM : out SYS_CLIENT); 


—cpm description: 

— This module allows a client (user process) to connect to the 

— InterNet master (Server) socket, returning the master socket number. 

—CPM design notes: 

— 1.) None. 

—formal parameters 


A-107 








—IN HOST_ID 

—IN SERVICE_ID 

—OUT MSTR_SOCK_NUM - 

—end formal parameters; 


A string which the environment equates to the 
name (Id) of the Host (server) machine. 

A string which the environment equates to the 
Service Id (INET port number). 

A pointer to the server (Master) socket Number. 


#*f*#«**####**##*##*######*#f#**###**#»####«#####*#tf#***»*#***####*****### 


procedure UIN_CLOSE_SOCKET (CSN_INDEX : in 

” CLIENT_SOCK_NUM s in 

CLIENT_DISP~NUM : in 

NUM CLIENTS t in out 


SYS_CLIENT; 
UIn”cLIENT_NUMB_PTR; 
UIN~CLIENT_ID_PTR; 

SYS_CLIENT); 


—CPM description: 

This module Closes the specified Internet client socket and remove 
it from the list of client sockets. 

—CPM design notes: 

1.) None. 


—formal parameters 
—IN CSN_INDEX 

'-I/O CLIENT_SOCK_NUM 
—I/O CLIENT_DISP_NUM 

—I/O NUM_CLIENTS 

—end formal parameters; 


The array Index of the Client Socket Number 
being closed. 

The list of client Socket Numbers. 

The list of client Display Numbers. This is 
machine number of the corresponding client 
socket number. 

The pointer to the actual Number of Client 
sockets currently in the system. 


iff##*#*#*#**f*i«**f#»#*##«#f##*<#*########***#**##**###**##**#####*«**##*« 


procedure UIN_ESTABLISH_SERVER (HOST_ID 

SERVICE_ID 
MSTR SOCK NUM 


in UINJBOSTJTYPE; 
in UIN_SERV_TYPE; 
in out SYS_CLIENT); 


—CPM description: 

This module sets up and opens an InterNet Server returning the 
— master socket number. 


—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN HOST_id - A string which the environment equates to the 

— name (Id) of the Host (server) machine. 

—IN SERVICE_ID - A string which the environment equates to the 

— Service Id (INET port number). 

—OUT MSTR_SOCK_NUM - a pointer to the server (Master) Socket Number. 

—end formal parameters; 

••*#***#*#*****•**«*«****••*###*#«*#**###*#*******#***#****«*****#*#******* 

procedure UIN_FLUSH_MSG (SOCK_NUM : in SYS_CLIENT; 

~ FLUSH_LEN : out MSG~MESSAGE_LEN); 

—CPM description: 




This module Flushes a Message from the InterNet buffer system. 

—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN sock_num - The Socket Number to read from. 

—OUT FLUSH_LEN - The length of the message flushed if it worked, and 

the error number if the flush failed. 

—end formal parameters; 


#*############*##*«#*#######«######«##########################*####»»###### 


procedure uin_recv_msg (PEEKJFLAG s in 

FROM__SOCK_NUM : in 

msg_len : in out 

MSG - : in 


BOOLEAN; 

SYS CLIENT; 

MSG~MESSAGE_LEN; 

MSG MESSAGE POINT); 


—CPM description: 

— This module sneaks a peek at, or Receives a Message which is being 

— buffered in the InterNet system. 


—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN PEEK_FLAG - A Flag which tells this module whether to actually 

receive the message or just "peek” at the first 

-- "msg_len" bytes. 

- true - just peek at the message. 

— « false - read the entire message. 

—in from_sock_num - The socket Number to read From. 

—I/O msg_len - The number of bytes to read, or peek at, on the way 

in and the number of bytes received, or the error 
number if the received failed, on the way out. 

—OUT msg - The Message received. 

—end formal parameters; 


t*t***t»ttli»*H**t#*#*t**tt#*#**HHH*»»t*»#**ttt*»#*#*t#*t*»**»**#t*»*» 

procedure UIN_SEND_MSG (TO_SOCK NUM : in SYS_CLIENT; 

MSG t in MSG_HESSAGE_POINT; 

MSG_LEN : in out HSG_MESSAGE_LEN); 

—CPM description: 

This module sends a Message across the InterNet system. 

—CPM design notes: 

1.) None. 

—formal parameters 

—IN TO_SOCK_NUM - rhe socket Number to write To. 

—IN MSG - The Message to write. 

—I/O MSC_LEN - The number of bytes to write on tl ^ way in and the 

number of bytes written, or the error number if the 

received failed, on the way out. 

—end formal parameters; 


A-109 



— ****#*l#i*i*#*##«#**f###«**i#####**####*##**######*il*#f#*#*###**t>***ttt*# 

procedure UIN_SERVER_CONNECT_CLIENT ( 

~MSTR_SOCK_NUM s in SYS_CLIENT; 

MAX_CLIENTS ! in SYS_CLIENT; 

NUM~CLIENTS s in out SYS_CLIENT; 

CLIENT_SOCK_NUM s in UIN_CLIENT_NUMB_PTR; 

CLIENT_DISP_NUM s in UIN_CLIENT_ID_PTR) ; 

—CPM descriptions 

— This module allows the Server to Connect (accept) a client socket, 
returning the socket number. 

—CPM design notes: 

1.) None. 


—formal 

parameters 

—IN 

MSTR SOCK_NUM 

—IN 

MAX_CLIENTS 

—I/O 

NUM_CLIENTS 

—OUT 

CLIENT_SOCK_NUM 

—OUT 

CLIENT DISP NUM 


—end formal parameters; 


The server (Master) socket Number. 

The Maximum number of Clients allowed in the 
system. 

A pointer to the actual Number of Client sockets 
currently in the system. 

The list of Client socket Numbers. 

The list of Display Numbers for each Client, 
related to the corresponding "client_sock_num". 


— #ff#<##ff**#*«*«#***f*#*#t***#**#***##»*#»*****»##*t###*#t#*#*»****####***t 


procedure UIN_SERVER_WAIT 


{MSTR_SOCK_NUM S in 
NUM_CLIENTS S in 

CLIENT_SOCK_NUM s in 
CALLING_SOCK_NUM s out 
SOCKET INDEX : out 


SYS_CLIENT; 
SYS_CLIENT; 
UIN_CLIENT_NUMB_PTR; 
SYS_CLIENT; 
SYS_CLIENT); 


—CPM 

descriptions 

— 

This module causes 

— 

one of the clients 

—CPM 

design notes: 

— 

1.) None. 

—formal parameters 

— IN 

MSTR SOCK NUM 

—IN 

NUM_CLIENTS 

—IN 

CLIENT_SOCK_NUM 

—OUT 

CALLING_SOCK_NUM 

—OUT 

SOCKET_INDEX 


the Server program to Wait for a response from 
on the InterNet. 


- The server (Master) Socket Number. 

- The actual Number of client sockets currently 
in the system. 

- The list of Client Socket Numbers. 

- A pointer to the Number of the Socket who just 
called the server. 

- A pointer to the client socket Number array 
Index, for the client who just called. 


—end formal parameters; 


end UIN INTERNET COMMUNICATIONS; 


A-110 



UIW Utility Package Specifications 


The following package specifications are contained in the color image display 
function: 


UIW_GENERIC 
UIW~IMAGE WINDOW 


A-lll 








—CPC package specification names 
UIW_GENERIC 

—CPC descriptions 

— UIW_GENERIC CPC is a set of Utility color graphics primitives, written in 
the "Ada” programming language, which allows programs to perform color 
Imaging functions within the X Windows system. 

—CPC design notes: 

1. ) This package must be instantiated with its generic formal parameters. 

2. ) This package can raise the following exceptions: 

SYS_UIW_EXC£PTION. 

—CPC package author: 

— Bruce J. Packard 

Science Applications International Corporation (SAIC) 

424 Delaware, Suite C-3 

Leavenworth, KS 66048 (913) 651-7925 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

generic 


— Types of buffers that can be used by the UUX I/O utilities 
type UIW_IMAGE_BUFFER is private; 

type UIW_IMAGE_POINTER is access UIW_IMAGE_BUFFER; 
package UIW_GENERIC is 


— f##*#i*<*#*##*#«*#####*#*f##»##*#t**#H#ti###*##*#*#***#*#t#*»»*i***tt##t« 


procedure uiw create_pI xmap (SIZE X I in 

SIZE_Y : in 

BIT_IMAGE : in 

COLOR : in 

PIXMAP ID : out 


SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
UIW_IHAGE_POINTER; 
SYS_COLOR; 
SYS_WIWDOW_ELE_ID); 


—cpm description: 

-- This module Creates a Pixmap out of bitmapped data. 


—CPM design notes: 

1. ) The bit image must be in memory order (Bits 0-15) for each 16 
bit word. 

2. ) The pixmap is displayed and erased with UIW_DISPLAY_BIT_IMAGE. 

3. ) The pixmap must be removed from memory with - urw_PREE_PIXMAP, when 
the pixel image is no longer required (see UIW_PREE_PIXMAP). 

—formal parameters 

—IN size_x - The size of the image in the X direction. 

—IN SIZE_Y - The size of the image in the Y direction. 

—IN BIT_IMAGE - The Bit Image to transform. The image is organized in 

rows from the top to the bottom. Each row contains 
-SIZE_X- bits and there are -SIXE_Y" rows in the image. 
—IN COLOR - The index into the color lookup table for the Color 

— assigned to the on bits in this pixmap. 

— out PIXMAP_ID - The Id assigned to this Pixmap. This id is required 

for displaying and freeing the pixmap. 


A-112 






—end formal parameters; 


— «***#****#*#*#***f**#|#f#«#»*#*##*#«#«#####««*#######*#*######*#*#####*#### 


procedure UIW_display_IMAGE (WIND0W_ID I in 

BITS_DEEP » in 
SUB_ADD FLAG t in 
DISPLAY~rUNTION : in 
PIXEL_UL_X t in 
pixel”ul~y t in 
size_x “ : in 
SIZE~Y t in 
IMAGE : in 
PLANE MASK I in 


S Y S_WINDOW_ELE_ID; 
SYS_BITS_DEEP; 
BOOLEAN; 

SYS_COLOR_ACTION; 
SYS WINDOW_COLUMN; 
SYs”wiNDOW_ROW; 
SYS~WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
UIW~IMAGE_POINTER; 
SYS COLOR MASK); 


—CPM description: 

This module Displays or erases a raster image in the specified planes. 


—CPM design notes: 

1. ) Image depths (BITS_DEEP) of 1 should use UIW_DISPLAY_BIT_IMAGE. 

2. ) The only image depth (BITS_DEEP) currently supported is 8. 


—formal parameters 
—IN WINDOW_ID 

—IN BITS_DEEP 

—IN SUB ADD FLAG 


—IN DISPLAY_FUNTION 

—IN PIXEL_UL_X 

—IN PIXEL_UL_Y 

—IN SIZE_X 

—IN SIZE_Y 

—IN IMAGE 

—IN PLANE MASK 


—end formal parameters; 


- The Id of the window to display the image in. It 
can be obtained by calling uwm_query_window_id. 

- The Depth of each pixel value in the raster image. 

** 8 - Byte image. 

- Image Subtraction or Addition Flag. During 
subtraction, the bits set in the raster image 
shall be subtracted out of the selected planes. 
During addition, the bits set in the raster image 
shall be added into the selected planes. 

« 0 - subtract the image. 

■ 1 - Add the image. 

- The means of adding/subtracting the image to the 
displayed image (and, or, copy...). 

- The window X coordinate of the Upper Left corner 
of the image. 

- The window Y coordinate of the Upper Left corner 
of the image. 

- The Size of the image in the X direction. 

- The Size of the image in the Y direction. 

- The raster Image to display/erase. The image is 
organized in rows from the top to the bottom. 

Each row contains *SIZE_X" elements and there are 
"SIZE_Y" rows in the image. Each element of the 
image”occupies "BITS_DEEP" bits. 

- A bit map representation of the planes to be 
affected by the image. Value can be obtained from 
"UIW PLANE MASK". 


*«##*#!*#•#<<«#«ft*#«#|#####t##|«<##f(##«|<#*<«####f*lt*|##<#<«t*###*#f#<*# 

procedure UIW_16BIT_SWAP (WIDTH : in SYS_WINDOW_COLUMN; 

HEIGHT I in 8YS _ WINDOW”ROW; 





BIT_IMAGE s in UIW_IHAGE_POIHTER ) ; 

—CPM descriptions 

— This nodule swaps the Bits of 16 bit words, an order X Windows happens 

— to prefer. 

--’CPM design notes: 

1.) bit 0 -> bit 15; bit 15 -> bit 0 

bit 1 -> bit 14; bit 14 -> bit 1 ... 

—formal parameters 

—IN WIDTH - The Width of the bit image buffer. 

--IN HEIGHT - The Height of the bit image buffer. 

—I/O BIT_IMAG£ - Buffer containing the bit image. 

—end formal parameters; 


end UIW_GENERIC; 





—CPC package specification name: 
UIW IMAGE WINDOW 


—CPC description: 

uiw_image_window CPC is a set of color graphics primitives, written in 
the "Ada” programming language, which allows programs to perform .color 
imaging functions within the X Windows system. 

—CPC design notes: 

1.) This package can raise the following exceptions: 

SYS_UIW_EXCEPTION. 

—CPC package author: 

— Bruce J. Packard 

Science Applications international Corporation (SAIC) 

424 Delaware, Suite C-3 

Leavenworth, KS 66048 (913) 651-7925 


with SYSTEM_PACKAGE; 
package UIW_IMAGE_WINDOW is 


use SYSTEM_PACKAGE; 


— Array for storing contiguous line segment points 

type UIW_X_POINTS is array (SYS_DB_SIZE range <>) of SYS_IMAGE_COLUMN; 

type uiw_y_points is array (SYS_DB_SIZE range <>) of sys_image_row; 

subtype uiw_Brush_width is SYS_PIXEL range 1..5; 

UlW_Single_Brush_width : constant UIW_Brush_Width :* 1; 
UIW_Double_Brush_width : constant UXW_Brush_Width :« 2; 

— 444444444444444444444444444444444444444444444444444444444444444444444444444 


procedure UIW_DISPLAY_BIT_IMAGE (WINDOW_ID : in SYS_WINDOW_ELE_ID; 

SUB_ADD_FLAG : in BOOLEAN; ” 

DISPLAY_FUNTION : in SYS_COLOR_ACTION; 

PIXEL_UL_X : in SYS_WINDOW_COLUMN; 

PIXEL_UL_Y : in SYS_WINDOW_ROW; 

SIZ E_X : in SYS_WINDOW_COLUMN; 

SIZE^Y « in SYS_WINDOW_ROW; 

PIXMAP_ID : in SYS_WINDOW_ELE_ID; 

planeJSask : in sys_color_mask7; 

—CPM description: 

This module Displays or erases a Bit Image (pixmap) in the 
— specified planes. 

—CPM design notes: 

1.) The pixmap is created by UIW_CREATE_PIXMAP. 


-formal parameters 
-IN WINDOW_ID 

-IN SUB ADD FLAG 


The Id of the window to display the image in. it 
can be obtained by calling UWM_QUERY_WINDOW_ID. 
Image Subtraction or Addition Flag. During 
subtraction, the bits set in the raster image 
shall be subtracted out of the selected planes. 
During addition, the bits set in the raster image 
shall be added into the selected planes. 

0 - subtract the image. 




■ 1 - Add the image. 

—IN DlSPLAY_FUNTlON - The mean* of adding/eubtracting the image to the 

displayed image (and, or, copy...). 

—IN PIXEL_UL_X - The window X coordinate of the Upper Left corner 

— ~ of the image. 

—IN PT XET. _irt._v - The window Y coordinate of the Upper Left corner 

~ of the image. 

—IN SIZE_X - The size of the image in the X direction. 

—IN SIZE~Y - The Size of the image in the Y direction. 

—IN PIXMAP_ID - The Pixmap Id returned from urw_CREATE_PIXMAP. 

—IN PLANE_HASK - A bit map representation of the Planes to be 

affected by the image. Value can be obtained from 
"UIW_PLANE_MXSX". 

--end formal parameters; 


fifllliitffliifiiifiiiiililiiiiiffiliifiiifiiiiiiiiiiiiiiiiifiiiiiiiiliiltf 

procedure UIW_DISPLAY_CIRCLE (WINDOW__XD : in SYS_WINDOW_ELE_ID; 

SUB_ADD_FLAG : in BOOLEAN; 

CENTER X S in SYS_IMAGE_COLUMN; 

CENTER Y : in SYS_IMAGE_ROW; 

radius” * in sysjwindow_column; 

COLOR t in SYS_COLOR; 

PLANE_MASX I in SYS_COLOR_MASX); 

—CPM description: 

This module Displays or erases a Circle in the specified planes. 

—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN window_id - The Id of the Window to display the circle in. It 

“ can be obtained by calling uwm_query_window_id. 

—IN sub_add_flag - image subtraction or Addition Flag. During 

— subtraction, the bits set in the raster image shall 

— be subtracted out of the selected planes. During 

addition, the bits set in the raster image shall be 
added into the selected planes. 

— - 0 - subtract the circle. 

— - l - Add the cirlce. 

—IN CENTER_X - The window x coordinate of the Center of the circle. 

—IN C3NTER_Y - The window Y coordinate of the Center of the circle. 

—IN radius” - The Radius of the circle, in pixels. 

—IN COLOR - The index into the color lookup table for the color 

— of the circle. 

—IN PLANE_MASx - a bit map representation of the Planes to be 

— affected by the circle, value can be obtained from 

— "UIW_PLANE_KASX*. 

—end formal parameters; 


IfffifiiiiifllfiiiiifiiiiiifflliliiffffffIIfffifffffiifffffIiiiffiiiiiiiffI 

procedure UXW DISPLAY LINE (WINDOW ID t in SYS_WINDOW_ELE_ID; 

SUB ADD FLAG I in BOOLEAN; 

LINE START X I in SYS INAGE COLUMN; 


A-116 








•CPM description: 

This module Displays or erases a Line in the specified planes. 


—CPM design notes: 
1.) None. 


LINE START_Y 

z 

in 

LINE~END X 

z 

in 

LINE~END_Y 

z 

in 

BRUSH WIDTH 

z 

in 

COLOR 

• 

e 

in 

PLANE MASK 

z 

in 


SYS_IMAGE_ROW; 
SYS_IMAGE_COLUMN; 
SYS_IMAGE ROW; 
UIW_BRUSH~WIDTH; 
SYS_COLOR; 
SYS_COLOR MASK); 


—formal parameters 

—IN window_id - The Id of the Window to display the line in. It 

can be obtained by calling UWH_QUERY_WINdow_ID . 

—IN SUB_ADD_FLAG - image Subtraction or Addition Flag. During 

subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits sat in the raster image shall be 
added into the selected planes. 

■ 0 - Subtract the line. 

* 1 - Add the line. 

—IN LINE_START_X - The window X coordinate of the Start of the Line. 

—IN LINE__start_y - The window Y coordinate of the start of the Line. 

—IN LINE_£ND_X - The window X coordinate of the End of the Line. 

—IN LINE_END_Y - The window Y coordinate of the End of the Line. 

—IN brush_Width - The thickness (Width in pixels) of the lines. 

—IN color - The index into the color lookup table for the color 

— of the line. 

—IN plane_Mask - a bit map representation of the Planes to be 

affected by the line. Value can be obtained from 
"UIW_PLANE_MASK". 

—end formal parameters; 


###*#*##*****•**#*****#*#**##***##*##*•*##*•#####***»*#»«####«##*###*#####* 


procedure uiw display LINES 


(WINDOW_ID 

z 

in 

SUB_ADD_FLAG 

z 

in 

X_POINTS 

z 

in 

Y_POINTS 

z 

in 

NUMBER POINTS 

z 

in 

BRUSHJWIDTH 

z 

in 

COLOR 

t 

in 

PLANE MASK 

s 

in 


SYSJWINDOW_ELE_ID; 
BOOLEAN; 
UIW_X_POINTS; 
UIW_Y_POINTS; 
SYS~DB_SIZE; 
UIW_BRUSH_WIDTH; 
SYS“C0L0R; 
SYS~COLOR_MASK); 


—CPM description: 

— This module Displays or erases contiguous Line segments in the 

— specified planes. 


—CPM design notes: 

— 1.) This module will draw single or multiple line segments. 


—formal parameters 

—IN window_id - The Id of the Window to display the lines in. it 
— can be obtained by calling uwm_query_window id. 


A-117 


-IN 

SUB_ADD_FLAG 

- Image subtraction or Addition Flag. During 

subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits set in the raster image shall be 
added into the selected planes. 

» 0 - subtract the lines. 

■ 1 - Add the lines. 

-IN 

X_POINTS 

- The list of window X coordinate Points in the 
contiguous line segments. 

-IN 

Y_POINTS 

- The list of window Y-coordinate Points in the 
contiguous line segments. 

-IN 

NUMBER_POINTS 

- The Number of Points in the list. This will 
produce {numberjpoints - 1) line segments. 

>« 2 and fit in a 32 bit integer. 

-IN 

BRUSH_WIDTH 

- The thickness (Width in pixels) of the lines. 

-IN 

COLOR 

- The index into the color lookup table for the Color 

- 


of the lines. 

-IN 

PLANE_MASK 

- a bit map representation of the Planes to be 

affected by the line. Value can be obtained from 
"UIW PLANE_MASK". 


—end formal parameters; 


- *****#**###*##*#*#*******#**»##*#f***t###**t#*t*#*##***##*****#**»#*##**#«* 


procedure UIW_DISPLAY_SYMBOL (WINDOWJID * 

FONT ID t 
SUB ADD_FLAG : 
PIXEL_COLUMN : 
PIXELJROW : 
SYMBOL_VALUE : 
COLOR ~ * 
PLANE MASK : 


—CPM description: 

This module Displays or erases 


in SYS_WINDOW_ELE_ID; 
in SYS_WINDOW_ELE_ID; 
in BOOLEAN; 
in SYS_IMAGE_COLUMN; 
in SYS_IMAGE_ROW; 
in SYS_WINDOW_ELE_ID; 
in SYS_COLOR; 
in SYS_COLOR_MASK); 


a font Symbol in the specified planes. 


—CPM design notes: 

— 1.) The font must be initialized with UIW__INIT_FONT before an element 

— can be displayed. 


—formal parameters 
—IN WINDOW_ID 

—IN FONT_ID 

—IN SUB ADD FLAG 


—IN PIXEL_COLUMN 

—IN PIXEL ROW 


- The Id of the Window to display the symbol in. It 
can be obtained by calling UWM_QUERY_WINOOW_ID. 

- The Id of the symbol Font. Value is output from 
"UIW_INIT_FONT". 

- Image Subtraction or Addition Flag. During 
subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits set in the raster image shall be 
added into the selected planes. 

■ 0 - Subtract the symbol. 

■ 1 - Add the symbol. 

- The Pixel column of the upper left corner of the 
symbol. 

- The Pixel Row of the upper left corner of the 
symbol. 


A-118 




SYMBOL_VALUE 

COLOR 

PLANE MASK 


—end formal parameters; 


The integer Value of the Symbol to be displayed. 

The index into the color lookup table for the Color 
of the symbol. 

A bit map representation of the Planes to be 
affected by the symbol. Value can be obtained from 
"UIW PLANE MASK". 


- *####*##*#*#********#*#*####*###**##*#####***###*#«***#######*****#*#*#*##* 


procedure UIW_DISPLAY_TEXT <WINDOW_ID * in 
" FONT_ID : in 

SUB_ADD_FLAG t in 
PIXEL_COLUMN * in 
PIXEL_ROW : in 
TEXT_STRING s in 
COLOR : in 

PLANE MASK : in 


SYS_WINDOW_ELE_ID; 
SYS~WINDOW“eLE_ID; 
BOOLEAN; 

S YS__IMAGE_COLUMN ; 

SYS~IMAGE_ROW; 

STRING; 

SYS_COLOR; 
SYS_COLOR_MASK); 


—CPM description: 

This module Displays or erases a Text string in the specified planes. 
—CPM design notes: 

— 1.) The font must be initialized with UIW_iNIT_FONT before a string 

can be displayed. 


—formal parameters 
-IN WINDOW_ID 

-IN FONT_ID 

-IN SUB ADD FLAG - 


PIXEL_COLUMN - 

PIXEL_ROW 

TEXT_STRING 

COLOR 

PLANE MASK 


—end formal parameters; 


The Id of the Window to display the text Btring in. 
It can be obtained by calling UWM_QUERY_WIND0W_ID. 
The Id of the text Font. Value is output from 
“UIW_INIT_FONT". 

Image subtraction or Addition Flag. During 
subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits set in the raster image shall be 
added into the selected planes. 

0 - subtract the text. 

1 - Add the text. 

The Pixel Column of the upper left corner of the 
text. 

The Pixel Row of the upper left corner of the text. 
The String of Text to be displayed. 

The index into the color lookup table for the Color 
of the text string. 

A bit map representation of the Planes to be 
affected by the text string. Value can be obtained 
from "UIW PLANE MASK". 


*#****<#**f*#**#*****#*«##***#*#*#*#*##**#*#*#***«****#******#**#**#*#»**#* 


procedure uiw_ERASE_PLANES (WINdow_id : in 

PIXEL UL X : in 
PIXEL~UL~Y : in 
SIZE X ~ : in 
SIZE - Y : in 


SYS_WINDOW_ELE_ID; 
SYS~WINDOW~COLUMN; 
SYS_WINDOW~ROW; 

SYS~WINDOw“cOLUMN; 
SYS~WINDOW~ROW; 


A-119 










PLANE_MASK s in SYS_COLOR_MASK); 

—CPM descriptions 

— This module Erases everything in a given rectangular image out of the 

— specified Planes. 


The Id of the Window to erase the planes in. It can 
be obtained by calling uwm_QUERY_window_ID. 

The window X coordinate of the Upper Left corner of 
the image. 

The window Y coordinate of the Upper Left corner of 
the image. 

The Size of the image in the X direction. 

The Size of the image in the Y direction. 

A bit map representation of the Planes to be affected 
by the image. Value can be obtained from 
*UIW_PLANE_MASK". 

—end formal parameters; 


lit t#Hti####tt##iH#l*tllt#t*H#H###*#l#H####tlt###t###t####f ######## tti 

procedure UIW_FLUSH_BUFFER; 

—cpm descriptions 

— This module Flushes the graphics command Buffer. 

—cpm design notess 

1.) X windows buffers its commands and flushes that buffer after 
certain commands or when the buffer is full. Therefore this module 
only needs to be called when a previous command must be seen 
immediately. 

—formal parameters 
None 

—end formal parameters; 


—CPM design notess 
— 1.) None. 

—formal parameters 


J5 

M 

1 1 

1 1 

WINDOW_ID 

—IN 

PIXEL_UL_X 

— IN 

PIXEL_UL_Y 

—IN 

SIZE_X 

—IN 

SIZE~Y 

—IN 

PLANE_MASK 


######*«#i###*#######i##########f##########i####t#«###f#######«############ 

procedure UIW_FREE_PIXMAP <PIXMAP_ID s in SYS_WINDOW_ELE_ID); 

—CPM descriptions 

— This module Frees up the memory allocated to a Pixmap back in 
UIW_CREAT£_PIXMAP. 

—CPM design notess 

— 1.) In EDDIC the contours pixmaps should be freed after each block is 

— displayed, but the unit symbology pixmaps can be defined once and left 

— for the duration of the run. 

—formal parameters 

—IN pixmap_id - The Pixmap Id returned from UIW_CREATE_PIXMAP. 

—end formal parameters; 


A-120 




**#**##***«***#**#****#*#<************i#*#****#*##*#*####*#******#*######*< 

procedure uiw init_font (FONT_NAME * in STRING; 

FONT_ID J out SYS_WINDOW_ELE_ID; 

FONT_HEIGHT s out SYS_WINDOW_ROW~ 

FONT_WIDTH s out SYS_WINDOW_COLUMN); 

—CPM descriptions 

This nodule Initializes a specified Font. 

—CPM design notes: 

1.) Fonts are only initialized once. 

— 2.) It is legal to have multiple fonts in a single process. 

—formal parameters 

—IN FONT_NAME - The string containing the Font's directory and Name. 

—OUT FONT_ID - The Id of the Font as returned by the X system. 

—OUT FONT_HEIGHT - The Height, in pixels, of a Font character. 

—OUT FONT_wiDTH - The width, in pixels, of a Font character. 

—end formal parameters; 


#**«#«#t#**i#i##**«#**«f#f#f<*##iH*##*#*«<##***####*##t###*****###*#*****t 

procedure UIW_INIT_LOOKUP_TABLE (MAX_PLANES : in SYS_MAX_PLANES); 

—CPM description: 

This module Initializes (allocates space for) the color Lookup Table. 
—CPM design notes: 

— 1.) The lookup table is only initialized once. 

—formal parameters 

—IN max_PLANES - The Maximum number of color Planes currently allowed 

in the system. 

—end formal parameters; 


procedure UIW_LOAD LOOKUP TABLE (LUT INDEX : in SYS_COLOR_TABLE; 

.“ ~ RED_INTENS : in SYS_COLOR; 

GREEN_INTENS : in SYS~COLOR; 

BLUE_INTENS I in SYS_COLOR); 

—CPM description: 

This module Loads color values into the color Lookup Table. 

—CPM design notes: 

— 1.) The display is not altered by calling this module; the display 

is altered by calling uiw_store_lookup_table. 

—formal parameters 

—IN LUT_INDEX - The Index into the Lookup Table to load, zero is 

~ the first cell in the lookup table. 

—IN RED_INTENS - The Intensity for Red. 

—IN green INTENS - The Intensity for Green. 


A-121 






—IN BLUE_INTENS - The Intensity for Blue. 

—end formal parameters; 


- *****#**###****#*####*#*«****#*******#*##«##*##«###**#*«f*«f****<*«*##*##«# 


procedure UIW_MOVE_IMAGE (WINDOW_ID 

OLD_PIXEL_UL__X 

old“pixel_ul2y 

N E VJ_P IXEL_UL~X 
NEw”PIXEL~UL~Y 
sizi_x ~ 

SIZE Y 


s in SYS_WINDOW_ELE_ID; 
: in SYS_WINDOW_COLUHN; 
: in SYS_WINDOW_ROW; 

: in SYS_WINDOW_COLUMN; 
s in SYS~WINDOW_ROW; 

: in SYS_WINDOW_COLUMN; 
: in SYS WINDOW_ROW); 


—CPM description* 

— This module Moves a raster Image from one location in a window to 

— another location within the same window. 


—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN WlNDOW_ID - The Id of the Window the image is in. It can be 

obtained by calling uwm_queryjwindow_id. 

—IN olD_PIXEL_UL_X - The window X coordinate of the Upper Left corner 

of the source image. 

—IN OLD_PIX£L_UL_Y - The window Y coordinate of the Upper Left corner 

— of the source image. 

—IN NEW_PIXEL_UL_X - The window X coordinate of the upper Left corner 

— of the destination image. 

—IN new_pixel_UL_Y The window Y coordinate of the Upper Left corner 

of the destination image. 

—IN SIZE_X - The Size of the image in the X direction. 

—IN size_Y - The size of the image in the Y direction. 

—end formal parameters; 


*«f#f*t*****t**#***ttH#i»#«UHH*##«H#f#*t*t*#ti»H**t*t#t*#***t*##tH*f 

procedure UIW_PLANE_MASK (START_PLANE : in SYS_COLOR_PLANE; 

END_PLANE : in SYS_COLOR_PLANE; 

PLANEJMASX I out SYS_COLOR_MASX); 


—CPM description: 

— This module calculates a bit map representation (Mask) of the Planes 
requested by the user for later use. 


—CPM design notes: 
1.) None. 


—formal 

parameters 

--IN 

START_PLANE 

—IN 

END_PLANE 

—OUT 

PLANE_KASK 


The Plane number of the lowest plane to be affected 
by the image. Bit 1 of the raster image shall be 
loaded into this plane. Plane numbers start at 1. 
The Plane number of the highest plane to be affected 
by the image. Image bits that are greater than 
(endjplane - start_plane + 1) shall be ignored. 

A bit map representation of the Planes which the 


A-122 



user would like to affect in a future window call. 
—end formal parameters; 


- #*#*<<#f**##i**##*#*#****###******#*««*i**#**##*###f**##«it####*##**f****** 


procedure uiw_rubberband_line (WIND0W_ID : in 

FROM_POINT_X : in 
FROM_POINT_Y t in 
COLOR “ : in 

PLANE_MASK : in 
END_POINT_X : out 
END POINT Y : out 


SYS_WINDOW_ELE_ID; 
SYS~WINDOW_COLUMN; 
SY S~WINDOW_ROW; 
SYS~COLOR; 
SYS~COLOR_MASK; 

SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW); 


—CPM description: 

This module draws a Rubberband Line in the specified window from 

— the specified point to the cursor and returns the end point selected 

— by the user. 

—CPM design notes: 

1. ) if the user moves the cursor outside the window and selects the 
point, the end point coordinates are the lines window boundry crossing. 

2. ) If the user moves the cursor outside the window and selects the 
point, the rubberband line is not drawn upon return. 

—formal parameters 

—IN window_ID - The Id of the Window the line is in. It can be 

obtained by calling UWM_QUERY_window_id. 

—IN from_point_X - The window X coordinate of the point the lines 

rubberbanding emanates Prom. 

—in from_point_y - The window Y coordinate of the Point the lines 

rubberbanding emanates From. 

—IN color - The index into the color lookup table for the color 

of the line. 

—IN PLANEJKASK - A bit map representation of the Planes to be 

affected by the line. Value can be obtained from 
"UIWJPLANE_MASK". 

—OUT END_POINT_X - The window X coordinate of the lines End Point as 

selected by the user. 

—OUT END_POINT_Y - The window Y coordinate of the lines End Point as 

— selected by the user. 

—end formal parameters; 


<#f#####f####ttl#i######f####t#####H|#HH########if###################### 

procedure UlW_STORE_LOOKUP_TABLE; 

—CPM description: 

This module stores the color Lookup Table. 


—CPM design notes: 

1.) Calling this module alters the display provided some of the 
— values were changed with UIW_LOAD_LOOKUP_TABLE. 

—formal parameters 
None. 

—end formal parameters; 


A-123 



end UIW IMAGE WINDOW; 


A-124 




UTM Utility Package specifications 


The following package specifications are contained in the tactical map function: 

CM_SYSTEM 

MAP_SYSTEM 

OBS_SYSTEM 

UCC_COORD_CONVERT 

UCE_CNTRL_MSR_EDITOR 

UCM_CONTROL_MEASURE 

UME_MAP_E DITOR 

UMP_MAP 

UNITjSYSTEM 

UNT_UNIT 

UOB_OBSTACLE 

UOE_OBSTACLE_EDITOR 

UTH_TAC TICAL_MAP 

UUE UNIT EDITOR 


A-125 





—cpc package specification names CM_SYSTEM 

—cpc descriptions Defines types and objects that are common to the control 
measure display system. 

—cpc design notess 


—cpc package authors Bruce Packard 

Science Applications international Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

With SDB_SITUATION_DB; use SDB_SITUATION_DB; 

package CM_SYSTEM is 


— control measure display options 
type CM_CNTRL_MSR_OPTIONS is 
record 

CM_BLUE EAC s 

CM_BLUE~CORP s 

cm_blue2div s 

CM_BLUEJBDE 8 

cmjblue^bn s 

CM BLUE CO S 


CM_BLUE_POINT S 
CM_BLUE~LINE s 
CM_BLUE AREA S 
CM_BLUE~ROUTE S 
CM_BLUE_CROSSING s 
CM_BLUE_FIRE_PLAN S 
CM_BLUE_MAP_FEAT S 
CM_OPFOR_ARMY s 
CM_OPFOR_DIV s 
CM~OPFOR_RGMT I 
CM OPFOR BN x 


CM_OPFOR_CO S 

CM_OPFOR_POINT j 

CK~OPFOR_LINE : 

CM~OPFOR_AREA : 

CM~OPFOR~ROUTE 5 

CMOPFOR CROSSING S 

CM_OPFOR~FIR£_PLAN S 

CM_OPFOR_MAP_FEAT J 

end record; “ 


BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 

BOOLEAN; 


— Displayed control measures 

CM_CNTRL_MSR_COUNT 

CM~CURR_CNTRL_MSR 

CM CNTRL MSR DISPLAYED S 


S D B_C ONTROL_KEAS URE_ID; 
SDB~CONTROL~MSR_POINT; 
array (SDB_control“measure_id> of boolean 


— Displayed point control 
CM_CNTRL_KSR_PNT COUNT 
CM~CURR_CNTRL_MSR_PNT 
CM CNTRL MSR PNT DISPLAYED 


measures 

S SDB_CONTROL MEASURE ID; 

I SDB~CNTRL_POINT_POINT; 

s array (SDB_CONTROL~MEASURE_ID) 


Of BOOLEAN 


A>126 






— Selected Control Measure point 

CM_SELECTED_BL_POINT s SDB_CONTROL_MEASURE_PT; 

CM__SELECTED~OP_POINT : SDB_CONTROL_MEASURE~PT; 

— Control Measure definition objects 
CM_DEFTNING_CNTRL_MSR : BOOLEAN; 

CM~DEFINE_BUTTON_ID : SYS_WINDOW_ELE_ID; 

CM~DEFINE~MENU_PANEL : SYS~WINDOW~ELE~ID; 

CM_CNTRL_MSR_DEFINITION j SDB_CONTROL_MEASURE REC; 

cm”cntrl_msr_point_def s SDB~CNTRL_MSR_POINT~REC; 

— Current Control Measure display options 
CM_CURR_CNTRL_MSR_OPTION S CM__CNTRL_MSR_OPTTONS; 

— Control measure popup menus (Blue and OPFOR) 

CM__BL_MENU_I D : SYS_WINDOW_ELE_ID; 

CM Z BL _ MENU _ START = SYS~POP_UP_START_PTR J» new 

SYS_POP~UP_START (SYS_CM_MENU); 

CM _ B L_MENU_LENGTH s SYS~POP_UP_LENGTH_PTR :« new 

SYS~POP_UP_LENGTH (SYS_CM_MENU); 
CM_ BL _P°P_UP_TEXT j SYS_MENU_TEXT_PTR new 

SYS_MENU~TEXT (SYS_CM_CELL); 
CM_BL_POP_UP_CHILD : SYS_POP_UP_CHILD_PTR :» new 

SYS_POP_UP_CHILD (SYS_CM_CELL); 
cm _ bl _P° p _ up _ option s SYS_CM_OPTION_PTR new 

SYS~CM__OPTION_ARRAY (SYS_CM_CELL) 
CM _ op _MENU_ID : SYS>INDOW_ELE_ID; 

CM_OP_KENU_START s SYS POP_UP_START_PTR new 

SYS~POP~UPjSTART _ (SYSCMMENU); 

c M_O p _MENU_LENG TH s SYS~POP_UP~LENGTH_PTR new 

SYS~POP~UP_LENGTH (SYS_CM_MENU); 
CM_OP_POP__UP_TEXT j SYS>ENU_TEXT_PTR :» new 

SYS^MENUTEXT (SYS_CM_CELL); 

CM_° p _ p ° p _U p _C H ILD : SYSJ?OP_UP_CHILD_PTR ”■ new 

SYS~POP~UP_CHILD (SYS_CM_CELL); 
c M_ op _ pop _UP_° p TION : SYs”cM_OPTION_PTR :« new 

SYS~CM_OPTION~ARRAY (SYS_CM_CELL) 

end CM SYSTEM; 


A-127 



—cpc package specification name: MAP_SYSTEM 

—cpc description: Defines types and objects that are common to the map system. 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications International corporation 
424 Delaware, Suite C3 
— Leavenworth, KS 66048 

with SYSTEM_PACKAGE; 
with SDB_SITUATION_DB; 
with LUT_SYSTEM; 
with UED_LIST; 

With UNCHECKED__DEALLOCATION; 
package MAP_SYSTEM is 

— Lookup table types for each background type 
subtype MAP_BACK_RANGE is INTEGER range 0..5; 

MAP_BACK_LUT : array (MAP_BACK_RAMGE) of LUTJBACKGROUND :« ( 

LUT_SHADE_VEG, LUT_SHADE_VEG, LUT_SHADE_VEg7 LUT_SHADE_VEG, 
LUT_SHADE_VEG, LUT_NONE); 

— Digital map scales 

subtype MAP_scale_range is INTEGER range 0..5; 

MAP_SCALE_NAMES : array (SYS_MAP_SCALES) of SYS_WINDOW_NAME 

Sl_40000 *> "MAP SCALE: 1:40000 " 6 ASCII.NUL & " 

S 1_80000 »> "MAP SCALE: 1:80000 " 6 ASCII. NHL 6 • 

Sl_160000 -> "MAP SCALE: 1:160000 • k ASCII. NUL 6 " 

Sl_400000 ■> "MAP SCALE: 1:400000 • k ASCII.NUL k • 

Sl_800000 ■> -MAP SCALE: 1:800000 • k ASCII.NUL a " 

— Map display options 

— Status flags indicate if 

— a single color 
type MAP_MAP_OPTIONS is 

record 

MAP_BACK_TYPE : 

MAP_LUT : 

MAP_MAP_SCALE : 

MAP_GRID_STATUS : 

MAP_CONTOUR__STATUS: 

hap^centerJc : 

hap^center"! : 

end record; 

— Map panel description 
type MAP_PANEL_DESCRIPTOR is 

record 

— Id assigned to the digital map panel 

MAP_PANEL_ID : SYS_WINDOW_ELE_ID; 

— Id returned from the window System _ 

MAP_WINDOW_ID : SYS_WINDOW_ELE_ID; 

— Id of the map windows parent - 


feature is highlighted by class or displayed in 


SYS_MAP_BACKGROUND; 
LUT ^BACKGROUND; 
SYS_MAP SCALES; 
BOOLEAN - 
BOOLEAN; 
SYS_COORDINATE; 
SYS^COORDINATE; 



use SYSTEM__PACKAGE ; 
use SDB_SITUATION_DB; 
use LUT^SYSTEM; - 


A-128 





MAP_PARENT_ID 
— Size of the panel in 
MAP_PIXEL_X : 

— Size of the panel in 
MAP_PIXEL_Y : 

— World coordinates of 
MAP_WORLD LL_X : 

map~world~ll~y j 

end record; ” 


SYS_WINDOW_ELE_ID; 

the x direction 

SYS_WINDOW_COLUMN; 
the Y direction 

SYS_WINDOW_ROW; 
the panels lower left corner 
SYS_COORDINATE; 

SYS COORDINATE; 


— Map contour Database description 
type MAP_CONT__DB_DESCRIPTOR is 

record 

— Number of record columns in the database 
MAP_R£CORD_X : SYS_DB_SIZE; 

— Number of record rows in the database 
MAP_R£CORD_Y ; SYS_DB_SI2E; 

— The size of a map block in the X direction 
MAP_BLOCK_SI2E_X : SYS_IMAGE_COLUMN; 

— The size of a map block in the Y direction 
MAP_BLOCK_SIZE_Y : SYS_IMAGE_ROW; 

end record; 

— Elevation Database description 
type MAP_ELEV_DB_DESCRIPTOR is 

record 

— Number of meters per pixel 
MAP_SCAL£ S FLOAT; 

— Size of the digital map in the x direction 
MAP_PIXEL_X s SYS_IMAGE_COLUMN; 

— Size of the digital map in the Y direction 
MAP_PIXEL_Y : SYS_IMAGE_ROW; 

— Number of record columns in the database 
MAP_RECORD_X t SYS_DB_SIZE; 

— Number of record rows in the database 
MAP_RECORD_Y s SYS_DB_SIZE; 

— The size of a map block in the x direction 
MAP_BLOCK_SIZE_X I SYS_IMAGE_COLUMN; 

— The size of a map block in the Y direction 
MAP_BLOCK_SIZE_Y s SYS_IMAGE_ROW; 

— world coordinates of the elevation~lower left corner 

MAP_WORL.D_LI._X s S YS_COORDINATE ; 

MAP_WORLD~LL_Y : SYS~COORDINATE; 

end record; 

— Map Database description 
type MAP_DB_DESCRIPTOR is 

record 

— Number of meters per pixel 
MAP_SCALZ I FLOAT; 

— Size of the digital map in the X direction 
MAP_PIXEL_X : SYS_IMAGE_COLUMN; 

— size of the digital map in the Y direction 

MAP_PIX£L_Y i SYS_IMAGE_ROW; 

— Number of record columns in the database 
MA?_R£CORD_X t SYS DB SIZE; 


A-129 



— Number of record rows in the database 
MAP_RECORD_Y : SYS_DB_SIZE; 

— The size of a nap block in the X direction 
MAP_BLOCK_SIZE__X s S YS_IKAGE_COLUMN; 

— The size of""a map block in the Y direction 
MAP_BLOC K_SIZ E_ Y : SYS_IMAGE_ROW; 

— World coordinates of the digital nap upper left corner 
MAP_WORLD UL_X s SYS COORDINATE; 

MA?_WORLDJJiTy t SYSjCOORDINATE; 

— Grid interval ” 

MAP_GRID_INTRVL s SYSJCOORDINATE; 

end record; ” 

— Map Selection Point description 
type MAP_SELECT_PT_DESCRIPTOR is 
record 


MAP_PIXEL X : 

SYS 

IMAGE COLUMN; 

MAP~PIX£L Y s 

SYSIMAGE ROW; 

MAP_WORLD X : 

SYSJCOORDINATE; 

MAP_WORLD Y S 

SY SjCOORDINATE; 


end record; 


— Map Masks 




MAP_CONTOUR MASK 


S YS__COLOR_MASK; 


MAP_BACKGROUND MASK 

• 

• 

SYS~COLOR~MASK; 


MAP_OVERLAY MASK 

• 

• 

SYS COLOR MASK; 


KAFjGRID MASK 

: 

SYS COLOR MASK; 


MAP_RED MASK 

: 

SYS~COLOR MASK; 


MAP_BLUE MASK 

: 

SYS_COLORJ4ASX; 


— current Map display options 



MAP_CURR_MAP_OPTION 

: 

MAP_MAP_OPTIONS; 


— Current map panel 




MAF_CURR_PANEL 

: 

MAP__PANEL_DES CRIPTOR; 


— Current contour map database 



MAP_CURR_CONT_DB 

: 

HAP_CONT_DB_DESCRIPTOR; 


— Current Elevation database 



MAP_ELEV_DB 

i 

MAP_ELEV_DB_DES CRIPTOR; 


— Current map database 




MAP_CURR_DB 

> 

MAPJ>B_DESCRIPTOR; 


— Last user selection point 

on 

the map 


MAP_CURR_SELECT_PT 

» 

MAPjSELECT_PT_DESCRIPTOR; 

— Digital map parameter file 

names 


MAP_CONTOUR_PILE 

: 

array (MAP SCALE RANGE) 
string (SYS NAME~SIZE); 

of 

map_vegetation_pile 

i 

array (MAP SCALE RANGE) 
string (SYS NAME SIZE); 

of 

MAP_SHADED_PILE 

t 

array (MAP ICAL£~RANGE> 
string (SYS NAME SIZE); 

of 

K AP_ CCM _ ri LE 

t 

array (MAP SCALE~RANGE) 

of 


A-130 






MAP_ELEVATION_FILE 
MAP 3D FILE 


— Map Control menus 
MAP_MENU ID : 

MAP_ME N U~S TART : 

MAP_MENU_LENGTH s 

MAP_P°P_ U P_TEX T s 

MAF _ pop _ up _ CHILD * 

MAP POP UP OPTION ! 


— Map fonts 
MAP_SYMBOLOGY_FONT_ID 
MAP_SYMBOLOGY_FONT_HEIGHT 
MAP_SYMBOLOGY_FONT_WIDTH 
MAPJTEXT_FONT_ID 
MAP_TEXT_FONT_HEIGHT 
MAP TEXT FONT WIDTH 


string (SYS NAME_SIZE); 
array (MAP_scale“rangE) of 
string (SYS_NAME~SIZE); 
array (MAP_SCALE_RANGE) of 
string (SYS_NAME_SIZE); 


SYS WINDOW_ELE_ID; 

S Y S~POP_UP_START_PTR :■ new 
S Y S~POP_UP_S TART (SYS_MAP_MENU); 
SYS~POP~UP_LENGTH_PTR~t- new 
SYSJP0P“UP_LENGTH (SYS MAP MENU); 

SYS MENU_TEXT_PTR 1 - new 

S Y S~KE NU_TE XT (SYS_MAP_CELL); 

SYS_POP_UP_CHILD_PTR :« new 

S Y S~POP_UP~C HILD (SYS_MAP_CELL); 

SYs“HAP_CONTROL_PTR :» new 

SYS^MAP~CONTROL~ARRAY (SYS_MAP_CELL); 


SYS_WINDOW_ELE_ID; 
SYS~WINDOW_ROW; 

SYS_WINDOW_COLUMN; 
SYS_WINDOW_ELE_ID; 
S Y S~WIN DOW_COLUMN; 
SYS WZNDOW_ROW; 


— Station Control Process 
—- socket number 
MAP_STATION_CONTROL 
MAP_CALLINGJPROCESS 
MAP CONTROL SOCKET 


(SCL) for this workstation and control router 

: SYS EDDIC PROCESSES; 

s SYS_EDDIC_PROCESSES; 

: SYS CLIENT; 


— LIST OF OBJECTS ON THE DIGITAL MAP 
type MAP_POlNT_LlMIT is range 0..15; 

type MAP_LIST_OF_POINTS is array (MAP_POINT_LIKIT) of S Y S_IHAGE_LOCAT I ON 

— Type of objects on the map 

type MAP_OBJECT_TYPE i3 (POINT, CIRCLE, RECTANGLE, LINE, POLYGON); 
type MAPOVERLAYS is (BLUEFOR_UNIT, OPFOR_UNIT, BLUEFOR_CNTRL_MSR, 
OPFOR_CNTRL_MSR, BLUEFOR_CNTRL_MSR_PNT, OPFOR_CNTRL_MSR_PNT, 
BLUEFOR_0BSTACLE, OPFOR_OBSTACLE )" 

— Description of the different kinds of objects 
type MAP_OBJECT_REC (OBJECT » MAP_OBJECT__TTPE) is 

record 


case OBJECT is 
when POINT ■> 

PT_LOC l SYS_IMAGE_LOCATION; 

when CIRCLE -> 

CENTER : SYS_IMAGE LOCATION; 


A-131 




RADIUS 


SYS PIXEL 


when RECTANGLE »> 

UL : SYS_IMAGE_LOCATION; 

WIDTH S SYS_IMAGE_COLUMN; 

HEIGHT s SYS~IMAGE_ROW; 

when LINE ■> 

LINE_PTS : MAP_POINT_LIMIT; 

LINE_LOC : MAP_LIST_OF_POINTS; 

when POLYGON *> 

POL_PTS s MAPJPOINTJLIMIT; 

POL~LOC s MAP_LIST_OF_POINTS ; 

end case; 

end record; 

type MAP_OBJECT_POINTER is access MAP_OBJECT_REC; 

— Description of the record that is in the object list 
type MAP__OBJECT_DESC is 

record 

NAME : STRING (1..21); 

OVERLAY : MAP_OVERLAYS; 

OVERLAY_INDEX : INTEGER; 

MENU__ID s SYS_WINDOW_ELE_ID; 

OBJECT S MAP_OBJECT_POINTER; 

end record; 

package OBJECT_LIST is new UED_LIST (MAP_OBJECT_DESC); 

— Instantiate packages for storage deallocation 
procedure OBJECT_DISPOSE is new UNCHECKED_DEALLOCATION ( 

MAP_OBJECT_REC, MAP_OBJECT_POINTER); 

— Temporary storage for the Name, Overlay Type, Overlay Index, and Menu ID. 
—. These should be loaded before the drawing application (UUE, UCE, UOE) is 

— called. 

MAP_OBJECT_NAME » STRING (1..21); 

MAP_OVERLAY_TYPE » MAP OVERLAYS; 

MAP~OVERLAY_INDEX s INTEGER; 

MAP_OVERLAY_KENO * SYS_WINDOW_ELE_ID; 

— List of the digital map popup menus 
type MAP_POPUP_MENU_DESC is 

record ” 

MENU_ID I SYS WINDOW ELE_ID; 

MENU~START S SYS~POP UP~START_PTR; 

menu“lenoth j sys - pop _ up - length_ptr; 

MENU~TEXT I SYS - MENU_TEXT PTR; 

MENU - CHILD « SY8 _ POP UP CHILD PTR; 


A-132 





end record; 

package MAP_MENU_LIST is new UED_LIST (MAP_POPUP_MENU_DESC); 

— Flag to indicate if the object list should be rebuilt 

MAP_BUILD_LIST : BOOLEAN; 

— Description of the current selected object 

MAP SELECTED OBJECT : MAP OBJECT DESC; 


— List of objects on the map that are too close to determine which one 

— was selected by the user. 

MAP_DECLUTTER_THRESH : FLOAT :» 9.0; 

type MAP_DECLUTTER_LIST_LIMIT is range 0..20; 
type MAP_DECLUTTER_REC is 
record 


OBJECT_DESC 
OBJECT_POINT 
end record; 
MAP_DECLUTTER_COUNT 
MAP DECLUTTER LIST 


MAP_OBJECT_DESC; 

MAP_POINT_LIMIT; 

MAP_DECLUTTER_LIST_LIMIT; 

array (MAP_DECLUTTER__LIST_LIMIT) of 

MAP DECLUTTER REC; 


— Situation data objects 
MAP_OPPLAN_ID 
MAP_DATE_TIME 
MAP SIT SOCKET 


SYS_OPPLAN; 
SYS_DATE_TIME ; 
SYS CLIENT; 


procedure MAP_DELETE_OBJECT ( 

OVERiAYJTYPE X in MAP_OVERLAYS ; 

OVERLAY INDEX : in INTEGER); 


— cpm description: Deletes an object from the object list 


— formal parameters 

—IN overlay_type Type of object to delete 

—IN OVERLAY_INDEX Index for the object to delete 


procedure MAP_FIND_OBJECT ( 


OBJECT_FOUND 

: out 

BOOLEAN; 

OVERLAYJTYPE 

: out 

MAP_OVEELAYS; 

OBJECT_SELECTED 

: out 

MAP_OBJECT_DESC; 

POINT_SELECTED 

: out 

MAP_POINT_LIMIT); 


— CPM description: Finds the nearest object to a selected point 


— formal parameters 

—OUT 

OBJECT_FOUND 


—OUT 

OVERLAYJTYPE 

—OUT 

OBJECT_SELECTED 

—OUT 

POINT_SELECTED 


Logical flag indicating if an object was found 
within the search threshold. 

Type of object found 

Description of the selected object 

The index of the point selected for objects that 


A- 133 





have multiple points 


function map_object_in_window ( 

~OBJECT~DESC 1 in MAP_08JECT_DESC) return BOOLEAN 

— CPM description: Determines if an object is within the map window 

— formal parameters 

—IN OBJECT_DESC Description of the object 

procedure MAP_PURGE_OBJECT_LIST; 

— CPM description: Purges the overlay object list 

— formal parameters 
—None 


end MAP__SYSTEM; 

— Test object definition package 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

with SDB_SITUATION_DB; use SDB_SITUATION DB; 

package OBJECT is 

type OBJECT_LOCATION is 
record 

x : 

Y : 

end record; 

type POlNT_LIMIT is range 0..15; 

type LIST_OF_POINTS is array (POINT_LIMIT) of OBJECT LOCATION; 


SYS_IMAGE_COLUMN; 
SYS IMAGE ROW; 


type OBJECT_TYPE is (POINT, 

type OBJECT_R£C (OBJECT : 
record 

case OBJECT is 

when POINT -> 

PT_LOC : 

when CIRCLE -> 

CENTER : 

RADIUS : 

When RECTANGLE •> 


CIRCLE, RECTANGLE, LINE, 
OBJECT_TYPE) is 


OBJECT_LOCATION; 

OBJECT_LOCATION; 
SYS PIXEL; 


POLYGON); 


A-134 





UL 

LR 


s OBJECT_LOCATION; 
• OBJECT - LOCATION; 


when LINE *> 

LINE_LOC s LIST_OF_POINTS; 

when POLYGON => 

POL_LOC s LIST_OF_POINTS; 

end case; 
end record; 

type OBJECT_POINTER is access OBJECT REC; 


type OBJECT_DESC is 
record 
NAME 

OBJ_TYPE 

MENU_ID 

OBJECT 

end record; 

end OBJECT; 


STRING (1..21); 
OBJECT__TYPE; 
SYS_WINDOW_ELE_ID 
OBJECT_POINTER? 



A-135 




—cpc package specification name: OBS_SYSTEM 

—cpc description: Defines types and objects that are common to the obstacle 

— display system. 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications International Corporation 
424 Delaware, Suite C3 

— Leavenworth, KS 66048 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

with SDB_SITUATION DB; use SDB SITUATION DB; 


package OBS_SYSTEM is 

— Obstacle display options 
type OBS_OBSTACLE_OPTIONS is 
record 

OBS_BLUEFOR 
OBS_OPFOR 
end record; 

— Displayed obstacles 
OBS_OBSTACLE_COUNT : 

OBS_CURR_OBSTACLE : 

OBS OBSTACLE DISPLAYED : 


BOOLEAN; 

BOOLEAN; 


SDB_OBSTACLE_ID; 

SDB_OBSTACLE~POINT; 

array (SDB_obstacle_id) of boolean; 


— Current obstacle display options 

OBS_CURR_OBSTACLE OPTION : OBS OBSTACLE OPTIONS; 


— Obstacle popup menus 

OBS_BL_HENU_ID 

OBS_BL_MENU_START 

OBS_BL_M£NU_LENGTH 

OBS_BL_POP_UP_TEXT 

OB S_BL_POP_UP_C HILD 

OBS_BL_POP_UP_OPTION 

OBS_OP_MENU_ID 

OBS_OP_MENU_START 

OBS_OP_KENU_LENGTH 

OBS_OP_POP_UP_TEXT 

OBS_OP_POP_UP_CHILD 

OBS OP POP UP OPTION 


(Blue and OPFOR) 

: SYS_WINDOW_ELE_ID; 

: SYs”P0P_UP_START_PTR new 

SYS_POP_UP_START (SYS_OBS_MENU); 

: SYSPOP UP_LENGTH_PTR new 

SYS”P0P~OT_LENGTH (SYS_OBS_MENU); 

: SYS_MENUJTEXT_PTR new 

SYS_MENUjrEXT“ (SYS_OBS_CELL); 

: SYS~POP_UP_CBILD_PTR new 

SYS_POP~UP_CHILD (SYS_OBS_CELL); 

: SYS~OBS~OPTION PTR :-“new 

SYS~OBS~OPTION~ARRAY (SYS_OBS_CELL); 

: SYS_WINDOW_ELE_ID; 

: SYS~POP UP _ START_PTR :■ new 

SY S~POP~UP~START (SYS_OBS_MENU); 

: SYS POP_UP_LENGTH_PTR~new 

SYS~POP UP_LENGTH (SYS_OBS_MENU); 

: SYS MENU TEXT PTR I" new 

SYS~MENu“tEXT~(SYS_OBS_CELL); 

: S Y S_POP_UP_CHILD_PTR j- new 

SYS POP UP~CHILD _ (SYS_OBS_CELL); 

: SYS“0BS”0PTI0N_PTR new 

SYS_OBS OPTION”ARRAY (SYS_OBS_CELL); 


A-136 



end OBS SYSTEM 


A-137 




—cpc package specification name: ucc_COORD_CONVERT 

—cpc description: UCC COORD CONVERT contains the utilities to perform the 


_ _ 

following conversions: 
World Coordinate 

to 

Military Grid 

— 

World Coordinate 

to 

Pixel 

— 

Military Grid 

to 

World coordinate 

— 

Pixel 

to 

World Coordinate 


—cpc design notes: 

This package raises the SYS_UCC_EXCEPTION when an exception is detected. 

—cpc package author: Bruce Packard 

Science Applications International corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEM_ 

PACKAGE; use 

SYSTEM^ 

_P AC RAGE; 

package UCC 

COORD_CONVERT is 




procedure 

UCC_DEFINE_MAP_AREA ( 





WORLD_LL_X 

: 

in 

SYS_COORDINATE; 


WORLD - LL Y 

: 

in 

SYS COORDINATE; 


WORLD Ur“x 

t 

in 

SYS__COORDINAIE; 


WORLD UR Y 

: 

in 

SYS~COORDINATE) 


— cpm description: Informs the conversion software of the lower left and 

— upper right corners of the digital map. 


— formal parameters 
—IN WORLD_LL_X 

—IN WORLD_LL_Y 

—IN WORLD_UR_X 

—IN WORLD UR X 


The X coordinate of the lower left corner of the 
digital map in world coordinates. 

The Y coordinate of the lower left corner of the 
digital map in world coordinates. 

The X coordinate of the upper right corner of the 
digital map in world coordinates. 

The X coordinate of the upper right corner of the 
digital map in world coordinates. 


procedure UCC_DEFINE_MAP_DISPLAY ( 


MAP_SCALE 

• 

• 

in 

FLOAT; 

WORLD LL X 

J 

in 

SYS COORDINATE; 

WORLD LL _ Y 

s 

in 

SYS COORDINATE; 

PIXELJLLJC 

: 

in 

SYS_WINDOW__COLUMN 

pixel”LL~Y 

: 

in 

SYs”wiNDOW~ROW; 

pixel”ur”x 

1 

in 

S Y s”wINDOW~COLUMN 

pixel ur“y 

t 

in 

SYS_WINDOW~ROW); 


— CPM description: Informs the conversion software of the lower left and 

— upper right corners of the digital map display panel. 


A-138 






— formal parameters 


— IN 

MAP_SCALE 

The number of meters per pixel for the map 


— IN 

WORLD_LL_X 

The x coordinate of 
digital map display 

the lower left corner of 
in world coordinates. 

the 

— IN 

WORLD_LL_Y 

The Y coordinate of 
digital map display 

the lower left corner of 
in world coordinates. 

the 

—IN 

PIXEL_LL_X 

The x coordinate of 
digital map display 

the lower left corner of 
in pixels. 

the 

— IN 

PIXEL_LL_Y 

The Y coordinate of 
digital map display 

the lower left corner of 
in pixels. 

the 

—IN 

PIXEL_UR_X 

The x coordinate of 
digital map display 

the upper right corner of 
in pixels. 

the 

— IN 

PIXEL_UR_X 

The x coordinate of 
digital map display 

the upper right corner of 
in pixels. 

the 


procedure ucc_mil_grid__to_world ( 


UTM LETTER 

: in 

string; 

UTM X 

: in 

SYS_UTM_COORD; 

UTM Y 

: in 

SYS UTM COORD; 

WORLD X 

: out 

SYS _ COORDINATE; 

WORLD Y 

: out 

SYS _ COORDINATE) 


— cpm descriptions Converts military grid coordinates to world coordinates. 


— formal parameters 


—IN 

UTMJLETTER 

— 


—IN 

UTM_X 

— IN 

UTM_Y 

—OUT 

WORLD_X 

—OUT 

WORLD Y 

procedure UCC_PIXEL 



— CPM description: 


The two-letter designation part of the military 
grid coordinate. 

The military grid X coordinate. 

The military grid Y coordinate. 

The world X coordinate. 

The World Y Coordinate. 


SYS PIXEL; 
SYS_PIXEL; 

SYS COORDINATE; 


PIXEL X 

t 

in 

PIXEL~Y 

X 

in 

WORLD X 

t 

out 

WORLD - Y 

s 

out 


— CPM description: Converts pixel coordinates to world coordinates. 

— formal parameters 


—IN 

PIXEL_X 

The 

pixel X 

coordinate. 

1 1 
t 1 
M 

z 

PIXEL_Y 

The 

pixel Y 

coordinate. 


A-139 




—OUT WORLD_X 
—OUT WORLD Y 


The World X Coordinate. 
The World Y Coordinate. 


procedure UCC_WORLD_TO_MIL_GRID ( 


WORLD_X 

• 

• 

in 

SYS COORDINATE; 

WORLD_Y 

t 

in 

S Y S_C OORDINATE; 

UTM_LE TTER 

1 

out 

string; 

UTM_X 

: 

out 

S Y S_UTM_C OORD; 

UTM_Y 

i 

out 

SYS~UTM _ COORD); 


— CPM description: Converts world coordinates to military grid coordinates. 


— formal parameters 
—IN WORLD_X 

The World X Coordinate. 

—IN 

WORLD_Y 

The World Y Coordinate. 

—OUT 

UTM_LETTER 

The two-letter designation part of the military 
grid coordinate. 

—OUT 

UTM_X 

The military grid X coordinate. 

—OUT 

UTM_Y 

The military grid Y coordinate. 


procedure UCC_WORLD_TO_PIXEL ( 


WORLD X 

: 

in 

SYS COORDINATE; 

WORLD - Y 

: 

in 

SYS COORDINATE; 

PIXEL X 

: 

out 

SYS_PIXEL; 

PIXEL Y 

: 

out 

SYS_PTVJL); 


-- CPM description: converts world coordinates to pixel coordinates. 


— formal parameters 

—IN 

WORLD_X 

—IN 

WORLD_Y 

— 

—OUT 

PIXEL_X 

—OUT 

PIXEL_Y 


The World X Coordinate. 
The World Y Coordinate. 
The pixel X coordinate. 
The pixel Y coordinate. 


end UCC_COORD CONVERT; 


A-140 





The World x Coordinate 


—OUT WORLD_X 

—OUT world_y The World Y Coordinate. 

procedure UCC_WORLD_TO_MIL_GRID < 


WORLD_X 

• 

e 

in 

SYS COORDINATE? 

WORLD_Y 

s 

in 

SYS_COORDINATE ? 

UTM LETTER 

s 

out 

string; 

UTM~X 

: 

out 

SYS_UTM_COORD; 

UTM~Y 

i 

out 

SYS~UTM~COORD); 


— cpm description: Converts world coordinates to military grid coordinates. 


— formal parameters 
-IN WORLD _x 

The World X Coordinate. 

-IN 

WORLD_Y 

The World Y Coordinate. 

-OUT 

UTM_LETTER 

The two-letter designation part of the military 
grid coordinate. 

-OUT 

UTM_X 

The military grid X coordinate. 

-OUT 

UTM_Y 

The military grid Y coordinate. 


procedure UCC_WORLD _TO_PIXEL ( 


WORLD X 

: 

in 

SYS COORDINATE; 

WORLD~Y 

: 

in 

SYS COORDINATE; 

PIXEL X 

: 

out 

SYS PIXEL; 

PIXEL Y 

J 

out 

SYS PIXEL); 


— cpm description: Converts world coordinates to pixel coordinates. 

— formal parameters 


-IN 

WORLD_X 

The World 

X 

Coordinate 

-IN 

WORLD_Y 

The World 

Y 

Coordinate 

-OUT 

PIXEL_X 

The pixel 

X 

coordinate 

-OUT 

PIXEL_Y 

The pixel 

Y 

coordinate 


end ucc coord convert? 


A-140 






—cpc package specification name: UCE_CNTRL_MSR_EDITOR 

—cpc description: UCE_CNTRL_MSR_EDITOR contains the low level control 

— measure for displaying specific types of control measures. 

—cpc design notes: 

— This package raises the SYS_UCE_EXCEPTION when an exception is detected. 

—cpc package author: Bruce Packard 

Science Applications international Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


With SYSTEM_PACKAGE; 
With SDB_SITUATION_DB; 
with UCC_COORD_CONVERT; 
with UIW IMAGE WINDOW; 


use SYSTEM_PACKAGE; 
use SDB_SITUATION_DB; 
use UCC~COORD_CONVERT; 
use UIW IMAGE WINDOW; 


package UCE_CNTRL_MSR_EDITOR is 
procedure UCE_STATUS ( 


ADD FLAG 

i 

in 

BOOLEAN; 

NAME 

: 

in 

STRING; 

ECHELON 

: 

in 

SDB__FORCEJECHELON ; 

CM_TYPE 

: 

in 

SDB~CONTROL_MEASURE_ 


— CPM description: Displays the status of a control measure. 


— formal parameters 


—IN 

ADD_FLAG 

Add or erase the control measure flag 
True = Add; False * Erase 

—IN 

NAME 

The 

name of 

the control measure. 

—IN 

ECHELON 

The 

echelon 

of the control measure. 

—IN 

CM_TYPE 

The 

type of 

the control measure. 


— The following are considered area control measure routines: 

procedure UCE_AREA_OF_OPER ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC J in SDB_CONTROL_MEASUKE_REC); 

— CPM description: Displays an area of operations on the digital map. 
— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True - Add; False - Erase 

—IN CNTRL_MSR_DESC The description of the area of operations. 


procedure UCE_ASSEMBLY_AREA ( 


A-141 



in 

in 


ADD_FLAG 
CNTRL HSR OESC 


BOOLEAN; 

SDB_CONTROL_MEASURE_REC); 


— cpm description: Displays an assembly area on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

True ■ Add; False - Erase 

—IN CNTRL_MSR_DESC The description of the assembly area. 


procedure UC£_ATTACK_POSITION ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_D£SC X in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays an attack position on the digital map. 

— formal parameters 

—IN add_FLAG Add or erase the control measure flag 

— True ■ Add; False - Erase 

—IN CNTRL_MSR_DESC The description of the attack position. 


procedure UCE_BATTLE_POSITION ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC i in SDB_CONTROL_MEASURE_REC); 

— cpm description: Displays a battle position on the digital map. 

— formal parameters 

—IN ADD__FLAG Add or erase the control measure flag 

True ■ Add; Falsa - Erase 

—IN CNTRL_MSR_DESC The description of the battle position. 


procedure UCE_BDE_SUPT_AREA ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC) ; 

— CPM description: Displays the brigade support area on the digital map. 

— formal parameters 

--IN ADD_FLAG Add or erase the control measure flag 

True ■ Add; False ■ Erase 

"IN CNTRL_MSR_DESC The description of the brigade support area. 


procedure UCE_BN_SUPT AREA ( 

” ADD__FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays the battalion support area on the digital map. 





— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True - Add; False ■ Erase 

—IN CNTRL_MSR_DESC The description of the battalion support area. 


procedure UCE_DIV_SUPT_AREA < 

ADD_FLAG l in BOOLEAN; 

CNTRL_MSR_DESC 2 in S D B_C ON TROL_MEAS URE_RE C); 

— CPM description: Displays the division support area on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

~ True * Add; False “ Erase 

—IN CNTRL msr_desc The description of the division support area. 


procedure UCE_DROP_ZONE ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays a drop zone on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

— ~ True ** Add; False • Erase 

—IN cntrl_msr_desc The description of the drop zone. 


procedure UCE_FREE_FIRE_AREA ( 

ADD_FLAG 2 in BOOLEAN; 

CNTRL_MSR_DESC 2 in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays a free fire area on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

~ True - Add; False “ Erase 

—IN CNTRL_MSR_DESC The description of the free fire area. 


procedure UCE LANDING_ZONE ( 

ADD FLAG : in 

CNTRL_MSR_DESC 2 in 

— CPM description: Displays a landing zona on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— ~ True ” Add; False - Erase 


BOOLEAN; 

SDB_CONTROL_MEASURE_REC); 


A-143 





—IN cntrl_msr_desc The description of the landing zone. 


procedure UCE_NO_FIKE_AREA ( 

add_f£ag t in BOOLEAN; 

CNTRL_MSR_DESC » in SDB_CONTROL_MEASURE_REC); 

— CPH description: Displays a no fire area on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True ■ Add; False “ Erase 

—IN CNTRL_MSR_DESC The description of the no fire area. 


procedure UCE_OBJECTIVE ( 

ADD_FLAG 
CNTRL_MSR_DESC 

— CPH description: Displays an objective on the digital map. 

— formal parameters 

—IN add__flag Add or erase the control measure flag 

True - Add; False ■ Erase 

—IN cntrl_msr_desc The description of the objective. 


in BOOLEAN; 

in SDB_CONTROL_MEASURE_REC); 


procedure UCE_RESTRICT_FIRE_AREA < 

ADD_FLAG % in BOOLEAN; 

CNTRL_MSR_DESC J in SDB_CONTROL_MEASURE_REC); 

— CPH description: Displays a restricted fire area on the digital map. 

— formal parameters 

—IN add_FLAG Add or erase the control measure flag 

— True “ Add; False ** Erase 

—IN CNTRL_MSR_DESC The description of the restricted fire area. 


procedure uce_zone_of_action ( 

ADD_FLAG t in BOOLEAN; 

CNTRLJHSR_DESC ; in SDB_CONTROL_KEASURE_REC); 

— cpm description: Displays a zona of action on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True " Add; False “ Erase 

—IN CNTRL_KSR_DESC The description of the zone of action. 


A>144 






- end area control measures; 


- The following are considered crossing control measure routines: 

procedure UCE_ASSAULT_CROSS ( 

~ ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC) 

— CPM description: Displays an assault crossing on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

True - Add; False " Erase 

—IN cntrl_msr_desc The description of the assault crossing. 


procedure UCE_RAFT_SITE ( 

"" ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC) 

— CPM description: Displays a raft site on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True ■ Add; False » Erase 

—IN cntrl_msr_desc The description of the raft site. 


end crossing control measures; 


The following are considered fire plan control measure routines: 

procedure UCE_GROUP_OF_TARGETS ( 

add_flag : in boolean; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC) 

— CPM description: Displays a group of targets on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True “ Add; False • Erase 

—IN CNTRL_MSR_DESC The description of the group of targets. 


end fire plan control measures; 


The following are considered line control measure routines: 
procedure UCE_BOUNDARY ( 


A-145 


ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC) ; 

— Cpm descriptions Displays a boundary on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True ■ Add; False = Erase 

—IN CNTRL_MSR_DESC The description of the boundary. 


procedure UCE_BRIDGEHEAD_LINE ( 

ADD_FLAG l in BOOLEAN; 

CNTRL__MSR_DESC s in SDB_CONTROL_MEASURE__REC) ; 

— CPM description: Displays a bridgehead line on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True - Add; False « Erase 

—IN CNTRL_HSR_DESC The description of the bridgehead line. 


procedure UCE_COA_LINE ( 

ADD_FLAG S in BOOLEAN; 

CNTRL_MSR_DESC S in SDB_CONTROL_MEASURE_REC) ; 

— CPM description: Displays a cOA line on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True - Add; False * Erase 

-~IN CNTRL_MSR_DESC The description of the bridgehead line. 


procedure UCE_C00RD_FIRE_LINE < 

ADD~FLAG~ : in BOOLEAN; 

CNTRL__MSR_DESC I in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays a coordination fire line on the digital map. 

— formal parameters 

—IN ADD_flag Add or erase the control measure flag 

— True ■ Add; False m Erase 

—IN CNTRL_MSR_DESC The description of the coordination fire line. 


procedure UCE_FEBA ( 

ADD_FLAG l in BOOLEAN; 

CNTRL_MSR_DESC l in SDB_CONTROL__MEASURE_REC) ; 

— CPM description: Displays the forward edge of the battle area on the 


A-146 



digital map 


the control measure flag 
False ” Erase 

—IN CNTKL_MSR_DESC The description of the FEBA. 


procedure UCE_FIRE_SUP_COORD_LN ( 

” ADD_FLAG « 

CNTRL_MSR_DESC : 

— CPM description: Displays a fire support coordination line on the 

— digital map. 


in BOOLEAN; 

in SDB_CONTROL_MEASURE_REC); 


— formal parameters 
—IN add_flag Add or erase 

True * Add; 


— formal parameters 

—IN add_flag Add or erase the control measure flag 

True = Add; False = Erase 

—IN CNTRL_MSR_DESC The description of the fire support coordination 

line. 


procedure UCE_FLOT ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC J in SDB__CONTROL_MEASURE_REC) ; 

— cpm description: Displays a forward line of troops on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True * Add; False ■ Erase 

—IN cntrl_msr_desc The description of the forward line of troops. 


procedure UCE_BOLDING_LINE ( 

~ ADD_FLAG : in BOOLEAN; 

cntrl_msr_desc : in sdb__control_measure_rec ); 

— cpm description: Displays a holding line on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

True - Add; False " Erase 

—IN cntrl_msr_desc The description of the holding line. 


procedure UCE_LIGHT_LINE ( 


ADD_FLAG 

: 

in 

BOOLEAN; 

CNTRL_MSR_DESC 

: 

in 

SDB_CONTROL_MEASURE_REC); 

cpm description: Displays a 

light 

line on 

the digital map. 


A-147 



— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True - Add; FalBe ” Erase 

—IN CNTRL_MSR_DESC The description of the light line. 


procedure UCE_LIMIT_OF_ADV ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays the limit of advance on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True ■ Add; False » Erase 

—IN CNTRL_MSR_DESC The description of the l imi t of advance. 


procedure UCE_LINE_OF_CONTACT { 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays a line of contact on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

— True - Add; False =» Erase 

—IN cntrl_msr_desc The description of the line of contact. 


procedure UCE_LINE_of_DEPART ( 

add_flag : in boolean; 

cntrl_msr_desc : in sdb_control_measure_rec); 

— CPM description: Displays a line of departure on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True * Add; False - Erase 

—IN CNTRL_MSR_DESC The description of the line of departure. 


procedure UCE_PHASE_LINE { 

ADD~FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays a phase line on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True - Add; False - Erase 


A-148 








—IN CNTRL_MSR_DESC The description of the phase line. 

procedure UCE_RESTRICT_FIRE_LINE ( 

ADD__FLAG ” : in 

CNTRL_MSR_DESC s in 

— CPM description: Displays a restricted fire line on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True = Add; False = Erase 

—IN CNTRL_MSR_DESC The description of the restricted fire line, 

end line control measures; 


BOOLEAN; 

SDB_CONTROL_K£ASURE_REC); 


The following are considered map feature control measure routines: 

procedure UCE_AIR_FIELD ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays an air field on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True ® Add; False = Erase 

—IN CNTRL_MSR_DESC The description of the air field. 


procedure UCE_BRIDGE ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a bridge on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True * Add; False ” Erase 

—IN CNTRL_MSR_DESC The description of the bridge. 


procedure UCE_BUILDING ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_KSR_POINT_REC); 

— CPM description: Displays a building on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True « Add; False ■ Erase 


A-149 



—IN cntrl_msr_desc The description of the building. 


procedure UCE_CITY ( 

ADD_FLAG S in 

CNTRL_HSR_DESC : in 

— CPH description: Displays a city on the digital map. 

— formal parameters 

—IN ADD__FLAG Add or erase the control measure flag 

True * Add? False = Erase 

—IN CNTRL_MSR_DESC The description of the city. 


procedure UCE_LAKE ( 

ADD_FLAG 
CNTRL_HSR_DESC 

— CPH description: Displays a lake on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True ” Add; False = Erase 

—IN cntrl_msr_desc The description of the lake. 


: in BOOLEAN; 

: in SDB_CNTRL MSR_POINT_REC); 


BOOLEAN; 

SDB_CNTRL_MSR_POINT_REC); 


procedure UCE_MAP_REF_POINT ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_HSR_POINT_REC); 

— CPH description: Displays a map reference point on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

True “ Add; False - Erase 

—IN CNTRL_MSR_DESC The description of the map reference point. 


procedure UCE_HOUNTAIN_PEAK ( 

ADDJFLAG : in 

CNTRL_MSR_DESC « in 

— CPH description: Displays a mountain peak 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True “ Add; False - Erase 

—IN CNTRL_MSR_DESC The description of the mountain peak. 


BOOLEAN; 

SDB_CNTRL_MSR_POINT_REC); 
on the digital map. 


A-150 




procedure UCE_ROAD_INTERSECT ( 
ADD_FLAG 
CNTRL MSR DESC 


in boolean; 

in SDB_CNTRL_MSR_POINT_REC); 


— CPH description: Displays a road intersection on the digital map. 


— formal parameters 

—IN add_FLAg Add or erase the control measure flag 

True ■ Add; False ■ Erase 

—IN CNTRL_MSR_DESC The description of the road intersection. 


procedure uce_town ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC l in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a town on the digital map. 

— formal parameters 

—IN add_FLAG Add or erase the control measure flag 

” True * Add; False - Erase 

—IN CNTRL_MSR_DESC The description of the town. 


procedure UC£_VILLAGE ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC); 

— cpm description: Displays a village on the digital map. 

— formal parameters 

—IN add__flag Add or erase the control measure flag 

— True m Add; False ” Erase 

—IN CNTRL_MSR_DESC The description of the village. 


end map feature control measures; 


The following are considered point control measures: 


procedure uce_checkpoint ( 

ADD_FLAG : in 

CNTRL MSR DESC : in 


BOOLEAN; 

SDB_CNTRL_MSR_POINT_REC); 


— CPM description: Displays a checkpoint on the digital map. 


— formal parameters 
—IN ADD FLAG 


Add or erase the control measure flag 
True ■ Add; False ■ Erase 


—IN CNTRL_MSR_DESC The description of the checkpoint. 


A-151 




procedure uce_collect_point ( 

~ ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC s in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a collection point on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

True * Add; False “ Erase 

—IN cntrl_msr_desc The description of the collection point. 


procedure UCE_CONTACT_POINT ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC t in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a contact point on the digital map. 


Add or erase the control measure flag 
True ■ Add; False - Erase 

—IN cntrl_msr_desc The description of the contact point. 


procedure UCE_coord_point ( 

ADD_FLAG : in 

CNTRL_MSR_DESC : in 

— CPM description: Displays a coordination point on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True * Add; False _ Erase 

—IN CNTRL_MSR_DESC The description of the coordination point. 


BOOLEAN; 

SDB_CNTRL_MSR_POINT_REC); 


— formal parameters 
—IN ADD FLAG 


procedure UCE_CRITICAL_EVENT ( 

ADD_FLAG « in BOOLEAN; 

CNTRL_MSR_DESC J in SDB_CNTRL__MSR_POINT_REC); 

— CPM description: Displays a critical event point on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True ■ Add; False " base 

—IN CNTRL_MSR_DESC The description of the coordination point. 


procedure UCE_LINK_UP_POINT ( 
ADD_FLAG 
CNTRL MSR DESC 


in BOOLEAN; 

in SDB_CNTRL_MSR_POINT_REC) ; 


A-152 



— CPM description: Displays a linkup point on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

True * Add; False - Erase 

—IN cntrl_msr_desc The description of the link up point. 


procedure UCE_PASSAGE_POiNT < 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC); 

— cph description: Displays a passage point on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True = Add; False * Erase 

—IN CNTRL_MSR_DESC The description of the passage point. 


procedure UCE_POINT_OF_DEPART ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a point of departure on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

— True ** Add; False * Erase 

—IN cntrl_msr_desc The description of the point of departure. 


procedure UCE_RELEASE_POINT ( 

“ ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a release point on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

— True ■ Add; False “ Erase 

—IN CNTRL_MSR__DESC The description of the release point. 


procedure UCB_START_POINT ( 

” ADD~FLAG : in BOOLEAN; 

CNTRL_MSR_DESC l in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a start point on the digital map. 

— formal parameters 


A-153 



—IN ADD_FLAG Add or erase the control measure flag 

True * Addj False - Erase 

—IN CNTRL_MSR_DESC The description of the start point. 


procedure UC£_STRONG_POINT ( 

ADD_FLAG S in BOOLEAN; 

CNTRL_MSR_DESC 2 in SDB_CNTRL_KSR_POINT_REC); 

— CPM description: Displays a strong point on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True » Add; False * Erase 

—IN cntrl_msr_desc The description of the strong point. 


procedure UCE_TRAFFIC_CNTRL_POINT ( 

ADD_FLAG 2 in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Displays a traffic control point on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True ■ Add; False * Erase 

—IN cntrl_msr_desc The description of the traffic control point. 


end point control measures; 


The following are considered to be route control measure routines: 

procedure UCE_AlR_AXIS_OF_ADV ( 

ADD_FLAG ~ ; in BOOLEAN; 

CNTRL_MSR_DESC J in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays an air axis of advance on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

— True ” Add; False » Erase 

—IN CNTRL_MSR_DESC The description of the air axis of advance. 


procedure UCE_AIR_CORRlDOR ( 

ADD_FLAG 2 in BOOLEAN; 

CNTRL_MSR_DESC : in S D B_C ON T ROL_MEAS URE_RE C); 

— CPM description: Displays an air corridor on the digital map. 


A-154 



Add or erase the control measure flag 
True ■ Add; False “ Erase 


— formal parameters 

— IN ADD_FLAG 

—IN cntrl_msr_desc The description of the air corridor. 


procedure uce_axis_of_adv_main ( 

ADD_FLAG “ s in BOOLEAN; 

CNTRL_MS R_DE S C S in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays the main axis of advance on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True ■ Add; False “ Erase 

—IN CNTRL_MSR_DESC The description of the main axis of advance. 


procedure UCE_AXIS_OF_ADV_SUPT ( 

ADD_FLAG i in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC); 

— CPH description: Displays the support axis of advance on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

— True « Add; False ■ Erase 

—IN CNTRL_MSR_DESC The description of the support axis of advance. 


procedure UCE_DIRECT_OF_ATTACK ( 

ADD_FLAG : in BOOLEAN; 

CNTRL_MSR_DESC : in SDB_CONTROL_MEASURE_REC); 

— CPM description: Displays the direction of attack on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True ■ Add; False “ Erase 

—IN CNTRL_MSR_DESC The description of the direction of attack. 

procedure UCE_FEINT ( 

ADD_FLAG : 

CNTRL_MSR_DESC I 

— CPM description: Displays the FEINT on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

— True - Add; False ■ Erase 


in BOOLEAN; 

in SDB__CONTROL_MEASURE_REC); 


A-155 



— IN 


CNTRL_MSR_D£SC The description of the FEINT. 


procedure UCE MAINJSUPPLY RTE ( 

~ ADD_FLAG ~ t in BOOLEAN; 

CNTRL_MSR_DESC t in SDB_CONTROL_MEASURE_REC) 

— CPM description: Displays the main supply route on the digital map 

— formal parameters 

—IN ADD_FLAG Add or erase the control measure flag 

True « Add; False « Erase 

—IN CNTRL_MSR_DEsc The description of the main supply route. 


procedure UCE_ROUTE ( 

~ ADD_FLAG l in BOOLEAN; 

CNTRL_MSR_DESC s in SDB_CONTROL_MEASURE_REC) 

— CPM description: Displays a route on the digital map. 

— formal parameters 

—IN add_flag Add or erase the control measure flag 

True • Add; False ■ Erase 

—IN cntrl_msr_desc The description of the route. 


— end route control measures; 
end UCE_CNTRL_MSR_EDITOR; 



—cpc package specification name: UCM_CONTROL_MEASURE 

—cpc descriptions UCM_CONTROL_MEASURE is the intermediate level control measure 
display package that is responsible for displaying and 
erasing control measures on the digital map. 

—cpc design notes: 

This package raises the SYS_UCM_EXCEPTION when an exception is detected. 

—cpc package author: Bruce Packard 

Science Applications International Corporation 
— 424 Delaware, Suite C3 

Leavenworth, RS 66048 

with SYSTEM_PACKAGE; 
with SDB_SITUATION_DB; 
with UWN_WINDOW_SYSTEM; 

package UCM_CONTROL_MEASUR£ is 

procedure UCM_DEFINE_AREA ( 

CNTRL_MSR_TYPE 
CNTRL_MSR_SIDE 
ECH_WINDOW 

— CPM description: Controls the user interface to define a new area control 

measure. 


in SDB_CONTROL_MEASURE_TYPE; 

in SDB_SIDE_TYPE; 

out SYS_WINDOW_ELE_ID); 


use SYSTEM_PACRAGE; 
use SDB_SITUATION_DB; 
use UWN _ WINDOW SYSTEM; 


— formal parameters 

--IN CNTKL_MSR_TYPE Location type of the control measures to define 

—IN CNTRL__MSR_SIDE Force of the control measures to define 

—OUT ECH window Id of the echelon selection menu 


procedure UCM_DEFINE_CROSSING ( 

CNTRL_MSR TYPE 
CNTRL_MSR~SIDE 
ECH_WINDOW 

— CPM description: Controls the user interface to define a new crossing 

control measure. 


: in SDB_CONTROL_MEASURE_TYPE; 

: in SDB_SIDE_TYPE; 

: out SYS_WINDOW_ELE_ID); 


— formal parameters 


— IN 

CNTRL_MSR_TYPE 

—IN 

CNTRL_MSR_SIDE 

—OUT 

ECH_WINDOW 


Location type of the control measures to define 
Force of the control measures to define. 

Id of the echelon selection menu 


procedure UCM_DEFINE_FIRE PLAN ( 


CNTRL_MSR_TYPE 

* 

in 

SDB 

CONTROL MEASURE TYPE 

CNTRL~MS R~SIDE 

: 

in 

SDB_SIDE_TYPE; 

ECH WINDOW 

: 

out 

SYS~WINDOW_ELE_ID); 



A-157 









— CPM description: Controls the user interface to define a new fire plan 

— control measure. 


— formal parameters 

—IN CNTRL_MSR_TYPE Location type of the control measures to 'define 

—IN CNTRL_MSR_SIDE Force of the control measures to define 

—OUT ECH WINDOW Id of the echelon selection menu 


procedure UCM_DEFINE_LINE ( 


CNTRL__MSR_TYPE 

: 

in 

SDB_ 

_CONTROL__MEASURE_TYPE 

cntrl”msr“side 

: 

in 

sdb" 

~SIDE_TYPE; 

ECH_WINDOW 

t 

out 

SYS* 

~WINDOW_ELE_ID); 


— CPM description: controls the user interface to define a new line 

— control measure. 


— formal parameters 

—IN CNTRL_MSR_TYPE 
—IN CNTRL_MSR_SIDE 
—OUT ECH WINDOW 


Location type of the control measures to define 
Force of the control measures to define 
Id of the echelon selection menu 


procedure ucm_DEF*ne_hap_feat ( 
CNTRL_MSR_TYPE 
CNTRLKSR SIDE 
SCALE _ WINDOW 


in SDB_CONTROL_MEASURE_TYPE; 

in SDB_SIDE TYPE; 

out SYS_WINDOW_ELE_ID); 


— CPM description: Controls the user interface to define a new map feature 

— control measure. 


— formal parameters 
—IN CNTRL_MSR_TYPE 

—IN CNTRL_MSR_SIDE 

—OUT SCALE WINDOW 


Location type of the control measures to define 
Force of the control measures to define 
Id of the map scale selection menu 


procedure UCE_DEFlNE_NEXT_POINT < 

~X_PIX2L “ : in SYS_IMAGE_COLUMN; 

Y_PIXEL : in SYS_IMAGE_ROW); 

— CPM description: Defines the cursor location as the next point in a 

— control measure definition. 


— formal parameters 

—IN x__PIXEL Pixel X coordinate of the selected point 

—IN Y_PIXEL Pixel Y coordinate of the selected point 

A-158 




procedure UCM_DEFINE_POINT ( 


CNTRL_MSR_TYPE 

: in 

SDB_CONTROL_MEASUR£_TYPE 

CNTRL_MSR_SIDE 

: in 

SDB~SIDE_TYPE; 

ECH_WINDOW 

: out 

SYS~WINDOW_ELE_ID); 


— cpm description: Controls the user interface to define a new point 

control measure. 


— formal parameters 


—IN 

CNTRL_MSR_TYPE 

—IN 

CNTRL_MSR_SIDE 

—OUT 

ECH WINDOW 


Location type of the control measures to define 
Force of the control measures to define 
id of the echelon selection menu 


procedure UCM_DEFINE_ROUTE ( 


CNTRL_MSR_TYPE 

: in 

SDB_CONTROL_MEASURE_TYPE 

CNTRL MSR_SIDE 

: in 

SDB_SIDE TYPE; 

ECH_WINDOW 

: out 

SYS_WINDOW_ELE_ID); 


— CPM description: Controls the user interface to define a new route 

— control measure. 


— formal parameters 


— IN 

CNTRL_MSR_TYPE 

—IN 

CNTRL_MSR_SIDE 

—OUT 

ECH_WINDOW 


Location type of the control measures to define 
Force of the control measures to define 
Id of the echelon selection menu 


procedure ucm_display_cntrl_msr ( 


CNTRL 

MSR ECHELON 

• 

in 

SDB_FORCE ECHELON; 

cntrl" 

"msr TYPE 

1 

in 

SDB CONTROLMEASURE LOC TYPE; 

CNTRL_MSR_SIDE 

: 

in 

SDB SIDE TYPE); 


— CPM description: Displays the control measures of a given type and echelon 

— and belonging to a specified force 


— formal parameters 
—IN CNTRL_MSR_ECHELON 

—IN CNTRL_MSR_TYPE 

—IN CNTRL MSR SIDE 


Echelon of the control measures to display 
Location type of the control measures to display 
Force of the control measures to display 


procedure UCM_DELETE_CNTRL_MSR ( 

~CNTRL_MSR_IND I in SDB_CONTROL_MEASURE_ID); 

— CPM description: Deletes a control measure from the display 

— formal parameters 

—IN cntrl MSR IND Index of the control measure to delete 


A-159 








procedure UCM_ERASE_CNTRL_MSR ( 

_ CNTRL~HSR_ECHELON s 
CNTRL~MSR_TYPE * 

cntrl"”msr - side s 


in SDB_FORCE_ECHELON; 

in SDB~CONTROL_MEASURE_LOC_TYPE; 

in sdb”side_type>; ~ 


— CPM description: Erases the control measures of a given type and echelon 

and belonging to a specified force 


— formal parameters 

—IN cntrl_msr_echelon Echelon of the control measures to erase 

—IN CNTRL_MSR_TYPE Location type of the control measures to erase 

—IN CNTKL__MSR_SIDE Force of the control measures to erase 

procedure UCM_INITIALIZE_CNTRL_MSR; 

— CPM description: Initializes the control measure display system. 

— formal parameters 

None 


procedure UCM MOVE_CNTRL_MSR ( 

CNTRL_MSR_ID : in SDB_CONTROL_MEASURE__ID ; 

CNTRL_MSR_REC : in SDB_CONTROL_MEASURE_REC); 

— cpm description: Updates the location of a control measure 

— formal parameters 

cntrl_msr_id Id of the control measure to move 

CNTRL_msr_rec New description of the control measure 


procedure UCM_MOVE_CNTRL_MSR_PNT ( 

“CNTRL_MSR_ID 1 in SDB_CONTROL_HEASURE_ID ; 

CNTRL_MSR_REC : in SDB_CNTRL_MSR_POINT_REC); 

— CPM description: Updates the location of a point control measure 

— formal parameters 

CNTRL_MSR_ID Id of the control measure to move 

— cntrl_MSR_rec New description of the control measure 


procedure UCM MOVE DEFINE_CNTRL MSR { 

~ PIXEL X ~ : in SYS IMAGE_COLUMN; 

PIXEL~Y : in SYS~IMAGE~ROW); 

— CPM description: Changes the location of a control measure that is being 

— defined. 


A-160 



— formal parameters 


— IN 

PIXEL_X 

The 

number 

of 

pixels 

to move 

in 

the 

X direction. 

—IN 

PIXEL_Y 

The 

number 

of 

pixels 

to move 

in 

the 

Y direction. 


procedure UCM_PROCESS_DEFINE_BUTTON ( 


8UTT0N_INDEX 

: 

in 

SYS WIND0W_VALUE; 

ECH WINDOW 

• 

* 

out 

SYS _ WIND0W _ ELE ID; 

SEND_TO_APPL 

e 

• 

out 

BOOLEAN); 


— CPM description: processes a button selection from the menu definition 

— button. 


— formal parameters 

BUTTON_lNDEX Index into the menu buttons 

—OUT ECH WINDOW Id of the echelon selection menu 


—out SEND_T0_APPL Indicator if the control measure record should be 

— transferred to the calling application. This 

— is set to true when the DONE button is hit. 


procedure UCM_PROCESs_BL_ECH_MENU ( 

MENU_STATUS : in UWN_BUTTON_MENU_OUTPUT; 

ECH_WINDOW : in SYS_WINDOW_ELE_ID); 

— CPM description: processes the completion of a BLUEFOR echelon menu 

— formal parameters 

MENU_status Completion status of the menu 

ECH window Id of the echelon menu 


procedure UCM_PROCESS_OP_ECH MENU ( 

MENU_STATUS : in 

ECH_WINDOW : in 

— CPM description: processes the completion of a OPFOR echelon menu 

— formal parameters 

MENUjSTATUS Completion status of the menu 

— ECH WINDOW Id of the echelon menu 


UWN_BUTTON_MENU_OUTPUT; 
SYS WINDOW_ELE ID); 


procedure UCM_PROCESS_SCALE_MENU ( 

MENU_STATUS “ : in UWN_BUTTON_MENU_OUTPUT; 

ECH_WINDOW : in SYS_WINDOW_ELE_ID); 

— CPM description: processes the completion of a map scale menu 

— formal parameters 


A-161 




MENU 


Description of the map scale menu 
Completion status of the menu 
Id of the echelon menu 

procedure UCM_RESTORE_CNTRL_MSR; 

— cpm description: Restores the control measure displays that were destroyed 

— by overlapping windows. 

— formal parameters 

— None 

end UCM CONTROL MEASURE; 


MENU_STATUS 
ECH WINDOW 


A-162 








—cpc package specification names UME_MAP_EDITOR 

—cpc description: UME_MAP_EDITOR contains the low level digital map utilities 
for reading map images from the database and displaying them 
in the appropriate image planes. 

—cpc design notes: 

This package raises the SYS_UME_EXCEPTION when an exception is detected. 

—cpc package author: Bruce Packard 

Science Applications International Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

package UME_MAP_EDITOR is 

procedure UME_CLOSE_CONT_FILE ( ; 

FILE_DESC ": in SYS_FILE_DESC); 

— CPM description: Closes a contour image database. 

— formal parameters 

—IN FILE_DESC The file descriptor for the contour database. It 

is returned from UME OPEN CONT FILE. 


procedure UME_CLOSE_ELEV FILE ( 

FILE_DESC : in SYS_FILE_DESC); 

— CPM description: Closes a elevation database. 

— formal parameters 

—IN FILE_DESC The file descriptor for the elevation database. It 

is returned from UME open elev FILE. 


procedure UME_CLOSE_MAP_FILE ( 

FILE_DESC : in SYS_FILE_DESC) ; 

— CPM description: closes a map image database. 

— formal parameters 

--IN FXLE_DESC The file descriptor for the map image database. It 

— is returned from UME OPEN MAP FILE. 


procedure UME_DEFINE_MAP_COORD ( 

PANEL~ID : in SYS_WINDOWJELE_ID); 

— CPM description: Defines the map coordinates of the panel. This routine 

should be called whenever the map panel changes or the 

— map scale changes. 


— formal parameters 


A-163 



— IN 


PANEL ID 


The id assigned to the digital map panel. 


procedure UME_DETERMINE_CONT_FILE { 

FILE_NAME~ s out STRING); 

— CPM descriptions Determines the name of the contour map parameter file for 

— the current map scale. 

— formal parameters 

—OUT FILE_NAME The name of the contour image database. 


procedure UME_DETERMINE_CONT_BLOCK ( 


UL_PIXEL_X s in 

UL_PIXEL_Y s in 

PIXEL_WIDTH s in 

PIXEL_HEIGHT s in 

START_BLOCK : out 

NUMBER_COLUMN S OUt 

NUMBER_ROW : out 

ROW_INCREMENT S OUt 

NEW_PIXEL_X 8 OUt 

NEW PIXEL Y S OUt 


SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
SYS_DB_SIZE; 
SYS_DB_SIZE; 
SYS_DB_SIZE; 
SYS~DB_SIZE; 
SYS~WINDOW_COLUMN; 
SYS_WINDOW_ROW); 


— CPM description: Determines the blocks or records to retrieve from the 

contour image database. The columns run from left to 
right and the rows run from top to bottom. 


— formal parameters 


— IN 

UL_PIXEL_X 

Upper left map panel X coordinate where the contour 
image is to be displayed. 

— IN 

UL_PIXEL_Y 

Upper left map panel Y coordinate where the contour 
image is to be displayed. 

— IN 

PIXEL_WIDTH 

The width of the area where the contours are to be 
displayed. 

— IN 

PIXEL_HEIGHT 

The height of the area where the contours are to he 
displayed. 

—OUT 

START_BLOCK 

The starting record number. 

—OUT 

NUMBER_COLUMN 

The number of columns to read. 

—OUT 

NUMBER_ROW 

The number of rows to read. 

—OUT 

ROW_INCREMENT 

The amount to increment the record number for 
each contour row. 

—OUT 

NEW_PIXEL_X 

Upper left map panel X coordinate where the contour 
blocks should actually be displayed 

—OUT 

NEW_PIXEL_Y 

Upper left map panel Y coordinate where the contour 
blocks should actually be displayed 


A-164 






procedure UMEJ3ETERMINE ELEV ( 


PIXEL X 

: 

in 

PIXEL~Y 

: 

in 

FILE_DESC 

: 

in 

ELEV~ 

: 

out 


SYS_WINDOW_COLUMN; 
SYS~WINDOW_ROW; 
SYS~FILE_DESC; 

SYS COORDINATE); 


— CPM 

descriptions 

— formal parameters 

—IN 

PIXEL_X 

—IN 

PIXEL_Y 

—IN 

FILE_DESC 

— IN 

ELEV 


Determines the elevation of a given coordinate 

X coordinate to be evaluated 
Y coordinate to be evaluated 

The file descriptor for the elevation database, 
is returned from UME_0PEN_ELEV_FILE. 

Elevation at the desired location. 


It 


procedure UME_DETERMINE_GRID_INTRVL ( 

START_VERT_PIXEL 8 
VERT_INCREMENT 8 
VERT_GRID_NUMB 8 
VERT_NUMB_INC 8 
START_HORZ_PIX£L 8 
HORZ_INCR£MENT 8 
HORZ_GRID_NUMB 8 
HORZ NUMB INC 8 


OUt SYS_WINDOW_COLUMN; 
OUt SYS_WINDOW_COLUMN; 
out SYS_GRID_LABEL; 

OUt SYS~GRID_LABEL; 
out SYS_WINDOW_ROW; 

OUt SYS_WINDOW_ROW; 
out SYS_GRID_LABEL; 

OUt SYS GRID_LABEL); 


— CPM descriptions Determines the start pixel and the pixel increment for 

drawing and labeling the UTM grid line. The start pixel 
is located in the upper left corner of the digital map 

— panel. 


— formal parameters 


—OUT 

S TART_VERT_PIXEL 

The digital map panel X coordinate where the 
vertical grid lines should start. 

—OUT 

VERT_INCREMENT 

The distance to the next vertical grid line in 
pixels. 

—OUT 

VE RT_GRID_NUMB 

The number to display on the first vertical grid. 

—OUT 

VERT_NUMB_INC 

The amount to increment the grid label for each 
vertical grid line 

—OUT 

START_HORZ_PIXEL 

The digital map panel Y coordinate where the 
horizontal grid lines should start. 

—OUT 

HORZ_INCREMENT 

The distance to the next horizontal grid line in 
pixels. 

—OUT 

VERT_GRID_NUMB 

The number to display on the first horizontal grid. 


A-165 





—OUT HORZ_NUMB_INC The amount to increment the grid label for each 

horizontal grid line 


procedure UME_DETERMINE_MAP_FILE ( 

FILE_NAME s out STRING); 

— CPM description: Determines the name of the map parameter for 

the current map scale and type. 


- formal parameters 
-OUT FILE NAME 


The name 

of 

the c< 

RMINE_MAP__BLOCK 

( 


ul_pixel“x 


in 

UL PIXEL~Y 


in 

PIXEL WIDTH 


in 

PIXEL_HEIGHT 


in 

START_BLOCK 


out 

NUMBER COLUMN 


out 

NUMBER ROW : 

out 

ROW INCREMENT 


out 

NEW_PIXEL X 


out 

NEW_PIXEL Y 


out 


SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
SYS_DB_SIZE; 
SYS~DB_SIZE; 
SYS_DB_SIZE; 
SYS~DB_SIZE; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW); 


— CPM description: Determines the blocks or records to retrieve from the 

map image database. The columns run from left to 

— right and the rows run from top to bottom. 


— formal parameters 


— IN 

UL_PIXEL_X 

Upper left map panel X coordinate where the map 
image is to be displayed. 

—IN 

UL_PIXEL_Y 

Upper left map panel Y coordinate where the map 
image is to be displayed. 

— IN 

PIXEL_WIDTH 

The width of the area where the map is to be 
displayed. 

— IN 

PIXEL_HEIGHT 

The height of the area where the map is to be 
displayed. 

—OUT 

START_BLOCK 

The starting record number. 

—OUT 

NUMBER_COLUMN 

The number of columns to read. 

—OUT 

NUMBER_ROW 

The number of rows to read. 

—OUT 

ROW_INCREMENT 

The amount to increment the record number for 
each map row. 

—OUT 

NEW_PIX£L_X 

Upper left map panel X coordinate where the map 
blocks should actually be displayed 

—OUT 

NEW_PIXEL_Y 

Upper left map panel Y coordinate where the map 


A-166 





blocks should actually be displayed 


procedure UME_DISPLAY_CONT_BLOCKS ( 


PANEL ID 

s 

in 

SYS WINDOW_ELE_ID; 

FILE_DESC 

s 

in 

SYS FILEJDESC; 

START BLOCK 

l 

in 

SYS_DB_SIZE; 

NUMBER_COLUMN 

X 

in 

SYS DB_SIZE; 

NUMBER ROW 

X 

in 

SYS DBjSIZE; 

ROW INCREMENT 

• 

• 

in 

SYS DB SIZE; 

PIXEL START X 

• 

• 

in 

SYS WINDOW COLUMN; 

PIXEL_START~Y 

X 

in 

SYS WINDOW - ROW); 


— CPM description: Displays the contour bit image blocks on the digital map. 

— formal parameters 


—IN 

PANEL_ID 

The id of the digital map panel. 

—IN 

FILE_DESC 

The file descriptor for the contour database. It 
is returned from UME_OPEN_CONT_FILE. 

— IN 

START_BLOCK 

The starting record number. 

—IN 

NUMBER_COLUMN 

The number of columns to read. 

—IN 

NUMBER_ROW 

The number of rows to read. 

—IN 

ROW_INCREMENT 

The amount to increment the record number for 
each contour row. 

H 

till 
1 1 1 1 

PI XEL__START_X 

Upper left map panel X coordinate where the contour 
blocks should actually be displayed 

—IN 

PIXEL_START_Y 

Upper left map panel Y coordinate where the contour 
blocks should actually be displayed 


procedure UME_DISPLAY_MAP_BLOCKS ( 


PANEL_ID 

* 

in 

SYS_WINDOW_ELE_ID 

FILE_DESC 

X 

in 

SYS FILEJDESC; 

START BLOCK 

X 

in 

SYS DB SIZE; 

NUMBER COLUMN 

X 

in 

SYS DB_SIZE; 

NUMBER ROW 

X 

in 

SYS DB SIZE; 

ROW_INCREMENT 

X 

in 

SYSJDBjSIZE; 

PIXEL_START_X 

X 

in 

SYS~WINDOW_COLUMN 

PIXEL~START~Y 

X 

in 

SYS~WINDOW~ROW); 


— CPM description: Displays a the map bit image blocks on the digital map. 


The id of the digital map panel. 

The file descriptor for the contour database. It 
is returned from UME_OPEN_MAP_FILE. 

The starting record number. 


— formal parameters 


—IN 

PANEL_ID 

—IN 

FILE_DESC 

— 

—IN 

START_BLOCX 


A-167 




IN 

NUMBER_COLUMN 

The number of columns to read. 



IN 

NUMBER_ROW 

The number of rows to read. 



IN 

ROW_INCREMENT 

The amount to increment the record number for 
each contour row. 

IN 

PIXEL__START_X 

Upper left map panel X coordinate where 
blocks should actually be displayed 

the 

contour 

IN 

PIXEL_START_Y 

Upper left map panel Y coordinate where 
blocks should actually be displayed 

the 

contour 


procedure UME_DRAW_HORIZONTAL_GRID ( 

PANEL_ID : in SYS_WINDOW_ELE_ID; 

PIXEL_Y : in SYS_WINDOW_ROW); 

— CPM description: Draws a horizontal grid line on the digital map. 


— formal parameters 

—IN PANEL_ID The id of the digital map panel. 

—IN PIXEL_Y Digital map panel Y coordinate where the grid line 

— is to be displayed. 


procedure UME_DRAW_VERTICAL_GRID ( 

~PANEL_ID : in SYS_WINDOWJELE_ID; 

PIXELX : in SYS_WINDOW_COLUMN); 

— CPM description: Draws a vertical grid line on the digital map. 


— formal parameters 

—IN PANEL_ID The id of the digital map panel. 

—IN PIXEL_X Digital map panel X coordinate where the grid line 

is to be displayed. 


procedure UME_XNIT_MAPJ3YSTEM ( 

CONTOUR_FILE : in STRING; 

MAP_FILE : in STRING); 

— CPM description: Initializes the contour and map system. 

— formal parameters 

—IN CONTOUR_FILE The name of the file containing the contour map 

initialization. 

—IN MAP_FILE The name of the file containing the map 

— — initialization. 


procedure UM£_LABEL HORIZONTAL GRID ( 

PANEL ID ” I in SYS WINDOW_ELE ID; 

PIXEL _ Y « in SYS - WINDOW - ROWj 


A-lfiS 





GRID_LABEL : in SYS_GRID_LABEL); 

— CPM description: Labels a horizontal grid line on the digital map. 


— formal parameters 


—IN 

PANEL_ID 

The id of the digital map panel. 

—IN 

PIXEL_Y 

Digital map panel Y coordinate where the grid label 



is to be displayed. 

—IN 

GRID_LABEL 

The number label to display on the grid 


procedure UME_LABEL_VERTICAL_GRID ( 


PANEL ID 

s 

in 

S YS_WINDOW_ELE_ID; 

pixel“x 

: 

in 

S Y S~WINDOW_C OLUMN; 

GRID_LABEL 

: 

in 

SYS GRID_LABEL); 


— CPM description: Labels a vertical grid line on the digital map. 


— formal parameters 

—IN PANEL_ID 

—IN PIXEL_X 

— IN GRID LABEL 


The id of the digital map panel. 

Digital map panel X coordinate where the grid label 
is to be displayed. 

The number label to display on the grid 


procedure ume_open_cont_file < 

FILE_NAME : in STRING; 

FILE_DESC : out SYS_FILE_DESC); 

— CPM description: opens the contour image database. 

— formal parameters 

—IN FILE_NAME The name of the contour parameter file 

—OUT FILE_DESC The file descriptor for the contour file. This 

descriptor is required for other I/O operations. 


procedure UME_oPEN_ELEV_FlLE ( 

FILE_NAME : in STRING; 

FILE_DESC : out SYS_FILE_DESC); 

— CPM description: Opens the elevation database. 

— formal parameters 

—IN FILE_NAME The name of the elevation parameter file 

—OUT FILE_DESC The file descriptor for the elevation file. This 

descriptor is required for other I/O operations. 


procedure uhi_open_map_file ( 


A-169 




FILE_NAME S in STRING; 

FILE_DESC : out SYS_FILE_DESC); 

— CPK description: Opens the map image database. 

— formal parameters 


IN 

FILENAME 

The name of the map parameter file 


OUT 

FILE_DESC 

The file descriptor for the map file, 
descriptor is required for other I/O 

. This 
operations. 


end UME HAP EDITOR; 






—cpc package specification name: UMP_MAP 

—cpc description: UMP_MAP is the intermediate level digital map package that 

— is responsible for displaying and erasing the digital map 

— and the digital map features. 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications international Corporation 
424 Delaware, suite C3 
Leavenworth, KS 66048 

use SYSTEM_PACKAGE; 
use MSG_MESSAGE; 
use MAP - SYSTEM; 


MSG MESSAGEJPOINT :« new MSG_VAR_MESSAGES ( 
MSG~LUT UPDATE); 


with SYSTEM_PACKAGE; 
with MSG_MESSAGE; 
with MAP_SYSTEM; 

package UMP_MAP is 

UMP LUT MESSAGE 


procedure UMP_SEND_LUT_UPDAT£; 

— CPM description: Sends a color lookup table update to the station 

— control process (SCL) 


— formal parameters 

— None 


procedure ump_display_contours; 

— CPM description: Displays contours on the digital map 

— formal parameters 

— None 


procedure UMP_DISPLAY_GRIDS; 

— CPM description: Displays grid lines on the digital map 

— formal parameters 

— None 

procedure UMP_DISPLAY_MAP; 

— CPM description: Displays digital map background image 

— formal parameters 

— None 

procedure UMP ELEVATION QUERY; 


A-171 


— CPM description: Display the elevation of a given point 

— formal parameters 

None 


procedure UMP__ERASE_CONTOURS; 

— cpm description: Erases contours from the digital map 

— formal parameters 

None 


procedure UMP_ERASE__GRIDS; 

— CPM description: Erases grids from the digital map 

— formal parameters 

None 


procedure UMP_ERASE_MAP; 

— cpm description: Erases digital map background image 

— formal parameters 

— None 

procedure ump_HILITE_hydro; 

— CPM description: Highlights the individual classes of hydrography. 

— formal parameters 

None 


procedure UMP_HILITE_MIsC; 

— CPM description: Highlights the individual classes of miscellaneous 

features. 


— formal parameters 

— None 


procedure UMP_HILITE_ROAD; 

— CPM description: Highlights the individual classes of roads. 

— formal parameters 

— None 


A-172 





procedure UKP_HILITE_URBAN; 

— CPM description: Highlights the individual classes of urban areas. 

— formal parameters 

— None 


procedure UMP_INITIALIZE_MAP; 

— CPM description: Initializes the map system. 

— formal parameters 

— None 


procedure UMP_NEW_BACK_TYPE (BACKGROUND : in SYS_MAP_BACKGROUND); 

— CPM description: Updates the color lookup table for a change in 

background type. 


— formal parameters 

—IN BACKGROUND - New Background Type 


procedure ump_RESTORE_MAP ( 

PANEL_ID 
PIXELX 
PIXEL_Y 
PIXEL WIDTH 
PIXEL HEIGHT 


• 

e 

in 

SYS WINDOW ELE_ID 

• 

e 

in 

SYS~WINDOW COLUMN 

: 

in 

SYS~WINDOW ROW; 

X 

in 

SYS_WINDOW_COLUMN 

: 

in 

SYS~WINDOW_ROW); 


— CPM description: Restores the display of the map image. This is required 

_ during scrolling operations and when a portion of the 

— digital map panel has been exposed. 


— formal parameters 


—IN 

PANEL_ID 

The 

id of the digital map panel. 




—IN 

PIXELX 

The 

window X coordinate of the upper 

left 

corner 

of 

— 


the 

digital map restore area. 




—IN 

PIXEL_Y 

The 

window Y coordinate of the upper 

left 

corner 

of 

— 


the 

digital map restore area. 




—IN 

PIXEL_WIDTH 

The 

width of the digital map restore 

area 

in pixels. 

—IN 

PIX£L_HEIGHT 

The 

height of the digital mao restore 

i area in 


— 


pixels. 





procedure UMP_UNHILITE_HYDRO; 

— CPM description: Sets all classes of hydrography to a single color. 

— formal parameters 


A-173 


None 


procedure UMP_UNHILITE_MISC; 

— cpm description: Sets all classes of miscellaneous features to a single 

— color. 


— formal parameters 
None 


procedure UMP_UNHILITE_R0AD; 

— CPM description: Sets all classes of roads to a single color. 

— formal parameters 

-- None 

procedure UMP_UNHILITE_URBAN; 

— CPM description: Sets all classes of urban areas to a single color. 

— formal parameters 

None 

end UMPMAP; 


A- 174 


—cpc package specification name: UNIT_SYSTEM 

—cpc description: Defines types and objects that are common to the unit display 
— system. 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications international Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEMJPACKAGE ; use SYSTEM_PACXAGE; 

with SDB_SITUATION DB; use SDB SITUATION DB; 


package UNIT_SYSTEM is 


— Unit data that is to be displayed in the unit summary status box 
type UNIT_STATUS_DATA is 
record 


UNIT_NAME 
UNIT_ECHELON 
UN1TJTYPE 
LOCATION 
PERCENT_STR 
end record; 


STRING (SDB_UNIT_NAME_LEN); 
SDB PORCE_ECHELON; 
SDB_UNIT_TYPE; 
SDB_LOCATION_RECJ 
SYS _ PERCENT; 


— Unit display options 
type UNlT_OPTIONS is 
record 


UNIT DIV 

• 

BOOLEAN; 

UNIT BDE 

• 

e 

BOOLEAN; 

UNIT RGMT 

• 

e 

BOOLEAN; 

UNIT BN 

X 

BOOLEAN; 

UNIT - CO 

: 

BOOLEAN; 

UNIT_CBT_COMMIT 

: 

BOOLEAN; 

UNIT_CS_REINF 

• 

e 

BOOLEAN; 

UNIT CSS ARTIL 

: 

BOOLEAN; 

UNIT NAME 

s 

BOOLEAN; 

UNIT SYMBOL 

e 

• 

BOOLEAN; 


end record; 


— Current BLUEFOR units displayed 

UNIT_BLUEFOR_COUNT : S D B_BLUEF OR_UNIT_ID; 

UNIT~CURRENT_BLUEFOR : SDB LOCATION_LIST POINT; 

UNIT_BLUEFOR_DISPLAYED : array (SDB_BLUEFOR_UNIT_ID) Of BOOLEAN; 


— Current OPFOR units displayed 
UNIT_OPrOR_COUNT : 

UNIT~CURRENT_OPFOR I 

UNIT OPFOR DISPLAYED : 


SDB_OPFOR_UNIT_ID; 

S D B~LOCATION_LIST_POINT; 
array <6DB_0PF0R_UNIT~ID) of BOOLEAN; 


— Current BLUEFOR Unit and 
UNIT_CURR_BLUEFOR_OPTION 
UNIT _ CURR — OPFOR OPTION 


OPFOR Unit display options 
« UNIT_OPTIONS; 

: UNIT - OPTIONS; 


A-175 






— unit popup menus (Blue and OPFOR) 


UNIT_BL_MENU_ID s 

UN I T_BL_M£NU_START s 

UNIT_BL_MENU_LENGTH s 

UNIT_BL_POP_UP_TEXT ! 

UNIT_BL_POP_UP_CHILD : 

UN I T_BL_POP_UP_OPT I ON : 

UNIT_OP_MENU_ID ! 

UNIT_OP_MENU_START t 

UN I T_OP_MENU_LENGTH s 

UNIT_OP_POP_UPJTEXT i 

UN X T_OP_POP_UP__CH ILD S 

UNIT OP POP UP OPTION s 


S Y S_WINDOW_ELE_I D; 

S YS_POP_UP_START_PTR new 

SYS~POP_UP_START (SYS_UNIT_KENU); 
SYS~P0P“UP_LENGTH_PTR~:« new 
SYS~POP~UP_LENGTH~(SYS_UNIT_HENU); 
SYS~KENU_TEXT PTR l- new 
S Y S_MENU~TEXT~ (SYS_UNIT_CELL); 
SYS~POP_UP_CHILD_PTR S- new 
SYS~POP~UP_CHILD (SYS_UNIT_CELL )} 
SYS_UNIT_OPTION PTR S* new 
SYS_UNIT_OPTION~ARRAY (SYS_UNIT_CELL); 
SYS_WINDOW_ELE ID; 

SYS_POP_UP~START_PTR new 
SYS_POP_UP_START (SYS_UNIT_MENU): 
SYs“pop“uP_LENGTHJPTR*~J- new 
SYS_POP~UP_LENGTH (SYS_UNIT_MENU); 
SYS_MENU_TEXT_PTR S- new 
SYS~MENU_TEXT (SYS_UNIT_CELL); 
SYS“P0P_UP_CHIU>_PTR s* new 
SYS_POP_UP_CHILD (SYS_UNIT_CELL); 

SYS_UNIT_OPTION_PTR :« new 
SYS UNIT_OPTION_ARRAY (SYS_UNIT_CELL); 


end UNIT SYSTEM 




—cpc package specification names UNT_UNIT 

—cpc descriptions UNT_UNIT is the intermediate level unit display package that 

is responsible for displaying and erasing units on the 
digital map. 

—cpc design notess 

This package raises the SYS_UNT_EXCEPTION when an exception is detected. 

—cpc package authors Bruce Packard 

Science Applications International corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 

With SDB_SITUATION_DB; use SDB_SITUATION_DB; 

package UNT_UNIT is 

procedure UNT_DISPLAY_BLUEFOR_UNIT ( 

UNITJSCHELON s in SDB_FORCE_ECHELON; 

BATTLE_FUNC l in SDB_BATTLE_FUNCTION); 

— CPM descriptions Displays a BLUEFOR units of a given echelon 

— formal parameters 


IN 

UNIT_ECHELON 

Echelon 

of the 

unit to display 

IN 

BATTLE_FUNC 

Combat, 

cs, or 

CSS units 


procedure UNT_DISPLAY_OPFOR_UNIT < 

UHIT__ECHELOH j in SDB_FORCE_ECHELON; 

BATTLE_FUNC s in S D B_BATTLE_FUN C TI ON) ; 

— CPM descriptions Displays OPFOR units of a given echelon 

— formal parameters 

—IN UNlT_ECHELON " Echelon of the unit to display 

—IN BATTLEJFUNC Committed, Reinforcing, or Artillery units 


procedure UNT_DISPLAY_OPFOR_STATUS ( 

~UNIT_IND S in SDB_OPFOR_UNIT_ID); 

— CPM descriptions Displays a summary status report for a opfor. This 

— is generated when the user selects the status option 

— for a unit displayed on the digital map 

—- formal parameters 

—IN UNIT_IND Index into the unit_current_opfor array of the 

— unit to display a status report on 


procedure UNTJERASE_bluefor_unxt ( 


A-177 




UNIT_ECHELON 
BATTLE FUNC 


in S D B_F ORCE_E C HELON; 

in SDB BATTLE_FUNCTION); 


— CPM description: Erasea BLUEFOR units of a given echelon 


— formal parameters 

—IN UNIT ECHELON Echelon of the unit to erase 


—IN BATTLE FUNC 


Combat, cs, or CSS units 


procedure UNT_ERASE_OPFOR_UNIT ( 

UNITJSCHELON : in SDB_FORCE_ECHELON; 

BATTLEJFUNC : in SDB~BATTLE_FUNCTION) ; 

— CPM description: Erases OFFOR units of a given echelon 

— formal parameters 

—IN UNIT_ECHEL0N Echelon of the unit to erase 

—IN BATTLEJFUNC Committed, Reinforcing, or Artillery units 


procedure unt_erase_opfor_STATUS; 

— CPM description: Erases a OPFOR unit summary status report 

— formal parameters 

None 


procedure UNT_INITIALIZE_UNITS; 

— CPM description: Initializes the unit display system 

— formal parameters 

— None 


procedure unt_move_bluefor_unit ( 

~UNIT_IND : in SDB_BLUEFOR_UNIT_ID; 

UNIT~LOCATION : in SDB~LOCATION_REC); 

— CPM description: Updates the location of a BLUEFOR unit 

— formal parameters 

UNIT_IND index into the UNIT_CURRENT_BLUEF0R array of the 

unit to move _ 

— UNlT_LOCATION New location of the unit 


procedure UNT_MOVE_OPFOR UNIT ( 



~UNIT_IND : 

in 

SDB OPFOR UNIT ID; 

UNITJLOCATION : 

in 

SDB~LOCATION_REC); 


A-17 8 



— CPM description: Updates the location of a BLUEFOR unit 


— formal parameters 
UNIT IND 


Index into the UNIT_CURRENT_OPFOR array of the 
unit to move 


UNIT LOCATION New location of the unit 


procedure UNT_RESTORE_UNITS; 

— CPM description: Redisplays the BLUEFOR and OPFOR units. 

— formal parameters 
None 

end UNT UNIT; 


A-179 


—cpc package specification names UOB_OBSTACLE 

—cpc descriptions UOB_OBSTACLE is the intermediate level obstacle 

display package that is responsible for displaying and 
erasing obstacle on the digital map. 

—cpc design notess 

This package raises the SYS_UOB_EXCEPTION when an exception is detected. 

—cpc package authors Bruce Packard 

science Applications International corporation 
424 Delaware, suite C3 
Leavenworth, KS 66048 

with SDB_SITUATION_DB; use SDB_SITUATION_DB; 

package UOB_OBSTACLE is 

procedure UOB_DISPLAY_OBSTACLE { 

OBSTACLE_SIDE S in SD8_SIDE_TYPE); 

— CPM descriptions Displays the obstacles of a given force and echelon. 

— formal parameters 

—IN OBSTACLE SIDE Force of the obstacles to display 


procedure UOB_DELETE OBSTACLE ( 

OBSTACLE_IND .• in SDB_OBSTACLE_ID); 

— CPM descriptions Deletes an obstacle from the display 

— formal parameters 

—IN CNTKL msr IND Index of the control measure to delete 


procedure UOB_ERASE_OBSTACLE ( 

OBSTACLE_SIDE » in SDB_SIDE_TYPE); 

— CPM descriptions Erases the obstacles of a given force and echelon. 

— formal parameters 

—IN OBSTACLE_SIDE Force of the obstacles to erase 

procedure uob_initialize_obstacle; 

— CPM descriptions Initializes the obstacle display system. 

— formal parameters 

none 


procedure UOB_MOVE_OBSTACLE ( 

OBSTACLE_ID s in SDB_OBSTACLE_ID; 

OBSTACLE REC s in SDB™OBSTACLE™REC); 


A-180 



— CPM descriptions updates the location of an obstacle 

— formal parameters 

OBSTACLE_ID Id of the obstacle to move 

OBSTACLE rec New description of the obstacle 


procedure UOB_RESTORE_OBSTACLE; 

— CPM description: Restores the obstacle displays that were destroyed 

by overlapping windows. 


— formal parameters 

— None 


end UOB OBSTACLE; 







—cpc package specification name: UOE_OBSTACLE_EDITOR 

—cpc description: UOE_OBSTACLE_EDITOR contains the low level obstacle utilities 

— for displaying specific types of obstacles. 

—cpc design notes: 

This package raises the SYS_UOE_EXCEPTION when an exception is detected. 

—cpc package author: Bruce Packard 

science Applications International corporation 

— 424 Delaware, Suita C3 

— Leavenworth, KS 66048 

with SYSTEM_PACKAGE; 
with SDB_SITUATION_DB; 
with TEXT_IO; 

package UOE_OBSTACLE_EDITOR is 

procedure UOE_A3ATIS ( 

ADD_FLAG 

OBSTACLE_DESC 

— CPM description: Displays an abatis on the digital map. 

-- formal parameters 

—IN add_flag Add or erase the obstacle flag 

— True * Add; False ” Erase 

—IN OBSTACLE_DESC The description of the abatis. 


procedure uoe_at_ditch ( 

ADD_FLAG : in BOOLEAN; 

OBSTACLE_DESC : in SDB_OBSTACLE_REC) ; 

— CPM description: Displays an anti-tank ditch on the digital map. 

— formal parameters 

--IN ADD_FLAG Add or erase the obstacle flag 

— True ” Add; False » Erase 

—IN OBSTACLE_DESC The description of the anti-tank ditch. 


in BOOLEAN; 
in SDB OBSTACLE REC); 


use SYSTEM_PACKAGE; 
use SDB_SITUATION_DB; 
use TEXT 10; 


procedure UOE_BRlDGE_DEMO ( 

ADD_FLAG : in BOOLEAN; 

OBSTACLE_DESC : in SDB_OBSTACLE_REC) ; 

— CPM description: Displays a bridge demolition on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the obstacle flag 

— True “ Add; False ■ Erase 

—IN OBSTACLE_DESC The description of the bridge demolition. 


A-182 






procedure UOE_CHEMICAL ( 

ADD_FLAG S in BOOLEAN; 

OBSTACLE_DESC : in SDB_OBSTACLE_REC); 

— CPM description: Displays a chemical obstacle on the digital map. 

— formal parameters 

—IN add_flag Add or erase the obstacle flag 

True - Add; False - Erase 

—IN OBSTACLE_DESC The description of the chemical obstacle. 


procedure UOE_CRATER ( 

ADD_FLAG X in BOOLEAN; 

OBSTACLE_DESC : in SDB_OBSTACLE_REC); 

— CPM description: Displays a crater on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the obstacle flag 

True ■ Add; False - Erase 

—IN obstacle_desc The description of the crater. 


procedure UOEJDAMJDEMO ( 

ADD_FLAG i in BOOLEAN; 

OBSTACLE_DESC : in SDB_OBSTACLE_REC); 

— CPM description: Displays a dam demolition on the digital map. 

— formal parameters 

—IN ADD_FLAG Add or erase the obstacle flag 

~ True - Add; False ■ Erase 

—IN OBSTACLE_DESC The description of the dam demolition. 


procedure UOE_FLOODING < 

ADD_FLAG l in BOOLEAN; 

OBSTACLE_DESC I in SDB_OBSTACLE_REC); 

— CPM description: Displays a flooding obstacle on the digital map. 

— formal parameters 

—IN add_flag Add or erase the obstacle flag 

— ~ True - Add; False - Erase 

—IN ob sT acle_de sc The description of the flooding obstacle. 


procedure UOE_LOG_POSTS ( 

“ ” ADD FLAG < in BOOLEAN; 


A-183 



OBSTACLE_DESC J in SDB_OBSTACLE_REC); 

— CPM description: Displays log posts on the digital map. 

— formal parameters 

—IN ADd__fuvg Add or erase the obstacle flag 

True * Add; False ■ Erase 

—IN obstacle_desc The description of the log posts. 


procedure UOE_MINEFIELD AP ( 

ADD FLAG : in BOOLEAN; 

OBSTACLE_DESC : in SDB_OBSTACLE_R£C); 

— CPM description: Displays a anti-personnel minefield on the digital map. 

— formal parameters 

—IN add_flag Add or erase the obstacle flag 

True » Add; False “ Erase 

—IN OBSTACLE_DESC The description of the anti-personnel minefield. 


procedure UOE_MINEFIELD_AT ( 

ADDFLAG I in BOOLEAN: 

OBSTACLE_DESC : in SDB_OBSTACLE_REC); 

— cpm description: Displays a anti-tank minefield on the digital map. 

— formal parameters 

—IN add_flag Add or erase the obstacle flag 

~ True » Add; False - Erase 

—IN OBSTACLE_DESC The description of the anti-tank minefield. 


procedure UOE_MINEFIELD_AT_AP ( 

ADD_FLAG : in BOOLEAN; 

OBSTACLE_DESC J in SDB_OBSTACLE_REC); 

— CPM description: Displays a anti-tank/anti-personnel minefield on the 
~ digital map. 


— formal parameters 

—IN addjtlag Add or erase the obstacle flag 

True “ Add; False “ Erase 

—IN OBSTACLEJDESC The description of the anti-tank/anti-personnel 

— minefield. 


procedure UOE_NUclear ( 

ADD_FLAG I in BOOLEAN; 

OBSTACLE DESC l in SDB OBSTACLE EEC); 


A-184 




— cpm description: Displays a nuclear obstacle on the digital nap. 

— formal parameters 

—IN ADD_FTAG Add or erase the obstacle flag 

True - Add; False " Erase 

—IN OBSTACLEJDESC The description of nuclear obstacle. 


procedure UOE_SCAT_MINE AP ( 

ADD_FLAG l in BOOLEAN; 

OBSTACLEJDESC : in SDB_OBSTACLE_REC); 

— CPM description: Displays a scattered anti-personnel minefield on the 

— digital nap. 


— formal parameters 

—IN add_FLAG Add or erase the obstacle flag 

True - Add; False » Erase 

—IN OBSTACLEJDESC The description of scattered anti-personnel 

minefield. 


procedure UOE_SCAT_MlNE_AT ( 

ADD_FLAG : in BOOLEAN; 

OBSTACLE_DESC ! in SDB_OBSTACLE_REC); 

— CPM description: Displays a scattered anti-tank minefield on the digital 

— map. 


— formal parameters 

—IN add_flag Add or erase the obstacle flag 

— True - Add; False “ Erase 

—IN OBSTACLEJDESC The description of scattered anti-tank minefield. 


procedure UOE_SCAT_MINE_AT_AP { 

ADD_FLAG : in BOOLEAN; 

OBSTACL£_DESC : in SDB_OBSTACLE_REC); 

— CPM description: Displays a scattered anti-tank/anti-personnel minefield 

— on the digital map. 


— formal parameters 

—IN ADD_FLAG Add or erase the obstacle flag 

True ■ Add; False ■ Erase 

—IN OBSTACLE_DESC The description of scattered anti-tank/ 

— anti-personnel minefield. 


procedure UOE_STATU8 < 

ADD_FLAO 

OBS~TYPE 


in BOOLEAN; 
in SDB OBSTACLE TYPE; 


A-185 





OBS_STATUS : in SDB_OBSTACLE_STATUS) 

— CPU description: Displays the status of a obstacle. 


■ formal parameters 



■IN 

ADD_FLAG 

Add or erase the obstacle flag 
True =* Add; False ■ Erase 

IN 

OBS_TYPE 

The 

type of the obstacle. 

IN 

OBS_STATUS 

The 

status of the obstacle. 


procedure UOE_TUNNEL_DEMO ( 
ADD_FLAG 
OBSTACLE DESC 


in BOOLEAN; 
in SDB_OBSTACLE_REC); 


— CPM description: Displays a tunnel demolition on the digital map. 


— formal parameters 
—IN ADD FLAG 


Add or erase the obstacle flag 
True _ Add; False ” Erase 


—IN obstacle_desc The description of tunnel demolition. 


procedure UOE_WIRE ( 

ADD_FLAG : in 

OBSTACLE DESC : in 


BOOLEAN; 

SDB_OBSTACLE_REC); 


— CPM description: Displays a wire obstacle on the digital map. 


— formal parameters 
—IN ADD FLAG 


Add or erase the obstacle flag 
True ■ Add; False _ Erase 


—IN OBSTACLE_DESC The description of wire obstacle. 


end UOE_OBSTACLE_EDITOR; 


A-186 



—cpc package specification names UTM_TACTICAL_MAP 

—cpc description: UTM_TACTICAL_MAP is the high level digital map package that 
is responsible for displaying the EDDIC specific displays 
— such as units and control measures. 


—cpc design notes: 

This package raises the SYS_UTM_EXCEPTION when an exception is detected. 


—cpc package author: Bruce Packard 

Science Applications International Corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with 

with 

with 

with 

with 

with 

with 


SYSTEM PACKAGE; 

use 

SYSTEM PACKAGE; 

MAPSYSTEM; 

use 

MAP_SYSTEM; 

UNIT_SYSTEM; 

use 

UNIT_SYSTEM; 

CM_SYSTEM; 

use 

CM_SYSTEM; 

OBS_SYSTEM; 

use 

OBS_SYSTEM; 

SDB~SITUATION DB; 
UWN_WALKING MENU; 

use 

SDB_SITUATION DB 


package UTM_TACTICAL_MAP is 

— Generic instantiations for the digital map walking menus 
package MAPWALK is new UWN_WALXING MENU (SYS_MAP_CONTROL, 

SYS_MAP_CONTROL_ARRAY,~SYS_MAP“cONTROL_PTR); 
package CM_WALK ~is new UWN_WALKING MENU (SY8_CM_OPTION, 
SYS_CM_OPTION_ARRAY, SYS_CM_OPTION_PTR); 
package OBSWALK is new UWN_WALKING MENU <SYS_OBS_OPTION, 

SYS_0BS_OPTION ARRAY, SYS OBS OPTION_PTR); “ 

package UNIT_WALK is new UWN_WALKING_MENU (SYS_UNlT_OPTlON, 
SYS_UNIT_OPTION_ARRAY, SYS_UNIT_OPTION_PTR); 


procedure UTM_BLUEFOR_UNITS ( 


PANEL ID 

s 

in 

STS_WINDOW_ELE_ID; 

UNIT COUNT 

s 

in 

SDB_BLUEFOR_UNIT ID; 

UNIT_LOC_TABLE 

t 

in 

SDB_LOCATION_LIST_POINT 

UNIT_OPTION 

s 

in 

UNIT_OPTIONS); 


— CPM description: Displays all the BLUEPOR units on the digital map 


— formal parameters 


—IN 

PANEL_ID 

—IN 

UNIT_COUNT 

—IN 

UNI T_LOC_TABLE 

—IN 

UNIT_OPTION 

procedure UTM_BLUEFOR_i 


The id of the digital map panel. 

The number of units in the unit location table 

Array of records defining the unit names, location 
echelon and type. 

The default unit display options 


PANEL_ID I in SYS WINDOW ELE_ID; 

UNIT_ID I in SDB~BLUEFOR_UNIT_ID; 


A-187 


UNIT_LOCATION : in SDB_LOCATION_REC); 

— CPM description: Changes the location of a BLUEFOR unit on the digital map 

— formal parameters 


— IN 

PANEL_ID 

The id 

of 

the digital map panel. 

—IN 

UNIT_ID 

The id 

of 

the changed unit 

—IN 

UNIT LOCATION 

Units new 

location 


procedure UTM_CONTROL_MEASURE ( 

PANEL_ID : 

CNTRL_MSR_COUNT : 

C NT RL_MS R_TABLE j 
CNTRL_MSR_OPTION: 

— cpm description: Displays all the control measures on the digital map 

— formal parameters 

PANEL_ID The id of the digital map panel. 

cntrl_msr_count The number of control measures in the control 
measure table 

cntrl_msr_table Array of records defining the control measures. 
cntkl_msr_option Default display options for the control measures 


—IN 
—IN 

—IN 
—IN 


in S'?S_WINDOW_ELE_ID ; 

in S DB_CONTROL,__MEASURE_I D; 

in SDB_CONTROL_MSR_POINT; 
in CM CNTRL_MSR_OPTIONS); 


procedure UTM_CONTROL_MEASUR£ CHG 

( 



PANEL_ID ~ 

t 

in 

SYS_WINDOW_ELE_ID; 

CNTRL MSR_ID 

X 

in 

SDB~CONTROL_MEASURE ID; 

CNTRL MSR_DESC 

X 

in 

SDB_CONTROL_MEASURE_REC) 

— CPM description: Updates a control 

measure 

on the digital map 


— formal parameters 


—IN 

PANEL_ID 

The 

id 

of 

the digital map panel. 

1 1 

1 1 

M 

55 

CNTRL_MSR_ID 

The 

id 

of 

the changed control measure 

2 
w 
i : 
i i 

CNTRL_MSR__DESC 

Description of the control measure. 


procedure UTM_CNTRL_MSR__POINT ( 


PANEL ZD 

1 

in 

SYS_WINDOW_ELE ZD; 

CNTRL _ MSR_COUNT 

< 

in 

sdb - control_measure ID; 

cntrl“msr“table 

: 

in 

SDB~CNTRL_POINT_POZNT); 


— CPM description: Displays all the point control measures on the digital 

— map 

— formal parameters 


A-188 




1 

The id of the digital map panel. 

The number of point control measures in the control 
measure table 

Array of records defining the control measures. 


—IN PANEL_ID 

—IN CNTRL_MSR_COUNT 

—IN CNTRL MSR TABLE 


procedure UTM_CNTRL_MSR_POINT_CHG ( 

PANEL_ID ” l 
CNTRL_MSR_ID : 
CNTRL HSR DESC 1 


in SYS_WINDOW_ELE_ID; 
in SDB_CONTROL_MEASURE_ID; 
in SDB_CNTRL_HSR_POINT REC); 


— CPM description: Updates a point control measure on the digital map 


— formal parameters 


IN 

PANEL_ID 

The 

id 

of 

the digital map panel. 

IN 

CNTRL_MSR_ID 

The 

id 

of 

the changed control measure 

IN 

CNTRL_MSR_DESC 

Description of the control measure. 


procedure UTM_DEFINE_BLUE_CM_M£NU ( 


STRUCT_ID 

s 

in 

SYS_WINDOW_ELE_ID; 

MENU COUNT 

: 

in 

SYS_MENU_TREE LIMIT; 

MENU LIST 

: 

in 

SYS MENU TREE PTR; 

ASSOCIATEDJTABLE 

: 

in 

SYS_CM_OPTION_PTR); 

Defines the pop 

up menus 

to be 

UBed by the blue control 


measure menu software 


— formal parameters 


—IN 

MENUJTYPE 

The type of menu to define 

—IN 

STRUCT_ID 

The id to assign to the blue control measure pop 
up menu. 

—IN 

MENU_COUNT 

The number of menu selections in MENU_LIST. 

—IN 

MENU_LIST 

A string array of the blue control measure walking 
menu in outline format. The first character of each 
line must be blank and menu children should be 
indented one character from its parent. 

—IN 

— end 

ASSOCIATEDJTABLE 

formal parameters; 

A table of ids to be associated with each menu 
element 


procedure UTM_DEEINE_BLUE_OBS_MZNU ( 


STRUCT_ID I 

in 

SYS_WINDOW_ELE ID; 

MENUjCOUNT I 

in 

SYSjMENUjTREE LIMIT 

MENU~LIST 1 

in 

SYS~MENU~TREE PTR; 

ASSOCIATEDJTABLE : 

in 

S YS~OB S_OPTION_PTR) 

| — CPM description: Defines the pop up menus 

to be 

used by the blue 

1 A-189 







obstacle menu software 


— formal parameters 


—IN 

MENU_TYPE 

The type of menu to define 

—IN 

STRUCT_ID 

The id to assign to the blue obstacle pop up menu. 

—IN 

MENU_COUNT 

The number of menu selections in MENU_I,IST. 

—IN 

MENU_LIST 

A string array of the blue obstacle walking 
menu in outline format. The first character of each 
line must be blank and menu children should be 
indented one character from its parent. 

—IN 

— end 

ASSOCIATED_TABLE 

formal parameters; 

A table of ids to be associated with each menu 
element 


procedure UTM_DEFINE_BLUE_UNIT_MENU ( 
STRUCT_ID s 

MENU_COUNT : 

MENU_LIST : 

ASSOC IATED__TABLE : 

— CPM description: Defines the pop up 

— software 


in SYS_WINDOW_ELE_ID; 

in SYS_MENU_TREE_LIMIT; 

in SYS_MENU_TREE_PTR; 

in SYS_UNIT_OPTION_PTR); 

menus to be used by the blue unit menu 


— formal parameters 


—IN 

MENU_TYPE 

The type of menu to define 

—IN 

STRUCT_ID 

The id to assign to the blue unit pop up menu. 

—IN 

MENU_COUNT 

The number of menu selections in MENUJLIST. 

ss 

H 

1 1 1 1 1 1 

1 1 1 1 1 1 

MENU_LIST 

A string array of the blue unit walking menu 
in outline format. The first character of each 
line must be blank and menu children should be 
indented one character from its parent. 

—IN 

— end 

ASSOCIATED_TABLE 

formal parameters; 

A table of ids to be associated with each menu 
element 


procedure UTM_DEFINE_MAP_KZNU ( 


STRUCT_ID 

X 

in 

SYS_WINDOW_ELE_ID; 

MENU_COUNT 

X 

in 

S Y S~MENU_TREE_LIMIT; 

MENU_LIST 

X 

in 

SYS~MENU_TREE PTR; 

ASSOCIATED_TABLE 

X 

in 

SYS_MAP_CONTROL_PTR); 


— CPM description: Defines the pop up menus to be used by the map control 

— software 


— formal parameters 


IN 

STRUCT_ID 

The 

IN 

M£NU_COUNT 

The 


id to assign to the map control pop up menu, 
number of menu selections in MENU LIST. 


A-190 



—IN MENU_LIST A string array of the map control walking menu 

in outline format. The first character of each 
line must be blank and menu children should be 

— indented one character from its parent. 

—IN ASS0CIAT£D_TABLE A table of ids to be associated with each menu 

— element 

— end formal parameters; 

procedure UTM_DEFINE_MAP_PANEL ( 


WINDOW_ID 

t 

in 

SYS WINDOW ELE ID; 

PANEL_ID 

: 

out 

SYSJWINDOW ELE ID; 

pixeiTx 

t 

in 

SYS~NINDOW_COLUMN; 

PIXEL_Y 

t 

in 

SYS_WINDOW_ROW; 

pixel”width 

e 

e 

in 

SYS_WINDOW_COLUMN; 

PIXEL HEIGHT 

: 

in 

SYS_WINDOW~ROW; 

CALL PROCESS 

I 

in 

SYS EDDIC PROCESSES; 

SCL_PROCESS 

: 

in 

SYS_EDDIC_PROCESSES; 

PART_OF_FORM 

: 

in 

BOOLEAN :« false); 


— CPM description: Defines the digital map panel 


— formal parameters 


—IN 

WINDOW_ID 

—OUT 

PANEL_ID 

— IN 

PIXELX 

— IN 

PIXEL_Y 

—IN 

PIXEL_WIDTH 

—IN 

PIXEL_HEIGHT 

—IN 

CALL_PROCESS 

—IN 

SCL_PROCESS 

— IN 

PART_OF_FORM 

— 



The id of the window to contain the map panel. 

The id of the digital map panel. 

The window x coordinate of the upper left corner of 
the digital map panel. 

The window Y coordinate of the upper left corner of 
the digital map panel. 

The width of the digital map panel in pixels. 

The height of the digital map panel in pixels. 

The ID of the Calling process 

The ID of the Station Control Process 

Logical flag to indicate if the map panel is part 
of a form. This flag is used to determine if the 
current map scale should be displayed in the window 
top border, it is not displayed in a form. 


procedure UTM_DETINE OPF0R_CM_MENU ( 


STRUCT_ID 

I 

in 

SYS_WINDOWJELE_ID; 

MENU COUNT 

l 

in 

SYS MENU TREE LIMIT 

MENU~LIST 

1 

in 

s ys_menu”tree”ptr ; 

ASSOCIATED TABLE 

s 

in 

SYS~CM_OPT10N_PTR); 


— CPM description: Defines the pop up menus to be used by the OPFOR control 

— measure menu software 


A-191 






— formal parameters 

—IN MENU_TYPE The type of menu to define 

—IN STRUCT ID The id to assign to the OPFOR control measure pop 

— up menu. 

—IN MENU_count The number of menu selections in KENU_LIST. 

—in menu list a string array of the OPFOR control measure walking 

_ menu in outline format. The first character of each 

line must be blank and menu children should be 
indented one character from its parent. 

—IN ASSOCIATED_TABLE A table of ids to be associated with each menu 

— ~ element 

— end formal parameters; 


—IN MENU_COUNT 

—IN MENU LIST 


STRUCT ID 

: 

in 

SYS WINDOW ELE ID; 

MENU COUNT 

t 

in 

SYS MENU TREE_LIMIT 

MENU_LIST 

i 

in 

SYS MENU_TR£E~PTR; 

AS S OCIATE D_TABLE 

t 

in 

SYS_OBS_OPTION_PTR) 


— CPM description: Defines the pop up menus to be used by the OPFOR 

— obstacle menu software 


— formal parameters 

—IN MENU__TYPE The type of menu to define 

—IN STRUCT_ID The id to assign to the OPFOR obstacle pop up menu. 

—IN menu__count The number of menu selections in menu_list. 

—IN MENU__LIST a string array of the OPFOR obstacle walking 

— menu in outline format. The first character of each 

— line must be blank and menu children should be 

indented one character from its parent. 

—IN ASSOClATED_TABLE A table of ids to be associated with each menu 

— ~ element 

— end formal parameters; 


STRUCT ID 

: 

in 

SYS WINDOW ELE ID; 

MENU_C OUN T 

s 

in 

SYS MENU TREE_LIMIT; 

MENU LIST 

t 

in 

SYS_MENU_TREE_PTR; 

ASSOCIATED TABLE 

i 

in 

SYS UNIT OPTION_PTR) 


— CPM description: Defines the pop up menus to be used by the OPFOR unit 

— menu software 


— formal parameters 
—IN MENUJTYPE 

—IN STRUCT ID 


The type of menu to define 

The id to assign to the OPFOR unit pop up menu. 


A-192 







—IN MENU_COUNT The number of menu selections in MENU_I.IST. 

—IN menu_LIST A string array of the OPFOR unit walking menu 

— in outline format. The first character of each 

— line must be blank and menu children should be 

indented one character from its parent. 

—IN associated_table A table of ids to be associated with each menu 

element 

— end formal parameters; 

procedure UTM_DEFINE_OPLAN ( 

OPPLAN_ID t in SYS_OPPLAN; 

DATE_TIME I in 8YS_DATE_TIME; 

SOCKET : in SYS_CLIENT); 

— CPM description; Defines the current operational Plan and Date/Time 

for situation Data retrievals. 


— formal parameters 

—IN 0PPLAN_ID Id of the current OPPLAN. 

—IN DATE_TIME Date and time for the situation data requests. 

—IN SOCKET The number of the socket for the situation DB manager. 


— end formal parameters; 

procedure UTM_DELETE_MAP_MENUS ( 

PANEL_ID ; in SYS_WINDOW_ELE_ID); 

— CPM description: Deletes the digital map multiple selection menus 

— formal parameters 

—IN PANEL_ID The id of the digital map panel. 


procedure UTM_DELETE_MAP_PANEL ( 

PANEL_ID ; in SYS_WINDOW_ELE_ID); 

— CPM description: Deletes the digital map panel 

— formal parameters 

—IN PANEL_ID The id of the digital map panel. 


procedure UTM_ERA£E_OVERLAY ( 

PANEIi_ID : in SYS_WINDOW_ELE_ID); 

— CPM description: Erases all the unit and control measure overlays 

— formal parameters 

—IN PANEL_ID The id of the digital map panel. 


A-193 






procedure UTM_INPUT ( 

INPUT TYPE 

INPUT~WINDOW 

input~vax.uk 

INPUT~DATA 


: out 

i out 

t out 

: out 


SYS_WINDOW_INPUT; 
SYS_WINDOW_ELE_ID; 
SYS_WINDOW_VALUE; 
SYS_WINDOW DATA); 


— CPM description: Processes user input when the digital map panel is 

— displayed. This procedure will intercept all map 

— inputs and return the rest to the call procedure. 


— formal parameters 


—OUT 

INPUTJTYPE 

—OUT 

INPUT_WINDOW 

—OUT 

INPUT_VALUE 

—OUT 

INPUT DATA 


Type of input returned from the window system 
The id of the window which received the input. 
The value of the input that accompanies the type 
The value of the data that accompanies the type 


The following table lists the map specific output returned to the 
application for its own processing: 

window- 


— input_type 

id 

value_code 

data 

—20 Map Input 

X 

0 Map 

n/a 


— 


1 Blue Unit chg 

(1) 

Unit index 

— 


2 Blue Unit Deact 

(1) 

Unit Index 

— 


3 OPFOR Unit Chg 

(1) 

Unit Index 

— 


4 OPFOR Unit Deact 

(1) 

Unit Index 

— 


5 Cntrl Msr Chg 

(1) 

CM Index 

— 



(2) 

1 » Single Point 

— 



(2) 

2 » Multiple Point 

— 


6 cntrl Msr Del 

(1) 

CM Index 

— 



(2) 

1 « single Point 

— 



(2) 

2 * Multiple Point 

— 


7 obstacle Chg 

(1) 

Obs Index 

— 


8 Obstacle Del 

<D 

obs Index 

— 


9 oplan Chg 

n/a 


— 


10 New Work oplan 

n/a 



procedure UTM_MAP_BACKGROUND ( 

PANEL__ID : in SYS_WINDOW EXE ID; 

MAP_OPTION : in MAP_MAP_OPTIONS); 

— CPM description: Displays the digital map background image 


— formal parameters 


IN 

PANEL__ID 

The 

IN 

HAP OPTION 

The 


id of the digital map panel, 
initial map display options 


procedure UTM_HOVE_MAP ( 

~ PANEL_II 

pixel“x 


in SYS_WINDOW_ELE ID; 
in SYs“lMAGE_COLUMN; 


A-194 









PIXEL_Y : in SYS_IMAGE_ROW); 

— CPM description: changes the location of the displayed digital nap. 

— formal parameters 


■IN 

PANEL_ID 

The 

id of the 

■IN 

PIXEL_X 

The 

number of 

IN 

PIXEL_Y 

The 

number of 


digital map panel. 

pixels to move in the X direction 

pixels to move in the Y direction 


procedure UTM_OBSTACLE ( 


PANEL ID 


s 

in 

SYSJNXNDOW ELE ID; 

OBSTACLE COUNT 

s 

in 

SDBjOBSTACLE ID; 

OBSTACLE 

TABLE 

t 

in 

sdb”obstacle_point; 

OBSTACLE_OPTX ON: 

in 

OBS~OBSTACLZ OPTIONS) 


— CPM description: Displays all the obstacles on the digital map 


— formal parameters 


—IN 

PANEL_ID 

—IN 

OBSTACLE_COUNT 

—IN 

OBSTACLE_TABLE 

—IN 

OBSTACLE OPTION 




The id of the digital map panel. 

The number of obstacles in the obstacle table 
Array of records defining the obstacles. 

The default obstacle display options 


procedure UTM_OBSTACLE_CHG ( 


PANEL_ID 

: 

in 

SYS_HXNDOW ELE_ID; 

OBSTACLE_ID 

: 

in 

SDB~OBSTACLE ID; 

OBSTACLE_DESC 

i 

in 

SDB~OBSTACLE REC); 


— CPM description: change the display of an obstacle on the digital map 


— formal parameters 


IN 

PANEL_ID 

The id of the 

IN 

OBSTACLE_ID 

The id of the 

IN 

OBSTACLE_DESC 

Description of 


procedure utm_opfor_units < 


PANEL_XD I in 

UNIT_COUNT « in 

unit“loc_table i in 

UNIT - OPTION : in 


8TS_WINDOW_ELE_ID • 
SDB~OPFOR_UNIT _ ID; 

sdb“location_lxst POINT; 

UNIT_OPTIONS); 


— CPM description: 


Displays all the 


OPFOR units on the digital map 


— formal parameters 

—>IN PANEL_XD The id of the digital map panel. 


A-195 






—IN 

UNIT_COUNT 

The number of units in the unit location 

table 

—IN 

UNIT_LOC_TABLE 

Array of records defining the unit names. 

location 

— 


echelon and type. 


—IN 

UNIT_OPTION 

The default unit display options 

- 


procedure UTM_OPFOR_UNIT_CHG ( 


PAN Eli ID 

1 

in 

8TS WINDOW SLE ID 

UNIT ID 

: 

in 

8DB OPFOR__UNIT_ID 

UNIT~LOCATION 

: 

in 

SOB LOCATION REC) 


~ cpy description: changes the location of a opfor unit on the digital map 
— formal parameters 


—IN 

PANEL_ID 

The 

id 

of the digital map panel. 

—IN 

UNIT_ID 

The 

id 

of the changed unit 

—IN 

UNIT LOCATION 

New 

location of the unit 


procedure utm_resIZemappanel ( 


PANEL_ID 

• 

e 

in 

SYS WINDOW ELE_ID; 

PIXEL X 

: 

in 

SYS WINDOW COLUMN; 

PIXEL Y 

: 

in 

SYS WINDOW ROW; 

PIXELJWIDTH 

: 

in 

SYS WINDOW COLUMN; 

PIXEL_HEIGHT 

: 

in 

SYS - WINDOW ROW); 


— CPM description: changes the size and location of the digital map panel 

— formal parameters 


—IN 

PANEL_ID 

The id of the digital map panel. 


—IN 

PIXEL_X 

The window X coordinate of the upper left corner 
the digital map panel. 

of 

— IN 

PIXEL_Y 

The window Y coordinate of the upper left corner 
the digital map panel. 

of 

—IN 

PIXEL_WIDTH 

The width of the digital map panel in pixels. 


—IN 

PIXEL_HEIGHT 

The height of the digital map panel in pixels. 


end UTM_ 

TACTICAL_MAP; 




A-196 




—cpc package specification name: UUE_STATUS_REPORT 

—cpc description: UUE_STATUS_REPORT displays the unit status reports for the 
task organization tool. 


—cpc design notes: 

--cpc package author: Bruce Packard 

— Science Applications International corporation 

424 Delaware, Suita C3 
Leavenworth, KS S6048 

with SYSTEM PACKAGE; 
with SDB__SITUATION DB; 
with TSBJLOCATION; - 

package UUE_STATUS_REPORT is 

package TSBL is new TSB_LOCATXON(SDB_BLUE_TASK_RECORD); use TSBL; 

procedure UUE_DEFINE STATUS PXXMAF; 


use SYSTEM PACKAGE; 
use SDB SITUATION DB; 


— CPM description: Defines the pixmaps required for the graphic status 

—■ reports. This procedure should be call one time before 

— the status report tasks are called. 

— formal parameters 

— None 


— end formal parameters; 




task type UUE_DETAIL STATUS is 




entry INITIALIZE (UNIT_ID 

: 

in 

SDB UNIT; 

UNIT NAME 

t 

in 

STRING; 

OPPLAN_ID 

e 

e 

in 

SYS_OPPLAN; 

DATE_TIME 

J 

in 

SYS~DATE TIME; 

SOCKET 

s 

in 

SYS_CLIENT; 

PROCESS 

X 

in 

SYS_EDDIC_PROCESSES; 

WINDOW 

X 

out 

SYS~WINDOW_ELE_ID); 


— CPM description: This entry point creates a popup window to display 

— a unit detail status report in and gets the 

required data from the situation DB manager. 


— formal parameters 

—IN UNIT_ID Id of the unit to display the status report for. 

—IN UNIT_NAME Name the unit to display the status report for. 

—IN 0PPLAN_ID Id of the current OPPLAN. 

—IN date_tzme Date and time for the situation data requests. 

—IN SOCKET The number of the socket for the situation DB manager. 


A-197 






w 


—IN process The name of the parent process. 

—OUT window The ID of the newly created popup window. 

— end formal parameters; 

entry PROCESS_INPUT (NEW_WINDOW_INPUT » in SYS_WINDOW_INPUT; 

NEW~WINDOW~VAL0E , i n SYS~WINDOW_VALUE; 
NEW“wINDOW~DATA I in SYS _W IN D OW_DAT A ; 
WINDOW TERMINATED t out BOOLEAN); ~ 


— CPM description: This entry point processes and input that has 

happened for the popup window created by INITIALIZE. 

— This entry point should be called for all input 

-- from UWN that matches the window ID from INITIALIZE. 

The W!NDOW_TERMINATED flag is set to true if the 

— selected action causes the deletion of the popup 

window. 

— formal parameters 


—IN 

NEW_WINDOW_INPUT 

Input type (See UWN_WINDOW_SYST£M for a 
complete description). 

—IN 

NEW_WINDOW_VALUE 

Input value (See uwn_window_system for a 
complete description). 

—IN 

NEW_WINDOW_DATA 

Input data (See uwn_window_system for a 
complete description). 

—OUT 

WINDOW_TERMINATED 

Window Termination flag 

true - window was terminated 

false ■ Window was not terminated. 

— end 

formal parameters; 



entry TERMINATE_TASK; 

— CPM description: This entry point terminates popup status window. 


end; 

task type UUE SUMMARY STATUS is 


entry INITIALIZE 

(UNIT_DESC 

: 

in 

TREE RECORD PTR; 


OPPLAN ID 

s 

in 

SYS_OPPLAN; 


DATEJTIME 

t 

in 

SYS~DATE TIME; 


SOCKET 

s 

in 

SYS^CLIENT; 


PROCESS 

t 

in 

SYSJEDDIC PROCESSES; 


WINDOW 

s 

out 

SYS*"wiNDOW ELE ID); 

— CPM description: 

This entry point creates a popup window to display 

— 

a unit summary 

status 

report in and gets the 

—— 

required data 

from 

> the 

i situation DB manager. 


— formal parameters 


A-198 






—IN 

UNIT_DESC 

Description of the unit that the summary report was 
requested for. 

—IN 

OPPLAN_ID 

Id of the current OPFLAN. 

—IN 

DATE_TIME 

Date and time for the situation data requests. - 

—IN 

SOCKET 

The number of the socket for the situation DB manager. 

— 

PROCESS 

The name of the parent process. 

—OUT 

WINDOW 

The ID of the newly created popup window. 


— end formal parameters; 


entry PROCESS_INPUT (NEW_WINDOW_INPUT l in SYS_HINDOW_INPUT; 

NEW_WINDOW_VALUE S in SYS_WINDOW_VALUE; 
NEW~WIKDOW_DATA * in SYS_WINDOW_DATA; 
WINDOW_TERMINATED t out BOOLEAN); ~ 


— CPM description: This entry point processes and input that has 

— happened for the popup window created by initialize. 

This entry point should be called for all input 

— from uwn that matches the window ID from initialize. 

The WINDOW_TERMINATED flag is set to true if the 
selected action causes the deletion of the popup 
window. 

— formal parameters 


—IN 

NEW_WINDOW_INPUT 

Input type (See UWN_WINDOW_SYSTEM 
complete description). 

for a 

—IN 

NEW_WINDOW_VALUE 

Input value (See uwn_window_system for a 
complete descriptionY. 

—IN 

NEW_WINDOW_DATA 

Input data (See UWN_WINDOW_SYSTEM 
complete description). 

for a 

—OUT 

WINDOWJTERMINATED 

Window Termination flag 

true ■ window was terminated 

false - window was not terminated. 


— end 

formal parameters; 




entry TERMINATE_TASK; 

— CPM description: This entry point terminates popup status window. 


end; 

end UUE_STATUS REPORT; 


A-19 9 







—cpc package specification name: UUE_UNXT_EDITOR 

—cpc description: UUE_UNIT_EDITOR contains the low level unit display utilities 

— for determining what echelon and unit type symbol to display 

for a specific unit. 

—cpc design notes: 

This package raises the SYS_UUE_EXCEPTION when an exception is detected. 

—cpc package author: Bruce Packard 

Science Applications International Corporation 

— 424 Delaware, Suite C3 

Leavenworth, KS 66048 

With SYSTEMJPACKAGE; use SYSTEM__PACKAGE; 

with UNIT_SYSTEM; use UNIT_SYSTEM; 

With SDB_SITUATION__DB; use SDB__SITUATXON_DB; 

package tfUE_UNlT_EDiTOR is 

— unit Type to unit symbol font conversion table 

UNIT_SYMBOL_INDEX : Array (SDB_UHIT_TYPE'FIRST..SDB_UNIT_TYPE'LAST) of 

INTEGER :« “ 

(AIRBORNE -> 35, 

AXR_ASSAULT ■> 36, 

AIR_DEFENSE ■> 15, 

AIR_DEFE»SE_MISSLE -> 16, 

ANTI_ARMOR -> 18, 

ARMOR_CAV «> 20, 

ARMORJTANK »> 19, 

ARTY_TOWED -> 22, 

ARTY_SP »> 23, 

ATTACK_HELICOPTER -> 26, 

AVIATION -> 25, 

AVIATIONJTW «> 27, 

AVIATION~RW ■> 28, 

BAND -> 44, 

CAV_RECON -> 21, 

CHEMICAL » 29, 

CIVIL_AFPAIRS ■> 30, 

COMBXNED__ARM£ ARMY -> 31, 

ENGINEER - *"> 32, 

FINANCE *> 33, 

XNF_MECHANXZED -> 37, 

INF_MOTORIZED -> 38, 

MAINTENANCE -> 39, 

MEDICAL ■» 40, 

MILITARY__INTEL ■> 41, 

MILITARY~POLICE -> 43, 

ORDNANCE~*» 45, 

PERS_SVC •> 46, 

PSYCl OPNS -> 47, 

QUARTERMASTER -> 48, 

ROCXET_AP.TXLLERY » 24, 

SIGNAL ■> 49, 

SPECIAL_PORCES -> 51, 


A-200 






SPT COM -> 52, 

SUPPLY_SERVICES ■> 50, 

SURFJTO_SURF_MISSLE -> 17, 

TRANSPORTATION «> 53); 

— Echelon to echelon symbol font conversion table 
ECHELON_SYMBOL_INDEX : Array (SDB_FORCE ECHELON'FIRST.. 

SDB_FORCE ECHELON* LAST) of INTEGER :*■ 
(ARMY GROUP..FRONT -> 10, 

ARMY~-> 9, 

CORPS -> 8, 

DIVISION -> 7, 

BRIGADE -> 6, 

REGIMENT..GROUP -> 5, 

BATTALION..SQUADRON -> 4, 

COMPANY..TROOP -> 3, 

PLATOON -> 2, 

SECTION -> 1, 

SQUAD..TEAM » 0); 


procedure UUE_ECHELON_SYMBOL ( 


DISPLAY FLAG 

: 

in 

SIDEJTYPE 

: 

in 

ECHELON 

j 

in 

PIXEL_X 

* 

• 

in 

PIXEL Y 

: 

in 


BOOLEAN; 
SDB_SIDE_TYPE; 
SDB_FORCE_ECHELOK; 
SYS_IMAGE_COLUMN; 
SYS_IMAGE ROW); 


— CPM 

description: ] 

— formal parameters 

—IN 

DISPLAY_FLAG 

—IN 

SIDEJTYPE 

—IN 

ECHELON 

—IN 

PIXEL_X 

—IN 

PIXEL Y 


Flag to indicate if the symbol is begin drawn or 
erased. (True *» Draw; False ~ Erase) 

The side which the echelon symbol will be 
representing. 

The echelon. 

Digital map panel X coordinate where the upper left 
corner of the echelon symbol is to be displayed. 

Digital map panel Y coordinate where the upper left 
corner of the echelon is to be displayed. 


procedure UUE_UNIT_NAME ( 


DISPLAY_FLAG 

l 

in 

BOOLEAN; 

SIDEJTYPE 

: 

in 

SDB_SIDE_TYPE; 

NAME~ 

* 

in 

STRING; 

UNIT_LOCATION 

: 

in 

SDB_LOCATION_REC) 


— CPM description: Displays a unit name on the digital map. 

— formal parameters 


A-201 






— IN 

DISPLAY_FLAG 

Flag to indicate if the symbol is begin drawn or 

— 


erased. (True - Draw; False “ Erase) 

—IN 

SIDE_TYPE 

The side the unit symbol will be representing. 

—IN 

NAME 

The name of the unit. 

—IN 

UNIT_LOCATION 

Record of the unit's location. 


procedure UUE_STATUS BOX ( 

STATUS 1 in UNIT_STATUS_DATA); 

— CPM descriptiont Retrieves the unit type symbol for a specific unit type. 

— formal parameters 

—IN STATUS Unit data to display in the status box. 


procedure uue_unit_symbol ( 


DISPLAY_FLAG 

in 

BOOLEAN; 

SIDE TYPE 

in 

SDB SIDEJTYPE; 

UNIT TYPE 

in 

SDB UNIT_TYPE; 

UNIT_ECHELON 

in 

SDB FORCE_ECHELON 

UNIT_LOCATION 

in 

SDB LOCATIONREC) 


— cpm description: Displays a unit type symbol on the digital map. 


— formal parameters 


— IN 

DISPLAY_FLAG 

—IN 

SIDE_TYPE 

—IN 

UNITJTYPE 

—IN 

UNIT_ECHELON 

55 

H 

1 1 

1 1 

UNIT LOCATION 

end UUE_UNIT_EDITOR; 


Flag to indicate if the symbol is begin drawn or 
erased. (True * Draw; False ■ Erase) 

The side the unit symbol will be representing. 

Type of the unit symbol to be displayed. 

Echelon of the unit symbol to be displayed. 

Record of the unit's location. 


A-202 






UUX Utility Package Specifications 


The following package specifications are included in the Unix utility function 

UUX_IO 

UUX~UTIL 


A-203 




—CPC package specification name: 

UUX_IO 

—CPC description: 

uux_lo CPC is a set of input/output primitives, written in the "Ada“ 
programming language, which allow programs access to low level 
input/output. 

—CPC design notes: 

1. ) This package must be instantiated with its generic formal parameters. 

2. ) This package can raise the following exceptions: 

SYS_UUX_EXCEPTION. 

—cpc package author: 

Bruce J. Packard 

Science Applications International Corporation (SAXC) 

424 Delaware, Suite c-3 

Leavenworth, Ks 66048 (913) 651-7925 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

generic 


— Types of buffers that can be used by the UUX I/O utilities. 

type UUX_IO_BUFFER is private; 

type UUX_IO_POINTER is access UUX_IO_BUFFER; 

package UUX_IO is 


— Input/output parameters. 

type UUX_IO_OPERATION is range 0..2; 

for UUX_IO_OPERATION'SIZE use SYS_BITS_IN_BYTE; 

type UUX_lo~FORMAT is range o7. 1; 

for UUX_IO~FORMAT'SIZE use SYS_BITS INJ8YTE; 

UUX_IO_READ I UUX_IO~OPERATION 

UUX_IO_WRITE : UUX_IO OPERATION 

UUX_IO_APPEND : UUX_IO~OPERATION 

UUX_IO_FIXED : UUX 10 FORMAT 

UUX 10 VARIABLE : UUX ZO FORMAT 


0 ; 

l; 

2 ; 

0 ; 

i; 


— *!#**#*#<##########*#-* <#«##<*###*####*«###t#*f##«<#*####*##**######*###*»* 


procedure UUX_BINARY_READ (FILE_DESC : in 

OFFSET : in 
RECORD_LENGTH : in 
FORMAT - : in 
BUFFER : in 


SYS_FILE_DESC; 
SYS - DB SIZE; 
SYS - DB — SIZE; 
UUX — IO — FORMAT; 
UUX~IO~POINTER); 


—CPM description: 

— This module performs a binary (unformatted) read on a specific record 

— of the specified file, which was opened by UUX_OPEN__FlLE. 

—CPM design notes: 

— 1.) None. 


—formal parameters 


A-204 








-IN 

FILE_DESC 

-IN 

OFFSET 

-IN 

R£CORD_LENGTH 

-IN 

FORMAT** 

-OUT 

BUFFER 

-end 

formal parameters 


A pointer to the file descriptor returned from 
UUX_OPEN_FILE. 

The offset from the beginning of the file (Starts 
at one). For fixed length record files the offset 
units are records. For variable length record 
files the offset units are bytes. 

Number of bytes in this record to be read. 

File format. 

0 - Fixed length records. 

1 - variable length records. 

Pointer to the Buffer that was read. 


<#ii#»**t*#**#*##**#»#<#l#*#*#«l##*****fH#*##*****###**#**«*#*#***#<##<tt# 


procedure uux_binary_write (FILE_DESC : in 

OFFSET : in 
RECORD_LENGTH * in 
FORMAT : in 
BUFFER : in 


SYS_FILE_DESC; 

SYS_DB_SIZE; 

SYS DB SIZE; 
UUX~IO~FORMAT; 
UUX IO _ POINTER); 


—CPM descriptions 

This module performs a binary (unformatted) write on a specific record 


— 

of the specified 

file, which was opened by UUX_open_file. 

—CPM design notes: 



— 

1.) None. 



—formal parameters 



—IN 

FILE_DESC 

- 

A pointer to the file descriptor returned from 

— 



UUX_OPEN_FILE. 

—IN 

OFFSET 

- 

The offset from the beginning of the file (Starts 

— 



at one). For fixed length record files the offset 

— 



units are records. For variable length record 

— 



files the offset units are bytes. 

—IN 

RECORD_ZjENGTH 

- 

Number of bytes in this record to be written. 

—IN 

FORMAT 

- 

File format. 

— 


as 

0 - Fixed length records. 

— 


» 

1 - Variable length records. 

—IN 

BUFFER 

- 

Pointer to the Buffer to write to. 


—end formal parameters; 

####**##*#####«»*####«###»#####»»»»»#»##«#*####*#»#*##***#*##############«# 

procedure UUX_CLOSE_FILE (FILE_DESC s in SYS_FILE_DESC); 

—CPM description: 

This module closes a file opened by UUX_OPEN_FILE. 

—CPM design notes: 

1.) None. 

—formal parameters 

—IN FILE__DESC - A pointer to the file descriptor returned from 

~ UUX_OPEN_FILE. 

—end formal parameters; ~ 

**#f#####*########*«###*#*####*<#*4#######f######**####*####*#*#*i##«#*»#f* 


A-205 





procedure UUX_OPEN_FILE (FILE_NAME : in STRING? 

FILE_OPERATION : in UUX_IO_OPERATION; 

FILE_DESC l out SYS_FILE_DESC)? 

—CPM description: 

This module opens a file for the performing of binary reads and writes. 

—CPM design notes: 

— 1.) None. 

—formal parameters 
—IN FILE_NAME 

—IN FILE OPERATION 


—OUT FILE_DESC 

—end formal parameters; 

end UUX io? 


- The name of the file to be opened. 

- A flag that tells which Mode to open the file. 
= 0 - Read only. 

* 1 - Read, write, and create if needed. 

«* 2 - Append. 

- File descriptor assigned to the open file. 


A-206 







—CPC package specification names 
UUX_UTIL 

—CPC descriptions 

uux_UTIL CPC is a set of utility primitives, written in the "Ada" 
programming language, which allow programs to access UNIX operating 
— system commands. 

—CPC design notes: 

1.) This package can raise the following exceptions: 
SYSJJUXJEXCEPTION. 

—CPC package authors 
Bruce J. Packard 

science Applications International Corporation (SAXC) 

424 Delaware, Suite C-3 

Leavenworth, KS 66048 (913) 651-7925 


with SYSTEMJPACKAGE; use SYSTEM_PACKAGE; 

package UUX_UTIL is 

— fffffffffffffffffffffffffffffffffffffffffffffffffiitiffffffffffffffffffffff 

procedure uux_getenv (ENV_STRING : in string; 

RESULT_STRING : in out string); 


—CPM description: 

— This module searches the Unix Environment list and returns (Gets) the 

— evaluated, requested string. 

—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN env_string - The string that was created by a setenv. 

—OUT result_string - The evaluated Environment string. 

—end formal parameters; 

-- »ffffffffffffffff*fifffiffiffffffffffffff«f«i#fff«fffffffff«##fffIff#fiffff 

procedure UUX_SETENV (ENV_STRING : in string; 

VALUE_STRING : in string); 

—CPM description: 

— This module sets a Unix Environment variable to the requested string. 

—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN ENV_8TRING - The environment variable string name. 

—IN VALUE_STRING - The value to set the environment variable to. 

—end formal parameters; 

— fiffffffffffffffffffffffffffffffffffffffffffffffiffffffffffffffffffffffffff 

procedure OUX_system (CMD_string : in string); 


A-207 







—CPM description: 

This nodule executes a Unix systen call. 

—CPM design notes: 

1.) None. 

—formal parameters 

—IN CMD_STRING - command string to execute in the UNIX environment. 

—end formal parameters; 

~ ##**#i#****#*****##*f****»#*****#**#*****#*#«###*#***#**#*******##**#**«##* 

procedure UUX_WAIT (SECONDS_TO_WAIT • in SYS_DEIAY; 

SECONDS_WAITED J in out SYSJDBLAY); 

—CPM description: 

— This module suspends a process for a specified period of time. 

—CPM design notes: 

1.) None. 

—formal parameters 

—IN SECONDS_TO_WAIT - The number of seconds to suspend the process. 

—OUT SECONDS_WAlTED - The number of seconds actually suspend. 

—end formal parameters; 

end UUX_UTIL; 


A-208 





UWNUtility Package specifications 


The following package specifications are included in the windowing system 
function: 


DML_DSPL_MENU_LAYOUT 
UWN WALKING_MENU 
UWn”WINDOW SYSTEM 


A-209 





—CPC package specification name: 

DHL_DSPL_MENU_LAYOUT 

—CPC description* 

DML_DSPL_MENU_LAYOUT CPC is the Display Menu Layout, written in the "Ada“ 
programming language, which defines the variables and variable types 
needed to draw walking and/or multiple selection menus hierarchy, 
graphically. 

—CPC design notes: 

— 1.) This package can raise the following exceptions: 

SYS UWN EXCEPTION. 


—CPC package author: 

Richard T. Zarse 30 Mar 1989 

Science Applications international corporation (SAIC) 

424 Delaware, Suite C-3 

Leavenworth, KS 66048 (913) 651-7925 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

with TSB LOCATION; 


package DML_DSPL_MENU_LAYOUT is 


task type DML_DSPL_MENU LAYOUT TASK is 


— ***##*#**#*#«**<tf#***#******##**###*###««***t#**#****#**#**t#**»****#**#** 


entry DSPL_INIT_MENU 


FILENAME 

: 

in 

FILENAMELEN 

: 

in 

UPPERLEFT 

• 

e 

in 

MAXWINSIZE 

: 

in 

FONTID 

: 

in 

FONTWIDTH 

: 

in 

FONTHEIGHT 

: 

in 

LUTCOLOR 

2 

in 

PLANEMASK 

• 

• 

in 

WINDOW_ID 

e 

• 

out 

SUBWINDOW ID 

: 

out 


SYSTEXTPTR; 
SYS_ENV_STRING; 
SYS_WINDOW_LOCATION; 
SYS_WINDOW_LOCATION; 
SYS_WINDOW~ELE_ID; 
SYS_WINDOW~COLUMN; 

SYS_WINDOWJROW; 
SYS_COLOR;~ 
SYS_COLOR_MASK; 
SYS_WINDOW ELE_ID; 
SYS_WINDOWJELE_ID); 


—CPM description: 

This entry point creates a popup window which Displays the initial 
chosen Menu. 


—CPM design notes: 
— 1.) None. 


—formal 
--IN 

parameters 

FILENAME 

- The Name of the menu File which is 

to be 

—IN 

FILENAMELEN 

displayed. 

- The actual Length (number of characters) of the 

— IN 

UPPERLEFT 

File Name. 

- The structure containing the Upper 

Left, X k Y 

—IN 

MAXWINSIZE 

location of the displaying window. 
- The Maximum allowable Size, X t Y, 

of the 

—IN 

FONTID 

displaying Window. 

- The Id of the display Font. 



A-210 







fontwidth - The Width of an element in the Font. 

FOMTHEZGHT - The Height of an element in the Font. 

LUTCOLOR - An index into the Color lookup Table for 
displaying and drawing the menu. 

PLANEMASK - a bitmap Mask of the Planes to be affected in 
displaying and drawing the menu. 

WXNDOW_ID - The Xd of the newly created popup Window. 

SUBWINDOW_lD - The Xd of the Subwindow inside the popup window, 
where the picture is actually displayed. 


WINDOW XD 


—end formal parameters; 


*****#**##**##**#*#***###**#**#######i#«**##«»##*###«#*#<##«**#**#*»**##*** 

entry PROCESS_INPUT (WINDOW INPUT I in SYS_WINDOW_INPUT; 

WINDOW - VALUE I in SYS_WXNDOW_VALUE; 

WINDOW - DATA : in SYS_WXNDOWJDATA; 

WINDOW_TERMINATED t Out BOOLEAN); ~ 

—CPM description: 

This entry point Processes any Input that has happened in/to the 
— popup window. This entry point will be called for all input from 
UWN that matches the window ZD. 

—CPM design notes: 

1.) Nona. 


—formal parameters 


—OUT 


window_input - The type of Input. 

window_value - The value of the input. 
window_data - The input Data. 

(See UWN_window_SYSTEM for a complete description of these 3). 
windowjterminated - window Termination flag 

« true - Window was terminated 
- false - Window was not terminated. 


—end formal parameters; 

- ****#******##*#*##**#**#**#***«*#*#*#•****##***#**#**I#*####*###*#*##*####* 

entry TERMINATE_TASK; 

—CPM description: 

— This entry point Terminates the display menu window. 

—CPM design notes: 

— 1.) None. 

—formal parameters 
None. 

—end formal parameters; 
end DML_DSPL_MENU_LAYOUT_TASK; 


end DML_DSPL_MENU_LAYOUT; 


A-211 







—cpc package specification name: UWN_WALKING_HENU 
—cpc description: EDDIC Walking menu utilities. 

—cpc design notes: 

This package raises the SYS_UWN_EXCEPTXON when an exception is detected. 
—cpc package author: Bruce Packard 

— Science Applications international Corporation 

424 Delaware, Suite C3 
Leavenworth, KS 66048 

with SYSTEM_PACKAGE; use SYSTEM PACKAGE; 

with UWN_WINDOW_SYSTEM; use UWN_WINDOW_SYSTEM; 

with UED_LIST; 

generic 


type UWN_ASSOCIATED_TYPE is (<>); 

type UWN_ASSOCIAT£D_ARRAY is array (SYS WALKING CELL range <>) of 
UWN_ASSOCIATED_TYPE; 

type UWN_ASSOCIATED_POINTER is access UWN ASSOCIATED ARRAY; 


package UWN_WALKING_MENU is 


— Types for multiple selection menus defined in the walking menu 
type UWN_MULTIPLE_MENU is 


record 

MENU_OPTION : 

MENU_TEXT : 

KENU_ON_OPTION : 
HENU_OFF_OPTION : 
end record; 


UWN_ASSOCIATED TYPE; 
STRING <SYS_POP_UP_TEXT); 
UWNAS S OCIATZD_TTPE; 

UWN ASSOCIATED TYPE; 


package UWN_MULT is new UED_LIST (UWN_MULTIPLE_MENU); 

type uwn_associated_LIST is” array (SYS_MENU BUTTON_lNDEX range <>) of 

uwn_assocxated_type7 

type uwn_associated_list_ptr is access UWN associated LIST; 


procedure UWN_BUILD_WALKING_MENU ( 


TREE ELE COUNT : 

in 

SYS MENU_TREE LIMIT; 

MENU TREE : 

in 

S YS_MENU~TREE_PTR; 

ASSOCIATED TABLE : 

in 

UWN_ASSOCIATED_POINTER; 

MENU_START~ : 

in 

SYS POP UP START PTR; 

MENU LENGTH : 

in 

SYS_POP_UP_LENGTH_PTR; 

POP_UP TEXT I 

in 

sys_menu_text_ptr7 

POP~UP~CHILD | 

in 

SYS_POP_UP CHILD PTR; 

SORT_ASSOCIATED : 

in 

UWN_ASSOCIATED POINTER) 


— CPM description: Builds the walking menu structures from a string array 

— of the menu tree structure. Each branch should be 

— indented one character from its parent. This procedure 

— also builds an associated table of ids so that an id 

— can be assigned to each menu element. 

— formal parameters 

—IN TREE ELE COUNT The number of entries in the menu tree structure. 


A-212 





—IN MENU_TREE String array of the menu tree structure. Each branch 

must be indented one character from its parent The 
— first menu item should start in column 3. 

—IN ASSOCIATED_TABLE A table of ids to be associated vith each menu 

element 


—INOUT MENU START 


Index into TEXT_ARRAY for the start of each pop-up 
menu in the walking menu. 


—INOUT MENU_LENGTH Number of cells in each pop-up menu 

—OUT POP_UP_TEXT Text for each cell of each pop-up menu in the 

— walking menu 


—OUT P0P_UP_CHILD Pop-up index of the pop-up menu that is the child 

— of each pop-up menu cell index into START_ARRAY 

and LENGTB_ARRAY; 

—OUT SORT_ASSOCiATED Table of ids associated with each element in 

— popup text array. 

— end formal parameters; 


procedure UWN_BUILD_MULTIPLE ( 


MENU NAME 

t in 

SYS TEXT PTR; 

MENU COUNT 

; in 

SYS MENU BUTTON INDEX; 

MENU 

; out 

UWN BUTTON MENU PTR; 

ON ACTIONS 

t out 

UWN ASSOCIATED LIST PTR; 

OFF ACTIONS 

t out 

UWN_ASSOCIATED LIST PTR); 


— CPM description< Uses the list created by UWN_READ_WALKING_HENU to load 

a multiple selection menu record. 


— formal parameters 


-IN 

MENU_NAME 

The 

name to put in the 

menu title bar. 

-IN 

MENU_COUNT 

The 

number of items in 

the multiple selection menu 

-OUT 

MENU 

The 

description of the 

multiple selection menu. 

-OUT 

ON_ACTI0NS 

The 

options to perform 

for on selections. 

-OUT 

OFF_ACTIONS 

The 

options to perform 

for off selections. 


— end formal parameters; 

function UWN_MENU_COUNT return SYS_KENU_BUTTON_INDEX; 

— CPM description; Uses the list created by uwn_read_walking_menu to 

— determine the number of elements In a multiple selection 

— menu. 


procedure UWN_READ_WALKING_MENU ( 
" “ FILE NAME 


f 


s 


in 


STRING; 







TREE_ELE_COUNT 

: 

out 

SYS_MENU_TREE_LIMIT; 

MENU_TREE 

s 

in 

SYS~MENU_TREE_PTR; 

ASSOCXATED_TABLE 

t 

in 

UWN~ASSOCIATED_POINTER )> 


— CPM description: Reads a walking menu structure from a ASCII file. 

The text that ia to appear in the menu must start in 

— column 3 and each submenu selection must be indented 1 

— column. The associated variable must start in column 35. 


— formal parameters 


—IN 

FILE_NAKE 

The name of the menu description file. 

—OUT 

TREE_ELE_C OUNT 

The number of entries in the menu tree structure. 

—OUT 

MENU_TR£E 

string array of the menu tree structure. Each branch 
must be indented one character from its parent The 
first menu item should start in column 3. 

—OUT 

ASSOCIATED_TABLE 

A table of ids to be associated with each menu 
element 

— end 

formal parameters 

i 

end UWN_WALKING_MENU; 



A-214 






—cpc package specification name: UWN_WINDOW_SYSTEM 

—cpc description: UWN_W!NDOW_SYSTEM is the Ada version of the EDDic window 
utilities using the x-window protocol. This package is 
an intermediate level between the applications software 
and the c based utilities (CWN); 


—cpc design notes: 


—cpc package author: Bruce Packard 

Science Applications International Corporation 

— 424 Delaware, Suite C3 

— Leavenworth, KS 66048 


With SYSTEM; use SYSTEM; 

with SYSTEMJPACKAGE; use SYSTEMJPACKAGE; 


package uwn_window_SYSTEM is 


— array of allowed buttons and allowed button actions 

type UWN_BUTTON_ALLOWED is array (SYS_BUTTON_COUNT) of BOOLEAN; 
type UWN_BUTTON_ACTION is array (SYS_ACTION_COUNT) of BOOLEAN; 

— types for use in the button menu manager 


subtype UWN_MENU_OPERATIONS is SYS_MENU_BUTTON_INDEX 
— where each index is: 


UWNJEXITJMENU 
UWN_CANCEL_MENU 
UWN_SET_ALL_MENU 
UWN CLEAR ALL MENU 


constant UWN_MENU_OPERATiONS 
constant UWN_menu_operations 
constant uwn_menu~operations 
constant UWN MENU OPERATIONS 


range 

:«= 0; 
:« 1 ; 
:« 2 ; 
3; 


0 


3; 


— window mapping constants. 

UWN_MAP : constant BOOLEAN :» True; 

UWN_DONT_MAP : constant BOOLEAN :« False; 


type UWN_MENU_OPERATIONS_ARRAY is array (UWN_MENU_OPERATIONS) of Boolean; 
type UWN~MENU_OPERATIONS_PTR is access UWN_MENU_OPERATIONS_ARRAY; 


type UWN_MENU_BUTTON_TYPES is (CHECKBOX_BUTTON, RADIOBUTTON); 


type uWN_Button_Menu_Record (ButtonjType : UWN_MENU_BUTTON_TYPES) is 
record 


Header : 
Total t 
Columns : 
Vis_Rows » 
Labels: 
Operations: 


SYS_TEXT_PTR; 
SYS~MENU~BUTTON INDEX; 

SYS~MENU_BUTTON~INDEX; 

S YS~MENU_BUTTON_INDEX; 

SYS ~ME N U~B U TT ON_LAB EL_PTR; 
UWN~MENU~OPERATIONS PTR; 


case Button_Type is 

When CHECKBOX_BUTTON •> 

Status: ~ SYS_MENU__BUTTON STATUS_PTR; 

When RADIOBUTTON -> ~ 

Default_RadioButton : SYS_MENU_BUTTON_lNDEX; 
end case; “ 


end record; 


A-215 






type UWN_BUTTON_M£NU_PTR is access UWN_Button_Menu_Record; 

type UWN_BUTTON_MENU_OUTPUT is (DONE, CANCEL, NO_ACTION_REQUIRED); 

type UWN_RECTANGLE_ARRAY is array (SYS_MENU_BUTTON_INDEX range <>) of 
SYS_RECTANGLE; 

type UWN_RECTANGLE_ARRAY_PTR is access UWN_RECTANGLE_ARRAY; 


procedure UWN_ACTIVATE_EDITOR (EDITOR_IDJ in SYS_WINDOW_ELE_ID); 

— CPM descriptions This routine activates an existing editor. It is 

— provided basically for traversing from a string field 

— or numeric field to an editor. 


— formal parameters 

—IN EDITOR_ID The id of the editor to activate. 

— end formal parameters; 


procedure UWN_ACTIVATE_MENU (MENU_STRUCT_IDs 

MENU_INDEX: 
WINDOW_TYPE: 
WINDOW ID: 


in SYS_WINDOW_ELE_ID; 
in SYS_WALKING_CELL; 
in SYS_WINDOW_TYPE; 
in SYS WINDOW ELE_ID); 


— CPM description: This routine activates an already defined popup menu for 

either: 

a. A defined window, 

b. a displayed panel (via cwn_end_panel), 

c. or, a defined button (via cwn_define_button). 

— It also specifies the mode for posting the menu. 

— formal parameters 

—IN MENU_STRUCT_ID The id of the menu structure given by the 

application at the time of the menu definition. 


—IN MENU INDEX 


—IN WINDOW TYPE 


The index into the Text_Array of the submenu to 
be activated for a particular window, if applicable. 
If the menu to be activated is not a walking menu, 
or is the top level of a walking menu, then this 
parameter should be set to NULL. 

The type of window the menu will be activated for, 
where < 

SYS WINDOW ■ a defined window 

SYS_DISPLAY_PANEL - a displayed panel 
SYS~DEFXNED BUTTON - defined button 


—IN WIND0W_ID The id given at the time of the window type's 

— creation where: 

— If window type is SYS_WIND0W and window_id is 0, 

— then the menu will be activated for the Rootwindow 

or (Display), otherwise, the menu will b« activated 

— for the matching window_id. 


A-216 





If windov_type - SYS_DISPLAY_PANEL, the id should 
be the panel id. 

If window_type - SYS_DEFINED_BUTTON, the id should 
be the button id. 

— end formal parameters; 


procedure UWN_ACTIVATE_NUMBER_FIELD ( 

NUMBER_FIELD_ID: in SYS_WINDOWJELE_ID); 

— CPM description: This routine activates an existing number field. It is 

provided basically for traversing from one number field 

— to another. 


— formal parameters 

—IN number_field_id The id of the numeric field to move to. 

— end formal parameters; 


procedure uwn_activate_string_field < 

STRING_FIELD_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: This routine activates an existing string field. It is 

— provided basically for traversing from one string field 

— to another. 


— formal parameters 

—IN string_field_id The id of the string field to move to. 

— end formal parameters; 


procedure uwn_add_input_socket (SOCKET_ID: in SYS_CLIENT); 


— CPM description: UWN_ADD_lNPUT_SOCKET adds a socket id to be watched by 

uwn_input. When a message is received on this socket, 
UWN_INPUT returns type SYS_INPUT_HESSAGE along with the 
socket ID. The applications software is responsible for 
reading the message. 


— formal parameters 

—IN SOCKET_ID 

— end formal parameters; 


ID of the socket 

to 

watch 

for input. 

! INPUT (INPUT TYPE 

> 

in SYS_WINDOW_INPUT; 

MENU_WINDOW_ID 

: 

in 

SYS_WINDOW_ELE_ID; 

INPUT_VALUE 

i 

in 

S YS_WINDOW_VALUE; 

INPUT~DATA 

: 

in 

SYS_HINDOW~DATA; 

SELECTION_STATUS: 

out 

UWN_BUTTON~MENU OUTPUT); 


— CPM description: 


UWN_BUTTON_HENU_INPUT processes input performed 
within a button menu. 


— formal parameters 


A-217 




—IN 


INPUT_TYPE 
—IN MENU_WINDOW_ID 

—IN INPUT_VALUE 

— IN INPUT DATA 


Type of input returned from the window system 

The id of the menu window which received input. 

The value of the input that accompanies the type 

The value of the data that accompanies the type 
and input values, if appropriate. 


—out selection_status Indicates status of user's selection process. 

= CANCEL if user opted to cancel selection 
= EXIT if user exited selection process where 
the selection or selections made of the button 
menu will be reflected in the input status 
buffer or dafault_radiobutton, appropriately. 

* NO_ACTION_REQUIRED if user simply selected 
on button or scrollbar. 


— end formal parameters; 


procedure UWN_CHANGE_BUTTON_LABEL (BUTTON_ID: 

BUTTON TEXT: 


in SYS_WINDOW_ELE_ID; 

in string); 


— CPM description: uwn_change_BUTTON_LABEL changes the text displayed inside 

a button created with UWN_DEFINE_BUTTON. 

— formal parameters 

—IN button_id ID attached to the button. 

—IN BUTTON__TEXT Textual string to display in the button. 

— end formal parameters; 


procedure UWN_CHANGE_CHECKBOX_STATES (Checkbox_ID: in SYS_WINDOW_ELE_ID; 

NumJFields: in SYS_MENU_BUTTON_INDEX; 

start_lndex: in SYS_MENU~BUTTON_INDEX; 

Status_Array: in out SYS_MENU_BUTTON_STATUS_PTR; 

State_Flag: in BOOLEAN); 


— CPM description: 


CWN_CHANGE_CHECKBOX_STATES changes one or more 
checkbox states according to the input state flag. 


— formal parameters 
—IN checkbox_ID 

—IN Num_Fields 

—IN start_lndex 

—IN Status_Array 


The ID attached to the checkbox editor. 

The number of checkboxes) states to be changed. 

The correlating index of the checkbox which the 
start of the array to the order the items were 
originally created; the first element is always 
zero. 

The array of current status of the checkboxes to 
be changed. 


A-218 







—IN state_Flag The flag indicating the state all the checkboxes 

are to natch. 

— end formal parameters; 


procedure uwn_change_EDITOR_text (EDlTOR_ID: 

MAX_BUFFER_SIZE: 
TEXT_BUFFER: 
BUFFER SIZE! 


in SYS_WINDOW_ELE_ID; 

in SYS PRODUCT_LENGTH; 

in sys“text_ptr; 

in SYS PRODUCT LENGTH) 


— CPM description: changes the text buffer used by the window full page 

text editor. 


— formal parameters 


—IN 

EDITOR_ID 

ID attached to the editor. 

— IN 

MAX_BUFFER_SIZE 

Maximum number of pixels that the TEXT_BUFFER 
can hold. 

—IN 

text_buffer 

Buffer of the initial text to display in the editor 

— IN 

— end 

BUFFER_SIZE 
formal parameters 

The number of pixels in text_buffer. 

I 


procedure uwn_change_icon_labeL (ICON_LABEL: in sys_icon_name); 

— CPM description: UWN_CHANGE_ICON_LABEL changes the icon label displayed 

— in the window's icon. 

— formal parameters 

—IN ICONJLABEL Textual string to display in the icon. 

— end formal parameters; 


procedure uwn_change_scrollbar (scrollbar ID: in 

DOC_SIZE:~ in 
PIXEL_LENGTH: in 
D!SP_POSITION: in 
SCROLL INTRVL: in 


SYS_WINDOW_ELE_ID; 
SYS PIXEL; 

SYS_WINDOW_PIXEL; 
SYS_PIXEL; 
SYS _ WINDOW_PIXEL); 


— CPM description: changes the size of a scrollbar. 

— formal parameters 


—IN 

SCROLLBARJCD 

ID to attached to the scrollbar. 

This ID was defined by UWN_DEFINE_SCROLLBAR. 

—IN 

DOC_SIZE 

The number of lines in the document buffer. 

—IN 

PIXEL_LENGTH 

The number of pixels to be occupied by the 
scrollbar. 

—IN 

SCROLL_INTRVL 

The number of pixels the work will be scrolled 


A-219 




— whenever the user selects an arrow button. Note: 

— The work will not be scrolled by these utilities 

but, this argument is required to calculate 

the interactive slidepositioning. 

— end formal parameters; 


procedure UWN_CHANGE WINDOW LABEL {WINDOW_LABEL: in SYS_WINDOW_NAME; 

LABEL POSITION: in SYS_TEXT_ALIGNM£NT); 


— CPM description: UWN_CHANGE_W!NDOW_LABEL changes the window label 

displayed in the window's top border. 


— formal parameters 

—IN wiNDOW_LABEL Textual string to display. 

—IN LABEL_POSITION The position of the window label in the title 

— bar to be changed. A position of NONE will result 

in a change to the center window label. 

— end formal parameters; 


procedure UWN_CLEAR_WlNDOW; 


— CPM description: Erases all elements of a defined window. 

— formal parameters 

— None 

— end formal parameters; 


procedure uwn_close_window; 

— CPM description: This procedure closes a window into an icon. 

— formal parameters 

— NONE 

— end formal parameters; 


procedure UWN_CREATE_EXPOSURE_EVENT (WIND0W_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: This procedure creates an exposure event for a 

particular window. 


— formal parameters 

—IN window_id The ID attached to the window. 

— end formal parameters; 


procedure UWN_CREATE_EXPOSURE_EVENT <WINDOW_ID: in 

UL X: in 
UL~Y: in 
EXP WIDTH: in 
EXP~*HEIGHT: in 


SYS_WINDOW_ELE_ID; 
SYS~WINDOW_COLUMN; 
SYS~WINDOW~ROW; 

SYS~WINDOw“cOLUMN; 
SYS~WINDOW~ROW); 


A-220 





— CPM description: This procedure creates an exposure event for a 

particular window. 


— formal parameters 

—IN window_id The Id of the Window to expose. 

—IN UL_X m The Upper Left X corner of the area to expose. 

—IN UL_Y “ The Upper Left Y corner of the area to expose. 

—in exp_width - The width of the area to Expose. 

—IN expjqeight “ The Height of the area to Expose. 

— end formal parameters; 


procedure UWN_CREATE_SUBWINDOW (WINDOW__XD: in 

MAP_WINDOW: in 

PIXEL COL: in 

PIXELJKOWl in 

PIXEL_WIDTH: in 

PIXEL_HEIGHTl in 

BORDERJWIDTH: in 

SUBWINDOW ID: out 


SYS_WINDOW_ELE_ID; 
BOOLEAN; 

SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
8YS_WINDOW_COLUMN; 
SYS_WINDOW_COLUHN; 
SYS_WINDOW_COLUMN; 
SYS WINDOW_ELE_ID); 


— CPM description: This procedure creates a subwindow to the window 

specified by the user. All input selected for the parent 
window will be effective for the subwindow also, unless 
other input is selected or another menu activated 
specifically for this window. 


— formal parameters 
—IN WINDOWJCD 

—IN MAP_WINDOW 

—IN PIXEL_COL 

—IN PIXEL_ROW 

—IN PIXEL WIDTH 


The id of the parent window. 

Logical indicating whether window should be mapped. 

Column number frost within the window where the left 
side of the subwindow shall be placed. Column 0 is 
at the left of the window. 

Row number from within the window where the top side 
of the subwindow shall be placed. Row 0 is at the 
top of the window. 

The number of pixels to be occupied by the 
subwindow's width. 


—IN PIXEL_HEIGHT The number cf pixels to be occupied by the 

— subwindow's height. 

—IN B0RDER_WIDTH The width of the border in pixels. If the border 

— width is zero, the subwindow will not have a border. 


—OUT 8UBWINDOW_ID 

— end formal parameters; 


The id of the subwindow as given by the X window 
system. 


procedure UWN_CREATE_WINDOW (WINDOM_ID: out SYS_WINDOW ELE ID; 


A-221 







WINDOWJLABEL i 

in 

string; 

MAP_WINDOW t 

in 

BOOLEAN; 

ICON TYPE: 

in 

SYS ICON; 

icon“stack_indx: 

out 

SYS~ICON_STACK; 

ICON_IDt 

out 

SYS~WINDOW_ELE ID) 


— CPM description: Creates a basic window skeleton with border, title, icon 

and frame popup menu attached, only one window per 
process. 


— formal parameters 
—OUT WINDOW_ID 

—IN WINDOW_LABEL 

—IN MAP WINDOW 


—IN ICON TYPE 


The id given the window. 

Textual string to be displayed in the window border. 

Boolean indicating whether window should be mapped 
(Made visible upon creation). Xf the application 
wishes the window to be in iconic form, it should 
then call UWN_CLOSE_WINDOW. Otherwise, when the 
application wishes to map the window or make it 
visible, it should call UWN_MAP_window. 

Identifies the icon stack that the new window is 
assigned to. 0 - Reference Icon 

1 «* view c a c icon 

2 ” Process Messages icon 

3 “ Build CtC Icon 

4 ■ Decision Aids icon 

5 « Experiment Control icon 


—OUT 

—OUT 


ICON_stack_indx position in the Icon stack of the newly created 
window (1 - 7); 

ICon_id The id given the icon window. 


— end formal parameters; 


procedure UWN_DEACTIVATE_MENU (MENU_STRUCT_ID: in SYS_WINDOW_ELE_ID; 

MENU_INDEXl in SYS_WALKING_CEIX) ; 

— CPM description: This routine deactivates an already defined popup menu. 

— formal parameters 


IN 

MENU_STRUCT_ID 

The id of the menu structure given by the 
application at the time of the menu definition. 

IN 

MENU_INDEX 

The index into the Start_Array of the submenu to 
be activated for a particular window. 



If the menu to be activated is not a walking menu 
or is the top level of a walking menu, then this 
parameter should be set to NULL. 


— end formal parameters; 


procedure UWN_DEPINE_BUTTON <BUTTON_ID! out SYS_WINDOW_ELE_ID; 


A-222 







WINDOW_IDl 

in 

ENABLE_FLAG: 

rn 

PIXEL COL: 

in 

PIXEL~ROW: 

in 

PIXEL_WIDTH: 

in 

PIXEL_BEXGBT: 

in 

BUTTON TEXT: 

in 


SYS_WINDOW_ELE_ID 
BOOLEAN; ” 
SYS_WINDOW_COLUMN 
SYS~WINDOW~ROW; 
SYS~WINDOW~COLUMN 
SYS~WINDOW~ROW; . 

string); " 


— CPH description: Defines a button on top portion of a window, once a 

— button has been defined, only other buttons may be placed 

beside it. All other structures must be placed below 
the buttons. These buttons are used mostly for initiating 

— a walking menu (see UWN_ACTIVATE_MENU). 


— formal parameters 
—OUT BUTTON_ID 

—IN WINDOW_ID 

—IN ENABLE FLAG 


-IN PIXEL COL 


ID attached to the defined button. This 

ZD is required for all interactions with the button. 

The ID of the window to attach the button to. 

Logical flag to indicate if the button should be 
backlight when it is selected and the button ID will 
be returned to the application. The disabled mode is 
used to display a walking menu when the button is 
selected. 

true - ENABLED 
false - DISABLED 

Column number from within the window where the left 
side of the button shall be placed. Column 0 is at 
left of the window. 


—IN PIXEL_ROW Row number from within the window where the top side 

of the button shall be placed. Row 0 is at the top 
of the window. 


—IN 

PIXEL_WIDTH 

—IN 

PIXEL_HEIGHT 

—IN 

BUTTON_TEXT 

— end 

formal parameters 


The number of columns to be occupied by the button. 
The number of rows to be occupied by the button. 
Textual string to display in the button. 


procedure UWN_DEFINE_BUTTON MENU ( 


MENU_INFORMATION: 

in 

Menu_window_ld: 

out 

Map_window: 

in 

Parent_Window: 

in 

Parent~window_x: 

in 

Parent~Window~Y: 

in 


UWN_BUTTON_HENU_PTR; 

SYS_WINDOW~ELE_ID; 

BOOLEAN :» FALSE; 

SYS WINDOW ELE_ID I- SYS ROOT_WINDOW; 
SYS_WINDOW_COLUMN :- 0; 

SYS~WINDOW_ROW :« 0); 


— CPM description: UWN_DEFZNE_BUTTON_MENU defines a popup window with a 

— button menu specified by the application. 


A-223 






— formal parameters 

—IN MENU_lNFORMATION Record of the button menus to be created and 

— input gathered from. 

—OUT menu_window_ID The ID of the window containing the button menu. 


—IN map_window The logical indicating whether the button menu 

— window should be mapped upon creation or not. 

— If it is not, the application can make the 

— button menu window be visible later via a call 

to UWN MAP WINDOW. 


—IN ParentjWindow The ID of the window to which the button menu 

— manager window will be a subwindow to. The 

— default is the root window thus making the button 

— menu a popup window. 


—IN Parent_Window_X The pixel column of the parent window where the 

button menu window's origin will be placed. The 
— default is zero, where the window may be moved 

via UWN MOVE WINDOW. 


—IN Parent_Window_Y The pixel row of the parent window where the 

— button menu window's origin will be placed. The 

— default is zero. 


— end formal parameters; 


procedure UWN_DEFINE_CHECKBOX ( 


EDITOR ID: 

out 

DESTJTYPE: 

in 

DEST_ID : 

in 

PIXEL_COL: 

in 

PIXEL_ROW: 

in 

NUM_FIELDS: 

in 

NUM COLS: 

in 

LABELS: 

in 

STATUS: 

in 

SUBPANEL ID: 

in 

PIXEL_WIDTH: 

in 

PIXEL HEIGHT: 

in 


— CPM description: Creates a 


SYS_WINDOW_ELE_ID; 

SYS_DESTINATION_TYPE; 

SYS_WINDOW_ELE_ID; 

SYS~WINDOW_COLUMN ; 

S Y S_WI NDOW_ROW } 

SYS_MENU_BUTTON_INDEX; 

SYS MENU_BUTTON_INDEX; 
sys”menu_button LABEL_PTR; 
sys~menu_button_status_ptr ; 

SYS_WINDOW_ELE_ID »« SYS_NULL__SUBPANEL; 
SYS_WINDOW_COLUMN :- SYS_NULL_COLUMN; 
SYS~WINDOW_ROW :« SYS_NULL_ROW); 

ix button editor. 


— formal parameters 

—OUT EDIT0R_ID ID attached to the editor. This 

ID is required for all interactions with the editor. 


—IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
SYS_WINDOW_DEST - Window 
sY s~panel_dest - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 


A-224 







—IN PIXEL_COL 

—IN PIXEL_ROW 

—IN NUM_FIELDS 

—IN NUM_COLS 

—IN LABELS 

—IN STATUS 

—IN SUBPANEL_ID 

— IN PIXEL_WIDTH 

—IN PIXEL HEIGHT 


Column number from vithin the window where the left 
side of the editor shall be placed, column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The total number of checkbox buttons to be in the 
editor. 

The number of columns the checkbox buttons are to be 
arranged in. 

Pointer to the array of label addresses for all 
the checkbox buttons. 

Pointer to the boolean array of statuses for all the 
checkbox buttons. 

ID attached to the subpanel that 

the editor is assigned to. If the editor is not 

assigned to a subpanel, use a zero which is the 

default. 

The number of pixel columns wide the checkbox editor 
is to be created. If the width ia to be calculated, 
use the default value of zero. 

The number of pixel rows high the checkbox editor is 
to be created. If the height is to be calculated, 
use the default value of zero. 


— end formal parameters; 


procedure UWN__DEFINE EDITOR 


(EDITOR_XD: 

out 

DEST_TYPE» 

in 

DEST_ID : 

in 

PIXEL_COL: 

in 

PIXEL_ROW: 

in 

NUM COLSi 

in 

NUM ROWS; 

in 

READ_ONLY« 

in 

MAX_?UFFER SIZE; 

in 

TEXT_BUFFER« 

in 

BUFFER SIZE; 

in 

SUBPANEL ZDl 

in 


SYS_WINDOW_ELE_ID; 
SYS_DESTINATION_TYPE; 
SYS_WINDOW_ELE_ID; 
SYS_WINDOW_COLUMN; 

SYS_WINDOW_ROW; 
SYS_WINDOW_COLUMN; 
SYS~WINDOW_ROW; 

BOOLEAN; 

SYS_PRODUCT_LENGTH; 
SYS~TEXT_PTR; 
SYS_PRODUCT_LENGTH; 
SYS_WINDOW_ELE_ID 0) 


— CPH description; Creates a window full page text editor. 

— formal parameters 

—OUT EDITOR_ID ID attached to the editor. This 

— ID is required for all interactions with the editor. 


A-225 







—IN 

DEST_TYPE 

The type of the destination for the editor, where: 
SYS_WINDOW dest - Window 

SYS~PANEL_DEST - Panel 

—IN 

DEST_ID 

ID attached to the destination that the editor is 
assigned to. This is set to HULL when the 
destination is the RootWindow. 

—IN 

PIXEL_COL 

column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

—IN 

PIXEL_ROW 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

— IN 

NUM_COLS 

The number of columns to be occupied by the editor. 

—IN 

NUM_ROWS 

The number of rows to be occupied by the editor. 

— IN 

READ_ONLY 

Flag indicating if the user has full editing 
capabilities or is limited to only scroll and copy 
operations. 

true ■ Read only 

falsa - Pull edit 

— IN 

MAX_BUFFER__S 12 E 

Maximum number of pixels that the TEXT_BUFFER 
can hold. 

—IN 

TEXT_BUFFER 

Buffer of the initial text to display in the editor. 

— IN 

BUFFER_SIZ E 

The number of pixels in TEXT_BUFFER. 

— IN 

SUBPANEL_ID 

ID attached to the subpanel that 

the editor is assigned to. If the editor is not 

assigned to a subpanel, use a zero. 


— end formal parameters; 


procedure UWN_DEFINE_NUMBER_riELD ( 


EDITOR_IDt 

out 

SYS WINDOW ELE_ID; 

DEST TYPE* 

in 

SYS”DESTINATION_TYPE; 

DEST~ID 1 

in 

SYS_WINDOW_ELE_ID; 

PIXEL_COL: 

in 

SYS_WINDOW_COLUMN; 

pixel”ROW: 

in 

SYS~WINDOW_ROW; 

LABEL: 

in 

STRING; ” 

LABEL POSITIONI 

in 

SYS_LABEL_POSITION; 

NUMBER VARIABLE! 

in out 

STRING; ~ 

MIN_NUMBER : 

in 

STRING; 

MAX NUMBER 1 

in 

STRING; 

MAX~CHARACTERSi 

in 

SYS PRODUCT LENGTH; 

SUBPAN EL_It,« 

in 

SYS~WINDOW ELE ID :- 


A-226 






— CPM description: Creates a Numeric Field editor. 

Note: This function will not cause display of the field 
if it is defined in a panel as that is caused by 
calling either cwn_end_panel or cwn_end_aubpanel. 

— formal parameters 

—out EDiTOR_lD ID attached to the editor. This 

ID is required for all interactions with the editor. 


—IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
SYS_WIND0W__DEST - Window 
SYS~PANEL_DEST - panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the Rootwindow. 


—IN PIXEL_C0L Column number from within the panel where the left 

side of the editor shall be placed, column 0 is at 
left of the window. 


—IN PlXEL_ROW Row number from within the panel where the top side 

— of the editor shall be placed. Row 0 is at the top 

of the window. 


—IN label The optional label before the number field. This 

should be set to NULL if no label will be displayed. 

—IN LABEL_POSlTION Value specifying whether the optional label should 

— be placed to the left or the right of the number 

field. The two valid settings for this field are: 

0 - Left aligned 
1 ■ Right aligned 

If no label is specified, this parameter will 

— be ignored by the editor. 


—INOUT number_variable The address of the variable to store the 

— input number at. This variable may be 

— initialized to some number value, which would 

be displayed. This must be a null terminated 
string. 


—IN MIN_NUMBER The string representing the minimum number 

— to be allowed as input from the user. This 

— string must be MAX_CHARACTERS long with each 

digit of the string representing the minimum 

— value for that digit and the string must be NULL 

— terminated. 


—IN kax_number The string representing the maximum number to be 

— allowed as input from the user. This string must 

— be HAX_CHARACTERS long with each digit of the string 

— representing the maximum value for that digit and 

— the string must be NULL terminated. 


—IN 


MAX CHARACTERS 


The maximum number of characters which will 


A-227 





be allowed to be entered into the field. 

—IN subpanel_id ID attached to the aubpanel that 

the editor is assigned to. Zf the editor is not 
assigned to a subpanel, use a zero. 


— end formal parameters; 


procedure UWN_DEFINE_PANEL (PANEL_ID: out SYS_WINDOW_ELE_ID); 


— cpm description: Defines a panel within a window. This procedure must be 

called before defining any field editors. A panel must 
have at least one field editor attached to it. 

— formal parameters 

—out panel_ID ID attached to the panel. 

— This ID is required for all interactions with the 

panel. 

— end formal parameters; 


procedure UWN DEFINE POPUP MENU 


(MENU STRUCT ID: 

in 

SYS WINDOW_ELE ID; 

M£NU_TITLE: 

in 

STRING; 

START ARRAY: 

in 

SYS_POP_UP_START PTR; 

LENGTH_ARRAY: 

in 

SYS_POP_UP_LENGTH PTR 

TEXT ARRAY: 

in 

SYS MENU TEXT PTR; 

CHILD ARRAY: 

in 

SYS_POP_UP_CHILD PTR) 


-- CPM description: Defines a popup menu which may be a walking menu. 

This does not, however, display the menu in 
the window. All arrays are zero origin in index. 
The index into Text_Array is used as the menu id. 


— formal parameters 

—IN MENU_STRUCT_ID The id given by the application to the popup menu 

or entire walking menu structure. 

—IN MENU_TITLE The title of the menu to be displayed at the top 

of the menu. If the menu is a walking menu, then 
only the top menu will contain a title. If the 
user doesn't wish the title to be displayed, then 
this parameter must be set to NULL. 


—IN START_ARRAY 

—IN LENGTH_ARRAY 

—IN TEXT ARRAY 


Index into TEXT_ARRAY for the start of each pop-up 
menu in the walking menu. 

Number of cells in each pop-up menu 

Text for each cell of each pop-up menu in the 
walking menu 


—IN CHILD_ARRAY Pop-up index of the pop-up menu that is the child 

— ~ of each pop-up menu cell index into START_ARRAY 

and LENGTH ARRAY; 


A-228 





— end formal parameters 


procedure UWN_DEFINE_POPUP_WINDOW (WINDOW_ID: out SYS_WINDOW_ELE_ID; 

MAP_WINDOW: in BOOLEAN; 

PIXEL_COL: in SYS_WINDOW_COLUMN; 

PIXEL_ROW» in SYS_WINDOW_ROW; 

PIXEL_WIDTH: in SYS_WINDOW_COLUMN; 

PIXELJBEIGHT: in SYS_WINDOW_ROW); 


— CPM description: Changes the size of a popup window. 

— formal parameters 

—OUT WIND0W_ID ID attached to the window. 

—IN map_window Boolean logical indicating whether the defined 

window should be mapped or not. 

—IN PIXEL_COL Column number from within the display where the left 

side of the window ahall be placed. Column 0 is at 
left of the display. 

PIXEL_ROW Row number from within the display where the top 

side of the window shall be placed. Row 0 is at the 
top of the display. 

PIXEL_width The number of columns to be occupied by the window. 

—IN pixel_height The number of rows to be occupied by the window. 

— end formal parameters; 



procedure uwn_define_pushbutton (EDITOR ID: out 

dest_typz 7 in 

DEST_ID l in 

pixel_colj in 

PIXEL_ROW: in 

NUM FIELDS: in 

NUM~cols: in 

LABELS: in 

DEFAULT_BUTTON t in 
SUBPANEL_ID: in 

— CPM description: creates a pushbutton editor. 

— formal parameters 

—OUT EDIT0R_ID ID attached to the editor. This 

ZD is required for all interactions with the editor. 

—IN DEST_TYPE The type of the destination for the editor, where: 

SYS_WINDOW_DEST - window 
SYS~PANEL_DEST - Panel 

—IN DEST_ID ID attached to the destination that the editor is 

assigned to. This is set to NULL when the 


SYS_WINDOW_ELE_ID ; 
SYS_DESTINATION_TYPE; 
SYS_WINDOW_ELE_ID; 
SYS_WINDOW_COLUMN; 
SYS_WINDOW_ROW; 
SYS_MENU_BUTTON_INDEX; 
SYS_MENU_BUTTON_INDEX; 
SYS_MENU_BUTTON_LABEL_PTR; 
SYS_MENU_BUTTON_VALUES; 
SYS_WINDOW_ELE_ID :« 0); 


A-229 







—IN PIXEL COL 


—IN PIXEL ROW 


—IN NUM FIELDS 


destination is the RootWindow. 

Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The total number of pushbuttons to be in the 
editor. 


—IN NUM_COLS 

—IN LABELS 


The number of columns the pushbuttons are to be 
arranged in. 

Address of the array of label addresses for all the 
pushbuttons. 


—IN DEFAULT_BUTTON The index into the pushbutton array of the button to 

be drawn "active" or displayed as the default 
button. A value of SYS_NO_DEFAULT_BUTTON will 
disable this feature. 


—IN SUBPANEL_ID ID attached to the subpanel that 

the editor is assigned to. If the editor is not 
assigned to a subpanel, use a zero. 


— end formal parameters; 


:ON (EDITOR ID: 

out 

SYS_WINDOW_ELE ID; 

DEST_TYPE: 

in 

SYS - DESTINATION_TYPE; 

DEST ID : 

in 

SYS__WINDOW_ELE_ID ; 

PIXEL_COL: 

in 

SYS~WINDOW_COLUMN; 

PIXEL - ROW: 

in 

SYS_WINDOW_ROW; 

NUM__FIELDS : 

in 

SYS_MENU_BUTTON_INDEX; 

NUH~COLS: 

in 

SYS_HENU_BUTTON_INDEX; 

LABELS: 

in 

SYS_MENU BUTTON LABEL PTR 

DEFAULT_BUTTON: 

in 

SYS~KENU_BUTTON INDEX; 

SUBPANEL ID: 

in 

SYS - WINDOW_ELE ID := 0); 


— CPM description: creates a radiobutton editor where only one button is 

active at a time. 


— formal parameters 

—OUT EDITOR_id ID attached to the editor. This 

— ID is required for all interactions with the editor. 


—IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
SYS WINDOW DEST - window 
SYS~PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 


A-230 







—IN PIX£L_COL Column number from within the window where the left 

— side of the editor shall be placed. Column 0 is at 

— left of the window. 


—IN PIX£L_R0W Row number from within the window where the top side 

— of the editor shall be placed. Row 0 is at the top 

— of the window. 

—IN NUM_FIELDS The total number of radiobuttons to be in the 

— editor. 


—IN NUM_COLS 

—IN LABELS 


The number of columns the radiobuttons are to be 
arranged in. 

Address of the array of label addresses for all the 
radiobuttons. 


—IN DEFAULT_BUTTON The index into the radiobutton array of the button 

to be drawn "active" or displayed as the default 
— button. 


—IN subpanel_id ID attached to the subpanel that 

— the editor is assigned to. If the editor is not 

assigned to a subpanel, use a zero. 


— end formal parameters; 


procedure UWN DEFINE SCROLLBAR 


SCROLLBAR_ID: 

out 

SYS_WINDOW ELE_ID; 

DEST_TYPE: 

in 

SYS_DESTINATION TYPE; 

DEST_ID : 

in 

SYS_WINDOW_ELE_ID; 

ORIENTATION: 

in 

SYS_SB_DIRECTION; 

PIXEL_COL: 

in 

SYS_WINDOW_COLUMN; 

PIXEL ROW: 

in 

SYS_WINDOW_ROW; 

PIXEL_WIDTH: 

in 

SYS_WINDOW_PIXEL; 

PIXEL_LENGTH: 

in 

SYS_WINDOW PIXEL; 

DOC_SIZE: 

in 

SYS_PIXEL; 

DISPJPOSITION: 

in 

SYS_PIXEL; 

SCROLL_INTRVL: 

in 

SYS_WINDOW PIXEL; 

SUBPANEL_ID: 

in 

SYS_WINDOW_ELE_ID : = 0); 


— CPM description: Creates a horizontal or vertical scroll bar in a window. 

— A scrollbar is always created to fill one character 

whether it be vertically or horizontally oriented. 

A vertical scrollbar will be one character wide, whereas 

— a horizontal scrollbar will be one character high. The 

length and document size, therefore, is the number of 

— pixel rows or columns depending on the orientation. 


— formal parameters 

—OUT SCROLLBAR_ID ID attached to the scrollbar. 

— This ID is required for all interactions with the 

— scrollbar. 


A-231 





— IN 


DEST TYPE 


— IN DEST ID 


—IN ORIENTATION 


—IN PIXEL COL 


The type of the destination for the editor, where: 
SYS_WINDOW_DEST - Window 
SYS_PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to SYS_ROOT_wlNDOW when 
the destination is the RootWindow. 

Direction of the scrollbar where it is set to one 
of the following: 

SYS_SB_DIR_HORZ (Horizontal) or 
SYS_SB_DIR_VERT (Vertical) 

Colirnn number from within the window where the left 
side of the scrollbar shall be placed. Column 0 is 
at the left of the window. 


— IN 

PIXEL_ROW 

Row number from within the window where the top side 
of the scrollbar shall be placed. Row 0 is at the 
top of the window. 

— IN 

PIXEL_WIDTH 

The number of pixels to be occupied by the 
scrollbar's width. 

— IN 

PIXEL_LENGTH 

The number of pixels to be occupied by the 
scrollbar's length. 

— IN 

DOC_SIZE 

The number of lines in the document buffer. 

— IN 

DISP_POSITION 

The offset from the beginning of the work surface to 
first pixel visible to the user. 

— IN 

SCROLL_INTRVL 

The number of pixels the work will be scrolled 
whenever the user selectB an arrow button. Note: 

The work will not be scrolled by these utilities 
but, this argument is required to calculate 
the interactive slidepositioning. 

— IN 

SUBPANEL_ID 

ID attached to the subpanel that 

the editor is assigned to. If the editor is not 

assigned to a subpanel, use a zero. 


— end formal parameters; 


TEXT (STATIC_TEXT_ 

ID: 

out 

SYS_WINDOW_ELE_: 

DEST_TYPE l 

in 

SYS 

DESTINATION TYPE 

DEST_ID : 

in 

SYS WINDOW ELE ID; 

PIXEL_COL: 

in 

SYS 

WINDOW COLUMN; 

PIXEL~ROW: 

in 

SYS WINDOW ROW; 

PIXEL_WIDTH: 

in 

SYS_ 

_WINDOW_COLUMN; 

PIXEL~HEIGHT: 

in 

SYS] 

~WINDOW_ROW; 

STATICJTEXT: 

in 

SYS^ 

’TEXT_PTR; 

TEXT_ALIGNMENT: 

in 

SYS^ 

"tEXT~ALIGNMENT ; 

SUBPANEL ID: 

in 

SYS" 

"window ELE ID :- 


0); 


A-232 






— cpm descriptions creates a static text area in a window. The static text 

procedure allows display of product headings that will 
not scroll with the product. 


— formal parameters 


—OUT 

STATIC_TEXT_ID 

ID attached to the static text 

area. This ID is required for all interactions with 
the static text area. 

— IN 

DESTJTYPE 

The type of the destination for the editor, where: 

SYS WINDOW DEST - window 

SYS_PANEL_DEST - Panel 

—IN 

DEST_ID 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the Rootwindow. 

— IN 

PIXEL_COL 

Column number from within the window .'here the left 
side of the static text area shall be placed, 
column 0 is at the left of the window. 

— IN 

PIXEL_ROW 

Row number from within the window where the top side 
of the static text area shall be placed. Row 0 is 
at the top of the window. 

— IN 

PIXEL_WIDTH 

The number of columns to be occupied by the static 
text area. 

— IN 

PIXEL_HEIGHT 

The number of rows to be occupied by the static 
text area. 

— IN 

STATICJTEXT 

Textual string to display in the button. 

—IN 

TEXT_ALIGNMENT 

Alignment of the text within the static text area 
(CENTER_ALIGNED, LEFT_ALIGNED, RIGHT ALIGNED, 
NO_ALIGNMENT) 

— IN 

SUBPANEL_ID 

ID attached to the subpanel that 

the editor is assigned to. If the editor is not 

assigned to a subpanel, use a zero. 


— end formal parameters; 


procedure UWN_DEFINE_STRING FIELD ( 


EDITOR_ID: 

out 

SYS_WINDOW_ELE_ID; 

DEST TYPE: 

in 

SYS_DESTINATION TYPE 

DEST~ID i 

in 

SYS - WINDOW ELE ID; 

PIXEL_COL: 

in 

SYS_WINDOW COLUMN; 

PIXEL - ROWl 

in 

SYS _ WINDOW ROW; 

LABEL: 

in 

STRING; 

LABEL POSITION: 

in 

SYS LABEL POSITION; 

STRING_VARIABLE: 

in out STRING; 

MAX_C HARACTERS1 

in 

SYS PRODUCT LENGTH; 

SUBPANEL_IDI in 

SYS_WINDOW_ELE_ID 0); 


A-233 








— CPM description: creates a String Field editor. 

Note: this function will not cause display of the field 
as that is caused by calling either cwn_end_panel 
or cwn_end_subpanel. 


- formal parameters 
-OUT EDITOR ID 


—IN DEST TYPE 


—IN DEST ID 


PIXEL COL 


—IN PIXEL ROW 


—IN LABEL 


LABEL POSITION 


—INOUT STRING VARIABLE 


MAX CHARACTERS 


ID attached to the editor. This 

ID is required for all interactions with the editor 

The type of the destination for the editor, where: 
SYS_WINDOW_DEST - Window 
SYS_PANEL__DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the Rootwindow. 

Column number from within the panel where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the panel where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The optional label before the string field. This 
should be set to NULL if no label will be displayed 

Value specifying whether the optional label should 
be placed to the left or the right of the number 
field. The two valid settings for this field are: 

0 ■ Left aligned 
1 » Right aligned 

If no label is specified, this parameter will 
be ignored by the editor. 

The address of the variable to store the 
input string at. This variable may be 
initialized to some string value, which would 
be displayed. This must be a NULL terminated 
string. 

The maximum number of characters which will 
be allowed to be entered into the field. 


—IN SUBPANEL ID 


ID attached to the subpanel that 

the editor is assigned to. If the editor is not 

assigned to a subpanel, use a zero. 


— and formal parameters; 


procedure UWN DEFINE SUBPANEL (SUBPANEL_IDt 

PANEL IDI 


out SYS_WINDOW_ELE ID; 
in sys“window_ele“id>; 





— CPM description: Defines a subpanel within a panel. A aubpanel must 

— have at least one field editor attached to it. 

— formal parameters 

—OUT subpanel_ID XD attached to the aubpanel. 

” This ID is required for all interactions with the 

subpanel. 

—IN PANEL_ID ID of the panel that the 

— subpanel is attached to. 

— end formal parameters; 

procedure UWN_DELETE_BUTTON (BUTTON_XD : in SYS_WINDOW_ELE_ID); 

— CPM description: UWN_DELETE_BUTTON deletes a button that is defined by 

UWN_DEFINE_BUTTON. 

— formal parameters 

—XN BUTT0N_ID The ID of the button to delete. 

— end formal parameters; 

procedure UWN_DELETE_BUTTON_MENU (M£NU_WINDOW_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: UWN_DELETE_BUTTON_MENU deletes the specified button menu. 

— formal parameters 

—IN menu_window_id The id of the window containing the button menu. 

~ end formal parameters; 


procedure uwn_delete_checkbox (CHECKBOX_id t in sys_windowjexe_id ); 

— CPM description: uwn_delete_checkbox deletes a checkbox editor that is 

defined by UWNJDEFINE_CHECKBOX. 

— formal parameters 

—IN CHECKBOX_ID The ID of the checkbox editor to delete. 

~ end formal parameters; 

procedure UWN_DELETE_EDITOR (EDITOR_ID » in SYS_WINDOW_ELE_ID); 

— CPM description: UWN DELETE_EDITOR deletes an editor that is defined by 

UWN~DEFINE~EDITOR. 

— formal parameters 

—IN EDXTOR_XD The ID of the editor to delete. 

— end formal parameters; 


procedure UWN_DELETE_MENU (MENU_ID t in SYS_WINDOW_ELE_ID); 

— CPM description: Deletes a walking menu structure. 


A-235 









— formal parameters 

—IN menu_id The ID of the menu structure to delete. 

— end formal parameters; 


procedure UWN_DELETE_NUMBER_FIELD ( 

EDITOR_ID : in SYS_WINDOW_ELE_ID); 

— cpm description: Deletes an numeric field editor that 

is defined by UWN DEFINE HUMBER_FIELD. 


— formal parameters 

—IN EDIT0R_ID The ID of the editor to delete. 

— end formal parameters; 


procedure UWN_DEI»ETE_PANEL (PANEL_ID : in SYS_WINDOW_ELE_ID); 

— CPM description: Deletes a panel from a window. 

— formal parameters 

—IN panel_id The ZD of the panel to delete. 

— end formal parameters; 


procedure UWN_DELETE_POPUP_WINDOW (WINDOW_ID : in SYS_WINDOW_ELE_ID); 

— CPM description: UWN DELETE_POPUp WINDOW deletes a popup window that is 

defined by UWN_dIf!NE_POPUP_window. 

— formal parameters 

—IN window__id The ID of the popup window. 

— end formal parameters; 


procedure UWN_DELETE_PUSHBUTTON (PUSHBUTTONJID : in SYS_WINDOW_ELE_ID); 

— CPM description: UWN_DELETE_PUSHBUTTON deletes a pushbutton editor that 

is defined by UWN_DEriNE_pusHBUTTON. 


— formal parameters 

—IN PUSHBUTTON_ID The ID of the pushbutton editor. 

— end formal parameters; 


procedure UWN_DELETE_RADIOBUTTON (RADIOBUTTON_ID : in SYS_WINDOW_ELE_ID) ; 

— CPM description: UWN_DELETE_RADIOBUTTON deletes a radiobutton editor that 

is defined”by uwn_define_radiobutton. 

— formal parameters 

—IN RADIOBUTTON_ID The ID of the radiobutton editor. 

— end formal parameters; 


A-236 







. L 


procedure UWN_DELETE_SCROLLBAR (SCROLLBAR_ID: in SYS_WINDOW_ELE_ID) ; 

— CPM description: UWN_DELETE_SCROLLBAR deletes a scrollbar that is defined 

by UWN_DE FINE_SCROLLBAR. 


— formal parameters 

—IN sc rollsar__id The ID of the scrollbar to delete. 

— end formal parameters; 


procedure UWN_DELETE_STATIC__TEXT (STATIC_ID : in SYS_WINDOW_ELE_ID); 

— CPM description: UWN_DELETE_STATIC__TEXT deletes static text that is 

defined by UWN_DEFINE_STATIC_TEXT. 


— formal parameters 

—IN static_id The ID of the static text to delete. 

— end formal parameters; 


procedure UWN_DELETE_STRING_riELD ( 

“ EDITORJED : in SYS_WINDOW_ELE_ID); 

— CPM description: Deletes an string field editor that 

is defined by UWNjDEEINEjSTRlNGjriELD. 


— formal parameters 

—IN editor_id The ID of the editor to delete. 

— end formal parameters; 


procedure UWN_DELETE_SUBPANEL ( SUBPANEL_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: Deletes a subpanel from a window. 

— formal parameters 

—IN SUBPANEL_ID The ID of the subpanel to delete. 

— end formal parameters; 


procedure UWN_DELETE_SUBWINDOW (SUBWINDOW_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: Deletes a subwindow from the working window. 

— formal parameters 

—IN SOBWXNDOW_XD The ZD of the subwindow to delete. 

— end formal parameters; 

procedure UWN_DISPLAY_SYSTEM_MXSSAGE (MESSAGE » in SYS_TZXT_PTR); 


A-237 





— CPM description: This displays a message in the upper left hand corner of 

— the display screen. Unlike cwn_message_box, this routine 

— is provided mainly for system messages relating the 

status or some other information of the system. The 

-- message is removed via cwn_remove_system_message. 

— formal parameters 

—IN MESSAGE The Message to display. 

— end formal parameters; 


procedure UWN_END_PANEL (WIND0W__ID: in 

PANEL_ID: in 
PIXEL_COL: in 
PlXEL_ROW: in 
pixeiTwidth: in 
PIXEL HEIGHT: in 


SYS_WINDOW_ELE_ID; 
SYS_WINDOW_ELE~ID; 
SYS_WINDOW~COLUMN; 
SYS WINDOW_ROW; 
SYS~WINDOH_COLUMN; 

sys”Window row>; 


— CPM description: This procedure completes the panel definition process. 

— It displays the aubpanels and field editors (text 

— editors, scroll bars, and static text) that are attached 

— to the panel. 


— formal parameters 

—IN wiNDOW_ID ID attached to the window to contain the panel. 

—IN panel_id ID attached to the panel. 


—IN PlXEL_COL Column number from within the window where the left 

— side of the panel shall be placed. Column 0 is 

at the left of the window. 


—IN pixel_row Row number from within the window where the top side 

of the panel shall be placed. Row 0 is at the 
top of the window. 


—IN PIXEL_WIDTH The width of the panel in pixels. 

—IN PIXEL_HEIGHT The height of the panel in pixels. 

— end formal parameters; 


procedure UWN_END_SUBPANEL (SUBPANEL ID: 

in 

SYS WINDOW ELE ID; 

PIXEL COL: 

in 

SYS WINDOW COLUMN; 

PIXEL~ROW: 

in 

SYS_WINDOW_ROW; 

PIXEL _ WIDTH: 

in 

SYS WINDOW - COLUMN; 

PIXELJHEIGHT: 

in 

SYS - WINDOW_ROW); 

— CPM description: This procedure completes 

the 

subpanel definition process 


It displays the field editors (text editors, scroll 
bars, and static text) that are attached to the subpanel 


— formal parameters 

—IN SUBPANEL_ID ID attached to the subpanel. 


A-238 





—IN PIXEL_COL Column number from within the window where the left 

— ~ side of the subpanel shall be placed. Column 0 is 

at the left of the window. 


—IN pixel_row Row number from within the window where the top side 

— of the subpanel shall be placed. Row 0 is at the 

top of the window. 


--IN PIX£L_WIDTH The width of the subpanel in pixels. 

—IN PIXEL__HEIGHT The height of the subpanel in pixels. 

— end formal parameters; 


procedure UWN_HANDLE_WINDOW_MOVE (WINDOW_ID: in SYS_WINDOW_ELE_ID); 


— CPM description: This procedure handles the user interface required 

for allowing the user to interactively move a window. 


— formal parameters 

—IN window_id The ID attached to the window. 

— end formal parameters; 


procedure UWN_HIDE_PANEL (PANEL_ID: in SYS_WINDOW_ELE_ID); 


— CPM description: This procedure hides a defined panel and disables user 
—• input to any of the panel editors. 


— formal parameters 

—IN PANEL_ID ID attached to the panel to 

hide. 

— end formal parameters; 


procedure uwn_hide_subpanei. (SUBPANELJCD: in sys_window_ele_id); 


— CPM description: This procedure hides a defined subpanel and disables user 

— input to any of the subpanel editors. 

— formal parameters 

—IN SUBPANEL_ID ID attached to the subpanel to 

— bide. 

— end formal parameters; 


procedure UWN_INITIALIZE_WINDOW_SYSTEM; 

— CPM description: UWN_INITIALIZE_WINDOW_SYSTEM is the initial set-up 

— procedure for the EDDIC window system. It must be called 
before any of the UWN utilities. 


A-239 






— formal parameters 

— None 

— end formal parameters; 


procedure UWN_INPUT 

(INPUT_TYPE 

: 

out 

SYS WINDOW INPUT; 


WINDOW ID 

X 

out 

sys_window”ele_id; 


INPUT_VALUE 

X 

out 

SYS~WINDOW_VALUE; 


INPUT_DATA 

X 

out 

SYS~WINDOw”dATA); 

— CPM description: 

Returns user 

input and 

internet messages to 


application software. 


— formal parameters 
—OUT INPUT_TYPE 

—OUT WINDOW ID 


—OUT INPUT_VALUE 

—OUT INPUT DATA 


Type of input returned from the window system 

The id of the window which received input, if 
applicable. Note, that if the table below has 
an "X" under the window_id header for the 
input_type, but the window_id equals zero, then 
this means that the input took place in the 
RootWindow. 

The value of the input that accompanies the type 

The value of the data that accompanies the type 
and input values, if appropriate. 


The following table lists the output returned to the application 
for its own processings 


— input_type 


window- 

id type_code data 


— 1 Exit n/a 

— 2 Menu X 

— 3 Checkbox X 

— 4 Scrollbar X 

— 5 XrFILE n/a 

— 6 ButtonWindow X 

— 7 Mouse Button X 

Pressed 


— 8 Mouse Button X 

— Released 


— 9 Field Traversal X 


n/a 

Menu_Id 

Editor_ld 

Editor Id 

fd 

n/a 

Button s 
0 - R 

1 - M 

2 - L 

Button s 
0 - R 

1 - M 

2 » L 

Editor id 


n/a 

menu_index 

Checkbox_index 

SlidePosition 

n/a 

n/a 

window_type: 

1 - window 

2 ■ panel 

3 » button 
x, y 

window_type s 

1 «■ window 

2 “ panel 

3 ■ button 

x, y 

editor_types 

1 • string_field 

2 - Number”!isId 
type of traversal: 

1 - Next 

2 - Previous 


A-240 










3 - Up 

4 - Down 


10 

Exposure 

X 

n/a 

x, y, width, height 

11 

Open window 

n/a 

n/a 

n/a 

12 

Window Resized 

n/a 

n/a 

n/a 

13 

Close Window 

n/a 

n/a 

n/a 

14 

XrEEDIT_SAVE 

X 

Editor_Id 

buffercount 

15 

XrEEDIT_RESET 

X 

Editor_Id 

n/a 

16 

Pushbutton 

X 

Editor Id 

Button_index 

17 

Radiobutton 

X 

Editor - Id 

Active_index, 
Previous Index 


— end formal parameters; 


procedure UWN_MAP_WINDOW (WINDOW_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: Routine to map a window created via UWN_CREATE__WiNDOW 

whose "map_window" flag was set FALSE. 


— formal parameters 

—IN WIND0W_ID The ID of the window to be upped. 

— end formal parameters; 


procedure UWN_MESSAGE_BOX 


[MESSAGE 

: 

in 

STRING; 

BUTTONS ALLOWED 

: 

in 

UWN BUTTON ALLOWED; 

BUTTON_SELECTED 

: 

out 

SYS WINDOW ELEJLD; 

BUTTON X_PIXEL 

: 

out 

SYS WINDOW COLUMN; 

BUTTON - Y PIXEL 

: 

out 

SYS WINDOW ROW; 

INPUT WINDOW_ID 

: 

out 

SYS WINDOW ELE_ID); 


— CPM description: Displays a message box which the user removes by a click 

on the mouse which is allowed by the application. The 

— message box always appears centered on the display and 

the button which activated its disappearance is returned 

— to the application. 


— formal parameters 

—IN MESSAGE Textual string to display in the message box. 


—IN 


—OUT 
—OUT 

—OUT 

—OUT 


BUTTON ALLOWED 


BUTTON_SELECTED 

BUTTON~X_PIXEL 

BUTTON_Y_PIXEL 

INPUT WINDOW ID 


A logicax array indicating which mouse buttons 
the application is allowing the user to click 
for making the message box go away, where: 

[0] *» RightButton; 

[1] “ MiddleButton; 

[2] - LeftButton; 

The number of the selected button (0, 1, or 2); 
The x pixel location where the mouse button was 
selected. 

The y pixel location where the mouse button was 
selected. 

The id of the window which received the mouse 
button selection input. 


A-241 





— end formal parameters; 


procedure UWN_MOVE__BUTTON (BUTTON_ID: 

PIXEL_COL s 
PIXEL*"ROW: 


in SYS_WINDOW_ELE_ID; 
in SYs”wiNDOW~COLUHN; 
in SYs“wiNDOW_ROW) 


— cpm description: changes the location of a button. 


— formal parameters 
—IN BUTTON ID 


PIXEL COL 


PIXEL ROW 


ID attached to the button. This 

ID is required for all interactions with the button. 

column number from within the window where the left 
Bide of the button shall be placed, column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the button shall be placed. Row 0 is at the top 
of the window. 


— end formal parameters; 


procedure UWN_MOVE_CH£CKBOX (CHECKBOX_ID: 

“ PIXEL_COL: 

PIXEL ROW: 


in SYS_WINDOWJBLE_ID; 
in SYS_WINDOW_COLUMN; 
in SYS_WINDOW_ROW); 


— CPM description: changes the location of a checkbox editor. 

— formal parameters 

—IN CHECKBOX ID ID attached to the checkbox editor. 


PIXEL COL 


PIXEL ROW 


Column number from within the window where the left 
aide of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


— end formal parameters; 


procedure UWN_MOVE_ 

EDITOR (EDITOR_ID: 

in 

SYS WINDOW_ELE ID; 


PIXEL_COL: 

in 

SYS WINDOW COLUMN; 


PIXEL~ROW: 

in 

SYs”wiNDOW_ROW); 

— cpm description: 

Changes the location of 

a full 

page text editor. 

— formal parameters 



—IN EDITOR ID 

ID attached to the 

editor. 

This 


PIXEL COL 


ID is required for all interactions with the editor. 

Column number from within the window where the left 
side of the editor shall be placed, column 0 is at 
left of the window. 






PIXEL ROW 


Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


— end formal parameters; 


procedure UWN_MOVE_NUMBER_FIELD ( 

EDITOR_ID: 
PIXEL COL8 
PIXEL~ROW: 


in SYS_WINDOW_ELE_ID; 
in SYs“wiNDOW_COLUMN; 
in S YS_WINDOW_ROW); 


— CPM description: Changes the location of a numeric field editor. 


— formal parameters 
—IN EDITOR ID 


PIXEL COL 


ID attached to the editor. This 

ID is required for all interactions with the editor. 

Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 


PIXEL ROW 


Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


— end formal parameters; 


procedure UWN_MOVE_PANEL (PANELJtD: 

PIX£L_COL: 

PIXEL~ROW: 


in SYS_WINDOW_ELE_ID; 
in SYS_WINDOW_COLUMN; 
in SYS_WINDOW_ROW); 


— CPM description: Changes the location of a panel. 


— formal parameters 
—IN PANEL_ID 

—IN PIXEL COL 


ID attached to the panel to move. 

Column number from within the window where the left 
side of the panel shall be placed, column 0 is at 
left of the window. 


PIXEL ROW 


— end formal parameters; 


Row number from within the window where the top side 
of the panel shall be placed. Row 0 is at the top 
of the window. 


procedure UWN_MOVE_POPUP_WINDOW (WINDOW_ID: 

PIXEL COL:“ 

PIXEL~ROW: 


in SYS_WINDOW_EL£_ID; 
in SYS~WINDOW~COLUMN; 
in SYS_WINDOW_ROW); 


— CPM description: changes the location of a popup window. 


— formal parameters 
—IN WINDOW ID 


ID attached to the popup window to move. 


A-243 



—IN PlXEL_COL Colujnn number from within the display where the left 

side of the window shall be placed. Column 0 is at 
left of the display. 

—IN PIXEL_R0W Row number from within the display where the top 

side of the window shall be placed. Row 0 is at the 
top of the display. 

— end formal parameters; 


procedure UWN_MOVE_PUSHBUTTON (PUSHBUTTON_ID: 

PIX£L_COL:“ 

PIXEL~ROW: 

— CPM description: Changes the location of a pushbutton editor. 

— formal parameters 

—IN PUSHBUTTON_ID ID attached to the pushbutton editor to move. 

--IN PIXEL_COL col umn number from within the window where the left 

— side of the editor shall be placed. Column 0 is at 

left of the window. 

—IN PlXEL_ROW Row number from within the window where the top side 

— of the editor shall be placed. Row 0 is at the top 

of the window. 

— end formal parameters; 


in S Y S_WINDOW_ELE_I D; 
in SYS_WINDOW_COLUMN; 
in SYS_WINDOW_ROW); 


procedure UWN_MOVE_RADIOBUTTON <RADIOBUTTON_IDs in SYS_WINDOW_ELE_ID ; 

~ . ~ PIXEL_COL: in SYS_WINDOW_COLUMN; 

PIXEL_ROW: in SYS_WINDOW_R0W); 

— cpm description: changes the location of a radiobutton editor. 

— formal parameters 

—IN RADIobutton_iD ID attached to the radiobutton editor to move. 

—IN PlXEL_COL Column number from within the window where the left 

— side of the editor shall be placed, column 0 is at 

left of the window. 

—IN PIXEL_ROW Row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 

— of the window. 

— end formal parameters; 


procedure UWN_MOVE_SCROLLBAR ( 


SCROLLBAR ID: 

in 

SYS_WINDOW_ELE ID; 

PIXEL_COL: 

in 

SYS~WINDOW~COLUMN; 

PIXEL~ROW: 

in 

SYS~WINDOW~ROW); 


— CPM description: changes the location of a scrollbar. 

— formal parameters 





SCROLLBAR ID 


ID attached to the scrollbar. 

This ID is required for all interactions with the 
scrollbar. 


—IN PIXEL COL 


column number from within the window where the left 
side of the scrollbar shall be placed, column 0 is 
at left of the window. 


PIXEL ROW 


— end formal parameters; 


Row number from within the window where the top side 
of the scrollbar shall be placed. Row 0 is at the 
top of the panel. 


procedure UWN_MOVE_STATIC_TEXT ( 

TEXT IDI 
PIXEL_COL: 
PIXEL~ROW: 


in SYS_WINDOW_ELE_ID; 
in SYS_WINDOW_COLUHN; 
in SYS_WINDOW_ROW); 


— CPM description: Changes the location of static text. 

— formal parameters 

—IN editor_id ID attached to the text. This 

ID is required for all interactions with the text. 


—IN PIXEL COL 


PIXEL ROW 


Column number from within the window where the left 
side of the text shall be placed, column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the text shall be placed. Row 0 is at the top 
of the window. 


— end formal parameters; 


procedure uwn_move_string_FIELD ( 

EDITOR_ID: 
PIXEL COL: 
PIXEL ROW: 


in SYS_WINDOW_ELE_ID; 
in SYS_WINDOW_COLUMN; 
in SYS_WINDOW_ROW); 


— CPM description: Changes the location of a string field editor. 


— formal parameters 
—IN EDITOR ID 


PIXEL COL 


PIXEL ROW 


— end formal parameters; 


ZD attached to the editor. This 

ID is required for all interactions with the editor. 

Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


A-245 





procedure uwn_move_subwindow (SUBWINDOW_id: 

in 

SYS_ 

_WINDOW_ELE_ID; 

pixel_col7 

in 

SYS' 

"WINDOW COLUMN; 

PIXEL_ROW: 

in 

SYS_WINDOW_ROW); 


— CPM description: Changes the location of a subwindow. 


— formal parameters 

—IN SUBWINDOW_ID ID attached to the subwindow to move. 

—IN PlXEL_COL Column number from within the window where the left 

side of the subwindow shall be placed, column 0 is 

— at left of the window. 


—IN pixel_row row number from within the window where the top side 

of the subwindow shall be placed. Row 0 is at the 
top of the window. 

— end formal parameters; 


procedure UWN_MOVE_WINDOW (WINDOW_ID: 

PIXEL_COL: 
PIXEL ROW: 


in SYS_WINDOW_ELE_ID; 
in SYS_WINDOW_COLUMN; 
in SYS_WINDOW ROW); 


— CPM description: changes the location of a window. 

— formal parameters 


•IN 

WINDOW_ID 

ID attached to the window to 

move. 


IN 

PIXEL_COL 

column number where the left 
shall be placed. 

side of 

the window 

IN 

PIXEL_ROW 

Row number where the top side 
shall be placed. 

of the 

window 


— end formal parameters; 


procedure UWN_OPEN_ICON; 

— CPM description: Opens the window from the existing icon. 

— formal parameters 
—NONE 

— end formal parameters; 


procedure UWN_POST MENU 


(MENU_STRUCT_ID: in 


MENU_INDEX: in 
WINDOW TYPE: in 
WINDOW~ID: in 
PIXEL_X: in 
PIXEL Y: in 


SYS_WINDOW_ELE_ID; 
SYS_WALKING_CELL; 
SYSJfINDOW TYPE; 
SYS_WINDOW~ELE_ID; 
SYS_WINDOW COLUMN; 
8YS“WIND0W_R0W); 


— CPM description: This routine activates and posts an already defined 

popup menu at a specified location for either: 

a. A defined window, 

b. a displayed panel (via cwn_end_panel), 


A-246 







c. or, a defined button (via cwn_define_button). 


— formal parameters 

—IN menu_struct_id The id of the menu structure given by the 

application at the time of the menu definition. 

—IN M£NU_INDEX The index into the Text_Array of the submenu to 

— be activated for a particular window, if applicable. 

If the menu to be activated is not a walking menu, 
or is the top level of a walking menu, then this 
parameter should be set to NULL. 


—IN WINDOW TYPE 


—IN WINDOW ID 


The type of window the menu will be activated for, 
where : 

sys_WINDOW ” a defined window 

SYS~DISPLAY_PANEL - a displayed panel 
SYS~DEFINEd”b u TT° n * defined button 

The id given by the application at the time of the 
window type's creation where: 

If window_type is SYS_WIND0W and window_id is 0, 
then the menu will be activated for the Rootwindow 
or (Display). Otherwise, the menu will be activated 
for the matching window_id. 

If window_type ■ SYS_DISPLAY_PANEL, the id should 
be the panel id. 

If window_type * SYS_DEFINED_BUTTON, the id should 
be the button id. 


—IN PIXEL_X The X pixel coordinate for posting the menu. 

—IN PIXEL_Y The Y pixel coordinate for posting the menu. 

— end formal parameters; 


procedure UWN_QUERY_CHECKBOXJRECTS (CHECKBOX_ID : in SYS_WINDOW_ELE_ID; 

CHECKBOX_RECTS: in out UWN_RECTANGLE_ARRAY_PTR)7 

— CPM description: Returns the rectangular descriptions of the individual 

checkboxes. Note: these descriptions do not include 

— the labels in the widths and this routine cannot be 

called before the panel containing the checkbox instance 
has been ended via UWN_END_PAN’EL. 

— formal parameters 

--IN checkbox_id ID attached to the editor. 

—IN OUT CHECKBOX_RECTS The array of rectangle descriptions. 

— end formal parameters; 


procedure UWN_QUERY_CHECKBOX_SIZE (CHECKBOX_ID: 

PIXEL__COL: 

pixel'row: 


in SYS_WINDOW__ELE_ID; 
out SYS~WINDOW~COLUMN; 
out SYS_WINDOW~ROW); 


— CPM description: Returns the number of pixel columns and rows that 

— a checkbox editor occupies. 


A-247 







ID attached to the editor. 



Number of pixel columns 


—OUT 


PIXEL ROW 


— end formal parameters; 


Number of pixel rows in 


in the editor, 
the editor. 


procedure UWN_QUERY_DISPLAY SIZE (WIDTH : out SYS_WINDOW_COLUMN; 

HEIGHT; out SYS_WINDOW_ROW); 

— CPM description: Returns the number of pixel columns and rows that 

— are in the Display screen. 

— formal parameters 

—OUT width Number of pixel columns in the Display screen. 

—OUT HEIGHT Number of pixel rows in the Display screen. 

— end formal parameters; 


procedure uwn_query_editor_size (EDlTOR_ID: 

in 

SYS WINDOW ELE_ID; 

PIXEL COL: 

out 

SYS_WINDOW_COLUMN; 

PIXEL_ROW: 

out 

SYS_WINDOW_ROW); 


— CPM description: Returns the number of pixel columns and rows that 

an editor occupies. 


— formal parameters 


—IN 

EDITOR_ID 

ID attached to 

the editor. 


—OUT 

PIXEL_COL 

Number of pixel 

columns in 

the editor. 

—OUT 

PIXEL ROW 

Number of pixel 

rows in the 

editor. 

— end 

formal parameters; 




I 

procedure UWN_QUERY_FONT_SIZE (PIXEL__COL: out SYS_WINDOW_COLUMN; 

~ PIXEL~ROW: out SYS_WINDOW_ROW); 

— cpm description: Returns the number of pixel columns and rows that 

— a font occupies. 

-- formal parameters 

—OUT pixel_col Number of pixel columns in the font. 

—OUT PIXEL_R0W Number of pixel rows in the font. 

— end formal parameters; 


procedure UWN_QUERY_NUMBER_FIELD_SIZE ( 


EDITOR_ID: 

in 

SYS_WINDOW_ELE_ID; 

PIXEL_COL: 

out 

SYS_WINDOW”COLUMN; 

PIXEL_ROW: 

out 

SYS~WINDOW~ROW); 


A-248 






— CPM description: Returns the number of pixel columns and rows that 

an numeric field editor occupies. 

— formal parameters 

—IN editor_id ID attached to the editor. 

—OUT PlXEL_COL Number of pixel columns in the editor. 

—OUT pixel_row Number of pixel rows in the editor. 

— end formal parameters; 


procedure UWN_QUERY_PANEL_SIZE (PANEL_ID: in SYS_WINDOW_ELE_ID; 

PIXElTcOLl out SYS_WINDOW_COLUMN; 

PIXElTrOWi OUt SYS_WINDOW_ROW); 

— CPM description: Returns the number of pixel columns and rows that 

a panel requires. The size is determined by using the 
locations and sizes of the editors that are attached 
to the panel. 


— formal parameters 


—IN PANEL_ID 

—OUT PIXEL_COL 

—OUT PIXEL_ROW 

— end formal parameters 


ID attached to the panel. 

Number of pixel columns in the window. 
Number of pixel rows in the window. 


procedure UWN_QUERY_PUSHBUTTON_RECTS <PUSHBOTTON_ID* in SYS_WINDOW_ELE ID; 

PUSHBUTTON_RECTS: in OUt UWN_RECTANGLE_ARRAY_PTR) ; 

— CPM description: Returns the rectangular descriptions of the individual 

pushbuttons. Note: these descriptions do not include 

— the labels in the widths and this routine cannot be 

called before the panel containing the pushbutton 
instance has been ended via UWN_END_PANEL. 

— formal parameters ' 

—IN PUSHBUTTON_ID ID attached to the editor. 

—IN out pushbutton_RECts The array of rectangle descriptions. 

— end formal parameters; 


procedure UWN_QUERY_PUSHBUTTON_SIZE (PUSHBUTTON ID: 

PIX£L_COL: ~ 

PIXEL ROWt 


in SYS_WINDOWJELE_ID; 
OUt SYS_WINDOW_COLUMN; 
OUt SYS_WINDOW_ROW); 


— CPM description: Returns the number of pixel columns and rows that 

— a pushbutton editor occupies. 


— formal parameters 

—IN PUSHBUTTON ID ID attached to the editor. 


A-249 








"OUT PIXEL_COL Number of pixel columns in the editor. 

—OUT pixel_row Number of pixel rows in the editor. 

— end formal parameters; 


procedure UWN_QUERY_RADIOBUTTON_RECTS ( 

RADIOBUTTON_ID! in SYS_WINDOW_ELE_ID; 
RADIOBUTTON_R£CTSl in out UWN_RECTANGLE_ARRAY_PTR); 

— CPM description: Returns the rectangular descriptions of the individual 

radiobuttons. Note: these descriptions do not include 
the labels in the widths and this routine cannot be 
called before the panel containing the radiobutton 
instance has been ended via UWN_END_PANEL. 

— formal parameters 

—in radiobutton_id ID attached to the editor. 

—IN OUT radiobutton_rects The array of rectangle descriptions. 

— end formal parameters; 


procedure UWN_QUERY_RADIOBUTTON_SIZE { 

RADIOBUTTON_IDi 
PIXEL_COLs 
PIXEL ROW: 


in SYS_WINDOW_ELE_ID 
out SYS_WINDOW_C OLUMN 
out SYS_WINDOW_ROW); 


— CPM description: Returns the number of pixel columns and rows that 

a radiobutton editor occupies. 

— formal parameters 


—IN 

RADIOBUTTON_ID 

ID attached to the editor. 

—OUT 

PIX£L_COL 

Number 

of pixel columns 

in the editor 

—OUT 

PIXEL_ROW 

Number 

of pixel rows in 

the editor. 

— end 

formal parameters 

1 f 




procedure UWN_QUERY_SCROLLBAR_SIZE ( 


SCROLLBAR_ID: 

in 

SYS_WINDOW_ELE_ID; 

PIXEL COL; 

out 

SYS_WINDOW COLUMN; 

PIXEL ROHt 

out 

SYS_WINDOW_ROW); 


— CPM description: Returns the number of pixel columns and rows that 

— a scrollbar occupies. 

— formal parameters 


—IN 

SCROLLBAR_ID 

ID attached to the scrollbar. 

—OUT 

PIXEL_COL 

Number of pixel columns 

in the scrollbar. 

—OUT 

PIXEL_ROW 

Number of pixel rows in 

the scrollbar. 


— end formal parameters; 


A-250 







procedure UWN_QUERY_STRING_FIELD_SIZE ( 


EDITOR ID: 

in 

PIXEL COL: 

out 

PIXEL_ROW: 

out 


S Y S_W IN DOW_ELE__ ID; 
SYS_WINDOW_COLUMN; 
SYS~WINDOW_ROW); 


— c?M description: Returns the number of pixel columns and rows that 

an string field editor occupies. 


— formal parameters 

—IN EDITOR_ID 

—OUT PIXEL_COL 

—OUT PIXEL_ROW 

— end formal parameters; 


ID attached to the editor. 

Number of pixel columns in the editor. 
Number of pixel rows in the editor. 


procedure UWN_QUERY_SUBPANEL_SIZE (SUBPANEL_ID: in SYS_WINDOW_ELE_ID; 

PIXEL_COL: out SYS_WINDOW_COI.UMN; 

PIXEL_ROW: out SYS_WINDOW_ROW); 

— CPM description: Returns the number of pixel columns and rows that 

a subpanel requires. The size is determined by using the 
locations and sizes of the editors that are attached 
to the subpanel. 


— formal parameters 


IN 

SUBPANEL_ID 

ID attached to the subpanel. 

OUT 

PIXEL_COL 

Number 

of pixel columns in the window. 

OUT 

PIXEL_ROW 

Number 

of pixel rows in the window. 


— end formal parameters; 


procedure UWN_QU£RY_WINDOW_SIZE <WINDOW_ID: 

PIXEL_X: 
PIXEL.~Y: 
PIXEL_COL: 
PIXEL _ ROW: 


in SYS_WINDOW_ELE_ID; 
out SYS_WINDOW_COLUMN; 
out SYS_WINDOW_ROW; 
out SYS_WINDOW_COLUMN; 
out SYS_WINDOW_ROW); 


— CPM description: Returns the x and y display coordinates of the upper left 

— corner of the window and the number of pixel columns and 

~ rows that will fit in a window. If buttons have been 

— created in a window, it is advisable to query for 

— window size before creating other window structures. 


— formal parameters 


-IN 

WINDOW_ID 

-OUT 

PIXEL X 



-OUT 

PIXEL Y 



-OUT 

PIXEL COL 


The id of the window whose size is being queried. 
X screen coordinate of window origin. 

Y screen coordinate of window origin. 

Number of pixel columns in the window. 


A—251 





—out pixel_row Number of pixel rowe in the window. 

— end formal parameters; 

procedure UWN_REMOVE_INPUT_SOCKET <SOCKET_IDs in SYS_CLIENT); 

— CPM descriptions UWN_REMOVE_INPUT_SOCKET deletes a socket id to be 

watched by UWN_INPUT. 

— formal parameters 

—IN SOCKET_ID ID of the socket to stop watching for input. 

— end formal parameters; 


procedure UWN_REMOVE_SYSTEM_MESSAGE; 

— CPM descriptions This routine removes any system message displayed via 

— cwn_display_system_message. This should be called 

— before another system message is displayed. 


— formal parameters 

None 

— end formal parameters; 


procedure UWN_RESIZE_CHECKBOX (CHECKBOX_IDs in 

PIXEL_COLs in 
PIXElfROWs in 
PIXElTwiDTHs in 
PIXEL*~BEIGHTs in 


SYS_WINDOW_ELE_ID; 
SYS_WINDOW_COLUMN; 
S YS_WINDOW_ROW; 
SYS_WINDOW_COLUMN; 
SYS WINDOW_ROW); 


— CPM descriptions changes the size of a checkbox button editor. 


— formal parameters 

—IN CHECKBOX ID ID of the editor. 


—IN PIXEL COL 


—IN PIXEL ROW 


Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


IN 

PIXEL, 

_WIDTH 

The 

number 

of 

IN 

PIXEL, 

HEIGHT 

The 

number 

of 

end 

formal* 

parameters 

I 




columns to be occupied by the editor, 
rows to be occupied by the editor. 


procedure UWN_RESIZE EDITOR (EDITOR IDs in 

PIX£L_COL s in 
PlXEL_ROWs in 
pixel“widths in 


SYS_WINDOW_ELE ID; 
SYS_WINDOW_COLUKN; 
SYS_WINDOW~ROW; 

SYS WINDOW COLUMN; 


A-2S2 





PIXEL_HEIGHT: in SYS_WINDOW_ROW); 

— cph description: changes the size of a window full page text editor. 


— formal parameters 
—IN EDITOR_ID 

—IN PIXEL_COL 

—IN PIXEL ROW 


ID of the editor. 

Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


—IN PIX£L_WIDTH The number of columns to be occupied by the editor. 

—IN PIXEL__HEIGHT The number of rows to be occupied by the editor. 

— end formal parameters; 


procedure UWN_RESIZE_NUMBER_FIELD ( 


EDXTOR_ID: 

in 

SYS_WINDOW_ELE_ID; 

PIXELCOL: 

in 

SYS WXNDOW_COLUMN; 

PIXELROW: 

in 

SYSJNINDOW ROW; 

PIXEL WIDTH: 

in 

SYSJNINDOW COLUMN; 

PIXEL_HEIGHT: 

in 

SYS_WINDOW_ROW); 


— cpm description: changes the size of a numeric field editor. 

— formal parameters 

—IN EDITORJID ID of the editor. 

—IN PIXEL_col Column number from within the window where the left 

side of the editor shall be placed. Column 0 is at 
left of the window. 


—IN PlXEL_ROW row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 
— of the window. 


—IN PIXEL_WIDTH The number of columns to be occupied by the editor. 

—IN PIX£L_HEIGHT The number of rows to be occupied by the editor. 

— end formal parameters; 


procedure uwn_resize_panel <panel_id: in 

PIXEL~COL« in 
PIXEL_ROW« in 
PIXEL - WIDTHt in 
PIXEL - HEIGHT f in 


SYS_WINDOW_ELE_ID; 
STS*”WINDOW COLUMN; 
SYSJfXNDOW - ROW; 
SYS”WIND0W”COLUMN; 
SYS WINDOW - ROW); 


— cpm description: changes the size of a window panel. 


— formal parameters 


A-253 






—IN panel_ID ID attached to tha panel. 

—IN PIX£L_COL column number from within the window where the left 

side of the panel shall be placed. Column 0 is at 
left of the window. 

—IN PlXEL_ROW row number from within the window where the top side 

of the panel shall be placed. Row 0 is at the top 
of the window. 

—IN PXXEL_WIDTH The number of columns to be occupied by the panel. 

—IN PIX£L_HEIGHT The number of rows to be occupied by the panel. 

— end formal parameters; 


procedure UWN_RESIZE_PUSHBUTTON ( 


PUSHBUTTON_ID: 

in 

SYS_WINDOW_ELE_ID; 

PIXEL_COL:~ 

in 

SYS_WINDOW_COLUMN; 

PIXEL ROW: 

in 

SYS_WINDOW_ROW; 

PIXEL_WIDTH: 

in 

SYS_WINDOW_COLUMN; 

PIXEL_HEIGHT: 

in 

SYS_WINDOW_ROW); 


— CPM description: Changes the size of a pushbutton editor. 

— formal parameters 

—IN PUSHBUTTON id ID of the pushbutton editor. 


PIXEL COL 


PIXEL ROW 


PIXEL WIDTH 


—IN PIXEL_HEIGHT 

— end formal parameters; 


Column number from within the window where the left 
side of the editor shall be placed, column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The number of columns to be occupied by the editor. 
The number of rows to be occupied by the editor. 


RADIOBUTTON ID: 

in 

SYS WINDOW ELE_ID; 

PIXEL COL: 

in 

SYS_WINDOW_COLUMN; 

PIXEL~ROW» 

in 

SYS_WINDOW_ROW; 

PXXEL~WXDTH: 

in 

SYS_WINDOW_COLUMN; 

PIXEL~REXGBT: 

in 

SYS WINDOW ROW); 


— CPM description: changes the size of a radiobutton editor. 
—• formal parameters 

—IN RADIOBUTTON ID ID of the radiobutton editor. 


—IN PIXEL COL 


Column number from within the window where the left 
aide of the editor shall be placed, column 0 is at 


A-254 




left of the window 


—IN PIXEL ROW 


—IN PIXEL WIDTH 


Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The number of columns to be occupied by the editor. 


—IN PIXEL_HEIGHT The number of rows to be occupied by the editor. 

— end formal parameters; 


procedure UWN_RESIZE_STRING FIELD ( 


EDITOR ID: 

in 

SYS_WINDOW_ELE_ID 

PIXEL COL: 

in 

SYS WINDOW COLUMN 

PIXEL^ROW: 

in 

SYS 

WINDOWROW; 

PIXEL_WIDTH: 

in 

SYS' 

"window COLUMN 

PIXEL~HEIGHT: 

in 

SYS_WINDOW_ROW); 


— CPM description: Changes the size of a string field editor. 

— formal parameters 


—IN 

EDITOR_ID 

ID of the editor. 

—IN 

PIXEL_COL 

Column number from within the window where the left 
side of the editor shall be placed, column 0 is at 
left of the window. 

— IN 

PIXEL_ROW 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

—IN 

PIXEL_WIDTH 

The number of columns to be occupied by the editor. 

—IN 
— end 

PIXEL_HEIGHT 
formal parameters 

The number of rows to be occupied by the editor. 

procedure uwn_RESIZE_window (WIND0W_ID: in SYS window ele ID; 

” PIXEL_COL: in SYS_WINDOW COLUMN; 

PIXEL~ROW: in SYS WINDOW ROW; 

PIXEL~WIDTH: in SYS_WINDOW COLUMN; 

PIXEL_HEIGHT: in SYS_WINDOW_ROW); 

— CPM description: changes the size of a window. 

— formal parameters 
—IN WINDOW__ID 

ZD attached to the window. 

—IN 

PIXEL_COL 

Column number where the left side of the window 
shall be placed. 

—IN 

PIXEL_ROW 

Row number where the top side of the window shall 
be placed. 

—IN 

PIXEL_WIDTH 

The number of columns to be occupied by the 


A-255 





window. 


--IN PIXEL_HEIGHT The number of rows to be occupied by the window. 
— end formal parameters; 


procedure UWN_SELECT_INPUT (WINDOW_TYPE: 

in 

SYS WINDOW 

TYPE; 

WINDOW_ID: 

in 

SYS WINDOW ELE ID; 

MOUSE_BUTTONS: 

in 

UWN_BUTTON 

ACTION; 

EXPOSURE: 

in 

BOOLEAN); 



— cpm description: This function allows the user to select exposure events 

and various mouse inputs for a particular window. 

Each call for the same window overrides any previous 

— call, only the input selected will be returned to the 

— application, however, the application must be aware that 

if the input occurs within any editor or is an 

input handled by either the menu or panel managers, 

— then the application will not be notified of the input. 


— formal parameters 
—IN WINDOW TYPE 


—IN WINDOW ID 


The type of window for which the input is being 
selected for, where: 

SYS_WINDOW ■ a defined window 

SYS_DISPLAY_PANEL “ a displayed panel 
SYS_DEFINED_BUTTON - defined button 

The id given by the application at the time of the 
window type's creation where: 

If window_type is SYS_window and window_id is 0, 
then the selection will be for the Rootwindow 
or (Display). Otherwise, the selection will be 
for the matching window_id. 

If window_type - SYS_DISPLAY_PANEL, the id should 
be the panel id. 

If window_type - SYS_DEFINED_BUTTON, the id should 
be the button id. 


—IN MOUSE_BUTTONS Array of logicals indicating selection of mouse 

— button operations whose input the application 

— wishes to be notified of, where: 

true “ select 

— false - do not select 

— [0] ■ Right Button Down 

— [1] - Middle Button Down 

— [2] - Left Button Down 

— [3] ■ Right Button Up 

— [4] ■ Middle Button Up 

— [5] - Left Button Up 


—IN EXPOSURE Logical indicating whether the application wishes 

— to be notified of exposure events to the working 

— window, where: 

— 0 • Do not notify of exposure events 

1 - Notify of exposure events 


A-256 




NOTE: This logical applies only to windows as 

currently exposure events to a panel or button are 
handled internally. 

— end formal parameters; 


procedure lJWN_SHOW_PANEL (PANEL_ID: in SYS_WINDOW_ELE_ID); 

— cpm description: This procedure displays a panel that has been hidden by 

UWN_HIDE_PANEL and enables user input to any of the 
panel editors. 


— formal parameters 

—IN PANEL_ID ID attached to the panel to 

show. 

— end formal parameters; 


procedure UWN_SHOW_SUBPANEL (SUBPANEL_ID: in SYS_WINDOW_ELE_ID); 

— cpm description: This procedure displays a subpanel that has been hidden 

— by UWN_HIDE_SUBPANEL and enables user input to any of the 

subpanel editors. 

— formal parameters 

—IN subpanel_id ID attached to the aubpanel to 

— show. 

— end formal parameters; 


procedure UWN_TERMlNATE_wiNDOW; 

— cpm description: This procedure terminates the window system. It must be 

called to free the slot in the icon stack assigned to the 

— window when it was created. 

— formal parameters 

— None 

— end formal parameters; 


procedure UWN_TOGGLE_BUTTON (BUTTON_ID» in SYS_WINDOW_ELE_ID; 

BUTTONJLABEL: in STRING); 

— CPM description: This procedure toggles the state of a button and 

optionally relabels it. 

— formal parameters 

—IN bjtton_id ZD attached to the button to 

toggle. 

—IN button_LABEL An optional new label for the button. If this is 

— set to NULL, then the original label will remain. 

— end formal parameters; 


procedure UWN_UNMAP_WINDOW (WINDOW_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: Routine to unmap a created window. Any child window 


A-257 





will no longer be visible until another map call is 
made on the parent via UWN_MAP_WINDOW. 


— formal parameters 

--IN window__ID The ID of the window to be unmapped. 

— end formal parameters; 


procedure UWN_UPDATE_PANEL (PANEL_ID: in SYS_WINDOW_ELE_ID); 

— CPM description: Causes a panel to update its structures with additions 

or deletions of editors. 


— formal parameters 

—IN PANEL_ID ID attached to the panel. 

This ID is required for all interactions with the 
panel. 

— end formal parameters; 
procedure UWN USER_INPUT_FIELD ( 


Field_Type : 

in 

SYS FIELD TYPE; 

Input_String : 

in out 

STRING; 

Max_String_size : 

in . 

POSITIVE; 

opt_Label : 

in 

STRING; 

X Pixel : 

in 

SYS WINDOW COLUMN 

Y Pixel : 

in 

SYS_WINDOW ROW); 


— CPM description: This puts up an editing field for user input of 

— alphanumeric or numeric strings anywhere within the 

— display screen. 


— formal parameters 

—IN Field_Type The type of field to be defined and used: 

SYS_STRING_FIELD 

SYS_NUMBER_FIELD 

—INOUT input_string The variable which will receive the user input. 

This variable may be initialized to some value, which 

— would be displayed. This must be a NULL terminated 

— string. 

—IN Max_string_size The maximum string size allowed for input. The 

field will be defined according to this size. 

The optional label (prompt or string) which the 
application wishes to be displayed on the left side 
of the input field. 

The x screen pixel where the upper left corner of 
the field will be placed. 

The y screen pixel of the display where the upper 
left corner of the input field will be placed. 


—IN Opt_Label 

—IN X_Pixel 
—IN Y Pixel 


A-258 





— end formal parameters 


procedure UWN_WINDOW_TERMINATE (WINDOW_ID : in SYS_WINDOW_ELE_ID; 

TERM_FTAG : out BOOLEAN); 

—cpm description: UWN_wINDow__TERM INATE displays the window terminate prompt 

and~determines if the left button was clicked to confirm 
the terminate action 

— formal parameters: 

— IN window_ID The ID of the window to be terminated. 

— OUT TERM_FLAG The Boolean flag indicating whether the terminate action 

— took place. 

— end formal parameters; 
end UWN WINDOW SYSTEM; 


A-259 



APPENDIX B - Ada PROGRAM SPECIFICATIONS 


This appendix contains the package specifications that are included as 
part of the EDDIC programs. Most of the package specifications exist to 
reduce the size of the program's code and to make the program more 
modularized. As a general rule these specifications are designed for use by 
only the program that they are a part of; however, they might also be handy 
for other purposes. 

The following EDDIC programs contain subordinate package specifications 
CDB - Command and Control (C2) product data base manager. 

HLP - Help window display manager. 

SCL - Station control manager 
SDB - Situation data base manager 
WTD - Tool window display manager. 




CDB Program Package Specifications 

The following package specification is included in the C2 product data base 
manager program: 

CDB_GENERATE_PRODUCT 

—cpc package specification name: CDS_GENERATE_PRODUCT 

—cpc description: The CDB_GENERATE_PRODUCT CPC contains the procedures 

to generate the command and control reports containing 
situation data. 

—cpc design notes: 

—cpc package author: Bruce Packard 

science Applications International Corporation 
— 424 Delaware, suite C3 

Leavenworth, KS 66048 


With SYSTEM_PACKAGE; 
With SDB_SITUATION_DB; 


use SYSTEMJPACKAGE; 
use SDB SITUATION DB; 


package CDB_GENERATE_PRODUCT is 

procedure CDB_BLUEFOR_AMMUNITION ( 

UNIT_ID : in SDBJBLUEFOR_UNIT_ID; 

DATEJTIME : in S YS~DATE_TIME; 

OPPLAN : in SYS~OPPLAN; 

SITUATION_SOCK : in out SYs“cLIENT; 

CHAR_COUNT ; out SYS_PRODUCT_LENGTH; 

REPORT_TEXT : in SYS~TEXT_PTR); 

— CPM description: This procedure generates a ammunition strength report 

for an BLUEFOR unit. 


— formal parameters 
—IN UNIT ID 


—OUT 


—OUT 


DATE TIME 


OPPLAN 


SITUATION SOCK 


CHAR COUNT 


REPORT TEXT 


- The ID of the unit to generate an 
ammunition strength report for. 

- Date-time group of requested report 

- operational Plan of requested report 

- The socket number of the situation data 
router. 

- The number of characters in the report. 

- The ASCII text of the report. 


— end formal parameters; 


procedure CDB_BLUEFOR EQUIPMENT ( 

UNIT ID~ : in 

date”time i in 


SDB BLUEFOR_UNIT ID; 
SYS~DATE_TIKE; “ 







r 




OPPLAN 

: in SYS OPPLAN; 


SITUATION_SOCK 

: in out SYS_CLIENT; 


CHAR_COUNT 

: out SYS_PRODUCT_LENGTH; 


REPORTJTEXT 

: in SYS_TEXT_PTR); 

— CPM description: This procedure generates a equipment strength report 

— 

for an BLUEFOR unit. 

— formal 

parameters 


—IN 

UNIT_ID 

- The ID of the unit to generate an 

— 


equipment strength report for. 

—IN 

DATEJTIME 

- Date-time group of requested report 

— IN 

OPPLAN 

- Operational Plan of requested report 

—IN 

SITUATION_SOCK 

- The socket number of the situation data 

— 


router. 

—OUT 

CHAR_COUNT 

- The number of characters in the report. 

—OUT 

REPORT_TEXT 

- The ASCII text of the report. 


— end formal parameters; 


procedure CDB BLUEFOR FUEL ( 
UNIT_ID 


in 

SDB BLUEFOR UNIT_ID; 

DATE TIME 


in 

SYS DATE TIME; 

OPPLAN 


in 

SYS OPPLAN; 

SITUATION SOCK 


in out 

SYS CLIENT; 

CHAR COUNT 


out 

SYS PRODUCT LENGTH; 

REPORT TEXT 


in 

SYS TEXT PTR); 


— CPM description: This procedure generates a fuel strength report 

for an BLUEFOR unit. 


— formal 

— IN 

parameters 

UNIT_ID 

- The ID of the unit to generate a fuel 
strength report for. 

—IN 

DATEJTIME 

- Date-time group of requested report 

— IN 

OPPLAN 

- operational Plan of requested report 

—IN 

—OUT 

SITUATION_SOCK 

CHAR_COUNT 

- The socket number of the situation data 
router. 

- The number of characters in the report. 

—OUT 

REPORT_TEXT 

- The ASCII text of the report. 


— end formal parameters; 


procedure CDB_BLUEFOR PERSONNEL ( 
~UNIT_ID 

1 

in 

SDB BLUEFOR UNITJCD; 

DATE _ TIKE 

: 

in 

SYS DATE_TIME; 

OPPLAN 

: 

in 

SYS OPPLAN; 

SITUATION SOCK 

s 

in out 

SYS~CLIENT; 


8-3 




CHAR_C0UNT : out SYS_PRODUCT_LENGTH; 

REPORT_TEXT s in SYS_TEXT_PTR); 

— CPM description: This procedure generates a personnel strength report 

— for an bluefor unit. 


— formal 
—IN 

parameters 

UNIT_ID 

- The ID of the unit to generate a 
personnel strength report for. 

— IN 

DATE_TIME 

- Date-time group of requested report 

— IN 

OPPLAN 

- operational Plan of requested report 

—IN 

—OUT 

SITUATION_SOCK 

CHAR_COUNT 

- The socket number of the situation data 
router. 

- The number of characters in the report. 

—OUT 

REPORT_TEXT 

- The ASCII text of the report. 


— end formal parameters; 


procedure CDB BLUEFOR TASK ORG ( 
UNIT_ID 


in 

SDB_BLUEFOR_UNIT_ID; 

DATE TIME 

2 

in 

SYS DATE TIME; 

OPPLAN 

• 

• 

in 

SYS OPPLAN; 

SITUATION_SOCK 

• 

in out 

SYS_CLIENT; 

CHAR COUNT 

2 

out 

SYS PRODUCT LENGTH; 

REPORT TEXT 

2 

in 

SYS TEXT PTR); 


— CPM description: This procedure generates a task organization report 

for a BLUEFOR unit. 


— formal parameters 


—IN 

UNIT_ID 

- The ZD of the unit to generate a task 

—IN 

DATE_TIME 

organization report for. 

- Date-time group of requested report 

—IN 

OPPLAN 

- Operational Plan of requested report 

— IN 

SITUATION_SOCK 

- The socket number of the situation data 

—OUT 

CHAR_COUNT 

router. 

- The number of characters in the report. 

—OUT 

REPORT_TE XT 

- The ASCII text of the report. 


— end formal parameters; 


procedure CDB_OPFOR_COMMITTED ( 


UNIT_ID 

2 

in 

SDB OPFOR UNIT ID; 

DATE TIME 

2 

in 

SYS”dATE_TIME; 

OPPLAN 

2 

in 

SYS“0PPLAN; 

SITUATION SOCK 

2 

in out 

SYS~CLIENT; 

C HAR_COUNT 

2 

out 

sys”product_length 

REPORT_TEXT 

2 

in 

SYS~TEXT PTR); 


8-4 






— cpm description: This procedure generates a OPFOR committed report 

for an OPFOR unit. 


— formal 

parameters 


— IN 


UNIT_ID 

- The ID of the unit to generate a opfor 

— 



committed report for. 

— IN 


DATE_TIM£ 

- Date-time group of requested report 

—IN 


OPPLAN 

- operational Plan of requested report 

—IN 


SITUATION_SOCK 

- The socket number of the situation data 

— 



router. 

—OUT 


CHAR_COUNT 

- The number of characters in the report. 

—OUT 


REPORT_TEXT 

- The ASCII text of the report. 

— end 

formal parameters; 


procedure 

CDB_OPFOR EQUIPMENT 

( 



UNIT ID 

: in SDB OPFOR UNIT_ID; 



DATEJTIME 

: in SYS DATE TIME; 



OPPLAN 

: in SYS OPPLAN; 



SITUATION SOCK 

: in out SYS~CLIENT; 



CHAR COUNT 

: out SYS PRODUCT LENGTH; 



REPORT_TEXT 

: in SYS TEXT PTR); 

— CPM 

description: This procedure generates a equipment strength report 

— 


for an OPFOR unit. 

— formal 

parameters 


—IN 


UNIT_ID 

- The ID of the unit to generate a OPFOR 

— 



equipment strength report for. 

—IN 


DATEJTIME 

- Date-time group of requested report 

—IN 


OPPLAN 

- Operational Plan of requested report 

—IN 


SITUATION_SOCK 

- The socket number of the situation data 

— 



router. 

—OUT 


CHAR_COUNT 

- The number of characters in the report. 

—OUT 


REPORT_TEXT 

- The ASCII text of the report. 


— end formal parameters; 


procedure CDB_OPFOR REINFORCED ( 


UNIT_ID 

: in 

SDB_OPFOR_UNXT_XD; 

DATE TIME 

: in 

sys“date tike; 

OPPLAN 

: in 

SYS~OPPLAN; 

SITUATION SOCK 

t in out 

SYS~CLIENT; 

CHAR_COUNT 

t out 

SYS“pRODUCT_LENGTB; 

REPORT TEXT 

: in 

SYS~TEXT_PTR); 


— CPM description: This procedure generates a OPFOR reinforcement report 

— for an opfor unit. 


0-5 





— formal 

parameters 


—IN 


UNIT_ID 

- The ID of the unit to generate a OPFOR 

rnrnmm 



reinforcement report for. 

— IN 


DATEJTXME 

- Date-time group of requested report 

—IN 


OPPLAN 

V 

- Operational Plan of requested report 

—IN 


SITUATION_SOCK 

- The socket number of the situation data 

— 



router. 

—OUT 


CHAR__COUNT 

- The number of characters in the report. 

—OUT 


REPORT_TEXT 

- The ASCII text of the report. 

— end 

formal parameters; 


procedure 

CDB__OPFOR TASK ORG ( 




UNIT_ID ~ 

J in SDB OPFOR UNIT ID; 



DATE TIME 

: in SYS DATE TIME; 



OPPLAN 

: in SYS OPPLAN; 



SITUATION_SOCK 

: in out SYS_CLIENT; 



CHAR_COUNT 

» out SYS_PRODUCT LENGTH; 



REPORT_TEXT 

S in SYS_TEXT_PTR); 

— CPM 

descriptions This procedure generates a task organization report 

" 


for an OPFOR unit. 

— formal 

parameters 


— IN 


UNITJED 

- The ID of the unit to generate a task 




organization report for. 

— IN 


DATE_TIME 

- Date-time group of requested report 

—IN 


OPPLAN 

- Operational Plan of requested report 

—IN 


SITUATION_SOCK 

- The socket number of the situation data 

— 



router. 

—OUT 


CHAR_COUNT 

- The number of characters in the report. 

—OUT 


REPORTJTEXT 

- The ASCII text of the report. 


— end formal parameters; 


end CDB_GENERATE PRODUCT; 



The following package specification is included in the Help Window manager 
program: 


HLP HELP REPORT 





—cpm procedure name: HLP_HELP_REPORT 

—cpm description: HLP_HELP_REPORT displays a EDDXC Help Report Window. 
—cpm design notes: 

—cpm procedure author: Bruce Packard 

Science Applications international corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEM PACKAGE; 
with HDB_HELP_DB; 

package HLP_HELP_REPORT is 


use SYSTEM_PACKAGE; 
use HDB HELP DB; 


task type HLP_HELP_TASK is 


entry INITIALIZE 


[ PRODUCT 


in 

SYS 

TEXT_PTR; 

LENGTH 


in 

SYS' 

”PR0DUCT_LENGTH; 

C0L0R_F0NT 


in 

SYS" 

"WINDOW ELE ID; 

FONT_WIDTH 


in 

SYS WINDOW COLUMN; 

FONT~HEIGHT 

: 

in 

SYS 

WINDOW_ROW; 

FONT_MASK 

: 

in 

SYS* 

"COLOR MASK; 

WINDOW 

• 

e 

out 

SYS_WINDOW_ELE_ID); 


— CPM description: This entry point creates a popup window to display 

— a EDDIC Help report in and gets the report from the 

— Help DB manager. 


— formal parameters 


-IN 

PRODUCT 

Textual Report to Display. 

-IN 

LENGTH 

The number of characters in the report. 

-IN 

COLOR_FONT 

The ID of the color font that was downloaded by the 
calling process. 

-IN 

FONTJWIDTH 

The width of the color font. 

-IN 

FONTJBEIGHT 

The height of the color font. 

-IN 

FONT_MASK 

The mask to use with the color font. 

-OUT 

WINDOW 

The ID of the newly created popup window. 


— end formal parameters; 


entry process input 


<NEW_WINDOW_INPUT : 

new“window“value : 
newj«ndow“data : 

WINDOW TERMINATED : 


in SYS_WINDOW_INPUT; 
in SYS~WINDOW~VALUE; 
in SYS~WINDOW~DATA; 
out BOOLEAN); 


— CPM description: This entry point processes and input that has 

— happended for the popup window created by INITIALIZE. 

— This entry point should be called for all input 


B-8 







from uwn that matches the window ZD from INITIALIZE. 
The wiNDOW_TERMINATED flag is set to true if the 

— selected action causes the deletion of the popup 

window. 

— formal parameters 

—IN NEW_WINDOW_INPUT Input type (See UWN_WINDOW_SYSTEM for a 
~ complete description). 

—IN N£W_WINDOW_VALUE input value (See UWN_WINDOW_SYsTEH for a 

complete description). 

—IN NEW_WINDOW_DATA Input data (See UWN_WINDOW_SYSTEM for a 

— ~ complete description). 

—out window_termiNated window Termination flag 

— true ” Window was terminated 

false ■ Window was not terminated. 


— end formal parameters; 
entry TERMINATE_TASK; 

— CPM description: This entry point terminates popup status window. 


end; 


end HLP_HELP_REPORT; 




SCL Program Package Specifications 


The following package specification is included in the station control manage 
program: 


LUT MANAGER 


B-10 









—cpc package specification name: LUT_MANAGER 

—cpc description: LUT_MANAGER contains the low level color lookup utilities. 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications International corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEM_PACKAG£; use SYSTEM_PACKAGE; 

package LUT_MANAGER is 

procedure LUT_LOAD_GRID_CONT_COLOR; 

— CPM description: Loads the grid and contour colors into the color lookup 

— table. 


— formal parameters 

— None 


procedure LUT_LOAD_GEN_COLOR; 

— CPM description: Loads the general colors into the color lookup table. 

— formal parameters 

— None 


procedure LUT_INIT_LOOK_UP_TABLE ( 

HILITE_FILE » in STRING; 

UNHILITE_FILE : in STRING); 

— CPM description: Initializes the color lookup table arrays. 

— formal parameters 

—IN HILITE_FILE The name of the file containing the map highlight 

— lookup table file names. 

—IN UNHILITE_FILE The name of the file containing the map unhighlight 

lookup table file names. 


procedure LUT_LOAD_HYDRO_COLOR ( 

~HILITE_FLAG t in BOOLEAN); 

— CPM description: Loads the hydrography colors into the color lookup table. 

— formal parameters 

—IN HILITE_FLAG Flag indicating if the hydrography is being 

— ~ highlighted or returned to the normal color. 

— (True ■ Highlight; False ■ single color) 



procedure LUT_LOAD_BACK_COLOR; 

— cpm description: Loads the map colors into the color lookup table. 

— formal parameters 

— None 

procedure LUT_LOAD_MISC_COLOR ( 

HILITE_FLAG : in BOOLEAN); 

— CPM description: Loads the miscellaneous feature colors into the color 

— lookup table. 


— formal parameters 

—IN HXLITE_FLAG Flag indicating if the misc. features are being 

highlighted or returned to the normal color. 
(True ** Highlight; False * single color) 


procedure LUT_LOAD_OVERLAY_COLOR; 

— cpm description: Loads overlay colors into the color lookup table. 

— formal parameters 

None 


procedure LUT_LOAD_ROAD_COLOR ( 

_ HILITE_FLAG : in BOOLEAN); 

— cpm description: Loads the road colors into the color lookup table. 

— formal parameters 

—IN HILITE_FLAG Flag indicating if the roads are being 

highlighted or returned to the normal color. 
(True * Highlight; False * single color) 


procedure LUT_LOAD_URBAN_COLOR ( 

~HILITE_FLAG : in BOOLEAN); 

— cpm description: Loads the urban area colors into the color lookup table. 

— formal parameters 

—IN HILXTE_FLAG Flag indicating if the urban areas are being 

highlighted or returned to the normal color. 

(True * Highlight; False - single color) 


procedure LUT_READ_HILITZ_LUT; 

— CPM description: Reads the colors for the highlighted digital map. it 

— uses the current map background type to determine which 

— file to read 


B-12 






— formal parameters 

— None 


procedure LUT_READ_OVERLAY_LUT { 

_ FILE_NAME : in STRING); 

— CPM description: Reads the colors for the overlay planes. 

— formal parameters 

—IN Fii»E_NAME The name of the overlay color lookup table file. 


procedure LUT_READ_UNHILITE_LUT; 

— CPM description: Reads the colors for the unhighlighted digital map. It 

uses the current map background type to determine which 
file to read 


— formal parameters 

— None 


end LUT MANAGER; 


B-13 






The following package specifications are included in the situation data base 
manager program: 

SDB_INPUT_OUTPUT 
S D B_PACKAGE 
SDB_SEND_DATA 
SDB~UPDATE DB 






—cpc package specification name: SDB_INPUT_OUTPUT 

—cpc description: This package contains the disk input/output utilities for 

SDB_SITUATION_DB_MANAGER 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications International Corporation 
424 Delaware, Suite C3 
— Leavenworth, KS 66048 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 
with S D B_S ITUAT I ON_DB; use SDB_SITUATION__DB; 

package SDB_INPUT_OUTPUT is 

procedure SDB_OPEN_SITUATION_DB; 

—cpm description: SDB_OPEN_SITUATION_DB opens the data bases that contain 

the scenario situation data 
— formal parameters 
None 


procedure SDB_READ_INDEX_FILES; 

—cpm description! SDB_READ_INDEX_FIL£S reads the index files for the 

— situation data bases 

— formal parameters 

None 


procedure SDB_WRITE_INDEX_FILES; 

—cpm description: SDB_WRITE_INDEX_FILES writes the index files to disk. 

— formal parameters 

— None 


procedure SDB_FIND_CNTRL_MSR 


;cm_id 

s 

in 

SDB_CONTROL_MEASURE_ID; 

TIME 

: 

in 

S Y S_DATE_TIME; 

OPPLAN 

s 

in 

SYS_OPPLAN; 

INDEX 

: 

out 

SDB_CNTRL_MSR_PTR; 

FOUND FLAG 

: 

out 

BOOLEAN); 


—cpm description: Finds a control measure record for a control measure. 


— formal parameters 


IN 

CM_ID 

IN 

TIME 


The ZD of the control measure to find. 
Date/Time group for data selection. 


B-15 





—IN OPLLAN 


OPLAN ID for data selection. 


—OUT INDEX Index into the data base for the control measure. If 

— the control measure is not found, the INDEX points to 

place to insert a new record. 

—OUT FOUND_FLAG Logical flag to indicate if a record was found. 

(True = Record found; False - Record not found) 


procedure SDB_FIND_CNTRL_MSR_PNT 


(CM ID : in 

TIME : in 

OPPLAN : in 

INDEX : out 

FOUND FLAG : out 


SDB_CONTROL_MEASURE_ID ; 
SYS_DATE_TIME; 
SYS_OPPLAN; 
SDB_CNTRL_POINT_PTR; 
BOOLEAN) 


—cpm description: Finds a point control measure record for a point control 


measure. 


— formal parameters 
—IN CM_ID 

—IN TIME 

—IN OPLLAN 


The ID of the point control measure to find. 
Date/Time group for data selection. 

OPLAN ID for data selection. 


—OUT INDEX 


—OUT FOUND FLAG 


Index into the data base for the point control 
measure. If the control measure is not found, the 
INDEX points to place to insert a new record. 

Logical flag to indicate if a record was found. 
(True » Record found; False = Record not found) 


procedure SDB_FlND_OBSTACLE 

(OBS ID : in 

TIME » in 

OPPLAN : in 

INDEX : out 

FOUNDJTLAG J out 

—cpm description: Finds an obstacle record for a specified time. 


SDB_OBSTACLE_ID; 
SYS~DATE_TIME; 
SYSJ5PPLAN; 
SDB_OBST_PTR; 
BOOLEAN )T 


— formal parameters 

—IN OBS_ID 

— IN TIME 

—IN OPLLAN 

—OUT INDEX 


The ID of the obstacle to find. 

Date/Time group for data selection. 

OPLAN ID for data selection. 

Index into the data base for the obstacle. If the 
obstacle is not found, the INDEX points to place 
to insert a new record. 


—OUT FOUND_FLAG Logical flag to indicate if a record was found. 


B-16 






(True = Record found; False * Record not found) 


procedure SDB FIND BLUEFOR AUTH_AMMO 


(UNIT_ID 


in 

SDB_BLUEFOR_UNIT_ID; 

TIME 


in 

SYS DATE TIME; 

OPFLAN 

• 

in 

SYS OPPLAN; 

INDEX 

• 

• 

out 

SDB_BLUE_AM_AUTH_PTR; 

FOUND FLAG 

s 

out 

BOOLEAN); 


—cpm description: Finds the authorized ammunition record for a unit. 


— formal parameters 


—IN 

UNIT_ID 

The ID of the unit that owns the ammunition. 

—IN 

TIME 

Date/Time group for data selection. 

— IN 

OPLLAN 

OPLAN ID for data selection. 

—OUT 

INDEX 

Index into the data base for the authorized ammo 
record. If the authorized ammo record is not found 
the INDEX points to place to insert a new record. 

—OUT 

FOUND_FLAG 

Logical flag to indicate if a record was found. 
(True * Record found; False « Record not found) 


procedure SDB_FIND_BLUEFOR_CURR_AMMO 


(UNIT_ID 

X 

in 

SDB BLUEFOR UNIT ID; 

AMMO ID 

X 

in 

SDB BLUEFOR AMMO ID; 

TIME 

: 

in 

SYS DATE TIME; 

OPPLAN 

: 

in 

SYS_OPPLAN; 

INDEX 

X 

out 

SDB_BLUE_AM_CURR_PTR 

FOUND FLAG 

i 

out 

BOOLEAN); 


—cpm description: Finds the on-hand ammunition record for a unit and ammo 

type. 


— formal parameters 


—IN 

UNIT_ID 

The ID of the unit that owns the ammunition. 

—IN 

AKMO_ID 

The ID of the ammunition to find. 

—IN 

TIME 

Date/Time group for data selection. 

—IN 

OPLLAN 

oplan id for data selection. 

—OUT 

INDEX 

index into the data base for the on-hand ammo 
record. If the on-hand ammo record is not found, 
the INDEX points to place to insert a new record. 

—OUT 

FOUND_FLAG 

Logical flag to indicate if a record was found. 


(True " Record found; False ■ Record not found) 


procedure SDB FIND BLUEFOR AUTH EQUIP 


B-17 




(UNIT_ID s in 

TIME : in 

OPPLAN s in 

INDEX : out 

FOUND_FLAG s out 

—cpm description: Finds the authorized equipment record for a unit. 

— formal parameters 


—IN 

UNITJTD 

The ID of the unit that owns the equipment. 

—IN 

TIME 

Date/Time group for data selection. 

— IN 

OPLLAN 

OPLAN id for data selection. 

—OUT 

INDEX 

Index into the data base for the authorized equipment 
record. If the authorized equip record is not found, 
the INDEX points to place to insert a new record. 

—OUT 

FOUND FLAG 

Logical flag to indicate if a record was found. 

(True *> Record found; False ■ Record not found) 


SDB_BLUEFOR_UN IT__I D; 

S Y S_DATE_TIME; ~ 

SYS_OPPLAN; 
SDB_BLUEJSQ_AUTB__PTR ; 
BOOLEAN)” 


procedure SDB FIND BLUEFOR CURR EQUIP 


(UNIT_ID : in 

EQUIP_ID : in 

TIME : in 

opplan : in 

INDEX : out 

FOUND FLAG : OUt 


SDB_BLUEFOR_UNIT__ID; 
SDB ~BLUEFOR_EQUIP_ID; 
SYS_DATE_TIME; 
SYS_OPPLAN; 

SDB BLUE_EQ_CVBR_PTR; 
BOOLEAN); 


—cpm description: Finds the operational equipment record for a unit and 
— equip type. 


— formal parameters 


—IN 

UNIT__ID 

The ID of the unit that owns the equipment. 

—IN 

EQUIP_ID 

The ID of the equipment to find. 

—IN 

TIME 

Date/Time group for data selection. 

—IN 

OPLLAN 

OPLAN ID for data selection. 

—OUT 

INDEX 

Index into the data base for the operational equipment 
record. If the operational equip record is not found, 
the INDEX points to place to insert a new record. 

—OUT 

FOUND_FLAG 

Logical flag to indicate if a record was found. 

(True ■ Record found; False “ Record not found) 


procedure SDB FIND BLUEFOR PERS 


(UNIT ID 

s 

in 

SDB BLUEFOR_UNIT_ID} 

time” 

: 

in 

SYS_DATE_TIKEf ~ 

OPPLAN 

: 

in 

SYS OPPLAN; 

INDEX 

: 

out 

SDB~BLUZ PERS_PTRj 


B-18 







FOUND_FLAG : out BOOLEAN); 


—cpm description: Finds the personnel record for a unit. 


— formal parameters 
—IN UNIT_ID 

—IN TIME 

—IN OPLLAN 


The ID of the unit that owns the equipment. 
Date/Time group for data selection. 
oplan ID for data selection. 


—OUT INDEX Index into the data base for the personnel record. If 

— the personnel record is not found, the INDEX points to 

— the place to insert a new record. 

—OUT FOUND_FLAG Logical flag to indicate if a record was found. 

(True - Record found; False - Record not found) 


procedure SDB_FIND_BLU£FOR_FUEL 
(UNIT_ID 
TIME 
OPPLAN 
INDEX 

FOUND FLAG 


J in SDB_BLUEFOR_UNIT_ID; 

t in SYS_DATEJTIME; 

: in SYS_OPPLAN; 

: out SDB_BLUE_FUEL_PTR; 

: out BOOLEAN); 


—cpm description: Finds the fuel record for a unit. 


— formal parameters 
—IN UNIT_ID 

—IN TIME 

—IN OPLLAN 


The ID of the unit that owns the fuel. 
Date/Time group for data selection. 
OPLAN ID for data selection. 


—OUT INDEX Index into the data base for the fuel record. If 

the fuel record is not found, the INDEX points to 
the place to insert a new record. 

—out found_flag Logical flag to indicate if a record was found. 

— (True “ Record found; False * Record not found) 


procedure SDB FIND BLUEFOR STATUS 


(UNIT ID 

I 

in 

SDB_BLUEFOR_UNIT ID 

TIME 

t 

in 

SYS~DATE TIME; 

OPPLAN 

1 

in 

SYS_OPPLAN; 

INDEX 

s 

out 

8DB_BLUE STAT PTR; 

FOUND_FLAG 

t 

out 

BOOLEAN )T 


—cpm description: Finds the status record for a unit. 
— formal parameters 


—IN 

UNIT_ID 

The ID Of 

the unit to find. 

—IN 

TIME 

Date/Time 

group for data selection 


B-19 






OPLLAN 


OPLAN ID for data selection 


—IN 

—OUT INDEX Index into the data base for the unit status record. 

If the unit status record is not found, the index 
points to the place to insert a new record. _ 

—OUT FOUND_FLAG Logical flag to indicate if a record was found. 

(True = Record found; False * Record not found) 


procedure SDB FIND BLUEFOR LOCATION 


(UNIT ID 


in 

SDB BLUEFOR UNIT ID 

TIME - 


in 

SYS DATE TIME; 

OPPLAN 


in 

SYS - OPPLAN; 

INDEX 


out 

SDB - BLUE ULOC PTR; 

FOUND_FLAG 


out 

BOOLEAN); 


—cpm descriptions Finds the unit location record for a unit. 


— formal parameters 
—IN UNIT_ID 

—IN TIME 

—IN OPLLAN 


The ZD of the unit to find the location of. 
Date/Time group for data selection. 

OPLAN ID for data selection. 


—OUT INDEX 


—OUT FOUND FLAG 


Index into the data base for the unit location record. 
If the unit location record is not found, the index 
points to the place to insert a new record. 

Logical flag to indicate if a record was found. 

(True * Record found; False » Record not found) 


procedure sdb_find_opfor auth equip 


(UNIT_ID s in 

TIME s in 

OPPLAN I in 

INDEX s out 

FOUND FLAG J out 


SDB_OPFOR_UNIT_ID; 

SYS_DATE_TIME; 

SYS_OPPLAN; 

SDB_OPFOR_EQ_AUTH_PTR; 
BOOLEAN); 


—cpm descriptions Finds the authorised equipment record for a unit. 
— formal parameters 


— IN 

UNIT_ID 

The ZD of the unit that owns the equipment. 

—IN 

TIME 

Date/Time group for data selection. 

—IN 

OPLLAN 

OPLAN ID for data selection. 

—OUT 

INDEX 

Index into the data base for the authorized equipment 
record. If the authorized equip record is not found, 
the INDEX points to place to insert a new record. 

—OUT 

FOUND_FLAG 

Logical flag to indicate if a record was found. 


B-20 



(True - Record found; False » Record not found) 


procedure SDB_FIND_OPFOR_CURR_EQUIP 


(UNIT_ID 

: in 

SDB OPFOR_UNIT__ID; 

EQUIP ID 

: in 

SDB OPFOR EQUIP ID; 

TIME 

: in 

SYS DATE TIME; ” 

OPPLAN 

: in 

SYS OPPLAN; 

INDEX 

: out 

SDB_OPFOR_EQ_CURR_PTR; 

FOUND FLAG 

: out 

BOOLEAN)}" ~ 

—cpm description: Finds the operational 

equipment record for a unit and 


equip type. 


— formal parameters 


z 

H 

1 1 

1 1 

UNIT_ID 

—IN 

EQUIP_ID 

—IN 

TIME 

—IN 

OPLLAN 

—OUT 

INDEX 


The ID of the unit that owns the equipment. 

The ID of the equipment to find. 

Date/Time group for data selection. 

OPLAN ID for data selection. 

Index into the data base for the operational equipment 
record. If the operational equip record is not found, 
the INDEX points to place to insert a new record. 


—out found_FLAG Logical flag to indicate if a record was found. 
— (True “ Record found; False - Record not found) 


procedure SDB_FIND_OPFOR STATUS 


UNIT ID 

: in 

SDB_OPFOR_UNIT ID; 

TIME 

: in 

8YS DATE TIME; 

OPPLAN 

: in 

SYS OPPLAN; 

INDEX 

: out 

SDB _ OPFOR STAT PTR 

FOUND_FLAG 

: out 

BOOLEAN); 


—cpm description: Finds the status record for a unit. 


— formal parameters 
—IN UNIT_ID 

—IN TIME 

—IN OPLLAN 


The ID of the unit to find. 
Date/Time group for data selection. 
oplan ID for data selection. 


--OUT INDEX 


—OUT FOUND FLAG 


Index into the data base for the unit status record. 
If the unit status record is not found, the index 
points to the place to insert a new record. 

Logical flag to indicate if a record was found. 

(True • Record found; False » Record not found) 


procedure SDB FIND OFFOR LOCATION 


B-21 



(UNIT_ID 
TIME - 
OPPLAN 
INDEX 

FOUND FLAG 


! in SDB_OPFOR_UNIT_ID; 

s in SYS_DATE_TIME; 

: in SYS~OPPLAN; 

s out SDB OPFOR_ULOC_PTR } 
t OUt BOOLEAN); 


—cpm description: Reads the unit location record for a unit. 
— formal parameters 


IN 

UNIT_ID 

The ID of the unit to find the location of. 

IN 

TIKE 

Date/Time group for data selection. 

IN 

OPLLAN 

OPLAN ID for data selection. 

OUT 

INDEX 

Index into the data base for the unit location record. 
If the unit location record is not found, the index 
points to the place to insert a new record. 

OUT 

FOUND_FLAG 

Logical flag to indicate if a record was found. 

(True * Record found; False ■ Record not found) 


procedure SDB_WRITE_CNTRL_MSR 


(INDEX 

: in 

SDB CNTRL_MSR PTR; 

CMREC 

: in 

SDB_CONTROL_MEASURE_REC 

ADD FLAG 

: in 

boolean); 


—cpm description: Writes a control measure record for a specific time. 


— formal parameters 


IN 

INDEX 

IN 

CN_REC 

IN 

ADD_FLAG 


Index into the data base where the record is to be 
inserted. 

Description of the control measure to write. 

Logical flag to indicate if the record should be 
added or updated. 

True * Add the record; 

False - replace the data currently in the 
data base for this control measure 


procedure SDB_WRITE CNTRL_MSR_PNT 

(INDEX ~ » in 
CM_REC I in 
ADD FLAG I in 


SDB CNTRL_POINT_PTR; 
8DB~CNTRL_KSR_POINT_REC; 

boolean);" ~ 


—cpm description: writes a point control measure record for a specific time. 


— formal parameters 

—IN INDEX Index into the data base where the record is to be 

— inserted. 

—IN CH_rec Description of the point control measure to write. 


B-22 




—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True - Add the record; 

False - replace the data currently in the 
— data base for this point control measure 


procedure sdb WRlTE_OBSTACLE 
“ (INDEX 

OBS_REC 
ADD FLAG 


in SDB OBST_PTR; 

in SDB~OBSTACLE_REC; 

in boolean); 


—cpm description: Writes an obstacle record for a specific time. 


— formal parameters 


•IN 

INDEX 

IN 

OBS_REC 

IN 

ADDJFLAG 


Index into the data base where the record is to be 
inserted. 

Description of the obstacle to write. 

Logical flag to indicate if the record should be 
added or updated. 

True ■ Add the record; 

False - replace the data currently in the 
data base for this obstacle 


procedure SDB_WRITE_BLUEFOR_AUTH_AMMO 
(INDEX in 

AUTH_REC : in 

ADD FLAG : in 


SDB_BLUE_AM AUTH_FTR; 
SD8_AMM0_AUTH_LIST; 
boolean); 


—cpm description: Writes the authorized ammunition record for a unit. 


— formal parameters 


IN 

INDEX 

IN 

AUTH__REC 

IN 

ADD_FLAG 


Index into the data base where the record is to be 
inserted. 

Description of the authorized ammunition to write. 

Logical flag to indicate if the record should be 
added or updated. 

True - Add the record; 

False - replace the data currently in the 

data base for this authorize ammunition 


procedure SDB_WRITE_BLUEFOR_CURR_AKHO 

~ (INDEX ~ "l in SDB BLUZ_AM_CURR PTR; 

cura_rec i in sdb”blubfor“ammo“qty; 

add_flag i in boolean); 

—cpm description: Writes the on-hand ammunition for a unit and ammo type. 
— formal parameters 

—IN INDEX Index into the data base where the record is to be 


B-23 




inserted. 


—IN CURR_R£C Description of the on-hand ammunition to write. 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True * Add the record; 

False ■ replace the data currently in the 

data base for this on-hand ammunition 


procedure SDB_WRITE_BLUEFOR AUTH_EQUIP 
(INDEX “ s in 

AUTH_REC j in 

ADD FLAG : in 


S DB_BLUE_EQ_AUTH_PTR; 
SDBJEQUIP_AUTH_LIST; 
boolean); 


—cpm description: Writes the authorized equipment for a unit. 
— formal parameters 


—IN 

INDEX 

Index into the data base where the record is to be 
inserted. 

—IN 

AUTH_REC 

Description of the authorized equipment to write. 

—IN 

ADD_FLAG 

Logical flag to indicate if the record should be 
added or updated. 

True - Add the record; 

False «* replace the data currently in the 

data base for this authorized equipment 

procedure SDB_WRITE_BLUEFOR_CURR_EQUIP 

(INDEX ~ 1 in SDB BLUE_EQ CURR PTR; 

CURR_REC : in SDB_BLUEFOR_EQUIP_QTY; 

ADD_FLAG : in boolean); 

--cpm 

description: 

Writes the operational equipment for a unit and equip 
type. 

— formal parameters 

—IN INDEX Index into the data base where the record is to be 

inserted. 

—IN 

CURR_REC 

Description of the operational equipment to write. 

i i i i i 
i i i i i 

M 

as 

ADD_FLAG 

Logical flag to indicate if the record should be 
added or updated. 

True - Add the record; 

False “ replace the data currently in the 

data base for this operational equipment 


procedure SDB WRITE BLUEFOR PERS 

(INDEX “ : in 
PERS RFC : in 
ADD FLAG : in 


SDB_BLUE_PERS_PTR; 
SDB~PERSONNEL; 
booTean); 






—cpm description: Writes the personnel record for a unit. 


— formal parameters 


— IN 

INDEX 

-IN 

PERS_REC 

-IN 

ADD_FLAG 

I 



Index into the data base where the record is to be 
inserted. 

Description of the personnel record to write. 

Logical flag to indicate if the record should be 
added or updated. 

True - Add the record; 

False “ replace the personnel data currently in the 
data base for this unit 


procedure SDB_WRITE_BLUEFOR_FUEL 

(INDEX : in 
FUEL_REC : in 
ADD FLAG : in 


SDB_BLUE_FUEL_PTR; 
SDB_FUELS; 
boolean); 


—cpm description: Writes the fuel record for a unit. 




— formal parameters 

Index into the data base where the record is to be 
inserted. 

Description of the fuel record to write. 

Logical flag to indicate if the record should be 
added or updated. 

True - Add the record; 

False » replace the fuel data currently in the 
data base for this unit 


procedure SDB WRITE_BLUEFOR_STATUS 

~ (INDEX I in 

STATUS REC : in 

ADD_FLAG : in 

—cpm description: Writes the status record for a unit. 

— formal parameters 

Index into the data base where the record is to be 
inserted. 

Description of the unit status record to write. 

Logical flag to indicate if the record should be 
added or updated. 

True - Add the record; 

False - replace the status data currently in the 
data base for this unit 


—IN INDEX 


—IN 

STATUS_REC 

— IN 

ADD_FLAG 


SDB_BLUZ_STAT_PTR; 
SDB_BLUE_UNIT_STATUS; 

boolean)7 


■IN 

INDEX 

■IN 

FUEL_REC 

IN 

ADD_FLAG 


B-25 




procedure SDB_WRITE_BLUEFOR_LOCATION 

(INDEX : in SDB_BLUE_ULOC_PTR; 

LOCATION_REC : in SDB_UN IT_LOCATION; 

add_flag s in boolean); 

—cpm description: Writes the unit location record for a unit. 

— formal parameters 

—IN index Index into the data base where the record is to be 

— inserted. 

--IN LOCATION_REC Description of the unit location record to write. 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True « Add the record; 

False - replace the location data currently in the 
data base for this unit 

procedure SDB_WRITE_OPFOR_AUTH_EQUIP 

(INDEX : in SDB_OPFOR_EQ_AUTH_PTR; 

AUTH_R£C : in SDB_EQUIP_AUTH_LIST; 

ADD_FLAG : in boolean); 

—cpm description: Writes the authorized equipment for a unit. 


— formal parameters 

— IN INDEX 


Index into the data base where the record is to be 
inserted. 


--IN auth_rec Description of the authorized equipment to write. 

—IN add_flag Logical flag to indicate if the record should be 

— added or updated. 

— True - Add the record; 

— False “ replace the data currently in the 

— data base for this authorized equipment 

procedure SDB_WRITE_OPFOR_CURR_EQUIP 

(INDEX j in SDB_OPFOR_EQ_CURR_PTR; 

CURR_REC : in SDB_OPFOR_EQUIP_QTY; 

ADD_flag : in boolean); 

—cpm description: Writes the operational equipment for a unit and equip 
type. 

— formal parameters 

—IN INDEX Index into the data base where the record is to be 

— inserted. 


—IN CURR_REC Description of the operational equipment to write. 

—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 






True = Add the record; 

False 3 replace the data currently in the 

data base for this operational equipment 


procedure SDB WRITE OPFOR STATUS 


(INDEX 

: in 

SDB_OPFOR_STAT_PTR ; 

STATUS REC 

: in 

SDB_OPFOR_UNIT_STATUS; 

ADDJFLAG 

: in 

boolean); 


—cpm descriptions writes the status record for a unit. 


— formal parameters 


— IN 

INDEX 

Index into the data base where 

the record is to be 

— 


inserted. 


— IN 

STATUS_R£C 

Description of the unit status 

record to write. 

—IN 

ADD_FLAG 

Logical flag to indicate if the 

record should be 

— 


added or updated. 


— 


True - Add the record; 



False « replace the status data currently in the 
data base for this unit 


procef 3 ’a e SDB_WRITE_OPFOR_LOCATION 

(INDEX s in SDB_OPFOR_ULOC_PTR; 

LOCATION_REC s in SDB_UNIT_LOCATION; 

ADDJFLAG : in boolean); 

—cpm description: Writes the unit location record for a unit. 

— formal parameters 

—IN INDEX Index into the data baae where the record is to be 

inserted. 

—IN LOCATION_rec Description of the unit location record to write. 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True * Add the record; 

— False * replace the location data currently in 

the data base for this unit 


procedure SDB_READ_CNTRL_MSR 

(INDEX “ S in SDB_CNTRL_MSR_PTR; 

CM_REC s out SDB_CONTROL_MEASURE_REC); 

—cpm description: Reads a control measure record. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT CM_REC control measure record read. 


B-27 






procedure SDB_R£AD_CNTRL_MSR_L1ST 

(TIME : in SYS_DATE_TIME; 

OPPLAN : in SYSjOPPLAN; 

CM_LIST : in out SDB_ALL_CNTRL_MSR); 

—cpm description: Reads the control measure list for a specific time. 

— formal parameters 


— IN 

TIME 

Date/Time group 

for data 

selection. 

— IN 

OPLLAN 

OPLAN ID for data selection. 

—OUT 

CM_LIST 

List of control 

measures 

for specified time 


procedure SDB_R£AD_CN?RL_MSR_PNT 

(INDEX : in SDB_CNTRL_POINT_PTR; 

CM_REC : out SDB~CNTRL_MSR_POINT__REC) ; 

—cpm description: Reads a point control measure record. 

— formal parameters 

—IN XNDEX Index into the data base of tne record to be read. 

—OUT CM REC Point control measure record read. 


procedure SDB_READ_CNTRL_MSR_PNT_LIST 

(TIME _ : in SYS_DATE_TIME; 

OPPLAN : in SYS~OPPLAN; 

CM_LIST : in out SDB_ALL_CNTRL_POINT) ; 

—cpm description: Reads the control measure list for a specific time. 

— formal parameters 

—IN TIME Date/Time group for data selection. 

—IN OPLLAN OPLAN id for data selection. 

—OUT CM_LIST List of point control measures for specified time. 


procedure SDB_READ_OBSTACLE 

(INDEX : in SDB_OBST_PTR, 

OBS_REC : out SDB~OBSTACLE_REC); 

—cpm description: Reads an obstacle record. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT OBS REC Obstacle record read. 


procedure SDB READ OBSTACLE LIST 


B-28 







(TIME : in SYS_DATE_TIME; 

OPPLAN : in SYS_OPPLAN; 

OBS_LIST : in out SDB_ALL_OBSTACLE); 

—cpm description: Reads the obstacle list for a specific tine. 

— formal parameters 


-IN 

TIME 

Date/Time group for data selection. 

-IN 

OPLLAN 

OPLAN ID for data 

selection. 

-OUT 

OBS_LIST 

List of obstacles 

for specified time 


procedure SDB_R£AD BLUEFOR_AUTH_AMMO 

(INDEX ~ : in SDB_BLUE_AM AUTH_PTR; 

AUTH_REC : out SDB_AMMO~AUTH_LIST )} 

—cpm description: Reads the authorized ammunition for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT AUTH REC Authorized ammunition record read. 


procedure SDB_READ_BLUEFOR CURR_AMMO 

(INDEX : in SDB_BLUE_AM_CURR_PTR; 

CURR_REC : out SDB_BLUEFOR_AMMO_QTY); 

—cpm description: Reads a on-hand ammunition record. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—out curr rec on-hand ammunition record read. 


procedure SDB READ BLUEFOR CURR AMMO LIST 


(UNIT ID 

s 

in 

SDB_BLUEFOR_UNIT_ID; 

TIME 

t 

in 

SYS DATE_TIME} 

OPPLAN 

t 

in 

SYS OPPLAN; 

AUTH_REC 

e 

• 

in 

SDB_AKMO_AUTH_LIST; 

CURR_LIST 

1 

in 

OUt SDB_AMMO_ON_HAND_RZC); 


—cpm description: Reads a on-hand list of ammunition for a unit for a 

specified time and OPLAN. 


— formal parameters 


—IN 

UNIT_ID 

1 1 

1 1 
M 

as 

TIME 

—IN 

OPLLAN 

— IN 

AUTH_REC 


ID of the unit that owns the ammunition. 

Date/Time group for data selection. 

OPLAN ID for data selection. 

Description of the authorized ammunition for this 


B-29 








— unit. 

—out curr_list List of on-hand ammunition for specified time. 


procedure SDB_READ_BLUEFOR AUTH_EQUIP 

(INDEX ~ ‘ ! in SDB_BLUE_EQ_AUTH_PTR; 

AUTH_REC l out SDB_EQUIP_AUTH_LIST); 

—cpm description: Reads the authorized equipment for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT auth_REC Authorized equipment record read. 


procedure sdb_read_bluefor_curr_EQUIP 

~ (INDEX “ : in SDB_BLUS_SQ_CVRR_PTR ; 

CURR_REC : out SDB_BLUEFOR_EQUIP_QTY); 

—cpm description: Reads a operational equipment record. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—out curr_rec operational equipment record read. 


procedure SDB_READ_BLUEFOR CURR EQUIP LIST 


(UNIT ID 

: in 

SDB_BLUEFOR_UNIT ID; 

TIME 

: in 

SYS_DATE_TIME; 

OPPLAN 

: in 

SYS_OPPLAN> 

AUTH_REC 

: in 

SDB_EQUIP_AUTH LIST; 

CURR_LIST 

: in out 

SDB_EQUIP_OPER REC); 


—cpm description: Reads a operational list of equipment for a unit. 
— formal parameters 


—IN 

UNIT_ID 

ID of the unit that owns the ammunition. 


-IN 

TIME 

Date/Time group for data selection. 


-IN 

OPLLAN 

oplan ID for data selection. 


-IN 

AUTH_REC 

Description of the authorized equipment for 
unit. 

this 

-OUT 

CURR_LIST 

List of operational equipment for specified 

time 


procedure SDB_READ_BLUEFOR PERS 

(INDEX “ : in 

PERS REC : out 


SDB_BLUE_PERS_PTRj 

sdb_personnelT; 


B-30 




—cpm description! Reads the personnel record for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT PERS REC Personnel record read. 


procedure SDB_READ_BLUEFOR_JFUEL 

< INDEX : in SDB_BLUE_FUEL_PTR; 

FUEL_REC ! out SDB~FUELS); 

—cpm description: Reads the fuel record for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT FUEL REC Fuel record read. 


procedure SDB_READ_BLUEFOR_STATUS 

(INDEX : in SDB_BLUE_STAT_PTR; 

STATUS_REC I out SDB_BLUE_UNIT_STATUS); 

—cpm description: Reads the status record for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT STATUS REC Unit Status record read. 


procedure SDB_READ_BLUEFOR_LOCATION 

(INDEX : in SDB_BLUE_ULOC_PTR; 

LOCATION_REC : out SDB_UNIT_LOCATION); 

—cpm description: Reads the unit location record for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT LOCATION REC Unit location record read. 


procedure SDB_R£AD_OPFOR_AUTH_EQUIP 

(INDEX ~ : in SD8_OPFOR_EQ_AUTH_PTR; 

AUTHJREC : out SDB_EQUIP~AUTH_LIST); 

—cpm description: Reads the authorized equipment for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT AUTH_REC Authorized equipment record read. 


B-31 




procedure SDB_READ_OPFOR_CURR_EQUIP 

(INDEX ~ S in SDB_OPFOR_EQ_CURR_PTR; 

CURR_REC : out SDB_OPFOR~EQUIP_QTY); 

—cpm description: Reads a operational equipment record. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT curr_rec Operational equipment record read. 


procedure SDB_R£AD OPFOR CURR_EQUIP LIST 


(UNITJCD 

X 

in 

SOB OPFOR UNIT_ID; 

TIME - 

X 

in 

SYS ~DATE_TIME;“ 

OPPLAN 

X 

in 

SYS**OPPLAN ; 

AUTH REC 

X 

in 

SDB_EQUIP_AUTH_LIST 

CURR - LIST 

: 

in out 

SDB_EQUIP_OPER_REC) 


—cpm description: Reads a operational list of equipment for a unit. 
— formal parameters 


— IN 

UNIT_ID 

ID of the unit that owns the 

ammunition. 

—IN 

TIME 

Date/Time group for data selection. 

—IN 

OPLLAN 

OPX.AN ID for data selection. 


—IN 

AUTH_REC 

Description of the authorized 
unit. 

equipment for this 

-OUT 

CURR_LIST 

List of operational equipment 

for specified time. 


procedure SDB_READ_OPFOR_STATUS 

(INDEX : in SDB_OPFOR_STAT_PTR; 

STATUS_REC : out SDB_OPFOR_UNIT_STATUS); 

—cpm description: Reads the status record for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—out STATUS REC Unit status record read. 


procedure SDB_READ OPFOR_LOCATION 

(INDEX I in 

LOCATION_REC : out 

—cpm description: Reads the unit location record for a unit. 

— formal parameters 

—IN INDEX Index into the data base of the record to be read. 

—OUT LOCATION REC Unit location record read. 


SDB_OPFOR_ULOC_PTR; 
SDB~UNIT_LOCATION); 


B-32 





procedure SDB_CI.OSE_SlTUATION_DB; 

—cpm description: Closes all the situation data bases 

— formal parameters 
— None 

end SDB_INPUT OUTPUT; 


B-33 




—cpc package specification name: SDB_PACKAGE 

—cpc description: This package contains objects for SDB_SITUATlON_DB_MANAGER 

—cpc design notes: 

—cpc package author: Bruce Packard 

science Applications International corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


with SYSTEM__PACKAGE; 
with MSGMESSAGE; 
with SDB_SITUATION_DB } 

package SDB_PACKAGE is 


use SYSTEM PACKAGE; 
Use MSG_MESSAGE; 

Use SDB~SITUATION_DB; 


— situation Data Update Messages 
SDB_AMMO_MESSAGE : MSG 

msg] 

: MSG' 

MSG* 
: MSG* 

MSG* 
: MSG* 

MSG* 
: MSG~ 

msg” 

: MSG* 

MSG* 
: MSG~ 

MSG' 


S DB_EQUIP_MESSAGE 

SDB_PERS_MESSAGE 

SDB_FUEL__MESSAGE 

SDB_LOC_MESSAGE 

SDB_ACT_MESSAGE 

SDB MISS MESSAGE 


— Message type and length 
MESSAGEJTYPE 
MESSAGE_LENGTH 
MESSAGE OVERHEAD 


MESSAGE_POINT :- new 
~VAR_MESSAGES (MSG_AMMO_JUPDATE) ; 
*MESSAGE_POINT :• new 
*VAR_MESSAGES (MSG_EQUIP_UPDATE); 
*MESSAGE_POINT new 
VAR_MES?AGES (MSG_PERS_UPDATE); 

MESSAGE_POINT :- new 
VAR_MESSAGES (MSG_FUEL_UPDATE); 
MESSAGE_POINT new 
VAR MESSAGES (MSG_LOC_OPDATE); 
MESSAGE_POINT new 

VAR__HESSAGES (MSG_ACTIVITY_UPDATE >; 

MESSAGE_POINT :« new 

VAR MESSAGES (MSG_MISSION_UPDATE); 


MSG_MESSAGES; 

msg”message_lem; 

MSG MESSAGE LEN 


9 ; 


— Situation Request Messages 

SDB_REQUEST : MSG_MESSAGE_POINT new 

MSG_VAR_MESSAGES ( MSG__SD_REQUEST) ; 
SDB_STOP : MSG_MESSAGE_POIMT new 

MSG_VAR_MESSAGES (MSG_STOP); 
SDB_CONNECT : MSG_MESSAGE_POINT l- new 

MSG~VAR_MESSAGES (MSG_COHMECT); 

— Socket ZDs for the situation data message router 

SIT_ROUTER_S0CK_NUM : SYS_CLIENT 1-0; 

— Error code returned from communications utilities 

ERROR_CODE : SYS_ERROR l» 0; 

— File name passed in via the unix setenv command 

SDB_FZLE'_NAMB : String (SYS ENV STRING) ; 

SDB~ENV_NAMZ , string (SYS^ENV**STRING); 


B-34 




SDB_NULL_STRING l String <SYS_ENV_STRIHG); 

— Change data base or add record flag 
SDB_change t boolean i* false; 

SDB_AOD » boolean :■ true; 

— Operational Planning Chaining list 
SDB_OPPLAN_COUNT » SYS_OPPLAN; 

SDB_OPPLAN_BASE t array (SYS_OPPLAN) of SYS_OPPLAN; 

SDB~OPPLAN~DATE : array (SYS~OPPLAN) of SYS~DATE_TIME 

— Last used ID for control measures and obstacles 
SDB_LAST_CNTRL_MSR: SDB_CONTROL_MEASURE_ID; 

sdb_last“cntrl_pntj SDB_CONTROL_MEASURE ID; 
SDB_LAST_OBSTACLE : SDB~OBSTACLE_ID; “ 

— Date time definitions 
START_DATE_TIME » S Y S_DATE_TIME; 

SYfTEM_START_MIN : SYS~MINUTE_TOTAL; 

end SDB_PACKAGE; 


B-35 






—cpc package specification name: SDB_SEND_DATA 

—cpc description: This package describes the procedures to send data to 
— requesting processes 

—cpc design notes: 

—cpc package author: Bruce Packard 

Science Applications International corporation 
424 Delaware, Suite C3 
Leavenworth, KS 66048 


package SDB_S£ND_DATA is 

procedure SDB_SEND_CNTRL_MSR; 

—cpm description: Sends a list of the control measures that are effective 
during the requested time. 

— formal parameters 
None 


procedure sdb_send_cntrl,_msr_pnt ; 

—cpm description: Sends a list of the point control measures that are 
effective during the requested time. 

— formal parameters 

— None 


procedure sdb_send_obstacle; 

—cpm description: Sends a list of the obstacles that are effective 

— during the requested time. 

— formal parameters 

None 


pr OC edure SDB_SEND_BLUEFOR_AUTH_AMMO; 

—cpm description: Sends a list of the authorized ammunition for a BLUEFOR 

— unit. 

— formal parameters 

— None 


procedure SDB_SEND_BLUEFOR_CURR_AMMO; 

—cpm description: Sends a list of the on-hand ammunition for a BLUEFOR 
— unit. 


B-36 






— formal parameters 
None 


procedure SDB_SEND_BLUEFOR_EQUIP_AUTH; 

—cpm description: Sends a list of the authorized equipment for a BLUEFOR 
unit. 

— formal parameters 
None 


procedure SDB_SEND_BLUEFOR_EQUIP_CURR; 

—cpm description: sends a list of the operational equipment for a BLUEFOR 

— unit. 

— formal parameters 

None 


procedure SDB_SEND_BLUEFOR_PERS; 

—cpm description: sends the personnel strength for a BLUEFOR unit. 

— formal parameters 

Nona 


procedure SDB_SEND_BLUEFOR_FUEL; 

—cpm description: Sends the fuel status for a BLUEFOR unit. 

— formal parameters 

None 

procedure SD8_SEND_BLUEF0R_STATUS } 

—cpm description: sends the unit status for a BLUEFOR unit. 

— formal parameters 

— None 

procedure SDB_SEND_BLUEFOR_LOCAT2 ON; 

—cpm description: Sends the unit location for a BLUEFOR unit. 

— formal parameters 

— None 

procedure SDB_SEND_BLUEFOR TASK_ORG; 


B-37 





—cpm description: Sends the task organization for a BLUEFOR unit. 

— formal parameters 
None 


procedure SDB_SEND_BLUEFOR_ALL_LOCATIONS; 

—cpm description: Sends the all the BLUEFOR unit locations. 

— formal parameters 

— None 

procedure SDB_SEND_OPFOR_EQUIP_AUTH; 

—cpm description: sends a list of the operational equipment for a opfor 
unit. 

— formal parameters 

— None 


proc edure sdb_send_opfor_EQUIP_CURR; 

—cpm description: Sends a list of the operational equipment for a OPFOR 

— unit. 

— formal parameters 

— None 


procedure sdb_send_opfor_status; 

—cpm description: sends the unit status for a OPFOR unit. 

— formal parameters 

None 

procedure SDB_SEND_OPFOR_LOCATXON ; 

—cpm description: Sends the unit location for a OPFOR unit. 

— formal parameters 

None 


procedure SDB_SEND_OPFOR_TASK_ORG; 

—cpm description: sends the task organization for a OPFOR unit. 

— formal parameters 

— None 


B-38 





procedure SDB_SEND_OPFOR_ALL_LOCATIONS; 

—cpm description: Sends the all the OPFOR unit locations. 

— formal parameters 
None 

end SDB SEND DATA; 


B-39 








—cpc package specification name: SDB_UPDATE_DB 

—cpc description: This package contains the situation data base update 
utilities for SDB_SITUATION_Dl_MANAGER 

—cpc design notes: 

—cpc package author: Bruce Packard 

— Science Applications International Corporation 

424 Delaware, Suite 03 
Leavenworth, KS 66048 


with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 
with SDB_SITUATION_DB; use SDB_SITUATION_DB; 

package sDB_UPDATE_DB is 

procedure SD8_UPDATE_BLUEF0R_AMM0 (UNIT_ID : in SDB_BLUEFOR_UNIT_ID; 

ADD_FLAG : in boolean); 

—cpm description: Updates the on-hand amount of ammunition assigned to a 
— BLUEFOR unit. 


formal parameters 




IN 

UNIT_ID 

ID of the unit to update 

the on- 

-hand ammunition level. 

IN 

ADD_FLAG 

Logical flag to indicate 
added or updated. 

if the 

record should be 


True * Add the record; 

False * replace the data currently in the 
data base for this unit 


procedure SDB_UPDATE_BLUEFOR_AMMO_AUTH (UNIT_ID 

AMMO_NAME 
ADD FLAG 


in SDB_BLUEFOR_UNIT_ID; 
in STRING; 
in boolean); 


—cpm description: Updates the authorized amount of ammunition assigned to 
a BLUEFOR unit. 


— formal parameters 

—IN UNIT_ID ID of the unit to update the authorized ammunition 

level. 

—IN AMMO_NAM£ Name of the ammunition type that is being updated. 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True ■ Add the record; 

False " replace the data currently in the 

— data base for this unit 

procedure SDB_UPDATE_BLUEFOR_EQUIP (UNIT_ID : in SDB_BLUEFOR_UNIT_ID; 

ADD_FLAG : in boolean); 


B-40 




—cpm descriptions Updates the operational amount of equipment assigned to 
a BLUEFOR unit. 


— formal parameters 


—IN 

UNIT_ID 

ID of the unit to update the operational equipment 

— 


level. 

— IN 

ADD_FLAG 

Logical flag to indicate if the record should be 

— 


added or updated. 

— 


True = Add the record; 

— 


False =■ replace the data currently in the 



data base for this unit 

procedure SDB_UPDATE_BLUEFOR_EQUIP_AUTH (UNIT ID s in SDB BLUEFOR UNIT ID; 



EQUXP_NAME : in STRING; 



ADD_FLAG : in boolean); 

—cpm 

description: 

Updates the authorized amount of equipment assigned to a 

— 


BLUEFOR unit. 

— formal parameters 

— IN 

UNIT_ID 

ID of the unit to update the operational equipment 

— 


level. 

— IN 

EQUIP_NAME 

Name of the equipment type that is being updated. 

— IN 

ADD_FLAG 

Logical flag to indicate if the record should be 

— 


added or updated. 

— 


True ■ Add the record; 

— 


False ” replace the data currently in the 

_ 


data base for thiB unit 

procedure SD8_UPDATE BLUEFOR PERS (UNIT ID 5 in SDB BLUEFOR UNIT ID; 



ADD_FLAG : in boolean); 

—cpm 

description: 

Updates the number of personnel assigned to a 



BLUEFOR unit. 

— formal parameters 

—IN 

UNIT_ID 

ID of the unit to update the current personnel level. 

—IN 

ADD_FLAG 

Logical flag to indicate if the record should be 

— 


added or updated. 

— 


True - Add the record; 

— 


False ” replace the data currently in the 

— 


data base for this unit 


procedure SDB__UPDATE_BLUEFOR_PERS_AUTH <UNIT_ID « in SDB_BLUEFOR_UNIT_ID; 

ADD_FLAG s in boolean); 

—cpm description: Updates the number of personnel assigned to a 
— BLUEFOR unit. 


B-41 







— formal parameters 
—IN UNIT_ID 

—IN ADD FLAG 


ID of the unit to update the authorized personnel level. 

Logical flag to indicate if the record should be 
added or updated. 

True - Add the record; 

False « replace the data currently in the 
data base for this control measure 


procedure SDB_UPDATE_BLUEFORJFUEL <UNIT_ID : in SDB_BLUEFOR_UNIT_ID; 

ADD_FLAG s in boolean); 

—cpm description: Updates the amount of fuel assigned to a 
— BLUEFOR unit. 


— formal parameters 


— IN 

UNIT_ID 

ID of the unit to update the current fuel level. 

— IN 

ADDJFLAG 

Logical flag to indicate if the record should be 

— 


added or updated. 

— 


True s Add the record; 


False = replace the data currently in the 
data base for this unit 


procedure SDB_UPDATE_BLUEFOR_FUEL_AUTH (UNIT_ID : in SDB_BLUEFOR_UNIT_ID; 

ADDJFLAG : in boolean); 

—cpm description: updates the amount of fuel authorized for a 

BLUEFOR unit. 

— formal parameters 

—IN UNIT_ID ID of the unit to update the authorized fuel level. 

—IN ADDJFLAG Logical flag to indicate if the record should be 

added or updated. 

True - Add the record; 

False ■ replace the data currently in the 
data base for this unit 


procedure SDB_UPDATE_BLUEFOR_LOCATION (add_FLAG : in boolean); 

—cpm description: Updates the location of a BLUEFOR unit. 

— formal parameters 

—IN add_flag Logical flag to indicate if the record should be 

added or updated. 

True ■ Add the record; 

Raise - replace the data currently in the 

— data base for this unit 


B-42 





procedure SDB UPDATE_BLUEFOR_TASK_ORG (ADD_FLAG s in boolean; 

START_TIMEs in SYS_DATE_TIM£); 

—cpjn description: Updates the task organization of a BLUEFOR unit. 

— formal parameters 

— It: ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True * Add the record; 

False _ replace the data currently in the 
data base for this unit 

—IN start TIME Scenario start time 


procedure SDB_UPDATE_BLUEFOR_ACTIVITY (ADD_FLAG » in boolean); 

—cpm description: Updates the activity of a BLUEFOR unit. 

— formal parameters 

—IN add_FLAG Logical flag to indicate if the record should be 

— added or updated. 

True * Add the record; 

False - replace the data currently in the 
data base for th'*> unit 


procedure SDB_UPDATEJBLUEFOR_MlSSION (ADD_FLAG : in boolean); 

—cpm description: Updates the mission of a BLUEFOR unit. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 

True - Add the record; 

False ■ replace the data currently in the 

— data base for this unit 


procedure SDB_UPDATE_OPFOR_EQUIP (UNIT__ID : in SDB_BLUEFOR_UNIT_ID; 

ADD_FLAG : in boolean); 

—cpm description: Updates the operational amount of equipment assigned to a 
OPFOR unit. 


— formal parameters 

—IN UNIT_ID ID of the unit to update the operational equipment 

— level. 


—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 

True ■ Add the record; 

— False “ replace the data currently in the 

data base for this unit 


B-43 





procedure SDB_UPDATE_OPFOR_EQUIP_AUTH (UNIT_ID 

~ EQUIP_NAKE 
ADD FLAG 


in SDB_BLUEFOR_UNIT_ID; 
in STRING; 
in boolean); 


—cpm description: Updates the authorized amount of equipment assigned to a 
OPFOR unit. 


— formal parameters 


—IN 

UNIT_ID 

— 

—IN 

EQUIP_NAME 

—IN 

ADD FLAG 


ID of the unit to update the operational equipment 
level. 

Name of the equipment type that is being updated. 

Logical flag to indicate if the record should be 
added or updated. 

True * Add the record; 

False » replace the data currently in the 
data base for this unit 


procedure SDB_UPDATE_OPFOR_LOCATION (ADD_FLAG : in boolean); 

—cpm description: updates the location of a OPFOR unit. 

— formal parameters 

--IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

— True m Add the record; 

— False « replace the data currently in the 

— data base for this unit 


procedure SDB_UPDATE__OPFOR_TASK_ORG (ADD_FLAG : in boolean; 

START_TIME: in SYS_DATE_TIME); 

—cpm description: updates the task organization of a OPFOR unit. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True “ Add the record; 

False * replace the data currently in the 
data base for this unit 

—IN START TIME Scenario start time 


procedure 8DB_UPDATE_OPFOR_ACTIVITY (ADD_FLAG : in boolean); 

—cpm description: Updates the activity of a OPFOR unit. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

— True ■ Add the record; 


B-44 



False * replace the data currently in the 
data base for this unit 


procedure SDB_UPDATE_OPFOR_MISSION (ADD_FLAG s in boolean); 

—cpm description: Updates the mission of a opfor unit. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True - Add the record; 

— False ■ replace the data currently in the 

— data base for this unit 


procedure SDB_UPDATE_OPFOR_REINF (ADD_FLAG : in boolean; 

STARTJHHE: in SYS_DATE_TIME) ; 

—cpm description: Updates the reinforcing tine of a OPFOR unit. 

— formal parameters 

—IN add_flag Logical flag to indicate if the record should be 

added or updated. 

True - Add the record; 

False ” replace the data currently in the 
data base for this unit 

—IN START TIME scenario start time 


procedure SDB_UPDATE_OPFOR_STRENGTH (ADD_FLAG : in boolean; 

START_TIME: in SYS_DATE_TIME); 

—cpm description: Updates the percent strength of a OPFOR unit. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 

— True ■ Add the record; 

— False “ replace the data currently in the 

— data base for this unit 

—IN START TIME Scenario start tine 


procedure SDB_ADD_CNTRL_MSR (ADD_FLAG : in boolean; 

START_TXMEI in SYS_DATE_TIKE); 

—cpm description: Adds a control measure to the situation data base. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 

— True ” Add the record; 

— False “ replace the data currently in the 


B-45 







r 


data baa* for this control measure 
—IN START TIME Scenario start time 


procedure SDB UPDATE_CNTRL MSR EFF (ADD_FLAG : in boolean; 

START_TIME: in SYS_DATE_TIME);' 

—cpm description: Updates the effective time of a control measure. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 

— True * Add the record; 

— False - replace the data currently in the 

data base for this control measure 

—IN START TIME Scenario start time 


procedure SDB_UPDATE_CNTRL_MSR_LOC (ADD_FLAG : in boolean; 

START_TIME: in SYS_DATE_TIME); 

—cpm description: Updates the location of a control measure. 

— formal parameters 

—IN add_flag Logical flag to indicate if the record should be 

— added or updated. 

— True * Add the record; 

— False ■ replace the data currently in the 

data base for this control measure 

—IN START TIME Scenario start time 


procedure SDB_UPDATE_CNTRL_MSR_STAT (ADD_FLAG : in boolean; 

START_TIME: in SYS_DATE_TIME); 

—cpm description: Updates the status of a control measure. 

— formal parameters 

—IN ADDJTLAG Logical flag to indicate if the record should be 

— added or updated. 

True « Add the record; 

False ~ replace the data currently in the 

— data base for this control measure 

—IN START TIME Scenario start time 


procedure SDB_DELETE_CNTRL MSR (ADD_FLAG t in boolean; 

START_TIME» in SYS_DATE_TIME); 

—cpm description: Deletes a control measure. 

— formal parameters 


f 


B-46 



—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True - Add the record; 

False - replace the data currently in the 
data base for this control measure 

—IN START TIME Scenario start time 


procedure SDB_ADD_CNTRL_MSR_PNT <ADD_FLAG s in boolean; 

STARTJTIMES in SYS_DATE_TIME); 

—cpzn description: Adds a point control measure to the situation data base. 
— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True *» Add the record; 

False * replace the data currently in the 
data base for this control measure 

—IN START TIME Scenario start time 


procedure SDB_ADD_OBSTACLE (ADD_FLAG : in boolean; 

START_TIME: in SYS_DATE_TIME); 

—cpm description: Adds a obstacle to the situation data base. 

— formal parameters 

—IN add_flag Logical flag to indicate if the record should be 

— added or updated. 

True - Add the record; 

False ■ replace the data currently in the 
data base for this obstacle 

—IN START TIME Scenario start time 


procedure SDB_UPDATE_OBSTACLEJErF (ADD_FLAG : in boolean; 

START_TIME: in SYS_DATE_TIME); 

—cpm description: Updates the effective time of an obstacle. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 
~ added or updated. 

— True - Add the record; 

— False “ replace the data currently in the 

— data base for this obstacle 

—IN START TIME Scenario start time 


procedure SDB_UPDATE OBSTACLE LOC (ADD_FLAG : 

~ ~ START TIME: 


in boolean; 
in SYS_DATE_TIME); 


B-47 





—cpm description: Updates the location of an obstacle. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 

— True • Add the record; 

False “ replace the data currently in the 
data base for this obstacle 

—IN START TIME Scenario start time 


procedure SDB_U?DATE OBSTACLE STAT (ADD_FLAG : in boolean; 

STARTJTIME: in SYS_DATE_TIME); 

—cpm description: Updates the status of an obstacle. 

— formal parameters 

—IN ADD_FLAG Logical flag to indicate if the record should be 

— added or updated. 

True » Add the record; 

False - replace the data currently in the 

— data base for this obstacle 

—IN START TIME Scenario start time 


procedure SDB_DELETE_OBSTACLE (ADD FLAG : in boolean; 

STARTJTIME: in SYS_DATE_TIME); 

—cpm description: Deletes an obstacle. 

— formal parameters 

--IN ADD_FLAG Logical flag to indicate if the record should be 

added or updated. 

True - Add the record; 

False ■ replace the data currently in the 

— data base for this obstacle 

—IN START TIME Scenario start time 


end SDB_UPDATE_DB; 


B-48 



WTD Program Package Specificatio: 


ns 

The following package specificationa are included in the tool window display 
manager program: 

CALC_CALCULATOR 
TOT EDITOR 


B-49 





—cpc package specification name: CALC_CALCULATOR 
—cpc description: Calculator for the tool window 
—cpc design notes: 

—cpc program author: Bruce Packard 

— Science Applications International Corporation 

424 Delaware, Suite C3 
Leavenworth, KS 66048 


With SYSTEM_PACKAGE; 
package CALC_CALCULATOR is 


use SYSTEM PACKAGE; 


procedure CALC_INITIALIZE (WIND0W_ID : in SYS_WINDOWJELE_ID); 

— CPM description: This procedure displays the calculator. 

— formal parameters 

— IN TOT_WIN_ID - The Id number of the Task Organization Tool 

parent window. 

procedure CALC_PROCESS_INPUT (INPUT_TYPE : in SYS_WINDOW_INPUT; 

INPUT_WINDOW_ID t in SYS_WINDOW_ELE_ID; 
INPUTJVALUE : in SYS_WINDOW_VALUE; 

INPUT DATA : in SYS_WINDOW_DATA; 

FINISHED_PROCESSING : out BOOLEAN); 

— CPM description: This procedure processes all input on the calculator. 

— formal parameters 

—IN INPUT_TYPE - The Type of input (See UWN_WINDOW_SYSTEM for a 

complete description). 

—IN INPUT_window_id - The Id of the Window the Input took place in (See 

UWN_WIND0W_SYSTEM for a complete description). 

—IN input_value - The~value of the Input (See uwn_window_system 

for a complete description). 

—IN INPUT_DATA - The Input Data (See uwn_window_system for a 

complete description). 

—OUT FINISHED_PROCESSING - A flag telling the calling process if all the 
~ Processing is Finished for this input. 

— - True - Processing is finished - don't do 

anything else. 

» False - Processing is not finished - finish it 

— yourself. 


procedure CALC_TERMINATE; 

— CPM description: This procedure terminates the calculator tool. 

— formal parameters 

— None. 


>-50 








—CPC package specification name: 

TOT_EDITOR 

—CPC description: 

TOT_EDITOR CPC is the Task Organization Tool, written in the "Ada" 
programming language, which defines the variables and variable types 
needed to Edit the task organization unit structure. 

—CPC design notes: 

1.) This package can raise the following exceptions: 
SYS_TSB_EXCEPTION. 

—CPC package author: 

— Richard T. Zarse 13 Oct 1988 

Science Applications International Corporation (SAIC) 

424 Delaware, suite C-3 

Leavenworth, KS 66048 (913) 651-7925 


with SYSTEM_PACKAGE; use SYSTEMJPACKAGE; 
package TOT_EDiTOR is 


— *«**H#*#i#**»****«»**i*t*ttt*ltit*##*t*#liH*i*#*»t******t**H*t*t**t***## 


procedure TOT_INITIALIZE (TOT_WIN_ID 

PROCESSED 
HEADR BTNS WIDTH 


in SYS_WINDOW_ELE_ID; 
in SYS_EDDIC_PROCESSES; 

out SYS_WINDOW_COLUMN); 


—cpm description: 

— This module, as part of the Task organization Tool, performs all of 
the Initialization needed for the TOT editor. 

—CPM design notes: 

1. ) This module is called once, up front, each time the tool is 

— invoked. 

2. ) The parent window to have been created by the application, before 
this module is called. 

—formal parameters 
—IN TOT_WIN_ID 

—IN PROCESS_ID 

—OUT HEADR_BTNS_WIDTH 

—end formal parameters; 


- The Id of the Task Organization Tool parent 
Window. 

- The Id of the calling process. 

- The combined Width of all of the Header Buttons 
displayed in the tool. 




INPUTJTYPE 

t 

in 

SYS_WINDOW_INPUT; 

INPUT - WINDOW ID 

e 

• 

in 

SYSJWINDOWJBLE ID 

INPUT_VALUE 

t 

in 

SYS_WINDOW VALUE; 

XNPUTJDATA 

s 

in 

SYS_WINDOW DATA; 

FINISHED PROCESSING 

: 

out 

BOOLEAN); 


—CPM description: 

— This module, as part of the Task Organization Tool, Proc« 


any 


B-52 




Input event that haa happened in/to the TOT editor. 

—CPM design noteat 

1. ) This module does not contain the call to UWN_INPUT, the 
application does it ao it can have greater control. Because of this, 
it is possible to receive input which has nothing to do with TOT. 

2. ) This module is called every time an event is received by the 
application. 


—formal parameters 


—IN 

INPUT_TYPE 

—IN 

INPUT~WINDOW_ID 

—IN 

INPUT_VALUE “ 

—IN 

INPUTJDATA 

— 

(See UWN WINDOW SYSTEM 

—OUT 

FINISBED_PROCESSING - 


—end formal parameters; 


The Type of Input. 

The Id of the Window the input took place in. 
The value of the Input. 

The input Data. 

for a complete description of all 4 of these). 
A flag tailing the calling process if all the 
Processing is Finished for this input. 

True - Processing is finished - don't do 
anything else. 

False - Processing is not finished - finish 
it yourself. 


-- t«ii«#**#t###*##*«<#*##*###i#*<#»«#*#*H#H*tl«t*###****#t«#t*«t*#**i###### 

procedure TOTJTERMINATE ; 

—CPM description: 

— This module, as part of the Task Organization Tool, performs the 

— shutdown functions needed to Terminate the TOT editor. 

—CPM design notes: 

1. ) This module is called once, at the end. 

2. ) This module is expects the application to terminate the parent 

— window. 

—formal parameters 
None. 

—end formal parameters; 


end TOT_EDITOR; 


B-53 






APPENDIX C - C BINDING SPECIFICATIONS 


The appendix contains the package specifications for binding Ada to 
equivalent C routines in c libraries. The following package specifications 
are included in this appendix: 

CIN_INT£RNET_COMMUNICATIONS 

CIW_IMAGE_WINDOW 

CUXJJTIL 

CWN WINDOW SYSTEM 



—cpc package specification name: 

CIN_INTERNET_COMMUNICATIONS 

—cpc description: 

cin_internet_comkunications CPC is a set of utility communications 
primitives, written in the "C” programming language, which allow 
processes to communicate with each other using an InterNet protocol. 
These primitives work both within one processor and over an ethernet 
network. This specification is what allows Ada to call, or bind, 

— these C modules. 

—cpc design notes: 

1.) None. 

—cpc package author: 

Bruce J. Packard 

— science Applications International Corporation (SAIC) 

— 424 Delaware, suite C-3 

Leavenworth, KS 66048 (913) 651-7925 


with SYSTEM? use SYSTEM; 

package cin_internet_communications is 

— *#*t **f **#***#«#** t*#**#*#*###**###**«##*##t*****#**HM***#*##**##**#f##»* 

procedure CIN_CLIENT_CONNECT_SERVER (HOST_ID: in ADDRESS; 

SERVICE ID: in ADDRESS; 

MSTR SOCK NUM: in ADDRESS); 


—CPM description: 

This module allows a client (user process) to connect to the 
InterNet master (Server) socket, returning the master socket number. 


—CPM design notes: 
— 1.) None. 


—formal parameters 
—IN HOST_ID 

—IN SERVICE_ID 

—OUT MSTR_SOCK_NUM - 

—end formal parameters; 


A string which the environment equates to the 
name (Id) of the Host (server) machine. 

A string which the environment equates to the 
service Id (INET port number). 

A pointer to the server (Master) socket Number. 


— #**#tt«#*##*#«****»*Ht***#**«#»**#******»******t*##*f*#**####*«t****t*<#*# 


procedure CIN_CLOSE_SOCKET <CSN_INDEX: in 

CLIENT_SOCK_NUM: in 
CLIENT_DISP_NUM: in 
NUM CLIENTS: in 


ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS); 


—CPM description: 

This module closes the specified Internet client Socket and removse 
— it from the list of client sockets. 


—CPM design notes: 


C-2 





—formal parameters 

— IN 

CSN_INDEX 

— I/O 

CLIENT_SOCK_NUM 

— I/O 

CLIENT_DISP_NUM 

—I/O 

NUM_CLIENTS 

—end 

formal parameters; 


The array Index of the client Socket Number 
being closed. 

The list of Client socket Numbers. 

The list of Client Display Numbers. This is 
machine number of the corresponding client 
socket number. 

The pointer to the actual Number of client 
sockets currently in the system. 


f#*i*#########**#*#**#t**«*#*#***«#t####H*##*#i*#f##t**t#*<*#*******f#*#»* 


procedure CIN_ESTABLISH_SERVER (HOST_ID 

SERVICE_ID 
MSTR SOCK NUM 


in ADDRESS; 
in ADDRESS; 
in ADDRESS); 


—CPM descriptions 

This module sets up and opens an XnterNet server returning the 
— master socket number. 


—CPM design notes: 

1.) None. 

—formal parameters 
—IN HOST_ID 

—IN SERVICE_ID 

—OUT MSTR_SOCK_NUM - 

—end formal parameters; 


A string which the environment equates to the 
name (Id) of the Host (server) machine. 

A string which the environment equates to the 
Service Id (INET port number). 

A pointer to the server (Master) Socket Number. 


t*t*tt#lt*t##*«*«*##«##**«#**t**#»#tf##*###*»*#*##*f#««*#****#*###*#*****#* 


procedure CIN_FLUSH_MSG (SOCK_NUM : in 

FLUSH_LEN : in 
FLUSH ERROR ; in 


ADDRESS; 
ADDRESS; 
ADDRESS); 


—CPM description: 

This module Flushes a Message from the XnterNet buffer system. 

—CPM design notes: 

1.) None. 

—formal parameters 

—IN SOCK_NUM - The Socket Number to read from. 

—OUT FLUSH_LEN - The length of the message flushed if it worked, and 

the error number if the flush failed. 

--OUT FLUSH_ERROR - A pointer to a logical flag which tells if there 

was an Error while flushing. 

■ TRUE - There was an error trying to flush. 

- FALSE - There were no errors in the flush. 

--end formal parameters; 

****#**#•*********•#*#****•#*******#****#*****#**********##*#***##******#** 

procedure CIN_R£CV_MSG (PEEK_FLAG » in ADDRESS; 

FROM~SOCK NUM : in ADDRESS; 


C-3 






: in ADDRESS; 
: in ADDRESS; 
: in ADDRESS) 


MSGJLEN 
MSG 

ERROR_CODE 

—CPM descriptions 

This nodule sneaks a peek at, or Receives a Message which is .being 

— buffered in the InterNet system. 

—CPM design notes: 

— 1.) None. 


—formal parameters 

—IN PEEK_FLAG - A Flag which tells this module whether to actually 

receive the message or just "peek" at the first 
"msg_len" bytes. 

= TRUE - just peek at the message. 

* FALSE - read the entire message. 

—IN FROM_SOCK_NUM - The Socket Number to read From. 

—I/O MSG_LEN - The number of bytes to read, or peek at, on the way 

in and the number of bytes received, or the error 
number if the received failed, on the way out. 

—out MSG - The Message received. 

—OUT error_cODE - a pointer to a logical flag which tells if an 

Error Code was encountered on the received. 

— » TRUE - There was an error trying to receive. 

* false - There were no errors in the receive. 

—end formal parameters; 


»###«f******#»*tt#**#*«*#****i####*#t#*«####«*#«**##*#*«##*>####****#<***#* 

procedure CIN_SEND_MSG (TO_SOCK_NUM : in ADDRESS; 

MSG : in ADDRESS; 

MSG_LEN : in ADDRESS; 

ERROR__CODE : in ADDRESS); 

—CPM descriptions 

— This module Sends a Message across the InterNet system. 

—CPM design notes: 

1.) None. 

—formal parameters 

—IN to_sock_NUM - The Socket Number to write To. 

—IN MSG - The Message to write. 

—I/O MSG_LEN - The number of bytes to write on the way in and the 

number of bytes written, or the error number if the 
received failed, on the way out. 

—out ERROR_cODE - A pointer to a logical flag which tells if an 

Error Code was encountered on the send. 

* TRUE - There was an error trying to send. 

— - FALSE - There were no errors in the send. 

—end formal parameters; 


##****l#***#«**«#***«***#*******##*«#**#*##**««#«##**##**####********##*«*# 


procedure CIN_SERVER_CONNECT CLIENT (MSTR SOCK_NUM 

MAX CLIENTS 
NUM~CLXENTS 


s 

in 

ADDRESS 

s 

in 

ADDRESS 

t 

in 

ADDRESS 


C-4 




ADDRESS; 
ADDRESS); 


CLI£NT_SOCK_NUM s in 
CLIENT DISP _ NUM : in 


—CPM description: 

This module allows the Server to connect (accept) a client socket, 
— returning the socket number. 


—CPM design notes: 
1.) None. 


—formal parameters 
—IN MSTR_SOCK_NUM 

—IN MAX_CLIENTS 

—I/O NUM_CLIENTS 

—OUT CLIENT_SOCK_NUM 
—OUT CLIENT~DISP NUM 


—end formal parameters; 


The server (Master) socket Number. 

The Maximum number of Clients allowed in the 
system. 

A pointer to the actual Number of client sockets 
currently in the system. 

The list of Client Socket Numbers. 

The list of Display Numbers for each Client, 
related to the corresponding "client_sock_num". 


— *##<**«*«#f##i##*#*#**##*#*#Hf***#***Hf*#****##H<#*****ii#<t**«##«*t#*«« 


procedure cin_server_wait ( mstr_sock__num 

NUM CLIENTS 
CLIENTJSOCKJNUM 
CALLING SOCK_NUM 
SOCKET INDEX 


in ADDRESS; 
in ADDRESS; 
in ADDRESS; 
in ADDRESS; 
in ADDRESS); 


—CPM description: 

This module causes the Server program to wait for a response from 
one of the clients on the interNet. 

—CPM design notes: 

1.) None. 


—formal parameters 

—IN mstr_sock_num - The server (Master) socket Number. 

—IN NUM_CLIENTs - The actual Number of Client sockets currently 

in the system. 

—IN CLIENT_sock_NUM - The list of client Socket Numbers. 

—OUT CALLING_SOCK_NUM - A pointer to the Number of the Socket who just 

called the server. 

—OUT socKET_INDEX - A pointer to the client Socket Number array 

Index, for the client who just called. 

—end formal parameters; 


private 

— communications utilities implemented in C 


pragma INTERFACE (C, 
pragma INTERFACE (C, 
pragma INTERFACE (C, 
pragma interface (C, 
pragma INTERFACE (C, 


CIN_CLIENT_CONNECT_SERVER); 

cin“close_socket)j“ 

CIN~ESTABLISH__SERVER) ; 

cin~flush_msg7; 

CIN~RECV MSG); 


C-5 



pragma INTERFACE (C, 
pragma INTERFACE <C, 
pragma INTERFACE (C, 


CIN_SEND_MSG); 
CIN_SERVER_CONNECT_CLIENT) 
CIN~SERVER_WAIT); 


end CIN INTERNET COMMUNICATIONS 







—CPC package specification names 
CIW_IMAGE_WINDOW 

—CPC descriptions 

— ciw_image_window CPC is a set of color graphics primitives, written in 
the "C" programming language, which allow programs to perform color 

— imaging functions within X windows. This specification is what allows 
Ada to call, or bind, these C modules. 

—CPC design notess 
1.) None. 

—CPC package author: 

Bruce j. Packard 

Science Applications International corporation (SAIC) 

424 Delaware, suite C-3 

Leavenworth, KS 66048 <913) 651-7925 

with SYSTEM; use SYSTEM; 

with SYSTEM_PACKAGE; use SYSTEM_PACKAGE; 

package CIW_iMAGE_WINDOW is 


— #****#*f**##i####f**#<**##*#****#***#<#####***#»###<*####«#***#****#*#*««** 


procedure CIW_CREATE_PIXMAP (SIZE_X : in 

SIZE_Y : in 
BIT_IMAGE : in 
COLOR : in 
PIXMAP ID : in 


ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS); 


—cpm descriptions 

This module Creates a Pixmap out of bitmapped data. 


—CPM design notes: 

— 1.) The bit image must be in memory order (Bits 0 - 15) for each 16 
bit word. 

2.) The pixmap is displayed and erased with CIW_DISPLAY_BIT__IMAGE. 

— 3.) The pixmap must be removed from memory with CIW_free_P!Xmap, when 

— the pixel image is no longer required (see CIW_FREE_PIXMAP). 


—formal parameters 

—IN SIZE_X - The size of the image in the X direction. 

—IN SIZE_Y - The Size of the image in the Y direction. 

—IN BIT_IKAGE - The Bit image to transform. The image is organized in 

— rows from the top to the bottom. Each row contains 

— "SIZE_X" bits and there are "SIZE_Y" rows in the image. 

—IN COLOR - The index into the color lookup table for the Color 

— assigned to the on bits in this pixmap. 

—OUT PIXMAP_ID - The Id assigned to this Pixmap. This id is required 

— for displaying and freeing the pixmap. 

—end formal parameters; 


— ###*###*#*##*#*#####*#########**•«#####*####<#####*#*####***##•**###*#*#*## 


procedure CIW_DISPLAY BIT_IMAGE (WINDOW_ID 

SUB ADD FLAG 


: in ADDRESS; 
: in ADDRESS; 


C-7 



DISPLAY FUNTION 

: 

in 

ADDRESS; 

PIXEL_UL_X 

: 

in 

ADDRESS; 

PIXEL~UL_Y 

: 

in 

ADDRESS; 

SIZE_X 

• 

in 

ADDRESS; 

SIZE_Y 

• 

• 

in 

ADDRESS; 

PIXMAP_ID 


in 

ADDRESS; 

PLANE MASK 

: 

in 

ADDRESS); 


—cpm description: 

— This module Displays or erases a Bit Image (pixmap) in the 
specified planes. 

—CPM design notes: 

_ 1.) The pixmap is created by CIW_CREATE_PIXMAP. 


—formal parameters 
—IN WINDOW_ID 

—IN SUB ADD FLAG 


DISPLAY_FUNTION - 

PIXEL_UL_X 

PIXEL_UL_Y 

SIZE_X 
SIZE_Y 
PIXMAP_ID 
PLANE MASK 


—end formal parameters; 


The Id of the window to display the image in. It 
can be obtained by calling uwm_query_window_id. 
Image Subtraction or Addition Flag. During 
subtraction, the bits set in the raster image 
shall be subtracted out of the selected planes. 
During addition, the bits set in the raster image 
shall be added into the selected planes. 

0 - subtract the image. 

1 - Add the image. 

The means of adding/subtracting the image to the 
displayed image (and, or, copy...). 

The window X coordinate of the Upper Left corner 
of the image. 

The window Y coordinate of the Upper Left corner 
of the image. 

The Size of the image in the X direction. 

The Size of the image in the Y direction. 

The Pixmap Id returned from ciw_create_PIXMAP. 

A bit map representation of the Planes to be 
affected by the image, value can be obtained from 
"CIW PLANE MASK". 


«#*i*#**##i#***t##****#***#****#***«#*##***#*****#***#*****#*#####***###### 

procedure CIW_DISPLAY CIRCLE (WINDOW_ID : in ADDRESS; 

SUB ADD_FLAG : in ADDRESS; 

CENTER_X : in ADDRESS; 

CENTER_Y l in ADDRESS; 

RADIUS : in ADDRESS; 

COLOR : in ADDRESS; 

PLANE_HASK : in ADDRESS); 

—CPM description: 

— This module Displays or erases a Circle in the specified planes. 

—CPM design notes: 

— 1.) None. 


—formal parameters 


C-8 





— IN WINDOW_ID 

—IN SUB ADO FLAG - 


—IN CENTER_X 

—IN CENTER_Y 

—IN RADIUS 

—IN COLOR 

—IN PLANE MASK 


—end formal parameters; 


The Id of the Window to display the circle in. It 
can be obtained by calling UWM_QUERY_WINDOW_ID. 

Image subtraction or Addition Flag. During 
subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits set in the raster image shall be 
added into the selected planes. 

0 - subtract the circle. 

1 - Add the cirlee. 

The window x coordinate of the Center of the circle. 
The window Y coordinate of the center of the circle. 
The Radius of the circle, in pixels. 

The index into the color lookup table for the Color 
of the circle. 

A bit map representation of the Planes to be 
affected by the circle. Value can be obtained from 
”CIW PLANE MASK”. 


»****#»*«***«t******«**#***##li*it*i»*»*#M*tt***##**#*tt***iti***»#*****#t 

procedure CIW DISPLAY IMAGE 


(WINDOW_ID 


in 

ADDRESS; 

BITS_DEEP 


in 

ADDRESS; 

SUB_ADD_FLAG 

• 

e 

in 

ADDRESS; 

DISPLAY_FUNTION 

• 

in 

ADDRESS; 

PIX£L_UL_X 

• 

in 

ADDRESS; 

PIX£L_UL~Y 

• 

• 

in 

ADDRESS; 

SI2E_X 

: 

in 

ADDRESS; 

SIZE~Y 

: 

in 

address; 

IMAGE 

: 

in 

address; 

PLANEMASK 

• 

• 

in 

ADDRESS) 


—CPM description* 

— This module Displays or erases a raster image in the specified planes. 
—CPM design notes: 

1. ) image depths (BITS_DEEP) of 1 should use ciw_display_bit_IMAGE. 

2. ) The only image depth (BITS_DEEP) currently supported is 8. 


—formal 
—IN 

—IN 


—IN 


parameters 

WINDOW_ID 

BITS_DEEP 

SUB ADD FLAG 


—IN 

DISPLAY_FUNTION - 

—IN 

PIXEL_UL_X 

—IN 

PIXEL_UL_Y 


The Id of the Window to display the image in. It 
can be obtained by calling UWM_QUERY_window_id. 

The Depth of each pixel value in the raster image. 
8 - Byte image. 

Image Subtraction or Addition Flag. During 
subtraction, the bits set in the raster image 
shall be subtracted out of the selected planes. 
During addition, the bits set in the raster image 
shall be added into the selected planes. 

0 - subtract the image. 

1 - Add the image. 

The means of adding/subtracting the image to the 
displayed image (and, or, copy...). 

The window X coordinate of the Upper Left corner 
of the image. 

The window Y coordinate of the Upper Left corner 


C-9 



-IN SIZE_X 
-IN SIZE_Y 
-IN IMAGE 


—IN PLANE MASK 


—end formal parameters; 


of the image. 

The size of the image in the X direction. 

The Size of the image in the Y direction. 

The raster Image to display/erase. The image is 
organized in rows from the top to the bottom. 

Each row contains "SIZE_X" elements and there are 
"SIZE_Y" rows in the image. Each element of the 
image occupies "BITS_DEEP" bits. 

A bit map representation of the Planes to be 
affected by the image. Value can be obtained from 
"CIW PLANE MASK”. 


♦I############################*############################################ 


(WINDOW_ID 

: 

in 

ADDRESS; 

SUB ADD_FLAG 


in 

ADDRESS; 

LINE_START_X 


in 

ADDRESS; 

LINE START_Y 


in 

ADDRESS; 

LINE END_X 


in 

ADDRESS; 

LINE_END_Y 


in 

ADDRESS; 

COLOR 


in 

ADDRESS; 

PLANE MASK 


in 

ADDRESS) 


—CPM description: 

— This module Displays or erases a Line in the specified planes. 

—CPM design notes: 

— 1.) None. 

--formal parameters 

—IN window_id - The Id of the Window to display the line in. It 

can be obtained by calling uwh_query_window_id. 

—IN sub_add_flag - Image subtraction or Addition Flag. During 

subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits set in the raster image shall be 
added into the selected planes. 

— » 0 - subtract the line. 

- 1 - Add the line. 

—IN LINE_START_X - The window X coordinate of the Start of the Line. 

—IN LINE_START_Y - The window Y coordinate of the start of the Line. 

—IN LINE_END_X - The window X coordinate of the End of the Line. 

—IN LINE_END_Y - The window Y coordinate of the End of the Line. 

—IN COLOR - The index into the color lookup table for the color 

of the line. 

—IN PLANE_MASK - A bit map representation of the Planes to be 

affected by the line. Value can be obtained from 
"CIW PLANE MASK". 


—end formal parameters; 


#!###t*######l##«f#####i##t########f####«tt*##«#i##t###*#t#«***##*####*##*# 

procedure CIW_DISPLAY_LINES (WINDOW_ID : in ADDRESS; 

SUB_ADD_FLAG t in ADDRESS; 

X POINTS : in ADDRESS; 


C-10 






Y_POINTS 

: 

in 

ADDRESS; 

NUMBER_POINTS 

: 

in 

ADDRESS; 

COLOR 

: 

in 

ADDRESS; 

PLANE MASK 

: 

in 

ADDRESS); 


—CPM 

description: 

— 

This module Disp! 

— 

specified planes. 

—CPM 

design notes: 

— 

1.) This module 

—formal parameters 

—IN 

WINDOW_ID 

—IN 

SUB_ADD_FLAG 

—IN 

X_POINTS 

— IN 

Y_POINTS 

— IN 

NUMBER_POINTS 


> 

—IN 

COLOR 

—IN 

PLANE_MASK 

—end 

formal parameters 


- The Id of the window to display the lines in. It 
can be obtained by calling uwm_query_window_id. 

- Image Subtraction or Addition Flag. During 
subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits set in the raster image shall be 
added into the selected planes. 

= 0 - Subtract the lines. 

= 1 - Add the lines. 

- The list of window X coordinate Points in the 
contiguous line segments. 

- The list of window Y-coordinate Points in the 
contiguous line segments. 

- The Number of Points in the list. This will 
produce (number_points - 1> line segments. 

•« 2 and fit in a 32 bit integer. 

- The index into the color lookup table for the Color 
of the lines. 

- A bit map representation of the Planes to be 
affected by the line. Value can be obtained from 
"CIW PLANE MASK". 


#«*#*****««#***##««***#«*#«*####**««*«***##****#****««##*#*###**##*####«*«# 


procedure ciw DISPLAY SYMBOL 


(WINDOW_ID : in 
FONT_ID : in 
SUB_ADD_FLAG 5 in 
PIXEL_COLUMN S in 
pixel~Row x in 
SYMBOL_VALUE J in 
COLOR ” > in 
PLANE MASK : in 


ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS; 
ADDRESS); 


—CPM 


description* 

This module Displays or erases a font symbol in the specified planes. 


—CPM design notes: 

— 1.) The font must be initialized with CIW_lNIT_FONT before an element 

— can be displayed. 


—formal parameters 

—IN KINDOW_id - The Id of the Window to display the symbol in. It 


c-11 


— IN 


— IN 


can be obtained by calling UWM_QUERY_WINDOW_lD. 

FONT_ID - The Id of the symbol Font. Value is output from 

"CIW_INIT_FONT“. 

sub_add_flag - Image subtraction or Addition Flag. During 

subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. -During 
addition, the bits set in the raster image shall be 


— 



added into the selected planes. 

— 


= 

0 - subtract the symbol. 

— 


me 

1 - Add the symbol. 

—IN 

PIXEL_COLUMN 

- 

The Pixel Column of the upper left corner of the 

— 



symbol. 

—IN 

PIXEL_ROW 

- 

The Pixel Row of the upper left corner of the 

— 



symbol. 

— IN 

S Y MB OL_VALUE 

- 

The integer Value of the Symbol to be displayed. 

—IN 

COLOR 

- 

The index into the color lookup table for the Color 

— 



of the symbol. 

— IN 

PLANE_MASK 

- 

A bit map representation of the Planes to be 

— 



affected by the symbol. Value can be obtained from 


"CIW PLANE MASK" 


—end formal parameters; 


##«t######f#############f#<##*tf*###t######f#l##########f##f#####t#t#####ft* 

procedure CIW DISPLAY TE*T 


WINDOW_ID 

; 

in 

ADDRESS; 

FONT ID 

e 

• 

in 

ADDRESS; 

SUB ADD_FLAG 

• 

e 

in 

ADDRESS; 

PIXEL COLUMN 

s 

in 

ADDRESS; 

PIXEL ROW 

t 

in 

ADDRESS; 

TEXT STRING 

i 

in 

ADDRESS; 

COLOR 

t 

in 

ADDRESS; 

PLANE_MASK 

s 

in 

ADDRESS) 


—CPM descriptions 

This module Displays or erases a Text string in the specified planes. 


—CPM design notes: 

— 1.) The font must be initialized with CIW_INIT_FONT before a string 

— can be displayed. 


—formal parameters 
—IN WINDOW_ID 

—IN FONT_ID 

—IN SUB ADD FLAG 


—IN PIXEL_COLUMN 

—IN PIX£L_ROW 

—IN TEXT STRING 


- The Id of the Window to display the text string in. 
It can be obtained by calling uwm_QUERY_window_id. 

- The Id of the text Font. Value is output from 
"CIW_INIT_FONT". 

- image Subtraction or Addition Flag. During 
subtraction, the bits set in the raster image shall 
be subtracted out of the selected planes. During 
addition, the bits set in the raster image shall be 
added into the selected planes. 

- 0 - subtract the text. 

■ 1 - Add the text. 

- The Pixel Column of the upper left corner of the 
text. 

- The Pixel Row of the upper left corner of the text. 

- The String of Text to be displayed. 


C-12 






—IN COLOR - The index into the color lookup table for the Color 

of the text string. 

—IN PLANE_MASK - A bit map representation of the Planes to be 

— affected by the text string. Value can be obtained 

from "CIW_PLANE_HASK*. 

—end formal parameters; 


- ##############################################################!############ 


procedure CIW ERASE PLANES 


(WINDOW ID 

: 

in 

ADDRESS; 

PIXEL_UL X 


in 

ADDRESS; 

PIXELJJLJf 


in 

ADDRESS; 

SIZE_X 


in 

ADDRESS; 

SIZE_Y 


in 

ADDRESS; 

PLANE_MASK 


in 

ADDRESS) 


—CPM description: 

This module Erases everything in a given rectangular image out of the 
specified Planes. 


—CPM design notes: 

1.) None. 

—formal parameters 

—IN window_ID - The Id of the Window to erase the planes in. It can 

be obtained by calling uwm_query_window_id. 

—IN PIXEL_UL_X - The window X coordinate of the Upper Left corner of 

— the image. 

—IN pixel_UL_Y - The window Y coordinate of the Upper Left corner of 

— the image. 

—IN SIZE_X - The size of the image in the X direction. 

—IN SIZE_Y - The Size of the image in the Y direction. 

—IN plane_MASK - A bit map representation of the Planes to be affected 

by the image. Value can be obtained from 
"CIW_PLANE_MASK". 

—end formal parameters; 


f*t#«i*#*##«#«###H###*######H*f#*t#*#«******#*##*#f#*#**»*##*H*#*###**** 

procedure CIWJFLUSH_BUFFER; 

—CPM description: 

— This module Flushes the graphics command Buffer. 

—CPM design notes: 

1.) X windows buffers its commands and flushes that buffer after 
certain commands or when the buffer is full. Therefore this module 

— only needs to be called when a previous command must be seen 

— immediately. 

—formal parameters 
None 

—end formal parameters; 




C-13 



procedure CIW_FREE_PIXMAP (PIXMAP_ID : in ADDRESS); 

—CPM description: 

— This module Frees up the memory allocated to a Pixmap back in 
CIW_CREAT£_PIXMAP. 

—CPM design notes: 

1.) In EDDXC the contours pixmaps should be freed after each block is 
displayed, but the unit symbology pixmaps can be defined once and left 
for the duration of the run. 

—formal parameters 

—IN PIXMAP_ID - The Pixmap Id returned from CIW_CREATE_PIXMAP. 

—end formal parameters; 


- **##*************#****#**########*#<##§####**#***#***#*<**#********##***#** 


procedure CIW_INIT_FONT (FONT NAME 


in 

ADDRESS; 

FONT_ID 


in 

ADDRESS; 

FONT HEIGHT 


in 

ADDRESS; 

FONT WIDTH 


in 

ADDRESS); 


—CPM description: 

— This module Initializes a specified Font. 


—CPM design notes: 

1. ) Fonts are only initialized once. 

2. ) It is legal to have multiple fonts in a single process. 

--formal parameters 

—IN FONT_NAME - The string containing the Font's directory and Name. 

—OUT font_ID - The Id of the Font as returned by the X system. 

—OUT FONT_HEIGHT - The Height, in pixels, of a Font character. 

—OUT FONT_WIDTH - The Width, in pixels, of a Font character. 

—end formal parameters; 


#**#*i*#i**#*******#**«#******###*##*##*i#*#*#*#*#**#**#####*#***»*###***** 

procedure CIW_INIT_LOOKUP_TABLE (MAX_PLANES : in ADDRESS); 

—CPM description: 

— This module Initializes (allocates space for) the color Lookup Table. 
—CPM design notes: 

1.) The lookup table is only initialized once. 

—formal parameters 

—IN MAX_PLANES - The Maximum number of color Planes currently allowed 

in the system. 

—end formal parameters; 


###**###«#•**•*#**#***#*##*•**#***#***##•*#***#«*#*«#«*#**#*****###*###**** 


procedure CIW_LOAD_LOOKUP_TABLE (LUT_INDEX : in 

RED_INTENS : in 
GREEN INTENS : in 


ADDRESS; 
ADDRESS; 
ADDRESS; 


C-14 





BLUE INTENS : in ADDRESS); 


—CPM description: 

— This module Loads color values into the color Lookup Table. 

—CPM design notes: 

1.) The display is not altered by calling this module; the display 

— is altered by calling Clw_STORE_LOOKUP_TABLE. 

—formal parameters 

—IN LUT_INDEX - The Index into the Lookup Table to load. Zero is 

— the first cell in the lookup table. 

—IN RED_INTENS - The Intensity for Red. 

—IN GREEN_INTENS - The Intensity for Green. 

—IN blue_intens - The Intensity for Blue. 

—end formal parameters; 


######f####t#######t###i#ff##i#i##i##i#####*#####it###t##ft#tt#######t##ttt 


procedure ciw_move_IMAGE 


(WINDOW__ID 




in 

ADDRESS; 

OLD_PIXEL_ 

UL 

X 


in 

ADDRESS; 

OLD_PIXEL^ 

"ul‘ 

"y 


in 

ADDRESS; 

new~pixel" 

"ul‘ 

'x 


in 

ADDRESS; 

NEW PIXEL UL 

'y 


in 

ADDRESS; 

SIZE X 



in 

ADDRESS; 

SIZE_Y 




in 

ADDRESS) 


—CPM description: 

— This module Moves a raster Image from one location in a window to 

— another location within the same window. 


—CPM design notes: 
-- 1.) None. 


—formal parameters 

—IN WINDOW_iD - The id of the Window the image is in. It can be 

obtained by calling UWM_QUERY_WINDOW_lD. 

—IN OLD_PlXEL_UL_x - The window x coordinate of the Upper Left corner 

of the source image. 

—IN OLD_PIXEL_UL_Y - The window Y coordinate of the Upper Left corner 

of the source image. 

—IN NEW_PIXEL_UL_X - The window X coordinate of the Upper Left corner 

— of the destination image. 

—IN NEW_PIXEL_UL_Y The window Y coordinate of the Upper Left corner 

of the destination image. 

—IN siZE_X - The size of the image in the X direction. 

—IN SIZE_Y - The size of the image in the Y direction. 

—end formal parameters; 


f*i*«*#**##*#**«*###*«t#*«#«#«##««IH**H«#*f**f«#«*#*#*#*##*###<«#*##*#**# 

procedure CIW_PLANE_MASK (START PLANE » in ADDRESS; 

END_PLANE : in ADDRESS; 

PLANE_MASK : in ADDRESS); 

—CPM description: 


C-15 



This module calculates a bit map representation (Mask) of the Planes 

— requested by the user for later use. 

—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN STA*T_PLANE - The Plane number of the lowest plane to be affected 

— by the image. Bit 1 of the raster image shall be 

loaded into this plane. Plane numbers start at 1. 

—IN end_plane - The Plane number of the highest plane to be affected 

by the image. Image bits that are greater than 
(end_plane - start_plane +1) shall be ignored. 

—OUT plane_mask - A bit map representation of the Planes which the 

user would like to affect in a future window call. 

—end formal parameters; 


— ###*####**##***#*###**#«#«*##***«*********##*t#*****#*##***##***#**#*#***## 


procedure CIW RUBBERBAND LINE 


(WINDOW_ID : 

in 

ADDRESS; 

FROM POINT_X : 

in 

ADDRESS; 

FROM_POINT_Y * 

in 

ADDRESS; 

COLOR ~ : 

in 

ADDRESS; 

PLANE MASK : 

in 

ADDRESS; 

END_POINT_X : 

in 

ADDRESS; 

END~POINT_Y t 

in 

ADDRESS) 


—CPM description: 

This module draws a Rubberband Line in the specified window from 
the specified point to the cursor and returns the end point selected 
by the user. 

—CPM design notes: 

1. ) If the user moves the cursor outside the window and selects the 

~ point, the end point coordinates are the lines window boundry crossing. 

2. ) if the user moves the cursor outside the window and selects the 
point, the rubberband line is not drawn upon return. 


—formal 

parameters 

—IN 

WINDOW_ID 

—IN 

FROM_POINT_X 

— IN 

FROM_POINT_Y 

—IN 

COLOR 

—IN 

PLANE_MASK 

—OUT 

END_POINT_X 

—OUT 

END POINT Y 


—end formal parameters; 


The Id of the Window the line is in. It can be 
obtained by calling UWM_QUERY_WINDOW_lD. 

The window X coordinate of the Point the lines 
rubberbanding emanates From. 

The window y coordinate of the Point the lines 
rubberbanding emanates From. 

The index into the color lookup table for the Color 
of the line. 

A bit map representation of the Planes to be 
affected by the line. Value can be obtained from 
•CIW_PLANE_MASK*. 

The window~x coordinate of the lines End Point as 
selected by the user. 

The window Y coordinate of the lines End Point as 
selected by the user. 


C-16 




procedure CIW_STORE_LOOKUP_TABLE; 

—CPM description: 

This module Stores the color Lookup Table. 


—CPM design notes: 

1.) calling this module alters the display provided some of the 
values were changed with ClW_LOAD_LOOKUP_TABLE. 

—formal parameters 
— None. 

—end formal parameters; 


— ***********##********##*«#*#*##*#*###*#####*#*###***«#*##«#*********«#*#*#* 

procedure CUX_16BIT_SWAP (NUMBER_16BIT : in INTEGER; 

BIT IMAGE : in ADDRESS); 


—CPM description: 

— This module Swaps the Bits of 16 bit words, an order X windows happens 
to prefer. 

—CPM design notes: 

1.) bit 0 -> bit 15; bit 15 -> bit 0 

bit 1 -> bit 14; bit 14 -> bit 1 ... 

—formal parameters 

—IN NUMBER_16bit - The number of 16 bit words in the image. 

—I/O bit_image - Buffer containing the bit image. 

—end formal parameters; 


private 


pragma 

INTERFACE 

<c, 

pragma 

INTERFACE 

<c, 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

<c. 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

<c. 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

<c. 

pragma 

INTERFACE 

<c. 

pragma 

INTERFACE 

<c. 

pragma 

INTERFACE 

<c. 

pragma 

INTERFACE 

<c, 

pragma 

INTERFACE 

<c. 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

(C, 

pragma 

INTERFACE 

(C, 


CI W_CREATE_P IXMAP); 
CIW_DISPLAY_BIT_IMAGE); 
CI W_DIS PLAY j:IRCLE); 
CIW_DISPLAY~IMAGE); 
CIW_DISPLAY~LINE); 
CIW~DISPLAY~LINES); 
CIW_DISPLAY~SYMBOL); 
CIW~DISPLAY~TEXT); 
CIW_ERASE_PLANES); 
CIW~FLUSH BUFFER); 
CIW~FR£E_PIXMAP); 
CIW_INIT _ FONT); 
CIW~INIT~LOOXUP_TABLE); 
CIW~MOVE~IMAGE)” 
CIW~L0Ad”L00KUP_TABLE); 
CIW_PIiANE_MASK); 
CIHJWBBERBANDJLINE) ; 
CIW~STORE LOOKUP TABLE); 
CUX _ 16BIT_SWAP )}~ 


C-17 



end CIW IMAGE WINDOW 






—CPC package specification name: 

CUX_UTIL 

—CPC description: 

CUX_UTIL CPC is a set of utility primitives, written in the "C" 

— programming language, which allow programs to access UNIX operating 

— system commands. This specification is what allows Ada to call, or bind, 

— these C modules. 

—CPC design notes: 

— 1.) None. 

—CPC package author: 

Bruce J. Packard 

— Science Applications international corporation (SAIC) 

424 Delaware, suite C-3 

Leavenworth, KS €6048 (913) 651-7925 


with SYSTEM; use SYSTEM; 

with SYSTEM PACKAGE; use SYSTEM PACKAGE; 


package CUXJDTIL is 


-- #########***#****#**#*#*####*#*#*#*####«*####*#*##<##*###*##*#*#*»##***#### 


procedure CUX_BINARY_READ (FILE_DESC : in 

offset : in 

RECORDJLENGTH : in 

FORMAT : in 

BUFFER * in 


ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS); 


—CPM description: 

This module performs a binary (unformatted) read on a specific record 
of the specified file, which was opened by CUX_C.EN_FILE. 

—CPM design notes: 

— 1.) None. 


—formal parameters 

—IN FILE_DESC - A pointer to the file descriptor returned from 

~ CUX_OPEN_FILE. 

—IN OFFSET - The - offBet from the beginning of the file (Starts 

at one). For fixed length record files the offset 

— units are records. For variable length record 

— files the offset units are bytes. 

—IN RECORD_LENGTH - Number of bytes in this record to be read. 

—IN FORMAT - File format. 

— ■ 0 - Fixed length records. 

— - 1 - variable length records. 

—OUT buffer - pointer to the Buffer that was read. 

—end formal parameters; 


— *####***###«|##«#<««*##«#*i««##««««<«#H#«*H#*«»*#*f#**««*##*t*H****Ht»# 


procedure cux_binary_write (File_desc » in 

OFFSET « in 

RECORD LENGTH : in 


ADDRESS; 

ADDRESS; 

ADDRESS; 


C-19 


FORMAT 

BUFFER 


: in 
: in 


ADDRESS; 
ADDRESS) ; 


—CPM descriptions 

This module performs a binary (unformatted) write on a specific record 
of the specified file, which was opened by CUX_OPEN_FILE. 

—CPM design notes: 

1.) None. 


—formal parameters 

—IN FILE_DESC - A pointer to the file descriptor returned from 

CUX_OPEN_FILE. 

—IN offset - The offset from the beginning of the file (Starts 

at one). For fixed length record files the offset 
units are records. For variable length record 
files the offset units are bytes. 


-IN 

RECORD LENGTH 

- Number of bytes in this record to be written. 

-IN 

FORMAT 

- File format. 

-IN 

BUFFER 

* 0 - Fixed length records, 
si- variable length records. 

- pointer to the Buffer to incite to. 


—end formal parameters; 

#########f#####l###<###«#####i###ii#it###t##iii#liif<##4#4##it####t##tt##ff 

procedure CUX_CLOSE_FILE (FILE_DESC S in ADDRESS); 

—CPM description: 

— This module closes a file opened by CUX_OPEN_FILE. 


—CPM design notes: 
— 1.) None. 


—formal parameters 

—IN FILE__desc - a pointer to the file descriptor returned from 

~ CUX_OPEN_FILE. 

—end formal parameters; 

procedure CUX_GETENV (ENV_STRING : in ADDRESS; 

RESULT STRING : in ADDRESS); 


—CPM description: 

— This module searches the Unix Environment list and returns (Gets) the 

— evaluated, requested string. 

—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN ENV_STRING - The string that was created by a setenv. 

—OUT RESULT_STRING - The evaluated Environment String. 

—end formal parameters; 

##fl####ff###tH#t#fti##4tti#t###HH##it#####l####i####################### 

procedure CUX_OPEN_FILE (FILENAME I in ADDRESS; 


C-20 



FILE_OPERATION : in ADDRESS; 
FILE_DESC : in ADDRESS); 


—cpm descriptions 

— This module opens a file for the performing of binary reads and writes. 

—CPM design notes: 

1.) None. 

—formal parameters 
—IN FILE NAME 

—IN FILE~OPERATION 


—OUT FILE^DESC 

—end formal parameters; 

— **#«*#***#****#**##**#**#*###*#****«#**##*##***»###<#»#**##*#*#***#*#**#### 

procedure CUXJSETENV <ENV_STRING : in ADDRESS; 

VALUE_STRING s in ADDRESS); 


- The name of the file to be opened. 

- A flag that tells which Mode to open the file. 
« 0 - Read only. 

■ 1 - Read, write, and create if needed. 

■ 2 - Append. 

- File descriptor assigned to the open file. 


—CPM description: 

— This module sets a Unix Environment variable to the requested string. 

—CPM design notes: 

1.) None. 

—formal parameters 

—IN ENV_string - The environment variable string name. 

—IN VALUE_STRING - The value to set the environment variable to. 

—end formal parameters; 

— ***#*#*##*#•*#****##«*<****##«*#M###»f*t#*H##*#*#*#**<**#**#*#t##»#*##### 

procedure CUX_SYSTEM (CMD_STRING : in ADDRESS); 

—CPM description: 

This module executes a Unix System call. 

—CPM design notes: 

— 1.) None. 

—formal parameters 

—IN CMD_STRING - Command string to execute in the UNIX environment. 

—end formal parameters; 

— ***t*«#*#«*##M*#*M#***«f**f*#(*|#(**tf #f !#((#«* «*##**#**###*•#***##***#»* 

procedure CUX_WAIT <S£CONDS_TO_WAIT : in ADDRESS; 

SECONDS_WAITED : in ADDRESS); 

—CPM description: 

— This module suspends a process for a specified period of time. 

—CPM design notes: 

— 1.) None. 


C-21 




—formal parameters 

—IN SECONDS_TO_WAlT - The number of seconds to suspend the process. 

—OUT SECONDS_WAITED - The number of seconds actually suspend. 

—end formal parameters; 

private 

pragma INTERFACE (C, CUX_BINARY_READ); 
pragma INTERFACE (C, CUX_BINARY_WRITE); 
pragma INTERFACE (C, CUX~CLOSE_FILE); 
pragma INTERFACE (C, CUX_GETENV); 
pragma INTERFACE (C, CUX_OPEN_FILE); 
pragma INTERFACE (C, CUX~SETENV); 
pragma INTERFACE (C, CUX_SYSTEM); 
pragma INTERFACE (C, CUX_WAIT); 

end CUX UTIL; 


C-22 



—cpc package specification name: CWN_WINDOW_SYSTZM 

—cpc description: CWN_W!NDOW_SYSTEM is the C version of the EDDXC window 

— utilities using the x-window protocol. — 

—cpc design notes: 

—cpc package author: Bruce Packard 

Laura McClanahan 

Science Applications International Corporation 

— 424 Delaware, Suite C3 

Leavenworth, KS 66048 

with SYSTEM; use SYSTEM; 

with SYSTEM_PACKAGE; use SYSTEM_PACXAGE; 

package cwn_window_system is 

procedure CWN_ACTIVATE_EDITOR (EDITOR_ID: in ADDRESS); 

— CPM description: This routine activates an existing editor. It is 

provided basically for traversing from a string field 
or numeric field to an editor. 


— formal parameters 

—IN EDITOR_lD The id of the editor to activate. 

— end formal parameters; 


procedure CWN_ACTIVATE MENU (MENU STRUCT ID: 

in 

ADDRESS; 

MENU INDEX: 

in 

ADDRESS; 

WINDOW_TYPE: 

in 

ADDRESS; 

WINDOW~ID: 

in 

ADDRESS) 


— CPM description: This routine activates an already defined popup menu for 

either: 

a. A defined window, 

b. a displayed panel (via cwn_endjpanel), 

— c. or, a defined button (via cwn_define_button). 

It also specifies the mode for posting the menu. 

— formal parameters 

—IN MENU_STRUCT_ID The id of the menu structure given at the time 

— of the menu definition. 


—IN MENU INDEX 


—IN WINDOW TYPE 


The index into the Text_Array of the submenu to 
be activated for a particular window, if applicable. 
If the menu to be activated is not a walking menu, 
or is the top level of a walking menu, then this 
parameter should be set to NULL. 

The type of window the menu will be activated for, 
where: 

sys_window - a defined window 

SYS~DISPLAY panel - a displayed panel 
SYs”*DEFINED — BUTTON - defined button 


C-23 



—IN window_ID The id given at the tine of the window type's 

creation where: 

if window type ia SYS_WIND0W and window_id is 0, 
then the menu will be activated for the - Rootwindow 

_ or (Display). Otherwise, the menu will be activated 

for the matching window_id. 

if window_type - SYS_DISPIAY_PANEL, the id should 

— be the panel id. 

_ If window_type - SYS__DEFINED_BUTTON, the id should 

— be the button id. 


— end formal parameters; 


procedure CWN_ACTIVATE_NUMBER_FIELD ( 

NUMBER_FIEU3_ID: in ADDRESS) ; 

_ CPM description: This routine activates an existing number field. It is 

provided basically for traversing from one number field 
— to another. 


— formal parameters 

—IN NUMBER FIELD_ID The id of the numeric field to activate. 
—end formal parameters; 


procedure CWN_ACTIVATE STRINGJTIELD ( 

STRING JFIELD_ID: in ADDRESS); 

— CPM description: This routine activates an existing string field, it is 

provided basically for traversing from one string field 
to another. 


— formal parameters 

—IN STRING_FIELD_ID The id of the string field to activate. 

—end formal parameters; 


procedure CWN_ADD_INPUT_SOCKET (SOCKET_XDl in ADDRESS); 

— CPM description: CWN_ADD_INPUT_SOCKET adds a socket id to be watched by 

CWN_INPUT. When a message is received on this socket, 
CWN INPUT returns type SYS_INPUT_KESSAGE along with the 
socket ZD. The applications software is responsible for 

— reading the message. 


— formal parameters 

—IN socket_ID ID of the socket to watch for input. 

— end formal parameters; 


procedure CNN_CBANGE BUTTON LABEL (BUTTON_XDl in ADDRESS; 

" BUTTON”TEXT: in ADDRESS); 


C-24 


— cPM description: CWN_CHANGE_BUTTON_IABEL changes the text displayed inside 

— a button created with CWN_DEFINE_BUTTON. 

— formal parameters 

—IN BUTTON_ID ID attached to the button. 

—IN BUTTON_TEXT Textual string to display in the button. 

— end formal parameters; 


procedure CWN_CHANGE_CHECKBOX_STATES (CheckboX_ID: in ADDRESS; 

Num_Fields: in ADDRESS; 

Start_lndex: in ADDRESS; 

Status Array: in ADDRESS; 

State_Flag: in ADDRESS); 

— CPM description: CWN_CHANGE_CBECKBOX_STATES changes one or more 

checkbox states according to the input state flag. 


— formal parameters 
—IN checkbox_ID 

—IN Num_Fields 

—IN Start Index 


—IN status_Array 

—IN state_Flag 

— end formal parameters; 


The ID attached to the checkbox editor. 

The number of checkboxes) states to be changed. 

The correlating index of the checkbox which the 
start of the array to the order the items were 
originally created; the first element is always 
zero. 

The array of current status of the checkboxes to 
be changed. 

The flag indicating the state all the checkboxes 
are to match. 


procedure CWN_CHANGE_EDITOR_TEXT <EDITOR_ID: in ADDRESS; 

MAX_BUFFER_SIZE: in ADDRESS; 

TEXT_BUFFER: in ADDRESS; 

BUFFER_SIZE: in ADDRESS); 

— CPK description: Changes the text buffer used window full page 

— text editor. 


— formal parameters 
—IN EDITOR ID 


ID attached to the editor. 


—IN KAX_BUFFER_SIZE Maximum number of pixels that the TEXTJBUFFER 

~ can hold. 


—IN TEXT BUFFER 


Buffer of the initial text to display in the editor. 


—IN BUFFER_SIZE The number of pixels in TEXT_BUFFER. 

— end formal parameters; 


C-25 





procedure CWN_CHANGE_ICON_LABEL (ICON_LABEL: in ADDRESS); 

— cpm descriptions CWN_CHANGE_ICON_LABEL changes the icon label displayed 

in the window's icon. 

— formal parameters 

—IN icon_LABEL Textual string to display in the icon. 

Note: This must be a null terminated string of 
7 characters in length. 

— end formal parameters; 


SCROLLBAR_ID: 

in 

ADDRESS; 

DOC_SIZE:” 

in 

ADDRESS; 

PIXEL_LENGTH: 

in 

ADDRESS; 

DISP POSITION: 

in 

ADDRESS; 

SCROLL_INTRVL: 

in 

ADDRESS); 


— cpm description: changes the size of a scrollbar. 

— formal parameters 


— IN 

SCROLLBAR_ID 

ID to attached to the scrollbar. 

This ID was defined by cwn_DEFINE_scrollbar. 

—IN 

DOC_SIZE 

The number of lines in the document buffer. 

1 1 1 
1 t 1 
H 

z 

PIXEL_LENGTH 

The number of pixels to be occupied 
scrollbar. 

—IN 

PIXEL_LENGTH 

The number of pixels to be occupied 
scrollbar. 

— IN 

SCROLL_INTRVL 

The number of pixels the work will be scrolled 
whenever the user selects an arrow button. Nol 
The work will not be scrolled se utilities 
but, this argument is required to calculate 
the interactive slidepositioning. 

— end 

formal parameters 

r 


procedure CWN_CHANGE_WINDOW LABEL (WINDOW LABEL: 

LABEL POSITION: 


in ADDRESS; 
in ADDRESS); 


— CPM description: CWN_CHANGE_WINDOW_LABEL changes the window label 

— displayed in the window's top border. 


— formal parameters 

—IN window__LABEL Textual string to display. 

Note: This must be a null terminated string of 
as described in SYS_WINDOW_NAKE. 

—IN label_position The position of the window title bar this 

— label is changing as described in SYS_TEXT_ 

— ALIGNMENT. An alignment of NONE will result 

— in a change of the CENTER label. 

— end formal parameters; 


procedure CWN CLEAR WINDOW; 


C-26 



— CPM description: Erases all element inside a defined window. 

— formal parameters 

— None 

— end formal parameters; 


procedure CWN_CLOSE_WINDOW; 

— CPM description: closes a window into an icon. 

— formal parameters 

— None 

— end formal parameters; 


procedure CWN_CREATE_EXPOSUREJEVENT (WINDOW_ID: in ADDRESS); 

— CPM description: This procedure creates an exposure event for a 

particular window. 


— formal parameters 

—IN WIND0W_ID The ID attached to the window. 

— end formal parameters; 


(WINDOW ID: 

in 

ADDRESS; 

MAP WINDOW: 

in 

ADDRESS; 

PIXEL COL: 

in 

ADDRESS; 

PIXEL_ROWr 

in 

ADDRESS; 

PIXEL_WIDTH: 

in 

ADDRESS; 

PIXEL_LENGTH: 

in 

ADDRESS; 

BORDER_WIDTH: 

in 

ADDRESS; 

SUBWINDOW ID: 

in 

ADDRESS); 


— CPM description: This procedure creates a subwindow to the window 

specified by the user. All input selected for the 
parent window and any menu activated for the parent 
window will be effective for the subwindow also, unless 
other input is selected or another menu activated 
specifically for this window. 


— formal parameters 
—IN WINDOW_ID 

—IN MAP_WINDOW 

—IN PIXEL_COL 

—IN PIXELJROW 

—IN PIXEL WIDTH 


The id of the parent window. 

Boolean indicating whether window should be mapped. 

column number from within the window where the left 
side of the subwindow shall be placed. Column 0 is 
at the left of the window. 

Row number from within the window where the top side 
of the subwindow shall be placed. Row 0 is at the 
top of the window. 

The number of pixels to be occupied 


C-27 





subwindow'a width 


— IN PIXEL LENGTH 


—IN BORDER WIDTH 


—OUT SUBWINDOW_ID 

— end formal parameters; 


The number of pixels to be occupied 
subwindow's length. 

The width of the border in pixels. If the border 
width is zero, the subwindow will not have a border. 

The id of the subwindow as given by the X window 
system. 


procedure CWN_CREATE_WINDOW (WlNDOW_IDs 

WINDOW_LABEL: 
MAP_WINDOW: 
ICON_TYPE: 
ICON__STACK INDXs 
ICON - IDs 


in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS) 


— CPM description: Creates a basic window skeleton with border, title, icon 

— and frame popup menu attached, only one window per 

— process. 


— formal parameters 


—OUT 

WINDOW_ID 

The id given the window. 


— IN 

WINDOW_LABEL 

Textual string to be displayed in 

the window border. 

—IN 

MAP_WINDOW 

Boolean indicating whether window 
(Made visible upon creation). 

should be mapped 

— IN 

ICON_TYPE 

Identifies the icon stack that the 
assigned to. 0 - Reference icon 

1 - View CSC Icon 

i new window is 



2 * Process Messages 

3 » Build esc icon 

Icon 


—OUT 


4 ” Decision Aids Icon 

5 - Experiment Control Icon 

IC°N_STACK_INDX Position in the Icon stack of the newly created 
window (1 - 7); 


—out icon_id The id of the icon window. 

— end formal parameters; 


procedure CWN_DEACTIVATE_MENU <MENU_STRUCT_IDS in ADDRESS; 

MENU_INDEX: in ADDRESS); 

— CPM description: This routine deactivates an already defined popup menu. 

— formal parameters 

—IN MENU_STRUCT_ID The id of the menu structure given by the 

~ application at the time of the menu definition. 


C-28 






—IN MENU_INDEX The index into the start_Array of the submenu to 

be deactivated for a particular window. 

— If the menu to be activated is not a walking menu, 

— or is the top level of a walking menu, then this 

— parameter should be set to NULL. 


— end formal parameters; 


procedure CWN_DEFINE_BUTTON 


(BUTTON_ID s 
WINDOW_ID: 
ENABLE_FLAG: 
PIX£L_COL: 
PIX£L~ROW: 
PIXEL_WIDTH: 
PIX£L_HEIGHT: 
BUTTON TEXT: 


in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS) 


— cpm description: Defines a button on top portion of a window. Once a 

button has been defined, only other buttons may be placed 
beside it. All other structures must be placed below 
the buttons. These buttons are used mostly for initiating 
a walking menu {see CWN_activate_MENU). 


— formal parameters 
—OUT BUTTON_ID 

—IN WINDOW_ID 

—IN ENABLE FLAG 


—IN PIXEL_COL 

—IN PIXEL ROW 


The ID attached to the defined button. This 

ID is required for all interactions with the button. 

The ID of the window to attach the button to. 

Logical flag to indicate if the button should be 
backlight when it is selected and the button ID will 
be returned to the application. The disabled mode is 
used to display a walking menu when the button is 
selected- 

true « ENABLED 
false - DISABLED 

column number from within the window where the left 
side of the button shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the button shall be placed. Row 0 is at the top 
of the window. 


—IN 

PIXEL_WIDTH 

85 

H 

1 1 1 
1 1 l 

PIX£L_HEIGHT 

—IN 

BUTTONJTEXT 

— end 

formal parameters 


The number of columns to be occupied button. 
The number of rows to be occupied button. 
Textual string to display in the button. 


procedure cwn_define_checkbox ( 


C-29 



EDITOR_ID: in 

ADDRESS 

r 



DEST_TYPE: 

in 

ADDRESS; 



DEST_ID: 

in 

ADDRESS; 



PIXEL_COL: 

in 

ADDRESS; 



PIXEL_ROW: 

in 

ADDRESS; 



NUM_FIELDS: 

in 

ADDRESS; 



NUM_COLS: 

in 

ADDRESS; 



LABELS: 

in 

ADDRESS; 



LABEL_LENGTH: 

in 

INTEGER; 



STATUS: 

in 

ADDRESS; 



SUBPANEL_ID: 

in 

ADDRESS 

SYS_NULL_SUBPANEL'ADDRESS; 

PIXEL_WIDTH: 

in 

ADDRESS 

SY S_NULL_C OLUMN'ADDRESS; 

PIXEL~HEIGHT: 

in 

ADDRESS :» 

SYS~NULL~ROW'ADDRESS); 

H description: Creates 

a checkbox button 

editor. 



— formal parameters 

—OUT EDIT0R_ID Address of variable to hold ID attached to the 

editor. This ZD is required for all interactions 
with the editor. 


—IN DEST TYPE 


—IN DEST ID 


—IN PIXEL COL 


The type of the destination for the editor, where: 
SYS_wiNDOW_DEST - window 
SYS_PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 

column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 


—IN pixel_ROW Row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 
of the window. 


—IN NUM FIELDS 


The total number of checkbox buttons to be in the 
editor. 


—IN NUM_COLS 

—IN LABELS 


The number of columns the checkbox buttons are to be 
arranged in. 

Pointer to the array of labels for all the checkbox 
buttons. 


—IN LABEL_LENGTH The maximum length of the labels. 


—IN STATUS Pointer to the boolean array of statuses for all the 

— checkbox buttons. 

--IN SUBPANEL_ZD ZD attached to the subpanel that 

the editor is assigned to. If the editor is not 
assigned to a subpanel, use a zero which is the 

— default. 


C-30 





—IN pixel_width The number of pixel columns wide the checkbox is to 

be created. If the width is to be calculated, use 

— the default value of zero. 

—IN PIXEL_BEIGHT The number of pixel rows wide the checkbox is to be 

— created. If the height is to be calculated, use the 

— default value of zero. 


— end formal parameters; 


procedure CWN DEFINE EDITOR (EDITOR ID: in ADDRESS; 


DEST TYPE: 

in 

DEST_ID: 

in 

PIXEL_COLs 

in 

PIXEL ROW: 

in 

PIXEL WIDTH: 

in 

PIXEL HEIGHT: 

in 

READ ONLY: 

in 

MAX_BUFFER SIZE: 

in 

TEXT BUFFER: 

in 

BUFFER SIZE: 

in 

SUBPANEL ID: 

in 


— CPH description: Creates a window 


ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS :« SYS_NULL_SUBPANEL'ADDRESS); 
full page text editor. 


— formal parameters 

—OUT EDlTOR__ID Address of variable to hold ID attached to the 

— editor. This id is required for all interactions 

— with the editor. 


—IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
SYS_wiNDOWj>EST - window 
SYS_PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 


—IN PIXEL_COL 

—IN PIXEL_ROW 

—IN PIXELJWIDTH 

—IN PIXEL_HEIGHT 
—IN READ ONLY 


Column number from within the window where the left 
side of the editor shall be placed, column 0 is at 
left of the window. 

Row number from within the wii.dow where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The number of columns to be occupied editor. 

The number of rows to be occupied editor. 

Flag indicating if the user has full editing 
capabilities or is limited to only scroll and copy 
operations. 

true “ Read only 
false ■ Full edit 


C-31 



—IN 

MAX_BUFFER_SIZE 

Maximum number of pixels that the TEXT_BUFFER 
can hold. 

—IN 

TEXT_BUFFER 

Buffer of the initial text to display in 

the editor. 

—IN 

BUFFER_SIZE 

The number of pixels in TEXT_BUFFER. 

** 

—IN 

SUBPANEL_ID 

ID attached to the aubpanel that 

the editor is assigned to. If the editor 

assigned to a subpanel, use a zero. 

is not 


— end formal parameters; 


procedure CWN_DEFINE_NUMBER_FIELD ( 


EDITOR_ID: 

in 

DESTJTTPE: 

in 

DESTJLD: 

in 

PIXEL COL: 

in 

PIXEL ROW: 

in 

LABEL: 

in 

LABEL POSITION: 

in 

NUMBER_VARIABLE: 

in 

MINJNUMBER: 

in 

MAX NUMBER: 

in 

MAX CHARACTERS: 

in 

SUBPANEL ID: 

in 


ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS STS NULL_SUBPANEL'ADDRESS); 


— cpm description: creates a Numeric Field editor. 

Note: This function will not cause display of the field 
that is defined in a panel as that is caused by 
calling either cvn_end_panel or cwn_end_subpanel. 

— formal parameters 

—OUT editor_id Address of variable to bold ID attached to the 

editor. This ID is required for all interactions 

— with the editor. 


—IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
sys_window_dest « window 
SYS_PANEL_DEST - Panel 

ZD attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the RootWindow. 


—IN PIXEL_COL Column number from within the panel where the left 
— side of the editor shall be placed. Column 0 is at 
—■ left of the window. 


—IN PIXEL ROW 


—IN LABEL 


Row number from within the panel where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The optional label before the number field. This 


C-32 




— should be set to NULL if no label will be displayed. 

—IN I*ABEL_POSlTlON Value specifying whether the optional label should 

-- be placed to the left or the right of the number 

field. The two valid settings for this field are: 

— 0 » Ijeft aligned 

— 1 » Right aligned 

If no label is specified, this parameter will 

— be ignored editor. 


—INOUT NUMBER_VARIABLE The address of the variable to store the 

input number at. This variable may be 
initialized to some number value, which would 
be displayed. This must be a NULL terminated 
string. 


—XN min_number The string representing the minimum number 

to be allowed as input from the user. This 
string must be MAX_CHARACTERS long with each 
digit of the string representing the minimum 
— value for that digit and the string must be NULL 

terminated. 


--IN max_number The string representing the maximum number to be 

allowed as input from the user. This string must 
— be MAX_CHARACTERS long with each digit of the string 

representing the maximum value for that digit and 
the string must be NULL terminated. 


—IN max_characters The maximum number of pixels which will 

be allowed to be entered into the field. 


—IN SUBPANEL_ID ID attached to the subpanel that 

the editor is assigned to. If the editor is not 
— assigned to a subpanel, use a zero. 


— end formal parameters; 


procedure CWN_DEFINE_PANEL (PANEL_ID: in ADDRESS); 

— CPM description: Defines a panel within a window. This procedure must be 

called before defining any field editors. A panel must 
have at least one field editor attached to it. 

— formal parameters 

—OUT PANEL_ID Address of variable to hold ID attached to the 

panel. This ZD is required for all interactions 
with the panel. 

— end formal parameters; 


procedure CWN DEFINE POPUP MENU 


(MENU_STRUCT IDl 

in 

ADDRESS; 

MENUJTITLEj” 

in 

ADDRESS; 

START_ARRAY: 

in 

ADDRESS; 

LENGTH_ARRAY: 

in 

ADDRESS; 

TEXT_ARRAY: 

in 

ADDRESS; 


C-33 



CHILD_ARRAY: in ADDRESS); 

— cpm description: Defines a popup menu which may be a walking menu up to 4 

levels deep. This does not, however, display the menu in 
the window. Only one popup per window allowed. All 
arrays are zero origin in index. The index into 

— Text_Array is used as the menu id. 


- formal 

parameters 


-IN 

MENU JSTRUCTJID 

The id given by the application to the popup menu 
or entire walking menu structure. 

-IN 

MENU_TITLE 

The title of the menu to be displayed at the top 
of the menu. If the menu is a walking menu, then 
only the top menu will contain a title. If the 
user doesn't wish the title to be displayed, then 
this parameter must be set to null. 

-IN 

START_ARRAY 

Index into TEXT_ARRAY for the start of each pop-up 
menu in the walking menu. 

-IN 

LENGTH_ARRAY 

Number of cells in each pop-up menu 

-IN 

TEXT_ARRAY 

Text for each cell of each pop-up menu in the 
walking menu 

-IN 

CHILD_ARRAY 

Pop-up index of the pop-up menu that is the child 
of each pop-up menu cell index into START ARRAY 
and LENGTH ARRAY; 


— end formal parameters; 


procedure CWN DEFINE POPUP WINDOW 


(WINDOW_ID: 

in 

ADDRESS; 

MAP_WINDOW: 

in 

ADDRESS; 

pixel_col: 

in 

ADDRESS; 

PIXEL_ROW: 

in 

ADDRESS; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL_HEIGHT: 

in 

ADDRESS) 


— CPM description: Changes the size of a popup window. 


— formal parameters 

—OUT WlNDOW_lD Address of variable to hold ID attached to the 

window. 


—IN MAP_WINDOW 

—IN PIXEL_COL 

—IN PIXEL ROW 


Boolean logical indicating whether defined window 
should be mapped or not. 

Column number from withir. the display where the left 
side of the window shall be placed. Column 0 is at 
left of the display. 

Row number from within the display where the top side 
of the window shall be placed. Row 0 is at the top 
of the display. 


C-34 



—IN PIXEL_WIDTH The number of columns to be occupied by the window. 

--IN PIXEL_HEIGHT The number of rows to be occupied by the window. 

— end formal parameters; 


procedure CWN_DEFINE_PUSHBUTTON (PUSHBUTTON IDl in ADDRESS; 


DESTJTYPE: 

in 

ADDRESS; 

DEST~ID: 

in 

ADDRESS; 

PIXEL COL: 

in 

ADDRESS; 

PIXEL ROW: 

in 

ADDRESS; 

NUM_FIELDS: 

in 

ADDRESS; 

NUM COLS: 

in 

ADDRESS; 

LABELS: 

in 

ADDRESS; 

LABEL LENGTH: 

in 

INTEGER; 

DEFAULT_BUTTON: 

in 

ADDRESS; 

SUBPANEL_XD: 

in 

ADDRESS SYS_NULL_SUBPANEL'ADDRESS); 


— CPU description: Creates a pushbutton editor. 


— formal parameters 

—OUT EDIT0R_XD Address of variable to hold ID attached to the 

editor. This id is required for all interactions 
with the editor. 


—IN dest_type The type of the destination for the editor, where: 

SYS_WINDOW_DEST “ Window 
SYS PANEL DEST - Panel 


—IN dest_ID ID attached to the destination that the editor is 

— assigned to. This is set to null when the 

destination is the Rootwindow. 


—IN PIXEL_COL Column number from within the window where the left 

side of the editor shall be placed. Column 0 is at 
left of the window. 


—IN PlXEL_ROW Row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 
— of the window. 


—IN NUM FIELDS 


The total number of pushbuttons to be in the 
editor. 


—IN NUM COLS 


The number of columns the pushbuttons are to be 
arranged in. 


—IN LABELS 


Pointer to the array of labels for all the 
pushbuttons. 


—IN LABEL_LZNGTH The maximum length of the labels. 


—IN DEFAULT_BUTTON The index into the pushbutton array of the button to 
— be drawn "active" or displayed as the default 

button. A value of sys_no_default_pushbutton will 
-- disable this feature. ~~ 


C-35 







—IN SUBPANEL_XD ID attached to the aubpanel that 

the editor ia aaaigned to. If the editor ia not 
asaigned to a aubpanel, uae a zero. 


— end formal parametera; 


procedure CWN_DEFINE_RADIOBUTTON( RADIOBUTTON ID: in 
~DEST_TYPE s 
DEST_ID: 

PIXEL_COL: 

PIXEL~ROW: 

NUM_FIELDSs 
NUM_COLS: 

LABELS: 

LABEL_LENGTH: 

DEFAULT_BUTTON : 

SUBPANEL ID: 


ADDRESS; 


in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

INTEGER; 

in 

ADDRESS; 

in 

ADDRESS 


SYS NULL SUBPANEL'ADDRESS); 


— CPM description: creates a radiobutton editor where only one button is 

— active at a time. 


— formal parametera 

—OUT EDITOR_ID Address of variable to hold ID attached to the 

editor. Thia ZD is required for all interactions 
with the editor. 


—IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
SYS_WINDOW_DEST - Window 
SYS_PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. Thia is set to NULL when the 
destination is tbe Rootwindow. 


—IN PXXEL_COL Column number from within the window where the left 

side of the editor shall be placed, column 0 is at 
left of the window. 


—IN PlXEL_ROW Row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 


— 


of the window. 


—IN 

NUM_FIELDS 

The total number of radiobuttons to be 
editor. 

in the 

—IN 

NUM_COLS 

The number of columns the radiobuttons 
arranged in. 

are to be 

—IN 

LABELS 

Pointer to the array of labels for all 
radiobuttons. 

the 

—IN 

LABEL_LENGTH 

The maximum length of the labels. 


—IN 

DEFAULT_BUTTON 

The index into the radiobutton array of 

the button 


C-36 






— to be drawn "active" or displayed as the default 

button. 

—IN SUBPANEL_ID ID attached to the subpanel that 

the editor is assigned to. If the editor is not 
assigned to a subpanel, use a zero. 


— end fonnal parameters; 


procedure CWN_DE FINE_SCROLLBAR (SCROLLBAR_IDt in ADDRESS; 


DEST_TYPE: 

in 

ADDRESS; 

DEST_ID: 

in 

ADDRESS; 

ORIENTATION: 

in 

ADDRESS; 

PIXEL COL: 

in 

ADDRESS; 

PIXEL ROW: 

in 

ADDRESS; 

PIXEL_WIDTH: 

in 

ADDRESS; 

PIXEL_LENGTH: 

in 

ADDRESS; 

DOC_SIZE: 

in 

ADDRESS; 

DISP_POSITION: 

in 

ADDRESS; 

SCROLL_INTRVL: 

in 

ADDRESS; 

SUBPANEL_ID: 

in 

ADDRESS :« SYS_NULL SUBPANEL'ADDRESS); 


— CPM description: Creates a horizontal or vertical scroll bar in a window. 


— fonnal parameters 

—out scrollbar_id ID attached to the scrollbar. 

This ID is required for all interactions with the 
scrollbar. 


—IN DESTJTYPE 

—IN DEST_ID 

—IN ORIENTATION 

—IN PIXEL COL 


The type of the destination for the editor, where: 
SYS_WINDOW_DEST ■ Window 
SYS_PANEL_DEST - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to null when the 
destination is the Rootwindow. 

Direction of the scrollbar (Horizontal or Vertical) 

column number from within the panel where the left 
side of the scrollbar shall be placed. Column 0 is 
at the left of the window. 


—IN PIXEL_ROW 

—IN PIXEL_WIDTH 

—IN PIXEL_LENGTH 

—IN DOC SIZE 


Row number from within the panel where the top side 
of the scrollbar shall be placed. Row 0 is at the 
top of the window. 

The number of pixels to be occupied 
scrollbar's width. 

The number of pixels to be occupied 
scrollbar's length. 

The number of lines in the document buffer. 


C-37 



—IN disp_position The offset from the beginning of the work surface to 

first pixel visible to the user. 

—IN SCROLL_INTRVL The number of pixels the work will be scrolled 

— whenever the user selects an arrow button. Note: 

The work will not be scrolled se utilities 

— but, this argument is required to calculate 

— the interactive slidepositioning. 


—IN SUBPANEL_ID ID attached to the subpanel that 

~ the editor is assigned to. Zf the editor is not 

assigned to a subpanel, use a zero. 


— end formal parameters; 


procedure CWN_DEFINE_STATIC_TEXT (STATIC_TEXT_ID: 


DEST_TYPE: 

in 

ADDRESS; 

DEST _ ID: 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

PIXEL ROW: 

in 

ADDRESS; 

PIXEL~WIDTH: 

in 

ADDRESS; 

PIXEL_HEIGHT: 

in 

ADDRESS; 

STATIC_TEXT: 

in 

ADDRESS; 

TEXT_ALIGNMENT: 

in 

ADDRESS; 

SUBPANEL ID: 

in 

ADDRESS l 


in ADDRESS; 


NULL SUBPANEL'ADDRESS) 


t 


— CPM description: Creates a static text area in a window. The static text 

procedure allows display of product headings that will 

— not scroll with the product. 


— formal parameters 

—OUT STATIC_TEXT_ID id attached to the static text area. 

— This ID is required for all interactions with 

the static text area. 


— IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
SYS_WINDOW_DEST - Window 

sY s_panel_dest - Panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the Rootwindow. 


—IN pixel_col Column number from within the window where the left 

side of the static text area shall be placed. 

— column 0 is at the left of the window. 


—IN PIXEL ROW 


-IN PIXEL WIDTH 


Row number from within the window where the top side 
of the static text area shall be placed. Row o is 
at the top of the window. 

The number of columns to be occupied static 
text area. 


—IN PIXEL HEIGHT 


The number of rows to be occupied static 


C-38 





text area. 


— IN 

— IN 



STATIC TEXT 


Textual string to display in the button. 


TEXT_ALIGNM£NT Alignment of the text within the static text area 
(CENTER_ALIGNED, LEFT_ALIGNED, RIGHT ALIGNED, 

NO ALIGNMENT) 


SUBPANEL_ID ID attached to the subpanel that 

the editor is assigned to. If the editor is not 
assigned to a subpanel, use a zero. 


— end formal parameters; 


procedure CWN_DEFINE_STRING_FIELD ( 


EDITOR_ID: 

in 

D£ST_TYPE: 

in 

DEST ID: 

in 

PIXEL COL: 

in 

PIXEL ROW: 

in 

LABEL: 

in 

LABEL POSITION: 

in 

STRING VARIABLE: 

in 

MAX CHARACTERS: 

in 

SUBPANEL ID: 

in 


ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS; 

ADDRESS S- SYS_NULL_SUBPANEL' ADDRESS) 


— cpm description; creates a String Field editor. 

— Note; this function will not cause display of the field 

— as that is caused by calling either cwn_endjpanel 

— or cwn_end_subpanel. 

— formal parameters 

—OUT editor^id ID attached to the editor. This id is 

— required for all interactions with the editor. 


—IN DEST TYPE 


—IN DEST ID 


The type of the destination for the editor, where: 
SYS_WIND0WJJEST - window 
SYS_PANEL_DEST- panel 

ID attached to the destination that the editor is 
assigned to. This is set to NULL when the 
destination is the Rootwindow. 


—IN PIXEL COL 


—IN PIXEL ROW 


Column number from within the panel where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the panel where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


—IN LABEL The optional label before the string field. This 

— should be set to NULL if no label will be displayed. 

--IN LABEL_POSITION Value specifying whether the optional label should 


C-39 






be placed to the left or the right of the number 
field. The two valid Bettings for this field are 
0 - Left aligned 
1 « Right aligned 

If no label ie specified, this parameter will 
be ignored editor. 

—IN STRING_VARIABLE The address of the variable to store the 

— ~ input string at. This variable may be 

initialized to some string value, which would 

— be displayed. This must be a NULL terminated 

string. 

—IN kax_characters The maximum number of characters which will 

— be allowed to be entered into the field. 

—IN SUBPAN£L_ID 10 attached to the subpanel that 

— ~ the editor is assigned to. If the editor is not 

— assigned to a subpanel, use a zero. 

— end formal parameters; 


procedure CWN_DEFINE_SUBPANEL (SUBPANEL_ID: in ADDRESS; 

PANEL_ID7 in ADDRESS); 

— cpm description: Defines a subpanel within a panel. A subpanel must 

— have at least one field editor attached to it. 

— formal parameters 

—OUT SUBPANEL_ID ID attached to the subpanel. 

— “ This ID is required for all interactions with the 

— subpanel. 

—in panel_id ID of the panel that the 

— ~ subpanel is attached to. 

— end formal parameters; 


procedure cwn_delete_button <button_id : in address); 

— CPM description: CNN_DELETE_BUTTON deletes a button that is defined by 

CWN~DEFINE~BUTTON. 


— formal parameters 

—IN BUTTONJCD The ID of the button to delete. 

— end formal parameters; 

procedure CWN_DELETE_CHECKBOX (CHECKBOX_ID : in ADDRESS); 

— CPM description: CWN_DELETE CHECKBOX deletes a checkbox editor that is 

defined by~CNN_DEFINE_CHECKBOX. 


— formal parameters 

——IN checkbox_id The ID of the checkbox editor to delete. 

— end formal parameters; 


procedure CWN_DELETE_EDIT0R (EDITOR ID 


in ADDRESS); 


C-40 



— CPM descriptions CWN_DELETE_EDITOR deletes an editor that is defined by 

CNN DEFINE EDITOR. 


— formal parameters 

--IN EDITOR_ID The ID of the editor to delete. 

— end formal parameters; 


procedure CWN_DELETE_MENU (MENU_ID l in ADDRESS); 

— CPM description: CWN_DELETE_EDITOR deletes a walking menu structure. 

— formal parameters 

--IN MENU_id The ID of the menu structure to delete. 

— end formal parameters; 


procedure cwn_delete__number_field ( 

EDITOR_ID S in ADDRESS); 

— CPM description: Deletes an numeric field editor that 

is defined by cwn_define_number_field. 


— formal parameters 

—IN editor_ID The ID of the editor to delete. 

— end formal parameters; 


procedure CWN_DELETE_PANEL (PANEL_ID : in ADDRESS); 

— CPM description: Deletes a panel from a window. 

— formal parameters 

—IN PANEIi_ID The ID of the panel to delete. 

— end formal parameters; 


procedure CWN_DELETE_POPUP_WlNDOW <WINDOW_ID : in ADDRESS); 

— CPM description: CNN_DELETE_POPUP_WINDOW deletes a popup window that is 

defined by cwn_j>efine_popup_window. 

— formal parameters 

—IN window_id The ID of the popup window. 

-- end formal parameters; 


procedure CWN_DELETE_PUSHBUTTON (PUSHBUTTON_ID : in ADDRESS); 

— CPM description: CNN delete_PUShbutton deletes a pushbutton editor that 

is defined by CWN_DEFINE_PUSHBUTTON. 

— formal parameters 

—IN PUSRBUTTON_ID The ID of the pushbutton editor. 


C-41 





— end formal parameters; 


procedure CWN DELETE_RADIOBUTTON (RADIOBUTTON_ID * in ADDRESS); 

_ CPM description: CWN_DELETE_RADIOBUTTON deletes a radiobutton editor that 

is defined~by CWN_DEFINE_RADIOBUTTON. 

— formal parameters 

—IN RADlOBUTTON_lD The ID of the radiobutton editor. 

— end formal parameters; 

procedure CWN_DELETE_SCROLLBAR (SCROLLBAR_ID : in ADDRESS); 

_ CPM description: CWN_DELETE_SCROLLBAR deletes a scrollbar that iB defined 

by _ CWN_D E FI NE_S C ROT.T.RAR . 

— formal parameters 

—IN SCROLLBAR ID The ID of the scrollbar to delete. 

— end formal parameters; 


procedure CWN_DELETE_STATIC_TEXT (STATIC_ID : in ADDRESS); 

— CPM description: CWN_DELET£_STATIC_TEXT deletes static text that is 

defined by CWN_DEFINE_STATIC_TEXT. 

— formal parameters 

—IN STATIC_ID The ID of the static text to delete. 

— end formal parameters; 


procedure CWN_DELETE_STRING_FIELD ( 

” EDITOR_ID : in ADDRESS); 

— CPM description: Deletes an string field editor that 

is defined by CWNJDEFINE_STRING_FIELD. 


— formal parameters 

—IN EDIT0R_ID The ID of the editor to delete. 

— end formal parameters; 


procedure CWN_DELETE_SUBPANEL (SU8PANEL_ID: in ADDRESS); 

— CPM description: Deletes a subpanel from a window. 

— formal parameters 

—IN SUBPANEL_ID The ID of the subpanel to delete. 

— end formal parameters; 


C-42 





procedure CWN_END_PANEL 


(WINDOW_ID: 
PANEL_Td: 
PIXEL_COL: 
PIXEL_ROW: 
PIXEXi_HZOTH: 
PIXEL HEIGHT: 


in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

address; 

in 

ADDRESS; 

in 

ADDRESS) 


— CPM description: This procedure completes the panel definition process. 

— It displays the subpanels and field editors (text 

editors, scroll bars, and static text) that are attached 
to the panel. 


— formal parameters 

—IN WINDOW_id ID attached to the window to contain the panel. 

—IN PANEL_ID ID attached to the panel. 


—IN PIXEL_COL Column number from within the window where the left 

aide of the panel shall be placed. Column 0 is 
— at the left of the window. 


—IN PIXEL ROW 


—IN PIXEL WIDTH 


Row number from within the window where the top side 
of the panel shall be placed. Row 0 is at the 
top of the window. 

The width of the panel in pixels. 


—IN PIXEL_HEIGHT The height of the panel in pixels. 
— end formal parameters; 


procedure CWN_DELETE_SUBWINDOW (SUBWIND0W__ID: in ADDRESS); 

— CPM description: Deletes a subwindow from the working window. 

— formal parameters 

—IN SUBWIND0W_ID The ID of the subWINDOW to delete. 

— end formal parameters; 


procedure CWN_DISPLAY_SYSTEM_MESSAGE (MESSAGE : in ADDRESS); 

— CPM description: This displays a message in the upper left hand corner of 

the display screen. Unlike cwn_message_box, this routine 

— is provided mainly for system messages relating the 

status or some other information of the system. The 

— message is removed via cwn_remove_system__message. 


— formal parameters 

—IN MESSAGE The Message to display. 

— end formal parameters; 


procedure CWN_END_SUBPANEL (SUBPANEL ID: 

in 

ADDRESS; 

PIXEL COL: 

in 

ADDRESS; 

PIXEL”ROW: 

in 

ADDRESS; 


C-43 



PIXEL_WIDTH: 
PIXEL HEIGHTS 


in ADDRESS; 
in ADDRESS); 

— CPM description: This procedure completes the subpanel definition process 

It displays the field editors (text editors, scroll 
bars, and static text) that are attached to the subpanel 


— formal parameters 

—IN SUBPANEL_ID ID attached to the subpanel. 

—IN pixel_col column number from within the window where the left 

— side of the subpanel shall be placed. Column 0 is 

— at the left of the window. 


—IN PlX£L_ROW row number from within the window where the top side 

of the subpanel shall be placed. Row 0 is at the 
top of the window. 


—IN PIXEL_WIDTH The width of the subpanel in pixels. 

—IN PIX£L_HEIGHT The height of the subpanel in pixels. 

— end formal parameters; 


procedure cwn handle window move 


(WINDOW_IDs 

MESSAGE: 

DATA: 


in SYS_WINDOW_ELE_ID; 
in INTEGER := 0; 

in INTEGER := 0); 


— CPM description: This procedure handles the user interface required 

— for allowing the user to interactively move a window. 


— formal parameters 

—IN WIND0W_ID The ID attached to the window. 

—IN MESSAGE Currently not applicable from ADA. 

—IN DATA Currently not applicable from ADA. 

— end formal parameters; 


procedure CWN_HIDE_PANEL (PANEL_ID: in ADDRESS); 

— CPM description: This procedure hides a defined panel and disables user 

input to any of the panel editors. 


— formal parameters 

—IN PANEL_XD ID attached to the panel to 

hide. 

— end formal parameters; 


procedure CWN_HIDE_SUBPANEL (SUBPANEL_ID: in ADDRESS); 

— CPM description: This procedure hides a defined subpanel and disables user 

input to any of the subpanel editors. 


— formal parameters 

—IN SUBPANEL_XD ID attached to the subpanel to 


C-44 




hide. 


— end formal parameters; 


procedure CWN_INITIALIZE_WINDOW_SYSTEM; 

— CPM description! CWN_INIT!ALIZE_WIND0W_SYSTEM is the initial set-up 

— procedure for the EDDIC window system. It must be called 
before any of the CWN utilities. 

— formal parameters 
-- None 

— end formal parameters; 


(INPUT TYPE : 

in 

ADDRESS; 

WINDOW ID : 

in 

ADDRESS; 

INPUT_VALUE : 

in 

ADDRESS; 

INPUT_DATA : 

in 

ADDRESS); 


— cph description: Returns user input and internet messages to the 

application software. 


— formal parameters 

—OUT INPUT_TYPE Type of input returned from the window system 


—OUT window_ID The id of the window which received input, if 

applicable. Note, that if the table below has 

— an -X" under the window_id header for the 

— input_type, but the window_id equals zero, then 

this means that the input took place in the 
RootWindow. 


—OUT input_value The value of the input that accompanies the type 

—out input_data The data that accompanies the type and value, if 

-- appropriate. 


The following table lists the output returned to the application 
for its own processing: 


— input_type 


window- 

id type_code data 


— 1 Exit 

n/a 

n/a 

n/a 

— 2 Menu 

n/a 

Menu_Xd 

menu_index 

— 3 Checkbox 

X 

Editor_ld 

Checkbox_index 

— 4 Scrollbar 

X 

Editor“id 

slidePosition 

— 5 XrFXLE 

n/a 

fd 

n/a 

— 6 Buttonwindow 

X 

n/a 

n/a 

— 7 Mouse Button 

X 

Button: 

window_type: 

— Pressed 


0 « R 

1 - button 

— 


1 - M 

2 - panel 

— 


2-1 

3 - window 

—— 



*» y 


C-45 









— 8 

Mouse Button 

X 

Button: 

win dow_type: 

— 

Released 


0 - R 

1 ■ button 

— 



1 - M 

2 « panel 

— 



2 - L 

3 ” window 

— 




x# y 

— 9 

Field Traversal 

X 

Editor_id 

editor_type: 

— 




1 - String_field 

— 




2 m Number_field 

— 




type of traversal: 

— 




1 - Next 

— 




2 - Previous 

— 




3 - Up 

— 




4 - Down 

— 10 

Exposure 

X 

n/a 

x, y, width, height 

— 11 

Open Window 

n/a 

n/a 

n/a 

—12 

Window Resized 

n/a 

n/a 

n/a 

— 13 

Close Window 

n/a 

n/a 

n/a 

—14 

XrEEDIT_SAVE 

X 

Editor_ld 

buffercount 

— 15 

XrEEDIT_RESET 

X 

Editor_Id 

n/a 

— 16 

Pushbutton 

X 

Editor_Id 

Button_index 

— 17 

Radiobutton 

X 

Editor_Id 

Active_index, 

— 




Previous Index 


— end formal parameters; 


procedure cwn_map_window (WINDOW_id: in ADDRESS); 

— CPM description: Routine to map a window created via cvn_create_window 

— whose “map_window" flag was set FALSE. " 


— formal parameters 

—IN window_id The id of the window to be mapped. 

— end formal parameters; 


procedure cwn MESSAGE BOX 


MESSAGE 

t 

in 

ADDRESS; 

BUTTON S_ALLOWED 

: 

in 

ADDRESS; 

BUTTON SELECTED 

t 

in 

ADDRESS; 

BUTTON_X_PIXEL 

s 

in 

ADDRESS; 

BUTTON YJPIXEL 

: 

in 

address; 

INPUT_WINDOW ID 

: 

in 

ADDRESS); 


— CPM description: Displays a message box which the user removes by a click 

on the mouse which is allowed application. The 
message box always appears centered on the display and 
the button which activated its disappearance is returned 

— to the application. 


— formal parameters 

—IN message Textual string to display in the message box. 

—IN BUTTON_ALLOWED A logical array indicating which mouse buttons 

— the application is allowing the user to click 

— for making the message box go away, where: 


C-46 



•V 


—OUT 

BUTTON_SELECTED 

— 

—OUT 

BUTTON_X_PIXEL 

— 

—OUT 

BUTTON_Y_PIXEL 

— 

—OUT 

INPUT_WINDOW_ID 

— end 

formal parameters 


[0] - RightButton; 

[1] “ MiddleButton; 

[2] - LeftButton; 

The number of the selected button (0, 1 , or 2); 

The x pixel location where the mouse button was 
selected. 

The y pixel location where the mouse button was 
selected. 

The id of the window which received the mouse 
button selection input. 


procedure CWN_MOVE_BUTTON (BUTTON_ID: 

PIXEL COL: 
PIXEL~ROW: 


in ADDRESS; 
in ADDRESS; 
in ADDRESS); 


— CPM description: Changes the location of a button. 


— formal parameters 

—IN BUTTON_ID ID to attach to the button. This 

ID is required for all interactions with the button. 


—IN PlXEL_COL Column number from within the window where the left 

— side of the button shall be placed, column 0 is at 

— left of the window. 


—IN PIXEL_ROW row number from within the window where the top side 

of the button shall be placed. Row 0 is at the top 

— of the window. 

— end formal parameters; 


procedure CWN_HOVE_CHECKBOX (CHECXBOX_IDl 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

PIXEL_ROW: 

in 

ADDRESS); 


— CPM description: Changes the location of a checkbox editor. 


— formal parameters 

—IN CHECKBOX_lD ID attached to the checkbox editor. 

—IN PIXEL_COL Column number from within the window where the left 

— side of the editor shall be placed, column 0 is at 

— left of the window. 


—IN PIXEL_ROW Row number from within the window where the top side 

— of the editor shall be placed. Row 0 is at the top 

— of the window. 

— end formal parameters; 


procedure CWN_MOVE_EDITOR (EDITORJtD: 


in ADDRESS; 


C-47 





PIXEL_COL: 
PIXEL ROW: 


m 

in 


ADDRESS; 
ADDRESS); 


— CPM description: Changes the location of a full page text editor. 


— formal parameters 
—IN EDITOR ID 


— IN 


— IN 


PIXEL COL 


PIXEL ROW 


ID to attach to the editor. This 

ID is required for all interactions with the editor. 

Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


— end formal parameters; 
procedure CWN_MOVE_NUMBER_FIELD ( 


EDITOR_ID: 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

PIXEL~ROW: 

in 

ADDRESS) 


— CPM description: changes the location of a numeric field editor. 


— formal parameters 
—IN EDITOR ID 


— IN 


— IN 


PIXEL COL 


PIXEL ROW 


ID to attach to the editor. This 

ID is required for all interactions with the editor. 

Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


— end formal parameters; 


procedure CWN_MOVE_PANEL (PANEL_ID: 

PIXEL_COL: 
PIXEL ROW: 


— cpm description: changes the location of a panel. 


in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS); 


— formal parameters 
—IN PANEL ID 


—IN 


— IN 


PIXEL COL 


PIXEL ROW 


ID attached to the panel to 
move. 

Column number from within the window where the left 
side of the panel shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 


C-48 




of the panel shall be placed. Row 0 is at the top 
of the window. 

— end formal parameters; 

in ADDRESS; 
in ADDRESS; 
in ADDRESS); 

— CFH description: changes the location of a popup window. 

— formal parameters 


IN 

WINDOW_ID 

ID attached to the popup window to move. 


IN 

PIXEL_COL 

Column number from within the display where the 
side of the window shall be placed. Column 0 is 
left of the display. 

left 

at 

IN 

PIXEL_ROW 

Row number from within the display where the top side 
of the window shall be placed. Row 0 is at the top 
of the display. 


— end formal parameters; 


procedure CWN_MOVE_POPUP_WINDOW (WINDOW_ID: 

PIXEL COLs 
PIXEL ROW: 


procedure cwn_move_pushbutton <pushbutton_IDi 

PIXEL_COL: 
PIXEL~ROW: 


in ADDRESS; 
in ADDRESS; 
in ADDRESS); 


— CPH description: changes the location of a pushbutton editor. 


— formal parameters 

—IN PUSHBUTTON_lD ID attached to the pushbutton editor to move. 


—IN pixel_col Column number from within the window where the left 

side of the editor shall be placed, column 0 is at 
left of the window. 


—IN pixel_row row number from within the window where the top side 

— of the editor shall be placed. Row 0 is at the top 

of the window. 

— end formal parameters; 


RADIOBUTTON (RADIOBUTTON_ID: 

in 

ADDRESS; 

PIXEL_COL: ” 

in 

ADDRESS; 

PIXEL*”ROW: 

in 

ADDRESS); 


— CPH description: Changes the location of a radiobutton editor. 

— formal parameters 

—IN RADIOBUTTON_ID ID attached to the radiobutton editor to move. 

—IN PIX£L_C0L Column number from within the window where the left 

— ~ side of the editor shall be placed. Column 0 is at 

— left of the window. 


C-49 





—IH pixel_ROW Row number from within the window where the top aide 

~ of the editor shall be placed. Row 0 is at the top 

of the window. 

— end formal parameters; 


procedure CWN_MOVE_SCROLLBAR ( 


SCROLLBAR ID: 

in 

ADDRESS; 

PIXEL_COLl 

in 

ADDRESS; 

PIX£L_ROW: 

in 

ADDRESS) 


— cpm description: changes the location of a scrollbar. 


— formal parameters 
—IN SCROLLBAR ID 


—IN PIXEL COL 


ID to attach to the scrollbar. 

This ID is required for all interactions with the 
scrollbar. 

Column number from within the window where the left 
side of the scrollbar shall be placed, column 0 is 
at left of the window. 


—IN PIX£L_row Row number from within the window where the top side 

of the scrollbar shall be placed. Row 0 is at the 
top of the panel. 

— end formal parameters; 


procedure cw.\_move_static_TEXT ( 


TEXT ID: 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

PIXEL_ROW: 

in 

ADDRESS); 


— CPM description: changes the location of static text. 


— formal parameters 

—IN EDITor_id ID to attach to the text. This 

ID is required for all interactions with the text. 

--IN PIXE ,_col Column number from within the window where the left 

— side of the text shall be placed. Column 0 is at 

left of the window. 


—IN PIXErROW row number from within the window where the top 

side of the text shall be placed. Row 0 is at the 

— top of the window. 

— end formal parameters; 


procedure CNN MOVE STRING FIELD ( 


EDITOR_ID» 

in 

ADDRE8S; 

PIXEL_COL: 

in 

ADDRESS; 

PIXELJROW* 

in 

ADDRESS); 


— cpm description: changes the location of a string field editor. 


C-50 



— formal parameters 

—IN EDITOR_lD ID to attach to the editor. This 

ID is required for all interactions with the editor. 

—IN PIXEL_C0L Column number from within the window where the left 

side of the editor shall be placed. Column 0 is at 
left of the window. 


—IN PIXEL_R0W Row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 
of the window. 

— end formal parameters; 


procedure CWN_MOVE_SUBWINDOW (SUBWINDOW_ID: 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

PIXELJROW: 

in 

ADDRESS); 


— CPM description: changes the location of a subwindow. 


— formal parameters 

—IN subwindow_id ID attached to the subwindow to move. 

—IN PIXEI>_COL Column number from within the window where the left 

side of the subwindow shall be placed, column 0 is 
at left of the window. 


—IN PIXEL_row Row number from within the window where the top side 

of the subwindow shall be placed. Row 0 is at the 

— top of the window. 

— end formal parameters; 


procedure CWN_move_window (window id: 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

PIXEL_ROW: 

in 

ADDRESS); 


— CPM description: changes the location of a window. 

— formal parameters 


—IN 

WINDOW_ID 

ID attached to the window to move. 


—IN 

PIXEL_COL 

Column number where the left side of 
shall be placed. 

the window 

—IN 

PIXEL_ROW 

Row number where the top side of the 
shall be placed. 

window 


— end formal parameters; 


procedure CWN_OPEN_ICON; 

— CPM description: Opens the window from an existing icon. 
-- formal parameters 


C-51 




— NONE 

— end formal parameters; 


procedure CWN_POST_MENU 


(MENU_STRUCT IDs in ADDRESS; 

MENU_IND£X:“ in ADDRESS; 

WINDOWJTYPE: in ADDRESS; 

WINDOw”lD: in ADDRESS; 

PIXEDJCt in ADDRESS; 

PIXEL~Y: in ADDRESS); 


- CPM description: This routine activates and posts an already defined 
popup menu at a specified location for either: 

a. A defined window, 

b. a displayed panel (via ewn_endjpanel), 

c. or, a defined button (via cwn_define_button). 


- formal parameters 
-IN MENU STRUCT ID 


MENU INDEX 


WINDOW TYPE 


The id of the menu structure given 
application at the time of the menu definition. 

The index into the Text_Array of the submenu to 
be activated for a particular window, if applicable. 
If the menu to be activated is not a walking menu, 
or is the top level of a walking menu, then this 
parameter should be set to NULL. 

The type of window the menu will be activated for, 
where: 

SYS WINDOW • a defined window 

SYS_DISPLAY_PANEL - a displayed panel 
SYS DEFINED BUTTON - defined button 


—IN WINDOW ID 


The id given application at the time of the 
window type's creation where: 

If window_type is SYS_WlNDOW and window_id is 0, 
then the menu will be activated for the RootWindow 
or (Display). Otherwise, the menu will be activated 
for the matching window_id. 

If window__type - SYS_DISPLAY_PANEL, the id should 
be the panel id. 

If window^type ■ SYS_DEFINED_BUTTON, the id should 
be the button id. 


PIXEL X 


PIXEL Y 


—end formal parameters; 


The X pixel coordinate for posting the menu. 
The Y pixel coordinate for posting the menu. 


procedure CWN_QUERY_CHECKBOX_RECTS (CHECKBOX_ID : in ADDRESS; 

CHECKBOX~RECTS : in ADDRESS); 

— CPM description: Returns the rectangular descriptions of the individual 

— checkboxes. Note: these descriptions do not include 

— the labels in the widths and this routine cannot be 

— called before the panel containing the checkbox instance 


C-52 


has been ended via CWN_END_PANEL. 

— formal parameters 

—IN cbeckbox_xd ID attached to the editor. 

—IN CHECKBOX_RECTS The address of the array of rectangle descriptions. 

— end formal parameters; 


procedure cwn_query_checxbox_size (checkbox_id: in address; 

PIXEL_COL: in ADDRESS; 

PIXEL~ROW: in ADDRESS); 

— CPM description: Returns the number of pixel columns and rows that 

— a checkbox editor occupies. 


— formal parameters 

—IN CH£CKBOX_XD ID attached to the editor. 

—IN PIXEL_COL Address of variable to hold number of pixel columns 

in the editor. 

—IN PIX£l_row Address of variable to hold number of pixel rows in 

the editor. 

— end formal parameters; 


procedure cwn_queryjdispiay_sizE (WIDTH : in ADDRESS; 

HEIGHT: in ADDRESS); 

— CPM description: Returns the number of pixel columns and rows that 
~ are in the Display screen. 


— formal parameters 

—OUT WIDTH Number of pixel columns in the Display screen. 

—OUT HEIGHT Number of pixel rows in the Display screen. 

— end formal parameters; 


procedure CWN_QUERY_EDITOR__SIZE (EDITOR_ID: in ADDRESS; 

PIXEL_COL: in ADDRESS; 

PXXKL_ROWl in ADDRESS); 

— CPM description: Returns the number of pixel columns and rows that 

— an editor occupies. 


— formal parameters 

—IN edxtor_xd ZD to attach to the editor. 

—OUT PXX£Z»_COX< Number of pixel columns in the editor. 

—OUT PIXEL_ROW Number of pixel rows in the editor. 

— end formal~parameters; 


procedure cwn_query_font size (PIXEL_coli 


in ADDRESS; 


C-53 




PIXEL ROW: 


in ADDRESS); 


— CPM description: Returns the number of pixel columns and rows that 

— a font occupies. 


— formal parameters 

— OUT PIXEL COL 


Number of pixel columns in the font. 


—out PIXEL_ROW Number of pixel rows in the font. 

— end formal parameters; 


procedure CWN_QUERY_NUMBER_FIELD_SIZE ( 


EDITOR_ID: 

in 

ADDRESS; 

PIXEL COL: 

in 

ADDRESS; 

PIXEL - ROW: 

in 

ADDRESS); 


— CPM description: Returns the number of pixel columns and rows that 

an numeric field editor occupies. 


— formal parameters 
—IN EDITOR_ID 

—OUT PIXEL COL 


ID to attach to the editor. 

Number of pixel columns in the editor. 


—OUT pixel_row Number of pixel rows in the editor. 

— end formal parameters; 


procedure CWN_QUERY_PANEL_ORIGIN (PANEL IDl 

PIXEL_COL: 
PIXEL RON: 


in ADDRESS; 
in ADDRESS; 
in ADDRESS); 


— CPM description: Returns the pixel column and row that designates the 

origin of a panel. 

— formal parameters 

"IN PANELJCD ID to attach to the panel. 


—OUT PIXEL COL 


Pixel column of the origin in the window. 


—OUT PIXEL_ROW Pixel row of the origin in the window. 

— end formal - parameters; 


procedure CWN_QUERY_PANEL_SIZE {PANEL_ID: 

PIXEL~COL: 
PIXEL - ROW: 


in ADDRESS; 
in ADDRESS; 
in ADDRESS); 


— CPM description: Returns the number of pixel columns and rows that 

— a panel requires. The size is determined by using the 

— locations and sizes of the editors that are attached 

— to the panel. 


— formal parameters 
—IN PANEL ID 


ID to attach to the panel. 


•OUT 

PIXEL_COL 

Number 

of pixel 

columns 

■OUT 

PIXEL_ROW 

Number 

of pixel 

rows in 


— end formal parameters; 


in the window, 
the window. 


procedure CWN_QUERY_PUSHBUTTON_RECTS (PUSHBUTTON_ID: in ADDRESS; 

PUSHBUTTONJRECTS : in ADDRESS); 

— CPM description: Returns the rectangular descriptions of the individual 

— pushbuttons. Note: these descriptions do not include 

— the labels in the widths and this routine cannot be 

— called before the panel containing the pushbutton 

— instance has been ended via cwn_end_panel. 

— formal parameters 

—IN pushbutton_id ZD attached to the editor. 

—XNOUT PUSHBUTTONJRECTS The address of the array of rectangle 

— descriptions. 

— end formal parameters; 


procedure CWN QUERY PUSHBUTTON SIZE (PUSHBUTTON ID: 

in 

ADDRESS; 

PIXEL COL: 

in 

ADDRESS; 

PIXEL ROW: 

in 

ADDRESS); 


— CPM description: Returns the number of pixel columns and rows that 

— a pushbutton editor occupies. 


— formal parameters 


—IN 

PUSHBUTTON_ID 

ID attached to the 

editor. 



—OUT 

PIXEL_COL 

Address of variable 

to hold 

number 

of 

— 


in the editor. 




—OUT 

PIXEL ROW 

Address of variable 

to hold 

number 

of 


— the editor. 

— end formal parameters; 


pixel columns 


pixel rows in 


procedure CWN_QUERY_RADIOBUTTON_RECTS (RADIOBUTTON_ID : in ADDRESS; 

RADIOBUTTON RECTS : in ADDRESS); 


— CPM description: Returns the rectangular descriptions of the individual 

— radiobuttons. Note: these descriptions do not include 

— the labels in the widths and this routine cannot be 

— called before the panel containing the radiobutton 

— instance has been ended via CNNJENDJPANEL. 

— formal parameters 

—IN RADIOBUTTON ZD ID attached to the editor. 


—INOUT RADIOBUTTON_RECTS 
— end formal parameters; 


The address of the array of rectangle 
descriptions. 


C-55 





procedure CWN QUERY RADIOBUTTON_SIZE ( 


RADIOBUTTON IDs 

in 

ADDRESS; 

PIXEL_COLs 

in 

ADDRESS; 

PIXEL ROWS 

in 

ADDRESS); 


— cpm descriptions Returns the number of pixel columns and rows that 

a radiobutton editor occupies. 


— formal parameters 


—IN 

RADIOBUTTON_ID 

ID attached to the 

editor. 


—OUT 

PIXEL_COL 

Address of variable 

to 

hold 

number 

— 


in the editor. 




—OUT 

PIXEL_ROW 

Address of variable 

to 

hold 

number 

— 


the editor. 




— end 

formal parameters 

! • 

1 t 





procedure CWN QUERY SCROLLBAR SIZE ( 





SCROLLBAR ID: 

in 

ADDRESS; 




PIXEL_COL; 

in 

ADDRESS; 




PIXELJROWS 

in 

ADDRESS) ; 

— CPM 

descriptions 

Returns the 

number of pixel 

columns 

and rows that 

— 


a scrollbar 

occupies. 



— formal parameters 




—IN 

scrollbar_Id ID to attach to the scrollbar. 


—OUT 

PIXEL_COL 

Number 

of pixel columns 

in the 

scrollbar. 

—OUT 

PIXEL ROW 

Number 

of pixel rows in 

the scrollbar. 

— end 

formal parameters; 




procedure cwn query 

STRING FIELD SIZE ( 






EDITOR IDS 

in 

ADDRESS; 




PIXEL__COL! 

in 

ADDRESS; 




PIXEL~ROWs 

in 

ADDRESS); 

— CPM 

description; 

Returns the 

number of pixel columns 

and rows that 


an string field editor occupies. 


— formal parameters 


—IN 

EDITOR_ID 

ID to attach to 

the editor. 

—OUT 

PIXEL_COL 

Number of pixel 

columns 

in the editor. 

—OUT 

PIXEL_ROW 

Number of pixel 

rows in 

the editor. 


— end formal parameters; 


procedure CWN_QUERY_SUBPANEL_SIZE (SUBPANEL_ID: in ADDRESS; 

PIXEL COLi in ADDRESS; 


C-56 



PIXEL ROW: 


in ADDRESS); 


— CPM description: Returns the number of pixel columns and rows that 

a subpanel requires. The size is determined by using the 
locations and sizes of the editors that are attached 
to the subpanel. 


— formal parameters 

—IN SUBPANEL_ID 

—OUT PIXEL_COL 

—OUT PIXEL_ROW 

— end formal parameters 


ZD to attach to the subpanel. 

Number of pixel columns in the window. 
Number of pixel rows in the window. 


(WINDOW ZD: 

in 

ADDRESS; 

PIXEL_Xt 

in 

ADDRESS; 

PIXEL~Y: 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

pzxel”row: 

in 

ADDRESS) 


— CPM description: Returns the x and y display coordinates of the upper 

— left corner of the window and the number of pixel 

columns and rows that will fit in a window. If buttons 
have been created in a window, it is advisable to query 

— for window size before creating other window structures. 


— formal parameters 


—IN 

WINDOW_ID 

The id of the window whose size is being queried. 

—OUT 

PIXEL_X 

X screen coordinate of window origin. 

—OUT 

PIXEL_Y 

Y screen coordinate of window origin. 

—OUT 

PIXEL_COL 

Number of pixel columns in the window. 

—OUT 
— end 

PIXEL_ROW 
formal parameters 

Number of pixel rows in the window. 


procedure cwn_remove_input_socket <socket_idi in address); 

— CPM description: CWN_REMOVE_INPUT_SOCKET deletes a socket id to be 

— watched by CWN_INPUT. 


— formal parameters 

—IN 80CKET_ID ZD of the socket to stop watching for input. 

— end formal parameters; 


procedure CWN_REM0VE__SY8TEM_MESSAaE; 

— CPM description: This routine removes any system message displayed via 

— cwn_display_syetem_message. This should be called 

— before another system message is displayed. 


C-57 





— formal parameters 

None 

— end formal parameters; 


: (CHECKBOX_IDt 

in 

ADDRESS; 

PIXEL_COL:” 

in 

ADDRESS; 

PIXEL~ROW: 

in 

ADDRESS; 

PIXEL_WIDTH: 

in 

ADDRESS; 

PIXEL HEIGHT1 

in 

ADDRESS) 


— CFH description: changes the size of a checkbox button editor. 


— formal parameters 

—IN CHECKBOX_lD ID of the editor. 

—IN PiXEL_coL Column number from within the window where the left 

side of the editor shall be placed, column 0 is at 
left of the window. 


—IN PIXEL ROW 


—IN PIXEL_WIDTH 


Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The number of columns to be occupied by the editor. 


—IN PIXEL height The number of rows to be occupied by the editor. 

— end formal "parameters; 


procedure cwn_resize editor 


(EDITOR ID: 

in 

ADDRESS; 

PIXEL_COL: 

in 

ADDRESS; 

PIXEL ROW: 

in 

ADDRESS; 

PIXEL_WIDTH: 

in 

ADDRESS; 

PIXEL_HEIGHT: 

in 

ADDRESS) 


— CPM description: changes the size of a window full page text editor. 


— formal parameters 
—IN EDITOR_ID 

—IN PIXEL_COL 

—IN PIXEL ROW 


ID of the editor. 

Column number from within the window where the left 
side of the editor shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 


— IN 

PIXEL_WIDTH 

The 

number 

of 

columns 

—IN 

PIXEL HEIGHT 

The 

number 

of 

rows to 


— end formal parameters; 


to be occupied editor, 
be occupied editor. 


C-58 



procedure CWN_RESIZE_NUMBER_FIELD ( 


EDITOR ID: 

in 

ADDRESS; 

PIX£L_COL: 

in 

ADDRESS; 

PIXEL~ROW: 

in 

ADDRESS; 

PIXEL_WIDTH: 

in 

ADDRESS; 

PIXEL_HEIGHT: 

in 

ADDRESS) 


— CPM description: changes the size of a numeric field editor. 


— formal parameters 

—IN £DiTOR_ID ID of the editor. 

—IN pixel_col Column number from within the window where the left 

— side of the editor shall be placed, column 0 is at 

— left of the window. 


—IN PIXEL_ROW 

—IN PIXEL_WIDTH 

—IN PIXEL HEIGHT 


Row number from within the window where the top side 
of the editor shall be placed. Row 0 is at the top 
of the window. 

The number of columns to be occupied editor. 

The number of rows to be occupied editor. 


— end formal parameters; 


PANEL ID: 

in 

ADDRESS; 

PIXEL COL: 

in 

ADDRESS; 

PIXEL - ROW: 

in 

ADDRESS; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL HEIGHT: 

in 

ADDRESS) 


— CPM description: changes the size of a window panel. 


— formal parameters 

—IN panel_ID ID attached to the panel. 


—IN PIXEL COL 


—IN PIXEL ROW 


Column number from within the window where the left 
side of the panel shall be placed. Column 0 is at 
left of the window. 

Row number from within the window where the top side 
of the panel shall be placed. Row 0 is at the top 
of the window. 


—IN PIXEL__WIDTH The number of columns to be occupied panel. 

—IN PIXELJHEIGHT The number of rows to be occupied panel. 

— end formal~parameters; 


procedure CWN_RESIZE_PUSHBUTTON ( 


PUSHBUTTON ID: 

in 

ADDRESS; 

PIXEL 

COL: 

in 

address; 

PIXEL ROW: 

in 

ADDRESS; 

PIXEL - WIDTH: 

in 

ADDRESS; 


C-59 




PIXEL_H£IGHT: in ADDRESS); 

— cpm description: changes the size of a pushbutton editor. 


— formal parameters 

—IN pushbutton_ID ID of the pushbutton editor. 

—IN PXXEL_COL Column number from within the window where the left 

side of the editor shall be placed, column 0 is at 

— left of the window. 


—IN PIXEL_R0W Row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 
of the window. 


--IN PIXEL_WIDTH The number of columns to be occupied by the editor. 

—IN PIXEL_HEIGHT The number of rows to be occupied by the editor. 

— end formal parameters; 


procedure cwn_resize_radiobutton ( 


RADIOBUTTON__ID: 

in 

ADDRESS; 

PIXEL_COL: ~ 

in 

ADDRESS; 

PIXEL ROW: 

in 

ADDRESS; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL_HEIGHT: 

in 

ADDRESS) 


— cpm description: changes the size of a radiobutton editor. 

— formal parameters 

radiobutton_id ID of the radiobutton editor. 

PlxEL_COL Column number from within the window where the left 

side of the editor shall be placed. Column 0 is at 
left of the window. 



—IN PlX£L_Row Row number from within the window where the top side 

of the editor shall be placed. Row 0 is at the top 
of the window. 


—IN PIXEL_WIDTH The number of columns to be occupied by the editor. 

—IN PIXEL_HEIGHT The number of rows to be occupied by the editor. 

— end formal parameters; 


procedure CWN_RZSIZE_STRING__riELD ( 

“ EDITOR_ID: 
PIXEL COL: 
PIXEL - ROW: 
PIXEL - WIDTH: 
PIXEL HEIGHT: 


in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS; 

in 

ADDRESS) 


— CPM description: Changes the size of a string field editor. 


C-60 



ID of the editor 


— formal parameters 

—IN EDITOR_ID 

—IN PlXEL_COL Column number from within the window where the left 

— side of the editor shall be placed, column 0 is at 

— left of the window. 

—IN PIXEL_ROW Row number from within the window where the top side 

— of the editor shall be placed. Row 0 is at the top 

of the window. 


—IN PIXEL_WIDTH The number of columns to be occupied editor. 

—IN PIXEL_HEIGHT The number of rows to be occupied editor. 

— end formal parameters; 


procedure cwn_resize_window 


(WINDOW_ID: 
PIXEL_COL: 
PIXELROW: 

PIXELJWIDTH: 
PIXEL HEIGHT 


in ADDRESS; 
in ADDRESS; 
in ADDRESS; 
in ADDRESS; 
in ADDRESS) 


— CPM description: changes the size of a window. 


— formal parameters 

—IN WINDOW ID ID attached to the window. 


—IN PIXEL_COL 

—IN PIXEL_ROW 

—IN PIXEL_WIDTH 

—IN PIXEL_HEIGHT 

— end formal parameters 


Column number where the left side of the window 
shall be placed. 

Row number where the top side of the window shall 
be placed. 

The number of columns to be occupied by the 
window. 

The number of rows to be occupied by the window. 


(WINDOW_TYPEJ 

in 

ADDRESS; 

WINDOW IDi 

in 

ADDRESS; 

MOUSE BUTTONS: 

in 

ADDRESS; 

EXPOSURE: 

in 

ADDRESS); 


— CPM description: This function allows the user to select various mouse 

— inputs for a particular window and/or exposure events if 

— the window is the working window. Each call for the 

— same window overrides any previous call. Only the input 

— selected will be returned to the application, however, 

— the application must be aware that if the input occurs 

—• within any editor or is an input handled by either the 

— menu or panel managers, then the application will not be 

— notified of the input. 


c-ei 



— formal parameters 
—IN WINDOW TYPE 


—IN WINDOW ID 


The type of window for which the input is being 
selected for, wheret 
sys_window - a defined window 

sys_display_pAmel - a displayed panel 
sys“defined~button ■ defined button 

The id given at the time of the window type's 
creation wherei 

If window_type is SYS_WZNDOW and window_id is 0, 
then the menu will be activated for the Rootwindow 
or (Display). Otherwise, the menu will be activated 
for the matching window_id. 

If vindow_type » SYS_DISPLAY_PANEL, the id should 
be the panel id. 

If window_type - SYS_DEFINED_BUTTON, the id should 
be the button id. ~ 


—IN MOUSE_BUTTONS Array of logicala indicating selection of mouse 

button operations whose input the application 
wishes to be notified of, where: 

1 - select 

— 0 * do not select 

— [0] ■ Right Button Down 

— [ 1 ] ** Middle Button Down 

— [2] « Left Button Down 

— [3] - Right Button Op 

— [4] ■ Middle Button Up 

— [5] - Left Button Op 


—IN exposure Logical indicating whether the application wishes 

— to be notified of exposure events to the working 

— window, wherei 

0 « Do not notify of exposure events 

— 1 ■ Notify of exposure events 

— NOTE: This parameter is valid only for the working 

— window and is ignored for any other window type. 


— end formal parameters; 


procedure CWN_SHOW_PANEL (PANEL_ID: in ADDRESS); 

— CPM description: This procedure displays a panel that has been bidden by 

CWN_HIDE_PANEL and enables user input to any of the 

— panel editors. 


— formal parameters 

—IN PANEL__ID ID attached to the panel to 

— show. 

— end formal parameters; 


procedure CWN_SHOW_SUBPANEL (SUBPANEL_ID: in ADDRESS); 

— cpm description: This procedure displays a subpanel that has been hidden 


C-62 


by CWN_HIDE_SUBPANEL and enables user input to any of the 

— subpanel editors. 

— formal parameters 

—IN subpanel_id ID attached to the subpanel to 

— ~ show. 


— end formal parameters; 


procedure CWN_SIZE_CBECKBOX ( 


NUM_FIELDS: 

in 

ADDRESS; 

NUM COLS: 

in 

ADDRESS; 

LABELS: 

in 

ADDRESS; 

LABEL LENGTH: 

in 

INTEGER; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL~HEIGHT: 

in 

ADDRESS); 


— CPM description: sizes a checkbox button editor. 

— formal parameters 


—IN 

NUM_FIELDS 

The total number of checkbox buttons 
editor. 

to be in the 

—IN 

NUM_COLS 

The number of columns the checkbox buttons are to be 
arranged in. 

—IN 

LABELS 

Pointer to the array of label addresses for all 
the checkbox buttons. 

—IN 

label_length 

The maximum length of the labels. 


—OUT 

PIXELJWIDTH 

The number of pixels needed to define 
the checkbox editor as specified. 

the width of 

—OUT 

PIXEL_HEIGHT 

The number of pixels needed to define 
the checkbox editor as specified. 

the height of 


— end formal parameters; 


procedure cwn_SIZE_EDITOR ( 


MVM_COLSl 

in 

ADDRESS; 

NUM ROWS: 

in 

ADDRESS; 

EDITOR WIDTH: 

in 

ADDRESS; 

EDITOR HEIGHT: 

in 

ADDRESS); 


— cpn description: Sizes a full page text editor. 


— formal parameters 


—IN 

WUM_COLS 

—I* 

mmjtows 

—— 

—OUT 

EDITOR WIDTH 


mm 


The number of columns to be occupied by the editor. 

The number of rows to be occupied by the editor. 

The width in pixels required to hold the specified 
editor. 


C-«3 



—OUT EDlTOR_HEIGHT The height in pixels of the rectangle required to 

hold the specified editor. 


— end fonnal parameters; 


procedure CWN_sIZE_NUMBER_FIELD ( 


LABEL: 

in 

ADDRESS; 

MAX CHARACTERS: 

in 

ADDRESS; 

PIX£L_WIDTH: 

in 

ADDRESS; 

PIXEL* HEIGHT: 

in 

ADDRESS) 


— CPM description: Returns the size of a Numeric Field editor. 

— formal parameters 

—IN LABEL The optional label before the number field. This 

should be set to NULL if no label will be displayed. 

—IN MAX_CHARACTERS The maximum number of characters which will 

— be allowed to be entered into the field. 


—OUT PIXEL WIDTH 


The width in pixels required to hold the specified 
editor. 


—OUT PIXEL HEIGHT 


The height in pixels of the rectangle required to 
hold the specified editor. 


— end formal parameters; 


procedure cwn_size_pushbutton ( 


NUM_FIELDS: 

in 

ADDRESS; 

NUM~COLS: 

in 

ADDRESS; 

labels: 

in 

ADDRESS; 

Label Length: 

in 

INTEGER; 

DEFAULT_BUTTON: 

in 

ADDRESS; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL HEIGHT: 

in 

ADDRESS); 


— CPM description: Sizes a Pushbutton editor. 

— formal parameters 


—IN 

NUM_FIELDS 

The total number of pushbuttons to be in the 
editor. 

—IN 

NUM_COLS 

The number of columns the pushbuttons are to be 
arranged in. 

—IN 

LABELS 

Address of the array of label addresses for all the 
pushbuttons. 

—IN 

LABEL_LEHGTH 

The maximum length of the labels. 

—IN 

DEFAULT_BUTTON 

The index into the pushbutton array of the button to 
be drawn "active” or displayed as the default 
button. A value of sys_no_default_button will 


C—84 




disable this feature 



—OUT PIXEL WIDTH 


The width in pixels required to hold the specified 
editor. 


—OUT PIXEL_HEIGHT The height in pixels of the rectangle required to 

— ~ hold the specified editor. 


— end foraal parameters; 


i 



procedure CWN_SIZE_RADIOBUTTON ( 


NUM FIELDS; 

in 

ADDRESS; 

NUM_COLSt 

in 

ADDRESS; 

LABELS: 

in 

ADDRESS; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL HEIGHT: 

in 

ADDRESS) 


— CPH description; Sizes a Radiobutton editor. 

— formal parameters 


—IN 

MINEFIELDS 

The total number of radiobuttons to be in the 
editor. 

—IN 

NUM_COLS 

The number of columns the radiobuttons are to be 
arranged in. 

—IN 

LABELS 

Address of the array of label addresses for all the 
radiobuttons. 

—OUT 

PIXEL_WIDTH 

The width in pixels required to hold the specified 
editor. 

—OUT 

PIXEL_HEIGHT 

The height in pixels of the rectangle required to 
hold the specified editor. 

— end 

formal parameters 

7 


procedure CWN_SIZE_STATIC_TEXT ( 


STATIC TEXT: 

in 

ADDRESS; 

TEXT ALIGNMENT: 

in 

ADDRESS; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL HEIGHT: 

in 

ADDRESS); 


— cpn description: sizes a static text editor. 


— formal perameters 

—IN STATIC_TZXT Textual string to display in the button. 


—IV TEXT ALIGNMENT Alignment of the text within the static text area 

— " (CENTER ALIGNED, LRFT_ALIGNED, RIGHT_ALIGNED, 

— NO_AL ZGMKENT) 

—OUT PZXELJNZDTB The width in pixels required to hold the specified 

— ~ editor. 


C-65 




—OUT PIX£L__HEIGHT The height in pixels of the rectangle required to 

” hold the specified editor. 


— end formal parameters; 


procedure OWN SIZE_STRING_FIELD { 


LABEL X 

in 

ADDRESS; 

MAX CHARACTERS< 

in 

ADDRESS; 

PIXEL WIDTH: 

in 

ADDRESS; 

PIXEL HEIGHT: 

in 

ADDRESS); 


— CPM description: Sizes a String Field editor. 

— formal parameters 


—IN 

LABEL 

The optional label before the string field. This 
should be set to NULL if no label will be displayed 

—IN 

MAX_CHARACTERS 

The maximum number of characters which will 
be allowed to be entered into the field. 

—OUT 

PIXEL_WZDTH 

The width in pixels required to hold the specified 
editor. 

—OUT 

PIXEL_HEIUHT 

The height in pixels of the rectangle required to 
hold the specified editor. 


— end formal parameters; 


procedure CWN_TERMINATE_WINDOW; 

— CPM description: This procedure terminates the window system. It must be 

— called to free the slot in the icon stack assigned to the 

— window when it was created. 

— formal parameters 

— None 

— end formal parameters; 


procedure CWN_TOGGLE BUTTON (BUTTONJED: in ADDRESS; 

BUTTONJCABELI in ADDRESS); 

— cpm description: This procedure toggles the state of a button and 

— optionally relabels it. 

— formal parameters 

—IN 8UTTON_ZD ZD attached to the button to 

— toggle. 

—IN BUTT0N_LABEL An optional new label for the button, zf this is 

— ~ set to NULL, then the original label will remain. 

— end formal parameters; 


procedure cnn_unmaf_hzndo* (HINDOw_zd: in address); 


C-66 





— CPM description: Routine to unnap a created window. Any child 

— window will no longer be visible until another nap 

— call is nade on the parent via CWN_MAP_WINDOW. 


— formal parameters 

—IN window_id The id of the window to be unnapped. 

— end formal parameters; 


procedure CWN_UPDATE_PANEL (PANEL_ID: in ADDRESS); 

— CPM description: Causes a panel to update its structures with additions 

— or deletions of editors. 

— formal parameters 


—IN PANEL_ID 

ZD to 

attach to the panel. 



— 

This : 

ID is required for all interactions with the 

— 

panel 

. 



— end formal parameters; 

1 




procedure CWN_USER_INPUT_ 

FIELD 

(Field_Type : 

in 

ADDRESS; 



xnputjstring : 

in 

ADDRESS; 



Max_string_Size : 

in 

ADDRESS; 



Opt Label 7 

in 

ADDRESS; 



X Pixel : 

in 

ADDRESS; 



»“Pixel : 

in 

ADDRESS); 


— CPM description: This puts up an editing field for user input of 

— alphanumeric or numeric strings anywhere within the 

— display screen. 


— formal parameters 


—IN 

Field_Type 

The type of field to be defined and used: 
SYS_STRING_FIELD 

SYS_NUMBER_FIELD 

—IN 

Input_string 

The address of the variable which will 
receive the user input. This variable jaay be 
initialised to some value, which would 
be displayed. This must be a NULL terminated 
string. 

—IN 

Max_string_Size 

The maximum string size allowed for input. The 
field will be defined according to this size. 

—IN 

Opt_Label 

The optional label (prompt or string) which the 
application wishes to be displayed on the left side 
of the input field. 

—IN 

XJPixel 

The x screen pixel where the upper left corner of 
the field will be placed. 

—IN 

T_Pixel 

The y screen pixel of the display where the upper 


C-«7 





left corner of the input field vill be placed. 


— end formal parameters; 


private 

pragma INTERFACE (C, CWN_ACTIVATE_EDITOR); 
pragma INTERFACE (C, CWN ACTIVATE MENU); 
pragma INTERFACE (C, CWN~ACTIVATE~NUMBER_rIELD ): 
pragma INTERFACE (C, CWN - ACTIVATE~STRINg3fIELD) ; 
pragma INTERFACE (C, CWN~ADD_INPUT_SOCXET)} 
pragma INTERFACE (C, CWN_CHANGE_BUTTON_LAB£L); 
pragma INTERFACE (C, CWN_CHANGE~CHECKBOX_STATES) ; 
pragma INTERFACE (C, CWN_CBANGEJBDITOR_TEXT); 
pragma INTERFACE (C, CWN_CHANGE_ICON_LABEL ); 
pragma INTERFACE (C, CWN_CHANGE~SCROLLBAR); 
pragma INTERFACE (C, CWN_CHANGE~WINDOW_LABEL); 
pragma INTERFACE (C, CWN_CLEAR_WINDOH); 
pragma INTERFACE (C, CWN _ CLOSE_WINDOW); 
pragma INTERFACE (C, CWN~CREATEJEXPOSURE_EVENT); 
pragma INTERFACE (C, cwn_create~subwindow) ; 
pragma INTERFACE (C, CWN CREATE_WINDOW); 
pragma interface (C, cwn_deactivate_menu) ; 
pragma INTERFACE (C, CWN_DEFINE_BUTTON); 
pragma INTERFACE (C, CWN_DEFINE_CHECXBOX); 
pragma INTERFACE {C, CWN_DEFINE_EDITOR); 
pragma INTERFACE (C, CHN_DEFINE_NUKBER FIELD); 
pragma INTERFACE (C, CWn“dEFINE_PANEL)7 
pragma INTERFACE <C, CWN~DEFINE JPOPUP MEND); 
pragma INTERFACE (C, CWN~DEFINSJPOPUPJWXNDOW); 
pragma INTERFACE <C, CWN DEFINE_PUSHBUTTON); 

pragma interface (C, cwn_define radiobutton); 

pragma INTERFACE (C, CWN_DEFINZ~SCROLLBAR); 
pragma INTERFACE (C, CWN_DEFINE~STATIC_TEXT); 
pragma INTERFACE (C, CWN DEFINE~STRING_riELD)? 
pragma INTERFACE (C, CWN_DEFINE_SUBPANEL); 
pragma INTERFACE (C, CWN_DEUETE~BUTTON); 
pragma INTERFACE (C, CWN DELETE CHECKBOX); 
pragma INTERFACE (C, CWN_DELETE~EDITOR); 
pragma INTERFACE (C, CWN_DELETE_KENU); 
pragma INTERFACE (C, CWN~DELZTE~NUKBER_FIELD); 
pragma INTERFACE (C, CWN~DELETE PANEL); 
pragma INTERFACE (C, CWN_DELETE_POPUP WINDOW); 
pragma INTERFACE (C, CWN~DELETE _ PUSHBUTTON); 
pragma INTERFACE (C, CWN~DELETE~RADIOBUTTON); 
pragma INTERFACE (C, CWN~DELETE~8CR0LLBAR); 
pragma INTERFACE (C, CWN~DELETE~STATIC_TEXT); 

pragma interface <c, cwn_delete__string”field); 

pragma INTERFACE (C, CWN~DELETE SUBPANEL); 
pragma INTERFACE (C, CWN DELETE~SUBWINDOW); 
pragma INTERFACE (C, CWN_DI8PLAY system MESSAGE); 
pragma interface (C, cwn_end pans.); “ 
pragma interface (c, cwn“end~subpanel); 
pragma INTERFACE (C, CWN_KANDLE window MOVE); 
pragma INTERFACE (C, CWN_HIDE PANEL); _ 


C-68 






pragma INTERFACE (C, CWN_HIDE_SUBPANEL)} 
pragma INTERFACE (C, CWN - INITIALIZE_WINDOW__SYSTEM) 
pragma INTERFACE (C, CWN~INPUT)J 
pragma INTERFACE (C, CWN~MAP_WINDOW); 
pragma INTERFACE (C, CWN_HESSAGE_BOX); 
pragma INTERFACE (C, CWN~MOVE_BUTTON); 
pragma INTERFACE <C, CWN~HOVE_CHECKBOX); 
pragma INTERFACE (C, CWN~MOVE~EDITOR)j 
pragma INTERFACE (C, CWN - MOVE~NUHBER_FIELD); 
pragma INTERFACE (C, CWN~MOVEJPANEL)7 
pragma INTERFACE (C, CWN_HOVE_POPUP_WINDOW) J 
pragma INTERFACE (C, CWN~MOVE_PUSHBUTTON); 
pragma INTERFACE <C, CWN~ MOVE _ KADIOBUTTON )' 
pragma INTERFACE (C, CWKMOVE_SCROLLBAR); 
pragma INTERFACE (C, CTfN~MOVE~STATIC_TEXT); 
pragma INTERFACE (C, CWN_MOVE_STRING_FI£LD); 
pragma INTERFACE (C, CWN iMOVE_SUBWINDOW); 
pragma INTERFACE (C, CWN~MOVE_WrNDOW); 
pragma INTERFACE (C, CWN~OPEN_ICON); 
pragma INTERFACE (C, CWN_POST_MENU)) 
pragma INTERFACE (C, CWN - QU E RY_CHECKBOX_RECTS) ' 
pragma INTERFACE (C, CWN_QUERY _ CHECKBOX_SIZE); 
pragma INTERFACE (C, CWN QUERY~DISPLAY_SIZK); 
pragma INTERFACE (C, CWN - QUERY_EDITOR_SIZE); 
pragma INTERFACE (C, CWN QUERYJTONTjSIZB)) 
pragma INTERFACE (C, CWn”qUERY_NUMBER_FIELD_SIZE); 
pragma INTERFACE (C, CWN_QUERY_PANEL_ORIGIN); 
pragma INTERFACE (C, CWN_QUERY_PANEL_SIZE)? 
pragma INTERFACE (C, CWN~QUERY~PUSHBUTTON_RECTS)) 
pragma INTERFACE (C, CWN_QUERY~PUSBBUTTON_SIZE); 
pragma INTERFACE (C, CWN_QUERY~RADIOBUTTON_RECTS); 

pragma INTERFACE (C, CWN_QUERY_RADIOBUTTC«”s I!EE > » 
pragma INTERFACE (C, CWN_QUERY_SCROLLBAR_8IZE>; 
pragma INTERFACE (C, CWN - QUERY - STRING_FXELD_8IZE) ; 
pragma INTERFACE (C, CWN_QUERY_SDBPAnI>_SIZE)j 
pragma INTERFACE (C, CWN_QUERY_WlNDOW_SIZE); 
pragma INTERFACE (C, CWN_REMOVE_INPUT_SOdDKT); 
pragma INTERFACE (C, CWN_RESIZE_CHECKBOX); 
pragma INTERFACE (C, CWNJRESZZEJSDZTOR)) 
pragma interface (C, cwn_remove_system_messagE); 
pragma interface (C, cwn_resize~number_field); 

pragma INTERFACE (C, CWN_RESIZE_PANEL)J 
pragma INTERFACE (C, CWN_RISIZE_PUSHBUTTON); 
pragma INTERFACE (C, CWN_RESIZE_RADIOBOTTON)J 
pragma INTERFACE (C, CWN_RESIZE_8TRING_FIELD) j 
pragma INTERFACE (C, CWN RESZZEJIZNDOwTl 
pragma INTERFACE (C, CWN_SELECT_INPUT) | 
pragma INTERFACE (C, CWN - SHOW PANEL); 
pragma INTERFACE (C, CWN_SHOW ISUBPANEL)) 
pragma INTERFACE (C, CWN_SXZE - CHECKBOX)> 
pragma INTERFACE (C, CWN_SXZE~EDITOR)J 
pragma INTERFACE (C, CWN_SIZE~NUMBER_FIELD)? 
pragma INTERFACE (C, CNN SIZE PU8HBUTTON)) 
pragma INTERFACE (C, CWN - 8IZE~RAI>IOBUTTOM); 
pragma INTERFACE (C, CWN - SIZE - STATIC_TEXT)) 
pragma INTERFACE (C, CWN - SIZE - 8TRINO_FIXLD)J 


C-«9 





pragma INTERFACE (C 
pragma interface (C 
pragma INTERFACE (C 
pragma INTERFACE (C 
pragma INTERFACE (C 

end CNN WINDOW SYSTEM; 


CWN_TERMINATE_WIHDOW) 
CWN_TOGGLE_BUTTON); 
CWN~UNMAP_WINDOW)} 
CWN~OPDATE__PANEL) > 
CWN_USER_INPUT_TIZLD) 






APPENDIX D - EDDIC DATA BASES 


This appendix describes the format of the EDDIC sun-based d< a bases. 
Table D-l lists the Sun-based data bases. This appendix also includes the 
record layouts for the data bases. 


Table D-l. EDDIC Sun-Based Data Bases 


Data Base Name 
BLUEFOR_AMMO_SOURCE 

BLUEFOR_AMMO_TRACK 

BLUEFOR_ASSET_UNIT 

BLUEFOR_AUTH_AiIMO_IND£X 

BLUEFOR_AUTH_AMMO 

BLUEFOR_AUTH_EQUIP_INDEX 

BLUEFOR_AUTH_EQUIP 

BLUEFOR_CM_EDIT_MENU 

bluefor_cm_view_menu 

BLUEFOR_CURR_AKMO 
BLUEFOR CURR AMMO INDEX 


PescrjEUaS 

Initial Ammunition levels for BLUEFOR units. 
(ASCII format). 

List of ammunition types to include in the 
graphical unit status report (ASCII format). 

List of BLUEFOR units that have initial 
levels of assets assigned to them (ASCII 
format). 

Index file for the BLUEFOR authorized 
ammunition levels data case (Ada format). 

BLUEFOR authorized ammunition levels {? a 
format). 

Index file for the BLUEFOR authorized 
equipment levels data base (Ada format). 

BLUEFOR authorized equipment levels (Ada 
format). 

Description of the walking menu to display 
when a BLUEFOR control measure is selected on 
the tactical map in a window with edit 
capability (ASCII format). 

Description of the walking menu to display 
when a BLUEFOR control measure is selected on 
the tactical map in a window with view only 
capability (ASCII format). 

BLUEFOR current ammunition levels (Ada 
format). 

Index file for the BLUEFOR current ammunition 
levels data base (Ada format). 


BLUEF0R_CURR_£QUIP_INDEX index file for the BLUEFOR current equipment 

levels data base (Ada format). 


BLUEFOR CURR EQUIP 


BLUEFOR current equipment levels (Ada 
format). 


D-l 



BLUEFOR_EQUIP_SOURCE 
BLUEFOR JBQUIPJTRACK 

BLUEFOR_FUEL 

BLUEFOR_FUEL_INDEX 

BLUEFOR_FUEL_SOURCE 

BLU£FOR_OBS_EDIT_M£NU 

BLUEFOR_OBS_VIEW_M£NU 

BLUEF OR_ORGANIC_TASK_ORG 

BLUEFORJPERSONNEL 

BLUEFOR_PERSONNEL_INDEX 

BLUEFOR_PERSONNEL_SOURCE 

BLUEF OR_TASK_ORG_SOURCE 

3LUEFOR_UNIT_CONVERT 

BLUEFOR_UNIT_LOC_INDEX 

BLUEFOR_UNIT_LOC_SOURCE 

BLUEFOR_UNIT_LOC 


Initial equipment levels for BLUEFOR units 
(ASCII format). 

List of BLUEFOR equipment types to include in 
the graphical unit status report (ASCII 
format). 

BLUEFOR authorized and current fuel levels 
(Ada format). 

Index file for the BLUEFOR fuel level data 
base (Ada format). 

Initial fuel levels for BLUEFOR units (ASCII 
format). 

Description of the walking menu to display 
when a BLUEFOR obstacle is selected on the 
tactical map in a window with view only 
capability (ASCII format). 

Description of the walking menu to display 
when a BLUEFOR obstacle is selected on the 
tactical map in a window with edit capability 
(ASCII format). 

Organic task organization for the BLUEFOR 
units (ASCII format). 

BLUEFOR authorized and current personnel 
levels (Ada format). 

Index file for the BLUEFOR personnel level 
data base (Ada format). 

Initial personnel levels for BLUEFOR units 
(ASCII format). 

Initial task organization and status for the 
BLUEFOR units (ASCII format). 

Data base to convert BLUEFOR unit names to 
unit numbers (Ada format). 

Index file for the BLUEFOR unit location data 
base (Ada format). 

Initial unit locations for the BLUEFOR units 
(ASCII format). 

BLUEFOR unit location data base (Ada format). 


D-2 




BLUEFOR_UNIT_EDIT_MENU 

BLUEFOR_UNIT_NAME 

BLUEFOR_UNIT_STATUS 

BLUEFOR_UNIT_STATUS_INDEX 

BLUEFOR_UNIT_VIEW_MENU 

C2_PRODUCT 

C2_PRODUCT_DESC 

C2_PRODUCT_HEADER 

C2_PRODUCT_NAME 

C2_PRODUCT_RECORD 

C2_PR0DUCT_S0URCE 

CNTRL_MSR_POINT 

CNTRL_MSR_POINT_INDEX 

CNTRL HSR POINT NAME 


Description of Vhe walking menu to display 
when a BLUEFOR unit is selected on a tactical 
map in a window with edit capability (ASCII 
format). 

List of the BLUEFOR unit nameB. This file is 
used to assign names to the unit transactions 
in the situation recorded data (ASCII 
format). 

BLUEFOR unit status (Ada format). 

Index file for the BLUEFOR unit status data 
base (Ada format). 

Description of the walking menu to display 
when a BLUEFOR unit is selected on the 
tactical map in a window with view only 
capability (ASCII format). 

Command and control product data base. 
Includes the products in the view situation, 
build and view message windows (Ada format). 

Command and control product description data 
base. This data base indicates which record 
from the C2_PRODUCT data base to use for a 
product (Ada format). 

Command and control report headers. The 
report headers only applies to those products 
in the view situation window (Ada format). 

List of the command and control product 
names. This file is used to assign names to 
the command and control transactions in the 
C2 product recorded data (ASCII format). 

Command and control data recording 
transactions (Ada format). 

Description of the command and control 
products to include in the view situation and 
build windows (ASCII format). 

Point control measures (Ada format). 

Index file for the point control measure data 
base (Ada format). 

List of the point control measure names. 

This file is used to assign names to the 
point control measure transactions in the 
situation recorded data (ASCII format). 


D-3 





CONTOUR_lTO160 

CONTOUR_lTO400 

CC*NT0UP._1T08 0 

CONTOUR_lTOS 0 0 

CONTOUR_DESC 

CONTOUR_DESC_lTO160 

CONTOUR_DESC_1TO400 

C0NT0UR_DESC_1T08 0 

C0NT0UR_DESC_1T08 00 

CONTROL_M£ASURE 

CONTROL_MEASURE_NAME 

CONTROL_MEASURE_SOURCE 

CONTROL_MEASURE_INDEX 

£LEVATION_lT04 0 0 

ELEVATION_DESC_1T04 0 0 

ELEV_BAND_1T0160 

ELEV_BAND_1T040 0 

ELEV_BAND_1T080 

ELEV BAND 1TO800 


Map contour image file for the 1:160,000 map 
scale (Binary format). 

Map contour image file for the 1:400,000 map 
scale (Binary format). 

Map contour image file for the 1:80,000 map 
scale (Binary format). 

Map contour image file for the 1:800,000 map 
scale (Binary format). 


Description of the contour files to include 
in the tactical map system (ASCII format). 


Description of the 1:160,000 contour image 
file (ASCII format). 


Description of the 1:400,000 contour image 
file (ASCII format). 

Description of the 1:80,000 contour image 
file (ASCII format). 

Description of the 1:800,000 contour image 
file (ASCII format). 

control measures (Ada format). 

List of the control measure names. This file 
is used to assign names to the control 
measure transactions in the situation 
recorded data (ASCII format). 

Initial control measures (ASCII format). 


Index file for the control measure data base 
(Ada format). 

Elevation file for the 1:400,000 map scale 
(Binary format). 


Description of the 1:400,000 elevation file 
(ASCII format). 

Elevation band image file for the 1:160,000 
map scale (Binary format). 

Elevation band image file for the 1:400,000 
map scale (Binary format). 

Elevation band image file for the 1:80,000 
map scale (Binary format). 

Elevation band image file for the 1:800,000 
map scale (Binary format). 


D-4 




ELEV_BAND_DESC_lTO160 
ELEV_BAND_DESC_lTO400 
ELEV_BAND_DES C_1TO80 
ELEV_BAND_DE S C_ 1 TO 8 0 0 
EXP_CONTROL_M£NU 

EXP_CONTROL_NAME 

EXP_CONTROL_PARTICIPANT 

EXP_CONTROL_PRODUCT 

EXP_CONTROL_PROD_DESC 

EXP_CONTROL_RECORD 

EXP_CONTROL_SOURCE 

F0RM_DESCR1PTION 
G2_BUILD_MENU 

G2 REFERENCE MENU 


Description of the 1:160,000 elevation band 
image file (ASCII format). 

Description of the 1:400,000 elevation band 
image file (ASCII format). 

Description of the 1:80,000 elevation band 
image file (ASCII format). 

Description of the 1:800,000 elevation band 
image file (ASCII format). 

Description of the experiment control product 
walking menu. This file is created from the 
product names in the experiment control 
source file (ASCII format). 

List of the experiment control product names. 
This file is used to assign names to the 
experiment control transactions in the 
experiment control recorded data (ASCII 
format). 

List of participants that the experimenter 
can send experiment control messages to (Ada 
format). 

Experiment control products (Ada format). 

Experiment control product description data 
base. This data base indicates which record 
from the experiment control data base to use 
for a product (Ada format). 

Experiment control data recording 
transactions (Ada format). 

Description of the products to include in the 
experiment control window (ASCII format). 

Description and layout of EDDIC form. 

Description of the build product walking menu 
for the G2 workstation. This file is created 
from the command and control product source 
file (ASCII format). 

Description of the reference product walking 
menu for the G2 workstation. This file is 
created from the reference product source 
file (ASCII format). 


D-5 



G2_VIEW_C2_M£NU 

G3JBUILD_M£NU 

G3_R£FER£NCE_MENU 

G3_VIEW_C2_MENU 

G4_BUILD__MENU 

G4_REFERENCE_MENU 

G4_VIEW_C2_MENU 

HELP_M£NU 

HELP_NAME 

HELP_PROD_DESC 

HELP_PRODUCT 
HELP SOURCE 


Description of the view situation product 
walking menu for the G2 workstation. This 
file is created from the command and control 
product source file (ASCII format). 

Description of the build product walking menu 
for the G3 workstation. This file is created 
from the command and control product source 
file (ASCII format). 

Description of the reference product walking 
menu for the G3 workstation. This file is 
created from the reference product source 
file (ASCII format). 

Description of the view situation product 
walking menu for the G3 workstation. This 
file iB created from the command and control 
product source file (ASCII format). 

Description of the build product walking menu 
for the G4 workstation. This file is created 
from the command and control product source 
file (ASCII format). 

Description of the reference product walking 
menu for the G4 workstation. This file is 
created from the reference product source 
file (ASCII format). 

Description of the view situation product 
walking menu for the G3 workstation. This 
file is created from the command and control 
product source file (Ascii format). 

Description of the help product walking menu 
for the G3 workstation. This file is created 
from the help product source file (ASCII 
format). 

List of the help product names. This file is 
used to assign names to the help transactions 
in the reference recorded data (ASCII 
format). 

Help product description data base. This 
data base indicates which record from the 
help product data base to use for a product 
(Ada format). 

Help products (Ada format). 

Description of the products to include in the 
help window (ASCII format). 


D-6 



ICON_STACK_DB 

LUT_HILITE_DESC 

LUT_HILITE_MAP_ON 

LUT_HILITE_MAP_OFF 

LUT_OVERLAY 

LUT_UNHILITE_DESC 

LUT_UN HILITE_MAP_ON 

LUT_UNHILITE_MAP_OFF 

MAP_BUILD_MENU 

MAP_DESC 

MAP_LEGEND 

MAP_MESSAGE_MENU 

MAP_VIEW_C2_MENU 

M£SSAGE_LOG 
OBSTACLE 
OBSTACLE INDEX 


Icon stack status data base. Indicates which 
stack positions are used and which ones are 
free (C format). 

Description of the color lookup table files 
to use when features are hilighted (ASCII 
format). 

Color lookup table to use when a map 
background (elevation band, shaded relief, or 
vegetation) is displayed and map features are 
hilighted (ASCII format). 

Color lookup table to use when a map with a 
null background is displayed and map features 
are hilighted (ASCII format). 

Color lookup table for the overlay planes 
(ASCII format). 

Description of the color lookup table files 
to use when features are not hilighted (ASCII 
format). 

Color lookup table to use when a map 
background (elevation band, shaded relief, or 
vegetation) is displayed and map features are 
not hilighted (ASCII format). 

color lookup table to use when a map with a 
null background is displayed and map features 
are not hilighted (ASCII format). 

Description of the map options walking menu 
for the build window (ASCII format). 

Description of the map image files to include 
in the tactical map system (ascii format). 

Description of what to display in the map 
legend (ASCII format). 

Description of the map options walking menu 
for the view message window (ASCII format). 

description of the map options walking menu 
for the view situation window (ASCII format). 

Log of all the messages sent (Ada format). 

obstacles (Ada format). 

index for the obstacle data base (Ada 
format). 


D-7 





OBSTACLE_SOURCE 

OPFOR_AUTH_EQUIP 

OPFOR_AUTH_EQUIP_INDEX 

OPFOR_CM_EDIT_MENU 

OPFOR CM VIEW MENU 


OPFOR_CURR_EQUIP_INDEX 

OPFOR_CURR_EQUIP 
OPFOR EQUIP NAME 


OPFOR EQUIP SOURCE 


Initial obstacles (ASCII format). 

OPFOR authorized equipment levels (Ada 
format). 

Index file for the OPFOR authorized equipment 
levels data base (Ada format). 

Description of the walking menu to display 
when a OPFOR control measure is selected on 
the tactical map in a window with edit 
capability (ASCII format). 

Description of the walking menu to display 
when a OPFOR control measure is selected on 
the tactical map in a window with view only 
capability (ASCII format). 

Index file for the OPFOR current equipment 
levels data base (Ada format). 

OPFOR current equipment levels (Ada format). 

List of the OPFOR equipment names. This file 
is used to assign names to the equipment 
types in the situation data base (ASCII 
format). 

Initial equipment levels for OPFOR units 
(ASCII format). 


OPFOR OBS EDIT MENU 


OPFOR OBS VIEW MENU 


OPFOR_ORGANIC_TASK_ORG 
OPFOR_R£INFORCE_TIME 
OPFOR_TASK_ORG_SOURCE 
OPFOR UNIT CONVERT 


Description of the walking menu to display 
when a OPFOR obstacle is selected on the 
tactical map in a window with view only 
capability (ASCII format). 

Description of the walking menu to display 
when a OPFOR obstacle is selected on the 
tactical map in a window with edit capability 
(Ascii format). 

Organic task organization for the OPFOR units 
(ASCII format). 

Initial reinforcing times for OPFOR units 
(ascii format). 

Initial task organization for the opfor units 
(ASCII format). 

Data base to convert OPFOR unit names to unit 
numbers (Ada format). 


D-8 






OPFOR_UNIT_EDIT_MENU 

OPFOR_UNIT_LOC 

OPFOR_UNIT_LOC_INDEX 

OPFOR_UNIT_LOC_SOURCE 

OPFOR_UNIT_NAME 

OPFOR_UNIT_STATUS_IND£X 

OPFOR_UNIT_STATUS 

OPFOR_UNIT_STATUS_SOURCE 

OPFOR_UNIT_VIEW_MENU 

OPLAN_LIST 

OPLAN_LIST_SOURCE 

PRODUCT_HARDCOPY 

REFER£NCE_HEADER 

REFERENCE_NAME 

REFERENCE_PROD_DESC 

REFERENCE PRODUCT 


Description of the walking menu to display 
when a OPFOR unit is selected on a tactical 
map in a window with edit capability (ASCII 
format). 

OPFOR unit location data base (Ada format). 

Index file for the OPFOR unit location data 
base (Ada format). 

Initial unit locations for the OPFOR units 
(ascii format). 

List of the OPFOR unit names. This file is 
used to assign names to the unit transactions 
in the situation recorded data (ASCII 
format). 

Index file for the OPFOR unit status data 
base (Ada format). 

OPFOR unit status (Ada format). 

Initial status of the OPFOR units (ASCII 
format). 

Description of the walking menu to display 
when a OPFOR unit is selected on the tactical 
map in a window with view only capability 
(ASCII format). 

List of existing Operational plans in the 
system (Ada format). 

Operational plans to initially have in the 
system (ASCII format). 

ASCII output file of the products printed by 
CDB_HARDCOPY. 

Reference report headers (Ada format). 

List of the reference product names. This 
file is used to assign names to the reference 
transactions in the reference recorded data 
(ASCII format). 

Reference product description data base. 

This data base indicates which records from 
the reference product data base to use for a 
product (Ada format). 

Reference product data base (Ada format). 


D-9 






REFERENCE_RECORD 

REFERENCE_SOURCE 

ROOT_WINDOW_MENU 

SCREEN_DUMP_IMAGE 
SEND__PARTICIPANT_SOURCE 
SHAD_RELF_1T0160 
S HAD_RELF_1T04 0 0 
SHAD_RELF_lTO80 
SHAD_RELF_1T0800 
SHAD_RELF_DESC_lTOl 6 0 
SHAD_RELF__DESC_1T04 0 0 
SHAD_RELF_DESC_1T08 0 
SHAD_RELF_DESC_lTO800 
SITUATI ON__RECORD 
TASK_ORGjrOOL_M£NU 

TASK ORG TOP UNIT MENU 


Reference data recording transactions (Ada 
format). 

Description of the reference products to 
include in the view reference window (ASCII 
format). 

Description of the walking menu to display in 
the root window. The root window is any part 
of the screen where a window or button is not 
displayed (ascii format). 

Bitmap image of a screen of a Sun workstation 
(Bitmap format). 

LiBt of the participants that messages can be 
sent to (ASCII format). 

Shaded relief image file for the 1:160,000 
map scale (Binary format). 

Shaded relief image file for the 1:400,000 
map scale (Binary format). 

shaded relief image file for the 1:80,000 map 
scale (Binary format). 

Shaded relief image file for the 1:800,000 
map scale (Binary format). 

Description of the 1:160,000 shaded relief 
image file (ASCII format). 

Description of the 1:400,000 shaded relief 
image file (ASCII format). 

Description of the 1:80,000 shaded relief 
image file (ASCII format). 

Description of the 1:800,000 shaded relief 
image file (ASCII format). 

situation data recording transactions (Ada 
format). 

Description of the walking menu to display as 
a popup menu for the task organization tool 
(ASCII format). 

Description of the walking menu to display 
when the top unit button is selected in the 
task organization tool (ASCII format). 


D-10 



Description of the walking menu to display as 
a popup menu when a unit is selected in the 
task organization tool (ASCII format). 


TASK_ORG_UNIT_MENU 

TASK_ORG_UNIT_TYPE_MENU 

TOOL_MENU 

TRAN_ACTIVITY 
TRAN_AMMUNITION 
TRAN_BLUEFOR_TASK_ORG 
TRAN_C2_REQUEST 
TRAN_C2_WINDOW 

TRAN_CNTRL_MSR_DEL 
TRAN_CNTRL_MSR_EFF_TIME 
TRAN_CNTRL_MSR_LOC 
TRAN_C N T RL_MS R_S TAT 
TRAN_C ON TROL_RE QUEST 
TRAN_CONTROL_WINDOW 

TRANJEQUIPMENT 

TRAN_rUEL 

TRAM LOOKUP TABLE 


Description of the multiple selection menu to 
display when the unit type button is selected 
in the task organization tool (ASCII format). 

Description of the walking menu defining the 
tools available in the tool window (ASCII 
format). 

Unit activity update recorded transactions 
(ASCII format). 

Unit ammunition update recorded transactions 
(ASCII format). 

BLUEFOR task organization update recorded 
transactions (ASCII format). 

Request for command and control product 
recorded transactions (ASCII format). 

View situation, build, and view message 
window manipulation recorded transactions 
(ASCII format). 

Control measure delete recorded transactions 
(ASCII format). 

Control measure effective time update 
recorded transactions (ASCII format). 

Control measure location update recorded 
transactions (ASCII format). 

Control measure status update recorded 
transactions (ASCII format). 

Request for experiment control product 
recorded transactions (ASCII format). 

Tool and experiment control window 
manipulation recorded transactions (ASCII 
format). 

Unit equipment update recorded transactions 
(ASCII format). 

Unit fuel update recorded transactions (ASCII 
format). 

Color lookup table update recorded 
transactions (ASCII format). 


D-ll 




TRAN_MAP 

TRAN_NEW_C2 

TRAN_NEW__CNTRL_MSR 

TRAN_NEW__OBSTACLE 

TRAN_OBSTACLE_DEL 

TRAN_OBSTACLE_EFF_TIME 

TRAN_OBSTACLE_LOC 

TRAN_OBSTACLE_STATUS 

TRAN_OPFOR_REINFORCE 

TRAN_OPFOR_STRENGTH 

TRAN_OPFOR_TASK_ORG 

TRAN_PERSONNEL 

TRAN_REF_REQUEST 

TRAN_REF_WINDOW 

TRAN_S ITUATION_REQUEST 

TRAN_SITUATION_WINDOW 

TRAN_UNIT_MISSION 

TRAN_UNIT_LOCATION 


Tactical map control recorded transactions 
(ASCII format). 

New command and control product recorded 
transactions (ASCII format). 

Mew control measure recorded transactions 
(ascii format). 

New obstacle recorded transactions (ASCII 
format). 

Obstacle delete recorded transactions (ASCII 
format). 

Obstacle effective time update recorded 
transactions (ASCII format). 

obstacle location update recorded 
transactions (ASCII format). 

obstacle status update recorded transactions 
(ASCII format). 

OPFOR unit reinforcing time update recorded 
transactions (ASCII format). 

OPFOR unit strength update recorded 
transactions (ASCII format). 

OPFOR task organization update recorded 
transactions (ASCII format). 

Unit personnel update recorded transactions 
(ASCII format). 

Request for reference product recorded 
transaction (ASCII format). 

view reference window manipulation recorded 
transactions (ASCII format). 

Request for situation data recorded 
transactions (ASCII format). 

Window manipulation recorded transactions 
(Ascii format). 

Unit mission update recorded transactions 
(ASCII format). 

Unit location update recorded transactions 
(Ascii format). 


VEGETATION 1TO160 


Vegetation image file for the 1:160,000 map 
scale (Binary format). 



VEGETATI0N_1T04 0 0 
VEGETATION_lTO80 
VEGETATI0N_1T08 0 0 
VEGETATI0N_DESC_1T0160 
VEGETATI0N_DESC_1T04 0 0 
VEGETATION_DESC_lTO80 

VEGETATION DESC 1TO800 


Vegetation image file for the 1:400,000 map 
scale (Binary format). 

Vegetation image file for the 1:80,000 map 
scale (Binary format). 

Vegetation image file for the 1:800,000 map 
scale (Binary format). 

Description of the 1:160,000 vegetation image 
file (ASCII format). 

Description of the 1:400,000 vegetation image 
file (Ascii format). 

Description of the 1:80,000 vegetation image 
file (ASCII format). 

Description of the 1:800,000 vegetation image 
file (ASCII format). 


The following section describes the record layout of the EDDIC Sun- 
based data bases. 


DATA BASE: BLUEFOR_AMMO_SOURCE 
TYPE: VARIABLE ASCII 

Description 

Initial Ammunition levels for BLUEFOR units. 


Column 


Field Name 

Type 

Width 

Dec 

Record 

_L 

(Unit) 




14 


Unit Name 

Character 

12 


35 


Number of Ammunition Types 

Numeric 

2 

0 

Record 

2 _ 

(Ammo) 




15 


Ammunition Name 

Character 

12 


30 


Authorized Amount 

Numeric 

6 

0 

40 


On-Hand Amount 

Numeric 

6 

0 


Note: The Ammo records must immediately follow the unit record. The number of 
Ammo records must equal the number of ammunition types in the Unit record. A 
date/time record is used to assign a date/time to the ammunition data. 

Format: *DDHHMM MON starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by two comment records. 


D-13 




DATA BASE: BLUEFOR_AMMO_TRACK 
TYPE: FIXED ASCII 


Description 

List of ammunition types to include in the graphical unit status report. 
Column Field Name Type width 

1 Ammunition Name Character 12 

15 Track (True or False) Boolean 5 

Note: The first record on this file is a comment. 


Dec 


DATA BASE: BLUEFOR_ASSET_UNIT 
TYPE: FIXED ASCII 


Description 

List of BLUEFOR units that have initial levels of assets assigned to them. 


Column 

Field Name 

Type 

Width 

Dec 

3 

Unit Name 

Character 

12 



Note: a date/tiroe record is used to assign a date/time to the units. Format: 
♦ddhhmm MON starting in column 1. (Example: *021800 SEP) 


DATA BASE: BLUEFOR_AUTB_AMMO_INDEX 
TYPE: Ada 


Description 

Index file for the BLUEFOR authorized ammunition levels data base. 

type SDB_BLUEFOR_AMMO_PTR is 
record 

SDB_UNIT_ID : SDB_BLUEFOR_UNIT_ID; 

SDB_TIME~ : SYS_DATE_TIME; 

SDB_OPPLAN : SYS_OPPLAN; 

SDB_RECORD : SYS~DB_SIZE; 

end record; 


DATA BASE: BLUEFOR_AUTB_AMMO 
TYPE: Ada 

Description 

BLUEFOR authorized ammunition levels. 

type SDB_AMMO_REC is 
record 


D-14 








SDB_ID : 

SDB_NAME : 

SDB_BASIC_LOAD 
SDB_KEY_ITEM : 

end record; 

type SDB_AMMO_ARRAY is array 


type SDB_AMMO_AUTH_LIST is 
record 

SDB_UNIT_ID : 

SDB_TIME : 

SDB_OPPLAN : 

SDB_COUNT : 

SDB_LIST : 

end record; 


S DB_AMMUNITION; 

String (SDB_AMMO_NAME_LEN); 
SYS_QUANTITY; 

BOOLEAN; 


SDB_AMMUNITION) of 
SDB AMMO REC; 


SDB_UNIT; 
SYS_DATE_TIME; 
SYS_OPPLAN; 
SDB_AMMUNITION; 
SDB AMMO ARRAY; 


DATA BASE: BLUEFOR_AUTH_EQUIP_INDEX 
TYPE: Ada 


Description 

Index file for the BLUEFOR authorized equipment levels data base. 

type SDB_BLUEFOR_EQUIP_PTR is 
record 

SDB_UNIT_ID 
SDB_TIME 

SDB_OPPLAN 

SDB_RECORD 
end record; 


DATA BASE: BLUEFOR_AUTH_EQUIP 
TYPE: Ada 

Description 

BLUEFOR authorized equipment levels. 

type SDB_EQUIP_REC is 
record 

SDB_ID : 

SDB_NAME : 

SDB_AUTHORIZED : 

SDB_CATEGORY : 

end record; 

type SDB_EQUIP_ARRAY is array <SDB_EQUIPMENT) of 

SDB~EQUIP_REC; 

type SDB_EQUIP_AUTH_LIST is 
record 

SDB UNIT ID : SDB UNIT; 


SDB_EQUIPMENT; 

String (SDB_EQUIP_NAME_LEN); 
SYS_QUANTITY; 

SDB EQUIP CATEGORY; 


SDB_BLUEFOR_UNIT_ID; 
S Y S~DATE_TIME; 
SYS~OPPLAN; 

SYS DB SIZE; 


D-15 









SDBJTIME 
SDB_OPPLAN 
SDB_COUNT 
SDB_LIST 
end record; 


S Y S_DATE_TIME; 
SYS_OPPLAN; 
SDB~EQUIPMENT; 
SDB EQUIP ARRAY 









DATA BASE: BLUEFOR_CM_EDIT_MENU 
TYPE: FIXED ASCII 


Description 

Description of the walking menu to display when a BLUEFOR control measure is 
selected on the tactical map in a window with edit capability. 


Column 

Field Name 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Control Measure Option 
(SYS_CM_OPTION) 

Character 

16 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: BLUEFOR_CM_VIEW_MENU 
TYPE: FIXED ASCII 


Description 

Description of the walking menu to display when a BLUEFOR control measure is 
selected on the tactical map in a window with view only capability. 


Column 

Eieldjjamg 

Type 

Width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Control Measure Option 

Character 

16 



(SYS_CM_OPTION) 


Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu option Title will cause a blank item in the menu. The first 
record of this file is a comment. 

DATA BASE: BLUEFOR_CURR_AMMO 

TYPE: Ada 


pgggjripUan 

BLUEFOR current ammunition levels. 


type SDB_BLUEFOR_AMMO QTY is 


record 

SDB_UNIT_ID I 

SDb”aMM0~ID : 

SDB~TXMb” : 

SDB~OPPLAN : 

SDB~ON_HAND : 

end record; 


S D B_B LUE rOR_UNIT_ID; 
SDB~BLUEFOR_AMHO_ID f 

sys“date_time; 

SYS~OPPLAN; 

SYS QUANTITY; 


D-17 




DATA BASE: BLUEFOR_CURR_AMMO_INDEX 
TYPES Ada 

Description 

Index file for the BLUEFOR current aimnunition levels data base. 


type SDB_BLUEFOR_AMMO_QTY_PTR 
record 

SDB_UNIT_ID : 

SDB_AHMO_ID : 

SDB_TIME : 

SDB_OPPLAN s 

SDB_RECORD : 

end record; 


is 


SDB_BLUEFOR_UNIT_ID; 
SDB_BLUEFOR_AMMO_ID; 
SYS_DATE_TIME; 
SYS_OPPLAN; 

SYS DB SIZE; 


DATA BASE: BLUEFOR_CURR_EQUIP_INDEX 
TYPE: Ada 


Description 

Index file for the BLUEFOR current equipment levels data base. 


type SDB_BLUEFOR_EQUIP_QTY 
record 

SDB_UNIT_ID : 

SDB_EQUIP_ID : 

SDB_TIME : 

SDB_OPPLAN : 

SDB_RECORD : 

end record; 


PTR is 

SDB__BLUEFOR_UNIT_ID; 
SDB_BLUEFOR_EQUIP_ID 
SYS_DATE_TIME; 
SYS~OPPLAN; 

SYS~DB SIZE; 


DATA BASE: BLUEFOR_CURR_EQUIP 
TYPE: Ada 

B e?cr Ap t .i < ? r ? 

BLUEFOR current equipment levels. 

type SDB_EQUIP_OPER_LIST is array (SDB EQUIPMENT) 

of~SYS QUANTITY; 


type SDB_EQUIP_OPER_REC is 

record 

SDB_UNIT_ID 

SDB~TIME~ 

SDB_SIDE 

SDB~NUMBER_TYPES 
SDB_LIST 
end record; 


: SDB UNIT; 

: SYS~DATE_TIME; 

« SDB_SIDE~TYPE; 

: SDB_EQUIPMENT; 

: SDB EQUIP OPER LIST; 


D-18 







r 


DATA BASES BLUEFOR_EQUIP_SOURCE 
TYPE: VARIABLE ASCII 


Description 

Initial equipment levels for BLUEFOR units. 


Sfiiuffln 

Field Name 

Type 

width 

Pec 

R«£<2ESL1. 

14 

Unit Name 

Character 

12 


35 

Number of Equipment Types 

Numeric 

2 

0 

Record 2 
15 

■IBaaiBl 

Equipment Name 

Character 

12 


30 

Authorized Amount 

Numeric 

5 

0 

40 

operational Amount 

Numeric 

5 

0 


Mote: The Equip records must immediately follow the unit record. The number 
of equip records must equal the number of equipment types in the Unit record. 
A date/time record is used to assign a date/time to the ammunition data. 
Formats *ddhhmm mon starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by two comment records. 


DATA BASE: BLUEFOR_EQUIP_TRACK 
TYPE: FIXED ASCII 


Pepc ri p t jff a 

List of BLUEFOR equipment types to include in the graphical unit status 


report. 




Column 

Field Name 

TYPe 

Width 

1 

Equipment Name 

Character 

12 

15 

Equipment Category 

C3_SYSTEM 

PACING_ITEM 

SUPPORT SYSTEM 

OTHER ITEM 

character 

14 


Note: The first record on this file is a comment. 







D-19 







DATA BASE: BLUEFOR_FUEL 
TYPE: Ada 


Description 

BLUEFOR authorized and current fuel levels. 


type SDB_FUELS is 
record 

SDB_UNIT_ID 
SDB_TIME 
SDB_OPPLAN 
SDB_MOGAS_REQ 
SDB~MOGAS_ON_HAND 
SDB_AVGAS_REQ 
SDB_AVGAS~ON_HAND 
SDB_DIESEL_REQ 
SDB_DIESEL_ON_HAND 
end record; 


SDB_BLUEFOR_UNIT_ID; 
S YS_DATE_TIKE; 

SYS_OPPLAN; 
SYS_QUANTITY range 
SYS_QUANTITY range 
sys_quantity range 
SYS_QUANTXTY range 
SYS_QUANTITY range 
SYS_QUANTITY range 


0 . 

0 . 

0 . 

0 . 

0 . 

0. 


.999999; 

.999999; 

.999999; 

.999999; 

.999999; 

.999999; 


DATA BASE: BLUEFOR_FUEL_INDEX 
TYPE: Ada 


Description 

index file for the BLUEFOR fuel level data base. 

type SDB_BLUEFOR_FUEL_PTR is 
record 

SDB_UNIT_ID S SDB_BLUEFOR_UNIT_ID; 

SDB~TIME : S Y S_DATE_T I ME; ~ 

SDB_OPPLAN : SYS_OPPLAK; 

SDB~RECORD : SYS_DB_SIZE; 

end record; 


D-20 








DATA BASE: BLUEFOR_FUEL_ 

SOURCE 



TYPE: FIXED ASCII 

Descriotion 

Initial fuel levels for BLUEFOR units. 

column Field Name 

Type 

Width 

Dec 

7 

Unit Name 

character 

12 


22 

Authorized Diesel 

Numeric 

6 

0 

30 

Current Diesel 

Numeric 

6 

0 

39 

Authorized MOGAS 

Numeric 

6 

0 

47 

Current MOGAS 

Numeric 

6 

0 

56 

Authorized AVGAS 

Numeric 

6 

0 

64 

Current AVGAS 

Numeric 

6 

0 


Note: A date/time record is used to assign a date/time to the fuel data. 
Format: *DDHHMM mon starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by two comment records. 


DATA BASE: BLUEFOR_OBS_EDIT_MENU 
TYPE: FIXED ASCII 


Degcxie ti an 

Description of the walking menu to display when a BLUEFOR obstacle is selected 
on the tactical map in a window with view only capability. 


column 

Ei&ld 

Tvoe 

width 

Dec 

3 

Menu option Title 

Character 

20 


35 

obstacle Option (SYS_OBS_OPTION) 

Character 

15 



Note: Submenu Menu option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: BLUEFOR_OBS_VIEW_MENU 
TYPE: FIXED ASCII 


PfrSgrlPUPD 

Description of the walking menu to display when a BLUEFOR obstacle is selected 
on the tactical map in a window with edit capability. 


D-21 



Column 

Field Name 

Type 

Width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Obstacle Option (SYS_OBS_OPTION) 

character 

15 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: BLUEFOR_ORGANIC_TASK_ORG 
TYPE: FIXED ASCII 


Description 

organic task organization for the BLUEFOR units. 

Column Field Name Type Width Dec 

1 Unit Name Character 12 

31 -TOP" if the unit is to be Character 3 

included in the Top Unit menu in 
the task organization tool 

Note: Subordinate unit names must be indented 2 spaces from their parent units 

name. 


DATA BASE: BLUEFOR_PERSONNEL 
TYPE: Ada 


peg£ripU<?n 

BLUEFOR authorized and current personnel levels. 


type SDB_PERSONNEL is 
record 

SDB_UNIT_ID 
SDB_TIME 
SDB_OPPLAN 
SDB_OFFICERS_AUTH 
SDB_OFFICERS_CURR 
SD8_ENLISTED_AUTH 
SDB_ENLISTED_CURR 
end record; 


SDB BLUEFOR UNIT ID; 


SYS_DATE TIME; 
SYS_OPPLAN; 
SYS_QUANTITY 
SYS~QUANTITY 
SYS~QUANTITY 
SYS _ QUANTITY 


range 0..9999; 
range 0..9999; 
range 0..999999; 
range 0..999999; 





DATA BASE: BLUEFOR_PERSONNEL_INDEX 
TYPE: Ada 


Description 

Index file for the BLUEFOR personnel level data base. 

type SDB_BLUEFOR_PERS_PTR is 
record 

SDB_UNIT_ID 
SDB_TIME 
SDB_OPPLAN 
SDB_RECORD 
end record; 


DATA BASE: BLUEFOR_PERSONNEL__SOURCE 
TYPE: FIXED ASCII 


SDB_BLUEFOR_UNIT_ID; 

SYS_DATE_TIME; 

SYS_OPPLAN; 

SYS DB SIZE; 


Description 

Initial personnel levels for BLUEFOR units. 


Column 

Field Name 


Type 

Width 

Dec 

14 

Unit Name 


Character 

12 


34 

Authorized officers 


Numeric 

4 

0 

46 

Authorized Enlisted 


Numeric 

4 

0 

59 

Current officers 


Numeric 

4 

0 

71 

Current Enlisted 


Numeric 

4 

0 

Note: A date/time record is used 
Format: *DDHHMM MON starting in 
date/time record is followed by 

i to assign 
column 1. 
two comment 

a date/time to the 
(Example: *021800 
records. 

personnel 
SEP). The 

data. 


DATA BASE: 

BLUEFOR_TASK_ORG_SOURCE 




TYPE: VARIABLE 

ASCII 



B&asriptlpn 

Initial task organization and status for the BLUEFOR units. 



Column 

field Name 


Type 

Width 

Dec 

Record 1 

l Echelon Countl 





1 

Echelon count 


Numeric 

3 

0 

Record 2 

(Echelon Name) 





1 

Echelon Name 


Character 

20 



D-23 





r 


Record 3 (Unit! 


1 

Unit Name 

Character 

12 

25 

Echelon 

Character 

6 

34 

unit Type 

Character 

-6 

42 

Battle Function 

Character 

6 

51 

Activity 

Character 

6 

61 

Mission 

Character 

6 

70 

Relationship 

Character 

6 


Note: The Echelon Name records must appear directly after the Echelon Count 
Record. Each subsequent echelon record must be indented 2 spaces from the 
previous one. Subordinate unit names in the unit record must be indented 2 
spaces from their parent units name. A date/time record is used to assign a 
date/time to the task organization data. Format: *DDHHMM HON starting in 
column 1. (Example: *021800 SEP). The date/time record is followed by one 
comment record and the Echelon Count and Echelon Name records. 


DATA BASE: BLUEFOR_UNIT_CONVERT 
TYPE: Ada 


Description 

Data base to convert BX.UEFOR unit names to unit numbers. 

type BLUE_ORGANIC_UNIT is 
record 

OLD_ID : SDB_BLUEFOR_UNIT_ID; 

NEW_ID : SDB_BLUEFOR_UNIT_ID; 

NAME : string (SDB_UNIT_NAKE_LEN); 

end record; 


DATA BASE: BLUEFOR_UNIT_LOC_INDEX 
TYPE: Ada 


Pfeffcgiptlco 

Index file for the BLUEFOR unit location data baae. 


type SDB_BLUEFOR_LOCATION_PTR is 
record 


SDB_UNIT ID : 

SDBJTIME - : 

SDB_OPPLAN : 

SDB~RZCORD : 

end record; 


SDB_BLUEFOR_UNIT ID; 
SYS~DATE__TIME; ~ 
SYS_OPPLAN; 

SYS~DB SIZE; 


D-24 




DATA BASE: BLUEFOR_UNIT_LOC_SOURCE 
TYPE: FIXED ASCII 

Description 

initial unit locations for the BLUEFOR unitB. 


Column 

Field Name 

Type 

Width 

Dec 

14 

Unit Name 

Character 

12 


36 

UTM Letters 

Character 

2 


38 

UTM X Coordinate 

Numeric 

3 

0 

41 

UTM Y coordinate 

Numeric 

3 

0 


Note: A date/time record is used to assign a date/time to the unit location 
data. Format: *DDHHMM MON starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by two comment records. 


DATA BASE: BLUEFOR_UNIT_LOC 
TYPE: Ada 


Description 

bluefor unit location data base. 


type SDB_UNIT_LOCATION is 
record 

SDB_UNIT_ID : 

SDBJTIME - : 

SDB_OPPLAN : 

SDB_LOCATION : 

end record; 


SDB_UNIT; 

SYS_DATZ_TIME; 

SYS_OPPLAN; 

SDB LOCATION_REC; 


DATA BASE: BLUEFOR_UNIT_EDIT_MENU 
TYPE: FIXED ASCII 


BfiaacipUan 

Description of the walking menu to display when a BLUEFOR unit is selected on 
a tactical map in a window with edit capability. 


salmon 

Field Name 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Unit Option <SYS_UNIT_OPTION) 

Character 

15 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


D-25 



DATA BASE: BLUEFOR_UNIT_NAME 
TYPE: DELIMITED ASCII 


Description 

List of the BLUEFOR unit names. This file 
transactions in the situation recorded data 


is used to 


assign names to the uni 


EigAd f Field Marne 

* Unit Number 

2 Unit Name 


Type 

Numeric 

Character 


DATA BASE: BLUEFOR__UNIT__STATUS 
TYPE: Ada 


Descript i on 
bluefor unit status. 

type SDB_BLUE_UNIT STATUS is 

record 

SDB_UNIT_ID : 

SDBJTIME • 

SDB_OPPLAN : 

SDBNAME . 

SDB_ECHELON : 

SDB_TYPE : 

SDB_BATTLE FUNC : 

SDB_TO_RELATE ; 

SDB_PARENT • 

SDB_HIGHER__ECH : 
SDB_NEXT_SIBLING : 
SDB_ASSET_SIBLING : 
SDB_FIRST_CHILD : 
SDB_ACTIVITY • 

SDB_MISSION : 

end record; 


SDB_BLUEFOR_UNIT_ID; 
SYS_DATE TIME; ~ 
SYS~OPPLAN; 

string (sdb_unit name len> ; 
SDBJTORCE ECHELON; ~ 
SDB__UNIT_TYPE; 
SDB_BATTLE_FUNCTION; 
SDB_BLUEFOR_TO_RELATE; 
SDB_BLUEFOR~UNIT_ID; 
SDB_BLUEFOR_UNIT_ID; 
SDB__BLUEFOR~ UNIT_ID ; 
SDB~BLUEFOR~UNIT_ID; 

SDBjBLUEFOR_UNIT_ID; 
SDB_FORCE_ACTIVITY; 
SDB_FORCe2mISSION; 


D-26 





DATA BASE: BLUEFOR_UNIT_STATUS_INDEX 
TYPE: Ada 


Description 

Index file for the BLUEFOR unit status data base. 

type SDB_BLUEFOR_STATUS_PTR is 
record 

S DB_UNIT_ID : SDB_BLUEFOR_UNIT_ID; 

SDB_TIME : SYS_DATE_TIME; 

SDB_OPPLAN : SYS_OPPLAN; 

SDB_RECORD : SYS_DB_SIZE; 

end record; 


DATA BASE: BLUEFOR_UNIT_VIEW_MENU 
TYPE: FIXED ASCII 


Description 

Description of the walking menu to display when a BLUEFOR unit is selected on 
the tactical map in a window with view only capability. 


Column 

Field Name 

Type 

Width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Unit Option (SYS_UNIT_OPTlON) 

character 

15 



Note: submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: C2JPRODUCT 
TYPE: Ada 


P^sprApUon 

Command and control product data base. Includes the products in the view 
situation, build and view message windows. 

type CDB_PRODUCT_TYPE is 
record 

CDB_REPT NUMBER_CHAR : SYS_PRODUCT_LENGTB range 0.. 

CDB_PRODUCT_SIZE; 

CDB_PRODUCT_TEXT : String (1..CDB_PRODUCT_SIZE); 

end record; 


D-27 






DATA BASE: C2 PRODUCT DESC 


TYPES Ada 

Description 

Command and control product description data base. This data base irdicates 
which record from the C2_PR0DUCT data base to use for a product. 


type CDB_PRODUCT_DESC_TYPE is 

record 

CDB_PRODUCT_CAT s 

CDB~PRODUCT_HDR_START : 

CDB_PRODUCT_HDR_END : 

CDB_PRODUCT_START : 

CDB_PRODUCT_END s 

CDB~PRODUCT_DATE s 

CDB_PRODUCT_OPPLAN S 

end record; 


SYS_PRODUCT_CAT; 
CDB~NUM_HEADER_REC; 

cdb“num_header”rec; 
cdb“num_product_rec; 

CDB~NUM_PRODUCT~REC; 

sys“date_time; 

SYS OPPLAN; 


DATA BASE; C2 PRODUCT HEADER 


TYPES Ada 


Description 

Command and control report headers. The report headers only applies to those 
products in the view situation window. 

type CDB_HEADER_TYPE is 
record 

CDB_HEAD_NUMBER_CHAR ; SYS_HEADER_LENGTH range 0.. 

CDB_HEADER_SIZE; 

cdb_header_text : string ( i.7cdb_header_size) ; 

end record; 


DATA BASE: C2_PRODUCT_NAME 
TYPE: DELIMITED ASCII 

Description 

List of the command and control product names. This file is used to assign 
names to the command and control transactions in the C2 product recorded data. 


Field. » 

Field Name 

Type 

1 

Report Number 

Numeric 

2 

Functional Area 

Character 

3 

Data Category 

Character 

4 

Date Element 

Character 

5 

Level of detail (D»Detail; 
A«Aggregate; s*Sununary) 

Character 

6 

Date/Time 

Character 


D-28 





DATA BASES C2_PRODUCT_RECORD 
TYPE: BINARY 


Description 

Command and control data recording transactions. 

This data base contains binary images of the messages in MSG_c 2_RECORD_LIST. 
The message type is contained in MSG_RECORD_TYPE and the length is in 
msg_bytes_in_msg. The uux_io utilities should be used to interact with this 
data base. 


DATA BASE: C2 PRODUCT SOURCE 


TYPE: VARIABLE ASCII 

Description 

Description of the command and control products to include in the view 
situation and build windows. 


Column 


Record 1 (Functional Areal 

1 Slash "/• 

2 -F" 

3 Window Display code 

1 = view situation 

2 “ Build 

3 ■ view situation and Build 


4 Routing Code 

1 - G2 

2 - G3 

3 = G2 t G3 

4 ■ G4 

5 * G2 ( G4 

6 - G3 t G4 

7 - G2, G3, t G4 

5 Functional Area Title 


Type 


Width Dec 


character 

Character 

Numeric 


1 

1 

1 0 


Numeric 


1 0 


Character 20 


Record 2 (Data Category) 

1 Slash "/" Character 1 

2 *C" Character 1 

3 Window Display Code Numeric 1 0 

1 * View situation 

2 - Build 

3 - View Situation and Build 


D-29 






4 


Numeric 


1 


0 


Routing code 

1 - G2 

2 • G3 

3 = G2 4 G3 

4 - G4 

5 » G2 4 G4 

6 = G3 4 G4 

7 = G2, G3, 4 G4 

5 Data category Title 


Character 20 


Record 3 

(Data Element) 



1 

Slash 

Character 

1 

2 

"E" 

character 

1 

3 

Window Display Code 

1 = view situation 

2 *> Build 

3 » view situation and Build 

Numeric 

1 

4 

Routing Code 

1 = G2 

2 » G3 

3 ■ G2 4 G3 

4 • 64 

5 * G2 4 G4 

6 » G3 4 G4 

7 * G2, G3, 4 G4 

Numeric 

1 

5 

Level of Detail (D=Detail, 
A=Aggregate, S^Summary) 

Character 

1 

6 

Colon ":" 

Character 

1 

7 

Data Element Title 

Character 

20 

Record 4 

(Date/Time) 



1 

Slash "/" 

Character 

1 

2 

"D" 

Character 

1 

3 

window Display code 

1 * view situation 

2 ■ Build 

3 » View situation and Build 

Numeric 

1 

4 

Routing code 

1 - G2 

2 - G3 

3 * G2 4 G3 

4 « G4 

5 - G2 4 G4 

6 » G3 4 G4 

7 - G2, G3 f 4 G4 

Numeric 

1 


D-30 





5 


Date/Time (Format ddhhmm non 
Example: 021800 SEP) 


Character 


10 


Record 5 /Report Header) 

1 Percent sign 

2 Report Header Line 

Record 6 t Report ) 

1 Textual Report Line 

Record 7 (Computer Generated Report) 

1 Dollar Sign *$" 

2 Report Type 

1 * Task Organization 

2 « Personnel Strengths 

3 * OPFOR committed 

4 * OPFOR Reinforcements 

5 * Equipment Status 

6 « Class III Status 

7 * Class V status 

8 » Tactical Map 


3 

4 

5 

6 


Comma "," 

Force (RED , or BLUE) 
Comma ■," 

Unit Name 


Character 

Character 

Character 

Character 

Numeric 


Character 

Character 

Character 

Character 


1 

80 

80 

1 

1 


1 

4 

1 

12 


Note: The Functional Area, Data Category, Data Element, and Date/Time records 
are used to build the product selection walking menu description files for the 
view situation and build windows. 


DATA BASE: CNTRL_MSR_POINT 
TYPE: Ada 


Description 

Point control measures. 


type SDB_CNTRL_MSR_POINT_REC 
record 

SDB_XD : 

SDB OPPLAN : 

SDB_NAME : 

SDB_SIDE : 

SDB~OWNER_BLUE : 

SDb“oWNEr“OPFOR : 

SDBJPYPE ” 

SDBJLOCATION TYPE : 

SD8~SCALE ~ : 

SDB STATUS : 


is 

S D B_C ON TROL_MEAS URE_I D; 

SYS OPPLAN ~ 

string (SDB_CNTL_MSR_NAME_LEN); 
SDB SIDE_TYPE; 
SDB~BLUEFOR_UNIT_ID; 

SDB~OPFOR UNIT_ID; 

SDB CONTROL_MEASURE_TYPE; 
SDB~CONTROL~MEASURE~LOC_TYPE; 
SDB_CONTROL~MEASURE SCALES; 

SDB CONTROL MEASURE~STATUS; 


D-31 







SDB_EFF_FROM_DATE 

sdb_effjt°_date 

SDB~LABEL_ECHELON 
SDB_LOCATION 
end record; 


SYS_DATE_TIME} 
SYS_DATE_TIME; 
SDB_FORCE_ECHELON; 
SDB LOCATION REC; 


DATA BASE: CNTRL_MSR_POINT_INDEX 
TYPE: Ada 


Description 

Index file for the point control measure data base. 


type SDB_CNTRL_MSR_POINT_PTR is 
record 

SDB_CNTRL_MSR_ID : 
SDB_OPPLAN : 

SDB_EFF_FROM : 

SDB_EFF_TO : 

SDB_RECORD : 

end record; 


SDB_CONTROL_MEASURE_ID; 
SYS_OPPLAN; 
SYS_DATE_TIME; 
SYS_DATE_TIME; 

SYS DB SIZE; 


DATA BASE: CNTRL HSR POINT NAME 


TYPE: DELIMITED ASCII 


Description 

List of the point control measure names. This file is used to assiqn names to 
the point control measure transactions in the situation recorded data. 


Field ♦ Field Name 


Type 


1 Point Control Measure Number 


Numeric 


2 Point Control Measure Name 


Character 


DATA BASE: CONTOUR_lTO160 
TYPE: BINARY 


Qs-gcyiptien 

Map contour image file for the 1:160,000 map scale. 

This contour image file is a bitmap contour image. If the bit is on the 
contour is displayed and if the bit is OFF the contour is not displayed. The 
data is organized in column/row order (columns within rows) from northwest to 
southeast with 40 columns and 25 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (640 bytes). 


D-32 







DATA BASE: CONTOUR 1TO400 


TYPE: BINARY 


Description 

Hap contour image file for the 1:400,000 map scale. 

This contour image file is a bitmap contour image. If the bit is ON the 
contour is displayed and if the bit is OFF the contour is not displayed. The 
data is organized in column/row order (columns within rows) from northwest to 
southeast with 16 columns and 10 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (640 bytes). 


DATA BASE: CONTOUR_lTO80 
TYPE: BINARY 

Description 

Map contour image file for the 1:80,000 map scale. 

This contour image file is a bitmap contour image. If the bit is ON the 
contour is displayed and if the bit is OFF the contour is not displayed. The 
data is organized in column/row order (columns within rows) from northwest to 
southeast with 79 columns and 49 rows. Each record is organized in coluron/row 
order from northwest to southeast with 64 columns and 80 rows (640 bytes). 


DATA BASE: CONTOUR_lTO800 
TYPE: BINARY 


Qescyiptjop 

Hap contour image file for the 1:800,000 map scale. 

This contour image file is a bitmap contour image. If the bit is on the 
contour is displayed and if the bit is OFF the contour is not displayed. The 
data is organized in column/row order (columns within rows) from northwest to 
southeast with 8 columns and 6 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (640 bytes). 


DATA BASE: CONTOUR_DESC 
TYPE: FIXED ASCII 


BftggripUon 

Description of the contour files to include in the tactical map system. 


Colwron 



Type 

wi&h 

Dec 

l 

Hap Scale (SYS_MAP_SCALES) 


Character 

9 


12 

Contour description file for 
map scale. 

this 

Character 

50 


Note: The 

first record of this file is a 

comment. 





D-33 


DATA BASE: CONTOUR_DESC_lTO160 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:160,000 contour image file. 


Column 

Field Name 

Type 

Width 

Dec 

Record 1 

(Imaae File! 




1 

Contour image file name for this 

map scale 

Character 

60 


Record 2 

(Data Base sire) 




1 

Number of contour image records in 
the X direction for this map scale 

Numeric 

5 

0 

6 

Number of contour image records in 
the Y direction for this map scale 

Numeric 

5 

0 

Record 3 

(Record sire) 




1 

Number of contour image points in 
a record in the X direction 

Numeric 

5 

0 

6 

Number of contour image points in 
a record in the Y direction 

Numeric 

5 

0 

Record 4 

JData Base Point Sire) 




1 

Number of contour image points in 
the data base in the X direction 

Numeric 

6 

0 

7 

Number of contour image points in 
the data base in the Y direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

LMap oriain) 




4 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the contour 
image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MA00C000 to the 
northwest corner of the contour 
image 

Numeric 

7 

0 

Record 6 

(Grid Interval) 




1 

Grid interval for this map scale 

Numeric 

5 

0 


(in meters) 


D-34 



] 


DATA BASE: CONTOUR_DESC_lTO400 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:400,000 contour inage file. 


Column 

Field Name 

Type 

Width 

Dec 

Record 1 

(Imaqe File! 




1 

Contour image file name for this 
map scale 

Character 

60 


Record 2 

(Data Base size) 




1 

Number of contour image records in 
the X direction for this map scale 

Numeric 

5 

0 

6 

Number of contour image records in 
the Y direction for this map scale 

Numeric 

5 

0 

Record 3 

(Record size! 




1 

Number of contour image points in 
a record in the X direction 

Numeric 

5 

0 

6 

Number of contour image points in 
a record in the Y direction 

Numeric 

5 

0 

Record 4 

(Data Base Point Size) 




1 

Number of contour image points in 
the data base in the X direction 

Numeric 

6 

0 


Number of contour image points in 
the data base in the Y direction 


Numeric 


14 


Number of meters per pixel for 
this map scale 


BfiS9r<i_5 (Hap-Ofigln) 


14 


Number of meters in the X 
direction from MA000000 to the 
northwest corner of the contour 

image 

Number of meters in the Y 
direction from MA000000 to the 
northwest corner of the contour 
image 


Numeric 


Numeric 


Numeric 


Bscgrd-fi. 

1 


(Grid Interval) 

Grid interval for this map scale 
<in meters) 


Numeric 


D-35 




DATA BASE: C0NT0UR_DESC_lT080 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:80,000 contour image file. 


column 

Field Name 

Type 

width 

Dec 

Record 1 

dmaoe File* 




1 

Contour image file name for this 
map scale 

Character 

60 


Record 2 

(Data Base size) 




1 

Number of contour image records in 
the X direction for this map scale 

Numeric 

5 

0 

6 

Number of contour image records in 
the Y direction for this map scale 

Numeric 

5 

0 

Record 3 

(Record size) 




1 

Number of contour image points in 
a record in the X direction 

Numeric 

5 

0 

6 

Number of contour image points in 
a record in the Y direction 

Numeric 

5 

0 

Record 4 

(Data Base Point size) 




1 

Number of contour image points in 
the data base in the X direction 

Numeric 

6 

0 

7 

Number of contour image points in 
the data base in the Y direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(Mao Oricin) 




4 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the contour 
image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MAOOOOOO to the 
northwest corner of the contour 
image 

Numeric 

7 

0 

Record 6 

JGrid Interval) 




1 

Grid interval for this map scale 
(in meters) 

Numeric 

5 

0 



D-36 




DATA BASE: CONTOUR DESC 1TO800 



TYPE: VARIABLE ASCII 


Description 

Description of the 1:800,000 contour image file. 


Column 

Field Name 

Type 

Width 

Dec 

Recor- 1 

(Imaae File* 




1 

Contour image file name for this 
map scale 

Character 

60 


Record 2 

(Data Base Size) 




1 

Number of contour image records in 
the X direction for this map scale 

Numeric 

5 

0 

6 

Number of contour image records in 
the Y direction for this map scale 

Numeric 

5 

0 

Record 3 

(Record size) 




1 

Number of contour image points in 
a record in the X direction 

Numeric 

5 

0 

6 

Number of contour image points in 
a record in the Y direction 

Numeric 

5 

0 

Record 4 

(Data Base Point Size) 




1 

Number of contour image points in 
the data base in the X direction 

Numeric 

6 

0 

7 

Number of contour image points in 
the data base in the Y direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(Hap oriain) 




4 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the contour 
image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MA000000 to the 
northwest corner of the contour 
image 

Numeric 

7 

0 

Record 6 

(Grid Interval) 




1 

Grid interval for this map scale 

Numeric 

5 

0 


(in meters) 



D-37 




•V 


DATA BASE: CONTROL_MEASUR£ 

TYPE: Ada 

Description 
Control measures. 

type SDB_CONTROL_MEASURE_POINTS is array 

(SDB_CONTROL_M£ASURE_PT) of SDB_LOCATION_R£C; 

type S DB_CONTROL_MEASURE_SCALES is array (SYS_MAP_SCALES) of 

BOOLEAN; 


type SDB_CONTROL_M£ASURE_REC 
record 

SDB_ID : 

SDB~OPPLAN : 

SDB_NAME : 

SDB_SIDE : 

SDB_OWNER_BLUE : 
SDB_OWNER_OPFOR : 
SDB_TYPE : 

SDB_LOCATION_TYPE : 
SDB_SCALE : 

SDB_STATUS : 

SDB_EFF_FROM_DATE : 
SDB_EFF_TO_DATE 
SDB_LABEL_ECHELON : 
SDB_NUMBER_POINTS : 
SDB_LOCATION : 

end record; 


is 

SDB__CONTROL_MEASURE_ID ; 

SYS - OPPLAN; 

string (sdb_cntl_msr_name_len) 
SDB__SIDE_TYPE; 
SDB~BLUEFOR_UNIT_ID; 
SDB^OPFOR_UNIT_ID; 

sdb - control_measure_type; 
sdb - control_measure_loc_type; 
sdb - control_measure_scales; 

SDB^CONTROL_MEASURE_STATUS ; 
SYS^DATE_TIME; 

SYS~DATE~TIME; 
SDb'fORCE_ECHELON; 

S DB_CONTROL_M£ASURE_PT; 

SDB CONTROL - MEASURE POINTS; 


DATA BASE: CONTROL_MEASURE_NAME 
TYPE: DELIMITED ASCII 


Description 

List of the control measure names. This file is used to assign names to the 
control measure transactions in the situation recorded data. 


goltfW) 

Field Name 

Type 

1 

Control Measure Number 

Numeric 

2 

Control Measure Name 

Character 


DATA BASE: CONTROL_MEASURE_SOURCE 
TYPE: VARIABLE ASCII 

B&gCfjp.Ugn 

Initial control measures. 

g&lwnn Field Name Type width gee 


D-38 






Record 1 

(CM TvDel 



1 

Control Measure Name 

Character 

12 

14 

Control Measure Type 

Character 

6 

21 

Control Measure Echelon 

Character 

6 

28 

Side (BLUE, RED) 

Character 

4 

33 

Display on 1:40000 map flag (1 - 
Yes, 0 * No) 

Numeric 

1 

34 

Display on 1:80000 map flag (1 - 
Yes, 0 » No) 

Numeric 

1 

35 

Display on 1:160000 map flag (1 * 
Yes, 0 = No) 

Numeric 

1 

36 

Display on 1:400000 map flag (1 * 
Yes, 0 * No) 

Numeric 

1 

37 

Display on 1:800000 map flag (1 » 
Yes, 0 * No) 

Numeric 

1 

Record 2 

(Points 1 - 8) 



1 

UTM coordinate of point 1 

Character 

8 

10 

utm coordinate of point 2 

Character 

8 

19 

UTM coordinate of point 3 

Character 

8 

28 

UTM coordinate of point 4 

Character 

8 

37 

UTM coordinate of point 5 

Character 

8 

46 

UTM coordinate of point 6 

Character 

8 

55 

UTM coordinate of point 7 

Character 

8 

64 

UTM coordinate of point 8 

Character 

8 

Record 3 

(Points 9-15) 



1 

UTM coordinate of point 9 

Character 

8 

10 

UTM coordinate of point 10 

Character 

8 

19 

UTM coordinate of point 11 

Character 

8 

28 

UTM coordinate of point 12 

Character 

8 

37 

UTM coordinate of point 13 

Character 

8 

46 

UTM coordinate of point 14 

Character 

8 

55 

UTM coordinate of point 15 

Character 

8 


0 

0 

0 

0 

0 


D-39 






Note: A date/time record is used to assign a date/time to the control measure 
data. Format: *DDHHMM MON starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by one comment record. 


DATA BASE: CONTROL_MEASURE_INDEX 
TYPE: Ada 


Description 

Index file for the control measure data base. 


type SDB_CONTROL_MEASURE_PTR is 
record 

SDB_CNTRL_MSR_ID : 
SDB~OPPLAN : 

SDB_EFF_FROM s 

SDB_EFF~TO : 

SDB_RECORD ! 

end record; 


SDB_CONTROL_MEASURE_ID; 
SYS_OPPLAN; 

S Y S~DATE_TIME; 
SYS_DATE_TIME; 

SYS DB SIZE; 


DATA BASE: ELEVATION_lTO400 
TYPE: BINARY 


Description 

Elevation file for the 1:400,000 map scale. 

This elevation consists of 16-bit values representing the elevation in meters. 
The data is organized in column/row order (columns within rows) from northwest 
to southeast with 16 columns and 10 rows. Each record is organized in 
column/row order from northwest to southeast with 64 columns and 80 rows 
(10240 bytes). 


DATA BASE: ELEVATTON_DESC_lTO400 
TYPE: VARIABLE ASCII 


pescsipUs n 

Description of the 1:400,000 elevation file. 


Column 

rigid FMie 

Type 

Width 

Pec 

Record 1 

fimaqe File) 




1 

Elevation file name for this map 

scale 

character 

60 


Record 2 

(Data Base Size) 




1 

Number of elevation records in the 

X direction for this map scale 

Numeric 

5 

0 

6 

Number of elevation records in the 

Y direction for this map scale 

Numeric 

5 

0 


D-40 






Numeric 


5 


0 


Record 3 (Record Size) 

1 Number of elevation points in a 

record in the X direction 

6 Number of elevation points in a 
record in the Y direction 

Record 4 ^Data Base Point size) 

1 Number of elevation points in the 

data base in the X direction 

7 Number of elevation points in the 
data base in the Y direction 

14 Number of meters per pixel for 

this map scale 

Record 5 (Hap origin! 

4 Number of meters in the X 

direction from MAO0000 0 to the 
northwest corner of the elevation 

14 Number of meters in the Y 

direction from MA000000 to the 
northwest corner of the elevation 


Numeric 

Numeric 

Numeric 

Numeric 

Numeric 

Numeric 


'5 0 


6 0 

6 0 

7 3 


7 0 


7 0 


DATA BASE: ELEV_BAND_1TO160 
TYPE: BINARY 


Description 

Elevation band image file for the 1:160,000 map scale. 

This elevation banded data base consists of byte values representing the color 
lookup table value to use to represent the elevation bands. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 40 columns and 25 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: ELEV_BAND_lTO400 
TYPE: BINARY 


eg.ssxi.pUgn 

Elevation band image file for the 1:400,000 map scale. 

This elevation banded data base consists of byte values representing the color 
lookup table value to use to represent the elevation bands. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 16 columns and 10 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


D-41 





DATA BASE: ELEV_BAND_lTO80 
TYPE: BINARY 

Description 

Elevation band image file for the 1:80,000 map scale. 

This elevation landed data base consists of byte values representing the color 
lookup table value to use to represent the elevation bands. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 79 columns and 49 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: ELEV_BAND_lT0800 
TYPE: BINARY 


Description 

Elevation band image file for the 1:800,000 map scale. 

This elevation banded data base consists of byte values representing the color 
lookup table value to use to represent the elevation bands. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 8 columns and 6 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: £LEV_BAND_DESC_lTO160 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:160,000 elevation band image file. 


Column 

Field Name 

Type 

width 

Pec 

Record 1 

(Imaae File! 




1 

Elevation banding image file name 
for this map scale 

Character 

60 


Record 2 

(Data Base Size) 




1 

Number of elevation banding image 
records in the X direction for 
this map scale 

Numeric 

5 

0 

6 

Number of elevation banding image 
records in the Y direction for 
this map scale 

Numeric 

5 

0 


D-42 



Record 3 (Record Size) 


X 

Number of elevation banding image 
points in a record in the X 
direction 

Numeric 

5 

0 

6 

Number of elevation banding image 
points in a record in the Y 
direction 

Numeric 

5 

0 

Record 4 

(Data Base point Size) 




1 

Number of elevation banding image 
points in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of elevation banding image 
points in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(Map oriqin) 




4 

Number of meters in the X 
direction from MAOOOOOO to the 
northwest corner of the elevation 
banding image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MAOOOOOO to the 
northwest corner of the elevation 
banding image 

Numeric 

7 

0 

Record 6 

(Grid Interval) 




1 

Grid interval for this map scale 
(in meters) 

Numeric 

5 

0 


DATA BASE: ELEV_BAND_DESC_ 

1TO400 




TYPE: VARIABLE ASCII 




Description 

Description of the 1:400,000 elevation band image 

file. 




field Name 

Type 

Width 

Pec 

Record 1 

(imacre File) 




1 

Elevation banding image file name 
for this map scale 

character 

60 



D-43 






Numeric 


Record 2 (Data Base Size) 

1 Number of elevation banding image 

records in the X direction for 
this map scale 

6 Number of elevation banding image 

records in the Y direction for 
this map scale 

Record 3 /Record Size> 

1 Number of elevation banding image 

points in a record in the X 
direction 

6 Number of elevation banding image 
points in a record in the V 
direction 

Record 4 fData Base Point Size) 

1 Number of elevation banding image 

points in the data base in the X 
direction 

7 Number of elevation banding image 
points in the data base in the Y 
direction 

14 Number of meters per pixel for 

this map scale 

Record 5 (Map Origini 

4 Number of meters in the X 

direction from MA000000 to the 
northwest corner of the elevation 
banding image 

14 Number of meters in the Y 

direction from MA000000 to the 
northwest corner of the elevation 
banding image 

Record 6 (Grid Interval! 

1 Grid interval for this map scale 

(in meters) 


DATA BASE* ELEV_BAND_DESC_ 
TYPE: VARIABLE ASCII 


Numeric 


Numeric 


Numeric 


Numeric 


Numeric 


Numeric 


Numeric 


Numeric 


Numeric 


1TO80 


Description 

Description of the 1:80,000 elevation band image file 






Column 

Field Name 

Type 

Width 

Dec 

Record 

1 (Imaae Filei 




1 

Elevation banding image file name 
for this map scale 

Character 

60 


Record 

2 (Data Base Size) 




1 

Number of elevation banding image 
records in the X direction for 
this map scale 

Numeric 

5 

0 

6 

Number of elevation banding image 
records in the Y direction for 
this map scale 

Numeric 

5 

0 

Record 

3 (Record size) 




1 

Number of elevation banding image 
points in a record in the X 
direction 

Numeric 

5 

0 

6 

Number of elevation banding image 
points in a record in the Y 
direction 

Numeric 

5 

0 

Record t 

1 (Data Base Point Size* 




1 

Number of elevation banding image 
points in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of elevation banding image 
points in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(MaD Oricin) 




4 

Number of meters in the x 
direction from MA000000 to the 
northwest corner of the elevation 
banding image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MAOOOOOO to the 
northwest corner of the elevation 
banding image 

Numeric 

7 

0 

Record 6 

(Grid Interval) 




1 

Grid interval for this map scale 
(in meters) 

Numeric 

5 

0 


D-45 



DATA BASE: ELEV_BAND_DESC_1T0800 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:800,000 elevation band image file. 


Column 

Field Name 

Type 

Record 

1 (Imaae File) 


1 

Elevation banding image file name 
for this map scale 

Character 

Record 

2 (Data Base size) 


1 

Number of elevation banding image 
records in the X direction for 
this map scale 

Numeric 

6 

Number of elevation banding image 
records in the Y direction for 
this map scale 

Numeric 

Record 

3 (Record Size) 


1 

Number of elevation banding image 
points in a record in the X 
direction 

Numeric 

6 

Number of elevation banding image 
points in a record in the Y 
direction 

Numeric 

Record 

4 (Data Base Point Size) 


1 

Number of elevation banding image 
points in the data base in the X 
direction 

Numeric 

7 

Number of elevation banding image 
points in the data base in the Y 
direction 

Numeric 

14 

Number of meters per pixel for 
this map scale 

Numeric 

Record 

4 

-5- IMEl QElaiPl 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the elevation 
banding image 

Numeric 

14 

Number of meters in the Y 
direction from MAOOOOOO to the 
northwest corner of the elevation 
banding image 

Numeric 


Width Dec 


60 


5 0 


5 0 


5 0 


5 0 


6 0 


6 0 


7 3 


7 0 


7 0 


D-46 



Numeric 


5 


0 


Record 6 fGrid Interval) 

1 Grid interval for this map scale 

(in meters) 


DATA BASE: EXP_CONTROL_MENU 
TYPE: FIXED ASCII 


Description 

Description of the experiment control product walking menu. This file is 
created from the product names in the experiment control source file. 


Column 

Field Name 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Experiment control Product Number 

Numeric 

6 

0 


Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: EXP_CONTROL_NAME 
TYPE: DELIMITED ASCII 

Description 

List of the experiment control product names. This file is used to assign 
names to the experiment control transactions in the experiment control 
recorded data. 


Fi.e;d_f 


Type 

1 

Product Number 

Numeric 

2 

Functional Area 

Character 

3 

Data Category 

Character 

4 

Data Element 

Character 

5 

Data Component 

Character 


D-47 



DATA BASES EXP_CONTROL_PARTICIPANT 
TYPE: Ada 


Description 

List of participants that the experimenter can send experiment control 
messages to. 


subtype CTL_PART_NAME_LEN 
subtype CTlfpART_NAMB_TEXT 
type CTL_PART__REC is 
record 

CTL_TEXT s 

CTL_PART : 

end record; 


is INTEGER range 1..10; 
is string (CTL_PART_NAME_LEN); 


CTL_PART_NAME__TEXT ; 
SYs"~PARTI Cl PANTS} 


DATA BASE: EXP_CONTROL_PRODUCT 
TYPE: Ada 


Description 

Experiment control products. 

type CTL_PRODUCT_TYPE is 
record 

CTL_R£PT_NUMBER_CHAR 

CTL_PRODUCT_TEXT 
end record; 


SYS_PRODUCT_LENGTH range 0.. 

CTL~PRODUCT_SIZE; 

string (1 ..ctlproductjsize); 


DATA BASE: EXP_CONTROL_PROD_DESC 
TYPE: Ada 


Description 

Experiment control product description data base. This data base indicates 
which record from the experiment control data base to use for a product. 


type CTL_PRODUCT_DESC_TYPE 
record 

CTL_PRODUCT_TYPE 
CTL~PRODUCT_START 
CTL_PRODUCT~END 
CTL_PRODUCT~DATE 
end record; 


is 

: SYS_PRODUCT; 

: CTL_NUM_PRODUCT_R£C 

: CTL~NUH~PRODUCT_R£C 

: SYS”*DATE TIME; “ 


DATA BASE: EXP_CONTROL_R£CORD 
TYPE: BINARY 


BaiaxiE^ian 

Experiment control data recording transactions. 


D-48 



This data base contains binary images of the messages in MSG_EC_RECORD_LIST. 
The message type is contained in MSG_R£CORD_TYPE and the length is in 
MSG_BYTES_IN_MSG. The uux_IO utilities should be used to interact with this 
data base. 


DATA BASE: EXP_CONTROL_SOURCE 
TYPE: VARIABLE ASCII 


Description 

Description of the products to include in the experiment control window. 


column 

Field Name 

Type 

width 

Dec 

Record 1 

(Functional Area) 




1 

slash ■/" 

character 

1 


2 

"F" 

Character 

1 


3 

Message Type Code 

1 * Informative 

2 ■ Requires Answer 

Numeric 

1 

0 

4 

Functional Area Title 

Character 

20 


Record 2 

(Data Cateaorv) 




1 

Slash "/" 

character 

1 


2 

"C" 

character 

1 


3 

Message Type Code 

1 ■ Informative 

2 - Requires Answer 

Numeric 

1 

0 

4 

Data category Title 

Character 

20 


Record 3 

(Data Element) 




1 

slash "/" 

Character 

1 


2 

•E" 

Character 

1 


3 

Message Type Code 

1 ■ Informative 

2 ■ Requires Answer 

Numeric 

1 

0 

4 

Data Element Title 

Character 

20 



D-49 




Record 4 (Data Component) 


1 

Slash 

Character 

1 

2 

«D« 

Character 

1 

3 

Message Type Code 

1 * Informative 

2 « Requires Answer 

Numeric 

1 . 0 

4 

Data Component Title 

Character 

20 

Record 5 

(Reporti 



1 

Textual Report Line 

Character 

80 

Note: The Functional Area, Data category. Data Element, and 
records are used to build the product selection walking menu 
for the experimenter’s experiment control window. 

Data Component 
description files 


DATA BASE: FORM 

DESCRIPTION 



TYPE: VARIABLE ASCII 


Description 

Description and layout of EDDIC form. 


The EDDIC Forma Manager shall accept a ASCII buffer that contains the 
static text, editor descriptors, and line, box, and circle descriptors. The 
first part of the buffer describes the static text and the location of the 
editors. The second section of the buffer contains the description of the 
geometric symbols to include in the form. The last part of the buffer 
describes the editors being used. 

The static text is identified by a vertical bar '|* and Bhould be typed 
in just as it is to appear in the form. The editors are identified by a 
backslash '\' followed by a unique identifier and terminated by a space. The 
identifier must be the same as in the editor description section. The editor 
will be located where the identifier is located in the static text. The 
static text section is terminated by line containing only a period '.'. 

The geometric symbol section describes the type, size, and location of 
the geometric symbols to include in the form. The geometric symbol locations 
are in pixels from the upper left corner of the form, only one symbol can be 
defined per line in the buffer. The geometric symbol section is terminated 
by line containing only a period '.'. The following describes the available 
geometric symbols and the parameters for each. 

LINE - Line described by two end points 


1 

2 

3 

4 

5 


BaiffiElaUfln 

Starting X location in pixels 
Starting Y location in pixels 
Ending x location in pixels 
Ending Y location in pixels 
Width of the line in pixels 


D-50 



BOX - Box described by two corners 


Parameter 

1 

2 

3 

4 

5 


Description 

Starting corner X location in pixels 
starting corner Y location in pixels 
Ending corner X location in pixels 
Ending corner Y location in pixels 
Width of the line in pixels 


CIRCLE - Cirlce described by a center point and radius 


Parameter 

1 

2 

3 

4 


Description 

Center X location in pixels 
center Y location in pixels 
Radius in pixels 
width of the line in pixels 


The editor description section shall describe each editor identifier 
that is used in the static text section. Each Editor Descriptor is started 
and terminated by a backslash The descriptor contains the editor type 

followed by parameters required to define the editor. Editor parameters are 
separated by a comma and default values will be provided for parameters not 
provided. The following describes the available editors and the parameters 
for each (default values are enclosed in brackets []): 


MEMOJTEXT - Full page text editor 


Parameter 

1 

2 

3 

4 


Description 

width of Memo Editor in character positions [80] 
Height of Memo Editor in character positions [24] 
Read-only attribute (ON-Read Only, [OFF]»Read/Write) 
Memo Editor Initial text 


NUMERIC FIELD - Numeric field editor 


Parameter 

1 

2 

3 

4 

5 


pqscrlptisn 

Width of Numeric Editor 
Numeric Field Title 
Numeric Field Initial Value 
Minimum Value 
Maximum Value 


STRING_FIELD - string field editor 


1 

2 

3 


BaMSXiBSian 

width of string Editor 
string Field Title 
String Field initial Value 


radIo_button - one of a series of buttons that are logically 

connected in a way that only one is on at a time. 


fflgflfftttr 

1 

2 


Description 

initial State of button (ON, OFF) 
Identification of next related radio button 


D-51 



(Null «■ End of list) 


PUSH BUTTON - Push Button Editor. 


Parameter 

1 

2 


3,4..etc 


pestyj-ptign 

Number of Columns to uae for the Buttons 
Index into list of pushbuttons for the default 
(-1 - No Default) 

Title to display for each button 


checklist - one of a series of buttons that are logically 

connected in a way that none to all on at a time. 

Description 

Initial State of button (ON, OFT) 

Identification of next related checklist button 
(Null ** End of list) 

button_walk - Walking Menu initiated by a button 


Parameter 

1 

2 


Parameter 

1 

2.4.. etc 

3.5.. etc 


Description 
Button Title 

Title to display in the walking menu (1 per line 
with single character indentation for submenus) 
Value to return for this selection 


FORM_walk - Walking Menu initiated by right button on the form 


Parameter 

1 

2,4..etc 


3,5..etc 


Description 
Menu Title 

Title to display in the walking menu (1 per line 
with single character indentation for submenus) 
value to return for this selection 


MULTIple_select_menu - Menu where multiple selections can be made 


Parameter 

1 

2 


3.5.. etc 

4.6.. etc 


Description 
Menu Title 

Number of menu options to display at a time 

(If there are more menu options than this 
amount, a scroll bar will be displayed) 
Menu Option label 

Menu Option initial status (ON, OFT) 


single_select_menu - Menu where only single selection can be made 


Parameter 

1 

2 


3,4..etc 
n+1 


Description 
Menu Title 

Number of menu options to display at a time 

(if there are more menu options than this 
amount, a scroll bar will be displayed) 
Menu Option label 

Index into to options for the default selection 


DIGITAL MAP 


D-52 



Parameter 

1 

2 

3 

4 

5 

6 

7 

8 

9 

10 
11 
12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29 

30 

31 

32 

33 

34 

35 

36 

37 

38 

39 

40 

41 

42 

43 

44 

45 

46 

47 

48 

49 

50 

51 

52 

53 

54 

55 


Description 

Width of Digital Map in character positions 
Height of Digital Map in character positions 
Date Time of situation data 


opplan Number [0] 

Background Type [vegetation] 

Map Scale [1:160000] 

Grid Status ([0]«Off; 1-on) 

Contour status ([0]-off; 1-on) 

X Map Center 
Y Map Center 

BLUEFOR unit Division status ([0]-Off; 1-On) 

BLUEFOR Unit Brigade Status ([0]-Off; 1-On) 

BLUEFOR Unit Battalion Status ([0]-Offj 1-on) 
BLUEFOR Unit Company Status ([0]»off; 1-on) 

BLUEFOR Unit Combat Status ([0]-off; 1-On) 

BLUEFOR Unit Combat Support Status ([0]-off; l=On) 
BLUEFOR Unit css Status ([0]-off; 1-on) 

BLUEFOR Unit Name Status ([0]=Off; 1-On) 

BLUEFOR Unit Symbol status ([0]=off; l=On) 

BLUEFOR Cntrl Msr Points Status ([0]-off; l=On) 
BLUEFOR Cntrl Msr Lines status <[0]-off; l=on) 
BLUEFOR Cntrl Msr Areas Status ([0]-off; 1-on) 
BLUEFOR Cntrl Msr Routes Status ([0]-off; 1-On) 
bluefor Obstacle status ([0]-off; 1-on) 

BLUEFOR Cntrl Mar Crossings Status ([0]-off; 1-on) 
BLUEFOR Cntrl Msr Fire Plan Status ([0]=Off; l=on) 
bluefor cntrl Msr Map Feature Status ([0]=off; l=on) 
BLUEFOR cntrl Msr EAC Status ([0]-off; 1-on) 

BLUEFOR cntrl Msr Corps Status ([0]-off; 1-On) 
BLUEFOR Cntrl Msr Division status ([0]-off; 1-on) 
BLUEFOR Cntrl Msr Brigade Status ([0]=off; 1-on) 
BLUEFOR Cntrl Msr Battalion Status ([0]«off; l=On) 
BLUEFOR Cntrl Msr Company Status ([0]-off; 1-on) 
opfor unit Division Status ([0]-off; 1-on) 

OPFOR unit Regiment Status <[0]-off; 1-on) 

OPFOR Unit Battalion Status ([0]-off; 1-on) 

OPFOR Unit Company Status ([0]-Off; 1-On) 

OPFOR Unit Committed Status ([0]-off; 1-on) 

OPFOR Unit Reinforcing Status ([0]»off; 1-On) 

OPFOR Unit Artillery status ([0]*off; 1-On) 

OPFOR unit Name Status {[0]-off; 1-On) 

OPFOR unit Symbol status ([0]-Off; 1-On) 

OPFOR cntrl Msr Points status ([0]«off; 1-on) 

OPFOR cntrl Msr Lines Status ([0]-off; 1-on) 

OPFOR cntrl Msr Areas Status ([0}-off; l»On) 

OPFOR cntrl Msr Routes status ((0]«off; 1-On) 

OPFOR Obstacle status ([0]-off; 1-on) 

OPFOR Cntrl Msr crossings status ([0]-off; 1-on) 
OPFOR cntrl Msr Fire Plan Status ([0]-off; 1-on) 
OPFOR cntrl Msr Map Feature Status ([0]-off; 1-on) 
OPFOR cntrl Msr Army status ([0]»off; 1-on) 

OPFOR cntrl Msr Division Status ([0]-off; 1-on) 

OPFOR cntrl Msr Regiment Status ([0]-off; 1-on) 

OPFOR cntrl Msr Battalion status ((0]-off; 1-on) 
OPFOR cntrl Msr company status ([0]-off; 1-on) 


D-53 



56 Map Option File Name [/edata/maps/menu/map.view] 

57 BLUEFOR Unit Option File Name 

[/edata/maps/menu/blue_unit.view] 

58 BLUEFOR Control Measure option File Name 

[/edata/maps/menu/blue_cm.view] 

59 BLUEFOR obstacle Option File Name 

[/edata/maps/menu/blue_obs.view] 

60 OPFOR Unit option File Name 

[/edata/mapa/menu/opfor_unit.view] 

61 OPFOR control Measure Option File Name 

[/edata/maps/menu/opfor_cm.view] 

62 OPFOR obstacle Option File Name 

[/edata/maps/menu/opfor_obs.view] 


DATA BASE: G2_BUILD_MENU 
TYPE: 


Description 

Description of the build product walking menu for the g 2 workstation. This 
file is created from the command and control product source file. 


DATA BASE: G2_REFERENCE_MENU 
TYPE: FIXED ASCII 


Description 

Description of the reference product walking menu for the G2 workstation. 
This file is created from the reference product source file. 


Column 

Field Name 

Type 

Width 

Dec 

3 

Menu option Title 

character 

20 


35 

Reference Product Number 

Numeric 

6 



Note: submenu Menu option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"? H as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: G2_VIEW_C2_MENU 
TYPE: FIXED ASCII 


PeasripUop 

Description of the view situation product walking menu for the G2 workstation. 
This file is created from the command and control product source file. 


Qsdiim Field Name 

3 Menu Option Title 


Type Width Dec 


Character 


20 






35 


C2 Product Number 


Numeric 


6 


Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: G3_BUILD_MENU 
TYPE: FIXED ASCII 


Description 

Description of the build product walking menu for the G3 workstation. This 
file is created from the command and control product source file. 


Column 

Field Name 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

C2 Product Number 

Numeric 

6 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. UBing a question mark 
as the Menu option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: G3_REFERENCB_MENU 
TYPE: FIXED ASCII 


Description 

Description of the reference product walking menu for the G3 workstation. 
This file is created from the reference product source file. 


Column 

Field Name 

Type 

width 

Dec 

3 

Menu option Title 

Character 

20 


35 

Reference Product Number 

Numeric 

6 



Note: Submenu Menu option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: G3_VIEW_C2_MENU 
TYPE: FIXED ASCII 


Description 

Description of the view situation product walking menu for the G3 workstation. 
This file is created from the commend and control product source file. 


D-55 




Column 

Field Name 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

C2 Product Number 

Numeric 

6 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: G4_BUILD_MENU 
TYPE: FIXED ASCII 


Description 

Description of the build product walking menu for the G4 workstation. This 
file is created from the command and control product source file. 


Column 

Field Name 

Type 

Width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

C2 Product Number 

Numeric 

6 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: G4_R£F£RENCE_MENU 
TYPE: FIXED ASCII 


Description 

Description of the reference product walking menu for the G4 workstation. 
This file is created from the reference product source file. 


Column 

Field Name 

Type 

Width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Reference product Number 

Numeric 

6 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: G4_VIEW_C2_KENU 
TYPE: FIXED ASCII 


D-56 




Description 

Description of the view situation product walking menu for the G4 workstation. 


This file 

is created from the 

command and control product source 

file. 


Column 

Field Name 

Type 

width 

Pec 

3 

Menu Option Title 

Character 

20 


35 

C2 Product Number 

Numeric 

6 



Note: submenu Henu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: HELP_MENU 
TYPE: FIXED ASCII 


Description 

Description of the help product walking menu, 
help product source file. 

Column Field Name 

3 Menu Option Title 

35 Help Product Number 


This file is created from the 


Type 

Character 

Numeric 


Width Dec 

20 
6 


Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: HELP_NAME 
TYPE: DELIMITED ASCII 

peasripUon 

List of the help product names. This file is used to assign names to the help 
transactions in the reference recorded data. 


rtaid » 

field Name 

Type 

l 

Product Number 

Numeric 

2 

Functional Area 

Character 

3 

Data Category 

Character 

4 

Data Element 

Character 


D-57 



DATA BASE: HELP_PROD_DESC 
TYPE: Ada 


Description 

Help product description data base. This data base indicates which record 
from the help product data base to use for a product. 


type HDB_PRODUCT_DESC_TYPE is 
record 

HDBJPRODUCT_CAT : 

HDB~PRODUCT_START : 

HDB_PRODUCT~END : 

end record; 


SYS PRODUCT_CAT; 
HDB_NUM_PRODUCT_REC; 
HDB~NUH PRODUCT REC; 


DATA BASE: HELP_PRODUCT 
TYPE: Ada 


Description 
Help products. 

type HDB_PRODUCT_TYPE is 
record 

HDB_REPT_NUHBER_CHAR : SYS_PRODUCT_LENGTH range 0.. 

HDB~PRODUCT~SIZE; 

hdb_product_text : string (1.7HDB_PRODUCT_SIZE); 

end record; 


DATA BASE: HELP_SOURCE 
TYPE: VARIABLE ASCII 


Description 

Description of the products to include in the help window. 


Column 

Field Name 

Type 

Width 

Record 1 

{Functional Area) 



1 

Slash "/" 

Character 

1 

2 

ttjps 

Character 

1 

3 

Functional Area Title 

Character 

20 

Record 2 

{Data Cateaorv) 



1 

Slash -/" 

Character 

1 

2 

•C" 

character 

1 

3 

Data Category Title 

Character 

20 

Record 3 

{Data Element) 



1 

Slash -/• 

character 

1 


Dec 


D-58 




2 


E 


Character 


1 


3 Data Element Title Character 20 


Record 4 ( Report) 

1 Textual Report Line Character 80 


Note: The Functional Area, Data Category, and Data Element records are used to 
build the product selection walking menu description files for the help 
button. 


DATA BASE: ICON_STACK_DB 
TYPE: BINARY 


Description 

Icon stack status data base, indicates which stack positions are used and 
which ones are free (C format). 

The Icon stack Data Base is needed to keep track of the dynamic allocation of 
the icon stacks associated with each base window creation icon. It is a file 
pointed to by the environment variable Icon_Path. The screen manager is 
responsible for creating the data file, if it does not exist. The format 
consists of the X coordinate of the origin for each base icon, and then the 
process id of the background process associated with each of the maximum 
number of processes allowed per base window creation icon. A null value for 
the process id indicates that the stack position is not currently in use. 

The X origin coordinate for each base icon is used by the process window 
creation procedure to offset a new icon onto a stack. 


DATA BASE: LUT_HILITE_DESC 
TYPE: FIXED ASCII 


pcscripUgn 


Description 
hilighted. 

of the color lookup table files to 

use when features 

are 


Sslma 

rleld Name 

Type 

aIda 

Dec 

l 

Background Type (LUT SHADE VEG or 
LUT_NONE) 

Character 

13 


21 

Lookup description file name 

Character 

60 



Note: The first record in this file is a comment. 


D-59 



DATA BASE: LUT_HILITE_MAP_ON 
TYPE: FIXED ASCZI 

Description 

Color lookup table to use when a map background (elevation band, shaded 
relief, or vegetation) is displayed and map features are hilighted. 


Column 

Field Name 

Type 

width 

Dec 

3 

Lookup Table start Position 

Numeric 

3 

0 

8 

Lookup Table End Position 

Numeric 

3 

0 

13 

Red Intensity 

Numeric 

3 

0 

18 

Green Intensity 

Numeric 

3 

0 

23 

Blue Intensity 

Numeric 

3 

0 

29 

Note: The 

Description 

first record on this file is a comment. 

Character 

52 



DATA BASE: LUT_HILITE__MAP_OFF 
TYPE: FIXED ASCII 

Description 

Color lookup table to use when a map with a null background is displayed and 
map features are hilighted. 


Column 

Field—K3we 

Type 

width 

Dec 

3 

Lookup Table start Position 

Numeric 

3 

0 

8 

Lookup Table End Position 

Numeric 

3 

0 

13 

Red intensity 

Numeric 

3 

0 

18 

Green Intensity 

Numeric 

3 

0 

23 

Blue Intensity 

Numeric 

3 

0 

29 

Note: The 

Description 

first record on this file is a comment. 

Character 

52 



DATA BASE: LUT_OVERLAY 
TYPE: FIXED ASCII 

BessxipUgn 

Color lookup table for the overlay planes. 


0-60 






Column 

Field Name 

Type 

width 

Dec 

3 

Lookup Table start Position 

Numeric 

3 

0 

8 

Lookup Table End Position 

Numeric 

3 

0 

13 

Red Intensity 

Numeric 

3 

0 

18 

Green Intensity 

Numeric 

3 

0 

23 

Blue Intensity 

Numeric 

3 

0 

29 

Description 

Character 

52 


Note: The first record on this file is a comment. 





DATA BASE: LUT_UNHILITE_ 

DESC 



Descriotion 

Description 

hilighted. 

TYPE: FIXED ASCII 

of the color lookup table files to use when features 

are not 


column 

Field Name 

Type 

Width 

Pec 

1 

Background Type (LUT SHADE VEG or 
LUT_NONE) 

character 

13 


21 

Lookup description file name 

Character 

60 



Note: The first record in this file is a comment. 

DATA BASE: LUT_UNHILITE_MAP_ON 
TYPE: FIXED ASCII 

PessrUiUqn. 

Color lookup table to use when a map background (elevation band, shaded 
relief, or vegetation) is displayed and map features are not hilighted. 


Cplunn 

rlalti, flams 

Type 

wMth 

Dec 

3 

Lookup Table Start Position 

Numeric 

3 

0 

8 

Lookup Table End Position 

Numeric 

3 

0 

13 

Red Intensity 

Numeric 

3 

0 

18 

Green Intensity 

Numeric 

3 

0 

23 

Blue Intensity 

Numeric 

3 

0 


D-61 



29 


Description 


character 


52 


No*:e: The first record on this file is a comment. 


DATA BASES LUTJJNHILITE_MAP_OFF 
TYPE: FIXED ASCII 


Description 

Color lookup table to use when a map with a null background is displayed and 


map features are not hilighted. 




Column 

Field Name 

Type 

Width 

&ec 

3 

Lookup Table Start Position 

Numeric 

3 

0 

8 

Lookup Table End Position 

Numeric 

3 

0 

13 

Red Intensity 

Numeric 

3 

0 

18 

Green Intensity 

Numeric 

3 

0 

23 

Blue Intensity 

Numeric 

3 

0 

29 

Note: The 

Description 

first record on this file is a comment. 

Character 

52 



DATA BASE: MAPJBUILD_MENU 
TYPES FIXED ASCII 


Description 

Description of the map options walking menu for the build window. 


Column 

Field 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Map Option (SYS_MAP_CONTROL) 

Character 

25 



Note: submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu option Title will cause a blank item in the menu. The first 
record of this file is a comment. The map control menu also allows the 
integration of multiple selection menus into the walking menu options. The 
multiple selection menu definitions has the following formats 

Column Field Name Type Width Dec 

1 Multiple Selection Menu code "M" Character 1 


D-62 




2 Multiple Selection Menu Record Character 1 

Code (M-Main; s*Subordinate). The 

Main option appears in the walking 
menu and as a title on the 
multiple selection menu. The 
subordinate appear as options on 
the multiple selection menu. 

3 Menu Option Title Character 20 

31 Map Option to use when an on-state character 25 

is returned from the button menu 
manager (SYS_MAP_CONTROL) 

56 Map Option to use when an off- Character 25 

state is returned from the button 
menu manager (SYS_MAP_CONTROL) 


DATA BASE! MAP_DESC 
TYPE: FIXED ASCII 


Description of the map image files to include in the tactical map system. 

Column Field Name Type width Pec 

1 Background Type character 16 

(SYS_MAP_BACKGROUND) 

21 Map scale (SYS_MAP_SCALES) character 9 

32 Name of map description file for Character 50 

this background type and map scale 

Note: The first record of this file is a comment. 


DATA BASE: MAP_LEGEND 
TYPE: FIXED ASCII 

Description 

Description of what to display in the map legend. 

colBim riald Mans typs width Dec 

3 Lookup Table Index Numeric 3 0 





8 


Description 


Character 


20 


Note: The firat record contains the number of entries in the map legend in 
columns 3 through S. 


DATA BASE! MAP_MESSAGE_MENU 
TYPE: PIXED ASCII 


Description 

Description of the map options walking menu for the view message window. 


Column 

Field Name 

XXBft 

Width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Map Options (SYS_MAP_CONTROL) 

Character 

25 



Note: submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. The map control menu also allows the 
integration of multiple selection menus into the walking menu options. The 


multiple 

selection menu definitions has the following format: 


column 

Field Name 

Type 

width 

1 

Multiple selection Menu Code ”M" 

Character 

1 

2 

Multiple selection Menu Record 
code (M-Main; s-subordinate). The 
Main option appears in the walking 
menu and as a title on the 
multiple selection menu. The 
subordinate appear as options on 
the multiple selection menu. 

Character 

1 

3 

Menu Option Title 

Character 

20 

31 

Map option to use when an on-state 
is returned from the button menu 
manager (SYS MAP CONTROL) 

Character 

25 


D-64 





56 


Character 


25 


Map option to use when an off- 
state is returned from the button 
menu manager (sys_map_CONTROL) 


DATA BASE: MAP_VIEW_C2_KENU 
TYPE: FIXED ASCZX 


Description 

description of the map options walking menu for the view situation window. 


column 

Field Name 

Type 

width 

Dec 

3 

Menu option Title 

Character 

20 


35 

Map Option (SYS_MAP_CONTROL) 

Character 

25 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. The map control menu also allows the 
integration of multiple selection menus into the walking menu options. The 
multiple selection menu definitions has the following format: 


Column 

Field Name 

Type 

width 

1 

Multiple Selection Menu Code "M" 

character 

1 

2 

Multiple Selection Menu Record 
code (M-Main; S-Subordinate). The 
Main option appears in the walking 
menu and as a title on the 
multiple selection menu. The 
subordinate appear as options on 
the multiple selection menu. 

Character 

1 

3 

Menu Option Title 

Character 

20 

31 

Map Option to use when an on-state 
is returned from the button menu 
manager (SYS_map_control) 

Character 

25 


D-65 





56 


Character 


25 


Nap Option to use when an off- 
state is returned from the button 
menu manager (SYS_MAP_CONTROL) 


DATA BASEI MESSAGE_LOG 
TYPE: Ada 


Description 

Log of all the messages sent. 

type CDB_LOG_LIMIT is range 0..100; 
type CDB_MESSAGE_LOG is array (CDB_LOG_LIMIT) of 
CDB~SUM_MESSACE_REC; 

type CDB_MESSAGE_LOG_REC is 
record 

CDB_COUNT s 

CDB_LIST : 

end record; 


CDB_LOG_LIHIT; 
CDB MESSAGE LOG; 


DATA BASE: OBSTACLE 
TYPE: Ada 


D e s criptipn 

obstacles. 


type SDB_OBSTACLE_REC is 
record 
SDB_ID 
SDB_OPPLAN 
SDB_SIDE 
SDB_TYPE 
SDB_STATUS 
SDB_EFF_FROM_DATE 
SDB_EFF_TO_DATE 
SDB_LOCATION 
SDB_FRONTAGE 
SDB_DEPTH 
SDB_ORIENTATION 
SDB_LANES_OR_GAPS 
SDB_ECHELON 
end record; 


SDB_OBSTACLE_ID; 
SYS_OPPLAN; 
SDB_SIDE_TYPE; 
SD8_OBSTACLE_TYPE; 
SDB_OBSTACLE_STATUS; 
SYS_DATE_TIME; 
SYS~DATE_TIME; 
SDB_LOCATION_REC; 

SYS_WIDTH_DEPTB; 
SYS_WIDTH_DEPTH; 
SYS_DEGREE; 
boolean; 

SDB FORCE ECHELON; 


P-66 



[ 


DATA BASE: OBSTACLE_INDEX 
TYPE: Ada 


SDB_OBSTACLE_ID; 

SYS~OPPLAN; 

SYS_DATE_TIME; 

SYS~DATE~TIME; 

SYS_DB_SIZE; 

\i OBSTACLE_SOURCE 
VARIABLE ASCII 


Type Width Pec 

Record 1 t Obstacle Type) 


1 

obstacle Name 

Character 

12 

14 

Obstacle Type 

character 

6 

21 

Echelon 

Character 

6 

28 

Force (BLUE or RED) 

Character 

4 

BssacUL 

1 

11/0 

UTM Location 

Character 

8 

11 

Frontage 

Numeric 

4 0 

17 

Depth 

Numeric 

4 0 

22 

Orientation 

Numeric 

3 0 

26 

Gap Flag (T**Yes, F-No) 

Character 

1 

Note: A date/time record is used to assign 
Format: «DDHBMM mon starting in column 1. 
date/time record is followed by one comment 

a date/time to the 
(Example: *021800 
record. 

obstacle data. 
SEP). The 


Deacription 

Index for the obstacle data base, 
type SDB_OBSTACLE_PTR is 


record 

SDB__ID : 

SDB~OPPLAN l 

SDBJEFF FROM : 

sdb_eff”to : 

SDBJRECORD : 

end record; 


DATA BAS 
TYPE: 

Des cr i pti o n 
Initial obstacles. 

Column Field Name 


L 


D-67 


DATA BASE: OPFOR_AUTH__EQUIP 
TYPE: Ada 


Description 

OPFOR authorized equipment levels. 


type SDB_EQUXP_REC is 
record 

SDB_ID : 

SDB_NAME s 

SDB_AUTHORIZED : 

SDB~CATEGORY : 

end record; 

type sdb_EQUIP_ARRAY is array 


type SDB_EQUIP_AUTH_LIST is 
record 

SDB_UNIT_ID : 

SDB~TIME : 

SDB_OPPLAN : 

SDB_COUNT : 

SDB~LIST : 

end record; 


SDB_EQUIPMENT; 

String (i'DB_EQUIP_NAME_LEN) 
SYS_QUANTITY; 

SDB EQUIP CATEGORY; 


(SDB EQUIPMENT) of 
SDB~EQUIP REC; 


SDB_UNIT; 
SYS~DATE_TXME; 
SYS~OPPLAN; 
SDB_EQUXPKENT; 
SDB EQUIP ARRAY; 


DATA BASE: OPPOR_AUTH_EQUIP_INDEX 
TYPE: Ada 


Description 

Index file for the OPFOR authorized equipment levels data base. 


type SDB_OPFOR_EQUIP_PTR is 
record 

SDB_UNIT_ID : 

SDB_TIME : 

SDB_OPPLAN : 

SDB_R£CORD : 

end record; 


SDB OPFOR UNIT_XD; 
SYS~DATE_TIME; 

SYS~OPPIAN; 

SYS DB SIZE; 


DATA BASE: OPFOR_CM_EDIT_MENU 
TYPE: FIXED ASCII 


R?g<?ri.pUgn 

Description of the walking menu to display when a OPFOR control measure is 
selected on the tactical map in a window with edit capability. 

Cgluntn Field Name .XYP9 Width 

3 Menu Option Title Character 20 


B&S. 


D-68 







35 Control Measure option Character 16 

<SYS_CM_OPTION) 

Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?” as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: OPFOR_CM_VIEW_HENU 
TYPE: FIXED ASCII 


Description 

Description of the walking menu to display when a OPFOR control measure is 
selected on the tactical map in a window with view only capability. 


Column 

Field Name 

Type 

Width 

Pec 

3 

Menu Option Title 

Character 

20 


35 

Control Measure option 
(SYS_CM_OPTION) 

Character 

16 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: OPFOR_CURR_EQUIP_INDEX 
TYPE: Ada 


Description 

Index file for the OPFOR current equipment levels data base. 


type SDB_OPFOR_EQUIP_QTY_PTR is 
record 

SDB_UNIT_ID : 

SDB_EQUIP_ID : 

SDBJHME : 

SDB_OPPLAN : 

SDB_RECORD : 

end record; 


SDB_OPFOR_UNIT_ID; 
SDB~OPFOR_EQUIP_ID; 
SYS~DATE_TIME; 
SYSJ5PPLAN; 

SYS DB SIZE; 


DATA BASE: OPFOR_CURR_EQUIP 
TYPE: Ada 


Psscrlptlgn 

OPFOR currant equipment levels. 

type SDB_OPFOR_EQUIP_QTY is 

record 


D-69 



SDB_UNIT_ID 
SDB_EQUIP_ID 
SDB_TIHE ~ 
SDB_OPPLAN 
SDB_OPERATIONAL 
end record; 


SDB_OPF0R_UNIT_ID } 
SDB OPFOR_EQUIP_ID; 
SYS~DAT2_TIHE; “ 

SYS~OPPJAN; 

sys“quantity; 


DATA BASE: OPFOR_EQUIP_NAME 
TYPE: FIXED ASCII 


Description 

List of the OPFOR equipment names. This file is used to assign names to the 
equipment types in the situation data base. 

Column Field Name Type Width Dec 

1 Equipment Name Character 12 

Note: The first record in this file is a comment. 

DATA BASE: OPFOR_EQUIP_SOURCE 
TYPE: VARIABLE ASCII 

Description 

Initial equipment levels for OPFOR units. 


Column 


Field Name 

Type 

width 

Dec 

Record 

X 

(Unit) 




14 


Unit Name 

character 

12 


35 


Number of Equipment Types 

Numeric 

2 

0 

Record 

X 

(Equip) 




15 


Equipment Name 

Character 

12 


30 


Authorized Amount 

Numeric 

5 

0 

40 


Operational Amount 

Numeric 

5 

0 


Note: The Equip records must immediately follow the Unit record. The number 
of equip records must equal the number of equipment types in the Unit record. 
A date/time record is used to assign a date/time to the ammunition data. 
Format: *ddhhmm MON starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by two comment records. 


D-70 






DATA BASES OPFOR_OBS_EDIT_MENU 
TYPE: FIXED ASCII 


Description 

Description of the walking menu to display when a OPFOR obstacle is selected 
on the tactical map in a window with view only capability. 


gp.lwnn 

Field Name 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

obstacle Option (SYS_0BS_0PTI0N) 

Character 

15 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: OPFOR_OBS_VIEW_MENU 
TYPE: FIXED ASCII 

De s cr ipti on 

Description of the walking menu to display when a OPFOR obstacle is selected 
on the tactical map in a window with edit capability. 


Column 

field Name 

TYPg 

Width 

Dec 

3 

Menu option Title 

character 

20 


35 

obstacle option (SYS_OBS_oPTION) 

Character 

15 



Note: submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: OPFOR_ORGANIC_TASK_ORG 
TYPE: VARIABLE ASCII 

pgggrip.Uon 

organic task organization for the OPFOR units. 


CPlwmn 

Field Name 

Type 

Width 

Dec 

l 

Unit Name 

character 

12 



Note: subordinate unit names must be indented 2 spaces from their parent units 
name. 


D-71 






DATA BASE: OPFOR_REINFORCE_TIME 
TYPE: FIXED ASCII 

Description 

initial reinforcing times for OPFOR units. 


Column 

Field Name 

Type 

Width 

Dec 

5 

Unit Number 

Numeric 

3 

0 

14 

Unit Name 

Character 

12 


35 

Reinforcing Hours 

Numeric 

4 

0 

53 

Percent strength 

Numeric 

3 

0 


Note: The first record in this file is a comment. 

DATA BASE: OPFOR_TASK_ORG_SOURCE 
TYPE: VARIABLE ASCII 

Description 

Initial task organization for the OPFOR units. 


Column 


Field Name 

Zype 

width 

Record 

_ 1 _ 

(Echelon Count 1 



1 


Echelon count 

Numeric 

3 

Record 

_2_ 

(Echelon Name\ 



1 


Echelon Name 

Character 

20 

Record 

_3_ 

(Unit). 



1 


Unit Name 

Character 

12 


Note: The Echelon Name records must appear directly after the Echelon Count 
Record. Each subsequent echelon record must be indented 2 spaces from the 
previous one. Subordinate unit names in the Unit record must be indented 2 
spaces from their parent units name. A date/time record is used to assign a 
date/time to the task organization data. Format: *DDHHMM MON starting in 
column 1. (Example: *021800 SEP). The date/time record is followed by one 
comment record and the Echelon Count and Echelon Name records. 


D-72 


DATA BASE: OPFOR_UNIT_CONVERT 
TYPE: Ada 


Description 

Data base to convert opfor unit names to unit numbers. 

type OPFOR_ORGANIC_UNIT is 
record 

OIiD_ID : 

NEW_ID : 

NAME : 

end record; 


DATA BASE: OPFOR_UNIT_EDIT_MENU 
TYPE: FIXED ASCII 

Description 

Description of the walking menu to display when a OPFOR unit is selected on a 
tactical map in a window with edit capability. 


SDB_OPFOR_UNIT_ID; 
SDB~OPFOR~UNIT~ID; 

String (SDB_UNIT_NAME_LEN) ; 


column 

Field Name 

Type 

Width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Unit Option (SYS_UNIT_OPTION) 

Character 

15 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
”?" as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: OPFOR_UNIT_LOC 
TYPE: Ada 


Description 

OPFOR unit location data base. 


type SDB_UNIT LOCATION is 


record 

SDB_UNIT_ID : 

SDBJTIME - ; 

SDB_OPPLAN : 

SDB_LOCATION : 

end record; 


SDB_UNIT; 

S Y S~DATE_TIKE; 
SYSjOPPLAN; 

SDB~LOCATION REC; 


D-73 



DATA BASE! OPFOR_UNIT_LOC_INDEX 
TYPE* Ada 


Be.3£ripti.sn 

Index file for the OPFOR unit location data base. 


type SDB_OPFOR_LOCATION_PTR is 
record 

SDB_UNIT_ID i 

SDB~TIME _ s 

SDB_OPPIiAN ! 

SDB~RECORD ! 

end record; 


SDB OPFOR_UNIT_ID; 
SYSJDATE_TIME 
SYS_OPPLAN; 

SYS DB SIZE; 


DATA BASE! OPFOR_UNIT_LOC_SOURCE 
TYPE: FIXED ASCII 


Description 

Initial unit locations for the OPFOR units. 


Column 

Field Name 

Type 

width 

Dec 

14 

unit Name 

Character 

12 


36 

UTM Letters 

Character 

2 


38 

UTM X Coordinate 

Numeric 

3 

0 

41 

UTM Y Coordinate 

Numeric 

3 

0 


Note: A date/time record is used to assign a date/time to the unit location 
data. Format: *DDHHMM MON starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by two comment records. 


DATA BASE! OPFOR_UNIT_NAME 
TYPE: DELIMITED ASCII 


Pescrj.pU<an 

List of the OPFOR unit names. This file is used to assign names to the unit 
transactions in the situation recorded data. 


Field .I rigid -Hama 

1 unit Number 

2 Unit Name 


XXBS 

Numeric 

Character 


D-74 




DATA BASE: OPFOR_UNIT_STATUS_INDEX 
TYPE: Ada 

Description 

Index file for the opfor unit status data base. 


type SDB_OPFOR__STATUS_PTR is 
record ~* 

SDB_UNIT_ID J 

SDB_TIME~ t 

SDB_OPPLAN s 

SDB~RECORD : 

end record; 


SDB_OPFOR_UNIT_ID; 
SYS~DATE_TIME;~ 
SYS~OPPLAN; 

SYS DB SIZE; 


DATA BASE: OPFOR_UNIT_STATUS 
TYPE: Ada 


Description 
OPFOR unit status. 

type SDB_OPFOR_UNIT_STATUS is 
record 

SDB UNIT_ID : 

SDBJTIME : 

SDB_OPPLAN : 

SDB_NAME 

SDB__ECHELON : 

SDB__TYPE : 

SDB~PARENT j 

SDB__HIGHER_ECH : 

SDB_NEXT_SIBLING : 

SDB__FIRST_CHILD : 

SDB_HISSION : 

SDB_ACTIVITY : 

SDB__REINFORCE_HR : 

SDB~PERCENT_STR ! 

end record; 


SDB_BLUEFOR_UNIT_ID; 
SYS~DATE_TIME; 

SYS_OPPLAN; 

string (SDB unit_name_:len> ; 
S DB_FORCE_E CHELON; 
SDB_UNIT_TYPE; 
SDB_OPFOR_UNIT_ID; 
SDB_OPFOR_UNIT_ID; 
SDB~OPFOR__UNIT~ID; 
SDB_OPFOR~UNIT_ID; 
SDB~FORCE~MISSION; 

SDB FORCE~ACTIVITY; 
SYS~HOUR;~ 

SYS PERCENT; 


DATA BASE: OPFOR_UNIT_STATUS_SOURCE 
TYPE: FIXED ASCII 

BagsxAp.tipp 

Initial statue of the OPFOR units. 


ggAumn 

Field Name 

Type 


Dec 

5 

Unit Number 

Numeric 

3 

0 

14 

Unit Name 

Character 

12 


34 

Unit Size 

Numeric 

1 

0 



D-75 





47 

Unit Branch/Duty 

Numeric 

1 

0 

60 

Unit Mission 

Numeric 

1 

0 


Note: A date/time record is used to assign a date/time to the unit location 
data. Format: *DDHHMM HON starting in column 1. (Example: *021800 SEP). The 
date/time record is followed by four comment records. 


DATA BASE: OPFOR_UNIT_VIEW_MENU 
TYPE: FIXED ASCII 


Description 

Description of the walking menu to display when a opfor unit is selected on 
the tactical map in a window with view only capability. 


Column 

Field Name 

Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 


35 

Unit Option <SYS_UNIT_OPTION) 

Character 

15 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent, using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: OPLANJLIST 
TYPE: Ada 


Description 

List of existing Operational plans in the system. 

type SDB_OPPLAN_REC is 
record 

SDB_OPPLAN_ID : 

SDB TYPE : 

sdbJopplanname : 

SDB_BASE : 

S DB~DATE_TIME I 

end record; 


DATA BASE: OPLAN_LIST_SOURCE 
TYPE: FIXED ASCII 


SYS OPPLAN; 
SDB~OPPLAN_TYPE; 

STRING (SYS_POP_UP_TEXT); 
SYS_OPPLAN; 

SYS DATE TIME; 


pgicrlpUon 

operational plans to initially have in the system. 


D-76 







I 


I 




column 

Field Name 

Type 

Width 

Dec 

1 

OPZAN Name 

Character 

20 


2 

OPLAN Type (BASE SCENARIO/ 

G2 PERSONAL, G3 PERSONAL, 

G4 PERSONAL, SHARED) 

Character 

13 



DATA BASE: PRODUCT_HARDCOPY 
TYPE: PZXEO ASCZZ 


Description 

asczz output file of the product* printed by cdb__hardcopy . 


Column 

Field Name 

Type 

Width 

Dec 

1 

ASCZZ output 

Character 

80 



DATA BASE: R£FERENCE_HEADER 
TYPE: Ada 

pe g oriRti on 

Reference report headers. 

type FDB_HEADER_TYPE it 
record 

FDB_HEAD_NUMBER_CHAR : SYS_HEADER_LENGTH range 0.. 

FDB_BEADER_SZZE; 

fdb_header_text : string (1 ..FDB_headerj5XZE)j 

end record; 


DATA BASE: REFERENCE JNAME 
TYPE: DELIMITED ASCZZ 

pgasrlption 

List of the reference product names. This file is used to assign names to the 
reference transactions in the reference recorded data. 


field t 

gitld.WMH 

Type 

l 

Product Number 

Numeric 

2 

Functional Area 

Character 

3 

Data Category 

character 

4 

Data Element 

Character 

5 

Level of Detail (D- Detail; 
A-Aggregate, s-summary) 

Character 


D- 77 





DATA BASE: REFERENCE PROD DESC 


TYPE: Ada 

Description 

Reference product description data base. This data base indicates which 
records from the reference product data base to uae for a product. 


type FDB_PRODUCTJDESC_TYPE 
record *~ 

FDB_PRODUCT_CAT 
FDB_PRODUCT_HDR_START 
FDB~PRODUCT~HDR~END 
FDB_PRODUCT_START 
FDB_PRODUCT_END 
end record; 


is 

: SYS_PRODUCT_CAT; 

: FDB~NUM_HEADER_REC; 

: fdb~num_header_recj 

: FDB~NUM~PRODUCT_REC; 

: FDb'~NTJM PRODUCT~REC; 


DATA BASE: REFERENCE^PRODUCT 
TYPE: Ada 


Description 

Reference product data base. 

type FDB_PRODUCT_TYPE is 
record 

FDB_REPT_NUMBER_CHAR 

FDB_PRODUCT_TEXT 
end record; 


SYSJPRODUCT_LENGTH range 0.. 
FDB~PRODUCT~SIZE; 

string (1 ..fdb_product_size); 


DATA BASE: REFERENCE_RECORD 
TYPE: BINARY 


pgsccipUgn 

Reference data recording transactions. 

This data base contains binary images of the messages in MSG_RF_RECORD_LIST. 
The message type is contained in MSG_RECORD_TYPE and the length is in 
MSG_BYTES_in_MSG. The UUX_IO utilities should be used to interact with this 

data base. 


DATA BASE! REFERENCE_SOURCE 
TYPE: VARIABLE ASCII 


Pftiggjptlen 

Description of the reference products to include in the view reference window. 


D>7« 




column 


£i£H_Name 


Type 


width 


Dec 


KecPfd 1 (Funct ional Areal 

1 Slash "/" 

2 "F" 

3 Routing code 

1 - 62 

2 - G3 

3 ■ G2 i 63 

4 * 64 

5 ■ 62 ( 64 

6 ■ 63 t G4 

7 - 62, 63, 6 64 

4 Functional Area Title 

Record 2 <Data Category \ 

1 Slash "/" 

2 "C" 

3 Routing Code 

1-62 
2-63 
3 - 62 6 63 
4-64 

5 - 62 6 64 

6 - 63 « 64 

7 = 62, 63, a 64 

4 Data Category Title 

Record 3 (Data element) 

1 Slash ■/" 

2 "E" 

3 Routing Code 

1-62 
2-63 
3 - 62 a 63 
4-64 

5 - 62 a 64 

6 - 63 a 64 

7 - 62, 63, a 64 

4 Level of Detail (D-Detail, 
A-Aggregate, s-summary) 

5 Colon "i* 

€ Data Element Title 


Character 

Character 

Numeric 


Character 

Character 

Character 

Numeric 


Character 

Character 

Character 

Numeric 


Character 

character 

Character 


1 

1 

1 0 

20 

1 

1 

1 0 

20 

1 

1 

1 0 

1 

1 

20 


D-79 


Record 4 t Report Header 1 

1 Percent sign “%" Character 1 

2 Report Header Line Character 80 

Record 5 ...LBSPffirtl 

1 Textual Report Line Character 80 

Note: The Functional Area, Data category, and Data Element records are used to 
build the product selection walking menu description files for the view 
reference window. 


DATA BASE: ROOT_WINDOWJMENU 
TYPE: FIXED ASCII 


Description 

Description of the walking menu to display in the root window. The root 
window is any part of the screen where a window or button is not displayed. 


Column 

Field Name 

Type 

Width 

Dec 

3 

Menu Option Title 

character 

20 


35 

Root Window Option 
(SCL_ROOT_OPTION) 

Character 

16 



Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: SCREEN_DUMP_IMAGE 
TYPE: BINARY 

Description 

Bitmap image of a screen of a Sun workstation (Bitmap format). 

DATA BASE: SEND_PARTICIPANT_SOURCE 
TYPE: FIXED ASCII 


BescripUgn 

List of the participants that messages can be sent to. 


gglwaa 

field Name 

Tvce 

width 

Dec 

l 

Participant Name 

Character 

10 


12 

Participant Type (G2, G3, G4, 
EXPERIMENTER) 

character 

20 



D-80 



DATA BASE: SHAD_RELF_lTOl60 
TYPE: BINARY 


Description 

shaded relief image file for the 1:160,000 map scale. 

This shaded relief data base consists of byte values representing the color 
lookup table value to use to represent the relief shading. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 40 columns and 25 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: SHAD_RELF_lTO400 
TYPE: BINARY 


Description 

Shaded relief image file for the 1:400,000 map scale. 

This shaded relief data base consists of byte values representing the color 
lookup table value to use to represent the relief shading. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 16 columns and 10 rows. Each record iB organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: SHAD_REU_lTO80 
TYPE: BINARY 


Bga g ii ptL ian 

shaded relief image file for the 1:80,000 map scale. 

This shaded relief data base consists of byte values representing the color 
lookup table value to use to represent the relief shading. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 79 columns and 49 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: SHAD_REUT_1T0800 
TYPE: BINARY 

Shaded relief image file for the 1:800,000 map scale. 

This shaded relief data base consists of byte values representing the color 
lookup table value to use to represent the relief shading. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 8 columns and 6 rows. Bach record is organized in column/row 
order from northwest to. southeast with 64 columns and 80 rows (5120 bytes). 


D-81 





DATA BASE: SHAD_RELF_DESC__lTOl6 0 
TYPE: VARIABLE ASCZX 


Description 

Description of the 1:160,000 shaded relief inage file. 


Column 

Field Marne 

Tvoe 

width 

Dec 

Record 1 

(Imaqe rile) 




1 

Shaded relief inage file name for 
this map scale 

Character 

60 


Record 2 

(Data Base Size) 




1 

Number of shaded relief image 
records in the X direction for 
this sup scale 

Numeric 

5 

0 

6 

Number of shaded relief image 
records in the Y direction for 
this map scale 

Numeric 

5 

0 

Record 3 

(Record Size) 




1 

Humber of shaded relief image 
points in a record in the X 
direction 

Numeric 

5 

0 

6 

Number of shaded relief image 
points in a record in the Y 
direction 

Numeric 

5 

0 

Record 4 

(Data Base point size) 




1 

Number of shaded relief image 
points in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of shaded relief image 
points in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

ftecpgja $ 

4 

(Map Origin) 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the shaded 
relief image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MA000000 to the 
northwest corner of the shaded 
relief image 

Numeric 

7 

0 


Becord-6 (Srid Intervals 


D-82 





X Grid interval for this map scale Numeric S 0 

(in meters) 


DATA BASE: SHAD_RELF_DESC_lTO400 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:400,000 shaded relief image file. 


Column 

Field Name 

Type 

width 

Dec 

Record 1 

(Xmaae rile) 




1 

Shaded relief image file name for 
this map scale 

Character 

60 


Record 2 

(Data Base size) 




1 

Number of shaded relief image 
records in the X direction for 
this map scale 

Numeric 

5 

0 

6 

Number of shaded relief image 
records in the Y direction for 
this map scale 

Numeric 

5 

0 

Record 3 

(Record size) 




1 

Number of shaded relief image 
points in a record in the X 
direction 

Numeric 

5 

0 

6 

Number of shaded relief image 
points in a record in the Y 
direction 

Numeric 

5 

0 

Record 4 

(Data Base Point size) 




1 

Number of shaded relief image 
points in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of shaded relief image 
points in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(Map Oriain) 




4 

Number of meters in the x 
direction from MA000000 to the 
northwest corner of the shaded 
relief image 

Numeric 

7 

0 

14 

Number of meters in the Y 

Numeric 

7 

0 


direction from MA000000 to the 
northwest corner of the shaded 


D-83 



relief image 


Record 6 (Grid Interval1 

1 Grid interval for this map scale Numeric 5 0 

(in meters) 


DATA BASE: SHAD_RELF__DESC_lTO80 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:80,000 shaded relief image file. 

Column Field Name Type width Dec 

Record 1 /Image File! 

1 Shaded relief image file name for character 60 

this map scale 

Record 2 I Data Base Sizel 

1 Number of shaded relief image 

records in the X direction for 
this map scale 

6 Number of shaded relief image 

records in the Y direction for 
this map scale 

Record 3 (Record Size! 

1 Number of shaded relief image 

points in a record in the X 
direction 

6 Number of shaded relief image 
points in a record in the Y 
direction 

Record 4 (Data Base Point Size) 

1 Number of shaded relief image 

points in the data base in the X 
direction 

7 Number of shaded relief image Numeric 6 0 

points in the data base in the Y 

direction 

14 Number of meters per pixel for Numeric 7 3 

this map scale 

Record 5 (Map Origin) 


Numeric 5 0 


Numeric 5 0 


Numeric 5 0 


Numeric 5 0 


Numeric 6 0 


D-84 



Numeric 


7 


0 


4 Number of meters in the X 

direction from MA000000 to the 
northwest corner of the shaded 
relief image 

14 Number of meters in the Y Numeric 7 0 

direction from MA000000 to the 
northwest corner of the shaded 
relief image 

Record 6 (Grid Interval) 

1 Grid interval for this map scale Numeric 5 0 

(in meters) 


DATA BASE: SHAD_R£LF__DESC_lTO800 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:800,000 shaded relief image file. 


Column 

Field Name 

Type 

width 

Dec 

Record 1 

flmaqe File) 




1 

Shaded relief image file name for 
this map scale 

Character 

60 


Record 2 

(Data Base size) 




1 

Number of shaded relief image 
records in the X direction for 
this map scale 

Numeric 

5 

0 

6 

Number of shaded relief image 
records in the Y direction for 
this map scale 

Numeric 

5 

0 

Record 3 

(Record Size) 




1 

Number of shaded relief image 
points in a record in the X 
direction 

Numeric 

5 

0 

6 

Number of shaded relief image 
points in a record in the Y 
direction 

Numeric 

5 

0 

Record 4 

(Data Base Point size) 




1 

Number of shaded relief image 
points in the data base in the x 
direction 

Numeric 

6 

0 

7 

Number of shaded relief image 
points in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 

Numeric 

7 

3 


D-85 





this nap scale 


Record 5 (Map Origin) 

4 Number of meters in the X Numeric 7 0 

direction from MA000000 to the 
northwest corner of the shaded 
relief image 

14 Number of meters in the Y Numeric 7 0 

direction from MA000000 to the 
northwest corner of the shaded 
relief image 

Record 6 (Grid Interval) 

1 Grid interval for this map scale Numeric 5 0 

(in meters) 


DATA BASE! SITUATION_RECORD 
TYPE! BINARY 


Description 

situation data recording transactions. 

This data base contains binary images of the messages in MSG_SD_RECORD_LIST. 
The message type is contained in MSG_R£CORP_TYFE and the length is in 
MSG_BYTES_IN_MSG. The uux_IO utilities should be used to interact with this 
data base. 


DATA BASE! TASK_ORG_TOOL_MENU 
TYPE! FIXED ASCII 

Description 

Description of the walking menu to display as a popup menu for the task 


organization tool. 




Column 


Type 

width 

Dec 

3 

Menu Option Title 

Character 

20 



D-86 





35 Task Organization Tool Option Character 16 

(VPUM_OPTS) 

Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: TASK_ORG_TOP_UNir_MENU 
TYPE: FIXED ASCII 


es. 3sriptiq n 

Description of the walking menu to display when the top unit button is 


selected 

in the task organization tool. 



Column 

Field Name 

Type 

width 

3 

Menu Option Title 

Character 

20 

35 

Unit Number 

Numeric 

6 


Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: TASK ORG UNIT MENU 


TYPE: FIXED ASCII 

D escripUa i O 

Description of the walking menu to display as a popup menu when a unit is 
selected in the task organization tool. 


Colupiq Field Name 


Type 


Width Dec 


3 Menu Option Title 


Character 20 


D-87 


35 Task Organization Tool Unit option character 16 

(UPUM_OPTS) 

Note: submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE: TASX_ORG_UNIT_TYPE_MENU 
TYPE: FIXED ASCII 


Description 

Description of the multiple selection menu to display when the unit type 
button is selected in the task organization tool. 


Column 

Field Name 


Type 

Width 

1 

Menu option Title 


character 

20 

22 

Unit Type option (UTB_OPTS) 

Character 

22 

56 

Initial status (On 

or off) 

Character 

3 

Note: The 
columns 1 

first record of this 
and 2. 

file contains 

the number of menu 

items 


DATA BASE: TOOL MENU 


TYPE: FIXED ASCII 


Description 

Description of the walking menu defining the tools available in the tool 
window. 

column Field Name Type w id th Bee 

3 Menu Option Title Character 20 

35 Tool option (SYS_TOOLS) Character 16 


Note: Submenu Menu Option Titles must be indented 1 character from their 
parent and must appear immediately after the parent. Using a question mark 
"?" as the Menu Option Title will cause a blank item in the menu. The first 
record of this file is a comment. 


DATA BASE* TRAN_ACTIVITY 
TYPE: DELIMITED ASCII 


BassrlpUon 

Unit activity update recorded transactions. 


D-SS 






field * 

N»me 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

character 

10 

Unit Number 

Numeric 

11 

Unit Activity (SDB_FORCE_ACTIVITY) 

Character 


DATA BASE: TRAN_AMMUNITION 

TYPE: DELIMITED ASCII 


Bgagxiptisn 

Unit ammunition update recorded transactions. 


rigid... t 

ri.gid_F.Mig 

Type 

i 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

window Type 

Character 

5 

Window stack Index 

Numeric 

6 

scenario Date (CCyymmdd) 

Character 

7 

scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

character 

10 

Unit Number 

Numeric 

11 

Ammunition Number 

Numeric 


D-89 



12 


Ammunition Quantity 


Numeric 


DATA BASS: TRAN_BLUEFOR_TASK_ORG 
TYPE: DELIMITED ASCII 


Description 

BLUEFOR task organization update recorded transactions. 


Field 4 

Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

character 

3 

Message Time (hhmmss) 

Numeric 

4 

window Type 

Character 

5 

Window stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

Character 

10 

Unit Number 

Numeric 

11 

Higher Echelon Unit Number 

Numeric 

12 

Relationship (ORG, ATCH, DS, GS, 
GSR, OPCN) 

Character 


DATA BASE: TRAN_C2_REQUEST 
TYPE: DELIMITED ASCII 


Description 

Request for command and control product recorded transactions. 


rttid 1 liaidJsaat 

1 Participant (02, 03, 04, EX) 

2 Message Date (CCyymmdd) 

3 Message Time (bhmss) 

4 Window Type 


xm 

Character 

Character 

Numeric 

character 


D-90 




5 


Window Stack Index 


Numeric 


6 c2 Product Number 


Numeric 


DATA BASE: TRAN_C2_WINDOW 
TYPE: DELIMITED ASCII 


BegsTiptipn 

View situation, build, and view message window manipulation recorded 
transactions. 


rigid i 

rigid .Mgffig 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

Window Action (S«Stop, T-Close 
Socket, N-Connect, O—Open, 

C-Close) 

character 


DATA BASE: TRAN_CNTRL_MSR_DEL 
TYPE: DELIMITED ASCII 


Pgpgrlptlgn 

Control measure delete recorded transactions. 


rigid...!. 

1 

2 


rigid mat 

Participant (G2, G3, G4, 
Message Date (CCyymmdd) 

Message Time (hhmmss) 
window Type 
window stack index 
Scenario Date (CCyymmdd) 
Scenario Time (bhmm) 
OPLAM Number 
control Measure Number 


Type 

EX) character 

Character 
Numeric 
Character 
Mroeric 
Character 
Numeric 
Numeric 
Numeric 


D-91 




DATA BASE: TRAM_CHTRL_HSR_BFT_TIHE 
TYPE: DELIMITED ASCII 

Description 


Control measure effective time update recorded transactions. 


Field # 

Field Name 

Type 

1 

participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Control Measure Number 

Numeric 

10 

Control Measure Effective Date 

character 

11 

(CCyymmdd) 

Control Measure Effective Time 

Numeric 


(hhmm) 



DATA BASE: TRAN_CNTRL_MSR_LOC 

TYPE: delimited ascii 


P?gCE,jpU<?n 

Control measure location update recorded transactions. 


1 

Field Name 

mat 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

character 

3 

Message Time (hhaous) 

Numeric 

4 

Window Type 

Character 

S 

Window Stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

character 


k 


D-92 






7 

Scenario Tima (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Control Measure Number 

Numeric 

10 

Point 1 X Coordinate 

Numeric 

11 

Point 1 Y Coordinate 

Numeric 

12 

Point 2 X Coordinate 

Numeric 

13 

Point 2 Y Coordinate 

Numeric 

14 

Point 3 x coordinate 

Numeric 

15 

Point 3 Y Coordinate 

Numeric 

16 

Point 4 X coordinate 

Numeric 

17 

Point 4 Y Coordinate 

Numeric 

18 

Point 5 X Coordinate 

Numeric 

19 

Point 5 Y Coordinate 

Numeric 

20 

Point 6 X Coordinate 

Numeric 

21 

Point 6 Y Coordinate 

Numeric 

22 

Point 7 x Coordinate 

Numeric 

23 

Point 7 Y Coordinate 

Numeric 

24 

Point 8 X coordinate 

Numeric 

25 

Point 8 Y coordinate 

Numeric 

26 

Point 9 X coordinate 

Numeric 

27 

Point 9 Y coordinate 

Numeric 

28 

Point 10 X Coordinate 

Numeric 

29 

Point 10 Y Coordinate 

Numeric 

30 

Point 11 x coordinate 

Numeric 

31 

Point 11 Y Coordinate 

Numeric 

32 

Point 12 x Coordinate 

Numeric 

33 

Point 12 Y coordinate 

Numeric 

34 

Point 13 X coordinate 

Numeric 


D-93 




35 

Point 

13 

Y 

Coordinate 

36 

Point 

14 

X 

Coordinate 

37 

Point 

14 

Y 

Coordinate 

38 

Point 

15 

X 

Coordinate 

39 

Point 

15 

Y 

Coordinate 


Numeric 

Numeric 

Numeric 

Numeric 

Numeric 


DATA BASE: TRAN_CNTRL_MSR_STAT 
TYPE: DELIMITED ASCII 


Description 

control measure status update recorded transactions. 


Field # 

field Faroe 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time 'hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

scenario Date (CCyymmdd) 

Character 

7 

scenario Time (hhmm) 

Numeric 

8 

oplan Number 

Numeric 

9 

Control Measure Number 

Numeric 

10 

Control Measure status 
( SDB_CONTROL_MEASURE__STATUS) 

Character 


DATA BASE: TRAN_CONTROL_REQUEST 
TYPE: DELIMITED ASCII 

PfttCJClPttPn 

Request for experiment control product recorded transactions. 

ritid I rltld mat mt 

1 Participant (G2, C3, 04, EX) Character 

2 Message Date (CCyymmdd) Character 


D-94 



3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

character 

5 

Window Stack Index 

Numeric 

6 

Experiment control Product Number 

Numeric 


DATA BASE: TRAN_CONTROL_WINDOW 


TYPE: DELIMITED ASCII 


Description 

Tool and experiment control window manipulation recorded transactions 

Field » 

Field 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

window Action (S*»Stop, T«ciose 

Socket, N-Connect, o»open, 
enclose) 

Character 


DATA BASE* TRAN_EQUIPMENT 
TYPEI DELIMITED ASCII 


pppcriptlgn 

Unit equipment update recorded transactions. 


ritid 1 

ritid warn* 

TVBt 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 


D-95 



7 

Scenario Time (hhmm) 

Numeric 

8 

oplan Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

Character 

10 

Unit Number 

Numeric 

11 

Equipment Number 

Numeric 

12 

Equipment Quantity 

Nur*ric 


DATA BASE: TRAN_FUEL 



TYPE: DELIMITED ASCII 


Description 

fuel update recorded transactions. 


Field # 

Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

window stack index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDBJSIDEJTYPE) 

Character 

10 

Unit Number 

Numeric 

11 

Mogas Quantity 

Numeric 

12 

avgas Quantity 

Numeric 


D-96 


13 


Diesel Quantity 


Numeric 


DATA BASE: TRAN_LOOKUP_TABLE 
TYPE: DELIMITED ASCII 


Description 

Color lookup table update recorded transactions. 


Field t 

Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window stack Inde;: 

Numeric 

6 

Background Type (N-None, F-Full 
Background Color) 

Character 

7 

Background status (N»No change, 
H-Hilite, u-unhilite) 

Character 

8 

Road status (N-No change, 

H-Hilite, U-Unhilite) 

Character 

9 

Hydrography status (N-No Change, 
H-Hilite, U-Unhilite) 

Character 

10 

Urban status (N-No Change, 

H-Hilite, U-Unhilite) 

Character 

11 

Miscellaneous status (N-No change, 
H-Hilite, U-Unhilite) 

Character 


DATA BASE: TRAN_KAP 



TYPE: DELIMITED ASCII 


Description 

Tactical map control recorded transactions. 


Fiald 1 

field mat 

Type 

1 

Participant <G2, 03, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 


D-97 


window Type 

window Stack Index 

Background Type (CCM, ELEV, SHAD, 
3D, VEG, NOME) 

Hap Scale (1:40, 1:80, 1:160, 

1:400, 1:800) 

Hap Center X coordinate 

Hap Center Y coordinate 

Hap Grid Status (T»On, False-Off) 

Contour status (T-On, False-Off) 

BLUEFOR Division Unit Status 
(T-On, False-off) 

BLUEFOR Brigade Unit Status (T-On, 
False-Off) 

BLUEFOR Regiment Unit Status 
(T=on, False-off) 

BLUEFOR Battalion unit status 
(T-on, False-off) 

bluefor company Unit Status (T»On, 
False-off) 

BLUEFOR Combat Unit Status (T-On, 
False-Off) 

bluefor cs unit status (T-on, 
False-Off) 

BLUEFOR CSS Unit Status (T-On, 
False-Off) 

BLUEFOR Unit Name Status (T-on, 
False-Off) 

BLUEFOR Unit symbol status (T-On, 
False-off) 

OPFOR Division Unit Status (T-On, 
False-Off) 

OPFOR Brigade Unit status (T-On, 
False-off) 

OPFOR Regiment Unit Status (T-On, 
False-Off) 


character 

Numeric 

Character 

Character 

Numeric 

Numeric 

character 

character 

Character 

Character 

Character 

character 

character 

Character 

Character 

Character 

Character 

Character 

character 

Character 

Character 






25 OPFOR Battalion Unit statua (T-on, Character 

False-Off) 

25 OPFOR Company Unit status (T-on, Character 

False-Off) 

27 OPFOR Committed unit Status (T-On, Character 

False-Off) 

28 OPFOR Reinforcing Unit Status character 

(T-on, False-off) 

29 OPFOR Artillery Unit status (T*On, Character 

False-Off) 

30 OPFOR Unit Name status (T-on, Character 

False-off) 

31 OPFOR Unit symbol Status (T-on, character 

False-Off) 

32 BLUEFOR Echelon Above Corps Character 

Control Measure status (T-On, 

False-Off) 

33 BLUEFOR Division Control Measure Character 

Status (T-On, False-Off) 

34 bluefor Brigade control Measure character 

status (T-on, False-Off) 

35 bluefor Battalion control Measure character 

Status (T-On, False-Off) 

36 BLUEFOR Company control Measure Character 

Status (T-on, False-Off) 

37 BLUEFOR Point Control Measure Character 

Status (T*On, False-Off) 

38 BLUEFOR Line Control Measure Character 

Status (T-On, False-Off) 

39 BLUEFOR Area Control Measure Character 

Status (T-On, False-Off) 

40 BLUEFOR Route Control Measure Character 

Status (T-on, False-Off) 

41 BLUEFOR Crossing control Measure character 

Status (T-on, False-off) 

42 BLUEFOR Fire Plan Control Measure Character 

Status (T-On, False-Off) 


D-99 







43 

BLUEFOR Map Feature Control 

Measure status (T-on, False-off) 

Character 

44 

OPFOR Any Control Measure Status 
(T-On, False-Off) 

character 

45 

opfor Division Control Measure 

Status (T-On, False-Off) 

Character 

46 

OPFOR Regiment Control Measure 
status (T-on, False-off) 

Character 

47 

OPFOR Battalion Control Measure 
Status (T«On, False-Off) 

Character 

48 

opfor company Control Measure 

Status (T«On, False-Off) 

Character 

49 

OPFOR Point control Measure status 
(T-on, False-Off) 

Character 

50 

OPFOR Line control Measure status 
(T«on, False-Off) 

Character 

51 

OPFOR Area Control Measure Status 
(T-on, False-Off) 

Character 

52 

opfor Route control Measure StatuB 
(T-on, False-Off) 

Character 

53 

OPFOR Crossing Control Measure 
Status (T-on, False-Off) 

Character 

54 

OPFOR Fire plan Control Measure 
Status (T-on, False-off) 

Character 

55 

OPFOR Map Feature Control Measure 
Status (T-on, False-Off) 

Character 


DATA BASE: TRAN_NEW_C2 
TYPE: DELIMITED ASCII 


pgggri-ptipn 

New command and control product recorded transactions. 


Field * 
1 
2 

3 

4 


ri tld mat 

Participant (G2, 03, G4, EX) 
Message Date (CCyymmdd) 

Message Tiae (hhmrnss) 
window Type 


IYP8 

Character 

Character 

Numeric 

Character 


D-100 






5 

Window stack Index 


Numeric 

6 

Message Product Number 


Numeric 

7 

send to G2 Flag (T-True, 

F-False) 

Character 

8 

Send to G3 Flag (T-True, 

F-False) 

Character 

9 

send to G4 Flag (T-True, 

F-False) 

Character 

10 

Send to Experimenter Flag (T-True, 
F-False) 

Character 


DATA BASE: TRAN_NEW_CNTRL_MSR 
TYPE: DELIMITED ASCII 

Description 

Mew control measure recorded transactions. 


Field < 

Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

character 

5 

Window Stack index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (bhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Control Measure Number 

Numeric 

10 

control Measure Name 

character 

11 

Color (SDB_SIDE_TYPE) 

Character 

12 

Control Measure Type 

Character 

13 

Display on Map Scale 1:40000 
(T-True, F-False) 

Character 

14 

Display on Map Scale 1:80000 
(T-True, F-False) 

Character 


D—101 





15 

Display on Map Scale It 160000 
(T-True, r-ralse) 

character 

16 

Display on Map Scale li400000 
(T-True, F-Palse) 

character 

17 

Display on Map Scale 1:800000 
(T-True, F-False) 

Character 

18 

control Measure status 
(SDB_CONTROIi_MEASURE__STATUS) 

Character 

19 

Effective Date (CCyymmdd) 

Character 

20 

Effective Tine (hhmm) 

Numeric 

21 

Point 1 X coordinate 

Numeric 

22 

Point 1 y coordinate 

Numeric 

23 

Point 2 X coordinate 

Numeric 

24 

Point 2 Y coordinate 

Numeric 

25 

Point 3 X Coordinate 

Numeric 

26 

Point 3 y coordinate 

Numeric 

27 

Point 4 x coordinate 

Numeric 

28 

Point 4 Y coordinate 

Numeric 

29 

Point 5 X coordinate 

Numeric 

30 

Point 5 Y coordinate 

Numeric 

31 

Point 6 X coordinate 

Numeric 

32 

Point 6 Y coordinate 

Numeric 

33 

Point 7 X Coordinate 

Numeric 

34 

Point 7 Y coordinate 

Numeric 

35 

Point 8 x coordinate 

Numeric 

36 

Point 8 Y coordinate 

Mumeric 

37 

Point 9 x Coordinate 

Numeric 

38 

Point 9 y coordinate 

Numeric 

39 

Point 10 x coordinate 

Numeric 

40 

Point 10 Y Coordinate 

Numeric 


D-102 



41 

Point 

11 

X 

Coordinate 

Numeric 

42 

Point 

11 

Y 

Coordinate 

Numeric 

43 

Point 

12 

X 

coordinate 

Numeric 

44 

Point 

12 

Y 

Coordinate 

Numeric 

45 

Point 

13 

X 

Coordinate 

Numeric 

46 

Point 

13 

Y 

coordinate 

Numeric 

47 

Point 

14 

X 

Coordinate 

Numeric 

48 

Point 

14 

Y 

Coordinate 

Numeric 

49 

Point 

15 

X 

Coordinate 

Numeric 

50 

Point 

15 

Y 

Coordinate 

Numeric 


DATA BASE: TRAN_NEW_OBSTACLE 
TYPE: DELIMITED ASCII 


Deacription 

New obstacle recorded transactions. 


rigid t 

rigid hsptc 

Type 

i 

Participant (G2, G3, G4, EX) 

character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

scenario Date (CCyymmdd) 

Character 

7 

scenario Time (hhmm) 

Numeric 

8 

OPLAW Number 

Numeric 

9 

obstacle Number 

Numeric 

10 

Color (SDB_SIDE_TYPE) 

character 

11 

Obstacle Type 

Character 

12 

obstacle status 
(SDB_OBSTACLE_STATU6) 

character 

13 

Effective Date (CCyymmdd) 

Character 


D-103 




•I 


14 

Effective Time (hhmm) 

Numeric 

15 

Center X Coordinate 

Numeric 

16 

Center Y Coordinate 

Numeric 

17 

Frontage 

Numeric 

18 

Depth 

Numeric 

19 

Orientation 

Numeric 

20 

Lane or Gap flag (T«True, F-False) 

Character 

21 

Echelon 

Character 


DATA BASE: TRAN_OBSTACLE_ 

_DEL 


TYPE: DELIMITED ASCII 


Description 

obstacle delete recorded transactions. 


Field # 

Field Name 

Type 

1 

Participant (g2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window stack index 

Numeric 

6 

Scenario Date (CCyymmdd) 

character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Obstacle Number 

Numeric 


D-104 








DATA BASE] TRAN_OBSTACLE_EFF TIME 
TYPE: DELIMITED ASCII 


Description 

Obstacle effective time update recorded transactions. 


Field » 

Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

obstacle Number 

Numeric 

10 

Effective Date (CCyymmdd) 

Character 

11 

Effective Time (hhmm) 

Character 


DATA BASE: TRAN_OBSTACLE 

_LOC 


TYPE: DELIMITED ASCII 

Description 

Obstacle location update recorded transactions. 


Field « 

Field Name 

Type 

1 

Participant (G2, g3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window stack index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 


D-105 




9 

Obstacle Number 

Muneric 

10 

Center X Coordinate 

Numeric 

11 

Center Y Coordinate 

Muneric 

DATA BASE: TRAN_OBSTACLE_STATUS 

TYPE: DELIMITED ASCII 

Descri.Dti.on 

obstacle status update recorded transactions. 

Field A Field Eame TYPO 

1 

Participant (G2, G3, g4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Tine (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window stack index 

Numeric 

6 

Scenario Date (CCyymndd) 

character 

7 

Scenario Tine (hhmn) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Obstacle Number 

Numeric 

10 

Obstacle Status 

Character 

(SDB_OBSTACLE_STATUS) 

DATA BASE: TRAN_OPFOR_REINFORCE 

TYPE: DELIMITED ASCII 

DescyipUgn 

opfor unit reinforcing tine update recorded transactions. 

Eisia_i 

rlold -Kama 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmnss) 

Numeric 

4 

window Type 

Character 


D—106 





5 

Window stack indax 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhnun) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

Character 

10 

Unit Number 

Numeric 

11 

Reinforcing Boura 

Numeric 


DATA BASE: TRAN_OPFOR_STRENGTH 


TYPE: DELIMITED ASCII 


Description 
OPFOR unit 

strength update recorded transactions. 


Field ♦ 

Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

Scenario Date {CCyymmdd) 

Character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force <SDB_SIDE_TYPE) 

Character 

10 

Unit Number 

Numeric 

11 

Strength Percent 

Numeric 


DATA BASE: TRAN_OPFOR_TASK_ORG 
TYPE: DELIMITED ASCII 

Description 

OPPOR task organization updata racordad tranaactiona. 


D-I07 







Field I 

rlalfl..naw( 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Tine (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

window Stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

character 

7 

scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

character 

10 

Unit Number 

Numeric 

11 

Higher Echelon Unit Number 

Numeric 


DATA BASE: TRAN_PERSONNEL 


TYPE: DELIMITED 

ASCII 

Description 

unit personnel update recorded transactions. 


Field 1 

field j»ame 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window Stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

Character 

10 

unit Number 

Numeric 

11 

officer strength Change 

Numeric 


D-108 




12 Enlisted strength change Numeric 

DATA BASE: TRAN_REF_REQUEST 
TYPE: DELIMITED ASCII 


Description 

Request for reference product recorded transaction. 


Field # 

field Name 

xm 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

Window stack Index 

Numeric 

6 

Reference Product Number 

Numeric 


DATA BASE: TRAN_REP_VJINDOW 
TYPE: DELIMITED ASCII 


Description 

View reference window manipulation recorded transactions. 


Eield j 

Eield Mama 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

window Type 

Character 

5 

Window stack Index 

Numeric 

6 

Window Action (S*Stop, T-close 
Socket, N>Connect, O-open, 
enclose) 

Character 


DATA BASE: TRAN_SITUATION_REQUEST 
TYPE: DELIMITED ASCII 

BgfgjipSjLgp 

Request for situation data recorded transactions. 


D-109 




Field # 

Field Hame, 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

Character 

3 

Message Tine (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

window stack Index 

Numeric 

6 

Message Type Requested 
(MSG_MESSAGES) 

Character 


DATA BASE! TRAN_SITUATION_WINDOW 


TYPE: DELIMITED 

ASCII 

Description 

window manipulation recorded transactions. 


Field i 

1 Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyynmdd) 

Character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

window stack Index 

Numeric 

6 

Window Action (S=Stop, T*Close 
Socket, N=Connect, o*=open, 
enclose) 

Character 





5 

window stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhnun) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

Character 

10 

Unit Number 

Numeric 

11 

Unit Hission (SDB_FORCE_MISSION) 

Character 


DATA BASE! TRAN_UNIT_LOCATION 


TYPE! DELIMITED 

ASCII 

DescriDtion 

Unit location update recorded transactions. 


Field 

_i Field Name 

Type 

1 

Participant (G2, G3, G4, EX) 

Character 

2 

Message Date (CCyymmdd) 

character 

3 

Message Time (hhmmss) 

Numeric 

4 

Window Type 

Character 

5 

window stack Index 

Numeric 

6 

Scenario Date (CCyymmdd) 

Character 

7 

Scenario Time (hhmm) 

Numeric 

8 

OPLAN Number 

Numeric 

9 

Force (SDB_SIDE_TYPE) 

character 

10 

Unit Number 

Numeric 

11 

X coordinate 

Numeric 

12 

Y coordinate 

Numeric 


DATA BASE! VEGETATION_lTOlS0 
TYPE! BINARY 

BgfgxlpUgn 

Vegetation intag* £11* for th* It 160,000 map teal*. 


D-lll 





This vegetation data base consists of byte values representing the color 
lookup table value to use to represent the vegetation type. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 40 columns and 25 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: VEGETATION_lTO400 
TYPE: BINARY 


Description 

Vegetation image file for the 1:400,000 map scale. 

This vegetation data base consists of byte values representing the color 
lookup table value to use to represent the vegetation type. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 16 columns and 10 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: VEGETATION__lTO80 
TYPE: BINARY 


Description 

Vegetation image file for the 1:80,000 map scale. 

This vegetation data base consists of byte values representing the color 
lookup table value to use to represent the vegetation type. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 79 columns and 49 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: VEGETATION_lTO800 
TYPE: BINARY 


Descript ion 

Vegetation image file for the 1:800,000 map scale. 

This vegetation data base consists of byte values representing the color 
lookup table value to use to represent the vegetation type. The data is 
organized in column/row order (columns within rows) from northwest to 
southeast with 8 columns and 6 rows. Each record is organized in column/row 
order from northwest to southeast with 64 columns and 80 rows (5120 bytes). 


DATA BASE: VEGETATION_DESC_lTOl60 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:160,000 vegetation image file. 


D-112 




Column 


field Name 


Type 


width 


Dec 


1 

Vegetation image file name for 
this nap scale 

Character 

60 


Record 2 

.(Data .Base ,gi 2 e) 




1 

Number of vegetation image records 
in the X direction for this nap 

scale 

Numeric 

5 

0 

6 

Number of vegetation image records 
in the Y direction for this map 
scale 

Numeric 

5 

0 

Record 3 

(Record Site' 




1 

Number of vegetation image points 
in a record in the X direction 

Numeric 

5 

0 

6 

Kumber of vegetation image points 
in a record in the Y direction 

Numeric 

5 

0 

Record. 4 

(Data Base Point Size» 




1 

Number of vegetation image points 
in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of vegetation image points 
in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(Hap Oriainl 




4 

Number of meters in the X 
direction from KAO00000 to the 
northwest corner of the vegetation 
image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MAOOOOOO to the 
northwest corner of the vegetation 
image 

Numeric 

7 

0 


(field 





1 Grid interval for this nap acala Numeric 5 0 

(in meters) 


DATA BASEI VEGETATION_DESC_1T0400 
TYPEi VARIABLE ASCII 


Description 


D-113 



Description of the 1:400,000 vegetation inage file. 


column 

field Name 

Type 

width 

Dec 

Record 1 

(Imaae File! 




1 

Vegetation image file name for 
this map scale 

Character 

6t> 


Record 2 

(Data Base Size) 




1 

Number of vegetation image records 
in the X direction for this map 

scale 

Numeric 

5 

0 

6 

Number of vegetation image records 
in the Y direction for this map 
scale 

Numeric 

5 

0 

Record 3 

(Record size) 




1 

Number of vegetation image pointB 
in a record in the X direction 

Numeric 

5 

0 

6 

Number of vegetation image points 
in a record in the Y direction 

Numeric 

5 

0 

Record 4 

(Data Base Point size) 




1 

Number of vegetation image points 
in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of vegetation image points 
in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(Man Oriain) 




4 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the vegetation 
image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MA000000 to the 
northwest corner of the vegetation 
image 

Numeric 

7 

0 

Record 6 

1 

(Grid Interval) 

Grid interval for this map scale 
(in meters) 

Numeric 

5 

0 


D-114 





DATA BASE: VEGETATION_DESC_lTO80 
TYPE: VARIABLE ASCII 


Description 

Description of the 1:80,000 vegetation image file. 



field Name 

Type 

width 

Dec 

Record 1 

(Imaoe Pile! 




1 

Vegetation image file name for 
this map scale 

Character 

60 


Record 2 

(Data Base size) 




1 

Number of vegetation image records 
in the X direction for this map 
scale 

Numeric 

5 

0 

6 

Number of vegetation image records 
in the Y direction for this map 
scale 

Numeric 

5 

0 

Record 3 

(Record size) 




1 

Number of vegetation image points 
in a record in the X direction 

Numeric 

5 

0 

6 

Number of vegetation image points 
in a record in the Y direction 

Numeric 

5 

0 

Record 4 

(Data Base Point size) 




1 

Humber of vegetation image points 
in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of vegetation image points 
in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

iMao Orlain) 




4 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the vegetation 
image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from HA000000 to the 
northwest corner of the vegetation 

image 

Numeric 

7 

0 

Record 6 

1 

(Grid interval) 

Grid interval for this map scale 

Numeric 

5 

0 


(in aetera) 


D-115 



DATA BASE: VEGETATION DESC 1TO800 


TYPE: VARIABLE ASCII 

Description 

Description of the 1:800,000 vegetation image file. 



Field Name 

Type 

Width 

Dec 

Record 1 

dmaae File) 




1 

Vegetation image file name for 
this map scale 

Character 

60 


Record 2 

(Data Base Size) 




1 

Number of vegetation image records 
in the X direction for this map 

scale 

Numeric 

5 

0 

6 

Number of vegetation image records 
in the Y direction for this map 
scale 

Numeric 

5 

0 

Record 3 

(Record Size) 




1 

Number of vegetation image points 
in a record in the X direction 

Numeric 

5 

0 

6 

Number of vegetation image points 
in a record in the Y direction 

Numeric 

5 

0 

Record 4 

(Data Base Point size) 




1 

Number of vegetation image points 
in the data base in the X 
direction 

Numeric 

6 

0 

7 

Number of vegetation image points 
in the data base in the Y 
direction 

Numeric 

6 

0 

14 

Number of meters per pixel for 
this map scale 

Numeric 

7 

3 

Record 5 

(Mao oriain) 




4 

Number of meters in the X 
direction from MA000000 to the 
northwest corner of the vegetation 

image 

Numeric 

7 

0 

14 

Number of meters in the Y 
direction from MAOOOOOO to the 
northwest corner of the vegetation 

image 

Numeric 

7 

0 

Record 4 

(Grid interval) 





1 Grid interval for this map scale Numeric 5 0 

(in meters) 


D-116 





APPENDIX E - EDDIC dBASE DATA BASES 

This appendix describes the EDDIC PC-based data bases. Table E-l lists 
the PC-based data base. This appendix also includes the record layouts for 
the data bases. 


Table E-l. EDDIC Sun-Based Data Bases 


Data Base Name 
BLUEFOR_AMMO_SOURCE 

BLUEFOR_AMMO_TRACK 

BLUEFOR_ASSET_UNIT 

BLUEFOR_AUTH_AMMO_INDEX 
BLUEFOR AUTH AMMO 


Description 

Initial Ammunition levels for BLUEFOR units. 
(ASCII format). 

List of ammunition types to include in the 
graphical unit status report (Ascii format). 

List of BLUEFOR units that have initial 
levels of assets assigned to them (ASCII 
format). 

index file for the bluefor authorized 
ammunition levels data base (Ada format). 

BLUEFOR authorized ammunition levels (Ada 
format). 


BLUEFOR_auth_equip_index Index file for the BLUEFOR authorized 

equipment levels data base (Ada format). 

BLUEFOR_AUTH_EQUIP BLUEFOR authorized equipment levels (Ada 

format). 


BLUEFOR_CM_EDIT_MENU 

BLUEFOR_CM_VIEW_MENU 

BLUEFOR_CURR_AMMO 
BLUEFOR_CURR_AMMO_INDEX 
BLUEFOR_CURR_EQUIP_INDEX 
BLUEFOR CURR EQUIP 


Description of the walking menu to display 
when a BLUEFOR control measure is selected on 
the tactical map in a window with edit 
capability (ASCII format). 

Description of the walking menu to display 
when a BLUEFOR control measure is selected on 
the tactical map in a window with view only 
capability (ASCII format). 

BLUEFOR current ammunition levels (Ada 
format). 

Index file for the BLUEFOR current ammunition 
levels data base (Ada format). 

Index file for the BLUEFOR current equipment 
levels data base (Ada format). 

BLUEFOR current equipment levels (Ada 
format). 


E-l 




BLUEFOR_EQUIP_SOURCE 

BLUEFOR_EQUIP_TRACK 

BLUEFOR_FUEL 

BLUEFOR_FUEL_INDEX 

BLUEFOR_FUEL_SOURC£ 

BLUEFOR_OBS_EDIT_MENU 

BLUEFOR_OBS_VIEW_MENU 

BLUE F OR_ORGANIC_TASK_ORG 
BLUEFOR_PERSONNEL 

BLUEFOR PERSONNEL INDEX 


Initial equipment levels for BLUEFOR units 
(ASCII format). 

List of BLUEFOR equipment types to include in 
the graphical unit status report (ASCII 
format). 

BLUEFOR authorized and current fuel levels 
(Ada format). 

Index file for the BLUEFOR fuel level data 
base (Ada format). 

Initial fuel levels for BLUEFOR units (ASCII 
format). 

Description of the walking menu to display 
when a BLUEFOR obstacle is selected on the 
tactical map in a window with view only 
capability (ASCII format). 

Description of the walking menu to display 
when a BLUEFOR obstacle is selected on the 
tactical map in a window with edit capability 
(ASCII format). 

Organic task organization for the bluefor 
units (ASCII format). 

BLUEFOR authorized and current personnel 
levels (Ada format). 

Index file for the BLUEFOR personnel level 
data base (Ada format). 


BLUEFOR_PERSONNEL_SOURCE 
BLUEFOR_TASK_ORG_SOURCE 
BLUEFOR_UNIT_CONVERT 
BLUEFOR_UNIT_LOC_INDEX 
BLUEFOR UNIT LOC SOURCE 


Initial personnel levels for BLUEFOR units 
(ASCII format). 

Initial task organization and status for the 
BLUEFOR units (ASCII format). 

Data base to convert BLUEFOR unit names to 
unit numbers (Ads format). 

Index file for the BLUEFOR unit location data 
base (Ada format). 

Initial unit locations for the BLUEFOR units 
(ASCII format). 


BLUEFOR UNIT LOC 


BLUEFOR unit location data base (Ada format). 


E-2 







BLUEFOR_UNIT_EDIT_M£NU 

BLUEFOR_lTNIT_NAME 

BLUEFOR_UNIT_STATUS 
BLUEFOR_UNIT_STATUS_INDEX 

BLUEFOR_UNIT_VIEW_MENU 

C2_PRODUCT 

C2_PR0DUCT_DESC 

C2_PRODUCT_HEADER 

C2_PRODUCT_NAME 

C2_PR0DUCT_REC0R0 

C2_PRODUCT_SOURCE 

CNTRL_MSR_POINT 

CNTRL_MSR_POINT_INDEX 

CNTRL HSR POINT NAME 


Description of the walking menu to display 
when a BLUEFOR unit is selected on a tactical 
map in a window with edit capability (ASCII 
format). 

List of the BLUEFOR unit names. This file is 
used to assign names to the unit transactions 
in the situation recorded data (ASCII 
format). 

BLUEFOR unit status (Ada format). 

index file for the BLUEFOR unit status data 
base (Ada format). 

Description of the walking menu to display 
when a BLUEFOR unit is selected on the 
tactical map in a window with view only 
capability (ASCII format). 

command and control product data base. 
Includes the products in the view situation, 
build and view message windows (Ada format). 

Command and control product description data 
base. This data base indicates which record 
from the C2_PRODUCT data base to use for a 
product (Ada format). 

Command and control report headers. The 
report headers only applies to those products 
in the view situation window (Ada format). 

List of the command and control product 
names. This file is used to assign names to 
the command and control transactions in the 
C2 product recorded data (ASCII format). 

Command and control data recording 
transactions (Ada format). 

Description of the command and control 
products to include in the view situation and 
build windows (ASCII format). 

Point control measures (Ada format). 

Index file for the point control measure data 
base (Ada format). 

List of the point control measure names. 

This file is used to assign names to the 
point control measure transactions in the 
situation recorded data (ASCII format). 


E-3 






CONTOUR 1TO160 


Map contour image file for the 1:160,000 map 
scale (Binary format). 


CONTOUR_lTO400 

CONTOUR_lTO80 

CONTOUR_lTO800 

CONTOUR_DESC 

CONTOUR_DESC_lTOl6 0 

C0NT0UR_DESC_lT04 0 0 

C0NT0UR_DESC_1T08 0 

C0NT0UR_DESC_1T08 0 0 

CONTROL_MEASURE 
CONTROL MEASURE NAME 


CONTROL_MEASURE_SOURCE 
CONTROL MEASURE INDEX 


ELEVATION 1TO400 


i 

ELEVATION_DESC_lT040 0 
ELEV_BAND_1T016 0 
ELEV_BAND_1T04 0 0 
ELEV_BAND_lTO80 
ELEV BAND 1T0800 


Map contour image file for the 1:400,000 map 
scale (Binary format). 

Map contour image file for the 1:80,000 map 
scale (Binary format). 

Map contour image file for the 1:800,000 map 
scale (Binary format). 

Description of the contour files to include 
in the tactical map system (ASCII format). 

Description of the 1:160,000 contour image 
file (ASCII format). 

Description of the 1:400,000 contour image 
file (ASCII format). 

Description of the 1:80,000 contour image 
file (ASCII format). 

Description of the 1:800,000 contour image 
file (ASCII format). 

Control measures (Ada format). 

List of the control measure names. This file 
is used to assign names to the control 
measure transactions in the situation 
recorded data (ASCII format). 

Initial control measures (ASCII format). 

Index file for the control measure data base 
(Ada format). 

Elevation file for the 1:400,000 map scale 
(Binary format). 

Description of the 1:400,000 elevation file 
(ASCII format). 

Elevation band image file for the 1:160,000 
map scale (Binary format). 

Elevation band image file for the 1:400,000 
map scale (Binary format). 

Elevation band image file for the 1:80,000 
map scale (Binary format). 

Elevation band image file for the 1:800,000 
map scale (Binary format). 


E-4 





ELEV_BAND_DESC_lTO160 
ELEV_BAND_DESC_1T04 0 0 
ELEV_BAND_DESC_lTO80 
ELEV_BAND_DESC_lTO80 0 
EXP_CONTROL_MENU 

EXP_CONTROL_NAME 

EXP_CONTROL_PARTICIPANT 

EXP_CONTROL_PRODUCT 

EXP_CONTROL_PROD_DESC 

EXP CONTROL RECORD 


Description of the 1:160,000 elevation band 
image file (ASCII format). 

Description of the 1:400,000 elevation band 
image file (ASCII format). 

Description of the 1:80,000 elevation band 
image file (ASCII format). 

Description of the 1:800,000 elevation band 
image file (ASCII format). 

Description of the experiment control product 
walking menu. This file is created from the 
product names in the experiment control 
source file (ASCII format). 

List of the experiment control product names. 
This file is used to assign names to the 
experiment control transactions in the 
experiment control recorded data (ASCII 
format). 

List of participants that the experimenter 
can send experiment control messages to (Ada 
format). 

Experiment control products (Ada format). 

Experiment control product description data 
base. This data base indicates which record 
from the experiment control data base to use 
for a product (Ada format). 

Experiment control data recording 
transactions (Ada format). 


EXP_CONTROL_SOURCE 

FORM_DESCRIPTION 
G2 BUILD MENU 


G2 REFERENCE MENU 


Description of the products to include in the 
experiment control window (ASCII format). 

Description and layout of EDDIC form. 

Description of the build product walking menu 
for the G2 workstation. This file is created 
from the command and control product source 
file (ASCII format). 

Description of the reference product walking 
menu for the G2 workstation. This file is 
created from the reference product source 
file (ASCII format). 


E-5 






G2_VI£W_C2_MENU 

G3_BUILD_MENU 

G3_REFER£NCE_MENU 

G3_VIEW_C2_MEKU 

G4_BUILD_MENU 

G4_REFERENCE_MENU 

G4_VIEW_C2_MENU 

HELP_MENU 

HELP_NAME 

HELPJPROD_DESC 

HELP_PRODUCT 
HELP SOURCE 


Description of the view situation product 
walking menu for the G2 workstation. This 
file is created from the command and control 
product source file (ASCII format). 

Description of the build product walking menu 
for the G3 workstation. This file Is created 
from the command and control product source 
file (ASCII format). 

Description of the reference product walking 
menu for the G3 workstation. This file is 
created from the reference product source 
file (ASCII format). 

Description of the view situation product 
walking menu for the G3 workstation. This 
file is created from the command and control 
product source file (ASCII format). 

Description of the build product walking menu 
for the G4 workstation. This file is created 
from the command and control product source 
file (ASCII format). 

Description of the reference product walking 
menu for the G4 workstation. This file is 
created from the reference product source 
file (ASCII format). 

Description of the view situation product 
walking menu for the G3 workstation. This 
file is created from the command and control 
product source file (ASCII format). 

Description of the help product walking menu 
for the g 3 workstation. This file is created 
from the help product source file (ASCII 
format). 

List of the help product names. This file is 
used to assign names to the help transactions 
in the reference recorded data (ASCII 
format). 

Help product description data base. This 
data base indicates which record from the 
help product data base to use for a product 
(Ada format). 

Help products (Ada format). 

Description of the products to include in the 
help window (AJCII format). 


E-6 







ICON_STACK_DB 

LUT_HILITE_DESC 

LUT_HILITE_MAP_ON 

LUT_HILITE_MAP_OFF 

LUT_OVERLAY 

LUT_UNHILITE_DESC 

LUT_UNHILITE_MAP_ON 

LUT_UNHILITE_MAP_OFF 

MAP_3UILD_MENU 

MAP_DESC 

MAP_LEGEND 

KAP_MESSAGE_MENU 

MAP_VIEW_C 2_MENU 

MESSAGE_LOG 
OBSTACLE 
OBSTACLE INDEX 


icon stack status data base. Indicates which 
stack positrons are used and which ones are 
free (C format). 

Description of the color lookup table files 
to use when features are hilighted (ASCII 
format). 

Color lookup table to use when a map 
background (elevation band, shaded relief, or 
vegetation) is displayed and map features are 
hilighted (ASCII format). 

Color lookup table to use when a map with a 
null background is displayed and map features 
are hilighted (ASCII format). 

Color lookup table for the overlay planes 
(ASCII format). 

Description of the color lookup table files 
to use when features are not hilighted (ASCII 
format). 

color lookup table to use when a map 
background (elevation band, shaded relief, or 
vegetation) is displayed and map features are 
not hilighted (ASCII format). 

Color lookup table to use when a map with a 
null background is displayed and map features 
are not hilighted (ASCII format). 

Description of the map options walking menu 
for the build window (ASCII format). 

Description of the map image files to include 
in the tactical map system (ASCII format). 

Description of what to display in the map 
legend (ASCII format). 

Description of the map options walking menu 
for the view message window (ASCII format). 

description of the map options walking menu 
for the view situation window (ASCII format). 

Log of all the messages sent (Ada format). 

Obstacles (Ada format). 

Index for the obstacle data base (Ada 
format). 


E-7 






OBSTACLE_SOURCE 
OPFOR_AUT H_E QUIP 

OPFOR_AUTH_EQUIP_INDEX 

OPFOR_CM_EDIT_MENU 

OPFOR_CM_VIEW_M£NU 

OPFOR_CURR_EQUIP_INDEX 

OPFOR_CURR_EQUIP 
OPFOR_EQUIP_NAME 

OPFOR_EQUIP_SOURCE 

OPFOR_OBS_EDIT_MENU 

OPFOR_OBS_VIEW_MENU 

OP F OR_ORGANIC_T ASK_ORG 
OPFOR_REINFORCE_TIME 
OPFOR_TASK_ORG_SOURCE 
OPFOR UNIT CONVERT 


Initial obstacles (ASCII format). 

OPFOR authorized equipment levels (Ada 
format). 

Index file for the OPFOR authorized equipment 
levels data base (Ada format). 

Description of the walking menu to display 
when a OPFOR control measure is selected on 
the tactical map in a window with edit 
capability (ASCII format). 

Description of the walking menu to display 
when a O^FOR control measure is selected on 
the tactical map in a window with view only 
capability (ASCII format). 

Index file for the OPFOR current equipment 
levels data base (Ada format). 

OPFOR current equipment levels (Ada format). 

List of the OPFOR equipment names. This file 
is used to assign names to the equipment 
types in the situation data base (ASCII 
format). 

Initial equipment levels for OPFOR units 
(ASCII format). 

Description of the walking menu to display 
when a OPFOR obstacle is selected on the 
tactical map in a window with view only 
capability (ASCII format). 

Description of the walking menu to display 
when a OPFOR obstacle is selected on the 
tactical map in a window with edit capability 
(ASCII format). 

Organic task organization for the OPFOR units 
(ASCII format). 

Initial reinforcing times for OPFOR units 
(ASCII format). 

Initial task organization for the OPFOR units 
(ASCII format). 

Data base to convert OPFOR unit names to unit 
numbers (Ada format). 


E-8 






OPFOR_UNIT_EDIT_MENU 

OPFOR_UNIT_LOC 
OPFOR_UNIT_LOC_INDEX 

OPFOR_UNIT_LOC_SOURCE 

OPFOR UNIT NAME 


OPFOR__UNIT_STATUS_INDEX 

OPFOR_UNIT_STATUS 
OPFOR UNIT STATUS SOURCE 


Description of the walking menu to display 
when a OPFOR unit is selected on a tactical 
map in a window with edit capability (ASCII 
format). 

OPFOR unit location data base (Ada format). 

Index file for the OPFOR unit location data 
base (Ada format). 

Initial unit locations for the OPFOR units 
(ASCII format). 

List of the OPFOR unit names. This file is 
used to assign names to the unit transactions 
in the situation recorded data (ASCII 
format). 

Index file for the OPFOR unit status data 
base (Ada format). 

OPFOR unit status (Ada format). 

Initial status of the OPFOR units (ASCII 
format). 


OPFOR UNIT VIEW MENU 


OPLAN__LIST 

OPLAN_LIST_SOURCE 

PRODUCT HARDCOPY 


Description of the walking menu to display 
when a OPFOR unit is selected on the tactical 
map in a window with view only capability 
(ASCII format). 

List of existing Operational plans in the 
system (Ada format). 

Operational planB to initially have in the 
system (ASCII format). 

ASCII output file of the products printed by 
CDB HARDCOPY. 


R£FERENCE_HEADER 
REFERENCE NAME 


REFERENCE PROD DESC 


REFERENCE PRODUCT 


Reference report headers (Ada format). 

List of the reference product names. This 
file is used to assign names to the reference 
transactions in the reference recorded data 
(ASCII format). 

Reference product description data base. 

This data base indicates which records from 
the reference product data base to use for a 
product (Ada format). 

Reference product data base (Ada format). 


E-9 




REFERENCE RECORD 


(Ada 


REFERENCE_SOURCE 

ROOT_WINDOW_MENU 

SCREEN_DUMP_IMAGE 
SEND_PARTICIPANT_SOURCE 
SHAD_RELF_1T0160 
SHAD_RELF_1T040 0 
SHAD_RELF_1T080 
SHAD_RELF_1T080 0 
SHAD_RELF_DESC_1TO16 0 
SHAD_RELF_DESC_1T0400 
SHAD_RELF_DESC_1T080 
SHAD_RELF_DESC_lT080 0 
SITUATION_RECORD 
TASK_ORG_TOOL_MENU 

TASK ORG TOP UNIT MENU 


Reference data recording transactions 
format). 

Description of the reference products to 
include in the view reference window (ASCII 
format). 

Description of the walking menu to display in 
the root window. The root window is any part 
of the screen where a window or button is not 
displayed (ASCII format). 

Bitmap image of a screen of a Sun workstation 
(Bitmap format). 

List of the participants that messages can be 
sent to (ASCII format). 


Shaded relief image file for the 1:160,000 
map scale (Binary format). 


shaded relief image file for the 1:400,000 
map scale (Binary format). 

shaded relief image file for the 1:80,000 map 
scale (Binary format). 


Shaded relief image file for the 1:800,000 
map scale (Binary format). 


Description of the 1:160,000 shaded relief 
image file (ASCII format). 


Description of the 1:400,000 shaded relief 
image file (ASCII format). 


Description of the 1:80,000 shaded relief 
image file (ASCII format). 


Description of the 1:800,000 shaded relief 
image file (ASCII format). 


Situation data recording transactions (Ada 
format). 


Description of the walking menu to display as 
a popup menu for the task organization tool 
(Ascii format). 


Description of the walking menu to display 
when the top unit button is selected in the 
task organization tool (ASCII format). 


E-10 






T AS K_ORG_UMIT_MENU 

TASK_ORG_UNIT_TYPE_MENU 

TOOL_MENU 

TRAN_ACTIVITY 
TRAN_AMMUNITION 
TRAN_BLUEFOR_TASK_ORG 
TRAN_C2_REQUEST 
TRAN_C2_WINDOW 

TRAN_CNTRL_HSR_DEL 
TRAN_CNTRL_MSR_EFF_TIME 
TRAN_CNTRL_MSR_LOC 
TRAN_CNTRL_MS R_S TAT 
TRAN_CONTROL_REQUE S T 
TRAN_CONTROL_WINDOW 

TRAN_EQUIPMENT 

TRAN_FUEL 

TRAM LOOKUP TABLE 


Description of the walking menu to display as 
a popup menu when a unit is selected in the 
task organization tool (ASCII format). 

Description of the multiple selection menu to 
display when the unit type button is selected 
in the task organization tool (ASCII format). 

Description of the walking menu defining the 
tools available in the tool window (ASCII 
format). 

Unit activity update recorded transactions 
(ascii format). 

Unit ammunition update recorded transactions 
(ASCII format). 

BLUEFOR task organization update recorded 
transactions (ASCII format). 

Request for command and control product 
recorded transactions (ASCII format). 

View situation, build, and view message 
window manipulation recorded transactions 
(ASCII format). 

Control measure delete recorded transactions 
(ASCII format). 

Control measure effective time update 
recorded transactions (ASCII format). 

Control measure location update recorded 
transactions (ASCII format). 

Control measure status update recorded 
transactions (ASCII format). 

Request for experiment control product 
recorded transactions (ASCII format). 

Tool and experiment control window 
manipulation recorded transactions (ASCII 
format). 

Unit equipment update recorded transactions 
(ASCII format). 

Unit fuel update recorded transactions (Ascii 
format). 

Color lookup table update recorded 
transactions (ASCII format). 


E-ll 



TRAN_MAP 

TRAN_N£W_C2 

TRAN_NEW_CNTRL_MSR 

TRAN_NEW_OBSTACLE 

TRAN_OBSTACLE_D£L 

TRAN_OBSTACLE_EFF_TIME 

TRAN_OBSTACLE_LOC 

TRAN_OBSTACLE_STATUS 

TRAN_OPFOR_REINFORCE 

TRAN_OPFOR_STRENGTH 

TRAN_OPFOR_TASK_ORG 

TRAN_PERSONNEL 

TRAN_REF_REQUEST 

TRAN_REF_WINDOW 

TRAN_SITUATION_REQUEST 

TRAN_SITUATION_WINDOW 

TRAN_UNIT_MISSION 

TRAN_UN IT__LOC AT ION 

VEGETATION 1TO160 


Tactical map control recorded transactions 
(ASCII format). 

New command and control product recorded 
transactiona (ASCII format). 

New control measure recorded transactions 
(ASCII format). 

New obstacle recorded transactions (ASCII 
format). 

Obstacle delete recorded transactions (ASCII 
format). 

Obstacle effective time update recorded 
transactions (ASCII format). 

obstacle location update recorded 
transactions (ASCII format). 

Obstacle status update recorded transactions 
(ascii format). 

OPFOR unit reinforcing time update recorded 
transactions (ASCII format). 

OPFOR unit strength update recorded 
transactions (ASCII format). 

OPFOR task organization update recorded 
transactions (ASCII format). 

Unit personnel update recorded transactions 
(Ascii format). 

Request for reference product recorded 
transaction (ASCII format). 

View reference window manipulation recorded 
transactions (ASCII format). 

Request for situation data recorded 
transactions (ASCII format). 

Window manipulation recorded transactions 
(ASCII format). 

unit mission update recorded transactions 
(ASCII format). 

Unit location update recorded transactions 
(ASCII format). 

Vegetation image file for the It 160,000 map 
scale (Binary format). 


E-12 




VEGETATION 1TO400 


VEGETATI0N_IT080 
VEGETATION_lT0800 
VEGETATI0N_DESC_1T016 0 
VEG£TATI0N_DESC_1T04 0 0 
VEG£TATI0N_DESC_1T08 0 
VEGETATION DESC 1TO800 


Vegetation image file for the 1:400,000 map 
scale (Binary format). 

Vegetation image file for the 1:80,000 map 
scale (Binary format). 


Vegetation image file for the 1:800,000 map 
scale (Binary format). 


Description of the 1:160,000 vegetation image 
file (Ascii format). 


Description of the 1:400,000 vegetation image 
file (ASCII format). 


Description of the 1:80,000 vegetation image 
file (ASCII format). 


Description of the 1:800,000 vegetation image 
file (ASCII format). 


Table E-2. EDDIC PC-Based Data Bases 


Data Base Name 
BASEUNIT 

BATTAL1 

BDEDISP 

BRIGADE1 

BUNXREF 

C2_RQST 

CCAB 


Description 

Authorized assets for the basic bluefor company level 
unit types. All company level units that are added to 
the scenario start with the assets that are contained in 
its base unit. 

Battalion level units in day 1 of the scenario. There is 
a different version of this data base for each day of the 
scenario (identified with a 2..n suffix). 

Temporary data base to print the brigade personnel 
strength report. 

Brigade level units in day 1 of the scenario. There is a 
different version of this data base for each day of the 
scenario (identified with a 2..n suffix). 

conversion data base for converting BLUEFOR unit IDs to 
names. This data base is used to assign unit names to 
recorded data. 

Data recording of the Command and Control (C2) product 
requests. 

summary results of a CCAB exercise. 


E-13 






CMXREF 

CNTLMSR1 

COAATCAN 

COAATM1 

COAATM2 
COAATSC 
COAATWT 
COMPANY1 

CTL_RQST 

CTL_XREF 

DAY 

DIVISN1 

DUMMY 

ED_LUT 

ED_MAP 

ED_WIND 

EDC2RQ 

EDCOTM1 


Conversion data base for converting control measure IDs 
to names. This data base is used to assign control 
measure names to recorded data. 

Control measures in day 1 of the scenario. A different 
version of this data base exists for each day of the 
scenario. 

COAAT canned critical events. These are used to 
initialize the COAAT data bases for the manual structured 
condition. 

Critical events identified by the participant in module 1 
of COAAT. 

war-gaming results from module 2 of COAAT. 

Scaling factors assigned to the war-gaming categories. 

Weights assigned to the war-gaming factors. 

Company level units in day 1 of the scenario. Contains 
the current asset levels. There is a different version 
of this data base for each day of the scenario. 

Data recording of the experiment control product 
requests. 

Conversion data base for converting experiment control 
product IDs to names. This data base is used to assign 
experiment control names to recorded data. 

List of days in the scenario and associated data bases. 

Division level units in day 1 of the scenario. There is 
a different version of this data base for each day of the 
scenario. 

Dummy data base to assign to the top-level menu in the 
EDDIC data analysis program. 

Color lookup table updates received from the sun system 
for an experiment. 

Digital map interactions received from the Sun system for 
an experiment. 

EDDIC window interactions received from the sun system 
for an experiment. 

EDDIC C2 product requests received from the Sun system 
for an experiment. 

COAAT module 1 data received from the sun system for an 
experiment. 


E-14 







EDCOTM2 

EDCOTSC 

EDCOTWT 

EDCTLRQ 

EDNEWC2 

EDREFRQ 

EDSTACTV 

EDSTAMMO 

EDSTBLTO 

EDSTCMDEL 

EDSTCMEF 

EDSTCMLC 

EDSTCMST 

EDSTEQP 

EDSTFUEL 

EOSTMZSS 

EDSTNWCM 

EDSTNWOB 

EDSTOBDL 


COAAT module 2 data received from the Sun system for an 
experiment. 

COAAT scales received from the sun system for an 
experiment. 

COAAT weights received from the Sun system for an 
experiment. 

Experiment control product requests received from the Sun 
system for an experiment. 

New c2 products received from the Sun system for an 
experiment. 

Reference product requests received from the Sun system 
for an experiment. 

Unit activity updates received from the Sun system for an 
experiment. 

Ammunition level updates received from the sun system for 
an experiment. 

bluefor task organization updates received from the sun 
system for an experiment. 

Control measure delete transactions received from the sun 
system for an experiment. 

Control measure effective time updates received from the 
Sun system for an experiment. 

Control measure location updates received from the sun 
system for an experiment. 

control measure status updates received from the sun 
system for an experiment. 

Unit equipment strength updates received from the Sun 
system for an experiment. 

Unit fuel level updates received from the Sun system for 
an experiment. 

Unit mission updates received from the Sun system for an 
experiment. 

New control measures received from the Sun system for an 
experiment. 

New obstalces received from the Sun system for an 
experiment. 

obstacle delete transactions received from the Sun system 
for an experiment. 


E-15 





EDSTOBEF 

Obstacle effective time update received from the Sun 
system for an experiment. 

EDSTOBLC 

Obstacle location update received from the sun system for 
an experiment. 

EDSTOBST 

Obstacle status updates received from the Sun system for 
an experiment. 

EDSTOPTO 

OPFOR task organization updates received from the sun 
system for an experiment. 

EDSTPERS 

Unit personnel strength updates received from the sun 
system for an experiment. 

EDSTRENF 

OPFOR unit reinforcing time updates received from the sun 
system for an experiment. 

EDSTRQST 

Situation data requests received from the Sun system for 
an experiment. 

EDSTSTNG 

OPFOR unit strength update received from the Sun system 
for an experiment. 

EDSTULOC 

unit location update received from the sun system for an 
experiment. 

EQDISPLA 

Temporary data base for displaying unit equipment 
strength report from the scenario data. 

HLP_XREF 

Conversion data base for converting help product IDs to 
names. This data base is used to assign help product 
names to recorded data. 

HMIED 

eddic Human Machine interface (BMI) questionnaire 
results. 

HMXEDCT 

eddic/coaat HMI questionnaire results. 

HST_XREF 

Conversion data base for converting reference product IDs 
to names. This data base is used to assign reference 
names to recorded data. 

LOSSRAT2 

Loss rates to use to create day 2 of the scenario from 
day 1. There are different versions of this data base 
for creating other days of the scenario. 

LUT_CTRL 

Color lookup table updates recorded data. 

HAP_CTRL 

Digital map interaction recorded data. 

MISSION 

Names to use for main attack, supporting attack, and 
reserve in the array forces scoring report. 

NEW_C2 

New c2 product recorded data. 


E-16 




OP LAN 
PERCENT 

PERDISP 

PERSTYLE 

RBASEUNI 


RBATTAL1 

RBRXGA01 

RCOMPNY1 

REF_RQST 

REF_XREF 

RUNXREF 

SCCNOP 

SCCRTEVT 

SCrACTS 

SCFORCE 

SCJUST 

SCPOHER 

SXTAWARE 

SITCMDEL 


List of initial OPLAN's in the scenario. 

Temporary data base for adjusting unit strength by a 
percent. 

Temporary data base for displaying the personnel strength 
report from the scenario data base. 

Personal style questionnaire data. 

Authorized assets for the basic OPFOR company level unit 
types. All company level units that are added to the 
scenario start with the assets that are contained in its 
base unit. 

Battalion level units in the scenario. There i3 a 
different version of this data base for each day of the 
scenario. 

Brigade level units in the scenario. There is a 
different version of this data base for each day of the 
scenario. 

Company level units in the scenario. The assets are 
assigned to units at this level. There is a different 
version of this data base for each day of the scenario. 

Reference product request recorded data. 

Conversion data base for converting reference product IDs 
to names. This data base is used to assign reference 
names to recorded data. 

Conversion data base for converting opfor unit IDs to 
names. This data base is used to assign unit names to 
recorded data. 

Experiment scores for the Concept of operations 
questionnaire. 

Experiment scores for identifying critical events. 

Experiment scores for gathering pertinent facts. 

Experiment scores for arraying the forces. 

Experiment scores for COA justification. 

Combat power assigned to each unit. This data base is 
not part of the menu system and must be updated using 
dBASE (if required). 

Situation awareness questionnaire data. 

Control measure delete recorded data. 


E-17 





SITNEWCM 

SITRQST 

SITTASKO 

SITULOC 

TASKEVAL 

TEAMPRF 

TIMELINE 

VERTASK 

WINDOW 

WORKASMT 


New control measure recorded data. 

Situation data request recorded data. 

Task organization update recorded data. 

Unit location update recorded data. 

Experiment task evaluation data. 

Team profile observation data. 

Experiment time line data. 

Temporary data base to print the task organization 
validation report. 

EDDIC window interaction recorded data. 

Workload assessment questionnaire data. 


The following section describes the record format of the dBASE data 
bases. These data bases are maintained on a PC and consist mostly of scenario 
and experiment analysis .t . 


DATA BASE: BASEUNIT.DBF 


Field 

Field Name 

Type 

width 

Dec 

Index 

1 

UNIT_NAML 

character 

12 


N 

2 

OFFICER 

Numeric 

3 


N 

3 

ENLISTED 

Numeric 

3 


N 

4 

EQ NAME 1 

Character 

8 


N 

5 

EQ_QTY_1 

Numeric 

3 


N 

6 

EQ_NAME_2 

Character 

8 


N 

7 

EQ QTY 2 

Numeric 

3 


N 

8 

EQ_NAME_3 

Character 

8 


N 

9 

EQ_QTY_3 

Numeric 

3 


N 

10 

EQ NAME 4 

Character 

8 


N 

11 

EQ QTY 4 

Numeric 

3 


N 

12 

EQ_NAME_5 

Character 

8 


N 

13 

EQ QTY_5 

Numeric 

3 


N 

14 

EQ NAME 6 

Character 

8 


N 

15 

EQ_QTY_6 

Numeric 

3 


N 

16 

EQ NAME 7 

Character 

8 


N 

17 

EQ QTY 7 

Numeric 

3 


N 

18 

EQ NAME 8 

Character 

8 


N 

19 

EQ QTY ¥ 

Numeric 

3 


V 

20 

EQ__NAME_9 

character 

8 


N 

21 

EQ~QTY 9 

Numeric 

3 


N 

22 

EQ_NAME_10 

Character 

8 


N 

23 

eq~qty_To 

Numeric 

3 


N 

24 

EQ NAME 11 

character 

8 


N 

25 

EQ~QTY Tl 

Numeric 

3 


N 

26 

EQ~NAME_12 

Character 

8 


N 


E-18 




27 

EQ_QTY_12 

Numeric 

3 

N 

28 

AM_NAME_1 

Character 

8 

N 

29 

A M _QTY_ 1 

Numeric 

6 

N 

30 

AM~NAME_2 

Character 

8 

N 

31 

AM_QTY_2 

Numeric 

6 

N 

32 

AM NAME_3 

Character 

8 

N 

33 

AM QTY_3 

Numeric 

6 

N 

34 

AM_NAME_4 

Character 

8 

N 

35 

AM~QTY 4 

Numeric 

6 

N 

36 

AM NAME_5 

character 

8 

N 

37 

AM~QTY_5 

Numeric 

6 

N 

38 

AM NAME 6 

character 

8 

N 

39 

AM_QTY_6 

Numeric 

6 

N 

40 

MOGAS 

Numeric 

5 

N 

41 

DIESEL 

Numeric 

5 

N 

42 

AVGAS 

Numeric 

5 

N 

** Total ** 


250 





DATA BASE: 

BATTALl.DBF 

Field 

Field Name 

Type 

Width 

Dec index 

1 

BN_NAME 

Character 

12 

N 

2 

ECHELON 

Character 

6 

N 

3 

TYPE 

Character 

6 

N 

4 

BATL FUNC 

character 

6 

N 

5 

ACTIVITY 

character 

6 

N 

6 

MISSION 

character 

6 

N 

7 

LOCATION 

Character 

8 

N 

8 

CO NAME 1 

character 

12 

N 

9 

CO_REL_l 

character 

6 

N 

10 

CO_NAME_2 

character 

12 

N 

11 

CO_REL_2 

Character 

6 

N 

12 

CO_NAME_3 

Character 

12 

N 

13 

CO_REL_3 

Character 

6 

N 

14 

CO_NAM£_4 

Character 

12 

N 

15 

CO REL 4 

Character 

6 

N 

16 

CO NAME 5 

Character 

12 

N 

17 

CO_REL_5 

Character 

6 

N 

18 

CO_NAME_6 

Character 

12 

N 

19 

CO_REL_6 

Character 

6 

N 

20 

CO_NAME_7 

Character 

12 

N 

21 

CO_REL_7 

Character 

6 

N 

22 

CO_NAME_8 

Character 

12 

N 

23 

CO REL 8 

character 

6 

N 

** Total ** 


195 






DATA BASE: 

BDEDISP.DBF 

Field 

Field Name 

Type 

Width 

Dec Index 

1 

UNIT_NAME 

Character 

12 

N 

2 

OFF LOSS 

Numeric 

4 

N 

3 

ENL~LOSS 

Numeric 

4 

N 

4 

OFF~GAIN 

Numeric 

4 

N 

5 

ENL GAIN 

Numeric 

4 

N 


E-19 



6 OFF_AUTH 

7 ENL_AUTH 

8 OFF_CURR 

9 ENL_CURR 

** Total ** 


Numeric 7 
Numeric 7 
Numeric 7 
Numeric 7 


57 


N 

N 

N 

N 



DATA BASE: C2_RQST.DBF 

Field Field Name Type width Dec Index 

1 SEQ NO Character 5 N 


E-20 




2 DATE 

3 TIME 

4 WINDOW 

5 STACK 

6 FUNC_AREA 

7 DATA~CAT 

8 DATA_ELE 

9 DATA_SUB 
10 DATA_LVL 

** Total **~ 


Date 

8 

Character 

6 

character 

7 

Numeric 

1 

Character 

20 

Character 

20 

Character 

20 

Character 

20 

Character 

1 


109 


N 

N 

N 

N 

N 

N 

N 

N 

N 


DATA BASE: CCAB.DBF 


Field 

Field Name 

Type 

Width 

Dec 

index 

1 

SEQ_NO 

Character 

5 


Y 

2 

CABTP 

Numeric 

3 


N 

3 

CABFD 

Numeric 

3 


N 

4 

CABWA 

Numeric 

3 


N 

5 

CABLR 

Numeric 

3 


N 

6 

CABMN 

Numeric 

3 


N 

7 

CABNW 

Numeric 

3 


N 

8 

CABIP 

Numeric 

3 


N 

9 

CABRP 

Numeric 

3 


N 

10 

CABMI 

Numeric 

3 


N 

11 

MEAN 

Numeric 

3 


N 

12 

STD 

Numeric 

3 


N 

** Total ** 


39 



Field 

Field Name 

Type 

DATA BASE: CMXREF.DBF 

Width Dec index 

1 

CM_ID 

Numeric 

3 Y 

2 

NAME 

Character 

12 N 

** Total ** 


16 


DATA BASE: CNTLMSR1•DBF 


eld 

Field Name 

Type 

Width 

Dec 

Index 

1 

NAME 

Character 

12 


N 

2 

TYPE 

Character 

6 


N 

3 

ECHELON 

Character 

6 


N 

4 

SIDE 

Character 

4 


N 

5 

SCALE1 

Logical 

1 


N 

6 

SCALE2 

Logical 

1 


N 

7 

SCALE3 

Logical 

1 


N 

8 

SCALE4 

Logical 

1 


N 

9 

SCALE5 

Logical 

1 


N 

10 

LOCI 

Character 

8 


N 

11 

LOC2 

Character 

8 


N 

12 

LOC3 

Character 

8 


N 

13 

LOC4 

Character 

8 


N 

14 

LOC5 

Character 

8 


N 

15 

LOC6 

Character 

8 


N 


E-21 




16 

DOC 7 

Character 

8 

N 

17 

' ,OC8 

character 

8 

N 

18 

LOC9 

character 

8 

N 

19 

LOCIO 

Character 

8 

N 

20 

LOCH 

Character 

8 

N 

21 

LOC12 

Character 

8 

N 

22 

LOCI 3 

Character 

8 

N 

23 

LOC14 

Character 

8 

N 

24 

LOC15 

Character 

8 

N 

** Total ** 


154 





DATA BASE: 

COAATCAN•DBF 

Field 

Field Name 

Type 

Width 

Dec Index 

1 

BALANCE 

Character 

1 

N 

2 

CE 

Character 

7 

N 

3 

COA 

Numeric 

1 

N 

4 

AVENUE 

Character 

8 

N 

5 

TYPE 

Character 

20 

N 

6 

OBJECTIVE 

Character 

20 

N 

7 

COMMENT 

Character 

20 

N 

** Total ** 


78 



DATA BASE: COAATM1.DBF 


Field 

Field Name 

Type 

width 

Dec Index 

1 

SEQ NO 

Character 

5 

N 

2 

CE 

Character 

7 

N 

3 

COA 

Numeric 

1 

N 

4 

AVENUE 

Character 

8 

N 

5 

TYPE 

Character 

20 

N 

6 

OBJECTIVE 

Character 

20 

N 

7 

COMMENT 

character 

20 

N 

** Total ** 


82 






DATA BASE: 

COAATM2 

• DBF 

Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

SEQ_NO 

Character 

5 


N 

2 

CE 

Character 

7 


N 

3 

COA 

Numeric 

1 


N 

4 

AVENUE 

Character 

8 


N 

5 

TYPE 

Character 

20 


N 

6 

OBJECTIVE 

Character 

20 


N 

7 

COMMENT 

Character 

20 


N 

8 

FR_PERS 

Numeric 

4 


N 

9 

FR_EQUIP 

Numeric 

4 


N 

10 

EN_PERS 

Numeric 

4 


N 

11 

EN~EQUIP 

Numeric 

4 


N 

12 

POL 

Numeric 

3 


N 

13 

AMMO 

Numeric 

3 


N 

14 

PEBA 

Numeric 

2 


N 

15 

TIME 

Numeric 

4 

1 

N 


E-22 



** Total ** 


no 


DATA BASE: COAATSC.DBF 


Field 

Field Name 

Type 

Width 

1 

SEQ NO 

Character 

5 

2 

COA~ 

Numeric 

1 

3 

SFR_PERS 

Numeric 

1 

4 

SFR~EQUIP 

Numeric 

1 

5 

SEN_PERS 

Numeric 

1 

6 

SEN_EQUXP 

Numeric 

1 

7 

SPOL 

Numeric 

1 

8 

SAHMO 

Numeric 

1 

9 

SFEBA 

Numeric 

1 

10 

STIME 

Numeric 

1 

11 

SSUB A 

Numeric 

1 

12 

SSUB B 

Numeric 

1 

13 

SSUB_C 

Numeric 

1 

14 

SSUB D 

Numeric 

1 

15 

SSUB E 

Numeric 

1 

16 

SSUB F 

Numeric 

1 

17 

SSUB~G 

Numeric 

1 

18 

SSUB H 

Numeric 

1 

** Total «* 


23 


Index 

y 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


DATA BASE: COAATWT.DBF 


Field 

Field Name 

Type 

Width 

1 

SEQ NO 

character 

5 

2 

FR_P£RS 

Numeric 

3 

3 

FR_EQUIP 

Numeric 

3 

4 

EN_PERS 

Numeric 

3 

5 

EN~EQUIP 

Numeric 

3 

6 

POL 

Numeric 

3 

7 

AMMO 

Numeric 

3 

8 

FEBA 

Numeric 

3 

9 

TIME 

Numeric 

3 

10 

SUB A 

Numeric 

3 

11 

SUB B 

Numeric 

3 

12 

SUB C 

Numeric 

3 

13 

SUB D 

Numeric 

3 

14 

SUB E 

Numeric 

3 

15 

SUB F 

Numeric 

3 

16 

SUB~G 

Numeric 

3 

17 

SUB_H 

Numeric 

3 

18 

sub'nami 

Character 

25 

19 

SUB_NAM2 

Character 

25 

20 

3UB~NAM3 

character 

25 

21 

SUB~NAM4 

Character 

25 

22 

SUB~NAM5 

Character 

25 

23 

8UB~NAM6 

Character 

25 

24 

SUB~NAM7 

Character 

25 

25 

SUB~NAM8 

character 

25 

* Total ** 


254 


Index 

y 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

H 

N 

N 

N 

N 

H 

N 

N 


E-23 


DATA BASE: COMPANY1.DBF 


#* 


Field Field Name Type 

Width 

1 CO_NAME 

character 

12 

2 BASE NAME 

Character 

12 

3 ECHELON 

Character 

6 

4 TYPE 

Character 

6 

5 BATL_FUNC 

Character 

6 

6 ACTIVITY 

Character 

6 

7 MISSION 

Character 

6 

8 LOCATION 

character 

8 

9 OFFICER 

Numeric 

3 

10 ENLISTED 

Numeric 

3 

11 EQ_NAME 1 

Character 

8 

12 EQ_QTY 1 

Numeric 

3 

13 EQ NAME 2 

Character 

8 

14 EQ_QTY 2 

Numeric 

3 

15 EQ_NAME 3 

Character 

8 

16 EQ_QTY 3 

Numeric 

3 

17 £Q_NAME 4 

Character 

8 

18 EQ_QTY 4 

Numeric 

3 

19 EQ_NAME 5 

Character 

8 

20 EQ_QTY_5 

Numeric 

3 

21 EQ_NAME 6 

Character 

8 

22 EQ_QTY 6 

Numeric 

3 

23 EQ NAME 7 

Character 

8 

24 EQ_QTY 7 

Numeric 

3 

25 EQ_NAME 8 

Character 

8 

26 EQ_QTY 8 

Numeric 

3 

27 EQ_NAME 9 

Character 

8 

28 EQ_QTY_9 

Numeric 

3 

29 EQ_NAME 10 

Character 

8 

30 EQ_QTY 10 

Numeric 

3 

31 EQ_NAME 11 

Character 

6 

32 EQ_QTY_11 

Numeric 

3 

33 EQ_NAME 12 

Character 

8 

34 EQ_QTY_12 

Numeric 

3 

35 AMNAMEl 

character 

8 

36 AM_QTY T 

Numeric 

6 

37 AMNAME 2 

Character 

8 

38 AM_QTY 2 

Numeric 

6 

39 AMNAME 3 

Character 

8 

40 AM_QTY T 

Numeric 

6 

41 AMNAME 4 

Character 

8 

42 AM_QTY 4 

Numeric 

6 

43 AM~NAME 5 

Character 

8 

44 AMjQTY 5 

Numeric 

6 

45 AM~NAME 6 

character 

8 

46 AM_QTY 6 

Numeric 

6 

47 MOGAS " 

Numeric 

5 

48 DIESEL 

Numeric 

5 

49 AVGAS 

Total ** 

Numeric 

5 

300 


Index 


N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


N 


E-24 



DATA BASE: CTL RQST.DBF 


Field 

Field Name 

Type 

width Dec 

1 

SEQ_NO 

Character 

S 

2 

DATE 

Date 

8 

3 

TIME 

Character 

6 

4 

WINDOW 

Character 

7 

5 

STACK 

Numeric 

1 

6 

FUN C_ARE A 

Character 

20 

7 

data~cat 

Character 

20 

8 

data BT.w 

Character 

20 

9 

data SUB 

Character 

20 

** Total ** 


108 



DATA BASE: CTL X 

Field 

Field Name 

Type 

Width Dec 

1 

PROD 

Character 

4 

2 

FUNC_AREA 

Character 

20 

3 

DATA_CAT 

Character 

20 

4 

DATA FT.-e 

Character 

20 

5 

DATA SUB 

character 

20 

** Total ** 


85 


Index 

N 

M 

N 

N 

H 

N 

N 

N 

N 


XREF.DBF 


Index 

Y 

N 

N 

N 

N 


DATA BASE: DAY.DBF 


Field 

Field Name 

Type 

Width 

1 

DATE 

Character 

10 

2 

OPLAN 

Numeric 

2 

3 

BCO__FILE 

Character 

8 

4 

bco“write 

Logical 

1 

5 

bbn~fiee 

character 

8 

3 

BBN~WRITE 

Logical 

1 

7 

BBDE_FILE 

Character 

8 

8 

bbdejwrite 

Logical 

1 

9 

BDIV_FII.E 

character 

8 

10 

BDIV_WRITE 

Logical 

1 

11 

RCO_FILE 

Character 

8 

12 

RCO~WRITE 

Logical 

1 

13 

RBN_FILE 

Character 

8 

14 

RBN_WRITE 

Logical 

1 

15 

rbde_fiue 

character 

8 

16 

RBDE WRITE 

Logical 

1 

17 

rdiv~file 

character 

8 

18 

RDIV~WRITE 

Logical 

1 

19 

CM_FIEE 

Character 

8 

20 

CM~WRITE 

Logical 

1 

21 

LOS__FILE 

character 

8 

22 

los'write 

Logical 

1 

** Total ** 

103 


Indox 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


DATA BASE: DIVISN1.DBF 


E-25 


• I 


Field 

Field Name 

Type 

width 

1 

div_name 

Character 

12 

2 

ECHELON 

Character 

6 

3 

TYPE 

Character 

6 

4 

BATL_FUNC 

Character 

6 

5 

ACTIVITY 

Character 

6 

6 

MISSION 

Character 

6 

7 

LOCATION 

Character 

8 

8 

BDE NAME1 

Character 

12 

9 

BDE~REL 1 

Character 

6 

10 

BDE~NAME2 

Character 

12 

11 

BDE_REL 2 

Character 

6 

12 

BDE_NAME3 

Character 

12 

13 

BD£_REL 3 

Character 

6 

14 

BDE_NAME4 

Character 

12 

15 

BDE_REL_4 

Character 

6 

16 

BDE_NAME5 

Character 

12 

17 

BDE_REL 5 

Character 

6 

18 

BDE~NAME6 

Character 

12 

19 

BDE~REL 6 

Character 

6 

20 

BDE_NAME7 

Character 

12 

21 

bde“rel 7 

Character 

6 

22 

BDE~NAME 8 

Character 

12 

23 

BDE_REL 8 

Character 

6 

24 

BDE_NAME9 

Character 

12 

25 

BDE_REL 9 

Character 

6 

26 

BDE~NAME10 

Character 

12 

27 

BDE_REL 10 

Character 

6 

28 

BDE NAME11 

Character 

12 

29 

BDE_REL 11 

Character 

6 

30 

BDE~NAME12 

character 

12 

31 

BDE REL 12 

Character 

6 

1 Total ** 


267 


index 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


DATA BASE s DUMMY.DBF 


Field Field Name Type 

1 EDDXC Character 

** Total ** 


Field 

Field Name 

Type 

1 

PART 

Character 

2 

DATE 

Date 

3 

TIME 

Character 

4 

WINDOW 

character 

5 

STACK 

Numeric 

6 

BACK_TYPE 

character 

7 

BACK~ACT 

Character 

8 

road”act 

Character 

9 

WATER_ACT 

Character 

10 

urban“act 

character 


width 

2 

3 


DATA BASE: 

Width 

4 

8 

6 

7 

1 

1 

1 

1 

1 

1 


Dec Index 
N 


ED_LUT.DBF 

Dec index 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 


E-26 




11 MISC_ACT 

Character 

1 

N 

12 SEQ_NO 

Character 

5 

N 

Total ** 


38 






DATA BASE: 

ED_MAP.DBF 

Field 

Field Name 

Type 

Width 

Dec Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

BACKJTYPE 

Character 

4 

N 

7 

SCALE 

Character 

5 

N 

8 

CENTER_X 

Numeric 

6 

N 

9 

CENTER Y 

Numeric 

6 

N 

10 

GRID 

Logical 

1 

N 

11 

CONTOUR 

Logical 

1 

N 

12 

BL UN DIV 

Logical 

1 

N 

13 

BL_UN_BDE 

Logical 

1 

N 

14 

BL UN_RGMT 

Logical 

1 

N 

15 

BL UN_BN 

Logical 

1 

N 

16 

BL UN~CO 

Logical 

1 

N 

17 

BL UN CBT 

Logical 

1 

N 

18 

BL_UN_CS 

Logical 

1 

N 

19 

BL UN CSS 

Logical 

1 

N 

20 

BL UN NAME 

Logical 

1 

N 

21 

BL UN SYM 

Logical 

1 

N 

22 

OP UN DIV 

Logical 

1 

N 

23 

OP_UN_ B DE 

Logical 

1 

N 

24 

OP UN RGMT 

Logical 

1 

N 

25 

OP UN BN 

Logical 

1 

N 

26 

°P_UN_C° 

Logical 

1 

N 

27 

OP UN COMM 

Logical 

1 

N 

28 

OP_UN_RENF 

Logical 

1 

N 

29 

OP UN ARTL 

Logical 

1 

N 

30 

OP_UN_NAME 

Logical 

1 

N 

31 

OP_UN_SYM 

Logical 

1 

N 

32 

BL_CM_EAC 

Logical 

1 

N 

33 

BL CM_CORP 

Logical 

1 

N 

34 

BL_CM_DIV 

Logical 

1 

N 

35 

BL CM BDE 

Logical 

1 

N 

36 

bl~cm~bn 

Logical 

1 

N 

37 

BL CM CO 

Logical 

1 

N 

38 

BL~CM pnt 

Logical 

1 

N 

39 

BL_CM LINE 

Logical 

1 

N 

40 

BL~CM AREA 

Logical 

1 

N 

41 

BL CM~RTE 

Logical 

1 

N 

42 

BL~CM~XNG 

Logical 

1 

N 

43 

BL~CM~FPLN 

Logical 

1 

N 

44 

BL~CM~MAPF 

Logical 

1 

N 

45 

OP _ CM ARMY 

Logical 

1 

N 

46 

op~cm“div 

Logical 

1 

N 

47 

OP~Cm”RGMT 

Logical 

1 

N 

48 

OP^CM^BN 

Logical 

1 

N 


E-27 






49 

OPJZHJCO 

Logical 

1 

N 

50 

OP CM~PNT 

Logical 

1 

N 

51 

OP CM LINE 

Logical 

1 

N 

52 

OP_CM~AREA 

Logical 

1 

N 

53 

OP~CM~RTE 

Logical 

1 

N 

54 

OP~CM XNG 

Logical 

1 

N 

55 

OP~CM~FPLN 

Logical 

1 

N 

56 

OP_CM MAPF 

Logical 

1 

N 

57 

SEQ NO 

Character 

5 

N 

** Total ** 


100 





DATA BASE: 

ED_WIND.DBF 

Field 

Field Name 

Type 

Width 

Dec Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

ACTION 

Character 

1 

N 

7 

SEQ NO 

Character 

5 

N 

** Total ** 


33 



DATA BASE: EDC2RQ.DBF 


sld 

Field Name 

Type 

width 

Dec Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

PROD 

Character 

4 

N 

7 

SEQ NO 

Character 

5 

N 

8 

FUNC_AREA 

Character 

20 

N 

9 

DATA~CAT 

character 

20 

N 

10 

DATA_ELE 

Character 

20 

N 

11 

DATA_SUB 

Character 

20 

N 

12 

DATA LVL 

Character 

1 

N 

Total ** 


117 



DATA BASE: EDCOTMl.DBF 


Field Field Name 

1 CE 

2 COA 

3 AVENUE 

4 TYPE 

5 OBJECTIVE 

6 COMMENT 

7 SEQ_NO 
** Total *'* 


Type width 

Character 7 

Numeric 1 

Character 8 

Character 20 

Character 20 

Character 20 

character 5 

82 


Dec 


Index 

N 

N 

N 

N 

N 

N 

N 


E-28 






DATA BASE: EDC0TM2•DBF 


Leld 

Field Name 

Type 

Width 

1 

CE 

Character 

7 

2 

COA 

Numeric 

1 

3 

AVENUE 

Character 

8 

4 

TYPE 

Character 

20 

5 

OBJECTIVE 

Character 

20 

6 

COMMENT 

Character 

20 

7 

fr_pers 

Numeric 

4 

8 

FR~E0UIP 

Numeric 

4 

9 

EN~PERS 

Numeric 

4 

10 

EN_EQUIP 

Numeric 

4 

11 

POL 

Numeric 

3 

12 

AMMO 

Numeric 

3 

13 

FEBA 

Numeric 

2 

14 

TIME 

Numeric 

4 

15 

SEQ NO 

Character 

5 

Total *» 


110 


Index 

N 

N 

N 

N 

N 

H 

N 

N 

N 

N 

N 

N 

N 

N 

N 


DATA BASE: EDCOTSC.DBF 


Field 

Field Name 

Type 

Width 

1 

COA 

Numeric 

1 

2 

SPR_PERS 

Numeric 

1 

3 

SFR EQUIP 

Numeric 

1 

4 

SEN_PERS 

Numeric 

1 

5 

SEN EQUIP 

Numeric 

1 

6 

SPOL 

Numeric 

1 

7 

SAMMO 

Numeric 

1 

8 

SFEBA 

Numeric 

1 

9 

STIME 

Numeric 

1 

10 

SSUB A 

Numeric 

1 

11 

SSUB~B 

Numeric 

1 

12 

SSUB_C 

Numeric 

1 

13 

SSUB_D 

Numeric 

1 

14 

SSUB_E 

Numeric 

1 

15 

SSUB - F 

Numeric 

1 

16 

SSUB G 

Numeric 

1 

17 

SSUB_H 

Numeric 

1 

18 

SEQ NO 

Character 

5 

* Total •* 


5 •» 


Index 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


Field Field Name Type 

1 FRPERS Numeric 

2 FR_equip Numeric 

3 FN_peR 3 Numeric 

4 EN_equip Numeric 

5 POL Numeric 

6 AMMO Numeric 

7 FEBA Numeric 

8 TIME Numeric 


DATA BASE: EDCOTWT.DBF 


width Dec index 
3 N 

3 N 

3 N 

3 N 

3 N 

3 M 

3 N 

3 N 


9 

SUB A 

Numeric 

3 

N 

10 

SUB~B 

Numeric 

3 

N 

11 

SUB~C 

Numeric 

3 

N 

12 

sub"*d 

Numeric 

3 

N 

13 

SUB~E 

Numeric 

3 

N 

14 

SUB~F 

Numeric 

3 

N 

15 

SUB~G 

Numeric 

3 

N 

16 

SUB~H 

Numeric 

3 

N 

17 

SUB~NAMl 

character 

25 

N 

18 

SUB~NAK2 

character 

25 

N 

19 

SUB~NAM3 

character 

25 

N 

20 

SUB_NAM4 

character 

25 

N 

21 

SUB~NAM5 

Character 

25 

N 

22 

SUB~NAM6 

Character 

25 

N 

23 

SUB_NAM7 

Character 

25 

N 

24 

SUB~NAM8 

Character 

25 

N 

25 

SEQ NO 

character 

5 

N 

Total *» 


254 






DATA BASE: 

EDCTLRQ.DBF 

Field 

Field Name 

Type 

Width 

Dec Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

PROD 

character 

4 

N 

7 

SEQ NO 

Character 

5 

N 

8 

FUNC AREA 

character 

20 

N 

9 

DATA~CAT 

character 

20 

N 

10 

data“ele 

Character 

20 

N 

11 

DATA SUB 

Character 

20 

N 

** Total ** 


116 



DATA BASE: EDNEWC2.DBF 


Field 

Field Name 

Type 

width 

Dec Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

PROD 

character 

4 

N 

7 

TO G2 

Logical 

1 

N 

8 

TO~G3 

Logical 

1 

N 

9 

TO~G4 

Logical 

1 

N 

10 

TO~EX 

Logical 

1 

N 

11 

SEQ NO 

Character 

5 

N 

** Total ** 


40 



DATA BASE: EDREFRQ.DBF 


E-30 



Field 

Field Name 

> Type 

width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

PROD 

character 

4 


N 

7 

SEQ_NO 

Character 

5 


N 

8 

FUNC_AREA 

character 

20 


N 

9 

DATA_CAT 

Character 

20 


N 

10 

DATA_ELE 

character 

20 


N 

11 

DATA~LVL 

Character 

1 


N 

** Total ** 


97 




DATA BASE: EDSTACTV.DBF 


.eld 

Field Name 

Type 

width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SITJ5ATE 

Date 

8 


N 

7 

SITJTIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

FORCE 

Character 

7 


N 

10 

UNIT NO 

Numeric 

3 


N 

11 

ACTIVITY 

Character 

12 


N 

12 

SEQ NO 

character 

5 


N 

13 

OPI.AN 

Character 

20 


N 

14 

UNIT 

Character 

15 


N 

Total ** 


105 



DATA BASE: EDSTAMMO.DBF 


Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SIT_TIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

FORCE 

Character 

7 


N 

10 

UNIT_NO 

Numeric 

3 


N 

11 

AMMO~NO 

Numeric 

3 


N 

12 

AMOUNT 

Numeric 

5 


N 

13 

SEQ NO 

Character 

5 


N 

14 

OPLAN 

Character 

20 


N 

15 

UNIT 

Character 

15 


N 

16 

AMMO 

Character 

12 


N 

** Total ** 


113 




E-31 




p 




DATA BASE: EDSTBLTO.DBF 

eld 

Field Name Type 

Width Dec 

Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

SIT_DATE 

Date 

8 

N 

7 

SIT TIME 

Character 

6 

N 

8 

OPLAN NO 

Numeric 

2 

N 

9 

FORCE 

Character 

7 

N 

10 

UNITJNTO 

Numeric 

3 

N 

11 

HI_ECH_NO 

Numeric 

3 

N 

12 

RELATE 

Character 

4 

N 

13 

SEQ_NO 

Character 

5 

N 

14 

OPLAN 

Character 

20 

N 

15 

UNIT 

Character 

15 

N 

16 

HIGH ECH 

Character 

15 

N 

Total ** 


115 



DATA BASE: EDSTCMDL.DBF 


Field 

Field Name 

Type 

width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SIT_TIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

CM__ID 

Numeric 

3 


N 

10 

SEQ NO 

Character 

5 


N 

11 

OPLAN 

Character 

20 


N 

12 

NAME 

Character 

12 


N 

** Total ** 


83 




DATA BASE: EDSTCMEF.DBF 


Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


K 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

sit”"time 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

CM_ID _ 

Numeric 

3 


N 

10 

EFF2DATE 

Date 

8 


N 

11 

EFF2TIME 

Character 

6 


N 

12 

SEQ NO 

Character 

5 


N 


E-32 


13 OPLAN 

14 NAME 
** Total ** 


Character 20 

Character 12 

97 


DATA BASE: EDSTCMLC,DBF 


Leld 

Field Name 

Type 

Width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SIT~TIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

<» 

CM_ID~ 

Numeric 

3 


N 

10 

LOCX1 

Numeric 

6 


N 

11 

LOCYl 

Numeric 

6 


N 

12 

LOCX2 

Numeric 

6 


N 

13 

LOCY2 

Numeric 

6 


N 

14 

LOCX3 

Numeric 

6 


N 

15 

LOCY3 

Numeric 

6 


N 

16 

LOCX4 

Numeric 

6 


N 

17 

LOCY4 

Numeric 

6 


N 

18 

LOCX5 

Numeric 

6 


N 

19 

LOCY5 

Numeric 

6 


N 

20 

LOCX6 

Numeric 

6 


N 

21 

LOCY6 

Numeric 

6 


N 

22 

LOCX7 

Numeric 

6 


N 

23 

LOXY7 

Numeric 

6 


N 

24 

LOCX8 

Numeric 

6 


N 

25 

LOCY8 

Numeric 

6 


N 

26 

LOCX9 

Numeric 

6 


N 

27 

LOCY9 

Numeric 

6 


N 

28 

LOCX10 

Numeric 

6 


N 

29 

LOCY10 

Numeric 

6 


N 

30 

LOCX11 

Numeric 

6 


N 

31 

LOCY11 

Numeric 

6 


N 

32 

LOCX12 

Numeric 

6 


N 

33 

LOCYl2 

Numeric 

6 


N 

34 

LOCX13 

Numeric 

6 


N 

35 

LOCYl3 

Numeric 

6 


N 

36 

LOCX14 

Numeric 

6 


N 

37 

LOCYl4 

Numeric 

6 


N 

38 

LOCX15 

Numeric 

6 


N 

39 

LOCYl5 

Numeric 

6 


N 

40 

SEQ_NO 

Character 

5 


N 

41 

OPLAN 

Character 

20 


N 

42 NAME 

Total ** 

Character 12 

263 

DATA BASE: 

N 

EDSTCMST.DBF 

>ld 

Field Name 

Type 

Width 

Dec 

Index 


E-33 


Z Z 





1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

SIT DATE 

Date 

8 

N 

7 

SIT_TIME 

Character 

6 

N 

8 

OPLAN_NO 

Numeric 

2 

N 

9 

CM_ID~ 

Numeric 

3 

N 

10 

STATUS 

Character 

12 

N 

11 

SEQ_NO 

Character 

5 

N 

12 

OPLAN 

Character 

20 

N 

13 

NAME 

Character 

12 

N 

Total ** 


95 



DATA BASE: EDSTEQP.DBF 


Field 

Field Name 

Type 

width 

Dec 

index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SITJTIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

FORCE 

character 

7 


N 

10 

UNIT NO 

Numeric 

3 


N 

11 

EQUIP_NO 

Numeric 

3 


N 

12 

AMOUNT 

Numeric 

5 


N 

13 

SEQ_NO 

Character 

5 


N 

14 

OPLAN 

Character 

20 


N 

15 

UNIT 

Character 

15 


N 

16 

EQUIP 

Character 

12 


N 

** Total ** 


113 




DATA BASE: EDSTFUEL.DBF 


aid 

Field Name 

Type 

width 

Dec 

Index 

1 

PART 

character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT DATE 

Date 

8 


N 

7 

SIT~TIME 

character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

FORCE” 

character 

7 


N 

10 

UNIT NO 

Numeric 

3 


N 

11 

MOGAS 

Numeric 

5 


N 

12 

AVGAS 

Numeric 

5 


N 

13 

DIESEL 

Numeric 

5 


N 

14 

SEQ NO 

character 

5 


N 

15 

OPLAN 

Character 

20 


N 


E-34 







16 UNIT 
*■* Total ** 


Character 


15 

108 


N 


DATA BASE: EDSTMISS .DBF 


Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SITJTIME 

Character 

6 


N 

8 

OPLAN_NO 

Numeric 

2 


N 

9 

FORCE 

Character 

7 


N 

10 

UNIT_NO 

Numeric 

3 


N 

11 

MISSION 

Character 

15 


N 

12 

SEQ_NO 

Character 

5 


N 

13 

OPLAN 

Character 

20 


N 

14 

UNIT 

Character 

15 


N 

** Total ** 


108 





DATA BASE: EDSTNWCM.DBF 

Field 

Field Name 

Type 

width Dec 

Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

SIT_DATE 

Date 

8 

N 

7 

SITJTIME 

Character 

6 

N 

8 

OPLAN NO 

Numeric 

2 

N 

9 

CM_ID 

Numeric 

3 

N 

10 

NAME 

Character 

12 

N 

11 

FORCE 

Character 

7 

N 

12 

TYPE 

Character 

6 

N 

13 

SCAL1 40 

Logical 

1 

N 

14 

SCAL1 80 

Logical 

1 

N 

15 

SCALl”160 

Logical 

1 

N 

16 

SCALl”400 

Logical 

1 

N 

17 

SCAL1~800 

Logical 

1 

N 

18 

STATUS 

Character 

12 

N 

19 

EFF2DATE 

Date 

8 

N 

20 

EFF2TIME 

Character 

6 

N 

21 

ECHELON 

Character 

6 

N 

22 

LOCXl 

Numeric 

6 

N 

23 

LOCY1 

Numeric 

6 

N 

24 

LOCX2 

Numeric 

6 

N 

25 

LOCY2 

Numeric 

6 

N 

26 

LOCX3 

Numeric 

6 

N 

27 

LOCY3 

Numeric 

6 

N 

28 

LOCX4 

Numeric 

6 

N 

29 

LOCY4 

Numeric 

6 

N 


E-35 


30 

LOCX5 

Numeric 

6 

N 

31 

LOCY5 

Numeric 

6 

N 

32 

LOCX6 

Numeric 

6 

N 

33 

LOCY6 

Numeric 

6 

N 

34 

LOCX7 

Numeric 

6 

N 

35 

LCXY7 

Numeric 

6 

N 

36 

LOCX8 

Numeric 

6 

N 

37 

LOCY8 

Numeric 

6 

N 

38 

LOCX9 

Numeric 

6 

N 

39 

LOCY9 

Numeric 

6 

N 

40 

LOCX10 

Numeric 

6 

N 

41 

LOCY10 

Numeric 

6 

N 

42 

LOCX11 

Numeric 

6 

N 

43 

LOCY11 

Numeric 

6 

N 

44 

LOCX12 

Numeric 

6 

N 

45 

LOCY12 

Numeric 

6 

N 

46 

LOCX13 

Numeric 

6 

N 

47 

LOCY13 

Numeric 

6 

N 

48 

LOCX14 

Numeric 

6 

N 

49 

LOCY14 

Numeric 

6 

N 

50 

LOCX15 

Numeric 

6 

N 

51 

LOCY15 

Numeric 

6 

N 

52 

SEQ_NO 

Character 

5 

N 

53 

OPLAN 

Character 

20 

N 


** Total ** 313 


DATA BASE: EDSTNWOB.DBF 


aid 

Field Name 

Type 

width 

Dec Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

SIT_DATE 

Date 

8 

N 

7 

SIT_TIME 

Character 

6 

N 

8 

OPLAN_NO 

Numeric 

2 

N 

9 

OB_ID 

Numeric 

3 

N 

10 

FORCE 

Character 

7 

N 

11 

TYPE 

Character 

6 

N 

12 

STATUS 

Character 

12 

N 

13 

EFF2DATE 

Date 

8 

N 

14 

EFF2TIME 

Character 

6 

N 

15 

LOCX 

Numeric 

6 

N 

16 

LOCY 

Numeric 

6 

N 

17 

FRONTAGE 

Numeric 

5 

N 

18 

DEPTH 

Numeric 

5 

N 

19 

ORIENT 

Numeric 

3 

N 

20 

GAPS 

Logical 

1 

N 

21 

ECHELON 

Character 

6 

N 

22 

SEQ_NO 

Character 

5 

N 

23 

OPLAN 

Character 

20 

N 

Total ** 


142 



E-36 





DATA BASE: EDSTOBDL.DBF 


Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SITJTIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

OB ID 

Numeric 

3 


N 

10 

SEQ_NO 

Character 

5 


N 

11 

OPLAN 

Character 

20 


N 

** Total ** 


71 





DATA BASE: 

EDSTOBEF.DBF 

Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

PART 

Character 

4 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT DATE 

Date 

8 


N 

7 

SITJTIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

OB ID 

Numeric 

3 


N 

10 

EFF2DATE 

Date 

8 


N 

11 

EFF2TIME 

character 

6 


N 

12 

SEQ NO 

Character 

5 


N 

13 

OPLAN 

Character 

20 


N 

** Total ** 


85 






DATA BASE: 

EDSTOBLC.DBF 

Field 

Field Name 

Type 

Width 

Dec Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

SIT_DATE 

Date 

8 

N 

7 

SITJTIME 

Character 

6 

N 

8 

OPLAN NO 

Numeric 

2 

N 

9 

OB JED 

Numeric 

3 

N 

10 

LOCX 

Numeric 

6 

N 

11 

LOCY 

Numeric 

6 

N 

12 

SEQ NO 

character 

5 

N 

13 

OPLAN 

Character 

20 

N 


** Total ** 83 

DATA BASE: EDSTOBST.DBF 


E-37 





-eld 

Field Name 

1 

PART 

2 

DATE 

3 

TIME 

4 

WINDOW 

5 

STACK 

6 

SIT_DATE 

7 

SIT~TIME 

8 

OPLAN NO 

9 

OB_ID~ 

10 

STATUS 

11 

SEQ NO 

12 

OPLAN 

Total ** 


Type 

Width 

Character 

4 

Date 

8 

Character 

6 

Character 

7 

Numeric 

1 

Date 

8 

Character 

6 

Numeric 

2 

Numeric 

3 

Character 

12 

Character 

5 

Character 

20 


83 


Dec Index 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 


DATA BASE: EDSTOPTO.DBF 


Field 

Field Name 

Type 

Width 

1 

PART 

Character 

4 

2 

DATE 

Date 

8 

3 

TIME 

Character 

6 

4 

WINDOW 

Character 

7 

5 

STACK 

Numeric 

1 

6 

SIT_DATE 

Date 

8 

7 

SIT_TIME 

Character 

6 

8 

OPLAN NO 

Numeric 

2 

9 

FORCE 

Character 

7 

10 

UNIT NO 

Numeric 

3 

11 

HI_ECH NO 

Numeric 

3 

12 

S£Q_NO 

Character 

5 

13 

OPLAN 

Character 

20 

14 

UNIT 

Character 

15 

15 

HIGH ech 

Character 

15 

** Total •* 


111 


Dec Index 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 


DATA BASE: EDSTPERS.DBF 


Field Field Name 

1 PART 

2 DATE 

3 TIME 

4 WINDOW 

5 STACK 

6 SIT_DATE 

7 SIT~TIME 

8 OPLAN NO 

9 FORCE 

10 UNIT NO 

11 OFF_AMT 

12 enl”amt 

13 SEQ~NO 

14 OPLAN 

15 UNIT 


Type Width 

Character 4 

Date g 

Character 6 

Character 7 

Numeric I 

Date B 

character 6 

Numeric 2 

Character 7 

Numeric 3 

Numeric 4 

Numeric 4 

Character 5 

Character 20 

character 15 


Dec 


Index 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


E-38 


** Total ** 


101 


DATA BASE: EDSTRENF.DBF 


Field 

Field Name Type 

Width 

1 

PART 

character 

4 

2 

DATE 

Date 

8 

3 

TIKE 

Character 

6 

4 

WINDOW 

Character 

7 

5 

STACK 

Numeric 

1 

6 

SITJ3ATE 

Date 

8 

7 

SITJTIME 

character 

6 

8 

OPLAN NO 

Numeric 

2 

9 

FORCE" 

character 

7 

10 

UNIT NO 

Numeric 

3 

11 

REINF 

Numeric 

3 

12 

SEQ NO 

character 

5 

13 

OPLAN 

Character 

20 

14 

UNIT 

Character 

15 

** Total ** 


96 


Dec Index 
N 
N 
N 
N 
N 
N 
H 
N 
N 
N 
N 
N 
N 
N 


DATA BASE: EDSTRQST.DBF 


Field 

Field Name 

Type 

Width 

1 

PART 

Character 

4 

2 

DATE 

Date 

8 

3 

TIME 

character 

6 

4 

WINDOW 

character 

7 

5 

STACK 

Numeric 

1 

6 

SIT__DATE 

Date 

8 

7 

SITJTIME 

character 

6 

8 

OPIAN_NO 

Numeric 

2 

9 

FORCE 

Character 

7 

10 

UNIT_NO 

Numeric 

3 

11 

MESSAGE 

Character 

20 

12 

SEQ NO 

Character 

5 

13 

OPLAN 

Character 

20 

14 

UNIT 

Character 

15 

** Total ** 


113 


Dec Index 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 


DATA BASE: EDSTSTNG.DBF 


Field 

Field Name 

Type 

Width 

1 

PART 

Character 

4 

2 

DATE 

Date 

8 

3 

TIME 

Character 

6 

4 

WINDOW 

Character 

7 

5 

8TACK 

Numeric 

1 

6 

SIT_DATZ 

Date 

8 

7 

SIT~TIME 

Character 

6 

8 

OPLAN NO 

Numeric 

2 

9 

FORCE - 

Character 

7 

10 

UNIT NO 

Numeric 

3 


Dec index 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 


E-39 


11 

STRENGTH 

Numeric 

3 

12 

SEQ NO 

Character 

5 

13 

OPLAN 

Character 

20 

14 

UNIT 

Character 

15 

** Total ** 


96 




DATA BASE: EDSTULOC.DBF 

eld 

Field Name Type 

width Dec 

Index 

1 

PART 

Character 

4 

N 

2 

DATE 

Date 

8 

N 

3 

TIME 

Character 

6 

N 

4 

WINDOW 

Character 

7 

N 

5 

STACK 

Numeric 

1 

N 

6 

SIT_DATE 

Date 

8 

N 

7 

SIT TIME 

Character 

6 

N 

8 

OPLAN NO 

Numeric 

2 

N 

9 

FORCE 

Character 

7 

N 

10 

UNIT NO 

Numeric 

3 

N 

11 

X LOC 

Numeric 

6 

N 

12 

Y_LOC 

Numeric 

6 

N 

13 

SEQ_NO 

Character 

5 

N 

14 

OPLAN 

Character 

20 

N 

15 

UNIT 

Character 

15 

N 

Total ** 


105 



DATA BASES EQDISPLA.DBF 


Field 

Field Name 

Type 

Width 

1 

EQ_NAME 

Character 

8 

2 

EQ AUTH 

Numeric 

6 

3 

EQ CURR 

Numeric 

6 

** Total ** 


21 


DATA BASE: 


Field 

Field Name 

Type 

width 

1 

PROD 

Character 

4 

2 

func_area 

Character 

20 

3 

DATA_CAT 

Character 

20 

4 

DATA ELE 

Character 

20 

** Total ** 


65 


Dec Index 
K 
N 
N 


HLP_XREF.DBF 

Dec Index 
Y 
N 
N 
N 


Field 

Field Name 

Type 

DATA BASE: HMIED 

width Dec 

.DBF 

Index 

1 

SEQ_NO 

Character 

5 

y 

2 

LABORS 

Numeric 

1 

N 

3 

MAPORG 

Numeric 

1 

N 

4 

GRID8 

Numeric 

1 

N 

5 

CONTOUR 

Numeric 

1 

N 

6 

ROADS 

Numeric 

1 

N 


a 56 X a 




** 


7 

HYDRO 

Mumeric 

1 

8 

BUILTUP 

Numeric 

1 

9 

MISC 

Numeric 

1 

10 

MPSCL80 

Numeric 

1 

11 

MPSCL160 

Numeric 

1 

12 

KPSCL400 

Numeric 

1 

13 

MPSCL800 

Numeric 

1 

14 

SHADRELF 

Numeric 

1 

15 

VEG 

Numeric 

1 

18 

elevband 

Numeric 

1 

17 

NOME 

Numeric 

1 

18 

BLUEUNIT 

Numeric 

1 

19 

BLUECM 

Numeric 

1 

20 

OPFORUNIT 

Numeric 

1 

21 

OPFORCM 

Numeric 

1 

22 

CONTERH 

Logical 

1 

23 

SUNCE 

Logical 

1 

24 

CONCOOR 

Numeric 

1 

25 

EASMENU 

Numeric 

1 

26 

eastorg 

Numeric 

1 

Total ** 


31 


N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


DATA BASE: HMIEDCT.DBF 


'ield 

Field Name 

Type 

width 

X 

SEQ NO 

Character 

5 

2 

LABORG 

Numeric 

1 

3 

maporg 

Numeric 

1 

4 

GRIDS 

Numeric 

1 

5 

CONTOUR . 

Numeric 

1 

6 

ROADS 

Numeric 

1 

7 

HYDRO 

Numeric 

1 

8 

BUILTUP 

Numeric 

1 

9 

Ml SC 

Numeric 

1 

10 

MPSCL80 

Numeric 

1 

11 

MPSCL160 

Numeric 

1 

12 

MPSCL400 

Numeric 

1 

13 

MPSCL800 

Numeric 

1 

14 

SHADRELF 

Numeric 

1 

15 

VEG 

Numeric 

1 

16 

ELEVBAND 

Numeric 

1 

17 

NONE 

Numeric 

1 

18 

BLUEUNIT 

Numeric 

1 

19 

BLUECM 

Numeric 

1 

20 

OPFORUNIT 

Numeric 

1 

21 

OPFORCM 

Numeric 

1 

22 

CONTERM 

Logical 

1 

23 

COMCOOR 

Numeric 

1 

24 

SYMCE 

Numeric 

1 

25 

SYMWG 

Numeric 

1 

26 

8YMEASE 

Numeric 

1 

Total ** 


31 


Index 

Y 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

M 

H 

N 

N 

N 

N 

N 

N 


DATA BASE: HST XREF.DBF 



E-42 




16 

BL_UN CO 

Logical 

1 

t 

17 

BL~UN~CBT 

Logical 

1 

« 

18 

bl_un~cs 

Logical 

1 

N 

19 

bl_un“css 

Logical 

1 

N 

20 

BL~UN>AME 

Logical 

1 

N 

21 

BL~UN~SYM 

Logical 

1 

N 

22 

Op”uN~DIV 

Logical 

1 

N 

23 

OP_wTbDE 

Logical 

1 

N 

24 

OP~UN~RGMT 

Logical 

1 

N 

25 

°P_UNJ8N 

Logical 

1 

N 

26 

°P_UNjC° 

Logical 

1 

N 

27 

op_un“comm 

Logical 

1 

N 

28 

°P_UN_RENF 

Logical 

1 

N 

29 

OP_UN~ARTL 

Logical 

1 

N 

30 

OP~UN~NAME 

Logical 

1 

N 

31 

OP UN~SYM 

Logical 

1 

N 

32 

BL_CM _ EAC 

Logical 

1 

N 

33 

BL_CM_CORP 

Logical 

1 

N 

34 

BL I CM _ DIV 

Logical 

1 

N 

35 

BL_CM_BDE 

Logical 

1 

N 

36 

BL CM BN 

Logical 

1 

N 

37 

B t»_CM_CO 

Logical 

1 

N 

38 

BL CM PNT 

Logical 

1 

N 

39 

BL_CM~LINE 

Logical 

1 

N 

40 

BL CM AREA 

Logical 

1 

N 

41 

BL CM RTE 

Logical 

1 

N 

42 

BL CM XNG 

Logical 

1 

N 

43 

BL CM FPLN 

Logical 

1 

N 

44 

BL_CM MAPF 

Logical 

1 

N 

45 

°P_CM_ARMY 

Logical 

1 

N 

46 

OP CM DIV 

Logical 

1 

N 

47 

OP CM RGMT 

Logical 

1 

N 

48 

°P_CM_BN 

Logical 

1 

N 

49 

°P_ C M_C° 

Logical 

1 

N 

50 

°P_ C M_PNT 

Logical 

1 

N 

51 

°P_CM_LINE 

Logical 

1 

N 

52 

°P_CM_AREA 

Logical 

1 

N 

53 

OP_CM_RTE 

Logical 

1 

N 

54 

°P_CM_XNG 

Logical 

1 

N 

55 

° p _CM_FPLN 

Logical 

1 

N 

56 

OP_CM MAPF 

Logical 

1 

N 

Total ** 


96 



DATA BASE: MISSION.DBF 

Fi«ld Field Name Type Width Dec index 

1 MISSID Character 1 y 

2 Mis SNAKE character 17 *> 

** Total ** i a 


DATA BASE: NEW_C2.DBF 

riald Field Name Type Width Dec Index 

1 beq_mo Character 5 N 



2 

DATE 

Date 

8 

3 

TIME 

Character 

6 

4 

WINDOW 

Character 

7 

5 

STACK 

Numeric 

1 

6 

PROD 

character 

4 

7 

TO_G2 

Logical 

1 

8 

TOJ33 

Logical 

1 

9 

TO~G4 

Logical 

1 

10 

TOJBX 

Logical 

1 

** Total ** 

36 


DATA BASE: 


Field Field Name Type Width 

1 number Numeric 2 

2 NAME Character 18 

3 TYPE Character 13 

** Total ** ■>* 


N 

N 

N 

N 

N 

N 

N 

N 

N 


OPLAN.DBF 

Dec Index 
N 
N 
N 


DATA BASE: PERCENT.DBF 


Field 

Field Name 

Type 

Width 

Dec 

1 

OFF PER 1 

Numeric 

7 

3 

2 

ENL~PER 1 

Numeric 

7 

3 

3 

EQ PER 1 

Numeric 

7 

3 

4 

AM PER 1 

Numeric 

7 

3 

5 

FL~PER 1 

Numeric 

7 

3 

6 

OFT PER 2 

Numeric 

7 

3 

7 

ENL PER~2 

Numeric 

7 

3 

8 

EQ PER 2 

Numeric 

7 

3 

9 

AM_PER - 2 

Numeric 

7 

3 

10 

FL_PER 2 

Numeric 

7 

3 

11 

OFF_PER 3 

Numeric 

7 

3 

12 

ENL~PER~ 3 

Numeric 

7 

3 

13 

EQ_PER 3 

Numeric 

7 

3 

14 

AM~PER 3 

Numeric 

7 

3 

IS 

FL_PER 3 

Numeric 

7 

3 

16 

OFF_PER 4 

Numeric 

7 

3 

17 

ENL_PER 4 

Numeric 

7 

3 

18 

EQ PER 4 

Numeric 

7 

3 

19 

AM~PER 4 

Numeric 

7 

3 

20 

FLJPER 4 

Numeric 

7 

3 

21 

OFF PER 5 

Numeric 

7 

3 

22 

ENL~PER~5 

Numeric 

7 

3 

23 

EQ PER 5 

Numeric 

7 

3 

24 

AM PER - 5 

Numeric 

7 

3 

25 

FL~PER 5 

Numeric 

7 

3 

26 

OFF PER 6 

Numeric 

7 

3 

27 

ENL~PER~6 

Numeric 

7 

3 

28 

EQ PER 6 

Numeric 

7 

3 

29 

AM~PER - 6 

Numeric 

7 

3 

30 

FL _ PER - 6 

Numeric 

7 

3 

31 

32 

OFF PER 7 
ENL - PER - 7 

Numeric 

Numeric 

7 

7 

3 

3 


Index 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


E-44 


33 

EQ_PER_7 

Numeric 

7 

3 

N 

34 

AM PER 7 

Numeric 

7 

3 

N 

35 

PL PER~7 

Numeric 

7 

3 

N 

36 

OFF_PER_8 

Numeric 

7 

3 

N 

37 

ENL~PER - 8 

Numeric 

7 

3 

N 

38 

EQ PER 8 

Numeric 

7 

3 

N 

39 

AM_PER — 8 

Numeric 

7 

3 

N 

40 

FL PER - 8 

Numeric 

7 

3 

N 


** Total ** 281 


DATA BASE: PERDISP.DBF 


Field 

Field Name 

Type 

width 

Dec Index 

1 

UNIT_NAME 

Character 

12 

N 

2 

OFF LOSS 

Numeric 

4 

N 

3 

ENL LOSS 

Numeric 

4 

N 

4 

OFF_GAIN 

Numeric 

4 

N 

5 

ENL_GAIN 

Numeric 

4 

N 

6 

OFF_AUTH 

Numeric 

7 

N 

7 

ENL_AUTH 

Numeric 

7 

N 

8 

OFF_CURR 

Numeric 

7 

N 

9 

ENL CURR 

Numeric 

7 

N 

** Total ** 


57 






DATA BASE: 

PERSON.DBF 

Field 

Field Name 

Type 

Width 

Dec Index 

1 

SEQ NO 

Character 

5 

Y 

2 

DATE 

Date 

8 

N 

3 

NAME 

character 

30 

N 

4 

RANK 

Character 

4 

N 

5 

CURR POS 

Character 

20 

N 

6 

BRANCH 

Character 

15 

N 

7 

TIG_YR 

Numeric 

4 

1 N 

8 

TIS_YR 

Numeric 

4 

1 N 

9 

EDUCATION 

Character 

2 

N 

10 

AREA_STUDY 

Character 

15 

N 

11 

OFFJBASIC 

Numeric 

4 

N 

12 

OFF_ADV 

Numeric 

4 

N 

13 

CAS 3 

Numeric 

4 

N 

14 

CGSOC 

Numeric 

4 

N 

15 

WAR_COLLGE 

Numeric 

4 

N 

16 

ASG_FULDA 

Logical 

1 

N 

17 

EXR_FULDA 

Logical 

1 

N 

18 

CMP_COURSE 

Logical 

1 

N 

19 

MINI_FRZQ 

Character 

1 

N 

20 

WORK - FREQ 

Character 

1 

N 

21 

PC_FREQ 

Character 

1 

N 

22 

CURS CNTRL 

Logical 

1 

N 

23 

PRGM~SELF 

Logical 

1 

N 

24 

PRGM~OTHER 

Logical 

1 

N 

25 

OWN CMPUTR 

Logical 

1 

N 

** Total ** 


138 



E-45 





DATA BASE: PERSTYLE.DBF 


Field Field Name 

Type 

Width 

1 SEQ NO 

Character 

5 

2 A 1 

Numeric 

1 

3 B 1 

Numeric 

1 

4 A~2 

Numeric 

1 

5 B 2 

Numeric 

1 

6 A~3 

Numeric 

1 

7 B~3 

Numeric 

1 

8 A~4 

Numeric 

1 

9 B 4 

Numeric 

1 

10 A 5 

Numeric 

1 

11 B 5 

Numeric 

1 

12 A 6 

Numeric 

1 

13 B ~6 

Numeric 

1 

14 A 7 

Numeric 

1 

15 B~7 

Numeric 

1 

16 A 8 

Numeric 

1 

17 B 8 

Numeric 

1 

18 A 9 

Numeric 

1 

19 B 9 

Numeric 

1 

20 A 10 

Numeric 

1 

21 B _ 10 

Numeric 

1 

22 A 11 

Numeric 

1 

23 B 11 

Numeric 

1 

24 A~12 

Numeric 

1 

25 B 12 

Numeric 

1 

26 A 13 

Numeric 

1 

27 B~13 

Numeric 

1 


28 A_14 Numeric 1 

29 B_14 Numeric 1 

30 A_15 Numeric 1 

31 B_15 Numeric 1 

32 A_16 Numeric 1 

33 B_16 Numeric 1 


34 

A 17 

Numeric 

1 

35 

B~17 

Numeric 

1 

36 

A~18 

Numeric 

1 

37 

B~18 

Numeric 

1 

38 

A~19 

Numeric 

1 

39 

B 19 

Numeric 

1 

40 

A~20 

Numeric 

1 

41 

B~20 

Numeric 

1 

42 

A~21 

Numeric 

1 

43 

B~21 

Numeric 

1 

44 

A~22 

Numeric 

1 

45 

B~22 

Numeric 

1 

46 

A~23 

Numeric 

1 

47 

B~23 

Numeric 

1 

48 

A~24 

Numeric 

1 

49 

B~24 

Numeric 

1 

50 

A~* 25 

Numeric 

1 

51 

B~25 

Numeric 

1 

52 

A~?6 

Numeric 

1 


Dec 


Index 

Y 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


53 

B 26 

Numeric 

1 

N 

54 

A~27 

Numeric 

1 

N 

55 

B 27 

Numeric 

1 

K 

56 

A~28 

Numeric 

1 

N 

57 

B~28 

Numeric 

1 

N 

58 

A 29 

Numeric 

1 

N 

59 

B~29 

Numeric 

1 

N 

60 

A~30 

Numeric 

1 

H 

61 

B~30 

Numeric 

1 

N 

62 

A~31 

Numeric 

1 

K 

63 

B 31 

Numeric 

1 

H 

64 

A~32 

Numeric 

1 

N 

65 

B~32 

Numeric 

1 

N 

** Total ** 


70 



DATA BASE: RBASEUNI.DBF 


Fxeld Field Name Type Width 


1 UNIT_NAM£ 

2 OFFICER 

3 ENLISTED 

4 EQ_NAME_1 

5 EQ_QTY_T 

6 EQ_NAME_2 

7 EQ_QTY_2 

8 EQ_NAME 3 

9 EQ_QTY_3 

10 EQ_NAME 4 

11 EQ_QTY_4 

12 EQ_NAME_5 

13 EQ_QTY_5 

14 EQ_NAME 6 

15 EQ_QTY_6 

16 EQ_NAME_7 

17 EQ_QTY_7 

18 EQ~NAME 8 

19 EQ_OTY_8 

20 EQ_NAME 9 

21 EQ_QTY 9 

22 EQ~NAME 10 

23 EQ_QTY To 

24 EQ_NAME 11 

25 EQ_QTY 11 

26 EQ~NAME 12 

27 EQ~QTY_12 
** Total ** 


Character 12 

Numeric 3 

Numeric 3 

character 8 

Numeric 3 

Character 8 

Numeric 3 

Character 8 

Numeric 3 

Character 8 

Numeric 3 

Character 8 

Numeric 3 

character 8 

Numeric 3 

Character 8 

Numeric 3 

Character 8 

Numeric 3 

Character 8 

Numeric 3 

Character 8 

Numeric 3 

character 8 

Numeric 3 

Character 8 

Numeric 3 


151 

DATA BASE: 


Dec Index 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 


RBATTAL1.DBF 


y leld Field Name 

1 BN_MAME 

2 ECHELON 

3 TYPE 

4 BATL rUNC 


Type Width 
Character 12 
Character 6 
Character 6 
Character 6 


Dec Index 
N 
N 
N 
N 


E-47 



5 

ACTIVITY 

Character 

6 

6 

MISSION 

Character 

6 

7 

LOCATION 

Character 

8 

8 

CO_NAME 1 

Character 

12 

9 

CO_R£L_I 

Character 

6 

10 

CO NAME 2 

Character 

12 

11 

CO_REL 2 

Character 

6 

12 

CO~NAME 3 

Character 

12 

13 

CO~REL 3 

Character 

6 

14 

CO~NAME 4 

Character 

12 

15 

CO~REL 4 

Character 

6 

16 

CO NAME 5 

Character 

12 

17 

CO~REL 5 

Character 

6 

18 

CO_NAME 6 

character 

12 

19 

CO_REL 6 

Character 

6 

20 

CO NAME 7 

Character 

12 

21 

COJREL 7 

Character 

6 

22 

CO_NAME 8 

Character 

12 

23 

CO _ REL 8 

Character 

6 

** Total ** 


195 


N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

M 

N 

N 


DATA BASE: RBRIGAD1.DBF 


Field 

Field Name 

Type 

Width 

1 

BDE NAME 

Character 

12 

2 

ECHELON 

Character 

6 

3 

TYPE 

character 

6 

4 

BATL__FUNC 

Character 

6 

5 

ACTIVITY 

character 

6 

6 

MISSION 

Character 

6 

7 

LOCATION 

Character 

6 

8 

BN_NAME 1 

Character 

12 

9 

BN_REL 1 

Character 

6 

10 

BN__NAME 2 

Character 

12 

11 

BN*~REL 2 

Character 

6 

12 

BN NAME 3 

Character 

12 

13 

BN REL 3 

Character 

6 

14 

BN~NAME 4 

Character 

12 

15 

BN~REL 4 

Character 

6 

16 

BN_NAKE 5 

character 

12 

17 

8N~REL_5 

Character 

6 

18 

BN~NAME 6 

Character 

12 

19 

BN~REL ? 

Character 

6 

20 

BN~NAME 7 

Character 

12 

21 

BNJREL 7 

Character 

6 

22 

BN~NAME 8 

Character 

12 

23 

BN~REL ? 

character 

6 

24 

BN~NAME 9 

Character 

12 

25 

BNJUEL 9 

Character 

6 

26 

BN~NAME 10 

Character 

12 

27 

bn~rel To 

Character 

6 

28 

bn'namz 11 

Character 

12 

29 

BN~REL 11 

Character 

6 

30 

BN~NAME 12 

Character 

12 

31 

BN~REL 12 

Character 

6 


Index 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

M 

N 

N 

If 

N 

N 

N 

N 

N 

N 

N 

N 

M 

N 

N 

N 


E-48 


* a 




** Total ** 


26 5 


DATA BASE: RCOMPNY1.DBF 


Field 

Field Name Type 

Width 

1 

CO_NAME 

Character 

12 

2 

BASE_NAKE 

Character 

12 

3 

ECHELON 

Character 

6 

4 

TYPE 

Character 

6 

5 

BATL_FUNC 

Character 

6 

6 

ACTIVITY 

Character 

6 

7 

MISSION 

Character 

6 

8 

LOCATION 

Character 

8 

9 

OFFICER 

Numeric 

3 

10 

ENLISTED 

Numeric 

3 

11 

EQ_NAME 1 

Character 

8 

12 

e<Tqty_T 

Numeric 

3 

13 

EQ NAME 2 

Character 

8 

14 

EQ_QTY_2 

Numeric 

3 

15 

EQ_NAME 3 

Character 

8 

16 

EQ_QTY 3 

Numeric 

3 

17 

EQ_NAME 4 

character 

8 

18 

EQ_QTY 4 

Numeric 

3 

19 

EQ_NAME 5 

Character 

8 

20 

EQ_QTY 5 

Numeric 

3 

21 

EQ_NAM£ 6 

Character 

8 

.'’2 

EQ QTY 6 

Numeric 

3 

23 

EQ_NAME 7 

character 

8 

24 

EQ~QTY_7 

Numeric 

3 

25 

EQ_NAME 8 

character 

8 

26 

EQ_QTY 8 

Numeric 

3 

27 

EQ_NAME_9 

Character 

8 

28 

EQ_QTY_9 

Numeric 

3 

29 

EQ~NAME 10 

Character 

8 

30 

eq'qty 10 

Numeric 

3 

31 

EQ_NAME 11 

Character 

8 

32 

eqTqty_ii 

Numeric 

3 

33 

EQ_NAME 12 

Character 

8 

34 

EQ_QTY 12 

Numeric 

3 


** Total ** 


DATA BASE: 


Field Field Name Type width 

1 SEQ_NO Character 5 

2 DATE Date 8 

3 TIKE Character 6 

4 WINDOW Character 7 

5 STACK Numeric 1 

6 FUNC_AREA Character 20 

7 DATA_CAT Character 20 

8 DATA_ELE Character 20 

9 DATA_LVL Character 1 

** Total ** oa 


Dec index 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 
N 


REF_RQST.DBF 

Dec Index 
N 
N 
N 
N 
N 
N 
N 
N 
N 


E-49 


DATA BASE: REF XREF.DBF 


Field 

Field Name 

Type 

width 

Dec Index 

1 

PROD 

Character 

4 

Y 

2 

FUNC_AREA 

Character 

20 

N 

3 

DATA_CAT 

Character 

20 

N 

4 

DATA_ELE 

Character 

20 

N 

5 

DATA LVL 

Character 

1 

N 

** Total ** 


66 


Field 

Field Name 

Type 

DATA BASE: 

Width 

RUNXREF.DBF 

Dec Index 

1 

UNIT_ID 

Numeric 

3 

Y 

2 

NAME 

Character 

15 

N 

** Total ** 


19 


DATA BASE: SCCNOP.DBF 


Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

SEQ NO 

character 

5 


Y 

2 

CIA 

Character 

1 


N 

3 

C1B 

character 

1 


N 

4 

C1C 

Character 

1 


N 

5 

ClD 

Character 

1 


N 

6 

C1E 

Character 

1 


N 

7 

C1F 

Character 

1 


N 

8 

C1G 

Character 

1 


N 

9 

C1H 

"'haracter 

1 


N 

10 

ClI 

Character 

1 


N 

11 

C1J 

character 

1 


N 

12 

ClK 

Character 

1 


N 

13 

C2A 

Character 

1 


N 

14 

C2B 

Character 

1 


N 

15 

C2C 

Character 

1 


N 

16 

C2D 

Character 

1 


N 

17 

C2E 

Character 

1 


N 

** Total ** 


22 




DATA BASE: SCCRTEVT.DBF 


Field 

Field Name 

Type 

Width 

Dec 

Index 

1 

SEQ NO 

Character 

5 


K 

2 

COA~ 

Numeric 

1 


N 

3 

CE 

Character 

7 


N 

4 

MATCH 

Character 

1 


N 

5 

BALANCE 

Character 

1 


N 

** Total ** 


16 



DATA BASE: SCFACTS.DBF 


£-50 


Field Field 

Name Type 

width 

1 SEQ NO 

Character 

5 

2 A1 

Character 

1 

3 B1 

Character 

1 

4 Cl 

Character 

1 

5 A2 

Character 

1 

6 82 

Character 

1 

7 C2 

Character 

1 

8 D2 

Character 

1 

9 E2 

character 

1 

10 F2 

Character 

1 

11 A3 

Character 

1 

12 B3 

Character 

1 

13 C3 

Character 

1 

14 D3 

Character 

1 

IS E3 

Character 

1 

16 F3 

character 

1 

17 G3 

character 

1 

18 A4 

Character 

1 

19 B4 

Character 

1 

20 C4 

Character 

1 

21 D4 

Character 

1 

22 E4 

character 

1 

23 F4 

Character 

1 

24 AS 

Character 

1 

25 B5 

Character 

1 

Total ** 




Dec 


Index 

Y 

N 

N 

N 

N 

N 

M 

N 

N 

N 

N 

K 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


DATA BASE: SCFORCE.DBF 


Field Field Name 

1 SEQ_NO 

2 COA 

3 UNIT 

4 POWER 

5 MISSION 
** Total ** 


Type 

width 

Character 

5 

Numeric 

1 

Character 

12 

Numeric 

6 

Character 

1 


26 


Dec 


2 


Index 

N 

N 

N 

N 

N 


DATA BASE: SCJUST.DBF 


Field 

1 

Field Name 
SEQ_NO 

Type 

Character 

Width Dec 

s 

Index 

v 

2 

MISSION 

Character 

1 

X 

N 

3 

BN_ECH1 

character 

1 

4 

EN~ECH2 

Character 

1 

n 

A* 

5 

en_equip 

Character 

1 

r 

N 

N 

N 

N 

N 

ay 

6 

avenue 

Character 

1 

7 

river obs 

Character 

1 

8 

CITY ~ 

Character 

1 

9 

hoc 

character 

1 

10 

DIST_OBJ 

character 

1 

11 

bridge 

Character 

1 

N 

N 

N 

12 

RIVER_CRS 

Character 

1 

E-51 




f 


13 

FLANKS 

Character 

1 

N 

14 

REDISPOSE 

Character 

1 

N 

15 

FR_EQUIP 

Character 

1 

N 

16 

TIME 

Character 

1 

N 

17 

COA 

Character 

1 

N 

' ** Total ** 


22 



I 






DATA BASE: 

SCPOWER•DBF 

! 

Field 

Field Name 

Type 

Width 

Dec 

Index 

- 

1 

UNIT 

Character 

12 


Y 


2 

POWER 

Numeric 

6 

2 

N 


** Total ** 


19 




1 Field 

Field Name 

DATA BASE: SITAWARE.DBF 

Type Width Dec Index 

| 1 

SEQ NO 

Character 

5 

Y 

1 2 

Ql 

Character 

l 

N 

3 

Q2 

Character 

1 

N 

4 

<23 

Character 

1 

N 

5 

Q4 

character 

1 

N 

6 

<25 

Character 

1 

N 

7 

<26 

Character 

1 

N 

8 

<27 

Character 

1 

N 

9 

<28 

Character 

1 

N 

10 

<29 

character 

1 

N 

11 

Q10 

Character 

1 

N 

12 

<211 

Character 

1 

N 

13 

<212 

Character 

1 

N 

14 

<213 

Character 

1 

N 

15 

<214 

Character 

1 

N 

16 

<215 

Character 

1 

N 

17 

<216 

Character 

1 

N 

18 

<217 

Character 

1 

N 

19 

Q18 

Character 

1 

N 

20 

<219 

Character 

1 

N 

21 

Q20 

Character 

1 

N 

22 

<221 

Character 

1 

N 

23 

<222 

Character 

1 

N 

24 

<223 

Character 

1 

N 

25 

<224 

Character 

1 

N 

26 

<225 

Character 

1 

N 

27 

Q26 

Character 

1 

H 

28 

<227 

Character 

1 

N 

29 

<228 

Character 

1 

N 

30 

<229 

Character 

1 

N 

31 

<230 

Character 

1 

N 

32 

<231 

character 

1 

N 

33 

<232 

Character 

1 

N 

** Total ** 


38 



DATA BASE: SITCMDEL.DBF 


E-52 



Field 

Field Name 

Type 

width 

Dec 

Index 

1 

SEQ_NO 

Character 

5 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SITJTIME 

Character 

6 


N 

8 

OPLAN_NO 

Numeric 

2 


N 

9 

CM_ID 

Numeric 

3 


N 

10 

OPLAN 

Character 

20 


N 

11 

NAME 

Character 

12 


N 

** Total ** 


79 




DATA BASE: SITCMLOC.DBF 


eld 

Field Name 

Type 

width 

Dec 

Index 

1 

SEQ_NO 

Character 

5 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT DATE 

Date 

8 


N 

7 

SIT TIME 

Character 

6 


N 

8 

OPLAN NO 

Numeric 

2 


N 

9 

CM_ID 

Numeric 

3 


N 

10 

LOCXl 

Numeric 

6 


N 

11 

LOCYl 

Numeric 

6 


N 

12 

LOCX2 

Numeric 

6 


N 

13 

LOCY2 

Numeric 

6 


N 

14 

LOCX3 

Numeric 

6 


N 

15 

LOCY3 

Numeric 

6 


N 

16 

LOCX4 

Numeric 

6 


N 

17 

LOCY4 

Numeric 

6 


N 

18 

LOCX5 

Numeric 

6 


N 

19 

LOCY5 

Numeric 

6 


N 

20 

LOCX6 

Numeric 

6 


N 

21 

LOCY6 

Numeric 

6 


N 

22 

LOCX7 

Numeric 

6 


N 

23 

LOXY7 

Numeric 

6 


N 

24 

LOCX8 

Numeric 

6 


N 

25 

LOCY8 

Numeric 

6 


N 

26 

LOCX9 

Numeric 

6 


N 

27 

LOCY9 

Numeric 

6 


N 

28 

LOCXl0 

Numeric 

6 


N 

29 

LOCY10 

Numeric 

6 


N 

30 

LOCXl1 

Numeric 

6 


N 

31 

LOCYl1 

Numeric 

6 


N 

32 

LOCX12 

Numeric 

6 


N 

33 

LOCYl2 

Numeric 

6 


N 

34 

LOCX13 

Numeric 

6 


N 

35 

LOCYl3 

Numeric 

6 


N 

36 

LOCX14 

Numeric 

6 


N 

37 

LOCYl4 

Numeric 

6 


N 


E-53 







38 LOCX15 

Numeric 

6 

N 

39 LOCY15 

Numeric 

6 

N 

40 OPLAN 

Character 

20 

N 

41 NAME 

Character 

12 

N 

Total ** 


259 



DATA BASE: SITNEWCM.DBF 


eld 

Field Name 

Type 

width 

Pec 

Index 

1 

SEQ_NO 

Character 

5 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT DATE 

Date 

8 


N 

7 

SIT TIME 

Character 

6 


N 

8 

OPLAN_NO 

Numeric 

2 


N 

9 

CM_ID 

Numeric 

3 


N 

10 

NAME 

Character 

12 


N 

11 

FORCE 

Character 

7 


N 

12 

TYPE 

Character 

6 


N 

13 

SCAL1_40 

Logical 

1 


N 

14 

SCAL1_80 

Logical 

1 


N 

15 

SCAL1~160 

Logical 

1 


N 

16 

SCALl 400 

Logical 

1 


N 

17 

SCAL1 800 

Logical 

1 


N 

18 

STATUS 

Character 

12 


N 

19 

EFF2DATE 

Date 

8 


N 

20 

EFF2TIME 

character 

6 


N 

21 

ECHELON 

Character 

6 


N 

22 

LOCX1 

Numeric 

6 


N 

23 

LOCY1 

Numeric 

6 


N 

24 

LOCX2 

Numeric 

6 


N 

25 

LOCY2 

Numeric 

6 


N 

26 

LOCX3 

Numeric 

6 


N 

27 

LOCY3 

Numeric 

6 


N 

28 

LOCX4 

Numeric 

6 


N 

29 

LOCI 4 

Numeric 

6 


N 

30 

LOCX5 

Numeric 

6 


N 

31 

LOCY5 

Numeric 

6 


N 

32 

LOCX6 

Numeric 

6 


N 

33 

LOCY6 

Numeric 

6 


N 

34 

LOCX7 

Numeric 

6 


N 

35 

LOXY7 

Numeric 

6 


N 

36 

LOCX8 

Numeric 

6 


N 

37 

LOCY8 

Numeric 

6 


N 

38 

LOCX9 

Numeric 

6 


N 

39 

LOCY9 

Numeric 

6 


N 

40 

LOCX10 

Numeric 

6 


N 

41 

LOCY10 

Numeric 

6 


N 

42 

LOCX11 

Numeric 

6 


N 

43 

LOCY11 

Numeric 

6 


N 

44 

LOCX12 

Numeric 

6 


N 

45 

LOCY12 

Numeric 

6 


N 

46 

LOCX13 

Numeric 

6 


N 


E-54 





47 

LOCY13 

Numeric 

48 

LOCX14 

Numeric 

49 

LOCY14 

Numeric 

50 

LOCX15 

Numeric 

51 

LOCY15 

Numeric 

52 

OPLAN 

Character 


** Total ** 


6 

6 

6 

6 

6 

20 

309 


N 

N 

N 

N 

N 

N 


DATA BASE: SITRQST.DBF 


eld 

Field Name 

Type 

Width 

Dec 

Index 

1 

SEQ NO 

Character 

5 


N 

2 

DATE 

Date 

8 


N 

3 

TIME 

Character 

6 


N 

4 

WINDOW 

Character 

7 


N 

5 

STACK 

Numeric 

1 


N 

6 

SIT_DATE 

Date 

8 


N 

7 

SIT_TIME 

Character 

6 


N 

8 

OPLAN_NO 

Numeric 

2 


N 

9 

FORCE - 

Character 

7 


N 

10 

UNIT NO 

Numeric 

3 


N 

11 

MESSAGE 

Character 

20 


N 

12 

OPLAN 

Character 

20 


N 

13 

UNIT 

Character 

15 


N 

Total ** 


109 




DATA BASE: SITTASKO.DBF 


Field 

Field Name 

Type 

Width 

1 

SEQ NO 

Character 

5 

2 

DATi 

Date 

8 

3 

TIME 

Character 

6 

4 

WINDOW 

character 

7 

5 

STACK 

Numeric 

1 

6 

SIT_DATE 

Date 

8 

7 

SITJTIME 

character 

6 

8 

OPLAN NO 

Numeric 

2 

9 

FORCE 

Character 

7 

10 

UNITJNO 

Numeric 

3 

11 

HI ECH NO 

Numeric 

3 

12 

RELATE 

Character 

4 

13 

OPLAN 

character 

20 

14 

UNIT 

Character 

15 

15 

HIGH ECH 

Character 

15 

** Total ** 


111 


Index 

N 

N 

N 

N 

N 

N 

N 

H 

N 

N 

N 

N 

N 

N 

N 



DATA BASE: SITULOC.DBF 

Field Field Name Type Width Dec index 

1 seq_no character 5 K 

2 DATE Date 8 N 

3 TIME character 6 N 

4 WINDOW character 7 N 


E-55 


5 

STACK 

Numeric 

1 

6 

SIT_DATE 

Date 

8 

7 

SIT~TIME 

Character 

6 

8 

OPLAN NO 

Numeric 

2 

9 

FORCE 

Character 

7 

10 

UNIT NO 

Numeric 

3 

11 

X LOC 

Numeric 

6 

12 

Y_LOC 

Numeric 

6 

13 

OPLAN 

Character 

20 

14 

UNIT 

Character 

15 

Total ** 


101 


DATA BASE: TASKS VAX,. DBF 


Field 

1 

2 

3 

4 

5 

6 

7 

8 
9 

10 

11 

12 

13 

14 

15 

16 

17 

18 

19 

20 
21 
22 

23 

24 

25 

26 

27 

28 

29 

30 

31 

32 

33 

34 

35 

36 

37 

38 

39 

40 


1 Field Name 

i Type 

Width 

SEQ_NO 

Character 

5 

STPRSTR 

Numeric 

1 

STPRLSGN 

Numeric 

1 

STPROTHER 

Numeric 

1 

STPREST 

Numeric 

1 

STOPCURR 

Numeric 

1 

STOPOVLY 

Numeric 

1 

STOPTSKO 

Numeric 

1 

STOPFRAG 

Numeric 

1 

STOPGUID 

Numeric 

1 

STINCOMP 

Numeric 

1 

STINCOKM 

Numeric 

1 

STINREIN 

Numeric 

1 

STINARtY 

Numeric 

1 

STINEST 

Numeric 

1 

STINRPT 

Numeric 

1 

STINWHST 

Numeric 

1 

STINWFOR 

Numeric 

1 

STLGCIII 

Numeric 

1 

STLGCV 

Numeric 

1 

STLGEQP 

Numeric 

2 

STLGEST 

Numeric 

1 

rfprstr 

Numeric 

1 

RFPRXOSS 

Numeric 

1 

RFPRPO' 

Numeric 

1 

RFOPORt, 

Numeric 

1 

RFOPEQP 

Numeric 

1 

RFOPECBR 

Numeric 

1 

RFOPHIN’1 

Numeric 

1 


Dec 


RFIN8TR 

RFXNEQP 

RFINECHR 

RFLGSPLY 

RFLGTRNS 

DX9T2 

DXFF4 

DXfT5 

DXIT6 

DXF77 


Numeric 

Numeric 

Numeric 

Numeric 

Numeric 

Numeric 

Numeric 

Numeric 

Numeric 

Numeric 

Numeric 


1 

1 

1 

1 

1 

1 

1 

1 

1 

1 

1 


index 

Y 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

K 

N 

N 

S 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 

N 


E-56 



41 

DIFF8 

Numeric 

1 

N 

42 

DIFF9 

Numeric 

1 

N 

43 

CNCLP8 

Logical 

1 

N 

44 

CNCLAGR 

Logical 

1 

N 

45 

CNCL2 

Logical 

1 

N 

46 

CNCL4 

Logical 

1 

N 

47 

CNCL5 

Logical 

1 

N 

48 

CNCL6 

Logical 

1 

N 

49 

CNCL7 

Logical 

1 

N 

50 

SCALE 

Character 

1 

N 

51 

CFFPRS 

Numeric 

1 

N 

52 

CFFEQP 

Numeric 

1 

N 

53 

CFEPRS 

Numeric 

1 

N 

54 

CFEEQP 

Numeric 

1 

N 

55 

CFPOL 

Numeric 

1 

N 

56 

CFAMMO 

Numeric 

1 

N 

57 

CFFEBA 

Numeric 

1 

N 

58 

CFBDUR 

Numeric 

1 

N 

59 

VALRANG 

Logical 

1 

N 

Total ** 


64 



eld 

Field Name 

Type 

DATA BASE: 

Width 

TEAMPRF.DBF 

Dec Index 

1 

SEQ NO 

Character 

5 

Y 

2 

ORG 

Logical 

1 

N 

3 

MINS 

Numeric 

3 

N 

4 

FOLORG 

Logical 

1 

N 

5 

REFORG 

Logical 

1 

N 

6 

IMORG 

Logical 

1 

N 

7 

MANTIME 

Logical 

1 

N 

8 

DISTRACT 

Logical 

1 

N 

9 

GETBACX 

Logical 

1 

N 

10 

EQSTS 

Logical 

1 

N 

11 

LSUB 

Logical 

1 

N 

12 

SUBA 

Logical 

1 

N 

13 

LADQ 

Logical 

1 

N 

14 

ROLCON 

Logical 

1 

N 

15 

ADQKNOW 

Logical 

1 

N 

16 

DOMPER 

Logical 

1 

N 

17 

TEAMCON 

Logical 

1 

N 

18 

CT 

Logical 

1 

N 

19 

CAPRES 

Logical 

1 

N 

Total ** 


26 


DATA BASE; TIMELINE.DBF 


Field 

Field Name 

Type 

width 

1 

SEQ NO 

Character 

5 

2 

STEP! 

Numeric 

3 

3 

STEP2 

Numeric 

3 

4 

STEP3 

Numeric 

3 

5 

STEP4 

Mumeric 

3 

6 

STEP 5 

Numeric 

3 


Dec Index 
T 
N 
N 
N 
N 
N 


E-57 


7 

STEF6 

Numeric 

3 

N 

8 

STEP7 

Numeric 

3 

N 

9 

STEP 8 

Numeric 

3 

N 

10 

STEP 9 

Numeric 

3 

N 

11 

STEP10 

Numeric 

3 

N 

** Total ** 


36 





DATA BASE: 

VERTASK.DBF 

Field 

Field Name 

Type 

width 

Dec Index 

1 

VFY BDE 

Character 

12 

N 

2 

VFY BN 

Character 

12 

N 

3 

VFY CO 

Character 

12 

N 

4 

VFY BASE 

Character 

12 

N 

5 

VFY MESS 

Character 

10 

N 

** Total ** 


59 



DATA BASE: WINDOW.DBF 


Field 

Field Name 

Type 

width 

1 

SEQ NO 

Character 

5 

2 

DATE 

Date 

8 

3 

TIME 

character 

6 

4 

WINDOW 

Character 

7 

5 

STACK 

Numeric 

1 

6 

ACTION 

character 

1 

** Total ** 


29 


Dec Index 
N 
N 
Y 
N 
N 
N 


DATA BASE: WORKASMT.DBF 


Field Field Name Type Width 

1 SEQ_NO Character 5 

** Total ** 6 


Dec 


Index 

Y 


E-58 




APPENDIX F - EDDIC ENVIRONMENT VARIABLES 


This appendix describes the Unix environment variables used in the EDDIC 
system. 

Environment Variable Description 


BLUE_ASSET_UNIT 

BLU£FOR_AMMO_AUTH 

BLUEFOR_AMMO_AUTH_NDX 

BLUEFOR_AMMO_CURR 

BLUEFOR_AMMO_CURR_NDX 

BLUEFOR_AMMO_TRACK 

BLU£FOR_EQUIP_AUTH 

BLUEFOR_£QUIP_AUTH_NDX 

BLUEFOR_£QUIP_CURR 

BLUEFOR_EQUIP_CURR_NDX 

BLUEFOR_EQUIP_TRACK 

BLUEFOR_FUEL 

BLUEFOR_FUEL_NDX 

BLUEF OR_LOCAT I ON 

BLUEFOR_LOCATION_NDX 

BLUEFOR_ORGANIC_UNIT 

BLUEFOR_PERS 

BLUEFOR_PERS_NDX 

BLUEFOR_TOP_UNIT 

BLUEFOR_UNIT_CONVERSION 

BLUEFOR_UNIT_STATUS 

BLUEFOR_UNIT_STATUS_NDX 

BLUEFOR UNIT XREF 


Data base BLUEFOR_ASS£T_UNIT. 

Data base BLUEFOR_AUTH_AMMO. 

Data base BLUEFOR_AUTH_AMMO_INDEX. 
Data base BLUEFOR_CURR_AMMO. 

Data base BLUEFOR_CURR_AMMO_INDEX. 
Data base BLUEFOR_AMMO_TRACK. 

Data base BLUEFOR_AUTH_EQUIP. 

Data base BLUEFOR_AUTH_EQUIP_INDEX. 
Data base BLUEFOR_CURR_EQUIP. 

Data base bluefor_curr_equip_index. 
Data base 8 LUEFOR_equip_track. 

Data base bluefor_fuel. 

Data base BLUEFOR_fuel_index. 

Data base bluefor_unit_loc. 

Data base BLUEFOR_UNIT_LOC_INDEX. 
Data base bluefor_organic_task_org. 
Data base BLUEFOR_PERSONNEL. 

Data base BLUEFOR_PERSONNEL_INDEX. 
Data base TASK_ORG_TOP_UNIT_MENU. 
Data base BLUEFOR_UNlT_CONVERT. 

Data base BLUEFOR_UNIT_STATUS. 

Data base BLUEFOR_UNIT_STATUS_INDEX. 
Data base BLUEFOR UNIT NAME. 


F-1 




BUILD BLUE AMMO 


Logical flag to indicate if the BLUEFOR 
ammunition data base should be built as part 
of the situation data base build. 


BUILD BLUE EQUIP 


BUILD BLUE FUEL 


BUILD BLUE PERS 


BUILD BLUE STATUS 


BUILD BLUE ULOC 


BUILD_C2_MAP_MENU 

BUILD_CHTRL_MSR 

BUILD_EX 

BUILD_G2 

BUILD_G3 

BUILD_G4 

BUILD_OBSTACLE 

BUILD_ONE 

BUILD_OPFOR_jEQUIP 

BUILD_OPFOR__REINF 

BUILD OPFOR STATUS 


Logical flag to indicate if the BLUEFOR 
equipment data base should be built as part 
of the situation data base build. 

Logical flag to indicate if the BLUEFOR fuel 
data base should be built as part of the 
situation data base build. 

Logical flag to indicate if the BLUEFOR 
personnel data base should be built as part 
of the situation data base build. 

Logical flag to indicate if the BLUEFOR unit 
status data base should be built as part of 
the situation data base build. 

Logical flag to indicate if the BLUEFOR unit 
location data base should be built as part of 
the situation data base build. 

Data base MAP_BUILD_MENU. 

Logical flag to indicate if the control 
measure data base should be built as part of 
the situation data base build. 

Data base G3_BUILD_MENU. 

Data base G2 _build_menu. 

Data base G3_BUILD_MENU. 

Data base G4_BUILD_MENU. 

Logical flag to indicate if the obstacle data 
base should be built as part of the situation 
data base build. 

Data base G2_BUILD_MENU. 

Logical flag to indicate if the opfor 
equipment data base should be built as part 
of the situation data base build. 

Logical flag to indicate if the OPFOR 
reinforcing time data base should be built as 
part of the situation data base build. 

Logical flag to indicate if the OPFOR unit 
status data base should be built as part of 
the situation data base build. 




BUILD_OPFOR_ULOC 

BUILD_OPPLAN 

BUILD_THREE 

BUILD_TWO 

C2_NEW_PR0D 

C2_PRODUCT_R£CORD_DB 

C2_PRODUCT_ROUTER_HOST 

C2_PRODUCT_ROUTER_SERV 

C2_RECORD 

C2_REQUEST 

C2_WINDOW 

C2LAB_BLUE_TASK_ORG 

C2LAB_BLUEFOR_AMMO 

C 2 LAB_BLUEFOR_E QUIP 

C2LAB_BLUEFOR_FUEL 

C 2 LAB_BLUEFOR_LOCATION 

C2LAB_BLUEFOR_PERS 

C2LAB_CONTROL_MEASURE 

C2LAB_DB 

C2LAB_D8 

C2LAB_OBSTACLE 

C2LAB_OPFOR_EQUIP 

C2LAB_OPFOR_LOCATION 

C2LAB_OPFOR_REINFORCE 

C2LAB OPFOR STATUS 


Logical flag to indicate if the OPFOR unit 
location data base should be built as part of 
the situation data baBe build. 

Logical flag to indicate if the OPLAN data 
base should be built as part of the .situation 
data base build. 

Data base g4_BUILD_henu. 

Data base G3_BUILD_KENU. 

data base TRAN_NEW_C2. 

Data base C2_PR0DUCT_REC0RD. 

Name of the computer where the C2 product 
router is running. 

Entry in the services file that is reserved 
for the C2 product router. 

Data base C2_PRODUCT_RECORD. 

Data base TRAN_C2_REQUEST. 

Data base TRAN_C2 _window. 

Data base bluefor_task_org_source. 

Data base BLUEFOr_ammo_source. 

Data base bluefor_equip_source. 

Data base BLUEFOR_FUEL_SOURCE. 

Data base BLUEFOR_UNIT_LOC_SOURCE. 

Data base bluefor_personnel_source. 

Data base CONTROL_MEASURE_SOURCE. 

Data base C2_PR0DUCT_S0URCE. 

Data base REFER£NCE_SOURCE. 

Data base OBSTACLEJSOURCE. 

Data base OPFOR__EQUIP_SOURCE. 

Data base OPFOR_UNIT_LOC_SOURCE. 

Data base OPFOR__REINFORCE_TIME. 

Data base OPFOR UNIT STATUS SOURCE. 


F-3 



C2LAB_OPFOR_TASK_ORG 

CDB_H£ADER_DB 

CDB_PARTXCIPANT_DB 

CDB_PROD_DESC_DB 

CDB_PRODUCT_DB 

CHARACTER_FONT_FILE 

CNTRL_MSR_POINT_NDX 

CNTRL_HSR_XREF 

CNTRL_POINT_XREF 

CONTOUR_DESCRIPTION_FILE 

CONTROL_DB 

CONTROL_DISPLAY_MANAGER 

CONTROL_MEASURE 

C ON T ROL_MEAS URE_P OIN T 

CONTROL_MEASURE_NDX 

CONTROL_MENU 

CONTROL_RECORD 

CONTROL_RECORD_DB 

CONTROL_REQUEST 

CONTROL_ROUTER_HOST 

CONTROL_ROUTER_SERV 

CONTROL_WINDOW 
CTL_PARTICIPANT_DB 
CTL_PROD_DESC_DB 
CTL PRODUCT DB 


Data base OPFOR_TASK_ORG_SOURCE. 

Data base C2_PRODUCT_HEADER. 

Data base SEND_PARTICIPANT_SOURCE. 

Data base C2_PRODUCT_DESC. 

Data base C2_PRODUCT. 

Name of the font file to use for text on the 
tactical nap, task organization tool, and 
graphical status report. 

Data base cntrl_msr_point_index. 

Data base CONTROL_MEASURE_NAME. 

Data base CNTRL_MSR_POINT_NAME. 

Data base contour_desc. 

Data base EXP_CONTROL_SOURCE. 

Path and file name of the experiment control 
display manager executable. 

Data base CONTROL_MEAS URE. 

Data base CNTRL_KSR_POlNT. 

Data base CONTROL_MEASURE_INDEX. 

Data base EXP_CONTROL_MENU. 

Data base EXP_CONTROL_RECORD. 

Data base EXP_CONTROL_RECORD. 

Data base TRAN_CONTROL_REQUEST. 

Name of the computer where the experiment 
control router is running. 

Entry in the services file that is reserved 
for the experiment control router. 

Data base TRAN_CONTROL_wiNDOW. 

Data base EXP_CONTROL_PARTICIPANT. 

Data base EXP_CONTROL_PROD_DESC. 

Data base exp control product. 


F-4 







I 


DB_MANAGER 

DB_MANAGER 

EDDIC_STATION_USER 

ELEV_DESCRIPTION_FILE 

FDB_HEADER_DB 

FDB_PROD_DESC_DB 

FDB_PRODUCT_DB 

FORM_TOOL_FILE 

HDB_HELP_DESC_DB 

HDB_HELP_TEXT_DB 

HEADER_DB 

HEADER_DB 

HELP_MENU 

HELP_MENU_FILE 

HELP_SOURCE 

HILITE_DESCRIPTION_FILE 

ICON_PATH 

LASER_SERVER 

LUT_UPDATE 
KAP_DESCRIPTION_FILE 
MAP LEGEND 


Name of the C2 product data base manager. 
Used for printing the C2 products 
(C2_DB_MANAGER). 

Name of the reference data base manager. 

Used for printing the reference products 
(REFERENCE_DB_MANAGER). 

Identification of the user of the 
workstation. Legal values are g2_plans, 
g3_plans, g4_plans, and experimenter. 

Data base ELEVATION_DESC_1T0400. 

Data base R£FERENCE_HEADER. 

Data base REFERENCE_PROD_DESC. 

Data base REFERENCE_PRODUCT. 

Data base FORM_DESCRIPTION. 

Data base HELP_PROD_DESC. 

Data base HELP_PRODUCT. 

Name of the C2 product report header data 
base. Used for building the C2 products 
<C2_PR0DUCT_HEADER). 

Name of the reference report header data 
base. Used for building the reference 
products (REFERENCE_HEADER). 

Data base HELP_menu. 

Data base HELP_KENU. 

Data base dELP_S0URCE. 

Data base LUT_HILITE_DESC. 

Data base IC0N_STACK_DB. 

Name of the laserwriter print server 
computer. Used for workstation screen dumps. 

Data base TRAN_LOOKUP_TABLE. 

Data base MAP_DESC. 

Data base MAP tegend. 


MAP STATUS 


Data base TRAN MAP 







MESSAGE CREATED BY USER 


MES SAGE_DISPLAY_MANAG£R 

MES SAGE_LOG_DB 

MESSAGE_MAP_MENU 

OBSTACLE 

OBSTACLE_NDX 

OBSTACLE_XREF 

OPFOR_EQUIP_AUTH 

OPFOR_EQUIP_AUTH_NDX 

OPFOR_EQUIP_CURR 

OPFOR_EQUIP_CURR_NDX 

OPFOR_EQUIP_LIST 

OPFOR_LOCATION 

OPFOR_LOCATION_NDX 

OPF OR_ORGANIC_UNIT 

OPFOR_UNIT_CONVERSION 

OPFOR_UNIT_STATUS 

OPFOR_UNIT_STATUS_NDX 

OPFOR_UNIT_XREF 

OPPLAN_DB 

OPPLAN_SOURCE 

OVERLAY_LOOKUP_TABLE 

PRODUCT DB 


Logical flag to indicate if a message window 
is created by the user or by the system. If 
the window is created by the user (= true), 
the window starts in the open position. If 
the window is created by the system (= 
false), the window starts as an icon. 

Path and file name of the message window 
display manager executable. 

Data base MESSAGE_LOG. 

Data base MAP_MESSAGE_MENU. 

Data base OBSTACLE. 

Data base OBSTACLE_INDEX. 

Data base OBSTACLE_NAME. 

Data base OPFOR_AUTH_EQUIp. 

Data base OPFOR_AUTH_EQUIP_INDEX. 

Data base opfor_curr_equip. 

Data base opfor_curr_equip_index. 

Data base opfor_equip_name. 

Data base OPFOR_unit_loc. 

Data base opfor_unit_loc_index. 

Data base opfor_organic_task_org. 

Data base opfor_unit_convert. 

Data base 0PF0R_UNIT_STATUS. 

Data base OPFOR_UNIT_STATUS_INDEX. 

Data baBe OPFOR_UNIT_NAME. 

Data base OPLAN_LXST. 

Data base OPLAN_LIST_SOURCE. 

Data base LUT_OVERLAY. 

Name of the experiment control data base. 

Used for building the experiment control data 
base (EXP_CONTROL_PRODUCT). 






PRODUCT_DB 

PRODUCT_DB 

PRODUCT_DB 

PRODOCT_DESC_DB 

PRODUCT_DESC_DB 

PRODUCT_DESC_DB 

PRODUCT_DESC_DB 

PRODUCT_XREF 

PRODUCT_XREF 

PRODUCT_XREF 

PRODUCT XREF 


RECORD_MAP_INTERACTION 

RECORD_SESSION 

REF_RECORD 
REF_REQUEST 
REF VIEW EX 


Name of the help data base. Used for 
building the help data base (HELP_PRODUCT). 

Name of the C2 product data base. Used for 
building the C2 product data base 
<C2_PR0DUCT). 

Mane of the reference data base. Used for 
building the reference data base 
(REFERENCE_PRODUCT). 

Mane of the experiment control description 
data base. Used for building the experiment 
control data base (EXP_CONTROL_PROD_DESC). 

Name of the help description data base. Used 
for building the help data base 
(HELP_PROD_DESC). 

Name of the C2 product description data base. 
Used for building the C2 product data base 
(C2_PR0D_DESC). 

Name of the reference description data base. 
Used for building the reference data base 
(R£FERENCE_PROD__DESC) . 

Name of experiment control product name data 
base. Built as part of the experiment 
control data base build process 
( EXP_CONTROL_NAME ) . 

Name of the help product name database. 

Built as part of the help data base build 
proce s s (HELP_NAME). 

Name of the C2 product name data base. Built 
as part of the C2 product data base build 
process <C2_PRODUCT_NAME). 

Name of the reference name data base. Built 
as part of the reference data base build 
process (REFERENCE_NAME). 

Logical flag to indicate if the interactions 
with the tactical map should be recorded. 

Logical flag to indicate if an EDDXC session 
should be recorded. 

Data base Reference record. 

Data base TRAN_REF_REQUEST. 

Data base G3 REFERENCE MENU. 





RE F_VIEW_ONE 

REF_VIEW_THREE 

REF_VIEW_TWO 

REF_WINDOW 

REFERENCE_RECORD_DB 

REFERENCE_ROUTER_HOST 

REFERENCE_ROUTER_SERV 

REPORT_OUTPUT 

REPORT_OUTPUT 

ROOT_MENU 

ROUTER_HOST 

ROUTER_HOST 

ROUTER_SERV 

ROUTER_SERV 

SIT_ACTIVITY 

SIT_AMHO 

SIT_BLUE_TASX_ORG 
SIT_CNTRX,_MSR_DELF' T 'E 
SIT_CNTRL_MSR_EFFECT 
SIT_CNTRL_HS R_LOCATZ 
SIT_CNTRL_MSR_8TATUS 
SIT EQUIP 


Data base G2_REFERENCE_MENU. 

Data base G4_REFERENCE_HENU. 

Data base G3_REFERENCE_MENU. 

Data base TRAN_R£F_WINDOW. 

Data base REFERENCE_RECORD. 

Name of the computer where the reference 
router is running. 

Entry in the services file that is reserved 
for the reference router. 

Name of the file to print the C2 product 
reports to (PRODUCT_RARDCOPY). 

Name of the file to print the reference 
product reports to (PRODUCT_HARDCOPY). 

Data base ROOT_wiNDOW_MENU. 

Name of the computer where the C2 product 
router is running. Used for printing the 02 
products. 

Name of the computer where the reference 
router is running. Used for printing the 
reference products. 

Entry in the services file that is reserved 
for the C2 product router. Used for printing 
the C2 products. 

Entry in the services file that is reserved 
for the reference router. Used for printing 
the reference products. 

Data base TRAN__ACTIVITY. 

Data base TRAN_AMMUNITION. 

Data base TRAN_BLUZFOR_TASK_ORG. 

Data base TRAN_CNTRL_MSR_DEL. 

Data base TRAN_CNTRL_MSR_EFF_TIME. 

Data base TRAN_CNTRL_MSR_LOC. 

Data base TRAN_CNTRL_MSR_STAT. 

Data base TRAM EQUIPMENT. 




SIT FUEL 


Data base TRAM FUEL 


SIT_MISSION 

SIT_NEW_CNTRL_HS R 

SIT_NEW_OBSTACLE 

SIT_OBSTACLE_DELETE 

SIT_OBSTACLE_EFFECT 

SIT_OBSTACLE_LOCATE 

SIT_OBSTACLE_STATUS 

SIT_OPFOR_TASK_ORG 

SIT_PERS SIT_RECORD 

SIT_RECORD 

SIT_REINF 

SIT_REQUEST 

SIT_STRENGTH 

SIT_UNIT_LOC 

SIT_WINDOW 

SITUATION_RECORD_DB 

SITUATION_ROUTER_HOST 

SITUATION_ROUTER_SERV 

SPOOL_PATH 

START_DATE 

SYMBOL_FONT_FILE 

TOOLS 

TOP_UNIT_KENU 

UNBZLZTE DESCRIPTION FILE 


Data base TRAN_UNIT_MISSION. 

Data base TRAN_NEW_CNTRL_MSR. 

Data base TRAN_NEW_OBSTACLE. 

Data base TRAN_OBSTACLE_DEL. 

Data base TRAN_OBSTACLE_EFF_TIME. 

Data base tram_obstacle_loc. 

Data base TRAN_OBSTACLE_STAT. 

Data base TRAN_OPFOR_TASK_ORG. 

Data base TRAN_PERSONNEL. 

Data base SITUATION_RECORD. 

Data base TRAN_OPFOR_REINFORCE. 

Data base tran_situation_request. 

Data base tran_opfor_strength. 

Data base tram_unit_location. 

Data base tran_situation_window. 

Data base SITUATION_RECORD. 

Name of the computer where the situation data 
router is running. 

Entry in the services file that is reserved 
for the situation data router. 

Path name to use as a repository for 
screendump bitmap image files. 

Experiment start time, (format: 
HHMM/DD/MM/YY). 

Name of the font file to use for displaying 
unit symbols on the tactical map and task 
organization tool. 

Data base tool_menu. 

Data base task_org_top_unit_menu. 

Data base LUT UNHILZTE desc. 


F-9 







UNIT MENU 


UNIT_TYPE_BTN_MENU 
US E_DBASE_BLUE_STATUS 

USE_DBASE_CNTRL_MSR 

VIEW_C2_MAP_MENU 

VIEW_EX 

VIEW_G2 

VIEW_G2 

VIEW_G3 

VIEW_G4 

VIEW_MENU 

VIEW_ONE 

VIEW_ONE 

VIEWJTHREE 

VIEW_THREE 

VIEW_TWO 

VIEW TWO 


Data base TASK_ORG_UNIT_MENU. 

Data base TASK_ORG_UNIT_TYPE_HENU. 

Flag to indicate if the BLUEFOR unit status 
information is located in the task 
organization source file. 

Flag to indicate if the control measure 
source file was created from the dBASE 
scenario manager. 

Data base MAP_VIEW_C2_MENU. 

Data base G3_VIEW_c2_MENU. 

Data base to use as input to the C2 product 
print program. This file is the same format 
as the view C2 menu data base. 

Data base G2_VIEW_C2_MENU. 

Data base g3_view_c2_menu. 

Data base G4_VIEW_C2_«ENU. 

Data base Task_org_tool_menu. 

Name of the view C2 menu file to be created 
by the C2 product build process for the G2 
workstation <g2_view_c2_menu). 

Name of the reference menu file to be created 
by the reference build process for the G2 
workstation (G2 _reference_menu). 

Name of the view C2 menu file to be created 
by the C2 product build process for the G4 
workstation (G4 _VIEW_c2_MENU). 

Name of the reference menu file to be created 
by the reference build process for the G4 
workstation (G4 _reference_menu). 

Name of the view c3 menu file to be created 
by the C2 product build process for the G3 
workstation (G3_VIEW_C2_MENU). 

Name of the reference menu file to be created 
by the reference build procesa for the G3 
workstation (G3_REFERENCE menu). 


f-10 









