o 


REPORT DOCUMENTATIOI 

Public reporting burden Ibr this oollecnon of Information Is estimated to average i hour per 
sources gathering and maintaining the data needed, and reviewing the collection of Intoi 
Service, Directorate for Information Operations and Reports, f2f5 Jefferson Davis HighWi 
Regulatory Affairs, Office of Management and Budget, Washington, DC 20503. 


1. AGENCY USE 


(Leave 


2. REPORT 


AD-A285 329 


I iiiiiii III mil mil mil mil mil nil nil 


3. REPORT TYPE AND DATES 


j existing data 
Headquarters 
formation and 


4. TITLE AND :Compiler: VADSself for DEC Alpha AXP OSF/1, Product 
#2100-01439, Version 6.2 

Host/Target: DEC 3000 Model 500 AXP (under OSF/1. VI .3) 


6. AUTHORS: 

Wright-Patterson AFB, Dayton, OH 


7. PERFORMING ORGANIZATION NAME (S) AND 8. PERFORMING 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. ORGANIZATION 
135 

Wright-Patterson AFB, Dayton, OH 45433 



9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office, Defense Information System Agency 
Code TXEA, 701 S. Courthouse Rd.. Arlington, VA ^ 

22204-2199 ■ 9 


11. SUPPLEMENTARY 


ency 

'ryTlC,. 


10. SPONSORING/MONITORING 
AGENCY 


151 




12a. DISTRIBUTION/AVAILABILITY: Approved for public release: distribution 12b. DRISTRIBUTION 
unlimited 


13. (Maximum 200 

Rational Software Corporation, 940630W1.11360 


14. SUBJECT; Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 


15. NUMBER OF 


ANSI/Mil-STD-1815A 

16. PRICE 

17 SECURITY 

18. SECURITY 

19. SECURITY 


20. LIMITATION OF 

CLASSinCATION 


CLASSIRCATION 



UNCLASSIFIED 

UNCLASSIFIED 

UNCLASSIFIED 


UNCLASSIFIED 






























Certificate Infomation 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 30 June 1994. 

Coqpiler Name and Version: VAOSself for DEC Alpha AXP OSF/1, 

Product Number: 2100-01439, Version 6.2 


Host Computer System: 

Target Computer System: 
Customer Agreement Number: 


DEC 3000 Model 500 AXP 
under OSF/1, VI.3 

Same as host 

94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 


As a result of this validation effort, Validation Certificate 940630W1.11360 
is awarded to Rational Software Corporation. This certificate expires two 
years after N1L-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 





Ada Validation Facility 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 
Wright-Patterson AFB OH 


45433-5707 



Ada ^afldAKoi^ drganization 
Di rector ,'NC»m|Mter and Softwaa 
Institute for Defense Analyses 
Alexandria VA 22311 



on For 

L . ,:J 

U: ,-,r 

if 

ou' c .:d □ 

catioi‘1 

By 

ibulion / 

Availability Codes 

Dist 

Avail and/or 

Special 



Joint 
Dcxiald J. 

Director, _ 

Defense Information Systems Agency, 
Center for Information Management 













AVF Control Number: AVF-VSR-588.0694 
l>ate VSR Conpleted: July 21, 1994 

94-05-12-rat 


Ada COMPILER 
VALIDATICW SUMMARY REPORT: 

Certificate Number: 940630W1.11360 
Rational Software Corporation 

VADSself for DEC Alpha AXP OSF/1, Product Number: 2100-01439, Version 6.2 
DEC 3000 Model 500 AXP under OSF/1, VI.3 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 














Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was conpleted on 30 June 1994. 

Compiler Name and Version; VADSself for DEC Alpha AXP OSF/1, 

Product Number: 2100-01439, Version 6.2 


Host Computer System: 

Target Computer System; 
Customer Agreement Number; 


DEC 3000 Model 500 AXP 
londer OSF/1, VI.3 

Same as host 

94-05-12-RAT 


See section 3.1 for any additional information eibout the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11360 
is awarded to Rational Software Corporation. This certificate expires two 
years after MIL-STD-1815B is approved by ANSI. 


This report has been reviewed and is approved. 


Ada Validation Facility 0 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 





Ada va 
Directorr 


in Organization 

inputer and Software Engineering Division 
Institute for Defense Analyses 
Aiexamdria VA 22311 


Ada Joint Program office 
Donald J. Reifer 
Director, AJPO 

Defense Information Systems Agency, 
Center for Information Management 








DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 


Customer: Rational Software Corporation 

Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 

Ada In^lementation: 

Ada Compiler Name and Version: VADSself for DEC Alpha AXP OSF/1, 

Product Number: 2100-01439, Version 6.2 

Host Con^uter System: DEC 3000 Model 500 AXP (OSF/1 VI.3) 


Target Con^uter System: Same as host. 


Declaration: 

I, the undersigned, declare that I have no knowledge of deliberate 
deviations from the Ada Language Standard ANS1/MIL-STD-1815A, 

ISO 8652-1987, FIPS 119 as tested in this validation and documented 
in the Validation Summary Report. 











TABLE OF CXKTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VMilDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPH®ENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MC»IFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 




1 
















GIAPTER 1 


INTRODUCTION 


Ttie Ada inplenentation described above was tested according to the Ada 
Validation Procedures [Pro921 against the Ada Standard [Ada831 using the 
current Ada Coii(>iler Validation Capability (ACVC). This Validation Suinmary 
Report (VSR) gives an account of the testing of this Ada implementation. For 
any technical terms used in this report, the reader is referred to [Pro921. 
A detailed description of the ACVC may be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the coirputers, operating systems, and conpiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF \Aiich performed this 
validation or from: 

National Technical Information Service ^ 

5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF v^ich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 






INT1«0DUCTI0N 


1.2 REFERENCES 

[Ada83] Reference Meuiual for the Ada ProQranning LanquagC/ 

ANSI/MIL-STD-lSlSA, Febnoary 1983 and 86§2-l987. 

tPro92] Ada Conpiler Validation Procedures > Version 3.1, Ada Joint 
Program office, August 1992. 

[IXj 89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
v4iich it belongs. Class A, C, 0, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executzUsle tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Stan^rd are detected. Some of the class B tests contain legal Ada 
code vdiich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this inplementation is provided in ;^ppendix A. in 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 






INIWXmCTION 


For each Ada implementation, a custcmiized test suite is produced ^ the avf. 
This customization consists of making the modifications described in the 
preceding paragra^^, removing withdra%m tests (see section 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [UG89]). 

In orc}er to pass an ACVC an Ada in^lementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and euny needed hardware that have to be added to 
a given host and target computer system to allow 

transformation of Ada programs into executable form auid 
execution thereof. 

Ada Conpiler The means for testing conpliance of Ada inqplementations, 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system emd its 

Inplementation target computer system. 

Ada Joint The part of the certification body vdiich provides policy and 
Program guid^ce for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body vihich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides teclinical 

Validation guidance for operations of the Ada certification system. 

Orgeuiization 
(AVO) 

Coiqpliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementati on 

i 

Computer A functional unit, consisting of one or more computers and ' 

System associated software, that uses ccxnmon storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or nay consist of several inter-connected 
units. 


1-3 







INTTOOUCTICN 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity v^o enters into an agreement 

with an AVF v^ich specifies the terms and conditions for avf 
services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that conformity 
Conformance is realized or attainable on the Ada iioplementation for which 
validation status is realized. 

Host Ccmpiter A coof^uter system \diere Ada source programs are transformed 

System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada implementation. 

ISO International Organization for Standardization. 

LBM The Ada standard, or Language Reference Manxjal, published as 

ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form ''<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Conputer are executed. 

System 

Validated Ada The compiler of a validated Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implementation either by AVF testing or by registration lPro92). 

Validation The process of checking the conformity of an Ada conpiler to 
the Ada programming language and of issuing a certificate for 
this implementation. % 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 


1-4 






CHAPTER 2 


IMPLEMEinATION DEPE14DE1)CIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available frcan either the AVO or the avf. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD403LA 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A ' 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






2.2 INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO and the AJFO known as Ada 
Cramtentaries and ccminonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Coninentaries are included as 
appropriate. 


2-1 







IMPLEMENIAITGN DEPE2«DENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..2 (15 tests) 


C35713C, B86001U, and C86006G check for the predefined type LONGFLQAT; 
for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FliQAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST. .FLOAT'LAST may l)e used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numlDers of the 
largest predefined floating-point type and must be rejected, (See 
section 2,3.) 


C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVEMFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINEjOVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 

C96005B uses values of type LURATION's base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
same. 


CD1009C checks whether a length clause can specify a:non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

C332A84A, CD2A84E, (3}2A84I..J (2 tests), and CD2 a 8^0 use length clauses 
to specify non-default sizes for access types; this inplementation does 
not support such sizes. 

The tests listed in the following table check tliat USE ERROR is raised 
if the given file operations are not supported the gTven combination 
of mode and access method; this implementation supports these 
operations. 

Test File Operation Node File Access Method 


IN_FILE SEQUENTIAL_IO 

OUT FILE SEQUENTIAL 10 


CE2102D 

CE2102E 


CREATE 

CREATE 


2-2 






inPLEKEMTATlON DEPENDENCIES 


CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE21C2I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

reset 

OUT FILE 

direct_io 

C:E3102E 

CREATE 

IN_FILE 

TEXT_I0 

CE3102F 

RESET 

Any Mode 

TEXT_I0 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_I0 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_L1NE LENGTH and SET PAGE__LENG1H raise USE_ERROR 
if they specify an inappropriate value for Ihe external file; there are 
no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAyOUT_ERROR when the value of the page 
number exceeds CCXJNT'LAST; for this implementation, the value of 
CCXJNT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A 8360096 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD400aA 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST as 
the range constraint of a floating-point type declaration because the boxinds 


2-3 










INPLEMENTATiaa DEPENDENCIES 


lie outside of the reuige of safe numbers (cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, and CD2A31A..C were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, which uses 
unchecked Conversion according to the interpretation given in Ai-00590. The 
AVO rule3 that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TYPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
inplemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by commenting out line 36 and 
40; the modified test was passed. 


2-4 













CHAPTER 3 


PROCESSING INFORraVTION 


3.1 TESTING ENVIRONMENT 


The Ada inpleroentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada iiif>lementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW Compton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada inplenientation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada In^lementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programning Language 
Standard, vdiether the test is applicable or inapplicable; otherwise, the Ada 
Implementation fails the ACVC [Pro92]. 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

The list of items below gives the nxanber of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the inf>lementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 









PROCESSING INFORMATION 


a) Total Number of ^jplicable Tests 3824 

b) Total Number of Withdravm Tests 104 

c) Processed inapplicable Tests 41 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 242 (c+d+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a+b+f) 


3.3 TEST EXECUTIW 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 and copied to the host 
computer system. 


After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada in^lementation. 

The tests were compiled, linked and executed on the host computer system. 
The results were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a conplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 

Test output, conpiler and linker listings, euid job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. ' 


3-2 






APPE24DZX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
Zhe meeming and purpose of these parameters are explained in [1X389]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum ir^put-line length, vhich is 
the' value for $MAX_IN_LE2^—also listed here. These values are expressed here 
as Ada string aggregates, vhere "V" represents the nmximum input-line length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

$BIG_ID2 

$BIG_ID3 

$BIG_ID4 


499 — Value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 


$BIG_INT_LIT 

$BIG_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BLANKS 


(1..V-3 -> '0') & "298" 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 -> 'A') & '1' 4 
(1..V-20 


$MAX LEN INT BASED LITERAL 

- - - - "2:" & (1..V-5 -> '0') & "11:" 


$MAX LEN REAL BASED LITERAL 

- - - - 5 (1..V-7 -> '0') & "F.E:" 


A-1 







MACRO PARAMETIERS 


$MAX_STRING_LITEBAL & (1..V-2 -> 'A') & 

The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 64 

$ALIGKIMENT 4 

$COUNT_LAST 2147483647 

$DEFAULT_MEM_SIZE 16777216 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME AXP_SELF 

$DELTA DOC 

0.007000000000000000108420217248550443400745280086994171142578125 
$ENTRy_ADDRESS SYSTEM. 16#2#) 

$ENTRY_ADDRESS1 SYSTEM.'*+"(16#31#) 

$ENTRy_ADDRESS2 SYSTEM."+"(16#32#) 

$FIELD_LAST 2147483647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_TYPE 

$FLQAT_NAME NO__SUCH_TYPE 

$FORM_STRING "" 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_rAPACITy" 

$GREATER_THAN_DURATia4 

100000.0 

$GREATER THAN DURATIW BASE LAST 

T0000700000.0 

$GREATER_THAN_FLGAT_BASE LAST 

1.7E+308 

$GREATER THAN FLOAT SAFE LARGE 

5.7E307 


A-2 









MACRO PARAMETERS 


•'3REATER_THAN_SHORT_FLQAT SAFE_LARGE 

9.0E37 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/illegal/file_nzane/2) l%2102c.dat 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/illegal/f ile_naine/CE2102C*. dat 

$ INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

-1 


$ INCLUDE_PRAGMA1 
$INCLUDE_PRAGMA2 
$INTEGER_FIRST 
$INTEGER LAST 


PRAGMA INCLUDE 
PRAGMA INCLUDE 
-2147483648 
2147483647 


$INTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

$LESS_'IHAN_DURAT10N -100000.0 

$LESSjrHAN_DURATICW_BASE FIRST 

-ITJOOOOOOOOO.O 


("A28006D1.TST") 

("B28006D1.TST") 


$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 


$MACHINE_CODE_TYPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 


CODE_0'(OP -> NOP); 
CODEJ) 

63 

15 

9223372036854775807 

9223372036854775808 

-9223372036854775808 

TINY_1NTEGER 

A-3 








MACRO PARAMETERS 

$NAME_LIST 

$NAME_SPECIFICATIONl 

$NAME_SPECIFICATION2 

$NAME_SPECIF1CATION3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NBW_SYS_NAME 

$PAGE_TERMINATOR 

$RECORD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$T1CK 

$VARIABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VARZABLE_ADDRESS2 
$YOUR PRAGMA 


AXP_SELF 

/usr Ac/tst/acvcl. ll/c/e/X2120A 
/usr/vc/tst/acvcl. ll/c/e/X2120B 
/Aisr Ac/tst/acvcl. ll/c/e/X3119A 
16«FOOOOOOOOOOOOOOE« 

16777216 

8 

AXP_SELF 

ASCII.FF 

RECORD SUSP: OPERAND; END RECORD; 

CODE_0 

64 

1024 

0.01 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 




A-4 








APPENDIX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
A{^ndix, are provided by the custcxner. unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 





COMPIIATION SYSTEM OPTIONS 


ada Coonand Reference ada 

ada - invoke the Ada compiler 

Syntaoc 

ada [options] (source_fileJ... (object_file.oJ... 

Arguments 

object_£ile.o non-Ada object file names. These files will be passed 

on to the linker and will be linked with the specified 
Ada object files. 

options options to the compiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
conpiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "file_name.das’' 
s Disassemble the unit spec. ~ 

-a file name 

(arrive) Treat file name as an object archive file created 
by ar. Since scane arBiive files end with .a, -a is used to 
distinguish archive files frcan Ada source files. 

-Bstatic/dynamic (SPARCoa(>iler Ada only) 

(static) If static is indicated, the Ada program is compiled 
and linked statically. The default is dyrmanic. 

-c suppress the control messages generated when pragma PAGE 
and/or pragma LIST are encountered. « 

-D identifier type value 

(define) Define an identifier of a specified type and value. 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INTO directive [Default: -DAl.l] (HP PA-RISC only) 


-d (dependencies) Analyze for dependencies only. Do not do 







CQNPIIATIGN SYSTEM OPTIGNS 


semantic analysis or code generation. Update the library, 
marking any defined units as uncoopiled. The -d option is 
used by a.make to establish dependencies among new files. 
This option will attempt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as ir^t to a.error. Only 
one -e or -E option should be used. 

-e (error) Process compilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated ^ error file. Note that there is 
no space between the -Ef and error file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
direct^ to standard out vhile the raw errors are placed in 
source_file.err. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to stan^rd output. 
The raw errors are written to error_file. 

-ev (error vi(l)) Process syntax error messages usir^ a.error, 
embed them in the source file and call the environment editor 
ERROR EDITOR. If ERR0R_EDIT0R is defined, the environment 
variaEle ERROR_PATTERN should also Ise defined. ERROR_PATTERN 
is an editor search command that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERBORJEABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will Ise 

B-3 





CQHPIIATIGN SYSTEM OPTIGNS 


trinined so that all pointers to nodes that did not involve 
a sxibtree that define a synixsl table will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or coof)ilation information). Hie trimning 
generally removes initial values of variables and all 
statements. 

-G (GVAS) Display suggested values for the HIN_GVAS_AIX}R 
and MAX_GVAS_ADDR INTO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
by the conpiler front end. The IL file will be placed in 
the .objects directory with the file name Ada^source. 

-L library_name 

(library) Operate in VADS library library_naffle. 

[Default: current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) Ihis is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(No space between the -1 and the file abbreviation.) 

-M unit name 

(maTn) Produce an executable program 1:^ linking the named 
unit as the main program, unit^name must alrea^ be 
compiled. It must be either a ^rameterless procedure or 
a pararoeterless function returning an integer. The 
executable program will be named a.out unless overridden 
with the -o option. 

-M source file 

(roainT Produce an executable program by compiling and 
linking source file. The main unit of the program is 
assumed to be the root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be nam^ a.out unless overridden 
with the -o option. 

-N (no code sharing) Compile all generic instantiations 
without sharing code for their bodies. This optibn 
overrides the SHARE_B(X3Y INFO directive and the SHARE_CODE 
or SHARE_B(X)Y pragmas. 

-NX (NX) Link with NX Startup code and with the NX archive libraries. 
This option is valid only if the -n option has also been invoked. 

(Sun SPARC -> Paragon only) 


-0(0-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 


B-4 






COKPIIATION SYSTEM OPTIONS 


-0 fiill optimization 
-00 no optimization 

-01 copy propagation, constant folding, removing 
dead variables, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global common subexpressicxi elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 add unrolling of innermost loops 
-07 add one more pass of induction expression reduction 
-08 add one more pass of inducticm expression reduction 
-09 add one more pass of induction expression 

reduction and add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be siippressed. 

Note that using the -OO option can alleviate some problems when 
debugging. For example, using a higher level of optimization, 
you may receive a message that a variable is no longer active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) This option is to be used in conjxjnction with 
the -M option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R YADS_library 

(recompile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in yAiitAi the 
recompilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working direbtory. 

-r (recreate) Recreate the library's GVASJIABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GVAS exhausted" without recompiling all the files in the library. 

-S (sufpress) Apply pragma SUPPRESS to the entire compilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

B-5 





COMPILATION SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-trc 

(trace calls) Ge..^rate code to trace calls and returns (for use 
with a.trace only) 

-V (verbose) Print coofiiler version number, date and time of 
c(»apilation, name of file compiled, cconand input line, 
total compilation time and error summary line. Storage usage 
information about the object file is provided. 

-v (warnings) Suppress warning diagnostics. 

-xlicinfo 

(license) Indicates if FLEXlm is running and its status if it is 
operational. If it is not operational, a message indicating this 
is displayed. 

source_file name of the source file to be compiled. 

Description 

The ada command executes the Ada compiler and compiles the named Ada 
source file. The file must resi:ie in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

By default, ada produces only object and net files. If the -M option 
is used, the ccxnpiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the conpiler generates object files compatible with 
the host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS conpilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin on a system 
will execute the correct compiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the ccmiponents actually executed. 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 






COMPILATION SYSTEM OPTIONS 


NOTE: If tvro files of the same name frcsn different directories are 
conpiled in the same ada library using the -L option (even if the 
contents acni unit names are different), the second compilation will 
overwrite the first. For example, the compilation of 
/usr/directory2/foo.a ~L /\isrAads/test will overwrite the 
conpilation of Aisr/directory 1/foo.a -L /\isrAads/test in the 
VADS library /bsrAads/test. 

NOTE: It is possible to specify the directory for temporary files by 
setting the environment variable IMPDIR to the desired path. If TEMPDIR 
is not set, /tmp is used. If the path specified by IMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VM>S compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTICNS 

Ihe linker options of this Ada implementation, as described in this /Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 




B-7 












COMPILATIW SYSTEM OPTIONS 


a.Id Comrozmd Reference a.Id 

a.Id - build an executable program from previously compiled units 
Syntax 

a.Id [optionsj unit_name [linker_optionsl 
Arguments 

linJcer_options 

All arguments after unit_name are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id consnand. These are: 


-DAl.O 

-DAl.l 

-DA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive [Default; -DAI.!] (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the lirUcer in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the elaboration dependencies used each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases \dier4 linking 
a large nxjmber of units causes the error message "local 
symbol overflow" to occur). 

-E \init_name 

(elaborate) Elaborate imit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the terroorary file containing the list of 
object files to link. This file is only present when many object 









CQKPILATION SYSTEM OPTIONS 


files are being linked. 

-L library_naiDe 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executSdle in the 
current directory. 

-NX (NX) Link with NX startup copde and with the NX archive libraries. 
(Sun SPARC ••> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

* -U (units) Print a list of dependent units in order aixi 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

-w (warnings) Suppress warning messages. 
unit_naffle 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit_name a diain 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada conqpiler to check dependency information, af.ld produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception ted}les. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WITHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any nundoer of WITHn 

B-9 







CXIMPIIATION SYSTEM OPTIONS 


directives nay be placed into a library but they must be 
numbered contiguously beginning at WITHI. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHI; LINK: object_file: 

W1TH2: LINK: ar chive_f i le: 

wiTHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WiTHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Computer Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of \inits, theTr types, seals and dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The >sh option prints the name of the actxial executable file. 

NOTE: It is possible to specify the directory for tenporary files by 
setting the environment variable TMPDIR to the desired path. If TMPDIR 
is not set, /tap is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are prodixced by the Id linker. 


B-10 










APPEICIX C 


APPENDIX F OF THE Ada STANDARD 


Hie only allowed infilenentation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this A^ implementation, as described in this ^^jpendix, 
are provided by the customer. unless specifically noted otherwise, 
references in this J4)pendix are to ccmpiler documentation and not to this 
report. inplementation-specific portions of the package STANDARD, vdiich are 
not a part of appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINy_INTEGER is range -128 .. 127; 
type SHORT INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -9223372036854775808 .. 9223372036854775807; 

type FLOAT is digits 15 range -1.79769313486232E-f308 .. 1.79769313486232E+308; 
type SHORT_FLQAT is digits 6 range -3.40282E<»>38 .. 3.40282E4'38; 

type DURATION is delta 1.OOOOOOOOOOOOOOE-009 

range -9.22337203685478E+009 .. 9.22337203685478E+009; ‘ 


end STANDARD; 


C-1 











APPEM>IX F OF THE Ada STANDARD 


APPENDIX F. Inplementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INLINEJQNLY Pragma 

The INLINEJQNLY pragma, when used in the same way as pragma 

INLINE, indicates to the compiler that the subprogram must 

always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 

space. If a user erroneously makes an INLINE ONLY subpro¬ 
gram recursive a warning message will be emitted and an 

PROGRAH_ERROR will be raised at njn time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 

argument. This pragma is only allowed within a library- 

level package spec or bo^. It specifies that all objects 
in the package be initialized as requested by the pragma 

(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 

within procedures are always (by definition) dynamic. If 

pragma INITIALIZE(STATIC) is used, and an object cannot be 

initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefine? Ada packages, but provides no user access. It is 

used only to implement code bodies for which no ' actxial Ada 

body can be provided, for exanqple the MACHINEjCODE package. 

1.4. SHARE C(X)E Pragma 

~ 4 

The SHARE_CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 

identifiers TRUE or FALSE as the second argument. This 

pragma is only allowed immediately at the place of a 

declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 

any subsequent compilation unit. 

When the first argument is a generic \jnit the pragma applies 

to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 


C-2 









APPENDIX F OF TOE Ada STANDARD 


applies only to the specified instantiation, or overloaded 

instantiations. 

If the second argument is TRUE the conpiler will try to 

share code generated for a generic instantiation with code 
generated for other instantiations of the same generic, 

v^n the second argument is FALSE each instantiation will 
get a \jnique copy of the generated code. The extent to 

vdiich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BCX)y is also recognized by the imple¬ 
mentation and has the same effect as SHARE_CODE. it is 

inclxxied for coopatability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 

inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 

type vhose image array has been suppressed will result in a 

conpilation warning aixi PROGRAM_ERROR raised at run time. 

1.6. EXTERNALJOAME Pragma 

The EXTERNALJNAME pragma takes the name of a subprogram or 

variable defin^ in Ada and allows the user to specify a 

different external name that may be used to reference the 

entity from other languages. The pragma is allowed at the 

place of a declarative item in a package specification and 

must a^ly to an object declared earlier in the same package 

specification. 

1.7. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a aivariable or 

subprogram defined in another language and allows it to 

referenced directly in Ada. The pragma will replace all 

occurrences of the variable or subprogram name with an 

external reference to the second, link_argiat)ent. The pragma . 

is allowed at the place of a declarative item in a package 
specification and must apply to an object or sulprogram 

declared earlier in the same package specification. The 

object must be declared as a scalar or an access type. The 

object cannot be any of the following: 

a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 








APPENDIX F OF THE Ada STANDARD 


1.8. IMPLICIT_CC»E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 

procedure. It specifies that implicit code generated by the 

compiler be allowed or disallowed. A warning is issued if 

OFF is used and any isplicit code needs to be generated. 

The default is CM. 

1.9. OPnMIZE_CXX)E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 

procedure. It specifies whether the code should be optim¬ 
ized by the compiler. The default is ON. When OFF is 

specified, the compiler will generate the code as specified. 

1.10. NC]N_REEJJTRANT 

This pragma takes one argument vdiich can be the name of 

either a library subprogram or a subprogram declared immedi¬ 

ately within a library package spec or body. It indicates 
to the conpiler that the subprogram will not be called 

recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 

set of overloaded subprograsm within a package spec or pack¬ 
age body. 

1.11. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 

tion. It indicates tiiat the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 

other than Ada. The presence of this pragma Expresses the 

generation of elaboration code euid issues warnings if ela¬ 
boration code is required. 

I 

1.12. BIT_PACK pragma 

Indicates to the conpiler that packing down to the bit level 

is desired. pragma BIT_FACK can be used interchangeadsly 

with pragma PACK and pragma BYTE_PACK 

1.13. BYTE_PACK pragma 

Indicates to the conpiler that packing down to the byte 

level is desired. Components at least as large as, or 

larger than, a byte, are packed at byte boundaries. pragma 

ByrE_PACK can be used interchangeably with pragma PACK and 

pragma BIT_PACK. 

1.14. LINKJWITH pragma 


C-4 







APPENDIX F OF THE Ada STANDARD 


Can be used to pass arguments to the target linker, it nay 

appear in any declarative part and accepts one argument, a 

constant string expression. This argument is passed to the 

target linker vAienever the unit ccxitaining the pragma is 

included in a link. Note that the linker uses selective 

linking; it will include only those objects required to com¬ 

plete the link. 

For UNIX systems, if the ccxistant string expression begins 

with the string is left untouched. However, if the 

string begins with neither nor "/"/ then the string is 

prefixed with "./". 

1.15. PASSIVE Pragma 

This pragma has five forms: 

pragma PASSIVE 

pragma PASSIVE(ABORT_UNSAFE); 
pragma PASSIVE(ABORT_SAFE); 

pragma PASSIVE(AB(XnM]NSAFE, mutex_attr' address); 
pragma PASSIVE(ABOE^_SAFE, mutex_attr'address); 


This pragma can be applied to a task or task type declared 
immediately within a library package specification or body. 

It directs the con^iler to optimize certain tasking opera¬ 
tions. It is possible that the statements in the task body 
will prevent the intended optimization, in these cases a 

warning will be generated at compile time and will raise 

TASKING_ERRQR at run time. 

1.16. RTS_INTERFACE pragma 

Take the name of an RTS routine and the name of a user- 

defined routine. Allows for the replacement of the default 

calls made implicitly at run-time to the underlying RTS rou¬ 

tines. You can cause the conpiler to generate calls to any 
routine of your choosing as long as it's parameters and 

RETURN value match the original. Use this pragma with cau¬ 
tion. ' 

1.17. TASK_ATTRIBUTES Pragma 

This pragma has two forms: 

pragma TASK_ATniIBUTES (taskjatttr' address); 

pragma TASK_ATTRIBUTES (taskjobject, task_atttr' address) ; 


The first form of this pragma is only allowed with the 

specification of a task unit. It specifies the task attri- 


C-5 




APPENDIX F OF THE Ada STANDARD 


butes of the task or tasks of the task type. The second 

form is applicable to any task object. It takes precedence 

over the task attributes specified for the task's type. 

The address of an ADA_KRNJDEFS.TASK_ATTH__T record is the 

argument of the pragma and is 'passed to the underlying 

microkernel at task creation. 

The task attributes are microkernel dependent. See 

ada_km_defs.a in standard for the type definition of 

TASK ATTRJT and the different options supported. When there 

isn'Y a TASK_AT1HIBUTES pragma for a task, the 
DEFAULT TASR_ATTHIBUTES found in v_usr_conf_f.a's configura¬ 

tion taEle are used. 

All variations of the TASK_ATTRjr record contain at least 

the prio field. prio specifies the priority of the task. 

If the task also has a pragma PRIQRITY(PRIO), the prio 

specified in the TASK_ATTR_T record takes precedence. 

The optional first argument is the name of a task object. 

This allows task objects of the same task type to have dif¬ 

ferent task attributes (including different task priori¬ 
ties). ada_krn_defs.a has overloaded versions of the fol¬ 
lowing subprogram for initializing the task attributes: 

function task_jattr__init( 
prio priority; 

OS dependent fields 

) return address; 


1.18. VOLATILE pragma 

Takes one arguement which identifies an object. Guarantees 

that loads and stores to the named object will be performed 
as expected after optimization. The object declaration and 

the pragma must both occur (in this order) immediately 

within the same declarative part or package specification. 

i, 

1.19. WARNINGS pragma Takes one of the identifiers GN or 

OFF as the single argument, selectively suppress warnings 

on a single statement or a group of statements. 

pragma warnings (off); 

statement(s) that generate warnings; 
pragma warnings (on); 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 


C-6 







APPENDIX F OF THE Ada STANDARD 


This pragma is recognized by the inplementation but has no 

effect. 

2.2. ELABORATE 

This pragma is inplemented as described in Appendix B of the 

Ada RM. 

2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 

Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' aixl FCXniRAN functicns. The 

Ada subprograms can be either functions or procedures. The 

types of parameters and the result type for functions must 

be scalar, access or the predefined type AIXXRESS in SYSTEM. 

All parameters must have mode IN. Record and array objects 

can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 

Ada RM. 

2.6. MEMORY^SIZE 

This pragma is recognized by the isplementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled. 

2.7. OPTIMIZE 

This pragma is recognized by the in^lementation but has no 

effect. • 

2.8. PACK 

This pragma will cause the c(»f>iler to choose a non-aligned , 

representation for composite types. It will not causes 

objects to be packed at the bit level. 

2.9. PAC^ 

This pragma is implemented as described in Appendix B of the 

Ada RM. 

2.10. FBJORlTi 

This pragma is inplemented as described in J^jpendix B of the 


C-7 






APPENDIX F OF THE Ada STANDARD 


Ada RN. 


2.11. SHARED 

This pragma is recognized by the implementation but has no 

effect. 

2.12. STORAGE_UNIT 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled. 

2.13. SUPPRESS 

This pragma is inplemented as described, except that 

DIVISION CHECK and in sane cases OVERFI/^WjCHECK cannot be 

supressed. 

2.14. SYSTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled. 

3. liq}lementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 

machine code associated with the corresponding body or 

statement. For an entry for which an address clause has 

been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defin^ In the 

package MACHINEjCODE. The attribute is only allowed within 

a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 

not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 

task id associated with a task. The value of this attribute 

is of the type ADDRESS in the package SYSTEM. 


C-8 





APPENDIX F OF THE Ada STANDARD 


4. Specification Of Package SYSTEM 


with UNSIGNED_TYPES; 
package SYSTEM is 


pragma svqppress(ALLjCHECKS); 
pragma suppress(EXCEPTIONJIABLES); 
pragma not_elaborated; 


type NAME is ( axp_self ); 


SYSTEM NAME 


: constant NAME axp_self; 


STORAGE_UNIT 
MEMORY SIZE 


constant 8; 

: constant 16 777 216; 


— System-Dependent Named Numbers 

MIN_INT : constant 

MAX_INT : constant 

MAX_DIGITS : constant 

MAXJIANTISSA : constant 63; 
FINE__DELTA : constant 

TICK : constant 


-9 223 372 036 854 775 808; 
9 723 I72 736 l54 775 707; 
l7; 

2.0**(-63); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE ; integer ;• 64*1024; 
type AIX)RESS is private; 


function (A: ADDRESS 
function "<” (A: ADDRESS 
function ">-"(A; AIX}RESS 
function "<-"(A; AIX>RESS 
function (A: AEX7RESS 
function (A: ADDRESS 
function (A; ADDRESS 


B: MX3BESS) 
B: ADDRESS) 
B: ADDRESS) 
B: ADDRESS) 
B: AIX)RESS) 
I: INTEGER) 
I: INTEGER) 


return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return INTEGER; 
retusn ADDRESS; 
return AEORESS; 


function (I: UNSIGNED TYPES.UNSIGNED LONG INTEGER) return ADDRESS; 


function MEHORY_ADDRESS 

(I: UNSIGNED TYPES.UNSIGNED LONG INTEGER) return ADDRESS renames 


NO_AI»)R : constant AIX>RESS; 

type TASK_ID is private; 

MO TASK ID : constant TASK ID; 


C-9 







APPDIDIX F OF THE Ada STANDARD 


type PASSIVE_TASK_1D is private; 

NO_PASSIVE_TASK_ID ; constant EASSIVE_TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATUS_SIZE; constant 4; 

type PROGRAM_ID is private; 

N0_PR0GRAM_1D ; constant PROGRAM_ID; 

type BYTE_ORDER_T is ( 

LITTLE_ENDIAN, 

BIG_END1AN 

); 

ByTE_ORDER; constant BYrEjORDER_T L1TTLE_END1AN; 
type TjCXIG_AOORESS is private; 

NO_LQNG_ADDR : constant LQNG_ADDRESS; 

fxinctlon ”+" (A: LONG_AM)RESS; 1: IMUXaSl) return LQNG_ADDRESS; 
function (A: LQNG_AI»RESS; 1: INTEGER) return LONG_ADDRESS; 

function MAKE_LONG_AIX)RESS (A: ADDRESS) return LONG_ADDRESS; 

function LOCALI2E(A: LONG_AI»RESS ; ByTE__SIZE : INTEGER) return ADDRESS 

function STATION_OF(A: LONG_AI»RESS) return INTBC231; 

— Internal RTS representation for day. If the calendar package is used, 

— then, this is the julian day. 
subtype DAY_T is INTEGER; 

— Constants describing the configuration of the CIPO add-on product. 
SUPPORTS_INVOCATION_BY_ADDRESS ; constant BOOLEAN TRUE; 
SUPPORTS_PREELABORATION : constant BOOLEAN TRUE; 

MAKE_ACCESS_SUPPORTED : constant BOOLEAN .— TRUE; 

— Arguments to the CIPO pragma INTERRUPTJEASK. ‘ 
type INTERRUFT_TASK_KIND is ( SIMPLE, SIGNALLING ); 

function RETURN_AK>RL5S return AIX3RESS; ( 

private 

type AIX5RESS is new UNSI(3«ED_TYPES.UNSIGNED_L0NG_INTEGER; 

NO_AEE)R : constant AmRESS 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT_IN(">-"); 
pragma BUILT_IN("<-"); 


C-10 





APPENDIX F OF THE Ada STANDARD 


pragma BUILT_IN(; 
pragma BUILT_IN(); 

type TASK_ID is new l)NSIGNED_TYPES.UNSIGNED_LQNG_INTEGER; 
NO_TASK_ID ; constant TASK_ID 0; 

type PASSIVE_TASK_ID is new UNSIGNEDJIWES.UNSIGNED_LCWG_INTEGER; 
NO_PASSIVE_TASK_ID : constant PASSIVE_TASK_ID 0; 

type PROGRAM_ID is new UNSIGNED_TyPES.UNSIGNED_I<ONG_INTEGER; 
NO_PROGRAM_ID ; constant PROGRAM_ID 0; 

type LONG_ADDRESS is 
RECORD 

Station : lJNSIGNED_TyPES.UNSIGNED_IC)NG_INTEGER; 
addr : ADDRESS; 

END RECORD; 

NO_LONG_ADDR : constant LONG_ADDRESS (0, 0); 

pragma BUILT_IN(MAKE_L««3_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

pragma auiLT_IN( RETORN_ADDRESS); 

end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 

so as to provide for efficient access by the target 

hardware, pragma PACK applied to a record eliminate the pad¬ 
ding >^ere possible. Pragma PACK has no other effect on the 

storage allocated for record ccmponents a record ' representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 

number of bits required to represent the range of the sub- 

type. A size clause applied to a record type will not cause 

packing of components; an explicit record representation 

clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 

packing of components only \dien the ccmponent type is a 

discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 

for task, access, or floating point types. 


C-11 









APPENDIX P OF THE Ada STANDARD 


5.3. Address Clauses 

Address clauses are only suf^rted for variables. Since 

default initialization of a variable requires evaluation of 

the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 

clauses. The specified address indicates the physical 

address associated with the variable. 

5.4. Interrupts 

Interrupt entries are supported with the following interpre¬ 

tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 

must always be trying to accept each interrupt entry, unless 

it is handd.ing the interrupt. The task must be executing 

either an accept for the entry (if there is only one) or a 

select statement vdiere the interruqpt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 

restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RM 

13.5.1(2) and 13.5.1(6)). 

No additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative aix3 an accept 

alternative for an interrupt entry (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 

allowed and are treated as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It siii|>ly specifies the 

interrupt vector number. For passive ISRs, the nnn of the 

passive(interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. ' 

5.5. Representation Attributes 

The AIX>RESS attribute is not siq^rted for the following 

entities: 

Packages 

Tasks 

Labels 

Entries 


C-12 







APPENDIX F OP THE Ada SXANDABD 


5.6. Machine Ccxle Insertions 
Machine code insertions are su|^rted. 

The general definition of the package MACHINEjCODE provides 
an assembly language Interface for the target machine, it 

provides the necessary record type(s) needed in the code 

statement, an enumeration type of all the opcode mneuinonics, 

a set of register definitions, and a set of addressing mode 

functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


CCX>E_n'( opcode, operand (, operand) ); 

where n indicates the number of operands in the aggregate. 

A special case arises for a variable nuinber of operands. 

The operands are listed within a subaggregate. The format 

is as follows: 

OODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. PM 4.3(4)). 

CODE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in HACHINE_CODE or 

the 'REF attribute. 

The arguments to any of the functions defined in 

MACHINE_CXX)E must be static expressions, string .'literals, or 

the functions defined in MACHINE_CODE. The 'REF attribute 

may not be used as an argument in ai^ of these functions. 

Inline expansion of machine code procedures'^ is supported. 


6. Conventions for Inplementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clatrses 

Address expressions in an address clause are interpreted as 

physical addresses. 


C-13 








APPENDIX F OF THE Ada STANDARD 


8. Restrictions on Unchecked Conversions 

None. 

9. Restrictions on Unchecked Deallocations 

None. 

10. IiBplementation Characteristics of I/O Packages 

Instantiations of DIRECT_lO use the value MAX REC_SIZE as 

the record size (expressed in STORAGEJUNITS) ^en the size 
of ELEMENTJTYPE exceeds that value. For exasftle for uncon¬ 
strained arrays such as string v^ere ELEMDnjTYPE'SIZE is 

very large, MAX_REC_SIZE is used instead. MAX_RECORD_SlZE 

is defined in SYSTEM and can be cheuiged by a progreun before 

instantiating DIRECT_IO to provide an upper limit on the 

record size, in any case the maximum size supported is 1024 

X 1024 X STORAGEJUNIT bits. DIRECT^IO will raise USE_ERROR 

if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SBQUENnAL_lO use the value MAX_REC_SIZE 

as the record size (expressed in STORAGEJUNITS) v^en the 

size of ELEMENTJTYPE exceeds that value. For exanple for 

unconstrained arrays such as string where ELENENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 

MAX_RECORD SIZE is defineH in SYSTEM and can be changed by a 

program belbre instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO inposes no limit on 

MAX REC SIZE. 


11. Implementation Limits 

The following limits are actually enforced the inplemen- 

tation. It is not intended to inply that resources up to or 

even near these limits are available to every program.. 

11.1. Line Length 

The implementation supports a maximum line leng^ of 500 

characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 

32,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 32,000,000 x STORACS UNITS. A record 
type or array type declaration that exceeds these limits 

will generate a warning message. 

11.3. Default Stack Size for Tasks 


C-14 









APPEMDIX F OF 'IHE Ada STANQARD 


In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STQRAGEJUNITS. This is the value 

returned by T'STQRAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STQRAGE_S1ZE length attribute 
the default collection size for an access type is 100 times 

the size of the designated type. This is the value returned 

by T'STOBAGE_SIZE for an access type T. 

11.5. Limit on Declared CX>jects 

There is an absolute limit of 6,000,000 x STOEAGEJUNITS for 

objects declared statically within a conpilation unit. If 

this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-15 








