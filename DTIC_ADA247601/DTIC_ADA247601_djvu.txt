AD-A247 601 

" _..... anil nil ill! 


FATION PAGE 


Form Approved 
OPM No. 0704-0188 


r p*r rMponu, Inckjdins tin* lor r »y..»lng ln«lruciion», twching »«Mng dm «ouro«« g«lh«rtng «nd m«in.«if«ng 
jfdan wtImaM or any Mhor Mood ol ttik coloction ol Hormatkxx includng auggMbrs for roducing thio burdon. to Waafwtgkxi 
iiBon Dtvii HlghiMy. Sulo 1204. Aringlan. VA 22202-4302. and to ttto Offica of Iniomution and Ragulalory Atfaira. Offica of 


1. AC__ WI 1 UI (Lddye mariK) 


4. TITLE AND SUBTITLE 


2. REPORT DATE 


3 REPORT TYPE AND DATES CXJVERED 

Final: 20 Sept 1991 to 01 Jun 1993 


Validation Summary Report: Verdix Corporation, VADS IBM ROSC System/6000 
AIX=> 68020/30 ARTX, VAda-110-71120, Version 6.0. IBM RISC System/6000 
Model 530 (Host) to Motorola MVME147 (Target). 910920W1.11212 


6. AUTHOR(S) 

Wright-Patterson APB. Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS<ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-505.0292 


9. SPONSORINCi/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


10. SPONSORINGfMONITORING AGENCY 
REPORT NUMBER 



12a, DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 



12b. DISTRIBUTION CODE 


13. ABSTFiACT (Maximum 200 words) 

Verdix Corporation, VADS IBM ROSC System/6000 AIX=> 68020/30 ARTX, VAda-110-71120, Version 6.0, 
Wright-Patterson AFB, IBM RISC System/6000 McxJel 530 (Host) to Motorola MVME147 (Target), ACVC 1.11. 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report. Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CLASSIFICATION 
OF REPORT 
UNCLASSIFIED 


18. SECURITY CUSSIFICATION 


UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


15 NUMBER OF PAGES 


16. PRICE CODE 


20 LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Stafxlard Form 298. (Rev 2-89) 
Prescribed by ANSI Std 239-128 



















Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 20 September 1991. 

Coitpiler Name and Version: VADS IBM RISC SysteiVfiOOO AIX=>68020/30 ARTX, 

VAda-110-13120, Version 6.0 

Host Conputer System: IBM RISC Systein/6000 Model 530 (AIX 3.1) 

Target Computer System: Motorola MVME147 (68030 Bare Board) 

Customer Agreement Number: 91-07-16-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

910920W1.11212 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 


'Ma Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada VMidh^c^ Organization 

Director,^b3!<^ter and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


'Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington EXT 20301 


92-06990 






AVF Control Number; AVF-VSR-505.0292 

18 February 1992 
91-07-16-VRX 


Ada COMPILER 
VALinATI(»J SUMMARY REPORT: 

Certificate Number: 910920W1.11212 
VERDIX Corporation 

VADS IBM RISC System/6000 AIX->68020/30 ARTX, VAda-110-71120, Version 6.0 
IBM RISC Systenv/6000 Model 530 => Motorola MVME147 


Prepared By: 

Ada_Va1idation_Faci1ity 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


AcCw^!0:^ r 

NTi.A 

DTiC T/v-: 


By 












Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was completed on 20 September 1991. 

Conpiler Name and Version: VADS IBM RISC Systenv'SOOO AIX=>68020/30 ARTX, 

VAda-110-13120, Version 6.0 

Host Conputer System: IBM RISC System/6000 Model 530 (AIX 3.1) 

Target Computer System: Motorola MVME147 (68030 Bare Board) 

Customer Agreement Number: 91-07-16-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 

910920W1.11212 is awarded to VERDIX Corporation. This certificate expires 

on 1 June 1993. 


This report has been reviewed and is approved. 


^a Validation Facility 
Steven P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 



Ada Vatfld^r^ Org^ization 
Dire^or K^mputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington EXT 20301 



DECLARATION OF CONFORMANCE 


Customer: Verdix Corporation 

Ada Validation Facility: ASD/SCEL, WPAFB OH 45433-6503 

ACVC Version: 1.11 

Ada Implementation: 

Ada Compiler Name and Version: VADS IBM RISC System/6000 AIX=->68020/30 ARTX, 

VAda-110-71120, Version 6.0 

Host Computer System: IBM RS/6000 Model 530 (AIX 3.1) 

Target Computer System: Motorola MVME147 

(Motorola 68030 bare board) 


Declaration: 

[I/we], the undersigned, declare that [I/we] have no 
)cnowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 






TABLE OF CCXCTENTS 


CHAPTER 1 INTRODUCTIC»J 

1.1 USE OF THIS VALIDATIC»J SUMMARY REPORT. 1-1 

1.2 REFERENCES. 1-2 

1.3 ACVC TEST CLASSES. 1-2 

1.4 DEFINITIC»I OF TERMS. 1-3 

CHAPTER 2 IMPLEMENTATICa^ DEPENDENCIES 

2.1 WITHDRAWN TESTS. 2-1 

2.2 INAPPLICABLE TESTS. 2-1 

2.3 TEST MODIFICATIONS. 2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTICaN. 3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTKOJS 

APPENDIX C APPENDIX F OF THE Ada STAND/iRD 
















CHAPTER 1 


INTRODUCTION 


The Ada inplementation described eibove was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Siatiroary 
Report (VSR) gives an accoxjnt of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate euid coit^lete, or that the subject inplementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

CJuestions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 





INTRODUCTION 


1.2 REFERENCES 

(Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-1815A, February 1983 and ISO 6652-l$87. 

[Pro90] Ada Conpiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

(UG89] Ada Conpiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at compile time eund link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
zind the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some conpiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a coiipiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Steuidard are detected. Some of the class B tests contain legal Ada 
code v^ich must not be flagged illegal by the conpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 




INTRODUCTIC»J 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravnn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass cui ACVC an Ada in^lementation must process each test of 
the customized test suite according to the Ada Standard. 


1,4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host cind target conputer system to allow 
treinsformation of Ada programs into executable form and 
execution thereof. 

Ada Conpiler The means for testing coitpliance of Ada inplementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and its 

Implementation target computer system. 

Ada Joint The part of the certification body vdiich provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body v^ich carries out the 

Validation procedures required to establish the coitpliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a progreim and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTIC»J 


Conformity 


Customer 


Declaration of 
Conformance 


Host Confuter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 
Confuter 
System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms and 
conditions for AVF services (of ainy kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attaineible on the Ada inplementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executcible form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Mcinual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, eind data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system \diere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of ein Ada compiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 




CHAPTE3^ 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C8304IA 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may 
be supported by document^ issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits them SYSTEM.MAX_DIGITS: 


C24113L..y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests check for the predefined type LONG_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, euid C86006G check for the predefined type 

LWG_FLOAT; for this iitplementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LCNG_FLQAT, or SHORT_FLQAT; for this 
inplementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_OVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this inplementation, MACHINE_OVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATIW; for this implementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
ramge of type DURATION; for this implementation, the ranges are the 
same. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this inplementation does not support such 
sizes. 


2-2 





IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode cind access method; this implementation supports 
tl’ese operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this in^lementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Inappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vdien the value of the 
page number exceeds COUNT'LAST; for this Tnplementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 






IMPLEMENTATICN DEPENDENCIES 


2.3 TEST MODIFICATIC^IS 

Mcxiifications (see section 1.3) were required for 21 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H B91001H BC1303F BC3005B BD2B03A 

BD2D03A BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 


CD1009A, CD1009I, CD2A24A, CD2A31A. .C (3 tests) were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, which uses 
Unchecked_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECK OJ REPRESENTATION FOR <TYPE ID> FAILED." 


2-4 








CHAPTE3^ 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRCOTENT 

The Ada irrplementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical information about this Ada implementation, contact: 

Sam Quiring/Kim Patterson 

Verdix Corporation 

1600 NW Conpton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 

For sales information cibout this Ada inplementation, contact: 

Stephen F. Zeigler 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada implementation was conducted at the customer's site lay 
a validation team from the AVF. 


3-1 




PROCESSING INFORMATICS 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordcince with the Ada Programming 
Language Standard, \4iether the test is applicable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the inplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


a) Total Number of Applicaible Tests 3806 

b) Total Number of Withdrawn Tests 95 

c) Processed Inapplicable Tests 68 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 269 


g) Total Number of Tests for ACVC 1.11 4170 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
talten on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a MicroVauc and copied over Ethernet to the 
host conputer. 


The tests were conpiled and linked on the host conputer system, as 
appropriate. The executable images were transferred to the target computer 
system by the communications link described above, and run. The results 
were captured on the host conputer system. 


Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 






PROCESSING INFORMATIW 


Option/Switch Effect 


-w 


suppress generation of warning messages 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning eund purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, v^ich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, \4iere "V" represents the meiximum input-line 
length. 

Macro Parameter Macro Value 


$MAX_IN_LEN 499 

$BIG_ID1 (1..V-1 => 'A', V => '1') 

$BIG_ID2 (1..V-1 => 'A', V => '2') 

$BIG_ID3 (1..V/2 => 'A') & '3' & 

(l.,V-l-V/2 'A') 

$BIG_ID4 (1..V/2 => 'A') & 'A' & 

(1..V-1-V/2 => 'A') 

$BIG_INT_LIT (1..V-3 -> 'OM & "298" 

$BIG_REAL_LIT (l..V-5=> '0') & "690.0" 

$BIG_STRING1 & (1..V/2 => 'A') & 

$BIG_STRING2 & (1..V-1-V/2 => 'A') & '1' & 

$BLANKS {1..V-20 => ' '} 

$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 *> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 => '0') & "F.E:" 


A-1 





MACRO PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALIGNMENT 

4 

$COUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_S12E 

16_777__216 

$DEFAULT_STORJJNIT 

8 

$DEFAULT_SYS NAME 

IBM_RS__6000_A1X_680X0 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM.(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM."+"(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM.'V’(16#100#) 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

f 9 

$FIXED_NAME 

N0_SUCH TYPE 

$FLOAT_NAME 

NO_SUCH TYPE 

$FORM_STRING 

ft ff 

$F0RM_STR1NG2 

"CANNOT_RESTRICT_FILE_CAPACITY" 

SGREATER THAN DURATION 


100_000.0 

$GREATER_THAN_DURATICW BASE LAST 

T0_00TJ_000 

$GREATER_THAN_FLQAT_aASE LAST 

1 .■ffE+308 

$GREATER_THAN_FLCIAT SAFE LARGE 

5.TyE+307 


A-2 




MACRO PARAMETERS 


$GREATER_THAN_SHORT_FLClAT SAFE_LARGE 

1.7^1415E+38 

$HIGH_PRIORITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

^/illegal/file_naine/2} l%2102c.dat" 

$ILLEGAL_EXTERNAL_FILE NAME2 

^/illegal/file_name/CE2102C*.dat" 

$inappropriate_line_length 

-1 

$ inappropriate_page_length 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.TST") 

$INCLUDE_PRAQ1A2 pragma include ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 
$INTERFACE_LANGUAGE C 
$LESS_THAN_DURATION -100_000.0 
$LESS_THAN_DURATI(XI_BASE FIRST 

-11J_000_000.0 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LCW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

CODE_0'(OP => NOP); 

$MACHINE_CODE_TyPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

SMAX_INT_PLUS_1 2_147_483_648 

$MIN INT -2 147 483 648 


$NAME 


TINY INTEGER 





MACRO PARAMETERS 


$NAME_LIST 
$NAME_SPECI FI CATICa^l 
$NAME_SPECIFICATION2 

$name_specific:ation3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SYS_NAME 

$PAGE_TEPMINATOR 

$REC0RD_DEFINITION 

$RECORD_NAME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VARIABLE_ADDRESS 
$VARLABLE_ADDRESS1 
$VARIABLE_ADDRESS2 
$YOUR PRAOIA 


IBM_RS_6 0 0 0_AIX_6 80X0 
/vc/acvcl.ll/c/e/X2120A 
/vc/acvcl. ll/c/e/X2120B 
/vc/acvcl.ll/c/e/X3119A 
16#F000000E# 

16_777_216 

8 

IBM_RS_6000_AIX_680X0 

ASCII.FF 

RECORD SUBP: OPERAND; END RECORD; 

CODE_0 

32 

1024 

O.Ol 

VAR_1'ADDRESS 
VAR_2'ADDRESS 
VAR_3'ADDRESS 
PRAGMA PASSIVE 



APPEM)IX B 


COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada inplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 


ada - invoke the Ada compiler 
SYNTAX 

ada [options] [source_file]... [object_file.o]... 

OPTIONS 

-# identifier type value (define) Define an identifier of a specified 

type and value. See VADS ADA PREPROCESSOR 
REFERENCE. 

-a file_name (archive) Treat file_name as an object archive file 
created by ar. Since some archive files end with .a, 

-a is used to distinguish archive files from Ada 
source files. 

-d (dependencies) Analyze for dependencies only. Do not do senantic 
analysis or code generation. Update the library, marking any 
defined units as uncoit^siled. The -d option is used by a.make to 
este±>lish dependencies among new files. 

-e (error) Process conpilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-E 

-E file 

-E directory (error output) Without a file or directory argument, 

ada processes error messages using a.error and directs 
a brief output to standard output; the raw error 
messages are left in ada_source.err. If a file pathname 


B-1 







COMPILATION SYSTEM OPTICWS 


is given, the raw error messages are placed in that 
file. If a directory argument is supplied, the raw 
error output is placed in dir/source.err. The file of 
raw error messages can be used as input to a.error. 

-el (error listing) Intersperse error messages eimong source lines and 
direct to standard output. 


-El 

-El file 

-El directory (error listing) Same as the -E option, except that 
source listing with errors is produced. 

-ev (error vi(l)) Process synteix error messages using a.error, embed 
them in the source file, and call the environment editor 
ERROR EDITOR. (If ERROR_EDITOR is defined, the environment 
variaBle ERROR_PATTERN should also be defined. ERROR_PATrERN is 
cin editor search command that locates the first occurrence of 
'###' in the error file.) If no editor is specified, vi(l) is 
invoked. 

-K (keep) Keep the intermediate language (IL) file produced by the 
compiler front end. The IL file will be placed in the .objects 
directory, with the file name Ada_source. 

-L library_name (library) Operate in VADS library library_name. 

[Default: current working directory] 

-lfile_abbreviation (library search) This is an option passed to the 

UNIX linker, ld(l) telling it to search the 
specified library file. (No space between the 
-1 eund the file abbreviation.) 

For a description of the file abbreviations, see 
also Operating System docrunentation, ld(l). 

-M unit_name (main) Produce an executable program by linking the 

named unit as the main program. unit_name must already 
be conpiled. It must be either a parameterless 
procedure or a parameterless function returning an 
integer. The executable program will be named a.out 
unless overridden with the -o option. 

-M source_file (main) Produce an executable progreim by compiling and 
linking source_file. The main unit of the program is 
assumed to be the root name of the .a file (for foo.a 
the unit is foo). Only one .a file may be preceded by 
-M. The executable program will be named a.out 
(self-hosted) or a.vox (cross-development) unless 
overridden with the -o option. 

-o executable_file (output) This option is to be used in conjunction 

with the -M option. executable_file is the name 
of the executable rather than the default a.out. 


B-2 







COMPILATION SYSTEM OPTIONS 


-O[0-9] (optimize) Invoke the code optimizer. An optional digit 

(there is no space before the digit) provides the level of 
optimization. The default is -04. 

-O full optimization 

-OO prevents optimization 

-01 no hoisting 

-02 no hoisting but more passes 

-03 no hoisting but even more passes 

-04 hoisting from loops 

-05 hoisting from loops but more passes (and instruction 
scheduling, if available) 

-06 hoisting from loops with maximum passes (and instruction 
scheduling, if available) 

-07 hoisting from loops and branches (and instruction) 
scheduling, if available) 

-08 hoisting from loops and branches, more passes (and 
instruction scheduling, if available) 

-09 hoisting from loops cind branches, mcixintum passes (eind 
instruction scheduling, if available) 

Hoisting from branches (emd cases alternatives) can be slow 
and does not always provide significant perfontance gains so 
it can be suppressed. 

For more information about optimization, see COMPILING ADA 
PROGRAMS, Conpiler Optimizations and pragma 
OPTIMIZE_CODE(OFF). 

-P Invoke the Ada Preprocessor. See VADS ADA PREPROCESSOR REFERENCE. 

-R VADS_library (recompile instantiation) Force analysis of all 

generic instantiations, causing reinsteintiation of 
euiy that are out of date. 

-S (suppress) ^ply pragma SUPPRESS to the entire coirpilation for 
all suppressible checks. (See also pragma SUPPRESS(ALL_CHECKS)). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

-V (verbose) Print conpiler version number, date and time of 

compilation, name of file compiled, command input line, total 
conpilation time and error summary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

DESCRIPTION 

The coranand ada executes the Ada compiler and compiles the named Ada 


B-3 











COMPILATION SYSTEM OPTIONS 


source file, ending with the .a suffix. The file must reside in a 
VADS library directory. The ada.lib file in this directory is 
modified after each Ada unit is conpiled. 

By default, ada produces only object and net files. If the -M option 
is used, the compiler automatically invokes a.Id and builds a 
complete progreim with the named library unit as the main program. 

Non-Ada object files (.o files produced by a conpiler for another 
language) may be given as arg\jments to ada. These files will be 
passed on to the linker euid will be linked with the specified Ada 
object files. 

Command line options may be specified in any order, but the order of 
conpilation and the order of the files to be passed to the linker 
can be significeint. 

Several VADS compilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin on a 
system will execute the correct compiler conponents based upon 
visible library directives, the option -sh is provided to print the 
name of the conponents actually executed. 

Program listings with a disassembly of machine code instructions are 
generated by a.db or a.das. 

DIACa^OSTICS 

The diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number eind optionally, a paragraph number enclosed in 
parentheses. 

RELATED TOPICS 

a.app, a.das, a.db, a.error, a.help, a.Id, a.make, a.map, a.pr 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation cind not 
to this report. 


a.Id - prelinker 
SYNTAX 

a.Id [options] unit_name [ld_options] 
OPTIONS 


B-4 








COMPILATION SYSTEM OPTICWS 


-DX (debug) Debug memory overflow (use in cases where linlting a 
large numi/er of units causes the error message "local symbol 
overflow" to occur). 

-E unit_name (elaborate) Elaborate unit name as early in the 
elaboration order as possiBle. 

-F (files) Print a list of dependent files in order eind suppress 
linking. 

-L library_name (library) Operate in VADS library library_name. 

[Default: current working directory] 

-o executable_file (output) Use the specified file name as the name 

of the output rather than the default (a.out 
(self-hosted) or a.vox (cross-development)). 

-sh (show) Display the name of the tool executcible but do not 
execute it. 

-U (units) Print a list of dependent units in order and suppress 
linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 
DESCRIPTION 

a.Id collects the object files needed to make unit__name a main 
program and calls the UNIX linker ld(l) to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self-hosted) or a.vox (cross- development). unit_name is the 
main program eind must name a non-generic siabprogram. If unit_name is 
a function, it must return a value of the type STANDARD.INTEGER. This 
integer result will be passed back to the UNIX shell as the status 
code of the execution. The utility uses the net files produced by 
the Ada compiler to check dependency information, a.Id produces an 
exception mapping tcible and a unit elaboration table eind passes this 
information to the linker. The elaboration list generated by a.Id 
does not include library level packages that do not need eleiboration. 
In addition, packages that contain no code that can raise an 
exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the coitpiler, these directives also include WITHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named in 
context clauses in the Ada source. Any number of WITHn directives may 
be placed into a library, but they must be numbered contiguously 
beginning at WITHl. The directives are recorded in the library's 


B-5 





COMPILATIC^I SYSTEM OPTIONS 


ada.lib file and have the following form. 

WITHl:LINK:object_file: 

WITH2:LINK:archive_file: 

WiTHn directives may be placed in the local Ada libraries or in any 
VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the library 
search list will hide the same numbered WiTHn directive in a library 
later in the library search list. 

Use the tool a.info to change or report library directives in the 
current library. 

All arguments after unit_name are passed on to the linker. These may 
be options for it, archive libraries, library cibbreviations, or 
object files. 

VADS_location/bin/a.ld is a wrapper program that executes the correct 
executable based upon directives visible in the ada.lib file. This 
permits multiple VADS compilers to exist on the same host. The -sh 
option prints the name of the actual executable file. 

FILES AND DIRECTORIES 

a.out/a.vox deiault output file 

.nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/st 'ndard/* startup and standard library routines 

DIAGNOSTICS 

Self-explanatory diagnostics are produced for missing files, etc. 
Additional messages are produced by the UNIX linker Id. 

RELATED TOPICS 

ada, a.make, a.info 


B-6 





APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
in^lementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada in^slementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, vdiich 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is -128 .. 127; 

type FLOAT is digits 15 reinge -1.79769313486232E+308 .. 

1.79769313486232E+308; 

type SHORT_FLClAT is digits 6 range -3.40282E+38 .. 

3.40282E+38; 

type DURATICtt^ is delta 0.001 range -2147483.648 .. 

2147433.647; 


end STANDARD; 


C-1 




APPENDIX F OF THE Ada STANDARD 


ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Iirplementation-Dependent Pragmas 

1.1. INLINE_C»ILY Pragma 

The INLINE_0NLY pragma, vdien used in the same way as pragma 
INLINE, indicates to the conpiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callc±)le version of the routine which saves code 
space. If a user erroneously makes an INLINE_ONLY subpro¬ 
gram recursive a warning message will be emitted euid cin 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 
used only to iitplement code bodies for which no actual Ada 
body can be provided, for exaitple the MACHINE_C0DE package. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instemtia- 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
emy subsequent conpilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the same generic. 


C-2 






APPENDIX F OF THE Ada STANDARD 


When the second argvunent is FALSE each instantiation will 
get a linique copy of the generated code. The extent to 
v^ich code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_BODY is also recognized by the imple¬ 
mentation cind has the seime effect as SHARE_CODE. It is 
included for conpatability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type whose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification euid 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the name of a a variable or 
subprogrcim defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variedDle or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop varieible, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers CX4 or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
conpiler be allowed or disallowed. A warning is issued if 


C-3 




APPENDIX F OF THE Ada STANDARD 


OFF is used cind any inplicit code needs to be generated. 
The default is 


1.8. OPTIMIZE_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies whether the code should be optim¬ 
ized by the conpiler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CWTROLLED 

This pragma is recognized by the implementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All pareimeters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The inple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconpiled. 

2.7. NON_REENTRANT 

This pragma takes one argument vhich can be the name of 
either a library subprogram or a subprogram declared immedi- 


C-4 






APPENDIX F OF THE Ada STANDARD 


ately within a library package spec or body. It indicates 
to the conpiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograms within a package spec or pack¬ 
age body. 

2.8. NOT_ELABORATED 

This pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or cin Ada package that is referenced from a leinguage 
other than Ada. The presence of this pragma suppresses the 
generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the implementation but has no 
effect. 

2.10. PACK 

This pragma will cause the coitpiler to choose a non-aligned 
representation for composite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is in^lemented as described in /^pendix B of the 
Ada RM. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHORE); 

PRAC31A PASSIVE(INTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
body. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at conpile time and will 
raise TASKING_ERROR at runtime. 

2.13. PRIORITY 

This pragma is implemented as described in Appendix B of the 


C-5 




APPE3®IX F OF THE Ada STANDARD 


Ada RM. 

2.14. SHARED 

This pragma is recognized by the implementation but has no 
effect. 


2.15. STORAGE_UNIT 

This pragma is recognized by the implementation. The inple- 
mentation does not allow SYSTEM to be modified by meeins of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISI(»I_CHECK and in some cases OVERFIjCW_CHECK cannot be 
suppressed. 

2.17. SYSTEM_NAME 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or cin entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which am address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 


C-6 




APPENDIX F OF THE Ada STANDARD 


is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 


with UNSIGNED_TYPES; 
package SYSTEM is 

pragma suppress(ALL_CHECKS); 
pragma suppress(EXCEPTION_TABLES); 
pragma not_elaborated; 

type NAME is ( IBM_RS_6000_AIX_680X0 ); 

SYSTEM_NAME : constant NAME := IBM_RS_6000_AIX_680XO; 

STORAGE_LJNIT : constant := 8; 

MEMORY_SIZE : constant := 16_777_216; 

— System-Dependent Named Numbers 

MIN_INT : constant := -2 147 483 648; 

MAX~INT ; constant ;= 2 T47_?83_^47; 

MAX_DIGITS : constant := I"?; 

MAX_MANTISSA : constant ;= 31; 

FINE_DELTA : constant := 2.0**(-31); 

TICK ; constant := 0.01; 

— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE : integer 1024; 

type ADDRESS is private; 


function 

II y II 

(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN; 

f\inction 

II ^ II 

(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN; 

function 


(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

BOOLEAN; 

function 

II ^ — 

(A; 

ADDRESS; 

B; 

ADDRESS) 

return 

BOOLEAN; 

function 

ll___ll 

(A: 

ADDRESS; 

B: 

ADDRESS) 

return 

INTEGER; 

function 

II ^fl 

(A: 

ADDRESS; 

I: 

INTEGER) 

return 

ADDRESS; 

function 

ll^ll 

(A: 

ADDRESS; 

I: 

INTEGER) 

return 

ADDRESS; 

function 

ll_^ II 

(I: 

UNSIGNED_ 

TYPES.UNSIGI'IED_INTEGER) return ADDRESS; 


function MEMORY_ADDRESS 

(I: UNSI04ED_TyPES.UNSIGNED_INTEGER) return ADDRESS renames 
NOADDR : constant ADDRESS; 
type TASK_ID is private; 


C-7 






APPENDIX F OF THE Ada STANDARD 


NO_TASK_ID : constant TASK_ID; 

type PR0GRAM_1D is private; 

NO_PROGRAM_ID : constant PROGRAK_ID; 

private 

type ADDRESS is new UNSI<3JED_TyPES.UNSIC2^_INTEGER; 

NO_ADDR : constant ADDRESS := 0; 

pragma BUILT_IN(; 
pragma BUILT_IN(; 
pragma BUILT_IN(">="); 
pragma BUILT_IN(); 
pragma BUILT_IN(; 
pragma BUILT_IN(; 

type TASK_ID is new UNSIGNED_TYPES.UNSIGNED_INTEGER; 
NO_TASK_ID : constant TASK_ID := 0; 

type PROGRAM_ID is new UNSIC2^ED_TYPES.UNSIGNED_INTEGER; 
NO_PROGRAM_ID : constant PROGRAM_ID := 0; 

end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminates the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 
clause must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of components only vrtien the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


C-8 







APPEM)IX F OF THE Ada STANDARD 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the varicible address elaboration ordering requirements 
prohibit initialization of varieties which have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interrupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_CODE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, eui enumeration type of all the opcode mnemonics, 
a set of register definitions, and a set of addressing mode 
functions. 

The general synteix of a machine code statement is as fol¬ 
lows: 


CODE_n'{ opcode, operand {, operand} ); 

v^ere n indicates the number of operands in the aggregate. 

A special case arises for a varicible number of operemds. 
The operands are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op *> opcode ); 


C-9 




APPENDIX F OF THE Ada STANDARD 


The opccxie must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand cein only be an entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in MACHINE_CODE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expeinsion of machine code procedures is supported. 

6. Conventions for Implementation-generated Names 
There are no implementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restri-c --ns on Unchecked Deallocations 
None. 

10 Inplementation Characteristics of I/O Packages 

Instantiations of DIRECT_IO use the value MAX_REC__SIZE as 
the record size (expressed in STORAGE_UNITS) when the size 
of ELEMENT_TYPE exceeds that value. For exanple for uncon¬ 
strained arrays such as string where ELEMENT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM eind can be changed by a progreun before 
instantiating DIRECT_IO to provide an upper limit on the 
record size. In any case the naximum size supported is 1024 
x 1024 X STORAGE_UNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this edDsolute limit. 

Instantiations of SEQUENTIAL_IO use the value MAX_REC_SIZE 
as the record size (expressed in ST0RAGE_UNITS) when the 
size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string vtiere ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead. 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program beTore instantiating INTEGER_IO to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX REC SIZE. 


C-10 





APPENDIX F OF THE Ada STANDARD 


11. Inplementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 


11.1. Line Length 

The implementation supports a mautimum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the e±)sence of an explicit STORAGE_SIZE length sp>ecifica- 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGE_UNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SIZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is aui aJasolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a conpilation unit. If 
this value is exceeded the conpiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 






