AD-A257 37-9 


ION PAGE 


Form Appmnd 
OPMNo. 0704-0188 


PuMcnponjn 


Hndquwtm 

Mv»g>m*nt tnd Budget. , 


1. AGENCY USE ONLY (Leave Star*) 



4 TITLE AND SUBTiTLf 

Validation Summary Report: Meridian Software Systems, Inc., Meridian Ada, Version 
4.1.3, BBN TC2000 under nX 3.0.1 (Host & Target), 920915W1.11269 


6 AUTHOR(S) 

Wright-Patterson AFB, Dayton, OH 
USA 


7 PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 


iTM. idudng M tin* tof rawnrinB iratrucUan*, tMRtiing naiing dMi iotnw grtantg 

nit* 01 (nr dlM( ageel ol Ml oolMion ol Hormalon. kidudkig tuggHtiom tor raducing tw budtn. « WiiMr^ 

* Hi^iy. Sul* 1204. AA«on. VA 222024302. and to ta die* ol MbUMiDn and RigiiMory Miit. Of ci at 


3. REPORT TYPE AND DATES COVERED 

Final: i5Sept 1992 


5. FUNDING NUMBERS 




8. PERFORMING ORGANIZATION 
REPORT NUMBER 

HOLCF C0090 


9. SPONSORING/MONITORING AGENCY r4AME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 



10. SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12a DISTRIBUTION/AVAILABILITY STATEME 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Meridian Software Systems, Inc., Meridian Ada, Version 4.1.3, BBN TC2000 under nX 3.0.1 (Host & Target), ACVC 1.11. 


14. SUBJECT TERMS 

Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MiL-STD-1615A, AJPO. 


NSN 7540 01-280-550 


IS. NUMBER OF PAGE 


COD 


17. SECURITY CLASSIFICATION 

18. ifecuftiTY CLASSIFICATION 

10. SECURITY CLASSIFICATION 

20 UMITATION 

OF REPORT 


OF ABSTRACT 


UNCLASSIFIED 

UNCLASSIFED 

UNCLASSIFIED 




Standard Form 208. (Rav. 2-80) 
Proscribed by ANSI Sid. 230-128 















Certificate Infomation 


The following Ada inplenentation was tested and determined to pass ACVC 
1.11. Testing was coo^leted on September 15, 1992. 

Conpiler Name and Version: Meridian Ada, Version 4.1.3 


Host Coooputer System: 


BBN TC2000 
under nX 3.0.1 


Target Ccmputer System: BBN TC2000 

under pSO&i-/88k 

Customer Agreement Number: 92-06-12^lSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, validation Certificate 
920915W1.11269 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STT)-1815B. 

rAccesion For 


This report has been reviewed and is approved. 


A^ Validation Facility 
Steven P. Wilson 
Technical Director 
ASC/SCEL 

Wright-Patterson AFB OH 45433-6503 


NTIS CRA&I 
DTIC TAB 
Unannounced 
Justification 


By. 

Distribution / 


Availability Codes 

Avail and/or 
Special 


Lifiatidn Organization 


DirectorV^onputer and Software Engineering Division 
0 Institute for Defense Analyses 


Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 






92—29311 


92 11 11 0 “^* 









92-06-12-llSS 


Ade (COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: 920915W1.11269 
Meridian Software Systems, Inc. 
Meridian Ada, Version 4.1.3 
BBN TC2000 under nX 3.0.1 -> 
BBN TC2000 under pSOS+/88k 


(FINAL) 


Prepared 

Ada_Validation_Facility 

ASC/SCEL 

Wright-Patterson AFB OH 45433-6503 


BOLCF C0090 








Certificate Information 


The following Ada inplementation was tested and determined to pass ACVC 
1.11. Testing was completed on September 15, 1992. 

Conpiler Name and Version: Meridian Ada, Version 4.1.3 

Host Conputer System: BBN TC2000 

under nX 3.0.1 


Target Ccmputer System: BBN TC2000 

under pSOS-f/88k 

Customer Agreement Number: 92-06'12-MSS 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort. Validation Certificate 
920915W1.11269 is awarded to Meridian Software Systems, Inc. This 
certificate expires two years after the ANSI adoption of 
ANSI/MIL-STD-1815B. 


This report has been reviewed and is approved. 




_ 

Ada Validation Facility 
Steven P. Wilson 
Technical Director 
ASC/SCEL 

Wright-Patterson AFB C® 


45433-6503 



Ada V 

Director^ 


m Organization 

C^^iputer and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 





DECLARATION OF CONFORMANCE 


Customer: Meridian Software Systems, Inc. 

Ada Validation Facility: ASD/SCEL, Wright-Patterson AFB OH 45433*6503 

ACVC Version: l.H 

Ada Implementation: 

Compiler Name and Version: Meridian Ada, Version 4.1.3 

Host Computer System: BBN TC2000 

nX 3.0.1 

Target Computer System: BBN TC2000 

pSOS+/88k 

Customer’s Declsuration 

I, the undersigned, representing Meridian Software Systems, Inc., declare that Meridian 
Software Systems, Inc. has no knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation listed in this declaration. I declare that 
Meridian Software Systems. Inc. is the owner of the above implementation and the certificates 
shall be^warded in the name of the owner’s corporate name. 



Irvine, CA 92718 





TABLE OF (XNTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MCX>IFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING EMv^-RONMENT.3-1 

3.2 SUMMARY OF TEST RESULTS 3-2 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 
















CHAPTE31 1 


INTRODUCTION 


Ihe Ada inpleroentation described above vas tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard [Ada83] using the 
current Ada Ccm^iler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada in^lementation. 
For any technical terms used in this report, the reader is referred to 
[Pro90]. A detailed description of the PtCVC may t)e found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the conpjters, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conplete, or that the subject isplementation has no 
nonconformities to the Standard other than those presented. Copies of 

this report are available to the public fron the AVF which performi^ this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation OrganizaTiion 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 







INTROXJCTION 


1.2 referei«:es 

[Ada83] Reference Manual for the Ada Progragnting Lemguaqe , 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

(Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG89] Ada Compiler Validation Capability Oser^s Guide , 21 Jtine 1989. 


1.3 ACVC TEST CLASSES 

Conqpliance of Ada in^lementations is tested tv mews of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
vH^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to pro^ce errors at can;>ile time and link time, 
respectively. 

The executeible tests are written in a self-checking manner emd produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result vAien they 
are executed. Three Ada library units, the packages REPORT and SPP RT13^ 
and the procedure CHECK_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK FILE is used to check the contents of 
text files written ty some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable, tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a cosf^iler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compile aixl the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vhich must not be flagged illegal by the cooqpiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exaitple, the largest integer. A list 
of the values used for this inplementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
inplementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 








INTRODUCTION 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdravm tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an Ada inplementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITIOH OF TERMS 

Ada Conqpiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Conpiler The means for testing con^sliance of Ada inplementations. 

Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host conputer system and its target 

Inplementation computer system. 

Ada Joint The part of the certification body vdiich provides policy and 
Program guid^ce for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body \diich carries out the 

Validation procedures required to establish the compliance of an Ada 

Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Orgeuiization 
(AVO) 

Compliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Conputer A functional unit, consisting of one or more ccmputers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that m^ify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INITOXJCTIGN 


Conformity 


Customer 


Declaration of 
Conformance 


Host Ccm^ter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 
Confuter 
System 

Validated Ada 
Con^iler 

Validated Ada 
Inplementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity v^o enters into an agree¬ 
ment with an AVF v^ich specifies the terms and conditions 
for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada isplementation for 
which validation status is realized. 

A computer system %^ere Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada isplementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manxjal, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<paragraE^>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware Implementations are possible. 

A conputer system >diere the executable form of Ada programs 
are executed. 


The compiler of a validated Ada inplementation. 


An Ada inplementation that has been validated successfully 
either by AVF testing or ly registration [Pro90]. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this inpleroentation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 


CHAPTER 2 


IMPLEMB^TIGN DEPQjDQOCIES 


2.1 V9ITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available fr^ either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025O 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD400aA 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BO8002A 

BD8004C 

CD900SA 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inai^licable if it contains test objectives which are irrelevant 
for a given Ai^ is^lementation. Reasons for a test's inapplicability nay 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inqplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Ccomentaries are included as 
appropriate. 


2-1 




INPLEMENTATICM DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 
SHORT_FLCAT; for this inplementation, there is no such type. 

C35713C, B86001U, and C86006G check for the predefined type 
LONG_FLCAT; for this inplementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLCAT, or SH(3RT_FLCAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLCAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
iiq)lementation, that range exceeds the range of safe nxsnbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45423A, C45523A, and C45622A check that the proper exception is 
raised if MACHINEjOVERFLQWS is TRUE and the results of various 
floating-point operations lie outside the range of the base type; for 
this inpleroentation, MACHINE_OVERFLOWS is FALSE. 

C45531N..P and C45532N..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less than 47. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this isplementation, there is no such type. 

CA2009C and CA2009F check vhether a generic unit can be instantiated 
before its body (and any of its subunits) is coaf}iled; this 
implementation creates a dependence on generic units as allowed by 
AI-00408 and AI-00506 such that the compilation of the generic unit 
bodies makes the instantiating units obsolete. (See section 2.3.) 

LA3004A..B, EA3004C..D, and CA3004E..F (6 tests) check pragma INLINE 
for procedures and functions; for this implementation, pragma INLINE 
has no effect unless the program is compiled and linked using global 
optimization. 


2-2 




IMPLEMEinATION DEPE^EITCIES 


CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this iin>lenientation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation 
does not support such sizes. 

BD8001A, BD8003A, BD8004A..B (2 tests), and AD8011A use machine code 
insertions; this io^ilementation provides no package NiVCHINEjCODE. 

AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this coirpiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO 
with xjnconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

Ihe tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this inplementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 “ 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_IO 

CE3102E 

CREATE 

IN_FILE 

TE3Cr_I0 

CE3102F 

RESET 

Any Mode 

TEXT_IO 

CE3102G 

DELETE 


TEXT_IO 

CE3102I 

CREATE 

OUT FILE 

TEXT_IO 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO 


2-3 






INPLEHEinATIQN DEPENDENCIES 


The following 16 tests check operations on sequential, direct, and 
text files ^en multiple internal files are associated with the same 
external file and one or more are open for writing; USE_ERRQR is 
raised vdien this association is attenqpted. 


CE2107B..E CE2107G..H CE2107L CD2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this ioplementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR \dien the value of the 
page number exceeds OOUNT'LAST; for this Tnplementation, the value of 
COUNT'IAST is greater than 150000, making the checking of this 
objective inpractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3) were required for 9 tests. 

The following tests were split into two or more tests because this 
inplementation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B22003A B63033B B85013D 


A35801E was graded inapplicable by Evaluation Modification as directed tv 
the AVO. The ccmpiler rejects the use of the range 
FLOAT'FIRST. .FLQAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numbers 
(cf. LRM 3.5.7:12). 

EA1003B was graded passed by Processing Modification as directed by the 
AVO. This test checks whether legal units of a coopilation are accepted 
if one of the compilation units is illegal. This test was processed with 
ccmpiler option "-fl", which forces the conpiler to generate code for 
legal units of a coipilation. 


2-4 






IMPLEMENTATICN DEPENDE3«CIES 


CA2009C and CA2009F were graded inapplicable Evaluation Modification as 
directed by the AVO. These tests contain instantiations of a generic unit 
prior to the ccnnpilation of that unit's body; as allowed by AI-00408 and 
AI-00506, the con^ilation of the generic unit bodies makes the cca()ilation 
unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as 
directed by the AVO. These tests check that instantiations of generic 
units with unconstrained types as generic actual parameters are illegal if 
the generic bodies contain uses of the types that require a constraint. 
However, the generic bodies are compiled after the units that contain the 
instantiations, and this implementation creates a dependence of the 
instantiating units on the generic units as allowed by AI-00406 and 
AI-00506 such that the compilation of the generic bodies makes the 
instantiating units obsolete—no errors are detected. The processing of 
these tests was modified by re-compiling the obsolete units; all inte^ed 
errors were then detected by the conpiler. 


2-5 





CHAPTER 


3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada inpleroentation tested in this validation effort is described 
adequately the information given in the initial pages of this report. 

For technical information about this Ada ixtf>lementation, contact: 

William E. Crosby 

Meridian Software Systems, Inc. 

10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 


For sales information about this Ada in^lementation, contact: 

Meridian Software Systems, Inc. 

Attn: Jim Smith 
10 Pasteur Street 
Irvine CA 92718 
(714) 727-0700 

Testing of this Ada ioplementation was conducted at the customer's site 
a validation team from the AVF. 


3-1 






PROCESSING INFORM^^TION 


3.2 SUMMARY OF TEST RESULTS 


An Ada Inpleinentation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, v^ether the test is applicable or inapplicable; 
otherwise, the Ada Inplementation fails the ACVC [Pro90]. 


For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programning Language Sta n^ rd. 


The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 zmd 2.2 (counted in items b 
and f, below). 


a) Total Number of ;^licable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable l^sts 

g) Total Number of Tests for ACVC 1.11 


3786 

95 

88 

0 


201 

289 

(C4d+e) 

4170 

(a+b+f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
ta)cen on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sxm 3 system and then transferred via an 
NFS ethernet to the host computer system. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

Test results were transferred via the NFS ethernet to a Sun 3 system and 
were printed from that system. 

Testing was performed using command scripts provided by the customer and 
review^ by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 


3-2 








PROCESSING INFX)PItflTIQN 


Svdtch Effect 

-fE Generate error file for the Ada listing utility. 

-fZ Ignore conpilation errors and continue generating 

code for legal mits within the same cooqpilation 
file (for test EA1003B). 

~fQ SuE^ress "added to library" and "(Generating code 

for" information messages. 

-fw Su^ress informative %«aming messages. 

-1 Produce a listing file. 

The following switches appear as modifiers to the -1 ccnnand, 

in the form -Icps: 

~c Produce continuous form Ada listings (no page 

headers). 

-p tttey PRAGMA PAGE directives within program even 

though the -c flag says not to generate page 
breaks. 

>s Output Ada listing to the standard output file 

instead of to a disk file. 


Test output, conf>iler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 










APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are. presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vAiich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

200 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> 'IM 

$BIG_ID2 

(1..V-1 -> »A», V -> '2') 

$BIG_ID3 

(1..V/2 -> »A') & '3' & 
(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_L1T 

(1..V-5 -> »0M & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & 

$BLANKS 

(1..V-20 -> » ») 

$MAX LEN INT BASED 

LITERAL 


-2;" & {l.,V-5 -> '0') & "11:" 








nACRO PARAMETERS 


Macro Parameter Macro Value 


$MAX LEN REAL BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 

$MAX_STRING_LITERAL 

& (1..V-2 -> 'A') & 

Itie following table lists all 
respective values. 

of the other macro parameters and their 

Macro Parameter 

Macro Value 

$ACC_SI2E 

32 

$ALIGNMENT 

4 

SCOUNT_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SyS_NAME 

BBN_PSOS 

$DELTA_DOC 

2.0**(-31) 

$ENTRy_ADDRESS 

16#0# 

$EKrRY_AEX>RESSl 

16«1# 

$ENTRY_AIX}RESS2 

16#2# 

$FIELD_LAST 

2_147_483_647 

$FILE_TERMINATOR 

r 9 

$FIXED_NAME 

NO_SUaJ_FIXED_TYPE 

$FLQAT_NAME 

NO_SUt31_FLOATjrYPE 

$FORM_STRING 

If tl 

$FORM_STRING2 

"CANIiOTJRESTRICT_FILE_CAPACITY" 

$GREATER THAN DURATION 

90_000.0 


A-2 






MACRO PARAMETERS 


Macro Parameter Macro Value 

$GREATER THAN DURATION BASE LAST 

T0_00lff_000.0 

$aREATER_THAN_FLQAT BASE LAST 

1.7e^308 

$GREATER_THAN_FLQAT_SAFE LARGE 

1.TJE308 

$GREATER THAN SHORT FLOAT SAFE LARGE 

“ 1.0E308 

$HIGH_PRI0R1TY 20 

$ILLBGAL_EXTERNAL_FILE_NAMEi 

/NODIRECTORy/FILENAMEl 

$ILLEGAL_EXTERNAL_FILE_NAME2 

/Na)IRECTC»lY/FILENAME2 

$INAPPROPRIATE LINE LENGTH 

” -1 

$INAFPROPRIATE PAGE LENGTH 

“ -1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE (’'A28006D1.ADA") 
$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006F1 .ADA”) 
$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTBGER_LAST_PLUS_1 2_147_483_648 
$INTERFACE_LANGUAGE C 
$LESS_THAN_DURATIGN -90_000.0 
$LESS THAN DURATION BASE FIRST 

~ ~ “ -iTy_ooo_ooo.o 

$LINE_TERMINATOSl ASCI I. LF 

SLOW_PRIORITy 1 

$MACHINE_OODE_STATEMENT 

NULL; 

A-3 







MACRO PARAMETERS 


Macro Parameter 

$MACHINE_CODEjrYPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PUJS_1 

$MIN_1NT 

$NAME 

$NAME_LIST 

$NAME_SPECIFICATI0N1 

$NAME_SPECIFICATI0N2 

$NAME_SPECIF1CATI0N3 

$NEG_BASED_INT 

$NEW_MEM_SIZE 

$NEW_STOR_UNIT 

$NEW_SyS_NAME 

$PAGEjrERMlNATC« 

$RECORD_DEFINITIGN 

$REC0RDJ1AME 

$TASK_SIZE 

$TASK_STORAGE_SIZE 

$TICK 

$VAR1ABLE_ADDRESS 
$VARIABLE_ADDRESS1 
$VAR1ABLE_AD0RESS2 
$yOUR PRAGMA 


Macro Value 

INSTRUCTION 

31 
15 

2147483647 

2_147_483j648 

-2147483648 

BYTE_lNrBGER 

BBN_PSOS 

/tAorld/pacvcAal/X2120A 

/t/V»orld/]pacvc/Val/X2120B 

/t/V>orld/]pacvc/Val/X3119A 

16#FFFFFFFE# 

1024 

8 

BBN_PSOS 

ASCII LF&ASCII.FF 
NEW INIEGER; 

NO_SUCH_MACHINE_OC»E_TYPE 

32 

2048 

1.0 

FCNDECL. VAR_ADDRESS 
FCNDECL.VAR_ADDRESS1 
FCNDECL .VAR_AI>DRESS2 
NO SUCH PRAGMA 






1 -• 


APPE3>nDIX B 

COMPILATION SYSTEM OPTIONS 


Ihe conqpiler options of this Ada is^lementation, as described in this 
Appendix, are provided by the custooer. Unless specifically noted 
otherwise, references in this appendix are to coonpiler documentation and 
not to this report. 


B-1 






OQHPILATZGN system qpticks 


KESIDZAK ADA OOimLXR OPnOMS 


-fO G«n«rat« drugging output, tbo -fD option eauMS tha 
conpllar to ganarata tha appreprlata coda and data for 
oparatlon with tha Maridlan Ada Dahuggar. 

-fa Annotata asaanbly languaga listing. Tha -fa option 
causas tha coapilar to annotata an assaahly languaga 
output fila. Tha output is supplasantad by cosaants 
containing tha Ad« sourca stataaants corrasponding to tha 
aasaably languaga coda aactions tfrittan by tha coda 
ganarator. To usa this option, tha -S option nust also 
ba spacifiad, othat;;isa tha annotatad fila is not anittad. 

-fE Ganarata arror log fila. Tha -fE option causas tha 

coapilar to ganarata a log fila containing all tha arror 
aassagas and warning aaasagas produead during coapilatlon. 
Tha arror log fila has tha saaa naaa as tha sourca fila, 
with tha axtansion ,arr. For axaapla, tha arror log fila 
for sispla.ada is sinpla.arr. Tha arror log fila is 
placad in tha ctirrant worXlng diractory. In tha absanea 
of tha -fE option, tha arror log inforsation is sant to 
tha standard output straas. 

-fl Xgnora coapilatlon arrors and eontinua ganarating coda 
for lagal units within tha saaa eoapilacion fila. 

-fL Ganarata axeaption location inforsation. Tha -fL option 
causas location inforsation (sourca fila naaaa and lina 
nuabars) to bo aaintainad for intamal chacXs. This 
inforaation is usaful for dabugging in tha avant that an 
"Excaption navar handlad” aassaga appaars whan an 
axeaption propagatas out of tha sain prograa. This flag 
causas tha coda to ba soaawhat largar. If -fL is not 
usad, axcaptions that propagate out of tha aain prograa 
Will bahava in tha saaa way, but no location inforsation 
will ba printad with t.ha "Excaption navar handlad" 
aassaga. 

-f!i Supprass nuaaric chacking. Tha -fM flag supprasses two 
kinds of nuaaric chocks for tha antira coapilation: 
division check and ovarflow_chack. Thaso chocks ara 
doscribod in soction 11.7 of the UUf. This flag raducas 
tha siza of tha coda. 

-fQ Supprass "addad to library" and "Ganarating coda for" 
inforaation aassagas nonsally output by tha coapilar. 

-fs Supprass all chocks. The -fs flag supprasses all 


B-2 



OGKPILATION SYSnH QPTIOMS 


•utoMtie chaeklag, ineludiag miMrie ehseJclag. nis 
flag is aquivalanc to using pragaa supprsss on all ehaeks. 
This flag radueas tha sisa of tha eoda, and is good for 
producing "production quality" coda or for banehaarfclng 
tha cenpilar. Meta that thara Is a ralatad ada option, 

-fM to supprasa only cartain kinds of nunaric ehaeks. 

-“fU Inhibit library update, tha -f? option Inhibits library 
updates. This is of use in conjunction with tha >8 
option. Certain rastrietiona apply to usa of this option. 

-fv Ceapila varbosaly. Tha eospilar prints tha naaa of aaeh 
subprograa, packaga, or ganarie as it is eoapilad. 
Infenation about tha sysbol tabla spaca ranaining 
following eespilation of tha naaad entity is also printed 
in tha fan "[nx]". 

-tv Supprasa warning aaasagas. With this option, the 

eospilar does not print warning aaasagas about ignored 
pragaas, exceptions that are certain to be raised at 
nin-tiaa, or other potential problaas that tha coapilar 
is otherwise forbidden to daaa as arron by tha LRM. 

Tha >g option instructs tha coapilar to run an additional 
optiaization pass. Tha eptiaisar raaovas ceaaon 
sub'axprasaions, dead coda and unnaeassary juaps. It 
also does loop optiaiaations. 

•K Keep internal fon file. This option is used in 

conjunction with tha Optiaixar. Without this option, tha 
coapilar delates internal fora files following code 
generation. 

-laodifiers 

Generate listing file. Tha •! option causes the coapilar 
to create a listing. Optional aodifiers can ba given to 
affect the listing feraat. You can usa none or any 
eoabination of the following aodifiers: 

c Usa continuous listing foraat. Tha listing by 

default contains a header on each page. Specifying 
•Ic suppresses both pagination and header output, 
producing a continuous listing. 

p Obey pragaa page directives. Specifying >lp is only 
aaaningful if ^ic has also bean given. Neraally -Ic 
suppresses all pagination, wbareas -Icp suppresses 
all pagination except where explicitly called for 
within the seurca file with a pragaa page directive. 

s Usa standard output. The listing by default is 
written to a file with the saaa naaa as tha source 
file and tha extension .1st. as in siapla.lst frea 
siaple.ada. Specifying -Is causes the listing file 




OOKtlLATIGN SYSIEK OPTIGNS 


to bm writton to tlio otaadord aatpat otroaB Inatoad. 

t Oonorato rolovant toxt output only. Tbo listing fay 
dofault contains tna antira sourea pregras as wall 

aa intarspanad arror aaaaagas and warning aoasagaa. 

Spacifylng ^It causaa tha eospilar to liat only tha 
aourca llnaa to which arror soaaagaa or warning 
aaaaagas apply, followad hy tha aaasagaa thaaaalvas. 

Tha dafault listing fils ganaratad has tha saaa naaa as 
tha sourca fila, with tha aaetansion .1st. For axaapla, 
tha dafault listing fila produead for alapla.ada has tha 
naaa siapla.lst. Tha listing fila is plaead in tha 
currant working diraetory. Kota: *1 also eausas an 
arror log fila to ha produead, as with tha -fZ option. 

-L library-naaa 

Dafault: ada.lib 

Usa altamata library. Tha -L option spacifias an 
altamativa naaa for tha prograa library. 

>N No coapila. This option eausas tha ada conaand to do a 

"dry run" of tha compilation procass. Tha conaand 
invokad for aach proeassing stap is printed. This is 
siailar to tha -P option, but no actual proeassing is 
parforaad. 

“9 Print coapila. This option eausas tha ada coaaand to 

print out tha coaaand invokad for aach processing stap 
as it is parforaad. 

'S Produce assaably coda. Causes tha coda generator to 

produce an assaably language sourca file and to halt 
further processing. 


B-4 


OQHPILATION SYSTEM QPTIQNS 


LINKER OPTIONS 

The linker options of this Ada isplementation, as described in this 
Appendix, are provided by the customer. unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


B-5 













“WMJIOK SXSWOWIONS 


MBKXOZAM AOU X2>m ORIOMS 


"A Aqgrassiv^ly inlin*. tSiia epCien instructs tlis eptisissr 
to oggroosivoly iniin* aubprograas when ttssd in addition 
to tha HS option. Typically, thia naans that suhproqraas 
that ara only eallad onea ara inlinad. If only tha hs 
option is usad, only suhprograns tor which pragma ini lna 
has baan spacitiad ara inlinad. 

-c conpilar-prograa-nana 

Oatault: (aa storad in program library) 

tisa altamata eoapilar. Tha ^c option spacifiaa tha 
coaplata (non ralativa) diraetory path to tha Maridian 
Ada eoapilar. This option ovarridas tha eoapilar 
program naaa storad in tha program library. Tha >e 
option is intandad tor usa in eross-eoapilar 
contigurations. although undar such cireuastancas, an 
approprista library configuration is normally usad 
instaad. 

•i Supprasa main program ganaration stap. Tha -t option 

suppraasas tha ersation and additional coda ganaration 
stops tor tha taaporary main program tila. Tha option 
can ba usad whan a sispla ehanga has baan mads to tha 
body of a compilation unit. Xt unit alaboration order 
is changed, or if tha spacitieation of a unit is changed, 
or if new units are added, than this option should not bo 
usad. 

'9 Perform global optimization only. Tha --g option causes 

baap to invoke the global optimizer on your program. 
Compilation units to ba optimized globally must have bean 
compiled with the ada 'K option. 

-G Perform global and local optimisation. The -d option 

causes baap to perform both global and local optimization 
on your program. This includes performing pragma inline. 
As with the ^g option, compilation units to be optimized 
must have been compiled with the ada option. 

-I Link the program with a version of tha tasking nwtima 
which supports pra>eaptiva task scheduling. This option 
produces coda which handles interrupts more quickly, but 
has a slight negative impact on partormanca in general. 

“L librarynama 


B-6 



Osfattltx 


•da.llb 


Om altamata library* tba “t» option spoeifios tho naaa 
of tho prepxaa library to bo eoaoaltad toy ttoo toaap 
prepraa. ibia option ovarrldas ttoo dafault library naao. 

~n No link. Tlia <-0 option amy r aaBoa aetnal otojaet £lla 

llnleapa, but craataa amt pi^oma coda paaaratloa on ttoa 
aaln propraa rila. 

Ho oparatlens. Tba option canaao tha baap eoaaand to 
do a *dry run"; it printa out tba actions it takaa to 
panarata tba axaeutabla propraa, but doas net actually 
parfora tbooa actions, lha saaa kind o£ Inforaation is 
printad by tba -P option. - 

•o output'-flla-nana 

Oafault: £ila 

Uaa altamaca axaeutabla fila output nano. Tba -o option 
spaeifiaa tba naaa o£ tba axaeutabla propraa Tila vrittan 
by tha baap eoaaand. This option ovarridas tba default 
output fila naaa. 

'P Print operations. Tba -P (^tion eausas tba baap eoaaand 

to print out tba actions it takas to panarata tba 
axaeutabla propraa as tba actions are parfoxaad. 

-V I.ink varbosaly. The >v option eausas tba baap eoaaand to 

print out Inforaation about vbat aetions it takas in 
buildinp tba aain propraa. 

-w Suppress waminps. This option allows you to suppress 

waminps froa tha optiaizar. 



APPENDIX C 


APPENDIX F OF THE Ada STANEARD 


t 

The only allowed inplementation dependencies correspond to 
inqplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The iiqplementation-dependent 
characteristics of this Ada iit{>lementation, as described in this Appendix, 
are . provided by the custoner. unless specifically noted otherwise, 
references in this Appendix are to coopiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, vdiich 
are not a part of ^)pendix F, are: 


package STANDARD is 


type INTEGER is range -2_147__483 648 .. 2 147_483_647; 
type SHORT_INTBGER is range -327^^8 .. 327^7; 
type LONG_INTEGER is range -2 147_483 648 .. 2_147_483_647; 
type BYTE_INTBGER is range -l78 .. 127; 


type FLGAT is digits 15 

range -1.79769313486231E+308 .. 1.79769313486231E+308; 
type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 
end STAND^; 


C-1 










iix F or 



Tht. ■p pawtii'. >.««■ m^p >gw«it«t kjt > itepmdfn t ch f cte ni tie s of Mthdim 
Adfc No» tlw no pmwdin* appcndic*. Tlti* •ppwdix « caltod 
f «<>**»« to coB^ with ih* R«f«nme« for Adi 

Pi o youn iHg L>n(suigii^ (t^M) ANSI/MIL^I frlttSA which n^ttB tfut 
thia tppoieUx ba iMOiMi Appendix F. 

Impkawntid Chapter 13 featona SKfaida length ciauaat. cmanaratian 
fipimaa nation clamee, record lapiuentation clauaea. addreaa rJauM, 
oitemipia, package ayetenv machine code maertiana, pragma mtentece, 
and unchecked programnung. 


F. 1 Pragmos 

The unpiamented prn^a fi ne d pragmaa are: 
elaboraoe Sea the LRM icction 103 
xneorf aoo Sea eection F.14 

Uac Sea the LRM Appendix B 

paex Sea acetion F.l<2 

pa^o Sea the LRM Appendix B 

prxocxty Sec the LRM Appendix B 

arupproaa See sectio n F.13 

uaino See the LRM section 6Ji This pragma II not actually effective 

unless you compile/link your program using the global 
oponuze. 

The remaining p re defined pragmas are accepted, but presently ignored: 

ooncrolXod opeUaxa* syacaai_naM 

ahared mtormgmjimxt awMocy^sx za 

Named parameter notation for pragmas is not supported. 

When illegal parameter forms are encountered at compile time, the 
compiler issues a wanung message rather than an error, as reauired by 
the Ada language definibon. Refer to the LRM Appendix B for addibonal 
infonnaaon about the pre<lcfincd pragmas. 

F. 1.1 Pragma Interface 

The form of pragma mterface in Meridian Ada is: 
prsews sstMSaeat imgttMgt, sutprogrmn [, 'tiai'iimir ’l ); 


l a v m a $/3Bm 


sBN oSOS Comotar uier $ Guoe 


C-2 


Pope 179 


APPBOIX F OF 



if i i y lliitittfoinlBteknpMgii^amaftlviudMiaMaMjr, 

bailtia, c, or tataniL Tm namn bvfliis and ifltaraal art 
raavwid for OH bf Mandian compiiar maaMunan ai 
noHuna aupport padttgaa 

tiibpiogrmm IhiatalhanawafaaafaprotnmtDwhkhlhapn^na 
laeacCafla appite 

lai-mmt Utis is an opdenaiabinglitBralapaafyingihaiiaina of lha 

nan-Adafu b pfcy am ceitaapon di n g tDthaAda 
subprogram naated in tha sacend panmstsr. If iMc«iiaair IS 
omi ttsd, than M e m om dafauUs to tha vahm of subwvgiaia 
trsnslatsd to lowaKaaa. Dapandingonihalanguaga 
tpeofiad. soais autnnatie modificanons may ba mada to 
te iad-nsaw to produea tha actual objact co^ symbol 
name that is g ansr at s d whanavar l a fai ma a s an atada to 
the cotrss po n d ing Ada subprogr am . Tha ob^ coda 
symbol g s si a ia ts d for Mc^name u always trutslatad to 
uppmcaaa. 

It is appropruta to uaa tha optional Mc-name paramater to 
pragma intarfaoa only when tha mtariaca subprogram 
has a name that does not corre sp on d at all to its Ada 
idenbfier or when tha mterfaca subprogram name cannot 
ba given usmg rules for constructing A^ identifiers (c-g* 
if the name contains a T character). 

Tha characteristics of obpet coda symbols gan es ai ed for each interface 
language are; 

assembly Tha object code symbol is tha same as Utik-tume. 

builtin Tha object coda synibol is tha same as link-name, but prefixed with 

two underscore characters ('_This language mterface 

IS re s e r ved for special interfaces defined by Mmidian 
Software Systems. Inc. The builtia mterfam is presently 
used to declare certam iow-ievei run*eiine operations 
whose names must not conflict with programmer-defined 
or language system defined names. 

c The ob)ea code symbol is otha same as link-name, but with one 

underscore character CJ") p r epen d ed. This is the 
convenoon used by the C compiler. 

iatenial No obpet code symbol is g e mra ted for an mtemal language 
interface this language mterface is r es ennii for special 
interfaces defined by Msndian Software Systems. Inc. The 
intcmai interface is p r e s ently used to declare certam 
tnachin^ievel bit eperaooiu. 

No automatic data conversions are p e i for med on parameters of any 
mterface subprograms. It is up to the programmer to ensure that calling 
conventions mat^ and that any necessary dau conversions take place 
when calling mterface subprogr a ms. 


n weses/as/sg 


'900 iSO 


C-3 


SBN oSOS Comosar UMf s (Siaoa 








APFQ4DIX F OF IBE Ada STMCARD 


Ambutm 


A pragma inf rfxM any ■ppMrwrthtoth»Ma »d«d«f«<q»pni i 
thmibpwaggmlp which th»pf«goMilnta»<«o»«|^MM, iollgwnng thr 

ni hyi c gM m « to cl —tio ^ andpnor<pawfin<M««o<<n »«»b pfey. A 

*mo»<hH«pptwi*D*wibpiogym ^**-|M*^iw p«dagt 
« p»Pifcfft an oiui occur within th«MiMp«ctoy» P*tf* * * >°"** aw 

m bp roff m dcdcwtton; <h» p i igmc tntiaxtmam nicy not cpp—r in rtw 

P«riMj«bodyinlhiocoonApiogB»clnf»t*ood odOTn onfor ciihor c 

pnvotcor n onp n ^tccu b pr oyM ndodmticnincycppoginihopnww 

pot of a pockagptpobfieattaiL 

Pnynainfgfnoo tor H b t t y u n i te ia not au pp c rt id 

iltetf te the LRM Mcteon 13.9 for additional mfononation about pragma 
uicnxiraan. 


P.1.2 Pragma Pack 

Pragma poelt ia unplcmonted for componte types (records and arrayti. 

Pragma is permitted feUowmg the composite type declaratum to 
which It applies, provided diet the pragpM occurs vnthm the same 
daciarativc part as the composite ty^ dsclaraDoa before any objects or 
components of the composite type are declared. 

Note that the declarative part l e s tnct i on means that the type declaration 
and accompanying pragma peak cannot be split across a package 
specificatian and body. 

The effect of pragma pecsk is to mmimixe storage consumpoon by 
discrete component types whose ranges permit packing. Use of pragma 
peek does not defeat allocabons of alignment storage gaps for some 
record types. Pragma peek does not affect the representabons of real 
types, pre-dehned integer types, and access types. 


F.1.3 Pragma Suppress 

Pragma euppceea is imp l e m e nt ed as desenbed in the LRM secbon ll.T. 
with these diffcrencer 

• Presently, diviaion.chcck and ovcrflow.chcck must be suppressed 
via a compiler fla^ -CM: pragma mupprmmm is ignored for these two 
numetK checks. 

s The opbonal 'OM <■>" parameter name noubon for pragma 
avpproos la ignored. 

• The opbonal aecond parameter to pragma auppeosa a ignored: the 
pragma always appisM to the emre scope in which it appears. 


F.2 Attributes 


All attnbutes desenbed m the URM Appendix A are supported. 


imumta t/ 2 $fn 
C-4 


3 BN oSCS Comoiof u$or s Snao 


flop* IBI 




AFPOOIX F OF 


Ada STANCARD 


THE 


AcemnauF imB mtm n icnor>.09omneMntChcK oc rmi uik^ ____ 

F.3 Standard Types 

Addttaon«l standard types ai* defined in Mendian Ada; 

• byte.integer 

• short.inceger 

• long_integer 

The itanaard numeric types are defined as; 

*YP« byia_tiitee«r s.# sang* -12S ■■ 127 ; 

type shert_a.ataig«x xm zmaqm -327Ca . . 327C7 ; 

<yp« xasagec xm rmtugm -21474e3f4a . 2147443447; 

type iatkg_uis«g*x xm caag* -21474e3S4S 21474B3S47; 

xypa float va dagxta IS 

canga •1.7S7fS3134Sf23lC*30l . 1 .7»7SS3134SS231E*30S; 

typo duxataen aa delta 0.0001 range >44400.0000 
44400.0000; 


F.4 Package System 

The specification of package eyatam is: 

package eyataa aa 

vype addeoea aa new long_antagec; 

typo naae aa Itabn^seai ; 

•YetaB_naaa : oenataat naae ;w tabn_paea; 

sterage_unat : ecnataat 4; 

■aaMry_aase constant :* 1324; 

» SyatOB-Oepenaeat Haaod Muabera 


•an_ant 

•aa^aat 

■aa~dagata 

aaajaantassa 

fane_dalta 

taea” 


constant • >2147443444- 
constant ;e 2147443447; 
constant :* 15; 
constant ;e 31; 
constant 2.3 *• i-ll) ; 
esnstaat :e 1.3; 


— Ottier Systaa>Oapcndent lec.acataons 


suatype pxaocaty as antegor range 1 23 

ne vsiue oi ayatcm. w a w ory aasc is rreseniiv mesnincitts 








APPENDIX F OF 


F.5 Restricttons on Representoiion Clauses 


F.5.1 Length ClausM 


A dat tpaafietticn (t'alM) is if fmMr biti u« tpnfiad ttm 

can soeommocUts ths tjrps. Ths noniBBun MS pf s composits type 0 )sy 
bs subpet to appUcatien of prawns paak. It is psnmtisa to spadFy 
pnKissMBi<OTansignodintsBBnngBa»a.g,8forthanui§sO. .2SS. 
Howw. baeaass of l o quu oni i t i imp o sad by ths Ada lat^piags 
clafinitioaafiiU32-bitrangaof unsignBdvalnaa,La.O.. (2**32)>i, 
cannot ba dafinsd. av«n nsBig a siaa spoaficatMn. 


Tha spadfication of coilocdon s« (C' staraga^slsa) is avahutsd at 
run-tuna when dta seopa of the typo to which trie length clausa appbaa n 
entend and is t het af o r a sub^ to reyection (via scarapajarrosl baaad 
on available storage at the tima the aUocabon is made A coilacnon may 
include storage for run-tima ad mu u s tr a oon of dte coUactian. uid 

therefore should not teajcpactsd to acco m modate a spacihc numbee of 
obiecie Furthermore certamclasMs of objects such as uncon s tr ain e d 
discriminant array c o m p onents of records may be allocated outaale a 
pven collection, m a collecbon may accommodate more objects than 
ought be e x pected. 

The specification of storage for a tuk activation (t* steca 9 ai_ai.ao) is 
evaluated at rurt-time whm a task to which the length ciauta*applies u 
activated, and is thenefo re subject to rejection (via atoraqojaraor) 
based on available storage at the time the allocation is mad^Storage 
naerved for a task activation is separate from storage needed for any 
collectiotu defined vnthin a task bixly. 


The specification of small for a fixed point type (c' 
to t est ncttuni defined in the LRM section 13.2. 


) is subject only 


F.5.2 Enumeration Representation Clauses 


The mtemal code for the literal of an enumeration type named in an 
enumerauon represantation clause must be m the range of 
sranrtard.Inoapoc. 

The value of an intenial code may be obumed by applying an 
appropriate instanoabon of unehoekod_eonvoxsxen to an mteger type. 


Record Representation Clauses 


The storage urut offset (the at $tMtK_stmvl£jixura$um part) is pven m 
terms of ^bit storage uiuts and must be even. 

A bit position (the range part) applied to a discrete type component may 
be in the range 0.. IS, withObmg the least significant bit of a 
component A range specificaeon may not specify a size smaller than can 
accommodate the component A range speci^ation for a component not 
accommodating bit packmg may liave a higher upper bound as 
appropriate (e.g. 0.. 31 for a disenmmant atrtng componm). Refer to 


3BN oSOS Comosof mmr t Gisoo 


^OQo 183 






apfsidix f op 


IBB Ada STM 




GoQipoMnli ci diKivlB typii fof wliicii bitpoiiaoKV m^Mcifisd nm^ 

TIM tttaddk 16^ word boundafiMu 

Tlw vahio of an aUstanBit duM (tht epdenal at Mod pax^ matt ovolootB 
to 1, Z 4. or A and may not ba asiailar man dw highaat alignBitRt 
laqumd by any coo^nnant of (ha lacorcL Oi the CLDC opanttig tyaam. 
thia maana that aema raoofda may not hava aliBiinant claiaaaa niaihr 
thanZ 


f.BA Address ClausM 

An addiaaa dauaa may ba auppUad for an ebjait (whathar conatam or 
vanaMa) or a tank ant^, but not for a aubpio^nun. packagau or taak amt 
Tha maanmg of an ad^oaa ciaoaa aupphad for a ta^ antry » pwan m 
aoctionFJJ. 

An addiau axpraaaion for an obfact It a 32>bit aagmeitad mamoiy 
addrasa of typa ayatam.andaoaa. 


F.5.5 Interaipts 


A taak antTya addrtaa clauaa can ba tiaad to aaaociata tha entry With a 
pSOSaignaL Valuta in (ha rangaO. .aiaramaatungfuLandrapraacnt 
tha iniairupta cotraaponding to thoaa vahaoa. 

An intarrupt an(ry may no( hava any paramaiera. 


F.5.6 Change of R 0 pr«t«ntatlon 

Thara ara no raatTKbona for changea of rapicacnunon affected by meana 
of type convemon. 


F.6 Implementation-Dependent Components 

No tumea ara gene rate d by tha impiamcntabon to denote 
unpiamamationHlependent com p one n t a . 


F.7 Unchecked Conversions 

There arano reatrKbona on thauaaof unohoQkodi_eenvoaaaon. 
Cbnvcraiona betwewi obiecta whoaaaiaaa do not cmform may reault in 
atoraga areaa unth undefined valiiea. 





F.8 Input-Output Packages 



* bi calk to opoa Old aM«c%lht;iiniipanBiMr must bctlwanp^ 
atmg (ttia dafrak vahto). 

* Mmthananaditomalfikcanbcaaoaatodwilhaadi^axtoniai 
fila for raading only. For writing only ena totomal £ik najr bt 
aaaoaatod with an amm aiffla; Do not uaa g a^o t to gto around Ihk 
nila. 

* Temporary aaquantial and dinct fika ara given nanaa. Tamporary 
fifaaaiadalatodwhuhayaiaclaaari 

* Fik I/O is bufkrad; test fikaaaaoaatad with tennmaldavioaaaiv 
lina-biifforad. 

* The packages aaqaantlaX_lo and dltuce^lo cannot be 
matanlaated with u nc o n ag a n iad composite types or lacord types 
with diacnmmanci without defaults. 


F.9 Source Line and Identifier Lengths 


Source tinea and identifiers m Ads source progr ams are preaentiv limited 
to 200 eharaetera ai length. 




