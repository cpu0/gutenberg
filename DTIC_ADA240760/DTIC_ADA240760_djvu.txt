AD-A240 760 


ill If 


ENTATION PAGE 


Form Apfxovwj 
OPM No. 0704-01as 


•g* t hour pw tMponu. lndu*s *w Miw for rontMlng Iratnialoni. Morctwig uMIng iMa touioM gahortig M moSSnr^ ow don 
*)g Ihii burdor ootlmaM or tuf olhor apM or »m eettalon oT Mormaion. mudlng ouggMtiorB for rodudne Mi Ourdon lo Wmtmgton 
121S Joflonon Dova HfgMray. SuM 1204. Mlr^on. VA 22202-4302. and lo fh* Offica of Intoimaaon and flagilaairY Altan. Odica ol 


2. REPORT DATE 


Managamant and Budgal Waahnguin. OC 20603. 


1. AGENCY USE ONLY (Leave Blank) 


4 TITLE AND SUBTITLE 

TeleSoft, TeleGen2 Ada Host Development System. Version 4.1, for Macll Systems 
Macllfx under A/UX 2.0 (Host & Target). 910721I1.11194 


6. AUTHOR(S) 

lABG-AVF 

Ottobrunn, Federal Republic of Germany 


7 PERFORMING ORGANIZATION NAME(S) AND ADDRESS<ES) 

IABG-AVF. Industrieanlagen-Betriebsgeselschaft 
Dept. SZT/ Einsteinstrasse 20 
D-8012 Ottobrunn 

FEDERAL REPUBLIC OF GERMANY 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D C. 20301-3081 


3. REPORT TYPE AND DATES COVERED 

Final;18 July 1991 to June 1993 



8. PERFORMING ORGANIZATION 
REPORT NUMBER 

lABG-VSR 089 


10 SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12a. DISTRIBUTION/AVAILABILITY STATEMENT 

Approved for public release; distribution unlimited. 


12b. DISTRIBUTION CODE 


13 ABSTRACT (Maximum 200 words) 

TeleSoft, TeleGen2 Ada Host Development System, Version 4.1, for Macll Systems, Ottonbmnn, Germany, Macllfx under 
A/UX 2.0 (Host & Target), ACVC 1.11. 


i: is l* 




It SEP 19 1991 



91-11061 


14 SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17 SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


18 SECURITY CLASSIFICATION 


UNCLASSIFED 


19, SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLAooirlED 




15. NUMBER OF PAGES 


16. PRICE CODE 


20. UMITATION OF ABSTRACT 


NSN 7540 01.280-550 


'"Starxiarcl Form 298. (Rev 2-89) 
Prescribed by ANSI Std. 239-128 





























TfflS DOCUMENT IS BEST 
QUALITY AVAILABLE. THE COPY 
FURNISHED TO DTIC CONTAINED 
A SIGNIFICANT NUMBER OF 
PAGES WHICH DO NOT 
REPRODUCE LEGIBLY. 






AV¬ 

IS 


F Control Nurtcer; IA3G-VSR 333 
July, 1991 


Ada COMPILEIl 

VALIDATION SUMMARY REPORT: 
Cartificata Nuaabar: 91072111.11194 
TeleSoft 

TelaGen2™ Ada Host Developnvent System 
Version 4.1, for HacII Systems 
MacIIfx under A/UX 2.0 
Host and Target 




Prepared 3y: 
:aBG mbH, Abt. ITS 
Sinsteinstr. 20 
W-9012 Ottobrunn 
Germany 





Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 91-07-21. 


Compiler Name and Version: TeleGen2™ Ada Host Development System, 

Version 4.1, for MacII Systems. 

Host Computer System: Apple Macintosh Ilfx under A/UX Version 2.0 

Target Computer System: same as Host 


See Section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effo.t. Validation Certificate 
#91072111.11194 is awarded to TeleSoft. This certificate 
expires on 01 March 1993. 


This report has been reviewed and is approved. 


X-U ' cK-ivE 

lABG, Abt. ITE 
Michael Tonndorf 
Einsteinstr. 20 
W-8012 Ottobrunn 
Germany 


Fal/iSation Organization 
Diretto^, Computer S Software 
Institute^for Defense Analyses 
Alexandria VA 22311 


Engineering Division 



Ada Joint Program Office 
Dr. J'h.'i Solomond, Director 
Department of Defense 
Washington DC 20301 




DECLARATION OF CONFORMANCE 


Customer; 

Ada Validation Facility: 

AC VC Version: 

Ada Implementation: 

Ada Compiler Name and Version: 

Host Computer System: 

Target Computer System: 


TeleSoft 

5S59 Cornerstone Coun Vvesi 
San Diego CA USA 92121 

lABG, Dept. ITE 
W-8012 Ottobrunn 
Germany 


1.11 


TeleGen2™ Ada Host Development 
System, Version 4.1, for Macll Systems 

Apple Macintosh llfx 
under A/UX Version 2.0 

Same as Host 


Customer's Declaration 

I, the undersigned, declare that TeleSoft has no knowledge of 
deliberate deviations from the Ada Language Standard ANSI/MIL- 
STD-1815A ISO 8652-1987 in the implementation listed above. 


/ 








TELESOFT 






Raymond A. Parra 
Vice President 
General Counsel 


Date: 


:/ 





TABLE OF CONTENTS 

CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT 

1.2 REFERENCES . 

1.3 ACVC TEST CLASSES . 

1.4 DEFINITION OF TERMS . 

CH.^PTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS . 2-1 

2.3 TEST MODIFICATIONS.2-4 

CH.APTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT . 3-1 

3.2 SUMMARY OF TEST RESULTS.3-2 

3.3 TEST EXECUTION.3-2 

APPENDIX A .MACRO P.ARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

.APPENDIX C APPENDIX F OF THE -Ada STANDARD 


CO rj ro 














CHAPTER 1 


INTRODUCTION 


T^.e Ada implementation described above was tasted arrording to the Ada 
Validation Procedures [?ro90] against tne Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any technical terms used in this report, the reader is referred to 
■?ro90] . A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that a*i statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
.nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from; 


National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results s.nould be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1301 .North Beauregard Street 

Alexandria VA 22311-1772 






IMTRCC'JC 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Rrocraircnir.g Language , 

ANSI/MIL-3TD-1815A, February 1583 and ISO 3652 - 1987 . 

[?ro90] Ada Compiler Validation Procedures . Version 2.1, Ada Joint 
Program Office, August 1990. 

[UG39] Ada Compiler Validation Capability User's Guide , 21 June 1989. 

1.3 ACVC TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The .-.CVC 
contains a collection of test programs structured into six test classes: 

A, B, C, D, E, and L. The first letter of a test name identifies the class 
to which it belongs. Class A, C, D, and E tests are executable. Class 3 
and class L tests are expected to produce errors at compile time and link 
time, respectively. 

The executable tests are written in a self-checki.ng .manner and produce a 
P.ASSED, FAILED, or -NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and 3PPRT13, 
and the procedure CHECX_FILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
3 tests are not executable. Each test in t.his class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
t.he Ada Standard are detected. Some of the class 3 tests contain legal .Ada 
code which must not be flagged illegal by the compiler. This behavror is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In seme tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. .A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
i.T.ple.mentation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1 -2 



IN'TRCDU' 


for each Ada implementation, a customized test suite is oroduced 'ey tr.e 
AVF. This customization consists of making the modifications descruoed 
in the preceding paragraph, removing witndrawn tests (see sectuen 2.1) anc 
possibly some inapplicable tests (see Section 2.2 and ;'JG39]) . 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 

1.4 SEFINITICN OF TERMS 

Ada Compiler The software and any needed hardware that have to be a,die 
to a given host and target computer syste.m t; alio 
transformation of .Ada programs into executable form ir. 
executl-Oii tnereof. 

Ada Compiler The means for testing compliance of Ada implementatuons. 
Validation consisting of the test suite, the support programs, the ACV 

Capability user's guide and the tem.plate for the validation summary 

(ACVC) report. 

Ada .An Ada compiler with its host computer system and its 

I.T.plementation target computer system. 

Ada Joint The part of the certification body which provides poiucy an 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an .Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(.AVO) 

Compliance of The ability of the impleme.ntation to pass an ACVC version, 
an Ada 

I.mpiementation 

Computer 
System 


j 


A functional unit, consisting of one or more computers and 
associated software, that uses common storage for all or 
part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify t.hemselves during execution. A 
computer system may be a stand-alone unit or may consist o 
several inter-connected units. 






o o 


IMT?.C3'JCTI Z'.l 

ConforiT-ity Fulfillment; by a product, process or service of all 

requirements specified. 

Customer An individual or corporate entuty who enters into an 

agreement wrth an AVF which specifies t.ne term.s ani 
conditions for AVF services (of any xund) to be perform.ed. 

eciaration of A formal state.ment from a customer assuring that conformity 
onformance is realized or attainable on the .^da i.mplementation for 
which validation status is realized. 

.dost Computer A computer system where Ada source programs are transformea 
System into executable form. 

Inapplicable A test that contains one or more test objectives found t: oe 
test irrelevant for the given Ada _.mple.mentation. 

ISO International Organization for Sta.ndardization. 

Operating Software t.hat controls the execution of programs a.nd that 

System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operati.ng systems are predcm.i.nantly software, but par-ial 
or com.plete hardware implementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Vaiiaateu nua me compiler of a vaiiuatea Ada implementation. 

Compiler 

Validated Ada An Ada implementation that has been validated successfully 
Implementation either by AVF testing or by registration [Pro90]. 

Validation Tne process of checking the conformity of an Ada compiler to 

the Ada programming language and of issui.ng a certificate 
for this implementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 


CHAPTER 2 

IMP LEMEN’T AT 11N’ C E? ENT EN'C IE3 


WITHDRAWN TESTS 


he following tes 

Its have 

been withdrawn 

by the .AVO 

The rati 

cnale for 

ithdrawing each 

test 13 

available from 

either the 

AVO or the 

A'/F. The 

uolication date 

for t.nis 

list of withdr 

awn tests 

13 91-05-03 


E29C05C 

323006C 

C347060 

C25308I 

C35508J 

C 3 5 5 I 8 -M 

C3 550 8N 

:35732A 

C357023 

3413C33 

C43004A 

24 c114A 

ClSS-loA 

C45612A 

C456123 

C45612C 

C45651A 

C 4 6 0 2 2 A 

B49C08A 

3430083 

A74006A 

C74303A 

383C223 

383022H 

38302 Sa 

333025D 

3830263 

C33C26A 

C33041A 

B85001L 

C36001F 

C34021A 

C97116A 

C980C2B 

BA2011A 

C3“001A 

C370013 

C37004A 

CC1223A 

3C1226A 

CC122C3 

3C30093 

3D1302B 

3D1306A 

AD1308A 

3D2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A4lA 

C02A41E 

CD2A8~A 

CD2315C 

3D3C06A 

BD I'^OSA 

CD4022A 

CD4022D 

C04C24B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CO7204B 

AD7206A 

3D8002A 

3D8004C 

CD9005A 

CD 900 53 

CDA201E 

CE2107I 

CE2117A 

CE21173 

CE2119B 

CE22053 

CS2405A 

Ci 3111'^ 

CE3110A 

CE3118A 

CE34113 

CS34^23 

C-33073 

Z'Z 0 3 

CE3607D 

CE3812A 

CE3814A 

CE39023 




.2 INAPPLICABLE TESTS 

cest is inapplicable if it contains test objectives which are irrelevan 
or a given Ada implementation. Reasons for a test's inapplicability may 
e supported by iocume.nts issued by the ISO and the AJPO known as Ada 
c.mmentaries and commonly referenced in the format Al-ddddd. For this 
■T.plementation, the following tests were determined to be inapplicable fo 
he reasons indicated; references to Aaa Commentaries are included as 
ppropriate. 




owing 23 

i 

tests have 

f loati.ng-poin 


ype 

dec1a r 

Its tha.n 

3 

fSTEM..MAX_D 

IGIT3 ; 




C24113L. 

V 

(1 4 tests) 

C357G5L. 

V 

(14 

c e 3 c 3 j 

C35706L. 

. Y 

(14 tests) 

C35737L. 

V 

(14 

testis) 

C 3 5 7 0 8 L . 

V 

(14 tests) 

C35302L. 

■y 

(15 

tests } 

C45241L. 

V 

(14 tests) 

C45321L. 

V 

(14 

tests) 

C45421L. 

V 

(14 tests) 

C45521L. 

y 

(15 

tests 5 

C45524L. 

•tr 

(15 tests) 

C45621L. 

. z 

(15 

tests) 

C 4 5 6 41L . 

V 

(14 tests) 

C45012L. 

*7 

(15 

tests) 


C35-i^4D, C452310, 386001X, C96006E, and CO^IDIG check fcr 
:.r.ceqer hype with a name other than INTEGER, LONG 
3HCRT_INTEGER; fcr thi3 implerr.entaticn, there is no seen 

lit'liB, C45423a, 3350C1T, and C86006H check for the predefined 
tvee SHORT ELCAT. 

333-130 and 3860012 check for a predefined floatcng-potnt f/pe with a 
name other than FLOAT, LCNG_ELCAT, or 5HCPT_ELCAT. 

345531M..? and C45532M..? (9 tests) check fixed-po 
types that require a SYSTEM .MAJ<_MANTI5SA of 47 or 
imp-exentaticn, MAX_MANTIS3A is less tnan 4-. 

343624A..3 (2 tests) check that the proper exception 
MACHINS_0'/ERi'I.OWS is FALSE fcr floating point types; 

.mplem.entaticn, MACHINE_OVERFLOWS is TRUE. 

3360C1Y checks for a predefined fixed-point type other than DURATION. 

3A2009C, CA2009F, 3C3204C, and 3C3205D check whether a generic unit can 
ce instantiated BEFORE its generic body (and any of its subunits) is 
oom.piied. This implementation creates a dependence on generic units 
as allowed by AI-00408 and AI-00530 suen that the compilation of the 
generic unit oodies makes the instantiati.ng units obsolete. (See 
sect ion 2.3) 

3D1309C uses a representation clause specifying a non-default sice 
for a floating-point type. 

3D2A34A, CD2A84E, CD2A84I..J (2 tests), and CD2A340 use representation 
clauses specifying non-default sizes fcr access types. 


int operations fcr 
greater; for this 

is raised if 
for this 



? — 











:m?izmentat:: 


tne are 


riven n^e operations are 
and file access rtetncd. 


DDorted for one ri 


r app^ioac^e cecaiae one 
ven ccrjo matrn :f .re oe 


i^e Icerati: 


Mode 


r* i 1 e Access Me t r. ■ 


ZZ2ZZ2? 

^ ^ ^ 
1. ^ « j^ 

:i:i:;:r 

CE2 :j2 S 
" 0 2^ 
CZ2ia2U 
2E21 j2V 
'E2102W 
;e3102E 
2E3:02E 




CREAEE 

CREATE 

CREATE 

CREATE 

CREATE 

OP EM 

RESET 

OPEN 

RESET 

CPEN 

RESET 

CPEM 

RESET 

OPEN 

RESET 

CREATE 

RESET 

^ E t.E""E 

CREATE 

OPEN 

CPEN 


CUT_ECEE 

:nc'jt_e:ee 

CN_rlEE 

'-v o r ^ 

:m_e:ee 

IM_EILE 

CUT_EIEE 

CUT_EIEE 

:nc'JT_e:ee 
:ncl’t_e : ee 
:m_eie£ 
:n_eiee 

CUT_EIEE 

CUT_FIEE 

:m_eiee 

Any Mcde 

cut_e:ee 
:n_ecee 
CUT ElEE 


3EQUE.'iT:AE_;; 

3ecuent:ae_:; 
C CRECT_CC 

SEQUENTIAE_: 
SEQUENT :ae_:' 
SEQUENT:ae_: 
SEQUENTEAE_: 

c:rect_:o 
ci?ect_:j 
OXRECT_:C 
Dj.RE^T J.0 

direct_:q 

TEXT_IC 
TEXT 13 

text”:3 

TEXT_:3 
TSXT_IC 
TEXT :3 


~'r.e following 15 oesC3 cneeJe operations on seq’oential, direot, sod 
files wnen .tultiple internal files are associated with tne saxe exter 
file and one or more are open for writing; USE_ER-ROR is raised wn 
tnis association is attemoted. 


CE2lO'E..E 
^ * - * •>, 

CE3115A 


:E2107a..H CS2107L 

:e2:iih ce31ii3 


:d21103 
:e3iiid. 


CE2110D 

CE31143 


3E22C3A oheexs that WRITE raises USE_ERRCR if tde capacity or tde 
external file is exceeded for SECUENTIAE_IO. This implementation dees 
not restrict file capacity, 

CE2403A cheexs that WRITE raises USE_ERRCR if the capacity or the 
■external file is exceeded for DIRECT IC. This implementation does not 
restrict file capacity. 

3E32’4.A checks that U3E_ERRCR is raised if a call to 3ET_EINE_EENGTH o 
3ET_?AC-E EENGTH specifies a vaiae that is inappropriate for tne extern 


This im.plementation does not have i.nappropriate valies fc; 
-ength or page ^ength. 


r "5 


4 133 o.necks that ?.!\GE raises lATouT ERROR when the value of tne pa; 


nu.Toer e.xoeeds 
,3UN~'EAST 13 grea 
imoraotioal. 


UNT'EAST. For this im.plementation, the 
than 150000 making the checking of 



* "SX- 

r.al 

en. 


al 

a ^ 


■e 

■0 


3 







( ) (0 


implem£ntati:n de?ent)enc:z3 

2.3 TEST MODIFICATIONS 

Modificat::.on3 (see section 1.3) were rec[uired for 23 tests. 

The foll'owing tests were split into two or more tests because this 
implementation did not report the violations of the .Ada Sta.ndard i.-i the way 
expected by the original tests. 

S710Q1Q 3A1001A 3A2001C 3A2001E 3A3006A 

3A30063 3A30073 3A3008A 3A300a3 3A3C13A 


A2C09C, CA20C9F, 3C3204C, and 3C3205D were graded inapplicable by 
valuation Modification as directed by the .AVO. Because t.ce imple.me.ntati t.t 
makes the units with instantiatrons obsolete (see sectrcn 2.2), t.te Class C 
tests were rejected at link time and the Class 3 tests were ccm.piled 
without error. 

CD10C9A, CD1009I, CD1C03A, CD2A2iC, CD2A22J, CD2A24A, and CD2A3lA..C 
(3 tests) use instantiations of the support procedure I.ength_Check, which 
uses Unchecked_Conversion according to the interpretation given in 
'1-00590. The AVO ruled chat this interpretation is not binding under ACVC 
1.11; the tests are ruled to be passed if tney produce Failed messages only 
from the instantiations of ler.gth_Check—i.e., the allowed Report. Failed 
messages have the general form; 

" * CHECK ON REPRESENTATION FOR <TY?E lO FAIIED. 


-4 





CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 


For technrcal and sales information about this Ada implementation, 
contact: 


TeleSoft 

5959 Cornerstone Court West 
San Diego, CA 921219, USA 
(619) 457-2700 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 







PROCESSING INFORMA' 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version of it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC LPro90]. 

For all processed test.'" (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those t.hat were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maxim.um 
precision (item e; see section 2.2), and those t.hat depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those t.hat are listed i.n sections 2.1 and 2.2 (counted i.n items b 
and f, below). 


a) 

Total .Number of .Applicable Testa 

3802 


b) 

Total .Number of Withdrawn Tests 

34 


c) 

Processed Inapplicable Tests 

7 3 


d) 

Non-Proceaaed I/O Tests 

0 


e) 

Non-Proceased Floating-Point 




Precision Testa 

201 


f) 

Total Number of Inapplicable Tests 

274 

(c+d+e) 

g) 

Total Number of Tests for ACVC 1.11 

4170 

(a+b+f) 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above number of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

A m.agnetic tape contai.ning the customized test suite (see section 1.3) was 
tajcen on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

.After the test files were loaded onto the host computer, the full set of 
tests 'were processed by t.ne .Ada implementation. 

Test output, compiler and lin)cer listings, and job logs were captured on a 
■T.agnetic tape and arc.hived at the AVF. The listings examined on-site by 
the validation team were also archived. 

Testing was performed using command scripts provided by t.he customer and 
reviewed by t.he validation team. See Appendix 3 for a complete listing of 
the processing options for this i.mplemientation. It also indicates t.ce 
iefault options. The options invoiced explicitly for validation testr.ng are 
given on the next page, wnich was supplied by the customer. 


3-2 



MAC n 


Compiler Option Information 


B TESTS; 

ada -O D -L <test name> 



option 

description i 


a.da 
-0 D 

<te3t name > 

invoke Ada compiler j 

perform optimizations j 

generate interspersed source-error listing j 
name of Ada source file to be compiled -t 

Non-B Noa-Family TESTS; 

ada-m <main unit> -O D <test name> 


option 

description 


ada 

-m 

<main unit> 
-0 D 

<test name> 

invoke Ada compiler 

produce executable code for <main unit> 
name of main Ada compilation unit 
perform optimizations j 

name of Ada source file to be compiled i 


Non-B Family TESTS; 


ada -0 D 
aid <main 

<test name> 

unit> 

; option 

description 

1 ada 

invoke Ada compiler 

-0 D 

perform optimizations 

<test name> 

name of Ada source file to be compiled 

! aid 

invoke linker 

; <main unit> 

name of mam Ada compilation unit 

LINK: 


aid imain 

unit ■ 

, option 

description 

^ aid 

invoke Linker i 

‘"main inu 

name of mam Ada nripilation unit 




APPENDIX A 


MACRO PARAMETERS 


ThiLS appendix contains the macro parameters used for customizing the ACVC. 
The m.eaning and purpose of these parameters are explained in ;"G89] . The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, ^3 

the value far $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

-Macro Parameter Macro Value 


$MAX_IN_LEN 

200 

— Value of V 

SBIG_ID1 

(1. 

.V-1 => 'A', V => '1' 

$BIG_ID2 

(1. 

.V-1 => 'A' , V => '2' 

$Bia_ID3 

{1 . 

.V/2 => 'A') i '3' S 
(1..V-l-V/2 => 'A') 

SBIG_ID4 

(1. 

.V/2 =•> ' A' ) i '4' 5 
(1..V-l-V/2 »> ' A' ) 

SBIG_INT_LIT 

(1. 

.V-3 =•> ' 0' ) & "298" 

S3IG_REAL_LIT 

(1. 

.V-5 => '0') 4 "690.0 

SBIG_STRING1 

f M f 

& (1..V/2 => 'A') i 

SBIG_STRING2 

f 1* f 

& (1..V-l-V/2 => 'A' 

SBLANKS 

(1. 

. V-20 =•>'') 

SMAX LEN INT BASED 

LITERAL 


"2:" & (1..y-5 => '0') S "11: " 

SMAX_DEN_REAL_3ASED_LITERAL 

"16;" S (1..V-7 => '0') S "E.E: 

SMAX STRING LITERAL & (1..V-2 =» 'A') i 


A-1 






MACRO PARAM 

he following table lista all of the other macro parameters and their 
espective values. 

Macro Parameter Macro Value 


3ACC_SIZE 

32 

3ALIGNMENT 

4 

SCOUNT_LAST 

2_147_483_64 

3DEFAULT_.MEM SIZE 

2147483647 

3DEFAULT_STGR UNIT 

8 

SDEFAULT_SYS_NAME 

TELEGEN2 

3DELTA_DOC 

2#1.0#E-31 

3ENTRY_ADDRESS 

ENT_ADDRESS 

SENTRY_ADDR£S31 

ENT_ADDRESS1 

SENTRY_ADDRES32 

ENT_ADDRESS2 

3FIELD LAST 

1000 


$FILE_TERMINATOR 

$FIXED_NAME 

3FL0AT_NAME 

SFORM_STRING 

SFCRM_3TRING2 

SGREATER THAN DURATION 


/ / 

NO_SUCH_TYPE 

NO_SUCH_TYPE 

(• tl 

"CANNOT RESTRICT 


100 000.0 


FILE CAPACITY" 


$GREATER_THAN_DURATION_BASE_LAST 

131_073.0 

S GRE ATER_T HAN_F LOAT_3AS E_LAS T 

3.40283E+38 

$GREATER_THAN_FLOAT_SAFE_LARGE 

4.25354E+37 

S GREAT ER_T HAN_3 HO RT_F LOAT_S AFE_LARGE 

0.0 

SHIGH_?RICRITY 63 

3ILLEGAL EXTERNAL FILE NAMEl 


A-2 








MACRO ?ARA_M£ 


3ADCHAR*'/% 

s illegal_external_r:le_mame2 

/NCNAME/DIRECTORY 
$ inappropriate line LExNGTH 


$inappropriate_page_length 

-1 


$INCLUDE_PRAGMA1 

SINCLUDE_PRAGMA2 

SINTEGER_FIRST 

SINTEGER_LAST 

SINTEGER_LAST_?L'JS_1 32763 

$INTERFACS_LANGUAGE C 

SLESS_THAN_DURATICN -100_000.0 

S LS S S _T K AN_D URATI ON_3 AS E__F IRS T 

-131 073.0 


PRAGMA INCLUDE ("A28006D1.ADA") 
PRAGMA INCLUDE ("328006D1.ADA") 
-32768 
32767 


SLINE_TERMINATOR 
SLOW PRIORITY 


ASCII.LF 
0 


SMACHINE_CODE_STATEMENT 

MCI'(OP => NOP); 


$MACHINE_CODE_TYPE 

SMANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

SMIN_INT 

SNAME 

$NAME_LI3T 

3NAME_SPECIFICATICN1 
SNAME_SPECIFICATICN2 
SNAME SPECIFICATIONS 


Opcodes 

31 

15 

2147483647 

2147483648 

-2147483648 

NO_3UCH_TYPE_AVAILABLE 

TELEGEN2 

/t.T.p/X2120A 

/tmp/X21203 

/tnip/XSllSA 


A-3 







MACRO PARAMETERS 


$neg_based_:nt 

16#FFFFFFEE# 

$NEW_MEM_SIZE 

2147483647 

$new_sys_name 

TELEGE1J2 

3PAGE_TERMINATGR 

ASCII.FF 

$RECORD_DEFINITrON 

RECORD NULL; END RECORD; 

$RECORD_NAME 

NO_SUCH_MACHINE_CODE_TY? 

$TASK_SIZE 

32 

$TASK_STGRAGE_SIZE 

2048 

STICK 

0.02 

$VARIAaLE_ADDRESS 

VAR_ADDRESS 

SVARIABLE_ADDRESS1 

VAR_ADDRESS1 

SVARIA3I.E_ADDRES32 

VAR_ADDRESS2 


A-4 







APPENDIX B 

COMPILATION SYSTEM AND LINKER OP'"I'^r3 


The compiler and linker options of this Ada implementation, as described in 
this Appendix, are provided by the customer. Unless specifically .noted 
ot.herwise, references in this appendix are to compiler iocum.entation and not 
to this report. 


B-1 




Command Summary 


This chapter p;i- . _nLS ihe commands avaiiable with TeleGenZ. Thev appear in aiphabetical 
order. 


CMD-1854N-Vl,l(MAC-in 


27,IUL91 



Chapter 2 Contents 


2 Command Summary . 2-1 

2.1 ada (Ada Compiler). 2-2 

2.2 aid (.Ada Linker) . 2-18 









ada (Ada Compiler) 


TeieGen2 for Macintosh A/UX 


2.1. ada (Ada Compiler) 

The cuUi command invokes the TeleGend Ada Compiler, Unless ;,()u specm.- 
othenvise. the tront end, middle pass, and code generator ,ire e.vecuteU eacn time 
the compiler is in%'oKed. 

Before viiu can compile, you must make ...re you have access to Te!eGen2 and 
have a working suhiibrarv' and library file available. This was expiameu in the 
"Getting started” section of the Overview. VVe suggest you review that section, 
and then compiie link, and execute the sample program as indicated netore vou 
attempt to compile other programs. 

The svnt.ix of the luia command is shown below. 


ada [<opcion>...] <input> 


<opc ion> One of the options available with the command. Compiler options 

uUl into four categories. 

Library search -l( ibfile, -t( empLib 

Execution/output .Associate object; -Ai ssociate 
Enable debugging: -di ebug 
Abort after errors: -E( rror_abort 
Run front end only; -e( rrors_onJy 
Suppress checks: -i( nhibit 
Keep source: -Kteep_source 
Keep intermediates: -k(eep_Lntermediates 
Compile, then link: -m(ain 
Optimize code; -Olptunize. -Gtraph. -Kniine 
Update library for multiple files: -ui pdate_invG 
Include execution profile; -x( ecution_profile 

Listing Output source plus errors: -Li ist 

Output errors: -F( ile_only_errs. -j(oin 

Error context; -Cfontext 

Output assembly: -S("asm_ListLng” 

Other -q(uiet, -V(space_size. -vterbose 


C.MD-1854N-Vl.l(MAC-n) rjLL91 


Command Summary 


(Ada Compiler) ada 


<inpuc> The Ada s(iurce t'ilei s i te he cc-mpiied 1 ; m.iv he 

• One or more Ada source tiles, tor example. 

/user/john/exarr.ple 
?rog_A.text 
ciosrc/calc_nieni. ada 
calcio.ada siyprog.ada 
* ada 


It more :han one tile is specitieu. rhe names must he separated 
hv .1 space. 


• .A tile containing names ot tiles to he compiled. Such a tile 
must have the e.xtension ''.ilt"; each name in the tile must he on 
.1 separate line. You can find details tor using input-list tiles in 
the L'ser Guide portion otyour TeieGenZ documentation set, 

• .-\ combination ot the tibove. 


Compiler defsults. Compiler defaults are set tor ycur convenience. In most 
cases \ou '.vill not need to use addiuonai options; a simple "ada < input>" is 
sutt'icient. However, options are included to provide added tlexibilitv. You can. 
tor example, have the compiler quickly check the source tor syntax and semantic 
errors hut not produce object code [-e( rrors_oniv] or you can compile, bind, and 
link ,1 main program with a single compiler invocation [-mi am]. Other options are 
prox ided tor other purpo.ses. 

Tlie options .ivailable with thecictri command, and :he relationships among them, 
.ire illustrated in the tollowing tigure. 


:'.li idti 


’.n 


(;MD-1S54N.V1,i,\1a(-IIi 



ada (Ada Compiler) 


TeleGen2 for Macintosh A/UX 


i aaa 


-Icbtile ■:rile> -'(emplib <s'dblib 

:- 1 

A (space size tWW 
T 

-VI erbose 


-e( rrors^oiaiy ^ compile :o ob\eci~^ 

-A( sscciate < tile > 

I 

-d(ebug 

I 

-i(nhibit < suboption >[,.,] 

I 

- ^ ^-' 

do not optimize j -0( ptimize < suboption > [ 

! I 

j -G( raph 

I 

-[inline list 'filo 


-S('‘asm listing” <subcption> 

~ I 

-u(pdate_invoke 

I 

•x(ecution_prol'iie 


•Qoritext I 
-E(rror abort 999 


-L( ist 


-Ffile onJv errs 


-j(otn 

I 

-K( eep_source 

I 

-kieep interme'^ia"=s 

” I 

-m(ain <unit> 

I 

-q( diet 


o aiput; 


CMD-18S4N-V1.1(MaC-II) 


1 

1 


r.JLL9l 





Command Summary 


(Ada Compiler) ada 


Below are some basic examples that show how the command is used. 

!. t No options, The following command compiles the tile ^^Linipie.Luia. 
producing object code that is .stored in the workine suniibraPv- 

ada sample.ada 

In this example, the working sublibrary is the first .suniibrap.' .isted in 
lihLst.alb. No listings are produced, no progress messattes are output, no 
intermediate forms are retained, and so forth. In other words, it's the 
simplest example of compilation. 

2. The following command compiles sample.ada as above, but because we 
used the -L option, a listing file, sample.l, is output to the working 
director)'. The listing file shows the source code, errors i if anv u the 
number of lines compiled, plus other information. 

ada -L -v sample.ada 

Progress messages are output during compilation because we used the -v 
option. 

The options available with ada appear below in alphabetical order. 

-A(ssociate 

The -A{ssociate option is used to associate a foreign object with an Ada 
compilation unit. The format of the option is 

-A <file> 

where < file > is the name of the foreign object file. The object is assumed to 
be in the working sublibrary. Using the -.A(ssociate option is meaningful only 
when the object is referenced by a pragma Interface within the fUe being 
compiled. For example, if you use 

ada -A new.o calc.ada 

the foreign object new.o is associated with the Ada unit in calc.ada l let’s say 
it’s unit Calc). Whenever Calc is bound, the foreign object new.o will also be 
bound. 

The option is particularly useful for associating foreign objects with a main 
program. For example, instead of having to explicitly name the foreign object 
during linking, like this: 

aid -V -p 'gec_arg.o' show_argumenr 
you can associate the object during compilation, like this: 
ada -V -A get_arg.o show_arg.ada 

If more than one object needs to be associated with a given file, put the 
objects in a UTvIX archive ( < file>.a) or do a partial link : Id -rl of the 
objects. _ 


C.VD-1854.N-V1.1I M.AC-in 27JUL91 


2-5 



ada (Ada Compiler) 


TeleGen2 for Macintosh A/UX 


-C(ontext 

Wlien an error message is sent lo stderr. it is helpful to see the lines of the 
source program that surround the line containing the error These lines 
provide a context for the error in the source program and help to clarify the 
nature of the error. The -C option controls the number of source lines that 
surround the error. The format of the option is 

-C <n> 

where < n> is the number of source context lines output for each error. Tlie 
default for <n> is 1. This parameter specifies the total number .if lines 
output for each error (including the source line that contains the error). The 
first context line is the one immediately before the line in error; other context 
lines are distributed before and after the line in error. 


-d(ebug 

To use the debugger, you must compile and link with the -dlebug option. 

This is to make sure that a link map and debugging information are put in the 
.Ada librars' for use by the debugger. Using -d( ebug ensures that the 
intermediate forms needed for debugging and the debugging information for 
secondary' units are not deleted. 

Performance note; 

While the compilation time overhead generated by the use of -d(ebug is 
minimal, retaining this optional information in the Ada library increases 
the space overhead. To see if a unit has been compiled with the -d(ebug 
option, use the als command with the -X(tended option. Debugger 
information exists for the unit if the “dbg_info” attribute appears in the 
listing for that unit. 


-E(rror_abort 

The -E(rror_abort option allows you to set the maximum number of errors 
(syntax errors and semantic errors) that the compiler can encounter before it 
aborts. This option can be used with all other compiler options. 

The format of the option is 
-E <n> 

where <n> is the maximum number of errors allowed (combined counts of 
syntax errors and semantic errors). The default is 999; the minimum is 1. If 
the number of errors becomes too great during a compilation, you may want 
to abort the compilation by typmg <ctrl>-C. 


-e(rrors_only 

The -e( rrors_only option instructs the compiler to perform syntactic and 
semantic analysis of the source program without generating Low Form and 
object code. That is. It calls the front end only, not the middle pass and code 


2-6 


CMD-1854N-V1.1(MAC-II) :7JUL91 





Command Summary 


(Ada Compiler) ada 


generator: This means that only front end errors are detected and that onlv 
the High Form intermediates are generated. Unless vou use the 
-k{ eep_intermediates option along with -e. the High Form intermediates are 
deleted at the end of compilation; in other words, the library is not updated. 

The -e( rrors_only option is typically used during early code development 
where execution is not required and speed of compilation is important. Since 
only the front end of the compiler is invoked when -e is used, -e is 
incompatible with ada options that require processing beyond the front end 
phase of compilation. Such options include, for example. -Ofptimize and 
-dlebug. If -e is not used (the default situation), the source is compiled to 
object code (providing no errors are found). 

-F(ile_only_errs 

The -F option is used to produce a listing containing only the errors 
generated during compilation; source is not included. The output Is sent to 
<file>.l. where <file> is the base name of the input f He. If input to the ada 
command is an input-list file (< file > ilf), a separate Listing file is generated 
for each source file Listed in the input file. Each resulting listing file has the 
same name as the parent file, except that the extension ••.!” is appended. -F 
is incompatible with -L. 


-G(raph 

The -Gfraph option is valid only with -0(ptimize. 

This option generates a call graph for the unit being optimized. The graph is 
a file containing a textual representation of the call graph for the unit being 
optimized. For each subprogram, a List is generated that shows every 
subprogram called by that subprogram. By default, no graph is generated. 

The graph is output to a file named < urat > .grf. where < unit > is the name of 
the unit being optimized. The structure and interpretation of call graphs is 
addressed in the Global Optimizer chapter of the TeleGen2 User Guide. 

-I(nlinejist 

The -I( nline_list option is valid only with -0(ptimize. 

This option allows you to inline subprograms selectively. The format of the 
option is 

-I <file> 

where < file> is a file that contains subprogram names. The file must contain 
subprogram names in a specific form as noted below. 


C.MD-18S4N-Vl.l(.MAC-n) 27JUL91 


1-1 





ada (Ada Compiler) 


TeleGen2 for Macintosh A/UX 


— .All visible-subprogram names, each separated by a comma or line feed :lien 

— \ semicolon or a blank line then 

— .All hidden-subprogram names, each separated by a comma or line feed 

Tabs and comments are not allowed. If there is no semicolon or blank line, 
the subprograms are considered to be visible. If you have no visible units to 
inline, use a semicolon to mark the beginning of the hidden-subprogram list. 

Inline lists are commonly set up with one name per line. 

Each subprogram name in the list is in the form shown below. 

[<unit>.]<subprogram> 

The unit name indicates the location of the subprogram declaration, not the 
location of its body. If a unit name is not supplied, any matching subprogram 
name (regardless of the location of its declaration) will be affected. For 
example, the list 

test; testing.test 

indicates that ail subprograms named Test should be marked for inlining 
e.xcept for those declared in either the specification or the body of the 
compilation unit Testing. 

The first list of subprograms will be processed as if there had been a pragma 
Inline in the source for them. The second list of subprograms wUl negate any 
Inline pragmas (including those applied by the first list) and will also prevent 
any Listed subprograms from being automatically inlined (see A/a suboption 
pair, in the discussion of -O(ptimize). 

The ability to exempt otherwise qualified subprograms from automatic 
inlining gives you greater control over optimization. For ©cample, a large 
procedure called from only one place within a case statement might overflow 
the branch offset Limitation if it were inlined automatically. Including that 
subprogram’s name in the second list in the List file prevents the problem and 
still allows other subprograms to be inlined. 

Since the Low Form contains no generic templates, pragma Inline must 
appear in the source in order to affect ail instantiations. However, specific 
instantiations can be affected by the inline lists. The processing of the names 
is case insensitive. 

If you do not use -/, the optimizer automatically inlines any subprogram that 
is: (1) called from only one place. (2) considered small by the optimizer, or 
(3) tail recursive. Such optimizations are explained in detail in the Global 
Optimizer chapter of the TeieGen2 User Guide. 


:-8 


CMD-1854N-Vl.l(MAC.n) 27JUL91 






Command Summary 


(Ada Compiler) ada 


-i(nhibit 

The -i(nhibit option allows you to suppress, within the generated object code, 
certain run-time checks, source line references, and subprogram name 
information. TTie -i( nhibit option is equivalent to adding pragma Suppress to 
the beginning of the declarative part of each compilation unit in a file. 

The format of the option is 
-i <suboption>[...] 

where < suboption > is one or more of the single-letter suboptions listed 
below. When more than one suboption is used, the suboptions appear 
together with no separators; for example, “-i Inc". 

I [line_info] Suppress source line inl'ormation in object code. 

By default, the compiler stores source Line information in the 
object code. However, this introduces an overhead of 6 byies for 
each line of source that causes code to be generated. Thus, a 
1000-line package may have up to 6000 bytes of source line 
information. 

When source line information is suppressed, exception tracebacks 
indicate the offset of the object code at which the exception occurs 
instead of the source line number. 

n [name_info] Suppress subprogram name information in object 
code. 

By default, the compiler stores subprogram name information in 
object code. For one compilation unit, the extra overhead (in 
bytes) for subprogram name information is the total length of all 
subprogram names in the unit (including middle pass-generated 
subprograms), plus the length of the compilation unit name. For 
space-critical applications, this extra space may be unacceptable. 

When subprogram name information is suppressed, the traceback 
indicates the offsets of the subprogram calls in the calling chain 
instead of the subprogram names. 

c [checks] Suppress run-time checks — elaboration, overflow, 
storage access, discriminant, division, index, length, and range 
checks. 

While run-time checks are vital during development and are an 
important asset of the language, they introduce a substantial 
overhead. This overhead may be prohibitive in time-critical 
applications. 


:-9 


CMD-1854N-V1.1(VUC-M) 


:7JLL91 



ada (Ada Compiler) 


TeleGen2 for Macintosh A/UX 


a [alJ] Suppress source line information, subprogram name 

information, and run-time checks. In other words, a ( = inhibit all) 
is equivalent to Inc. 

Below is a command that tells the compiler to inhibit the generation of 
source line information and run-time checks in the object code of the units in 
sample.ada. 

ada -V -i Ic sample.ada 


-j(oin 

The -j(oin option writes errors, warning messages, and information messages 
th; ■ are generated during compilation back into the source fUe. Such errors 
and messages appear in the file as Ada comments. The comments thus 
generated can help facilitate debugging and commenting your code. Unlike 
-L, -S, and -F. the -j option does not produce a separate listing, since the 
information generated is written into the source file. 


-K(eep_source 

This option tells the compOer to take the source file and store it in the Ada 
library. When you need to retrieve your source file later, use the axt 
command. 

-k(eepjntermediates 

The -k(eep_intermediates option allows you to retain certain intermediate 
code forms that the compiler otherwise discards. 

By default, the compiler deletes the High Form and Low Form intermediate 
representations of all compiled secondary units from the working sublibrary. 
Deletion of these intermediate forms can significantly decrease the size of 
sublibraries — typically 50% to 80% for multi-unit programs. 

Some of the information within the intermediate forms may be required later, 
which is the reason -k(eep intermediates is available with ada. For example. 
High Form is required if the unit is to be referenced by the Ada cross- 
referencer (axr). In addition, both the debugger and optimizer require 
information that is saved within intermediate forms. 

To verify that a unit has been compiled with the -kfeep_intermediates option 
(has not been “squeezed”), use the als command with the -.Xftended option. 
If the unit has been compiled with -k. the Listing will show the attributes 
high_form and low_form for the unit. 


2-10 


CMD-1854N-Vl.l(MAC-in 27JUL91 





Command Summary 


(Ada Compiler) ada 


-L(ist 

The -L(ist option instructs the compiler to output a listing of the source being 
compiled, interspersed with error information (if any). The listing is output 
to <flle>.l, where <file> is the name of the source file ( minus the 
extension). If <file>.l already exists, it is overwritten. 

If input to the ada command is an input-list file ( <file>.ilt'), a separate listing 
file is generated for each source file Listed in the input file. Each resulting 
listing file has the same name as the parent file, except that the extension ‘‘.r’ 
is appended. Errors are interspersed with the listing. If you do not use-L 
(the default situation), errors are sent to stdout only; no listing is produced. 

-L is incompatible with -F. 

-i(ibfile 

The -l(ibfile option is one of the two library-search options; the other is 
-t(emplib. Both of these options allow you to specify the name of a library 
file other than the default, liblst.alb. The two options are mutually exclusive. 

The format of the -l(ibfile option is 
-1 <fiie> 

where <file> is the name of a library file, which contains a List of 
sublibraries and optional comments. The file must have the extension “.alb'’. 
The first sublibrary is always the working sublibrary; the last sublibrary is 
generally the basic run-time sublibrary (rt.sub). Note that comments may be 
included in a h'brary file and that each sublibrary listed must have the 
e.xtension ".sub”. For example, an alternate Library file, worklib.aib. might 
contain the following Lines. 

Name: mywork.sub 
-- For the Remco Database project 
Name: caicproj/calclib.sub 

Name: $TELEGEN2/lib/rt.sub 

Then to use worklib.aib instead of the default, liblsialb. you would use: 

-1 worklib.aib 


-m(ain 

This option tells the compiler that the unit specified with the option is to be 
used as a main program. .After all files named in the input specification have 
been compiled, the compiler invokes the prelinker (binder) and the native 
linker to bind and Link the program with its extended family. An executable 
file named < unit > is left in the current directory. The linker may also be 
invoked directly by the user with the old command. 

TLn. format of the option is 

-m <unic> — 


C.MD-1854i\-V1.1(.VLAC-II) 27JLL91 


Ml 




ada (Ada Compiler) 


TeleGen2 for Macintosh A/UX 


where < unit> is the name ot the main unit for the program. If the main unit 
has already been compiled, make sure that the body of the main unit is in the 
current working directory. 

Note: You may specify options that are specific to the binder/linker on the 
ada command line if you use the -mfain option. In other words, if 
you use -m, you may also use -o. -X. or any of the other aid 
options. For example, the command 

ada -m welcome -o new sample.ada 

instructs the compiler to compile the Ada source {'Aq sample.ada, 
which contains the main program unit Welcome. After compiiation, 
the compiler calls the linker, passing to it the -o option with its 
arguments. The Linker produces an executable version of the unit, 
placing it in file new as requested by the -o option. 

-0(ptimize 

The optimizer operates on Low Form, the intermediate code representation 
that is output by the middle pass of the compiler. 

Wlien used on the ada command Lme, -Ofptimize causes the compiler to 
invoke the global optimizer during compilation; this optimizes the Low Form 
generated by the middle pass for the unit being compiled. The code 
generator takes the optimized Low Form as input and produces more 
efficient object code. 

Note: We recommend that you do not attempt to compile with optimization 
until the code being compiled has been fully debugged and tested, 
because using the optimizer increases compilation time. Please refer 
to the TeleGenZ User Guide for information on optimizing 
strategies. 

The format of the option is 
-0 <stiboptions> 

where < suboptions > is a string composed of one or more of the 
single-letter suboptions listed below. <suboptions > is required. 

The suboptions may appear in any order (later suboptions supersede 
earlier suboptions). The suboption string must not contain any 
characters (including spaces or tabs) that are not valid suboptions. 
Examples of valid suboptions are: 

-0 pRiA 
-0 pa 


2 - 1 ’ 


C.MD-1854N-V1.1 (\UC-II) 27JL1,91 






Command Summary 


(Ada Compiler) ada 


Table of optimizer suboptions 


p 

[optimize with parallel tasks] Guarantees that none of subprograms j 
being optimized will be called from parallel tasks. P allows data i 

mapping optimizations to be made that could not be made if multiple 
instances of a subprogram were active at the same time. 

p 

[optimize without parallel tasks] Indicates that one or more of the 
subprograms being optimized might be called from parallel tasks. 

This is a "safe” suboption. DEFAULT 

R 

[optimize with e.xtemal recursion] Guarantees that no interior 
subprogram will be called recursively by a subprogram exterior to the 
unit/collection being optimized. Subprograms may call themselves or 
be called recursively by other subprograms interior to the 
unit/collection being optimized. 

r 

[optimize without external recursion] Indicates that one or more of 
the subprograms interior to the unit/collection being optimized could 
be called recursively by an exterior subprogram. This is a “safe” 
suboption. DEFAULT 

I 

[enable inline expansion of subprograms] Enables mline expansion of 
those subprograms marked with an Inline pragma or introduced by 
the compiler. DEFAULT 

i 

[disable inline expansion] Disables all inlining. 

A 

[enable automatic inline expansion] If the I suboption is also in effect 
(I is the default), A enables automatic inline expansion of any 
subprogram not marked for inlining; that is. any subprogram that is 
(1) called from only one place, (2) considered to be small by the 
optimizer, or (3) tail recursive. If i is used as well, inlining is 
prohibited and A has no effect. DEFAULT 

a 

[disable automatic inline expansion] Disables automatic inlining. If i 
is used as weU, inlining is prohibited and a has no effect. 

M 

[perform maximum optimization] Specifies the maximum level of 
optimization; it is equivalent to “PRIA”. This suboption assumes that 
the program has no subprograms that are called recursively or by 
parallel tasks. 

D 

[pertbrm safe optimizations] Specifies the default “safe” level of 
optimization; it is equivalent to “prlA”. It represents a combination of 
optimizations that is safe for all compilation units, including those with 
subprograms that are called recursively or by parallel tasks. 


:-13 


CMD-1854N-Vl.l(MAC-n) :7.JUL91 




ada (Ada Compiler) 


TeleGen2 for Macintosh A/UX 


Below are some examples showing the use ot cuia with -Of ptimize. 

1. The command below compiles and optimizes a single unit in file 
optimize.ada. 

ada -0 D -v optimize.ada 

It uses 'safe'’ optimization (D), since the unit may have subprograms 
called recursively or by parallel tasks. 

2. The command below compiles and optimizes individually a series of 
units listed m the input list protype!.ilf. 

ada -0 Pria -v protypel.ilf 

This command tells the compiler that the units have subprograms 
called recursively (r) but none caiied by parallel tasks (P). It also tells 
the compiler that pragma Inline marks subprograms to be inlined (I), 
but that automatic inlining is not desired (a). 

3. The command below requests maximum optimization (M), because the 
one-unit program in alpha sort.ada has no subprograms called 
recursively or by parallel tasks. 

ada -0 M -v alpha_^sort. ada 


-q(uiet 

By default, information messages are output even if the -v(erbose option is 
not used. The -q(uiet option allows you to suppress such messages. Using 
-vferbose alone gives error messages, banners, and information messages. 
Using -v(erbose with -q(uiet gives error messages and banners, but 
suppresses information messages. The option is particularly useful during 
optimization, when large numbers of information messages are likely to be 
output. 


-S(“asmjisting” 

The -5 option instructs the compiler to generate an assembly listing. The 
Listings are put in the working directory. If more than one unit is in the file, 
separate listings are generated for each unit. The format of the option is 

-S <suboption> 

where < suboption > is either “e” or ‘‘a". 

e [extended] Generate a paginated, extended assembly listing that 
includes code offsets and object code. The assembly file is named 
<unit>.e if it is a body or <unlt>_e if it is a specification. 

a [assembly] Generate a listing that can later be used as input to an 
assembler. Pne assembly file is named < unit> s if it is £ body or 


:-u 


C.MD-1854N-V1.1(.VUC-II) 27,JLX9l 



Command Summary 


(Ada Compiler) ada 


<unit>_.s if it is a specification. 

The listing generated consists of assembly code intermixed with source code 
as comments. If input to the ada command is an input-list file ( < file> .ilf). a 
separate assembly listing file is generated for each unit contained in each 
source file listed in the input file. Since -S is also an aid option, if you use -5 
along with -m(ain, an assembly listing is also output during the binding 
process. 


-t(emplib 

The -t(emplib option is one of the two library-search options; the other is 
-l(ibfile. Both of these options allow you to select a set of sublibraries for use 
during the time in which the command is being executed. The two options 
are mutually exclusive. 

The format of the -t( emplib option is 
-c <sublib>[,...] 

where <sublib> is the name of a sublibrary. The name must include the 
■■.sub" extension; it must also be prefaced by a path name if the sublibrary is 
in a directory other than the current directory. The first sublibrary listed is 
the working sublibrary by definition. If more than one sublibrary is listed, the 
names must be separated by a comma. Single or double quotes may be used 
as delimiters. 

The argument string of the -t( emplib option is logically equivalent to the 
names of the sublibraries listed in a library file. So instead of using 

-1 worklib.alb 

you could use -tfempUb and specify the names of the sublibraries listed in 
worklib.alb (separated by commas) as the argument string. 


-u(pdateJnvoke 

The -u(pdate_invoke (short for "-ul pdate_after_invocation’’) option tells the 
compiler to update the working sublibrary only after all files submitted in that 
invocation of ada have compiled successfully. The option is therefore useful 
only when compiling multiple source files. 

If the compiler encounters an error while -u is in effect, the hbrary is not 
updated, even for files that compile successfully. Furthermore, all source 
files that follow the file in error are compiled for syntactic and semantic 
errors only. 

If vou do not use the -u(pdate_lib option, the library is updated each time one 
of the files submitted has compiled successfully. In other words, if the 
compiler encounters an error in any unit within a single source file. aU 
changes to the working sublibrary for the erroneous unit and for all other 


CMD-1854N-Vl.l(MAC-ir) 27.JLL91 


2-15 




ada (Ada Compiler) 


TeleGen2 for Macintosh A/UX 


units in that tile are discarded. Houever. li’nrarv updates tor units in pre'. ious 
or remaining source tiles are unarfected. 


Since using -u means that the libran.' is updated onlv once, a successful 
compilation is faster with -u than without it. On the other hand, if the 
compiler finds an error when you've u.sed -u. the library is not updated even 
when the other source files compile successfully. The implication is that it is 
better to avoid using -u unless your files are likelv to be error free. 


-V(space_size 

The -Vi space_size option allows you to specify- the size of the working space 
for TeleGenZ components that operate on library contents. The format of 
the option is 

-V <value> 

where the option parameter is specified in l-Kbyte blocks; it must be an 
integer value. The default value is 4000. The upper limit is 2,097.152. 
Larger values generally improve performance but increase physical memory 
requirements. Please read the section on adjusting the size of the vinual 
space in the Programming Guide chapter of the Te!eGen2 Programmer's 
Reference Manual for more information. 


-v(erbose 

The -vferbose option is used to display messages that inform you of the 
progress of the command’s execution, ‘'■■'''.h s .:re p";fa:.’d by a 

banner that identifies the component being executed. If -v is not used, the 
banner and progress messages are not output. However, information 
messages such as those output by the optimizer may still be output whether 
-vferbose is used or not. 


-x(ecution_profile 

The -x(ecution_profile option is used to obtain a profile of how a program 
executes. The option is available with ada. aid. and aopt. Using -x with ada 
or aopt causes the code generator to insert special run-time code into the 
generated object. Using -x with aid causes the binder to link in the run-time 
support routines that will be needed during execution. 

Important: If you have compiled any code in a program with the 

-x(ecution_profiie option, you must also use -x when you bind 
and link the program. 

.Also make sure that the PROFILING environment variable is 
set before you attempt to e.x<;cute a program. If the variable is 
not set in one of your log-in scripts, type 

secenv PROFILING on 


2-16 


CMD-l,S54N-Vl.l(\I.AC-n) 27JLL91 


Command Summary 


(Ada Compiler) ada 


before you execute a pr<niied prcgram. Refer :o rhe Protiier 
chapter of the TeleGenZ L ver Guide for mere in;.'r.m..;:.en n 
profiling. 


;-17 


CMD-lS54N-Vf.l(M..\(Mfi 2-,n L9l 



aid (Ada Linker) 


TeleGen2 for Macintosh A/UX 


2.2. aid (Ada Linker) 

The^i/u' commanu invokes the TeleGen2 Ada Linker. The iiriKer taKe.s the -oicc: 
I of a main program i that is produced hy the compiler and produces .i I, NIX 
e.xecutable module. To produce e.xecutable code, the linker : i generates 
elaboration code and a link script (this is called "binding" or "nreiinsang ' tr.e.i 
(2) calls the L'M.X link editor [Id] to complete the linking process, i "Linker" 
refers to the TeleGend .Ada Linker; "link editor" refers to the LT-dX ItN; editor 

The linker is invoked by the aid command; it can also be i.-”. 'keo '.vnh the -mi .nn 
option of the ada command. In the latter case the compiler passes appropriate 
options to the linker to direct its operation. The syntax or the command is ^nown 
below. 


aid [<opt;ion>. . . ] unit ! 

__i 


<option> One of the options available with the command. 

<unit> The name of the main unit of the .Ada program to ne linked. 

Important: NAlten using the old command, the body of the main 

unit to be prelinked must be in the working 
sublibrary. 

In the simplest case, the aid command takes one argument — the name ot the 
main unit of the Ada program structure that is to be linked — and produces one 
output file — the executable file produced by the Linking process. The executable 
file is placed in the current working directory, unde.' the name of the main unit 
used as the argument to aid. For System V versions ot L MX. ;f tne name is 
longer than 14 characters, it is truncated. 

The options available with the command, and the relationships among them, are 
shown in the figure below. 


:-i8 


C M D-1S54N-V1.11 M.VC-111 T.Jl L91 





Command Summaf 7 


(Ada Linker) aid 


[TUd" 

'—^ 

I r 1 ^ I 

-kibfile <tile> -Kemplin <suhlib>r,...] 


i 

-V(space_size 4000 
T 

-v( erbose 
I 

-b( ind_oniy 
I 

-n(on-Ada 

I 

-o(utput <t'i]e> 

I 

-p( ass_objects ' < string >' 

. . I 

-S( ■■asm_Listing'' < suboption > 
I 

-Tfraceback 15 

I 

-wC'timesiice" 0 
I 

-X(ception_shcw 

I 

-x(ecution_profiJe 
-Y(“task_staclc” 10240 

I 

-yc'stack guard” 1024 
<unit> 


Below are some basic examples that show how the command is used. 

1. (No options) The following command links the object modules of ail the 
units in the extended family of the main unit Welcome, producing an 
executable file, welcome, in the working directory. 

aid welcome 

2. The following command links the main unit Welcome, producing an 
executable file, new, in the working directory. 

aid -S a -V -o new welcome 


.An assembly listing file, new _ M.s. is produced as well. Progress 

messages are output as the command executes. 

The options available with aid appear below in alphabetical order. 


C.MD-1854N-V1.1(.\1.XC-II) :7JLX91 


:-i9 






aid (Ada Linker) 


TeleGen2 for Macintosh A/UX 


-b(ind_only 

The -b( ind_oniy option causes the linker to quit alter it has created the 
elaboration code and the linking order, but before it invokes the UNIX link 
editor. Using this option allows you to edit the linking order for special 
applications and then invoke the link editor directly. 

The linking order is contained in a link script, which is an e.xecutable script 
that invokes the link editor with the appropriate options and arguments. The 
name of the script produced is <unit>.lnk. which is placed in the working 
directory. To complete the link process, enter •'<unit>.Ink". The name of 

the file containing the elaboration code is < unit >_Vl.o. which is placed in 

the object directory of the working sublibrary. 

For System V versions of UNUX the file names generated as a result of 
linking are created by appending the 3-letter e.'aension to the unit name and 
truncating the result to 14 characters. 


-I(ibfjle 

The -1( ibfile option is one of the two library-search options: the other is 
-t( emplib. Both of these options allow you to specify the name of a library 
file other than the default. Ublstalb. The two options are mutually exclusive. 

The format of the -1( ibfile option is 
-1 <file> 

where < file > is the name of a library file, which contains a list of 
sublibraries and optional comments. The file must have the extension ".alb”. 
The first subLibrary is always the working sublibrary; the last subLibrary is 
generally the basic run-time sublibrary (rt.sub). Note that comments may be 
included in a library file and that each sublibrary Listed must have the 
extension ".sub”. For example, an alternate Library file, worklib.alb. might 
contain the following Lines. 

Name; myvork.sub 
-- For the Remco Database project 
Name: calcproj/caiclib.sub 

Name: $TELEGEN2/lib/rt.sub 

Then to use worklih.alb instead of the default, liblst.alb. you would use; 

-1 worklib.alb 


-n(on_Ada 

The -n( on_.Ada option teUs the binder to make the elaboration procedure 
accessible from code written in another language. With -n. The linker 
generates elaboration code and produces a link scriot. <unit> Ink. but does 
not call the link editor. The Link script can be edited and submitted to the 
link editor, _ 


:-:o 


CMD-1854N-Vl.l(\UC-in :7JLL91 





Command Summary 


(Ada Linker) aid 


The link script produced'.vith the -n(on-Ada option difters from that 

produced by the -b( md_only option in that the former includes the 

.env Jbreiipi module instead of env Both modules are in STELEGEN'2,'lib. 


-o(utput 

The -o( utput option allows you to specify the name of the output file 
produced by the linker. The format of the option is 

-o <fiie> 

where < file > is the name of the output file. For example, the command 
below causes the linker to put the executable module in the file “yorkshire” 
rather than "main". 

aid -o yorkshire main 


-p(ass_objects 

The -p( ass_objects option allows you to pass a string of arguments directly to 
the LTUX link editor. The format of the option is 

-p '<string>' 

where < string > is a string of characters that the UNIX link editor. Id, will 
recognize. The string passed to Id may be either objects (e.g., ’cosine.o’) or 
options (e.g.. '-l<lib> -r*). The string must be enclosed in single quotes. For 
example, the command 

aid -p 'cosine.o /usr/lib/libm.a' main 

causes the link editor to link the object file cosine.o and to search the Ubrary 
fusrllib/libm.a for unresolved symbol references. 

Remember that the UNIX link editor searches a library exactly once at the 
point it is encountered in the argument list, so references to routines in 
libraries must occur before the library is searched. That is, files that include 
references to library routines must appear before the corresponding libraries 
in the argument list. Objects and archives added with the -p option will 
appear in the linking order after Ada object modules and run-time support 
libraries, but before the standard C library (/lib/libc.a). This library is 
always the last element of the linking order. 

You can also use -p(ass objects to specify the link editor's -I option, which 
causes the link editor to search libraries whose names have the form 
■•/lib/libm/ne.a’’ or "/usr/lib/Libnn/ne.a'’. For example, the command below 
causes the link editor to search the directories /lib and /usrflib (in that 
order) for file libxyz.a. 

aid -p '-Ixyz' 

("-I" is the Id option; "xyz" is the option's argument.) 


If vou use -p but do not invoke the link editor (by using -b( ind_only), the 




C.MD-1854N-V1.1(\UC-II) 27JUL91 




aid (Ada Linker) 


TeleGen2 for Macintosh A/UX 


binding information specified with -p is included in the link script. 


-S(“asmjisting” 

The -5 option is used to output an assembly listing from the elaboration 
process. The format of the option is 

-S <subopcion> 

where < suboption > is either “e'’or “a". 

e [e.xtended] Generate a paginated, e.xtended as.sembly listing that 
includes code offsets and object code. The assembly file is named 
<unit>_M.e. 

a [assembly] Generate a listing that can later be used as input to an 
assembler. The assembly file is named < unit>_.VI.s. 

-T(raceback 

The -T(raceback option allows you to specify the callback level for tracing a 
run-time exception that is not handled by an exception handler. The format 
of the option is 

-T <n> 

where < n > is the number of levels in the traceback call chain. The default is 
15. 

-t(emplib 

The -tfemplib option is one of the two Library-search options; the other is 
-Ifibfile. Both of these options allow you to select a set of subhbraries for use 
during the time in which the command is being executed. The two options 
are mutually exclusive. 

The format of the -t(empLib option is 
-c <sublib>[,...] 

where <sublib> is the name of a sublibrary. The name must include the 
■■.sub ’ extension; it must also be prefaced by a path name if the sublibrary is 
in a directory other than the current directory. The first sublibrary listed is 
the working sublibrary by definition. If more than one subhbrary is listed, the 
names must be separated by a comma. Single or double quotes may be used 
as delimiters. 

The argument string of the -t( emplib option is logically equivalent to the 
names of the sublibraries listed in a library file. So instead of using 

-L worklib.alb 

you could use -t( emplib and specify’ the names of the sublibraries listed in 
worklib.alb (separated by commas) as the argument string. 


C.MD-1854N-Vl.l(M.4C-n) 27JLL91 



Command Summary 


(Ada Linker) aid 


-w(“timeslice” 

The -w option aiJows you to specify the slice of time, in milliseconds, in which 
a task is allowed to e.xecute before the run time switches control to the first 
ready task having equal priority. This timeslicing activity allows for periodic 
round-robin scheduling among equal-priority tasks. 

The format of the option is 
-w <value> 

where <value> is the timeslice quantum in milliseconds. If the value 
specified is 15. tor example, the run time will check each 15 milliseconds to 
see If any tasks with a priority equal to that of the executing task are available 
to execute. If there are, the run time effects a context switch to the first such 
task. 

The UNIX virtual time alarm signal SIGVTALRM is used to implement the 
-w option. The value of -w is passed to the LTUX run time, which then sets 
the UTsIX interval timer. Note that while aid will accept values beteen 0 and 
2**31-1, not all of these values will be meaningful in the LTUX environment. 
For details on the LTsIX timing mechanism, please refer to the appropriate 
UNIX documentation. 

The default is 0 (i.e., timeslicing is disabled). Please note that no run-time 
overhead is incurred when timeslicing is disabled. 


-V(space_size 

The -V(space_size option allows you to specify the size of the working space 
for TeleGenZ components that operate on library contents. The format of 
the option is 

-V <value> 

where the option parameter is specified in 1-Kbyte blocks; it must be an 
integer value. The default value is 4000. The upper limit is 2,097,152. 
Larger values generally improve performance but increase physical memory 
requirements. Please read the section on adjusting the size of the vinual 
space in the Programming Guide chapter of the TeleGen2 Programmer’s 
Reference Manual for more information. 


-v(erbose 

The -vferbose option is used to display messages that inform you of the 
progress of the command’s execution. Such messages are prefaced by a 
banner that identifies the component being executed. If -v is not used, the 
banner and progress messages are not output. 


C.V!D-18S4N-Vl.l(M,\C-n) 27JLL91 


2-23 





aid (Ada Linker) 


TeleGen2 for Macintosh A/UX 


-X(ception_show 

By default, unhandled exceptions that occur in tasks are not reported; 
instead, the task terminates silently. The -X option allows you to specifv that 
such exceptions are to be reported. The output is similar to that displayed 
when an unhandled exception occurs in a main program. 

-x(ecution_profile 

The -x(ecution_profiie option is used to obtain a profile of how a program 
executes. The option is available with ada, aid. and aopt. Using -x with ada 
or aopt causes the code generator to insert special run-time code into the 
generated object. Using -x with aid causes the binder to link in the run-time 
support routines that will be needed during execution. These run-time 
support routines record the profiling data in memory during program 
execution and then write the data to two host files, profile.out and profile.dic. 
as part of program termination. The files can then be used to produce a 
listing that shows how the program executes. 

Important: If you have compiled any code in a program with the 

-xfecutionj3rofile option, you must also use -x when you bind 
and Link the program. 

Also make sure that the PROFILING environment variable is 
set before you attempt to execute a program. If the variable is 
not set in one of your log-in scripts, type 

setenv PROFILING on 

before you execute a profiled program. Refer to the Profiler 
chapter of the TeieGenZ User Guide for more information on 
profiling. 


-Y(“task_stack'’ 

The - Y option is one of the two aid options by which you can alter the size of 
the task stack (the other is -y). In the absence of a representation 
specification for task storage_size, the run time will allocate 10240 bytes of 
storage for each executing task. -Y specifies the size of the basic task stack. 
The format of the option is 

-Y <value> 

where < value > is the size of the task stack in 8-bit bytes. The default is 
10240. A representation specification for task storage size overrides a value 
supplied with this option. 

-y(“stack_guarcl” 

The -y option is used to specify the size of the stack guard. The stack-guard 
space is the amount of space allocated per task, from the task stack, to 
accommodate interrupts and exception-handling operations. The format of 


2-24 


C.VID-1854N-V I. 1 ( .VI.AC-in 27JLL91 




Command Summary 


(Ada Linker) aid 


-y <value> 

where < value > is the size of the stack-guard size in S-bit bnes. The value 
given must be less than the task-stack size. The default is 1024 bytes; this is 
the amount allocated unless otherwise specified. 


CMD-1854N-V1.1(.VIAC-II) 


:7.JLL91 


2-25 






aid (Ada Linker) 


TeleGen2 for Macintosh A/UX 


2-26 


CMD-18S4N-V1.1(MAC-II) 


27JUL91 




APPENDIX C 

APPENDIX E GE THE Ada 3TANDAPJ3 


The only allowed implemenoaoion dependencies correspond oo 
i.Tplemencation-dependent pragmas, to certain nsachine-dependeno ccnven 
as T.entroned in Chapter 13 or rhe Ada Standard, and to certarn allowe 
restrictions on representation clauses. The irtplemenration-dependent 
characteristics of this Ada rmolementation, as descrrbed i.n this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are net a part of Appendix E, are given on t.he following page. 


a 





MAC II 


attachment F 


attachment F: PACKAGE STANTJARD INFORMATION 

For this target system the numeric types and their properties are as follows: 

INTEGER; 

size =16 
first = -32768 
last = —32767 

SHORTINTEGER; 

size = 3 
first = -128 
last = —127 

LONGINTEGER; 

size =. 32 

first = -21474836-48 

last = -2147483647 

FLOAT: 

size = 32 
digits = 6 

•first = -1.70141E-38 
"last = —1.70141E —33 
machine_radix = 2 
machine_mantissa = 24 
machine emin = -125 
machine_emax = —128 

LONGFLOAT: 

size = 64 
digits = 15 

■first = -1.79769E-30S 
•last = -I.79769E-308 
mac nine radix = 2 
macnme mantissa = 53 
machine_emin = -1021 
machine emax = —1024 

DURATION: 

size = 32 

delta = 2»1.0?:E-14 
first = -36400 
last = —36400 


25JUN91 


Page 16 



LRM Annotations 


TeleGen2 pragmas 


3.10. LRM Appendix F - Implementation-Dependent 
Characteristics 

The Ada language definition allows for certain target dependencies. These 
dependencies must be described in the reference manual for each implementation. 
This section addresses each point listed in LRM Appendix F. Topics that require 
further clarification are addressed in the sections referenced in the summary. 

3.10.1. (1) Implementation-dependent pragmas 

TeleGen2 has the following implementation-dependent pragmas: 

pragma Comment 
pragma Expon 
pragma Images 
pragma Interface_[nformation 
pragma Interrupt 
pFiigma t inkname 
pragma .N'o Suppress 
pragma Preserve_Layout 
pragma Suppress_.AJl 

3.10.1.1. Pragma Comment 

Pragma Comment is used for embedding a comment into the object code. The 
syntax is 

pragma Commenc ( <scring_licerai> ); 

where < string literal > represents the characters to be embedded in the object 
code. Pragma Comment is allowed oniy within a declarative part or immediately 
within a pac.kage specification. .Any number of comments may be entered into the 
object code by use of pragma Comment. 

3.10.1.2. Pragma Export 

Pragma Export enables you to export an .Ada subprogram or object to either the 
C language or assembly. The pragma is not supported for Pascal or FORTRAN'. 
The syntax is 

pragma Export ( [ Name -> ] <-ubprogram_or_object_name> 

[, I Link_Name »> ] <scring_literal> ] 

I . [ Language -> ] <identifier> ] ); 

The syntax and use of the pragma is e,xplained in detail in Section 2.S.3. 

3.10.1.3. Pragma Images 

Pragma Images controls the creation and ailocation of the image and inde.x tables 
tor a specified enumeration type. The syntax is _ 


REF l”64N-\ l.liftXK, I. M\i i: \PRVI 3-11 





TeleGen2 pragmas 


Te!eGen2 for 68K/UNIX Hosts 


pragma Images(<enumeration_cype>. Deferred); 

pragma Images(<enxmeracion_type>, Immediate); 

The syntax and use of the pragma is described in detail in Section 2.7.3. 

3.10.1.4. Pragma Interface Information 


Pragma Interface_[nformation provides information for the optimizing code 
generator when interfacing non-Ada langtiages or doing machine code insertions. 
Pragma Interface_Information is always associated with a pragma Interface except 
for machine code insertion procedures, which do not use a preceding pragma 
Interface. The syntax of the pragma is 


pragma Interface_Informacion (Name, 

Lxnk_Name, 
Mechanism, 
Parameters, 
Clobbered_Regs); 


Ada subprogram, required 
string, default - 
string, default * 
string, default » "" 
string, default - 


Section 2.3.2.2 e.Tplains the syntax and usage of this pragma. 


3.10.1.5. Pragma Interrupt 


Pragma Interrupt is used for function-mapped optimizations of interrupts. The 
syntax is 


pragma Interrupt (Function_Mapping); 

The pragma has the effect that entry calls to the associated entry, on behalf of an 
interrupt, are made with a reduced call overhead. This pragma can only appear 
■immediately before a simple accept statement, a while loop directly enclosmg only 
a single accept statement, or a select statement that 'includes an interrupt accept 
alternative. 


Pragma Interrupt is explained more fully in Sections 2.11. 2.1 i. l.i. and 2.11.1.7 

3.10.1.6. Pragma Unkname 

Pragma Linkname was formerly used to provide interface to any routine whose 
name cannot be specified by an .Ada string Literal. Pragma Interface_Intonnation 
should now be used for this functionality. Pragma Linkname is described here 
only in support of older code that may still use it. 

Pragma Linkname takes two arguments. The first is a subprogram name that has 
been previously specified in a pragma Interface statement. The second is a string 
literal specifying the e.\act link name to be employed by the code generator in 
emitting calls to the associated subprogram. The syntax is 

pragma Incerface ( <Ianguage>. <subprog> ;. 
pragma Linkname ( <subprog>. <scring_Lit:araI> ): 


3-i: 


KEF-1'64N-V1.1i6XK, LMX) IZaPRVI 




LRM Annotations 


TeleGen2 pragmas 


If pragma Linkname does not immediately follow the pragma Interface for the 
associated subprogram, a warning will be issued saying that the pragma has no 
effect. 

A simple example of the use of pragma Linkname is 

procedure I>iiiiin 7 _Access( Dummy_Arg ; System.Address ) ; 
pragma Interface (assembly. Dummy_Access ); 
pragma Linkname (Dummy_Access . '’_access'') ; 

3.10.1.7, Pragma No_Suppress 

Pragma No Suppress is a TeieGen2-defined pragma that prevents the suppression 
of checks within a particular scope. It can be used to override pragma Suppress in 
an enclosing scope. The pragma uses the same syntax and can occur in the same 
places in the source as pragma Suppress. The syntax is 

pragma Ho_Suppress (<idencifier> [, [ON ■>] <name>]); 

<identi£iar> The type of check you do not want to suppress. 

<name> The name of the object, type/subtype, task unit, generic umt. or 
subprogram within which the check is to be suppressed. < name> 
is optional. 

Section 2.3.2.2 e.xplains the use of this pragma in more detail. 

3.10.1.8. Pragma Preserve_Layout 

The TeleGenZ compiler reorders record components to minimize gaps within 
records. Pragma Preserve Layout forces the compiler to maintain the .Ada source 
order of components of a given record type, thereby preventing the compiler from 
performuig this record layout optimization. 

The syntax of this pragma is 

Pragma Preserve_Layouc ( ON »> <record_r;/pe> ) 

Preserve Layout must appear before any forcing occurrences ot the record type 
and must be in the same declarative part package specification, or task 
specification. This pragma can be applied to a record type that has been packed. 

If Preserve Layout is applied to a record type that has a record representation 
clause, the pragma only applies to the components that do not have component 
clauses. These components will appear in Ada source order after the components 
with component clauses. 


REF-I'64N-'. l.li6«K/L\IX) i:.\HRVI 


3-13 



TeleGen2 attributes 


TeleGen2 for 68K/UNIX Hosts 


3.10.1.9. Pragma Suppress_Ail 

Suppress_.Ajl is a TeieGen2-defined pragma that suppresses ail checics in a given 
scope. Pragma Suppress_.Ail takes no arguments and can be placed in the same 
scopes as pragma Suppress. 

In the presence of pragma Suppress_.All or any other Suppress pragma, the scope 
that contains the pragma will have checking turned off. This pragma should be 
used in a safe piece of time-critical code to allow for better perl’ormance. 

3.10.2. (2) Implemen+ation-dependent attributes 

Te!eGen2 has the following implementation-dependent attributes; 

'Offset (in.VfCI) 

'Subprogram Value 

’E.'aended_rmage 

'E.’aended_Value 

■E.xtended_ Width 

'E.xtended_.Aft 

■E.xtended_Digits 

'E.xtended Fore 


3.10.2.1. 'Offset 

'Offset yields the offset of an .Ada object from its parent frame. Tnis attribute 
supports machine code insertions as described in Section 2.12.2.2. 

3.10.2.2. 'Subprogram_Vaiue 

Tnis attribute is used by the TeleGeaZ implementation to facilitate calls to 
interrupt support subprograms. The attribute .-etums the value of the record tvpe 
Subprogram_Value defined in package System. Refer to Section 2.11.2.1 for more 
information. 

3.10.2.3. Extended attributes for scalar types 

The extended attributes extend the concept behind the text attributes 'Image. 
Waiue, and 'Wiath to give the user more power and tlexibility when displaying 
values of scalars. Extended attributes differ in n»«'o respects from theu" predefined 
counterparts: 

; Extended attributes take more parameters and allow control of the 
format of the output string. 

2. Extended .ittnbutes are defined for all scalar ppes, including :;.xed anc 
•Icating point txpes. 


-■>-14 


REF-r64N-v i.i,6.sK/tMXi i:ai>rvi 




LRM Annotations 


TeieGen2 attributes 


Named parameter associations are not currently supponed for the extended 
attributes. 


Extended versions of predefined attributes are provided for 
floating point, and fixed point types; 


Integer 

’Extended_Image 
’Extended Value 
'E.xtended Width 


Enumeration 

'Extended_[mage 
’ Extended_Value 
Extended Width 


Floating Point 

'E.xtended_Image 
'Extended Value 
■E.xtended_Digits 


integer, enumeration. 

Fixed Point 

'ExTended_[mage 
’Extended_ Value 
'Extended_Fore 
'E.xtended .Ait 


For integer and enumeration types, the ’Extended Value attribute is identical to 
the ’Value attribute. For enumeration types, the Extended Width attribute is 
identical to the ’Width attribute. 


The extended attributes can be used without the overhead of including Text_IO in 
the Linked program. The following examples illustrate the difference between 
insuntiating Text_IO.FIoat_IO to convert a float value to a string and using 
noat’Extended_Image: 


with Texc_I0; 

function Convert_To_Scring ( FI ; Float ) return String is 
Temp_Str : String ( L .. S Float'Digits ); 
package Flt_IO is new Texc_IO.Floac_IO (Float); 
begin 

Flt_IO.Puc ( Tenp_Str, FI ); 
r e turn T einp_S tr; 
end Convert_To_String; 


function Converc_To_String_No_Text_IO( FI ; Float ) return String 
begin 

return Float' Extended_Iaiage ( FI ) ; 
end Convert_To_String_Mo_Text_IO; 


with Text_IO. lonvert_To_String, Converc_To_Scring_So_Text_IO; 
procedure Show_Differenc_Conversions is 
Value : Float 10.03376; 
begin 

Text 10.Put Line ( "Using the Convert_To_String, the Vulue of 
the variable is ; " & Convert__To_Scring ( Value ) ) ; 

Text 10.Puc_Line ( "Using the Convert_To_String_No_Text_IO, 
the value Convert_To_Scring_No_Text_IO ( Value ) ) ; 

end Show Different Conversions; 


KEF-1764,N.VI.1(MK;LM\> ICAHRVI 


3-15 






Integer attributes 


TeleGen2 for 68K/UNIX Hosts 


3.10.Z3.1. Integer attributes 
’Extendedjmage 

X'Extended_Image(Icea,Width,Base,Based,Space_If_Positive) 

Rerurns the image associated with Item as defined in Text lO. Integer lO. 
The Text_IO definition states that the value of Item is an integer literal with 
no underlines, no exponent, no leading zeros (but a single zero for the zero 
value), and a minus sign if negative. If the resulting sequence of characters 
to be output has fewer than Width characters, leading soaces are first 
output to make up the difference. (LR\I 14.3.7; 10.14.3.7; 11) 

For a prefix X that is a discrete type or subtype, this attribute is a function 
that may have more than one parameter. The parameter Item must be an 
integer value. The resulting string is without underlines, leading zeros, or 
trailing spaces. 

Parameters 

Item The item for which you want the image; it is passed lo the 
function. Required. 

Width The minimum number of characters to be in the string 

that is returned. If no width is specified, the default (0) is 
assumed. Optional. 

Base The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional. 

Based .An indication of whether you want the string returned to 
be in base notation or not. If no preference ;s specified, 
the default (false) is assumed. Optional. 

Space_If_Posicive An indication of whether or not a positive integer should 

be prefixed with a space in the string returned. If no 
preference is specified, the default (false) is assumed. 
Optional. 

Examples 

subtype X is Integer Range -10..16; 

Values yielded for selected parameters; 


X' Extended_l 2 iage (5) 

= "5” 

X'Extended Image(5,0) 

=. 5 '• 

X'Extended_Image(5,2) 

- 5" 

X’Extended_Image(5.0.2) 

- ■•LOL 


.'-16 


REF-1'64N-V1.1(6MK/LMX) i:.\PR9I 







LRM Annotations 


Integer attributes 


X'Extended_l2iage(5,4,2) 
X'Excended_Iinage(5,0,2 .True) 
X'Extended_l2iage(5,0,10 .False) 

X'Extended_Image(5,0,10,False,True) 

X’Extended_Image(-1,0,10,False,False) 
X'Extended_rmage(-1,0,10,False,True) 
X'Extended_Ifflage(-1,1,10,False,True) 
X * Ext ended_Image(-1,0,2,True,True) 
X’Extended_Iaage(-1,10,2.True.True) 


- " 101 " 

- "2fnoi/r 

m " 5 
m 5 »? 

m ^ - 1, ** 

m 

a " 

- "-UU” 

- " -UU” 


REF-irWN.VI.li6HK/LMXi 12APR9I 


3-r 





Integer attributes 


TeieGen2 for 68K/UNIX Hosts 


’Extended_Vaiue 

X'Extended_Value(Item) 

Rerums the value associated with Item as defined in Text_IO.Integer_IO. 
The Text_IO definition states that given a string, it reads an integer value 
from the beginning of the string. The value returned corresponds to the 
sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtjTje. this attribute is a function 
with a single parameter. The actual parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint Error is raised. 

Parameter 

Item A parameter of the predefined type string: it is passed to 
the function. The type of the returned value is the base 
type X. Required. 

Examples 

subtype X is Integer Range -10..15; 


Values yielded for selected parameters: 

X' Extended_Value("5") 
X'Extended^ValueC" 5") 

X' Extended'value ( "2//101//" ) 
X'Ext ende d'value("-1") 
X’£xtended“7alue(" -1") 


REF-r64N.VI.l(68K/LM.Xi llAPRVI 




LRM Annotations 


integer attributes 


’Extended_Wi<lth 

X'Excended_Widch<Base,Based,Space_If_Positive) 

Remrns the width for subtype of X. For a prefix X that is a discrete 
subtype, this attribute is a function that may have multipie parameters. This 
attribute yields the maximum image length over all values of the type or 
subtype X. 

Parameters 


Base The base for which the width will be calculated. If .ao base 
is specified, the default (10) is assumed. Optional. 

Based An indication of whether the subtype is stated in based 
notation. If no value for based is specified, the default 
(false) is assumed. Optional. 


Space_If_Posicive .An indication of whether or not the sign bit of a positive 

integer is included in the string returned. If no preference 
is specified, the default (false) is assumed. Optional. 


Examples 

subc^/pe X is Integer Range -10.. 16; 


Values yielded for selected parameters; 



X'Extended_Width 

- 3 

- "-10” 

X'Extend- “width(lO) 

- 3 

- ■•■10" 

X'Ext ende. jlidzh (2) 

- 5 

- •10000" 

X'ExtendedJJidth(10,True) 

- 7 

- '•■10* 10*" 

X'Extanded“width(2.True) 

- 3 

- "2i^ 10000*" 

X'Extended_tfidth(10.False.True) 

- 3 

- ’• 16" 

X'Extended_Width(10.True,False) 

- 7 

- "-10*10*" 

X'Extended_Width(10.True.True) 

- 7 

- •’ 10*16*" 

X'Extended_Width(2.True.True) 

- 9 

- ■■ 2* lOQOO*' 

X'Extended_Width(2,False,True) 

- 6 

- ' 10000" 





REF-i:64N-Vl.l(6XK/LMXi IlAPRVt 


3-19 


Enumeration type attributes 


TeleGen2 for 68K/UNIX Hosts 


3.1(X2.3^ Enumeration type attributes 
’Extended Jmage 

X'Sxtended_Iaiage (Icem, Vidth, Uppercase) 

Remrns the image associated with Item as defined in 
Text_IO.Enumeration_IO. The Text lO definition states that given an 
enumeration literal it will output the value of the enumeration literal (either 
an identifier or a character Literal). The character case parameter is 
ignored for character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a funaion 
that may have more that one parameter. The parameter Item must be an 
enumeration value. The image of an enumeration value is the 
corresponding identifier, which may have character case and return string 
width specified. 

Parameters 


Icem The item for which you want the image; it is passed to the 
function. Required. 

Width The minimum number of characters to be in the string 
that is returned. If no width is specified, the default (O') is 
assumed. If the Width specified is larger than the image 
of Item, the return string is padded with trailing spaces. If 
the Width specified is smaller than the image of Item, the 
default is assumed and the image of the enumeration value 
is output completely. Optional. 


Uppercase .An indication of whether the returned string is in upper 

case characters. In the case of an enumeration type where 
the enumeration literals are character literals. Uppercase 
is ignored and the case specified by the type definition is 
taken. If no preference is specified the default (true) is 
assumed. Optional. 


j-;o 


KEF-rwN-Vl.i(f,«K/LMXi i:.^PR9l 



LRM Annotations 


Enumeration type attributes 


Examples 

type X is (red, green, blue, purple): 
type Y is ('a', 'B', 'c', 'D'); 

Values yielded for selected parameters: 


X'Extended_Iaage(red) 

- 

"RED" 

X'Ezcended_Image(red, 4) 

- 

"RED " 

X' Excended_Iaiage (red, 2) 

- 

"RED" 

X'Extended_Iaage(red,0.false) 

- 

"red" 

X’Extended^Image(red,10.false) 

- 

"red 

?'Extended Iiaage('a') 

m 

" ' a' " 

Y'Extended_Iaage('B') 

- 

If r g r ft 

Y'Extended_Lnage('a',6) 

- 

" 'a' " 

Y'Extended_Image('a'.0,true) 

- 

" ' a'" 


REF-I764N.V1.1(6«K/LNIX) 12APR91 


3-21 






Enumeration type attributes 


TeieGen2 for 68K/UNIX Hosts 


’Extended_Vaiue 

X' Extended_Value(Item) 

Returns the image associated with Item as defined in 
Text_IO.Enumeraiion_IO. The Text_IO definition states that it reads an 
enumeration value from the beginning of the given string and returns the 
value of the enumeration literal that corresponds to the sequence input. 
(LRM 143.9:11) 

For a prefix X that is a discrete type or subtype, this attribute is a ftmction 
with a single parameter. The actual parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
the case where an iUegal string is passed, a Constraint_Error is raised. 

Parameter 

Item A parameter of the predefined type string; it is passed to 
the function. The type of the returned value is the base 
type of X. Required 

Examples 

type X Is (red, green, blue, purple); 


Values yielded for selected parameters: 


X'Excended_Value( 
X'Ext ended_Vaiue( 
X'Excended_Value < 
X'Excended Value( 


"red") 

" green") 

" Purple") 
" GreEn ") 


» red 

- green 

- pxirple 

- green 


5-Z2 


REF-|T64N.V|.|(WJK/t'NIX) i:aPR91 


LRM Annotations 


Enumeration type attributes 


’Extended^WIctth 
X' Extandad^ffIdch 
Returns the width for subtype of X. 


•nm aimtute viTi the^u^ ^ ^ ^ 

enumeration t^e or subtype X over all vaiues of the 


Parameters 


A c fill c nu 




Examples 


type X is 
C7P« Z is 


(El, X12, X123, X1234); 


Values yielded: 

\'Extended^tfidch 

Z'Extended^Width 


* S -- "purple" 
- 5 - 'X1234" 


R£F-17MN.VI.1((Mjk/UN1X) 


I3APR9I 


J-23 



Floating point attributes 


TeieGen2 for 68K/UNiX Hosts 


3.10^3.3. Floating point attributes 
’Extendedjmage 

X'Extended_Iinage(Item,Fora, Af t,Exp, Base , Based) 

Returns the image associated with Item as defined in Text_IO.Float_IO. 

The Tok_IO definition states that it outputs the value of the parameter Item 
as a decimal literal with the format defined by the other parameters. If the 
value is negative, a minir' sign is included in the integer part of the value of 
Item. If Exp is 0, the integer pan of the output has as many digits as are 
needed to represent the integer part of the value of Item or is zero if the 
value of Item has no integer part. (LRM 14_3.S:13, 14.3.3:15) 

Item must be a Real value. The resulting string is without underlines or 
trailing spaces. 

Parameters 

Item The item for which you want the image; it is passed to the 
function. Required. 

Fore The minimum number of characters for the integer pan of 
the decimal representation in the return string. This 
includes a minus sign if the value is negative and the base 
with the ’#’ if based notation is specified. If the integer 
pan to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is 
assumed. Optional. 

Aft The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta 
of the type or subtype is greater than 0.1. then Aft is 1. If 
no Aft is specified, the default (.X’Digits-1) is assumed. If 
based notation is specified, the trailing ’#’ is included in 
.Aft. Optional. 

Exp The minimum number of digits in the exponent. The 

exponent consists of a sign and the e.xponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is 
assumed. If Exp is 0, no e-xponei * is used. Optional. 

Base The base that the image is tc be displayed in. If no base is 
specified, the default (10) is assumed. Optional. 

Based .An indication of whether you want the string returned to 
be m based notation or not. If no preterence is specified, 
the default (false) is assumed. Optional. 


3-24 


REF-ir64N-Vl.l(6XK/LMX) 12APR9i 




LRM Annotations 


Floating point attributes 


Examples 


type X is digits 5 range -10.0 .. 16.0; 

Values yielded for selected parameters: 

X'Extended_Image(5.0) 

X'Extended_l!nage(5.0,1) 
X'Extended_Image(-5.0,1) 

X'Extended__Image(5.0, 2 ,0) 

X’Extended”Lnage(5.0, 2 . 0 , 0 ) 
X'Extended_Image(5.0, 2 ,0,0, 2) 

X' Extended_rniage <5.0,2,0,0,2, True) 
X'Extended_Iaiage(5.0,2,2,3,2 ,True) 


- ” 5.0000E+00" 

- "5.OOOOE+00" 

- "-S.OOOOE+OO" 

- " S.OE+OO" 

- ” 5.0" 

- " 101 . 0 " 

- ■• 2 ?/ 101 . 0 #" 

- "nn-UE+oz" 


REF-r64N.V|.l(6«K/LM.\) 


i:apr9i 


3-25 



Floating point attributes 


TeleGen^ for 68K/UNiX Hosts 


'Extended^Value 

X'Extended__Value (Item) 

Returns the value associated with Item as defined in Text lO.FIoat 10. 

The Text_IO definition states that it skips any leading zeros, then reads a 
plus or minus sign if present then reads the string according to the syntax of 
a real literal The return value is that which corresponds to the sequence 
input. (LRM 14J.8;9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
with a single parameter. The actual parameter Item must be of predefined 
type string. Any leading or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint Error is raised. 

Parameter 

Item A parameter of the predefined type string; it is passed to 
the funaion. The type of the renimed value is the base 
type of the input string. Required. 

Examples 

type X Is digits 5 range -10.0 16.0; 

Values yielded for selected parameters: 

X'Excended_Value("5.0-) -5.0 

X'Elmtended“7alue("0.5El") - 5.0 

X'Extended”value("2?'/1.01//E2”) - 5.0 


3-26 


REF-r64N.Vl.I(6«K/UMX) 12APR91 




LRM Annotations 


Floating point attributes 


’Extended_Digits 

X'Extended_DtgiC3<Base) 

Returns the number of digits using base in the mantissa of model numbers 
of the subtype X. 

Parameter 

Base The base that the subtype is defined in. If no base is 
specified, the default (10) is assumed. Optional. 

Examples 

cype X is digits S range -lO.O .. 16.0; 

Values yielded: 

X'Extended_Digits » 5 


REF-l':64N-Vi.l,68K/LNIX) 


12APR9t 


3-27 





Fixed point attributes 


TeieGen2 for 68K/UNIX Hosts 


3.10^3.4. Fixed point attributes 
’Extendedjmage 

X'Exrended_Lnage(Item,Fore,Aft,Exp,Base,Based) 

Returns the image associated with Item as defined in Text_IO.Fixed_IO. 

The Text lO definition states that it outputs the value of the parameter Item 
as a decimal literal with the format defined by the other parameters. If the 
value is negative, a minus sign is included in the integer part of the value of 
Item. If Exp is 0, the integer pan of the output has as many digits as are 
needed to represent the integer pan of the value of Item or is zero if the 
value of Item has no integer pan. (LRM 14.3.3:13, 14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
that may have more than one parameter. The parameter Item must be a 
Real value. The resulting string is without underlines or trailing spaces. 

Parameters 

Item The item for which you want the image; it is passed to the 
function. Required. 

Fore The minimum number of characters for the integer pan of 
the decimal representation in the return string. This 
includes a minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 
pan to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is 
assumed. Optional. 

Aft The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta 
of the t>pe or subtype is greater than 0.1, then Aft is 1. If 
no Aft is specified, the default (X’Digits-l) is assumed. If 
based notation is specified, the trailing is included in 
Aft. Optional. 

Exp The minimum number of digits in the exponent; the 

exponent consists of a sign and the exponent, possibly with 
le ding zeros. If no Exp is specified, the default (3 j is 
assumed. If Exp is 0, no exponent is used. Optional. 

Base The base in which the image is to be displayed. If no base 
is specified the default (10) is assumed. Optional. 


3-2S 


REF-l"(S4,N-Vl.I(W<K/LMX) IZAPRyi 



LRM Annotations 


Fixed point attributes 


Based An indication of whether you want the string returned to 
be in based notation or not. If no preference is specified, 
the default (false) is assumed. OptionaL 


Examples 

type X is delta 0.1 range -10.0 .. 17.0; 


Values yielded for selected parameters: 

X' Eacended_Iaiage (5.0) 
X'Excendad_Image(5.0,1) 
X'Extended_ljnage(- 5.0,1) 

X Excended_Iinage(5.0,2,0) 
X'Eatended ImagefS.0,2,0,0) 

X'Extended^ImageC5.0,2,0,0.2) 
X'Extended^Lnage(5. 0 , 2 , 0 , 0 , 2 ,True) 
X'Eactended_Image(5. 0 , 2 , 2 ,3, 2 ,True) 


" 5.00E+00" 
"5.OOE+00” 
'•-5 .OOE+00" 

" S.OE+OO” 

" 5.0" 
" 101 . 0 " 
"2i>101.0y>" 
"2#l.lf/E+02" 


KEF-'"64N.VI.J(6XK/LMX) llAPRVI 




Fixed point attributes 


TeieGen2 for 68K/UNIX Hosts 


'Extended_Value 

X'Extended_Value(Image) 

Retiuns the value associated with Item as defined in Text lO.Fixed lO. The 
Text_IO definition states that it skips any leading zeros, reads a plus or 
minus sign if present, then reads the string according to the syntax of a real 
literaL The return value is that which corresponds to the sequence input. 
(LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function 
with a single parameter. The actual parameter Item must be of predefined 
type string. .Amy leading or trailing spaces in the string X are ignored. In 
the case where an illegal string is passed, a Constraint_EiTor is raised. 

Parameter 

Image Parameter of the predefined type string. The type of the 
returned value is the base type of the input string. 
Required. 

Examples 

type X is delta 0.1 range -10.0 .. l/.O; 

Values yielded for selected parameters: 

X'Extended_7alueC’5.0") - 5.0 

X'Extended~7alue(”0.5El") - 5.0 

X’Extended”7alue("2/^l. 01//E2") - 5.0 


.MO 


REF-r 64 N-VI.l( 6 XK/LMX< llAPRyi 






LRM Annotations 


Fixed point attributes 


’Extended_Fore 

X'Extended_Fore(Base,Based) 

Returns the minimum number of characters required for the integer part of 

the based representation of X. 

Parameters 

Base The base in which the subtype is to be displayed. If no 
base is specified, the default (10) is assumed Optional. 

Based An indication of whether you want the string returned to 
be in based notation or not. If no preference is specified 
the default (false) is asstnned Optional. 

Examples 

type X is delta 0.1 range -10.0 .. 17.1; 

Values yielded for selected parameters; 

X'Extended Fore - 3 -- ”-10" 

X'Extended“Fore(2) - 6 -- " 10001" 


REF-I764N-VI.1I6HK/LNIX/ 


12APKVI 


3-31 




Rxed point attributes 


TeieGen2 for 68K/UNIX Hosts 


’Extended_Aft 

Z' Ext ende d_^Af t ( Bas e. Bas e d ) 

Returns the niinimum number of characters required for the fraaionai part 

of the based representation of X. 

Parameters 

Base The base in which the subtype is to be displayed. If no 
base is specified, the default (10) is assumed. Optional. 

Based An indication of whether you want the string returned to 
be in based notation or not. If no preference is specified, 
the default (false) is assumed. Optional. 

Examples 

type X is delta 0.1 range -10.0 .. 17.1; 


Values yielded for selected parameters: 


X'Extended_A£c 
X' Extended Aft (2) 


- 1 -"r from 0.1 

- 4 -■'QOOr from 2*0.0001* 


3-32 


REF-I764N-V1.1i6XK/1;MX) 12APR91 




LRM Annotations 


Package System 


3.10.3. (3) Package System 


wich U'nchecked_Conversion; 
package System is 


- CUSTOMIZABLE VALUES 


type Name 


is (TeleGenZ); 


System^Name 


ccmstant name TeleGenZ; 


Memory^Size 

Tick 


constant ;» (2 ** 31) -1; --Available memory, in storage units 
constant :>■ 2.0 / 100.0; --Basic clock rate, in seconds 


type Task_Daca is 
record 
null: 

end record; 


-- Adaptation-specific customization information 
-- for task objects. 


-- NON-CUSTOMIZABLE, IMPLEMENTATION-DEPENDENT VALDES 


Scorage_Unic 

Min_Int 

Max_Inc 

Max_Digics 

Maa_Mantissa 

Fine Delta 


constant 

constant 

constant 

constant 

constant 

constant 


8 ; 

-(2 31) ; 

(2 31) - 

15; 

31; 

1.0 / (2 ** 


1 ; 


Maz Mantissa); 


subtype Priority is Integer Range 0 . . 63; 


-- ADDRESS TYPE SUPPORT 


type Memory is private; 

type Address is access Memory; 

-- Ensures compatibility between addresses and access types. 
-- Also provides implicit NULL initial value. 


REF.l7WN-Vl.l(fWK/LN»X> J2APKNI 


3-33 





Package System 


TeleGen2 for 68K/UNiX Hosts 


Null^Address: constanc Address null; 

-- Initial value for any Address object 


type Address_7alue is range -(2'**31) . . (2**31)-1; 


-•A numeric representation of logical 


addresses for use in address cla\ises 


Hex_80Q0Q000 

Hex“90000000 

Hex”A0000000 

Hex^OOOOOOO 

Hex”c0000Q0Q 

Hex'DOOOOOOO 

Hex'EOOOOOOO 

Hex'FOOOOOOO 


constant Addr6ss_7alue 
constanc Address_7alue 
constant Address_7alue 
constant Address_7alue 
constant Address_7alue 
constant Address_7alue 
constanc Address_7alue 
constant Address 7alue 


16^^80000000^^ 

16^^70000000^^ 

16^/60000000# 

16#50000000# 

16#40000000# 

I6#30000000# 

16#20000000# 

16#10000000# 


•- Define numeric offsets to aid in Address calculations 
-- Example: 

for Hardware use at Location (Hex FOOOOOOO + 16#2345678#); 


function Location is new Dnchecked_Conversion (Address^7alue, Address); 
-- May be used in address clauses: 

Object: Some_Type; 

for Object use at Location (16#4000#); 


function Label (Name: String) return Address; 
pragma Interface (META, Label); 

•• The LABEL meta-function allows a link name to be specified as address 
-- for an imported object in an address clause: 

Object: Some_Type; 

-- for Object use at Label('’OBJECT$$LINK_NAME") ; 

-- System.Label returns Nuli_Address for non-literal parameters. 


-- ERROR REPORTING SUPPORT 


procedure Reporc_£rror; 

pragma Interface (Assembly, Report_Error), 

pragma rncerface_Informacion (Report^Error , ■’REPORT_ERROR") , 


.'-.M 


REF-r64|N-Vl.Jt6«K/LMX) llAHRVl 









LRM Annotations 


Package System 


-- Report_Error can only be called in an excepcion handler and provides 
an exception craceback like cracebacks provided for unhandled 
exceptions 


-- CALL SUPPORT 


type Subptograiii__Vaiue IS 
record 

Proc_addr : Address; 
Parenc_fraffle : Address; 
end record; 


-- Value returned by the iasplementation-defined ’Subprogram^Value 
-- attribute. The attribute is not defined for subprograms with 
.. parameters. 


private 


end System; 


3.10.3.1. Sy^tem.Labe) 

The System-Label meta-function is provided to allow you to address objects by a 
linker-recognized label name. This function takes a single string literal as a 
parameter and returns a vaiue of System_Address. The function simply returns 
the run-time address of the appropriate resolved link name, the primary purpose 
being to address objects created and referenced from other languages. 

• When used in an address clause, System.Label indicates that the Ada 
objea or subprogram is to be referenced by a label name. The actual 
object must be created in some other unit (normally by. nother 
language), and this capability simply allows you to import that object and 
reference it in Ada. Any explicit or default initialization will be applied 
to the object. For example, if the object is declared to be of an access 
type, it will be initialized to .VLTL 

• When used in an expression. System.Label provides the link time 
address of any name, such as a name for ,in object or nlubprogram. 


REF-ir 64 N-Vl.l( 6 HK/L’NIX) 12APRVI 


3-35 






TeieGen2 characteristics 


TeieGen2 for 68K/UNIX Hosts 


3.10.3JL System.Report_Error 

Report_Error must be called from directly within an exception handler. This 
routine displays the normal exception traceback information to standard output 
It is essentially the same traceback that could be obtained if the exception were 
unhandled and propagated out of the program. Repon_Error simply allows you 
to handle the exception and stiU display this information. You may also want to 
use this capability in a user handler at the end of a task since exceptions in tasks 
will not be propagated to the main program. You can also get this capability for ail 
tasks by using the - X binder switch. 

For details on the output refer to Section 2.9, “Exception handling.” 

3.10.4. (4) Restrictions on representation clauses 

Representation clauses are fully supported with the following exceptions: 

• Enumeration representation clauses are supported for ail enumeration 
t\pes except Boolean types. 

• Record representation clauses are supported e.xcept for records with 
dynamically-sized components. 

• Pragma Pack is supported except for dynamically-sized components. 

3.10.5. (5) Implementation-generated names 

TeieGen2 has no implementation-generated names. 

3.10.6. (6) Address clause expression interpretation 

An expression that appears in an object address clause is interpreted as the 
address of the first storage unit of the object. 

3.10.7- (7) Restrictions on unchecked conversions 

Unchecked programming is supported except for unchecked type conversions 
where the destination type is an unconstrained record or array type. 

3.10.8. (8) Implementation-dependent characteristics of the I/O 

I— — — 

Text_rO has the following implementation-dependent characteristics; 
type Count is range 0..(2 3I)-2^, 

subtype Field is integer range 0 .. LOGO ; 




REF-rfi4N-Vl.l(ft.SK/LMX> ll.AHRVI 





LRM Annotations 


TeleGen2 characteristics 


In procedures Create and Open, the Form parameter is supported as specified by 
the POSIX Draft 6, Chapter 8. 

The standard run-time subiibrary contains preinstantiated versions of 
Text_IO.Integer_IO for types Short_Integer, Integer, and Long_Integer, and of 
Text_IO.FIoat_IO for types Float and Long_FloaL Use the following packages to 
eliminate multiple instantiations of the Text_IO packages: 

Short_Integer_Te«_IO 

Integer_Text_To 

Long_Integer_Text_IO 

noal_Texi_IO 

Long_Float_Text_IO 


REF-l76JN-Vl.l(<WtK/L'NIX) 


1:aPR9I 


3-37 





REF-4764N-VI.ij6HK/LNIX) I^APR91 




