FPA Depot - Web Application 

Edwin M. Martinez Avila 1 , Ricardo Muniz 2 , Jamie Szafran 3 ,Adam Dalton 4 

University of Puerto Rico at Arecibo 
1 Edwin.m.Martinez2@upr.edu 
2 Ricardo.muniz2@upr.edu 

^National Aeronautics and Space Administration 
3 Jamie.szafr an@nasa.gov 
4 Adam.s.dalton@nasa.gov 


Abstract — Lines of code (LOC) analysis is one of the 
methods used to measure programmer productivity and 
estimate schedules of programming projects. The Launch 
Control System (LCS) had previously used this method to 
estimate the amount of work and to plan development 
efforts. The disadvantage of using LOC as a measure of 
effort is that one can only measure 30% to 35% of the 
total effort of software projects involves coding [8|. In the 
application, instead of using the LOC we are using 
function point for a better estimation of hours in each 
software to develop. 

Because of these disadvantages, Jamie Szafran of 
the System Software Branch of Control And Data Systems 
(NE-C3) at Kennedy Space Canter developed a web 
application called Function Point Analysis (FPA) Depot. 
The objective of this web application is that the LCS 
software architecture team can use the data to more 
accurately estimate the effort required to implement 
customer requirements. This paper describes the 
evolution of the domain model used for function point 
analysis as project managers continually strive to generate 
more accurate estimates. 

Nomenclature 

LCS: Launch Control System 
NE-C: NASA Engineering Control and Data Systems 
Ruby: A dynamic, reflective, general-purpose object-oriented 
programming language 

Ruby on Rails: Web application framework for the Ruby 
language. 

DA: Development Activity 

CSCI: Computer Software Configuration Item 

FPA: Function Point Analyses 

FPA Version: Different versions of an FPA. 

Keywords — Java, Ruby-on-Rails, Web - Application , Server , Mid 
- Level, database, and design. 

Introduction 

For a long time, “ the software engineering field has 
counted Lines of Code (LOC), which is a hard and fast 
measurement of the amount of effort, time, and resources that 
a software project takes” [1]. LOC has the disadvantage that 


it does not fully cover the development process, only the 
coding implementation; in addition it is not a consistent 
measure to compare productivity across different tools and 
platforms. Over time, engineers have come to conclusion that 
using the LOC metric to measure both programmer 
productivity and estimation of the programming timelines is 
not very effective. This stance is further solidified by the 
revelation that given two algorithms for implementing 
identical functionality, the method with fewer lines of code is 
usually preferable. On the other hand, Function Point 
Analyses offers improved project estimation because it is an 
independent methodology that can be used to compare 
products across differing toolsets, languages, and platforms. 

In 2009, Jamie Szafran was a student employee of the 
Kennedy Space Center and assigned the task of creating the 
first version of the Function Point Analysis Depot. At the 
time, it was a little different from the spreadsheeta (see Figure 
1) that was being used by the Launch Control System (LCS) 
for the collection of function and was processed by hand. The 
problem with the use of spreadsheets is that the estimate of 
costs cannot be automated. In 2010, Szafran was hired 
fulltime and tasked with re-designing the Function Point 
Analysts Depot (FPA Depot) under the direction of software 
architect at the time. This implementation was then used to 
store Function Point Analysis results. These results were used 
by the architects of the LCS project to estimate the effort 
needed to implement the requirements of the customer. 
Furthermore as stated in FPA Depot Orientation for New 
Developers [1], “ the application is expected to support data 
correlation between the entry point function of analysis of 
software engineers and requirements management tool 
currently in use by the LCS project ”. The newest version of 
the FPA Depot promises to provide the LCS a precise 
technique to objectively estimate efforts required with more 
precision than previously possible. 

On June 6, 2011, Edwin Martinez was selected by 
Space Grant Puerto Rico for work at NASA KSC as an intern 
to working in the Space Station Processing Facility (SSPF) 
with Engineering Support Software NE-C2 branch on the 
LCS project. The assignment included migrating the FPA 
Depot from version 4.1 to version 5.1. The project required 
the restructuring of a Java server mid-level (web service) and 


creation of new methods for the schema 5.1. The work was 
coordinated with the efforts of Ricardo Muniz, intern member 
of the NE-C3 branch, who restructured the interface side of 
this application. 




Description 

Extern* Inputs i£l) 

Smste 

Average 

Conpex 




Input Scwrs 

htevov* inpuii 







Hardnert Inputi 
Batcn tape! Strvu'rc 







foffrifT (CO) 




Screen fteporfc 




Prnted Reports 
Weda Outputs 







Sofhwe Outputs 
Hardware Ou$>ute 

External Inqsiries (EQ) 










-toquaetttespon*» 




Mints 

CorteH Sorwtrre Hap 







Err bedded Computer teuna 

External Inter* aca Eilat (EJF) 







Reference Dali 

Fuad Uctsapes 
Stored [fete Fifes 










Internal Lofical Rita (IE) 




Afp cat on Data G-aups 
Date Tables 







srorjd Date Fifes 




Irrtnal Functions 





From FPA Depot Orientation for New Developers [ 1 ] 


This paper is organized as follows. Section II 
discusses the tools, methods and approaches that were used in 
creating the Java mid-level of the application. Section III 
describes the design of the FPA Depot interface. Section IV is 
the results, section V is the conclusion, and section VI 
contains the references for this paper. 


II. Implementation of the Java Mid - Level 

The Java mid-level is a web service, which is defined as 
“set of Hypertext Transfer Protocol (HTTP) request messages 
along with a definition of the structure of response messages , 
usually expressed in an Extensible Markup Language (XML) 
or JavaScript Object Notation (JSON) format [4]". This mid 
level was developed to be functional independently of GUI 
implementation. GUI development could then be performed 
in different languages and use it with the mid level without 
problem. The changes made to the web service were 
implemented in accordance to REST (Representational State 
Transfer) style, a that works by constraining the interface to a 
set of well-known, standard operations (specifically GET, 
POST, PUT, and DELETE). 


A. Tools for the Java Mid Level 

The design of the new schema for the FPA Depot required 
configuration and development using a toolset consisting of 
the HTTP protocol, XML, the Apache Tomcat servlet 
container, and the PostgreSQL database. The Eclipse IDE 


was used development and changing all the methods to the 
new version 5.1. 


B. New Classes and Methods 

The new classes were developed for this application 
were: Developers, Developer Activities, CSCI, FPA Version, 
Actuals, and Granularity. The classes that existed before but 
were changed for this version were: FPA, HTTP Request 
Handler, Database Interface, Sax Event Handler, Xml Tags, 
and Xml Builder. Below, the most important and basic classes 
of mid level are explained. 

1) Sax Event Handler: SAX stands for “the Simple API 
for XML ” [3]. This class contains methods that receive 
the info in XML (e.g. see Figure 3) from any GUI, and 
send them to the Http Request Handler to input the 
information into the database. 

<developerName>Someone</developerName> 

<username>8omcUBer</username> 

</developer> 

2) Http Request Handler: This class receives GET, POST 
PUT and DELETE methods and, the combined with the 
URL determines what function will be processed. PUT, 
DELETE or POST contain information in XML format 
and are parsed before being sent to the Sax Event 
Handler where the database is updated. On the other 
hand, if the class Http Request Handler receives a GET 
request, it goes directly to the Database Interface class to 
get the information from the database. 

3) Database Interface: This class is responsible for 
obtaining, creating, deleting, and modifying the data 
from the tables in the PostgreSQL database. The data are 
obtained from the database through pre-specified queries 
that provide additional security and abstraction by 
preventing a user from interfacing with the database 
directly. 

4) Xml Builder: In this class, the data is retrieved from 
database and converted to XML. 

5) Http Request Filter: This class is responsible for 
receiving the HTTP request from the Apache server and 
filtering it using the REST protocol. In this way HTTP 
operations can be routed to the appropriated Http 
Request Handler method. 


C. Old Schema 4.1 Version FPA Depot: 

The schema of versions 4.1 of the FPA Depot was revised to include information that would be 
more useful to the Software Architecture team. The original schema (for this revision) was this: 



i 

i 

i 

i 



T 



(From FPA Depot Orientation for New Developers [1]) 
Schema, 1 FPADepot 4.1 






D. New Schema 5.1 Version FPA Depot 


In order to utilize the change of this schema, the database had to be migrated and the Java mid-level 
and Ruby-on-Rails GUI had to be restructured. 


serai. 

<«nd n*»-rd ft ritpr 


{PKcolumMffcftiJd} 


I 

I 

I 

(FKcolumM = &•!_*. 
PK columns 3 Njd) 


, ««FK>» 

{FK columns ^ »o_fk, 
PW columns ^H_M) 


B 



«**»-•_« sewi 

«ruln*>-tt_ft rteger 
Mir 

««nd nufr»-S_ft rtogv 
«nrfnut>4>s_ft rfegv 


*^K»»-*o jd SERIAL 
n*£»_ft rtogw 
l<nd rsi>»-pr_ft rtagw 
<«oln»Uo_ft Htgir 
J«nolf*A.»-ho_A rtogv 
fdnuPMC.I Mi|i 

1 " ■* ■■ 



I 

|FK columns * Khuljk, 
PK columns^ actual _id| 


SER 

'«r*Hrlnc*»» JLvJJJ; rtqar . 


«■ 



Wumni* h_wT 1 

B 

i 

— 



bwJtaMH 

1 


, i — 

«<PK>»*jd SERAL c 


<4K»4jd SWAL 
«notm4»H** rtopr 
rtogir 

<««ncl aS»» -complex rteger 


<4>K»-em id SERAI c 
♦ndmPm.l rtagw 
<«nd mft»»-«_ft rSoger 
rtagar 

fdnPMd.» rtagw 

1 1 

«n<*ni»>.dlg_ft rtoger 
«natrut»4 ft rtogar 
«nol nft>»-*S_ft rStga^i 

«<FK»* 

^ r nil ifnnc - crtf 1 

<tFK>» 

fry f nhTMKi _[ if! (L 

1 

1 

(FKcolwrSsVcsci_lt. 
PK column* = cscijd) 

* loiumni » 

( columns sh id) 

' f 

K* vUUfTWO 5 Wl.l, 

If - - 

1 

i 




|FKcotf^ido_fc, 


«*K»<scijd sew. 

«<nol ni»-nM : vircfortlOr 

•to.vmtfMjaM . 
«nolrMPKdi.« rt 


<*K»-*vj* SERAI 

«mal v«ttwi(l00r 

' nu^MMTTMM VWtfl^SOr 


. t | b 



«*»*_.< (SERAI 

««l mm v»cf*r*(100r 

M»>s feMon( 3 r 

««wlnj»< m»wrt rtigii 
<«oln»>«y.» rttg« ( 

«ndn*»7».* rteg* 4 

-3 

b 

P— % 

«*K»>-*«njd S8SAL 

^ypt «rcNT(100r 







h«nol (»*»-*_* stag* 
«noHd»4l.» rteg* 


(From FPA Depot Orientation for New Developers [1]) 
Schema,! FPA Depot 5.1 



III. Interface Design 


The GUI of the FPA Depot was originally written by 
Jamie Szafran in Flex, an open-source version of Flash that is 
a combination of ActionScript and MXML, which called back 
RESTfully to the mid-level. Flash proved to have some 
security issues, and the decision was restructure the interface 
design using Ruby-on-Rails. The initial refactoring concluded 
on June 25, 2011, the main screen of the GUI looked as 
follow: 



A. Active Resource on Ruby: 

The GUI for the application version 4.1 was coding on 
Ruby on Rails, but without using Active Resource. Adam 
Dalton (NE-C2 branch), had the idea of implementing Active 
Resource in this application. Active Resource is a class in 
Rails that “ provides a framework for handling the connection 
between business objects and RESTful web services” [7]. We 
are using the XML methods that this class has to request and 
send data to the mid-level. Remember that the mid-level was 
created to receive and send the data using XML. The Active 
Resource model were created in such a way that the XML that 
was automatically generated by Rails would adhere to the API 
of the Java mid-level. 

*** Example of the code without Active Resource. This 
function is for getting all CSCIs. 


111 - .gj 

;T all cscas .ml 

c$cis_doc - r 

ntvtxil) 

3cscis - 

jet jst^c set l >Jf i - 1 ^ fier* (esc a sc : 

respoid_to 

t < 

tomat.h til 



*** Example of the code using Active Resource. This 
function is for getting all CSCIs. 






0C O C X 3 


c . 

1. ) 


With Active Resource we can do the same thing, but with 
fewer lines of code. 

B. New Interfaces Developed 

In order to change FPA Depot to the new version 5.1, and 
with the approval of our mentors, Ricardo Muniz and I 
decided to change the design of the GUI to a new one. In 
addition we worked on the design of new interfaces: 

1 . Login Interface: 

This interface has a requirement for the new FPA 
Depot 5.1. Here Ricardo Muniz created the method of 
user authentication. Using this method the user has to 
have an account in order to login to the application. 


FPA Depot v5.1 


DA‘» 
CSC I * 

fPA* 


ModH kagrs 
\tuh\H 


Sign in 


Wmww 


i!t?L 



2. Welcome Interface: 

In the main interface, we can see on the left of the page the 
new menu for the user that is different from version 4.1 (see 
figure 2). Here the user can select one option in order to edit, 
add or show the data that they need from the database. 


FPA Depot v5.1 


Signed m as Username Nttvo*? Sum on 


DAs 

CSCIs 

FPA's 

Model Packages 


Analysis 



Signed ft sue cessMy 


Writ erne to tor r— t ton Poito Depel apftic *toa Phase srierl a ratogert. 

J 


3. Development Activities Interface: 

This interface is to display all the data of development 
activities. If the user needs to edit a development activity, 
they just have to select one activity and change the data. The 










user can also create a new development activity, if they press 
the “new DA link” that is below the interface. 


FPA Depot v5.1 


Signed m as lusemame Not you? Stun out 

DA s Development Activities 

CSCI's 
FPA's 

Model Packages 
Analysis 


ID 

Number 

Name 

l 

U 

VER06 

2 

i 

VER07 

3 

a 

VERIO 

4 

i 

VER11 


Crate a l)A 


FPA Depot v5.1 


Signed in as iu sememe Not you? Sian out 


DAs 

CSCI's 

FPA's 

Model Packages 
Analysis 


Show Function Point Analysis 

ID: 2 

Name: fpa_4 

Creation Time: 2011-07-27 09:23:55.06 
Requirement: yes 
Granularity: typel 
Developer: Adams 


FPA Versions: 

• isu 9 f »o n ooas.is 

• 2gll g/ 28 LLgf .24.00 

• 2QU 08 02 14.43,20,54 


Edit I Create an FPA Version I Index 


4. Developer Interface: 

6. Analysis Interface: 

This is the developer interface for showing developer 

information. In this interface the user can see the FPAs that ^his interface has different options for analysis and 
belong to the developer and click it to see the FPA Versions. estimation of the function points and labour hours. 


FPA Depot v5.1 


Signed m as (Username Nol you? Sign out 


DAs 

CSCI’s 

FPA’s 


Show Developer 

ID: 1 

Name: Edwin miguel 


Model Packages 
Analysis 


_l 


Username: emmartiS 

CSCI: CMS 

FPA’s: 


• !pa_4 

• FPA 3 

• FPA 5 


Edit I Index 


FPA Depot v5.1 


Signed m as Username Not you? Sign on 


DA's 

CSCI's 

FPA's 


Model Packages 



Please choose an analysis lo perform: 


| Best-Fit by Actuals | | Best Fit by Model Package J 

| Estimate Point by Actuals | | Estimate Point by Model Package | 




5. Function Point Analysis Interface: 

In this interface the user can see all the information 
of the FPA that they selected, as well as see all of the FPA 
versions that exist inside of the FPA. In addition the user can 
create a new FPA version or edit an existing one. 


IV. Results 

Using Java, Ruby-on-Rails, and other tools, we 
achieved good results for this application. Some results that 
we achieved were: 

• Part of the Java mid-level and the Ruby-on-Rails 
GUI were changed to handle the new schema. 

• Parts of the database interface, XML processing, 
and results displaying were changed. 

• The XML schema in the accompanying release notes 
file was changed. 

• The GUI was changed to accommodate the new 
schema. 







V. Conclusion 


The purpose of this project was to edit an existing web 
application that will be used by developers in order to input 
and track function point analysis results from the Launch 
Control System (LCS) software development team. This web 
application will serve as a central point for storing all function 
analysis results. The LCS software architect team will also 
use the data from this app to estimate the effort required to 
implement customer requirements. In this internship my work 
was implementing schema changes in the Java server mid- 
level and changing XML format for FPA to conform to the 
new design. 

VI. Acknowledgements 

1 think that this internship at Kennedy Space Center has 
given me the experience to work hard in a real environment, 
and has also increased my chances of having success in 
finding a good job or even increased the chances of working 
permanently at NASA in the future. It has also helped to 
expand my knowledge and increased my self-esteem. 

Finally, 1 would like to thank all of the people that helped 
me to learn new methods and new languages to improve my 
work. Also I would like to thank all of the reviewers for 
helping to improve the work. This work was carried out as 
part of the project of NE-C3 and NE-C2 branch on the LCS 
project. 


[7] Ruby on Rails v3.0.9, “Class ActiveResource::Base,” 
http://api.rubvonrails.org/classes/ActiveResource/Base.html . 

[8] Karmanadham V.V.G.B. Gollapudi, “Function Points or 
Lines of Code? - An Insight”, Global Microsoft Business 
Unit, http://sst.umt.edu.pk 

[9] “Source lines of code,” 
http://en.wikipedia.org/wiki/Source lines of code 

[10] Andy Hertzfeld, “-2000 Lines of 

Codes”. http://www.folklore.org/StorvView.pv?project=Macin 
tosh&storv=Negative 2000 Lines Of Code.txt 

[11] “Lines of Codes” http://c2.com/cgi/wiki7LinesOfCode 

[12] Roger Heller, “An Introduction to Function Point 
Analysis”,2000-2002, http://www.qpmg.com/fp-intro.htm 


VII. References 


[1] J. Szafran, “ FPA Depot Orientation for New Developers,” 
Last revised 7 June 2011. 

[2] D. Megginson, “About Sax,” http://www.saxproiect.org . 

[3] D. Megginson, “Megginson Technologies Ltd.“2000 - 05 
- 05. 


[4] Package org.apache.http.protocol, “The Apache Software 
F undation” http://hc.apache.org/httpcomponents-core- 
ga/httpcore/apidocs/org/apache/http/protocol/HttpRequestHan 
dler.html . 2005-2011. 

[5] Benjamin, “ Diseno de Interfaces de Usuario Usables: Una Guia 
R&pida para Desarrolladores de Software Libre y de Codigo 
Abierto.” Web. 8 Dicember 2004. 

http :// mund og eek . net/ traduce iones/interfaces-usuario- 
usables/gui.html 

[6] Sam Ruby, Dave Thomas, David Heinemeier Hansson, 
“Agile Web Development with Rails,” The Facets of Ruby 
Series, 2011-03-31 


