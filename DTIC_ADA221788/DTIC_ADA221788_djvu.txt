"IK» MLt COPY 


AD-A221 788 


f nttred) 


u pj.fr Et*n wmucnoNS 

*' _ irr?w :ov.?.;:c:voro^' 

|2. COVT ACCESSION NO. 3. RECIPIENT'S CATALOG NUMsER 


I 4. TITLE (tndJubiititj 


5. TYPE Of REPORT 1 PERIOD COVERED 


Ada Compiler -Validation Summary Report iTeleSofi., >6 Nov. 1989 to 26 Nov. 1990 

TeleGen2+ Ada Development System, VAX/VMS 5.2 (Host) to -- -- ■■■ — 

4VME133A-20 (MC68020) (Target), ACVC 1.10, 89112611.1025 ®‘ * tP0RT * l * e£R 


7. AUTHOR^ 

IABG* 

Ottobrunn, federal Republic of Germany, 

V. PERFORMING ORGANIZATION AND ADDRESS 

1ABG, 

Ottobrunn, Federal Republic of Germany. 

11. CONTROLLING Off ICE NAME AND ApDAESS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-30S1 

1<7 MONITORING AGENCY NAME ? ADORE SS(/fdtf»'*rif from Controlling Office)' 
IABG, 

Ottobrunn, Federal Republic of Germany. 


16. DISTRIBUTION STATEMENT (ofthiiKtpon) 


I. CONTRACT OR (RANT NUMBER^ 


10. PROGRAM ELEMENT. PROJECT. TASK 
AREA A WORK UNIT NlWEERS 


112. REPORT DATE 


IS, SECURITY CLASS (of thu report) 

UNCLASSIFIED _ 

IS*. ^C^AS^fJCATlON-'DOMSGRADING 

J N/A 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STATEMENT (of the ebcvect enteredmtiock30 Itd'Htrent from Report! 


UNCLASSIFIED 


18. SUPPLEMENTARY notes 


DTIC 

I ELECTE ! 


18. IEYN0RDS (Continue on ttvtnt Hdt if neteuiry end identify by blockhumoer) 

Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL-STD- 
1815A, Ada Joint Program Office, AJPO 

20. ABSTRACT (Continue o'* re*erte Hdt if necttH'y endidentify by block number) 

TeleSoft, TeleGen2+ Ada Development System, Ottobrunn West Germany, Version 3.23, 

VAX 3800 under VAX/VMS 5.2 (Host) to Motorola MVME133A-20 (MC68020) bare machine (Targei ) 
ACVC 1.10. 


DD 1473 edition or t nov Ts is obsolete 

1 JAM 73 S/N 0i02*Lr»C14-6601 _ UNCLASSIFIED 

SECURITY CLASSIFICATION Of 7M1S PAGE (HhenDet* entered) 


90 04 24 OSfc 






AVF Control Number: AVF-IABG-06 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: #89112611.10225 
TeleSoft 

TeleGen2+ Ada Development System for 
VAX/VMS 5.2 x MVME133A-20 (MC63020) 


Completion of On-Site Testing: 
26 November 1989 


Prepared By: 
IABG mbH, Abt. SZT 
Einsteinstrasse 20 
D-8012 Ottobrunn 
West Germany 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3031 


« 


» 


Ada Compiler Validation Summary Report: 

Compiler Name: TeleGen2+ Ada Development System 
Version 3.23 

Certificate Number: #89112611.10225 

Host: VAX 3800 under VAX/VMS 5.2 

Target: Motorola MVME133A-20 (MC68020) 

bare machine 

Testing Completed 26 November 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



Dr. S. Heilbrunner 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 





Ada Validation Organization 

Director, Computer & Software Engineering Division 
Institute for Defense Analyses 
Alexandria, VA 22311 


‘y’/zi & 




Aak Joint Program Office 
Dr John Solomond 
Director 

Department of Defense 
Washington DC 20301 




NTlS CRA4I 
DTK, IAB 
UneO'lO:‘ .COd 
Jilflllf'C.’lUli.. 







TABLE OF CONTESTS 


to 


m 

CHAPTER 1 INTRODUCTION . 2 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.3 

1.3 REFERENCES.4 

1.4 DEFINITION OF TERMS . 4 

1.5 ACVC TEST CLASSES.5 

CHAPTER 2 CONFIGURATION INFORMATION . 8 

2.1 CONFIGURATION TESTED . 8 

2.2 IMPLEMENTATION CHARACTERISTICS . 9 

CHAPTER 3 TEST INFORMATION.15 

3.1 TEST RESULTS.15 

3.2 SUMMARY OF TEST RESULTS BY CLASS.15 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.16 

3.4 WITHDRAWN TESTS.18 

3.5 INAPPLICABLE TESTS . 15 

3.8 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . 20 

3.7 ADDITIONAL TESTING INFORMATION . 20 

3.7.1 Prevalidation.20 

3.7.2 Test Method.20 

3.7.3 Test Site.21 

APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER AND LINKER OPTIONS 


I 



















INTRODUCTION 


CHAPTER 1 


INTRODUCTION 




This Validation Summary Report (VSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-131SA 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard.-\ 


Evan though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language construct^. The testing also identifies behavior that is 
implementation dependent, but is . permitted by the Ada Standard. Six 
classes of tests are used. '.These tests are designed to perform checks at 
compile time, at link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This V SR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 



INTRODUCTION 


. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by the AVF according to 
procedures established by the Ada Joint Program Office and administered by 
the Ada Validation Organization (AVO). 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the avo may 
make full and free public disclosure of this report. In the United states, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than - those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 

or from: 

IABG mbH, Abt. SZT 
Einsteinstr. 20 
D-8012 Ottobrunn 
Vest Germany 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1301 North Beauregard Street 
Alexandria VA 22311 




INTRODUCTION 


1.3 REFERENCES 


1. Reference Manual for the Ada Programming Language, 
ANSI/HIL-STD-1815A, February 1983 and ISO 3552-1987. 

2. Ada Compiler Validation Procedures and Guidelines, Ada Joint 
Program Office, 1 ^anuary 1937. 

3. Ada Compiler Validation Capability Implementers' Guide, SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1933 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining' a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 


INTRODUCTION 


Inapplicable An ACVC test that uses features of the language that a 
test compiler is not rec.u'.red to support or may legitimately 

support in a way othei than the one expected by the test. 


Passed test An ACVC test for which a compiler generates the expected 

result. 

Target The computer which executes the code generated by the 

compiler. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 


Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test may be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce evrors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved m the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors a ‘e detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to verify that every syntax 
or semantic error in the test is detected. A Class 8 test is passed if 
every illegal construct that it contains is detected by the compiler. 


INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units m a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it ii rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FTLE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
tests. However, some tests contain values that require the test to be 




INTflODKCTTOM 


customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 



7 





CONFIGURATION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 


Compiler: TeleGen2+ Ada Development System 
Version 3.23 

ACVC Version: 1.10 

Certificate Number: #89112611.10225 


Host Computer: 

Machine: 

Operating System: 
Memory Size: 

Target Computer: 

Machine: 

Operating System: 
Memory Size: 


VAX 3800 
VAX/VMS 5.2 
32 MegaBytes 

Motorola MVME133A-20 (MC68020) 
bare machine 
1 MegaBytes 


C0N7TGTJF ATTON r-TORMATIOW 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a Compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and £ tests specifically check for such implementation 
differences. However, tests in other classes als' - ' characterize an 
implementation. The tests demonstrate the following characteristics: 

a. Capacities. 

1) The compiler correctly processes a compilation 
containing 723 variables in the same declarative part. (See 
test D29002K.) 

2) The compiler correctly processes tests containing 

loop statements nested to 65 levels. (See tests D55A03A..H 
(8 tests).) 

3) The compiler correctly processes tests containing 

block statements nested to 65 levels. (See test D56001B.) 

4) The compiler correctly processes tests containing 

recursive procedures separately compiled as subunits nested to 
10 levels. (See tests D64005E..G (3 tests).) 

b. Predefined types. 

1)- This implementation supports the additional predefined types 
LONG INTEGER and LGNG_FLOAT in the package STANDARD. (See 
tests B86001T..Z (7 tests).) 

c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 

constraints are checked are not defined by the language, tfhile 

the ACVC tests do not specifically attempt to determine the order 

of evaluation of expressions, test results indicate the following: 

1) Some of the default initialization expressions 
for record components are evaluated before any value is 
checked for membership in a component's subtype. (See test 
C32117A.) 

2) Assignments for subtypes are performed with the same 
precision as the base type. (See test C35712B.) 

3) This implementation uses no extra bits for extra precision 
and uses no extra bits for extra range. (See test C35903A.) 


■a 


CONFIGURATION INFORMATION 


4) NUMERIC_ERROR is raised for largest integer comparison and 

membership tests and no exception is raised for pre-definsd 

integer comparison and membership tests when an integer 

literal operand in a comparison or membership test is outside 
the range of the base type. (See test C45232A.) 

5) NUHERIC_ERROR is raised when a literal operand in a 

fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

1) The method used for. rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

2) The method used for rounding to longest integer is round 
to even. (See tests C46012A..Z (26 tests).) 

3) The method used for rounding to integer in static universal 
real expressions is round away frop zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC..ERROR or 
CONSTRAINT ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX.INT. For this 

implementation: 

1) Declaration of an array type or subtype declaration with more 
than SYSTEM.HAX.INT components raises NUMERIC_ERROR for a 
two dimensional array subtype where the large dimension is the 
second one. (See test C36003A) 

2) CON5TRAINT_ERROR is raised when 'LENGTH is applied to ar. 
array type with INTEGER'LAST + 2 components. (See test 
C36202A.) 

3) NUMERIC_ERROR is raised when an array type with 

SYSTEM.MAX INT + 2 components is declared. (See test 

C36202B.) ” 


CONFIGURATION INFORMATION 


4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. (See test C52103X.) 

5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONST*AINT_ERROR when the 
length of a dimension is ca~ rnlated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

6) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINTJSRROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype. (See test C52013A.) 

7) In assigning two-dimensional array types, the expression 
is not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression’s subtype is 
compatible with the target's subtype. (See test C52013A.) 

8) A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC ..ERROR or CONSTRAINTJSRROR 
either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However lengths 
must match in array slice assignments. This implementation 
raises no exception. (See test E52103Y.) 


f. Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINTJSRROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that index subtype checks are 
made as choices are evaluated. (See tests C43207A and 
C43207B.) 

2) In the evaluation of an aggregate containing subaggregates, 
not all .choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

3) CONSTRAINT_ERROR is raised after all choices are 
evaluated when a bound in a non-null range of a non-null 
aggregate does not belong to an index subtype. (See test 
E43211B.) 


CONFIGURATION INFORMATION 


h. Pragmas. 

1) The pragma INLINE is supported for procedures and for non¬ 
library functions. (See tests LA3004A..B (2 tests), EA3004C..D 
(2 tests), and CA3004E..F (2 tests).) 


i. Generics. 

This implementation creates a dependence between a generic body 

and those units which instantiate it. As allowed by IA-408/11, if 

the body is compiled after a unit that instantiates it, then that 

unit becomes obsolete. 

1) Generic specifications and bodies can be compiled 

in separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 
compiled in separate compilations. (See tests CA1012A and 
CA2009F.) 

3) Generic library subprogram specifications and bodies can 
be compiled in separate compilations. (See test 
CA1012A.) 

4) Generic non-library package bodies as subunits can 
be compiled in separate compilations. (See test CA2009C.) 

5) Generic non-library subprogram bodies can be 
compiled in separate compilations from their stubs. (See test 
CA2009F.) 

6) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


7) Generic package declarations and bodies can be 
compiled in separate compilations. (See tests. CA2009C, 


CONFIGURATION INFORMATION 


BC3204C, and BC3205D.) 

8) Generic library package specifications and bodies can 
be compiled in separate compilations. (See tests 
BC3204C and 3C3205D.) 

9) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


Input and output. 

1) The package SEQUENTIAL_IO cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

2) The package DIRECT_IO cannot be instantiated with uncon¬ 

strained array types or record types with discriminants with¬ 
out defaults. (See tests AE2101H, EE2401D, and EE2401G.) 

3) Modes IN_FILE and OUT FILE are supported for SEQUENTIAL 10. 
(See tests CE2102D..E,~CE2102N, and CE2102P.) 

4) Modes IN^FILE, OUT FILE, and INOUT FILE are supported for 
DIRECT.IO. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE21G2V.) 

5) Modes INJPILE and OUTJFILE are supported for text files. 
(See tests CE3102E and CE3102I..K (3 tests).) 

6) RESET and DELETE operations are supported for 
SEQUENTIAL.IO. (See tests CE2102G and CE2102X.) 

7) RESET and DELETE operations are supported for DIRECT JCO. 
(See tests CE2102K and CE2102Y.) 

8) RESET and DELETE operations are supported for text 
files. (See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 
CE3114A.) 

9) Overwriting to a sequential file does not truncate the file. 
(See test CE2203B.) 

10) Temporary sequential files are given names and not 

deleted when closed. (See test CE2108A.) 

11) Temporary direct files are given names and not deleted when 
closed. (See test CE2108C.) 

12) Temporary text files are given names and not deleted 






OONFIGtlRATIOW TNFOKKAtlON 


when closed. (See test CE3112A.) 

13) More than one internal file can be associated with 

each external file for sequential files when reading 

only. (See tests CE2107A..E (5 tests), CE2102L, CE2110B, and 
CE2111D.) 

14) More than one internal file can be associated with 

each external file for direct files when reading only. (See 
tests CE2107E..H (3 tests), CE2110D and CE2111H.) 

15) More than one internal file can be associated with 

each external file for text files when reading only (See 

tests CE3111A..E (5 tests), CE3114B, and CE3115A.) 


TEST INFORMATION 


CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 315 tests were inapplicable to this implementation. 
All inapplicable tests were processed during validation testing except for 
201 executable tests that use floating-point precision exceeding 
that supported by the implementation. Modifications to the code, 
processing, or grading for 13 tests vere required to successfully 
demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

0 

E 

L 

TOTAL 

Passed 

127 

1129 

2018 

16 

23 

45 

3353 

Inapplicable 

2 

9 

297 

1 

5 

1 

315 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT 

2 

3 

4 

5 

6 

TEST CHAPTER 

7 8 9 

10 

11 

12 

13 

14 

TOTAL 

Passed 

198 

373 

544 

245 

171 

99 

150 

332 

132 

36 

250 

340 

278 

3358 

N/A 

14 

76 

136 

3 

1 

0 

6 

0 

5 

0 

2 

29 

43 

315 

Vdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

630 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN 

TESTS 





The following < 

44 tests were 

withdrawn 

from ACVC 

Version 1.10 


at the time of 

this validation: 




E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A53C 

CD2A63D 

CD2A66A 

CD2A65B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A75A 

CD2A75B 

CD2A76C 

CD2A76D 

CD2A31G 

CD2A33G 

CD2A34N 

CD2A84M 

CD50110 

CD2B15C 

CD7205C 

CD2D11B 

CD5007B 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CD7204B 

CD7205D 

CE2107I 

CE3111C 

CE3301A 

CE3411B 





See Appendix D 

for the reason that each of these 

tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 315 tests were inapplicable for 
the reasons given below. 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX_DIGITS: 


C24113L..Y (14 testa) 


C35705L..Y (14 tests) 






TEST INFORMATION 


« 


C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..2 (15 tests) 
C46012L..Z (15 tests) 


b. C35508I, C35508J, C35508M, and C35508W are not applicable because 
they include enumeration representation clauses for BOOLEAN types 
in vhich the representation values are other than (FALSE *> 0, 

TRUE *> 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 


c. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORTJFLOAT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORT_INTEGER: 

C45231B C45304B C45502B C45503B C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D BSSOOIV 

CD7101E 

e. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because they acquire a value of SYSTEM.MAX MANTISSA greater than 
32. 


f. D64005G is inapplicable because processing deeply nested 
recursive calls of procedures caused storagejsrror under the 
option settings used for this validation. 

g. C86001F is not applicable because, for this implementation, the 
package TEXTJtO is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXTJtO, and • 
hence package REPORT, obsolete. 

h. B86001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, L0NG_INTEGER, or SH0RT_INTEGER. 

i. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

j. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONGJTiOAT, or SH0RT_FT<0AT. 

k. CA2009C, CA2009F, BC3204C and BC3205D are not applicable because 

this implementation creates a dependence between a generic body 
and those units which instantiate it (See Section 2.2.i and 







TEST INFORMATION 


Appendix F of the Ada Standard). 

l. LA3004B, EA3004D, and CA3004F are not applicable because this 
implementation does not support pragma INLINE for library 
functions. 

m. CD1009C, CD2A41A..B (2 tests), CD2A41E and CD2A42A..J (10 tests) 
are not applicable because of restrictions on 'SIZE length clauses 
for floating point types. 

n. CD2A61I..J (2 tests) are not applicable because of restrictions on 
'SIZE length clauses for array types. 

o. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because of restrictions on 'SIZE length clauses for access types. 

p. CD4041A is not applicable because of restrictions on record 
representation clauses with 32 bit alignment. 

q. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL..IO with unconstrained array types and record types with 

discriminants without defaults. These instantiations are rejected 

by this compiler. 

r. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_I0 with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

s. CE2102D is inapplicable because this implementation supports 

CREATE with INJTLE mode for SEQUENTIAL_I0. 

t. CE2102E is inapplicable because this implementation supports 

CREATE with OUT.FILE mode for SEQUENTIAL_I0. 

u. CE2102F is inapplicable because this implementation supports 

CREATE with INOUTJ'ILE mode for DIRECT_I0. 

v. CE2102I is inapplicable because this implementation supports 

CREATE with INJFILE mode for DIRECT.IO. 

w. CE2102J is inapplicable because this implementation supports 

CREATE with 0UT_FILE mode for DIRECT.IO. 

x. CE2102N is inapplicable because this implementation supports OPEN 
with IN_FILE mode for SEQUENTIAL_IO. 

y. CE21020 is inapplicable because this implementation supports RESET 
with INJFILE mode for SEQUENTIAL.IO. 

z. CE2102P is inapplicable because this implementation supports OPEN 


1 / 


TEST INFORMATION 


with OUT_FILE inode for SEQUENTIAL JO. 

aa. CE2102Q is inapplicable because this implementation supports RESET 
with OUTJILE mode for SEQUENTIAL JO. 

ab. CE2102R is inapplicable because this implementation supports OPEN 
with INOUTJILE mode for DIRECT_IO. 

ac. CE2102S is inapplicable because this implementation supports RESET 
with INOUTJILE mode for DIRECT JO. 

ad. CE2102T is inapplicable because this implementation supports OPEN 
with INJILE mode for DIRECT JO. 

ae. CE2102U is inapplicable because this implementation supports RESET 
with INJILE mode for DIRECT JO. 

af. CE2102V is inapplicable because this implementation supports OPEN 
with OUTJILE mode for DIRECT JO. 

ag. CE2102W is inapplicable because this implementation supports RESET 
with OUTJILE mode for DIRECT JO. 

ah. CE2107B..E (4 tests), CE2107L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing 

for sequential files. The proper exception is raised when 

multiple access is attempted. 

ai. CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempt'd. 

aj. CE3102E is inapplicable because text file CREATE with INJILE mode 
is supported by this implementation. 

ak. CE3102F is inapplicable because text file RESET is supported by 
this implementation. 

al. CE3102G is inapplicable because text file deletion of an external 
file is supported by this implementation. 

am. CE3102I is inapplicable because text file CREATE with OUTJILE 
mode is supported by this implementation. 

an. CE3102J is inapplicable because text file OPEN with INJILE mode 
is supported by this implementation. 

ao. CE3102K is inapplicable because text file OPEN with OUTJILE mode 
is supported by this implementation. 


I 5 







TEST INFORMATION 


* 


ap. CE3111B, CE3111D..E (2 tests), CE3114B, and CE3115A are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 


3.6 TEST, PROCESSINO, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected? and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 13 tests. 

The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B71001E B71001K B71001Q B71001W BA3006A BA3006B . 

BA3007B BA3008A BA3008B BA3013A (6 and 7M) 

Tests C34005G, C34005J and C34006D returned the result FAILED because of 
false assumptions that an element in an array or a record type may not be 
represented more compactly than a single object of that type. The AVO has 
ruled these tests PASSED if the only message of failure occurs from the 
requirements of T'SIZE due to the above assumptions (T is the array type). 

3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVG Version 1.10 produced 
by the TeleGen2 Ada Development System for a computing system based on 
the same instruction set architecture was submitted to the AVF by the 
applicant for review. Analysis of these results demonstrated that the 
TeleGen2 System successfully passed all applicable tests, and it 
exhibited the expected behavior on all inapplicable tests. The applicant 
certified that testing results for the computing system of this validation 
would be identical to the ones submitted for review prior to validation. 


3.7.2 Test Method 


*20 






TEST INFORMATION 


Testing of the TeleGen2+ Ada Development System using ACVC Version 1.10 
was conducted on-site by a validation team from the AVF. The 
configuration in which the testing was performed is described by the 
following designations of hardware and software components: 


Host: VAX 3800 under VAX/VHS 5.2 

Target: Motorola MVME133A-20 (MC68020) 

bare machine 

Communication Network: RS 232 

A tape containing the customized test suite was loaded onto the host 
computer. Results were collected on the host computer where they were 
evaluated and archived. 

The compiler was tested using command scripts provided by TeleSof.t 
and reviewed by the validation team. The tests were compiled using the 
command 

TSADA/E63/ALA/OPTIMIZE/VIRTUAl_SPACE»3000/- 
ENABLE/CPtJ»MC68020/FP_INLINE <test file> 

and linked witL command 

TSADA/E68/L^T./LOADJ!ODULE»<testname)/- 
0PTI0NS»<options file) <main unit) 


The /LIST qualifier was added to the compiler call for class 9, expanded 
and modified tests. See Appendix E for « cplanation of compiler and linker 
switches. The <options file) contained a specification of memory addresses 
for the target computer. 

Tests were compiled, linked, and executed (as appropriate) using one com¬ 
puter. Test output, compilation listings, and job logs were captured on 
tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at TeleSoft, San Diego, USA, and was completed on 
26 November 1989. 



DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 


TeleSoft has submitted the following Declaration of Conformance concerning 
the TeleGen2+ Ada Development System. 


DECLARATION OF CONFORMANCE 


Compiler Implementor: TELESOFT 

Ada Validation Facility: IABG, Dept. SZT, D-8012 Ottobrunn 
Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Compiler Name: 
Version: 

Host Architecture ISA: 
OS Sc VER #: 

Target Architecture ISA: 
OS Sc VER #: 


Base Configuration 

TeleGen2+ Ada Development System 
3.23 

VAX 3800 
VAX/VMS 5.2 

Motorola MVME133A-20 (MC68020) 
Bare machine 

Implementor’s Declaration 


I, the undersigned, representing TELESOFT, have implemented no deliberate extensions 
to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) listed in this 
declaration. I declare that TELESOFT is the owner of record of the Ada language 
compilers listed above and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and registrations for Ada 
language compiler(s) listed in this declaration shall be made only in the owner’s corporate 
name. 

Date: 


General Counsel 


Owner’s Declaration 



I, the undersigned, representing TELESOFT, take full responsibility for implementation 
and maintenance of the Ada compiler(s) listed above, and agree to the public disclosure of 
the final Validation Summary Report. I declare that all of the Ada language compilers 
listed, and their host/target performance are in compliance with the Ada Language 
Standard ANSI/MIL-STD-1815A. 



Date: 


/o2- /- T) 




APPENDIX F OF THE Ada STANDARD 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauser. The implementation-dependent 
characteristics of the TeleGen2+ Ada Development System, as described in 
this Appendix, are provided by TeleSoft. The description is given in terms 
of UNIX based TeleGen2 Systems) but it applies equally well to the VHS 
based Tele0en2+ system. Unless specifically noted otherwise, references in 
this appendix are to compiler documentation and not to this report. 
Implementation-specific portions of the package STANDARD, which are not a 
part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147483643 .. 2147483647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E+38; 
type LONG FLOAT is digits 15 

range -8;98846567431158E+307 .. 8.9884656743U58E+307; 

type DURATION is delta 2#1.0|E-14 range -86400.0 . 86400.0; 


end STANDARD; 


CHAPTER. 3: LRM ANNOTATIONS 


CHAPTER. CONTENTS 


3 LRM ANNOTATIONS --- 

3.1 LEM Chapter 2 - Lexical Elements ............................................ 

3.2 LEM Chapter 3 - Declarations and Types ................................. 

3.3 LEM Chapter 4 - Names and Expressions .. 

3.4 LEM Chapter 9 - Tasks..... 

3.5 LEM Chapter 10 - Program Structure and Compilation Issues 
3.0 LEM Chapter 11 - Exceptions .................................................... 

3.7 LEM Chapter 13 - Implementation-Dependent Features .......... 

Table: Summary of LRM Chapter 13 Features .................... 

3.4.1 Pragma Pack. ..............................m..............mm.....m............... 


3.7.2 (LRM 13.2) Length Clauses 

3.7.2.1 (a) Specifying Size: T’Size. 

3.7.2.2 (b) Specifying Collection Size: Tutorage-Size. .. 

3.7.2.3 (c) Specifying Storage for Task Activation: T’Storage-Size. 

3.7.2.4 (d) Specifying ’Small for Fixed Point Types: T’Small. 

3.7.3 [LRM 13.3| Enumeration Representation Clauses. 

3.7.4 [LRM 13.4| Record Representation Clauses. ............................................... 

3.7.5 [LRM 13.5} Address Clauses.... 

3.7.6 [LRM 13.6} Change of Representation....... 

3.7.7 (LRM 13.7) The Package System 

3.7.8 [LRM 13.7.2} Representation Attributes 

3.7.9 [LRM 13.7.3} Representation Attributes of Real Types................... 

3.7.10 [LRM 13.8} Machine Code Insertions. 




• •••••••••••••••••A* •>••••<»••»•• • •••••••••••••••««•••• 




3.7.11 (LRM 13.9] Interface to Other Languages. 

3.7.12 (LRM 13.10} Unchecked Programming.. 

3.8 LEM Appendix 7 for TeleGen2 ... 

Table: LRM Appendix F Summary ........... 

3.8.1 Implementation-Defined Pragmas 




3.8.1.1 Pragma Comment.—....... 

3.8.1.2 Pragma Linkname. 

3.8.1.3 Pragma ................................ 

3.8.1.4 Pragma No_Suppress.. 

3.8.2 Implementation-Dependent Attributes. 

3.8.2.1 ’Address and ’Offset.. 

5.8.2.2 Extended Attributes for Scalar Types. 

3.8.2.2.1 Integer Attributes . 


31JUL89 


R£F-134TN-V1.1(U/C8) © 1989 TeleSoft 










































CHAPTERS: LRM ANNOTATIONS 
CHAPTER CONTENTS 


3.8.2.2.2 Enumeration Type Attributes 

3.5.2.2.3 Floating Point Attributes ..... 

3.8.2.2.4 Fixed Point Attributes. 


3.8.3 Package System. 




3-22 

3-25 

3-27 

3-31 



RE?-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 








IRM ANNOTATIONS 


3. LRM ANNOTATIONS 

TeleC«n2 compiles the full ANSI Ada language as defined by the Reference Manual for the 
Ada Programming Language (LRM) ( ANSI/MI L-STD-1815A). This chapter describes the 
portions of the language that are designated by the LRM as implementation dependent for * 
compiler and run-time environment. 

The information is presented in the order in which it appears in the LRM. In general, 
however, only those language features that are not fully implemented by the current release of 
TeieGen2 or that require clarification are included. The features that are optional or that a/ e 
implementation dependent, on the other hand, are described in detail. Particularly relevant are 
the sections annotating LRM Chapter 13 (Representation Clauses and Implementation- 
Dependent Features) and Appendix F (Implementation-Dependent Characteristics). 


3.1. LRM Chapter 2 - Lexical Elements 

[LRM 2.1] Character Set. The host and target character set is the ASCII character set. 

[LRM 2.2] Lexical Elements,Separators, and Delimiters. The maximum number of 
characters on an Ada source line is 200. 

[LRM 2.8] Pragmas. TeleGen2 implements all language-defined pragmas except pragma 
Optimize. If pragma Optimize is included in Ada source, the pragma will have no effect. 
Optimization is implemented by using pragma Inline and the optimizer. Pragma Inline is not 
supported for library-level subprograms. Pragma Priority is not supported for main programs. 

Limited support is available for pragmas Memory-Size, Storage-Unit, and System-Name; 
that is, these pragmas are allowed if the argument is the same as the value specified in thq 
System package. 

Pragmas Page and List are supported in the context of source/error listings; refer to the 
Compiler/Linker chapter of the TeieCen2 User Guide for more information. 


3.2. t«RM Chapter 3 - Declarations and Types 

[LRM 3.2.1] Object Declarations. TeleCen2 does not produce warning messages about the 
use of uninitialized variables. The compiler will not reject a program merely because it contains 
such variables. 

[LRM 3.5.1] Enumeration Types. The maximum number of elements in an enumeration 
type is 32767. This maximum can be realized only if generation of the image table for the type 
has been deferred, and there are so references in the progT.vm that would cause the image table to 
be generated. Deferral of image table generation for an enumeration type, P, is requested by the 
statement: 

pragma Images (P, Deferred); 

Refer to “Implementation-Defined Pragmas,’ 1 in Section 3.8.1, for more information on pragma 
Images. 


31JT7L89 


REP-1347N-Vl.l(U/68) © 1989 TeleSoft 


3-1 



TeleGen2 Reference Information for UNIX/G8K Hosts 


[LRM 3.5.4] Integer Typos. There are two predefined integer types: Integer and 
Long_integer. The attributes of these types are shown in Table 3-1. Note that using explicit 
integer type definitions instead of predefined integer types should result in more portable code. 

Table 3-1. Attributes of Predefined Types Integer and Long In teger 


Attribute 

Type 

Integer 

Long-Integer 

’Last 

’Size 

’Width 

•32768 
32767 ‘ 
16 

6 

-2147483648 

2147483647 

32 

11 


[LRM 3.5.8] Operations of Floating Point Types. There are two predefined floating point 
types: Float and Long-Float. The attributes of types Float and Long-Float are shown in Table 
3-2. This floating point facility is based on the IEEE standard for 32-bit and 64-bit numbers. 
Note that using explicit real type definitions should lead to more portable code. 

The type Short .Float is not implemented. 

Table 3-2. Attributes of Predefined Types Float ard LongJFloat 


Attribute 

Type 

Float 

Long-Float 

’Machine-Overflows 

TRUE 

TRUE 

’Machine-Rounds 

TRUE 

TRUE 

’Machine-Radix 

2 

2 

’Machine-Mantissa 

24 

53 

’Machine-Emax 

127 

1023 

’Machine-Emin 

-125 

-1021 

’Mantissa 

21 

51 

’Digits 

6 

15 

’Size 

32 

64 

’En >x ’ 

84 

204 

’Saft_Emax 

125 

1021 

’Epsilon 

9.S3674E-07 

8.88178E-16 

’Safe-Large 

4.25253E+37 

2.24711641857789E+307 

’Safe-Small 

1.17549E-38 

2.22507385850721E—308 

’Large 

1.93428E+25 

2.57110087081438E+61 

’Small 

2.58494E-26 

1.99469227433161E—62 


3-2 


REF-1347N-Vl.l(U/68) © 1989 TeleSoft 


3UTJL89 





LRM ANNOTATIONS 


3.1. LRM Chapter 4 - Names and Expressions 

[LRM 4.10] Universal Expressions. There is no limit on the accuracy of real literal 
expressions. Real literal expressions are computed using an arbitrary-precision arithmetic 
package. 


3.2. LRM Chapter 9 - Tasks 

[LRM 9.6] Delay Statements, Duration, and Time. This implementation uses 32-bit 
fixed point numbers to represent the type Duration. The attributes of the type Duration are 
shown in Table 3-3. 


Table 3-3. Attributes of Type Duration 


Attribute 

Value 

’Delta 

’First 

’Last 

0.000061035156250 

•86400.0 

86400.0 


[LRM 9.8] Priorities. Sixty-four levels of priority are available to associate with tasks 
through pragma Priority. The predefined subtype Priority is specified in the package System as 
subtype Priority is Integer range 0..S3; 

Currently the priority assigned to tasks without a pragma Priority specification is 31; that is: 

(System.Priority'Pirst + System.Priority’Last) / 2 

[LRM 9.11] Shared Variables. The restrictions on shared variables are only those specified 
in the LRM. 


3.3. LRM Chapter 10 - Program Structure and Compilation Issues 

[LRM 10.1] Compilation Units - Library Units. All main programs are assumed to be 
parameterless procedures or functions that return an integer result type. 


3.4. LRM Chapter 11 - Exceptions 

[LRM ll.l] Exception Declarations. Numeric-Error is raised for integer or floating point 
overflow and for divide-by-zero situations. Floating point underflow yields a result of zero without 
raising an exception. 

Program-Error and Storage-Error are raised by those situations specified in LRM Section 
11.1. Exception handling is also discussed in the Programming Guide chapter. 


3-3 


04JAN90 


REF-1347N-V1.2a(U/63) © 1990 TeleSoft 



TeleG«n2 Reference Information for UNTX/88K Hosts 


3.7. LRM Chapter 13 - Implementation-Dependent Features 

As shown in Table 3-4, the current release of TeleGen2 supports most LRM Chapter 13 
facilities. The sections below the table document those LRM Chapter 13 facilities that are either 
not implemented or that require explanation. Facilities implemented exactly as described in the 
LRM are not mentioned. 


Table 3-4. Summary of LRM Chapter 13 Features for TeleGen2 


13.1 Representation Clauses 

Supported, except as indicated below (LRM 13.2 — 
13.5). Pragma Pack is supported, except for dynam¬ 
ically sized components. For details on the 
TeleGen2 implementation of pragma Pack, see Sec¬ 
tion 3.7.1. 

13.2 Length Clauses 

Supported: 

’Size 

’StorageJSize for collections' 

’Storage_Size for task activation 
’Small for fixed-point types 

See Section 3.7.2 for more information. 

13.3 Enumeration Rep. Clauses 

Supported, except for type Boolean or types derived 
from Boolean. (Note: users can easily define a non- 
Boolean enumeration type and assign a representa¬ 
tion clause to it.) 

13.4 Record Rep. Clauses 

Supported except for records with dynamically sized 
components. See Section 3.7.4 for a full discussion 
of the TeleGen2 implementation. 

13.5 Address Clauses 

Supported for: objects (including task objects). 

Not supported for: packages, subprograms, or task 
units. 

See Section 3.7.5 for more information. 

13.5.1 Interrupts 

For interrupt entries, the address of a TeleGen2- 
defined interrupt descriptor can be given. See “In¬ 
terrupt Handling” in the *Programming Guide 
chapter for more information. 

13.6 Change of Representation 

Supported, except for types with record representa¬ 
tion clauses. 

——— Continued on the next page —— 


3-4 


R£F-1347N-Vl.l(U/88) © 1989 TeleSoft 


31JUL89 



. _ LRM ANNOTATIONS 


Table 3-4. Summary of LRM Chapter 13 Features for TeleGen2 (Contd) 


——— Continued from the previous page —~ j 

13.7 Package System 

Conforms closely to LRM model. Refer to Section 
3.7.7 for details on the TeleCen2 implementation. 

13.7.1 System-Dependent Named 
Numbers 

Refer to the specification of package System (Sec¬ 
tion 3.7.7). 

13.7.2 Representation Attributes 

Implemented as described in LRM except that 
’Address for packages is unsupported. 

’Address of a constant yields a null address. 

13.7.3 Representation Attributes of 
Real Types 

See Table 3-2. 

13.3 Machine Code Insertions 

Fully supported. The TeieGen2 implementation 
defines an attribute, ’Offset, that, along with the 
language-defined attribute ’Offset, allows addresses 
of objects and offsets of data items to be specified in 
stack frames. Refer to “Using Machine Code Inser¬ 
tions” in the Programming Guide chapter for a full 
description on the implementation and use of 
machine code insertions. 

13.9 Interface to Other 

Languages 

Pragma Interface is supported for Assembly, C, 
UNIX, and Fortran. Refer to “Interfacing to Other 
Languages” in the Programming Guide chapter for 
a description of the implementation and use of prag¬ 
ma Interface. 

13.10 Unchecked Programming 

Supported except as noted below (LRM 13.10.2). 

13.10.1 Unchecked Storage Deallo¬ 
cation 

Supported. 

13.10.2 Unchecked Type Conver¬ 
sions 

Supported except for unconstrained record or array 
types. 


3.7.1. Pragma Pads. This section discusses how pragma Pack is used in the TeleGen2 

implementation. 

a. With Boolean Arrays. You may pack Boolean arrays by the use of pragma Pack. 
The compiler allocates 16 bits for a single Boolean, 3 bits for a component of an unpacked 
Boolean array, and 1 bit for a component of a packed Boolean array. The first figure illustrates 
the layout of an unpacked Boolean array; the one below that illustrates a packed Boolean array: 


R£T-1347N-Vl.l(U/8S) © 1989 TeJeSoft 


3-5 


31JUL89 



























Tele€en2 Reference Information for UNIX/08K Hosts 


——— Unpacked Boolean array:- 

Unpacked_Bool_ArrJType is array (Natural range 0..1) of Boolean 
U_B__Arr:~Unpacked~Bool_Arr_Type := (True,False); 

MSB LSB 

7 0 

Element 0 
Element 1 


0 

1 

0 ■ 

T 


Packed Boolean array: 


Packed_Bool ArrjType is array (Natural range 0..6) of Boolean; 
pragma Fade”(Packed Bool_Arr_Type) ; 

P_B_Arr: Packed_Bool_Arr”Type :=» (P_B Arr(O) => True, 

”P~B Arr(5) *>”True7 others *> PalseJ; 


MSB 
Bit: IS 


LSB 

0 


Element: 0 1 2 3 4 5 6 


(unused) 


b. With Records. You may pack records by use of pragma Pack. Packed records follow 
these conventions: 

\ 

1. The total size of the record is a multiple of 8 bits. 

2. Packed records may cross word boundaries. 

3. Records are packed to the bit level if the elements are themselves packed. 

Below is an example of packing in a procedure, Rep _P roc, that defines three records of different 
lengths. Objects of these three packed record types are components of the packed record Rec. 
The storage allocated for Rec is 16 bits; that is, it is maximally packed. 


s-c 


REP-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JULS9 





LRM ANNOTATIONS 


procedure Sep-Proc is 

type A1 is array (Natural range 0 .. 8) of Boolean; 
pragma Pack (Al); 

type A2 is array (Natural range 0 .. 3) of Boolean; 
pragma Pack (A2); 

type A3 is array (Natural range 0 .. 2) of Boolean; 
pragma Pack (A3); 

t 

type A_Rec is 
record 

One : Al; 

Two : A2; 

Three : A3; 
end record; ' 
pragma Pack (A__Rec); 

Rec : AJLec; 

begin 

Rec.One :* ( 0 *> True, 1 *> False, 2 *> False, 

3 »> False, 4 »> True, 5 =*> False, 

8 *> False, 7 *> False, 8 »> True ); 

Rec.Two (3) :* True; 

Rec.Three (1) s* True; 

end RepJProc; 

3.7.2. [LRM 13.2] Length Clauses. A length clause specifies an amount of storage 
associated with a type. The sections below describe how length clauses are supported in this 
implementation of TeleCen2 and how to use length clauses effectively within the context of 
TeleGen2. 

3.7.2.I. (a) Specifying Sise: T’Sixe. The prefix T denotes an object. The size specification 
must allow for enough storage space to accommodate every allowable value of these objects. The 
constraints on the objectand on its subcomponents (if any) must be static. For an unconstrained 
array type, the index subtypes must also be static. 

For this implementation, MinJSize is the smallest number of bits logically required to hold 
any value in the range; no sign bit is allocated for non-negative ranges. Biased representations 
are not supported; e.g., a range of 100 .. 101 requires 7 bits, not 1. Warning: in the current 
release, using a size clause for a discrete type may cause inefficient code to be generated. For 
example, given 

type Nibble is range 0 .. 15; 
for Nibble’Size use 4; 

...each object of type Nibble will occupy only 4 bits, and relatively expensive bit-field instructions 
will be used for operations on Nibbles. (A single declared object of type Nibble will be aligned on 
a storage-unit boundary, however.) 

For floating-point and access types, a size clause has no effect on the representation. (Task 
types are implemented as access types). 




TeleGen2 Reference Information for UNIX/68K. Hosts 


For composite (array or record) types, a size clause acts like aa implicit pragma Pack, 
followed by a check that the resulting size is no greater than the requested size. Note that the 
composite type will be packed whether or not it is necessary to meet the requested size. The size 
clause for a record must be a multiple of storage units. 

3.7.2.2. (b) Specifying Collection Size: T’Storage_Size. A collection is the entire set of 
objects created by evaluation of allocators for an access type. 

The prefix T denotes an access type. Given an access type Acc_Type, a length clause for a 
collection allocated using AccJType objects might look like this: 

for AccJType*Storage-Size use 64; 

In Tel«Gen2, the above length clause allocates from the heap 64 bytes of contiguous memory for 
objects created by AccJType allocators. Every time a new object is created, it is put into the 
remaining free part of the memory allocated for the collection, provided there is adequate space 
remaining in the collection. Otherwise, a storage error is raised. 

Keeping the objects in a contiguous span of memory allows system storage reclamation 
routines to deallocate and manage the space when it is no longer needed. Pragma Controlled can 
prevent the deallocation of a specified collection of objects. Objects can be explicitly deallocated 
by calling the Unchecked-Deallocation procedure instantiated for the object and access types. 

Header Record 

In this configuration of TeleGen2, information needed to manage storage blocks in a collection is 
stored in a collection header that requires 20 bytes of memory, adjacent to the collection, in 
addition to the value specified in the length clause. 

Minimum Size 

When an object is deallocated from a collection, a record containing link and size information for 
the space is put in the deallocated space as a placeholder. This enables the space to be located 
and reallocated. The space allocated for an object must therefore have the minimum size needed 
for the placeholder record. For this TeleGen2 configuration, this minimum size is the sum of the 
sizes of an access type and a integer type, or 6 bytes. 

Dynamically Sized Objects 

When a dynamically-sized object is allocated, a record requiring 2 bytes accompanies it to keep 
track of the size of the object for when it is put on the free list. The record is used to set the size 
field in the placeholder record since compaction may modify the value. 

Size Expressions 

Instead of specifying an integer in the length clause, you can use an expression to specify storage 
for a given number of objects. For example, suppose an access type Dict_Ref references a record 
Symbol JRec containing five fields: 


3-8 


REP-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 



_LiLM ANNOTATIONS .. 


type Tag is String(l..8); 
type SynboL-Rec; 

type Diet-Ref is access SymboL-Ree; 

type SyaboLJIec is 
record 

Left : Dict-Ref; 

Sight : Dict-Ref; 

Parent : Dict_Sef; 

Value : Integer; 

Key : Tag; 
end record; 

To allocate 10 Symbol_Rec objects, you could use an expression such as: 

for Dict-Ref'Storage-Size use ((SyoboLJlec’Size * 10)+20); 

where 20 is the extra space needed for the header record. (SymboLRec is obviously larger than 
the minimum size required, which is equivalent to one access type and one integer.) 

In another implementation, Symbol_Rec might be a variant record that uses a variable 
length for the string Key: 

type SyoboLJlec (Last : Natural :=0) is 
record 


Left 

Dict-Ref; 

Right 

Diet-Ref; 

Parent 

Diet-Ref; 

Value 

Integer; 

Key 

String(l..Last); 


end record; 

In this case, Symbol_Rec objects would be dynamically sized depending on the length of the 
string for Key. Using a length clause for Dict_Ref as above would then be illegal since 
SymbolJRec’Size cannot be consistently determined. A length clause for SymbolJRee objects, as 
described in (a) above, would be illegal since not all components of SymboLKec are static. As 
defined, a Symbol—Rec object could conceivably have a Key string with Integer’Last number of 
characters. 

5.7.2.3. (e) Specifying Storage for Task Activation: T’Storage_Sise. The prefix T 
denotes a task type. A length clause for a task type specifies the number of storage units to be 
reserved for an activation of a task of the type. The TeleGen2 default stack size is 8192 bytes. 

5.7.2.4. (d) Specifying ’Small for Fixed Point Types: T’S mail. Small is the absolute 
precision (a positive real number) while the prefix T denotes the first named subtype of a fixed 
point type. Elaboration of a real type defines a set of model numbers. T’Small is generally a 
power of 2, and model numbers are generally multiples of this number so that they can be 
represented exactly on a binary machine. All other real values are defined in terms of model 
numbers having explicit error bounds. 

Example: 

type Fixed is delta 0.25 range -10.0 ..10.0; 

31JUL89 BJ5P-1347N-Vl.l(U/68) © 1989 TeisSoft_ 3-9 





TeleGen2 Reference Information for UNDC/88K Hosts 


Here... 

Fixed’Small =■ 0.2S — A power of 2 

2.0 * 12 * 0.25 — A model number but not a power of 2 

The value of the expression of the length clause must not be greater than the delta of the 
first named subtype. The effect of the length clause is to use this value of ’Small for the 
representation of values of the fixed point base type. The length clause thereby also affects the 
amount of storage for objects that have this type. 

If a length clause is not used, for model numbers defined by' a fixed point constraint, the 
value of Small is defined as the largest power of two that is not greater than the delta of the fixed 
accuracy definition. 

If a length clause is used, the model numbers are multiples of the specified value for Small. 
For this configuration of TeleGen2, the specified value must be (mathematically) equal to either 
an exact integer or the reciprocal of an exact integer. 

Examples: 

1.0, 2.0, 3.0, 4.0, . . . are legal 
0.S, 1.0/3.0, 0.25, 1.0/3600.0 are legal 
2.5, 2.0/3.0, 0.3 are illegal 

2.7.3. [LRM 13.3] Enumeration Representation Clauses. Enumeration representation 
clauses are supported, except for Boolean types. 

Performance note: Be aware that use of such clauses will introduce considerable overhead 
into many operations that involve the associated type. Such operations include indexing an array 
by an element of the type, or computing the ’Pos, ’Pred, or ’Succ attributes for values of the 
type. 

3.7.4. [LRM 13.4] Record Representation Clauses. Since record components are subject 
to rearrangement by the compiler, you must use representation clauses to guarantee a particular 
layout. Such clauses are subject to the following constraints: 

* Each component of the record must be specified with a component clause. 

« The alignment of the record is restricted to mods 1 and 2, byte and word aligned. 

■ Bits are ordered right to left within a byte. 

* Components may cross word boundaries. 

Here is a simple example showing how the layout of a record can be specified by using 
representation clauses: 

package Repspec_Exaaple is 
Bits : constant':* 1; 

Word : constant :* 4; 

type Five is range 0 .. 16#XF#; _ 

type Seventeen is range 0 .. 1S#1FFFF#; 
type Nine is range 0 .. 511; 

type Record_Layout_Jype is record 
Bleaentl : Seventeen; 


5-10 


REF-1347N-Vl.l(U/08) © 1989 TeleSoft 


S1JUL89 





LRM ANNOTATIONS 


Element2 : Five; 

Element3 : Boolean; 

Eleaent4 : Mine; 
end record; 

for Record-Layout-Xype use record at nod 2; 
Eleaentl at 0-Word range 0 .. 16; 
Eleaent2 at 0-Word range 17 .. 21; 
Eleaent3 at 0-Word range 22 .. 22; 
Eleaent4 at 0*Word range 23 .. 31; 
end record; 

Record-Layout : Recard_Layout_Iype; 
end RepspecJExaaple; 


3.7.5. [L&M 13.5] Address Clauses. The Ada compiler supports address clauses for 
objects, subprograms, and entries. Address clauses for packages and task units are not 
supported. 

Address clauses for objects may be used to access hardware memory registers or other 
known memory locations. The use of address clauses is affected by the fact that the 
System.Address type is private. For the MC680x0 target, literal addresses are represented as 
integers, so an unchecked conversion must be applied to these literals before they can be passed 
as parameters of type System.Address. For example, in the examples in this document the 
following declaration is often assumed: 

function Addr is new Unchecked-Conversion (Long-Integer,System.Address); 

This function is invoked when an address literal needs to be converted to an Address type. 
Naturally, user programs may implement a different convention. Below is a sample program that 
uses address clauses and this convention. Package System must be explicitly urithed when using 
address clauses. 

with System; 

with Unchecked-Conversion; 

procedure Hardware-Access is 

function Addr is new Unchecked-Conversion (Long-Integer, System.Address); 

Hardware-Register : integer; 

for Hardware-Register use at Addr (1S#FF0000#); 

begin 
• • • 

end Hardware-Access; 

When using an address clause for an object with an initial value, the address clause should 
immediately follow the object declaration: 

ObJ: Some_Iype := <init-expr>; 

for Qbj use at <addr— expr>; 

This sequence allows the compiler to perform an optimization wherein it generates code to 
evaluate the <addr—expr> as part of the elaboration of the declaration of the object. The 
expression <init_axpr> will then be evaluated and assigned directly to the object, which is stored 
at <addr-expr>. If another declaration had intervened between the object declaration and the 
address clause, the compiler would have had to create a temporary object to hold the 
initialization value before copying it into the object when the address clause is elaborated. If the 


REP- 13-47N-V1.11U /68 ) ® 1989 TeleSofl 


31JUL89 


■Ll-l 





TeleGen2 Reference Information for TJN3X/83K Hosts 


object were a large composite type, the need to use a temporary could result in considerable 
overhead in both time and space. To optimize your applications, therefore, you are encouraged 
to place address clauses immediately after the relevant object declaration. 

As mentioned above, arrays containing components that can be allocated in a signed or 
unsigned byte (S bits) are packed, one component per byte. Furthermore, such components are 
referenced in generated code by MC68QxO byte instructions. The following example indicates 
how these facts allow access to hardware byte registers: 

with System; 

with Unchecked-Conversion; 
procedure Main is 

function Addr is new Unchecked—Conversion (Long-Integer, System.Address); 
type Byte is range -128..127; 

HW_Regs : array (0..1) of Byte; 
for IW_Regs use at Addr (1S#FFF310#); 

Status-Byte : constant integer 0; 

NextJBlockJLequest: constant integer := 1; 

RequestJJyta : Byte :=* 119; 

Status : Byte; 

begin 

Status := HW-Regs(Status-Byte); 

HW_Regs(Next-Black-Request) :* Request-Byte; 
end Main; 

Two byte hardware registers are referenced in the example above. The status byte is at location 
16#FFF310# and the next block request byte is at location 16#FFF311#. 

Function Addr takes a long integer as its argument. Long_Integer’Last is 16#7FFFFFFF#, 
but there are certainly addresses greater than Long-Integer’Last. Those addresses with the high 
bit set, such as FFFAOOOO, cannot be represented as a positive long integer. Thus, for addresses 
with the high bit set, the address should be computed as the negation of the 2's complement of 
the desired address. According to this method, the correct representation of the sample address 
above would be Addr(-16#00060000#). 

3.7.6. [LRM 13.6] Change of Representation. TeleGen2 supports changes of 
representation, except for types with record representation ciauses. 

3.7.7. [LRM 13.7] The Package System* The specification of TeieGen2’s implementation 
of package System is presented in the LRM Appendix F section at the end of this chapter. 

3.7.8. [LRM 13.7.2] Representation Attributes, The compiler does not support ’Address 
for packages. 

3.7.9. [LRM 13.7,3] Representation Attributes of Real Types. The representation 
attributes for the predefined Soaring point types were presented in Table 3-2. 

3.7.10. (LRM 13.8] Machine Code Insertions. Machine code insertions, an optional 
feature of the Ada language, are fully supported in TeIeGen2. Refer to the “Using Machine Code 
Insertions” section in the Programming Guide chapter for information regarding their 


REF-134TN-Vl.l(U/88) © 1989 TeieSofl 


3-12 


31JUL89 




lrm annotations — 


implementation and for examples on their use. 

3.7.11. (LRM 13.9] Interface to Other Languages. In pragma Interface is supported for 
Assembly, C, UNIX, and Fortran. Refer to “Interfacing to Other Languages” in the 
Programming Guide chapter for for information on the use of pragma Interface. TeleGen2 does 
not currently allow pragma Interface for library units. 

3.7.12. [LRM 13.10] Unchecked Programming. Restrictions on unchecked programming 
as it applies to TeleGen2 are listed in the following paragraphs. 

[LRM 13.10.2] Unchecked Type Conversions. Unchecked conversions are allowed 
between types (or subtypes) Tl and T2 as long as they are not unconstrained record or array 
types. 


3.3. LRM Appendix F for TeIeGen2 

The Ada language definition allows for certain target dependencies. These dependencies 
'must be described in the reference manual for each implementation, in an “Appendix F” that 
addresses each point listed in LRM Appendix F. Table 3-5 constitutes Appendix F for this 
implementation. Points chat require further clarification are addressed in sections refererenced in 
the table. 


R£F-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 


3-13 




TeleGen2 Reference Information for UNDC/08K Hosts._.... 


Table 3-5. L2LM Appendix F for TeleGen2 


(1) Implementation-Dependent Pragmas 

(a) Implementation-defined pragmas: Comment, 
Linkname, Images, and NojSuppress (Section 
3.8.1). 

(b) Predefined pragmas with implementation- 
dependent characteristics: 

* Interface (assembly, UNIX, C, and Fortran- 
see “Interfacing to Other Languages." 

Not supported for library units. 

* List and Page (in context of source/error 
compiler listings.) (See the User Guide.) 

» Pack. See Section 3.7.1. 

* Inline. Not supported for library-level 
subprograms. 

* Priority. Not supported for main programs. 

Other supported predefined pragmas: 

Controlled Shared Suppress 

Elaborate 

Predefined pragmas partly supported (see Sec¬ 
tion 3.1): 

Memory _Siae Storage-Unit System-Name 

Not supported: Optimise 

(2) Implementation-Dependent Attri¬ 

butes 

’Offset. Used for machine code insertions. 

The predefined attribute ’Address is not supported 
for packages. See “Using Machine Code Insertions” 
earlier in this chapter for information on. ’Offset and 
. ’Address. 

’Extended-Image 
'Extended—V alue 
’Extended—Width 
’Extended. Aft 
’Extended-Digits 

Refer to Section 3.8.2 for information on the 
implementation-defined extended attributes listed 
above. 

(3) Package System 

See Section 3.7.7. 


(4) Restrictions on Representation 

Clauses 

Summarized in Table 3-4. 


—— Continued on the nest page ——- 


———— •t sBaeoeasaMBaasB ■ = . ————- .. .n , t =ae —l sssmx 


3-14 


REF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 























-LRM ANNOTATIONS 


Table 3-5. LRM Appendix F for TeleGen2 (Contd) 



3.8.1. Implementation-Defined Pragmas. There are four implementation-defined pragmas 
in 7eieGen2: pragmas Comment, LinJcname, Images, and No-Suppress. 

3.8.1.1. Pragma Co mmen t. Pragma Comment is used for embedding a comment into the 
object code. Its syntax is: 

pragma Comment ( <strmg_literai> ); 













TeleGea2 Reference Information for UNDC/68K Hosts 


where “<3tring_literal>” represents the characters to be embedded in the object code. Pragma 
Comment is allowed only within a declarative part or immediately within a package specification. 
Any number of comments may be entered into the object code by use of pragma Comment. 

S.8.1.2. Pragma Linkname. Pragma Linkname is used to provide interface to any routine 
whose name can be specified by an Ada string literal. This allows access to routines whose 
identifiers do not conform to Ada identifier rules. 

Pragma Linkname takes two arguments. The first is a subprogram name that has been 
previously specified in a pragma Interface statement. The second is a string literal specifying the 
exact link name to be employed by the code generator in emitting calls to the associated 
subprogram. The syntax is: 

pragma Interface ( assembly, <«nbprogram _name> ); 
pragma Linkname ( <snbprogram_name>, <string_literal> ); 

If pragma Linkname does not immediately follow the pragma Interface for the associated 
program, a warning will be issued saying that the pragma has no effect. 

A simple example of the use of pragma Linkname is: 

procedure Dummy_A.ccess ( Duaay—irg : System.Address )'; 
pragma Interface (assembly, Dummy-Access ); 
pragma Linkname (Dummy-Access, '-access”); 


S.8.1.3. Pragma Images. Pragma Images controls the creation and allocation of the image 
and index tables for a specified enumeration type. The image table is a literal string consisting of 
enumeration literals catenated together. The index table is an array of integers specifying the 
location of each literal within the Image table. The length of the index table is therefore the sum 
uf the lengths of the literals of the enumeration type; the length of the index table is one greater 
than the number of literals. 

The syntax of this pragma is: 

pragma Iznages(<enumeration—typo, Deferred); 

— or** 

pragma Images(<ennmeratioa-type>, Immediate).; 

The default, Deferred, saves space in the literal pool by not creating image and index tables for 
an enumeration type unless the ’Image, ’Value, or ’Width attribute for the type is used. If one of 
these attributes is used, the tables are generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in more than one compilation unit, more 
than one set of tables is generated, eliminating the benefits of deferring the table. In this case, 
using 


pragma Images(<enumeration_type>, Immediate); 

will cause a single image table to be generated in the literal pool of the unit declaring the 
enumeration type. 

For a very laige enumeration type, the length of the image table will exceed Integer’Last 
(the maximum length of a string). In this case, using either 


3-16 


REF-1347N-V 1j 1 (U/68) © 1989 TeleSoft 


31JTJL89 



LRM ANNOTATIONS 


pragma Imagea(<en'omeration_type>, Immediate); 

or the ’Image, ’Value, or ’Width attribute for the type will result in an error message from the 
compiler. 


3.8.1.4. Pragma No—Suppress. No_Suppress is a TeleGen2-defined pragma that prevents 
the suppression of checks within a particular scope. It can be used to override pragma Suppress 
in an enclosing scope. No_Suppress is particularly useful when you have a section of code that 
relies upon predefined checks to execute correctly, but you need to suppress checks in the rest of 
the compilation unit for performance reasons. 

Pragma No_Suppress has the same syntax as pragma Suppress and may occur in the same 
places in the source. The syntax is: 

pragma No_Suppres* (<identifier> [, [ON =*>] <name>]); 

where <identifier> is the type of check you want to suppress (e.g., access_check; refer to 
LRM 11.7) 

<nams> is the name of the object, type/subtype, task unit, generic unit, or subprogram 
within which the check is to be suppressed; <name> is optional. 

If neither Suppress nor No jSuppress are present in a program, no checks will be suppressed. 
You may override this default at the command level, by compiling the file with the -i(nhibit 
option and specifying with that option the type of checks you want to suppress. For more 
information on —i(nhibit, refer to your TeleCen2 Overview and Command Summary document. 

If either Suppress or NoJSuppress are present, the compiler uses the pragma that applies to 
the specific check in order to determine whether that check is to be made. If both Suppress and 
NoJauppcess are present in the same scope, the pragma declared last takes precedence. The 
presence of pragma Suppress or No—Suppress in the source takes precedence over an —i(nhibit 
option provided during compilation. 


3.8.2. Implementation-Dependent Attributes. 

3.8.2.1. ’Address and ’Offset. These were discussed within the context of using machine 
code insertions, in the Programming Guide chapter. 


S.8.2.2. Extended Attributes for Scalar Types. The extended attributes extend the 
concept behind the Text_IO attributes ’Image, ’Value, and ’Width to give the user more power 
and flexibility when displaying values of scalars. Extended attributes differ in two respects from 
their predefined counterparts: 


1 . 


2 . 


Extended attributes take more parameters and allow control of the format of the output 
string. 


Extended attributes are defined for all scalar types, including fixed and Seating point 


types. ■ 


31JUL89 BEr-1347N-Vl.l(U/68) © 1989 TeieSoft 


5-17 





TeleGenS Reference Information for UNIX/68K Hosts 


Extended versions of predefined attributes are provided for integer, enumeration, floating point, 
and fixed point types: 


Integer: 
Enumeration: 
Floating Point: 
Fixed Point: 


’Extended -Image, 
’Extended-Image, 
’Extended-Image, 
’Extended-Image, 
’Extended-Aft 


’Extended-V aiue, 
’Extended—Value, 
’Extended—V alue, 
’Extended-V alue, 


’Extended-Width 
’Extended—Width 
’Extended-Digits 
’Extended-Fore, 


The extended attributes can be used without the overhead of including Text-IO in the' 
linked program. Below is an example that illustrates the difference between instantiating 
Text-IO.Float_IO to convert a float value to a string and using Float’Extended-Image: 


with Text-IO; 

function Convert-To-String ( FI : Float ) return String is 
Temp-Str : String (1 .. 6 + Float’Digits ); 
package Flt-10 is new Text_IQ.Float-IQ (Float); 
begin 

Flt-IO.Put ( Temp_Str, FI ); 
return Temp-Str; 

end Conrert-To-String; 


function Convert_Tcu_String_NoL_Text-IO ( FI : Float ) return String is 
begin 

return Float’Extended Image ( FI ); 
end Convert-Ta-String-No-Text-ID; 


with Text-IO, Convert-Ta_String, Conrert-Ta-String-No-Text-IO; 
procedure Show-Diiferent-Conversions is 

Value : Float := 10.03376; 

begin 

Text-IO.Put-Line ( ’Using the Conrert-To,-String, the value of the variable 
is : * ft Convert,,.To. String ( Value ) ); 

Text—TO.Put-Line ( ’Using the Convcrt-To-String-No-Text—10, the value 
is : * ft Convert-Io-String-NcL-Text-IO ( Value ) ); 

end Show-Different-Conversions; 


3-18 


HJEP-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 



IBM ANNOTATIONS 


3.8.2.2.I. Integer Attributes 
’Extended Image 


X’Extended-Image(Item,Width,Base,Ba*ed,Spaee-IF_Po«tive) 

Returns the image associated with Item as defined in Text_IO.Integer_IO. The Text_IO 
definition states that the value of Item is an integer literal with no underlines, no exponent, no 
leading zeros (but a single zero for the zero value), and a minus sign if negative. If the resulting 
sequence of characters to be output has fewer than Width characters, leading spaces are first 
output to make up the difference. (LRM 14.3.7:10,24.3.7:11) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more than one parameter. The parameter Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 


Parameter Descriptions: 


Width 


Based 


Space_If_Poaitive 


The item for which you want the image; it is passed to the 
function. Required 

The minimum number of characters to he in the string that 
ia returned. If no width is specified, the default (0) is as¬ 
sumed. Optional 

The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

An indication of whether you want the string returned to be 
in base notation or not. If no preference is specified, the de¬ 
fault (false) is assumed. Optional 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples: 

Suppose the following subtype were declared: 

subtype Z is Integer Range -10..16; 

Then the following would be true: 

X’Extended-Image(S) 

X f Extended Image(5,0) 
X’Extended-Image(5,2) 

X’Extended_Image(5,0,2) 
t ’Extended-Image(5,4,2) 

X’Extended-Image(5,0,2,True) 

X’Extended. Image(5,0,10,False) 

X ’Extended-Image(5,0,10,False,True) 
X’Extended-Image(-1,0,10,False,False) 
X’Extended-Image(-1,0,10,False,True) 
X * Extended-Image(-1,1,10, False,True) 


•5* 

•5* 

■ 5* 
■ 101 » 

* 101 f 
•2#ioir 

•5* 

• 5* 

■- 1 " 

»-l" 

■- 1 " 


32JUL39 


134 TN-Vl.lfU /flal ® 1980 






TeleGea2 Reference Information for UNDC/68K Hosts 


X ’Extended-Image (-1,0,2, True , True) = 

X’Extended-Tmage(-1,10, 2, True,True) = n -2#1#* 

’Extended-Value 


Usage : 

X’Extended-Value(Item) 

Returns the value associated with Item as defined in Text—IO.Integer_IO. The Text-10 definition 
states that given a string, it reads an integer value from the beginning of the string. The value 
returned corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype, this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 

Parameter Description: 


Item • 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


typeX. Required 


Examples; 

Suppose the following subtype were declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 

X ’ ExtendedLYalue(*5’) * S 

X’Extended-Value(* 5*) « 5 

X’Extended—Value(*2#101#*) = S 

X’Extended—Value* -1 
X’Extended—Value(* -1») * -1 

’Extended-Width 

Usage: 

XTbctended—Width (Base .Based .Space—If—Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype: this attribute is a function that may have multiple 
parameters. This attribute yields the maximum image length over all values of the type or 
subtype X. 


3-20 


• R£F-1347N-Vl.l(U/68) © 1989 TeleSoft 


31JUL89 






L£M ANNOT.'-.CIONS 


Parameter Descriptions: 


Base 

The base for which the width will be calculated. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether the subtype is stated in based no¬ 
tation. If no value for based is specified, the default (false) 
is assumed. Optional 

Space-If-Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples: 

Suppose the fallowing subtype were declared: 

Subtype X is Integer Range -10..16; 


Then the following would be true: 

X’Extanded-Width 

X’Extendedjridth(lO) 

X ’ Extended-Width(2) 
X’Extended-Width (10, True) 
X’Extended_Width(2,True) 

X ’Extended-Width (10, Falsa, True) 
X’Extanded-Width(10, True,False) 
X’Extended-Width(10,True,True) 
X’Extended-Width(2,True,True) 

X’ Extended-Width (2, False, True) 


* 3 

-via" 

* 3 

- ”-itr 

* 5 

- ”10000” 

* 7 


* 8 

- "8f 110000$” 

* 3 

-”10” 

* 7 

- *-mm* 

* 7 

-« mm” 

* 9 

- » Z$10000$” 

= 6 

- " laootr 


REP-1347N-V1.KU/88) ® 1989 TelmSaft 


31JTJL89 





TeleGes2 Reference Information for UNDC/88K Hosts 


3 .8.2.2.2. Enumeration Type Attributes 

♦Extended-Jmage 

Usage: 

X’Ext ended _Image(Item,Width,Uppercase) 

Returns the image associated with Item as defined in Text_IO.Enumeration.JO. The Text_IO 
definition states that given an enumeration literal, it will output the value of the enumeration 
literal (either an identifier or a character literal). The character case parameter is ignored for 
character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more that one parameter. The parameter Item must be an enumeration value. The image of an 
enumeration value is the corresponding identifier, which may have character case and return 
string width specified. 

Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as* 
sumed. If the Width specified is larger than the image of 
Item, the return string is padded with trailing spaces. If the 
Width specified is smaller than the image of Item, the de¬ 
fault is assumed and the image of the enumeration value is 
output completely. Optional 

Uppercase 

An indication of whether the returned string is in uppercase 
characters. In the case of an enumeration type where the 
enumeration literals are character literals. Uppercase is ig¬ 
nored and the case specified by the type definition is taken. 
If no preference is specified, the default (true) is assumed. 
Optional 


3-22 


REP-1347N-V 1.1 (U/68) <g) 1989 TeieSoft 


31JUL89 




L2LM ANNOTATIONS 


Examples: 

Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Y is (’a’, *B», ’D’); 

Then the following would be true: 

X* Ext ended-Jaage(red) = 9 RED 9 

X’Extended ..Image (red, 4) = "BED 9 

X ’BxtendedLIaage (red, 2) * *REB* 

X ’Extended-Iaage (red, 0, false) = "red* 

X’Extended-Image (red, 10, false) = "red 

Y’Extended-Iaage( , a’) * •‘a’ 9 

Y’Extended-Image(’S’) * 9, B >9 

Y’Extended-Iaage^’a',6) a "'a* 9 

Y’Extended-Image^’a'jOjtrue) * 9, a’ 9 




’Extended—Value 
Usage: 

XTbctended—Value (Item) 


Returns the image associated with Item as defined in Text -IO.Enumeration-IO. The Text JO 
definition states that it reads an enumeration value from the beginning of the given string and 
returns the value of the enumeration literal that corresponds to the sequence input. (LRM 
14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 


BEr-134TN-Vl.l(U/68) @ 1989 TeleSoft 


31JUL89 


3.23 



TeleGen2 Reference Information for UNIX/68K Hosts 


Parameter Descriptions; 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type of X. Required 


Examples: 

Suppose the following type were declared: 

type X is (red, green, blue, purple); 


Then the following would be true: 

X’Extended_.Value("red") = red 

X’Extended-Value(" green") = green 

X’Extended-Value(* Purple") = purple 
X’Extended_Value(* GreEn *) * green 


’Extend cd_Width 
' Usage: 

X’Extended_Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype; this attribute is a function. This attribute 
yields the maximum image length over all values of the enumeration type or subtype X. 

Parameter Descriptions: 

There are no parameters to this function. This function returns the width of the largest (width) 
enumeration literal in the enumeration type specified by X. 

Examples: 

Suppose the following types were declared: 

type X i.3 (red, green, blue, purple); 
type Z is (XI, X12, X123, X1234) ; 

Then the following would be true: 

X’ExtendedLWidth * 8 - "purple" 

Z ’ExtendedLWidth * 5 — "Xlt34" 


S-24 


REF-1547N-V 1.1 (U/68) © 1989 TeleSofl 


S1JTJL89 






L2LM ANNOTATIONS 


3.S.2.2.3. Floating Point Attributes 
’Extended-Image 


Usage: 

X’Ext ended _Image(Itexn,Fore r Aft,Exp,£ase,£ased) 


Returns the image associated with item as defined in Text-IO.FIoat-IO. The Text-IO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13, 14.3.8:15) 

Item must be a Real value. The resulting string is without underlines or trailing spaces. 


Parameter Descriptions; 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a. minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 

part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta of 
the type or subtype is greater than 0.1, then Ait is 1. If no 
Aft is specified, the default (X’Digits-l) is assumed* If based 
notation is specified, the trailing is included in Aft. Op¬ 
tional 

Exp 

The minimum number of digits in the exponent. The ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base that the image is to be displayed in. If no base is 
specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


RE?-134TN-Vl.l(U/68) © 19S9 TeleSoft 


31JUL89 


3-25 






TeleGen2 Reference Information for UNEC/Q8K Hosts 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range *10.0 . 
Then the following would be true: 


. 16.0; 


X* Extended-Image(5.0) 

X’Extended-Image(5.0,1) 

X ’Extended-Image(-5.0,1) 

X’ Extended-Image (5.0,2,0) 

X*Extended-Image(5.0,2,0,0) 

X’Extended—Image(5.0,2,0,0,2) 

X’Extended-Image(5.0,2.0,0,2,True) 
X*Extended-Image(5.0,2,2,3,2,True) 


5.0000E+00" 

5.0000E+00* 

-S.OOOOE+OO 15 

5.0E+00* 

5.0* 

101 . 0 * • 
2 # 101 . 0 #» 
2#l.l#E+02* 


’Extended—Value 



X’Ext ended—'Value (Item) 


Returns the value associated with Item as defined in Text_IO.Float_IO. The Text-IO definition 
states that it skips any leading zeros, then reads a plus or minus sign if present then reads the 
string according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.8:9,14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 


Parameter Descriptions: 


A parameter of the predefined type string; it is passed to 
the function. The type of the returned value is the base 
type of the input string. Required 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range <10.0 
Then the following would be true: 


. 16.0; 


X’Extended-Value(*5.0*) * 5.0 
X’ExtendecLYalue(*0.5El*) - 5.0 
X’Extend-sLYalus (*2#1. C1#E2*) = 5.0 


3-28 


RES'-1347N-V 1.1 (U/88) © 1989 TeleSoft 


31JU189 




IBM ANNOTATIONS 


’Extended-Digits 


Usage: 


X’Ext ended JDigita(Base) 


Returns the number of digits using base in the mantissa of model numbers of the subtype X 
Parameter Descriptions: 


The base that the subtype is defined in. If no base is 
specified, the default (10) is assumed. Optional 


Examples: 

Suppose the fallowing type were declared: 

type X in digits 5 range -10.0 . 
Then the following would be true: 
X’ExtendedJDigits - * 5 


. 16.0; 


3.8.2.2.4. Fixed Point Attributes 
’ Extended _Image 


Usage: 


X r Ebrtended_Image{IteniJ?ore,Aft,Exp r B***rB**«d) 


Returns the image associated with Item as defined in Text_IO.FIxed_IO. The TextJO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13,14.3.8:15) 

For a prefix X that is a discrete type or subtype; this attribute is a Ruction that may have 
more than one parameter. The parameter Item must be a Real value. The resulting string is 
without underlines or trailing spaces. 


31JUL89 


REF-1347N-Vl.l(U/08) © 1989 TeleSoft 






TeleGen2 Reference Information for UNIX/68K Hosts 


• Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the if based notation is specified. If the integer 

part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the delta of 
the type or subtype is greater than 0.1, then Aft is 1. If no 
Aft is specified, the default (X’Digits-1) is assumed. If 
based notation is specified, the trailing is included in 

Aft. Optional 

Exp 

The minimum number of digits in the exponent; the ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0, no exponent is used. Optional 

Base 

The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples; 

Suppose the following type were declared; 

type X is delta 0.1 range <10.0 .. 17.0; 
Then the following would be true: 

X’Extended-Image(5.0) * 

X’Extended-Image(5.0,1) = 

X’Extended-Image(-5.0,1) 3 

X ’Extended ..Image (5.0,2,0) 3 

X’Extended-Image(5.0,2,0,0) 3 

X’Extended-Image(5.0,2,0,0;2) - 

X’Extendea_Iaage(5.0,2,0,0,2,.True) 3 

X’Excended_Image(5.0.2.2;3,2,True) ~ 


• 5.00E-00* 
■5.00E+00* 

*-5.OOE+OO* 

• 5.0E+00* 

• 5.0* 
*101.0* 
*2#101.0#* 
*2#1.1#E*Q2* 


REP-1S47N-V 1.1 (U/68) © 1989 TeieSoft 


5-28 


31JTJLS9 





LRM ANNOTATIONS 


’Extended—Value 
Usage: 

X’Extended—V alue(Image) 

Returns the value associated with Item as defined in Text_IO.Fixed-IO. The Text_IO definition 
states that it skips any leading zeros, reads a plus ar minus sign if present, then reads the string 
according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.3:9, 14.3.3:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint—Error is raised. 

Parameter Descriptions: 


Image - 

Parameter of the predefined type string. The t/pe of the re- 


turned value is the base type of the input string. Required 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.0; 
Then the following would be true: 

X’ExtendedJTalueC'S.O*) » 5.0 

X’Bxtended-Yalue^O.SEl*) * 5.0 

X’ExtendecLValue( , 2#1.01#E2") =* 5.0 

’Extended-Fore . . 


X T ExtendedLFore(Base,Based) 

Returns the minimum number of characters required for the integer part of the based 
representation of X. 


31JTJL89 


ttSr.13aTN-Vl.im/6g) ( Si 1989T«IeS ft ft 


f-«1A 







TeleGen2 Reference Information for UNIX/88K Hosts 


Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based natation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended_Fore a 3 -- *-10» 

X’Extended_Fore(2) * 6 • 10001» 

’Extended_Afl 


X’Ext endedLAft (Ba»e,B*®«d) 


Returns the minimum number of characters required for the fractional part of the based 
representation of X. 


Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X ij delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Ertended-Aft =1 — n j n from 0J. 

X’Extended_Aft(2) =4 ~ "0001” from 2*0.0001# 


3-30 


R£F-1347N-Vl.l(TJ/68) © 1989 TeJeSoft 


31JUI89 







LEM ANNOTATIONS 


3.8.3. Package System. The current specification of package System is provided below, 
package System is 

type Address is access integer; 

type Subprogram-Value is private; 

type Name is (TeleGen2); 

System-Name : constant name := TeleGen2; 

Storage—Unit : constant 8; 

Memory-Size : constant (2 ** 31) -1; 

-- System-Dependent Named Numbers: 

— See Table 3*2 for the oaiu*.a for attributes of 
— typee float and Long—Float 

Mln-Int : constant :* -(2 ** 31); 

Max—Ent : constant := (2 ** 31) -1; 

Max-Digits : constant := 15; 

Max-Mantissa : constant :=* 31; 

Fine-Delta : constant :a 1.0 / (2 ** Max-Mantissa); 

Tick : constant :=* 10.OB-3; 

-• Other System-Dependent Declarations 

subtype Priority is integer range 0 .. 63; 

Max-Qbj ect—Size : constant Max Tnt; 

Max. .Record—Count : constant :* Max-Int; 

Max-Text_IQLCount : constant :* Max Tnt -1; 

Max..Text-IfI...Field : constant := 1000; 

•private 
•• • • • 
end System; 


EEF-1347N-V 1.1 (U/68) © 1989 TeleSoft 


31JUL89 


3-31 





TEST PARAMETERS 


APPENDIX C 
TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 199 * 'A' 4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


$BIG_ID2 199 * 'A' 4 '2' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 100 * ’A’ 4 '3' 4 99 * 'A' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 


TEST PARAMETERS 


Name and Meaning Value 

for a character near the middle. 


$BIG_ID4 100 * ’A' 4 '4' & 99 * 'A' 

An identifier the size of the 
maximum input line length which 
is identical to $8IG_ID3 except 
for a character near the middle. 


$BIG_INT_LIT 197 * 'O' 4 "298" 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 


$BIG_REAL_LIT 195 * 'O' 4 "690.0" 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
maximum line length. 

$BIG_STRING1 "" 4 100 * 'A' 4 '"' 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

$BIG_STRING2 4 99 * 'A' 4 '1' 4 "" 

A string literal which when 
catenated to the end of 
BIGjSTRINGl yields the image of 
BIG XD1. 


$BLANKS 180 * ’ ' 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 


$C0UNT_LAST 2_147_483J546 

A universal integer 

literal whose value is 
TEXT.I0.COUNT'LAST. 

$ 0EF AULT_MEM_S IZE 2147483647 

An integer literal whose value 
is SYSTEM.MEHORY.SIZE. 

$DEFAULT_STORJJNIT 8 

An integer literal whose 
is SYSTEM.STORAGE UNIT. 


value 


TEST PARAMETERS 


Name and Meaning 

5DEFAULT.S7S.NAME 

The value of the constant 
SYSTEM.SYSTEM.NAHE. 

$DELTA_DOC 

A real literal whose value is 
SYSTEM.FINE JJELTA. 

$FIELD.LAST 

A universal integer 

literal whose value is 
TEXT.IO.FIELD'LAST. 

SFIXED.NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

SFLOAT.NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORT.FLOAT, or 

LONG.FLOAT. 

SGREATER.THAN.DURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

SGREATER.THAN.DURATION.BASE.LAST 
A universal real literal that is 
greater than DURATION'BASE'LAST. 

SHIGH.PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

SILLEGAL.EXTERNAL.FILE.NAMEl 

An external file name which 
contains invalid characters. 

$ILLEGAL JIXTERNAL_FILEJIAHE2 

An external file name which 
is too long. 


Value 

TELEGEN2 

2#1.0#E—31 

1000 

NO.SUCH.TYPE 

NO.SUCH.TYPE 

100 . 000.0 

131.073.0 

63 

BADCHAR*7% 

/NONAME/DIRECTORY 


Name and Meaning 


Value 


$INTEG"R.FIRST 

A universal integer literal 

whose value is INTEGER'FIRST. 

$INTEGER_LAST 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER.LAST.PLUS_1 

A universal integer literal 

whose value is INTEGER'LAST + 1. 

$LESS_THANJ)URATION 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

SLOV.PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSAJDOC 

An integer literal whose value 
is SYSTEM.MAX.MANTISSA. 

$MAX.DIGITS 

Maximum digits supported for 
floating-point types. 

SMAX.IN.LEN 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 

A universal integer literal 
whose value is SYSTEM.MAX.INT. 

SMAX.INT.PLUS.l 

A universal integer literal 
whose value is SYSTEM.MAX.INT+l. 


-32768 

32767 

32768 

-100.000.0 

-131.073.0 

0 

31 

15 

200 

2147483647 

2 147 483 648 



r 


TEST PARAMETERS 


Name ami Meaning 


Value 


$KAX_LEN_INT_3ASED_LITERAL ”2:" & 195 * .'O' 4 "11:" 

A universal integer based 
literal whose value is 2#11# 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


$MAX_LEN_REAL_3ASED_LITERAL "IS:” & 193 * 'O' 4 "F.E:" 

A universal real based literal 
whose value is 18:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL "" 4 198 * ’A' 4 

A string literal of size 
HAX_IN_LEN, including the quote 
characters. 


$MIN_INT -2147483648 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIM.TASK_SI2E 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"MULL;” as the only statement in 
its body. 


$NAME N0_SUCH_TYPE_AVAILA8LE 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT FLOAT, SHORT INTEGER, 

L0NG_FL0AT, or LONG_INTEGER. 

$NAHE.LIST TELEGEN2 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 


$NEG_BASED_INT 16#FFFFFFFE| 

A based integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of the representation 
for SYSTEM.MAX.INT. 


Name and Meaning 


Value 


$NEVJ!EM_SIZE 

An integer literal whose value 
is a permitted argument for 
pragma MEMORY_SIZE, other than 
$DEFAULT_MEM_STZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 

$NEV_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGEJJNIT, other, than 
$DEFAULT_STORjjNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGEJJNIT. 

$NEV SYS NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS JNAME. If 
there is only one value of that 
type, then use that value. 

$TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

$TICK 

A real literal whose value is 
SYSTEM.TICK. 


2147433647 


8 


TELEGEN2 


32 


0.01 



WITHDRAW TESTS 


APPENDIX D 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C This test expects that the string "— TOP OF PAGE. 

63" of line 204 will appear at the top of the listing page, due 
to a pragma PAGE in line 203; but line 203 contains text that 
follows the pragma, and it is this that must appear at the top 
of the page. 

b. A39O05G This test unreasonably expects a component clause to 

pack an array component into a minimum size (line 30). 

c. B97102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative (line 31). 

d. C97116A This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleaved execution in such a way that the evaluation 
of the guards at lines 50 4 54 and the execution of task CHANGING- 
jOFJTHEJJTJARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even though none of 
the units is illegal with respect to the units it depends on; by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95). 

f. CD2A62D This test wrongly requires that an array object's size 
be no greater than 10 although its subtype's size was specified 
to be 40 (line 137). 


WITHDRAW TESTS 


g. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] These 
tests wrongly attempt to check the size of objects of a derived 
type (for which a 'SIZE length clause is given) by passing them 
to a derived subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, they use the 
'SIZE length clause and attribute, whose interpretation is 
considered problematic by the VG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84N & M, * CD50110 [5 tests] These tests 

assume that dependent tasks will terminate while the main pro¬ 
gram executes a loop that simply tests for task termination; this 
is not the case, and the main program may loop indefinitely 
(lines 74, 85, 86 & 96, 86 & 96, and 58, resp.). 

i. CD2B15C & CD7205C These tests expect that a 'STORAGE.SIZE 
length clause provides precise control over the number of 
designated objects in a collection; the Ada standard 13.2:15 
allows.that such control must not be expected. 

j. CD2D11B This test gives a SMALL representation clause for a 

derived fixed-point type (at line 30) that defines a set of 
model numbers that are not necessarily represented in the 
parent type? by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

k. CD5007B This test wrongly expects an implicitly declared sub¬ 

program to be at the the address that is specified for an un¬ 
related subprogram (line 303). 

l. ED7004B, ED7005C & 0, ED7006C & D [5 tests] These tests check 

various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEM.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEM.TICK—particular instances of change may be 
less (line 29). 

n. CD7203B, & CD7204B These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by 
the VG9 ARG. 

o. CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task's 
activation as though it were like the specification of storage 
for a collection. 

p. CE2107I This test requires that objects of two similar scalar 
types be distinguished when read from a file—DATAJSRROR is 






WITHDRAWN TEST? 


*■ expected to be raised by an attempt to read one object as of 

the other type. However, it is not clear exactly how the Ada 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
is not considered valid, (line 90} 

q. CE3111C This test requires certain behavior, when two files are 

associated with the same external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_OF_LINE & 
ENDJ)F_PAGE that have no parameter: these calls were intended 
to specify a file, not to refer to STANDARD INPUT (lines 103, 
107, H8, 132, & 136). 

s. CE3411B This test requires that a text file’s column number be 

set to COCJNT’LAST in order to check that LAY0UTJ5RR0R is raised 
by a subsequent PUT operation. But the former operation will 
generally raise an exception due to a lack of available disk 

space, and the test would thus encumber validation testing. 


COMPIIiEf*. AND LINKER OPTIONS 


APPENDIX E 

COMPILER AND LINKER OPTIONS 


References and page numbers in this appendix 
consistent with compiler documentation and not with 
report. 


are 

this 


TeleGen2 User Guide for VAX/VMS to Embedded MC68OX0 Targets 


3.2. Ada Source Code Preparation 

The source for an Ada compilation consists of one or more Ada compilation units (as 
defined in the LRM, Section JlO.l) contained in a single VAX/VMS text file. This text file may 
be prepared by using any of the standard VAX/VMS text editors (e.g., EDT, EVE). The source 
file may have any legal VAX/VMS file name. The default file type for Ada source files is 
“.ADA”. 


3.3. Running the Compiler 

After access to TeleGen2 has been established (Section 1.6) and a library has been created 
(Section 2.4), the Ada compiler can be used. The syntax for invoking the compiler is: 

$ TSADA/E68/ADA{<qualifier>} <file_spec>{,<fiie_spec>} 
where: 

< qualifier> is one of the qualifiers available for the compiler. 

<file_spec> is one in a possible series of file specifications, separated by commas, 
indicating the unit(s) to be compiled. If /INPUT_LIST is used, <file_spec> is interpreted 
as a file containing a list of files to be compiled. The default source file type is “.ADA”, 
and the default list file type is “.LIS.” A file name may be qualified with a location in 
standard VAX/VMS format. A source or input list file may reside on any directory in the 
system. 

The default qualifier settings are designed to allow for the simplest and most convenient use 
of the compiler. For most applications, no additional qualifier setting need be specified. However, 
optional qualifiers are provided to: 

• Specify maximum errors/warnings before the compiler aborts (/ABORT_COUNT). 

• Create an executable program (/BIND). 

• Specify the number of source lines listed around each syntactic or semantic error 
(/CONTEXT). 

• Specify the'target CPU type (/CPU_NAME). 

• Enable the generation of symbolic information for the Source Level Debugger 
(/DEBUG). 

• Select the type of support for floating point operations (/FP_INLINE). 

• Compile a list of source files in one compiler invocation (/INPUT_LIST). 

• Specify a library other than the default LIBL3T.ALB (/LIBFILE and /TEMPLIB). 

• Control the generation of source and assembly code listing files (/LIST and 
/MACHINE_CODE). 

—’ Request compilation progress xiicaoagea ^/ivloiuTvny. 

• Restrict compilation to syntactic and semantic analysis (/NOOBJECT). . 

• Optimize the generated code (/OPTIMIZE). 

• Place execution profile code in the generated object code (/PROFILE). 

• Delete unneeded intermediate code files after compilation (/SQUEEZE). 


3-2 


UG-1002N-V1.10(VAX.E68) © 1989 TeleSoft. 


25JUL89 



USING THE COMPILER AND BINDER 


• Causes unhandled exceptions in tasks to be reported in the same manner as those that 
occur in the main'program (/SHOW_TASK_EXCEPTION). 

• Sets the default amount of stack to allocate from the Ada heap for each task 
(/TASKJ5TACKJ3IZE). 

• Specifies the amount of additional stack space to allocate (in addition to 
/TASK_STACK_SIZE) for each task (/STACK_GUARD_SIZE). 

• Suppress selected run-time checks, source line references, and subprogram name 
information in generated object code (/SUPPRESS). 

• Update the sublibrary after each unit when compiling multiple units (/UPDATE). 

These command qualifiers and their default values are further described in a<. tail in Section 3.4. 

3.3.1. Multi-Unit Compilation. The compiler may be invoked for multiple sources by 
specifying each source file on the command line or by using the /INPUT_LIST qualifier. The 
effect is the same in either case. Files are specified on the command line as follows: 

$ TSADA/E68/ADA CALC_ARITH,CALC_MEM,[CIOSRC]CALC_IO 

Functionally, each file listed is treated as a separate compilation. However, the overall 
compilation rate will be higher than the corresponding separate compilations, as the compiler is 
only initialized once, and the Ada library is only opened once. 

When compiling a list of source files, compilatLn errors will have two effects. First, the 
working sublibrary will only be updated for units that compile successfully, and are not in a 
source file containing a unit that failed. Second, after an error, subsequent units in the source file 
will be compiled for syntactic and semantic errors only (similar in action to the /NOOBJECT 
qualifier). Normal compilation will resume with the next source file. The Ada library is updated 
after each source is compiled. This feature may be disabled by specifying the /NOUPDATE 
qualifier. In this case, the library is only updated if all sources have compiled successfully. 

3.3.2. Specifying a Library. As described in the previous chapter on the Library Manager 
Tools, the compiler must use a library. As a default, the compiler will use the library file named 
LIBLST, with a file type of .ALB, in the current working directory. Alternatively, the library 
may be specified by using either the /LIBFILE or the /TEMPLIB qualifiers described in Section 

2.3.2. or by using the the LIBLST logical name as described in Section 2.3.2.3. 

The compiler will place the compilation unit informaticr. in the working sublibrary of the 
specified library. If the compiler cannot find the specified library or any of it3 sublibraries, an 
error message is issued. 

3.3.3. Compiling the Main Program Unit. The main program to be executed must be a 
parameterless procedure or a parameterless function that returns a scalar value. When the main 
program is a function, the treatment of the returned value is determined by the installer (see 
Chapter 7). The compilation unit to be executed as a main program is bound during the 
compilation process using the /BIND qualifier or after compilation using the TSADA/E68/BIND 
command (see Section 3.6). 

3.3.4. Temporary File Names. Two temporary files are generated by the compiler and 
deleted when the compilation is complete. These files are created in the same directory as the 
user’s working sublibrary and are named:' 


25JUL89 


UG-1002N-V1.10(VAX.E68) © 1989 TeleSoft. 


3-3 




TeleGenZ User Guide for VAX/VMS to Embedded MC680X0 Targets 


Table 3-1. Compiler Command Qualifiers. 


Qualifier Name 

Action 

Default 

/ABORT_COUNT—<value> 

Specify maximum errors/wamings. 

999 

/[NO|BIND 
(—<main_unit>| 

/BIND runs the Binder on unit 
being compiled or on unit specified. 

/NOBIND 

/CONTEXT 
—<value> 

Request <value> context lines around 
each error in error listing. 

1 

/CPU NAME*(MC68000 | 
MC68008 | MC68010 | 
MC68012 | MC88020j 

Specify the target CPU type. 

MC68000 

/|NO|DEBUG 

Compile for debugging. 

/NODEBUG 

/(NO|FP_INLINE 

/FP INLINE enables inline floating 
point instructions for the MC68020. 

/NOFP JNLINE enables CGS calls. 

/FP INLINE 

(when /CPU NAME- 

MC68020) 

/INPUT_LIST 

Input file contains names of files 
to be compiled, not Ada source. 

File contains 

Ada source. 

/LIBFILE—<file_spec> 

Specify name of library file. 

LIBLST.ALB 

/(NO|LIST 
[—<file spec>| 

/LIST creates a listing file whose default 
name is <sourceJlle_name>.LIS, or 
<filejjpeo.LIS, if specified. 

/NOLIST 

/|NO|MACHINE_CODE 
(—<file apec>| 

Requests a macro assembly 

listing, which is sent to <comp_unit>.SRC 

or to <filejspec>, if specified. 

/NOMACHINE_CODE 

/(NO)MONITOR 

/MONITOR requests progress messages. 

/NOMONITOR 

/|NO|OBJECT 

/NOOBJECT restricts compilation to 
syntactic and semantic analysis. 

/OBJECT 

/(NO|OPTIMIZE 
|—(<option>{,<option>})j 
[<qualifier>| 

/OPTIMIZE causes Optimizer to be 
run on unit(s) being compiled. 

/NOOPTIMIZE 

/|NO|PROFILE 

/PROFILE causes execution profile code 
to be output in generated object code. 

/NOPROFILE 

/|NO|SQUEEZE 

/SQUEEZE deletes unneeded intermediate 
unit information after compilation. 

/SQUEEZE 

(/NOSQUEEZE if/DEBUG 
or /NOOBJECT) 

/|NO|SUPPRESS 
(—<option>{,<option>}) 

/SUPPRESS suppresses selected run-time 
checks, names, and/or source line references 
in generated object code. 

/NOSUPPRESS 

/TEMPLIB 

*(<sublib>-{ ) <3ublib>}) 

Specify a temporary library 
containing listed sublibraries. 

None. 

/INOjUPDATE 

Update the working sublibrary 
after each successful compilation. 

/TTDn A'TTT 


In addition to the names of the source files, the input list may contain blank lines and 
comments in Ada syntax, i.e., all text on a line including and following the comment marker ” 
will be ignored. Thus, an equivalent of the example above is a file with the contents: 


3-6 


UG-1002N-Vl.IO (VAX.E68) © 1989 TeleSoft. 


25JUL89 






TeleGen2 User Guide for VAX/VMS to Embedded MC680X0 Targets 


3.6. Creating Linkable Objects 

The object code files generated by the compiler are TeleSoft-defined Object Form files stored 
in the Ada library. These files must be bound to create a linkable object. The Binder program 
generates the code needed to elaborate the components in a consistent order. 

Before the program can be bound and linked: 

• All of the required compilation units must have been successfully compiled in the correct 
order and must be present in the library. 

• The compilation unit that is to serve as the main program must be a parameterless 
procedure or a parameterless function that returns a scalar value. 

• The main program unit must be located in the working sublibrary. If this is not the case, 
reorder the sublibraries in the library file or use TSADA/E68/MOVE or 
TSADA/E68/COPY to move/copy the unit to the working sublibrary. 

If these conditions are met, the user can proceed to bind and link the program. 

The general form of the Binder command is: 

$ TSADA/E68/BIND{<qualifier>} <main_unitjiame> 

where: 

<qualifier> is one of the qualifiers provided for this command as described below. 

<main_unit_name> is the Ada name of the subprogram that is the main program unit 

(not the name of the source file). 

Default settings for the qualifier values were chosen for the simplest and most convenient 
use of the Binder. For most applications, no additional qualifiers are required. Optional qualifiers 
are provided to: 

• Specify the target CPU type (/CPU_NAME). 

«• Select the type of support for floating point operations (/FP INLINE). 

• Specify a library other than the default LIBLST.ALB (/LIBFILE and /TEMPLIB). 

• Request binding progress messages (/MONITOR). 

• Bind the program for use with the Profiler (/PROFILE). 

• Set the-depth of the run-time exception traceback report (/TftACEBA'^K). 

The Binder can be invoked from standard VAX/VMS command files. On systems with 
moderate to heavy user loading, it is recommended that binds be performed from command files 
submitted as batch jobs. See Section 6.1.1 for a discussion of the use of batch queues. 

When the Binder is executed, the following steps are performed. First, the library is scanned 
to find the compilation unit corresponding to <main_unit_name>. This compilation unit is 
checked to see that it meets the conditions required for a main program; if it does not, an error 
message is generated and the binding process terminates. Next, the library is scanned to find all 
members of the main program’s extended family, i.e., all units required to execute the main 
program. As each unit is found, its name and location in the library is noted. If during this 
process any required units are missing or obsolete, an error message will be generated and the 
binding process will terminate. If all required units are found and are current, the elaboration 
code is generated and stored in the Ada library. The program is then ready for linking with the 
TeleSoft Linker. 


3-20 


UG-1002N-V1.10(VAX.E68) © 1989 TeleSoft. 


25JUL89 


USING THE COMPILER AND BINDER 


If the code to be bound contains one or more units that were compiled with the /PROFILE 
qualifier, then the /PROFILE qualifier must be supplied to the Binder. See Chapter 12 for a 
description of the Profiler. 

3.6.1. Binder Command Qualifiers. The Binder command qualifiers conform to standard 
VAX/VMS format and usage. The following sections describe the syntax and semantics of these 
qualifiers. A summary of these qualifiers is contained in Table 3-6. 


Table 3-6. Binder Command Qualifiers. ■ 


Qualifier Name 

Action 

Default 

/CPU NAME*(MC68000 | 

MC68008 | MC68010 | 

MC68012 j MC68020] 

Specify the target CPU 
type. 

MC68000 

/|NO|FP_INLINE 

/FPJNLINE enables 

inline floating point 

instructions for the 

MC68020. 

/NOFPJNLINE enables 
CGS calls. 

/FP INLINE(when 
/CPUJNAME-MC68020) 

/LIBFILE 

=-<file_spec> 

Specify name of library 
file. 

LIBLST.ALB 

/|NO|MONITOR 


/NOMONITOR 

/(NO|PROFILE 

/PROFILE binds for 
Profiler use. 

/NOPROFILE 

/|NO]SHOW_TASKJEXCEPTION 

Allows unhandled excep¬ 
tions within tasks to be re¬ 
ported. 

/NOSHOW_TASK_EXCEPTION 

/STACK_GUARD_SIZE 
—<bytes> 

Specifies additional task 
stack space. 

256 bytes 

/TASK_STACK_SIZE 

■»<bytes> 

Specifies the default task 
stack size. 

4096 bytes 

/TEMPL1B 

—(<sublib>{, <sublib> }) 

Temporary list of 

sublibraries. 

None. 

/TRACEBACK 

-<#_levels> 

Set the depth of exception 
traceback report. 

15 levels. 


3.6.1.1. Specifying the Target Machine: /CPU_NAME. This qualifier specifies the 

target CPU in the MCS8GXG family and allows exploitation of some of the instruction set 
additions that have occurred in recent additions to the family. The format of this qualifier is: 


/CPU^N AME[=»MC68000 | MC68008 | MC680101 MC68012 | MC68020] 
The default is MC68000. 


The /CPU NAME value must correspond to the standard libraries and CGS environment 
modules used, as summarized below: 


25JUL89 


UG-1002N-V1.10(VAX.E68) © 1989 TeleSoft. 


3-21 






































LINKER TOOLS 


4.2.I.7. Elimination of Unused Subprograms. If a complete load module is being created, 
the Linker automatically eliminates Ada subprograms that are not used in the call graph of the 
main program being linked. 


4.2.2. Using the Ada Linker 

4.2.2.I. Linker Command Syntax. The VMS command line for the Ada Linker is: 

$ TSADA/E68/LINK{<qualifier>} [<compilation_unit_name>]. 

where: 

<qualifier> is none or more of the command line qualifiers listed in Table 4-1. 

<compilation_unit_name> is an optional command line parameter indicating the name 
of the Ada compilation unit to be linked as a main program. The compilation unit must 
have been bound as a main program prior to linking. If the name of the unit is not provided 
on the command line, the unit is specified using the INPUT option in an options file. 

Linker directives are communicated to the Linker as qualifiers on the VMS command line or 
as options entered via an options file or SYSSINPUT. Command line qualifiers are useful for 
controlling options that a user is likely to change often. The default qualifier settings are designed 
to allow for the simplest and most convenient use of the Linker. 

Command line qualifiers and parameters enable the user to: 

• Specify the name and format of the linked output file (/LOAD MODULE. 
/OBJECT_FORM, /EXECUTE_FORM, /SRECORDS, /OASYS, /IEEE). 

• Control the generation and format of listing map files produced by the Linker (/MAP, 
/IMAGE, /LOCALS, /EXCLUDED, /WIDTH, and /LINES_PER_PAGE). 

• Specify an options file (/OPTIONS). 

• Specify the starting memory location for the linked output (/BASE). 

• Specify the library file containing the components to be linked (/LIBFILE or /TEMPLIB). 

• Control the output of debug symbol information for debugging (/DEBUG). 

• Monitor the linking process (/MONITOR). 

More complicated Linker options, such as the specification of memory locations for specific 
portions of the code or data for a program, are input via options in a Linker options file. Linker 
options may be used to: 

• Specify the compilation units to be used as input to the Linker, the library search paths, and 
the usage of the input files (INPUT). 

• Specify the name and format of the linked output file (OUTPUT). 

• Control the generation and format of listing map files produced by the Linker (MAP)* 

• Specify the location of named memory regions and reserved memory regions in physical 
memory (REGION). 

• Specify the location of control sections in physical memory (LOCATE). 

• Define symbol values (DEFINE). 

• Specify the target machine on which the output is to be executed (TARGET). 


25JUL89 


UG-1002N-Vl.IO (VAX.E08) © 1989 TeleSoft. 


4-T 



TeleGen2 User Guide for VAX/VMS to Embedded MC680X0 Targets 


4.2.2.2. Obtaining Lists of Units to be Linked. A list of all Ada compilation units that 
will be included in a complete link may be obtained by using the library listing command: 

$ TSADA/SHOW/ELABORATION/NAME=*<main_unit> 
where: 

<main_unit> is the name of the main program unit. 

Library listing commands are fully described in Section 2.5. The list of included units is 
also output in the link map. 


Table 4-1. Linker Command Line Qualifiers. 


Qualifier 

Action 

Default 

/BASE 

aa ><address> 

Specify start location. 

0 

/[NO|DEBUG 

Output debug information. 

/NODEBUG 

/EXECUTE_FORM 

Produce EF load module format. 

/EXECUTE_FORM 

/IEEE 

Produce IEEE load module format. 

Execute Form. 

/LIBFILE 

*<file_spec> 

Specify name of library file. 

LIBLST.ALB 

/LOAD_MODULE 

[=*<file_spec>] 

Specify load module output. 

/LOAD_MODULE 

/(NO|MAP 
[*<file spec>] 
[/[NOjEX’CLUDED] 
[/(NO]IMAGE| 
[/LINES_PER_PAGE 
—<vaiue>] (> 10) 
[/(NO)LOCALS] 
[/WIDTH-<1321 80>] 

Control output of a link map. 

/NOMAP 

/NOEXCLUDED 

/NOIMAGE 

50 

/NOLOCALS 

132 

/(NO)MONITOR 

Display Linker progress messages. 

/NOMONITOR 

/OBJECT_FORM 
(=»<library 
component _name>] 

Produce linked OF module output. 

None. 

/(NO|OPTIONS 

[=*<file_spec>] 

Designate options file. 

/NOOPTIONS 

/SRECORDS 

Produce S-Records load module 
format. 

Execute Form. 

/TEMPLltf 

—(<SUblib>{,<SUblib>}) 

Temporary list of sublibraries. 

None. 


4-8 


UG-1002N-V 1.10(VAX.E68) © 1989 TeleSoft. 


25JUL89 



LINKER TOOLS 


Table 4-2. Linker Options and their Qualifiers. 


DEFINE 

/<symbol name>—<value> 
(/ADDRESS) 

— Specify link-time values for symbols. 

EXIT 

— Terminate options list. 

INPUT 

— Identify object modules to be linked and 

(/MAIN | /SPEC | /BODY | /OFM) 
(/EXPORT DEFINITIONS! 
(/PHANTOM | /WORKING SUBLIB) 

specify the search path. 

f/NOSEARCHj < library _component_name> 

| LOCATE 

— Specify addresses for control sections. 


[/CONTROLJECTION-CODE | DATA | CONSTANT) 
[/COMPONENT NAME—clibrary component name> 

|/5P£C| /BODY | /OFMj) 

(/AT—<address>) 

[/IN—< region _name>| 

[/AFTER—<control_section_aam«> | <library_componcnt_nenn>) 


MAP — O'- >1 link map generation. 

(/|NO|IMAGE! 
j/[NO|LOCALS| 

|/(NO|EXCLUDEDj 
(/WIDTH-<I«| 80>| 

[/LINES PER PAGE-<value>| (50) [<ftle spec>| 

OUTPUT 

— Specify complete or incomplete output 

(/ COMPLETE | /INCOMPLETE! 

and its format. 

{/LOAD MODUU\-<ttm spee>| 


(/OBJECT_FORM(—<library_component_name>|j 

QUIT 

— Abandon link operation. 

REGION 

- Define and name memory regions. 

/LOW BOUND—<address> 


/HIGH BOUND-<address> 

• 

[/UNUSED| [<region_name>| 


TARGET 

- Specify target processor. 

<MC88000 1 MC68010 j MC68020> 



4.2.2.5.3. Specifying the Inputs INPUT. This option specifies the name of the Ada library 
component to be linked, its usage, and its search path. Multiple INPUT options may be used. 

By default, the object associated with the specified name is included in the linked output. If 
the link is incomplete, the symbols defined in the OF modules will not be exported as global 
definitions. The option line qualifier /EXPORT JDEFINITIONS may be used to override this 
default. In complete linkage, all references are to be resolved, so the Linker does not export 
global definitions and ignores this qualifier. The option line qualifiers- /MAIN and /PHANTOM 
may be used to specify special usage for the input OF modules. 

The use of an INPUT option doss not prevent an unreferenced Ada unit from being 
excluded from the module because of unused subprogram elimination. If an unreferenced unit 


28JUL89 


UG-1002N-V 1.10(VAXJB68) © 1989 TdeSoft. 


4-18 









