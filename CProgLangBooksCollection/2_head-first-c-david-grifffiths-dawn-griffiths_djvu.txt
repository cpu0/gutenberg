A Brain-Friendly Guide 


Hea dl First 





Learn how make can 
change your life 


See how variadic 
functions helped 
Sue be more 
flexible 


Build a retro 
classic arcade 
game 


Discover the secrets 
of the C coding gurus 


Avoid 

embarrassing 
pointer 
mistakes 


in 

Standard 

Library 


O REILLY* 


www.it-ebooks.info 


David Griffiths 6? 
Dawn Griffiths 










www.it-ebooks.info 


Advance Praise for Head First C 


“Head First C could quite possibly turn out to be the best G book of all time. I don’t say that lightly I could 
easily see this become the standard G textbook for every college G course. Most books on programming 
follow a fairly predictable course through keywords, control-flow constructs, syntax, operators, data types, 
subroutines, etc. These can serve as a useful reference, as well as a fairly academic introduction to the 
language. This book, on the other hand, takes a totally different approach. It teaches you how to be a 
real G programmer. I wish I had had this book 15 years ago!” 

— Dave Kitabjian, Director of Software Development, NetCarrier Telecom 


u Head First C is an accessible, light-hearted introduction to G programming, in the classic Head First style. 
Pictures, jokes, exercises, and labs take the reader gently but steadily through the fundamentals of G— 
including arrays, pointers, structs, and functions—before moving into more advanced topics in Posix and 
Linux system programming, such as processes and threads.” 

— Vince Milner, software developer 


www.it-ebooks.info 




Praise for other Head First books 


“Kathy and Bert’s Head First Java transforms the printed page into the closest thing to a GUI you’ve ever 
seen. In a wry, hip manner, the authors make learning Java an engaging ‘what’re they gonna do next?’ 
experience.” 

—Warren Keuffel, Software Development Magazine 


“Beyond the engaging style that drags you forward from know-nothing into exalted Java warrior status, 
Head First Java covers a huge amount of practical matters that other texts leave as the dreaded ‘exercise 
for the reader... ’ It’s clever, wry, hip, and practical—there aren’t a lot of textbooks that can make that claim 
and live up to it while also teaching you about object serialization and network launch protocols. ” 

— Dr. Dan Russell, Director of User Sciences and Experience Research, 

IBM Almaden Research Center; 

artificial intelligence instructor, Stanford University 


“It’s fast, irreverent, fun, and engaging. Be careful—you might actually learn something!” 

— Ken Arnold, former Senior Engineer at Sun Microsystems; 
coauthor (with James Gosling, creator of Java), 

The Java Programming Language 


“I feel like a thousand pounds of books have just been lifted off of my head.” 

— Ward Cunningham, inventor of the Wiki and founder of the Hillside Group 


‘Just the right tone for the geeked-out, casual-cool guru coder in all of us. The right reference for 
practical development strategies—gets my brain going without having to slog through a bunch of 
tired, stale professor-speak.” 

— Travis Kalanick, founder of Scour and Red Swoosh; 
member of the MIT TR100 


“There are books you buy, books you keep, books you keep on your desk, and thanks to O’Reilly and the 
Head First crew, there is the penultimate category, Head First books. They’re the ones that are dog-eared, 
mangled, and carried everywhere. Head First SQL is at the top of my stack. Heck, even the PDF I have 
for review is tattered and torn.” 

— Bill Sawyer, ATG Curriculum Manager, Oracle 


“This book’s admirable clarity, humor, and substantial doses of clever make it the sort of book that helps 
even nonprogrammers think well about problem solving.” 

— Cory Doctorow, coeditor of Boing Boing; 
author, Down and Out in the Magic Kingdom 
and Someone Comes to Town , Someone Leaves Town 


www.it-ebooks.info 





Praise for other Head First books 


“I received the book yesterday and started to read it.. .and I couldn’t stop. This is definitely tres ‘cool.’ It 
is fun, but they cover a lot of ground, and they are right to the point. I’m really impressed.” 

— Erich Gamma, IBM Distinguished Engineer and coauthor of Design Patterns 

“One of the funniest and smartest books on software design I’ve ever read.” 

— Aaron LaBerge, VP Technology, ESPN.com 


“What used to be a long trial-and-error learning process has now been reduced neatly into an engaging 
paperback.” 

— Mike Davidson, CEO, Newsvine, Inc. 


“Elegant design is at the core of every chapter here, each concept conveyed with equal doses of 
pragmatism and wit.” 

— Ken Goldstein, Executive Vice President, Disney Online 

“I y Head First HTML with CSS & XHTML —it teaches you everything you need to learn in a Tun coated’ 
format.” 

— Sally Applin, UI designer and artist 


“Usually when reading through a book or article on design patterns, I’d have to occasionally stick myself 
in the eye with something just to make sure I was paying attention. Not with this book. Odd as it may 
sound, this book makes learning about design patterns fun. 

“While other books on design patterns are saying ‘Bueller.. .Bueller.. .Bueller...,’ this book is on the float 
belting out ‘Shake it up, baby!”’ 

— Eric Wuehler 


“I literally love this book. In fact, I kissed this book in front of my wife.” 


— Satish Kumar 


www.it-ebooks.info 



Other related books from O’Reilly 

C in a Nutshell 
Practical C Programming 
C Pocket Reference 
Algorithms with C 

Secure Programming Cookbook for C and C++ 


Other books in O’Reilly’s Head First series 

Head First Programming 
Head First Rails 
Head First Java™ 

Head First Object-Oriented Analysis and Design (OOA&D) 

Head First HTML5 Programming 

Head First HTML with CSS and XHTML 

Head First Design Patterns 

Head First Servlets and JSP 

Head First EJB 

Head First PMP 

Head First SQL 

Head First Software Development 

Head First JavaScript 

Head First Ajax 

Head First Statistics 

Head First 2D Geometry 

Head First Algebra 

Head First PHP & MySQL 

Head First Mobile Web 

Head First Web Design 


www.it-ebooks.info 


Head First C 



Wouldn't it be dreamy if there 
were a book on C that was easier to 
understand than the space shuttle 
flight manual? I guess it's just a 
i fantasy... 


David Griffiths 
Dawn Griffiths 


O’REILLY® 

Beijing • Cambridge • Farnham • Koln • Sebastopol • Tokyo 


www.it-ebooks.info 



Head First C 

by David Griffiths and Dawn Griffiths 


Copyright © 2012 David Griffiths and Dawn Griffiths. All rights reserved. 

Printed in the United States of America. 

Published by O’Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol, CA 95472. 

O’Reilly Media books may be purchased for educational, business, or sales promotional use. Online editions 
are also available for most titles {http://my.safaribooksonline.com). For more information, contact our corporate/ 
institutional sales department: (800) 998-9938 or corporate@oreilly.com. 


Series Creators: 
Editor: 

Cover Designer: 
Production Editor: 
Production Services: 
Indexer: 

Page Viewers: 


Kathy Sierra, Bert Bates 
Brian Sawyer 
Karen Montgomery 
Teresa Elsey 
Rachel Monaghan 
Ellen Troutman Zaig 
Mum and Dad, Garl 


Printing History: 

April 2012: First Edition. 






The O’Reilly logo is a registered trademark of O’Reilly Media, Inc. The Head First series designations, 

Head First C , and related trade dress are trademarks of O’Reilly Media, Inc. 

Many of the designations used by manufacturers and sellers to distinguish their products are claimed as 
trademarks. Where those designations appear in this book, and O’Reilly Media, Inc., was aware of a trademark 
claim, the designations have been printed in caps or initial caps. 

While every precaution has been taken in the preparation of this book, the publisher and the authors assume no 
responsibility for errors or omissions, or for damages resulting from the use of the information contained herein. 

No kittens were harmed in the making of this book. Really. 


RepKover™ 


This book uses RepKover 1 , M a durable and flexible lay-flat binding. 


ISBN: 978-1-449-39991-7 

m 


www.it-ebooks.info 





To Dennis Ritchie (1941—2011), the father of G. 


www.it-ebooks.info 


the authors 


Authors of Head First C 




David Griffiths began programming at age 12, 
when he saw a documentary on the work of Seymour 
Papert. At age 15, he wrote an implementation of 
Papert’s computer language LOGO. After studying 
pure mathematics at university, he began writing code 
for computers and magazine articles for humans. He’s 
worked as an agile coach, a developer, and a garage 
attendant, but not in that order. He can write code 
in over 10 languages and prose in just one, and when 
not writing, coding, or coaching, he spends much 
of his spare time traveling with his lovely wife—and 
coauthor—Dawn. 

Before writing Head First C, David wrote two other 
Head First books: Head First Rails and Head First 
Programming. 

You can follow David on Twitter at 
http:/ / twitter.com/ dogriffiths. 


Dawn Griffiths started life as a mathematician at 
a top UK university, where she was awarded a first-class 
honors degree in mathematics. She went on to pursue 
a career in software development and has over 15 years 
experience working in the IT industry. 

Before joining forces with David on Head First C, Dawn 
wrote two other Head First books ( Head First Statistics 
and Head First 2D Geometry ) and has also worked on a 
host of other books in the series. 

When Dawn’s not working on Head First books, you’ll 
find her honing her Tai Chi skills, running, making 
bobbin lace, or cooking. She also enjoys traveling and 
spending time with her husband, David. 


VIII 


www.it-ebooks.info 




table of contents 


Table of Contents (Summary) 

Intro xxvii 

1 Getting Started with C: Diving in 1 

2 Memory and Pointers: What are you pointing at? 41 

2.5 Strings: String theory 83 

3 Creating Small Tools: Do one thing and do it well 103 

4 Using Multiple Source Files: Break it down, build it up 157 

C Lab 1: Arduino 207 

5 Structs, Unions, and Bitfields: Rollingyour own structures 217 

6 Data Structures and Dynamic Memory: Building bridges 267 

7 Advanced Functions: Turn your functions up to 11 311 

8 Static and Dynamic Libraries: Hot-swappable code 351 

C Lab 2: OpenCV 389 

9 Processes and System Calls: Breaking boundaries 397 

10 Interprocess Communication: IPs good to talk 429 

11 Sockets and Networking: There’s no place like 127.0.0.1 467 

12 Threads: It’s a parallel world 501 

C Lab 3: Blasteroids 523 

i Leftovers: The top ten things (we didn’t cover) 539 

ii C Topics: Revision roundup 553 


Table of Contents (the real thing) 

Intro 

Your brain on C. Here you are trying to learn something, while here your 
brain is, doing you a favor by making sure the learning doesn't stick. Your brain's 
thinking, "Better leave room for more important things, like which wild animals to 
avoid and whether naked snowboarding is a bad idea." So how do you trick your 
brain into thinking that your life depends on knowing C? 


Who is this book for? xxviii 

We know what you’re thinking xxix 

Metacognition xxxi 

Bend your brain into submission xxxiii 

Read me xxxiv 

The technical review team xxxvi 

Acknowledgments xxxvii 


www.it-ebooks.info 


table of contents 



getting started With C 

Diving in 

Want to get inside the computer’s head? 

Need to write high-performance code for a new game? Program an Arduino? Or 
use that advanced third-party library in your iPhone app? If so, then C’s here to 
help. C works at a much lower level than most other languages, so understanding 
C gives you a much better idea of what’s really going on. C can even help you better 
understand other languages as well. So dive in and grab your compiler, and you’ll soon 
get started in no time. 


C is a language for small, fast programs 2 

But what does a complete C program look like? 5 

But how do you run the program? 9 

Two types of command 14 

Here’s the code so far 15 

Card counting? In C? 17 

There’s more to booleans than equals... 18 

What’s the code like now? 25 

Pulling the of switcheroo 26 

Sometimes once is not enough... 29 

Loops often follow the same structure... 30 

You use break to break out... 31 

Your C Toolbox 40 


X 


www.it-ebooks.info 






































table of contents 



memory and pointers 

What are you pointing at? 

If you really want to kick butt with C, you need to understand 
how C handles memory. 

The C language gives you a lot more control over how your program uses the 
computer’s memory. In this chapter, you’ll strip back the covers and see exactly what 
happens when you read and write variables. You’ll learn how arrays work, how 
to avoid some nasty memory SNAFUs, and most of all, you’ll see how mastering 
pointers and memory addressing is key to becoming a kick-ass C programmer. 






LINK A6, #VARSIZE' 
MOVEM.L D0-D7/A1-A8,-(SP)- 
MOVE.L SP, SAVESTK(A6)- 
MOVE.L SP, SAVEAS(A6) 



C code includes pointers 

Digging into memory 

Set sail with pointers 

Try passing a pointer to the variable 

Using memory pointers 

How do you pass a string to a function? 

Array variables are like pointers... 

What the computer thinks when it runs your code 

But array variables aren’t quite pointers 

Why arrays really start at 0 

Why pointers have types 

Using pointers for data entry 

Be careful with scanf0 

fgetsQ is an alternative to scanfQ 

String literals can never be updated 

If you’re going to change a string, make a copy 

Memory memorizer 

Your C Toolbox 


MOV 

••• 

E.L GRAFGLO 

jrnrn 

BALS(A5),A0 

plrffT 

C Wind in the 




J 







( sails, cap'n! J 

Set sail for ) ^ 


42 

43 

44 

47 

48 

53 

54 

55 
59 
61 
62 

65 

66 
67 
72 
74 
80 
81 


Cancun! 



Arr! Spring 
break! 


n. latitude 

IV 


o 



* 4,100,000 o 


XI 


www.it-ebooks.info 



























































table of contents 




strings 

String theory 

There’s more to strings than reading them. 

You’ve seen how strings in C are actually char arrays but what does C allow you to do 
with them? That’s where string.h comes in. string.h is part of the C Standard Library 
that’s dedicated to string manipulation. If you want to concatenate strings together, 
copy one string to another, or compare two strings, the functions in string.h are there 
to help. In this chapter, you’ll see how to create an array of strings, and then take a 
close look at how to search within strings using the strstr () function. 


Desperately seeking Frank 84 

Create an array of arrays 85 

Find strings containing the search text 86 

Using the strstr0 function 89 

It’s time for a code review 94 

Array of arrays vs. array of pointers 98 

Your C Toolbox 101 



Compare two strings 
to each other 


iVtake a copy of a 


Search for a string 

Slice a string into 
little pieces 


• • 

XII 


www.it-ebooks.info 




table of contents 



creating small topis 

Do one thing and do it well 

Every operating system includes small tools. 

Small tools written in C perform specialized small tasks, such as reading and 
writing files, or filtering data. If you want to perform more complex tasks, you 
can even link several tools together. But how are these small tools built? In this 
chapter, you’ll look at the building blocks of creating small tools. You’ll learn how 
to control command-line options, how to manage streams of information, and 
redirection, getting tooled up in no time. 


Small tools can solve big problems 104 

Here’s how the program should work 108 

But you’re not using files... 109 

You can use redirection 110 

Introducing the Standard Error 120 

By default, the Standard Error is sent to the display 121 

fprintfO prints to a data stream 122 

Let’s update the code to use fprintfO 123 

Small tools are flexible 128 

Don’t change the geo2json tool 129 

A different task needs a different tool 130 

Connect your input and output with a pipe 131 

The bermuda tool 132 

But what if you want to output to more than one file? 137 

Roll your own data streams 138 

There’s more to mainO 141 

Let the library do the work for you 149 

Your C Toolbox 156 


Standard put Corr.es 
Wr. the keyboard. 

A 




Standard Evvov 

goes "to "the display. 


Run' 




£ 


% 






5 # 


& 


Standard Output 
^ 5 ^ goes bo display 


XIII 


www.it-ebooks.info 


















table of contents 


using multiple source files 



Break it down, build it up 

If you create a big program, you don’t want a big source file. 

Can you imagine how difficult and time-consuming a single source file for an enterprise- 
level program would be to maintain? In this chapter, you’ll learn how C allows you to 


break your source code into small, manageable chunks and then rebuild them into 


one huge program. Along the way, you’ll learn a bit more about data type subtleties 


and get to meet your new best friend: make. 



Your quick guide to data types 
Don’t put something big into something small 
Use casting to put floats into whole numbers 
Oh no.. .it’s the out-of-work actors... 

Let’s see what’s happened to the code 
Compilers don’t like surprises 
Split the declaration from the definition 
Creating your first header file 
If you have common features... 

You can split the code into separate hies 
Compilation behind the scenes 
The shared code needs its own header hie 
It’s not rocket science.. .or is it? 

Don’t recompile every hie 
First, compile the source into object hies 
It’s hard to keep track of the hies 
Automate your builds with the make tool 
How make works 

Tell make about your code with a makehle 
Liftoff! 

Your C Toolbox 


www.it-ebooks.info 


162 

163 

164 
168 
169 
171 

173 

174 
182 

183 

184 
186 

189 

190 

191 
196 

198 

199 

200 

205 

206 















(afe/e^^ontenls 

CLabl 


Arduino 


Ever wished your plants could tell you when they 
need watering? Well, with an Arduino, they can! 
In this lab, you’ll build an Arduino-powered plant 
monitor, all coded in C. 


www.it-ebooks.info 








table of contents 



structs, unions, and bitfields 

Roll ng your own structures 

Most things in life are more complex than a simple number. 

So far, you’ve looked at the basic data types of the C language, but what if you 
want to go beyond numbers and pieces of text, and model things in the real 
world? structs allow you to model real-world complexities by writing your own 
structures. In this chapter, you’ll learn how to combine the basic data types into 
structs, and even handle life’s uncertainties with unions. And if you’re after a 
simple yes or no, bitfields may be just what you need. 


This is Myrtle... 




• -M; hev dlohe is sent 

h> -the 

-fuhd-tioh. 


Sometimes you need to hand around a lot of data 218 

Cubicle conversation 219 

Create your own structured data types with a struct 220 

Just give them the fish 221 

Read a struct’s fields with the operator 222 

Can you put one struct inside another? 227 

How do you update a struct? 236 

The code is cloning the turtle 238 

You need a pointer to the struct 239 

(*t).age vs. *t.age 240 

Sometimes the same type of thing needs different types of data 246 
A union lets you reuse memory space 247 

How do you use a union? 248 

An enum variable stores a symbol 255 

Sometimes you want control at the bit level 261 

Bitfields store a custom number of bits 262 

Your C Toolbox 266 



xvi 


Turtle w t* 


www.it-ebooks.info 







table of contents 



data structures and dynamic memory 

Building bridges 

Sometimes, a single struct is simply not enough. 

To model complex data requirements, you often need to link structs together. In 
this chapter, you’ll see how to use struct pointers to connect custom data types into 
large, complex data structures. You’ll explore key principles by creating linked lists. 
You’ll also see how to make your data structures cope with flexible amounts of data by 
dynamically allocating memory on the heap, and freeing it up when you’re done. And 
if good housekeeping becomes tricky, you’ll also learn how valgrind can help. 




Isla Nublar 


Shatter 


Do you need flexible storage? 

Linked lists are like chains of data 
Linked lists allow inserts 
Create a recursive structure 
Create islands in C... 

Inserting values into the list 
Use the heap for dynamic storage 
Give the memory back when you’re done 
Ask for memory with mallocQ... 

Let’s fix the code using the strdupO function 
Free the memory when you’re done 
An overview of the SPIES system 
Software forensics: using valgrind 
Use valgrind repeatedly to gather more evidence 
Look at the evidence 
The fix on trial 
Your C Toolbox 


268 

269 

270 

271 

272 

273 

278 

279 

280 
286 
290 
300 

302 

303 

304 
307 


xvii 


www.it-ebooks.info 


table of contents 


advanced functions 



Turn your functions up to 11 

Basic functions are great, but sometimes you need more. 

So far, you’ve focused on the basics, but what if you need even more power and 
flexibility to achieve what you want? In this chapter, you’ll see how to up your 
code’s IQ by passing functions as parameters. You’ll find out how to get things 
sorted with comparator functions. And finally, you’ll discover how to make your 
code super stretchy with variadic functions. 


Looking for Mr. Right... 

Pass code to a function 

You need to tell find0 the name of a function 
Every function name is a pointer to the function... 
.. .but there’s no function data type 
How to create function pointers 
Get it sorted with the G Standard Library 
Use function pointers to set the order 
Automating the Dear John letters 
Create an array of function pointers 
Make your functions streeeeeetchy 
Your C Toolbox 


312 

316 

317 

318 

319 

320 

325 

326 
334 
338 
343 
350 










XVIII 


www.it-ebooks.info 








table of contents 



static and dynamic libraries 

Hot-swappable code 

You’ve already seen the power of standard libraries. 

Now it’s time to use that power for your own code. In this chapter, you’ll see how to 
create your own libraries and reuse the same code across several programs. 
What’s more, you’ll learn how to share code at runtime with dynamic libraries. You’ll 
learn the secrets of the coding gurus. And by the end of the chapter, you’ll be able to 
write code that you can scale and manage simply and efficiently. 




Code you can take to the bank 352 

Angle brackets are for standard headers 354 

But what if you want to share code? 355 

Sharing .h header files 356 

Share .o object files by using the full pathname 357 

An archive contains .o files 358 

Create an archive with the ar command... 359 

Finally compile your other programs 360 

The Head First Gym is going global 365 

Calculating calories 366 

But things are a bit more complex... 369 

Programs are made out of lots of pieces... 370 

Dynamic linking happens at runtime 372 

Can you link .a at runtime? 373 

First, create an object hie 374 

What you call your dynamic library depends on your platform 375 

Your C Toolbox 387 



Is it a biv-d? Is it 
a plane? /Vo, r(?s a 
relocatable object 
-Pile with metadata. 



xix 


www.it-ebooks.info 






table A contents 




OpenCV 

Imagine if your computer could keep an eye on your 
house while you’re out, and tell you who’s been 
prowling around. In this lab, you’ll build a C-powered 
intruder detector using the cleverness of OpenCV. 



www.it-ebooks.info 
















table of contents 



processes and system calls 

Breaking boundaries 

It’s time to think outside the box. 

You’ve already seen that you can build complex applications by connecting small 
tools together on the command line. But what if you want to use other programs 
from inside your own code? In this chapter, you’ll learn how to use system 
services to create and control processes. That will give your programs access to 
email, the Web, and any other tool you’ve got installed. By the end of the chapter, 
you’ll have the power to go beyond C. 


System calls are your hotline to the OS 

Then someone busted into the system... 

Security’s not the only problem 

The execQ functions give yon more control 

There are many execQ functions 

The array functions: execv0, execvpQ, execveQ 

Passing environment variables 

Most system calls go wrong in the same way 

Read the news with RSS 

execQ is the end of the line for your program 

Running a child process with forkQ + execQ 

Your C Toolbox 




This is 


your 


hcwshouhd 

process. 


sc 


.jpar3te 
es 'for eadh o* 
rcc news-feeds. 

A 


newshound 


The dhild processes all 
run at the same time. 


398 

402 

403 

404 

405 

406 

407 

408 
416 

420 

421 
427 


xxi 


www.it-ebooks.info 


table of contents 



interprocess communication 

It’s good to talk 

Creating processes is just half the story. 

What if you want to control the process once it’s running? What if you want to send it 
data ? Or read its output ? Interprocess communication lets processes work together 
to get the job done. We’ll show you how to multiply the power of your code by letting it 
talk to other programs on your system. 


^include <stdio.h> 

int main() 

{ 

char name[30]; 
printf ( "Enter your name: ") 
fgets(name, 30, stdin); 
printf ("Hello %s\n", name); 
return 0; 



} 



Redirecting input and output 

430 

A look inside a typical process 

431 

Redirection just replaces data streams 

432 

filenoO tells you the descriptor 

433 

Sometimes you need to wait... 

438 

Stay in touch with your child 

442 

Connect your processes with pipes 

443 

Case study: opening stories in a browser 

444 

In the child 

445 

In the parent 

445 

Opening a web page in a browser 

446 

The death of a process 

451 

Catching signals and running your own code 

452 

sigactions are registered with sigactionQ 

453 

Rewriting the code to use a signal handler 

454 

Use kill to send signals 

457 

Sending your code a wake-up call 

458 

Your C Toolbox 

466 


File Edit Window Help 

1 > ./greetings 
Enter your name: 

> _i 

A c 

p 1 


XXII 


J 

l-f you press C-brl-C, *the proyam 
S'fcofs vurmmjy Bu*t v/hy? 


www.it-ebooks.info 








table of contents 



sockets cind networking 

There’s no place like 127.0.0.1 

Programs on different machines need to talk to each other. 

You’ve learned how to use I/O to communicate with files and how processes on the 
same machine can communicate with each other. Now you’re going to reach out 
to the rest of the world, and learn how to write C programs that can talk to other 
programs across the network and across the world. By the end of this chapter, 
you’ll be able to create programs that behave as servers and programs that 
behave as clients. 


The Internet knock-knock server 468 

Knock-knock server overview 469 

BLAB: how servers talk to the Internet 470 

A socket’s not your typical data stream 472 

Sometimes the server doesn’t start properly 476 

Why your mom always told you to check for errors 477 

Reading from the client 478 

The server can only talk to one person at a time 485 

You can fork0 a process for each client 486 

Writing a web client 490 

Clients are in charge 491 

Create a socket for an IP address 492 

getaddrinfo() gets addresses for domains 493 

Your C Toolbox 500 



Telnet client 


Telnet client 

The server will talk to 
several clients at once- 




Server 


A client and server have 
a structured Conversation 
called a protocol 


Telnet client 


xxiii 


www.it-ebooks.info 


















table of contents 



tkeads 

It’s a parallel world 

Programs often need to do several things at the same time. 

POSIX threads can make your code more responsive by spinning off several pieces 
of code to run in parallel. But be careful! Threads are powerful tools, but you don’t 
want them crashing into each other. In this chapter, you’ll learn how to put up traffic 
signs and lane markers that will prevent a code pileup. By the end, you will know 
how to create POSIX threads and how to use synchronization mechanisms to 
protect the integrity of sensitive data. 



502 

503 

504 

505 

506 

507 

512 

513 

514 
521 


Tasks are sequential.. .or not... 

.. and processes are not always the answer 
Simple processes do one thing at a time 
Employ extra staff: use threads 
How do you create threads? 

Create threads with pthread__create 
The code is not thread-safe 
You need to add traffic signals 
Use a mutex as a traffic signal 
Your C Toolbox 


T 

The two ears represent 
two threads. They both 
wa»t to access the same 
shaved variable. 


Shared 

variable 




rhe trattit sisals prevent the 

threads -from attessmo, the same 
shared variable at the same time- 


xxiv 


www.it-ebooks.info 









Blasteroids 

In this lab, you’re going to pay tribute to one of the 
most popular and long-lived video games of them all. 
It’s time to write Blasteroids! 



www.it-ebooks.info 






table of contents 



lefeVers 

The top ten things (we didn’t cover) 

Even after all that, there’s still a bit more. 

There are just a few more things we think you need to know. We wouldn’t feel right 
about ignoring them, even though they need only a brief mention, and we really wanted 
to give you a book you’d be able to lift without extensive training at the local gym. So 



before you put the book down, read through these tidbits. 

#1. Operators 
#2. Preprocessor directives 
#3. The static keyword 
#4. How big stuff is 
#5. Automated testing 
#6. More on gee 
#7. More on make 
#8. Development tools 
#9. Creating GUIs 
#10. Reference material 


540 

542 

543 

544 

545 

546 
548 

550 

551 

552 



c topics 

Revision roundup 

Ever wished all those great C facts were in one place? 

This is a roundup of all the C topics and principles we’ve covered in the book. Take a 
look at them, and see if you can remember them all. Each fact has the chapter it came 



from alongside it, so it’s easy for you to refer back if you need a reminder. You might 
even want to cut these pages out and tape them to your wall. 


xxv i 


www.it-ebooks.info 


JiP\v to use this Dpok 

Intro 


the intro 



Is this book for you? 

with th > ° k ' S f ° r anyone 
W'ththe money to pay 

t. And it makes 

a great gift for that 

special someone 


In this section, we answer tb« burning juest.on 
"So wky PIP they ? ut that in a C book? 


you are here ► 


xxvii 


www.it-ebooks.info 











how to use this book 


Who is this book for? 

If you can answer “yes” to all of these: 


o 

e 

o 


Do you already know how to program in another 
programming language? 

Do you want to master C, create the next big thing in 
software, make a small fortune, and retire to your own 
private island? 


OkJ, maybe that one s a l»ttle 
•fav-feUhed- ^ Y ow 

stavt somewhevei 


Do you prefer actually doing things and applying the stuff 
you learn over listening to someone in a lecture rattle on 
for hours on end? 


this book is for you. 


Who should probably back away from this book? 

If you can answer “yes” to any of these: 


o 

o 


Are you looking for a quick introduction or reference book 
to C? 

Would you rather have your toenails pulled out by 15 
screaming monkeys than learn something new? Do you 
believe a C book should cover everything and if it bores 
the reader to tears in the process, then so much the 
better? 


this book is not for you. 


r 


Woit Atom /Wav-keting: -this book 
■S joy anyone with a dv-edit card 
we II addept a dhedk, too.J 



xxviii intro 


www.it-ebooks.info 


the intro 


We know what you're thinking 


11 


:t How can this be a serious G book? 
“What’s with all the graphics?” 
“Gan I actually learn it this way?” 


We know what your brain is thinking 

Your brain craves novelty It’s always searching, scanning, waiting for something 
unusual. It was built that way, and it helps you stay alive. 

So what does your brain do with all the routine, ordinary, normal things 
you encounter? Everything it can to stop them from interfering with the 
brain’s real job—recording things that matter. It doesn’t bother saving the 
boring things; they never make it past the “this is obviously not important 
filter. 

How does your brain know what’s important? Suppose you’re out for a day 
hike and a tiger jumps in front of you—what happens inside your head and 
body? 

Neurons fire. Emotions crank up. Chemicals surge. 

And that’s how your brain knows... 

This must be important! Don’t forget it! 

But imagine you’re at home or in a library. It’s a safe, warm, tiger-free zone. 
You’re studying. Getting ready for an exam. Or trying to learn some tough 
technical topic your boss thinks will take a week, ten days at the most. 

Just one problem. Your brain’s trying to do you a big favor. It’s trying to make 
sure that this obviously unimportant content doesn’t clutter up scarce resources. 
Resources that are better spent storing the really big things. Like tigers. 

Like the danger of fire. Like how you should never have posted those 
party photos on your Lacebook page. And there’s no simple way 
to tell your brain, “Hey brain, thank you very much, but no matter 
how dull this book is, and how little I’m registering on the emotional 
Richter scale right now, I really do want you to keep this stuff around. 


^ hi, jb 


THIS u ; 





you are here ► xxix 


www.it-ebooks.info 






how to use this book 


We toi of a “Head Brsf reader as a 

So what does it take to team ■kmm Based on the latest 
yon don’t forget It. It’s not about push ", io „ al psychology, tearnrng 

research in cognitive science, what turns your brain on. 

takes a lot more than text on a page. We 

Some of the Head First learning principles: 

Make it visual. Images are far more m n 7 e °3; b 3®^tran^ thingS m °* 

more effective (up to 89% improvement : in d hjcs they re , ate t0 , rat her than on 

understandable. Put the words w.thm or * ^ ^ t0 so lve problems related to the 

the bottom or on another page, and learners will P 

C ° ntent ' erf s tv|e In recent studies, students performed up 

Use a conversational and personalized * V ■ the reader , using a first-person, 

,o 40* better on p. S <« lash «o. I.during. 1*. casual langt**- 

zir—~ -—- • “ ” 

companion, or a lecture? neurons, 

Get the learner to think more deeply-In oth ^ engagedi curious , and inspire d to 

nothing much happens in your head r ^ knowledge. And for that, you need challenges, 

solve problems, draw conclusions, an g that inv0 | ve both sides of the brain an 

exercises, and thought-provoking question , 

multiple senses. t0 , e arn this, but I can't 

Get—and heep-.he reader’, ^ o,h,n gs ,ha„,.ou,o. t hao,d,na„. 

«—- - zszzxzzz™ »■* “ chn,ca '*** d ~ sn1 have “ 

interesting, strange, eye-catching, u 

boring. Your brain will learn much more guic • f j$ , argely dependen t 

Touch their emotions. We now know that your a ^ remem ber when you feel something. 

on its emotional content. You remembe.wv a yo ^ d We - re talking emotions like 

No, we're not talking heart-wrenching tor es abo V ^ ^ ^ you solv puz , earn 

iZ^eS^Ie^'ls hi or rrealize you know something that ,'m more technical 
thou" Bob from Engineering doesn t. 


xxx intro 


www.it-ebooks.info 


the intro 


Metacognition: thinking about thinking 

If you really want to learn, and you want to learn more quickly and more 
deeply, pay attention to how you pay attention. Think about how you think. 
Learn how you learn. 

Most of us did not take courses on metacognition or learning theory when we 
were growing up. We were expected to learn, but rarely taught to learn. 




The trick is to get your brain to see the new material you’re learning as 
Really Important. Crucial to your well-being. As important as a tiger. 
Otherwise, you’re in for a constant battle, with your brain doing its best to 
keep the new content from sticking. 


But we assume that if you’re holding this book, you really want to learn how 
to program in C. And you probably don’t want to spend a lot of time. If you 
want to use what you read in this book, you need to remember what you read. 
And for that, you’ve got to understand it. To get the most from this book, or any 
book or learning experience, take responsibility for your brain. Your brain on 
this content. 


So just how DO you get your brain to treat 
programming like it was a hungry tiger? 


There’s the slow, tedious way, or the faster, more effective way. The 
slow way is about sheer repetition. You obviously know that you are able to learn 
and remember even the dullest of topics if you keep pounding the same thing into your 
brain. With enough repetition, your brain says, “This doesn’t feel important to him, but he 
keeps looking at the same thing over and over and over , so I suppose it must be.” 


The faster way is to do anything that increases brain activity, especially different 
types of brain activity. The things on the previous page are a big part of the solution, 
and they’re all things that have been proven to help your brain work in your favor. For 
example, studies show that putting words within the pictures they describe (as opposed to 
somewhere else in the page, like a caption or in the body text) causes your brain to try to 
makes sense of how the words and picture relate, and this causes more neurons to fire. 
More neurons firing = more chances for your brain to get that this is something worth 
paying attention to, and possibly recording. 


A conversational style helps because people tend to pay more attention when they 
perceive that they’re in a conversation, since they’re expected to follow along and hold up 
their end. The amazing thing is, your brain doesn’t necessarily care that the “conversation” 
is between you and a book! On the other hand, if the writing style is formal and dry, your 
brain perceives it the same way you experience being lectured to while sitting in a roomful 
of passive attendees. No need to stay awake. 


But pictures and conversational style are just the beginning... 


you are here ► xxxi 


www.it-ebooks.info 


how to use this book 


Here's what WE did: 

We used pictures, because your brain is tuned for visuals, not text. As far as your brain’s 
concerned, a picture really is worth a thousand words. And when text and pictures work 
together, we embedded the text in the pictures because your brain works more effectively 
when the text is within the thing it refers to, as opposed to in a caption or buried in the body 
text somewhere. 

We used redundancy , saying the same thing in different ways and with different media types, 
and multiple senses , to increase the chance that the content gets coded into more than one area 
of your brain. 

We used concepts and pictures in unexpected ways because your brain is tuned for novelty, 
and we used pictures and ideas with at least some emotional content , because your brain 
is tuned to pay attention to the biochemistry of emotions. That which causes you to feel 
something is more likely to be remembered, even if that feeling is nothing more than a little 

humor , surprise , or interest . 

We used a personalized, conversational style , because your brain is tuned to pay more 
attention when it believes you’re in a conversation than if it thinks you’re passively listening 
to a presentation. Your brain does this even when you’re reading. 

We included more than 80 activities , because your brain is tuned to learn and remember 
more when you do things than when you read about things. And we made the exercises 
challenging-yet-doable, because that’s what most people prefer. 

We used multiple learning styles , because you might prefer step-by-step procedures, while 
someone else wants to understand the big picture first, and someone else just wants to see 
an example. But regardless of your own learning preference, everyone benefits from seeing the 
same content represented in multiple ways. 

We include content for both sides of your brain , because the more of your brain you 
engage, the more likely you are to learn and remember, and the longer you can stay focused. 
Since working one side of the brain often means giving the other side a chance to rest, you 
can be more productive at learning for a longer period of time. 

And we included stories and exercises that present more than one point of view, 
because your brain is tuned to learn more deeply when it’s forced to make evaluations and 
judgments. 

We included challenges , with exercises, and by asking questions that don’t always have 
a straight answer, because your brain is tuned to learn and remember when it has to work at 
something. Think about it—you can’t get your body in shape just by watching people at the 
gym. But we did our best to make sure that when you’re working hard, it’s on the right things. 
That you’re not spending one extra dendrite processing a hard-to-understand example, 
or parsing difficult, jargon-laden, or overly terse text. 

We used people. In stories, examples, pictures, etc., because, well ,you’re a person. And your 
brain pays more attention to people than it does to things. 


xxxii intro 


www.it-ebooks.info 



the intro 



Here's what YOU can do to bend 
your brain into submission 

So, we did our part. The rest is up to you. These tips are a 
starting point; listen to your brain and figure out what works 
for you and what doesn’t. Try new things. 

Cut this out dhd sti£k it 

OK your re-PrigeraW. 


O 


o 


o 


o 


o 


Q 


O 


Slow down. The more you understand, the o 
less you have to memorize. 

Don’t just read. Stop and think. When the book asks 
you a question, don’t just skip to the answer. Imagine 
that someone really is asking the question. The 
more deeply you force your brain to think, the better 
chance you have of learning and remembering. 

Do the exercises. Write your own notes. 

We put them in, but if we did them for you, that 
would be like having someone else do your workouts 
for you. And don’t just look at the exercises. Use a 
pencil. There’s plenty of evidence that physical 
activity while learning can increase the learning. 

Read “There Are No Dumb Questions.” 

That means all of them. They’re not optional 
sidebars, they We part of the core content! 

Don’t skip them. 

Make this the last thing you read before bed. 0 
Or at least the last challenging thing. 

Part of the learning (especially the transfer to 
long-term memory) happens after you put the book 
down. Your brain needs time on its own, to do more 
processing. If you put in something new during that 
processing time, some of what you just learned will 
be lost. 

Talk about it. Out loud. 

Speaking activates a different part of the brain. If 
you’re trying to understand something, or increase 
your chance of remembering it later, say it out loud. 

Better still, try to explain it out loud to someone else. 

You’ll learn more quickly, and you might uncover 
ideas you hadn’t known were there when you were 
reading about it. 


Drink water. Lots of it. 

Your brain works best in a nice bath of fluid. 
Dehydration (which can happen before you ever 
feel thirsty) decreases cognitive function. 

Listen to your brain. 

Pay attention to whether your brain is getting 
overloaded. If you find yourself starting to skim 
the surface or forget what you just read, it’s time 
for a break. Once you go past a certain point, you 
won’t learn faster by trying to shove more in, and 
you might even hurt the process. 

Feel something. 

Your brain needs to know that this matters. Get 
involved with the stories. Make up your own 
captions for the photos. Groaning over a bad joke 
is still better than feeling nothing at all. 

Write a lot of code! 

There’s only one way to learn to program in G: 
write a lot of code. And that’s what you’re going 
to do throughout this book. Coding is a skill, and 
the only way to get good at it is to practice. We’re 
going to give you a lot of practice: every chapter has 
exercises that pose a problem for you to solve. Don’t 
just skip over them—a lot of the learning happens 
when you solve the exercises. We included a solution 
to each exercise—don’t be afraid to peek at the 
solution if you get stuck! (It’s easy to get snagged 
on something small.) But try to solve the problem 
before you look at the solution. And definitely get it 
working before you move on to the next part of the 
book. 


you are here ► xxxiii 


www.it-ebooks.info 









how to use this book 


Read me 


This is a learning experience, not a reference book. We deliberately stripped out everything 
that might get in the way of learning whatever it is we’re working on at that point in the 
book. And the first time through, you need to begin at the beginning, because the book 
makes assumptions about what you’ve already seen and learned. 


We assume you’re new to C, but not to programming. 

We assume that you’ve already done some programming. Not a lot, but we’ll assume you’ve 
already seen things like loops and variables in some other language, like JavaScript. G is 
actually a pretty advanced language, so if you’ve never done any programming at all, then 
you might want to read some other book before you start on this one. We’d suggest starting 
with Head First Programming. 


You need to install a C compiler on your computer. 

Throughout the book, we’ll be using the Gnu Compiler Collection (gcc) because it’s free 
and, well, we think it’s just a pretty darned good compiler. You’ll need to make sure you 
have gcc installed on your machine. The good news is, if you have a Linux computer, 
then you should already have gcc. If you’re using a Mac, you’ll need to install the 
Xcode/Developer tools. You can either download these from the Apple App Store or by 
downloading them from Apple. If you’re on a Windows machine, you have a couple 
options. Cygwin (http://www.cygwin.com) gives you a complete simulation of a UNIX 
environment, including gcc. But if you want to create programs that will work on 
Windows plain-and-simple, then you might want to install the Minimalist GNUfor Windows 
(MingW) from http://www.mingw.org. 

All the code in this book is intended to run across all these operating systems, and we’ve 
tried hard not to write anything that will only work on one type of computer. Occasionally, 
there will be some differences, but we’ll make sure to point those out to you. 


We begin by teaching some basic C concepts, and then we start 
putting C to work for you right away. 

We cover the fundamentals of G in Chapter 1. That way, by the time you make it all 
the way to Chapter 2, you are creating programs that actually do something real, useful, 
and—gulp!—fun. The rest of the book then builds on your G skills, turning you from C 
newbie to coding ninja master in no time. 


xxxiv intro 


www.it-ebooks.info 




the intro 


The activities are NOT optional. 

The exercises and activities are not add-ons; they’re part of the core content of the book. 
Some of them are to help with memory, some are for understanding, and some will help 
you apply what you’ve learned. Don’t skip the exercises. 

The redundancy is intentional and important. 

One distinct difference in a Head First book is that we want you to really get it. And we 
want you to finish the book remembering what you’ve learned. Most reference books 
don’t have retention and recall as a goal, but this book is about learning , so you’ll see some 
of the same concepts come up more than once. 

The examples are as lean as possible. 

Our readers tell us that it’s frustrating to wade through 200 lines of an example looking 
for the two lines they need to understand. Most examples in this book are shown within 
the smallest possible context, so that the part you’re trying to learn is clear and simple. 
Don’t expect all of the examples to be robust, or even complete—they are written 
specifically for learning, and aren’t always fully functional. 


The Brain Power exercises don’t have answers. 

For some of them, there is no right answer, and for others, part of the learning 
experience of the Brain Power activities is for you to decide if and when your answers 
are right. In some of the Brain Power exercises, you will find hints to point you in the 
right direction. 


you are here ► 


xxxv 


www.it-ebooks.info 



the review team 


The technical review team 



Technical reviewers: 

Dave Kitabjian has two degrees in electrical and computer engineering and about 20 years of experience consulting, 
integrating, architecting, and building information system solutions for clients from Fortune 500 hr ms to high-tech startups. 
Outside of work, Dave likes to play guitar and piano and spend time with his wife and three kids. 

Vince Milner has been developing in G (and many other languages) on a wide variety of platforms for over 20 years. 
When not studying for his master’s degree in mathematics, he can be found being beaten at board games by six-year-olds 
and failing to move house. 


xxxv i intro 


www.it-ebooks.info 






the intro 


Acknowledgments 

Our editor: 

Many thanks to Brian Sawyer for asking us to write this book 
in the first place. Brian believed in us every step of the way, gave 
us the freedom to try out new ideas, and didn’t panic too much 
when deadlines loomed. 




The O’Reilly team: 


A big thank you goes to the following people who helped us out along the way: 
Karen Shaner for her expert image-hunting skills and for generally keeping the 
wheels oiled; Laurie Petrycki for keeping us well fed and well motivated while in 
Boston; Brian Jepson for introducing us to the wonderful world of the Arduino; 
and the early release team for making early versions of the book available for 
download. Finally, thanks go to Rachel Monaghan and the production team for 
expertly steering the book through the production process and for working so hard 
behind the scenes. You guys are awesome. 


Family, friends, and colleagues: 

We’ve made a lot of friends on our Head First journey. A special thanks goes to Lou 

Barr, Brett McLaughlin, and Sanders Kleinfeld for teaching us so much. 

David: My thanks to Andy Parker, Joe Broughton, Carl Jacques, and Simon 
Jones and the many other friends who have heard so little from me whilst I was busy 
scribbling away. 

Dawn: Work on this book would have been a lot harder without my amazing 
support network of family and friends. Special thanks go to Mum and Dad, Carl, 
Steve, Gill, Jacqui, Joyce, and Paul. Fve truly appreciated all your support and 
encouragement. 


The without-whom list: 

Our technical review team did a truly excellent job of keeping us straight and 
making sure what we covered was spot on. We’re also incredibly grateful to all the 
people who gave us feedback on early releases of the book. We think the book’s 
much, much better as a result. 

Finally, our thanks to Kathy Sierra and Bert Bates for creating this extraordinary 
series of books. 


you are here ► 


xxxvii 


www.it-ebooks.info 




safari books online 


Safari® Books Online 


Safari 


Books Online 


Safari Books Online ( www.safaribooksonline.com ) is an on- 
demand digital library that delivers expert content in both 
book and video form from the world’s leading authors in 
technology and business. Technology professionals, software developers, web 
designers, and business and creative professionals use Safari Books Online as their 
primary resource for research, problem solving, learning, and certification training. 


Safari Books Online offers a range of product mixes and pricing programs for 
organizations, government agencies, and individuals. Subscribers have access 
to thousands of books, training videos, and prepublication manuscripts in one 
fully searchable database from publishers like O’Reilly Media, Prentice Hall 
Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit 
Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, 
IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, 
McGraw-Hill, Jones & Bartlett, Course Technology, and dozens more. For more 
information about Safari Books Online, please visit us online. 


xxxviii intro 


www.it-ebooks.info 



Want to get inside the computer’s head? 

Need to write high-performance code for a new game? Program an Arduino? Or use 
that advanced third-party library in your iPhone app? If so, then C’s here to help. C 
works at a much lower level than most other languages, so understanding C gives you a 
much better idea of what’s really going on. C can even help you better understand other 
languages as well. So dive in and grab your compiler, and you’ll soon get started in no time. 


this is a new chapter 


www.it-ebooks.info 





how c works 


C is a language for small, fast programs 

The G language is designed to create small, fast programs. It’s 
lower-level than most other languages; that means it creates code 
that’s a lot closer to what machines really understand. 


The way C works 


Computers really only understand one language: machine code, a 
binary stream of Is and Os. You convert your G code into machine 
code with the aid of a compiler. 




File Edit Window Help Compile 


> gcc rocks.c -o rocks 

> 




|« Wmdio'ws, -tWis W 
be tailed votks e*e 
instead <£ ,rot ' cs ' 

4 



rocks 



Source 

You start off by 
creating a source 
file. The source file 
contains human- 
readable C code. 


Compile 

You run your source 
code through a compiler. 
The compiler checks 
for errors, and once it’s 
happy, it compiles the 
source code. 


Output 

The compiler creates a new 
file called an executable. This 
file contains machine code, 
a stream of 1 s and Os that 
the computer understands. 
And that’s the program you 
can run. 


C is used where speed, space, and 
portability are important. Most 
operating systems are written in C. 
Most other computer languages are 
also written in C. And most game 
software is written in C. 


There are three C standards that you may 
stumble across. ANSI C is from the late 1980s 
and is used for the oldest code. A lot of things 
were fixed up in the C99 standard from 1999. And 
some cool new language features were added in 
the current standard, Cl 1, released in 2011. The 
differences between the different versions aren’t 
huge, and we’ll point them out along the way. 


2 Chapter 1 


www.it-ebooks.info 






getting started with c 



J W W ■ ■ -w ■ • 


int card_count = 11; 
if (card_count > 10) 

puts("The deck is hot. 


Try to guess what each of these code fragments does. 


Pestvibe wbat you -tVmk tbe tode does. 

A/ 


Increase bet. ") ; 


int c = 10; 
while (c > 0) { 

puts("I must not write code in class"); 
c = c - 1; 

} 

/* Assume name shorter than 20 chars. */ 
char ex [20]; 

puts("Enter boyfriend's name: "); 
scanf ( "%19s", ex); 

printf("Dear %s.\n\n\tYou’re history.\n", ex); 


char suit = 'H'; 
switch (suit) { 
case 'C': 

puts("Clubs"); 
break; 
case 'D': 

puts("Diamonds"); 
break; 
case 'H': 

puts("Hearts"); 
break; 
default: 

puts("Spades") ; 

} 


you are here ► 3 


www.it-ebooks.info 

































fragments demystified 



Don't worry if you don't understand all of this yet. Everything is 
explained in greater detail later in the book. 


int card count = 11;A* • • , . 

™ integer .s a whole number. 

if (card_count > 10) 

puts ("The deck is hot. Increase bet."); 

This displays a string Oh the dommand prompt or terminal- 


/-The brades define a 
block s-b-temeht 


int c = 10; 
while (c > 0) { 

puts ("I must not write code in class");’ 
c = c - 1; 

} 


/* Assume name shorter than 20 chars. */ 
char ex [20]; 


puts("Enter boyfriend's name: "); 

-This means "store everything the 

user types into the ex array- 

printf("Dear %s.\n\n\tYou're history.\n", ex); 


scanf ( "%19s", ex); 


^ 7 \ 


This will insev~b thisltt^ff 
traders h ere ih place d the %s 


char suit = 'H'; 
switch (suit) { 
case 'C': 

puts("Clubs"); 
break; 
case 'D': 

puts("Diamonds"); 
break; 
case 'H': 

puts("Hearts"); 
break; 
default: 

puts("Spades") ; 


^ checks a sih«le 

variable tor di-Pferent values. 


Create an integer variable and set it to II. 

|s the dount more than 10? . 

If so; dispjay a. message, on the dommand. prompt- 


Create an integer variable and set it to 10- 
As long as the value is positive... 

...display a message... 

...and decrease the dount- 

This is the end of the dode that should be repeated- 


This is a domment- 

Create an array of 2-0 dharadters. 

Display a message on the sdreen- 

Store what the user enters into the array- 

Display a message indluding the text entered- 


Create a dharadter variable; store the letter W- 
Look at the value oP the variable- 

|f so, display the word "Clubs.” 

Then skip past the other dhedks. 


Is it ‘D’? 

|P so, display the word "Diamonds.” 
Then skip past the other dhedks. 


sitW? 

|f so, display the word "Hearts.” 
Then skip past the other dhedks. 


Otherwise... 

Display the word "Spades.” 
This is the end oP the tests- 


4 Chapter 1 


www.it-ebooks.info 









































getting started with c 


Put what does a complete C program look like? 

To create a full program, you need to enter your code into a 
C source file. G source files can be created by any text editor, 

and their filenames usually end with .c. ^— This is jus*t 3 dorwerrtion, bu*t you should -follow it 

Let’s have a look at a typical G source file. 



C programs normally begin with a comment. 

The comment describes the purpose of the code in the file, and might 
include some license or copyright information. There’s no absolute need 
to include a comment here—or anywhere else in the file—but it’s good 
practice and what most G programmers will expect to find. 


The tosha rh with /■*.->? 


These *s ave optional- They ve 
only -there t> r*ake ft look pretty. 

The dommerit ends with */ 

O Next comes the > 
include section. 

G is a very, very small 
language and it can do 
almost nothing without 
the use of external 
libraries. You will need 
to tell the compiler what 
external code to use by 
including header files 
for the relevant libraries. 
The header you will see 
more than any other 
is stdio.h. The stdio 
library contains code 
that allows you to read 
and write data from and 
to the terminal. 


* Program to calculate the number of cards in the shoe 

* This code is released under the Vegas Public License 


(c)2014. The College Blackjack Team. 


/ 


finclude <stdio.h> 

int main() 

{ 

int decks; 
puts("Enter a number of decks"); 
scanf("%i", &decks); 
if (decks < 1) { 

puts("That is not a valid number of decks"); 
return 1; 

} 

printf("There are %i cards\n", (decks * 52)); 
return 0; 


} 


o 


The last thing you find in a source file are the functions 

All G code runs inside functions. The most important function you will 
find in any G program is called the main () function. The main () 
function is the starting point for all of the code in your program. 


So let’s look at the main() function in a little more detail. 


you are here ► 5 


www.it-ebooks.info 






main() function 



The ma]n() function Tip Close 


The computer will start running your program from the main () 
function. The name is important: if you don’t have a function called main (), 
your program won’t be able to start. 

The main () function has a return type of int. So what does this mean? 
Well, when the computer runs your program, it will need to have some way of 
deciding if the program ran successfully or not. It does this by checking the return 
value of the main () function. If you tell your main () function to return 0, this 
means that the program was successful. If you tell it to return any other value, 
this means that there was a problem. 


This is -the return bflt- It 
should always be int tor the 
mdinO -function- 


int main() 

{ 


The body o-P the 
-Puhetioh is always 
surrouhded by brakes. 


tt. UK- •« «»«* " 

If we had any parameters, they'd be mentioned here. 

int decks; 

puts ("Enter a number of decks"); 
scanf ("%i", &decks); 
if (decks < 1) { 

puts ("That is not a valid number of decks"); 
return 1; 

} 

printf ("There are %i cards\n", (decks * 52)); 
return 0; 


start here- 


The function name comes after the return type. That’s followed by the function 
parameters if there are any. Finally, we have the function body. The function body 
must be surrounded by braces. 




The printf () function is used to display formatted output. It 
replaces format characters with the values of variables, like this: 

The ( ivs*t fav-ar^etev- will be msev-ted heve as a s-tv-mj. Fivs-fc pavame-tev 

K* * 

printf("%s says the count is %i", "Ben", 21); 

T 

The sedond parameter will be inserted here as an integer. Setond parameter 

You can include as many parameters as you like when you call the printf () 
function, but make sure you have a matching % format character for each one. 


_l ,n p <* ttY 

• w W'>rdo* s . «*"• 


6 Chapter 1 


www.it-ebooks.info 










getting started with c 


f Code Magnets 

--—" | The College BlackjackTeam was working on some code on the dorm fridge, but 

someone mixed up the magnets! Can you reassemble the code from the magnets? 

/* 

l_ * Program to evaluate face values. 

* Released under the Vegas Public License. 

* (c)2014 The College Blackjack Team. 

*/ 


_ main() 

{ 

char card_name[3]; 

puts("Enter the card_name: "); 

Bnler iv/o dhav-ad-tev-s -—\ ~ , „ „ 0 „ , , 

p,. , > scanf("%2s", card name); 

+ov- the davd name. 

int val = 0; 

if (card_name[0] == ' K') { 

val = 10; 

} else if (card name[0] == 1 Q 1 ) { 


} else if (card_name[0] 
val = 10; 


) { 






} 


(card name[0] == ) { 


return 


} else ^ ^ —' —This “the 

val = atoi (card_name) ; m'to 3 number* 

} 

printf("The card value is: %i\n", val); 




} 


you are here ► 7 


www.it-ebooks.info 






























magnets unmixed 



Code Magnets Solution 

The College BlackjackTeam was working on some code on the dorm fridge, but someone 
mixed up the magnets! You were to reassemble the code from the magnets. 

/* 

* Program to evaluate face values. 



return 



} 

8 Chapter 1 


www.it-ebooks.info 















































getting started with c 


Put how do you run the program? 


G is a compiled language. That means the computer will not interpret the code 
directly. Instead, you will need to convert—or compile —the human-readable 
source code into machine-readable machine code. 

To compile the code, you need a program called a compiler. One of the 
most popular G compilers is the GNU Compiler Collection or gcc. gcc is 
available on a lot of operating systems, and it can compile lots of languages 
other than G. Best of all, it’s completely free. 

Here’s how you can compile and run the program using gcc. 



Save the code from the Code Magnets exercise on the 
opposite page in a file called cards.c. 



C 


cards.c 


souv-de -files usually end d. 



Compile with gcc cards. c -o cards at a command 
prompt or terminal. 



Compile dards.d 
-bo a -file dalled dav-ds. 


File Edit Window Help Compile" 


> gcc cards.c -o cards 



cards.c cards 



Run by typing cards on Windows, or . /cards on Mac and 
Linux machines. i ri le m window Help - 


> ./cards 

Enter the card name: 


c 

This will be davds.exe 
i-f you \r*e Oh Windows. 



You can compile and run your code on most machines using this trick: 


ff here means 'and then i-P its suddess-ful, do -this..." 

nV «■ 

gcc zork.c -o zork && ./zork 


You should yut u zx>vk” 
instead o£ Vz ■orb” 
on a Windows madhine- 


This command will run the new program only if it compiles 
successfully. If there's a problem with the compile, it will skip running 
the program and simply display the errors on the screen. 



You should create the 
cards.c file and compile 
it now. We’ll be working 
on it more and more as 
the chapter progresses. 


you are here ► 9 


www.it-ebooks.info 

















test drive 



Let’s see if the program compiles and runs. Open up a command prompt 
or terminal on your machine and try it out. 


This Imc Spiles -the Code a*d 
Creates -the ta/rds piroai-am. 


£dv-ds pv-ogva 


This Imc runs line program. A 
|-f youVe on ^/indov/S) don "t 

•type -the •/ 

Running -the program again 



File Edit Window Help 21 


> gcc cards.c -o cards 

> ./cards 

Enter the card_name: 

Q 

The card value is: 10 

> ./cards 

Enter the card name: 



Remember: you car tomfeme 
the compile and w ste ? s 

toother (W ka tk a W 

to see hovi)- 



The user enters the 
name trorn a card 


...and the program displays^ 
the corresponding value -/ 


The card value is: 11 
> ./cards 

Enter the card_name: 

7 

The card value is: 7 


The program works! 

Congratulations! You have compiled and run a C program. The gcc 
compiler took the human-readable source code from cards.c and converted 
it into computer-readable machine code in the cards program. If you are 
using a Mac or Linux machine, the compiler will have created the machine 
code in a file called cards. But on Windows, all programs need to have a 
.exe extension, so the file will be called cards.exe. 


there-, effe no 

Dumb Questions 


Q- Why do I have to prefix the program with . / when I run it on Linux and the Mac? 

On Unix-style operating systems, programs are run only if you specify the directory where 
they live or if their directory is listed in the PATH environment variable. 


10 Chapter 1 


www.it-ebooks.info 











getting started with c 


Wait, I don't get it. When 
we ask the user what the name 
of the card is, we're using an 
array of characters. An array of 
characters???? Why? Can't we use 
a string or something??? 


The C language doesn’t support strings out 
of the box. 

G is more low-level than most other languages, so instead 
of strings, it normally uses something similar: an array of 
single characters. If you’ve programmed in other languages, 
you’ve probably met an array before. An array is just a list of 
things given a single name. So card_name is just a variable 
name you use to refer to the list of characters entered at 
the command prompt. You defined card_name to be a 
two-character array , so you can refer to the first and second 
character as char_name [ 0 ] and char_name [ 1 ]. To see 
how this works, let’s take a deeper dive into the computer’s 
memory and see how G handles text... 


But theve av-e 

a number 

C exte**'®* 

I'tbvavies -ttot 
do OjWe '/ow 
sbrm$ s * 


you are here ► 11 


www.it-ebooks.info 


string theory 



Strings Vay XJp C]<sse 


Strings are just character arrays. When G sees a string like this: 


s = "Shatner" 


it reads it like it was just an array of separate characters: 




This is inova you de-finC 3n 3\rir3y im C- 


s = {'S', ’h ! , 'a', 't', ' n ’ , 'r'} 


Each of the characters in the string is just an element in an array, which is 
why you can refer to the individual characters in the string by using an index, 
like s [ 0 ] and s [ 1 ]. 

Pon't fall off the end of the string 

But what happens when G wants to read the contents of the string? Say 
it wants to print it out. Now, in a lot of languages, the computer keeps 
pretty close track of the size of an array, but G is more low-level than most 
languages and can’t always work out exactly how long an array is. If G is going 
to display a string on the screen, it needs to know when it gets to the end of 
the character array. And it does this by adding a sentinel character. 

The sentinel character is an additional character at the end of the string that 
has the value \ 0. Whenever the computer needs to read the contents of the 
string, it goes through the elements of the character array one at a time, until 
it reaches \ 0. That means that when the computer sees this: 


S h a 





C knovas 

•bo stop 
vahen it 
sees NO. 


s = "Shatner" 


it actually stores it in memory like this: 

t^-\0 is -the ASCII thavatlev 

vaith v^lue 0- 


C Coders after eall this 
the MXL-L- £ha\ra£ter. 

That’s why in our code we had to define the card_name variable like this: 

char card_name[3]; 

The card_name string is only ever going to record one or two characters, but because 
strings end in a sentinel character we have to allow for an extra character in the array. 



Shat 


n 


\0 


cN cX cX cX cX cX cX 


12 Chapter 1 


www.it-ebooks.info 




























getting started with c 


-there-, axe no 

Dumb Questions 


C>: Why are the characters numbered 
from 0? Why not 1? 


The index is an offset: it’s a measure 
of how far the character is from the first 
character. 



The computer will store the 
characters in consecutive bytes of memory. 
It can use the index to calculate the 
location of the character. If it knows that 
c [ 0 ] is at memory location 1,000,000, 
then it can quickly calculate that c [ 9 6 ] 
is at 1,000,000 + 96. 


% Why does it need a sentinel 
character? Doesn’t it know how long the 
string is? 


^Z Usually, it doesn’t. C is not very good 
at keeping track of how long arrays are, 
and a string is just an array. 



It doesn’t know how long arrays 


are??? 


No. Sometimes the compiler 
can work out the length of an array by 
analyzing the code, but usually C relies on 
you to keep track of your arrays. 


% Does it matter if I use single 
quotes or double quotes? 


^Z Yes. Single quotes are used for 
individual characters, but double quotes 
are always used for strings. 


% So should I define my strings 
using quotes (") or as explicit arrays of 
characters? 


Usually you will define strings using 
quotes. They are called string literals, and 
they are easier to type. 


% Are there any differences between 
string literals and character arrays? 


Only one: string literals are constant. 



What does that mean? 


It means that you can’t change the 
individual characters once they are created. 



What will happen if I try? 


Z It depends on the compiler, but gcc 
will usually display a bus error. 


O: A bus error? What the heck’s a 
bus error? 


C will store string literals in memory 
in a different way. A bus error just means 
that your program can’t update that piece 
of memory. 



Set 
“teeth 
the value 


Palnjess Operations 


Not all equals signs are equal. 



In C, the equals sign (=) is 
used for assignment. But a 
double equals sign (==) is 
used for testing equality. 

teeth = 4; 


teeth == 4; 

Test it teeth has 
the value ^f- 


If you want to increase 
or decrease a variable, 
then you can save space 
with the += and -= 
assignments. 

./\dds Z -bo teeth- 
Hr 

teeth += 2; 


teeth -= 2; 

f 

Takes away Z -teeth. 


Finally, if you want to 
increase or decrease a 
variable by 1, use ++ 
and 


teeth++; ^—- Increase by I. 


teeth-- 



Decrease 



I. 


you are here ► 13 


www.it-ebooks.info 










do something 


Two types of command 

So far, every command you’ve seen has fallen into one of the following two 
categories. 

Vo something 

Most of the commands in G are statements. Simple statements are actions ; 
they do things and they tell us things. You’ve met statements that define 
variables, read input from the keyboard, or display data to the screen. 

split hand() ; This is a single statement 


Sometimes you group statements together to create block statements. Block 
statements are groups of commands surrounded by braces. 


These dommdnds -form 
a blodk s-ta-temeyrt 
bedause -they are 
suvvouhded by bvades. 






deal_first_card(); 
deal_second_card(); 
cards in hand = 2; 


Vo something onjy if something is true 

Control statements such as if check a condition before running the code: 


if (value_of_hand <= 16) kr This is the Condition, 
hit (); Run this statement it the Condition is W 

else 

stand () ; ^— Run this statement i-f the dondrbon is -false- 


i f statements typically need to do more than one thing when a 
condition is true, so they are often used with block statements: 


if (dealer_card == 6) { 

double_down(); 

BOTH 0+ these dommdnds will 
run i-f the dondition is true- 
} The dommdnds aire grouped 

inside a single blodk statement- 




Do you need braces? 


Block statements allow you to 
treat a whole set of statements as if 
they were a single statement. In C, 
the if condition works like this: 

if (countdown == 0) 
do_this_thing(); 

The if condition runs a single 
statement. So what if you 
want to run several statements 
in an if? If you wrap a list of 
statements in braces, C will treat 
them as though they were just 
one statement: 

if (x == 2) { 

call_whitehouse(); 
sell_oil(); 
x = 0; 

} 

C coders like to keep their code 
short and snappy, so most will 
omit braces on if conditions 
and while loops. So instead of 
writing: 

if (x == 2) { 

puts("Do something"); 

} 

most C programmers write: 

if (x == 2) 

puts("Do something"); 


14 Chapter 1 


www.it-ebooks.info 



getting started with c 


Here's the code so far 


/* 

* Program to evaluate face values. 

* Released under the Vegas Public License. 

* (c)2014 The College Blackjack Team. 

*/ 

^include <stdio.h> 

^include <stdlib.h> 
int main() 

{ 

char card_name[3]; 
puts("Enter the card_name: "); 

scanf("%2s", card_name); 
int val = 0; 

if (card_name[0] == ' K') { 

val = 10; 

} else if (card_name[0] == 'Q') { 

val = 10; 

} else if (card_name[0] == 'J') { 

val = 10; 

} else if (card_name[0] == 'A') { 

val = 11; 

} else { 

val = atoi(card_name); 

} 

printf("The card value is: %i\n", val); 
return 0; 




O 


www.it-ebooks.info 



15 








page goal header 


Hey, how’s it going? You look 
to me like a smart guy. And I 
know, ’cause I’m a smart guy 
too! Listen, I’m onto a sure 
thing here, and I’m a nice 
guy, so I’m going to let you 

in on it. See, I’m an expert 

in card counting. The Capo 
di tutti capi. What’s card 
counting, you say? Well, to 
me, it’s a career! 

Seriously, card counting is 
a way of improving the odds 
when you play blackjack. In 
blackjack, if there are plenty 
of high-value cards left in 
the shoe, then the odds are 
slanted in favor of the player. 
That’s you! 

Card counting helps you 
keep track of the number of 
high-value cards left. Say 
you start with a count of 0. 


Then the dealer leads with 
a Queen-that’s a high card. 
That’s one less available in 
the deck, so you reduce the 
count "by one: 


It’s a queen ^ count - 1 

But if it’s a low card, like a 4, 
the count goes up hy one: 


It’s a four ^ count + 1 


High cards are 10s and the 
face cards (Jack, Queen, 
King)- Low cards are 3s, 4s, 

5s, and 6s. 

You keep doing this for every 
low card and every high 
card until the count gets real 
high, then you lay on cash 


in your next bet and ba-da- 

bing' Soon you’ll have more 

money than my third wife! 

If you’d like to learn more, 
then enroll today in my 

Blackjack Correspondence 
School. Learn more about 
card counting as well as: 

* How to use the Kelly 
Criterion to maximize the 
value ofyourhet 

* How to avoid getting 

whacked hy a pit Loss 

* How to get cannoli stains 
off a silk suit 

* Things to wear with plaid 

For more information, 
contact Cousin Vinny c/o the 

Blackjack Correspondence 

School. 


16 Chapter 1 


www.it-ebooks.info 


getting started with c 


Card counting? In C? 

Card counting is a way to increase your chances of winning at blackjack. 
By keeping a running count as the cards are dealt, a player can work out 
the best time to place large bets and the best time to place small bets. Even 
though it’s a powerful technique, it’s really quite simple. 


We've already got 
£ode that does this 


We ca* just use a 
variable -for this. 


We've got to eheck -for a -Pew 
values here...or do we? 



How do we check that 

*,t is >=■ * <=1 ^ 

|s that two checks? 


How difficult would this be to write in G? You’ve looked at 
how to make a single test, but the card-counting algorithm 
needs to check multiple conditions: you need to check that 
a number is >= 3 as well as checking that it’s <= 6. 

You need a set of operations that will allow 
you to combine conditions together. 


you are here ► 17 


www.it-ebooks.info 











what condition the condition is in 


There's more to boolean than equals... 

So far, you’ve looked at i f statements that check if a single condition is true, but 
what if you want to check several conditions? Or check if a single condition is 
not true? 


£4 checks if two conditions are true 


The and operator (& &) evaluates to true, only if both conditions given to it are 
true. 


if ((dealer_up_card == 

double down(); 


6) && (hand == 11)) 



Berth o( “these £ondrtioir>s need “to be 
*tvue (or “this piede o( dode “to vur>. 


The and operator is efficient: if the first condition is false, then the computer 
won’t bother evaluating the second condition. It knows that if the first condition 
is false, then the whole condition must be false. 


il checks if one of two conditions is true 

The or operator (| |) evaluates to true, if either condition given to 
it is true. 


if (cupcakes_in_fridge | | chips_on_table) 

eat_f ood (I; W . 

If the first condition is true, the computer won’t bother evaluating 
the second condition. It knows that if the first condition is true, the 
whole condition must be true. 


! flips the value of a condition 

! is the not operator. It reverses the value of a condition. 

if (!brad_on_phone) 

answer_phone(); 



Gee]c Bits 


In C, boolean values 
are represented by 
numbers. To C, the number 0 is 
the value for false. But what's the 
value for true? Anything that is 
not equal to 0 is treated as true. 
So there is nothing wrong in 
writing C code like this: 


int people_moshing = 34; 
if (people_moshing) 

take off glasses(); 


In fact, C programs often use this 
as a shorthand way of checking if 
something is not 0. 


18 Chapter 1 


www.it-ebooks.info 







getting started with c 



You are going to modify the program so that it can be used for card counting. It will need to 
display one message if the value of the card is from 3 to 6. It will need to display a different 
message if the card is a 10, Jack, Queen, or King. 

int main() 

{ 

char card_name[3]; 
puts ("Enter the card_name: "); 
scant("%2s", card_name); 
int val = 0; 

if (card_name[0] == ' K') { 

val = 10; 

} else if (card_name[0] == 1 Q 1 ) { 

val = 10; 

} else if (card_name[0] == ' J') { 

val = 10; 

} else if (card_name[0] == 'A') { 

val = 11; 

} else { 

val = atoi(card_name); 

} 

/* Check if the value is 3 to 6 */ 

if. 

puts("Count has gone up"); 

/* Otherwise check if the card was 10, J, Q, or K */ 
else if 

puts ("Count has gone down"); 
return 0; 

} 



The Polite Guide f<§ Standards - 

The ANSI C standard has no value for true 
and false. C programs treat the value 0 as 
false, and any other value as true. The C99 
standard does allow you to use the words true 
and false in your programs—but the compiler 
treats them as the values 1 and 0 anyway. 


L 


you are here ► 


19 


www.it-ebooks.info 












(O 

I I . 


cards counted 



Excise 

SotytiOH 


There are a -Pew 
ways o-p w\ri-fcih<j 
this Condition. 


You were to modify the program so that it can be used for card counting. It needed to display 
one message if the value of the card is from 3 to 6. It needed to display a different message if 
the card is a 10, Jack, Queen, or King. 

int main() 

{ 

char card_name[3]; 
puts("Enter the card_name: "); 
scant("%2s", card_name); 
int val = 0; 

if (card_name[0] == ' K') { 

val = 10; 

} else if (card_name[0] == ' Q') { 

val = 10; 

} else if (card_name[0] == 'J') { 

val = 10; 

} else if (card_name[0] == 'A') { 

val = 11; 

} else { 

val = atoi(card_name); 

} 


p,d you s^o-t -that Y 0 * 

Wst needed a single 

j di-tion tv -this? 


Con 


/*. Check if the value is 3 to 6 */ 

rr>.* i ^ n ) 1 1 


f ((vaj > Z) ff (val <!)) 

puts("Count has gone up"); 

/* Otherwise check if the card was 10, J, Q, or K */ 


else if (val 7777 lO) 

puts("Count has gone down"); 
return 0; 


there-, £(re no 

Dumb Questions 


Why not just | and &? 

You can use & and | if you want, 
and | operators will always 
evaluate both conditions, but && and 
can often skip the second condition. 

20 Chapter 1 


Q- So 
exist? 


why do the & and | operators 


^Z Because they do more than simply 
evaluate logical conditions. They perform 
bitwise operations on the individual bits of 
a number. 



Huh? What do you mean? 


^Z Well, 6 & 4 is equal to 4, because 
if you checked which binary digits are 
common to 6 (110 in binary) and 4 (100 in 
binary, you get 4 (100). 


www.it-ebooks.info 











getting started with c 



Let’s see what happens when you compile and run the program now: 


,s I ihc dompj Ics (" File Edit Window Help FiveOfSpades 

3 » d ruhs ih e toiC ' ^ 


> gcc cards.c -o cards && 
Enter the card_name: 

Q 

Count has gone down 


./cards 


We vuk it a 

-few times to 

dhedk that the 
di-f-fev-e^t value 
ranges work. 


> ./cards 

Enter the card_name: 
8 

> ./cards 

Enter the card_name: 
3 

Count has gone up 


The code works. By combining multiple conditions with a boolean 
operator, you check for a range of values rather than a single value. 
You now have the basic structure in place for a card counter. 



The computer says +h 
card was low. The cot 
went up! Raise the be 
Raise the bet! 


Stealthy dommunidation devide 




you are here 


► 


21 












interview with gcc 



The Com'pHev loosed 

This week’s interview: 

What Has gcc Ever Done for Us? 


Head First: May I begin by thanking you, gcc, for 
finding time in your very busy schedule to speak to 
us. 

gcc: That’s not a problem, my friend. A pleasure to 
help. 

Head First: gcc, you can speak many languages, is 
that true? 

gcc: I am fluent in over six million forms of 
communication... 

Head First: Really? 

gcc: Just teasing. But I do speak many languages. G, 
obviously, but also C++ and Objective-C. I can get 
by in Pascal, Fortran, PL/I, and so forth. Oh, and I 
have a smattering of Go... 

Head First: And on the hardware side, you can 
produce machine code for many, many platforms? 

gcc: Virtually any processor. Generally, when a 
hardware engineer creates a new type of processor, 
one of the first things she wants to do is get some 
form of me running on it. 

Head First: How have you achieved such incredible 
flexibility? 

gcc: My secret, I suppose, is that there are two sides 
to my personality. I have a frontend, a part of me 
that understands some type of source code. 

Head First: Written in a language such as G? 

gcc: Exactly. My frontend can convert that language 
into an intermediate code. All of my language 
frontends produce the same sort of code. 


Head First: You say there are two sides to your 
personality? 

gcc: I also have a backend: a system for converting 
that intermediate code into machine code that is 
understandable on many platforms. Add to that my 
knowledge of the particular executable file formats 
for just about every operating system you’ve ever 
heard of... 

Head First: And yet, you are often described as a 
mere translator. Do you think that’s fair? Surely that’ 
not all you are. 

gcc: Well, of course I do a little more than simple 
translation. For example, I can often spot errors in 
code. 

Head First: Such as? 

gcc: Well, I can check obvious things such as 
misspelled variable names. But I also look for subtler 
things, such as the redefinition of variables. Or I 
can warn the programmer if he chooses to name 
variables after existing functions and so on. 

Head First: So you check code quality as well, 
then? 

gcc: Oh, yes. And not just quality, but also 
performance. If I discover a section of code inside 
a loop that could work equally well outside a loop, I 
can very quietly move it. 

Head First: You do rather a lot! 

gcc: I like to think I do. But in a quiet way. 

Head First: gcc, thank you. 


22 Chapter 1 


www.it-ebooks.info 


getting started with c 



BE flie Compile!- 

Each of the C files on this page 
represents a complete source file. Your 
job is to play compiler and determine 

whether each of these files 
will compile, and if not, 
why not- For extra bonus 
points, say what you think 
the output of each compiled 
file will be when run, and whether you 
think the code is working as intended. 


A 

finclude <stdio.h> 

int main() 

{ 

int card = 1; 
if (card > 1) 

card = card - 1; 
if (card < 7) 

puts("Small card"); 

else { 

puts("Ace!"); 

} 

return 0; 

} 


B 

finclude <stdio.h> 

int main() 

{ 

int card = 1; 
if (card > 1) { 

card = card - 1; 
if (card < 7) 

puts("Small card"); 

else 

puts("Ace!"); 

} 

return 0; 

} 


C 

finclude <stdio.h> 

int main() 

{ 

int card = 1; 
if (card > 1) { 

card = card - 1; 
if (card < 7) 

puts("Small card"); 

} else 

puts("Ace!"); 
return 0; 

} 


D 

finclude <stdio.h> 

int main() 

{ 

int card = 1; 
if (card > 1) { 

card = card - 1; 
if (card < 7) 

puts("Small card"); 

else 

puts("Ace!"); 
return 0; 

} 


you are here ► 23 


www.it-ebooks.info 


code compiled 



BE C^filef Stiffen 

Each of the C files on this page 
represents a complete source file. Your 
job is to play compiler and determine 

whether each of these files 
will compile, and if not, 
why not- For extra bonus 
points, say what you think 
the output of each compiled 
file will be when run, and whether you 
think the code is working as intended. 


A 

finclude <stdio.h> 

int main() 

{ 

int card = 1; 
if (card > 1) 


The Code dompiles. The 
program displays “Small 
dard” But it doesn't work 
properly because the else is 
attached to the wron<) i-f. 


card = card - 1; 
if (card < 7) 

puts("Small card"); 


else { 

puts("Ace!"); 

} 

return 0; 


} 


B 


finclude <stdio.h> 


int main() 

{ 

int card = 1; 
if (card > 1) { 

card = card - 1; 
if (card < 7) 

puts("Small card"); 

else 

puts("Ace!"); 

} 

return 0; 


The Code dompiles. The 
program displays nothing 
and is not veally working 
properly bedause the else is 
matdhed to the wron<) i-f. 


C 

finclude <stdio.h> 

int main() 

{ 

int card = 1; 
if (card > 1) { 

card = card - 1; 
if (card < 7) 

puts("Small card"); 

} else 

puts("Ace!"); 

return 0; The Code dompiles. The 
* program displays “Ade^ 

and is properly written. 


D 

finclude <stdio.h> 

int main() 

{ 

int card = 1; 
if (card > 1) { 

card = card - 1; 
if (card < 7) 

puts("Small card"); 

else 

puts("Ace!"); 
return 0; 

} 

The Code won't dompile 
bedause the brades are 
not matdhed- 


24 Chapter 1 


www.it-ebooks.info 



Whaf $ the code like wow? 


} 


int main() 

{ 

char card_name[3]; 
puts ("Enter the card_name: "); 

scant ("%2s", card_name); 
int val = 0; 

if (card_name[0] == ' K') { 

val = 10; 

} else if (card_name[0] == 'Q') { 

val = 10; 

} else if (card_name[0] == ' J') { 

val = 10; 

} else if (card_name[0] == 'A') { 

val = 11; 

} else { 

val = atoi (card__name) ; 

} 

/* Check if the value is 3 to 6 */ 
if ((val > 2) && (val < 7)) 

puts ("Count has gone up"); 

/* Otherwise check if the card was 10, 
else if (val == 10) 

puts ("Count has gone down"); 
return 0; 



Hmmm...is there something we can do with 
that sequence of if statements? They're all 
checking the same value, card_name[0], and most 
of them are setting the val variable to 10.1 wonder 
if there's a more efficient way of saying that in C. 


O 0 



C programs often need to check the same value several 
times and then perform very similar pieces of code for 
each case. 

Now, you can just use a sequence of if statements, and that will probably be 
just fine. But G gives you an alternative way of writing this kind of logic. 

C can perform logical tests with the switch statement. 


www.it-ebooks.info 











switch statement 


Pulling the ol' switcheroo 

Sometimes when you’re writing conditional logic, you need to 
check the value of the same variable over and over again. To 
prevent you from having to write lots and lots of i f statements, 
the G language gives you another option: the switch statement. 

The switch statement is kind of like an if statement, except it 
can test for multiple values of a single variable : 


-J37> 

It i he tom -- n, add 50 b> -the HT 
Wings and then skip to the end- 

winnings = winnings + 50; 


switch(train) { 
case 37: 



break; 


It the toin — =■ t 1 ?, add ®0 to the 
winnings AND THEN also add 10 to 
puts (" Jackpot !") ; Winnings; then, skip to the end- 


case 65: 


winnings = winnings + 80; 


case 12: 

winnings 

break; 
default: 


= wi 


innings + 20; ^he tom 1 2 -, just 

add lO to the winnings. 


winnings = 0; 


^ a,, y °' the ’ r va,ue toin, set the 


back to ZERO 


} 


When the computer hits a switch statement, it checks the value 
it was given, and then looks for a matching case. When it finds 
one, it runs all of the code that follows it until it reaches a break 
statement. The computer keeps going until it is told to 
break out of the switch statement. 



Missing breaks can make 
your code buggy. 

t r # T • • f Most C programs have a break 
Wdlvll 11 • a f enc j 0 f eac h case section 

to make the code easier to 
understand, even at the cost of some efficiency. 


www.it-ebooks.info 



wihhmgs 


26 Chapter 1 















































getting started with c 



Let's look at that section of your cards program again: 


int val = 0; 

if (card_name[0] == ’ K’) { 

val = 10; 

} else if (card_name[0] == 1 Q 1 ) { 
val = 10; 

} else if (card_name[0] == ' J') { 

val = 10; 

} else if (card_name[0] == 'A') { 

val = 11; 

} else { 

val = atoi(card_name); 

} 


Do you think you can rewrite this code using a switch statement? Write your answer below: 


you are here ► 


27 


www.it-ebooks.info 




















code switched 


^Sharpen your pencil_ 

Solution You were to rewrite the code using a switch statement. 

„ n mt val - 0\ 

int val =0; . 

if (card_name [0] == 'K') { i.. 

val = 10; . < ' a *f.f: . 

} else if (card_name [ 0 ] == 1 Q 1 ) { . 

val = 10; £3se J : 

} else if (card_name [ 0 ] == * J * ) { val — \0] 

val = 10; break; 

} else if (card_name[0] == 'A') { dase W : 

val = 11; val - II; 

} else { . break; . 

val = atoi (card_name) ; de-fa It. 

val — aWdav-d_»ar*e); 

} . 



BULLET POINTS 


■ switch statements can 
replace a sequence of if 
statements. 

■ switch statements check a 
single value. 

■ The computer will start to run 
the code at the first matching 
case statement. 

■ It will continue to run until it 
reaches a break or gets 
to the end of the switch 
statement. 

■ Check that you’ve included 
breaks in the right places; 
otherwise, your switches Will 
be buggy. 


tiierejare no 

Dumb Questions 


% Why would I use a switch 
statement instead of an if? 


If you are performing multiple 
checks on the same variable, you might 
want to use a switch statement. 


O: 

using 


What are the advantages of 
a switch statement? 


There are several. First: clarity. It 
is clear that an entire block of code is 
processing a single variable. That’s not so 
obvious if you just have a sequence of i f 
statements. Secondly, you can use fall- 
through logic to reuse sections of code for 
different cases. 


% Does the switch statement 
have to check a variable? Can’t it 
check a value? 


Yes, it can. The switch 
statement will simply check that two 
values are equal. 


% Can I check strings in a 
switch statement? 


No, you can’t use a switch 
statement to check a string of characters 
or any kind of array. The switch 
statement will only check a single value. 


28 Chapter 1 


www.it-ebooks.info 

























getting started with c 


Sometimes once is not enough... 

You’ve learned a lot about the G language, but there are still some 
important things to learn. You’ve seen how to write programs for many 
different situations, but there is one fundamental thing that we haven’t 
really looked at yet. What if you want your program to do something 
again and again and again ? 


Using while loops in 0 

Loops are a special type of control statement. A control statement 
decides if a section of code will be run, but a loop statement decides 
how many times a piece of code will be run. 

The most basic kind of loop in G is the while loop. A while loop 
runs code over and over and over as long as some condition remains true. 



Two cards??? 
Oh crap... 


The body >s between 
-the braces. 


checks the Conditio* before running the body. 

while (<some condition>) { 

... /* Do something here */ 

} 


l-C you have only one line in *the 
body, you don’t need tbe braces. 




When it gets to the end of the body, the Computer 
Checks if the loop Condition is still true- |f it is, the 
body Code v-uns again. 


Do you do while? 

There’s another form of the while loop that 
checks the loop condition after the loop body is 
run. That means the loop always executes at 
least once. It’s called the do. . .while loop: 

do { 

/* Buy lottery ticket */ 

} while(have not won); 



while (more_balls) 
keep juggling() 



you are here ► 29 


www.it-ebooks.info 



for loops 


loops often follow the same structure... 


You can use the while loop anytime you need to repeat a piece 
of code, but a lot of the time your loops will have the same kind 
of structure: 


o 

o 

o 


Do something simple before the loop, like set a counter. 
Have a simple test condition on the loop. 

Do something at the end of a loop, like update a counter. 


For example, this is a while loop that counts from 1 to 10: 

This is -the loop startup dode 

This is the loop , i i \ / ' This is the loop dondition. 


int counter = 1; 
while (counter < 11) { 


update £ode that 

vur\s at the end o£ printf("%i green bottles, hanging on a wall\n", counter) ; 

the loop body to ^^counter+t; 4:— R ***+*», / . . M 


Loops like this have code that prepares variables for the loop, 
some sort of condition that is checked each time the loop runs, 
and finally some sort of code at the end of the loop that updates 
a counter or something similar. 

...and the for loop makes this easy 

Because this pattern is so common, the designers of G created the 
for loop to make it a little more concise. Here is that same piece 
of code written with a for loop: 

This is -the text Condition dhedked , , , 

betov-e the loop runs eadh time. “ ih ‘ £ode 

int counter; ^ W *U fun d+ter ed£h loop. 

for (counter = 1; counter < 11; counter++) { 


This mrbializjes “the 
loop variable. 


printf("%i green bottles, hanging on a wall\n", counter); 

^ Bedause there's only one line in the loop body, you dould adtually have skipped these brades. 


for loops are actually used a lot in G—as much, if not more than, 
while loops. Not only do they make the code slightly shorter, 
but they’re also easier for other G programmers to read, because 
all of the code that controls the loop—the stuff that controls the 
value of the counter variable—is now contained in the for 
statement and is taken out of the loop body. 

30 Chapter 1 


Every ior loop needs 
to nave something in 
the hody. 


www.it-ebooks.info 






getting started with c 


You use break to break out... 


You can create loops that check a condition at the beginning or end 
of the loop body. But what if you want to escape from the loop from 
somewhere in the middle? You could always restructure your code, 
but sometimes it’s just simpler skip out of the loop immediately using 
the break statement: 


while(feeling_hungry) { 

eat_cake(); 

if (feeling_queasy) { 

/* Break out of the while loop */ 




The break 
statement is 
used to break 

Watch it! ° ut ° f |o °p s 

and also 
switch statements. 


Make sure that you know what 
you’re breaking out of when 

you break. 


A break statement will break you straight out of the current 
loop, skipping whatever follows it in the loop body breaks can 
be useful because they’re sometimes the simplest and best way to 
end a loop. But you might want to avoid using too many, because 
they can also make the code a little harder to read. 



...and continue to continue 

If you want to skip the rest of the loop body and go back to the 
start of the loop, then the continue statement is your friend: 


while(feeling_hungry) { 

if (not_lunch_yet) { 

/* Go back to the loop condition */ 


} 


continue; "e 0 hWe" takes y ou back 

to the start o( the loop. 


eat cake(); 


breaks don’t break if 
statements. 

On January 15, 1990, AT&T’s 
long-distance telephone system 
crashed, and 60,000 people 
lost their phone service. The 
cause? A developer working 
on the C code used in the 
exchanges tried to use a break 
to break out of an if statement. 
But breaks don’t break out 
of if s. Instead, the program 
skipped an entire section of 
code and introduced a bug that 
interrupted 70 million phone 
calls over nine hours. 


you are here ► 31 


www.it-ebooks.info 






writing functions 




Writing Functions lip C]<sse 


Before you try out your new loop mojo, let’s go on a detour and 
take a quick look at functions. 


Ko-fch'mg between these parentheses. 


So far, you’ve had to create one function in every program you’ve 
written, the main () function: * c 

^ TW.s is tke «a«.e o£ tke WW 
This ~^> int main ~ 

returns an 
iivfc value. t 

The body ^ puts ("Too young to die; too beautiful to live 

the -function is return 0; , 

surrounded by ^hen youre done, you return a value. 

brac.es. 


The body o-C the -function- 
•the pa*~t that does stuff. 


ni di 

4 : 



This WW takes txo av$u»ewts : 
1 and b. Both av-OjUn-ents ave ints. 


Pretty much all functions in G follow the same format. For 
example, this is a program with a custom function that gets called 
by main () : 

^include <stdio.h> 

Returns an int value 

►int larger (int a, int b) 

{ 

if (a > b) 
return a; 
return b; 

} 

int main() r ... , r 

Calling the Function here 

1 -v- 

int greatest = larger(100, 1000); 
printf("%i is the greatest!\n", greatest); 
return 0; 

} 

The larger () function is slightly different from main () because 
it takes arguments or parameters. An argument is just a local 
variable that gets its value from the code that calls the function. The 
larger () function takes two arguments—a and b—and then it 
returns the value of whichever one is larger. 


^ The P©]!fe Guide 


The main () function 
has an int return type, 
so you should include a 
return statement when 
you get to the end. But 
if you leave the return 
statement out, the code 
will still compile—though 
you may get a warning 
from the compiler. A 
C99 compiler will insert 
a return statement for 
you if you forget. Use 
-std=99 to compile to 
the C99 standard. 



32 Chapter 1 


www.it-ebooks.info 












getting started with c 


- \4]J Functions Tip Close 

Most functions in G have a return value, but sometimes you 
might want to create a function that has nothing useful to return. It 
might just do stuff rather than calculate stuff. Normally, functions always 
have to contain a return statement, but not if you give your function 
the return type void: 



therei ctre nQ 

Dumb Questions 


Q- If I create a void function, 
does that mean it can’t contain a 
return statement? 


The void \retuv-n ^^void complain () 

■type means •the 
-function wont ^ 

v-e-tuv-n anything. puts ("I’m really not happy"); 

> ^k-TW's »o need tor a return 

statement betawe it's a void WW 


In G, the keyword void means it doesn’t matter. As soon as you tell 
the G compiler that you don’t care about returning a value from the 
function, you don’t need to have a return statement in your function. 


You can still include a return 
statement, but the compiler will most 
likely generate a warning. Also, there’s 
no point to including a return 
statement in a void function. 



Really? Why not? 


Because if you try to read the 
value of your void function, the 
compiler will refuse to compile your 
code. 



Chaining Assignments 


Almost everything in C has 
a return value, and not just 
function calls. In fact, even 
things like assignments have 
return values. For example, if you look at 
this statement: 


x = 4; 

It assigns the number 4 to a variable. The 
interesting thing is that the expression 
x = 4” itself has the value that was 
assigned: 4. So why does that matter? 
Because it means you can do cool tricks, 
like chaining assignments together: 


So now y is also set to 

The assignment 

« - 4-” ^ 

* - T has y = (x — 4 ) ; 

the value s ___ 

That line of code will set both x and y to 
the value 4. In fact, you can shorten the 
code slightly by removing the parentheses: 


y = x = 4; 

You’ll often see chained assignments in 
code that needs to set several variables to 
the same value. 


you are here ► 33 


www.it-ebooks.info 











messages mixed 



A short C program is listed below. One block of the program is missing. Your 
challenge is to match the candidate block of code (on the left) with the output 

that you'd see if the block were inserted. Not all of the lines of output will be 
used, and some of the lines of output might be used more than once. Draw lines 
connecting the candidate blocks of code with their matching command-line output. 



Candidate Code y>es 


Candidates: Possible output: 

y=x-y; 22 46 


y = y + x; 


11 34 59 


Matdh eath 
tend idate with 
OhC o-f the 
possible outputs. 

x = x + 1; 
y = y + x; 


y = y + 2; 
if (y > 4) 

y = y - i; 


02 14 26 38 


02 14 36 48 


00 11 21 32 42 


if (y < 5) { 

11 

21 

32 

42 

53 

X = X + 

1; 






if (y < 

3) 






x = 

X - 1; 

00 

11 

23 

36 

410 

} 







y = y + 2; 


02 

14 

25 

36 

47 


34 Chapter 1 


heve- 


www.it-ebooks.info 















getting started with c 



Now that you know how to create while loops, modify the program to keep a running count 
of the card game. Display the count after each card and end the program if the player types X. 
Display an error message if the player types a bad card value like 11 or 24. 


finclude <stdio.h> 
finclude <stdlib.h> 
int main() 

{ 

char card_name[3]; 
int count = 0; 
while ( 

puts("Enter the card_name: "); 

scant ("%2s", card_name) ; 

int val = 0; 

switch(card_name[0]) { 

case ' K' : 

case ' Q' : 

case ' J' : 

val = 10; 
break; 
case 'A': 


You »eed U M sV,e >C 

Y 


val = 11; 
break; 


case ' X' : 



W/ha*t Will you do heve? 


) { 


default: 

You need -to display an ev-rov- i-P val = atoi (card name) ; 

•the val is no-t in -the range I -to --^ 

lO. yiu should also skip -the ves-t 
o-f -the loop body and -try again. 


} 

if ((val > 2) && (val < 7)) { 

Add / -to douni- -^ count++; 

} else if (val == 10) { 

£ub*trad*t I -fv-or* dount ' > count—; 

} 

printf ("Current count: %i\n", count); 

} 

return 0; 

} 


you are here ► 35 


www.it-ebooks.info 

















messages unmixed 



A short C program is listed below. One block of the program is missing. Your 
challenge was to match the candidate block of code (on the left) with the output 

that you'd see if the block were inserted. Not all of the lines of output were used. You 
were to draw lines connecting the candidate blocks of code with their matching 
command-line output. 



Candidate Code y>es teve- 


Candidates: Possible output: 



36 Chapter 1 


www.it-ebooks.info 














getting started with c 



EmdSe 
lut\OH 



Now that you know how to create while loops, you were to modify the program to keep a 
running count of the card game. Display the count after each card and end the program if the 
player types X. Display an error message if the player types a bad card value like 11 or 24. 


^include <stdio.h> 
^include <stdlib.h> 
int main() 

{ 

char card_name[3] 
int count = 0; 




You need to check it ike tiwt ^haractev was an >C 


while ( C,drd^Y\drrstC03 

puts("Enter the card_name: "); 

scant ("%2s", card_name); 
int val = 0; 
switch(card_name[0]) { 

'K' 

1 Q 1 


) { 


This is just ohC way o-p 
witing this Condition. 


/ A a«.othev Continue heve - 
You need anot looking- 

because ' war ' t ' w 


case 
case 
case 'J' 

val = 10; 
break; 
case ’A': 

val = 11; 
break; 

a swi 

Continue; ^ ,0 °? t0 " d * 0 " 

default: 

val = atoi(card_name); 

jjufeH dorpt uhdcv-stahd .“that yalucfO; 
dowbmuej 


case 


Weak wouldn't Weak us out ot the loo ? , because ^Ve inside 
Uh statement Wc need a eontmuc to baek and chtU 


} 

if ((val > 2) && (val < 7)) { 

count++; 

} else if (val == 10) { 

count--; 

} 

printf ("Current count: %i\n", count); 


} 

return 0; 


you are here ► 


37 


www.it-ebooks.info 















test drive 



Now that the card-counting program is finished, it’s time to take it for 
a spin. What do you think? Will it work? 


This will Compile 
and \run the 
program. 


We now dhedk 
i-f it looks Sw I 

like a dorredt ^ r * 
dard value- 


File Edit Window Help GoneLoopy 


> gcc card_counter.c -o card_counter && 
Enter the card_name: 

4 

Current count: 1 
Enter the card_name: 

K 

Current count: 0 
Enter the card_name: 

3 

Current count: 1 
Enter the card_name: 

5 

Current count: 2 
Enter the card_name: 

23 

I don't understand that value! 

Enter the card_name: 

6 

Current count: 3 
Enter the card_name: 

5 

Current count: 4 




Remember: you don t need / 
*,£ youVe on Windows. 


./card counter 



Enter the card_name: 
3 

Current count: 5 
Enter the card_name: 
X 


The dount is 
indreasing/ 


when 


By 


betting 
count \ 


big 


the 


h 


gh 


I 


was 


The card counting program works! 

You’ve completed your first G program. By using the power of G 
statements, loops, and conditions, you’ve created a fully functioning card 
counter. 


Great job! 


Disdlaimer: Using a domputer -for dard dounting is illegal in many states, 
and those dasino guys dan get kinda gnarly. So don*t do it> 


38 Chapter 1 


www.it-ebooks.inf 








getting started with c 


theveicffe no 

Dumb Questions 


O: Why do I need to compile C? 
Other languages like JavaScript aren’t 
compiled, are they? 


C is compiled to make the code 
fast. Even though there are languages 
that aren’t compiled, some of those—like 
JavaScript and Python—often use some 
sort of hidden compilation to improve their 
speed. 



Is C++ just another version of C? 


No. C++ was originally designed as 
an extension of C, but now it’s a little more 
than that. C++ and Objective-C were both 
created to use object orientation with C. 


% What’s object orientation? Will we 
learn it in this book? 



than one? 


“collection”? Is there more 


Object orientation is a technique to 
deal with complexity. We won’t specifically 
look at it in this book. 


% C looks a lot like JavaScript, Java, 
C#, etc. 

C has a very compact syntax and it’s 
influenced many other languages. 

% What does gcc stand for? 


The Gnu Compiler Collection. 


The Gnu Compiler Collection can be 
used to compile many languages, though 
C is probably still the language with which 
it’s used most frequently. 


% Can I create a loop that runs 
forever? 


Yes. If the condition on a loop is the 
value 1, then the loop will run forever. 


% Is it a good idea to create a loop 
that runs forever? 


Sometimes. An infinite loop (a loop 
that runs forever) is often used in programs 
like network servers that perform one thing 
repeatedly until they are stopped. But most 
coders design loops so that they will stop 
sometime. 



BULLET POINTS 


■ Awhile loop runs code as long as its 
condition is true. 


The return statement returns a value from 
a function. 


■ A do-while loop is similar, but runs the 
code at least once. 


void functions don’t need return 
statements. 


Most expressions in C have values. 

Assignments have values so you can chain 
them together (x = y = 0). 

■ You can skip to the loop condition at any time 
with continue. 


■ The for loop is a more compact way of writing ■ 
certain kinds of loops. 

■ You can exit a loop at any time with break. 


you are here ► 39 


www.it-ebooks.info 








c toolbox 



Your C Toolbox 


You’ve got Chapter 1 under 
your belt, and now you’ve 
added C basics to your toolbox. 
For a complete list of tooltips in the 
book, see Appendix ii. 







Blodk 

statements 
a\re suvrounded 
by { and } 
(brades). 


#\ndWde >"dWdcs 

e-ittev-^ t0< ^ e 
Jfor tWmOf 
\\kc mywt a*'® 


'•f siaie»e»ts 

vun code i-f 

something is 
iir-ue. 


OVA 1 


You £3* use ff 
dnd || to Combine 
Conditions 
together. 


g££ is the 
most populav- 
C Compiler. 


p 


s °wde -f il es 
**Id have a 
ending 


»n .e. 


w eans add > 


toun 


t- 


Count— 

1- -J 

means 


subtract 1 


-Prom Count- 



etf W*f tbetk 
Jfov vaWeS 

o£ a variaWc- 


EvOry 

\/ova need ^ 

tow'Y 1 ^ 'f 0>l 
yvo^-anv V) 

^ £ an use -the *<r you v*" 
°P^aW OKl £ Kc '' 

*nand line ^ 

*7 T" ,Vo 3' j » 

°»'y ^ 



^Y»e out? u 


We- 


yjK>\e * e Y cats 
Code as \o^ 

as a tondvt'on 
\s ■b‘'* e ’ 


+om loops ave a 

Compact 

way of wt-i-ting 
loops. 


do-u/hile 

loops VUK 

Code at 
least once- 



40 Chapter 1 


www.it-ebooks.info 




























2 memory mid pointers 



..and of course, Mommy 
never lets me stay out 
A after 6 p.m. 


Thank heavens my 
boyfriend variable isn't 
in read-only memory. 


What are you 


# pointing at? 



If you really want to kick butt with C, you need to understand 
how C handles memory. 

The C language gives you a lot more control over how your program uses the computer’s 
memory. In this chapter, you’ll strip back the covers and see exactly what happens when 
you read and write variables. You’ll learn how arrays work, how to avoid some nasty 
memory SNAFUs, and most of all, you’ll see how mastering pointers and memory 
addressing is key to becoming a kick-ass C programmer. 


this is a new chapter 


www.it-ebooks.info 




introducing pointers 


C code includes pointers 


Pointers are one of the most fundamental things to understand in 
the G programming language. So what’s a pointer? A pointer is 
just the address of a piece of data in memory. 

Pointers are used in G for a couple of reasons. 


To test understand 
pointers, go slowly. 



Instead of passing around a whole copy of the 
can just pass a pointer. 






This is a topy ot 

-the m*forw»artiw 


vtou 


need- 



data, you 





You might want two pieces of code to work on the 
piece of data rather than a separate copy. 



Pointers help you do both these things: avoid copies and share data. 
But if pointers are just addresses, why do some people find them 
confusing? Because they’re a form of indirection. If you’re not 
careful, you can quickly get lost chasing pointers through memory. 
The trick to learning how to use G pointers is to go slowly. 


same 



o 


Don’t try to rush 
this chapter. 

Pointers are a simple 
idea, but you need 
to take your time and understand 
everything. Take frequent breaks, drink 
plenty of water, and if you really get 
stuck, take a nice long bath. 



42 Chapter 2 


www.it-ebooks.info 










memory and pointers 


Pigging into memory 

To understand what pointers are, you’ll need to dig into 
the memory of the computer. 

Every time you declare a variable, the computer creates 
space for it somewhere in memory If you declare a 
variable inside a function like main (), the computer 
will store it in a section of memory called the stack. If 
a variable is declared outside any function , it will be stored 
in the globals section of memory. 

Variable 7 '“ill live in the 

alobaU sefction- 

Memory address 1, 000,000 - 

Value I- 



int y = 1; 


int main() 

{ 

int x = 4; 

-- 

return 0; 

} 


Variable x will live in -the stack 
Memory address ^,100,000 
Value 


The computer might allocate, say, memory location 
4,100,000 in the stack for the x variable. If you assign 
the number 4 to the variable, the computer will store 4 
at location 4,100,000. 



If you want to find out the memory address of the 
variable, you can use the & operator: 

is -the address o( %• 

* 

printf("x is stored at %p\n", &x); 

This is what the ' 

Lo&t will print. 

^x is stored at 0x3E8FA0 

■f- fV You'll probably act 
This is ^,1 00,000 m a di-fterent address 

hex (base 1^) tormat- on your machine- 

The address of the variable tells you where to find the 
variable in memory. That’s why an address is also called 
a pointer , because it points to the variable in memory. 



'code- 






1 






J -- 1 


4 



1 

1 1 


’/op is used to torrnat addresses- 

J\ variable declared inside a 
function is usually stored in the 
stack. 

A variable declared outside a 
function is stored in globals. 


you are here ► 


43 


www.it-ebooks.info 










































































pirates of the bermuda rectangle 


Set sail with pointers 

Imagine you’re writing a game in which players have to 
navigate their way around the... 



The game will need to keep control of lots of things, like 
scores and lives and the current location of the players. You 
won’t want to write the game as one large piece of code; 
instead, you’ll create lots of smaller functions that will each 
do something useful in the game: 



What does any of this have to do with pointers? Let’s begin 
coding without worrying about pointers at all. You’ll just 
use variables as you always have. A major part of the game 
is going to be navigating your ship around the Bermuda 
Rectangle, so let’s dive deeper into what the code will need 
to do in one of the navigation functions. 

44 Chapter 2 


www.it-ebooks.info 











memory and pointers 


Set sail sou'east. Cap n 


The game will track the location of players using latitudes and 
longitudes. The latitude is how far north or south the player 
is, and the longitude is her position east or west. If a player 
wants to travel southeast, that means her latitude will go down , 
and her longitude will go up\ 

So you could write a go_south_east () function that takes 
arguments for the latitude and longitude, which it will then 
increase and decrease: 

Pass m “the latitude 

^include <stdio.h> , .11 

and lonytude. 

V 

void go south east(int lat, int Ion) 


{ 


} 


lat 

Ion 


= lat - 1; k. t>etvease the 

, , . latitude. 

= Ion + 1; 

'T 

Increase the longitude- 



int main() 

{ 

int latitude = 32; 
int longitude = -64; 

go_south_east(latitude, longitude); 

printf("Avast! Now at: [%i, %i]\n", latitude, longitude); 
return 0; 

} 


The program starts a ship at location [32, -64], so if it 
heads southeast, the ship’s new position will be [31, —63]. 
At least it will be if the code works... 



VAkN 


Look at the code carefully. Do you think it will work? Why? Why not? 


you are here ► 45 


www.it-ebooks.info 
















test drive 



Tsst Drove 


The code should move the ship southeast from [32, -64] to 
the new location at [31, —63]. But if you compile and run the 
program, this happens: 

WTF? The ship 
is still ih the 
plade- 



W/heves The 

Fi^hii 


File Edit Window Help Savvy? 


> gcc southeast.c -o southeast 

> ./southeast 

Avast! Now at: [32, -64] 

> 




The ship’s location stays exactly the same as before. 



C sends arguments as values 

The code broke because of the way that G calls functions. 



Initially, the main () function has a local variable called longitude 
that had value 32. 




When the computer calls the go_south_east () function, it 
copies the value of the longitude variable to the ion argument. 
This is just an assignment from the longitude variable to the ion 
variable. When you call a function, you don’t send the variable as an 
argument, just its value. 



This is a new variable 
-the longitude value- 




When the go_south_east () function changes the 
value of ion, the function is just changing its local copy. 
That means when the computer returns to the main () 
function, the longitude variable still has its original 
value of 32. 


But if that’s how G calls functions, how can you ever write a 
function that updates a variable? 

It’s easy if you use pointers... 


Only -the lodal dopy 
gets dhanged- 



The oV"i<ynal variable 
keeps rts ov-i<ynal value- 

V 

^longitude o 



46 Chapter 2 


www.it-ebooks.info 



































































memory and pointers 


Try passing a pointer to the variable 


Instead of passing the value of the latitude and longitude 
variables, what happens if you pass their addresses ? If the 
longitude variable lives in the stack memory at location 4,100,000, 
what happens if you pass the location number 4,100,000 as a 
parameter to the go_south_east () function? 


The latitude 
variable is at 
memory location 
100,000. 




Please 

update locKer 

4)100,000 


Instead ot passing 

A _the value <A the 

variable, yass its 
location- 


If the go_south_east () function is told that the latitude 
value lives at location 4,100,000, then it will not only be able to find 
the current latitude value, but it will also be able to change the 
contents of the original latitude variable. All the function needs 
to do is read and update the contents of memory location 4,100,000. 




Because the go_south_east () function is updating the original 
latitude variable, the computer will be able to print out the 
updated location when it returns to the main () function. 

Pointers make it easier to share memory 

This is one of the main reasons for using pointers—to let functions 
share memory. The data created by one function can be modified by 
another function, so long as it knows where to find it in memory. 

Now that you know the theory of using pointers to fix the 
go_south_east () function, it’s time to look at the details of 
how you do it. 



tlierei<ire no 

' Dumb Questions 

% I printed the location of the 
variable on my machine and it wasn’t 
4,100,000. Did I do something wrong? 

You did nothing wrong. The memory 
location your program uses for the variables 
be different from machine to machine. 


% Why are local variables stored in 
the stack and globals stored somewhere 
else? 

Local and global variables are used 
differently. You will only ever get one copy of 
a global variable, but if you write a function 
that calls itself, you might get very many 
instances of the same local variable. 

% What are the other areas of the 
memory used for? 

You’ll see what the other areas are for 
as you go through the rest of the book. 


you are here ► 


47 


www.it-ebooks.info 




































memory pointers 


Using memory pointers 


There are three things you need to know in order to use 
pointers to read and write data. 

o Get the address of a variable. 

You’ve already seen that you can find where a variable is stored in 
memory using the & operator: 

The %p -format will , A 

. 1 ,,. . . int x = 4; 

prmt out the location i» 

he* (base I A) -format printf("x lives at %p\n", &x) 

— -— _ ^ 

But once you’ve got the address of a variable, you may want to store it 
somewhere. To do that, you will need a pointer variable. A pointer 
variable is just a variable that stores a memory address. When you 
declare a pointer variable, you need to say what kind of data is stored 
at the address it will point to: 

This is a pointer variable -for 



an address that stores an int- 


^ int *address of x = &x; 


o 


Read the contents of an address. 

When you have a memory address, you will want to read the data 
that’s stored there. You do that with the * operator: 


Q 


int value_stored = *address_of_x;^-- 

The * and & operators are opposites. The & operator takes a piece 
of data and tells you where it’s stored. The * operator takes an 
address and tells you what’s stored there. Because pointers are 
sometimes called references , the * operator is said to dereference 
a pointer. 

Change the contents of an address. 

If you have a pointer variable and you want to change the data 
at the address where the variable’s pointing, you can just use the * 
operator again. But this time you need to use it on the left side of 
an assignment: 

*address of x = 99; 



/ 

f will -find the 
address o-f 
•the variable^ 
^, 100 , 000 . 


This will read -the Contents at 
the memory address given by 
address__o-r__x. This will be set 
to the value originally stored 
in the * variable- 


OK, now that you know how to read and write 
the contents of a memory location, it’s time 
for you to fix the go_south_east() function. 


This will change the Contents o( 
the original * variable to °f\. 



48 Chapter 2 


www.it-ebooks.info 




































memory and pointers 



Compass Magnets 

Now you need to fix the go_south_east () function so that it uses 
pointers to update the correct data. Think carefully about what type of 
data you want to pass to the function, and what operators you'll need 
to use to update the location of the ship. 


^include <stdio.h> IAAta*t kinds of ar^umen^ will s-fcove 

memory addresses -for inis? 

I \ 

void go_south_east( lat. Ion) 

{ 

- l; 


int main() 

{ 

int latitude =32; o \ > . , 

r\emember* you re t^oin^ xo pass -the 

int longitude = -64; addresses oT variables. 

go_south_east( , ) ; 

printf("Avast! Now at: [%i, %i]\n", latitude, longitude); 

return 0; 

} 



you are here ► 49 


www.it-ebooks.info 























compass magnets 



Compass Magnets Solution 

You needed to fix the go_south_east () function so that it 
uses pointers to update the correct data. You were to think carefully 
about what type of data you want to pass to the function, and what 
operators you'll need to use to update the location of the ship. 


^include <stdio.h> 


void go_south_east 

{ 


The arguments will store pointers 
so they need to be int 



Ion) 


*lat 




1 . —> *lat £3n read the old value 

' a*d set tv>e new value- 

+ 1 ; 


= 32; 

= -64; 


int main() 

{ 

int latitude : 
int longitude 


go_south_east( 
printf("Avast! Now at 
return 0; 


You need to -find the address 
o*f the latitude and longitude 
variables with f. 






[%i, %i]\n", latitude, longitude); 



www.it-ebooks.info 











































memory and pointers 



Now if you compile and run the new version of the function, 
you get this: 


This is 

southeast o-f n 
the ovigmal 
loeatioh. Ns * 


| File Edit Window Help Savvy? 


i 

> gcc southeast 

> ./southeast 
Avast! Now at: 

> 

. c -o southeast 

[31, -63] 



The code works. 



Because the function takes pointer arguments, it’s able to 
update the original latitude and longitude variables. 
That means that you now know how to create functions that 
not only return values, but can also update any memory 
locations that are passed to them. 



BULLET POINTS 


■ Variables are allocated storage in 
memory. 

■ Local variables live in the stack. 

■ Global variables live in the globals 
section. 


■ Pointers are just variables that store 
memory addresses. 


The & operator finds the address of 
a variable. 

The * operator can read the contents 
of a memory address. 

The * operator can also set the 
contents of a memory address. 


you are here ► 


51 


www.it-ebooks.info 

















no dumb questions 


there]are n<? 

Dumb Questions 


% Are pointers actual address 
locations? Or are they some other kind 
of reference? 


They’re actual numeric addresses in 
the process’s memory. 



What does that mean? 


Each process is given a simplified 
version of memory to make it look like a 
single long sequence of bytes. 



And memory’s not like that? 


It’s more complicated in reality. But 
the details are hidden from the process so 
that the operating system can move the 
process around in memory, or unload it and 
reload it somewhere else. 


O: 


bytes? 


Is memory not just a long list of 


^Z The computer will probably structure 
its physical memory in a more complex way 
The machine will typically group memory 
addresses into separate banks of memory 
chips. 



Do I need to understand this? 


^Z For most programs, you don’t need to 
worry about the details of how the machine 
arranges its memory. 


% Why do I have to print out pointers 
using the %p format string? 


^Z You don’t have to use the %p string. 
On most modern machines, you can use 
% 1 i —although the compiler may give you 
a warning if you do. 


% Why does the %p format display 
the memory address in hex format? 


^Z It’s the way engineers typically refer 
to memory addresses. 


% If reading the contents of a 
memory location is called dereferencing, 
does that mean that pointers should be 
called references ? 


Sometimes coders will call pointers 
references, because they refer to a memory 
location. However, C++ programmers 
usually reserve the word reference for a 
slightly different concept in C++. 


Oh yeah, C++. Are we going to 
look at that? 


^Z No, this book looks at C only. 


52 Chapter 2 


www.it-ebooks.info 




memory and pointers 


How do you pass a string to a function? 

You know how to pass simple values as arguments to functions, but what 
if you want to send something more complex to a function, like a string? 
If you remember from the last chapter, strings in G are actually arrays of 
characters. That means if you want to pass a string to a function, you can 
do it like this: 



void fortune cookie (char msg[l) * ... , . ^ 

{ - v,il1 be p assed a ^ 

printf("Message reads: %s\n", msg); 

} 


char quote[] = "Cookies make you fat"; 
fortune cookie(quote); 


The msg argument is defined like an array, but because you won’t know 
how long the string will be, the msg argument doesn’t include a length. 

That seems straightforward, but there’s something a little strange going on... 

Honey, who shrank the string? 

G has an operator called sizeof that can tell you how many bytes of 
space something takes in memory. You can either call it with a data type or 
with a piece of data: 

On most machines, this s i ze of (int) This will veiuvn % which is 9 

will vetwrh the value 4". sizeof ("Turtles! ") ^—• chav-actevs plus the end chav-actev- 


But a strange thing happens if you look at the length of the string 
you’ve passed in the function: 


void fortune_cookie(char msg[]) 

{ 


printf("Message reads: %s\n", msg); 

printf("msg occupies %i bytes\n", sizeof(msg)); 


} 


«??? And on some 
machines, -this 
ndglvt even say 
iVha-t gives? 




File Edit Window Help TakeAByte 


> ./fortune_cookie 

Message reads: Cookies make you fat 
msg occupies 8 bytes 

> 


Instead of displaying the full length of the string, the code returns 
just 4 or 8 bytes. What’s happened? Why does it think the string 
we passed in is shorter? 





Why do you think sizeof (msg) 
is shorter than the length of 
the whole string? What is msg? 
Why would it return different 
sizes on different machines? 


you are here ► 53 


www.it-ebooks.info 







array variables 


Array variables are like pointers... 

When you create an array, the array variable can be used as a 
pointer to the start of the array in memory When G sees a line of 
code in a function like this: 


The guoie variable will 
represeivt ibe address 
o( -the -firs-t dharadier 
in -the siring. 



"Cookies make you 





fat" 




The computer will set aside space on the stack for each of the 
characters in the string, plus the \ 0 end character. But it will also 
associate the address of the first character with the quote 
variable. Every time the quote variable is used in the code, the 
computer will substitute it with the address of the first character in 
the string. In fact, the array variable is just like a pointer. 

printf("The quote string is stored at: %p\n". 



You dan use w guoie” as 
a pointer variable, even 
though its an array- 


quote) ; 


|-f you write a test program 
to display the address, you 
will see something like this. 



File Edit Window Help TakeAByte 


> . /where_is_quote 

The quote string is stored at: 0x7fff69d4bdd7 

> 


...so our function was passed a pointer 

That’s why that weird thing happened in the f ortune_cookie () 
code. Even though it looked like you were passing a string to the 
f ortune_cookie () function, you were actually just passing a 
pointer to it: 



is adUally a poin-tev vaviable- 


void fortune cookie (char msg[]) . . . .. 

— msg points to tne message- 

1 

printf("Message reads: %s\n", msg); 
printf("msg occupies %i bytes\n", sizeof(msg)); 


} 


And that’s why the sizeof operator returned a weird result. It 
was just returning the size of a pointer to a string. On 32-bit 
operating systems, a pointer takes 4 bytes of memory and on 64-bit 
operating systems, a pointer takes 8 bytes. 


K 

siz^o^(msg) is just “the 
siz Z o£ a pointer- 


54 Chapter 2 


www.it-ebooks.info 













memory and pointers 


What the computer thinks when it runs your code 



The computer sees the function. 



void fortune_cookie(char msg[]) 
{ 


Hmmm...looks like they intend to pass 
an array to this function. That means 
the function will receive the value of the 
array variable, which will be an address, 
so msg will be a pointer to a char. 


0 / 


Then it sees the function contents 


printf("Message reads: %s\n", msg); 
printf("msg occupies %i bytes\n", sizeof(msg)); 




I can print the message because I know 
it starts at location msg. sizeof(msg). 
That's a pointer variable, so the answer is 
8 bytes because that's how much memory 
it takes for me to store a pointer. 


The computer calls the function. 


char guote[] = "Cookies make you fat"; 


fortune cookie(quote); 



0 


So quote's an array and I've got to pass 
the quote variable to fortune_cookie(). 
I'll set the msg argument to the address 
where the quote array starts in memory. 


you are here ► 55 


www.it-ebooks.info 













no dumb questions 



BULLET POINTS 


■ An array variable can be used as a 
pointer. 


The sizeof operator returns the 
space taken by a piece of data. 


■ The array variable points to the first 
element in the array. 


You can also call sizeof for a data 
type, such as sizeof (int). 


■ If you declare an array argument 
to a function, it will be treated as a 
pointer. 


■ sizeof (a pointer ) returns 
4 on 32-bit operating systems and 8 
on 64-bit. 


therei £ir© no 

Dumb Questions 



Is sizeof a function? 


No, it’s an operator. 



What’s the difference? 


An operator is compiled to a sequence of instructions by 
the compiler. But if the code calls a function, it has to jump to a 
separate piece of code. 


O: So is sizeof calculated when the program is 
compiled? 


Yes. The compiler can determine the size of the storage at 
compile time. 



Why are pointers different sizes on different machines? 


On 32-bit operating systems, a memory address is stored as 
a 32-bit number. That’s why it’s called a 32-bit system. 32 bits == 4 
bytes. That’s why a 64-bit system uses 8 bytes to store an address. 


% If I create a pointer variable, does the pointer variable 
live in memory? 

Yes. A pointer variable is just a variable storing a number. 

% So can I find the address of a pointer variable? 

Yes—using the & operator. 



Can I convert a pointer to an ordinary number? 


On most systems, yes. C compilers typically make the long 
data type the same size as a memory address. So if p is a pointer 
and you want to store it in a long variable a, you can type 
a = (long) p. We’ll look at this in a later chapter. 



On most systems? So it’s not guaranteed? 


It’s not guaranteed. 


56 Chapter 2 


www.it-ebooks.info 








memory and pointers 





Mprrg5i\Me 


We have a classic trio of bachelors ready to play The Mating 
Game today. 


Tonight’s lucky lady is going to pick one of these fine contestants. 
Who will she choose? 


c-oae below, 
And wH-fce y 0 | 
answer here. 



^include <stdio.h> 

int main() 

{ 

int contestants[] = (1, 2, 3}; 
int ^choice = contestants; 
contestants[0] = 2; 
contestants [ 1] = contestants [2]; 
contestants[2] = ^choice; 

printf("I'm going to pick contestant number %i\n", contestants [2]); 
return 0; 

} 


you are here ► 


57 


www.it-ebooks.info 














date picked 





Mprrg5i\Me 

solution 


We had a classic trio of bachelors ready to play The Mating Game 
today. 

Tonight’s lucky lady picked one of these fine contestants. Who did 
she choose? 



^include <stdio.h> 


u £hoide w is kow -the address o( the 

int main () £oivfcestairfcs ; array. 

int contestants [ ] = {1, 2, 3}; ^ontestairfcsCZJ 

int ^choice = contestants; - ^£hoi£e 

contestants [0] = 2; ~ ^testa^tsCOJ 

contestants[1] = contestants [2]; 
contestants[2] = ^choice; 
printf("I'm going to pick contestant number %i\n", contestants[2]); 
return 0; 



58 Chapter 2 


www.it-ebooks.info 













memory and pointers 


Put array variables aren't quite pointers 

Even though you can use an array variable as a pointer, there 
are still a few differences. To see the differences, think about this 
piece of code. 

char s[] = "How big is it?"; 
char *t = s; 



sizeof (an array) is...the size of an array. 

You’ve seen that sizeof (a pointer) returns the value 4 or 8, 
because that’s the size of pointers on 32- and 64-bit systems. But if you 
call sizeof on an array variable, G is smart enough to understand that 
what you want to know is how big the array is in memory. 





This is the i pomtev. 
sizco-f is \ or #• 



This returns ^ or #. 


This returns 15. 

4 

sizeof(s) 


sizeof(t) 



The address of the array...is the address of the array. 

A pointer variable is just a variable that stores a memory address. But 
what about an array variable? If you use the & operator on an array 
variable, the result equals the array variable itself. 


£cs == s frt != t 

If a coder writes &s, that means “What is the address 
of the s array?” The address of the s array is just... s. 
But if someone writes &t, that means “What is the 
address of the t variable?” 

When you create a pointer variable, the machine will 
allocate 4 or 8 bytes of space to store it. But what if 
you create an array? The computer will allocate space 
to store the array, but it won’t allocate any memory to 
store the array variable. The compiler simply plugs in 
the address of the start of the array. 

But because array variables don’t have allocated 
storage, it means you can’t point them at anything else. 

This will <yve a Confile error s = t; 


© An array variable can't point anywhere else 


Pointer decay 

Because array variables are slightly 
different from pointer variables, you need 
to be careful when you assign arrays 
to pointers. If you assign an array to a 
pointer variable, then the pointer variable 
will only contain the address of the array. 
The pointer doesn't know anything about 
the size of the array, so a little information 
has been lost. That loss of information is 
called decay. 

Every time you pass an array to a 
function, you'll decay to a pointer, so 
it's unavoidable. But you need to keep 
track of where arrays decay in your code 
because it can cause very subtle bugs. 


you are here ► 59 


www.it-ebooks.info 












five-minute mystery 


The Case of the Lethal List 


Five-Minute 

Mystery 



m 


The mansion had all the things he’d dreamed of: landscaped grounds, 
chandeliers, its own bathroom. The 94-year-old owner, Amory 
Mumford III, had been found dead in the garden, apparently of a 
heart attack. Natural causes? The doc thought it was an overdose of 
heart medication. Something stank here, and it wasn’t just the dead 
guy in the gazebo. Walking past the cops in the hall, he approached 
Mumford’s newly widowed 27-year-old wife, Bubbles. 


I 


“I don’t understand. He was always so careful with his medication. 
Here’s the list of doses.” She showed him the code from the drug 
dispenser. 


int doses[ 


{1, 3, 2, 1000}; 


“The police say I reprogrammed the dispenser. But I’m no good with 
technology. They say I wrote this code, but I don’t even think it’ll 
compile. Will it?” 


She slipped her manicured fingers into her purse and handed him a 
copy of the program the police had found lying by the millionaire’s bed. 
It certainly didn’t look like it would compile... 


printf ("Issue dose %i", 3[doses]); 

What did the expression 3 [doses ] mean? 3 wasn’t an array. Bubbles 
blew her nose. “I could never write that. And anyway, a dose of 3 is not 
so bad, is it?” 

A dose of size 3 wouldn’t have killed the old guy. But 
maybe there was more to this code than met the eye ... 


60 Chapter 2 


www.it-ebooks.info 


memory and pointers 


Why arrays really start at 0 

An array variable can be used as a pointer to the first element in an 
array That means you can read the first element of the array either 
by using the brackets notation or using the * operator like this: 


-p, , int drinks [ ] = (4, 2, 3}; 

These lines 

o*P Lodt ar printf("lst order: %i drinks\n", 

equivalent printf("lst order: %i drinks\n", 


drinks[0]); 
*drinks); 



dvinksCO] —— ^drinks 


But because an address is just a number, that means you can do 
pointer arithmetic and actually add values to a pointer value 
and find the next address. So you can either use brackets to read 
the element with index 2, or you can just add 2 to the address of 
the first element: 

printf("3rd order: %i drinks\n", drinks[2]); 

printf("3rd order: %i drinks\n", * (drinks + 2)); 

In general, the two expressions drinks [ i ] and * (drinks + i) 
are equivalent. That’s why arrays begin with index 0. The index is 
just the number that’s added to the pointer to find the location of 
the element. 


This is at 
oeation “drinks. 

V 


)) 


This is at 
"dmks + V 





i . 

This is at 'drinks + I • 





Use the power of pointer arithmetic to mend a broken heart. This 
function will skip the first six characters of the text message. 


void skip(char *msg) 

{ 

puts ( 

} 


char *msg from amy = 



What expression do you 
print -from the seventh 


need here to 
eharatter? 


) 


r 


"Don't 



The -function needs to print this 
message -from the V eharaeter on. 


call me"; 


skip(msg from amy); 


you are here ► 61 


www.it-ebooks.info 










pointers and types 



You were to use the power of pointer arithmetic to mend a 
broken heart. This function skips the first six characters of the 
text message. 


void skip (char *msg) |£ y ou 3 ^ b to the "'sg foihter, 

{ _you will yriht W dharadter 1 • 

puts ( msg. + t ' 

} 


char *msg from_amy = "Don’t call me"; 
skip(msg from amy); 


h 


t 


YY\ 


\0 


T 

msg foists V^cv-c- 


f 


The code will display -this. 

ir 


ms 9 ^ ^ fo'i'i'b -to the leUev- 1. 


File Edit Window Help 


> ./skip 
call me 

> 


Why pointers have types 


If pointers are just addresses, then why do pointer variables have types? 
Why can’t you just store all pointers in some sort of general pointer 
variable? 

The reason is that pointer arithmetic is sneaky. If you add 1 to a 
char pointer, the pointer will point to the very next memory address. 
But that’s just because a char occupies 1 byte of memory. 

What if you have an int pointer? ints usually take 4 bytes of space, 
so if you add 1 to an int pointer, the compiled code will actually add 
4 to the memory address. 



int nums[] = (1, 2, 3}; 
printf("nums is at %p\n", nums); 
printf("nums + 1 is at %p\n", nums + 1); 


If you run this code, the two memory address will be more than one 
byte apart. So pointer types exist so that the compiler knows how 
much to adjust the pointer arithmetic. 


(hums + /) is bytes 
away -Prom hums. 



62 Chapter 2 


File Edit Window Help 


> . /print_nums 
nums is at 0x7fff66ccedac 
nums + 1 is at 0x7fff66ccedb0 



Remember, these 
addresses are yrihted 
ih he* -format- 


www.it-ebooks.info 











































memory and pointers 


The Case of the Lethal List 


Last time we left our hero interviewing Bubbles Mumford, 
whose husband had been given an overdose as a result of 
suspicious code . Was Bubbles the coding culprit or just a 
patsy? To find out, read on ... 

He put the code into his pocket. “It’s been a pleasure, Mrs. Mumford. I don’t 
think I need to bother you anymore.” He shook her by the hand. “Thank you,” 
she said, wiping the tears from her baby blue eyes, “You’ve been so kind.” 


: Not so fast, sister.” Bubbles barely had time to gasp before 
he’d slapped the bracelets on her. “I can tell from your 
hacker manicure that you know more than you say about 
this crime.” No one gets fingertip calluses like hers without 
logging plenty of time on the keyboard. 


< 




FiveJVtlnute 
Mystery 
Solved 


'Bubbles, you know a lot more about G than you let on. Take a 
look at this code again.” 



int doses[] = {1, 3, 2 , 1000}; 

printf("Issue dose %i", 3[doses]); 


“I knew something was wrong when I saw the expression 3 [ doses ] . You 
knew you could use an array variable like doses as a pointer. The fatal 1,000 
dose could be written down like this...” He scribbled down a few coding 
options on his second-best Kleenex: 


doses [3] == *(doses + 3) == *(3 + doses) == 3[doses] 

“Your code was a dead giveaway, sister. It issued a dose of 1,000 to the old guy. 
And now you’re going where you can never corruptly use G syntax again. 


you are here ► 


63 


www.it-ebooks.info 


no dumb questions 



BULLET POINTS 


■ Array variables can be used as 
pointers... 

■ ...but array variables are not quite 
the same. 

■ sizeof is different for array and 
pointer variables. 

■ Array variables can't point to 
anything else. 


Passing an array variable to a pointer 
decays it. 

Arrays start at zero because of 
pointer arithmetic. 

Pointer variables have types so they 
can adjust pointer arithmetic. 


tk©rei£tre no 

Dumb Questions 



Do I really need to understand pointer arithmetic? 


Some coders avoid using pointer arithmetic because it’s 
easy to get it wrong. But it can be used to process arrays of data 
efficiently. 



Go on... 


If the compiler sees that you are working with an int array 
and you are adding 2, the compiler will multiply that by 4 (the length 
of an int) and add 8. 



Can I subtract numbers from pointers? 


Yes. But be careful that you don’t go back before the start of 
the allocated space in the array. 



When does C adjust the pointer arithmetic calculations? 


It happens when the compiler is generating the executable. It 
looks at the type of the variable and then multiplies the pluses and 
minuses by the size of the underlying variable. 


% Does C use the sizeof operator when it is adjusting 
pointer arithmetic? 


Effectively. The sizeof operator is also resolved at 
compile time, and both sizeof and the pointer arithmetic 
operations will use the same sizes for different data types. 



Can I multiply pointers? 



No. 


64 Chapter 2 


www.it-ebooks.info 








memory and pointers 


Using pointers for data entry 


You already know how to get the user to enter a string from the 
keyboard. You can do it with the scanf () function: 


You re going -to store a char name [40] ; 
name in this array. printf ("Enter 

scanf("%39s", 


your name: 

name) ; 


sdan-f will read up to V[ dharadters 
plus the string terminator \0 . 


How does scanf () work? It accepts a char pointer, and in this 
case you’re passing it an array variable. By now, you might have 
an idea why it takes a pointer. It’s because the scanf () function 
is going to update the contents of the array. Functions that need to 
update a variable don’t want the value of the variable itself—they 
want its address. 


Entering numbers with scanfO 

So how do you enter data into a numeric field? You do it by 
passing a pointer to a number variable. 


int age; 


%i means -the user will printf ("Enter your age: "); . . 

eirfcev- dm 'hn-fc value- scanf ("%i" , &age) ; Use "the f opev-aW b> yt addvess ne in 


Because you pass the address of a number variable into the 
function, scanf () can update the contents of the variable. 
And to help you out, you can pass a format string that contains 
the same kind of format codes that you pass to the printf () 
function. You can even use scanf () to enter more than one 
piece of information at a time: 

char first name[20]; 



Ehter Sr\ ihtegev- 


1 ^ZT~ Sh-tev- up -to 2-1 fihavad-tevs (+ \0'). 
|~7 f Uitr a tloatm^-pomt 


This reads a 
-f irst ha me, theh 
a spade, theh the 
sedohd hame. 


char last_name[20]; 

printf("Enter first and last name: "); 

scanf("%19s %19s", first name, last name) 


r 


printf("First: %s Last:%s\n", first name, last name); 


File Edit Window Help Meerkats 


> . /name_test 

Enter first and last name: Sanders Kleinfeld 
First: Sanders Last: Kleinfeld 

> 


nr 

The tirst ahd last hames are 
stored ih separate arrays. 


you are here ► 65 


www.it-ebooks.info 










scanfQ can cause overflows 


Pe careful with scawfO 

There’s a little.. .problem with the scanf () function. So 
far, all of the code you’ve written has very carefully put a limit 
on the number of characters that scanf () will read into a 
function: 

scanf("%39s", name); 


scanf ( ,, %2s M , card name); 



Why is that? After all, scanf () uses the same kind of format 
strings as printf () , but when we print a string with printf (), 
you just use %s. Well, if you just use %s in scanf (), there can 
be a problem if someone gets a little type-happy: 

char food[5]; 

printf("Enter favorite food: "); 

scanf("%s", food); 

printf("Favorite food: %s\n", food); 


File Edit Window Help TakeAByte 


> ./food 

Enter favorite food: liver-tangerine-raccoon-toffee 
Favorite food: liver-tangerine-raccoon-toffee 
Segmentation fault: 11 

> 


The program crashes. The reason is because scanf () writes 
data way beyond the end of the space allocated to the food array. 


scanfO can cause buffer overflows 

If you forget to limit the length of the string that you read with 
scanf (), then any user can enter far more data than the 
program has space to store. The extra data then gets written into 
memory that has not been properly allocated by the computer. 
Now, you might get lucky and the data will simply be stored and 
not cause any problems. 

But it’s very likely that buffer overflows will cause bugs. It might 
be called a segmentation fault or an abort trap , but whatever the 
error message that appears, the result will be a crash. 


This is the 
-food array. 

V 


The -food array ends 
after -five dharadters. 



everything beyond 
'tter y is outside 
ehe array- 


From the u — w 
on, this Code is 
in illegal spade. 


66 Chapter 2 


www.it-ebooks.info 
















memory and pointers 


fgetsO is an alternative to scanfi) 

There’s another function you can use to enter text data: 
fgets () .Just like the scanf () function, it takes a char 
pointer, but unlike the scanf () function, the fgets () 
function must be given a maximum length: 


This is -the 
same Program 
as before. 


char food[5]; 

printf("Enter favorite food: 



r 


fgets(food, sizeof(food), stdin); 


y\ ^ 

First, it takes a J ^e*t, it takes a maximum si« 

pointer to a butter. j the string C/0‘ included). 

That means that you can’t accidentally forget to set a length 
when you call fgets (); it’s right there in the function 
signature as a mandatory argument. Also, notice that the 
fgets () buffer size includes the final \0 character. So 
you don’t need to subtract 1 from the length as you do with 
scanf(). 



std’rn just means “the 
data will be doming 
.from -the keyboard. 



You'll tind ou"t 
more abou't 
stdin later. 



OK, what else do you need to know about 
fgets()? 


Using sizeof with fgetsO 


The fgets() function 
actually comes from an 
older function called 
gets(). 


The code above sets the maximum length using the sizeof 
operator. Be careful with this. Remember: sizeof returns 
the amount of space occupied by a variable. In the code 
above, food is an array variable, so sizeof returns the 
size of the array. If food was just a simple pointer variable, 
the sizeof operator would have just returned the size of a 
pointer. 

If you know that you are passing an array variable to 
fgets () function, then using sizeof is fine. If you’re 
just passing a simple pointer, you should just enter the size 


Even though fgets () is seen 
as a safer-to-use function than 
scanf (), the truth is that the 
older gets () function is far 
more dangerous than either of 
them. The reason? The gets () 
r mm, I function has no limits at all; 

OOOOOOO'"" 


Seriously, 
don't use 
this. 



char dangerous[10] 
gets(dangerous); 


r 


you want: 


l-P -food was a simple 
pointer, youd give an v 
e*plidit length, rather 
than using sizeof. 


printf("Enter 
fgets(food, 5, 


favorite 
stdin); 


food: 



gets () is a function that’s 
been around for a long time. 
But all you really need to know 
is that you really shouldn’t 
use it. 


you are here ► 


67 


www.it-ebooks.info 



scanfQ vs fgetsQ 



Tide fight - 

Roll up! Roll up! It's time for the title fight we've all been waiting for. In the 
red corner: nimble light, flexible but oh-so-slightly dangerous. It's the bad 
boy of data input: scanf (). And in the blue corner, he's simple, he's safe, 
he's the function you'd want to introduce to your mom: it's fgets ()! 


Round 1: Limits 

Do you limit the number of 
characters that a user can 
enter? 


scanf(): 

scanf () can limit the data 
entered, so long as you remember 
to add the size to the format string. 


fgets(): 

fgets () has a mandatory limit. 
Nothing gets past him. 


Result: fgetsQ takes this round on points. 


Round Z: Multiple fields 

Can you be used to enter 
more than one field? 


Yes! scanf () will not only allow 
you to enter more than one field, 
but it also allows you to enter 

structured data including the 
ability to specify what characters 
appear between fields. 


Ouch! fgets () takes this one on 
the chin, fgets () allows you to 
enter just one string into a buffer. 
No other data types. Just strings. 
Just one buffer. 


Result: scanf() clearly wins this round. 


Round 3: Spaces in strings 

If someone enters a string, 
can it contain spaces? 


Oof! scanf () gets hit badly by 
this one. When scanf () reads a 
string with the %s, it stops as soon 
as it hits a space. So if you want 
to enter more than one word, you 
either have to call it more than 
once, or use some fancy regular 
expression trick. 


No problem with spaces at all. 
fgets () can read the whole 
string every time. 


Result: A fightback! Round to fgetsQ. 


A good clean fight between these two feisty functions. Clearly, if you need to enter 
structured data with severol fields, you'll want to use scanf (). If you're entering 
a single unstructured string, then f get s () is probably the way to go. 


68 Chapter 2 


www.it-ebooks.info 






Anyone for three-card monte? 

In the back room of the Head First Lounge, there’s a game 
of three-card monte going on. Someone shuffles three cards 
around, and you have to watch carefully and decide where you 
think the Queen card went. Of course, being the Head First 
Lounge, they’re not using real cards; they’re using code. Here’s the 
program they’re using: 


ffinclude <stdio.h> 

int main() 


{ 


char *cards 

= "JQK"; 

char a card 

= cards[2]; 

cards[2] = 

cards[1]; 

cards[1] = 

cards[0]; 

cards[0] = 

cards[2]; 

cards[2] = 

cards[1]; 

cards[1] = 

a card; 

puts(cards) 

• 

r 

return 0; 


} 



The code is designed to shuffle the letters in the three-letter 
string “JQK-” Remember: in G, a string is just an array of 
characters. The program switches the characters around and 
then displays what the string looks like. 

The players place their bets on where they think the “Q” letter 
will be, and then the code is compiled and run. 



3 

y 


V 

A 

A 



memory and pointers 


l 



f md the 


4 


1 


1 


A 


it* 


\A(W 


w.it-ebooks.info 



you are here ► 


69 













memory problems 


Oop$...there'$ a memory problem... 

It seems there’s a problem with the card shark’s code. When 
the code is compiled and run on the Lounge’s notebook 
computer, this happens: 


File Edit Window HelD PlaceBet 


> gcc monte.c -o monte && ./monte 
bus error 


What’s more, if the guys try the same code on different 
machines and operating systems, they get a whole bunch of 
different errors: 


I File Edit Window Help HolyCrap 


> gcc monte.c -o monte && ./monte 




What’s wrong with the code? 


70 Chapter 2 


www.it-ebooks.info 







memory and pointers 



It’s time to use your intuition. Don’t overanalyze. Just take a guess. 
Read through these possible answers and select only the one you think is 
correct. 

What do you think the problem is? 


The string can't be updated. 


We're swapping characters outside the string. 


The string isn't in memory. 


Something else. 



you are here ► 


71 


www.it-ebooks.info 












gut instinct 



It was time to use your intuition. You were to read through these 
possible answers and select only the one you think is correct. 

What did you think the problem was? 


The string can't be updated. 

v/ 

We're swapping characters outside the string. 


The string isn't in memory. 


Something else. 



String literals can never be updated 

A variable that points to a string literal can’t be used to change 
the contents of the string: 

char * cards = "JQK"; /c - This variable Can't modify ’this sfarm^- 


But if you create an array from a string literal, then you can 
modify it: 


char cards[] = "JQK"; 

It all comes down to how C uses memory... 

y- ■■ 

72 Chapter 2 


www.it-ebooks.info 













memory and pointers 


In memory: char *cards s "4QK"; 


To understand why this line of code causes a memory error, we 
need to dig into the memory of the computer and see exactly 
what the computer will do. 


o 


o 


o 


o 


The computer loads the string literal. 

When the computer loads the program 
into memory, it puts all of the constant 
values—like the string literal ‘ JQK”—into 
the constant memory block. This section of 
memory is read only. 

The program creates the cards 
variable on the stack. 

The stack is the section of memory that the 
computer uses for local variables: variables 
inside functions. The cards variable will live 
here. 

The cards variable is set to the 
address of %% JQK." 

The cards variable will contain the address 

of the string literal 66 JQK.” String literals 
are usually stored in read-only memory to 
prevent anyone from changing them. 

The computer tries to change the 
string. 

When the program tries to change the 
contents of the string pointed to by the cards 
variable, it can’t; the string is read-only. 



So the problem is that string literals like 
“JQK” are held in read only memory. They’re 
constants. 

But if that’s the problem, how do 
you fix it? 


Widest addvess 



r V~Fl—T —l l — r-J — T~1TT~K 

X ^ ^ STACK 



Lowest addvess 


you are here ► 


73 


www.it-ebooks.info 
















































































copy and change 


If you're going to change a string, make a copy 


The truth is that if you want to change the contents of a string, 
you’ll need to work on a copy. If you create a copy of the 
string in an area of memory that’s not read-only, there won’t be 
a problem if you try to change the letters it contains. 

But how do you make a copy? Well, just create the string as a 
new array. 

£d\rds is hot just 

char cards [] = "JQK"; ^—- a pointer, eards 

is now an array. 

It’s probably not too clear why this changes anything. All 
strings are arrays. But in the old code, cards was just a pointer. 
In the new code, it’s an array. If you declare an array called 
cards and then set it to a string literal, the cards array will 
be a completely new copy. The variable isn’t just pointing at the 
string literal. It’s a brand-new array that contains a fresh copy 
of the string literal. 

To see how this works in practice, you’ll need to look at what 
happens in memory. 


Th.s sfarihj is in read-only memory 

■V 


J 

Q 

1 

K 

\0 

— £ 


I 


j 

Q 

K 

\o 




..SO rr\ 


... ake a dopy ot tbe string in a 
sedtion ot memory that dan be amended 



Gee^BifS - 

cardsn or cards*? 


If you see a declaration like this, what does it really 
mean? 

char cards[ 


Well, it depends on where you see it. If it's a normal 
variable declaration, then it means that cards is an 
array, and you have to set it to a value immediately: 

int my function() 

{ 

eards is char cards [] = "JQK" ; 

ah Z\r)r2\J • • • 


But if cards is being declared as a function argument , it 
means that cards is a pointer: 

void stack_deck(char cards[]) 

{ T 

dards is a dbav- pointer. 


void stack_deck(char *cards) 

{ 



array. 


} 


There's ho array siz* qiven, so you have 
•bo se*t i*t *fco some'thih^ immedia'tely- 



} 


These -two -Punei'ions are equivalent 


74 Chapter 2 


www.it-ebooks.info 

































memory and pointers 


In memory: char card$tt s '\IQIC; 


We’ve already seen what happens with the broken code , 
but what about our new code? Let’s take a look. 


o 


The computer loads the string literal. 

As before, when the computer loads the 
program into memory, it stores the constant 
values—like the string “JQK”—into read-only 
memory 


o 


The program creates a new array on 
the stack. 

We’re declaring an array, so the program will 
create one large enough to store the “JQK” 
string—four characters’ worth. 


o 


The program initializes the array. 

But as well as allocating the space, the 
program will also copy the contents of the 
string literal “JQK” into the stack memory. 


So the difference is that the original code 
used a pointer to point to a read-only string 
literal. But if you initialize an array with 
a string literal, you then have a copy of the 
letters, and you can change them as much as 
you like. 


forest addvess 




i r~T^r~r 

* STACK 


o o 

- 

J 

Q 

K 

\0 







HEAP 






GLOBALS 



. V/ y^//7y*yy 

ONSTAXTS:.. 


char cards[]="JQK"; 


com: 




y. 


i i 

[2] = cards[1]; 





Lowest addvess 


you are here ► 


75 


www.it-ebooks.info 




















































































test drive 



See what happens if you construct a new array in the code. 


#include <stdio.h> 

int main() 

{ 

char cards[] = "JQK" 
char a_card = cards[ 
cards[2] = cards[1]; 
cards[1] = cards[0]; 
cards[0] = cards[2]; 
cards[2] = cards[1]; 
cards[1] = a_card; 
puts(cards); 
return 0; 

} 


i 


I File Edit Window Help Where’sTheLadv? 


> gcc monte.c -o monte && ./monte 
QKJ 


2 ] ; 



Yes! The Queen 
was the first 



The code works! Your cards variable now points to a string in an 
unprotected section of memory, so we are free to modify its contents. 




y 


A 



One way to avoid this problem in the future is to never write code that sets a simple char pointer to a string 
literal value like: 


char *s = "Some string"; 

There's nothing wrong with setting a pointer to a string literal—the problems only happen when you try to 
modify a string literal. Instead, if you want to set a pointer to a literal, always make sure you use the const 
keyword: 

const char *s = "some string"; 

That way, if the compiler sees some code that tries to modify the string, it will give you a compile error: 

s[0] = 'S'; 

monte.c:7: error: assignment of read-only location 


76 Chapter 2 


www.it-ebooks.info 















memory and pointers 


The Case of the Magic Bullet 

He was scanning his back catalog of Guns V Ammo into Delicious Library when there was 
a knock at the door and she walked in: 5' 6", blonde, with a good laptop bag and cheap 
shoes. He could tell she was a code jockey “You’ve gotta help me.. .you gotta clear his 
name! Jimmy was innocent, I tells you. Innocent!” He passed her a tissue to wipe the tears 
from her baby blues and led her to a seat. 

It was the old story. She’d met a guy, who knew a guy. Jimmy Blomstein worked tables at 
the local Starbuzz and spent his weekends cycling and working on his taxidermy collection. 
He hoped one day to save up enough for an elephant. But he’d fallen in with the wrong 
crowd. The Masked Raider had met Jimmy in the morning for coffee and they’d both 
been alive: 


pve-jyBnute 

Mystery 





char masked_raider[] = "Alive"; 
char *jimmy = masked_raider; 

printf("Masked raider is %s, Jimmy is %s\n", masked_raider, 
jimmy); 

■ | File Edit Window Help 


Masked raider is Alive, Jimmy is Alive 


Then, that afternoon, the Masked Raider had gone off to pull a heist, like a hundred 
heists he’d pulled before. But this time, he hadn’t reckoned on the crowd of G-Men 
enjoying their weekly three-card monte session in the back room of the Head First 
Lounge. You get the picture. A rattle of gunfire, a scream, and moments later the villain 
was lying on the sidewalk, creating a public health hazard: 


masked_raider[0] 
masked_raider[1] 
masked_raider[2] 
masked_raider[3] 

masked raider[4] 


’D' ; 
’E' ; 
’ A ’ ; 
'D' ; 

» i » • 
• r 


Problem is, when Toots here goes to check in with her boyfriend at the coffee shop, she’s 
told he’s served his last orange mocha frappuccino: 

printf("Masked raider is %s, Jimmy is %s\n", masked_raider, jimmy); 

| File Edit Window Help | 


Masked raider is DEAD!, Jimmy is DEAD! 


So what gives? How come a single magic bullet killed Jimmy and the 
Masked Raider? What do you think happened? 


you are here ► 77 


www.it-ebooks.info 







case solved 


The Case of the Magic Bullet 

How come a single magic bullet killedJimmy and the Masked Raider? 

Jimmy, the mild-mannered barista, was mysteriously gunned down at the same time as arch-fiend the 
Masked Raider: 


finclude <stdio.h> 
int main() 

{ 

char masked_raider[] = "Alive"; 
char *jimmy = masked_raider; 
printf("Masked raider is %s, Jimmy is 
masked_raider[0] = ' D'; 
masked_raider[1] = 'E'; 
masked_raider[2] = 'A'; 
masked_raider[3] = ' D'; 
masked_raider[4] = 

printf("Masked raider is %s, Jimmy is 


s\n", masked raider, jimmy); 


s\n", masked raider, jimmy); 


return 0; 


} 


^ ketm 3 : M ^ rcdui 

+cxr the Bram Booster dv'mk; ihe deal -fell through. 


( 


It took the detective a while to get to th^bottom of the mystery While he was waiting 
he took a long refreshing sip from a Head First Brain Booster Fruit Beverage. He sat 
back in his seat and looked across the desk at her blue, blue eyes. She was like a rabbit caught 
in the headlights of an oncoming truck, and he knew that he was at the wheel. 




Five^ilrmfe 

Mystery 

Solved 



dm afraid I got some bad news for you. Jimmy and the Masked Raider.. .were one and the same man! 




c No!” 

She took a sharp intake of breath and raised her hand to her mouth. “Sorry, sister. I have to say it how I 
see it. Just look at the memory usage.” He drew a diagram: 


masked raider 


jimmy 



“ j immy and masked_raider are just aliases for the same memory address. They’re pointing to the 
same place. When the masked_r aider stopped the bullet, so did Jimmy. Add to that this invoice 
from the San Francisco elephant sanctuary and this order for 15 tons of packing material, and it’s an 
open and shut case.” 


78 Chapter 2 


www.it-ebooks.info 










memory and pointers 


BULLET 


POINTS 


■ If you see a * in a variable declaration, 
it means the variable will be a pointer. 


If you want to modify a string, you need 
to make a copy in a new array. 


String literals are stored in read-only 
memory. 


You can declare a char pointer as 
const char * to prevent the code 
from using it to modify a string. 


O: Why didn’t the compiler just tell 
me I couldn’t change the string? 


^Z Because we declared the cards 
as a simple char *, the compiler didn’t 
know that the variable would always be 
pointing at a string literal. 


9- Why are string literals stored in 
read-only memory? 


^Z Because they are designed to be 
constant. If you write a function to print 
“Hello World,” you don’t want some other 
part of the program modifying the “Hello 
World” string literal. 


Do all operating systems enforce 
the read-only rule? 

^Z The vast majority do. Some 
versions of gcc on Cygwin actually 
allow you to modify a string literal without 
complaining. But it is always wrong to do 
that. 


there] are no 

Dumb Questions 


% What does const actually 
mean? Does it make the string read¬ 
only? 

String literals are read-only anyway. 
The const modifier means that the 
compiler will complain if you try to modify 
an array with that particular variable. 

% Do the different memory 
segments always appear in the same 
order in memory? 

They will always appear in the same 
order for a given operating system. But 
different operating systems can vary the 
order slightly. For example, Windows 
doesn’t place the code in the lowest 
memory addresses. 


% I still don’t understand why an 
array variable isn’t stored in memory. If 
it exists, surely it lives somewhere? 


When the program is compiled, all 
the references to array variables are 
replaced with the addresses of the array. 
So the truth is that the array variable 
won’t exist in the final executable. That’s 
OK because the array variable will never 
be needed to point anywhere else. 


% If I set a new array to a string 
literal, will the program really copy the 
contents each time? 


It’s down to the compiler. The final 
machine code will either copy the bytes 
of the string literal to the array, or else 
the program will simply set the values of 
each character every time it reaches the 
declaration. 


% You keep saying “declaration.” 
What does that mean? 


^Z A declaration is a piece of code that 
declares that something (a variable, a 
function) exists. A definition is a piece of 
code that says what something is. If you 
declare a variable and set it to a value 
(e.g., int x = 4 ;), then the code is 
both a declaration and a definition. 


% Why is scanf () called 
scanf () ? 


scanf () means “scan formatted 
because it’s used to scan formatted input. 


you are here ► 


79 


www.it-ebooks.info 








memory reminder 



Memory memorizer 

Stack 

This is the section of memory used for local 
variable storage. Every time you call a 
function, all of the function’s local variables 
get created on the stack. It’s called the stack 
because it’s like a stack of plates: variables get 
added to the stack when you enter a function, 
and get taken off the stack when you leave. 
Weird thing is, the stack actually works upside 
down. It starts at the top of memory and 
grows downward. 

Heap 

This is a section of memory we haven’t 
really used yet. The heap is for dynamic 
memory: pieces of data that get created 
when the program is running and then hang 
around a long time. You’ll see later in the 
book how you’ll use the heap. 

Globals 

A global variable is a variable that lives 
outside all of the functions and is visible to 
all of them. Globals get created when the 
program first runs, and you can update them 
freely. But that’s unlike... 

Constants 

Constants are also created when the program 
first runs, but they are stored in read-only 
memory. Constants are things like string 
literals that you will need when the program 
is running, but you’ll never want them to 
change. 

Code 

Finally, the code segment. A lot of operating 
systems place the code right down in the 
lowest memory addresses. The code segment 
is also read-only. This is the part of the 
memory where the actual assembled code 
gets loaded. 




SL 

o 

1 

“O 

ro 

c*r 



LINK A6, #VARSIZE' 


J. 


MOVEM.L D0-D7/A1-A5,-(SP) 

—MOVE.L SP, SAVESTK(A6)- 

-MOVE.L SP, SAVEAS(A6) t 
MOVE.L GRAFGL0BALS(A5),A0 



Lowest address 


80 Chapter 2 


www.it-ebooks.info 


















































































memory and pointers 



Your C Toolbox 


You’ve got Chapter 2 under 
your belt, and now you’ve 
added pointers and memory to 
your toolbox. For a complete list of 
tooltips in the book, see Appendix ii. 


Will allovi a 

vascv *b o erter 
3 number * 

diretbl'f 


f\ dV^av* pointer 
variable * ,s 
declared as 
dVia^r 


a * 1 * 

b a 

vt 

vt- 


'»ls s\r C 

di tte<re»l si^ s 
° h d 'Were»t 
^^hihes. 


S-tv-ihJ literals 
arc stored 
ir read-only 
memory. 


s * reW* s 

tbe address 
O^ 


is tailed 

d pointer 
to *• 


Lotal 

variables are 

stored or 

the stadc- 



Read tbe 

tontents o-f 

an address a 
witb 



'fge*ts(bu'f, sizje, 
stdin) is a 
simpler way to 
enter text- 


you are here ► 


81 


www.it-ebooks.info 








www.it-ebooks.info 


2.5 strings 




I thought it 
called you short 
and said your butt 
was bigger. t 


strcmpO says 
we re identical 


There’s more to strings than reading them. 

You’ve seen how strings in C are actually char arrays but what does C allow you to do 
with them? That’s where string.h comes in. string.h is part of the C Standard Library 
that’s dedicated to string manipulation. If you want to concatenate strings together, 
copy one string to another, or compare two strings, the functions in string.h are there to 
help. In this chapter, you’ll see how to create an array of strings, and then take a close 
look at how to search within strings using the strstr () function. 


this is a new chapter 


www.it-ebooks.info 





string searches 


Frank 

desperately seeking Stew 

There are so many tracks on the retro jukebox that people can’t find 
the music they are looking for. To help the customers, the guys in the 
Head First Lounge want you to write another program. 

This is the track list: 


Tvatks £ro» Ihe *e* alb'*"' “Little Sinatra ” 



TracK UsT 

' fry bear-t in Harvard med School 
MeioarK, MeioarK - a toonderful -touon 


Dancing ici-th a DorK 
From here -to ma-terni-ty 
The yirl from luoo Jima 

t 

The guys say that there will be lots «,ore 
tvadks m the Future, but they II *ever be 
">ore than 1°! characters long. 



The list is likely to get longer, so there’s just the first few tracks for 
now. You’ll need to write a G program that will ask the user which 
track she is looking for, and then get it to search through all of the 
tracks and display any that match. 


Gah! Wayne Newton... 
again! We need a search 
program to help people find 
tracks on the jukebox. 


O 






There’ll be lots of strings in this program. How do you think you can 
record that information in C? 


84 Chapter 2.5 


www.it-ebooks.info 










strings 


Create aw array of arrays 

There are several track names that you need to record. You can record 
several things at once in an array But remember: each string is itself an 
array. That means you need to create an array of arrays, like this: 


°[ b ™ k as | S The setond set ot Waekets is 

all strips. / used £ ov . eat h individual string 

I I || -J 

The domfilev dan tell char tracks [] [80] = { 
that you have -five 

' s so you don't need "1 left my heart in Harvard Med School", 
a number between these "Newark, Newark - a wonderful town", 
bradkets- "Dancing with a Dork", 


You know “that tradk 
names will never get longer 
•than l°l dharadters, so set 
the value to GO. 


£adh string is an 
array, SO this is an 
array o£ arrays- j. 


"From here to maternity", 
"The girl from Iwo Jima", 


The array of arrays looks something like this in memory: 


^ Chavadtevs within a string 


Eadh song title will be allodated 
GO dharadters. 


tv-aeksfU 



That means that you’ll be able to find an individual track name 

llke thlS ' .... -This is the Nth string. ^—RernCinbev-: av-rays begin at 

... 

tracks[4] 


This has this value- ^ c 


"The girl from Iwo Jima" 


But you can also read the individual characters of each of the 
strings if you want to: 


tracks[4][6] 


! ! 


This is the seventh thavaetev in the Nth 
string. 


So now that you know how to record the data in G, what do you 
need to do with it? 


you are here ► 85 


www.it-ebooks.info 



































































































































































































































































































library code 


Find strings containing the search text 


The guys have helpfully given you a spec. 



Well, you know how to record the tracks. You also know how to 
read the value of an individual track name, so it shouldn’t be too 
difficult to loop through each of them. You even know how to ask 
the user for a piece of text to search for. But how do you look to 
see if the track name contains a given piece of text? 


Using striwg.h 

The C Standard Library is a bunch of useful code that you 
get for free when you install a G compiler. The library code 
does useful stuff like opening files, or doing math, or managing 
memory. Now, chances are, you won’t want to use the whole of the 
Standard Library at once, so the library is broken up into several 
sections, and each one has a header file. The header file lists all 
of the functions that live in a particular section of the library. 

So far, you have only really used the stdio.h header file, stdio.h lets 
you use the standard input/output functions like printf and 
scant. 


, er sfor * e>d 

the 

h \00Kvn3 $<*• 

Voroucy o& ^ 

x cK ^ 


But the Standard Library also contains code to process strings. 
String processing is required by a lot of the programs, and the 
string code in the Standard Library is tested, stable, and fast. 



Compare two strings 
to each other 


iVtake a copy of a 


Search for a string 

Slice a string into 
little pieces 

*? ?l ? iy °L wth * r exfiiti "9 things i** 
w y° u u p ,a y ^ this is just L 


You include the string code into your program using the string, h 
header file. You add it at the top of your program, just like you 
include stdio.h. 


ffinclude 

#include 


lo . h> 





use both stdio.h and 
, u m mouv \ukeboK. fvowai*. 


86 Chapter 2.5 


www.it-ebooks.info 




strings 


4 - 



+ 


+ 


See if you can match up each string.h function with the description of 
what it does. 


strcjir() 


strcmpO 


strstrO 


strcpy() 


strlenO 


strcqtO 


Concatenate two strings. 


Find the location of a string inside 
another string. 


Find the location of a character inside 
a string. 


Find the length of a string. 


Compare two strings. 


Copy one string to another. 



en your pencil 


Which of the functions above should you use for the jukebox 
program? Write your answer below. 


you are here ► 87 


www.it-ebooks.info 












what’s my purpose 






+ 


4 


You were to match up each string.h function with the description of 
what it does. 


strcjir() 


strcmpO 


strstrO 


strcpyO 


strlen() 


strcqtO 



Concatenate two strings. 


Find the location of a string inside 
another string. 


Find the location of a character inside 
a string. 


Find the length of a string. 


Compare two strings. 


Copy one string to another. 



Solution 


You were to write which of the above functions you should use 
for the jukebox program. 


s-brs-brO 


88 Chapter 2.5 


www.it-ebooks.info 












strings 


Using the strstrO function 

So how exactly does the strstr () function work? Let’s look at an 
example. Let’s say you’re looking for the string “fun” inside a larger 
string, “dysfunctional.” You’d call it like this: 


strstr("dysfunctional", 

/h 


"fun") 


s*bv*s*brO will -fi^d 

kev-e a-t lotaW 



f 


u 


n 


d 


y 


s 



u 


n 


t 


o 


n 


a 


1 



The strstr () function will search for the second string in the first 
string. If it finds the string, it will return the address of the located 
string in memory. In the example here, the function would find that 
the fun substring begins at memory location 4,000,003. 

But what if the strstr () can’t find the substring? What then? In 
that case, strstr () returns the value 0. Gan you think why that 
is? Well, if you remember, G treats zero as false. That means you 
can use strstrO to check for the existence of one string inside 
another, like this: 


char s0[] = "dysfunctional"; 
char si[] = "fun"; 
if (strstr(sO, si)) 

puts("I found the fun in dysfunctional!"); 


Let’s see how we can use strstr() in the jukebox program. 


you are here ► 


89 


www.it-ebooks.info 


































out of the pool 



P00] puzzjc 


The guys in the Lounge had already started to write 
the code to search through the track list, but— 
oh no!—some of the paper they were writing 
the code on has fallen into the pool. Do you 
think you can select the correct pieces of 
code to complete the search function? It's 
been a while since the pool was cleaned, so 
be warned: some of the code in the pool might 
not be needed for this program. 

Note: the guys have slipped in a couple of new 
pieces of code they found in a book somewhere. 


"void" just means this tuniti 
won't return a value- 


ion 



Hey, look: you're dreating a separate tundtion. 
Presumably, when you get around to writing 
tbe mainO -Cundtion, it will dal I this. 


void find track(char search for[]) 


{ 


This is the "tor loo?- 
VVe'll look at this in more 
detail in a while, but tor 
now you just need to know 
that it will run this ?iete 
ot tode tive -times. 



} 


This is where you’re thetking to see it the 
searth term is tontained m the tratk name- 

. / l*f tbe tradk name matdhes our 

r ^ seardb, you II display it here- 

printf("Track %i: 1 %s , \n", , ); 

/ou're going to One value will The other will 

be printing out " eed be be 3 ^ 
two values here- " r '^' e ^ e ' r ’ 


Note: each thing from 



90 Chapter 2.5 


www.it-ebooks.info 














strings 



BE fp Couplet 

The jukebox program needs a main() 
function that reads input from the user 
and calls the find_track() function on the 

opposite page. Your job is to 
play like you’re the compiler 
and say which of the 
following main() functions 
is the one you need for the 
jukebox program. 



int main() 

{ 

char search for[80]; 
printf("Search for: "); 
fgets(search_for, 80, stdin); 
find_track(); 
return 0; 

} 


int main() 

{ 

char search for[80]; 
printf("Search for: "); 
fgets(search_for, 80, stdin); 
find_track(search for); 
return 0; 

} 


int main() 

{ 

char search for[80]; 
printf ( "Search for: "); 
fgets(search_for, 79, stdin); 
find_track(search for); 
return 0; 

} 


int main() 

{ 

char search for[80]; 
printf ( "Search for: "); 
scanf(search_for, 80, stdin); 
find_track(search for); 
return 0; 

} 

you are here ► 91 


www.it-ebooks.info 


out of the pool 



P<m] puzzjc 

The guys in the Lounge had already started to 

write the code to search through the track list, 
but—oh no!—some of the paper they were 
writing the code on has fallen into the pool. 
You were to select the correct pieces of code 
to complete the search function. 


Note: the guys have slipped in a couple of new 
pieces of code they found in a book somewhere. 


void find_track(char search for[]) 

{ 

int i; 

for (i = 0; i < 5; i++) { 

( strstr ( tracksfi] / search_for ) ) 

printf ("Track %i: ' %s'\n", j , tracksfi] 

} 

} 



92 Chapter 2.5 


www.it-ebooks.info 











strings 



BE tb& C^ta^jJejr §©]uf|©n 

The jukebox program needs a main() 
function that reads input from the user 
and calls the find_track() function on 

the opposite page. Your job 
was to play like you’re the 
compiler and say which 
of the following main() 
functions is the one you 
need for the jukebox program. 


int main() 

{ 

char search for[80]; 

printf("Search for: "); 

fgets(search_for, 80, stdin); 

f ind_track () ; W>atk () lS 

return 0; ta || e( J y/'rthou-l ?assm$ 

} -the seavth tev">- 


This vcv-sioh isn't using the 
-full length o( -the array. 
The £oder has subtracted 
one -Prom -the length, like 
you would with sea^-fO. 


int main() 

{ 

char search for[80]; 
printf ( "Search for: "); 
fgets(search_for, 79, stdin); 
find_track(search for); 
return 0; 



} 



int main() 


This version is using 
sean-CO and would allow 
the user to enter 81 
characters into the array- 



find_track(search for); 
return 0; 


} 


you are here ► 93 


www.it-ebooks.info 





code review 


It's time for a code review 


Let’s bring the code together and review what you’ve got so far: 


You still need to stdio-h (or the —X „ . . , ,. , . 

' ,a/s , r/\ r i- >'#include <stdio.h> 

pvirrtfO and sdarvrG -rundtions. 


You'll set the tracks array. 
outside of the maihO and 
+ind__traekO functions; that 
way, the iradks will be usable 
everywhere in the proyam. 


This is your new find_jtvadkO 
function. You'll need to dedlare it 
heve before you daII it fvom r*ainO. 

This dode will display all 
the matdhing -fcradks. 


/\nd this is youv mainO -fundtion, 
whidh is the starting point of 
the proyam. 


^include <string.h> 



Y^ou will also need the stv-in^h 
header, so you dan seavdh 
with the stvstvO fundtion- 

char tracks[][80] = { 

"I left my heart in Harvard Med School", 
"Newark, Newark - a wonderful town", 

"Dancing with a Dork", 

"From here to maternity", 

"The girl from Iwo Jima", 

} ; 

void find_track(char search for[]) 

{ _, i++ means w indvease 

int i; £ the value ot i by I " 

for (i = 0; i < 5; i++) { 

if (strstr(tracks[i], search_for)) 

printf("Track %i: '%s'\n", i, tracks[i]); 


} 


} 


You’ve asking tov 
seavth te%t heve 


int main() 

{ 

char search for[80]; 
printf ("Search for: "); 
fgets(search_for, 80, stdin); 

find_track (search for) ; y°u dall your new 

return 0/ md jbradkO fundtion and 

j display the matdhin^ "tradks. 


It’s important that you assemble the code in this order. The headers are 
included at the top so that the compiler will have all the correct functions 
before it compiles your code. Then you define the tracks before you write 
the functions. This is called putting the tracks array in global scope. 

A global variable is one that lives outside any particular function. Global 
variables like tracks are available to all of the functions in the program. 

Finally, you have the functions: f ind_track () first, followed by 
main () . The f ind_track () function needs to come first, before you 
call it from main () . 


94 Chapter 2.5 


www.it-ebooks.info 








strings 



It’s time to fire up the terminal and see if the code works. 


File Edit Window Help string.h 


> gcc text_search.c -o text_search &&./text_searc 
Search for: town 

Track 1: 'Newark, Newark - a wonderful town' 

> 



www.it-ebooks.info 


And the great news is, the program works! 

Even though this program is a little longer than any code you’ve 
written so far, it’s actually doing a lot more. It creates an array of 
strings and then uses the string library to search through all of 
them to find the music track that the user was looking for. 


rtev, TV>a ^ to ? e s a ,, 

vodkm suttess. Jke tats m vnt 

bav avc Qjroovvr! oy\ down xo 3 

yjV>ole kea\> of Smabra ^oodwcssj 



For more information about the 
functions available in string.h, see 
h ttp://tinyurl. com/ 82 acwue. 

If you are using a Mac or a 
Linux machine, you can find out 
more about each of the string.h 
functions like strstr () by 
typing: 


man strstr 


you are here ► 


95 










no dumb questions 


there i are no 

Dumb Questions 


O: Why is the list of tracks defined 
as tracks [ ] [80]? Why not 
tracks[5][80]? 


^Z You could have defined it that way, 
but the compiler can tell there are five items 
in the list, so you can skip the [5] and 
just put [ ]. 


% But in that case, why couldn’t we 
just say tracks [ ] [ ] ? 


The track names are all different 
lengths, so you need to tell the compiler to 
allocate enough space for even the largest. 


% Does that mean each string in the 
tracks array is 80 characters, then? 


The program will allocate 80 
characters for each string, even though 
each of them is much smaller. 


Q.: So the tracks array takes 80 x 
5 characters = 400 characters’ worth of 
space in memory? 


A: 


Yes. 


Q.: What happens if I forget to include 
a header file like string.hi 


For some header files, the compiler 
will give you a warning and then include 
them anyway. For other header files, the 
compiler will simply give a compiler error. 


% 

array 


Why did we put the tracks 
definition outside of the functions? 


We put it into global scope. Global 
variables can be used by all functions in the 
program. 


O: Now that we’ve created two 
functions, how does the computer know 
which one to run first? 


^Z The program will always run the 
main () function first. 


O: Why do I have to put the 
find_track () function before 
main()? 


Z C needs to know what parameters a 
function takes and what its return type is 
before it can be called. 


O: What would happen if I put the 
functions in a different order? 


Z In that case, you’d just get a few 
warnings. 



BULLET POINTS 


■ You can create an array of arrays with 

char strings[. . . ] [...]. 


■ The first set of brackets is used to access 
the outer array. 

■ The second set of brackets is used to 
access the details of each of the inner 
arrays. 


The string.h header file gives you access 
to a set of string manipulation functions in 
the C Standard Library. 

You can create several functions in a C 
program, but the computer will always run 
main () first. 


96 Chapter 2.5 


www.it-ebooks.info 








strings 



Code Magnets 


The guys are working on a new piece of code for a game. They've created a function 
that will display a string backward on the screen. Unfortunately, some of the fridge 
magnets have moved out of place. Do you think you can help them to reassemble 
the code? 


is just dh integer used 
+OV- storing the sizes of things. 


void print_reverse(char *s) 

{ -'This works out the length o-f 3 

size t len = strlen (s) ; string, so strlen( w ABC ) 


char *t = + - 1; 


while ( . >= .) { 

printf("%c ", *t) ; 


} 

puts ("")/ 



you are here ► 


97 


www.it-ebooks.info 























code magnets 



Code Magnets Solution 

The guys are working on a new piece of code for a game. They've created a function 
that will display a string backward on the screen. Unfortunately, some of the fridge 
magnets have moved out of place. You were to help them to reassemble the code. 


void print_reverse(char *s) 

{ 

size t len = strlen(s); 



while ( 


0 


>= 



) { 


printf ( "%c ", *t); 


t = 


0 



0 ,. 


} 


Calculating addresses like this 

tailed "pointer arithmetic.’ 


puts(""); 


Array of arrays vs. array of pointers 

You’ve seen how to use an array of arrays to store a 
sequence of strings, but another option is to use an array 
of pointers. An array of pointers is actually what it 
sounds like: a list of memory addresses stored in an array. 

It’s very useful if you want to quickly create a list of string 
literals: 


char *names for dog[] 

t 

This is an array that 

stores pointers. 


{"Bowser", "Bonza", "Snodgrass"}; 

There will be one pointer poihi'mg 
at ea£h string literal. 


You can access the array of pointers just like you accessed 
the array of arrays. 

98 Chapter 2.5 


www.it-ebooks.info 



















strings 



C-Cross 

Now that the guys have 
the print_reverse () 
function working, they’ve 
used it to create a 
crossword. The answers 
are displayed by the 
output lines in the code. 


Across 

int main() 



char *juices[] = { 

"dragonfruit", "waterberry", "sharonfruit", "uglifruit". 





99 


www.it-ebooks.info 








































crossword solved 



C-Cross 

Solution 

Now that the guys have 
the print_reverse () 
function working, they’ve 
used it to create a 
crossword. The answers 
are displayed by the 
output lines in the code. 


Across 



int main() 

{ 

char *juices[] = { 

"dragonfruit", "waterberry", "sharonfruit", "uglifruit". 



www.it-ebooks.info 






































strings 



Your C Toolbox 


You’ve got Chapter 2.5 under 
your belt, and now you’ve 
added strings to your toolbox. 
For a complete list of tooltips in the 
book, see Appendix ii. 


TV»csbrw^ 

header eorv-ta^ 

useW sbrmft 

Jfurv^o^ s * 


s-t\rs£\r(a ; b) 
will \retuv-h the 
address of 
s*brihj b ih 


£o\>ies OY\t 

string 

another. 



Yova ereate an 
arrayof arrays 
usm^ ^har 
string ^ 


S'tarhpO 

^onr»pay- es 

strings. 

sfcrthrO -finds 
-the lodation 
of a character 
inside a string- 


strtatO 

torvtatenates 

■buo sbrwfl?- 


strlenO 

finds the 
length of a 

siring. f 


you are here ► 


101 


www.it-ebooks.info 



www.it-ebooks.info 


3 creating small tools 

* Do one thing + 

• and do it well 



Every operating system includes small tools. 

Small tools written in C perform specialized small tasks, such as reading and writing 
files, or filtering data. If you want to perform more complex tasks, you can even link 
several tools together. But how are these small tools built? In this chapter, you’ll look 
at the building blocks of creating small tools. You’ll learn how to control command-line 
options, how to manage streams of information, and redirection, getting tooled up in 
no time. 


this is a new chapter 


103 


www.it-ebooks.info 


tiny tools 


Small tools can solve big problems 

A small tool is a G program that does one task and does it well. 

It might display the contents of a file on the screen or list the 
processes running on the computer. Or it might display the first 
10 lines of a file or send it to the printer. Most operating systems 
come with a whole set of small tools that you can run from the 
command prompt or the terminal. Sometimes, when you have a 
big problem to solve, you can break it down into a series of small 
problems, and then write small tools for each of them. 


A small tool 
Joes one task 
anJ Joes it well. 


': ke :Al de 


Someone's written me a 
map web application, and I'd 
love to publish my route data 
with it. Trouble is, the format 
of the data coming from my 
GPS is wrong. 


This is -the data from the dydlist's 
<$PS. It's a domma-separated -format- 

This is a latitude- I This is a longitude- 

ir _ y / _ 

42.363400,-71.098465,Speed = 21 
42.363327,-71.097588,Speed = 23 
42.363255,-71.096710,Speed = 17 



This is the data -format the 
map needs. ft's i* JavaScript 
Object Notation, or J SDK 



The data's 
the same, but 
the format's 
a little 
different- 




data=[ 

{latitude 
{latitude 
{latitude 


42.363400, longitude: -71.098465, info: 
42.363327, longitude: -71.097588, info: 
42.363255, longitude: -71.096710, info: 


Speed = 21 f }, 
Speed = 23*}, 
Speed = 17*}, 


If one small part of your program needs to 
convert data from one format to another, 
that’s the perfect kind of task for a small tool. 

104 Chapter 3 


www.it-ebooks.info 









creating small tools 




Hey, who hasn’t taken a code printout on a long ride only to find that it soon becomes... 
unreadable? Sure, we all have. But with a little thought, you should be able to piece together the 
original version of some code. 

This program can read comma-separated data from the command line and then display it in 
JSON format. See if you can figure out what the missing code is. 


#include <stdio.h> 


int main () 

{ 

float latitude; 


float longitude; 
char info[80]; 

int started = .; What will these values 

VVcVe us'm$ seayvfO to e*tev- be? Remember sean-PO 

puts < "data-["); / «“ ^ ^ 

while (scanf ( "%f , %f , %79 [ A \n] " , , . , .) 


This is just a way o-P saying u djive me evev*y 
dharadter up to the e„d o-P the Ime " 

_ $e eave-Pul how you set stavted- 


if (started) 
printf {" r \n" ) ; 
else 

started = 


The stan-PO 
Pundtio* returns 
the numbev oP 
values it was able 
to vead. 

== 3) { 


printf( M {latitude: %f, longitude: %f, info: 

} 

puts( M \n] M ); 


f o. 
o 


s' } M , 



) ; 


What values need to be displayed? 


return 0; 


} 


you are here ► 105 


www.it-ebooks.info 














pocket code 




Hey, who hasn’t taken a code printout on a long ride only to find that it soon becomes... 
unreadable? Sure, we all have. But with a little thought, you should have been able to piece 
together the original version of some code. 

This program can read comma-separated data from the command line and then display it in 
JSON format. You were to figure out what the missing code is. 


#include <stdio.h> 


int main() 


float latitude; 
float longitude; 


1A k 


need *bo be<yn wVtb stav"ted 


char info [ 80 ] ; fcS ^ me ans -false 

int started = ..Q . 


. ' ^ ( 

Pid you vemembev- -the w f^s on -the numbev- 

vaviables? sean-PO needs poin'tev-s. 

puts ( M data= [ ") ; 

while (scanf ("%f , %f, %79 [ A \n] ", ... f , .fjon^i^tude , . }do .) == 3) { 


You II display a eomma only i-P you ; ve 
already displayed a previous line- 


if (started) 
printf(" , \n"); 

else _ _ -the loop has started, you can 

started = ..I .; se*t “star-ted* *to l> wbidb is *bruc- 

' % s ’ }", ja*titude , longi-tude , in-Po ) ; 


printf("{latitude: %f, longitude: %f, info: 


} 


puts("\n]" ) ; 
return 0; 


Vow dom'-fc need f hev-e because 
frint+O is using the values, not 
the addresses or the numbers. 


106 Chapter 3 


www.it-ebooks.info 














creating small tools 



Tqst Drwq 



So what happens when you compile and run this code? What will it do? 

This is the data that's printed out- This is the data you type in 

I File Edit Window Help JSON 


>./geo2json 
data=[ 



42.363400, 

-71.098465,Speed = 21 

dkT 


{latitude: 

42.363400, longitude: 

-71.098465, 

info: 

r 

{latitude: 

42.363327, longitude: 

-71.097588, 

info: 

r 

{latitude: 

42.363255, longitude: 

-71.096710, 

info: 



The input and the output are mixed up. 

—v- 



’ Speed 
’ Speed 
’ Speed 


21’>42.363327,-71.097588,Speed 
23'>42.363255,-71.096710,Speed 
17’>42.363182,-71.095833,Speed 



{latitude: 42.363182, longitude: -71.095833, info: ’Speed = 22’}42.362385,-71.086182,Speed = 21 

r 

{latitude: 42.362385, longitude: -71.086182, info: ’Speed = 21’} A D 

i 


Several more hours* worth o-P typing... 


The program lets you enter GPS data at the keyboard and then it 
displays the JSON-formatted data on the screen. Problem is, the 
input and the output are all mixed up together. Also, there’s a lot of 
data. If you are writing a small tool, you don’t want to type in 
the data; you want to get large amounts of data by reading a file. 

Also, how is the JSON data going to be used? Surely it can’t be 
much use on the screen ? 

So is the program running OK? Is it doing the right thing? Do 

you need to change the code? 


We really don't want the output 
on the screen. We need it in a file 
so we can use it with the mapping 
application. Here, let me show you... 


v 


|n *thc end, you need io 
press CMrl-D jus*t “to s*top 
•the program. 



you are here ► 


107 


www.it-ebooks.info 
















how it works 


Here's how the program should work 


O Take the GPS from the bike and download the data 

It creates a file called gpsdata.csv with one line of data for every 
location. 


This is -the $PS Uhi t 
usec * to traek the ;V 
location of the bike. 



^_-The data is downloaded 

into this tile- 


gpsdata.csv 


The geo2json tool needs to 
read the contents of the 
gpsdata.csv line by line... 


This is our geoZjson tool. 


e 


..and then write that data in 
JSON format into a file called 
output, json. 


Writing this tile 


Your tool will write 
data to this tile. ^ 


108 Chapter 3 



tr~ Reading this tile 


The web page that contains the map 
application reads the output.json file 

It displays all of the locations on the map. 


The mapping application 
v-eads the data £v-om 
output json and displays it 
on a map inside a web pay. 


outputjson 


www.it-ebooks.info 


























creating small tools 


Pot you're not using files... 

The problem is, instead of reading and writing files, your program is 
currently reading data from the keyboard and writing it to the display. 

The data is be<*>3 v-ead 
hon> the keyboard- 


Our tool Converts the data 
into the new -Poirmat. 


The data is the* sent to the 
display, not to a tile- 



data=[ -71.O975B0, speed - 23 

.,,S3.BO,-n.O “ _, 109M6! , **,, -Sp-3-22',.2.333323, 

UaUtad.: «2.363.0». 1°™>* ” 3t 3253,-n.096710.*~ a ’ " 

-71.0975BB, ial"-- ' * 

* 2 - 36332 ’' l “ ,l “ ' 363192-“33-393333 ,Spee d - *2 

. d .- -,1 096710. 

,l, t i«„.: *2 333233- l—"' 

- — 22'1*2.362383,"I* ■ 9BB2B2- s P ee 3 = 

d .. .71 0,3.33- laf- '^ ' 

(latituP. ■ *2-3331.2, 

. -,10.61.2, I*** '*~ a ’ Zl ' , ' D 

(latitada: *2-3.23.3- 1°™“““’ 


But that isn’t good enough. The user won’t want to type in all 
of the data if it’s already stored in a file somewhere. And if the 
data inJSON format is just displayed on the screen, there’s no 
way the map within the web page will be able to read it. 

You need to make the program work with files. But how do 
you do that? If you want to use files instead of the keyboard 
and the display, what code will you have to change? Will you 
have to change any code at all? 






Is there a way of making our program 
use files without changing code? 
Without even recompiling it? 




Tools that read data line by line, process 
it, and write it out again are called 
filters. If you have a Unix machine, or 
you've installed Cygwin on Windows, you 
already have a few filter tools installed. 

head: This tool displays the first few lines 
of a file. 

taikThis filter displays the lines at the 
end of a file. 

sed: The stream editor lets you do things 
like search and replace text. 

You'll see later how to combine filters 
together to form filter chains. 


you are here ► 


109 


www.it-ebooks.info 




















redirect data 


You can use redirection 

You’re using scanf () and printf () to read from the 
keyboard and write to the display. But the truth is, they don’t 
talk directly to the keyboard and display Instead, they use the 

Standard Input and Standard Output. The Standard Input 
and Standard Output are created by the operating system when the 
program runs. 


The vv-oya™ vedeives da-ta 
through -the £-tair>davd l*?^- 



The program ouipu-ts data 
through the Standard Output- 


The operating system controls how data gets into and out of 
the Standard Input and Output. If you run a program from the 
command prompt or terminal, the operating system will send all 
of the keystrokes from the keyboard into the Standard Input. If 
the operating system reads any data from the Standard Output, 
by default it will send that data to the display. 


The scanf () and printf () functions don’t know, or care, 
where the data comes from or goes to. They just read and write 
Standard Input and the Standard Output. 


Now this might sound like it’s kind of complicated. After all, why 
not just have your program talk directly to the keyboard and 
screen? Wouldn’t that be simpler? 


Well, there’s a very good reason why operating systems 
communicate with programs using the Standard Input and the 
Standard Output: 


You can redirect the Standard Input and 
Standard Output so that they read and write 
data somewhere else, such as to and from files. 


110 Chapter 3 


www.it-ebooks.info 


creating small tools 


You caw redirect the Standard Input with <... 

Instead of entering data at the keyboard, you can use the < 
operator to read the data from a file. 


42 . 363400 , 

42 . 363327 , 

42 . 363255 , 

42 . 363182 , 

42 . 363110 , 

42 . 363037 , 

42 . 362965 , 

42 . 362892 , 

42 . 362820 , 

42 . 362747 , 

42 . 362675 , 

42 . 362602 , 

42 . 362530 , 

42 . 362457 , 

42 . 362385 , 


71 . 098465 , 

71 . 097588 , 

71 . 096710 , 

71 . 095833 , 

71 . 094955 , 

71 . 094078 , 

71 . 093201 , 

71 . 092323 , 

71 . 091446 , 

71 . 090569 , 

71 . 089691 , 

71 . 088814 , 

71 . 087936 , 

71 . 087059 , 

71 . 086182 , 


Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 


21 

23 

17 
22 
14 
16 

18 
22 
17 
23 
14 
19 
16 
16 
21 


This is *thc -file Corrta’mmg “the 
data -Prom “the ^PS device- 


This is telling the operating 
system to send the data -Prom 
the -Pile into the Standard 
Input o*P the program. 


File Edit Window Help Don’tCrossTheStreams 



Now you just sec the^ ^ 
JSON data doming 
-Prom the program. 


> ./geo2j 

data=[ 

{latitude 

{latitude 

{latitude 

{latitude 

{latitude 

{latitude 


son < gpsdata.csv 


You do*’-1 Kave b> 

^PS data, so YOU do* t see «t 
mined up xitt tte output- 

-I -, 


42.363400 

42.363327 

42.363255 

42.363182 

42.363110 

42.363037 


longitude 

longitude 

longitude 

longitude 

longitude 

longitude 


71.098465, 

71.097588, 

71.096710, 

71.095833, 

71.094955, 

71.094078, 


info 

info 

info 

info 

info 

info 


1 Speed 
' Speed 
' Speed 
' Speed 
' Speed 
' Speed 


21 '}, 

23'}, 

17'}, 

22 '}, 

14'}, 

16'}, 


{latitude: 42.362385, longitude 

] 

> 


-71.086182, info: ’Speed =21’} 




The < operator tells the operating system that the 
Standard Input of the program should be connected 
to the gpsdata.csv file instead of the keyboard. So you 
can send the program data from a file. Now you just 
need to redirect its output. 



gpsdata.csv 



you are here ► 111 


www.it-ebooks.info 











redirect output 


...and redirect the Standard Output with > 

To redirect the Standard Output to a file, you need to use the > operator: 



Now you are rcdircetm^ both 
the Standard Input and the 
Standard Output- 

-a— 


I File Edit Window Heb Don .DrossTheStreams 


> ./geo2json < gpsdata.csv > output.json 

> 



There’s no output 
on -the display at all; 
it’s all $one to the 

output-json tile- 




data=[ 



The output ot the program will 
be written to output- iso*. 

l 


now 


{latitude 

42.363400, 

longitude 

-71.098465, 

info 

{latitude 

42.363327, 

longitude 

-71.097588, 

info 

{latitude 

42.363255, 

longitude 

-71.096710, 

info 

{latitude 

42.363182, 

longitude 

-71.095833, 

info 

{latitude 

42.363110, 

longitude 

-71.094955, 

info 

{latitude 

42.363037, 

longitude 

-71.094078, 

info 

{latitude 

42.362965, 

longitude 

-71.093201, 

info 

{latitude 

42.362892, 

longitude 

-71.092323, 

info 

{latitude 

42.362820, 

longitude 

-71.091446, 

info 

{latitude 

42.362747, 

longitude 

-71.090569, 

info 

{latitude 

42.362675, 

longitude 

-71.089691, 

info 

{latitude 

42.362602, 

longitude 

-71.088814, 

info 

{latitude 

42.362530, 

longitude 

-71.087936, 

info 

{latitude 

42.362457, 

longitude 

-71.087059, 

info 

{latitude 

42.362385, 

longitude 

-71.086182, 

info 


Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 

Speed 


= 21' }, 
= 23 '}, 
= 17* }, 
= 22 '}, 
= 14' }, 
= 16 '}, 
= 18 '}, 
= 22 ' }, 
= 17' }, 
= 23'}, 
= 14 ' }, 
= 19'}, 
= 16 '}, 
= 16 '}, 
= 21' } 



Because you’ve redirected the Standard Output, you 
don’t see any data appearing on the screen at all. But the 
program has now created a file called output.json. 

The output.json file is the one you needed to create for the 
mapping application. Let’s see if it works. 


outputjson 



output.json 



112 Chapter 3 


www.it-ebooks.info 














creating small tools 



Now it’s time to see if the new data file you’ve created can be used 
to plot the location data on a map. You’ll take a copy of the web 
page containing the mapping program and put it into the same 
folder as the output.json file. Then you need to open the web page 
in a browser: 



Satellite 


[42362747, -71.0905691 

Speed = 23 


search the map 




y SL ’AnthonyXosta 


Kftr.jail'f. r 


McDermott*. 


Geo-locater 





Download the web page from 
h ttp://oreillyh fc.appspo t. com/map. h tm I. 



gpsapp 


a 4r~This is -tine 

web pay that 

£orrtams the ™af- 


map.html 



4 c—'This the -file 
that ou\r firoyam 

Seated- 


output.json 


The map works. 

The map inside the web page is able to read the data from the 
output file. 



you are here ► 113 






















































bad data 


Put there's a problem with some of the data... 

Your program seems to be able to read GPS data and format it 
correctly for the mapping application. But after a few days, a 
problem creeps in. 



I dropped the 
GPS unit on a ride a 
couple of times, and now 
the map won't display. 


Iceland 


France 


Sudan 


Africa 


So what happened here? The problem is that there was some bad 
data in the GPS data file: 


{latitude: 42.363255, longitude: -71.096710, info: ’Speed 
{latitude: 423.63182, longitude: -71.095833, info: ’Speed 


The decimal point is in the Wronj plate in this number. 


non 


? » r 
i , ■ * i 


£T Y. f y v 1- j 

Canada 


United 1; 
i States 

ar— 


,1^ 

Mexico 

, >_ ■ - 


North 

Atlantic 

Ocean 


Venezuela 
Cokxn’bla'l vO dj/ I 

■ --y •. 

. . Brasil 

Daiii US ' 


N Bolivia . 

K« - 7 A- r 

Chile U-" 

If- (S 

m y 

J Argentina 

J'f 1 

e 


Geo-locater 


United 

Kingdom 


JavaScript 

Invalid latitude: •423.631805’ 


Espaha 


Alyen., 


Mauritania I 


MaliBNiael 


I Nigeria* 


, atEmiopi 


y Kenya 
DR Congo , ' 

Tanzania 


igola-Ma 


Angola 


South 

Atlantic 

Ocean 


Namibia ^ t 
% Botswana 

■ Mi 


Southern 


Loading “file:///Users/davidg/Desktop/website/static/map.htmr. completed 5 of 6 items 


India V W-'u 

uiunninu < 

Thailand 


But the geo 2 j son program doesn’t do any checking of the data it 
reads; it just reformats the numbers and sends them to the output. 

That should be easy to fix. You need to validate 
the data. 

114 Chapter 3 


www.it-ebooks.info 





















creating small tools 



You need to add some code to the geo2 j son program that will check for bad latitude and 
longitude values. You don’t need anything fancy. If a latitude or longitude falls outside the 
expected numeric, just display an error message and exit the program with an error status of 2: 


#include <stdio.h> 

int main() 

{ 

float latitude; 
float longitude; 
char info[80]; 
int started = 0; 

Slatitude, &longitude, info) == 3) { 

|<P the latitude is < -°[0 ov > °[ 0 , the* ervov 
y/ith status 2- |-f the longitude is < -\GO ov 
1^ > I GO, the* evvov v/ith status 2-. 


puts( M data= [ "); 

while (scanf ( "%f, %f, %79 [ A \n]", 
if (started) 
printf(" , \n"); 
else 

started = 1; 


printf (" {latitude: %f, longitude: %f, info: , %s'}"/’ latitude, longitude, info); 

} 

puts( M \n]"); 
return 0; 


you are here ► 115 


www.it-ebooks.info 
















lat long 



116 Chapter 3 


www.it-ebooks.info 





















creating small tools 



OK, so you now have the code in place to check that the latitude and 
longitude are in range. But will it be enough to make our program cope 
with bad data? Let’s see. 


Compile the code and then run the bad data through the program: 



Satellite 


» r 

jjuwyst -* s 

S Korea , - 


Mexico 


Indonesia 


Australi 


iOUth 


This lihC will recompile 
the program. 

Then run the 
program agdin 

with the bad data 

WTF??? n c 

message? 

This means 
u lA/eldome To 
Finland-* 


> gcc geo2json.c -o geo2json 

> ./geo2json < gpsdata.csv > output.json 


in 






Ceo-locater 


You'll save the output 
the owtpwt jsoin tile- 


/tad vjhev-e did all 
the points 50? 


Hmmm. . .that’s odd. You added the 
error-checking code, but when you 
run the program, nothing appears to be 
different. But now no points appear on 
the map at all. What gives? 


r:-r-T”v t >r 

. 

Canada 


•• :\ Vr 

- - 1 . United ; ; 

States 


Iceland 


North 

Atlantic 

Ocean 


> ■ Venezuela 
Coktaiblal^^^/j. 

. _ Brasil , 

i eru 

Bolivia v - y C 
'K ■ - 

Chile l J.. ~ 

1 w 

( . 

r Argentina 


Norge 

Norway 

United 

Kingdom Polska r 

_/ \Pata/>d ^ 

, Deutschland Ii»r 

mf&asS nSxSt y ' >"’ - 

France JNr ' 

** . . 

. - *1 Tu'kL—'- 


POCCMH 

. Russia 


1^ Show labels I 




JF *<K Iran Afghanistan 
' Pakistan 


Kazakhstan Mongolia 


China 


: *JDR Congo Jg?? 
1 \ j_ ■ ^Tanzania 


PW *♦- — 
SaudlL 
Arabia F 

Pr 


India 

%■ uiiinfltvtu • 

Thailand 

h: y 


South 

Atlantic 

Ocean 


v r 

TTO-ii 

Namibia"'' .. 

« j *V i Madagascar 
1 Botswana 

Yvr <5 e 

C/M Its. 


Indian 

Ocean 


doogle search the map 


Southern 

Ocean 


11 TarraMetrics, NASA, Map data ©2011 G 





VAIN 


Study the code. What do you think happened? Is the code doing what you asked 
it to? Why weren’t there any error messages? Why did the mapping program think 
that the entire output.json file was corrupt? 


you are here ► 117 


www.it-ebooks.info 





























code deconstruction 


V 



The mapping program is complaining about the output.json file, so let’s open it up and see what’s 
inside: . This is the out ? ut.jsor, tile. 


data=[ 







{latitude: 42.363400, 

longitude: 

-71.098465, 

info: 

’Speed = 

21 ' 

} ' 

{latitude: 42.363327, 

longitude: 

-71.097588, 

info: 

’ Speed = 

23 ' 

} ' 

{latitude: 42.363255, 

longitude: 

-71.096710, 

info: 

’Speed = 

17 ' 

} ' 

Invalid latitude: 423 

.631805 







Oh, the ewov message was also \redive£-ted bo ihe output -Pile- 



Once you open the file, you can see exactly what happened. The program saw that there 
was a problem with some of the data, and it exited right away It didn’t process any more 
data and it did output an error message. Problem is, because you were redirecting the 
Standard Output into the output.json , that meant you were also redirecting the error 
message. So the program ended silently, and you never saw what the problem was. 

Now, you could have checked the exit status of the program, but you really want to be able 
to see the error messages. 


But how can you still display error messages if you are redirecting 
the output? 



If your program finds a problem in the data, it exits with a status of 2. But how can you check 
that error status after the program has finished? Well, it depends on what operating system 
you're using. If you're running on a Mac, Linux, some other kind of Unix machine, or if you're 
using Cygwin on a Windows machine, you can display the error status like this: 

| File Edit Window Help | 


$ echo $? 
2 


If you're using the Command Prompt in Windows, then it's a little different: 


| File Edit Window Help 

1 

C:\> echo %ERRORLEVEL% 

2 



Both commands do the same thing: they display the number returned by the program when it 
finished. 


118 Chapter 3 


www.it-ebooks.info 












creating small tools 



W "// > , v 3 
w. // A/ykfyf' A' 

mmm 


Wouldn't it be dreamy if there 
were a special output for errors so 
that I didn't have to mix my errors 
in with Standard Output? But I know 
it's just a fantasy... 




you are here ► 


119 


www.it-ebooks.info 






standard error 


Introducing the Standard Error 

The Standard Output is the default way of outputting data 
from a program. But what if something exceptional happens, like 
an error? You’ll probably want to deal with things like error 
messages a little differently from the usual output. 

That’s why the Standard Error was invented. The Standard 
Error is a second output that was created for sending error messages. 

Human beings generally have two ears and one mouth, but 
processes are wired a little differently. Every process has one ear 
(the Standard Input) and two mouths (the Standard Output 
and the Standard Error). 


Human 



Process 


This is ihe 
£*bolhdd\rd Ihptrfc. 
One car ohly. 


This is the Standard Output 



There is no setond ear. 


This is the Standard Evvor. 


Let’s see how the operating system sets 
these up. 

120 Chapter 3 


www.it-ebooks.info 



creating small tools 


Py default, the Standard Error is sent 
to the display 


Remember how when a new process is created, the operating 
system points the Standard Input at the keyboard and the Standard 
Output at the screen? Well, the operating system creates the 
Standard Error at the same time and, like the Standard Output, the 
Standard Error is sent to the display by default. 


S-tandavd /*p u £ c ornes 

fro** the keyboard. 


Error 

goes -to the display. 



r*' 

r 


% 






i# 




Standard Owtywt 


goes to the display- 


That means that if someone redirects the Standard Input and 
Standard Output so they use files, the Standard Error will continue 
to send data to the display 


- tahdaird —^ 
/*put £or*es 
-(Vor* a -Pile. 




And that’s really cool, because it means that even if the Standard 
Output is redirected somewhere else, by default, any messages 
sent down the Standard Error will still be visible on the 
screen. 

So you can fix the problem of our hidden error messages by simply 
displaying them on the Standard Error. 

But how do you do that? 


you are here ► 121 


www.it-ebooks.info 






























fprintfQ 


fprintfO prints to a data stream 

You’ve already seen that the print f () function sends 
data to the Standard Output. What you didn’t know is that 
the print f () function is just a version of a more general 
function called fprintf () : 


Vtfhe* 7 ou 



This will send data to 

the data stream. 


printf("I like Turtles! 


fprintf(stdout, "I like 

T X „ 

stdout is -the S-tandard 
Output data stream- 


"); 


n 

\ These two ealIs are equivalent 

r 

Turtles!"); 



This is the data that will 
sent- 



The fprintf () function allows you to choose where you 
want to send text to. You can tell fprintf () to send text 
to stdout (the Standard Output) or stderr (the Standard 
Error). 


theveyive no 

Dumb Questions 


% There’s a stdout and a stderr. Is there a stdin? 

Yes, and as you probably guessed, it refers to the Standard 

Input. 

% Can I print to it? 

^Z No, the Standard Input can’t be printed to. 


Can I read from it? 


% 

Yes, by using f scanf (), which is just like scanf (), 
but you can specify the data stream. 


% So is f scanf (stdin , . . .) exactly the same as 
scanf(...)? 

^Z Yes, they’re identical. In fact, behind the scenes, 

scanf (...) just calls f scanf (stdin, . . . ) . 


Can I redirect the Standard Error? 


^Z Yes; > redirects the Standard Output. But 2 > redirects the 
Standard Error. 

% So I could write geo2j son 2> errors.txt? 

Z Yes. 


122 Chapter 3 


www.it-ebooks.info 




creating small tools 


Let's update the code to use fpriwtfO 

With just a couple of small changes, you can get our error 
messages printing on the Standard Error. 



That means that the code should now work in exactly the same 
way, except the error messages should appear on the Standard 
Error instead of the Standard Output. 

Let’s run the code and see. 


you are here ► 123 


www.it-ebooks.info 




test drive 



If you recompile the program and then run the corrupted GPS 
data through it again, this happens. 


I File Edit Window Help ControlErrors l 


> gcc geo2json.c -o geo2json 

> ./geo2json-page21 < gpsdata.csv > output.json 
Invalid latitude: 423.631805 


That’s excellent. This time, even though you are redirecting 
the Standard Output into the output.json file, the error message 
is still visible on the screen. 

The Standard Error was created with exactly this in mind: 
to separate the error messages from the usual output. But 
remember: stderr and stdout are both just output 
streams. And there’s nothing to prevent you from using them 
for anything. 


Let’s try out your newfound Standard Input 
and Standard Error skills. 



BULLET POINTS 


The printf () function sends data to 
the Standard Output. 


The Standard Output goes to the display 
by default. 


You can redirect the Standard Output to a 
file by using > on the command line. 


scanf () reads data from the Standard 
Input. 


The Standard Input reads data from the 
keyboard by default. 


You can redirect the Standard Input to read 
a file by using < on the command line. 


The Standard Error is reserved for 
outputting error messages. 


You can redirect the Standard Error using 
2>. 


124 Chapter 3 


www.it-ebooks.info 











creating small tools 


TOP SECRET 


We have reason to believe that the following program has been used in the transmission of secret messages: 

#include <stdio.h> 


int main() 

{ 

char word[10]; 
int i = 0; 

while (scanf("%9s", word) == 1) { 

i = i + 1; 
if (i % 2) 

fprintf(stdout, "%s\n", word); 
else 

fprintf(stderr, "%s\n", word); 

} 

return 0; 


i % 2- mnCdfiS TV>C 

v-e»*a'mdev- le-Ct when 
you divide by 2-* 



We have intercepted a file called secret.txt and a scrap of paper with instructions: 


THE BUY SUBMARINE 
SIX WILL EGGS 
SURFACE AND AT 
SOME NINE MILK PM 


£un loi-th* 

secretjnnessages < secrebbct > message!;bet R> messageSt/bd 



se£vett*t 


> will redirect the Standard Output 2> will redirect the Standard tvvov. 


Your mission is to decode the two secret messages. Write your answers below. 

Message 1 Message 2 


you are here ► 


www.it-ebooks.info 






















top secret solved 


T01» SECRET — SOLVED 

We have reason to believe that the following program has been used in the transmission of secret messages: 

#include <stdio.h> 

int main() 

{ 

char word[10]; 
int i = 0; 

while (scanf("%9s", word) == 1) { 

i = i + 1; 
if (i % 2) 

fprintf(stdout, "%s\n", word); 
else 

fprintf(stderr, "%s\n", word); 

} 

return 0; 

} 


We have intercepted a file called secret.txt and a scrap of paper with instructions: 



Your mission was to decode the two secret messages. 


Message 1 

Message 2 

THE 

mi 

SUBMARINE 

SI* 

WILL 

E£j£>S 

SURFACE 

AND 

AT 

SOME 

NINE 

MILK 

PM 


Chapter 3 


www.it-ebooks.info 























creating small tools 




The Operating System 


This week’s interview: 

Does the Operating System Matter? 


Head First: Operating System, we’re so pleased 
you’ve found time for us today 

O/S: Time sharing: it’s what I’m good at. 

Head First: Now you’ve agreed to appear under 
conditions of anonymity, is that right? 

O/S: Don’t Ask/Don’t Tell. Just call me O/S. 

Head First: Does it matter what kind of O/S you 
are? 

O/S: A lot of people get pretty heated over which 
operating system to use. But for simple G programs, 
we all behave pretty much the same way. 

Head First: Because of the G Standard Library? 

O/S: Yeah, if you’re writing G, then the basics are 
the same everywhere. Like I always say, we’re all the 
same with the lights out. Know what I’m saying? 

Head First: Oh, of course. Now, you are in charge 
of loading programs into memory? 

O/S: I turn them into processes, that’s right. 

Head First: Important job? 

O/S: I like to think so. You can’t just throw a 
program into memory and let it struggle, you know? 
There’s a whole bunch of setup. I need to allocate 
memory for the programs and connect them to their 
standard data streams so they can use things like 
displays and keyboards. 

Head First: Like you just did for the geo2 j son 
program? 

O/S: That guy’s a real tool. 

Head First: Oh, I’m sorry. 

O/S: No, I mean he’s a real tool: a simple, text-based 
program. 


Head First: Ah, I see. And do you deal with a lot 
of tools? 

O/S: Ain’t that life? It depends on the operating 
system. Unix-style systems use a lot of tools to get the 
work done. Windows uses them less, but they’re still 
important. 

Head First: Creating small tools that work together 
is almost a philosophy, isn’t it? 

O/S: It’s a way of life. Sometimes when you’ve got a 
big problem to solve, it can be easier to break it down 
into a set of simpler tasks. 

Head First: Then write a tool for each task? 

O/S: Exactly. Then use the operating system—that’s 
me—to connect the tools together. 

Head First: Are there any advantages to that 
approach? 

O/S: The big one is simplicity. If you have a set of 
small programs, they are easier to test. The other 
thing is that once you’ve built a tool, you can use it in 
other projects. 

Head First: Any downsides? 

O/S: Well, tools don’t look that great. They work on 
the command line usually, so they don’t have a lot of 
what you might call Eye Appeal. 

Head First: Does that matter? 

O/S: Not as much as you’d think. As long as you 
have a set of solid tools to do the important work, 
you can always connect them to a nice interface, 
whether it’s a desktop application or a website. But, 
hey, look at the time. Sorry, I’ve got to preempt you. 

Head First: Oh, well, thank you, O/S; it’s been a 
pleas... ZZZZZZ--- 


you are here ► 


127 


www.it-ebooks.info 


reusable tools 


Small tools are flexible 


One of the great things about small tools is their flexibility. If you 
write a program that does one thing really well, chances are you will 
be able to use it in lots of contexts. If you create a program that can 
search for text inside a file, say, then chances are you going to find 
that program useful in more than one place. 

For example, think about your geo2 j son tool. You created it to 
help display cycling data, right? But there’s no reason you can’t use it 
for some other purpose.. .like investigating.. .the... 



This is 

latitude ?>\°. 


This is 

latitude U>°. 


To see how flexible our tool is, let’s use it for a completely different 
problem. Instead of just displaying data on a map, let’s try to use 
it for something a little more complex. Say you want to read in a 
whole set of GPS data like before, but instead of just displaying 
everything, let’s just display the information that falls inside the 
Bermuda Rectangle. 

That means you will display only data that matches these conditions: 


((latitude > 26) && (latitude < 34)) 


((longitude > -76) && (longitude < -64)) 

So where do you need to begin? 

128 Chapter 3 


www.it-ebooks.info 














creating small tools 


Pon't change the geo£json tool 

Our geo2 j son tool displays all of the data it’s given. So what 
should we do? Should we modify geo2 j son so that it exports 
data and also checks the data? 

Well, we could , but remember, a small tool: 

does one job and does it well 


You don’t really want to modify the geo2 j son tool, because 
you want it to do just one task. If you make the program do 
something more complex, you’ll cause problems for your users 
who expect the tool to keep working in exactly the same way. 



So if you don’t want to change the 
geo2json tool, what should you do? 




■Tips fhr Designing Small T<§<§ls 


Small tools like geo2 j son all follow these design principles: 

* They can read data from the Standard Input. 

* They can display data on the Standard Output. 

* They deal with text data rather than obscure binary formats. 

* They each perform one simple task. 


you are here ► 


129 


www.it-ebooks.info 







two tools 


A different task weeds a different tool 

If you want to skip over the data that falls outside the Bermuda 
Rectangle, you should build a separate tool that does just that. 

So, you’ll have two tools: a new bermuda tool that filters out 
data that is outside the Bermuda Rectangle, and then your 
original geo2 j son tool that will convert the remaining data 
for the map. 

This is how you’ll connect the programs together: 



you M -reea - 
into the bermuda “tool 

t^This data includes events inside and 
outside the Bermuda Redtangle. 





^^^The tool will only pass on data that 
-falls inside the Bermuda Redtan^le- 







^^-£o you will only pass Bermuda 
gy Rectangle data to ^eo2-json. 






^eoZjson will work e^adtly 
the same as be-fore- 


By splitting the problem down into two tasks, you will be able 
to leave your geo2 j son untouched. That will mean that its 
current users will still be able to use it. The question is: 

How will you connect your two tools together? 



You will produde 
dontainin^ only 
Redtan^le data 


130 Chapter 3 


: a map 
Bermuda 


www.it-ebooks.info 







creating small tools 


Connect your input and output with a pipe 

You’ve already seen how to use redirection to connect the 
Standard Input and the Standard Output of a program file. But 
now you’ll connect the Standard Output of the bermuda 
tool to the Standard Input of the geo2 json, like this: 





pipe daw be used to dowwedt "the ' 
Stawdav-d Output ot owe prodess to the 
Stawdavd Iwput ot awothev- pv-odess. 


This is a pipe 



The I symbol is a 
pipe that connects 
tke Standard Output 
of one process to tke 
Standard Input of 
another process. 


Tke output o-P bermuda. 


That way, whenever the bermuda tool sees a piece 
of data inside the Bermuda Rectangle, it will send the data 
to its Standard Output. The pipe will send that data from 
the Standard Output of the bermuda tool to Standard 
Input of the geo2 j son tool. 

The operating system will handle the details of exactly how 
the pipe will do this. All you have to do to get things running 
is issue a command like this: 





This is -the pipe- 



The opera-ting 

system will run 

both pro 9 waw,sat^ bermuda 1 geo2json 

the saw* time. ^-The output ot bermuda will bedome the iwput o( geoZjsow. 


So now it’s time to build the bermuda tool. 


you are here ► 131 


www.it-ebooks.info 







tool notes 


The bermuda tool 


The bermuda tool will work in a very similar way to the 
geo2 j son tool: it will read through a set of GPS data, line by 
line, and then send data to the Standard Output. 

But there will be two big differences. First, it won’t send every 
piece of data to the Standard Output, just the lines that are 
inside the Bermuda Rectangle. The second difference is that 
the bermuda tool will always output data in the same CSV 
format used to store GPS data. 

This is what the pseudocode for the tool looks like: 




Let’s turn the pseudocode into C. 


132 Chapter 3 


www.it-ebooks.info 




creating small tools 



Poo] puzzjc 

Your goal is to complete the code for 
the bermuda program. Take code 
snippets from the pool and place 
them into the blank lines below. 
You won't need to use all the 
snippets of code in the pool. 


^include <stdio.h> 


int main() 

{ 

float latitude; 
float longitude; 
char info[80]; 

while (scanf ("%f,%f,%79[ A \n]", , , ) == 3) 


if (( 

> 

) 

( 

< 

) ) 

if ( ( 

> 

) 

( 

< 

) ) 


printf("%f , %f , %s\n", , , ); 

return 0; 

} 


Note: each thing from 



www.it-ebooks.info 

























out of the pool 



P®®1 plizzje §®]ufi®n 

Your goal was to complete the code for 
the bermuda program by taking 
code snippets from the pool and 
placing them into the blank lines 
below. 


^include <stdio.h> 

int main() 

{ 

float latitude; 
float longitude; 
char info[80]; 

while ( scanf ("%f, %f, %7 9 [ A \n] ", platitude. a ^Alongitude.. a Jnfo. 

if ( (_ latitude.>.26.) .&&. (.latitude <.34. 

if ( ( longitude > -76) && ( longitude < : 64 

printf ("%f,%f,%s\n", latitude a longitude a info ) a* 

return 0; 

} 


Note: each thing from 
the pool can be used 
only once! 



134 Chapter 3 


www.it-ebooks.info 



























creating small tools 



Tost Drove 


Now that you’ve completed the bermuda tool, it’s time to 
use it with the geo2 j son tool and see if you can map any 
weird occurrences inside the Bermuda Rectangle. 

Once you’ve compiled both of the tools, you can fire up a 
console and then run the two programs together like this: 




f 


D® this! 


You can download the spooky.csv file at 
h ttp://oreillyh fc. appspot. com/spooky, csv. 



Remembev--* i-f you ave v-urming oy\ 
l/Vindows, you need "the w ./ w . 

Whe* you do**edt the ( /bermuda | 

"two 

you da* -b-ea-t them as \ 

a single P'roAva**- ! he be, ™ da filters out 


This is the fife that 
do**edts the fv-odesses. 





This is the f ile do*tai*i*5 all the eve*ts. 


spooky.csv > output.j son 

\ 


the events we want to ignore. 


The geoZjson tool will donvert 
the events to J SON -format. 


Wei! save the 
output in this -Pile. 


By connecting the two programs together with a pipe, you 
can treat these two separate programs as if they were a 
single program, so you can redirect the Standard Input and 
Standard Output like you did before. 


File Edit Window HelD MvAnale 


] 



Missi 


Bermuda 


> (./bermuda | ./geo2json) < spooky.csv > output.json 


Excellent: the program works! 


fs 


/A /A 


n u 


a *,*,. Evarrsvilte 

Kentucky 


SB y reppr 

S*l*- V J £ h ™ nC ^ --Virginia 

!’ • Tennessee \ - '. Carolina’ * " 

■ h . / Ashevlle ^ arolina 

i\ ls ---Chattanooga ' * J\ ♦ 

Hunisvlle* Rome Gre«*wlle' Rock Hill \ ’ 

L _ South \ 


Ceo-locater 


j ... . . ' x Newport' District of 
,Backsbu<g ♦ Virginia Ne>« j Columbia 


Map | Satellite 

i^Show labelsl 


p„i' Birmingham \ •; ‘^Carolina % 

PP' I At anta V 

I 1 .*.! im Krf-A ■ 


cinn ♦ - I Ait x ■- waiumia 

.sippi • At an a V 

I ' . Augusta j 

i Alabama \ ' \ \ c * 

. , Georgia \ 

- ; “°7 som ^/ 


[28.30438, -74.575195] 

Typc=UFO 


- , j ♦< • > 'jeorgia '• 

i Montgomery) 

:w 9 . 'V s ™ 

-• I _ Dothan* Albany, 

1 U*.Mobile . '-ivaw^ta.j 

-New 1 • ralahassee-.. 

■leans . 

City 


Jacksonville 


E ; Wca,a 

r : u 11 • Orlando 


da 

West Palm- 
. Beach 

. E ^ aRatOT 

g 


North 

Atlantic 

Ocean 


l 


-~Cancun 

• Merida > 

• - *P1aya 


Playa del 
Carmen 


-*• Cuba 

• Holguin 

LasTijnas-^ 

Bavamsw* » < _ 

cayman 

islands DeCuba 


Turns and 
Caicos Islands 


Google search the map 


Search 


British Virgin 
Islands 


Santiago tvOvJu 

DeCuba Ha j ti ^Dominican British Virgin 

< Jl Riniihjin/ii ' Islands 

y uPort au-PrnceVl2f p V“? c ‘- T> * i*df 

aica* ~T-r ' Puerto Rico - - Anni.iiu 

©2011 TerraMetrics, NASA, Map data ©2011 Europa T^ftj^ogws, Google, INEGI - Terms of Use 


you are here ► 135 


www.it-ebooks.info 























no dumb questions 


% Why is it important that small 
tools use the Standard Input and 
Standard Output? 

Because it makes it easier to connect 
tools together with pipes. 



Why does that matter? 


Small tools usually don’t solve an 
entire problem on their own, just a small 
technical problem, like converting data 
from one format to another. But if you can 
combine them together, then you can solve 
large problems. 



What is a pipe, actually? 


The exact details depend on the 
operating system. Pipes might be made 
from sections of memory or temporary files. 
The important thing is that they accept data 
in one end, and send the data out of the 
other in sequence. 


there] are no 

Dumb Questions 


O: So if two programs are piped 
together, does the first program have 
to finish running before the second 
program can start? 


No. Both of the programs will run at 
the same time; as output is produced by 
the first program, it can be consumed by 
the second program. 



Why do small tools use text? 


It’s the most open format. If a 
small tool uses text, it means that any 
other programmer can easily read and 
understand the output just by using a text 
editor. Binary formats are normally obscure 
and hard to understand. 


O: Can I connect several programs 
together with pipes? 


Yes, just add more | between each 
program name. A series of connected 
processes is called a pipeline. 


O: If several processes are 
connected together with pipes and then 
I use > and < to redirect the Standard 
Input and Output, which processes will 
have their input and output redirected? 


The < will send a file’s contents to 
the first process in the pipeline. The > will 
capture the Standard Output from the last 
process in the pipeline. 


% Are the parentheses really 
necessary when I run the bermuda 
program with geo2 json? 


Yes. The parentheses will make sure 
the data file is read by the Standard Input 
of the bermuda program. 



BULLET POINTS 


■ If you want to perform a different 
task, consider writing a separate 
small tool. 

■ Design tools to work with Standard 
Input and Standard Output. 


Small tools normally read and write 
text data. 

You can connect the Standard 
Output of one process to the 
Standard Input of another process 
using a pipe. 


136 Chapter 3 


www.it-ebooks.info 








creating small tools 


Put what if you want to output to 
more than one file? 


We’ve looked at how to read data from one file and write to 
another file using redirection, but what if the program needs 
to do something a little more complex, like send data to 

more than one file? 


Imagine you need to create another tool that will read a set 
of data from a file, and then split it into other files. 


C / 
poo£!' 
/ ; i' 





ufos.csv 




(Jg(((((((((auii(((iiimm)j) 


WiuiimwiiDmmiiwijJO 


spooky.csv 








disappearances.csv 


So what’s the problem? You can’t write to files, right? 
Trouble is, with redirection you can write to only two files 
at most, one from the Standard Output and one from the 
Standard Error. So what do you do? 




other.csv 



you are here ► 137 


www.it-ebooks.info 










data streams on the fly 


Roll your own data streams 

When a program runs, the operating system gives it three file 
data streams: the Standard Input, the Standard Output, and the 
Standard Error. But sometimes you need to create other data 
streams on the fly 

The good news is that the operating system doesn’t limit you to the 
ones you are dealt when the program starts. You can roll your own 
as the program runs. 

Each data stream is represented by a pointer to a file, and you can 
create a new data stream using the f open () function: 



This Will dveate a This is -the name of the f ile- .^This is the mode: V «, ea » s Vead 

data stream to 

vead-from a-file.^ FILE * in _ file = fopen("input.txt" , V); 


This is the hame o( the -file. 

This will dvcatc a ^ ^ 

data stream to ✓ FILE *out_file = fopen ("output. txt", 

write to a -file- 



This is 


the mode : 


li H U 

w means wri 


The fopen () function takes two parameters: a filename and a 
mode. The mode can be w to write to a file, r to read from a file, or 
a to append data to the end of a file. 

Once you’ve created a data stream, you can print to it using 
fprintf (), just like before. But what if you need to read from a 
file? Well, there’s also an fscanf () function to help you do that 
too: 


The mode is: 

ft 11 _ • . 

w — write, 
r — read, or 
a — append. 


fprintf(out file, "Don’t wear %s with %s", "red", "green"); 


fscanf(in file, "%79[ A \n]\n", sentence); 


Finally, when you’re finished with a data stream, you need to close 
it. The truth is that all data streams are automatically closed when 
the program ends, but it’s still a good idea to always close the data 
stream yourself: 

fclose (in_file) ; 
fclose(out file); 


Let’s try this out now. 

138 Chapter 3 


www.it-ebooks.info 


V • 1 

o , < 


Sharpen your pencil 


creating small tools 



This is the code for a program to read all of the data from a GPS 
file and then write the data into one of three other files. See if 
you can fill in the blanks. 


^include <stdio.h> 
^include <stdlib.h> 
^include <string.h> 


); 


int main() 

{ 

char line [ 80]; 

FILE *in = fopen("spooky.csv", 

FILE *filel = fopen("ufos.csv", ); 

FILE *file2 = fopen("disappearances.csv", 

FILE *file3 = fopen("others.csv", )/ 

while ( (in, "%79[ A \n]\n", line) == 1) { 

if (strstr (line, "UFO")) 

(filel, "%s\n", line); 
else if (strstr (line, "Disappearance")) 


) ; 


else 


(file2. 

"%s\n", 

line); 

(file3. 

"%s\n", 

line); 


return 0; 


(filel); 
(file2); 
(file3) ; 


theYeicffe nQ 

Dumb Questions 


How many data streams can I have? 

It depends on the operating system, but usually a process 
can have up to 256. The key thing is there’s a limited number of 
them, so make sure you close them when you’re done using them. 



Why is FILE in uppercase? 


It’s historic. FILE used to be defined using a macro. 
Macros are usually given uppercase names. You’ll hear about 
macros later on. 


you are here ► 


139 


www.it-ebooks.info 



















read and write 



This is the code for a program to read all of the data from a GPS 
file and then write the data into one of three other files. You were 
to fill in the blanks. 


^include <stdio.h> 

^include <stdlib.h> 

^include <string.h> 

int main () 

{ 

char line [ 80]; 

FILE *in = fopen("spooky.csv", 


u » 

V 


u » 


).; 


FILE *filel = fopen ("ufos .csv", . Y( . ); 

FILE *file2 = fopen("disappearances.csv", . 

FILE *file3 = fopen("others.csv", . y . ); 

-fstah-f 


u » 
y/ 


); 


while ( (in, "%79 [ A \n] \n", line) 

if (strstr(line, "UFO")) 

....(filel, "%s\n", line); 
else if (strstr(line, "Disappearance")) 

(file2, "%s\n", line) ; 


1 ) { 


else 


'fprirrt'P 


(file3, "%s\n", line); 


fdlosc 

jpdlose 

^dlosc 


return 0; 


(filel); 
(file2); 
(file3); 


The program rows, but... 

If you compile and run the program with: 


ufos.csv 


gcc categorize.c -o categorize && ./categorize 


the program will read the spooky.csv file and split up the data, line by line, into 
three other files— ufos.csv , disappearances.csv, and other.csv. 



disappearances.csv 


other.csv 


That’s great, but what if a user wanted to split up the data differently? What if 
he wanted to search for different words or write to different files? Gould he do 
that without needing to recompile the program each time? 


140 Chapter 3 


www.it-ebooks.info 





















creating small tools 


There's more to wam() 


The thing is, any program you write will need to give the user the ability to 
change the way it works. If it’s a GUI program, you will probably need to give 
it preferences. And if it’s a command-line program, like our categorize tool, 
it will need to give the user the ability to pass it command-line arguments: 


This is -fchc -first word to -filter -for 


All of the mermaid data meaM ^ ^ ^ E[vis 

will be stored i* this tile- 

./categorize mermaid mermaid.csv Elvis elvises.csv the_rest.csv 

But how do you read command-line arguments from within the 
program? So far, every time you’ve created a main () function, you’ve 
written it without any arguments. But the truth is, there are actually two 
forms of the main () function we can use. This is the second version: 

int main(int arge, char *argv[]) 



All the Elvis sighting 
will be stored here- 


{ 


} 


.... Do stuff.... 


The main () function can read the command-line arguments as 
an array of strings. Actually, of course, because G doesn’t really 
have strings built-in, it reads them as an array of character pointers to 
strings. Like this: 


Everything 
else ^oes into 
this tile- 


"./categorize" "mermaid" "mermaid.csv" "Elvis" "elvises.csv" "the rest.csv" 


t 


T 

This is ar^vCI3. 


This is argvtOJ. 

T 

The -first argument is actually the 
name of the program bein^ run- 


T 

This is dv-gvfZJ. 


This 


^ A 

is ar<y//33. This is argv£/|"3. 


This is ar<y/[53. 


Like any array in G, you need some way of knowing how long the 
array is. That’s why the main () function has two parameters. 

The arge value is a count of the number of elements in the array. 

Command-line arguments really give your program a lot more 
flexibility, and it’s worth thinking about which things you want 
your users to tweak at runtime. It will make your program a lot 
more valuable to them. 


OK, let’s see how you can add a little flexibility 
to the categorize program. 



Watch it! 


The first argument 
contains the name 
of the program as 
it was run by the 
user. 


That means that the first proper 
command-iine argument is 

argv[1]. 


you are here ► 


141 


www.it-ebooks.info 













code magnets 



Code Magnets 


This is a modified version of the categorize program that can read the keywords 
to search for and the files to use from the command line. See if you can fit the correct 
magnets into the correct slots. 

The program runs using: 


/categorize mermaid mermaid.csv Elvis elvises.csv the rest.csv 


^include <stdio.h> 

^include <stdlib.h> 

^include <string.h> 

int main(int argc, char *argv[]) 


{ 



char line [ 80]; 

if ( . ! =. ) { 

fprintf(stderr, "You need to give 5 arguments\n"); 
return 1; 

} 

FILE *in = fopen("spooky.csv", "r"); 

FILE *filel = fopen ( 

FILE *file2 = fopen ( 

FILE *file3 = fopen( 


142 Chapter 3 


www.it-ebooks.info 












creating small tools 


ile (fscanf(in. 

"%79 [ A \n 

]\n", line) 

if (strstr(line. 


>) 

fprintf(filel, 

"%s\n", 

line); 

else if (strstr(line. 

>) 

fprintf(file2. 

"%s\n", 

line); 

else 



fprintf(file3. 

"%s\n", 

line); 


} 

fclose (filel); 
fclose(file2); 
fclose(file3); 
return 0; 



you are here ► 


143 


www.it-ebooks.info 














code magnets solution 



Code Magnets Solution 


This is a modified version of the categorize program that can read the keywords 
to search for and the files to use from the command line. You were to fit the correct 
magnets into the correct slots. 

The program runs using: 


./categorize mermaid mermaid.csv Elvis elvises.csv the_rest.csv 

^include <stdio.h> 

^include <stdlib.h> 

^include <string.h> 

int main(int argc, char *argv[]) 


{ 


char line [ 80]; 


if ( 



} 


FILE *file2 = 



fprintf(stderr, "You need to give 5 arguments\n"); 
return 1; 


FILE *in = fopen("spooky.csv", "r"); 


FILE *filel = 



144 Chapter 3 


www.it-ebooks.info 




























creating small tools 


while (fscanf(in, "%79[ A \n]\n ", line) == 1) { 


if (strstr(line. 

|argv[l] 

)»> 

fprintf(filel, 

"%s\n". 

line); 

else if (strstr (line r 1 “^£3] j 

fprintf(file2. 

"%s\n". 

line); 

else 



fprintf(file3. 

"%s\n". 

line); 


} 

fclose (filel); 
fclose (file2); 
fclose(file3); 
return 0; 



you are here ► 


145 


www.it-ebooks.info 









test drive 



OK, let’s try out the new version of the code. You’ll need a test data file 
called spooky, csv. 


30.685163, 
28.304380, 
29.132971, 
28.343065, 
27.868217, 
30.496017, 
26.224447, 
29.401320, 
37.879536, 
22.705256, 
27.166695, 


68.137207,Type=Yeti 

■74.575195,Type=UFO 

■71.136475,Type=Ship 

■62.753906,Type=Elvis 

■68.005371,Type=Goatsucker 

73.333740,Type=Disappearance 

■71.477051,Type=UFO 

■66.027832,Type=Ship 

69.477539,Type=Elvis 

■68.192139,Type=Elvis 

■87.484131,Type=Elvis 


spooky.csv 


Now you’ll need to run the categorize program with a few command¬ 
line arguments saying what text to look for and what filenames to use: 


I File Edit Window Help ThankYouVeryMuch 


> categorize UFO aliens.csv Elvis elvises.csv the rest.csv 


When the program runs, the following hies are produced: 


146 Chapter 3 


www.it-ebooks.info 











creating small tools 



South 


Michigan 


[U(Kvai>.*V 


Mitcitlipp 


ina Mexico' 


l( you run clviscs.-t^-t -fchv-ough 
jcoZjsoh, you tav\ display i-t o* a map. 

* 


fy r*> 


Geo-locater 


Map | Satellite 

10 DC 6 


Dakota i 


Minnesota" K 

—; ,.j«uk. '“v 

*. Wir.rnnr.in 


[27.166695. -87.484131] 

1 ypc=lilvis 


Oklahoma > 


28.304380,-74~575195,Type=UFO ^ 4> 

26.224447,-71.477051,Type=UFO ‘ 


aliens.csv 


30.685163,-68.137207,Type=Yeti 
29.132971,-71.136475,Type=Ship 
27.868217,-68.005371,Type=Goatsucker 
30.496017,-73.333740,Type=Disappearance 
29.401320,-66.027832,Type=Ship 


the rest.csv 


tlvis kas Ic-C-t the Wilding 


28.343065, 
37.879536, 
22.705256, 
27.166695, 


■62.753906,Type=Elvi 
■69.477539,Type=Elvi; 
■68.192139,Type=Elvi 
■87.484131,Type=Elvi 


I I 


Google 


search the ma 


elvises.csv 




Although at Head First Labs we never make mistakes (cough), it's important in real-world 
programs to check for problems when you open a file for reading or writing. Fortunately, 
if there's a problem opening a data stream, the f open () function will return the value 0. 
That means if you want to check for errors, you should change code like: 


FILE *in = fopen( M i dont exist.txt", "r"); 


to this: 


FILE *in; 

if (!(in = fopen("dont_exist.txt", "r"))) { 

fprintf(stderr, "Can’t open the file.\n M ); 
return 1; 


you are here ► 147 


www.it-ebooks.info 










































command-line options 


Overheard at the Head First Pizzeria 



Chances are, any program you write is going to need 
options. If you create a chat program, it’s going to 
need preferences. If you write a game, the user will 
want to change the shape of the blood spots. And if 
you’re writing a command-line tool, you are probably 
going to need to add command-line options. 

Command-line options are the little switches you often 
see with command-line tools: 

,_Display all the protesses, 

ps -ae - m£ | w dmO| their environments- 

tail -f logfile. out Display the end of the -file, but wait tor new 

data to be added to the end of the tile- 


148 Chapter 3 


www.it-ebooks.info 




creating small tools 


let the library do the work for you 

Many programs use command-line options, so there’s a special 
library function you can use to make dealing with them a 
little easier. It’s called getopt (), and each time you call it, it 
returns the next option it finds on the command line. 

Let’s see how it works. Imagine you have a program that can 
take a set of different options: 

Use -fouv engines^ ^^^wesomeness mode enabled- 
rocket_to -e 4 -a Brasilia Tokyo London 

This program needs one option that will take a value (-e = engines) 
and another that is simply on or off (-a = awesomeness). You can 
handle these options by calling getopt () in a loop like this: 



The P^lxfe Guide 
t® Standards 


The unistd.h header is 
not actually part of the 
standard C library. Instead, 
it gives your programs 
access to some of the 
POSIX libraries. POSIX 
was an attempt to create 
a common set of functions 
for use across all popular 
operating systems. 


Y^u will need -to — 
indude this header. 


The dode *to handle 
eadh option goes here- 

YouVe reading the 
argument -for the 
t option here- 


-^#include <unistd.h> 

This means “The a option is 
valid; SO is the e option. 

* 

while ((ch = getopt(arge, argv, "ae:")) != EOF) 

switch(ch) { 


\ 


' e' 


case 

engine count = optarg; 


The U; means that the e 
option needs an argument- 


} 


Jo CX o-f 


These £'mal two lines 

make sure we skip past arge -= optind; 

read- < argv += optind; 



tt *• 


the options we 


Inside the loop, you have a switch statement to handle each of 
the valid options. The string ae : tells the getopt () function 
that a and e are valid options. The e is followed by a colon to tell 
getopt () that the -e needs to be followed by an extra argument, 
getopt () will point to that argument with the optarg variable. 

When the loop finishes, you tweak the argv and arge variables 
to skip past all of the options and get to the main command-line 
arguments. That will make your argv array look like this: 


? 

This is argvC03 


Brasilia Tokyo London 



This is argvf/J. This is argv[2J. 



After processing 
the arguments, 
the Oth argument 
will no longer be 
the program name. 


argv [ 0 ] will instead point to the 
first command-line argument that 
follows the options. 


you are here ► 149 


www.it-ebooks.info 











pizza puzzle 




Looks like someone's been taking a bite out of the pizza code. See if you can replace 
the pizza slices and rebuild the order pizza program. 


^include <stdio.h> 
^include <unistd.h> 


int main(int argc, char *argv[]) 

{ 

char *delivery = 
int thick = 0; 
int count = 0; 
char ch; 


while ( (ch = getopt (argc, argv, "d .")) ! = EOF) 

switch (ch) { 
case 1 d 1 : 


r 

break; 
case 1 t 1 : 


break; 
default: 


fprintf(stderr, "Unknown option 


l O, 
o 


s'\n", 


optarg); 


return 

} 


150 Chapter 3 


www.it-ebooks.info 









creating small tools 


argc -= optind; 
argv += optind; 

if (thick) 

puts("Thick crust."); 
if (delivery[0]) 

printf("To be delivered %s.\n", delivery); 
puts("Ingredients:"); 


for (count =.; count < .; count++) 

puts(argv[count]); 
return 0; 






you are here ► 


151 


www.it-ebooks.info 








pizza unpuzzled 



^include <stdio.h> 
^include <unistd.h> 


int main(int argc, char *argv[]) 


{ 


char ’‘"delivery 
int thick = 0; 
int count = 0; 
char ch; 


n ii . 
r 


The d is followed by a dolon 
bedause it takes an argument 


switch (ch) { 
case 'd': 




")) ! = 




We’ll point the delivery variable to the 
argument Sullied With the d option- 




equivalent to setting it to true- 


fprintf(stderr, "Unknown option: ' %s'\n", optarg); 


return 



152 Chapter 3 


EOF) 


www.it-ebooks.info 









creating small tools 


argc -= optind; 
argv += optind; 

if (thick) 

puts("Thick crust."); 
if (delivery[0]) 

printf("To be delivered %s.\n", delivery); 
puts("Ingredients:"); 





for (count = ... 


; count < 


count++) 


puts(argv[count]) 
return 0; 


you are here ► 153 


www.it-ebooks.info 





test drive 



Now you can try out the pizza-order program: 


Compile -the 

program. 

YouVe no*t us'mg 
any options the 
-first douple o-f 
times you tall it 

Then try out the__^ 
^ °ftoh and jive 
it ah airjumeht of 
now. 

rv,eh tV>e"t"optioh- ** 

Remember: the t 
option doesn t “tdhe 
any arguments- 

Finally, try skipping 
the argument -ror 
d •* it Creates an 
error. 


File Edit Window Help Anchovies? 


> gcc order_j?izza. c -o order_pizza 

> ./order_pizza Anchovies 
Ingredients: 

Anchovies 

> ./order_pizza Anchovies Pineapple 
Ingredients: 

Anchovies 

Pineapple 

> ./order_pizza -d now Anchovies Pineapple 
To be delivered now. 

Ingredients: 

Anchovies 

Pineapple 

> ./order_pizza -d now -t Anchovies Pineapple 
Thick crust. 

To be delivered now. 

Ingredients: 

Anchovies 

Pineapple 

> ./order_pizza -d 

order_pizza: option requires an argument -- d 
Unknown option: '(null)' 

> 


It works! 

Well, you’ve learned a lot in this chapter. You got deep into 
the Standard Input, Standard Output, and Standard Error. 
You learned how to talk to files using redirection and your 
own custom data streams. Finally, you learned how to deal 
with command-line arguments and options. 

A lot of G programmers spend their time creating small tools, 
and most of the small tools you see in operating systems like 
Linux are written in G. If you’re careful in how you design 
them, and if you make sure that you design tools that do one 

thing and do that one thing well, you’re well on course to 
becoming a kick-ass G coder. 

154 Chapter 3 


www.it-ebooks.info 







creating small tools 


thereicffe no 

Dumb Questions 



Can I combine options like -td 


now instead of -d now -t? 


Yes, you can. The getopt () 
function will handle all of that for you. 


O: What about changing the order of 
the options? 


Because of the way we read the 
options, it won’t matter if you type in -d 
now -tor-t -d nowor-td 


now. 


O: So if the program sees a value on 
the command line beginning with it 
will treat it as an option? 


If it reads it before it gets to the main 
command-line arguments, it will, yes. 


% But what if I want to pass negative 
numbers as command-line arguments 
like set_temperature -c -4? 
Won’t it think that the 4 is an option, not 
an argument? 


In order to avoid ambiguity, you 
can split your main arguments from the 
options using - -.So you would write 
set_temperature -c -- -4. 
getopt () will stop reading options 
when it sees the - -, so the rest of the line 
will be read as simple arguments. 



BULLET POINTS 


■ There are two versions of the 
main () function—one with 
command-line arguments, and one 
without. 

■ Command-line arguments are 
passed to main () as an argument 
count and an array of pointers to the 
argument strings. 

■ Command-line options are 
command-line arguments prefixed 
with 

■ The getopt () function helps you 
deal with command-line options. 


You define valid options by passing a 
string to getopt () like ae:. 

A “: ” (colon) following an option 
in the string means that the option 
takes an additional argument. 

getopt () will record the options 
argument using the optarg 
variable. 

After you have read all of the options, 
you should skip past them using the 
optind variable. 


you are here ► 155 


www.it-ebooks.info 








c toolbox 


Your C Toolbox 

You’ve got Chapter 3 under 
your belt, and now you’ve 
added small tools to your 
toolbox. For a complete list of 
tooltips in the book, see Appendix ii. 



C functions like 
printf ^ and sCanfO 
use the Standard 
Output and 
Standard Input to 

Communicate- 


tte Standard 
Output goes 

to the display 

b y de-fault. 



can change 
wt »ere the 
standard Input, 
0u tpui and Error 
Connected to 
us,h 9 "'edireetion. 


Command-bne 

ar ^enb art 

oassed to 
as an arra'f <* 

string pomtc'rs- 


The Standard 
Input reads from 
the keyboard by 
default- 


The Standard 
E-rror > s 3 , 

« ? avsU ^ 

error messages- 


The getoptO 
-fubd-tioh makes 
it easier to 
read dommahd— 

me optiohs. 


eah priht to 
the Standard 
Error us'mj 
^rmt-Pfstderr,...). 


iaU *"f- '7 

fopenr^^ 1 


7 ^ e mode ca* 

be V V- 

V> / Olr 


156 Chapter 3 


www.it-ebooks.info 












using multiple source files 

* Break it down, * 

+ build it up 




If you create a big program, you don’t want a big source file. 

Can you imagine how difficult and time-consuming a single source file for an enterprise- 
level program would be to maintain? In this chapter, you’ll learn how C allows you to break 
your source code into small, manageable chunks and then rebuild them into one huge 
program. Along the way, you’ll learn a bit more about data type subtleties and get to 
meet your new best friend: make. 


this is a new chapter 


157 


www.it-ebooks.info 




guess the data type 



(fueSS tne Data Type 

C can handle quite a few different types of data: characters and whole numbers, floating-point 
values for everyday values, and floating-point numbers for really precise scientific calculations. You 
can see a few of these data types listed on the opposite page. See if you can figure out which data 
type was used in each example. 


Remember: each example uses a different data type. 


158 Chapter 4 


www.it-ebooks.info 








Each letter on the 
countdown display 


90:00 

tolULTQs 


I'ZX T. be o floating Points 


points. 


lining decimal 





That's vi^K-t/ In C, 
dhars av-c anally 
—stored using "tViciv* 
dharadter dodes. 

That means theyVe 

just numbers toof 


you are here ► 


159 


www.it-ebooks.info 
























guess the data type solution 





5ueSS tue Data Type goLutioN 

C can handle quite a few different types of data: characters and whole numbers, floating-point 
values for everyday values, and floating-point numbers for really precise scientific calculations. You 
can see a few of these data types listed on the opposite page. You were to figure out which data 
type was used in each example. 


Remember: each example uses a different data type. 


160 Chapter 4 


www.it-ebooks.info 













Each letter on the 
countdown display 



90:00 

tolULTQs 


lef $ see why... 

you are here ► 161 


www.it-ebooks.info 














data types 


Your quick guide to data types 


char 

Each character is stored in the computer's memory to a character code. And that's just a number. So 
when the computer sees A, K> the computer it's the same as seerng the literal number 6 . 

is the ASCII 

Code -Poe A- 

If you need to store a whole number, you ean generally just use an i nt. The exact maximum size of 
an int can vary, but it's guaranteed to be at least 16 bits. In general, an int can store numbers up 

to a few million. 

short 

But sometimes you want to save a little memory. Why use an int if you just want to store numbers 
up to few hundreds or thousands? That’s what a short is for. A short number usually ta es up 

about half the space of an int. 


Yes but what if you want to store a really large count? That’s what the long data type was 
invented for. On some machines, the long data type takes up tunce the 

can hold numbers up in the billions. But because most computers can deal with really large 1 , 

on a lot of machines, the long data type is exactly the same size as an int. The maximum 
long is guaranteed to be at least 32 bits. 

float 

float is the basic data type for storing floating-point numbers. For most everyday floating-point 
numbers—like the amount of fluid in your orange mocha [cappuccino- -you can use a float. 


double 

Yes, but what if you want to get really precise? If you want to perform calculations that are 
accurate to a large number of decimal places, then you might want to use a double. A dou 
takes up twice the memory of a float, and it uses that extra space to store numbers that are larger 

and more precise. 


162 Chapter 4 


www.it-ebooks.info 



using multiple source files 


Pon t put something big into something small 


When you’re passing around values, you need to be careful 
that the type of the value matches the type of the variable 
you are going to store it in. 

Different data types use different amounts of memory So 
you need to be careful that you don’t try to store a value 
that’s too large for the amount of space allocated to a 
variable, short variables take up less memory than ints, 
and ints take up less memory than longs. 

Now there’s no problem storing a short value inside 
an int or a long variable. There is plenty of space in 
memory, and your code will work correctly: 

short x = 15; 

This v/ill 

int y = x; ( 

printf("The value of y = %i\n", y); 


say tha-t y 







The £oh-fceh-fcs 

a shov~t will 
always -fi-fc j h ah 

IKr t o\r a lohg. 


'r 1 

The £oirrbeirrts ok a lor\g 
may he boo lav-ge b> -fit 
in a short ov air\ *mt 


The problems start to happen if you go the other way 
around—if, say, you try to store an int value into a short. 


int x = 100000; 
short y = x; 
print("The value o 


%hi is the proper £ode to 

-format a short value- 
* 

f y = %hi\n", y); 


Sometimes, the compiler will be able to spot that 
you’re trying to store a really big value into a small 
variable, and then give you a warning. But a lot 
of the time the compiler won’t be smart enough 
for that, and it will compile the code without 
complaining. In that case, when you try to run the 
code, the computer won’t be able to store a number 
100,000 into a short variable. The computer will 
fit in as many 1 s and 0s as it can, but the number 
that ends up stored inside the y variable will be very 
different from the one you sent it: 



So why did putting a large number into a short 
go negative? Numbers are stored in binary.This is 
what 100,000 looks like in binary: 

x <- 0001 1000 0110 1010 0000 

But when the computer tried to store that value 
into a short, it only allowed the value a couple 
of bytes of storage. The program stored just the 
righthand side of the number: 


y <- 1000 0110 1010 0000 


The value of y = -31072 


Signed values in binary beginning with a 1 in 
highest bit are treated as negative numbers. And 
this shortened value is equal to this in decimal: 


-31072 


you are here ► 163 


www.it-ebooks.info 










cast a float 


Use casting to put floats into whole numbers 

What do you think this piece of code will display? 

int x = 7; 
int y = 2; 
float z = x / y; 
printf("z = %f\n", z); 

The answer? 3.0000. Why is that? Well, x and y are both integers, and if you 
divide integers you always get a rounded-off whole number—in this case, 3. 

What do you do if you want to perform calculations on whole numbers and 
you want to get floating-point results? You could store the whole numbers into 
float variables first, but that’s a little wordy Instead, you can use a cast to 
convert the numbers on the fly: 

int x = 7/ 
int y = 2; 

float z = (float) x / (float) y; 

printf("z = %f\n", z); 



The (float) will cast an integer value into a float value. The calculation 
will then work just as if you were using floating-point values the entire time. In 
fact, if the compiler sees you are adding, subtracting, multiplying, or dividing 
a floating-point value with a whole number, it will automatically cast the 
numbers for you. That means you can cut down the number of explicit casts 

in your code: . \\ 

The Compiler will automatically 

cast y *bo a -float- 


float z = (float)x / y 


You can put some other keywords before data types to change the way that the numbers are interpreted: 


unsigned 

The number will always be positive. Because it doesn't 
need to worry about recording negative numbers, 
unsigned numbers can store larger numbers 
since there's now one more bit to work with. So an 
unsigned int stores numbers from 0 to a maximum 
value that is about twice as large as the maximum 
number that can be stored inside an int. There's also 
a signed keyword, but you almost never see it, because 
all data types are signed by default. 


long 

That's right, you can prefix a data type with the word 
long and make it longer. So a long int is a longer 
version of an int, which means it can store a larger 
range of numbers. And a long long is longer than 
a long. You can also use long with floating-point lY 
numbers. J 

>> long double d; lor^ \oy\<$ is C°f) 
r* a*d CM only. 

A really REALL/ 

precise number. 



164 Chapter 4 


This viill pvobabty sW 


www.it-ebooks.info 













using multiple source files 



There’s a new program helping the waiters bus tables at the Head First Diner. The code 
automatically totals a bill and adds sales tax to each item. See if you can figure out what needs 
to go in each of the blanks. 

Note: there are several data types that could be used for this program, but which would you use 
for the kind of figures you’d expect? 


^include <stdio.h> 


total = 0.0; 

count = 0; 

tax percent = 6; 


{ 


add with tax(float f); 


.tax_rate = 1 + tax_percent / 10 0 

total = total + (f * tax_rate); 
count = count + 1; 
return total; 


} 


r 


int main() 

{ 

_ val ; 

printf("Price of item: "); 
while (scanf("%f", &val) == 1) { 

printf("Total so far: %.2f\n", add with_tax(val)); 

printf ("Price of item: "); formats a {loatmg-pomt 

} number -fco -two decimal places. 

printf ("\nFinal total: %.2f\n", total); 
printf("Number of items: %hi\n", count); 
return 0; ^ 

} 7obi is used *to -forma't sbov-ts- 


you are here ► 165 


www.it-ebooks.info 














split the check 


m. 


EmdSe 

lut\OH 



There’s a new program helping the waiters bus tables at the Head First Diner. The code 
automatically totals a bill and adds sales tax to each item. You were to figure out what needs to 
go in each of the blanks. 

Note: there are several data types that could be used for this program, but which would you use 
for the kind of figures you’d expect? 


Y^u need 

a small #include 


■floati ng-pomt 

number -to 
-total the dash. 



short 


<stdio.h> 


total = 0.0; Thev . e J be many items on 
count = 0; order, so we II choose a short 


an 


short 


tax percent 



-float 


add with tax(float f) ; 


Were returning a small dash value, so it’ll be a float- 


A -float Vi 11 { 
be -for -— 
this -fraction- 


^ float __tax rate = 1 + tax percent / 100 : 0 


total = total + (f * tax_rate); 
count = count + 1; 
return total; 


int main() 

{ tadh pride V,ll cast 


ly fit in a float 

r ' ' 

float va 1; 

printf("Price of item: "); 
while (scanf("if", &val) == 1) { 

printf("Total so far: %.2f\n", add with_tax(val)); 
printf("Price of item: "); 

} 

printf("\nFinal total: %.2f\n", total); 
printf("Number of items: %hi\n", count); 
return 0; 


By adding 0, you make the 
ealdulation work as a float- If 
you le-ft it as IOO, it would 
have returned a whole number- 

, f 

I + tax_percent / l OO; 
would return the value I 
because VlOO ==. O m 
integer arithmetic. 


166 Chapter 4 


www.it-ebooks.info 














using multiple source files 


- Raf a Type Sizes Tip Cl«se 

Data types are different sizes on different platforms. But how do you 
find out how big an int is, or how many bytes a double takes up? 

Fortunately, the G Standard Library has a couple of headers with the 
details. This program will tell you about the sizes of ints and floats: 

^include <stdio.h> . , , » 

^include <limits.h> ^-—TWis tonUms the values tor the mtejer ty?es 1,ke a " d C 3 

#include <f loat. h> This detail the values 4, floats a»d doubles. 




This is -the 
highest value- 


int main() 

{ 

printf("The value of INT_MAX is %i\n", INT MAX) ; 
printf("The value of INT_MIN is %i\n", INT^MIN); w 

r '"T*l • _ • 


printf("An int takes %z bytes\n", sizeof (int)) 


printf("The value of FLT_MAX is %f\n", FLT MAX) 
printf("The value of FLT_MIN is %.50f\n", FLT_MIN); 
printf("A float takes %z bytes\n", sizeof (float)); 


This is the 
lowest value- 


; / 

JN) : . 


return 0; 


T 

siz^o-f vc'tuvns -the number 

by-tes a data type oU^\ts. 


When you compile and run this code, you will see something like this: 


File Edit Window Help HowBiglsBig 


The value of INT_MAX is 2147483647 
The value of INT_MIN is -2147483648 
An int takes 4 bytes 

The value of FLT_MAX is 340282346638528859811704183484516925440.000000 
The value of FLT_MIN is 0.00000000000000000000000000000000000001175494350822 
A float takes 4 bytes 


The values you see on your particular machine will probably be different. 

What if you want to know the details for chars or doubles? Or 
longs? No problem. Just replace INT and FLT with CHAR (chars), DBL 
(doubles), SHRT (shorts), or LNG (longs). 


you are here ► 167 


www.it-ebooks.info 










no dumb questions 


O: Why are data types different on 
different operating systems? Wouldn’t it 
be less confusing to make them all the 
same? 


C uses different data types on 
different operating systems and processors 
because that allows it to make the most out 
of the hardware. 



In what way? 


When C was first created, most 
machines were 8-bit. Now, most machines 
are 32- or 64-bit. Because C doesn’t specify 
the exact size of its data types, it’s been 
able to adapt over time. And as newer 
machines are created, C will be able to 
make the most of them as well. 


there-,axe no 

Dumb Questions 


% 


mean? 


What do 8-bit and 64-bit actually 


Technically, the bit size of a computer 
can refer to several things, such as the size 
of its CPU instructions or the amount of 
data the CPU can read from memory. The 
bit size is really the favored size of numbers 
that the computer can deal with. 


% So what does that have to do with 
the size of ints and doubles? 


If a computer is optimized best to 
work with 32-bit numbers, it makes sense 
if the basic data type—the int— is set at 
32 bits. 


% I understand how whole numbers 
like ints work, but how are floats 
and doubles stored? How does the 
computer represent a number with a 
decimal point? 


It’s complicated. Most computers 
used a standard published by the IEEE 
(http://tinyurl. com/6defkv6 ). 


O: Do I really need to understand 
how floating-point numbers work? 


No. The vast majority of developers 
use floats and doubles without 
worrying about the details. 


Oh wo...if s the out-of-work actors... 



Some people were never really cut out to be 
programmers. It seems that some aspiring actors are 
filling in their time between roles and making a little 
extra cash by cutting code, and they’ve decided to 
spend some time freshening up the code in the bill- 
totalling program. 

By the time they rejiggered the code, the actors were 
much happier about the way everything looked.. .but 
there’s just a tiny problem. 


The code doesn’t compile anymore. 



168 Chapter 4 


www.it-ebooks.info 








using multiple source files 


let's see what's happened to the code 

This is what the actors did to the code. You can see they really just 
did a couple of things. 



The code has had some comments added, and they also changed 
the order of the functions. They made no other changes. 

So there really shouldn’t be a problem. The code should be good to 
go, right? Well, everything was great, right up until the point that 
they compiled the code... 


you are here ► 


169 


www.it-ebooks.info 




test drive 



If you open up the console and try to compile the program, this happens: 


i ll Filp FHit Window Hfiln Stir.kTnAr.tinn I I 


> gcc totaller.c -o totaller && ./totaller 
totaller.c: In function "main": 

totaller.c:14: warning: format "%.2f" expects type 
"double " f but argument 2 has type "int" 
totaller.c: At top level: 

totaller.c:23: error: conflicting types for "add_with_tax" 
totaller.c:14: error: previous implicit declaration of 
"add with tax" was here 


Bummer. 

That’s not good. What does error : conflicting types for 
' add_with_tax ' mean? What is a previous implicit declaration ? And why 
does it think the line that prints out the current total is now an int? Didn’t 
we design that to be floating point? 

The compiler will ignore the changes made to the comments, so that 
shouldn’t make any difference. That means the problem must be caused by 

changing the order of the functions. But if the order is the problem, 
why doesn’t the compiler just return a message saying something like: 



Seriously, why doesn’t the compiler give us a little help here? 

To understand exactly what’s happening here, you need to get inside the 
head of the compiler for a while and look at things from its point of view. 
You’ll see that what’s happening is that the compiler is actually trying to be 
a little too helpful. 


170 Chapter 4 


www.it-ebooks.info 











using multiple source files 


Compilers don't like surprises 


So what happens when the compiler sees this line of code? 





printf("Total so far: %.2f\n", add with tax(val)); 


The compiler sees a call to a function it doesn't recognize. 


Rather than complain about it, the compiler figures that it will find out more about the 
function later in the source file. The compiler simply remembers to look out for the function 
later on in the file. Unfortunately, this is where the problem lies... 



Hey, here's a call to a function I've 
never heard of. But I'll keep a note of it 
for now and find out more later. 



The compiler needs to know what data type the function will return. 

Of course, the compiler can’t know what the function will return just yet, so it makes an 
assumption. The compiler assumes it will return an int. 



When it reaches the code for the actual function, it returns a "conflicting 
types for l add_with_tax'" error. 

This is because the compiler thinks it has two functions with the same name. One function is 
the real one in the file. The other is the one that the compiler assumed would return an int. 


A function called add_wi+h_+ax() that 
returns a float??? But in my notes it says we've 
already got one of these returning an int... 


0 








The computer makes an assumption that the function returns an int, when in reality it 
returns a float. If you were designing the C language, how would you fix the problem? 


you are here ► 


171 


www.it-ebooks.info 

























correct order 


Hello? I really don't care 
how the C language solves the 
problem. Just put the functions in 

the correct freaking order! 


You could just put the functions back in the correct 
order and define the function before you call it in main(). 

Changing the order of the functions means that you can avoid the 
compiler ever making any dangerous assumptions about the return types 
of unknown functions. But if you force yourself to always define functions 
in a specific order, there are a couple of consequences. 

Fixing function order is a pain 

Say you’ve added a cool new function to your code that everyone 
thinks is fantastic: 

int do_whatever(){...} 

float do_something_fantastic(int awesome_level) {...} 

int do_stuff() { 

do_something_fantastic(11); 

} 



What happens if you then decide your program will be even better if you add 
a call to the do_something fantastic () function in the existing 
do_whatever () code? You will have to move the function earlier in 
the file. Most coders want to spend their time improving what their code 
can do. It would be better if you didn’t have to shuffle the order of the 
code just to keep the compiler happy. 

In some situations, there is no correct order 

OK, so this situation is kind of rare, but occasionally you might write some 
code that is mutually recursive: 


There is way - 
-to reorder “these 
•£ufi£‘tiov\s. 


float ping() { 




float pong() { 

• • • 

ping(); 

• • • 

} 



If you have two functions that call each other , then one of them will 
always be called in the file before it 5 s defined. 


For both of those reasons, it’s really useful to be able to define functions in 
whatever order is easiest at the time. But how? 


172 Chapter 4 


www.it-ebooks.info 













using multiple source files 


Split the declaration from the definition 


Remember how the compiler made a note to itself about the function 
it was expecting to find later in the file? You can avoid the compiler 
making assumptions by explicitly telling it what functions it 
should expect. When you tell the compiler about a function, it’s 
called a function declaration: 


The declaration -tells -the Compiler _Afj_ oa .£ 
what return value "to expert* 


f\ declaration has 

add with tax();v ,, . , 

— “ It just ends with 


rvo bod7 code- 
a i (semidolon). 


The declaration is just a function signature: a record of what the 
function will be called, what kind of parameters it will accept, and 

what type of data it will return. 

Once you’ve declared a function, the compiler won’t need to make any 
assumptions, so it won’t matter if you define the function after you call it. 

So if you have a whole bunch of functions in your code and you 
don’t want to worry about their order in the file, you can put a list of 
function declarations at the start of your G program code: 


float do something fantastic(); 
double awesomeness_2_dot_0(); 
int stinky_pete(); 
char make_maguerita(int count); 

But even better than that, G allows you to take that whole set of 
declarations out of your code and put them in a header file. You’ve 
already used header files to include code from the G Standard Library: 

^ This line will include the 
finclude <stdio.h>^“ contents o-f the header 

-file tailed stdioh. 

Let’s go see how you can create your own header files. 



you are here ► 173 


www.it-ebooks.info 





add a header 


Creating your first header file 

To create a header, you just need to do two things: 



Create a new file with a .h extension. 

If you are writing a program called totaller, then create a file called 
totaller.h and write your declarations inside it: 



You won’t need to include the main () function in the header file, 
because nothing else will need to call it. 


totaller.h 



Include your header file in your main program. 

At the top of your program, you should add an extra include line: 


Add this ihdlude -fco 
other include lines. 



When you write the name of the header file, make sure you 
surround it with double quotes rather than angle brackets. Why 
the difference? When the compiler sees an include line with 
angle brackets, it assumes it will find the header file somewhere 
off in the directories where the library code lives. But your 
header file is in the same directory as your . c file. By wrapping 
the header filename in quotes, you are telling the compiler to 
look for a local file. 


totaller.c 


/__ Lodal headev* -files ea* also include 

direfrfcory names, but you will normally put 
them in the same directory as the C tile- 


When the compiler reads the #include in the code, it will read 
the contents of the header file, just as if it had been typed into 
the code. 

Separating the declarations into a separate header file keeps 
your main code a little shorter, and it has another big advantage 
that you’ll find out about in a few pages. 

For now, let’s see if the header file fixed the mess. 


^include is a 
preprocessor 
instruction. 


174 Chapter 4 


www.it-ebooks.info 











using multiple source files 



Now when you compile the code, this happens: 


\4o evrov 
•this 


| File Edit Window Help UseFleaders 

i 

> gcc totaller.c -o totaller 







The compiler reads the function declarations from the 
header file, which means it doesn’t have to make any guesses 
about the return type of the function. The order of the 
functions doesn’t matter. 

Just to check that everything is OK, you can run the 
generated program to see if it works the same as before. 


File Edit Window Help UseHeaders 


> ./totaller 
Price of item: 1.23 
Total so far: 1.30 
Price of item: 4.57 
Total so far: 6.15 
Price of item: 11.92 
Total so far: 18.78 
Price of item: A D 
Final total: 18.78 
Number of items: 3 



Pv-ess Ctvl-P here to stop the 
pvoy-arn tv-orn asking tov move pvides. 


you are here ► 


175 


www.it-ebooks.info 








be the compiler 



BE flie ConiPiJev 

Look at tke program below. Part of tke 
program is missing. Your job is to play 
like you’re the compiler and say wkat 

you would do if each of tke 
candidate code fragments 
on tke right were slotted 
into the missing space. 


Candidate fcode $°es 



176 Chapter 4 


heve- 


www.it-ebooks.info 







using multiple source files 


Hcvc are “the Code -(■ra^rneh'bs. 




float mercury day_in_earth days(); 
int hours_in_an_earth day(); 

int main() 

{ 

float length of day = mercury day_in_earth days(); 
int hours = hours_in_an_earth day(); 
float day = length of day * hours; 


/ 


□ 

□ 

□ 



□ 

□ 

□ 



□ 

□ 

□ 


Mark -the Wes -that 
you -tb'mk are dorredt 

You can compile the code. 

You should display a warning. 

The program will work. 


You can compile the code. 
You should display a warning. 
The program will work. 


You can compile the code. 
You should display a warning. 
The program will work. 



□ 

□ 

□ 


You can compile the code. 
You should display a warning. 
The program will work. 


you are here ► 177 


www.it-ebooks.info 










be the compiler solution 



BE fE e §©Iuf|©n 

Look at tke pr ogrambelow. Part of tke 
program is missing. Your job was to play 
like you’re the compiler and say wkat 

you would do if each of tke 
candidate code fragments 
on tke right were slotted 
into the missing space. 



^include <stdio.h> 


printf("A day on Mercury is %f hours\n", day); 
return 0; 

} 

float mercury day in_earth days() 

{ 

return 58.65; 

} 

int hours_in_an_earth day() 

{ 

return 24; 

} 


178 Chapter 4 


www.it-ebooks.info 







using multiple source files 


float mercury day in_earth days() ; 
int hours_in_an_earth day(); 

int main () 

{ 

float length of day = mercury day_in_earth days() 
int hours = hours_in_an_earth day(); 
float day = length of day * hours; 


float mercury day_in_earth days(); 

int main() 

{ 

float length of day = mercury day_in_earth days() 
int hours = hours_in_an_earth day(); 
float day = length of day * hours; 


d 


You can compile the code. 


□ You should display a warning. 


The program will work. 


d 


There vi.ll be a warw** beause you haye*> t 
declared the houvs>_a*_cavth Aaf 

^ before tailingThe st ' M 

^ ^ov-k because it Will ye* tbe WW 

returns an int- 


d 

d 


You can compile the code. 


You should display a warning. 


The program will work. 


The program won't Corbie, because you've callina 
a +loat function without declaring it -first 

float length of day = mercury day in earth days(); 


int main() 

{ 


int hours = hours_in_an_earth day(); 
float day = length of day * hours; 


float mercury day in_earth days(); 
int hours in an earth day(); 


| | You can compile the code. 


d 


You should display a warning. 


| | The program will work. 

The program will Compile without 
warnings; but it won t work 
because there will be a rounding 
problem. 


d 


You can compile the code. 


The length_of_day variable should be a -float- I Q You should display a warning. 


| | The program will work. 


int main() 

{ 

int length of day = mercury_day_in_earth days(); 
int hours = hours_in_an_earth day(); 
float day = length of day * hours; 


you are here ► 


179 


www.it-ebooks.info 










no dumb questions 


O: So I don’t need to have 
declarations for int functions? 


Not necessarily, unless you are 
sharing code. You’ll see more about this 
soon. 


I’m confused. You talk about the 
compiler preprocessing ? Why does the 
compiler do that? 

Strictly speaking, the compiler just 
does the compilation step: it converts the C 
source code into assembly code. But in a 
looser sense, all of the stages that convert 
the C source code into the final executable 
are normally called compilation, and the 
gcc tool allows you to control those 
stages. The gcc tool does preprocessing 
and compilation. 


there j are no 

Dumb Questions 



What is the preprocessor? 


Preprocessing is the first stage in 
converting the raw C source code into a 
working executable. Preprocessing creates 
a modified version of the source just before 
the proper compilation begins. In your code, 
the preprocessing step read the contents of 
the header file into the main file. 


% Does the preprocessor create an 
actual file? 


No, compilers normally just use pipes 
for sending the stuff through the phases of 
the compiler to make things more efficient. 


% Why do some headers have 
quotes and others have angle brackets? 


Strictly speaking, it depends on the 
way your compiler works. Usually quotes 
mean to simply look for a file using a 
relative path. So if you just include the 
name of a file, without including a directory 
name, the compiler will look in the current 
directory. If angle brackets are used, it 
will search for the file along a path of 
directories. 


O: What directories will the compiler 
search when it is looking for header 
files? 


The gcc compiler knows where the 
standard headers are stored. On a Unix- 
style operating system, the header files are 
normally in places like /usr/local/include, 
iusr/include, and a few others. 


O: So that’s how it works for 
standard headers like stdio.h ? 


Yes. You can read through the 
stdio.h file on a Unix-style machine in 
/usr/include/stdio.h. If you have the MinGW 
compiler on Windows, it will probably be in 
C:\MinGW\include\stdio.h. 



Can I create my own libraries? 


Yes; you’ll learn how to do that later 
in the book. 


180 Chapter 4 


www.it-ebooks.info 




using multiple source files 



BULLET POINTS 


■ If the compiler finds a call to a 
function it hasn’t heard of, it will 
assume the function returns an int. 

■ So if you try to call a function before 
you define it, there can be problems. 

■ Function declarations tell the 
compiler what your functions will look 
like before you define them. 

■ If function declarations appear at the 
top of your source code, the compiler 
won’t get confused about return 
types. 


Function declarations are often put 
into header files. 

You can tell the compiler to read 
the contents of a header file using 

^include. 

The compiler will treat included 
code the same as code that is typed 
into the source file. 



C is a very small language. Here is the entire set 
of reserved words (in no useful order). 

Every C program you ever see will break into just 
these words and a few symbols. If you use these 
for names, the compiler will be very, very upset. 


Reserved... 


auto 

if 

break 

int 

case 

long 

char 

register 

continue 

return 

default 

short 

do 

sizeof 

double 

static 

else 

struct 

entry 

switch 

extern 

typedef 

float 

union 

for 

unsigned 

goto 

while 

enum 

void 

const 

signed 

volatile 


you are here ► 


181 


www.it-ebooks.info 























code sharing 

If you have common features... 

Chances are, when you begin to write several programs in C, you will 
find that there are some functions and features that you will want to 
reuse from other programs. For example, look at the specs of the two 
programs on the right. 

XOR encryption is a very simple way of disguising a piece of text by 
XOR-ing each character with some value. It’s not very secure, but it’s 
very easy to do. And the same code that can encrypt text can also be 
used to decrypt it. Here’s the code to encrypt some text: 


_3v ° id encrypt(char * messa 9 e > 

{ Pass a pom-lev- -to a* 

char c; arvay mt» WW 

Loop Fbv-ou^b “the 
avvay and update eadb 
dhavactev with an 
endvyp-ted vevsion. 


^ilejni der 

i^ead -the conFenFs 
o£ 0 -£ile and creaFe 
an encry pFed version 
usin 3 y0Q - encryption. 


char c; av 

while (*message) { 
*message = *message 
message++; 



} 


} 


This means 
you I! )(0R eaeh 
dha\radte\r with 
the number 3/. 

Poin^ 


meiS 30,®> Aer 

Vom ^Aar A 

yO<2. encr'Jjp^' 


s 


Vne 


on. 


os\no^ 


ath with a 

dhav-adter? You dan bedause 
dhar is a numerid data type 


...if $ good to share code 


Clearly, both of those programs are going to need to use 
the same encrypt () function. So you could just copy 
the code from one program to the other, right? That’s not 
so bad if there’s just a small amount of code to copy, but 
what if there’s a really large amount of code? Or what if 
the way the encrypt () function works needs to change 
in the future? If there are two copies of the encrypt () 
function, you will have to change it in more than one 
place. 

For your code to scale properly, you really need to find 
some way to reuse common pieces of code—some way 
of taking a set of functions and making them available in 
a bunch of different programs. 


How would you do that? 



VAkN 


Imagine you have a set of 
functions that you want to 
share between programs. 

If you had created the C 
programming language, how 
would you allow code to be 
shared? 


182 Chapter 4 


www.it-ebooks.info 








using multiple source files 


You can split the code into separate files 

If you have a set of code that you want to share among several files, it 
makes a lot of sense to put that shared code into a separate . c file. If the 
compiler can somehow include the shared code when it’s compiling the 
program, you can use the same code in multiple applications at once. So 
if you ever need to change the shared code, you only have to do it in one 
place. 


This is “the 
shaved Code- 


Read a file, 
rewrite a file. 


Encrypt ] ^ead Standard 
text J Input, display text. 


0 


/N 


o 




The Compiler will Compile the 
shaved Code into each pvogvam. 


You need to find a way 
telling the Compilev to 
cveate the pvocyram fi-om 
L l+iplr sowv-te tiles. 



IOOI 
lllOlOi 
OOIOI 

loion 

message_hider 




If you want to use a separate .c file for the shared code, that gives 
us a problem. So far, you have only created programs from single .c 
source files. So if you had a G program called blitz_hack, you 
would have created it from a single source code file called blitz_hack.c. 

But now you want some way to give the compiler a set of source 
code files and say, “Go make a program from those.” How do 
you do that? What syntax do you use with the gcc compiler? And 
more importantly, what does it mean for a compiler to create a single 
executable program from several files? How would it work? How 
would it stitch them together? 


To understand how the C compiler can create a 
single program from multiple files, let’s take a 
look at how compilation works... 


you are here ► 


183 


www.it-ebooks.info 





how compilation works 


Compilation behind the scenes 

To understand how a compiler can compile several source files 
into a single program, you’ll need to pull back the curtain and 
see how compilation really works. 

o 


Hmmmm...so I need to 
compile the source f iles 
into a program? Let's see 
what I can cook up... 


O 


Preprocessing: fix the source. 

The first thing the compiler needs to do is fix the source. It needs to add in 
any extra header files it’s been told about using the #include directive. 

r lt might also need to expand or skip over some sections of the program. 
Once it’s done, the source code will be ready for the actual compilation. 

li £3* do -this y/i-fch 

t°7Tr % t ke 

f hd f 1 &ef. You'll see 

r?* 0 , use toe* 

•n rhe book. 



© Compilation: translate into assembly. 

The G programming language probably seems pretty low level, but 
the truth is it’s not low level enough for the computer to understand. The 
computer only really understands very low-level machine code 
instructions, and the first step to generate machine code is to convert 
the G source code into assembly language symbols like this: 


movq -2 4 (%rbp), 


%rax 


movzbl(%rax), 


%eax 


"directive » s 
just 3 
word -for 
W domw\3ir\d- 



movl %eax, %edx 

Looks pretty obscure? Assembly language describes the individual 
instructions the central processor will have to follow when running the 
program. The G compiler has a whole set of recipes for each of the 
different parts of the G language. These recipes will tell the compiler how 
to convert an i f statement or a function call into a sequence of assembly 
language instructions. But even assembly isn’t low level enough for the 
computer. That’s why it needs... 



184 Chapter 4 


www.it-ebooks.info 









using multiple source files 



Assembly: generate the object code. 

The compiler will need to assemble the symbol codes into machine or 
object code. This is the actual binary code that will be executed by 
the circuits inside the GPU. 


This is 3 really 

dirty joke in 10010101 00100101 11010101 01011100 

•machine Code■ 


So are you all done? After all, you’ve taken the original G source code 
and converted it into the Is and 0s that the computer’s circuits need. 
But no, there’s still one more step. If you give the computer several files 
to compile for a program, the compiler will generate a piece of object 
code for each source file. But in order for these separate object files to 
form a single executable program, one more thing has to occur... 




Linking: put it all together. 

Once you have all of the separate pieces of object code, you need to 
fit them together like jigsaw pieces to form the executable program. 
The compiler will connect the code in one piece of object code that 
calls a function in another piece of object code. Linking will also make 
sure that the program is able to call library code properly. Finally, the 
program will be written out into the executable program file using 
a format that is supported by the operating system. The file format 
is important, because it will allow the operating system to load the 
program into memory and make it run. 



So how do you actually tell gcc that we want to make 
one executable program from several separate source 
files? 


you are here ► 185 


www.it-ebooks.info 





















sharing variables 


The shared code needs its own header file 


If you are going to share the encrypt.c code between 
programs, you need some way to tell those programs 
about the encrypt code. You do that with a header file. 


You II ihdlude the headev* 
inside 


void encrypt(char ^message); 




#include "encrypt.h" 

void encrypt(char ^message) 


encrypt.h 


Include encrypt.h in your program 

You’re not using a header file here to be able to reorder the 
functions. You’re using it to tell other programs about 
the encrypt () function: 


char c; 

while (^message) { 

^message = ^message A 
message++; 


31; 



encryptc 


ffinclude <stdio.h> 

#include "encrypt.h" 


int main() 

{ 

char msg[80]; 
while (fgets(msg, 80, 
encrypt(msg); 
printf("%s", msg); 



You’ll MWe '"“••Jf U “ V 

w. th. 

of the C*tx yfto WW 


stdin)) { 


} 


} 




messagejiider.c 

Having encrypt.h inside the main program will mean the compiler 
will know enough about the encrypt () function to compile the 
code. At the linking stage, the compiler will be able to connect 
the call to encrypt (msg) in messagejiider.c to the actual 
encrypt () function in encrypt.h. 


the 


encrypt {) iuncuon m encrypi.n. 

Finally, to compile everything together you just need to pass 
source files to gcc: 

gcc message_hider.c encrypt.c -o message_hider 


You've seen how to share functions 
between different files. But what if 
you want to share variables? Source 
code files normally contain their 
own separate variables to prevent a 
variable in one file affecting a variable 
in another file with the same name. 
But if you genuinely want to share 
variables, you should declare them in 
your header file and prefix them with 
the keyword extern: 

extern int passcode; 


186 Chapter 4 


www.it-ebooks.info 
















using multiple source files 



Let’s see what happens when you compile the message_hider 
program: 


Wher. you v-uh ihe pvogra»«, r™®"™ Wind ° w He ' P s """ 
you tan eh-fcev- ic*l and 
see ihe entiled vevsioh. 

^01* tan even pass i-t ihe 
tonienis ot ihe entv-ypi-h 
•file io entvypi 'i- 




You need io dompile ihe dode 
u/iih boih souvde tiles. 



> gcc message_hider.c encrypt.c 

> ./message_hider 

I am a secret message 
V?~r?~?lz|mzk?rzll~xz 

> ./message_hider < encrypt.h 
ipv{?zq|mfok7|w~m5?rzll~xz6$ 

> 


“O message hider 


The message_hidev pv-ogv-a* is using ihe 
endv-ypiO -fundiion -irnorn endnypi.d. 


The program works. Now that you have the encrypt () 
function in a separate file, you can use it in any program 
you like. If you ever change the encrypt () function to be 
something a little more secure, you will need to amend only 
the encrypt.c file. 



BULLET POINTS 


■ You can share code by putting it into 
a separate C file. 

■ You need to put the function 
declarations in a separate .h header 
file. 

■ Include the header file in every C file 
that needs to use the shared code. 

■ List all of the C files needed in the 
compiler command. 



G® Of? piste — 

Write your own program 
using the encrypt () 

function. Remember, 
you can call the same 
function to decrypt text. 



you are here ► 187 


www.it-ebooks.info 















recompiling files 



Man! Every time I make a 
simple change in one file, it 
takes an age to recompile! And 
I'm working on a schedule... 


188 Chapter 4 




using multiple source files 


It's wot rocket $ciewce...or is it? 


Breaking your program out into separate source files not only means 
that you can share code between different programs, but it also means you 
can start to create really large programs. Why? Well, because you can start 
to break your program down into smaller self-contained pieces of 
code. Rather than being forced to have one huge source file, you can have 
lots of simpler files that are easier to understand, maintain, and test. 

So on the plus side, you can start to create really large programs. The 
downside? The downside is.. .you can start to create really large 
programs. G compilers are really efficient pieces of software. They take 
your software through some very complex transformations. They can 
modify your source, link hundreds of files together without blowing 
your memory, and even optimize the code you wrote, along the way. 
And even though they do all that, they still manage to run quickly. 

But if you create programs that use more than a few files, the time it 
takes to compile the code starts to become important. Let’s say it takes 
a minute to compile a large project. That might not sound like a lot of 
time, but it’s more than long enough to break your train of thought. If 
you try out a change in a single line of code, you want to see the result 
of that change as quickly as possible. If you have to wait a full minute 
to see the result of every change, that will really start to slow you down. 




you are here ► 


Compiler 


[tool 

llllOlOl 
loot Oil 
l ioioljj 

launch 


If you change even one line in one tile, 
it can -take the Compiler a long time 
to recompile all the source tiles 

V 


m °dul e . c 




Think carefully. Even a simple change might mean running a large, slow compile to 
see the result. Given what you know about the compilation process, how could you 
speed up the time to recompile the program? 


189 


www.it-ebooks.info 












save copies 


Pow't recompile every file 


If you’ve just made a change to one or two of your source code files, it’s 

a waste to recompile every source file for your program. Think what 

happens when you issue a command like this: ^ Skipping a -few 

v 

gcc reaction control.c pitch motor.c ... engine.c 


-filenames here. 


-o launch 


What will the compiler do? It will run the preprocessor, compiler, and 
assembler for each source code file. Even the ones that haven’t changed. And 
if the source code hasn’t changed, the object code that’s generated for 
that file won’t change either. So if the compiler is generating the object 
code for every file, every time, what do you need to do? 

Save copies of the compiled code 

If you tell the compiler to save the object code it generates into a file, it 
shouldn’t need to recreate it unless the source code changes. If a file does 
change, you can recreate the object code for that one file and then pass 
the whole set of object files to the compiler so they can be linked. 


I-P this sourde 
-Pile dhahjjes, 
its the Ohly 
ohe you heed 
to redom pile. 




c 





Object 
code file 




Object 
code file 



Object 
code file 


Executable 

/ou will still need to run the linker, but 
*«ost or the -files will still be the sa*«e. 


The dompiler will update 
the objedt dode that's 
stored i* a -file* 


If you change a single file, you will have to recreate the object code file 
from it, but you world need to create the object code for any other file. 
Then you can pass all the object code files to the linker and create a new 
version of the program. 


So how do you tell gcc to save the object code in a 
file? And how do you then get the compiler to link the 
object files together? 

190 Chapter 4 


www.it-ebooks.info 
































using multiple source files 


First compile the source into object files 


You want object code for each of the source files, and you can 
do that by typing this command: 

operating system will replace 
• c ^ •*.£ with all tV>e C -filenames. 


This Will create object-^ gcc _ c 
Loot -ro\r every tile. 


gcc -c will compile the 
code hut won’t link it. 



The * . c will match every G file in the current directory, 
and the - c will tell the compiler that you want to create an 
object file for each source file, but you don’t want to link them 
together into a full executable program. 

then, link them together 

Now that you have a set of object files, you can link them 
together with a simple compile command. But instead of 
giving the compiler the names of the G source files, you tell it 
the names of the object files: 

I— Instead of C source -files, list 
This is similar to t g CC * 0 _ Q launch the object -files. 

domfile Commands ^ 

youve used be-fore- This will matdh all the object -files in the directory. 

The compiler is smart enough to recognize the files as 
object files, rather than source files, so it will skip most of 
the compilation steps and just link them together into an 
executable program called launch. 

OK, so now you have a compiled program, just like before. 

But you also have a set of object files that are ready to be 
linked together if you need them again. So if you change just 
one of the files, you’ll only need to recompile that single file 
and then relink the program: 

This is the only file*"'* gcc -c thruster - c TW,S ' wl11 v ' et ' rea ^ e ^ ‘ tV " rwste ' r 0 ^ 
that's changed. gcc * . o -o launch This will link everything together. 



Source f iles 


rrniL 


gcc -c 




Object f il 

\L 


es 



Even though you have to type two commands, you’re saving a 
lot of time: 


gcc “0 


Compile -time: 
unK -time 1 



fee^ore 

a mins 30 secs 
to secs 



Before, you were Compiling every f,| e . Tlie is faster. 


Now, youVe 
fcompilm^ only “the 
tban^ed -file- 

Tbe link time is 
still ^ seconds. 



£%efcutable 


you are here ► 


191 


www.it-ebooks.info 















file update 




Here is some of the code that’s used to control the engine management system on the craft. 
There’s a timestamp on each file. Which files do you think need to be recreated to make the 
ems executable up to date? Circle the files you think need to be updated. 



thruster.c 

11:43 



turbo.c 

12:15 



graticule.c 

14:52 



servo.c 

13:47 



thruster.o 

11:48 


1001 
IllOlOi 
66101 
loiom 

turbo.o 

12:22 



graticule.o 

14:25 



1661 
III 616 
66161 
1616111 


servo.o 

13:46 



ems 

14:26 


192 Chapter 4 


www.it-ebooks.info 





























using multiple source files 


And in the galley, they need to check that their code's up to date as well. Look at the times against the files. Which of 
these files need to be updated? 



microwave.c 

15:42 



popcorn.c 
17:05 



juicer.c 

16:41 


100 1 
IIIOIOi 
OOIOI 
IOIOIII 


microwave.o 

18:02 


1001 
IIIOIOi 
OOIOI 

loioin 

popcorn.o 
17:07 


1001 
IIIOIOi 
OOIOI 
IOIOIII 

galley 

17:09 


1001 
IIIOIOi 
OOIOI 
IOIOIII 

juicer.o 

16:43 


you are here ► 


193 


www.it-ebooks.info 






















files updated 




yiiOrt 


Here is some of the code that’s used to control the engine management system on the craft. 
There’s a timestamp on each file. You were to circle the files you think need to be recreated to 
make the ems executable up to date. 



thruster.c 

11:43 



turbo.c 

12:15 



graticule.c 

14:52 



servo.c 

13:47 


t^ratiCule-o needs “to be 
recompiled, because its 
older than tbe latest- 
version o£ its source- 


1001 
IllOlOi 
OOIOI 

loioij 

thruster.o 

11:48 


IOOI 
IllOlOi 
OOIOI 

loiom 

turbo.o 

12:22 



servo-o needs to be 
recompiled, because its 
older than its source- 




»d *7'“ 

tbe ems executable as well- 


194 Chapter 4 


www.it-ebooks.info 


































using multiple source files 


And in the galley, they need to check that their code’s up to date as well. Look at the times against the files. Which of 
these files need to be updated? 



microwave.c 

15:42 



popcorn.c 

17:05 



juicer.c 

16:41 


1001 
IllOlOi 
OOIOI 

loiom 

microwave.o 


r 

fs/one o f "the ^ ° f'^ es 

needs -to be recompiled- 

They are all newer 
■than -their source files- 


18:02 


1001 
IIIOIOi 
OOIOI 

loiom 

popcorn.o 
17:07 


IOOI 
IliOlOt 
OOIOI 
1010111 

juicer.o 

16:43 



The galley executable weeds k> 
be relinked, because it's older 
"thaw the microwave-o file- 


you are here ► 


195 


www.it-ebooks.info 
























need automation 


It's hard to keep track of the files 



I thought the whole point of saving time 
was so I didn't have to get distracted. 
Now the compile is faster, but I have to 
think a lot harder about how to compile 
my code. Where's the sense in that? 


It’s true: partial compiles are faster, but you 
have to think more carefully to make sure 
you recompile everything you need. 

If you are working on just one source file, things will be 
pretty simple. But if you’ve changed a few files, it’s pretty 
easy to forget to recompile some of them. That means the 
newly compiled program won’t pick up all the changes 
you made. Now, of course, when you come to ship the 
final program, you can always make sure you can do a full 
recompile of every file, but you don’t want to do that while 
you’re still developing the code. 

Even though it’s a fairly mechanical process to look for 
files that need to be compiled, if you do it manually, it will 
be pretty easy to miss some changes. 

Is there something we can use to automate the process? 


196 Chapter 4 


www.it-ebooks.info 


using multiple source files 



Wouldn't it be dreamy if there were 
a tool that could automatically recompile 
just the source that's changed? But I 
know it's just a fantasy... 


you are here ► 197 


www.it-ebooks.info 










make it automatic 


Automate your builds with the make tool 


You can compile your applications really quickly in gcc, as long as 
you keep track of which files have changed. That’s a tricky thing to 
do, but it’s also pretty straightforward to automate. Imagine you have 
a file that is generated from some other file. Let’s say it’s an object 
file that is compiled from a source file: 


l*f the thvus'tcv'.d 

•file is ftewev, you ^ thruster. c 
meed b> vedompile. 


>thruster.o 



How do you tell if the thruster.o file needs to be recompiled? You just 
look at the timestamps of the two files. If the thruster.o file is older 
than the thruster.c file, then the thruster.o file needs to be recreated. 
Otherwise, it’s up to date. 


|-f -the 'thv-us'bev- o 
-file is newer, you 
don *t need bo 
refcoimyile- 



new best -friend- 


That’s a pretty simple rule. And if you have a simple rule for 
something, then don’t think about it— automate it... 


make is a tool that can run the compile command for you. The 
make tool will check the timestamps of the source files and the 
generated files, and then it will only recompile the files if things have 
gotten out of date. 


But before you can do all these things, you need to tell make about 
your source code. It needs to know the details of which files depend 
on which files. And it also needs to be told exactly how you want to 
build the code. 


What does make need to know? 

Every file that make compiles is called a target. Strictly speaking, 
make isn’t limited to compiling files. A target is any file that is 
generated from some other files. So a target might be a zip archive 
that is generated from the set of files that need to be compressed. 

For every target, make needs to be told two things : 


o 

o 


The dependencies. 

Which files the target is going to be generated from. 

The recipe. 


The set of instructions it needs to run to generate the file. 

Together, the dependencies and the recipe form a rule. A rule tells 
make all it needs to know to create the target file. 




198 Chapter 4 


www.it-ebooks.info 










using multiple source files 


How make works 

Let’s say you want to compile thruster.c into some object code in 
thruster.o. What are the dependencies and what’s the recipe? 

thruster. c -^ thruster. o 

The thruster.o file is called the target , because it’s the file you 
want to generate, thruster.c is a dependency, because it’s a file the 
compiler will need in order to create thruster.o. And what will the 
recipe be? That’s the compile command to convert thruster.c into 
thruster.o. 

, This is *thc rule -for 
gec -c thruster.c Wter-o- 

Make sense? If you tell the make tool about the dependencies 
and the recipe, you can leave it to make to decide when it needs 
to recompile thruster.o. 

But you can go further than that. Once you build the thruster.o 
file, you’re going to use it to create the launch program. That 
means the launch file can also be set up as a target, because it’s 
a file you want to generate. The dependency files for launch are 
all of the .0 object files. The recipe is this command: 


Watch it! 


The make tool 
may have a 
different name 
on Windows. 


Because make 
came from the Unix world, 
there are different flavors of it 
available in Windows. MinGW 
includes a version of make 
called mingw32-make and 
Microsoft produce their own 
version called nmake. 


gcc *.o -o launch 

Once make has been given the details of all of the dependencies 
and rules, all you have to do is tell it to create the launch file, 
make will work out the details. 



launch.o thruster.o 



launch.c launch.h thruster.h thruster.c 


But how do you tell make about the 
dependencies and recipes? Let’s find out. 


www.it-ebooks.info 


So I've got to compile the 
launch program? Hmm... 
First I'll need to recompile 
thruster.o, because it's out 
of date; then I just need 
to relink launch. 



199 


















make a makefile 


Tell make about your code with a makefile 

All of the details about the targets, dependencies, and 
recipes need to be stored in a file called either makefile or 
Makefile. To see how it works, imagine you have a pair of 
source files that together create the launch program: 


The launch 
^ke launch. 


P^a* is made from 
° a*id thruster.o fj| es . 



launth.o is Compiled from WnCht and 
laundh.h, and ALSO thruster.h. 



launch.c 


launch 



thruster.o is dompiled -from 
thruster.h and thruster d. 



launch.o 


launch.h 


thruster.o 



I 


thruster.h 


thruster.c 



The launch program is made by linking the launch.o and 
thruster.o files. Those files are compiled from their matching 
G and header files, but the launch.o file also depends on the 
thruster.h file because it contains code that will need to call a 
function in the thruster code. 


This is how you’d describe that build in a makefile: 


This is a -target 



^ -target is a “file -that is 

going to he generated- 


launch.o: launch.c launch.h thruster.h 
T gcc -c launch.c 

-T-. / launch.o depends on these 

If / three tiles, 

ree RULBS.-^, thruster.o: thruster.h thruster.c 

"'This is a recipe tor 
dreating thruster.o- 



gcc -c thruster.c ^7 


launch: launch.o thruster.o 


gcc launch.o thruster.o -o launch 
200 iter 4 redipes MUST begin with a tab dharadter. 


Watch it! 


All of the 
recipe lines 
MUST begin 
with a tab 
character. 


If you just try to indent the 
recipe lines with spaces, the 
build won’t work. 


www.it-ebooks.info 

















using multiple source files 



Save your make rules into a text file called Makefile in the same 
directory; then, open up a console and type the following: 


are iclliha m^ke in I File Edit Window Help MakeltSo 

Oeate the Wh file. ^ 

make -first needs to ideate 
a launth-o with this line- 



> make launch 
gcc -c launch.c 
gcc -c thruster.c 
gcc launch.o thruster.o 


-o launch 


make -then needs -to dreaie 
•thrus-tero wi-tl-t -this line. 

Finally, make links -the object -files 
-to Create tbe launch program. 


You can see that make was able to work out the sequence of 
commands required to create the launch program. But what 
happens if you make a change to the thruster, c file and then run 
make again? 


make no longer needs 
■to Compile laun£h.£. 

lawndh o is already up to date- -'7' 


File Edit Window Help MakeltSo 


> make launch 
gcc -c thruster.c 

gcc launch.o thruster.o -o launch 


make is able to skip creating a new version of launch.o. Instead, it 
just compiles thruster.o and then relinks the program. 


you are here ► 201 


www.it-ebooks.info 









no dumb questions 


tfiereiUre n o 

Dumb Questions 



Is make just like ant? 


It’s probably better to say that build tools like ant and 
rake are like make, make was one of the earliest tools used to 
automatically build programs from source code. 


Q- This seems like a lot of work just to compile source 
code. Is it really that useful? 


Yes, make is amazingly useful. For small projects, make 
might not appear to save you that much time, but once you have 
more than a handful of files, compiling and linking code together 
can become very painful. 


% If I write a makefile for a Windows machine, will it work 
on a Mac? Or a Linux machine? 


Because makefiles calls commands in the underlying 
operating system, sometimes makefiles don’t work on different 
operating systems. 



Can I use make for things other than compiling code? 


Yes. make is most commonly used to compile code. But it 
can also be used as a command-line installer, or a source control 
tool. In fact, you can use make for almost any task that you can 
perform on the command line. 



Why indent with tabs? 


It’s easy to indent recipes with 
spaces instead of tabs. So why 
does make insist on using tabs? 
This is a quote from make's 
creator, Stuart Feldman: 

“Why the tab in column 1? ... It 
worked, it stayed. And then a 
few weeks later I had a user 
population of about a dozen, 
most of them friends, and I 
didn’t want to screw up my 
embedded base. The rest, sadly, 
is history. ” 



make takes away a lot of the pain of compiling files. 
But if you find that even it is not automatic enough, 
take a look at a tool called autoconf: 


h ttp://www.gn u. org/software/outoconf/ 


autoconf is used to generate makefiles. C 
programmers often create tools to automate the 
creation of software. An increasing number of them 
are available on the GNU website. 


202 Chapter 4 


www.it-ebooks.info 








using multiple source files 



Make Magnets 

Hey, baby, if you don't groove to the latest tunes, then you'll love the program the 
guys in the Head First Lounge just wrote! oggswing is a program that reads an Ogg 
Vorbis music file and creates a swing version. Sweet! See if you can complete the 
makefile that compiles oggswing and then uses it to convert a .ogg file: 


This £onve\rts 
whi-fcennev-dy.ogg 
■fco swing.ogg. 

oggswing: 


swing.ogg: 




fSPACES] 


[SPACES] 




you are here ► 


203 


www.it-ebooks.info 






















make magnets solution 



Make Magnets Solution 

Hey, baby, if you don't groove to the latest tunes, then you'll love the program the 
guys in the Head First Lounge just wrote! oggswing is a program that reads an 
Ogg Vorbis music file and creates a swing version. Sweet! You were to complete the 
makefile that compiles oggswing and then uses it to convert a .ogg file: 


oggswing: 




gcc oggswing.c -o oggswing 


swing.ogg: 


[TAB] 






The make tool can do far, far more than we have space to 
discuss here. To find out more about make and what it can do 
for you, visit the GNU Make Manual at: 

h ttp://tinyurl. com/yczmjx 


204 Chapter 4 


www.it-ebooks.info 







































BULLET POINTS 


■ It can take a long time to 
compile a large number of 
files. 


■ You can speed up 

compilation time by storing 
object code in *.o files. 


make knows about the 
dependencies between files, 
so it can compile just the files 
that change. 

make needs to be told about 
your build with a makefile. 


■ The gcc can compile 
programs from object files as 
well as source files. 

■ The make tool can be used 
to automate your builds. 


■ Be careful formatting your 
makefile: don’t forget to 
indent lines with tabs instead 
of spaces. 


you are here ► 


205 


www.it-ebooks.info 










c toolbox 



Your C Toolbox 


You’ve got Chapter 4 under 


| ' your belt, and now you’ve 

added data types and header 
files to your toolbox. For a complete 
list of tooltips in the book, see 
Appendix ii. 


SVC Use Innnt 







^’mfclude 
wW *fov lo£al 
beadev-s. 


Save object 

£ode iirfco 

•P'lcs -to speed 
U P youir builds. 


^indude <> W 
-for library 
beadev-s. 


Us t 
\)u'\d s * 


206 Chapter 4 


www.it-ebooks.info 









Arduino 

This lab gives you a spec that describes a program 
for you to build, using the knowledge you’ve gained 
over the last few chapters. 

This project is bigger than the ones you’ve seen so far. 
So read the whole thing before you get started, and 
give yourself a little time. And don’t worry if you get 
stuck. There are no new C concepts in here, so you 
can move on in the book and come back to the lab 
later. 

We’ve filled in a few design details for you, and we’ve 
made sure you’ve got all the pieces you need to write 
the code. You can even build the physical device. 

It’s up to you to finish the job, but we won’t give you 
the code for the answer. 



www.it-ebooks.info 


Arduino 


The spec: make your houseplant talk 

Ever wished your plants could tell you when they need watering? 
Well, with an Arduino they can! In this lab, you'll create an 
Arduino-powered plant monitor, all coded in G. 

Here’s what you’re going to build. 



The physical device 

The plant monitor has a moisture sensor that measures how wet your 
plant’s soil is. If the plant needs watering, an LED lights up until the 
plant’s been watered, and the string “Feed me!” is repeatedly sent to 
your computer. 

When the plant has been watered, the LED switches off and the 
string “Thank you, Seymour!” is sent once to your computer. 



) 
The moisture sensor 
detetb whether or not 
the \>lant needs watering 


'P 

Solderless 

breadboard 


The plant statu, i, 
shoWh 0h y™ computer. 

_id 

r 


www.it-ebooks.info 









































Arduino 


The Arduino 

The brains of the plant monitor is an 
Arduino. An Arduino is a small micro¬ 
controller-based open source platform for 
electronic prototyping. You can connect it 
to sensors that pick up information about 
the world around it, and actuators that 
respond. All of this is controlled by code 
you write in G. 

The Arduino board has 14 digital IO pins, 
which can be inputs or outputs. These 
tend to be used for reading on or off 
values, or switching actuators on or off. 

The board also has six analog input pins, 
which take voltage readings from a sensor. 

The board can take power from your 
computer’s USB port. 

The Arduino IPE 



You write your G code in an Arduino IDE. The IDE allows 
you to verify and compile your code, and then upload it to the 
Arduino itself via your USB port. The IDE also has a built-in 
serial monitor so that you can see what data the Arduino is 
sending back (if any). 

The Arduino IDE is free, and you can get hold of a copy from 
www. arduino. cc/en/Main / Software. 



The IDE lets you upload £ode 
to the Ard uiho board... 



www.it-ebooks.info 
























Arduino 


Puild the physical device 

You start by building the physical device. While this bit’s 
optional, we really recommend that you give it a go. Your 
plants will thank you for it. 

We used an /W*duino Uno. 


Puild the moisture sensor 

Take a long piece of jumper wire and attach it to the head of one 
of the galvanized nails. You can either wrap the wire around the 
nail or solder it in place. 


\/o» ' 


,\W r>«ed 



l l0 ^ OW re** 

% ?' etc „ W>ve 


Once you’ve done that, attach another long piece of jumper wire 
to the second galvanized nail. 


The moisture sensor works by checking the conductivity between 
the two nails. If the conductivity is high, the moisture content must 
be high. If it’s low, the moisture content must be low. 




-the end <£ “the 
*t o “the head 

nail- 


Connect the UP 

Look at the LED. You will see that it has one 
longer (positive) lead and one shorter (negative) 
lead. 

Now take a close look at the Arduino. You will 
see that along one edge there are slots for 14 
digital pins labeled 0-13, and another one next 
to it labeled GND. Put the long positive lead of 
the LED into the slot labeled 13, and the shorter 
negative lead into the slot labeled GND. 

This means that the LED can be controlled 
through digital pin 13. 



Iwi -the shor£ 
t-£D lead ih-to -the 
M labeled $Nt). 


|y\SCV-t “the lon$ L-6P 
lead in-bo -the slo-t 

£ov distal ? m 


www.it-ebooks.info 






Arduino 


Connect the moisture sensor 


Connect the moisture sensor as shown below: 


o Connect a short jumper wire from the GND pin on the Arduino to slot D15 on the breadboard, 

o Connect the 10K Ohm resistor from slot G15 on the breadboard to slot CIO. 

o Connect a short jumper wire from the 0 analog input pin to slot DIO on the breadboard, 

o Take one of the galvanized nails, and connect the wire attached to it to slot BIO. 

e Connect a short jumper wire from the 5V pin on the Arduino to slot C5 on the breadboard, 

o Take the other galvanized nail, and connect the wire attached to it to slot B5. 





, T 

•The other galvanized 

h<3| l is attached to 

this wire- 


f' x 

Ore galvanized 
*ail is attached 
to this wire... 


The »oistM re sensor is Cometh 
to analog input pin O, which mi 

we can (read analog data tvom 
sensor via this pi h . 


That’s the physical Arduino built. Now for the C code... 


www.it-ebooks.info 















A 


Arduino 


Here's what your code should do 

Your Arduino G code should do the following. 

Read from the moisture sensor 

The moisture sensor is connected to an analog input pin. You 
will need to read analog values from this pin. 

Here at the lab, we’ve found that our plants generally need 
watering when the value goes below 800, but your plant’s 
requirements may be different—say, if it’s a cactus. 




Write to the UP 

The LED is connected to a digital pin. 

When the plant doesn’t need any more water, write to the digital 
pin the LED is connected to, and get it to switch off the LED. 

When the plant needs watering, write to the digital pin and get it 
to switch on the LED. For extra credit, get it to flash. Even better, 
get it to flash when the conditions are borderline. 


Write to the serial port 

When the plant needs watering, repeatedly write the string 
“Feed me!” to the computer serial port. 

When the plant has enough water, write the string “Thank 
you, Seymour!” to the serial port once. 

Assume that the Arduino is plugged in to the computer USB 
socket. 



www.it-ebooks.info 




















Arduino 



Here's what your 0 code should look like 

An Arduino G program has a specific structure. Your program 
must implement the following: 


void setup() 

{ 

/*This is called when the program starts. It 
basically sets up the board. Put any initialization 
code here.*/ 

} 

void loop() 

{ 

/*This is where your main code goes. This function 
loops over and over, and allows you to respond to 
input from your sensors. It only stops running when 
the board is switched off*/ 


} 


You can add 

extra -functions 
and declarations 
i-f you like, but 
without these 
two -functions 
the Code won t 
work- 


The easiest way of writing the Arduino G code is with the 
Arduino IDE. The IDE allows you to verify and compile 
your code, and then upload your completed program to the 
Arduino board, where you’ll be able to see it running. 

The Arduino IDE comes with a library of Arduino functions 
and includes lots of handy code examples. Turn the page to 
see a list of the functions you’ll find most useful when creating 
Arduino. 


www.it-ebooks.info 




Arduino 


Here are some useful Arduino functions 

You’ll need some of these to write the program. 


void pinMode(int pin, int mode) 

Tells the Arduino whether the digital pin is an input or output, mode can be either 


INPUT or OUTPUT. 


int digitalRead (int pin) 

Reads the value from the digital pin. The return value can be either HIGH or LOW. 


void digitalWrite(int pin, int value) 

Writes a value to a digital pin. value can be either HIGH or LOW. 


int analogRead(int pin) 

Reads the value from an analog pin. The return value is between 0 and 1023. 


void analogWrite(int pin, int value) 

Writes an analog value to a pin. value is between 0 and 255. 


void Serial.begin(long speed) 

Tells the Arduino to start sending and receiving serial data at speed bits per second. 
You usually set speed to 9600. 


void Serial.println( val) 

Prints data to the serial port, val can be any data type. 

void delay(long interval) 

Pauses the program for interval milliseconds. 


www.it-ebooks.info 


Arduino 



The finished product 

You’ll know your Arduino project is complete when you 
put the moisture sensor in your plant’s soil, connect the 
Arduino to your computer, and start getting status updates 
about your plant. 



If you have a Mac and want to make your 
plant really talk, you can download a script 
from the Head First Lahs wehsite that will 
read out the stream of serial data: 
www.headfirstlahs.com/hooks/hfc 


www.it-ebooks.info 








www.it-ebooks.info 


5 structs, unions, and bitfields 



Most things in life are more complex than a simple number. 

So far, you’ve looked at the basic data types of the C language, but what if you want to 
go beyond numbers and pieces of text, and model things in the real world? structs 
allow you to model real-world complexities by writing your own structures. In this 
chapter, you’ll learn how to combine the basic data types into structs, and even 
handle life’s uncertainties with unions. And if you’re after a simple yes or no, bitfields 
may be just what you need. 


this is a new chapter 


217 


www.it-ebooks.info 





complicated data 


Sometimes you need to hand around a lot of data 

You’ve seen that G can handle a lot of different types of data: 
small numbers and large numbers, floating-point numbers, 
characters, and text. But quite often, when you are recording 
data about something in the real world, you’ll find that you need 
to use more than one piece of data. Take a look at this example. 

Here you have two functions that both need the same set of data, 
because they are both dealing with the same real-world thing: 







'Wt thar just means you're 
to pass string literals. 



-functions 
take the 
same set ot 
parameters. 




/* Print out the catalog entry */ 
void catalog (const char *name, const char ^species, int teeth, int age) 
{ 

printf(”%s is a %s with %i teeth. He is %i\n", 
name, species, teeth, age); 

} 

/* Print the label for the tank */ 

void label (const char *name, const char ^species, int teeth, int age) 


{ 

printf("Name:%s\nSpecies:%s\n%i years old, %i teeth\n", 
name, species, teeth, age); 

} 



So how do you get around this problem? What can you do to 
avoid passing around lots and lots of data if you’re really only 
using it to describe a single thing? 


218 Chapter 5 


www.it-ebooks.info 




structs, unions, and bitfields 


Cubicle conversation 



Joe: Sure, it’s four pieces of data now, but what if we change the 
system to record another piece of data for the fish? 

Frank: That’s only one more parameter. 

Jill: Yes, it’s just one piece of data, but we’ll have to add that to 
every function that needs data about a fish. 

Joe: Yeah, for a big system, that might be hundreds of functions. 
And all because we add one more piece of data. 

Frank: That’s a good point. But how do we get around it? 

Joe: Easy, we just group the data into a single thing. Something 
like an array. 

Jill: I’m not sure that would work. Arrays normally store a list of 
data of the same type. 

Joe: Good point. 

Frank: I see. We’re recording strings and ints. Yeah, we can’t 
put those into the same array. 

Jill: I don’t think we can. 

Joe: But come on, there must be some way of doing this in G. 
Let’s think about what we need. 

Frank: OK, we want something that lets us refer to a whole set 
of data of different types all at once, as if it were a single piece of 
data. 

Jill: I don’t think we’ve seen anything like that yet, have we? 





What you need is something that will let you record 
several pieces of data into one large piece of data - 


you are here ► 219 


www.it-ebooks.info 


structs 


Create your own structured data types with a struct 

If you have a set of data that you need to bundle together into 
a single thing , then you can use a struct. The word struct is 
short for structured data type. A struct will let you take 
all of those different pieces of data into the code and wrap them 
up into one large new data type, like this: 

struct fish { 

const char *name; 
const char *species; 
int teeth; 
int age; 

}; 

This will create a new custom data type that is made up of a 
collection of other pieces of data. In fact, it’s a little bit like an 

It's fixed length. 

The pieces of data inside the struct are given names. 


array, except: 

o 

o 



But once you’ve defined what your new struct looks like, how do you 
create pieces of data that use it? Well, it’s quite similar to creating a new 
array. You just need to make sure the individual pieces of data are in the 
order that they are defined in the struct: 

TWis is -the species. 

"struct -fish" is^. tl 

“the data-type. struct fish snappy = { "Snappy" r "Piranha 


IT 


“snappy” is the vaviable name. 


^ T' 

This is the name- 


This is the numbev o-f teeth- 
69, 4}; This is Snapf/’s a$e- 


tfieretUre no 

Dumb Questions 


O: Hey, wait a minute. What’s that 
const char thing again? 


const char * is used for strings 
that you don’t want to change. That means 
it’s often used to record string literals. 


% 


OK. So does this struct store 


the string? 


Q? 


But you can store the whole string 


in there if you want? 


In this case, no. The struct here 
just stores a pointer to a string. That means 
it’s just recording an address, and the string 
lives somewhere else in memory. 


Yes, if you define a char array in 
the string, like char name [20];. 


220 Chapter 5 


www.it-ebooks.info 










structs, unions, and bitfields 


Just give them the fish 

Now, instead of having to pass around a whole collection of 
individual pieces of data to the functions, you can just pass your 
new custom piece of data: 


/* Print out the catalog entry */ 

void catalog(struct fish f) 

{ 

• • • 

} 

/* Print the label for the tank */ 

void label(struct fish f) 

{ 

• • • 

} 



Vhy the fish is - 

ftp ye>U 

One of the great 
things about data 
passing around 
inside structs is 
that you can change the 
contents of your struct 
without having to change 
the functions that use it. For 
example, let’s say you want 
to add an extra field to fish: 

struct fish { 



Looks a lot simpler, doesn’t it? Not only does it mean the 
functions now only need a single piece of data , but the code that 
calls them is easier to read: 


const char 
const char 
int teeth; 


*name; 
*species; 


struct fish snappy = {"Snappy", "Piranha", 69, 4}; 
catalog(snappy); 
label(snappy); 


So that’s how you can define your custom data type, but how 
do you use it? How will our functions be able to read the 
individual pieces of data stored inside the struct? 


Wrapping parameters 
in a struct makes your 


:octe 


more 


stable. 


int age; 

int favorite music; 


All the catalog () and 
label () functions have been 
told is they they’re going to 
be handed a fish. They don’t 
know (and don’t care) that the 
fish now contains more data, 
so long as it has all the fields 
they need. 

That means that structs 
don’t just make your code 
easier to read, they also 
make it better able to cope 
with change. 


you are here ► 221 


www.it-ebooks.info 






use 


u >) 


Read a struct's fields with the V operator 

Because a struct’sa little like an array, you might think you 
can read its fields like an array: 


struct fish snappy = {"Snappy", "piranha", 69, 4}; 
printf("Name = %s\n”, snappy[0]); 


You get ah 
error i-p you 
try to read a 
struct -field 
like it^s ah 
array. 


|£ snappy was a pointer to ah array, you 
would access the £irst -field like this. 


I File Edit Window Heb Fish 


> gcc fish.c -o fish 
fish.c: In function 'main': 

fish.c:12: error: subscripted value is neither array nor pointer 

> 


But you can’t. Even though a struct stores fields like an array, 
the only way to access them is by name. You can do this using 
the operator. If you’ve used another language, like JavaScript 
or Ruby, this will look familiar: 


struct fish snappy = {"Snappy", "piranha", 69, 4}; 
printfC’Name = %s\n", snappy.name); 



I File Edit Window HelD Fish 


> gcc fish.c -o fish 

> ./fish 
Name = Snappy 

> 


This is the name attribute in snappy. 


This will returh the 
string “Snappy. 


OK, now that you know a few things about using structs, 
let’s see if you can go back and update that code... 

222 Chapter 5 


www.it-ebooks.info 






structs, unions, and bitfields 

Piranha 

Puzzje 

Your job is to write a new version of the catalog () 
function using the fish struct. Take fragments 
of code from the pool and place them in the blank 
lines below. You may not use the same fragment 
more than once, and you won't need to use all 
the fragments. 



void catalog(struct fish f) 

{ 

printf("%s is a %s with %i teeth. He is %i\n", 


} 

int main() 

{ 

struct fish snappy = {"Snappy", "Piranha", 69, 4}; 
catalog(snappy); 

/* We're skipping calling label for now */ 
return 0; 

} 


Note: each thing from 
the pool can be used 
only once! 



you are here ► 


223 


www.it-ebooks.info 

















piranha unpuzzled 


Piranha 



psshpuzzje gqjufkn 

Your job was to write a new version of the catalog () 
function using the fish struct. You were to 
take fragments of code from the pool and place 
them in the blank lines below. 


void catalog(struct fish f) 

{ 

printf("%s is a %s with %i teeth. He is %i\n", 

f • name ' f • species ' .teeth _ ' f • age ) 

} 

int main() 

{ 

struct fish snappy = {"Snappy", "Piranha", 69, 4}; 
catalog(snappy); 

/* We’re skipping calling label for now */ 
return 0; 

} 



224 Chapter 5 


www.it-ebooks.info 


> • 

















structs, unions, and bitfields 



You’ve rewritten the catalog () function, so it’s pretty easy to 
rewrite the label () function as well. Once you’ve done that, 
you can compile the program and check that it still works: 


(icy, look, someone’s _. 

using make... ^ 

This line is fv'mied out 
by the eatalo^O -function- 

These lines a\re pv-in ied^ 
by the labelO -function. 


I File Edit Window Helo FishAreFriendsNotFood 


> make pooljpuzzle && ./pool_puzzle 
gcc pool_puzzle.c -o pool_puzzle 

Snappy is a Piranha with 69 teeth. He is 4 
Name:Snappy 
Species:Piranha 
4 years old, 69 teeth 

> 


That’s great. The code works the same as it did before, but now 
you have really simple lines of code that call the two functions: 

catalog(snappy); 
label (snappy); 

Not only is the code more readable, but if you ever decide 
to record some extra data in the struct, you won’t have to 
change anything in the functions that use it. 


-there-, sure no 

Dumb Questions 


So is a struct just an array? 

./\^No, but like an array, it groups a number of pieces of data 
together. 

An array variable is just a pointer to the array. Is a 
struct variable a pointer to a struct? 


A: 


No, a struct variable is a name for the struct itself. 


% I know I don’t have to, but could I use [ 0 ], [ 1 ] 
access the fields of a struct? 

./\^No, you can only access fields by name. 

Q/Are structs like classes in other languages? 

They’re similar, but it’s not so easy to add methods to 

structs. 


. to 


you are here ► 225 


www.it-ebooks.info 









structs and memory 



^frucfS In Memory Up Close 


When you define a struct, you’re not telling the computer to 
create anything in memory You’re just giving it a template for 
how you want a new type of data to look. 


Watch it! 


The assignment 
copies the 
pointers to strings, 
not the strings 
themselves. 


struct fish { 

const char *name; 
const char ^species; 
int teeth; 
int age; 

} ; 

But when you define a new variable, the computer will need to 
create some space in memory for an instance of the struct. 
That space in memory will need to be big enough to contain all of 
the fields within the struct: 


When you assign one struct to 
another, the contents of the struct 
will be copied. But if, as here, that 
includes pointers, the assignment 
will just copy the pointer values. 
That means the name and species 
fields of gnasher and snappy 
both point to the same strings. 


struct fish snappy = {"Snappy", "Piranha", 69, 4}; 


This is also a 

poin-tev- -to a stvina. 


This is a poirrlev- 





-to a s-tvm<y ^ 

*name 

* species 

69 

4 


“Snappy” 




“Piranha” 



£-fcova$e 'f°' r the number 
o-C -teeth a*d a$e- 


So what do you think happens when you assign a struct to another 
variable? Well, the computer will create a brand-new copy of the 
struct. That means it will need to allocate another piece of memory 
of the same size, and then copy over each of the fields. 


struct fish snappy = ("Snappy", "Piranha", 69, 4}; 
struct fish gnasher = snappy; 



Remember: when you’re assigning struct variables, 
you are telling the computer to copy data. 


226 Chapter 5 


www.it-ebooks.info 






















structs, unions, and bitfields 


Caw you put one struct inside another? 


Remember that when you define a struct, you’re actually 
creating a new data type. G gives us lots of built-in data types 
like ints and shorts, but a struct lets us combine existing 
types together so that you can describe more complex objects to the 
computer. 


But if a struct creates a data type from existing data types, 
that means you can also create structs from other 
structs. To see how this works, let’s look at an example. 

These ave tWmy ouv tish likes. 

struct preferences { 
const char *food; 
float exercise_hours; 

In¬ 


struct fish { 

const char *name; 
const char ^species; 
int teeth; 


^This is a stv-udt inside a stvudt- 

int age; 

s 1 a struct preferences care; ^p^-This is da' tA nesting 

r ^ 

Our new -field is da lied “dare," but it y/ill dontai* 
fields defined by the u p\refe\refides ;; strudt- 


}; 


Why nest 
structs? 

Why would you want 
to do this? So you can 
cope with complexity, 
structs give us bigger 
building blocks of data. 

By combining structs 
together, you can create 
larger and larger data 
structures. You might 
have to begin with just 
ints and shorts, but 
with structs, you can 
describe hugely complex 
things, like network 
streams or video images. 


This code tells the computer one struct will contain another 
struct. You can then create variables using the same array¬ 
like code as before, but now you can include the data for one 
struct inside another : 

struct fish snappy = ("Snappy", "Piranha", 

Once you’ve combined structs together, you can access the 
fields using a chain of operators: 


This is *thc stv-udt data 
fov- the dav-e f ield- 

4, {"Meat", 7.5}}; 

Vi * is the value This is the vaWe 
ov dave-food- £,ave-c%ev-dise_ ovaV ’ s 


printf("Snappy likes to eat %s", snappy.care.food); 

printf("Snappy likes to exercise for %f hours", snappy.care.exercise hours); 


OK, let’s try out your new struct skillz... 


you are here ► 227 


www.it-ebooks.info 



exercise 




The guys at the Head First Aquarium are starting to record lots of data about each of their fish 
guests. Here are their structs: 



228 Chapter 5 


www.it-ebooks.info 





structs, unions, and bitfields 


This is the data that will be recorded for one of the fish: 

Name: Snappy 
Species: Piranha 
Food ingredients: meat 
Food weight: 0.2 lbs 

Exercise description: swim in the jacuzzi 
Exercise duration 7.5 hours 


Question 0: How would you write this data in C? 

struct fish snappy = 


Question 1: Complete the code of the label () function so it produces output like this: 

Name:Snappy 
Species:Piranha 
4 years old, 69 teeth 

Feed with 0.20 lbs of meat and allow to swim in the jacuzzi for 7.50 hours 


void label (struct fish a) 

{ 

printf("Name:%s\nSpecies:%s\n%i years old, %i teeth\n", 
a.name, a.species, a.teeth, a.age); 
printf("Feed with %2.2f lbs of %s and allow to %s for %2.2f hours\n". 


} 


r 


) 


r 


you are here ► 


229 


www.it-ebooks.info 










exercised 



Solution 

The guys at the Head First Aquarium are starting to record lots of data about each of their fish 
guests. Here are their structs: 



230 Chapter 5 


www.it-ebooks.info 





structs, unions, and bitfields 


This is the data that will be recorded for one of the fish: 

Name: Snappy 
Species: Piranha 
Food ingredients: meat 
Food weight: 0.2 lbs 

Exercise description: swim in the jacuzzi 
Exercise duration 7.5 hours 


Question 0: How would you write this data in C? 

struct fish snappy = {“Snappy”, “Piranha”, {{“meat”, 0.2], {“swim in the jaduzz.i”, 7*5}}}; 


Question 1: Complete the code of the label () function so it produces output like this: 

Name:Snappy 
Species:Piranha 
4 years old, 69 teeth 

Feed with 0.20 lbs of meat and allow to swim in the jacuzzi for 7.50 hours 


void label (struct fish a) 

{ 

printf("Name:%s\nSpecies:%s\n%i years old, %i teeth\n", 
a.name, a.species, a.teeth, a.age); 
printf("Feed with %2.2f lbs of %s and allow to %s for %2.2f hours\n", 

adarc.^ood. weight , r 

a : £dre e*er£ise ; description , -duration ) ; 

} 


you are here ► 


231 


www.it-ebooks.info 













hello typedef 


these struct commands seem kind 
of wordy. I have to use the struct keyword when I define 
a struct, and then I have to use it again when I define a 
variable. I wonder if there's some way of simplifying this. 


O 


You can give your struct a proper name using typedef. 

When you create variables for built-in data types, you can use simple short 
names like int or double, but so far, every time you’ve created a variable 
containing a struct you’ve had to include the struct keyword. 

struct cell phone { 
int cell_no; 
const char ^wallpaper; 
float minutes_of charge; 

In¬ 


struct cell phone p = (5557879, "sinatra.png”, 1.35}; 



But G allows you to create an alias for any struct that 
you create. If you add the word typedef before the struct 
keyword, and a type name after the closing brace, you can call 
the new type whatever you like: 

typede-f 
■^ea^s you 

are <ko\ struct cell-phone 

3 om 9 

to give 
the struct 
type a hew 


{ 


holme- 


int cell_no; 

const char ^wallpaper; 

float minutes_of_charge; 

} phone } fhohe will become ah alias tov* 

U st\ru£t £ell_ph ohe- w 


What should I call 
my new type? 

If you use typedef to create an alias for a 
struct, you will need to decide what your 
alias will be. The alias is just the name of your 
type. That means there are two names to think 
about: the name of the struct (struct 
cell—phone) and the name of the type 
(phone). Why have two names? You usually 
don't need both. The compiler is quite happy 
for you to skip the struct name, like this: 


phone p = {5557879, 

Mow, when the dompilev" sees w phone/' 
tv-eat it like w stvudt dell_phohe ” 


"sinatra.png", 
it will 


typedefs can shorten your code and make it 
easier to read. Let’s see what your code will look 
like if you start to add typedef s to it... 


1.35}; 


typedef struct { 
int cell_no; 
const char ^wallpaper; 
float minutes of charge; 


This is 
the alias. 


} phone; 

phone p 


(5557879, 


"s.png" 


1.35} 


232 Chapter 5 


www.it-ebooks.info 






structs, unions, and bitfields 




It’s time for the scuba diver to make his daily round of the tanks, and he needs a new label on 
his suit. Trouble is, it looks like some of the code has gone missing. Can you work out what the 
missing words are? 


([include <stdio.h> 


_struct { 

float tank_capacity; 
int tank_psi; 

const char *suit material; 


.struct scuba { 

const char *name; 
equipment kit; 

} diver; 

void badge (. d) 

{ 

printf("Name: %s Tank: %2.2f(%i) Suit: %s\n", 

d.name, d.kit.tank_capacity, d.kit.tank_psi, d.kit.suit_material); 

} 

int main() 

{ 

randy = ("Randy", (5.5, 3500, "Neoprene"}}; 

badge(randy) ; 
return 0; 


you are here ► 


233 


www.it-ebooks.info 











labeled randy 




It’s time for the scuba diver to make his daily round of the tanks, and he needs a new label on 
his suit. Trouble is, it looks like some of the code has gone missing. Could you work out what the 
missing words were? 


^include <stdio.h> 


.iypcdfrC .struct { 

float tank_capacity; 
int tank_psi; 

const char *suit_material; 

} . C c \uipinr)Cir>'t ./ 


■typcdc^ .struct scuba { 

const char *name; 
equipment kit; 

} diver; 


f 


The Codex deeded t© <yve the sWt the name 
"sduba" hev-e- But you'll just use the diver type name- 


void badge ( diver d) 

{ 

printf("Name: %s Tank: %2.2f(%i) Suit: %s\n", 

d.name, d.kit.tank_capacity, d.kit.tank_psi, d.kit.suit_material); 

} 


int main() 

{ 

diver . randy = ("Randy", (5.5, 3500, "Neoprene"} } ; 

badge(randy); 
return 0; 


234 Chapter 5 


www.it-ebooks.info 












structs, unions, and bitfields 



BULLET POINTS 


■ A struct is a data type made from a 
sequence of other data types. 


struct fields are stored in memory in the 
same order they appear in the code. 


■ structs are fixed length. 


You can nest structs. 


struct fields are accessed by name, 
using the <struct>.< field name> 
syntax (aka dot notation ). 


typedef creates an alias for a data type. 

If you use typedef with a struct, then 
you can skip giving the struct a name. 


th&ce-ismce no 

Dumb Questions 


O: Do struct fields get placed 
next to each other in memory? 


^Z Sometimes there are small gaps 
between the fields. 



Why’s that? 


The computer likes data to fit inside 
word boundaries. So if a computer uses 
32-bit words, it won’t want a short, say, 
to be split over a 32-bit boundary. 


% So it would leave a gap and start 
the short in the next 32-bit word? 



Yes. 


% Does that mean each field takes 
up a whole word? 


^Z No. The computer leaves gaps only 
to prevent fields from splitting across word 
boundaries. If it can fit several fields into a 
single word, it will. 


% Why does the computer care so 
much about word boundaries? 


It will read complete words from the 
memory. If a field was split across more 
than one word, the CPU would have to read 
several locations and somehow stitch the 
value together. 



And that’d be slow? 


That’d be slow. 


% In languages like Java, if I assign 
an object to a variable, it doesn’t copy 
the object, it just copies a reference. 
Why is it different in C? 


In C, all assignments copy data. If 
you want to copy a reference to a piece of 
data, you should assign a pointer. 


I’m really confused about 
struct names. What’s the struct 
name and what’s the alias? 


The struct name is the word that 
follows the struct keyword. If you write 
struct peter_parker { ... }, 
then the name is peter_parker, and 
when you create variables, you would say 
struct peter parker x. 



And the alias? 


^Z Sometimes you don’t want to keep 
using the struct keyword when you 
declare variables, so typedef allows you 
to create a single word alias. In typedef 
struct peter_parker{ . . . } 
spider_man;, spider_man is 
the alias. 


So what’s an anonymous 
struct? 


One without a name. So typedef 
struct (...) spider_man; 
has an alias of spider_man, but no 
name. Most of the time, if you create an 
alias, you don’t need a name. 


you are here ► 235 


www.it-ebooks.info 








struct updates 


How do you update a struct? 

A struct is really just a bundle of variables, grouped together and 
treated like a single piece of data. You’ve already seen how to create 
a struct object, and how to access its values using dot notation. 

But how do you change the value of a struct that already exists? 

Well, you can change the fields just like any other variable: 

This dveates 3 sfv-u/vf — y 

fish snappy = {"Snappy", "piranha", 69, 4}; 

This sets -the value of printf ("Hello %s\n", snappy.name) This veads -the value ot the name -field- 

ihe "teeth -field- snappy. teeth = 68;<- Ouh< Looks like Snappy bit sor^ethmg havd 

That means if you look at this piece of code, you should be able to 
work out what it does, right? 

^include <stdio.h> 

typedef struct { 
const char *name; 
const char *species; 
int age; 

} turtle; 

void happy_birthday(turtle t) 

{ 

t.age = t.age + 1; 

printf("Happy Birthday %s! You are now %i years old!\n", 
t.name, t.age); 

} 

int main() 

{ 

turtle myrtle = {"Myrtle", "Leatherback sea turtle", 99}; 
happy_birthday(myrtle); 

printf("%s's age is now %i\n", myrtle.name, myrtle.age); 
return 0; 

> - 

Myvtlc *thc *tuv*tlc ^ 

But there’s something odd about this code... 

236 Chapter 5 



www.it-ebooks.info 




structs, unions, and bitfields 



This is what happens when you compile and run the code. 


WTF???? 


I/Vidkcd 

Turtle 

Feet 



| File Edit Window Help ILikeTurtles | 


> gcc turtle.c -o turtle && ./turtle 

Happy Birthday Myrtle! You are now 100 years old! 
Myrtle's age is now 99 

> 


Something weird has happened. 

The code creates a new struct and then passes it to a function 
that was supposed to increase the value of one of the fields by 1. 
And that’s exactly what the code did .. .at least, for a while. 

Inside the happy_birthday () function, the age field was 
updated, and you know that it worked because the printf () 
function displayed the new increased age value. But that’s when 
the weird thing happened. Even though the age was updated by 
the function, when the code returned to the main () function, 
the age seemed to reset itself. 





This code is doing something weird. But you’ve already been 
given enough information to tell you exactly what happened. 
Can you work out what it is? 


you are here ► 


237 


www.it-ebooks.info 












too many turtles 


The code is cloning the turtle 


Let’s take a closer look at the code that called the 
happy birthday () function: 


void happy_birthday(turtle t) 

{ 


} 

This is the turtle that we are 
passing to the -function. 

V 

happy birthday(myrtle); 


When you assign 
a struct, its 
values get copied 
to the new struct. 


' —• The myrtle struct will be 

In G, parameters are passed to functions by value. That Copied 

means that when you call a function, the values you pass into 
it are assigned to the parameters. So in this code, it’s almost as 
if you had written something like this: 


turtle t = myrtle; 


But remember, when you assign structs in G, the values 
are copied. When you call the function, the parameter t 
will contain a copy of the myrtle struct. It’s as if the 

function has a clone of the original turtle. So the code 
inside the function does update the age of the turtle, but it 5 s 
a different turtle. 

What happens when the function returns? The t parameter 
disappears, and the rest of the code in main () uses the 
myrtle struct. But the value of myrtle was never 
changed by the code. It was always a completely separate 
piece of data. 

So what do you do if you want pass a struct 
to a function that needs to update it? 


This is Myv~llc... 

I 



••bu-t her elohe is seh 
to the tundtioh. 


- 1 / 



f 

Turtle V 


238 Chapter 5 


www.it-ebooks.info 






structs, unions, and bitfields 


You weed a pointer to the struct 

When you passed a variable to the scanf () function, you couldn’t 
pass the variable itself to scanf (); you had to pass a pointer: 

scanf("%f", &length of run); 


Why did you do that? Because if you tell the scanf () function 
where the variable lives in memory, then the function will be able to 
update the data stored at that place in memory, which means it can 
update the variable. 

And you can do just the same with structs. If you want a function 
to update a struct variable, you can’t just pass the struct as 
a parameter because that will simply send a copy of the data to the 
function. Instead, you can pass the address of the struct: 

void happy_birthday (turtle *t) me3yiS u £ on>eo ne is f 

{ «, ve me a pomtev to a strwdt- 

A 

Remember an address is a Pointer- 

} 

This means you will pass the address ot 
the myrtle variable to the -Pundtion- 

P- 

happy birthday(&myrtle); 



See if you can figure out what expression needs to fit into each 
of the gaps in this new version of the happy_birthday () 
function. 

Be careful. Don't forget that t is now a pointer variable. 


void happy_birthday(turtle *t) 

{ 


. age =.. age + 1 ; 

printf("Happy Birthday %s! You are now %i years old!\n", 

.name, .age); 


} 


you are here ► 


239 


www.it-ebooks.info 










this is the age of the turtle 

^Jharpen your pencil 

Solution 


You were to figure out what expression needs to fit into each 
of the gaps in this new version of the happy_birthday () 
function. 


void happy_birthday(turtle *t) 


need to ? uta* beW iW variable «a»e. 
because you want the value it ? ol|r ' 


....(* 0 . .age = _ .age + 1; 

printf("Happy Birthday %s! You are now %i years old!\n", 
(Jf'L) . name, .age); 

The parentheses are really important 
The todc will break without them. 


(*t).age vs. *t.age 

So why did you need to make sure that *t was wrapped in 
parentheses? It’s because the two expressions, (*t) . age 
and *t. age, are very different. 



Q 


|f t is a pointer to a 
turtle struct, then this 
is tbe ay of tbe turtle- 



So the expression *t. age is really the same as * ( t. age). 
Think about that expression for a moment. It means “the 
contents of the memory location given by t. age.” But 
t. age isn’t a memory location. 


I am the contents of 
the memory location 
given by t.age. 


O 



I 'P i h a pointer -to a 
turtle struct, then this 


expression is wron<y 


So be careful with your parentheses when 
using structs—parentheses really matter. 


240 Chapter 5 


www.it-ebooks.info 











structs, unions, and bitfields 



Let’s check if you got around the bug: 


File Edit Window Help ILikeTurtles 


> gcc happy_birthday_turtle_works.c -o happy_birthday_turtle_works 
Happy Birthday Myrtle! You are now 100 years old! 

Myrtle's age is now 100 

> 


That’s great. The function now works. 

By passing a pointer to the struct, you allowed the function 
to update the original data rather than taking a local copy 


I can see how the new code works. But the 
stuff about parentheses and * notation doesn't 
make the code all that readable. I wonder if 
there's something that would help with that. 


Yes, there is another struct pointer notation 
that is more readable. 

Because you need to be careful to use parentheses in the right 
way when you’re dealing with pointers, the inventors of the G 
language came up with a simpler and easier-to-read piece of 
syntax. These two expressions mean the same thing: 


(*t).age 


t->age 



These *two mean -the same- 


So, t->age means, “The age field in the struct that t 
points to,” That means you can also write the function like this: 

void happy birthday(turtle *a) 


t->age 

means 


(*t). 



age 




{ 


0 




a->age = a->age + 1; 

printf("Happy Birthday %s! You are now %i years old!\n", 
a->name, a->age); 


you are here ► 


241 


www.it-ebooks.info 










crack safe 



Safe CttacKett 


Shhh...it's late at night in the bank vault. Can you spin the correct combination to crack the 
safe? Study these pieces of code and then see if you can find the correct combination that 
will allow you to get to the gold. Be careful! There's a swag type and a swag field. 


" ' , • ' . - • •' - 

-- _____ 


I £■ 11 ' a - , ‘ 


You need to 
crack -tKis 
Combination. 



s 










V 


^include 

<stdio.h> 

typedef 

struct { 

const 

char *description; 

float 

value; 

} swag; 


typedef 

struct { 

swag * 

swag; 

const 

char * sequence; 

} combination; 

typedef 

struct { 

combination numbers; 

const 

char *make; 

} safe; 



i 


- 







242 Chapter 5 


www.it-ebooks.info 

























structs, unions, and bitfields 


The bank created its safe like this: 



What combination will get you to the string "GOLD!"? Select one symbol or word from each column to 
assemble the expression. 




tfieretcire no 

Dumb Questions 



Why are values copied to parameter variables? 


The computer will pass values to a function by assigning 
values to the function’s parameters. And all assignments copy 
values. 



Why isn’t *t. age just read as (*t) .age? 


Because the computer evaluates the dot operator before it 
evaluates the *. 


you are here ► 243 


www.it-ebooks.info 


































safe cracked 




Shhh...it's late at night in the bank vault. You were to spin the correct combination to crack 
the safe. You needed to study these pieces of code and then find the correct combination 
that would allow you to get to the gold. 




_ 


v 



Hn 


vV 








' ■ 




* V 














^include 

<stdio.h> 

typedef 

struct { 

const 

char *description; 

float 

value; 

} swag; 


typedef 

struct { 

swag * 

swag; 

const 

char *sequence; 

} combination; 

typedef 

struct { 

combination numbers; 

const 

char *make; 

} safe; 








244 Chapter 5 


www.it-ebooks.info 

























structs, unions, and bitfields 


The bank created its safe like this: 


swag gold = {"GOLD!", 1000000.0}; 
combination numbers = {&gold, "6502"}; 
safe s = {numbers, "RAMACON250"}; 


. 


What combination will get you to the string "GOLD!"? You were to select one symbol or word from each 
column to assemble the expression. 



So you dan display *the $old in *the sa-fc v/i-tlv 


pv"in*t'f( u Con*ten*ts — %s\n”, s.numbcv-s.sy/a^—>dcsd\rip*tion); 



BULLET POINTS 


■ When you call a function, the values 
are copied to the parameter variables. 


pointer->f ield is the same as 
(^pointer) .field. 


You can create pointers to structs 
just like any other type. 


The -> notation cuts down on 
parentheses and makes the code 
more readable. 


you are here ► 245 


www.it-ebooks.info 






































































different data types 


Sometimes the same type of thing needs different types of data 

structs enable you to model more complex things from the real 
world. But there are pieces of data that don’t have a single data type: 


/\r> m-teyv- 

Floatmj yoirrb 
Floatmj) foirrl 




saie -todau: 
fa appies 

1.5 \b s-trauoberries 
0.5 pirvt oranae juice 


AH 


<£ -these desenbe a 


J 


So if you want to record, say, a quantity of something, and that 
quantity might be a count, a weight, or a volume, how would you 
do that? Well, you could create several fields with a struct, like this: 

typedef struct { 

• • • 

short count; 
float weight; 
float volume; 


} fruit; 


But there are a few reasons why this is not a good idea: 


o 

o 

o 


It will take up more space in memory. 
Someone might set more than one value. 
There's nothing called "quantity." 


It would be really useful if you could specify something called 
quantity in a data type and then decide for each particular piece 
of data whether you are going to record a count, a weight, or a 
volume against it. 


In C, you can do just that by using a union. 

246 Chapter 5 


www.it-ebooks.info 








structs, unions, and bitfields 


A union lets you reuse memory space 


Every time you create an instance of a struct, the computer 
will lay out the fields in memory, one after the other: 


Ti^is is d dhav yoirrldv 
*to “the haw'd- 


This is spate tov the age as an int- 

* 


char *name 

int age 

float weight 

\ 

re? 


This is a -float to 
^— stone the weight- 


Dog d = {"Biff", 2, 98.5}; 


A union is different. A union will use the space for just one 
of the fields in its definition. So, if you have a union called 
quantity, with fields called count, weight, and volume, 
the computer will give the union enough space for its largest 
field, and then leave it up to you which value you will store in 
there. Whether you set the count, weight, or volume field, 
the data will go into the same space in memory: 


quantity (might he a float or a short) 


h union looks like a sWfc, bu-t- 

it uses the union keyword. , . _ *. 

typedef union { 


* 

If a float takes 4" bytes, and a short takes 
2., then this spade will be \ bytes long. 


fcadh of these f ields will be 



short count; 
float weight; 
float volume; 



stored in the same spade- } quantity; 


These are all different types, 
all quantities. 

\ . 


Measuve juidd 


CoUH“t OVdH^dS. 


I/Vdigh jyrapds. 


www.it-ebooks.info 


you are here ► 


247 









union 


How do you use a union? 

When you declare a union variable, there are a few ways 
of setting its value. 


CS9 style for the first field 

If the union is going to store a value for the first field, 
then you can use G89 notation. To give the union a 
value for its first field, just wrap the value in braces: 


quantity q = {4} 



TY>is weans "the 
is d C.oufi't o-f ^T- 


designated initializers set other values 

A designated initializer sets a union field value by 
name, like this: 


quantity q = {.weight=l.5}; 


This will set the 
union tor a -floating¬ 
point weight value- 


tlierejare nQ 

_ Dumb Questions ' 

O: Why is a union always set to the 
size of the largest field? 

^Z The computer needs to make sure that 
a union is always the same size. The only 
way it can do that is by making sure it is large 
enough to contain any of the fields. 

Q/Why does the C89 notation only set 
the first field? Why not set it to the first 
float if I pass it a float value? 

^Z To avoid ambiguity. If you had, say, a 
float and a double field, should the 
computer store {2.1} as a float ora 
double? By always storing the value in the 
first field, you know exactly how the data 
be initialized. 


Set the value with dot notation 

The third way of setting a union value is by creating the 
variable on one line, and setting a field value on another 
line: 


quantity q; 
q.volume = 3.7; 


Remember: whichever way you set the union’s value, 

there will only ever be one piece of data stored. The 
union just gives you a way of creating a variable that 
supports several different data types. 



The p^lxfe Gulcfe f® — 

Standards 


Designated initializers allow 
you to set struct and union 
fields by name and are part of 
the C99 C standard. They are 
supported by most modern 
compilers, but be careful if 
you are using some variant of 
the C language. For example, 
Objective C supports 
designated initializers, but 
C++ does not. 


248 Chapter 5 


www.it-ebooks.info 








structs, unions, and bitfields 



Yes, designated initializers can be used to set the 
initial values of fields in structs as well. 

They can be very useful if you have a struct that contains a large 
number of fields and you initially just want to set a few of them. It’s 
also a good way of making your code more readable: 


typedef struct { 

const char *color; 
int gears; 
int height; 

} bike; 
bike b = {.height=17 r 



This Will set -the yavs and 
the height fields, but t 
set the dolov -f ield- 


gears=21}; 


unions arc often used with structs 



Once you’ve created a union, you’ve created a new data type. 
That means you can use its values anywhere you would use 
another data type like an int or a struct. For example, you 
can combine them with structs: 


typedef struct { 
const char *name; 
const char *country; 
quantity amount; 

} fruit order; 


And you can access the values in the struct/union 
combination using the dot or -> notation you used before: 


Its .amount because that’s the name ot the struct quantity variable- 

* iT 


Here* youVe usin^ a double 
designated identi-fier- 
.amount -for tbe struct and 
.weight -for tbe amount- 


fruit order apples = {"apples", "England", .amount.weight=4.2}; 


printf("This order contains %2.2f lbs of %s\n", apples.amount.weight, apples.name); 

This will print "This order dontains ^.10 lbs of apples." 


you are here ► 


249 


www.it-ebooks.info 



mixers mixed 




It's Margarita Night at the Head First Lounge, but after one too many samples, it looks like the guys 
have mixed up their recipes. See if you can find the matching code fragments for the different 
margarita mixes. 

Here are the basic ingredients: 

typedef union { 
float lemon; 
int lime_pieces; 

} lemon lime; 


typedef struct { 
float tequila; 
float cointreau; 
lemon_lime citrus; 
} margarita; 

Here are the different margaritas: 



250 Chapter 5 


www.it-ebooks.info 















structs, unions, and bitfields 


And finally, here are the different mixes and the drink recipes they produce. Which of the margaritas need to be 
added to these pieces of code to generate the correct recipes? 






BE flie CoD'Wlev 

One of these pieces ot code compiles; the 
other doesn’t. Your job is to play like 
you’re the compiler and say which one 

compiles, and why the other 
one doesn’t. 


margarita m = {2.0, 1.0, {0.5}}; 


margarita m; 
m = {2.0, 1.0, {0.5}}; 


you are here ► 251 


www.it-ebooks.info 















mixed mixers unmixed 




It's Margarita Night at the Head First Lounge, but after one too many samples, it looks like the guys 
have mixed up their recipes. You were to find the matching code fragments for the different margarita 
mixes. 

Here are the basic ingredients: 

typedef union { 
float lemon; 
int lime_pieces; 

} lemon lime; 


typedef struct { 
float tequila; 
float cointreau; 
lemon_lime citrus; 
} margarita; 

Here are the different margaritas: 



None o*f these 
lines v/as used- 



252 Chapter 5 


www.it-ebooks.info 











structs, unions, and bitfields 


And finally, here are the different mixes and the drink recipes they produce. Which of the margaritas need to be 
added to these pieces of code to generate the correct recipes? 





BE fE e ComWjef §o{uf}on 

One of these pieces ot code compiles; the 
other doesn’t. Your job is to play like 
you’re the compiler and say which one 

compiles, and why the other 



margarita m = {2.0, 1.0, {0.5}}; 

^'This ohC Compiles pcv-'Pcdily. Its 

adtually jus*t okc <rf *tbe dv-mks above/ 

margarita m; 

= {2.0, 1.0, {0.5}}; 


one doesnt. ^ d^sn't compile because the compiler 'will ov>ly know 

ibai {2 -O, I O, {O*?}} represents a struct i-f it s used on tbe 
same line that a struct is declared- When it's on a separate 
ine, tbe Compiler thinks it’s an array- you are here ► 253 


www.it-ebooks.info 










































unions and type 


Hey, wait a minute... You're setting all these 
different values with all these different types 
and you're storing them in the same place in 
memory... How do I know if I stored a float in there 
once I've stored it? What's to stop me from 
reading it as a short or something??? Hello? 


That’s a really good point: you can store lots of 
possible values in a union, but you have no way 
of knowing what type it was once it’s stored. 

The compiler won’t be able to keep track of the fields that are set 
and read in a union, so there’s nothing to stop us setting one field 
and reading another. Is that a problem? Sometimes it can be a 

BIG PROBLEM 


^include <stdio.h> 


typedef union { 
float weight; 
int count; 

} cupcake; 


By mistake, -the 
programmer has set the 
int main () weight, hot the douht- 

{ >1 
cupcake order = (2); 

printf("Cupcakes quantity: 

return 0; 


She set the weight, V»*t 
she’s reading the towft 

i\n", order.count); 


I File Edit Window Help 



This is v/ha*t pvoyar* did- 




} 


> gcc badunion.c -o badunion && 
Cupcakes quantity: 1073741824 


. /badunion 


That's a lot o( Cupcakes... 


You need some way, then, of keeping track of the 
values we’ve stored in a union. One trick that some G 
coders use is to create an enum. 

■0, 9 






254 


w. )J, 




-vn 

W 9 ^ 



*-t i : 

A M AW 







YT ; 

















structs, unions, and bitfields 


Aw ewuw variable stores a symbol 

Sometimes you don’t want to store a number or a piece 
of text. Instead, you want to store something from a list of 
symbols. If you want to record a day of the week, you only 
want to store MONDAY, TUESDAY, WEDNESDAY, etc. You 
don’t need to store the text, because there are only ever going 
to be seven different values to choose from. 

That’s why enums were invented. 

enum lets you create a list of symbols, like this: 


Possible Colors 

,h your ehur*. 




enum colors {RED, GREEN, PUCE}; 

N. 


be values are separated by domras. 

It > 


/ou dould have jive* tbe type a proper name v/itb typedet. 


Any variable that is defined with a type of enum colors 
can then only be set to one of the keywords in the list. So you 
might define an enum colors variable like this: 

enum colors favorite = PUCE; 

Under the covers, the computer will just assign numbers to 
each of the symbols in your list, and the enum will just store a 
number. But you don’t need to worry about what the numbers 
are; your G code can just refer to the symbols. That’ll make 
your code easier to read, and it will prevent storing values like 
REB or PUSE: 



Watch it! 


structs and 
unions 
separate 
items with 


semicolons (;), 
but enums use commas. 



So that’s how enums work, but how do they 
help you keep track of unions? Let’s look at 
an example... 



you are here ► 255 


www.it-ebooks.info 









code magnets 



Code Magnets 


Because you can create new data types with enums, you can store them inside 
structs and unions. In this program, an enum is being used to track the kinds of 
quantities being stored. Do you think you can work out where the missing pieces of 
code go? 


#include <stdio.h> 

typedef enum { 

COUNT, POUNDS, PINTS 
} unit_of_measure; 

typedef union { 
short count; 
float weight; 
float volume; 

} quantity; 

typedef struct { 
const char *name; 
const char ^country; 
quantity amount; 
unit_of_measure units; 

} fruit_order; 

void display(fruit_order order) 

{ 

printf ("This order contains ”); 

if ( == PINTS) 

printf("%2.2f pints of %s\n M , order.amount. , order.name); 


256 Chapter 5 


www.it-ebooks.info 









structs, unions, and bitfields 


else if ( == ) 

printf("%2.2f lbs of %s\n", order.amount.weight, order.name); 
else 

printf ("%i %s\n", order.amount. , order.name); 

} 

int main() 

{ 


fruit_order apples = {"apples", "England", .amount.count=144, }; 

fruit_order strawberries = {"strawberries", "Spain", .amount. =17.6, POUNDS} 

fruit_order oj = {"orange juice", "U.S.A.", .amount.volume=10.5, }; 

display(apples); 

display(strawberries); 

display(oj); 

return 0; 



you are here ► 257 


www.it-ebooks.info 




















magnets solved 



Code Magnets Solution 

Because you can create new data types with enums, you can store them inside 
structs and unions. In this program, an enum is being used to track the kinds of 
quantities being stored. Were you able to work out where the missing pieces of code 
go? 


#include <stdio.h> 


typedef enum { 

COUNT, POUNDS, PINTS 
} unit_of_measure; 

typedef union { 
short count; 
float weight; 
float volume; 

} quantity; 


typedef struct { 
const char *name; 
const char ^country; 
quantity amount; 
unit_of_measure units; 
} fruit order; 


void display(fruit_order order) 

{ 

printf ("This order contains ”); 



= PINTS) 


printf("%2.2f pints of %s\n M , order.amount 



order.name); 


258 Chapter 5 


www.it-ebooks.info 













structs, unions, and bitfields 


else if ( 




) 


printf ("%2.2f lbs of %s\n", order.amount.weight, order.name); 
else 


printf("%i %s\n", order.amount. 



, order.name); 


int main() 

{ 


fruit order apples 


{"apples", "England", 


.amount.count=144, J COUNT 



fruit_order strawberries = {"strawberries", 

fruit_order oj = {"orange juice", "U.S.A.", 

display(apples); 

display(strawberries); 

display(oj); 

return 0; 


"Spain", .amount 



=17.6, POUNDS} 


.amount.volume=10.5, 



When you run *the pv-otyram, you “this: 


File Edit Window Help 


> gcc enumtest.c -o enumtest 

This order contains 144 apples 

This order contains 17.60 lbs of strawberries 

This order contains 10.50 pints of orange juice 


you are here ► 259 


www.it-ebooks.info 

























overheard 



union: .. .so I said to the code, “Hey, look. I don’t care 
if you gave me a float or not. You asked for an int. 
You got an int.” 

Struct: Dude, that was totally uncalled for. 

union: That’s what I said. It’s totally uncalled for. 

Struct: Everyone knows you only have one storage 
location. 

union: Exactly. Everything is one. I’m, like, Zen that 
way... 

enum: What happened, dude? 

struct: Shut up, enum. I mean, the guy was crossing 
the line. 

union: I mean, if he had just left a record. You know, 
said, I stored this as an int. It just needed an enum or 
something. 

enum: You want me to do what? 

Struct: Shut up, enum. 

union: I mean, if he’d wanted to store several things at 
once, he should have called you, am I right? 

Struct: Order. That’s what these people don’t grasp. 

enum: Ordering what? 

Struct: Separation and sequencing. I keep several 
things alongside each other. All at the same time, dude. 

union: That’s just my point. 

struct: All. At. The. Same. Time. 

enum: (Pause) So has there been a problem? 

union: Please, enum? I mean these people just need to 


make a decision. Wanna store several things, use you. 

But store just one thing with different possible types? 
Dude’s your man. 

Struct: I’m calling him. 

union: Hey, wait... 

enum: Who’s he calling, dude? 

struct/union: Shut up, enum. 

union: Look, let’s not cause any more problems here. 

struct: Hello? Gould I speak to the Bluetooth service, 
please? 

union: Hey, let’s just think about this. 

Struct: What do you mean, he’ll give me a callback? 

union: I’m just. This doesn’t seem like a good idea. 

Struct: No, let me leave you a message, my friend. 

union: Please, just put the phone down. 

enum: Who’s on the phone, dude? 

struct: Be quiet, enum. Can’t you see I’m on the phone 
here? Listen, you just tell him that if he wants to store a 
float and an int, he needs to come see me. Or I’m 
going to come see him. Understand me? Hello? Hello? 

union: Easy, man. Just try to keep calm. 

Struct: On hold? They put me on A *& A ing hold! 

union: They what? Pass me the phone... Oh.. .that... 
man. The Eagles! I hate the Eagles... 

enum: So if you pack your fields, is that why you’re so 
fat? 

Struct: You are entering a world of pain, my friend. 


260 Chapter 5 


www.it-ebooks.info 



structs, unions, and bitfields 


Sometimes you want control at the bit level 


Let’s say you need a struct that will contain a lot of yes/no values. 
You could create the struct with a series of shorts or ints: 


typedef struct { 

short low pass_vcf; 
short filter_coupler; 
short reverb; 
short sequential; 


Each o-f -these -fields 
will Contain I -fof 
-fo-ue or O (or -false- 



} synth; 


There are a lo^; more -fields -thai -foil ow -this. 
Eaeh -field will use many bi-ts- 

c 



0000000000000001 

0000000000000001 

0000000000000001 

• • • 


And that would work. The problem? The short fields will take up 
a lot more space than the single bit that you need for true/false 
values. It’s wasteful. It would be much better if you could create a 
struct that could hold a sequence of single bits for the values. 

That’s why bitfields were created. 



Geek Binary Digits 



When you're dealing with binary value, it would be 
great if you had some way of specifying the 1 s and Os 
in a literal, like: 


converting binary and decimal? The good news is 
that you can convert hex to binary one digit at a 
time: 


int x = 01010100; 

Unfortunately, C doesn't support binary literals, but 

it does support hexadecimal literals. Every time 

C sees a number beginning with Ox, it treats the 

number as base 16 : . , . 

^This is no*l decimal 

int x = 0x54; 

But how do you convert back and forth between 
hexadecimal and binary? And is it any easier than 


0x54 


This is *?. 


UJ 


0101 


/ \ 


0100 




This is 



Each hexadecimal digit matches a binary digit of 
length 4. All you need to learn are the binary patterns 
for the numbers 0-15, and you will soon be able to 
convert binary to hex and back again in your head 
within seconds. 


you are here ► 261 


www.it-ebooks.info 












take care of your bits 


Pitfields store a custom number of bits 

A bitfield lets you specify how many bits an individual 
field will store. For example, you could write your 
struct like this: 


Eadh -field should 
be an unsigned in-fc. 


typedef struct { 

unsigned int low_j?ass_vcf: 1; 

unsigned int filter coupler: l;-x 

* _ * ' f-- mea „ s J., e |d will 

unsigned int reverb: 1 ; 0 *|y use | bit of storage, 

unsigned int sequential:1; 



} synth; 


By us*m^ bitf ields, you dan make 
eadb -field -takes up only one bit 


sure 

\ 



If you have a sequence of bitfields, the computer can 
squash them together to save space. So if you have 
eight single-bit bitfields, the computer can store them in a 
single byte. 



Bitfields can save 
space if they are 
collected together 
in a struct. 


But if the compiler 
finds a single bitfield on its own, it 
might still have to pad it out to the 
size of a word. That’s why bitfields 
are usually grouped together. 


Let’s see how how good you are at using 
bitfields. 


IJow many bits do I need? 

Bitfields can be used to store a sequence of true/false values, but they're 
also useful for other short-range values, like months of the year. If you want 
to store a month number in a struct, you know it will have a value of, 
say, 0-11. You can store those values in 4 bits. Why? Because 4 bits let you 
store 0-15, but 3 bits only store 0-7. 


unsigned int month no:4; 


262 Chapter 5 


www.it-ebooks.info 











structs, unions, and bitfields 



Back at the Head First Aquarium, they’re creating a customer satisfaction survey. Let’s see if you 
can use bitfields to create a matching struct. 






Aquarium Questionnaire 


Is this your first visit? 

Will you come again? 

Number of fingers lost in the piranha tank; 

Did you lose a child in the shark exhibit? 

How many days a week would you visit if you could? 


^ You Y\ttd io dedide 

typedef struct { vV V, 0 w rr,a*y bits to use- 

unsigned int first_visit: ; 

unsigned int come_again: ; 

unsigned int fingers lost: ; 

unsigned int shark_attack: ; 

unsigned int days_a_week: ; 

} survey; 


you are here ► 263 


www.it-ebooks.info 














exercise solved 




EmctSe 

lut\OH 



Back at the Head First Aquarium, they’re creating a customer satisfaction survey. You were to 
use bitfields to create a matching struct. 






Aquarium Questionnaire 


Is this your first visit? 

Will you come again? 

Number of fingers lost in the piranha tank; 

Did you lose a child in the shark exhibit? 

How many days a week would you visit if you could? 


typedef struct 
unsigned int 
unsigned int 
unsigned int 
unsigned int 
unsigned int 
} survey; 


{ 


first_visit: 
come_again: | 

fingers lost: 
shark_attack: 
days a week: 



I bit £3* short 2. 
values: true/-false. 

bits are heeded 
to stove up to 10. 


Z bits la* stove 

numbevs up to7- 


264 Chapter 5 


www.it-ebooks.info 















structs, unions, and bitfields 


O: Why doesn’t C support binary 
literals? 

Because they take up a lot of space, 
and it’s usually more efficient to write hex 
values. 

Qj Why do I need 4 bits to store a 
value up to 10? 

Four bits can store values from 0 to 
binary 1111, which is 15. But 3 bits can only 
store values up to binary 111, which is 7. 


tliere .are no 

■ Dumb Questions 

% So what if I try to put the value 9 
into a 3-bit field? 

The computer will store a value of 1 
in it, because 9 is 1001 in binary, so the 
computer transfers 001. 

% Are bitfields really just used to 
save space? 

No. They’re important if you need to 
read low-level binary information. 




Such as? 


If you’re reading or writing some sort 
of custom binary file. 



BULLET POINTS 


■ A union allows you to store 
different data types in the same 
memory location. 


■ A designated initializer sets a field 
value by name. 


The compiler will let you store 
one field in a union and read a 
completely different field. But be 
careful! This can cause bugs. 

enums store symbols. 


■ Designated initializers are part of 
the C99 standard. They are not 
supported in C++. 

■ If you declare a union with a value 
in {braces}, it will be stored with the 
type of the first field. 


Bitfields allow you to store a field with 
a custom number of bits. 

Bitfields should be declared as 

unsigned int. 


you are here ► 265 


www.it-ebooks.info 








c toolbox 


Your C Toolbox 

You’ve got Chapter 5 under 
your belt, and now you’ve 
added structs, unions, and 
bitfields to your toolbox. For a 
complete list of tooltips in the book, 
see Appendix ii. 



A struct 
comWes data 
types to^er 

You dan 

you dan v-ead 
stv"udt -f ields 
with dot 
notation- 

initialize 

t 

strudts with 


farray, like, 


notation}. 




—> notation 
lets you easily 
update -fields 
using a struct 
pointer. 




unions dan hold 
different data 
types in one 
lodation. 


Designated 
initializes let 
you set stv-udt 
and union -fields 
by name- 


enums let 'I 0 '* 
create a set 

of s'fmto\s- 



Bitfields give 
you Control 
over tbe e^act 
bits stored in a 
struct- 


266 Chapter 5 


www.it-ebooks.info 









6 data structures and dynamic memory 



Sometimes, a single struct is simply not enough. 

To model complex data requirements, you often need to link structs together. In 
this chapter, you’ll see how to use struct pointers to connect custom data types into 
large, complex data structures. You’ll explore key principles by creating linked lists. 
You’ll also see how to make your data structures cope with flexible amounts of data by 
dynamically allocating memory on the heap, and freeing it up when you’re done. And if 
good housekeeping becomes tricky, you’ll also learn how valgrind can help. 


this is a new chapter 


267 


www.it-ebooks.info 





flexible data 


Po you need flexible storage? 

You’ve looked at the different kinds of data that you can store in G, and 
you’ve also seen how you can store multiple pieces of data in an array 
But sometimes you need to be a little more flexible. 

Imagine you’re running a travel company that arranges flying tours 
through the islands. Each tour contains a sequence of short flights from 
one island to the next. For each of those islands, you will need to record 
a few pieces of information, such as the name of the island and the 
hours that its airport is open. So how would you record that? 

You could create a struct to represent a single island: 



Co£oniA*t Always -flics 

C flakes between tbe 

islands. 


typedef struct { 
char *name; 
char *opens; 
char ^closes; 

} island; 


Now if a tour passes through a sequence of islands, that means you’ll need 
to record a list of islands, and you can do that with an array of islands: 



But there’s a problem. Arrays are fixed length, which means they’re not 
very flexible. You can use one if you know exactly how long a tour will be. 
But what if you need to change the tour? What if you want to add an extra 
destination to the middle of the tour? 


To store a flexible amount of data, you need something 
more extensible than an array. You need a linked list. 

268 Chapter 6 


www.it-ebooks.info 



data structures and dynamic memory 


Linked lists are like chains of data 

A linked list is an example of an abstract data structure. 

It’s called an abstract data structure because a linked list is 
general : it can be used to store a lot of different kinds of data. 

To understand how a linked list works, think back to our tour 
company. A linked list stores a piece of data, and a link to 
another piece of data. 





You arc s-fcor'mg a piede o-f 
da-ta -for eadh island- 


In a linked list, as long as you know where the list starts, you can 
travel along the list of links, from one of piece of data to the next, 
until you reach the end of the list. Using a pencil, change the list 
so that the tour includes a trip to Skull Island between Craggy 
Island and Isla Nublar. 



Craggy 



Isla Nublar 


you are here ► 269 


www.it-ebooks.info 






tour changed 



J W W ■ ■ w ■ ■ 

Solution 


In a linked list, as long as you know where the list starts, you 
can travel along the list of links, from one of piece of data to the 
next, until you reach the end of the list. Using a pencil, you were 
to change the list so that the tour includes a trip to Skull Island 
between Craggy Island and Isla Nublar. 



|sla Nubian 


Linked lists allow inserts 


With just a few changes, you were able to add an extra step 
to the tour. That’s another advantage linked lists have over 
arrays: inserting data is very quick. If you wanted to 
insert a value into the middle of an array , you would have to 
shuffle all the pieces of data that follow it along by one: 


l-f you u/ahted to msert a* extra value 
after Craggy Island, you'd have -to move 
the other values alohg one spate- 

sL 


This 


is ah 


array. 


Amity 

Craggy 

Isla Nublar 

Shutter 


So linked lists allow you to store a variable amount of 
data, and they make it simple to add more data. 


i d betause ah array is -fixed 
length, you'd lose Shutter /stand- 


But how do you create a linked list in C? 


270 Chapter 6 


www.it-ebooks.info 










data structures and dynamic memory 


Create a recursive structure 

Each one of the structs in the list will need to connect to 
the one next to it. A struct that contains a link to another 
struct of the same type is called a recursive structure. 


This is a recursive 
structure (or a* island- 


You need to record all ol the 
usual details (or the island... 




Another Island 


...but you also need to give the 
island a link to the next island- 


Recursive structures contain pointers to other structures of the 
same type. So if you have a flight schedule for the list of islands 
that you’re going to visit, you can use a recursive structure for 
each island. Let’s look at how that works in more detail: 


You’ll record 
these details 
-for each 
island- 



\s\and airpor-t 


Mam©'- 

ftmi-tu 

Opens'- 


C\oses : 

I sPm 

Mex-t island'- 

1 Crao ffi 


For each island, you II also record the next island- 


How do you store a link from one struct to the 
next? With a pointer. That way, the island data will 
contain the address of the next island that we’re 
going to visit. So, whenever our code is at one island, 
it will always be able to hop over to the next island. 

Let’s write some code and start island 
hopping. 


You must give the struct a name- 

_X 


typedef struct island { 
char *name; 
char *opens; 
char ^closes; 
struct island *next; 
} island; 




You ii use 
strings -for 
the name 
and opening 
times. 


You store a 
pointer to the 
next island in 
the struct- 



Watch it! 


Recursive structures 
need names. 


If you use the typedef 
command, you can normally 
skip giving the struct a proper 
name. But in a recursive structure, you need 
to include a pointer to the same type. C 
syntax won’t let you use the typedef alias, 
so you need to give the struct a proper 
name. That’s why the struct here is called 
struct island. 


you are here ► 271 


www.it-ebooks.info 














link islands 


Create islands in C... 


Once you have defined an island data type, you can create 
the first set of islands like this: 



This tode will tveate island 
stvwfrts (or eath of "the islands- 


island amity = {"Amity", ”09:00", "17:00", NULL}; 
island craggy = {"Craggy", "09:00", "17:00", NULL}; 
island isla_nublar = {"Isla Nublar", "09:00", "17:00", NULL}; 
island shutter = {"Shutter", "09:00", "17:00", NULL}; 



Did you notice that we originally set the next field in each 
island to NULL? In G, NULL actually has the value 0, but 
it’s set aside specially to set pointers to 0. 




...and link them together to form a tour 


Once you’ve created each island, you can then 
connect them together: 


amity.next = Scraggy; 
craggy.next = &isla_nublar; 
isla nublar.next = Sshutter; 


You have to be careful to set the next field in each island 
to the address of the next island. You’ll use struct 
variables for each of the islands. 


Shutter 


So now you’ve created a complete island tour in G, but what 
if you want to insert an excursion to Skull Island between Isla 
Nublar and Shutter Island? 


272 Chapter 6 


www.it-ebooks.info 



data structures and dynamic memory 


Inserting values into the list 


You can insert islands just like you did earlier, by changing the values 
of the pointers between islands: 



TVus line eveates 
Skull Island- 


island skull = {"Skull", "09:00", "17:00", NULL}; 
isla_nublar.next = &skull; ^—- This donnedis |sla Kublar -to Skull, 
skull .next = &shutter; ^-Tbis donned-U Skull *to Shutter Island- 


In just two lines of code, you’ve inserted a new value into 
the list. If you were using an array, you’d write a lot more 
code to shuffle items along the array 


Shutter 


OK, you’ve seen how to create and use linked 
lists. Now let’s try out your new skills... 



Code Magnets 


Oh, no, the code for the display () function was on the fridge door, but 
someone's mixed up the magnets. Do you think you can reassemble the code? 


void display(island *start) 

{ 

island *i = start; 


for (; i 


i 


) { 



www.it-ebooks.info 

























magnets solved 



Code Magnets Solution 

Oh, no, the code for the display () function was on the fridge door, but 
someone's mixed up the magnets. Were you able to reassemble the code? 


void display(island * 


You doY \-1 { 


need any 
ex-tva 

island *i = start; 

todc at 

for (; i | '■ = | 

the stav-r 

of -the 

loop. 



printf("Name: %s 

} 

} 


start) 

You need -to keep looping until tke 
duvvent island kas no ne*t value- 





open: %s-%s\n", I i->name 


At the end of eath loop, 
skip to the nex-fc island- 





there*are no 

Dumb Questions 


% Other languages, like Java, have 
linked lists built in. Does C have any 
data structures? 


C doesn’t really come with any data 
structures built in. You have to create them 
yourself. 


That’s not very good. I thought a 
linked list was better than an array. 


You shouldn’t think of data structures 
as being better or worse. They are either 
appropriate or inappropriate for what you 
want to use them for. 


V What if I want to use the 700th 
item in a really long list? Do I have to 
start at the first item and then read all 
the way through? 


A 


I Yes, you do. 


% So if I want a data structure that 
lets me insert things quickly, I need a 
linked list, but if I want direct access I 
might use an array? 


A 


Exactly. 


O: You’ve shown a struct that 
contains a pointer to another struct. 
Can a struct contain a whole 
recursive struct inside itself? 



No. 



Why not? 


C needs to know the exact amount of 
space a struct will occupy in memory. 

If it allowed full recursive copies of the 
same struct, then one piece of data 
would be a different size than another. 


274 Chapter 6 


www.it-ebooks.info 



























data structures and dynamic memory 



Let’s use the display () function on the linked list of islands 
and compile the code together into a program called tour. 


island amity = {"Amity", "09:00", "17:00", NULL}; 
island craggy = {"Craggy", "09:00", "17:00", NULL}; 
island isla_nublar = {"Isla Nublar", "09:00", "17:00", NULL}; 
island shutter = {"Shutter", "09:00", "17:00", NULL}; 


amity.next = Scraggy; 


craggy.next = &isla_nublar; 
isla_nublar.next = Sshutter; 

island skull = {"Skull", "09:00", "17:00", NULL}; 
isla_nublar.next = Sskull; 
skull.next = Sshutter; 
display(Samity); 

Excellent. The code creates a linked list of islands, and 
you can insert items with very little work. 

OK, so now that you know the basics of how to work with 
recursive structs and lists, you can move on to the main 
program. You need to read the tour data from a file that 
looks like this: 


File Edit Window Help GetBiaaerBoat 

> gcc 

tour.c -o tour && ./tour 

Name: 

Amity 

Open: 

09:00-17:00 

Name: 

Craggy 

Open: 

09:00-17:00 

Name: 

Isla Nublar 

Open: 

09:00-17:00 

Name: 

Skull 

Open: 

09:00-17:00 

Name: 

Shutter 

Open: 

09:00-17:00 

> 



There will 
be some 
more lines 
a-Pter ibis. 


Delfino Isle 
Angel Island 
Wild Cat Island 



Neri's Island 
Great Todday 


The folks at the airline are still creating the file, so you won’t 
know how long it is until runtime. Each line in the file is the 
name of an island. It should be pretty straightforward to turn 
this file into a linked list. Right? 



The P^lxfe Guide 
t<§ Standards 


The code on this page declares 
a new variable, skull, right in 
the middle of the code. This is 
allowed only in C99 and C11. 

In ANSI C, you need to declare 
all your local variables at the 
top of a function. 


you are here ► 275 


www.it-ebooks.info 



















dynamic storage 




Hmmm... So far, we've used a separate variable 
for each item in the list. But if we don't know how 
long the file is, how do we know how many variables 
we need? I wonder if there's some way to generate 
new storage when we need it. 



Yes, you need some way to create 
dynamic storage . 

All of the programs you’ve written so far have used 
static storage. Every time you wanted to store something, 
you’ve added a variable to the code. Those variables have 
generally been stored in the stack. Remember: the stack 
is the area of memory set aside for storing local variables. 

So when you created the first four islands, you did it like 
this: 


island amity = {"Amity", "09:00", "17:00", NULL}; 
island craggy = ("Craggy", "09:00", "17:00", NULL}; 
island isla_nublar = ("Isla Nublar", "09:00", "17:00" 
island shutter = ("Shutter", "09:00", "17:00", NULL}; 


Each island struct needed its own variable. This piece 
of code will always create exactly four islands. If you 
wanted the code to store more than four islands, you 
would need another local variable. That’s fine if you know 
how much data you need to store at compile time, but quite 
often, programs don’t know how much storage they need until 
runtime. If you’re writing a web browser, for instance, you 
won’t know how much data you’ll need to store a web page 
until, well, you read the web page. So G programs need some 
way to tell the operating system that they need a little extra 
storage, at the moment that they need it. 

Programs need dynamic storage. 


276 Chapter 6 



m 


NULL}; 


www.it-ebooks.info 







data structures and dynamic memory 



you are here ► 277 


www.it-ebooks.info 
















mallocQ 


Use the heap for dynamic storage 

Most of the memory you’ve been using so far has been in the 
stack. The stack is the area of memory that’s used for local 
variables. Each piece of data is stored in a variable, and each 
variable disappears as soon as you leave its function. 

The trouble is, it’s harder to get more storage on the stack at 
runtime, and that’s where the heap comes in. The heap is 
the place where a program stores data that will need to be 
available longer term. It won’t automatically get cleared away, 
so that means it’s the perfect place to store data structures like 
our linked list. You can think of heap storage as being a bit 
like reserving a locker in a locker room. 

First get your memory with mallocO 



r 


Heap stov-age is like saving 
valuables in a lodkev-. 


Imagine your program suddenly finds it has a large 
amount of data that it needs to store at runtime. This 
is a bit like asking for a large storage locker for the 
data, and in G you do that with a function called 
malloc (). You tell the malloc () function exactly 
how much memory you need, and it asks the operating 
system to set that much memory aside in the heap. The 
malloc () function then returns a pointer to the new 
heap space, a bit like getting a key to the locker. It allows 
you access to the memory, and it can also be used to 
keep track of the storage locker that’s been allocated. 



The heay 



I 1 

LIJMJtv A6, #VAKSIZE 
-MOVEM.L D0-D7/A1-A5,-(SP)- 

MmrHT.SP AR'l 

1 ■ 





-MOVE.L SP. SAVE AS ('AG') 






MOVE.L GRAFGL0BALS(A5),A 

~ i ■■( rjH. 

0 



J p 










TT..-T 



278 Chapter 6 


www.it-ebooks.info 



















































data structures and dynamic memory 


(rive the memory back whew you're done 

The good news about heap memory is that you can keep hold of it for a 
really long time. The bad news is.. .you can keep hold of it for a really 
long time. 

When you were just using the stack, you didn’t need to worry about 
returning memory; it all happened automatically. Every time you leave a 
function, the local storage is freed from the stack. 

The heap is different. Once you’ve asked for space on the heap, it 
will never be available for anything else until you tell the G Standard 
Library that you’re finished with it. There’s only so much heap memory 
available, so if your code keeps asking for more and more heap space, 
your program will quickly start to develop memory leaks. 

A memory leak happens when a program asks for more and more 
memory without releasing the memory it no longer needs. Memory 
leaks are among the most common bugs in G programs, and they can be 
really hard to track down. 


The heap has 
only a fixed 
amount ol 
storage available, 
so be sure you 
use it wisely. 


Free memory by calling the freeO function 

The malloc () function allocates space and gives you a pointer to it. 
You’ll need to use this pointer to access the data and then, when you’re 
finished with the storage, you need to release the memory using the 
free () function. It’s a bit like handing your locker key back to the 
attendant so that the locker can be reused. 



Every time some part of your code requests heap storage with the 
malloc () function, there should be some other part of your code 
that hands the storage back with the free () function. When 
your program stops running, all of its heap storage will be released 
automatically, but it’s always good practice to explicitly call free () 
on every piece of dynamic memory you’ve created. 

Let’s see how malloc() and free() work. 


you are here ► 279 


www.it-ebooks.info 





freeQ 


Ask for memory with mallocO... 


The function that asks for memory is called malloc () 
for memory allocation, malloc () takes a single parameter: 
the number of bytes that you need. Most of the time, you 
probably don’t know exactly how much memory you need 
in bytes, so malloc () is almost always used with an 
operator called sizeof, like this: 

• ^ You »«d to W*Me stdl j.v, 

#include <stdlib.h> - ^ the mallotO and WeeO tunttio** 


malloc(sizeof(island)) 



This means, u £jive me enough spade 
•bo store an island strudt” 


sizeof tells you how many bytes a particular data type 
occupies on your system. It might be a struct, or it could 
be some base data type, like int or double. 

The malloc () function sets aside a chunk of memory 
for you, then returns a pointer containing the start address. 

But what kind of pointer will that be? malloc () actually 

returns a general-purpose pointer, with type void*. This me^s, "Create 

enough spade (or an 

island *p = malloc (sizeof (island) ) ; store the 

addv-ess in variable p w 


...and free up the memory with freeO 

Once you’ve created the memory on the heap, you can use 
it for as long as you like. But once you’ve finished, you need 
to release the memory using the free () function. 

free () needs to be given the address of the memory that 
malloc () created. As long as the library is told where the 
chunk of memory starts, it will be able to check its records 
to see how much memory to free up. So if you wanted to 
free the memory you allocated above, you’d do it like this: 


free(p); 



This means, "Release the memory you 
allodated -from heap address p” 


OK, now that we know more about dynamic 
memory, we can start to write some code. 


Remember: il 


allocated 


you 
memory 


with mallocO in one 
part of your program 
you should always 
release it later with 
the IreeO function. 


280 Chapter 6 


www.it-ebooks.info 


data structures and dynamic memory 


Oh, wo! It's the out-of-work actors... 


The aspiring actors are currently between jobs, so 
they’ve found some free time in their busy schedules 
to help you out with the coding. They’ve created a 
utility function to create a new island struct 
with a name that you pass to it. The function looks 
like this: 


This is the new tunfction. 


The name ot the island is 
passed as a chav- pointer. 


This will L>ctd{,t a 
new island struct 
on ihe heap. 


island* create (char *name) 

{ 


These lines sc*t *the 
-fields on “the new S'brud't- 



|Vs us’m^ *the r*allodO -function 
—— "ho dv-ea-te spade on -the heap. 


island *i = malloc(sizeof(island)); 


i->name = name; 
i->opens = "09:00”; 
i->closes = "17:00"; 




The sizeof opera-tov y/ov-ks out how 
n»any bytes av-e needed. 


i->next = NULL; 


} 


return i; 

A 

The tuhdtioh returns the 
address o-f the new s-fcrud-fc. 


That’s a pretty cool-looking function. The actors 
have spotted that most of the island airports have 
the same opening and closing times, so they’ve set 
the opens and closes fields to default values. 
The function returns a pointer to the newly created 
struct. 




VMM 


Look carefully at the code for the create () function. Do you think there 
might be any problems with it? Once you’ve thought about it good and 
hard, turn the page to see it in action. 


you are here ► 281 


www.it-ebooks.info 









the game is afoot 


The Case of the Vanishing Island 

Captain’s Log. 11:00. Friday. Weather clear. A create () function 
using dynamic allocation has been written, and the coding team says it 
is ready for air trials. 



island* create (char *name) 

{ 

island *i = malloc(sizeof(island)); 

i->name = name; 

i->opens = "09:00”; 

i->closes = "17:00"; 

i->next = NULL; 

return i; 


14:15. Weather cloudy. Northwest headwind 15kts near Bermuda. 
Landing at first stop. Software team on board providing basic code. 
Name of island entered at the command line. 


Create an array to store an island na**e. 
Ask V* user U tot ^e ot an island- 


char name[80]; 

-^fgets (name, 80, stdin) ; 

island *p islandO = create(name) 


r 


I Filp FHit Window Hpln _I 


> ./test_flight 
Atlantis 


14:45. Take off from landing strip rocky due to earth tremors. Software 
team still on board. Supplies of Jolt running low. 


282 Chapter 6 


www.it-ebooks.info 




data structures and dynamic memory 


15:35. Arrival at second island. Weather good. No wind. Entering 
details into new program. 


Ask "the use\r -fco the hdr*e 

0 + -the second island- 


This Connects "the tivs-t island 
■to the second island- 


fgets(name, 80, stdin); 

island *p_islandl = create(name) 

p_islandO->next = p islandl; 


This creates the 
setond island- 


[ Filp PH it Window Hpln 1 1 


Titchmarsh Island 


17:50 Back at headquarters tidying up on paperwork. Strange thing. 
The flight log produced by the test program appears to have a bug. 
When the details of today’s flight are logged, the trip to the first island 
has been mysteriously renamed. Asking software team to investigate. 


This will display -the details 
y the list of islands using the 
■function we Created earlier- 


display(p islandO); 


Filp Fdit Window Hpln 


What happened to Atlantis 


???? 


Name: Titchmarsh Island 
open: 09:00-17:00 
Name: Titchmarsh Island 
open: 09:00-17:00 


The first island now 
j>* the same name as 

the second i slandM 

• • • 


What happened to the name of the first island? Is there 
a bug in the create () function? Does the way it was 
called give any clues? 


you are here ► 283 


www.it-ebooks.info 







case solved 


The Case of the Vanishing Island 

What happened to the name of the first island? 

Look at the code of the create () function again: 


island* create(char *name) 


{ 


} 


island *i 
i->name = 
i->opens 
i->closes 
i->next = 
return i; 


= malloc(sizeof(island)); 


name; 

= "09:00"; 

= "17:00"; 
NULL; 



Fiveiylinijfe 

isiymy 

Solved 


When the code records the name of the island, it doesn’t take a copy of 
the whole name string; it just records the address where the name string 
lives in memory. Is that important? Where did the name string live? We 
can find out by looking at the code that was calling the function: 

char name[80]; 
fgets(name, 80, stdin); 
island *p_island0 = create(name); 
fgets(name, 80, stdin); 
island *p islandl = create(name); 


The program asks the user for the name of each island, but both times 
it uses the name local char array to store the name. That means that 

the two islands share the same name string. As soon as the local 
name variable gets updated with the name of the second island, the 
name of the first island changes as well. 


284 Chapter 6 


www.it-ebooks.info 


data structures and dynamic memory 


- String Crying Tip Close 

In G, you often need to make copies of strings. You could do that by calling the 
malloc () function to create a little space on the heap and then manually copying 
each character from the string you are copying to the space on the heap. But guess 
what? Other developers got there ahead of you. They created a function in the 
string.h header called strdup (). 



Let’s say that you have a pointer to a character array that you want to copy: 


char *s = "MONA LISA"; 



The strdup () function can reproduce a complete copy of the string somewhere 
on the heap: 

char *copy = strdup(s); 



The strdupO function works out how long the string is, and then 
calls the malloc() function to allocate the correct number of 
characters on the heap. 




That's 10 characters from 
position s to the \0 character, 
and malloc(lO) tells me I've got 
space starting on the heap at 
location 2,500,000. 


It then copies each of the characters to the new space on the heap. 




That means that strdup () always creates space on the heap. It can’t create space on 
the stack because that’s for local variables , and local variables get cleared away too often. 

But because strdup () puts new strings on the heap, that means you must always 
remember to release their storage with the free () function. 


you are here ► 285 


www.it-ebooks.info 























use strdupQ 


let's fix the code using the strdupO function 


You can fix up the original create () function using the 
strdup () function, like this: 

island* create (char *name) 


{ 

island *i = malloc(sizeof(island)); 


i->name = strdup (name) ; 

i->opens = "09:00"; 
i->closes = "17:00"; 
i->next = NULL; 
return i; 

} 

You can see that we only need to put the strdup () function on 
the name field. Gan you figure out why that is? 

It’s because we are setting the opens and closes fields to string 
literals. Remember way back when you saw where things were 
stored in memory? String literals are stored in a read-only area 
of memory set aside for constant values. Because you always 
set the opens and closes fields to constant values, you don’t 
need to take a defensive copy of them, because they’ll never 
change. But you had to take a defensive copy of the name array, 
because something might come and update it later. 

So docs it fix the code? 

To see if the change to the create () function fixed the code, 
let’s run your original code again: 


tliereiare no 

- Dumb Questions ~ 

% If the island struct had a 
name array rather than a character pointer, 
would I need to use strdup () here? 

No. Each island struct would 
store its own copy, so you wouldn’t need to 
make your own copy. 

% So why would I want to use char 
pointers rather than char arrays in my 
data structures? 

char pointers won’t limit the amount of 
space you need to set aside for strings. If you 
use char arrays, you will need to decide in 
advance exactly how long your strings might 
need to be. 


I File Edit Window Help CoconutAirways 


> ./test_flight 
Atlantis 

Titchmarsh Island 
Name: Atlantis 
open: 09:00-17:00 
Name: Titchmarsh Island 
open: 09:00-17:00 


Now that code works. Each time the user enters the name of an island, 
the create () function is storing it in a brand-new string. 


OK, now that you have a function to create island 
data, let’s use it to create a linked list from a file. 

286 Chapter 6 


www.it-ebooks.info 








data structures and dynamic memory 


pea] puzzjc 

Catastrophe! The code to create an island tour has 
fallen into the pool! Your job is to take code 
snippets from the pool and place them into the 
blank lines in the code below. Your goal is to 
reconstruct the program so that it can read a list 
of names from Standard Input and then connect 
them together to form a linked list. You may not 
use the same code snippet more than once, and 
you won't need to use all the pieces of code. 



island *start = NULL; 
island *i = NULL; 
island *next = NULL; 
char name[80]; 

for (; . ! = .; i = .) { 

next = create(name); 
if (start == NULL) 

start = ; 

if (i != NULL) 

i = next; 

} 

display(start); 


Note: each thing from 
the pool can be used 
only once! 



you are here ► 


287 


www.it-ebooks.info 














out of the pool 



P®o] plizzje 

Catastrophe! The code to create an island tour has 
fallen into the pool! Your job was to take code 
snippets from the pool and place them into the 
blank lines in the code below. Your goal was to 
reconstruct the program so that it can read a list 
of names from Standard Input and then connect 
them together to form a linked list. 


island *start = NULL; 

island *i = NULL; At the end of 1 eadh 

. , , . . , TTTT T loop, s et i to the next 

island *next = NULL; . • i _ i . . , , 

Read a stv’m<\ *the Standard island we Seated- 

char name[80] ; ^ i 

for(; fgets(name, 80, stdin) ! = NULL ; i = next ) { 

This Creates ^>next = create (name) ; 7* 

a» island We'll keep looping until we don t get any »«ore string. 

_ ___I he -hirst tin>e through, start is set to 

start = .next ...6^1..; HULL, so set it to the -first island- 

if (i != NULL) 

i .->. next . = next; 

} ^ 

display (start) ; Dont -forget 1 i is a pointer, so 

well use -> no-taiio*. 


Note: each thing from 



288 Chapter 6 


www.it-ebooks.info 















data structures and dynamic memory 


But wait! You're not done yet. Don't forget that if you ever 
allocate space with the malloc () function, you need to 
release the space with the free () function. The program 
you've written so far creates a linked list of islands in heap 
memory using malloc () , but now it's time to write some code 
to release that space once you're done with it. 

Here's a start on a function called release () that will release 
all of the memory used by a linked list, if you pass it a pointer to 
the first island: 

void release(island *start) 

{ 

island *i = start; 
island *next = NULL; 
for (; i != NULL; i = next) { 
next = ; 



} 


} 


Think very carefully. When you release the memory, what will you need to free? Just the island, or 
something more? In what sequence should you free them? 


you are here ► 


289 


www.it-ebooks.info 









sharpen your pencil 



But wait! You're not done yet. Don't forget that if you ever 
allocate space with the malloc () function, you need to 
release the space with the free () function. The program 
you've written so far creates a linked list of islands in heap 
memory using malloc (), but now it's time to write some code 
to release that space once you're done with it. 

Here's a start on a function called release () that will release 
all of the memory used by a linked list, if you pass it a pointer to 
the first island: 


void release(island *start) 

{ 

island *i = start; 

island *next = NULL; 

for (; i != NULL; i = next) { 

^ n next = i->r\C*t ^ Set ne%‘l bo fomt *to bte next island- 

riv-st, you need bo Wee- -- r . ". 

the name string that 

Created with strdupO. .-frecO. .; Orb) a-fter -freeing the name 

} should you -free the island struct 

AT 

1-f you'd -freed the island -first, you might not 
have been able to reach the name to tree it- 

When you release the memory, what will you need to free? Just the island, or something more? In 
what sequence should you free them? 


Free the memory whew you Ye done 

Now that you have a function to free the linked list, you’ll 
need to call it when you’ve finished with it. Your program 
only needs to display the contents of the list, so once you’ve 
done that, you can release it: 

display(start); 
release (start); 

Once that’s done, you can test the code. 


290 Chapter 6 


www.it-ebooks.info 









data structures and dynamic memory 



So, if you compile the code and then run the file through it, what 
happens? 


| File Edit Window Help FreeSpaceYouDon’tNeed | 


> ./tour < tripl.txt 
Name: Delfino Isle 
Open: 09:00-17:00 
Name: Angel Island 
Open: 09:00-17:00 
Name: Wild Cat Island 
Open: 09:00-17:00 
Name: Neri's Island 
Open: 09:00-17:00 
Name: Great Todday 
Open: 09:00-17:00 
Name: Ramita de la Baya 
Open: 09:00-17:00 
Name: Island of the Blue Dolphins 
Open: 09:00-17:00 
Name: Fantasy Island 
Open: 09:00-17:00 
Name: Fame 
Open: 09:00-17:00 
Name: Isla de Muert 
Open: 09:00-17:00 
Name: Tabor Island 
Open: 09:00-17:00 
Name: Haunted Isle 
Open: 09:00-17:00 
Name: Sheena Island 
Open: 09:00-17:00 


It works. Remember: you had no way of knowing how long that 
file was going to be. In this case, because you are just printing out 
the file, you could have simply printed it out without storing it all 
in memory. But because you do have it in memory, you’re free to 
manipulate it. You could add in extra steps in the tour, or remove 
them. You could reorder or extend the tour. 

Dynamic memory allocation lets you create the 
memory you need at RUNTIME. And the way you 
access dynamic heap memory is with malloc () and 
free (). 

you are here ► 


291 


www.it-ebooks.info 







stack and heap 


Fireside Ghats 

Tonight’s Talk: Stack and Heap Discuss Their Differences 


Stack: Heap: 

Heap? Are you there? I’m home. 

Don’t see you too often this time of day Got a little 
something going on? 

Deep regression. Oops.. .excuse me... Just tidy that 
up... 

What’re you doing? 

The code just exited a function. Just need to free up 
the storage from those local variables. 

You should take life a little easier. Relax a little... 

Perhaps you’re right. Mind if I sit? 

Beer? Don’t worry about the cap; throw it anywhere. 

I.. .think this is yours? 

Hey, you found the pizza! That’s great. I’ve been 
looking for that all week. 

You really should consider getting somebody in to 
take care of this place. 

Don’t worry about it. That online ordering 
application left it lying around. It’ll probably be 
back for it. 

How do you know? I mean, how do you know it 
hasn’t just forgotten about it? 

He’d have been back in touch. He’d have called 
free (). 

Hmmm? Are you sure? Wasn’t it written by the 
same woman who wrote that dreadful Whack-a- 
bunny game? Memory leaks everywhere. I could 
barely move for rabbit structs. Droppings 
everywhere. It was terrible. 



292 Chapter 6 


www.it-ebooks.info 


data structures and dynamic memory 


Stack: 


That’s irresponsible. 


Fussing? I don’t fuss! You might want to use a 
napkin... 


I just believe that memory should be properly 
maintained. 


You’re messy. 


Why don’t you do garbage collection?! 


I mean, just a little.. .tidying up. You don’t do 
anything!!! 


<crying>I’m sorry. I just can’t cope with this level of 
disorganization. 


<blows nose>Thank you. Wait, what is this? 


Heap: 

Hey, it’s not my responsibility to clear up the 
memory. Someone asks me for space, I give him 
space. I’ll leave it there until he tells me to clean 
it up. 


Yeah, maybe. But I’m easy to use. Not like you and 
your.. .fussing. 


<belches>What? I’m just saying you’re difficult to 
keep track of. 


Whatever. I’m a live-and-let-live type. If a program 
wants to make a mess, it’s not my responsibility. 


I’m easygoing. 


Ah, here we go again... 


Easy, now. 


Hey, you’re overflowing. Take this... 


It’s the high score table from Whack-a-Bunny. 
Don’t worry; I don’t think the program needs it 
anymore. 


you are here ► 293 


www.it-ebooks.info 


no dumb questions 


there] £»re nQ 

Dumb Questions 



Why is the heap called the heap? 


^Z Because the computer doesn’t 
automatically organize it. It’s just a big heap 
of data. 



What’s garbage collection? 


Some languages track when you 
allocate data on a heap and then, when 
you’re no longer using the data, they free 
the data from the heap. 



I understand why I needed to 


copy the name of the island in the 
example. Why didn’t I need to copy the 
opens and closes values? 


J^Z The opens and closes values 
are set to string literals. String literals can’t 
be updated, so it doesn’t matter if several 
data items refer to the same string. 


O: Does strdup () actually call 
themalloc() function? 


O: Why doesn’t C contain garbage 
collection? 


^Z C is quite an old language; when it 
was invented, most languages didn’t do 
automatic garbage collection. 


It will depend on how the C Standard 
Library is implemented, but most of the 
time, yes. 


I mm 


^Z You don’t have to; the operating 
system will clear away all of the memory 
when the program exits. But it’s good 
practice to always explicitly free anything 
you’ve created. 



BULLET POINTS 


■ Dynamic data structures allow you 
to store a variable number of data 
items. 


■ A linked list is a data structure that 
allows you to easily insert items. 


The stack is used for local variables 
and is managed by the computer. 

The heap is used for long-term 
storage. You allocate space with 

malloc(). 


■ Dynamic data structures are 
normally defined in C with recursive 

structS. 

■ A recursive struct contains 
one or more pointers to a similar 

struct. 


The sizeof operator will tell you 
how much space a struct needs 

Data will stay on the heap until you 
release it with free (). 


294 Chapter 6 


www.it-ebooks.info 








data structures and dynamic memory 





% 




You’ve seen how to create a linked list in G. But linked lists aren’t the 
only data structures you might need to build. Below are some other 
example data structures. See if you can match up the data structure 
with the description of how it can be used. 


Pata structure 



Inscription 


I can be used to store a sequence of items, 
and I make it easy to insert new items. But 
you can process me in only one direction. 


Each item I store can connect to up to 
two other items. I am useful for storing 
hierarchical information. 


I can be used to associate two different 
types of data. For example, you could use 
to me to associate people’s names to their 
phone numbers. 


Each item I store connects to up to two 
other items. You can process me in two 
directions. 


you are here ► 295 


www.it-ebooks.info 



























that’s my data structure 



You’ve seen how to create a linked list in G. But linked lists aren’t the 
only data structures you might need to build. Below are some other 
example data structures. You were to match up the data structure with 
the description of how it can be used. 


Associated array or map 




It donnedts key 
' 'vfoVmation to 



doubly linked list 


. * 

l"ts like d Ro\rnndl linked lis'tj but it 
bas Connections going both ways. 

linked list 



binary tree 




introvrrw 
value in*fo\rr«ation. 


296 Chapter 6 


description 


I can be used to store a sequence of items, 
and I make it easy to insert new items. But 
you can process me in only one direction. 


Each item I store can connect to up to 
two other items. I am useful for storing 
hierarchical information. 


I can be used to associate two different 
types of data. For example, you could use 
to me to associate people's names to their 
phone numbers. 


Each item I store connects to up to two 
other items. You can process me in two 
directions. 


data structures are useful but be careful! 

You need to be careful when you create these data structures 
using G. If you don’t keep proper track of the data you are 
storing, there’s a risk that you’ll leave old dead data on the heap. 
Over time, this will start to eat away at the memory on your 
machine, and it might cause your program to crash with memory 
errors. That means it 5 s really important that you learn 
to track down and fix memory leaks in your code... 


www.it-ebooks.info 































data structures and dynamic memory 




www.it-ebooks.info 


top secret 




Exhibit A: the source code 

What follows is the source code for the Suspicious Persons 
Identification Expert System (SPIES). This software can be 
used to record and identify persons of interest. You are not 
required to read this code in detail now, but please keep a copy 
in your records so that you may refer to it during the ongoing 
investigation. 


A 


finclude <stdio.h> 
#include <stdlib.h> 
#include <string.h> 

typedef struct node { 
char ^question; 


struct node 
struct node 
} node; 


no; 

yes; 


int yes_no(char ^question) 
char answer[3]; 

printf( M %s? (y/n): ", question); 
fgets(answer, 3, stdin); 
return answer[0] == 'y 1 ; 


node* create(char ^question) 



node *n = malloc(sizeof(node)); 
n->question = strdup(question); 
n->no = NULL; 
n->yes = NULL; 
return n; 


void release(node *n) 


if (n) { 

if (n->no) 

release (n->no); 
if (n->yes) 

release(n->yes); 
if (n->question) 

free(n->question); 
free(n); 


298 Chapter 6 


yyv 


yyv 


www.it-eb 


lo/bfy/nfo 


yyv 


yyv 


















yy\-VAA-V^A-VAA-VVA—-—VVA 

c/afa structures and dynamic memory 



VAA-aAaA 


VAA-VAA-vAA^ books.into ■VAA 



















top secret 



An overview of the SPIES system 

The SPIES program is an expert system that learns how to identify 
individuals using distinguishing features. The more people you enter 
into the system, the more the software learns and the smarter it gets. 


The program builds a tree of suspects 

The program records data using a binary tree. A binary tree allows 
each piece of data to connect to two other pieces of data like this: 



This is what the data looks like when the program starts. The first 
item (or node) in the tree stores a question: “Does the suspect have a 
mustache?” That’s linked to two other nodes: one if the answer’s yes, 
and another if the answer’s no. The yes and no nodes store the name 
of a suspect. 

The program will use this tree to ask the user a series of questions 
to identify a suspect. If the program can’t find the suspect, it will ask 
the user for the name of the new suspect and some detail that can be 
used to identify him or her. It will store this information in the tree, 
which will gradually grow as it learns more things. 





Let’s see what the program looks like in action. 


/y /r , 

The s U s ? ett »ar*es always ayyear at 
the ends ot the tvee- 


300 Chapter 6 




-vyv 


# 


www.it-eb 


)dJk§Jrko 


yyv 


yyv 





























data structures and dynamic memory 



This is what happens if an agent compiles the SPIES program and 
then takes it on a test run: 


File Edit Window Help TrustNoone 


> gcc spies.c -o spies && ./spies 
Does suspect have a mustache? (y/n): n 
Loretta Barnsworth? (y/n): n 

Who's the suspect? Hayden Fantucci 

Give me a question that is TRUE for Hayden Fantucci 
but not for Loretta Barnsworth? Has a facial scar 
Run again? (y/n): y 

Does suspect have a mustache? (y/n): n 

Has a facial scar 

? (y/n): y 

Hayden Fantucci 

? (y/n): y 

SUSPECT IDENTIFIED 

Run again? (y/n): n 

> 


The first time through, the program fails to identify the suspect 
Hayden Fantucci. But once the suspect’s details are entered, the 
program learns enough to identify Mr. Fantucci on the second run. 

Pretty smart. So what's the problem? 

Someone was using the system for a few hours in the lab and noticed 
that even though the program appeared to be working correctly, it 
was using almost twice the amount of memory it needed. 

That’s why you have been called in. Somewhere deep in the source 
code, something is allocating memory on the heap and never freeing 
it. Now, you could just sit and read through all of the code and hope 
that you see what’s causing the problem. But memory leaks can be 
awfully difficult to track down. 


So maybe you should pay a trip to the software lab... 


you are here ► 301 

\/\ VSA VSA ooks.into V^A aAaA VSA 





















valgrind 


Software forensics: using valgrind 

It can take an achingly long time to track down bugs in large, 
complex programs like SPIES. So G hackers have written tools that 
can help you on your way One tool used on the Linux operating 
system is called valgrind. 

valgrind can monitor the pieces of data that are allocated 
space on the heap. It works by creating its own fake version 
of malloc (). When your program wants to allocate some 
heap memory, valgrind will intercept your calls to malloc () 
and free () and run its own versions of those functions. The 
valgrind version of malloc () will take note of which piece of 
code is calling it and which piece of memory it allocated. When your 
program ends, valgrind will report back on any data that was left 
on the heap and tell you where in your code the data was created. 

Prepare your code: add debug info 

You don’t need to do anything to your code before you run it through 
valgrind. You don’t even need to recompile it. But to really get 
the most out of valgrind, you need to make sure your executable 
contains debug information. Debug information is extra data that 
gets packed into your executable when it’s compiled—things like the 
line number in the source file that a particular piece of code was 
compiled from. If the debug info is present, valgrind will be able 
to give you a lot more details about the source of your memory leak. 

To add debug info into your executable, you need to recompile the 
source with the -g switch: 


Just the facts: interrogate your code 


To see how valgrind works, let’s fire it up on a Linux box and use 
it to interrogate the SPIES program a couple times. 


The first time, use the program to identify one of the built-in 
suspects: Vinny the Spoon. You’ll start valgrind on the command 
line with the --leak-check=f ull option and then pass it the 
program you want to run: 



malloc() 

t 

valgrind 
intertepts 
dalls to the 
mallotO 
and -CreeO 

-funttions. 


T 

valgirmd will keep track o( data 
that is allocated but not -fveed' 


gcc -g spies.c -o spies 

P 

The -g switth tells the tompiler 
to retord the line numbers 
against the tode it tommies. 


You tan -find out i*P valgrind is available 
on your operating system and how to 
install it at http : //valgrind org. 


File Edit Window Help valgrindRules 


> valgrind --leak-check=full ./spies 

==1754== Copyright (C) 2002-2010, and GNU GPL’d, by Julian Seward et al. 

Does suspect have a mustache? (y/n): y 

Vinny the Spoon? (y/n): y 

SUSPECT IDENTIFIED 

Run again? (y/n): n 

==1754== All heap blocks were freed -- no leaks are possible 


302 Chapter 6 

A VVA V^A wwwjt-eb^^Ao VAA vyv 




















data structures and dynamic memory 


Use valgrind repeatedly to gather more evidence 

When the SPIES program exited, there was nothing left on 
the heap. But what if you run it a second time and teach the 
program about a new suspect called Hayden Fantucci? 


File Edit Window Help valgrindRules 


> valgrind --leak-check=full ./spies 

==2750== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al. 

Does suspect have a mustache? (y/n): n 

Loretta Barnsworth? (y/n): n 

Who 1 s the suspect? Hayden Fantucci 

Give me a question that is TRUE for Hayden Fantucci 
but not for Loretta Barnsworth? Has a facial scar 
Run again? (y/n) : n bytes was left on ibe heap 

==2750== HEAP SUMMARY: Y- 

==2750== in use at exit: 19 bytes in 1 blocks 
==2750== total heap usage: 11 allocs, 10 frees, 154 bytes allocated 
==2750== 19 bytes in 1 blocks are definitely lost in loss record 1 of 1 
==2750== 

==2750== 

==2750== 

==2750== 


Mpi allocated new pieces 
of memory II -times, but 
on ly freed 10 of -them. 


at 0x4026864 
by 0x40B3A9F 
by 0x8048587 
by 0x804863D 
==2750== LEAK SUMMARY: 
==2750== 

> 


malloc (vg_replace_malloc.c:2 3 6) 
s trdup (s trdup. c: 4 3) 
create (spies . c: 22) > 

main (spies.c:46) 



Po these lines <yve us any dues? 


definitely lost: 19 bytes in 1 blocks 

Why !°\ bytes? |s that a clue? 


This time, valgrind found a memory leak 

It looks like there were 19 bytes of information left on the 
heap at the end of the program, valgrind is telling you 
the following things: 

19 bytes of memory were allocated but not freed. 

Looks like we allocated new pieces of memory 11 times, but freed only 10 of them. 
Do these lines give us any clues? 

Why 19 bytes? Is that a clue? 


O 

O 

o 

o 


That’s quite a few pieces of information. Let’s take these 
facts and analyze them. 


\J\ VSA books.into 


you are here ► 303 

V^A-VVA 



















valgrind 


Look at the evidence 

OK, now that you’ve run valgrind, you’ve collected quite a few 
pieces of evidence. It’s time to analyze that evidence and see if you 
can draw any conclusions. 

1. location 

You ran the code two times. The first time, there was no problem. 
The memory leak only happened when you entered a new suspect 
name. Why is that significant? Because that means the leak can’t 
be in the code that ran the first time. Looking back at the source 
code, that means the problem lies in this section of the code: 



} else if (current->no) { 
current = current->no; 

} else { 

/* Make the yes-node the new suspect name */ 
printf("Who's the suspect? "); 
fgets (suspect, 20, stdin); 
node *yes_node = create(suspect); 
current->yes = yes_node; 

/* Make the no-node a copy of this question */ 
node *no_node = create(current->question); 
current->no = no_node; 

/* Then replace this question with the new question */ 
printf("Give me a question that is TRUE for %s but not for %s? " 
suspect, current->question); 
fgets(question, 80, stdin); 
current->question = strdup(question); 


break; 


304 Chapter 6 




yyv 


-vwv 


www.it-eb 


)bJ)k§Jrko 


yyv 


■vy\ 






















data structures and dynamic memory 


t. Clues from valgrmd 

When you ran the code through valgrind and added a single 
suspect, the program allocated memory 11 times, but only released 
memory 10 times. What does that tell you? 

valgrind told you that there were 19 bytes of data left on the 
heap when the program ended. If you look at the source code, 
what piece of data is likely to take up 19 bytes of space? 

Finally, what does this output from valgrind tell you? 


==2750== 

19 bytes in 1 blocks are definitely lost in loss record 1 of 1 

==2750== 

at 0x4026864: 

malloc (vg replace malloc.c:236) 

==2750== 

by 0x40B3A9F: 

strdup (strdup.c:43) 

==2750== 

by 0x8048587: 

create (spies.c:22) 

==2750== 

by 0x804863D: 

main (spies.c:46) 

^_- ^ 


— + BkQ + — 


Consider the evidence carefully, then answer these questions. 

1. How many pieces of data were left on the heap? 


2. What was the piece of data left on the heap? 


3. Which line or lines of code caused the leak? 


4. How do you plug the leak? 


you are here ► 

/ \/Vy / \ ooks.into VSA V^A 


305 






























cunning plan 


- + BkC + - 

You were to consider the evidence carefully and answer these questions. 

1. How many pieces of data were left on the heap? 

There is one pi ttt ot . data.. 

2. What was the piece of data left on the heap? 

The string.. u L-oy*eit?..$drnsworth! , ; ..It!?. I®, eharaeters with a string tey-mmator. 

3. Which line or lines of code caused the leak? 

The dreateO . tuitions themselves dont eause leaks because they dicWt on the tirst pass, 
so it mu?t. be this strdupO line : 

.... A^ye.^tr^.^estioh .=■. s*brdup(^uestioh); . 

4. How do you plug the leak? 

(t. ^uy-. v :cnt-'>.«\uesti.oh is already pointing to something on the. heap, hee that betpre 
. .?) locating. a . new. question. . 

.. tree (eurre.K) tr^.^estioh) j . 

eurrc^tr.^^.cstipn .=?. .^rdup.C^uestipn); . 


306 Chapter 6 

/ ty^A VSA VVA www-it-eb'd/^Ao aAaA V^aA 





































data structures and dynamic memory 


The fix on trial 

Now that you’ve added the fix to the code, it’s time to run the 
code through valgrind again. 


File Edit Window Help valgrindRules 


> valgrind --leak-check=full ./spies 

==1800== Copyright (C) 2002-2010, and GNU GPL’d, by Julian Seward et al. 

Does suspect have a mustache? (y/n): n 

Loretta Barnsworth? (y/n): n 

Who's the suspect? Hayden Fantucci 

Give me a question that is TRUE for Hayden Fantucci 
but not for Loretta Barnsworth? Has a facial scar 
Run again? (y/n): n 

==1800== All heap blocks were freed -- no leaks are possible 

> 


The leak is fixed 

You ran exactly the same test data through the program, and 
this time the program cleared everything away from the heap. 

How did you do? Did you crack the case? Don’t worry if you 
didn’t manage to find and fix the leak this time. Memory 
leaks are some of the hardest bugs to find in G programs. 

The truth is that many of the G programs available probably 
have some memory bugs buried deep inside them, but that’s 
why tools like valgrind are important. 


o 

o 

o 


Spot when leaks happen. 

Identify the location where they happen. 
Check to make sure the leak is fixed. 


you are here ► 307 

/ \Ay\ / \A^\ ooks.into / \A\A V^A VAA 


















no dumb questions 


the re i are no 

Dumb Questions 


% valgrind said the leaked 
memory was created on line 46, but the 
leak was fixed on a completely different 
line. How come? 


The “Loretta...” data was put 
onto the heap on line 46, but the leak 
happened when the variable pointing to 
it (current->question) was 
reassigned without freeing it. Leaks don’t 
happen when data is created; they happen 
when the program loses all references to 
the data. 


O: Can I get valgrind on my Mac/ 
Windows/FreeBSD system? 


^Z Check http://valgrind.org for details 
on the latest release. 


O: How does valgrind intercept 
calls to malloc () and free () ? 


J^Z The malloc () and free () 

functions are contained in the C Standard 
Library. But valgrind contains a library 
with its own versions of malloc () and 
free (). When you run a program with 
valgrind, your program will be using 
valgrind’s functions, rather than the 
ones in the C Standard Library. 


o- Where did the name valgrind 
come from? 


Valgrind is the name of the entrance 
to Valhalla, valgrind (the program) 
gives you access to the computer’s heap. 


Why doesn’t the compiler always 
include debug information when it 
compiles code? 


Because debug information will make 
your executable larger, and it may also 
make your program slightly slower. 


buuet 


POINTS 


■ valgrind checks for memory 
leaks. 

■ valgrind works by intercepting 
the calls to malloc () and 
free (). 

■ When a program stops running, 
valgrind prints details of what’s 
left on the heap. 

■ If you compile your code with debug 
information, valgrind can give 
you more information. 


If you run your program several times, 
you can narrow the search for the 
leak. 

valgrind can tell you which lines 
of code in your source put the data 
on the heap. 

valgrind can be used to check 
that you’ve fixed a leak. 


308 Chapter 6 


www.it-ebooks.info 








data structures and dynamic memory 


Your C Toolbox 

You’ve got Chapter 6 under 
your belt, and now you’ve 
added data structures and 
dynamic memory to your toolbox. 
For a complete list of tooltips in the 
book, see Appendix ii. 



f\ Vwked 
Yist' s 

c *t 

tba* 


Data can 
be mserted 
easily ihto a 
linked list- 


bnked 

tost * a 
iyyxa^^ data 

struCt^C- 



DyKamic data 

structures 
use recursive 
structs. 



mallocO 
allocates 
memory ok tbe 
heap. 


strdupO y/ii 
create a Copy 
o-f a string ok 
tbe heap. 


£reeO 
ve\ea scS 
v^e^ory °* 

tbe heap* 


^ memory leak 
is allocated 
memory you caK 
rvo loK^er access. 


t/Wike tbe 
stack, heap 
memory is ko*( 
automatically 
released- 


valjriKd caK 
help you 
track dou/K 
memory leaks. 


^be stack 
•s used 

£>r Iota/ 

tables. 


you are here ► 309 


www.it-ebooks.info 


















www.it-ebooks.info 



advanced functions 



* Turn your functions 




Basic functions are great, but sometimes you need more. 

So far, you’ve focused on the basics, but what if you need even more power and 
flexibility to achieve what you want? In this chapter, you’ll see how to up your code’s 
IQ by passing functions as parameters. You’ll find out how to get things sorted with 
comparator functions. And finally, you’ll discover how to make your code super stretchy 
with variadic functions. 


this is a new chapter 


311 


www.it-ebooks.info 


true love 


looking for Mr. Right... 

You’ve used a lot of G functions in the book so far, but the 
truth is that there are still some ways to make your G functions 
a lot more powerful. If you know how to use them correctly, G 
functions can make your code do more things but without 
writing a lot more code. 

To see how this works, let’s look at an example. Imagine 
you have an array of strings that you want to filter down, 
displaying some strings and not displaying others: 

int NUM_ADS = 7; 
char *ADS[] = { 

"William: SBM GSOH likes sports, TV, dining", 
"Matt: SWM NS likes art, movies, theater", 
"Luis: SLM ND likes books, theater, art", 

"Mike: DWM DS likes trucks, sports and bieber", 
"Peter: SAM likes chess, working out and art", 
"Josh: SJM likes sports, movies and theater", 
"Jed: DBM likes theater, books and dining" 

} ; 



Let’s write some code that uses string 
functions to filter this array down. 


www.it-eb 



312 Chapter 7 


advanced functions 



Code Magnets 


Complete the find () function so it can track down all the sports fans in 
the list who don't also share a passion for Bieber. 

Beware: you might not need all the fragments to complete the function. 


void find() 

{ 

int i; 

puts("Search results:"); 


puts ("-"); 

for (i = 0; i ; i++) { 

if ( ( , ) 


( , ) ) { 

printf ( "%s\n", ADS[i]); 

} 

} 

puts ("-"); 

} 



you are here ► 313 


www.it-ebooks.info 

































magnets solved 



Code Magnets Solution 

You were to complete the find () function so it can track down all the 
sports fans in the list who don't also share a passion for Bieber. 


void find() 

{ 

int i; 

puts("Search results:"); 

puts ("-"); 



printf ( "%s\n ", ADS[i]); 

} 

} 

puts ("-"); 

} 


I strcmp 



strcmp 


314 Chapter 7 


www.it-ebooks.info 










































advanced functions 



Now, if you take the function and the data, and wrap everything 
up in a program called f ind. c, you can compile and run it like 
this: 


I File Edit Window Help FindersKeepers 


> gcc find.c -o find && ./find 
Search results: 

William: SBM GSOH likes sports, TV, dining 
Josh: SJM likes sports, movies and theater 



And sure enough, the find () function loops through the array 
and finds the matching strings. Now that you have the basic code, 
it would be easy to create clones of the function that could perform 
different kinds of searches. 


Hey, wait! Clone? Clone the 
function???? That's dumb. Each version 
would only vary by, like, one line. 


Exactly right. If you clone the function, you’ll 
have a lot of duplicated code. 

G programs often have to perform tasks that are almost identical 
except for some small detail. At the moment, the find () 
function runs through each element of the array and applies a 
simple test to each string to look for matches. But the test it makes 
is hardwired. It will always perform the same test. 

Now, you could pass some strings into the function so that it could 
search for different substrings. The trouble is, that wouldn’t allow 
find () to check for three strings, like “arts,” “theater,” or “dining.” 
And what if you needed something wildly different? 

You need something a little more sophisticated... 


I u)an-t q non— 
^nnoKer uoho 
. A someone >^es -the 

w ^ ■‘ heater - 

uoV'O 


Sp°' - . 


>orte 


or 




Find someone 

uoho Uhes tee 
art, -theater, or 
d\n\na. 



you are here ► 


315 


www.it-ebooks.info 














give the function code 


Pass code to a function 


What you need is some way of passing the code for the 
test to the find () function. If you had some way of 
wrapping up a piece of code and handing that code to the 
function, it would be like passing the find () function a 
testing machine that it could apply to each piece of data. 



This -testing matKme looks tov people 
w ho like avis, iheaiev, ov di»mo>. 



LnnL 




Testing 

Machine 



Find someone 
who HKes 
sports or 
uxrKinn oui. 





T !" S .^ es ^' h 9 looks -fov 

Wh ° l,ke <>r wovkmg out 


people 




This means the bulk of the f ind () function would stay 
exactly the same. It would still contain the code to check 
each element in an array and display the same kind of output. 
But the test it applies against each element in the array would 
be done by the code that you pass to it. 

316 Chapter 7 


www.it-ebooks.info 



















advanced functions 


You weed to tell find!) the name of a function 


Imagine you take our original search condition and rewrite it as a 
function: 

int sports_no_bieber(char *s) 

{ 

return strstr(s, "sports") && !strstr(s, "bieber"); 

} 



Now, if you had some way of passing the name of the function 
to find () as a parameter, you’d have a way of injecting the test: 

void find ( tu»>dti<w\-*ame matdh ) 


■ ^ match would spedity the 

int i; name o-P -the -Pund-tion 

puts ("Search results : ") ; the test- 

puts ("-")/ 

for (i = 0; i < NUM_ADS; i++) { 

if ( dall-the-matdh-'Pundtion (ADS[i])) { 

printf ("%s\n", ADS [i] ) ; W- fteve, you'd weed some way ot dallmg 
j the -function y/hose name y/as given by 

the mat^h pav-ametev-. 

puts ("-"); 

} 


If you could find a way of passing a function name to f ind (), 
there would be no limit to the kinds of tests that you could make in 
the future. As long as you can write a function that will return true 
or false to a string, you can reuse the same f ind () function. 



find(sports_no_bieber); 
find(sports_or_workout); 
find(ns_theater); 
find(arts theater or dining); 


But how do you say that a parameter stores the 
name of a function? And if you have a function 
name, how do you use it to call the function? 


you are here ► 317 


www.it-ebooks.info 




function pointers 


Every function name is a pointer to the function... 


You probably guessed that pointers would come into 
this somewhere, right? Think about what the name of 
a function really is. It’s a way of referring to the piece 
of code. And that’s just what a pointer is: a way of 

referring to something in memory. 

That’s why, in G, function names are also pointer 
variables. When you create a function called 
go_to_warp_speed (int speed) , you are also 
creating a pointer variable called go_to_warp_speed 
that contains the address of the function. So, if you give 
find () a parameter that has a function pointer type, you 
should be able to use the parameter to call the function it 
points to. 


int go_to_warp speed(int speed) 

{ 

dilithium_crystals(ENGAGE); 
warp = speed; 

reactor core(c, 125000 * speed, PI); 



} 


clutch(ENGAGE); 
brake(DISENGAGE); 


return 0; 


Whoever create a Unction, 

you also mate a WW 


The pointer Contains the 
address of the -function. 


go_to_warp_speed(4); 

A 

When you tall the -function, you are 
using the -function pointer- 



Let’s look at the C syntax you’ll need to work 
with function pointers. 

318 Chapter 7 


www.it-ebooks.info 











































































advanced functions 


...but there's wo function data type 

Usually, it’s pretty easy to declare pointers in G. If you have a 
data type like int, you just need to add an asterisk to the end 
of the data type name, and you declare a pointer with int *. 
Unfortunately, G doesn’t have a function data type, so you 
can’t declare a function pointer with anything like function * 


int 


* 


This dcC-lav"CS iyrt yowtcir... 


function *f; — ...but this won't dedlave a tundtion pointev. 

Why doesn't C have a function data type? 

G doesn’t have a function data type because there’s not just 
one type of function. When you create a function, you can vary a 
lot of things, such as the return type or the list of parameters it 
takes. That combination of things is what defines the type of the 
function. 


int go_to warp speed(int speed) 

{ ^''"^Theve ave many dittevent -types 

-fundtions. These -fundtions ave 
, ditfevent types bedause they have 

' dittevent vetuvn types and pavametevs. 

V 

char** album_names(char *artist, int year) 

{ 


} 


So, for function pointers, you’ll need to use slightly more complex 
notation... 


you are here ► 319 


www.it-ebooks.info 


create a function pointer 


How to create function pointers 


Say you want to create a pointer variable that can store 
the address of each of the functions on the previous page. 
You’d have to do it like this: 


int (*warp_fn)(int); 
warp_fn = go_to_warp_speed ; 
warp fn(4); 


This will tv-eate a variable tailed 

y,arP that ta« sUe the 

address of Ihe y>>_^r ? _s ? eed(J 



\ 


This is just like tailing goJ»_warp_speedCU 



char** (*names_fn)(char*,int); 
names_fn = album_names; 

char** results = names fn("Sacha Distel", 


1972); 


This will a variable taWtd 

names_f n that tan store the address 
of the albu*n_namesO -Punttion. 


That looks pretty complex, doesn’t it? 

Unfortunately, it has to be, because you need to tell G the 
return type and the parameter types the function will take. 
But once you’ve declared a function pointer variable, you 
can use it like any other variable. You can assign values 
to it, you can add it to arrays, and you can also pass it to 
functions... 

...which brings us back to your find() code... 


tfierei<ire no 

Dumb Questions 




What does char** mean? Is it a typing error? 


char * * is a pointer normally used to point to an 
array of strings. 


320 Chapter 7 


www.it-ebooks.info 







advanced functions 



Take a look at those other types of searches that people have asked for. See if you can create a 
function for each type of search. Remember: the first is already written. 


__ int sports no bieber(char *s) 

SomcohC who likes ' 

sports but hot Biebev return strstr (s, "sports") && ! strstr (s, "bieber"); 


} 



M VO 

sports," 


l want a non - 
&rnoK©r who 

liK©s -th© 

theater. 

Find someone 

uoho Uhes -th© 
arts, -theater, 
or d\n\na. 


int sports_or_workout(char *s) 
{ 

} 


int ns_theater(char *s) 

{ 

} 

int arts_theater_or_dining(char *s) 
{ 

} 


Then, see if you can complete the find ( ) function: 

Will »eed a 

void find ( . ) ^ tnfttion pointev ?assin<} 

{ {o it called match 

int i; 

puts("Search results:"); 

puts ("-"); 

for (i = 0; i < NUM_ADS; i++) { 

if (match (ADS [i] ) ) { •<- —This will call the matchO 

printf ( "%s\n" , ADS [ i ] ) ; -function that was passed in- 

} 

} 

puts ("-"); 

} 


you are here ► 321 


www.it-ebooks.info 












exercise solved 



You were to take a look at those other types of searches that people have asked for and create a 
_ —- function for each type of search. 

f&eticiSe 

§OLutlOH i n t sports_no_bieber (char *s) 

{ 

Someone who likes return strstr (s, "sports") && ! strstr (s, "bieber"); 

sports but hot Bieber 

int sports or workout (char *s) 

{ - - 

Ot VfC'tuv;^ strstrfs, U sp?rts ; 0 || strstr(s ; out ; 0; 

1 

I uoant a non- int ns _ theater ( char * s ) 

^nnoKer uoho ^ 

IiKes the return strstrfs,. w jWS W ) ff .strstrfs, . u theater” . 

“theater. 1 } 

f vnd someone int arts_theater_or_dining(char *s) 

uoho \\Vkes -th© { 

arts, -thCSteO ycUyu s-brsf;vp 'Aft || rtyrtvrt, rthcartvp || .rtv.Af “clmmg”), 

or dinvney j j 

Then, you were to complete the find () function: 

void find( iht ^mat^bJfdbar^) ) 

{ 

int i; 

puts("Search results:"); 

puts ("-"); 

for (i = 0; i < NUM_ADS; i++) { 

if (match(ADS[i])) { 

printf("%s\n ", ADS[i]); 

} 

} 

puts ("-"); 

} 


322 Chapter 7 


www.it-ebooks.info 












advanced functions 



Let’s take those functions out on the road and see how they 
perform. You’ll need to create a program to call find () with 
each function in turn: 


int main() 

{ 

find(sports_no_bieber); 
find(sports or_workout); 
find(ns_theater); 
find(arts_theater_or_dining); 
return 0; 

} 

This is tmd(spov-k_KoJbie'»e' r ). 

This is 

tind(spoV'ts_or_wovkou'fc)- ' 


This is tmd(»s_thealev)-^ 


This is -find(avb_theaie»_o»_dihihg). 





> ./find 


Search results: 


William: SBM GSOH likes sports, TV, dining 
Josh: SJM likes sports, movies and theater 


Search results: 


William: SBM GSOH likes sports, TV, dining 
Mike: DWM DS likes trucks, sports and bieber 
Peter: SAM likes chess, working out and art 
Josh: SJM likes sports, movies and theater 


Search results: 


Matt: SWM NS likes art, movies, theater 


Search results: 


William: SBM GSOH likes sports, TV, dining 
Matt: SWM NS likes art, movies, theater 
Luis: SLM ND likes books, theater, art 
Josh: SJM likes sports, movies and theater 
Jed: DBM likes theater, books and dining 


> 


Each call to the find () function is performing a very 
different search. That’s why function pointers are one of the 
most powerful features in G: they allow you to mix functions 
together. Function pointers let you build programs with a lot 

more power and a lot less code. 


you are here ► 323 


www.it-ebooks.info 


















go huntin’ 



The Hunter’s Guide f® function pointers 


When you’re out in the reeds, identifying those function pointers can be pretty 
tricky. But this simple, easy-to-carry guide will fit in the ammo pocket of any C user. 


Ret urn type i (* 

; Pointer variable i 

)( j Param types j ) 

\ i 

T T T / 

char** ( 

*names fn) 

(char*,int) 


This is -the v>aw>e the 
variable youre detlari^- 


-there-, sure no 

Dumb Questions 


If function pointers are just 
pointers, why don’t you need to prefix 
them with a * when you call the 
function? 


You can. In the program, instead of 
writing match (ADS [ i ] ), you could 
have written (*match) (ADS [ i ] ). 


% And could I have used & to get 
the address of a method? 


^s. Instead of 

find(sports_or_ 
workout ), you could have written 

find(&sports or workout). 



Then why didn’t I? 


Because it makes the code easier 
to read. If you skip the * and &, C will still 
understand what you’re saying. 


324 Chapter 7 


www.it-ebooks.info 



















advanced functions 


fret it sorted with the C Standard Library 

Lots of programs need to sort data. And if the data’s 
something simple like a set of numbers, then sorting is 
pretty easy Numbers have their own natural order. But it’s 
not so easy with other types of data. 

Imagine you have a set of people. How would you put 
them in order? By height? By intelligence? By hotness ? 



When the people who wrote the G Standard Library 
wanted to create a sort function, they had a problem: 

How could a sort function sort any type of 
data at all? 


you are here ► 




325 


www.it-ebooks.info 


sorting 


Use function pointers to set the order 


You probably guessed the solution: the G Standard Library 
has a sort function that accepts a pointer to a comparator 
function, which will be used to decide if one piece of data 

is the same as, less than, or greater than another piece 
of data. 


This is what the qsort () function looks like: -p^- s - |S 3 po'm'tev- 

•bo a* av-ray. 

This is -the siz£ eafch 


qsort(void *array. 
This is -the length — ^ s ize t length. 


o( the 


array. 


size t item size. 


element m the array. 



Remember, a void* pointer 
tan point to anything. 


int (*compar) (const void *, const void *) ) ; 
This is a poih-tev -to a Who* -that dompaves hwo items m the array. 


The qsort () function compares pairs of values over and 
over again, and if they are in the wrong order, the computer 
will switch them. 


And that’s what the comparator function is for. It will tell 
qsort () which order a pair of elements should be in. It 
does this by returning three different values: 


+ve 





It tke first value is greater than the secon 
value, it skoula return a positive numker. 


If tke first value is less tkan tke second 
value, it skould return a negative numker. 



If tke two values are equal, 
it skould return zero. 


To see how this works in practice, let’s look at an example. 


326 Chapter 7 


www.it-ebooks.info 


advanced functions 


filing infs Up Cl«se 


Let’s say you have an array of integers and you want to sort them in 
increasing order. What does the comparator function look like? 



int scores[] = {543,323,32,554,11,3,112}; 

If you look at the signature of the comparator function that 
qsort () needs, it takes two void pointers given by void*. 

Remember void* when we used malloc () ? A void pointer can 
store the address of any kind of data, but you always need to cast 
it to something more specific before you can use it. 

The qsort () function works by comparing pairs of elements in 
the array and then placing them in the correct order. It compares 
the values by calling the comparator function that you give it. 

int compare_scores(const void* score_a, const void* score_b) 

{ 


A void pointer 
void* can store 
a pointer to 
anything. 


} 


Values are always passed to the function as pointers, so the first thing 
you need to do is get the integer values from the pointers: 


V° x need to east the void 
pointer to an integer pointer. 

This -f irst * then gets the int 
stored at address store_b- 



*(int*)score_a; 
*(int*)score b; 


Then you need to return a positive, negative, or zero 
value, depending on whether a is greater than, less 
than, or equal to b. For integers, that’s pretty easy to 
do—you just subtract one number from the other: 


The comparator 
function returned the 
value -21. That means 11 
needs to be before 32. 


O 


0 


return a - b; 


And this is how you ask qsort () to sort the array 


I-P a > b, this is positive. |* P a < b, this is 
negative. |F a and b are e<\ual, this is zero. 


qsort(scores, 7, sizeof(int), compare scores); 



you are here ► 327 


www.it-ebooks.info 












exercise 




Now it’s your turn. Look at these different sort descriptions. See if you can write a comparator 
function for each one. To get you started, the first one is already completed. 



int compare_scores(const void* score_a, const void* score_b) 

{ 

int a = *(int*)score_a; 
int b = *(int*)score_b; 
return a - b; 


int compare_scores desc(const void* score_a, const void* score_b) 

Sort \n-teopr ^ 

scores, tovth 
-the \ar o^est 

Vrst. I . 


sor t- the 

h area ac**> 
,a\\eU s ^ 


sco< 


typedef struct { TWls |S 

int width; vefrtanjle "t/ipc- 

int height; 

} rectangle; 

int compare areas (const void* a. 


const void* b) 


} 


328 Chapter 7 


www.it-ebooks.info 
















advanced functions 


lVdv-ftin<y one is v-eally -bridky. 

'C 

int compare_names(const void* a, const void* b) 

^ori a list { 

names in 

alphabetical 

Order. Case- 
sensitive. 

) 

I If a string is a pointer to a dhar, 

Here’s a hint what will a pointer to it be? 

strdmp( tt At>d", "DeD < 0 


And finally: if you already had the compare_areas () and compare_names () functions, how would you write 
these two comparator functions? 


Sort the 
rectangles 
in area order, 
laraest ^irst. 


int compare_areas_desc(const void* a, void* b) 
{ 


} 


S>ori a list ol int compare_names_desc(const void* a, const void* b) 

names in reverse f 
alphabetical 

order. Case- j 
sensitive. 


you are here ► 


329 


www.it-ebooks.info 










exercise solved 




Solution 


S>or-t in-tener 
SCOr ©S>, 
s>T)aiiesi 


Sort \n-tea©r 
scores, urth 
-the \ar o^es-t 
hrsh 


sor ^ 

area <*&*> 


Now it’s your turn. You were to look at these different sort descriptions and write a comparator 
function for each one. 


This is the one done bcW- 


int compare_scores(const void* score_a, const void* score_b) 

( V 

int a = *(int*)score_a; 
int b = *(int*)score_b; 
return a - b; 

} 



int compare_scores_desc(const void* score_a, const void* score_b) 

{ 

int. a ~ . 

int b =■ (t n t^ ) sd orc^Jbj 
\rC‘tu\rhb — a; 

^ |<f you subiv-a^i the numbers -the other way 

around, you II reverse the order o-P the -final sort 

typedef struct { This is the 

int width; redtan^le “type. 

int height; 

} rectangle; 

int compare areas (const void* a, const void* b) 


{ 


redtan^le* ra =■ ^edtanjIe^Ja; 


First donver*t 

tCt %e. >*. a. . 

Then dale lai . =L 1 ^3- > widih ra-->height); 

the areas. int area^b =■ (rb->width & rb—>iiei^ht)j 


Then, use the —y return areata - area^b; 
subtradtion tridk- 


330 Chapter 7 


www.it-ebooks.info 























advanced functions 


^ori a 1 1 si 
names in 

alphabetical 

Order. Case - 
sensitive. 


t . 

Here s a W*t : 

stvt«.p("Ak", "Pe-f") < 0 


int compare_names(const void* a, const void* b) 

{ /\ siv'mOj is a pomler -to a dhar, so the pointers 

tte?** sa =1 (dar**)a;^_ Y°y e a y P oi ^ e,rs t> . pom ‘ te ' rS ; 
dbd\r^^ sb — (dbav^^Obj 
\rc*tu\rr\ S'tv-dmf^sa, ^sb); 

} We «eed -to use the * operator 

■fco ^ihd the ad-tual strips. 


And finally: if you already had the compare_areas () and compare_names () functions, how did you write 
these two comparator functions? 


Sort -the 
recAanc^es 
in area order ; 
\aro^est ^vrs-t. 


int compare_areas desc(const void* a, const void* b) 

{ 


\rc*tu\rr\ dor*pav-e__aireas(b, a); 


* 


Or you iould have used -dompave_aveas(a, b). 


^ori a list o£ 
names in reverse 
alphabetical 

order. Case- 
sensitix/e. 


int compare names desc(const void* a, const void* b) 


{ 

v-c*t [avy\ dorwpav-c_hamcs(b, a); 

.. 1 . 

Or you dould have used 

-dorwpav-e — Kar*es(a, b). 


o 


Don’t worry if this 
exercise caused you a 
few problems. 

It involved pointers, 
function pointers, and even a little math. If 
you found it tough, take a break, drink a little 
water, and then try it again in an hour or two. 



you are here ► 331 


www.it-ebooks.info 




















test drive 



Some of the comparator functions were really pretty gnarly, so it’s 
worth seeing how they run in action. This is the kind of code you 
need to call the functions. 


The dompav-a-fcov" 
'Pufidiiohs hev-e. 




332 Chapter 7 


www.it-ebooks.info 















advanced functions 


If you compile and run this code, this is what you get: 


File Edit Window Help Sorted 


> . /test_drive 

These are the scores in order: 

Score = 554 

Score = 543 

Score = 323 

Score = 112 

Score = 32 

Score = 11 

Score = 3 

These are the names in order: 

Brett 

Karen 

Mark 

Molly 

> 


Great, it works. 

Now try writing your own example code. The sorting 
functions can be incredibly useful, but the comparator 
functions they need can be tricky to write. But the more 
practice you get, the easier they become. 



thereiare no 

Dumb Questions 


O: I don’t understand the comparator 
function for the array of strings. What 
does char** mean? 


Each item in a string array is 
a char pointer (char*). When 
qsort () calls the comparator function, 
it sends pointers to two elements in 
the arrays. That means the comparator 
receives two pointers-to-pointers-to-char. 
In C notation, each value is a char**. 


% OK, but when I call the 
strcmp () function, why does the 
code say strcmp ( *a, *b) ? Why 
not strcmp (a, b) ? 


a and b are of type char**. The 
strcmp () function needs values of 
type char*. 


Does qsort () create a sorted 
version of an array? 


It doesn’t make a copy, it actually 
modifies the original array. 



Why does my head hurt? 


Don’t worry about it. Pointers are 
really difficult to use sometimes. If you 
don’t find them a little confusing, it probably 
means you aren’t thinking hard enough 
about them. 


you are here ► 333 


www.it-ebooks.info 







dear john 


Automating the Pear John letters 


Imagine you’re writing a mail-merge program to send out 
different types of messages to different people. One way of 
creating the data for each response is with a struct like this: 


ik 


These are the three types ot messages 
that will be sent to people- 


enum response type (DUMP, SECOND_CHANCE , MARRIAGE}; 

typedef struct { 
char *name; 

enum response_type type; II record a response type wi-fch 

} response; pie£e o-P response data. 


The enum gives you the names for each of the three types of 
response you’ll be sending out, and that response type can be 
recorded against each response. Then you’ll be able to use 
your new response data type by calling one of these three 
functions for each type of response: 

void dump(response r) 

{ 

printf("Dear %s,\n", r.name); 

puts("Unfortunately your last date contacted us to"); 
puts("say that they will not be seeing you again"); 

} 

void second_chance(response r) 

{ 

printf("Dear %s,\n", r.name); 

puts("Good news: your last date has asked us to"); 
puts("arrange another meeting. Please call ASAP."); 

} 

void marriage(response r) 

{ 

printf("Dear %s,\n", r.name); 

puts ("Congratulations! Your last date has contacted"); 
puts ("us with a proposal of marriage."); 

} 

So, now that you know what the data looks like, and you have 
the functions to generate the responses, let’s see how complex 
the code is to generate a set of responses from an array of data. 

334 Chapter 7 


www.it-ebooks.info 


advanced functions 



Poo] puzzjc 


Take code fragments from the pool and place 
them into the blank lines below. Your 
goal is to piece together the main () 
function so that it can generate a set 
of letters for the array of response 
data. You may not use the same code 
fragment more than once. 


int main() 

{ 

response r[] = { 

{"Mike", DUMP}, {"Luis", SECOND_CHANCE}, 
{"Matt", SECOND_CHANCE}, {"William", MARRIAGE} 

} ; 

int i; 

for (i = 0; i < 4; i++) { 

switch( ) { 

case .: 

dump( ) ; 

break; 

case : 

second_chance( ); 

break; 
default: 

marriage( ); 

} 

} 

return 0; 

} 

Note: each thing from 



www.it-ebooks.info 














out of the pool 



P®®1 plizzje §®]ufi®n 

Take code fragments from the pool and place 
them into the blank lines below. Your 
goal was to piece together the main () 
function so that it can generate a set of 
letters for the array of response data. 


Call the method ^ 
caeh mateh'm^ type. 


int main() 

{ 

response r[] = { 

{"Mike", DUMP}, {"Luis", SECOND_CHANCE}, 

{"Matt", SECOND_CHANCE}, {"William", MARRIAGE} 

} ; 

int i; 

for (i = 0; i < 4/ i + +) { ^—■* Looping thfou^h the airway 

switch ( .rcn.-ty.pe.) { Testing the type -field each time 

case DUMP : 

dump ( r[i] ) ; 

break; 

J cas e S ECO N D_CHANCE : 

second_chance ( r[i] ) ; 

break; 
default: 

marriage ( r[i] ) ; 

} 

} 

return 0; 

} 


Note: each thing from 
the pool can be used 
only once! 



336 Chapter 7 


www.it-ebooks.info 















advanced functions 



When you run the program, sure enough, it generates the 
correct response for each person: 


File Edit Window Help DontForgetToBreak 


./send_dear_johns 
Dear Mike, 

Unfortunately your last date contacted us to 
say that they will not be seeing you again 
Dear Luis, 

Good news: your last date has asked us to 
arrange another meeting. Please call ASAP. 
Dear Matt, 

Good news: your last date has asked us to 
arrange another meeting. Please call ASAP. 
Dear William, 

Congratulations! Your last date has contacted 
us with a proposal of marriage. 

> 


Well, it’s good that it worked, but there is quite a lot of code 
in there just to call a function for each piece of response 
data. Every time you need call a function that matches a 
response type, it will look like this: 

switch(r.type) { 

case DUMP: 
dump(r); 
break; 

case SECOND_CHANCE: 
second_chance(r); 
break; 
default: 

marriage (r) ; 

} 


And what will happen if you add a fourth response 
type? You’ll have to change every section of your 
program that looks like this. Soon, you will have a lot 
of code to maintain, and it might go wrong. 

Fortunately, there is a trick that you can use in G, 
and it involves arrays... 





you are here ► 337 


They told me a 
coder forgot a set of 
break statements, and 
that meant I ended up 
with this guy... 


www.it-ebooks.info 







function pointer arrays 


Create aw array of function pointers 

The trick is to create an array of function pointers that match 
the different response types. Before seeing how that works, let’s 
look at how to create an array of function pointers. If you had an 
array variable that could store a whole bunch of function names, 
you could use it like this: 

replies[] = (dump, second chance, marriage}/ 


But that syntax doesn’t quite work in G. You have to tell the 
compiler exactly what the functions will look like that you’re 
going to store in the array: what their return types will be and 
what parameters they’ll accept. That means you have to use this 

much more complex syntax: 


The variable will be And its just a -function pointer; 

c . a tailed “replies” *ts a whole array o( -them, 

fcath Wut\ov\ in ^ 

the array will be ^ void (*replies[]) (response) = (dump, second chance, marriage}; 

a void ^unetion. 


/ T T 



Return type 

(* 

Pointer variable 

)( 

Param types 

) 


Just one pav-ametev-, 
with type "response-' 


/ T' /t 

Dedaring a rundtion Now you re done naming -the variable, and its time to 
pointer (array)- S ^Y w bat parameters eath -function will take- 


Pot how does aw array help? 


Look at that array. It contains a set of function names that are in 

exactly the same order as the types in the enum: 


enum response type (DUMP, SECOND CHANCE, MARRIAGE}; 


This is really important , because when G creates an enum, it gives 
each of the symbols a number starting at 0. So DUMP == 0, 

SECOND_CHANCE == 1, and MARRIAGE == 2. And that’s really 
neat, because it means you can get a pointer to one of your sets 
of functions using a response_type: 

This is your Vcplics”-^-^ replies [SECOND_CHANCE] == second_chance 
array or -functions. 

SEC0ND__CHAKCE has -the value /. 

Let’s see if you can use the function array to 
replace your old main() function. 


Its e«\ual to -the name 
o£ the sedond__dhande 
-function. 


338 Chapter 7 


www.it-ebooks.info 









advanced functions 



OK, this exercise is quite a tough one. But take your time with it, 
and you should be fine. You already have all the information you 
need to complete the code. In this new version of the main () 
function, the whole switch/case statement used before has 
been removed and needs to be replaced with a single line of 
code. This line of code will find the correct function name from 
the replies array and then use it to call the function. 


void (^replies []) (response) = (dump, second chance, marriage}; 


int main() 

{ 

response r[] = { 

{"Mike", DUMP}, {"Luis", SECOND_CHANCE}, 
{"Matt", SECOND_CHANCE}, {"William", MARRIAGE} 

}; 

int i; 

for (i = 0; i < 4; i++) { 


} 

return 0; 


you are here ► 


339 


www.it-ebooks.info 







mainQ updated 



Solution 


OK, this exercise was quite a tough one. In this new version of 
the main () function, the whole switch/case statement 
used before was removed, and you needed to replace it. This line 
of code will find the correct function name from the replies 
array and then use it to call the function. 


void (^replies []) (response) = (dump, second chance, marriage}; 


int main() 


{ 


response r[] = { 

{"Mike", DUMP}, {"Luis", SECOND_CHANCE}, 
{"Matt", SECOND_CHANCE}, ("William", MARRIAGE} 

}; 


} 


int i; 

for (i = 0; i < 4; i++) { 


( rep] i tsLrL) X.iyprf 


} 

return 0; 


l*f ywanted, you £ould have added a ■* 
a-f-tev" -the opening parenthesis, but it wouId 
work -the sa^e way. 


Let’s break that down. 


This whole "thing is a -function 
like w dump” or “marriage- 



This is your array This is a value like Y°u re tallmj the 
WU *a*es. O for DUMP or Z afld 

•for MARRim ' rts ?°' nse data ' rC,X 


340 Chapter 7 


www.it-ebooks.info 










advanced functions 



Now, when you run the new version of the program, you get 
exactly the same output as before: 


File Edit Window Help WhoIsJohn 


> ./dear_johns 
Dear Mike, 

Unfortunately your last date contacted us to 
say that they will not be seeing you again 
Dear Luis, 

Good news: your last date has asked us to 
arrange another meeting. Please call ASAP. 
Dear Matt, 

Good news: your last date has asked us to 
arrange another meeting. Please call ASAP. 
Dear William, 

Congratulations! Your last date has contacted 
us with a proposal of marriage. 

> 


The difference? Now, instead of an entire switch statement, 
you just have this: 


(replies[r[i].type])(r[i]); 


If you have to call the response functions at several places in 
the program, you won’t have to copy a lot of code. And if you 
decide to add a new type and a new function, you can just add 
it to the array: 

enum response_type (DUMP, SECOND_CHANCE, MARRIAGE, LAWJSUIT}; 
void (^replies []) (response) = {dump, second chance, marriage. 


You tan add 
new a«d 

L — -Cunfrtions like ikis. 

'ir 

law suit}; 


Arrays of function pointers can make your code much easier 
to manage. They are designed to make your code scalable by 
making it shorter and easier to extend. Even though they are 
quite difficult to understand at first, function pointer arrays 
can really crank up your G programming skills. 


you are here ► 341 


www.it-ebooks.info 







no dumb questions 


BULLET POINTS - 

■ Function pointers store the addresses of functions. 

■ The name of each function is actually a function pointer. 

■ If you have a function shoot (), then shoot and 
& shoot are both pointers to that function. 

■ You declare a new function pointer with 

return-type(*var-name) (param-types) . 

■ If f p is a function pointer, you can call it with 

fp(params , ...). 

■ Or, you can use (*fp) (params, ...). C will work 
the same way. 


■ The C Standard Library has a sorting function called 

qsort () . 

■ qsort () accepts a pointer to a comparator function 
that can test for (in)equality. 

■ The comparator function will be passed pointers to two 
items in the array being sorted. 

■ If you have an array of data, you can associate functions 
with each data item using function pointer arrays. 



tlierei are no 

Dumb Questions 


% Why is the function pointer 
array syntax so complex? 


Because when you declare 
a function pointer, you need to say 
what the return and parameter types 
are. That’s why there are so many 
parentheses. 


<*■ This looks a little like the 
sort of object-oriented code in 
other languages. Is it? 


It’s similar. Object-oriented 
languages associate a set of 
functions (called methods) with 
pieces of data. In the same way, you 
can use function pointers to associate 
functions with pieces of data. 


% Hey, so does that mean that 
C is object oriented? Wow, that’s 
awesome. 


No. C is not object oriented, 
but other languages that are built on 
C, like Objective-C and C++, create 
a lot of their object-oriented features 
by using function pointers under the 
covers. 


342 Chapter 7 


www.it-ebooks.info 








advanced functions 


Make your functions streeeeeetchy 

Sometimes, you want to write G functions that are really powerful, like your 
find () function that could search using function pointers. But other times, 
you just want to write functions that are easy to use. Take the print f () 
function. The printf () function has one really cool feature that you’ve 
used: it can take a variable number of arguments: 


printf("%i bottles of beer on the wall, %i bottles of beer\n", 99, 99); 

printf ("Take one down and pass it around, ") ; ? (r * 

printf("%i bottles of beer on the wall\n", 98); ^ £ 3 * pass xbe privrt as many 

ar^umerrls as you need XO print 

So how caw YOU do that? 

And you’ve got just the problem that needs it. Down in the Head First 
Lounge, they’re finding it a little difficult to keep track of the drink totals. 

One of the guys has tried to make life easier by creating an enum with the 
list of cocktails available and a function that returns the prices for each one: 

enum drink { 

MUDSLIDE, FUZZY_NAVEL, MONKEY_GLAND, ZOMBIE 

} ; 


double price(enum drink d) 

{ 

switch(d) { 

case MUDSLIDE: 

return 6.7 9; 
case FUZZY_NAVEL: 

return 5.31; 
case MONKEY_GLAND: 

return 4.82; 
case ZOMBIE: 
return 5.89; 

} 

return 0; 

} 

And that’s pretty cool, if the Head First Lounge crew just wants the price of 
a drink. But what they want to do is get the price of a total drinks order: 

__ Tb number o( drinks 

Easy -A price (ZOMBIE) total (3, ZOMBIE, MONKEY GLAND, FUZZY NAVEL) G" ^ S ° 

/ p- - easy 

They want a function called total () that will accept a count of ^ d'drtks in -the ovdev 

the drinks and then a list of drink names. 


you are here ► 343 


www.it-ebooks.info 


variadic functions 



Variable functions Up Cl«se 


A function that takes a variable number of parameters is 
called a variadic function. The G Standard Library 
contains a set of macros that can help you create your 
own variadic functions. To see how they work, you’ll 
create a function that can print out series of ints: 


You dan "think o( madros 3s 3 
spedial type o-f -fundtion that 
dan modi-fy your sourde toAt- 


print_ints(3, 79, 101, 32); 

Number o-f inis to print The ints that need to be printed 


Here’s the code: 


The variable arguments The variable arguments will start 
will -follow here- a-fter the args parameter. 


This is a normal^ ordinary 
argument that will always 
be passed- 


va_start says where the 
variable arguments start- 


This will loop through all 
ot the other arguments- 

args dontains a dount 
o-f how many variables 
there are- 


^include <stdarg.h> 


void print ints (int args, ...) 



Let’s break it down and take a look at it, step by step. 


344 Chapter 7 


www.it-ebooks.info 




















advanced functions 



Include the stdarg.h header. 

All the code to handle variadic functions is in stdarg.h , so you 
need to make sure you include it. 


Tell your function there's more to come... 

Remember those books where the heroine drags the guy 

through the bedroom and then the chapter ends “...”? Well, No, we don t cad 

that “..is called an ellipsis , and it tells you that something -those books either, 

else is going to follow. In G, an ellipsis after the argument of a 
function means there are more arguments to come. 



Create a va_list. 

A va_list will be used to store the extra arguments that 
are passed to your function. 



Say where the variable arguments start. 

G needs to be told the name of the last fixed argument. In the 
case of our function, that’ll be the args parameter. 


►© Then read off the variable arguments, one at a time. 

Now your arguments are all stored in the va_list, you can read 
them with va_arg. va_arg takes two values: the va_list and 
the type of the next argument. In your case, all of the arguments 
are ints. 



Finally ...end the list. 

After you’ve finished reading all of the arguments, you need to tell 
G that you’re finished. You do that with the va_end macro. 



Now you can call your function. 

Once the function is complete, you can call it: 

print ints (3, 79, 101, 32); 

r 

This will print out \0\ t dnd ^2- values. 


you are here ► 


345 


www.it-ebooks.info 






no dumb questions 



A macro is used to rewrite your code before it's compiled. The macros 
you're using here (va_start, va_arg, and va_end) might look 
like functions, but they actually hide secret instructions that tell the 
preprocessor how to generate lots of extra smart code inside your 
program, just before compiling it. 


the retire no 

Dumb Questions 


O: Wait, why are va_end and 
va_start called macros ? Aren’t they 
just normal functions? 


No, they are designed to look like 
ordinary functions, but they actually are 
replaced by the preprocessor with other 
code. 



And the preprocessor is? 


^Z The preprocessor runs just before 
the compilation step. Among other things, 
the preprocessor includes the headers into 
the code. 


% Can I have a function with just 
variable arguments, and no fixed 
arguments at all? 

^Z No. You need to have at least one 
fixed argument in order to pass its name to 

va_start. 

% What happens if I try to read more 
arguments from va_arg than have 
been passed in? 


A 


% That sounds bad. 

^Z Yep, pretty bad. 

<*■ What if I try to read an int 
argument as a double, or something? 

Random errors will occur. 


Z Random errors will occur. 


346 Chapter 7 


www.it-ebooks.info 








advanced functions 


OK, now it’s over to you. The guys in the Head First Lounge want to create a function that can 
return the total cost of a round of drinks, like this: 

;e is %.2f\n", total (3, MONKEY_GLAND, MUDSLIDE, FUZZY_NAVEL) ) ; 

This v/ill pv’nvt 'TVide is lb.*}”. 

Using the price () from a few pages back, complete the code for total (): 

double total (int args, ...) 

{ 

double total = 0; 



return total; 

} 


you are here ► 


347 


www.it-ebooks.info 














who’s paying? 




EbggctSe 

Solution 


OK, now it’s over to you. The guys in the Head First Lounge want to create a function that can 
return the total cost of a round of drinks, like this: 


printf ("Price is %.2f\n", total (3, MONKEY_GLAND r MUDSLIDE, FUZZY_NAVEL)) ; 

K 

This will pviivt W Pv-ide is \b. c f ) . 


Using the price () from a few pages back, you were to complete the code for total (): 


double total (int args, ...) 


double total = 0; 


Dont wov\ry i-f 
you\r CoAt doesn't 

look exactly like va .. list. .3PJ. . 

•this. Thev-e av-e ^ 

a -few ways o( y^stay;i(ap,. ayrgs); 

itmj it 


w\ri 


in 


.i.i; 


-fo\r(i Oj i < a\rgsj i++) { . 

cryum drink A ya^ay"<j(ap>. enur* drink); 

. .-total .rr. .-total .f y*»£e(d)j . 


} 


va_en d(ap); 


return total; 


348 Chapter 7 


www.it-ebooks.info 

















advanced functions 



Tost Drove 


If you create a little test code to call the function, you can 
compile it and see what happens: 


€ 


This is *thc *tcs*t Code- 


main () { 


printf("Price 

is 

%.2f\n". 

total(2 , 

MONKEY GLAND, 

MUDSLIDE)); 

printf("Price 

is 

%.2f\n". 

total(3, 

MONKEY GLAND, 

MUDSLIDE, FUZZY NAVEL)); 

printf("Price 

is 

% . 2 f \ n " , 

total(1, 

ZOMBIE)); 


return 0; 








Your code works! 

Now you know how to use variable arguments to 
make your code simpler and more intuitive to use. 




BULLET POINTS 


Functions that accept a variable 
number of arguments are called 

variadic functions. 

To create variadic functions, you need 
to include the stdarg.h header file. 

The variable arguments will be stored 

in a va list. 

You can control the va_list using 
va_start (), va_arg (), and 
va end() . 


You will need at least one fixed 
parameter. 

Be careful that you don’t try to read 
more parameters than you’ve been 
given. 

You will always need to know the data 
type of every parameter you read. 


you are here ► 349 


www.it-ebooks.info 















c toolbox 



Your C Toolbox 


You’ve got Chapter 7 under 
your belt, and now you’ve 
added advanced functions to 
your toolbox. For a complete list of 
tooltips in the book, see Appendix ii. 


Function pointers 
lei you pass 
•runtiions around 
as i+ they were 
data- 


yon posters 
cbe only 




•••but you £ah 
still use “them i-p 
you wah*t to. 


TV\e name <* 
every 

\s a pointer ^ 
iV>e 


^Sov~t0 
will sort 

array. 


fca 6 b sort 
£urfct»o\r\ v\ccd s 
3 pomter to 
a fcowpd^tor 

£urtt»ow 




Comparator 
-Curators decide 


A^ays o-p -Puhd"tioi 
P oi »ters eah help 

ruh di-PPere»rt 

•Puhdtohs -Por 
di-PPereirt -types ot 
daia. 


how *to order 
two pieces of 


ddtd* 


| 


Funttions wtb a 

variable number 
0 £ arguments are 
tailed "variadit" 


sidarg. h lets 

you ereate 

variadie 

-PuhdtiohS. 


350 Chapter 7 


www.it-ebooks.info 







8 static tin cl dynamic libraries 



^ Hot-swappable code 




You’ve already seen the power of standard libraries. 

Now it’s time to use that power for your own code. In this chapter, you’ll see how to create 
your own libraries and reuse the same code across several programs. What’s more, 
you’ll learn how to share code at runtime with dynamic libraries. You’ll learn the secrets 
of the coding gurus. And by the end of the chapter, you’ll be able to write code that you 
can scale and manage simply and efficiently. 


this is a new chapter 


351 


www.it-ebooks.info 





security library 


Code you cm take to the bank 

Do you remember the encrypt () function you wrote a while 
back that encrypted the contents of a string? It was in a separate 
source code file that could be used by several programs: 


ffinclude "encrypt, h" 



encrypt.c 

Somebody else has written a function called 
checksum () that can be used to check if 
the contents of a string have been modified. 

Encrypting data and checking if data has been 
modified are both important for security. 

Separately, the two functions are useful, but 
together they could form the basis of a 
security library. 


ffinclude "checksum.h" 

int checksum(char ^message) 

{ 

int c = 0; 
while (^message) { 

c += c A (int)(^message); 
message++; 

} 

return c; 

} 


This -Puneiion returns a number 
based on the Contents of a siring. 


int checksum(char ^message); 




checksum.h 


checksum.c 


352 Chapter 8 


www.it-ebooks.info 




















static and dynamic libraries 



4 4 <; 



en your pencil 


/ 



Head o*f security at the 
Piv"s*t Bank o-f Head Fiv-st- 
He also cleans pools. 


The guy at the bank has written a test program to see how 
the two functions work. He put all of the source into the same 
directory on his machine and then began to compile it. 

He compiled the two security files into object files, and then 
wrote a test program: 


^include <stdio.h> 
^include <encrypt.h> 
^include <checksum.h> 


int main() 

{ 

char s[] = "Speak friend and enter"; 
encrypt(s); 

printf("Encrypted to '%s'\n", s); 
printf("Checksum is %i\n", checksum(s)); 
encrypt(s); 

printf("Decrypted back to '%s'\n", s); 
printf("Checksum is %i\n", checksum(s)); 
return 0; 


It 


File Edit Window Help 

> gcc -c encrypt.c 

> gcc -c checksum.! 

> 

-o encrypt.o 
c “O checksum.o 



en£vyptO v/ill Cf\Oc ypt your 

data. I*f y ou ^ a 3 am * 
it will decrypt it- 


And that's when the problems started. When he compiled the program, 
something went badly wrong... 

| File Edit Window Help 


> gcc test_code.c encrypt.o checksum.o -o test_code 
test_code.c:2:21: error: encrypt.h: No such file or directory 
test_code.c:3:22: error: checksum.h: No such file or directory 

> 


Using a pencil, highlight which command or code made the compile fail. 


you are here ► 353 


www.it-ebooks.info 





















<> for standard headers 



J W W ■ ■ -w ■ • 

Solution 


The problem is in the test program. All of the source files are 
stored in the same directory, but the test program includes the 
encrypt.h and checksum.h headers using angle brackets (< >). 



Angle brackets are for standard headers 

If you use angle brackets in an # include statement, the compiler 
won’t look for the headers in the current directory; instead, it will search 
for them in the standard header directories. 

To get the program to compile with the local header files, you need to 
switch the angle brackets for simple quotes 


stdio-h is —^jv- 
stored in ^ 
one of -the 

standard 
header 
directories. 


ffinclude <stdio.h> 
ffinclude "encrypt.h" 

ffinclude 




<> 


Now the dode dompiles dorredtly- 
It endrypts the test string to 
something unreadable- 


I File Edit Window Help 


> gcc test code.c encrypt.o checksum.o -o test code 


"checksum.h" 

/N 


endrypt-h and dhedksumh are in 
the same diredtory as the program- 


354 Chapter 8 


> ./test_code Nif 

Encrypted to 'Loz~t?ymvzq{?~q{?zqkzm' 
Checksum is 89561741 

Decrypted back to 1 Speak friend and enter' 
Checksum is 89548156 

> 


li 


The dhedksum returns different 
values -for different strings. 


Calling the endrypto -fundt'ion a sedond 
time returns the original string- 


www.it-ebooks.info 















static and dynamic libraries 


'Where are the standard header directories? 


So, if you include headers using angle 
brackets, where does the compiler go 
searching for the header files? You'll need 
to check the documentation that came with 
your compiler, but typically on a Unix-style 
system like the Mac or a Linux machine, the 
compiler will look for the files under these 
directories: 


/usr/local/include 

/usr/include 



/usr/lo£al/mtlude is 
used «Por header -files -for 
-third-party libraries. 



And if you're using the MinGW version of the 
gcc compiler, it will normally look here: 

C:\MinGW\include 


It will dhedk /usv/lodal/indlude -first 


/W/indlude is normally 
used -for operating 
system header -files. 


Put what if you want to share code? 

Sometimes you want to write code that will be 
available to lots of programs, in different folders, 
all over your computer. What do you do then? 



www.it-ebooks.info 


Yeah, I gotta get security 
added to all these different 
programs. I don't want a 
separate copy of the security 
code for each one... 


There are two sets of files that you want to share 
between programs: the .h header files and the 
.o object files. Let’s look at how you can share 
each type. 




you are here ► 


355 



sharing headers 


Sharing .h header files 

There are a few ways of sharing header files between 
different G projects: 



Store them in a standard directory. 

If you copy your header files into one of the standard directories like 
/ usr/local/include , you can include them in your source code using 
angle brackets. 

You ta* use av^le bvadkets it youv header 
#include <encrypt.h> tiles are in a standard directory. 



Put the full pathname in your include statement. 

If you want to store your header hies somewhere else, such as 
/ my_header_Jiles , you can add the directory name to your 
include statement: 


/ 


Root directory 



my_header_files 


#include "/my_header_files/encrypt.h" 

encrypt, h 



checksum.h 




You can tell the compiler where to find them. 

The final option is to tell the compiler where it can find your 
header hies. You can do this with the -I option on gcc: 


gcc -I/my header files test code.c ... -o test code 


The - I option tells the gcc compiler that there’s another 
place where it can hnd header hies. It will still search in all the 
standard places, but hrst it will check the directory names in 
the - I option. 


d 

This -tells “the domfiler to look 
m /r»yJ^eadevyjfiles as well 
as the standard directories. 


356 Chapter 8 


www.it-ebooks.info 











static and dynamic libraries 


Share .0 object files by using the full pathname 


Now you can always put your .0 object files into some sort of 
shared directory. Once you’ve done that, you can then just add 
the full path to the object files when you’re compiling the 
program that uses them: 


/ 


Root directory 



my_object_files 


gcc -I/my_header_files test_code.c 
/my_ob ject_f iles/encrypt. o 
/my_object_files/checksum, o -o test_code 



encrypt.o 


Msmg the -Pull pathname to /r*y_obje£t__files ,s a Central 

object -Piles meahs you store -Por your object -Piles. 

dov\ t heed a separate £opy 
■for eath C project 



checksum.o 


If you compile your code with the full pathname to the object 
files you want to use, then all your G programs can share the 
same encrypt.o and checksum .0 files. 


Hmmm... That's OK if I just have 
one or two object files to share, but 
what if I have a lot of object files? I 
wonder if there's some way of telling 
the compiler about a bunch of them... 


Yes, if you create an archive of object 
files, you can tell the compiler about a 
whole set of object files all at once. 

An archive is just a bunch of object files wrapped up 
into a single file. By creating a single archive file of all 
of your security code, you can make it a lot easier to 
share the code between projects. 

Let’s see how to do it... 



357 


www.it-ebooks.info 









archives 


Am archive contains .0 files 


Ever used a .zip or a .tar file? Then you know how 
easy it is to create a file that contains other files. That’s 
exactly what a .a archive file is: a file containing other 
files. 

Open up a terminal or a command prompt and 
change into one of the library directories. These are 
the directories like /usr/lib or C:\MinGW\lib that 
contain the library code. In a library directory, you’ll 
find a whole bunch of .a archives. And there’s a 
command called nm that you can use to look inside 
them: 


libl.a 



libmain.o libyywrap.o 



Y° u '"igh-t not have a libl.a on yo w- machine, bu-fc 
you can -fcvy -the Command on any othev .a -file- 


isS IS 3 ft 3 | File Edit Window Help Silenceln T heLibrary 

called libl a. 


> nm libl.a 


librwaift-o 


libyyv/vapo 



libl. a (libmain. o) : 
00000000000003a8 s EH_frameO 

U _exit 

0000000000000000 T _main 4z - 

00000000000003c0 S _main.eh 

U _yylex 

libl. a (libyywrap. o) : 
0000000000000350 s EH_frame0 
0000000000000000 T _yywrap 
0000000000000368 S _yywrap.eh 
> 


■ U T maift” r*C3ftS libmaift-o 
6oft*taiftS a rwa'mO *fuft£*tioft. 


The nm command lists the names that are stored 
inside the archive. The libl.a archive shown here 
contains two object files: libmain.o and libyywrap.o. 

What these two object files are used for doesn’t really 
matter; the point is that you can take a whole set of 
object files and turn them into a single archive file that 
you can use with gcc. 

Before you see how to compile programs using .a, let’s 
see how to store our encrypt .0 and checksum .0 files in an 
archive. 


358 Chapter 8 


www.it-ebooks.info 













static and dynamic libraries 


Create an archive with the ar command... 

The archive command (ar) will store a set of object files in 
an archive file: 


The r means -the a 
-file will be updaied 
•*P it already exists. 



The s tells ar to Create 
an index at the start o-P 
the a -file. 


These are the -Piles that will be 
stored in the archive. 

^ V 


ar -res libhfsecurity.a encrypt.o checksum.o 


r 

The t means that the archive 
will be treated without any 
-Peedbatk. 


/T 

This is -the name ot 
the a -file -fco evea-te- 


Did you notice that all of the .a files have names like 
lib<something>.a? That’s the standard way of 
naming archives. The names begin with lib because they 
are static libraries. You’ll see what this means later on. 



Watch it! 


Make sure you always 
name your archives 
lib<something>.a. 


If you don’t name them 
this way, your compiler will 
have problems tracking them down. 


...then store the .a in a library directory 

Once you have an archive, you can store it in a library 
directory Which library directory should you store it 
in? It’s up to you, but you have a couple of choices: 



You can put your .a file in a standard 
directory like /usr/local/lib. 

Some coders like to install archives into a standard 
directory once they are sure it’s working. On Linux, on 
Mac, and in Gygwin, the / usr/local/lib directory is a 
good choice because that’s the directory set aside for your 
own local custom libraries. 



Put the .a file in some other directory. 

If you are still developing your code, or if you don’t feel 
comfortable installing your code in a system directory, 
you can always create your own library directory. For 
example: /my_lib. 



0y\ mos't machines, you need ho be an 
admmisiva-fcor -to fu-t -Piles in /us\r/lo£al/lib. 


you are here ► 359 


www.it-ebooks.info 






compile with -/ 


Finally, compile your other programs 


The whole point of creating a library archive was so you 
could use it with other programs. If you’ve installed your 
archive in a standard directory, you can compile your 
code using the -1 switch: 


Remembev “to list youv souvde 
-files be-fove youv —I libvavies. 



h-Pseduvi-ty tells the dompilev to look 
-for an archive called I i bK-Cse^uvi ty-a - 


gcc test_code.c -lhfsecurity -o test_code 

|-f youVe usinj several avdhives, 
you dan set sevev-al -I options. 


^ Po you need a -I option? 
It depends on v/heve you 
put youv headevs. 


Gan you see now why it’s so important to name your 
archive lib<something>.a ? The name that follows the -1 
option needs to match part of the archive name. So if your 
archive is called lib awesome.a , you can compile your 
program with the -1 awe some switch. 

But what if you put your archive somewhere else, like 
/my_libl In that case, you will need to use the -L option 
to say which directories to search: 



gcc test_code.c -L/my_lib -lhfsecurity -o test_code 





The contents of the library directories can be very different from one machine to another. Why is that? It's 
because different operating systems have different services available. Each of the .a files is a separate library. 
There'll be libraries for connecting to the network, or creating GUI applications. 

Try running the nm command on a few of the .a files. A lot of the names listed in each module will match 
compiled functions that you can use: 

means w 7e%*t> W whidh means “this is a -rundhion. 

0000000000000000 T _yywrap ^_ The „ ame £ ^ 

The nm command will tell you the name of each .o object file and then list the names that are available within 
the object file. If you see a T next to a name, that means it's the name of a function within the object file. 


360 Chapter 8 


www.it-ebooks.info 










static and dynamic libraries 


// -3 

tv 3 


L 


\ Make Magnets 


The security guy is having trouble compiling one of the bank programs 
against the new security library. He has his source code as well as the 
encrypt and checksum source code in the same directory. For now, he 
wants to create the libhfsecurity.o archive in the same directory and then 
use it to compile his own program. Can you help him fix his makefile? 

Note: the bank vault program uses these ^include statements: 


^include <encrypt.h> 
^include <checksum.h> 


This is the makefile: 


encrypt.o: encrypt.c 


gcc 


encrypt.c -o encrypt.o 


checksum.o: checksum.c 


gcc 


checksum.c -o checksum.o 


libhfsecurity.a: encrypt.o 


ar -res 


encrypt.o 


bank vault: bank vault.c 


gcc 


-I 


-L 


-o bank vault 



you are here ► 361 


www.it-ebooks.info 


































make unpuzzled 



Make Magnets Solution 

The security guy is having trouble compiling one of the bank programs 
against the new security library. He has his source code, as well as the 
encrypt and checksum source code in the same directory. For now, he 
wants to create the libhfsecurity.o archive in the same directory and then 
use it to compile his own program. You were to help him fix his makefile. 


Note: the bank vault program uses these ^include statements: 


#include <encrypt.h> # mtUes a , e ^ angle brackets- 

^include <checksum.h> The dompiler will need to be “told where 


This is the makefile: 


-the header -files are with a -I statement- 


encrypt.o 


gcc 


encrypt. c Creates the objedt -Pile 

-from the endrypt-d source tile. ^ 

encrypt.c -o encrypt.o 



checksum.o: checksum.c 


gcc 




This Creates the object -from 
the dhedksumd sourde -file- 

sk 

checksum.c -o checksum.o 


libhfsecurity.a: encrypt.o 



ar -res 



encrypt.o 


bank vault: bank vault.c 



You dan't build the libh-fseduritya ardhive until 
we've dreated endrypto and dhedksum.o. 


This will dreate the 
libh-psedurity.a ardhive. 


You need -Ihtsedurity bedause the 
ardhive is dalled libh-rseduritva- 



gcc 


'T' 

The program's souree 
(■ode needs to be listed 
be-fore the library Code- 


bank_vault.c I — I / * I 

I • • • •••• §■••••■ 

- ■ Is. 

\tu need -I- bedause the 

O , I I u » 


-L 


□ . 


header -f iles are in the 
(turrent) directory. 


You need the -L 
bedause the ardhive is i» 
the durrent diredtory. 



-o bank vau 



/usr/local/include 



/usr/local/lib 



362 Chapter 8 


www.it-ebooks.info 











































static and dynamic libraries 



BULLET POINTS 


■ Headers in angle brackets (< >) are read from the 
standard directories. 


■ Examples of standard header directories are 
/usr/include and C:\MinGW\include. 


■ A library archive contains several object files. 

■ You can create an archive with ar -res 
libarchive.a fileO.o filel.o.... 


Library archive names should begin lib. and end .a. 

If you need to link to an archive called libfred.a, 
use -lfred. 

The -L flag should appear after the source files in 
the gcc command. 


there] ar© no 

Dumb Questions 


O: How do I know what the standard 
library directories are on my machine? 


^Z You need to check the 
documentation for your compiler. On most 
Unix-style machines, the library directories 
include /usr/lib and /usr/local/lib. 


% When I try to put a library archive 
into my / usr/lib directory, it won’t let me. 
Why is that? 


Almost certainly security. Many 
operating systems will prevent you from 
writing files to the standard directories in 
case you accidentally break one of the 
existing libraries. 


% Is the ar format the same on all 
systems? 


No. Different platforms can have slightly 
different archive formats. And the object 
code the archive contains will be completely 
different for different operating systems. 


% If I’ve created a library archive, 
can I see what’s inside it? 


A: 


Yes. ar -t <filename> will 
list the contents of the archive. 

% Are the object files in the archive 
linked together like an executable? 

No. The object files are stored in the 
archive as distinct files. 

% Can I put any kind of file in a 
library archive? 

A- No. The ar command will check the 
file type before including it. 



Why is it called “static” linking? 


Because it can’t change once it’s 
been done. When two files are linked 
together statically, it’s like mixing coffee 
with milk: you can’t separate them 
afterward. 


% Should I use the HF security 
library to secure the data at my bank? 


That’s probably not a good idea. 


% Can I extract a single object file 
from an archive? 


^Z Yes. To extract the encrypt.o 
file from libhfsecurity.a, use ar -x 

libhfsecurity.a encrypt.o. 


you are here ► 363 


www.it-ebooks.info 








interview 



The LinKti? Imposed 


This week’s interview: 
What Exactly Do You Do? 


Head First: Linker, thank you so much for making 
time for us today. 

Linker: It’s a pleasure. 

Head First: I’d like to begin by asking if you ever 
feel overlooked by developers. Perhaps they don’t 
understand exactly what it is you do? 

Linker: I’m a very quiet person. A lot of people 
don’t talk to me directly with the Id command. 

Head First: id? 

Linker: Yes? See, that’s me. 

Head First: That’s a lot of options on my screen. 

Linker: Exactly. I have a lot of options. A lot of 
ways of joining programs together. That’s why some 
people just use the gcc command. 

Head First: So the compiler can link files together? 

Linker: The compiler works out what needs to be 
done to join some files together and then calls me. 
And I do it. Quietly. You’d never know I was there. 

Head First: I do have another question... 

Linker: Yes? 


Head First: I hate to sound foolish, but what 
exactly is it you do? 

Linker: That’s not a foolish question. I stitch pieces 
of compiled code together, a bit like a telephone 
operator. 

Head First: I don’t follow. 

Linker: The old telephone operators would patch 
calls from one location to another so the two parties 
could talk. An object file is like that. 

Head First: How so? 

Linker: An object file might need to call a function 
that’s stored in some other file. I link together the 
point in one file where the function call is made to 
the point in another file where the function lives. 

Head First: You must have a lot of patience. 

Linker: I like that kind of thing. I make lace in my 
spare time. 

Head First: Really? 

Linker: No. 

Head First: Linker, thank you. 


364 Chapter 8 


www.it-ebooks.info 


static and dynamic libraries 


The Head First (ryw is going global 

The guys at the Head First Gym are going to spread their 
business worldwide. They are opening up outlets on four 
continents, and each one will contain their trademarked 
Blood, Sweat, and Gears™ gym equipment. So they’re writing 
software for their ellipticals, treadmills, and exercise bikes. 
The software will read data from the sensors that are fitted 
on each device and then display information on a small LCD 
screen that will tell users what distance they’ve covered and 
how many calories they’ve burned. 






That’s the plan, anyway, but the guys need a little help. 
Let’s look into the code in a little more detail. 


you are here ► 365 


www.it-ebooks.info 



test the code 


Calculating calories 

The team is still working on the software, but they’ve got one 
of the key modules ready The hfcal library will generate the 
main data for the LCD display If the code is told the user’s 
weight, the virtual distance she’s traveled on the machine, and 
then a special coefficient , it will generate the basic LCD details 
on the Standard Output: 


^include <stdio.h> 

include <hf cal. h> The ^ f' ,le ^ n C i- 

dedlav-atio* ok the display_dalonesU -tuodtio*. 

void display_calories(float weight, float distance, float coeff) 

{ ^_The weight is m pounds. 

printf("Weight: %3.2f lbs\n", weight); 
printf ( "Distance: %3.2f miles\n", distance); 
printf ("Calories burned: %4.2f cal\n", coeff * weight * distance); 


The distaode is \V\ miles. 


} 


The team hasn’t yet written the main code for each piece of 
equipment. When they do, there will be separate programs for 
the ellipticals, treadmills, and exercise bikes. Until then, they’ve 
created a test program that will call the hfcal. c code with some 
example data: 


finclude <stdio.h> 

^include <hfcal.h> 

The -test user weighs 1/5.2 

. ... pounds and has done II 3 

int main () . Monc 110 

">'les on the elliptical. 

{ kfhJ 

display calories (115.2, 11.3, 0.79); 


return 0; 


pov “this madhioCj “the 
doetPidieot ,s 0 - 1 % 




T 

This is the test Code- 
366 Chapter 8 


elliptical, c 



This dode will ao ih-fco hfcal.c 
a -Pile dalled h-fdald. 



The LCD display will daptuve 
-the £ta*davd Output 

v 


tVQlGHT: 115.20 IBS 

Disnnce: 11.30 roues 
CnidRiss bi/rusd: 1023.39 cal 


This is what the display 
looks like -Poir the test 
pv-ocyrar*. 


www.it-ebooks.info 














static and dynamic libraries 



Now that you've seen the source code for the test program and 
the hfcal library, it's time to build the code. 

Let's see how well you remember the commands. 


1. Start by creating an object file called hfcol.o. The hfcol.h header is going 
to be stored in ./includes: 


2. Next, you need to create an object file called elliptical.o from the 
elliptical.c test program: 


3. Now, you need to create an archive library from hfcal.o and store it in 
./libs: 


4. Finally, create the elliptical executable using elliptical.o and the 
hfcal archive: 


you are here ► 


367 


www.it-ebooks.info 










code built 



Now that you've seen the source code for the test program and 
the hfcal library, it's time to build the code. 

Let's see how well you remembered the commands. 


1. Start by creating an object file called hfcal.o. The hfcol.h header is going 

to be stored in ./includes: ^ ^ cds ^ kr>ov , ^ the header -Pile is. 

. gdd .rrX. A^.Ud.CS rr.C. hPcdlfc .r:P. .b.p£.al-.<? . 

f K 

Did you remember -to add the -I Plag? r * ca * s J us “t Create the object Pile; don't link it-" 

2. Next, you need to create an object file called elliptical.o from the 
elliptical.c test program: 


gdd -I/indludes -c elliptical-d -o ellipticalo 

.f. 

Again, you need bo -tell the donfilev- that the headevs ave in /mdludes. 


3. Now, you need to create an archive library from hfcal.o and store it in 
■/libs: 

/ I he libv-av-y needs to be named lib....a. 

3v -vds /libs/libh-fdal-3 h-Pdalo 

.f"". 

The archive needs to go into the -/libs directory. 

4. Finally, create the elliptical executable using elliptical.o and the 

hfcal archive: -IhPcal tells the Compiler to look Por libhPdaU 


7 

gdd elliptidal-o -L./libs -IhPdal -o elliptical 


YouVe building the program using 
ellipticalo and the libv-av-y. 



./libs tells the Compiler where the library is stored- 


Now that you've built the elliptical 
program, you dan run it on the Console 1 



| File Edit~~Window Help SilencelnTheLibrary 


> ./elliptical 
Weight: 115.20 lbs 
Distance: 11.30 miles 
Calories burned: 1028.39 cal 

> 


368 Chapter 8 


www.it-ebooks.info 














static and dynamic libraries 


Put things are a bit more complex... 

Turns out, there’s a problem. The Head First Gyms are expanding 
everywhere , in different countries that use different languages and 
different measures. For example, in England, the machines need to 
report information in kilograms and kilometers: 



WsiGHT: 53.25 KG 

Dismncs: 15.13 km 

CALURieS BURN3D: 750.42 CAL 



The gyms have lots of different types of equipment. If they have 20 
different types of machines, and they have gyms in 50 countries, that 
means there will be 1 } 000 different versions of the software. That’s a 
lot of different versions. 


And then there are other problems too: 


o 

o 

o 


If an engineer upgrades the sensors used on a machine, she might need to 
upgrade the code that talks to them. 

If the displays ever change, the engineers might need to change the code that 
generates the output. 

Plus many, many other variations. 


If you think about it, you get the same kinds of problems when you 
write any software. Different machines might require different device 
driver code , or they might need to talk to different databases or different 
graphical user interfaces. You probably won’t be able to build a version 
of your code that will work on every machine, so what should you do? 


you are here ► 369 


www.it-ebooks.info 






hold the anchovies 


Programs are made out of lots of pieces 


You’ve already seen that you can build programs using different 
pieces of object code. You’ve created .0 files and .a archives, 
and you’ve linked them together into single executables. 



...but once they Ye linked, you can't change them 

The problem is that if you build programs like this, they are 
static. Once you’ve created a single executable file from 
those separate pieces of object code, you really have no way of 
changing any of the ingredients without rebuilding the whole 
program. 



The program is just a large chunk of object code. There’s no 
way to separate the display code from the sensor code; it’s 
all lost in the mix. 

370 Chapter 8 


www.it-ebooks.info 










static and dynamic libraries 



t* //yyMY/y vV 

y, s/yy//////y// //> s, 












Wouldnt it be dreamy if there 
were a way to run a program using 
switchable pieces of object code? 
But I guess that's just a fantasy... 


you are here ► 371 


www.it-ebooks.info 









static vs. dynamic 


Pynamic linking happens at runtime 

The reason you can’t change the different pieces of object 
code in an executable file is because, well, they are all 
contained in a single file. They were statically linked 
together when the program was compiled. 

♦ 

Raisin and andhovy take —^ 

Vcvy di-f'fitul'b “to remove just “the raisins 



But if your program wasn’t just a single file—if your 
program was made up of lots of separate files that only 
joined together when the program was run—you would 



The trick, then, is to find a way of storing pieces of object 
code in separate files and then dynamically linking 
them together only when the program runs. 



372 Chapter 8 


www.it-ebooks.info 
















static and dynamic libraries 


Can you link .a at runtime? 

So you need to have separate files containing separate 
pieces of object code. But you’ve already got separate files 
containing object code: the .0 object files and the .a archive 
files. Does that mean you just need to tell the computer not 
to link the .0 files until you run the program? 

Sadly, it’s not that easy. Simple object files and archives 
don’t have quite enough information in them to be linked 
together at runtime. There are other things our dynamic 
library files will need, like the names of the other files they 
need to link to. 


Pynawic libraries are object files oh steroids 


So, dynamic libraries are similar to those .0 object files 
you’ve been creating for a while, but they’re not quite the 
same. Like an archive file, a dynamic library can be built 
from several .0 object files, but unlike an archive, the object 
files are properly linked together in a dynamic library to 
form a single piece of object code. 



Is it a bird? Is it 
a plane? Ido, it^s a —^ 
relocatable object 
-Pile with metadata. 


Tbe library is built -Prom ^ 
one or more -o -Piles. 


A dynamic library Contains e*tra 
in-formation that tbe operating system will 
need to link tbe library to other things. 


At tbe heart o-P a dynamic 
library is a single piece o-P 
object Code. 


So how do you create your own dynamic libraries? 
Let’s see. 


you are here ► 373 


www.it-ebooks.info 



create an object file 


First create aw object file 


If you’re going to convert the hfcal.c code into a 
dynamic library, then you need to begin by compiling it 

into a .0 object file, like this: _ t weaM "p 0 r,'i link ike tode “ 


gcc -I/includes -fPIC 

t \ 

The hftalh headev is m /mdudes. 


-c hfcal.c -o hfcal.o 
Wha-t does —fP|C mean? 


Did you spot the difference? You’re creating the hfcal.o 
exactly the same as before except you’re adding an 
extra flag: -f PIC. This tells gcc that you want to 
create position-independent code. Some operating 
systems and processors need to build libraries from 
position-independent code so that they can decide at 
runtime where they want to load it into memory 

Now, the truth is that on most systems you don’t need to 
specify this option. Try it out on your system. If it’s not 
needed, it won’t do any harm. 


Posit ion-independe 
code can be moved 
around in memory. 




So, what is position-independent code? 

Position-independent code is code that doesn't mind where the computer 
loads it into memory. Imagine you had a dynamic library that expected to 
find the value of some piece of global data 500 bytes away from where the 
library is loaded. Bad things would happen if the operating system decided 
to load the library somewhere else in memory. If the compiler is told to 
create position-independent code, it will avoid problems like this. 

Some operating systems, like Windows, use a technique called memory 
mapping when loading dynamic libraries, which means all code is 
effectively position-independent. If you compile your code on Windows, 
you might find that gcc will give you a warning that the -f PIC option is 
not needed. You can either remove the -f PIC flag, or ignore the warning. 
Either way, your code will be fine. 


374 Chapter 8 


www.it-ebooks.info 






static and dynamic libraries 


What you call your dynamic library depends on your platform 


Dynamic libraries are available on most operating systems, and 
they all work in pretty much the same way But what they’re 
called can vary a lot. On Windows, dynamic libraries are usually 
called dynamic link libraries and they have the extension 
.dll. On Linux and Unix, they’re shared object files (.so), 
and on the Mac, they’re just called dynamic libraries (. dylib ). 
But even though the files have different extensions, you can 
create them in very similar ways: 


gcc -shared hfcal.o -o 



N\\y\6iW oy\ Windows 

C:\libs\hfcal.dll ^ 

/libs/libhfcal. dll. a C v^ m °" VVmdo ' NS 

/libs/libhf cal. so ^— Linux or Unix 
/libs/libhf cal. dylib /V\^t 


The -shared option tells gcc that you want to convert a .0 
object file into a dynamic library When the compiler creates 
the dynamic library, it will store the name of the library inside 
the file. So, if you create a library called libhfcal.so on a Linux 
machine, the libhfcal.so file will remember that its library name 
is hfcal. Why is that important? It means that if you compile a 
library with one name, you can’t just rename the file afterward. 

If you need to rename a library, recompile it with the new name. 


Compiling the elliptical program 


Watck it! 


On some older 
Mac systems, 
the -shared flag 
is not available. 


But don’t worry, on 
those machines, if you just replace 
it with -dynamiclib, everything 
will work exactly the same way 


Once you’ve created the dynamic library, you can use it just like 
a static library. So, you can build the elliptical program like 
this: 

gcc -I\include -c elliptical.c -o elliptical.o 
gcc elliptical.o -L\libs -lhfcal -o elliptical 

Even though these are the same commands you would use 
if hfcal were a static archive, the compile will work differently. 

Because the library’s dynamic, the compiler won’t include the 
library code into the executable file. Instead, it will insert some 
placeholder code that will track down the library and link to it at 
runtime. 


Now, let’s see if the program runs. 


Library names in 

MinGW and Cygwin 

Both MinGW and Cygwin let you 
use several name formats for 
dynamic libraries. The hfcol library 
can have any of these names: 

libhf cal.dll.a 

libhfcal.dll 

hfcal.dll 


you are here ► 375 


www.it-ebooks.info 







test drive 



You’ve created the dynamic library in the / libs directory and built the 
elliptical test program. Now you need to run it. Because hfcal isn’t in 
one of the standard library directories, you’ll need to make sure the 
computer can find the library when you run the program. 

On a Mac 

On the Mac, you can just run the program. When the program is 
compiled on the Mac, the full path to the / libs/libhfcal.dylib file is stored 
inside the executable, so when the program starts, it knows exactly where 
to find the library. 


File Edit Window Help I mAMac 


> ./elliptical 
Weight: 115.20 lbs 
Distance: 11.30 miles 
Calories burned: 1028.39 cal 

> 


e 


Mat 


On Linux 

That’s not quite what happens on Linux. 

On Linux, and most versions of Unix, the compiler just records the 
filename of the libhfcalso library, without including the path name. That 
means if the library is stored outside the standard library directories (like 
/ usr/lib), the program won’t have any way of finding the hfcal library. To 
get around this, Linux checks additional directories that are stored in the 
LD LIBRARY PATH variable. If you make sure your library directory 
is added to the LD_LIBRARY_PATH—and if you make sure you 
export it—then elliptical will find libhfcalso. 


On Linux, you need "to set 

the lv^libraryjpath 

variable so the program 
£an -Pihd the library. 

t 

There’s no need to do this 
i-f the library is somewhere 
standard, like /usr/lib- 

376 Chapter 8 


You need to make sure 
the variable is exported- 




| File Edit Window Help I’mUnux 


> export LD_LIBRARY_PATH=$LD_LIBRARY_PATH: /libs 

> ./elliptical 
Weight: 115.20 lbs 
Distance: 11.30 miles 
Calories burned: 1028.39 cal 

> 


A 

Linux 


www.it-ebooks.info 












static and dynamic libraries 


On Windows 

Now let’s take a look at how to run code that’s been compiled using the 
Gygwin and Min GW versions of the gcc compiler. Both compilers 
create Windows DLL libraries and Windows executables. And just like 
Linux, Windows executables store the name of the hfcal library without 
the name of the directory where it’s stored. 

But Windows doesn’t use a LD_LIBRARY_PATH variable to hunt the 
library down. Instead, Windows programs look for the library in the 
current directory, and if they don’t find it there, the programs search for 
it using the directories stored in the PATH variable. 

Using Cygwiw 

If you’re compiled the program using Gygwin, you can run the program 
from the bash shell like this: 


File Edit Window Help I’mCygwin 


> PATH="$PATH:/libs" 

> ./elliptical 
Weight: 115.20 lbs 
Distance: 11.30 miles 
Calories burned: 1028.39 cal 

> 


VV'mdov/s using Cygwin 


Using Mm(rW 

And if you’ve compiled the program using the Min GW compiler, you 
can run it from the command prompt like this: 


File Edit Window Help I’mMinGW 


C:\code> PATH="%PATH% :C:\libs" 
C:\code> ./elliptical 
Weight: 115.20 lbs 
Distance: 11.30 miles 
Calories burned: 1028.39 cal 
C:\code> 


Windows using Min^jl/V 


Does this seem a little complex? It is, which is why most programs that 
use dynamic libraries store them in one of the standard directories. 
That means on Linux and the Mac, they are normally in directories 
like / usr/lib or / usr/local/lib ; and in Windows, developers normally keep 
.DATs stored in the same directory as the executable. 


you are here ► 377 


www.it-ebooks.info 







exercise 




The guys at the Head First Gym are about to ship a treadmill over to England. The embedded 
server is running Linux, and it already has the US code installed. 


The tech guys installed the library in 
/usr/local/lib. 

This is -the /usv/Ual/lib (o\ dev. 




/usr/local/lib 


common-lisp 


python2.7 

python4.2 

site_ruby 

libfluxcap.a 






Theme ame lots o-P othem 
-riles ih heme as well. ^ 



libfluxcap.la 


libhfcal.so 


This is wheme the VvPtal 
libmamy is mstalled- 


libmrfusion.so 


And this machine also has the header 
file for the hfcal library installed in 
/usr/local/include: 



This is -the /W/lotal/'mtUe bolder. 


r a 


/usr/local/include 


python2.7 



python4.2 





Theme ame lots op othem 
-Piles ih heme too. ^ 



fluxeap.h 

hf ca |.h ^— This is the VvCtal headem -file. 

mrfusion.h 

bwanalyze.h 


The tech guys like to install libraries using these directories because it’s a little more 
standard. The machine is all configured for use in the US, but things need to change. 


378 Chapter 8 


www.it-ebooks.info 





















static and dynamic libraries 


The system needs to be updated for use in the gym it is being shipped to in England. That means the 
treadmill’s display code needs to be switched from miles and pounds to kilometers and kilograms. 

This is -the CoAt (oY *thc U* $ym. 



^include <stdio.h> 
finclude <hfcal.h> 

void display calories(float weight, float distance, float coeff) 

{ This todt displays the 

printf ("Weight: %3.2f kg\n", weight / 2.2046); v^> ‘m-Poirmatioh i* kms a*d kgs 

printf("Distance: %3.2f km\n", distance * 1.609344); 
printf ("Calories burned: %4.2f cal\n", coeff * weight * distance); 


} 


W 

This -file is ih the /home/ebvovm dive^tovy. 



hfcal UK.c 


The software that’s already installed on the machine needs to use this new version of the code. 
Because the applications connect to this code as a dynamic library, all you need to do is compile it into 
the /usr/local/lib directory. 

Assuming that you are already in the same directory as the hfcal_UK.c file and that you have write 
permissions on all the directories, what commands would you need to type to compile this new version 
of the library? 


If the treadmill’s main application is called /opt/apps/treadmill, what would you need to type in to run 
the program? 


you are here ► 379 


www.it-ebooks.info 















exercise solved 



Solution 


The guys at the Head First Gym are about to ship a treadmill over to England. The embedded 
server is running Linux, and it already has the US code installed. 


The tech guys installed the library in 
/usr/local/lib. 

This is the /usv/Ual/lib folder. 


Theve are lots ot other 
f'les in here as well. ^ 



/usr/local/lib 


common-lisp 


python2.7 


python4.2 


site_ruby 


libfluxcap.a 


libfluxcap.la 


. .r^-This is v/here the \£t*\ 
hbhfcal.so « , s ^ w . 


libmrfusion.so 


And this machine also has the header 
file for the hfcal library installed in 
/usr/local/include: 



This is the /W/lotal/'mtUe folder. 


r a 


/usr/local/include 


python2.7 



python4.2 





There are lots o( other 
-Piles ih here too. ^ 



fluxeap.h 

hf ca |.h ^— This is the h-ftal header -file- 

mrfusion.h 

bwanalyze.h 


The tech guys like to install libraries using these directories because it’s a little more 
standard. The machine is all configured for use in the US, but things need to change. 


380 Chapter 8 


www.it-ebooks.info 





















static and dynamic libraries 


The system needs to be updated for use in the gym it is being shipped to in England. That means the 
treadmill’s display code needs to be switched from miles and pounds to kilometers and kilograms. 


^include <stdio.h> 
finclude <hfcal.h> 

void display_calories(float weight, float distance, float coeff) 

{ 

printf("Weight: %3.2f kg\n", weight / 2.2046); 

printf("Distance: %3.2f km\n", distance * 1.609344); 

printf ("Calories burned: %4.2f cal\n", coeff * weight * distance); 

} 



hfcalJJK.c 

The software that’s already installed on the machine needs to use this new version of the code. 

Because the applications connect to this code as a dynamic library, all you need to do is compile it into 
the /usr/local/lib directory. 

Assuming that you are already in the same directory as the hfcal_UK.c file and that you have write 
permissions on all the directories, what commands would you need to type to compile this new version 
of the library? 

__ you don’t need bo seb a —I 

You need to Compile the-^ acc -C —fPIC b-fcal U^C -o b-fcalo option, became tbe beaded ' e 

source Code to an object Pile. . . .* '•» 3 standard directory. 

Then you need to Convert tbe 3^^ “T^tared hpal o —o /usr/loCal/lib/libhkal so . 

object -file bo s shared object 


If the treadmill’s main application is called /opt/apps/treadmill, what would you need to type in to run 

the program? _ 

You doir/t need bo seb bbe LD — L|BRARYl_PATH 

/opb/apps/treadmill variable because bbe library is in a siav\da>cd direcbory. 


Did you spot that tbe library and headers bad been installed in standard 
directories? That meant you didn’t have to use a -X -Pla^ when you were 
Compiling the Code, and you didn’t have to set tbe LD_UBRARYlPATH 
variable when you were running tbe Code. 


you are here ► 381 


www.it-ebooks.info 













test drive 



Now that you’ve updated the library on the 
English treadmill, let’s try it against an American 
machine. This is one of the unaltered US 
treadmills using the original version of libhfcalso 
library: 


is 2* _V 

bread** i||. r 



The treadmill application starts when the machine 
boots up, so after using the machine for a while the display 
shows this: 


WsiGHT: 117.40 LBS 
Disnncs: 0.40 MHOS 
CMQRIQS BURO0D: 750.42 CAL 


The treadmill program on the US. machine is 
dynamically linking itself to the version of the libhfcalso 
library that was compiled from the US version of the 
hf cal program. 

But what about the treadmill in England? 

382 Chapter 8 



www.it-ebooks.info 














static and dynamic libraries 



The English machine has the same 
treadmill program installed, but 
on this machine you recompiled the 
libhfcal.so library from the source code 
in the hfcal_UK.c file. 


This is dn English 
treadmill. 



When the runner has been on the treadmill for a similar distance, 
the display looks like this: 


The weight 
is displayed 
in kgs. 


^1 


IV'eiGHT: 53.25 KG 




The distance 
is displayed 
in kms. 


SS^Distaucq: 15.13 Km 


OSORIOS BGRW3D: 750.42 CAL 



The dalovies ave still 
displayed in dalov-ies. 


It worked. 

Even though the treadmill program was never recompiled, it was 
able to pick up the code from the new library dynamically. 

Dynamic libraries make it easier to change code at runtime. You 
can update an application without needing to recompile it. If you 
have several programs that share the same piece of code, you can 
update them all at the same time. Now that you know how to create 
dynamic libraries, you’ve become a much more powerful G developer. 


you are here ► 383 


www.it-ebooks.info 










static and dynamic 


Fireside Chats 



Tonight’s talk: Two renowned proponents of modular software 
discuss the pros and cons of static and dynamic linking. 


Static: 

Well, I think we can both agree that creating code in 
smaller modules is a good idea. 


It makes so much sense, doesn’t it? 


Keeps the code manageable. 


Nice, large programs. 


Yes. Nice BIG programs with their dependencies 
fixed. 


What do you mean, old friend? 


Well... <laughs>.. .that’s a very.. .but no, seriously. 

What? Lots of separate files? Joined together willy- 
nilly? \ 

But that’s.. .that’s.. .a recipe for chaosl 
You should get things right in the first place. 


Dynamic: 

Absolutely. 

Yes. 

Yes. 

Large? 

That doesn’t sound like a good idea. 

I think programs should be made of lots of small 
files that link together only when the program is run. 

I’m being serious. 


I prefer the term dynamically to willy-nilly. 

It means I can change my mind later. 

But that’s not always possible. All large programs 
should use dynamic linking. 


384 Chapter 8 


www.it-ebooks.info 


static and dynamic libraries 


Static: 

All programs? 


What about the Linux kernel, hmmm? That large 
enough? And I believe that’s... 


Static linking might not be as loose and informal , 
but you know what? Static programs are simple to 
use. Single files. Want to install one? Just copy the 
executable. No need for DLL hell. 


I can’t change your mind? 


Dynamic: 


I think so. 


.. .statically linked. Yeah, I know. That’s your one. 


Look, we’ll just have to agree to disagree. 


No. 

So, you’re telling me your mind is statically linked? 



BULLET POINTS 


■ Dynamic libraries are linked to 
programs at runtime. 


The -shared compiler option 
creates a dynamic library. 


■ Dynamic libraries are created from 
one or more object files. 


Dynamic libraries have different 
names on different systems. 


On some machines, you need to 
compile them with the -f pic 
option. 


■ Life is simpler if your dynamic 
libraries are stored in standard 
directories. 


■ -f pic makes the object code 
position-independent. 

■ You can skip -f pic on many 
systems. 


Otherwise, you might need to set 

PATH and LD_LIBRARY_PATH 

variables. 


you are here ► 385 


www.it-ebooks.info 






no dumb questions 


O: Why are dynamic libraries 
so different on different operating 
systems? 


^Z Operating systems like to optimize 
the way they load dynamic libraries, 
so they’ve each evolved different 
requirements for dynamic libraries. 


% I tried to change the name of my 
library by renaming the file, but the 
compiler couldn’t find it anymore. 

Why not? 


When the compiler creates a 
dynamic library, it stores the name of the 
library inside the file. If you rename the 
file, it will then have the wrong name inside 
the file and will get confused. If you want 
to change its name, you should recompile 
the library. 


Why does Cygwin support so 
many different naming conventions for 
dynamic library files? 


Cygwin makes it easy to compile 
Unix software on a Windows machine. 
Because Cygwin creates a Unix-style 
environment, it borrows a lot of Unix 
conventions. So it prefers to give libraries 
.a extensions, even if they’re dynamic DLLs. 


therej are no 

Dumb Questions 


DLLs? 


Are Cygwin dynamic libraries real 


^Z Yes. But because they depend on 
the Cygwin system, you’ll need to do a 
little work before non-Cygwin code can use 
them. 


% Why does the MinGW compiler 
support the same dynamic library name 
format as Cygwin? 


^Z Because the two projects are closely 
associated and share a lot of code. The 
big difference is that MinGW programs can 
run on machines that don’t have Cygwin 
installed. 


Why doesn’t Linux just store 
library pathnames in executables? 
That way, you wouldn’t need to set 
LD LIBRARY PATH. 


It was a design choice. By not storing 
the pathname, it gives you a lot more 
control over which version of a library a 
program can use—which is great when 
you’re developing new libraries. 



Why doesn’t Cygwin use 


LD LIBRARY PATH to find 


libraries? 


Because it needs to use Windows 
DLLs. Windows DLLs are loaded using the 
PATH variable. 


% Which is better? Static or 
dynamic linking? 


It depends. Static linking means 
you get a small, fast executable file that is 
easier to move from machine to machine. 
Dynamic linking means that you can 
configure the program at runtime more. 


O: If different programs use the same 
dynamic library, does it get loaded more 
than once? Or is it shared in memory? 


Z That depends on the operating 
system. Some operating systems will load 
separate copies for each process. Others 
load shared copies to save memory. 


9- Are dynamic libraries the best 
way of configuring an application? 


^Z Usually, it’s simpler to use 
configuration files. But if you’re going to 
connect to some external device, you’d 
normally need separate dynamic libraries 
to act as drivers. 


386 Chapter 8 


www.it-ebooks.info 




static and dynamic libraries 


Your C Toolbox 

You’ve got Chapter 8 under 
your belt, and now you’ve 
added static and dynamic 
libraries to your toolbox. For a 
complete list of tooltips in the book, 
see Appendix ii. 



*> \ooVs W. 

sta "** 4 , 

***** “f 
as 


The ar 
dommand 
dreates a 
library archive 

o-f object -files. 


jdd -shared 
dor\verts 
objedt -files 
into dynamid 
libraries. 


—I<name> links 
to a -file in 
standard 

diredtories sudh 
as /usr/lib. 


t-<nam C > adds 
a diredtory 
the list 

standard library 
dired-fcorics. 


-I<name> adds 
a diredtory 
■bo the list o-f 
standard indlude 
diredtories. 


Library 
ardhives have 
names like 
libsomethin^a. 


Pynamid 
libraries are 
linked at 
runtime- 


Lib^avy 

ardWwes arc 

stat^ty 

WnkdA- 


pyj^awt 

V,V>vav'»cs V>a^c 

•so, ■df , ' D ' 
,d\\> 0«r d" a 
^tensions- 


Pynamid 
libraries have 
di-f-ferent names 
on di-f-ferent 
operating systems. 


you are here ► 


387 


www.it-ebooks.info 
























www.it-ebooks.info 



dab 2 

OpenCV 

This lab gives you a spec that describes a 
program for you to investigate and build, using 
the knowledge you’ve gained over the last few 
chapters. 

This project is bigger than the ones you’ve seen so 
far. So read the whole thing before you get started, 
and give yourself a little time. And don’t worry if 
you get stuck; there are no new C concepts in here, 
so you can move on in the book and come back to 
the lab later. 

It’s up to you to finish the job, but we won’t give 
you the code for the answer. 






www.it-ebooks.info 


OpenCV 


The spec: turn your computer into aw intruder detector 

Imagine if your computer could keep an eye on your 
house while you’re out and tell you who’s been prowling 
around. Well, using its default webcam and the cleverness 
of OpenCV , it can! 

Here’s what you’re going to create. 


The intruder detector 

Your computer will constantly survey its surroundings using its 
webcam. When it detects movement, it will write the current 
webcam image to a file. And if you store this file on a network 
drive or use a file synchronization service such as Dropbox, 
you’ll have instant evidence of any intruders. 



Mien -the domputcr 3* image tile, 

spots 

through its webdar*... 


www.it-ebooks.info 

















OpenCV 



OpenCV 

OpenCV is an open source computer vision library. It allows you 
to take input from your computer camera, process it, and analyze 
real-time image data and make decisions based on what your 
computer sees. What’s more, you can do all of this using C code. 

OpenCV is available on Window, Linux, and Mac platforms. 

You can find the OpenCV wiki here: 

http://opencv. willowgarage. com/wiki/FullOpenCVWiki 


Installing OpenCV 

You can install OpenCV on Windows, Linux, or Mac. The 
install guide is here, and includes links to the latest stable releases: 


http://opencv. willowgarage. com/wiki/InstallGuide 


Once you’ve installed OpenCy you should see a folder on your 
computer labeled samples. It’s worth taking a look at these. There 
are also links to tutorials on the OpenCV wiki. You’ll need to 
investigate OpenCV in order to complete this lab. 

If you want to get deep into OpenCy we recommend the book 
Learning OpenCV by Gary Bradski and Adrian Kaehler (O’Reilly). 


Wt -found book 

Learning O^tnOJ 
inspirational- 



'■H'l (.«¥?>!?■ 4 S -11 




Compuitv Vision wifb 
the qw-pjcr Ltbmry 


□‘REILLY 


l-fc-I 


www.it-ebooks.info 







OpenCV 


What your code should do 

Your G code should do the following. 

Take input from your computer camera 

You need to work with real-time data that comes in from your 
computer camera, so the first thing you need to do is capture that 
data. There’s an OpenCV function that will help you with this 
called cvCreateCameraCapture (0) . It returns a pointer to a 
CvCapture struct. This pointer is your hotline to the webcam 
device, and you’ll use it to grab images. 

Remember to check for errors in case your computer can’t find a 
camera. If you can’t contact the webcam, you’ll receive a NULL 
pointer from cvCreateCameraCapture (0) . 

Grab an image from the webcam 

You can read the latest image from the webcam using the 
cvQueryFrame () function. It takes the CvCapture pointer as 
a parameter. The cvQueryFrame () function returns a pointer to 
the latest image, so your code will probably start with something a 
little like this: 



Image file 


CvCapture* webcam = cvCreateCameraCapture(0); 

if (!webcam) ^- This means "Couldn't -find “the webdam/ 

/* Exit with an error */ 
while (1) { - Loop -foyevey*. 

Read an ima^e IplImage* image = cvQueryFrame (webcam) ; 

-fvom *tbe webdam. 

if (image) { 

^ ^ |-f you vead an ima^e, you II need “to yvodess i*t hevc- 

} 


} 


If you decide that there’s a thief in the image, you can save the 

image to a file with: n, . pi The ir*a<\e you vead 

The name «t the ,mage Ue ^ ^ £ J ekam 

cvSavelmage("somefile.jpg", image, 0); 



Unless you want a 
grayscale image, set 

this -flag -to O. 


www.it-ebooks.info 




OpenCV 



Petect aw intruder 

Now you come to the really clever part of the code. How do you 
decide if there’s an intruder in the frame? 

One way is to check for movement in the image. OpenCV has 
functions to create a Farneback optical flow. An optical flow 
compares two images and tells you how much movement there’s 
been at each pixel. 

This part, you’ll need to research yourself. You’ll probably 
want to use the cvCalcOpticalFlowFarneback () to 
compare two consecutive images from the webcam and create 
the optical flow. From that, you’ll need to write some code that 
measures the amount of movement between the two frames. 

If the movement’s above a threshold level, you’ll know that 
something large is moving in front of the webcam. 


Make a cleaw getaway 

When you start the program, you don’t want the camera to record 
you walking away, so you might want to add a delay to give you 
time to leave the room. 



Optional: show the currewt webcam output 

During our tests here at the lab, we found it useful to check on 
the current images the program is seeing. To do this, we opened a 
window and displayed the current webcam output. 

You can easily create a window in OpenCV with: 

cvNamedWindow("Thief", 1); 

To display the current image in the window, use this: 

cvShowImage("Thief ", image); 


www.it-ebooks.info 


The finished product 

You’ll know your OpenCV project is complete when your 
computer is able to automatically take pictures of people 
trying to sneak up on it. 



Why stop there? We’ re sure you have all 
kinds ol exciting ideas lor what you could 
do with OpenCV. Drop us a line at Head 
First Lahs and let us know how OpenCV is 
working out lor you. 


www.it-ebooks.info 

















processes and system calls 


If s time to become a C ninja... 

The final part of the book covers advanced topics. 

As you’re going to be digging into some of the more 
advanced functions in C, you’ll need to make sure 
that you have all of these features available on your 
computer. If you’re using Linux or Mac, you’ll be 
fine, but if you’re using Windows, you need to have 
Gygwin installed. 

Once you’re ready, turn the page and enter the gate... 



you are here ► 


www.it-ebooks.info 





www.it-ebooks.info 



processes £md system calls 





Breaking boundaries 



\ 


Thanks, Ted. Since you taught 
me how to make system calls, 
I haven't looked back. Ted? 
Ted, are you there? 



It’s time to think outside the box. 

You’ve already seen that you can build complex applications by connecting small tools 
together on the command line. But what if you want to use other programs from inside 
your own code? In this chapter, you’ll learn how to use system services to create and 
control processes. That will give your programs access to email, the Web, and any other 
tool you’ve got installed. By the end of the chapter, you’ll have the power to go beyond C. 


this is a new chapter 


397 


www.it-ebooks.info 


systemf) 


System calls are your hotline to the OS 

G programs rely on the operating system for pretty much 
everything. They make system calls if they want to talk 
to the hardware. System calls are just functions that live 
inside the operating system’s kernel. Most of the code in 
the G Standard Library depends on them. Whenever you 
call printf () to display something on the command 
line, somewhere at the back of things, a system call will be 
made to the operating system to send the string of text to 



Let’s look at an example of a system call. We’ll begin with 
one called (appropriately) system (). 

system () takes a single string parameter and executes it 
as if you had typed it on the command line: 

system ("dir D: ") ; This will yrmi ou*t "the ton-tents o( *the P- drive- 

system ("gedit") ; V This will launch an ediW on Linux. 

system ("say ’End of line’ ") This will read to you on the Mad- 

The system () function is an easy way of running other 
programs from your code—particularly if you’re creating 
a quick prototype and you’d sooner call external programs 
rather than write lots and lots of G code. 


398 Chapter 9 


www.it-ebooks.info 







processes and system calls 


// -3 

tv 3 


L 


\ Code Magnets 


This is a program that writes timestamped text to the end of a logfile. It would have 
been perfectly possible to write this entire program in C, but the programmer has 
used a call to system () as a quick way of dealing with the file handling. 

See if you can complete the code that creates the operating system command 
string that displays the text comment, followed by the timestamp. 


^include <stdio.h> 
^include <stdlib.h> 
^include <time.h> 


char* now() 

{ 

time_t t; 
time (&t) 


This -funtiion vetuv-ns a stviinj 
ton-ta'm'mg "the twvrexi date a»d ti»e. 


return asctime(localtime (&t)); 


} 


/* Master Control Program utility. 

Records guard patrol check-ins. */ 
int main() 

{ 

char comment[80]/ 
char cmd[120]; 


( 


r 


r 


) 


r 


( 


r 


t ); 

system(cmd); 
return 0; 



www.it-ebooks.info 































magnets moved 


// -3 


L 


Code Magnets Solution 


This is a program that writes timestamped text to the end of a logfile. It would have 
been perfectly possible to write this entire program in C, but the programmer has 
used a call to system () as a quick way of dealing with the file handling. 

You were to complete the code that creates the operating system command string 
that displays the text comment, followed by the timestamp. 


^include <stdio.h> 
^include <stdlib.h> 
^include <time.h> 


char* now() 

{ 

time_t t; 
time (&t); 

return asctime(localtime (&t)); 

} 


/* Master Control Program utility. 

Records guard patrol check-ins. */ 
int main() 

l It needs to store 

char comment [80] ; the text in the 
char cmd[120]; . Comment array. 



Wsihg tgets tor 
unstructured 
text- 

sprwfcC 'will fviin-t ^-jsprintf I 

-the dhav-ad-tevs -to . L r 

d string. 

This is the Command 
template- 


This runs the -^ system(and); ^ 

dorrten-ts ov return 0; 



There is room 
tor only GO 
characters. 

14 




The data will £ome 
trom the Standard 
|nput : the keyboard. 



The tormatted string will be 
cmd [ ...stored in the Cmd array. 

The Command will append 
the Comment to a tile. 


) ; 


the Cmd string 


} 


The Comment will 
appear tirst. 


The timestamp appears second- 


400 Chapter 9 





www.it-ebooks.info 












































processes and system calls 



Let’s compile the program and then watch it in action: 


This will Compile 

"the pV“O^V"3m. v | File Edit "W i ndow Help Who’sYourUser 

This vuns *thc 
pvoyar*. 

Rurm’mj i-t 3 
second "time 


> gcc guard_log.c -o guard_log 

> ./guard_log 

Checked in Crom - a compound interest program. 

> ./guard_log 

Blue Leader reports breach in jet walls. ^ 


This is a Comment 


j Another Comment 


Now, when you look in the same directory as the program, 
there’s a new file that’s been created called reports.log : 


These are the 
timestamps. 



Checked in Crom - a compound interest program. 
fc> Thu Oct 29 11:25:53 2015 


Blue Leader reports breach in jet walls. 
Thu Oct 29 11:26:06 2015 



The program worked. It read a comment from the command 
line and called the echo command to add the comment to 
the end of the hie. 


reports.log 


This is the 
reports.log -file 
the program 
treated- 


Even though you could have written the whole program in G, 
by using system () , you simplified the program and got it 
working with very little work. 


there] are no 

Dumb Questions 


O: Does the system () function get compiled into my 
program? 


No. The system () function—like all system calls— 
doesn’t live in your program. It lives in the main operating system. 


O: So, when I make a system call, I’m making a call to 
some external piece of code, like a library? 


Kind of. But the details depend on the operating system. 

On some operating systems, the code for a system call lives inside 
the kernel of the operating system. On other operating systems, it 
might simply be stored in some dynamic library. 


you are here ► 401 


www.it-ebooks.info 














yikes 


Then someone busted into the system... 


There’s a downside to the system () function. It’s 
quick and easy to use, but it’s also kinda sloppy Before 
getting into the problems with system (), let’s see 
what it takes to break the program. 

The code worked by stitching together a string 
containing a command, like this: 



<comment> 



But what if someone entered a comment like this? 


W / / / / / / f , 

v _ _ 


_. V 

' && Is / && echo ' ^ 

— i 

<timestamp> 

' >> reports.log 

-1 / 


— 1 

1 

1 


1 m a \ i n \ ^ 


By injecting some command-line code into the text, 
you can make the program run whatever code you 
like: 


The user dan use 
the program to —^ 
run any dommand 
she likes on the 
Computer. 


File Edit Window Help Yikes 




□ 

> ./guard log 





' && Is / && echo ' 





Applications 

System 

dev 

private 


Developer 

Users 

etc 

sbin 


Library 

Volumes 

home 

tmp 


Network 

bin 

mach kernel 

usr 


Space Paranoids Source 
> 

cores 

net 

var 



^\This is a 
listing o-f 
the root 
directory. 


Is this a big problem? If a user can run guard_log, 
she can just as easily run some other program. But 
what if your code has been called from a web server ? 
Or if it’s processing data from a file ? 


402 Chapter 9 


www.it-ebooks.info 






























processes and system calls 


Security's wot the only problem 


This example injects a piece of code to list the contents of the root 
directory, but it could have deletedfiles or launched a virus. But you 
shouldn’t just worry about security 


o 

o 

o 


What if the comments contain apostrophes? 

That might break the quotes in the command. 


What if the PATH variable causes the system() function 
to call the wrong program? 

What if the program we're calling needs to have a specific 
set of environment variables set up first? 


The system () function is easy to use, but most of the time, you’re 
going to need something more structured—some way of calling a 
specific program, with a set of command-line arguments and maybe 
even some environment variables. 



What'$ the kernel? 

On most machines, system calls are functions that live inside the kernel of the operating system. But 
what is the kernel? You never actually see the kernel on the screen, but it's always there, controlling your 
computer. The kernel is the most important program on your computer, and it's in charge of three things: 

Processes 

No program can run on the system without the kernel loading it into memory. The kernel creates 
processes and makes sure they get the resources they need. The kernel also watches for processes that 
become too greedy or crash. 

Memory 

Your machine has a limited supply of memory, so the kernel has to carefully ration the amount of memory 
each process can take. The kernel can increase the virtual memory size by quietly loading and unloading 
sections of memory to disk. 

Hardware 

The kernel uses device drivers to talk to the equipment that's plugged into the computer. Your program 
can use the keyboard and the screen and the graphics processor without knowing too much about them, 
because the kernel talks to them on your behalf. 

System calls are the functions that your program uses to talk to the kernel. 


you are here ► 


403 


www.it-ebooks.info 







execf) 


The execO functions give you more control 

When you call the system () function, the operating 
system has to interpret the command string and decide 
which programs to run and how to run them. And that’s 
where the problem is: the operating system needs to interpret 
the string, and you’ve already seen how easy it is to get that 
wrong. So, the solution is to remove the ambiguity and 
tell the operating system precisely which program you want 
to run. That’s what the exec () functions are for. 


execO functions replace the current process 

A process is just a program running in memory. If you 
type taskmgr on Windows or ps -ef on most other 
machines, you’ll see the processes running on your system. 
The operating system tracks each process with a number 

called the process identifier (PID). 

The exec () functions replace the current process by 

running some other program. You can say which command¬ 
line arguments or environment variables to use, and when the 
new program starts it will have exactly the same PID as the 
old one. It’s like a relay race, where your program hands 
over its process to the new program. 


A process is a program 
running in memory. 



www.it-ebooks.info 


404 Chapter 9 


processes and system calls 


There are many execO functions 


Over time, programmers have created several different versions 
of exec () . Each version has a slightly different name and its 
own set of parameters. Even though there are lots of versions, 
there are really just two groups of exec () functions: the list 
functions and the array functions. 


The execO functions 
are in unistd.h. 


The list functions: execIO, execlpO, execleO 


The list functions accept command-line arguments as a list of 
parameters, like this: 


o 

o 

o 


The program. 

This might be the full pathname of the program—execl () / 
execle () —or just a command name to search for—exeelp () 
but the first parameter tells the exec () function what program it 
will run. 

The command-line arguments. 

You need to list one by one the command-line arguments you want 
to use. Remember: the first command-line argument is always the 
name of the program. That means the first two parameters passed 
to a list version of exec () should always be the same string. 

NULL. 

That’s right. After the last command-line argument, you need a 
NULL. This tells the function that there are no more arguments. 


I 

Watcli it! 


Spaces in 
command line 
arguments 
can confuse 
MinGW. 


If you pass two arguments “I 
like” and “turtles, ” MinGW 
programs might send three 
arguments: “I, ” “like, ” and 
“turtles. ” 



Environment variables (maybe). 

If you call an exec () function whose name ends with . . . e () , you can 
also pass an array of environment variables. This is just an array of strings 
like " POWER=4" , "SPEED=17", "PORT=OPEN", .... 


e*eeL — a LIST o-f av*aur*eirrts. 

V 


These av-e -the av^urwenis. 


execl ("/home/flynn/clu" , /home/flynn/clu" , "paranoids" , "contract" , NULL) 

t- 

^ameiev / a ' r 9 uwe ^ These a« the av-jur^-ts. 7<«* should 

should he 
•the sa**e as 

-the -Civ-st ^- -^ 


+ seav-eh on -the PATH. 


exeelp ("clu", Alu", "paranoids", "contract", NULL) 


end "the lis-t 
wrth NULL. 


These av-e -the av-^ur^en-b- 


execle("/home/flynn/clu",/home/flynn/clu", "paranoids", "contract", NULL , env_vars) 

/h + 

e*eA = a LIST ot agents ^ **** °! ^7 

+ BHVIROMSHT variables. e«v«t variables. 

you are here ► 405 


www.it-ebooks.info 

















array functions 


The array functions: exeevO, exeevpO, exeeveO 


If you already have your command-line arguments stored in an 
array, you might find these two versions easier to use: 


<^4/ ah ae*£j oir exeev ("/home/flynn/clu" , my args) ; 

VbCTOR o-r avguments. 

_>The avguments need to be stoved 

T a ' rv ‘ a '/ / w „ rn lEe my avjs stvmj av-vay. 

VECTOR ok avjwmen-b-^ execvp("clu", my_args) ; 3 

+ seavdh on the PATH. 


The only difference between these two functions is that 
exeevp will search for the program using the PATH variable. 


How to remember the execO functions 

You can figure out which exec () function you need by 
constructing the name. Each exec () function can be followed 
by one or two characters that must be 1, v, p, or e. The 
characters tell you which feature you want to use. So, for the 
execle () function: 

execle = exec + l + e = LIST of arguments 

The 1 and v characters always come before p and e, 
and the p and e characters are optional. 


+ an 


ENVIRONMENT 


Take a list o-f averments. 

V 


Uses 

Character 

List of args 

1 

Array/vector of args 

V 

Search the path 

P 

Environment vars 

e 


All e*edO ( undtions 
begin with e*ed. 

M 


Take a vedtov/avvay 
o*f av<\ur*ents. 

* 


Seavdh 
-Pov the 
pvogvar* on ^ 
the path. 


You don’t 
have to 
1^— indlude p 
ov e- 


Use an away 
of- envivonment 
strings. 


406 Chapter 9 


www.it-ebooks.info 






















processes and system calls 


Passing environment variables 


Every process has a set of environment 
variables. These are the values you see when 
you type set or env on the command 
line, and they usually tell the process 
useful information, such as the location 
of the home directory or where to find 
the commands. G programs can read 
environment variables with the getenv () 
system call. You can see getenv () being 
used in the diner_inf o program on the 
right. 

If you want to run a program using 
command-line arguments and environment 
variables, you can do it like this: 

You dvcatc a 


ffinclude <stdio.h> 
ffinclude <stdlib.h> 

int main(int argc, char *argv[]) 


{ 


printf("Diners: 
printf("Juice: 
return 0; 


o 

o 


s\n", argv[1]); 
s\n", getenv( "JUICE")) 

A , 

geteirwO m s-tdlibh lets you 
v-ead eirwiY'onmeirrt variables. 



taeb variable m the 
envivonmerrt is name—value- 


The last item i* the 
array must be NULL. 


diner info.c 


rou cah create a ^ ^ ^ 

set o+ environment char *my_env[] = {" JUICE=peach and apple", NULL}; 
variables as a» array 

string pointers. 

execle("diner info", "diner info", "4", NULL, my env); 

/f - f 

e*efcle passes a list ok avguments and an environment- n>y_env dontains the environment- 


The execle () function will set the command-line 
arguments and environment variables and then replace the 
current process with diner_inf o. 


File Edit Window Help MoreOJ 


> . /my_exec_j?rogram 
Diners: 4 

Juice: peach and apple 

> 


Put what if there's a problem? 

If there’s a problem calling the program, the existing process 
will keep running. That’s useful, because it means that if you 
can’t start that second process, you’ll be able to recover from 
the error and give the user more information on what went 
wrong. And luckily, the G Standard Library provides some 
built-in code to help you with that. 



If you’re 
passing an 
environment 

it! on Cygwin, 
be sure to 
include a PATH variable. 


On Cygwin, the path 
variable is needed when 
programs are loaded. So, if 
you’re passing environment 
variables on Cygwin, be sure 
to include PATH=/usr/bin. 


you are here ► 407 


www.it-ebooks.info 













errno 


Most system calls go wrong in the same way 


Because system calls depend on something outside your 
program, they might go wrong in some way that you can’t 
control. To deal with this problem, most system calls go 
wrong in the same way 

Take the execle () call, for example. It’s really easy to 
see when an exec () call goes wrong. If an exec () call 
is successful, the current program stops running. So, if the 
program runs anything after the call to exec (), there must 
have been a problem: 



Guaranteed 
Standard of 
Failure 


\ 


execle("diner info", "diner info", "4", NULL, my env); 


If e*edeO worked, 
this I me of £ode 

u ^^puts("Dude - the diner info code must be busted"); 

would never run. r — 


But just telling if a system call worked is not enough. You 
normally want to know why a system call failed. That’s why 
most system calls follow the golden rules of failure. 

The errno variable is a global variable that’s defined in 
errno.h , along with a whole bunch of standard error values, 
like: 



EPERM=1 


Operation not permitted 


EN0ENT=2 No such file or directory 


ESRCH=3 


No such process 


This value is 

not available ; EMULLET=81 Bad haircut 
on all systems. 


The djolde* Rules 
of Failure 

* Tidy up as mudh as you tar, 

* Set the evvno variable to 
an error value. 

^ Return — 



Now you could check the value of errno against each of 
these values, or you could look up a standard piece of error 
text using a function in stringh called strerror (): 

puts (strerror (errno) ) ; ^-strerrorO Converts an error 

number into a message- 

So, if the system can’t find the program you are running 
and it sets the errno variable to ENOENT, the above code 
will display this message: 

No such file or directory 


408 Chapter 9 


www.it-ebooks.info 







processes and system calls 



Different machines have different commands to tell you about their network configuration. On 
Linux and Mac machines, there’s the /sbin/ifconfig program, and on Windows there’s a 
command called ipconf ig that’s stored somewhere on the command path. 

This program tries to run the /sbin/ifconf ig program and, if that fails, it will try the 
ipconf ig command. There’s no need to pass arguments to either command. Think carefully. 
What type of exec () commands will you need? 


^include <stdio.h> 


^ What headers will you need? 


This will need to run /sbin/i-f £on-f ig. 
What should we test -for? 


This will need to run 
the ipeon-fig eon\n»and 
and eheek i-f it -fails. 


) 


j. 


int main() 

{ 

if (. 

if (execlp( 

fprintf(stderr, "Cannot run ipconfig: %s", 

return 1; /; f : 

} What do you think joes heve? 

return 0; 

} 


) { 

) ; 


you are here ► 409 


www.it-ebooks.info 












exercise solved 


0 ^ 


EmciSe 



Different machines have different commands to tell you about their network configuration. On 
Linux and Mac machines, there’s the /sbin/ifconf ig program, and on Windows there’s a 
command called ipconf ig that’s stored somewhere on the command path. 

This program tries to run the /sbin/ifconf ig program and, if that fails, it will try the 
ipconf ig command. There’s no need to pass arguments to either command. Think carefully. 
What type of exec () commands will you need? 


finclude <stdio.h> 

#'mdlude <uwstd;h> Y<* need -this for the e*edO WW 

#mdlude <errnp,h> need . ft em> ° va ' r,able ' 

#mdlude <str.ir>9:K>.<~r' J biS . b. 1°* dis P' a y e<rrws w, th strerrorO. 


int main () ^ se bedause you have the [£ e*edlO returns —I, it -failed; so 

fath to the program file. we should probably look fov ipdonfig. 

{ y- v 

if ( e^edl(Vsbir>/ifdonfig”, Vsbin/ifdo«fi^ M , KULL) — — —I ) 

if (execlp ( 'Vonfig", "ipdonfig", HULL) -- -I ) { 

fprintf (stderr, "Cannot run ipconfig: %s",) s*fo’*evvor(evrr\o) ); 

let us +md a ,, , i . .'jtf. 

the ipdonfig return 1; Chedking for the value -I •» T , /T~ 

dommandon } dase the dommand faded- estrerrorO fundt,on 

ii i« Wl '* display a*y problems, 

the path. return 0 . ,r 

} 


410 Chapter 9 


www.it-ebooks.info 














processes and system calls 


there i are no 

Dumb Questions 



Isn’t system () just easier to use than exec () ? 


Yes. But because the operating system needs to interpret the 
string you pass to system (), it can be a bit buggy. Particularly 
if you create the command string dynamically. 



Why are there so many exec () functions? 


Over time, people wanted to create processes in different 
ways. The different versions of exec () were created for more 
flexibility. 


O: Do I always have to check the return value of a system 
call? Doesn’t it make the program really long? 


If you make system calls and don’t check for errors, your 
code will be shorter. But it will probably also have more bugs. It is 
better to think about errors when you first write code. It will make it 
much easier to catch bugs later on. 


% If I call an exec () function, can I do anything 
afterward? 


Ar No. If the exec () function is successful, it will change the 
process so that it runs the new program instead of your program. 
That means the program containing the exec () call will stop as 
soon as it runs the exec () function. 



BULLET POINTS 


■ System calls are functions that live in 
the operating system. 


The exec () system calls let you 
run programs with more control. 


When you make a system call, 
you are calling code outside your 
program. 

system () is a system call to run a 
command string. 

system () is easy to use, but it 
can cause bugs. 


There are several versions of the 
exec () system call. 

System calls usually, but not always, 
return -1 if there’s a problem. 

They will also set the errno 
variable to an error number. 


you are here ► 411 


www.it-ebooks.info 








mixed messages 



The guys over at Starbuzz have come up with a new order-generation program that 
they call coffee: 

^include <stdio.h> 

^include <stdlib.h> 

int main(int argc, char *argv[]) 

{ 

char *w = getenv("EXTRA"); 
if (!w) 

w = getenv("FOOD”); 
if (!w) 

w = argv[argc - 1]; 
char *c = getenv("EXTRA”); 
if ( ! c) 

c = argv[argc - 1]; 
printf("%s with %s\n", c, w) ; 
return 0; 


To try it out, they've created this test program. Can you match up these code fragments to the output they produce? 


finclude <string.h> 
finclude <stdio.h> 
finclude <errno.h> 

int main(int argc, char *argv[]){ 


fprintf(stderr,"Can't create order: %s\n", strerror (errno)); 
return 1; 

} 

return 0; 


< 


Candidate t-odc ^oes teve- 


412 Chapter 9 


www.it-ebooks.info 







processes and system calls 



Matdh ea£h tav\d\da{,c with 
one or -the possible outputs. 

I 


char *my_env[] = {"FOOD=coffee", NULL}; 

if(execle("./coffee", "./coffee", "donuts", NULL, my_env) == -1){ 
fprintf(stderr,"Can't run process 0: %s\n", strerror(errno)); 
return 1; 


char *my_env[] = {"FOOD=donuts", NULL}; 

if(execle("./coffee", "./coffee ", "cream", NULL, my_env) == -1){ 
fprintf(stderr,"Can't run process 0: %s\n", strerror(errno)); 
return 1; 

} 

if(execl("./coffee", "coffee", NULL) == -1){ 

fprintf(stderr,"Can't run process 0: %s\n", strerror(errno)); 
return 1; 


char *my_env[] = {"FOOD=donuts", NULL}; 

if(execle("./coffee", "coffee", NULL, my_env) == -1){ 

fprintf(stderr,"Can't run process 0: %s\n", strerror(errno)); 
return 1; 


Possible output 1 


coffee with donuts 


cream with donuts 


donuts with coffee 


coffee with coffee 


you are here ► 413 


www.it-ebooks.info 










messages unmixed 



The guys over at Starbuzz have come up with a new order-generation program that 
they call coffee: 

^include <stdio.h> 

^include <stdlib.h> 

int main(int argc, char *argv[]) 

{ 

char *w = getenv("EXTRA"); 
if (!w) 

w = getenv("FOOD”); 
if (!w) 

w = argv[argc - 1]; 
char *c = getenv("EXTRA”); 
if ( ! c) 

c = argv[argc - 1]; 
printf("%s with %s\n", c, w) ; 
return 0; 


To try it out, they've created this test program. Can you match up these code fragments to the output they produce? 


finclude <string.h> 
finclude <stdio.h> 
finclude <errno.h> 

int main(int argc, char *argv[]){ 


fprintf(stderr,"Can't create order: %s\n", strerror (errno)); 
return 1; 

} 

return 0; 


< 


Candidate t-odc ^oes teve- 


414 Chapter 9 


www.it-ebooks.info 







processes and system calls 



Possible output 



you are here ► 415 


www.it-ebooks.info 











rss gossip 


Read the news with RSS 

RSS feeds are a common way for websites to publish 
their latest news stories. Each RSS feed is just an 
XML file containing a summary of stories and links. 
Of course, it’s possible to write a G program that will 
read RSS files straight off the Web, but it involves 
a few programming ideas that you haven’t seen yet. 
But that’s not a problem if you can find another 
program that will handle the RSS processing for you. 



Download RSS Gossip from 

https://github.com/dogriffiths/rssgossip/zipball/master. 

Also, if you don't have Python installed, you can get it here: 
h ttp://www. pyth on. org/. 


I want all the latest 
stories on Pajama Death. 


RSS Gossip is a small Python script that can search 
RSS feeds for stories containing a piece of text. To run 
the script, you will need Python installed. Once you 
have Python and rssgossip.py , you can search for 
stories like this: 




You need bo Create 
3n environment 
variable tontaininj) 
the address o-P an 
RSS -Peed- 


This runs the 
rss^ossip sdrift 
with a searth 
string 


Chapter 9 



This is running in a 
Uni* environment 

_ 

I File Edit Window Help ReadAIIAboutlt 


> export RSS_FEED=http://www.enn.com/rss/celebs.xml 

> python rssgossip.py ’pajama death’ 

Pajama Death launch own range of kitchen appliances 
Lead singer of Pajama Death has new love interest. 
"I never ate the bat" says Pajama Death's Hancock. 





Ooh, I just had a great idea. 
Why not write a program that 
can search a lot of RSS 

do that? 





ookssfflfo 


This isn t 3 
real -Peed- 

You should 
reflate it 
with one you 

find online 


416 













processes and system calls 



TWis is ah 

environment 
arra y. 

You need 
to ihscvt - 

the 
-Puheti 


iOh 


name 

here. 


The editor wants a program on his machine that can search a lot of RSS feeds all at the 
same time. You could do that if you ran the rssgossip.py several times for different RSS feeds. 
Fortunately, the out-of-work actors have made a start on the program for you. Trouble is, 
they’re having problems creating the call to exec () the rssgossip.py script. Think carefully 
about what you need to do to run the script, and then complete the newshound code. 

To save space, this listing doesn't 
show the ^tinclude lines. 


int main (int arge, char *argv [ ] ) he e are RSS - feeds the editor wants 

tyou might want to Choose your own). 

{ k 

char *feeds[] = {"http://www.cnn.com/rss/celebs.xml", 

"http://www.rollingstone.com/rock.xml", 

"http://eonline.com/gossip.xml"}; 

int times 3, — We*!! pass the search terms in as an argument* 

char *phrase = argvfl]; 

^ ^ Loop through each ot the -feeds. 

for (i =0; i < times; i++) { 

char var[255]; 

sprintf(var, "RSS FEED=%s", feeds[i]); 

char *vars [ ] = {var, NULL} ; / On the editors /V|aC> Python is instc led here¬ 
in ^ 


M 

if ( ("/usr/bin/python", "/usr/bin/python", 

— ^ .) == -a { 

fprintf(stderr Can't run script: %s\n", strerror (errno)); 


return 1; 


} 


You need to insert the other 
parameters to the -function here- 


} 


return 0; 


newshound.c 


And for extra bonus points... 

What will the program do when it runs? 


you are here ► 417 


www.it-ebooks.info 















newshound hounded 



f&etu&e 
Solution 


The editor wants a program on his machine that can search a lot of RSS feeds all at the 
same time. You could do that if you ran the rssgossip.py several times for different RSS feeds. 
Fortunately, the out-of-work actors have made a start on the program for you. Trouble is, 
they’re having problems creating the call to exec () the rssgossip.py script. You were to think 
carefully about what you need to do to run the script, and then complete the newshound code. 


int main(int argc, char *argv[]) 


{ 


You ve 

a LIST 

avcvs and a* 

ENVIRON¬ 
MENT, so 

its exedLE- 


char *feeds[] = {"http://www.cnn.com/rss/celebs.xml” , 

"http://www.rollingstone.com/rock.xml", 

"http://eonline.com/gossip.xml"}; 

int times = 3; 

char *phrase = argvfl]; 

int i; 

for (i=0; i < times; i++) { 

char var[255]; 

sprintf(var, "RSS FEED=%s", feeds[i]); 
char *vars[] = {var, NULL}; 

if ( exedle ("/usr/bin/python", "/usr/bin/python", 

u ./ y “ ss .9 os . s, .P : P.Y ,> ^.NWLL-; y^vs ) == -i) { 

fprintf(stderrfw’Can't run" script: %s\n", strerror(errno)) ; 


return 1; 


} 


} 


This is ihc 
name o-f the 
Python s£vip-fc. 


return 0; 


This is *thc 
seavth phvase, 

as a command— 
line argument 


Pass -the 
envivonmen-i 
as an ex-tva 
pavame-tev. 



newshound.c 


But what will the program do when you run it? 


418 Chapter 9 


www.it-ebooks.info 













processes and system calls 



When you compile and run the program, it looks like it works: 


File Edit Window Help ReadAIIAboutlt 


> ./newshound 'pajama death' 

Pajama Death ex-drummer tells all. 

New Pajama Death album due next month. 


The newshound program has the rssgossip.py script using data 
from the array of RSS feeds. 


Worked!? Worked?!? It didn't work! What about 
the announcement of the surprise concert? That 
was on every other news site! I coulda sent my 
photographers down there. As it is, I was beaten 
to the story by everyone else in town! 


Actually there is a problem. 

Although the newshound program managed 
to run the rssgossip.py script, it looks like it didn’t 
manage to run the script for all of the feeds. In fact, 
the only news it displayed came from the first 
feed on the list. That meant the other news 
stories matching the search terms were missed. 







Look at the code of the newshound program again and think about how it works. 
Why do you think it failed to run the rssgossip.py script for any of the other 
newsfeeds? 


you are here ► 419 


www.it-ebooks.info 


















forkQ 


execO is the end of the line for your program 


The exec () functions replace the current 
function by running a new program. But what 
happens to the original program? It terminates, 
and it terminates immediately. That’s why the 
program only ran the rssgossip.py script for the 
first newsfeed. After it had called execle () the 
first time, the news hound program terminated. 


The I oof will run only ontC- 




for (i = 0; i < times; i++) 


Ov\Lt the newshound program hands over 
the protess to the rssgossip.py program, 
newshound guits. 




if (execle("/usr/bin/python", 

0»u exedleO is ^ " • /rssgossip.py", 

tailed, the whole . . . 
pv-ojyra*» ^its. , 

} 


But if you want to start another process and keep 
your original process running, how do you do it? 

fork!) will clone your process 

You’re going to get around this problem by using 
a system call named fork (). 


"/usr/bin/python" , 
phrase, NULL, vars) == -1) { 



Unlike Linux 
and the Mac, 
Windows 
doesn’t support 
fork () natively. 


To use fork () on a Windows 
machine, you should first install 
Cygwin. 


f ork () makes a complete copy of the current 
process. The brand-new copy will be running 
the same program, on the same line number. It 
will have exactly the same variables that contain 
exactly the same values. The only difference is 
that the copy process will have a different process 
identifier from the original. 

The original process is called the parent 
process, and the newly created copy is called 

the child process. 

But how can cloning the current process fix the 
problems with exec () ? Let’s see. 


The -CorkO system tall will 
done *the turrent protess 


The original 

process is 

tailed the 
parent protess. 



The new protess 
is tailed the 
thild protess. 


■f/ J 






■ 

420 Chapter 9 


www.it-ebooks.info 














processes and system calls 


Running a child process with forkO + execO 


The trick is to only call an exec () function on a child 
process. That way, your original parent process will be able 
to continue running. Let’s look at the process step by step. 

1. Make a copy 

Begin by making a copy of your current process by calling 
the f ork () system call. 

The processes need some way of telling which of them is 
the parent process and which is the child, so the f ork () 
function returns 0 to the child process, and it will return a 
nonzero value to the parent process. 



t. If you're the child process, call execO 

At this point, you have two identical processes running, 
both of them using identical code. But the child process 
(the one that received a 0 from the f ork () call) now needs 
to replace itself by calling exec () : 



Now you have two separate processes: the child process 
is running the rssgossip.py script, and the original parent 
process is free to continue doing something else. 


you are here ► 421 


www.it-ebooks.info 




code magnets 



Code Magnets 


It's time to update the newshound program. The code needs to run the 
rssgossip.py script in a separate process for each of the RSS feeds. The code 
is reduced, so you only have to worry about the main loop. Be careful to 
check for errors, and don't get the parent and child processes mixed! 


Put youv 
magnets 
m this 
spade 


for (i = 0; i < 
char var [255] 
sprintf(var. 




char *vars[ 


times; i++) { 

r 

"RSS_FEED=%s", 
= {var, NULL); 


feeds[i]); 


} 


422 Chapter 9 


www.it-ebooks.info 








processes and system calls 



-Vhaf the F^rJcO? 

You call fork() like this: 


pid_t pid = fork(); 


fork () will actually return an integer value that is 0 for 
the child process and positive for the parent process. 
The parent process will receive the process identifier of 
the child process. 


But what is pid_t? Different operating systems use 
different kinds of integers to store process IDs: some 
might use shorts and some might use ints. So pid_t 
is always set to the type that the operating system uses. 



you are here ► 423 


www.it-ebooks.info 


















magnets unmuddled 



Code Magnets Solution 

It's time to update the newshound program. The code needs to run the 
rssgossip.py script in a separate process for each of the RSS feeds. The code 
is reduced, so you only had to worry about the main loop. Be careful to 
check for errors, and don't get the parent and child processes mixed! 


for (i = 0; i < times; i++) { 

char var[255]; 

sprintf(var, "RSS_FEED=%s ", feeds[i]); 
char *vars[] = {var, NULL}; 



piv-st> dall -PovkO to dlone "the pv-odess. 


|-P -PovkO vetuvned —I, thevc y/3s 3 problem dloRmc, •the pvodess. 




I-P -PovkO relumed a O, -the Code is 
This is -tVie same as iP (pid ——■ OX ^ vuMing in "the Child pvoCess. 


1+ you ge-t heve, you've -the child fvoCess, 
so we should e*edO -the sdv-ipt* 

sL 


if (execle("/usr/bin/python", "/usr/bin/python, 

lf (execJ-e^ phrase , NULL, vars) — 1 ' 1 


/rssgossip.py 


11 



return 1; 


} 


424 Chapter 9 


www.it-ebooks.info 


















processes and system calls 



Now, if you compile and run the code, this happens: 


I File Edit Window Help ReadAIIAboutlt 


> ./newshound 'pajama death’ 

Pajama Death ex-drummer tells all. 

New Pajama Death album due next month. 

Photos from the surprise Pajama Death concert. 
Official Pajama Death pajamas go on sale. 

"When Pajama Death jumped the shark" by HenryW 
Breaking News: Pajama Death attend premiere. 


By f ork-ing a copy of itself and then exec-ing the 
Python script in a separate process, the newshound 
program is able to run a separate process for each of the 
RSS feeds. And the great thing is that these processes will 

all run at the same time. 

This is you** 

nev/shouhd 

process. 



|*t v*uy\s sepdvd'tc 

^vodcsscs ‘('ov c3dh o-V 
the three ne^/steed-* 

A 


v w 

newshound 



The thild processes all 
run at the same time- 



That’s a lot faster than reading the newsfeeds one at a time. 
By learning how to create and run separate processes with 
f ork () and exec (), not only can you make the most 
of your existing software, but you can also improve the 
performance of your code. 


you are here ► 425 


www.it-ebooks.info 













no dumb questions 


O: Does system () run programs 
in a separate process? 


J^Z Yes. But system () gives you 
less control over exactly how the program 
runs. 


Isn’t f ork-ing processes really 
inefficient? I mean, it copies an entire 
process, and then a moment later we 
replace the child process by doing an 
exec()? 


^Z Operating systems use lots of tricks 
to make f ork-ing processes really quick. 
For example, the operating system cheats 
and avoids making an actual copy of the 
parent process’s data. Instead, the child 
and parent processes share the same data 


% But what if one of the processes 
changes some data in memory? Won’t 
that screw things up? 


^Z It would, but the operating system 
will catch that a piece of memory is going 
to change, and then it will make a separate 
copy of that piece of memory for the child 
process. 


tkrei are no 

Dumb Questions 


% That technique sounds quite cool. 
Does it have a name? 


^Z Yes; it’s called “copy-on-write.” 



Is a pid_t just an int? 


^Z It depends on the platform. The 
only thing you know is that it will be some 
integer type. 


% I stored the result of a fork () 
call in an int, and it worked just fine. 


^Z It’s best to always use pid_t to 
store process IDs. If you don’t, you might 
cause problems with other system calls 
or if your code is compiled on another 
machine. 


% Why doesn’t Windows support 
the fork () system call? 


Windows manages processes very 
differently from other operating systems, 
and the kinds of tricks fork () needs to 
do in order to work efficiently are very hard 
to do on Windows. This may be why there 
isn’t a version of fork () built in. 


% But Cygwin lets me do fork () s 
on Windows, right? 


Yes. The gurus who work on 
Cygwin did a lot of work to make Windows 
processes look like processes that are 
used on Unix, Linux, and the Mac. But 
because they still need to rely on Windows 
to create the underlying processes, 
fork () on Cygwin can be a little slower 
than fork () on other platforms. 


% So, if I’m just interested in writing 
code to work on Windows, is there 
something else I should use instead? 


Yes. There’s a function called 
CreateProcess () that’s like an 
enhanced version of system (). To find 
out more, go to http://msdn.microsoft.com 
and search for “CreateProcess.” 


% Won’t the output of the various 
feeds get mixed up? 


The operating system will make sure 
that each string is printed completely. 



BULLET POINTS 


■ System calls are functions that live in 
the kernel. 


The fork() function duplicates the 
current process. 


■ The exec () functions give you more 
control than system (). 


System calls usually return -1 if they 
fail. 


■ The exec () functions replace the 
current process. 


Failed system calls set the errno 
variable to the error number. 


426 Chapter 9 


www.it-ebooks.info 








processes and system calls 



Your C Toolbox 


You’ve got Chapter 9 under 
your belt, and now you’ve 
added processes and system 
calls to your toolbox. For a complete 
list of tooltips in the book, see 
Appendix ii. 


VW* a 

\iV.e a toriSo C 

tow>" >ar ' < ^ c*et\0 — list of avgs. 

exedleO =. list of avgs + envivonment- 
exedlpO =. list of avgs + seavdh on path. 
exedvO =. airway of avgs. 

exedveO = away of avgs + envivonment- 
exedvpO n away of avgs + seavdh on path. I 


fovkO 
(jiuplida-tes 
the diAWent 


^>vo6CSS. 


-fov-kO + 
t%td) 
£v-ea*tes a 
dhild pv-odcss. 


you are here ► 


427 


www.it-ebooks.info 




www.it-ebooks.info 


10 interprocess communication 

^ It's good to talk 4 - 



Creating processes is just half the story. 

What if you want to control the process once it’s running? What if you want to send it 
data ? Or read its output ? Interprocess communication lets processes work together to 
get the job done. We’ll show you how to multiply the power of your code by letting it talk 
to other programs on your system. 


this is a new chapter 


429 


www.it-ebooks.info 



redirection 


Redirecting input and output 


When you run programs from the command line, you can 
redirect the Standard Output to a file using the > operator: 

python ./rssgossip.py Snooki > stories.txt 


^— y° u vediv-ed-t output 

using the > operator- 


The Standard 

Input stdin 



You dan rediredt 
the Standard 

^Put to a ti| c . 


a 



rn«^ v 

The Standard 
Output: stdout 


The Standard 
Error: stderr 


The Standard Output is one of the three default data 
streams. A data stream is exactly what it sounds like: a 
stream of data that goes into, or comes out of, a process. 
There are data streams for the Standard Input, Output, 
and Error, and there are also data streams for other things, 
like files or network connections. When you redirect the 
output of a process, you change where the data is sent. So, 
instead of the Standard Output sending data to the screen, 
you can make it send the data to a file. 

Redirection is really useful on the command line, but is 
there a way of making a process redirect itself? 


430 Chapter 10 


www.it-ebooks.info 




















interprocess communication 


A look inside a typical process 

Every process will contain the program it’s running, as well as 
space for stack and heap data. But it will also need somewhere 
to record where data streams like the Standard Output are 
connected. Each data stream is represented by a file descriptor, 
which, under the surface, is just a number. The process keeps 
everything straight by storing the file descriptors and their data 
streams in a descriptor table. 


A file descriptor is a 
number that represents 
a data stream. 



Standard Output-^ 
standard Error 


The prodess mi^lvt also ^ 
have other open streams. 


# 

Data Stream | 

0 

The keyboard | 

1 

The screen | 

2 

The screen | 

3 

Database connection | 


The descriptor table has one column for each of the file 
descriptor numbers. Even though these are called file descriptors, 
they might not be connected to an actual file on the hard disk. 
Against every file descriptor, the table records the associated data 
stream. That data stream might be a connection to the keyboard 
or screen, a file pointer, or a connection to the network. 

The first three slots in the table are always the same. Slot 0 is 
the Standard Input, slot 1 is the Standard Output, and slot 2 is 
the Standard Error. The other slots in the table are either empty 
or connected to data streams that the process has opened. For 
example, every time your code opens a file for reading or writing, 
another slot is filled in the descriptor table. 

When the process is created, the Standard Input is connected to 
the keyboard, and the Standard Output and Error are connected 
to the screen. And they will stay connected that way until 
something redirects them somewhere else. 


File descriptors don’t 
necessarily refer to tiles. 


you are here ► 431 


www.it-ebooks.info 










replace the descriptors 


Redirection just replaces data streams 

The Standard Input, Output, and Error are always fixed in the same 
places in the descriptor table. But the data streams they point to can 
change. 



S-budatrd Outyui 
|>as bee* vedi reeled 
to a -file. 








$ 





V5 


That means if you want to redirect the Standard 
Output, you just need to switch the data stream against 
descriptor 1 in the table. 


# 

Data Stream 

0 

The keyboard 

1 

'Ttee^sere^File stories.txt 

s 

The screen 

3 

Database connection 


All of the functions, like printf (), that send data 
to the Standard Output will first look in the descriptor 
table to see where descriptor 1 is pointing. They will 
then write data out to the correct data stream. 


Processes can redirect themselves 

Every time you’ve used redirection so far, it’s been from 
the command line using the > and < operators. But 
processes can do their own redirection by rewiring the 
descriptor table. 




So, that's why if s Z>... 

You can redirect the Standard Output and 
Standard Error on the command line using the 
> and 2> operators: 


./myprog > output.txt 2> errors.log 

Now you can see why the Standard Error is 
redirected with 2>.The 2 refers to the number 
of the Standard Error in the descriptor table. 
On most operating systems, you can use 1 > as 
an alternative way of redirecting the Standard 
Output, and on Unix-based systems you can 
even redirect the Standard Error to the same 
place as the Standard Output like this: 


2> means \ediredt 
Standard &rv-ov-” 


./myprog 2>&1 


T 

f I n»eans u to -the 

Standard Input- w 


432 Chapter 10 


www.it-ebooks.info 
































interprocess communication 


filewoO tells you the descriptor 

Every time you open a file, the operating system registers a 
new item in the descriptor table. Let’s say you open a file with 
something like this: 

FILE *my file = fopen("guitar.mp3 ", "r"); 


The operating system will open the guitar.mp3 file and return a 
pointer to it, but it will also skim through the descriptor table 
until it finds an empty slot and register the new file there. 


But once you’ve got a file pointer, how do you find it in the 
descriptor table? The answer is by calling the f ileno () 
function. 


int descriptor 



fileno(my file); 

This will \re-iu\nr> -the value 


# 

Data Stream | 

0 

The keyboard | 

1 

The screen | 

s 

The screen | 

3 

Database connection | 

4 

File guitar.mp3 | 




f ileno () is one of the few system functions that doesn’t return 
-1 if it fails. As long as you pass f ileno () the pointer to an 
open file, it should always return the descriptor number. 


dupZO duplicates data streams 


Opening a file will fill a slot in the descriptor table, but what if 
you want to change the data stream already registered against 
a descriptor? What if you want to change file descriptor 3 to 
point to a different data stream? You can do it with the dup2 () 
function. dup2 () duplicates a data stream from one slot to 
another. So, if you have a file pointer to guitar.mp3 plugged in 
to file descriptor 4, the following code will connect it to file 
descriptor 3 as well. 

dup2 (4 , 3); 

There’s still just one guitar.mp3 file, and there’s still just one data 
stream connected to it. But the data stream (the FILE*) is now 
registered with file descriptors 3 and 4. 



# 

Data Stream | 

0 

The keyboard | 

1 

The screen | 

s 

The screen | 

3 

File guitar.mp3 | 

4 

File guitar.mp3 | 


Now that you know how to find and change 
things in the descriptor table, you should 
be able to redirect the Standard Output of a 
process to point to a file. 


you are here ► 433 


www.it-ebooks.info 
























sleepless nights 


Does your error code worry you? 











Do you find that you’re writing duplicate error-handling code 
every time you make a system call? Then fear no more! Using 
our patented method, we’ll show you how to make the most out of 
your error code without writing the same thing over and over. 

Look at these two troublesome pieces of code: 

pid_t pid = fork(); 
if (pid == -1) { 

fprintf(stderr, "Can't fork process: %s\n", strerror(errno)); 

return 1; K plicated do At dan be the «we 

* of unwarranted todin^ stress. 

kr 

if (execle(...) == _ 1) { 

fprintf(stderr, "Can't run script: %s\n", strerror(errno) ) ; 
return 1; 

} 

Is there some way of removing the duplicated code block? Why, yes, there is! By creating a 
simple fire-and-forget errorO function, you’ll make your duplicated code a thmg of the past. 

What’s that, you say? How do you handle that troublesome return statement? After all, you 
can’t move that into a function, can you? 

There’s no need! The exit() system call is the fastest way to stop your program in its tracks. 
No more worrying about returning to main(); just call exit(), and your program s history. 

This is how it works. First, remove all of your error code into a separate function called 
error() and replace that tricky return with a call to exit(). To ehSure you have ^ ^ 

void error (char *msg) system dal! available, you need 


to include stdlib.lv 


fprintf (stderr, "%s: %s\n", msg, strerror (errno) ) , ,<tma-tCi \/J 

exit (1); fU. will Wmate youv yv-o^am wiib status I IMMEDIATELY. 

} 

Now you can replace that troublesome error-checking code with something much simpler: 

pid_t pid = fork(); 

if (pid == -1) { 

error ("Can't fork process"); 

} 

if (execle(...) == _ 1) { 

error ("Can't run script"); 

} 

Warning: offer limited to one exit() call per program execution. Do not operate exit() lf 
you have a fear of sudden program termination. 


434 Chapter 10 


www.it-ebooks.info 


interprocess communication 


- ^terpen your pencil 


The #indludes and the em>vO tundtion 
have been (removed -to save spade- 

4 - 


This is a program that saves the output of the rssgossip.py 
script into a file called stories.txt. It's similar to the newshound 
program, except it searches through a single RSS feed only. Using 
what you've learned about the descriptor table, see if you can find 
the missing line of code that will redirect the Standard Output of 
the child process to the stories.txt file. 


int main(int argc, char *argv[]) 

{ 

char *phrase = argv[l]; 

char *vars[] = {"RSS FEED=http:// www .cnn.com/rss/celebs.xml", NULL}; 
FILE *f = fopen ( "stories.txt", "w"); 

if (! f) { < |£ we dan 'i wvite to stovies.-Ut, then t will be zevo- 

error ("Can 1 1 open stories . txt") ; ^ Well report errors using the errorO 
j -function we wrote earlier. 

pid_t pid = fork(); 
if (pid == -1) { 

error("Can't fork process"); 

} 

if ( !pid) { 

if ( 

error ("Can't redirect Standard Output"); 

} 

if (execle ( "/usr/bin/python", "/usr/bin/python", "./rssgossip.py", 

phrase, NULL, vars) == -1) { 

error ("Can't run script"); 

} 

} 

return 0; 


^ What do you think yes 


here? 


) { 



newshound2.c 


you are here ► 435 


www.it-ebooks.info 














standard output redirected 

- %3tarpen your pencil 

Solution 


This is a program that saves the output of the rssgossip.py script 
into a file called stories.txt. It's similar to the newshound 
program, except it searches through a single RSS feed only. Using 
what you've learned about the descriptor table, you were to find 
the missing line of code that will redirect the Standard Output of 
the child process to the stories.txt file. 


int main(int argc, char *argv[]) 


{ 


char *phrase = argv[l]; 

char *vars [] = {"RSS FEED=http: //www .cnn.com/rss / celebs.xml " , NULL}; 
FILE *f = f open ( "stories . txt" , "w"); This opens s-fcov-ies.-ix-t -for* wv-i-iinj). 

if (if) { ^-|£ -f was - zjcco , we dould**t open *the -file- 

error ("Can’t open stories.txt"); 

} 

pid_t pid = fork(); 
if (pid — -1) { 

error("Can’t fork process"); 

j _This dode dha*ges -the dhild 

^ p\rodess bedause the 


prodess bedause the Pid is zjero. This Points desdv-iptov- $r\ 
if < ! P id > < *=---the sfc*ies.t*t t.le- 


if ( .4.up2.(-Pilenp(-(;)( ! ).~! ) ( 

error ("Can’t redirect Standard Output"); 

} 

if (execle("/usr/bin/python", "/usr/bin/python", "./rssgossip.py", 

phrase, NULL, vars) == -1) { 

error ("Can’t run script"); 

} 


} 


return 0; 



Did you get the right answer? The program 
will change the descriptor table in the child 
script to look like this: 

That means that when the rssgossip.py script 
sends data to the Standard Output, it should 
appear in the stories.txt file. 


newshound2.c 


# 

Data Stream | 

0 

The keyboard | 

1 

File stories.txt | 

s 

The screen | 

3 

File stories.txt_ 


436 Chapter 10 


www.it-ebooks.info 
























interprocess communication 



This is what happens when the program is compiled and 
run: 


This runs the program. ^ 

This displays the tontents 
o-f the stories.txt file- 

T 

l£ you re on a Windows machine; 
you II need to be running Cygwin. 


| File Edit Window Help ReadAIIAboutlt 


> ./newshound2 'pajama death' 

> cat stories.txt 

Pajama Death ex-drummer tells all. = 

New Pajama Death album due next month. 


1 


The stories are 
saved m the 
stories.txt -file- 


What happened? 

When the program opened the stories.txt file with fopen (), 
the operating system registered the file f in the descriptor 
table, f ileno (f) was the descriptor number it used. The 
dup2 () function set the Standard Output descriptor (1) to 
point to the same file. 


0 



Ho data in the 
■file? WTF?/? ^ 


t 


| File Edit Window Help ReadAIIAboutlt 


> ./newshound2 'pajama death' 

> cat stories.txt 

> 


Wheve's The Fat-b? 





Assuming you’re searching for stories that exist on the feed, why 
was stories.txt empty after the program finished? 


you are here ► 437 


www.it-ebooks.info 














hey, wait 


Sometimes you need to wait... 

The newshound2 program fires off a separate process to run 
the rssgossip.py script. But once that child process gets created, it’s 
independent of its parent. You could run the newshound2 
program and still have an empty stories.txt, just because the rssgossip.py 
isn’t finished yet. That means the operating system has to give you 
some way of waiting for the child process to complete. 



The waitpidO function 

The waitpid() function won’t return until the child process dies. 
That means you can add a little code to your program so that it 
won’t exit until the rssgossip.py script has stopped running: 


You need to ihdlude 

■the sys/waith 

header. 


#include <sys/wait.h> 



This new tode $oes —^ 
at *the end o( the 
newshoundZ program • 


438 Chapter 10 


This variable is used to store 
intorn»atio»> about the protess. 



int pid status; 



This is a pointer to an int- 

l4 


if (waitpid(pid, &pid_status, 0) == -1) { 

error ("Error waiting for child process"); 


} 

return 0; 


The process ID 


You tan add 
options here- 



newshound2.c 


www.it-ebooks.info 









interprocess communication 


waitpid () takes three parameters: 



waitpid( 

r 

id, 

r 

dstatus, 

options 

) 


pid 

This is the process ID that the parent process was given when it forked 
the child. 


This will store exit information about the process, waitpid () will 
update it, so it needs to be a pointer. 


There are several options you can pass to waitpid (), and typing 
man waitpid will give you more info. If you set the options to 0, the 
function waits until the process finishes. 


o options 


O pid_status 


What's the status? 

When the waitpid () function has finished waiting, it 
stores a value in pid_status that tells you how the process 
did. To find the exit status of the child process, you’ll have 
to pass the pid_status value through a macro called 

WEXITSTATUS (): 

if (WEXITSTATUS (pid_status) ) ^— it the e*it stab* 1S zm> 

puts ("Error status non-zero"); 


Why do you need the macro? Because the pid_status 
contains several pieces of information, and only the first 8 bits 
represent the exit status. The macro tells you the value of just 
those 8 bits. 


you are here ► 439 


www.it-ebooks.info 














test drive 



Now, when you run the newshound2 program, it checks that the 
rssgossip.py script finishes before newshound2 itself ends: 


The s-fcoV"ies.-t*-t 
-file now don-tains 
"the stov-ies 
as soon as 
newshoundZ is v-un. 




I File Edit Window Help ReadAIIAboutlt 


> ./newshound2 'pajama death' 

> cat stories.txt 

Pajama Death ex-drummer tells all. 

New Pajama Death album due next month. 




That's great 


I'll never miss 
another story again. 


O 


Adding a waitpid () to the program was easy to do and 
it made the program more reliable. Before, you couldn’t 
be sure that the subprocess had finished writing, and that 
meant there was no way you could use the newshound2 
program as a proper tool. You couldn’t use it in scripts and 
you couldn’t create a GUI frontend for it. 

Redirecting input and output, and making processes wait 
for each other, are all simple forms of interprocess 
communication. When processes are able to cooperate— 
by sharing data or by waiting for each other—they become 
much more powerful. 



BULLET POINTS 


■ exit() is a quick way of ending 
a program. 

■ All open files are recorded in the 
descriptor table. 

■ You can redirect input and output 
by changing the descriptor table. 


f ileno () will find a descriptor 
in the table. 

dup2 () can be used to change 
the descriptor table. 

waitpid () will wait for 
processes to finish. 


o 



440 Chapter 10 


www.it-ebooks.info 













interprocess communication 


O: Does exit () end the program 
faster than just returning from 
main()? 

No. But if you call exit (), you 
don’t need to structure your code to get 
back to the main () function. As soon as 
you call exit (), your program is dead. 

% Should I check for —1 when I call 
exit (), in case it doesn’t work? 

A: no . exit () doesn’t return a value, 
because exit () never fails, exit () 
is the only function that is guaranteed 
never to return a value and never to fail. 

% Is the number I pass to exit () 
the exit status? 


A: 


Yes. 


% Are the Standard Input, Output, 
and Error always in slots 0,1, and 2 of 
the descriptor table? 


A 


I Yes, they are. 

% So, if I open a new file, it is 
automatically added to the descriptor 
table? 


A 


: Yes. 


tliereiure H9 

■ Dumb Questions 

% Is there a rule about which slot it 
gets? 

New files are always added to the 
available slot with the lowest number. So, 
if slot number 4 is the first available one, 
that’s the one your new file will use. 

% How big is the descriptor table? 

It has slots from 0 to 255. 

% The descriptor table seems kinda 
complicated. Why is it there? 

Because it allows you to rewire 
the way a program works. Without the 
descriptor table, redirection isn’t possible. 

Is there a way of sending data to 
the screen without using the Standard 
Output? 

On some systems. For example, on 
Unix-based machines, if you open 
/dev/tty, it will send data directly to the 
terminal. 

% Can I use waitpid () to wait 
for any process? Or just the processes 
I started? 

You can use waitpid () to wait 
for any process. 


% Why isn’t the pid_status in 
waitpid(..., &pid_status, 
. . .) just an exit status? 

Because the pid_status 
contains other information. 


O: 


Such as? 


For example, WIFSIGNALED 
(pid_status) will be false if 
a process ended naturally, or true if 
something killed it off. 

% How can an integer variable like 
pid_status contain several pieces 
of information? 

It stores different things in different 
bits. The first 8 bits store the exit status. 
The other information is stored in the other 
bits. 

So, if I can extract the first 8 bits 
of the pid_status value, I don’t 
have to use WEXITSTATUS () ? 

It is always best to use 
WEXITSTATUS (). It’s easier to read 
and it will work on whatever the native 
int size is on the platform. 

% Why is WEXITSTATUS () in 
uppercase? 

Because it is a macro rather than 
a function. The compiler replaces macro 
statements with small pieces of code at 
runtime. 


you are here ► 441 


www.it-ebooks.info 




don’t be a stranger 


Stay iw touch with your child 

You’ve seen how to run a separate process using exec () and 
fork (), and you know how to redirect the output of a child 
process into a file. But what if you want to listen to a child 
process directly? Is that possible? Rather than waiting for a 
child process to send all of its data into a file and then reading 
the file afterward, is there some way to start a process running 
and read the data it generates in real time? 


Reading story links from rssgossip 


As an example, there’s an option on the rssgossip.py script that 
allows you to display the URLs for any stories that it finds: 


The URL line 

begins with a 

tab character. 


-u tells the serif t to include story links. 


File Edit Window Help 




> python rssgossip.py -u 'pajama death' 

Pajama Death ex-drummer tells all. 

=H^http: //www. rock-news . com/exclusive/24 .html 
New Pajama Death album due next month. ^ 

http://www.rolling-stone.com/pdalbum.html 


This is the URL 
-for the story. 


Now, you could run the script and save its output to a file, but 
that would be slow. It would be much better if the parent and 
child process could talk to each other while the child process is 
still running. 


Since I created 
you, you never write, 
you never phone... 


Parent process 



442 Chapter 10 



www.it-ebooks.info 






interprocess communication 


Connect your processes with pipes 


You’ve already used something that makes live connections 
between processes: pipes. 


The two processes are 

£o*me£ted with a pipe 


vss^ossip.py sends its— 
output into the pipe- 


-.=*1 


yep -filters the 
output o-f the script- 


| File Edit Window Help ReadAIIAboutlt 


python rssgossip.py -u 'pajama death' | grep 'http' 
http://www.rock-news.com/exclusive/24.html 
http://www.rolling-stone.com/pdalbum.html 


] 


Pipes are used on the command line to connect the output of 
one process with the input of another process. In the example 
here, you’re running the rssgossip.py script manually and then 
passing its output through a command called grep. The grep 
command finds all the lines containing http. 


Piped commands are parents and children 


Whenever you pipe commands together on the command line, 
you are actually connecting them together as parent and child 
processes. So, in the above example, the grep command is 
the parent of the rssgossip.py script. 



The command line creates the parent process. 



The parent process forks the rssgossip.py 
script in a child process. 



The parent connects the output of the child 
with the input of the parent using a pipe. 



The parent process execs the grep command. 



Pipes are used a lot on the command line to allow users to 
connect processes together. But what if you’re just using G 
code? How do you connect a pipe to your child process so that 
you can read its output as soon as it’s generated? 


you are here ► 


443 


www.it-ebooks.info 






PipeQ 


Case study: opening stories in a browser 


Let’s say you want to run the rssgossip.py script and then 
open the stories it finds in a web browser. Your program 
will run in the parent process and rssgossip.py will run in the 
child. You need to create a pipe that connects the output of 
rssgossip.py to the input of your program. 

But how do you create a pipe? 


pipeO opens two data streams 

Because the child is going to send data to the parent, you 
need a pipe that’s connected to the Standard Output of the 
child and the Standard Input of the parent. You’ll create 
the pipe using the pipe () function. Remember how we 
said that every time you open a data stream to something 
like a file, it gets added to the descriptor table? Well, that’s 
exactly what the pipe () functions does: it creates two 
connected streams and adds them to the table. Whatever is 
written into one stream can be read from the other. 


I want a program 
that opens stories in 
my browser as soon 
as they're found. 


O 


This is (dioi -> 
This is tdCIJ. 



# 

Data Stream 

0 

Standard input 

1 

Standard output 

2 

Standard error 

3 5 

Read-end of the pipe 


Write-end of the pipe 


Calling pipeO tveates these two desdviptovs. 


Whatever is written here... 




When pipe () creates the two lines in the descriptor table, 
it will store their file descriptors in a two-element array: 


The destvip-bov-s will be 
s*toved m “this avray- 

you pass -the name int f d [ 2 ] ; 
o( -the avray -to—^ if ( p i pe (fd) == -l) { 

error ( "Can 1 1 create the pipe"); 


■the pipeO -f unction. 


} 


The pipe () command creates a pipe and tells you two 
descriptors: f d [ 1 ] is the descriptor that writes to the 
pipe, and f d [ 0 ] is the descriptor that reads from the 
pipe. Once you’ve got the descriptors, you’ll need to use 
them in the parent and child processes. 


444 Chapter 10 


fjw writes to 
the pipe; ld[0] 
reacts from it. 


www.it-ebooks.info 













interprocess communication 


In the child 


In the child process, you need to close the f d [ 0 ] end 
of the pipe and then change the child process’s Standard 
Output to point to the same stream as descriptor f d [ 1 ] . 

/■This will close the read end ot the fife- 

The £hild won*t 

v*ead -(Vor* the pipe- -—^close (fd[0]) ; £hild then £onne£ts the write 

0 / - , .11 -T~ the Standard Output- 


dup2(fd [1], 1); 



# 

Data Stream | 

0 

Standard input | 

1 

of* tlie pipe | 

s 

Standard error | 

3 


4 

Write-end of the pipe | 


That means that everything the child sends to the Standard 
Output will be written to the pipe. 


This IS tdCI3, the write end 
ot the \>i^e- 


The ehild 
won*t read 
-from the pipe. 

“but will 
write- 


Iw the parent 


In the parent process, you need to close the f d [ 1] end 
of the pipe (because you won’t be writing to it) and then 
redirect the parent process’s Standard Input to read its data 
from the same place as descriptor f d [ 0 ]: 


The parent £onnedts 
the read end to the 
Standard Output- 



dup2(fd[0], 0) 
close(fd[l]); 


-f dC03 is the read end of the pipe- 

r 

This will close -the write end ot the pipe- 





# 

Data Stream | 

0 

of the pipe | 

1 

Standard output | 

s 

Standard error | 

3 

Read-end of the pipe | 

4 



Everything that the child writes to the pipe will be read 
through the Standard Input of the parent process. 


The parent 
will read 
-from the 
pipe... 

“but won*t 
write 


you are here ► 445 


www.it-ebooks.info 




























ready-bake code 


Opening a web page in a browser 


Your program will need to open up a web page using the 
machine’s browser. That’s kind of hard to do, because 
different operating systems have different ways of talking to 
programs like web browsers. 

Fortunately, the out-of-work actors have hacked together 
some code that will open web pages on most systems. It looks 
like they were in a rush to go do something else, so they’ve 
put together something pretty simple using system () : 




void open url (char *url) 


char launch[255] 
sprintf (launch. 


This will open a web page 
, ^ 

"cmd /c start %s", url); 



This will open a web 
page on Linu*. 



system(launch); 

sprintf (launch, "x-www-browser 
system(launch); 


I 9- c ! 
o S 


&", url); 


} 


sprintf(launch, "open ' %s'", url); 
system(launch); 

This will open a web page on -the Mad. 



The code runs three separate commands to open a 
URL: that’s one command each for the Mac, Windows, and 
Linux. Two of the commands will always fail, but as long as 
the third command works, that’ll be fine. 



G# Off piste - 

Think you can write better code 
than the out-of-work actors? 
Then why not rewrite the code 

to use fork () and exec () for 

your favorite operating system? 


446 Chapter 10 


www.it-ebooks.info 










interprocess communication 



It looks like most of the program is already written. All you need to do is complete the code that 
connects the parent and child processes to a pipe. To save space, the # include lines and the 
error () and open_url () functions have been removed. Remember, in this program the 
child is going to talk to the parent, so make sure that pipe’s connected the right way! 


int main(int argc, char *arqv[]) . . , , » , i»- 

y v/ow mi^ht want to 'reflate this 

^ with another news-feed. 

char *phrase = argvfl]; ^ 

char *vars[] = {"RSS_FEED=http://www.cnn.com/rss/celebs.xml", NULL}; 

int fd [2 ] ; ^—’This av-vay v/ill s-bove "the deserip-bov-s -fov- your pipe- 


pid_t pid = fork(); 
if (pid == -1) { 

error("Can't fork process"); 


} 


if ( !pid) { 




Are you parent or thild? What tode $oes in these lines 


if (execle("/usr/bin/python", "/usr/bin/python", "./rssgossip.py", 

"-u'L phrase, NULL, vars) == -1) { 


K. 


error ( "Can ' t run script" ) ; 'N w -u w “bells ”bhe sdvip-t "bo display 
} Are you in the parent or the thild here? WRLs for the stories. 

} What do you need to do to the pipe? ^ 


char line [255]; 
while (fgets(line, 255, 
if (line [0] == f \t 1 ) 
open_url(line + 1); 

} ~ T 

return 0 ; bine T I is ”bhe string sbav-bin^ 


l*f ihe line s-bav-bs y/i-bh a -bab 
^^..then its a URL. 


a-Pter ihe -tab eharae-ber. 



1/Vhat needs 

*bo here? 
Wba-b will you 


news_opener.c 


you are here ► 447 


www.it-ebooks.info 




















pipe connected 



I&etictSe 

Solution 


It looks like most of the program is already written. You were to complete the code that connects 
the parent and child processes to a pipe. To save space, the ^include lines and the 
error () and open url() functions have been removed. 


int main(int argc, char *argv[]) 


{ 


char *phrase = argv[l]; 

char *vars[] = {"RSS_FEED=http://www.cnn.com/rss/celebs.xml", NULL}; 

int fd [2 ] ; ^—This will Create the pipe and stove its descriptors m (dC03 and ( dCI J 

. i-f . .(pipc(^d) . =~. . rl). . t . 

error( w Cah ; t Create the pipe”); thcLk that return Code, 

. } . ' ' 


m tese we cant Create the pipe 


pid_t pid = fork(); 
if (pid == -1) { 

error("Can 1 1 fork process"); 

} x/owVe in -the dhild prodess here- 

^dup2-(]rd CI3 I)' tr”' wl ^ se ^ ^^"^ard Output to the write end of -the pipe- 

doscCfdlOl)} 4 r~ The ' MOri ^ YtiA ^ or " P'P*' so Nwe " £lose lread eir,d 


if (execle("/usr/bin/python", "/usr/bin/python", "./rssgossip.py", 

"-u", phrase, NULL, vars) == -1) { 

error ("Can't run script"); 

1 x You're in -the parent prodess down here- 

} Ik 

dupZ(-fdCp], <p);.<P This wil1 ' red " re ^ the standard Input to the read end of the pipe- 

7. —' This will close the write end o-f the pipe, 
char line [255] ; ^edause P 3 '^ ' NO ' n ^ ' N ' rl ‘^ l ^ 

while (fgets (line, 255, stdin ) ) { 

if (line [0] == • \t') /T~ 

open_url (line + 1); Y^’re reading trom the You dould also 

} Standard Input, bedause ^ have put fdLOl- 

return 0 ,* thats donnedted to the 

pipe- 



news_opener.c 


448 Chapter 10 


www.it-ebooks.info 



















interprocess communication 



When you compile and run the code, this happens: 

| File Edit Window Help ReadAIIAboutlt 


> ./news opener 'pajama death' 




Nrw Paj.im.i Dralh .ilbum dui- nr«I ronnlh 


, 1+1 


bQQ9l« 


New Pajama Death album due next month 


V.'"" 


That’s great. It worked. 

The news_opener program ran the rssgossip.py in a 
separate process and told it to display URLs for each story it 
found. All of the output of the screen was redirected through 
a pipe that was connected to the news_opener parent 
process. That meant the news_opener process could 
search for any URLs and then open them in the browser. 

Pipes are a great way of connecting processes together. 

Now, you have the ability to not only run processes and 
control their environments, but you also have a way of 
capturing their output. That opens up a huge amount of 
functionality to you. Your G code can now use and control 
any program that you can use from the command line. 



Feb 28 Mar 1.2012 
ling Data Work Santa Clara, CA 


to save 60% * use code CYBER60 


Most Popular » 

Today'* trvtt moal popular atoriM 



f 

The program opehs a |j 
the news series it 
+md in the browser. 



—G# Off piste - 

Now that you know how to control rssgossip.py, why not try controlling some of these 
programs? You can get all of them for Unix-style machines or any Windows machine 
using Cygwin: 

curl/wget 

These programs let you talk to web servers. If you call them from C code, you can write 
programs that can talk to the Web. 

mail/mutt 

These programs let you send email from the command line. If they’re on your machine, it means 
your C programs can send mail too. 

convert 

This command can convert one image format to another image format. Why not create a C 
program that outputs SVG charts in text format, and then use the convert command to create 
PNG images from them? 


you are here ► 449 


www.it-ebooks.info 

























no dumb questions 


tlieretUre no 

Dumb Questions 



Is a pipe a file? 


It’s up to the operating system how 
it creates pipes, but pipes created with the 
pipe () function are not normally files. 



So pipes might be files? 


^Z It is possible to create pipes based 
on files, which are normally called named 
pipes or FIFO (first-in/first-out) files. 


% Why would anyone want a pipe 
that uses a file? 


Pipes based on files have names. 
That means they are useful if two 
processes need to talk to each other and 
they are not parent and child processes. As 
long as both processes know the name of 
the pipe, they can talk with it. 


Cl: 


pipes? 


Great! So how do I 


use named 


Using the mkf if o () system call. 
For more information, see 
http://tinyurl. com/cdf6ve5. 


Q- If most pipes are not files, what 
are they? 


^Z Usually, they are just pieces of 
memory. Data is written at one point and 
read at another. 


Q- What happens if I try to read from 
a pipe and there’s nothing in there? 


Your program will wait until 
something is there. 


Cl How does the parent know when 
the child is finished? 


^Z When the child process dies, the pipe 
is closed and the f gets () command 
receives an end-of-file, which means the 
f gets () function returns 0, and the 
loop ends. 



Can parents speak to children? 


Absolutely. There is no reason why 
you can’t connect your pipes the other way 
around, so that the parent sends data to 
the child process. 


% Can you have a pipe that works in 
both directions at once? That way, my 
parent and child processes could have 
a two-way conversation. 


^Z No, you can’t do that. Pipes always 
work in only one direction. But you can 
create two pipes: one from the parent to 
the child, and one from the child to the 
parent. 


buuet 


POINTS 


■ Parent and child processes can 
communicate using pipes. 


■ The pipe () function creates a 
pipe and two descriptors. 


■ The descriptors are for the read and 
write ends of the pipe. 


You can redirect Standard Input and 
Output to the pipe. 

The parent and child processes use 
different ends of the pipe. 


450 Chapter 10 


www.it-ebooks.info 








interprocess communication 


The death of a process 

You’ve seen how processes are created, how their 
environments are configured, and even how processes talk to 
each other. But what about how processes die? For example, 
if your program is reading data from the keyboard and the 
user hits Gtrl-G, the program stops running. 

How does that happen? You can tell from the output 
that the program never got as far as running the second 
printf (), so the Gtrl-G didn’t just stop the f gets () 
command. Instead, the whole program just stopped in its 
tracks. Did the operating system just unload the program? 
Did the fgets () function call exit () ? What happened? 

The 0/S controls your program with signals 

The magic all happens in the operating system. When you 
call the fgets () function, the operating system reads the 
data from the keyboard, and when it sees the user hit Gtrl-G, 
sends an interrupt signal to the program. 


^include <stdio.h> 

int main() 

{ 

char name[30]; 
printf ("Enter your name: ") 
fgets(name, 30, stdin); 
printf ("Hello %s\n", name); 
return 0; 



} 



| File Edit Window Help 


> ./greetings 
Enter your name: A C 

> rfh. 


- j - 

you press C*brl-C> “the program 
s-fcofs rwmmjy But why? 



Someone hits Ctrl—C 


Keyboard 


The operatic ^ 

system sends an ^ 
interrupt signal 


0 th 


operating system 


7^ 

The process runs ib 

de-fault interrupt 
handler and ealls exitO. 


process 


A signal is just a short message: a single integer value. When 
the signal arrives, the process has to stop whatever it’s doing 
and go deal with the signal. The process looks at a table of 
signal mappings that link each signal with a function called the 
signal handler. The default signal handler for the interrupt 
signal just calls the exit () function. 

So, why doesn’t the operating system just kill the program? 
Because the signal table lets you run your own code when 
your process receives a signal. 


£i$*al mappings 

This is -the 

nvtev-vup-t signal. 

SI3INT has 
the value 2~ 

The detaul-t handler tails e*itO. 



you are here ► 451 


www.it-ebooks.info 





























sigactionQ 


Catching signals and running your own code 

Sometimes you’ll want to run your own code if someone interrupts 
your program. For example, if your process has files or network 
connections open, it might want to close things down and tidy up 
before exiting. But how do you tell the computer to run your code 
when it sends you a signal? You can do it with sigactions. 

A sigaction is a function wrapper 

Asigactionisa struct that contains a pointer to a function, 
sigactions are used to tell the operating system which function 
it should call when a signal is sent to a process. So, if you have a 
function called diediedie () that you want the operating system 
to call if someone sends an interrupt signal to your process, you’ll 
need to wrap the diediedie () function up as a sigaction. 

_.Create a new action. 

struct sigaction action; 

These ame some 
additional flags. 

You can just set w 

then* to z£v*o. action. sa_flags = 0; 


This is how you create a sigaction: 



action.sa_handler = diediedie; 
sigemptyset(&action.sa mask); 


The function wrapped by a sigaction is called the handler, 
because it will be used to deal with (or handle) a signal that’s sent 
to it. If you want to create a handler, it will need to be written in a 
certain way. 

All handlers take signal arguments 

Signals are just integer values, and if you create a custom handler 
function, it will need to accept an int argument, like this: 


void diediedie (int sig) 


This is the name of the function 
you want the Computer to Call. 

The WW that the section 

wvaps is tailed a handler- 

The *>ask is a way of tilterina the 
*9nals that the sigaetio* will handle- 



you'll usually want to use an 
empty mask, like here- 


{ 


This is the signal number 
the handler has Caught* 

puts ("Goodbye cruel world....\n") ; 
exit (1); 


Watch it! 


} 


Because the handler is passed the number of the signal, you can 
reuse the same handler for several signals. Or, you can have a 
separate handler for each signal. How you choose to program it is 
up to you. 

Handlers are intended to be short, fast pieces of code. They should 
do just enough to deal with the signal that’s been received. 


Be careful when 
writing to 
Standard Output 
and Error in 
handler functions. 


Even though the example code 
you’ll use will display text on 
the Standard Output, be careful 
about doing that in more complex 
programs. Signals can arrive 
because something bad has 
happened to the program. That 
might mean that Standard Output 
isn’t available, so be careful. 


452 Chapter 10 


www.it-ebooks.info 







interprocess communication 


sigactiows are registered with sigactionO 

Once you’ve create a sigaction, you’ll need to tell the operating 
system about it. You do that with the sigaction () function: 

sigaction(signal no, &new action, &old action); 


sigaction () takes three parameters: 


o 

o 

o 


The signal number. 

The integer value of the signal you want to handle. Usually, you'll pass 
one of the standard signal symbols, like SIGINT or SIGQUIT. | ' a hile 

The new action. 

This is the address of the new sigaction you want to register. 

The old action. 

If you pass a pointer to another sigaction, it will be filled with 
details of the current handler that you’re about to replace. If you don’t 
care about the existing signal handler, you can set this to NULL. 


You II -find out more 
about the standard 


The sigaction () function will return —1 if it fails and will also 
set the errno function. To keep the code short, some of the code 
you’ll see in this book will skip checking for errors, but you should 
always check for errors in your own code. 



The signal number 


A pointer to the handler tundtion 

h 


int catch signal(int sig, void (*handler)(int)) 


This is a function that will 
make it a little easier to 
register functions as signal 
handlers: 

Use an empty 


{ 

struct sigaction action; a a o 


action.sa_handler = handler; 

^ as |< ^ sigemptyset (&action. sa_mask) 

action.sa flags = 0; 



r 


Set the a^tion^s handler to 
the handler -function that 
was passed in. 


} 


return sigaction (sig, &action, NULL); 



Return the value ot sigadtionO, 
so you dan Cheek tor errors. 


This function will allow you to set a signal handler by calling 
catch_signal () with a signal number and a function name: 


catch signal(SIGINT, diedieie) 


you are here ► 453 


www.it-ebooks.info 




catching signals 


Rewriting the code to use a signal handler 

You now have all the code to make your program do something if 
someone hits the Gtrl-G key: 


tta*dlev-s 
have void 
reW 


^include <stdio.h> 

#include <signal. h>^— need *to include *the signaih header 

^include <stdlib.h> 

l/This our new signal handler. . 

iiedie (int sig) ^"The operate syster,psses 

( g> ^ ^ 4al the handler- 


void diediedi 

{ 

puts ("Goodbye cruel world....\n"); 
exit(1); 

This is "the function *to register a handler. 

int catch signal(int sig, void (^handler)(int)) 

{ 

struct sigaction action; 
action.sa handler = handler; 
sigemptyset(&action.sa_mask); 
action.sa_flags = 0; 

return sigaction (sig, &action, NULL); 

means we are capturing This sets the interrupt handler to 
int main () the interrupt signal. the handle_mterruptO tundtion. 

{ V 

if (catch_signal(SIGINT, handle_interrupt) == -1) { 

fprintf(stderr, "Can't map the handler"); 
exit(2); 

char name[30]; 

printf("Enter your name: "); 
fgets(name, 30, stdin); 
printf("Hello %s\n", name); 
return 0; 


The program will ask for the user’s name and then wait for her to type. 
But if instead of typing her name, the user just hits the Gtrl-G key, the 
operating system will automatically send the process an interrupt signal 
(SIGINT). That interrupt signal will be handled by the sigaction 
that was registered in the catch_signal () function. The 
sigaction contains a pointer to the diediedie () function. This 
will then be called, and the program will display a message and exit () 

454 Chapter 10 


www.it-ebooks.info 




interprocess communication 



When you run the new version of the program and press 
Gtrl-G, this happens: 


File Edit Window Help 


> ./greetings 

Enter your name: A CGoodbye cruel world.... 

> 


The operating system received the Gtrl-G and sent a 
SIGINT signal to the process, which then ran your 
handle interrupt () function. 



% ^ + 

• + 

There are a bunch of different signals the operating system can send to 
your process. Match each signal to its cause. 


SIGINT 

The process was interrupted. 

SIGQUIT 

The terminal window changed size. 

SIGFPE 

The process tried to access illegal memory. 


Someone just asked the kernel to kill the 

SIGTRAP 

process. 

SIGSEGV 

The process wrote to a pipe that nothing’s 
reading. 

SIGWINCH 

Floating-point error. 

SIGTERM 

Someone asked the process to stop and dump 
the memory in a core dump file. 

SIGPIPE 

The debugger asks where the process is. 


you are here ► 455 


www.it-ebooks.info 












purpose found 





There are a bunch of different signals the operating system can send to 
your process. You were to match each signal to its cause. 


SIGINT 


SIGQUIT 


SIGFPE 


SIGTRAP 


SIGSEGV 


SIGWINCH 


SIGTERM 


SIGPIPE 



The process was interrupted. 

The terminal window changed size. 

The process tried to access illegal memory. 

Someone just asked the kernel to kill the 
process. 

The process wrote to a pipe that nothing’s 
reading. 

Floating-point error. 

Someone asked the process to stop and dump 
the memory in a core dump file. 

The debugger asks where the process is. 


thereicffe no 

Dumb Questions 


O: If the interrupt handler didn’t call exit (), would the 
program still have ended? 



No. 


O: So, I could write a program that completely ignores 
interrupts? 


You could, but it’s not a good idea. In general, if your 
program receives an error signal, it’s best to exit with an error, 
even if you run some of your own code first. 


456 Chapter 10 


www.it-ebooks.info 











interprocess communication 


Use kill to send signals 

If you’ve written some signal-handling code, how do you test . 

it? Fortunately, on Unix-style systems, there’s a command ^ U m 0>MS 

called kill. It’s called kill because it’s normally used to kill 

off processes, but in fact, kill just sends a signal to a process. 

By default, the command sends a SIGTERM signal to the 
process, but you can use it to send any signal you like. 

To try it out, open two terminals. In one terminal, you can run 
your program. Then, in the second terminal, you can send 
signals to your program with the kill command: 


| File Edit Window Help 

durrent prodesses. 

This sends 

to the program--^ 

This sends 

to the program. S 7 

This sends £|£)£T^\/ 
to the program. 


> ps 

77868 ttys003 0 
78222 ttys003 0 

> kill 78222 

> kill -INT 78222 

> kill -SEGV 78222 

> kill -KILL 78222 

A 


l 


0:00.02 bash 
0:00.01 ./testprog 


This is -the \>vo$va»n 'we v,a ^ 'k 
send sisals -to- 782-2-2. is -the 

prodess IP- 


This sends £|£j^|LL, whidh dan*t be ignored- 


Each of these kill commands will send signals to the process 
and run whatever handler the process has configured. The 
exception is the SIGKILL signal. The SIGKILL signal can’t 
be caught by code, and it can’t be ignored. That means if you 
have a bug in your code and it is ignoring every signal, you can 


£|£j£T0P dant be ignored either- 
It’s used to pause your prodess. 



kilt -KILL <pid> 

Send signals with raiseO 

will always kill 

Sometimes you might want a process to send a signal to itself, 
which you can do with the raise () command. 

your program. 

raise(SIGTERM); 


Normally, the raise () command is used inside your own 
custom signal handlers. It means your code can receive a 
signal for something minor and then choose to raise a more 
serious signal. 


This is called signal escalation. 

you are here ► 


457 


www.it-ebooks.info 




smell the coffee 


Sending your code a wake-up call 


The operating system sends signals to a process when something has 
happened that the process needs to know about. It might be that the 
user has tried to interrupt the process, or someone has tried to kill it, 
or even that the process has tried to do something it shouldn’t have, 
like trying to access a restricted piece of memory 


But signals are not just used when things go wrong Sometimes a 
process might actually want to generate its own signals. One example 
of that is the alarm signal, SIGALRM. The alarm signal is usually 
created by the process’s interval timer. The interval timer is like 
an alarm clock: you set it for some time in the future, and in the 
meantime your program can go and do something else: 


This will make the timer 
•fire in 17-0 seconds. 


alarm(120); 


Meanwhile, your £ode —^ 
does something else- 


do_important_busy work(); 
do more busy work(); 


But even though your program is busy doing other things, the timer 
is still running in the background. That means that when the 120 
seconds are up... 




Calling alarmO 7-0) sets 
the alarm -for 17-0 
seconds in the -future- 


...the timer fires a SICALRM signal 


When a process receives a signal, it stops doing everything else 
and handles the signal. But what does a process do with an alarm 
signal by default? It stops the process. It’s really unlikely that you 
would ever want a timer to kill your program for you, so most of the 
time you will set the handler to do something else: 


This will tait h the— 
signal using the 
-function you treated 
earlier. 



catch signal(SIGALRM, pour_coffee); 
alarm(120); 






Alarm signals let you multitask. If you need to run a particular job 
every few seconds, or if you want to limit the amount of time you 
spend doing a job, then alarm signals are a great way of getting a 
program to interrupt itself. 


1 

Watch it! 


Don’t use 
alarm() and 
sleep() at 
the same 
time. 


The sleep () function puts 
your program to sleep for a 
few seconds, but it works 
by using the same interval 
timer as the alarm () 
function, so if you try to 
use the two functions at 
the same time, they will 
interfere with each other. 


458 Chapter 10 


www.it-ebooks.info 











interprocess communication 


Resetting and Ignoring Signals Up Cl«se 


You’ve seen how to set custom signal handlers, but 
what if you want to restore the default signal handler? 
Fortunately, the signal.h header has a special symbol 
SIG_DFL, which means handle it the default way. 


O 


catch signal(SIGTERM, SIG DFL); 


Also, there’s another symbol, SIG_IGN, that tells 
the process to completely ignore a signal. 

catch signal(SIGINT, SIG IGN); 


But you should be very careful before you choose to 
ignore a signal. Signals are an important way of 
controlling—and stopping—processes. If you ignore 
them, your program will be harder to stop. 


r 


\ 

hi 

1 

) 

V 


/ 



r a 

\ 



KV 

N 

V 


* 



OK, so if I receive 
TERM signal, I 
should just exi+() 
like before... 


Ctrl-C? Talk 
to the hand; I'm 
doing nothing. 


there,are no 

Dumb Questions 



Can I set an alarm for less than a second? 


Yes, but it’s a little more complicated. You need to use a 
different function called setitimer (). It lets you set the 
process’s interval timer directly in either seconds or fractions of a 
second. 



How do I do that? 


Go to http://tinyurl.com/3o7hzbm for more details. 



Why is there only one timer for a process? 


The timers have to be managed by the operating system 
kernel, and if processes had lots of timers, the kernel would go 
slower and slower. To prevent this from happening, the operating 
system limits each process to one timer. 


O: Timers let me multitask?! Great, so I can use them to do 
lots of things at once? 


No. Remember, your process will always stop whatever it’s 
doing when it handles a signal. That means it is still only doing one 
thing at a time. You’ll see later how you can really make your code 
do more than one thing at a time. 


O: 

set? 


What happens if I set one timer and it had already been 


Whenever you call the alarm () function, you reset the 
timer. That means if you set the alarm for 10 seconds, then a 
moment later you set it for 10 minutes, the alarm won’t fire until 10 
minutes are up. The original 10-second timer will be lost. 


you are here ► 459 


www.it-ebooks.info 










exercise 




This is the source code for a program that tests the user’s math skills. It asks the user to work 
the answer to a simple multiplication problem and keeps track of how many answers he got 
right.The program will keep running forever, unless: 

1. The user presses Ctrl-C, or 

2. The user takes more than five seconds to answer the question. 

When the program ends, it will display the final score and set the exit status to 0. 


^include 

^include 

ffinclude 

^include 

^include 

ffinclude 

^include 


<stdio.h> 
<stdlib.h> 
<unistd.h> 
<time.h> 
<string.h> 
<errno.h> 
<signal.h> 


int score = 0; 


void end game(int sig) 

{ 

printf("\nFinal score: %i\n", score); 

Whai should -A 
happen onde 
the sdove is ’ 

displayed? 

int catch signal(int sig, void (^handler)(int)) 

{ 

struct sigaction action; 
action.sa handler = handler; 
sigemptyset(&action.sa_mask); 
action.sa_flags = 0; 

return sigaction (sig, faction, NULL); 

} 


460 Chapter 10 


www.it-ebooks.info 






interprocess communication 


void times_up(int sig) 

{ 

puts("XnTIME'S UP!"); 

raise ( ) ; 

i . t . 

Raise what? 

void error (char *msg) 

{ 

fprintf(stderr, "%s: %s\n", msg, strerror(errno)); 
exit(1); 


int main() 

{ 

catch_signal(SIGALRM, 
catch signal(SIGINT, 


This makes sure ^ 

you yt srandom (time (0)); 


VVha-t will 

^ the signalO 

) ; kz -functions do? 


random numbers 
eadh time- 


while (1) { 

int a = random() 
int b = random() 
char txt[4]; 


o 

o 


o 

o 


11 

11 

ft 



a and b will be random numbers -from O to 10. 


ttmmm...what line is missing? Need to dhedk the sped... 


printf("\nWhat is %i times %i? ", a, b); 
fgets(txt, 4, stdin); 
int answer = atoi (txt); 
if (answer == a * b) 
score++; 
else 

printf("\nWrong! Score: %i\n", score); 

} 

return 0; 


you are here ► 461 


www.it-ebooks.info 









exercise solved 



Solution 

This is the source code for a program that tests the user’s math skills. It asks the user to work 
the answer to a simple multiplication problem and keeps track of how many answers he got 
right.The program will keep running forever, unless: 


1. The user presses Ctrl-C, or 


2. The user takes more than five seconds to answer the question. 


When the program ends, it will display the final score and set the exit status to 0. 


^include 

^include 

ffinclude 

^include 

^include 

jfinclude 

^include 


<stdio.h> 
<stdlib.h> 
<unistd.h> 
<time.h> 
<string.h> 
<errno.h> 
<signal.h> 


int score = 0; 


lz " ee i e*rKO); 

the exit siains . 

O and s'top. } 


void end game(int sig) 

{ 

printf("\nFinal score: 


o 

o 


i\n" 


score); 


int catch_signal(int sig, void (^handler) (int)) 

{ 

struct sigaction action; 
action.sa handler = handler; 
sigemptyset(&action.sa_mask); 
action.sa_flags = 0; 

return sigaction (sig, &action, NULL); 

} 


462 Chapter 10 


www.it-ebooks.info 






interprocess communication 


void times_up(int sig) 

{ 

puts("XnTIME'S UP!"); 

raise ( SI4INT ) ; 

. .t. 

Raising S|£jlNT will make the pvogvam 
display the -final s£o\re in end_gameO. 

void error (char *msg) 

{ 

fprintf(stderr, "%s: %s\n", msg, strerror(errno)); 
exit(1); 


int main() 


{ 


catch_signal(SIGALRM, 
catch_signal(SIGINT, 
srandom (time (0)); 


This makes sure ^ 
you get di-P-Pev-ent^' 
random numbers while (1) { 

ea£h time- int a = random () 


times^up 
end_game 


o 

o 


o 

o 


11 ; 

11 ; 


int b = random() 
char txt[4]; 

Set the alavm to —^ aUr.m(5); . 

-piv^e in *5 seconds. printf ( ” \nWhat is %i times %i 

fgets (txt, 4, stdin); 
int answer = atoi(txt); 


* 


9 


if 


a, b) 


As long as you 
go through 
the loop in less 
than 5 seconds, 
the timer will 
be reset and it 
will never -fire- 


* 


b) 


if (answer == i 
score++; 
else 

printf("\nWrong! Score: %i\n", score) 


} 


return 0; 


The signalO 
^ -f unfctions set 

) ; the handlers. 


you are here ► 463 


www.it-ebooks.info 












test drive 



To see if the program works, you need to run it a couple of times. 


Test 1: hit CtiTC 

The first time, you’ll answer a few questions and then hit Gtrl-G. 

Gtrl-G sends the process an interrupt signal (SIGINT) that makes the 
program display the final score and then exit () . 


The user hit Ctrl-C here- 

The proy-am displayed -the -final store be-fore ending ^ 


File Edit Window Help 


> ./math master 


What 

is 

0 

times 

1? 0 

What 

is 

6 

times 

1? 6 

What 

is 

4 

times 

10? 40 

What 

is 

2 

times 

3? 6 

What 

is 

7 

times 

4? 28 

What 

is 

4 

times 

10? A C 

Final 

. score: 5 


> 






Test Z: wait five seconds 

The second time, instead of hitting Gtrl-G, wait for at least five 
seconds on one of the answers and see what happens. 

The alarm signal (SIGALRM) fires. The program was waiting for the 
user to enter an answer, but because he took so long, the timer signal 
was sent; the process immediately switches to the times_up () 
handler function. The handler displays the “TIME’S UP!” message 
and then escalates the signal to a SIGINT that causes the program to 
display the final score. 

Uh, oh.. .looks like someone 

xwas a little slow- 


File Edit Window Help 


> ./math master 


What is 5 times 9? 45 


What is 2 times 8? 16 


What is 9 times 1? 9 




What is 9 times 3? 
TIME'S UP! 

Final score: 3 
> 


Signals are a little complex, but incredibly useful. They allow 
your programs to end gracefully, and the interval timer can help 
you deal with tasks that are taking too long. 


464 Chapter 10 


www.it-ebooks.info 












interprocess communication 


thereicffe no 

Dumb Questions 


O: Are signals always received in the 
same order they are sent? 


Not if they are sent very close 
together. The operating system might 
choose to reorder the signals if it thinks 
one is more important than the others. 



Is that always true? 


It depends on the platform. On 
most versions of Cygwin, for example, the 
signals will always be sent and received 
in the same order. But in general, you 
shouldn’t rely on it. 


% If I send the same signal twice, 
will it be received twice by the process? 


Again, it depends. On Linux and the 
Mac, if the same signal is repeated very 
quickly, the kernel might choose to only 
send the signal once to the process. On 
Cygwin, it will always send both signals. 
But again, you should not assume that just 
because you sent the same signal twice, it 
will be received twice. 



BULLET POINTS 


■ The operating system talks to 
processes using signals. 


The interval timer sends sigalrm 
signals. 


■ Programs are normally stopped 
using signals. 


The alarm () function sets the 
interval timer. 


■ When a process receives a signal, it 
runs a handler. 

■ For most error signals, the default 
handler stops the program. 

■ Handlers can be replaced with the 
signal () function. 

■ You can send signals to yourself with 

raise (). 


There is one timer per process. 

Don’t use sleep () and alarm () 

at the same time. 

kill sends signals to a process. 

kill -kill will always kill a 
process. 


you are here ► 465 


www.it-ebooks.info 








c toolbox 


Your C Toolbox 

You’ve got Chapter 10 
under your belt, and now 
you’ve added interprocess 
communication to your toolbox. For 
a complete list of tooltips in the book, 
see Appendix ii. 



>wl ed>aWT 




tilenoO 

tinds 

descriptor. 


waitpidO 

waits tor a 
prodess to 
-finish- 


dvA\> 2-0 

duplicates a 
data stream- 


pipe^ 

creates a 




dat'°* 


Signals are 
^essays 
tv-om the 
0/S. 


Processes can 
Communicate 

using pipes. 


The kitt 

command 

sends d stomal 


A pvognarr, ean 
sehd sisals 
to itselt with 
v-aiseO. 


alarmO sends 
a Sl^ALRM 
atter a -few 
seconds. 


LION 


0 


sigacti 

lets y 
handle sign 


to U 


466 Chapter 10 


www.it-ebooks.info 













11 sockets md networking 

' There’s no place + 

* like 127.0.0.1 + 



Programs on different machines need to talk to each other. 

You’ve learned how to use I/O to communicate with files and how processes on the same 
machine can communicate with each other. Now you’re going to reach out to the rest 
of the world, and learn how to write C programs that can talk to other programs across 
the network and across the world. By the end of this chapter, you’ll be able to create 

programs that behave as servers and programs that behave as clients. 


this is a new chapter 


467 


www.it-ebooks.info 




knock-knock server 


The Internet knock-knock server 

G is used to write most of the low-level networking code on the 
Internet. Most networked applications need two separate programs: 

a server and a client. 

You’re going to build a server in G that tells jokes over the Internet. 
You’ll be able to start the server on one machine like this: 


Watch it! 


You’ll be using 
telnet quite a 
lot in this 
chapter to test 
our server code. 


File Edit Window Help KnockKnock 


> ./ikkp_server 
Waiting for connection 


Other than telling you it’s running, the server won’t display anything 
else on the screen. However, if you open a second console, you’ll be 
able to connect to the server using a client program called telnet. 
Telnet takes two parameters: the address of the server, and the port 
the server is running on. If you are running telnet on the same 
machine as the server, you can use 127.0.0.1 for the address: 


If you try to use the built-in 
Windows telnet, you might have 
problems because of the way it 
communicates with the network. 
If you install the Cygwin version 
of telnet, you should be fine. 


lOOOO is the number o£ the network fort 




Use 111.0.O.I it you re running 
the server on the same machine. 


The server has responded- 
V^u type in these responses. 


I File Edit Window Help Who’sThere? 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1. . . 

Connected to localhost. 

Escape character is ' A ] ' . 

Internet Knock-Knock Protocol Server 
Version 1.0 

Knock! Knock! 

> Who’s there? 

Oscar 

> Oscar who? 

Oscar silly question, you get a silly answer 
Connection closed by foreign host. 

> 


You will need a telnet program in order to 
connect to the server. Most systems come 
with telnet already installed. You can 
check that you have telnet by typing: 

Cygwin: 

Run the setup . exe program for 

Cygwin and search for telnet. 

Linux: 

Search for telnet in your package manager. 


telnet 

On many systems, the package manager 
is called Synaptic. 

on the command line. 

Mac: 

If you don't have telnet, you can install it 
in one of these ways: 

If you don't have telnet, you can install it 
from www.mocports.org or 
www.finkproject.org. 



468 Chapter 11 


www.it-ebooks.info 












sockets and networking 


Kwock-foiock server overview 


The server will be able to talk to several clients at once. The client 
and the server will have a structured conversation called a protocol. 
There are different protocols used on the Internet. Some of 
them are low-level protocols, like the internet protocol (IP), which 
are used to control how binary 1 s and Os are sent around the 
Internet. Other protocols are high-level protocols, like the hypertext 
transfer protocol (HTTP), which controls how web browsers talk to 
web servers. The joke server is going to use a custom high-level 
protocol called the Internet knock-knock protocol (IKKP). 


A protocmis 
a structured 
conversation. 





Server 


Telnet client 


f\ dierrt and server have 
a structured torwersaW 
tailed a prototol. 


Telnet client 

The server will talk to 
several dients at o*te. 

The client and the server will exchange messages like this: 


Telnet client 


Server: 

Knock knock! 


Client: 


Who's there? 


Oscar. 


Oscar who? 


Oscar silly question, you 
get a silly answer. 


A protocol always has a strict set of rules. As long as the client and 
the server both follow those rules, everything is fine. But if one of 
them breaks the rules, the conversation usually stops pretty abruptly. 


www.it-ebooks.info 



469 






















blab 


PLAP: how servers talk to the Internet 


When G programs need to talk to the outside world, they use 
data streams to read and write bytes. You’ve used data 
streams that are connected to the files or Standard Input and 
Output. But if you’re going to write a program to talk to the 
network, you need a new kind of data stream called a socket. 

#include <sys/socket.h> 
hstener__d is a descriptor —---^ 


You'll need -this keadev. 


ton the socket- 
* 

l-t’s an Internet sodket- 


int listener_d = socket(PF_INET, SOCKJSTREAM, 0); 

if (listener_d == -1) 

error ("Can't open socket");^ 


This is a 
pfoto£ol number. 
You dan leave it 
as O. 


Before a server can use a socket to talk to a client program, 
it needs to go through four stages that you can remember 
with the acronym BLAB: Bind, Listen, Accept, Begin. 


errov 


) 

i€ 

Bind to a port 

unttion 

Listen. 


1. Pind to a port 


A computer might need to run several server programs at 
once. It might be sending out web pages, posting email, and 
running a chat server all at the same time. To prevent the 
different conversations from getting confused, each server 
uses a different port. A port is just like a channel on a TV 
Different ports are used for different network services, just 
like different channels are used for different content. 

When a server starts up, it needs to tell the operating 
system which port it’s going to use. This is called binding 
the port. The knock-knock server is going to use port 
30000, and to bind it you’ll need two things: the socket 
descriptor and a socket name. A socket name is just a 
struct that means “Internet port 30000.” 


you ere due ci in 

ike last Napier Accept a connection. 

Beg in talking. 

Web : port GO- 
+ Email* port Z5. 
Chat port 52-2-2.. 
•Jokes: port 1>0000 



mint moiiimiiiiimiifiii 


#include <arpa/inet.h> 


You'll need tkis keadev- tov dv-eatmg livtevnet addvesses. 



These lines Create a name -for the 
port meaning internet port ZOOOO.” 


struct sockaddr_in name; 
name. sin_f amily = PF_INET; 
name.sin_port = (in_port_t)htons(30000); 
name.sin_addr.s_addr = htonl( INADDR_ANY); 
int c = bind (listener_d, (struct sockaddr *) &name, sizeof(name)); 
if (c == -1) 

error ("Can't bind to socket"); 


470 Chapter 11 


www.it-ebooks.info 








sockets and networking 


1. Listen 


If your server becomes popular, you’ll probably get lots of clients 
connecting to it at once. Would you like the clients to wait in a 
queue for a connection? The listen () system call tells the 
operating system how long you want the queue to be: 

You II use a 

if (listen(listener d, 10) == -1) 



c^ueue wth a length of l°- 


error("Can't listen"); 


Galling listen () with a queue length of 10 means that up to 
10 clients can try to connect to the server at once. They won’t all 
be immediately answered, but they’ll be able to wait. The 11th 
client will be told the server is too busy. 


3. Accept a connection 

Once you’ve bound a port and set up a listen queue, you then 
just have to.. .wait. Servers spend most of their lives waiting for 
clients to contact them. The accept () system call waits until a 
client contacts the server, and then it returns a second socket 
descriptor that you can use to hold a conversation on. 



server is “too busy. 


struct sockaddr storage client addr; 


dienk^addr v/ill store details about 
tbe dient v/bo's just tormented- 


unsigned int address_size = sizeof(client_addr); 

int connect_d = accept(listener_d, (struct sockaddr *)&client_addr, &address_size) 
if (connect d == -1) 


error("Can’t open secondary socket"); 


This new connection descriptor (connect_d) is 

the one that the server will use to... 

Begin talking. 



Why do you think the accept () system 
call creates the descriptor for a new 
socket? Why don’t servers just use the 
socket they created to listen to the port? 


you are here ► 471 


www.it-ebooks.info 







sendQ 


A socket's wot your typical data stream 


So far, data streams have all been the same. Whether you’re 
connected to files or Standard Input/Output, you’ve been able 
to use functions like fprintf () and f scanf () to talk to 
them. But sockets are a little different. A socket is two way : it 
can be used for input and output. That means it needs different 
functions to talk to it. 


If you want to output data on a socket, you can’t use This is *thc message youVe 

fprintf () . Instead, you use a function called send (): ^ SCh( j[ oVCV - network. 

A 

char *msg = "Internet Knock-Knock Protocol Server\r\nVersion 1.0\r\nKnock! Knock!\r\n> 
if (send(connect d, msg, strlen(msg), 0) == -1) 


error("send"); 



This is -the This is -the *v>essaae ' , 
sotket and its length- ' 

descriptor. 


The -final parameter is used for advanced 
ions. This dan be left as 0. 


Remember: it’s important to always check the return 
value of system calls like send () . Network errors are really 
common, and your servers will have to cope with them. 



What port should I use? 

You need to be careful when you choose a port number for a server application. There are lots 
of different servers available, and you need to make sure you don't use a port number that's 
normally used for some other program. On Cygwin and most Unix-style machines, you'll find 
a file called Aetc/services that lists the ports used by most of the common servers. When you 
choose a port, make sure there isn't another application that already uses the same one. 

Port numbers can be between 0 and 65535, and you need to decide whether you want to 
use a low number (< 1024) or a high one. Port numbers that are lower than 1024 are usually 
only available to the superuser or administrator on most systems. This is because the low port 
numbers are reserved for well-known services, like web servers and email servers. Operating 
systems restrict these ports to administrators only, to prevent ordinary users from starting 
unwanted services. 

Most of the time, you'll probably want to use a port number greater than 1024. 


472 Chapter 11 


www.it-ebooks.info 






sockets and networking 





J W W ■ ■ -w ■ • 


.The mtlwdes ave removed 
.k -bo save spate- 

int main(int argc, char *argv[]) 
{ 


This server generates random advice for any client that connects to it, 
but it's not quite complete. You need to fill in the missing system calls. 
Also, this version of the code will send back a single piece of advice 
and then end. Part of the code needs to be inside a loop. Which part? 


char *advice[] = { 

"Take smaller bites\r\n", 

"Go for the tight jeans. No they do NOT make you look fat.\r\n", 

"One word: inappropriate\r\n", 

"Just for today, be honest. Tell your boss what you *really* think\r\n", 
"You might want to rethink that haircut\r\n" 

}; 

int listener d = (PF INET, SOCK STREAM, Ob¬ 


struct sockaddr_in name; 

name.sin_family = PF_INET; 

name.sin_port = (in_port_t)htons(30000); 

name.sin_addr.s_addr = htonl(INADDR_ANY); 

(listener_d, (struct sockaddr *) &name, sizeof(name)); 

(listener_d, 10); 
puts("Waiting for connection"); 


struct sockaddr_storage client_addr; 

unsigned int address_size = sizeof(client_addr); 

int connect_d = (listener_d, (struct sockaddr *)&client_addr, &address_size); 

char *msg = advice[rand() % 5]; 


(connect_d, msg, strlen(msg), 0); 
close(connect_d); 

return 0; 

} 


And for a bonus point, if you add in the missing ^include statements, the program will work. But what has 
the programmer missed out? Hint: look at the system calls. 

The programmer has forgotten to 


you are here ► 473 


www.it-ebooks.info 












code written 



This server generates random advice for any client that connects to it, 
but it's not quite complete. You needed to fill in the missing system calls. 
Also, this version of the code will send back a single piece of advice and 
then end. Part of the code needs to be inside a loop. Which part? 


int main(int argc, char *argv[]) 


{ 


char *advice[] = { 

"Take smaller bites\r\n", 

"Go for the tight jeans. No they do NOT make you look fat.\r\n", 

"One word: inappropriate\r\n", 

"Just for today, be honest. Tell your boss what you *really* think\r\n", 
"You might want to rethink that haircut\r\n" 

}; 

int listener_d = sodket (PF INET, SOCK STREAM, 0) ; Create 3 so£In¬ 


struct sockaddr_in name; 
name.sin_family = PF_INET; 
name.sin_port = (in_port_t)htons(30000); 
name.sin_addr.s_addr = htonl(INADDR_ANY); 

bind (listener d, (struct sockaddr *) &name, sizeof(name)); 


Bind the sotkei -to port lOOOO. 


Set *to the listen <\ueue depth to I O. 


listen . (listener_d, 10); ^ 

puts("Waiting for connection"); 

y/bile (I) { ^— You fieed to loop tbe addept/begin talking sedtion. 

struct sockaddr_storage client_addr; 
unsigned int address_size = sizeof(client_addr); 
int connect_d = addept (listener_d, (struct sockaddr *)&client_addr, &address_size); 

char *msg = advice [rand () % 5] ; ^ Aucfl a Conation Ao* a client 


} 


send (connect_d, msg, strlen(msg), 0) ; 

close(connect_d); 


Begifi talking to tbe dlient* 


return 0; 


And for a bonus point, if you add in the missing ^include statements, the program will work. But what has 
the programmer missed out? Hint: look at the system calls. , a . i l- j \-jl~ 

r _ You skould always tketk it sodket bmd, l.ste«, 

The programmer has forgotten to dhedk +or evrors. ^ .addept, ov sefid vetuv-n -I. 


474 Chapter 11 


www.it-ebooks.info 














sockets and networking 



Let’s compile the advice server and see what happens. 


File Edit Window Help I’mTheServer 


> gcc advice_server.c -o advice_server 

> ./advice_server 
Waiting for connection 


Then, while the server is still running, open a second console and 
connect to the server using telnet a couple of times. 


File Edit Window Help I’mTelnet 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1... 

Connected to localhost. 

Escape character is ' A ] '. 

One word: inappropriate 
Connection closed by foreign host. 

> telnet 127.0.0.1 30000 
Trying 127.0.0.1... 

Connected to localhost. 

Escape character is ' A ] '. 

You might want to rethink that haircut 
Connection closed by foreign host. 

> 


That’s great, the server works. Here, you’re using 127.0.0.1 as the IP 
address, because the client is running on the same machine as the 
server. But you could have connected to the server from anywhere 
on the network and we’d have gotten the same response. 



you are here ► 


475 









starting problems 


Sometimes the server doesn't start properly 



o O 


If I start the server, 
then run the client 
one time, it works... 


Server 

Console 


[File Edit Window Help I’mTheServer 


> ./advice_server 
Waiting for connection 



Clieivfc £ohSole 


The server s started- 
The server sends batk a response- 



File Edit Window Help I’mTheClient 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1.. . 

Connected to localhost. 

Escape character is ’ A ]'. 

One word: inappropriate 
Connection closed by foreign host 

> 


Server Console 


...but then, if I stop the 
server and restart it real 
quick, the client can't get 
a response anymore! 


O o 



Hitting 

Ctrl-C 

kills the 
server. 


> ./advice_server 
Waiting for connection 
A C 

> ./advice_server 
Waiting for connection 


Client Console 


The server s restarted- 




File Edit Window Help I’mTheClient 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1... 

telnet: connect to address 127.0.0.1: Connection refused 
telnet: Unable to connect to remote host 

> 1 


The server looks like it’s starting correctly the second time, 
but the client can’t get any response from it. Why is that? 

Remember that the code was written without any error 
checking. Let’s add a little error check into the code and 
see if we can figure out what’s happening. 


WTF??I?I?? 

• • • • • 

t 

Where’s The Feedback???? 


476 Chapter 11 


www.it-ebooks.info 







sockets and networking 


Why your mom always told you to check for errors 

If you add an error check on the line that binds the socket to a 
port: 

if (bind (listener_d, (struct sockaddr *) &name, sizeof(name)) == -1) 

error ("Can't bind the port"); ^ is ta || m3 evvov Wtion you wrote a *hile 

badk. It will display the dause ot the error and ex.it 

Then you’ll get a little more information from the server if it is 
stopped and restarted quickly: 


Trom *th*is... 

V 


..."bo -this 

f 


The bind tails/ 




File Edit Window Help I’mTheServer 


> ./advice_server 
Waiting for connection 
A C 

> ./advice_server 

Can’t bind the port: Address already in use 

> 


If the server has responded to a client and then gets stopped and 
restarted, the call to the bind system call fails. But because the 
original version of the program never checked for errors, the rest 
of the server code ran even though it couldn’t use the server port. 


Pound ports are sticky 

When you bind a socket to a port, the operating system will 
prevent anything else from rebinding to it for the next 30 
seconds or so, and that includes the program that bound the port 
in the first place. To get around the problem, you just need to set 
an option on the socket before you bind it: 

You need an int variable to store the option- 
//'■' Setting it to I means "Yes, reuse the fort- 

int reuse = 1; 

if (setsockopt(listener_d, SOL_SOCKET, SO_REUSEADDR, 

error ("Can’t set the reuse option on the socket’’); 


This code makes the socket reuse the port when it’s bound. 
That means you can stop and restart the server and there will be 
no errors when you bind the port a second time. 


ALWAYS check lor 

errors on system calls. 


(char *)&reuse, sizeof(int)) 

This makes -the socket reuse the por-t 




you are here ► 477 


www.it-ebooks.info 








recvQ 


Reading from the client 


You’ve learned how to send data to the client, but what about reading from the 
client? In the same way that sockets have a special send () function to write 
data, they also have a recv () function to read data. 

Cbytes read> = recv(<descriptor>, <buffer>, Cbytes to read>, 0); 


If someone types in a line of text into a client and hits return, the recv () 
function stores the text into a character array like this: 


W 


h 


o 


s 


h 


\r \n 


There are a few things to remember: 


medvO will metumn “the 
value l^h because theme 
ame 1 ^ dhamadtems sent 
tmom *tbe dlient- 


o 

o 

o 

o 


The characters are not terminated with a \0 character. 

When someone types text in telnet, the string always ends \r\n. 

The recv() will return the number of characters, or -1 if there’s an error, or 
0 if the client has closed the connection. 

You’re not guaranteed to receive all the characters in a single call to recv(). 


This last point is important. It means you might have to call recv () more 
than once: 


h 


\r \n 




You mi<^ht need to 
v-edvO a -few -times “to 
yt all the Sadlers. 


That means recv () can be tricky to use. It’s best to wrap recv () in a 
function that stores a simple \ 0-terminated string in the array it’s given. 
Something like this: 

int read_in(int socket, char *buf, int len) 

{ 


This reads all -the tharatiers 
wvfcil it reathes V- 


} 


char *s = but; 
int slen = len; 

int c = recv(socket, s, slen, 0); 
while ( (c > 0) && (s[c—1] != '\n')) 

s += c; slen -= c; 
c = recvfsocket, s, slen, 0); 


{ 


} 


if (c < 0) 
return c 


. ^ 


Y\ 


else if (c == 0) 
buf[0] = ' \ 0 ' ; 


dase theme’s an emmom 

l^oihi *3 mead; send 
- badk a» empty stminj. 


else 

s[c-1]= 1 \0 1 
return len - 



slen; 


Replade the 'V ^ ^ 

dhamadtem with a K \0 


f^eep v-eadihj until theme ame no morne 
dhamadtems om you meadh W 



This is one way of 
simplifying recv (), 
but could you do 
better? Why not write 
your own version of 
read in () and let US 
know at headfirstlabs.com. 




478 Chapter 11 


www.it-ebooks.info 











































sockets and networking 


% Reap9-BaKe 




Here are some other functions that are useful when you are 
writing a server. Do you understand how each of them works? 


Pisplay the error. 


void error(char *msg) 

< 

fprintf(stderr, "%s: %s\n", msg, strerror (errno)); 
exit (1) ; stop the pv-ogra*. 


Yo*‘vc used this em>v -fundtion 
a LOT in this book. 




Pont ta II this -function i-C you 
want the program to keep running 


Create an Internet streaming socket- 


Yes, reuse the socket (so you can 
restart the server without problems). 


int open_listener_socket() 

{ 

int s = socket(PF_INET, SOCK_STREAM, 0); 
if (s == -1) 

error("Can't open socket"); 
return s; 


void bind_to_port(int socket, int port) 

{ 

struct sockaddr in name; name is Internet port ZOOOO. 

\ name.sin_family = PF INET; 

\ name.sin_port = (in_port_t)htons(30000); 

V name.sin_addr.s_addr = htonl(INADDR ANY) ; 

^sLnt reuse = 1; 

if (setsockopt(socket, SOL_SOCKET, SO REUSEADDR, (char *)&reuse, sizeof(int)) 
error("Can’t set the reuse option on the socket"); 
int c = bind (socket, (struct sockaddr *) &name, sizeof(name)); 
if (c == -1) 

error("Can’t bind to socket"); 


== - 1 ) 

£jrab port ZOOOO. 


int say (int socket, char ^s)^ " Send a string to a client- 

{ Pon t tall errorO i-f there's a problem. 

int result = send (socket, s, strlen (s) , 0) ; You wont want to stop the server i*f 

if (result == -1) ^ there's just a problem with one client- 

fprintf(stderr, "%s: %s\n", "Error talking to the client", strerror(errno)); 
return result; 


Now that you have a set of server functions, let’s try them out... 


you are here ► 479 


www.it-ebooks.info 

















server unwritten 




Now it’s time to write the code for the Internet knock-knock server. You’re going to write a 
little more code than usual, but you’ll be able to use the ready-bake code from the previous 
page. Here’s the start of the program. 



_ _The veady-bake -functions -fvom the previous pa$e 30 here- 


This will 
store the 
main listen 
socket -for 
the se\rvev*. 



480 Chapter 11 


www.it-ebooks.info 









sockets and networking 


Now it’s over to you to write the main function. You’ll need to create a new server socket and store it in listener_d. 
The socket will be bound to port 30000, and the queue depth should be set to 10. Once that’s done, you need to write 
code that works like this: 



* 

f 

(say, “oscar” 

1 


) Chech that -they say, “oscar ioho?’j 

\ 

\ 


\ 


Say, oscar si\\y question 
you yet a sv\\y ansioer” 



i 


I 

) 

I 

I 


I 



Try to check error codes and if the user says the wrong thing, just send an error message, close the connection, and 
then wait for another client. 

Good luck! 


you are here ► 


481 


www.it-ebooks.info 

































server written 



Solution 


Now it’s time to write the code for the Internet knock-knock server. You were to write a little 
more code than usual, but you’ll be able to use the ready-bake code from the previous page. 
Here’s the start of the program. 



he ready-bake functions -from *lbe previous pa^e 50 here- 


This will 
s-fcore the 
main lis-fcew 
socket -for 
the server. 



482 Chapter 11 


www.it-ebooks.info 









sockets and networking 


This is the kind of code you should have written. Is yours similar? It doesn’t matter if the code is exactly the same. The 
important thing is that your code can tell the joke in the right way, and cope with errors. 

int main(int arjd, dhar ^arjvCJ) 


{ 


i-P (datdh_sijnaK£|£jlNTi handle__shutdown) -I) 
ev-v-ov-( u Cair/*t set the interrupt handler”); ^—This will daII handle_shutdownO i-P Ctrl-C is hit- 

listener__d =• open_Jistener__sodketO; 

bind_to__portOistener__d> ?>0000)' } Create a sodket on port ZOOOO. 
i-P OistenOistener__d, 10) =■=■ -I) ^— Set the listen-jueue length to I O. 

error( u Ca^t listed); 
strudt sodkaddr__storaje dlient__addr; 
unsigned int address__siz^ =• sizjeo-P(dlient_addr); 
putsCWaitinj -for donnedtion”); 

dhav- bu-fC2-‘S‘SJ, , £ ov . a tow et-tioin. 

while (I) { ^ 

*mt donnedt_d — addeptOistener__d, (strudt sodkaddr *)(dlient_addr, (address__si;ze); 
i-P (donnedt_d -I) 

error( u Ca»t open sedondary sodket”); £e»d data ^ ^ fi j iCht 

i-P (say(donnedt_d> ^ 

internet ^nodk—^snodk Protodol £erver\r\n\/ersion I .O\r\n^nodkf ^nodk|\r\n> w ) /— —I) { 

read_jn(donnedt_d> bu-P, siz^o-Pfbu-P)); ^-«* Read data -Pror* the dliev>t- 

i-P (strndasedmpOWho^s there?”, bu-P, 12-)) 
say(donnedt__d, w ybu should say Who’s there?’!”); <;— Chedking the user s answers. 

else { 

i-P (say(donnedt_d, w 0sdar\r\n> w ) -I) { 
read__in(donnedt_d, bu-P, siz^o-pfbu-p)); 
i-P (strndasedmp( u 0sdar who?”, bu-P, 10)) 
say(donnedt_d, W Y® U should say 'Osdar who?’!\r\n”); 
else 

say(donnedt_d, u 0sdar silly question, you jet a silly answer\r\n”),‘ 


} 


} 


} 


} 


dlose(donnedt d)‘ Close ^ sedondary sodket we used £>r the donversaW 

} ° 
return Oj 


you are here ► 


483 


www.it-ebooks.info 






test drive 



Now that you’ve written the knock-knock server, it’s 
time to compile it and fire it up. 

Scv-vcv- Console 



File Edit Window Help I mTheServer 


> gcc ikkp_server.c -o ikkp_server 

> ./ikkp_server 
Waiting for connection 


The server’s waiting for a connection, so 
open a separate console and connect to it 
with telnet: 


Clieirfc Console 


File Edit Window Help I’mTheClient 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1. . . 

Connected to localhost. 

Escape character is ' A ]'. 

Internet Knock-Knock Protocol Server 
Version 1.0 

Knock! Knock! 

> Who's there? 

Oscar 

> Oscar who? 

Oscar silly question, you get a silly answer 
Connection closed by foreign host. 


The server can tell 
you a joke, but what 
happens if you break 
the protocol and 
send back an invalid 
response? 

Clieirt £oksoIc ^ ^ 


File Edit Window Help I’mTheClient 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1. . . 

Connected to localhost. 

Escape character is ,A ]'. 

Internet Knock-Knock Protocol Server 
Version 1.0 

Knock! Knock! 

> Come in 

You should say 'Who's there?'!Connection closed by foreign host. 

> 


The server is able to validate the data you send it and 
close the connection immediately Once you’re done 
running the server, you can switch back to the server 
window and hit Gtrl-G to close it down neatly It even 
sends you a farewell message: 

Sev-vev- Console 


| File Edit Window Help I’mTheServeF 


> gcc ikkp_server.c -o ikkp_server 

> ./ikkp_server 
Waiting for connection 
A CBye! 

> 


That’s great! The server does everything you need it to do. 


Or does it? 

484 Chapter 11 


www.it-ebooks.info 













sockets and networking 


The server can only talk to one person at a time 

There’s a problem with the current server code. Imagine 
someone connects to it and he is a little slow with his responses: 


The server is ruling 

ov\ a out ok 

"the /K-terKe-t. 


| File Edit Window Help I’mTheClient" 


> telnet knockknockster.com 30000 
Trying knockknockster.com... 
Connected to localhost. 

Escape character is ,A ]’. 

Internet Knock-Knock Protocol Server 
Version 1.0 
Knock! Knock! 

> Who's there? 

Oscar 

> 


Oh, wait! Oscar! Oh, I know 
this one... Oh, it's so funny... It's... 
Oscar...Oscar who 
no, wait...don't tell 


Then, if someone else tries to get 
through to the server, she can’t; it’s busy 
with the first guy: 

| File Edit Window Help 1’mAnotherClient 


> telnet knockknockster.com 30000 
Trying knockknockster.com... 
Connected to localhost. 

Escape character is 1A ] f . 


The problem is that the server is still busy talking to the first 
guy The main server socket will keep the client waiting until the 
server calls the accept () system call again. But because of the 
guy already connected, it will be some time before that happens. 






The server can’t respond to the second user, because it is busy dealing with the 
first. What have you learned that might help you deal with both clients at once ? 


you are here ► 485 


www.it-ebooks.info 











different clients, different sockets 


You caw forkO a process for each client 


When the clients connect to the server, they start to have a 
conversation on a separate, newly created socket. That means the 
main server socket is free to go and find another client. So let’s do 
that. 


When a client connects, you can f ork () a separate child process 
to deal with the conversation between the server and the client. 


Child - 

process 




O 


Parent process 



Client 


While the client is talking to the child process, the server’s parent 
process can go connect to the next client. 



The parent and child use different sockets 

One thing to bear in mind is that the parent server process will 
only need to use the main listener socket. That’s because the 
main listener socket is the one that’s used to accept () new 
connections. On the other hand, the child process will only ever 
need to deal with the secondary socket that gets created by the 
accept () call. That means once the parent has forked the 
child, the parent can close the secondary socket and the child can 
close the main listener socket. 


A-fter -forking the 
£kild, the parent can 
£lose this socket- 


close(connect_d); 
close(listener d); 


Ontc -the dhild yb 
. tveatedj it tan 






tfierejare no 

Dumb Questions 

% If I create a new process for 
each client, what happens if hundreds 
of clients connect? Will my machine 
create hundreds of processes? 

Yes. If you think your server will get 
a lot of clients, you need to control how 
many processes you create. The child 
can signal you when it’s finished with a 
client, and you can use that to maintain a 
count of current child processes. 


486 Chapter 11 


www.it-ebooks.info 
















sockets and networking 


r / r 



This is a version of the server code that has been changed to 
fork a separate child process to talk to each client...except it's 
not quite finished. See if you can figure out the missing pieces 
of code. 


while (1) { 

int connect_d = accept(listener_d, (struct sockaddr *)&client_addr, 

&address_size); 

if (connect_d == -1) 

error("Can't open secondary socket"); 


if (.) { 

close ( ) ; 

if (say(connect_d, 

"Internet Knock-Knock Protocol Server\r\nVersion 1.0\r\nKnock! Knock!\r\n> ") 
!= - 1 ) { 

read_in(connect_d, buf, sizeof(buf)); 

if (strncasecmp("Who's there?", buf, 12)) 

say(connect_d, "You should say 'Who's there?'!"); 
else { 

if (say(connect_d, "Oscar\r\n> ") != -1) { 

read_in(connect_d, buf, sizeof(buf)); 

if (strncasecmp("Oscar who?", buf, 10)) 

say(connect_d, "You should say 'Oscar who?'!\r\n"); 
else 

say(connect_d, "Oscar silly question, you get a silly answer\r\n"); 

} 

} 

} 

close( ); 

.*=—- Mai should Ihe dhild do v/hen Ihe toinvevsatioh is done? 

} 

close ( ) ; 


you are here ► 487 


www.it-ebooks.info 













code written 



Solution 


This is a version of the server code that has been changed to 
fork a separate child process to talk to each client—except 
it's not quite finished. You were to figure out the missing 
pieces of code. 


while (1) { 

int connect_d = accept(listener_d, (struct sockaddr *)&client_addr, 

&address_size); 

if (connect_d == -1) 

error("Can't open secondary socket"); 

This dveales -the dhild pvodess, and you know that i-f 
•the -fov-kO dal I returns O, you must be in the dhild- 

close (. Iistener_d ); |n the dhild, you need to dlose __ The dhild Will use only the donnedt_d 

if (say (connect d, ^-be main listener sodket- sodket to talk to the dlient- 

"Internet Knock-Knock Protocol Server\r\nVersion 1.0\r\nKnock! Knock!\r\n> ") 

!= - 1 ) { 

read in(connect d, buf, sizeof (buf)); 



if (strncasecmp("Who's there?", buf, 12)) 

say(connect_d, "You should say 'Who's there?'!"); 
else { 

if (say(connect_d, "Oscar\r\n> ") != -1) { 

read in(connect d, buf, sizeof(buf)); 


if (strncasecmp("Oscar who?", buf, 10)) 

say(connect_d, "You should say 'Oscar who?'!\r\n"); 
else 

say(connect_d, "Oscar silly question, you get a silly answer\r\n"); 

^ Out -the donversation's over, -the dhild 
} Uy\ dlose the sodket to the dlient- 

1 4 

close ( __ donnedt_d .); 

C*ii(0k .' Out the dhild prodess has -finished talking, it should e*it- 
j That will prevent it -from -falling into the r*din server loop. 

close (__ donnedt^d .) ; 

} 


488 Chapter 11 


www.it-ebooks.info 



















sockets and networking 



Let’s try the modified version of the server. You can 
compile and run it in the same way: 

Server fcoirvsole 



File Edit Window Help I’mTheServer 


> gcc ikkp_server.c -o ikkp_server 

> ./ikkp_server 
Waiting for connection 


If you open a separate console and start telnet, you 
can connect, just like you did before: 

Clieivfc £o»sol 

Everything seems the same, but if you leave the client 
running with the joke half-told, you should be able to 
see what’s changed: 


| File Edit Window Help I’mTheClient I 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1... 

Connected to localhost. 

Escape character is ,A ] '. 

Internet Knock-Knock Protocol Server 
Version 1.0 

Knock! Knock! 

> Who's there? 

Oscar 

> 


If you open a third console, you will see that there are now two 
processes for the server: one for the parent and one for the child: 


The fs shows 

running ^rotcsses *n 
Uni* and Cyywin. 

The paveirfc process / ^ 



File Edit Window Help I’rriJustCurioiis 

> ps 


PID TTY 

TIME CMD 

14324 ttys002 

0:00.00 ./ikkp server 

14412 ttys002 
> 

0:00.00 ./ikkp server ^ 


The dhild pvotess 



That means you can connect, even while the first 
client is still talking to the server: 

Another dierrfc Lonso 

Now that you’ve built an Internet server, 
let’s go look at what it takes to build a 
client, by writing something that can 
read from the Web. 


| File Edit Window Help I’mAnotherClient | 


> telnet 127.0.0.1 30000 
Trying 127.0.0.1... 

Connected to localhost. 

Escape character is ' A ] '. 

Internet Knock-Knock Protocol Server 
Version 1.0 

Knock! Knock! 

> 


you are here ► 489 


www.it-ebooks.info 













the client 


Writing a web client 


What if you want to write your own client program? Is it 
really that different from a server? To see the similarities 
and differences, you’re going to write a web client for the 
hypertext transfer protocol (HTTP). 

HTTP is a lot like the Internet knock-knock protocol you 
coded earlier. All protocols are structured conversations. Every 
time a web client and server talk, they say the same kind of 
things. Open telnet and see how to download 
http:// en.wikipedia.org/wiki / O’Reilly _Media. 



Most web servers run on fort QO. 


This is the numeric 
address o-P Wikipedia. 

You wight get a slightly ^ 
different address when 
you try it- 

You need to type $ 
in these two lines. 


And then you need to 
hit return and leave a 
blank 


R7 


me. 


The server -f irst 
responds with some 
e%tra details about 
the web pa$e- 




> telnet en.wikipedia.org 80 
Trying 91.198.174.225... 

Connected to wikipedia-lb.esams.wikimedia.org. 

Escape character is ,A ] ’. r 

GET /wiki/O' Reilly_Media http/1.1 ^ - This is the path that -follows 

Host: en. wikipedia. org the hostname in the URL. 

http/1 .0 200 OK I* Http//.I, you need bo say 

Server: Apache what hostname you are using. 

• • • 

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtmll/DTD/xhtmll-transitional.dtd"> 

<html lang=en" dir="ltr" class"client-nojs" 
xmlns="http://www.w3.org/1999/xhtml"> 

<head> 

<title>0'Reilly Media - Wikipedia, the free encyclopedia</title> 

^ A*d this is the HTML -for the web page- 


When your program connects to the web server, it will need to 

send at least three things: W- Most web clients actually send a lot more information, 

but you II just send the minimum Amount- 

A GET command 

GET /wiki/O'Reilly Media http/1.1 


o The hostname 


Host: en.wikipedia.org 


o A blank line 


But before you can send any data at all to the 
server, you need to make a connection from 
the client. How do you do that? 


490 Chapter 11 


www.it-ebooks.info 





sockets and networking 


Clients are in charge 

Clients and servers communicate using sockets, but the way 
that each gets hold of a socket is a little different. You’ve 

already seen that 

servers use the BLAB sequence: 

o 

Bind a port. 

o 

Listen. 

o 

Accept a conversation. 

o 

Begin talking. 


A server spends most of its life waiting for a fresh connection 
from a client. Until a client connects, a server really can’t 
do anything. Clients don’t have that problem. A client can 
connect and start talking to a server whenever it likes. This is 
the sequence for a client : 


o 

o 


Connect to a remote port. 
Begin talking. 



Remote ports and IP addresses 

When a server connects to the network, it just has to decide 
which port it’s going to use. But clients need to know a little 
more: they need to know the port of the remote server, but 
they also need to know its internet protocol (IP) address: 

208.201.239.100 <-Addresses w'rth tour digits are in IP version \ -format- Most 

will eventually be reflated with longer version addresses. 

Internet addresses are kind of hard to remember, which is 
why most of the time human beings use domain names. A 
domain name is just an easier-to-remember piece of text like: 

www. oreilly. com 


Even though human beings prefer domain names, the actual 
packets of information that flow across the network only use 
the numeric IP address. 


you are here ► 


491 


www.it-ebooks.info 







client sockets 


Create a socket for an IP address 


Once your client knows the address and port number of the 
server, it can create a client socket. Client sockets and server 
sockets are created the same way: 

int s = socket (PF_INET, SOCKJSTREAM, 0); 

The difference between client and server code is what they do 
with sockets once they’re created. A server will bind the socket to 
a local port, but a client will connect the socket to a remote port 


To save spade, the espies won't indUe the 
error dhedk here- But in youv dode, always dhedk 

-for errors. 


These lines 

Create a socket 
address -for 

ZOG.lOLZ11.lOO 

Oh port GO. 


struct sockaddr_in si; 
memset(&si, 0, sizeof(si)); 
si.sin_f amily = PF_INET; 
si.sin_addr.s_addr = inet_addr("208.201.239.100") 
si.sin_j?ort = htons(80); 

connect(s, (struct sockaddr *) &si, sizeof(si)) 


Client 



This line 
donnetts -the 

socket to -the 
remote fort 


Server 10GX0\XV\\00 


492 


Hello? I don't want 
to know how to connect a 
socket to an IP address. 
I'm actually human...I 
want to connect to a real 
domain name. 


The above code works only for 
numeric IP addresses. 

To connect a socket to a remote domain name, 
you’ll need a function called getaddrinf o () . 


Chapter 11 


www.it-ebooks.info 












sockets and networking 


getaddriwfoO gets addresses for domains 


The domain name system is a huge address book. It’s a way of 
converting a domain name like www.oreilly.com into the kinds 
of numeric IP addresses that computers need to address the 
packets of information they send across the network. 

Create a socket for a domain name 

Most of the time, you’ll want your client code to use the DNS 
system to create sockets. That way, your users won’t have to 
look up the IP addresses themselves. To use DNS, you need to 
construct your client sockets in a slightly different way: 


The DNS is a (y^an-tit address book. 

'V 



Domain name 

Address | 

en. Wikipedia, org 

91.198.174.S25 

www.oreilly.com 

208.201.239.100 

www. or eilly. com 

208.201.239.101 


Some lav-^e sites have 
several IP addresses. 


4 


Computers heed IP 

addresses to Create 
network packets. 


*. nplllrf . . naMV , ... z-—^ Vox'll reed to mdlude this header 

#include <netdb.h> ^ ^e yiaddrmtoO WW 


struct addrinfo *res; 
struct addrinfo hints; 

This Creates a memset (&hints, 0, sizeof (hints)) ; 

name resource hints . ai_family = PF_UNSPEC; 

-for port $0 on hints . ai_socktype = SOCK_STREAM; 

www.oreilly.eom- getaddrinfo ("www.oreilly.com" , "80", 


^etaddrirvfoO expects 

the port to be a string. 
&hints, &res); 


The getaddrinfo () constructs a new data structure on the 
heap called a naming resource. The naming resource represents 
a port on a server with a given domain name. Hidden away 
inside the naming resource is the IP address that the computer 
will need. Sometimes very large domains can have several IP 
addresses, but the code here will simply pick one of them. You 
can then use the naming resource to create a socket. 

int s = socket(res->ai_family, res->ai_socktype, 

res->aij?rotocol); 


now you can create the socket 
us,h 9 the naming resource. 


* 


Finally, you can connect to the remote socket. Because the 
naming resource was created on the heap, you’ll need to tidy it 
away with a function called f reeaddrinf o (): 


res->ai__addrlen is the size 
o£ the address in memory. 




res >ai addr is the connect (s, res->ai_addr, res->ai_addrlen); 

freeaddrinfo(res); ^ 


This will Connect to 
the remote socket- 


host and port- 

Once you’ve connected a socket to a remote port, you can 
read and write to it using the same reev () and send () 
functions you used for the server. That means you should have 
enough information now to write a web client... 


you've tometied, vou da* delete 
the address data with +reeaddvimfoO. 


you are here ► 


493 


www.it-ebooks.info 












magnets muddled 


// -3 


L 


\ Code Magnets 


Here is the code for a web client that will download the contents of a page from Wikipedia 
and display it on the screen. The web page will be passed as an argument to the program. 
Think carefully about the data you need to send to a web server running HTTP. 

^include <stdio.h> 

^include <string.h> 

^include <errno.h> 

^include <stdlib.h> 

^include <sys/socket.h> 

^include <arpa/inet.h> 

^include <unistd.h> 

^include <netdb.h> 


void error (char *msg) 

{ 

fprintf(stderr, "%s: %s\n", msg, strerror(errno)); 
exit(1); 

} 

int open_socket(char *host, char *port) 

{ 

struct addrinfo *res; 

struct addrinfo hints; 

memset(&hints, 0, sizeof (hints)); 

hints.ai_family = PF_UNSPEC; 

hints.ai_socktype = SOCK_STREAM; 

if (getaddrinfo(host, port, &hints, &res) == -1) 
error("Can't resolve the address"); 
int d_sock = socket(res->ai_family, res->ai_socktype, 

res->ai_protocol); 

if (d_sock == -1) 

error("Can't open socket"); 

int c = connect(d sock, res->ai_addr, res->ai_addrlen); 
freeaddrinfo (res) ; 
if (c == -1) 

error("Can't connect to socket"); 
return d sock; 


494 Chapter 11 


www.it-ebooks.info 








sockets and networking 


int say(int socket, char *s) 

{ 

int result = send(socket, s, strlen(s), 0); 
if (result == -1) 

fprintf (stderr, "%s: %s\n", "Error talking to the server", 
strerror(errno)); 

return result; 

} 

int main(int argc, char *argv[]) 

{ 

int d_sock; 

dsock = ; 

char buf[255]; 

sprintf(buf, , argv[l]); 

say(d_sock, buf); 

say(d_sock, ); 

char rec[256]; 

int bytesRcvd = recv(d_sock, rec, 255, 0) ; 
while (bytesRcvd) { 
if (bytesRcvd == -1) 

error("Can’t read from server"); 

rec[bytesRcvd] = ; 

printf("%s", rec); 

bytesRcvd = recv(d_sock, rec, 255, 0); 

} 


r 

return 0; 

} 


"GET /wiki/%s http/1.l\r\n" 


"Host: en.wikipedia.org\r\n" 



you are here ► 495 


www.it-ebooks.info 


















magnets unmuddled 


Code Magnets Solution 

Here is the code for a web client that will download the contents of a page from Wikipedia 
and display it on the screen. The web page will be passed as an argument to the program. 
You were to think carefully about the data you need to send to a web server running HTTP. 

^include <stdio.h> 

^include <string.h> 

^include <errno.h> 

^include <stdlib.h> 

^include <sys/socket.h> 

^include <arpa/inet.h> 

^include <unistd.h> 

^include <netdb.h> 

void error (char *msg) 

{ 

fprintf(stderr, "%s: %s\n", msg, strerror(errno)); 
exit(1); 

} 

int open_socket(char *host, char *port) 

{ 

struct addrinfo *res; 
struct addrinfo hints; 
memset(&hints, 0, sizeof (hints)); 
hints.ai family = PF_UNSPEC; 
hints.ai_socktype = SOCK_STREAM; 

if (getaddrinfo(host, port, &hints, &res) == -1) 
error("Can’t resolve the address"); 
int d_sock = socket(res->ai_family, res->ai_socktype, 

res->ai_protocol); 

if (d_sock — -1) 

error("Can’t open socket"); 

int c = connect(d_sock, res->ai_addr, res->ai_addrlen); 
freeaddrinfo (res) ; 
if (c == -1) 

error("Can’t connect to socket"); 
return d_sock; 

} 

496 Chapter 11 



www.it-ebooks.info 








sockets and networking 


int say(int socket, char *s) 

{ 

int result = send(socket, s, strlen(s), 0); 
if (result == -1) 

fprintf (stderr, "%s: %s\n", "Error talking to the server", 
strerror(errno)); 

return result; 

} 


int main(int argc, char *argv[]) 


{ 


int d sock; 



int bytesRcvd = recv(d_sock, rec, 255, 0) ; 
while (bytesRcvd) { 
if (bytesRcvd == -1) 

error ("Can’t read from server"); , v , , , C rurv-av/ Jc 

Add a \0 -to i\* tnd o\ tke away o* 

k 



rec[bytesRcvd] = 
printf("%s", rec); 

bytesRcvd = recv(d sock, rec, 255, 0) ; 


a TP vnc ~ ' 

thavactev-s to r»ake it a ^vo^cv- s 


return 0; 




"Host: en.wikipedia.org\r\n" 


you are here ► 497 


www.it-ebooks.info 



























test drive 



If you compile and run the web client, you make it 
download a page from Wikipedia like this: 

You II have bo veplade any spades with undevsdove (_) dhavadtev-s. 

File Edit Window Help I’mTheWebClient 


> gcc wiki_client.c -o wiki_client 

> ./wiki_client "O’Reilly_Media" <^= 

HTTP/1.0 200 OK 

Date: Fri, 06 Jan 2012 20:30:15 GMT 
Server: Apache 
• • • 

Connection: close 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 

"http://www.w3.org/TR/xhtmll/DTD/xhtmll-transitional.dtd"> 

<html lang="en" dir="ltr" class="client-nojs" xmlns="http://www.w3.org/1999/xhtml"> 
<head> 

<title>0’Reilly Media - Wikipedia, the free encyclopedia</title> 

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> 

yh 

Then you gel the Contents ot the web page -From Wikipedia. 


At the beginning, you'll get the vesponse HEADERS. These 
tell you things about the sev-vev- and the web page- 


It works! 

The client took the name of the page from the 
command line and then connected to Wikipedia to 
download the page. Because it’s constructing the path 
to the file, you need to make sure that the you replace 
any spaces in the page name with underscore (_) 
characters. 



-G<9 Off Piste - 

Why not update the code to automatically replace characters like spaces for 
you? For more details on how to replace characters for web addresses, see: 

http://www. w3schools. com/tags/ref_urlencode.asp 


498 Chapter 11 


www.it-ebooks.info 












sockets and networking 


there i are no 

Dumb Questions 



Should I create sockets with IP addresses or domain names? 


Most of the time, you’ll want to use domain names. They’re easier to remember, and 
occasionally some servers will change their numeric addresses but keep the same domain 
names. 



So, do I even need to know how to connect to a numeric address? 


Yes. If the server you are connecting to is not registered in the domain name system, 
such as machines on your home network, then you will need to know how to connect by IP. 



Can I use getaddrinfo () with a numeric address? 


Yes, you can. But if you know that the address you are using is a numeric IP, the first 
version of the client socket code is simpler. 



BULLET POINTS 


■ A protocol is a structured 
conversation. 


■ You write data to a socket with 

send() . 


■ Servers connect to local ports. 

■ Clients connect to remote ports. 

■ Clients and servers both use sockets 
to communicate. 


You read data from a socket with 

recv() . 

HTTP is the protocol used on the 
Web. 


you are here ► 


499 


www.it-ebooks.info 








c toolbox 



Your C Toolbox 


You’ve got Chapter 11 under 
your belt, and now you’ve 
added sockets and networking 
to your toolbox. For a complete list 
of tooltips in the book, see Appendix ii. 



Create 

sockeis with 
■the sotkeiO 
-function. 


Servers BLAB-' 

B =• bindO 
L — listenO 

A — addeptO 
B — Begin -talking 


Use -CorkO 

to to\t with 

several clients 

I 

at oY\tt- 


D/YSzi 
Dom^ih hdme 
system 


addresses 

domS'^* 


500 Chapter 11 


www.it-ebooks.info 






12 threads 



Programs often need to do several things at the same time. 

POSIX threads can make your code more responsive by spinning off several pieces of 
code to run in parallel. But be careful! Threads are powerful tools, but you don’t want 
them crashing into each other. In this chapter, you’ll learn how to put up traffic signs and 
lane markers that will prevent a code pileup. By the end, you will know how to create 
POSIX threads and how to use synchronization mechanisms to protect the integrity 
of sensitive data. 


this is a new chapter 


501 


www.it-ebooks.info 




working in parallel 


Tasks are sequentiaL.or not... 


Imagine you are writing something complex like a game in 
G. The code will need to perform several different tasks: 


It will need to update 
the graphics on the 
screen. 


It will need to read 
control information 
from the games 
controller or 
keyboard. 



It will need to 
calculate ike latest 
locations of ike 
objects that are 
moving in the game 


It might need 
to communicate 
with the disk 
and the network. 


Not only will your code need to do all of these things, but it 
will need to do them all at the same time. That’s going 
to be true for many different programs. Ghat programs 
will need to read text from the network and send data to 
the network at the same time. Media players will need to 
stream video to the display as well as watch for input from 
the user controls. 

How can your code perform several 
different tasks at once? 


502 Chapter 12 


www.it-ebooks.info 








threads 


...and processes are not always the answer 

You’ve already learned how to make the computer do 
several things at once: with processes. In the last chapter, 
you built a network server that could deal with several 
different clients at once. Each time a new user connected, 
the server created a new process to handle the new session. 

Does that mean that whenever you want to do several 
things at once, you should just create a separate process? 

Well, not really, and here’s why. 


Processes take time to create 

Some machines take a little while to create new processes. Not much time, but 
some. If the extra task you want to perform takes just a few hundredths of a 
second, creating a process each time won’t be very efficient. 

Processes can’t share data easily 

When you create a child process, it automatically has a complete copy of all 
the data from the parent process. But it’s a copy of the data. If the child needs 
to send data back to the parent, then you need something like a pipe to do that 

for you. 

Processes are just plain difficult 

You need to create a chunk of code to generate processes, and that can make 
your programs long and messy. 


You need something that starts a separate task quickly, can 
share all of your current data, and won’t need a huge 
amount of code to build. 

You need threads - 


you are here ► 


503 


www.it-ebooks.info 




single threads of execution 


SHOP -J 


Simple processes do owe thing at a time 

Say you have a task list with a set of things that you need to do: 


i'-SVRl' 



^hop n—S>ur? 

Run * he cash register. 

SiocK -the shop. 

<2eu>ax -the Surfboards. 

Answer -the phones. 

Rx "the roo-t. 

k - ee P ^he boohs. 


You can’t do all of the tasks at the same time, not by 
yourself. If someone comes into the shop, you’ll need to 
stop stocking the shelves. If it looks like rain, you might 
stop bookkeeping and get on the roof. If you work in a 
shop alone, you’re like a simple process: you do one thing 
after another, but always one thing at a time. Sure, you can 
switch between tasks to keep everything going, but what 
if there’s a blocking operation? What if you’re serving 
someone at the checkout and the phone rings? 

All of the programs you’ve written so far have had a single 
thread of execution. It’s like there’s only been one 
person working inside the program’s process. 


Al-bev^a-tively, 
jus-t 50 suV" Pm<y 




Process. 


504 Chapter 12 


www.it-ebooks.info 


threads 



Employ extra staff: use threads 

A multithreaded program is like a shop with several 
people working in it. If one person is running the checkout, 
another is filling the shelves, and someone else is waxing the 
surfboards, then everybody can work without interruptions. 
If one person answers the phone, it won’t stop the other 
people in the shop. 


/■P you employ more r 
people, more than 
ov\t -thing dan be 
done at onde. 


In the same way that several people can work in the same 
shop, you can have several threads living inside the same 
process. All of the threads will have access to the same piece 
of heap memory. They will all be able to read and write to 
the same files and talk on the same network sockets. If one 
thread changes a global variable, all of the other threads will 
see the change immediately. 

That means you can give each thread a separate task and 
they’ll all be performed at the same time. 


Vo* dan run eadh -task 
inside a separate thread. 



J ^d at c sc reefv- 



M ° he thread has to wait &y 
s°*»e-thihg, the othev threads 
£3n keep running. 


All the threads dan 
run inside a single prodess. 


you are here ► 


505 


www.it-ebooks.info 










creating threads 


How do you create threads? 


There are a few thread libraries, and you’re going to use one of 
the most popular: the POSIX thread library, or pthread. 

You can use the pthread library on Gygwin, Linux, and the 
Mac. 

Let’s say you want to run these two functions in separate threads: 


void* does not(void *a) 


{ 


int i = 0; 

for (i = 0; i < 5; i++) { 

sleep(1); 

puts("Does not!"); 

} 

return NULL; 



Thread W-fciohs . 
need io have a 
Vo, d** re-fcuv-h -type. 


Nothing useful 
to return, so 
just use NULL- 


void* does too(void *a) 


{ 


int i = 0; 

for (i = 0; i < 5; i++) 
sleep (1); 

puts("Does too!"); 

} 

return NULL; 


Did you notice that both functions return a void pointer ? 
Remember, a void pointer can be used to point to any piece of 
data in memory, and you’ll need to make sure that your thread 
functions have a void* return type. 

You’re going to run each of these functions inside its own thread. 



You’ll need to run both of these functions in parallel in separate 
threads. Let’s see how to do that. 

506 Chapter 12 


www.it-ebooks.info 














threads 


Create threads with pthread_create 

To run these functions, you'll need a little setup code, like some headers 
and maybe an error () function that you can call if there’s a problem. 


^include <stdio.h>~' 
♦include <stdlib.h>V 
♦include <string.h> / 
♦include <unistd.h> 
♦include <errno.h> 
#include <pthread.h> 

void error(char *msg) 

{ 


These are the headers -Por the main part oP the (-ode 


Th.s IS the header tor the pthread library. 


fprintf(stderr, "%s: %s\n", msg, strerror(errno))/ 

exit(1); 


} 


But then you can start the code for your main function. You’re going 
to create two threads, and each one needs to have its info stored in a 
pthread_t data structure. Then you can create and run a thread with 


pthread create(). 




This vedovds dll the m-fovmation about “the thvead- 


This 

dveates 

the 

thread- 


pthread t tO; does__*ot is the name o-f the -fundtion the thread will run- 

pthread_t tl; 

if (pthread_create (&t0, NULL, does_not, NULL) == -1)^: Always dhedk 
error ("Can't create thread tO"); -for errors, 

if (pthread_create(&tl, NULL, doestoo, NULL) == -1) 

error("Can't create thread tl"); 


ftl is -the address op -the 
data strudture that will store 
the thread into- 


That code will run your two functions in separate threads. But you’ve not 
quite finished yet. If your program just ran this and then finished, the 
threads would be killed when the program ended. So you need to wait for 
your threads to finish: 

— n>e void pointer returned -Prom eadh Pundtion will be shored here- 


void* result; 

if (pthread_join(tO, Sresult) == -1) 

error("Can't join thread tO"); 

if (pthread_join(tl, Sresult) == -1) 

error("Can't join thread tl"); 


The pthread_j oin () also receives the return value of your thread 
function and stores it in a void pointer variable. Once both threads have 
finished, your program can exit smoothly. 



he pthvead_joiir\0 -function 
waits -fov d thvead to -f'mish- 


Let’s see if it works. 


you are here ► 


507 


www.it-ebooks.info 


test drive 



Because you’re using the pthread library, you’ll need 
to make sure you link it when you compile your program, 
like this: 

I File Edit Window Help Don’tLoseTheThread 


This will lihk the 
pihread library. 



> gcc argument.c -lpthread -o argument 


This is your program- 


When you run the code, you’ll see both functions running 
at the same time: 


W\\ cy\ you run the todc, the^ - ^ 
messages dome out in a 

di-f-ferent order than this. 


(File Edit 

Window Help Don’tLoseTheThread 

> ./argument 

Does 

too! 

Does 

not! 

Does 

too! 

Does 

not! 

Does 

too! 

Does 

not! 

Does 

too! 

Does 

not! 

Does 

not! 

Does 

too! 

> 



thereictre no 

Dumb Questions 


Q: If both functions are running at the same time, why 
don’t the letters in the messages get mixed up? Each 
message is on its own line. 


That’s because of the way the Standard Output works. The 
text from puts () will all get output at once. 


% I removed the sleep () function, and the output 
showed all the output from one function and then all the 
output from the other function. Why is that? 


Most machines will run the code so quickly that without the 
sleep () call, the first function will finish before the second 
thread starts running. 


508 Chapter 12 


www.it-ebooks.info 











threads 



Beer Magnets 


It's time for a really BIG party. This code runs 20 threads that count the 
number of beers down from 2,000,000. See if you can spot the missing 
code, and if you get the answer right, celebrate by cracking open a 
couple of cold ones yourself. 


int beers = 2000000; Begin with ^ ' ,ee ' rS 

void* drink lots(void *a) 


/k_ 


"thread will run "this 


int i; 

for (i = 0; i < 100000; i++) { 


beers = beers - 1; ^_ Ue {^ion ^ ve dude t he 
} beers variable by 100,000 . 

return NULL; 


} 

int main() 


pthread_t threads[20]; 
int t; 

printf("%i bottles of beer on the wall\n%i bottles of beer\n", beers, beers); 

for (t = 0; t < 20; t++) { <—You'll dneate 10 threads save spade, -this example skips 

that run the tundtion. testing ton errors, but don't you do 

tha-t^ ) 

(., NULL, .;., NULL) ; 

} 

void* result; 


for (t = 0; t < 20; t++) { 


_This dode waits ton all the 

. (threads [t] , Sresult) ; ^ ea ds to tinish- 

} 

printf("There are now %i bottles of beer on the wall\n", beers); 
return 0; 


pthread__j oin 




you are here ► 509 


www.it-ebooks.info 




















beer solved 



Beer Magnets Solution 

It's time for a really BIG party. This code runs 20 threads that count the 
number of beers down from 2,000,000. You were to spot the missing 
code. 


int beers = 2000000; 
void* drink_lots(void *a) 

{ 

int i; 

for (i = 0; i < 100000; i++) { 

beers = beers - 1; 

} 


return NULL; 

} 

int main() 


{ 


pthread_t threads[20]; 
int t; 

printf("%i bottles of beer on the wall\n%i bottles of beer\n", beers, beers); 

for (t = 0; t < 20; t++) { To save spade, we've skipped-testing 

_ _ -fov erro rs—but don't you do that/ 

pthread_create j ( threads ft] 1 NULL, | dri nk_lots j , NULL); 



void* result; 

for (t = 0; t < 20; t++) { 


} 


pthread_j oin 


(threads[t], 


^result); 


printf("There are now %i bottles of beer on the wall\n", 
return 0; 


beers); 


threads 



510 Chapter 12 


www.it-ebooks.info 






















threads 



DriVs 


Let’s take a closer look at that last program. If you compile 
and run the code a few times, this happens: 


The 10 threads have reduced_^ 

the beers variable to O. 


Hey, wart... 


WTF ????? 

f 

VVV,eye's The fvoth? 


1 File Edit VVindow Help Don’tLoseTheThread | 


> ./beer 

2000000 bottles of beer on the wall 
2000000 bottles of beer 

There are now 0 bottles of beer on the wall 

> ./beer 

2000000 bottles of beer on the wall 
2000000 bottles of beer 

There are now 883988 bottles of beer on the wall 

> ./beer 

2000000 bottles of beer on the wall 
2000000 bottles of beer 

There are now 945170 bottles of beer on the wall 

> 


The code usually doesn’t reduce the beers 
variable to zero. 


That’s really odd. The beers variable begins with a value 
of 2 million. Then 20 threads each try to reduce the value 
by 100,000. Shouldn’t that mean that the beers variable 
always goes to zero? 


VBWAkN _ 

Look carefully at the code again, and try to imagine what will happen if several 
threads are running it at the same time. Why is the result unpredictable? Why 
doesn’t the beers variable get set to zero when all the threads have run? Write 
your answer below. 


you are here ► 


511 


www.it-ebooks.info 













not thread-safe 


The code is wot thread-safe 


The great thing about threads is that lots of different tasks can run at 
the same time and have access to the same data. The downside is that 
all those different threads have access to the same data... 

Unlike the first program, the threads in the second program are all 
reading and changing a shared piece of memory: the beers variable. 
To understand what’s going on, let’s see what happens if two threads 
try to reduce the value of beers using this line of code: 

beers = beers - 1; 



r*agine *bwo -threads are running this 
line Lode a*t the same time- 

o First of all, both threads will need to read the current value of the beers variable 


Thread / ^^ 




Thread 2- 


o Then, each thread will subtract 1 from the number. 


Thvead I 



kT 


Thread 2- 


Both threads are getting 
beers-i L- the same value- Can you 

see where this is going? 



o 


Finally, each thread stores the value for beers-1 back into the beers variable. 

& 

Thread I ^ i' V 



beers 
= 3(o 


Even though both of the threads were trying to reduce the value of 
beers by 1, they didn’t succeed. Instead of reducing the value by 
2, they only decreased it by 1. That’s why the beers variable didn’t 
get reduced to zero—the threads kept getting in the way of each 
other. 

And why was the result so unpredictable? Because the threads didn’t 
always run the line of code at exactly the same time. Sometimes the 
threads didn’t crash into each other, and sometimes they did. 

512 Chapter 12 



Thread 2- 


Watch it! 


Be careful to look 
out for code that 
isn’t thread-safe. 


How will you know? 
Usually, if two threads 
read and write to the same variable, 
it’s not. 


www.it-ebooks.info 










threads 


You weed to add traffic signals 

Multithreaded programs can be powerful, but they can also 
behave in unpredictable ways, unless you put some controls 
in place. 

Imagine two cars want to pass down the same narrow 
stretch of road. To prevent an accident, you can add traffic 
signals. Those traffic signals prevent the cars from getting 
access to a shared resource (the road) at the same time. 

It’s the same thing when you want two or more threads 
to access a shared data resource: you need to add traffic 
signals so that no two threads can read the data and write it 
back at the same time. 




f 

The two dare represent 
two threads. They both 
wa*t to addess the same 
shamed variable. 

I 


t 


The tvatfid. siy.aU ?reve*t the two 
threads trom attessm^ the same 
Shared variable at the same We- 


Shared 

variable 


The traffic signals that prevent threads from crashing into 
each other are called mutexes, and they are one of the 
simplest ways of making your code thread-safe. 

Mute*es are sometimes just 
dalled lodks. 


MUT-EX = 

MUTually 

EXclusive. 


you are here ► 513 


www.it-ebooks.info 


















mutex 


Use a mutex as a traffic signal 

To protect a section of code, you will need to create a mutex 
lock like this: 


pthread_mutex_t a_lock = PTHREAD_MUTEX_INITIALIZER; 


The mutex needs to be visible to all of the threads that might 
crash into each other, so that means you’ll probably want to 
create it as a global variable. 

PTHREAD MUTEX INITIALIZER is actually a macro. 

When the compiler sees that, it will insert all of the code your 
program needs to create the mutex lock properly. 

At the beginning of your sensitive code section, you need to place your first 
traffic signal. The pthread_mutex_lock () will let only one thread 
get past. All the other threads will have to wait when they get to it. 


o Red means stop. 





pthread_mutex_lock(&a_lock); 



0* ly ov\t -bbvead a*t a will past this- 


/* Sensitive code starts here... */ 



Green means go. 

When the thread gets to the end of the sensitive code, it makes a call 
to pthread_mutex_unlock () . That sets the traffic signal back to 
green, and another thread is allowed onto the sensitive code: 



/* ...End of sensitive code */ 

pthread_mutex_unlock(&a_lock); 


Now that you know how to create locks in your code, you have 
a lot of control over exactly how your threads will work. 

514 Chapter 12 


www.it-ebooks.info 


threads 


Passing Long Values fo Thread functions \J]> Close 


Thread functions can accept a single void pointer parameter and return 
a single void pointer value. Quite often, you will want to pass and 
return integer values to a thread, and one trick is to use long values, 
longs can be stored in void pointers because they are the same size. 



void* do stuff (void"* param) 


A ihvead Wlion tan adtept a single 
{ void 'poivrtev- ^aramctev-. 

long thread_no = (long) param;^-Convert it badk to a long. 

printf("Thread number %ld\n", thread_no); 

return (void*) (thread_no + 1) ;_* Cas*t it batk -to a void pointer 

} v/hen its returned- 


int main() 

{ 

pthread_t threads[20]; 
long t; 

for (t = 0; t < 3; t++) { 


Convert the long t value 
to a void pointer. 

V 

pthread create(^threads[t], NULL, do stuff, (void*)t); 


} 


void* result; 

for (t = 0; t < 3; t++) { 

pthread join(threads[t], &result); 


Convert the return value t o a 
lon<} be-fore usin<j it- 


V 

printf("Thread %ld returned %ld\n", t, (long)result); 


} 


return 0; 


Eaeh thread receives its 
thread number. 

£ath thread returns its 
thread number + I- 


I File Edit Window Help Don’tLoseTheThread 


> ./param_test 
Thread number 0 
Thread 0 returned 1 
Thread number 1 
Thread number 2 
Thread 1 returned 2 
Thread 2 returned 3 

> 


you are here ► 


515 


www.it-ebooks.info 










exercise 




There’s no simple way to decide where to put the locks in your code. Where you put them will 
change the way the code performs. Here are two versions of the drink_lots () function 
that lock the code in different ways. 


Version A 



Version & 



516 Chapter 12 


www.it-ebooks.info 









threads 


Both pieces of code use a mutex to protect the beers variable, and each now displays the value of beers before 
they exit, but because they are locking the code in different places, they generate different output on the screen. 

Can you figure out which version produced each of these two runs? 


I File Edit Window Help Don’tLoseTheThread 


> . /beer 

2000000 bottles of beer on the wall 
2000000 bottles of beer 
beers = 1900000 


beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 


1800000 

1700000 

1600000 

1500000 

1400000 

1300000 

1200000 

1100000 

1000000 

900000 

800000 

700000 

600000 

500000 

400000 

300000 

200000 

100000 

0 


There are now 0 bottles of beer on the wall 
> 


File Edit Window Help Don’tLoseTheThread 



Matth -the todt -to 
■the outfit- 


> ./beer_fixed_strategy_2 
2000000 bottles of beer on the wall 
2000000 bottles of beer 

beers = 63082 
beers = 123 
beers = 104 
beers = 102 
beers = 96 
beers = 75 
beers = 67 
beers = 66 
beers = 65 
beers = 62 
beers = 58 
beers = 56 
beers = 51 
beers = 41 
beers = 36 
beers = 30 
beers = 28 
beers = 15 
beers = 14 
beers = 0 

There are now 0 bottles of beer on the wall 

> 


517 









exercise solved 



Solution 

There’s no simple way to decide where to put the locks in your code. Where you put them will 
change the way the code performs. Here are two versions of the drink_lots () function 
that lock the code in different ways. 


Version A 



Version & 



518 Chapter 12 


www.it-ebooks.info 









threads 


Both pieces of code use a mutex to protect the beers variable, and each now displays the value of beers before 
they exit, but because they are locking the code in different places, they generate different output on the screen. 

You were to figure out which version produced each of these two runs. 


I File Edit Window Help Don’tLoseTheThread 


> . /beer 

2000000 bottles of beer on the wall 
2000000 bottles of beer 
beers = 1900000 


beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 

beers 


1800000 

1700000 

1600000 

1500000 

1400000 

1300000 

1200000 

1100000 

1000000 

900000 

800000 

700000 

600000 

500000 

400000 

300000 

200000 

100000 

0 


There are now 0 bottles of beer on the wall 
> 


File Edit Window Help Don’tLoseTheThread 



Matth -the todt -to 
■the outfit- 



> ./beer_fixed_strategy_2 
2000000 bottles of beer on the wall 
2000000 bottles of beer 

beers = 63082 
beers = 123 
beers = 104 
beers = 102 
beers = 96 
beers = 75 
beers = 67 
beers = 66 
beers = 65 
beers = 62 
beers = 58 
beers = 56 
beers = 51 
beers = 41 
beers = 36 
beers = 30 
beers = 28 
beers = 15 
beers = 14 
beers = 0 

There are now 0 bottles of beer on the wall 

> 


519 










congratulations! 


Congratulations! You’ve (almost) 
reached the end of the book- Now it’s 
time to crack open one of those 
2,000,000 bottles of beer and celebrate! 

You’re now in a great position to decide what kind of G coder you 
want to be. Do you want to be a Linux hacker using pure G? Or 
a maker writing embedded G in small devices like the Arduino? 
Maybe you want to go on to be a games developer in C ++? Or a Mac 

and iOS programmer in Objective-C? 



Whatever you choose to do, you’re now part of the community that uses and loves 
the language that has created more software than any other. The language behind the 
Internet and almost every operating system. The language that’s used to write almost 
all the other languages. And the language that can write for almost every processor in 
existence, from watches and phones to planes and satellites. 


New C Hacker, we salute you! 


O: Does my machine have to 
have multiple processors to support 
threads? 


^Z No. Most machines have processors 
with multiple cores, which means that 
their CPUs contain miniprocessors that 
can do several things at once. But even 
if your code is running on a single core/ 
single processor, you will still be able to 
run threads. 


How? 

^Z The operating system will switch 
rapidly between the threads and make it 
appear that it is running several things at 
once. 


tJierejare no 

Dumb Questions 


Qj 

faster? 


Will threads make my programs 


^Z Not necessarily. While threads can 
help you use more of the processors and 
cores on your machine, you need to be 
careful about the amount of locking your 
code needs to do. If your threads are 
locked too often, your code may run as 
slowly as single-threaded code. 


% How can I design my thread code 
to be fast? 


^Z Try to reduce the amount of data 
that threads need to access. If threads 
don’t access a lot of shared data, they 
won’t need to lock each other out so often 
and will be much more efficient. 


% Are threads faster than separate 
processes? 


^Z They usually are, simply because 
it takes a little more time to create 
processes than it does to create extra 
threads. 


% I’ve heard that mutexes can lead 
to “deadlocks.” What are they? 


^Z Say you have two threads, and they 
both want to get mutexes A and B. If the 
first thread already has A, and the second 
thread already has B, then the threads will 
be deadlocked. This is because the first 
thread can’t get mutex B and the second 
thread can’t get mutex A. They both come 
to a standstill. 


520 Chapter 12 


www.it-ebooks.info 





threads 



Your C Toolbox 


You’ve got Chapter 12 under 
your belt, and now you’ve 
added threads to your toolbox. 
For a complete list of tooltips in the 
book, see Appendix ii. 



P0£|)< threads 
(pthread) is 
a ‘threading 
library. 


Threads allow 
a prodess to do 
more tha* ohe 
th'rng at the 

same time. 


Threads arc 
oy-otesses 


pthread_createO 
creates a thread 
to ru y \ a -function. 


othrcadJ 0 ^ 

yl\W ** 
a -thread tP 


Mutexes are 
locks that 
protect shared 
data* 


Threads 
share the 
same global 
variables. [ 

If b*/o -threads 

| cad ah d update 

the same variable, J 

y° u ’ r ^ode will be ’ 

^predictable. I 

p-thread^uteO 0 ^^ ^ 
ereates a ™ute* or tode- 

pthread_mute^_uhlockO 

releases the mute*. 


you are here ► 


521 


www.it-ebooks.info 












www.it-ebooks.info 




Blasteroids 

This lab gives you a spec that describes a program 
for you to build, using the knowledge you’ve gained 
over the last few chapters. 

This project is bigger than the ones you’ve seen so far. 
So read the whole thing before you get started, and 
give yourself a little time. And don’t worry if you get 
stuck; there are no new C concepts in here, so you 
can move on in the book and come back to the lab 
later. 

We’ve filled in a few design details for you, and we’ve 
made sure you’ve got all the pieces you need to write 
the code. 

It’s up to you to finish the job, but we won’t give you 
the code for the answer. 



www.it-ebooks.info 



Blasteroids 


Write the arcade game Plasteroids 


Of course, one of the real reasons people want to learn G is so 
they can write games. In this lab, you’re going to pay tribute to 
one of the most popular and long-lived video games of them all. 

It’s time to write Blasteroidsl 



These are -the humber o-P 
lives you have left. / ou | ose 

a i+e whe« you get hit by a» 
asteroid. Whe* you ru* out o-P 
lives, its 0arme over. 


This is your spaceship. Use 
your keyboard to £ly your 
spaceship, -firir^ at asteroids 
while avoiding ^ettir^ hit* 


Pow( PovjI You 
shoot asteroids by 
-firing bullets. 


These are asteroids you 
have to shoot- You o>et 
points -for each asteroid 

you shoot- 


www.it-ebooks.info 



Blasteroids 



Your mission: blast the asteroids without getting hit 


Sinister. Hollow. And all strangely similar. The asteroids are the 
bad guys in this game. They float and rotate slowly across the 
screen, promising instant death to any passing space traveler who 
happens to meet them. 




Welcome to the starship Vectorize\ This is the ship that you will 
fly around the screen using your keyboard. It’s armed with a 
cannon that can fire at passing asteroids. 

If an asteroid is hit by a blast from the spaceship’s cannon, it 
immediately splits into two, and the player’s score increases by 
100 points. Once an asteroid has been hit a couple of times, it’s 
removed from the screen. 




If the ship gets hit by an asteroid, you lose a life. You have three 
lives, and when you lose the last one, that’s the end of the game. 



www.it-ebooks.info 


A 


Blasteroids 


Allegro 

Allegro is an open source game development library that allows 
you to create, compile, and run game code across different 
operating systems. It works with Windows, Linux, Mac OS, and 
even phones. 

Allegro is pretty straightforward to use, but just because it’s a 

simple library doesn’t mean it lacks power. Allegro can deal 

with sound, graphics, animation, device handling, and even 3D 

graphics if your machine supports OpenGL.^- - „ 

6 F is ah ofch sfahdav-d-fer 

graphics processors. You describe 
your 2£) objects to 0pen£jU 2nd it 
handles (most) of the math -for you. 


Installing Allegro 

You can get the source for Allegro over at the Allegro 

SourceForge website: ^ ^dated wore o-ften than 

books, so this URL mi^bt be dittevent- 

http://alleg.sourceforge.net/ \ Check on your -favorite search engine. 

You can download, build, and install the latest code from the 
source repository. There are instructions on the site that will tell 
you exactly how to do that for your operating system. 


You may need CMake 

When you build the code, you will probably also need to install 
an extra tool called CMake. CMake is a build tool that makes it 
a little easier to build G programs on different operating systems. 
If you need CMake, you will find all you need over at 
http: / / www. cmake. org. 



version 5 


The code 
we’ve 
supplied 
in this lab 
is for 

of Allegro. 


If you download and 
install a newer version , 
you may need to make a 
few changes. 


www.it-ebooks.info 







Blasteroids 



What docs Allegro do for you? 


The Allegro library deals with several things: 


O GUIs 

Allegro will create a simple window to contain your game. This might not 
seem like a big deal, but different operating systems have very different ways 
of creating windows and then allowing them to interact with the keyboard 
and the mouse. 



Events 

Whenever you hit a key, move a mouse, or click on something, your system 
generates an event. An event is just a piece of data that says what happened. 
Events are usually put onto queues and then sent to applications. Allegro 
makes it simple to respond to events so that you can easily, say, write code 
that will run if a user fires her canyon by hitting the spacebar. 



Timers 

You’ve already looked at timers at the system level. Allegro provides a 
straightforward way to give your game a heartbeat. All games have some 
sort of heartbeat that runs so many times a second to make sure the game 
display is continuously updated. Using a timer, you can create a game that, 
for example, displays a fresh version of the screen at 60 frames per second 
(FPS). 



Graphics buffering 

To make your game run smoothly, Allegro uses double buffering. Double 
buffering is a game-development technique that allows you to draw all 
of your graphics in an offscreen buffer before displaying it on the screen. 
Because an entire frame of animation is displayed all at once, your game will 
run much more smoothly. 



Graphics and transformations 

Allegro comes with a set of built-in graphics primitives that allow you 
to draw lines, curves, text, solids, and pictures. If you have an OpenGL 
driver for your graphics card, you can even do 3D. In addition to all of this, 
Allegro also supports transformations. Transformations allow you to 
rotate, translate, and scale the graphics on the screen, which makes it easy 
to create animated spaceships and floating rocks that can move and turn on 
the screen. 



Sounds 

Allegro has a full sound library that will allow you to build sounds into your 
game. 


www.it-ebooks.info 


Blasteroids 


building the game 

You’ll need to decide how you’re going to structure your source 
code. Most G programmers would probably break down the 
code into separate source files. That way, not only will you be 
able to recompile your game quicker, but you’ll also be dealing 
with smaller chunks of code at a time. That will make the whole 
process a lot less confusing. 

There are many, many ways of splitting up your code, but one 
way is to have a separate source file for each element that will be 
displayed in the game: 



A tile ton-taming all of the sourde dode to tradk 
and display the latest position ot an asteroid. 



blast.c 


The spaceship will be able to -Piv-e its cannon at 
passing asteroids, so you will need Code to draw 
and move a dannon blast across the screen. 



The hero of your 9 ame, the pludky little spateship. 
Unlike with the asteroids, you will probably need 
to manage only one of these at a time- 


spaceships 



blasteroids.c 


It's always good to have a separate source Pile to 
deal with the tore oP the game- The Code in here 
will to listen Por keypresses, run a timer, and 
also tell all op the other spaceships, rocks, and 
blasts to draw themselves on the screen. 


www.it-ebooks.info 







Blasteroids 



The spaceship 

When you’re controlling lots of objects on a screen, it’s useful to 
create a struct for each one. Use this for the spaceship: 


The di\re£-fcioh its poih-fci 



What the spaceship looks like 


If you set up your code to draw around the origin (discussed later), 
then you could draw the ship using code like this: 

The variable s is a pointer to a Spaceship struct. Make the 
ship green. 



al_draw_line (-8, 9, 0, -11, s->color, 3.Of); 

al draw line(0 ^ -11, 8, 9, s->color, 3.Of); 

al_draw_line(-6, 4, -l, 4, s->color, 3.Of); 
al draw line (6, 4, 1, 4, s->color, 3.Of); 


Collisions 

If your spaceship collides with a rock, it dies immediately and 
the player loses a life. For the first five seconds after a new ship is 
created, it doesn’t check for collisions. The new ship should appear 
in the center of the screen. 


www.it-ebooks.info 








Blasteroids 


Spaceship behavior 

The spaceship starts the game stationary in the center of the screen. 
To make it move around the screen, you need to make it respond to 
keypresses: 


The up 5hd down 

arrows accelerate -—^ 
a*d decelerate the 
spaceship. 



TV* \eU avvo* 

W a* s ? atesV " ? 

V 





UP 




DOWN 

1 

>/ 




P>« rig hi air|r ow 

T? spaceship 
C/oCkv - 


Kwise. 

v 



Make sure the ship doesn’t accelerate too much. You probably don’t 
want the spaceship to move forward more than a couple hundred 
pixels per second. The spaceship should never go into reverse. 


www.it-ebooks.info 


















Blasteroids 



Reading keypresses 


The G language is used to write code for almost every piece of 
computer hardware in the world. But the strange thing is, there’s 
no standard way to read a keypress using G. All of the standard 
functions, like fgets (), read only the keys once the return key has 
been pressed. But Allegro does allow you to read keypresses. Every 
event that’s sent to an Allegro game comes in via a queue. That’s just 
a list of data that describes which keys have been pressed, where the 
mouse is, and so on. Somewhere, you’ll need a loop that waits for an 
event to appear on the queue. 



Even -functions su£h as geteharO 
■tend -to buffer any eharaeters you 
■type until you bit return. 


ALLEGRO_EVENT_QUEUE *queue; 

queue = al_create_event_queue () ; ^ ■ You Create an event ^ 

ALLEGRO_EVENT event; I 

al_wait_for_event (queue, &event) ; — This waits -Por an event -Prom the «\ueue. 


Once you receive an event, you need to decide if it represents a 
keypress or not. You can do that by reading its type. 


if (event.type == ALLEGRO_EVENT_KEY_DOWN) { 
switch(event.keyboard.keycode) { 

case ALLEGRO_KEY_LEFT Tuv* the sViif lett 


break; 


case ALLEGRO KEY RIGHT: 



Turn right- 


break; 


case ALLEGRO_KEY_SPACE: p,y C / 


break; 


www.it-ebooks.info 









Blasteroids 


The blast 

Take that, you son of a space pebble! The spaceship’s cannon can 
fire blasts across the screen, and it’s your job to make sure they 
move across the screen. This is the struct for a blast: 



Plast appearance 

The blast is a dashed line. If the user hits the fire key rapidly, the 
blasts will overlay each other and the line will look more solid. That 
way, rapid firing will give the impression of increased firepower. 



Plast behavior 

Unlike the other objects you’ll be animating, blasts that disappear 
off the screen won’t reappear. That means you’ll need to write code 
that can easily create and destroy blasts. Blasts are always fired in 
the direction the ship is heading, and they always travel in a straight 
line at a constant speed—say, three times the maximum speed of 
the ship. If a blast collides with an asteroid, the asteroid will divide 
into two. 


www.it-ebooks.info 





Blasteroids 


k 


The asteroid 



This is the code to draw an asteroid around the origin: 


al_draw_line(-20, 20, -25, 5, a->color, 2.Of); 
al_draw_line(-25, 5, -25, -10, a->color, 2.Of); 
al_draw_line(-25, -10, -5, -10, a->color, 2.Of); 
al_draw_line(-5, -10, -10, -20, a->color, 2.Of); 
al_draw_line(-10, -20, 5, -20, a->color, 2.Of); 
al_draw_line(5, -20, 20, -10, a->color, 2.Of); 
al_draw_line(20, -10, 20, -5, a->color, 2.Of); 
al_draw_line(20, -5, 0, 0, a->color, 2.Of); 
al_draw_line(0, 0, 20, 10, a->color, 2.Of); 

al_draw_line(20, 10, 10, 20, a->color, 2.Of); 

al_draw_line(10, 20, 0, 15, a->color, 2.Of); 
al draw line(0, 15, -20, 20, a->color, 2.Of); 


www.it-ebooks.info 














Blasteroids 


How the asteroid moves 


Asteroids move in a straight line across the screen. Even though they 
move in a straight line, they continually rotate about their centers. If 
an asteroid drifts off one side of the screen, it immediately appears 
on the other. 



When the asteroid is hit by a blast 


If an asteroid is hit by a blast from the spaceship’s cannon, it 
immediately splits into two. Each of these parts will be half the 
size of the original asteroid. Once an asteroid has been hit/split a 
couple of times, it is removed from the screen. The player’s score 
increases with each hit by 100 points. You will need to decide how 
you will record the set of asteroids on the screen. Will you create 
one huge array? Or will you use a linked list? 


The game status 



There are a couple of things you need to display on the screen: the 
number of lives you have left and the current score. When you’ve 
run out of lives, you need to display “Game Over!” in big, friendly 
letters in the middle of the screen. 


www.it-ebooks.info 


Blasteroids 



Use transformations to move things around 

You’ll need to animate things around the screen. The spaceship 
will need to fly, and the asteroids will need to rotate, drift, and even 
change size. Rotations, translations, and scaling require quite a lot 
of math to work out. But Allegro comes with a whole bunch of 
transformations built in. 

When you’re drawing an object, like a spaceship, you should 
probably just worry about drawing it around the origin. The origin 
is the top-left corner of the screen and has coordinates (0, 0). The 
x-coordinates go across the screen, and the y-coordinates go down. 

You can use transformations to move the origin to where the object 
needs to be on the screen and then rotate it to point the correct way. 

Once that’s all done, all you need to do is draw your object at the 
origin and everything will be in the right place. 

For example, this is one way you might draw the spaceship on the 
screen: 



www.it-ebooks.info 




Blasteroids 


The finished product 

When you’re done, it’s time to play Blasteroidsl 



There are lots ol other things you 
could do to enhance the game. As 
an example, why not try to get it 
working with OpenCV? Let us know 
how you get on at Head First Lahs. 


www.it-ebooks.info 




Leaving town... 



It's been great having you here in Cville! 

We’re sad to see you leave, but there’s nothing like taking what you’ve learned 
and putting it to use. There are still a few more gems for you in the back of the book and 
an index to read through, and then it’s time to take all these new ideas and put them into 
practice. We’re dying to hear how things go, so drop us a line at the Head First Labs 
website, www.headfirstlabs.com, and let us know how C is paying off for YOU! 


you are here ► 


537 


www.it-ebooks.info 



www.it-ebooks.info 


/ left 0 Vers 



Even after all that, there’s still a bit more. 

There are just a few more things we think you need to know. We wouldn’t feel right about 
ignoring them, even though they need only a brief mention, and we really wanted to give 
you a book you’d be able to lift without extensive training at the local gym. So before you 
put the book down, read through these tidbits. 


this is an appendix 


539 


www.it-ebooks.info 



















operators 


*1. Operators 

We’ve used a few operators in this book, like the basic arithmetic 
operators +, *, and /, but there are many other operators 

available in G that can make your life easier. 

Increments and decrements 

An increment and a decrement increase and decrease a number by 
1. That’s a very common operation in G code, particularly if you 
have a loop that increments a counter. The G language gives you 
four simple expressions that simplify increments and decrements: 

lunase i by I, then ++± 

return new value- 

Increase > by I > then 

return “tbe old a!ve- j_++ 

Dedvease i by I, ihe*—^ __ ± 
return the new value- 

PeC-rease i by l> “then 
v-etum tbe old value 

Each of these expressions will change the value of i. The position 
of the ++ and -- say whether or not to return the original value 
of i or its new value. For example: 

int i = 3; 

int j = i + +; Atter this line, j -- 3 and • -- ^ 

The ternary operator 

What if you want one value if some condition is true, and a 
different value if it’s false? 


if (x == 1) 
return 2; 
else 

return 3; 


G has a ternary operator that allows you to compress this code right 
down to the following: 

return (x == 1) ? 2 : 3; 



inally, the value it the Condition 


I! 


'P 


t 


540 appendix i do " d,W ^ dor " es ihe ^ it the Condition is true 


-false 


www.it-ebooks.info 


leftovers 


Pit twiddling 

G can be used for low-level programming, and it has a set of 
operators that let you calculate a new series of bits: 


Operator 

Description | 


The value of a with all the bits flipped 

a&b 

AND the bits of a and b together 

a | b 

OR the bits of a and b together 

a A b 

XOR the bits of a and b together 

« 

Shift bits to the left (increase) 

» 

Shift bits to the right (decrease) 


The < C < C operator can be used as a cjuick wny of multiplying an 
integer by 2. But be careful that numbers don’t overflow 

Commas to separate expressions 

You’ve seen for loops that perform code at the end of each 
loop: 

for (i = 0; i < 10; i++) <^-TW.s Will harden at the end of eatYi \oof- 

But what if you want to perform more than one operation at 
the end of a loop? You can use the comma operator: 

for (i = 0; i < 10; i++, j++)^ —' i and j. 

The comma operator exists because there are times when you 
don’t want to separate expressions with semicolons. 


you are here ► 


541 


www.it-ebooks.info 












preprocessor directives 


* 1 . Preprocessor directives 

You use a preprocessor directive every time you compile a program 
that includes a header file: 

#include <stdio . h>^--^ This ,s a fv-efv-odesso\r div-ett 

The preprocessor scans through your G source file and generates 
a modified version that will be compiled. In the case of the 
#include directive, the preprocessing inserts the contents of the 
stdio.h file. Directives always appear at the start of a line, and they 
always begin with the hash (#) character. The next most common 
directive after #include is #def ine: 

#define DAYS OF THE WEEK 7 


printf ("There are %i days of the week\n", DAYS OF THE WEEK); 


The #def ine directive creates a macro. The preprocessor will 
scan through the G source and replace the macro name with the 
macro’s value. Macros aren’t variables because they can never 
change at runtime. Macros are replaced before the program even 
compiles. You can even create macros that work a little like 

functions: _* , s a parameter to the m3dro. 

#define ADD_ONE (x) ((x) +1) Be dare-ful to use parentheses with madres. 


printf ("The answer is %i\n", ADD_ONE (3) ) ; -^ — This is will output The answer 

The preprocessor will replace ADD_ONE ( 3 ) with ( ( 3 ) + 1) 

before the program is compiled. 


Conditions 


You can also use the preprocessor for conditional 

compilation. You can make it switch parts of the source 

code on or off: |£ ^ madro exists... 

#ifdef SPANISH 

m /_-...indludc this docle- 


_ II 


Hola 


char ^greeting 

#else 

char ^greeting = "Hello"; 

#endif 


|-f *o*t) ir\C.ludc *tWs lode- 


This code will be compiled differently if there is (or isn’t) a 
macro called SPANISH defined. 


542 appendix i 


www.it-ebooks.info 


leftovers 


#$. The static keyword 


Imagine you want to create a function that works like a counter. 
You could write it like this: 


int 

int 


count = en¬ 
counter () 



Use *this to tount “the tails- 


{ 

return ++count; ^—- Indrement the douni eadh tir»e. 

} 


What’s the problem with this code? It uses a global variable called 
count. Any other function can change the value of count 
because it’s in the global scope. If you start to write large programs, 
you need to be careful that you don’t have too many global 
variables because they can lead to buggy code. Fortunately, G lets 
you create a global variable that is available only inside the local 

scope of a function: ^id keyword *>ea*s 

int counter () __-^, s variable will keep its value 

d° Uh t is still a global { between dalls to dounterO. 

variable, but it dan. V- 

only be addessed static int count = 0 ; 

inside this -Pundtion. return ++count; 

} 

The static keyword will store the variable inside the global area 
of memory, but the compiler will throw an error if some other 
function tries to access the count variable. 


static can also make things private 


You can also use the static keyword outside of functions, 
static in this case means “only code in this x file can use this.” 

For example: 

__v/om tan use this variable only 

static int days = 365; mside the durren-t sourde Pile- 


/ou dan dall -this-—^-static void update_account (int x) { 
-runttion only 

-Prom inside this 

sourte tile- } 


The static keyword controls the scope of something. It will 
prevent your data and functions from being accessed in ways that 
they weren’t designed to be. 


you are here ► 


543 


www.it-ebooks.info 


sizes 


*4. How big stuff is 

You’ve seen that the sizeof operator can tell you how much 
memory a piece of data will occupy But what if you want to 
know what range of values it will hold? For example, if you 
know that an int occupies 4 bytes on your machine, what’s the 
largest positive number you can store in it? Or the largest negative 
number? You could, theoretically, work that out based on the 
number of bytes it uses, but that can be tricky 

Instead, you can use the macros defined in the limits,h header. 
Want to know what the largest long value you can use is? It’s 
given by the LONG_MAX macro. How about the most negative 
short? Use SHRT_MIN. Here’s an example program that shows 
the ranges for ints and shorts: 


finclude <stdio.h> 

^include <limits.h> 

int main() 

{ 

printf("On this machine an int takes up %lu bytes\n", sizeof (int)); 
printf("And ints can store values from %i to %i\n", INT_MIN, INT_MAX); 
printf("And shorts can store values from %i to %i\n", SHRT_MIN, SHRT MAX); 
return 0/ 

} 

I File Edit Window Help HowBiglsBig 


On this machine an int takes up 4 bytes 

And ints can store values from -2147483648 to 2147483647 
And shorts can store values from -32768 to 32767 


The macro names come from the data types: INT (int), SHRT 
(short), LONG (long), CHAR (char), FLT (float), DBL 
(double). Then, you either add _MAX (most positive) or _MIN 
(most negative). You can optionally add the prefix U (unsigned), 
S (signed), or L (long) if you are interested in a more specific 
data type. 

544 appendix i 


www.it-ebooks.info 





leftovers 


#5. Automated testing 

It’s always important to test your code, and life becomes a lot 
simpler if you automate the tests. Automated tests are now used 
by virtually all developers, and there are many, many testing 
frameworks used by G programmers. One that’s popular at Head 
First Labs is called AceUnit: 

http://aceunit.sourceforge.net/ 

AceUnit is very similar to the vUnit frameworks in other languages 
(like nUnit and jUnit). 

If you’re writing a command-line tool and you have a Unix-style 
command shell, then another great tool is called shunit2. 

http://code.google.com/p/shunit2 / 

shunit2 lets you create shell scripts that test scripts and 
commands. 


you are here ► 


545 


www.it-ebooks.info 


gcc 


*6. More ow gcc 

You’ve used the GNU Compiler Collection (gcc) throughout this book, 
but you’ve only scratched the surface of what this compiler can do 
for you. gcc is like a Swiss Army knife. It has an immense number 
of features that give you a tremendous amount of control over the 
code it produces. 

Optimization 

gcc can do a huge amount to improve the performance of your 
code. If it sees that you’re assigning the same value to a variable 
every time a loop runs, it can move that assignment outside the 
loop. If you have a small function that is used only in a few places, 
it can convert that function into a piece of inline code and insert it 
into the right places in your program. 

It can do lots of optimizations, but most of them are switched off 
by default. Why? Because optimizations take time for the compiler 
to perform, and while you’re developing code you normally want 
your compiles to be fast. Once your code is ready for release, you 
might want to switch on more optimization. There are four levels 
of optimization: 



Flag 

Description 

-0 

If you add a -0 (letter O) flag to your gcc command, you will get the 
first level of optimizations. 

-02 

For even more optimizations and a slower compile, choose -02. 

-03 

For yet more optimizations, choose -03. This will include all of the 
optimization checks from -0 and -02, plus a few extras. 

-Ofast 

The maximum amount of optimization is done with -Ofast. This is 
also the slowest one to compile. Be careful with -Of ast because the 
code it produces is less likely to conform to the G standards. 


" 


546 appendix i 


www.it-ebooks.info 













leftovers 


Warnings 

Warnings are displayed if the code is technically valid but does 
something suspicious, like assign a value to a variable of the 
wrong type. You can increase the number of warning checks with 

-Wall: 


gcc fred.c “Wall -o fred 

The -Wall option means “All warnings,” but for historic reasons 
is doesn’t actually display all of the warnings. For that, you should 
also include -Wextra: 

gcc fred.c -Wall -Wextra -o fred 


Also, if you want to have really strict compilation, you can make the 
compile fail if there are any warnings at all with -Werror: 


gcc fred.c -Werror -o fred 


■This means "tveat wammy as evvovs. 


-Werror is useful if several people are working on the same code 
because it will help maintain code quality. 

For more gcc options, see: 


http://gcc.gnu.org/onlinedocs /gcc 


you are here ► 


547 


www.it-ebooks.info 


make 


* 7 . More ow make 

ma ke is an incredibly powerful tool for building G applications, 
but you’ve only had a very simple introduction to it in this book. 
For more details on the amazing things you can do with make, see 
Robert Mecklenburg’s Managing Projects with GNU Make : 

http:// shop.oreilly.com/product/9780596006105.do 
For now, here are just a few of its features. 

Variables 

Variables are a great way of shortening your makefiles. For 
example, if you have a standard set of command-line options you 
want to pass to gcc, you can define them with a variable: 

CFLAGS = -Wall -Wextra -v 


fred: fred.c 

gcc fred.c $ (CFLAGS) -o fred 

You define a variable using the equals sign (=) and then read its 
value with $(...). 

Using A , and @ 

Most of the time, a lot of your compile commands are going to 
look pretty similar: 


fred: fred.c 

gcc fred.c -Wall -o fred 


In which case, you might want to use the % symbol to write a more 
general target/recipe: 

l-P you've dvea-ting <-file>, 

"then look ■fo\r <-pile>.£. 

j A is the dependency 
value (“the c -file) 


Q. 

'O 


%. c 



gcc $ A -Wall -o $@ j@ is ^e J the tavget 


This looks a little weird because of all the symbols. If you want 
to make a file called fred , this rule tells make to look for a file 
called fred.c. Then, the recipe will run a gcc command to create 
the target fred (given by the special symbol $@) using the given 
dependency (given by $@). 


548 appendix i 


www.it-ebooks.info 


leftovers 


Implicit rules 

The make tool knows quite a lot about G compilation, and it can 
use implicit rules to build files without you telling it exactly how 
For example, if you have a file called fred.c , you can compile it 

without a makefile by typing: 



LL will usually 
be aho-thev- 


/ A 


This dow^ile ton\n\diY\d was This is ah ir»p|i£it \rule. 

seated by r»ake, without 
us tellih^ it how. 


That’s because make comes with a bunch of built-in recipes. For 
more on make, see: 

http://www.gnu.org/software/make/ 


you are here ► 


549 


www.it-ebooks.info 




development tools 


#8. Pevelopwewt tools 

If you’re writing G code, you probably care a lot about 
performance and stability And if you’re using the GNU Compiler 
Collection to compile your code, you’ll probably want to take a look 
at some of the other GNU tools that are available. 


gdb 

The GNU Project Debugger (gdb) lets you study your compiled 
program while it’s running. This is invaluable if you’re trying to 
chase down some pesky bug. gdb can be used from the command 
line or using an integrated development environment like Xcode or Guile. 

http://sourceware.org/gdb/download/onlinedocs /gdb / index.html 


gprof 

If your code isn’t as fast as you’d hoped, it might be worth profiling 
it. The GNU Profiler (gprof) will tell you which parts of your 
program are the slowest so that you can tune the code in the most 
appropriate way. gprof lets you compile a modified version of 
your program that will dump a performance report when it’s 
finished. Then the gprof command-line tool will let you analyze 
the performance report to track down the slow parts of your code. 

http:// sourceware.org/binutils/docs-2.2 2 /gprof/index.html 


gcov 

Another profiling tool is GNU Coverage (gcov). But while gprof 
is normally used to check the performance of your code, gcov is 
used to check which parts of your code did or didn’t run. This is 
important if you’re writing automated tests, because you’ll want to 
be sure that your tests are running all of the code you’re expecting 
them to. 


http://gcc.gnu.org/onlinedocs /gee / Gcov.html 


550 appendix i 


www.it-ebooks.info 


leftovers 


#9. Creating CUIs 

You haven’t created any graphical user interface (GUI) programs in 
any of the main chapters of this book. In the labs, you used the 
Allegro and OpenCV libraries to write a couple of programs that 
were able to display very simple windows. But GUIs are usually 
written in very different ways on each operating system. 

Linux — (rTK 

Linux has a number of libraries that are used to create GUI 
applications, and one of the most popular is the GIMP toolkit 
(GTK+): 


http:/ / www.gtk.org/ 

GTK+ is available on Windows and the Mac, as well as Linux, 
although it’s mostly used for Linux apps. 

Windows 

Windows has very advanced GUI libraries built-in. Windows 
programming is a really specialized area, and you will probably 
need to spend some time learning the details of the Windows 
application programming interfaces (APIs) before you can easily build 
GUI applications. An increasing number of Windows applications 
are written in languages based on G, such as G# and C++. For an 
online introduction to Windows programming, see: 

http:/ / www.winprog.org/tutorial/ 

The Mac — Carbon 

The Macintosh uses a GUI system called Aqua. You can create 
GUI programs in G on the Mac using a set of libraries called 
Carbon. But the more modern way of programming the Mac is 
using the Cocoa libraries, which are programmed using another 
G-derived language called Objective-C. Now that you’ve reached the 
end of this book, you’re in a very good position to learn Objective-C. 
Here at Head First Labs, we love the books and courses on Mac 
programming available at the Big Nerd Ranch. 


http://www.bignerdranch.com/ 


you are here ► 


551 


www.it-ebooks.info 


reference material 


*10. Reference material 

Here’s a list of some popular books and websites on G programming. 


Brian W. Kernighan and Dennis M. Ritchie, The C Programming Language 
(Prentice Hall; ISBN 978-0-131-10362-7) 

This is the book that defined the original G programming language, and 
almost every G programmer on Earth has a copy 


Samuel P. Harbison and Guy L. Steele Jr., C: A Reference Manual 
(Prentice Hall; ISBN 978-0-130-89592-9) 

This is an excellent G reference book that you will want by your side as 
you code. 


Peter van der Linden, Expert C Programming 
(Prentice Hall; ISBN 978-0-131-77429-2) 

For more advanced programming, see Peter van der Linden’s excellent book. 


Steve Oualline, Practical C Programming 
(O’Reilly; ISBN 978-1-565-92306-5) 

This book outlines the practical details of G development. 


Websites 

For standards information, see: 

http://pubs.opengroup.org/onlinepubs/9699919799/ 

For additional G coding tutorials, see: 
http: / / www. cprogramming. com / 

For general reference information, see: 
http: / / www. cprogrammingreference. com / 

For a general G programming tutorial, see: 
http://www.crasseux.com/books/ctutorial/ 


552 appendix i 


www.it-ebooks.info 


II c 


topics 




Ever wished all those great C facts were in one place? 

This is a roundup of all the C topics and principles we’ve covered in the book. Take a look 
at them, and see if you can remember them all. Each fact has the chapter it came from 
alongside it, so it’s easy for you to refer back if you need a reminder. You might even want 
to cut these pages out and tape them to your wall. 


this is an appendix 


553 


www.it-ebooks.info 






CHAPTER 1 


basics 





Blodk s-tatmen-ts ave 
suvvounded by { and }• 






swi-fc.dh statement e-r-ridiently 
dhedk -rov multiple values or a 

vaviable- 


H 

5i 

S? 


Bvevy program needs a main 
-rundtion- 



^indlude indludes extevnal 
dode -rov things like input and 
output- 



Youv souvde -riles should have 
name ending in -d- 


554 appendix ii 


www.it-ebooks.info 










CHAPTER 1 C ® APTER 1 


revision roundup 



You t&v\ use "the ff opera'fcor ow 
xhe dommand line xo only run 
your program i-f i"t Compiles. 


dounx-H" means add I XO dounx- 



■for loops are a more dompad^t 
v/ay or writing loops. 







you are here ► 555 


www.it-ebooks.info 











CHAPTER 2 CHAPTER 2 CHAPTER 2 CHAPTER 2 CHAPTER 2 


pointers 


Pointers and memor y 


sda^r/oi", fy.) will alloy/ a usev 
•to ctvtcv a numbev x dived'tly- 


Initialize a new avvay wi-tb a 
string, and rt will dopy i-t- 



556 




appendix ii 



A dbav poin-te v vaviable x is 
dedlaved as dbav -*x. 





H 

Si 

© 


fx is dal led a point* v -to x. 



Avvay vaviables dan be used 

point*vs. 



-(•^ctstbu-P, size, stdin) is a 
sirwplev way t» entev -text- 


www.it-ebooks.info 













CHAPTER 2.5 [ CHAPTER 2.5 CHAPTER 2.5 CHAPTER 2 


revision roundup 


Strin g's 


Liberal shrinks are sbored in 
read-only memory. 


An avvay or shrinks is an array 
or arrays. 


sbrsbrta, b) will reburn bbe 
address or string b in string a 



strda’tO dondabenabes bwo 
strings bo<jebber. 


io 


H 

p_, 

58 

w 

t 3 


sbrdpyO dories one string bo 
anobber. 


ir> 


H 

p_, 

w 

t3 


Tbe sbrintyb header donbains 
use-rul sbrinQ rundbions. 


io 

e^ 


H 

P-t 

58 

w 

t 3 


You dreabe an array or arrays 
usinQ dbar shrinks C..JC...3. 


io 


H 

P-t 

58 

w 

t 3 


sbrdmpO dompares bv/o shrinks. 


io 


H 

p_, 

58 

w 

t 3 


sbrdbrO -finds bbe lodabion or 
a dbaradber inside a sbrinty 


io 

e^ 


H 

P-t 

58 

t3 



sbrlenO rinds bbe len<ybb or a 
;brinft- 


you 


www.it-ebooks.info 














data streams 


Data streams 



C -Pundtions like print-PO and 
sda^-rO use -the Standard 
Ou-tput ar»d Standard Input to 
dommunidate- 



The Standard Input v-eads 
-Prom -the keyboard by de-Pault 


CO 


g 

Tbe Standard Error is a 


separate output intended tor 

© 

error messages. 


CO 


g 

You dan dreate dustom data 

© 

streams with -ropenO'tilename”) 

mode). 



Tbe Standard Output goes to 
tbe display by de-Pault- 



You dan dbange where tbe 
Standard Input) Output) and 
Error are donnedted to using 
rediredtion- 



You dan print to tbe Standard 
Error using, -Pprint-P^stderr,...). 


CO 


H 

Tbe mode dan be 'w to write) 

% 

© 

■ 

"r w to read) or "a” to append- 


558 appendix ii 


www.it-ebooks.info 











CHAPTER 3 


revision roundup 


Command— \\y\c av^umen'fcs ave 
passed *to ^ainO as an av"\ray o*f 

string poin-tevs. 


CO 


H 

5i 

© 


The ^e'fcop'tO -Pundtion makes i-t 
easiev x» vead dommand-Trne 

options. 


you are here ► 559 


www.it-ebooks.info 




data types 











e 

Use doubles -fov veally pvedise 

5j 

© 

l 

-floating points- 



Use lottos -fov ve 

numbevs. 


ally bi^ whole 





Use ints -fov most whole 
numbevs. 



Use -floats -rov most -floating 
points- 



560 appendix ii 


www.it-ebooks.info 









revision roundup 






Save object todt m-to -files -to 
speed up you\r builds. 







you are here ► 561 


www.it-ebooks.info 









structs 


Structs 







s 

•typede-C lets you dvea-te an 

% 

© 

alias -fov a da-ta -type- 




Desi^na-ted in'rtializjevs let you 
set stvud"t and union -fields by 


562 appendix ii 


www.it-ebooks.info 









CHAPTER 5 


revision roundup 


Unions and bitfields 





you are here ► 563 


www.it-ebooks.info 







CHAPTER 6 


data structures 


Data structures 


vo 


H 

% 

s? 


Pyramid data stvudtuves use 
veduvsive stvudts- 


i 





% 


A linked list is move extensible 

than an away- 


vo 



5i 

© 


Reduvsive stvudts dontain one 
ov move links to similav data* 



VO 


H 

aj 


Data dan be insevted easily 
into a linked list- 


1 


564 appendix ii 


www.it-ebooks.info 







CHAPTER 6 M RAFTER 6 f chapter 6 B CHAPTER 6 


D ynamic memor y 


revision roundup 


The stadk is used -ror I odd I 
variables. 



Unlike "the stadk, heap memory 
is no-t au-fcomatidal released- 



strdupO will dreaie a dopy or 
a strift^ oft -the heap- 




A memory leak is allodaied 


memory you da« fto loftier 

3 

addess. 

© 





val^riftd dan help you "tradk 
dov/ft memory leaks. 


you are here ► 565 


www.it-ebooks.info 











CHAPTER 7 


advanced functions 


Advanced functions 




Fundtion pointers let you pass 
tundtions around as it ■they 
were data- 


The name ox every tundtion is 
a pointer to the tundtion- 




Arrays ox tundtion pointers 
dan help run di-rterent 
tundtions tor di-rterent types 
o-P data. 






Fundtion 

pointers are the only 

p 

pointers 

that don’t need the 

Ss 

and f 

operators, but you dan 

© 

use therr 

« it you want to. 




Co r*para"tor ‘fufidtiOKS decide 
how “to order -two piedes o£ 

data. 


566 appendix ii 


www.it-ebooks.info 










CHAPTER 7 


revision roundup 




Fundtions wi-tb 3 variable 
number o-r arftumen'ts are 
dalled "variadid " 



you are here ► 567 


www.it-ebooks.info 




static and dynamic libraries 




#indlude <> looks m standard 
diredtories Sindh as /usr/indlude 


0© 


g 

-L<name> adds a diredtory to 

© 

the list or standard library 

diredtories. 



-l<name> links to a -file in 
standard diredtories sudh as 
/ usr/lib- 


o© 


g 

-X<nar»e> adds a diredtory to 

& 

© 

the list or standard indlude 

diredtories. 



The ar domwand dreates a 
library ardhive or objedt -riles 


o© 


H 

Library ardhives have names 

Si 

© 

like libsomethintya. 



o© 


H 

% 

© 


M ^dd -shared” donverts objedt 
-riles into dynamid libraries. 


568 appendix ii 


www.it-ebooks.info 












CHAPTER 8 


revision roundup 



0© 


g 

Pyramid libraries have 

© 

di-rrercK'fc names on di-f-ferent 

operating systems. 


o© 


H 

Pyramid libraries have so, 

2s 

© 

dylib, -dll, or -dlla extensions. 


you are here ► 569 


www.it-ebooks.info 





processes and communication 









e*edlO — list ox av^s. 

e*edleO — list o-r av^s + cuvivoumcnt- 

e*edlpO — list ox av$s + seavdh on path. 

e*edvO — avvay o-V av^s. 

cx-ddveO — avvay ox av^s + envivonment- 

e*edvpO — away ot av^s + seavdh on path 




570 appendix ii 




www.it-ebooks.info 










revision roundup 






© 


pt 

A f>vo<yra»* da* send signals bo 

2s 

© 

1 

rfcsel-P v/i'tK vaiseO. 




© 


s 

% 

© 

L_ 

alavmO sends a Sl^AL-RM 

a-C-fcer a -few sedonds. 



you are here ► 571 


www.it-ebooks.info 










CHAPTER 11 


sockets and networking 







Sewers BLAB : 

i 

B — b'mdO 

H 

L — listenO 

Ph 

w 

A - addep-t.0 

o 

B — Bc^’m -talk'm^. 



Use -rorkO -fco dope wrth 
several dliervts a-t or»de- 




572 appendix ii 


www.it-ebooks.info 










CHAPTER 12rCHAPTER 12 c 5APTER 12p chapter 12 chapter 12 


revision roundup 


Threads 




Threads allow a process -to do 
more -char» orte xh'm<\ ax the 
same -time- 


P0£|)< -threads (p-thread) is a 
-threading library. 


p-thread_joirtO will wa'rt -for a 
■thread "to -(-'Irtish. 


l-f -two -threads read and 
upda-te -the same variable, your 
Code will be unpredictable- 


p-thread__mu-tex__lockO crea-tes 
a muxe* on Code- 



5 j 

© 


e^ 




as 

© 


p-thread__crea-teO crea-tes a 
■thread "to rurt a -runC-tion. 




H 

5j 

© 


Threads share -the same global 
variables. 




H 

5j 

© 


/k|u-te*es are locks -tha-t 
pro-tec-t shared da-ta. 




H 

S3 

© 


p-thread_mu-te*_urt!oekO 
releases -the mu-te*. 


www.it-ebooks.info 


you are here ► 


573 







www.it-ebooks.info 


Index 


Symbols & Numbers 

$ (dollar sign), $%, $ A , and $@ compiler commands for 
makefiles 548 

\0 sentinel character 12 

& (ampersand) 

bitwise AND operator 20, 541 
&& (logical AND) operator 18, 20 
reference operator 43, 48 
< > (angle brackets) 

>> (bitwise shift left) operator 541 
in header files 180, 354 
redirecting Standard Input with < 111 
redirecting Standard Output with > 112, 430 
redirection using > and 2> operators 432 
* (asterisk) 

accessing array elements 61 
indirection operator 48 
in variable declarations 74 
A (caret), bitwise XOR operator 541 
, (comma) 

separating expressions 541 
separating values in enums 255 
{ } (curly braces) 

enclosing function body 6 
enclosing statements 14 
. dot notation, setting value of unions 248 
. (dot) operator, reading struct fields 222 
... (ellipsis) 345 


= (equals sign) 

assignment operator 13 
== (equality) operator 13 
! (exclamation mark), not operator 18 
# (hash mark), beginning preprocessor directives 542 
- (minus sign) 

— (decrement) operator 13, 540 
negative numbers and command-line arguments 155 
prefacing command-line options 155 
-= (subtraction and assignment) operator 13 
() (parentheses), caution with, when using structs 240 
% (percent sign) 

%li format string 52 
%p format string 48, 52 
(pipe symbol) 

bitwise OR operator 20, 541 
connecting input and output with a pipe 131 
(logical OR) operator 18, 20 
+ (plus sign) 

+= (addition and assignment) operators 13 
++ (increment) operator 13, 540 
-> pointer notation 241, 245 
? (question mark) 540 

?: (ternary) operator 540 
(quotation marks, double) 
enclosing strings 13 
in header files 180, 354 
” (quotation marks, single) in strings 13 


this is the index 575 


www.it-ebooks.info 


the index 


; (semicolon), separating values in structs and unions 255 
/ (slash) 

/* and */ surrounding comments 8 
/ / beginning comments 8 
] (square brackets) 
array subindex operator 61 
creating arrays and accessing elements 96 
in variable declarations 74 
~ (tilde), bitwise complement operator 541 
_ (underscore), replacing spaces in web page name 498 
8-bit operating systems 168 
32-bit operating systems 168 
size of pointers 54 
64-bit operating systems 168 
size of pointers 54 

A 

accept() function 471 
AceUnit framework 545 
alarm() function 458 

calls to, resetting the timer 459 
sleep() function and 458 
alarm signal, SIGALRM 458 
Allegro library 526 

creation of game elements 527 
AND operator (&) 20, 541 
AND operator (&&) 18, 20 
animation, using transformations 535 
ANSIC 2 
Arduino 207—216 
Arduino board 209 
building the physical device 210 
G code for, what it does 212 


finished product 215 
plant monitor and moisture sensor 208 
useful functions 214 
writing G code in Arduino IDE 209 
args parameter 345 
arguments, function 32 

fixed argument in variadic functions 345, 346 
array functions, execv(), execvp(), and execve() 406 
arrays 11 

array of arrays versus array of pointers 98 
assigned to pointers, pointer decay and 59 
char pointers versus char arrays in data structure 286 
creating array of arrays 85, 96 
fixed length of 268 
of function pointers 338-342 
indexes 13, 61 
length of 13 
linked lists versus 274 
strings as character arrays 12 
structs versus 220, 225 
using to copy string literals 74 
variables declared as 74 
array variables 

differences from pointers 59 
use as pointers 54 

Assembly language, translation of G code into 184 
assignments 

= (assignment) operator 13 
chaining 33 

compound assignment operators 13 
struct assigned to another variable 226 
struct to another struct 238 
associated arrays or maps 296 
asteroids (Blasteroids game) 533 
autoconf tool 202 


576 index 


www.it-ebooks.info 


the index 


automated testing 545 

automating builds with make tool 198 

B 

binary literals, not supported in G 261, 265 
binary numbers 163 
binary trees 296 

binary values, converting between hexadecimal and 261 
binding to a port 470 
bitfields 262, 265, 563 

using to construct customer satisfaction survey 
(example) 263 

bit size of computers 168 

bits, operators for manipulation of 541 

bitwise AND operator (&) 20, 541 

bitwise complement operator (~) 541 

bitwise OR operator (|) 20, 541 

bitwise shift left operator (<<) 541 

bitwise XOR operator ( A ) 541 

BLAB: Bind, Listen, Accept, Begin 470 

Blasteroids game. See game, Blasteroids project 

blasts fired by spaceship (Blasteroids game) 532 

block statements 14 

body of a function 6 

boolean operators 18 

boolean values, representation in G 18 

bound port, reuse by socket 477 

break statements 26, 28, 39 

exiting loops 31 

not breaking out of if statements 31 
buffer overflows caused by scanf() function 66 
build tools 202 

CMake 526 
bus errors 13 


c 

G 

basics of 554 
how it works 2 

reference materials for programming 552 
similarities to and influence on other languages 39 
C++ 39 
Gil standard 2 

c89 notation for first field of a union 248 

G99 standard 2 

cameras 

grabbing image from webcam 392 
showing current webcam output 393 
taking input from computer camera 392 
Carbon libraries 551 
card counting 16 

program for, writing in G 17, 19—21 

modifying program to keep running count of card 
game 35 

testing program 38 
case statements 26, 28 
casting floats to whole numbers 164 
chaining assignments 33 
char** pointer 320, 333 
char type 159, 161 
arithmetic with 182 

char pointers versus char arrays in data structure 286 
defined 162 

checksum() function 352 
child process 420, 450 

clients talking to server 486 
listening to directly 442 
piped commands on command line 443 
redirecting Standard Output to file 435-440 
running with fork() and exec() 421—425 


you are here ► 577 


www.it-ebooks.info 


the index 


classes, structs versus 225 
CMake 526 
Cocoa libraries 551 
collisions 529 
command-line arguments 

avoiding ambiguity by splitting main arguments from 
options using — 155 

execl(), execlp(), and execle() functions 405 
main() function with 141 
command-line options 148 

questions and answers on 155 
using getopt() function for 149 
command line, piping commands together on 443 
command path 409 
commands, types of 14 

comma-separated data, reading and displaying in JSON 
format 105 

comma (,), separating expressions 541 
comments 5 
formatting 8 

comparator functions 327-333 

writing for different sort descriptions 328-333 
compilation 2 

automating builds with make tool 198—205 
behind-the-scenes look at 184 
compiling a program using gcc 9 
partial compiles 191-196 
precompilation and 180 
reason for compiling C 39 

speeding up for programs in multiple source hies 189 
compiled code, saving copies of 190 
compilers 9. See also gcc 

BE the Compiler exercise 23 
C standard supported by 8 
debug information from 308 
Ending standard header hie directories 355 
interview with gcc 22 
conditional compilation 542 

578 index 


connection, accepting from client 471 
constants 

dehned 80 
string literals as 7 3 
const char 218,220 
const keyword 76,79 
continue statements 31,39 
control statements 14 
convert command 449 
count variable 543 

create() function, using dynamic allocation 282, 284 
hxing with strdup() function 286 
CreateProcess() function (Windows systems) 426 
C Standard Library 127 
Ctrl-C, stopping programs 451 
curl/wget programs 449 
cvCalcOpticalFlowFarneback() function 393 
cvCreateCameraCapture() function 392 
cvNamedWindow() function 393 
cvQueryFrame() function 392 
cvShowImage() function 393 
Gygwin 449 

fork() function and 426 

including PATH variable when passing environment 
variables on 407 

installing before calling fork() on Windows 420 
telnet program 468 

D 

data entry 

capabilities of scanf() versus fgets() 68 
fgets() as alternative to scanf() 67 
using pointers for 65 
data streams 

creating your own 138 
duplication with dup2() function 433 


www.it-ebooks.info 


the index 


handling in a typical process 431 
opening, checking for problems with 147 
printing to 122 

replacement by redirection 432 
sockets 470 

summary of important points 558 
typical data streams versus sockets 472 
data structures 

questions and answers about 274 
summary of important points 564 
types other than linked lists 295 
datatypes 158 

bytes in memory occupied by, getting with sizeof 280 
casting floats to whole numbers 164 
data not having single type 246 

errors caused by conflicting types in example program 
170 

macros determining size of 544 

matching type of value to type of variable it’s stored 
in 163 

no function data type in G 319 
parameters in variadic functions 349 
pointer variables 62 

prefixing with unsigned or long keywords 164 
process ID 423 
quick guide to 162 
size of 167 

sizes on different operating systems 168 
structs 220 
summary of 560 
unions 249 

values stored in unions 254 
deadlocks 520 
debugger, gdb 550 
decay 59 


decimal point numbers. See also floating-point numbers; 
float type 

computers’ representation of 168 
declarations 
defined 79 

function, splitting from definition 173, 561 
decrement operator (--) 13, 540 
#define directive 542 

definitions, function, splitting from declaration 173, 561 
dependencies 198 

identifying for make tool 199 
dereferencing 48, 52 
descriptor table 

important points about 440 
Standard Input, Output, and Error in 432 
designated initializers 248, 265 

setting initial values of struct fields 249 
design tips for small tools 129 
/dev/tty program 441 
development tools 550 
device drivers 403 
DNS (domain name system) 493 
domain names 491 

connecting client socket to remote domain name 492 

creation of sockets with IP addresses or domain names 
499 

double type 159, 161 
defined 162 
doubly linked lists 296 
do-while loops 29, 39 
dup2() function 433 
dynamic libraries 351, 568 
dynamic memory 565 
dynamic storage 276-280, 294 
using the heap 278 


you are here ► 579 


www.it-ebooks.info 


the index 


E 

echo command 401 
ellipsis (...) 345 

email, sending from command line 449 
encrypt() function 352 
encryption, XOR 182 
enums 255, 260 

responses in mail merge program (example) 334 
tracking values stored in structs and unions 256-259 
environment variables 

parameters for execv(), execvp(), and execve() 
functions 406 

parameters for exel(), execlp(), and execle() functions 
405 

reading and passing to functions 407 
equality operator (==) 13 
err no variable 408 

error handling, avoiding writing duplicate code for system 
calls 434 

error messages 

converting err no into 408 

displaying when Standard Output is redirected 118 
Standard Error 120 
/etc/services hie 472 
.exe hies (Windows) 10 
exec() functions 404, 427 

array functions, execv(), execvp(), and execve() 406 

failures of calls to 408 

important points about 411 

list functions, execl(), execlp(), and execle() 405 

many versions of 405 

order-generation program, Starbuzz coffee (example) 
412-415 

program searching many RSS feeds at once (example) 
418 

program termination after call to 420 

running child process with fork() and exec() 421—425 

running /sbin/ifconhg or ipconhg (example) 409 

580 index 


execle() function 407 
failures of 408 

program searching many RSS feeds at once (exampl 
418 

executables 2, 185 
exit() function 434 

called by default signal handler for interrupt signal 
451 

important points about 441 
exit status of child process 439 
extern keyword 186 

F 

Feldman, Stuart 202 
fgets() function 450, 451 

as alternative to scanf() 67 
using for data input, scanf() versus 68 
hie descriptors 431 

descriptor tables 441 
hleno() function 433 
hies, making program work with 109 
hlters 109 

hnd() function 313-315 

other types of searches 321 
hoating-point numbers 159 

handling with boats and doubles 168 
hoat type 159 

casting to whole numbers 164 
dehned 162 
finding size of 167 
fopen() function 138 

problem opening data stream 147 
fork() function 420, 427 

creating a process for each client 486 
important points about 426 

running child process with fork() + exec() 421—425 
calling fork() 423 


www.it-ebooks.info 


the index 


for loops 30, 39 

format strings, passing to scanf() function 65 
formatted output, display by printf() function 6 
fprintf() function 122 

updating example mapping program to use 123 
freeaddrinfo() function 493 
free() function 279 

call interception by valgrind 308 
releasing memory with 280 
tracking calls to with valgrind 302 
fscanf() function 122 
functions 5,311-350 

advanced, summary of important points 566 
Arduino 214 
hnd() function 313-315 
macros versus 346 
main() function 6 
no function data type in G 319 
operators versus 56 
order in a program 171 
order of running in a program 96 
passing as parameter to another function 317-324 
creating function pointers 320 
identifying function pointers 324 
passing code to 316 

passing pointer to variable as function parameter 47 
passing strings to 53 

passing struct to function that updates struct 238 
sorting data 325-342 

using function pointers to set sort order 326 
splitting declaration from definition 173, 561 
variables declared inside 43 
variadic 343—349 

writing example function 347—349 
void return type 33 
writing 32 


G 

game, Blasteroids project 523-538 
Allegro library 526 
asteroids 533 

blasting asteroids without being hit 525 
blasts fired by spaceship 532 
building the game 528 
finished product 536 
game status 534 
reading key presses 531 
spaceship 529 
spaceship behavior 530 
using transformations 535 
writing arcade game 524 
garbage collection, G and 294 
gee 9 

finding standard header hie directories 355 
GNU Compiler Collection 39 
interview with 22 
-I option 356 
optimizations 546 
standards supported 8 
warnings 547 
gcov (GNU Coverage) 550 
gdb (GNU Project Debugger) 550 
getaddrinfo() function 493 
GET command 490 
getenv() function 407 
getopt() function 149,155 
gets() function, reasons not to use 67 
globals 

defined 80 

variables declared outside of functions 43 
global variables 96 
count 543 
errno 408 

storage in memory 47 

you are here ► 581 


www.it-ebooks.info 


the index 


GNU Compiler Collection. See gee 
GNU Coverage (gcov) 550 
GNU Profiler (gprof) 550 
GNU Project Debugger (gdb) 550 
golden rules of failure 408 
gprof (GNU Profiler) 550 
grep command 443 
GTK library 551 

GUIs (graphical user interfaces), creating 551 

a 

hardware, kernel and 403 
header files 

angle brackets in 354 
creating 174 
forgetting to include 96 
function declarations in 173 
quotes and angle brackets in 180 
for shared code 186 
sharing between programs 355 
heap 

allocating and releasing memory 289 
allocating storage for string copy 285 
defined 80 

differences from the stack 292 
important points about 294 
releasing memory when you’re done 279 
using for dynamic storage 278 
hexadecimal literals 261 

hexadecimals, converting between binary and 261 
hex format, memory addresses 48, 52 
.h files. See header files 
hostname 490 

HTTP (Hypertext Transfer Protocol) 469, 490 


i 

IDE, Arduino 209 
if statements 14 

break statements and 31 
checking same value repeatedly 25 
replacing sequence of switch statement 27 
ignoring signals 459 
interrupt signal 456 
images 

converting image formats 449 
grabbing image from webcam 392 
#include directive 184, 542 
angle brackets in 354 
header files at different locations 356 
including header file in main program 174 
includes section, G programs 5 
increment operator (++) 13, 540 
indexes, array 13 
starting at 0 61 
indirection operator (*) 48 
infinite loops 39 
integers 159 

interprocess communication 429—466 

avoiding duplicate error-handling code for each 
system call 434 

catching signals and running your own code 452—456 

connecting processes with pipes 443 

death of a process 451 

duplicating data streams with dup2() 433 

examining a typical process 431 

finding RSS news stories and opening them in a 
browser 444—449 

getting descriptor with fileno() 433 

listening to child process directly 442 

processes redirecting themselves 432 


582 index 


www.it-ebooks.info 




the index 


program saving output of rssgossip.py script to file 435 
program testing math skills (example) 460—464 
questions and answers about 441 
redirecting input and output 430 
redirection replacing data streams 432 
resetting and ignoring signals 459 
sending alarm signal to processes 458 
summary of important points 570 
using kill command to send signals 457 
using raise() to send signals 457 
waitpid() function 438—440 
interrupt signal 451 
ignoring 456 
intruder detector 390 
finished product 394 
int type 159 

compiler assumption as return type for unknown 
functions 171, 181 

defined 162 

finding size of 167 

I/O (input/output) 

connecting input and output with a pipe 131-136 
displaying error messages when output is redirected 118 
output to more than one hie 137 
redirecting 430 

redirecting output from display to hies 109 
redirecting Standard Input with < operator 111 
redirecting Standard Output with > operator 112 
redirection 110 
ipconhg 409 

IP (Internet Protocol) 469 

IP (Internet Protocol) addresses 491 

converting domain names to 493 

creating socket for an IP address 492 

creation of sockets with IP addresses or domain names 
499 


J 

JSON, displaying comma-separated data as 105 

K 

kernel 403 

keypresses, reading 531 

kill command, using to send signals 45 7 

L 

LED 

G code writing to 212 
connecting to Arduino board 210 
libraries 

Allegro game development library 526 
GUI (graphical user interface) 551 
static and dynamic 568 
limits.h header, macros dehned in 544 
linked lists 269 
creating 271 

creating and releasing heap memory 287—291 
inserting values into 273 
linking object code hies 185,191 
Linux. See also operating systems 
GTK GUI library 551 
listen() function 471 
listen queue for clients 471 
list functions, execl(), execlp(), and execle() 405 
local variables, storage in stack 47, 278 
locks 513 

creating a mutex lock 514 

deciding where to put locks in code (example) 516-519 
long keyword 164 


you are here ► 583 


www.it-ebooks.info 


the index 


LONG_MAX macro 544 
long type 159, 161 
defined 162 

passing long values to thread functions 515 
loops 

breaking out of with break statement 31 
continue statement in 31 
running forever, infinite loops 39 
structure of 30 

Mac computers. See also operating systems 
Carbon library for GUIs 551 
script for talking to plants 215 
machine code 2, 185 
macros 139 
creating 542 
functions versus 346 
mail/mutt programs 449 
main() function 6 

with command-line arguments 141 
ending program with exit() instead of 441 
makefiles 200 

on different operating systems 202 
generation with autoconf tool 202 
make tool 198-205, 225 
additional features 548 
automating builds with 198 

converting Ogg Vorbis music hie to Swing version 203 

different name on Windows 199 

how it works 199 

implicit rules to build hies 549 

uses other than compiling code 202 


malloc() function 278 

asking for memory with 280 
call by strdup() function 294 
call interception by valgrind 308 
tracking calls to with valgrind 302 
memory 41, 565 
addresses 47 

allocating heap memory and releasing it 289 
G toolbox 81 

differences between the stack and the heap 292 
freeing by calling free() function 279, 280 
getting with malloc() function 278 
kernel control over 403 
order of segments in 79 
overview of computer memory 43 
and pointers 556 
questions and answers about 52 
requesting with malloc() function 280 
reuse of space with unions 247 
string literals stored in read-only memory 7 3 
structs stored in 226 
summary of segments 80 
memory leaks 279 

avoding when using data structures 296 
tracking and hxing using valgrind tool 302—308 
mingw32-make 199 

MinGW, spaces in command-line arguments 405 
mkhfo() function 450 
moisture sensor 
building 210 
G code reading from 212 
connecting to Arduino 211 
movement, detecting 393 
mutexes 513 

causing deadlocks 520 
creating a mutex lock 514 


584 index 


www.it-ebooks.info 


the index 


N 

named pipes 450 
nested structs 227 

network configuration, commands for 409 
networking. See sockets and networking 
NMAKE tool 199 
not operator (!) 18 

NULL value, following last command-line argument in 
exec() function parameters 405 

o 

object code 185 

saving copies into files 190 
object files, sharing between programs 355 
Objective-G 39,551 
object orientation 39 
.o files 355. See also object code 

Ogg Vorbis music file, converting to Swing version 203 
OpenCV 389-394 

G code, what it should do 392 
defined 391 
finished product 394 
installing 391 
intruder detector 390 
operating systems 

commands to open a URL 446 
controlling programs with signals 451 
different sizes of data types on 167, 168 
GUI libraries for 551 
interview with 127 
kernel 403 

listing processes running on system 404 


makefiles and 202 

network configuration commands 409 
OpenCV 391 

registering new item in file descriptor table 433 
Standard Input and Standard Output 110 
system calls 398 
telnet program 468 
operators 540 

functions versus 56 
precedence of 240, 243 
op targ variable 149, 155 
optimization 546 
op find variable 149 
OR operator (|) 20,541 
OR operator (| |) 18, 20 

p 

parameters, function 6, 32 
passing by value 238 
parent process 420, 450 

piped command on command line 443 
server 486 

partial compiles 191-196 
PATH variable 406 

including when passing environment variables on 
Cygwin 407 

performance, analyzing with gprof 550 
PIDs (Process Identifiers) 404 

pid_status parameter of waitpid() function 441 
pid_t in call to fork() 423 
waitpid() function parameters 439 
pipe() function 450 

connecting Standard Output of child and Standard 
Input of parent processes 444 


you are here ► 585 


www.it-ebooks.info 


the index 


connecting input and output 131—136 

connecting output of rssgossip.py to input of program 
444-449 

connecting processes with 443 
important points about 450 
pointer arithmetic 

and array index starting at 0 61 
and data types of pointer variables 62 
important points about 64 
pointer notation with structs 241 
pointers 42 

address of variable in memory 43 
array of arrays versus array of pointers 98 
array variables as 54 

char pointers versus char arrays in data structure 286 
conversion to ordinary number 56 
G toolbox 81 

differences of array variables from 59 
hie 433 

function 318—324, 324, 566 
arrays of 338—342 
creating 319 

summary of important points 342 
using to set sort order 326 
making it easier for functions to share memory 47 
passing pointer to variable as function parameter 47 
questions and answers about 52 
in recursive structures 271 
set to string literals, avoiding 76 
sizes on different computers 56 
and structs assigned to another variable 226 
to structs 239 

summary of important points 556 
types assigned to pointer variables 62 
using for data entry 65 
using to read and write data 48 


variables declared as function arguments 74 
void 506 

port, binding to 470 

port number for server application, caution in choosing 

472 

PO SIX libraries 149 
POSIX thread library (pthread) 506 
linking 508 
precompilation 180 
preprocessing 180 

fixing the source 184 
preprocessor directives 542 
printf() function 6 

reading from keyboard and writing to display 110 
variable number of arguments 343 
printing to data stream with fprintf() function 122 
private scope 543 

processes. See also interprocess communication 
cloning with fork() function 420 
communication, summary of important points 570 
control by kernel 403 
examining a typical process 431 
redirecting themselves 432 

replacement of current process using exec() functions 
404 

running child process with fork() + exec() 421—425 

server and client, creating processes for clients with 
fork() 486 

simple, doing one thing at a time 504 
speed of, threads versus 520 
using for simultaneous tasks, limitations of 503 
Process Identifiers. See PIDs 
profiling tools 550 
programs 

compiling and running 9 
complete G program 5 

exercise, matching candidate block of code with 
possible output 34, 36 


586 index 


www.it-ebooks.info 


the index 


protocols 469, 490 
ps -ef command 404 
pthread_create() function 507 
pthread_join() function 507 
PTHREAD_MUTEX_INITIALIZER macro 514 
pthread_mutex_lock() function 514 
pthread_mutex_unlock() function 514 
pthread (POSIX thread) library 506 
linking 508 
Python 

installing 416 
RSS Gossip script 416 

0 , 

qsort() function 326 

E 

raise() command, sending signals with 457 
recursive structures 294, 564 
creating 271 
recv() function 478, 493 
redirection 110 

child process output to hie 435—440 
descriptor table and 441 

displaying error messages when output is redirected 
118 

output from display to hies 109 
processes redirecting themselves 432 
programs run from command line 430 
replacement of data streams 432 
several processes connected with pipes 136 
Standard Input, using < operator 111 
Standard Output, using > operator 112 
reference operator (&) 43, 48 
references, pointers versus 52 


reserved words in G 181 

return statements in functions 32, 39 

return type 6 

compiler assumptions for unknown functions 171 
void return type for thread functions 506 
return values, assignments 33 
reusing code 182 
RSS feeds 

program saving output of rssgossip.py script to hie 435 

program searching many feeds at once (example) 
417-425 

running rssgossip.py in separate process for each 
feed 422 

reading news with 416 

reading story links from rssgossip.py script 442 

running rsscossip.py script and opening stories in 
browser 444 

RSS Gossip (Python script) 416 
running programs 9 

S 

ifconhg program 409 

/sbin/ifconhg program 409 

scanf() function 65,79 

causing buffer overhows 66 

fgets() function as alternative to 67 

passing pointer to variable to scanf() 239 

using for data input, fgets() versus 68 

screen, redirecting data to, without using Standard 
Output 441 

security, system calls and 402 
send() function 472, 493 
sentinel character \0 12 

serial port, writing to (G code in Arduino) 212 
setitimer() function 459 
sharing code 182-187,355 
.h header hies 356 


you are here ► 587 


www.it-ebooks.info 


the index 


short type 159, 161 
defined 162 

SHRT_MIN macro 544 

shunit2 tool, testing scripts and commands 545 

sigaction() function 453 

sigaction structs 452 

SIGALRM signal 458 

SIGKILL signal 457 

signals 451 

catching and running your own code 452—456 
ignoring 459 

matching to cause (example) 455 
order of sending and receiving 465 
program testing math skills (example) 460—464 
resetting to default handler 459 
sending using kill command 45 7 
sending using raise() 457 
signed values in binary 163 
SIGTERM signal 457 
single statement 14 

size limits for data types, macros determining 544 
sizeof operator 53, 56 

getting bytes in memory occupied by particular data 
type 280 

use on pointers and array variables 59 
using with fgets() function 67 
sleep() function 508 

alarm() function and 458 
small tools 

connecting input and output with a pipe 131-136 
converting data from one format to another 104—107 
designing, tips for 129 
different tasks need different tools 130 
flexibility of 128 
output to multiple files 137 
sockets and networking 467—500 

clients obtaining a socket and communicating 491 
client sockets, creating socket for a domain name 493 

588 index 


client sockets, creation and connection to remote port 
492 

creation of sockets with IP addresses or domain names 
499 

G toolbox 500 

fork() a process for each client 486 

how servers talk to the Internet 470 

Internet knock-knock server (example) 468 

other useful server functions 479 

reading from the client 478 

server can only talk to one client at a time 485 

server code changed to fork child process for each 
client 487—489 

server generating random advice for clients (example) 
473 

sockets not your typical data streams 472 

summary of important points 572 

writing a web client 490, 494—498 

writing code for Internet knock-knock server (example) 
480-484 

sorting 325-342 

using function pointers to set sort order 326 

writing comparator functions for different sorts 
328-333 

source files 2 

compiling and running 9 

multiple files for code 561 

spaceship (Blasteroids game) 529 

behavior of 530 

stack 43 

defined 80 

differences from the heap 292 
storage in 278 
Standard Error 120, 558 

default output to display 121 
in descriptor table 432 
redirecting with 2> 122,432 
standard header directories 355 
standard header files 180 


www.it-ebooks.info 





the index 


Standard Input 122,558 

connecting to Standard Output of another process 131 
in descriptor table 432 
redirecting 110 

redirecting with < operator 111 
Standard Output 558 

connecting to Standard Input of another process 131 
in descriptor table 432 
redirecting child process output to hie 435 
redirecting to hie 112, 430 
standards 2 

compiler support of 8 
designated initializers 248 
PO SIX libraries 149 
return statements in functions 32 
statements 14 
static keyword 543 
static libraries 351,568 
stdarg.h header 345 
storage, hexible 268 
strcmp() function 331,333 
strdup() function 285 

calling malloc() function 294 

fixing create() function that uses dynamic allocation 286 
strerror() function 408 
string.h header hie 86 

more information about functions in 95 
string literals 13 

char pointer set to, avoiding 76 
important points about 79 
inability to update 7 2 
strings 11,83-102 

array of arrays versus array of pointers 98 

BE the Compiler exercise, jukebox program (example) 
91 

changing, using copy for 74 
as character arrays 12 
code shuffling letters in 69-72 


copying 285 

creating array of arrays 85 
crossword puzzle (example) 99 
C toolbox 101 

displaying string backward on screen 97 
ending with sentinel character \0 12 
passing to functions 53 
searching 84, 86 

Pool Puzzle example 90 
review of jukebox program (example) 94 
testing jukebox program (example) 95 
Standard Library, string.h 86-88 
arrays of, char** pointer to 320 
summary of important points 557 
using strstr() function 89 
strstr() function 89 
structs 217-246, 260, 274 
arrays versus 220, 225 
assignment 238 
benehts of using 221 
bithelds collected in 262 
creating aliases for with typedef 232 
designated initializers setting initial value of helds 249 
enums tracking values stored in 256-259 
holding sequence of single bits for yes/no values 261 
in memory 226 
nesting 227 
pointer notation 241 
pointers to 239 

reading helds with . (dot) operator 222 
recursive structures 271, 294 
summary of important points 562 
updating 236 

using bithelds in customer satisfaction survey 
(example) 264 

using with unions 249 

values separated with semicolon (;) 255 

wrapping parameters in 221 


you are here ► 589 


www.it-ebooks.info 


the index 


structured data types. See structs 
switch statements 26 

rewriting code to replace sequence of if statements 27 
summary of important points about 28 
symbols, storing in enums 255 
system calls 398, 427 
accept() function 471 

avoiding writing duplicate code for error handling 434 
checking for errors on 474—477 
exec() functions 404—410 
failures of 408 

order-generation program, Starbuzz coffee 
(example) 412—415 

program searching many RSS feeds at once 
(example) 418 

fork() function, cloning processes with 420 

getenv() function, reading environment variables 407 

important points about 411 

listen() function 471 

mkhfo() function 450 

running child process with fork() and exec() 421—426 
security breaches 402 
system() function 398, 426, 427 
exec() function versus 411 
opening a web page in a browser 446 

T 

tab character, beginning recipe lines for makefiles 200, 202 
target hies 198 

describing in makefiles 200 
taskmgr command (Windows) 404 
tasks, sequential or parallel 502 
telnet program 468 
ternary operator (?:) 540 
testing, automated 545 


threads 501-522 
creating 506 

using pthread_create() 507 
G toolbox 521 

deciding where to put locks in code (example) 516— 
519 

important points about 520 
multithreaded programs 505 
mutexes 513 

passing long values to thread functions 515 
program counting down beers (example) 509—511 
single threads of execution 504 
summary of important points 573 
thread safety in code 512 
using mutex to control execution 514 
timers for processes 459 
transformations 535 
true and false values 19 
typedef command 

creasting aliases for structs 232 
recursive structures and 271 

TJ 

unions 246, 260, 563 

enums tracking values stored in 256-259 
important points about 265 
reuse of memory space 247 
setting value of 248 
using with structs 249 
values separated with semicolon (;) 255 
values stored in, data types of 254 
unistd.h header 149 

unsigned keyword, prefixing data types with 164 

URLs, opening on various operating systems in web 
browser 446 


590 index 


www.it-ebooks.info 



the index 


v 

valgrind tool, using to find memory leaks 302-308 
values 

copied when assigning structs 238 

matching data type to type of variable it’s stored in 
163 

parameters passed to functions 238 
storing short-range values in bitfields 262 
variables 

matching data type for value stored in 163 
sharing among code files 186 
storage in memory 43 
using to shorten makefiles 548 
variadic functions 343—349 

writing example function 347—349 
virtual memory size 403 
void functions 33, 39 
void pointers 327,506 

¥ 

waitpid() function 438—440 
important points about 441 
parameters 439 
warnings, gee 547 

web browsers, opening a web page in 446 


websites for G 552 
WEXITSTATUS() macro 441 
while loops 29 

modifying in card counting program to keep running 
count 35, 37 

structure of 30 

summary of important points 39 
window, creating in OpenCV 393 
Windows systems. See also operating systems 

CreateProcess() function instead of fork() 426 
.exe files 10 

fork() function and 420, 426 

GUI libraries 551 

ipconfig command 409 

listing processes running on system 404 

make tools 199 

telnet program, built-in versus Gygwin versions 468 

X 

XOR encryption 182 

XOR operator, bitwise XOR ( A ) 541 


you are here ► 591 


www.it-ebooks.info 


www.it-ebooks.info 


