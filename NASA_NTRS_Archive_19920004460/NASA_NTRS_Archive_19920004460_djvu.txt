JRC 90-06 


A NATURAL LANGUAGE INTERFACE 
TO DATABASES 


Prepared by: 


D.R. Ford 

Johnson Research Center 
The University of Alabama in Huntsville 
Huntsville, AL 35899 


Prepared for: 

Tim Crumbley 
System Software Branch 
Information and Electronic Systems Lab 
George C. Marshall Space Flight Center 
Natinal Aeronautics and Space Administration 
Marshall Space Flight Center, AL 35812 


February 1990 


TABLE OF CONTENTS 


ABSTRACT.. 1 

1.0 Natural Language Interface to Databases 2 

1 . 1 Task Statement 3 

1.2 Task Conditions 3 

1 . 3 Task Approach 4 

1.4 Task Results 17 

Appendix A 19 

Appendix B 25 



ABSTRACT 


This paper presents the development of a Natural Language Interface 
“ (NLI) which is semantic-based and uses Conceptual Dependency 

I j j representation. The system was developed using Lisp and currently runs on a 

Symbolics Lisp machine. 

i I' 

i « ; 

! & 



1 


1.0 Natural Language Interface to Databases 

Natural languages are the languages used by people in the course of 
their daily affairs, for example, English, French, Japanese, etc. Natural 
languages are used to express a broad range of ideas to others. Given enough 
attention, nearly any concept that comes to mind can be conveyed to another 
person through a common natural language. Some concepts are easy to 
express, such as, "I am hungry," whereas others may require lengthy 
explanations. The prime characteristic of natural languages is that they can be 
used to express nearly all the concepts that occur to the people who speak and 
understand them. 

The word natural emphasizes a contrast with artificial languages. 
Artificial languages are those that have been designed to be highly expressive 
over a limited range of ideas. Musical notation is an artificial language. 

Another set of artificial languages is programming languages. These are 
interesting because, like natural languages, they can be used to express a 
broad range of concepts. LISP, for instance, is an extendable language, that is, 
if an idea is difficult to express in its current form, it can be improved at will. But 
programming languages have been designed with their application to 
computers in mind, and this has affected their form. Programming languages 
have been written so as to be analyzed easily by computers. 

Research in natural language understanding is concerned with making 
computers capable of using natural languages. There are two reasons for this. 
First, computers that can use natural languages would undeniably be a useful 
tool. It would mean that a person in need of information retrieval or information 
processing on a computer could obtain it without having to learn a computer 
language or go through an intermediary. They would not have to worry about 
becoming fluent in a "foreign" language and maintaining that fluency just to 


2 



accomplish their jobs. A computer that could use natural languages could read 
normal text, providing users with access to computer-generated summaries or 
reports synthesized from reading several text sources. 

The second motivation for natural language research is that it will 
increase our understanding of how human languages and minds work. To 
develop the technology for a computer to use language, we must first be able to 
say specifically what language is. We must be able to say precisely how the 
concepts we wish to express can be represented in the computer. Building 
computer programs requires this precision and attention to detail. A 
programming implementation of a theory of language can be used to identify 
flaws, inconsistencies, and areas of incompleteness that may go unnoticed. 

1.1 Task Statement 

The purpose of this task was to develop an interface to a database in 
order to determine the feasibility of such an interface. Also, the desirability of 
the interface was to be addressed. In addition, a secondary task was to gain a 
better understanding of what the capabilities of such an interface should be, 
and to determine some of the limits of this type of interface. 

1.2 Task Conditions 

The natural language interface was to be developed on a Symbolics 
3600 series Lisp machine using Symbolics Lisp. The interface should 
understand a limited subset of English in order to allow a user to query a 
database. The database should be located on another computer other than the 
Symbolic's machine that contained the interface. In addition, it should be on a 
completely different computer from the Symbolic's. There were no assumptions 


3 


or conditions placed on the means of communication between the Symbolic's 
machine and the computer with the database. 

1.3 Task Approach 

A NL Query generator prototype is being developed at the Johnson 
Research Center at the University of Alabama in Huntsville wherein queries, in 
natural language are generated for dbaselll+. The main program resides on a 
symbolics 3620 machine while the database resides on an IBM personal 
computer. The database is manipulated through commands from the 
Symbolics. The communication protocol is established via RS 232. The 
process of database query and results are shown by the following figure: 


A Graphic representation of the Natural Language Query 

Generator 



QUERY 


4 




The user types in a query in natural language on the symbolics. The 
parser translates it into Conceptual Dependency representation and generates 
a dbase query which is communicated to the PC via the RS 232. The RS 232 
was chosen over others as the main idea was to set up communications 
between the Symbolics and the P.C. The manipulation is performed on the 
database and the results are communicated back to the user on the symbolics. 
The significant point of the exercise is that the user is not restricted to using 
specific dbase commands for manipulating the database. He can do so in the 
manner and language he prefers (provided it is in English). 

The database is a simple one designed to represent the student records. 
It has been designed more to test the execution of the program and the 
generated queries. The following is a section of the database: 


RECORD# 


NAME 


ST. NUM 


S.S. NUM 


SEX 


AGE 


1 

2 

3 

4 

5 

6 

7 

8 

9 

10 
11 
12 

13 

14 

15 


Ash 

Dion 

John 

Mike 

Lisa 

Eddie 

Linda 

Cynthia 

Ben 

Gedro 

Paige 

Bernie 

Donnie 

Darlene 

Rica 


12345 

67897 

70601 

46893 

25789 

71214 

45109 

28633 

65432 

64646 

29099 

10001 

53200 

66677 

99999 



26 

28 

27 

26 

24 

24 
35 

25 

23 
33 

24 
38 
37 

25 
20 


5 












Execution of Database Manager Program on the P.C 

The DB_MGR.PRG program first runs the basic program 
GETQUERY.BAS which receives the query from the Symbolics and writes a 
Dbase III program called QUERY.PRG. DB_MGR.PRG then executes 
QUERY.PRG storing the results in RESULTS.TXT. DB_MGR.PRG then runs 
the basic program SENDRES.BAS which sends the contents of RESULTS.TXT 
back to the Symbolics. Finally, DB_MGR.PRG loops back to GETQUERY.BAS, 
waiting for the next query from the Symbolics. 

The words and the expressions are all defined in the dictionary. The 
database can handle all display and retrieve DBase commands from the 
Natural Language Query generator. 

Working Examples of the Interface 

1. The first example demonstrates the use of the verb "List" The word " List" is a 
dbase III command which performs , as the name suggests, the function of 
Listing the field names, required by the user. In this case, the user wants the 
Natural Language Query Generator ( NLQG) to generate a query for listing all 
the males in the database. The user presses the Select ■ key and the 
Natural Language Query Generator is displayed on the screen, with the prompt- 
Query. The user then types in the command: " List all males". The NLQG 
generates the query in Conceptual Dependency, the communication protocol is 
established with the P.C. and the command chain is established in the manner 
described above. The command is then executed in dbase III and the results 
flash for a second on the P.C. before they are communicated to the Symbolics 
and displayed there. The user types in his/her query in the the top half of the 
screen and the results are displayed on the bottom half of the screen. 


6 



The response to the query " List all males" is the Record number and the Names of all 
the males in the database. A printout of the screen is displayed below: 


Natural Language Query Generator 


nitiali z« Dictionary 


Set Up Help 


Issue Ob»*e Command* 


Query : 

Quary : 

Query : 

Query: fist all nele* 
Quary : 






Record* MAKE 

1 Rsh 

2 Dion 

3 John 
a nikt 
6 Eddie 
9 Ben 

10 Gedro 

12 Sarnia 

13 Donnia 






Mouse*R: Menu. 

To see other command-,, press Shift, Control, Meta-Shift, or Super. 


(Fr 1 23 Fab 9:95:57] ash 


User Input 


T>€LrfH.0U’s console idle 16 ninutes 


Figure 1 


7 



2. In the manner stated above, if the user wants to retrieve the names of all the 
females in the data base, he/she types in the command " List all females " The names 
of all the females in the data base will be displayed in the bottom half of the screen. 
The text above the output, i.e. 

(DISPLAY DB-FIELD-VALUE (DB-FIELD-VALUE VALUE ( T) OPERATOR <"=") 

FIELD (SEX))) 

is the Conceptual Dependency representation of the typed in text. It tells the 
computer to look in the data base records which have a value of " f " (meaning female) 
in the field "Sex" and display the contents of all the fields in the records matching the 
search. The query and the output are shown in the following figure: 


Natural Language Query Generator 


Initialize Dictionary Set Up Help Issue Dbase Commands 


Query : 

Query: 

Query: 

Query: list all nales 
Query: list all fenales 
Query: list all fenales 
Query : 


DiaJt 



8 Cynthi a [Abort] 

(DISPLRY DB-FIELD-VALUE ( OB-FIELD-VALUE VALUE Cf') OPERATOR ('s') FIELD (SEX))) 


Record* MAME 
5 Lisa 

7 Linda 

8 Cynthia 
11 Pel9* 

14 Darlene 

15 Rica 



Moir.f-H; Menu. 

To soo othor commands, pror.^ Shift, Control, Meta-Shift, or Super. 


'Fr i 23 Feb 9:11:43] Keyboard CL USER: User Input 

Figure 2 


8 





3. In this example, the user wants to retrieve the name of women, who are more than 
30 years of age. However, he is not restricted to the "List" or "Display" commands, 
which are DBase commands. He/she can just type in "show” and whatever records 
he/she wants to get and the Query Generator will retrieve it for him/her. Only one 
record matches the query and the same is displayed at the bottom of the screen. The 
output is shown in the following figure: 


Nut unit Language Query Generator 


Initialize Dictionary 


Set Up Help 


Issue Dbase Commands 


Query: 
Query: 
Query : 
Query : 
Query: 
Query : 
Query : 
Query : 


list all nates 
list all fenales 
list all fenales 

shou all uonen over 30 years of age 


Dialog 


15 Rica 

(DISPLAY DB-FIELD-VALUE 

(D0-FIELD-VALUE VALUE Cf) OPERAT Oft ('*■) FIELD (SEX)) 

D8-FIELD-VALUE 

(DB-FIELD-VALUC FIELD (AGE) OPERATOR (*>’) VALUE (MUflBER VALUE (30))) 
DB-FIELD 

(DB-FIELD NAME (AGE))) 


Record# NAME 
7 Linda 


AGE 

35 


hum 

m 


i«-R: Menu, 
no other comimnil'i 


[Frl 23 Feb 9:12:45] Keyboard 


Shift, Control, Hct.i-uhift, or Super. 


User Input 


CL USER: 


Figure 3 


4. To demonstrate the capability of the NLQG, we can use the following example. The 
user can use any word synonomous with "List " or "Display" in the manner and the 


9 




NLQG will retrieve the records required. The output and the query are shown in the 
following figure: 


Natural l anguage Query Generator 


Initiaiiz* Dictionary Set Up Help Issue Dba«e Commands 


Query: 

Query : 

Query ; 

Query: list all rales 
Query: list all Feneles 
Query: list all feneles 

Query: show all uonen over 30 years of age 
Query: show all nen less then 25 

[09:14:22 Fron RMDV : Your request of 2-'24/90 04:11:45 ('Screen Hardcopy') has finished printing on The Mayberry Gaeette.). 

Query: enunerate all 

Query: 


Dlali 



4 Mike 

5 Lisa 

6 Eddie 

7 Linda 

8 Cynthia 

9 Ben 

10 Gedro 

11 Paige 

12 Bernle 

13 Donnie 

14 Darlene 

15 Rica 

16 



Moiiso-R: Monti. 

To see other cotmn.iml’. , pross Shift, Control, Meta-Shift, or Super. 


CL USER: User Input 


Figure 4 



10 







5. In this example, the user wants to retrieve the name and Social Security Number of 
all the males in the data base. In stead of using the word "Retrieve," he/she uses the 
word "Get." The query and the result are shown in the folllowing figure: 


Natural Language Query Generator 



Moustt-R: Menu. 

I To see other qomin.»n< K 


Frl 23 Fib 9:56:29] Kiytooird 


Shift, Control, Hotg-Shift, or Super. 


User Input 


Figure 5 


11 




6. In this example, the user uses the word "Retrieve" to ddisplay the name and student 
number of all the males in the data base. The query and the output are shown below: 


Initialize Dictionary 


Nu turn! I anguagc Query Generator 


Set Up Help 


Issue Obase Commands 


list all nales 
list all f enales 
list all fenales 

show all uonen over 30 years of age 
shou all nen less than 25 

i:22 Fron ANDY : Your request of 2^24^90 04:11:45 ("Screen Hardcopy") has finished printing on The Mayberry Gatette.] 
: enumerate all 

5:12 Fron ANDY: Your request of 2/24>'90 04:16:49 (“Screen Hardcopy") has finished printing on The Mayberry Gaiette.] 

5:59 Fron ANDY: Your request of 2'24/90 04:17:53 ("Screen Hardcopy" ) has finished printing on The Mayberry Gaiette.) 

5:45 Fron ANDY: Your request of 2^24/90 04:20:14 ("Screen Hardcopy") has finished printing on The Mayberry Gaiettt.) 

: get the nane and social security nunber of all nales 

Retrieve the nane and student nunber of all nales 






Record# 

NAME 

STNUM 

1 

Ash 

12345 

2 

Dion 

6789? 

3 

John 

70601 

4 

Mike 

46093 

6 

Eddie 

71214 

9 

Ben 

65432 

10 

Gedro 

64646 

12 

Berni « 

10001 

13 

Donnie 

53200 




lMou r .o-H: Menu, 
fo neo other comm:in<f r ; 


[Frl 23 Feb 9:58:49] Keyboard 


Shift, Control, Mot.i-Chift, or Super. 


User Input 


Figure 6 


12 





7. To demonstrate the capability of the NLQG to handle different words of the English 
Language, the following example is used. Instead of "Females" the user uses the 
word "Women"‘The NLQG recognizes that women and females mean the same thing 
and retrieves the name and student number of all women. It is displayed in the 
following figure: 



Natural Language Query 

Generator 





Initialize Dictionary Set Up Help 


Issue Dbase Commands 


Query: 







Query : 







Query : 







Query : 

list ell rales 






Query : 

list all f ena les 






Query : 

list all fenales 






Query : 

show all uonen over 30 years of age 






Query : 

shou all nen less than 25 






[09:14: 

22 Fron ANDY: Your request of 2' , 24/’90 04:11:45 ('Screen Hardcopy') 

has finished 

printing on 

The 

Mayberry 

Gazette. 3 

Query : 

enunerate all 






[09:19 

12 Fron ANDY : Your request of 2'24/90 04:16:49 ('Screen Hardcopy' ) 

has f ini shed 

printing on 

The 

Mayberry 

Gaeette . ] 

[09:23 

59 Fron ANDY: Your request of 2>'24/ , 90 04:17:53 ('Screen Hardcopy' ) 

has finished 

printing on 

The 

Mayberry 

Gaiette.] 

[09:29 

45 Fron ANDY: Your request of 2' , 24/'90 04:20:14 ('Screen Hardcopy' ) 

has finished 

printing on 

The 

Mayberry 

Gazette . 3 

Query : 

get the nane and social security nunber of all nales 






Query : 

Retrieve the nane and student ngnber of all nales 






Query: 

get the nane and student nunber of all vonen 






Query: 







Dialog 















D8-FIEL0-U8LUE 







(DB-FIELD-V8LUE LBLUE (V) OPERATOR ('»') FIELD (SEX))) 






Record# 

NAME STNUM 






5 

Use 25789 






7 

Linda 45109 






8 

Cynthie 28633 






11 

Paige 29099 






14 

Darlene 66677 






15 

Rica 99999 












l-loir.o-R: Menu. 

Jo •;<? f» other commands, press Shift, Control, Meta-Shift, or Super. 


[Frl 23 Feb 9:59:39] Keyboard CL USER: User Input 


Figure 7 


13 





8. In the following example the user uses the word find instead of retrieve or get to 
display the name and sex of all members of the database. Instead of saying male or 
female, he/she Just types in all and the NLQG retrieves the name and sex of all the 
members. The following figure illustrates the query and the output. 


Natural Language Query Generator 


Initialize Dictionary Set Up Help Issue Dbase Commands 


Query : 

Query: 

Query: 

Query: list ell rales 
Query: Mat all feral es 
Query: list all feral es 

Query: show all uonen over 30 years of age 
Query: show all nan less Chan 23 

[09:14:22 Fron ftMDY : Your request of 2/24-'90 04:11:45 (’Screen Hardcopy’) has finished printing on The Hayberry Gaiette.] 
Query: enunerete all 

[09:19:12 Fron RNDY : Your request of 2' 24/90 04:16:49 (’Screen Hardcopy’) has finished printing on The Hayberry Gaiette.] 

[09:23:59 Fron flMDY : Your request of 2'24/'90 04:17:53 (’Screen Hardcopy’) has finished printing on The Hayberry Gaiette.] 

[09:28:45 Fron ANDY : Your request of 2^24/90 04:20:14 (’Screen Hardcopy’) has finished printing on The Hayberry Gaiette.] 

Query: get the nane and social security nunber of all nales 

Query; Retrieve the nane and student nunber of all n«les 

Query: get the nane and student nunber of all uonen 

Query: Find the nane and sex of all 

Query : 


Dialog 



4 

Hike 

n 


5 

Lisa 

r 


6 

Eddie 

n 


7 

Linda 

f 


8 

Cynthia 

r 


9 

Ben 

n 


10 

Gedro 

n 


11 

Paige 

f 


12 

Bernie 

n 


13 

Donnie 

n 


14 

Darlene 

r 


15 

Rica 

r 


16 





la v -- vv '-; . ‘ - • .-.v. ■ ■ ] 


M<»iri«»-R : Menu. 

I> othor comiTi.m'l-., pir'/i Shift, Control, Meta-Shi ft, or Super. 


[Fri 23 Feb 18:88:593 Keyboard CL USER: User Input 


Figure 8 


14 






hi'Wll 

lilillrilti tfll 


9. This example the user uses the word find to retrieve the name and sex of all males, 
but uses the word men instead. In addition to this, he also types in the word "please." 
The NLQG ignores the "please" in that it adds no pertainent new information to the 
query. The query and output are shown in the following figure. 


Nut urn! I anguage Query Generator 


Initialize Dictionary Set Up Help Issue Dbase Commands 


Query : 

Query: 

Query : 

Query: list all nales 
Query: list all fenales 
Query: list all fenales 

Query: show all uonen over 30 years of age 
Query: show all nen less than 25 

[09:14:22 Fron ANDY: Your request of 2-'24/90 04:11:45 < 'Screen Hardcopy') has finished printing on The Hayberry Gaeette.] 
Query: enumerate all 

[09:19:12 Fron ANDY: Your request of 2'24/90 04:16:49 ("Screen Hardcopy') has finished printing on The hayberry Gaeette.] 

[09:23:59 Fron ANDY: Your request of 2'24/90 04:17:53 ("Screen Hardcopy' ) has finished printing on The Hayberry Gatette.] 

[09:20:45 Fron ANDY : Your request of 2'24/SQ 04:20:14 ("Screen Hardcopy') has finished printing on The Hayberry Gaeette.] 

Query: get the nene and social security nunber of all nales 

Query: Retrieve the nane and student nunber of all nales 

Query: get the nane and student nunber of all uonen 

Query: Find the nane and sex of all 

[10:01:46 Fron ANDY: Your request of 2^24/90 05:01:30 ("Screen Hardcopy') has finished printing on The Hayberry Gaiette.) 

Query: Find the nane and age of all nen please 

Query: 


niali 



Record# 

NAME 

AGE 

1 

Ash 

26 

2 

Dion 

20 

3 

John 

27 

4 

Hike 

26 

6 

Eddie 

24 

9 

Ben 

23 

10 

Gedro 

33 

12 

Bcrnie 

30 

13 

Donnie 

37 




Motr.o-R; Menu. 

lo sre othor coimnan*!- , pro-;*; Shift, Control, Hota-Shift, or Supor. 


>ri 23 Feb 10:02:54] Keyboard CL USER: User Input 


Figure 9 


15 





10. In this example the user asks the query in the form of a question. The NLQG 
retrieves and displays the names of all females. The query and its output are shown 
in Figure 10. - 



Query : 

Query: list all rales 
Query: list all feral es 
Query: list all ferales 

Query: show all uorer over 30 years of age 
Query: shou all ren less than 23 

[09:14:22 Fron RMDY : Your request of 2'24/90 04:11:45 ("Screen Hardcopy") has finished printing on fhe Mayberry Gazette.] 
Query: cnunerate all 

[09:19:12 Fron RNDY : Your request of 2'24/90 04:16:49 ("Screen Hardcopy") has finished printing on The Mayberry Gazette.] 

[09:23:59 Fron ANDY: Your request of 2r24^90 04:17:53 ("Screen Hardcopy") has finished printing on The Mayberry Gazette.] 

[09:20:45 Fron ANDY; Your request of 2'24/ , 90 04:20:14 ("Screen Hardcopy") has finished printing on The Mayberry Gazette.] 

Query: get the nane and social security nunber of all na les 

Query: Retrieve the nane and student nunber of all rales 

Query: get the nane and student nunber of all uonen 

Query: Find the nane and sen of all 

[10:01:46 Fron ANDY: Your request of 2''24/ , 90 05:01:38 ("Screen Hardcopy") has finished printing on The Mayberry Gazette.] 
Query: Find the nane and age of all nen please 
Query: Uhat is the nane of all wonen 
Query : 



Diati 





13 

Donnie 

37 

(OISPLRV 

DB-FIELD 

( 08-FIELD NRHE (NAME)) DB-FIELD-VRLUE ( DB-FIELD-VfllUE UflLUE CH OPERATOR (" = ■) FIELD (SEX))) 

Record# 

MflME 


5 

Use 


7 

L i nda 


8 

Cynthia 


11 

Paige 


14 

Oar 1 ene 


15 

R1c« 





i fotr.t* -H : M« rm. 

lo -,oo othrr coinin.'irvl'., prnn Shift. Control, Mnt .i-Slii ft , or Super. 


[Fri 23 Feb 10:04:10] Keyboard CL USER: User Input 


Figure 10 


16 




1.4 Task Results 

The specifics stated in the Task Statement were successfully completed. 
The interface was developed and operates on the Symbolic's Lisp machine. 

The database can be queried from the Symbolic's and the data is returned to 
the Symbolic's. The interface allows users to query the database in their 
natural language, if it's English. The interface understands a limited subset of 
English. 

However, novice users can use the interface to query the database, but 
they still must know some things about the database. For example, they must 
know the field names used in the construction of the database. Using the above 
example, the user would have to know that the database contained information 
about males and females. They would not have to know the exact field name. 
This is provided for in the dictionary; i.e., other words used to describe the same 
concept are identified and linked to the appropriate definition. An example of 
this is using men for male or women for female. 

The solution to this type of problem is to develop a generic interface 
system. However, it is difficult to develop a such a system; i.e., one that will 
allow the user to simply ask what databases the system knows about and to use 
any terms to query the system. In order to develop a system like this more time 
and money needs to be allocated. Another problem associated with the generic 
system is that the interface has to know about each database and the terms it 
uses to describe the data. These terms have to be defined in the dictionary. 

This makes the interface database dependent. In order to make the interface 
work with another database, these termshave to be redone. Also, if the 
database changes a similar process must be accomplished. 

This approach holds much promise of making database use by novice 
users simpler. The generic system is not an absurdity. If it is approached 


17 


correctly, parts of this concept could prove beneficial to users. The ability to 
explain what databases it knows about is feasible at present, as well as, being 
able to develop an interface that will allow a user to teach it about knew 
databases so that its capabilities can increase. These extensions to the present 
research would simply require time for development. 


18 



Appendix A 

Listing of Words Used by the NLI in Lisp Format 



ANDY :>ash>nl>words.lisp.73 


2/20/90 11:31:26 Page 1 


jjj ~ Syntax: Connon-Lisp; Package: COMMON -LISP -USER; Base: 10; Mode: LISP 


( 1 earn-uords 

’ ((john def (hunan nane (john) 

gender (nale)) 
denons ( saue-charac ter) ) 

(pick denons ( (pick-up?) (decide?) (deternine-voice) ) 

nl (grasp actor h <s=(eHp-urt-voice ’hunan 'before) 

object x <== ( exp-ur t-vo i ce ’phys-obj ’after) 

Instr (noue actor h 

object (fingers) 
to x) ) 

n 2 (nbuild actor * <==(exp-urt-voice ’hunan 'before) 

nobj (poss actor * <r=(exp-urt-voi ce 'hunan ’before) 

object * <==(exp-wrt*wo1ce ’(hunan phys-obj) ’after)))) 


(up 
( the 


denons (ignor)) 
denons ( i gnor) ) 


(ball def (phys-obj class (gane-obj) 

nane (ball)) 
denons (save-object)) 


(and def (conjunction conjunctl * <==( exp-urt-voi ce ’(db-field phys-obj hunan) ’before) 
conjunct2 * <== ( exp-urt-vol ce ’(db-field phys-obj hunan) ’after)) 
denons ( deterni ne-volce) ) 


( dropped 

def 

(ptrans actor * <==(exp-urt-voice ’hunan ’before) 

object thg <==( exp-ur t-voi ce ’phys-obj ’after) 
to * <==(prep ’(in into on) ’(hunan phys-obj) ’after) 

instr (propel actor (gravity) 
object thg))) 

(it 

def 

( pronoun) 


denons 

( ignor) ) 

(in 

def 

(prep is (in)) 


denons 

(ins-aft ’(phys-obj setting) ’prepobj)) 

(box 

def (phys-obj class (container) 
nane (box))) 

(pcb 

def 

(process-object nane ( pr i nted-c 1 rcu i t-board) ) 


denons 

(( save-object) ( hou-nany ’quantity ’suffix0 ’s))) 

(enter 

def 

( ptrans actor ni 1 

object * <==( exp-urt-voice ’(process-object pronoun) ’before) 
to * <== ( exp-urt-voi ce '(conplex process -actor pronoun) ’after)) 


denons 

( ( ge t- sentence -nunber ) ( deterni ne-voi ce) ) ) 

(exit 

def 

(ptrans actor nil 

object * <==(exp-urt-voice ’(process-object pronoun) ’before) 

fron * <==( exp-urt-voice ’(conplex process-actor pronoun) ’after)) 


denons 

( ( get -sente nee -nunber) (detern 1 ne-vo ice) ) ) 

(process 

def 

(do actor * <==( exp-urt-voice ' ( process-actor conplex pronoun) ’before) 
object » <==( exp-urt-voi ce '(process-object pronoun) ’after)) 


denons 

(( 9 et-sentence-nunber)(detern 1 ne-voice))) 

(proceed 

def 

(ptrans actor nil 

object * <==( exp-ur t-voi ce ’(process-object pronoun) ’before) 
to * <-=(prep ’(to) ’(conplex process-actor pronoun) ’after)) 


denons 

((get-sentence-nunber)(deternine-voice))) 


(go def (ptrans actor nil 

object * <=s(exp-urt-voice ’(process-object pronoun) ’before) 
to * <==(prep ’(to) ’(conplex process-actor pronoun) ’after)) 

denons ( ( ge t -sentence -nunber ) ( de tern i ne-vo i ce) ) ) 


19 


AND Y:>ash>nl> words.lisp.73 


2/20/90 11:31:26 Page 2 


( arr 1 we 

def 

denons 

(ptrans actor nil 

object * < = = ( exp-urt-vol ce '(process-object pronoun) ’before) 
to * <=s(prep ’(at) '(conplex process-actor pronoun) ’after)) 

( ( ge t- sente nee -nunber ) (deternine-uoice))) 

( to 

def 

denons 

(prep is (to)) 

(ins-aft ' (process-actor pronoun) ’prepobj)) 


(at 

def 

denons 

(prep Is (at)) 

(ins-aft '(conplex process-actor pronoun) 'prepobj)) 


( second 

def 

denons 

(tine nane (second) 

base-un its ( 1 ) ) 

( (attach-tine ’(dist-type) ’ bef ore) ( hou-nany ’quantity 

'suffix© ' s) ) ) 

(ninute 

def 

denons 

(tine nane (ninute) 

base-units (60)) 

((attach-tine '(dist-type) 'bef ore) ( hou-nany ’quantity 

’ suf f i x0 ’ s) ) ) 

(hour 

def 

denons 

(tine nane (hour) 

base-units (3600)) 

((attach-tine ’(dist-type) ’before) ( hou-nany ’quantity 

’suffixG ’s))) 

(for 

def 

denons 

(prep Is (for)) 
( ignor) ) 


(a 

denons 

( ignor) ) 


(ne 

denons 

( ignor ) ) 


( then 

denons 

( i gnor ) ) 


( where 

denons 

( ignor) ) 


( next 

denons 

( ignor) ) 


( 1 s 

def 

denons 

(be-uerb nane (is)) 
( ignor) ) 


( are 

def 

denons 

(be-verb nane (are)) 
( ignor) ) 


(by 

def 

denons 

(prep is (by)) 
( i gnor) ) 


(of 

def 

denons 

(prep is (of)) 
( ignor) ) 


( around 

def 

denons 

(prep is (around)) 
( ignor) ) 


( near 

def 

denons 

( prep is ( near ) ) 
( i gnor ) ) 


(with 

def 

denons 

(prep is (uith)) 
( ignor) ) 


(ale 

def 

denons 

(conplex nane ( autonat i c- i nser t ion) ) 
( saue-conpl ex ) ) 


(ni 

def 

denons 

(conplex nane ( nanua 1 -i nsert i on) ) 
( save-conp lex)) 


(n i c 

def 

denons 

(conplex nane ( nanual -i nsert i on) ) 
( saue-conp lex)) 


(testing 

def 

denons 

(conplex nane ( test-and-assenbl y) ) 
( saue-conpl ex) ) 


(dip 

def 

denons 

( process-actor class (station) 

nane ( d i p-nachi ne) ) 

(( save-ac tor) ( hou-nany ’quantity ’suffixB *s))) 



20 


ANDY:>ash>nl>words.lisp.73 


2/20/90 11:31:26 Page 3 



( vcd 

def 

(process-actor class (station) 

nane ( vcd-nach i ne) ) 



denons 

( ( save-actor) ( hou-nany 'quantity ’suffix0 's))) 


( tdk 

def 

( process-actor class (station) 

nane ( tdk-nach i ne) ) 



denons 

( (save-actor) ( hou-nany 'quantity ’suffix© 's))) 


(rl 1 

def 

denons 

( process-actor class (station) 

nane ( tdk-nach i ne) ) 

(( save-actor) ( hou-nany ’quantity 'suffix© ’s))) 

— 

( bpi 

def 

( process-actor class (station) 

nane (berg-pln-nachine) ) 

- ■ 


denons 

(( save-actor) (hou-nany ’quantity 'suffix© ’s))) 

— 

( suedge 

def 

denons 

( process-actor class (station) 

nane ( suedge-nut-nachine) ) 

(( save-actor )( hou-nany ’quantity ’suffix0 's))) 


(ate 

def 

(process-actor class (station) 

nane ( autonat i c- test ) ) 

— • 


denons 

(save-actor)) 


(qc 

def 

( process-ac tor class (station) 

nane (qual i ty-control ) ) 



denons 

( save-actor) ) 


(assenbl y 

def 

( process-ac tor class (station) 

nane ( nechan i cal -assenb 1 y) ) 



denons 

( save-actor) ) 

— 

(shipping 

def 

denons 

(process-actor class (station) 

nane (shipping)) 

( save-actor ) ) 

— 

(storage 

def 

denons 

( process-actor class (station) 

nane (shipping)) 

( save-actor ) ) 

— 

( nean 

def 

(statistic nane (nean) 

neasure * <==( f i nd-stat-val ue) ) ) 


( sd 

def 

(statistic nane ( standard-dev i at i on) 

neasure * <==( f i nd-stat-val ue) ) ) 

— 

( suedge 

def 

denons 

( process-actor class (station) 

nane (suedge-nut-nachine)) 

(( save-actor )( hou-nany 'quantity 'suffixl0 ’s))) 

_ : 

( poi sson 

def 

(dist-type nane (poisson) 

nit t <==(exp-statistic ’ ( nean- i n terarr i va 1 - 1 i ne ) ’after)) 

— 


denons 

( ins-bef ’(ptrans do) ’dist)) 


( nornal 

def 

(dist-type nane (nornal) 

nean * <==( exp-s tat i st i c ’(nean) ’after) 

sd * <==(exp-statistic ’ ( standard-dev i at i on) ’after)) 



denons 

(ins-bef ’(ptrans do) ’dist)) 


( un i f orn 

def 

(dist-type nane (uniforn) 

nin * < == ( exp-st at i st i c ’(nin) ’after) 
nax * < ==( exp-stat i st i c ’(nax) ’after)) 

— 


denons 

(ins-bef ’(ptrans do) ’dist)) 


( n 1 n 

def 

(statistic nane (nin) 

neasure * < == ( f i nd-stat-va 1 ue) ) ) 

— 

(nininun 

def 

(statistic nane (nin) 

neasure * < = = ( f ind-stat-value) ) ) 

- 

( nax 

def 

(statistic nane (nax) 


neasure * < == ( f i nd- st at-va 1 ue ) ) ) 


21 


ANDY:>ash>nl>words.lisp.73 


2/20/90 11:31:26 Page 4 


(naxi nun 

def 

(statistic nane (nax) 

neasure * <==( f ind-stat-value) ) ) 

(nit 

def 

(statistic nane ( nean-i nt erar r i val - t i ne ) 

neasure * <“( f ind-stat-value) ) ) 

(nike 

def 

(hunan nane (nike) 

gender (rale)) 


denons 

( save-character ) ) 

(ate 

def 

(ptrans actor nil 

object * <==(exp-urt-voice ’(process-object noun) ’before) 

to * <==(prep ’(a an the) ’(conplex process-actor noun) ’after)) 


denons 

( ( get-sentence-nunber) ( deterni ne- voice) ) ) 

(an 

def 

(prep is (an)) 


denons 

i (Ignor)) 

(<spp/« 

def 

(food type (apple))) 

(<* 

def (prep is ( a) ) 


denons 

( ignor) ) 

(i/earj 

def 

(ptrans actor * <== ( exp-ur t-voi ce ’hunan ’before) 

object thg <==(exp-urt-vo!ce ’garnent after) 
to * <==(prep '(a the) ’(garnent) ’after) 

denons ( ( get-sentence-nunber ) ( detern 1 ne-vo i ce) ) ) ) 

(shirt 

def 

(garnent type (shirt))) 

(retrieve 

def 

( ptrans actor ni 1 

object * <==( exp-wrt-voi ce ’(process-object pronoun) ’before) 
to « <==(prep ’(fron) ’(process actor class) ’after)) 


denons 

( ( get-sentence-nunber ) (deter nine- voice) ) ) 

(get 

def 

(ptrans actor nil 

object * <== ( exp-wrt-vo i ce ’(process-object pronoun) ’before) 
to * <==(prep ’(fron) ’(conplex pr ocess-ac tor pronoun) ’after)) 


denons 

( ( get-sentence-nunber ) ( detern i ne-vo i ce) ) ) 


(shot nj (propel object (bullets)) 

def (ptrans actor nil 

object * < = = ( exp-urt-voice ’(process-object pronoun) ’before) 
to * <==(prep ’(the) ’(conplex process-actor noun) ’after)) 

denons ( ( ge t -sentence -nunber) (deternine-voice) ) 
n2 ($ take-picture)) 


(fron 


denons ( i gnor ) ) 


( insert def (ptrans actor nil 

object * <==( exp-urt-voice ’(process-object pronoun) ’before) 
to * <==(prep ’(in) '(process actor class) ’after)) 

denons ( (get-sentence-nunber) (deternine-voice))) 


(delete def (ptrans actor nil 

object * <==( exp-urt-vo i ce ’(process-object pronoun) ’before) 
to * <==(prep ’(fron) ’(conplex process-actor pronoun) ’after)) 

denons ( (get-sentence-nunber) (deternine-voice) )) 

(nodify def (ptrans actor nil 

object * <==( exp-urt-voice ’(process-object pronoun) ’before) 


22 


ANDY :>ash>nl>words.lisp.73 


2/20/90 11:31:26 Page 5 


(setq 'actor ( ♦ 1 actor) 

to * <==(prep ‘(fron) ’(conplex process-actor pronoun) ’after)))) 

(print def (ptrans actor (display) 

object * <==( exp-urt-vo 1 ce ’(db-field) 'after) 
objects * <==( exp-urt-voice ’ ( con junct i on) ’after)) 
denons ( ( get-sentence-nunber) ( deterni ne-voi ce) ) ) 

(fetch def (ptrans actor (display) 

object * <==( exp-urt-voi ce ’(db-field) ’after) 
objects * <==( exp-urt-volce ’ (conjunct i on) ’after)) 
denons ( ( 9 et-sentence-nunber ) ( deterni ne-voi ce) ) ) 


(retrieve def (ptrans actor (display) 

object * <==( exp-urt-voi ce ’(db-field) ’after) 
objects * <rr(exp-urt-voice ’(conjunction) ’after)) 
denons ( ( ge t-sentence-nunber ) ( deterni ne-uoi ce) ) ) 


(get def (ptrans actor (display) 

object * <==( exp-urt-volce ’(db-field) ’after) 
objects * < ==(exp-urt-voi ce ’ ( conjunction) ’after)) 
denons ( ( get-sentence-nunber ) (deternine-volce) ) ) 


(shou def (ptrans actor (display) 

object * <==(exp-urt-voi ce *(db-field) ’after) 
objects * <==( exp-urt-voice ’(conjunction) ’after)) 
denons ( ( get-sentence-nunber ) ( deternine-voice) ) ) 


(select def (ptrans actor (display) 

object * < ==( exp-urt-voi ce ’(db-field) ’after) 
objects * <=s(exp-urt-voi ce ’ ( con junct i on) ’after)) 
denons ((get-sentence-nunber) ( deterni ne-voi ce) ) ) 


(list def (ptrans actor (display) 

object t <==( exp-urt-volce ’(db-field) ’after) 
objects * <s=(exp-urt-voice ’(conjunction) ’after)) 
denons ( ( get-sent ence-nunber ) ( deternine-voice) ) ) 

(enunerate def (ptrans actor (display) 

object * < ==(exp-urt-voi ce ’(db-field) ’after) 
objects * <==( exp-urt-vo i ce ’(conjunction) ’after)) 
denons ((get-sentence-nunber) ( detern i ne-voi ce ) ) ) 

(display def (ptrans actor (display) 

object * <==( exp-urt-voi ce ’(db-field) ’after) 
objects * <==(exp-urt-voiCe ’ (con June t i on) ’after)) 
denons ( ( get-sentence-nunber ) ( de tern i ne~vo 1 ce) ) ) 

(give def (ptrans actor (display) 

object * <==( exp-urt-voi ce ’(db-field) ’after) 
objects * <==( exp-urt-vo i ce ’(conjunction) ’after)) 
denons ((get-sentence-nunber) ( deterni ne-voice) ) ) 


(All 

denons 

( * ignor*) ) 


(ape 

def 

(db-field nane (age)) 


denons 

( save-object) ) 


(sex 

def 

(db-field nane (sex)) 


denons 

( save-object ) ) 


(nan# 

def 

(db-field nane (nane)) 


denons 

(save-object)) 


(people def 

(db-f ield nane 

( nane) ) 


denons (save-object)) 


(person def 

(db-field nane 

( nane) ) 


denons (save-object)) 


(nsle 

def 

( db-f i e 1 d-va 1 ue value ("n 


field ( sex) ) 

denons (ins-bef ’(ptrans) ’ db-f i e 1 d-va lue) ) 


(fenale def (db-f ield-value value ("f") 

field (sex)) 

denons (ins-bef ’(ptrans) ’db-f ield-value)) 


23 


ANDY:>ash>nl>words.lisp.73 


2/20/90 11:31:26 Page 6 


(nan def (db-f i el devalue value (*n B ) 

field ( sex) ) 

denons (ins-bef '(ptrans) ’db-f iel d-val ue) ) 
(uonan def (db-f i el d-val ue value ("f") 

field ( sex) ) 

denons (ins-bef ’(ptrans) ’ db-f i el d-val ue) ) 
{table def (process-object nane (row))))) 


24 



Appendix B 

Listing of Expressions Used by the NLI in Lisp Format 


ANDY:>ash>nl>expressions.Iisp.22 


2/19/90 20:09:51 Page 1 


;;; Mode: LISP; Syntax : Connon-lisp; Package: COMMON-LISP-USER; Base: 10 -*- 


( 1 earn-express 1 ons 

’ { ( ( autonat 1 c Insertion center) 

def (conplex nane (automatic-insertion)) 

demons ( save-conpl ex) ) 

((ai work center) 

def (conplex nane ( autonat 1 c- Insert 1 on) ) 

denons ( save-conpl ex) ) 

((automatic Insertion) 

def (conplex nane (automatic-insertion) ) 

denons ( save-conpl ex) ) 

((automatic insertion work center) 
def (conplex nane (automatic-insertion)) 

denons ( save-conpl ex) ) 

((ai center) 

def (conplex name (automatic-insert ion) ) 

denons ( save-conp 1 ex) ) 

((manual insertion center) 
def (conplex nane ( manua 1 - i nsert i on) ) 

demons ( save-conp 1 ex) ) 

((manual insertion) 

def (complex nane ( manua 1 -i nsert i on) ) 

denons (save-complex)) 

((manual insertion uork center) 
def (complex name (manual -insert ion) ) 

demons (save-complex)) 

((manual load) 

def (complex name ( manua 1 -i nsert i on) ) 

demons ( save-conp 1 ex) ) 

((manual load center) 
def (complex name ( manua 1 - i nsert i on) ) 

demons (save-complex)) 

((manual load uork center) 
def (complex name ( manua 1 -i nsert i on) ) 

demons (save-complex)) 

((test and assembly) 

def (complex name ( test-and-assemb 1 y) ) 

demons (save-complex)) 

((test and assembly center) 
def (complex name ( test-and-assemb 1 y) ) 

demons (save-complex)) 

((test and assembly uork center) 
def (conplex nane ( test-and-assemb 1 y) ) 

denons (save-complex)) 

((testing uork center) 
def (complex name ( test-and-assenbl y) ) 

demons (save-complex)) 

((testing center) 

def (complex name ( test-and-assemb 1 y) ) 

denons (save-complex)) 

((testing and assembly uork center) 
def (complex nane ( test-and-assenbl y) ) 

demons ( save-conpl ex) ) 


25 



ANDY:>ash>nI>expressions.lisp.22 


2/19/90 20:09:51 


((testing and assenbly center) 
def (conplex nane ( test-and-assenbl y) ) 

denons (save-conplex) ) 

((testing and assenbly) 
def (conplex nane ( test-and-assenbl y) ) 

denons ( save-conpl ex) ) 

((t & a) 

def (conplex nane ( test-and-assenb 1 y) ) 

denons ( save-conpl ex) ) 

((t & a uork center) 

def (conplex nane ( test-and-assenb 1 y) ) 

denons (save-conplex)) 

((t & a center) 

def (conplex nane ( test-and-assenb 1 y) ) 
denons ( save-conp 1 ex ) ) 

((finished goods) 

def (conplex nane (finished-goods)) 

denons ( save-conp 1 ex ) ) 

((dip nachine) 

def (process-actor class (station) 

nane ( d i p-nach i ne) ) 

denons ( (save-actor) (hou-nany ’quantity 'suffixl© ’s))) 

((dual Inline package insertion nachine) 
def ( process-actor class (station) 

nane ( d i p-nachi ne) ) 

denons ( (save-actor) (hou-nany ’quantity 'suffix40 *s))) 

((dual in-line package insertion nachine) 
def (process-actor class (station) 

nane ( d i p-nachi ne) ) 

denons ((save-actor) (hou-nany 'quantity 'suffix40 ’s))) 

((dual inline package insertion) 
def ( process-ac tor class (station) 

nane ( d i p-nachi ne ) ) 

denons (( save-actor )( hou-nany 'quantity 'suffix30 ’s))) 

((dual in-line package insertion) 
def ( process-ac tor class (station) 

nane ( d i p-nach i ne ) ) 

denons (( save-actor) ( hou-nany 'quantity ’suffix30 *s))) 
((dip insertion) 

def ( process-actor class (station) 

nane ( d i p-nach i ne) ) 

denons ( (save-actor )( hou-nany 'quantity ’suffixl0 ’s))) 

((dip insertion nachine) 
def ( process-actor class (station) 

nane ( d i p-nach 1 ne ) ) 

denons (( save-actor) ( hou-nany ’quantity ’suffix20 's))) 
((nasking nachine) 

def ( process-actor class (station) 

nane ( nask i ng-nach i ne) ) 

denons (( save-actor )( hou-nany 'quantity ’suffix20 ’s))) 
( ( nasking) 

def (process-actor class (station) 

nane ( nask 1 ng-nach i ne) ) 

denons (( save-actor )( hou-nany 'quantity ’suffix20 ’s))) 
((vcd nachine) 

def (process-actor class (station) 

nane ( vcd-nach i ne ) ) 

denons ( (save-actor )( hou-nany 'quantity ’suffixl0 ’s))) 


26 


ANDY:>ash>nl>expressions.lisp.22 


2/19/90 20:09:51 Page 3 


((wed Insertion machine) 
def (process-actor class (station) 

nane ( vcd-nach i ne) ) 

demons ( ( save-act'or) (hou-nany ’quantity ’suffix20 ’s))) 
((ved insertion) 

def (process-actor class (station) 

nane ( vcd-mach i ne) ) 

demons ( ( save-ac tor) ( hou-nany ’quantity ’suffix!0 ’s))) 

((variable center distance insertion) 
def ( process-actor class (station) 

nane (vcd-mach ine) ) 

demons (( save-actor ) (hou-nany ’quantity ’suffix30 *s))) 

((variable center distance insertion machine) 
def ( process-actor class (station) 

nane ( vcd-nach i ne ) ) 

demons (( save-actor )( hou-nany ’quantity ’suffix40 ’s))) 


((tdk machine) 

def (process-actor class (station) 

name ( tdk-machi ne) ) 

demons ( (save-actor) ( hou-nany 'quantity ’suffix!0 ’s))) 


((radial lead insertion machine) 
def (process-actor class (station) 

name ( tdk-machi ne) ) 

demons (( save-actor) ( hou-many ’quantity ’suffix30 *s))) 


((radial lead insertion) 
def (process-actor class (station) 

name ( tdk-mach i ne) ) 

demons (( save-actor )( hou-many 'quantity ’suffix20 ’s))) 


( ( r 1 i machine) 

def ( process-actor class (station) 

name ( tdk-mach 1 ne ) ) 

demons (( save-act or) ( hou-nany ’quantity ’suffixl0 *s))) 


((rl insertion machine) 
def ( process-actor class (station) 

name ( tdk-machi ne) ) 

demons (( save-actor )( hou-nany ’quantity ’suffix20 ’s))) 


((radial lead machine) 
def ( process-ac tor class (station) 

name ( tdk-mach i ne) ) 

demons (( save-actor )( hou-many ’quantity ’suffix20 ’s))) 


((radial lead) 

def ( process-actor class (station) 

name ( tdk-mach 1 ne ) ) 

demons (( save-actor) ( hou-many 'quantity ’suffix!0 ’s))) 


((berg pin machine) 

def (process-actor class (station) 

nane (berg-pin-machine) ) 

demons (( save-actor) ( hou-many 'quantity ’suffix20 *s))) 


((berg pin) 

def ( process-actor class (station) 

name (berg-pin-machine)) 

demons (( save-actor )( hou-many 'quantity 'suffixl0 ’s))) 


((berg machine) 

def (process-actor class (station) 

name ( berg-p i n-mach i ne) ) 

demons (( save-act or) ( hou-many 'quantity 'suffixl© ’s))) 

((berg pin insertion machine) 
def (process-actor class (station) 

name ( berg-pi n-mach i ne) ) 


27 



ANDY:>ash>nI>expressions.lisp.22 


2/19/90 20:09:51 Page 4 


denona ( ( save-actor) (hou-nany ’quantity ’suffi*30 ’s))) 

((berg pin Insertion) 
def (proceaa-actor class (station) 

nane (berg-pin-nachine) ) 

denons (( save-actor )( hou-nany 'quantity ’suffi*20 ’s))) 
((bpi nachine) 

def (process-actor class (station) 

nane (berg-pin-nachi ne) ) 

denons (( save-actor) ( hou-nany ’quantity ’suffi«10 ’s))) 

((bp nachine) 
def 

denons 

( ( suedge 
def 

denons 

( ( suedge 
def 

denons 

( ( suedge 
def 

denons 

((spanlsh terninal insertion nachine) 
def (process-actor class (station) 

nane ( suedge-nut-nachi ne) ) 

denons ( (save-actor )( hou-nany ’quantity ’suffi*30 ’s))) 

((spanish terninal insertion) 
def ( process-actor class (station) 

nane ( suedge-nut-nachi ne) ) 

denons (( save-actor )( hou-nany ’quantity ’suffi*20 ’s))) 
((spanish terninal) 

def (process-actor class (station) 

nane ( suedge-nut-nachi ne) ) 

denons (( save-actor )( hou-nany ’quantity ’suffixl© ’s))) 

((spanish terninal nachine) 
def (process-actor class (station) 

nane (suedge-nut-nachi ne) ) 

denons (( save-actor )( hou-nany ’quantity 'suffi«20 ’s))) 

((conponent preparation) 
def ( process-actor class (station) 

nane ( conponent-preparat i on) ) 

denons (save-actor)) 

((conponent prep) 

def ( process-actor class (station) 

nane (conponent-preparat ion) ) 

denons (save-actor)) 

((hand load) 

def (process-actor class (station) 

nane ( nanual - 1 oad) ) 

denons ( save-actor ) ) 

((nanual load) 

def (process-actor class (station) 

nane (nanual-load)) 

denons (save-actor)) 

((uave solder nachine) 


( process-actor class (station) 

nane (berg-pi n-nachi ne) ) 

(( save-actor) ( hou-nany ’quantity ’suffixlO ’s))) 
nut nachine) 

(process-actor class (station) 

nane (suedge-nut-nachi ne) ) 

(( save-actor) (hou-nany ’quantity ’suffi«20 ’s))) 

nut) 

( process-actor class (station) 

nane ( suedge-nut-nachi ne) ) 

(( save-act or) ( hou-nany ’quantity ’suffixl0 ’s))) 

nach i ne) 

(process-actor class (station) 

nane ( suedge-nut-nachi ne ) ) 

( (save-actor) (hou-nany ’quantity ’suffi*10 ’s))) 


28 



ANDY:>ash>nI>expressions.lisp.22 


2/19/90 20:09:51 Page 5 


def (process-actor class (station) 

nane ( uaue-so 1 der-nachi ne) ) 

denons (( save-actor) ( hou-nany ’quantity *suffix20 ’s))) 
((uaue solder) 

def ( process-actor class (station) 

nane ( uaue-sol der-nachi ne) ) 

denons ( save-actor ) ) 

((aqua clean nachine) 
def ( process-actor class (station) 

nane ( aqua-cl ean-nachi ne) ) 

denons ( ( saue-actor) (hou-nany 'quantity *suffix20 ’s))) 
((aqua clean) 

def ( pracess-actor class (station) 

nane ( aqua-cl ean-nachi ne) ) 

denons (saue-actor)) 

((aqua bath) 

def (process-actor class (station) 

nane ( aqua-clean-nachine) ) 

denons (( saue-actor )( hou-nany 'quantity 'suffixlG ’s))) 

((secondary operations) 
def (process-actor class (station) 

nane ( secondary-operat i ons) ) 

denons (save-actor)) 

((secondary ops) 

def ( process-actor class (station) 

nane ( secondary-opera t i ons) ) 

denons ( saue-actor ) ) 

((quality control station) 
def ( process-actor class (station) 

nane ( qual i ty-control ) ) 

denons ( saue-ac t or ) ) 

((qc station) 

def ( process-actor class (station) 

nane ( qual i ty-control ) ) 

denons ( saue-ac tor ) ) 

((qc point) 

def (process-actor class (station) 

nane ( qua 1 i ty-contr o 1 ) ) 

denons ( saue-ac tor ) ) 

((repair station) 

def ( process-actor class (station) 

nane ( repai r-stat i on) ) 

denons (saue-actor)) 

((fault f i nder ) 

def ( process-actor class (station) 

nane (fault-finder)) 

denons (( saue-actor )( hou-nany ’quantity ’suffixlG ’s))) 
((burn in) 

def (process-actor class (station) 

nane ( burn- in)) 

denons (saue-actor)) 

((autonatic test) 

def ( process-ac tor class (station) 

nane ( aut onat i c-test) ) 

denons ( saue-ac tor ) ) 

((first functional test) 
def (process-actor class (station) 

nane ( autonat i c-test) ) 

denons (saue-actor)) 


29 



ANDY:>ash>nl>expressions.Iisp.22 


2/19/90 20:09:51 Page 6 


((nechanical assembly) 
def (process-actor class (station) 

nane (nechan i cal -assenbl y ) ) 

denons (saye-actor)) 

((final functional test) 
def (process-actor class (station) 

nane (f inal -functional -test) ) 

denons (save-actor)) 

((final inspection) 

def ( process-actor class (station) 

nane ( f inal -inspect ion) ) 

denons ( save-actor ) ) 

((button up) 

def (process-actor class (station) 

nane (button-up)) 

denons (save-actor)) 

((according to) 
denons (ignor)) 

((poisson process) 
def (dist-type nane (poisson) 

nit * < = = ( exp-stat i st i c ' ( nean- 1 nterarr i va 1 -t i ne) ’after)) 
denons (ins-bef ’(ptrans do) 'dist)) 

((poisson distribution) 
def (dist-type nane (poisson) 

nit * <==(exp-stat i st ic ’ ( nean- i nterarr ival -ti ne) ’after)) 
denons (ins-bef ’(ptrans do) ’dist)) 

((poisson nodel) 

def (dist-type nane (poisson) 

nit * <==(exp-stat istic ’ ( nean- 1 nterarr Iva 1 -ti ne) ’after)) 
denons (ins-bef ’(ptrans do) ’dist)) 

((nornal process) 
def (dist-type nane (nornal) 

nean * <==( exp-stat i st i c ’(nean) ’after) 
sd * < = = (exp-statistic ’ ( standard-dev i at i on) ’after)) 
denons (ins-bef ’(ptrans do) ’dist)) 

((nornal distribution) 
def (dist-type nane (nornal) 

nean * <= = ( exp-stat i st i c ’(nean) ’after) 
sd * <==( exp-stat i Stic ’ ( standard-devi ati on) ’after)) 
denons (ins-bef ’(ptrans do) ’dist)) 

( ( nornal nodel ) 

def (dist-type nane (nornal) 

nean * <==( exp-stat i st i c ’(nean) ’after) 
s d * < = = ( exp-stat istic ’ ( standard-dev i at i on) ’after)) 
denons (ins-bef ’(ptrans do) ’dist)) 

((uniforn distribution) 
def (dist-type nane (uniforn) 

nln * < ==(exp-stat i st i c ’(nln) ’after) 
nax * < ==(exp-stat i st i c ’(nax) ’after)) 
denons (ins-bef '(ptrans do) ’dist)) 

((uniforn process) 
def (dist-type nane (uniforn) 

nln * <==( exp-stat i st i c ’(nln) ’after) 
nax * < ==(exp-stat i st ic ’(nax) ’after)) 
denons (ins-bef ’(ptrans do) ’dist)) 

((uni f orn node 1 ) 

def (dist-type nane (uniforn) 

nin * < ==(exp-stat i st i c ’(nln) ’after) 
nax * <==( exp-stat i st i c ’(nax) ’after)) 
denons (ins-bef ’(ptrans do) ’dist)) 


30 


ANDY:>ash>nl>expressions.lisp.22 


2/19/90 20:09:51 


((minimum value) 
def (statistic nane (r>ln) 

measure t <==( f ind-stat-val ue) ) ) 


((maximum value) 
def (statistic name (max) 

measure * < = = ( f ind-stat-val ue) ) ) 

((printed circuit board) 

def (process-object name ( pr i nted-c ircui t-board) ) 

demons (( save-object )( hou-many 'quantity ’suffix20 ’s))) 

((standard deviation) 

def (statistic name ( standard-devi at i on) 

measure * <==( f i nd-stat-va 1 ue) ) 

demons (ignor)) 

((std dev) 

def (statistic name (standard-deviation) 

measure * <==( f i nd-stat-value) ) 

demons (ignor)) 

((mean interarrlval time) 

def (statistic name (mean-interarr 1 val -time) ) 

measure * <==( f ind-stat-val ue) ) 


( (memory) 

def ( process-actor class (station) 

name (memory)) 

demons (( save-actor )( hou-nany 'quantity 'suffixl ’s))) 


( (Zlata -base) 

def ( process-actor class (station) 

name ( data-base) ) 

demons (( save-actor )( hou-nany 'quantity ’suffixl ’s))) 

((student number) def (db-field nane (stnum)) 
demons (save-object)) 

((social security number) def (db-field name (ssnun)) 
demons (save-object)))) 


31 


