‘ REPO AD-A278 037 


Form Afiprovma 
OPMNo. 


caponing buidan tor IN 
and maMaMfig ih# <Ma nooi 
■uggaaltona tor cadutong ttito 
22202-4302. and to lha ONiei 


r.TcT4^(iyii?.i= 


a. induding Hia tona tor iai<ia«4 ng inttrueltona. a aii d ci n g aatoling data sounoat gadiaiif^ 
aiding thiabucdanaalimda or any VWkcaapadoIttw olaeiian ol intwniation, Mudicy I 
4ion O par a lio n t and Hoporti. 1212 JtNtiioi-Osn^ Atop. Suito 1204. Mtogton. VA * 
dgal. Wanhington. DC 20803. 


2. HtKOHi 






Authors: 

Wright-Patterson APB 


TTPERFORMING ORGANIZATION 

Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 







IN 

OROANIZATKSN 


12a. DISTRIBUTION/AVAILABILITY 

Approved for public release; distributioif unlimi 


(Maximum 200 


10. SPONSORING^MONITORING 
AGENCY 




-- ,'.i * Sf'Fi C , / j' ( u r i -• r Si. rO^ kc Si. H.„.. : 


T-.r -• . _ 


TED 3 


14. SUBJEC 


15. NUMBER OF 


Ada programming language, Ada Compiler Val. Summary Report, Ada Comp„ 




CLASSIFICATION 

UNCLASSIFIED 


18. SECURITY 

UNCLASSIFIED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


20, LIMITATION OF 

UNCLASSIFIED 


.( 

Proscribed by ANSI SKI. 














AVF Coitrol (Amber: AVF-VSR-580.0294 
Date VSR Coopleted: 28 February 1994 

94-01-05-C2iS 


Ada CXMPILER 
VALIDATICN SUMMARY REPORT: 
Certificate (Aadser: 940223W1.11338 
Green Hills Software, Inc. 

Green Hills Optimizing Ada Compiler, 1.8.7 
SPARCstation 10 xinder SunOS, Release 4.1.3 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB CW 45433-5707 


94-10999 9 4 4 11 tl3 

lililllliil 








Certificate Infonnation 


The following Ada inplementaticx) was tested and determined to pass ACVC 1.11. 
Testing was completed on 23 February 1994. 

Compiler Name and Version: Green Hills Optimizing Ada Compiler, 1.8.7 

Host Computer System: SPAHCstation 10 

under SunOS, Release 4.1.3 


Target Computer System: Same as host 

Customer Agreement Number: 94-01-05-GHS 


See section 3.1 for any additional information about the testing enviroranent. 

As a result of this validation effort. Validation Certificate 940223W1.1F338 
is awarded to Green Hills Software, Inc. This certificate expires two years 
after MIL-STD-1815B is approved by ANSI. 


This report has been revievred and is approved. 


Ada Validation Facility ^ 

Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 




Ada Va^ioa^o^ Organization 

Director, Ggnputer and Software Engit^ring Division 
Institute for Defense Analyses 
Alexandria VA 22311 



A^ Joint Program Office 
David R. Basel 
Deputy Director 

Defense Information Systems Agency, 
Center for Information Management 


Sooesslon For 


STIS (Tn.',4I 


DTIC '"■v' 

□ 1 

___ t 


’J 1 


j«3tii ■ v. . ,. 


By__ - ■ - 

Dlatr'.but! 

;>*«'•‘.I rj; / 
HLat ! 

: I ! 






DECLARATION OF CONFORMANCE 


9 

Customer: Green Hills Software, Inc. 

Ada Validation Facility: Hq 645 C-CSG/SCSL 

Standard Languages Section 
Systems Technology Branch 
Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 
Ada Implementation: 

Compiler Name and Version: Green Hills Optimizing Ada compiler 

Version 1.8.7 

Host Computer System: Sun Sparc Station 10 running SunOS 4.1.3 
Target Computer System: Same as host 

Customer's Declaration 

I, the undersigned, representing Green Hills Software, Inc., declare 
that Green Hills Software, Inc., has no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A in the 
implementation listed in this declaration. I declare that Green Hills 
Software, Inc. is the OWNER of the above implementation and the 
certificates shall be awarded in the name of the OWNER'S corporate name. 



fjaniel O'Dowd, President 
Green Hills Software, Inc. 
510 Castillo Street 
Santa Barbara CA 


Date: Feb. 23, 1993 


93101 






TABLE OF CXKrorrS 


CHAPTER 1 INTRODUCTIGN 


1.1 USE OP THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES .1-2 

1.3 ACVC TEST CLASSES .1-2 

1.4 DEFINITION OF TERMS .1-3 

CHAPTER 2 IMPLEMENTATION DEPEMMMCIES 

2.1 WITHDRMM TESTS.2-1 

2.2 INAPPLICABLE TESTS .2-1 

2.3 TEST MODIFICATIONS .2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT .3-1 

3.2 SUMMARY OF TEST RESULTS .3-1 

3.3 TEST EXECUTION .3-2 


APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


i 














* 


OnPTER 1 
iMmmTnQN 


The Ada Inplenentation described above was tested according to the Ada 
Validatimi Procedures (Pro92] against the Ada Standard [Ada83] \ising the 
current Ada Compiler Validation Capability (ACVC). This Validatim Sunnary 
Report (VSR) gives an account of the testing of this Ada inplenentation. For 
any technical terns used in this report, the reader is referred to [Pro92]. 
A . detailed description of the ACVC nay be found in the current ACVC User's 
Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the ccmputers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which perform^ this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF \diich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 







INIBOOUCnON 


* 


1.2 REFERENCES 

[Ada831 Reference Manual for the Ada ProqragBdng Language , 

ANSI/11IL-STD-1815A, February 1983 and ISO 8652-1987. 

[Pro92] Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program office, August 1992. 

[UG89] Ada Compiler Validation Capability User's Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Coiif>liance of Ada impl«nentati<»i8 is tested by means of the ACVC. Ihe ACVC 
contains a collection of test programs structured into six test classes: A, 
Br, c, D, E, and L. The first letter of a test name identifies the class to 
v^ich it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to pro^ce errors at ccopile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the resiilt when they are 
executed. Three Ada library \jnits, the packages REPORT and SPPRT13, and the 
procedure CHECR_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions xised to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used bjf many tests for Chapter 13 of the 
Ada Standard. The procedure CHECR__FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a ccopiler detects illegal language usage. Class B 
tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Stan^rd are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for this impleimentation is provid^ in J^pendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 






f 


iNmxxxrncN 


For each Ada inplementaticm, a custonized test suite is produced by the AVF. 
This custooiizaticm consists of naking the modifications described in the 
preceding paragraph, removing withdrawn tests (see sectim 2.1), and possibly 
removing some inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an ACVC an F.da implementation must process each test of the 
cxistcmized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added to 
a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing conpliance of Ada implementations. 
Validation consisting of the test suite, the si^iport programs, the ACVC 
Capability user's guide and the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host coeputer system and its 

Implementation target conputer system. 

Ada Joint The part of the certification body v4iich provides policy and 
Program guidance for the Ada certification system. 

Office (AJFO) 

Ada The part of the certification body \diich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification body that provides technical 

Validation guidwce for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Implementation 

Ccmputer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, inclixJing arithmetic operations emd logic 
operations; and that can execute programs that modify 
themselves during execution. A conputer system may be a 
stand-alone unit or may consist of several inter-connected 
units. 


1-3 








INTRODUCTION 


Cmformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inai^li cable 
test 

ISO 

LBH 


Operating 

System 


Target 

Cooputer 

System 

Validated Ada 
Conpiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity vAio enters into an agreement 
with an AVF which specifies the terms and ccxiditions for AVF 
services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implraientation for which 
validation statiis is realized. 

A cooputer system v^re Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

Intematioial Organization for standardization. ^ 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STT^-lSlBA-igea and ISO 8652-1987. Citations from the 
LBM take the form "<section>.<s\]bsection>:<paragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
irput/output coxitrol, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware iiplementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada inplementation that has been valioSated successfully 
either by AVF testing or by registration [Pro92]. 

The process of ohecking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this inplementation. 

A test fonind to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or contains 
erroneoTUS or illegal use of the Ada programming Icuiguage. 


1-4 





CHAPTER 2 


IMPLEMEIfEATIQN NPENIXMCIES 


2.1 WITHDBANN TESTS 

The following tests have been withdrawn by the AVO. Hie raticmale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdravm tests is 22 November 1993. 


2.2 


B27005A 

C35507L 

C35508M 

C43004A 

C4S651A 

A74006A 

C83026A 

C97116A 

CC1223A 

AD1B08A 

CD2A41E 

CD4022D 

CD5111A 

AD7201A 

CD900SA 

CE2119B 

CE3411B 

CE3814A 


E28005C 

C35507N 

C35508N 

C45114A 

C46022A 

C7430aA 

B83026B 

C98003B 

BC1226A 

BD2A02A 

CD2AB7A 

CD4024B 

CD7004C 

AD7201E 

CD9005B 

CE2205B 

CE3412B 

CE3902B 


B28006C 

C35507O 

C35702A 

C45346A 

B4900aA 

B83022B 

C83041A 

BA2011A 

CC1226B 

CD2A21E 

CD2B15C 

CD4024C 

ED7005D 

CD7204B 

CDA201E 

CE2405A 

CE3607B 


C32203A 

C35507P 

C35702B 

C45612A 

B49008B 

B83022H 

B85001L 

CB7001A 

BC3009B 

CD2A23E 

BD3006A 

CD4024D 

CD7005E 

AD7206A 

CE2107I 

CE3111C 

CE3607C 


C34006D 

C35508I 

C3731QA 

C45612B 

A54B02A 

B83025B 

C86001P 

CB7001B 

BD1B02B 

CD2A32A 

H>4008A 

CD4031A 

AD7006A 

BD8002A 

CE2117A 

CE3116A 

CE3607D 


C35507K 

C35508J 

B41308B 

C45612C 

C55B06A 

B83025D 

C94021A 

CB7004A 

BD1B06A 

CD2A41A 

CD4022A 

CD4051D 

CD7006E 

BD8004C 

CE2117B 

CE3118A 

CE3812A 


INAPPLICABLE TESTS 


A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada in^lementation. Reasons for a test's inapplicability may be 
support^ by documents issued by the ISO and the AJPO known as Ada 
CcHnnentaries and commonly referenced in the format Ai-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 







INPLENENIATICN I»PQS»MCZES 


The following 201 tests have floating-point type declaratic»s requiring 
more digits than SYSTEM.HAX_OIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713B, C45423B, B86001T, and C86006H check for the predefined type 

SHOBT_FLQhT; for this iiqplenentation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LQNS_FLQAT, or SHORT^FLQAT; for this 
implementation, there is no such type. ~ 


C45423A, C45523A, and C45622A check that the proper exception is raised 
if MACHINEjOVERFLOWS is TRUE and the results of various floating-point 
operations lie outside the range of the base type; for this 
inf>lementation, MACHZNEJOVERFLOHS is FALSE. 

C45531H..P and C45532Kv^P (8 tests) check fixed-point operations for 
types that require a SYSTEM.HAX_MANTISSA of 47 or greater; for this 
inplementation, MAX_MANTISSA is less than 47. 


B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this inplementation, there is no such type. 


CA2009F checks whether a generic non-library subprogram can be 
instantiated before the separate compilation of its body (and any of its 
subunits); this inplementation requires that the body and subunits of a 
generic non-library subprogram te in the same compilation as the 
specification if instantiaticms precede them. (See section 2.3.) 


LA3004B, EA3004D, and CA3004P check pragma INLINE for functions; this 

ioqplementation does not svqjport pragma INLINE for functions. 


CD1009C checks whether a length clause can specify a non-defa\ilt size 
for a floating-point type; this inplementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this inplementation does 
not su^^rt such sizes. 


AE2101C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rejected by 
this compiler. 


2-2 






INPLEHEZimTlON KTENDEXtCIES 


AE2101H, EE2401D, and EE2401G use instantiations of packa^ DIRECT_I0 
with unconstrain^ array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

Hie tests listed in the following table check that USE^ERBOl is raised 
if the given file operations are not supported for the given combinaticxi 
of mode and access method; this implementation si^^rts these 
operations. 


Test 

File Operation Node 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

c:e2102e 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INCth* FILE 

DIRECT 10 

CE2102I 

CREATE 

IN PILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUEOTIAL 10 

CE2102O 

RESET 

IN PILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT~FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INCKir FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

direct'10 

CE2102W 

RESET 

OUT-FILE 

DIRECT'10 

CE3102E 

CREATE 

IN_FILE 

text_i5 

CE3102F 

RESET 

Any Node 

TEXT 10 

CE3102G 

DELETE 


text'10 

CE3102I 

CREATE 

OUT FILE 

TEXT_I0 

CE3102J 

OPEN 

IN FILE 

text_io 

CE3102K 

OPEN 

OUT FILE 

TEXT_IO. 


The following 16 tests check operations on sequential, direct, and text 
files when multiple internal files are associated with the same external 
file and one or more are open for writing; USE_ERRr~l is raised when this 
association is atten^ted. 

CE2107B..E CE2107G..H CE2107L CE2110B CE2110D 
CE2111D CE2111H CE3111B CE3111D..E CE3114B 
CE3115A 

CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises U5E_ERR0R if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 


2-3 







IHPLEMENIIVTIQN DEPEMDEZ4CIES 


CE3304A checks that SET_LINE LENGTH and SET PAGE_LEMGTH raise USE ERROR 
if they specify an inappropriate valxie for Ihe external file; there are 
no inapprc^riate values for this inplementation. 

CE3413B checks that PAGE raises LAyoUT_ERROR vAien the val\M of the pa^ 
number exceeds COUNT'ZAST; for this" iaplementatim, the value of 
COUNT'LAST is greater than 150000, making the checking of this c^jective 
impractical. 


2.3 TEST NQOIFICATIGNS 

Modifications (see section 1.3) were required for 6 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violaticxis of the Ada Standard in the way 
-expected by the original tests. 

B22003A B83033B B85013D 

CA2009F was graded inapplicable by Evaluation Modification as directed by the 
AVO. This test contains instantiaticxis of generic non-library subprograms 
prior to the compilation of their bodies; as allowed by AI-00408 and 
AI-00506, the compilation of the generic subprogram bodies (subunits) makes 
the compilation unit that contains the instantiations obsolete. 

BC3204C and BC3205D were graded passed by Processing Modification as directed 
by the AVO. These tests check that instantiations of generic units with 
unconstrained types as generic actual parameters are illegal if the generic 
bodies contain uses of the types that require a constraint. However, the 
generic bodies are compiled after the units that contain the instantiations, 
and this implementation creates a dependence of the instan- tiating xjnits on 
the generic units as allowed by AI-00408 and AI-00506 such that the 
coopilation of the generic bodies makes the instantiating units obsolete—no 
errors are detected. The processing of these tests was modified by 
re-ccmpiling the obsolete units; all intended errors were then detected by 
the compiler. 


2-4 







CHftprra 3 


PROCESSXNQ INFOSH^TION 


3.1 TESTING ENVIRGNMEMT 

w 

The Ada inplementatlon tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical and sales information about this Ada implementation, contact: 

David Chandler 

Green Rills Software, Inc. 

510 Castillo St. 

Santa Barbara, CA 93101 
(805) 965-6044 


Testing of this Ada inplementation was conducted at the custooier's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, whether the test is applicable or inapplicable; otherwise, the A<^ 
Inplementation fails the ACVC [Pro92]. 

For all processed tests (inapplicable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

Ihe list of items below gives the nuidser of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the implementation's maximum precision (item e; see 
section 2.2), and those that depend on the support of a file system — if 
none is sr^^rted (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 








PRCXZSSING INFOKH^TIGN 


a) Total Nunber of Applicable Tests 3790 

b) Total Nunber of Withdrawn Tests 104 

c) Processed Inapplicable Tests 75 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precisi(»i Tests 201 

f) Total Nunber of Inapplicable Tests 276 (c-Ki4«) 


g) Total Nunber of Tests for ACVC 1.11 4170 (a-i-bff) 


3.3 TEST EXECUnCN 

A nagnetic tape ccmtaining the customized test suite (see sectim 1.3) was 
taken c»-site the validation team for processing. The contents of the 
magnetic tape %Mre loaded directly onto the host ccnputer. ^ 

After the test files were loaded cxito the host ccnputer, the full set of 
tests was processed by the Ada inplenentatim. 

The tests were ccopiled, linked and executed on the host ccnputer system. 
The resiilts were captured on the host computer system. 

Testing was performed using ccmnand scripts provided by the custoner and 
review^ by the validation team. See Appendix B for a cooplete listing of 
the processing options for this implementation. It also indicates the 
default options. No explicit (^tic»s were used for testing this 
implementation. 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined cxi-site by the 
validation team were also archived. 


3-2 








APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for custcodzing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum ir^t-line length, \p^ich is 
the value for $NAX_IN_LEN—also listed here. These val\ies are expressed here 
as Ada string aggregates, ^riiere "V" represents the maximum input-line length. 

Macro Parameter Macro value 


$MAX__IN__LEN 200 — Value of V 

$B1G_ID1 (1..V-1 -> 'A', V-> '1') 

$BIG_ID2 (1..V-1 -> 'A', V -> '2') 

$BIG IDS (1..V/2 -> 'AM & '3' & 

(1..V-1-V/2 -> 'AM 

$BIG ID4 (1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG_INT_LIT {1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 '"' S (1..V/2 -> 'A') & '"' 

$BIG_STRING2 '"' & (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS (1..V-20 -> ' M 

$MAX LEN INT BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 

$MAX LEN REAL BASED LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 










MACRO PAPAMETEBS 


$MAX_STRING_LITERAL '•*» & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALZGNMENT 

4 

$C01WT_LAST 

2_147_483_646 

$DEFAULT_MEM_SIZE 

1024 

$DEFAULT_STORJUNIT 

8 

$DEFAULT_SYS_NAME 

SERVER 

$DELTA_DOC 

2.0**(-31) 

$ENTRy_AOORESS 

16i0« 

$EXn!RY_AH)RESSl 

16il« 

$ENTHy_ADDRESS2 

16«2# 

$F1ELD_LAST 

2_147__483_647 

$FILE_TERHINATC» 


$FZXED_NAME 

NO_SUCH_FIXED_TyPE 

$FLOAT_NAME 

NO_SUCH_FLOAT_TyPE 

$PC»M_STRING 

nn 

$PORM_STRING2 

"CANNOT RESTRICT FILE 

$GREATER THAN DURATION 


90 000.0 


$GREATER THAN DURATZGN BASE LAST 

To_ooTy_ooo.o 

$GREATER THAN FLOAT BASE LAST 

3.5E+38 

$GREATER THAN FLOAT SAFE LARGE 

3.1E38 


A-2 





MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE LARGE 
“ ” “ 1.01308 

$HZGH_PR10RITT 20 

$ILLBGAL EXTERNAL FILEJAMEl 

“ /NDDIRECTORY/PILEJIAMEl 

$ILLEGAL EXTERNAL_FILE_NAME2 

“ /l«DlRECT0Ry/FILENAME2 

$INAPPR0PR1ATE LINE LENGTH 

“ -1 

$INAPPROPRIA3E PAGE LENGTH 

“ -1 

$ZNCLUDE_PRAGNA1 PRAGMA INCLUDE ("A28006D1 .ADA") 

$INCLUIX:_PRAGNA2 PRAGMA INCLUX ("B28006F1 .ADA") 

$INTBGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$INTBGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE_LANGUAGE C 

$LESSjrHANJDURATION -90_000.0 

$LESS THAN DURATIGN BASE FIRST 

“ ” ” -1TJ_000_000.0 

$LINE_TERHINATOR ASCII.LF 

$LOW_PRIORITy 1 

$HACHINE_CODE_STATEMENT 

asm'(Inst »> ""nq?""); 

$HACHINE_OOOE_TYPE INSTRUCTION 

$HANTISSA_DOC 31 

$MAX_DIGITS 15 

SMAX_INT 2147483647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2147483648 

$NAHE ByTE_INTEGER 

A-3 






moo PARAMETERS 


$NM1E_LIST 

$MM1E_SPECIFICATICN1 

$NAME_SPECIFICAnON2 

$NMlE_SPECIFICAnON3 

$MEGJBASED_INT 

$NEM_HEH_SIZE 

$NEW_STC»JUNIT 

$MEM_sysjaHE 

$PAC2:_TERMINArC» 

$REOORD_DEFZNITION 

$RECORD_NAME 

$TASK_SZZE 

$TASK_STC»AGE_SIZE 

$TICK 

$VAR1ABLE_AIX»ESS 
$VARIABLE_AIX»ESS1 
$VAR1ABLE_AIX»ESS2 
$yCWR PRAGMA 


SERVER 

/safe/1.6.7/adasparc/acvc/Val/?C212QA 
/sa£e/l.8.7/adasparc/acvc/Val/X2120B 
/safe/l. 8.7/adasparc/acvC/Aral/X3119A 
16«FFFFFFFE* 

1024 

8 

SERVER 

ASCII.LF & ASCII.FF 
NEW INTEGER 
INSTRUCTIGN 
32 

2048 

0.01001 

FCNDECL. VARJVraSRESS 
FCNDECL.VAR_AI»RESS1 
FCNDECL.VAR A1X>RESS2 


NO SUCH PRAGMA 




APPENDIX B 


OQMPILATIGN SYSTEM OPTIONS 


The coopller options of this Ada implementation, as described in this 
Appendix, are provided b/ the customer. Unless specifically noted otherwise, 
references in this appendix are to compiler documentaticm and not to ^is 
report. 

-D Use double precision for Ada type float. 

-fC Conpile only if necessary. 

-fE Generate error log file. 

-fL Generate exception locaticxi information. 

-fN Suppress numeric checking. 

-fO Prevent harmless changes to low level tmits from 
forcing recompilation. 

-fs Suppress all checks. 

-fU Inhibit library vqpdate. 

-fv Conpile verbosely. 

-fw SuE^ress warning messages. 

-g Generate debug information. 

-G Generate debug informati(m for kulti. 

-help Display help. 

-1 Generate listing file. 

-L use alternate library. 

-N Do a dry run of the conpilation. 

-OLAIHS Perform Optimizaticxis. 

-P Print operations. 

-p Generate profiling information. 

-S Produce assendsly code. 

-Xnnn Turn on the -Xnnn option vhere nnn is a three digit integer. 

-Znnn Turn off the -Xnnn option where nnn is a three digit integer. 


B-1 









CXMPZIATIGN SYSTEM OPTIGNS 


LINKER OPTIGNS 

The linker options of this Ada inplementation, as described in this Appendix, 
are provid^ by the custooer. unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 

-f Suppress main program generatim step. 

-L Use alternate library. 

-m Produce a primitive load map. 

-n Suppress the linking of the object files, but do generate the 

main program. 

-N Do a dry run of the compilation. 

-o Use alternate executable file output name. 

-p Enable profiling. <* 

-P Print operations. 

Link in an extra object file. 

-r Create re-linkable output. 

-V Link verbosely. 

-w Suppress warnings. 


B-2 


j 








APPE24DIX C 

APPENDIX F OF IHE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada isplementation, as described in this Ai^mndix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this i^>pendix are to conpiler documentation and not to this 
report. Inplementation-specific portions of the package STANDARD, vhich are 
not a part of Af^rxlix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTE(XR is range -32768 .. 32767; 
type ByTE_INTEGER is range -128 .. 127; 
type LONG_INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -3.40282346638529Ef38 .. 3.40282346638529E+38; 
type LGNG FLOAT is digits 15 range -1.79769313486231E+308 

.. 1.79769313486231EM-308 ; 

type DURATION is delta 0.0001 range -86400.0 .. 86400.0; 


end STANDARD; 


C-1 










APPEM>IX F OF THE Ada STANDARD 


Appendix F Implementaticxi-Dependent Characteristics 


This appendix lists implementation-dependent characteristics 
of Green Hills Ada. Note that there are no preceding appendices. 

This ^jpendix is called Appendix F in order to comply with the 
Reference Manual for the Ada Programning Language* (LRM) 
ANSI/MIL-STD-ISISA v^ich states that this appendix be named 
Appendix F. 

loqplemented Chapter 13 features include length claxises, enumeration 
representation clauses, record representation claxises, address claiises, 
interrripts, package system, machine code insertions, pragma 
interface, and unchecked programming. 

F.l Pragmas 

The in^lemented pre-defined pragmas are: 

elaborate See the LRM section 10.5. 

interface See section F.1.1. 

list See the LRM Appendix B. 

pack See section F.l.2. 

page See the LRM AppeixUx B. 

priority See the LRM J^^ndix B. 

suppress See section F.l.3. 

inline See the LRM section 6.3.2. 

The remaining pre-defined pragmas are accepted, but presently ignored: 

controlled 

optimize 

system name 

sharedT 

storagejunit 

memory_size 

Named parameter notation for pragmas is not siqjported. 

When illegal parameter forms are encountered at coopile time, the compiler 
issues a warning message rather than an error, as required by the Ada 
language definition. Refer to the ARM ^pendix B for additional 
information about the pre-defined pragmas. 

F.1.1 Pragma Interface 

The form of pragma interface in Green Hills Ada is: 

pragma interface (language, sul^rogrogram [, "link-name"] ); 





APPENDIX F OF THE Ada STANDMO) 


where: 

language This is the interface olanguage, one of the names assoably, 
builtin, c or internal. The names builtin and internal 
are reserved for use by Green Hills coaf>iler maintainers 
in run-time support packages. 

subprogram This is the name of a subprogram to vAiich the pragma 

interface applies. If link-name is omitted, then the Ada 
subprogram name is also tjsed as the (^ject code symbol 
name. Depending an the language specified, some 
automatic modifications may be made to the c^ject code 
symbol name. 

link-name This is an <^tional string literal specifying the name 
of the non-Ai^ subprogram correspcmding to the Ada 
subprogram named in the second parameter. If link-name 
is omitted, then link-name defatilts to the value of 
subprogram translated to lowercase. Depending cxi the 
language specified, some automatic modificaticxis may 
be made to the link-name to produce the actual c^ject 
code symbol name that is generated vAienever references 
are made to the correspc»ding Ada subprogram. 

It is appropriate to \ise the optional link-name parameter 
to pragma interface only \dien the interface subprogram 
has a name that does not correspond at all to its Ada 
identifier or when the interface subprogram name cannot 
be given using rules for constructing A<^ ictentifiers 
(e.g. if the name ccsitains a '$' character). 

The characteristics of object code symbols generated for each interface 

language are: 

assembly The object code symbol is the same as link-name, if no 
link-name string is specified, then the subprogram name 
is translated to lowercase. 

builtin The c^ject code symbol is the same as link-name, but 

prefixed with the string, "_mss_". 

This language interface is reserved for special 
interfaces defined by Green Hills Software, Inc. The 
builtin interface is presently used to declare certain 
low-level run-time operations vhose names must not 
conflict with programmer-defined or language system 
defined names. 

c The object code symbol is the same as link-name, but with 

one underscore character prepended. This is the 

convention used by the C compiler. If no link-name string 
is specified, then the subprogram name is translated to 
lowercase. 


C-3 






APPENDIX F OF IHE Ada STANDARD 


Internal No object code symbol is generated for an internal langi^ge 
interface; this langtiage interface is reserved for special 
interfaces defined by Green Hills Software, Inc. The 
internal interface is presently iised to declare certain 
machine-level bit operations. 

No automatic data conversions are performed on parameters of any interface 
subprograms. It is up to the programmer to ensure that calling conventions 
match and that any necessary data conversions take place when calling 
interface sxjbprograms. 

A pragma interface may appear within the same declarative part as the 
subprogram to vAiich the pragma interface applies, following the subprogram 
declaration, and prior to the first use of the subprogram. A pra^ 
interface timt applies to a sutqprogram declared in a package specificaticxi 
must occur within the package body in this case. A pragma interface 
declaration may appear in the private part of a package specification. 
Pragma interface for library units is not supported. 

Refer to the LRM section 13.9 for additioiud information about pragma 
interface. 

F.1.2 Pragma Pack 

Pragma pack is implemented for composite types (records and arrays). 

Pragma pack is permitted following the composite type declaration to 
which it applies, provided that the pragma occurs within the same 
declarative part as the composite type declaraticm, before any objects 
or compcmients of the composite type are declared. 

Note that the declarative part restriction means that the type declaration 
and accompanying pragma pack cannot be split across a package specification 
and body. 

The effect of pragma pack is to minimize storage consumption by discrete 
component types vAiose ranges permit packing. Use of pragma pack does not 
affect the representations of real types, pre-defined integer types, and 
access types. 


F.1.3 Pragma Suppress 

Pragma suppress is implemented as described int eh LRM section 11.7, with 
these differences: 

* Presently, division_check and overflow_check must be suppressed 
via a cotpiler flag, -fN; pragma suppress is ignored for these 
two numeric checks. 

* The opticmal "ON ->" parameter name notation for pragma suppress 

is ignored. 

* The optic»ial second parameter to pragma sxjppress is ignored; the 


C-4 









APPENDIX F OF 'TOE Ada STANDMU) 


pragma edways applies to the entire scqpe in which it appears. 
F.1.4 Pragma Inline 

Pragma inline is supported for procedures but not for functions. 

F.2 Attributes 

All attributes described in the LBM Appendix A are supported. 

F.3 Standard Types 

Additional standard types are defined in Green Hills Ada: 

* tvte_lnteger 

* short_integer 

* long_integer 

The standard nianeric types are defined as: 

type byte_integer is range -128 .. 127; 

type short_lnteger is range -32768 .. 32767; 

type integer is range -2147483648 .. 2147483647; 

type long_integer is range -2147483648 .. 2147483647; 

type float is digits 6 
range -3.40282 e:+38 .. 3.40282B^38; 

type long float is digits 15 

range -T.79769313486231E+308 .. 1.79769313486231E+308; 

type duration is delta 0.0001 range -86400.0000 .. 86400.0000; 

F.4 Package System 

The specification of package system is: 

package system is 

type address is new long_integer; 

type name is (server); 

system_naroe : constant name server; 

type target_systems is ( 
xjnix, 
netos, 
vms, 


C-5 









APPENDIX F OP THE Ada STANDARD 


Bsdos, 

bare, 

nac ); 


type targetjnachines is ( 
vax, 
zSOOl, 
z8002, 
zSOOOO, 

11168OOO, 
in68020, 

0168030, 

1088000, 

18086, 

i80286, 

i80386, 

180486, 

i860, 

R2000, 

R3000, 

RS6000, 

HPPA, 
spare ); 

target_syste 0 i : constant tar 9 et_systeins unix; 

targetjnachine : constant targetjnachines spare; 

storage_unit : constant 8; 

memory^size : constant 1024; 

— Systent-Dependent Named Nundsers 


inin_int 
inax_int 
maxjdigits 
max mantissa 
finejdelta 
tick 


: constant -2147483648; 

: constant 2147483647; 

: constant 15; 

: ccxistant :« 31; 

; constant 2.0 ** (-31); 
: constant :« 0.01001; 


— Other System-Dependent Declarations 
sxibtype priority is integer range 1 .. 20; 

The value of system.memory_size is presently meaningless. 

F.5 Restrictions on Representation Clauses 

Green Hills Ada supports representation clauses including length clauses, 
enumeration representation clauses, record representation clauses and 
address clauses. 


F.5.1 Length Clauses 







APPENDIX F OP THE Ada STMOARD 


A size speci£icaticm(t'size) is rejected if fewer bits are specified 
than can accomodate the type. The ainiauB size of a coaftraite type 
nay be sijbject to application of pragnapack. It is permitted to specify 
precise sizes for unsigned integer ranges, e.g. 8 for the range 0..255. 
However, because of requirments inpos^ by the Ada language definition, 
a full 32-bit range of \msigned values, i.e. 0..(2**32)-l, cannot be 
defined, even using a size specification. 

The specification of collection size (t'storage_size) is evaluated at 
run-time vAien the scope of the type to tfhich the length clause applies 
is entered, and is therefore subject to rejecticai (via storagejerror) 
based on available storage at the tine the allocation is made, 
collection mayincliide storage used for run-time administratioi of the 
collecti<m, and therefore sh^d not be expected to accomodate a 
specific number of objects. Furttwrmore, certain classes of objects 
such as unconstrained discriminant array components of records may be 
allocated outside a given collection, so a collection may accomodate 
more objects than mi^t be expected. 

The specification of storage for a task activation (t'storage_size) is 
evaluating at run-time tdien a task to which the length clause applies 
is activated, and is therefore subject to rejection (via storage_error) 
based on available storage at the time the allocation is made. Storage 
reserved for a task activation is separate from storage needed for any 
collecticxis defined within a task bo^. 

The specificatican of small for a fixed point type(t'small) is subject 
only to restrictions defined in the LBN section 13.2. 

F.5.2 Enumeration Representation Clauses 

The internal code for the literal of an enumeration type named in an 
enumeration representation clause must be in the range of standard.integer. 

The value of an internal code nay be obtained by applying an apprqpriate 
instantiation of \jnchecked_conversion to an integer type. 

F.5.3 Record Representation Clauses 

The storage unit offset (the at static_siof>le_expression part) is given 
in terms of 8-bit storage units and must be even. 

A bit position (the range part) applied to a discrete type component may 
be in the range 0..15, ^th 0 being the least significant bit of a 
component. A range specification may not specify a size smaller than can 
acccmmodate the cooponent. A range specification for a ccxiponent not 
accommodating bit packing my have a higher ufper bound as appropriate 
(e.g. 0..321 for a discriminant string cooponent). Refer to the internal 
data representation of a given ccoponent in determining the component 
size and assigning offsets. 

Components of discrete types for which bit positions are specified may 
not stradle 16-bit word boundaries. 


C-7 










APPEia>IX F OF THE Ada STANOAKO 




The value of an alignment clause (the optional at mod part) must evaluate 
to 1,2,4, or 8 and may not be smaller than the hi^iest alignment required 
by any component of ^e record. 

F.5.4 Address Clauses 

An address claxise may be stalled for an object (v^ther constant or variable) 
or a taslc entry, but not for a siibprogram, package, or task unit. The 
meaning of an address claiise sillied for a task entry is given in section 
F.5.5. 

An address expression for an object is a 32-bit linear segmented memory 
address of type system.address. 

F.5.5 Interrupts 

A task entry's address clatise can be used to associate the entry with a UNIX 
signal. Values in the range 0..31 are meaningful, and represent the signals 
corresponding to those values. 

An interrupt entry may not have any parameters. 

F.5.6 Change of Representation 

There are no restrictions for changes of representation effected by means 
of type conversion. 

F.6 Implementation-Dependent Compcnents 

No names are generated by the inplementation to denote implementation- 
dependent ccoponents. 

F.7 Machine Code Insertions 

Machine code insertions, described in the LRM section 13.8, are supported in 
Green Hills Ada. 

F.8 unchecked Programming 

The Green Hills Ada compiler supports the unchecked programming generic 
library sxibprograms unchecked deallocation and unchecked^conversion. 

There are no restrictions on Bie use of unchecked_converslon. Ccmversions 
between objects >diose sizes do not conform may result in storage areas 
with undefined values. 

F.9 Input-Output Packages 

A summary of the implementation-dependent input-output characteristics is: 

* In calls to open and create, the form parameter must be the 
empty string (the default value). 


* 


More than one internal file can be associated with a single 

C-8 







APPENDIX F OF THE Ada STATBIARD 


external file for reading only. For writing, only one internal 
file nay be aasociated %d.th an external file; Do not iiae 
reset to get around this rule. 

* Tenporary sequential and idirect files are given names. 

Tnnporary files are deleted when they are closed. 

* File I/O is buffered; text files associated with terminal devices 
are line-buffered. 

* The packages seguential_io and direct_io cannot be instantiated 
with \aiccxistrained composite types or record types with 
discriminants without defaults. 

F.IO Separate Coo^ilation with Generics 

A generic non-library stibprogram body cannot be compiled as a subunit in a 
separate file from its specification when instantiatims precede the 
subprogram body. Also, a generic library package body cannot be compiled in 
separate file from its specification \dien instantiations precede the 
package body. A generic non-library package body can be compiled as a 
subunit in a separate file from its specification vhether or not 
instantiaticxis precede the package bo^. 










