@ Conversion From Tree to Graph Representation of 
Requirements 

A complete representation without duplicate nodes is generated automatically. 

Goddard Space Flight Center, Greenbelt, Maryland 


A procedure and software to imple- 
ment the procedure have been devised to 
enable conversion from a tree represen- 
tation to a graph representation of the re- 
quirements governing the development 
and design of an engineering system. The 
need for this procedure and software and 
for other requirements-management 
tools arises as follows: In systems-engi- 
neering circles, it is well known that re- 
quirements-management capability im- 
proves the likelihood of success in the 
team-based development of complex sys- 
tems involving multiple technological dis- 
ciplines. It is especially desirable to be 
able to visualize (in order to identify and 
manage) requirements early in the sys- 
tem-design process, when errors can be 
corrected most easily and inexpensively. 

Heretofore, largely for computational 
convenience, hierarchies of require- 
ments have been visually represented as 
trees. However, the tree representation 
is inadequate because the underlying 
data structures of sets of requirements 
are graphs. A complete tree representa- 


tion of a set of requirements usually in- 
volves repetition of some requirements 
nodes. In a case in which there are only 
a few requirements, the duplication of 
requirements nodes is not a significant 
barrier to complete understanding of re- 
lationships in the requirements docu- 
ment. In a typical real-world case involv- 
ing a large number of requirements, the 
presence of many duplicate nodes 
makes it difficult or impossible for de- 
signers to be certain that all relation- 
ships among requirements have been 
identified. This leads to decision-making 
based on an incomplete picture of the 
role of a given requirement in the de- 
sign of the overall system. In contrast, 
the graph representation provides a 
complete picture of relationships 
among requirements. 

The procedure is embodied in algo- 
rithms that, in turn, are implemented in 
a Java-language computer program 
called “PaladinRM.” The input to the al- 
gorithms is an Extensible Markup Lan- 
guage (XML) representation of require- 


ments, generated by a previously devel- 
oped computer program called 
“SLATE,” that is equivalent to a tree rep- 
resentation. Exploiting portions of a 
body of work known among software ex- 
perts as the Resource Description 
Framework, some of the algorithms first 
process the input into an equivalent 
graph data structure that does not con- 
tain duplicate nodes. Then a modified 
version of a previously proposed hierar- 
chical-graph-layout algorithm is used to 
construct a block diagram equivalent to 
the graph data structure. The resulting 
display on the computer screen is a lay- 
ered, directed graph (see figure) that as- 
sists in visualization of the hierarchy of 
requirements applicable to the system at 
various levels of abstraction (e.g., system, 
subsystems, and components) . 

The display, the algorithms, and the 
underlying procedure enable enhance- 
ment of the management of require- 
ments with the following features: 

• Visual representation of a subsection 
of the requirements document; 

• Differential update of the database of 
requirements, based on the changes 
made during visual display of the re- 
quirements; and 

• Annotation of requirement nodes 
with attributes of interest. 

This work was done by David Frank 
Everett of Goddard Space Flight Center and 
Vimal Mayank , Natalya Shmunis, and 
Mark Austin of the University of Maryland. 

In accordance with Public Law 96-517, 
the contractor has elected to retain title to this 
invention. Inquiries concerning rights for its 
commercial use should be addressed to: 
University of Maryland 
6200 Baltimore Ave., Suite 300 
College Park, MD 20742 
Refer to GSC-14951-1, volume and num- 
ber of this NASA Tech Briefs issue, and the 
page number. 



This Requirement Graph is a simplified example of the display generated by the procedure summa- 
rized in the text. 


20 


NASA Tech Briefs, April 2009 


