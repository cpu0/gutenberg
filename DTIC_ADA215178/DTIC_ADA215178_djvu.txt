UNCLASSIFIED 

♦ 

# 

ri: r 

7 

seclrpy classification of This page 

OAYifn Dete entered) 




REPORT DOCUMENTATION PAGE 


t. M^ORI MUMBIR 


ttAO wm-jcnoKs 

roRy 


12. (OVT ACCESSION MO. 13. RtClPlEMrS C«UlOG NUHstR 


i 


4. title (»nilSiibtirif} 


i. TYPE or REPORT S PERIOO COVERED 


Ada Compiler Validation Summary Reportipj-oprietar 10 July 1989 to 10 July 1990 
Software Systems, Inc., PSS Ada Compiler VAX/VMS, VAX/VMS pERroRMlMC^Ro. report number 
8350 (Host & Target), 89071011.10120 


7. AUTHOROI 

lAS&i 

Ottobrunn, Federal Republic of Germany. 


t. RERFORMING ORGANIZATION AND ADDRESS 


1. contract or grant mumeeru; 


lABG, 

Ottobrunn, Federal Republic of Germany. 


■XI. CONTROLLING OFFICE NAME AND ADDRESS 

‘ ‘ - • - rani Office 


10. program element, project, task 

AREA A WORK UNIT NUMBERS 


12. REPORT DATE 




United States'Department of Defense 
Washington, DC 20301*3081 


14. MONITORING AGENCY NAME A U)DHlSSllfCiHtrtnt from Controlling Offict) 

lABG, 

Ottobrunn, Federal Republic of Germany. 


16. DISTRIBUTION STATEMENT (ofthisKtport) 

Approved for public release; distribution unlimited 


15. security Class (oftnurtpon) 

UNCLASSIFIED 


15a. gtC^AS^IFlCATION/DCiiSGRAOING 

^ N/A 


17. DISTRIBUTION STATEMENT (oftheitsirscler>ier0chnBiock2O If cliff ertnt from fteport) 

UNCLASSIFIED 


16. supplementary notes 


18. REYaORDS (Continue on reverse neff if netessery end identify by bloth number) 


DTIC 

ELECTE 


DEC 041989 

B 



Ada Prograrruning language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/MIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20. ABSTRACT (Continue on reverse ude if netetstry end identify by block number) 

Proprietary Software Systems, Inc., PSS Ada Compiler VAX/VMS, Ottobrunn, West Germany, 
AX 8350 under VMS, Version 4.7 (Host & Target), ACVC 1.10. 


1473 EDITION OF 1 NOV 65 IS OBSOLETE 

I JAN 7J S/N 0102-LF-014-6601 _ UNCLASSIFIED _ 

security classification of This page (yvnenOeteentered) 


// 2^0 
















Ada Coapiler Validation Suamary Report; 

Coapiler Haae: PSS Ada Coapiler VAX/VMS, Version TV-01.000 
Certificate Nuaber: #39071011.10120 

Host: VAX 8350 under VMS Version 4.7 
Target: VAX 8350 under TAS Version 4.7 

Testing Coapleted 10th July 1989 Using ACVC 1.10 

This report has been reviewed and is approved. 

IvA.. IULI 

^r. S. Hiilbrunner 
lABG mbH, Abt SZT 
Einsteinstr 20 
D8012 Ottobrunn 
West Germany 



Ha Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 




Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 





Ada COMPILER 
VALIDATION SUMMARY REPORT: 
Certificate Number: #89071011.10120 
Proprietary Software Systems, Inc. 
PSS Ada Compiler VAX/VMS 
V.AX/VMS 8350 Host and Target 


Completion of On-Site Testing: 
10th July 1989 


Prepared By: 
IA3G m.faH, Abt SZT 
Einsteinstr 20 
D8012 Ottobrunn 
Vest Germany 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Vashington DC 20301-3081 





TABLE Or CONTEIITS 


CHAPTER 1 INTRODUCTION . 1 

1.1 PURPOSE OF THIS VALIDATION SUMNARY REPORT . . . . 1 

1.2 USE OF THIS VALIDATION SUIIN.ARY REPORT.2 

1.3 REFERENCES.3 

1.4 DEFINITION OF TERMS . 3 

1.5 .ACVC TEST CLASSES.4 

CHAPTER 2 CONFIGURATION INFORMATION . 7 

2.1 CONFIGURATION TESTED . 7 

2.2 IMPLEMENTATION CHARACTERISTICS . 8 

CHAPTER 3 TEST INFORMATION.14 

3.1 TEST RESULTS.14 

3.2 SUMM.ARY OF TEST RESULTS BY CLASS.14 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.15 

3.4 WITHDRAWN TESTS.15 

3.5 INAPPLICABLE TESTS . 15 

3.6 TEST, PROCESSING, AND SVALU.ATION MODIFIC.ATIONS . 20 

3.7 ADDITIONAL TESTING INFORMATION . 21 

3.7.1 Prevalidation.21 

3.7.2 Test Method.21 

3.7.3 Test Site.22 


APPENDIX A DECLARATION OF CONFORMANCE 


APPENDIX B 

APPENDIX C 

APPENDIX D 

APPENDIX D 


APPENDIX F OF THE Ada STANDARD 

TEST PARAMETERS 

WITHDRAWN TESTS 

COMPILER AND LINKER OPTIONS 



Access ioQ For 


NTIS CSRAJcI 


DTIC TAB 

□ 

Unaxinounoed 

□ 

Justlfloatlon_ 


By 


Distribution/ 


Avoiiabllltjr Codes 

Oist 

Avail and/or 
Special 



























CHAPTER 1 


INTRODUCTION 


This Validation Summary Report describes the extent to which a 

specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 


This report explains all technical term.s used within it and thoroughly 
reports the results Qf-^tss,ti^g this compiler using the Ada -Compiler 
Validation Capability ,(AOVC)-£^" I. An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
m.ust conform to the requirem.ents of the Ada Standard. The Ada Standard 


must be implemented in its entirety, and nothing can be ip.plem.ented that is 


not in the Standard. 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 


The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 


particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 


report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. \The purpose of validating is to ensure conformity 
of the compiler to the Ada, Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 


given in this report. 


The information in this 


illegal language constructs. The testing also identifies behavior that 
implementation dependent, | but is permitted by the Ada Standard, 
classes of tests are used, i These tests are designed to perform checks 
compile time, at link time,\and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


is 

Six 

at 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 


1 





IIiTpnDnrTT.-)'! 


. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by lABG mbH, Abt SZT according to 
procedures established by the Ada Joint Program Office and administered by 
the Ada Validation Organization (AVO). On-site testing was completed 10th 
July 1989 at lABG mbH, Ottobrunn. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


lADG mbH, Abt SZT 
Einsteinstr 20 
D8012 Ottobrunn 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada V'lidation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 







1.3 REFERENCES 


1. Reference Manual for the Ada Progranming Language, 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines, .Ada -foint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability I-mple-menters’ Guide, SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

.Ada Standard ANSI/MIL-STD-1815A, February 1933 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada 'Validation Organization. The AVO has oversight 

authority over all AVF practices for th- purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the conte.xt of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 


Host 


The computer on which the compiler resides. 






IIITROr’JCTION 


Inapplicable An ACVC test that uses features of the language that a 
test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 


Passed test An ACVC test for which a compiler generates the expected 

result. 

Target The computer which executes the code generated by the 

compiler. 

Test A program that checks a compiler’s conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 


Withdrawn An ACVC test found to be incorrect and not used to check 

test conformity to the Ada Standard. A test nay be incorrect 

because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is e.xamined to verify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 
every illegal construct that it contains is detected by the compiler. 





'••ITRODUCTTC!? 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSEh, FAILED, or NOT APPLICABLE message indicating the 
result vhen it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to com.pile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to e.xecute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK.FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK^FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
tests. However, some tests contain values that require the test to be 


«=. 


A. 





IIITRODUCTICM 


custoraized according to iiaplenentation-specific values—for example, an 
illegal file name. \ list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suii-e and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 






CONFIGURATIOI'i IirFORMATIOtl 


CHAPTER 2 

♦ 

CONFIGURATION INFORMATION 

/ 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler; PSS Ada Compiler VAX/VMS, Version TV-01.000 
ACVC Version; 1.10 
Certificate >’uraber: #89071011.10120 
Host Computer; 

Machine; VAX 8350 

Operating System; VMS Version 4.7 

Memory Size: 12 MB 

Target Computer; 

Machine; VAX 8350 

Operating System; VMS Version 4.7 

Memory Size; 12 MB 




C01'’^IG*tRATT0!^ I!!FORMATION 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 

1) The compiler correctly processes a compilation containing 
723 variables in the same declarative part. (See test 
D290O2K.) 

2) The compiler correctly processes tests containing loop 

statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

3) The compiler correctly processes tests containing block 

statements nested to 65 levels. (See test D56O01B.) 

4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

1) This implementation supports the additional predefined types 
SHORT.INTEGER and LONG.FLOAT in the package STANDARD. (See 
tests B86O01T..Z (7 tests).) 


c. Expression, evaluation. 

The order in which e.xpressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

1) None of the default initialization expressions for record 
components are evaluated before any value is 
checked for membership in a component's subtype. (See test 
C32117A.) 

2) Assignments for subtypes are performed with the sane precision 
as the base type. (See test C35712B.) 





C0:I?IGT;?.ATIG!I I!I?0?.Hrt?I0n 



3) This iapleaentation uses no extra bits for extra precision 
and uses all extra bits for extra range. (See test C35903A.) 

4) BOHERICJSRROR is raised for predefined and largest integer and 
no exception is raised for saallest integer '^hen an integer 
literal operand in a comparison or aembership test is outside 
the range of the base type. (See test C45232A.) 

5) Ho exception is raised when a literal operand in a fixed- 
point coaparison or aeabership test is outside the range of 
the base type. (See test C45252A.) 

6) Underflow is not gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The aethod by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attespt to detera"' e the method of rounding, the test results 
indicate the follov ng: 

1) The aethod used for rounding to integer is round away from 
zero. (See tests C46012A..Z (26 tests).) 

2) The method used for rounding to longest integer is round 
away from zero. (See tests C46012A..Z (26 tests).) 

3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAIKT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 
implementation: 

1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises MUMERIC^ERROR for 
one dimensional array and two dimensional array types and no 


exception for one dimensional array 
subtypes. (See test C360C3A.) 

and 

two dimensional 

array 

NUMERIC_ERROR 

is raised when 

an 

array type 

with 

INTEGER'LAST 
C36202A.) 

+ 2 components 

is 

declared. (See 

test 


O 






COIIFIGUP.ATIOII IJfFO?.;:.;?!-?:! 


3} !nJl:SRIC_ERROR is raised when an array type with 
SYSTEM.HAX TN? + 2 conpcnents is declared. (See test 

C36202B.) 

4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUHERIC ERROR when the array type is declared. (See 
test C52103X.) 

5} A packed two-dinension-al BOOLEAN array with more than 
INTEGER'LAST components raises NUHERIC_ERROR when the array 
type is declared and exceeds INTEGER'LAST. (See test 
C52104Y.) 

6) In assigning one-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52G13A.) 

7) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


8) A null array with one dimension of length greater 
than INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an implemen¬ 
tation may accept the declaration. However, lengths must 
match in array slice assignments. This implementation raises 
NUNERIC_ERROR when the array type is declared. (See 
test E52103Y.) 


Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


Aggregates. 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that all choices are evaluated before 
checking against the index type. (See tests C43207A and 
C43207B.) 

2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 




COflFIGUSATIOH INFORMATION 


3) CONSTRAINT_ERROR is raised after all choices are 
evaluated when a bound in a non-null range of a non-null 
aggregate does not belong to an index subtype. (See test 

E43211B.) 


h. Pragmas. 

1) The pragma INLINE is not supported for functions or procedures 
<See tests LA3004A..B (2 .ests), EA3004C..D (2 tests), and 
CA3O04E..F (2 tests).) 


i. Generics. 

This compiler enforces the following two rules concerning 
declarations and proper bodies which are individual compilation 
units: 

o generic bodies must be compiled and completed before their 
instantiation. 

o recompilation oC a generic body or any of its transitive 
subunits makes all units obsolete which instatiate that 
generic body. 

These rules are enforced whether the compilation units are in 
separate compilation files or not. AI408 and AI506 allow this 
behaviour. 

1) Generic specifications and bodies can be compiled 

in separate compilations. {See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 
compiled in separate compilations. (See tests CA1012A and 
CA20O9F.) 

3) Generic library subprogram specifications and bodies can be 
compiled in separate compilations. (See test CA1012A.) 

4) Generic non-library package bodies as subunits can 
be compiled in separate compilations. (See test CA2009C.) 

5) Generic non-library subprogram bodies can be 
compiled in separate compilations from their stubs. (See test 
CA2009F.} 

6) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


t 1 







COilFIGURATIOH IIIFORMATION 


7) Generic package declarations and bodies can be 
compiled in separate compilations. {See tests CA20O9C, 
BC3204C, and BC3205D.) 

8) Generic library package specifications and bodies can be 
compiled in separate compilations. (See tests 
BC3204C and BC3205D.) 

9) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


Input and output. 

1) The package SEQUENTIAL_IO cannot be instantiated with 

unconstrained array types or record types with 

discriminants without defaults. (See tests AE2101C, EE2201D, 

and EE2201E.) 

2) The package DIRECT^IO cannot be instantiated with 

unconstrained array types or record types with 

discriminants without defaults. (See tests AE2101H, EE2401D, 

and EE2401G.} 

3) Modes IM_FILE and OUT.FILE are supported for SEQUEIITIAL 10. 
(See tests CE2102D..E, CE2102N, and CE2102P.) 

4) Modes IN_FILE, OOTJ’ILE, and IMOUT FILE are supported for 
DIRECT.IO. (See tests CE2102F, CE2102I..J (2 tests), CE2102R, 
CE2102T, and CE2102y.) 

5) Modes IN_FILE and OUT_FILE are supported for text files. 
(See tests CE3102E and CE3102I..K (3 tests).) 

6) RESET and DELETE operations are supported for 
SEQUENTIAL_IO. (See tests CE2102G and CE2102X.) 

7) RESET and DELETE operations are supported for DIRECT 10. 

(See tests CE2102K and CE2102y.) 

8) RESET and DELETE operations are supported for text 

files. (See tests CE3102F..6 (2 tests), CE3104C, CE3110A, and 
CE3114A.) 

9) Overwriting to a sequential file does not truncate the file. 
(See test CE2208B.) 


10) Temporary sequential files are given names and 
deleted when closed. (See test CE2108A.) 







CONFIGURATION INFORMATION 


11) Temporary direct files are given names and deleted when 
closed. (See test CE2108C.) 

12) Temporary text files are given names and not deleted 

when closed. (See test CE3112A.) 

13) Only one internal file can be associated with 

each external file for sequential files. (See tests 
CE2107A..E (5 tests), CE2102L, CE2110B, and CE2111D.) 

14) Only one internal file can be associated with 

each external file for direct files. (See tests CE2107F..H (3 
tests), CE2110D and CE2111H.) 

15) More than one internal file can be associated with 

. each external file for text files when reading only. (See 

tests CE3111A..E (5 tests), CE3114B, and CE3115A.) 




TEST IIIFORMATIOU 




CHAPTER 3 
TEST INFORHATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this co~piler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
deterained that 482 tests were inapplicable to this iaplementation. 
All inapplicable tests were processed during validation testing except for 
285 executable tests that use floating-point precision exceeding 
that supported by the iapleoentation. Hodifications to the code, 
processing, or grading for 84 tests were required to successfully demon¬ 
strate the test objective. (See section 3.6.) 

The AVF concludes that the testing results de.monstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST CLASS 

C D 

E 

L 

TOTAL 

Passed 

127 

1131 

1850 

17 

22 

44 

3191 

Inapplicable 

2 

7 

465 

0 

6 

2 

482 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 





V'” 


?ES? IIlrO?!;A?ION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT 

2 

3 

4 

5 

6 

CHAPTER 
7 8 

9 

10 

11 

12 

13 

14 

TOTAL 

Passed 

192 

547 

496 

245 

172 

99 

160 

332 

127 

36 

252 

257 

276 

3191 

N/A 

20 

102 

184 

3 

0 

0 

6 

0 

10 

0 

0 

112 

45 

482 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests were withdrawn from ACVC Version 1.10 
at the tine of this validation: 


E28005C 

A390056 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

C02A63C 

CD2A63D 

C02A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A766 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84N 

CD2A84M 

CD50110 

CD2B15C 

CD7205C 

CD2D11B 

CD5007B 

ED70O4B 

ED7O05C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CE3301A 

CD7203B 

CE3411B 

CD7204B 

CD7205D 

CE21071 

CE3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others nay 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 482 tests were inapplicable for 
the reasons indicated: 

a. The following 285 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX_DIGITS: 

C24113r..Y (20 tests) C35705F..Y (20 tests) 

C35706F..Y (20 tests) C35707F..Y (20 tests) 

C35708F..Y (20 tests) C35802F..Z (21 tests) 





TEST IIIF0R:!ATI0?? 




C45241F..Y (20 tests) 
C45421F..Y (20 tests) 
C45524F..Z (21 tests) 
C45641F..Y (20 tests) 


C45321F..Y (20 tests) 
C45521F..Z (21 tests) 
C45621F..Z (21 tests) 
C46012F..Z (21 tests) 


b. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

c. The following 16 tests are not applicable because this 

implementation does not support a predefined type LOHG^IHTEGER: 

C45231C C45304C C45502C C45503C C45504C 

C45504F C45611C C45613C C45614C C45631C 

C45632C B52O04D C55B07A B55B09C B86001W 

CD7101F 

d. C45531}!..P (4 tests) and C45532M..P (4 tests) are innapplicable 
because they require a value of MAXJSAHTISSA greater than 32. 

e. C86001F is not applicable because, for this implementation, the 

package TEXT_IO is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_IO, and 

hence package REPORT, obsolete. 

f. B36001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, LOHG.IMTEGER, or SHORT.IUTEGER. 

g. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

h. B86001Z is not applicable because this implementation supports no 
predefined floating-point t3n?e with a name other than FLOAT, 
LONG.FLOAT, or SHORT_FLOAT. 

i. CA2009A, CA20O9C, CA2009F and CA2O09D are not applicable because 
this compiler creates dependencies between generic bodies, and 
units that instantiate them (see section 2.2i for rules and 
restrictions concerning generics). 

j. LA3004A, LA3004B, EA30O4C, EA3004D, CA3004E, and CA3004F are not 
applicable because this implementation does not support pragma 
INLINE when applied across compilation units (See Appendix F of 
the Ada Standard in Appendix B of this report, and Section 2.2.h 
(D). 

k. CD10O9C, CD2A41A..E (5 tests) and CD2A42A..J (10 tests) are not 
applicable because this implementation imposes restrictions on 
'SIZE length clauses for floating point types. 






TSC? 


l. CD2A61I is not applicable because this implementation imposes 
restrictions on ’SIZE length clauses for array types. 

m. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation imposes restrictions on 'SIZE length 
clauses for access types. 

n. CD2A91A..E (5 tests) are not applicable because 'SIZE length 
clauses for task types are not supported. 

o. CD2B116 is not applicable because 'STORAGE_SIZE representation 
clauses are not supported for access types where the designated 
type is a task t 3 n;>e. 

p. CD2B15B is not applicable because a collection size larger than 
the size specified was allocated. 

q. The following 76 tests are not applicable because, for this 
implementation, address clauses are not implemented: 


COSeOSB..! 

(8 tests) 

CD5011A 

CD50113 

CD5011C 

CD5011D 

CD5001E 

CD5011F 

CD5011G 

CD5011H 

CD5011I 

CD5011K 

CD5011L 

CD5011!! 

CD5011N 

CD5011Q 

CD5011R 

CD5011S 

CD5012A 

CD5012B 

CD5012C 

CD5012D 

CD5012E 

CB5012F 

CD5012G 

CD5012H ' 

CD5012I 

CD5012J 

CD5012L 

CD50121! 

CD5013A 

CD5013B 

CD5013C 

CD5013D 

CD5013E 

CD5013F 

CD5013G 

CD5013H 

CD5013I 

CD5013K 

COS013L 

CD5013M 

CD5013K 

CD5013O 

CD5013R 

CD5013S 

CD5014A 

CD5014B 

CD5014C 

CD5014D 

CD5014E 

CL5014F 

CD5014G 

CD5014H 

CD5014I 

CD5014J 

CD5014K 

CD5014L 

CD5014M 

CD5014N 

CD5014O 

CD5014R 

CD5014S 

CD5014T 

CD5014U 

CD5014V 

CD5014W 

CD5014X 

CD5014Y 

CD5014Z 


r. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

s. AS2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected 
by this compiler. 

t. CE2102D is inapplicable because this implementation supports 
CREATE with IK_FILE mode for SEQUENTIAL.IO. 

u. CE2102E is inapplicable because this implementation supports 
CREATE with OUT_FILE mode for SEQUENTIAL.IO. 


I f 







V. CE2102F is inapplicable because this iiaplenentation supports 

CREATE with INOUT.FILE mode for DIRECT_IO. 

w. CE2102I is inapplicable because this itsple?.entation supports 

CREATE with IN^FILE mode for DIRECT.IO. 

X. CE2102J is inapplicable because this implementation supports 

CREATE with OUTJFILE mode for DIRECT_IO. 

y. CE2102N is inapplicable because this implementation supports OPEN 
with INJFILE mode for SEQUENTIAL.IO. 

z. CE2102O is inapplicable because this implementation supports RESET 
with IN.FILE mode for SEQUENTIAL_IO. 

aa. CE2102P is inapplicable because this implementation supports OPE?? 
with OUTJFILE code for SEQOENTIAL_IO. 

ab. CE2102Q is inapplicable because this implementation supports RESET 
with OOT_FILE node for SEQOEHTIAL^IO. 

ac. CE2102R is inapplicable because this implementation supports OPEN 
with IHOOT_FILE mode for DIRECT_IO. 

ad. CE2102S is inapplicable because this implementation supports RESET 
with IHODT_FILE mode for DIRSCT^IO. 

ae. CE2i02T is inapplicable because this icplecentation supports OPEN 
with IMJFILE node for DIRECT.IO. 

af. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE node for DIRECT^IO. 

ag. CE2102V is inapplicable because this implementation supports OPEN 
with OUTJFILE mode for DIRECT_IO. 

ah. CE2102N is inapplicable because this implementation supports RESET 
with OUT_FILE mode for DIRECT_IO. 

ai. CE2107A..E (5 tests), CE2107L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the sane external file for sequential files. The proper 
exception is raised when multiple access is attempted. 

aj. CE2107F-.H (3 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
external file for direct files. The proper exception is raised 
when multiple access is attempted. 

ale. CE3102E is inapplicable because text file CREATE with IN_FILE node 
is supported by this implementation. 





?SS? INFORMATIOII 


al. CE3102F is inapplicable because text file RESET is supported by 
this implementation. 

am. CE3102G is inapplicable because text file deletion of an external 
file is supported by this implementation. 

an. CE3102I is inapplicable because text file CREATE with OUT_FILE 
mode is supported by this implementation. 

ao. CS3102J is inapplicable because text file OPEN with IH_FILE mode 
is supported by this implementation. 

ap. CE3102K is inapplicable because text file OPEN with OUTJFILE mode 
is not supported by this implementation. 

aq. CE3111B, CS3111D..E (2 tests), CE3114B, and CE3115A are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 




TSST INFORMATIon 


3.6 TEST, PROCESSING, AND EVALUATION NODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases vhere 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test {such as raising 
one exception instead of another). 

Modifications were required for 84 tests. 

a. The following tests were split because syntax errors at one point 
resulted in the compiler not detecting other errors in the test: 


B220O3A 

B240O7A 

B24009A 

B25002B 

B32201A 

B34005N 

B34O05T 

B340O7H 

B35701A 

336171A 

B36201A 

B37101A 

B37102A 

B37201A 

B37202A 

B37203A 

B37302A 

B38003A 

B38003B 

B33O08A 

338008B 

B33O09A 

B38O09B 

B38103A 

B38103B 

B38103C 

B38103D 

B38103E 

B41202A 

B43202C 

B440O2A 

B48002A 

B480O2B 

348002D 

B48O02E 

B48O026 

B48003E 

B49003A 

B49005A 

B49O06A 

B49O07A 

B49009A 

B4A010C 

B54A20A 

B54A25A 

B53002A 

B58002B 

B59001A 

B590C1C 

B59001I 

B62006C 

B67001A 

B67001B 

B67001C 

B67001D 

B74103E 

B74104A 

B85O07C 

B91005A 

B95O03A 

B95007B 

395031A 

B95032A 

B95074E 

BC1O02A 

BC1109A 

BC1109C 

BD5005B 

BC1202E 

BC1206A 

BC2001E 

BC3005B 

BC3009C 


b. For the two tests BC3204C and BC3205D, the compilation order was 
changed to 


BC3204C0, Cl, C2, C3M, C4, C5, C6, C3M 
and 

BC32O5D0, D2, DIM 

respectively. This change was necessary because of the compiler's 
rules for separately compiled generic units (see section 2.2i for 
rules and restrictions concerning generics). Vhen processed in 
this order the expected error messages were produced for BC3204C3M 
and BC3205D1M. 

c. The two tests BC3204D and BC3205C consist of several compilation 
units each. The compilation units for the main procedures are 
near the beginning of the files. When processing these files 
unchanged, a link error is reported instead of the expected 
compiled generic units. Therefore, the compilation files were 


20 





TTfFOP.!'ftTI'''tI 


modified by appending copies of the main procedures to the end of 
these files. When processed, the expected error messages were 
generated by the compiler. 

d. Tests C39O05A, CD70C4C, CD7O05E and CD7006E wro'^'y presume an 
order of elaboration of the library unit bodies. Tnese tests were 
modified to include a PRAGMA ELABORATE (REPORT); 

e. Test E28002B checks that predefined or unrecognized pragmas may 
have arguments involving overloaded identifiers without enough 
contextual imformation to resolve the overloading. It also che'^ks 
the correct processing of pragma LIST. For this implementa*- on 
pragma LIST is only recognised if the compilation file is compiled 
without errors or warnings. Hence, the test was modified 
demonstrate the correct processing of pragma LIST. 

f. Tests C45524A and C45524B contain a check at line 136 that may 
legitimately fail as repeated division may produce a quotient that 
lies within the smallest safe interval. This check was modified 
to include, after line 138, the text: 

ELSIF VAL <= F'SAFEJMALL THEN COMMENT ("UNDERFLOW SEEMS' GRADUAL"); 

For this implementation, the required support package specification, 
SPPRT13SP, was rewritten to provide constant values for the function names. 

3.7 ADDITIONAL TESTING INFORMATION 

3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the PSS Ada Compiler VAX/VMS was submitted to the AVF by the applicant 
for review. Analysis of these results demonstrated that the compiler 
successfully passed all applicable tests, and the compiler exhibited 
the expected behavior on all inapplicable tests. 

3.7.2 Test Method 

Testing of the PSS Ada Compiler VAX/VMS using AC^C Version 1.10 was 
conducted by lABG on the premises of lABG. The configuration in which 
the testing was performed is described by the following designations 
of hardware and software components: 

Host computer: VAX 3350 

Host operating system: VMS /ersion 4.7 

Target computer: VAX 8350 

Target operating system: V!^S Version 4.7 

Compiler: PSS Ada Compiler VAX/VMS, Version TV-01.000 

The original ACVC distribution tape was loaded to the host machine, where 
it was customized to remove all withdrawn tests and tests requiring unsup- 







TEST INFORMATIOH 


ported floating point precisions. Tests that make use of implementation 
epecific values were also customized. Tests requiring modifications during 
the prevalidation testing were modified accordingly. 

After the test files ware loaded to disk, the full set of tests was 
compiled linked, and all executable tests were run on the VAX 
8350, Results were evaluated and printed on the host machine. 

The compiler was tested using command scripts provided by Proprietary 
Software Systems and reviewed by the validation team. The compiler was 
tested using no option qualifiers. All chapter B tests were compiled with 
the /LIST qualifier, 

A full list of compiler and linker options is given in Appendix E. 

Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. 

• 3 . 7.3 Test Site 

Testing was conducted at IA3G mbH, Ottobrunn and was completed on 10th July 
1989. 





APPSHDIX A 


DECLARATIOII OF C03F0RHANCE 


Proprietary Software Systeas has subaitted the 
Declaration of Conforaance concerning the PSS Ada 
VAX/YHS. 


following 

Compiler 






PROPRIETARY SOFTWARE SYSTEMS 


DECLARATION OF CONFORMANCE 

LOOl-1739 


Compiler Implementor: PROPRIETARY SOFTWARi:, SYSTEMS, INC. 
Ada Validation Facility: lABG mbH, Abt SZT. 

Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Configuration 


Base Compiler Name: 
Host Architecture: 

Host OS and Version: 
Target Architecture: 
Target OS and Version: 


PSS Ada Compiler VAX/VMS Version TV-01.000 

VAX 8350 

VMS Version 4.7 

VAX 8350 

VMS Version 4.7 


Implementor's Declaration 

I, the undersigned, representing PROPRIETARY SOFTWARE SYSTEMS, 
INC., have implemented no deliberate extensions to the Ada Language 
Standard ANSI/MIL-STD-1815A in the crnpiler(s) listed in this 
declaration. I declare that PROPRIETARY SOFTWARE SYSTEMS, INC., 
is the owner of record of the Ada language compiler(s) listed above 
and, as such, is responsible for maintaining said compiler(s) in 
conformance to ANSI/MIL-STD-1815A. All certificates and 

registrations for Ada language compiler(s) listed in this 
declaration shall be made only in the owner's corporate name. 

-^ _ Date: _ 

^^RIETARY SOFTWARE SYSTEMS, INC. 

■ 10^1 E. Flaiss 


Owner's Declaration 

I, the undersigned, representing PROPRIETARY SOFTWARE SYSTEMS, 
INC., take full responsibility for implementation and maintenance 
of the Ada compiler(s) listed above, and agree to the public 
disclosure of the final Validation Summary Report. I declare that 
all of the Ada language compiler(s) listed, and their host/target 
performance, are in compliance with the Ada Language Standard 
ANSI/MIL-STD-1815A. 

_ Date: 

P^^IETARY SOFTWARE SYSTEMS, INC. 

Joed E. Fleiss 


APFErnrC ? of the r.da STAHOr.?.!} 


iPPSHDIX B 

APPEHDIX ? OF THE Ada STAHDARD 


The only allowed inplecentation dependencies correspond to 
i 2 pler.ent at ion-dependent pragmas, to certain riachine-dependent 
conventions as mentioned in chapter 13 of the Ada Standard, and to 
certain allowed restrictions on representation clauses. The 
inplementation-dependent characteristics of the PSS Ada Cccpiler 
Version TV-Oi.OOO, as described in this Appendix, are prcvided by 
Proprietary Software Systens- Unless specifically ncted otherwise, 
references in this appendix are to ccspiier dccucentaticn and net 
to this report. Inplenentation-specific portions of the package 
ST.ANDARD, are contained in Appendix F. 





Proprietary Software Systems, iixx 


PSS AOA COMPILER USER'S GUIDE 


15 May 1989 


Supported Pragmas 
ELABORATE 


PRIORITY 


MIL-STD-1815A APPENDIX F 

This section discusses bow the PSS Ada Compiler handles MIL- 
STD-1815A issues that are left up to the implementor. 

The PSS Ada Compiler supports the following pragmas: 

This pragma controls elaboration order. It ^ledfies that the 
named library unit must be elaborated before the following 
conqiilation uniL The pragma is allowed onfy immediate^ after 
the context clause of a conciliation unit (before the subsequent 
library unit or secondary unit). Each argument to the pragma 
must be the simple name of a library unit mentioned Iw the 
context clause. 

An elaboration order that meets the rules of Ada may not 
satisfy the needs of some applications. In such cases, the user 
will specify the elaboration order via the pragma ELABORATE. 
In particular, a statement such as 

PRAGiVU ELABORATE (INITIAUZE); 

may be used to cause an initialization package or procedure to 
be elaborated before all o±er units. 

This pragma specifies the priori^ of a task or the priority of a 
main program. It specifies the priority • s a static expression of 
the predefined integer subtype PRIORITY which has a range 
of 10 to 200. The pragma is allowed within the specification of 
a task imit or immediately within the outermost declarative part 
of a main program. 

Priority affects the order of task execution. The scheduler 
selects the task with the highest pnority for execution. New 
tasks that are ready to execute are placed in a priority-ordered 
queue with tasks of equal priority being placed in time-arrival 
order within the same priority level. The following statement 
in a task sets its priority to 10. 

PRAG\U PRIORITY (10); 


-46- 

DTV-3000 

MIL-STD-1815A APPENDIX F 


Proprietary Software Systems. Inc. 


PSS ADm CGMPILSa USER'S GUIDE 


15 May 1989 


PACK 


UST 


PAGE 


UNKAGE 


TLc scheduler will selea another waiting task to start execunon 
if the executing task becomes blodted or when a higher priority 
task becomes ready. In other words, a higher priority t^ wiU 
preempt a lower priori^ task. All tasks whidi do not have a 
sped&ed priori^ have a default priori^ of 10. 

The pack pragma tells the compOer to use the minimum amount 
of storage for the named record or array This pragma 
will be ignored if a representation clause is ^ledfied for the 
type. The placement of the pragma is the same as that for 
representation clauses. Usualfy the pragma is placed 
immediately after the declaration. The following 
statements declare a type named word to be a packed arrz^ of 
booleans. Since the array has a range of 0-31, the pack pragma 
has the effert of packing the array wpc into one 32 bit word for 
the VAX targeL 

TYPE WORD IS ARRAY (0-31) OF BOOLEAN; 

PRAGNU PACK (WORD); 

The list pragma controls the production of a compilation listing 
The list (on) pragma turns on the listing and the list (o^ 
pragma turns off the listing until a list (on) pragma is 
encountered. In the presence of compiler generated diagnostic 
messages, this pragma is ignored and the full listing is produced. 
An example of the list pragma follows. 

PRAG>U LIST (OFF); 

The page pragma specmes that the source text that follows the 
page pragma is to stan at the top of a new page in the 
compilation listing. In the presence of compiler generated 
diagnostic messages, this pragma is ignored. An example of the 
page pragma follows. 

PRAG>U PAGE; 

NAME This pragma effects a link-time binding between an Ada entity 

and an externally meaningful name The format is: 


-47- 

DTV-3000 


MIL-STD t815A APPENDIX F 



Proprietary Software Systems, inc. 


PSS ADA CX)}ilPlLHa USEH'S GUIDE 


IS^fay 1969 


PRAGMA L1NKaG£_KAM£ (Ada-simple-name, 

string-constant); 

where the Ada-simple-name is the name of a subprogram, 
exception, or objecL The Ada-simple-name must be declared 
in a package speciiication and the pragma must appear in the 
same package specification, after the declaration. The string* 
constant is a name that is not denned within a compilation unit 
in the user^s libnuy, but rather an external name to be supplied 
to the link editor. 

The effea of pragma LINKAGE_N'AME is to provide a 
specified extern^ name for an Ada entity, allowing the link 
editor to associate the enti^ with a symbol (string-constant) that 
is known to the link editor but not to the user’s library units. 
The PSS Ada Compiler will not check the string-constant 
supplied by the user as the external name; it is the user’s 
responsibility to ensure that the string-constant is acceptable to 
the link editor and meaningful to the program. 

FOREIGN_BODY This pragma informs the PSS Ada Compiler that the body of 

a package, including all subprograms, objects, and exceptions, 
is implemented in an extem^y compiled module. The external 
module may be written in Ada (and compiled into another 
library) or in another language. 

The package containing pragma FOREIGN_BODY must be 
a non-generic top-level package specification. It may contain 
only the following; subprogram declarations, object declarations, 
number declarations, and pragmas. Object declarations must 
use an unconstrained type mark that is not a task type, and 
carmot use an initial value expression. The foreign body itself 
is responsible for initialization of all objects declared in the 
package, including objects that are normally initialized implicitly 
(such as access types and certain record types, as described in 
[LRM 3.2.1]). the FOREIGN_BODY pragma must appear 
before any declarations. The format is: 


PRAGMA FOREIGN_BODY (language_name, 

elaboration routine name); 


-48- 

DTV-3000 


MIL-STD-1815A APPENDIX F 



Proprieiary Software Systems, inc. 


PSS ADA CXJMPiLEa USER’S GUIDE 


iSMay ISeS 


where laiiguage_aaine is one of the following: JOVIAL, Modula- 
2, C FORTRAN. Pascal. CDBOL, or assembler. The 
language_aame informs the PSS Ada Compiler whidi subroutine 
linkage will be used by the foreign module. The foreign module 
may indude a routine for inidalizatioo. which is identified 
the optional parameter elaboration_routine_name. It is the 
user's responsibili^ to ensure that foreign modules use data 
representations, calling conventions, and (t^donally) 
initialization routines th^ are compatible with the PSS Ada 
Compiler and with the Ada language itselfi 

When using pragma FOREIGN_BOD Y. the user should indude 
a LINKAGE_NA\1£ pragma for each dedaraficn in the 
package, mcluding dedarations in nested package specifications. 
This will give the user positive control over external names used 
by the foreign module and ensure that no naming conflicts occur 
at link time. 

Appendix E gives a complete example of a program that uses 
the pragmas LINKAGE_NAME and FOREIGN__BODY in 
order to access several functions in the VAX Run-time library. 
LINKAGE_NAME assodates the names of the VAX intern^ 
names and the Ada names. FOREIGN_BODY_body specifies 
the language. The ADALIB command: 

SADALIB INSERT/OLB STARLET- 

SYS$ROOT:[SYSLIB]STARLET.OLB 

will allow the user to link with procedures and functions in the 
VAX Run-time library. 


-49- 

DTV-3000 


MIL-STD-1815A APPENDIX F 



Propriet a ry Software Systems, inc. 


PSS ADA CCMFiLEa USER'S GUIDE 


15 May 1989 


Unsupported Pragmas 

CONTROLLED 

INUNE 

INTERFACE 

MEMORY SIZE 

OPTIMIZE 

SHARED 

STORAGEUNIT 

SUPPRESS 

SYSTEMNAME 

Attributes 


The other predefined pragmas in the language currently have 
no efiecL However the same functionaliw is provided for some 
pragmas by other means. These pragmas are the following: 

There is no automatic storage deallocation of access collections. 
If YOU want to deallocate, use the standard generic fimction for 
deallocation: LTS^CHECKED DEAUjOCATTON. 

The INTJNE pragma is not supported in this version. It wiil 
be supponed in subsequent versions. 

Instead of the INTERFACE pragma, the PSS Ada Compiler 
uses the combination of the LINKAGE_NAME and 
FOREIGN_BODY pragmas that are implementation defined. 

The MEMORY_SIZE pragma is not supported for the VAX 
target 

The OPTIMIZE option is used to control optimization rather 
than the OPTIMIZE pragma. 

The SHARED pragma is not supported for the VAX target 

The STORAGE_UNIT pragma is not supponed for the VAX 
target 

The SUPPRESS option is used to control suppression of 
exceptions rather than the SUPPRESS pragma. 

The SYSTEM_NAME pragma is not supponed for the VAX 
target Instead, the assigned name is VAX. 

Aside from restrictions on cenain representation specifications 
(see the Restrictions section that follows), the PSS Ada 
Compiler supports no implementation-dependent attributes. 


-50- 

DTV-3000 


MIL-STD-1815A APPENDIX F 



Proprietary Software Systems. Inc. 


PSS ADA COMPILER USER’S GUIDE 

15 May 1989 


Package "SYSTEM" 


Restrictions 


The prede&ned package called SYSTEM contains the definitions 
of certain implementation dependent characteristics. In 
accordance with Section D.7 of the Ada Language Reference 
Manual^ the package is defined as follows: 


package SYSTEM is 
-Required definitions: 

type ADDRESS is new integer, 
type NA\fE is (VAX); 


SYSTEMNAME 

STORAGE_UNIT 

MEMORYSIZE 

MAXEST 

MINLNT 

MAXDIGITS 

MAXMANTISSA 

FINE_DELTA 

TICK 


constant NAME 

constant 

constant 

constant 

constant 

constant 

constant 

constant 


= VAX; 

= 8 ; 

= 1000000 ; 

= 2”32-l; 

= -MAX_INT-1; 
= 9; 

= 31; 

= 2#1.0#e-31; 

= 0.01667; 


: constant 

subtype PRIORITY is INTEGER range 10.200; 
DEFAULT_PRIORITY : constant: = PRIORTTYFIRST; 
RUNTIME ERROR : exception; 


end SYSTEM; 


Representation .clauses are used to map Ada types onto the 
target machine. The PSS Ada Compiler implements all 
representation clauses defined in Chapter 13 of the URM except 
for address clauses [LRM 13 J]. Support is provided for length 
clauses [LRM 13.2], enumeration representation clauses [LRM 
133], and record representation clauses [LRM 13.4], with the 
following restrictions: 

• Length clauses for size specifications (TSIZE) are restricted 
to types and subtypes whose sizes are known at compile time. 

• Length clauses for size specifications (TSIZE) are 
meaningless for floating point types, access types, and task 
types. The user can assign the predefined sizes of these 
t>^es. Other sizes will result in a diagnostic message. 


-51- 

DTV-3000 


MIL-STD-1815A APPENDIX F 






Propri^ary Software Systems. Ifxx 


PSS ADA COMPILER USER’S GUIDE 


15 May 1989 


• Length clauses for size specifications (TSI21E) for discrete 
types can not exceed the largest size of ai^ predefined 
di^ete :ype. 


• Length clauses cannot be used for composite wpes to force 
a smaller size on components than is established by length 
clauses for the componen ^ypes or by the default types of 
the components. 

• Length clauses for the attributes TSTORAGE_SIZE and 
TSMALL are restricted only as specified in the [LRM 132]. 
Note that the PSS Ada Compiler will include a small amount 
of extra storage for administrative purposes in storage sizes 
for tasks and access types. If a length clause results in a 
TSTORAGEJSIZE of 0, the exception STORAGE_ERROR 
will be raised upon allocation of an object of that type T. 
A length clause for TSTORAGE__SIZE is not available for 
access types that designate a taslTtype. 

• The value of TSMALL in a fixed point length clause must 
be a power of 2 and must be available in a predefined type. 

• For enumeration representation clauses, the integer codes 
given in the aggregate must be in the range 
INTEGER’FIRST..INTEGER’LAST. 

• Record representation clauses may be used only on types 
whose components’ sizes are known at compile time. Care 
must be taken to ensure that record representation clauses 
map to predefined type boundaries, otherwise severe run¬ 
time penalties may be observed. 

• If representation clauses are given for some (but not all) 
components of a record, the PSS Ada Compiler will allocate 
the unspecified components as it sees fit. 

• Address clauses are not permitted. 


-52- 

DTV-3000 


MIL-STD-1815A APPENDIX F 




Proprietary Soitware Systems, inc. 


PSS ADA COMPILER USER’S GUIDE 


15 May 1989 


• The PSS Ada Compiler represents integer and fixed point 
types and subtj'pes in VAX native form; that is, as two’s 
complement numbers. As a consequence, it is an error to 
specify a length clause of 1 bit for the integer range 100..101. 
Even though 1 bit is sufficient to represent these two values, 
the PSS Ada Compiler will allocate 7 bits because 2**6 < 
101 < 2**7 and reject a length clause which specifies fewer 
than 7 bits for such a range. 

Names The PSS Ada Compiler generates implementation-dependent 

components for arrays with bounds dependent on record 
discriminants. These components, which are used for book¬ 
keeping by the PSS Ada Compiler cannot be accessed by the 
user. 

Address Clauses The PSS Ada Compiler does not support address clausesAda 

semantics of address clauses allow for the association of 
numbered interrupts with task entries. The PSS Ada Compiler 
implements this association by interpreting the simple^expression 
in the clause as the veaor number of a VAX ejcception or 
interrupt. Tl.ese exceptions and interrupts are described in the 
VAX Programmer’s Reference Manual. 

Unchecked Conversions The generic function UNCHECKED_CONVERSION can be 

instantiated to effect an unchecked type conversion. The only 
restriction imposed by. the PSS Ada Compiler is that the sizes 
of the source and target types mast be known at compile time. 
Unchecked conversions between types of unequal sizes will 
result in truncation or zero-padding, as appropriate. 
Unconstrained arrays and unconstrained record types without 
defaulted discriminants are not allowed as target types of 
unchecked conversions. 

Input/Output Packages Predefined packages for input and output are provided with the 

PSS Ada Compiler. These packages include SEQUENTIAL 10, 
DIRECTIO, TEXTJO, IO_EXCEPTIONS, and 
LOW LEVEL_IO, as described in Chapter 14 of the Ada 
Language Reference Manual. All input and output operations 
are supported except for SEQUENTIAL_IO and DIRECT_IO 
operations on unconstrained array types. 


-53- 

DTV-3000 


MIL-STD-1815A APPENDIX F 


Proprietary Software Systems, Inc. 


PSS ADA COMPILER USER’S GUIDE 

15 May 1989 


Additional information 


Generics 


Main Programs 


Predefined Types 


Fixed Point Types 


The PSS Ada Compiler allows a generic declaration to be 
compiled separately from its corresponding proper body. It also 
permits separate compilation of subunits of a generic unit [LRM 
103]. The PSS Ada Compiler enforces the requirement that a 
generic body must be compiled prior to an instantiation of the 
generic unit When recompiling the body of a generic unit, the 
PSS Ada Librarian will mark as obsolete all units that 
instantiated the generic. 

Every instantiation of a user-defined generic will result in the 
generation of in-line code for the generic unit Thus, multiple 
instantiations of a given generic will produce duplications of 
code. Instantiations of the predefined generics 
U N C H E C K E D _ C O N V E R S I O N and 
UNCHECKED_DEALLOCATION are implemented as calls 
to runtime support routines. 

When linking an Ada program, one of the library units must be 
designated as the main program . The main program must be 
a subprogram library unit with no parameters [LRM 10.1]. 

The PSS Ada Compiler has the predefined numeric types of 
INTEGER, FLOAT, and LONG FLOAT. The predefined 
types for COUNT, POSmVE_COUNT and HELD are found 
in the input/output packages TEXT_IO and DIRECT_IO. 
The predefined type DURATION is found in the package 
CALENDAR. The attributes for each of these types are listed 
in the following table. 

The maximum fixed point accuracy on the VAX is 2* *-31. 


-54- 

DTV-3000 


MIL-STD-1815A APPENDIX F 



Proprietary Software Systems, Inc. 


PSS ADA COMPILER USER’S GUIDE 


15 May 1989 


Attributes of Predefined Types 


TYPE 

ATTRIBUTE 

VALUE 

INTEGER 

FIRST 

-2**31 

INTEGER 

LAST 

2**31 - 1 

FLOAT 

DIGITS 

6 

FLOAT 

MANTISSA 

21 

FLOAT 

EMAX 

84 

FLOAT 

EPSILON 

16#0.1000 00#E-4 


approximately 

9.53674E-07 

FLOAT 

SMALL 

16#0.8000 000#E-21 


approximately 

2.54894E-2*6 

FLOAT 

LARGE 

16#0.FFFF F80#E+21 


approximately 

1.93428E+25 

FLOAT 

FIRST 

-16#0.7FFF FF8#E+32 


approximately 

-1.70141E+38 

FLOAT 

LAST 

16#0.7FFF FF8#E+32 


approximately 

L70141E+38 

FLOAT 

SAFE EMAX 

127 

FLOAT 

SAFEjMALL 

16#0.1000 000#E-31 


approximately 

2.93874E.39 

FLOAT 

SAFE_LARGE 

16#0.7FFF FC0#E+32 


approximately 

1.70141E+38 

FLOAT 

MACHINE RADIX 

2 

FLOAT 

MACHINE MANTISSA 

24 

FLOAT 

MACHINE EMAX 

127 

FLOAT 

MACHINE EMIN 

-127 

FLOAT 

MACHINE'ROUNDS 

TRUE 

FLOAT 

MACHINE"OVERFLOWS 

TRUE 


-55* 

DTV-3000 


MIL-STD-1815A APPENDIX F 



Proprietary Software Systems, Inc. 


PSS ADA COMPILER USER’S GUIDE 

15 May 1989 


Attributes of Predefined Types 


TYPE 

ATTRIBUTE 

VALUE 

LONG FLOAT 

DIGITS 

9 

LONG"FLOAT 

MANTISSA 

31 

LONG FLOAT 

EMAX 

124 

LONG'FLOAT 

EPSILON 

16#0.4000 0000 0000 000#E-7 


approximately 

9.3132257461548-E-31- 

LONG^FLOAT 

SMALL 

16#0.8000 0000 0000 000#E-31 


approximately 

2.3509887416446-E-38- 

LONG_FLOAT 

LARGE 

16#0.FFFF FFFF 0000 000#E+31 


approximately 

2.126764792-2655E+37 “ 

LONG_FLOAT 

FIRST 

•16#0.7FFF FFFF FFFF FF8#E+32 


approximately 

-1.7014118346047E+38 

LONG_FLOAT 

LAST 

16#0.7FFF FF8#E+32 


approximately 

1.7014118346047E+38 

LONG FLOAT 

SAFE EMAX 

127 

LONG^FLOAT 

SAFE^^SMALL 

16#0.1000 0000 0000 000#E-31 


approximately 

2.9387358770557E-39- 

LONG_FLOAT 

SAFE_LARGE 

16#0.7FFF FFFF 0000 000#E+32 


approximately 

1.7014118338124E+38 " 

LONG FLOAT 

MACHINE RADIX 

2 

LONG"FLOAT 

MACHINE-MANTISSA 

56 

LONG"FLOAT 

MACHINE-EMAX 

127 

LONG"FLOAT 

MACHINE EMIN 

-127 

LONG-FLOAT 

MACHINE ROUNDS 

TRUE 

LONG'FLOAT 

MACHINE_OVERFLOWS 

TRUE 

DURATION 

DELTA 

0.0001 

DURATION 

SMALL 

2#1.0#E-14 

0.6103515625E-4 

DURATION 

FIRST 

-86400.0 

DURATION 

LAST 

86400.0 


-56* 

DTV-3000 


MIL-STD-1815A APPENDIX F 





APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. The use of the operator signifies a multiplication of the 
following character, and the use of the character signifies 
concatenation of the preceeding and following strings. The values within 
single or double quotation marks are to highlight character or string 
values: 


Name and Meaning Value 

$.ACC_SI2E 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 


$BIG_ID1 239 * 'A' & '1' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 


SBIG_ID2 239 * 'A' & '2' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 120 * 'A' & ’3’ & 119 ^ 'A' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 






Nane and Meaning 


Value 


?“?A'IETZ?.S 


$BIG_ID4 120 * W 4 '4' .i 119 * 'A' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 237 * 'O' & "293" 

.An integer literal of value 293 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 235 * 'O' Si "690.0" 

A universal real literal of 

value 690.0 with enough leading 
zeroes to be the size of the 
maxi.mum line length. 

$BIG_STRING1 & 120 * 'A' & 

A string literal which when 

catenated with BIG_STRIIfG2 
yields the image of BIG_ID1. 

$BIG_STRING2 "" oi 119 * 'A' & '1' & 

A string literal which when 
catenated to the end of 
BIG_STRING1 yields the image of 

bigIidi. 

$BLAIIKS 220 * ' ’ 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

$COUNT_LAST 2_147_483_646 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 1_000_000 

An integer literal whose value 

is SYSTEM.MEMORy_SIZE. 

$DEFhULT_STOR_UNIT 8 

An integer literal whose value 

is SYSTEM.STORAGE UNIT. 



Hase and Meaning 


Vai>:e 


$DEFAULT_SYSJIAMS 

The value of the 
SYSTEM. S YSTEKJIAMS. 

$DSLTA_DOC 

A real literal -'hcse 
SYSTEM.FINE_DELTA. 

SFIELD_LAST 20 

A universal integer 

literal whose value is 
TEXT_IO.FIELD'LAST. 

$FIXED_H.A.MS 

The nase of a 
fixed-point type 
DURATION. 

SFLOATJIAME .NO_SUCH_FICAT_TYP 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0.AT, or 

L0NG_FL0AT. 

$GREATER_THAN_DURATION 90_000.0 

A universal real literal that 
lies between DUR.ATION’BASS’LAST 
and DUR.ATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASS_LAST 33_554_433.0 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRI0RITY 200 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_E.XTERNAL_FILEJIAME1 BAD. BAD. BAD 

An external file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_N.A:!E2 ANOTHER, bad. BAD 

An external file name which 
is too long. 


NO SUCH FIXED TY? 

predefined 
other than 





3 a 32 aad Haiaisg 


▼aloe 


SI!??EGER_FI?.ST 

A iini?ersal integer literal 

whose value is I3TEGE»*FI5ST- 

SUrrSGERJLAST 

A universal integer literal 

whose value is I3!TSGtR*LAST. 

SIlt7EGSR_LAST_?L0S_l 

A universal integer literal 

whose value is ISTSGZa’LAST + 1. 

SLESS_?H?JI_PU!HTIO!l 

A universal real literal that 
lies between DORATIOJt’BASE'FISS? 
and DORATIO!f'FI?.ST or any value 
in the range of DURATIO!!. 

SLESS_THAH_DORATIOn_3ASE_FI?.ST 

A universal real literal that is 
less than 2URATI0H’BASE'FIRST. 

$LOW_PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTSH.PRIORITY. 

SHAMTISSA.DOC 

An integer literal whose value 
is SYSTE!!.MAX_I!A!mSSA. 

SJ?AX_DIGITS 

Maximum digits supported for 
floating-point types. 

SHA.X_IN_LEN 

Maximum input line length 
permitted by the implementation. 

$MAX_IHT 

A universal integer literal 
whose value is SYSTEM.MAX_IilT. 

$MAX_INT_PLUS_1 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


-2147481S48 

2I4'’4S3647 

2147432648 

-?9J)00.0 

-33_554_45>.0 

10 

31 

9 

240 

2147483647 

2 147 483 648 










9ase acd Heasis; 

SiaxjLDt^DrT.saso.LrrzPAi -2:" s 235 • -o* t - 

I oaiversal iatefsr based 
literal whose 7ai*ie is 2111 * 
with eaocgh leadiag zeroes ia 
the aaatissa to be 3AI_I3I_L£5 
long. 

SmjLEajSJL_31SED_LITE!LiL -2«:" « 233 • 'O' i 

£ universal real based literal 
whose value is 1S:F.E: with 
enough leading zeroes in the 
aantissa to be SAX_I3I_L£!I long. 

S3!aX_STlI!IC_LITEm — ( 23S • ‘A* i *" 

k string literal of size 
J!iX_I!IJLKII, including the quote 
characters. 

SJffil.IlIT -214748264S 

1 universal integer literal 
whose value is SYSTEM.irni_I!rr. 

Sl!Ill_TASf_SIZE 32 

An integer literal whose value 
is the nunber of bits required 
to hold a task object which has 
no entries, no declarations, and 
"HOLL;" as the only statesent in 
its body. 

SHAM H0_S0CH_II-rrEGER_7YPE 

A naae of a predefined nuneric 
type other than FLOAT, IHTEGER, 

SHORT_FLOAT, SHORT_IHTEGER, 

LOHG_FLOAT, or LOHG_IHTEGER. 

SNAME_LIST VAX 

A list of enuaeraticn literals 
in the type SYSTEM. NAIiE, 
separated by cosnas. 

SHEG_BASED_INT 16fFFFFF?FEI 

A based integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of the representation 
for SYSTEM.MAX INT. 









Vaae zad Heasing 


Value 


SllEyj!S_SI2S 

in integer literal whose value 
is a perxitted argument for 
pragaa 3!EHO»T_SI2E, other than 
SDmCLTjaa.SIZE. if there is 
no other value, then cse 
SDEFiOLT.JEX.SIZE. 

S3fES_ST0RjmiT 

in integer literal whose value 
is a perxitted argonent for 
pragxa STORAGEJDSfIT. other than 
SDEF10LT_ST?»JDiHT. If there is 
no other perxitted value, then 
use value of SYSTEH. STORAGE OJflT. 


SIlER.SYSJfAXE 

A value of the type SYSTE.T.HAJfE. 
other than SDErAULT_SYSJIA!»E. If 
there is only one value of that 
type, then use that value. 

STASK_SI2E 

An integer literal whose value 
is the nuaber of bits required 
to hold a task object which has 
a single entry with one 'IN OUT* 
paraxeter. 

STICK 

A real literal whose value is 
SYSTEM.TICK. 


1 000 000 


8 


VAX 


32 


0.01667 



APPEHDIX D 


aiTHDRAWW TESTS 


So»e tests are withdrawn frcs the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at the tise of 
validation testing for the reasons indicated. A reference of the fora 
Al-ddddd is to an .Ada Coeasentary. 


a. E28005C This test expects that the string "— TOP OF PAGE. 

63" of line 204 will appear at the top cf the listing page due 
to a pragaa P.AGE in line 203; but line 203 contains text that 
follows the pragna, and it is this that aust appear at the top 
of the page. 

b. .A39005G This test unreasonably expects a coaponent clause to 

pack an array coaponent into a ainiaua size (line 30). 

c. B97102E This test contains an unitended illegality: a select 

stateaant contains a null statenent at the place of a selective 
wait alternative (line 31). 

d. C97116A This test contains race conditions, and it assuaes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleavei^ execution in such a way that the evaluation 
of the guards at lines 50 & 54 and the execution of task CHAHGIHG- 
_OF_THE_GUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even though none of 
the units is illegal with respect to the units it depends on; by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95). 

f. CD2A62D This test wrongly requires that an array object's size 
be no greater than 10 although its subtype's size was specified 
to be 40 (line 137). 





■'ITHrp-.V*!! TESTS 


g. CD2A63A..D, CD2a66A..D, CD2A73A..D, CD2A76A..D [16 tests] These 
tests vrongiy atteapt to check the site of objects of a derived 
type (for which a 'SIZE length clause is given) by passing then 
to a derived snbprograe (which iaplicitly converts then to the 
parent t 3 ^e (Ada standard 3.4:14}). Additionally, they use the 
'SIZE length clause and attribute, whose interpretation is 
considered problesatic by the vg9 ARG. 

h. CD2A81G, CD2A83G, CD2A84JI & H, fc CDSOilO [5 tests] These tests 

assuse that dependent tasks will terainate while the sain pro- 
gran executes a loop that sir.ply tests for task teraination; this 
is not the case, and the aain prcgras aay loop indefinitely 
(lines 74, 85, 86 S 96, 86 i 96, and 58, resp.). 

i. CD2B15C & CD7205C These tests expect that a 'ST0RAGE_SI2E 
length clause provides precise control ever the nunber of 
designated objects in a collection; the Ada standard 13.2:15 
allows that such control =ust not be expected. 

j. CD2D11B This test gives a SHALL representation clause for a 

derived fixed-point type (at line 30) that defines a set of 
aodel nuabers that are not necessarily represented in the 
parent type; by Coasentary AI-00099, all aodel nuabers of a 
derived fixed-point type aust be representable values of the 
parent type. 

k. CD5007B This test wrongly expects an inplicitly declared sub- 

progran to be at the the address that is specified for an un¬ 
related subprograa (line 303). 

l. ED7004B, ED7005C & D, ED7006C & D [5 tests] These tests check 

various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

a. CD"105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEM.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEM.TICK—particular instances of change may be 
less (line 29). 

n. CD7203B, & CD7204B These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by 
the WG9 ARG. 

0 . CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task's 
activation as though it were like the specification of storage 
for a collection. 






VITH??.-.-*!? TESTS 


p. CE2107I This test requires that objects of two similar scalar 
types be distinguished when read frot: a file—DA?A_SRROR is 
expected to be raised by an attempt to read one object as of 
the other type. However, it is not clear exactly how the Ada 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
IS not considered valid, (line 90) 

q. CE3111C This test requires certain behavior, when two files are 

associated with the sane external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_0F_LI!IE & 
EHD_OF_PAGE that have no paraseter: these calls were intended 
to specify a file, not to refer to STANDARD INPUT (lines 103, 
107. 118, 132. & 136). 

s. CE3411B This test requires that a text file's colusn nursber be 
sat to COUNT'LAST in order to check that LAY0UT_ERR0R is raised 
by a subsequent PUT operation. But the forsser operation will 
generally raise an exception due to a lack of available disk 
space, and the test would thus encussber validation testing. 







CC!^?ILE?. AND LINKER C?TIC::S 


APPENDIX S 

COMPILER AND LINKER OPTIONS 


This appendix contains information of the compiler and linker 
options used in this validation. 




Propri^aiy Software Systems, Inc 


PSS AOA COMPILER USER'S GUIDE 


15 May 1989 


Ada Compiler Files 


The PSS Ada Compiler 

The PSS Ada Compiler translates a single source file and places 
the compila:ion results (object modules, date and time stamps, 
symbol information) in the Ada program library. Invocation of 
the PSS Ada Compiler must be fi’om the directory where the 
PSS Ada library resides. However, the source file that is used 
as input to the PSS Ada Compiler may reside in a different 
directory. 

The PSS Ada Compiler creates and uses several files during 
the course of developing and maintaining Ada programs. Each 
of these files has the name of the compilation unit with an 
extension indicating the purpose of the file. The PSS Ada 
Compiler generates files with the following extensions: 

.BOD Contains the representation of the body of a generic 
and the visibiliQr information available to subunits. The 
PSS Ada Compiler reads this file when compiling a unit 
that instantiates a generic or is a subunit of another unit 

.DI Contains the representation of a unit specification. The 
PSS Ada Compiler reads this file when compiling a unit 
that includes a "with" clause. 

.LIS Contains the listing of the source interspersed with any 
error and warning messages produced by the PSS Ada 
Compiler. 

.MLS Contains, the machine language listing of the generated 
code. 

.OBJ Contains the object code for an Ada unit body. 

.SOBJ Contains object code for an Ada unit specification. 

The PSS Ada Librarian controls ail of these files except the 
XIS and .MLS files. The user should not use these extensions 
for any other purpose, nor should any of these files be deleted 
by the user while the corresponding unit is still active in the 
Program Library. To avoid unpredictable and erroneous results, 


-40- 

DTV-3000 


The PSS Ada Compiler 



Proprietary Software Systems, Ina 


PSS AOA COMPILER USER'S GUIDE 

15 May 1989 


do not delete, edit, rename or otherwise modify these files via 
VMS commands. Instead use the PSS Ada Librarian commands 
as described in the PSS Ada Library section to perform 
operations on library files. 

Several temporary files are created during compilatioru Some 
of these files have unique names composed of hexadecimal 
numbers concateimted with the extensions listed above. Other 
temporary files have extensions .TER, .TEB, .TSB, and .TSE. 
Any of these temporary files that appear in the use^s directory 
as a result of an abnorc^y terminated compilation (or a system 
failure) should be deleted by the user. 

invoking the Compiier The PSS Ada Compiler is an executable program under VMS. 

To use ±e PSS Ada Compiler you give an invocation command 
that specifies the name of an Ada source code file. Normally 
the PSS Ada Compiler invocation command is available system- 
wide. This is done at installation time by the System Manager, 
in the same maimer that commonly used commands are usually 
defined in a VAX development environment. The syntax of the 
PSS Ada Compiler invocation command is: 

$ ADA/qualiner(s) file_specincation/qualifier(s) 

where 

/qualifier(s) specifies the compilation options to be used 

file_specification specifies the name of the file containing the 
Ada source code to be compiled. This may be 
any legal VMS file specification, including a 
logical name. 

The Ada command is not order or coluirm dependent. You 
may use spaces between any of the parts of the command and 
you may place the qualifiers after the Ada command or after 
the file name. 

Following are examples of equivalent invocation commands to 
compile a module named "source^file" with options to suppress 
constraint checks and to produce”a machine code listing: 


-41- 

DTV-3000 


The PSS Ada Compiler 





Proprietary Software Systems, Inc. 


PSS ADA COMPILER USER’S GUIDE 

15 May 1989 


$ ADA/SUPPRESS=CONSTRAINT^CHECKS/LIST=MACHINE source file 

$ ADA source_file/SUPPRESS=CONSTRAINT_CHECKS/LIST=MACHINE 

$ ADA source^file /SUPPRESS=CONSTRAINT CHECKS/LIST=MACHINE 

$ ADA/SUPPRESS=CONSTRAINT_CHECKS source_file/LIST=MACHINE 

$ADA /SUPPRESS=CONSTRAINT_CHECKS sourcejile /LIST=MACHINE 

You may also omit much of the text in commands. As long 
as a command option is unique it can be truncated. For 
example, the above commands could be simplified to: 

$ ADA /SUP=C/LIS=M source_file 

Also, if you use the qualifier j\DA for our Ada source file 
name, this qualifier may be omitted when entering the source 
file name. For example 

$ ADA/SUP=C/LIS=M HELLO 

will compile the source file HELLOADA. 

The PSS Ada Compiler accepts a maximum command string 
length of 240 characters. Command strings may continue on 
multiple lines by using the continuation character, a hyphen 
as the last element on each line that is to be continued. 
Command line continuation can be useful when entering a very 
long command line, or when placing an Ada compilation 
command in a command procedure file. 

Compilation Options The PSS Ada Compiler has a variety of options that may be 

chosen by using qudifiers in the compiler command line. The 
text that follows describes each qualifier in detail. All qualifiers 
but the /LINES qualifier make use of the prefix "NO" to effect 
the negative form of the optioiL For example, 
/NOCONSTRAINT^CHECKS suppresses the generation of 
constraint checks. 


^ 2 - 

DTV-3000 


The PSS Ada Compiler 






Proprietary Software Systems, Inc. 


PSS ADA COMPILER USER’S GUIDE 

15 May 1989 


Some qualifiers are incompatible with certain other qualifiers. 
For example, /LINES=20 is incompatible with /NOLIST. The 
PSS Ada Compiler will handle incompatible qualifiers by 
accepting the first valid qualifier and ignoring later, inconsistent 
qualifiers. 

Since the compilation command line is limited to 240 characters, 
abbreviation of qualifiers can help fit a compilation command 
onto one line. When command length is not a factor, it is better 
to spell out the qualifier names in full to yield more readable 
commands, particularly in command procedures. 

The following table summarizes the PSS Ada Compiler 
command qualifiers, including applicable qualifier values, 
defaults, and incompatible qualifiers. 


Ada Command Line Qualifiers 


Qualifer <qualifer values> 

Default 

Qualifiers 

Incompatible 

Qualifiers 

/<NO>LIST»(SOURCE|ERRORS|MACHINE}ALL) 

/LIST-ERRORS/NOLIST when 
/LIST 

/<NO>OPTIMIZATION 

/OPTIMIZATION 

/<NO>SUPPRESS=(CONSTRAINT CHECKSj 

STACK CHECl^l 

ELABORATION CHECKS|ALL) 

/NOSUPPRESS 



The following paragraphs show the positive and negative forms 
of each qualifier for the PSS Ada Compiler command. The 
default forms are indicated by "(D)". 


-43- 

DTV-3000 


The PSS Ada Compiler 




Proprietaiy Software Systems. Inc. 


PSS ADA COMPILER USER’S GUIDE 

15 May 1989 


/UST=SOURCE 
/UST=ERRORS (D) 
/UST=MACHINE 
/UST=ALL 


/LIST= SOURCE produces a listing of the source text with line 
numbers prefixed to each source line. The list file produced has 
the same name as the source file but with a file type of .LIS. 

/LIST=ERRORS produces a listing of the source text as 
described for /LIST=SOURCE but only in the event that some 
error is detected by the PSS Ada Compiler. Since 
/LIST=ERRORS is the default condition, a compilation that 
has errors will generate a listing, but an error-free compilation 
will not generate a listing unless a listing has been specifically 
requested. 

/LIST=MACHINE produces a source file of the machine code 
generated by the PSS Ada Compiler in a format similar to the 
listing output of the VAX VMS Macro Assembler including both 
the generated assembly code and the hexadecimal 
representation. The listing file that is produced has the same 
name as the source file but with a file type .MLS. 

/LIST=ALL is the same as /LIST=(SOURCE,MACHINE). 

Listing options may be combined. Examples of some listing 
options are: 

/LIST 

/LIST=SOURCE 
/LIST=ERRORS 
/LIST= MACHINE 
/LIST= (SOURCE^IACHINE) 

/LIST= (ERRORS,MACHINE) 

/NOLIST 


-44- 

DTV-3000 


The PSS Ada Compiler 




Proprietary Software Systems, Inc. 


PSS ADA COMPILER USER'S GUIDE 

15 May 1989 


/OPTIMIZE (D) 

/NOOPTIMIZE 

/OPTIMIZE causes the PSS Ada Compiler to produce 
optimized code. This takes the place of the pragma for 
optimization. The PSS Ada Compiler produces code that has 
been optimized for both time and space. 


/SUPPRESS=CONSTRAINTCHECKS 
/SUPPRESS=ELABORATION CHECKS 
/SUPPRESS=STACK CHECKS 
/SUPPRESS=ALL 
/NOSUPPRESS (D) 

/SUPPRESS=CONSTRAINT_CHECKS causes the PSS Ada 
Compiler to eliminate all checlcs performed to test for constraint 
errors. This compiler option is used where higher execution 
performance is necessary. 

/SUPPRESS=ELABORATION_CHECKS causes the PSS Ada 
Compiler to eliminate all checks'performed during elaboration. 
This compiler option is used where elaboration order is 
specified by the user. 

/SUPPRESS=STACK_CHECKS causes the PSS Ada Compiler 
to eliminate all checks’ on the run-time stack. This compiler 
option is used where higher exection performance is necessary. 

/SUPPRESS=ALL has the same effect as combining every 
suppress option. It has the same effect as the expression: 

/SUPPRESS=(CONSTRAINT CHECKS, ELABORATION CHECKS, 
STACKCHECKS) 


-45- 

DTV-3000 


The PSS Ada Compiler 





