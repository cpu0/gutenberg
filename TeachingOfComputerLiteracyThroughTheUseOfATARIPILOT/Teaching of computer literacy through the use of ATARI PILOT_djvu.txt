CALIFORNIA STATE UNIVERSITY NORTHRIDGE 


A TEACHERS’ ACTIVITY GUIDE FOR' THE TEACHING OF 
COMPUTER LITERACY THROUGH THE USE OF ATARI PILOT 


A graduate project submitted in partial satisfaction of 
the requirements for the degree of Master of Arts in 


Secondary Education 
by 

Janice B. Lauritzen 


May, 1985 






The Graduate Project of Janice B. Lauritzen is approved 


Barnabas B. Hughes, Ph. DT 


Christine C. Smith, Ed. D. 


Charles H. Heimler, Ed. D., Chair 


California State University, Northridge 


ii 







TABLE OF CONTENTS 


Page 

LIST OF FIGURES.iv 

ABSTRACT.v 

CHAPTER 

I. DESCRIPTION OF THE PROBLEM.1 

The Problem 

Computer Expertise Requires Time 
Teachers Lack Time to Become Computer 
Experts 

Purposes of the Project. 

Definitions of Terms 

II. RELATED LITERATURE . 10 

Definition of Computer Literacy 
The K-12 Computer Education Plan 
The Concentrated Computer Laboratory Plan 
Using PILOT to Introduce Progamming to 
Beginners 
Summary 

III. DESIGN OF THE PROJECT.19 

Computer Literacy Should be Exciting 
PILOT for Computer Literacy 
ATARI PILOT 

Why the Project Was Begun 

IV. DESCRIPTION OF THE TEACHERS’ ACTIVITY GUIDE. . 29 
Introduction 

Teachers’ Activity Guide - Ten Week Course 
Use of Concept Sheets 
A Sample Daily Lesson Plan 
Classroom Management of the Computer 


Literacy Course 
Summary 

V. USE OF THE TEACHERS' ACTIVITY GUIDE.40 

REFERENCES.45 

APPENDIX A.46 

APPENDIX B.181 


ili 













LIST OF FIGURES 


Figure Page 

1. Graphics Design Project.101 


iv 






ABSTRACT 


A TEACHERS' ACTIVITY GUIDE FOR THE TEACHING OF 
COMPUTER LITERACY THROUGH THE USE OF ATARI PILOT 

by 

Janice B. Lauritzen 
Master of Arts in Secondary Education 

A Teachers' Activity Guide for the Teaching of 
Computer Literacy Through the Use of ATARI PILOT was 
prepared for use in junior high. This course was designed 
to teach computer literacy and an understanding of the 
concepts of programming. PILOT was selected as the best 
computer language to assure a positive attitude toward 
programming. It it utilizes normal English words, has 
simplified procedures, and students are able to grasp the 
necessary concepts to achieve a successful experience. 

Computer Literacy, as referred to in this course, 
includes: how the computer works; computer history; 
computer terms; computer usage; what the computer cannot 
do; and an introduction to programming. 

In teaching any computer skill, a computer lab with 
one computer per student provides the ideal ratio. 

Teaching introductory programming with two beginning 
students per computer, however, proved very successful at 

V 






the junior high school where this material was tested. 

One object in preparing the curriculum was to design a 
program which could be used by a teacher with fairly 
limited computer expertise. It provides overall weekly 
plans, specific daily summaries, lecture/discussion notes, 
concept sheets, worksheets, laboratory sheets, tests, and 
projects for a ten-week Computer Literacy class. It is 
ready to guide the inexperienced teacher almost every step 
of the way. The teacher must spend time with computer 
manuals to learn the computer operation, but this guide 
will provide the course organization. 

PILOT, learned quite quickly and easily, can be used 
to present quite complex programming concepts when the 
teacher and the pupils are ready for them. A teacher with 
no knowledge of computer languages can master the 
principles of PILOT with a few days at the computer. 



CHAPTER I 


DESCRIPTION OF THE PROBLEM 

The Teachers' Activity Guide developed in this project 
was designed to provide specific information, instructions, 
and activities to be utilized in junior high or middle 
school classrooms by teachers who do not have an extensive 
computer background and who do not have the extra hours 
available to study and plan a course in computer literacy 
and introductory computer programming. 


The Problem 

As computers forge their way into the curriculum, many 
teachers with little or no computer experience are being 
asked to teach computer literacy. This situation has 
become so prevalent that Norman T. Bell of Michigan State 
University stated the problem in the following manner: 
"Perhaps never before has there been a subject matter area 
in which teachers, having received little or no 
preparation, are being asked to instruct students, many of 
whom already seem to have received graduate-level training 
in the subject" (Bell, 1983, p. 138). 

The curriculum guides, documentation, and available 


1 




textbooks do not provide the inexperienced computer teacher 
with the assistance needed to teach this subject. These 
materials leave out the ’'small" details because experienced 
computer users perform them automatically. These details 
include such things as checking to be sure the disk drive 
is set to Drive #1 when it does not respond, turning the 
drive on before turning on the computer, noting the 
specific keystroke patterns necessary for entering 
information, communicating with the disk drive or the 
printer, and screen editing. These details are probably 
overlooked because the majority of the materials are 
written by people who have been using computers long enough 
to forget some of the problems they experienced when first 
learning to use a computer. 

The experience of new computer users trying to 
understand computer documentation and materials is also 
commented upon by Norman T. Bell. In relation to 
implementing an instructional program in which teachers new 
to the computer present computer concepts to students, he 
writes: "this approach is difficult if the materials 
available to those teachers with little or no computer 
experience were only those provided with the systems and 
written by the engineers who were in on the original design 
of the system. For teachers without much experience, such 
materials often tend to impede rather than support 
progress, and the consequent effect on students is at best 
minimal" (p. 139). 



Computer Expertise Requires Time 


Most new computer users spend many hours experimenting, 
using trial and error techniques, in an attempt to unravel 
the computer secrets which are not adequately explained in 
the documentation which arrives with the computer. These 
users are lucky in that this experimenting normally occurs 
in the privacy of their own homes. Unfortunately, the 
inexperienced computer teacher is most likely to discover 
these omissions while in the process of developing a lesson 
in front of a classroom of students. 

Before beginning to instruct students in the use of 
the computer, the teacher needs to spend personal time 
learning the basic operating procedures. This requires 
hours of experimentation and practice. Only continued work 
with the computer will familiarize the teacher to the point 
at which he or she feels comfortable with it. Attending 
in-service computer education workshops provides only part 
of this usage experience. Teachers need to take the 
computer home on weekends and vacations, take college 
classes, and, as soon as possible, purchase their own 
computer. The ideal situation occurs when the teacher is 
allowed to prepare over the summer for a computer literacy 
program beginning in the fall. This allows for compiling 
the necessary usage time to become familiar with the 






operation of the computer 


Teachers Lack Time to Become Computer Experts 

Unfortunately, many teachers are not allowed the 
luxury of spending the time needed to ease into the world 
of computing. Teachers may be informed that they will be 
teaching computer literacy only a few weeks prior to the 
assignment. This event may occur at the time of the year 
when teachers are involved in the daily planning of classes 
already under progress and when they have little time to 
spare for the study of something new. A teacher may be 
told to take a 10 or 15 hour workshop about computers and 
start teaching. This approach may work in some subjects 
because the necessary knowledge is a part of the standard 
background for any teacher. For instance, social studies 
teachers may be given a one week workshop and be considered 
ready to teach basic math. This does not mean that they 
are as prepared as a teacher who majored or minored in 
math, but all social studies teachers did take a required 
number of mathematics classes before they entered college. 
This is not true in the case of computer literacy and 
programming. It is an entirely new area for teachers and 
it is quite a complicated one. 

These workshops and classes usually do not prepare the 
teacher to teach computer classes. Roy Agee of Computer 




Education Consultants of Orange, California has written the 
following: ’’teachers learn how to load and run a program, 
play some computer games under the guise of computer-aided 
instruction and maybe even a little programming. At the 
conclusion of the class, they often will buy themselves a 
computer and some software...but are they trained to teach 
computing to their students? The answer, in far too many 
cases is ’No’!’’ (Agee, 1985, p. 96) 


Purposes of the Project 

What is needed is a teachers’ guide which is designed 
to walk the teacher though the step-by-step details 
necessary for teaching a class of students. It needs to be 
written by someone teaching the subject daily, not by a 
computer expert who has never taught. The need is for a 
manual to help avoid the pitfalls. 

A teacher who is trying to stay a few days ahead of 
the class does not have the time to test out all of the 
aspects of the computer and other equipment involved. In 
many cases the teacher does not have access to the computer 
in the evenings and on weekends. This severely shortens 
the time available for practice. Nothing can eliminate the 
need for this practice, but hopefully this activity guide 
can make it easier to use the computer and therefore make 
the practice time more cost effective. 



Another problem for the inexperienced computer teacher 
is the development of lesson plans which cover the subject 
in a logical manner. The teacher who is trying to stay a 
few days ahead of the students does not have the time to 
design all of the activities that are necessary to 
accomplish a well-rounded introduction to computer 
literacy. The need is for specific, day-by-day lessons 
which will provide a detailed and ready-made structure for 
the class. 

It is very rare, although the frequency is increasing, 
that a classroom is provided with a computer for every 
student, or even for every two students. However, most 
curriculum materials are directed only at the students 
while they are actually using the computer. The time off 
the computer is ignored by most workbooks, activity guides, 
and texts. These "seat" activities are supposed to be 
developed by the teacher who is already struggling to keep 
up with the students at the computer. 

This project addressed the problem of providing 
learning activities for students in a computer class who 
are not at the computer. Activities are provided in the 
guide for these students as well as those at the computer. 
The activity guide can be used by a class visiting a lab on 
alternate days, by students alternating days within the 
lab, or even by students alternating halves of a period 
every day. Students can work at the computer alone or can 
be paired for computer usage, depending upon the number of 





computers available. A large variety of patterns are 
possible, but the activity guide provides for both the 
students at the computers and for those at their seats. 

The Teachers’ Activity Guide is designed to aid the 
inexperienced teacher in teaching computer literacy and 
introducing programming with the user-friendly language of 
PILOT. It provides step-by-step plans, lessons, computer 
activities and seat activities for a structured program. 

It includes reproducable masters for information sheets, 
tests, test answer sheets, and even class objective sheets 
to be sent home to the parents. With this guide and time 
for personal computer usage, most teachers using the ATARI 
computer will be able to teach computer literacy with a 
minimum amount of preparation. In this technological age 
teachers must get involved with the computer; but the 
Teachers’ Activity Guide will make this involvement less 
stressful and, perhaps, more rewarding. 


Definitions of Terms 


Computer Literacy 

Computer literacy has two parts: computer awareness 
and computer programming skills. Computer awareness is an 
understanding of how and why the computer works, what 
computers are for, and how they affect our lives. Computer 
programming skills enable the user to understand computer 







logic and are usually the result of hands-on experience. 


Pi LPT 

PILOT is an acronym for Programmed Inquiry Learning Or 
Teaching. It is a computer language which was designed 
specifically as an authoring language for teachers. It was 
soon expanded to include turtle graphics. This made it an 
ideal language for introducing children to programming. 

Authoring Language 

An authoring language is a computer language which 
helps a user to write a computer program. PILOT is an 
authoring language which was written to enable interactive 
programs to be written by teachers with a minimum of 
programming skill. 


Outline of the Project 

Chapter II reviews related literature concerning the 
controversy over the subject matter to be covered in 
computer literacy courses and the approach to teaching it 
in such a manner as to reach all students. It also reviews 
related literature concerning the use of the computer 
language PILOT to introduce programming to students. 

Chapter III discusses the potential of PILOT as a 
programming language which is simple to learn and use but 



with potential for elaborate results. Two sample programs 
illustrate the simplicity and clarity of programming with 
PILOT. The selection of ATARI PILOT is discussed and 
several of the special ATARI features are described. The 
following material presents a log of the mechanics involved 
in the preparation and use of the activity guide designed 
in this project. 

Chapter IV provides a description of the Teachers' 
Activity Guide including a Table of Contents for the entire 
guide. A description of one day from the Guide is provided 
to illustrate the type of material included. The mechanics 
of some types of activities, such as Concept Sheets, are 
explained and instructions are given for their use. 

Chapter V gives a summary of the use of the Teachers' 
Activity Guide at John A. Sutter Junior High School in 
Canoga Park and describes the planned use of the Guide at 
Grover Cleveland High School in Reseda. 

Appendix A is the actual Teachers' Activity Guide. 

Appendix B provides a suggested reading list for 
teachers interested in teaching computer literacy and PILOT. 



CHAPTER II 


RELATED LITERATURE 


There has been considerable debate about the 
definition of computer literacy: what to teach and when to 
teach it. Many experts in the computer field have 
different opinions. Most definitions overlap in some areas 
but variations occur mainly in the areas of when topics 
should be taught and how much programming should be 
included. 


Definition of Computer Literacy 

Dr. Gary G. Bitter of Arizona State University has 
divided computer literacy into two broad areas which seem 
to cover the subject. He refers to these as Computer 
Awareness and Computer Programming. Dr. Bitter states that 
"In general. Computer Awareness topics ... require limited 
or no access to computers" (Bitter, 1982, p. 60). He sees 
them as topics for discussion and as themes for classroom 
activities and projects. The Programming topics require 
the use of computers, but they are scattered thinly across 
the kindergarden to twelfth grade curriculum. 

Arthur Luehrmann, the inventor of the term "computer 


10 






literacy", writes in Electronic Learning : "If you can tell 
the computer how to do the things you want it to, you are 
computer literate" (Luehrmann, 1984, p. 41). To 
Luehrmann, being computer literate means you have acquired 
the set of "survival skills" needed to. use computers: 
"turning the computer on, loading a program, running it, 
saving information on a diskette, and the like" (p. 41). 
While he considers programming skills to be part of 
computer literacy, he believes they should be taught in the 
junior and senior high schools, not earlier grades. 

While both of these experts consider computer 
programming to be a part of computer literacy, others do 
not. Rod A. Scher, writing in Electronic Learning , defines 
computer literacy as: 

a familiarity with a device that enhances one's 
ability to live in and cope with the modern 
world....This does not mean, however, that 
students should acquire the ability to program, 
but rather the ability to manipulate computer 
technology. While this skill may imply a minimal 
understanding of the manner in which the 
technology functions, it certainly does not require 
sophisticated programming knowledge (Scher, 

1984, p. 41). 


The K-12 Computer Education Plan 

There is also a debate as to which aspects of computer 
literacy should be introduced into the curriculum at each 
grade level. Bitter (1982) wants a small amount of 



computer awareness and programming introduced at each grade 
level between kindergarden and twelfth grade. He writes 
that the computer awareness aspects do not require actual 
computer usage. His K-12 plan requires every teacher in 
the school system to teach specific aspects, depending upon 
the students grade level, of computer literacy and 
programming in his or her classroom. 

He begins with the use of Big Track or another 
programable toy tank or robot and progresses through the 
study of LOGO to BASIC and finally to Pascal. (It is 
interesting to note that he recommends some PILOT-type 
programming, but not until grades nine through twelve.) He 
believes that "No matter which programming language a 
student is working with, however, writing efficient 
programs as well as understanding the uses and limitations 
of a particular language will be important teaching and 
learning goals" (p.60). 


The Concentrated Computer Laboratory Plan 

Arthur Luehrmann disagrees with this K through 12 
"a-computer-in-every-classroom" approach, and to the idea 
that students can learn computers and computer literacy 
without more extensive hands-on access to computers. While 
Bitter and others believe that students can learn computer 
awareness mainly through discussion and show-and-tell in 




the classroom, Luehrmann (1984) believes that "One cannot 
teach the computer class without computers." Writing in 
Electronic Learning , he states: "Like all other skills 
learned in school, computer literacy comes through practice 
and improvement" (p. 39). 

Luehrmann (1984) does not approve of the K-12 Computer 
Literacy plans being promoted by many educators. He refers 
to this as a "perilous strategy". He states: "Learning 
five new computer concepts and three new BASIC programming 
statements every year is an inefficient, frustrating way to 
learn about computers and programming" (p. 39). He 
believes these small pieces of computer learning will be so 
fragmented as be of almost no value. Bell’s (1982) K-12 
curriculum is an example of this, with students learning 
the BASIC commands for PRINT, REM, LET, INPUT, and GOTO in 
grade four, IF-THEN, ON GOTO, and READ-DATA in fifth, 
FOR-NEXT in sixth, and so on. 

Luehrmann (1984) believes that the computers need to 
be concentrated in one laboratory situation under the 
direction of a teacher specialist, not scattered throughout 
the school, in order to effectively teach computer literacy 
and skills. 

He asks, should we have a "typewriter in every 
classroom as the best way to teach typing to every 
student?" (p. 38) Or, perhaps a bunsen burner, a 
microscope, and wood lathe? No. In order to assure typing 
skills, the best method is "to create a typing class, put 



all the typewriters in one place, hire a competent typing 
teacher, and have all the students take the typing class at 
some time in their school life" (p. 38). The same is true 
of chemistry, biology, and wood shop. In other words, 
these valuable resources are not spread throughout the 
school, virtually assuring that no student will learn to us 
them well. "Focused, concentrated use, on the other hand, 
gets results" (p. 38). 

If computers are already scattered over a whole school 
building, Luerhmann (1984) says enough of them must be 
brought back into one place so that they can be used as an 
effective laboratory for the computer class (and, 
incidently, where they can be supervised and maintained 
more effectively)" (p. 39). 

Luerhmann (1984) also states that developing a "100 
percent computer-literate teaching staff is impractical." 

He believes the students would be given, more or less, the 
same Introduction to Computers" because "most teachers are 
at the same beginning level in their own knowledge of 
computers" (p. 39) In order to prevent this, Luehrmann 
states that the bulk of programming is better postponed 
until the students reach the junior high class taught by 
the specialist, in a laboratory situation, rather than 
spread throughout the twelve grades and taught by 
inexperienced teachers. 

This does not mean every student must have a computer. 
Luehrmann believes beginners work well in pairs. By having 






half the class work on the computers one day and then spend 
the next day in review, discussion, and presentation of new 
concepts, the minimum number of computers required would be 
a ratio of one to every four students. Of course, a one to 
two ratio would double the computer time and would make the 
teacher's job easier as he or she would not be forced to 
split attention between the half of the class using the 
computers and the half performing seat activities. 


Using PILOT to Introduce Programming to Beginners 

This project utilized PILOT rather than BASIC as the 
language to introduce beginning students to programming. 
PILOT is ideal for this purpose as it is easy to learn and 
use. A variety of computer experts have promoted its use 
for the teaching of computer programming. 

PILOT stands for Programmed Inquiry learning Or 
Teaching and is a simple, but powerful, programming 
language. It was developed in the 1960's by Dr. John 
Starkweather who was working at the University of 
California Medical Center in San Francisco. "Designed 
specifically for education, the primary audience was 
teachers who wanted to develop computer-based education 
program" (Kohl, 1983, p. v) for their classes. 

PILOT was an excellent authoring language, but it 
turned out to be much more than that. Because of its 



simplicity, PILOT was found to be an excellent introductory 
language for students as well as adults. Dr. Dean Brown 
was head of the Stanford Research Institute Education 
Laboratory between 1967 and 1974. In his pioneering work 
with elementary school children he found that ’'children as 
young as six and seven loved to write their own PILOT 
programs" (Kohl, 1983, p. v). Due to Dean Brown’s work, 
PILOT was selected by the Lawrence Hall of Science's 
Computer Education Project as the main language for working 
with elementary school children. (ATARI, 1980, p. ii) 

In the 1970’s, the development of the microcomputer 
allowed the merging of graphic images and music with 
computer programming. Dr. Seymour Papert, working on the 
LOGO Project at Massachusetts Institute of Technology, 
developed the concepts of "Turtle Geometry" and "Turtle 
Graphics" (ATARI, 1980, p. ii). Turtle graphics is an 
"elegant system which is easy enough for any child to use 
to create beautiful dynamic works of art" (Kohl, 1983, p. 
v). 

In the late 1970’s, ATARI Coporation developed its own 
version of PILOT for the ATARI microcomputer. The 
authoring aspects of PILOT which allow teachers to easily 
write interactive programs for their students were 
supplemented with the turtle graphics system from LOGO, the 
standard X-Y coordinate graphics of geometry, the modular 
programming organization of Logo and Pascal, a sound 
command to allow PILOT to make music, and three colors to 



add extra interest to the screen. David Thornburg 
contributed some important additions to PILOT'S commands, 
and Bob and Ted Kahn helped to develop manuals and tutorial 
materials to illustrate the usage of this versatile 
language. (Kohl, 1983, p. v) 

David D. Thornburg comments on PILOT as a truly 
user-friendy language when he writes: "PILOT is exceptional 
in that it is one of the easiest computer languages to 
learn, and yet allows the programmer to create 
extraordinary programs" (Thornburg, 1982, p. 3). 

PILOT, is an excellent user-friendly language designed 
to introduce programming to beginners of all ages, not just 
children. It allows teachers to quickly gain programming 
concepts and skills which would take much longer to 
understand and develop if the language being studied were 
BASIC. This, in turn, allows the teachers to understand 
more fully the concepts they are presenting to their 
students. (Gervich, 1983, pp. 1-3) 


Summary 

The use of PILOT as the beginning programming language 
for students is supported by Thornburg, Kohl, and Gervich. 
Bitter recommends PILOT be taught to students in grades 9 
through 12, after they have studied LOGO and BASIC. Arthur 
Luerhmann believes serious programming should be delayed 



until junior high school when a concentrated class in 
computer education can be presented by a specialist. 

The definition of computer literacy employed in this 
project is based in large part on Bell's concept of both 
computer awareness and computer programming skills. It 
also follows Arthur Luerhmann's plan of concentrating 
computers in a laboratory situation and teaching a single 
junior high school class which provides the students with 
hands-on computer experience as much as possible. 

Based on the opinions of the authorities cited, the 
author determined that the PILOT language would be very 
effective for instruction of computer literacy at the 
junior high/middle school level. Therefore, the Teachers' 
Activity Guide was developed to provide educators, 
including those with little computer experience, with a 
curriculum which provides students with hands-on computer 
activities and programming. 



CHAPTER III 


DESIGN OF THE PROJECT 


Computer Literacy Should Be Exciting 

One of the wonderful things about the computer is that 
it is so exciting to use. Many wonderous things seem to 
appear, change, and disappear from the monitor screen. A 
course in Computer Literacy should never cause the loss of 
this sense of excitement. Having junior high students 
watch someone else demonstrate a computer, or worse yet, 
spending an entire semester merely reading about using 
computers, can destroy it completely. 

The facts about how integrated circuit chips are made, 
understanding why a diskette can store information, reading 
what a doctor can do with data processing, and listening to 
a writer explain why he or she will not part with a word 
processing system are all pieces of information which 
should be a part of the student’s store of knowledge after 
completing a computer literacy course. 

These facts, however, will all pale beside the 
student’s experience of actually using a computer to type 
and print out a paper, creating and saving a short program 
to a diskette and having it still be there the next day, or 
drawing a graphic with one of the several graphics tablets 


19 



now available. A computer literacy course must be a 
hands-on course. Students need to experience personal use 
of the computer as well as understand the uses it has for 
our modern civilization. 

PILOT for Computer Literacy 

PILOT is an excellent computer language to introduce 
students to computer programming. PILOT is an acronym for 
Programmed Inquiry, Learning Or Teaching. It is a simple, 
flexible language, ideal for use in a computer literacy 
course, that is very easy to learn in a short period of 
time and therefore adapts well to ten-week courses as well 
as longer ones. 

It is an exciting language for beginning programming 
because many seemingly complex things can be made to occur 
very easily. Programs written in PILOT use simple English 
language terms. All of the students can quickly be writing 
short programs because they will understand the principles 
and the computer language. David Thornburg writes: "PILOT 
is at least as powerful as BASIC, and in some areas it is 
much more powerful. But most important, PILOT programs are 
easily read and understood" (Thornburg, 1982, p. 5). 

The PILOT program which follows illustrates the ease 
with which the simple principles of a computer language can 



be introduced 


10 GR: PEN RED 
20 GR: DRAW 50 
30 GR: TURN 90 
40 GR: PEN BLUE 
50 GR: DRAW 50 

In a matter of minutes students working at a computer 
will be drawing a variety of shapes on the screen. They 
only need to be told that GR: must be used to tell the 
computer that they are using a graphics screen and to press 
the RETURN key at the end of each line. DRAW, TURN, and 
PEN color will explain themselves as soon as they are typed 
into the computer. 

This, of course, is a simple program and only uses 
four of the many available PILOT commands. The important 
thing is that students can be successful very quickly. 

From this point many powerful and complex concepts and 
programming techniques can be developed. The only limit is 
with the individual student and the available computer 
access. 

PILOT is a very powerful language for teachers as well 
as for students exploring programming. PILOT was developed 
by Dr. John Starkweather at the University of California 
Medical Center at San Francisco. He designed it as an 
authoring program to enable teachers to write interactive 
text-only programs for their students. PILOT was conceived 
as a tool to make writing conversational programs easy. 
(ATARI, 1981, p. iii) It can be used to write quizzes, 



interactive storybooks, and other Computer Assisted 
Instruction (CAI) activities. 

The following program illustrates the ease with which 
a teacher can develop an interactive text program for use 
with students. PILOT text programming is direct and easily 
understandable. 

10 T:WHICH IS A CITRUS FRUIT? 

20 T:APPLE, PEACH, ORANGE 

30 A: 

40 M:0RANGE 

50 TN:SORRY, THE ANSWER IS ORANGE 

60 TY:GREAT ANSWER 

70 E: 

As PILOT uses the abbreviations for English terms, it is 
easy to type and to understand. Lines 10 and 20 of this 
program T:ype the indicated sentences on the screen. Line 
30 A:ccepts the answer typed by the student. Line 40 
contains the answer expected by the teacher. The student's 
answer is Miatched it to the teacher's answer. If the 
student answers incorrectly, TN means "type if no", the 
computer prints line 50. It the student answers correctly, 
TY means "type is yes", the computer prints line 60. Then 
the computer is told to E:nd its activity. 

PILOT allows the teacher to program a different 
response to each answer given by a student. The program 
can be made to count correct and incorrect responses, 
repeat questions with hints provided, randomize the order 
of the questions, and numerous other things. 

As can be seen from the programs above, PILOT, in its 
simplest form can be quickly understood and used to write 




23 


programs. But PILOT is not limited to simple graphics and 
text programs. By using the advanced techniques and 
commands available in the language, PILOT can be used to 
produce just about anything a teacher or student visualizes. 

Dr. Dean Brown, at Stanford Research Institute’s 
Education Laboratory, began working with PILOT in 1967. 
During the eight years he utilized PILOT in his research, 
he proved that it was a good language for teaching computer 
programming to children, many of whom were as young as six 
or seven. LOGO, a concept developed by Dr. Seymour Papert 
and a group at MIT, became an important influence in the 
study of educational computing. Therefore the capabilities 
of Turtle Graphics and Turtle Geometry were added to the 
text version of PILOT. (ATARI, 1981, p. ii) 

Students who have been introduced to programming 
through the use of PILOT will also find the transfer to 
other languages fairly easy. PILOT uses line numbers, 
commands which are similar to GOTO and GOSUB, Cartesian 
coordinates, and numeric and string variables as does 
BASIC. PILOT uses modular programming, turtle graphics and 
turtle geometry, and forms of recursion and structured 
programming as in LOGO and Pascal. 

ATARI PILOT 

PILOT was selected by ATARI Corporation as an 



excellent educational language which should be available on 
their computer for classroom and home usage. The ATARI 
microcomputer had capabilities which were not available 
when PILOT was developed on a mainframe computer. 

Additions were made to PILOT to take advantage of these new 
features. PILOT became a complete computer language with 
the ability to generate sound effects and music, as well as 
utilize the 128 colors of the ATARI. PILOT can print text, 
generate graphics, or produce a combination screen in three 
colors at any one time. (ATARI, 1981, p, iii) 

Using the ATARI with junior high school students has 
many advantages over other computers. The foremost feature 
is the full screen editing available with the ATARI. 
Anything which can be seen on the screen can be edited 
without entering an edit mode. This is much easier and 
less discouraging for students who do not know how to type. 
Using most computers means retyping lines over and over in 
order to correct mistakes. With the ATARI the student 
merely moves the cursor to the error, erases it and adds or 
deletes spaces as necessary, and then presses the RETURN 
key. The error is corrected and the student can spend the 
time progressing rather than regressing. This same 
technique allows students to repeat multiple lines without 
retyping them. The cursor is moved to the line number of 
the line to be duplicated, the new number is typed, RETURN 
is pressed, and there is now a duplicate of the line but 
possessing a new line number. This not only eliminates 




much typing time, it also allows the student to experiment 
freely with programs by allowing minor changes to be fast 
and easy to accomplish. The student can keep making 
variations in the program and running it until he or she 
really understands what each part of the program does. 

Many families decide to purchase a home computer based 
upon the machine being used by students in school. This 
purchase may result in home use which will greatly advance 
the student’s computer skills. Frequently families wishing 
to purchase a home computer find the price to be 
prohibitive and must forego the purchase. The ATARI is 
very inexpensive and a system consisting of a 96 K 
computer, which can be connected to an existing television 
set, and a disk drive costs less than three hundred 
dollars. A wide variety of software is available for use 
on the ATARI, including educational, application, 
recreational, and business programs. Programs can be 
purchased which will meet the needs of family members of 
any age. 


WHY THE PROJECT WAS BEGUN 

The original material, which has developed into the 
Teachers Activity Guide, was designed to meet the needs of 
students in a computer literacy and programming class at 
Sutter Junior High School. The class was to consist of one 




section and a teacher, Norma Baron, was assigned to teach 
it. The plans became definite only a month before the 
semester was to begin. This allowed very little advance 
preparation for the course. The general direction of the 
course was blocked out and, after much discussion among the 
three computer literate teachers at the school, PILOT was 
decided upon as the ideal language to introduce seventh 
graders to programming as a part of a short course in 
computer literacy. 

The first semester of teaching was very difficult. 
There were only five computers available and these were 
located in the school library, not a classroom. A single 
computer was moved to the classroom daily to allow 
demonstrations, and the class met in the library two days a 
week to allow hands-on experience. Text materials were not 


availabl 

e, no 

cu 

r ricul 

um 

exist 

ed, 

and 

Mr 

s. 

Baron 

was 


working 

with 

the 

autho 

r o 

f thi 

s p 

r o j e c 

t 

to 

plan 

each 

daily 

lesson a 

nd di 

r ec 

t the 

lea 

r ning 

of 

the 

st 

ude 

nts. 

The 


inadequa 

cies 

wer 

e obvi 

ous 

, but 

li 

ttle 

CO 

uld 

be d 

one 

during 

the seme 

ster 

as 

there 

was 

just 

no 

time 

f 

or 

detai 

led 



long-term planning. 

The three summer months allowed time to plan an 
efficient, complete, and well-directed course curriculum. 
The course was completely reorganized and structured 
activities were developed for each area of study. The 
meager materials available for resources during the 
previous semester were supplemented extensively. Input was 




sought from other Los Angeles area teachers who were 
teaching computer literacy. Daily lesson plans were made 
and activities were designed to meet the needs which had 
become apparent during the previous semester. 

The curriculum plan became the draft of this final 
Teachers Activity Guide. Mrs. Baron was teaching three 
sections of the ten-week computer literacy class during the 
1983-1984 school year. She graciously agreed to test the 
activity guide and share the strengths and weaknesses she 
discovered while using it. 

Upon the discovery of weaknesses, activities were 
adapted, deleted, and/or supplemented. The project has 
been expanded to include an introduction to teachers, 
reproducable activity pages, and evaluation techniques and 
materials. 

It is hoped that this Teachers Activity Guide to 
Teaching Computer Literacy Through the Use of Atari PILOT 
will help teachers who are attempting to teach a class in 
computer literacy while they are still feeling their way 
along themselves. This guide will not instruct the teacher 
in the use of the computer as the documentation will cover 
that. It will not eliminate the need for actual computer 
use by the teacher in order to become comfortable with the 
computer. Nor will it teach the class for the teacher. 

What it will do, however, is to provide some computer hints 
and details which will aid the teacher using the computer 
with the class, make the teacher's computer usage time more 



28 


profitable, and present a detailed daily course plan with 
activities and information ready to be used with the class 
without hours spent researching and experimenting in order 
to decide what to do in class tomorrow. 



CHAPTER IV 


DESCRIPTION OF THE TEACHERS' ACTIVITY GUIDE 


Introduction 

The Teachers' Activity Guide for the Teaching of 
Computer Literacy Through the Use of Atari PILOT has been 
designed to allow its use without a great deal of outside 
preparation time. The teacher is expected to be able to 
operate the Atari computer to the extent that he or she can 
hook up the computer and peripherals, turn it on and type 
something on the screen, and operate the disk drive. 

However the teacher does not have to be proficient in 
programming or other high level skills. 

The Teachers’ Activity Guide provides an overview of 
the entire course, weekly summaries of the material to be 
covered, and very specific daily lesson plans. These 
lesson plans include reproducable information sheets, 
concepts sheets, activity sheets, tests, and answer sheets. 

The Teachers’ Activity Guide contains many student 
activites, including the keeping of a notebook. Students 
are required to keep a notebook with specified sections. 
Some entries are made as a class, such as information 
sheets, concept sheets, and tests and quizzes. The 
majority, however, are individual entries such as class 


29 



30 

notes, classwork, homework, programs and the command and 
term glossaries. 

The Teachers’ Activity Guide provides information for 
the teacher as well as the information sheets and 
worksheets for the students. When necessary, reproducable 
answer sheets have been provided as well as the answer 
keys. These have been designed to make correcting easier 
and faster. 

Teachers’ Activity Guide - Ten Week Course 

The Teachers' Activity Guide presents the materials 
necessary to begin teaching a ten-week class in computer 
literacy and the programming of the computer using Atari 
PILOT. It is expected that the teacher will, over the 
months, add to his or her knowledge about computers and 
their uses through outside reading and study, and that he 
or she will put a number of hours into working with PILOT 
and experimenting with its capabilites. This study is 
necessary to provide supplemental material to flush out the 
course the second and third times it is taught. This guide 
provides enough detailed material to teach the first five 
weeks with little necessary outside preparation. The 
outline of the next five weeks is provided, but the daily 
activities for weeks six through eight have not been 
included in this project. The material to be covered 




within these three weeks is mainly utilizing the previously 
presented commands and aspects of the PILOT language in 
order to extend the programming skills of the students in 
preparation for the final project. A teacher continuing to 
work with PILOT and following the Teachers' Activity Guide 
outline should be developing enough PILOT knowledge and 
programming skills to teach the necessary commands and 
guide the student programming activities. 

The Teachers' Activity Guide is divided into four main 
sections: Introduction to the computer; Keyboarding and 
screen editing; Computer history, literacy, and learning to 
use computers by means of programming in PILOT; and a final 
project, summary, and review. The following summarizes 
each of these sections. 

Week One - Class and Computer Introduction 
Enrollment procedures 
A Computer Can 
Class and computer rules 
Parent information letter 
Computer components 
Notebook requirements 
Computer License Test 
Computer functions and applications 
Week Two - Keyboarding and Screen Editing 
Computers Today 
Computer history 
Computer Memory 






Keyboard Activites 
Screen Editing Activities 
Keyboard Graphics Project 
Weeks Three to Eight - PILOT Programming 
Introduction to PILOT 
Introduction to PILOT Commands: 

TYPE, LIST, RUN, NEW, REN 
Continuation of Keyboard Graphics Project 
Turning it into a PILOT program 
Continuous reinforcement of Commands which 
are introduced throughout this section 
Introduction of ACCEPT; strings, MATCH 
Introduction of JUMP, JUMP YES, JUMP NO, TYPE YES, 
TYPE NO 

Introduction of PAUSE 

Introduction of MODULES, GRAPHICS, USE, 
and END 

Reintroduction of JUMP as JUMP ON MATCH 
Introduction of other GRAPHICS Commands: 

CLEAR, QUIT, GO; GOTO, DRAW, DRAWTO, TURN, 
TURNTO, PEN color, X,Y coordinates, 

PENUP, PENDOWN 

Introduction to the DISK DRIVE 
Diskettes and their care 
Beginning of MODULE DICTIONARY 
First Graphics Modules include: 

SQUARE, TRIANGLE, STAR, HOUSE 



First Text Modules include: 

Hello, Goodbye, Favorite color 
Introduce Animation 

Rocket and Falling Star 
Introduce AUTO, FILL, and FILLTO 
Introduce SOUND 
Introduce COMPUTE 

Arithmetic operations 
Counting within programs 
Introduce RANDOM 

Random graphics generation 
Random Numbers 

WEEKS Eight to Ten - Final project. Review 
Final Project 

Develop an interactive computer program 
Mad-Lib 

A series of questions asked of the user 
The answers from the questions are 
inserted into the story 

The story is printed out on the screen 
The story may be printed on a printer 
Adventure 

A story is printed which asks decisions of 
the user at key points 

Based upon the answers, the story develops 
in different directions 


Develop a non-interactive program 



Graphics/Text 


A graphics program consisting 

of a series of pictures or an animated picture 
Must include required text commands 
as well as graphics commands 
Story 

Recommended for students who have not 
developed the necessary programming 
skill to program an interactive 
mad-lib or adventure 
Should include a minimum number of 
screens, as determined by the teacher 
Final Exam 

Demonstration of Final Projects to class 
Disk collection and Book check 


Use of Concept Sheets 

Concept Sheets (CC) are used throughout the Teachers' 
Activity Guide. They consist of information and questions 
which may review previously covered material or they may 
introduce new material which is to be covered during that 
day's class. A CC is provided for almost every 
non-computer day, and for a few of the computer days as 
well. If the school is able to provide the amount of paper 



write directly on the CC’s. If a school will not be able 
to provide this amount of paper, the students can be 
required to copy the questions onto their own paper. 

The CC’s provide an activity which has a variety of 
purposes: starting, review, introduction. As a starting 
activity, it is used to get everyone working as soon as 
they have entered the room. Instead of milling around the 
classroom waiting for a bell to ring to indicate the 
beginning of class, the students pick up a CC (Concept 
Sheet) as they enter the room. They move to their seat and 
begin working on the CC at once. Most of the CC’s are 
designed to be completed within ten minutes. This allows 
time for the teacher to complete all of the record keeping 
chores which are required, plus providing a few minutes for 
any necessary last minute preparations for the period. 

As a review activity, the CC can reinforce concepts 
which were introduced and utilized the day before or they 
can recall something which was covered several days before 
but which is now to be used as a basis for further study 
and advancement. As an introduction, the CC can introduce 
terms or concepts which will be developed during the course 
of the class period. This allows students to receive 
similiar information in a variety of different ways. While 
the auditory learner may do well when the teacher discusses 
a new concept, and the kinetic learner grasps the concept 
by using the computer, the visual learner may need to see 
the information written, as on the CC. 



The concept sheets may be corrected immediately or may 
be held for a day or two, depending upon the purpose of 
that particular CC. Some of the sheets may be ungraded and 
only used as stimulation for discussion material. Others 
will be graded and recorded as it is often very difficult 
to obtain enough grades in a computer class. So much of 
the activity at the computer is exploration and cannot be 
graded except very subjectively in relation to the amount 
of effort the student seems to be applying. 


A Sample Daily Lesson Plan 

The Teachers' Activity Guide provides lessons for each 
day. The following illustrates more fully materials 
provided for the first day of the second week. This is a 
classroom, or non-computer, day. 

The class is opened with a CC entitled "Computers 
Today" which discusses the three main types of computers, 
including their features and uses. The CC is collected. 

The information sheets "History and the Computer" and 
"Today's Computers" are distributed, read, and discussed. 
The teacher shows vacuum tubes, transistors, and chips to 
the class. If the teacher has been able to obtain the 
actual items, wonderful. If not, pictures can be used. 

The CC is discussed. It can be corrected if the teacher 
wishes, or a T.A. or the teacher can correct the actual 



answer sheets later. Pictures are used to illustrate the 


mainframe, minicomputer, and microcomputer. 

The two types of computer memory, RAM and ROM, are to 
be introduced today. The teacher begins by talking about 
human memory: how it works; how faulty memories can exist; 
and what makes us remember things. This leads to the 
discussion of computer memory: where it is; what RAM and 
ROM are and how they differ; why computers do not have 
faulty memories; and why computer errors are really human 
errors. The students are given the "Memory - RAM and ROM" 
worksheet to read and answer the questions. These are 
corrected and discussed. The teacher introduces Kilobyte 
and Bytes and discusses the RAM and ROM capabilities of the 
Atari computers used in class. 

Throughout this lesson, the students are to have 
written the new terms in the glossaries they are keeping as 
a part of their notebooks. The new terms for the day are: 
memory; RAM; ROM; mainframe; minicomputer; microcomputer; 
chip; Kilobyte; Byte; hardware. Depending upon the level 
of the class, such extra terms as vacuum tube and 
transistor may be required also. 


Classroom Management of the Computer Literacy Course 


The days have been broken up into those which require 
the use of the computers and those which do not. However 



computer availability every day after the first week would 
only enhance the learning experience. Classes which do not 
have daily computer access would follow the guide as 
presented. Classes with daily access to computers, but 
only enough to allow one-half of the class to work in pairs 
at the computers, would follow the plan but alternate 
activities for the half on and the half off the computers. 
(The main problem with this method is that the teacher must 
divide the class and present material twice. It is also 
difficult to conduct a discussion with the half at their 
seats and, at the same time, help those having problems at 
the computers.) Those classes lucky enough to have full 
computer access, daily access for the entire class in pairs 
or even alone, will complete many activities more quickly 
and will have extra time to allow the students to explore 
PILOT in greater depth. 

The ATARI PILOT package, when purchased, includes a 
language cartridge and a textbook. The cartridges contain 
the PILOT language in a READ-ONLY-MEMORY (ROM) chip. This 
simplifies the loading of the language into the computer. 
Because the language is in ROM, it cannot be accidently 
lost as can data stored on a disk. The cartridge is placed 
into the empty slot on the top of the computer and is ready 
to go instantly when the computer is turned on. 

As a text, the STUDENT PILOT Reference Guide, was 
included with each PILOT cartridge, they were available for 


class use 


This STUDENT PILOT Reference Guide was 



therefore chosen as the text for student use within the 
laboratory setting, but they were not checked out to 
individuals as there was only one copy per computer. These 
manuals are available separately but, due to the extra 
expense, more were not purchased. 


Summary 

Utilization of the Teachers’ Activity Guide will 
enable the teacher with minimal computer experience to 
teach a class in computer literacy and introductory 
programming. The preparation for this class has already 
been done and the materials are ready for use. This will 
free time which the teacher can use to expand his or her 


own computing skills 




CHAPTER V 


USE OF THE TEACHERS’ ACTIVITY GUIDE 


The Teachers' Activity Guide for the Teaching of 
Computer Literacy Through the Use of Atari PILOT has been 
tested by using it to teach Computer Literacy and 
programming to seventh grade students at John A. Sutter 
Junior High School in Canoga Park. The material was used 
with three classes of students during each of the four 
ten-week sessions. In all, the material was tested with 
twelve classes, a total of three hundred and sixty 
students. 

While the overall results were very satisfactory, 
certain areas of the guide needed adjustment. It was 
discovered that the seventh grade students' total lack of 
typing skills necessitated an expansion of the keyboarding 
section of the curriculum. While an adult might find it 
tedious to test every key on the keyboard alone, with the 
shift key, and with the control key, the student was making 
new discoveries with each stroke. Just finding the 
location of each letter of the alphabet constituted a task 
which occupied an amazing period of time. 

Test results indicated that the students learned more 
about computer history and development, modern equipment 
and uses, and the possible place of computers in the future 


40 



when each of these things was presented separately and in 
fairly small segments. This resulted in the series of 
concept sheets, each approximately one to two pages long, 
with ten to fifteen questions to be answered. 

Observation of the students at the computers showed 
them to be comfortable with the use of the computers and 
the disk drives only after two to three weeks of actual 
use. During this period of time they had also learned to 
handle diskettes properly. 

Evaluation of the students' PILOT programs indicated 
that all had made some progress in understanding the basics 
of computer programming and computer logic, and that many 
had made tremendous advances. This evaluation indicated 
the areas of programming which needed further explanation, 
such as the use of the MATCH command, and lessons were 
expanded to reinforce these concepts. 

The excitement level which was maintained by the 
majority of students throughout the course indicated that 
the material held the students interest and that the 
activities were suitable to a range of student ability 
levels. When asked at the end of the course, the majority 
of students expressed interest in taking further computer 
classes in either junior or senior high school. 

While the students were considered to be 
heterogenously grouped in the computer literacy class, due 
to the homogenous grouping within math, English, and social 
studies classes, the classes tended to have a majority of 



students from one ability level or another. The higher 
classes progressed more rapidly through the classroom or 
written material and were able to obtain a higher level of 
programming skills due partially to the fact that they had 
more time to spend using the computers. 

When extra classroom time was allowed for those with 
lower reading skills, the material proved to be at a level 
understandable by all students. As these students 
progressed more slowly through the written work, they had 
less time on the computers. However, all achieved some 
programming skills and many had good programming results. 

The ESL (English as a Second Language) students had 
some trouble with the written materials of the course due 
to their limited reading and comprehension skills in 
English. Other students with bilingual skills were asked 
to work occasionally with these students one their 
vocabulary and comprehension skills. Even though these 
students were somewhat handicapped in the area of English 
usage, their successes in the programming aspects of the 
course were obvious. PILOT uses English commands, but the 
two letter abbreviations are easy to use and the ESL 
students quickly learned what each would do on the screen. 
While they had some difficulties with the text programming, 
mad-libs and adventures, they had very little trouble with 
the graphics activities. In the use of the computer and 
other equipment, language proved to be no barrier. 

During each teaching session, suggestions were made 



for the addition, deletion, and/or adjustment of material 
in the guide. Expansion of keyboarding activities, 
dividing information sheets into smaller segments and 
adding questions for each segment, and clarifying the use 
of programming terms such as ACCEPT were implemented as 
quickly as possible. By the end of the school year, most 
problems had been eliminated and the guide materials had 
been strengthened to produce a satisfactory course. 

The Teachers’ Activity Guide is to be used in the 
Computer Literacy course projected for next year at Grover 
Cleveland High School in Reseda. The Guide will be used to 
present the first half of a twenty-week course for ninth 
grade students. The remainer of the course will cover an 
introduction to the study of BASIC in order to prepare the 
students for Computer Programming I AB the following year. 

As these students will be more mature than the seventh 
graders, and as pairs of students will have daily access to 
computers, the ninth graders may progress more rapidly than 
the daily plan in the guide. This should not provide a 
problem as these students will be encouraged to expand 
their progamming skills to utilize some of the aspects of 
PILOT that the seventh graders were either not ready for or 
did not have time to study. Better students can even be 
directed to use the authoring capabilities of PILOT to 
create study programs for slower students. As David 
Thornburg said, "PILOT is at least as powerful as BASIC, 
and in some areas it is much more powerful." There is no 



44 


limit to what a student can learn and do with PILOT if 
there is interest, time, and computer access. (Thornburg, 
1982) 




REFERENCES 


Agee, Roy. Are we really training computer teachers? T_. 

H. E. Journal Technological Horizons in Education , March 
1985, Pp. 96-99 " " ~" . 

ATARI 400/800 student PILOT reference guide . ATARI, Inc., 
U.S.A., 1981. 

Bell, Norman T. A computer awareness program for all 
teachers and all students. T. H, E. Journal Technological 
Horizons in Education , September 1983, Pp. 138-141. 

Bitter, Gary G. The road to computer literacy: a scope and 
sequence model. Electronic Learning , September 1982, Pp. 
60-63. 

Gervich, Jason. ATARI LOGO and PILOT comparison . ATARI 
INC., Sunnyvale, California, 1983. 

Kohl, Herb., Kahn, Ted, & Disharoon, Dale. ATARI PILOT 
activities and games . Reston Publishing Company, Inc., 
Reston, Virginia, 1983 

Kunkin, Dorothy & Vann, Keith. ATARI 400/800 PILOT primer 
- the PILOT programming language instruction manual . 

ATARI, Inc, U.S.A., 1980. 

Luehrmann, Arthur. The best way to teach computer 
literacy. Electronic Learning , April 1984, Pp. 38-41. 

Scher, Rod A. The computer backlash. Electronic Learning , 
January 1984, Pp. 22, 24. 

Thornburg, David D. Picture this? an introduction to 
computer graphics for kids of all ages . Addison-Wesley 
Publishing Company, California, 1982. 



APPENDIX A 


TEACHERS' ACTIVITIY GUIDE FOR THE TEACHING OF 
COMPUTER LITERACY THROUGH THE USE OF ATARI PILOT 



TABLE OF CONTENTS 


Page 


INTRODUCTION TO THE TEACHERS ACTIVITY GUIDE.47 

WEEK 

1.50 

DAY 1.51 


CC: A Computer Can 

Answer Sheet - 16 question form 

Class Rules 

Computer Rules 

Parent Letter 


DAY 2.60 

Computer Components - instructor notes 
DAY 3.63 


CC: Hardware 

Answer Sheet - 10 question form 
CC: Hardware - Questions 
Computer Operator's License Test 
Computer Operator's License 
CC: A Computer Can Answer Sheet 

DAY 4.72 

Glossary Terms - instructor notes 

What is a Computer - student information sheet 

A Computer Is... - student information sheet 

2.79 

DAY 1.80 

CC: First Computers 

CC: First Computers - Questions 

Computer History - student information sheet 


CC: Computers Today 

CC: Computers Today - Questions 

DAY 2.88 

Keyboard Activity Worksheet 

More About Memory - student information sheet 
CC: More About Memory - Questions 

DAY 3.97 

Glossary Terms - instructor notes 

DAY 4.99 

Keyboard Graphics Design Project 

DAY 5.102 

Screen Editing Worksheet 

3.105 

DAY 1.106 

CC: Editing 

CC: Editing - Questions 


PILOT Introduction - instructor notes 
Glossary Terms - instructor notes 
Glossary Commands - instructor notes 



















Page 

DAY 2.113 

CC: PILOT Introduction 

CC: PILOT Instroduction - Questions 

DAY 3.117 

Keyboard/Screen Editing Quiz 

DAY 4.119 

A Variety of Tricks - instructor notes 
The Amazing Multiple Line Trick 
DAY 5.'.122 

4 .123 

DAY 1.124 

CC: Programming Terms 

CC: Programming Terms - Questions 

PILOT Commands - instructor notes 

DAY 2.130 

Glossary Terms - instructor notes 
Glossary Commands - instructor notes 

DAY 3.133 

Program Variations - instructor notes 

DAY 4.136 

CC: MATCH/JUMP 

CC: MATCH/JUMP - Questions 

Conditional Commands - instructor notes 

DAY 5.142 

MATCH Expansion Continued - instructor notes 
JUMP USING JY and JN: Conditionals 

5 .146 

DAY 1.147 

MATCH Using TY: and TN: Conditionals 

DAY 2.150 

PILOT/LITERACY Test 1 

DAY 3.154 

JUMP ON MATCH - instructor nots 

DAY 4.157 

Modules - instructor notes 
Graphics Exploratory Worksheet 
DAY 5.163 

6-8 164 

Instructor Notes 

9..168 

Final Project 

Example Starter Program for Adventure 
Example Program for Adventure 


10 


180 
























INTRODUCTION TO THE TEACHERS' ACTIVITY GUIDE 


A Teachers Activity Guide for the Teaching of Computer 
Literacy Through the Use of ATARI PILOT was prepared for 
use in the junior high/middle school, grades 6 to 9. 

During the 1983-1984 school year, the course was taught to 
seventh graders at John A. Sutter Junior High School in 
Canoga Park. This class was designed to teach computer 
literacy and an understanding of the concepts of 
programming. 

Computer Literacy, as referred to in this course, 
includes the following: computer history; how the computer 
works; computer terms such as ROM, RAM, Byte, Kilobyte, 

CPU, Input, and Output; uses of the computer; what the 
computer cannot do; what the computer future may offer; and 
an introduction to programming. 

ATARI computers were to be used for the class and a 
computer programming language needed to be selected. 
Although BASIC was considered, PILOT was determined to be 
the best computer language to assure a positive attitude 
toward programming. It utilizes normal English words as 
commands, has simplified procedures, and the student is 
able to grasp the necessary concepts to achieve a 
successful programming experience. Also important with the 
junior high age group, it has easy to use Turtle Graphics 
which provide tremendous excitement during progamming. 

ATARI PILOT is a language which can be learned quite 



quickly and easily, but which can be used to present quite 
complex programming concepts if the teacher and the pupils 
are ready for them. A teacher with no knowledge of BASIC 
or other computer languages can master the principles of 
PILOT with a few days at the computer. To come to terms 
with a comparable amount of BASIC would probably require 
weeks of study and computer work. 

Although a computer lab with one computer per student 
provides an ideal ratio for teaching advanced programming 
skills, having two beginning students per computer proved 
very successful at Sutter Jr. High School. Students met in 
the laboratory or regular classroom on alternate days. 

This pattern allowed English and Math classes access to the 
computers. The curriculum was designed to be fairly 
flexible as the lab days varied from week to week. 

While this was the pattern at Sutter Junior High, the 
curriculum is designed so that it can be used by a class 
meeting every day in the computer laboratory as well. 

Also, a ratio or one computer per every four students can 
be used, although it is not as ideal a situation. The 
students should be paired and work at the computer half of 
every lab period or an entire period every other lab day. 
This will mean that some of the activities will take longer 
to complete than indicated in the Teachers' Activity Guide. 

One object in preparing the curriculum was to design a 
program which could be used by a teacher with fairly 





limited computer expertise. As schools move into the 
computer era many teachers with little or no computer 
background are being told to teach an introductory computer 
class. This curriculum provides overall weekly plans, 
specific daily summaries, lecture/discussion notes, concept 
sheets, worksheets, homework, laboratory activity sheets, 
tests and quizzes, and projects for the first six weeks of 
a ten-week Computer Literacy class. The outline provided 
for the remaining weeks indicates topics, assignments, and 
projects which the teacher is to use as a guide for the 
rest of the course. In other words, it is a teaching 
manual to guide the inexperienced teacher almost every step 
of the way. The teacher must spend time with the computer 
manuals to learn the computer operation, but this guide 
will provide the organization of the course. 






WEEK 1 


DAY 1 

DAY 2 

DAY 3 

DAY 4 


Enrollment procedures; Concept Sheet: A Computer 
Can; seating chart; course outline; class 
rules; parent letters; computer rules. 

Continue class rules, parent letters, computer 
rules; computer components; notebook requirements. 

CC (concept sheet): Hardware; Computer License Test; 
test correction; computer functions and applications 
discussion. 

Test retakes; notebook: structure and first entries. 



51 


WEEK 1 - DAY 1 

1. Enrollment procedures 
Enrollment cards: 

Information collected on the reverse side may include: 

vision or hearing problems; 

computer owned? kind?; 

computer experience? kind?; 

computer involvement of parents. 

Concept Sheet: A Computer CAN? 

As pupil completes enrollment card, he/she will receive 
CC to answer. Introduces concept sheets and use of 
answer sheets. Will be corrected on Day Three as part 
of computer applications discussion. 

2. Seating chart 

3. Course outline 

Week one: Introduction to computer 
Week two: Keyboard and screen editing 
Weeks three through eight: Computer history and 
literacy; learning how to use computers by means 
of the PILOT language. 

Weeks nine and ten: Final project; Summary and review; 
Final exam; Demonstrate final projects 

4. Class rules 

Discussion of general class rules as per letter which 
is being carried home to parents tomorrow. 

5. Computer rules 

Begin discussion of specific computer rules. 

6. Parent letter 

General class rules 
Specific computer rules 
Disk rental 
Notebook requirements 
Homework 

To be read, signed by both pupil and parent or 
guardian, and returned to the teacher 




PLEASE USE ANSWER SHEET — DO NOT WRITE ON THIS PAPER 
CONCEPTS: A COMPUTER CAN? 

Can a computer think? This is a common question. Read 
each statement below and ON YOUR ANSWER SHEET mark TRUE if 
a computer CAN do it and mark FALSE if a computer CANNOT d 
it. 

1. Keep inventory records for a market. 

2. Plan the flight plan for the space shuttle. 

3. Stop a car when someone runs out in front of it. 

4. Help design a safer car. 

5. Select stocks which will go up or down next week. 

6. Help police to identify a criminal. 

7. Tell whether a person is guilty or innocent. 

8. Keep track of a family bank account. 

9. Decide what pet a family should buy. 

10. Decide what type of dog matches a family's lifestyle. 

11. Help a doctor diagnose an unusual disease. 

12. Tell you which of three mysteries is the best. 

13. Arrange stories and pictures on a newspaper page. 

14. Gather the facts for a newspaper reporter. 

15. Make it easier for a newspaper reporter to type 
his story. 

16. Allow a newspaper reporter to call in his typed story 
from a phone 1000 miles away. 

Answer these questions on the BACK of your ANSWER SHEET. 

1. Have you ever seen a computer being used? 

2. If so, what was it being used for? 

3. Tell one thing that you think a computer could be 
used for that was not mentioned in #1-16 above. 



NAME 

ANSWER SHEETS FOR 

PER 

15-16 QUESTION 

NAME 

QUIZZES 

PER 

53 

1. 

9. 


1 . 

9. 


2. 

10. 


2. 

10. 


3. 

11. 


3. 

11. 


4. 

12. 


4. 

12. 


5. 

13. 


5. 

13. 


6. 

14. 


6. 

14. 


7. 

15. 


7. 

15. 


8 . 

16. 


8. 

16. 



NAME 


PER 

NAME 

PER • 

1 . 

9. 


1 . 

9. 

2. 

10. 


2. 

10. 

3. 

11. 


3. 

11. 

4. 

12. 


4. 

12. 

5. 

13. 


5. 

13. 

6. 

14. 


6. 

14. 

7. 

15. 


7. 

15. 

8. 

16. 


8. 

16. 




54 


COMPUTER LITERACY - CLASS RULES 

1. Arrive on time, enter the room in an orderly manner. 

2. Three tardies in 10 weeks WILL result in a ”U” in 

Work Habits, and more may result in a "U" in Cooperation 
and may lower the subject grade. 

3. Pick up your class notebook and a Concept Sheet, 
if present, on your way to your seat. 

4. If there is a Concept Sheet by the notebook box, it 
is to be taken to your seat and begun immediately. 

Answer sheets will be collected 10 minutes after the 
tardy bell rings. 

5. You need a folder type notebook with fasteners AND 
pockets. NO PEECHEES!! At least 20 sheets of lined 
paper should be in your notebook to begin the class. 
Notebooks will be left in class at all times. 

6. Keep all work in your notebook. Specific directions 
for the organization of the notebook will be 

given later this week. Papers will be given out once, 
do not lose yours. Missing assignments will 
affect BOTH your work habits and subject grades. 

7. Work missed due to absence must be made up. Get 
materials and information from the teacher, and complete 
the work within three days after an absence. 




55 


COMPUTER LITERACY - CLASS RULES Page 2 

8. You are responsible for the cleanliness of your 
desk and the area around it. 

9. No talking in class except when it is necessary to do 
our work. Raise your hand to be recognized to speak. 

IT IS IMPORTANT TO ABIDE BY THESE RULES. FAILURE TO DO SO 
MAY RESULT IN A ”U" IN WORK HABITS AND/OR COOPERATION AND A 
LOWERED SUBJECT GRADE. 


I have read and understand the Parent Letter, the Class 
Rules listed above, and the Computer Rules on the 
accompaning sheet This tear-off is to be returned to the 
teacher tomorrow. 

Student's signature _ Per _ 

Parent's signature _Date _ 





56 


COMPUTER LITERACY - COMPUTER RULES 

1. Students who are tardy may be excluded from using 
the computer. 

2. Because computers are expensive and complicated pieces 
of machinery which do not work well full of cookie 
crumbs or with liquids spilled between the keys, 

do not bring food, drink, or gum into the room or lab. 

3. Do not touch the video screen with hands or anything 
else. It has a special non-glare surface. 

4. The only time the lid of the keyboard is opened is to 
insert the PILOT cartridge. The power turns off and 
you will lose any program in the computer. Be careful 
not to let anything fall into this compartment. 

5. Touch something metal to ground yourself before 
you touch the computer. Static electricity from 
your body can zap computer memory and disks. 

6. Go directly to your assigned computer seat. 

Remain there with your specific assignment. Do NOT 
visit other computer stations. 

7. Ask for help if you have a problem. Computers are NOT 
toys! Do not handle or experiment with any equipment. 
DO NOT TURN EQUIPMENT ON OR OFF WITHOUT SPECIFIC 
INSTRUCTIONS TO DO SO!! 

As you will be sharing books and equipment, respect 
the rights and belongings of your classmates. 


8 



COMPUTER LITERACY - COMPUTER RULES Page 2 


9. You will be using a floppy diskette to store programs 
for the computer. To make it more convenient, we will 
have a class set of diskettes. Disks can be 
permanently ruined by improper handling. The cost 

of replacing a diskette is approximately $2.00. 

As two pupils will be sharing a diskette, the 
security fee will be $1.00 each. It is to be paid in 
cash to the teacher by the end of the second week of 
class. It will be returned when an undamaged diskette 
is turned in at the end of the course. (Pupils 
with computers at home may wish to purchase the disk 
outright for the full $2.00.) 

10. Specific directions for handling disks will be 
given later. Meanwhile, do not touch them. 

IT IS IMPORTANT TO ABIDE BY THESE RULES. FAILURE TO DO SO 
MAY RESULT IN A "U" IN COOPERATION AND/OR WORK HABITS AND 
A LOWERED SUBJECT GRADE. 


IT IS VERY IMPORTANT THAT YOU STUDY THESE COMPUTER RULES 
TONIGHT. TOMORROW YOU WILL BE TESTED ON THEM. YOU MUST 
ANSWER 23 OUT OF 25 QUESTIONS CORRECTLY IN ORDER TO OBTAIN 
YOUR ’’COMPUTER OPERATOR’S LICENSE." WITHOUT IT YOU WILL 
NOT BE ALLOWED TO USE THE COMPUTER. STUDY! 




(month, year) 


Dear Parent or Guardian, 

Your child is currently enrolled in a ten-week class 
in COMPUTER LITERACY. You need to know what he/she will be 
learning and what will be expected of him/her. Some days 
will be spent in the classroom and some in the Computer 
Lab. There are general class rules and specific rules 
pertaining to the use of the computer which I am sending to 
you for you and your child to read and acknowledge 
understanding and receipt of by signing the tear-off and 
returning it to me tomorrow. 

Your child will be using a floppy diskette to store 
programs for the computer. A returnable security fee of 
$1.00 will be charged to ensure that care will be taken 
with this fragile item. Please send this amount in cash 
with your child before the end of next week. 

Your child will also be using books which will be 
shared and will remain in the classroom. Any damage to the 
book will result in a charge of the complete replacement 
cost of the book, as per school policy. This charge will 
be divided among the assigned users of the book. 

COMPUTER LITERACY is designed to make the pupil 
knowledgeable about and familiar with computers and to give 
a simple introduction to programming using the computer 
language PILOT. Since this is an activity-oriented class, 
it is very difficult to make up missed sessions, 
particularly in the lab; therefore regular attendance is 



necessary. Pupils who are late to class may miss opening 
exercises or activities. As they will not have done this 
work, their grades will be adversely affected. 

To accomplish the course goals, your child will be 
required to maintain a notebook which will be kept in the 
classroom to assure that it will available every day. This 
paper folder must have attached fasteners for permanent 
storage of papers. Pockets for temporary storage of single 
study sheets are recommended. Folders, due in class by the 
end of this week, are available at the student store. 

All assigned work is to be completed. Work not turned 
in when it is due will receive a lowered mark. When 
homework is assigned, it is to be brought to class, 
completed, the next day. Work missed because of a 
legitimate absence must be made up. It is important that 
your child ask ME personally for make-up materials. When 
pupils ask other pupils, they often receive incomplete or 
incorrect information! 

Please remember that school Progress Reports are sent 
home every five weeks in order to keep you informed of your 
child's progress in his classes. Watch for them. You may 
request further information at any time by calling the 
office and speaking with your child's counselor or asking a 
specific teacher to call you. 

Please be sure that you read both rules sheets and 
sign the tear-off. Thank you. 


Sincerely, (teacher) 



60 


WEEK 1 - DAY 2 

1. Rules and parent letter 
Continued from yesterday. 

2. Computer components - (notes) 

As each component is covered during the computer rules 
discussion, show it to class, give a brief explanation. 


3. Notebook requirements 

a. paper folder with brad fasteners and pockets 

b. kept in the classroom 

c. contain plenty of paper 

d. follow required organization format 

e. kept up to date 

f. work missed because of absence must be made up 

g. picked up by pupil when entering room 

h. left as pupil leaves room 

i. will be graded 

j. can be purchased from student store if necessary 

k. DUE: by end of Week 1 


4. HOMEWORK (HW) 

Sent home with pupil today will be: 


Parent Letter - to be returned, signed, tomorrow 
Class Rules Sheet - to be signed, returned tomorrow, 
and placed in the pupil’s notebook 
Computer Rules Sheet - to be STUDIED for 
tomorrow's test, returned and placed in notebook 






INSTRUCTOR NOTES - COMPUTER COMPONENTS 


Keyboard - Used to INPUT information into the computer. 

May be attached to the computer (as the are the 
ATARI and APPLE) or separate (as is the IBM PC). 

Monitor/TV - Displays the information to be read by the 
person using the computer. It is used to OUTPUT 
information. A monitor has a sharper picture and 
may or may not have color or sound. The TV 
resolution is less sharp and may be hard on the 
eyes, especially for word processing where the user 
may stare at the screen for hours at a time. 

The monitor or TV screen is often referred to by the 
letters CRT. This comes from the Cathode Ray Tube 
inside which actually puts the picture on the screen. 

Central Processing Unit (CPU) - the main chip inside the 
computer. Controls the computer, saves information, 
and controls everything which occurs when a 
program is running. The CPU may be found inside 
the keyboard component (ATARI) or may be inside a 
separate component (IBM). The CPU in the ATARI (and 
APPLE, IBM, and Commodore) is the 6502 chip. 

Chips - The ATARI has four other chips which work with 
the CPU. They control the screen action (ANTIC), 
the two hundred and fifty-six possible colors 
(GTIA), the four voice sound (POKEY), and the 
joystick ports (PIA). 




INSTRUCTOR NOTES - COMPUTER COMPONENTS Page 2 

Disk drive - this I/O peripheral is used to INPUT data into 
the CPU without the use of the keyboard. The data 
is saved on diskettes (similar to a tape but in 
the shape of a record). They can be purchased ready 
to use or we can save our own programs on them. 

Printer - allows the user to obtain a hard copy of data 
stored in the computer. There are several kinds. 

The dot-matrix is the most common. It has numerous 
pins which hit the ribbon forcing the ink onto the 
paper in a certain pattern. Noisy, but relatively 
inexpensive, they make a wonderful ditto master. 

These printers are can be used for printing graphics. 
The more costly "letter quality" printers are of two 
types. The most common uses a print head which 
operates similar to a Selectric typewriter, 
spinning and hitting the correct letter. These 
printers cannot be used for graphics, but type 
fonts can be changed by replacing the print head. 

A second variety of letter quality printer is the 
ink-jet. It shoots ink onto the paper in the 
correct pattern. It is very quiet. 

The thermal printer is quiet and inexpensive, but 
the special paper it requires for its heat-transfer 
process can be very expensive over a period of time. 





WEEK 1 - DAY 3 


1. Concept Sheets (CC) will be a regular class 
activity. They will be done during the first ten 
minutes of a class period while necessary record¬ 
keeping chores are completed. Sheets will be 
picked up with the notebook upon the pupil's entering 
the classroom. 

CC's consist of information to be read and questions 
to be copied and answered on pupil's own paper. 

This is to conserve paper but the school may choose 
to have the pupils write directly upon the CC's. 

Original CC's and answer sheets (a standard form can 
be provided by the teacher) will be collected ten 
minutes after the tardy bell. 

Questions and answers will be discussed, and 
completed corrected copies will become part of the 
pupil's notebook. They are to be used for reference 
and study. 

2. CC: Hardware 

Covers CPU (6502 chip); ANTIC, POKEY, and GTIA 
chips; keyboard; video display screen; tape 
player; disk drive; printer. 

3. Computer License Test 

25 questions (15 TRUE/FALSE;10 multiple choice). 
Students must get at least 23 correct to get 
license. Those who do not pass will retake tomorrow. 

4. Computer functions and applications discussion. 

Return and use answer sheets of CC: A Computer Can? 
from Day 1 to involve pupils in a discussion. 

Most of the things mentioned in the CC can be performed 
by computers to some extent, but not all can be done 
more efficiently or faster than by humans. 

Other discussion information may be obtained from: 
pupil's responses to questionnaire on back of 
enrollment card; or by placing the following sentence 
starters on the board and having students complete 
them. "A Computer Is...." and "A Computer Can....'' 






CONCEPTS: HARDWARE 


HARDWARE is the word for the actual machinery of a 
computer. A typical microcomputer system consists of: 
Central Processing Unit (CPU); keyboard; video display 
screen; disk drive (occasionally a tape player is used 
instead); disk drive; printer. 

The CPU of the ATARI is the 6502 chip. This chip 
directs the operation of the whole system. It puts 
characters on the video screen, performs calculations, 
compares data, and stores information. 

The ATARI has four other chips to help the CPU do an 
even better job. These chips each have a specific 
function. The ANTIC chip controls the screen display. The 
GTIA chip executes the screen graphics. The POKEY chip 
produces the sounds. The PIA controls the use of the 
joystick and paddles. 

You will see the term I/O in books and magazines. 

These letters stand for INPUT and OUTPUT. The keyboard, 
tape player, and disk drive all feed information into the 
CPU; therefore they are called INPUT devices. The video 
display screen and the printer receive information from the 
CPU and are called OUTPUT devices. Because the tape player 
and the disk drive store information from the CPU and put 
it back into the CPU, they are considered to be 
INPUT/OUTPUT devices. 



65 


ANSWER SHEETS FOR 

NAME_PER_ 

1._ 

2 . _ 

3. _ 

4. _ 

5. _ 

6 . _ 

7. _ 

8 . _ 

9. _ 

10 , _ _ 


10 QUESTION QUIZZES 

NAME_PER 

1 . _ 

2 , _ 

3. _ 

4. _ 

5. _ 

6 . _ 

7. _ 

8 . _ 

9. _ 

10. 


NAME_PER. 

1 . _ 

2 . _ 

3. _ 

4. _ 

5. __ 

6 . _ 

7. _ 

8 . _ 

9. _ 


NAME_PER 

1 . _ 

2 . _ 

3. _ 

4. _ 

5. _ 

6 . _ 

7. _ 

8 . _ 

9. _ 


10 


10 



USE ANSWER SHEET 


DO NOT WRITE ON THIS PAPER 


CC: HARDWARE - QUESTIONS 

1. The name for all of the actual machinery of a 

computer system, including the computer, disk 
drive, and monitor, is _. (hardware) 

2. The unit which directs the operation of a whole 

computer system is the _. (CPU) 

3. In the ATARI computer system, this major chip is 

named the _. (6502) 

4. Besides the CPU, how many other major function 
chips are found in the ATARI? (four) 

5. The _ chip controls the video display screen of 

the ATARI. (ANTIC) 

6. ATARI screen graphics are performed by the _ chi 

(GTIA) 

7. Which chip puts characters on the video screen and 
performs calculations? (CPU or 6502) 

8. The chip involved when the joystick is in use 

is the _ chip. (PIA) 

9. The POKEY chip is responsible for _ in the ATARI 

computer system. (sound) 

10. The letters I/O stand for _ and _. (INPUT and 

OUTPUT) 

11. The device which can be used only to INPUT data to 

the CPU is the _. (keyboard) 

12/13.Two devices which are used both to store data and 
programs outside the computer and put them back 
into the CPU as they are needed (INPUT/OUTPUT) 

are the _and the _. (disk drive and 

cassette recorder) 

14/15.Two OUTPUT devices which only display data are 
the _ and the _. (monitor/TV and printer) 



67 


BE SURE TO USE ANSWER SHEET — DO NOT WRITE ON THIS PAPER 
COMPUTER OPERATOR’S LICENSE TEST 

TRUE or FALSE - On the Answer Sheet 
mark the T for TRUE and the F for FALSE. 

1. Pupils will share computers, diskettes, other 
equipment, and books. (T) 

2. You may sit anywhere you wish in the Computer Lab. 

(F) 

3. You may turn on the computer as soon as you sit 
down at it. (F) 

4. You may not visit other computer stations in the 
Lab. (F) 

5. You may open the lid of the computer at any time. 

(F) 

6. The PILOT cartridge must be placed in the slot. (T) 

7. Computers love cookie crumbs and liquids. (F) 

8. If you are tardy, you may not be permitted to use 
the computer. (T) 

9. Computer memory and disks may be damaged by static 
electricity. (T) 

10. You will have a diskette to use for yourself. (F) 

11. You may use a computer after you have passed this 
test. (T) 

12. You must be careful with all electric cords. (T) 

13. Our computers are battery-operated. (F) 

14. You may handle diskettes as you would a piece 
of paper. (F) 


15. You must not touch the video screen. (T) 



68 


BE SURE TO USE ANSWER SHEET — DO NOT WRITE ON THIS PAPER 
COMPUTER OPERATOR’S LICENSE TEST (page 2) 


MULTIPLE CHOICE - On the Answer Sheet 
mark the LETTER of the BEST answer. 


16. You need to _(D)_ before arriving in class. 

(A)Comb hair (B)Wash hands (C)Go to locker (D)A11 three 

17. You may touch a _(C)_ without fear of damaging 

it or the computer. 

(A)Video screen (B)Disk (C) Keyboard (D)Cord or cable 

18. You may NOT _(D)_ in the classroom or in 

the Computer Lab. 

(A)Chew gum (B)Drink (C)Eat (D)A11 three 


19. 

You will 

hav 

e to pay a 

security 

fee 

for use of 


the _(C) 

_ • 






(A)Comput 

er 

(B)Book (C)Diskette 

(D)Disk drive 

20. 

You will 

be 

assigned a 

specific 

_(E)_. 


(A)Seat (B)Book (C)Disk 

ette D)Lab pa 

rtner (E)A11 four 



MATCHING - 

On the Answer 

Sheet 


ma 

rk 

the LETTER 

of the cc 

>rrec 

t answer. 

21. 

The most 

fra 

gile piece 

of 

(A) 

PILOT cartridge 


equipment 


(E) 


(B) 

Cords and cables 

22. 

This may 

harm disks and 

the 

(C) 

Keyboard 


computer. 


(D) 


(D) 

Static electricity 

23. 

You must 

be 

careful not 

to 

(E) 

Disk drive 


unplug th 

em. 

(B) 




24. 

This goes 

in 

the slot under 




the lid. 


(A) 




25. 

Sticky hands 

make it di 

fficult 




to use this. (C) 



69 


COMPUTER OPERATOR'S LICENSE 
EXPLORATORY LEVEL 
THIS IS TO CERTIFY THAT 

HAS PASSED THE COMPUTER OPERATOR'S TEST 
AND IS NOW LICENSED TO OPERATE 
AN ATARI COMPUTER 

AND IS HEREBY DECLARED TO BE AN OFFICIAL 
COMPUTER EXPLORER 

DATE APPROVED BY 

COMPUTER OPERATOR’S LICENSE 
EXPLORATORY LEVEL 
THIS IS TO CERTIFY THAT 

HAS PASSED THE COMPUTER OPERATOR'S TEST 
AND IS NOW LICENSED TO OPERATE 
AN ATARI COMPUTER 

AND IS HEREBY DECLARED TO BE AN OFFICIAL 
COMPUTER EXPLORER 

DATl APPROVED BY 



70 


CC Answer Sheet - A COMPUTER CAN 

1. Keep inventory records for a market. 

TRUE - data processing is used by many stores, 
libraries, hospitals, etc. to keep track of 
information about inventory, books, patients, etc. 

2. Plan the flight plan for the space shuttle. 

TRUE - the computers can take all of the data fed 
in by the scientists, compile it, and present all 
kinds of different possible plans, recommending the 
one with the least number of drawbacks. 

3. Stop a car when someone runs out in front of it. 

FALSE - Equipment has been invented to aid in the 
prevention of injury to passengers in a car which 
must make a sudden stop (like the air bag) but 

no one has invented a computer which can see 
someone run out in front of a car or which can 
predict when it will occur. "Kit", from Knight 
Rider, just is not here yet! 

4. Help design a safer car. 

TRUE - help test a variety of possible 
improvements to car design by the use of simulations 
to test various changes and additions to equipment. 

5. Select stocks which will go up or down next week. 

FALSE - can keep track and show previous patterns. 

6. Help police to identify a criminal. 

TRUE - can locate in files similar features, patterns, 
identi-kit pictures, or even send photos across country. 

7. Tell whether a person is guilty or innocent. 

FALSE - requires judgment not available on computers. 

8. Keep track of a family bank account. 

TRUE - but won’t control spending. 

9. Decide what pet a family should buy. 

TRUE - can feed in facts about the lifestyle of the 
family and match it with facts about particular pets. 

10. Help decide what type of dog would match the lifestyle 
of a certain family. 

TRUE - same as #9 above. 

11. Help a doctor diagnose an unusual disease. 

TRUE - doctor can feed in all symptoms and facts and 
they can be matched in the large medical databanks. 



71 


CC Answer Sheet - A COMPUTER CAN Page 2 

12. Tell you which of three mysteries is the best one to 
read. FALSE - can tell how many books were sold 

or how previous books by a author were rated by 
critics, but cannot tell you which one you will 
enjoy. 

13. Arrange stories and picures on a newspaper page. 

TRUE - word processors and other software packages 
like Print Shop and News Room can arrange the page. 

14. Gather the facts for a newspaper reporter. 

FALSE - can store them but cannot go out and get them. 

15. Make it easier for a newspaper reporter to type 
his story. 

TRUE - word processors make writing and editing easy. 

16. Allow a newspaper reporter to call in his typed story 
from a phone 1000 miles away. 

TRUE - Modems allow information to be sent from one 
computer to another anywhere phone lines can reach. 





72 


WEEK 1 - DAY 4 

1. Computer Operator’s License Test retakes 

Those who passed yesterday will do a word search while 
others are retaking the test. These retakes will 
not be corrected in class. 

2. Notebook organization: set up and first entries made 
Pupils will copy the Table of Contents. It will 
become the first page of their notebook and will 
provide the order in which all papers will be filed. 

TABLE OF CONTENTS 

1. Class Rules Sheet 

2. Computer Rules Sheet 

3. Computer Operator's License 

4. Concept Sheets (copies or originals 

as the teacher has determined) 

5. Class Notes (may include Information Sheets) 

6. Term Glossary (computer terminology) 

7. Command Glossary (PILOT commands) 

8. Classwork 

9. Homework 

10. Programs 

11. Tests and Quizzes 

First entries for the notebook will be the following 
Glossary terms. Pupils will copy the words and 
their definitions and place them in the proper 
notebook section. 

3. A Computer Is... information sheets provide more 
discussion material which can be used today or 
tomorrow depending upon time availability. 

GLOSSARY TERMS: 

Computer 

Data 

Central Processing Unit (CPU) 

ANTIC chip 
GTIA chip 
POKEY chip 
PIA chip 
Input 
Output 
Programmer 



INSTRUCTOR NOTES 


Glossary Terms: 

1. Computer - a machine which reads, stores, and processes 
data. It operates mainly by making comparisons between 
one piece of data and another. 

2. Data - refers to facts or pieces of information 
which are stored in the memory of a computer. 

3. Central Processing Unit (CPU) - the main chip of a 
computer. It controls all operations of the 
computer. In the ATARI it is the 6502 chip. 

4. ANTIC chip - the chip in the ATARI which controls the 
action on the screen while the computer is operating. 

5. GTIA chip - the chip in the ATARI which controls the 
screen and color display and the 256 possible colors. 

6. POKEY chip - the chip in the ATARI which controls the 
four-voice sound and allows sound effects as well 

as music to be produced. 

7. PIA chip - the chip in the ATARI which controls the 
joystick ports and allows the use of joysticks, paddles, 
graphics tablets like the Koala Pad, and light pens. 

8. Input - feeding information into the computer by use of 
the keyboard, a disk drive, or a joystick or 
graphics tablet. 

9. Output - getting information from the computer and 
having it printed on the screen, a printer, or sent 
to the disk drive. 

10. Programmer - a person who writes the instructions 
which tell a computer what to do and who writes 
them in a language that the computer can understand. 



74 


INFORMATION SHEET 
What is a Computer? 

What kind of tools did the cavemen have to help them 
work? A hammer to pound in nails? A shovel to dig and 
plant? A telescope to see far into space? Or a microscope 
to see the invisible world in a drop of water? 

No - he had to pound with his hands and he did not 
have nails. But man is able to pound harder and longer 
with a hammer. And nails have a great number of uses. 

No - he did not have a shovel, but he soon learned to 
use a stick to make a hole. Later he invented the shovel, 
the plow and, finally, the tractor. 

No - he could only see those stars that were bright in 
the night sky. With a telescope, now man can see stars and 
even galaxies which were never even imagined by cavemen. 

And man can travel to the moon, something the caveman might 
have dreamed about. 

No - a drop of water was only a drop of water. 

Cavemen did not know about the billions of microscopic 
organisms which live all around us in the water, air, and 
soil. 

Over the centuries man has invented many tools to help 
him with his work. But man needed to invent tools which 
could extend the work of his brain, not just his hands and 
eyes. He invented the abacus, the adding machine, and then 
the calculator. And in the last thirty years he invented a 
tool which not only helps him do mathematics but thousands 





INFORMATION SHEET 


What is a Computer? Page 2 
of other jobs as well. This tool is the computer. 

But a telescope is useless without someone looking 
through it to see the stars. And a shovel does not dig a 
hole and plant a seed. And so, a computer must have 
someone to run it, to tell it what to do, and to use the 
results of its work. 

The computer is a wonderful tool to extend our brains. 
However, it cannot do everything our brains can do, and it 
cannot do anything at all without man to write a program 
and feed in information. 

A computer does not feel happy or sad because it has 
no emotions. It cannot jump to a conclusion from lots of 
little facts and ideas. It cannot create new ideas from 
the best parts of old ones. It doesn't have ideas of its 
own at all. 

So why is a computer so wonderful? Because it can do 
some of the simpler jobs our brains can do. More 
importantly, it can do some of them thousands of times 
faster than our brains can! 

All information is stored inside the computer in the 
"memory”. Information or facts which are put into a 
computer are called data. Any information which is stored 
in a computer will not be forgotten by the computer. It is 
always there to be used over and over. 

A computer cannot think. It cannot see that one thing 



INFORMATION SHEET 


What is a Computer? Page 3 

is true and another is false. What a computer can do is to 
compare one fact, or piece of data, with another fact. If 
the data is numbers, the computer can tell which is bigger 
or smaller. It the data is made up of letters, the 
computer can even put them in alphabetical order. A 
computer can also sort many pieces of data and put together 
the things that are alike. 

Data in a computer memory can be printed on a video 
screen or a sheet of paper. A computer operator can print 
out the exact data which is needed; your report card, a 
bank statement, or a receipt from the market. 

This class is about the ATARI computer. The are special 
instructions necessary to operate this computer will not 
work on other kinds of computers. You will learn a 
computer language which will enable you to run the ATARI. 

The ATARI is called a microcomputer because it is so 
small. Many businesses and universities have computers 
too, but theirs have to do many more jobs than the ATARI so 
they are usually much larger. Some of the biggest 
computers are so huge, they fill an entire room! 

The ATARI uses a variety of computer languages. We 
will be using PILOT because it is an easy language to 
learn. The computer also uses BASIC, PASCAL, FORTH, LOGO, 
and LISP. Some bigger computers use languages called 
FORTRAN or COBOL as well as these. 




77 


INFORMATION SHEET 
A Computer Is... 

First we must remember what a computer is not. It is 
not able to think or feel. It cannot do anything on its 
own. It must be told by a person exactly what to do and 
how to do it. The PROGRAMMER is a person who writes out 
the instructions to tell the computer exactly what must be 
done. The programmer must tell the computer in a special 
computer language because a computer cannot understand 
English. If we gave the computer an IQ test, it would get 
a score of zero. It cannot think or feel or even guess. 

It cannot come up with new ideas the way a human can. 

But what can a computer do that makes it special? It 
can organize information which has been programmed into its 
memory. It can remember long lists of names and numbers. 

It can do complicated math problems if a person has told it 
the formulas to use. And, very importantly, it can do 
these things more accurately and thousands of times faster 
than any human on earth. A computer can be told to 
multiply 25244643567 by 29586749 and then divide the answer 
by 30585 and add 13848058204 to that answer and, finally, 
subtract 33 and come up with the answer faster than it took 
you to read the words "a computer can be told to". 

So what is a computer? A computer is a tool for 
organizing, processing, and storing information. Remember, 
information for or used by a computer is called data. 



INFORMATION SHEET 


A Computer Is... Page 2 

The computer has its own languages but they can be 
written in many different forms. The computer reads, 
processes, and stores data which comes from such sources as 
punch cards and long rolls of punched tape. Another source 
is the Product Code (or bar code) which is a series of 
lines and numbers in a small rectangle on packages at the 
store. Many of you have been in a market where the checker 
passes this Produce Code over a panel, a bell rings, and 
the price appears on a little sign board. That cash 
register is really a computer. And the bank uses computers 
which read information in the form of a line of numbers 
printed along the bottom of a check. And every one of you 


has taken o 

ne of the tests which 

uses a 

Sc 

anTron answer 

sheet. You 

had to use a special 

pencil 

to 

enable the 

computer to 

be able to read your 

answer. 




A c 

omputer is a 

tool for us 

to learn 

to use. 

It 

can 

make the 

work we do 

much easier. 

but only 

if we are 



familiar 

with how it 

works. We 

must lear 

n to talk 

to 

the 


computer in one of its own languages. 


**(instructor - Try to show examples of each form of data. 
Most are easily obtainable.) 



CC: First Computers; read Computer 
History; discuss computers then 
and now; CC: Computers Today 

Keyboard activity worksheet; 
Worksheet: More About Memory 

Keyboard worksheet; begin keyboard 
graphics practice; Prepare keyboard 
graphics charts; Glossary terms. 

Correct CC: Screen Editing; Correct 
Keyboard Activity Worksheet; 
Introduce keyboard graphics design 
project. 

Screen editing activity worksheet; 
Off-computer time - begin working on 
Keyboard graphics design project. 



80 


WEEK 2 - DAY 1 

1. CC: First Computers 

(this CC will take longer than usual - perhaps 
20 minutes) 

2. Correct CC: First Computers 

3. Discuss Computers now and then 

Read Computer History Information Sheet to provide 
further discussion material. 

Show vacuum tubes, transistors, chips, etc. if 
they have been obtained. It not, try to show 
pictures of each. 

4. If time allows, introduce the CC: Computers Today 



CONCEPT SHEET: FIRST COMPUTERS 


The first real electro-mechanical computer was built 
in 1944 at Harvard University. This computer was called 
the MARK 1 and was invented by Howard Aiden. It occupied a 
room the size of the school gymnasium and required a 
tremendous amount of air conditioning to keep it cool. It 
was so hot because it contained thousands of glass vacuum 
tubes (think of electric light bulbs) which became very hot 
when they were on. They burned out frequently and had to 
be replaced. This computer accepted data from punched card 
and printed the results on an electric typewriter. This 
computer could do 3 calculations per second, but it took 
many hours to program it by turning thousands of switches 
on and off in the correct patterns. 

The MARK 1 was followed by ENIAC and later UNIVAC. 

Both of these computers were much faster than the MARK 1 
because the moving parts inside the computer has been 
replaced by electrical circuits. These new computers could 
do a thousand calculations per second. But, they cost 
hundreds of thousands of dollars to build, weighed 30 tons, 
took up a whole room, and required air conditioning to cool 
down the heat from the vacuum tubes. They required a 
tremendous amount of electricity to run, and they continued 
to break down often because their vacuum tubes burned out. 
ENIAC contained 18000 vacuum tubes and they burned out at a 
rate of one every seven minutes. But, when it worked, 

ENIAC could add 5,000 numbers a second. 





62 


CONCEPT SHEET: FIRST COMPUTERS 
QUESTIONS 

1. What was the first true computer called? (MARK 1) 

2. Where was it built? (Harvard University) 

3. How big was the MARK 1? (as a gymnasium) 

4. How fast was it? (3 calculations per second) 

5. What made the ENIAC and UNIVAC different from 
the MARK 1? (all electric circuits inside) 

6. Why did all of these computers require so much 
air conditioning? (heat from thousands of vacuum 
tubes) 

7. How fast were these new computers? (performed 
thousands of calculations per second) 

8. How many vacuum tubes were necessary to run ENIAC? 
(18,000) 

9. How often did a vacuum tube burn out? (1 every 7 
minutes ) 

10. What did the ENIAC do that made it important? 
(could add 5,000 numbers per second) 



COMPUTER HISTORY 


The MARK 1, ENIAC, and UNIVAC are called the First 
Generation computers. They were built in the 1940’s and 
1950’s. Around 1960 a new invention was to make a big 
change in computers. The transistor was invented to 
replace the vacuum tube. The transistor was much smaller, 
much cooler, and much longer lasting than the vacuum tube. 
The computers which were made with these transistors are 
called the Second Generation computers. They were much 
smaller than the First Generation computers. They were 
also cheaper to build and about 1000 times faster. They 
could perform 10,000 calculations per second. 

As other things began speeding up in the computer 
world, new inventions sped up the evolving of the computer. 
The Third Generation computers began showing up about 1965 
when scientists found a way to make very tiny transistors 
and to combine them together into an Integrated Circuit 
which could be mass-produced at a low cost. These new 
integrated circuits were so small that computers were built 
that were only a few feet square. They cost less to build 
and they could perform 1 million calculations per second! 
These computers were small enough and inexpensive enough 
that they could be bought by thousands of companies around 
the world. 

Our modern computers are called the Fourth Generation 
computers. They were first build in the raid-1970’s when 




B4 


COMPUTER HISTORY Page 2 

scientists developed a way to put thousands of integrated 
circuits on one tiny chip. This chip, made of silicon, is 
only l/8th of an inch square, but it contains thousands of 
circuits. This chip is called the Integrated Circuit Chip 
or ICC. Computers built with these new chips can perform 
over 10 million calculations in one second and the 
computers built from them can be small and inexpensive. 

Today computers are built which are smaller than 
calculators and may cost less than one hundred dollars. 

They use very small amounts of energy and may even been run 
by batteries. Computers today are usually grouped into 
three types according to the amount of MEMORY they possess. 





85 


CONCEPT SHEET: COMPUTERS TODAY 

Computers today are grouped into three categories 
based mainly upon the size of their memory storage. The 
larger the memory of a computer, the more data it can store 
and use. Usually a computer with more memory is larger and 
more expensive to buy, but the prices are changing so fast 
today as memory costs become cheaper that this may not be 
true very much longer. 

The three types of computers are mainframe, 
minicomputer, and microcomputer. The mainframe computer is 
the largest and the microcomputer (or micro) is the 
smallest. 

A mainframe computer costs hundreds of thousands of 
dollars or more. It will fill up an entire room. It can 
store tremendous amounts of data at one time and can handle 
more than 100,000,000 instructions per second. They are 
used by large organizations like the government, 
universities, big businesses, the weather bureau, or even 
international banks. These computers can handle many large 
and different jobs at the same time. They can be used by 
many people at the same time (called time sharing) because 
many separate computer stations or terminals can be hooked 
up to the mainframe. These terminals can even be located 
many miles away from the mainframe computer and connected 
to the computer by a telephone line. Mainframes are also 
frequently used to communicate with other computers located 
in other places. This is called telecommunication. 



86 


CONCEPT SHEET: COMPUTERS TODAY Page 2 

The next group of computers are called minicomputers. 
They are usually about the size of a desk or refrigerator. 
They are much less expensive than a mainframe, costing 10 
to 100,000 dollars. They cannot handle the amount of data 
and jobs that a mainframe can, but they can do one big job 
or several small ones at the same time. Several terminals 
can be connected to a minicomputer. They are used by 
schools to handle attendance and record keeping, by 
companies to handle payrolls, accounts, and inventory. 
Telecommunications allows a minicomputer to communicate 
with a mainframe and use data from its data banks. 

The smallest and least expensive computers are the 
microcomputers. Micros can be purchased for any price 
from 50 to 5000 dollars. They do not have the memory of 
the larger computers and only be used to do one job at a 
time. They can handle finances for a family, programming 
activities for a class, word processing for an author, and 
many other jobs (including game playing). They can also 
communicate with other computers anywhere a telephone line 
reaches. But, many individuals do not buy the modem 
equipment necessary to communicate with other computers. 

All of these types of computers are built around the 
integrated circuit chip. A computer will usually have one 
microprocessor chip and several memory chips. These chips 
have made it possible to build the small but powerful 
computers of today. 



87 


CONCEPT SHEET: COMPUTERS TODAY 
QUESTIONS 

Please use Answer Sheet - Do NOT write on this paper. 

1. A computer which cost $20,000 and is being used by a 

local clothing store to keep track of inventory and 
billing, would be a _. (mini) 

2. Most home computers, ranging from $50.00 to $5,000 

dollars, and being used to play games, keep track 
of budgets, and for lessons, are _. (micros) 

3. A room-sized, million dollar computer, storing 

and processing huge amounts of data, is called 
a _. (mainframe) 

4. When computers send information to one another it is 

called _. (telecommunication) 

5. When many people are using one computer to do 
many different jobs at the same time, is it a 
_ computer, (mainframe) 

6. When many people are using one computer to do 

many different jobs at the same time, this is 
called __. (time sharing) 

Which type of computer would MOST LIKELY be used for each 

of the following? 

7. aiding NASA in plotting the course of a spaceship, 
(mainframe) 

8. teaching a lesson in math at school, (micro) 

9. keeping track of purchases for one supermarket, (mini) 

10. ke,eping track of purchases for a chain of 
supermarkets. (mainframe) 





88 


WEEK 2 - DAY 2 

1. Keyboard Activity Worksheet 

This is a 2 day computer lab activity. (If the 
class is being divided into two groups which 
alternate on the computers, this activity may 
require 3 or 4 days to complete.) 

2. Go over the definitions on the first two pages, 
discussing and filling in the blanks. 

3. Discuss the instructions for the keyboard activity. 

4. As students work on the assignment, circulate and 
provide hints, aid, etc. as needed. 

5. If only half of the class is working on the 
computers at one time, have them work for half of 
the period and then reverse to the following. 

6. CC: Computers Today (if not done yesterday) 

7. Worksheet: More About Memory 



89 


KEYBOARD WORKSHEET - PAGE 1 NAME_PER_ 

When we turn the computer on without a _(PILOT)_ 

cartridge in the slot, the computer comes up in _(MEMO PAD 

if 800, HELP if 800XL)_ Mode. 

DEFINITIONS: 

1. CURSOR: The white square that moves on the screen is 

called the _(cursor)_. It shows you where the 

computer will print the next letter or symbol you type. 

2. CONTROL (CTRL) and SHIFT KEYS: _(must always 

be used with another key. Hold down the CTRL or SHIFT 
and then press the other key)_. 

3. RETURN KEY: It is used to _(enter)_ data into the 

computer's memory. The computer will not recognize, 
acknowledge, or perform any activity until it has 

been ENTERed. Hitting _(RETURN)_ tells the computer 

that you are finished. Then it interprets your 

line and gives an _(error)_ message if it does not 

understand what to do with it. The RETURN KEY must be 
used when we have the _(PILOT)_ cartridge inserted. 

4. TAB KEY: It is used to indent paragraphs and to 

make _(columns)_ across the screen. 

5. ESCAPE (ESC) KEY: This is left over from the old 

__(teletype)_ machines. It is NEVER used while 

holding down another key. It is always used in 

_(programs)_ to suspend activities like "clear 

screen". "ESC" + "CTRL" + "CLEAR" will cause a 

(clear screen)_ to occur whenever the computer 




90 


KEYBOARD WORKSHEET - PAGE 2 NAME_PER_ 

in a program. It does nothing when typed except to 
put a curved _(arrow)_ on the screen. 

6. BREAK KEY: Hitting it beings activity to a _(halt)_. 

It stops the program _(RUN)_. Be careful about 

hitting it by accident as it can ruin your RUN. 

7. START KEY: It is often used to (begin) RUNning 

a commercial program. 

8. SELECT KEY: It is often used to choose a particular 

_(level)_ or type of activity in a commercial program. 

9. OPTION KEY: It is also used in commercial programs 

to make _(selections)_. 

10. SYSTEM RESET: When it is hit the screen clears and the 

computer is _(reset)_ almost to the way it was when 

you first turned it on. This can create _(problems)_ 

when RUNning programs. It can wipe out PILOT, your 
program, or even a commercial program. Do NOT press 

it unless told to do so by the _(teacher)_. 

INSTRUCTIONS FOR KEYBOARD WORKSHEET; 

Be sure to hit each key alone, then press and hold the 
SHIFT KEY down while hitting the same key, and finally, 
press and hold the CONTROL KEY down while hitting the same 
key. Be sure to record the results of each try in the 
correct blank on the worksheet. Only then should you move 

repeating the entire procedure. 


to the next key, 



91 


KEYBOARD WORKSHEET - PAGE 3 NAME_PER 

KEYBOARD KEY SHIFT + CONTROL + 

LETTER ALONE KEY KEY 

A _ _ _ 

B _ _ _ 

C _ _ _ 

D __ _ _ 

E _ _ _ 

F _ _ __ 

G _ _ _ 

H _ _ _ 

I _ _ _ 

J _ _ _ 

K _ _ _ 

L _ _ _ 

M _ _ _ 

N _ _ _ 

0 


P 

Q 

R 

S 

T 

U 

V 

W 




KEYBOARD WORKSHEET 


PAGE 4 


NAME 


PER 


KEYBOARD KEY SHIFT + CONTROL + 

LETTER ALONE KEY KEY 

X _ _ _ 

Y 


Z 


KEYBOARD KEY SHIFT + CONTROL + 

NUMBER ALONE KEY KEY 


1 

2 

3 

4 

5 

6 

7 

8 
9 
0 


REMEMBER: If you do not see anything happen when you hit 
the key, be sure to type several letters, especially for 
those keys marked with **. 

KEYBOARD KEY ALONE SHIFT + KEY CONTROL + KEY 

;/: _ _ _ 

,/[ _ _ _ 

./] _ _ _ 


//? 

** yiL/HI 


This kind of key is called a toggle - hitting 
the key one time turns it on, the second time 
turns it off. This is the INVERSE KEY 



KEYBOARD WORKSHEET - PAGE 5 NAME PER 


KEYBOARD KEY ALONE SHIFT + KEY CONTROL + KEY 

+/\/«- _ _ _ 

*/v-» _ _ _ 

-/_/* _ _ _ 

=/l/* _ _ _ 

** CAPS _ _ _ 

Another toggle key. When the computer is 
turned on it will be in Upper Case. 

In order to test each of the next four keys, you must have 
several rows of characters on the screen. Use the CTRL KEY 
+ ARROW KEYS to place the cursor over a character in the 
CENTER of a line. The line chosen should be a central 
line, not the bottom one. Be sure to add more lines and to 
position the cursor again before trying the next key. 


BACK S/DELETE 


SPACE BAR 


>/INSERT 


</CLEAR 


TAB/SET/CLR _ _ _ 

DEFAULT (when computer is turned on) is 
automatic 5 tabs. The first is 6 spaces 
in from the left, the rest are 8 spaces, 
over. Try them first (TAB KEY alone), then 
the SHIFT + TAB KEY to try to set new use 
tabs, and CTRL + TAB KEY to remove tabs. 

CTRL + ANY LETTER KEY = _ 

REMEMBER: CTRL + CAPS will put the entire 
keyboard into Graphics character mode. 
Using SHIFT + CAPS once will return the 
normal lower case keyboard, twice will 
return the normal upper case keyboard. 

For those of you who were speedy and have time left: DRAW 
a picture on the screen using the keyboard graphics 
characters, letters, numbers, etc. as you choose. Move 
around the screen using the CTRL + ARROW KEYS - do NOT 
use the RETURN key. 




WORKSHEET: MORE ABOUT MEMORY 


A computer has two kinds of memory: ROM and RAM. 

ROM means READ ONLY MEMORY. This kind of memory can 
be used but not changed in any way. It was programmed into 
the computer at the time that it was made. ROM is also 
called permanent memory because it will always be there 
when the computer is turned on. ROM makes the computer 
operate. It tells the computer how to start itself up when 
it is turned on; how to interpret a language like PILOT; 
how to add and subtract; and how to check on the keyboard 
and put characters on the screen when you hit a key 

ROM cannot be changed unless you open up the computer 
and remove the ROM chips which contain this memory. 
Sometimes a computer is up-dated in this way. One other 
thing that can be done is to buy a ROM cartridge like 
PILOT. This has a ROM chip in it that becomes part of the 
computers operating ROM when the cartridge is inserted in 
the slot, but is removed when the cartridge is removed. 

RAM means RANDOM ACCESS MEMORY. This is a temporary 
storage area for memory. Everything which you type into 
the computer or load from a diskette or cassette tape goes 
into this RAM area of the computer. New data and programs 
are organized and sorted in RAM. As long as the computer 
is turned on, this data will remain in RAM and the computer 
will know what to do with it. BUT, when the computer is 
turned off, the RAM is erased just like a blackboard. 



WORKSHEET: MORE ABOUT MEMORY Page 2 
If you had typed a program into the computer, it would 
now be gone. The only way to save a program or other 
information stored in RAM is to save it on a disk or a 
cassette tape. Then the saved data could be reloaded into 
the computer at another time. 

Every computer has a certain about of RAM or available 
memory storage space. Memory size is indicated by the 
symbol "K". This stands for kilobyte. A kilobyte is 1000 
bytes and one byte is the amount of memory space it takes 
to store one character, like the letter "a" or the number 
"6" or even just a blank space between words. Most 
microcomputers have between 48 and 64 K of RAM, but more 
memory can be purchased separately and added. 



WORKSHEET: MORE ABOUT MEMORY 


CC: MEMORY - QUESTIONS 

Copy each sentence. For #1-12, use RAM or ROM to fill in 
the blank. 

1. What you type on a computer’s keyboard is stored 

in _. (RAM) 

2. Memory that cannot be erased is called _. (ROM) 


3. Memory that disappears when you turn the computer off 

is called _. (RAM) 

4. Memory programmed into the computer at the factory 

is called _. (ROM) 

5. You can store data from _ on tapes or disks. (RAM) 

6. The programming a computer uses for performing 

arithmetic is stored in __. (ROM). 

7. Programs the user writes for the computer are 

stored in __. (RAM) 

8. The kind of memory a programmer changes when 

rewriting a program is _. (RAM) 

9. The kind of memory which can be saved on a diskette 

is _. (RAM) 

10. is temporary storage. 

11. is permanent storage. 

12. The memory in a PILOT cartridge is _. (ROM) 


Short Answer: Complete each sentence. 

13. ROM stands for _ 

14. RAM stands for _ 


15. ROM is used for the regular activities of the 

computer, such as: _, _ 

and 



WEEK 2 - DAY 3 


1. Continue Keyboard Activity Worksheet 

2. Begin keyboard graphics practice. 

Students who finish the assignment early are 
instructed to begin placing letters, keyboard 
graphics characters, numbers, and symbols on the 
screen in such a manner as to form a picture or 
pattern of their choice. 

This practice will help students to understand the 
keyboard graphics project which will be begun 
tomorrow in the classroom. 

3. Keyboard Graphics Charts 

Students who are not at the computer and who have 
finished the CC and the Worksheet from yesterday 
are to begin making their own copy of the keyboard 
showing the graphics characters as well as the 
letters. The chart is to be copied from the back 
of the Student Pilot Manual. 

4. Students will also add to their Term Glossary today. 

GLOSSARY TERMS: 
memory 
RAM 
ROM 

mainframe 

minicomputer 

microcomputer 

chip 

byte 

Kilobyte 

hardware 




98 


INSTRUCTOR NOTES 

Glossary Terras: 

1. memory - everything that the computer knows, 
including the language it speaks, the facts you tell 
it, and the instructions it uses to do its work. 

There are 2 kinds of memory - RAM and ROM. 

2. RAM - (Random-Access-Memory) - temporary memory in 
the computer. This is the memory where everything 
is stored that you type into the computer or load 
from a disk or tape. It is erased completely and 
automatically when the computer is turned off. 

3. ROM - (Read-Only-Memory) - permanent memory which 
has been placed in the computer before it leaves the 
factory. This memory cannot be changed or erased. 

4. mainframe - tremendously powerful computers which 
occupy an entire room. They are used by large 
universities, government agencies, and businesses. 

Many people can be doing different jobs at the 
same time. 

5. minicomputer - a computer the size of an entire desk. 

It is used by average size businesses to keep 

track of inventory, payroll, etc. It can have a few 
people doing different jobs at the same time. 

6. microcomputer - computer small enough to sit on a desk. 
Many are even small enough to carry in a briefcase. 
These are called personal computers and are purchased 
by individuals to do one job at a time. 

7. chip - a tiny piece of silicon which contains the 
thousands of instructions necessary to run a computer. 

8. byte - the amount of memory it takes to store one 
character (letter, number, symbol) inside the computer. 

9. Kilobyte - approximately 1000 bytes (1024) make up 
1 K of memory. This is the way computer memory is 
described. Most microcomputers have between 

48 and 64 K of RAM memory (or total memory of 
65 to 96 K). 

10. hardware - refers to all of the machinery which 
makes up a computer system - computer, disk drive, 
monitor, printer, modem, etc. Do not refer to the 
things which hold data - diskettes, tapes, etc. 

These are called Software. 



99 


WEEK 2 - DAY 4 

1. Correct CC: Computers Today 

2. Correct Keyboard Activity Worksheet 

If the class is in a classroom, a computer with 
a 25-inch monitor will be a great help in correcting 
this worksheet and illustrating each correct answer, 

3. Introduce Keyboard Graphics Design Project. 

This project will take 3-5 days. Introduce it today 
and use off-computer time to have students begin 
their drawings. If students are not alternating 
computers, place this activity after the Screen 
Editing activity presented tomorrow. 




KEYBOARD GRAPHICS DESIGN PROJECT 

This will be a 3 to 5 day project depending upon the 
amount of computer time the students have to type their 
graphics design programs on the screen. 

When students are alternating on the computer it will 
require more time. Students need to type as individuals, 
but one student can dictate the characters to type while 
the other types it in. 

This project requires one sheet of graph paper for each 
student. 4 squares to the inch is best as it will closely 
approximate the screen and is easier to work with than 10 
squares to the inch. 

Each student must have a copy of the ATARI keyboard, 
including the graphics characters. Students may have made 
their own copy of it during their off the computer time, or 
the teacher may give each student a xerox copy. 

Have students outline boxes on the graph paper. Each 
box is to be 10 x 10 squares. Place boxes 4 squares in 
from the left side, and 4 squares apart from each other. 6 
boxes will fit on each side of the graph paper. 

Each pupil is to design a SIMPLE picture within each 
box. The picture will consist of letters, symbols, graphics 
characters, or numbers. 

There is a wide latitude in these pictures but each 
must meet certain criteria: 

10 x 10 square maximum 
one character per square 

must use some keyboard graphics characters 
must use some inverse characters 

Drawings are to be completed in class and turned in for 
inspection by the teacher to make sure that the criteria 
are met. 

(When we have learned to use the TYPE (T:) command in 
PILOT, next week, we will turn the drawings into actual 
programs and run them on the computer. 

This project will: 
reinforce keyboard knowledge 

provide practice in screen editing techniques 
introduce PILOT 

provide an interesting first programming experience 



101 


KEYBOARD GRAPHICS PROJECT NAME PER 


DAY 1: Draw pictures in 10 x 10 squares. 

DAI 2: Add LINE NUMBERS and T: (type) to each line to make program. 

DAY 3i Put programs onto screen and RUN them; Learn to move picture 
to right by adding spaces after T: ; Learn function of the 

1 T: 

2 T: 

3 T: 

4 T: 

5 T: 

6 T: 

7 T: 

8 T: 

9 T; 

10 T: 

empty T: line (leaves blank line without characters on screen); 
Learn to use REN to remumber the programs as 10,20,30».» then 
add 5, 15, 25,... to insert spacing lines or additional lines 
of program. 


10 T 
20 T 
30 T 
40 T 
50 T 
60 T 
70 T 
80 T 
90 T 
100 T 

Try duplicating lines within programs: cursor to line 20, 
change it to line 22 resulting in two identical lines when 
the program is Listed on the screen. 









102 


WEEK 2 - DAY 5 

1. Screen Editing Activity Worksheet 

A laboratory activity to further the study of the 
keyboard and to introduce the concepts of screen 
editing on the ATARI. 

The activity worksheet takes the students 
step-by-step through a series of editing procedures. 

2. If the class is alternating: 

Off-computer time is used to continue and 
complete the Keyboard Graphics Design Project 
drawings. A total of twelve drawings may be 
produced by very proficient students. They will 
probably only have time to turn one drawing into a 
computer program, but they should have a variety of 
drawings to allow selection of the most appropriate. 



SCREEN EDITING WORKSHEET NAME_'_PER_ 

Use SCREEN EDITING to make corrections on the screen. You 
can remove errors, add forgotten items, and move things 
around. During this worksheet, use the BREAK KEY or CTRL + 
ARROW KEYS to move the cursor to the next line. Do NOT use 
the RETURN KEY. 

1. Make an alphabet of 2 of each letter. (Notice it is in 

__(upper) case and that it wraps around to the next 

line - no carriage return is necessary at the end of 
the line.) Hit BREAK at the end of the entire alphabet. 

2. Use the CAPS KEY to make another double alphabet. 

This one will be in _(lower)_ case. 

Use SHIFT + CAPS to exit lower case. 

3. Hit INVERSE KEY and make a third double alphabet, 

this time it will be in _(inverse letters)_. 

Hit the INVERSE KEY one more time to return to normal. 

4. Press the CTRL KEY and hit the CAPS key. Type a fourth 
double alphabet. Boy is this one different!! It is in 

_(keyboard graphics characters)_. Remember to hit 

CAPS once to get back to the regular characters. 

5. Use the CTRL KEY + the four arrow keys to move the 
cursor all around the screen. Move the the upper left 
corner, the upper right, the lower right, the lower 
left. Now, aim straight off the top of the screen. 

What happened? _(cursor appeared at bottom of the 

screen)_. Try going off the left or the right. Try 

the bottom. This is called _(wrap-around)_. 



SCREEN EDITING WORKSHEET - Page 2 NAME_PER_ 

6. Cursor up to the UPPER CASE alphabet. Change the 
second letter in each pair to an X. Use the arrow 
with the control key to place the cursor, then just 
type over the old letter. Your alphabet should look 
like this: AXBXCXDXEXFX... when you are finished. 

7. Go to the LOWER CASE alphabet. Eliminate 1 letter 
of every pair. Just typing over that letter will 
remove it, but there would be a hole. So, use the 
CTRL KEY + DELETE/BACK S to get rid of the spaces. 

Your alphabet should read: abcdef.... 

8. CAREFUL. Cursor to the inverse video alphabet. SHIFT 

+ DELETE/BACK S will _(remove)_ an entire LOGICAL 

LINE. This may be more than one physical line. A 
logical line ends with RETURN or BREAK. 

9. Move to the first letter of one of the remaining 

alphabets and try the SHIFT + INSERT KEY. This will 
_(add)_ an entire line below the cursor. 

10. Move to the short alphabet. Add the second letter back 
into it. Use the CTRL + INSERT to do this. Place the 
cursor over the "b" to insert the space, and type a 
second ’'a". Use CTRL + arrow to move over the "b". 

You should end up with: aabbccddeeff... again. 

11. CLEAR the screen. Use SHIFT + CLEAR or use CRTL + 
CLEAR. They will both accomplish the same thing. 

12. Use keyboard graphics to draw a simple picture. 



WEEK 3 


CC: Screen Editing; Introduction to PILOT; 
Continue keyboard graphics project 

CC; Introduction to PILOT; Begin programming 
(TYPE, LIST, RUN, NEW); Turn keyboard 
graphics project into computer program. 

Keyboard/Screen Editing Quiz; Type 
in keyboard graphics project 
programs 

Complete typing in keyboard graphics project 
programs; Continue TYPE; Introduce 
REN, Deleting program lines. Editing 
program lines, Amazing Multiple Line 
Trick, LISTing partial programs, Remark; 

If time; demonstrate printer usage by 
LISTing a program. 

Continue to Reinforce TYPE; Introduce 
backslash (\), ACCEPT, and variables 



106 


WEEK 3 - DAY 1 


1. CC: Screen Editing 
Do and correct. 

2. Introduction to PILOT 
(See Instructor Notes) 

Introduce: 

TYPE 

RETURN 

Executive Commands 

Program Commands 

Program 

Line Numbers 

LIST 

NEW 

3. Continue Keyboard Graphics project if time. 

4. GLOSSARY TERMS: 

PILOT 

Deferred Mode 
program 

Immediate Mode 
line number 
Executive Command 
Program Command 

5. GLOSSARY COMMANDS: 

TYPE (T:) 

RUN 

LIST 

NEW 



107 


CONCEPT SHEET: EDITING 

You have discovered a number of special keys that 
allow you to change, add to, and delete or correct errors 
in what you have typed onto the screen. These operations 
are called screen editing and are accomplished by using the 
CONTROL (CTRL) KEY in combination with other keys. 

The ARROW KEYS on the right side of the keyboard are 
called the CURSOR CONTROL ARROWS. By holding down the CTRL 
KEY + LEFT, RIGHT, UP, or DOWN ARROW KEYS, you may move the 
cursor any place on the screen. 

DELETE/BACK S: Hitting this key causes the cursor to 
hop back one space and blank out whatever is under it. 

CTRL + DELETE/BACK S: Using this combination of keys 
allows you to remove characters and shift the remaining 
characters left to fill the space. In effect, it pulls 
back everything to the right of the cursor. 

CTRL + INSERT: Using these keys makes space in a line 
by inserting spaces and shifting characters to the right. 

CTRL + CLEAR or SHIFT + CLEAR: Hitting the CLEAR KEY 
while holding down either the SHIFT or CTRL KEYS clears the 
screen and puts the cursor in the upper left corner without 
erasing the memory of the computer. 

SHIFT + DELETE/BACK S: Removes the "logical" line 
where the cursor is resting. 

SHIFT + INSERT: Adds a line ABOVE the line where the 


cursor is resting 



CONCEPT SHEET: EDITING 


QUESTIONS 

1. The changing, adding, deleting, and correcting of 

errors typed onto the screen is called _(screen 

editing)_. 

2/3. To move the cursor around the screen, use the 
_(CTRL)_ KEY with the _(ARROW)_ KEYS. 

4. To move the cursor backwards in order to remove a 
character, hit the _(BACK S)_ KEY. 

5/6. Two key combinations will wipe the screen clean 
without affecting computer memory. They are 
_(CTRL + CLEAR)_ and _(SHIFT + CLEAR)_. 

7. To add a line ABOVE the location of the cursor, the 

following key combination is used: _(SHIFT + 

INSERT)_. 

8. To remove a character without leaving a space in the 

line of type, you must use _(CTRL + DELETE)___, which 

will pull back everything to the right of the cursor. 

9. To remove the "logical" line where the cursor is 

resting, use _(SHIFT + DELETE)_. 

10. To make space within a line of type, use _(CTRL + 

INSERT)_ 




109 


INSTRUCTOR NOTES 
PILOT INTRODUCTION 

1. Introduction to PILOT 

Explain what a computer language is, and why we 
will learn PILOT. 

PILOT is an acronym for Programmed Inquiry Learning 
Or Teaching. It was developed for teachers and 
students as a simplified language based upon 
English word commands. 

The demonstration computer should be used to 
illustrate the use of the PILOT cartridge and to 
introduce PILOT to the class. 

Insert the PILOT cartridge and turn on the computer. 
The ATARI PILOT copywrite should appear on the 
screen. 

Type a few words and press RETURN. The "friendly" 
error message, ***WHAT'S THAT***, will appear. 
Explain that we must communicate with the computer 
in a certain way so that it can understand what 
we want it to do. We must use certain words or 
abbreviations of words and we must use them in a 
very exact manner. 

2. Introduce TYPE (T:) and RETURN 

In order to get the computer to type words on the 
screen, we must tell it what to do with the words 
BEFORE it reads the words themselves. 

Placing a T: before a word or group of words tells 
the computer that we want it to TYPE it on the 
screen. Illustrate using T: HELLO and other short 
expressions or setences. 

Discuss RETURN and that the computer will not do 
anything with the words we type, not even read 
them, until we indicate that we are through by 
hitting the RETURN key. RETURN may be indicated by 
the symbols <R>, <RET> or even <CR> (CR=carriage 
return). We will use <R> as it is the easiest 
to type and read. 

3. Introduce concepts of Immediate Mode (EXECUTIVE 
COMMANDS) and Deferred Mode (PROGRAM COMMANDS). 

So, far we have used the Immediate Mode. We told 
the computer to do something, and it did. If we 
want the computer do a series of things, it 
cannot. As soon as we hit <R> to indicate the 



110 


INSTRUCTOR NOTES 
PILOT INTRODUCTION 

end of.the first line, the computer will do it. 

It will not wait for more orders. 

The Deferred Mode will make the computer wait 
until we are ready to do it all. To tell the 
computer to wait for ALL the instructions, we 
write a PROGRAM. This is a series of commands in 
a certain order. A program must have LINE 
NUMBERS. These numbers tell the computer that 
other lines are coming. When we finish our 
program, we tell the computer to RUN the program. 
It will look at the program, and starting with 
the lowest number first, perform each of the 
tasks we have given it. 

4. Demonstrate a few short programs. 

Use the same lines as above (T: HELLO, etc.), 
transferring them into programs with line numbers. 

5. Introduce LIST and NEW. Explain that the computer 
actually puts our program into its memory and can 
call it back (LIST) or RUN it as many times as 

we wish. NEW is used to wipe the program out of 
memory in order that we can put in a new one. 

6. Continue Keyboard Graphics Design Project 
If time remains, have pupils get out their 
Keyboard Graphics Design Project. Demonstrate the 
conversion of a picture into a program. (See 

the project information sheets in Week 2 - Day 4.) 
Have students start converting one (or more) of 
their graphics pictures into a program by adding 
line numbers and T: to the left of each line. 

7. GLOSSARY TERMS: 

PILOT 

Deferred Mode 
program 

Immediate Mode 
line number 
Executive Command 
error message 
Program Command 

8. GLOSSARY COMMANDS: 

TYPE (T:) 

RUN 

LIST 

NEW 



INSTRUCTOR NOTES 


Glossary Terms: 

1. PILOT - One of many computer languages. Very 
easy to program due to English terms used 
throughout. Acromyn for Programming Inquiry, 
Learning and Teaching. 

2. Deferred Mode - When commands are typed into 
the computer but nothing happens until they are 
all in memory and the word RUN is typed and 
RETURN is pressed. 

3. Program - A series of commands in the deferred mode. 
The program lines all begin with a line number. 

4. Immediate Mode - When the computer immediately 
does whatever the command tells it to do. This 
action occurs as the RETURN key is pressed. Lines 
typed in Immediate Mode are not placed into the 
computer’s memory and, on most computers, 

cannot be recalled. On the ATARI, as long as 
the line is still visible on the screen, it can 
be used over or entered into a program by the 
addition of a line number. 

5. Line Number - A number typed before a line in 
order to tell the computer when to execute it. 

A line numbered 5< will be executed after a 
line numbered 0 to 4. 

6. Executive Command - Commands which result in 
Immediate Mode actions. They include RUN, LIST, and 
NEW. 

7. Error Message - A line which appears on the 
screen when the computer does not understand the 
commands typed by the user. 

8. Program Command - Commands which may be placed 
in programs or executed in Immediate Mode. 

These include TYPE, ACCEPT, and REMARK. 



INSTRUCTOR NOTES 


Glossary Commands: 

1. TYPE (T:) - Tells the computer to print on the 
screen what ever comes after it. A Program Command. 

2. RUN - Tells the computer to execute the program 
stored in memory. An Executive Command. 

3. LIST - Tells the computer to print out on the 
screen all of the lines of the program stored 
in memory. An Executive Command. 

4. NEW - Tells the computer to wipe its memory 
clean because a new program is going to be 
entered into memory. An Executive Command. 




113 


WEEK 3 - DAY 2 

CG: PILOT INTRODUCTION 
Do and correct. 

Continue Introduction to PILOT 
(See Instructor Notes) 

Go over the information covered yesterday. 
Complete addition of Glossary definitions to 
student notebooks. 

Continue Keyboard Graphics project 
Make sure all students have at least one 
Picture correctly converted into a PILOT program 
with line numbers and T: on every line. 



CONCEPT SHEET: PILOT INTRODUCTION 


Since the digital computer is fast becoming an 
affordable item and is showing up in schools and homes as 
an extremely useful tool, we need to learn how to get it to 
do what YOU may want it to do. In order for you to make 
the computer perform the desired tasks, you must learn a 
special language that translates your desires into the 
machine's actions. The computer language PILOT is a good 
one to start with because it is both powerful and easily 
learned and used. PILOT makes it simple to talk to the 
ATARI computers. It has just the words you need to tell 
the computer to do fun and interesting things. 

Using PILOT you will learn how to make the computer do 
the following: make pictures that move on the screen, tell 
stories, ask questions and check the answers, do math, play 
games or music, and store and find information for you. 

You will also learn how to use the computer as a thinking 
tool. 

PILOT stands for Programmed Inquiry, Learning Or 
Teaching. It was developed for teachers and students. 

ATARI PILOT includes the concept of Turtle Graphics, which 
enables the user to draw pictures when programming. 



CONCEPT SHEET: PILOT INTRODUCTION Page 2 
PILOT is contained in a cartidge x^hich must be 
inserted into the slot in the top of the ATARI computer. 
With it installed, the computer is ready to listen to your 
commands. In fact, the cartridge gives the computer a 
personality, as you will soon see. 

Commands tell the computer what to do. There are two 
kinds of commands: Program Commands and Executive Commands. 
Program Commands are the building blocks of the PILOT 
language. The are composed of one or two letters follo\'/ed 
by a colon (:). When placed in a logical sequence, these 
commands make up a program. Executive Commands tell the 
computer what to do with a program as a whole. They are 
short words such as RUN or LIST. 

The first command you will learn is the T:(TYPE) 
command, which tells the computer to display what you type. 
You must type T: first, then what you want to appear on the 
screen. Hitting RETURN will let the computer know that you 
are finished. It will do NOTHING until then. 

Remember, a computer is patient and orderly. It can wait 
until the cows come home or you shut it off or lightning 
strikes, thereby destroying its memory. 



CONCEPT SHEET: PILOT INTRODUCTION 


QUESTIONS 

1. A computer is an extremely useful _(tool)_. 

2/3.In order to communicate with a computer, you 

must use a special _)language)_. In this class 

we will use _(PILOT)_ for this purpose. 

4. The 5 letters of the word PILOT stand for 

_(Programmed)_ _(Inquiry)_ _(Learning_ 

_Or)_ _(Teaching)_ 

5. Program Commands consist of one or two letters 

followed by a _(colon :)_. 

6. The concept which enables the user to draw 
pictures when programming is called: 

_(Turtle)_ _(Graphics)_. 

7. RUN and LIST are examples of _(Executive 

Commands)_. 

8-10. Three things you will learn to make the computer 

do are (make pictures that move) , 

_(tell stories)_, and _(math)_. 

(Other answers include: play games, play music, 
store information, find information, use the 
computer as a thinking tool.) 



117 


WEEK 3 - DAY 3 

1. Keyboard/Screen Editing Quiz 

To be taken the first 10 minutes in lab. 

2. Type Keyboard Graphics Projects into computer. 

Have students RUN their programs. Perhaps some may 
be selected to be displayed on the demo screen for 
the entire class to see. 



USE ANSWER SHEET - DO NOT WRITE ON THIS PAPER 


KEYBOARD/SCREEN EDITING QUIZ 

TRUE or FALSE-On the Answer Sheet mark the T for TRUE or 

the F for FALSE. 

1. The ATARI computer can work without a cartridge 
in the slot. (T) 

2. You cannot hurt the computer by typing any of 
its keys. (T) 

3. The name of the white square that shows where you 
are typing is called the frammis. (F) 

4. The ATARI logo key deletes (removes) mistakes. (F) 

5. Each letter and number key can make more than one 
kind of mark. (T) 

6. Pressing SHIFT + CLEAR wipes the screen clean. (T) 

7. The ATARI computer can print only letters and 
numbers. (F) 

8. Holding down the CTRL key affects the mark that 
other keys make. (T) 

9. The ESC key causes dark and light to reverse in 
characters. (F) 

10. Pushing CTRL + INSERT makes space in a line by 
adding spaces and shifting characters to the 
right. (T) 

11. Hitting the RETURN key tells the computer you are 
done with a line. (T) 

12. Pressing CTRL + RIGHT ARROW allow you to erase 
characters as you move to the right in a line. (F) 

13. Each time you hit the DELETE/BACK S key the cursor 
hops back one space and blanks out whatever is 
there. (T) 

14. Hitting the SPACE BAR allows you to place the 
cursor anywhere you wish. (F) 

15. The screen may be cleared by pressing CTRL + 

CLEAR. (T) 



119 


WEEK 3 - DAY 4 

1. Anyone who has not completed their Keyboard 
Graphics Design Project needs to finish it. 

2. Time for a few new tricks. This material is nice 
to introduce while students are at the computers so 
that students are able to experiment with each 

new command or principle. 

RENUMBER (REN), Deleting program lines, Editing 
program lines, Amazing Multiple Line Trick, 

LISTing partial programs. 

3. Introduce REMARK (R : ) . 

REMARK is used to make notes in a program which 
will only be seen when the program is LISTed. 

These will not cause anything to happen while 
the program is RUNning. Have students place a 
title line into their program, calling it line 0. 

It should be entered as 0 R: (title) and may be 
typed anywhere on the screen. It will be 
automatically incorporated into the program in the 
correct location. 

4. If time and equipment permit, demonstrate briefly 
how a printer prints out a program listing. If 
the printer is hooked up, typing SAVE P: LISTing 
to the printer. Typing SAVE P:20,40 will print 
out only the lines between 20 and 40. 



120 


INSTRUCTOR NOTES 
A Variety of Tricks 

1. Introduce REN (RENumber), another Executive 
Command. Line numbers can be automatically changed 
from any numbering pattern to numbering by tens. 
(Example: 1,2,3,...10 becomes 10, 20, 30,... 100.) 
With a program in memory, have students LIST 

it, type REN, press RETURN, and LIST again. 

REN will allow the insertion of lines between 
previously typed lines. If the students had typed 
lines 1,2,and 3 and then discovered the need for 
a line between 1 and 2, it cannot be placed 
there. However, REN will renumber the lines as 
10,20, and 30. Now lines 11,12,13, etc. can be 
added as necessary. 

2. Deleting program lines. Typing line numbers 
without an accompanying command will delete 
that line from the program. Have pupils try to 
eliminate all the blanks which were inserted into 
their graphics program. 

3. Editing program lines. 

Changing a line on the screen by typing the 
correction or change over the existing characters 
and then hitting RETURN will replace the original 
line with the edited version. 

Typing the number of a line in the program and 
following it with a different command and 
statement will replace the original line with the 
new one. 

4. Teach the Amazing Multiple Line Trick. 

5. LISTing partial programs. 

LIST will print out the entire program on the 
screen. LIST 22 will only print out line 22 on 
the screen. LIST 20,40 will print out only the 
lines with numbers ranging from 20 to 40. 





THE AMAZING MULTIPLE LINE TRICK 


An editing trick that will save you a lot of time in 
some of your future programs is: "The Amazing Multiple Line 
Trick." Type NEW and press [RETURN], and then enter the 
following one-line program: 

10 T:THIS IS MY ONLY LINE [RETURN] 

Now, using your cursor control keys ([CTRL] + ARROW 
Keys), move the cursor until it sits over the 1 in 10 as 
shown here: 

10 T:THIS IS MY ONLY LINE 

Type a 2 and press [RETURN], Do this again, except 
overwrite the 2 with a 3; repeat with a 4 over the 3. 

After three of these number changes, LIST the program. 

What has happened? The computer has made multiple copies 
of the same line but each has a different line number! 

Your program will now look like this: 

10 T:THIS IS MY ONLY LINE 

20 T:THIS IS MY ONLY LINE 

30 T:THIS IS MY ONLY LINE 

40 T:THIS IS MY ONLY LINE 

If you RUN this program, it will print this message 
once for each line number. When you begin typing in 
programs in which there are many duplicate or nearly- 
duplicate lines, this feature will save you a great deal of 
typing!! 



122 


WEEK 3 - DAY 5 

1. In the lab we will continue to use T: in short 
programs, especially programs which deal with text 
material and use TYPE. The students read 

pages 8-10 in the STUDENT PILOT Reference Guide. 

They are to ENTER and RUN the programs on those 
pages. 

2. Introduce the use of the Backslash-(\). 

This symbol placed at the end of a line of type 
will cause the material in the next statement to 
be printed on the same screen line. 

This is useful in writing stories, giving a long 
series of instructions, or to place an ACCEPT answer 
on the same line as the question. 

The program: 

10 T: Now is the 

20 T: time for all 

30 T: good cats to jump. 

Will print as 3 separate lines on the screen 
when RUN. The program: 

10 T: Now is the \ 

20 T: time for all \ 

30 T: good cats to jump. 

Will print as 1 long line. 

3. Also introduced will be A: (ACCEPT) 

A line such as 10 A: with nothing following 

the : will cause the computer to wait until someone 
hits the RETURN key. Then it will continue to the 
next line of the program. In effect, it waits for 
a signal to go on. As it \tfill v/ait forever, this 
is a useful tool in providing pupil interaction with 
the computer, and for providing for various reading 
speeds when text material is being presented on 
the screen. 

4. Blending with A: is the concept of variables. 

STRING and NUMERIC variables are to be briefly 
introduced. For example $NAME and #AGE in the 
program on page 11 of the Student PILOT text. 

(ACCEPT and variables will be covered in more detail.) 

5. REFERENCES for TYPE and variables: 

STUDENT PILOT Reference Guide: 

Read, type, RUN pages 10-13 
ATARI PILOT For Beginners: 

Use Thank You Letter pp. 93-94, and Ice 
Cream program page 94. 

Use PILOT PRIMER pages 19-40 for instructor 
reference and study. 





123 


DAY 1 

DAY 2 

DAY 3 

DAY 4 

DAY 5 


WEEK 4 

(R) CC: PROGRAMMING TERMS; Review and 

reinforce Program Commands T: A: R: 
and Executive Commands RUN LIST NEW REN 
and string variables, numeric variables, 
and \; Introduce M: J: E: 

(R) Continue introduction of Commands M:, J:, 

E: and various combinations of MATCH and JUMP. 

(L) Reinforce MATCH and JUMP as well as all 
previously introduced commands; 
students RUN a variety of programs; 

Introduce JY: and JN:. 

(R) CC: MATCH/JUMP; Continue working with 

M: , J: , and A:; Continue JY: (JUMP IF YES), 
JN: (JUMP IF NO), TY: (TYPE IF YES), 
and TN: (TYPE IF NO); Continue expansion 
of MATCH usage. 

(L) Continue expansion of MATCH usage; 

Continue expansion of JY: (JUMP IF YES), 

JN: (JUMP IF NO), TY: (TYPE IF YES), 
and TN: (TYPE IF NO). 





124 


WEEK 4 - DAY 1 

1. CC: PROGRAMMING TERMS 
Do and Correct 

2. Back in the classroom today and tomorrow we will 
review and reinforce the use of the following 
Program Commands: 

T: A: R: 

And the following Executive Commands: 

RUN LIST NEW REN 
And the following: 

\ string variables numeric variables 
Before introducing the major Program Commands: 

M: and J: 

Review a variety of simple programs from the 
STUDENT PILOT Reference Guide and discuss how 
-they work. RUN each and change them around in 
various ways. 

3. Introduce M: (MATCH) 

4. Introduce J: (JUMP) 

5. Introduce E: (END) 

6. BREAK must be introduced with JUMP in order to 
stop the run away loops. 

7. Combining J: and M: in order to use the input 
from the user to guide the operation of the 
program. 

8. More reference material for ACCEPT and variables: 
ATARI PILOT for Beginners: 

Reading and Writing pages 85-103. 

Use PILOT PRIMER pages 67-84 for instructor 
reference and study of string variables, 
and pages 85-95 for numeric variables. 

MATCH JUMP 

14-16 17-18 

95-100 76-78 

41-53 55-63 


9. References for: END 

STUDENT PILOT - pages 24-25 
AT. PIL. for Beg. pgs 68 
PILOT PRIMER - pages 32 



CONCEPTS: PROGRAMMING TERMS 


You have learned many commands and terms in the last 
few days. This is a summary to help you remember them. 

T: (TYPE) is a command to the computer to display on 
the screen whatever comes next. When you hit RETURN, the 
computer does what it was told and types what follows the 
colon (:). The RETURN key also sends the cursor down to 
the beginning of the next line. 

The backslash (\) has a special meaning to the T: 
command. It tells the computer to continue on the same 
line rather than print the next output on a separate line. 

A: (ACCEPT) is a command that tells the program to 
wait for information to be typed from the keyboard. The A: 
command also lets you store information as a string ($) or 
numeric (#) variable. 

R: (REMARK) command lets you insert remarks into your 
program to make it easier to understand. They are are 
usually titles or little notes explaining what the program 
does and how it works. However, any REMARKS will be 
ignored by the computer when you RUN the program. The only 
time you see them is when you LIST the program. 

The RUN command tells the computer to execute 
(perform, do) the program currently in memory. When the 
RUN command is issued in PILOT, the computer automatically 
clears the screen before executing the program. When 
program execution is completed, the screen displays the 



CONCEPTS: PROGRAMMING TERMS page 2 
READY message and the cursor. 

The LIST command tells the computer to display the 
program currently in memory. Use the command any time you 
want to see the entire program, a few lines of the program, 
or just one line of the program. For example, to list 
lines 40 through 80 you would type LIST 40,80. The command 
LIST 50 tells the computer to LIST only line 50. 

The REN command renumbers the program statements, 
beginning with the first line of the program. It renumbers 
the lines by 10’s, starting at 10, so you can add more 
lines of program if necessary. REN will also let you begin 
renumbering at any number and increase each statement by 
any amount you want. For example, REN 100,5 will renumber 
your program statements starting at 100 and increase each 
line by 5's . 

The NEW command lets you erase the program in the 
computer memory but not from the screen. Be very careful 
when you use this command; it is easy to lose your program 
accidentally, and there is no way to recover it. Always 
erase an old program with the NEW command before entering 
or loading a new program. Otherwise you will end up with a 
mixture of both. 

VARIABLES - A variable is anything that is subject to 
change, like the time, date, or weather. In computer 
programming, a variable is anything whose value is 
changeable. 








CONCEPTS: PROGRAMMING TERMS Page 3 


Here are some examples of variables: 

A=X*5 A and X are variables 

Today's date is a variable. (Changes every day.) 

Body weight is a variable. (Changes all the time.) 

A century is NOT a variable. It is a 

fixed value of one hundred years. 

Think of variables as compartments in the computer's 
memory. Because we may have more than one variable in 
memory, we must give each one a variable name to 
distinguish it from all other variables. In PILOT there 
are two main types of variables: string ($) variables and 
numeric (#) variables. 

String Variables can store strings of up to 254 
characters. They are named with a $ (dollar sign) symbol, 
followed by any combination of letters and numbers. For 
example $NAME. $REPLY2ME, $F00D9 are acceptable string 
variable names. String variable names cannot be used in 
arithmetic expressions. A program can contain any number 
of string variables up to the limits of memory. 

Numeric Variables can store numbers from -32768 
through 32767. They are named with a # (number sign) 
symbol, followed by a single letter ranging from A to Z, 
such as #A, #J, #M. A program can have up to 26 numeric 
variables. They can be used in arithmetic and relational 
expressions. A numeric variable has a changeable value. 
Its value is always a number. A numeric variable can be 
given a value from the ACCEPT or COMPUTE commands. 




CONCEPTS: PROGRAMMING TERMS 


QUESTIONS 

1. The command used to display characters on the 

screen is _ (T:) _. 

2. The _ (\) _ after the T: command causes the next 

output to appear on the same line.' 

3. The (A:) command accepts input from the keyboard 

during program execution. 

4. The (R:) command lets you make notes to 

yourself about a program. 

5. To execute the program currently in memory type 
_(RUN )__. 

6. To display program statements on the screen type 

_(LIST)_. 

7. To insert a program line between two lines with 

consecutive numbers type _(REN)_ to change 

the line numbers. 

8. If you do not type _(NEW)_ before typing in a 

different program, both programs will be merged. 

9/10 $GR8DANE is an example of a _(string)_ variable 

and #Q is a _(numeric)_ variable. 

11. A _(variable)_ is anything whose value is 

changeable. 

12/13 The A: command tells the program to _(wait)_ for 

information to be typed in. It also lets you 
_(store)_ information as a variable. 

14. A _(REMARK)_ command is seen only when you LIST 

a program, never when you RUN a program. 

15. The computer does what it is told, but only 

after you hit _(RETURN)_. 







128 


INSTRUCTOR NOTES 


1. M: (MATCH) 

M: is a valuable command to know and to be able to 
use. The M: command matches the answer entered by a 
user (during an A: command) with one or more 
answers expected by the program. 

Also, M: automatically creates a YES or NO 
condition - YES (Y) there was a match, or NO (N) 
there was not a match. When the user types in 
a response to A: the computer checks to see if 
one word or sentence matches another word or 
sentence. You can use M: to check whether answers 
are correct, or to find particular answers for 
further use in the program. (J: will illustrate 
further.) 

If the computer finds a match, it sends the 
ansv/er Y (YES). If there is no match, the answer 
sent is N (NO). The TY: (TYPE if YES) and 
TN: (TYPE if NO) are executed accordingly. 

10 R: MATCH PROGRAM ILLUSTRATION 

20 T: WHAT DO YOU THINK IS MY FAVORITE COLOR? 

30 A: 

40 M: PURPLE 

50 TY: YOU GUESSED IT! 

60 TN: SORRY, IT IS PURPLE. 

70 E: 

2. J: (JUMP) 

The fantastic J: command will send the computer to 
different places in our programs. We can use J: to 
have our prtogram be RUN over and over automatically 
by the computer. 

BUT, we do need to tell the computer where 
to JUMP. We must give the place a LABEL. We do 
that by placing an asterisk (*) in front of a name. 

If we named the beginning of our program *START 
and placed a J: *START line at the end of our 
program, everytime the computer got to the end of 
the program it would JUMP back to the beginning 
and start over. 

10 *START 

20 T:HELLO THERE 

30 J: *START 



129 


INSTRUCTOR NOTES page 2 


3. E: (END) 

E: is used to END a program. It may appear anywhere 
inside a program but when the computer gets to it, 
it will stop. 

10 T: HELLO 
20 E: 

30 T: FRIEND 

The word Friend will never appear on the screen 
because PILOT executed lines 10 and 20 and stopped 
at the command E:. 

4. BREAK 

If we RUN this program the computer will print lines 
of HELLO THERE forever and ever. This is called an 
endless LOOP. But are we stuck - yes?? Yes - 
UNLESS... We HIT THE BREAK KEY! Yes, the BREAK 
Key is the stop-the-run-away-computer-program key. 

Be careful about hitting it by accident because 
it will stop your program. But, it is useful when 
we need to break out of a loop. 

5. Combining J: with M: can allow us to JUMP to 
somewhere in our program based upon the answer a 
user gave to an A: question. 

10 *START OVER 

20 T: WHAT COLOR IS A SUNSET 
30 A: 

40 M: RED 
50 JN: *START 

60 T: YES. RED IS A BEAUTIFUL COLOR 

This program will keep going back to *START OVER and 
asking the question until the user answers RED. When 
the user answers RED, the computer will print Line 60. 



130 


WEEK 4 - DAY 2 

1. Continue with the introduction of Programming 
Commands begun yesterday. These include MATCH, JUMP, 
END, and various combinations of MATCH and JUMP. 

2. GLOSSARY TERMS: 

BREAK 

backslash 

variable 

string (variable) 
numeric (variable) 

*LABEL 

3. GLOSSARY COMMANDS: 

REMARK (R:) 

RENUMBER (REN) 

ACCEPT (A:) 

MATCH (M:) 

JUMP (J:) 




INSTRUCTOR NOTES 


Glossary Terras: 

1. BREAK - Hitting this key will stop a program 
RUNning on the computer. 

2. backslash - A symbol placed at the end of a 

T: line to tell the computer to print that line 
and the next on the same screen line. 

It keeps the text on the same line. 

3. variable - A letter, word, or number used 

to store a piece of data for use in a program. 

4. string (variable) - a variable used to store 
any kind of data, usually not numbers. These 
string variables cannot be used in any numeric 
calculations. 

5. numeric (variable) - a variable used to store 
numbers only. These can be used in mathematical 
problems. 

6. *LABEL - a name placed on a part of a program 
that does something which needs to be done 

and over. 


over 




INSTRUCTOR NOTES 


Glossary Commands: 

1. REMARK (R:) - Used to place information lines 
into a program LISTing to be read only by the 
programmer. These lines will not appear in the 
program RUN in any way. 

2. REUMBER (REN) - Changes the line numbers of a 
program to a new set of numbers. May be used to 
make space between lines so more program lines 
can be inserted. 

3. ACCEPT (A:) - Used to accept an answer from a 
user and store it for use in the program. 

4. MATCH (Mr) - Enables checking an ACCEPT answer 
with acceptable answers and identifying whether 
the ACCEPT answer is correct. 

5. JUMP (J:) - Command which sends the computer to 
another place in a program. This place is indicated 
by a *LABEL. 







133 


WEEK 4 - DAY 3 

1. Today is a lab day to reinforce the commands which 
have been introduced so far. 

Special attention must be directed at MATCH and 
JUMP, which were only introduced yesterday and 
are quite complex concepts to understand and to use. 
More on these commands, including JUMP ON MATCH, 
will be introduced next week. 

A variety of programs need to be RUN and 
discussed before these commands, and ACCEPT, will 
be clearly understood by the pupils. 

Many of these simple programs are to be found in 
the References listed at the bottom of the summary 
sheets for the last few days. Each program chosen 
needs to be RUN, discussed, then changed slightly 
and RUN again, over and over until the pupils 
begin to understand what the changes accomplish. 

2. The class session following this one will again be 
devoted to M: J: A: and the new ideas of TY: 

TN: JY: JN: which are really just variations 

on the basic commands already covered. Much 
reinforcement of all the previous commands will 
be necessary before the majority of pupils will 
understand their purposes and manner of use. 

To be included will be: how to MATCH for any 
answer; how to MATCH for an answer containing a 
particular word or letter; and how to MATCH an 
answer which begins or ends with a particular word. 


And then on to JUMP ON MATCH. 



134 


INSTRUCTOR NOTES 
PROGRAM VARIATIONS 

The best way to develop an understanding of what each 
command does in programming is to vary a program many 
times. Make only a small change each time and see what 
happens. This will be most effective when the students 
actually do the RUNning of the programs themselves. After 
working with them as a group, encourage individual 
experimentation. 

The following are a few examples of the ways we can 
experiment with a simple program. 

5 *STARTOVER 

10 T: WHAT COLOR DO YOU THINK IS MY FAVORITE? 

20 A: 

30 M: PURPLE 
40 JY: BRIGHT 
50 JN: *WR0NG 

60 R: THE PROGRAM BRANCHES DIFFERENT 
DIRECTIONS DUE TO ANSWER 
100 BRIGHT 

110 T: YOU GUESSED IT! 

120 J: *BYE 
200 -WRONG 

210 T: NO, THAT IS NOT MY FAVORITE COLOR. 

220 T: TRY AGAIN. 

230 J: *START0VER 
300 *BYE 

310 T: SEE YOU LATER 


CHANGES 

which can be made in 

the pogram i 

1 . 

the 

M: color 


2. 

the 

response to guessing 

it correctly 

3. 

the 

incorrect response 


4. 

the 

closing remark 


5. 

the 

label names (*RIGHT = 

^CORRECT) 

6 . 

the 

opening question itse 

If. 



INSTRUCTOR NOTES 


PROGRAM VARIATIONS Page 2 
Other changes can be made by the addition of 


new lines to the program. 

ADD: 

111 T: IS PURPLE YOUR FAVORITE COLOR TOO 

112 A: 

113 M: YES 

114 TY: FANTASTIC. 

115 JY: *BYE 

116 TN: TOO BAD. I WISH IT WAS. 

117 JN: *BYE 



136 


WEEK 4 - DAY 4 


1. CC: MATCH/JUMP 

2. Continue working with M: , J: , and A: 

After the lab experience of yesterday, the 

areas giving the most problems to the pupils should 
have been identified. Today's classroom time 
should be spent working in these areas. 

3. Continue JY: (JUMP IF YES), JN: (JUMP IF NO), 

TY: (TYPE IF YES), and TN: (TYPE IF NO). 

4. Continue expansion of MATCH usage. 



CONCEPT SHEET: MATCH/JUMP 

M: (MATCH) is the Program Command which will match 
ACCEPTed answers entered by a user (during an A: command) 
with one or more answers expected by the program. 

Therefore, the MATCH command functions like a detective. 
MATCH searches the keyboard input received for a specific 
pattern or patterns. 

If a matching pattern IS found, PILOT remembers that 
there is a match by placing a Y (YES there is a match) into 
the computer's memory. If NO pattern is found, PILOT 
remembers that there isn't a match by placing an N (NO 
there is not a match) into the computer's memory. 

M: has created a YES or NO condition which the 
computer will use to make decisions. By using TY: (TYPE IF 
YES) and TN: (TYPE IF NO) in our programs we can make our 
programs BRANCH, or pick one of two directions to go. The 
users answer will either MATCH (Y) or NOT MATCH (N). 

All of this is a lot easier to understand when we 
actually look at a program. 

10 T: DO YOU LIKE SUMMER VACATIONS? 

20 A: 

30 M: YES, SURE, OF COURSE, LOVE 

40 TY: SO DO I! 

50 TN: THAT IS WEIRD! 

When the computer asks the user (Line 10) about 
summer, he might answer "SURE". Line 20 will ACCEPT the 
answer and store it. The M: in Line 30 will take "SURE" 
and check it against the terms it is expecting: YES, SURE, 



CONCEPT SHEET: MATCH/JUMP Page 2 
OF COURSE, or LOVE. When it finds SURE it will send a Y to 
the computer. The computer will move to line 40 and, 
because the MATCH sent a Y, will type "SO DO I!" 

' If the user answers "NO", "NOPE", or "I HATE IT", M: 
will not find a match and will send an N to the computer. 
The computer will look at Line 40 and, because it is NOT 
true, will NOT type anything. Then it will move to Line 
50, TY: (TYPE IF NO), and type "THAT IS WEIRD!" 

J: (JUMP) is used to send the computer to different places 
in a program. J: can operate with M: in the same way as 
TY: and TN:. J: can be used as JY: (JUMP ON YES) and JN: 
(JUMP ON NO). If a match is made, JY: will send the 
computer to a certain *LABEL somewhere in the program. JN: 
will only happen if NO match is made. We will use this 
often in our programs. 



CONCEPTS: MATCH/JUMP Page 3 
QUESTIONS 

1. The _(MATCH)_ Command fuctions like a detective, 

searching keyboard input for a particular pattern 
or patterns. 

2/3.One of two conditions is sent to the computer’s 

memory: _(YES)_ if there is a match and _(NO)_ 

if there is no match. 

4/5.The TN: command in a program stands for _(TYPE IF 

NO) ; the TY: stands for (TYPE IF YES) . 

6. If you RUN our Summer program & answer "LOVE", 
the computer types _(SO DO I)_. 

7/8.Besides TY: and TN:, name two other conditional 
commands we can use. (JY: and JN:) 

9. The JUMP ON NO command will be executed if 

_(no MATCH)_ is made. 

10. For J: to work in a program, there must be a 

_(*LABEL)_ to JUMP to. 





INSTRUCTOR NOTE 


CONDITIONAL COMMANDS 

JY: (JUMP IF YES) and JN: (JUMP IF NO) were briefly 
introduced in the programs the pupils tuped in from the 
STUDENT PILOT Reference Manual yesterday. The students 
will need more work with them today. 

TY: (TYPE IF YES) and TN: (TYPE IF NO) should be 
introduced here as they parallel the other two commands and 
are frequently used in conjunction with them. 

These are all examples of CONDITIONAL COMMANDS. A 
condition is something about which a YES or NO decision can 
be made. For example, the weather could be a condition for 
deciding what to do today. Is it raining outside? If YES, 
go to the movies; if NO, go swimming. 

PILOT conditionals are either string match conditions 
or numeric conditions. The MATCH command always sets up a 
YES or NO condition. It is going to return a YES (Y) there 
was a match or a NO (N) there was not a match. 

If the answer the A: (ACCEPT) received from the user 
matched the word, phrase, or number located in the M: 
command, the result is a YES condition. Now, either TY: or 
JY: will work. 

If the match was not made, a NO condition is 
established and TY: or JY: will be ignored. Only NY: and 
JN: will be executed. [TY: and TN: can be shortened to Y: 
and N: but this tends to be more confusing when seen in a 
program.] 

The following program can be varied in several ways to 
illustrate these conditional commands. 

10 R: ILLUSTRATE TY: AND TN: 

20 T: DO YOU HAVE A CAT AT HOME? 

30 A: 

40 M: YES, Y, ONE, SEVERAL, SURE 

50 TY: GREAT, WOULD YOU LIKE ANOTHER ONE? 

60 JY: ^KITTENS 

70 TN: TOO BAD. HOW WOULD YOU LIKE TO HAVE 
A KITTEN? 

80 JN: *KITTENS 

90 -KITTENS 

100 T: FREE KITTENS! ANY COLOR! 

110 T: TAKE YOUR PICK FROM THIS FANTASTIC 
BUNCH OF KITTENS. 







INSTRUCTOR NOTE 


CONDITIONAL COMMANDS Page 2 

120 T: WOULD YOU LIKE THE BLACK, ORANGE, 

WHITE, BROWN, OR SPOTTED ONE? 

130 A: 

140 Mr WHITE, BROWN 

150 TY: THERE ARE TWO OF EACH, HELP YOURSELF. 

160 JY: *END 

170 M: ORANGE, BLACK 

180 TY: THERE ARE THREE OF EACH, HELP YOURSELF. 

190 JY: *END 
200 M: SPOTTED 

210 TY: HE'S THE ONLY ONE. GRAB IT QUICKLY! 

220 JY: *END 

230 TY: COME ON. BE A SPORT AND TAKE AT LEAST ONE. 

240 J: -KITTENS 
250 *END 

260 T: THANKS A LOT. THESE KITTENS NEED A GOOD HOME. 
270 E: 



142 


WEEK 4 - DAY 5 

1. Continue expansion of MATCH usage. 

2. Continue expansion of JY: (JUMP IF YES), JN 
IF NO), TY: (TYPE IF YES), and TN: (TYPE IF 


(JUMP 
NO) . 




INSTRUCTOR NOTE 
MATCH EXPANSION CONTINUED 

As MATCH is being explored further we find need of 
ways to set up our match command to accept a variety of 
answers and even a variety of spellings of the same answer. 
A simple positive answer could be: yes, yep, y, or okay, 
ok, o.k. 

If we use M:, (no space,) it will match ANY input. 

M: A (1 space before letter) will match any input 
string BEGINNING with the letter A. 

M:A (NO space) will match input that has the letter A 
ANYWHERE in the string. 

M: AIR (space before) will find and match the letters 
AIR anywhere they BEGIN a word in a string (AIRPLANE, 
AIRPORT, and UP IN THE AIR). 

Be careful about the space because M:AIR (no space 
before) would match even words like PAIR. 


If we want to match only the exact word AIR and not 
other words beginning with AIR we use M: AIR_ which has a 
space before and an underline after it to indicate that 
there must be a space at the end of the string. This will 
not pick up AIRPLANE or AIRPORT but would pick up AIR alone 
or in a sentence like UP IN THE AIR. 

We can even look for a word that has a certain ending 
like OOSE. If we use M:OOSE_ we will match MOOSE, LOOSE, 
CHOOSE, and CABOOSE. 



144 


INSTRUCTOR NOTE 

JUMP USING JY: and JN: CONDITIONALS 

Spend time experimenting with the J: (JUMP) command. This 
command is very important to the building of modules in 
PILOT. Remember that a module always begins with *LABEL. 

It can contain another J: to a different place in the 
program. Many programs will be a series of JUMPs to 
different places. 

The three books already mentioned have a variety of 
programs using J: and the students should try most of them, 
experimenting with variations of each line. 

Here is a program with extensions. Each line is also 
explained. Use it as an example of how to vary a program. 
One way to test the students knowledge is to give them a 
similar program and ask them to identify the purpose of 
each line. 

1. The J: (JUMP) command lets you jump from one spot in 
a program to another. The J: is ALWAYS followed 

by a *LABEL indicating to which statement you 
v/ant to jump. The destination of your J: command 
must also be labeled with the same *LABEL. 

This program uses the J: command to make a simple 
LOOP. The program keeps looping (repeating) until 
the BREAK key is hit. 

[will not print 
out in the RUN 
[appears on screen 

[*LABEL for JUMP 
[\ keeps typing 
on same line 
[sends program 
back to Line 40 

2. This was a simple JUMPing program with no decisions 
for the computer. However, just as we used MATCH to 
produce a conditional program based of TY: and TN:, 
we can do so with JUMP. The JY: and JN: will cause 
branching to different places in the program. 

10 R: MERRY-GO-ROUND 
20 T: WOULD YOU LIKE TO TAKE A 
RIDE \ 

30 T: ON A MERRY-GO-ROUND? 


10 R: MERRY-GO-ROUND 

20 T: ON A MERRY-GO-ROUND 
30 T: YOU GO ROUND 
40 *RIDE 

50 T: AND ROUND \ 

60 J: *RIDE 



INSTRUCTOR NOTE 


JUMP USING JY: and JN 

40 T: PLEASE ANSWER 'YES' 
50 A: 

60 M: YES 


70 JY: *OFCOURSE 
80 JN: *WHYNOT 


100 *OFCOURSE 

110 T: I ENJOY RIDING THE 
MERRY-GO-ROUND. 

120 T: I LIKE TO GO ROUND 
130 *RIDE 

140 T: AND ROUND \ 

150 J: *RIDE 

200 *WHYNOT 


CONDITIONALS Page 

2 

OR 'NO*. 


[A:ccepts 

answer 

[computer 

i s 

looking f 

or this 

match 



[gives *LABEL for 
JUMP if MATCH (Y) 
[gives *LABEL 
for JUMP if 
NO MATCH (N) 
[*LABEL used 
if MATCH occurred 


[♦LABEL 

[JUMPs back to 
*RIDE at Line 130 
[*LABEL used if 
NO MATCH occurred 


210 T: I AM SORRY THAT YOU DO NOT 
220 T: WANT TO RIDE THE 
MERRY-GO-ROUND. 

230 T: WELL, SEE YOU AROUND. 


3. This will execute so qui 
probably want it to star 
excellent time to introd 

PA: 60 will produce a 1 
Try it various places in 
A PAUSE of 120 or two se 
line 125, 145, 225, etc. 
as: 125 PA: 120 


ckly 

th 

at th 

e 

pupil 

s 

will 

t si 

owe 

r. 

I 

t 

is an 



uce 

the 

PA: 


(PAUSE) 

c 

ommand . 

seco 

nd 

pau: 

se 

i 

n exe 

cu 

tion. 

the 

pr 

ogn 

am 

• 




cond 

s m 

ighl 

~ 

be 

used 

a 

s a 

It 

wo 

u 1 d 

b 

e 

wr it t 

en 




WEEK 5 


DAY 1 

DAY 2 

DAY 3 
DAY 4 

DAY 5 


: (L) Continue working with the commands 

presented so far; Working mainly with 
MATCH, ACCEPT, JUMP, and the Conditionals 
JUMP ON YES, JUMP ON NO, TYPE ON YES, and 
TYPE ON NO; Exploration of various 
possible MATCHes. 

: (R) TEST 1; Discuss test questions and 
answers. 

: (L) Return tests; Introduce JUMP ON MATCH. 

: (L) Begin two day LAB activity introducing 
TURTLE GRAPHICS; Graphics Exploration 
Worksheet. 

: (L) Turn activities from the worksheet into 
programs called MODULES; Call modules 
in direct mode using J: *LABEL. 



147 


WEEK 5 - DAY 1 

1. This is a LAB day to continue working with the 
commands presented so far. 

2. Programs today should deal mainly with MATCH, 
ACCEPT, JUMP, and the Conditionals JUMP ON YES, 
TYPE ON YES, JUMP ON NO, TYPE ON NO. Also, 

^LABELS will be used frequently when working 
with JUMP. 

3. Programs should also explore the various MATCHes 
possible: exact word, beginning letter or letters, 
ending letter or letters, letter or letters found 
anywhere in the string. Use the Instructor Note 
from Week 4 - Day 4 to provide the various types 
of MATCHes and how to produce each type. 

Most of this work can concentrate on string 
variables. Numeric variables will be covered in 
more detail later in working with the COMPUTE 
command and in TURTLE GRAPHICS. 

Again, the best approach is to take one simple 
program and work through all the different 
possibilities by changing one line at a time and 
observing the results. Tell pupils to use one 
space, no spaces, and ending underline, etc. 
to change the MATCH searching techniques. Try 
changing the ^LABELS, Conditions and responses 
to conditions, etc. 



148 


INSTRUCTOR NOTE 

MATCH USING TY: and TN: CONDITIONALS 

1. A program can have several different MATCHes from 
one ACCEPT. Suppose the user is asked a question 
and given four choices. The program can provide 
a different response for each choice, or for a 
group of choices. Or it can provide a response 
for certain individual choices and another response 
for any of the left over choices. 

10 R: MULTIPLE CHOICE RESPONSES 
20 T: WHICH DOES NOT BELONG: 

30 T: SNAKE SALAMANDER STOVE HORSE 

40 T: ?\ [puts a question 

mark on the screen 
and will TYPE the 
users response 
next to it] 

50 A: [waits for user 

response ] 

60 M:HORSE 

70 TY: YES, HORSE DOES NOT BEGIN 

WITH 'C'. [prints if DOG 

is chosen] 

80 M:STOVE 

90 TY: YES, THE STOVE IS NOT 

AN ANIMAL. [types if STOVE is 

chosen] 

100 M:H0RSE,STOVE 

110 TN: ARE YOU SURE ABOUT THAT? [if neither INPUT 

is HORSE or STOVE 
this will be typed 
on the screen] 

2. The problem with this program is that a user may 
enter an answer like SNAKE STOVE. It will print 
out the STOVE answer. But the user was not 
totally correct. The following changes will 
make the program respond to each answer 
individually. 

100 M:SNAKE 

110 TY: ARE YOU SURE ABOUT THE 

SNAKE? [types if SNAKE is 

chosen] 

[accepts any 
spelling after the 
first 4 letters 
of SALAMANDER] 


120 M:SALA 







149 


INSTRUCTOR NOTE 

MATCH USING TY: and TN: CONDITIONALS Page 2 

130 TY: NOW THAT YOU MENTION IT, 

SALAMANDER DOESN'T\ 

140 TY: HAVE 5 LETTERS, DOES IT. 

150 M: SNAKE,SALAMANDER,STOVE,HORSE 

160 TN: THAT ONE WAS NOT ON THE [TYPEd when RETURN 

LIST. PLEASE CHECK YOUR was hit without an 

SPELLING. answer, or when 

something other than 
one of four choices 
was INPUT] 

3. In order to make it easier to try a variety of 

answers it is a good idea to make a LOOP so that 
the program will start over again automatically. 

Adding these two lines will cause that to happen. 

5 -STARTOVER [provides a LABEL 

to JUMP to] 

170 J: *STARTOVER [sends computer 

back to start over] 


4. Have the pupils put spaces after the M: in the 

program lines with them and then experiment with 
how this changes the results. Also add an 
underline after M: SALA_ and see what kind of 
difference it will make when then type out 
SALAMANDER as an answer. 




WEEK 5 - DAY 2 


1. TEST 1: This test covers the information and 
commands which have been introduced during the first 
three weeks of the class. It also includes a 

brief review of screen editing. 

Other tests and quizzes may have been given 
depending upon the level of the students and 
the wishes of the teacher. Some of the Concept 
Sheets may be used as tests or quizzes. 

The questions will be taken mainly from the 
material covered by the pupils' concept sheets 
and glossaries, as well as the material 
covered by discussions and lab work. 

2. After the tests and answer sheets have been 
collected there should be a discussion of the 
questions and answers. 

This should lead to a discussion of any areas 
where there still seems to be some haziness on 
the part of the pupils. 





USE ANSWER SHEET - DO NOT WRITE ON THIS PAPER 


PILOT/LITERACY TEST 1 - Page 1 

MULTIPLE CHOICE-On the Answer Sheet, mark the LETTER 
of the BEST answer. 

1. The most fragile part of a computer system is the 

_(C) . (A)monitor (B)keyboard 

(C)disk drive (D)PILOT cartridge 

2. The screen may be cieared by pressing 

_(D)_. (A)SHIFT + CLEAR (B)CTRL+CLEAR 

(C)CLEAR (D)either (A) OR (B) 

3. To clear a program out of the computer's memory, 

you must type (B) . (A)LIST (B)NEW 

(C)ERASE (D)RUN 

4. To stop a program from running, you hit _(D)_. 

(A)DELETE (B)CTRL (C)SHIFT (D)BREAK 

5. (A) is an example of a string variable. 

(A)$CAR (B)%Z (C)#A (D)?X 

6. A numeric variable name is shown in _(C)_ below. 

(A)#NUM (B)$A (C)#N (D)?C 

7. Memory that was put into the computer at the 

factory and cannot be erased is called _(B)_. 

(A)MEM (B)ROM (C)RAM (D)SAVE 

8. To get the computer to display something on the 

screen you must use the _(A)_ command. 

(A) T: (B)R: (C)A: (D)M: 

9. (C) will place a comment in a LISTing which 

will never be seen during a RUNning of the program 
(A)NEW (B)M: (C)R: (D)REN 

10. A room-sized, million dollar computer, storing 
and processing huge amounts of data, is called 

a _(B_. (A)Minicomputer (B)Mainframe 

computer (C)Microcomputer (D)Terminal 




USE ANSWER SHEET - DO NOT WRITE ON THIS PAPER 


PILOT/LITERACY TEST 1 - Page 2 

TRUE/FALSE-Mark a T for TRUE or a F for FALSE 

11. M: accepts an answer from the person at the 
keyboard. (F) 

12. ***WHAT'S THAT?*** is called an error message. (T) 

13. The computer executes immediately a command preceded 
by a line number. (F) 

14. A program is executed (started) by typing RUN. (T) 

15. All computers have a CPU (Central Processing 
Unit). (T) 

16. The ATARI, like many other microcomputers, 
uses only one chip. (F) 

17. All computers are too big to fit into a 
briefcase. (F) 

18. Early computers generated great amounts of heat 
because they used thousands of vacuum tubes. (T) 

19. Program commands consist of one or two letters 

followed by a colon(:). (T) 

20. The ATARI computer uses only the PILOT language. (F) 

21. The keyboard is an INPUT/OUTPUT device. (F) 

22. The REN will renumber a program by any increment. (T) 

23. A program is made up of deferred commands that 
are executed when issued a RUN command. (T) 

24. The A: command accepts your input so it can be searched 
for a specific pattern by the MATCH command. (T) 

25. The J: command tells the computer to break 
sequential program execution and jump to a specified 
label. (T) 

26. The video screen, monitor, keyboard, printer, 
tape player, and disk drive are all known as 
software. (F) 



153 


USE ANSWER SHEET - DO NOT WRITE ON THIS PAPER 

PILOT/LITERACY TEST 1 - PAGE 3 

MATCHING: On the Answer Sheet mark the LETTER of the BEST 
answer. Each question has only one answer, but answers may 
be used over again. 

27. The computer ignores this command. 

28. This is anything whose value is 
changeable . 

29. You must type this after a 
Program Command 

30. This command tells the computer 
to print on the screen. 


31. A list of stored commands is 

called a _. 

32. Every character is stored in 

memory as one of these. 

33. After the T: statement, this mark 
causes the next output to appear 
on the same line. 

34. A computer's power is measured 
by how many thousands of these 
it can store in its memory. 

35. This is An OUTPUT device which 
only displays data. 

36. Memory which can be used but (A) RAM 

cannot be changed is known as? (B) ROM 

37. Memory that disappears when you (C) Keyboard 

turn the computer off is called? (D) DATA 

38. What is the information used by 
a computer called? 

39. Where is the programming a computer 
uses for doing arithmetic stored? 

40. What you type on a computer's 
keyboard is stored here. 


(A) \ 

(B) Byte 

(C) Screen 

(D) Program 


(A) Colon (:) 

(B) T: 

(C) R: 

(D) Variable 


MATCHING ANSWERS: 


27. 

c. 

28. 

D, 

29. 

A, 

30. 

B 

31 . 

D, 

32. 

B, 

33. 

A, 

34. 

B 

36. 

B, 

37. 

A, 

38. 

D, 

39. 

B 





154 


WEEK 5 - DAY 3 

1. Return tests, if possible. 

2. In the LAB, introduce JUMP ON MATCH. 

JUMP ON MATCH provides us a way to use the MATCH 
command with a series a answers and to send the 
computer to a particular place in the program based 
upon which answer was matched. Students will find 
this helpful in writing interactive adventure stories. 
Teachers will find this helpful for multiple choice 
tests and quizzes. [Especially for scoring them as 
this provides an easy way to build in a counter 
for the number of correct answers.] 



155 


INSTRUCTOR NOTE 
JUMP ON MATCH 

MATCH (JM:) is similar to the JUMP command, 
to ONE several *LABELed statements. Which 
jumps to is determined by which MATCH atring 
statement is successfully MATCHed. 

JM: statements may be written one of 2 ways: with a 
space between each *LABEL or with a comma and NO spaces 
between the *LABELs. 

JM: *LABEL *LABEL *LABEL *LABEL 

o r 

JM: *LABEL,*LABEL,*LABEL,*LABEL 

The position of each item in the M: string corresponds 
to the *LABEL in the same position in the JM: statement. 

If a MATCH is made with the 3rd item in the M:, the program 
will JUMP to the location of the 3rd *LABEL. 

10 R: MULTIPLE RABBITS 

20 T: HOW MANY RABBITS WOULD YOU LIKE? 

30 T: PICK A NUMBER FROM 1 TO 4. 

40 A: 

50 M: 1, 2, 3, 4 
60 JM: -ONE,*TW0,*THREE,-FOUR 
100 *0NE 
110 T: RABBIT 
120 E: 

200 *TW0 

210 T: RABBIT RABBIT 
220 E: 

300 *THREE 

310 T: RABBIT RABBIT RABBIT 
320 E: 

400 *F0UR 

410 T: RABBIT RABBIT RABBIT RABBIT 
420 E: 

If the INPUT is NOT 1, 2, 3, or 4, or if RETURN was 
hit without an answer, the program execution will bypass 
the JM: command and fall through to the next line. 

Adding two lines would make it jump back to the 
beginning of the program and print the question on the 
screen again. 

Add: 15 *START 

70 J: *ATART 


JUMP ON 
but it jumps 
statement it 
in the MATCH 



INSTRUCTOR NOTE 


JUMP ON MATCH Page 2 

JUMP ON MATCH makes it very easy to write adventures. 
Adventures are stories which present a portion of the 
action and then stop and ask the reader to decide what 
course of action should be taken. Then the story uses that 
decision to set off in a certain direction. Adventures are 
great because they are never exactly the same and can be 
read over and over. 

JUMP ON MATCH is also wonderful for teachers. A quiz 
or test can be written which provides instant feedback for 
each answer. The program can indicate a wrong answer and 
have the student try again or it can tell the student why 
that particular answer is right or wrong. 




157 


WEEK 5 - DAY 4 

1. This is the beginning of a two day LAB activity. 

Much of the today period will be spent introducing 
TURTLE GRAPHICS. The pupils will complete an 
exploratory activity worksheet using the discovery 
method of learning. At appropriate or necessary points, 
suggestions can be made orally to individuals or 

to the class in order to keep the activity flowing 
smoothly. 

2. As a class, the activities from the worksheet can be 
turned into programs. Giving each small program 
(box, triangle, star, etc.) a *LABEL will allow 
them to be used as MODULES. 

3. Tomorrow, work with the modules can continue, with 
the addition of the U: (USE) command and the 

J: (JUMP) command to call them for use. 





INSTRUCTOR NOTE 


MODULES 

A module is a small but complete program which can be 
used within other programs. You create and name the your 
own modules. These modules are like new words or functions 
that you create for your programs. You can use them 
repeatdly at different parts in your program. 

Every module must have a *LABEL at the start to 
identify it for the computer. It must finish with an E: 
(END) command. 

You may name modules anything you want to as long as 
they use either numbers or upper-case letters and have no 
spaces in them. Possible names include: *HELLO, *2HELL0, 
*HELLOFRIEND, *GREETING1. You may not name a module -HELLO 
FRIEND. 

Line Numbers are necessary for all modules. They put 
it into the deferred mode. It is not possible to type a 
module in the immediate mode, but you may use an already 
existing module at any time by JUMPing to it (J:*LABEL). 

In a program, you may JUMP to a module at any time. 

You can also call a module with the USE (U:) command which 
we will introduce tomorrow. 



GRAPHICS EXPLORATORY WORKSHEET NAME_PER_ 

Today, we are going to enter the world of TURTLE 
GRAPHICS. It is a fascinating place where you will be able 
to design shapes and pictures and have the computer draw 
them for you. 

Please, do each thing in the order given. Do NOT 
experiment until instructed to do so. If you get lost, you 
may have trouble wih some of the basic things you will be 
needing to develop more involved graphics programs. 

We will work in DIRECT Mode at first and then move to 
DEFERRED Mode. Type exactly what you see in UPPER CASE and 
be sure to hit RETURN at the end of each command statement. 

When we are in DIRECT Mode, be watching the screen AS 
you hit RETURN because things will happen very quickly and 
you may miss them. 

Record your results before moving to the next 
procedure. 

READY NOW.... 

1. PILOT cartridge in 

2. Machine on 

3. Monitor on. 


Turn to page 2 and START! 




160 


GRAPHICS EXPLORATORY WORKSHEET - Page 2 

1. DRAW 10 <R> Results _ 

2. GR: CLEAR Results _ 

3. GR: DRAW 20 Results _ 

4. GR: DRAW 10 Results _ 

5. GR: TURN 90 Results 

6. GR: DRAW 30 Resuits _ 

7. Repeat #5,6 Results _ 

8. Repeat #5,6 Results _ 

9. Make another box, 20 units on a side. Repeat #3 
and #5 four times to do so. 

Why is this box to the left of the first box and 
not inside it? 

(Mentally walk through what you told the computer to 
do. What direction was it drawing when you finished?) 

10 . 

11 . 

12 . 

13. 

14. 

15. 

16. 


Make 2 more boxes, of different sizes. 

Try to figure where it will be drawn BEFORE you 

draw them. Were you successful? _ 

GR: QUIT Results _ 

GR: CLEAR Results _ 

GR: GO 0 Results _ 

GR: GO 6 Results __ 

GR: GO 10 Results _ 

GR: GO -5 Results 


17. GR: TURN 90 








161 


GRAPHICS EXPLORATORY WORKSHEET - Page 3 

18. GR: GO 15 

GR: GO -30 Results of GO _ 

19. GR: QUIT 
NOTE: 

From now on, remember to type GR: CLEAR (to clear the 
screen) or GR: QUIT (to go back to the text screen) 
before typing in a new figure, unless you want the 
last one to remain on the screen when you draw the 
new one. 

you type in any new 

20 GR: 4(DRAW 30;TURN 90) 

Results _ 

We can make it do more than one thing at a time. 

21. Try to make a triangle (3 sides), pentagon (5), 
hexagon (6). List the ones you were successful 

in making. _ _ _ 

22. GR: 3(DRAW 40;TURN 120) Results _ 

23. GR: 4(DRAW 40;TURN 90) Results _ 

24. GR: 5(DRAW 40;TURN 72) Results _ 

25. What does putting parentheses "()" around the 
graphics commands and then putting a number out in 
front of the parentheses seem to tell the computer 

to do? _ 

26. Look back at the results of #22, 23, and 24. 

Multiply 3 times 120 = _, 4 times 90 = _, 


and 5 times 72 





GRAPHICS EXPLORATORY WORKSHEET - Page 4 


Compare the answers. They all equal _. 

That is the number of degrees in a circle. Maybe we 
have found a way to make any regular polygon: 

Divide 360 by 6 = _. Try to draw a 6-sided 

polygon using these numbers and the same pattern as 
#22, 23, and 24. Did it work? _. 

27. Try to make 7, 9, 11, 15, etc sided figures. 

What shape are we approaching when we try a 36-sided 
figure? A _. 

28. We can put several commands on one line if we 

separate them with semicolons (;). These are called 

Multiple Line Statements. Try this one but, remember, 

don't hit RETURN until you have typed the ENTIRE line. 

GR: QUIT; CLEAR; DRAW 30; TURN 25; DRAW -30; 

TURN 25; DRAW 30 

29. Combine polygons, turns, etc. and see what YOU can 

come up with. Here is one to get you started: 

(Remember to use GR:QUIT first) 

GR: 8(4(DRAW 30;TURN 90);TURN 45);G0 5; 

15(3(DRAW 20;TURN 90);TURN 20) 

What did this one do? 


When you get an interesting one, write it down and 


tell what it did. 





WEEK 5 - DAY 5 


1. This is Day 2 of a two day LAE activity. 

Today the period will be spent exploring introductory 
TURTLE GRAPHICS. 

The pupils will complete the exploratory activity 
worksheet. 

2. As a class, the activities from the worksheet are to 
be turned into programs. Giving each small program 
(box, triangle, star, etc.) a *LABEL will allow 
them to be used as MODULES. 

Use the instructor information sheet to introduce 
modules. Just adding the *LABE1 line before the 
graphics command line and placing the E: line after 
the graphics line will create a module. 


Call the module by the *LABEL with the J: command. 



164 


INSTRUCTOR NOTE 
WEEK 6 - WEEK 8 

LABORATORY TIME: 

These three weeks need to be spent expanding the PILOT 
programming skills of the students. The 

classroom-laboratory pattern of approximately three lab 
days per week can be continued, but students would profit 
from 4 lab days if this can be arranged. 

TURTLE GRAPHICS: 

The class introduction to graphics commands needs to 
be continued but mainly this time will be spent with 
students exploring the Turtle Graphics microworld 
individually. As students gain control of the commands 
already presented, new commands can be provided. 

In many cases the command and its form can simply be 
presented to the students and then they can experiment with 
it until they understand its use. Other times more 
structured presentation of commands and their use will be 
necessary. 

NEW COMMANDS: 

The following are some of the graphics commands which 
need to be introduced during this three week period. 

TURNTO, DRAWTO and GOTO are the absolute value 
commands similiar to the relative value commands TURN, DRAW 
and GO. They do essentially the same things but they are 
oriented to definite points on the screen. 



INSTRUCTOR NOTE 


WEEK 6 - WEEK 8 - Page 2 

TURN turns the turtle in relation to its present 
heading. Thus, RT 90 can end up facing the turtle 
anywhere, depending upon its orientation. TURNTO points 
the turtle at standard compass points with 0 degrees 
pointing straight up, 90 pointing right, 180 pointing down, 
and 270 pointing left. 

DRAW and GO again move the turtle the direction it is 
already facing. DRAWTO and GOTO move it to a specific 
location on the screen which is based on Cartesian geometry 
as on graph paper. At this time the X and Y coordinates 
will also be explained and experienced. 

Other commands to introduce include PEN ERASE to 
correct errors, and PEN color to add excitement to the 
Turtle world by allowing three different color variations 
on the screen. 

MODULE DICTIONARY: 

In connection with the Modules introduced last week, 
EY: (END IF YES) and EN: (END IF NO) need to be added. PA: 
(PAUSE) was used but not really experiemented with by the 
students. 

The Dictionary of Modules which students are building 
during these three weeks includes such Graphics procedures 
as: ^POLYGONS, *STAR, *H0USE, BROCKET, etc. Also included 
should be text modules such as *HELL0 and ^GOODBYE. 



INSTRUCTOR NOTE 


SOUND 


WEEK 6 - WEEK 8 - Page 3 


The SOUND (SO:) command needs to be experimented with 
and once the form is presented, students will do well on 
their own. More formal music may be written by those who 
can read music. These students might have several modules 
called *S0NG1, *S0NG2, etc. 

COMPUTE AND RANDOM: 

COMPUTE (C:) can be used for math, but the major use 
the students will have for this command is as a counter 
within programs. Things can be made to happen a certain 
number of times before the program moves on to other things. 

RANDOM (?) can be used in graphics to make random 
angle turns. This is a visual way to introduce the use of 
random numbers to sixth or seventh grade students. 

REVIEW AND REINFORCE: 


While PILOT can be used with only thirteen to fifteen 
basic commands, it can be seen that there are numerous 
commands which can be added to this starter collection. 

How much each student will be ready for is a matter of 
individual talent and the teacher will know which students 
to encourage by the dangling of more complex commands. 

The eighth week should be spent writing very short Mad 
Libs and Adventures. Many short program examples will be 
necessary to illustrate the way to write these programs. 




INSTRUCTOR NOTE 


WEEK 6 - WEEK 8 - Page 4 

MAD LIBS: ■ 

Mad Libs are much easier to write as all the questions 
are asked before the story is written. Then the story is 
printed out and the words typed in by the reader of the 
story are just plugged into already prepared places in the 
text. 

ADVENTURES: 

Adventures are more complicated as they need to be 
written in such a way as to ask questions at key points in 
the story and then branch the story based upon the answers. 
This is more difficult and longer to do than writing a Mad 
Lib, but in PILOT the use of M: (MATCH) and J: (JUMP) make 
it within the capabilities of many sixth to ninth graders. 

The use of CLEAR SCREEN within a program should be 
introduced to provide the reader with a means of 
controlling the speed at which the text changes. This 
provides user interaction during Mad Libs and Adventures, 
as well as assuring that the user will be able to read each 
screen entirely, no matter what their reading speed. 



WEEK 9 


DAY 1 


DAY 2 

DAY 3 
DAY 4 
DAY 5 


: (R) Explain the FINAL PROJECT to the class; 

Allow each to choose a MAD LIB, a STORY, 
an ADVENTURE (ecourage only the best 
students to try an Adventure as it is 
more difficult), or a GRAPHICS DISPLAY 
with text included; Demonstrate each 
kind of program; Have student start 
planning their project. 

: (L) Students start working on programming 

their project. 

: (L) Students continue project. 

: (L) Students continue project. 

: (L) Students should finish project. 




169 


FINAL PROJECT 

The Final Project may be one of the following: 

MAD LIB, STORY, ADVENTURE, GRAPHICS DISPLAY with text. 
In order to use the required commands in the project, 
the following must be true. 

1. The Mad Lib, Story, and Adventure must all include 
some graphics. 

2. This may be used as a title page or closing page. 

3. The graphics do not have to be part of the actual 
story. 

4. The Graphics Display must include some text material. 

This may be an introduction or a summary of the 
graphics project. It does not have to be on the 
screen at the same time as the graphic. 

5. ALL projects MUST include at least one example 

of each of the following Commands: 

R: (REMARK) 

T: (TYPE) 

A: (ACCEPT) 

GR: (GRAPHICS) - a variety must be used in all 

projects. For graphics display 
projects see below for required 
graphics commands. 

J: (JUMP) and/or U: (USE) 

E: (END) 

PA: (PAUSE) 

SO: (SOUND) 

6. It would be nice, but is required, to have some 
of the following commands included also: 

M: (MATCH) 

TY: TN: JY: JN: (TYPE and JUMP on YES and NO) 

JM: (JUMP ON MATCH) 

C: (COMPUTE) - May be used as a counter 
? (RANDOM) 




170 


FINAL PROJECT - Page 2 

7. Those doing a Graphics Project must include, 

in ADDITION to the requirements for ALL projects 
listed in #5, at least one example of each of 
the following: 

DRAW 

DRAWTO 

TURN 

TURNTO 

GO 

GOTO 
PEN UP 
PEN DOWN 

PEN color (red, blue, or yellow) 
a repeated command 
at least 3 *LABELed modules 

8. It would be nice, but not required, to have 
the following also: 

CLEAR 

CLEAR 

use of X and Y coordinates 
PEN ERASE 

movement of objects 

9. Projects will be demonstrated to the class next week. 




171 


EXAMPLE STARTER PROGRAM FOR ADVENTURE 

100 R:***INTERACTIVE ADVENTURE*** 

110 J:*R00M1 
120 *CLEARSCREEN 

130 T: [hit ESC once then hold CTRL and hit CLEAR] 

140 E: 

150 *R00M1 

160 T:YOU ARE IN A LARGE ROOM. \ 

170 T:AT THE FAR END OF THE ROOM IS A NARROW STAIRWAY. \ 
180 T:THAT HEADS UP THROUGH AN OPENING IN THE CEILING. \ 
190 T:IN THE CENTER OF THE SIDE WALL IS A CLOSED DOOR. \ 
200 T:WHICH WAY DO YOU WANT TO GO? 

205 T:DOOR 
210 T:STAIRS 
215 A: 

220 U:*CLEARSCREEN 
220 U:*CLEARSCREEN 
225 M:D,S 

230 JM:*DOOR,*STAIRS 
235 J:*R00M1 
240 *DOOR 

245 T:YOU TRY TO OPEN THE DOOR BUT IT IS LOCKED. \ 

250 T:YOU DISCOVER A KEY HANDING ON A NAIL ON THE WALL. \ 
255 T:WHAT DO YOU DO? TRY THE KEY OR USE THE STAIRS? 

260 T:KEY 
265 T:STAIRS 

270 A: 

275 U:*CLEARSCREEN 
280 M:K,S 

285 JM:*HALL, *STAIRS 
290 J:*R00M1 
295 *HALL 

300 T:THE KEY OPENS THE DOOR. IT CREAKS. AS IT OPENS\ 

305 T:YOU SEE DARK HALLWAY. YOU FIND A LIGHT SWITCH ON \ 

310 T:THE WALL AND TURN IT ON. A LINE OF VERY \ 

315 T:DIM LIGHT BULBS CREATES AN EERIE GLOW. \ 

320 T:WHAT DO YOU WANT TO DO? 

330 T:GO AHEAD 

340 TiTURN BACK 
350 A: 

360 U:*CLEARSCREEN 
370 M:G,T 

380 JM:*HALLUP,*R00M1 
390 J:*HALL 
400 *HALLUP 

405 T:AS YOU ENTER THE HALLWAY THE DOOR SLAMS SHUT. THE \ 
410 T:CORRIDOR SLOPES STEEPLY UPWARD AND CURVES TO THE \ 
420 T:RIGHT. YOU KEEP CLIMBING UNTIL YOU REACH A DOOR. \ 
430 T:YOU TOUCH THE DOOR AND IT MOVES EASILY. 

440 T:WHAT DO YOU WANT TO DO? 

450 T:GO AHEAD 

460 T:TURN BACK 
470 A: 


£ 




172 


480 U:*CLEARSCREEN 
490 M:G,T 

500 JM:*R00M2,*HALLD0WN 
510 J:*HALLUP 
520 *STAIRS 

530 T:THE NARROW STAIRS CREAK LOUDLY AS YOU CLIMB. \ 

540 T:SLOWLY, CAREFULLY, YOU CLIMB UPWARDS. YOU \ 

541 T:NEAR THE DARK OPENING IN THE CEILING. 

550 T:WHAT DO YOU WANT TO DO? 

560 T:GO AHEAD 
570 T.-TURN BACK 
580 A: 

590 U:*CLEARSCREEN 
600 M:G,T 

610 JM:*R00M2,*R00M1 
620 J:*STAIRS 
630 *R00M2 

640 T:YOU ARE IN A LARGE ROOM WITH SUN POURING IN \ 

650 T:THROUGH FOUR TALL WINDOWS IN THE SOUTH WALL. \ 

660 T:THE ROOM CONTAINS NO FURNITURE BUT THE WALLS ARE \ 

661 T:COVERED WITH BRIGHTLY PAINTED PICTURES OF CLOWNS. 

670 T:THERE IS A DOOR IN THE NORTH WALL, AND A NARROW \ 

680 T:STAIRWAY EXITS DOWN THROUGH AN OPENING IN THE FLOOR. 

690 T:WHAT DO YOU WISH TO DO? 

700 T:OPEN DOOR 

710 T:USE STAIRS 
720 T:STAY HERE 
730 A: 

740 U:*CLEARSCREEN 
750 M:0,U,S 

760 JM:*HALLDOWN,*STAIRDOWN,*END 
770 J:*R00M2 
780 *HALLDOWN 

790 T:THE DOOR OPENS. YOU SEE BEFORE YOU A DIMLY LIT \ 

800 TiHALLWAY. THE SMALL BULBS GIVE IT AN EERIE FEELING. \ 

810 T:AS IT SLOPES STEEPLY DOWNWARD, YOU MUST WALK \ 

820 T:CAREFULLY TO AVOID SLIPPING. YOU SEE A WOODEN DOOR. 
830 T:WHAT DO YOU WISH TO DO? 

840 T:OPEN DOOR 

850 T:TURN BACK 

860 A: 

870 U:*CLEARSCREEN 
880 M:0,T 

890 JM:*R00M1,*HALLUP 
900 J:*HALLDOWN 
910 *STAIRSDOWN 

920 T:THE NARROW STAIRS DIRECT YOU DOWN. YOU WALK \ 

930 T:SLOWLY, BUT THEY CREAK LOUDLY. WHEN YOU REACH \ 

940 T:THE BOTTOM, YOU TAKE A FEW STEPS AND LOOK ABOUT. 

950 J:*R00M1 
960 *END 

970 T:USE YOUR OWN IMAGINATION NOW. YOU ARE ON YOUR OWN. 
990 E: 





173 


EXAMPLE PROGRAM FOR MADLIB 


10 

15 

20 

25 

30 

35 

40 

45 

50 

55 

58 

60 

63 

65 

68 

70 

73 

75 

80 

82 

85 

86 

87 

88 
90 
95 
100 
105 
110 
115 
120 
125 
130 
135 
140 
145 
150 
155 
160 

165 

166 

167 

168 
180 


MAD LIB #1 

TYPE IN EACH WORD OR PHRASE AS ASKED, 
5 NOUNS 
$ NOUN 2 
$N0UN5 
$N0UN7 
$N0UN3 
$N0UN1 
$NOUN6 ' 

$N0UN4 
A VERB 
$VERB 

3 ADJECTIVES 


A:$ADJ2 
T: 

A:$ADJ1 
T: 

A : $ADJ3 
T: 

T: A PLURAL NOUN 

T: 

A:$PLNOUN 
T: 

T:AN ADVERB 
Tr 

A:$ADV 
T: 

T: 

T: 

T: 

PA:300 





EXAMPLE PROGRAM FOR MADLIB 


200 

201 

202 

210 

220 

230 

240 

250 

255 

260 

270 

275 

276 
280 
290 

295 

296 
300 
310 

315 

316 
320 
330 
335 
340 
345 
350 
355 
360 
365 


T 

T 

T 

T 

T 

T 

T 

T 

PA 

T: 

T: 

PA 

T 

T 

T 

PA 

T 

T 

T 

PA 

T 

T 

T 

T 

PA 

T 

T 

T 

T 

T 


*%*%%%*%# DRIVING TIPS ********* 


DRIVING A CAR CAN BE FUN IF YOU 
FOLLOW THIS $ADJ1 ADVICE: 

: 150 

1. WHEN YOU ARE MAKINGA $ADJ2 TURN,\ 

ALWAYS BLINK YOUR $N0UN7 THREE TIMES. 

: 150 

2. IF YOU SEE A $N0UN6 ON THE LEFT\ 

ALWAYS $VERB YOUR $N0UN1 OUT OF THE WINDOW, 
150 

3. EVERY 2000 MILES HAVE YOUR $N0UN3\ 

INSPECTED AND YOUR $N0UN4 CHECKED. 

: 150 

4. IF YOU ARE APPROACHING A $N0UN2 ZONE,\ 

WATCH OUT FOR $ADJ3 $PLNOUN IN\ 

THE CROSSWALK. 

: 150 

5. ABOVE ALL, DRIVE $ADV AND $VERB\ 

YOUR HORN. 

THE $N0UN5 YOU SAVE MAY BE\ 

YOUR OWN. 












180 


DAY 1 

DAY 2 
DAY 3 

DAY 4 

DAY 5 


WEEK 10 

Begin demonstration of completed Final 
Projects; Conduct BOOK CHECK for damaged or 
lost books; check for lost or damaged disks. 

Continue demonstrations. 

If it is desired, a Final Exam may be given 
to the class at this time. If not, the 
class may use the time at the computers to 
explore ideas developed as they watched the 
Final Projects. (If no Final Exam is given, 
the class could be allowed to continue work 
on their Final Projects until today.) 

Demonstrate any last minute Final Projects; 
Collect disks. 

Depending upon Lab closure procedures, 
students may be allowed to work in the lab one 
last time. 







APPENDIX B 


SUGGESTED RESOURCES FOR TEACHERS 


There are three areas of information necessary for the 
successful teaching of a class in Computer Literacy which 
uses Atari PILOT to teach programming skills. These areas 
are Computer Literacy itself, the Atari computer, and 
PILOT. The following are resources which are helpful, in 
fact almost necessary, for gaining information in these 
areas. 

Computer Literacy 

There are many sources of information about computer 
literacy, but some of the most helpful to the junior high 
school teacher are as follows: 


Clark, Gary. Computers and young minds . Datamost, 
California, 1983. 

Conniffe, Patricia. Computer dictionary . Scholastic, Inc., 
New York, 1984. 

Papert, Seymour. Mindstorms: children, computers, and 
powerful ideas. Basic Books, New York, 1980. 

Relf, Patricia A. Computer thinking . Scholastic, Inc., New 
York, 1984. “. ~ “ .. 

Richman, Ellen. Spotlight on computer literacy . Random 
House, Inc., New York, 1982. 

Stouffer, Marjorie and Grove, Maria. Computer calling . 
Educational Insights, California, 1982. 

Stouffer, Marjorie and Grove, Maria. A bit of byte. 
Educational Insights, California, 1982. 





ATARI COMPUTERS 


Larsen, Sally Greenwood. Computers for kids . Atari edition, 
Creative Computing Press, New Jersey, 1981. 

Mentley, David E. ABCs of Atari computers . Datamost, 
California, 1984. 

Poole, Lon. Your Atari computer - a guide to Atari 400/800 
personal computers . Osborne/MeGraw Hill, California, 1982 . 


PILOT 

ATARI Corporation. Student PILOT reference guide . ATARI 
Corporation, USA, 1981. 

Conlan, Jim. Atari PILOT for beginners . Reston Publishing 
Company, Inc., Virginia, 1983. 

Hardy, Jack B. Adventures with the ATARI . Reston Publishing 
Company, Inc., Virginia, 1984. 

Kohl, Herb. Atari PILOT activities and games . Reston 
Publishing Company, Inc., Virginia, 1983. 

Thornburg, David D. Picture this ! Addison-Wesley Publishing 
Company, Massachusetts, 1982. 

Kunkin, Dorothy and Vann, Keith. PILOT primer, the PILOT 
programming language instruction manual . ATARI Corporation, 
USA, 1980. 


JOURNALS AND MAGAZINES 

A.N.A.L.O.G. Computing . Analog 400/800 Corporation. 

ANTIC, The ATARI Resource . ANTIC Publishing Company. 

Classroom Computer Learning . Pitman Learning, Inc. 

COMPUTE! The Journal for Progressive Computing . COMPUTE! 
Publications, Inc. 

Electronic Learning. Scholastic, Inc. 


Teaching and Computers . Scholastic, Inc 




