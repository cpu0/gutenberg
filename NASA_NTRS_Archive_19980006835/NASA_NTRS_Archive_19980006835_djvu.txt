NASA-TM-1 12502 


Using ADA tasks to simulate operating equipment 


Louis A. DeAcetis 

Oron Schmidt and Kumar Krishen 


Reprinted from COMPUTERS IN PHYSICS, September/October 1990 © American Institute of Physics 




Using ADA tasks to simulate operating equipment 

Louis A. DeAcetis 

Physics Department, Bronx Community College/CUNY, Bronx , New York 10453 

Oron Schmidt and Kumar Krishen 

NASA, Johnson Space Center, Houston , Texas 77058 

(Received 15 November 1989; accepted 5 January 1990) 

A method of simulating equipment using ADA tasks is discussed. Individual units of 
equipment are coded as concurrently running tasks that monitor and respond to input signals. 
This technique has been used in a simulation of the space-to-ground Communications and 
Tracking subsystem of Space Station Freedom. 


INTRODUCTION 

Many computer simulations 1-3 written in procedural lan- 
guages (e.g., C, FORTRAN, or PASCAL) simulate sys- 
tems of equipment by tracking signals through the compo- 
nents. Although this may represent a logical solution to the 
problem, it usually requires that a piece of equipment know r 
not only what it is connected to for input, but also the desti- 
nation of its output. This is contrary to the way equipment 
generally operates. For example, an amplifier may have 
inputs of line voltage, signal level (volts), and load imped- 
ance, and control settings of gain and ON/OFF switch po- 
sition. Its output would include the output signal level, and 
perhaps some parameter indicating the quality of the out- 
put. When the input values change, the values of the output 
parameters change accordingly. The destination of the out- 
put signal is of no concern to the amplifier, and it therefore 
does not know (or care) what is connected to its output. 
(Note that we are treating loading as the input parameter 
“load impedance.’') 

The ADA language is especially suited to simulating a 
piece of equipment because of the “task" construct. 4 Each 
piece of equipment can be modeled as a concurrent free- 
running task that constantly monitors its input values and 
adjusts the outputs accordingly. As each unit reacts to 
changes in its input values, one can monitor the signal flow 
through a collection of components by placing “sensors” at 
strategic locations. Issues of signal transition delays, and 
other equipment characteristics can be addressed as need- 
ed. 

I. METHOD 

Each unit of equipment is modeled as an ADA task. The 
individual equipment characteristics are supplied in sepa- 
rate ADA packages (one for each unit of equipment), 
which include the appropriate transfer function (s) for the 
input signal ( s ) . All of the values that are external to a piece 
of equipment are stored in a global database (or “black- 
board” data structure^), and the individual components 
link their internal values to these blackboard values. Each 
component task then monitors those blackboard values 
that serve as input to the equipment it is simulating, and 
while the equipment is ON and running, appropriate out- 


put values for that equipment are generated and written 
out to the “blackboard” where they can then be monitored 
for input by those tasks using them. For example, if all of 
the equipment is plugged into the same power source, then 
each monitors the blackboard value of the line voltage. If 
the line voltage vanishes (“blackout”) or is low (“brown- 
out”), then this can be incorporated into the determination 
of the appropriate output signal (s). 

In order to prevent a task from “running” when the 
equipment is in the OFF state, an algorithm is used that 
requires that the equipment be turned ON in order for it to 
process input information. Table I contains the structure of 
this ON/OFF algorithm, which is coded in a generic ADA 
package so that it can be implemented (“instantiated” in 
ADA terminology) for each piece of equipment. One of the 
features of the algorithm is that it will accept and ignore 
any ON/OFF requests that are redundant, rather than 
queue them as might normally be the case with ADA task 
rendezvous (i.e., if an ON command is sent to a task that is 
already ON, then the command is discarded ) . Another fea- 
ture is that the task of a piece of equipment in the OFF state 
does no processing, but merely waits for a rendezvous to 
turn it ON. This minimizes the use of CPU resources. 


II. ILLUSTRATIVE EXAMPLE 

Consider the equipment depicted in Fig. 1, which consists 
of a saw-tooth function generator attached to a pulse gener- 
ator/amplifier. The circled numbers refer to sensor or test 
points whose values are to be monitored. The waveform 
produced by the function generator is used by the pulse 
generator to determine the pulse width as follows: While 
the value of the input to the pulse generator is at or beyond 
a certain threshold value ( taken as 0. 5 V ) , the value of the 
pulse generator output is + 10.0 V; when the value of the 
input is below threshold, then the pulse generator output is 
0.0 V. We thus have a waveform transformer that converts 
a saw-tooth signal into a rectangular pulse. The frequency 
of both active signals is the same, and the pulse width can 
be varied by changing the amplitude of the saw-tooth sig- 
nal. In addition, effects of a “brownout” (line voltage less 
than a nominal value of 120 V) have been incorporated in 


COMPUTERS IN PHYSICS, SEP/ OCT 1990 5Z1 



TABLE I. ADA package with task code for algorithm used to simulate an 
equipment unit. 


— Package Genetic Equipment 

-- Package contaTninq taak to implement specific instances of equipment 
Last update: 11-02-89 LAO 


—This package has Ada procedures as forma L parameters and therefore 
— must be instantiated with procedures which Implement the tranefer 
— functions of the actual equipment used. 

— In Particular: 

— Procedure Set_OFr_Values : Parameter values for equip. OFF; 

— Procedure Set_INITIAL_ON Values: " Values for equipment just turned ON; 

-- Procedure Set_Running_VsTues : * Values for equipment ON 4 running 


generic 

with procedure Set_OFF_Values; 

with procedure Set_INITIAL_ON Values; 

with procedure Set_Runninq_Va?ues; 

package GBNkriC_EQUIPMENT is 

task SWJTCH_CONTROL is 
entry CLOSE_SWITCH; 
entry open switch; 
end SWITCH_C5NTR0L; 

procedure DESTROY; 

end GENERIC_EQUIPMENT; 


package body GENERI C_EQU I PHENT ia 

SWrTCH_IS_OPEN : boolean true; — 


Switch etarts open (equip, is OFF) 
Task must therefore be "turned on" 
before it will "run". 


task body SWITCH_CONTROL is 
begin 

SWITCH_OPEN_OFF : 
loop 

switch_closed_on: 

loop 

— '** Switch Control Loop *** — 

5WITCH_COMTROL : 

if SWITCH_IS_OPBN --Select when SWITCH_IS_OPEN: 

then — — Wait for rendezvous to close it 

select 

accept OPEN_SWITCH; — Accept and ignore OPEN requests 

or 

accept CLOS E S w I TCH ; — Where Switch la actually Closed 

SWlTCH_lS_OPEN false; 


Set_INITlAL_ON_Va lues ; — 


exit SWITCH_CONTROL; 
end select; 

else 

select 

accept CL0SE_5WI TCH ; — Accept and Ignore CLOSE requeata 

exit SWITCH_COWTROL; 
or 

accept OPEN_SWITCH; — Where Switch is actually Opened 

SWITCHISOPEN true; 
exit SWITCHCLOSEDON; 

else 

exit $WITCH_COKTROL; 
end select; 
end if; 

end Loop SWITCH_CONTROL; 

— *** End Switch Control Loop *••-- 
--Should only get here if Switch Is Closed/ON: 


Sst_Runn 1 ngVal ues; — 
dalay 0.091; --delay/Reschedulej 
end loop SWITCHCLOSEDON; 

— Should only get here if Switch was just opened: 

Set_orr_Values; — 
delay 9.091; — delay/Reachadule; 

end loop SWITCH_OPEN_OFF ; 
end SWITCH_COMTROL; 

procedure DESTROY ia --Command to abort task (for orderly shutdown) 
begin 

abort SWITCH_CONTROL; 
end DESTROY; ~ 

end GEMERIC_EQ(JI PHEHT; 


that the output levels of each device will decrease until a 
“minimum operating voltage”^for the equipment is 
reached: Output from the f ^ e & en- generator vanishes 
when the line voltage drops below 90 V, and for line vol- 


Function 


Pulse 

Generator 


Generator/^ 

vLsJ 



e 


® 




Main Power Line 


FIG. 1 . Illustrative Example equipment setup consisting of a (saw-tooth ) 
function generator whose output drives a pulse generator. Circled values 
indicate sensors or test points. 



FIG. 2. Flow diagram of data and command information flowing between 
the blackboard global database, the ADA equipment simulator tasks, and 
the main procedure of the Illustrative Example. Straight line (3/ 
M) = data; dashed line ( ) — commands. 


iuwctecvx 

tages below 80 V, the output from the p u lse generator also 
ceases. Figure 2 is a dataflow diagram for this equipment 
setup. 

Table II contains ADA code that implements the 
above for each piece of equipment and includes the struc- 
ture of the global database. Table III is a main ADA proce- 


TABLE II. ADA code for Illustrative Example equipment, including the 
Global Database definition and the packages for the function and pulse 
generators. 


--package GLOBAL VARIABLES ia a global database where shared info is 
— stored and wKere connections between signals are made. 

--Last Update: 11-02-89 LAD 


package GLOBAL_VAR TABLES is 

--Power Source Quantities: 

STD_L I N E_VOLTAG E : constant 

MAX~LINE VOLTAGE : constant 

LlNf_VOLTAGE 5 float 

--Function Generator Signals and Levels 

FUNCTION GEMERATOR_ANPLITUDE : float 

FUNCTION_GE«ERATOR_OUTPUT : float 

— Pulse Generator Signals and Levels 
PULSECEMERATOR AMPLITUDE : float 

PULSE_TRIGGER_LEVEL ; float 

PULSE_GENERATOR_OUTPUT : float 

--Connect Pulse Generator trigger input 
PULSE_TRIGCBR_LINE : float renames FUNCT I ON_GENERATOR_OUTPUT ; 

end global_variabc.es ; 


-- Function Generator Simulator — Last update: 11-03-89 LAD 


— * Package with Procedures for the simulation of a Function Generator 
— * which will generate a Saw-tooth waveform of variable amplitude 
— * (nominal value is 1.0 V). Output is degraded if L 1 NE_voltage_in 
— * is less than 120 V ("brownout"), and ceases when L I NE_VOLTAGE_IN 
— * is < 80 V ("blackout"). Louis A. DeAcetis - 


float :- 128.0; 
float 139.9; 
STD_LI NE_VOLTAGE; 


19.0; 

8.5; 

8 . 8 ; 

line to Funct. Gen. Output 


with GENERIC_EQU1 PHENT; 

with GLOBAL_VARI ABLES ; -- Global Database where signal values are stored 

— and signal connections are made 


package FUNCTI ON_GENERATOR is 

procedure 0FF_values; 
procedure INITlAL_ON_Values; 
procedure OUTPtIT_Va lue ; 


package EQUIPMENT is new GENERIC_EQUI PHENT ( 

OPF_Va Lues , INlTIALONValues, 0UTPUT_VaIue) ; 


type PROBE_NAHBS is (ON_OFF_SM, OUTPUT SIGNAL); 
type probe - ARRAY_TYPE is array ( probe_nXmeS) of float; 

PROBE : probearraytype :* (others ■ > 0.9); — Initialize sensors to 0 


COUNTER : float : » 0.0; — Cycle count 


end FUNCT ION_GENERATQR ; 


with calendar; 

package body FUNCTIONGENERATOR is 


— Explicitly associate local variables with values in Global Database: 
LINE_V0LTAGE_1M : float renames GLOBAL_VARl ABLES . LI NEVOLTAGK; 

STD LINE VOLTAGE: float renames CLOBALVARI ABLES . STDLI NEVOLTACE; 


522 COMPUTERS M PHYSICS, SEP/OCT 1090 




TABLE II. ( Continued .) 


TABLE III. ADA code for the procedure SIMULATE which displays 
the sensor and signal values for the Illustrative Example equipment. 


AMPLITUDE : float renames GLOBALJVAR I ABLES . FUNCTION_CENERATOR_AMPLITUDE; 
OUTPUT : float [«nml GLOBA L_VAR I ABLES . FUNCT I ON_GENEHATOR_OUTPUTf 


INCREMENT : calendar .day_du ra t ion ; 

SAN_TOOTH_VALUE : float; 

BASE TIME : calendar ,day_duration :■ ca lendar . seconds (ca lendar .clock) ; 


— Main program to exercise equipment: Function generator 

Pulse generator 

— and display sensor readings. 

— Last Update: 11-02-99 Louis A. DeAcetis 


procedure OFF_Values is 

begin — Set outputs to values for equipment in OFF state: 

PROBE (ON_OFF_SW| 2- 0.0; 

OUTPUT :• 0.0; 

PROBE (OUTPUT_SIGNAL) 2- OUTPUT; 

end; 

procedure INITlAL_ON_Values Is 

begin — Set values for when equipment just turned ON: 

PROBE (ON_OFF_SW) 1.0; 

OUTPUT :■ 0.0! 

PROBE (OUTPUT SIGNAL) OUTPUT; 

SAW_TOOTH_VAEu E : - 0 . 0 ; 

BASE_TIME~ :■ calendar . seconds (ealenda r .clock) ; 

end ; 


with GLOBAL_VARI ABLES ; 
with FUNCTIONGENERATOR; 
with PULSE_GENERATOR; 

with text_io; 
use te*t~i°; 

— DOS interface packages for Alsys or Meridian compilers 
—with tty; with video; — Meridian compiler 
— with DOS; — Alsys compiler 

procedure SIMULATE is 


procedure OUTPUT_VALUE is — Set output values for equipment ON and running 

function WAVE_VALUE (AMPLITUDE : float) return float is 

function SAW_TOOTH return float is 
begin 

INCREMENT ealenda t . seconds (ca lendar . clock) - BASBTIME; 

SAW TOOTH VALUE :« f loat { I NCR EM ENT 1/5.0; 
if 5 an_to5tH_value > 1.0 then 

SAW TOOTH_VALUE :« i.0; 

BASE_TIME :■ calendar . seconds (calendar .clock) ; 

end if; 

return SAW_TOOTH_ VALUE; 
end SAWTOOTH; 


begin 

return AMPLITUDE*SAW_TOOTH ; 
end WAVE_VALUE; 


COUNTER COUNTER ♦ 1.0; — Count cycles for monitoring purposes 

if LINE VOLTAGE_IN < 80.0 then — "BLackout* condition 
OUTPUT :■ 0.0; 

else 

OUTPUT LINE_VOLTAGE_!N/STD L I NEVOLTAGE* --"Brownout factor* 
WAVE_VALUE (AMPLITUDE) ; 

end if; 

PROBE (OUTPUT_5IGNAL) i- OUTPUT; 
end OUTPUT_VALUE; 


end FUNCT ION_GENERATOR ; 


-- Pulse Generator Simulator — Last Update: 11-07-99 LAD 


» Package with Procedures for the simulation of a Pulse Generator which 

generates a pulse of heiqht PULSE_G£NERkTOR_AMPLITUDE when the value 
— * of the TRIGGER INPUT is greater than the value of the TRIGGERLEVBL 
— » (output is zero otherwise). Output is degraded if LINE_VOLTACE_in is 
— * Less than 120 V ("brownout"), and ceases when LINEVOLTAGE IN is 
< 90 V ("blackout"). Louis A. DeAcetis 


with GENERIC_EQUIPMENT; 

with GLOBAL_VARI ABLES ; — Global Database where signal values are stored 

and signal connections are made 


package pulsE_generator is 

procedure OFF_Values; 
procedure [NlTIAL_0N_Value9; 
procedure OUTPUT_Va 1 ue ; 


package 1NT_I0 is new inteqer_io { integer ) ; 
use INT^IO; 

package FLOT_IO is new f 1 oat_i o ( f loa t ) ; 
use FLOT_IO; 

VALUE : float :* 0.0; 

PARAM : character :» ascii. nul; 

subtype ABS1SSA is integer range 5.. 36; 
subtype ORDINATE is integer range 9.. 23; 

XI, X2 : ABSISSA; 

LAST_LINE : ORDINATE i- ORDI NATE ’ 1 as t ; 

THARKER : ABSISSA; 

BLANK LINE : s t r i ng ( ABS I SSA ' f i r s t . . ( ABS I SS A ' las t ♦< ) > (others ■>’ ’); 

WINOOW_ARRAY : a r ray (ORDINATE) of str i ng ( ABSI SSA ' f i r st . . ( ABS I SSA' laBt+4) ) 
:- (Others -> BLANKLINE) ; 


type PROBE_NAME is {MA I N_POWER_LINE VOLTAGE, 

f_gen_on_off_swT 

F_G EN_OUT PU T , 
P_GEN_ON_OFF SW, 

p_gen_o ut pu t T ; 


type PROBE_ARRAY_TYPE is array ( PROBE_NAME) of float; 


PROBE : PROBE ARRAY_TYPE (others ■> 0.0); — Initialize sensors to B 
PRE V 1 OUS_PRQBE — : PROBE_ARRAY_TYPE :■ (Others -> 0.0); 

COUNTER: PROBE_ARRAY_TYPE (1.0, Others »> 0.0); 


--Create link between local values and Global Values: 

LINE VOLTAGE : float renames GLOBAL_VARI ABLES . L I NEJ/OLTAGE; 

MAXLINEVOLTAGE : float renames GLOBALVARIABLES.MAXLINEVOLTAGE; 
FUNCTION CENERATOR_AMPLITUDE : float renames 

GLOBAL_VARI ABLES . FUNCT I ON_GENERATOR_AM PL I TUDE ; 
PULSE GENERATOR_AMPLITUDE : float renames 

GLOBAL_VAHI ABLES. PULSE_GENER ATORAMPL I TUDE ; 
PULSE TRIGGER LEVEL : float renames GLOBAL_VAR I ABLES. PULSE_TR IGGER^LEVEL; 


procedure SBT_CURSOR ( X: in integer; 

Y : in integer) 

SCREEN_WI DTH : integer :- 80; 

XX, YY : integer; 
beg i n 


— NOTE: Uses ANSI escape 
is — sequences. Requires 
— DRIVER - ANSI. SYS 
— in MS-DOS CONFIG.SYS file 


if X < 1 then XX 1; 

el si f X > SCREENWIOTH then XX SCREENWIOTH ; 
else XX X; 
end If; 


if Y < 1 then YY 1; 

elsif Y > 24 then YY 24; 
else YY Y; 
end if; 


package EQUIPMENT is new GENER IC_EQU I PM ENT ( 

OFF_Va lues , 1 NITI AL_ON_Va lues ,OUTPUT_Va lue ) ; 


type PROBENAMES is (ONOFPSW, OUTPUTSIGNAL) ; 
type PROBE ARHAYTYPE is array ( PR08E_NAMES) of float; 

PROBE : PROBE_ARRAY_TYPE :« (others ■> 0.0); —Initialize sensors to 0 


COUNTER : float 0.0; — Cycle count 


end PULS E_GENER ATOR ; 


package body PULSEGENERATOR is 


--Explicitly associate local variables with values in Global Database 
LINE VOLTAGE IN : float renames GLOBAL VARI ABLES . LINEVOLTAGE; 

STD_LINE_VOLTAGE: float renames GLOBAL’VARI ABLES. STD_L IN E_VOLTAGE; 


AMPLITUDE 


float renames GLOBALJVAR IABLES. PULS E_GEN ERATO H_AM PL I TUDE ; 


TR IGGER_ INPUT 
TRIGGER_LEVEL 


float renames GLOBAL_VARI ABLES . PULSETRIGGERLINE; 
float renames GLOBAL_VARI ABLES . PULSE_TR IGGERLEVEL; 


OUTPUT 


float renames GLOBAL_VARI ABLES . PULS E_GENERATOR_OUTPUT; 


procedure OFF_Valuea is 

begin --Set outputs to values for equipment in OFF state: 

output :* 0.0; 

PROBE (OUTPUT S IGNAL) :• OUTPUT; 

PROBE (ON_OFF_SW) 0.0; 

end OFF_Values; 


procedure I N I TI AL_ON_Va lues is 

begin — Set outputs for values when equipment just turned ON: 

PROBE (ONOFFSW) :- 1.0,* 

output 0.0; 

PROBE (OUTPUTS IGNAL) :- OUTPUT; 
end ; 

procedure OUTPUT_VALUE is —Set output values for equipment ON and running 

begin 

PROBE (ON 0FF_8W) :• 1.0; — Switch sensor On 

COUNTER COUNTER ♦ L.0J 

if LINE VOLTAGE IN < 90.0 or — "Blackout" condition check 
~ TrTgCER_1NPUT < TR IGGBR_L EVEL 

then 

OUTPUT :- 0.0; 

else 

OUTPUT :* LINE_V0LTACE_1N/STD LINB_VOLTAGE » —"Brownout factor 
AMPLITUDE; ” “ 

end if; 


text io.put(ascii .esc t "I" fc i nteger ’ image ( YY* 190 ) ( 3 . . 4 ) i 
t integer’ image ( XX+ 1 000 ) (3. .5) t "H") ; 
end SET_CURSOR; 

procedure clear_SCR£EN is 
beg 1 n 

text_io. put ( asc i i . esc t "(2J"); 
end CLEAR_SCREEN; 

procedure DISPLAY_SENSORS is 
begin 

— Display screen labels: 
if COUNTER (MAIN POWBR_LINE_VOLTAGE) - 1.0 then 
SET CURSOR (2,1 ) ; “ 

text io. put ("Probe Reading Cycle Count"); 

for I Tn PROBE_NAHE' FIRST. . PROBENAME ' LAST loop 
S ET_CURSOR ( 2 , PROBE NAME ' pOS ( I ) +2) j 
text_to .put (PROBE_NAME 1 IMAGE ( I ) ) ; 
end loop; 
end if; 

for I in PROBE_NAME ' FIRST. ,PROBE_NAME* LAST loop 
if COUNTER ( I } /■ 0.0 then 

SET CURSOR ( 49 , PROBENAME ' pos ( I ) +2 ) ; put ( integer (COUNTER ( I) ) ,5) ; 
end i7; 

if not (PROBE (1) - PREVIOUSPROBE(I)) then 
SET CURSOR (27, PROBE_NAME‘ pos ( i ) *2) ; 
putlPROBEd) , 3, 2, 0); 

PREVIOUS PROBE ( I ) PROBE ( I ) ; 

end if; 
end loop; 

new line; — Force output to screen with new_line 
end DISPLAYSENSORS; 

procedure PL0T_S1GNALS is 
begin 

— Scroll "window" contents: 

—include following if Meridian Compiler: 

--video. scroll gp<l, ORDINATE* firet-l, ABSISSA * f irst-1, 

- ORDINATE* last, ABSISSA* last*2) ; 

—V Include following if not Meridian Compiler 
for IY In ORDINATE* flret+1. .LAST_L1NE loop 
SET_CURSOR (ABSISSA* flrit,tY-l) ! 
text lo.put (WINOOWARRAY(IY) ) ; 

WINDi5W_ARRAY(IY-l) WINDOW ARRAY { 1 Y ) ; 
end 1 oop ; 

— Blank out last line: 

W1NDOWARRAY (LASTLINE) :« BLANKLINE; 


PROBE (OUTPUTSIGNAL) OUTPUT; 
end OUTPUT_VALUE ; 
end PULSEJ3ENERAT0R; 


WINDOW ARRAY (LASTLINE) ( 

(ABSISSA* las t- ABS I SSA* first) /2+ ABS ISSA’ first+1) :• * | * i 

XI :- integer (PROBE (F GEN_OUTPUT) * float I ABSISSA’ last-ABSISSA' first)/ 
2 . 0/FUNCTION GENERATOR AMPLITUDE) ♦ ABS ISSA 'first; 


524 COMPUTUS M PHYSICS, SEP/OCT 1890 



TABLE III. ( Continued . ) 


TABLE III. ( Continued .) 


X2 i- integer (PROBE (P_GEN_OUTPUT) * float (ABSISSA* laat-ABSISSA 1 f 1 E*t ) / 

2 . 0/PULSK_GENERATOR_AMPLITUDE| ♦ (ABS [ 9S A ' laa t + ABS I SS A 1 flrat)/2-l; 

WINDOWARRAY ( LASTL2ME) (XI) :■ '♦*} 

WINDOWARRAY (LAST_LINE) (X2+3) :• ***; 

SET_CORSOR ( ABS 1 SSA ' f 1 rat, LAST_LI»E) ; 
te«T_io.put (WI MDOW_ARRAY ( LAST_LI HE) ) } 

nevline; -- Force output with new_line 
end PLOT_S IGNALS ; 


beg In 

--Set up Screen for displays: 

CLEAR_SCREEM; 

--Draw "bos" around data plotting "window" 

SET CURSOR (ABSISSA* fi rat-1 .ORDINATE’ firat-2) ; 
t«xY_io.put( '/*) ; 

for I in ABSISSA* first+1, .ABSISSA* laat+5 loop 
t«xt_io . put ( ' - 1 ) ; 
end loop; 
text_io.put( ’ \ 1 } ; 

--Hark trigger level over Function Generator output plot: 

TMARKER :• integer ( PULSE_TRIGGER_LEVEL* 

float (ABS I SSA’ laat-ABSISSA’ first) /2.0/ 

FUNCTI ON_G8NERATOR_AMPL I TUDE + 0.5) + ABSISSA'first; 
SET_CURSOR (TMARKER , ORDI NATE ' f i rat-2) ; textio . put ( ' V ' ) } 

for I in ORDINATE 1 first-1 . .ORDINATE' last Loop 

SET_CURSOR (ABSISSA 1 f Irst-L, I ) i text_io.put ('{'); 

SET_CURSOR (ABSISSA* laat+5, I) ; te*t_io.put <•]"»! 
end loop; 


SET_CURSOR (ABSISSA* first + l, ORD I N AT E ' f i rs t-1) { 
text_io, put ("Function Gen:*); 

SET_CURSOR ( (ABSISSA* last-ABSlSSA* first) /2 + ABSISSA'first + l, 
ORDINATE * first-1) ; 
text_i o. put ( ’ | ' ) ; 

SET_CURSOR< (ABSISSA* las t + ABS l SS A ' f i rs t) /2+4 , ORD I NATE 1 f ir st-1 ) ; 
teat_lo .put ("Pulse :") I 


SBT_CURSOR(43, 7); 
S8T_CURSOR(43, 8); 
SET_CURSOR ( 45 , 9); 
SET_CUR6OR(45,10> ; 
SIT_CURSOR 1*5,11); 
SET_CURSOR (45,12) ; 
SET_CURSOR (4 5, 14 ) ; 
SET_CURSOR ( 52 , 15) ; 
SET CURSOR (45,17) ; 


te*t_io. put ("<><><><><><><><><>< ><><><><><><><><>") | 
test" io.put | "To change equipment paraaMters use:"); 
test_io.pu t ( "F: Function Generator*); 
text_io. put I "P : Pulse Generator”); 
t«xt_io. put l"L: Line Voltage"); 

tert_io. put ( "A: Output Aapl . of Function Gen."); 
te«t_io. put ("VALUE: Off - 0.0; On » 1.0*); 
te«t_io.put( "Voltage, Amplitude: float*); 

te*t_lo. put ("Enter F , P, L, A (apace) VALUE : ") ; 


— Turn on equipment 


FUWCT ION_GENERATOR . EQU I PMENT . SW ITCHCONTROL .CLOS BISWITCH ; 
PULSEGENERATOR. EQUIPMENT. SWITCH_CONTROL . CLOSESWITCH ; 


delay 0.001; 


DISPLAY SENSORS; 

OUTER_LOOP : loop 

begin --Exception block 


loop 

loop — Is there input from the keyboard? 

—exit when DOS . KBD_DATA_AVAI LABLE; —A! ays compiler 
--exit when tty .CHAR_READY; --Meridian compiler 

Vlnclude if no interface to DOS is uaed: 

— \/ (pauses every 20 cycles for input): 
exit when integer (COUNTER (MAI N POWER_LIN£_VOLTAGE) )/20*20 - 
integer (COUNTER (MAIN~POWER_LINE_VOLTAGE) ) ■ 0; 

COUNTER (F_GEN_ON OFF SW) :■ FUNCTI ON_GENERATOR .COUNTER ; 

COUNTER ( P~GEN~ON~OPF~SW) PULSE_GENERATOR . COUNTER ; 

--Fetch probe values from equipment and store locally for display 
PROBE (MAI N_POWER LINE VOLTAGE) L I NEVOLT AGE ; 

PROBE (F GEN ON OFF SW) :■ FUNCTION GENERATOR . PROBE 

(FUNCTION GENERATOR. ONOFFSW); 

PROBE ( F GEN OUTPUT) !» FUNCTION GENERATOR . PROBE 

( FUNCTI ON_GEN ERATO R . OUTPUT_S IGNAL) ; 
PROBE (P_GEN ON OFF_SW) :- PULSE GENERATOR. PROBE 

IP(Jlse_gbnerator.on_off_sw) ; 

PROBE (P_GEV_OUTPUT) :• PULSEGENERATOR. PROBE 

(PULS E_GEN ERATO R .OUTPUT_S IGNAL ) ; 

if (LI NE_VOLTAGE > MAXL I NEVOLTAGE) and 

( PROBE (F_GEN_ON_OFP_SW) + PROBE ( P_GBN_ON_OFF_SW) /- 0.0) 

then 

CLEAR_SCREEN; new_l i ne ( 12 ) ; 

text_io.put ("*****Over voltage on Line Voltage--*); new_line; 
text_io.put ("*****") ; new^llne; 

text_io. put ("*"*** Fuses blown— Output ceases"); new_line; 
text_io . put ( ****** Replace blown fuses and start again."); 
new_l ine ( 5 ) ; 

FUNCTION_GENERATOR. EQUIPMENT. DESTROY; — Abort Funct. Gen. task 
PULSE~GENERATOR . EQU IPMENT. DESTROY; — Abort Pulse Gen. task 
exit OUTER LOOP; 
end if; ~ 


COUNTER (MA I N POWER LINE VOLTAGE) 

COUNTER (MaTn pOWEBLINE VOLTAGE ) + 1 . 0 ; 

D I S PLA Y S ENSORS ; 

PLOTS IGNALS ; 
delay 0.25; 

end loop; 

SET_CURSOR (72,17) ; text io.putt" "); 

SET_CURSOR(72,17) ; “ 

get [ PARAM) ; get (VALUE); 

— Increment local cycle count: 

COUNTER (MAIN_POWER_LINE VOLTAGE) :■ 

~ ~ COUNTER (MAIN_POWER_LINE_VOLTAGE) +1.0; 

--Clear out error message if present from previous input: 
SETCURSOR (45,21) ; text io. put!" 

SET~CU RSOR < 4 7 , 2 2 ) ; tex t_ i o . put ( " "); 

SET_CURSOR ( 69 , 23) ; text_i o . put ( " "); 

— Check input from keyboard for valid command; 
case PARAM is 
when * f • | *F* ■> 

if VALUE - 0.0 then 

FUNCTION_GEN E RATOR . EQU I PMENT, SWITCH_CONTROL . OP EN_S WITCH ; 

else ~ 

FUNCT I ON_GENE RATO R . EQU I PMENT . 5WITCH_C0NTROL .CLOS E_SWITCH ; 
end if; 

when *p* | *p* •> 

if VALUE - 0.0 then 


PULSECENERATOR.EQUI PMENT. SWITCHCONTROL. OPEN SWITCH; 

else 

PULSE GENERATOR. EQUIPMENT. SWITCH CONTROL. CLOSE SWITCH; 
end if; 

when * l * j * L* •> 

LINEVOLTAGE :> VALUE; 


when * a * j * A * -> 

FUNCTI ON_GENERATOR_AMPL I TUDE :■ VALUE; 
if PULSE TRIGGER_LEVEL > VALUE then 

VALUE ?• FUNCTI ON_G EM ERATO R AMPLITUDE; 
elslf VALUE < 0.0 then ~ 

VALUE :• 0.0; 

else VALUE PULSE TRIGGER LEVEL; 
end if; 

TMARKER In teger (VALUE* float ( ABSI SSA ' last-ABS ISSA ' f 1 r St ) / 

2.0/FUNCTION_GEN£RATOR_AMPLITUDE+0.5) + ABSISSA'first; 

SET CURSOR (ABS ISSA* first .ORDINATE ’first-2) ; 
for I in ABSISSA* flrat+l. .ABSISSA* laat+5 loop 
text_io.put ( * - 1 ) ; 
end loop; 

SET_CUHSOR (TMARKER , ORD I NATE ’first-2) ; text_io.put (*V* ) ; 

when others ■> 

raise data_error; 

end case; 

delay 0.001; 

end loop; 
except ion 

when data_error ■> 

SET_CURSOR (45, 2 1) ; text_io . put ("Erroneous input ignored--"); 

S ET_CU RSOR (47,22) ; text io. put ("Proper form examples: L 119.0"); 
SET_CURSOR (69,23) ; text”io.put ("A 9.8*); 
text_io , put ( aaci i . bel ) } 
end; — Exception block 

and LOOP OUTER_LOOP; 


dure, called SIMULATE, which interfaces with the simu- 
lator and produces output similar to that in Fig. 3. 
Although this is a simple application, it does illustrate the 
method and suggests how greater sophistication is possible. 

III. IMPLEMENTATION 

Figure 4 is a block diagram of the starboard portion of the 
proposed Space-to-Ground subsystem of the Communica- 
tions and Tracking System on Space Station Freedom. As 
above, the circled numbers represent sensors whose values 
can be monitored. The oval enclosed numbers represent 
sensors whose values indicate the ON/OFF state of the 
equipment. This system has been simulated using the above 
paradigm: Each rectangular box is represented by a task 
that, when “ON,” monitors the values of its input signals 
and sets the values of the output values and sensors accord- 
ingly. The simulator may be controlled by other programs 
or using a keyboard interface program that permits the 
asynchronous entry of commands to turn equipment ON/ 
OFF and set cross-strapping switches. There are upward of 


Probe Reading 

MA I N_ POWER_ L I NE_ VO LTAG E 120.00 
F_CEN_OUTPUT 0.90 
PGEHOUTPUT 10.00 
FGENONOFFSW 1 . 00 
P GEN ON OFF SW 1.00 


Function Gen: 


F : Function Generator 
P: Pulee Generator 
L: Line Voltage 
A: Amplitude of Function Gen. 

VALUE: Off - 0.0; On - L.O 

Voltage, Amplitude: flo 

Enter F,P,L,A space VALUE: 


FIG. 3. Sample output of procedure SIMULATE which displays probe 
readings and signal levels for the Illustrative Example. The outputs of the 
function and pulse generators are displayed graphically and scroll upward 
to show the changes with time. The “cycle count" indicates the number of 
cycles completed by each running task and procedure SIMULATE. 


CMHH/TBIS M PHYSICS, S0>/OCT ISM 523 




FIG. 4. Block diagram of the starboard space-to-ground subsystem of the 
Communications and Tracking System of Space Station Freedom. The 
numbers are sensor identifiers. BSP: baseband signal processor; HDR: 
high data rate recorder; TDRSS: Tracking and Data Relay Satellite Sys- 
tem. 


34 tasks for the total system (which includes the port sys- 
tem and contingency communications equipment not 
shown here). At present, the simulator transforms signal 
levels and sets sensor readings to typical values. Once the 
detailed electronic characteristics for this equipment (un- 
der development ) are established, they can be incorporated 
into the corresponding tasks. 

The simulator has been compiled under a variety of 
ADA compilers (including Alsys, DEC, Meridian, and 
Verdix), and runs under MS-DOS on PC’s (80286 and 
80386 CPU’s), and DEC VMS and Ultrix operating sys- 
tems. Although it is unlikely that all of the communica- 
tions equipment on the Space Station would be ON simul- 
taneously, the current simulator has been run in that state 


with no major problems. (As more tasks are switched 
“ON,” they do slow execution somewhat, especially on an 
IBM PC-AT.) 

Additional refinements of the model presented here 
are possible, most especially in the area of information hid- 
ing. One of the major problems with a blackboard ap- 
proach is that signal information is not only visible to all of 
the equipment tasks, but accessible (i.e., modifiable) as 
well. It is thus possible for the Function Generator to get 
access to the output value of the Pulse Generator even 
though it has no electrical connection to that output. How- 
ever, from the code in Table II, it can be seen that one 
would deliberately have to associate a local variable with 
an improper global variable in order to accomplish such a 
connection. There are ADA constructs that can be used to 
prevent any unwarranted access to normally inaccessible 
signal levels, 6 but the level of abstraction and programming 
complexity required would obscure what is basically a sim- 
ple concept and implementation, and these were deemed 
beyond the scope and intent of the present article. 

IV. CONCLUSIONS 

One of the unique aspects of the ADA programming lan- 
guage is the ability to do logically “parallel” processing 
using the task construct. This is especially useful in simu- 
lating concurrently running equipment. Satisfactory re- 
sults are readily obtainable for situations where transient 
states can be ignored (e.g., where we are not concerned 
with the output of the pulse generator during the transi- 
tions between its minimum and maximum voltage states). 
When the latter are important, timing considerations can 
greatly increase the complexity of the problem. Real-time 
simulations, which require timing and interrupt consider- 
ations, constitute a further challenge in ADA, 7-10 which is 
not considered here. 

ACKNOWLEDGMENT 

This work was done while the first author held a National 
Research Council-NASA Senior Research Associateship. 

REFERENCES 

1. G. Gordon, System Simulation (Prentice-Hall, Englewood Cliffs, NJ, 1978), 
2nd ed. 

2. B. W. Marsden, Software-Prac. Exper. 14, 659 ( 1984). 

3. A. Hac, Software-Prac. Exper. 14, 696 ( 1984). 

4. G. Booch, Software Engineering With Ada ( Benjamin/Cummings, Menlo Park, 
CA, 1987), 2nd ed.. Chap. 16. 

5. W. K. Erickson, Proc. A1AA/ACM/NASA/IEEE Computers Aerospace V 
Conference, Long Beach, CA (October 1985), p. 33. 

6. G. Booch, IEEE Trans. Software Eng. SE-I2, 21 1 ( 1986). 

7. J. D. Laird, R. L, Victa, M. R. Koppes, and B. A. Burton, Proc AIAA/ACM/ 
NASA/IEEE Computers Aerospace V Conference, Long Beach, CA (October 
1985), p.285. 

8. M. Narotam, C. Layton, and J. Slish, EDN (20 August 1987), p. 133. 

9. H. Falk, Comput. Des. 27, 55 {April 1988). 

10. G. Chitwood, Def. Comput. 1, 32 (July-August 1988). 


COMPUTES IN PHYSICS, SfP/OGT 1980 525 






Modeling superconducting networks containing Josephson 
junctions by means of PC-based circuit simulation 
software 

James A. Blackburn 

Department of Physics and Computing , Wilfrid Laurier University, Waterloo , Ontario N2L 3C5, 
Canada 

H. J. T. Smith 

Department of Physics , University of Waterloo, Waterloo, Ontario N2L 3C5, Canada 
(Received 30 January 1990; accepted 18 May 1990) 

Software packages are now available with which complex analog electronic circuits can be 
simulated on desktop computers. Using Micro Cap III it is demonstrated that the modeling 
capabilities of such software can be extended to include superconducting networks by means 
of an appropriate equivalent circuit for a Josephson junction. 


INTRODUCTION 

Superconducting circuits, containing Josephson devices, 
inductances, capacitors, and resistors, have many impor- 
tant practical applications. 1,2 These include SQUID mag- 
netometers, high-speed superconducting computer ele- 
ments, and voltage standards. The usual procedure for 
predicting the behavior of such circuits has been to solve 
the corresponding sets of nonlinear differential equations 
numerically. However, as we shall demonstrate, supercon- 
ducting electronics can be included within the modeling 
capabilities of presently available circuit simulation soft- 
ware, and this provides a powerful and flexible alternative 
method of analysis. 

With the advent of computer-aided engineering 
(CAE) software, analog circuits can be simulated on a 
computer before a hardware prototype is constructed. A 
well-known mainframe oriented software package is 
SPICE, 3 which was developed at UC Berkeley in the 1970s. 
The appearance of high-performance personal computers 
based on the 80386, and most recently 80486, chips has 
made CAE simulation of relatively large circuits feasible 
on desktop machines. Micro Cap III 4 (which was selected 
for the present work) is a leading simulation package for 
use on PC’s. It has an extensive library of standard devices. 
Each specific component, such as a 2N2222 transistor or 
an LM741 op-amp, is modeled so as to replicate accurately 
that device’s static and dynamic characteristics. As will be 
shown, this library can be extended by creating an equiva- 
lent circuit for a Josephson junction. 


I. JOSEPHSON JUNCTION SIMULATION 

The circuit for simulating a current-biased noncapacitive 
Josephson device is shown in Fig. 1 . The principal elements 
are an operational amplifier (op-amp) and a voltage-con- 
trolled oscillator (VCO). MicroCap III does not provide a 
VCO in its component library, and so a separate macro, 
described below, was designed for this purpose. 


The VCO shown schematically in Fig. 2 contains 
three separate submacros: 

( 1 ) SPDT — a voltage-controlled switch set to act as a 
zero crossing detector; this is formed by combining two 
voltage-controlled single-pole/single-throw switches pro- 
vided within MicroCap III. 

( 2 ) X — a simple voltage multiplier created from a vol- 
tage-controlled voltage source in MicroCap III. 

( 3 ) SINECONV — a four-diode triangle-to-sine wave 
converter 5 as shown in Fig. 3. This type of sine converter 
possesses the important attribute of not introducing any 
phase shift in the waveform. 

The input voltage to the VCO is applied to PIN 1, and 
then is passed to the control terminal of the first SPDT 
(which enables the VCO to handle both positive and nega- 
tive input voltages) and to the multiplier. The action of the 
circuit may be followed by assuming for the moment that 
V in > 0. Suppose the present state of the circuit is as indicat- 
ed in the schematic. One input to the multiplier is 8 V, the 
other is V m . The multiplier output is thus -F 8 X V in , and so 



FIG. 1. Circuit for simulating a current-biased resistively shunted Joseph- 
son junction. The polarity shown for V b is required for positive equivalent 
bias current. Note that in this and subsequent figures, Micro Cap III rep- 
resents V h as VB, R b as RB , etc. 


926 COMPUTERS IN PHYSICS, SEP/OCT I860 


