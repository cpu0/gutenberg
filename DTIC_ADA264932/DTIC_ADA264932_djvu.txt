AD-A264 932 fntation parf I Form Approved 

1111111 llil 11111 111 1111 ill 111 If ^ \ OPM No. 0704-01SB 

Hill III till III III I ill n lii Hi ^ th« urn* lor rovtoanng rsirucicri&. uirc^rrrg aieting daia lootcM eainarns ant} mamirwig iha (MU 

* *“ * *'** }ing IMt bofdan •stimal* or tnf <Ht»t tspta of me coaecion ol rtomaron. InclotlinB sujjotton* lor r«)uc>is !h« butrUn. to WMfwigBr 

u><n.iui<ii« im ■notrmixxi i^MraDona and Htooru. 1215 Jollaiaon Davit Kigiwar. SUia I20t. Adingion. VA 22202'«302. and lo m« Onm ol mknmaoon and Hagulaiory Aflan. Olict d 
Managamant and Budgal Washington. DC 20503 


1. AGENCY USE ONLY (Leave Blank) 


2. REPORT DATE 


3. REPORT TYPE AND OATES COVERED 

Final; 26 Feb 93 


4. TITLE AND SUBTITLE 

Validation Summary Report; Verdix Corporation. VADSseif HP 9000 series 700 
VAda-110-7575. Version 6 2. HP 9000/720 under HP/UX 8.0.7 (host & target). 
930226W1.11311 


6. AUTHOR(S) 

Wright-Patterson AFB. Dayton. OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

\A/right-Patterson AFB, Dayton, OH 45433 



8 PERFORMING ORGANIZATION 
REPORT NUMBER 

AVF-VSR-561-0293 


9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS{ES) 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D.C. 20301-3081 


11. SUPPLEMENTARY NOTES 


12a. DISTRIBUTION,'AVAILABILITY STATEMENT 

Approved for public release: distribution unlimited. 


DTIC 


10 SPONSORING/MONITORING AGENCY 
REPORT NUMBER 



12b DISTRIBUTION CODE 


13. ABSTRACT (Maximum 200 words) 

Verdix Corporation, VADSseif HP 9000 series 700 VAda-110-7575. Version 6.2, HP 9000/720 (under HP/UX 8,0.7) (host & 
target), ACVC1.11 






93-11632 

lilt till! iiiiiii till liiilili 


14. SUBJECT TERMS 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability. Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, AJPO. 


17. SECURITY CUSSIFICATION 
OF REPORT 

UNCLASSIFIED 


18 SECURITY CLASSIFICATION 

UNCLASSIFED 


19. SECURITY CLASSIFICATION 
OF ABSTRACT 

UNCLASSIFIED 


IS NUMBER OF PAGES 


16 PRICE CODE 


20. LIMITATION OF ABSTRACT 


NSN 7540-01-280-550 


Standard Form 298, (Rev 2-89) 
Prescribed by ANSI Std 239-128 















AVF Control Number; AVF-VSR-561-0293 
Date VSR Completed: 15 February 1993 

93-01-25-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 930226W1.11311 
Verdix Corporation 

VADSself HP 9000 series 700 VAda-110-7575, Version 6-2 
HP 9000/720 under HP/UX 8.0.7 


(FINAL) 


Prepared By: 
Ada_Validation_Facility 
Hq 645 C-CSG/SCSL 
Wright-Patterson AFB OH 45433-5707 



Certificate Information 


The following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 26 February 1993. 

Compiler Name euid Version: VADSself HP 9000 series 700 

VAda-110-7575, Version 6.2 


Host Con^ter System: 
Target Computer System: 
Customer Agreement Number: 


HP 9000/720 under HP/UX 8.0.7 
HP 9000/720 under HP/UX 0.0.7 
93-01-25-VRX 


See section 3.1 for any additional information cibout the testing 
environment. 

As a result of this validation effort, Validation Certificate 

930226W1.11311 is awarded to Verdix Corporation. This certificate expires 

two years after the ANSI adoption of ANSI/MIL-STD-1815B. 

This report has been reviewed and is approved. 



Ada Validation Facility 


Dale E. Lange 
Technical Director 


Hq 645 C-CSG/SCSL 
Wright-Patterson AFB OH 


45433-5707 





tionOrgaruiaHon 

omputer 2 ind Software Engineering Division 
Institute for Defense Analyses 
Alexcindria VA 22311 


< 





I 


Ada Joint Program Office 
Dr. John Solomond, Director 
Department of Defense 
Washington DC 20301 


Accesion h'or 


NTIS 

CR 

one 

I A, 

Ui'.d: 

n'/i;.' 

Jr.Sti 

iCc:i;,o 

By 


Diit • 


Av-iila 


Dist 


ft'! 


Avj:i .«■ (J 
SptC'jl 








DECLARATION OF CONFORMANCE 


The following declaration of conformance was supplied by the customer. 


DECLARATION OF CONFORMANCE 


Customer; Verdix Corporation 

Ada Validation Facility: CTA Incorporated 

5100 Springfield Pike, Suite 100 
Dayton,Ohio 45431 

ACVC Version: 1.11 

Ada Implementation; 

Compiler Name and Version: VADSself HP 9000 series 700 

VAda-110-7575, Version 6.2 


Host Computer System; HP 9000/720, HP/UX 8.0.7 
Target Computer System: HP 9000/720, HP/UX 8.0.7 


Customer's Declaration: 


ll/we], the undersigned, declare that [I/we] have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/MIL-STD-1815A in the implementation 
listed above. 







TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES. 1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MODIFICATIONS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT .3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION .3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B C01PILATI0N SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 















CHAPTE31 


1 


INTRODUCTIOI 


The Ada implementation described above was tested according to the Ada 
Validation Procedures (Pro90] against the Ada Standard [Ada83] using the 
current Ada Cojrpiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada inplementation. 

For any technical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide rUG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.s.C. #552). The results of this validation apply 
only to the con^ters, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF vrtiich performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 





INTRODUCTICN 


1.2 REFERENCES 

lAdaSi] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STr>-1815A, February 19^3 and ISO 8652-1^87. 

{Pro90] Ada Compiler Validation Procedures , Version 2.1, Ada Joint 
Program Office, August 1990. 

(UG89] Ada Compiler Validation Capedbility User's Guide , 21 June 1989. 


1.3 ACVC lEST CLASSES 

Conplieince of Ada iirplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes; A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at conpile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity fimctions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code vhich must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that ein Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
inplementation-specific values — for example, the largest integer. A list 
of the values used for this inplementation is provided in Appendix A. in 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 









INTRODUCTIOJ 


For each Ada inplementation, a customized test suite is produced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests (see section 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and [UG893). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Coirpiler The software eind any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing coirpliance of Ada implementations, 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide emd the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host conputer system eind its 

Irt?)lementation target con^ter system. 

Ada Joint The part of the certification body which provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body vdiich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) in^lementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Conpliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Inplementation 

Computer A functional unit, consisting of one or more conputers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the progreun; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Confuter 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 
Confuter 
System 

valiuated 

Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AVF which specifies the terms eind 
conditions for AVF services (of any kind) to be performed, 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
\diich validation status is realized. 

A computer system vdiere Ada source programs are treinsformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Steundardization. 

The Ada standard, or Language Reference Manual, published as 
ANSI/MIL-STD-1815A-1983 and ISO 8652-1987. Citations from 
the LRM take the form "<section>.<subsection>:<{>aragraph>." 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The cojiipiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration [Pro90]. 

The process of checking the conformity of an »\da conpiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
Icinguage. 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C4565LA 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C8304iA 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA201IA 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives v^ich are irrelevant 
for a given A^ inplementation. Reasons for a test's inapplicability may 
be supported by docioironts issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
inplementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 









IMPLEMENTATIW DEPEM>ENCIES 


Ttie following 201 tests have floating-point type declarations 
acquiring more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..2 (15 tests) 


The following 20 tests check for the predefined type LCM5_INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C45411C 

C45412C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

CD7101F 


C35713C, B86001U, and C86006G check for the predefined type 

LC»JG_FLQAT; for this implementation, there is no such type. 


C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LC»JG_FLOAT, or SHORT_FLQAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAX_MANTISSA of 47 or greater; for this 
implementation, MAX_MANTISSA is less them 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEjOVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MAQiINE_OVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

C96005B uses values of type DURATlOf^'s base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
saume. 

CD1009C checks v^ether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 



IMPLEMENTATION DEPENDENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

The tests listed in the following table check that USE_ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTI/^ 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_I0 

CE3102E 

CREATE 

IN_FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 

— 

TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPE^l 

IN FILE 

“lEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this inplementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE LENGTH and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR when the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective inpractical. 


2-3 





IMPLEMENTATICN DEPENDENCIES 


2.3 TEST MODIFICATIOJS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
inpleroentation did not report the violations of the Ada Standard in the 
way expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A 

B38009B B85008G B85008H BC1303F BC3005B 

BD2B03A BD2D03A BD4003A 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range 

FLOAT'FIRST..FLOAT'LAST as the range constraint of a floating-point type 
declaration because the bounds lie outside of the range of safe numt)ers 
(cf. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A24A, CD2A31A. .C (3 tests) were graded 
passed by Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, which uses 
UnchecI'.ed_Conversion according to the interpretation given in AI-00590. 

The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have 
the general form: 

" * CHECi; ON REPRESENTATION FOR <TYPE ID> FAILED." 


AD9001B was graded passed by Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprogreuns; 
among the procedures that it uses is one with a parameter of mode OUT 
(line 36). This implementation does not support pragma INTERFACE for 
procedures with parameters of mode OUT. The test was modified by 
conattenting out line 36 and 40; the modified test was passed. 


2-4 







CHAPTER 


3 


PROCESSING INFORMATICS! 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical aind sales information about this Ada implementation, contact: 

Sam Quiring 

Verdix Corporation 

1600 NW Compton Drive, Suite 357 

Aloha OR 97006-6905 

(503) 690-1116 


Testing of this Ada inplementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada inplementation passes a given ACVC version if it processes each test 
of the customized test suite in accordeuice with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC {Pro90]. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 






PROCESSING INFORMATICS 


a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3805 

95 

69 

0 


201 

270 

(c+d+e) 

4170 

(a+b+f) 


3.3 TEST EXECUTION 


A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun Workstation and copied over Ethernet 
to the host conputer. 


After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the processing options for this inplementation. It also indicates the 
default options. 

Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. Itie listings examined on-site by 
the validation teeun were also archived. 


3-2 






APPENDIX A 
MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in (UG891. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, vdiich is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the naximum input-line 
length. 


Macro Parameter 


Macro Value 


$MAX_IN_LEN 

$BIG_ID1 

§BIG_ID2 

$BIG_ID3 

$BIG_ID4 

$BIG_INT_LIT 

$B1G_REAL_LIT 

$BIG_STRING1 

$BIG_STRING2 

$BIANKS 


499 — Value of V 

(1..V-1 -> 'A', V -> '1') 

(1..V-1 -> 'A', V -> '2') 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

(1..V/2 -> 'A') & '4' & 
(1..V-1-V/2 -> 'A') 

(1..V-3 -> '0') & "298” 

(1..V-5 -> '0') & "690.0" 

& (1..V/2 -> 'A') & 

& (1..V-1-V/2 »> 'A') & '1' 6. 

(1..V-20 


$MAX_LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 => '0') & "11:" . 

$MAX_IEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 


A-1 




MAC3?0 PARAMETERS 


$MAX_STRING_LITERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter Macro Value 


$ACC_SIZE 

32 

$ALIGNMENT 

4 

SCOUNT_LAST 

2_147_483_647 

$DEFAULT_MEM_SI2E 

16_777_216 

$DEFAULT_STOR_UNIT 

8 

$DEFAULT_SYS_NAME 

HPPA_SELF 

$DELTA_DOC 

0.0000000004656612873077392578125 

$ENTRY_ADDRESS 

SYSTEM."+"(16#40#) 

$ENTRY_ADDRESS1 

SYSTEM.’V(16#80#) 

$ENTRY_ADDRESS2 

SYSTEM. "+”(16#100#) 

$FIELD_LAST 

2_147_483_647 

$F1LE_TERMINAT0R 

t 9 

$FIXED_NAME 

NO_SUCH_TYPE 

$FLQAT_NAME 

no_suc:h_type 

$FORM_STRING 

If ft 

$FORM_STRING2 

"(:annot_restrict_file_capacity'' 

$GREATER THAN DURATION 

100_000.00 


$GREATER THAN DURATIW BASE LAST 

To_ooiy_ooo 

$GREATt:R_THAN FLQAT_BASE LAST 

l.lE+308 

$GREATER_THAN FLOAT SAFE LARGE 

5.tiE307 


A-2 





MACRO PARAMETERS 


$GREATER THAN SHORT FLOAT SAFE LARGE 

~ 9.0E37 

$H1GH_PRI0RITY 99 

$ILLEGAL_EXTERNAL_FILE NAMEl 

■Villegal/file_name/2{]$%FILE1.DAT" 

$ILLEGAL_EXTERNAL_FILE NAME2 

"Villegal/file_name/2{]$%FILE2.DAT" 

$INAPPROPRIATE LINE LENGTH 

-1 

$INAPPROPRIATE PAGE LENGTH 

~ -1 

$INCLIIDE_PRAGMA1 PRAGMA INCLUDE ( "A28006D1.TST" ) 

$INCLUDE_PRAGMA2 PRAC21A INCLUDE ("B28006D1.TST") 

$INTEGER_FIRST -2_147_483_648 

$INTEGER_LAST 2_147_483_647 

$INTEGER_LAST_PLUS_1 2_147_483_648 

$INTERFACE__LANGUAGE C 

$LESS_THAN_DURATiai -100_000.0 

$LESS THAN DURATION BASE FIRST 

-1T)’_000_000.0 

$LINE_TERMINATOR ASCII.LF 

$LOW_PRIORITY 0 

$MACHINE_CODE_STATEMENT 

CCOE_0'(OP => NOP); 

$MACHINE_CODE_TyPE CODE_0 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_INT -2_147_483_648 

$NAME TINY INTEGER 


A-3 




MACRO PARAMETERS 


$NAME_LIST HPPA_SELF 

$NAME_SPECIFICATIONl /val_j ean/acvcl.1l/c/e/X212 OA 
$NAME_SPECIFICATIW2 /val_j ean/acvcl. ll/c/e/X2120B 
$NAME_SPECIFICATIC»J3 /val_jean/acvcl. ll/c/e/X3119A 
$NEG_BASED_INT 16#F000000E# 

$NEW_MEM_SI2E 16_777_216 

$NEW_STOR_UNIT 8 

$NEW_SYS_NAME HPPA_SELF 

$PAGE_TERMINATOR ASCII.LF & ASCII.FF 

$RECORD_DEFINITION RECORD SUBP: OPERAND; END RECORD; 

$RECORD_NAME CODE_0 

$TASK_SIZE 32 

$TASK_STORAGE_SIZE 1024 

$TICK 0.01 

$VARIABLE_ADDRESS VAR_1'ADDRESS 

$VARIABLE_ADDRESS1 VAR_2' ADDRESS 

$VARIABLE_ADDRESS2 VAR_3'ADDRESS 


$YOUR_PRAC3m PRACaiA PASSIVE 


A-4 




APPE2TOIX B 


COMPILATICaa SYSTEM OPTICNS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer, unless specifically noted 
otherwise, references in this appendix are to compiler documentation emd 
not to this report. 


ada - invoke the Ada conpiler 
Synteoc 

ada [options] [source_file]... [object_file.o]... 

Arguments 

object_file.o non-Ada object file names. These files will be passed 
on to the linker and will be linked with the specified 
Ada object files. 

options options to the conpiler. These are: 

-A (disassemble) Disassemble the units in the source file after 
compiling them, -A caui be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -AS). 


a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the unit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "file_name.das'’ 
s Disassemble the unit spec. 

-a file_naroe 

(archive) Treat file_name as an object archive file created 
by ar. Since some archive files end with .a, -a used to 
distinguish archive files from Ada source files. 


B-1 






COMPILATIOM SYSTEM OPTICXaS 


-Bstatic/cJynamic (SPARCompiler Ada only) 

(static) If static is indicated, the Ada program is coitpiled 
and linked statically. The default is dynamic. 

-c suppress the control messages generated when pragma PAGE 
and/or pragma LIST are encoimtered, 

-D identifier type value 

(define) Define an identifier of a specified type and value. 

-DG (debug flag) Force front end to write out the gnrx.lib file 
in ASCII format. This option has no effect unless you compile 
a file that chauiges the gnrx.lib file. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as uncoirpiled. The -d option is 
used by a.make to establish dependencies among new files. 

This option will attenpt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation euid reduce user disk space usage.. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a direc ">ry name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process conpilation error messages using a.error emd 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated By error_file. Note that there is 
no space between the -Ef and error_file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. 

-el (error listing) Intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced. 


B-2 







COMPILATION SYSTEM OPTIC»JS 


-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file and call the environment editor 
ERROR EDITOR. If ERROR_EDITOR is defined, the environment 
variable ERROR_PATTERN should also be defined. ERROR_PATTERN 
is an editor search command that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERROR_TABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 
trimmed so that all pointers to nodes that did not involve 
a siabtree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or conpilation information). The trimming 
generally removes initial values of variables and all 
statements. 

-G (GVAS) Display suggested values for the MINjSVAS_ADDR 
and MAX_GVAS_ADDR INFO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
by the con^iler front end. The IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L libraryjriame 

(library) Operate in VADS library libraryjname. 

[Default: current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld{l) 
linker, telling it to search the specified library file. 

(No space between the -1 and the file abbreviation.) 

-M unit name 

(main) Produce an executable program by linking the named 
unit as the main program, unitjname must already be 
conpiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out unless overridden 
with the -o option. 

-M source file 

(mainT Produce an executable program by compiling and 
linking source_file. The main unit of the program is 
assumed to be the root neune of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be named a.out \jnless overridden 
with the -o option. 

-N (no code sharing) Coitpile all generic instantiations 


B-3 



CXM1PILATIW SYSTEM OPTIOIS 


without sharing code for their bodies. This option 
overrides the SHARE_BODY INFO directive and the SHAflE_CODE 
or SHARE_BODY pragmas. 

-noqueue 

(no license queueing) Do not queue for a floating license to 
rxan this tool. If a license is not immediately available, 
quit with an error message. Without this option, the tool 
waits indefinitely for a license, printing occasional messages 
to let you know it is in the queue. (SunAda only) 

-O[0-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 

-0 full optimization 

-OO no optimization (use for debugging) 

-01 copy propagation, constant folding, removing 
dead varizibles, subsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global common subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 no change 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction nd add hoisting expressions common to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

-o executable file 

(output) This option is to be used in conjunction with 
the -M option. executable_file is the name of the executable 
rather them the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(recompile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in vdiich the 
recompilation Ts to occur. If it is not specified, the 
reconpilation occurs in the current working directory. 

-S (suppress) i^ly pragma SUPPRESS to the entire compilation 

B-4 





COMPILATION SYSTEM OPTIOIS 


for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the coitpilation. 

-V (verbose) Print compiler version number, date and time of 
compilation, name of file conpiled, command input line, 
total conpilation time eind error summary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

source_file name of the source file to be conpiled. 

Description 

The ada command exeoates the Ada compiler and compiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

By default, ada produces only object and net files. If the -M option 
is used, the compiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the compiler generates object files compatible with 
tho host linker in VOX format. The VOX format is discussed in 
Appendix A of the Programmer's Guide. 

Non-Ada object files (.o files produced by a compiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS compilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin on a system 
will execute the correct compiler components based upon visible 
library directives, the option -sh is provided to print the name of 
the components actually executed. 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 

NOTE: If two files of the same name from different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second compilation will 
overwrite the first. For example, the compilation of 
/usr/directory2/foo.a -L /usr/vads/test will overwrite the 
compilation of /usr/directoryl/foo.a -L /usr/vads/test in the 


B-5 




COMPILATION SYSTEM OPTIONS 


VADS library /usr/vads/test. 

Diagnostics 

Tlie diagnostics produced by the VADS compiler are intended to be 
self-explanatory. Most refer to the RM. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 


LINKER OPTIONS 

Ttie linker options of this Ada iirplementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


a.Id - build an executable program from previously compiled units 
Syntax 

a.Id (options) unit_name (linker_options] 

Arguments 

linker_options 

All arguments after unit_najne are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id command. These are: 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DX (debug) Debug memory overflow (use in cases vdiere linking 
a large number of units causes the error message "local 
symbol overflow" to occur). (VADSself only) 

-DT (time) Displays how long each phase of the ptelinking process 
has taken. 

-Du unit_list 

(units) Traces the addition of indirect dependencies to the 
named units. 

-Dx (dependencies) Causes the elaboration dependencies used each 


B-6 









COMPILATION SYSTEM OPTIC*^S 


time a unit is arbitrarily chosen for elaboration to be 
displayed. 

-E unit_name 

(elaborate) Elaborate unit__naB(e as early in the elaboration 
order as possible. 

-F (files) - (SGI only) rint a list of dependent files in order and 

-noqueue 

(no license queueing) Do not queue for a floating license to 
run this tool. If a license is not immediately available, 
quit with an error message. Without this option, the tool 
waits indefinitely for a license, printing occasional messages 
to let you know it is in the queue. (SunAda only) 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker command before executing it. 

-V (verify) Print the linker command but suppress execution. 

-w (warnings) Suppress warning messages, 
unitjname 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make unit_name a main 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada conpiler to check dependency information, a.Id produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated lay the conpiler, these directives also include WiTHn 
directives that allow the automatic linking of object modules 
compiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WiTHn 
directives may be placed into a library but they must be 
numbered contiguously beginning at WITHI. The directives are 
recorded in the library's ada.lib file eind have the following form. 


B-7 



CCMPIIATICXJ SYSTEM OPTIONS 


WITHl:LINK;object_file; 

WITH2;LINK:archive_file; 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the same numbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Conpjter Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, theTr types, seals eind dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

Files 

a.out (self), a.vox (cross) default output file 

.nets Ada DIANA net files directory 

•objects/* Ada object files 

VADS__location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 










APPENDIX C 

APPENDIX F OF THE Ada STANDARD 


The only allowed inplementation dependencies correspond to 
inplementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The in^lementation-dependent 
characteristics of this Ada inplementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation euid not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type T1NY__1NTEGER is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E+308..1.79769313486232E+308; 
type SHORT_FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 

type DURATION is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 








APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1, Inplementation-Dependent Pragmas 

1.1. INLINEJ^ILY Pragma 

The INLINEjMJLY pragma, vrtien used in the same way as pragma 
INLINE, indicates to the coitpiler that the subprogram must 
always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which saves code 
space. If a user erroneously makes an INLINE_C»ILY sxjbpro- 
gram recursive a warning message will be emitted and an 
PROGRAM_ERROR will be raised at run time. 

1.2. BUILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefineH Ada packages, but provides no user access. It is 
used only to implement code bodies for v^ich no actual Ada 
body can be provided, for exanple the MACHINE_CODE package. 

1.3. SHARE_CODE Pragma 

The SHARE__CODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed immediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a compilation, but before 
any subsequent con^Jilation unit. 

When the first argument is a generic unit the pragma applies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 

If the second argument is TRUE the compiler will try to 
share code generated for a generic instemtiation with code 
generated for other instantiations of the same generic. 
When the second argument is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE_bODY is also recognized by the in¥)le- 
mentation and has the same effect as SHARE CODE. It is 


C-2 









APPENDIX F OF THE Ada STANDARD 


included for compatability with earlier versions of VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 
type v^ose image array has been suppressed will result in a 
conpilation warning and PROGRAM_ERROR raised at run time. 

1.5. EXTERNAL_NAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.6. INTERFACE_NAME Pragma 

The INTERFACE_NAME pragma takes the neime of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argximent. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_C0DE Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issued if 
OFF is used and any inplicit code needs to be generated. 
The default is ON. 


1.8. 0PTIMIZE_C0DE Pragma 

Takes one of the identifiers (»J or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 


C-3 










APPENDIX F OF THE Ada STANDARD 


procedure. It specifies v^ether the code should be optim¬ 
ized by the con 5 >iler. The default is ON. When OFF is 
specified, the compiler will generate the code as specified. 

2. Inplementation of Predefined Pragmas 

2.1. CCKTROLLED 

This pragma is recognized by the inplementation but has no 
effect. 

2.2. ELABORATE 

This pragma is implemented as described in appendix B of the 
Ada RN. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the 
Ada RM. 


2.4. INTERFACE 

This pragma supports calls to 'C and FORTRAN fianctions. The 
Ada subprograms cein be either functions or procedures. The 
types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array objects 
can be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 
Ada RM. 

2.6. MEMORy_SIZE 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be reconciled. 

2.7. NON_REENTRANT 

This pragma takes one argument which can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the conpiler that the sxabprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded subprograsm within a package spec or pack¬ 
age body. 

2.8. NOT ELABORATED 


C-4 








APPENDIX F OF THE Ada STANDARD 


Itiis pragma can only appear in a library package specifica¬ 
tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. The presence of this pragma suppresses the 
generation of eladaoration code and issues warnings if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inplementation but has no 
effect. 


2.10. PACK 

This pragma will cause the con 5 >iler to choose a non-aligned 
representation for conposite types. It will not causes 
objects to be packed at the bit level. 

2.11. PAGE 

This pragma is inplemented as described in Appendix B of the 
Ada RM. 


2.12. PASSIVE 

The pragma has three forms ; 

PRAGMA PASSIVE; 

PRACm PASSIVE( SEMAPHORE); 

PRAGMA PASSIVEdNTERRUPT, <number>); 


This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
bcxiy. The pragma directs the con^iler to optimize certain 
tasking operations, it is possible that the statements in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at compile time and will 
raise TASKING_ERR0R at nintime. 

2.13. PRIORITY 

This pragma is implemented as described in ;^pendix B of the 
Ada RM. 


2.14. SHARED 

Ttiis pragma is recognized by the inpleraentation but has no 
effect. 


2.15. STORAGE UNIT 


C-5 





APPENDIX F OF THE Ada STANDftRD 


This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is implemented as described, except that 
DIVISION CHECK and in some cases OVERFLCW_CHECK cannot be 
supresseH. 

2.17. SYSTEM_NAME 

This pragma is recognized by the inplementation. The inple- 
raentation does not allow SYSTEM to be modified by meauis of 
pragmas, the SYSTEM package must be recompiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for which an address clause has 
been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package MACHINE_CODE. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 


3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 
is of the type ADDRESS in the package SYSTEM. 


4. Specification Of Package SYSTEM 

with UNSIQIED_TYPES; 
package SYSTEM is 


C-6 










APPENDIX F OF THE Ada STANDARD 


pragma suppress(ALL_CHECKS); 
pragma suppress(EXCEPTI(X^_TABLES); 
pragma not_elc±>orated; 


type NAME is ( hppa_self ); 


SYSTEM NAME 


constant 


STORAGEJUNIT 
MEMORY SIZE 


constant ;■ 8; 

: constant 


System-Dependent Named Numbers 


NAME := hppa_self; 
16 111 216; 


MIN_INT 

MAX_INT 

MAX_DIGITS 

MAX_MANTISSA 

FINE_DELTA 

TICK 


: constant 
: constant 
; constant 
constant 31; 

: constant 
: constant 


-2 147 483 648; 
2 T47 ?83 ^47; 
1 ^; “ " 


2.0**(-31); 

0 . 01 ; 


— Other System-dependent Declarations 
subtype PRIORITY is INTEGER range 0 .. 99; 
MAX_REC_SIZE ; integer 1024; 


type ADDRESS is private; 


function 

It ^14 

(A: 

ADDRESS 

B: 

ADDRESS) 

return 

BOOLEAN 

function 


(A; 

ADDRESS 

B: 

ADDRESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS 

B; 

ADDRESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS 

B: 

ADDRESS) 

return 

BOOLEAN 

function 


(A: 

ADDRESS 

B: 

ADDRESS) 

return 

M 

1 

function 


(A: 

ADDRESS 

I: 

INTEGER) 

return 

ADDRESS 

function 


(A: 

ADDRESS 

I; 

INTEXSER) 

return 

ADDRESS 


function (I; UNSia4ED_TYPES.UNSIGNED_INTEGER) return ADDRESS; 
function MEMORY_ADDRESS 

(I; UNSIGNED_TYPES,UNSIGNED_INTEGER) return ADDRESS renames "+”; 

NO_AI®R : consteint ADDRESS; 

type TASK_1D is private; 

NO_TASK_ID ; constant TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STATUS_SIZE: constant :« 4; 

type PROGRAM_ID is private; 

NO_PROGRAM_ID : constant PROGRAM_ID; 

type LCMj_ADDRESS is private; 


C-7 









APPENDIX F OF THE Ada STANDARD 


N0_L(M;_ADDR : constant LONG_ADDRESS; 

ftinction (A: LC»IG_ADDRESS; 1; INTEGER) return LC»JG_ADDRESS; 

function (A: L(M;_ADDRESS; I; I^1TEGER) return LWG_ADDRESS; 

function MAKE_LCM3_ADDRESS (A: ADDRESS) return LaJG_ADDRESS; 

function LOCALIZE(A; LCM;_ADDRESS ; BYTE_SIZE : INTEGER) return ADDRESS; 

function STATIC«SIjDF(A: L(»IG_ADDRESS) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 

— then, this is the julian day. 
subtype DAYJT is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVOCATIC»J_BY_ADDRESS : constant BOOLEAN TRUE; 
SUPPORTS_PREELABORATIC»I : constant BOOLEAN :« TRUE 

MAKE_ACCESS_SUPPORTED ; constant BOOLEAN TRUE 

private 

type ADDRESS is new UNSIGNED_TYPES.JNSIGNED_INTEGER; 

NO_ADDR ; constant ADDRESS :» 0; 

pragma BUILT_1N(''>"); 
pragma BUILT_IN("<"}; 
pragma BUILT_IN(">-”); 
pragma BUILT_IN("<-”); 
pragma BUILT_IN("-"); 
pragma BUILT_IN("+"); 

type TASK_ID is new UNSI(3^_TYPES.UNSiara3_INTEGER; 

NO_TASK_ID : constant TASK_ID 0; 

type PROGRAM_ID is new UNSIQIED_TYPES.UNSIGNED_INTEGER; 

NO PROGRAM ID : constant PROGRAM ID :» 0; 


type LONG_ADDRESS is new UNSI(3^_TYPES.UNSIGNED_INTEGER; 
NO LONG ADDR ; constant LCM3 ADDRESS :* 0; 


pragma BUILT_IN(MAKE_L(»IG_ADDRESS); 
pragma BUILT_IN(LOCALIZE); 
pragma BUILT_lN(STATION_OF); 

end SYSTEM; 

5.1. Pragma PACK 




APPENDIX F OF THE Ada STANDARD 


In the absence of pragma PACK record components are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record conponents a record representa¬ 
tion is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type will not cause 
packing of components; an explicit record representation 
clause must be given to specify the packing of the coift- 
ponents. A size clause applied to a record type will cause 
packing of con^xDnents only when the component type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 
for task, access, or floating point types. 


5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prohibit inititalization of a variables \diich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 

Interupt entries are not supported. 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 


5.6. Machine Code Insertions 
Machine code insertions are supported. 

The general definition of the package MACHINE_C0DE provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 


C-9 







APPENDIX F OF THE Ada STANDARD 


statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions- 

The general syntax of a machine code statement is as fol¬ 
lows; 


CODE_n'( opcode, operand {, operand} ); 

vdiere n indicates the nixnber of operands in the aggregate. 

A special case arises for a variable number of operands. 
The opereunds are listed within a subaggregate. The format 
is as follows: 

CODE_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RM 4.3(4)). 

CODE_0'( op *> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be am entity defined in MACHINE_CODE or 
the 'REF attribute. 

The arguments to any of the factions defined in 
MACHINE_CODE must be static expressions, string literals, or 
the functions defined in machine_CODE. The 'REF attribute 
may not be used as ein argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for In^lementation-genecated Names 
There are no inplementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
physical addresses. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 


None. 


10. Implementation Characteristics of I/O Packages 


C-10 



APPENDIX F OF THE Ada STANDARD 


Instantiations of DIRECT_IO use the value MAX_REC_SIZE as 
the record size (expressed in STORAGEJUNITS) when the size 
of ELEMENT_TYPE exceeds that value. For example for uncon¬ 
strained arrays such as string where ELEMENT_TYPE'SIZE is 
very large, MAX_REC_SIZE is used instead. MAX_RECORD_SIZE 
is defined in SYSTEM and can be changed by a program before 
instantiating DIRECT_I0 to provide an upper limit on the 
record size. In any case the maucimum size supported is 1024 
x 1024 X STORAGEJJNIT bits. DIRECT_IO will raise USE_ERROR 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL_I0 use the value MAX_REC_SIZE 
as the record size (expressed in ST0RAGE_UNITS) when the 
size of ELEMENT_TYPE exceeds that value. For exanple for 
unconstrained arrays such as string where ELEMENT_TYPE'SIZE 
is very large, MAX REC_SIZE is used instead, 
MAX_RECORD SIZE is defined in SYSTEM and can be changed by a 
program beTore instantiating INTEGER_I0 to provide an upper 
limit on the record size. SEQUENTIAL_IO imposes no limit on 
MAX_REC_SI2E, 

11. Implementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 
even near these limits are available to every program. 

11.1. Line Length 

The inpleraentation supports a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STORAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORAGEJUNITS, This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit ST0RAGE_SI2E length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 


C-11 





APPENDIX F OF THE Ada STANDARD 


by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STORAGE_UNITS for 
objects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the com¬ 
pilation of the unit with a FATAL error message. 


C-12 





APPENDIX F OF THE Ada STANDARD 





