REPORT DOCUMENTATION PAGE 


Form Approved 
OPM No 


AD-A262 961 


1q av*r*Q* 1 hour par rasponaa. including lha tim# tor raviawing instructions. sa*rch»ng a*i*ltng data 
lion of mtormaton Sand com man?* ragardmg this burden astimate or any otha« a* pact of Ihi* co!laci»on of >nto' , mal>on >ndud>ng 
quart ar* Sarvioa. Diractoraia tor Information 0 para tons and Report*. 1215 JaHanton 0»v- highway Surta i?04 An ngton. VA 
ry Attain*, Ottioa of Management and Budget. Washington. DC 20503 


2. REPORT 


3. REPORT TYPE AND DATES 

I Final: 30 Aprill 992 


4. Ill Lt ANU 

Validation Summary Report: TLD Systems, Ltd., TLD MV/MV Ada Compiler 
System, Version 2.9.0, Data General MV/32 2000-2 under AOS/VS 11, 
Version 2.03 (Host & Target), 920319W1.11238 


6 

Wright-Patterson AFB, Dayton, OH 
USA 


7. PERFORMING ORGANIZATION NAME(S) AND 

Ada Validation Facility, Language Control Facility ASD/SCEL 
Bldg. 676, Rm 135 

Wright-Patterson AFB, Dayton, OH 45433 



8. PERFORMING 
ORGANIZATION 

AVF-VSR-523-0392 


9 SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office 
United States Department of Defense 
Pentagon, Rm 3E114 
Washington, D C. 20301-3081 


DT1C 

SLECTE 


10. SPONSORING/MONITORING 
AGENCY 



12a. DISTRIBUTION/AVAILABILtTY 


Approved for public release: distribution unlimited. 


13. (Maximum 200 

TLD Systems, Ltd., TLD MV/MV Ada Compiler System, Version 2.9.0, Data General MV/32 20000-2 under 
AOS/VS II, Version 2.03 (Host & Target), AC VC 1.11. 



§8 3 30 067 


93-06530 

llfllHlRIl 


14. SUBJECT 


15 NUMBER OF 


Ada programming language, Ada Compiler Val. Summary Report, Ada Compiler Val. 
Capability, Val. Testing, Ada Val. Office, Ada Val. Facility, ANSI/MIL-STD-1815A, I 16 PRICE 


17 SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


18. SECURITY 

UNCLASSIFED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFIED 


20 LIMITATION OF 


NSN 


r,j;Xlard Form 298. (Rev 2-891 
Prescribed by ANSI Std 
































Certificate Information 


Hie following Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed on 19 March 1992. 

Compiler Name and Version: TLD MV/MV Ada Compiler System, 

Version 2.9.0 

Host Computer System: Data General MV/32 20000-2, 

under AOS/VS II, Version 2.03 


Target Computer System: Data General MV/32 20000-2, 

under ADS/VS II, Version 2.03 


Customer Agreement Number: 91-11-14-TLD 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 

920319W1.11238 is awarded to TLD Systems, Ltd. This certificate expires on 

1 June 1993. 

This report has been reviewed and is approved. 



Steven P. Wilson 
Technical Director 


ASD/SCEL 


Wright-Patterson AFB OH 45433-6503 


Ada Vadic^sitfidh Organization 

Director,v^mputer and Software Engineering Division 
Institute for Defense Analyses. 

Alexandria VA 22311 



Dr. John Solomond, Director 


Department of Defense 
Washington DC 20301 





AVF Control Number: AVF-VSR-523-0392 

30 April 1992 
91-11-14-TLD 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 920319W1.11238 
TLD Systems, Ltd. 

TLD MV/MV Ada Compiler System, Version 2.9.0 
Data General MV/32 20000-2 under AC3/VS II, Version 2.03 »> 
Data General MV/32 20000-2 under AOS VS II, Version 2.03 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


PTXC QUAUT7 oc for 


i»ti: tK 

dti- m 

l»n<* rina »ir. 

Jm 

Rt -.. 

Diet - 


AH 


Ion/ 

I— ' • . 

j Avallat 51 it? Codes 
Avail and/or 
Scaolal 


iDl»t 

.i 






DECLARATION OF CONFORHANCI 


Customer: TLD Systems, Ltd 

Ada Validation Facility: ASD/SCEL. Wright-Patterson KTt OH 4»43)-t*03 
ACVC Version: 1.11 

Ada laplaakencatlon: 

Compiler Name and Version: TLD KV/KV Ada Compiler Systea. Version 7 ® 0 

Host Computer Systea: Data Carsaral NV/37 70000-7, 

AOS/VS II. Varslon 2 03 

Target Computer Systea Data General KV/32 20000 2 . 

AOS/VS II. Version 20) 


Customer's Declaration 

I, the urtderalgned. representing TLD System. Ltd . declara that TLD 
Systems, Ltd. has no knowledge of deliberate deviation* fro* the Ad* 
Language Standard ANSI/HIL-STD-1S1SA In the Implementation listed In this 
declaration executing In the default and* The certificates shall b* 
awarded In TLD Systems. Ltd.'s corporate naase 



TLD Systems. Ltd. 

Terry L. Dunbar. President 


&«t#: ISUKgvmkti 13 2 1 


KV/KV 


Page 1 




TABLE Of CQNTBfJS 


CHAPTER 1 INTRODUCTION 

1.1 USE Of THIS VALIDATION SUMMARY REPOT 

1.2 REFERENCES.. 

1. 3 ACVC TEST CLASSES. 

1.4 DEFINITION Of TERMS . 

CHAPTER 2 IMPLEMENTATION DCPBOOiCIES 

2.1 WITHDRAWN TESTS . 

2.2 INAPPLICABLE TESTS.. 

2.3 TEST MODIFICATIONS. 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONMENT. 

3.2 SUMMARY OF TEST RESULTS . 

3.3 TEST EXECUTION. 


APPENDIX A MACRO PARAMETERS 


APPENDIX B COMPILATION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE AcU* STANDARD 










CHAPTER 1 


IffTRCOUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures EPro90} against the Ada Standard >Ada8i] using the 
current Ada Compiler Validation Capability (ACVC). This validation Sunrassy 
Report (VSR) gives an account of the testing of this Ada implementation. 
For any technical terras used in this report, the reader is referred to 
(Pro90). A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89I. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexandria VA 22311-1772 


1-1 



I*mC©UCTION 


1.2 REFERENCES 

(Ada83J Reference Manual for the Ada Progress.! rig Language, 

ANSI/MIL-STD--I Smr^ebruaty' 1581 'and .ISC SSfS-ISS ? . 

(Pro90i Ada Compiler Validation Procedures. Version 2.1, Ada Joinx 
Program CFFIce, August I9W. 

tUG89 1 Ada C ompil er V alidation Capability User's Ouide, 21 2S6V. 


1.3 AO/C TEST CLASSES 

Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
9, C, D, E, and L. The first letter of a test name identifies the class K 
which it belongs. Class A, C, D, and E tests ate executable. Class B and 
class L tests are expected to produce errors at compile time and link time, 
respectively. 

The executable tests are written m a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPFT1 l, 
and the procedure CHECK_FXLE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat sotsse compile: 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK FILE is used to check the contents of 
text files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is conpiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 

Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exanple, the largest integer. A list 
of the values used for this implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-2 



x^iccucnc** 


Foe each Ada implementation. a customized test suite is pioduced by the 
AVF. This customization consists of making the modifications described in 
the preceding paragraph, removing withdrawn tests 'see section 2 . 1 ', and 
possibly removing some inapplicable tests < see section 2.2 and ! UG89i:. 

In order to pass an ACVC an Ada implementation must process each test c! 
the customised test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have t-> be added 
to a given host and target computer system- to allow 
transformation of Ada programs into executable fora: and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 

Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computes system and its* 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office {AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of ar, Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 





introduction 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computet 
System 

Inapplicable 

test 

ISO 

LRM 


Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


wi thdrawn 
test 


fulfillment by a product, process, or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AW which specifies the teras and 
conditions for AVF services (of any kind? to be performed. 

A formal statement from a customer assuring that confers:..ty 
is realized or attainable on the Ada implementation fc: 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

The Ada standard, or Language Reference Manual. published a;. 
ANSI/-MIL-STD-181SA-1983 and ISO 8652-198?. Citations free, 
the LRM take the for® "<scet ion> .<subsect;©n>: <perag:ap*fc-•. ” 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/oueput control, and data management. Usually, 
operating systems ace predominantly software, bait partial or 
complete hardware implementations are possible. 

A computer system where the executable form of Ada programs, 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration (Pro90|. 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this inpiementation. 

A test found to'be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-4 







CHAPTER 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 


The following tests have 

been wi 

thdravn by the 

AVO. The 

rationale 

withdrawing 

each test is 

available from either 

the AVO or 

the ATT. 

publication 

date for this list of withdrawn tests is 2 August 

1991. 

E28Q05C 

B28006C 

C322C3A 

C34006D 

C3S5G8I 

C 35508J 

C3S508M 

C.35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C456128 

C4S612C 

C4S6S1A 

C46022A 

B49008A 

B490088 

A74006A 

C743Q6A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

'63041A 

B85001L 

C860Q1F 

C94021A 

C97116A 

C98003B 

&A201LA 

CB7001A 

CB7001B 

CB70G4A 

CC1223A 

BC1226A 

CC1226& 

BC3009B 

BD1B02B 

BD1BG6A 

AD1BQ8A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B1&C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED700SD 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE240SA 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO kncwn as Ada 
Commentaries and commonly referenced in the format AI~ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 



IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTEM.MAX DIGITS: 


C24113L..Y 

(14 

tests) 

C3S70SL..Y 

(14 

tests ; 

C3S706L..Y 

(14 

tests) 

C35707L. .Y 

S 14 

tests) 

C3S708L..Y 

(14 

tests) 

C3S802L..Z 

(15 

tests 5 

C45241L..Y 

(14 

tests) 

C4S321L..Y 

{ 14 

tests) 

C45421L.,Y 

{14 

tests) 

C4SS21L..2 

(15 

tests s 

C45524L..Z 

(15 

tests) 

C45621L..2 

(15 

tests) 

C45641L..Y 

(14 

tests) 

C46012L ..1 

(15 

tests 5 


C24113H..K (4 tests) contain lines exceeding the implementation limit 

of 120 characters per line. 

The following 20 tests check for the predefined type LONG INTEGER; for 
this implementation, there is no such type: 


C35404C 

C45231C 

C45304C 

C4541IC 

C45412C 

C45S02C 

C45503C 

C4S504C 

C45504F 

C456UC 

C45613C 

C45614C 

C456 ,1C 

C45632C 

B52004D 

C55B07A 

B55B09C 

B86001W 

C86006C 

■CD7101F 


C3S404D, C45231D, B86001X, C86006E, and CD7101C check for a predefined 
integer type with a name other than INTEGER, LONG INTEGER, or 
SHORT_INTEGER; for this implementation, there is no such type. 

C35713B, C45423P B86001T, and C86006H check for the predefined type 
SHORT_FLQAT; for this implementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-pcmt type with a 
name other than FLOAT, LONG_FLQAT, or SHORT FLOAT; for this 
implementation, there is no such type. 

A35801E checks that FLOAT'FIRST..FLOAT'LAST may be used as a rang® 
constraint in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 

C45531M..P and C45532M..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.MAXMANTISSA of 47 or greater; for this 
implementation, HAX_MANTI£SA is less than 47. 

C45536A, C46013B, C46031B, C46033B, and C46034B contain length clauses 
that specify values for 'SMALL that are not powers of two or ten; this 
implementation does not support such values for 'SMALL. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINE_CVERFLCWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the base 
type; for this implementation, MACHINE OVERFLOWS is TRUE. 


2-2 






IMPLEMENTATION DEPENDENCIES 


D64005F..G (2 tests) use 10 levels of recursive procedure calls 
nesting; this level of nesting for procedure calls exceeds the 
capacity of the compiler. 

B86001Y uses the name of a predefined fixed-point type other than type 
DURATION; for this implementation, there is no such type. 

B91001H checks that an address clause for a task entry must not 
precede any entry; this implementation does not support interrupts. 
(See section 2.3.) 

LA30Q4A..B, EA3004C..D, and CA30D4E..F (6 tests) check pragma INLINE 
for procedures and functions; this implementation dees not support 
pragma INLINE. 

CD1009C checks whether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A53A checks operations of a fixed-point type for which a length 
clause specifies a power-of-ten TYPE'SMALL; this implementation does 
not support decimal 'SMALLs. (See section 2.3.) 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify non-default sizes for access types; this implementation 
does not support such sizes. 

AE21Q1C and EE2201D..E (2 tests) use instantiations of package 
SEQUENTIAL 10 with unconstrained array types and record types with 
discriminants without defaults; these instantiations are rej'-~ted by 
this compiler. 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT 10 
with unconstrained array types and record types with discriminants 
without defaults; these instantiations are rejected by this compiler. 

The tests listed in the following table check that USE ERROR is raised 
if the given file operations are not supported for the given 
combination of mode and access method; this implementation supports 
these operations. 


Test File Operation Mode File Access Method 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 

10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 

10 

CE2102F 

CREATE 

INCUT FILE 

DIRECT 10 


CE2102I 

CREATE 

IN FILE 

DIRECT 10 


CE2102J 

CREATE 

OUT FILE 

DIRECT 10 


CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 

10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 

10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 

10 

CE2102Q 

RESET 

OUT FILE 

2-3 

SEQUENTIAL 

10 




IMPLEMENTATION DEFOCSENCIES 


CE21G2R 

OPEN 

INCUT FILE 

DIRECT 10 

CE2102S 

RESET 

INCUT FILE 

DIRECT IO 

CE2102T 

OPEN 

IN FILE 

DIRECT'IO 

CE2102U 

RESET 

IN FILE 

DIRECT IO 

CE2102V 

OPEN 

OUT FILE 

DIRECT"IO 

CE2102W 

RESET 

ocrr~FiLE 

DIRECT IO 

CE3102E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Hcxte 

TEXT"'10 

CE3102G 

DELETE 

—-- 

TEXT TO 

CE3102I 

CREATE 

OUT FILE 

TEXT' 20 

CE3102J 

OPEN 

IN FILE 

TEXT' 10 

CE3102K 

OPEN 

OUT FILE 

TEXT IO 

The following 

16 tests 

check opera* 

ions on sequential, direct, and 

text files when multiple 

internal fil 

es are associated with the t-imt 

external file 

and one or more are 

open for writing; USE ERROR is 

raised when this association is attempt 

ed. 

CE2107B..£ 

CE2107O..H 

CE2I07L 

Y % f'.ti *!• * * f y 

i « wB W t»-4fc « <k 

CE2111D 

CE2111H 

CE311IB 

CE31210..E CEllUR 


CE311SA 

CE2203A checks that WRITE raises USE ERROR i f the capacity o£ an 
external sequential file is exceeded; this laplearntat icr. canned 
restrict file capacity. 

CE2403A checks that WRITE raises USE ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET LINE^ LENGTH and $E7^PAGE LENGTH raise 
USE ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT^ERROR *her. the value of the 
page number exceeds CXXJNT'LAST; for this Implementation, the value cf 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2.3 TEST MODIFICATIONS 

Modifications (see section 1.3} were required for 1233 tests. 

Itie following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way- 
expected by the original tests. 

B44004D B59001E B73004B BA1001A BC3017A 


2-4 




IMPLEMENTATION DEPENDENCIES 


C34009D and C34009J were graded passed by Evaluation Modification as 
directed by the AVO. Those tests check that 'SIZE for a composite type is 
greater than or equal to the suss of its components' 'SIZE values; but this 
issue is addressed by AI-00S2S, which has not been considered; there is not 
an obvious interpretation. This implementation represents array components 
whose length depends on a discriminant with a default value by implicit 
pointers into the heap space; thus, the 'SIZE of such a record type might 
be less than the sum of its components 'SIZEs, since the size of the heap 
space that is used by the varying-iength array components is not counted as 
part of the 'SIZE of the record type. These tests were graded passed given 
that the Report.Result output was "FAILED" and the only Report.Failed 
output was "INCORRECT 'BASE'SIZE”, from line 195 of C34009D and line 193 in 
C34009J. 


A35801E was graded inapplicable by Evaluation Modification as directed by 
the AVO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe numbers (cf. LRM 3.5.7:12). 

C83G30C and C86007A were graded passed by Test Modification as directed by 
the AVO. These tests were modified by inserting "PRAGMA ELABORATE 
(REPORT);” before the package declarations at lines 13 and 11, 
respectively. Without the pragma, the packages may be elaborated prior to 
package Report's body, and thus the packages' calls to function 
REPORT.IDENT_INT at lines 14 and 13, respectively, will raise 
PROGRAM ERROR. 


B91G01H was graded inapplicable by Evaluation Modification as directed by 
the AVO. This test checks that an address clause for an entry cannot 
precede that or any other entry of the task. This implementation does not 
support interrupts, and so rejects any address clause for an entry, regard¬ 
less of placement. 


The tests below were graded passed by Test Modification as directed by the 
AVO. These tests all use one of the generic support procedures, 
LengthCheck or Enum_Check (in support files LENCHECK.ADA & ENUMCHEK.ADA), 
which use the generic procedure Unchecked_Conversion. This implementation 
rejects instantiations of Unchecked_Conversion with array types that have 
non-static index ranges. The AVO ruled that since this issue was not 
addressed by AJ-00590, which addresses required support for 
Unchecked Conversion, and since AI-00590 is considered not binding under 
ACVC l.ll, the support procedures could be modified to remove the use of 
Unchecked_Conversion. Lines 40..43, 50, and 56..58 in LENCHECK and lines 
42, 43, and 58..63 in ENUMCHEK were commented out. 


CD1009A CD1009I CD1009M 
CD1C04D CD2A21A..C CD2A22J 
*CD2A81A CD3014C CD3014F 
CD3015K CD3022A CD4061A 


CD1009V 
CD2A23A. .B 
CD3015C 


CD1009W 

CD2A24A 

CD3015E..F 


CD1C03A 
CD2A31A..C 
CD3015H 


2-5 





IMPLEMENTATION DEPENDENCIES 


*CD2A81A, CD2A81B, CD2A81E, CD2A83A, CD2A83B, CD2A83C, and CD2A83E were 
graded passed by Test Modification as directed by the AVO. These tests 
check that operations of an access type are not affected if a 'SIZE clause 
is given for the type; but the standard customization of the ACVC allows 
only a single size for access types. This implementation uses a larger 
size for access types whose designated object is of type STRING. The tests 
were modified by incrementing the specified size $ACC_SIZE with '+ 64'. 


Many of the Class A and Class C (executable) test files were combined into 
single procedures ("bundles") by the AVF, according to information supplied 
by the customer and guidance from the AVO. This bundling was done in order 
to reduce the processing time—compiling, linking, and downloading to the 
target. For each test that was bundled, its context clauses for packages 
Report and (if present) SYSTEM were commented out, and the modified test 
was inserted into the declarative part of a block statement in the bundle. 

The general structure of each bundle was: 

WITH REPORT, TEXT_IO, SYSTEM; 

PROCEDURE <BUNDLE_NAME> IS 

— repeated for each test 

DECLARE 

<TEST FILE> [a modified test is inserted here, ...) 

BEGIN 

<TEST NAME>; f... and invoked here] 

EXCEPTION —test is not expected to reach this exception handler 

WHEN OTHERS *> REPORT.FAILED("unhandled exception "); 

REPORT.RESULT; 

END; 

TEXT_IO.NEWJLINE; 

— (... repeated for each test in the bundle] 

TEXT_IO.PUT_LINE ("GROUP TEST <BUNDLE_NAME> COMPLETED"); 

END <BUNDLE NAME>; 


The 1189 tests that were processed in bundles are listed below; each bundle 
is delimited by '<' and '>'. 


<A21001A 

A22002A 

A22006B 

A26004A 

A26007A 

A27003A 

A27004A 

A29002A 

A29002B 

A29002C 

A29002D 

A29002E 

A29002F 

A29002G 

A29002H 

A29002I 

A29002J 

A29003A 

A2a031A> 

<A32203B 

A32203C 

A32203D 

A33003A 

A34017C 

A35101B 

A35402A 

A35502Q 

A35502R 

A35710A 

A35801A 

A35801B 

A35801F 

A35902C 

A38106D 

A38106E 

A38199A 

A39005B 

A39005C 

A39005D 

A39005E 

A3900SF> 

<A39005G 

A54B01A 

A54B02A 

A55B12A 

A55B13A 

A55B14A 

A62006D 

A71002A 

A71004A 

A72001A 

A73001I 

A73001J 

A74105B 

A74106A 

A74106B 

A74106C 

A74205E 

A74205F> 

<A83009A 

A83009B 

A83041B 

A83041C 

A83041D 

A83A02A 

A83A02B 

A83A06A 

A83A08A 

A83C01C 

A83C01D 


2-6 







IMPLEMENTATION DEPENDENCIES 


A83C01E 

A83C01F 

A83C01G 

A83C01H 

A83C01I 

A83C01J 

A85007D 

A85013B 

A87B59A> 

<AB7006A 

AC1015B 

AC3106A 

AC3206A 

AC32Q7A> 

<AD1A01A 

AD1A01B 

AD1D01E 

AD7001B 

AD7005A 

AD7101A 

AD7101C 

AD7102A 

AD7103A 

AD7103O 

<AD7104A 

AD7203B 

AD7205B> 

<C23QQ1A 

C23003A 

C23006A 

C24002A 

C24002B 

C24002C 

C24003A 

C24003B 

C24003C 

C24106A 

C24113A 

C24113B 

C24113C 

C24113D 

C24113E> 

<C24201A 

C24202A 

C24202B 

C24202C 

C24203A 

C24203B 

C24207A 

C24211A 

C2500IA 

C25001B 

C25003A 

C25004A 

C26002B 

C26006a> 

<C26008A 

C27001A 

C2A001A 

C2A001B 

C2A001C 

C2A002A 

C2AOG6A 

C2A008A 

C2A009A 

C2A021B> 

<C32107A 

C32107C 

C32108A 

C32108B 

C3211LA 

C32111B> 

<C32112A 

C32112B 

C32113A> 

<C32114A 

C32115A 

C32115B> 

<C32117A 

C34001A 

C34001C 

C34001D 

C34001F 

C34002A 

C34002C 

C34003A 

C340030 

<C34004A 

C34004C 

C3400SA 

C3400SO 

CC34005D 

C34005F 

C34005G 

C34005I> 

<C34005J 

C34005L 

C3400SM 

C340050> 

<C34005P 

C34005R 

C34005S 

C34005U 

C34006A 

C34006F 

C34006G 

C34006J> 

<C34006L 

C34007A 

C34007D 

C34007F 

C3400?G> 

<C34007I 

C34007J 

C34007M 

C34007P> 

<C34007R 

C34007S> 

<C34G09a 

C34009F 

C34009G 

C34009L 

C34011B 

C34012A 

C34014A 

C34014O 

<C34014E 

C34014G 

C34014H 

C34014J 

C34014L 

C34014N 

C34QI4P 

C34014R 

C34014T> 

<C35503A 

C35503B 

C35503C 

C35503D 

C35503E 

C35503F 

C35503G 

C35503H 

C35503K> 

<C35503L 

C35503O 

C35503P 

C35504A 

C35504B 

C35505A 

C35505B 

C35505O 

CC35505D 

C3SSOSE 

C35505F 

C35507A 

C35507B> 

<C35507C 

C35507E 

C35507G 

C35507H 

C35507I 

C35507J> 

<C35507K 

C35507L> 

<C35706A 

C35706B 

C35706C 

C35706D 

C35706E> 

<C35707A 

C35707B 

C35707C 

C35707D 

C35707E 

C35708A 

C35708B 

C35708C 

C35708D 

C35708E> 

<C3571IA 

C357IIB 

C35712A 

C35712B 

C35712C 

C35713A 

C3S7130 

<C3580ID 

C3S802A 

C35802B 

C35802C 

C35802D 

C35802E> 

<C35902A 

C35902B 

C359G2D 

C35904A 

C35904B 

C35A02A 

C35A03A 

C35A03B 

C35A03C 

C35A03D> 

<C35A03N 

C3SA03O 

C35A03P> 

<C35A03O 

C35A04A 

C35A04B 

C3SA04O 

<C35A04D 

C35A04N> 

<C35A04O 

C35A04P> 

<C35A04Q 

C35A05A 

C3SAOSD 

C35A05N> 

<C35A05Q 

C35A06A 

C35a06B> 

<C35A06D 

C35A06N 

C3SA06O> 

<C35A06P 

C35A06Q 

C35A06R 

C35A06S 

C35A07A 

C35A07B 

C35A07O 

<C35a07D 

C35A07N 

C35A07O 

C35A07P 

C35A07Q 

C35A08B 

C36003A> 

<C36174A 

C36180A 

C36202A 

C36202B 

C36202C 

C36203A 

C36204A 

C36204B 

C36204O 

<C36205A 

C36205B 

C36205C 

C36205D 

C36205E 

C36205F 

C36205G 

C36205H> 

<C36205l 

C36205J 

C36205K 

C3630LA 

C36301B 

C36302A 

C36303A 

C36304A 

C36305A> 

<C37002A 

C37003A 

C37003B 

C37005A 

C37006A 

C37007A 

C37008A 

C37008B> 

<C37008C 

C37009A 

C37010A 

C37010B 

C37012A 

C37102B 

C37103A 

C37105A 

C37107A 

C37108B 

C37206A 

C37207A 

C37208A 

C37208B 

C37209A 

C37209B 

C37210A> 

<C37211A 

C37211B 

C37211C 

C37211D 

C37211E 

C37213A 

C37213B 

C37213C 

C37213D> 

<C37213E 

C37213F 

C37213G 

C37213H> 

<C37213J 

C37213K 

C37213L 

C37214A> 

<C37215A 

C37215B> 

<C37215C 

C37215D 

C37215E 

C37215F 

C37215G 

C37215K 

C37216A 

C37217A 

C37217B 

C37217C> 

<C37304A 

C37305A 

C37306A 

C37307A 

C37309A 

C37310A 

C37312A 

C37402A 

C37403A> 

<C37404A 

C37404B 

C37405A 

C37409A 

C37411A 

C38002A 

C38002B 

C38004A 

C38004B 

C38005A 

C380C5B 

C38005C 

C38006A 

C38102A 

C38102B 

C38102C 

C38102D 

C38102E 

C38104A 

C38107A 

C38107B> 

<C38108A 

C38201A 

C38202A 

C39006A 

C39006B 

C39006D 

C39006E 

C39006G 

C39G07A 

C39007B 

C39008A 

C39008B 

C39008C> 

<C4110lD 

C41103A 

C4U03B 

C41104A 

C41105A 

C41106A 

C41107A 

C41108A 

C41201D 

C41203A 

C41203B> 

<C41204A 

C41205A 

C41206A 

C41207A 

C41301A 

C41303A 


2-1 



IMPLEMENTATION DEPQOENCIES 


C41303B 

C41303C 

C41303E 

C41303K 

C41303M 

C41303N 

C41303U 

C4130 3V 

C4I303W 

C4I306C 

C41307A 

C41307C 

C41309A> 

<C4132QA 

C41321A 

C41326A 

C41327A 

C41328A> 

C42005A 

C42006A 

C42007A 

C42007F 

C42007G 

C42007H 

C43004B 

C43004C 

C43103A 

C43106A 

C43107A 

C43108A 

<C43204G 

C43204H 

C43204I 

C43205E 

C43205F 

C43205G 

C43206A 

C43207A 

0432078 

C43209A 

C43210A 

C4321LA 

C43214B 

C43214C 

C43214D 

C43222A> 

<C43224A 

C44003A 

C45101A 

C45101B 

C45101C 

C45101K 

C45104A 

04511 LA 

C45U2A 

C4S1128 

C45113A> 

C45I22D 

C45123A 

C45123B 

C45241B 

C45241C 

C45241D 

C45252A 

C45252B 

C45253A 

C45321D 

C45321E> 

<C45323A 

C45343A 

C45344A 

C4S34SA 

C45421A 

C45421B 

C45421C 

C45521B 

C45S21C 

C45521D 

C45524C 

C4S524D 

C45524E> 

C45532E 

C45532F 

C45532G 

C45532L> 

<C45652A 

C45662A 

C46012B 

C46012O 

<C46012D 

C46023A 

C46024A 

C4603LA 

C46043A 

C460438> 

<C46044A 

<C46052A 

C46053A 

C46054A 

C47003A 

C47004A 

C47005A 

C47009B 

C48004A 

C48004B 

C48005A 

C48005B 

C48005C 

C48007C 

C48008A 

C48008B 

C48009C 

C48009D 

C48009E 

C48009J 

C48010A 

C48011A 

C49022B 

C49022C 

C49023A 

C4A005B 

C4A006A 

C4A007A 

C4A012A 

C4A012B 

C4A013A 

C52001A 

C52001B 

CS2001C. 

CS2005E 

C52005F> 

<C52007A 

C520I0A 

C52011A 

C52011B 

C52103C 

C52103F 

C52103G 

C52103P 

C52103Q 

C52103R 

C52104C 

C52104F> 

<C52104G 

C52104P 

C52104Q 

C52104R 

C53005B 

C53006A 

C53006B 

C54A06A 

C54A07A 

C54A11A 

C55B09A 

C55B10A 

C55B11A 

C55C02A 

C55C02B 

C55C03A 

C57003A 

C57004A 

C57004B 


C41303F 

C41303G 

041303 l 

C41303O 

C41303Q 

C41303R 

C41304A> 

<0413048 

C4| iO'-A 

C41307O 

C4H08A 

C413080 

C41322A 

C41 32 3A 

C41324A 

<04140LA 

C41402A 

C4140iA 

C42007B> 

<0420070 

04200'0 

C4200? 1> 

<C4200?J 

€4200?* 

C431038 

04 3104A> 

<04J10SA 

C43204A 

C432040 

043204E 

C43205A 

0432058 

C43205C 

C43205H 

0432051 

04 32052 

C4 32070 

<0432070 

043208A 

C43212A 

C4J212C 

04 321 iA> 

C43214E 

C43214F 

C43215A 

C44OO30 

C44003E 

C44003F 

04510 IE 

C45101G 

C4S101H 

C45111B 

0451110 

<0451110 

<0451148 

C45122A 

C451228 

C 4 512 30 > 

<0452 32A 

C45232B 

C45241E> 

<C45242A 

0452428 

C45262A> 

<C45321A 

0453218 

C45331A 

C45331D 

C45332A 

C45345B 

C45345C 

C4534SD> 

C45421D 

045421E> 

<045505A 

C45S21E> 

<C45523A 

045524A 

<C45532A 

C45532B 

0455320 

C45532H 

C45532I 

C45S32J 

C45662B 

C45672A 

C4601LA 

C46Q12£> 

<046013A 

C46014A 

C46032A 

C46033A> 

<C46041A 

C46044B 

C46051A 

C46051B 

C47002A 

C47002B 

C47002C 

C47006A 

C47007A> 

<C47008A 

C48004C 

C48004D 

C48004E 

C48006A 

C48006B> 

<C48007A 

C48008C 

C48008D 

C48009A 

C48009F 

C48009G> 

<C48009H 

C48012A 

C49020A 

C49021A 

C49024A 

C49025A 

C49026A> 

C4A010A 

C4A010B 

C4A010D 

C4A013B 

C4A014A> 

<C51002A 

C52005A 

C52005B 

C52005C 

C52008A 

C52008B 

C52009A 

C52012A 

C52012B 

C52013A> 

C52103H 

C52103H 

CS2103L> 

C52103S 

C52103X 

C521C4A 

C52104H 

C52104K 

C52104L 

C52104X 

C52104Y> 

<C53004B 

C53007A 

C53008A 

C54A03A 

C54A13A 

C54A13B 

C54A13C> 

C55B11B 

C55B15A 

C55B16A 

C55C03B 

C55D01A 

C56002A 

C57004C 

C57005A> 

<C58004A 


2-8 


0413032 
Cil 30 IS 
C41306B 
5 OSD 
C41325A 
C41404A 
C420O?£ 
O430O3A 

e-mesa 

C41204F'> 
04I2C5L 
043205* 
043206B 
<C43214A 
0432158 
C4400JG 
C4S101I 
C4S1J1E 
C45122C 
C4S241A 
0452SLA 
C4S3210 
C45342A 
<0454138 
04552IA 
C4S524B 
C45532D 
C46S32* 
C46012A 
C46021A 
C46Q42A 
C46051O 
C470C2D 
C47009A 
C4B0C4F 
C48007B 
C480Q98 
C48009I 
C49022A 
<C4A005A 
C4A011A 
C51004A 
C5200SD 
C52009B 
<CS2103B 
<C52103M 
C52104B 
CS2104M 
C53005A 
C54A04A 
<C5SB08A 
C53C01A 
C57002A 
C58004B 




IMPLEMI24TAT1 ON DEPENDENCIES 


C58004C C58004D CS8004F C58004G C580QSA C58005B C5800SH 

C58006A C58006B C59001B C59002A CS9002B C59Q02O <C61008A 

C61009A C610I0A C62002A C62003A C62003B C62004A C62006A 

C62009A C63004A C64002B> <C64004G C64005A C64005B C64005C 

C64103A C64103B C64103C C64103D C64103E C64103F> <C64104A 

C64104B C64104C C64104D C64104E C64104F C64104G C64104H 

C64104I C64104J C64104K C64104L C64104M C64104N C64104O 

C64105A C64105B C6410SC C64105D C64105E C64105F> <C64106A 

C64106B C64106C C64106D C64107A C64108A C64109A C64109B 

C64109C C64109D C64109E> <C64109F C64109G C64109H C64109I 

C64109J C64109K C64109L> <C64201B C64201C C64202A C65003A> 

<C65003B C65004A C66002A C66002C C66002D C66002E C66002F 

C66002G C67002A C67002B C67002C C67002D C67002E> <C67003A 

C67003B C67003C C67C03D C67003E C67005A C67005B C67005C 

C67005D> <C72001B C7I002A C73002A C73007A C74004A C74203A 

C74206A C74207B C7A208A C74208B C74209A C74210A C74211A 

C74211B C74302A C7<i302B C7430SA C74305B C74306A C74307A> 

<C74401D C74401E C74401K C74401Q C74402A C74402B C74406A 

C74407B C74409B> <C83007A C83012D C83022A C83023A C83024A 

C83025A> <C83027A C83027C C83028A C83029A C83030A> <C83031A 

C83031C C83031E C83032A C83033A C83051A C83B02A C83B02B 

C83E02A C83E02B C83E03A C83E04A C83F01A C83F03A C84002A 

C84005A C84008A C84009A C85004B C85005A C85005B C85005C 

C85005D> <C85005E C85005F C85005G C85006A> <C85006F C85006G> 

<C87A05A C87A05B C87B02A C87B02B C87B03A C87B04A C87B04B 

C87B04C C87B05A C87B06A C87B07A C87B07B> <C87B07C C87B07D 

C87B07E C87B08A C87B09A C87B09B C87B09C C87B10A C87B11A 

C87B11B C87B13A C87B14A C87B14B C87B14C C87B14D> <C87B15A 

C87B16A C87B17A C87B18A C87B18B C87B19A C87B23A C87B24A> 

<C87B33A C87B34A C87B34B C87B34C C87B35A C87B35B C87B35C 

C87B37A C87B37B C87B37C C87B37D C87B37E C87B37F C87B38A 

C87B39A> <C87B40A C87B41A C87B42A C87B43A C87B44A C87B45A 

C87B45C C87B47A C87B48A C87B48B C87B50A C87B54A C87B57A 

C87B62A C87B62B> <CB1001A CB1002A CB1003A CB1004A CB1005A 

CB1010A CB1010B CB1010C CB1010D> <CB2004A CB2005A CB2006A 

CB2007A CB3003A CB3003B> <CB3004A CB4001A CB4002A CB4003A 

CB4004A CB4005A CB4006A CB4007A CB4008A CB4009A CB4013A 

CB5002A CB7003A CB7005A> <CC1004A CC1005C CC1010A> <CC1010B 

CC1018A CC1104C CC1107B CC1111A CC1204A CC1207B CC1220A 

CC1221A CC1221B CC1221C CC1221D> <CC1222A CC1224A CC1225A> 

<CC1304A CC1304B CC1305B CC1307A CC1307B CC1308A CC1310A> 

<CC1311A CC1311B CC2002A CC3004A CC3007A CC3011A CC3011D 

CC3012A CC3015A CC3106B> <CC3120A CC3120B CC3121A CC3123A 

CC3123B CC3125A CC3125B CC3125C CC3125D> <CC3126A CC3127A 

CC3128A CC3203A CC3207B CC3208A CC3208B> <CC3208C CC3220A 

CC3221A CC3222A CC3223A CC3224A CC3225A> <CC3230A CC3231A 

CC3232A CC3233A CC3234A CC3235A CC3236A CC3240A CC3305A 

CC3305B CC3305C CC3305D CC3406A CC3406B CC3406C CC3406D 

CC3407A CC3407B CC3407C CC3407D CC3407E CC3407F> <CC3408A 

CC3408B CC3408C CC3408D CC3504A CC3504B CC3504C CC3504D 

CC3504E CC3504F> <CC3504G CC3504H CC3504I CC3504J CC3504K> 

<CC3601A CC3601O <CC3603A CC3606A CC3606B CC3607B> 


2-9 




IMPLEMENTATION DEPENDENCIES 


* This test listed in two explanations 


2-10 



3 


CHAPTER 
PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 

The Ada implementation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 
For technical and sales information about this Ada implementation, contact: 

Terry L. Dunbar 
TLD Systems, Ltd. 

3625 Del Amo Blvd. 

Suite 100 

Torrance, CA 90503 


Testing of this Ada implementation was conducted at the customer's site by 
a validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, whether the test is applicable or inapplicable; 
otherwise, the Ada Implementation fails the ACVC [Pro90J. 

For all processed tests (inapplicable and applicable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the implementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 


3-1 



PROCESSING INFORMATION 


a) Total Number of Applicable Tests 

b) Total Number of Withdrawn Tests 

c) Processed Inapplicable Tests 

d) Non-Processed I/O Tests 

e) Non-Processed Floating-Point 

Precision Tests 

f) Total Number of Inapplicable Tests 

g) Total Number of Tests for ACVC 1.11 


3760 

95 

114 

0 


201 

315 

(c+d+e) 

4170 

(a+b+-f) 


3.3 TEST EXECUTION 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The tests were 
grouped in bundles for more efficient processing. The contents of the 
magnetic tape were initially loaded on the Sun-4, and moved to the Data 
General MV/32 20000-2 using Ethernet. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred tr the target computer 
system by the communications link described above, v*.id run. The results 
were captured on the host computer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing of 
the . processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Options | Switch Effect 


No_Phase Suppress displaying of phase times during 

compilation 

All tests were executed with the Code Straightening, Global 
Optimizations, and automatic Inlining options enabled. Where 
optimizations are detegted by the optimizer that represent 
deletion of test code resulting from unreachable paths, 
deleteable assignments, or relational tautologies or 
contradictions, such optimizations are reflected by 
informational or warning diagnostics in the compilation 
listings. 


3-2 



PROCESSING INFORMATION 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-3 




APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in (UG89j. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


$MAX__IN_LEN 120 — Value of V 

$BIG_ID1 (1..V-1 -> 'A', V «> '1') 

$BIG_ID2 (1..V-1 «> 'A', V -> '2') 

$BIG_ID3 (1..V/2 «> 'A') & '3' & 

(1..V-l-V/2 -> 'A') 

$BIG_ID4 (1..V/2 -> 'A') & '4' & 

(1..V-l-V/2 -> 'A') 

$BIG__INT_LIT (1..V-3 -> '0') & "298" 

$BIG_REAL_LIT (1..V-5 -> '0') & "690.0" 

$BIG_STRING1 ' & (1..V/2 -> 'A') 5. 

$BIG_STRING2 & (1..V-l-V/2 »> 'A') & '1' & 

$BLANKS (1..V-20 «> ' ') 

$MAX LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 «> '0') & ”11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 -> '0') & "F.E:" 

A-l 



MACHO PARAMETERS 


$MAX_STRING LITERAL S U..V-2 -> 'A'} L 

The following table lists all of the other macro parameters and the 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZ£ 32 

$ ALIGNMENT 4 

$COUNT_LAST 2147483647 

$DEFAULT_MEM_SIZE 16#10000000» 

$DEFAULT_STOR_UN IT 16 

$DEFAULT_SYS_NAME DGMV 

$D£LTA DOC 2.0**(-31) 

$ENTRY_ADDRESS 15 

$ENTRY_ADDRESS1 17 

$ ENTRY^ADDRES S 2 19 

$FIELD_LAST 127 

$ FILE_TERMINATOR ASC11.EDT 

$FIXED_NAME NO_SUCH_FIXED_TYPE 

$FLQAT_NAME NO_SUCH_FLOAT_TYPE 

$FORM_STHING 

$FORM_STRING2 "CANNOT_RESTRICT_FILE_CAPACITY" 

$GKEATER_THAN_DURATICN 

90000.0 

$GREATER THAN DURATION BASE LAST 

13107?. 0 

$GREATER_THAN_FLOAT_BASE LAST 

2.UE+76 

$GREATER_THAN_FLOAT_SAFE LARGE 

2.UE+75 

A-2 




MACRO PARAMETERS 


$GR£ATER_THAN SBORTFLQAT_SAF£_LARGE 

NO SUCH SHORT FLOAT TYPE 

$HIGH_PRIORITY 200 

$ILLEGAL_EXTERNAL_FILE_NAME1 

BADFILENAME^. ! 

$ I LLEGAL_EXTER*SAL__FI LE NAME2 

TO I SFI LENAMEW0UU36EPERFECTLYLEGAL IFI TOTRJE240TSGLQNG. SOTHERE 


$INAPPROPRIATE_LINE_LENGTH 

-1 

$INAPPROPRIATEPAGELENGTO 

-1 


$INCLUDE_ PRAGMA1 

PRAGMA INCLUDE 

$ INCLUDEPRAGMA2 

PRAGMA INCLUDE 

$INTEGERFIRST 

-2147483648 

$INTEGERLAST 

2147483647 

$INTEGER_LAST_PLUS_1 

2147483648 

$INTERFACE_ LANGUAGE 

ASSEMBLY 

$LESS_THAN_DURATION 

-90000.0 

$LESS_THAN_DURATION_ 

BASE FIRST 
-111073.0 


("A28006D1.TST") 
( "b28006El.TST") 


$LINE_TERMINATOR 
$LCW PRIORITY 


ASCII.CR 
1 


$MACHINE_COOE_STATEKENT 

AC2'(OP->l,ACS->O r ACD->2 f OP2->WMOV); 


$MACHINE_CODE_TYPE 

$MANTISSA_DOC 

$MAX_DIGITS 

$MAX_INT 

$MAX_INT_PLUS_1 

$MIN_INT 

$NAME 


ACCUMULATOR 

31 

15 

2147483647 

2147483648 

-2147483648 

NO SUCH INTEGER TYPE 


A-3 





MACRO PARAMETERS 


SNAME LIST 

Af1750, DgMv 


SNAME SPECIFICATION! 

X2I20A 


$NAME_SPECIFICATION2 

X2120B 


SNAME^SPECIFICATION3 

X3119A 


$NEG_BASED_INT 

16*FFFFFFFE* 


$NEW_MEM_SIZ£ 

16*10000000* 


$NEW_STORJJNIT 

16 


$NEW_SYS__NAME 

AF1750 


SPACE TERMINATOR 

ASCII.FF 


$R£CORD_DEFINITICN 

type Null ary is 
NuliaryjDp; end 

record Opcode 
record; 

$RECORD NAME 

NULLARY 


$TASK__SIZE 

32 


$TASK_STORAGE_SIZE 

2000 


STICK 

0,001 


SVARIABLEADDRESS 

8*16000000200* 


$VARIABLE_ADDRESS1 

8*16000000220* 


$VAR IABLEADDRESS 2 

8*16000000240* 


SYOUR PRAGMA 

pragma export 



A-4 



COMPILATION SYSTEM OPTIONS 


The compiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer. unless specifically noted 
otherwise, references in this appendix are to compiler documental ion and 
not to this report. 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this 
Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 






MV/ADA COMPILER SYSTEM 


MV/ADA-1 


* 


To delete default options: 
TLD DEFAULTS DELETE 


3.4 Compiler Option Switches 

Compiler option switches provide control over various processing and 
output features of the compiler. These features include several 
varieties of listing output, the level and kinds of optimizations 
desired, the choice of target computer, and the operation of the 
compiler in a syntax checking mode only. 

Keywords are used for selecting various compiler options. The 
complement keyword, if it exists, is used to disable a compiler option 
and is formed by prefixing the switch keyword with “N0_“. 

Switches may be abbreviated to the number of characters required to 
uniquely identify the switch. For example, the switch "CROSSREF" 
(explained in the list below) may be uniquely identified by the 
abbreviation “CR" or any longer abbreviation. In the list of switches, 
on the following pages, the abbreviations are in bold, the optional 
extra characters are not bolded. 

If an option is not specified by the user, a default setting is 
assumed. All specified compiler options apply to a single invocation 
of the compiler. 

The default setting of a switch and its meaning are defined in the 
table below. The meaning of the complement form of a switch is 
normally the negation of the switch. For some switches, the complement 
meaning is not obvious; these complement switch keywords are listed 
separately. 

In the description of the switches, the target dependent name target is 
used. The value of this symbol is determined by the value of the 
TARGET switch. 

Compiler generated file specifications generally conform to host 
conventions. Thus, any generated filename is the source filename 
appended with the default-file extension. If the user specifies a full 
output filename, no default extension is provided. 


3 - 8 


tlo mvsrmMM ltd 






MV/ADA COMPILER SYSTEM 


MV/ADA-1 


SWITCH NAME 


MEANING 


CAll tree 

NO_CALL_TR£E -- aefault 

This switch is used in conjunction with /ELABORATE and /LIST to 
cause all .CTI files (corresponding to the complete set of object 
files being linked for this program) to be read in and a closure of 
all calls in the program to be computed. The results of this 
analysis is formatted into a subprogram call tree report. 

Note: The call tree will be incomplete if any required compilation 
unit's .CTI files are missing. 

CHECKS -- default 

CHECKS{-check idencifierl ,...)) 

N0_CHecks i~check_identifier {,...}} 

When the CHECKS switch is used, one or more check_identifiers are 
specified and the specified run time checks are enabled. The 
status of run time checks associated with unmentioned 
check_identifiers is unchanged. 

Without any check_identifiers, the NO_CKECKS switch omits all run 
time checks. If one or more check_identifiers are specified, the 
specified run time checks are omitted. The status of run time 
checks associated with unmentioned check_identifiers is unchanged. 

Checks can be eliminated selectively or completely by source 
statement pragma Suppress. Pragma Suppress overrides the checks 
switch. 


Check_identifiers are listed below and are described in the LRM, 
Section 11.7. 


ACCESS CHECK 
ELABORATION CHECK 
OVERFLOW_CHECK 

ADE Related Switch: 


DISCRIMINANT CHECK 
INDEX CHECK ~ 
RANCE~CHECK 

/SUPPRESS 


DIVISION CHECK 
LENGTH CHECK 
STORAGE CHECK 


3 - 9 


tlo BvmrmMM ltd 





MV/ADA COMPILER SYSTEM 


MV/ADA-1 


CONFIG-value 

NOCOnfig-v«j u « 

The CONFIG switch provide* a conditional compilation 
(configuration) capability by determining whether or not source 
text, introduced or bracketed by special coasesnt constructs, is 
compiled. For a single line: 

--/value souree-caxc 

where source-text is compiled only if config - value is 
specified. 

For multiple lines: 

--/value line-1 

--/value line~2 

--/value line-3 


--/value line n 

where the construct 

--(value line-1 

line-2 
line-3 


--lvalue line-n 
is equivalent. 

NOTE: The braces (( and 1) trust appaar In the source code; in 
this instance, they are not metacharacters. All of the text 
between --(value end --lvalue is compiled or skipped, depending 
upon whether or not the /config-vaiue Is present. 


CPl 


This switch sets the number of characters per line (80 to 132) in 
the listing file. 


3 - 10 


tld msmrmMM lto 






MV/ADA COMPILER SYSTEM 


MV/ADA-1 


CRossref 

N0_CRoSSR£F -- default 

This swicch generates a cross reference listing chat contains names 
referenced in the source code. The cross reference listing is 
included in the listing file; therefore, the LIST switch oust be 
selected or CROSSRIF has no effect. 

ABE Related Command: PRETTY/CREF 

CTl (- CTI-file-spic) 

N0_CTl ** default 

This switch generates a CASE tools Interface file. The default ] 

filename is derived froa the object filenaae, with a .CTl | 

extension. This switch is required to support the Stack Analysis j 
and/or Call Tree switches. | 

DEBUG -- default 

N0_DEBug 

This switch selects the production of symbolic debug tables in the 
relocatable object file. 

Alternate abbreviation; DBG, N0_DBG 
ADE Related Switch: /DEBUG, /TABLE 

DELASSICN -- default 
NO_DELassign 

This switch optimizes code by deleting redundant assignments. 

NOTE: Use of this switch can cause erroneous source programs to 
execute with unexpected results if references to access objects 
are made without regard to the interference semantics of Ada. 


ELaborator 

This switch selects generation of a setup program that elaborates 
all compilation units on which the named subprogram depends and 
then calls the named program. This program will be the main 
program at link time. 


3 - 11 


tt-o mvbtmm* ltd 


MV/ADA COMPILER SYSTEM 


MV/ADA-1 


Exception info 

NO_EXCePTION_INFO -- default 

This switch generates a string in the relocatable object code that 
is the full pathname of the file being compiled. It generates 
extra instructions to identify the location at which an unhandled 
exception occurred. The NO_EXCEPTION_INFO switch suppresses the 
generation of the string and extra instructions. The source 
statement pragma Suppress (ALL_CHECKS) or pragma Suppress 
(EXCEPTION_INFORMATION) suppresses only the extra instructions. 

FULL_CALL_TREE -- default 

When the FULL_CALL_TREE switch is used, the compiler listing | 
includes representations of every call. | 

INDEnt-h 

INDEnT- 3 -- default 
N0 _INDEnt 

This switch produces a formatted (indented) source listing. This 
switch assigns a value to the number of columns used in 
indentation; the value n can range from 0 to 15. 

INFo ~ default 
N0_INFo 

This switch produces all diagnostic messages. It suppresses the 
production of information-level diagnostic messages. 

INLINE -- default 
N0 _INLine 

This default switch automatically inlines any procedure that is | 

called only once. It may be disabled by adding the noinline option j 

to the command line. Inlining is only implemented for calls that j 

are made within the same compilation unit as the body of the j 

procedure to be expanded. | 

INTsl 

N0_INTSL -- default 

This switch intersperses lines of source code with the assembly | 

code generated in the macro listing. This switch is valid only if | 

the LIST, SOURCE, and MACRO switches are selected. j 

ADE Related Switch: /ASSEMBLY | 


3 - 12 


tub srvi itsms era 




MY/ADA COMPILER SYSTEM 


MV/ADA-1 


INVerted_calls 

This switch is used to determine which calls led to the present ? 
one. A reversed order call tree is generated. ? 

LIBRARY-Ada -program - library -file-spec 
LIBRARY-target.LIB -- default 

The LIBRARY switch specifies the file to be used for Ada Program 
Library. The default value of target in the Ada Program Library 
file spec is derived from the TARGET switch. 

ADE Related Switch: /LIBRARY 

LISt{ -listing-file-spec) 

N(M.ISt -- default 

The LIST switch generates a listing file. The default file 
extension is LST. The listing-file-spec can be optionally 
specified. 


LOg 

N0_L0g -- default 

This switch requests the compiler to write a compiler log. 
including command line options and the file spec of the Ada source 
file being compiled, to @OUTPUT. 

LPp- 60 *- default 

The LPP switch assigns a value to the number of lines per page for 
listing. The value can range from 10 to 99. 

MACro 

N0_MACro -- default 

The MACRO switch produces an assembly like object code listing 
appended to the source listing file. The LIST switch must be 
enabled for this switch to work. 

MAIN ELAB 

N0MAIn_ELAB -- default 

The MAIN_ELAB switch is used to inform the compiler that the 
compilation unit being compiled is to be treated as a user-defined 
elaboration, or setup, program. 

Note: The XTRA switch is required when MAIN_ELAB is to be used. 


^E7 


TLO IVfTVMS LTD 


3 - 13 




MV/ADA COMPILER SYSTEM 


MY/ADA-1 


* 


MAKELIB {-paren c - API - spec ) 

NO_MAKelib -- default 

The MAKELIB switch creates a new Ada Program Library (APL) file. 
MAKELIB should be used with caution because it creates a new AJPL 
file in the default directory even if another APL file of the saae 
name existed. 

The new APL file is created in the current working directory with 
Che naae target.LIB unless the LIBRARY switch is used. 

If MAKELIB is used without a parent, a new library is created with 
Che default RTS specification. This specification is derived front 
the naae TLD_LIB_targec. See the target dependent compiler 
sections for further explanations of this naae. 

ADE Related Commands: LIBCREATE, LIBSEaRCHLIST 

MAXERRORS-n 

MAXeRRORS- 500 -- default 

This switch assigns a value limit to the number of errors forcing 
job termination. Once this value is exceeded, the compilation is 
terminated. Information-level diagnostic aessages are not included 
in the count of errors forcing termination. The specified value's 
range is from 0 to 500. 

MODEL~HATH -- MV target 
MODEIr-MATH -- MV target 

By default, the compiler produces code for the generic or standard | 

target. The model switch allows the user to specify a nonstandard | 

model for the target. I 

I 

For the MV-HAVK target, the MODEL switch may be set to MATH to | 

indicate that code generation should take advantage of the | 

Intrinsic math instructions. i 

NEg_offset 

The NEG_0FF5ET switch is used to get around a deficiency in the MV ? 

linker. Negative offsets can cause a "relocation overflow" error ? 

if this option is not used. ? 

OBJECT-{ object-file-spec ) 

OBJECT -- default 

N0_0Bject 

The OBJECT switch produces a relocatable object file. The default 
file extension is ".OBJ". 


^E7 


TLOmVSTKMC i_TEJ 


3 - 14 



MV/ADA COMPILER SYSTEM 


MV/ADA-1 


OPT -- default 

NO_OPt 

The OPT switch enables global optimization of the compiled code. 

PARm 

N0_PARm -- default 

The PARM switch causes all option switches governing the 
compilation, including the defaulted option switches, to be 
included in the listing file. The LIST option must also be 
selected or PARM will have no effect. User specified switches are 
preceded in the listing file by a leading asterisk (*). 

PHASE -- default 

N0_PHase 

The NO_PHAS£ switch suppresses the display of phase names during 
compilation. 

R EF_ID_Case-op cion 

The Ref_Id_Case switch is used to determine how variable names | 

appear In the compiler listing. The options for this switch are: [ 

I 

All_Lower «- All variable names are in lower case. i 

AllJJnderlined -- All variable names are underlined. { 

All_Upper -- All variable names are in upper case. | 

As_Is -- All variable names appear as is. i 

Initial_Caps -- All variable names have initial caps. | 

Insert_Underscore -- All variable names have underscores inserted. j 

REF_KEY_Case-opcion 

The Ref_Key_Case switch is used to determine how \da key words j 

appear in the compiler listing. The options for this switch are: | 

! 

All_Lower -- All Ada key words are in lower case. i 

AllJUnderlined -- All Ada key words are underlined. i 

All_Upper -- All Ada key words are in upper case. 1 

As_Is All Ada key words appear as is. ! 

Initial_Caps -- All Ada key words have Initial caps. ! 

Insert_Underscore -- All Ada key words have underscores inserted. i 


3 - 15 


TCO fVfTVMS CTO 











MV/ADA COMPILER SYSTEM 


MV/ADA-1 


Reformat {-re forma, t-file- spec } 

N0_REFORMAT -- default 

This switch causes TLDada to reformat the source listing in the | 

listing file and, if a reformat-file-spec is present, to generate a | 

reformatted source file. The default extension of the new source j 
file is ".RFM". j 

ADE Related Command: PRETTY 

SOURCE -- default 

NO_SOurce 

This switch causes the input source program to be included in the 
listing file. Unless they are suppressed, diagnostic messages are 
always included in the listing file. 

ADE Related Switch: /ERRORS 

STACK ANALYSIS 

NO_STaCK_ANALYSIS -- default 

This switch is used with the ELABORATOR switch to cause all CTI 
files (corresponding to the complete set of object files being 
linked for this program) to be read in. The subprogram call tree 
is analyzed to compute stack requirements for the main program and 
each dependent task. 

NOTE: The tree will be incomplete if any required compilation 
unit's CTI files are missing. 


SYNTAX ONLY 

N0_$YnTaX_ONLY -- default 

This switch performs syntax and semantic checking on the source 
program. No object file is produced and the MACRO switch is 
Ignored. The Ada Program Library is not updated. 

TaRGET-MV -- default 

Target-hawk 

This switch selects The target computer for which code is to be 
generated for this compilation. "HAWK" selects the Rolm HAWK 
architecture running under AOS/VS or ARTS/32. "MV" selects the 
Eclipse MV architecture operating under AOS/VS, AOS/VS II, or 
RT/32. 


3 - 16 


tt_d >MrrwMa ltd 





MY/ADA COMPILER SYSTEM 


MV/ADA-1 


MARKINGS -- default 

NOJuIArnings 

The WARNINGS switch outputs warning and higher-level diagnostic j 
messages. j 

I 

The NO_WARNINGS switch suppresses the output of both warning-level j 
and information-level diagnostic messages. | 


WRITE ELAB 

NO_WRlTE_ElAB -- default 

The URITE_ELAB switch is used to obti n an Ada source file which 
represents the main elaboration "setup* program created by the 
compiler. The MAIN__ELAB switch may not be used at the same time as 
the ELAB switch. 

Xtra 

N0_XTRA -- default 

This switch is used to access features under development. See the 
description of this switch in Section 3.9. 


3-17 


Mirto SWSTSMS LTD 








APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are: 


package STANDARD is 

type INTEGER is range -2147483648 .. 2147483647; 

type FLOAT is digits 6 range -2.26156E+74 .. 2.26156E+74; 

type DURATION is delta 2.0**(-12) range -86400.0 .. 86400.0; 

type SHORT_INTEGER is range -32768 .. 32767; 

type LONG_FLQAT is digits 15 

range -2.2615642491634E+74 .. 2.26156424291634E+74; 


end STANDARD; 






APPENDIX F OF THE Add STANDARD 


In the customer's Appendix F documentation that constitutes this appendix, 
some information appears to be inaccurate or incomplete; the AVF offered 
the customer an opportunity to redress these points, but the customer 
declined to do so. 

The customer declined to provide the AVF with an updated list of all 
compiler/linker options and the options used specifically for this 
validation. 

The customer states that DURATION’DELTA - 2.0**< —12). Although other 
implementations have a value of 2.0**(-14) and therefore should possibly be 
2.0**(-14). The customer declined to provide the AVF with an updated 
Appendix F for this implementation; therefore we cannot be certain as to 
the correct value. 

The customer declined to provide an Appendix F containing a package SYSTEM 
specification. 

On page C-4, the customer states several inaccuraties concerning length 
clauses being not supported for 'SIZE except when applied to task types and 
'Storage Size when applied to access types. Also length clauses are 
supported for 'Small. The customer declined to provide the AVF with an 
updated Appendix F for this implementation. 


C-2 





APPENDIX F OF THE Ada STANDARD 


The Ada language definition allows for certain machine dependencies in a 
controlled nvumer. No machine-dependent syntax of semantic extensions or 
restrictions are allowed. The only allowed implementation-dependencies 
correspond to implementation-dependent pragmas and attributes, certain 
machine-dependent conventions as mentioned in chapter 13 of the 
MIL-STD-1815A; and certain allowed restrictions on representation clauses. 

The full definition of the implementation-dependent characteristics of the 
TLD MV/MV Ada Compiler System is presented in this Appendix F. 

Implementation-Dependent Pragmas 

The TLD ACS supports the following implementation dependent pragmas. 


Pragma Export (Language_name, Ada_entity_name, {String}); 

This pragma is a complement to Pragma Interface and instructs the compiler 
to make the entity named available for reference by a foreign language 
module. The language name identifies the language in which the foreign 
module is coded. The only foreign language presently supported is 
Assembly. Ada and JOV T AL are permitted and presently mean the same as 
Assembly but the semantics of their use are subject to redefinition by 
future releases of the compiler. If the optional third parameter is 
present, the string provides the name by which the entity may be referenced 
by the foreign module. The contents of this string must conform to the 
conventions for the indicated foreign language and the linker being used. 
No check is made by the compiler to insure that these conventions are 
obeyed. 

Only objects having static allocation and subprograms are supported by 
pragma Export. If the Ada entity named is a subprogram, this pragma must 
be placed within the declarative region of the named subprogram. If the 
name is that of an object, the pragma must be placed within the same 
declarative region and following the object declaration. It is the 
responsibility of the programmer to insure that the subprogram and object 
are elaborated before the reference is made. 


pragma If (Compile Time Expression); 
pragma Elsif (CompTle_Time_Expr£Ssion); 
pragma Else; 
pragma Endif; 

These Source directives may be used to enclose cone?'tionally compiled 
source to enhance program portability and configuration adaptation. These 
directives may occur at the place that language defined pragmas, 
statements, or declarations may occur. Source code following these pragmas 
will be compiled or ignored similar to the semantics of the corresponding 
Ada statements depending upon whether the Compile_Time_Expression is true 



APPENDIX F OF THE Ada STANDARD 


or false, respectively. The primary difference between these pragmas and 
the corresponding Ada Statements are that the pragmas may enclose 
declarations and other pragmas. 


Inplementation-Dependent Attributes 
None. 


Representation Clause Restrictions 
Pragma Pack is not supported. 

Length clauses are not supported for 'SIZE except when applied to task 
types. 

Length clauses are not supported for 'StorageSize when applied to access 
types. 

Length clauses are not supported for 'StorageSize when applied to a task 
type and denote the number of words of stack to be allocated to the task. 

Length classes are not supported for 'Small. 

Enumeration representation clauses are supported for value ranges of 
Integer'First to Integer'Last. 

Record representation clauses are supported to arrange record components 
within a record. Record components may not be specified to cross a word 
boundary unless they are arranged to encompass two or more whole words. A 
record component of type record that has itself been "rep specificationed" 
may only be allocated at bit 0. Bits are numbered from left to right with 
bit 0 indicating the sign bit. 

The alignment clause is not supported. 

Address clauses are supported for variable objects and designate the 
virtual address of the object. The TLD Ada Compiler System treats the 
address specification as a means to access objects allocated by other than 
Ada means and accordingly does not treat the clause as a request to 
allocate the object at the indicated address. 

Address clauses are not supported for constant objects, packages, tasks, 
or task entries. 


Inplementation-Generated Names 

The TLD Ada Compiler System defines no implementation dependent names for 
compiler generated conponents. 


C-4 







APPENDIX F OF THE Ada STANDARD 


Address Clause Expressions 

Address expression values and type Address represent a location in logical 
memory (in the program's current address space). For objects, the address 
specifies a location within the logical address space. The 'Address 
attribute applied to a subprogram represents a 32 bit word address within 
the logical instruction space. 


Unchecked Conversion Restrictions 
None. 


I/O Package Characteristics 

The following implementation-defined types are declared in Text__lo. 
subtype Count is integer range 0 .. 2_147_483_647; 
subtype Field is integer range 0 .. 127; 

Other System Dependencies 
LRM Chapter 1. 

None. 

LRM Chapter 2. 

Maximum source line length — 120 characters. 

Source line terminator — Determined by the Editor used. 

Maximum name length — 120 characters. 

External representation of name characters. 

Maximum String literal — 120 characters. 

LRM Chapter 3. 

LRM defined pragmas are recognised and processed as follows; 
Controlled — Has no effect. 

Elaborate — As described in the LRM. 
inline — Not presently supported. 


C-5 




APPENDIX F OF TOE Ada STANDARD 


Interface — Supported as a means of importing foreign language 
components into the Ada Program Library. May be applied either to a 
subprogram declaration as being specially implemented, — read 
Interface as Import —, or to an object that has been declared 
elsewhere. Interface languages supported are Assembly for calling 
assembly language routines; and MV 32 for defining built in 
instruction procedures. An optional thir3 parameter is used to define 
a name other than the name of the Ada subprogram for interfacing with 
the linker. 

List — As defined in the LRM. 

Memory Size — Has no effect. 

Optimize — Has no effect. Optimization controlled by compiler 
command"option. 

Pack — Has no effect. 

Page — As defined in the LRM. 

Priority — As defined in the LRM. Priority may range from 1 to 200. 
Default priority is 1. 

Shared — As defined in the LRM. May be applied to scalar objects 
only. 

Storage Unit — Has no effect. 

Suppress — As defined in the LRM for suppressing checks; all standard 
checks may be suppressed individually as well as "Exception_Info" and 
"All Checks". Suppression of Exception_Info eliminates data used to 
provide symbolic debug information in the event of an unhandled 
exception. The All_Checks selection eliminates all checks with a 
single pragma. In addition to the pragma, the compiler permits 
control of check suppression by command line option without the 
necessity of source changes. 

System Name — Has no effect. 

Number declarations are not assigned addresses and their names are not 
permitted as a prefix to the 'address attribute. (Clarification only). 

Objects are allocated by the compiler to occupy one or more 16 bit words. 
Only in the presence record representation clauses are objects allocated to 
less than a word. 

Except for access objects, uninitialized objects contain an undefined 
value. An attempt to reference the value of an uninitialized object is not 
detected. 

The maximum number of enumeration literals of all types is limited only by 


C-6 





APPENDIX F OF THE Add STANDARD 


available symbol table space. 

The predefined integer types are: 

Short_Integer range -32_768 .. 32 767 and is implemented as a 16 bit 
value. 

Integer range -2_147_483_648 .. 2_147_483 647 and implemented a 32 bit 
value. 

Long_Integer is not supported. 

System.Minlnt is -2 147 483 648. 

System.Max Int is 2_I47_383 jd47. 

The predefined real types are: 

Float digits 6. 

LongFloat digits 15. 

ShortFloat is not presently supported. 

System.Max_Digits is 15 digits. 

Fixed point is implemented as 16-bit or 32-bit data as is appropriate for 
the range and delta. 

Index constraints as well as other address values such as access types are 
limited to 29 bits of value. 

The maximum array size is limited to the size of virtual address. 

The maximum String length is the same as for other arrays. 

Access objects are implemented as an unsigned 32 bit integer. The access 
literal Null is implemented as two words of zero. 

There is no limit on the number of dimensions of an array type. Array 
types are passed as parameters opposite unconstrained formal parameters 
using a 3 word dope vector illustrated below: 


| Word address of first element | 
j Low bound value of first dimension \ 
j Upper bound value of first dimension j 


Additional dimension bounds follow immediately for arrays with more chan 
one dimension. 


LRP! Chapter 4. 

Machine Overflows is True. 


C-7 



APPENDIX F OF THE Ada STANDARD 


* 


Pragma Controlled has no effect since garbage collection is never 
performed. 

LRM Chapter 5. 

The maximum number of statements in an Ada source program is undefined and 
limited only by the Symbol Table space. 

Case statements unless they are quite sparse, are allowed as indexed jump 
vectors and are, therefore, quite fast. 

Loop statements with a for implementation scheme are implemented most 
efficiently if the range is in reverse and down to zero. 

Data declared in block statements is elaborated as part of its containing 
scope. 

LRM Chapter 6. 

Arrays, records and task types are passed by reference. 

Pragma Inline is not presently supported for subprograms. 

LRM Chapter 7. 

Package elaboration is performed dynamically permitting a warm restart 
without the necessity to reload the program. 

LRM Chapter 8. 

LRM Chapter 9. 

Task objects are implemented as access types pointing to a Task Information 
Block (TIB). 

Type Time in package Calendar is declared as a record containing two double 
precision integer values: the date in days and the real time clock. 

Pragma Priority is supported with a value of 1 to 200. 

Pragma Shared is supported for scalar objects. 

LRM Chapter 10. 

Multiple Ada Program Libraries are supported with each library containing 
an optional ancester library. The predefined packages are contained in the 
TLD standard library, MV.LIB. 

LRM Chapter 11. 

Exceptions are implemented by the TLD Ada Compiler System to take advantage 
of the normal policy in embedded corrputer system design to reserve 50% of 


C-8 



APPENDIX F OF THE Add STANDARD 


* 


the duty cycle. By executing a small number of instructions in the 
prologue of a procedure or block containing an exception handler, a branch 
may be taken, at the occurance of an exception, directly to a handler 
rather than performing the time consuming code of unwinding procedure calls 
and stack frames. The philosophy taken is that an exception signals an 
exceptional condition, perhaps a serious one involving recovery or 
reconfiguration, and that quick response in this situation is more 
important and worth the small throughput tradeoff in a real time 
environment. 

LRM Chapter 12. 

A single generic instance is generated for a generic body. Generic 
specifications and bodies need not be compiled together nor need a body be 
conpiled prior to the compilation of an instantiation. Because of the 
single expansion, this implementation of generics tend to be more favorable 
of space savings. To achieve this tradeoff, the instantiations must by 
nature be more general and are, therefore, somewhat less efficient 
timewise. 

LRM Chapter 13. 

Representation clause support and restrictions are defined above. 

A comprehensive MachineCode package is provided and supported. 

Unchecked_Deallocation and UncheckedConversion are supported. 

Hie implementation dependent attributes are all supported except 
'Storage_Size for an access type. 

LRM Chapter 14. 

Full file I/O operations are supported and interface to AOS/VS operations. 
Text_Io and Low_Level_Io are supported. 


C-9 




