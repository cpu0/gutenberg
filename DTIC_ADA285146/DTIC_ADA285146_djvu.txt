f 


REPORT DOCUMENTATION P ^ 

Public reporting burden tor this collection ot Information Is estimated to average l hour per responst ' '**'•" '*'* I'*'' data 

sources gathering and maintaining the data needed, and reviewing the collectlor^ ot information. ners 

Service. Directorate lor Information Operations and Reports, 121S Jefferson Davis Highway. Suite 1204, Arlington. VA 22202-4302. ana to tne unice 01 imormanon and 
Regulatory Affairs, Office of Management and Budget, Washington, DC 20503. 


1. AGENCY USE (Leave 

2. REPORT 

3. REPORT TYPE AND DATES 

4. TITLE AND Compiler: VADScross IBM RISC System/6000 AIX 3.2.3 => 

MIPS R4000, Version 6.2 

Host: IBM RS/6000 Model 530 (under AIX 3.2.5) 

Target: SGI Indigo XS4000 (MIPS R4000), operating as a bare machine (bare 
machine) 

5. FUNDING 

♦ ? k t 
..' t 'W-. 

4f' Ibf 

6. AUTHORS: 

Wright-Patterson AFB, Dayton, OH 

7. PERFORMING ORGANIZATION NAME (S) AND 

Ada Validating Facility, Language Control Facility ASB/SCEL, Building 676, Rm. 
135 

Wright-Patterson AFB, Dayton, OH 45433 

8. PERFORMING 

ORGANIZATION 

9. SPONSORING/MONITORING AGENCY NAME(S) AND 

Ada Joint Program Office, Defense Information System Agency 

Code TXEA, 701 S. Courthouse Rd., Arlington, VA 

22204-2199 

10. SPONSORING/MONITORING 
AGENCY 


11. SUPPLEMENTARY 


12a. DISTRIBUTION/AVAILABILITY; Approved for public release; distribution 

12b. DRISTRIBUTION 

unlimited 

- 


13. (Maximum 200 

Rational Software Corporation, 940630W1.11362 


14. SUBJECT: Ada Programming Language, Ada Compiler Validation Summary 
Report, Ada Compiler Val. Capability Val. Testing, Ada Val. Office, Ada Val. Facility 


15. NUMBER OF 


ANSI/Mil-STD-1815A 


17 SECURITY 
CLASSiRCATION 


18. SECURITY 


16. PRICE 


20. LIMITATION OF 


UNCLASSIFIED 


NSN 


UNCLASSIFIED 


19. SECURITY 
CLASSIRCATION 

UNCLASSIFIED 


UNCLASSIFIED 




































AVF Control Number: AVF-VSR-588.0694 
Date VSR Ccmpleted: July 21, 1994 

94-05-12-RAT 


« 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 940630W1.11360 
Rational Software Corporation 

VADSself for DEC Alpha AXP OSF/1, Product Nlanber: 2100-01439, Version 6.2 
DEC 3000 Model 500 AXP under OSF/1, VI.3 


(Final) 


Prepared By: 

Ada Validation Facility 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 




34-30983 




DTIC QUAXiTI' r r,.<..- V 


<5 












Certificate Znfomation 


The following Ada implementation was tested and determined to pass ACVC 1.11. 
Testing was completed on 30 June 1994. 


Coopiler Name and Version: VADSself for DEC Alpha AXP OSF/1, 

Product Number: 2100-01439/ Version 6.2 


Host Cooputer System: 

Target Computer System: 
Customer Agreement Nundber: 


DEC 3000 Model 500 AXP 
under OSF/1/ Vl.3 

Same as host 

94-05-12-RAT 


See section 3.1 for any additional information about the testing environment. 

As a result of this validation effort. Validation Certificate 940630W1.11360 
is awarded to Rational Software Corporation. This certificate expires two 
years after HI1/-STD-1615B is approved by ANSI. 


This report has been reviewed and is approved. 


Ada Validation Faciliil^ 

Dale E. Lange 
Technical Director 
645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 


Ada Vu 

Director. . ^_ _ 

Institute for Defense Analyses 
Alexandria VA 22311 


Jr^uuzation 
iter aixi Software Engineering Division 



Joint 1 
Zionald J. 

Director, _ 

Defense Information Systems Agency 
Center for Information Management 


Acoosslon For j 

1 RTT3 



□ 


□ 

J’j ..; " 

_ 

n. 

_J 

_ _i 

1 u: -■irn ; 

- i 

r • 

-1 

' ' j 

j— 

i 

^ A 14 

1 


j 

V I 

' '■* 










Certificate Information 


The following inpleroentation was tested and determined to pass ACVC 1.11. 
Testing was cf ted on 30 June 1994. 

Compiler and Version; VADSself for DEC Alpha AXP OSF/1, 

Product Number: 2100-01439, Version 6.2 


Host Conpiter System: 

Target Con^juter System: 
Customer Agreement Number: 


DEC 3000 Model 500 AXP 
under OSF/1, VI.3 

Same as host 

94-05-12-RAT 


See section 3.1 for any addit’. •. information adxjut the testing environment. 

As a result of this validati:^ ef »rt, Validation Certificate 940630^'7l. 11360 
is awarded to Rational Softwa Corporation. This certificate expires two 
years after MIL-STD-1815B is approved by ANSI. 


Hiis report has been reviewed and is approved. 


Ada Validation Facility^ 

Dale E. Lange 
Technical Director 
645 CeSG/SeSL 

Wright-Patterson AFB OH 45433-5707 



Ada Vaii^ 
Director^ 


3n Organization 

iter and Software Engineering Division 
Institute for Defense Analyses 
Alexandria VA 22311 



Ada Joint Program Office 
Donald J. Reifer 
Director, AJPO 

Defense Information Systems Agency, 
Center for Information Management 










DECLARATION OF CONFORMANCE 




DECLARATION OF CONFORMANCE 


Customer: Rational Software Corporation 

Ada Validation Facility: 645 CCSG/SCSL 

Wright-Patterson AFB OH 45433-5707 

ACVC Version: 1.11 

Ada Implementation: 

Ada Compiler Name and Version: VADSself for DEC Alpha AXP OSF/1, 

Product Number: 2100-01439, Version 6.2 

Host Computer System: DEC 3000 Model 500 AXP (OSF/1 VI.3) 

Target Computer System: Same as host. 


Declaration: 

I, the undersigned, declare that I have no knowledge of deliberate 
deviations from the Ada Language Standard ANSI/MIL-STD-1815A, 

ISO 8652-1987, FIPS 119 as tested in this validation and documented 
in the Validation Summary Report. 



t, 


i 





TABLE OF CONTENTS 


CHAPTER 1 INTRtXXJCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 WITHDRAWN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MO)IFICATIONS.2-3 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING E2NVIR0NMENT.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COlPILATiaN SYSTEM OPTIONS 

APPENDIX C APPENDIX F OF THE Ada STANDARD 


i. 


X 














OJAPTER 1 


INTRODUCTION 


The Ada inplementation described above was tested according to the Ada 
Validation Procedures [Pro92] against the Ada Standard [Ada83] using the 
current Ada Con?)iler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada inplementation. For 
any. technical terms used in this report, the reader is referred to [Pro92]. 
A detailed description of the AC\rc may be found in the current ACVC User's 
Guide (UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the cotqputers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and conplete, or that the subject inplemeptation has no 
nonconformities to the Ada Standard other than those pres^ted. Copies of 
this report are available to the public from the AVF \diich performed this 
validation or from: 

National Technical Information Service ' 

5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1801 North Beauregard Street 

Alexemdria VA 22311-1772 


1-1 



INTRODUCriCJN 


1.2 REFERENCES 

[Ada83] Reference Manual for the Ada Programming Language, 

ANSI/MIL-STD-lSl^, February 1983 and ISO 8652-1^87. 

tPro92) Ada Compiler Validation Procedures , Version 3.1, Ada Joint 
Program office, August 1992. 

[UG891 Ada Compiler Validation Capability User's Guide , 21 Jxme 1989. 


1.3 ACVC TEST CLASSES 

Compliance of Ada inplementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. Hie first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to pro^ce errors at compile time and link time, 
respectively. 

The executaJale tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they are 
executed. Three Ada library units, the packages REPORT and SPPRT13, and the 
procedure CHECK_FILE are used for this purpose. The package REPORT also 
provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CHECK_FILE is used to check the contents of text 
files written by some of the Class C tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECK_FILE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal l 2 unguage usage. Class B 
tests are not executable. Each test in this class is conpiled and the 
resulting conpilation listing is examined to verify that all violations of 
the Ada Stan^rd are detected. Scxne of the class B tests contain legal Ada 
code \diich must not be flagged illegal by the compiler. This behavior is 
also verified. ^ 

Class L tests check that an Ada inplementation correctly detects violation of 
the Ada Standard involving multiple, separately compiled units. Errors are 
expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exanple, the largest integer. A list 
of the values used for this inplementation is provid^ in Appendix A. in 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 





INTRIXXJCTIC^I 


Tor each Ada implementation, a custcxoized test suite is produced by the AVF. 
This customization consists of making the modifications described in the 
preceding paragraj^, removing withdrawn tests (see section 2.1), and possibly 
removing scmie inapplicable tests (see section 2.2 and [UG89]). 

In order to pass an AG/C an Ada implementation must process each test of the 
customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and euiy needed hardware that have to be added to 
a given host and target cooputer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Coitpiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide 2 uid the tenplate for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system euid its 

Inplementation target conputer system. 

Ada Joint The part of the certification body vhich provides policy and 
Program guidance for the Ada certification system. 

Office .AJPO) 

Ada The part of the certification body \diich carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) inplementation. 

Ada The part of the certification laody that provides technical 

Validation guidance for operations of the Ada certification system. 

Orgeuiization 
(AVO) 

Conpliamce of The ability of the inplementation to pass an ACVC version, 
an Ada 

Inplementation 

Computer A functional unit, consisting of one or more conputers and 

System associated software, that uses common storage for all or part 

of a program and also for all or part of the data necessary 
for the execution of the program; executes user-written or 
user-designated programs; performs user-designated data 
manipulation, including arithmetic operations and logic 
operations; and that can execute programs that modify 
themselves during execution. A computer system may be a 
stand-alone unit or may consist of several inter-connected 
\anits. 


1-3 






IMIR0DUCTIC3N 


Conformity Fulfillment by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity who enters into an agreement 

with an AVF which specifies the terms and conditions for AVF 
services (of any kind) to be performed. 

Declaration of A formal stateioent frcm a custoster assuring that conformity 
Conformance is realized or attainable on the Ada ioplementation for which 
validation status is realized. 

Host Computer A computer system vdiere Ada source programs are tremsformed 

System into executable form. 

Inapplicable A test that contains one or more test objectives found to be 
test irrelevant for the given Ada inplementation. 

ISO International Organization for Standardization. 

LRM The Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STT)-1815A-1983 and ISO 8652-1987. Citations from the 
LRM take the form "<section>.<subsection>:<paragraph>." 

Operating Software that controls the execution of programs auid that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, operating 
systems are predominantly software, but partial or complete 
hardware iit^lementations are possible. 

Target A computer system where the executable form of Ada programs 

Computer are executed. 

System 

Validated Ada The con?)iler of a validated Ada implementation. 

Conpiler 

Validated Ada An Ada inplementation that has been validated successfully 
Inplementation either by AVF testing or by registration [Pro92). 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate for 
this implementation. ^ 

Withdrawn A test found to be incorrect emd not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or contains 
erroneous or illegal use of the Ada programming language. 






CHAPTER 2 


IHPLEHENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 22 November 1993. 


B27005A 

E28005C 

B28006C 

C32203A 

C34006D 

C35507K 

C35507L 

C35507N 

C35507O 

C35507P 

C35508I 

C35508J 

C35508M 

C35508N 

C35702A 

C35702B 

C37310A 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A54B02A 

C55B06A 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C9402LA 

C97116A 

C98003B 

BA2011A 

CB700LA 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A ’ 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 






i 


2.2 INAPPLICABLE TESTS 


A test is inappliceible if it contains test objectives vhich are irrelevant 
for a given Ada inplementation. Reasons for a test's inapplicability may be 
supported by documents issued by the ISO eurid the AJPO known as Ada 
Conanentaries and COTinonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Comroentaries are included as 
appropriate. 


2-1 




IMPLEMENIATIQN DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 


C24113L..Y (14 tests) 
C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35705L..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


C35713C, B86001U, and C86006G check for the predefined type LC»>IG_FIX3AT; 
for this inplementation, there is no such type. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLCAT, or SHORT_FLCAT; for this 
implementation, there is no such type. 

A35801F checks that FLOAT'FIRST..FLOAT'LAST may lae used as a range 
const int in a floating-point type declaration; for this 
implementation, that range exceeds the range of safe numltjers of the 
largest predefined floating-point type amd must Ise rejected. (See 
section 2.3.) 


C45624A..B (2 tests) check that the proper exception is raised if 
MACHlNE_CVERFLOWS is FALSE for floating point types and the results of 
various floating-point operations lie outside the range of the bas® 
type; for this implementation, MACHINEjOVERFLCWS is TRUE. 

B86001Y uses the name of a predefined fixed-point type other than type 
IXJRATIC^; for this inplementation, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
ramge of type DURATION; for this implementation, the ranges are the 
same. 


CD1009C checks vdiether a length clause can specify a .non-default size 
for a floating-point type; this implementation does not support such 
sizes. 

CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A8 !io use length clauses 
to specify non-default sizes for access types; this implementation does 
not support such sizes. 

The tests listed in the following teible check that USE ERROR is raised 
if the given file operations are not supported for the gTven combination 
of mode and access method; this implementation supports these 
operations. 

Test File Operation Mode File Access Method 


CE2102D OlEATE IN_FILE SEQUENTIAL_IO 

CE2102E C3^TE OUT FILE SEQUENTIAL 10 


2-2 




IMPLEMENTATION DEPENDENCIES 


CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

C:E2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT_I0 

CE3102E 

CREATE 

IN_FILE 

TEXT_IO 

CE3102F 

RESET 

Any ftode 

TEXT 10 

C:E3102G 

DELETE 

TEXT 10 

CE3102I 

fJREATE 

OUT FILE 

TEXT 10 

CE3102J 

GFELs 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this implementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SErr_LINE LENGTH and SET PAGE_LENGTH raise USE_ERROR 
if they specify an inapproprTate value for Bie external file; there are 
no inappropriate values for this ioplementation. 

CE3413B checks that PAGE raises LAYOUT_ERROR vrtien the value of the page 
number exceeds COUNT'LAST; for this implemertation, the value of 
COONT'LAST is greater than 150000, making the checking of this objective 
impractical. 


2.3 TEST MODIFICATICXqS 

Modifications (see section 1.3) were required for 22 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 
B85008G B85008H BC1303F BC3005B BD2B03A BD2D03A 
BD4003A 

A35801E was graded inapplicable by Evaluation Modification as directed by the 
AVO. The compiler rejects the use of the range FLOAT'FIRST..FLOAT'LAST as 
the range constraint of a floating-point type declaration because the bounds 


2-3 










INPLENEmATION DEPENDENCIES 


lie outside of the reuige of safe numbers (of. LRM 3.5.7:12). 

CD1009A, CD1009I, CD1C03A, CD2A22J, and CD2A31A..C were graded passed by 
Evaluation Modification as directed by the AVO. These tests use 
instantiations of the support procedure LENGTH_CHECK, vhich uses 
unchecked Conversion according to the interpretation given in AI-00590. The 
AVO rule3 that this interpretation is not binding under ACVC 1.11; the tests 
are ruled to be passed if they produce Failed messages only from the 
instances of LENGTH_CHECK—i.e, the allowed Report.Failed messages have the 
general form; 

’• * CHECK ON REPRESENTATION FOR <TyPE_ID> FAILED." 

AD9001B was graded passed by Test Modification as directed by the AVO. This 
test checks that no bodies are required for interfaced subprograms; among the 
procedures that it uses is one with a parameter of mode OUT (line 36). This 
implemenation does not support pragma INTERFACE for procedures with 
parameters of mode OUT. The test was modified by commenting out line 36 and 
40; the modified test was passed. 


2-4 












CHAPTER 3 


PROCESSING INFORMATION 


3.1 TESTING ENVIRONMENT 


The Ada inpleinentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical euid sales information about this Ada implementation, contact: 

Sam Quiring 

Rational Software Corporation 
1600 NW Conpton Dr., Suite 357 
Aloha, OR 97006-1992 
(503) 690-1116 


Testing of this Ada inplementation was conducted at the customer's site by a 
validation team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming Language 
Standard, vrtiether the test is applicable or inapplicable; otherwise, the Ada 
Inplementation fails the ACVC [Pro92]. 

For all processed tests (inaj^licable and applicable), a result was obtained 
that conforms to the Ada Programming Language Standard. 

Ihe list of items below gives the number of ACVC tests in various categories. 
All tests were processed, except those that were withdrawn because of test 
errors (item b; see section 2.1), those that require a floating-point 
precision that exceeds the inplementation's maximum precision (item e; see 
section 2.2), and those that depend on the suKX)rt of a file system — if 
none is supported (item d). All tests passed, except those that are listed 
in sections 2.1 and 2.2 (counted in items b and f, below). 


3-1 








PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3824 

b) Total Number of Withdravm Tests 104 

c) Processed Inapplicable Tests 41 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Number of Inapplicable Tests 242 (c-Ki-fe) 


g) Total Number of Tests for ACVC 1.11 4170 (a+bff) 


3.3 TEST EXECUTION 

A magnetic tape containing the custcanized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded onto a Sun SPARCcenter 2000 <md copied to the host 
confuter system. 


After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada inplementation. 

The tests were ccmipiled, linked and executed on the host computer system. 
The results were captured on the host ccanputer system. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See i^>pendix B for a complete listing of 
the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 


Test output, conpiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by the 
validation team were also archived. i 


3-2 









APPQIDIX A 


MACRO PARAMETERS 


This aj^ndix contains the macro parameters used for customizing che ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for §MAX_IN_L1N—also listed here. These values are expressed here 
as Ada string aggregates, where "V" represents the maximum input-line length. 


Macro Parameter Macro Value 


$MAX_IN_LEN 

499 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> '1') 

$B1G_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> 'A') & '3' & 
(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 
(l.,V-l-V/2 -> 'A') 

$BIG_INT_LIT 

(1..V-3 -> '0') & "298" 

$BIG_REAL_LIT 

(1..V-5 -> '0') & "690.0" 

$BIG_STRING1 

& (1..V/2 «> 'A') & 

$BIG_S'nRING2 

& (1..V-1-V/2 -> 'A') & 

$BLAMKS 

(1..V-20 ) 

$MAX_LEN_INT_BASED_ 

LITERAL 

■ "2:" & (1..V-5 -> '0') & "11 


$MAX LEM REAL BASED LITERAL 

"16:" & (1..V-7 »> '0') & "F.E:" 


A-1 












MACRO PARAMETERS 


$MAX_STRING_LITERAL & <l..V-2 -> 'A') & 

The following table lists all of the other macro par^uneters and their 
respective values. 

Macro Parameter Macro Value 

$ACC_SIZE 64 

$ALIGNMENT 4 

$COUNT_LAST 2147483647 

$DEFAULT_MEM_SI2E 16777216 

$DEFAULT_STOR_UNIT 8 

$DEFAULT_SYS_NAME AXP_SELF 

$DEILTA DOC 

0.001^000000000000000108420217248550443400745280086994171142578125 
$ENTRY_ADDRESS SYSTEM.16#2#) 

$ENTRY_ADDRESS1 SYSTEM."+"(16#31#) 

$ENTOy_ADDRESS2 SYSTEM. 'V (16#32#) 

$FIELD_LAST 2147483647 

$FILE_TERMINATOR ' ' 

$FIXED_NAME NO_SUCH_TYPE 

$FLOAT_NAME NO SUCH TYPE 

$FORM_STRING "" 

$FORH_STRING2 "CANNOT_RESTRICT FILE CAPACITY" 

$GREATER_THAN_DURATION 

100000.0 

$GREATER_THAN_IXJRATION BASE LAST 

TOOOOIJOOOOO.O 

$(®eater than_flqat base last 

I.Fe+308 

$greater than float safe large 

~ 5.'ITE307 


A-2 










MACRO PARAMETE3^ 


$GREATER THAN SffORT FLOAT SAFE LARGE 

9.0E37 

$HIGH_PRIORITy 99 

$ILLEGAL_EXTERNAL_FILE_NAME1 

/illegal/file_nainc/2} l%2102c.dat 

$ILLEGAL_EXTERNAL_FILE_NA«E2 

/illegal/f ile_nainB/CE2102C*. dat 

$ INAPPR0PR1ATE_LINE_LENGTH 

-1 

$INAPPR0PR1ATE_PAGE LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE (''A28006D1.TST”) 

$INCLUDE_PRAGMA2 PRAOIA INCLUDE ( "B28006D1.TST*') 

$INTEGER_FIRST -2147483648 

$INTEGER_LAST 2147483647 

$1NTEGER_LAST_PLUS_1 2147483648 

$INTERFACE_LANGUAGE C 

§LESS__THANJDORATION -100000.0 

$LESS_IHAN DURATION BASE FIRST 

-lITOOOOOOOOO.O 

$LINE_TERMINATOR ASCII.LF & ASCII.FF 

$LCIW_PR10RITY 0 

$MACHINE_CODE_STATEKENT 

OC»E_0'(OP -> NOP); 

$MACHINE_CODE_TYPE CC»E_0 ^ 

$MANTISSA_DOC 63 

$MAX_DIGITS 15 

$MAX_INT 9223372036854775807 

$MAX_INT_PLUS_1 9223372036854775808 

$MIN_INT -9223372036854775808 

$NAME TINy_INTEGER 

A-3 










MACRO PARAMETERS 


$NAME_LIST 

AXP_SELF 

$NAME_SPECIFICATI0N1 

/usrAc/tst/acvcl. ll/c/e/X2120A 

$NAME_SPECIFICATI0N2 

/usrAc/tst/acvcl. ll/c/e/X2120B 

$NAME_SPECIF1CATICN3 

/UsrAc/tst/acvcl. ll/c/e/X3119A 

$NEG_BASED_INT 

16«F00000000000000E« 

$NEM_MEM_SIZE 

16777216 

$NEW_STOR_l]NIT 

8 

$NEW_SYS_NAME 

AXP_SELF 

$PAGE_TERM1NAT0R 

ASCII.FF 

$RECORD_DEFINITIGN 

RECCED SUBP: OPERAND; END RECORD; 

$RECORD_NAME 

CODE_0 

$TASK_SIZE 

64 

$TASK_STORAGE_SIZE 

1024 

STICK 

0.01 

$VAR1ABLE_ADDRESS 

VAR_l'Ar®RESS 

$VARIABLE_ADDRESS1 

VAR_2'ADDRESS 

$VARIABLE_ADDRESS2 

VAR_3'ADDRESS 

$YOUR_PRA®IA 

PRAGMA PASSIVE 




A-4 



APPE34DIX B 


CXWIIATION SYSTEM OPTIONS 


The ccsnpiler options of this Ada implementation, as described in this 
Appendix, are provided by the customer, unless specifically noted otherwise, 
references in this appendix are to compiler documentation and not to this 
report. 








COMPILATION SYSTEM OPTIONS 


ada Cooinand Reference ada 

ada - invoke the Ada con^jiler 

Syntax 

ada {options) [source_£ile]... {object_£ile.o)... 

Arguments 

object_£ile.o non-Ada object file names. These files will be passed 
on to the linker and will be linked with the specified 
Ada object files. 

options options to the conpiler. These are; 

-A (disassemble) Disassemble the units in the source file after 
ccxnpiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

—Al, —As). 


a Add hexadecimal display of instruction bytes to 
disassembly listing, 
b Disassemble the xinit body [default], 
d Print the data section (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file "filejname.das" 
s Disassemble the unit spec. 

-a file name 

(arBiive) Treat file name as an object archive file created 
by ar. Since some arBiive files end with .a, -a is used to 
distinguish archive files frcxn Ada source files. 

-Bstatic/dynamic (SPARCc»?)iler Ada only) 

(static) If static is indicated, the Ada program is compiled 
and linked statically. The default is dyruunic. 

-c s\;ppress the control messages generated v^en pragma PAGE 
and/or pragma LIST are encountered. ‘ 

-D identifier type value 

(define) Define an identifier of a specified type and value. 


-DAl.O 

-DAl.l 

-nA2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. Ihese options override the ARCHITECTURE 
INFO directive (Default; -DAl.lJ (HP PA-RISC only) 

-d (dependencies) Analyze for dependencies only. Do not do 




CQMPIIATIGN SYSTEM OPTIONS 


semauitic analysis or code generation. Update the library, 
marking any defined units as unccmpiled. The -k] option is 
used by a.make to establish dependencies among new files. 
This option will attempt to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E 

-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output is placed in directory/source_file.err. The file of 
raw error messages can be used as input to a.error. Only 
one -e or -E option should be used. 

-e (error) Process conpilation error messages using a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should be used. 

-Eferror_file source_file 

(error) Process source file and place any error messages 
in the file indicated ^ error_file. Note that there is 
no space between the -Ef and error file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. Note that the source listing is 
direct^ to standard out vhile the raw errors are placed in 
source_file.err. 

-el (error listing) intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef option, except that a source 
listing with errors is produced and directed to staixiard output. 
The raw errors are written to error__file. 

-ev (error vi(l)) Process syntax error messages using a.error, 
embed them in the source file aixi call the environment editor 
ERROR EDITOR. If ERROR_EDITOR is defined, the environment 
variaEle ERROR_PATTEElN should also be defined. ERROR_PATTERN 
is an editor search command that locates the first occurrence 
of ’###' in the error file. If no editor is specified, vi(l) 
is invoked. 

The value of the environment variable ERPOR_TABS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANA) Do not trim the DIANA tree before output to 
net files. To save disk space, the DIANA tree will be 

B-3 



(XJMPIIATICN SYSTEM OPTIONS 


trimned so that all pointers to nodes that did not involve 
a subtree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or compilation information). Ihe trimming 
generally removes initial values of variables aiKi all 
statements. 

-G (GVAS) Display suggested values for the MIN_GVAS_A1X>R 
and MAX_GVAS_AI»R INFO directives. 

-K (keep) Keep the intermediate language (IL) file produced 
by the compiler front end. Ihe IL file will be placed in 
the .objects directory with the file name Ada_source. 

-L libraryjname 

(library) Operate in VADS library library_name. 

[Default: current working directory) 

-Ifile aUsreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 

(NO space between the -1 and the file abbreviation.) 

-H unit name 

(main) Produce an executable program by linking the named 
unit as the main program, unitjname must alrea^ be 
ccxnpiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out unless overridden 
with the -o option. 

-M source file 

(mainT Produce an executable program by compiling aixi 
linking source file. The main unit of the program is 
assumed to be Bie root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -M. The 
executable program will be named a.out unless overridden 
with the -o option. 

-N (no code sharing) Ccmpile all generic instantiat^lons 
without sharing code for their bodies. This option 
overrides the SHARE_BCX3Y INFO directive and the SHARE_CODE 
or SHARE_BCX>Y pragmas. 

-MX (NX) Link with NX Startup code and with the NX archive libraries. 
This option is valid only if the -M option has also been invoked. 

(S\m SPARC -> Paragon only) 


-0(0-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 
optimization. The default is -04. 




COMPILATION SYSTEM OPTIONS 


-O full optimization 
-00 no optimization 

-01 copy propagation, c<Mistant folding, ranoving 
dead variables, sxibsuming moves between scalar 
variables 

-02 add common subexpression elimination within 
basic blocks 

-03 add global cannon subexpression elimination 
-04 add hoisting invariants from loops and address 
optimizations 

-05 add range optimizations, instruction scheduling 
and one pass of reducing induction expressions 
-06 add xmrolling of innermost loops 

-07 add one more pass of induction expression reduction 

-08 add one more pass of induction expression reduction 

-09 add one more pass of induction expression 

reduction and add hoisting expressions coomon to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

Note that using the -OO option can alleviate some problems when 
debugging. For example, using a hi^er level of optimization, 
you may receive a message that a variable is no Icxiger active or 
is not yet active. If you experience these problems, set the 
optimization level to 0 using the -OO option. 

-o executable file 

(output) Ihis option is to be used in conjunction with 
the -N option. executable_file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(reconpile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of any that are out 
of date. VADS library is the library in which the 
recoopilation Ts to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVASJCABLE file. This option 
reinitializes the file and exits. This allows recovery frcrni 
"GVAS exhausted" without recompiling all the files in the library. 

-S (suppress) Aj^ly pragma SUPPRESS to the entire conpilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the compilation. 

B-5 






COMPILATION SYSTEM OPTIONS 


-trb 

(trace block) Generate code to trace entry into basic blocks and 
calls and returns (for use with a.trace only) 

-trc 

(trace calls) Generate code to trace calls and returns (for use 
with a.trace only) 

-V (verbose) Print cranpiler version nundaer, date and time of 
compilation, name of file ccmpiled, command input line, 
total compilation time and error sunnary line. Storage usage 
information about the object file is provided. 

-w (warnings) Suppress warning diagnostics. 

-xlicinfo 

(license) Indicates if FLEMlm is running and its status if it is 
operational. If it is not operational, a message indicating this 
is displayed. 

source_file name of the source file to be coopiled. 

Description 

The ada command executes the Ada conpiler and compiles the named Ada 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
compiled. 

By default, ada produces only object and net files. If the -M option 
is used, the conpiler automatically invokes a.Id and builds a complete 
program with the named library unit as the main program. 

For cross systems, the conpiler generates object files compatible with 
the host linker in VOX format. Ihe VOX format is discussed in 
Appendix A of the Progranmer's Guide. 

Non-Ada object files (.o files produced by a ccmpiler for Mother 
language) may be given as arguments to ada. These files will be passed 
on to the linker aixl will be linked with the specified Ada object files. 

Command line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS ccmpilers may be simultaneously available on a single 
system. Because the ada command in any VADS_location/bin on a system 
will execute the correct compiler conponents based upon visible 
library directives, the option -sh is provided to print the name of 
the components actiiaily executed. 

Program listings with a disassembly of machine code instructions 
are generated by a.db or a.das. 



CXWPILATION SYSTEM OPTIONS 


NOTE: If two files of the sane nanve frcm different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second corpilation will 
overwrite the first. For example, the ccxipilation of 
Aisr/directory2/foo.a -L /iisr/Vads/test will overwrite the 
compilation of A»sr/directoryl/foo.a -L AisrAads/test in the 
VADS library /usr/vads/test. 

NOTE; It is possible to specify the directory for temporary files by 
setting the environment variable TMPDIR to the desired path. If TEMPDIR 
is not set, /tnp is used. If the path specified by TMPDIR does not exist 
or is not writeedsle, the program exits with an error message to that effect. 

Diagnostics 

The diagnostics produced by the VADS conpiler are intended to be 
self-explanatory. Most refer to the rm. Each RM reference includes a 
section number and optionally, a paragraph number enclosed in 
parentheses. 

See Also 

a.app, a.das, a.db, a.error, a.info, a.Id, a.make, a.mklib, appendixf 


LINKER OPTIONS 

The linker options of this Ada implementation, as described in this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this appendix are to linker documentation and not to this 
report. 


% 


B-7 








COMPILATION SYSTEM OPTIONS 


a‘Id Co&itnand Reference a. Id 

a.Id - build an executable program from previously compiled units 
Syntax 

a.Id (options] unit_name (linker_options] 

Arguments 

linkerjoptions 

All arguments after unit_name are passed to the linker, 
library at^reviations or object files. 

options options to the a.Id command. These are: 


-DAl.O 

-DAl.l 

.-DH2.0 

(architecture) Specify the architecture version the compiler 
should generate code for. These options override the ARCHITECTURE 
INFO directive (Defaiilt: -DAl.l) (HP PA-RISC only) 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in one invocation. This option is 
useful because of limitations in the archiver on seme hosts 
(including ULTRIX, HP-UX and System V). (VADSself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. 

-Du \mit_list 

(units) Traces the addition of indirect dependencies to the named 
units. 

-Dx (dependencies) Displays the elaboration dependencies Aised each 
time a unit is arbitrarily chosen for elaboration. 

-DX (debug) Debug memory overflow (use in cases ^dienv* linking 
a large number of units causes the error message "local 
symbol overflow" to occur). 

-E unit_naroe 

(elaborate) Elaborate unit_naroe as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and suppress 
linking. 

-K (keep) Do not delete the termorary file containing the list of 
object files to link. Hiis file is only present ^en many object 

B-8 







OONPZIATICN SYSTEM OPTIONS 


files are being linked. 

-L library_naine 

(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-NX (NX) Link with NX startup copde and with the NX archive libraries. 
(Sun SPARC -> Paragon only) 

-o executable_file 

(output) Use the specified fielname as the name of the output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (\jnits) Print a list of dependent units in order and 
suf^ress linking. 

-V (verbose) Print the linker conraand before executing it. 

-V (verify) Print the linker conmand but suppress execution. 

-w (warnings) Suppress warning messages, 
unitjnaroe 

name of an Ada unit. It must name a non-generic subprogram. 

If unit_name is a function, it must return a value of the 
type STANDARD.INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to make \init_name a i^in 
program and calls the ld(l) linker to link together all Ada and 
other language objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility uses the net files produced 
by the Ada coopiler to check dependency information. al.ld produces 
an exception mapping table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
2 U 1 exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WITan 
directives that allow the automatic linking of object modules 
ccmpiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WITHn 

B-9 










COMPILATION SYSTEM OPTIONS 


directives nay be placed into a library but they must be 
numbered contiguously beginning at WiTHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl:LINK;object_file: 

WITH2;LINK;archive_file; 

WITHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WIlHn directive in a local VM>S library or earlier on the 
library search list will hide the same nundbered WITHn directive 
in a library later in the library search list. 

Use the tool a.info to chzuige or report library directives in 
the current library. 

For VADSself on Silicon Gra^diics Ccmputer Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of units, their types, seals and dependencies. 

VADS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS ccxnpilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

NOTE: It is possible to specify the directory for temporary files by 
setting the environment vari 2 ±)le TMPDIR to the desired path. If TMPDIR 
is not set, /tap is used. If the path specified by TMPDIR does not exist 
or is not writeable, the program exits with an error message to that effect. 

Files 

a.out (self), a.vox (cross) default output file 

•nets Ada DIANA net files directory 

.objects/* Ada object files 

VADS_location/standard/* startup and staixiard library routines 

( 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linkerV 


B-10 







APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed inpleroentation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions as 
mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described in this Appendix, 
are provided by the customer. unless specifically noted otherwise, 
references in this .^ipendix are to compiler docianentation and not to this 
report. Implementation-specific portions of the package STANDARD, which are 
not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type TINY_INTEGER is range -128 .. 127; 
type SHORT INTEGER is range -32768 .. 32767; 

type LONG_INTBGER is range -9223372036854775808 .. 9223372036854775807; 

type FLOAT is digits 15 range -1.79769313486232E+308 .. 1.79769313486232E+308; 
type SHORT_FLQAT is digits 6 range -3.40282E+38 .. 3.40282E'»-38; 

type DURATION is delta 1.OOOOOOOOOOOOOOE-009 

range -9.22337203685478E+009 .. 9.22337203685478E+009; - 


end STANDARD; 


I 


C-1 










APPENDIX F OF THE Ada STANDARD 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINEJQNLY Pragma 

The INLINEJQNLY pragma, when used in the same viay as pragma 

INLINE, indicates to the compiler that the siibprogram must 

always be inlined. This pragma also st^resses the genera¬ 
tion of a callable version of the routine which saves code 

space. If a user erroneously makes an INLINE ONLY subpro¬ 
gram recursive a warning message wiTl be emitted and an 

PROGRAH_ERROR will be raised at r\in time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 

argument. This pragma is only allowed within a library- 

level package spec or bo^. It specifies that all objects 
in the package be initialized as requested by the pragma 

(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 

within procedures are always (by definition) dynamic. If 

pragma INITIALIZE(STATIC) is used, and an object cannot be 

initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. BUILT_IN Pragma 

The BUILT IN pragma is used in the implementation of some 
predefined Ada packages, but provides no user access. It is 

used only to implement code bodies for which no • actual Ada 

body can be provided, for example the MACHINE_c6de package. 

1.4. SHARE_CCX)E Pragma 

The SHAREjCODE pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 

identifiers TRUE or FALSE as the second argument. This 

pragma is only allowed immediately at the place of a 

declarative item in a declarative part or package specifica¬ 
tion, or after a library xinit in a compilation, but before 

any subsequent compilation unit. 

Nhen the first argument is a generic unit the pragma applies 

to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 


C-2 







APPENDIX F OF THE Ada STANDARD 


applies only to the specified instantiation, or overloaded 

instantiations. 

If the second argvmient is TRUE the conpiler will try to 

share code generated for a generic instantiation with code 
generated for other instantiations of the sane generic. 

When the second argunent is FALSE each instantiation will 
get a unique copy of the generated code. The extent to 

which code is shared between instantiations depends on this 
pragma and the kind of generic fomal parameters declared 
for the generic unit. 

The name pragma SHARE_BCX)Y is also recognized by the imple¬ 
mentation and has the same effect as SHARE_CXX)E. it is 

inclixied for compatability with earlier versions of VADS. 

1.5. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 

inates the overhead required to store the array in the exe¬ 
cutable image. An attempt to use the IMAGE attribute on a 

type vdiose image array has been suppressed will result in a 

conpilation warning and PROGRAM_EPROR raised at run time. 

1.6. EXTERNAL_NAME Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or 

variable defin^ in Ada and allows the user to specify a 

different external name that may be used to reference the 

entity from other languages. TTie pragma is allowed at the 

place of a declarative item in a package specification and 

must apply to an object declared earlier in the same package 

specification. 

1.7. INTERFACEJNANE Pragma 

The INTERFACEJNAME pragma takes the name of a a variable or 

subprogram defined in another language and allows it to be 

referenced directly in Ada. The pragma will replace all 

occurrences of the variable or subprogram name with an 

external reference to the second, linkjargument. The pragma 

is allowed at the place of a declarative item in a package 
specification and must apply to an object or sxjbprogram 

declared earlier in the same package specification. The 

object must be declared as a scalar or an access type. The 

object cannot be any of the following: 

a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 


C-3 







APPENDIX F OF THE Ada STANDARD 


1.8. IMPLICIT_CX10E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 

procedure. It specifies that implicit code generated by the 

compiler be allowed or disallowed. A warning is issued if 

OFF is used and any ioplicit code needs to be generated. 

The default is ON. 

1.9. OPnMlZE_CCX)E Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine c^e 

procedure. It specifies v^ether the code should be optim¬ 
ized 1^ the compiler. The default is ON. When OFF is 

specified, the conpiler will generate the code as specified. 

1.10. NON_REENTRANT 

This pragma takes one argument vdiich can be the name of 

either a library s\ibprogram or a subprogram declared immedi¬ 

ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 

recursively allowing the conpiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 

set of overloaded subprograsm within a package spec or pack¬ 
age body. 

1.11. NOTJELABORATED 

This pragma can only appear in a library package specifica¬ 

tion. It indicates that the package will not be elaborated 
because it is either part of the RTS, a configuration pack¬ 
age or an Ada package that is referenced from a language 

other than Ada. The presence of this pragma suppresses the 

generation of elaboration code and issues warnings if ela¬ 
boration code is required. 

1.12. BIT_FACK pragma 

Indicates to the compiler that packing down to the bit level 

is desired. pragma BIT_FAiCK can be us^ interchangeably . 

with pragma PACK and pragma BYTE_PACK 

1.13. BYTE_PACK pragma 

Indicates to the compiler that packing down to the byte 

level is desired. Components at least as large as, or 

larger than, a byte, are packed at byte boundaries. pragma 

BYTE_PACK can be used interchwgeably with pragma PACK and 

pragma B1T_PACK. 

1.14. LINKJWITH pragma 


C-4 







APPENDIX F OF 'niE Ada STANDARD 


Can be used to pass arguments to the target linker. It may 

a{^ar in any declarative part and accepts one argument, a 

constant string expression. This argument is passed to the 

target linker whenever the unit containing the pragma is 

included in a link. Note that the linker uses selective 

linking; it will inclixJe only those objects required to com¬ 

plete the link. 

For UNIX systems, if the constant string expression begins 

with the string is left untouched. However, if the 

string begins with neither nor then the string is 

prefixed with "./". 

1.15. PASSIVE Pragma 

This pragma has five forms: 

pragma PASSIVE 

pragma PASSIVE(ABORTJUNSAFE); 
pragma PASSIVE(ABORT_SAFE); 

pragma PASSIVE(ABORTJUNSAFE, rautexjattr'address); 
pragma PASSIVE(ABORT_SAFE, mutexjattr'address); 


This pragma can be applied to a task or task type declared 
immediately within a library package specification or body. 

It directs the compiler to optimize certain tasking opera¬ 
tions. It is possible that the statements in the task bocfy 
will prevent the intended optimization, in these cases a 

warning will be generated at compile time and will raise 

TASKING_ERROR at run time. 

1.16. RTS_INTERFACE pragma 

Take the name of an RTS routine and the name of a user- 

defined routine. Allows for the replacement of the default 

calls made implicitly at run-time to the underlying RTS rou¬ 

tines. You can caxise the compiler to generate calls to any 
routine of your choosing as long as it's parameters and 

RETURN value match the original. Use this pragma with cau¬ 
tion. < 

1.17. TASK_ATTRIBUTES Pragma 

This pragma has two forms: 

pragma TASK_ATTRIBUTES(task_atttr'address); 

pragma TASK_ATTRIBUTES (taskj3bject, task_atttr' address); 


The first form of this pragma is only allowed with the 

specification of a task unit. It specifies the task attri- 


C-5 







APPEllDIX F OF THE Ada STANDARD 


butes of the task or tasks of the task type. The second 

form is applicable to any task object. It takes precedence 

over the task attributes specified for the task's type. 

The address of an ADA_KRN_DEFS.TASK_ATTR_T record is the 

argument of the pragma and is passed to the underlying 

microkernel at task creation. 

The task attributes are microkernel dependent. See 

ada_km_defs.a in standard for the type definition of 

TASK ATTRjr and the different options supported. When there 

isn'¥ a TASK_ATTRIBUTES pragma for a task, the 
DEFAULT TASK_ATTRIBUTES found in v_usr_conf__f.a's configura¬ 
tion taBle are used. ~ 

All variations of the TASK_ATTR_T record contain at least 

the prio field. prio specifies the priority of the task. 

If the task also has a pragma PRIORITY(PRIO), the prio 

specified in the TASK_ATTR_T record takes precedence. 

The optional first argument is the name of a task object. 

This allows task objects of the same task type to have dif¬ 

ferent task attributes (including different task priori¬ 
ties). ada_krn_defs.a has overloaded versions of the fol¬ 
lowing sijt^rogram for initializing the task attributes: 

function task_attr__init( 
prio ; priority; 

OS dependent fields 
« 

) return address; 


1.18. VOLATILE pragma 

Takes one arguement vAiich identifies an object. , Guarantees 

that loads and stores to the named object will be performed 
as expected after optimization. The object declaration and 

the pragma must both occur (in this order) Immediately 

within the same declarative part or package^specification. 

1.19. WARNINGS pragma Takes one of the identifiers ON or 

OFF as the single argument, selectively si;qppress warnings 

on a single statement or a group of statements. 

pragma warnings (off); 

statement(s) that generate warnings; 
pragma warnings (on); 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 


C-6 








APPEM>ZX F OF THE Ada STANCARD 


This pragma is recognized by the implementation but has no 

effect. 

2.2. ELABORATE 

Ttiis pragma is inplemented as described in Appendix B of the 

Ada RM. 

2.3. INLINE 

This pragma is inplemented as described in Appendix B of the 

Ada RM. 

2.4. INTERFACE 

This pragma supports calls to 'C' and FCXURAN functions. The 

Ada subprograms can be either functions or procedures. The 

types of parameters and the result type for functions must 

be scalar, access or the predefined type ADDRESS in SYSTEM. 

All parameters must have mode IN. Record and array objects 

czm be passed by reference using the ADDRESS attribute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the 

Ada RM. 

2.6. MEMORY_SIZE 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled. 

2.7. OPTIMIZE 

This pragma is recognized by the implementation but has no 

effect. 

2.8. PACK 

This pragma will cause the conpiler to choose a non-aligned 

representation for conposite types. It will not causes ' 

- objects to be packed at the bit level. 

2.9. PAGE 

This pragma is implemented as described in Appendix B of the 

Ada RM. 

2.10. PRIORITY 

This pragma is implemented as described in ippendix B of the 


C-7 








APPENDIX F OF THE Ada STANDARD 


Ada RN. 


2.11. SHARED 

This pragma is recognized by the iispleinentation but has no 

effect. 

2.12. ST0RAGE_UN1T 

This pragma is recognized by the implementation. The imple¬ 
mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be recompiled. 

2.13. SUPPRESS 

This pragma is implemented as described, except that 

DIVISION GIEG^ and in some cases OVERFLOW_CHECK cannot be 

supresse^. 

2.14. SYSTEM_NAME 

This pragma is recognized by the Implementation. The inple- 

mentation does not allow SYSTEM to be modified by means of 

pragmas, the SYSTEM package must be reccopiled. 

3. Inplementation-Dependent Attributes 

3.1. P'REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry; 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task \init, or label, it refers to the address of the 

machine code associated with the corresponding body or 

statement. For an entry for which an address, clause has 

been given, it refers to the corresponding hardware inter¬ 
rupt. The attribute is of the type OPERAND defin^ in the 

package MACHINE_CXX)E. The attribute is only allowed within 

a machine code procedure. ^ 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 

not supported.) 

3.2. T'TASKID 

For a task object or a value T, T'TASK_ID yields the unique 

task id associated with a task. The value of this attribute 

is of the type AIM3RESS in the package SYSTEM. 




APPEZOIX F OF THE Ada S1ANDAR0 


4. Specification Of Package SYSTEM 


with UNS1GNED_TYPES; 
package SYSTEM is 


pragma suppress (ALL_aiEa^); 
pragma sijppress(EXCEPTIONJlABLES); 
pragma not_elaborated; 


type NAME is ( axp_self ); 


SYSTEM_NAME 

STORAGEJJNIT 
MEMORY SIZE 


; constant NAME :« axp_self; 

: constant 6; 

; constant 16 777 216; 


— Systeift-Dependent Named Numbers 

M1N_INT : constant 

MAX_INT : constant 

MAX_DIGITS : constant 

MAXJIANTISSA : constant :« 63; 
FIME_DELTA : constant 

TICK ; constant 


-9 223 372 036 854 775 808; 
9 I23 172 136 154 775 107; 
11 ; - - - " - 

2.0**(-63); 

0 . 01 ; 


— Other System-dependent Declarations 


subtype PRIORITY is INTEGER range 0 .. 99; 


MAX_REC_SIZE : integer 64*1024; 
type AEX>RESS is private; 


function ">" (A: AK)RESS 
function "<" (A: AIX>RESS 
function ''>-"(A; ATORESS 
function "<-"(A: ADDRESS 
function (A: AIX7RESS 
function "+" (A: AK)RESS 
function (A; AKWESS 


B: AIX»IESS) 
B: ADDRESS) 
B: A1X2RESS) 
B: ADDRESS) 
B: ADDRESS) 
I: INTEC^) 
1: INTECXR) 


return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return BOOLEAN; 
return INTEGER; 
retULhl ADDRESS; 
return Ai:x>RESS; 


function ”+" (I: 


UNSIGNED TYPES.UNSIGNED LONG INTEGER) return AEORESS; 


function MEMORY_AI»RESS 

(I: UNSIGNED TYPES.UNSIGNED LONG INTEGER) return ADDRESS renames 


NO_AIX>R ; constant AIX)RESS; 

type TASK_ID is private; 

NO TASK ID : constant TASK ID; 


C-9 





F OF THE Ada STANDARD 


type PASSIVE_TASK_ID is private; 

NO_PASSIVE_TASK_ID ; constant PASSIVE_TASK_ID; 

subtype SIG_STATUS_T is INTEGER; 

SIG_STA'njS_SlZE: constant :• 4; 

type PR0C21AM_ID is private; 

NO_PROGRAM_ID r constant PROGRAM_ID; 

type EYTE_ORDER_T is ( 

LITTLE_ENDIAN, 

BIG ENDIM4 

); 

BYTE_ORDEai: constant BYTEJDRDERJT ;« LITTLE_EM)IAN; 
type LONG_ADDRESS is private; 

NO_LONG_ADDR : constant LONG_AW)RESS; 

fxanction ”+" (A; LC3NG_AI»RESS; I: INTEGER) return LONG_AEORESS; 
function (A: LC]NG_ADDRESS; I: INTEGER) return LONG_ADDRESS; 

function MAKE_LONG_ADDRESS (A: AM)RESS) return LONG_ADDRESS ; 

function L0CAL1ZE(A; LaNG_AM)RESS ; BYTE^SIZE : INTEGER) return AI»RESS 

function STATIQNJ3P(A! LOllG_Ar»RESS ) return INTEGER; 

— Internal RTS representation for day. If the calendar package is used, 

— then, this is the julian day. 
subtype DAY_T is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS_INVDCATIGN_By_ADDRESS : constant BOOLEAN TRUE; 
SUPPORTS_PREELABORAT10N : constant BOOLEAN TRUE; 

MAKE_ACCESS_SUPPORTED : constant BOOLEMJ TRUE; 

— Arguments to the CIFO pragma INTERRUPTJIASK. * 
type INTERRUPTJEASKJKIND is ( SIMPLE, SIGNALLING ); 

function RETURN_AIE>RESS return ADI^IESS; ^ 

private 

type ADDRESS is new UNSIGNED_TYPES.UNSIGNEO_LONG_INTEGER; 

NO_ADDR : const^mt ADDRESS 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<") ; 
pragma BUILT_IN( ); 
pragma BUILT_IN() ; 


C-10 



APPENDIX F OF THE Ada STANDARD 


pragma BUILT_IN(; 
pragma BUILT_IN("+") ; 

type TASK_ID is new UNSI(ajEDjryPES.UNSIGNED_LGNG_INTEGER; 
NO_TASK_ID ; constant TASK_ID 0; 

type PASSIVEJEASK_1D is new UNSIGNED_TYPES.UNSICa«I)_U»K3_INTEGER 
NO_PASSIVE_TASK_ID : constant PASSIVE_TASK_ID 0; 

type PR0(3»H_ID is new UNSIGNED_TyPES.UNSIGNED_LQNG_INTEGER; 
NO_PROGRAM_ID : constant PR0GRAM_1D 0; 

type LONG_AI»BESS is 
RECORD 

Station : UNSIGNEDjryPES.UNSIGNED_LONG_INTEGER; 
addr : ADDRESS; 

END RECORD; 

NO_LQNG_ADDR : constant LONS_AI»RESS (0, 0); 

pragma BUILT_IN(MAKE_LONG_AZX>RESS); 
pragma BUZLT_IN(LOCALIZE); 
pragma BUILT_IN(STATION_OF); 

pragma BUILT_IN(RETUFN_A[X>RESS); 

end SYSTEM; 


5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record components are padded 

so as to provide for efficient access the target 

hardware, pragma PACK aj^lied to a record eliminate the pad¬ 
ding vAiere possible. Pragma PACK has no other effect on the 

storage allocated for record coiponents a record : representa¬ 
tion is required. 

5.2. Size Clauses ^ 

For scalar types a representation clause will pack to the 

number of bits required to represent the range of the siib- 

type. A size clause allied to a record type will not cause 

packing of conponents; an explicit record representation 

clause must be given to specify the packing of the cotr- 

pcHients. A size clause applied to a record type will cause 

packing of conqponents only when the con^nent type is a 

discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not supported 

for task, access, or floating point types. 


C-11 










APPENDIX F OF IHE Ada STANCARD 


5.3. Address Clauses 

Address clauses are only sxiE^rted for variables. Since 

default initialization of a variable requires evaluation of 

the variable address elaboration ordering requirements 
prohibit inititalization of a variables which have address 

clauses. The specified address indicates the ^ysical 

address associated with the variable. 

5.4. Interrupts 

Interrupt entries are su{^rted with the following interpre¬ 

tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 

must always be trying to accept each interrupt entry, unless 

it is handling the interrupt. The task must be executing 

either an accept for the entry (if there is only one) or a 

select statement \^ere the interrupt entry accept alterna¬ 
tive is open as defined by Ada RM 9.7.1(4). This is not a 

restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RM 

13.5.1(2) and 13.5.1(6)). 

No additional requirements are inposed for a select state¬ 
ment containing both a terminate alternative and an accept 

alternative for an interrupt entry (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 

allowed and are treated as a normal task rendezvous. 

Interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 

interrupt vector number. For passive ISRs, the nnn of the 

passive!interrupt,nnn) pragma specifies the interrupt prior¬ 
ity of the task. '' 

5.5. Representation Attributes 

The ADDRESS attribute is not supported for the following 

entities: 

Packages 

Tasks 

Labels 

Ehtries 


C-12 






APPENDIX F OF THE Ada STANDARD 


5.6. Machine Code Insertions 
Machine code insertions are siipported. 

The general definition of the package MACHINEjCOOE provides 
an assembly language interface for the target machine. It 

provides the necessary record type(s) needed in the code 

statement, an enumeration type of all the opcode nneumonics, 

a set of register definitions, and a set of addressing mode 

functions. 

The general syntax of a machine code statement is as fol¬ 
lows: 


OOOE_n'( opcode, operand {, operand) ); 

vhere n indicates the nisnber of operands in the aggregate. 

A special case arises for a variable number of operands. 

The operands are listed within a sxibaggregate. The format 

is as follows: 

CXX>E_N'( opcode, (operand {, operand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. BM 4.3(4)). 

O0DE_0'( op •> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CCX>E or 

the 'REF attribute. 

The arguments to any of the functions .defined in 

MACHINE_OODE must be static expressions, string.literals, or 

the functions defined in MACHINEjCOC^. The 'REF attribute 

may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures' is supported. 


6. Conventions for In^lementation-generated Names 
The:.e are no in^lementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an ackiress clause are interpreted as 

{^ysical addresses. 


C-13 









APPENDIX P OF THE Ada STANDARD 


8. Restrictions 
None. 

9. Restrictions 


on Unchecked Conversions 


on Unchecked Deallocations 


None. 


10. In^lementation Characteristics of I/O Packages 

Instantiations of DlRECT_IO use the value MAX REC_SIZE as 

the record size (expressed in STQRAGE_UNITS) ^en the size 
of ELEHENTjryPE exceeds that value. For exanqpie for uncon¬ 
strained arrays such as string where ELEMENTJTYPE'SIZE is 

very large, MAX_REC_S1ZE is used instead. MAX_RE(X)RD_SIZE 

is defined in SYSTEM and can be changed by a program before 

instantiating OlRECT_IO to provide an upper limit on the 

record size. In any case the maximum size supported is 1024 

X 1024 X STORAGEJUNIT bits. DIRECT 10 will raise USE_ERROR 

if MAX_REC_SIZE exceeds this absolute limiTt. 

Instantiations of SBQUENTIAL_IO use the value MAX_REC_SIZE 

as the record size (expressed in STORAGEJUNITS) when the 

size of EI.EMENT_TYPE exceeds that value. For exanple for 

unconstrained arrays such as string where ELEMENTJTYPE’SIZE 
is very large, MAX REC^SIZE is used instead. 

MAX_RECORD SIZE is defined in’ISYSTEM and can be changed by a 

program belbre instantiating INTBGER_I0 to provide an upper 
limit on the record size. SEQUENTIAL lO imposes no limit on 

MAX REC SIZE. 


11. In^lementation Limits 

The following limits are actually enforced by the implemen¬ 
tation. It is not intended to imply that resources up to or 

even near these limits are available to every program.^ 

11.1. Line Length 

The iuplementation stqpports a maximum line length of 500 

characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 

32,000,000 X STORAGEJUNITS. The maximum size of a statically 
sized record type is 32,000,000 x STQRACX UNITS. A record 
type or array type declaration Biat exceeds these limits 

will generate a warning message. 

11.3. Default Stack Size for Tasks 


C-14 









APPENDIX F OF IHE Ada STftNDARD 


In the absence of an explicit STQRAGE_SIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STOBAGE_lJMITS. This is the value 

returned by T'STORAGE_SIZE for a task type T. 

11.4. Defaxilt Collection Size 

In the absence of an explicit S70RAGE_SIZE length attribute 
the default collection size for an access type is 100 times 

the size of the designated type. This is the vzdue returned 

by T'STORAGE_SIZE for an access type T. 

11.5. Limit on Declared CX>jects 

There is an absolute limit of 6,000,000 x STORAGEJUNITS for 

objects declared statically within a coopilation unit. If 

this value is exceeded the coo^iler will terminate the com¬ 
pilation of the unit with a FAT3\L error message. 











