AD-A211 


in 

o 


UNCLASSIFIED 


SECl'RPt CLASS! no-ID*. O' THIS RAG' (kvn*r, on* [nt ,r,cr 


REPORT DOCUMENTATION PAGE 


1. RER0R1 ftimtifi 


iz. sdvt accession k: 


4. TJUi (»nctbiti'Vt! 

Ada Compiler Validation Summary Report ships 
Computer Svstems, MIPS ASAPP. Version 2.10, KIPS*M/120 
(Post) to MIPS K3200 -b CPP hoard (Target), 8%C,14W1.10099 


J. A'JTH0R(j,’ 

WrigTit-Patterson AFB 
Dayton, OH, USA 


t. hrforairc organisation and address 

Wright-Patterson AFB 
Dayton, OH, USA 


11. COK^RO-UM O'UCE N**L ARP ApDRLSS 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-30E1 


14. MONITORING AGE' :r NAHL t ADORE SSpfCPrtfcrnf from Controlling Other) 

Wright-Patter—i AFB 
Dayton, OH, US 




«a*i »<tr»'.TDOsi 
»r,QM cov-.nf<~ ro,.> 


EtlRUNT'S CATALOG Alw-iR 


5. TTRE Of AER0RT A AIR lot COVI-l; 

14 June 19PP to 14 Tune ’ Q 

6. RERFORNlNGllRG. AEROf NJWEif- 


e. COAT AAC T OR 6AANT hkj»l ; i R(J- 


10. RR0GRAO LtlRiNT. RAG.HCT. T-' 
AREA A WORK UM1 KlWEERS 


It. REPORT DATE 


unjMeiH. r rr - pftiu 


15. SECURHT Class (d 1 th, ttpon) 

UNCLASSIFIED 


15*. ^C^AS^ r ICA7JD»./D .'SGRADI 1 

K/A 


16. D1S7R1BJ7IOS S'ATIMENT ( 0 I this Htpon) 


Approved f.;.r public release; distribution unlimited. 


17. DISTRIBUTION r .lATl*':M (of tht tbr.ur. mint a m B 'oc* 1C It O'brrrn: from Ptppnj 


ssir:E:> 


It. SUPF.ERiMAPl NOUS 




4»*4 



IS . ,.t TN0R0S (Connnn, on,* vrrst S'Oi iIntern*') indidtntiff 6, 6Foc* numbrr) 


Ada Programming language, Ada Compiler Validation Summary Repci , Ada 
Ct.-.piler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/KIL- TD- 
1B15A, Ada Joint Program Office, AJPO 


tO . ABSTRACT (Contmur on rr.rrif »i0» ,(n,,*,»*,, *r»Oirf»nfi(> 6, fcfo(4 rtumbtr) 


MIPS Computer Systems, MIPS ASAPP, Version 2.10, Wright-Patterson AFB, MIPS M/1.0 unci 
RIS,C/os, 4.0 (Host) to MIPS R3200-6 CPU boat d bare machine (Target), ACVC 1.10. 


lF ’ 14 73 iom,o> o' l nov ti is obsolete 

1 JA* 7i i/k DID!*1**514*B6t 1 _ UNCLASSIFIED _ 

tttURPT CiASSmc*110»i cr S t t*h**,‘ tit tw 






AVF Control Number: AVF-VSR-297.0689 

89-01-18-MIP 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 890614V1.10099 
MIPS Computer Systems 
MIPS ASAPP, Version 2.10 

MIPS M/120 Host and MIPS R3200-6 CPU board Target 


Completion of On-Site Testing: 
14 June 1989 


Prepared By: 

Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 


I 





Ada Compiler Validation Summary Report 


Compiler Name: MIPS ASAPP, Version 2.10 
Certificate Number: 890614V1.10099 


Host: MIPS M/120 under 

RISC/os, 4.0 

Target: MIPS R3200-6 CPU board 
bare machine 


Testing Completed 14 June 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 






Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 






Ada Compiler Validation Summary Report 


Compiler Name: MIPS ASAPP, Version 2.10 
Certificate Number: 890614V1.10099 

Host: MIPS M/120 under 

RISC/os, 4.0 

Target: MIPS R3200-6 CPU board 
bare machine 

Testing Completed 14 June 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 



/V7> 

Ada Validation Facility 
Steve P. Wilson 
Technical Director 
ASD/SCEL 

Wright-Patterson AFB OH 45433-6503 


Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses, 
Alexandria VA 22311 



Ada Joint Program Office 
Dr. John Solomond 
Director 

Department of Defense 
Washington DC 20301 






TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT .... 1-2 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.1-2 

1.3 REFERENCES.1-3 

1.4 DEFINITION OF TERMS.1-3 

1.5 ACVC TEST CUSSES.1-4 

CHAPTER 2 CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED.2-1 

2.2 IMPLEMENTATION CHARACTERISTICS.2-2 

CHAPTER 3 TEST INFORMATION 

3.1 TEST RESULTS.3-1 

3.2 SUMMARY OF TEST RESULTS BY CUSS.3-1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.3-2 

3.4 WITHDRAWN TESTS.3-2 

3.5 INAPPLICABLE TESTS.3-2 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS. . 3-5 

3.7 ADDITIONAL TESTING INFORMATION.3-6 

3.7.1 Prevalidation.3-6 

3.7.2 Test Method.3-6 

3.7.3 Test Site.3-7 


APPENDIX A DECLARATION OF CONFORMANCE 

APPENDIX B APPENDIX F OF THE Ada STANDARD 

APPENDIX C TEST PARAMETERS 

APPENDIX D WITHDRAWN TESTS 

APPENDIX E COMPILER OPTIONS AS SUPPLIED BY MIPS COMPUTER SYSTEMS 























CHAPTER 1 
INTRODUCTION 


This Validation Summary Report (VSR) describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability (ACVC). An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. 

Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
the dependencies observed during the process of testing this compiler are 
given in this report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation-dependent but is permitted by the Ada Standard. Six classes 
of tests are used. These tests are designed to perform checks at compile 
time, at link time, and during execution. 


1-1 







INTRODUCTION 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 

. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 

Testing of this compiler was conducted by SofTech, Inc. under the 
direction of the AVF according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation Organization (AVO). 
On-site testing was completed 14 June 1989 at Sunnyvale CA. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" (5 
U.S.C.#552). The results of this validation apply only to the computers, 
operating systems, and compiler versions identified in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Street) 

Washington DC 20301-3081 


or from: 


Ada Validation Facility 
ASD/SCEL 

Vright-Patterson AFB OH 45433-6503 


1-2 





INTRODUCTION 


Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1615A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines , Ada Joint 
P rogram Off i ce, 1 Januar jTT957T 

3. Ada Compiler Validation Capability Implementers' Guide , SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide , December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 


Ada 

Commentary 


An Ada Commentary contains all information relevant to the 
point addressed by a comment on the Ada Standard. These 
comments are given a unique identification number having the 
form Al-ddddd. 


Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 


AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 


1-3 








INTRODUCTION 


cross-compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler generates a result that 
demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 

Inapplicable An ACVC test that uses features of the language that a 

test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates the expected 
result. 

Target The computer for which a compiler generates code. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce compilation or link errors because of 
the way in which a program library is used at link time. 

Class A tests ensure the successful compilation of legal Ada programs with 
certain language constructs which cannot be verified at compile time. 
There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that every syntax or 
semantic error in the test is detected. A Class B test is passed if every 


Withdrawn 

test 


1-4 



INTRODUCTION 


illegal construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the number of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error message before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an implementation may legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK FILE is used to 
check the contents of text files written by some of the Class C tests for 
chapter 14 of the Ada Standard. The operation uf REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
place features that may not be supported by all implementations in separate 


1-5 






INTRODUCTION 


tests. However, some tests contain values that require the test to be 
customized according to implementation-specific values—for example, an 
illegal file name. A list of the values used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by shoving that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each time the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplicable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 


1-6 






CHAPTER 2 


CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Compiler: MIPS ASAPP, Version 2.10 
ACVC Version: 1.10 
Certificate Number: 890614V1.10099 
Host Computer: 

Machine: MIPS M/120 

Operating System: RISC/os 

4.0 

Memory Size: 32 megabytes 

Target Computer: 

Machine: MIPS R3200-6 CPU board 

Operating System: bare machine 

Memory Size: 32 megabytes 


2-1 




CONFIGURATION INFORMATION 


Communications Network: Ethernet 


2.2 IMPLEMENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class 0 and E tests specifically check for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 


(1) The compiler correctly processes a compilation containing 723 
variables in the same declarative part. (See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H (8 
tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D56001B.) 

(4) The compiler correctly processes tests containing recursive 
procedures separately compiled as subunits nested to 17 
levels. (See tests D64005E..G (3 tests).) 


b. Predefined types. 

(1) This implementation supports the additional predefined types 
TINY_INTEGER, SHORT_INTEGER, and LONG_FLOAT in package 
STANDARD. (See tests B86001T..Z (7 tests).) 


c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 
constraints are checked are not defined by the language. While 
the ACVC tests do not specifically attempt to determine the order 
of evaluation of expressions, test results indicate the following: 

(1) None of the default initialization expressions for record 
components are evaluated before any value is checked for 
membership in a component's subtype. (See test C32117A.) 

(2) Assigns .■ ts for subtypes are performed with the same precision 
as tb-T' -,se type. (See test C35712B.) 


2-2 






CONFIGURATION INFORMATION 


(3) This implementation uses no extra bits for extra precision and 
uses all extra bits for extra range. (See test C35903A.) 

(4) Sometimes CONSTRAINT_ERROR is raised when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type. (See test C45232A.) 

(5) Sometimes NUMERIC ERROR is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z.) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. Vhile the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

(1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z.) 

(2) The method used for rounding to longest integer is round to 
even. (See tests C46012A..Z.) 

(3) The method used for rounding to integer in static universal 
real expressions is round to even. (See test C4A014A.) 


e. Array types. 


An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINTERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX INT. 


For this implementation: 


(1) Declaration of an array type or subtype declaration with more 

than SYSTEM.MAX INT components raises no exception. (See test 

C36003A.) 

(2) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 

array type with INTEGER'LAST + 2 components. (See test 

C36202A.) 


(3) NUMERIC_ERROR is raised when 'LENGTH is applied to a null 
array type with SYSTEM.MAX_INT + 2 components. (See test 

C36202B.) 


2-3 







CONFIGURATION INFORMATION 


(4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises NUMERIC_ERROR when the array type is declared. (See 
test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERIC_ERROR when the array 
type is declared. (See test C52104Y.) 

(6) A null array with one dimension of length greater than 

INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 

implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

(7) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before C0NSTRAINT_ERR0R is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 

(8) In assigning two-dimensional array types, the expression is 
not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


f. Discriminated types. 

(1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before CONSTRAINT_ERROR is raised 
when checking whether the expression's subtype is compatible 
with the target's subtype. (See test C52013A.) 


g. Aggregates. 

(1) In the evaluation of a multi-dimensional aggregate, all 
choices are evaluated before checking against the index type. 
(See tests C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised before all choices are evaluated 
when a bound in a non-null range of a non-null aggregate does 
not belong to an index subtype. (See test E43211B.) 


2-4 









CONFIGURATION INFORMATION 


h. Pragmas. 

(1) The pragma INLINE is supported for functions and procedures. 
(See tests LA3004A..B, EA3004C..D, and CA3004E..F.) 


i. Generics 

(1) Generic specifications and bodies can be compiled in separate 
compilations. (See tests CA1012A, CA2009C, CA2009F, BC3204C, 
and BC3205D.) 

(2) Generic unit bodies and their subunits can be compiled in 
separate compilations. (See test CA3011A.) 


j. Input and output 

(1) The package SEQUENTIAL_IO can be instantiated with 
unconstrained array types”and record types with discriminants 
without defaults. (See tests AE2101C, EE2201D, and EE2201E.) 

(2) The package DIRECT_IO can be instantiated with unconstrained 
array types and record types with discriminants without 
defaults. (See tests AE2101R, EE2401D, and EE2401G.) 

(3) The director, AJPO, has determined (AI-00332) that every call 
to OPEN and CREATE must raise USE_ERROR or NAME_ERROR if file 
input/output is not supported. This implementation exhibits 
this behavior for SEQUENTIAL_IO, DIRECT_IO, and TEXT_IO. 


2-5 






CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 552 tests were inapplicable to this implementation. All 
inapplicable tests were processed during validation testing except for 201 
executable tests that use floating-point precision exceeding that supported 
by the implementation and 238 executable tests that use file operations not 
supported by the implementation . Modifications to the code, processing, 
or grading for 12 tests were required to successfully demonstrate the test 
objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

129 

1132 

1781 

17 

16 

46 

3121 

Inapplicable 

0 

6 

534 

0 

12 

0 

552 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 


3-1 








TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

577 

545 

245 

172 

99 

161 

331 

137 

36 

252 

292 

76 

3121 

Inappl 

14 

72 

135 

3 

0 

0 

5 

1 

0 

0 

0 

77 

245 

552 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests vere withdrawn from ACVC Version 1.10 at the time of 
this validation: 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A66D 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84M 

CD2A84N 

CD2B15C 

CD2D11B 

CD5007B 

CD50110 

ED7004B 

ED7005C 

ED7005D 

ED7006C 

ED7006D 

CD7105A 

CD7203B 

CE3301A 

CD7204B 

CE3411B 

CD7205C 

CD7205D 

CE2107I 

CE3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Aoi Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 552 tests were inapplicable for the 
reasons indicated: 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C24113L..Y C35705L..Y 
C35708L..Y C35802L..Z 
C45421L..Y C45521L..Z 


C35706L..Y 
C45241L..Y 
C45524L..Z 


C35707L..Y 

C45321L..Y 

C45621L..Z 


3-2 







TEST INFORMATION 


C45641L..Y C46012L..2 

b. C35702A and B86001T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

c. The following 16 tests are not applicable because this 
implementation does not support a predefined type LONG_INTEGER: 


C45231C 

C45304C 

C45502C 

C45503C 

C45504C 

C45504F 

C45611C 

C45613C 

C45614C 

C45631C 

C45632C 

CD7101F 

B52004D 

C55B07A 

B55B09C 

B86001V 

C45531M..P 

(4 tests) and 

C45532M..P (4 tests) 

are not applicable 

because the 

value of SYSTEM 

•MAX_MANTISSA is less 

than 47. 


e. C86001F is not applicable because, for this implementation, the 
package TEXT_IO is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_IO, and hence 
package REPORT, obsolete. 

f. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

g. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONGFLOAT, or SHORT_FLOAT. 

h. C96005B is not applicable because there are no values of type 
DURATION'BASE that are outside the range of DURATION. 

i. CD1009C, CD2A41A..B (2 tests), CD2A41E, and CD2A42A..J (10 tests) 
are not applicable because this implementation does not support 
size clauses for floating point types. 

j. CD2A61I and CD2A61J are not applicable because this implementation 
does not support size clauses for array types, which imply 
compression, with component types of composite or floating point 
types. This implementation requires an explicit size clause on 
the component type. 

k. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because this implementation does not support size clauses for 
access types. 

l. CD2A91A..E (5 tests), CD5012J, CD5013S, and CD5014S are not 

applicable because this implementation does not support size 
clauses for tasks or task types. 

m. The following 42 tests are not applicable because this 
implementation does not support an address clause when a dynamic 
address is applied to a variable requiring initialization: 


3-3 







TEST INFORMATION 


CD5003B..H 

CD5011R 

CD5013D 

CD5013N 


CD5011A..fi 
CD5012A..1 
CD5013F 
CD5013R 


CD5011L..N 

CD5012L 

CD5013H 

CD5014T..X 


CD5011Q 

CD5013B 

CD5013L 


n. The following 242 
and direct access 


tests are inapplicable because sequential, 
files are not supported: 


text, 


CE2102A..C 

(3 

tests) 

CE2102G..H 

(2 

tests) 

CE2102K 



CE2102N..Y 

(12 tests) 

CE2103C..D 

(2 

tests) 

CE2104A..D 

(4 

tests) 

CE2105A..B 

(2 

tests) 

CE2106A..B 

(2 

tests) 

CE2107A..H 

(8 

tests) 

CE2107L 



CE2108A..B 

(2 

tests) 

CE2108C..H 

(S 

tests) 

CE2109A..C 

<3 

tests) 

CE2110A..D 

(4 

tests) 

CE2111A..I 

(9 

tests) 

CE2115A..B 

(2 

tests) 

CE2201A..C 

(3 

tests) 

CE2201F..N 

<9 

tests) 

CE2204A..D 

(4 

tests) 

CE2205A 



CE2208B 



EE2201D..E 

(2 

tests) 

EE2401D 



EE2401G 



CE2401A..C 

(3 

tests) 

CE2401E..F 

(2 

tests) 

CE2401H..L 

(5 

tests) 

CE2404A..B 

(2 

tests) 

CE2405B 



CE2406A 



CE2407A..B 

(2 

tests) 

CE2408A..B 

(2 

tests) 

CE2409A..B 

(2 

tests) 

CE2410A..B 

(2 

tests) 

CE2411A 



CE3102A..B 

(2 

tests) 

EE3102C 



CE3102F..H 

(3 

tests) 

CE3102J..K 

(2 

tests) 

CE3103A 



CE3104A..C 

(3 

tests) 

CE3107B 



CE3108A..B 

(2 

tests) 

CE3109A 



CE3110A 



CE3111A..B 

(2 

tests) 

CE3111D..E 

(2 

tests) 

CE3112A..D 

(4 

tests) 

CE3114A..B 

(2 

tests) 

CE3115A 



EE3203A 



CE3208A 



EE3301B 



CE3302A 



CE3305A 



CE3402A 



EE3402B 



CE3402C..D 

(2 

tests) 

CE3403A..C 

(3 

tests) 

CE3403E..F 

(2 

tests) 

CE3404B..D 

(3 

tests) 

CE3405A 



EE3405B 



CE3405C..D 

(2 

tests) 

CE3406A..D 

<4 

tests) 

CE3407A..C 

(3 

tests) 

CE3408A..C 

(3 

tests) 

CE3409A 



CE3409C..E 

(3 

tests) 

EE3409F 



CE3410A 



CE3410C..E 

(3 

tests) 

EE3410F 



CE3411A 



CE3411C 



CE3412A 



EE3412C 



CE3413A 



CE3413C 



CE3602A..D 

(4 

tests) 

CE3603A 



CE3604A..B 

(2 

tests) 

CE3605A..E 

(5 

tests) 

CE3606A..B 

<2 

tests) 

CE3704A..F 

(6 

tests) 

CE3704M..0 

(3 

tests) 

CE3706D 



CE3706F..G 

(2 

tests) 


3-4 





TEST INFORMATION 


CE3804A..P (16 tests) 
CE3806A..B (2 tests) 
CE3806G..H (2 tests) 
CE3905L 

CE3906E..F (2 tests) 


CE3805A..B (2 tests) 
CE3806D..E (2 tests) 
CE3905A..C (3 tests) 
CE3906A..C (3 tests) 


o. CE2103A, CE2103B, and CE3107A are not applicable because this 
implementation does not support external file create and open 
operation. These tests raise the exception USE_ERROR. (See 
Section 3.6.) 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases vhere 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that vasn't anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 12 tests. 


The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B24009A B33301B B38003A B38003B B38009A B38009B 

B41202A BC1303F BC3005B 


At the recommendation of the AVO, the tests CE2103A, CE2103B, and CE3107A 
were modified because these tests do not allow the implemenation to raise 
USE_ERROR for external file create and open operations when these 
operations are not supported by the implementation. Code was added to 
handle a USE_ERROR exception in these cases. The tests then execute, 
report that USE ERROR was raised on CREATE, and print a result of 
NOT APPLICABLE. 


3-5 








TEST INFORMATION 


3.7 ADDITIONAL TESTING INFORMATION 


3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the MIPS ASAPP was submitted to the AVF by the applicant for review. 
Analysis of these results demonstrated that the compiler successfully 
passed all applicable tests, and the compiler exhibited the expected 
behavior on all inapplicable tests. 


3.7.2 Test Method 


Testing of the MIPS ASAPP using ACVC Version 1.10 was conducted on-site by 
a validation team from the AVF. The configuration in vhich the testing was 
performed is described by the following designations of hardware and 
software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system 
Compiler: 


MIPS M/120 
RISC/os, 4.0 
MIPS R3200-6 CPU board 
bare machine 

MIPS ASAPP, Version 2.10 


The host and target computers were linked via Ethernet. 


A magnetic tape containing all tests except for withdrawn tests and tests 
requiring unsupported floating-point precisions was taken on-site by the 
validation team for processing. Tests that make use of 
implementation-specific values were customized before being written to the 
magnetic tape. Tests requiring modifications during the prevalidation 
testing were included in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded onto a MIPS M/1000 and 
transferred to the host via NFS. 


After the test files were loaded to disk, the full set of tests was 
compiled and linked on the MIPS M/120, then all executable images were 
transferred to the MIPS R3200-6 CPU board via Ethernet and run. Results 
were printed from the host computer. 

The compiler was tested using command scripts provided by MIPS Computer 
Systems and reviewed by the validation team. The compiler was tested using 
all the following option settings. See Appendix E for a complete listing 
of the compiler options for this implementation. The following list of 
compiler options includes those options which were invoked by default: 


OPTION 


EFFECT 


-g0 Have the compiler produce additional symbol 

table information for accurate but limited 


3-6 






TEST INFORMATION 


symbolic debugging of partially optimized 
code. 

-01 Turn on all MIPS optimizations that can be 

done quickly and do one pass using the 
Verdix optimizer. 

Tests were compiled, linked, and executed (as appropriate) using one host 
computer and one target computer. Test output, compilation listings, and 
job logs were captured on magnetic tape and archived at the AVF. The 
listings examined on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at Sunnyvale CA and was completed on 14 June 1989. 


3-7 






APPENDIX A 


DECLARATION OF CONFORMANCE 


MIPS Computer Systems has submitted the following 
Declaration of Conformance concerning the MIPS ASAPP. 


A-l 





mips 


MIPS Compute' Systems me 
9^8 Araues Avenue 
Sunnvvate CA 94086 365C 


.406 ~2G-i'0t 
TC.EX * 5106 
FAX o .406 2 


Declaration of Conformance 


Compiler Implementor: MIPS Computer Systems 

Ada Validation Facility: ASD/SCEL, Wright-Parterson AFB OH 45433-650? 
Ada Compiler Validation Capability (ACVC) Version: 1.10 


Base Configuration 

Base Compiler name: MIPS ASAPP Version: 2.10 

Host Architecture ISA: MIPS M/120 OS&VER: RISC/os 4.0 

Target Architecutre ISA: R3200-6 CPU board; No OS. 

Derived Compiler Registration 

Base Compiler name: MIPS ASAPP Version: 2.10 

Host Architecture ISA: MIPS M/500, M/800, M/1000, M/2000, RC2030, RS2030 
OS&VER: RISC/os 4.0 

Target Architecutre ISA: R3200-8, R2600(2601), R2800(2801) CPU boards. 

No OS. 

All possible combinations of the above hosts and targets are considered 
to be equivalent configurations. 

Implementors Declaration 

I, the undersigned, representing MIPS Computer Systems, have implemented no deliberate 
extensions to the Ada Language Standard ANSI/MIL-STD-1815A in the compiler(s) listed in 
this declaration. I declare that MIPS Computer Systems is the owner of record of the Ada 
compiler(s) in conformance to AN SI/MIL-STD-1815 A. All certificates and registrations for 
Ada language compiler(s) listed in this declartion shall be made only in the owner s corporate 
name. 


\ / f ' 

> \ v 1 

- v— • -> >■ - ; ■ - - -Date:-« . i ^. .1 ~i_^ 

MIPS Computer Systems 
Lafry Weber, Vice President 


Owner’s Declaration 

I, the undersigned, representing MIPS Computer Systems, take full responsibility for imple¬ 
mentation and maintenance for the Ada compiler(s) listed above, and agree to the public dis¬ 
closure of the final Validation Summary Report. I declare that all of the Ada language com¬ 
pilers listed, and their host/target performance arc in compliance with the Ada Language 
Standard ANSI/MIL-STD-1S15A. 


Date:_ >» ] Uu j 1 H ? *~ * 




-- - 1.1 

MIES' Computer-Systems 
Laify Wcbdr, Vice President 


A-2 


C- 5346 
C-S8Q9 





APPENDIX B 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the MIPS ASAPP, Version 2.10, as described in this 
Appendix, are provided by MIPS Computer Systems. Unless specifically noted 
otherwise, references in this Appendix are to compiler documentation and 
not to this report. Implementation-specific portions of the package 
STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT_INTEGER is range -32768 .. 32767; 
type TINY_INTEGER is range -128 .. 127; 

type FLOAT is digits 6 range -3.40282E+38 .. 3.40282E+38; 
type L0NG_FL0AT is digits 15 

range -8.988465674312E+307 .. 8.988465674312E+308; 

type DURATION is delta 1.00000E-03 range -2147483.648 .. -2147483.647; 


end STANDARD; 


B-l 





ATTACHMENT I 


APPENDIX F. Implementation-Dependent Characteristics 


1. Implementation-Dependent Pragmas 

1.1. INLINE_ONLY Pragma 

The INLINE_ONLY pragma, when used in the same way as progma INLINE, indicates to the 
compiler that the subprogram must always be inlined. This pragma also suppresses the genera¬ 
tion of a callable version of the routine which save code space. 

1.2. BUILT-IN Pragma 

The BUILT_IN pragma is used in the implementation of some predefined Ada packages, but 
provides no user access. It is used only to implement code bodies for which no actual Ada 
body can be provided. 

1.3. SHARE_CODE Pragma 

The SHARE_CODE pragma takes the name of a generic instantiation or a generic unit as the 
first argument and one of the identifiers TRUE or FALSE as the second argument. This 
pragma is onlv allowed immediately at the place of a declarative item in a declarative part or 
package specification, or after a library unit in a compilation, but before any subsequent com¬ 
pilation unit. 

When the first argument is a generic unit the pragma applies to all instantiations of that gen¬ 
eric. When the first argument is the name of a generic instantiation the pragma applies only to 
the specified instantiation, or overloaded instantiations. 

If the second argument is TRUE the compiler will try to share code generated for a generic 
instantiation with code generated for other instantiations of the same generic. When the 
second argument is FALSE each instantiation will get a unique copy of the generated code. 
The extent to which code is shared between instantiations depends on this pragma and the 
kind of generic formal parameters declared for the generic unit. 

The name pragma SHARE_BODY is also recognized by the implementation and has the same 
effect as SHARE_CODE. It is included for compatabilitv with earlier versions of MIPS 
VADS. 

1.4. NO_IMAGE Pragma 

The pragma suppresses the generation of the image array used for the IMis .. ibute of 
enumeration types. This eliminates the overhead required to store the array in the executable 
image. A reference to X’lMAGE will be accepted by the compiler if the pragma NOJMAGE 
has been given. 

1.5. EXTERN AL_NAME Pragma 

The EXTERNAL_NAME pragma takes the name of a subprogram or variable defined in Ada 
and allows the user to specify a different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the place of a declarative item in a 
package specification and must apply to an object declared earlier in the same package 
specification. 


B-2 





1.6. ENTERFACE_OBJECT Pragma 

The INTERFACE_OBJECT pragma takes the name of a a variable defined in another 
language and allows it to be referenced directly in Ada. The pragma will replace all 
occurrences of the variable name with an external reference to the second, link_argumem. 
The pragma is allowed at the place of a declarative item in a package specification and must 
apply to an object declared earlier in the same package specification. The object must be 
declared as a scalar or an access type. The object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.7. IMPLICIT_CODE Pragma 

Takes one of the identifiers ON or OFF as the single argument. This pragma is only allowed 
within a machine code procedure. It specifies that implicit code generated by the compiler be 
allowed or disallowed. A warning is issued if OFF is used and any implicit code needs to be 
generated. The default is ON. 

2. Implementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the implementation but has no effect. 

2.2. ELABORATE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.3. INLINE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.4. INTERFACE 

This pragma supports calls to ’C’ and FORTRAN funoffcns. The Ada subprograms can be 
either functions or procedures. The types of parameters and the result type for functions must 
be scalar, access or the predefined type ADDRESS in SYSTEM. All parameters must have 
mode IN. Record and array objects can be passed by reference using the ADDRESS attri¬ 
bute. 

2.5. LIST 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.6. MEMORY.SIZE 

This pragma is recognized by the implementation. The implementation does not allow SYS¬ 
TEM to be modified by means of pragmas, the SYSTEM package must be recompiled. 

2.7. NOTJELABORATED 

This pragma can only appear in a library package specification. It indicates that the package 
will not be elaborated because it is either part of the RTS, a configuration package or an Ada 
package that is referenced from a language other than Ada. The presence of this pragma 
suppresses the generation of elaboration code and issues warnings if elaboration code is 
required. 


B-3 







2.8. OPTIMIZE 

This pragma is recognized by the implementation but has no effect. 

2.9. PACK 

This pragma will cause the compiler to choose a non-aligned representation for composite 
tvpes. It will not causes objects to be packed at the bit level. 

2.10. PAGE 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.11. PRIORITY 

This pragma is implemented as described in Appendix B of the Ada RM. 

2.12. SHARED 

This pragma is recognized by the implementation but has no effect. 

2.13. STORAGE_UNIT 

This pragma is recognized by the implementation. The implementation does not allow SYS¬ 
TEM to be modified by means of pragmas, the SYSTEM package must be recompiled. 

2.14. SUPPRESS 

This pragma is implemented as described, except that RANGE_CHECK and 
DIVISION_CHECK cannot be supressed. 

2.15. SYSTEMJ4AME 

This pragma is recognized by the implementation. The implementation does not allow SYS¬ 
TEM to be modified by means of pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Dependent Attributes 
3.1. P’REF 

This attribute can be used to convert an integer to an address. 










4. Specification Of Package SYSTEM 


packtge SYSTEW 

i« 

irfft NAAC 1ft ( SCPS.O5OSSJU000 ), 

SYSTBvLNAAE cooftlftol NAN€ - MJ PS .CRESS _R2 000 . 

S"TERAGE_LN IT coo • t • d t . • a, 

NBkCKY_5IZE cooftlftol :• 16_777_:i6, 

-• Syftimo-Dcpftodeat Named Ntssben 

M1N_1NT : cooftlftol 

KMXJNT : cod• t>ot 

HMXJ3ICITS : coofttaot 

MAXJtfANTl SSA : cooftlftol 31; 

F1NHJDEL7A : cooftlftol 

TICK : cooftlftol 

• • Oibfti Sp*i«a>dftpeodftai Declftniioo< 

■ obtppft nUCIUTY ift INTEGER raoge 0 .. »»; 

MftX_pBC_SlZE : ioicgtr 1024; 

tpp« AEORESS ift piivfttft; 

N0.AEER. : cooftlftol AECRESS; 

tuoclioo FHYSIGAL_AECRESS(I : 1NTBGER) ffttoro AECRESS; 

(ooclioo ADDR_GT(A, E: AECRESS) rciuro BOOLEAN; 
fooctioo AECR_LT(A. B: AECRESS) raluro BOOLEAN; 
fooctioo ACCRwOECA, B: AECRESS) rfttoro BCCLEAN; 

(uoctioo AECR_LE(A, B: AECRESS) rfttoro BOO LEAN; 

(ooclioo AIXR_DIFF(A, B: AECRESS) more INTEGER. 

(ooclioo 1NCR_AEER(A: AECRESS; INCR: INTB3ER) rftloro A ECRES S; 
fooctioD DEOCAECRfA: AECRESS; EBQR: INTEGER) rftloro AECRESS; 

(ooclioo ">"(A, B: AECRESS) retoro BCCLEAN r*aom*> AECR_CT, 

(ooclioo "<’(A. B; AECRESS) retoro BOOLEAN rftomoftft AEER_LT; 

(ooclioo ">•(A, B: AECRESS) retoro BOOLEAN reoomoft AECR_GE; 

(ooclioo ”<«"(A. B: AECRESS) rotora BOOLEA N iftOftmoo AECRJJE; 

(ooclioo "-'(A, B; AECRESS) retoro INTB3ER reaftftoeft AECR_Z>1FF; 

(ooclioo ’e'(A: AECRESS; INCH: INTBEBR) retoro AECRESS rftoameft INCR^AEOR; 
(ooclioo “-'(A: AECRESS; BBCR: INTEGER) reioro AECRESS rftoamoft EECR^AECR; 

pragma iol ioft(AEOR_GT); 
pragma i a! ioa(AECRJ.T); 
pragma iol ine(AECR_GE); 
pragma iol ioft(AEER_LE); 
pragma iol io«(AECRJ31FF) ; 
pragma iaiioft(INOOAECR); 

pragma iol ioft(BEOV_AECR);_ 

pragma iol ioft(tW5ICAL_ALLnfcSS); 

priefttft 

ippe AECRESS ia oew ialegar; 

NO_AECR : cooftlftol AECRESS :• 0; 
ood SYSTB4; 


5. Restrictions On Representation Clauses 


5.1. Pragma PACK 

In the absence of pragma PACK record components are padded so as to provide for efficient 
access by the target hardware, pragma PACK applied to a record eliminate the padding where 
possible. Pragma PACK has no other effect on the storage allocated for record components a 
record representation is required. 


5.2. Record Representation Clauses 

For scalar types a represenation clause will pack to the number of bits required to represent 
the range of the subtype. A record representation applied to a composite type will not cause 
the object to be packed to fit in the space required. An explicit representation clause must be 
given for the component type. An error will be issued if there is insufficient space allocated. 


-2.147.483.64*; 
: - 2.147.483.647 , 
15; 

:• 2.0**(-31); 

:• 0.01; 


B-5 












5.3. Address Clauses 

Address clauses are supported for variables and constants that have no initial values in their 
declaration. 

5.4. Interrupts 

Interupt entries are supported through signals. 

5.5. Representation Attributes 

The ADDRESS attribute is supported for the following entities, but a meaningless value is 
returned. 

Packages 

Tasks 

Labels 

Entries 


B-6 



6. Conventions for Implementation-generated Names 

There are no implementation-generated names. 


7. Interpretation of Expressions in Address Clauses 
Address clauses are supported for constants and variables. 

8. Restrictions on Unchecked Conversions 
None. 

9. Restrictions on Unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECTJO use the value MAX RFC S IZE as the record size (expressed in 
STORAGE_UNITS) when the size of ELEMENT_TYPE exceeds that value. For example for 
unconstrained arrays such as string where ELEMENT_TYPE’ SIZE is very large, 
MAXJREC_SIZE is used instead. MAX_R£CORD_SIZE is defined in SYSTEM and can be 
changed by a program before instantiating DIRECTJO to provide an upper limit on the 
record size. In any case the maximum size supported is 1024 x 1024 x STORAGEJLJN1T bits. 
DIRECTJO will raise USE_£RROR if MAXJREC_SIZE exceeds this absolute limit. 

Instantiations of SEQUENTIAL JO use the value MAX_REC_SIZE as the record size 
(expressed in STORAGE_UNITS) when the size of ELEMENT_TYPE exceeds that value. 
For example for unconstrained arrays such as string where ELEMENT_TYPE’SIZE is very 
large, MAX_REC_SIZE is used instead. MAX_RECORD„SIZE is defined in SYSTEM and 
can be changed by a program before instantiating INTEGER JO to provide an upper limit on 
the record size. SEQUENTIAL JO imposes no limit on MAXJIEC_SIZE. 


11. Implementation Limits 

The following limits are actually enforced by the implementation. It is not intended to imply 
that resources up to or even near these limits are available to every program. 


11.1. Line Length 

The implementation supports a maximum line length of 500 characters including the end of 
line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 24,000,000 x STORAGEJJNITS. The 
maximum size of a statically sized record type is 24,000,000 x STORAGE_UNITS. A record 
type or array type declaration that exceeds these limits will generate a warning message. 

11J. Default Stack Size for Tasks 

In the absence of an explicit STORAGE_SIZE length specification every task except the main 
program is allocated a fixed size stack of 10,240 STORAGE JJNITS. This is the value 
returned by T’STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE..SIZE length attribute the default collection size for 
an access type is 100 times the size of the designated type. This is the value returned by 


B-7 




T’STORAGE_SIZE for an access type T. 


11.5. Limit on Declared Objects 

There is an absolute limit of d.OOO.OOO x STOKAGE_UNITS for objects declared staticalh 
within a compilation unit. If this value is exceeded the compiler will terminate the compilation 
of the unit with a FATAL error message. 


B-8 






APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent values, such 
as the maximum length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below. 


Name and Meaning _ Value _ 

SACCSIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

$BIG_ID1 (1..498 -> 'A', 499«> '1') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID2 except 
for the last character. 

$BIG_ID2 (1..498 => 'A', 499«> '2') 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 

$BIG_ID3 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 


(1..249 -> 'A', 250«> '3', 
251..499 «> 'A') 


C-l 





TEST PARAMETERS 


Name and Meaning _ 

SBIGID4 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of the 
maximum line length. 

$BIG_REAL_LIT 

A universal real literal of 
value 690.0 vith enough leading 
zeroes to be the size of the 
maximum line length. 

SBIGSTRINGl 

A string literal which when 
catenated with BIG_STRING2 
yields the image of BIG_ID1. 

SBIGSTRING2 

A string literal which when 
catenated to the end of 
BIGSTRINGl yields the image of 
BIG_ID1. 

SBLANKS 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

SCOUNTLAST 

A universal integer 

literal whose value is 
TEXT_I0.COUNT'LAST. 

$DEFAULT_MEM_SIZE 

An integer literal whose value 
is SYSTEM.MEM0RY_SIZE. 

$DEFAULT_STOR_UNIT 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 


Value 


(1..249 *> 'A', 250*> '4', 
251..499 «> 'A') 


(1..496 => 'O', 497..499 «> "298") 


(1..493 -> 'O', 494..499 «> "69.0E1") 


(1 »> 2..251 «> 'A', 252 «> '"') 


(1 «> 2..249 => 'A', 250 *> '1', 

251 => 


(1..479 -> ' ') 

2147483647 

16777216 

8 


C-2 


TEST PARAMETERS 


Name and Meaning _ 

$DEFAULT_SYS NAME 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 

A real literal vhose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 

A universal integer 

literal vhose value is 
TEXT_IO.FIELD'LAST. 

$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATION. 

$FLOAT_NAME 

The name of a predefined 
floating-point type other than 
FLOAT, SHORTFLOAT, or 

LONG_FLOAT. 

SGREATERTHANDURATION 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 

$GREATER_THAN_DURATION_BASE LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 

An integer literal vhose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 

An "external” file name which 
contains invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 

An "external file name which 
is too long. 

$INTEGER_FIRST 

A universal integer literal 
whose value is INTEGER'FIRST. 


Value _ 

MIPS_CR0SS_R2000 

0.0000000004656612673077392578125 

2147483647 

N0_SUCH_FIXED_TYPE 

N0_SUCH_TYPE 

100000.0 

10000000.0 

99 

ILLEGAL/FILE_NAME/2{]SX2102C*.DAT 

ILLEGAL/FILE_NAME/CE2102C*.DAT 

-2147483648 


C-3 





TEST PARAMETERS 


Name and Meaning _ Value _ 

$INTEGER_LAST 2147483647 

A universal integer literal 
whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 2147483648 

A universal integer literal 
whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION -100000.0 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATI0N BASE_FIRST -10000000.0 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

$ L0V_PRIORITY 0 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$ MANTISSA_DOC 31 

An integer literal whose value 
is SYSTEM.MAXMANTISSA. 

$MAX_DIGITS 15 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 499 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 2147483647 

A universal integer literal 
whose value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal 
whose value is SYSTEM.MAX_INT+1. 

$MAX_LEN_INT_BASED_LITERAL (1..2 -> ”2:", 3..496 -> 'O', 

A universal integer based 497..499 *> "11:") 
literal whose value is 2#11| 
with enough leading zeroes in 
the mantissa to be MAX_IN_LEN 
long. 


C-4 



TEST PARAMETERS 


Name and Meaning __ 

$MAX_LEN_R£AL_BASED_LITERAL 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$max_string t l:teral 

A string literal of size 
MAX_IN_LEN, including the quote 
characters. 

$MIN_INT 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NULL;" as the only statement in 
its body. 

$NAME 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 
SHORTFLOAT, SH0RT_INTEGER, 

LONG_FLOAT, or LONGINTEGER. 

$NAME_LIST 

A list of enumeration literals 
in the type SYSTEM.NAME, 

separated by commas. 

$NEG_BASED_INT 

A based integer literal whose 
highest order nonzero bit 

falls in the sign bit 
position of the representation 

for SYSTEM.MAXINT. 

$NEV_MEM_SIZE 

An integer literal whose value 
is a permitted argument for 

pragma MEMORY SIZE, other than 
$DEFAULT_MEH_SIZE. If there is 
no other value, then use 
$DEFAULT_MEM_SIZE. 


Value _ 

(1. .3 => "16:", 4. .495 -=> '0' , 
496..499 -> "F.E:") 

(1 => 2..498 => 'A', 499 => 

-2147483648 

32 

TINY_INTEGER 

MIPS_CR0SS_R2000 

16#FFFFFFFD# 

16777216 


C-5 





TEST PARAMETERS 



Value 


$NEV_STOR_UNIT 8 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE UNIT. 


$NEW_SYS NAME MIPS_CR0SS_R2000 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value~of that 
type, then use that value. 

$TASK_SIZE 32 

An integer literal vhose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

STICK 0.01 

A real literal whose value is 
SYSTEM.TICK. 


C-6 




APPENDIX D 


WITHDRAWN TESTS 


Some tests are vithdravn from the ACVC because they do not conform to the 
Ada Standard. The folloving 44 tests had been withdrawn at the time of 
validation testing for the reasons indicated. A reference of the form 
Al-ddddd is to an Ada Commentary. 


a. E28005C: This test expects that the string "— TOP OF PAGE. —63" of 
line 204 will appear at the top of the listing page due to a pragma 
PAGE in line 203; but line 203 contains text that follows the pragma, 
and it is this text that must appear at the top of the page. 

b. A39005G: This test unreasonably expects a component clau e to pack an 
array component into a minimum size (line 30). 

c. B97102E: This test contains an unintended illegality: a select 
statement contains a null statement at the place of a selective wait 
alternative (line 31). 

d. C97116A: This test contains race conditions, and it assumes that 

guards are evaluated indivisibly. A conforming implementation may use 
interleaved execution in such a way that the evaluation of the guards 
at lines 50 & 54 and the execution of task CHANGING OF_THE_GUARD 

results in a call to REPORT.FAILED at one of lines 52 or 56. 

e. BC3009B: This test wrongly expects that circular instantiations will 
be detected in several compilation units even though none of the units 
is illegal with respect to the units it depends on; by AI-00256, the 
illegality need not be detected until execution is attempted (line 
95). 

f. CD2A62D: This test wrongly requires that an array object's size be no 
greater than 10 although its subtype's size was specified to be 40 
(line 137). 

g. CD2A63A..D, CD2A66A..D, CD2A73A..D, and CD2A76A..D (16 tests): These 


D-l 




WITHDRAWN TESTS 


tests wrongly attempt to check, the size of objects of a derived type 
(for which a 'SIZE length clause is given) by passing them to a 
derived subprogram (which implicitly converts them to the parent type 
(Ada standard 3.4:14)). Additionally, they use the 'SIZE length 
clause and attribute, whose interpretation is considered problematic 
by the WG9 ARG. 

h. CD2A81G, CD2A83G, CD2A84M..N, and CD50110 (5 tests): These tests 

assume that dependent tasks will terminate while the main program 
executes a loop that simply tests for task termination; this is not 
the case, and the main program may loop indefinitely (lines 74, 85, 
86, 96, and 58, respectively). 

i. CD2B15C and CD7205C: These tests expect that a 'STORAGE_SIZE length 
clause provides precise control over the number of designated objects 
in a collection; the Ada standard 13.2:15 allows that such control 
must not be expected. 

j. CD2D11B: This test gives a SMALL representation clause for a derived 
fixed-point type (at line 30) that defines a set of model numbers that 
are not necessarily represented in the parent type; by Commentary 
AI-00099, all model numbers of a derived fixed-point type must be 
representable values of the parent type. 

k. CD5007B: This test wrongly expects an implicitly declared subprogram 
to be at the address that is specified for an unrelated subprogram 
(line 303). 

l. ED7004B, ED7005C..D, and ED7006C..D (5 tests): These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A: This test requires that successive calls to CALENDAR.CLOCK 
change by at least SYSTEM.TICK; however, by Commentary AI-00201, it is 
only the expected frequency of change that must be at least 
SYSTEM.TICK—particular instances of change may be less (line 29). 

n. CD7203B and CD7204B: These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by the WG9 
ARG. 

o. CD7205D: This test checks an invalid test objective: it treats the 
specification of storage to be reserved for a task's activation as 
though it were like the specification of storage for a collection. 

p. CE2107I: This test requires that objects of two similar scalar types 
be distinguished when read from a file—DATA_ERR0R is expected to be 
raised by an attempt to read one object - as of the other type. 
However, it is not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not considered valid 
(line 90). 


D-2 









WITHDRAWN TESTS 


q. CE3111C: This test requires certain behavior, when two files are 
associated with the same external file, that is not required by the 
Ada standard. 

r. CE3301A: This test contains several calls to END_OF_LINE and 

END_OFJPAGE that have no parameter: these calls were intended to 
specify a file, not to refer to STANDARD INPUT (lines 103, 107, 118. 
132, and 136). 

s. CE3411B: This test requires that a text file's column number be set to 
COUNT'LAST in order to check that LAY0UT_ERR0R is raised by a 
subsequent PUT operation. But the former operation will generally 
raise an exception due to a lack of available disk space, and the test 
would thus encumber validation testing. 




APPENDIX E 


COMPILER OPTIONS AS SUPPLIED BY MIPS COMPUTER SYSTEMS 


Compiler: MIPS ASAPP, Version 2.10 

ACVC Version: 1.10 


E-l 




ADA (1) 


VADS Reference Manu.i! 


ADA (1) 


NAME 

ada - Ada compiler 

SYNTAX 

ada [options] [ada_source.a]... [linker_options] [object_file.o]... 

DESCRIPTION 

The command ada executes the Ada compiler and compiles the named Ada source file, end¬ 
ing with the la suffix. The file must reside in a VADS library directory. The ada.lib file in 
this directory' is modified after each Ada unit is compiled. 

The object for each compiled Ada unit is left in a file with with the same name as that of the 
source with .01, .02, etc. substituted for .a. The -o option can be used to produce an execut¬ 
able with a name other than a.out, the default. For cross compilers, the default name is 
a.vox. 

By default, ada produces only object and net files. If the -M option is used, the compiler 
automatically invokes a.ld and builds a complete program wih the named library unit as the 
main program. 

Non-Ada object files (.o files produced by a compiler for another language) may be given as 
arguments to ada. These files will be passed on to the linker and will be linked with the 
specified Ada object files. 

Command line options may be specified in any order, but the order of compilation and the 
order of the files to be passed to the linker can be significant. 

Several VADS compilers may be simultaneously available on a single system. Because the 
ada command in any VADSJocation/bin on a system will execute the correct compiler com¬ 
ponents based upon visible library directives, the option -sh is provided to print the name of 
the components actually executed. 

Program listings with a disassembly of machine instructions are generated by a.db or a.das. 

OPTIONS 

-a filename (archive) treat filejiame as an ar file. Since archive files end with .a, -a 

is used to distinguish archive files from Ada source files. 

-d (dependencies) analyze for dependencies only. Do not do semantic 

analysis or code generation. Update the library, marking any defined 
units as uncompiled. The -d option is used by a.make to establish 
dependencies among new files. 

-e (error) process compilation error messages using a.error and direct it to 

stdout.- only the source lines containing errors are listed. Only one -e 
or -E option should be used. 

-E 

-E file 

-E directory (error output) without a file or directory argument, ada processes error 

messages using a.error and directs the output to stdout; the raw error 
messages are left in ada.source.err. If a file pathname is given, the raw 
error messages are placed in that file. If a directory argument is sup¬ 
plied, the raw error output is placed in dir/source.err. Only one -e or 
-E option should be used. 

-el (error listing) intersperse error messages among source lines and direct 

to stdout. 


-El 


MIPS Computer Systems, Inc. 


E-2 






ADA () 


VADS Reference Manual 


ADA (1) 


-El file 
-El directory 

-ev 

-gO 

-g "or" -g2 

“g3 

-1 filejabbreviation 

-M unit_name 

-M adasource.a 

-o executable Jile 

-OO 

-Ol 

-02 

-R VADSJibrary 

-S 

-T 

-v 

-w 




(error listing) same as the -E option, except that source listing with 
errors is produced. 

(error vi) process syntax eiror messages using a.error, embed them in 
the source file, and call the environment editor ERROR_EDITOR. (If 
ERROR_EDITOR is defined, the environment variable 
ERROR_PATTERN should also be defined. ERROR_PATTERN is an 
editor search command that locates the first occurrence of *###’ in the 
error file.) If no editor is specifed, call vi. 

Have the compiler produce additional symbol table information for 
accurate but limited symbolic debugging of partially optimixed code. 

Have the compiler produce additinal symbol table information for full 
symbolic debugging and not do optimizations that limit full symbolic 
debugging. -g2 is the default. 

Have the compiler produce additional sybol table information for full 
symbolic debugging for fully optimized code. This option makes the 
debugger inaccurate. 

(link) Link this library file. (Do not space between the -land the file 
abbreviation.) See also 

Operating system documentation, ld(l). 

(main) produce an executable program using the named unit as the main 
program. The unit must be either a parameterless procedure or a 
parameterless function returning an integer. The executable program 
will be left in the file a.out unless overridden with the -o option. 

(main) like -M unitjiame, except that the unit name is assumed to be 
the root name of the .a file (for foo.a the unit is foo). Only one .a file 
may be preceded by -M. 

(output) this option is to be used in conjunction with the -M option. 
executable .file is the name of the executable rather than the default 
a.out. 

Turn off all optimizations. 

Tum on all MIPS optimizations that can be done quickly and do one 
pass using the Verdix optimizer. This is the default. 

Invoke the M7PS global ucode optimizer and optimize as far as possible 
using the Verdix optimizer. (MIPS global ucode optimizer not sup¬ 
ported in this release.) -O is the same as -02. 

(recompile instantiation) force analysis of all generic instantiations, caus¬ 
ing reinstantiation of any that are out of date. 

(suppress) apply pragma SUPPRESS to the entire compilation for all 
suppressible checks. 

(timing) print timing information for the compilation. 

(verbose) print compiler version number, date and time of compilation, 
name of file compiled, command input line, total compilation time, and 
error summary line. 

(warnings) suppress warning diagnostics. 


MIPS Computer Systems, Inc. 


E-3 




ADA (1J 


VADS Reference Manual 


ADA (1) 


-G Num Specify the maximum size, in bytes, of a data item that is to be 

accessed from the global pointer. Num is assumed to be a decimal 
number. If Num is zero, no data is accessed from the global pointer. 
The default value for Num is 8 bytes. 

-W c argl,[arg2...] Pass the arguments] argi to a compiler pass, where c is one of the char¬ 
acters in the next table that designates the pass. 

Pass Character 

include h 

backend D 

driver 

ucgen G 

ujoin j 

uld u 

asplit s 

umesrge m 

uopt o 

ugen c 

asl b 

SEE ALSO 

[VADS Reference] a.db, a.error, a.ld, a.mklib, a.das and Operating system documentation, 
ld(l) 

DIAGNOSTICS 

The diagnostics produced by the VADS compiler are intended to be self-explanatory. Most 
refer to the RM. Each RM reference includes a section number and optionally, a paragraph 
number enclosed in parentheses. 



MIPS Computer Systems, Inc. 


E-4 








