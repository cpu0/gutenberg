AD-A214 900 


A 




S£CURI t y CLASSIFICATION Of THIS PAGE (When Par* entered) 


REPORT DOCUMENTATION PAGE 


•I AS WSTHUCTIONSi 
■trout comphtetnc ronv 


1. HE PORI NUMBER 


(2. 60VT ACCESSION NO. 


3. RECIPIENT'S CATALOG NUMBER 


». TITLE (andiubvtie) 

Ada Compiler Validation Summary Report :SD-sciconJ 
jplc, XD Ada MC68020 T1.0-02V, VAX Cluster (Host) to MC6802Ct 
(Target), 89032INI.10041 


5. TYPE Of REPORT 1 PERIOD COVERED 

21 March 1989 to 21 March 199l 


e. PERFORMING^RG. REPORT NUMBER 


7. authors 

National Computing Centre Limited, 
Manchester, United Kingdom. 


e. contract or grant numbers; 


». PERFORMING ORGANIZATION AND ADDRESS 


10. PROGRAM element, project, tas* 
AREA A WORK UNIT NUMBERS 


National Computing Centre Limited, 
Manchester, United Kingdom. 


11. CONTROLLING OFFICE name and address 

Ada Joint Program Office 

United States Department of Defense 

Washington, DC 20301-3081 

12. REPORT DATE 

TIT NUMBlH 0T"PAGES 

14. MONITORING AGENCY NAME l ADORESSOf different from Controlling Office) 

National Computing Centre Limited, 

Manchester, United Kingdom. 

IS. SECuRITy Class (oFtMrtportl 
UNCLASSIFIED 

IS*. g£(^»S^FICATI0N/D0wS5RADlNG 

° N/A 

16. DISTRIBUTION STATEMENT (of th,s Report) | 


Approved for public release; distribution unlimited. 


17. DISTRIBUTION STATEMENT (of the abstract ante <ed in Block 20 If dihfe rent from Report! 



IB . KEYWORDS (Continue on reverse tide if neceua'y end identify by block number) 


Ada Programming language, Ada Compiler Validation Summary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/MIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20 . ABSTRACT (Conrmu, on reverse ude if necessary and identity by block number) 

SD-Scicon pic. XD Ada MC68020 TI.0-02V, Machester Ml 7ED England, VAX Cluster comprisin| 
of a VAX 8600 and sen MicroVAX IIs under VMS 5.0 (Host) to MC68020 implemented on the 
MVME 133 XT board (bare machine)(Target), ACVC 1.10. 


DO rcss 1473 EDITION OF 1 N0v BS IS OBSOLETE 

1 JAN 73 S/N 0102'lf-01A-B60T _ UNCLASSIFIED _ 

security classification of this page (when o*t» entered) 

8 ? // >£& 












Ada Compiler Validation Summary Report: 


Compiler Name: XD Ada MC68020 T1.0-02V 
Certificate Number: #890321N1.10041 

Host: VAX Cluster comprising of a VAX 8600 and seven 
MicroVAX IIs under VMS 5.0 

Target: MC68020 implemented on the MVME 133 XT board (bare 
machine) 

Testing Completed 21 March 1989 Using ACVC 1.10 
This report has been reviewed and is approved. 


\ \A Ai_ 

Jane Pink 

Testing Services Manager 

The National Competing Centre Limited 

Oxford Road 

Manchester Ml 7ED 

England 


Ada Validation Organization^ 
Dr. John F. Kramer 
Institute for Defense AnaJ r ses 
Alexandria VA 22311 



Ada Joint Program Office 
Dr J. Solomon 
Director AJPO 
Department of Defense 
Washington DC 20301 




Ada Compiler Validation Summary Report: 


Compiler Name: XD Ada MC68020 T1.0-02V 
Certificate Number: #890321N1.10041 


Host: VAX Cluster comprising of a VAX 8600 and seven 
MicroVAX IIs under VMS 5.0 

Target: MC68020 implemented on the MVME 133 XT board (bare 
machine) 


Testing Completed 21 March 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


j xV>V _ 

Jane Pin< 

Testing Services Manager 

The National Computing Centre Limited 

Oxford Road 

Manchester Ml 7ED 

England 



Ada Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
Dr J. Solomon 
Director AJPO 
Department of Defense 
Washington DC 20301 





AVF Control Number: AVF-VSR-90502/48 


* 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: #890321N1.10041 
SD-Scicon pic 
XD Ada MC68020 T1.0-02V 
VAX Cluster Host and MC68020 Target 


Completion of On-Site Testing: i 

21 March 1989 I 


Prepared By: 

Testing Services 

The National Computing Centre Limited 
Oxford Road 
Manchester Ml 7ED 
England 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 







TABLE OF CONTENTS 


TABLE OF CONTENTS 


CHAPTER 1 

INTRODUCTION . 1 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 1 

1.2 USE OF THIS VALIDATION SUMMARY REPORT . . 2 

1.3 REFERENCES. 3 

1.4 DEFINITION OF TERMS . 3 

1.5 ACVC TEST CLASSES. 4 

CHAPTER 2 

CONFIGURATION INFORMATION . 1 

2.1 CONFIGURATION TESTED . 1 

2.2 IMPLEMENTATION CHARACTERISTICS . 2 

CHAPTER 2 

TEST INFORMATION . 1 

3.1 TEST RESULTS. 1 

3.2 SUMMARY OF TEST RESULTS BY CLASS. 1 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER .... 1 

3.4 WITHDRAWN TESTS . 2 

3.5 INAPPLICABLE TESTS . 2 

3.6 TEST, PROCESSING, AND EVALUATION 

MODIFICATIONS . 6 

3.7 ADDITIONAL TESTING INFORMATION . 7 

APPENDIX A 

DECLARATION OF CONFORMANCE . 1 

APPENDIX B 

APPENDIX F OF THE Ada STANDARD. 1 

APPENDIX C 

TEST PARAMETERS. 1 

APPENDIX D □ 

WITHDRAWN TESTS. 1 Q 


By-- 

Distribution/ 



AVF-VSR-90502/48 


Validation Suanary Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 


Table of Contents Rape i of i 

























INTRODUCTION 


/ 

f 


CHAPTER 1 
INTRODUCTION 

9 

' This Validation Summary Report '-f VS R)- describes the extent to 
which a specific Ada compiler conforms to the Ada Standard, 
ANSI/MIL-STD-1815A. This report explains all technical terms 
used within it and thoroughly reports the results of testing 
this compiler using the Ada Compiler Validation Capability* 
— fA€Ve^.. An Ada compiler must be implemented according to the 
Ada Standard, and any implementation-dependent features must 
conform to the requirements of the Ada Standard. The Ada 
Standard must be implemented in its entirety, and nothing can be 
implemented that is not in the Standard. 

Even though all validated Ada compilers conform to the Ada 
Standard, it must be understood that some differences do exist 
between implementations. The Ada Standard permits some 
implementation dependencies — for example, the maximum length 
of identifiers or the maximum values of integer types. Other 
differences becween compilers result from the characteristics of 
particular operating systems, hardware, or implementation 
strategies. All the dependencies observed during the process of 
testing this compiler are given in this report. 


The information in this report is derived from the test results 
produced during validation testing. The validation process 
includes submitting a suite of standardized tests, the ACVC, as 
inputs to an Ada compiler and evaluating the results. , The 
purpose of validating is to ensure conformity of the compile*: to 
the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and 
rejects illegal language constructs. The testing also 
identifies behavior that is implementation dependent, but is 
permitted by the Ada Standard. Six classes of tests are used. 
These tests are designed to perform checks at compile time, at 
link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 

This VSR documents the results of the validation testing 
performed on an Ada compiler. Testing was carried out for the 
following purposes: 



Validation Suaaary Report AVF-VSR-90502/48 

SO-Scicon pic XD Ada MC68020 T1.0-02V Chapter 1 Page 1 of 7 







INTRODUCTION 


o To attempt to identify any language constructs 
supported by the compiler that do not conform to the 
Ada Standard 

o To attempt to identify any language constructs not 
supported by the compiler but required by the Ada 
Standard 

o To determine that the implementation-dependent 
behavior is allowed by the Ada Standard 

Testing of this compiler was conducted by The National Computing 
Centre according to procedures established by the Ada Joint 
Program Office and administered by the Ada Validation 
Organization (AVO). On-site testing was completed 21 March 1989 
at SD-Scicon Pic, Pembroke House, Pembroke Broadway, Camberley, 
Surrey. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, 
the AVO may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the 
"Freedom of Information Act” (5 U.S.C. #552). The results of 
this validation apply only to the computers, operating systems, 
and compiler versions identified in this report. 

The organizations represented on the signature page of this 
report do not represent or warrant that all statements set forth 
in this report are accurate and complete, or that the subject 
compiler has no nonconformities to the Ada Standard other than 
those presented. Copies of this report are available to the 
public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 (Fern Stre 
Washington DC 20301-3081 

or from: 

Testing Services 

The National Computing Centre Limited 
Oxford Road 
Manchester Ml 7ED 
England 


Validation Sue 

■ary Report 

AVF-VSR-90502/48 

SO-Scicon pic 

XD Ada MC68020 T1.0-02V 

l 

Chapter 1 Page 2 of 7 




INTRODUCTION 


Questions regarding this report or the validation test results 
should be directed to the AVF listed above or to: 


Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1.3 REFERENCES 

1• Reference Manual for the Ada Programming Language . 

ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines . 

Ada Joint Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide . 
SofTech, Inc., December 1986. 

4. Ada Compiler Validation Capability User*s Guide . 
December 1986. 

1.4 DEFINITION OF TERMS 

AC VC 

Ada Commentary 

Ada Standard 

Applicant 
AVF 


AVF-VSR-90502/48 


The Ada Compiler Validation Capability. The 
set of Ada programs that tests the 
conformity of an Ada compiler to the Ada 
programming language. 

An Ada Commentary contains all information 
relevant to the point addressed by a comment 
on the Ada Standard. These comments are 
given a unique identification number having 
the form Al-ddddd. 

ANSI/MIL-STD-1815A, February 1983 and ISO 
8652-1987. 

The agency requesting validation. 

The Ada Validation Facility. The AVF is 
responsible for conducting compiler 
validations according to procedures 
contained in the Ada Compiler Validation 
Procedures and Guidelines. 


Validation Suaaary Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 


Chapter 1 Pape 3 of 7 









INTRODUCTION 


AVO The Ada Validation Organization. The AVO 

has oversight authority over all AVF 
practices for the purpose of maintaining a 
uniform process for validation of Ada 
compilers. The AVO provides administrative 
and technical support for Ada validations to 
ensure consistent practices. 

Compiler A processor for the Ada language. In the 

context of this report, a compiler is any 
language processor, including cross- 
compilers, translators, and interpreters. 

Failed test An ACVC test for which the compiler 

generates a result that demonstrates 
nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 


Inapplicable test An ACVC test that uses features of the 

language that a compiler is not required to 
support or may legitimately support in a way 
other than the one expected by the test. 

Passed test An ACVC test for which a compiler generates 

the expected result. 

Target The computer which executes the code 

generated by the compiler. 

Test A program that checks a compiler's 

conformity regarding a particular feature or 
a combination of features to the Ada 
Standard. In the context of this report, 
the term is used to designate a single test, 
which may comprise one or more files. 

Withdrawn test An ACVC test found to be incorrect and not 

used to check conformity to the Ada 
Standard. A test may he incorrect because 
it has an invalid test objective, fails to 
meet its test objective, or contains illegal 
or erroneous use of the language. 


ACVC 


CLASSES 


Conformity to the Ada Standard is measured using the ACVC. The 
ACVC contains both legal and illegal Ada programs structured into 


Validation Sea 

■ary Report 

AVF-VSR-90502/48 

SO-Scicon pic 

XD Ada MC68020 T1.0-02V 

Chapter 1 Page 4 of 7 











INTRODUCTION 


six test classes: A, B, C, D, E and L. The first letter of a 
test name identifies the class to which it belongs. Class A, C, 
D and E tests are executable, and special program units are used 
to report their results during execution. Class B tests are 
expected to produce compilation errors. Class L tests are 
expected to produce errors because of the way in which a program 
library is used at link time. 

Class A tests ensure the successful compilation and execution of 
legal Ada programs with certain language constructs which cannot 
be verified at run time. There are no explicit program 
components in a Class A test to check semantics. For example, 
a Class A test checks that reserved words of another language 
(other than those already reserved in the Ada language) are not 
treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program 
executes to produce a PASSED message. 

Class B tests check that a compiler detects illegal language 
usage. Class B tests are not executable. Each test in this 
class is compiled and the resulting compilation listing is 
examined to verify that every syntax or semantic error in the 
test is detected. A Class B test is passed if every illegal 
construct that it contains is detected by the compiler. 

Class C tests check the run time system to ensure that legal Ada 
programs can be correctly compiled and executed. Each Class C 
test is self-checking and produces a PASSED, FAILED, or NOT 
APPLICABLE message indicating the result when it is executed. 

Class D tests check the compilation and execution capacities of 
a compiler. Since there are no capacity requirements placed on 
a compiler by the Ada Standard for some parameters — for 
example, the number of identifiers permitted in a compilation or 
the number of units in a library — a compiler may refuse to 
compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the 
capacity of the compiler is exceeded, the test is classified as 
inapplicable. If a Class D test compiles successfully, it is 
self-checking and produces a PASSED or FAILED message during 
execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities 
in the Ada Standard. Each Class E test is self-checking and 
produces a NOT APPLICABLE, PASSED or FAILED message when it is 
compiled and executed. However, the Ada Standard permits an 
implementation to reject programs containing some features 
addressed by Class E tests during compilation. Therefore, a 


AVF■VSR•90502/48 


Validation Suaaary Report 

SO-Sc icon pic XD Ada MC68020 T1.0 02V 


Chapter 1 Page 5 of 7 









INTRODUCTION 


Class F test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it 
is ?f jected by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs 
involving multiple, separately compiled units are detected and 
not allowed to execute. Class L tests are compiled separately 
and execution is attempted. A Class L test passes if it is 
rejected at link time -- that is, an attempt to execute the main 
program must generate an error message before any declarations 
in the main program or any units referenced by the main program 
are elaborated. In seme cases, an implementation may 
legitimately detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure 
CHECKFILE, support the self-checking features of the executable 
tests. The package REPORT provides the mechanism by which 
executable tests report PASSED, FAILED or NOT APPLICABLE results. 
It also provides a set of identity functions used to defeat some 
compiler optimizations allowed by the Ada Standard that would 
circumvent a test objective. The procedure CHECK_FILE is used 
to check the contents of text files written by some of the Class 
C tests for Chapter 14 of the Ada Standard. The operation of 
REPORT and CHECKFILE is checked by a set of executable tests. 
These tests produce messages that are examined to verify that the 
units are operating correctly. If these units are not operating 
correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are 
intended to ensure that the tests are reasonably portable without 
modification. For example, the tests make use of only the basic 
set of 55 characters, contain lines with a maximum length of 72 
characters, use small numeric values, and place features that may 
not be supported by all implementations in separate tests. 
However, some tests contain values that require the test to be 
customized according to implementation-specific values — for 
example, an illegal file name. A list of the values used for 
this validation is provided in Appendix C. 

A compiler must correctly process each of the tests in the suite 
and demonstrate conformity to the Ada Standard by either meeting 
the pass criteria given for the test or by showing that the test 
is inapplicable to the implementation. The applicability of a 
test to an implementation is considered each time the 
implementation is validated. A test that is inapplicable for one 
validation is not necessarily inapplicable for a subsequent 
validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is 
withdrawn from the ACVC and, therefore, is not used in testing 


Validation SuMary Report 


AVF- VSR-90502/44 


SD-Sc icon pic » Ada MC68020 T1.0-02V 


Chapter 1 Page 6 of 7 






INTRODUCTION 


a compiler. The tests withdrawn at the time of this validation 
are given in Appendix D. 


AVF-VSR-90502/48 


Validation Suaaary Report 

SO-Scicon pic »> Ada MC68020 T1.0-02V 


Chapter 1 Page 7 of 7 








CONFIGURATION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 


2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested 
under the following configuration: 

Compiler: XD Ada MC68020 T1.0-02V 

ACvC Version: 1.10 

Certificate Number: #890321N1.10041 


Host Computer: 

Machine: 

Operating System: 
Memory '"ize: 


VAX CLUSTER comprising of a V/\X 
8600 and seven MicroVAX II's. 

VMS 5.0 

90Mb 


Target Computer: 

Machine: MC68020 implemented on a MVME 133 

XT board (bare machine) 

Memory Size: 1Mb 


Communications Network: RS232 link 


Validation Suaaary Report 


AVF-VSR-90502/48 


SO-Sc icon pic XD Ada MC68020 T1.0-02V 


Chapter 2 Page 1 of 6 








CONFIGURATION INFORMATION 



IMPLEMENTATION CHARACTERISTICS 


One of the purposes of validating compilers is to determine the 
behavior of a compiler in those areas of the Ada Standard that 
permit implementations to differ. Class D and E tests 
specifically check for such implementation differences. However, 
tests in other classes also characterize an implementation. The 
tests demonstrate the following characteristics: 

a. Capacities. 

(1) The compiler correctly processes a compilation 
containing 723 variables in the same declarative part. 
(See test D29002K.) 

(2) The compiler correctly processes tests containing loop 
statements nested to 65 levels. (See tests D55A03A..H 
(8 tests).) 

(3) The compiler correctly processes tests containing block 
statements nested to 65 levels. (See test D560013.) 

(4) The compiler correctly processes tests containing 
recursive procedures separately compiled as subunits 
nested to 17 levels. (See tests D64005E..G (3 tests) ) 

b. Predefined types. 

(1) This implementation supports the additional predefinec 
types SHORT_INTEGER, SHORT_SHORT_INTEGER, LONGFLOAT 
and LONG_LONG_FLOAT in the package STANDARD. (See 
tests B86001T..Z (7 tests).) 

c. Expression evaluation. 

The order in which expressions are evaluated and the time 
at which constraints are checked are not defined by the 
language. While the ACVC tests do not specifically attempt 
to determine the order of evaluation of expressions, test 
results indicate the following: 

(1) None of the default initialization expressions for 
record components are evaluated before any value is 
checked for membership in a component's subtype. (See 
test C32117A.) 


Validation Suaaary Report 
SD-Scicon pic XD Ada MC68020 T1.0-02V 


AVF-VSR-90502/4S 


Chapter 2 Page 2 of 6 





CONFIGURATION INFORMATION 


(2) Assignments for subtypes are performed with the same 
precision as the base type. (See test C35712B.) 

(3) This implementation uses no extra bits for extra 
precision and uses all extra bits for extra range. 
(See test C35903A.) 

(4) No exception is raised when an integer literal operand 
in a comparison or membership test is outside the range 
of the base type. (See test C45232A.) 

(5) No exception is raised when a literal operand in a 
fixed-point comparison or membership test is outside 
the range of the base type. (See test C45252A.) 

(6) Underflow is gradual. (See tests C45524A..Z (26 

tests).) 

d. Rounding. 

The method by which values are rounded in type conversions 
is not defined by the language. While the ACVC tests do not 
specifically attempt to determine the method of rounding, 
the test results indicate the following: 

(1) The method used for rounding to integer is round to 
even. (See tests C46012A..Z (26 tests).) 

(2) The method used for rounding to longest integer is 
round to even. (See tests C46012A..Z (26 tests).) 

(3) The method used for rounding to integer in static 
universal real expressions is round away from zero. 
(See test C4A014A.) 

e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT_ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 
implementation: 

(1) Declaration of an array type or subtype declaration 
with more than SYSTEM.MAX_INT components raises 
NUMERIC_ERROR. (See test C36003A.) 


Validation Suaaary Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 


AVF-VSR-90502/48 
Chapter 2 Pape 3 of 6 









CONFIGURATION INFORMATION 


(2) 

NUMERIC 

ERROR 

is 

raised when 

an array 

type 

with 


INTEGER' 

'LAST + 

2 

components is 

declared. 

(See 

test 


C36202A. 

) 






(3) 

NUMERIC 

ERROR 

is 

raised when 

an array 

type 

with 


SYSTEM.MAX_INT 

+ 

2 components is 

declared. 

(See 

test 


C36202B.) 

(4) A packed BOOLEAN array having a 'LENGTH exceeding 
INTEGER'LAST raises NUMERIC_ERROR when the array type 
is declared. (See test C52103X.) 

(5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises NUMERICERROR when the 
array type is declared. (See test C52104Y.) 

(6) In assigning one-dimensional array types, the 

expression is evaluated in its entirety before 
CONSTRAINT_ERROR is raised when checking whether the 
expression's subtype is compatible with the target's 
subtype. (See test C52013A.) 

(7) in assigning two-dimensional array types, the 

expression is not evaluated in its entirety before 
CONSTRAINT_ERROR is raised when checking whether the 
expression's subtype is compatible with the target's 
subtype. (See test C52013A.) 

f. A null array with one dimension of length greater than 
INTEGER'LAST may raise NUMERIC_ERROR or CONSTRAINT_ERROR 
either when declared or assigned. Alternatively, an 
implementation may accept the declaration. However, lengths 
must match in array slice assignments. This implementation 
raises NUMERIC_ERROR when the array type is declared. (See 
test E52103Y.) 

g. Discriminated types. 

(1) In assigning record types with discriminants, the 
expression is evaluated in its entirety before 
CONSTRAINT_ERROR is raised when checking whether the 
expression's subtype is compatible with the target's 
subtype. (See test C52013A.) 

h. Aggregates. 


Validation Suaaary Report 

SO-Scicon pic » Ada MC68020 T1.0-02V 


AVF-VSR-90502/48 
Chapter 2 Pape 4 of 6 







CONFIGURATION INFORMATION 


(1) In the evaluation of a multi-dimensional aggregate, the 
test results indicate that all choices are evaluated 
before checking against the index type. (See tests 
C43207A and C43207B.) 

(2) In the evaluation of an aggregate containing 
subaggregates, all choices are evaluated before being 
checked for identical bounds. (See test E43212B.) 

(3) CONSTRAINT_ERROR is raised after all choices are 

evaluated when a bound in a non-null range of a non¬ 
null aggregate does not belong to an index subtype. 
(See test E43211B.) 

i. Pragmas. 

(1) The pragma INLINE is supported for functions or 

procedures. (See tests LA3004A..B (2 tests), 

EA3004C..D (2 tests), and CA3004E..F (2 tests).) 

j. Generics. 

(1) Generic specifications and bodies can be compiled in 
separate compilations. (See tests CA1012A, CA2009C, 
CA2009F, BC3204C, and BC3205D.) 

(2) Generic subprogram declarations and bodies can be 

compiled in separate compilations. (See tests CA1012A 
and CA2009F.) 

(3) Generic library subprogram specifications and bodies 
can be compiled in separate compilations. (See test 
CA1012A.) 

(4) Generic non-library package bodies as subunits can be 
compiled in separate compilations. (See test CA2009C.) 

(5) Generic non-library subprogram bodies can be compiled 
in separate compilations from their stubs. (See test 
CA2009F.) 

(6) Generic unit bodies and their subunits can be compiled 
in separate compilations. (See test CA3011A.) 


Validation Suaaary Report 


AVF-VSR-90502/48 


SD-Scicon pie XD Ada MC68020 T1.0-02V 


Chapter 2 Page 5 of 6 








CONFIGURATION INFORMATION 


(7) Generic package declarations and bodies can be compiled 
in separate compilations. (See tests CA2009C, BC3204C, 
and BC3205D.) 

(8) Generic library package specifications and bodies can 
be compiled in separate compilations. (See tests 
BC3204C and BC3205D.) 

(9) Generic unit bodies and their subunits can be compiled 
in separate compilations. (See test CA3011A.) 

k. Input and output. 

(1) The package SEQUENTIAL_IO cannot be instantiated with 

unconstrained array types or record types with 

discriminants without defaults. (See tests AE2101C, 
EE2201D, and EE2201E.) 

(2) The package DIRECTIO cannot be instantiated with 

unconstrained array types or record types with 

discriminants without defaults. (See tests AE2101H, 
EE2401D, and EE2401G.) 

(3) The director, AJPO, has determined (AI-00332) that 
every call to OPEN and CREATE must raise USEERROR or 
NAMEERROR if file input/output is not supported. This 
implementation exhibits this behavior for 
SEQUENTIAL_IO, DIRECT_IO, and TEXT_IO. 


Validation Suwary Report 


AVF-VSR-90502/48 


SO-Scicon pic XD Ada MC68020 T1.0-02V 


Chapter 2 Page 6 of 6 









TEST INFORMATION 


CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this 
compiler was tested, 43 tests had been withdrawn because of test 
errors. The AVF determined that 550 tests were inapplicable to 
this implementation. All inapplicable tests were processed 
during validation testing except for 159 executable tests that 
use floating-point precision exceeding that supported by the 
implementation. Modifications to the code, processing, or 
grading for 12 tests were required to successfully demonstrate 
the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

TEST 

B 

CLASS 

C 

D 

E 

L 

TOTAL 

Passed 

126 

1133 

1787 

17 

14 

46 

3124 

Inapplicable 

3 

5 

528 

0 

14 

0 

550 

Withdrawn 

1 

2 

34 

0 

6 

0 

43 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 

3.3 SUMMARY 

OF TEST RESULTS BY 

CHAPTER 




RESULT 

2 

3 

4 

5 

6 

CHAPTER 

7 8 

9 

10 

11 

12 

13 

14 

TOTAL 

Pass 

201 

591 

568 

245 

172 

99 

161 

332 

137 

36 

252 

254 

76 

3124 

N/A 

11 

58 

112 

3 

0 

0 

5 

1 

0 

0 

0 

115 

245 

550 

W/D 

1 

1 

0 

0 

0 

0 

0 

1 

0 

0 

1 

35 

4 

43 

TOT 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


Validation Sunary Report 
SD-Scicon pic XS Ada MC68020 T1.0-02V 


AVF-VSR-90502/48 
Chapter 3 Pape 1 of 9 









TEST INFORMATION 


3.4 WITHDRAWN TESTS 

The following 43 tests were withdrawn from ACVC Version 1.10 at 
the time of this validation: 


E28005C 

B97102E 

CD2A62D 

CD2A66A. 

CD2A76A. 

CD2A83G 

CD5011O 

CD7205C 

CD5007B 

ED7005C. 

CD7105A 

CD7204B 

CE2107I 

CE3301A 


D 

D 


(4 tests) 
(4 tests) 


D (2 tests) 


A39005G 

BC3009B 

CD2A63A..D (4 tests) 
CD2A73A..D (4 tests) 
CD2A81G 

CD2A84N..M (2 tests) 

CD2B15C 

CD2D11B 

ED7004B 

ED7006C..D (2 tests) 

CD7203B 

CD7205D 

CE3111C 

CE3411B 


See Appendix D for the reason that each of these tests was 
withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use 
of features that a compiler is not required by the Ada Standard 
to support. Others may depend on the result of another test that 
is either inapplicable or withdrawn. The applicability of a test 
to an implementation is considered each time a validation is 
attempted. A test that is inapplicable for one validation 
attempt is not necessarily inapplicable for a subsequent attempt. 
For this validation attempt, 550 tests were inapplicable for the 
reasons indicated: 

a. The following 159 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX DIGITS: 


C241130. 

. Y 

(11 

tests) 

C35705O..Y 

(11 

tests) 

C357060. 

. Y 

(11 

tests) 

C357070..Y 

(11 

tests) 

C357080. 

.Y 

(11 

tests) 

C358020..Z 

(12 

tests) 

C452410. 

• Y 

(11 

tests) 

C453210..Y 

(11 

tests) 

C454210. 

.Y 

(11 

tests) 

C455210..Z 

(12 

tests) 

C455240. 

.Z 

(12 

tests) 

C456210..Z 

(12 

tests) 

C456410. 

. Y 

(11 

tests) 

C46012O..Z 

(12 

tests) 


Validation Suoaary Report AVF-VSR-90502/48 

SO-Scicon pic XD Ada MC68020 T1.0-02V Chapter 3 Page 2 of 9 









TEST INFORMATION 


b. The following 16 tests are not applicable because 'SMALL 
representation clauses are not supported. 

A39005E C87B62C 

CD1009L CD1C03F 

CD2A53A..E (5 tests) CD2A54A..B (2 tests) 

CD2A54G CD2A54I 

ED2A56A CD2D11A 

CD2D13A 

c. C35702A and B86001T are not applicable because this 
implementation supports no predefined type SHORT_FLOAT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type 
LONG_INTEGER: 

C45231C C45304C C45502C C45503C C45504C 

C45504F C45611C C45613C C45614C C45631C 

C45632C B52004D C55B07A B55B09C B86001W 

CD7101F 

e. C45531M..P (4 tests) and C45532M..P (4 tests) are all 
inapplicable because this implementation has a 'MAXMANTISSA 
of 31 and these tests require the compiler to support a 
greater value. 

f. C4A013B is not applicable because the evaluation of an 
expression involving 'MACHINE_RADIX applied to the most 
precise floating-point type would raise an exception; since 
the expression must be static, it is rejected at compile 
time. 

g. B86001Y is not applicable because this implementation 
supports no predefined fixed-point type other than DURATION. 

h. C86001F is not applicable because package system is used by 
TEXT_IO. 

i. C96005B is not applicable because there are no values of 
type DURATION'BASE that are outside the range of DURATION. 

j. CD1009C, CD2A41A..E (5 tests) and CD2A42A..J (10 tests) are 
not applicable because 'SIZE representation clauses for 
floating-point types are not supported. 

k. The following 25 tests are not applicable because 'SIZE 
representation clauses for array types are not supported. 


AVF-VSR-90502/48 


Validation SuMary Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 


Chapter 3 Page 3 of 9 







TEST INFORMATION 


CD1009E..F (2 tests) CD2A61A..L (12 tests) 

CD2A62A..C (3 tests) CD2A64A..D (4 tests) 

CD2A65A..D (4 tests) 

l. The following 17 tests are not applicable because 'SIZE 
representation clauses for record types are not supported. 

CD1009G CD2A71A..D (4 tests) 

CD2A72A..D (4 tests) CD2A74A..D (4 tests) 

CD2A75A..D (4 tests) 

m. CD1C04C is inapplicable for because this implementation does 
not support model numbers of a derived type that are not 
representable values of the parent type. 

n. CD2A52J and CD2A54J are not applicable because these tests 
require an unsigned representation for a fixed point type; 
this implementation does not support unsigned fixed point 
representation. 

o. CD2A52C..D (2 tests), CD2A52G.,H (2 tests), CDA54C..D (2 
tests) and CD2A54H are not applicable because for this 
implementation the legality of a 'SIZE clause for a derived 
fixed point type can depend on the representation chosen for 
the parent type. 

p. The following 23 tests are not applicable because 'SIZE 
representation clauses for access types are not supported. 

CD2A81A..F (6 tests) CD2A83A..C (3 tests) 

CD2A83E..F (2 tests) CD2A84B..I (8 tests) 

CD2A84K..L (2 tests) ED2A86A 

CD2A87A 

q. CD2A91A..E (5 tests) are not applicable because 'SIZE 
representation clauses for task types are not supported. 

r. CD2B15B is not applicable because this implementation allows 
'STORAGE_SIZE to yield the size requested by the user 

s. CD7004C, CD7005E and CD7006E are all not applicable because 
of other limitations, not specified in the Referance Manual, 
on the use of the pragmas SYSTEM_NAME, STORAGEJJNIT and 
MEMORY_SIZ E. 

t. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record 
types with discriminants without defaults. These 

instantiations are rejected by this compiler. 


Validation Sue 

■ary Report 

AVF-VSR-90502/48 

SO-Scicon pic 

XD Ada MC68020 T1.0-02V 

Chapter 3 Page 4 of 9 









TEST INFORMATION 


u. AE2101H, EE2401D, and EE2401G use instantiations of package 
DIRECT_IO with unconstrained array types and record types 
with discriminants without defaults. These instantiations 
are rejected by this compiler. 

v. The following 236 tests are inapplicable because sequential, 
text, and direct access files are not supported: 


CE2102A..C 

(3 

tests) 

CE2102G..H 

(2 

tests) 

CE2102K 



CE2102N..Y 

(12 

: tests) 

CE2103C..D 

(2 

tests) 

CE2104A..D 

(4 

tests) 

CE2105A..B 

(2 

tests) 

CE2106A..B 

(2 

tests) 

CE2107A..H 

(8 

tests) 

CE2107L 



CE2108A..B 

(2 

tests) 

CE2108C..H 

(6 

tests) 

CE2109A..C 

(3 

tests) 

CE2110A..D 

(4 

tests) 

CE2111A..I 

(9 

tests) 

CE2115A..B 

(2 

tests) 

CE2201A..C 

(3 

tests) 

CE2201F..w 

(9 

tests) 

CE2204A..D 

(4 

tests) 

CE2205A 



CE2208B 



CE2401A..C 

(3 

tests) 

CE2401E.,F 

(2 

tests) 

CE2401H..L 

(5 

tests) 

CE2404A..B 

(2 

tests) 

CE2405B 



CE2406A 



CE2407A..B 

(2 

tests) 

CE2408A..B 

(2 

tests) 

CE2409A..B 

(2 

tests) 

CE2410A..B 

(2 

tests) 

CE2411A 



CE3102A..B 

(2 

tests) 

EE3102C 



CE3102F..H 

(3 

tests) 

CE3102J..K 

(2 

tests) 

CE3103A 



CE3104A..C 

(3 

tests) 

CE3107B 



CE3108A..B 

(2 

tests) 

CE3109A 



CE3110A 



CE3111A..B 

(2 

tests) 

CE3111D..E 

(2 

tests) 

CE3112A..D 

(4 

tests) 

CE3114A..B 

(2 

tests) 

CE3115A 



EE3203A 



CE3208A 



EE3301B 



CE3302A 



CE3305A 



CE3402A 



EE3402B 



CE3402C..D 

(2 

tests) 

CE3403A..C 

(3 

tests) 

CE3403E..F 

(2 

tests) 

CE3404B..D 

(3 

tests) 

CE3405A 



EE3405B 



CE3405C..D 

(2 

tests) 

CE3406A..D 

(4 

tests) 

CE3407A..C 

(3 

tests) 

CE3408A..C 

(3 

tests) 

CE3409A 



CE3409C..E 

(3 

tests) 

EE3409F 



CE3410A 



CE3410C..E 

(3 

tests) 

EE3410F 



CE3411A,C 

(2 tests) 

CE3412A 



CE3413A 



CE3413C 



CE3602A..D 

(4 

tests) 

CE3603A 



CE3604A..B 

(2 

tests) 

CE3605A..E 

(5 

tests) 

CE3606A..B 

(2 

tests) 

CE3704A..F 

(6 

tests) 


Validation Suaaary Report AVF-VSR-90502/48 

SO-Sc icon pic XD Ada MC68020 T1.0-02V Chapter 3 Page 5 of 9 






1 


i 


TEST INFORMATION 


w. 


CE3704M. 

.0 

(3 

tests) 

CE3706D 




CE3706F. 

.G 

(2 

tests) 

CE3804A..P 

(16 

tests) 


CE3805A. 

. B 

(2 

tests) 

CE3806A..B 

(2 

tests) 


CE3806D. 

.E 

(2 

tests) 

CE3806H 




CE3905A. 

.C 

(3 

tests) 

CE3905L 




CE3906A. 

.C 

(3 

tests) 

CE3906E..F 

(2 

tests) 


CE3806G 

and 

CE3901A 

are inapplicable because 

this 

implementation raises 

NAME_ERROR on 

the attempt to 

create 


a text file with a non-null filename. 


x. EE3412C is not applicable because this implementation's body 
of the package REPORT does not use TEXTIO. 

3.6 TEST. PROCESSING. AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of 
code, processing, or evaluation in order to compensate for 
legitimate implementation behavior. Modifications are made by 
the AVF in cases where legitimate implementation behavior 
prevents the successful completion of an (otherwise) applicable 
test. Examples of such modifications include: adding a length 
clause to alter the default size of a collection? splitting a 
Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test 
demonstrate conforming behavior that was not anticipated by the 
test (such as raising one exception instead of another). 

Modifications were required for 15 tests. 

C45524A..N (14 tests) were modified because these tests 
expect that the result of continued division of a real 
number will be zero; the Ada Standard, however, only 
requires that the result be within the type's SAFESMALL of 
zero. Thus, these tests were modified to include a check 
that the result was in the smallest positive safe interval 
for the type. The implementation passed the modified tests. 
Each test was modified by inserting the following code after 
line 138; 

ELSIF VAL <= F'SAFE_SMALL THEN 

COMMENT ("UNDERFLOW IS GRADUAL") 

The following test was split because syntax errors at one point 
resulted in the compiler not detecting other errors in the test: 

B97103E 


AVF-VSR-90502/A8 


Validation Suaaary Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 


Chapter 3 Page 6 of 9 







TEST INFORMATION 


3.7 ADDITIONAL TESTING INFORMATION 

3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 
produced by the VAX/VMS x MC68020 XD Ada compiler was submitted 
to the AVF by the applicant for review. Analysis of these 
results demonstrated that the compiler successfully passed all 
applicable tests, and the compiler exhibited the expected 
behavior on all inapplicable tests. 

3.7.2 Test Method 


Testing of the VAX/VMS x MC68020 XD Ada compiler using ACVC 
Version 1.10 was conducted on-site by a validation team from the 
AVF. The configuration in which the testing was performed is 
described by the following designations of hardware and software 
components: 


Host computer 

Host operating system 
Target computer 

Compiler 

Assembler 

Linker 

Loader/Downloader 
Runtime System 


: VAX Cluster comprising of a VAX 
8600 and seven Micro VAX TIs 
: VMS 5.0 

: MC68020 implemented on a MVME 133 
XT board (bare machine) 

: XD Ada MC68020 T1.0-02V 

: XD Ada MC68020 T1.0-02V 

: XD Ada MC68020 T1.0-02V 

: XD Ada MC68020 T1.0-02V 

: XD Ada MC68020 T1.0-02V 


The host and target computers were linked via a RS232 connector. 

A magnetic tape containing all tests except for withdrawn tests 
and tests requiring unsupported floating-point precisions was 
taken on-site by the validation team for processing. Tests that 
make use of implementation-specific values were customized before 
being written to the magnetic tape. Tests requiring 
modifications during the prevalidation testing were not included 
in their modified form on the magnetic tape. 

The contents of the magnetic tape were loaded directly onto the 
host computer. 

After the test files were loaded to disk, the full set of tests 
was compiled and linked on the VAX Cluster, then all executable 
images were transferred to the MC68020 via the RS232 link and 
run. Results were printed from the host computer. 


Validation Su*aary Report AVF-VSR-90502/48 

SO-Sc icon pic XD Ada MC68020 T1.0-02V Chapter 3 Page 7 of 9 










TEST INFORMATION 


The compiler was tested using command scripts provided by SD- 
Scicon and reviewed by the validation team. The compiler was 
tested using all following option settings 


OPTION 


DEBUG=ALL 


OPT=(TIME,INLINE:NORMAL) 


CHECK 


NOANALYSIS CHECK 


COPY SOURCE 


NODIAGNOSTICS 


LIST 


NOMACHINE CODE 


NOTE SOURCE 


SHOW = PORTABILITY 


NOSYNTAX ONLY 


EFFECT 

Both debugger symbol records and 
traceback information are included 
in the object file 

Provides full optimisation with 
time as primary objective and also 
provides normal subprogram 
expansion 

Overrides all the suppressing 
programs in the source code 

No cross reference file is created 


Creates a file containing a copy 
of the source code when errors are 
found 

Does not create a file to contain 
the diagnostic messages from the 
computer 

A Listing file is created 


No machine code to be included in 
he Listing file 

Note's the file specification or 
the source code in the program 
1ibrary 

Includes a program portability 
summary in the Listing file 

The compiler performs all checks 
on the source code 


Tests were compiled, linked, and executed (as appropriate) using 
a cluster of 8 computers and 2 target computers. Test output, 
compilation listings, and job logs were captured on magnetic 


Validation Suaaery Report 

SO-Sc icon pic XD Ada MC68020 T1.0 -02V 


AVF-VSR 90502/48 
Chapter 3 Page 8 of 9 








TEST INFORMATION 


media and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 

3.7.3 Test Site 

Testing was conducted at SD-Scicon pic, Pembroke House, Pembroke 
Broadway, Camberley, Surrey and was completed on 21 March 1989. 


Validation StMaary Report AVF-VSR-90502/48 

SD-Scicon pic XD Ada MC68020 T1.0-02V Chapter 3 Pape 9 of 9 









DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 


SD-Scicon pic has submitted the following Declaration of 
Conformance concerning the XD Ada MC68020 T1.0-02V compiler. 


Validation St—ary Report AVF-VSR-90502/48 

SO-Scicon pic XD Ada MC68020 T1.0-02V Appendix A Page 1 of 3 






DECLARATION OF CONFORMANCE 


DECLARATION OF CONFORMANCE 
Compiler Implementor: SD-Scicon pic 

Ada Validation Facility: The National Computing Centre 

Oxford Road 
Manchester Ml 7ED 
England 

Ada Compiler Validation Capability (ACVC) Version: 1.10 

Base Configuration 

Base Compiler Name: 

Host Architecture: 


Host OS and Version: 
Target Architecture: 


Implementor's Declaration 

I, the undersigned, representing SD-Scicon pic, have 
implemented no deliberate extensions to the Ada Language 
Standard ANSI/MIL-STD-1815A in the compiler(s) listed in 
this declaration. I declare that SD-Scicon pic is the 
owner of record of the Ada language compiler(s) listed 
above and, as such, is responsible for maintaining said 
compiler(s) in conformance to ANSI/MIL-STD-1815A. All 
certificates and registrations for Ada language compiler(s) 
listed in this declaration shall be made only in the 
owner's corporate name. 

(/l^V—. _Date : 2 I / E / 



XD Ada MC68020 T1.0-02V 
VAX CLUSTER comprising of a 
VAX 8600 and seven MicroVAX 
II's 
VMS 5.0 

MC68020 inplemented on the 
MVME 133 XT board (bare 
machine) 


Validation Suaaary Report 
SD-Scicon pic XD Ada MC68020 T1.0-02V 


AVF-VSR-90502/48 
Appendix A Page 2 of 3 









DECLARATION OF CONFORMANCE 


Owner's Declaration 

I, the undersigned, representing SD-Scicon pic, take full 
responsibility for implementation and maintenance of the 
Ada compiler(s) listed above, and agree to the public 
disclosure of the final Validation Summary Report. I 
declare that all of the Ada language compilers listed, and 
their host/target performance, are in compliance with the 
Ada Language Standard ANSI/MIL-STD-1815A. 



AVF-VSR-90502/48 


Validation Suaaary Report 

SO-Scicon pic M> Ada MC68020 T1.0-02V 


Appendix A Pape 3 of 3 









APPENDIX F 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent 
conventions as mentioned in chapter 13 of the Ada Standard, and 
to certain allowed restrictions on representation clauses. The 
implementation-dependent characteristics of the XD Ada MC68020 
T1.0-02V compiler, as described in this Appendix, are provided 
by SD-Scicon pic. Unless specifically noted otherwise, 
references in this appendix are to compiler documentation and 
not to this report. Implementation-specific portions of the 
package STANDARD, which are not a part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORTINTEGER is range -32768 .. 32767; 
type SHORT_SHORT_INTEGER is range -128 .. 127; 

type FLOAT is digits 6 range -(2**128 - 2**104) .. 

2**128 - 2**104; 

type LONG_FLOAT is digits 15 range -(2**1024 - 2**971) .. 

2**1024 - 2**971; 

type DURATION is delta l.E-4 range -131072.0000 . 

131071.9999; 


end STANDARD; 


Validation Suaaary Report 


AVF-VSR-90502/46 


SO-Scicon pic XD Ada MC68020 T1.0-02V 


Appendix B 





Appendix F 

Implementation-Dependent 

Characteristics 


NOTE 

This appendix is not part of the standard definition of the 
Ada programming language. 

This appendix summarizes the following implementation-dependent 

characteristics of XD Ada: 

• Listing the XD Ada pragmas and attributes. 

• Giving the specification of the package SYSTEM. 

• Presenting the restrictions on representation clauses and unchecked 
type conversions. 

• Giving the conventions for names denoting implementation- 
dependent components in record representation clauses. 

• Giving the interpretation of expressions in address clauses. 

• Presenting the implementation-dependent characteristics of the 
input-output packages. 

• Presenting other implementation-dependent characteristics. 


Implementation-Dependent Characteristics F-l 



F.1 Implementation-Dependent Pragmas 

XD Ada provides the following pragmas, which are defined elsewhere 
in the text. In addition, XD Ada restricts the predefined language 
pragmas INLINE and INTERFACE, replaces pragma SHARED with 
pragma VOLATILE, and provides pragma SUPPRESS.ALL in addi¬ 
tion to pragma SUPPRESS. See Appendix B for a descriptive pragma 
summary. 

• EXPORT.EXCEPTION (see Section 13.9a.3.2) 

• EXPORT.FUNCTION (see Section 13.9a 1.2) 

• EXPORT.OBJECT (see Section 13.9a.2.2) 

• EXPORT.PROCEDURE (see Section 13.9a. 1.2) 

• IMPORT.EXCEPTION (see Section 13.9a.3.1) 

• IMPORT.FUNCTION (see Section 13.9a.1.1) 

• IMPORT.OBJECT (see Section 13.9a.2.1) 

• IMPORT.PROCEDURE (see Section 13.9a.1.1) 

• LEVEL (see Section 13.5.1) 

• LINK.OPTION (see Appendix B) 

• MACHINE.CODE.PROCEDURE (see Section 13.8) 

• SUPPRESS.ALL (see Section 11.7) 

• TITLE (see Annex B) 

• VOLATILE (see Section 9.11) 


F.2 Implementation-Dependent Attributes 

XD Ada provides the following attributes, which are defined elsewhere 
in the text. See Appendix A for a descriptive attribute summary. 

• BIT (see Section 13.7.2) 

• MACHINE.SIZE (see Section 13.7 2 ) 

• TYPE.CLASS (see Section 13.7a.2) 


F-2 Implementation-Dependent Characteristics 





i 


F.3 Specification of the Package System 

The package SYSTEM for the MC68020 is as follows: 


F.3.1 Package System for MC68020 Target 


package SYSTEM is 

type NAME is IMC8302C, MIL_STD_1'SOA I; 


SYSTEM_NAME 

STORAGE_UNIT 

MEMORY_SIZE 

MIN_INT 

MAX_INT 

MAX~DIGITS 

MAX~MANTISSA 

FINE_DELTA 

tick - 


constant 

constant 

constant 

constant 

constant 

constant 

constant 

constant 

constant 


NAME 
:= 8 ; 


MC68020; 


2**32; 

-(2**31); 

2 * * 3 1 - 1 ; 

18 ; 

31; 

2.0* *(-31); 
162.SE-6 


subtype PRIORITY is INTEGER rang# 0 .. 
subtype LEVEL is INTEGER ranga 0 .. 7; 


18; 


type ADDRESS_INT is ranga MIN_INT .. MAX_INT; 
Address type 


typa ADDRESS is private; 

ADDRESS_ZERO : constant ADDRESS; 

function TO_ADDRESS (ACDP. t universai_integer t return 


ADDRESS; 


function C0NVERT_ ADDRESS ( ADDR : ADDRESS) return AII = SSS_ I :.T; 
function CONVERT^ ADDRESS (ADDR : ADDRE5S_ ItIT) rstum .ADDRESS; 


function •+' (LEFT • »F;PRESS; RIGHT : ADDRESS_INT) return ADDRESS; 
function (LEFT : ADDRES5_I NT; RIGHT : ADDRESS I return ADDRESS; 


function 


(LEFT : 

ADDRESS 

RIGHT : 

ADDRESS) return ADD 

function 

" - " 

(LEFT ; 

ADDRESS 

RIGHT : 

ADDRESS_ INT I return 

-- function 


(LEFT, 

RIGHT : 

ADDRESS) 

return BOCLEA- - : 


function 

"/ = * 

(LEFT, 

RIGHT : 

ADDRESS) 

rnturn BOCLEA-': 


function 


(LEFT, 

RIGHT ! 

ADDRESS) 

return BOCLEA-': 


function 

"<«* 

(LEFT, 

RIGHT : 

ADDRESS) 

return BOOLE.-.': 


function 


(LEFT, 

RIGHT •• 

ADDRESS) 

return BOOLEA-V 


function 


(LEFT, 

RIGHT : 

ADDRESS) 

rnturn BOOLE 1 -'.' 



Note that because ADDRESS is a private type 
-- the functions *«* and */«“ are already available 

— Generic functions used to access memory 


lmplementa(ic'' DeDe"3ent Characteristics F-3 












generic 

type TARGET 1* private; 

function FETCH_FROM_ADDRESS IA ; ACTRESSi return TAR JET: 
genarlc 

type TARGET l» private; 

procoduro ASS1GN_TC_ADDRESS (A : ADDRESS; T : TAR 1ET >; 

type TYPE_CLASS la fTYPE_CLASS_ENUMERATIIN, 

TYPE_CLASS_INTEGER, 

TYPE_CLASS_FIXED_P'I»T, 

type”class”flcatThg_f-: int , 

TYPE_CLASS_ARRAY, 

TYPE_CLASS_RECORD, 

TYPE_CLASS_ACCESS, 

TYPE_CLASs”tASK, 

TYPE_GLASS_ADDRESS); 

XD Ada hardware-oriented types and functions 

typo BIT_ARRAY la array (INTEGER range <>) of BOOLEAN; 

pragma PACK!BIT_ARRAY); 

aubtype BIT_ARRAY_8 ia BIT_ARRAY (C .. 7); 

aubtypm BIT”ARRAY_16 la BIT_ARRAY (0 .. 15); 

aubtypa BIT_ARRAY_32 la BIT_ARRAY (0 .. 311; 

aubtypm B1t”aRRAY~64 la BIt”aRRAY (0 .. 63); 

typo UNSIGNED_SYTi la range 0 .. 255; 

for UNSIGNEd”bYTE'SIZE uaa 8; 

function "not" (LEFT ; 'JNSIGNED_BYTE I return UNSIGNED_BYTE; 

function -and- (LEFT, RIGHT : UNSIGNED_BYTE ) return UNSIGNED”BYTE; 

function -or- (LEFT, RIGHT : UNSISNEd’byTE ) return UNSIGNEd”bYTE; 

function -xor- (LEFT, RIGHT : UNSIGNED”byTE) return UNSIGNEd”bYTE ; 

function TO_UNSIGNED_BYTE (LEFT : BIT_ARRAY_“) return UNSIGNED_BYTE; 
function To”biT_ARRAY_8 (LEFT : UNSIGNED_BYTE) return BIT_ARRAY_8; 
type UNSIGHED_BYTE_ARRAY la array (INTEGiR range <>) of UNSIGNED_BYTE: 
type UNS1GNED_W0RD la range 0 .. 65535; 

for UNSIGNED_WORD'SIZE uae 16; 

function -not" (LEFT : UNSIGNED_W0RrI return UNSIGNED_WCRD; 

function "and' (LEFT, RIGHT : UNSIGNEd'wcrdI return ’JNSIGNED^WCRD; 

function -or" (LEFT, RIGHT ; UNSIGHEd”word i return UNS I 3NED”wCRD; 

function -xor" (LEFT, RIGHT : UNSIGNED”WORD) return UNSIGNEo”wORD; 

function T0_UNSIGNED_W9RD (LEFT : SIT_ARRAY_15 t return UNSIGNED_WORD; 
function To”3IT_ARPAY_16 (LEFT : UNS1 GNED_wopd< return BIT_ARRAY_1S; 
type UNSIGNiD_WORD_ARRAY la array (INTEGER range <>| of U!ISIGNEc”wORD; 


type UNS IGN ED_LONGWORD ia range MIN_INT .. MAX_INT; 

function -not- (LEFT : UNS I GtlED_ LONGWORD)' return UNSIGNED_LONGWORD; 
function "and" (LEFT, RIGHT : UNS I GNED_ LONGWORD) return UN 51GIIED^ LONGWORD; 
function -or- (LEFT, RIGHT : UNSIGNED_LONGWCRD) return 'JNS I GNEo” LONGWORD; 
function -xor- (LEFT, RIGHT : UNSIGNED_LONGWCRD) return UNSIGNED^LONGWORD; 


F-4 Impiennentation-Dependent Characteristics 




function TO,UNSIGNED,LCNGWCRD (LEFT : BIT_ARRAY_ 32 I rsturs .NSIGNED, 
function TO~SIT_ARRAV_ 32 (LEFT : UNS !GNED,WCPr I rot urn ?: T,-PPAY, 3 .'7 
typo aNSIG(JED_LCNGW'-'RD_ARRAV la array (INTEGER rang# of UNSIGNED 


Conventional names for 

static subtypes of 

t yp e 

u: 

s: 

jne: 


aubtypo 

UNSIGNED^ 

1 

la 

UNSIGNED^ 

L 'fJGW . RD 

range 



** • 


aubtypo 

UNSICLDD^ 

z 

Is 

UNSIGNED^ 

L'fl'jWCRD 

range 



2 • 

: 

aubtypo 

UNSIGNED^ 

3 

la 

UNSIGNED^ 

LONGWORD 

range 



z * 

: - : 

aubtypo 

UNSI GNEQ_ 

4 

Is 

UNSIGNED^ 

LONGWORD 

range 



: • 

4 - . 

aubtypo 

UNSIGNED 

5 

la 

UNSIGNED^ 

LONGWORD 

range 



;* 

c. _ • 

aubtypo 

UNSIGNED^ 

A 

la 

UNSIGNED 

LONGWORD 

range 

7 


2 * 

t _ • 

aubtypo 

UNSIGNED^ 

7 

Is 

UNSIGNED^ 

LONGWORD 

range 



2 * 

“ -: 

aubtypo 

UNSIGNED^ 

8 

Is 

UNSIGNED 

LONGWORD 

range 



2 * 

t- : 

aubtypo 

UNSIGNED^ 

9 

Is 

UNSIGNED 

LONGWORD 

range 

■A 


2 * 

-- ■_ 

aubtypo 

UNSIGNED^ 

10 

Is 

UNSIGNED 

LONGWORD 

range 

A 


2 * 

1 : - 1 

oubtypo 

UNSIGNED^ 

11 

Is 

UNSIGNED 

LONGWORD 

range 

A 


2 * 

11 -: 

subtypo 

UNSIGNED, 

12 

Is 

UNSIGNED 

LONGWORD 

range 

A 


2 * 

i:-: 

subtypo 

UNSIGNED^ 

13 

la 

UNSIGNED, 

LONGWORD 

range 

A 


2' 

1;-: 

subtypo 

UNSIGNED, 

14 

Is 

UNSIGNED 

LONGWORD 

range 

A 


2* 

14-: 

subtypo 

UNSIGNED^ 

IS 

Is 

UNSIGNED, 

LONGWORD 

range 

0 


2* 

i;.; 

aubtypo 

UNSIGNED, 

16 

Is 

UNSIGNED, 

LONGWORD 

range 

A 


2* 

16-1 

aubtypo 

UNSIGNED 

17 

Is 

UNSIGNED, 

LONGWORD 

range 

r 


2* 

i'-i 

subtypo 

UNSIGNED 

18 

la 

UNSIGNED, 

LONGWORD 

range 

A 


2* 

i?-i 

subtypo 

UNSIGNED 

19 

Is 

UNSIGNED 

LONGWORD 

range 

A 


2* 

19-1 

subtypo 

UNSIGNED 

20 

la 

UNSIGNED 

LONGWORD 

range 

0 


2* 

20-1 

subtypo 

UNSIGNED, 

21 

Is 

UNSIGNED 

LONGWORD 

range 

0 


2* 

21-1 

subtypo 

UNSIGNED, 

22 

Is 

UNSIGNED^ 

LONGWORD 

range 

A 


2* 

22- 

subtypo 

UNSIGNED 

23 

Is 

UNSIGNED, 

LONGWORD 

range 

A 


2* 

2 3 - 

aubtypo 

UNSIGNED 

24 

Is 

UNSIGNED 

LONGWORD 

range 

A 


2* 

24- 

subtypo 

UNSIGNED 

25 

Is 

UNSIGNED 

LONGWORD 

range 

A 


2* 

71 _ 

subtypo 

UNSIGNED 

26 

la 

UNSIGNED^LONGWORD 

range 

r. 


2* 

26- 

aubtypo 

UNSIGNED 

27 

Is 

UNSIGNED,LONGWORD 

range 

A 


2* 

: 

subtypo 

UNSIGNED 

28 

Is 

UNSIGNED,LONGWORD 

range 

A 


2* 

2 c - 

aubtypo 

UNSIGNED, 

29 

Is 

UNSIGNED,LONGWORD 

range 

r> 


2* 

: 

subtypo 

UNSIGNED 

30 

is 

UNSIGNED, 

LONGWORD 

range 

‘7 


2 * 

3 ? - 

subtypo 

UNSIGNED 

31 

is 

UNSIGNED, 

LONGWORD 

range 

“ 

.. 

2* 

1 - 


private 

— Not shown 
and SYSTEM; 


LONGWORD; 

_ LONGWORD; 


Implementation-Dependent Characteristics F-5 












F.4 Restrictions on Representation Clauses 


The representation clauses allowed in XD Ada are length, enumeration, 
record representation, and address clauses 

In XD Ada. a representation clause for a eenenc formal tvpe or a type 
that depends on a generic formal type is not allowed. In addition, a 
representation clause for a composite type that has a component or 
subcomponent of a generic formal type or a type derived from a generic 
formal type is not allowed. 

Restrictions on length clauses are specified in 13 2; restrictions on 
enumeration representation clauses are specified in Section 13.3; and 
restrictions on record representation clauses are specified in Section 
13.4. 


F.5 Conventions for Implementation-Generated Names 
Denoting Implementation-Dependent Components in 
Record Representation Clauses 

XD Ada does not allocate implementation-dependent components in 
records. 


F.6 Interpretation of Expressions Appearing in Address 
Clauses 

Expressions appearing in address clauses must be of the type ADDRESS 
defined in package SYSTEM (see Section 13 7a. 1 and Section F.3). 

XD Ada allows address clauses for variables (see Section 13.5). For 
address clauses on variables, the address expression is interpreted as a 
Motorola full 32-bit address. 

XD Ada supports address clauses on task entries to allow interrupts to 
cause a reschedule directly. For address clauses on task entries, the 
address expression is interpreted as a Motorola exception vector offset. 


F-6 Implementation-Dependent Characteristics 








In XD Ada for the MC68020 family, value* of tvpe SYSTEM ADDRESS 
are interpreted as integers in the range 0 2 X - -1 As SYSTEM ADDRESS 

is a private type, the only operation* allowed on 'Ejects of this type are 
those given in package SYSTEM 


F.7 Restrictions on Unchecked Type Conversions 

XD Ada supports the generic function UNCHECKED.CONVERSION 
with the restrictions given in Section 13 10.2. 

F.8 Implementation-Dependent Characteristics of 
Input-Output Packages 

The packages SEQUENTIAL.IO and D1RECTJO are implemented as 
null packages that conform to the specification given in the LRM. The 
packages raise the exceptions specified in Chapter 14 of the LRM. The 
two possible exceptions that are raised by these packages are given 
here, in the order in which they are raised. 


Exception 

When Raised 

STATUS.ERROR 

Raised by an attempt to operate upon a file that is 
not open (no files can be opened). 

USE.ERROR 

Raised if exception STATUS.ERROR is not raised. 


MODE_ERROR cannot be raised since no file can be opened (therefore 
it cannot have a current mode) and NAME.ERROR cannot be raised 
since there are no restrictions on file names. 


The predefined package LOW_LEVEL_IO is not provided. 


Implementat'on-DeDe'dent Characteristics F-7 





F.8.1 Th® Package TEXTJO 

The package TEXT.IO conforms to the specification given in the LRM 
String input-output is implemented as defined File input-output is 
supported to STANDARD.INPUT and STANDARD_OUTPUT only 
The possible exceptions that are raised bv package TEXTJO are as 
follows: 


Exception 

When Raised 

STATUS.ERROR 

Raised by an attempt to operate upon a file that is 
not open (no files can be opened). 

MODE.ERROR 

Raised by an attempt to read from, or test for 
the end of. STANDARD OUTPUT, or to write to 

ST ANDARD.INrUT 

END.ERROR 

Raised bv an attempt to read past the end of 

ST ANDARD.INTUT 

USE.ERROR 

Raised when an unsupported operation is attempted 
that would otherwise be legal. 


NAME_ERROR cannot be raised since there are no restrictions on file 
names. 

The type COUNT is defined as follows: 

typ* COUNT ii rang* 0 .. INTEGER’LAST; 

The subtype FIELD is defined as follows 

typ* FIELD ta INTEGER rang* C .. 13:: 


F.8.2 The Package lO.EXCEPTIONS 

The specification of the package IO_EXCEPT!ONS is the same as that 
given in the LRM. 


F.9 Other Implementation Characteristics 

Implementation characteristics associated with the definition of a main 
program, various numeric ranges, and implementation limits are sum¬ 
marized in the following sections. 


F-8 Implementation-Dependent Characteristics 











F.9.1 Definition of a Main Program 

Anv library procedure can be u«ed a« a main program provided that it 
has no formal parameters 


F.9.2 Values of Integer Attributes 

The ranges of values for integer types declared in package STANDARD 


are as follows: 




SHORT SHORT 1NTECER 

V 

. 1 

1-128 127) 

SHORT INTEGER 

_ V' 

.. 2’"' -1 

(-32768 . 327b7) 

INTEGER 

2 " 

.. 2‘ -1 

1-2147483648 .. 2147483647) 

For the package TEXTJO, the range of 
FIELD are as follows: 

values for ty pes COUNT and 

COUNT 

0. 

. 2' 1 -1 

(0 . 2147483647) 

FIELD 

0. 

. 132 



F.9.3 Values of Floating-Point Attributes 

Floating-point types are described in Section 3.5 7. The representation 
attributes of floating-point types are summarized in the following table 


Implementation-Dependent Characteristics F-9 






FLOAT 

LONG.FLOAT 

LONG J.ONG.FLOAT 

DIGITS 

b 

1A 

18 

SIZE 

32 

b4 

% 

MANTISSA 

21 

51 

61 

EMAX 

84 

204 

244 

EPSILON 

2 - ; " 


2- M ' 

SMALL 


-»- >' ,r ' 

2 - ; r, 

LARGE 

2"* _ 2“ 1 

2 ; ' u _2 : ' 

2 :j ' i -2 : “ 1 

SAFE.EMAX 

125 

1021 

16382 

SAFE.SMALL 

r ,:. 

2-".. 

2~ IhTKT 

SAFE.LARCE 

2i:* 2 104 

2 in;: -,-tTn 

2»A32' 

FIRST 

- ( 2’-V2’ ft4 ) 

-l2 ,n:i -2'‘ 7 ') 


LAST 

2 ■:» i \ 

2’" :j -2 - ' 7 ' 

2lhTR4 

MACHINE.RADIX 

2 

2 

2 

MACHINE.MANT1SSA 

24 

53 

64 

MACHINE.EMAX 

128 

1024 

16384 

► 1ACHINE.EMIN 

-125 

-1021 

-16382 

MACHINE.ROUNDS 

FALSE 

FALSE 

FALSE 

MACHINEOVERFLOWS 

FALSE 

FALSE 

FALSE 


F-10 Implementation-Dependent Characteristics 








F.9.4 Attributes of Type DURATION 

The values of the significant attributes of type DURATION are as 
follows: 

DURATION'DELTA 1 E-4 (Hr 1 ! 

DURATION'SMALL 2*1.0«E-14 (2^ J I 

DURATION'FIRST -131072.0000 i-2 : ) 

DURATION'LAST 131071 WO '2 I? - 'DELTA) 

F.9.5 Implementation Limits 

Limit Description 

120 Maximum identifier length (number of characters) 

120 Maximum number of characters in a source line 

2 10 Maximum number of library units and subunits in a compilation 

closure 1 

2 12 Maximum number of library units and subunits in an execution 

closure"' 

2 1 '' -1 Maximum number of enumeration literals in an enumeration 

type definition 

2'* -1 Maximum number of lines in a source file 

2” -1 Maximum number of bits in any object 

2”' -1 Maximum number of exceptions 

’The compilation closure of a given unit is the total set of units that the given unit 
depends on. directly and indirect!) 

"The execution closure of a given unit is the compilation closure plus all associated 
secondary units 


Implementation-Dependent Characteristics P-11 






TEST PARAMETERS 


APPENDIX C 


TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent 
values, such as the maximum length of an input line and invalid 
file names. A test that makes use of such values is identified 
by the extension . TST in its file name. Actual values to be 
substituted are represented by names that begin with a dollar 
sign. A value must be substituted for each of these names before 
the test is run. The values used for this validation are given 
below: 

Name and Meanina 

Value 

$ACC_SIZE 

An integer literal whose value is the 
number of bits sufficient to hold any 
value of an access type. 

32 

$BIG ID1 

Identifier the size of the maximum 
input line length with varying last 
character. 

(1..254=>'A', 255=>i) 

$BIG_ID2 

Identifier the size of the maximum 
input line length with varying last 
character. 

(1. .254=>'A', 255=>2) 

$BIG_ID3 

Identifier the size of the maximum 
input line length with varying middle 
character. 

(1..127=>'A', 128=>3, 

129..255=> ' A ' ) 

$BIG_ID4 

Identifier the size of the maximum 
input line length with varying middle 
character. 

(1. .127=>'A', 128=>4, 

129..255=> ' A ' ) 

$BIG_INT_LIT 

An integer literal of value 298 with 
enough leading zeroes so that it is 
the size of the maximum line length 

(1. . 2 52=>0, 

253..255=>298 ) 

Validation Sunary Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 

AVF-VSR-90502/48 

Appendix C Page 1 of 6 








TEST PARAMETERS 


$BIG_REAL_LIT (1..249=>0, 

A universal real literal of value 250..255=>69.0E1) 
690.0 with enough leading zeroes to 
be the size of the maximum line 
length. 

$BIG_STRING1 (1..127=>'A') 

A string literal which when catenated 
with BIG_STRING2 yields the image of 
BIG_ID1. 

$BIG_STRING2 (1..127=>•A', 128=>1) 

A string literal which when catenated 
to the end of BIG_STRING1 yields the 
image of BIGIDl. 

$BLANKS (1..235=>' •) 

A sequence of blanks twenty 
characters less than the size of the 
maximum line length. 

$COUNT_LAST 2147483647 

A universal integer literal whose 
value is TEXT_I0.COUNT'LAST. 

$ DE FAULT_MEM_SIZE 2147483647 

An integer literal whose value is 
S YSTEM.MEMORY_SIZ E. 

$DEFAULT_STOR_UNIT 8 

An integer literal whose value is 
SYSTEM.STORAGE_UNIT. 

$ DE FAU LT_S YS_NAME MC68020 

The value of the constant 
SYSTEM.SYSTEM_NAME. 

$DELTA_DOC 2#1.0#E-31 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

$FIELD_LAST 255 

A universal integer literal whose 
value is TEXT_IO.FIELD'LAST. 

$ FIXED_NAME NO_SUCH_TYPE 

The name of a predefined fixed-point 
type other than DURATION. 


Validation Suaaary Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 


AVF-VS*-90502/46 
Appendix C Pape 2 of 6 







TEST PARAMETERS 


$FLOAT_NAME LONG__LONG_FLOAT 

The name of a predefined floating¬ 
point type other than FLOAT, 

SHORT_FLOAT, or LONG_FLOAT. 

$GREATER_THAN_DURATION 131072.0 

A universal real literal that lies 
between DURATION'BASE'LAST and 
DURATION' LAST or any value in the 
range of DURATION. 

$ GREATER_THAN_DURATION_BAS E_LAST 131073.0 

A universal real literal that is 
greater than DURATION'BASE'LAST. 

$HIGH_PRIORITY 15 

An integer literal whose value is the 
upper bound of the range for the 

subtype SYSTEM.PRIORITY. 

$ILLEGAL_EXTERNAL_FILE_NAME1 THERE ARE NO ILLEGAL 

An external file name which contains FILENAMES 
invalid characters. 

$ILLEGAL_EXTERNAL_FILE_NAME2 N/A 

An external file name which is too 
long. 

$INTEGER_FIRST -2147483648 

A universal integer literal whose 

value is INTEGER'FIRST. 

$INTEGER_LAST 2147483647 

A universal integer literal whose 

value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 2147483648 

A universal integer literal whose 

value is INTEGER'LAST+1. 

$ LES S_THAN_DURATION -131072.0 

A universal real literal that lies 
between DURATION'BASE'FIRST and 

DURATION' FIRST or any value in the 
range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST -131073.0 

A universal real literal that is less 
than DURATION'BASE'FIRST. 


AVF-VS8-90502/48 


Validation Scenery Report 

SO-Scicon pic XD Ada MC68020 T1.0-02V 


Appendix C Pape 3 of 6 








TEST PARAMETERS 


$LOW_PRIORITY 0 

An integer literal whose value is the 
lower bound of the range for the 
subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 31 

An integer literal whose value is 
SYSTEM.MAX_MANTIS SA. 

$MAX_DIGITS 18 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 255 

Maximum input line length permitted 
by the implementation. 

$MAX_INT 2147483647 

A universal integer literal whose 
value is SYSTEM.MAX_INT. 

$MAX_INT_PLUS_1 2147483648 

A universal integer literal whose 
value is SYSTEM.MAX_INT+1. 

$MAX_LEN_INT_BASED_LITERAL 

A universal integer based literal 
whose value is 2#11# with enough 
leading zeroes in the mantissa to be 
MAX_IN_LEN long. 

$MAX_LENJREAL_BASED_LITERAL 

A universal real based literal whose 
value is 16:F.E: with enough leading 
zeroes in the mantissa to be 
MAX_IN_LEN long. 

$MAX_STRING_LITERAL (1=>"", 2..254=>'A\ 

A string literal of size MAX_IN_LEN, 255=>"") 

including the quote characters. 

$MIN_INT -2147483648 

A universal integer literal whose 
value is SYSTEM.MIN INT. 


AVF-VSR-90502/48 


( 1 .. 3 =>' 16 :' 

4.. 251=>'0', 

252.. 255=>'F.E:') 


( 1 .. 2 =>' 2 :', 

3. . 252=>'0', 

253..255=> 1 11:') 


Validation Suaaary Report 

SD-Scicon pic XD Ada MC68020 T1.0-02V 


Appendix C Page A of 6 











TEST PARAMETERS 


$MIN_TASK_SIZE 

An integer literal whose value is the 
number of bits required to hold a 
task object which has no entries, no 
declarations, and "NULL;” as the only 
statement in its body. 


$NAME 

A name of a predefined numeric type 
other than FLOAT, INTEGER, 
SHORT_FLOAT, SH0RT_INTEGER, 
LONG_FLOAT, or LONG_INTEGER. 

$NAME_LIST 

A list of enumeration literals in the 
type SYSTEM.NAME, separated by 
commas. 

$NEG_BASED_INT 

A based integer literal whose highest 
order nonzero bit falls in the sign 
bit position of the representation 
for SYSTEM.MAX_INT. 

$ NEW_MEM_SIZE 

An integer literal whose value is a 
permitted argument for pragma 
memory_size, other than 
$DEFAULT_MEM_SIZE. If there is no 
other value, then use 
$ DE FAULT_MEM_SIZE. 

$NEW_STOR_UNIT 

An integer literal whose value is a 
permitted argument for pragma 
storageunit, other than 
$DEFAULT_STOR_UNIT. If there is no 
other permitted value, then use value 
Of SYSTEM.STORAGE_UNIT. 

$NEW_SYS_NAME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYS_NAME. If 
there is only one value of that type, 
then use that value. 


Validation Suamry 8sport 


SHORT SHORT INTEGER 


MC68020 


16#FFFF FFFF# 


123456 


8 


MC68020 


AVF-VSR*90502/48 


SO - Sc f con pic XD Ada MC68020 T1.0-02V 


Appendix C Page 5 of 6 







TEST PARAMETERS 


$TASK_SIZE 32 

An integer literal whose value is the 
number of bits required to hold a 
task object which has a single entry 
with one inout parameter. 

$TICK 162.5E-6 

A real literal whose value is 
SYSTEM.TICK. 


Validation Suaaary Report AVF-VSR-90502/48 

SO-Scicon pic XD Ada MC68020 T1.0-02V Appendix C Page 6 of 6 







WITHDRAWN TESTS 


APPENDIX D 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not 
conform to the Ada Standard. The following 43 tests had been 
withdrawn at the time of validation testing for the reasons 
indicated. A reference of the form Al-ddddd is to an Ada 
Commentary. 

E28005C This test expects that the string "— TOP OF PAGE. - 
-63” of line 204 will appear at the top of the listing 
page due to a pragma PAGE in line 203; but line 203 
contains text that follows the pragma, and it is this 
that must appear at the top of the page. 

A39005G This test unreasonably expects a component clause to 
pack an array component into a minimum size (line 30). 

B97102E This test contains an unitended illegality: a select 
statement contains a null statement at the place of a 
selective wait alternative (line 31). 

BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even 
though none of the units is illegal with respect to 
the units it depends on; by AI-00256, the illegality 
need not be detected until execution is attempted (line 
95) . 

CD2A62D This test wrongly requires that an array object's size 
be no greater than 10 although its subtype's size was 
specified to be 40 (line 137). 

CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A76A..D [16 tests] 

These tests wrongly attempt to check the size of 
objects of a derived type (for which a 'SIZE length 
clause is given) by passing them to a derived 
subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, 
they use the 'SIZE length clause and attribute, whose 
interpretation is considered problematic by the WG9 
ARG. 

CD2A81G, CD2A83G, CD2A84N & M, & CD50110 [5 tests] 

These tests assume that dependent tasks will terminate 
while the main program executes a loop that simply 


Validation Sta 

■ary Report 

AVF-VSR-90502/48 

SO-Scicon pic 

VAX/VMS x MC68020 XD Ada 

APPENDIX D Page 1 of 3 







WITHDRAWN TESTS 


tests for task termination; this is not the case, and 
the main program may loop indefinitely (lines 74, 85, 
86 & 96, 86 & 96, and 58, resp.). 

CD2B15C & CD7205C 

These tests expect that a 'STORAGE_SIZE length clause 
provides precise control over the number of designated 
objects in a collection; the Ada standard 13.2:35 
allows that such control must not be expected. 

CD2D11B This test gives a SMALL representation clause for a 
derived fixed-point type (at line 30) that defines a 
set of model numbers that are not necessarily 
represented in the parent type; by Commentary AI-00099, 
all model numbers of a derived fixed-point type must 
be representable values of the parent type. 

CD5007B This test wrongly expects an implicitly declared 
subprogram to be at the the address that is specified 
for an unrelated subprogram (line 303). 

ED7004B, FD7005C & D, ED7006C & D [5 tests] 

These t^sts check various aspects of the use cf the 
three SYSTEM pragmas; the AVO withdraws these tests 
as being inappropriate for validation. 

CD7105A This test requires that successive calls to 
CALENDAR.CLOCK change by at least SYSTEM.TICK; however, 
by Commentary AI-00201, it is only the expected 
frequency of change that must be at least SYSTEM.TICK- 
-particular instances of change may be less (line 29). 

CD7203B, & CD7204B 

These tests use the 'SIZE length clause and attribute, 
whose interpretation is considered problematic by the 
WG9 ARG. 

CD7205D This test checks an invalid test objective: it treats 
the specification of storage to be reserved for a 
task's activation as though it were like the 
specification of storage for a collection. 

CE2107I This test requires that objects of two similar scalar 
types be distinguished when read from a file— 
DATA_ERR0R is expected to be raised by an attempt to 
read one object as of the other type. However, it is 
not clear exactly how the Ada standard 14.2.4:4 is to 
be interpreted; thus, this test objective is not 
considered valid, (line 90) 


Validation Sumry Report AVF-VSR-90502/48 

SO-Scicon pic VAX/VMS x MC68020 XD Ada APPENDIX D Page 2 of 3 
















WITHDRAWN TESTS 


t 


CE3111C This test requires certain behavior, when two files 
are associated with the same external file, that is 
not required by the Ada standard. 


CE3301A This test contains several calls to END_OF_LINE & 
END_OF_PAGE that have no parameter: these calls were 
intended to specify a file, not to refer to 
STANDARD_INPUT (lines 103 , 107 , 118 , 132 , & 136 ). 

CE3411B This test requires that a text file's column number 
be set to COUNT' LAST in order to check that 
LAYOUT_ERROR is raised by a subsequent PUT operation. 
But the former operation will generally raise an 
exception due to a lack of available disk space, and 
the test would thus encumber validation testing. 


Validation Suaaary Report 


AVF-VSR-90502/48 


SO-Scicon pic VAX/VMS x MC68020 XD Ada 


APPENDIX D Page 3 of 3 







