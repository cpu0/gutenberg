AD-A255 315 



NAVAL POSTGRADUATE SCHOOL 
Monterey, California 




THESIS 



COMPUTER 

BASED 

SATELLITE 

DESIGN 

by 



David L. Lashbrook 



June, 1992 


Thesis Advisor; 


Brij N. Agrawal 


Approved for public release; distribution is unlimited. 


92-25149 







SECURTY ClaSS'R'Cat o\ 0<^ th s pag 


REPORT DOCUMENTATION PAGE 


la REPORT SEClR:ty CLA5S-F:CA'iOk 

UNCLASSIFIED 


2a security CLASSiFiCAT on AUTHORITY 

N/A 


2b DECLASSIFICATION D02 'jNGRAD:NG SChEDUL 


’D RES^R'C-'VE VARK \GS 

NONE 


3 O.STR BJ’ON AVA . RfP 

UNLIMITED DISTRIBUATION 


f^'rn Apc' 

c>Mb .‘.'0 ; 


C.f d 
’6-1 0188 


4 PERFORMING ORGANIZATION REPORT NUMBERjS) 


5 MON TOR NG ORGAN ZA' ON PF-C" 


Naval Postgraduate School 


6a NAME OF PERFORMING ORGANIZATION 

Naval Postgraduate School 


6c ADDRESS iCity, Slate, and ZiPCocle) 

Monterey, CA 939^3-5000 


6b OFF CE symbol 7a NAME OF MON ’OR NO 'J-OO'. :O'. 
(If applicable) 

Naval Postgraduate School 


To ADDRESS I'City Stare and Zm co-ji : 
Mcr terey, CA, 9394 a -3ul.g 


8a NAME OF Fur.D‘NG I SPONSOR NG 
ORGANIZATION 


8c ADDRESS fCity State, and ZIP Code) 


8b office S'^MBOl 9 p 
(If applicable) 



•A SO-PCE QF f,.nDN'., 


r=OGPaV 
E,EVE NT NO 


11 TITLE (Include Security Classification) 

COMPUTER BASED SATELLITE DESIGN, UNCLASSIFIED 


12 PERSONA. AUTHOR'S! 

Lashbrook, David, L. __ 


13a 'YPE OF report T'3b tiME COVERED "4 DATf qf REPORT {Year Month Da>; 'S -eoi N' 

Master's Thesis I -- 1Q9?. MAY 26_235_ 


16 Supplementary nota'ion The views expressed in this thesis are those of the author and do 
not reflect the official policy or position of the Department of Defense or the U.S. 
Government.__ 


17 COSA ' COD: S j TssUSjKT T£RVS Xontmue on >f nf^cC‘Ssa'> ana 0> b'ot.k nur^bc') 


SuB GOO'>- 



1'^AbSTRAC'^ (Continue on revef’se if necesssrj and identif'^ by block numbi r) 

V/A computer program to design geosynchronous spacecraft has been developed. The program 
consists of four separate but interrelated executable computer programs. The programs are 
compiled to run on a dos based personnel computer. The source code is written in DoD man¬ 
dated Ada programming language. 

The thesis presents the design technique and design equations used in the program. De¬ 
tailed analysis is performed in the following areas for both dual spin and three axis 
stabilized spacecraft configurations: 1) Mass Propellent Budget and Mass Summary 
2) Battery Cell and Solar Cell Requirements for a Payload Power Requirement 3) Passive 
Thermal Control Requirements 

Thesis includes a user's manual Appendix A, and the source code for the computer programs 
as Appendix B. 


20 D'STPiBU'lON Au A .AB . Y C)F AB'.'paC 
□ uNC.ASS'F FD -NL'V ted □ SAVt AS 


22d \'AVf Qp P: S'B. f ‘.J 

Brij N. Agrawal 


DO Form 1473, JUN 86 


□ DT'f USfffS 


ABSTRACT SE,R • - C , 

UNCLASSIFIED 


//n (Include ( : 

(408) 646-3338 i AA/A 


Previous pdftions are obsolete 

S/N (il()2-LF'-OI4-66()3 


Sri - • • ( A 


1 


































Approved for public release; distribution is unlimited. 


Author; 


Approved by: 


Computer Based 
Satellite 
Design 

by 

David L. Lashbrook 

Lieutenant Commander, United States Navy 
B.S., University of Missouri 

Submitted in partial fulfillment 
of the requirements for the degree of 

MASTER OF SCIENCE IN ASTRONAUTICAL ENGINEERING 

from the 


NAVAL POSTGRADUATE SCHOOL 
June 1992 



David L. Lashbrook 



ii 









ABSTRACT 


A computer program to design geosynchronous spacecraft has been developed. The program 
consists of four separate but interrelated executable computer programs. The programs are compiled 
to run on an dos based personnel computer. The source computer code is written in DoD mandated 
Ada programming language. 

The thesis presents the design technique and design equations used in the program. Detailed 
analysis is performed in the following areas for both dual-spin and three axis stabilized spacecraft 
configurations: 


• Mass Propellent Budget and Mass Summary 

• Battery Cell and Solar Cell Requirements for a Payload Power Requirement 

• Passive Thermal Control Requirements 


Thesis includes a users manual Appendix A, and the source code for the computer programs 
as Appendix B. 



DTIC QUALITY INSPECTED 3 









TABLE OF CONTENTS 


I. INTRODUCTION. 1 

A. PURPOSE . 1 

B. BACKGROUND / CONCEPT. 2 

C. OPERATIONAL DESIGN PARAMETERS . 2 

1. Dual Spin Stabilization. 3 

2. Three Axis Stabilization . 3 

II. MASS SUMMARY AND PROPELLENT BUDGET. 4 

A. TRANSFER ORBIT . 4 

B. VELOCITY . 5 

1. Geostationary Orbit. 5 

2. Satellite Drift. 6 

a. East - West Drift. 7 

b. North South Drift. 8 

c. Gravitational Effects of Sun and Moon. 8 

C. VELOCITY DETERMINATION . 10 

1. Orbit Insertion Velocities. 11 

a. Delta Velocity for Apogee Motor Firing. 12 


IV 

























2. Delta Velocity Station Keeping. 13 

a. North-South Station Keeping. 14 

b. North-South Drift. 15 

c. Longitudinal Station Keeping. 16 

d. Station Repositioning. 18 

e. De-Orbit. 19 

D. MASS PROPELLENT BUDGET . 20 

1. Propellent Mass . 20 

2. Design References. 21 

E. MASS DETERMINATION. 22 

a. Propellent Mass Station Keeping. 23 

b. Propellent Mass Station Repositioning (Msr) . 24 

c. Propellent Mass De-orbit Control (Mde). 25 

d. Pressurant Mass (Mp^). 25 

e. Mass Margin (M^). 25 

f. Total Propellent Expenditure (Mpj). 26 

F. MASS REQUIREMENTS FOR SATELLITE COMPONENTS .... 26 

1. Structural Mass (Mjt). 26 

2. Thermal Control Equipment Mass (M^h) . 27 

3. Attitude Control System Mass (M^c). 27 

4. Electrical (M^) and Mechanical System Mass (M^). 28 


V 



























5. Mass Margin (Mm^J. 29 

6. Propellent Pressurant Mass (Mpp). 29 

7. Electric Power System Mass (MeJ. 29 

a. Housekeeping Power (Phk). 30 

8. Communications Package Mass (Mcp). 31 

9. Tracking Telemetry Reference (Mpr). 32 

III. ELECTRIC POWER. 33 

A. INTRODUCTION . 33 

B. POWER SYSTEM DESIGN . 33 

1. Design Life Considerations . 34 

2. Design Spectrum. 34 

C. BATTERIES. 35 

1. Energy Storage. 35 

2. Battery Charging. 36 

3. Battery Requirements. 36 

a. Known Variables. 36 

b. Number of Buses. 36 

c. Number of Battery Cells . 38 

d. Minimum Discharge Bus Voltage (Vdb) . 38 

e. Battery Cell Ampere Hours. 39 


VI 





























f. Maximum Battery Charge Voltage . 39 

g. Bus Voltage Allowable Deviation. 40 

h. Voltage Charge Array. 40 

i. Seasonal Currents. 40 

j. Battery Recharge Power. 41 

k. Longest Battery Recharge Time. 41 

D. SOLAR ARRAY DESIGN LOAD. 42 

E. SOLAR CELLS. 42 

1. Cell Variables . 43 

2. Parallel Solar Cells (Np) . 46 

3. Series Solar Cells (Ng) . 47 

4. Solar Cell Current and Voltage EOL Equinox. 47 

F. CHARGE ARRAY DESIGN. 48 

1. Series Solar Cells Charge Array (Nc). 48 

2, Parallel Solar Cells Charge Array Solstice (N^sc). 48 

IV. THERMAL CONTROL. 50 

A. BACKGROUND . 50 

B. THERMAL RADIATOR SIZING. 52 

1. Variable Definitions. 52 

2. Thermal Dissipation (P) . 53 


vii 























3. Radiator Area 


52 


C. EQUINOX TEMPERATURE . 53 

1. Non Eclipse . 53 

2. Eclipse. 54 

D. RADIATOR TEMPERATURE AT END OF ECLIPSE. 55 

E. RADIATOR MINIMUM OPERATING TEMPERATURE. 56 

F. SOLAR ARRAY TEMPERATURE. 57 

1. Variable Names and Definitions . 57 

2. Solar Array Operating Temperature . 57 

V. CONCLUSION. 59 

LIST OF REFERENCES . 61 

APPENDIX A . 62 

A. THERMAL . 62 

B. MASS PROPELLENT BUDGET AND MASS SUMMARY. 67 

C. ELECTRICAL POWER SYSTEM . 72 

viii 





















APPENDIX B. 77 

A. MASS PROPELLENT BUDGET / SYSTEM MASS SUMMARY . . 77 

B. ELECTRIC PHOTOVOLTAIC POWER SYSTEM .133 

C. PASSIVE THERMAL CONTROL .211 

D. ARRAY THERMAL CONTROL .269 

E. UTILITY SUBPROGRAMS .289 


IX 











I. INTRODUCTION 


A. PURPOSE 

The purpose of this thesis was to design an executable computer program capable of 
determining the numbers required to design specified aspects of a geostationary 
communications satellite, that could be run on a standard home personal computer 
(PC) The program is based on Professor Brij N. Agrawal’s book "Design of 
Geosynchronous Spacecraft". The book describes all the steps necessary to design a 
geosynchronous communications satellite. Because of time limitations, it was decided 
that the following areas of a Geostationary Communications Satellite would be 
completed on this portion of the project: 

• Mass and Propellent Budget 

• Electric Power 

• Thermal Control 

Both Three-Axis and Dual Spin Stabilized satellite configurations are included in the 
program and provide design reports that can be printed at the user’s discretion. 
Appendix A is a short user’s manual of the computer program and Appendix B 
contains the different executable computer programs’ source code. 


1 







B. BACKGROUND / CONCEPT 


The program came about through discussions with Professor Brij N. Agrawal 
and space system students enrolled in his satellite design classes. The basis for the 
computer program is to aid the user in quickly determining useful and accurate 
numbers for a geostationary spacecraft design. Although not a tutorial, the program 
sequentially walks the user through the necessary steps to develop a I 'ass Propellent 
Budget, Photovoltaic Electric Power System, and Thermal Control System for either a 
three-axis or dual-spin stabilized geostationary communications satellite. The four 
executable programs will, with a small amount of preparation, allow the average user 
to develop the described areas of a geosynchronous satellite design in minutes. 

Where as by using a hand calculator, the same variable numbers and final results 
would take days or weeks to arrive at the same results. 

C. OPERATIONAL DESIGN PARAMETERS 

All parameters for the executable program used to design a spacecraft in this 
thesis are based on an orbiting geostationary communications satellite. Some velocity 
components for propellent usage and therefore mass budget are related to the transfer 
and parking orbits as well as orbit injection angles and delta velocities necessary to 
achieve and maintain geostationary orbits. The equations or components used au’e 
specifically applicable to a geostationary satellite and might be useful for others as 
well. The two most common satellite design types, three axis stabilized and dual-spin 
stabilized, are used as a basis fot program engineering and concept. 


2 












1. Dual Spin Stabilization 

The dual spin configuration used for executable program design is a 
cylindrical shell with spacecraft power provided by solar cells surface mounted around 
the outer cylindrical area. The interior of the shell of tiie cylinder houses spacecraft 
electronics and propulsion devices. 

2. Three Axis Stabilization 

Three axis stabilized spacecraft will be based on a rectangular box shape. 
Power will be provided by sun tracking flat panel array(s). During parking orbit and 
operational orbit insertion, spin stabilization will be used. 


3 


n. MASS SUMMARY AND PROPELLENT BUDGET 

This chapter will step through the process of determining a equipment mass 
summary and a propellent weight budget. 

A. TRANSFER ORBIT 

For a satellite to be useful it first must achieve its operational orbit. The 
spacecraft will progress through a series of different orbits before achieving its "final" 
working orbit. The sequence begins with the launch of the spacecraft from any of a 
variety of locations depending on payload type, mass, desired orbit inclination, including 
mission or launch window constraints. The satellite is released from the launch vehicle 
into a Low Earth Orbit (LEO) parking orbit where system checks are performed. The 
next phase is to put the satellite into an elliptical transfer orbit in preparation for final 
insertion into operational orbit. 

There are a variety of "transfer" orbits that can be used for final insertion into 
operational orbit. The most common in-plane and fuel efficient transfer orbit for a 
geostationary spacecraft is a Hohman Transfer Orbit (HTO). The programs in Appiendix 
B use HTO for velocity change requirements for the transfer orbit. After release from 
the launch vehicle the spacecraft enters a parking orbit where satellite systems are 
checked out in preparation for insertion into the final operational orbit. 

The first phase of a Hohman transfer is to fire the perigee kick motor (PKM). 
This places the spacecraft in an elliptical transfer orbit. After four or five transfer orbits 


4 






the satellite completes system checkout, attitude determinations are finalized, and the 
apogee kick motor (AKM) fires. Geostationary orbit (GSO) is achieved by inserting 
the satellite into a circular orbit at a radius of approximately 42,160 kilometers and at 
a desired inclination (i) of zero degrees (equatorial orbit) for our design purposes. The 
spacecraft will then go through a series of re-orientations to finalize its operational orbit 
and mission altitude. (Wertz, 1991, p. 130 ) 

B. VELOCITY 

Velocity determination and ceitain delta velocities required to achieve the 
operational orbit are vital to building propellent summaries. Other factors taken into 
consideration are the type of fuel used (relating to I,p) and the efficiencies of the separate 
orbit insertion and orbit maintenance activities. The efficiencies of the apogee kick 
motor AKM, PKM, station keeping, and de-orbit functions of the spacecraft must be 
known so that sufficient propellent, and propellent weight, is incorporated into spacecraft 
design. Margins for the propellent budget are also assimilated into the propellent budget 
as a safety factor even though the delta velocity equations provide very accurate figures 
with little error. All values determined are for a geostationary communication satellite. 

1. Geostationary Orbit 

In a perfect geostationary orbit the satellite will move around the earth’s 
equator synchronized with the rotation of the earth about the earth’s axis. The period 
(P) is equal to one sidereal day (23 hours, 56 minutes, 4.09 seconds), or from the rising 
of a star to the rising of the same star vice 24 hours or sunrise to sunrise. 


5 







The radius for a geostationary orbit is determined via Keplar’s Law using 
a P of 86,164.09 seconds corresponding to one sidereal day and is given by 

11 ♦ p2 

a= 1/3 EQ2.1 

4 

where n^= gravitational constant 398,601.2 kmV(kg/s^) 
a = semi-major axis 
P^= period of the orbit in seconds 

The resulting orbital radius is 42,164.2 kilometers and is a pure circular orbit with zero 
eccentricity. 

2. Satellite Drift 

Any deviation from the above ideal parameters will cause perturbations 
in the orbit. The gravitational forces of the sun and moon also act on the satellite to 
cause drift. Table 2.1 lists the average drift rate imposed on the satellite by the sun and 
moon. 


Table 2.1 SECULAR RATES FROM SUN AND MOON 



Effect of Moon 

Effect of Sun 

n 

-0.00076 

-0.00034 

u ddot 

• 0.0 

• 0.0 


6 

















a. East - West Diift 

For a radius greater than (>) 42,164.2 kilometers the spacecraft’s 
orbital period is greater than 24 hours giving it the appearance of drifting westward 
with respect to the surface of the earth. Conversely, for an orbital radius of less than 
42,164.2 kilometers, the spacecraft’s orbital period is less than 24 hours, thus giving 
it the appearance of drifting eastward with respect to the surface of the earth. The 
incremental drift rate of the longitudinal drift with respect to an ideal geostationary 
orbit is: (Agrawal, pg 68, 1986) 

An.-3.-h..a3.- 3 . 360°/<jay _ -0.0137day 

2 2 42,164.2ian 42,164.2km 

The east - west motion for an inclined circular orbit is usually very small. This 
longitudinal drift for a small i and X is: 

X = -—*sin{2rjt) EQ 2.3 

4 

So for small inclinations, latitude oscillation is predominate. This can be easily seen 
in Figure 2.1. The effects of the sun and moon can be seen in Table 2.1. For an 
elliptic equatorial orbit with inclination (i=0) the amplitude is 

tX=2*e EQ 2.4 

Therefore, east - west oscillation predominates. 


7 






b. North South Drift 

An inclined geostationary orbit with correct radius will tend to 
oscillate mainly in latitude with respect to the surface of the earth. The amount of 
oscillation depends on the inclination and the drift rate. The motion or path of the drift 
resembles a figure eight ( 8 ). See figure 2.1. (Agrawal, p. 88, 1986) 

c. Gravitational Effects of Sun and Moon 

The gravitational forces of the sun and moon cause secular 
variations in the orbital elements of a geostationary satellite. These variations have the 
largest effect on right ascension of the ascending node and the argument of jjerigee. For 
nearly circular orbits (one aspect of an ideal geostationary orbit) e * 0 and the 


8 







resulting error is on the order of e^ So the equations for the rates of change from the 
sun and moon are (Wertz, p. 125, 1991): 

EQ2.5 

• 00154* EQ 2.6 

O)^^^=-0.00169* {4-5*sin2 (i) ) EQ 2.7 

<^sLm=0 ■ 00077 EQ 2.8 

where, i = inclination 

n = orbit revolutions per day 

For a geostationary orbit, the total longitudinal drift acceleration 
X is obtained by averaging the drift acceleration over the orbital period. Since the sun 
for our purposes is an inertially fixed reference point it contributes less than one degree 
of drift per day. So for a circular orbit the velocity remains constant. Therefore the 
main contributor to longitudinal perturbations is not the sun or moon but the earth’s 
slightly elliptical shape. This ellipticity caused by what is known as the equatorial 
bulge changes the earths gravitational force preventing it from acting purely radial. This 
phenomenon creates two stable longitudes called SI and S2 (75°E and 255°E) and two 
unstable longitudes USl and US2 where the gravitational forces are radial and the 
longitudinal drift acceleration is zero. Drift will occur whenever the satellite is not at 
one of these points. For example, if a satellite longitude is between SI and USl, the 


9 




lateral force component is along the velocity and this results in a negative longitude 
acceleration as shown in EQ 2.9. So whenever is near USl or US2 it will migrate 
towards the stable longitudes SI or S2 whichever is closest. (Agrawal, p. 83, 1986) 


X = -0.0168*sinMX-X^,^,J EQ2.9 

day^ 

Taking into account only second order gravity effects the 
longitudinal drift acceleration is: 
where 

X = longitudinal drift acceleration in degrees \ day* 

X = longitude of the satellite in degrees 
\t»bic= stable longitude of 75°E or 255°E 

C. VELOCITY DETERMINATION 

Variables from the program strategy that will begin our design are based on a 
geostationary orbit. First we will assume that some launch vehicle has inserted our 
spacecraft into a desired parking orbit. For a final GSO, a good parking orbit might be 
around 6600 kilometers. A parking orbit is a LEO orbit where satellite system checks 
are performed prior to the other phases of insertion into the final operational orbit (GSO 
operational orbit » 42,160 kilometers). 

1. Orbit Insertion Velocities 

For the design calculations and for the executable program in appendix B 
the following equations are used for velocity determination. First, to find the orbit radius 


10 








the program requests the values for radius at apogee (rj and then the value for radius 
at perigee (rp) to find the semi-major axis (a). 


a = 


2 


EQ 2.10 


The equations for transfer orbit velocity at apogee (V J and velocity 
transfer orbit velocity at perigee (V,) are: 


sparking M 


a 


EQ 2.11 





EQ 2.12 


V = V * (_ - ) 

^ ta tn V __ ' 


tp 


EQ 2.13 


The in-plane velocity change required to transition from parking 
orbit to transfer orbit is: 

^^transfer-^tp-^Parking EQ 2.14 

and the mean velocity is given by: 



EQ 2.15 


11 





The transfer orbit period is; 


Tf=2*n *—— 

' 4 N 




EQ 2.16 


And ultimately the desired synchronous orbit velocity is: 



EQ 2.17 


a. Delta Velocity for Apogee Motor Firing 

To find the velocity change and insertion angle required to 
transition from a parking orbit to the final geostationary equatorial orbit used in the 
program, the orientation of the plane of orbit or inclination must be changed. Figure 2.2 
depicts this change. The components of the velocity necessary to achieve equatorial 
geostationary orbit can be found using the law of cosines. The insertion angle using this 
law is : 


a=arctan 


V^g*sin{i) 

^e"^ta*COS(i) 


EQ 2.18 


A Hohman Transfer Orbit (HTO) is utilized by the program to 
determine variable values. The HTO uses a two bum method for insertion into 
Geostationary orbit. This method is the most fuel efficient and is therefore highly 


12 



desirable to increase spacecraft life. Using HTO the AVelocity for insertion into 
operational orbit (AV^J is; (Agrawal, p. 95, 1986) 



Figure 2.2 Velocity Vector Diagram at Apogee Bum 


1. Delta Velocity Station Keeping 

The perturbing actions of the sun, moon, and earth’s equatorial bulge 
cause the orbit of a satellite to deviate from the ideal. Table 2.2 lists the different 
inclination drift rates. Orbital limits are kept within mission parameters by a process 
called station keeping. 

As discussed earlier, for inclination other than zero, drift will be primarily 
in latitude. Corrections used to keep the spacecraft within the proper operational 
latitudes is called north-south station keeping. Conversely a change in the ideal 
geostationary radius will cause a drift in longitude. Station keeping used to maintain the 









Table 2.2 INCLINATION DRIFT RATES 


Date 

January 1 

^mooo 

(Deg) 

it 

(Deg) 

^loUl 

(Deg) 

ido,moon 

(Deg) 

Total 

(Deg) 

1993 

260.526 

23.135 

-13.023 

0.565 

0.834 

2000 

125.177 

20.888 

11.875 

0.523 

0.792 


longitude within operational parameters is called longitudinal or east-west station keeping, 
geostationary radius will cause a drift in longitude. Station keeping used to maintain the 
longitude within operational parameters is called longitudinal or east-west station keeping. 


a. North-South Station Keeping 

For a geostationary orbit finding the average inclination drift rate 
per year (ADPY), including the gravitational effects of the sun, moon, and inclination 
of the orbit parameters, is found by adding the published yearly drift rates (Table 2.2) 
during the satellites proposed life and dividing by the spacecraft life. The average time 
between north-south station keeping is: 

*365.25 days EQ 2.20 

ADPY ^ 

where i^i = inclination tolerance 

T^s = time spent in north-south station-keeping 

The total number of maneuvers for a given inclination tolerance (Itol) 


14 

























during the spacecraft life (SL) in years is: 


N, 


ADPy*SL 


maneauvere 


2*i 


Col 


EQ 2.21 


North-south station keeping is necessary whenever the latitude or inclination drift exceed 
mission limits. (Wertz, p. 139, 1991) 

For north-south drift, the worst case AV is 


Ay=6.14 8*sin(i£oj) ( 


kilometers ^ 
second 


EQ 2.22 


The contribution of the sun and moon to yearly drift are 


A V’„g^n=102.67 *cos (a) *sin (a) EQ 2.23A 

A V_jy^=40.17 *cos (y) *sin (y) EQ 2.23B 

where a = angle between the orbital satellite plane and the moons orbital plane 

7 = angle between the satellite orbital plane and plane of the eclipticg20 

d. North-South Drift 

Table 2.3 (Agrawal, 1986, p. 88) gives the average AV required 
for a north south station keeping maneuver, and the time interval between maneuvers for 
several inclination limits. (Agrawal, 1986, p. 87) 


15 


Table 2.3 INCLINATION STATION KEEPING 




Inclinations 

Limit (degrees) 

A V per 
Maneuver (m/s) 

Average Time 
Between Maneuvers 
(days) 

0.1 

10.7 

86.14 

0.5 

53.65 

430.7 

1.0 

107.30 

861.4 

2.0 

214.56 

1722.8 

3.0 

321.76 

2584.2 


c. Longitudinal Station Keeping 

It is realistic to consider only second order effects of the sun and moon 
on satellite perturbations. In relation to the earth’s equatorial bulge, higher order effects 
are negligible. Table 2.4 lists some AV’s for different longitudinal tolerances. The 
longitudinal drift caused by the earth’s equatorial bulge is added to these effects giving 
the longitudinal drift rate. Figure 2.3 illustrates these longitudinal drift oscillations. 


16 























Figure 2.3 Longitudinal Station Keeping 


The satellite drift rate is given O) 


Xq=2* {k*AX) ^ 


Where = allowable longitudinal deviation 

Xo = drift rate when correction is applied (see Figure 2.3) 
X = longitudinal drift acceleration 
The time interval between east-west maneuvers is 




2 


where Tgw = time spent in east-west station keeping 


EQ 2.24 


EQ 2.25 


17 





Table 2.4 LONGITUDE STATION KEEPING 


Longitude Tolerance 


Minimum Time 
Interval Between 
Maneuvers (days) 

0.1 

0.15 

31 

0.2 

0.21 

43 

0.5 

0.33 

69 

1.0 

0.46 

97 

2.0 

0.66 

138 

3.0 

0.80 

169 


The velocity change required per year is 

A‘V..r=5.66.V-^^~=l-74*sin(2*(i-X„,ij.)) EQ2.26 

where T = time interval between and - X^, See Figure 2.3. 

Drift acceleration due to the moon is periodic with an approximately 13.6 day 
cycle. So for all but small longitude tolerances its effects can be neglected. Table 2.4 
gives some example AV’s for different longitude tolerances. (Agrawal, 1986, pp. 89-90) 

d. Station Repositioning 

At times a satellite may need to move from one station to another this 
maneuver is called station repositioning. This maneuver is accomplished via two 
separate velocity changes. The first maneuver uses a velocity change to impart motion 


18 


























in the desired direction, this puts the spacecraft into a slightly elliptic transfer orbit. 
When the spacecraft nears the desired longitude another velocity change maneuver of 
equal magnitude but in the opposite direction acts to put the satellite back into a circular 
synchronous orbit at the new operating longitude. The velocity change (and therefore 
the fuel required) depends on the amount of time allowed to complete the station change 
maneuver. 

a;1 = A?l EQ2.27 

n 

where AX = required drift rate 

AX = longitudinal degrees to be moved 
n = numbers of days allowed for movement 
The first velocity change required for station repositioning is: 

A V=2.83*AX=2.83*— EQ 2.28 

n 

So the total velocity change (AVtotal ) for starting and stopping the station change is: 

At^ro^^=2*AV=5.66*-^ EQ2.29 

e. De-Orbit 

After a geostationary satellite has finished its useful life it should be "de- 
orbited" or boosted into a benign orbit to prevent collisions with future active payloads. 


19 




Boosting a geostationary satellite into a benign orbit is the most economically feasible 
method of disposal. The program in appendix B uses a mass ratio based on a reference 
satellite to determine the approximate fuel required to de-orbit the satellite. 

D. MASS PROPELLENT BUDGET 

Now that all velocities have been determined and knowing the spacecraft weight 
and power requirements the weight of the satellite propellent, structural, operational and 
power systems can be estimated. The propellent budget is made up of four categories: 

1) Velocity Control Propellent 

2) Attitude Control Propellent 

3) Propellent Margin 

4) Residual 

Attitude control propellent is used for attitude control during AV thrusting, spin 
stabilization, maneuvering while spinning, counter disturbance torques, attitude 
maneuvering and limit cycling (or oscillation). Propellent margin is a percentage of the 
propellent requirement and residual is what fuel is left that cannot be used. 

(Wertz, 1991, p. 262) 

1. Propellent Mass 

Assuming the mass of the spacecraft is known the satellite propellent mass 
is: (Agrawal, 1986, p. 45) 


20 




EQ 2.30 


-AV 

Mp=M^* (1-exp 


where 


Mp = Mass of the Propellent in Kilograms 
Mj = Initial Mass of the Spacecraft 

AV = Required Velocity Change to get in operational orbit - m/s 
I = Specific Impulse of the Fuel 
g = gravity 9.81 m/s^ 


NOTE: The higher the specific impulse (I^) the lower the amount of fuel necessary 
to complete satellite mission requirements. 

2. Design References 

For initial determination of the total fuel requirements, this program 
develops a mass propellent budget by referencing a known communications satellite 
with a similar design. The design satellite mass is divided by the reference satellite 
mass to give a mass ratio (MR), which is used for subsequent calculations. 


MR= 


ff^SpacecraftMass 


Reference 


Spacecraf tHass 


EQ 2.31 


The next step is to look up the adaptor mass for the launch vehicle our 
design satellite is using in the applicable launch vehicle users manual. The adaptor 
mass is then subtracted from the initial spacecraft mass to find mass of the 


21 




spacecraft before apogee bum (MJ, Equation 2.34, this is used to determine the 
propellent mass for the different mission control events. 


* adaptor EQ 2.32 

The final variables required by the program are the efficiencies for north- 
south and east-west station keeping, station repositioning, de-orbit, and apogee 
injection plus orbit insertion. It is assumed in the executable program that apogee 
injection and orbit injection efficiencies are the same. 


E. MASS DETERMINATION 

The pre-amf mass (mass before apogee motor firing) programmed mass is 
initialized at seven kilograms and is multiplied by the MR (mass ratio) to find the pre- 
amf MASS for the design. 

^Pze-Arnf~ EQ 2.33 

where = Mass of spacecraft before apogee motor firing 

Pre-AMpR^f^r^^ = Pre - AMP reference Mass 
The apogee motor firing mass (M^^mi.) required to insert the spacecraft into its 
operational orbit is: 




EQ 2.34 


22 





where Iai = fuel impulse for the apogee injection motor 

AVqj = Delta velocity required for geostationary orbit transfer 

The Post-amf mass is the mass of fuel required for final despin and stabilization 
into an operational orbit. For this design, the program initializes the Post-AMF 
mass at 29.9 kilograms. 

^PoBC-Amf~ EQ 2.35 


where Mpo„.amf = Spacecraft mass after apogee motor firing 

AMFRtfc„^, = Reference spacecraft post apogee firing mass 


Final propellent mass requirements for the proposed design are determined 
by the level of perceived importance of the individual maneuvers during the spacecraft 
design life. For this design, the hierarchy is north-south then east-west station 
keeping, station repo:;:tioning, and finally de-orbit. 

a. Propellent Mass Station Keeping 

The propellant mass required for north-south station keeping during 
the spacecraft life is given by; 


4 Vm 


> 4 ^ 5 = * (1-exp 


EQ 2.36 


23 


where 


Mns 

= north south station keeping mass 


= AV required for NS station keeping 

EFFn. 

= efficiency 

IsK 

= station keeping specific impulse 


The propellant mass required for east-west station keeping during the 
spacecraft life is given by: 


M^= * (1-exp 


EQ 2.37 


where 

Mew 

= east west station keeping mass 


EFFexv 

= efficiency 


b. Propellent Mass Station Repositioning (M^,^ 

The propellant mass required for station repositioning during the 
spacecraft life is given by: 


where 


M, 


SR 


^SR 

EFFsr 






AMF ^Pre-AMF 


-««5-WEv)Ml-exp 


EQ 2.38 


= velocity changed required to reposition the spacecraft 
= Specific impulse of the fuel used to reposition the satellite 
= efficiency of the repositioning maneuver 


24 






where 


reference 


where 


margin is 


c. Propellent Mass De-orbit Control 

The propellant mass required for de-orbit for the spacecraft is: 




EQ 2.39 


velocity changed required to de-orbit the spacecraft 
Ide = Specific impulse of the fuel used to de-orbit the satellite 
EFFde = efficiency of the deorbit maneuver 

d. Pressurant Mass (Mpu) 

The pressurant mass is calculated as the MR multiplied by the 
satellite pressurant mass. 

MpR=MR*Mpg.g^F 2.40 

MpR.REF = niass of the pressurant in the reference satellite 

e. Mass Margin (MiJ 

The propellent mass margin (M^,) is the one to two percent safety 
10% of the spacecraft dry mass. 




EQ 2.41 


25 




/. Toted Propellent Expenditure (M„) 

The total mass of propellent expenditure (Mp^) including apogee 
injection requirements, with a 2% safety margin is: 

MpT=M^* 51.0 + EQ 2.42 

The dry mass of the unified bi-propellant propulsion which 
combines the functions of apogee injection, attitude control, and station keeping is: 
(Agrawal, 1986, p.46) 

MuB=CaB*Mpr EQ 2-43 

where Cub = 0.084 for three axis stabilized 

= 0.054 for dual-spin stabilized 

To find the total propulsion system mass add Mp^ and Mub together 

F. MASS REQUIREMENTS FOR SATELLITE COMPONENTS 
1. Structural Mass (Mst) 

The mass of the spacecraft structure can only be determined accurately 
afl.^r the final spacecraft configuration and preliminary structural design are 
completed. However this is usually late in the design process. For a good estimation 
based on our reference satellite use: (Agrawal, 1986, p. 48) 


26 







^ST ^ST*^i 


EQ 2.44 


where Mgr = Structural mass in kilograms 

CsT = 0.087 for three axis stabilized 
= 0.097 for dual-spin stabilized 

2. Thermal Control Equipment Mass (Mju) 

For the program the initial thermal dissipation requirement is unknown. 
To estimate thermal control mass first we determine the spacecraft beginning of life 
mass (Msbol) which is; (Agrawal, 1986, p. 48) 

^SBOL~^i~^Pze-AMF~^AMF~^POBt-AMF~^ADAPTOR 2.45 

Once Msbol is found, we can use the following equation to find Mth: 

^TH~^TH*^SBOL 2.46 

where Cth = 0.032 for three axis stabilized 

= 0.027 for dual-spin stabilized (Agrawal, 1986, pp. 48-52) 

3. Attitude Control System Mass (M^c) 

The mass for a spacecraft attitude control system depends on many 
variables. These variables are attitude control, attitude accuracy, amount of 


27 



redundant safety features, and the size and mass of the spacecraft. For initial 
estimation purposes for a three axis stabilized system the program uses: 

(Agrawal, 1986, p. 49) 

/4^=6 5 + 0.022* EQ 2.47 

and for a dual spin stabilized system initial estimate is: 

M^c= 31 + 0.027* (AfjBOL-^OO) EQ 2.48 

4, Electrical (Mj) and Mechanical System Mass (M^,) 

The program in appendix B uses the following electrical and mechanical 
extrapolations from Agrawal’s book "Design of Geosynchronous Spacecraft". 

Me is given by: (Agrawal, 1986, p. 52) 

M^=Q,Q3S*Mssol EQ2.49 


and Mm is given by: 


0.014 


EQ 2.50 


28 







5. Mass Margin 


The mass margin is 10% of the spacecraft dry mass (Mub for a unified 
hi -propellent system). 


^DRY ^adaptor ^PR 


EQ 2.51 



7. Electric Power System Mass (Mel) 

The program in appendix B determines the mass of the electric power 
system based on a reference satellite and design spacecraft power requirements. For 
the purposes of this design we will assume: 

1) 10% margin for the solar array 

2) 5 % margin for the equipment 

3) NiHj batteries with spacecraft fully operational during eclipse. 

Also the program and design will use the Mass Ratio and the housekeeping power of 
the reference satellite Phk-ref to find satellite housekeeping power (Pu,)- 




29 







a. Housekeeping Power 


^HK HR*Puj(.gEp EQ 2.54 

U>ing Phk and the required payload power the battery power load (PbJ with 5% 
equipment margin is: 


^BL ^ ^PAYLOAD * *1.05 

and the solar array load (P^l) with 10% margin is: 


EQ 2.55 


SL 


{P 


+ P ^ * 1 1 

PAYLOAD ^ 


EQ 2.56 


where Ppayload = Satellite payload p. '^er needed in watts 

The electrical power system mass is dependent on the power system 
design. The weights for solar array, charge array, shunt, charge control, battery, 
and discharge regulator vary between a partially regulated DC bus and a fully 
regulated DC bus with the later being slightly larger and therefore heavier overall. 
The total electrical subsystem mass is also greater for higher power requirements and 
for dual-spin stabilized spacecraft. (Agrawal, 1986, p. 373) 


30 



Therefore depending on the spacecraft power requirements and 
stabilization methods the total mass of the electrical power subsystem is: 

^EL~ (1 • 0 5 ♦ {PPay load* 

* (1. l*Af5A+l ■ ) *0.001 EQ 2.57 

where Pp.yio,d = Payload power 

Msa = Solar Array Mass 

PgL = Solar Array Power 

Mca = Charge Array Mass 

Ms = Shunt Mass 

Mcc = Charge Control Mass 

Mbat = Battery Mass 

Mdr = Discharge Regulator Mass 

8. Communications Package Mass (Mcp) 

The communications package is basically the initial spacecraft mass (M^) 
minus all the other initial design masses and is given by: 

^CP~^i~^adaptoi~^S ^TH ^PR 

EQ 2.58 


31 




9. Tracking Telemetry Reference (Mpy) 

The mass of tracking telemetry reference is based on MR and is given by: 

EQ 2.59 


32 






m. ELECTRIC POWER 


i 

i 

j 

I A. INTRODUCTION 

The electric power system provides power to the spacecraft during all phases of 
its life from liftoff to de-orbit. For this phase of the satellite design use a 
geostationary communications satellite using traveling wave tubes (TWT’s) or radio 
frequency (RF) amplifiers for power transmission of RF energy. Normally, over 
80% of the total satellite system power is used by the communications payload. The 
power remaining is required for spacecraft housekeeping duties. 

B. POWER SYSTEM DESIGN 

For this design the primary power for spacecraft systems is derived from solar 
cells. During non-eclipse periods power is provided by solar arrays which convert 
solar energy via photovoltaic conversion to electric power. A non-eclipse period is 
when the suns light is shining on the solar cells, an eclipse period is when the sun’s 
rays are not available, for example when a satellite is behind the earth. For eclipse 
periods, a maximum of 1.2 hours for GSO, power is provided via batteries. The 
batteries for a standard GSO communications satellite normally are required to 
provide only partial power during eclipse periods. 


33 


The electric power system consists of three parts, the solar array, batteries, and 
power control electronics. This design and the program in Appendix B concentrates 
on the solar array development and battery requirements. The program 
in Appendix B will determine the solar cell and battery cell needs for any input load 
for a geostationary three axis or dual-spin stabilized satellite. 

1. Design Life Considerations 

Power system design begins with the electrical power loads for mission 
design at beginning of life (BOL) and end of life (EOL). Sometimes EOL power 
demands are reduced but still allow reduced operational capabilities. For our design 
and the executable program in Appendix B, we will assume that the satellite mission 
requires full operational capability for the design life of the spacecraft, or until 
satellite EOL. Power control electronics and solar panel design will control the 
smooth operation of the px)wer supply to the payload throughout the life of the 
spacecraft. 

2. Design Spectrum 

The program and this design will support the total communications 
payload and whatever load reduced or full, required during eclipse. Sometimes, load 
requirements for a broadcasting communications payload during eclipse are lower than 
full power; however, for military payloads and commercial satellites near continuous 
full power operation may be a design element. Our design will account for both 


34 



spectrums of payload power criteria. The required power during eclipse will be a 
percentage (percent_partial_power) of full bus power. Power control electronics will 
regulate the spacecraft bus voltage and charge rates but will not be addressed in any 
detail in this design. 

C. BATTERIES 

Battery requirements are based on payload power criteria. The design standards 
for the solar array will hinge on the battery depth of discharge (DOD) and ampere 
hour (AH) needs during eclipse loading. Also during the launch cycle batteries 
provide the power for housekeeping functions until the spacecraft is in an operational 
configuration. The solar arrays during the transfer orbit and while in the parking 
orbit will supply only intermittent power to the satellite, hence the batteries must 
make up any difference in load requirements. 

1. Energy Storage 

All spacecraft that use solar cells for power need some system for energy 
storage to use during eclipse and peak power demands. Although there are many 
designs for energy storage, like fuel cells and flywheels, batteries will be used in this 
design because they are reliable, economical, and a proven technology. Batteries tend 
to provide stable power for the different operating conditions of a spacecraft’s life. 


35 





(Agrawal, 1986, p. 356) Nickel Hydrogen batteries will be used in the design and 
for the executable program in Appendix B. 

2. Battery Charging 

After the batteries have been used to supply the payload requirements 
during the parking orbit, transfer orbit, satellite configuration finalization, or eclipse 
the batteries must be re-charged. This is accomplished through a charge array located 
on the spacecraft solar panels. The design of the charge array depends on the needed 
loading during the satellite eclipse period. The batteries normally have more than 
enough time to recharge before the next eclipse cycle. 

3. Battery Requirements 

a. Known Variables 

Table 3.1 contains the required variables and initialized values for 
the following calculations. In determining the satellite payload and housekeeping 
power requirements from calculations in Chapter II, we have the criteria needed to 
find the battery cell standards. 

b. Number of Buses 

Normally spacecraft have two buses, each supplying half the total 
power to the spacecraft loads. This design provides for additional reliability and 
prevents a single point fault from shutting down the spacecraft and thus allows for 


36 






some graceful degradation in case of a fault in one of the buses. The program in 
Appendix B allows for single to multiple bus designs, but favors dual bus 
configurations. 

Table 3.1 VARIABLE NAMES AND SYMBOLS 



3 Axis 

Dual-Spin 

Variable Name 

Minimum Discharge Bus Voltage 

28.0 

35.0 

VpB 

Design Satellite Bus Voltage 

42.0 

50.0 

^Bi;s 

Bypass Diode Voltage Drop 

I.l 

1.1 

^DD 

EOL Battery Discharge Voltage 



^EOLSAT 

Eclipse Time 

1.2 

1.2 

Tlcl 

Depth of Discharge 

0.65 

0.65 

DOD 

Maximum Battery Charge Voltage 

1.5 

1.5 

Vmbc 

Maximum Charge Voltage 



Vbc 

Number Series Connected Diodes 

3 

3 

Nsd 

Battery Charger Voltage Drop 

1.75 

1.75 

VcD 

Charge Discharge Voltage Drop 

1.1 

1.1 

Vd 

Charge Discharge Efficiency 

Battery 

0.9 

0.9 

t^CD 


37 



c. mber of Battery Cells 

The number of battery cells (N) needed to maintain a stated minimum 
discharge bus voltage (Vdb) is determined via manipulation of equation 3.1. 

The power, voltage times current, required by the bus will be all or part of the total 
power, for example if the total power required is 1000 watts and the spacecraft has 
two buses then each bus requires 500 watts of power. Therefore batteries for each 
bus must provide this power for the maximum eclipse time of 1.2 hours for a GSO 
orbit. 

{N-D EQ3.1 

therefore N is 

T/ -ft/ 

EQ3.2 

V 

''d 

then round N up to the next higher integer and using this new value find the new 
minimum discharge bus voltage Vdb- 

d. Minimum Discharge Bus Voltage (Vdb) 

For electrical equipment to operate correctly a minimum voltage V^b 
must be available and is given by: 

V^s=(N-l)*V^-V^^ EQ3.3 


38 






«. Battery Cell Ampere Hours 

The battery cell ampere hour (CELL^h) requirement is the number of 
ampere hours needed to supply the satellite during eclipse and is determined from the 
following equation; 


BL 


CELL 


_ ^BVSES 


*T, 


ECL 


'AW 


Vob*DOD 


EQ 3.4 


where 

NbuSES 

= number of buses 


Tecl 

= maximum time in eclipse 


Pbus 

= power in watts per bus 


DOD 

= depth of discharge 


and the bus power (Pbus) requirements are: 


TOTAL 


BUS 


N, 


EQ 3.5 


BUSES 


/. Maximum Battery Charge Voltage 

The maximum battery charge voltage (Vbc) assuming an open circuit 
failure of one battery cell is: 


VbC=^HBC* (^-1) *^SD*^SD 


EQ 3.6 


39 




where Vmbc = allowable battery charge voltage 
Nsd = number of series connected diodes 
^sD = voltage drop across each series connected diode 

g. Bus Voltage Allowable Deviation 

Usually the bus voltage is allowed to vary within prescribed 
limits of * "tO.S volts. This value is called the bus voltage allowable deviation 
(Vdev) and it allows us to calculatefYaysLiJ the lower limit of bus voltage which is: 

^BUSLL~Vgu2~^DEV 



I. Seasonal Currents 

Design parameters for the program in Appendix B provides for a 
charge current to be applied to each bus as a percentage of the number of buses. For 
one bus it would be a 100% duty cycle. For two buses, the charge current would be 
applied to each bus on a 50% duty cycle. 


40 





The charge rate current for autumnal equinox Iequinox is given by; 


CELL 


AH 


^EQUINOX 25 


EQ 3.9 


and for the summer solstice current I 


SOLSTICE 


It is; 


CELL 


'AH 


‘■SOLSTICE^ 


45 


EQ 3.10 


Battery cells, in this design, charge at a high rate to return the energy depleted during 
eclipse to each battery. 

j. Battery Recharge Power 

The power needed to recharge the batteries at equinox (Pgc) is; 


^EC~ ^BC* ^EQUINOX 


EQ 3.11 


and the power needed to recharge at solstice (Psc) is 


PsC~ ^BC* ^SOLSTICE 


EQ 3.12 


k. Longest Battery Recharge Time 

The time to fully recharge the batteries (Tr£charge) is: 


BL 




*T, 


ECL 


rp _ ■‘•BC/SES 

•^RECHARGE~ 


EQ 3.13 


^EC*^CD 


41 





The batteries will remain on trickle charge for the remainder of the non-eclipse 
period. 


D. SOLAR ARRAY DESIGN LOAD 

The solar array design load is the summation of the equipment load and the 
power required for charging the batteries. Taking the 10% design margin into 
account the solar array design load at equinox (Psalequ) is: 

^SALEQU~ ^ 

and the solar array design load at solstice (Psalsol) is: 

^SALSOL~ ^ 3.15 

This design process and the program in Appendix B will split the loads among the 
buses if there is more than one. The solar arrays are assumed to operate at the 
maximum power point of the solar cell 'TV" curve at the spacecraft EOL. 

E. SOLAR CELLS 

The total load on the solar array will be the summation of the equipment load 
and the power required for charging the batteries. Generally, and for this design and 
the program in Appendix B, a 10% design margin is used to take into account the 
uncertainty in the degradation due to radiation and other design factors of the solar 
array. Equations 3.14 and 3.15 account for this design margin. The next step is to 


42 







determine the total number of solar cells needed to meet all of the mission 
requirements including all previous assumptions. 

1. Cell Variables 

The following variables listed in Table 3.2 and Table 3.3 variables for the 
particular solar cell used need to be known to begin solar array power system design. 


Table 3.2 SOLAR CELL VARIABLES FOR I AND CELL DIMENSIONS 


VARIABLE 

SYMBOL 

Cell Width 

Cw 

Cell Length 

Cl 

Cell Thickness 

Ct 

CURRENT 

Solar Intensity 

S 

Assembly Losses Current 


Environmental Degradation in 

Current 

K'd 

Solar Intensity Factor including 
Incidence Angle 

Ks 

Temperature Coefficient for Current 

«i 

Solar Maximum Power Point EOL 
Summer Solstice 

I 

Solar Cell Current BOL 

^ Jip 


43 



























Table 3.3 SOLAR CELL VARIABLES VOLTAGE AND ILLUMINATION 



Voltage 

VARIABLE 

SYMBOL 

Panel Wiring Loss per Cell 

AV 

Solar Cell Voltage at Maximum 

Power Point, BOL 

ttv 

Radiation Degradation Factor for 
Voltage 


Solar Cell Voltage at EOL 

V 

Solar Cell Voltage at Maximum 

Power Point, BOL 

V 

mp 

Operating Temperature 

T 

Test Temperature 

Tt 

EFFECTIVE ILLUMINATION 

Sun Tracking Flat Panel 

1 

Dual Spin Surface Mounted 

I/tt 


44 


























2. Parallel Solar Cells (Np) 


Using the variable values from Tables 3.2 and 3.3 and taking the design 
factors into account, the solar cell current (I) at EOL summer Solstice (T » 39°C) 
is: 

EQ 3.16 


The total current (Ij) per bus or wing is: 


Jj.= 


^BUS 

V 

''bus 


EQ 3.17 


This gives us the total number of solar cells needed in parallel (Np) for each wing 
which is: 




£r 

I 


EQ 3.18 


The number for Np is then raised to the next higher integer number value. 
For example, 51.135 would be raised to 52 for future calculations using Np, to give 
the total Np for that array or bus. Obviously, the more parallel strings of solar cells 
the more current is supplied to the satellite bus. 


45 






3. Series Solar Cells C'^s) 

To find the number of solar cells in series necessary to supply the required 
bus voltage (Vgus) we first determine the solar cell voltage (V) at EOL summer 
solstice, which is given by: 

V={ (V^-AV+av,*(T-Tj.)) EQ3.19 

The number of solar cells in series (Ns) needed to supply this voltage, taking into 
account the voltage drop in the bus (Vbus-drop)» and the voltage drops in the spacecraft 
wiring harness (Vwh) and slip rings (Vsr), is: 

^BUS-DROP* ^DROP-m* ^DROP-SR EQ 3.20 

s y 

Like Np , Ns is raised to the next higher integer value. 

4. Solar Cell Current and Voltage EOL Equinox 

At EOL autumnal equinox the solar cell current I^q and voltage Veq are 
given by equations 3.16 and 3.19 respectively, except with T = temperature at 
equinox (»49'’C). 


46 



F. CHARGE ARRAY DESIGN 

The charge array supplies the boost voltage necessary to recharge the spacecraft 
batteries after eclipse. 

1. Series Solar Cells Charge Array C'^c) 

The number of series solar cells (Nc) required to supply the needed boost 

voltage is 


EQ 3.21 

where the voltage (V) is the voltage at solstice. 

2. Parallel Solar Cells Charge Array Solstice (Nggc) 

The number of solar cells needed in parallel for the charge array during 
summer solstice (Nssc) is 

EQ 3.22 

■‘■SOLSTICE 

and for equinox the solar cells required in parallel (Nggc) is 

EQ 3.23 

■‘■EQUINOX 

So the charge array would require solar cells in series and Nssc cells in parallel 
for summer solstice battery charging, and N^- solar cells in series and Neqc cells in 


47 


parallel for autumnal equinox battery charging. For a spin stabilized spacecraft the 
solar cell requirements would have to be multiplied by a factor of x to account for 
the lower illumination factor. 


48 





IV. THERMAL CONTROL 


A. BACKGROUND 

Spacecraft in all orbits must dissipate heat. Heat can be absorbed from 
sunlight, reflected sunlight, and planet emitted radiation. (Agrawal, 1986, p. 280) 

Heat is also generated within the satellite by communication transmitters, batteries, 
control elements in the power system, the payload, and when apogee kick motors or 
engines are fired, heat is radiated from their components. (Wertz, 1991, p. 370) 

A thermal control system must maintain equipment within an allowable 
temperature range for optimum operational capability while maintaining an 
economical design. Spacecraft electronics usually have temperature limits between 
O^C and 40°C, while batteries will have limits between 0®C and 20°C. Silicon solar 
cells operate between +100°C and -1(X)°C, but operate most efficiently at the lower 
end of this range. (Wertz, 1991, p. 370) 

The thermal control system acts upon and is acted upon by almost every other 
spacecraft system while maintaining the spacecraft systems within their operational 
temperature parameters. This is especially true of the spacecraft power system 
because the thermal control system must dissipate all its excess energy and radiate this 
energy to space. 


49 





Though there are many types of thermal control systems from passive and semi¬ 
passive to active; this design will use passive techniques. Passive systems have no 
moving parts or heaters and rely on paints, second surface mirrors, multi-layer 
insulation, phase changing devices, and radiation or conduction to space radiators like 
optical solar reflectors (OSR). In addition, passive thermal control designs are 
usually lighter, cost less, and use less power than active control systems. 

(Wertz, 1991, p. 371) 


50 







B. THERMAL RADIATOR SIZING 



VARIABLE DESCRIPTION 


Thermal Dissipation [W] 


Emittance of Radiator 


Radiator Temperature 


Equilibrium Temperature 


Solar Array Diameter 


Radiator Height 


Solar Absorbtance EOL 


Solar Intensity Winter Solstice 


Solar Intensity Summer Solstice 


Solar Intensity Vernal Equuiox 


Solar Intensity Autumnal Equinox 


Solar Aspect at Winter Solstice 


Solar Aspect at Autumnal Equinox 


Stefan Boltzmann 


Efficiency 


SYMBOL \ NTJMERICAL VALUE 



T \ (* 310°K) 



S \ 1397 [W/m^] 


S \ 1311 [W/m^] 


S \ 1362 [W/m^] 


S \ 1345 [W/m^] 


0 \ 23.5° 


0 \ 0 ° 


cr \ 5.67*10' [W/(m^*K"] 



51 

































2. Thermal Dissipation (P) 


Thermal radiators are used to dissipate excess heat, the more heat that 
must be dissipated the greater the thermal radiator area required. For this design we 
will assume that the radiator is isothermal and will be sized for the greatest thermal 
dissipation required. The hottest time is at vernal equinox when the solar intensity is 
1362 W/m^ with a solar aspect of 0°. The thermal dissipation (P) required of the 
thermal radiator(s) is based on the percentage of the payload power (Ppp) and the 
percentage of housekeeping power (Ppn) required to be dissipated as heat. The 
thermal dissipation is given by: 

^ ^PAYLOAD* EQ ^ 

^RADIATING-FACES 

Where Phk = housekeeping power 

PpAYLOAD = payload power 

Nradiating-faces = number of thermal radiating faces 


3. Radiator Area 

Radiator area (A) for a three axis stabilized spacecraft, is given by 


A= 


_ P _ 

e*a*T**n-as*S*sin ( 0 ) 


EQ 4.2 


52 





For a dual spin stabilized spacecraft we find the radiator height (Hr^d) 
and multiply it by the circumference of its cylindrical shell structure. The height of 
the radiator is 




{n*o*€*r^*n) - {a5*S*cos (0) ) 


EQ 4.3 


C. EQUINOX TEMPERATURE 
1. Non Eclipse 

For design purposes and the program in Appendix B the temperature at 
equinox (Tequinox ) is needed for both full and partial power requirements during 
equinox. Temperature after equinox in °K for a three axis stabilized spacecraft is; 


‘ EQUINOX 


= { 


€*a*n*A 


) 


EQ 4.4 


Temperature after equinox in °K for a dual spin stabilized satellite is: 


"^EQUINOX ( D^j^*H^*n*€*a*n*A 


_1 

) " 


EQ 4.5 


To determine the temperature in °C subtract 273.15° from the values in 
equations 4.4 and 4.5. As stated earlier, the temperature range of the spacecraft 


53 




components (other than solar cells) should be kept between 0°-40"C. If a condition 
arises where this is not possible to keep the temperature within operational ranges 
passively, then auxiliary heaters will be required to prevent damage to the spacecraft 
components. 

If batteries are providing full power during eclipse, the radiator 
temperature will remain approximately the same during eclipse as during the non¬ 
eclipse period of equinox. (Agrawal, 1986, p. 284) 

2. Eclipse 

When batteries provide partial power {a variable is known as percent 
partial power (PCTpp)), heat dissipation is a percentage of thermal dissipation (P) and 
the equilibrium temperature during equinox (TequhJ is 


‘ BOUIL 


_ PCTpp*P 
€*a*A 


_1 

4 


and the time constant (r) for a three axis stabilized spacecraft is 


EQ 4.6 


where 


m*Cp 

x = -- 

m = mass of the radiator plus mounted equipment. 


EQ 4.7 


54 





For a dual spin stabilized spacecraft, the time constant (t) is; 


T = 


in*Cp 

"^EQUIL 


EQ4.8 


D. RADIATOR TEMPERATURE AT END OF ECLIPSE 

To find the radiator temperature at the end of eclipse this design uses an 
iterative process. Knowing the maximum time for eclipse we can iterate repetitively 
through equation 4.9, which is known as the radiative cooling equation, guessing 
different temperatures until we get a time very close to our maximum eclipse time 
(Tec) of 1.2 hours (4320 seconds). We then bracket the maximum eclipse time of 72 
minutes, with a value close enough to 72 minutes to make the results accurate, (1.2 
hours or 4320 seconds) and interpolate to find the minimum temperature during 
eclipse. 


i^ + C=2*(coth-M 

X 


T 

EQUINOX \ 
T 

■^EQUIL 


'^EQUIL 


EQ4.9 


55 






First we must find the constant "C" assuming t=0, where "C" is some constant. 


C=2*(coth-M 

"^EQUIL 


'^EQUIL 


EQ 4.10 


E. RADIATOR MINIMUM OPERATING TEMPERATURE 

Now it is desirable to determine the time needed for the radiator to reach it’s 
minimum operating temperature. First find we must the constant "C" for equation 
4.11 , known as the radiative heating equation,by assuming Tbc= 0, and substituting it 
into Equation 4.11. 

I^*C=2*( tanh-^ () -tan'^ () ) EQ4.11 

^EQUIL '^EQUIL 


this gives us: 


C=2* (tanh-^ ( -tan-^ ( ) EQ4.12 

"^EOVIL '^EQUIL 

where Tequinox = lowest temperature during equinox as iterated via 

eq. 4.10 

Tequil = Equilibrium for the thermal dissipation (P) desired 
eclipse 


56 








To find the time needed to reach a desired radiator operating temperature (Trau) 
we substitute the new after equinox temperature values and the time to reach Trad is 
now given by 

f:=(2*(tanh-M-^‘ ^^ —) ) ) -c) *x EQ 4.13 

^EQUIL "^EQUIL 

where t = time to reach specified radiator operating temperature 

F. SOLAR ARRAY TEMPERATURE 

1. Variable Names and Definitions 

Table 4.2 lists the required variables and their symbolic representations 
for determining the solar array operating temperature. 

2, Solar Array Operating Temperature 

In a solar array only a fraction of the solar flux is converted into electric 
power by the solar cells thus reducing the heat of the array. This reduction in the 
solar absorbtance is called the effective solar absorbtance and it is a function of the 
average solar cell array absorptance, the packing factor, and the cell efficiency. 

The solar array operating temperature (Top) is calculated by first determining the 
effective solar absorbtance (ose) which is; (Agrawal,1986, p. 285) 

<^sE=^s-Fp*^ EQ4.M 


57 






Then the operating temperature for any season can be determined by 
substituting the appropriate solar intensity (S) and solar flux incidence angle (0) 




VARIABLE / CONSTANTS 


Effective Solar Absorbtance 


Average Solar Cell Absorbtance 


Solar Cell Packing Factor 


Solar Cell Operating Efficiency 


Array Front Side Area 


Array Back Side Area 


Emittance of the Array Front Side 


Emittance of the Array Back Side 


Solar Intensity 


Stefan Boltzmann 


Angle of Incidence of Sunlight 


SYMBOL 
































V. CONCLUSION 


The executable programs and technical documentation devised by this thesis allow 
for the accurate and timely calculation of spacecraft design requirements. In addition, it 
enables the average user to have the time to explore the different phases of design in 
more detail. The programs in Appendix B expeditiously calculate the spacecraft mass 
prof>ellent budget, spacecraft mass summary, solar power system design, and passive 
thermal control design for a geostationary communications satellite. The results are 
compiled in an ascii based text file that can be printed and available for user study. 

The Ada programming language was used due to its unique ability to write source 
code in plain english. The programs are written so that future developers with limited 
programming experience can understand the progress of the program and use it as a 
starting point for future research. 

Future research and development is needed for computer based design in the 
following geosynchronous areas: 

• Spacecraft Attitude Control Systems 

• Spacecraft Structural Design 


59 





For low earth orbits (LEO) development is desired in 

• Spacecraft Mass Propellent Budgets 

• Spacecraft Electric Power System Design 

• Spacecraft Attitude Control 

• Spacecraft Thermal Control Systems 


60 







LIST OF REFERENCES 


1. Agrawal, Bry N., Design of Geosynchronous Spacecraft, Prentice Hall, Inc 
1986 


2. Wertz, James R., Larson, Wiley J., Space Mission Analysis and Design 
Kluwer Academic Publishers, 1991 



APPENDIX A 


COMPUTER BASED SATELLITE DESIGN 
USERS MANUAL 


A. THERMAL 

1) To start the program type "THERMAL" at the dos prompt. 

2) The program will ask "Is your spacecraft spin stabilized". If it is answer 
with a character ’Y’ if not answer with a character ’N’ 

3) Program will state design chosen 

a) "Spacecraft is Spin Stabilized" or 

b) "Spacecraft is Three Axis Stabilized" 

4) Program asks "What is your Spacecraft Mass" 

a) Enter Spacecraft Mass including the Adaptor Mass in kilograms. 
Example: "3000.0" 

5) Program asks "Enter the POWER requirements of the Spacecraft in watts. 
Example: "2000.0" 


62 








6) Next the program asks you to chose a reference satellite from those listed 

’1’ Intelsat V 
'T Intelsat VI 
’3’ Intelsat VII 

’4’ or to insert your own values. 

7) The program lists the calculated housekeeping power and asks if you want 
to change this value for future calculations. If you want to change it enter a 
character ’Y’ if not, depress a character ’N’. 

Program then lists the values for Payload Power and Housekeeping Power 

8) Program lists some default values for: 

7} - efficiency 

a - solar aspect coefficient 
S - solar intensity solstice 
S - solar intensity equinox 
Tradiator ' radiator temperature 
^RADIATOR - radiator emissivity 
Tabsolute - absolute zero 
Teclipse - eclipse time 

Nthermal emitting faces - number of thermal emitting faces 
^RADIATOR PLUS EQuiPMFjTT " Hiass of radiator plus equipment 
Ppp - Percent partial power (percent of payload dissipated as heat) 

Cp - specific heat 

To change any of the listed values enter a character ’Y’ and then enter the number of 


63 







the value you wish to change. 

9) Next an informational screen is displayed that lists the different passive 
thermal control materials and there typical application. 

10) Program displays a screen that lets you pick the type of material to use for 
thermal control. Simply enter the integer of the material desired or enter "10" to 
enter your own values. Chosen values are then displayed. 

11) Program asks user to enter "Percent Payload Power that must be 

dissipated as heat" 

and to enter "Percent Housekeeping Power that must be dissipated as 

heat" 

Example; 33.4% would be entered as "0.334" 

Total required power dissipation is then displayed. 

12) Program asks user to enter "Solar Array Diameter in meters" if satellite is 
Dual Spin Stabilized Example "3.456” 

13) Program lists "Radiator Height" if satellite is Dual Spin Stabilized. 

14) Program asks user to enter a value for "Radiator Efficiency". 

The only reason this is in the program is that some users expressed a desire to 
change the efficiency on the run. 


64 




15) Program lists values for: 

Temperature at Equinox 

Equilibrium Temperature (based on partial power needed during eclipse) 

Time Constant in seconds and minutes 

16) Program then determines the constant for radiative cooling based on the 
temperature at equinox and equilibrium temperature. The next step is finding the 
"After Equinox Temperature" via the radiative cooling equation. The program goes 
through a series of questions to aid the user in finding the "After Equinox 
Temperature". 

The program outputs your input temperature in °K and the "Eclipse Time" 
in minutes. Since we know for a geosynchronous orbit the longest eclipse time is 72 
minutes we will bracket this time (one value above and one value below 72 minutes). 
When a temperature yields a value sufficiently close to 72 minutes (around 10 minutes 
either side) we accept that value by answering with a character ’Y’ and that value is 
saved to bracket one side of 72. Next the program lists the saved "After Equinox 
Temperature" and its associated time. Then the program then goes the same process 
again to bracket the other side of 72 minutes. The program will not allow the user to 
accept a second on the same side of 72 minutes as the first. Once 72 minutes has 


65 






been successfully bracketed the program interpolates to determine the "Temperature 
After Equinox" for a time of 72 minutes. 

17) The program then moves on to radiative heating portion, the listed default 
desired operating temperature is listed and the user is asked if he wishes to change the 
value for either the "Radiator Heat Dissipation" or the "Specified Operating 
Temperature". 

The following values are listed based on user input: 

Equilibrium Temperature 

Constant "C" 

Time constant - radiative heating 

Temperature After Equinox 

Equilibrium Temperature 

Operating Temperature 

18) Finally the names of the data files are listed 


66 







B. MASS PROPELLENT BUDGET AND MASS SUMMARY 

1) To start the program type "MASSPRO" at the dos prompt. 

2) The program will ask "Is your spacecraft spin stabilized". If it is answer 
with a character ’Y’ if not answer with a character ’N’ 

3) Program will state design chosen 

a) "Spacecraft is Spin Stabilized" or 

b) "Spacecraft is Three Axis Stabilized" 

4) Program asks "What is your Spacecraft Mass" 

a) Enter Spacecraft Mass including the Adaptor Mass in kilograms. 
Example: "3000.0" 

5) Program asks "Please enter the radius at Apogee" 

Example "42353.0" 

6) Program asks "Please enter the radius at Perigee" 

Example "6565.0" 

Program lists the values for: 

rp - Radius at Apogee 

roRBrr ■ Radius of Transfer Orbit 

Vtp - Velocity at p)erigee for the transfer orbit 

Vj^ ' Velocity at apogee for the transfer orbit 

Vs - Velocity of a Geosynchronous Orbit 


67 







5) Program asks "Please enter the launch inclination in degrees" 

Example "25.2" 

Program lists: ioECREEs - inclination in degrees 
Iradian ■ inclination in radian 
Geosynchronous Orbit insertion angle 
AVqt - velocity to enter a geosynchronous equatorial orbit 

6) Next program asks "Please enter the allowable inclination tolerance" 

Example "0.2" 

7) Next the program asks "Enter the spacecraft first year in orbit. Any year 
between 1991 and 2003" Example " 1994 " 

8) Next program asks "Enter last year of spacecraft life " Example " 2001 " 

9) Drift rates for the selected range of years is displayed and the program 

lists: 

Average drift rate per year 

Tns - time between north south station keeping maneuvers 
Nns - number of north south station keeping maneuvers 
AVns - delta velocity north south 


68 






10) Next program asks "Please enter the spacecraft operating longitude in 
degrees" 

Example "312.3" then program lists; 

^double do( • longitudinal drift acceleration 
Tew - Time between east west station keeping maneuvers 
AVgw - delta velocity over spacecraft life for E-W station keeping 
Next program states "the efficiency of the station keeping motors" 
EFFns - Propulsion efficiency north south 
EFFew - Propulsion efficiency east west 
to change default values enter a ’1’ otherwise a ’2’ 

11) Next program asks "Please enter the number of days allowed for station 
repositioning" Example "29.0" and then the program asks "Please enter the 
number of degrees to reposition.Example "125.9". 

12) Program asks "What is your Spacecraft Mass" 

a) Enter Spacecraft Mass including the Adaptor Mass in kilograms. 
Example; "3000.0" 

13) Next program asks "Please enter the Igp for Apogee Injection 
Example "285.0" 


69 



14) Next program asks "Please enter the efficiency of the motor for station 
repositioning" 

Example "0.97" 

15) Next program asks "Please enter the efficiency of the motor for satellite 
deorbit" 

Example "0.98" 

The program then lists the following values; 

Pre AMF Fuel Mass 
AMF Fuel Mass 
Post AMF Fuel Mass 
Mass change Post AMF 

16) Next program asks "Please enter the Isp for orbit maintenance" Example 
"285.0" Then the screen displays the following Ijp 

AMns 

AMsr 

^^^ORBrr CONTROL 
MpRESSURANT 
^MARGIN 
^MppopELLENT 


70 





^STRUCTURE 

^spacecraft beginning of life 
^thermal control 
attitude control 
^mechanical system 
^PROPELLENT 

PROPELLENT PRESSURANT 

Mdrymass 

MmaSS MARGIN 
^COMMUNICATIONS PACKAGE 

17) Program asks "Enter the POWER requirements of the Spacecraft in watts. 

Example: "2000.0" 

18) Next the program asks you to chose a reference satellite from those listed 

’ 1 ’ Intelsat V 
’2’ Intelsat VI 
’3’ Intelsat VII 

’4’ or to inseit your own values. 

Screen displays values for: 

P HOUSEKEEPING 
PBATTERY LOAD 
PSOLAR ARRAY LOAD 


71 






Power Factor 


^electrical power subsystem 

^PAYLOAD 

MtrACKINO and telemetry 

and finally lists the data files for the design run. 

C. ELECTRICAL POWER SYSTEM 

1) To start the program type "THERMAL" at the dos prompt. 

2) The program will ask "Is your spacecraft spin stabilized". If it is answer 
with a character ’Y’ if not answer with a character 'N’ 

3) Program will state design chosen 

a) "Spacecraft is Spin Stabilized" or 

b) "Spacecraft is Three Axis Stabilized" 

4) Program asks "What is your Spacecraft Mass" 

a) Enter Spacecraft Mass including the Adaptor Mass in kilograms. 
Example: "3000.0" 

5) Program asks "Enter the POWER req rements of the Spacecraft in watts. 

Example: "2000.0" 

6) Next the program asks you to chose a reference satellite from those listed 


72 




’ 1 ’ Intelsat V 
’2’ Intelsat VI 
’3’ Intelsat VII 

’4’ or to insert your own values. 

7) The program lists the calcuated housekeeping power and asks if you w'ant 
to change this value for future calculations. If you want to change it enter a 
character ’Y’ if not, depress a character ’N’. 

Program then lists the values for Payload Power and Housekeeping Pow'er 

8) Program asks "Enter the spacecraft life in years” Example "10.0" 

9) Program lists some default values for: 

Minimum discharge bus voltage V^b 
D esign satellite bus voltageVpus 
Bypass diode voltage dropVon 
EOL battery discharge voltageV „bc 
S atellite eclipse timeTEc 
Battery depth of dischargeDOD 
Maximum battery discharge voltageV 
Series connected diode voltage dropV 
Number of series connected diodesNs^-i, 

Battery charger voltage dropVBc 
Charge discharge voltage dropV^ 

To change any of the listed values enter a character ’Y’ and then enter the number of 
the value you wish to change. After all desired changes have been made enter a 




character ’N’ 

and your final values will display on the screen 

Example; if the user wants to change first the user enters a ’Y’ then enters a "6" and 
the Program asks "Please enter the Depth of Discharge used for the batteries" 

10) Program asks "Enter the number of electrical buses used in your satellite" 
Example "2" 

11) Program asks "Please enter the Solar Cell Test Temperature" Example 
"28.0" 

12) Program states some nice to know information. 

13) Program states some calculated environmental design values and asks if you 
want to use them. To use calculated values enter a ’1’ to input your values enter a 
’ 2 ’ 

14) Program displays some standard solar cell parameters and asks if the user wants 
to select one of these cells or enter their own values. User enters an integer number 
for the desired choice. Screen then displays selected or input parameters for user 
concurrence. 

15) Screen display. 

Ns - Number of solar cells in series 

- Minimum discharge bus voltage 
CELLah - Battery cell ampere hours 
Pbus ■ Bus power 

^MBc ■ Maximum battery charge voltage 

- Battery charger voltage drop 
Boost Voltage 


74 








Iequinox ■ Equinox current 

Isolstice ' Solstice current 

Pec - Power equinox charge 

Psc - Power solstice charge 

Trecharge ■ Time to recharge the batteries 

PsALEQu • Solar array design load equinox 

PsALsoL ■ Solar array design load solstice 

Imp - Solar cell current at max power point EOL solstice 

Imp - Solar cell current at max power point EOL equinox 

Isolstice ' Required current solstice per bus 

Iequinox ' Required current equinox per bus 

Vbus - Bus voltage 

Np - Number of solar cells in parallel for each bus 

Veol SOLSTICE ■ Solar cell voltage at EOL summer solstice 

VgoL EQUINOX ■ Solar cell voltage at EOL autumnal equinox 

Ns - Number of solar cells in series for each bus 

Ibus - Current per bus or wing 

Vbus * Voltage per bus or wing 

Ptotal • Total power 

Nc - Number of series cells for charge array solstice 
Ness ■ Number of parallel cells for charge array solstice 
Nceq ■ Number of parallel cells for charge array equinox 

Finally the data file names appear for this design run. 


75 








SAMPLE DATA SHEET 


SPACECRAFT MASS SUMMARY 


Subsystem 

Mass (kg) 

Structure 

278.4 

Thermal 

52.7 

Propulsion 

132.5 

Attitude Contro 

164.8 

Electric Integration 

76.1 

Mechanical Integration 

27.3 

Mass Margin 

162.3 

Dry Spacecraft Mass 

1622.8 

Propellent Pressurant 

384.3 

Apogee Motor Expendable 

1192.9 

Spacecraft Mass at Seperation 

3200.0 

Communications 

175.1 

Antenna Reference Mass 

309.0 

Electric Power 

351.6 

Telemetry and Command 

24.2 


76 








APPENDIX B 


A. MASS PROPELLENT BUDGET AND SYSTEM MASS SUMMARY 


— Title 

-- Author 

— Date 

“ Revised 

— Compiler 

— Description 


: Velocity Determination 
: David Lashbrook 
: 09 October 1991 
: 05 May 1992 
: OPENADA EXT 

: This procedure determines the delta velocity for insertion 
into geosynchronous orbit. 


with TEXTJO, MATH LIB.GETDATA, VIDEO; 
use TEXTJO, MATH_LIB,GETDATA; 


procedure MASSPRO is 

package FLOAT INOUT is new FLOAT lO(FLOAT); 
use FLOATJNOUT; 

package INTEGER INOUT is new INTEGER lO(INTEGER); 
use INTEGER JNOUT; 

package BOOLEAN INOUT is new ENUMERATION lO(BOOLEAN); 
use BOOLEAN JNOUT; 

INCLIN ATION_RADI ANS, 

DELTA_VELOCITy_NORTH_SOUTH, 

DELTA_VELOCITY_EAST_WEST, 

DELTA_VELOCITY_STATION_REPOSITIONING, 

DELTA_VELOCITY, 

X : FLOAT; 

EFF_NS : FLOAT := 0.91; 

EFF_EW ; FLOAT := 0.99; 


I INTEGER; 


MASSBEFOREAPOGEEBURN, 

SPACECRAFT_MASS_BEFORE_APOGEE_BURN, 

COMM_PACKAGE_MASS, 

SPACECRAFT_MASS FLO.^T; 

DRUM_SPINNER BOOLEAN: = FALSE; 

OUTM :FILE_TYPE; 


77 






procedure GET_DATA(X : out FLOAT) is 
begin 
loop 
begin 

NEW_LINE(2); 

SET_COL(10); 

PUT_LINE("Enter the value as a real number with a 
decimal point’); 

SET_COL(15); 

PUT_LINE(’(Depress CTRL^C to exit the program.)"); 
SET_COL(10); 

GET(X); 

SKIPLINE; 

exit; 

exception 

when DATA ERROR = > 

SKIPLINE; 

NEWLINE; 

SET_COL(10); 

PUT_LINE("Error.. You must enter the value as a 

real’); 

SET_COL(10); 

PUT_L1NE(’number with a decimal point, ie 123.4"); 
SET_COL(10); 

PUT_LINE(’Try again."); 

NEW_LINE; 

end; 

end loop; 
end GET DATA; 

— Reads an integer input from the keyboard 

procedure GET_INTEGER(1 ; out INTEGER) is 
begin 
loop 
begin 

NEW_LINE(2); 

SET_COL(10); 

PUT_LINE("Enter the value as an integer"); 
PUT_LlNE("(Depress CTRL'C to exit the program.)’); 
SET_COL(10); 

GET(I); 

SKIPLINEd); 

exit; 

exception 

when DATA ERROR = > 

SKIPLINE; 

NEWLINE; 

SETCOUIO); 

PUT_LINE(’EiTor.. You mu.st enter the value as a 
INTEGER"); 

SET COL(IO); 


78 







PUT_LINE(" NO! decimal point, ie 123 "); 
SET_COL(10); 

PUT_LINE(" Please try again."); 

NEWLINE; 

end; 

end loop; 

end GETJNTEGER; 

procedure GET_CHARACTER(CHAR : out CHARACTER) is 
begin 
loop 
begin 

NEW_LINE(2); 

SET_COL(10); 

PUT_LINE("Enter ’Y’ for YES or "); 

NEW_LINE(1); 

SET_COL(10); 

PUT_LINE(" ’N’ for NO"); 

SET_COL(15); 

PUT_LINE("(Depress CTRL'C to exit the program.)"); 
SET_COL(10); 

GET(CHAR); 

SKIP_LINE; 

exit; 

exception 

when DATA ERROR = > 

SKIP_LINE; 

NEW_LINE; 

SET_COL(10); 

PUT_LINE('Error.. You must enter character"); 
SET_COL(10); 

PUT“LINE("Try again."); 

NEWLINE; 

end; 

end loop; 

end GET CHARACTER; 

procedure DUAL SPIN (DRUM SPINNER . in out BOOLEAN) 

y. 

Y, 

n, 

N, 

CHAR CHARACTER, 

begin 

VIDEO.CLEARSCREEN; 

SET_COL(10); 

PUT_LINE("ls your spacecraft Spin Stabilized "); 

SETCOUIS); 

GET_CHARACTER(char); 
if CHAR = 'Y' or CHAR = 'y' then 
DRUM SPINNER; =TRUE; 


IS 


79 






if DRUM_SPINNER = TRUE then 
VIDEO. CLEAR SCREEN; 

NEW_LINE(2); 

PUT lINE("***’*‘’*'****’*‘*********’^***********’*‘************“*****’*‘****** 

^ ifc ^ 4i 4t 4( 4t 4i * " ^ • 

NEW_LINE(2); 

SETCOUIO); 

PUT_LINE("Satellite is Spin Stabiliztid"); 

NEW_LINE(2); 

PUT LINE!"'*"*'**********************'*'***’''*****’''***’*'**************** 

4( ^ 4^ 4t 4t If ^ • 

NEW_LINE(2); 
end if; 
else 

VIDEO.CLEARSCREEN; 

NEW_LINE(2); 


PUT L}NE("***★ + + ***★* 

4c4‘4t>f4>4c4(4<if4t4i"^. 

NEW_LINE(2); 

SET_COL(10); 

PUT_LINE(’SateIlite is Three Axis Stabilized”); 

NEW_LINE(2); 

PUT lINE("****’*'********************'****************************** 

NEW_LINE(2); 
end if; 

end DUAL_SPIN; 

procedure PRINT_HEADER is 
begin 

VIDEO.CLEAR SCREEN; 

NEW_LINE(2);’' 

SET_COL(10); 

PUT LINE("This program walks through a basic design of a"); 
SET_COL(10): 

PUT_LINE("geosynchronous satellite,'); 

NEWLINE; 
end PRINT_HEADER; 


procedure VELOCITY (INCLINATION RADIANS ; m out FLOAT, 
DELTA VELOCITY : in out FLOAT) is 


RADIUS EARTH ; FLOAT; =7378,0; 

kilometers 

UE ; constant FLOAT: = 3,986E+ 05; — 


80 







km*’'‘3/seconds**2 

GEOSYNCHRONOUS_ORBIT RADIUS : constant FLOAT: =4.2164E + 04; - km 

APOGEE_VELOCITY, 

PERIGEE_VELOCITY, 

SYNCHRONOUS_ORBIT_VELOClTY_CALCULATED, 

ANGULAR_VELOCITY, 

RADIUS_ APOGEE, 

RADIUSPERIGEE, 

APOGEE_ ALTITUDE, 

PERIGEE_ALTITUDE, 

INCLINATION, 

ORBIT_RADIUS : FLOAT: =0.0; 

kilometers 


SYNCHRONOUS_ORBIT_VELOCITY : constant FLOAT; =3.075; - 
kilometers/second 

W, 

X, 

Y, 

Z ; FLOAT: =0.0; 

BETA, 

ALFA_DEGREES, 

ALFA : FLO AT: =0.0; 

radians 

I, 

N : INTEGER; 

begin 

-- Read apogee radius from keyboard 
-- GET_APOGEE_RADIUS 
SET_COL(10); 

NEW_L1NE(2); 


PUT LINE(" 

i)[ 4t * 1*1 ^ y 

NEWLINE; 

PUT_LINE (" Please enter radius at apogee '); 
NEW_LINE(2); 

SET_COL(15); 

GET_DATA(RADIUS_APOGEE); 

VIDEO.CLEARSCREEN; 

NEW_LINE(2); 

SET_COL(10); 

PUT(’Radius at apogee is 
SET_COL(60); 


81 






PUT(RADIUS_APOGEE, FORE = > 6, AFT = > 4, EXP = > 0); 
PUT(" km"); 


- GET_PERIGEE_RADIUS is 
NEW_LINE(2); 


PUT uifi^^’******************************************************* 


NEWLINE; 

SET_COL(10); 

PUT_LINE("Please enter radius at Perigee"); 
GET_DATA(RADIUS_PER1GEE); 

NEW_L1NE(2); 

SET_COL{10); 

VIDEO.CLEARSCREEN; 

PUT("Radius at perigee is ’); 

SET_COL(60); 

PUT(RADIUS_PER1GEE, FORE = > 6, AFT = > 4, EXP = > 0); 
PUT(" km"); 


- VELOCITIES 


ORBIT_RADIUS;=(RADIUS_ APOGEE+ RADIUS_PERIGEE)/2.0; 
NEW_LINE(2); 

SET_COL(10); 

PUTrOrbit radius is "); 


SET_COL(60); 

PUT(OR3IT_RADIUS, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" km"); 


PERIGEE_VELOCITY; =SQRT((2.0*UE*RADIUS_APOGEE)/((RAD1US_APOGEE + RAD 
IUS_PER1GEE)*RADIUS_PERIGEE)); 

NEW_LINE(2); 

SET_COL(10); 

PUT("Perigee velocity is "); 

SET_COL(60); 

PUT(PERIGEE_VELOCITY, FORE = > 6, AFT = > 4, EXP = > 0); 

PUT(" km/sec"); 


APOGEE_VELOCITY: = PERlGEE_VELOClTY*(RADlUS_PERlGEE/RADIUS APOGEE); 
NEW_LINE(2); 

SET_COL(10); 

PUT("Apogee vclcKity is "); 

SET_COL(60); 

PUT(APOGEE_VELOCITY, FORE = > 6. AFT = > 4. EXP = > 0); 

PUT(’ km/sec"); 

ANGULAR_VELOCITY;= RADIUS_APOGEE*APOGEE_VELOClTY; 
NEW_LINE(2); 

SET_COL(10); 


82 












PUT("Angular (h) velocity is "); 

SET_COL(60); 

PLJT(ANGULAR_VELOCITY, FORE = > 6, AFT = > 4, EXP = > 0); 

SYNCHRONOUS_ORBIT VELOCITY CALCULATED; = SQRT 
(UE/GEOSYNCHRONOUS_ORBIT_RADIUS); 

NEW_LINE(2); 

SET_COL(10); 

PUT('Geosynchronous orbit velocity is ’); 

SET_COL(60); 

PUT(SYNCHRONOUS_ORBIT_VELOCITY_CALCULATED,FORE = >6, AFT 
= >4,EXP=>0); 

PUT(" kin/sec”);NEW_LINE(2); 


- FIND_ANGLES 
NEW_LINE(2); 

PUT Lj^£^">*‘+*********+******>t'*+*+*+**t‘***^*'t‘>*‘***+**’<‘*****+*+*+♦*** 

NEW_LINE(2); 

SET_COL(10); 

PUT_LINE('Please enter the inclination the launch'); 

SET_COL(10); 

PUT_LINE('vehicle will insert the spacecraft.'); 

NEW_LINE(2); 

GET_DATA(1NCL1NATI0N); 

INCLINATION_RADIANS: = INCLINATlON*PI/180.0; 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(10); 

PUT('Inclination in degrees is "); 

SET_COL(60); 

PUT(INCLINATION, FORE = > 6, AFT = > 2, EXP = > 0); 

NEW_LINE(2); 

SET_COL(10); 

PUT('Inclination in radians is '); 

SET_COL(60); 

PUT(1NCL1NATI0N_RAD1ANS, FORE = > 6, AFT = > 5, EXP =- > 0); 

ALFA:=ATAN((APOGEE_VELOCITY*SIN(INCLINATION_RADlANS)) 

/(SYNCHR0N0US_0RB1T_VEL0C1TY-AP0GEE_VEL0CITY*C0S(1NCL1N.^T10N RADI 
ANS))); 

ALFA_DEGREES:=ABS(ALFA'*‘180.0/P1); 

NEW_LINE(2); 

SET_COL(10); 

PUT('In.sertion angle in degree.s (ALFA) is '); 


83 











SET_COL(60); 

PUT(ALFA_DEGREES, FORE = > 6, AFT = > 2, EXP = > 0); 

- BETA:=ABS(180.0-(1NCL1NATION + ALFA_DEGREES)); 

- NEW_LINE{2); 

- SET_COL(10); 

- PUT("Triangular angle (BETA) is "); 

- PUT(BETA, FORE = > 6, AFT = > 2, EXP = > 0); 


- DELTA_VEL 


DELTA_VEL0CITY:=SQRT(((AP0GEE_VEL0CITY*SIN(1NCLINAT10N_RADIANS))* 

* 2 ) 

+ ((S YNCHRONOUSORBITVELOCIT Y 
-APOGEE_VELOCITY*COS(INCLINATION_RADIANS))**2)); 

NEW_L1NE(2); 

SET_COL(10): 

PUT("Delta velocity for insertion into geo is "); 

SET_COL(60); 

PUT(DELTA_VELOClTY, FORE = > 6, AFT = > 4, EXP = > 0); 

PUT(' km/sec"); 

NEW_LINE(2); 

PUT lINE("*’''*'''**’*‘********************’*“'‘’''*’'‘*’'‘*'*‘’*‘*’'“'"*'*******‘''**‘'‘*** 
NEW_LINE(2): 
end VELOCITY; 

procedure STATI0N_KEEPING_REP0SIT10N1NG 

(DELTA_VELOClTY_NORTH_SOUTH : in out FLOAT; 

DELTA_VELOClTY_EAST_WEST : in out FLOAT; 

DELI A VELOCITY STATION REPOSITIONING : in out FLOAT; 

EFF_NS ; in out FLOAT; 

EFF EW ; in out FLOAT) is 

AVERAGEJNCLINATIONDRIFTYEAR, 

AVERAGE_DRIFT_PER_YEAR, 

AVERAGE_DRIFT_YEAR, 

ADPY, 

LAMDA_DOT_DOT, 

LAMDA, 

DELTA_LAMDA, 

OPERATINGLONGITUDE, 

LONGITUDINAL_DRlFT_ACCELERATION, 

TOLERANCE, 

TOLERANCERADIANS, 





INCLINATION_DRiFT_YEAR : FLOAT :=0.0; 

NORTH_SOUTH_MANEUVERS, 

NORTH_SOUTH_MANEUVERSJNTEGER, 

TIME_NS, 

FUEL_MASS_NS, 

TIMEEW, 

ISPFUEL, 

EAST_WEST_MANEU\ ERS, 

FUEL_MASS_EW, 

DELTA VELOCITY TOTAL, -- delta velocity required for both 
east west 

~ and north south station keeping 

--EFF NS, — thruster efficiency north south station 
keeping 

"EFF EW, — thruster efficiency east west station 
keeping 

X, 

EFF_DOR, — thruster efficiency de-orbit 
EFF_SR, — thruster efficiency station repositioning 

STABLE_LONGITUDE, 

DAYS TO REPOSITION, 

DEGREES_TO_REPOSIT10N, 

DELTA_FUEL_STATI0N_REP0SIT10NING. 

EFF_STATI0N_REP0S1T10N FLOAT; 

W0RST_L0NG1TUDINAL_DRIFT_ACCELERAT10N ; constant FLOAT : = 
-0.00168; 

STABLE_LONGlTUDE_EAST ; constant := 75.0; 
STABLE_LONGlTUDE_WEST : constant := 255.0; 

GRAVITY : constant :=9.81; —m/s 

F1RST_YEAR : INTEGER :=1991; 

LAST_YEAR -.INTEGER := 2003; 

N, 

L 

CHOICE, 

SPACECRAFT LIFE : INTEGER; 

type DRIFT_PER_YEAR is array (FIRST_YEAR..LAST_YEAR) of 
FLOAT; 

DRIFT: DRIFT PER YEAR 

.-=(0.897,0.867,0.834,0.802,0.775,0.756,0.748,0.752, 

O. 767,0.792,0.823,0.856,0.888); 

- 1991 through 2003 
begin 

NEW_LINE(2); 


85 





PU*^ LrINE(') 

Niw_LINE(2); 

SET_COL(10); 

PUT_LINE("Enter the tolerance of spacecraft LATITUDE as real 
number."); 

GET_DATA(TOLERANCE); 

VIDEO. CLEARSCREEN; 

PUT("Tolerance is ")■ 
set_col(60); 

PUT(TOLERANCE,FORE= >6,AFT= >2,EXP= >0);PUT(" deg"); 
TOLERANCERADIANS: =TOLERANCE*Pl/180.0; 

SETCOLflO); 


< <YEAR> > 

NEW_LINE(2); 

PUT LINE("*********♦****************♦***♦**♦*************♦******************") 
NEWLINE; 

PUT LINE("Please enter the beginning year as an int '^er"); 

SEtJcOL(5); 

GET_INTEGER (FIRST YEAR); 

VIDEO.CLEARSCREEN; 
if FIRST_YEAR < 1991 then 
VlDEO.CLEAR_SCREEN; 

PUT_LINE("ERR0R. First Year is lower ti..n 1991"); 

PUT_LINE("Please Try Again.'); 

NEW_LINE(3); 
goto year; 
end if; 

SET_COL(K); 

NEW_LINE(2/ 

PUT("First ye; r of lifetime is"); 

NEW_LINE(2); 


PUT LINE( 




NEW_LINE(2); 

SET_COL(60); 

PUT(FIRST_YEAR,WIDTH= >5); 
NEW_LINE(2); 

SET_COL(5); 


< <YEARA> > 


PUT_LINE("Please enter the ending year as an integer"); 
SET_COL(5); 

GET INTEGER (LAST YEAR); 

VIDEO.CLEAR SCREEN; 

NEW_LINE(2); 


86 





PUT lINEC’*"*"*"*"*"*"*"*"*"*'^’*"*"*"*"*"*"*"*"''*’'"*"*"*"*"*"*'’*"*"*"*"*"'”''*''"*'’*''*"*"'"'"'"*'’'"*"*"*'****’*"*' 
NEW_LINE; 

ifLAST_YEAR < FIRST_YEAR then 
VIDEO.CLEAR_SCREEN; 

PUT_LINE("ERROR. :Last Year is lower than First 

Year"); 

PUT_LINE('Please Try Again."); 

NEW_LINE(3); 
goto YEAR; 

elsif LAST_YEAR > 2003 then 
VIDEO. CLEAR_SCREEN; 

PUT_LINE("ERROR Last Year is greater than 2003’); 

PUT_LINE("Please Try Again.’); 

NEW_LINE(3); 
goto YEARA; 
end if; 

SET_COL(5); 

PUT("Last year of expected lifetime is"); 

SET_COL(60); 

PUT(LAST_YEAR,WIDTH= >5); 

NEW_LINE(2); 

PUT lINE("*’*'******’'‘***********************’''**’*'******************* 
NEW_LINE(2); 

SPACECRAFT_L1FE: = LAST_YEAR-FIRST_YEAR + 1; - Total years 
includes ending year 
NEW_LINE(2); 

SET_COL(5); 

PUT("Spacecraft life is "); 

PUT(SPACECRAFT_LIFE. width = >3); 

PUT(" years’); 

PUT(" (launch year counts as one year)"); 

NEW_LINE(2); 


PUT LINEf’************************************’''****************** 
NEW_L1NE(2); 

SET_COL(10);PUT("TO CONTINUE ENTER ANY INTEGER"); 
GET_INTEGER(I); 


VIDEO. CLEARSCREEN; 
PUT LINE( 


87 





NEWLINE; 

SET_COL(5); 

PlJT("Drift per year '); 

while FIRST YEAR < = LAST YEAR loop 

INCLINATIONDRIFTYE AR; = INCLINATION_DRIFT_YEAR + DRIFT(FIRST_YE AR); 


SET_COL(5); 

PUT(FIRST_YEAR,WIDTH => 5); 

SET_COL(20); 

PUT(DRIFT(FIRST_YEAR), FORE= > 1. AFT= > 4, EXP= >0); 
FIRSTYEAR: = FIRST_YEAR +1; 


end loop; 
NEW_LINE(2); 


PUT linE( "********************************************’•*********** 
NEW_LINE(2); 

SET_COL(10);PUT("TO CONTINUE ENTER ANY INTEGER”); 
GET_INTEGER(I); 


AVERAGE_DRIFT_PER_YEAR:=INCLINATION_DRIFT_YEAR/FLOAT(SPACECRAFT_L 

IFE); 


NEW_LINE(2); 

ADPY: = AVERAGE_DRIFT_PER_YEAR; 
SET_COL(5); 

NEW_LINE(2); 


PUT LINE( "******************************************************* 

NEW_LINE(2); 

VIDEO. CLEARSCREEN; 

SET_COL(5); 

PUT(" Average drift rate per year is "); 

SET_COL(60); 

PUTCADPY, FORE = > 4, AFT = > 4, EXP = > 0); 

PUT(" degrees"); 

TIM E_NS: = (2.0*TOLERANCE/ADP Y)*365.25; 

NEW_LINE(2); 

SET_COL(5); 

PUT(" Time spent in north south station keeping is "); 

SET_COL(60); 

PUT(TIME_NS, FORE = > 4, AFT = > 4, EXP = > 0); 

PUT(" days"); 


88 




NORTH_SOUTH_MANEUVERS: = (FLOAT(SPACECRAFT_LIFE)*ADPY)/(2.0*TOLERAN 
CE); 

NEW_LINE(2); 

SET_COL(5); 

PUT(" Number of north south maneuvers is (REAL)’); 

SET_COL(60); 

PUT(NORTH_SOUTH_MANEUVERS, FORE = > 4, AFT = > 4, EXP = > 0); 

N:=INTEGER(NORTH_SOUTH_MANEUVERS); 

NORTH_SOUTH_MANEUVERS_INTEGER:=FLOAT(N); 

-NEW_LINE(2); 

-SET_COL(5); 

-PUT(" S'); 

-PUT(NORTH_SOUTH_MANEUVERS,FORE=>4,AFT=>4,EXP => 0); 


if NORTH_SOUTH_MANEUVERS_INTEGER < NORTH_SOUTH_MANEUVERS then 

NORTH_SOUTH MANEUVERS INTEGER: = NORTH_SOUTH_MANEUVERSJNTEGER ^1.0; 
end if; 

NORTH_SOUTH_MANEUVERS; = NORTH_SOUTH_MANEUVERSJNTEGER; 
NEW_L1NE(1); 

SET_COL(5); 

PUT(" Number of north south maneuvers is (ROUND UP)"); 

SET COL(60); 

PUT'(N0RTH_S0UTH_MANEUVERS. FORE = > 4, AFT = > 4, EXP = > 0); 
DELTA_VEL0C1TY NORTHJOUTH: = 

NORTH_SOUTH_MANEUVERS C 148*SIN(TOLERANCE_RAD1ANS)*1000.0; 
NEW_LINE(2); 

SET_COL(5); 

PUT(" Delta velocity north south is"); 

SET_COL(60); 

PUT{DELTA_VELOCITY_NORTH_SOUTH, FORE = > 4, AFT = > 4, EXP = > 

0 ); 

PUT(" m/sec"); 

NEW_LINE(2): 




NEW_L1NE(2); 


SET_COL(10);PUT("TO CONTINUE ENTER ANY INTEGER"); 
GETJNTEGERd); 


-- East West station keeping 
VIDEO. CLEAR_SCREEi -; 


89 








NEW_LINE(2); 


PUT lINEC**********’*'*''"''*************’*'*****’''********’''**’*'***'*'*’*'*** 
NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("Enter the spacecraft OPERATING LONGITUDE”); 

NEW_LINE(2); 

SET_COL(5); 

GET_DATA(OPERATING_LONGITUDE); 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(10): 

PUT("Operating Longitude is "); 

PUT(OPERATING_LONGITUDE, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" degrees longitude"); 

NEW_LINE(2); 

PUT hnE("****‘*'*****’'‘********************’'"**********'''*****’''****** 

NEW_LINE(2); 

SET_COL(5); 

if OPERATING_LONGITUDE > 345.0000 
and OPERATING_LONGITUDE < =360.0 then 
DELTA_LAMDA: = SIN(2.0*PI/180.0* 

(360.0-OPERATING_LONGITUDE+STABLE_LONGITUDE_EAST)): 
STABLE_LONGITUDE: = STABLE_LONGITUDE_EAST; 

elsif OPERATING_LONGITUDE > = 0.0 
and OPERATING LONGITUDE < 165.0 and OPERATING_LONGITUDE / = 
75.0 then 

DELTALAMDA: = SIN(2.0*PI/180.0* 
(OPERATlNG_LONGITUDE-STABLE_LONGITUDE_EAST)); 
STABLELONGITUDE: = STABLE_LONGITUDE_EAST; 

elsif OPERATING LONGITUDE > 165.0 
and OPERATlNG_LONGITUDE <345.0 and OPERATING LONGITUDE / = 
255.0 then 

DELTA_LAMDA: =SIN(2.0*PI/180.0* 
(OPERATING_LONGITUDE-STABLE_LONGITUDE_WEST)); 
STABLE_LONGITUDE; = STABLE_LONGITUDE_WEST; 

elsif OPERATING LONGITUDE = 165.0 or OPERATING LONGITUDE = 
345.0 then 

DELTALAMDA: = WORST_LONGITUDINAL_DRlFT_ACCELERAT]ON; 
SET_COL(5); 

PUT("Delta Lamda is '); 

PUT(DELTA_LAMDA,FORE= >4,AFT= >2,EXP= >0); 

PUT(" degrees"); 


90 






elsif OPERATING_LONGITUDE = 255.0 or OPERATING_LONGITUDE = 
75.0 then 

SET_COL(5); 

PIJT(" Stable longitude so time between east-west is"); 
SET_COL(5);PUT{"essentially infinite"); 

TIME_EW;=0.0; 

NEW_LINE(2); 

SET_COL(5); 

PUT(" Time between east west keeping is "); 

PUT(TIME_EW, FORE = > 4, AFT = > 4, EXP = > 0); 

NEW_LINE(2); 

SET_COL(5); 

LAMDA_DOT_DOT: =0.0; 

SET_COL(5); 

PUT("DelU Lamda DOUBLE DOT is "); 
PUT(LAMDA_DOT_DOT,FORE= > 1,AFT= >7,EXP= >0); 

PUTC degrees/day"'2"); 


end if; 


if OPERATING_LONGITUDE/= 75.0 then 
if OPERATlNG_LONGITUDE /= 255.0 then 

LAMDA_D0T_D0T: = ABS((W0RST_L0NG1TUD1NAL_DR1FT_ACCELERAT10N)*(DELTA 
_LAMDA)); 

NEW LINE(2); 

SET_COL(5); 

PUT("Delta Lamda DOUBLE DOT is "); 

SET_COL(50); 

PUT(LAMDA_DOT_DOT,FORE= > 1,AFT= >7,EXP= >0); 

PUT(" degrees/day''2"); 


— Average time interval between east-west station keeping 
days 


TIME_EW: = 4.0*SQRT^(TOLERANCE/LAMDA_DOT_DOT)); 
NEW_LINE(2); 

SET_COL(5); 

PUT(" Time between east west keeping is "); 

SET_COL(50); 

PUT(TIME_EW, FORE = > 4. AFT = > 4, EXP = > 0); 
PUT(’ days'); 
end if; 
end if; 


DELTAVELOCITYEASTWEST; = ABS( 1. /4*SIN(2.0*PI/180.0 


91 







*(OPERATING_LONGITUDE-STABLE_LONGITUDE))*FLOAT(SPACECRAFT_LIFE)); 

NEW_LINE(2): 

SET_COL(5); 

PIJT(" Delta velocity east west is"); 

SET_COL<50); 

PUT(DELTA_VELOCnT_EAST_WEST, FORE = > 4, AFT = > 4, EXP = > 0); 
PUT(" m/sec'); 


— Total delta velocity required 
NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("The default propulsion efficiency in the N-S 
direction is 0.91"); 

SET_COL(5); 

SET_COL(5); 

PUT_LINE("The default propulsion efficiency in the E-W 
direction is 0.99"); 

NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("enter an integer ’1’ to CHANGE default values'); 

NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("To accept default values enter integer 2 "); 

GET_INTEGER(CHOICE); 

case CHOICE is 
when 1 = > 

VIDEO.CLEAR_SCREEN; 

SET_COL(5); 

PUT LINECPlease enter desired N-S propulsion efficiency'); 

SET_COL(5); 

GET_DATA(EFF_NS); 

NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("Now enter desired E-W propulsion efficiency'); 

SET_COL(5); 

GET_DATA(EFF_EW); 

VIDEO. CLEARSCREEN; 
when OTHERS = > 

VIDEO.CLEAR SCREEN; 

NEW_LINE(2); 

SET_COL(5); 

PUT_L1NE ("Understand no changes desired"); 

NEW_LINE(3); 
end case; 

DELTA_VELOCITY_TOTAL: =(DELTA_VELOCITY_NORTH_SOUTH/EFF NS) 
-(-(DELTA_VELOCITY_EAST_WEST/EFF_EW); 

NEW_LINE(2); 


92 






SET_COL(10); 

PUT("Delta velocity total is "); 

PUT(DELTA_VELOCITY_TOTAL, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT (" km/sec"); 

NEW_LINE(2): 


PUT lINEC"*************’*’********’''****''"''**’''*****’'"*’''*************** 
NEW_LINE(2); 

SET_COL(10);PUTCTO CONTINUE ENTER ANY INTEGER"); 
GET_INTEGER(I); 

VIDEO. CLEAR_SCREEN; 


~ STATION REPOSITIONING 
SET_COL(5); 

PUT_LINE("Enter the numbers of days to reposition"); 


SET_COL(5); 

GET_DATA(DAYS_TO_REPOSITION); 

VIDEO.CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(10); 

PUT("Number of Days to Reposition is "); 


SET_COL(50); 

PUT(DAYS_TO_REPOSITION, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT (" days'); 

NEW LINE(2); 


F UT linE(******************************************************** 


NEW_LINE(2); 

SET_COL(5); 


~ Get how many degrees to reposition satellite 
SET_COL{5); 

PUT_LINE("Enter the number of degrees to reposition"); 
SET_COL(5); 

PUT_LINE(“as real number.'); 
GET_DATA(DEGREES_TO_REPOSmON); 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 


PUT UINE("******************************************************* 

« ^ ^ • 

NEW_LINE(2); 

SET_COL(10); 

PUT('Number of Degrees to Repo.sition is '); 

SET_COL(50); 

PUT(DEGREES_TO_REPOSlTION, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(' degrees'); 


93 








“ Delta velocity to reposition satellite 


DELTA_VELOCITY_STATION_REPOSITIONING: = 5.66* 
DEGREES_TO_REPOSmON/DAYS_TO REPOSITION; 

NEW_LINE(2); 

SET_COL(10); 

PUT(’Delta velocity for station repositioning is"); 

SET_COL(50); 

PUT(DELTA_VELOCITY_STATION_REPOSmONING, FORE = > 6, AFT = > 2. 
EXP = > 0); 

PUTC m/sec"); 

NEW_LINE(2); 

PUT LINE(" ♦♦♦♦♦♦j^*******^***+**+'#'*****+***+*+*****+'#'****++******* 
NEW_LINE(2); 


end STAT10N_KEEPING_REP0SIT10NING; 
procedure MASS 

(DEI TA_VELOClTY_NORTH_SOUTH : in FLOAT; 

DELTA_VELOClTY_EAST_WEST : in FLOAT; 

DELTA_VEL0CITY_STATI0N_REP0SIT10NING : in FLOAT; 
DELTA_VELOCITY : in FLOAT; 

EFF_NS ; in FLOAT; 

EFF_EW : in FLOAT; 

SPACECRAFT_MASS_BEFORE_APOGEE_BURN : in out FLOAT; 
COMM_PACKAGE_MASS : in out FLOAT) 


gravity ; constant FLOAT := 9.81; -- m/s 

Y ; constant FLOAT := 7.0; 

constant 

ADAPTOR ; constant FLOAT 45.0; 

ISP_ORBIT: FLOAT := 278.0; -sec 

MASS_REFERENCE : FLOAT ; = 1900.0; 

kilograms 

SPACECRAFT : FLOAT; 

PRE_AMF_REFERENCE: FLOAT := 7.0; -kg 

AMF_REFERENCE : FLOAT := 861.0; -kg 

POST_AMF_REFERENCE: FLOAT := 29.9; -kg 

MASS_CHANGE_POST_AMF;FLOAT := 0.0; 
PRESSURANT_REF: FLOAT := 5.0; - kg 

MARGIN_REF: FLOAT : = 2.0; - kg 

ON_ORBlT_CONTROL_REF ;FLOAT : = 118.0; - kg 

ATTlTUDE_CONTROL_REF :FLOAT := 12.3; -kg 

ISP AMF : FLOAT := 300.0; - sec 

DEORBIT_REFERENCE ; FLOAT ;= 5.2; - kg 


94 








PRESSURANT_REFERENCE: FLOAT 
MARG1N_REFERENCE : FLOAT 
DELTA_VELOCITY_DEORBIT:FLOAT 


SCALE FACTOR : constant FLOAT : = 1 
FACTOR : constant FLOAT ;= 1.05; 
MASS_RATIO : FLOAT; 

PRE_AMF, 

AMF, 

POST_AMF, 

BOL_MASS, 

ON ORBIT_CONTROL, 
ATTITUDE_CONTROL, 

DEORBIT, 

PRESSURANT, 

MARGIN, 


SPACECRAFT_DRY_MASS, 

SP ACECRAFT_BOL_M ASS, 

APOGEE MOTORJMPULSE, 
ORBITJMPULSE, 
MASS_SPACECRAFT, 
SPACECRAFT_MASS, 

MASS POST_AMF, 
MASS~EW_STATION_KEEPING, 

M ASS_NS_STATION_KEEPING, 
MASS STAT10N_REP0SIT10N1NG, 

mass'deorbit, 

MASS_DRY, 

MASSJNITIAL, 

MASSMARGIN, 

MASSPROPELLENTPRESSURANT, 

PROPELLENT_MARGIN, 

PROPELLENT_MASS, 

PROPELLENTEXPENDITURE, 

rROPELLENT_PRESSJRANT_MASS, 

PROPELLENT_MASS_CHANGE, 

PROPELLENTEXPENDITURE, 

BYPROPELLENTMASS, 

STRUCTURAL_MASS, 

THERM AL_CONTROL_MASS, 
ELECTRIC AL_SYSTEM_M ASS, 
MECHANICAL_SYSTEM_MASS, 
DRY_MASS, 

PAYLOAD_POWER, 


= 5.0; - kg 

2.0; - kg 

:= 7.0; 


.9; 


95 




HOUSEKEEPING_POWER, 


BATrERY_LOAD, 

SOLAR_ARRAY_LOAD, 
ELECTRICAL_POWER_MASS, 
EFF_STATION_REPOSITIONING, 

EFF_DEORBIT, 

PROPELLENT_MARGIN, 

X, 

Z, 

ON_ORBIT_CONTROL, 

TRACKING_TELEMETRY : FLOAT ; 

N : INTEGER; 

-DELTA_VELOCITY : constant FLOAT := 1.52 ; 

OUTF rFILETYPE; 


begin 


SET_COL(10); 

PUT_LINE("Enter the mass of the spacecraft in kilograms"); 

SET_COL(10); 

GET_DATA(SPACECRAFT_MASS_BEFORE_APOGEE_BURN); 

NEW_LINE(2); 

SET_COL<15); 

VIDEO. CLEARSCREEN; 

NEW_LINE(2); 

PUT("Spacecraft mass before apogee motor bum is "); 

PUT(SPACECRAFT_MASS_BEFORE_APOGEE_BURN, FORE = > 6, AFT = 

= > 0 ); 


PUT(" kgs"); 
NEW_LINE(2); 


PUT lINE("**************’*‘**********************^**************’^’^* 


NEW_LINE(2); 

SET_COL(10); 

PlJT("What is the specific impulse for apogee injection"); 


SET_COL(15); 

get_(lata(APOGEE_MOTOR_IMPULSE); 
VIDEO. CLE ARSCREEN; 


PUT LI^E(’'********* + *****>***********>*‘******’*‘****>*‘*********^*’*‘***** 
NEW_LINE; 

PUT("Specific Impul.se of Apogee injection is "); 


2. E.XP 


96 







PUT(APOGEE_MOTOR_IMPULSE, FORE = >4 , AFT = > 1, EXP = > 0); 
PUT(" sec"); 

NEW_LINE(2); 

PUT LiNE("‘t"t‘*******‘t‘’*‘****’t"t>**********"t"t'’t'****‘f*’t‘++***+*+*******+** 
NEW_LINE(2); 


-SPACECRAFT_MASS_BEFORE_APOGEE_BURN: = MASS_BEFORE_APOGEE BURN-ADA 
PTOR; 

SET_COL(10); 

PUT_LINE(" This mass budget uses modified INTELSAT V"); 

SET_COL(10); 

PUT_LINE ("data for a premliminary estimation purposes"); 

SET_COL(10); 

PUT_LINE("the reference data to a different satellite 
simply"); 

SET_COL(10); 

PUT_LINE ("changing the values labelled reference in the"); 

SET_COL(10); 

PUT LINE ("declaration statements"); 


NEW_LINE(3); 

SET_COL(5); 

PUT("Please enter the value for efficiency of station 
repositioning"); 

SET_COL(15); 

get_data(EFF_STATION_REPOSlTIONING); 

VIDEO. CLE AR_SCREEN; 

NEW_LINE(2); 

SET_COL(10); 

PUT("Efficiency of STATION REPOSITIONING is "); 

SET_COL(50); 

PUT(EFF_STATION_REPOSITIONING, FORE = >I , AFT = > 3, EXP = > 0); 
NEW LINE(2); 


PUT lINE("’*‘’*‘************************’*‘^****'*‘’*‘********************* 

4c9|i ifc )K ><( 34c >t<" y 


NEW_LINE(2); 

SET_COL(5); 

PUT("Please enter the value for efficiency of satellite 
deorbit"); 


SET_COL(15); 

get_data(EFF_DEORBlT); 

VIDEO. CLE AR_SCREEN; 

NEW_LINE(2); 

SET_COL(15); 

PUT("Efficiency of deorbit is "); 

PUT(EFF_DEORBlT, FORE = > 1 , AFT = > 3, EXP = > 0); 


97 




NEW_LINE(2); 


pjj'P L1NE("*********’*‘********’*******+***+***>*‘>*'*****’*‘*********’*‘**'*‘** 

«4t4i4e4t**4c*)t()tc"^. 

NEW_LINE(2); 

MASS_RATIO;=SPACECRAFT_MASS_BEFORE_APOGEE_BURN/MASS_REFERENCE; 

NEW_LINE(2); 

SET_COL(10); 

PUT("Mass Ratio is "); 

SET_COL(50); 

PUT(MASS_RATIO , FORE = > 6, AFT = > 2, EXP = > 0); 

SET_COL(10); PUT("TO CONTINUE ENTER ANY INTEGER"); 

GET_INTEGER(I); 

VIDEO. CLEAR_SCREEN; 

PRE_AMF:=MASS_RAT10*PRE_AMF_REFERENCE; 

NEW_LINE(2); 

SET_COL(10); 

PUTCPre amf is "); 

SET_COL(50); 

PUT(PRE_AMF , FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(" kgs"): 

AMF:=SPACECRAFT_MASS_BEFORE_APOGEE_BURN 

*(1.0-EXP((-DELTA_VELOCITY*1000.0)/{APOGEE_MOTOR_1MPULSE*GRAV1TY) 

)): 

NEW_LINE(2); 

SET_COL(10); 

PUT("AMF is "); 

SET_COL(50); 

PUT(AMF , FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(" kgs"); 


POST_AMF: = SPACECRAFT_MASS_BEFORE_APOGEE_BURN-AMF-PRE AMF; 


NEW_LINE(2); 

SET_COL(10); 

PUT("Post AMF is "); 

SET_COL(50); 

PUT(POST_AMF , FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" kgs"); 


MASS_CHANGE_POST_AMF: = MASS_RATIO*POST_AMF REFERENCE: 
NEW_LINE(2); 


98 





SET_COL(10); 

PUT("Mass Change POST AMF is "); 

SET_COL{50); 

PUT(MASS_CHANGE_POST_AMF, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" kgs-); 

NEW_LINE(2); 

PUT lINEC************************************’^****************** 
NEW_UNE(’2); 


SET_COL(10); 

PUT('What is the specific impulse for OPBjT maintainance’); 

SET_COL(15); 

get_daU(ORBIT_IMPULSE); 

VIDEO.CLEAR_SCREEN; 

PUT('Specific Impulse of orbit maintainance is ’); 

SET_COL(60); 

PUT(ORBIT IMPULSE, FORE = >4 , AFT = > 1, EXP = > 0); 

PUT(- sec’ll 
NEW_LINE(1); 

PUT LI’*++*’♦'**+*’♦'****++****+++*%++++♦++***+**+***+++*********** 

4i4e)«c]tt4(******"^. 

M ASS_NS_STATION_KEEPING: = POST_AMF*( 1.0- 

EXP((-DELTA_VEL0C1TY_N0RTH_S0UTH)/(0RB1TJMPULSE*GRAV1TY*EFF_NS)) 

); 

NEW_LINE(1); 

SET_COL(10); 

PUT("Change in mass for north south station keeping is”); 

SET_COL(60); 

PUT(MASS_NS STATI0N_KEEP1NG, FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(- kgs’); 


MASS_EW_STATI0N_KEEP1NG; =(P0ST_AMF-MASS_NS_STATI0N_KEEP1NG)*( 1.0- 
EXP((-DELTA_VELOCITY_EAST_WEST) 
/(ORBlT_IMPULSE*GRAVITY*EFF_EW))); 

NEW_LINE(2); 

SET_COL{10); 

PUT("Change in mass for east west station keeping is’); 

SET_COL(60); 

PUT(MASS_EW_S'^ATION_KEEPlNG, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(’ kgs’); 

MASSSTATIONREPOSITIONING —(POSTAMF-MASSNSSTATIONKEEPING 
-MASS_EW_STATION_KEEPING)*(1.0- 
EXP((-DELTA_VELOCITY STATION REPOSITIONING) 



/(0RB:T_IMPULSE*GRAVITY*EFF_STATI0N_REP0SIT10NING))); 

NEW_LINE(2); 

SET_COL(10); 

PUT("Change in mass for station repositioning is"); 

SET_COL(60); 

PUT(MASS_STATION_REPOSITIONING, FORE = > 6, AFT = > 2, EXP = > 
0 ); 


PUTC kgs’); 


ON_ORBlT_CONTROL: = POST AMF*( 1.0 

-EXP((-DELTA_VELOC1TY_DE’oRBIT)/(ORBIT_IMPULSE*GRAV1TY))); 

NEW_LINE(2); 

SET_COL(10); 

PUT("On orbit control is "); 

SET_COL(60); 

PUT(ON_ORBIT_CONTROL , FORE = > 6, AFT = > 2, EXP = > 0); 
PUTC kgs"); 


M ASS_DEORBIT: = (POST_AMF-M ASS_NS_STATION_KEEPlNG 
-MASS_EW_STATlON_KEEPlNG-MASS_STATION_REPOSITIONlNG)*(1.0- 

EXP((-DELTA_VELOCITY_DEORBIT)/(ORBIT_IMPULSE*GRAVTTY*EFF_DEORBIT) 

)); 

NEW_LINE(2); 

SET_CCL(10); 

PUTv^'Change in mass for de-orbit is"); 

SET_COL(60); 

PUT(MASS_DE0RB1T, FORE = > 5, AFT = > 2. EXP = > 0); 

PUT(" kgs"); 


PRESSURANT; = MASS_RATIO*PRESSURANT_REF; 

NEW_LINE(2); 

SET_COL(10); 

PUT("Pressurant is "); 

SET_COL(60); 

PUT(PRESSURANT , FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(" kgs"); 

PROPELLENT_MARGIN: = (MASS_NS_STATION_KEEPING-i-MASS EW STATION KEEPl 
NG 

-I- MASS STATlON REPOSlTlONlNG-hMASS DEORBIT 
+ PRE_AMF + MASS_CHANGE_POST_AMF-(-PRESSURANT)*0.02; 
NEW_LINE(2); 

SET_COL(10); 


100 




PUT("Propellent margin is (2% safety margin) "); 

SET_COL(60); 

PUT(PROPELLENT_MARGIN, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" kgs-); 


— Total mass change due to propellent expenditure 

PROPELLENT_EXPENDITURE; =(PROPELLENT_MARGlN*51.0) + AMF; 
NEW_LINE(2); 

SET_COL(10); 

PUT("Propellent Expenditure is"); 

SET_COL(60); 

PUT(PROPELLENT_EXPENDlTURE. FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" kgs"); 

SET_COL(10); PUT("TO CONTINUE ENTER ANY INTEGER"); 
GET_INTEGER(I); 
video, clearscreen; 


STRUCTURAL_MASS:=0.087*(SPACECRAFT_MASS_BEFORE_APOGEE_BUi’N);-ADA 

PTOR); 

NEW_LINE(2); 

SET_COL(10); 

PUT(" Structural mass is "); 


SET_COL(60); 

PUT(STRUCTURAL_MASS, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" kgs"); 


SPACECRAFT_BOL_MASS:=SPACECRAFT_MASS_BEFORE_APOGEE_BURN 

-AMF-ADAPTOR-PRE_AMF; 

NEW_LINE(2); 

SET_COL(10); 

PUT(" Spacecraft beginning of life mass is'); 

SET_COL(60); 

PUT(SPACECRAFT_BOL_MASS, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" kgs"); 

if DRUM_SPINNER = FALSE then 
THERM AL_CONTROL_M ASS; = 0.032*SP ACECRAFTBOLM ASS; 
NEW_LINE(2); 

SET_COL(10); 

PUT(" Thermal control mass is "); 

SET_COL(60); 

PUT(THERMAL_CONTROL_MASS, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(" kgs"); 
else 

THERMAL_CONTROL_MASS:=0.027*SPACECRAFT_BOL_MASS; 

NEW_L1NE(2); 

SET_COL(10); 

PUT(" Thermal control mass is "); 


101 









SET_COL(60): 

PUT(THERMAL_CONTROL_MASS, FORE = > 6. AFT = > 2. EXP = > 0); 
PUTC kgs’); 
end if; 

if DRUM_SPINNER = FALSE then 

ATTrrUDE_CONTROL;=65.0 + 0.022*(SPACECRAFT_BOL_MASS-700.0); 
NEW_LINE(2); 

SET_COL(10); 

PUT(' Attitude control mass is *); 

SET_COL(60); 

PUTfATTITUDE CONTROL, FORE = > 6, AFT = > 2, EXP = > 0); 

PUTC kgs’); 
else 

ATTITUDE_CONTROL; - 31.0+0.027*(SPACECRAFT_BOL_M ASS-700.0); 
NEW_LINE(2); 

SET_COL(10); 

PUT(" Attitude control mass is ")•, 

SET_COL(60:; 

PUT(ArTITUDE_CONTROL, FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(" kgs’); 
end if; 


ELECTRICAL SYSTEM_MASS: =0.039*SPACECRAFT_BOL_MASS; 

NEW_LINE(2)T 

SET_COL(10); 

PUT(" Electrical system mass is ’); 


SET_COL(60); 

PUT(ELECTRICAL_SYSTEM_MASS, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(’ kgs’); 


MECHANICAL_SYSTEM_MASS:=0.014*SPACECRAFT_BOL_MASS; 

NEW_LINE(2); 

SET_COL(10); 

PUT(’ Mechanical system mass is ’); 


SET_COL(60); 

PUT(MECHANICAL_SYSTEM_MASS, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(’ kgs’); 


BYPROPELLENT_MASS:=0.084*PROPELLENT_EXPEND1TURE; 

NEW_LINE(2); 

SET_COL(]0); 

PUT(’ Propellent is ’); 

SET_COL(60); 

PUT(BYPROPELLENT_MASS , FORE = > 6, AFT => 2 , EXP = > 0); 
PUT(’ kgs’); 

NEW_LINE(2); 


102 



PROPELLENT_PRESSURANT_MASS:=PROPELLENT_EXPENDITURE-AMF; 

SET_COL(10); 

PUT("Mass of propellent pressurant is ’); 

SET_COL(60); 

PUT(PROPELLENT_PRESSURANT_MASS,FORE = > 6, AFT = > 2, EXP = > 
PUTC kgs-); 

NEW_LINE(2); 

SPACECRAFT_DRY_MASS: = SPACECRAFT_MASS_BEF0RE_AP0GEE_BURN 
-PROPELLENT_EXPENDITURE; 

SET_COL(10); 

PUT("Spacecraft Dry Mass is’); 

SET_COL(60); 

PUT(SPACECRAFT_DRY_MASS,FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(- kgs’); 

NEW_LINE(2); 

SET COLdO); PUT(’TO CONTINUE ENTER ANY INTEGER’); 
GET_INTEGER(I); 

VIDEO.CLEARSCREEN; 

MASS_MARGIN: =0.1*SPACECRAFT_DRY_MASS; 
new line(I); 

SET~COL(10); 

PUT("Spacecraft mass margin is"); 

SET_COL(50); 

PUT(MASS_MARGIN,FORE = > 6, AFT = > 2. EXP = > 0); 

PUT(- kgs-); 

NEW_LINE(2); 

COMM_PACKAGE_MASS: = SPACECRAFT_MASS_BEFORE_APOGEE_BURN 
-STRUCTURAL_MASS 
-THERMAL_CONTROL_MASS 
-PROPELLENTEXPENDITURE 
-ATTITUDECONTROL 
-ELECTR1CAL_S YSTEMM ASS 
-MECHANICALSYSTEMMASS 
-MASS_MARG1N 
-MASS_CHANGE_POST_AMF 
-PROPELLENT_PRESSURANT_MASS; 

SET_COL(10); 

PUT(’Communications package mass is "); 

SET_COL(50); 

PUT(COMM_PACKAGE_MASS,FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(- kgs-); 

NEW_L1NE(2); 

PUT Lj^£(*''*‘****+****+**+*****++*****+*++****+*+**********’t'*+***** 
NEW_LINE(2); 


0 ); 


103 











CREATE(OUTF,NAME= > "PROPBUDG.DAT"); 


" header for propellent budget 

“ top line of header 

SET_LINE(OUTF,l); 

SET_COL(OUTF,l); 

PUT(OUTF, "MANEUVER"); 

SET_COL(OUTF,25); 

PUT(OUTF."DelU"); 

SET_COL(OUTF,35); 

PUT(OUTF. "Specific"); 

SET_COL(OUTF,48); 

PUT(OUTF,"Mass"); 

SET_COL(OUTF,58); 

PUT(OUTF,"Final"); 

SET_COL(OUTF,66); 

PUT(OUTF, "Efficiency"); 


" second line of header 

SET_LINE(0UTF,2); 

SET_COL(OUTF,23); 

PUT(OUTF,"Velocity"); 

SET_COL(OUTF,35); 

PUT(OUTF, "Impulse"); 

SET_COL(OUTF,47); 

PUT(OUTF, "Change"); 

SET_COL(OUTF,58); 

PUT(OUTF,"Mass"); 


-- third line of header 

SET_LINE(0UTF,3); 

SET_COL(OUTF.25); 

PUT(OUTF,"(ra/s)"); 

SET_COL(OUTF,37); 

PUT{OUTF,"(s)"); 

SET_COL(OUTF,48); 

PUT(OUTF,"(kg)-); 

SET_COL(OUTF,58); 

PUT(OUTF,"(kg)"); 

SET_LINE(OUTF,4); 

PUT("- 

--"); 


~ start first data line 
SET_LINE(OUTF,5); 


104 








SET_COL(OUTF,l); 

PUT(OUTF, "Separation"); 

SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE_APOGEE_BURN,FORE= >4,AFT= > 1,EXP= >0 

): 

-- second line of data 
SET_LINE(OUTF,7); 

SET_COL(OUTF,l); 

PUT(OUTF,"Before AMF"); 

SET_COL(OUTF,46); 

PUT(OUTF,ADAPTOR,FORE= >4,AFT= > 1,EXP= >0); 

SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE_APOGEE_BURN-ADAPTOR,FORE= >4,AFT= > 
1,EXP=>0); 

— third line of data 
SET_LINE(OUTF,9); 

SET_COL(OUTF,l); 

PUT(OUTF,"AMF"); 

SET_COL(OUTF,25); 

PUT(OUTF,DELTA_VELOCITY*1000.0,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF,37); 

PUT(OUTF,APOGEE_MOTOR_IMPULSE,FORE= >4.AFT= > 1,EXP= >0); 
SET_COL(OUTF,46); 

PUT(OUTF.AMF,FORE = >4,AFT= > l.EXP= >0); 

SET COL(OUTF,57); 

PUT(OUTF,SPACECRAFT MASS_BEFORE_APOGEE_BURN-ADAPTOR-AMF 
,FORE= >4,AFT= > 1,EXP= >0); 

SET_COL(OUTF,69); 

PUT(OUTF,"1.00"); 


— fourth line of data 
SET_LINE(OUTF.ll); 

SET_COL(OUTF,l); 

PUT(OUTF,"Post AMF"); 

SET_COL(OUTF,46); 

PUT(OUTF.MASS CHANGE_POST_AMF,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE_APOGEE_BURN-ADAPTOR 

-AMF-PRE_AMF-MASS_CHANGE_POiT_AMF,FORE= >4,AFT= > 1,EXP= >0); 
-- fifth line of data ns station keeping 
SET_LlNE(OUTF,13); 

SET_COL(OUTF,l); 

PUT(OUTF,"N-S station keeping"); 

SET_COL(OUTF,25); 

PUT(OUTF,DELTA_VELOClTY_NORTH_SOUTH.FORE= >4.AFT= > 1,EXP= >0); 
SET_COL(OUTF,37); 

PUT(OUTF,ORBlT_IMPULSE,FORE= >4,AFT= > 1,EXP= >0); 

SET_COL(OUTF.46); 

PUT(OUTF.MASS_NS_STATION_KEEPING,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF.57); 


105 











PUT(OUTF,SPACECRAFT_MASS BEFORE_APOGEE_BURN-ADAPTOR 
-AMF-PRE_AMF-MASS CHANGE_POST_AMF 
-MASS_NS_STATION_KEEPING,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF.69); 

PUT(OUTF,EFF_NS,FORE= > 1,AFT= >2,EXP= >0); 


~ sixth line of data ew station keeping 
SET_L1NE(0UTF,15); 

SET_COL(OUTF.l); 

PUT(OUTF,’E-W station keeping*); 

SET_COL(OUTF,25); 

PUT(OUTF,DELTA VELOCITY EAST WEST,FORE= >4.AFT= > 1,EXP= >0), 
SET_COL(OUTF,37); 

PUT(OlJTF,ORBlT_IMPULSE,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL<OUTF,46): 

PlJT(OUTF,MASS_EW_STATION_KEEPING,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE_APOGEE_BURN-ADAPTOR 
-AMF-PRE_AMF-MASS_CHANGE POST_AMF 
-MASS_NS_STATION_KEEPING-MASS_EW_STATION_KEEPlNG 
,FORE= >4,AFT= > 1,EXP= >0); 

SET_COL(OUTF,69); 

PUT(OUTF,EFF_EW,FORE= > 1,AFT= >2,EXP= >0); 


-- seventh line of data station repositioning 
SET_LINE(OUTF.17): 

SET_COL(OUTF,l): 

PUTfOUTF,'Station Repositioning"); 

SET_COL(OUTF,25); 

PUT(OUTF.DELTA_VELOCITY_STATION_REPOS1T10NING,FORE= >4,AFT= > l.EXP 
> 0 ); 

SET_COL(OUTF,37); 

PUT(OUTF,ORBlT_IMPULSE,FORE= >4,AFT= > 1,EXP= >0); 

SET_COL(OUTF,46); 

PUT(OUTF.MASS_STATlON_REPOSITIONING,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE_APOGEE_BURN-ADAPTOR 
-AMF-PRE_AMF-MASS_CHANGE_POST_AMF 
-MASS_NS_STATION_KEEPING-MASS_EW_STATION_KEEPlNG 
-MASS_STATION_REPOSITIONING,FORE= >4,AFT= > l.EXP = >0); 
SET_COL(OUTF,69); 

PUT(OUTF,EFF_STATION_REPOSmONING,FORE= > 1,AFT= >2,EXP= >0); 


— eight line of data attitude control 
SET_LINE(OUTF,19); 

SET_COL(OUTF,l); 

PUTfOUTF,"Attitude Control"); 

SET_COL(OUTF,46); 

PUT(OUTF,ON_ORBIT_CONTROL,FORE= >4,AFT= > l.EXP= >0); 
SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE_APOGEE_BURN-ADAPTOR 


106 








-AMF-PRE_AMF-MASS_CHANGE_POST_AMF 
-MASS_NS_STAT10N_KEEPING-MASS_EW_STATI0N_KEEP1NG 
-MASS_STATION_REPOSmONING-ON_ORBIT_CONTROL 
,FORE= >4,AFT= > 1,EXP= >0); 

SET_COL(OUTF,69); 

PUT(OUTF,EFF_NS,FORE= > 1,AFT= >2,EXP= >0); 


~ ninth line of data de-orbit 
SET_LINE(OUTF,21); 

SET_COL(OUTF.l); 

PUT(OUTF. "De-orbit"); 

SET_COL(OUTF,25); 

PUT(OUTF,DELTA_VELOCITY_DEORBlT,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF,37); 

PUT(OUTF.ORBIT_lMPULSE,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF,46); 

PUT(OUTF,MASS_DEORBIT,FORE = > 4, AFT= > 1 ,EXP= > 0); 
SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE APOGEE BURN-ADAPTOR 
- AMF-PRE_AM F-M ASSCH ANGE_POST_AM F 
-MASS_NS_STATION_KEEPING-MASS_EW_STAT10N_KEEPING 
-MASS_STATION_REPOSITIONING-ON_ORBIT_CONTROL-MASS_DEORBIT 
,FORE= >4,AFT= > 1,EXP= >0); 

SET_COL(OUTF,69); 

PUT(OUTF,EFF_DEORBIT,FORE= > l.AFT= >2.EXP= >0); 


" tenth line of data pressurant 
SET_L1NE(0UTF,23); 

SET_COL(OUTF,l); 

PUT(OUTF. "Pressurant"); 

SET_COL(OUTF,46); 

PUT(OUTF,PRESSURANT,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL(OUTF,57); 

PUT(OUTF,SPACECRAFT MASS BEFORE APOGEE BURN-ADAPTOR 
-AMF-PRE_AMF-MASS_CHANGE_POST_AMF 
-MASS_NS_STATION_KEEPING-MASS_EW_STAT10N_KEEP!NG 
-MASS_STAT10N_REP0S1T10NING-MASS_DE0RB1T-PRESSURANT 
,FORE= >4,AFT= > 1,EXP= >0); 


— eleventh line of data margin propellent 
SET_LINE(OUTF,25); 

SET_COL(OUTF,l); 

PUT(OUTF,"Margin Propellent"); 

SET_COL(OUTF,46); 

PUT(OUTF.PROPELLENT_MARGIN,FORE= >4,AFT= > 1,EXP= >0); 
SET_COL<OUTF,57); 

PUT(OUTF,SPACECRAFT_MASS_BEFORE_APOGEE_BURN-ADAPTOR 
-AMF-PRE_AMF-MASS_CHANGE_POST_AMF 
-MASS_NS_STATION_KEEPlNG-MASS_EW_STATION_KEEPlNG 
-MASSSTATIONREPOSITIONING-MASSDEORBIT-PRESSURANT 
-PROPELLENT_MARGIN,FORE- >4,AFT- > !,EXP= >0); 

— total mass change 


107 







SET_LINE(OUTF,26); 

SET_COUOUTF,l); 

PUT(OUTF, _ 

_ ■); 

SET_LINE(OUTF,27); 

SET_COL(OUTF,l); 

PUT(OUTF,’Total Mass Change"); 

SET_COL(OUTF,46); 

PUT(OUTF,ADAPTOR + AMF + PRE_AMF + MASS_CHANGE_POST AMF 
+ MASS_NS_STATION_KEEPING + M ASS_EW_STATION_KEEPING 
+ M ASSSTATIONREPOSITIONING + M ASSDEORBIT + PRESSURANT 
+ PROPELLENT_MARGIN,FORE= >4,AFT= > 1,EXP= >0); 


CLOSE(OUTF); 

NEW_LINE(1); 

SET_LINE(OUTM,l); 

SET_COL(OUTM,10); 

PUT(OUTM,"SPACECRAFT MASS SUMMARY"); 
SET_LINE(OUTM,2); 

PUT(OUTM,"- 

- ■); 

SET_LINE(OUTM,3); 

PUT(OUTM, "Subsystem"); 

SET_COL(OUTM,40); 

PUT(OUTM,*Mass (kg)"); 

SET_LINE(OUTM,4); 

PUT(OUTM,"- 

- "); 


— Structure 

SET_LINE(OUTM,6); 

PUT(OUTM."Structure"); 

SET_COL(OUTM,40); 

PUT(OUTM,STRUCTURAL MASS,FORE = >4,AFT= > l.EXP= >0); 


-- Thermal 

SET_LINE(OUTM,8); 

PUT(OUTM, "Theimar); 

SET_COL(OUTM,40); 

PUT(OUTM,THERMAL_CONTROL_MASS,FORE= >4,AFT= > 1,EXP= >0); 


~ Propulsion 
SET_LINE{OUTM.10); 
PUT(OUTM, "Propulsion"); 
SET_COL(OUTM,40); 


108 










PUT(OUTM,BYPROPELLENT_MASS,FORE= >4,AFT= > 1,EXP= >0); 


— Attitude Control 
SET_LINE(OUTM,12); 

PUT(OUTM, "Attitude Control"); 

SET_COL(OUTM,40); 

PUT(OUTM,ATTITUDE_CONTROL,FORE= >4,AFT= > 1,EXP= >0); 


-- Electric Integration 
SET_LINE(OUTM,14); 
PUT(OUTM,"Electric Integration"); 


SET_COL(OUTM,40); 

PUT(OUTM,ELECTRICAL_SYSTEM_MASS,FORE= >4,AFT= > 1,EXP= >0); 


-- Mechanical Integration 
SET_LINE(OUTM.16); 

PUT(OUTM,"Mechanical Integration"); 

SET_COL(OUTM,40); 

PUT(OUTM,MECHANICAL_SYSTEM_MASS,FORE= >4,AFT= > 1,EXP= >0); 

— Mass Margin 
SET_LINE(OUTM,18); 

PUT(OUTM,"Mass Margin"); 

SET_COL(OUTM,40); 

PUT(OUTM,MASS_MARGIN,FORE= >4,AFT= > 1,EXP= >0); 

- Dry Spacecraft Mass 
SET_LINE(OUTM,20); 

PUT(OUTM,'Dry Spacecraft Mass"); 

SET_COL(OUTM,40); 

PUT(OUTM,SPACECRAFT_DRY_MASS,FORE=>4,AFT= >1.EXP= >0): 


-- Propellent Pressurant 
SET_LINE(OUTM,22); 

PUT(OUTM,"Propellent Pressurant"); 


SET_COL(OUTM,40); 

PUT(OUTM,PROPELLENT_PRESSURANT_MASS,FORE= >4.AFT= > l.EXP= >0); 


-- Apogee Motor Expendable 
SET_LINE(OUTM,24); 

PUT(OUTM,"Apogee Motor Expendable"); 
SET_COL(OUTM,40); 

PUT(OUTM,AMF,FORE= >4,AFT= > 1,EXP= >0); 


— Spacecraft Mass at Separation 
SET_LINE(OUTM,26); 

PUT(OUTM,"Spacecraft Mass at Seperation"); 

SET_COL(OUTM,40); 

PUT(OUTM,SPACECRAFT_MASS_BEFORE_APOGEE_BURN,FORE= >4,AFT= > 1,EXP= >0 


109 







); 


4i«4(*4<4<4c4i4i4^ 


end MASS; 


procedure ELECTRICAL_SYSTEM 

(SPACECRAFT_MASS BEFORE APOGEE BURN 

FLOAT; 

DRUM SPINNER : in out 

BOOLEAN; 

COMM_PACKAGE MASS ; in 

FLOAT) is 


NO, 

N, 

Y, 

YES, 

CHAR ; CHARACTER; 


SOLAR_ARRAY, 

CHARGE ARRAY, 

SHUNT, ~ 

CHARGE CONTROL, 

BATTERY, 

DISCHARGE_REGULATOR : FLOAT; 
LIFE_FACTOR; FLOAT 
POWER_MARGIN : FLOAT 
margin for error 
TTC FACTOR : FLOAT 
scale factor 


-- kg 
-- kg 

- kg 

-- kg 

-- kg 

- kg 

:= 1.05; 

:= 1 . 1 ; 

;= 1.75; - TT&C 


TRACKING TELEMETRY REFERENCE : FLOAT := 28.0; 
intelsat v 


INTELSAT_7_REFERENCE ; FLOAT ; = 3445.0; 

INTELSAT_6_REFERENCE : FLOAT : = 3700.0; 

INTELSAT_5_REFERENCE .FLOAT : = 1900.0; 

INTELSAT_7_ANTENNA_MASS : FLOAT ;=70.0; 

INTELSAT_6_ANTENNA_MASS : FLOAT : =309.0; 

INTELSAT_5 ANTENNA_MASS ; FLOAT ;=59.0; 

INTELSAT_5_HOUSEKEEPlNG_POWER: consUnt FLOAT := 211.0; - 
intelsat V 

INTELSAT_6_HOUSEKEEPING_POWER: constant FLOAT ;= 347.0; - 
intelsat VI 

lNTELSAT_7_HOUSEKEEPlNG_POWER: constant FLOAT := 613.0; - 
intelsat VII 


ELECTRICAL_POWER MASS, 
COMM_ELECTRICAL_SUBSYSTEM_MASS, 


110 










BATTERY LOAD, 
PAYLOADPOWER, 
PAYLOAD_MASS, 
ANTENNA_MASS, 

REFERENCE, 

HOUSEKEEPINGPOWER, 

SOLAR_ARRAY_LOAD, 

POWERFACTOR, 

X, 

TRACKING_TELEMETRY : FLOAT; 
CHOICE : INTEGER; 


— Reads an integer input from the keyboard 


begin 

REFERENCE: = INTELS AT_5_REFERENCE; 
ANTENNA_MASS:=INTELSAT_5_ANTENNA_MASS; 
HOUSEK£EPING_POWER:= INTELS ATSHOUSEKEEPINGPOWER; 


— The mass of the electrical power system is 
NEW_LINE(2); 

SET_COL<IO); 

PUT_LINE(”Enter the POWER requirements of the"); 

SET_COL(10); 

PUT_LINE("Spacecraft in watts as a real number"); 

SET_COL(15); 

GET_DATA(PAYLOAD_POWER); 

VIDEO.CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(15); 

PUT("Payload power requirements are "); 

SET_COL(60); 

PUT(PAYLOAD_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 
NEW_LINE(2); 


PUT LijqE^"**************************************************** 






NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("Choose which satellite you want as your reference 
for ’); 

SET_COL(5); 

PUT_LlNE("housekeeping power, mass in kilograms, and Antenna 
Mass '); 


SET_COL(5); 

PUT_L1NE(" Intelsat V Intelsat VI Intelsat 

VII"); 


111 









1900.0 kgs 3700.0 kgs 


SET_COL(5); 

PUT_LINE(’Mass 
3445.0 kgs'); 

SET_COL(5); 

PUT LINECAntenna Mass 59.0 kgs 309.0 kgs 
75.0 kgs'); 

SET_COL(5); 

PUT_LINE("Housekeeping 211.0 Watts 347.2 Watts 
613.0 Watts'); 

PUT_LINE(' Power"); 

SET_COL(5); 


PUT lINEC****"'"*"*'****'*'*’'"*'*****’*'*********'*'**’''***'*"''’*'*’************** 
SET_COL(5); 

PUT_LINE("For an INTELSAT V reference enter an integer ’1’ 
SET_COL(5); 

PUT_LINE('For an INTELSAT VI reference enter an integer ' 2 ' 
SET_COL(5); 

PUT_LINE('For an INTELSAT VII reference enter an integer ’3’ 
SET_COL(5); 

PUT_LINE('TO USE YOUR OWN REFERENCE VALUES enter an integer 
’4’ '); 

GET_INTEGER(CHOICE); 

case CHOICE is 
when 1 = > 

REFERENCE: =1NTELSAT_5_REFERENCE; 

ANTENN AM ASS: = INTELSAT_5_.ANTENNA_M ASS; 
HOUSEKEEPING POWER: = INTELSAT 5 HOUSEKEEPING POWER; 


when 2 = > 

REFERENCE: = INTELSAT_6_REFERENCE; 

ANTENNA_M ASS: = INTELSAT_6_ANTENNA_M ASS; 
HOUSEKEEPING POWER: = INTELSAT_6 HOUSEKEEPING POWER: 


when 3 = > 

REFERENCE: = INTELSAT_7_REFERENCE; 

ANTENN A_M ASS: =INTELSAT_7_ANTENN AM ASS; 
HOUSEKEEPING_POWER:=lNTELSAT_7_HOUSEKEEPING_POWER; 
when 4 = > 

PUT('Enter Satellite Ma-ss Reference'); 

SET_COL(15); 

GET_DATA(REFERENCE); 

NEW_LINE(3); 


PUT('Enter Satellite Antenna Mass Reference'); 
SET_COL(i5); 


112 








GET_DATA(ANTENNA_MASS); 

NEW_LINE(3): 


PUT(’Enter Satellite Housekeeping Power Requirements 
Reference"); 

SET_COL(15); 

GET_DATA(HOUSEKEEPING_POWER); 

NEW_LINE(3); 


when OTHERS = > 

NEW_LINE(2); 

SET_COL(5); 

PUT("Understand INTELSAT V DATA WILL BE USED’); 
end case; 


VIDEO. CLEAR_SCREEN; 

PUT linE(’*****‘*'****''‘**''‘*******’'‘*********’'‘**’*‘***’'"''****’''********** 

NEW_LINE;’ 

HOUSEKEEPING_POWER: = (SPACECRAFT_N' .SS_BEFORE_APOGEE_BURN 
/REFERENCE) 

♦HOUSEKEEPING_POWER; 

NEW_LINE(2); 

SET_COL(10); 

PUT(' Housekeeping power is '); 

SET_COL(50); 

PUT(HOUS£K^EPING_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(’ kg ,, 

BA'H'ERY . ^AD:=(HOUSEKEEPlNG_POWER + PAYLOAD_POWER)*LIFE_FACTOR; 
NEWLINEui; 

SE,_COL(10); 

PUT(" Battery load is "); 

SET_COL(50); 

^UT(BATTERY_LOAD, FORE = > 6. AFT = > 2, EXP = > 0); 

PUT(’ kg"); 


SOLAR_ARRAY_LOAD: = BATTERY_LOAD*POWER_M ARGIN; 
NEW_L1NE(2); 

SET_COL(10); 

PUT(’ Solar array load is ’); 

SET_COL(50); 

PUT(SOLAR_ARRAY_LOAD, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT(’ kg’); 


113 







-ELECTRICAL_POWER_MASS: = (PAYLOAD_POWER + HOUSEKEEPING_POWER)*(BATT 
TERY_LOAD + SOLAR_ARRAY LOAD); 


if DRUM SPINNER = FALSE then 


if BATTERY LOAD < 1875.0 then 


SOLAR_ARRAY 

CHARGE_ARRAY 

SHUNT 


:= 50.0; 
:= 7.8; 


-kg 
- kg 

kg 


CHARGE_CONTROL := 1.5; -kg 

BATTERY ;= 56.8; -kg 

DISCHARGEREGULATOR .= 0.2; -kg 


elsif BATTERY_LOAD < 3125.0 then 
SOLAR_ ARRAY := 42.0; -kg 

CHARGE_ ARRAY := 6.6; -kg 

SHUNT := 7.5; -kg 

CHARGE_CONTROL := 1.5; -kg 

BATTERY := 47.3; -kg 

DISCHARGEREGULATOR ;= 0.2; -kg 

elsif BATTERY_LOAD < 4375.0 then 
SOLAR_ARRAY := 33.0; -kg 

CHARGE_ARRAY : = 5.1; - kg 

SHUNT := 7.5; -kg 

CHARGE_CONTROL := 1.5; -kg 

BATTERY := 47.3; -kg 

DISCHARGE_REGULATOR ;= 0.2; -kg 


elsif BATTERY LOAD > = 
SOLAR ARRAY 
CHARGE_ ARRAY 
SHUNT 

CHARGE_CONTROL 

BATTERY 

DISCHARGEREGULATOR 
end if; 


4375.0 then 

:= 25.0; -kg 
:= 3.9; -kg 

••=7.5; -kg 

:= 1.5; - kg 

:= 47.3; -kg 

:=0.2; -kg 


elsif BATTERY LOAD < 1875.0 then 
SOLAR_ ARRAY ;= 125.0; -kg 

CHARGE_ARRAY := 19.5; -kg 

SHUNT := 7.5; -kg 

CHARGE_CONTROL ;= 1.5; -kg 

BATTERY ;= 56.8; -kg 

DISCHARGEREGULATOR := 0.2; -kg 


else 

SOLAR_ ARRAY := 70.0; -kg 

CHARGE_ARRAY := 11.0; -kg 






SHUNT :=7.5; -kg 

CHARGE_CONTROL := 1.5; 

BATTERY := 47.3; -kg 

DISCHARGE_REGULATOR := 0.2; 

end if; 


--kg 


POWER_F ACTOR; = LIFE_F ACTOR 

*(POWER_MARGIN*SOLAR ARRAY + POWER MARGIN*CHARGE ARRAY 

+ SHUNT 4- CHARGECONTROL + BATTERY + DISCH ARGE_REGULATOR) 
■K).001; 

NEW_LINE(2): 

SET_COL(10); 

PUT(" Power Factor is ’); 

SET_COL(50); 

PUT(POWER_FACTOR, FORE = > 4, AFT = > 4, EXP = > 0); 


ELECTR1CAL_POWER_MASS;=(PAYLOAD_POWER + HOUSEKEEPING_POWER)*POWER_F 
ACTOR; 

NEW_L1NE(2); 

SET_COL(10); 

PUT(" Electrical power sub-system mass is “); 

SET_COL(50); 

PUT(ELECTR1CAL POWER_MASS, FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(" kg'); 

PAYLOAD_MASS: = COMM_PACKAGE_MASS-ELECTRlCAL_POWER_MASS; 
NEW_LINE(2); 

SET_COL(10); 

PUT(" Payload mass is "); 

SET_COL(50); 

PUT(PAYLOAD_MASS, FORE = > 6, AFT = > 2, EXP = > 0); 

PUTC kg’); 


TRACKINGTELEMETRY; = 

(SPACECRAFTMASSBEFOREAPOGEEBURN/REFERENCE) 
*TRACKING_TELEMETRY_REFERENCE, 

NEW_LINE(2); 

SET_COL(10); 

PUTC Tracking telemetry and control mass is '); 

SET_COL(50); 

PUT(TRACKING_TELEMETRY, FORE = > 6, AFT = > 2. EXP = > 0); 
PUTC kg'); 

.. * 3ft 3# tfc 9ft % 4c ^ ^ ^ 4c ifc ;4( ^ 1^ 4c 4^ jfc ^ 4; jf 4e 4; 4r ^ aft 4e 3^ if; ifc 1(( 

4t4t3ft4c4t 

— communications 
SET_LINE(OUTM,28); 


115 









PUT(OUTM, "Communications"); —* 

SET_COL(OUTM,40); 

PUT(OUTM,PAYLOAD_MASS,FORE= >4,AFT= > 1,EXP= >0); 


— Antennas 

SET_LINE(OUTM,30); -* 

PUT(OUTM,"Antenna Reference Mass"); 

SET_COL(OUTM ,40); 

PUT(OUTM,ANTENNA_MASS,FORE= >4,AFT= > 1,EXP= >0); 


— electric power subsystem mass 
SET_LINE(OUTM,32); 

PUT(OlJTM,"Electric Power"); 

SET_COL(OUTM,40); 

PUT(OUTM,ELECTRICAL_POWER_MASS,FORE= >4,AFT= > 1,EXP= >0); 


- Telemetry and Control 
SET_LINE(OUTM,34); 

PUT(OUTM,"Telemetry and Command"); 


SET_COL(OUTM,40); 

PUT(OUTM,TRACKING_TELEMETRY,FORE= >4,AFT= > 1,EXP= >0); 




end ELECTRICAL_SYSTEM; 


begin 

CREATE(OUTM,NAME= > "SYSMASS.DAT"); 

DUAL_SPIN (DRUMSPINNER); 

VELOCITY (INCLINATIONRADIANS, 

DELTAVELOCITY); 

STATION_KEF,PING_REPOSIT10NING (DELTA_VELOClTY_NORTH SOUTH. 
DELTA VELOCITY EAST_WEST, 
DELTAVELOCITYSTATIONREPOSITIONING, 

EFFNS, 

EFF_EW); 


MASS (DELTA_VELOCITY_NORTH_SOUTH. 


116 








DELTA_VELOCITY_EAST_WEST, 

DELTA_VEL0C1TY_STATI0N_REP0SIT10NING, 

DELTAVELOCITY, 

EFF_NS, 

EFFEW, 

COMM PACKAGE MASS, 
SPACECRAFT_MASS_BEFORE_APOGEE_BURN); 

ELECTR1CAL_SYSTEM (COMM_PACKAGE_MASS, 

DRUMSPINNER, 

SPACECRAFT_MASS BEFORE_APOGEE_BURN); 


CLOSE(OUTM); 

SET_COL(10);PUT(’TO CONTINUE ENTER ANY INTEGER"); 
GET_INTEGER(I); 

VIDEO.CLEAR_SCREEN; 

NEW_LINE(2); 

PUT_LINE(’DATA FOR THIS DESIGN RUN ARE LOCATED IN THE 
FOLLOWING FILES:"); 

NEW_L1NE(1); 

PUT_LINE(" SYSMASS.DAT"); 

PUT_LINE(" PROPBUDG.DAT "); 

NEW LINE(2); 

PUT_LINE("TO KEEP DATA FROM BEING ERASED ON NEXT RUN"); 
PUT_LINE("USE DOS COMMAND REN (RENAME) "); 

NEW_LINE(1); 

PUT_LINE("EXAMPLE - REN SYSMASS.DAT SYSMASS.XYZ"); 


end MASSPRO; 


117 









I. 


Electric Photovoltaic Power System 


— Title 

— Author 

— Date 

— Revised 
“ Compiler 

— Description 


: Solar Power Determination 
; David Lasbbrook 
; 01 February 1992 
: 12 May 1992 
: OPENADA EXT 

: This procedure determines the solar power and number of 
cells required in to provide stated power requirements 
for a geosynchronous orbit. 


-with TEXTJO. GENERIC_ELEMENTARY_FUNCT10NS, GETDATA,VIDEO; 
-use TEXTJO, GETDATA ; 


with TEXTJO, MATH LIB, GETDATA, VIDEO; 
use TEXTJO, MATH_LIB, GETDATA; 


procedure SOLARPOWER is 

package FLOATJNOUT is new FLOATJO(FLOAT); 
use FLOAT JNOUT; 

package INTEGER JNOUT is new INTEGER JO(INTEGER); 
use INTEGER JNOUT; 

package BOOLEAN JNOUT is new ENUMERATION JO(BOOLEAN); 
use BOOLEAN_INOUT; 

- package GEFJNOUT is new GENERIC_ELEMENTARY_FUNCT10NS(FL0AT); 

- use GEF JNOUT; 


BUS_VOLTAGE_ALLOWABLE_DEV1ATI0N : FLOAT: =0.5; 


BYPASS DIODE VOLTAGE_DROP : FLOAT: = 1.1; - V DD 

— V_D Open circuit failure of one cell + minimum battery discharge voltage at EOL 

EOL_BATTERY_DISCHARGE_VOLTAGE : FLOAT; = 1.10; 

DEPTH_OF_DISCHARGE : FLOAT: =0.65; 

ECLIPSE TIME : FLOAT; = 1.20; 

MAXIMUM_BATTERY_CHARGE_VOLTAGE : FLOAT; = 1.5; 

SERIES CONNECTED DIODE VOLTAGE DROP ; FLOAT; = 0.8; 
NUMBER_SERlES_CONNECTED_DIODES : FLOAT; = 3.0; - 3 assumed 

BATTERY_CHARGER_VOLTAGE_DROP ; FLOAT: = 1.75; 
CHARGE_DISCHARGE_EFFICIENCY_BATTERY : FLOAT: = 0.9; 

EQUINOX_CHARGE_RATE : constant FLOAT ;= 15.0; — autumn 

SOLSTlCE_CHARGE_RATE : constant FLOAT := 45.0; — summer 

PI : constant FLOAT ;= 3.14159265359; 

SPACECRAFT_LIFE, 


118 






SPACECRAFT_MASS_BEFORE_APOGEE_BURN, 

PAYLOAD_POWER, 

CELL_AH, 

BUS_POWER, 

SERIES CELLS FOR_MIN_DIS VOLT, - N 
VOLTAGE_DROP_BATTERY_DC_DIODES, - V_DD 
VOLTAGE BUS LOW, - LOWEST VOLTAGE ON BUS 

CHARGING VOLTAGE, - MAXIMUM CHARGE_VOLTAGE 

BATTERY CHARGING VOLTAGE DROP, - 
VOLTAGE_CHARGE_ARRAY, -- voltage charge array 

SERIES CELLS FOR_MIN_DIS VOLT, 

EFFICIENCY, 

POWER EQUINOX_CHARGE, 

EQUlNOX_CHARGE_TlME, 

POWER SOLSTICE CHARGE, 

SOLAR ARRAY, 

CHARGE ARRAY, 

SHUNT. 

CHARGE_CONTROL, 

DISCHARGEREGULATOR, 

PAYLOAD_POWER. 

BATTERYLOAD. 

MlNIMUM_DISCHARGE_BUS_VOLTAGE, - V_DB 
BUS VOLTAGE. 

NUMBER_OF_BUSES. 

SOLAR_ARRAY_LOAD : FLOAT; 

LIFE_FACTOR : FLOAT := 1.05; 

POWER MARGIN : FLOAT ;= 1.1; --margin for error 

INTEI^SAT 7_REFERENCE . FLOAT .=3445.0; -kgs 

INTELSAT~6_REFERENCE : FLOAT : = 2227.0; -kgs 

INTELSAT_5_REFERENCE : float : = 1900.0; -kgs 

INTELSAT_7_HOUSEKEEPlNG_POW'ER: constant FLOAT := 613.0; - intelsat VII 
1NTELSAT_6_H0USEKEEPING POWER; constant FLOAT ;= 347.0; - intelsat VI 
INTELSAT_5 H0USEK£EPING~P0WER; constant FLOAT ;= 211.0; - intelsat V 

X. 

MASSREFERENCE. 

HOUSEKEEPINGPOWER, 

HOUSEKEEPING POWER REFERENCE ; FLOAT ; 

FINAL ; BOOLEAN :=TRUE; 

DRUM SPINNER ; BOOLEAN ;= FALSE; 

Y, 

y. 

N. 

n, 

CHAR : CHARACTER; 


I, 

CHOICE, 












NJNTEGER, 

J : INTEGER ; 

procedure PRINT HEADER is 
begin 

VIDEO. CLEAR_SCREEN; SET_LINE{ 1); 

NEW_LINE(2); 

SET_COL(10); 

PUT_LINE("This program walks through a basic design of the power'); 
SET_COL{10); 

PUT LINECrequirements of a solar powered geosynchronous satellite.'); 
NEWLINE; 

SET_COL(10); 

PUT_LINE('A1I pertinent data will be written to files.'); 

SET_COL{10): 

PUT_LINE('CELPARAM.DAT and SOLCELL.DAT'); 
new_line(l); 

end PRINT_HEADER; 


procedure DUAL_SPIN (DRUM_SPINNER ; in out BOOLEAN) is 
begin 

SET_COL(10); 

PUT_LINE('Is your spacecraft Spin Stabilized "); 

SET_COL(15); 

GET_CHARACTER(char); 
if CHAR = ’Y’ or CHAR = ’y’ then 
DRUM_SP1NNER; =TRUE; 
if DRUM_SPINNER = TRUE then 

VIDEO.CLEAR_SCREEN;SET_LINE(l); 

SET_COL(10); 

PUT_LINE("Satellite is Spin Stabilized'); 

MInTmUM_DISCHARGE_BUS_VOLTAGE:=35.0; -- V_DB 
BUS_VOLTAGE:=50.0; 

NEW_LINE(2); 

PUT LJN£("**** + *********>*‘** + **********+*****^ ++*** + ****************** + **‘ + *** + ") 
end if; 
else 

VIDEO.CLEAR_SCREEN;SET_LINE(l); 

SET_COL(10); 

PUT_LINE('Satellite is Three Axis Stabilized'); 
MINIMUM_DISCHARGE_BUS_VOLTAGE:=30.0; - V_DB 
BUS_ VOLT AGE: =42.0; 

NEW_L1NE(2); 

PUT LINE("’^**’*‘'*‘******************************************'*‘******************")‘ 
end if; 

end DUAL_SPIN; 

procedure OPERATING DATA (BATTERY LOAD : in out FLOAT; 

DRUM_SPINNER : in out BOOLEAN; 

MIN1MUM_DISCHARGE_BUS_V0LTAGE : in out FLOAT; 

BUS VOLTAGE : m out FLOAT; 


120 







BYPASS D10DE_V0LTAGE_DR0P : in out FLOAT; 
EOL_BATTERY_DISCHARGE_VOLTAGE : in out FLOAT; 
BUS_POWER : in out FLOAT; 

PAYLOAD_POWER ; in out FLOAT; 

DEPTH_OF_DISCHARGE : in out FLOAT; 


number of buses 


: in out FLOAT; 


SPACECRAFT_LIFE : in out FLOAT; 

ECLIPSE_TIME : in out FLOAT) is 


CHOICE, 

INPUT :INTEGER ; 

REPLACE : BOOLEAN : = FALSE; 

begin 


SETCOLIIO); 

PUT_LINE(’Enter the mass of the spacecraft in kilograms’); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(SPACECRAFT_MASS_BEFORE_APOGEE_BURN); 

VIDEO.CLEAR SCREEN; 

SET_COL(15); ~ 

PUT("Spacecraft mass before apogee motor bum is "); 

PUT(SPACECRAFT_MASS_BEFORE_APOGEE_BURN, FORE = > 6, AFT = > 2, EXP = > 0) 
PUTC kgs’); 

NEW_LINE(2); 

PUT LiNE^"******************************************************************'); 
NEW_LINE(2); 

M ASSREFERENCE; = INTELSAT_5_REFERENCE; 

HOUSEKEEPING_POWER_REFERENCE: = INTELSAT_5_HOUSEKEEPING_POWER; 


— The mass of the electrical power system is 
SET_COL(10); 

PUT_LINE(’Enter the POWER requirements of the Spacecraft in watts.’); 
NEW_LINE(2); 

SET_COL(15); 

GET_DATA(PAYLOAD_POWER); 

VIDEO.CLEARSCREEN; 

NEW_LINE(2); 

PUT(’Payload power requirements are ’); 

SET_COL(50); 

PUT(PAYLOAD_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 
PUT{’ Watts’); 

NEW_LINE(2); 

PUT lIN E( 


121 







NEW_UNE(2); 

SET_COL(5); 

PUT LINECChoose which satellite you want as your reference for '); 

SET_COL(5); 

PUTLINEC housekeeping power and spacecraft mass in kilograms."); 

NEW_LINE(2); 

PUT l_l'f^'^(^’*****************************************’***********‘**********‘****'’y 
NEv7_LINE(1); 

PUT_LINE(’ ’I’ ’2’ '3- ’); 

SET_COL(5); 

PUT LINEC Intelsat V Intelsat VI Intelsat Vll"); 

SET_COL(5); 

PUT_LINE("Mass 1900.0 kgs 2227.0 kgs 3445.0 kgs’); 

SET_COL(5); 

PUT_LINE('Housekeeping 211.0 347.0 613.0 ’); 

SET_COL(5); 

PUT LINECPower" ); 

PUT Lii>4E("*************"t'>t'*****>t‘>t‘****>t<>t'**+*****************+***********+*****")- 
SEtJcOL(5); 

PUT_LINE("For an INTELSAT V reference enter integer ’]’ ’); 

SET_COL(5); 

PUT_LINE("For an INTELSAT VI reference enter integer ‘2’ "); 

SET_COL(5); 

PUT_LINE{"For an INTELSAT Vll reference enter mteger '3’ "); 

SET_COL(5); 

PUT_LINE("For your own reference value’s enter integer ’4’ "); 

GET_INTEGER(CHOICE); 

case CHOICE is 
when 1 = > 

MASS_REFERENCE: = INTELSAT_5_REFERENCE; 

HOUSEKEEPlNG_POWER_REFERENCE:=INTELSAT_5_HOUSEKEEPlNG_POWER; 


when 2= > 

M ASS_REFERENCE-. = INTELS AT_6_REFERENCE; 

HOUSEKEEPING_POWER_REFERENCE:=INTELSAT_6_HOUSEKEEPING_POWER; 


when 3 = > 

M ASS^REFERENCE: = INTELSAT_7_REFERENCE; 

HOUSEKEEPING_POWER_REFERENCE: = lNTELSAT_7_HOUSEKEEPING_POWER; 


when 4 = > 

NEW_LINE(2); 

PUT LIN EC ) 

NEv7_LINE(2); 

VIDEO. CLE ARSCREEN ; 

PUT(’Please enter desired REFERENCE MASS'); 

SET_COL(15); 

GET_DATA(MASS_REFERENCE); 

VIDEO.CLEAR SCREEN; 


122 



NEW_LINE(2); 


PUT LINEC 




NEW_L1NE(2); 

PUT(’Please enter desired HOUSEKEEPING POWER reference"); 
SET_COL(15); 

GET_DATA(HOUSEKEEPING_POWER_REFERENCE); 

VIDEO. CLEARSCREEN; 


when OTHERS = > 


NEW_LINE(2); 

SET_COL(5); 

PUT("Understand INTELSAT V DATA WILL BE USED"); 
end case; 


HOUSEKEEPING_POWER:=(SPACECRAFT_MASS_BEFORE_APOGEE_BURN 

/MASS_REFERENCE) 

*HOUSEKEEPING_POWER_REFERENCE; 

VIDEO.CLEARSCREEN; 

NEWLINE; 

PUT("Housekeeping power is "); 

SET_COL(60), 

PUT(HOUSEKEEPING_PO'- . ' , FORE = > 6, AFT = > 2. EXP = > 0); 

NEW_LINE(1); 

BATTERY_LOAD- ^(HOUSEKEEPING_POWER + PAYLOAD_POWER)’*LlFE_FACTOR; 
PUT("Battery lor.J is (multplied by life factor of 1.05)"); 

SET_COL(6b', 

PUT(BATTERY_LOAD, FORE = > 6. AFT = > 2, EXP = > 0); 

NEW_LINE(1); 

SOLAR_ARRAY_LOAD: = BATTERY_LOAD*POWER_M ARGIN; 

PUT("SoIar array load is (multiplied by power factor of 1.10) "); 

SET COL(60); 

PUf(SOLAR_ARRAY_LOAD, FORE = > 6. AFT = > 2, EXP = > 0); 


new_line(2); 

PUT_LINE("The Battery Load value will be used in future calculations.'); 

PUT_LINE("If you want to change this value enter a ‘y’ for YES. If you wish to '); 

PUT_LINE("retain the value enter a 'n’ for NO. The value you enter ’); 
put_line("should be the BATTERY LOAD. ); 

PUT_LlNE{"BATTERY_LOAD = PAYLOAD POWER REQUIREMENTS + HOUSEKEEPING POWER"): 
PUT_LINE('This value is the BATTERY LOAD and will have no design factors ’); 

PUT LINECapplied to it."); 

SET_COL(10); 

NEW_LINE(2); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
VIDEO. CLE AR_SCREEN; 

NEW_LINE(1); 

PUT('Payload power requirements are "); 


123 



SET_COL(55); 

PUT(PAYLOAD_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(' Watts’); 
new_luie(2); 

PUT("Calculated Housekeeping power is "); 

SET_COL(55); 

PUT(HOUSEKEEPING_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 

PUT(" Watts’); 
new_line(3); 

PUT(’Please enter a value for the Battery Load'); 

NEW_UNE(2); 

PUT(’Remember to add your new housekeeping value to the payload power’); 

NEW_LINE(3); 

GET_DATA(BATTERY_LOAD); 

NEW_LINE(2); 

PUT LiNE(’*'*‘+‘t"t"*“t'****’t>*****‘t‘+*’t"t»t'*>t"t‘>t'***>t‘**>t"t‘*****+*+*+++++‘i<+*+*+>t'**+*****++’' 
NEW_LINE(2); 

VIDEO. CLEARSCREEN; 

PUT(’Battery Load is ’); 

SET_COL(60); 

PUT(BATTERY_LOAD, FORE = > 6. AFT = > 2, EXP = > 0); 

NEW_LINE(1); 

NEW_LINE(2); 

SOLAR_ARRA YLOAD; = BATTERY_LOAD*POWER_MARGIN; 

PUT("Solar array load is (multiplied by power factor of 1.10) ’); 

SET_COL(60); 

PUT(SOLAR_ARRAY_LOAD, FORE = > 6, AFT - > 2, EXP = > 0); 
end if; 

NEW_LINE(2); 

PUT lINEC***’''******************'*"''**'''’''*****'''***''"*"''**************************"); 
NE\V_LINE(2); 

PUT("PIease enter the spacecraft life in years'); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(SPACECRAFT_LIFE); 

NEW_LINE(2); 

PUT(’Spacecraft life is’); 

PUT(SPACECRAFT_LIFE,FORE= >3,AFT= > I,EXP= >0); 

PUT(’ years’); 

NEW_LINE(2); 

STOP; 


< <VALUE_NEW> > 

PUT LINHC******************************'*'**************’*'********************’*'*’''******* 
SET~COL(5); 

PUT_LINE(’Default values for the following parameters are: ’); 

PUT lINEC****’*"*'*******’'"''******’'’****’''*’''*'''**************'*'**************+*************** 
SET"cOL(5); 


124 





PUT("Miniinum discharge voltage of bus [1] ”); 

set_col(60); 

PUT(MINIMUM_DISCHARGE_BUS_VOLTAGE,FORE= >4,AFT= >2,EXP= >0);PUTC volts"); 

NEW_LINE(1); 

SET_COL(5); 

PUT("DESIGN Satellite Bus Voltage [21*); 

SET_COL(60); 

PUT(BUS_VOLT AGE,FORE = >4,AFT= >2,EXP= >0); 

PUT(’ volts’); 

NEW_LINE(1); 

SET_COL{5); 

PUT("Bypass diode voltage drop [3] "); 

set_col(60); 

PUT(BYPASS_DIODE_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0);PUT{’ volts"); 

NEW_LINE(1): 

SET_COL(5); 

PUT("End of life batter)' discharge voltage [4] "); 
set_col(60); 

PUT{EOL_BATTERY_DISCHARGE_VOLTAGE,FORE= >4,AFT= >2,EXP= >0);PUT(" volts"); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Satellite eclipse time hours [5] "); 

SET_COL(60); 

PUT(ECLIPSE_TIME,FORE= >4,AFT= >2,EXP= >0); 

PUT(" hours’); 

NEWLINEd); 

SET_COL(5); 

PUT("Depth of Discharge [6} ’); 

SET_COL(60); 

PUT(DEPTH_OF_DISCHARGE,FORE= >4,AFT= >2,EXP= >0); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Maximum Battery Discharge Voltage [7]’); 

SET_COL(60); 

PUT(MAXIMUM_BATTERY_CHARGE_VOLTAGE,FORE= >4,AFT= >2,EXP= >0); 

PUT(’ volts’); 

NEW_LINE(1); 

SET_COL(5); 

PUTf’Series Connected Diode Voltage Drop [8] ’); 

SET_COL(60); 

PUT(SERIES_CONNECTED_DIODE_VOLTAGE_DROP.FORE= >4,AFT= >2,EXP= >0); 

PUT(’ volts’); 

NEWLINEd); 

SET_COL(5); 


125 







PUT("Number of Series Connected Diodes [9] "); 

SET_COL<60); 

PUT(NUMBER_SERIES_CONNECTED_DIODES,FORE= >4,AFT= >2,EXP= >0); 


NEW_LINE(1); 

SET_COL(5); 

PUT("Battery Charger Voltage Drop {10] "); 

SET_COL(60); 

PUT(BATTERY_CHARGER_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0); 

PUTC volts'); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Charge Discharge Voltage Drop [11]’); 

SET_COL(60); 

PUT(CHARGE_DISCHARGE_EFFICIENCY_BATTERY,FORE= >4.AFT= > 2,EXP= >0); 
new_LINE(2); 

if REPLACE = FALSE then 
CHAR := N; 

PUT_LINE("If you desire to change any of the listed values please enter "); 

PUT_LINE("a ‘y’ for YES otherwise enter a ‘n’ for NO"); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y' or CHAR = ’y’ then 
CHAR := N; 

PUT_LINE("Enter number corresponding to value you wish to change."); 
set_col(10); 

GET_INTEGER(fNPUT); 

V1DE0.CLEAR_SCREEN; 

else 

VIDEO.CLEAR_SCREEN; 
goto KEEP_VALUES; 
end if; 

elsif REPLACE = TRUE then 

PUT_L1NE("Enter number corresponding to value you wish to change."); 
set_col(10); 

GET_INTEGER(INPUT); 

VIDEO.CLEARSCRHLN; 
end if; 

case INPUT is 


when 1 = > 

VIDEO. CLE AR_SCREEN; 

NEW_LINE(2); 

PUT LINEI"******’*"*'******’''**'*'*'''*''"*'***'*'**'''************************************") 
NEv7_LINE(2); 

PUT_LINE("Please enter the minimum satellite bus discharge voltage about "); 

PUT_LINE("30 volts for 3-axis stabilized and 35.0 for .spin stabilized"); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(MIN1MUM_DISCHARGE_BUS_ VOLTAGE); 


126 






PUT("Miniinum discharge bus voltage is ’); 

PUT(MINIMUM_DISCHARGE_BUS_VOLTAGE,FORE= >4,AFT= >2,EXP= >0); 
PUTC volts"); 

NEW_LINE(3); 


when 2 = > 

VIDEO. CLE AR_SCREEN; 

NEW_LINE(2); 

PUT lINEU’*'***^*****************’*'********^*'*'*************’*'’*'*****************")' 
NEv7_LINE(2); 

PUT LINECPlease enter the DESIGN bus voltage" ); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(BUS_VOLTAGE); 

VIDEO. CLE ARSCREEN; 

PUTCDESIGN Bus voltage is "); 

PUT(BUS_VOLTAGE,FORE= >4,AFT= >2,EXP= >0); 

PUT(" volts"); 

NEW_LINE(2); 

when 3 = > 

VIDEO. CLE AR_SCREEN; 

NEW_LINE(2); 

PUT LI^£^"+***’*‘+*+***’t*’*‘************‘**‘+*’*****^*+***’*'*+****+*+*++*+************’*'*" 
NEv7_LINE(2); 

PUT_LINE("Please enter the End of Life battery discharge voltage drop"); 

PUT_LINE("about 1.0-2.0 volts"); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(BYPASS_DIODE_VOLTAGE_DROP); 

VIDEO.CLEAR_SCREEN; 

PUT("Minimum discharge bus voltage is "); 

PUT(BYPASS_DIODE_VOLT.AGE_DROP,FORE= >4.AFT= >2,EXP= >0); 

PUT(" volts"); 

NEW_LINE(2); 

when 4 = > 

VIDEO.CLEAR_SCREEN; 

NEW_L1NE(2); 

PUT ♦****’^*****************’*‘***************’*‘******+++****’f‘****’^**+****’')■ 

NEv7_LINE(2); 

SET_COL(5); 

PUT("Please enter End of life battery discharge voltage [4] "); 

NEW_LINE(2); 

set_col(10); 

GET_DATA(EOL_BATTERY_DISCHARGE_ VOLTAGE); 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

PUT("End of life battery discharge voltage is (1.1 volts) "); 

PUT(EOL_BATTERY_DISCHARGE_VOLTAGE,FORE= >4,AFT= >2.EXP= >0); 

PUT(" volts"); 

NEW_L1NE(2); 


127 








when 5 = > 

VIDEO.CLEAR_SCREEN; 

NEW_LINE(2); 

PUT linE("*************‘**********'*‘*****'*‘***********************'*‘******'*‘**'*‘***'' )■ 
NEW_LINE(2); 

PUT_LINE("Please enter the time satellite is in eclipse per orbit in hours"); 

PUT_LINE("(about 1.2 hours in geosynchronous)"); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(ECLIPSE_TIME); 

VIDEO. CLEAR_SCREi=N; 

PUT("Eclipse time is"); 

PUT(ECLIPSE_TIME,FORE= >4,AFT- >2,EXP= >0); 

PUT(" hours"); 

NEW_LINE(2); 

when 6 = > 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

NEv7_LINE(2); 

PUT("Please enter the Depth of Discharge used for batteries (0.50 - 0.75"); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(DEPTH_OF_DISCHARGE); 

VIDEO.CLEAR_SCREEN; 

PUT("Depth of discharge is "); 

PUT(DEPTH_OF_DISCHARGE,FORE= >4,AFT= >2.EXP= >0); 

NEW_LINE(2); 


when 7 = > 

VIDEO. CLEARSCREEN; 

NEW_LINE(2); 

PUT lINE(*’*****************************************************’*'’^**********’*‘") 
NE\V_LINE(2); 

PUT_LINE("Please enter the maximum battery discharge voltage "); 

PUT_LINE("(default 1.5 volts)"); 

NEW_LINE(2); 

SET_COL(10); 

OET_DATA(MAXIMUM_BATTERY_CHARGE_VOLTAGE); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Maximum Battery Discharge Voltage "); 

SET_COL(60); 

PUT(MAXIMUM_BATTERy_CHARGE_VOLTAGE,FORE= >4,AFT= > 2,EXP= >0); 
PUT(" volts'); 

NEW_LINE(2); 

when 8 = > 

VIDEO.CLEAR SCREEN; 

NEW_LINE(2); 


128 









PUT LINE("*******’'‘******“'"'‘*’*'****’''*'*‘*****’*‘'******’*"*‘***************************”)' 
NEv7_LINE(2); 

PUT_LINE(’Please enter the series connected diode voltage drop"); 

PUT_LINE(’(default 0.8 volU)"); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(SERIES_CONNECTED_DIODE_VOLTAGE_DROP); 

NEW_LINE(1); 

SET_COL(5); 

NEW_LINE(1); 

PUT("Series Connected Diode Voltage Drop "); 

SET_COL(60); 

PUT(SERIES_CONNECTED_DICDE_VOLTAGE_DROP.FORE= >4,AFT=- >2,EXP= >0); 
PUT(’ volts"); 

NEW_LINE(2); 


when 9 = > 

VIDEO. CLEARSCREEN; 

NEW_LINE(2); 

pU'J' + + + ++ + * + **** ++ + + + + j 

NEv7_LINE(2); 

PUT_LINE("Please enter the number of series connected diodes"); 

PUT_LINE("(default 3)"); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(NUMBER_SERIES_CONNECTED_DIODES); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Number of Series Connected Diodes "); 

SET_COL(60); 

PUT(NUMBER_SERIES_CONNECTED_DIODES,FORE= >4.AFT= >2,EXP= >0); 
NEW_LINE(2); 


when 10= > 

VIDEO.CLEARSCREEN; 

NEW_LINE(2); 

PUT linE("******************************************************************") 
NEv7_LINE(2); 

PUT_LINE("Please enter the battery charger voltage drop"); 

PUT_LINE("(default 1.75 volts)"); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(BATTERY_CHARGER_VOLTAGE_DROP); 

NEW_LINE(1); 

SET_COL(5); 

PUT(’Battery Charger Voltage Drop "); 

SET_COL(60); 

PUT(BATTERY_CHARGER_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0); 

PUT(" volts’); 

NEW_LINE(2); 


129 






>fcaen 11= > 

VIDEO. CLEAR_SCREEN; 

N ,W_LINE(2); 

PUT l1NE(*'*‘'*"*“*"*"'“*"'"*"*"*"*"*"*‘'*"*"*"*'*'*"'"*”*"*"*'’*"^'*'’*"*"**’''*'*"*"*'*‘'*"*‘'*"^’*"'"*"*’*‘'*"*'^’'"'"'“*‘’^’*‘*'*‘^'*‘**''‘*’*"*‘''); 
NEW_LINE{2); 

PUT LINECPlease enter the battery charge discharge efficiency’); 

PUT_LINE(’(default 0.9)’); 

NEW_LINE(2); 

SET_COL(10); 

GET_DATA(CHARGE_DISCHARGE EFFICIENCY_BATTERY); 

NEWLINEd); 

SET_COL(5); 

PUT(’Charge Discharge Voltage Drop "); 

SET_COL(60); 

PUT(CHARGE_DISCHARGE_EFFICIENCY_BATTERY,FORE= >4,AFT= >2,EXP= >0); 
NEW_LINE(2); 

when OTHERS = > 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

PUT lINEI"**********************’''*******************************************”); 
NEv7_LINE(2); 

SET_COL(5); 

PUT_LINE(’ENTER A PROPER NUMBER IDENTIFIER FOR VARIABLE TO CHANGE!"); 
NEW_LINE(2); 
end case; 

NEW_LINE(2); 

PUT dINE(’'*‘*’*"*"*"*"*'’*‘''"*‘*’*"'"*"*”*"*"*‘'*"*"*”*'’'"*"*"*"'"''*"*"*‘'*‘'*"*‘*'*‘*’*“***'*‘*'*"*"*‘'*"*"*‘’*"*‘’''*’*‘’*‘***'*"'‘'*"*'’*‘**’*'’*‘'*'"); 
NEv7_LINE(2); 

CHAR := N; 

PUT_LINE("If you wish to change a value please enter a ‘y’ for YES"); 

PUT_LlNE("otherwise enter a ‘n’ for NO "); 

REPLACE—FALSE; 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR := N; 

REPLACE; =TRUE; 

VIDEO. CLE AR_SCREEN; 
goto VALUE_NEW; 

else 

VIDEO.CLEAR SCREEN; 

PUT_LINE("UNDERSTAND NO MORE CHANGES"); 

NEW_LINE(3); 
end if; 

STOP; 

< <KEEP_VALUES> > 

SETj20L(5); 

PUT_LINE("Values for the following parameters are; '); 


130 









PUT lINE("**'*"'‘**‘*‘*********’''*‘'‘**’*‘***‘'‘****‘''‘''*'*‘***‘'"*‘****''‘’'‘*''‘******’''******’*"*‘***‘'‘*******'"'"*‘") 
SETJcOUS); 

PUT(“Mmimum discharge voltage of bus"); 
set_col(60); 

PUT(MINIMUM_DISCHARGE_BUS_VOLTAGE.FORE= >4,AFT= >2,EXP= >0);PUT(’ volts"); 

NEW_LINE(1); 

SET_COL(5); 

PUT("DESIGN Satellite Bus Voltage’); 

SET_COL(60); 

PUT(BUS_VOLTAGE.FORE= >4,AFT= >2,EXP= >0); 

PUT(" volts"); 

NEWLINEd); 

SET_COL(5); 

PUT(’Bypass diode voltage drop"); 
set_col(60); 

PUT(BYPASS_DIODE_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0);PUT(” volts"); 

NEW_LINE(1); 

SET_COL(5); 

PUT("End of life battery discharge voltage"); 
set_col(60); 

PUT(EOL_BATTERY_DISCHARGE_VOLTAGE,FORE= >4,AFT= >2,EXP= >0);PUT(' volts'); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Satellite eclipse time hours"); 

SET_COL(60); 

PUT(ECLIPSE_TIME,FORE= >4.AFT= >2,EXP= >0); 

PUT(" hours"); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Depth of Discharge "); 

SET_COL(60); 

PUT(DEPTH_OF_DISCHARGE,FORE= >4,AFT= >2,EXP= >0); 

NEW_LINE(1); 

SET_COL(5); 

PUT("Maximum Battery Discharge Voltage "); 

SET_COL(60); 

PUT(MAXIMUM_BATTERY_CHARGE_VOLTAGE,FORE= >4,AFT= >2,EXP= >0); 

PUT(" volu"); 

NEW_L1NE(1); 

SET_COL(5); 

PUT{"Series Connected Diode Voltage Drop "); 

SET_COL(60); 

PUT(SERIES_CONNECTED_D10DE_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0); 

PUT(" volts"); 


131 







NEW_LINE(1); 

SET_COL(5): 

PUT("Number of Series Connected Diodes "); 


SET_COL(60): 

PUT(NUMBER_SERIES_C0NNECTED_D10DES,F0RE= >4,AFT= >2,EXP= >0); 


NEW_LINE(1); 

SET_COL(5); 

PUTCBattery Charger Voltage Drop "); 

SET_COL(60); 

PUT(BATTERY_CHARGER_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0); 
PUT(" volts’): 


NEW_LINE(1); 

SET_COL(5); 

PUT("Charge Discharge Voltage Drop ’); 

SET_COL(60): 

PUT(CHARGE_D1SCHARGE_EFFICIENCY_BATTERY,F0RE= >4,AFT= >2.EXP= >0); 
new_LINE(2); 

STOP; 


< <BUS> > 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

PUT LINE("**************’*'*****’^*****************'*‘*********’*'’*‘**********‘******’*) 
NEv7_LINE(2); 

PUT_LINE("Please enter the number of bu.ses used in your satellite."); 

PUT_LINE("Most satellites have 2 buses.’); 

GET_1NTEGER(J); 

NEW_LINE(1); 

PUT(’Satellite has ’); 

PUT(J,WIDTH=>2); 

PUT(’ buses’); 
if J > 2 then 
NEWLINEd); 

PUT_LINE(’You have selected more then two buses. Are you sure?"); 

PUT_LINE(’To change the number of buses enter a ‘Y’ for YES or ‘N’ for NO."); 
NEW_LINE(2); 

GET_CHARACTER(CHAR); 

if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR := N; 

VIDEO. CLE AR_SCREEN; 
goto BUS; 

else 

VIDEO. CLEAR SCREEN; 

PUT_LINE("UNDERSTAND MORE THAN TWO BUSES IS OKAY."); 
NEW_LINE(2); 
end if; 

end if; 


NEWLINEd); 

VIDEO. CLE AR_SCREEN; 


132 









PUT("Satellite has "); 
PUT(J.W1DTH=>2); 

PUT(" buses"); 

NUMBER_OF_BUSES: =FLOAT(J); 


end OPERATING_DATA; 

procedure BATTERY (BATTERY LOAD ; in out FLOAT; 

DRUM_SPINNER ; in out BOOLEAN; 

MlNIMUM_DISCHARGE_BUS_VOLTAGE : in out FLOAT; 
BUS_VOLTAGE : in out FLOAT; 

BYPASS_DIODE_VOLTAGE_DROP ; in out FLOAT; 
EOL_BATTERY_DISCHARGE_VOLTAGE : in out FLOAT; 
BUS_POWER : in out FLOAT; 

PAYLOAD POWER : in out FLOAT; 

CELL_AH : in out FLOAT; 

DEPTH_OF_DISCHARGE : in out FLOAT; 

ECLIPSE TIME : in out FLOAT; 

VOLTAGE CHARGE ARRAY : in out FLOAT; 

NUMBER_OF_BUSES ; in out FLOAT; 

MAXIMUM_BATTERY_CHARGE_VOLTAGE : in out FLOAT; 
SERIES_C0NNECTED_D10DE_V0LTAGE_DR0P : in out FLOAT; 
NUMBER_SERIES_CONNECTED_DIODES ; in out FLOAT; 
BATTERY_CHARGER_VOLTAGE_DROP : in out FLOAT; 
CHARGE_DISCHARGE_EFFICIENCY_BATTERY : in out FLOAT; 
spacecraft life : in out FLOAT; 

POWER_EQUINOX_CHARGE : in out FLOAT; 

POWER_SOLSTICE_CHARGE : in out FLOAT) is 

DESIGN_MARGIN : FLOAT ;= 1.1; 

SOLARJNTENSITY : FLOAT ;= 135.0; - mw / cm*2 

SOLAR_ARRAY_TEMP_SOLSTICE : FLOAT := 37.0; - celcius 

SOLAR_ARRAY_TEMP_EQUINOX : FLOAT := 45.0; -celcius 

SOLAR_CELL_TEST_TEMP : FLOAT := 25.0; - celcius 

TEMP_COEF_EOL_CURRENT : FLOAT := 0.00024; - ma/cm*2 

TEMP_COEF_EOL_VOLTAGE ; FLOAT := -0.0022; - ina/cm*2 

CURRENT_MAX_POWER ; FLOAT := 0.2966; - A Imp 

VOLTAGE_MAX_POWER : FLOAT := 0.45; -V Vmp 

CURRENT_SHORT_CIRCUIT ; FLOAT ;= 0.315; -A Isc 

VOLTAGE_OPEN_CIRCUIT : FLOAT : = 0.548; - V Voc 

CELL_WIDTH ; FLOAT ;= 2.0; -cm 

CELL LENGTH ; FLOAT : = 4.0; - cm 

CELL_THICKNESS : FLOAT ;= 0.021; — cm w/coverglass 

SOLSTICE_ARRAY_TEMP : FLOAT := 37.0; — degrees celcius 

EQUINOX ARRAY TEMP : FLOAT ;= 45.0; - degrees celcius 

ASSEMBLY_LOSS_CURRENT ; FLOAT; =0.9800; 

ENVIRONMENTAL_DEGRADATION_CURRENT : FLOAT: = 0.9077; 
ENVIRONMENTAL_DEGRADAT10N_VOLTAGE : FLOAT: =0.9675; 

- SIF = SOLAR INTENSITY FACTOR 
SOLSTlCE_SIF_CURRENT : FLOAT; =0.94425; 

SOLSTICE_SIF_VOLTAGE ; FLOAT: = 1.00000; 


133 









EQUINOX SIF CURRENT 
EQUINOX_;' OUTAGE 
EFF_ILLUMiNATION_FLAT_PANEL 
EFF_ILLUMINAT10N SPIN 
PANEL_WlRING_LOSS PER_CELL 
SOLSTICE_SOLAR_ARRA Y_TEM P 
EQUINOX_SOLAR_ARRA Y_TEM P 
BLOCKING_D10DE_VOLTAGE_DROP 
ARRAY WIRING HARNESS AND SLl 


; FLOAT: =0.9970; 

: FLOAT: = 1.0000; 

: FLOAT: = 1.0000; 

: FLOAT: =3.14159265359; 

: FLOAT: =0.005; - delta V 

; FLOAT: = 39.0; -- degree celcius 
: FLOAT: =49.0; — degree celcius 
: FLOAT: =0.9; - 

RING VOLTAGE DROP: FLOAT := 0.9 


BUSCURRENT, 

CELL_CURRENT_EOL_SOLSTICE, 
CELL_CURRENT_EOL_EQUINOX, 
CELL_VOLTAGE_EOL_SOLSTICE, 
CELL_VOLTAGE_EOL_EQUINOX. 

NUMBER_CELLS_lN_SERIES_CHARGE_ARRAY_SOLSTlCE, 
NUMBER_CELLS_IN_PARALLEL_CHARGE_ARRAY_SOLSTICE, 
NUMBER CELLS_IN_SERIES_CHARGE ARRAY_EOU1NOX, 
NUMBER_CELLS_IN_PARALLEL_CHARGE_ARRAY_EQUINOX, 

TOTAL_NUMBER_CELLS, 

POWERTOTAL, 

TOTAL_POWER_PER_BUS, 

ARRAY_TOTAL_POWER, 

POWER MARGIN, 


REQUIRED_CURRENT_SOLSTlCE_PER_BUS, 

REQUIRED_CURRENT_E0UINOX_PER_BUS, 

TEMP_OF_CELL_CHARACS, 

CELL_AREA, 

NUMBER_CELLS_IN_PARALLEL, 

NUMBERCELLSINSERIES, 

DESIGN_LOAD SOLSTICE, 

DESIGN_LOAD_EQUINOX : FLOAT; 

FINAL : BOOLEAN := TRUE; 

PARAMETERS, 

CELLS : INTEGER; 


OUTSC 


: FILE_TYPE; 


EQUINOX_CURRENT, 
SOLSTICE_CURRENT, 
MAXIMUM_CHARGE VOLTAGE, 
RECHARGE TIME : FLOAT ; 


134 










CHARGE 


: INTEGER; 


OUTF 


: FILE_TYPE; 


begin 

NEW_LINE(2); 

PUT("Please enter the Solar Cell Test Temperature in degrees celcius’); 

NEW_LINE{4); 

set_col(l5); 

GET_DATA(SOLAR_CELL_TEST_TEMP); 

VIDEO. CLEAR_SCREEN; 

PUT("Solar Cell Test Temperature is ’); 

PUT(SOLAR_CELL_TEST_TEMP,FORE= >3,AFT= >2,EXP= >0); 
PUT(" celcius"); 

NEW_LINE(4); 

STOP; 


NEW_LINE(1); 

PUT_LINE(" The electrical characteristics of typical solar cells are based "); 
NEW_LINE(1); 

PUT("on ’); 

PUT(SOLAR_CELL_TEST_TEMP,FORE= >2,AFT= >0,EXP= >0); 

PUT(" degrees celcius temperature and standard solar intensity "); 
NEW_LINE(2); 

PUT_LINE(*of 135.3 mw/cm‘‘2 on a cell basis at BOL. The realistic solar"); 
NEW_LINE(1); 

PUT_LINE("array power is, however, calculated by considering several "); 
NEW_LINE(1); 

PUT_LINE("factors, such as assembly loss factors, environmental degradation,"); 
NEW_L1NE(1); 

PUT_LINE("the seasonal variation of solar intensity, solar cell temperature, "); 
NEW_LINE(1); 

PUT_LlNE("and random failures. Some typical values are given in Table 6.6 '); 
NEW_L1NE(1); 

PUT_LlNE("of Brij N. Agrawal’s book Design of Geosynchronous Spacecraft.'); 
NEW_LINE(2); 

STOP; 

if SPACECRAFT_LIFE = 10.01 then 
ASSEMBLY_LOSS_CURRENT : =0.9600; 

ENVIRONMENT AL_DEGRADATION_CURRENT : =0.8561; 

EN VIRONMENTAL_DEGRADAT10N_VOLTAGE : =0.9350; 

- SIF = SOLAR INTENSITY FACTOR 
SOLSTICE_SIF_CURRENT : =0.8885; 

SOLSTlCE_SlF_VOLTAGE : = 1.00000; 

EQUINOX_SIF CURRENT := 0.9941; 

EQUlNOX_SlF~V OUTAGE : = 1.0000; 


135 







elsif SPACECRAFT_L1FE < = 2.0 then 

ASSEMBLY_LOSS_CURRENT : = 0.9800; 

ENVIRONMENT AL_DEGRADAT10N_CURRENT : =0.9077; 
ENVIRONMENTAL_DEGRADATION_VOLTAGE .=0.9675; 
- SIF = SOLAR INTENSITY FACTOR 
SOLSTICE_SIF_CURRENT ; = 0.94425; 

SOLSTICE_SIF_VOLTAGE ; = 1.00000; 

EQUINOX_SIF_CURRENT : = 0.9970; 

EQUINOX_SIF_VOLTAGE ; = 1.0000; 


elsif SPACECRAFT_LIFE > 2.0 and SPACECRAFT_LIFE <7.0 then 

ASSEMBLY_LOSS_CURRENT: = ASSEMBLY_LOSS_CURRENT 

/(1.011722**INTEGER(SPACECRAFT_LIFE-2.0)); 

ENVIRONMENTAL_DEGRADATION_CURRENT:=ENVIRONMENTAL_DEGRADATION_CL'RRE.N'T 

/1.0216787**INTEGER(SPACECRAFT_LlFE-2.0); 

ENVIRONMENT AL_DEGRADATION_VOLTAGE: = ENVIRONMENTAL_DEGRADATION_VOLT AGE 

/1.0068572**INTEGER(SPACECRAFT_LIFE-2.0); 

- SIF = SOLAR INTENSITY FACTOR 

SOLSTICE_SIF_CURRENT; = SOLSTICE_SIF_CURRENT 

/1.0111722**INTEGER(SPACECRAFT_LlFE-2.0); 

EQUINOX_SIF_CURRENT:=EQUINOX SIF_CURRENT 

/1.000582763**INfEGER(SPACECRAFT_LlFE-2.0); 


elsif SPACECRAFT_LIFE > = 7.0 and SPACECRAFT_L1FE < 8.0 then 

ASSEMBLY_LOSS_CURRENT := 0.96; 

ENVIRONMENTAL_DEGRADATION_CURRENT := 0.8154; 

ENVIRONMENTALDEGRADATIONVOLTAGE := 0.935; 

— SIF = SOLAR INTENSITY FACTOR 

SOLSTICE_SIF_CURRENT := 0.8885; 

SOLSTICE_SIF_VOLTAGE := 1.0; 

EQUINOX_SIF_CURRENT ; = 0.9941; 

EQUINOX_SIF_VOLTAGE := 1.0; 

EFF_ILLUMINATION_FLAT_PANEL ;= 1.0; 

EFFJLLUMINATIONSPIN := 1.0; 

elsif SPACECRAFT_LIFE > = 8.0 and SPACECRAFT LIFE < = 50.0 then 

— 1.016397 is a mathematical constant to cause a continuous 

— 5 % degradation every 5 years. 

ASSEMBLY_LOSS_CURRENT; = ASSEMBLY_LOSS_CURRENT 

/1.016397**INTEGER(SPACECRAFT_LlFE-7.0); 


136 




ENVIRONMENTAL_DEGRADAT10N_CURRENT: = ENVIRONMENTAL_DEGRADATION_CURRENT 

/1.016397**INTEGER(SPACECRAFT_LlFE-7.0); 

ENVIRONMENT AL_DEGRADATION_VOLT AGE: = ENVIR0NMENTAL_DEGRADAT10N_V0LT AGE 

/1.016397**INTEGER(SPACECRAFT_UFE-7.0); 

- SIF = SOLAR INTENSITY FACTOR 

SOLSTICE_SIF_CURRENT: = SOLSTICE_SIF CURRENT 

/1.016397**INTEGER(SPACECRAFT_LIFE-7.0); 

EQUINOX_SIF_CURRENT: = EQUINOXSIFCURRENT 

/1.016397**INTEGER(SPACECRAFT_LIFE-7.0); 


else 

VIDEO. CLEARSCREEN; 

PUT_LINE(" Spacecraft life to long DEFAULT values will be used"); 


end if; 


PUT_LINE("Environmental Degradation Factors for given Spacecraft Life"); 
new_line(l); 

PUT("Assembly Loss Current is "); 

SET_COL(60); 

PUT(ASSEMBLY_LOSS_CURRENT,FORE= > 1,AFT= >4,EXP= >0); 
NEW_LINE(2); 


PUT("Environmental Degradation Current is "); 

SET_COL(60); 

PUT(ENVIRONMENTAL_DEGRADAT10N_CURRENT,FORE= > 1,AFT= >4,EXP= >0); 
NEW_LINE(2); 


PUT("Environmental Degradation Voltage is "); 

SET_COL(60); 

PUT(ENVIRONMENTAL_DEGRADAT10N_VOLTAGE,FORE= > 1,AFT= >4,EXP= >0); 
NEW_LINE(2); 


PUT("Solar Intensity Factor for Current during Solstice is ’); 
SET_COL(60); 

PUT(SOLSTICE_SIF_CURRENT,FORE= > I.AFT= >4,EXP= >0); 
NEW_LINE(2); 


PUT("Solar Intensity Factor for Voltage during Solstice is '); 
SET_COL(60); 

PUT(SOLSTICE_SIF_VOLTAGE,FORE= > LAFT= >4,EXP= >0); 
NEW_LINE(2); 


PUT("Solar Intensity Factor for Current during Equinox is ’); 
SET_COL(60); 

PUT(EQUINOX_SIF_CURRENT,FORE= > 1,AFT= >4,EXP= >0); 
NEW_LINE(2); 


137 










PUT("Solar Intensity Factor for Voltage during Equinox is ’); 
SET_COL(60); 

PUT(EQUINOX_SIF_VOLTAGE,FORE= > 1,AFT= >4,EXP= >0); 
NEW_L1NE(2); 


NEW_L1NE(2); 

PUT_LINE("To use the above calculated values enter a ’1”); 
NEW_LINE(1); 

PUT_LINE('To change the calculated values enter a ’2’*); 
NEW_LINE(1); 

SET_COL(5); 

GET_INTEGEP':CELLS); 


case CELLS is 
when 1 = > 

PUT_LINE("Understand default values will be used"); 
when 2= > 

VIDEO.CLEAR_SCREEN; 

new_line(2); 

PUT L,INE(" **********+****+*♦*♦***★++****+***+********’*'*********=*'♦**♦**’*'****+" ^ 
NEv7_LINE(2); 

PUT('Please enter desired value for Assembly Loss Current "); 

NEW_LINE(2); 

SET_C0L(I5); 

GET_DATA(ASSEMBLY_LOSS_CURRENT); 

VIDEO.CLEAR_SCREEN; 

new_line(2); 

PUT LIN^E("********’*‘*************’*'*******************************************"^ 
NEW_LINE(2); 

PUT('Please enter desired value for Environmental Degradation (current)"); 

NEW_LINE(2); 

SET_COL(15); 

GET_DATA(ENVIR0NMENTAL_DEGRADATI0N_CURRENT); 

VIDEO. CLEAR_SCREEN; 
new_line(2); 

PUT LINEf"********’''****’'”''***'*'**'''****''"''*****************************’*'*****’''**") 
NEv7_LINE(2); 

PUT("Please enter desired value for Environmental Degradation (voltage)'); 

NEW_LINE(2); 

SET_COL(l5); 

GET DATA(ENVIRONMENTAL DEGRADATION VOLTAGE); 


VIDEO.CLEAR_SCREEN; 

new_line(2); 

PUT L,INE("*********"*'’**’*‘’*‘’*'+’*‘’*****'*'*'*'’*‘*'*‘****’*'’^******+*+**‘*+****’^*+*****'**+*********' 
NEv7 LINE(2); 


138 







PUT_LINE("Please enter desired value for "); 

PUT_LINE(" Solar Intensity Factor (solstice current)"); 

NEW_LINE(2); 

SET_COL(15); 

GET_DATA(SOLSTICE_SIF_CURRENT); 

VIDEO. CLEAR_SCREEN; 
new_line(2); 

PUT ******************************************************************’y 

NEW_LINE(2); 

PUT_LINE("Please enter desired value for "); 

PUT_LINE(" Solar Intensity Factor (solstice voltage)"); 

NEW_LINE(2); 

SET_COL(15); 

GET_DATA(SOLSTICE_SIF_VOLTAGE); 

VIDEO. CLEAR_SCREEN; 
new_Une(2); 

PUT lHnJEI"*********************************’'"''*****’''****************’''*****’"**"); 
NEW_LINE(2); 

PUT_LINE("Please enter desired value for "); 

PUT_LINE(" Solar Intensity Factor (equinox current)"); 

NEW_LINE(2); 

SET_COL(I5); 

GET_DATA(EQUINOX_SIF_CURRENT); 

VIDEO. CLEAR_SCREEN; 
new_line(2); 

PUT linE("***********************’'‘***’'"''**'****’''************’******************"); 
NEv7_LINE(2); 

PUT_LINE("Please enter desired value for "); 

PUT_LINE(" Solar Intensitv Factor (equinox voltage)"); 

NEW_LINE(2); 

SET_COL(15); 

GET_DATA(EQUINOX_SIF_VOLTAGE); 

when OTHERS = > 

VIDEO. CLEARSCREEN; 

NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("Understand Calculated values will be used’); 

NEW_L1NE(2); 
end case; -- CHARGE 
VIDEO. CLEAR_SCREEN; 

NEW_LINE(1); 

PUT("SOLAR ARRAY DESIGN FACTORS ARE:’); 

NEW_LINE(2); 

PUT("Assembly Loss Current is "); 

SET_COL(60); 

PUT(ASSEMBLY_LOSS CURRENT,FORE => 1,AFT= >4,EXP= >0); 

NEW_LINE(2); 


139 










PUT("Environmental Degradation Current is “); 

SET_COL(60); 

PUT{ENVIRONMENTAL_DEGRADATION_CURRENT,FORE= > 1,AFT= >4,i>"= -- 
NEW_L1NE(2): 


PUT("Environmental Degradation Voltage is '); 

SET_COL(60); 

PUT(ENVIRONMENTAL_DEGRADATION_VOLTAGE,FORE= > l.AFT- > 4,EXP= >0); 
NEW_LINE(2)-, 


PUT('Solar Intensity Factor for Current during Solstice is "); 
SET_COL(60); 

PUT(SOLSTICE_SIF_CURRENT,FORE= > I,AFT= >4,EXP= >0); 
NEW_LINE(2); 

PUT("Solar Intensity Factor for Voltage during Solstice is "); 
SET_COL{60); 

PUT(SOLSTICE_SrF_VOLTAGE,FORE= > 1,AFT= >4,EXP= >0); 
NEW_LINE(2); 


PUT("Solar Intensity Factor for Current during Equinox is "); 
SET_COL(60); 

PUT(EQUINOX SIF_CURRENT,FORE= > 1,AFT= >4,EXP= >0); 
NEW_LINE(2); ~ 


PUT("Solar Intensity Factor for Voltage during Equinox is "); 
SET_COL(60); 

PUT(EQUINOX SIF_VOLTAGE,FORE= > 1,AFT= >4,EXP= >0); 
NEW_LINE(3); “ 

STOP; 


NEW_LINE(1); 
PUT LINE( 


NEW_L1NE(2); 

PUT_LINE(’ SOLAR CELL CHARACTERISTICS"); 

PUT lINE("***'*"'"*‘**************************’''**’'‘****************************")' 
PUTlLINE{"Choice ‘1’ ‘2’ ‘V ‘4’ ‘5’ -e’ "); 

Intelsat Intelsat Intelsat GaAs/Ge AlAs/Ge "); 

IV V VI "); 

Si Si - "); 

K4-3/4 K7 ■); 


PUT_LINE("Charac 
PUT_LINE(" 
PUT_LINE(" 
PUT_LINE(- 
PUT_LINE(". 


■); 


PUT_LINE("lmp Amps 
PUT_LINE("Vmp Volts 
PUT_LlNE("lsc Amps 
PUT_LINE('Voc Volts 
PUT_LINE("Size cm 


0.125 0.2966 0.391 
0.445 0.450 0.454 

0.141 0.315 0.4187 

0.560 0.548 0.545 

2x2 2.1x4.0 1.8x6.2 2 


0.644 

0.725 

0.780"); 

0.478 

0.885 

0.812"); 

0.6887 

0.735 

0.878"); 

0.590 

0.889 

0.851"); 

.5x6.2 

2x4 

2x2 "); 


140 








PUT_LINE(’Thickness 0.033 0.025 0.020 0.020 .020 0.20’); 

PUT_LINE(’Material Si Si Si Si GaAs/Ge AlAs/Ge"); 


PUT_LINE('To use the above calculated values enter the appropriate’); 
PUT_LINE(’number located at the top of the column. To enter your own’) 


PUT_LINE(’cell parameters enter a ‘7’"); 


SET_COL(5); 

GET_INTEGER(PARAMETERS); 


case PARAMETERS is 
when 1 = > 

TEMP_COEF_EOL_CURRENT 

TEMP_COEF_EOL_VOLTAGE 

CURRENTMAXPOWTR 

VOLTAGE_MAX_POWER 

CURRENT_SHORT_CIRCUIT 

VOLTAGE_OPEN_CrRCUIT 

CELL_WIDTH 

CELL_LENGTH 

CELL_THICKNESS 


;= 0.00024; 

“ ma/cm’ 

:= -0.0022; 


= 0.1250; 

— A Imp 

:= 0.445; 

— V Vmp 

:= 0.141; 

— A Isc 

= 0.560; 

- V Voc 


; = 2.0; -- cm 

: = 2.0; -- cm 

:= 0.033; --cm 


when 2 = > 

TEMP COEF_EOL CURRENT 

temp'coef_eol"voltage 

CURRENT_MAX_POWER 

VOLTAGE_MAX_POWER 

CURRENT_SHORT_CIRCUIT 

VOLTAGE_OPEN_ClRCUIT 

CELL_WIDTH 

CELLLENGTH 

CELL_TH1CKNESS 


:= 0.00024; - tna/cm''2 
:= - 0 . 0022 ; 

:= 0.2966; — A Imp 

: = 0.45; — V Vmp 

.= 0.315; -A Isc 

:= 0.548; -V Voc 


: = 2.0; " cm 

:= 4.0; — cm 

: = 0.025; — cm 


when 3 = > 

TEMP_COEF_EOL_CURRENT 

TEMP_COEF_EOL_VOLTAGE 

CURRENT_MAX_POWER 

VOLTAGE_MAX_POWER 

CURRENT_SHORT_ClRCUIT 

VOLTAGE_OPEN_ClRCUlT 

CELLWIDTH 

CELL_LENGTH 

CELL THICKNESS 


:= 0.00024; — ma/cm’2 

:= - 0 . 0022 ; 


0.391; 

- A 

0.454; 

- V 

0.4187; 

- A 

0.545; 

- V 

— cm 


— cm 



: = 0.02; — cm 


Imp 

Vmp 

Isc 

Voc 


when 4 = > 

TEMP_COEF_EOL_CURRENT 
TEM P_COEF_EOL_VOLT AG E 
CURRENT_MAX_POWER 
VOLTAGE_M AX_POWER 


:= 0.00024; — ma/cm’2 
:= - 0 . 0022 ; 

;= 0.644; — A Imp 
:= 0.478; -V Vmp 


141 









CURRENT SHORT CIRCUIT 

:= 0.6887; -A 

Isc 

VOLTAGE OPEN CIRCUIT 

:= 0.590; -V 

Voc 

CELL WIDTH 

:= 2.085; — cm 


CELL LENGTH 

:= 6.205; —cm 


CELL THICKNESS 

: = 0.02; — cm 


when 5 = > 

TEMP COEF EOL CURRENT 

:= 0.00024; -i 

ma/cm''2 

TEMP COEF EOL VOLTAGE 

;= -0.0022; 


CURRENT MAX POWER 

;= 0.725; - A 

Imp 

VOLTAGE MAX POWER 

:= 0.750; -V 

Vmp 

CURRENT SHORT CIRCUIT 

;= 0.735; -A 

Isc 

VOLTAGE OPEN CIRCUIT 

;= 0.888; -V 

Voc 

CELL WIDTH 

:= 2.0; ~ cm 


CELL LENGTH 

: = 4.0; — cm 


CELL THICKNESS 

:= 0.02; — cm 



when 6 = > 

TEMP COEF EOL_CURRENT 

:= 0.00024; - 

ma/cm^2 

TEMP COEF EOL VOLTAGE 

:= -0.0022; 


CURRENT MAX POWER 

:= 0.780; -A 

Imp 

VOLTAGE MAX POWER 

:= 0.812; -V 

Vmp 

CURRENT SHORT CIRCUIT 

:= 0.878; -A 

Isc 

VOLTAGE OPEN CIRCUIT 

;= 0.851; - V 

Voc 

CELL WIDTH 

: = 2.0; - cm 


CELL LENGTH 

:= 2.0; — cm 


CELL THICKNESS 

:= 0.02; —cm 



when 7 = > 

VIDEO. CLEAR_SCREEN; 

PUT LiNE("*’t‘***>t‘******************‘t‘*+*******+*******+*****************"); 
PUT_LINE("Please enter the value for temperature coefficient EOL CURRENT'); 
PUT_L1NE('Default value is -0.0022 A / degree C '); 

SET_COL(15); 

GET_DATA(TEMP COEF_EOL_CURRENT); 

NEW_LINE(2); 

VIDEO.CLEARJCREEN; 

SET_COL(15); 

PUT("Temperature coefficient EOL CURRENT is '); 

PUT(TEMP_COEr EOL_CURRENT.FORE= > 1,AFT= >4,EXP= >0); 

PUTC ma/cm*2");“NEW_LINE(2); 

PUT LII'4£(""l‘**++*‘l‘’l"l‘++’l'+ + >l"l‘*+*>t‘>*'****‘l‘1‘*'l'*'l‘'l>***+*******’*‘****‘''**+'l‘*+*****''); 
PUT_LINE("Please enter the value for temperature coefficient EOL VOLTAGE'); 
PUT_LINE('Default value is 0.00024 V / degree C); 

SET_COL(15); 

GET_DATA(TEMP COEF_EOL_VOLTAGE); 

VIDEO. CLE AR_SCREEN; 


142 






NEW_LINE(2); 

SET_COL(15); 

PUT("Temperature coefficient EOL VOLTAGE is ’); 
PUT(TEMP_COEF_EOL_VOLTAGE.FORE= > l.AFT= >4,EXP= >0); 
PUT(’ mv/cm"2"); NEW_LINE(2); 


PUT LINEf"**’'"''*********'*"''*'''***’'"'"'"''**'''*****’*'****'''************’'"''**’''*****") 
PUT”LINECPlease enter the value for CURRENT at MAXIMUM POWER (Imp) "); 

PUT_LINE('Default value is 0.2966 Amps’); 

SET_COL(15); 

GET_DATA(CURRENT_MAX_POWER ); 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2): 

SET_COL(15): 

PUT("Current at Maximum Power is '); 

PUT(CURRENT_MAX_POWER ,FORE= > 1,AFT= >4,EXP= >0); 

PUT(" Amps -Imp’): NEW_LINE(2); 

PUT "************♦***********♦*♦*♦***♦*****+**********+****+*****"^ 

PUT~LINE(’Please enter the value for VOLTAGE at MAXIMUM POWER (Imp) "); 
PUT_LINE("Default value is 0.45 Volts ’); 

SET_COL(15); 

GET_DATA(VOLTAGE_MAX_POWER ); 

VIDEO. CLEAR_SCREEN: 

NEW LINE(2); 

SET_COL(15); 

FUT('Voltage at Maximum Power is ’); 

PUT(VOLTAGE MAX_POWER ,FORE= > 1,AFT= >4,EXP= >0); 

PUT(’ Volts - Vmp’); NEW_LINE(2): 

PUT LiNE("****‘i‘*"f*‘t>***********=t<*%*************************>t<*******>t<***" j 
PUT_LINE("Please enter the value for Short Circuit Current (Isc) "); 
PUT_LINE(’Default value is 0.315 Amps’); 

SET_COL(15); 

GET_DATA(CURRENT_SHORT_CIRCUIT ); 

VIDEO.CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(15); 

PUT("Short Circuit Current is "); 

PUTfCURRENT SHORT CIRCUIT ,FORE= > 1,AFT= >4,EXP= >0); 

PUT(’ Amps - Isc");NEW_LINE(2); 

PUT lINEI’'**********’''******’''*******’'"'"*****'*"*"''**’*"''*********’''***********") 
PUT_LINE('Please enter the value for Open Circuit Voltage (Voc) ’); 
PUT_LINE(’DefauIt value is 0.548 Volts ’); 

SET_COL(15); 

GET_DATA(VOLTAGE_OPEN_CIRCUIT); 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(15); 

PUT(’Open Circuit Voltage is '); 


143 








PUT(VOLTAGE_OPEN_CIRCUIT ,FORE= > 1,AFT= >4,EXP= >0); 

PUT(" Volts - Voc");NEW_LINE(2); 

PUT ]_i'{^^(^’‘***************************‘****‘********‘*‘********************"'^ 
PUT_LINE("Please enter the value for Solar Cell Width in cm."); 

PUT_LINE("Default value is 2 cm "); 

SET_COL(15); 

GET_DATA(CELL_WIDTH ); 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(15); 

PUT("Solar Cell Width is "); 

PUT(CELL_WIDTH,FORE= >2,AFT= >2,EXP= >0); 

PUT(" cm");NEW_LINE(2); 


PUT DINE("'*"*"*"*"*"*"^'*"*‘’*'*‘**"*"*"*"*"*"*"*'’*"*“*"*"*"''*'*'’*‘’*"*"*"*"*"*‘’*'*’'"*'**'*"*‘’*"*‘'*'’*"*"*‘'*"'"'‘’*‘'*"*"*‘'*"*‘’*‘*") 
PUT("Please enter the value for Solar Cell Length in cm."); 

PUT_LINE("Default value is 4 cm"); 

SET_COL(15); 

GET_DATA(CELL_LENGTH ); 

VIDEO. CLEARSCREEN; 

NEW_LINE(2); 

SET_COL(15); 

PUT("Solar Cell Length is "); 

PUT(CELL_LENGTH,FORE= >2,AFT= >2,EXP= >0); 

PUT(" cm"); NEW_LINE(2); 

PUT i^if^'£(^'‘****‘>"i‘*******‘****’i‘********‘*****‘******’^*‘***********-**********'") 
PUT("Please enter the value for Solar Cell Thickness in cm. "); 

PUT_LINE(" Default value is 0.025 cm "); 

SET_COL(15); 

GET_DATA(CELL_THICKNESS); 

VIDEO.CLEARSCREEN; 

NEW_LINE(2); 

SET_COL(15); 

PUT("Solar Cell Thickness is "); 

PUT(CELL_THICKNESS,FORE= >2,AFT= >4,EXP= >0); 

PUT(" cm");NEW_LINE(2); 

when OTHERS = > 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

SET_COL(5); 

PUT_LINE("Understand Default values will be used"); 

end case; -- CHARGE 
- STOP; 

VIDEO. CLEARSCREEN; 

PUT LINEf"****’"*’''*’'"''****************’''*’'"''****'*'*’''’''**********************")' 
>UT_LINE(" SOLAR CELL PARAMETERS ARE ’); 

NEW_LINE(2); 


144 






SET_COL(15); 

PUTCTemperature coefficient EOL CURRENT is "); 

SET_COL(60); 

PUT(TEMP_COEF_EOL_CURRENT,FORE= > 1,AFT= >4,EXP= >0); 
PUT(" nia/cm‘2"); 

NEW_LINE(1); 

SET_COL(15); 

PUT("Temperature coefficient EOL VOLTAGE is "); 

SET_COL(59); 

PUT(TEMP_C0EF_E0L_V0LTAGE,F0RE= > 1,AFT= >4.EXP= >0); 
PUT(" ma/cm‘2"): 

NEW_LINE(1); 

SET_C0L(15); 

PUT("Current at Maximum Power is ’); 

SET_COL(60); 

PUT(CURRENT_MAX_POWER ,FORE= > 1,AFT= >4,EXP= >0); 
PUT(" Amps (Imp)"); 

NEW_LINE(1); 

SET_COL(15); 

PUT("Voltage at Maximum Power is *); 

SET_COL(60); 

PUT(VOLTAGE_MAX POWER ,FORE= > 1,AFT= >4,EXP= >0); 
PUT(” Volts (Vmp)");~ 

NEW_LINE(1); 

SET_COL(15); 

PUT('Short Circuit Current is "); 

SET_COL(60); 

PUT(CURRENT_SH0RT_CIRCU1T ,FORE= > 1,AFT= >4,EXP= >0); 
PUT(" Amps(Isc)"); 

NEW_LINE(1); 

SET_COL(15); 

PUT("Open Circuit Voltage is "); 

SET_col(60); 

PUT(VOLTAGE_OPEN_CIRCUIT ,FORE= > 1,AFT= >4,EXP= >0); 
PUT(" Volts (Voc)’); 

NEW_LINE(1); 

SET_COL(15); 

PUT('Solar Cell Width is ’); 

SET_COL(59); 

PUT(CELL_WlDTH,FORE= >2,AFT= >4,EXP= >0); 

PUT(" cm’>; 

NEWLINEd); 

SET_COL(15); 

PUT("Solar Cell Length is "); 

SET_COL(59); 


145 







PUT(CELL_LENGTH,FORE= >2,AFT= >4.EXP= >0); 

PUT(" cm'); 

NEW_LINE(1); 

SET_COL(15); 

PUT("Solar Cell Thickness is "); 

SET_COL(59); 

PUT(CELL_THICKNESS.FORE= >2,AFT= >4,EXP= >0); 

PUTC cm’); 

NEW_LINE(1); 

NEv7_L1NE(3); 

STOP; 

-- Cell current at maximum power point of EOL summer solstice 

- PUT(CURRENT_MAX_POWER,FORE= >4,AFT= >4,EXP= >0); 

- NEW_LINE(1); 

-- PUT(SOLSTlCE_SOLAR_ARRAY_TEMP ,FORE= >4.AFT= >4,EXP= >0); 

- NEW_LINE(1); 

-- PUT( TEMP_COEF_EOL_CURRENT,FORE= >4,AFT= >4,EXP= >0); 

- NEW_LINE(1); 

- PUT(SOLAR_CELL_TEST_TEMP,FORE= >4,AFT= >4,EXP= >0); 

-- NEW_LINE(1); 

- PUT(ENVIR0NMENTAL_DEGRADAT10N_CURRENT ,FORE= >4,AFT= >4.EXP= >0); 

- NEW_UNE(1); 

- PUT(ASSEMBLY_LOSS_CURRENT ,FORE= >4,AFT= >4.EXP= >0); 

- NEW_LINE(1); 


< <RE1TERATE_VOLTAGE > > 


if FINAL = FALSE then 
VIDEO.CLEAR_SCREEN; 

FINAL: =TRUE; 

PUT_LINE("PREV10USLY ENTERED DEFAULT VALUES OF FIRST ITERATION WILL BE USED"); 
PUT_LINE('BE USED ON THIS ITERATION EXCEPT FOR REQUESTED VALUES'); 

PUT lINEC**’*'*****’'"''**''"''***'''******"''***’''****’''******'''******'*******************’)’ 


NEW_L1NE(2); 

PUT_LINE('Please enter the minimum satellite bus discharge voltage"); 
PUT_LINE('about 30 volts’): 

SET_COL(10); 

GET_DATA(MINlMUM_DlSCHARGE_BUS_VOLTAGE); 

VIDEO.CLEAR_SCREEN; 

PUT(’Minimum discharge bus voltage is ’); 


146 








PUT(MINlMUM_DISCHARGE_BUS_VOLTAGE.FORE= >4,AFT= >2,EXP= >0); 

PUT(" volts"); 

NEW_LINE(2); 

PUT LiNEc*************************’*"*'********************* -**♦♦+****+****” 

NEv7_LINE(2); 

PUT("Please enter the DESIGN satellite bus voltage'); 

SET_COL(10); 

GET_DATA(BUS_VOLTAGE); 

VIDEO. CLEAR_SCREEN; 

PUT("Bus voltage is '); 

PUT(BUS_VOLT AGE,FORE = >4,AFT= >2.EXP= >0); 

PUT(" volts’); 
end if; 


NEW_LINE(2); 

SET_COL(l); 

PUT("Series cells required for minimum discharge voltage FLOAT'); 
SERIES_CELLS_FOR_MIN_DIS_VOLT; = 

((MINIMUM_DlSCHARGE_BUS_VOLTAGE + BYPASS_DIODE_VOLTAGE_DROP) 
/EOLB A1TERY_DISCH ARGEVOLTAGE) +1.0; - 

SET_COL(64); 

PUT{SERIES_CELLS_FOR_MlN_DIS_VOLT, FORE = > 4, AFT = > 2, EXP = > 0); 

N_INTEGER:=INTEGER(SERIES_CELLS_FOR_MlN_DIS_VOLT); 

SET_COL(l); 

PUTf’Series cells required for minimum discharge voltage INTEGER"); 

SET_COL(64); 

PUT(FLOAT(NJNTEGER),FORE= >4,AFT= >2,EXP= >0); 
if FLOAT(N_INTEGER) < SERlES_CELLS_FOR_MlN_DIS_VOLT then 
NJNTEGER: = NJNTEGER + 1; 
end if; 

SERIES_CELLS_FOR_MIN_DIS_VOLT;=FLOAT(N_lNTEGER); 

SET_COL(l); 

PUT("Series cells required for minimum discharge voltage ROUND UP’); 

SET_COL(64); 

PUT(SERIES_CELLS_FOR_MlN_DIS_VOLT,FORE= >4.AFT= >2.EXP= >0); 
NEW_LINE(2); 


PUT("Minimum discharge voltage is "); 

MINIMUM_D1SCHARGE_BUS_VOLTAGE:==((SER1ES_CELLS_FOR_MIN_D1S_VOLT-1.0) 

•EOL_BATTERY_DlSCHARGE_VOLTAGE)-BYPASS_D10DE_VOLTAGE_DROP; 

SET_COL(64); 

PUT(MlNlMUM_DISCHARGE_BUS_VOLTAGE.FORE= >4,AFT= >2,EXP= >0);PUT(" volts"); 
new_line(4); 


STOP; 


new_l(ne(2); 

PUT LINEC The power required by a bus will be all or part of the total"); 
PUT LINECpower. Therefore the batteries for each bus must provide"); 


147 











PUT_LlNE(“power for the maximum eclipse time of 1.2 hours for’); 

PUT_LINE("geosynchronous orbits.'); 
new_line(2); 

CELL_AH: = (BATTER Y_LOAD/NUMBER_OF_BUSES*ECLIPSE_TIME) 

/(MINIMUM_DISCHARGE_BUS_VOLTAGE*DEPTH_OF_DISCHARGE); 

PUT{’ The required Cell capacity is "); 

PUT(CELL_AH,FORE= >3,AFT= >2,EXP= >0); 

PUT(" ampere hours'); 

NEW_LINE(2); 

BUS_POWER:=BATTERY_LOAD/NUMBER_OF_BUSES; 

PUT('Bus Power is '); 

PUT(BUS_POWER.FORE= >4,AFT= >2,EXP= >0);PUT{’ watts'); 
new_line(2); 

PUT_LINE(' To determine the maximum charge voltage it is assumed that an'); 

PUT('open circuit failure of a battery cell during charge is '); 

PUT(SERlES_CONNECTED_DIODE_VOLT AGEDROP,FORE => 1, AFT = >2,EXP= >0); 
PUTC volts'); 

NEWLINEd); 

PUT LINECper diode usually accomodated by three series connected '); 

PUT_LINE('silicon diodes connected in parallel with the cell.'); 

NEW_L1NE(2); 

STOP; 


PUT lINE("**********************’*‘************************************’*‘******‘*" )* 
NEv7_LINE(2); 

MAXIMUM_CHARGE_VOLTAGE: = M AXIMUM_BATTERY_CHARGE_VOLTAGE 
*(SER1ES_CELLS_FOR_MIN_D1S_VOLT-1.0) 

+ NUMBER_SER1ES_C0NNECTED_D10DES 
■'■SERIES_CONNECTED_DIODE_VOLTAGE_DROP; 
VIDEO.CLEARSCREEN; 

PUT('Maximum Charge Voltage is"); 

SET_COL(64); 

PUT(MAXIMUM_CHARGE_VOLTAGE,FORE= >4,AFT= >2,EXP= >0); 

PUT(" volts"); 

NEW_LINE(2); 


STOP; 

NEW_LINE(2); 

PUT(" The main bus voltage is regulated to + or - ’); 

PUT(BUS_V0LTAGE_ALL0W.\BLE_DEVIAT10N,F0RE= > 1,AFT= >2.EXP= >0); 

PUTC volts’); 

NEW_LINE(1); 

PUT('Therefore the lower limit of the bus voltage is '); 

PUT(BUS_V0LTAGE-BUS_V0LTAGE_ALL0WABLE_DEVIATI0N,F0RE= >2,AFT= >2,EXP= >0); 
PUTC volts’); 

NEW_L1NE(1); 

PUTCThe battery charger voltage drop (V_cd) is ’); 


148 







PUT(BATTERY_CHARGER_VOLTAGE_DROP,FORE= >2,AFT= >2.EXP= >0); 
pure volU"); 

NEW_LINE(1); 

VOLTAGE_CHARGE_ARRAY: = MAXIMUM_CHARGE_VOLTAGE-(BUS_VOLTAGE-BUS_VOLTAGE_A 
LLOWABLE_DEVIATION) 

+ BATTER Y_CHARGER_VOLTAGE_DROP; 


new_line(2); 

SET_COL(5); 

PUT("Then the boost voltage needed by the charge array is *); 
PUT(VOLTAGE_CHARGE_ARRAY, FORE= >2.AFT= >2,EXP= >0); 

PUT(" volts’); 

NEW_LINE(1); 

PUT LINEC The charge current is applied to each bus on a 50% duty"); 
PUT_LINE("cycle. The charge rates are CELL ampere hours/15 for autumnal ’); 
PUT_L1NE("equinox and CELL ampere hours/45 for summer solstice. "); 
new_line(3); 

STOP; 

new_line(l); 

PUT_LINE(’The currents are:"); 

NEW_LINE(1); 

EQU1N0X_CURRENT; = CELL_AH/EQUINOX_CHARGE_RATE; 
PUT("Equinox current is "); 

SET_COL(64); 

PUT(EQU1N0X_CURRENT,F0RE= >2.AFT= >2,EXP= >0); 

PUT(" amps’); 

NEW_LINE(2); 

SOLSTICE_CURRENT; = CELL_AH/SOLSTICE_CH ARGE_RATE; 
PUTf’SoIstice current is "); 

SET_COL(64); 

PUT(SOLSTICE_CURRENT,FORE= >2,AFT= >2,EXP= >0); 

PUT(" amps’); 

NEW_LINE(2); 


PUT_LINE("Charging or discharging at high rate is based on returning"); 

PUT_LlNE("the energy depleted during eclipse to each battery.’); 

NEWLINEd); 

POWER_EQUINOX_CHARGE:=MAX1MUM_CHARGE_VOLTAGE*EQUINOX_CURRENT; 
PUT( "Power required for equinox charge at high rate is ’); 

SET_COL(64); 

PUT(POWER_EQUINOX_CHARGE,FORE= >3,AFT= >2,EXP= >0); 

PUT(’ watts’); 

NEW_LINE(2); 

POWER_SOLSTICE_CHARGE;=MAXIMUM_CHARGE_VOLTAGE*SOLSTlCE_CURRENT; 
PUT("Power required for solstice charge at high rate is ’); 

SET_COL(64); 

PUT(POWER_SOLSTlCE_CHARGE,FORE= >3.AFT= >2,EXP= >0); 

PUT(’ watts’); 


149 





NEW_UNE(2); 


RECHARGE_TIME:=((BATTERY_LOAD/NUMBER_OF_BUSES)*ECLIPSE_TIME) 
/(POWER_EQUINOX_CHARGE • CHARGE_DISCHARGE_EFFIC1ENCY BATTERY); 

PUT("Recharge time is "); 

SET_COL(64); 

PUT(RECHARGE_TIME,FORE= >3,AFT= >2,EXP= >0); 

PUT(" hours'); 

NEW_LINE(2); 

stop; 

CREATE(OUTF,NAME= > "CELPARAM.DAT'); 

PUT I TNF.fOIITF '************************‘»***************»******************************** 
SET~COL(OUTF,20); 

PUT_LINE(OUTF,"ELECTRICAL POWER SUBSYSTEM PARAMETERS'); 

PUT UINE(OUTF,"***************'*‘*********************************’*‘*******’*‘***+***’*‘******’*‘ 
NEW_LINE(OUTF,2); 

SET_COL(OUTF,15); 

PUT(OUTF, "PARAMETER"); 

SET_COL(OUTF,46); 

PUT(OUTF,"SYMBOL"); 

SET_COL(OUTF,61); 

PUT(OUTF,"VALUE"); 

SET_COL(OUTF,68); 

PUT(OUTF, "UNITS"); 

NEW_LINE(OUTF.2); 

PUT LINE(0UTF,'*********’''********‘'‘*****'*‘*’'‘***********''‘’'‘******************“*‘************’'‘* 


PUT( OUTF,"Payload Power Requirements"); 

SET_COL(OUTF,58); 

PUT( OUTF.PAYLOAD POWER, FORE = > 4, AFT = > 2, EXP = > 0); 
SET_COL(OUTF,69); 

PUT( OUTF,"watts"); 

NEW_LINE(OUTF,l); 


PUT( OUTF,"Housekeeping Power "); 

SET_COL(OUTF,46); 

PUT(OUTF."Phk"); 

SET_COL(OUTF,58); 

PUT( OUTF.HOUSEKEEPING POWER, FORE = > 4. AFT = > 2, EXP = > 0); 
SET_COL(OUTF,69); 

PUT( OUTF,"watts"); 

NEW_LINE(OUTF,I); 





PUT( OUTF.'Load including load contingency’); 

SET_COL(OUTF,46); 

PUT(OUTF,’Ptot’); 

SET_COL(OUTF,58); 

PUT(OUTF,BATTERY_LOAD, FORE = > 4, AFT = > 2, EXP = > 0); 
SET_COL(OUTF,69); 

PUT(OUTF,"watts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Solar Array Load"); 

SET_COL(OUTF,46); 

PUT(OUTF,’Psal"); 

SET_COL(OUTF,58); 

PUT(OUTF,SOLAR_ARRAY_LOAD, FORE = > 4. AFT = > 2. EXP - > OL 
SET_COL(OUTF,69); 

PUT(OUTF, "watts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Spacecraft Life"); 

SET_COL(OUTF,58); 

PUT(OUTF,SPACECRAFT_LIFE,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUTfOUTF,"years’); 

NEW_LINE(OUTF,l); 

PUT(OUTF,"Depth of Discharge"); 

SET_COL(OUTF,46); 

PUTCOUTF/DOD’); 

SET_COL(OUTF,58); 

PUT(OUTF,DEPTH_OF_DISCHARGE.FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF,’%"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"EOL Battery Discharge Voltage"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vd"); 

set_col{OUTF,58); 

PUT(OUTF,EOL_BATTERY_DISCHARGE_VOLTAGE.FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUTfOUTF, "volts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Bypass Diode Voltage Drop’); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vdd"); 

SET_COL(OUTF,58); 

PUT(0UTF,BYPASS_DI0DE_V0LTAGE DR0P,F0RE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF,"volu"); 

NEW_LINE(OUTF,l); 


151 





PUT(OUTF, "Design Satellite Bus Voltage"); 
SET_COL(OUTF,46); 

PUT(OUTF,"Vbus"); 

SET_COL(OUTF,58); 

PUT(OUTF,BUS_VOLT AGE,FORE = >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "volts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Bus Voltage Allowable Deviation"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vbdev"); 

SET_COL(OUTF,58); 

PUT(0UTF,BUS_V0LTAGE_ALL0WABLE_DEVIAT10N,F0RE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "volts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Minimum Bus Voltage in Sunlight"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vbmin"); 

SET_COL(OUTF,58); 

PUT(OUTF,BUS_VOLTAGE-BUS_VOLTAGE_ALLOWABLE_DEVIATION,FORE= >4,AFT= >2,EXP= >0); 
SET_COL{OUTF,69); 

PUT(OUTF, "volts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF, "Eclipse Time (Geosynchronous Orbits"); 
SET_COL(OUTF.46); 

PUT(OUTF,’t"); 

SET_COL(OUTF,58); 

PUT(OUTF,ECLIPSE_TIME,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "hours"); 

NEW_L1NE(0UTF,1); 


PUT(OUTF,"Maximum Battery Charge Voltage"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vbc"); 

SET_COL(OUTF,58); 

PUT(OUTF.MAXlMUM_CHARGE_VOLTAGE,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "volts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Number of Satellite Buses"); 
SET_COL(OUTF,46); 

PUT(OUTF,"Buses"); 


152 







SET_COL(OUTF,58); 
PUT(OUTF,J, WIDTH = >4); 
NEW_LINE(OUTF,l); 


PUT(OUTF,"Bus Power"); 

SET_COL{OUTF,46); 

PUT(OUTF,"Vbus"); 

SET_COL(OUTF,58); 

PUT(OUTF,BUS_POWER,FORE= >4,APT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "watts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Number of Series Connected Diodes"); 

SET_COL(OUTF.46); 

PUT(OUTF,"Ndiode’); 

SET_COL(OUTF,58); 

PUT(0UTF,NUMBER_SERIES_C0NNECTED_D10DES,F0RE= >4,AFT= >2,EXP= >0); 
NEW_LINE(OUTF,l); 

PUT(OUTF, "Series Connected Diode Voltage Drop"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vdiode"); 

SET_COL(OUTF,58); 

PUT(OUTF,SERIES_CONNECTED_DIODE_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "volts"); 

NEW_LINE(OUTF.l); 

PUT(OUTF,"Battery Charger Voltage Drop"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vcd"); 

SET_COL(OUTF,58); 

PUT(OUTF,BATTERY_CHARGER_VOLTAGE_DROP,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "volts"); 

NEW_LINE(OUTF,l); 

PUT(OUTF,"Equinox Current"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Ieq"); 

SET_COL(OUTF,58); 

PUT(OUTF,EQUINOX_CURRENT.FORE= >4,AFT= >2,EXP= >0); 

SET_COL(OUTF,69); 

PUT(OUTF,"amps"); 

NEW_LINE(OUTF,l); 

PUT(OUTF,"Solstice Current'); 

SET_COL(OUTF,46); 


153 



PUT(OUTF."lss’); 

SET_COL(OUTF,58); 

PUT(OUTF,SOLSTICE_CURRENT,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "amps’); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Battery Charge Discharge Efficiency"); 

SET_COL(OUTF,46); 

SET_COL(OUTF,58); 

PUT(OUTF,CHARGE_DISCHARGE_EFFICIENCY_BATTERY,FORE= >4.AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF,"%"); 

NEW_LINE(OUTF,l); 


PUT(OUTF,"Number of Satellite Buses"); 
SET_COL(OUTF,58); 

PUT(OUTF, J, WIDTH = >4); 
NEW_LINE(OUTF,l); 


PUT(OUTF, "Number of Battery Cells in Series’); 

SET_COL(OUTF,46); 

PUT(OUTF,"N"); 

SET_COL(OUTF,58); 

PUT(OUTF,SERIES_CELLS_FOR_MlN_DlS_VOLT.FORE= >4.AFT= >2,EXP= >0); 
NEW_LINE(OUTF,l); 


PUT(OUTF,"Minimum Discharge Bus Voltage"); 

SET_COL(OUTF,46); 

PUT(OUTF,'Vdb"); 

SET_COL(OUTF,58); 

PUT(OUTF,MINIMUM_DISCHARGE_BUS_VOLTAGE.FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF, "volts"); 

NEW_LINE(OUTF,l); 


PUT(OUTF, "Required Cell Capacity"); 
SET_C0L(01jTF,46); 

PUT(OUTF,"C"); 

SET_COL(OUTF,58); 

PUT(OUTF,CELL_AH,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF,"AH"); 

NEW_LINE(OUTF,l); 


PUTfOUTF, "Boost Voltage Req, by Charge Array"); 

SET_COL(OUTF,46); 

PUT(OUTF,"Vca"); 

SET_COL(OUTF,58); 

PUT(OUTF, VOLT AGE CHARGEARRAY, FORE= >4,AFT= > 2,EXP= >0); 


154 



SET_COL(OUTF,69); 
PUT(OUTF, "volts’); 
NEW_LINE(OUTF.l); 


PUT(OUTF,'Maximum Battery Charge Voltage’); 

SET_COL(OUTF,46); 

PUT(OUTF,’Vbc’); 

SET_COL(OUTF,58); 

PUT(OUTF,BUS_VOLTAGE + MAXIMUM_BATTERY_CHARGE_VOLTAGE,FORE= >4,AFT= >2,EXP = 
> 0 ); 

SET_COL(OUTF,69); 

PUT(OUTF,’volts’); 

NEW_LINE(OUTF,l); 


PUT(OUTF,’Power Req. Equinox Charge @ High Rate’); 

SET_COL(OUTF,46); 

PUT(OUTF,’Pchrgeq"); 

SET_COL(OUTF,58); 

PUT(OUTF,POWER_EQUtNOX_CHARGE,FORE= >4..AFT= >2.EXP= >0); 
SET_COL(OUTF,69); 

PUT(OUTF,’watts’); 

NEW_UNE(OUTF,l); 


PUT(OUTF,’Power Req. Solstice Charge @ High Rate’); 

SET_COL(OUTF,46); 

PUT(OUTF,"Pchrgss’); 

SET_COL(OUTF,58); 

PUT(OUTF,POWER_SOLSTlCE_CHARGE,FORE= >4,AFT= >2,EXP= >0); 
SET COL(OUTF,69); 

PUT^OUTF,’watts’); 

NEW_LlNE(OUTF,l); 


PUT(OUTF,"Recharge Time"); 

SET_COL(OUTF,46); 

PUT(OUTF,’Tcharge-e"); 

SET_COL(OUTF,58); 

PUT(OUTF,RECHARGE_TIMF,FORE= >4.AFT= >2.LXP= >0); 

SET_COL(OUTF,69); 

PUT(OUTF,’hours’); 

NEW_LINE(OUTF,l); 

PUT LINE(OUTF ''*******»‘'»‘*****’»‘*************************’*‘*********+*****’*'*****+’*‘****^*****") 
PUT LJNE(OUTF *'*****+*’»'***>»‘++**’*‘**********'*'**++********************'*‘*’*'*****************-^'') 


CLOSE(OUTF); 


155 




- MATERIAL, 


VIDEO.CLEAR_SCREEN; 

PUT_LINE("SOLAR ARRAY DESIGN’); 

PUT_L1NE(" The total load on the solar array will be the summation oP); 
PUT_LINE("the equipment load and the power required for charging the"); 
PUT_LINE(’batteries. Generally, 10% solar array design margin is used"); 
PUT_LINE("to take into account the uncertainty in the radiation "); 
PUT_LINE("degradation and other design factors of the solar array.’); 


should 1 use payload power or bus power 


DESIGN_LOAD_EQUINOX;=DESIGN_MARGlN*(BATTERY_LOAD + POWER_EQUINOX_CHARGE); 
NEW_LINE(2); 

PUT("The solar array design load at EQUINOX is ’); 

SET_COL(64); 

PUT(DESIGN_LOAD_EQUINOX,FORE= >5,AFT= >2,EXP= >0);PUT(" watts"); 

DESIGN_L0AD_S0LST1CE:=DESIGN_MARG1N*(BATTERY_L0AD +POWER SOLSTICE CHARGE); 
NEW_LINE(2); 

PUT("The solar array design load at SOLSTICE is "); 

SET_COL(64); 

PUT(DESIGN_LOAD_SOLSTICE,FORE= >5,AFT= >2,EXP= >0);PUT(" watts’); 

NEW_LINE(2); 

PUT_LINE(" The design load for either configuration will be divided "); 

PUT_LINE("by the total number of buses for the main load.’); 

NEW_LINE(2); 


STOP; 

NEW_LINE(1); 

CELL_CURRENT_EOL_SOLSTICE:=((CURRENT_MAX_POWER 
+ TEM P_COEF_EOL_CURRENT 

*(SOLSTICE_SOLAR_ARRAY_TEMP-SOLAR_CELL_TEST_TEMP)) 

♦ASSEMBLY LOSS CURRENT* ENVIRONMENTAL DEGRADATION CURRENT 
*SOLSTICE_SIF_CURRENT); 

PUT_LINE("Solar Cell Current at Maximum Power Point "); 

PUT("EOL Summer Solstice I-V curve is ’); 

SET_COL(60); 

PUT(CELL_CURRENT_EOL_SOLSTICE, FORE= >3,AFT= >4,EXP= >0);PUT(' Amps'); 
NEW_LINE(2); 


CELL_CURRENT_EOL_EQUINOX: = ((CURRENTM AXPOWER 
+ TEM P_COEF_EOL_CURRENT 

*(EQUlNOX_SOLAR_ARRAY_TEMP-SOLAR_CELL_TEST TEM P)) 

♦ASSEMBLY LOSS CURRENT* ENVIRONMENTAL DEGRADATION CURRENT 
♦EQUINOXSIFCURRENT); 

PUT_LINE("Solar Cell Current at Maximum Power Point "); 

PUT("EOL Autumnal Equinox I-V curve is "); 


156 








SET_COL(60); 

PUT(CELL_CURRENT_EOL_EQUINOX, FORE= >3,AFT= >4.EXP= >0);PUT(" Amps'); 
NEW_LINE(2); 

REQUIRED_CURRENT_SOLSTICE_PER_BUS: = DESIGN_LOAD_SOLSTICE/NUMBER_OF_BUSES 

/BUS_VOLTAGE; 

PUT("Required Current Solstice Per Bus’); 

SET_COL{60); 

PUT(REQUIRED_CURRENT_SOLSTICE_PER_BUS,FORE= >3,AFT= >4,EXP= >0); 

PUTC amps’); 

NEW_LINE(2); 

REQUIRE*-_CURRENT_EQUlNOX_PER_BUS: = DESlGN_LOAD_EQUlNOX/NUMBER_OF_BUSES 

/BUS_VOLTAGE; 

PUT_LlNE(’Required Current Equinox Per Bus’); 

SET_COL(60); 

PUT(REQUlRED_CURRENT_EQUINOX_PER_BUS,FORE= >3.AFT= >4,EXP= >0); 

PUT(" amps’); 

NEW_L1NE(2); 

PUT("BUS VOLTAGE’); 

SET_COL(60); 

PUT(BUS_VOLTAGE,FORE= > 3,AFT= >4,EXP= >0); 

NEW_LINE(4); 


STOP; 

NEW_LINE(1); 

NUMBER_CELLS_IN_PARALLEL; = 

REQUIRED_CURRENT_SOLSTICE_^PER_BUS/CELL_CURRENT_EOL_SOLSTlCE; 
PUT("# cells in parallel for minimum current each bus is’); 

SET_COL{65); 

PUT(NUMBER_CELLS_IN_PARALLEL,FORE= >4,AFT= >2,EXP= >0); 

NEWLINEd); 

NJNTEGER; = INTEGER(NUMBER_CELLSJN_PARALLEL); 

PUT(’<t cells in parallel for minimum current INTEGER’); 

SET_COL(65); 

PUT(FLOAT(N_lNTEGER),FORE= >4 AFT= >2,EXP= >0); 

NEW_LINE(1); 

ifFLOAT(N_INTEGER) < NUMBER_CELLS_IN_PARALLEL then 
NJNTEGER: =N_INTEGER +1; 
end if; 

NUMBER_CELLS IN_PARALLEL;=FLOAT(N INTEGER); 

PUT(’# cells in parallel for minimum current ROUND UP "); 

SET_COL(65); 

PUT(NUMBER_CELLS IN_PARALLEL,FORE= >4,AFT= >2.EXP= >0); 
new line(2); 


--TEMP_OF_CELL_CHARACS 

CELL_VOLTAGE_EOL_SOLSTlCE: =(VOLTAGE MAX POWER-PANEL WIRING LOSS PER_CELL 


157 






+TEMP_COEF_EOL_VOLTAGE 

*(SOLSTlCE_SOLAR_ARRAY_TEM P-SOLAR_CELL_TEST_TEM P)) 
■^ENVIRONMENT AL_DEGRADAT10N_V0LTAGE; 

PUT("Solar Cell Voltage at EOL Solstice is "); 

SET_COL(65); 

PUT(CELL_VOLTAGE_EOL_SOLSTICE.FORE= > 1,AFT= >4,EXP= >0);PUT(" volts"); 
NEW_LINE(2); 

CELL_VOLTAGE_EOL_EQUINOX:=(VOLTAGE_MAX_PO\\TER-PANEL_WIRING LOSS PER CELL 
+TEMP_COEF_EOL_VOLTAGE 

■*(EQUINOX_SOLAR_ ARRA Y_TEM P-SOLAR_CELL_TEST_TEM P)) 
■^ENVIRONMENT ALDEGRADATIONVOLT AGE; 

PUT(" Solar Cell Voltage at EOL Equinox is "); 

SET_COL(65); 

PUT(CELL_VOLTAGE_EOL_EQUINOX,FORE= > 1,AFT= >4,EXP= >0);PUT(’ volts'); 
NEW_LINE(2); 


NUMBER_CELLS_1N_SERIES: =(BUS_VOLTAGE + BLOCKINGDIODEVOLTAGEDROP 

+ ARRAY_WIRING_HARNESS_AND_SLlP_RlNG_VOLTAGE_DROP) 
/CELL_VOLTAGE_EOL_SOLSTlCE; 

PUT("# series cells for minimum discharge voltage"); 

SET_COL(65); 

PUT(NUMBER_CELLSJN_SERlES,FORE= >4,AFT= >2,EXP= >0); 
new_line(l); 

N_INTEGER:=INTEGER(NUMBER_CELLS_IN_SER1ES); 

PUT("# series cells for minimum discharge voltage INTEGER"); 

SET_COL(65); 

PUT(FLOAT(N_INTEGER),FORE= >4,AFT= >2,EXP= >0); 

NEW LINE(l); 

if FLOAT(N_lNTEGER) < NUMBER_CELLS_1N_SER]ES then 
NJNTEGER: = NJNTEGER +1; 
end if; 

NUMBER_CELLS_1N_SER1ES;=FL0AT(N_INTEGER); 

— minimum discharge voltage 


PLJT("^ series cells for minimum discharge voltage ROUND UP’); 
SET_COL(65); 

PUT(NUMBER_CELLS_IN_SERIES,FORE= >4,AFT= >2,EXP= >0); 
new_line(4); 


STOP; 


-- Cell current at maximum power point of EOL autunmal equinox 


NEW_LINE(1); 

CELL_CURRENT_EOL_EQUINOX:= (CURRENTMAXPOWER + TEMPCOEFEOLCURRENT 
■*(EQUINOX_SOLAR_ARRAY_rEMP-SOLAR_CELL_TF.ST_TEMP)) 
■»ASSEMBLY_LOSS_CURRENT-» ENVIRONMENTAL DEGRADATION CURRENT 
■»EQUINOX_SIF_CURRENT; 

PUT(”Solar Cell Current at EOL Autumnal Equinox '); 

SET_COL(60); 


158 





PUT(CELL_CURRENT_EOL_EQUINOX, FORE= > I.AFT= >4,EXP= >0);PUT(’ Amps"); 
NEW_LINE(2); 

CELL_VOLTAGE_EOL_EQUINOX;=(VOLTAGE_MAX_POWER-PANEL_WlRING_LOSS_PER CELL 
+TEMP_COEF_EOL_VOLTAGE 

*(EQUIN0X_S0LAR_ARRAY_TEMP-S0LAR_CELL_TEST_TEMP)) 
♦ENVIRONMENT AL_DEGRADAT10N_V0LT AGE; 

PUT("Solar Cell Voltage at EOL equinox is "); 

SET_COL(60); 

PUT(CELL_VOLTAGE_EOL_EQUINOX,FORE= > 1,AFT= >4,EXP= >0);PUT(" volts'); 
NEW_LINE(2); 


BUS_CURRENT;=CELL_CURRENT_EOL_EQUINOX*NUMBER_CELLS_IN_PARALLEL; 
PUT("The current per bus or wing is "); 

SET_COL(60); 

PUT(BUS_CURRENT, FORE= >3,AFT= >2,EXP= >0); 

PUT(' amps"); 

NEW_LINE(2); 

BUS_VOLTAGE; = (CELL_VOLTAGE_EOL_EQUINOX*NUMBER_CELLSJN_SERlES) 
-(BLOCKING_DIODE_VOLTAGE_DROP 

+ ARRAY_WlRING_HARNESS_AND_SLlP_RlNG_VOLTAGE_DROP); 
PUT('The voltage per bus or wing is "); 

SET_COL(60); 

PUT(BUS_VOLTAGE, FORE= >3,AFT= >2,EXP= >0); 

PUTC volts"); 

NEW_LINE(2); 

TOTAL_POWER_PER_BUS: = BUS_CURRENT*BUS_VOLTAGE; 

ARRA Y_TOTAL_POWE R: = TOTAL_POWER_PER_BUS*N UM BER_OF_BUSES; 

PUT("The Total Power is "); 

SET_COL(58); 

PUT(ARRAY_TOTAL_POWER, FORE= >5,AFT= >2,EXP= >0); 

PUT(" Watts"); 

NEW_LINE(4); 

STOP; 




if DRUM_SPINNER = FALSE then 
POWER_MARGIN:=DESIGN_MARGIN*POW'ER_TOTAL; 
else 

POWER_MARGlN:=DESIGN_MARGlN*POWER_TOTAL/Pl; 
end if; 


if ARRAY_TOTAL POWER > = DESIGN LOAD EQUINOX and DRUM SPINNER = TRUE then 
if (ARRAY_TOfAL_POWER-DESIGN_LOAD_EQUINOX) > 100.0 then 
VIDEO. CLEAR_SCREEN; 

PUT("Total array power is "); 

PUT(ARRAY_TOTAL_POWER-DESIGN_LOAD_EQUINOX.FORE= >4.AFT= >2.EXP= >0); 


159 











PUT(" watts more than needed.*); 

NEW_LINE{1); 

PUT_LINE("lf substantially greater recommend DESIGN BUS VOLTAGE be reduced"); 
PUT_LINE("Recommend re-iterate to optimize design ’); 

NEWLlNEd); 

FINAL: = FALSE; 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR:=N; 

VIDEO. CLEAR_SCREEN; 
goto REITERATE_VOLTAGE; 
else 

goto MOVEON; -- <<MOVEON>> Exit if structure 
end if; 
end if; 

elsif ARRAY_TOTAL_POWER < DESIGN_LOAD_EQUINOX then 
PUT(’THE TOTAL ARRAY POWER IS *); 

PUT(ABS(DESIGN_LOAD_EQUINOX-ARRAY_TOTAL_POWER),FORE= >4,AFT= >2.EXP= >0); 
PUT(" watts less than needed."); 

NEW_LINE(2); 

PUT("Recommend increasing DESIGN BUS VOLTAGE"); 
new_line(2); 

PUT_LINE("Recommend re-iterate to optimize design "); 

FINAL: = FALSE; 

SET_COL(10); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR:=N; 

VIDEO.CLEAR_SCREEN; 
goto REITERATE_VOLTAGE; 
else 

goto MOVEON; — < <MOVEON> > Exit if structure 
end if; 


elsif (ARRAY_TOTAL_POWER-DESIGN_LOAD_EQUINOX) < 100.0 
and DRUM_SPINNER = FALSE 

and (ARRAY_TOTAL_POWER-DESIGN_LOAD_EQUlNOX) > 0.0 then 
VIDEO.CLEARSCREEN; 


PUT_LINE("Design Bus Voltage and Minimum Discharge Bus Voltage"); 
PUT_LINE("are within optimal design parameters."); 

NEW_LINE(4); 

STOP; 
end if; 

< < MOVEON > > 


160 




CHARGE ARRAY DESIGN 
NEW_UNE(1); 


STOP; 

PUT_LINE(" CHARGE ARRAY DESIGN “); 

PUT_LINE("-'); 


NUMBER CELLS_IN_SERIES_CHARGE_ARRAY_SOLSTICE; = 

VOLTAGE_CHARGE_ARRAY/CFLL_VOLTAGE_EOL_SOLST!CE; 

NEW_LINE(1); 

PUT("# of series cells for charge array during solstice, Nc, is “); 

SET_COL(70); 

PUT(NUMBER_CELLS_IN_SERIES_CHARGE_ARRAY_SOLSTICE,FORE= >3,AFT= >2.EXP= >U); 
NEW_LINE(1); 

N_INTEGER: = INTEGER(NUMBER_CELLSJN_SERIES_CHARGE_ARRAY_SOLSTICE); 

PUT("# series cells charge during solstice, Nc, INTEGER is "); 

SET_COL(70); 

PUT(FLOAT(N_INTEGER),FORE= >3,AFT= >2,EXP= >0); 

NEW_LINE(1); 

if FLOAT(N_INTEGER) < NUMBER_CELLS_IN_SER1ES_CHARGE_ARRAY_S0LST1CE then 
NJNTEC ER: = NJNTEGER +1; 
end if; 

NUMBER_CELLS_lN_SERlES_CHARGE_ARRAY_SOLSTlCE:=FLOAT(N_lNTEGER); 

SET_COL(l); 

PUT('# series cells charge during solstice, Nc, ROUND UP is "); 

SET_COL(70); 

PUT(NUM:JER_CELLS_IN_SERIES_CHARGE_ARRAY_SOLSTICE,FORE= >3,AFT= >2.EXP= >0); 
new_line(2 ; 


Parallel ells charge array solstice 


NUMBER CELLS_IN_PARALLEL_CHARGE_ARRAY_SOLSTlCE: = 

CELL_AH/SOLSTICE_CHARGE_RATE/CELL_CURRENT_EOL_SOLSTlCE; 


SETCOI 1); 

PUT("/^ parallel cells charge array during solstice. Ncs, is "); 

SET_COI 70); 

PUT(NU^ ;BER_CELLS_IN_PARALLEL_CHARGE_ARRAY_S0LST1CE,F0RE= > 3,AFT= > 2,EXP= >0); 
NEW_LI^E(1); 

NJNTEC ER: = INTEGER(NUMBER_CELLS_IN_PARALLEL_CHARGE_ARRAY_S0LSTICE); 

PUT("# parallel cells charge array during solstice, Ncs, INTEGER is ’); 

SET_COL<70); 

PUT(FLO \T(NJNTEGER),FGRE= >^.AFT= >2,EXP= >0); 

NEW_L1N£(1); 

if FLOAT(N INTEGER) < NUMBER_CELLSJN_PARALLEL_CHARGE_ARRAY SOLSTICE then 
N_INTEGER: = NJNTEGER + 1; 
end if; 


161 









r 


NUMBER_CELLS_IN_PARALLEL_CHARGE_ARRAY_SOLSTlCE: = FLOAT(N_INTEGER); 

PUT("<< parallel cells charging array during solstice, Ncs, ROUND UP is’); 

SET_COL(70); 

PUf(NUMBER_CELLSJN_PARALLEL_CHARGE_ARRAY_SOLSTlCE,FORE= >3,AFT= >2,EXP= >0); 
NEW_LINh(2); 


“ Parallel cells charge array equinox 

NUMBER_CELLS_IN PARALLEL_CHARGE ARRAY_EQU1N0X; = 

CELL_AH/EQUINOX_CHARGE_RATE/CELL_CURRENT_EOL_EQUINOX; 


PUT(’# parallel cells charge array during equinox. Nee, is ’); 

SET_COL(70); 

PUT(NUMBER_CELLS_IN_PARALLEL_CHARGE_ARRAY_EQUINOX,FORE= >3,AFT= >2,EXP= >0); 
NEW_LINE(1); 

N_INTEGER: = INTEGER(NUMBER_CELLSJN_PARALLEL_CHARGE_ARRAY_EQUINOX); 

PUT("# parallel cells charge array during equinox. Nee, INTEGER is "); 

SET_COL(70); 

PUT(FLOAT(N_INTEGER),FORE= >3,AFT= >2,EXP= >0); 

NEWLINEd); 

if FLOAT(NJNTEGER) < NUMBER_CELLSJN_PARALLEL_CHARGE_ARRAY_EQUINOX then 
NJNTEGER; = NJNTEGER +1; 
end if; 

NUMBER_CELLS_IN_PARALLEL_CHARGE_ARRAY_EQUlNOX; = FLOAT(N_INTEGER); 

PUT{"# parallel cells charge array during equinox. Nee, ROUND UP is "); 

SET_COL(70); 

PUT'(NUMBER_CELLS_IN_PARALLEL_CHARGE_ARRAY_EQU1N0X,F0RE= >3,AFT= >2,EXP= >0): 
NEW_L1NE(4); 

..■•■ + >(<* + **>t‘*********lt‘*****l|«******l(l******)(<**j|C*************>l<****************** 


CREATE(OUTSC,NAME= > "SOLCELL.DAT’); 

SET_LINE(OUTSC,l); 

LINE(OUTSC "♦**************+**>»‘************+**’*'**********=*'*********=**-»-'********i*e**** + 5t‘" J 
SEtIcOL(OUTSC,20); 

PUT(OUTSC, "SOLAR CELL CHARACTERISTICS’); 
new_line(OUTSC, 1); 

PUT LINE(0UTSC,’*’'‘****’'"'"'"*"'"'"''****’*‘**‘'‘*''"'"'‘**'*'******''‘*****''‘*****’'‘********’‘*************‘'‘***” ) 
NEW_LINE(OUTSC,I); 

SET_COL(OUTSC,15); 

PUT(OUTSC,’CHARACTERISTIC’); 

SET_COL(OUTSC,47); 

PUT(OUTSC, "VALUE’); 

SET_COL{OUTSC,59); 

PUT(OUTSC,’UNITS"); 

NEW_LINE(OUTSC,l); 

PUT LINE(0UTSC, 


162 









PUT(OUTSC,"TEMPERATURE BASIS FOR PERFORMANCE"); 
SET_COL(OUTSC,44); 

PUT(OUTSC,SOLAR_CELL_TEST_TEMP ,FORE= >4.AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"deg celcius"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"TEMPERATURE SOLAR ARRAY SOLSTICE"); 


SET_COL(OUTSC,44); 

PUT(OUTSC,SOLAR_ARRAY_TEMP_SCLSTlCE.FORE= >4.AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"deg celcius "); 

NEW_LlNE(OUTSC,l); 

PUT(OUTSC,"SOLAR ARRAY TEMPERATURE EQUINOX"); 


SET_COL(OUTSC,44); 

PUT(OUTSC,SOLAR_ARRAY_TEMP_EQUINOX,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"deg celcius "); 

NEW_LINE(OUTSC,I); 

PUT(OUTSC,"TEMPERATURE COEFFICIENT EOL CURRENT "); 
SET_COL(OUTSC,44); 

PUT(OUTSC,TEMP COEF EOL_CURRENT,FORE= > 1,AFT= >5,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"ina/deg celcius"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"TEMPERATURE COEFFICIENT EOL VOLTAGE "); 
SET_COL(OUTSC,43); 

PUT(OUTSC,TEMP_COEF_EOL_VOLTAGE,FORE= >2,AFT= >5,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"mv/deg celcius"); 

NEW_LINE(OUTSC,I); 

PUT(OUTSC, "POWER PER SOLAR CELL"); 


SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_CURRENT_EOL_EQUINOX*CELL_VOLTAGE_EOL_EQUINOX 

,FORE= >3,AFT= >3,EXP= >0); 


SET_COL(OUTSC,59); 

PUT(OUTSC,"watts"); 

NEW_LlNE(OUTSC,I); 


163 








PUT(OUTSC,"CELL CURRENT @ MAX POWER POINT’); 

SET_COL(OUTSC.44); 

PUT(OUTSC,CELL_CURRENT_EOL_EQUINOX .FORE= >3,AFT= >3,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,’amps’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,’CELL VOLTAGE @ MAX POWER POINT ’); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_VOLTAGE_EOL_EQUlNOX ,FORE= >3,AFT= >3,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC.’volts’); 

NEW_LlNE(OUTSC,l); 

PUT(OUTSC,’CURRENT - SHORT CIRCUIT’); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CURRENT_SHORT_CIRCUIT ,FORE= >3,AFT= >3,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC.’f»inps’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,’VOLTAGE - OPEN CIRCUIT’); 

SET_COL(OUTSC,44); 

PUT(OUTSC,VOLTAGE_OPEN_CIRCUIT,FORE= >3,AFT= >3.EXP= >0); 
SET_COL(OUTSC,59); 

PUT{OUTSC,’volts’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,’CELL WIDTH’); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_WIDTH,FORE= >3,AFT= >3.EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"cm ’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,’CELL LENGTH"); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_LENGTH,FORE= >3,AFT= >3,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,’cm ’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,’CELL THICKNESS"); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_THICKNESS,FORE= >3,AFT= >3,EXP= >0); 
SET_COL(OUTSC,58); 

PUT(OUTSC,’cm ’); 

NEW_LINE(OUTSC,l); 

- SOLAR ARRAY DATA 

SET_LINE(OUTSC,l); 


164 







PUT LINE(OUTSC ''****************‘******‘********************-*******************************'^ 
SET”cOL(OUTSC.20); 

PUT(OUTSC, "SOLAR ARRAY SYSTEM CHARACTERISTICS"); 
new_line(OUTSC, 1): 

PUT LINE(OUTSC ''**‘********‘*******‘*‘*********‘**'********************************************’"j 
NEW_LINE(OUTs’c,l); 


SET_COL(OUTSC,15); 

PUT(OUTSC, "CHARACTERISTIC"); 

SET_COL(OUTSC,47); 

PUT(OUTSC, "VALUE"); 

SET_COL(OUTSC,59); 

PUT(OUTSC,"UNITS"); 

NEW_LINE{OUTSC,l); 

PUT LINE(OUTSC “*******************************•>•*****************************************'') 


PUT(OUTSC,"DESIGN MARGIN'); 

SET_COL(OUTSC,44); 

PUT(OUTSC,DESIGN_MARGIN,FORE= >4,AFT= >?,EXP= >0); 

SET_COL(OUTSC,59); 

PUT(OUTSC,'%"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"DESIGN LOAD EQUINOX"); 

SET_COL(OUTSC,44); 

PUT(OUTSC,DESIGN_LOAD_EQUINOX,FORE= >4,AFT= >2,EXP= >0); 

SET COL(OUTSC,59); 

PUT^OUTSC, "watts'); 

NEW_LINE(OUTSC,I); 

PUT(OUTSC,"DESIGN LOAD SOLSTICE"); 

SET_COL(OUTSC,44); 

PUT(OUTSC,DESIGN LOAD_SOLSTICE,FORE= >4,AFT= >2,EXP= >0); 

SET_COL{OUTSC,59)r 

PUT(OUTSC, "watts"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,'CELL CURRENT EOL SOLSTICE"); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_CURRENT_EOL_SOLSTICE,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"amps"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"REQUIRED CURRENT SOLSTICE PER BUS'); 

SET_COL(OUTSC.44); 

PUT(OUTSC,REQUIRED_CURRENT_SOLSTICE_PER_BUS,FORE= >4.AFT= >2.EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,'amps"); 


165 






NEW_LINE(OUTSC.l): 

PUT(OUTSC,"REQUIRED CURRENT EQUINOX PER BUS"); 

SET_COL(OUTSC,44); 

PUT(OUTSC,REQUIRED_CURRENT_EQUINOX_PER_BUS,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"amps"); 

NEW_LINE(OUTSC,I): 


PUT(OUTSC,"NUMBER CELLS IN PARALLEL (FLAT PANEL)"); 
SET_COL(OUTSC,44); 

PUT(OUTSC,NUMBER_CELLS_IN_PARALLEL,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"solar cells"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"NUMBER CELLS IN PARALLEL (CYLINDER)"); 
NUMBER_CELLS_IN_PARALLEL; = NUMBER_CELLS_IN_PARALLEL*P1; 
NINTEGER: = INTEGER(NUMBER_CELLS_IN_PARALLEL); 

if FLOAT(N_INTEGER) < NUMBER CELLSJN PARALLEL then 
N JNTEGER: = NJNTEGER +1; 
end if; 

NUMBER_CELLS_IN_P ARALLEL: = FLOAT(N_INTEGER); 

SET_COL(OUTSC,44); 

PUT(OUTSC,NUMBER_CELLS_IN_PARALLEL,FORE= >4,AFT= >2.EXP= >0); 
SET COL(OUTSC,59): 

PUT‘(0UTSC,"solar cells"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"CELL VOLTAGE EOL SOLSTICE"); 

SET_COL(OUTSC,44); 

PUT7oUTSr,CELL_VOLTAGE_EOL_SOLSTlCE,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC, "volts"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"NUMBER CELLS IN SERIES - PER BUS"); 

SET_COL(OUTSC,44); 

PUT(OUTSC.NUMBER_CELLS_IN_SERIES,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"solar cells"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"TOTAL NUMBER OF CELLS’); 

SET_COL(OUTSC,44); 

PUT(OUTSC,NUMBER_CELLS_IN_SERIES*NUMBER_CELLSJN_PARALLEL 

,FORE= >4.AFT= >2,EXP= >0); 

SET_COL(OUTSC,59); 

PUTfOUTSC,"solar cells"); 


166 








NEW_LINE(OUTSC,l); 

PUT(OUTSC,"CELL CURRENT EOL EQUINOX"); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_CURRENT_EOL_EQUlNOX,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC, "amps’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"REQUIRED BUS CURRENT EOL EQUINOX’); 
SET_COL(OUTSC,44); 

PUT(OUTSC,BUS_CURRENT,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"amps’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"CELL VOLTAGE EOL EQUINOX’); 

SET_COL(OUTSC,44); 

PUT(OUTSC,CELL_VOLTAGE_EOL_EQUINOX,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUTfOUTSC, "volts’); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC."REQUIRED BUS VOLTAGE EOL EQUINOX"); 
SET_COL(OUTSC,44); 

PUT(OUTSC,BUS VOLTAGE.FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTScT59); 

PUT(OUTSC, "volts’); 

NEW_LINE(0UTSC,1); 

PUT(OUTSC,"TOTAL POWER PER BUS"); 

TOTAL_POWER_PER_BUS;=BUS_CURRENT*BUS_VOLTAGE; 

SET_COL(OUTSC,44); 

PUT(OUTSC,TOTAL_POWER PER_BUS,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,’watts’); 

NEW_LlNE(OUTSC,l); 

PUT(OUTSC,"TOTAL POWER AVAILABLE FROM ARRAY"); 

POWER_TOTAL:=TOTAL_POWER_PER_BUS*NUMBER_OF_BUSES; 

SET_COL(OUTSC.44); 

PUT(OUTSC,POWER_TOTAL,FORE= >4,AFT= >2.EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC, "watts"); 

NEW_LINE(OUTSC,l); 

PUT(OUTSC,"POWER MARGIN 3-AXIS STABILIZED"); 

POWER MARGIN; = POWER TOTAL*(DESIGN_MARGIN-1.0); 
SET_COL(OUTSC,44); 

PUT(OUTSC,POWER_MARGIN,FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC,"watLs"); 


167 










NEW_LINE(OUTSC,l); 


PUT(OUTSC, “POWER MARGIN DUAL-SPIN"); 
POWER_MARGIN: =POWER_TOTAL*(DESIGN_MARGIN-l .0)/PI; 
SET_COL(OUTSC,44); 

PUT(OUTSC,POWER_MARGIN.FORE= >4,AFT= >2,EXP= >0); 
SET_COL(OUTSC,59); 

PUT(OUTSC, “watts"); 

NEW_LINE(OUTSC,l); 


CLOSE (OUTSC); 
end battery; 
begin — MAIN 
PRINT HEADER; 


DUAL_SPIN (DRUM_SPINNER); 

OPERATING DATA (BATTERY_LOAD. 

DRUMJPINNER, 

MINIMUM_DISCHARGE_BUS_VOLTAGE. 

BUS_VOLTAGE. 

BYPASS_DIODE VOLTAGE DROP, 

EOL_BATTERY_DISCHARGE_VOLTAGE, 

BUS_POWER, 

PAYLOADPOWER, 
DEPTH_OF_DISCHARGE, 
number of_buses, 

SPACECRAFTLIFE, 

ECLIPSE_TIME); 

BATTERY (BATTER YLOAD, 

DRUMSPINNER, 

MINIMUMDISCHARGEBUSVOLTAGE, 

BUSVOLTAGE. 

BYPASS_DIODE_VOLTAGE_DROP. 

EOL_BATTERY_DISCHARGE_VOLTAGE, 

BUSPOWER, 

PAYLOAD_POWER. 

CELLAH, 

DEPTH OF DISCHARGE, 

ECLIPSE_TIME, 

VOLTAGE_CHARGE_ARRAY, 

NUMBER OF BUSES, 



MAXlMUM_BATTERY_CHARGE_VOLTAGE, 

SERIES_CONNECTED_DIODE_VOLTAGE_DROP, 

NUMBERSERIESCONNECTEDDIODES, 

BATTERYCHARGERVOLTAGEDROP, 

CHARGE_DISCHARGE_EFFIC1ENCY_BATTERY, 

spacecraft_life, 

POWER_EQUINOX_CHARGE. 

POWER_SOLSTICE_CHARGE); 


SET_COL(10);PUT(’TO CONTINUE ENTER ANY INTEGER"); GET_INTEGER(1); 

VIDEO. CLEARSCREEN; 

NEW_LINE(2); 

PUT_LINE("DATA FILES FOR THIS DESIGN RUN ARE LOCATED IN THE FOLLOWING FILES:"); 
NEW_LINE(1); 

PUT_LINE(" CELPARAM.DAT"); 

PUT_LINE(" SOLCELL.DAT ”); 

NEW_LINt(l); 

PUT_LINE("TO KEEP DATA FROM BEING ERASED ON NEXT RUN"); 

PUT_LINEv"USE DOS COMMAND REN (RENAME) ’); 

NEW_LINE(1); 

PUT_LINE("EXAMPLE - REN SOLARCEL.DAT SOLARCEL.XYZ"); 
end SOLavRPOWER; 


169 









c. 


PASSIVE THERMAL CONTROL 


— Title : Thermal Characteristics 

— Author : David Lashbrook 

-- Date : 15 February 1992 

-- Revised : 12 May 1992 

— Compiler : OPENADA EXT 

— Description ; This procedure determines the delta velocity for ins- rtion 

into geosynchronous orbit. 

with TEXT IO, GENERIC_ELEMENTARY_FUNCTIONS, GETDATA,VIDEO; 
use TEXT_IO, GETDATA ; 

procedure THERMAL is - THERMAL_CONTROL 

package FLOAT INOUT is new FLOAT_IO(FLOAT); 
use FLOATJNOUT; 

package INTEGER_INOUT is new INTEGER_10(INTEGER); 
use INTEGERJNOUT; 

package BOOLEANJNOUT is new ENUMERATIONJO(BOOLEAN); 
use BOOLEANJNOUT; 

package GEFJNOUT is new GENERlC_ELEMENTARY_FUNCTIONS(FLOAT); 
use GEFJNOUT; 

DEPTH_OF_DISCHARGE : FLOAT: =0.65; 

ECLIPSE_TiME : FLOAT: = 1.20; - hours 

TIME_ECLIPSE ; FLOAT; =72.0; - minutes 

PI : constant FLOAT := 3.14159265359; 

SPACECRAFT_LIFE, 

SPACECRAFT_MASS_BEFOrE_APOGEE_BURN, 

PAYLOAD_POWER, 

BATTERY_LOAD. 

NUMBER_OF_BUSES, 

SOLAR_ARRAY_LOAD ; FLOAT; 

LIFE_FACTOR : FLOAT := 1.05; 

POWER_MARGIN : FLOAT := 1.1; --margin for error 

RADIATOR_SPECIFIC_HEAT ; FLOAT ;= 900.0; - (watb;*see)\(kg*Kelvin) 
INTELSAT_7_REFERENCE : FLOAT : = 3445.0; -kgs 

INTELSAT_6_REFERENCE ; FLOAT ; =2227.0; - kg.s 

INTELSAT_5_REFERENCE : FLOAT : = 1900.0; 

INTELSAT_7_HOUSEKEEPING_POWER; constant FLOAT := 613.0; - intelsat VII 
lNTELSAT_6_HOU.«^KEEPlNG_POWER: constant FLOAT := 347.0; - intelsat VI 

INTELSAT_5_HOUSEKEEPING_POWER: constant FLOAT := 211.0, - intelsat V 


TEMPERATURE_AFTER_EQUINOX, 

ABSOLUTETEMPERATURE, 

EQUILIBRIUMTEMPERATURF, 

TIME_MINIMUM_TEMP_ECLIPSE, 


170 









HOUSEKEEPING_POWER, 


HEAT_RADIATED_TO_SPACE, 

TIME_CONSTANT, 

MINIMUM_OPERATING_TEMPERATURE, 

RADIATOR_AREA, 

RADIATOR_HEIGHT, 

SOLAR ARRAY_DIAMETER, 

THERM AL_DISSIPATION, 

PERCENT_PAYLOAD_POWER_DISSIPATION, 

HOUSHKEEPING_PERCENT_POWER_DISSIPATION, 

TEMPERATURE_EQUINOX, 

TEMPERATURE_EQUrNOX_CELCIUS, 

X ;FLOAT ; 


STEF AN_BOLTZM ANN 
EFFICIENCY 


: FLOAT := 5.67E-08; 
FLOAT := 0.9; 


SOLARASPECTCOEFFICIENTSOLSTICE 
SOLAR_ASPECT_COEFFICIENT_EQUINOX 
SOLA R_INTENSITY_SOLSTICE 
SOLARINTENSITYEQUINOX 
RADIATOR_TEMPERATURE 
RADIATOR_EMITTANCE_EOL 
SOLAR_ABSORBTANCE_EOL 
SOLAR_EMITTANCE_EOL : 

BOL_SOLAR_ABSORBTANCE 
BOL_SOLAR EMITTANCE 
ABSOLUTE_ZERO 
NUMBER THERMAL EMITTING 


; FLOAT := 23.5; 

: FLOAT ; = 0.0 ; 

FLOAT := 1397.0; - W/m^2 
: FLOAT := 1362.0; - W/m‘2 
: FLOAT := 310.0; -- degrees kelvin 
: FLOAT := 0.8; 

: FLOAT := 0.21; 


optical solar reflector 
: FLO.AT := 0.8; — optical solar reflector 
: FLOAT := 0.08; -- optical solar reflector 
. FLOAT := 0.8; -- optical solar reflector 
: FLOAT ;= 273.0; -- kelvin 

FACES : FLOAT := 2.0; -- # thermal emitting faces 


MASS_RADlATOR_FLUS_EQUIPMENT 
PERCENT PARTIAL POWER 


: FLOAT := 85.0; - Kgs 
; FLOAT := 0.5; - % 


OKAY : BOOLEAN : = TRUE; 

DRUM SPINNER ; BOOLEAN := FALSE; 


y. 

N, 

n, 

TAKE. 

CHAR ; CHARACTER ; 

I, 

DECISION, 

J ; INTEGER ; 

OUTH :F1LE_TYPE; 


171 







procedure PRINT HEADER is 
begin 

VIDEO.CLEAR_SCREEN;SET_LINE(l); 

NEW_LINE(2): 

SET_COL(10); 

PUT_LINE("This program walks through a THERMAL CONTROL design for"); 

SET_COL{10); 

PUT_LINE(*a solar powered geosynchronous satellite.*); 

SET_COL(10); 

PUT_LINE("A11 pertinent data will be saved to a file called THERMAL.DAT"); 

NEWLINE; 
end PRINT_HEADER; 

procedure DUAL SPIN (DRUM SPINNER : in out BOOLEAN) is 
begin 

SET_COL(10); 

PUT_LINE("Is your spacecraft Spin Stabilized "); 

SET_COL(15); 

GET_CHARACTER(char); 
if CHAR = ’Y’ or CHAR = ’y’ then 
DRUM_SPINNER; =TRUE; 
if DRUM_SPINNER = TRUE then 

VIUEO.CLEAR_SCREEN;SET_LINE(l); 

SET_COL(10); ~ 

PUT_LINE("Satellite is Spin Stabilized"); 

NEW_LINE(2); 

PUT LINE("*******’*****************^***************************’^**************'') 
end if; 
else 

VIDEO. CLEAR_SCREEN; SET_LINE( 1); 

SET_COL(10); 

PUT_LINE("Satellite is Three Axis Stabilized"); 

NEW_LINE(2); 

PUT lINE("'^**'*'******************’*‘’*'******************************************"); 
end if; 

end DUAL_SPIN; 


procedure OPERATING DATA (BATTERY LOAD : in out FLOAT; 

DRUM SPINNER : in out BOOLEAN; 

RADIAT0R_SPECIF1C_HEAT : m out FLOAT; 
RADIATOR_EMITTANCE_EOL : in out FLOAT; 
MASS RADIATOR PLUS EQUIPMENT : in out FLOAT; 
EFFICIENCY ; in out FLOAT; 

NUMBER THERMAL EMITTING FACES : in out FLOAT; 
PAYLOAD_POWER : in out FLOAT; 

ECLIPSE_TIME ; in out FLOAT) is 


172 









SPACECRAFT_MASS_BEFORE_APOGEE_BURN, 

SOLAR_ARRAY_LOAD, 

MASS_REFERENCE, 

HOUSEKEEPING POWER REFERENCE ; FLOAT; 


REPLACE : BOOLEAN ; = FALSE; 

CHOICE, 

CHANGE, 

INPUT :INTEGER ; 


begin 

if DRUM_SPINNER = FALSE then 
PUT_LINE(OUTH,"SPACECRAFT IS THREE AXIS STABILIZED"); 
PUT LINE(OUTH "■t'******************************’''***'); 
NEv7_LINE(OUTH,1); 
else 

PUT_LINE(OUTH,"SPACECRAFT IS SPIN STABILIZED"); 

PUT LINE(OUTH "***‘t"t'*******’t'*****t'*’t‘**’f’i'***'*‘”); 
NEv7_LINE(OUTH,1); 

end if; 


SET_COL(10); 

PUT_LINE("Enter the mass of the spacecraft in kilograms"); 

SET_COL(IO); 

GET_DATA(SPACECRAFT MASS_BEFORE_APOGEE_BURN); 
VIDEO.CLEAR_SCREEN;SET_LINE( 1); 

SET_COL(15); 

PUT("Spacecraft mass before apogee motor bum is "); 

PUT(SPACECRAFT_MASS_BEFORE_APOGEE_BURN, FORE = > 5, AFT => 1, EXP => 0); 
PUT(" kgs"); 


PUT(OUTH, "Spacecraft mass before apogee motor bum is "); 

SET_COL(OUTH,55); 

PUT(OUTH,SPACECRAFT_MASS_BEFORE_APOGEE_BURN. FORE = > 5, AFT = > 2. EXP = > 0) 
PUT(OUTH,’ kgs"); 

NEW_LINE(OUTH,l); 

NEW_LINE(2); 

PUT i^ii>i^(^''*********************’>'********************‘****************‘*“>‘******’)- 
NEv7_LINE(2); 

MASS REFERENCE: = INTELSAT_5_REFERENCE; 

HOUSEKEEPING POWER REFERENCE: =INTELSAT_5_HOUSEKEEPING_POWER. 


-- The mass of the electrical power system is 
SET_COL(10); 

PUT_LINE("Enter the POWER requirements of the Spacecraft in watts.'); 
SET_COL(15); 


173 




GET_DATA(PAYLOAD_POWER); 

NEW_L1NE(2); 

SET_COL(15); 

VIDEO.CLEAR SCREEN; 

PUT("Payload power requirements are ’); 

PUT(PAYLOAD_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 
pure Watts'); 


PUT(OlJTH, "Payload power requirements are '); 

SET_COL(OUTH,55); 

PUT(OUTH.PAYLOAD_POWER, FORE = > 5, AFT = > 2, EXP = > 0); 

PUT(OUTH,’ Watts'); 

NEW_LINE(OUTH,l); 

NEW_LINE(2); 

PUT LiisfE^"*****************************************************'***********'**’^- 
NEW_LINE(2); 

SET_COL(5); 

PUT_LlNE(“Choose which satellite you want as your reference for "); 

SET_COL(5); 

PUT_LINE("housekeeping power and spacecraft mass in kilograms."); 

NEW_LINE(2); 

PUT LINEf"**************************'''’*"*'*************’*'***********************"); 
NEv7 LINE(1); 

PUT_L1NE{" ’1’ 'T '3' "); 

SET_COL(5); 

PUT_LINE(" Intelsat V Intelsat VI Intelsat Vll"); 

SET_COL(5); 

PUT_LINE("Mass 1900.0 kgs 2227.0 kgs 3445.0 kgs'); 

SET_COL(5); 

PUT_LINE('Housekeeping 211.0 347.0 613.0 "); 

SEtJcOUS); 

PUT_LlNE("Power' ); 

PUT LINH("*******************************************************'*'^**’*'******")* 
SET~COL(5); 

PUT_LINE("For an INTELSAT V reference enter integer ’1’ '); 

SET_COL(5); 

PUT_LINE("For an INTELSAT VI reference enter integer ’2‘ ’); 

SET_COL(5); 

PUT_LINE("For an INTELSAT VII reference enter integer ’3* "); 

SET_COL(5); 

PUT_LlNE("For your own reference value’s enter integer ’4’ "); 

SET_COL(5); 

PUT_LINE("NO CHANGES ie Intelsat 5 values enter integer '5' "); 
GET_INTEGER(CHOICE); 


case CHOICE is 
when 1 = > 

MASS REFERENCE; = INTELSAT 5 REFERENCE; 

HOUSEKEEPING_POWER_REFERENCE: = lNTELSAT 5_HOUSEKEEPING POWER; 
NEW_LlNE(OUTH,l); 

PUT(OUTH.’MASS and HOUSEKEEPING REFERENCE INTELSAT 5"); 


174 








NEW_LINE(0UTH,1); 


when 2 = > 

MASS_REFERENCE:=1NTELSAT_6_REFERENCE; 

HOUSEKEEPING_POWER_REFERENCE: = INTELSAT_6_HOUSEKEEPING_POWER; 
NEW_LINE(0UTH,1); 

PUT(OUTH,"MASS and HOUSEKEEPING REFERENCE INTELSAT 6'); 
NEW_LINE(OUTH,l); 

when 3 = > 

M ASSREFERENCE: = INTELS AT_7_REFERENCE; 

HOUSEKEEPING_POWER_REFERENCE:=INTELSAT_7_HOUSEKEEPING_POWER; 

NEW_LINE(OUTH,l); 

PUT(OUTH,’MASS and HOUSEKEEPING REFERENCE INTELSAT 7"); 
NEW_LINE(OUTH,l): 

when 4= > 

NEW_LINE(2); 

PUT LINEC*’*'*******************’'"'"*'*******’'"'"'"*'********************’'"*'********'''"); 
NEv7_LINE(2); 

VIDEO. CLEAR_SCREEN; 

PUTCPlease enter desired REFERENCE MASS'); 

SET_COL{15); 

GET_DATA(MASS_REFERENCE); 

PUT(OUTH,"INPUT MASS REFERENCE '); 

SET_COL(OUTH,55); 

PUT(OUTH,MASS REFERENCE,FORE= >4,AFT= >2,EXP= >0); 

NEW_LINE(OUTH~l); 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

PUT LINEC********’*'**********’'”''***''"''******''"''*****''"*'***********************'**"); 
NEv7_LINE(2); 

PUTCPlease enter desired HOUSEKEEPING POWER reference’); 

SET_COL(15); 

GET_DATA(HOUSEKEEPING_POWER_REFERENCE); 

PUT(OUTH,"INPUT HOUSEKEEPING POWER REFERENCE ’); 

SET_COL(OUTH,55); 

PUT(OUTH,HOUSEKEEPING_POWER_REFER£NCE,FORE= >4,AFT= >2.EXP= >0); 
NEW_LlNE(OUTH,l); 

V1DE0.CLEAR_SCREEN; 
when OTHERS = > 

NEW_LINE(2); 

SET_COL(5); 

pure Understand INTELSAT V DATA WILL BE USED"); 

PUT(OUTH,’MASS and HOUSEKEEPING REFERENCE INTELSAT 5"): 
NEW_LINE(OUTH,l); 
end case; 


175 












HOUSEKEEPING POWER: =(SPACECRAFT_MASS_BEFORE_APOCEE BURN 
/MASSREFERENCE) 
■*'HOUSEKEEPING_POWER_REFERENCE; 

VIDEO. CLEAR_SCREEN; 

NEWLINE; 

SET_COL(10); 

PUT("Housekeeping power is "); 

SET_COL(60); 

PUT(HOUSEKEEPING_POWER. FORE = > 6, AFT = > 2. EXP = > 0); 


NEW_LINE(3): 


PUT_LINE('The Housekeeping Power value will be used in future calculations iT); 
PUT_LINE("you want to use this value enter a ‘y’ for YES. If you wish to '); 
PUT_LINE('change the value enter a ‘n’ for NO and the value you enter will "); 
put_line("be used in further further calculations'); 

NEW_LINE(2); 

PUT LINEC’*"*"*"*"*'*'*'*’*''*"*"*"*'’*"*"*'’*"''’*'’*'’*"*"*"*"*”*"*"*"'"'"'"*"''’*"*"*'*’*"*"*"*"*"''*’*"*"*"*"*"*'’*"*"*"*"*'^'*^’*’*"*"*"*'’); 
NEv7_LINE(2); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
VIDE0.CLEAR_SCREEN; 

NEW_LINE(1); 

PUT("Payload power requirements are "); 

PUT(PAYLOAD_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 

PUTC Watts'); 

NEW_LINE(3); 

PUTf'Please enter a value for the housekeeping power'); 
GET_DATA(HOUSEKEEPING_POWER); 

VIDEO.CLEARSCREEN; 

NEW_LINE(2); 

PUT lINE( ^ 

NEv7_LINE(2); 

PUT('Housekeeping Power is "); 

SET_COL(60); 

PUT(HOUSEKEEPING_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 

NEW_LINE(3)- 

PUTf'Payload power requirements are '); 

PUT(PAYLOAD_POWER, FORE = > 6, AFT = > 2, EXP = > 0); 

PUTC Watts'); 

NEW_LINE(3); 

STOP; 

end if; 


176 







PUT(OUTH,"Housekeeping power is "); 

SET_COL(OUTH,55); 

PUT(OUTH,HOUSEKEEPING_POWER, FORE = > 5, AFT = > 2, EXP = > 0); 
NEW_UNE(OUTH,l); 

< <NEW_VALUE> > 


VIDEO.CLEARSCREEN; 

PUT_LINE("FOLLOWING IS A LIST OF VARIABLES AND THEIR DEFAULT VALUES"); 
PUT_LINE(’-■); 

PUT("EFFICIENCY [1] "); 

SET_COL(56); 

PUT(EFFICIENCY,FORE= >4,AFT= >2,EXP= >0); 

NEW_LINE(1); 

PUT( "SOLARASPECTCOEFFICIENTSOLSTICE [2]"); 

SET_COL(56): 

PUT(SOLAR_ASPECT_COEFFICIENT_SOLSTICE.FORE= >4,AFT= >2,EXP= >0); 

PUT(" degrees"); 

NEW_LINE(1); 

PUT("SOLAR_INTENSITY_SOLSTICE |3j’); 

SET_COL(56); 

PUT(SOLAR_INTENSITY_SOLSTICE,FORE= >4,AFT= >2,EXP= >0); 

PUT(" Watts/tn"2'); 

NEW_LINE(1); 

PUT('SOLAR_INTENSITY_EQUINOX (4]"); 

SET_COL(56); 

PUT(SOLAR_INTENSlTY_EQUINOX,FORE= >4.AFT= >2.EXP= >0); 

PUT(" Watts/m‘2"); 

NEW_LINE(1); 

PUT("RADIATOR_TEMPERATURE (5]"); 

SET_COL(56); 

PUT(RADIATOR_TEMPERATURE,FORE= >4,AFT= >2.EXP= >0); 

PUT(" kelvin"); 

NEW_LINE(1); 

PUT("RADlATOR_EMITTANCE_EOL [6]"); 

SET_COL(56); 

PUT(RADIATOR_EMITTANCE_EOL.FORE= >4.AFT= >2.EXP= >0); 

NEWLINEd); 

PUT("ABSOLUTE_ZERO "); 

SET_COL(56); 

PUT(ABSOLUTE_ZERO,FORE= >4,AFT= >2.EXP= >0); 

PUT(’ kelvin"); 

NEW_LINE(1); 


177 











PUT("TIME_ECLIPSE [7]’); 

SET_COL(56); 

PUT(TIME_ECLIPSE,FORE= >4,AFT= >2.EXP= >0); 

PUT(" kelvin’): 

NEW_LINE(1); 

PUT("NUMBER_THERMAL_EMITTING_FACES [8]’); 

if DRUM_SPINNER = TRUE and REPLACE = FALSE then 
NUMBER_THERMAL_EMnTING_FACES: = 1.0; 
end if; 

SET_COL(56); 

PUT(NUMBER_THERMAL_EMITTING_FACES.FORE= >4.AFT= >2,EXP= >0); 
NEW_LINE(1); 

PUT("MASS_RADIATOR_PLUS_EQUIPMENT [9j"); 

SET_COL(56); 

PUT(MASS_RADIATOR_PLUS_EQUIPMENT.FORE= >4,AFT= >2,EXP= >0); 
PUT(" kgs’); 

NEW_LINE(1); 

PUT("PERCENT_PARTIAL_POWER [10]"); 

SET_COL(56); 

PUT(PERCENT_PARTIAL_POWER*IOO.O,FORE= >4,AFT= >2,EXP= >0); 
PUT(" %"); 

NEW_LINE(1); 

PUT("RADIATOR_SPECIFIC_HEAT [11]’); 

SET_COL(56); 

PUT(RADlATOR_SPECIFlC_HEAT,FORE= >4,AFT= >2,EXP= >0); 

PUT(" (watts*sec)\(kg*Kelvin)'); 

NEW_LINE(1); 

if REPLACE = FALSE then 
CHAR := N; 

PUT_LINE("If you desire to change any of the listed values please enter '); 
GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR := N; 

PUT_LlNE("Enter number corresponding to value you wish to change."); 
set_col(10); 

GETJNTEGER(CHANGE); 

VIDEO.CLEARSCREEN; 

else 

VlDEO.CLEAR_SCREEN; 
goto KEEP_VALUES; 
end if; 

elsif REPLACE = TRUE then 

PUT_L1NE("Enter number corresponding to value you wish to change."); 
set_col(10); 

GET_1NTEGER(CHANGE); 

VIDEO. CLEAR_SCREEN; 
end if; 


178 








VIDEO. CLEAR_SCREEN; 
case CHANGE is 
when 1 = > 

PUT("Please enter a value for Efficiency (usually around 0.9)"); 

SET_COL(15); 

GET_DATA(EFFICIENCY); 

NEW_LINE(2); 

NEv7_LINE(2); 

PUT("EFFICIENCY"); 

SET_COL(50); 

PUT(EFFICIENCY,FORE-- >4,AFT= >2,EXP= >0); 

NEW_LINE(1); 

when 2 = > 

PUT("Please enter a value for Solar Aspect (usually 23.5 degrees)"): 

SET_COL(15); 

GET_DATA(SOLAR_ASPECT_COEFFICIENT_SOLSTICE); 

NEW_LINE(2); 

PUT LINEC********************************************************************"); 
NEv7_LINE(2); 

PUT("SOLAR_ASPECT COEFFICIENT_SOLSTlCE"); 

SET_COL(50); 

PUT(SOLAR_ASPECT_COEFFlClENT_SOLSTICE,FORE= >4,AFT= >2,EXP= >0); 

PUT(" degrees"); 

NEW_LINE(1); 

when 3 = > 

PUTCPlease enter a value for Solar Intensity at Solstice (1397.0)"); 

SET_COL(15); 

GET_DATA(SOLAR_INTENSITY_:>OLSTlCE); 

NEW_L1NE(2); 

PUT LiNE("********+****+‘t"*‘*************+***+***********+*****+*************+**"); 
NEW_LINE(2); 

PUT("SOLAR_INTENSlTY_SOLSTICE’); 

SET_COL(50); 

PUT(SOLARJNTENSITY_SOLSTlCE,FORE= >4,AFT= >2,EXP= >0); 

PLn(" Watts/m*2"); 

NEW_LINE(1); 

when 4 = > 

PUT("Please enter a value for Solar Intensity at Equinox (1362.0)"); 

SET_COL(15); 

GET_DATA(SOLAR_INTENSITY_EQUINOX); 

NEW_LINE(2); 

PUT LiisJE("****’t'***+'*"t"t‘’f***‘t"t‘****'f**♦****♦**♦*♦****■*■**■*■****♦•■•'■•'********■*■♦♦*****"); 
NEW LINE(2); 

PUT("SOLAR_lNTENSITY_EQLTNOX"); 

SET_COL(50); 








PUT(SOLARJNTENSITY_EQUINOX,FORE= >4,AFT= >2,EXP= >0); 

PUT(’ Wa(ts/m"2’); 

NEW_L1NE(1); 

when 5 = > 

PUT("Please enter a value for Radiator Temperature (310.0)'); 

SET_COL(15); 

GET_DATA(RADIATOR_TEMPERATURE); 

NEW_LINE(2); 

PUT LINE("*****'*‘*’*‘********’*‘*‘**^*^***'*‘*'*‘*********’*‘***********'*‘********'*‘**’*'*'*'***’*'*')* 
NEW_L1NE(2): 

PUT('RADIATOR_TEMPERATURE'); 

SET_COL(50); 

PUT(RADIATOR_TEMPERATURE,FORE= >4,AFT= >2,EXP= >0); 
pure kelvin'); 

NEW_LINE(1); 

when 6 = > 

PUT("Please enter a value for Radiator Emittance (0.8)"); 

SET_COL(15); 

GET_DATA(RADIATOR_EMITTANCE_EOL); 

NEW_LINE(2); 

PUT linEC******************************’*'*************************************")' 
NE\V_LINE(2); 

PUT('RADIATOR_EMITTANCE_EOL'); 

SET_COL(50); 

PUT(RADIATOR_EMITTANCE_EOL.FORE= >4,AFT= >2,EXP= >0); 

NEW_LINE(1); 

when 7 = > 

PUT("Please enter a value for Eclipse Time (72.0 minutes)"); 

SET_COL(I5); 

GET_DATA(TIME_ECLIPSE); 

NEW_LINE(2); 

PUT linH(")■ 
NE\V_LINE(2); 

PUT("TIME_ECLIPSE"); 

SET_COL(50); 

PUT(TIME_ECLIPSE,FORE= >4.AFT= >2.EXP= >0); 

PUTC kelvin'); 

NEW_LINE(1); 

when 8 = > 

PUT("Please enter a value for Emitting Faces (2.0)"); 

SET_COL(15); 

GET_DATA(NUMBER_THERMAL_EM1TTING_FACES); 

NEW_L1NE(2); 

PUT lINE( 

NEv7_LINE(2); 

PUT("NUMBER_THERMAL_EM1TTING_FACES"); 

SET_COL(50); 

PUT(NUMBER_THERMAL_EMITTING_FACES,FORE= >4,AFT= >2.EXP= >0); 


180 





NEW_LINE(1); 


when 9 = > 


PUT(”PIease enter a value for Mass of Radiator plus equipment (85.0)'); 


SET_COL(15); 

GET_DATA(MASS_RADIATOR_PLUS_EQUIPMENT); 

NEW_LINE(2); 

PUT LiN£^"’*‘**+***+******^**+*****#*********************+*'*‘**^**’^*****+****^*** 
NEW_LINE(2); 

PUT("MASS_RADIATOR_PLUS_EQUIPMENT"); 

SET_COL(50); 


"); 


PUT(MASS_RADIATOR_PLUS_EQUIPMENT,FORE= >4,AFT= >2,EXP= >0); 
PUT(” kgs'); 

NEW_LINE(1); 


when 10 = > 

PUTf'Please enter a value for Percent Partial Power (0.5)'); 

SET_COL(15); 

GET_DATA(PERCENT_PARTIAL_POWER); 

NEW_LINE(2); 

PUT i.it'JE("**’*‘*******’'"***’'‘**’'"''***’'‘’'"'‘***************''’‘**********’''******’*'**'‘*****”)■ 
NEv7_LINE(2); 

PUT("PERCEN1 PARTI ALPOWER'); 

SET_COL(50); 

PUT(PERCENT_PARTIAL_POWER*100.0,FORE= >4,AFT= >2,EXP= >0); 

PUT(" %'y, 

NEW_LINE(1); 

when 11 = > 

PUT("Please enter a value for Radiator Specific Heat'); 

SET_COL(15); 

GET_DATA(RADIAT0R_SPEC1F1C_HEAT); 

NEW_LINE(2); 

PUT L.INE("****************+**^*****’*‘******=*********************’*‘*’+****’*'**^*****")• 
NEv7_LINE(2); 

PUT('RADIATOR_SPEClFlC_HEAT'); 

SET_COL(50); 

PUT(RADIATOR_SPEClFIC_HEAT.FORE= >4,AFT= > 2,EXP= >0); 

PUT(" (watts*sec)\(kg*Kelvin) '); 

NEW_LINE(1); 

when others = > 
video. clearscreen; 

PUT_L1NE('UNDERS1AND NO MORE CHANGES PLEASE ENTER AN -N' FOR NEXT 
QUESTION'); 

PUT_L1NE('1F YOU STILL DESIRE TO MAKE CHANGES ENTER ‘Y’"); 

NEW_LINE(3); 


end case; 

NEW_L1NE(2); 

PUT lINE('’''******'''*******’'‘**************'''*''‘************’'"*‘***********’*'*’*‘****’''**")' 
NEv7_LINE(2); 


181 










NEW_LINE(2); 

CHAR := N; 

PUT_LINE('If you wish to change a value please enter a ‘y’ for YES"); 
PUT_LINE("otherwise enter a ‘n’ for NO ’); 

REPLACE: = FALSE; 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR := N; 

REPLACE: = TRUE; 

VIDEO.CLEARSCREEN; 
goto NEW VALUE; 

else 

VIDEO.CLEARSCREEN; 
goto KEEP_VALUES; 

NEW_LINE(3); 
end if; 

STOP; 


< <KEEP_VALUES> > 

PUT(OUTH, "EFFICIENCY”); 

SET_COL(OUTH,55); 

PUT(OUTH,EFFICIENCY,FORE= >5,AFT= >2,EXP= >0); 

NEW_LINE(OUTH,l); 

PUT(OUTH,"SOLAR ANGLE SOLSTICE"); 

SET_COL(OUTH.55); 

PUT(OUTH,SOLAR_ASPECT_COEFFlCIENT_SOLSTICE,FORE= >5,AFT= >2.EXP= >0); 
PUT(OUTH," degrees"); 

NEW_LINE(OUTH,l); 

PUT(OUTH,"SOLAR INTENSITY SOLSTICE"); 

SET_COL(OUTH,55); 

PUT(OUTH,SOLAR_INTENSITY_SOLSTlCE.FORE= >5.AFT= >2,EXP= >0); 
PUT(OUTH," Watts/m"2"); 

NEW_LINE(OUTH,l); 

PUT(OUTH,"SOLAR INTENSITY EQUINOX"); 

SET_COL(OUTH.55); 

PUT(OUTH,SOLAR_INTENSITY_EQUINOX.FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," Watts/m*2"); 

NEW_LINE(OUTH,l); 

PUT(OUTH,"RADIATOR TEMPERATURE"); 

SET_COL(OUTH,55); 

PUT(OUTH,RADlATOR_TEMPERATUKE,FORE= >5,AFT= >2,EXP= >0); 

PUT(OUTH," kelvin"); 

NEW_LINE(OUTH,l); 

PUT(OUTH,"RADIATOR EMITTANCE"); 

SET_COL(OUTH,55); 

PUT(OUTH.RADIATOR_EM1TTANCE_EOL.FORE= >5,AFT= >2,EXP== >0); 


182 







NEW_LINE(OUTH,l): 

PUT(OUTH,"ABSOLUTE ZERO"); 

SET_COL(OUTH,55); 

PUT(OUTH,ABSOLUTE_ZERO,FORE= >5,AFT= >2,EXP= >0); 

PUT(OUTH," kelvin"); 

NEW_LlNE(OUTH,l); 

PUT(OUTH,"TIME ECLIPSE"); 

SET_COL(OUTH,55); 

PUT(OUTH,TIME_ECLIPSE,FORE= >5,AFT= >2.EXP= >0); 

PUT(OUTH," kelvin"); 

NEW_LINE(OUTH,l); 

PUT(OUTH,"NUMBER THERMAL EMITTING FACES"); 

SET_COL(OUTH,55); 

PUT(OUTH,NUMBER_THERMAL_EMITTING_FACES,FORE= >5,AFT= >2,EXP= >0); 
NEW_LINE(OUTH.I); 

PUT(OUTH,"MASS RADIATOR PLUS EQUIPMENT"); 

SET_COL(OUTH,55); 

PUT(OUTH,MASS_RADIATOR_PLUS_EQUIPMENT,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," kgs"); 

NEW_LINE(OUTH,I); 

PUT(OUTH,'PERCENT PARTIAL POWER'); 

SET COL(OUTH,55); 

PUT(OUTH,PERCENT_PARTIAL_POWER*100.0,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH." %"); 

NEW_LINE(OUTH,I); 

PUT(OUTH,"RADIATOR SPECIFIC HEAT"); 

SET_COL(OUTH,55); 

PUT(OUTH,RADIATOR_SPECIFIC_HEAT,FORE= >5,AFT= >2.EXP= >0); 
PUT(OUTH," (watts’'‘sec)\(kg*Kelvin)"); 

NEW_LINE(OUTH,l); 


end OPERATING_DATA; 

procedure HEAT (BATTERY LOAD : in out FLOAT; 

DRUM_SPINNER : in out BOOLEAN; 

RADIATOR AREA ; in out FLOAT; 

PAYLOAD POWER : in out FLOAT; 

TEMPERATURE_AFTER_EQUINOX : in out FLOAT; 
THERMAL DISSIPATION ; in out FLOAT; 

ECLIPSE_TIME : in out FLOAT) is 

TIME ECLIPSE : FLOAT : = 72.0; 


183 



ECLIPSE_TIME_MINUTES : constant FLOAT : = 72.0; — eclipse time in minutes 

TIME_CONSTANT. 

TIME_CONSTANT_MlNUTES, 

TIME_ECLIPSE_ONE, 

TIME_ECLIPSE_TWO, 

EQUINOX_TEMP_ONE, 

EQUINOX_TEMP_TWO, 

CONST, 


SOLAR_ABSORBTANCE_BOL, 
SOLAR_ABSORBTANCE_EOL, 
RADIATOREMITTANCEEOL, 
EMITTANCE BOL : FLOAT ; 


begin 

VIDEO. CLEAR_SCREEN; 

PUT_LINE(" Thermal properties of surfaces are listed in the text"); 
PUT_LINE("Design of Geosynchronous Spacecraft by Brij Agrawal"); 
PUT_LINE("in Table 5.3 pg. 275"); 

PUT_LINE("the properties listed are Solar Absorbtance for EOL and BOL"); 
PUT_LINE("as well as Emittance for EOL and BOL”); 

PUT_LINE(’The following surfaces are listed and can be used for thermal"); 
PUT_LINE("radiation surfaces in your calculations."); 

NEW_LINE(1); 

PUT_LINE(" Surface Typical Application "); 

--- 

Black Paint Interior Structure"); 

White Paint Antenna Reflector"); 

Optical Solar Reflector(OSR) North & South Panel Reflectors"); 


PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

PUT_LINE(" 

STOP; 

VIDEO.CLEAR SCREEN; 


Aluminized Kapton 
Tiodized Titanium 
Aluminum ,"); 
aluminum tape 
deposited aluminum"); 
Anodized Aluminum 
Solar Cells 


Thermal Insulation"); 

Apogee Motor Thermal Shield"); 

Propellent Insulation"); 

Interior Structure”); 

Solar Panels"); 


PUT_LINE("Please enter your choice for thermal emitting surface’); 
PUT_LINE("to be used for calculations try (OSR) CHOICE 13] first "); 


PUT_LINE("-"); 

PUT_LINE("SURFACE CHOICE SOLAR ABSORBTANCE EMITTANCE"): 

PUT_L1NE(’-’); 

PUT_LINE(" BOL EOL BOL EOL"); 

PUT_L1NE("-"); 

PUT_LINE("Black Paint [1] 0.9 0.9 0.9 0.9’); 

PUT_LINE("White Paint [2] 0.2 0.6 0.9 0.9"); 

PUT_LINE("Optical Solar Ref. [3] 0.08 0.21 0.8 0.8'); 

PUT_LlNE("Graphite Epoxy (4] 0.84 0.84 0.85 0.85"); 


PUT_LINE("Aluminized Kapton [5] 0.35 0.50 0.6 0.6"); 


184 









PUT_LINECTiodized Titanium [6] 0.6 0.6 0.6 0.6"); 

PUT LINECAluminum Deposrrape [7] 0.12 0.18 0.06 0.06"); 

PUT_L1NE{"Anodized Aluminum [8] 0.2 0.6 0.8 0.8 "); 

PUT LlNECSolar Cells [9] 0.7 0.7 0.82 0.82"); 

PUT LINECYOUR VALUES [10] "); 

GET_1NTEGER(DEC1S10N); 

video.clearscreen; 

case DECISION is 


when 1 = > 

SOLAR_ABSORBTANCE_BOL := 0.9 ; 
SOLAR_ABSORBTANCE_EOL := 0.9 ; 
RADlATOR_EMnTANCE_EOL:= 0.9 ; 

EMlTTANCE_BOL := 0.9 ; 

PUT_L1NE(0UTH,"RADIATOR MATERIAL IS BLACK PAINT"); 
when 2 = > 

SOLAR_ABSORBTANCE_BOL := 0.2 ; 
SOLAR_ABSORBTANCE_EOL := 0.6 ; 
RADlATOR_EMITTANCE_EOL:= 0.9 ; 

EMlTTANCE_BOL ;= 0.9 ; 

PUT_L1NE(0UTH, "RADIATOR MATERIAL IS WHITE PAINT"); 


when 3 = > 

SOLAR_ABSORBTANCE_BOL := 0.08 ; 

SOLAR ABSORBTANCE'eOL := 0.21 ; 

RADlAfOR_EMITTANCE_EOL:= 0.8 ; 

EMITTANCE_BOL := 0.8 ; 

PUT LINE(OUTH,"RADIATOR MATERIAL IS OPTICAL SOLAR REFLECTOR"); 


when 4 = > 

SOLAR ABSORBTANCE BOL := .84 ; 

SOLAR ABSORBTANCE^EOL := 0.84 ; 
RADIATOR_EMITTANCE_EOL:= 0.85 ; 

EMITTANCE_BOL := 0.85 ; 

PUT_LINE(OUTH,"RADIATOR MATERIAL IS GRAPHITE EPOXY"); 


when 5 = > 

SOLAR ABSORBTANCE BOL ;= 0.35 ; 

SOLAR_ABSORBTANCE_EOL := 0.50 ; 

RADIATOR_EMlTTANCE_EOL; = 0.6 ; 

EMITTANCE_BOL : = 0.6 ; 

PUT_LINE(OUTH, "RADIATOR MATERIAL IS ALUMINIZED KAPTON"); 
when 6 = > 

SOLAR_ABSORBTANCE_BOL ;= 0.6 ; 

SOLAR_ABSORBTANCE_EOL := 0.6 ; 
RADIATOR_EMITTANCE_EOL:= 0.6 ; 

EMnTANCE_BOL := 0.6 ; 

PUT_LINE(OUTH,"RADIATOR MATERIAL IS TIODIZED TITANIUM"); 
when 7 = > 

SOLAR_ABSORBTANCE_BOL := 0.12 ; 

SOLAR_ABSORBTANCE_EOL ;= 0.18 ; 
RADlATOR_EMnTANCE_EOL:= 0.06 ; 


185 













EMITTANCE_BOL ;= 0.06 ; 

PUT_LINE(OUTH,"RADIATOR MATERIAL IS ALUMINUM DEPOSITS OR TAPE"); 


when 8= > 

SOLAR_ABSORBTANCE_BOL := 0.2 ; 

SOLAR_ABSORBTANCE_EOL : = 0.6 ; 

RADIATOR_EMITTANCE_EOL: =0.8 ; 

EMnTANCE_BOL := 0.8 ; 

PUT_LINE(OUTH,"RADIATOR MATERIAL IS ANODIZED ALUMINUM"); 


when 9= > 

SOLAR_ABSORBTANCE_BOL := 0.7 ; 
SOLAR_ABSORBTANCE_EOL := 0.7 ; 
RADIATOR_EMnTANCE_EOL:= 0.82 ; 

EMITTANCE_BOL := 0.82 ; 

PUT_LINE(OUTH,"RADIATOR MATERIAL IS SOLAR CELLS'); 


when 10= > 


VIDEO.CLEAR_SCREEN; 

PUT('Please enter value for SOLAR ABSORBTANCE at BOL“); 

SET_COL(15); 

GET_DATA(SOLAR_ABSORBTANCE_BOL); 

NEW_LINE(2); 

PUT LiNEC*’*"*'**************’''**’*"*"''*'*'*******’''*'*'*********'*'*’''*****'*'********’''****")' 
NE\V_LINE(2); 

VIDEO.CLEAR_SCREEN; 

PUT('Please enter value for SOLAR ABSORBTANCE at EOL"); 

SET_COL(15); 

GET_DATA(SOLAR ABSORBTANCE_EOL); 

NEW_LINE(2); 

PUT lINE("************’*‘***********'*'*********’^*****’^************’*‘’*‘*****’*'******')■ 
NEv7_LINE(2); 

VIDEO. CLE AR_SCREEN; 

PUT("Please enter value for EMITTANCE at BOL"); 


SET_COL(15); 

GET_DATA(EMITTANCE_BOL); 

NEW_LINE(2); 

PUT eINE("’*"*"*"*"*"'“*"*"*"*"*"'‘'*‘'*"*"*"*"*"*'’*“'"*"*‘’'"*"'"'’''"'"*"*"'"*‘'*"*‘’*‘’*"*"*"*“*‘’*"*“*"*‘’*‘’*"^‘*‘’*"*‘''"*‘’*‘’*‘’*"*‘’*"*‘’*’'*"*"*"*’'*'’*‘")' 
NE\V_LINE(2); 

VIDEO. CLE ARSCREEN; 

NEW_LINE(2); 

PUT lineC*************************’'"'"'"''****'*'************''"''*'*'***''"''***********"); 
NEV7_LINE(2); 

VIDE0.CLEAR_SCREEN; 

PUT('Please enter value for EMITTANCE at EOL'); 

SET_C0L(15); 

GET_DATA(RADIATOR_EMnTANCE_EOL); 

NEW_LINE(2); 

PUT lINE("**********************'*'*********'******’*^*********************^**’*'****' )■ 
NEV7_L1NE(2); 

VIDEO.CLEAR SCREEN ; 


186 







when others = > 

SOLAR_ABSORBTANCE_BOL: = 0.08 ; 

SOLAR_ABSORBTANCE_EOL;= 0.21 ; 

RADI ATOR_EMITTANCE_EOL: =0.8 ; 

EMnTANCE_BOL ;= 0.8 ; 

NEW_LINE(2); 

PUT(" Values for absorbtance and emittance are for Optical Solar Reflector (OSR)"); 
NEW_LINE(1); 

end CASE; 


PUT_LINE("Values for absorbtance and emittance are: '); 

NEW_LINE(2); 

PUT("SOLAR ABSORBTANCE BOL "); 

SET_COL(60); 

PUT(SOLAR_ABSORBTANCE_BOL,FORE= > 1,AFT= >2.EXP= >0); 
NEW_LINE(2); 

PUT("SOLAR ABSORBTANCE EOL "); 

SET_COL(60); 

PUT(SOLAR_ABSORBTANCE_EOL,FORE= > 1,AFT= >2,EXP= >0); 
NEW_LINE(2); 

PUT("RADIATOR EMITTANCE BOL *■); 

SET COL(60); 

PUT(EMITTANCE_BOL,FORE= > l.AFT= >2,EXP= >0); 

NEW_L1NE(2); 

PUT("RADlATOR EMITTANCE EOL '); 

SET COL(60); 

PUt'(RADIATOR_EMITTANCE_EOL.FORE= > 1,AFT= >2,EXP= >0); 

PUT(OUTH, "Values for absorbtance and emittance are; "); 
NEW_LINE(OUTH,l); 

PUT(OUTH,"SOLAR ABSORBTANCE BOL "); 

SET_COL(OUTH,55); 

PUT(OUTH,SOLAR_ABSORBTANCE BOL,FORE= >5,AFT= >2,EXP= >0); 
NEW_LINE(OUTH,l); 

PUT(OUTH,"SOLAR ABSORBTANCE EOL "); 

SET_COL(OUTH,55); 

PUT(OUTH,SOLAR_ABSORBTANCE_EOL,FORE= >5,AFT= >2,EXP= >0); 
NEW_LINE(OUTH,l); 

PUT(OUTH,"EMITTANCE BOL "); 

SET_COL(OUTH,55); 

PUT(OUTH,EMnTANCE_BOL,FORE= >5,AFT= >2,EXP= >0). 
NEW_LINE(OUTH,l); 

PUT(OUTH, "EMITTANCE EOL "); 

SET_COL(OUTH,55); 

187 







PUT(OUTH,RADIATOR_EMnTANCE_EOL,FORE= >5,AFT= >2,EXP= >0); 
NEW_LINE(OUTH,2); 


NEW_LINE(2); 

NEW_LINE(2); 


STOP; 

VIDEO.CLEARSCREEN; 

< <TOOBIG> > 

PUT LINECPlease enter the PERCENT PAYLOAD POWER that must be ’); 
PUT_LINE("dissipated as heat Example: Enter 59% as ’0.59’"); 

NEW_L1NE(2); 

PUT lINE("*********’*‘******'*‘**************’*****’^*’*‘****’*‘****’*‘***’*‘**’^**’*'*******)‘ 
NEW_LINE(2); 

SET_COL(10); 

GET_DATA(PERCENT_PAYLOAD_POWER DISSIPATION); 
if PERCENT_PAYLOAD_POWER_DISSIPATION > 1.0 then 

VIDEO. CLE ARSCREEN; 

NEW_LINE(2); 

PUT_LINE("Please use a value less then l.O"); 

NEW_LINE(2); 

PUT LiNE^’***************************************************************"); 
goto TOOBIG; 
end if; 

NEW_LINE(2); 

PUT(" Percent Payload Power Dissipated as Heat is ’); 

SET_COL(50); 

PUT(PERCENT_PAYLOAD_POWER_DISSIPATlON*100.0, FORE= >2,AFT= >2,EXP= >0); 
PUT(’ %"); 

NEW_LINE(2); 


PUT(OUTH,"Percent Payload Power Dissipated as Heat is "); 

SET_COL(OUTH,55); 

PUT(OUTH,PERCENT_PAYLOAD_POWER_DISSIPATlON’*‘100.0,FORE= >5,AFT= >2,EXP= >0): 
PUT(OUTH," %"); 

NEW_LINE(OUTH,l); 


< <TOOBIGH> > 

PUT_LINE('Please enter the PERCENT OF HOUSEKEEPING POWER that must be "); 
PUT_LINE("dissipated as heat Example: Enter 23% as ’0.23’’); 

SETCOLflO); 

GET_DATA(HOUSEKEEPING_PERCENT_POWER_DISSlPAT10N); 
if HOUSEKEEPING PERCENT POWER DISSIPATION > 1.0 then 
VIDEO. CLEAR_SCREEN; 

PUT LllNjE("*>t'********>t"t‘>t‘*************>»***********>t>****>t‘*>t'*"l"t‘**************"); 
NEv7_LINE(2); 

PUT LINECPlease use a value less then 1.0"); 

NEW_LINE(2); 


188 







goto TOOBIGH; 
end if; 

VIDEO. CLEAR_SCREEN; 

NEW_LINE(2); 

PUT('Perceot Payload Power Dissipated as Heat is '); 

SET_COL(50); 

PUT(PERCENT_PAYLOAD_POWER_DISSIPATION*100.0, FORE= >2,AFT= >2,EXP= >0); 

PUT(" %’); 

NEW_LINE(2); 

PUT('Percent Housekeeping Power Dissipated as Heat is "); 

SET_COL(50); 

PUT(HOUSEKEEPING_PERCENT_POWER_D1SSIPATION*100.0, FORE= >2,AFT= >2,EXP= >0); 
PUT(" %’); 

PUT(OUTH, "Percent Housekeeping Power Dissipated as Heat is "); 

SET_COL(OUTH,55); 

PUT(OUTH,HOUSEKEEPING_PERCENT_POWER_DISSIPATlON*100.0, FORE= >5.AFT= >2.EXP= >0); 
PUT(OUTH," %•); 

NEW_LINE(OUTH,l); 

NEW_LINE(2); 

NEv7_LINE(2); 

STOP; 

-- Tberma] Dissipation calculation 
if DRUM_SPINNER = FALSE then 

THERM AL_DISS1PAT10N: = (1.0/NUMBER_THERMAL_EMITTING_FACES) 

•(PAYLOAD_POWER*PERCENT_PAYLOAD_POWER_DISSIPATION 
+ H0USEKEEPING_P0WER*H0USEKEEP1NG_PERCENT_P0WER_DISS1PAT10N); 

NEW_LINE(2); 

PUT("Thermal Dissipation is "); 

SET_COL(60); 

PUT(THERMAL_DISSIPATION,FORE= >5,AFT= >2.EXP= >0); 

PUT(" Watts"); 

PUT(OUTH, "Thermal Dissipation is "); 

SET_COL(OUTH,.‘55); 

PUT(OUTH,THERMAL_DISSIPATION,FORE= >5,AFT= >2,EXP= >0); 

PUT(OUTH," Watts"); 

NEW_LINE(OUTH,l); 

— Radiator Area calculation 

RADlATOR_AREA:=THERMAL_DISSIPATION/((RADlATOR_EMnTANCE_EOL*STEFAN_BOLTZMANN 

*RADIATOR_TEMPERATURE**4.0*EFFICIENCY)-(SOLAR_ABSORBTANCE_EOL 

*SOLAR_INTENSITY_SOLSTlCE 

*SIN(SOLAR_ASPECT_COEFFlCIENT_SOLSTICE*Pl /180.0))); 

NEW_LINE(2); 

PUT("Radiator Area is "); 

SET_COL(60); 

PUT(RADlATOR_AREA,FORE= >5,AFT= >3,EXP= >0); 

PUT(" meters‘2"); 


189 






NEW_LINE(1); 


PUT(OUTH,"Radiator Area is *); 

SET_COL(OUTH,55): 

PUT(OUTH,RADIATOR_AREA,FORE= >5.AFT= >2.EXP= >0); 
PUT(OUTH,' nietere*2"); 

NEW_LINE(OUTH.l); 

NEW_LINE(2); 


— temperature during equinox calculation 


STOP; 

VIDEO.CLEAR_SCREEN; 

TEMPERATURE_EQUINOX: = (THERM AL_DISSIPATION 

/(RADIATOR_EMITTANCE_EOL*STEFAN_BOLTZMANN*EFFICIENCY*RAD1ATOR_AREA))**0.25; 

NEW_LINE(2); 

PUT("Temperature at Equinox is Full Power'); 

SET_COL(60); 

PUT(TEMPERATURE_EQUINOX,FORE= >5,AFT= >2,EXP= >0); 

PUT(" kelvin'); 


PUT(OUTH,"Temperature at Equinox is Full Power"); 

SET_COL(OUTH,55); 

PUT(OUTH,TEMPERATURE_EQUlNOX,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," kelvin"); 

NEW_LINE(OUTH.l); 

TEMPERATURE_EQUINOX_CELCIUS: = TEMPERATURE_EQUlNOX-273.15; 
NEW_LINE(2); 

PUT("Temperature at Equinox (celcius)is "); 

SET_COL(60); 

PUT(TEMPERATURE_EQUINOX_CELCIUS,FORE= >5,AFT= >2,EXP= >0); 
PUTC celcius'); 


PUT(OUTH, "Temperature at Equinox (celcius) Full Power is "); 

SET_COL(OUTH,55); 

PUT(OUTH,TEMPERATURE_EQUINOX_CELClUS,FORE= >5,AFT= >2.EXP= >0); 
PUT(OUTH," celcius'); 

NEW_LINE(OUTH,2); 

ifTEMPERATURE_EQUINOX_CELClUS >= 5.0 

and TEMPERATURE_EQUINOX_CELCIUS < = 37.0 then 
NEW_LINE(2); 

PUT_LINE("Temperature during equinox non eclipse period is within '); 
PUT_LINE('the prescribed limits of 5 to 37 degrees celcius. No "); 

PUT_LINE("auxiliary heating is required! "); 

PUT_LINE(OUTH,"Temperature during equinox non eclipse period is within "); 


190 









PUT_LINE(OUTH,’the prescribed limits of 5 to 37 degrees celcius. No "); 
PUT_LINE(OUTH, "auxiliary heating is required! "); 

NEW_LINE(OUTH,l); 

elsif TEMPERATURE EQUINOX_CELCIUS <5.0 then 
NEW_LINE(2); 

PUT_LINE(" Temperature is to low auxiliary heaters will be required"); 
PUT_L1NE(0UTH,"Temperature is to low, auxiliary heaters will be required’); 
NEW_UNE(OUTH,2); 
end if; 

NEW_LINE(2); 

PUT LJNE^"********'*'*******'*"*'**'*"*'*******'*'**********************************"); 
NEv7_LINE(3); 


STOP; 

VIDEO.CLEAR_SCREEN; 


“ Equilibrium Temperature calculation 
NEW_LINE(2); 

PUT_LINE("When batteries provide partial power, heat dissipation "); 

PUT_LINE("and equilibrium temperature during eclipse is "); 
new_line(2); 

EQUILIBRIUM TEMPERATURE: = ((THERMAL_DISSIPAT10N*PERCENT_PART1AL_P0WER) 

''/(RADIATOR_EMnTANCE_EOL*STEFAN_BOLTZMANN*RADIATOR_AREA))**0.25; 


NEW_LINE(1); 

SET_COL(45); 

PUT(EQUILIBRIUM_TEMPERATURE,FORE= >5,AFT= >2,EXP= >0); 
PUT(" degrees kelvin"); 


PUT(OUTH,"Equilibrium Temperature Partial Power"); 

SET_COL(OUTH,55); 

PUT(OUTH,EQUILIBRIUM_TEMPERATURE,FORE= >5,AFT= >2.EXP= >0); 
PUT(OUTH," degrees kelvin"); 

NEW_LINE(OUTH.l); 

new_line(2); 

PUT linE("*****’*‘**********'*‘**********'*‘****‘*‘***’****’*‘************'*"^*’*'***’*‘**’*‘*’')’ 
NEv7_LINE{3); 


— Time Constant Calculation 
STOP; 

VIDEO. CLEARJCREEN; 

TIME_CONSTANT:=(MASS_RADIATOR_PLUS_EQUIPMENT*RADIATOR_SPECIFlC_HEAT) 
/(4.0*RADIATOR_EMITTANCE_EOL*STEFAN BOLTZMANN 
*RADIATOR_AREA*EQU1LIBR1UM_TEMPERATURE**3.0); 


191 






NEW_LINE(2); 

PUTCTime Constant is "); 

SET_COL(50); 

PUT(nME_CONSTANT,FORE= >7,AFT= >0.EXP= >0); 

PUT(' seconds”); 

TIME_CONSTANT_MINUTES:=TIME_CONSTANT/60.0; 

NEW_LINE(2); 

PUT("Time Constant Minutes is ”); 

SETCOUSO); 

PUT(TIME_CONSTANT_MINUTES,FORE= >5.AFT= >2,EXP= >0); 

PUT(" minutes”); 

PUT(OUTH,”Time Constant is ”); 

SET_COL(OUTH,55); 

PUT(OUTH,TIME_CONSTANT,FORE= >7,AFT= >0.EXP= >0); 

PUT(OUTH,” seconds”); 

NEW_LINE(OUTH,l); 

PUT(OUTH,”Time Constant Minutes is ”); 

SET_COL(50); 

PUT(OUTH,TIME_CONSTANT_MINUTES,FORE= >5,AFT= >2,EXP= >0); 

PUT(OUTH,” minutes”); 

NEW_LINE(OUTH,l); 

NEW_LINE(2); 

PUT LINE("*****************’*‘********’*‘********’*‘*****************’*'***’*‘******")i 
NEW_LINE(2); 

STOP; 

VIDEO.CLEAR_SCREEN; 

elsif DRUM_SPINNER = TRUE then 
NUMBER_THERMAL_EMimNG_FACES: = 1.0; 

THERM AL_DISSIPATION;=(PAYLOAD_POWER*PERCENT_PAYLOAD_POWER_DlSSlPAT10N 
+ HOUSEKEEPING_POWER*HOUSEKEEPING_PERCENT_POWER_DISSI RATION); 

NEW_LINE(2); 

PUT('Thermal Dissipation is "); 

SET_COL(60); 

PUT(THERMAL_DISSIPAT10N,F0RE= >5.AFT= >2.EXP= >0); 

PUT(” Watts”); 

PUT(OUTH,”Thermal Dissipation is ”); 

SET_COL(OUTH.55); 

PUT(0UTH,THERMAL_DISSIPATI0N,F0RE= >5,AFT= >2,EXP= >0); 

PUT(OUTH,” Watts”); 

NEW_LINE(OUTH,l); 


'■ Radiator Area calculation 

- RADIATOR_HEIGHT, 

- SOLAR_ARRAY_DIAMETER, 

NEW_LINE(2); 

PUT lINE(”*************’''***’'"'"'‘***’'‘**’''''"'‘****'''’'‘*****''‘**''"*‘*****''‘**********’'‘*"); 
NE\V_LINE(2); 


192 







PUT('Please enter Solar Array Diameter in meters'); 

NEWLlNEd); 

SET_COL(15); 

GET_DATA(SOLAR_ARRAY_DIAMETER); 

VIDEO.CLEAR_SCREEN; 

NEW_LINE(1); 

PUT("Solar Array Diameter is "); 

SET_COL(55); 

PUT(SOLAR_ARRAY_DIAMETER,FORE= >5.Arr= >4,EXP= >C); 
PUT(" meters'); 


PUT(OUTH,'Solar Array Diameter is '); 

SET_COL{OUTH,54); 

PUT(OUTH,SOLAR_ARRAY_DIAMETER,FORE= >5,AFT= >3,EXP= >0); 
PUT(OUTH,' meters'); 

NEW_LINE(OUTH,l); 


RADIATOR_HEIGHT:=THERMAL_DlSSIPATION/(SOLAR_ARRAY_DlAMETER 

*((PI*RADIATOR_EMITTANCE_EOL*STEFAN_BOLTZMANN 

■'■RADIATOR_TEMPERATURE**4.0*EFF1CIENCY)-(SOLAR_ABSORBTANCE_EOL 

♦SOLARINTENSITYEQUINOX 

*COS(SOLAR_ASPECT_COEFFIC1ENT_EQU1NOX*P1/180.0)))); 

NEW_LINE(2); 

PUT( Radiator Height is '); 

SET_COL(55); 

PUT(RADIATOR_HEIGHT,FORE= >5,AFT= >4,EXP= >0); 

PUT(" meters'); 

PUT(OUTH, "Radiator Height is "); 

SET_COL(OUTH,55); 

PUT(OUTH,RADIATOR_KElGHT,FORE= >5,AFT= >2,EXP= >0); 

PUT{OUTH," meters'); 

NEW_LINE(OUTH,]); 

RADIATOR_AREA:=RADlATOR_HElGHT*Pl*(SOLAR_ARRAY_blAMETER/2.0)**2.0; 

new_line(l); 

PUT("Radiator Area (Spir Stabilized) is "); 

SET_COL(55); 

PUT(RADIATOR_AREA,FORE= >5,AFT= >4,EXP= >0); 

PUT(" meters'‘2"); 

PUT(OUTH,"Radiator Area is "); 

SET_COL(OUTH,55); 

PUT(OUTH,RADIATOR_AREA,FORE= >5,AFT= >2.EXP= >0); 

PUT(OUTH," meters*2"); 

NEW_LlNE(OUTH,l); 










NEW_LINE(2): 

PUT LTNE("***********************************’*'**’*‘**’*‘**********’*‘**********")* 
NEv7_LINE(2); 

" temperature during equinox calculation 

PUT("Please enter a value for Radiator Efficiency (usually around 0.9)’); 

NEW_LINE(2); 

GET_DATA(EFFICIENCY); 

NEW_LINE(2); 

PUT LINEf"*****’*'*********'*"*'***********'*'*’'"'"''**'''’''************************''"''"); 
NE\V_LINE(2); 

PUT("EFFICIENCY"); 

NEW_LINE(2); 

SET_COL(50); 

PUT(EFFICIENCY,FORE= >4,AFT= >2.EXP= >0); 

NEW_LINE(3); 


STOP; 


VIDEO. CLE AR_SCREEN; 

TEMPERATURE_EQUINOX;=(THERMAL_DISSlPATION 

/(RADIATOR EMITTANCE_EOL*STEFAN_BOLTZMANN*EFFlCIENCY 
♦RADIATOR ~HEIGHT*SOLAR_ARRAY_D1AMETER’*‘PI))**0.25; 
NEW_LINE(2); 

PUT("Temperature at Equinox is "); 

SET_COL(60); 

PUTaEMPERATURE_EQUINOX,FORE= >5,AFT= >2,EXP= >0); 

PUT(" kelvin’); 

PUT(OUTH, "Temperature at Equinox is "); 

SET_COL(OUTH,55); 

PUT(OUTH,TEMPERATURE_EQUlNOX,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," kelvin"); 

NEW_LINE(OUTH,l); 


TEMPERATURE_EQU1N0X_CELCIUS:= TEMPERATURE_EQUlNOX-273.15; 
NEW_LINE(2); 

PUT("Temperature at Equinox (celcius) is "); 

SET_COL(60); 

PUT(TEMPERATURE_EQUINOX_CF.LClUS,FORE= >5.AFT= >2,EXP= >0); 

PUT(" celcius"); 

PUT(OUTH,"Temperature at Equinox (celcius) is "); 

SET_COL(OUTH,55); 

PUT(OUTH,TEMPERATURE_EQUlNOX_CELClUS,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," celcius"); 

NEW_LINE(OUTH,l); 


194 






ifTEMPERATURE_EQUINOX_CELCIUS >= 5.0 

and TEMPERATURE_EQUlNOX_CELCIUS < = 37.0 then 
NEW_LINE(2); 

PUT_LINE("Temperature during equinox non eclipse period is within "); 

PUT_LINE("the prescribed limits of 5 to 37 degrees celcius. No "); 

PUT_LINE("auxiliary heating is required! "); 

PUT_LINE(OUTH, "Temperature during equinox non eclipse period is within "); 
PUT_LINE(OUTH,"the prescribed limits of 5 to 37 degrees celcius. No "); 
PUT_LINE(OUTH,"auxiliary heating is required! "); 

NEW_LINE(OUTH,2); 

elsif TEMPERATURE_EQUINOX_CELCIUS <5.0 then 
NEW_LINE(2): 

PUT_LINE(" Temperature is to low auxiliary heaters will be required"); 
PUT_LINE{OUTH,“Temperature is to low, auxiliary heaters will be required"); 
NEW_LINE(OUTH,2); 
end if; 

NEW_LINE(2); 

PUT LiNEf"**"'**********************’*'***’''**********’''**’''********************"); 
NEW_LINE(3); 


STOP; 

VIDEO.CLEAR SCREEN; 


" Equilibrium Temperature calculation 


NEW_LINE(2); 

PUT_LINE("When batteries provide partial power, heat dissipation "); 

PUT_LINE("and equilibrium temperature during eclipse is “); 
new_line(2); 

EQU1LIBRIUM_TEMPERATURE;=((THERMAL_DISSIPATI0N*PERCENT_PART]AL_P0WER) 

/(RADlATOR_EMITTANCE_EOL*STEFAN_BOLTZMANN 

*RADIATOR_HEIGHT*SOLAR_ARRAY_D1AMETER*PI))**0.25; 


SET_COL(45); 

PUT(EQU1LIBRIUM_TEMPERATURE,F0RE= >5,AFT= >2.EXP= >0); 
PUT(" degrees kelvin"); 


PUT(OUTH,"Equilibrium Temperature Partial Power Supplied"); 

SET_C0L(0UTH,55); 

PUT(0UTH,EQUILIBRIUM_TEMPERATURE,F0RE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," kelvin"); 

NEW_LINE(OUTH,l): 

new_line(2); 

PUT "♦****★****★*♦***♦****♦*****♦*♦************★*****+****’*‘+’*‘********''^* 

NEW_L1NE(3); 

— Time Constant Calculation 


195 





STOP; 

VIDEO.CLEAR_SCREEN; 

TIME_CONSTANT:=(MASS_RADIATOR_PLUS_EQUIPMENT*RADlATOR_SPECIFIC_HEAT) 

/(4.0*RADIATOR_EMITTANCE_EOL*STEFAN_BOLTZMANN 

■'■RADIATOR_HEIGHT*SOLAR_ARRAY_DIAMETER’*-Pl 

*EQUILIBRIUM_TEMPERATURE**3.0); 

NEW_L1NE(2); 

PUT("Time Constant is "); 

SET_COL(55); 

PUT(TIME_CONSTANT,FORE= >5,AFT= >2,EXP= >0); 

PUT(" seconds’); 

TlME_CONSTANT_MINUTES: = TIME_CONSTANT/60.0; 

NEW_LINE(2); 

PUT('Time Constant Minutes is "); 

SET_COL(50); 

PUT(TIME_CONSTANT_MINUTES,FORE= >5,AFT= >2,EXP= >0); 

PUT(" minutes’); 


PUT(OUTH,’Time Constant is ’); 

SET_COL(OUTH,53); 

PUT(OUTH,TIME_CONSTANT,FORE= >7,AFT= >0,EXP= >0); 

PUT(OUTH,’ seconds’); 

NEW_LINE(OUTH,l); 

PUT(OUTH,’Time Constant Minutes is "); 

SET_COL(outh,55); 

PUT(OUTH,TIME_CONSTANT_MINUTES,FORE= >5.AFT= >2,EXP= >0); 
PUT(OUTH,’ minutes’); 

NEW_LINE(OUTH.l); 

NEW_LINE(2); 

PUT lINE(’’'‘’*"'"''*‘'‘’''*''"****‘'"'"'‘*'*"'‘**’'"*"'”'‘**********''‘*’*‘*****’*‘***’'‘**''‘*************"); 
NE\V_LINE(2); 

STOP; 

VIDEO.CLEAR_SCREEN; 


end if; 

PUT_LINE(’For the case of radiative cooling find ’C’ assuming t = 0.0 '); 
PUT_LINE(’this happens when the equinox temperature is less than the ’); 
PUT_LlNE(’calculated equilibrium temperature’); 


if(TEMPERATURE_EQUINOX-EQUILIBRIUM_TEMPERATURE ) < 5.0 then 
EQUILIBRIUM_TEMPERATURE: = EQUILIBRIUM_TEMPERATURE/1.0146; 

NEW_LINE(3); 

PUT_L1NE(’THE AMOUNT OF POWER PROVIDED DURING ECLIPSE IS TO CLOSE TO"); 
PUT_LINE(’FULL POWER SO A FUDGE FACTOR OF 1.0146% HAS BEEN SUBTRACTED"); 
PUT_LlNE(’TO EQUILIBRIUM TO PREVENT A COTH NUMERIC ERROR."); 

NEW_LINE(3); 
end if; 


196 




CONST: =2.0*(ARCCOTH(TEMPERATURE_EQU1NOX/EQU1L1BR1UM_TEMPERATURE) 
-ARCCOT(TEMPERATURE_EQUINOX/EQUILIBRIUM_TEMPERATURE)); 


NEW_LINE(2); 

PUT("For radiative cooling constant ‘C’ when t=0.0 is ’); 

SET_COL(60); 

PUT(CONST,FORE= >3,AFT= >6,EXP= >0); 

PUT(OUTH, "Radiative cooling constant ‘C’ when t=0.0 is "); 
SET_COL(OUTH,55); 

PUT(OUTH,CONST.FORE= >3,AFT= >4.EXP= >0); 

NEW_LINE(OUTH,l): 

NEW_LINE(2); 

PUT_LINE("The next portion of this program is an iterative approach to 
PUT_LINE("find the temperature after equinox for an equinox period )"); 
PUT_LINE("of 1.2 hours (72 minutes or 4,320 seconds)"); 

NEW_L1NE(1); 

PUT_LINE("The purpose of this iteration is to bracket an Eclipse Time "); 
PUT_LINE("of 72 minutes. For example we want one value above (80 minutes) "); 
PUT_LINE("and one value below (68) minutes a good starting temperature "); 
PUT_LINE("is 273.0 degrees kelvin. "); 

NEW_LINE(2); 

STOP; 

VIDEO.CLEAR_SCREEN; 

< <EQUINOX_ONE> > 


PUT_LlNE("Please enter an AFTER EQUINOX TEMPERATURE guess in degrees kelvin "); 
NEW_LINE(3); 

SET_COL(10); 

GET_DATA(EQUINOX_TEMP_ONE); 

VIDEO. CLEAR_SCREEN; 

if EQUINOX_TEMP_ONE < = EQU1LIBRIUM_TEMPERATURE then 
PUT_LINE ("Condition would not occur in real life please try again"); 

NEW_LINE(1); 

PUT("Enter a value greater than "); 

PUT(EQUILIBRIUM_TEMPERATURE,FORE= >4.AFT= >2,EXP= >0); 

NEW_LINE(3); 
goto EQUINOX_ONE; 

else 

TIME_ECLIPSE_ONE: = (2.0*(ARCCOTH(EQUINOX_TEMP_ONE/EQUILIBRIUM_TEMPERATURE) 
-ARCCOT(EQUINOX_TEMP_ONE/EQUlLIBRIUM_TEMPERATURE))-CONST) 
■^rME_CONSTANT_MINUTES; 

PUT("Temperature Input is "); 

SET_COL(50); 


197 



PUT(EQUINOX_TEMP_ONE,FORE= >5,AFT= >2,EXP= >0); 
PUT(" degrees kelvin"); 

NEW_LINE(2); 

PUT("For radiative cooling Eclipse Time is ’); 

SET_COL(60); 

PUT(TIME_ECLIPSE_0NE,F0RE= >5,AFT= >2,EXP= >0); 
pure minutes'); 


new_line(2); 

PUT_LINE(’Is the calculated eclipse time close to 72 minutes +/- 10 minutes ’); 

PUT_LINE("Remember if this value is above 72 minutes then the next value '); 

PUT_LINE("should be below 72 minutes, or vice versus. '); 

PUT_LINE('To accept this eclipse time Enter ’Y’ for yes and ’N' for no '); 
if ABSOTME ECLIPSE_0NE-ECLIPSE_TIME_M1NUTES) > 10.0 then 
NEW_LINE(2); 

PUT_LINE(’CALCULAT:0NS show that eclipse for TEMPERATURE IS MORE THAN 10 
MINUTES'); 

PUT_LINE('DIFrERENCE FROM THE 72 MINUTE STANDARD GEOSYNCHRONOUS ECLIPSE 

TIME '); 

PUT_LINE('RECOMMEND INPUT A ’N’ TO RE-CALCULATE A NEW ECLIPSE TIME"); 
put \lx^^^’*****’l^*^^****’^*’‘^**********’>^*********’*■***^*********’***’***^’^******‘**********')■^ 

end if; 

NEW_LINE(2); 

GET_CHARACTER(TAKE); 
if TAKE = ’Y’ or TAKE = ’y’ then 
TAKE ;= ’N’ ; 

VIDEO.CLEAR SCREEN; 
goto EQUINOX~TWO; 

else 

VIDEO. CLEARSCREEN; 

PUT_LINE(, Please enter a new temperature for the equinox temperature '); 
goto EQUINOX ONE; 
end if; 

STOP; 

VIDEO.CLEAR_SCREEN; 


PUT_LINE('Please enter a new after equinox temperature guess in degrees kelvin'); 
end if; 


< <EQUINOX_TWO> > 

NEW_LINE(2); 

PUT('First Iterative Eclipse Time for linear approximation is '); 
SET_COL(60); 

PUT(TIME_ECLIPSE_ONE.FORE= >5,AFT= >2.EXP= >0); 
PUT(' minutes'); 

NEW_LINE(2); 


198 



PUT("First Iterative Temperature is "); 

SET_COL(50); 

PUT(EQUINOX_TEMP_ONE,FORE= >5,AFT= >2.EXP= >0); 

PUT(" degrees kelvin'); 

new_line(2); 


PUT LINE("Please enter a new after equinox temperature guess in degrees kelvin"); 

NEW_LINE(1): 

GET_DATA(EQUINOX_TEM PTWO); 
if EQUINOX_TEMP_TWO <= EQUILIBRIUM TEMPERATURE then 
VIDEO.CLEAR_SCREEN; 

PUT_LINE ("Condition would not occur in real life please try again"); 

NEW_LINE(1); 

PUT{'Enter a value greater than "); 

PUT(EQUILIBRIUM_TEMPERATURE.FORE= >4.AFT= >2,EXP= >0); 

NEW_L1NE(3); 
goto EQUINOX TWO; 

else 

VIDEO.CLEARSCREEN; 

TIME_ECLIPSE_TWO: = (2.0*(ARCCOTH(EQU1NOX_TEMP _TW'0/EQU1L1BRIUM_TEMPERATURE) 
-ARCCOT(EQUlNOX_TEMP_TWO/EQUILIBRlUM_TEMPERATURE))-CONST) 
*TIME_C0NSTANT_M1NUTES; 

PUT("First Iterative Eclipse Time for linear approximation is "); 

SET_COL(60); 

PUT(TIME_ECLIPSE_ONE,FORE= >5,AFT= >2.EXP= >0); 

PUT(" minutes'); 

NEW_LINE(2); 

PUT('First Iterative Temperature is "); 

SET_COL(50); 

PUT'(EQUIN0X_TEMP_0NE,F0RE= >5,AFT= >2,EXP= >0); 

PUT(" degrees kelvin"); 

NEW_LINE(2); 

PUT("Second Iterative Eclipse Time for linear approximation is "); 

SET_COL(60); 

PUT(TIME_ECLIPSE_TW0,F0RE= >5,AFT= >2,EXP= >0); 

PUT(" minutes"); 
new_line(2); 

PUT("Second Iterative Temperature is "); 

SET_COL(50); 

PUT(EQUINOX_TEMP_TWO,FORE= >5,AFT= >2.EXP= >0); 

PUT(" degrees kelvin"); 
new_line(2); 

if ABS(TIME_ECLIPSE_TWO-ECLIPSE_TlME_MINUTES) > 10.0 then 
NEW_LINE(2); 

PUT_LINE("CALCULATIONS SHOW THAT ECLIPSE FOR TEMPERATURE IS GREATER THAN 
10 MINUTES"); 

PUT_LINE("RECOMMEND INPUT A ’N’ TO RE-CALCULATED A NEW ECLIPSE TIME"); 
put linef"*********’'"'"''*’'"'"*"'"''***’''*’*"*'*'''**''"*"''*'''*'*'************'*'’'"''**’*'*****’''***********" )• 


end if; 


199 








PUT_LINE('Is the calculated eclipse time close to 72 minutes +/- 10 minutes’); 

PUT_LINE("Remember if this value is above 72 minutes then the next value'); 

PUT_LINE("should below 72 minutes"); 

PUT LINE('To accept this eclipse time Enter ’Y’ for yes and 'S’ for no"); 

SEt"C0L(15); 

GET_CHARACTER(TAKE); 

VIDEO. CLE AR_SCREEN; 

if TAKE = ’Y’ or TAKE = ’y’ then 

ifTIME_ECLIPSE_ONE = 72.0 then 
TEMPERATURE_AFTER_EQUINOX := EQUINOX TEMP ONE; 
goto TAE; 

elsifTIME_ECLIPSE_TWO = 72.0 then 
TEMPERATURE_AFTER_EQUINOX := EQUINOX TEMP TWO; 
goto TAE; 

elsifTIME_ECLIPSE_ONE < 72.0 and TIME_ECLIPSE_TWO > 72.0 then 
TAKE := 'S' ; 
goto STOP ITERATION; 

elsifTIME_ECLIPSE_ONE > 72.0 and TIME_ECLIPSE_TWO < 72.0 then 
TAKE := ’N’ ; 
goto STOP ITERATION; 

elsif TIME_ECLlPSE_ONE < 72.0 and TIME_ECLIPSE_TWO < 72.0 then 
PUT_LINE('BOTH TIME VALUES ARE BELOW 72.0 MINUTES TRY AGAIN"); 
TAKE ;= ’N' ; 
goto EQUINOX_TWO; 

elsif TIME ECLIPSE_ONE > 72.0 and TIME_ECLIPSE_TWO > 72.0 then 

PUT LINE("BOTH TIME VALUES ARE ABOVE 72.0 MINUTES TRY AGAIN"); 

TAKE := ’N’ ; 

goto EQUINOX_TWO; 

end if; 


VIDEO.CLEARSCREEN; 

PUT_LINE("Please enter a new temperature in order to bracket a 72 minute eclip.se time"); 

TAKE := 'S' ; 

goto EQUINOX_T\^'0; 

end if; 
end if; 

-- CASE OF RADIATIVE HEATING 


< <STOP_ITERATION> > 


TEMPERATURE_AFTER_EQUINOX: = ABS(((TIME_ECLIPSE_ONE-ECLIPSE_TIME_MINUTES) 
/(TIME_ECLIPSE_ONE-TIME_ECLIPSE_TWO)) 
■*'(EQUINOX_TEMP_ONE-EQUINOX_TEMP TWO) 

-EQUINOX_TEMP_ONE); 


200 






< <TAE> > 


NEW_LINE(0UTH,1): 

PUT(OUTH,"First Iterative Time for linear approximation is ’); 
SET_COL(OUTH,55); 

PUT(OUTH,TIME_ECLIPSE_ONE,FORE= >5,AFT= >2.EXP= >0); 
PUT(OUTH," minutes’); 

NEW_L1NE(0UTH,1); 


PUT(OUTH,"First Iterative Temperature is ’); 

SET_COL(OUTH,55); 

PUT(OUTH,EQUINOX TEMP_ONE,FORE= >5.AFT= >2,EXP= >0); 
PUT(OUTH,’ degrees kelvin"); 
new_line(OUTH, 1); 


PUT(OUTH, "Second Iterative Time for linear approximation is "); 
SET_COL(OUTH,55); 

PUT(OUTH,TIME_ECLlPSE_TWO,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," minutes"); 
new_line(OUTH, 1); 

PUT(OUTH,"Second Iterative Temperature is "); 

SET_COL(OUTH,55); 

PUT(OUTH,EQUINOX_TEMP_TWO,FORE= >5.AFT= >2.EXP= >0); 
newJine(OUTH, 1); 


PUT \ Temperature after Equinox is "); 

SET_COL(50); 

PUT(TEMPERATURE_AFTER_EQUINOX,FORE= >5.AFT= >2.EXP= >0); 

PUT (OUTH,"Temperature after Equinox is "); 

SET_COL(OUTH,55); 

PUT(OUTH,TEMPERATURE AFTER_EQUlNOX,FORE= >5,AFT= >2.EXP= >0); 
PUT(OUTH," kelvin"); 

NEW_LINE(OUTH,2); 

NEW_LINE(2); 

PUT LiNE("*********''"*‘***'*‘*****‘'"*‘**'*"'‘****'''*********************‘*‘*****'''*****") 
NEv7_LINE(2); 

STOP; 


end HEAT; 


procedure WARM_UP (THERMAL_D1SSIPAT10N : in out FLOAT; 

RADIATOR_SPEClFIC_HEAT : in out FLOAT; 
RADlATOR_EMlTTANCE_EOL ; in out FLOAT; 
RADIATOR AREA : in out FLOAT; 

MASS RADIATOR PLUS EQUIPMENT ; in out FLOAT; 
EFFICIENCY ; in out FLOAT; 

TEMPERATURE AFTER EQUINOX : in out FLOAT; 


201 








NUMBER_THERMAL_EMITTING_FACES; in out FLOAT) is 


OPERATING_TEMPERATURE : FLOAT : = 278.0;- degrees kelvin 
TIME_CONSTANT_MlNUTES. 

CONST, 

TIME_COOLING, 

TIME_HEAT1NG : FLOAT ; 


NEW TEMPERATURE : INTEGER ; 


begin 

VIDEO. CLE AR_SCREEN; 

PUT_LINE('Now we will determine the time it takes for the spacecraft to’); 
PUT_LINE("reach a specified operating temperature after eclipse. Default"); 
PUT_LINE("operating temperature is specified as 278.0 degrees Kelvin or'); 
PUT_LINE('5 degrees celcius.'); 
new_line(l); 

PUT_LINE(’ DEFAULT VALUES FOR OPERATING PARAMETERS ARE’); 
PUT('Radiator(s) Dissipate ’); 

SET_COL(50); 

PUT(THERMAL_DISSIPAT10N,F0RE= >5,AFT= >2,EXP= >0); 

PUT(" watts’); 

NEWLINEd); 

PUTCEFFICIENCY"); 

SET_COL(50); 

PUT(EFFICIENCY,FORE= >5,AFT= >2,EXP= >0); 

NEW_L1NE(1); 

PUT("RADIATOR_EMITTANCE_EOL"); 

SET_COL(50); 

PUT(RADIATOR_EMITTANCE_EOL,FORE= >5,AFT= >2.EXP= >0); 
NEW_LINE(1); 

PUT("MASS_RADIATOR_PLUS_EQUIPMENT’); 

SET_COL(50); 

PUT(MASS_RADIATOR_PLUS_EQUIPMENT,FORE= >5.AFT= >2.EXP= >0); 
PUT(’ kgs’); 

NEWLINEd); 

PUT(’RADIATOR_SPECIFIC_HEAT’); 

SET_COL(50); 

PUT(RADIATOR_SPECIFIC_HEAT,FORE= >5,AFT= >2,EXP= >0); 
PUT(’(watts*sec)\(kg*KeIvin) ’); 

NEW_LINE(1): 


PUTf’Radiator Area is ’); 

SETCOUSO); 

PUT(RADIATOR_AREA,FORE= >5,AFT= >2.EXP= >0); 
PUT(’ meters‘2’); 


202 





NEWLINEd); 


PUT("Teinperature after equinox is '); 

SET_COL(50); 

PUT(TEMPERATURE_AFTER_EQUIN0X.F0RE= >5.AFT= >2,EXP= >0); 


PUT(" kelvin’); 
NEW_UNE(2); 


PUT("Desired operating temperature after equinox is *); 

SET_COL(50): 

PUT(OPERATING_TEMPERATURE,FORE= >5,AFT= >2,EXP= >0); 

PUT(" kelvin*); 

NEWLINEd); 

PUT_LINE(’The Radiator Heat Dissipation may be changed if desired"); 

PUT_LINE("this value enter a ‘y’ for YES. If you wish to change the value"); 
PUT_LINE('enter a ‘n’ for NO and the value you enter will be used in "); 
put_line("further calculations"); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
VIDEO. CLEAR_SCREEN; 

PUT('Please enter a value for the Radiator Heat Dissipation "); 

NEW_LINE(3); 

PUT Lij^E^"*************^^******************^**************************’*'’^**")• 
NEv7_LINE(3); 

GET_DATA(THERMAL_DISSIPAT10N); 

PUT("Radiator Heat Dissipation is "); 

SET_COL(60); 

PUT(THERMAL_DISSIPATI0N, fore = > 6, AFT = > 2, EXP = > 0); 
NEW_LINEd); 
else 

VIDEO.CLEAR_SCREEN; 
end if; 

NEW_LINE(1); 

PUT_LINE('The default operating temperature after equinox is 5 degrees celcius"); 
PUT_LINE("or 278 degrees kelvin. If you wish to change this value enter a"); 
PUT_LINE("‘y’ for YES. To accept the default value enter an 'n' for NO changes"); 
NEW_L1NE(2); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y' then 
VIDEO. CLEAR_SCREEN; 

PUT("Please enter a value for operating temperature after equinox "); 

NEW_LINE(3); 

NE\V_LINE(3); 

GET_DATA(OPERATING_TEMPERATURE); 

PUT("Desired operating temperature is ’); 

SET_COL(60); 

PUT(OPERATING_TEMPERATURE. FORE = > 6, AFT = > 2, EXP = > 0); 


203 







NEWLINEd); 

else 

VIDEO.CLEAR_SCREEN; 
end if; 


~ Equilibrium Temperature calculation 


PUT(OUTH,”Radiator(s) Dissipate ’); 

SET_COL(OUTH,55); 

PUT(OUTH,THERM AL_DlSSIPAT10N,FORE= >5.AFT= >2.EXP= >0). 
PUT(OUTH,* watU’); 

NEW_LINE(OUTH,l); 

PUT(OUTH, "Efficiency’); 

SET_COL(OUTH,55); 

PUT(OUTH.EFFICIENCY,FORE= >5.AFT= >2.EXP= >0); 
NEW_LlNE(OUTH,l); 


PUT(OUTH,"Radiator Emittance"); 

SET_COL(OUTH,55); 

PUT(OUTH,RADlATOR_EMITTANCE_EOL,FORE= >5,AFT= >2,EXP= >0); 
NEW_LINE(OUTH,l); 


PUT(OUTH,"Mass Radiator Plus Equipment"); 

SET_COL(OUTH,55); 

PUT'(OUTH,MASS_RAbIATOR_PLUS_EQUIPMENT,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," kgs"); 

NEW_UNE(OUTH,l); 

PUT(OUTH, "Radiator Specific Heat"); 

SET_COL(OUTH,55); 

PUT'(0UTH,RADIAT0R_SPECIF1C_HEAT.F0RE= >5,AFT= >2,EXP= >0); 
PUT(OUTH,"(W*s)/(kg*Kelvin) ’); 

NEW_LINE(OUTH,l); 


PUT(OUTH,"Radiator Area is "); 

SET_COL(OUTH,55); 

PUT(OUTH,RADIATOR_AREA,FORE= >5,AFT= >2,EXP= >0); 

PUT(OUTH," meters*2’); 

NEW_LINE(OUTH,l); 

PUT(OUTH, "Desired operating temperature after equinox is ’); 

SET COL(OUTH,55); 

PUT'(OUTH,OPERATING_TEMPERATURE,FORE= >5,AFT= >2,EXP= >0); 

PUT(OUTH," kelvin"); 

NEW_LINE(OUTH,l): 

EQUILIBRIUM_TEMPERATURE;= (THERM AL_D1SS1PAT10N/ 
(RADIATOR_EMITTANCE_EOL*STEFAN_BOLTZMANN*EFF1C1ENCY*RADIATOR_AREA))**0.25; 
NEW_LINE(2); 

PUT(’Equilibrium Temperature'); 

SET_COL(50); 


204 







PUT(EQUlLIBRlUM_TEMPERATURE,FORE= >7,AFT= >2,EXP= >0); 

PUT(" kelvin"); 

STOP; 

if (EQUILIBRIUM_TEMPERATURE-TEMPERATURE_AFTER_EQUINOX) < 5.0 then 

EQUIL1BRIUM_TEMPERATURE: = 1.0146*EQUILIBRIUM_TEMPERATURE; 

NEW_LINE(3); 

PUT LINECTHE AMOUNT OF POWER PROVIDED DURING ECLIPSE IS TO CLOSE TO"); 
PUT LINECFULL POWER SO A FUDGE FACTOR OF 1.0146% HAS BEEN ADDED TO"); 
PUT_LINE(*EQUILIBRIUM TO PREVENT A TANH NUMERIC ERROR."); 
end if; 


PUT("Radiative Heating ‘C’ assuming t=0.0 is "); 

CONST: =2.0*((ARCTANH(TEMPERATURE_AFTER_EQUINOX/EQU1L1BRIUM_TEMPERATURE))- 
(ARCTAN(TEMPERATURE_AFTER_EQUINOX/EQUILIBRIUM_TEMPERATURE))); 
SET_COL(48); 

PUT(CONST,FORE= >7,AFT= >4,EXP= >0); 

NEWLINEd); 


PUT(OUTH,"Equilibrium Temperature Heating After Eclipse"); 
SET_COL(OUTH,55); 

PUT(OUTH,EQUILIBRIUM_TEMPERATURE,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," kelvin"); 
new_line(OUTH, 1); 


“ Time Constant Calculation 

TIME_CONSTANT: = (MASS_RADIATOR_PLUS_EQUIPMENT*RADlATOR_SPEClFIC_HEAT) 
/(4.0*RADIATOR_EMITTANCE_EOL*EFF1CIENCY*STEFAN_BOLTZMANN 
*RADIATOR_AREA*EQU1LIBRIUM_TEMPERATURE**3.0); ~ 

NEW_LINE(2); 

PUT("Time Constant Heating After Eclipse is "); 

SET_COL(50); 

PUT(TlME_CONST ANT,FORE = >7,AFT= >2,EXP= >0); 

PUT(" seconds"); 

NEW_LINE(2); 


PUT(OUTH,"Time Constant Heating After Eclipse is"); 
SET_COL(OUTH,54); 

PUT(OUTH,TIME_CONSTANT,FORE= >6,AFT= >2,EXP= >0); 
PUT(OUTH," seconds"); 

NEW_LINE(OUTH,l); 

T1ME_CONSTANT_MINUTES:=TIME_CONSTANT/60.0; 

PUT("Time Constant is "); 

SET_COL(50); 

PUT(TIME_CONSTANT_MINUTES,FORE= >7,AFT= >2,EXP= >0); 
PUT(" minutes"); 

NEW_L1NE(2); 


205 









PUT(OUTH,"Time Constant Heating After Eclipse is"); 

SET_COL(OUTH,55); 

PUT(OUTH,TIME_CONSTANT_MINUTES,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," minutes"); 

NEW_LINE(OUTH,l); 


PUT("Temperature After Equinox"); 

SET_COL(50); 

PUT(TEMPERATURE_AFTER_EQUINOX,FORE= >7,AFT= >2,EXP= >0); 
PUT(’ kelvin"); 

NEW_LINE(2); 


PUT( "Equilibrium Temperature"); 

SET_COL(50); 

PUT(EQUILIBRIUM_TEMPERATURE,FORE= >7,AFT= >2,EXP= >0); 

PUT(" kelvin"); 

NEW_LINE(2); 

NEW_L1NE(0UTH,1); 

PUT(OUTH,"Radiative Cooling Constant when t = 0.0"); 

SET_COL(OUTH,55); 

PUT(OUTH,CONST,FORE = >3,AFT= >4,EXP= >0); 

NEW_LINE(OUTH,l); 

NEW_LINE(1); 

PUT("Operating Temperature"); 

SET_COL(50); 

PUT7oPERATING_TEMPERATURE,FORE= >7,AFT= >2,EXP= >0); 

PUT(" kelvin"); 
new_LINE(2); 

PUT(OUTH,"Operating Temperature Satellite"); 

SET_COL(OUTH,55); 

PUT(0UTH,0PERAT1F'=_TEMPERATURE.F0RE= >5.AFT= >2,EXP= >0); 

PUT(OUTH," kelvin"): 

NEW_LINE(OUTH,l): 

TIME_HEATING:= ((2.0*(ARCTANH(OPERATING_TEMPERATURE/EQU1L1BRIUM_TEMPERATURE) 

-ARCTAN(OPERATING_TEMPERATURE/EQUILIBRIUM_TEMPERATURE)))-CONST) 

■n'IME_CONSTANT_MlNUTES; 

NEW_L1NE(2); 

PUT("Radiative heating after Eclipse "); 

SET_COL(50); 

PUT(TIME_HEATING,FORE= >7,AFT= >2,EXP= >0); 

PUT(" minutes"); 

NEW_LINE(2); 

PUT(OUTH,"Time Constant"); 

SET_COL(OUTH.55); 

PUT(OUTH,TIME_CONSTANT_MINUTES,FORE= >5.AFT= >2,EXP= >0); 


206 






PUT{OUTH,' minutes"); 
NEW_LINE(OUTH,l): 


PUT(OUTH,’Time Radiative heating after Eclipse"); 
SET_COL(OUTH,55); 

PUT(OUTH,TIME_HEATING,FORE= >5,AFT= >2,EXP= >0); 
PUT(OUTH," minutes"); 

NEW_LINE(OUTH,l); 

STOP; 


end WARM_UP; 


begin 


CREATE(OUTH,NAME= > "THERMAL.DAT"); 

PRINT_HEADER; 

DUAL_SPIN (DRUM_SPINNER); 

OPERATING DATA (BATTERY_LOAD, 

DRUM_SPINNER. 

RADIATOR_SPECIFIC_HEAT, 

RADIATOR_EMnTANCE_EOL, 

MASSRADIATORPLUSEQUIPMENT, 

EFFICIENCY, 

NUMBER_THERMAL_EM1TTING_FACES, 

PAYLOAD_POWER, 

ECLIPSETIME); 

HEAT (BATTERY_LOAD, 

DRUM_SPINNER, 

RADIATOR_AREA, 

PAYLOAD_POWER. 
TEMPERATUREAFTEREQUINOX, 
THERM AL_DISSIPATION, 
ECLIPSE_TIME); 

WARM_UP (THERMALDISSIPATION, 

RADIAT0R_SPECIF1C_HEAT, 

RADIATOR EMITTANCE EOL, 
RADIATOR_AREA. 

MASS_RADIATOR_PLUS_EQUIPMENT. 

EFFICIENCY, 


207 











TEMPERATURE_AFTER_EQUINOX, 

NUiMBER_THERMAL_EMlTTlNG_FACES); 


CLOSE(OUTH); 


STOP; 

NEW_LINE(2); 

PUT_LINE("DATA FOR THIS DESIGN RUN IS LOCATED IN THE FOLLOWING FILE"); 
NEW_LINE(1); 

PUT_LINE(">>>>>>>>>>>>>>>>>>> THERMAL.DAT "); 
NEW_LINE(2); 

PUT_LINE("TO KEEP DATA FROM BEING ERASED ON NEXT RUN"); 

PUT_LINE("USE DOS COMMAND REN (RENAME) "); 

NEW_LINE(1); 

PUT_LINE("EXAMPLE - REN THERMAL.DAT TH2RMAL.INI"); 

PUT_LINE("The .INI could be your initials'); 

NEW_LINE(5); 


end THERMAL; 


208 







D 


ARRAY THERMAL CONTROL 


— Title 

" Author 

— Date 

— Revised 

— Compiler 

— Description 


: Thermal Characteristics 
: David Lashbrook 
: 15 February 1992 
: 30 March 1992 
: GRENADA EXT 

: This procedure determines the thermal characteristics for 
solar arrays in geosynchronous orbits. 


with TEXTJO, GETDATA, GENERIC ELEMENTARY FUNCTIONS, VIDEO; 
use TEXTJO , GETDATA ; 


procedure ARRAY_THERMAL_CONTROL is 


package FLOAT_INOUT is new FLOAT_IO(FLOAT); 
use FLOAT JNOUT; 

package INTEGER JNOUT is new INTEGER JO(INTEGER); 
use INTEGER JNOUT; 

package BOOLEAN JNOUT is new ENUMERATION JO(BOOLEAN); 
use BOOLEAN JNOUT; 

package GEFJNOUT is new GENERlC_ELEMENTARY_FUNCTIONS(FLOAT); 
use GEF_INOUT; 


OKAY : BOOLEAN ;= iRUE; 

DRUM_SPINNER : BOOLEAN ;= I ALSE; 


Y. 

y. 

N, 

n, 

TAKE, 

CHAR : CHARACTER ; 


i^cCISION, 

J ; INTEGER ; 

PI ; FLOAT := 3.14159; 

X ;FLOAT ; 

OUTATC :FILE_TYPE; 


procedure PRINT HEADER is 


209 



begin 

VIDEO.CLEAR_SCREEN;SET_LINE(l); 

NEW LINE(2); 

SET_COL(10); 

PUT_LINE("This program walks through a ARRAY THERMAL Characteristics "); 

SET_COL(10): 

PUT_LINE("for a solar powered geosynchronous satellite.”); 

SET_COL(10); 

PUT_LINE("A11 pertinent data will be saved to a file called ARRAYTC.DAT'); 

NEWLINE; 
end PRINT HEADER; 

procedure DUAL SPIN (DRUM SPINNER : in out BOOLEAN) is 
begin 

SET_COL(10); 

PUT_LINE("Is your spacecraft Spin Stabilized “); 

SET_COL(15); 

GET_CHARACTER(char); 
if CHAR = ’Y’ or CHAR = ’y’ then 
DRUM_SPINNER; =TRUE; 
if DRUM_SPINNER = TRUE then 

VIDEO.CLEAR_SCREEN;SET_LINE(l); 

SET_COL(10); 

PUT_LINE('Satellite is Spin Stabilized"); 

NEW_LINE(OUTATC,l); 

PUT_LINE(OUTATC, "Satellite is Spin Stabilized"); 

PUT LINEfOUTATC,’***********’'"*"''***’'"''*********"); 

NE\V_LINE(OUTATC, 1); 

NEW_L1NE(2); 

PUT LiNEf"****’*'*****************''"'"*'***’'"*"'"********’''’''***’''***********’'"''***’'"''***") 
end if; 
else 

V1DE0.CLEAR_SCREEN;SET_LINE(1); 

SET_COL(10); 

PUT_LINE("Satellite is Three Axis Stabilized"); 

NEW_LINE(OUTATC. 1); 

PUT_L1NE(0UTATC,"Satellite is Three Axis Stabilized"); 

PUT LINEfOUTATC,"***************************'*******"); 

NEW LINE(OUTATC,l); 

NEW'lINE(2); 

PUT line^"******************************************************************"); 
end if; 

end DUAL_SPIN; 


procedure SOLAR_ARRAY_TEMPERATURE (DRUM_SP1NNER ; in out BOOLEAN) is 

STEFAN_BOLTZMANN : FLOAT := 5.67E-08; 

SOLAR_ASPECT_COEFFICIENT_SOLSTICE : FLOAT := 23.5; 


210 




SOLAR_ASPECT_COEFFICIENT_EQUINOX : FLOAT : = 0.0; 
CELL_EMITTANCE_FRONT ; FLOAT ;= 0.8; 

CELL_EMnTANCE_BACK : FLOAT := 0.7; 

SOLAR_INTENSITY_WINTER_SOLSTICE : FLOAT := 1397.0; - W/m"2 
SOLAR_INTENSITY_SUMMER_SOLSTICE : FLOAT := 1311.0; - W/m*2 

SOLAR_INTENSITY_VERNAL_EQUINOX : FLOAT := 1362.0; - W/m"2 

SOLAR_INTENSITY_AUTUMNAL_EQUINOX : FLOAT := 1345.0; - W/m"2 
CELL_EFFICIENCY : FLOAT ;= 0.14; 

PACKING_FACTOR : FLOAT ;= 0.95; 

AVG_SOLAR_CELL_ABSORBTANCE : FLOAT := 0.8; 

WINTER_SOLSTICE_OPERATING_TEMPERATURE, 

SUMMER_SOLSTICE_OPERATING_TEMPERATURE, 

VERNALEQUINOXOPERATINGTEMPERATURE, 

AUTUMNAL_EQUINOX_OPERATING_TEMPERATURE. 

EFFECTIVE_SOLAR_CELL_ABSORBTANCE, 

FRONT_ARRAY_AREA, 

BACK ARRAY AREA :FLOAT ; 


CHANGE_SOLAR : INTEGER ; 

begin 

PUT_LlNE("This portion of the design uses the following values as listed below:'); 
NEW_LINE(1); 

PUT_LINE("_ 

NEW_LINE(I); 

PUT("Solstice Angle'); 

SET COL(55); 

PUT‘(S0LAR_ASPECT_C0EFFICIENT_S0LSTICE,F0RE= >4.AFT= >2,EXP= >0); 
PUT(' degrees'); 

NEW_LINE(1); 

PUT("Equinox Angle"); 

SET_COL(55); 

PUT(S0LAR_ASPECT_C0EFFIC1ENT_EQUIN0X,F0RE= >4,AFT= >2,EXP= >0); 
PUTC degrees'); 

NEWLINEd); 

PUT('Cell Emittance Front'); 

SET_COL(55); 

PUT(CELL_EMnTANCE_FRONT,FORE= >3,AFT= >3,EXP= >0); 

NEW_LINE(1); 

PUT('Cell Emittance Back'); 

SET_COL(55); 

PUT(CELL_EMITTANCE_BACK,FORE= >3,AFT= >3,EXP= >0); 

NEWLINEd); 

PUT('Solar Intensity Winter Solstice'); 

SET_COL(55); 

211 



PUT(SOLAR_INTENSITY_WlNTER_SOLSTlCE,FORE= >4,AFT= >2,EXP= >0); 
PUT(" W/m*2"); 

NEW_LINE(1); 

PUT("Solar Intensity Summer Solstice’); 

SET_COL(55); 

PUT(SOLAR_lNTENSlTY_SUMMER_SOLSTICE,FORE= >4,AFT= >2,EXP= >0); 
PUT(" W/m"2"); 

NEW_LINE(1); 

PUT("Solar Intensity Vernal Equinox’); 

SET_COL(55); 

PUT(SOLAR_INTENSITY_VERNAL_EQUINOX,FORE= >4,AFT= >2,EXP= >0); 
PUT(’ W/m"2’); 

NEW_LINE(1); 

PUT("Solar Intensity Autumnal Equinox’); 

SET_COL(55); 

PUT(SOLAR_INTENSlTY_AUTUMNAL_EQUlNOX,FORE= >4,AFT= >2,EXP= >0); 
PUT(’ W/m"2’); 

NEW_LINE(1); 

PUT("Cell Efficiency"); 

SET_COL(55); 

PUT(CELL_EFFICIENCY,FORE= >2.AFT= >4.EXP= >0); 

NEW_LINE(1); 

PUT(’Pacldng Factor"); 

SET_COL(55); 

PUT(PACKING_FACTOR,FORE= >2,AFT= >4.EXP= >0); 

NEWLINEd); 

PUT("Average Solar Cell Absorbtance"); 

SET_COL(55); 

PUT(AVG_SOLAR_CELL_ABSORBTANCE.FORE= >2,AFT= >4,EXP= >0); 
NEW_LINE(2); 

PUT_LINE(’If you desire to CHANGE any of the listed values please enter "); 
PUT_LINE("a ‘y’ for YES otherwise enter a ‘n’ for NO'); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR := N; 

VIDEO. CLEAR_SCREEN; 

< <VALUE>> 

PUT_LINE('Please enter the number value to the right of the value you "); 
PUT_LINE('wish to CHANGE. (DEFAULT VALUES ARE IN PARENTHESIS)") 

newline; 

PUT_LINE("Cell emiftance Back is not used for spin stabilized spacecraft calculations’); 

put_LlNE("..."); 

PUT_LlNE("SOLAR_ASPECT_COEFFlClENT_SOLSTlCE [1]"); 


212 





PUT_LINE("SOLAR_ASPECT_COEFFICIENT_EQUINOX 12]’); 

PUT_LINE( "CELL_EM ITTANCE_FRONT [ 3 ] ’); 

PUT_LINE(’CELL_EM1TTANCE_BACK [4]"); 

PUT_LINE("S0LAR_INTENS1TY_WINTER_S0LST1CE ]5]"); 

PUT_LINE( ’ SOLARJNTENSITYSUM M ERSOLSTICE [6] ’); 

PUT_LINE('SOLAR_INTENSITY_VERNAL_EQUINOX [7]"); 

PUT_LINE("SOLAR_INTENSITY_AUTUMNAL_EQUlNOX I8]“); 

PUT_L1NE(’CELL_EFFICIENCY f9j’); 

PUT_LINE('PACKING_FACTOR (10]'); 

PUT_LINE('AVG_SOLAR_CELL_ABSORBTANCE ] 11]’); 

GETJNTEGER{CHANGE_SOLAR); 

VIDEO.CLEAR_SCREEN; 

case CHANGE_SOLAR is 
when 1 = > 

VIDEO.CLE AR_SCREEN; 

PUT(’Please enter a value for SOLAR ASPECT COEFFICIENT SOLSTICE"); 
NEW_LINE(3); 

GET_DATA(SOLAR_ASPECT_COEFFIClENT_SOLSTlCE); 

NEW_LINE(1); 

PUT("Solstice Angle"); 

SET_COL(60); 

PUT(SOLAR_ASPECT_COEFFICIENT_SOLSTlCE,FORE= >4,AFT= >2,EXP= >0); 
PUT(" degrees'); 

NEW_LINE(3); 

when 2 = > 

VIDEO.CLEAR_SCREEN; 

PUT("Please enter a value for S0LAR_ASPECT_C0EFFIC1ENT_EQU1N0X’); 
NEW_LINE(3); 

GET_DATA(SOLAR_ASPECT_COEFFICIENT_EQUlNOX); 

NEW_L1NE(1); 

PUTf'Equinox Angle"); 

SET_COL(55); 

PUT(SOLAR_ASPECT_COEFFlCIENT_EQUINOX,FORE= >4,AFT= >2,EXP= >0); 
PUT(" degrees'); 

NEW_LINE(3); 

when 3 = > 

VIDEO.CLEARSCREEN; 

PUT("Piease enter a value for CELL_EMITTANCE_FROi\T’); 

NEW_LINE(3); 

GET_DATA(CELL_EMlTTANCE_FRONT); 

NEWLINEd); 

PUTf'Cell Emittance Front "); 

SET_COL(55); 

PUT(CELL_EMnTANCE_FRONT,FORE= >4.AFT= >2,EXP= >0); 

NEW_LINE(3); 
when 4 = > 

VIDEO.CLEAR_SCREEN; 

NEW_LINE(3); 

PUTf'Please enter a value for CELL EMITTANCE BACK"); 


213 






GET_DATA(CELL_EMITTANCE_BACK); 

NEW_LINE(1); 

PUTCCell Emittance Back "); 

SET_COL(55); 

PUT(CELL_EMnTANCE_BACK,FORE= >4,AFr= >2,EXP= >0); 

NEW_LINE(3); 
when 5 = > 

VIDEO.CLEAR_SCREEN; 

PUT(’Please enter a value for SOLARJNTENSITY^INTER SOLSTICE'); 
NEW_LINE(3); 

GET_DATA(SOLAR_INTENSITY_WINTER_SOLSTICE); 

NEW_ULT;i); 

PUT("Solar Intensity Winter Solstice"); 

SET_COL(55); 

PUT(SOLAR_lNTENSITY_WINTER_SOLSTlCE,FORE= >4,AFT= >2,EXP= >0); 
pure W/m*2*); 

NEW_LINE(3); 
when 6 = > 

VIDEO. CLEAR_SCREEN; 

PUTCPlease enter a value for SOLARJNTENSITY_SUMMER SOLSTICE’); 
NEW_LINE(3); 

GET_DATA(SOLAR_lNTENSlTY_SUMMER_SOLSTlCE); 

NEW_LINE(1); 

PUT(’Solar Intensity Summer Solstice"); 

SET_COL(55); 

PUT(SOLAR_INTENSITY_SUMMER_SOLSTlCE.FORE= >4.AFT= >2,EXP= >0). 
PUT(" W/m*2"); 

NEW_LINE(3); 


when 7 = > 


VIDEO. CLEAR_SCREEN; 

PUTCPlease enter a value for S0LARJNTENS1TY_VERNAL_EQU1N0X"); 
NEW_LINE(3); 

GET_DATA(S0LAR_INTENSITY_VERNAL_EQU1N0X); 

NEW_LINE(1); 

PUT("Solar Intensity Vernal Equinox’); 

SET_COL(55); 

PUT(SOLAR_INTENSlTY_VERNAL_EQUlNOX.FORE= >4.AFT= >2.EXP= >0); 
PUT(" W/m*2"); 

NEW LINE{3); 
when 8 = > 


VIDEO.CLEAR_SCREEN; 

PUTCPlease enter a value for SOLAR_INTENSlTY_AUTUMNAL_EQUlNOX’); 
NEW_LINE(3); 

GET_DATA(S0LAR_INTENSITY_AUTUMNAL_EQU1N0X); 

NEW_LINE(1); 

PUT(’Solar Intensity Autumnal Equinox’); 

SET_COL(55); 

PUT(SOLAR_INTENSITY_AUTUMNAL_EQUINOX,FORE= >4,AFT= > 2,EXP= >0); 
PUT{’ W/m‘2’); 

NEW_LINE(3); 
when 9 = > 


214 








VIDEO. CLEAR_SCREEN; 

PUT("Please enter a value for CELL_EFF1C1ENCY"); 
NEW_LINE(3); 

GET_DATA(CELL_EFF1CIENCY); 

NEW_LINE(1); 

PUT("Cell Efficiency’); 

SET_COL(55); 

PUT(CELL EFFICIENCY,FORE = >2,AFT= >4,EXP= >0); 
NEW_LINE(3); 

when 10 = > 

VIDEO. CLEAR_SCREEN; 

PUT(’Please enter a value for PACKING FACTOR’); 
NEW_LINE(3); 

GET_D AT A(PACKING_F ACTOR); 

NEWLINEd); 

PUTf’Packing Factor’); 

SET_COL(55); 

PUT{PACKlNG_FACTOR,FORE= >2,AFT= >4,EXP= >0); 
NEW LINE(3); 


when 11 = > 

VIDEO.CLEARSCREEN; 

PUT(’Please enter a value for AVG SOLAR CELL ABSORBTANCE'); 
NEW_LINE(3); 

GET_DATA(AVG_SOLAR_CELL_ABSORBTANCE); 

NEW_LINE(1); 

PUT(’Average Solar Cell Absorbtance’); 

SET_COL(55); 

PUT(AVG_SOLAR_CELL ABSORBTANCE.FORE= >2,AFT= >4,EXP= >0); 
NEW L1NE(3); 


when others = > 

VIDEO.CLEARSCREEN; 

PUT_LINE(’Thank You for your input ’); 
NEW_LINE(4); 
end case; 


CHAP := N; 

NEW_LINE(4); 

PUT_LINE(’lf you wish to change another value please enter a ‘y’ for YES’); 
PUT_LINE(’otherwise enter a ‘n’ for NO ’); 

GET_CHARACTER(CHAR); 
if CHAR = ’Y’ or CHAR = ’y’ then 
CHAR := N; 

VIDEO.CLEAR_SCREEN; 
goto VALUE; 

else 

VIDEO. CLE AR_SCREEN; 

PUT_LINE(’UNDERSTAND NO MORE CHANGES’); 

NEW_L1NE(3); 
end if; 


215 






else 


VIDEO. CLEAR_SCREEN; 

PUT_LINE(*UNDERSTAND DEFAULT VALUES WILL BE USED"); 
NEW_LINE(3); 
end if; 


NEW_LINE(OUTATC, 1); 

PUT(OUTATC,’Solstice Angle’); 

SET_C0L(0UTATC,55); 

PUT(OUTATC,SOLAR_ASPECT_COEFFICIENT_SOLSTICE,FORE= >4,AFT= >2,EXP= >0); 
PUT(OUTATC,’ degrees’); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC,’Equinox Angle’); 

SET_COL(OUTATC,55); 

PUT(OUTATC,SOLAR_ASPECT_COEFFlCIENT_EQUINOX,FORE= >4,AFT= >2,EXP= >0); 
PUT(OUTATC,’ degrees’); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC,’Cell Emittance Front"); 

SET_COL(OUTATC,55); 

PUT(OUTATC,CELL_EMITTANCE_FRONT,FORE= >3,AFT= >3,EXP= >0); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC,’Cell Emittance Back’); 

SET_COL(OUTATC,55); 

PUT(OUTATC,CELL_EMITTANCE_BACK,FORE= >3.AFT= >3,EXP= >0); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC,"Solar Intensity Winter Solstice’); 

SET_COL(OUTATC,55); 

PUT(OUTATC,SOLAR 1NTENS1TY_WINTER_S0LST1CE.F0RE= >4,AFT= >2.EXP= >0); 
PUT(OUTATC," W/m*2’); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC,"Solar Intensity Summer Solstice’); 

SET_COL(OUTATC,55); 

PUT(OUTATC,SOLAR_INTENSITY_SUMMER_SOLSTICE,FORE= >4.AFT= >2,EXP= >0); 
PUTfOUTATC," W/m"2’); 

NEW_LINE(OUTATC.2); 

PUT(OUTATC,"Solar Intensity Vernal Equinox’); 

SET_COL(OUTATC,55); 

PUT(OUTATC,SOLAR_INTENSITY_VERNAL_EQUlNOX,FORE= >4,AFT= >2,EXP= >0); 
PUT(OUTATC,’ W/m*2’); 

NEW_LINE(OUTATC.2); 

PUT(OUTATC,’Solar Intensity Autumnal Equinox’); 

SET_COL(OUTATC,55); 

PUT(OUTATC,SOLAR_INTENSITY_AUTUMNAL_EQUlNOX.FORE= >4,AFT= > 2.EXP= >0); 
PUT(OUTATC,’ W/m*2’); 


216 








NEW_LINE(0UTATC,2); 

PUT(OUTATC,’Cell Efficiency"); 

SET_COL(OUTATC,55); 

PUT(OUTATC,CELL_EFFICIENCY.FORE= >2,AFT= >4,EXP= >0); 

NEW_LINE{OUTATC.2); 

PUT(OUTATC, "Packing Factor"); 

SET_COL(OUTATC,55); 

PUT(OUTATC,PACKING_FACTOR,FORE= >2.AFT= >4,EXP= >0); 
NEW_LINE(OUTATC,2); 

PUT(OUTATC," Average Solar Cell Absorbtance"); 

SET_COL(OUTATC,55); 

PUT(OUTATC,AVG_SOLAR_CELL_ ABSORB! ANCE,FORE= >2,AFT= >4,EXP= >0); 
VlDEO.CLEAR_SCREEN; 

EFFECTIVE_SOLAR_CELL_ABSORBTANCE; = AVG_SOLAR_CELL_ ABSORBTANCE 

-PACKlNG_FACTOR*CELL_EFFIClENCY; 

NEW_LINE(2); 

PUT("Effective Solar Cell Absorbtance is "); 

NEW_LINE(3); 

SET_COL(55); 

PUT(EFFECTlVE_SOLAR_CELL_ ABSORB! ANCE,FORE= >2,AF!= >4,EXP= >0); 


NEW_LINE(OU!A!C,2); 

PLJ!(OU!A!C, "Effective Solar Cell Absorbtance is "); 

SE!_COL(OU!A!C,55); 

PU!(OU! A!C,EFFEC!1VE_S0LAR_CELL_ ABSORBTANCE. FORE = >2.AF!= >4.EXP= >0); 


if DRUM SPINNER = FALSE then 
NEW_LINE(4); 

PU!("Please enter the FRONT solar cell array area in meters squared "); 
NEW_LINE(3); 

GET_DATA(FRONT_ARRAY_AREA); 

NEW_UNE(3); 

PUT("Front Array Area is "); 
set_col(55); 

PUT(FRONT_ARRAY_AREA,FORE= >3,AFT= >3,EXP= >0); 
PUT(" m'2"); 

NEW_L1NE(4); 

PUT("Please enter the BACK solar cell array area in meters squared "); 
NEW_LINE(3); 

GET_DATA(BACK_ARRAY_AREA); 

VlDEO.CLEAR_SCREEN; 

NEW_L1NE(3); 

PUT('Front Array Area is "); 


217 





set_col(55); 

PUT(FRONT_ARRAY_AREA,FORE= >3,AFT= >3,EXP= >0); 
PUT(" m‘2"): 

NEW_LINE(2); 

PUT("Back Array Area is '); 
set_col(55); 

PUT(BACK_ARRAY_AREA,FORE= >3,AFT= >3,EXP= >0); 
PUT{" in*2"); 

NEW_LINE(5); 

STOP; 


WlNTER_SOLSTICE_OPERATING_TEMPERATURE;=((EFFECTlVE_SOLAR_CELL_ ABSORB! ANCE 
■'■FRONT_ARRAY_AREA 
*SOLARJNTENSITY_WINTER_SOLSTICE 
*COS(SOLAR_ASPECT_COEFFIClENT_SOLSTiCE*PI/180.0)) 

/((CELL_EMITTANCE_FRONT*FRONT_ARRAY_AREA + CELL_EMITTANCE BACK 
*BACK_ARRAY_AREA)*STEFAN_BOLTZMANN))**0.25: 

NEW_LINE(2): 

PUT("Winter Solstice Operating Temperature is '); 

SET_COL(55); 

PUT(WINTER_SOLSTlCE OPERATING TEMPERATURE,FORE= >2,AFT= >4.EXP= >0); 

PUTC deg kelvin’); 

SUMMER_SOLSTICE OPERATING TEMPERATURE; =((EFFECTIVE_SOLAR CELL_ABSORBTANCE 
*FRONT_ARRAY_^A 
*SOLAR_INTENSITY_SUMMER SOLSTICE 

*COS(SOLAR_ASPECT_COEFFICIENT_SOLSTICE*P1/180.0)) - 0.0 degrees = 1.0 

/((CELL_EMITTANCE_FRONT*FRONT_ARRAY_AREA + CELL_EMITTANCE_BACK 
*BACK_ARRAY_AREA)*STEFAN_BOLTZMANN))*'^.25; 

NEW_L1NE(2); 

PUT('Summer Solstice Operating Temperature is ’); 

SET_COL(55); 

PUT(SUMMER_SOLSTlCE_OPERATlNG_TEMPERATURE.FORE= >2,AFT= >4.EXP= >0); 

PUT(" deg kelvin'); 

VERNAL_EQUlNOX_OPERATING_TEMPERATURE:=((EFFECTlVE_SOLAR_CELL ABSORB!ANCE 
■*'FRONT_ARRAY_AREA 
*SOLAR_1NTENS1TY_VERNAL_EOUINOX 

*COS(SOLAR_ASPECT_COEFF1CIENT_EQUINOX*P1/180.0))-0.0 degrees = 1.0 

/((CELL_EMITTANCE_FRONT*FRONT_ARRAY_AREA + CELL_EMITTANCE_BACK 
*BACK_ARRAY_AREA)*STEFAN_BOLTZMANN))**0.25; 

NEW_LINE(2); 

PUTv'Vemal Equinox Operating Temperature is '); 

SET_COL(55); 

PUT(VERNAL_EQUINOX OPERATING TEMPERATURE,FORE= >2,AFT= >4,EXP= >0); 


218 



PUT(" deg kelvin"); 


AUTUMNAL_EQUINOX_OPERATING_TEMPERATURE:=((EFFECTIVE_SOLAR_CELL_ ABSORB! ANC 
E 

•FRONT_ARRAY_AREA 
■"SOLARJNTENSITY AUTUMNAL_EQUlNOX 

*COS(SOLAR_ASPECT_COEFFICIENT_EQUINOX*PI/180.0))-0.0 degrees = 1.0 

/((CELL_EMITTANCE_FRONT*FRONT_ARRA YAREA + CELL_EMITTANCE_BACK 
*BACK_ARRAY_AREA)*STEFAN_BOLTZMANN))*’K).25; 

NEW_L1NE(2); 

PUT("Autumnal Equinox Operating Temperature is “); 

SET_COL(55); 

PUT(AUTUMNAL_EQUINOX_OPERATING_TEMPERATURE,FORE= >2,AFT= >4,EXP= >0); 

PUT(" deg kelvin"): 

NEW_LINE(4); 


else 

- AREA FOR A SPIN STABILIZED SPACECRAFT 
NEW_LINE(2); 

PUT("Please enter the FRONT solar cell array area in meters squared "); 
NEW_LINE(4); 

GET_DATA(FRONT ARRAY_AREA); 

NEW_LINE(3); 

PUT('Front Array Area is ”); 
set_col(55); 

PUT(FRONT_ARRAY_AREA,FORE= >3,AFT= >3,EXP= >0); 
PUT(" m*2’); 

VIDEO.CLEAR_SCREEN; 


WINTER_SOLSTICE_OPERATING_TEMPERATURE: = ((EFFECTlVE_SOLAR_CELL_ABSORBTANCE 
*SOLAR_INTENSITY_WINTER_SOLSTlCE 
*COS(SOLAR_ASPECT_COEFFICIENT_SOLSTICE*PI/180.0)) 
/(CELL_EMITTANCE_FRONT*P1*STEFAN_BOLTZMANN))**0.25; 

NEW_LINE(2); 

PUT("Winter Solstice Operating Temperature is 
SET_COL(55); 

PUT(WINTER_SOLSTlCE_OPERATING_TEMPERATURE,FORE= >2,AFT= >4,EXP= >0); 

PUT(" deg kelvin"); 

SUMMER_SOLSTICE_OPERATING_TEMPERATURE: = ((EFFECTlVE SOLAR CELL ABSORFTANCE 
■^SOLARJNTENSITY SUMMER SOLSTICE 

*COS(SOLAR_ASPECT_COEFF1CIENT_SOLST1CE*P1/I80.0))-O.0degree.s = 1.0 
/(CELL_EMnTANCE_FRONT*PI*STEFAN_BOLTZMANN))**0.25; 

NEW_LINE(2); 


219 








r 


PUT("Summer Solstice Operating Temperature is '); 

SET_COL(55); 

PUT(SUMMER_SOLSTICE_OPERATlNG_TEMPERATURE,FORE= >2.AFT= >4,EXP= >0); 

PUT(" deg kelvin’); 

VERNAL_£QUINOX_OPERATING_TEMPERATURE; =((EFFECTIVE_SOLAR_CELL_ ABSORB! ANCE 
*SOLAR_INTENSITY_VERNAL_EQUINOX 

■'■COS(SOLAR_ASPECT_COEFFICIENT_EQU1NOX*PI/180.0))~ 0.0 degrees = 1.0 
/(CELL_EMnTANCE_FRONT*PI*STEFAN_BOLTZMANN))**0.25; 

NEW_LINE(2); 

PUT("Vemal Equinox Operating Temperature is ’); 

SET_COL(55); 

PUT(VERNAL_EQUINOX_OPERATING_TEMPERATURE,FORE= >2,AFT= >4,EXP= >0); 

PUTC deg kelvin"); 


AUTUMNAL_EQUINOX_OPERATING_TEMPERATURE:=((EFFECTIVE_SOLAR_CELL_ ABSORB! ANC 
E 

*SOLAR_INTENSITY_AUTUMNAL_EQUINOX 

■*‘COS(SOLAR_ASPECT_COEFFICIENT_EQU1NOX*P1/180.0)) - 0.0 degrees = 1.0 
/(CELL_EMITTANCE_FRONT*PI*STEFAN_BOLTZMANN))**0.25; 

NEW_LINE(2); 

PUT("Autumnal Equinox Operating Temperature is "); 

SET_COL(55); 

PUT(AUTUMNAL_EQUINOX_OPERATING_TEMPERATURE,FORE= >2,AFT= >4,EXP= >0); 

PUT(" deg kelvin"); 

NEW_LINE(3); 


end if; 

NEW_LlNE(OUTATC,2); 

PUT(OUTATC, "Front Array Area is "); 
set_col(OUTATC,55); 

PUT(OUTATC,FRONT_ARRAY_AREA,FORE= >4,AFT= >2,EXP= >0); 

PUT(OUTATC," m*2"); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC,"Back Array Area is "); 
set_col(OUTATC,55); 

PUT(0UTATC,BACK_ARRAY_AREA,F0RE= >4,AFT= >2,EXP= >0); 

PUT(OUTATC," m*2"); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC, "Winter Solstice Operating Temperature is "); 

SET_COL(OUTATC,55); 

PUT(0UTATC,WINTER_S0LSTICE_0PERATING_TEMPERATURE,F0RE= >4,AFT= >2.EXP= >0); 
PUT(OUTATC," deg kelvin"); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC, "Summer Solstice Operating Temperature is "); 

SET_COL(OUTATC,55); 


220 











PUT(OUTATC,SUMMER_SOLSTICE_OPERATING_TEMPERATURE.FORE= >4,AFT= >2,EXP= >0); 
PUT(OUTATC," deg kelvin"); 


NEW_LINE(OUTATC,2); 

PUT(OUTATC,"Vernal Equinox Operating Temperature is ’); 

SET_COL(OUTATC,55); 

PUT(OUTATC,VERNAL_EQUINOX_OPERATlNG_TEMPERATURE,FORE= >4,AFT= >2,EXP= >0); 
PUT(OUTATC," deg kelvm"); 

NEW_LINE(OUTATC,2); 

PUT(OUTATC, "Autumnal Equinox Operating Temperature is "); 

SET_COL(OUTATC,55); 

PUT(OUTATC,AUTUMNAL_EQUINOX_OPERATlNG_TEMPERATURE,FORE= >4,AFT= > 2,EXP= >0} 

I 

PUT(OUTATC," deg kelvin"); 
end SOLAR_ARRAY_TEMPERATURE; 
begin 

CREATE(OUTATC,NAME= > "ARRAYTC.DAT"); 

PR1NT_HEADER: 

DUAL_SPIN (DRUM_SP1NNER); 

SOLAR_ARRAY_TEMPERATURE (DRUM_SPINNER); 

CLOSE(OUTATC); 


STOP; 

NEW_LINE(2); 

PUT_LINE("DATA FOR THIS DESIGN RUN IS LOCATED IN THE FOLLONVING FILE'); 
NEW_LINE(2); 

PUT_LINE(" ARRAYTC.DAT ’); 

NEW_LINE(2); 

PUT_LINE("TO KEEP DATA FROM BEING ERASED ON NEXT RUN’); 

PUT_LINE("USE DOS COMMAND REN (RENAME) "); 

NEW_LINE(2); 

PUT_LINE("EXAMPLE - REN ARRAYTC.DAT ARRAYTC.INI'); 

PUT_LINE("The .INI could be your initials"); 

end ARRAY_THERMAL_CONTROL; 




221 









E. 


UTILITY SUBPROGRAMS 


— Title 

— Author 

— Date 

" Revised 

— Compiler 
" Description 


: GET DATA 
: David Lashbrook 
: 15 February 1992 
. 30 March 1992 
: OPENADA EXT 

: Package gets data for floats, integers, characters 


package GETDATA is 
procedure GET_DATA(X : out FLOAT); 
procedure GET_INTEGER(I : out INTEGER); 
procedure STOP; 

procedure GET_CHARACTER(CHAR : out CHARACTER); 
end GETDATA; 


" Author 

— Date 

— Revised 

— Compiler 
" Description 


: David Lashbrook 
: 15 February 1992 
: 30 March 1992 
; OPENADA EXT 

: Package Body gets data for floats, integers, characters 


with TEXTJO, MATH_LIB, VIDEO; 
use TEXTJO ; 


package body GETDATA is 

package FLOATJNOUT is new FLOATJO(FLOAT); 
use FLOATJNOUT; 

package INTEGER JNOUT is new INTEGERJO{INTEGER); 
use INTEGER INOUT; 


X : FLOAT ; 


CHAR ; CHARACTER ; 


I 


; IITEGER ; 


procedure GET_DATA(X : out FLOAT) is 
begin 
loop 
begin 

SET_COL(10); 

PUT_LINE("Enter the value as a real number with a decimal point’); 
SET_COL(15); 

PUT_LINE(’(Depress CTRL^C to exit the program.)"); 




SET_COL(10); 

GET(X); 

SKIP_LINE; 

exit; 

exception 

when DATA ERROR = > 

SKIP_LINE; 

NEWLINE: 

SET_COL(10); 

PUT_LINE{'Error.. You must enter the value as a real"); 
SET_COL(10); 

PUT_LINE(’number with a decimal point, ie 123.4"); 
SET_COL(10); 

PUT_LINE(’Try again.'); 

NEWLINE; 
end; 
end loop; 
end GET_DATA; 

— Reads an integer input from the keyboard 

procedure GET_INTEGER(1 : out INTEGER) is 
begin 
loop 

begin 

NEW_LINE(1); 

SET_COL(10): 

PUT_LINE('Enter the value as an integer"); 

PUT_LINE('(Depress CTRL^C to exit the program.)"); 
SET_COL(10); 

GET(I); 

SKIP_LINE(1); 

exit; 

exception 

when DATA ERROR = > 

SKIP_LINE; 

NEWLINE; 

SET_COL(10); 

PUT_LINE("Error.. You must enter the value as a INTEGER"); 
SET_COL(10); 

PUT_LINE(' NO! decimal point, ie 123 ’); 

SET_COL(10); 

PUT_LINE(" Please try again."); 

NEW_LINE; 

end; 

end loop; 

end GETJNTEGER; 
procedure STOP is 


N : INTEGER ; 
begin 


223 






SET_COL(10); 

PUT("TO CONTINUE ENTER ANY INTEGER’); 
GET_INTEGER(N); 

VIDEO. CLEAR_SCREEN; 
end STOP; 


procedure GET_CHARACTER(CHAR : out CHARACTER) is 
begin 
loop 

begin 

SET_COL(10); 

PUT_LINE("Enter ’Y’ for YES or "); 
NEW_LINE(1); 

SET_COL(10); 

PUT_LINE(’ ’N’ for NO’); 

SET_COL(15); 

PUT_LINE("(Depress CTRL^C to exit the program.)"); 
SET_COL(10); 

GET(CHAR); 

SKIPLINE; 

exit; 


exception 

when DATA ERROR = > 

SKIP_LINE; 

NEW_LINE; 

SET_COL(10); 

PUT_LINE("Error.. You must enter character’); 
SET_COL(10); 

PUT_LINE("Try again.’); 

NEW_LINE; 

end; 

end loop; 

end GET_CHARACTER; 


end GETDATA; 


224 









INITIAL DISTRIBUTION LIST 


1. Defense Technical Information Center (2) 

Cameron Station 

Alexandria, Virginia 22304-6145 

2. Library, code 0142 (2) 

Naval Postgraduate School 

Monterey, California 93943-5002 

3. Professor Brij N. Agrawal 
Halligan Hall, Code AA/Ag 
Naval Postgraduate School 
Monterey, California 93943 

4. CDR. Randy Wight 
Bullard Hall, Code SP/Wt 
Naval Postgraduate School 
Monterey, California 93943 

5. LCDR David Lashbrook 
2801 Ringgold Court 
Woodbridge, Virginia 22192 

6. Aeronautics and Astronautics Department 
Halligan Hall, Code A A 

Naval Postgraduate School 
Monterey, California 93943 


* 


225 




