NASA-CR-200635 





THE CATHOLIC UNIVERSITY OF AMERICA 
DEPARTMENT OF ELECTRICAL ENGINEERING 


ANNUAL REPORT 
ON 


Study and Analysis of 

The Robot-Operated Material Processing Systems (ROMPS) 


Research Grant NAG 5-780 


Dr. Charles C. Nguyen 

Principal Investigator and Professor 

and 


Hui-I Liu 

Graduate Research Assistant 


Submitted to 


Mr. Lloyd Purves 
Code 712 
Technical Officer 

Goddard Space Flight Center (NASA) 
Greenbelt, Maryland 


March 1996 



REPORT SUMMARY 


This is a report presenting the progress of a research grant funded hy NASA for work performed 
from October 1, 1994 to September 31, 1995. The report deals with the development and 
investigation of potential use of software for data processing for the Robot Operated Material 
Processing System (ROMPS). It reports on the progress of data processing of calibration 
samples processed by ROMPS in space and on earth. First data were retrieved using the I/O 
software and manually processed using Microsoft Excel. Then the data retrieval and processing 
process was automated using a program written in C which is able to read the telemetry data 
and produce plots of time responses of sample temperatures and other desired variables. 
LabView was also employed to automatically retrieve and process the telemetry data. 


1. Introduction 

The Robot Operated Materials Processing System (ROMPS) has been developed at Goddard 
Space Flight Center (GSFC) under a flight project to investigate commercially promising in-space 
material processes and to design reflyable robot automated systems to be used in the above 
processes for low-cost operations[l], The ROMPS is currently scheduled for flight in 1994 as a 
Hitchhiker payload in a Get Away Special (GAS) can. An important component of the ROMPS 
is a three degree-of-freedom (DOF) robot which will be responsible for carrying out the required 
tasks of in-space processing of selected materials. The mechanical interfaces and the compliant 
device of the ROMPS robot were tested using a six degree of freedom (DOF) platform and the 
test results and recommendation can be found in [2], This report deals with the processing of the 
data of the critical ROMPS variables such as sample temperatures and actuator motor currents, 
etc. Progress on data processing using various software packages is reported. The report is 
organized as follows. Section 2 reports work on the application of MicroSoft Excel for data 
processing. Results of the development of a program written in LabView to retrieve and process 
the telemetry data are presented in Section 3. Section 4 presents the development of a program 
written in C language that is able to retrieve, process the telemetry data and produce hard copy of 
the time responses of selected variables. 


2. Data Processing Using Excel 

The flight telemetry were converted to a worksheet compatible format (such as Quattro Pro, 

Lotus or Microsoft Excel) using a developed I/O software program. The converted data were 
put on the ROMPS server that is located at Goddard Space Flight Center. From Catholic 
University, we used the ftp facility to retrieve the worsheet compatible format data from the 
ROMPS server. The retrieved data are then stored in an external drive (Drive G:) which has a 
storage capacity of about 3 giga bytes at a CUA personal computer. MicroSoft Excel was used 
to read the data and numerous plots were produced and described below. The plots produced in 
this section are obtained by manually entering the commands by the user into Excel. The task was 
very tedious and time-consuming. It is noted that the two flight furnaces are called Furnace A 



and B. The furnace that is currently located at ITE and will be sent Dr. Tim Anderson at 
University of Florida is called Furnace C. The plots as shown in Appendix A are organized as 
follows: 

Set 1- Flight Data: There are 14 plots obtained from the telemetry data. The plots illustrate the 
time responses (of temperatures from thermocouples Cl and C2 and the power profiles) of the 
first and second runs of Samples 44, 45, 62, 73, 74, 87, and 100. The temperatures are given in 
Celsius degrees and the power in centiwatts. The first run was performed on Furnace B and the 
second run on Furnace A. 

Set 2-GSFC Data: There are 13 plots obtained from the tests made at the GSFC Optical Site on 
May 12, 1995. All the tests were performed on Furnace B. Seven plots illustrate the time 
responses of the first run of Samples 44, 45, 62, 73, 74, 87, and 100 and six plots the seconds run 
of Samples 44, 45, 62, 73, 74, and 87. We do not know why the second run was not performed 
for Sample 100. 

Set 3-ITE Data: This set contains 26 plots obtained from the test data of study cases performed 
at ITE by Michelle and ITE personels. There are two subsets of plots. Subset 1 contains plots of 
time responses of the first and second runs for the Up Study Case in which the sample was facing 
up and the furnace was facing down. The samples that were tested in the Up Study Case are 44, 
45, 62, 73, 74 and 87 resulting in a total of 12 plots. Subset 2 contains plots of time responses of 
the first and second runs for the Down Study Case in which the sample was facing down and the 
furnace was facing up. The samples that were tested in the Down Study Case are 44, 45, 62, 73, 
74, 87 and 100 resulting in a total of 14 plots. 

The plots from the flight data and GSFC data are represented on the same scale on both vertical 
and horizontal axes for comparison purpose. The sample, the run number and furnace ED are 
given on each of the above plots. 

In addition to the "processed data" as shown in Appendix 1, it was requested from University of 
Florida that CUA process raw data and plot it together with the "processed" data. The results of 
this data processing are presented in Appendix 2 and are summarized as follows 
For each of the calibration sample 44, 45 and 62 we have: 

Plot I: Processed Data of Power, Sensor 1 (Flight), Sensor 1 (Goddard) are plotted with 
respect to time. Both power curves from Flight and Goddard are for the purpose of lining up the 
time. 

Plot 2: Processed Data of Power, Sensor 2 (Flight), Sensor 2 (Goddard) are plotted with 
respect to time. 

Plot 3: Raw Data of Power, Sensor 1 (Flight), Sensor 1 (Goddard) are plotted with 
respect to time. 

Plot 4: Raw data of Power, Sensor 2 (Flight), Sensor 2 (Goddard) are plotted with 
respect to time. 

3. Data Processing Using LabView 

Lab View was used to retrieve the telemetry data without using the developed I/O program and to 
produce hard copy of the variable time responses on a laser printer. The diagram and front panel 
of the LabView program are given in Appendix 3. 



4. Data Processing Using a C Program 

As mentioned in Section 1, the task of manually entering commands to produce hard copies of 
variable time responses was very tedious and time-consuming. This has motivated the 
developement of a software package that can automatically retrieve and process the data. As a 
consequence, a program was written in C to facilitate the data processing. It is able to retrieve 
the telemetry data without using the I/O program. The C program provides its user with a 
selection menu of multiple choices. The user can either select to process the data of one single 
sample or the data of a range of samples. The C program displays the time response on the 
computer screen and then produce the hard copy of the plot on a laser printer. A listing of the 
source codes of the C program is given in Appendix 4 and some typical plots of the variable time 
responses are given in Appendix 5. 


5. References 

1. Purves, L. "Robot Operated Materials Processing System (ROMPS), Critical 
Design Review (CDR)," NASA/Goddard Space Flight Center, 1992. 

2. Nguyen, C.C., "Testing of ROMPS Robot Mechanical Interfaces and Compliant 
Device," Semiannual Progress Report, NASA/Goddard Space Flight Center, Grant NAG 5-1415, 
March 1993. 

3. Goddard Space Flight Center/NASA , "Robot Operated Materials Processing 
System (ROMPS), Phase III, Flight Safety Data Package," GSFC/NASA, April 1994. 



Appendix 1 

Data Processing Using Microsoft Excel 

"Processed" Data Only 



Temp in degrees(C), Power in centrwatts 


Flight Data, Sample 44, First Run, new44-1.xls 





thin line=power; normal line=temp Cl; thick line=ternp C2 


i 



Temp in degrees(C), Power in centiwatts 


Flight Data, Sample 45, First Run, new45-1.xls 


foFNiU- (3 



thin line=power; normal line=temp Cl; thick line=temp C2 





Temp in degrees(C), Power in centiwatts 







Temp in degrees(C), Power in centiwatts 



186 



Temp in degrees(C), Power in centiwatts 



ZO dwai=9ii!i )\ d \ m } ! to dw9i=9U|i ibiujou !J9Mod=au|| u\i\\ 


spuooas u; aui;x 



g 4 


SIX J.-Z.9M9U ‘uny }Sjy 1 lq 9|dwBS 'b)bq wBiid 


Temp in degrees(C), Power in centiwatts 




223 ; 



Temp in degrees(C), Power in centiwatts 



Temp in degrees(C), Power in centiwatts 


Flight Data, Sample 44, Second Run, new44-2.xls 





thin line=power; normal line=temp Cl; thick line=temp C2 





Temp in degrees(C), Power in centiwatts 





196 



Temp in degrees(C), Power in centiwatts 


156 



Temp in degrees(C), Power in centiwatts 


Temp in degrees(C), Power in centiwatts 







Appendix 2 

Data Processing Using Microsoft Excel 
"Processed” Data and Raw Data 



Temp in degrees(c), Power in centiwatts 







Temp in degrees(c), Power in centiwatts 






Power 


Raw Data, Sample 44, 


2500 - 


2300 - 


2100 - 


1900 


1700 


1500 


1300 


1100 


900 


700 


500 



= 253 


8 

CM CM 

seconds 


t- co in 

o t- CM 
OOP) 


h- g> 
co 3 
co co 


8 


8 



h- O) T- 

8 $ 3 


; DATA (normal line = flight, thick line = Goddard) 


493 



Temp 






(pjeppoo = 9U|| *)L|6!ii = 8Uj| iblujou) VIVQ :(pJBppog = 9Uj| ibujjou ‘m&u = aui| min) ygMOd 



six - i.-gt?ojd ‘g aoeujnj 1 josuas '9P 9|dwBS ‘ejea passgoojd 


Temp in degrees(c), Power in centiwatts 





Temp in degrees(c), Power in centiwatts 


3 


3 


CO (N ■>— 


S O) (D N ffl tf) t 

ffipr-nn4in©h(D«o 
t-i-«ON(NCIWNNNN 


8 


co in -<t 

«- M O 

CO CO CO 


CO CN ■»— 

$ 8 8 


O O) 


Time in seconds 


POWER (thin line = flight, normal line = Goddard); DATA (normal line = flight, thick line = Goddard) 










Power 


Raw Data, Sample 45, Sensor2, Furnace B, samp45-2.xls 



POWER (thin line = flight, normal line = Goddard); DATA (normal line = flight, thick line - Goddard) 


Temp 



s|x j,-290Jd ‘g aoeujnj ‘uosuas ‘29 8 |dwes ‘bjbq passsoojd 


Temp in degrees(c), Power in centiwatts 




205 


< i 

(pjBppoo = au|| >p im \ ‘W6!U = au|| |buuo) VIVQ ‘(pJeppo0 = au|| iblujou ‘ig6!|j = auii uiip) *J3MOd 


spuooas in auuii 



S|x s-290Jd ‘a aoBUjn j ‘z Josuas ‘29 a|dwBS ‘bjbq passaooJd 


Temp in degrees(c), Power in centiwatts 


Temp 


i 



Power 


Power 


urnace B, samp62-2.xls 



Temp 



Appendix 3 

Data Processing Using LabView 

Diagram and Front Panel 



I0TEST3 

10/02/95 02:01 PM 





















Appendix 4 

Data Processing Using C Program 

Listing of Source Codes 



f 


t 


( 


/♦******+*****************************************************+**** 
This program use screen graphics only with menu 


This program is written by Catholic University to process data 
obtained from ROMPS Flight. In particular it will read the furnace 
voltage, furnace current, temperature from sensors 1 and 2 of cal 
samples. Identification Number (ID#) is assigned to cal samples to 
facilitate programming. A list of the cal sample ID is given below: 

Cal Sample ID# 

44 (First Run) 101 

44 (Second Run) 102 

45 (First Run) 103 

45 (Second Run) 104 

62 (First Run) 105 

62 (second Run) 106 

73 (First Run) 107 

73 (Second Run) 108 

74 (First Run) 109 

74 (Second Run) 1 1 0 

87 (First Run) 1 1 1 

87 (second Run) 1 12 

1 00 (First Run) 113 

1 00 (Second Run) 114 

***************************************♦**************♦*************/ 


#include <stdio.h> 
#include "dos.h" 
#include <stdlib.h> 
#include <bios.h> 



I 


I 


I 


#include <gbuild.h> 

#include <graphics.h> 

^include "d:\gb\examples\MyPath.h" 

char chi, fn[9],ss[80], sn[40], out; 

long int i, nfile, nrec, nchr, nrecc,fVolt, fcurr,power,samp; 

long int tstamp, tstart, tend, fstart, fend, typrec, subtyp, tcall, tcal2; 

unsigned char tlmblk[120]; 

FILE *fp = NULL, *fpo=NULL; 
long int nsamp, npoints; 

long int tstart_a[14]={37452, 59498, 38174, 69304, 34391, 55701, 32463, 

63965, 32886, 64362, 39048, 57132, 53865, 55141}; 
long int tend_a[14] ={37934, 59978, 38541, 69667, 34574, 55883, 32616, 

64118, 33078, 64515, 40219, 57495, 54142, 55413}; 
long int fstart_a[14]={28, 49, 28, 59, 25, 45, 23, 54, 23, 54, 29, 47, 43, 45}; 
long int fend_a[14]={30, 51, 31, 62, 27, 47, 25, 56, 25, 57, 32, 49, 46, 47}; 
int samp start, sampend, samp 1 ,samp2; 

/* Chart Variables */ 

static char Titlef] = "NASA ROMPS Flight Data"; 

static char SubTitle[] = "Sample 1"; 

static char TimeTxt[] = "Time in seconds"; 

static double Time[500]; 

static char PowerTxt[] = "Power / 10"; 

static double Power[500]; 

static char TemplTxt[] = "Temperature 1"; 

static double Tempi [500]; 

static char Temp2Txt[] = "Temperature 2"; 

static double Temp2[500]; 

static ChartDef ch; 

int ierr, drv=DETECT, mode; 

/* ********************* Change as necessary **************************** */ 
static char *MyPath = "d:\\gd45\\bgi"; I* path to BGI files */ 
static char *MyPrinter = "JLJ3R"; /* driver to use */ 



I 


( 


static int MyPort = PortLPTIB; /* I/O Port */ 
static int MyMode = LandMed; /* page format, any driver 

/* ** ************* **************************************** 


main(){ /* Starting main menu, OPEN CURLY BRACE 1 */ 
int printerdrv, printermode; 
unsigned printererr; 
menu: 

printfC'The available options are:\n"); 
printff” 1 . Processing a single sample\n"); 
printf( M 2. Processing multiple sampleVn"); 
printf("3. Cancel\n\n"); 

printfC'Please select your choice by entering 1 or 2: \n\n\n\n M ); 
chl=getch(); 

switch(chl){/* OPEN CURLY BRACE 2 *1 
case T: 
menul: 

printf("CAL SAMPLE ID#\n\n H ); 

printf( M 44 (First Run) l\n"); 

printf( M 44 (Second Run) 2\n"); 

printf("45 (First Run) 3\n"); 

printf("45 (Second Run) 4\n"); 

printf("62 (First Run) 5\n“); 

printf("62 (Second Run) 6\n"); 

printf("73 (First Run) 7\n M ); 

printf("73 (Second Run) 8\n"); 

printf("74 (First Run) 9\n M ); 

printfV'74 (Second Run) 10\n M ); 

printf("87 (First Run) 1 l\n"); 

printf( M 87 (Second Run) 12\n"); 

printfT 1 00 (First Run) 1 3\n”); 


s a 0 */ 

************* *j 



( 


( 


printf(" 100 (Second Run) 14\n\n"); 

printflf'PLEASE SELECT YOUR SAMPLE BY ENTERING ITS ID#\n\n\n\n"); 


scanf("%d M , &samp); 
if (samp<=14) { 
sampstart=samp; 
sampend=samp; 
goto start;} 
if(samp>14) { 

printfCYOU HAVE SELECTED AN INVALID SAMPLEW); 
printfC'PLEASE RETRYAn"); 
goto menu I;} 


case '2': 
menu2: 

printfTCAL SAMPLE 
printf( M 44 (First Run) 
printf("44 (Second Run) 
printf( H 45 (First Run) 
printfC'45 (Second Run) 
printf("62 (First Run) 
printf( ,, 62 (Second Run) 
printf("73 (First Run) 
printfl("73 (Second Run) 
printf("74 (First Run) 
printf( H 74 (Second Run) 
printf( , '87 (First Run) 
printf("87 (Second Run) 
printf("100 (First Run) 
printf(" 1 00 (Second Run) 


ID#\n\n"); 

l\n"); 

2\n H ); 

3\n"); 

4\n"); 

5\n M ); 

6\n"); 

7\n"); 

8\n"); 

9\n"); 

10\n M ); 

1 l\n"); 

1 2\n"); 
13\n"); 
14\n\n"); 


printf( H Please enter the starting sample: \n"); 
scanf(' , %d" > &sampl); 



( 


printf("Please enter the ending sample: \n"); 

scanf( M %d", &samp2); 

if(sampl>14 || samp2>14 || sampl>samp2) 

{printfl^' INVALID SAMPLE RANGE SELECTED, PLEASE RETRYNnW); 
goto menu2;} 
sampstart=sampl; 
sampend=samp2; 
goto start; 
case '3': 
goto end; 
default: 

printf("You have made an invalid choice\n"); 
goto menu; 

} /* CLOSE CURLY BRACE 2 V 
start: 

for(nsamp=sampstart;nsamp<=sampend;nsamp++) 

{npoints=0; 

tstart=tstart_a[nsamp- 1 ] ; 
tend =tend_a[nsamp-l]; 
fstart=fstart_a[nsamp- 1 ] ; 
fend =fend_a[n samp-1]; 


sprintfl[sn, "Processed for Sample %3ld",nsamp+100); 
nrecc=0; 


fpo =fopen(sn,"w" ); 

fputs("FILENAME RCNUM TIME FVOLT FCURR CALI CAL2 POWER SAMPNUMXn", 
fpo); 

for (nfile =fstart;nfile<=fend;nfile++) 

{ spri ntf(fh, " FLT% 5 Id " , nfil e+ 1 0000); 
if ((fp=fopen(fn,"rb")) !==NULL) 

{nrec = 0; 



( 


while (!feofl[fp)) 

{fread(tlmblk, 10,l,fp); 

nrec++;nrecc++; 

nchr=tlmblk[9]; 
fread( &thnblk[10],nchr,l,fp); 
nchr+^10; 
typrec=tlmblk[5]; 
subtyp=0; 

if (typrec = 1) subtyp=tlmblk[12]; 
if (subtyp = 1) 

{ 

tstamp = (864000*(tlmblk[ 1 4]/l 6)) + (86400*(tlmblk[14]%16)); 
tstamp+= ( 36000*(tlmblk[l5]/l6)) + ( 3600*(tlmblk[i5]%16)), 
tstamp+= ( 600*(tlmblk[16]/16)) + ( 60*(tlmblk[16]%16)); 
tstamp+= ( 10*(tlmblk[17]/16)) + ( (tlmblk[17]%16)); 

if (tstamp >= tstart && tstamp <= tend) 

{npoints++; 
fVolt = tlmblk[75]; 
fcurr = tlmblk[77]; 

Templ[npoints-l] = tlmblk[78]; 

Temp2[npoints-l] — tlmblk[79]; 

Power[npoints-l] = fvolt* fcurr/ 10; 

Time[npoints-l] = tstamp; 

/*sprintf(ss,"%8s%61d%7ld%71d%7ld%71d%71d%10ld%8s\n",fn,nrec, tstamp, fvolt, 
fcurr,tcall,tcal2, power, sn); *//* Assign the indicated variables to a string pointed by pointer ss */ 
/*fputs(ss,fpo);*/ /* Put the string pointed by ss to the file pointed by fpo (outsamp.dat) */ 
/*puts(ss); *//* Put the string pointed by ss to the screen */ 

} 

> 

} /* Go back to while(!feof(fp))*/ 
fclose(fp); 

} 



( 


/*else goto end;*/ /* When fp=NULL*/ 

}; /*Go back to inrease nfile by one, see the for loop for (nfile=fstart;nfile<=fend;nfile++)*/ 

for(i=0; i<npoints; i++) { 
printf("%f , %f\n", Power[i], Tempi [i]); 

} 

getch(); 

/***************************************/ 

/* Screen graphics: Based on SAMPLE10.C */ 
/*♦*************************************/ 

/* Initialize chart parameters to defaults */ 
gbInitChart(&ch, INIT ALL, COLOR_SCREEN); 

/* Set up chart input */ 
ch.ChartType = XYCH; 
ch.Npts = npoints; 
ch.Title[0] = Title; 

ch.Titlefl] = sn; 

ch.ChartOptions.Xaxis.ttl = TimeTxt; 
ch.Xseries.Data = Time; 
ch.Xseries.DataType = DOUBLEtp; 

ch.Yseries[0].Name = PowerTxt; 
ch. Yseries[0].Data = Power; 
ch.Yseries[0].DataType = DOUBLEtp; 

ch.Yseries[l].Name = TemplTxt; 
ch.Yseries[l].Data = Tempi; 
ch.Yseries[l].DataType = DOUBLEtp; 



1 


ch.Yseries[2].Name - Temp2Txt; 
ch.Yseries[2].Data = Temp2; 
ch.Yseries[2].DataType = DOUBLEtp; 

/* Enter Graphics Mode */ 
initgraph(&drv, &mode, bgipath); 
if (graphresult() != 0) exit(l); 

/* Draw the chart */ 
ierr = gbChart(&ch); 
if (lierr) bioskey(O); 

/* Return to Text Mode */ 
closegraphO; 

if (ierr) printfT%s\n",gbErrorMsg(ierr)); 


} 

end: fputs("stop - no more files found",fpo); 

fclose(fpo); 

puts('‘Plotting on Screen done!”); 
return 0; 


} 



Appendix 5 

Data Processing Using C Program 
Typical Plots 




Processed for Sample 101 



37400 37500 37600 37700 37800 37900 38000 

Time in seconds 


Power / 10 


Temperature 1 


Temperature 2 





