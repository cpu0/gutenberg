AD-A241 501 


4TA1ION PAGE 


ceutib.Got&m 



■LSG3CXX25aCt$X &oj*3**} 


.TZZZfSOSttSIB 


XFSCSST27S«ODC2SCS»SE3 
Ffcsfc 25 Usr ^S1 to 01 Jfca t2S3 


TeifeSaSL TefeGec2 AJa C5cass ttei^bpceca %ste=t VssaM ai, fcf SPAJJO to Sefe, 
SUCMEO (S?A3CXHcsg to Ucterfa UVliE-147 CUCoSEOfTggaJ. 

133291.11143 



7. fSSCEKTC CRS*.’«AICN KJ4fE{Sj KO AdCffeSSJESI 

IA3S-AVF. Wa s !a s8fe geft3eaagssd!sdB!l 

DsplS2T/Ehs££SESasse23 

D-£0>2Cainm 

F3JSSAL RrPCSUC Or G3i!ifi.W 



9. SfeeSCCStSUCrfT GfiT<G AS3CY KO TOCfESS^S. 

AiaJori program CSce 

United States Department d Defense 

Pentagon. Rm 3E114 

Washington. D.C. 20331-3031 

to. s?cri5cawGycr*»iCRrij AStscr 
RS’CGTWUUSS? 

11. SUPPl2Ur?*7Anr fOTcS 

12a. DSiaSUTlOei AYAlA3inY STATEMENT 

Approved for pubfc reiease; (Sstr&ution untensted. 

tZ>. EXSTK3UTICN CODE 


13 ABSTRACT (Karan200 notes; 

TeleSoft. TeteGen2 Ada Cross Development System, Version 3.1, tor SPARC to 68k, Ottobrunn, Germany. SUN4/60 
(SPARC)(Host) to Motorola MVME-147 (MC68030(Target), ACVC 1.11. 


14 SUBJECT TERMS 


'Ada programming language, /\da Compter Va! Summary Report, Ada Compiler Va! 
Capability, Val. Testing. Ada Val. Office, Ada Va!. Facffity^SI/MIL-STD-1815A, AJPO. 


18. SECURITY CLASSIFICATION * x 

UNCLASSIFED 


17. SECURITY CLASSIFICATION 
OF REPORT 

UNCLASSIFIED 


19 SECURITY CLASSIFICATION 
OF ABSTRACT 
UNCLASSIFIED 



NSN 7540-01 >280-550 


Standard Fcrm 298. (Rev 2-89) 
Prescribed by ANSI Std 239-128 



























t 



A* 


Certiliate Information 


Tbe follewirg fei 2 implement aticn *an tented and <5sr^nt:se3 to pam ACWC 
1-11- Testis 503 cccpleted ea 51-93-25. 


Canoiler Xxse and T«rsica: Je2*Gc2* Ada gevalccargrrt Svntem, 

Version 3.1, for S2A2C to CSS 

Ewt Carcter Sjstei: SZ 3C-4/60 (S222C) under SrSS 4.1 

Sirjct C ompetes System Jtotorola K7MZ-147 (5C63030) vith 
TeleAda-zzsc runtime, Versics 1.0 


See Section 3-1 for any additional information aScct the tenting 
environment. 


As a result of this validation effort. Validation Certificate 
131032511.11140 in awarded to TeieSoft- This certificate 
expires on 01 March 1593. 


Thin report ban been reviewed and in approved. 

xL; jJ 1 

IASG, Abt. ITS 
Michael Tonndorf 
Sinnteinntr. 20 
K-8012 Ottobrunn 
Germany 



bn Organization 

i6rputer £ Software Engineering Division 
InstTitute'-for Defenne Analyses 
Alexandria VA 22311 



I 

t 

I 


i 


i 


Ada Joint Program Office 
Dr. John Soloaond, Director 
Department of Defense 
Washington DC 20301 


91-12962 

— ■ -__ ■-•mil 


ic. tj a^ t ji 

C.’ m 
tmo tc 
Uoanooitii, • 
laalltlc ■ 


lj __ 

« d*,a * 


-Avh ! I » 'or 


Dlst 

r 

*>>"<> 

! 

i 

-J 




91 10 9 


X i 











Declaration of Conformance 


i 

i 

4 

A 


Customer: Teksoft 
Ada Valxfaaoo Facility: IABG 
ACVC Version: U1 


Ada Implementation 

Ada GompilerName: TekGen2™ Ada Cross Development System, 
Version 3.1 for SPARC to 6SK 
Host Computer System: Sun-4/60 under Sun OS 4.1 
Target Computer System: Motorola MVME147 (MC68030) board 
with TeleAda-EXEC runtime 


Customer's Declaration: 

1 the undersigned representing Telesoft declare that Telesoft has no knowledge of 
deliberate deviations from the Ada Language Standard ANSI/MIl^STD-1815A, 
ISO 8652-1987, in the implementation listed in this declaration. 


Date: March 22,1991 



I 


i 





tsls-'C? conies? rs 


CHASTE?. 1 INTRODUCTION 

. 1.1 ess or THIS VALIDATION SUMMARY report 

1-2 rSrSSidS.. 

1.3 * ACVC TEST CLASSES.. 

1.4 DEFINITION CF TERMS.. 


CHAPTER 2 IMPLEMENTATION DEPENDENCIES 

2.1 XlTHDRAnN TESTS. 

2.2 INAPPLICABLE TESTS . . . . 

2.3 TEST MODIFICATIONS . . . . 


CHAPTER 3 PROCESSING INFORMATION 

3.2 TESTING ENVIRONMENT . 

3.2 SUMMARY OF TEST RESULTS 

3.3 TEST EXECUTION . * . . 


APPENDIX A MACRO PARAMETERS 


APPENDIX 3 COMPILATION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 














CHAPTER 1 


INTRODUCTION 


The Ada implementation described above was tested according to the Ada 
Validation Procedures (Pro90) against the Ada Standard [Ada83] using the 
current Ada Compiler Validation Capability (ACVC). This Validation Summary 
Report (VSR) gives an account of the testing of this Ada implementation- 
For any technical terms used in this report, the reader is referred to 
I?ro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide (UG8S], 


1 1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the United States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply only 
to the computers, operating systems, and compiler versions identified in 
this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements 3et forth in thxs report are 
accurate and complete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF which performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 
Institu e for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 


1-2 








JHTgOpUCTIOlJ 


1.2 REFERENCES 

(Rda833 Reference Manual for the Ada Programing Lancruace , 

ANSX/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

[?ro90] Ada CoTnoiler Validation Procedures. Version 2.1, Ada Joint 
Program Office, August 1990. 

IUG893 Ada Compiler Validation Capability User's Guide . 21 June 1989. 


k 


1.3 ACVC TEST CLASSES 


Compliance of Ada implementations is tested by means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes*, 

A, B, C, D, E, and L. The first letter of a test name identifies the-'dlass 
to which it belongs. Class A, C, D, and S tests are executable^^Class B 
and class L tests^are _expected-to produce^errors-at Compile time and link 
.time?'respectively. 

r 

'rhe executable tests are written in a selfvchecking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library units, the packages REPORT and SPPRT13, 
and the procedure CHECIMFILE are used for this purpose. The package REPORT 
also provides a set of identity functions used to defeat some compiler 
optimizations allowed by the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada Standard. The procedure CH£CK_FILS is used to..check the contents of 
text files written by some of the Class C testj/for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHECHcFlLE is checked by a set of 
executable tests. If these units are not operating correctly, validation 
testing is discontilib^d. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting compilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code which must not be flagged illegal by the compiler. This behavior is 
also verified. 


Class L tests check that an Ada implementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attempted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for example, the largest integer. A list 
of the values used for thi3 implementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this implementation are described in section 2.3. 


1-3 







INTRODUCTION 


For each Ada implementation, a customized test suite is produced by the 
AVF. This customization consists of taking the modifications described 
in the preceding paragraph, removing withdrawn tests (see section 2,1) and, 
possibly some inapplicable tests (see Section 2-2 and (UG89J). 

In order to pass an ACVC an Ada implementation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
■ execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada compiler with its host computer system and it3 

Implementation target computer system. 

Ada Joint The part of the certification body which provides policy and 

Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guidance for operations of the Ada certification system. 

Organization 
(AVO) 

Compliance of The ability of the implementation to pass an ACVC version, 
an Ada 

Implementation 

Computer A functional unit/ consisting of one or more computers and 

System associated software, that uses common storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user-written or user-de3ignated programs: performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
computer system may be a stand-alone unit or may consist of 
several inter-connected units. 







INTRODUCTION 


Conformity 


Customer 


Declaration of 
Conformance 


Host Computer 
System 

Inapplicable 

test 

ISO 

Operating 

System 


Target 

Computer 

System 

Validated Ada 
Compiler 

Validated Ada 
Implementation 

Validation 


Withdrawn 

test 


Fulfillment by a product, process or service of all 
requirements specified. 

An individual or corporate entity who enters into an 
agreement with an AV? which specifies the terms and 
conditions for AVF services (of any kind) to be performed. 

A formal statement from a customer assuring that conformity 
is realized or attainable on the Ada implementation for 
which validation status is realized. 

A computer system where Ada source programs are transformed 
into executable form. 

A test that contains one or more test objectives found to be 
irrelevant for the given Ada implementation. 

International Organization for Standardization. 

Software that controls the execution of programs and that 
provides services such as resource allocation, scheduling, 
input/output control, and data management. Usually, 
operating systems are predominantly software, but partial 
or complete hardware implementations are possible. 

A computer system where the executable form of Ada programs 
are executed. 


The compiler of a validated Ada implementation. 


An Ada implementation that has been validated successfully 
either by AVF testing or by registration (Pro90). 

The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this implementation. 

A test found to be incorrect and not used in conformity 
testing. A test may be incorrect because it has an invalid 
test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programming 
language. 


1-5 






CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRAWN TESTS 

The following tests have been withdrawn by the AVO. The rationale for ’ 


withdrawing 

each test is 

available from either the 

AVO or the 

AVF. The 

publication 

date for this 

list of withdrawn tests 

is 91-03-14, 


E2800SC 

B28006C 

C34006D 

C35S08I 

C35S08J 

C35508K 

C35508H 

C35702A 

C3S702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45S12A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

A74006A 

C74308A 

B83022B 

383022H 

B83025B 

B83025D 

B83026B 

C83026A 

C83041A 

385001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B023 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD700SE 

AC7006A 

CD700GE 

AD7201A 

AD7201E 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107X 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 





2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given Ada implementation. Reasons for a test's inapplicability may 
be supported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
implementation, the following tests were determined to be inapplicable for 
the reasons indicated; references to Ada Commentaries are included as 
appropriate. 


2-1 





IMPLEMENTATION DEPENDENCIES 


The following 201 tests have floating-point type declarations requiring 
more digits than SYSTEM.MAX_DIGITS: 

C24113L..Y <14 tests) C35705L..Y (14 tests) 

C35706L..Y (14 tests) C35707L..Y (14 tests) 

C35708L..Y (14 tests) C35802L..Z (15 tests) 

C45241L..Y <14 tests) C45321L..Y (14'tests) 

C45421L..Y (14 tests) C45521L..Z (15 tests) 

C45524L..Z (15 tests) C45621L..Z (15 tests) 

C45641L..Y (14 tests) C46012L..Z (15 tests) 

The following 21 tests check for the predefined type SHORT_INTEGER: 

C35404B B36105C C45231B C45304B C45411B 

C45412B C45502B C45503B C45504B C45504E 

C45611B C45613B C45614B C45631B C456323 

B52004S C55B07B B55B09D B86001V C86006D 

CD7101E 

C35404D, C45231D, BS6001X, C86006E, and CD71Q1G check for a predefined 
integer type with a name other than INTEGER, LONG_INT£GER, or 
SHORT_2NTEGER. 

C35713B, C454233, B86001T, and C86096H check for the predefined 
type SHORTJTLOAT. 

C35713D and B86001Z check for a predefined floating-point type with a 
name other than FLOAT, LONG_FLOAT, or SHORTJTLOAT. 

C45531M..P (4 test3) and C45532M..? (4 tests) check fixed-point operations 
for types that require a SYSTEM.MAX J1ANTISSA of 47 or greater. 

C46013B, C46031B, C460333, and C460343 contain 'SMALL representation 
clauses which are not powers of an integer. 

C45624A..B (2 tests) check that the proper exception is raised if 
KACHINE_OVERFLQWS is FALSE for floating point types; for this 
implementation, MACHINEJ9VERFLOWS is TRUE. 

B86001Y checks for a predefined fixed-point type other than DURATION. 

CA2009C, CA2009F, BC3204C, and BC3205D check whether a generic unit can 
be instantiated BEFORE its generic body (and any of its subunits) is 
compiled. This implementation creates a dependence on generic units 
as allowed by AI-00403 and AI-00530 such that the compilation of the 
generic unit bodies makes the instantiating units obsolete. (See 
section 2.3) 

LA3004B, EA3004D, and CA3004F chock for pragma INLINE for functions. 

CD1009C uses a representation clause specifying a non-default size 
for a floating-point type. 

CD2A84A, CD2A84E, CD2A84I. J (2 tests), and CD2A840 use representation 
clauses specifying non-default sizes for access types. 


2-2 





IMPLEMENTATION DEPENDENCIES 

AE2101C and EE2201D.-E (2 tests) use instantiations of package 
SEQUENTIAL_IO with unconstrained array types and record types with 
discriminants without defaults. These instantiations are rejected by 
this compiler. ' 

AE2101H, EE2401D, and EE2401G use instantiations of package DIRECT_IO 
with unconstrained array types and record types with discriminants 
without defaults. These instantiations are rejected by this compiler. 

The tests listed in the following table are not applicable because the 
given file operations are supported for the given combination of mode 
and file access method. 

Test File Operation Mode _ File Access Method 


CE2102D 

CREATE 

IN FILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE21C2I 

CREATE 

IN FILE 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SEQUENTIAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPEN 

OUT FILE 

SEQUENTIAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUENTIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT 10 

CE3J02E 

CREATE 

IN FILE 

TEXT 10 

CE3102F 

RESET 

Any Mode 

TEXT•10 

CE3102G 

DELETE 


TEXT 10 

CE3102I 

CREATE 

OUT FILE 

TEXT 10 

CE3102J 

OPEN 

IN FILE 

TEXT 10 

CE3102K 

OPEN 

OUT FILE 

TEXT 10 


CE2107B..E (4 tests)/ CE2107L, and CE2110B attempt to associate multiple 
internal files with the same external file when one or more files is 
writing for sequential files. The proper exception is raised when 
multiple access is attempted. 

CE2107G..H (2 tests)/ CE2110D, and CE2111H attempt to associate multiple 
internal files with the same external file when one or more files is 
writing for direct files. The proper exception is raised when multiple 
access is attempted. 

CE2111D checks the resetting of an external file from IN_FILE to OUT_FlLE. 

CE2203A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for SEQUENTIAL_IO. This implementation does 
not restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of the 
external file is exceeded for DIRECT^IO. This implementation does not 
restrict file capacity. 


2-3 





(231213, <232113--2 12 testsJ, <231243, cd CS2115A atterpc so zssccizzs 
—i .y, •—,—fi»ej s_e km wstral file when cat or raise 
filer is jririrg for cess files, lie prope r ecss^ea is raised i6*s 
sslriple access is ajMsced. 

C23304A checks tier C53_2SSSS1 is raised if a call to S2TS253_E2SSJ3 er 
SET_?A3:_I2S3T3 specifies a raise char is iragprecriase far Se external 
fils- litis inplenentarien dees an hare inappropriate calces for eider 
lire length or pi;e length. 

C234133 checks char PAS raises IAircOT_E3SSR vies the raise cf she page 
ssder exceeds CCOdeST. ror this isleMcutiss, de raise of 
CCCSl'UiSl is creases than 2SC003 sdisj she checking cf dir djesdre 
inpractical- 


2.3 TEST MS32FICATICKS 

Modifications (see section 1.31 were reorired fer 22 rests. 

The following rests aere split irto tw er cere resrs because this 
irplenenrarien did nos reparr tie riolaricas of rie Ada Standard ia rie «v 
expected by tie original rests. 

371001Q 3A300SA 2A300S3 3A32073 SASICBA 

3A300E3 BA3012A 

CA200SC, CA2G05E, 5C3204C, aad 3C32053 were graded inapplicable cy 
Svaluation Modification as directed by tie A VO. Secacse tie inplenenrasien 
cakes tie units vita instantiations obsolete (see section 2.2), tie Class C 
tests were rejected at link tire and tie Class 3 tests were cccpiled 
without error. 

Test CD21A21C prists the cessage 

* KOJ-’AME CHECK Op REPP-ESEKTATICK PCS ?J»IVATS_2KuK PAI123 

before printing any regular test output. Tie AVO puled that this test ray 
be graded PASSED by Evaluation Modification, because the test is errcnecus. 


2-4 


! 

I 






CS P Si 3 


srocssszss zsz c z x fcrza: 


3.3 


CESCI223 SS7ZSC 


S* icplesertaticc tested is ibis rjliiities effect is described 
adesratelv Sw tie infestation given in die initial pages e£ ihis repcrt- 

Per 2 print c£ contact foe bKi technical and sales isfocatica abort this 
Ad* inplecentatien svsten, see: 


CeieScft Europe 
Brvggargatan 5 
P-O. Bor 1C01 
S-14S01 Svnashana 
Sweden 


Testing of ibis Acs irplenertatien was conducted at she customer's sire 
sy a validation rear ires: tie AVF. 


3.2 SKMAPCr OF TEST HE5ULTS 


Ac Ada Inplecentatien passes a giver ACVC version i£ it processes each test 
o£ tie customized test suite in accordance with the Ada Progressing 
Language Standard, 'Aether the test is applicable or inapplicable; 
otherwise, the Ada Irplesentaticn fails the ACVC [ProSOi. 


3-1 





PKOCSSSZKS ZKICAJIATJCJ: 


ail processed tests (inapplicable and applicable), a rests! 


thz: 

t conforms to the Ada Programing Language 

Standard. 

2) 

Total tszsbez of Applicable Tests 

376S 


b) 

Total Ifrrber of Withdrawn Tests 

S3 


c) 

Processed inapplicable Tests 

107 


d) 

;;on-?rocessed I/O Tests 

0 


e) 

ilec-P recessed Floating-Point 




Precision Tests 

201 


5) 

Total Number of Inapplicable Tests 

308 

(c*d+e) 


Total Kumber of Tests for ACVC 1.11 

4170 

(a+brf) 


All I/O tests of the test suite were processed because this implementation 
supports a file system. The above number of floating-point tests were not 
processed because they used floating-point precision exceeding that 
supported by the implementation. When this compiler was tested, the tests 
listed in section 2.1 had been withdrawn because of test errors. 


3.3 TEST EXECUTION 

Version 1.11 of the ACVC comprises 4170 tests. When this compiler 
was tested, the tests listed in section 2.1 had been withdrawn because of 
test errors. The AVF determined that 308 tests were inapplicable to this 
implementation. All inapplicable tests were processed during validation 
testing except for 201 executable tests that use floating-point precision 
exceeding that supported by the implementation. In addition, the modified 
tests mentioned in section 2.3 were also processed. 

A magnetic tape containing the customized test suite (see section 1.3) was 
taken on-site by the validation team for processing. The contents of the 
magnetic tape were loaded directly onto the host computer. 

After the test files were loaded onto the host computer, the full set of 
tests was processed by the Ada implementation. 

The tests were compiled and linked on the host computer system, as 
appropriate. The executable images were transferred to the target computer 
system by Ethernet, and run. The results were captured on the host 
computer system. 

Test output, compiler and linker listings, and job logs were captured on 
a magnetic tape and archived at the AVF. The listings examined on-site 
by the validation team were also archived. 

Testing was performed using command scripts provided by the customer and 
reviewed by the validation team. See Appendix B for a complete listing 
of the processing options for this implementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test are given on the next page, which was supplied by the 
customer. 


3-2 






TB_SDF T 

1.11 Validation 
SUN-4/E68 


Basic TeleSoft Ada Compiler Information 

With optimization, the compilation process consists of 6 definite passes 

or steps: 

Front-End: i 

Language control, translation to intermediate High-Form. 

Middle Pass: 

Resolution of tasking, translation to intermediate Low Form. 
Optimizer: 

Optimization of Low Fotm prior to code generation. 

Code Generate:: 

Generation of native code for the target. 

Prelinker (Binder): 

Generation of elaboration code for main program, 
linker: 

Linking the object modules generated by the compiler. 

Compiler Option Information 
B_TESTS: 


ada -L -v -O D -a vnel47.opt -n <nain_unit> <test_name> 
Legend: 

ada invoke Ada compiler 
-L generate interspersed source-error listing 
-v verbose 

-OD optimize with all options 
- avrael47.opt link options file 

-m designates main unit for driving the test 
<test_name> name of Ada source file to be compiled 

Non_B Non-Family TESTS: 


ada -v -0 D -a vrael47.opt -m <main_unit> <test_narce> 
Legend : 

ada invoke Ada compiler 
-v verbose 

■O D optimize with all options 
- a vmel47.opt link options file 

-m designates main unit for driving the test 
<test_name> name of Ada source file to be compiled 


91-03-05 


11 








TELE5DFT 


Non_B Family TESTS: 

a da -v -O D <tesc_nanie> 
aid -a vT2el47.eps <sain_unit> 

legend : 

ada invoke Ada compiler 
■ . -v verbose 

aid invoke linker 
-O D optimize with all options 
- a vmel47.opt link options file 
<test_name> name of Ada source file to be compiled 


1.11 Validation 
SUN-4/E68 


I 


91-03-05 


12 






APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89}. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LEN—also listed here. These values are expressed 
here as Ada string aggregates, where "V" represents the maximum input-line 
length. 

Macro Parameter Macro Value 


SMAX_IN_LEN 

200 -- 

Value of V 

$BIG_ID1 

<1..V-1 

-> 'A', 

< 

1 

V 

M 

$8IG_ID2 

(1..V-1 

-> 'A', 

V »> '2 

$BIG_ID3 

(1..V/2 
<1. 

-> 'A') 
.V-l-V/2 

& '3' & 
-> 'A') 

SBIG_ID4 

(1..V/2 
(1. 

-> 'A') 
.V-l-V/2 

1 S’ 

V 

- 

S’ 

$BIG_INT_LIT 

(1..V-3 

-> '0') 

S "298" 

$BIG_REAL_LIT 

(1..V-5 

o 

A 

1 

6 "690.: 


$BIG_STRING1 5 (1..V/2 -> 'A') S 

$BIG_STRING2 5 (1..V-1-V/2 -> 'A') S '1' S 

SBLANKS (1..V-20 -> ' ') 

SMAX LEN INT BASED LITERAL 

"2:" S (1..V-5 -> '0') S "11 

$MAX_LEN_REAL BASED LITERAL 

"16:" S (1..V-7 -> '0') S "F.E:" 

$MAX_STRING_LITERAL "CCCCCCC10CCCCCCCC20CCCCCCCC30CCCCCCCC40 
CCCCCCCC5 OCCCCCCCC 6 0CCCCCCCC7 0 CCCCCCCC8 0 
CCCCCCCC 9 0 CCCCCCC10 0 CCCCCCC11OCCCCCCC12 0 
CCCCCCC130CCCCCCC140CCCCCCC150CCCCCCC160 
CCCCCCC17 OCCCCCCC 18 OCCCCCCC 190CCCCCC199" 








MACRO PARAMETERS 


The following table lists all of the other macro parameters and their 
respective values. 

Macro Parameter -Macro Value 

$ACC_SIZE 32 

$ALIGNMENT 4 

$COUNT_LAST 2_147_483_646 

$DEFAULT_MEM_SIZE 2147483647 

$DEFAUL1_ST0R_UN1T 8 

$DEFAULT_SYS_NAKE 7ELEGEN2 

SDELTAJDOC 2«1.0*E-31 

$ENTRY_ADDRESS ENT_ADDRESS 

$ENTRY_ADnRESSl ENT_ADDRESS1 

SENTKY_ADDRESS2 ENT_ADDR£SS2 

$FIELD_LAST 1000 

SFILE_TERMINATCR ' • 

SFIXED_NAME NO_SUCH_FIXED_TYPE 

SFLOATJNAME NO_SUCH_FLOAT_TYPE 

SFORM_STRING "~ 

$FOKX_STRING2 "CANN0T_RSSTIUC7_FILE_CAPACITX" 

SOREATERJTHAN DURATION 

100_000.0 

SGREATER THAN DURATION EASE LAST 
131_073.0 

$GREATER_THAN FLOAT_BASE LAST 

1.80141E+38 

SGREATER THAN FLOAT SAFE LARGE 

4.2S354E+37 

SGREATER THAN SHORT FLOAT SAFE LARGE 
1.80141E+38 


SHIGH PRIORITY 


63 







MACRO PARAMETERS 


$ILLEGAL_EXTERNAL_FILE_NAME1 

BADCHAR*'7% 

$ILLEGAL EXTERNAL FILE_NAME2 

/NONAME/DIRECTORY 

$INAPPROPRIATE LINE_LENGTH 
-1 

$INAPPROPRIATE_PAGE_LENGTH 

-1 

$INCLUDE_PRAGMA1 PRAGMA INCLUDE ("A28006D1.ADA") 

$INCLUDE_PRAGMA2 PRAGMA INCLUDE ("B28006E1 .ADA") 

$INTEGER_FIRST -32768 

$INTEGER_LAST 32767 

$INTEGER_LAST_PLUS_1 32768 

SINTERFACE_LANGUAGE ASSEMBLY 

$LESS._THAN_DURATION -100_000.0 

SLESS THAN DURATION BASE FIRST 

-131_073.0 

SLINE_TERMINATOR ASCII.LF 

SLOK_PRIORITY 0 

SMACKINE_CODE_STATEMENT 

M68K_CODE<(OP -> NOP); 

SMACI1INE_C0DE_TYPF. OPCODES 

$MANTISSA_DOC 31 

$MAX_DIGITS 15 

SMAX_IHT 2167483647 

$KAX_INT_PLUS_1 2_147_483_648 

SM1N_INT -2147483648 

SNAKE NO_SUCH_TYPE_AVAILABLE 

SNAME_LIST TELEGEN2 

$NAM£_SPECIFICATIONl /plug2/ada/sh3.25/e68k/aovo/X2120A 
SNAME_SPECIFICATION2 /plug2/ada/sh3.25/e68k/acvc/X2120B 







MACRO PARAMETERS 


$NAM£_SPECIFICATION3 /plug2/ada/sh3.25/e68k/acvc/X3119A 
$NEG_BASED_INT 164FFFFFFFE# 

$NEW_MEM_SIZE 2147483647 

$NSW_STOR_UNIT 8 

$NEW_SYS_NAME TELEGEN2 

$PAGE_TERMINATOR ASCII.FF 

$RECORD_DEFINITION RECORD OP : OPCODES; END RECORD; 

SRECORD_NAME M66K_CODE 

$TASK_SIZE 32 

STASK_STORAGE_SIZE 1024 

STICK 2#1.0#E-14 

SVARIABLE_ADDRESS VAR_ADDRESS 

SVARIABDE_ADDRESS1 VAR_ADDRESS1 

SVARIABLE_ADDRESS2 VAR_ADDRESS2 







APPENDIX B 


COMPILATION SYSTEM AND LINKER OPTIONS 


The compiler and linker options of this Ada implementation, as described in 
this Appendix, are provided by the customer. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and not 
to this report. 


B-l 







COMPILATION TOOLS 


The options available, with, the ada -command are summarized in Table 2-2. The default 
situation .(that is. what-happens if the option is not used) is explained in the middle column. Each 
option is described in the paragraphs that follow the table. 

Table 2-2. Summary of Compiler Options 


Option 

Default 

DUcussed 

in Section 

Common options: 



-l(ibfile <libname> 

Use liblst.alb as the library file. 

1.3.1 

-t(emp!ib <sub!ib...> 

None 

1.3.1. 

-V(space_size <va!ue> 

Set size to 2000 Kbytes. 

1.3.2 

-v(erbose 

Do not output progress messages. 

1.3.3 

-b(ind_jonly 

Bind and link. 

'omn 

-c(pu_type <value> 

Consider CPU type to be MC68020. 


-d(ebug 

Do not include debug information in 

2.1.3 

-E(rror_abort <value> 

object code, (-d sets -k(eep.) 

Abort compilation after 999 errors. 

2.1.4 

-e(rrors_only 

Run middle pass and code generator, 

2.1.5 

-i(nhibit <key>| 

not just front end. 

Do not suppress run-time checks, source 

2.1.6 

-k(eep 

line references, or subprogram name 
information in object. 

Discard intermediate representations of 

2.1.7 

-m(ain <unit> 

secondary units. 

Do not produce executable code 

2.1.8 

-0(ptimize <key>i 

(binder/lir.ker not executed). 

Do not optimize code. 

2.1.9 

o-s(oftware_float 

Use hardware floating-point support. 

2.1.10 

-u(pdate_lib <key>* 

Do not update library when errors are 

2.1.11 

-x(ecution_profile 

found (multi-unit compilations). 

Do not generate execution-profile code. 

2.1.12 

Listing options: 



-C(ontext <value> 

Include 1 line of context with error 

2.1.13.1 

-L(ist 

message. 

Do not generate a source-error listing. 

2.1.13.2 

-F(ile_only_errs 

Do not generate an errors-only listing. 

2.1.13.3 

-S(ource_asm 

Do not generate assembly listing. 

2.1.13.4 









APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of this Ada implementation, as described m this Appendix, 
are provided by the customer. Unless specifically noted otherwise, 
references in this Appendix are to compiler documentation and not to this 
report. Implementation-specific portions of the package STANDARD, which 
are not a part of Appendix F, are given on the following page. 


C-l 







s 


TL—! —>l u— > 


1.11 Validation 
SUN-4/E68 


Attachment F: Package Standard Information 

For the SUN-4/E68 Ada compiler running on a SPARC based Sun-4 Server under 

Sun OS 4.01 Operating System, the numeric types and their properties are as follows: 


Integer types: 
INTEGER 
size.= 16 
first = -32768 
last =+32767 
LONGJNTEGER 

j size = 32 

fust = -2147483648 
j . last = +2147483647 

Floating-point types: 
FLOAT 
size = 32 
digits = 6 

'first =-1.70141E+38 
'last = +1.70141E+38 
machine_radix = 2 
machine_mantissa = 24 
machine_emin = -125 
machine_emax = +128 
LONG_FLOAT 
size = 64 
digits = 15 

'first = -1.79769E+308 
'last = 1.79769E+308 
machine_radix = 2 
machine_mannssa = 53 
; machine_env.n = -1021 

: machine_emax =+1024 


Fixed-point tvpes: 
DURATION 
size = 32 
delta = 2#l.C#e-14 
first = -86400 
last =-t-86400 


» 


91-03-05 


9 


****** * f 








TeleGen2 Reference Information for UNIX to E68K 


Table 3-4. S ummar y of LRM Chapter 13 Features for TeleGen2 


13.1 Representation Clauses 

Supported, except as indicated below (LRM 13.2 - 
13.5). Pragma Pack is supported, except for dynam¬ 
ically sized components. For details on the 
TeIeGen2 implementation of pragma Pack, see Sec¬ 
tion 3.7.1. 

13.2 Length Clauses 

Supported: 

’Size 

’Storage-Size for collections 
’Storage-Size for task activation 
’Small for fixed-point types 

See Section 3.7.2 for more information. 

13.3 Enumeration Rep. Clauses 

Supported, except for type Boolean or types derived 
from Boolean. (Note: users can easily define a non- 
Boolean enumeration type and assign a representa¬ 
tion clause to it.) 

13.4 Record Rep. Clauses 

Supported except for records with dynamically sited 
components. See Section 3.7.4 for a full discussion 
of the TeleGen2 implementation. 

13.5 Address Clauses 

Supported for: objects (including task objects) and 
entries. 

Not supported for: packages, subprograms, or task 
units (Note: the TeleGen2 philosophy is to locate 
compilation units via the link process rather than in 
source programs.) 

See Section 3.7.5 for more information. 

13.5.1 Interrupts 

Supported. Some interrupt optimizations are sup¬ 
ported as well. See “Using Machine Code Inser¬ 
tions’’ in the Programming Guide chapter for a full 
discussion of the TeleGen2 implementation of inter¬ 
rupts. 

13.6 Change of Representation 

Supported, except for types with record representa¬ 
tion clauses. 

. Continued on the next page . 


REF-1470N-Vl.KU.E68) © 1989 TeleSoft 


31AUG89 





















1234 AXSOIASOS3 


TabteZ-i. S ;ir l .r. , J 7 ?d' T . HM C b r-r . rr 12 FetsqSr TtaCcJ^C nrTr* ) 


| -- Cczll L. 

| 


| Ccrfrrss aster to 1234 model Hejer to Secmso j 
1 3-j.» £er ogam ea toe sat O-^ r—7. ■ ■< ■ J 

13.7.1 Spoa-Doccc: Named 
Nearness 

Seder to tr* saegrgjthaa ec gadage Sisea (Sea- t 
i5co 2.7.7). | 

IRKVMOTMiiniK 


■mhhm 

’Address Sar ganja.g^ Es tmsanoccccd. | 

’Address cc e ceaarr pds a rr! address. | 

13.72 Bggeeana Ausoco oa 
Seal Tjps 

■ 

132 Maafct Code bedas 

r ciDv scnooctcdL iae aeSeG—'~5ecne=sas5ca ID 
eemses an assume. ’OSes. idea. aSaag -asm: de 1 
iaagaag*-de~a>ed assrEEsae ’Address. a3=*s ad-| 
Cresses of ocyrss aad s&ea es dais es-eere so ssl 
specEpea En stack —arses. Heser to •‘UsSrg l^yee. 1 
Coes lasertEocs** Ea tie PhogarsmEag Gods erarerr 
for a fh3 coeixoa ca 'Jb* nnpSetnentatsco and cse 11 
of machine code hse^ixs. | 

13.9 Interface u ftie 

Languages 

Pragam Irtertate Es supported tor Asseadwj, C. 
UNIX, aad Fortraa. 3der to ’fcaddtg to Oder 
Languages” Ea tie Programming Goer esareer tor 
a description of iso implementation aad use of prag¬ 
ma It tartar r. 

13.10 Unchecked Programming 

Supported except as soted oejsw (LRM 13.102). 

13.10.1 Unchecked Storage Dealio- 
cation 

Supported. | 

13.10.2 Unchecked T>pe Conver¬ 
sions 

Supported ezccpl for unconstrained record or array | 

types. | 


8FEB90 


R£F-1470N-Vl.la(U.F88) © 1990 TeltSoft 


























16 


REF-14T0N-V1.KU.E68) © 1989 TtleSoft 


S1AUC89 


















LBM ANNOTATIONS 


Table 3-5. T.RM Appendix ? for TeleGen2 (Contd) 


| -Cosiibeed fr-na tic pccciocs pc je- 

| (5) impiemcncacico-Generased Names 

None 

8 ( 6 ) Address Clanse Expression Interpreta- 

i 

An expression that appears in an object address 
clause is interpreted as the address of the hist 
storage unit of the object. 

(7) Restrictions on Unchecked Conversions 

Summarized in Table Z-A. 

(8) Implementation-Dependent Charac¬ 
teristics of the I/O Packages. 

1 

1 

1 

l 

1- In Text_IO, the type Count b defined as: 

type Cocnt b range 0 .. Text_IO_Deanit:ons. n - n 
{Text_IO_De5cition3.Cocnt’Last, 1); 

— or 0~Msx_!nl—1 

2. In Text_IO, the subtype Field is defined as: 

subtype Field a Integer range 0 .. 

Text_IO_Dennitions.rield-I.aai; — or 0..1000 

3. In TextJO. the Form parameter of procedures 
Create and Open b not supported. (If you sup¬ 
ply a Form parameter with either procedure, it 
b ignored.) 

4. SequentiaI_IO and DirectJO cannot be instan¬ 
tiated for unconstrained array types or discrim¬ 
inated types without defaults. 

5. The standard library contains preinstaniialed 

versions of Texi_IO.Integer_JO for types In¬ 
teger and Long-Integer and of 

Text_IO.Float_IO for types Float and 
Long_Float. We suggest that you use the fol¬ 
lowing to eliminate multiple instantiations of 
these packages: 

Integer _Text _10 

Long_lnieger_Text_IO 

FIoat_Texl_iO 

Long_FIoai_Text_10 


3.8.1. Implementation-Defined Pragmas. There are four implementation-defined pragmas 
in Te!eGen2: pragmas Comment, Linkname, Images, and No_5uppress. 

3.8.1.1. Pragma Comment. Pragma Comment is used for embedding a comment into the 
object code. Its syntax is: 

pragma Comment ( <string_literal> ); 


28FEB90 


REF-U70N-Vl.la(U.E68) © 1990 TeleSoft 


3-17 



















TeleGen- Reference Information for UNIX to E68K 


where “<string_!iteral>” represents the characters to be embedded in the object code. Pragma 
Comment is allowed only within a declarative.part or immediately within a package specification. 
Any number of comments may be entered nto the object code by use of pragma Comment. 

3.8.1.2. Pragma T. inloiam e. Pragma Linkname is used to provide interface to any routine 
whose name can be specified by an Ada string literal. This allows access to routines whose 
identifier* not conform to Ada identifier rules. 

Pragma Linkname takes two arguments. The first is a subprogram name that has been 
previously specified in a pragma Interface statement. The second is a string literal specifying the 
exact link name to be employed by the code generator in emitting calls to the associated 
subprogram. The syntax is: 

pragma Interface { assembly, <subprogram—name> ); 
pragma Linkname ( Oubprogram—name>, <string_literal> ); 

If pragma Linkname does not immediately follow the pragma Interface for the associated 
program, a warning will be issued saying that the pragma has no effect. 

A simple example of the use of pragma Linkname is: 

procedure Duaay_Access ( Duaay-Arg : System.Address ) ; 
pragna Interface (assembly, Dummy-Access ); 
pragma Linkname (Dummy-Access, ’-access”); 

A note of caution: In the example above, the link name generated may be “_access" instead of 

“-access” if your native C compiler prepends an underscore to the specified link name. 

3.8.1.3. Pragma Images. Pragma Images controls the creation and allocation of the image 
and index tables for a specified enumeration type. The image table is a literal string consisting of 
enumeration literals catenated together. The index table is an array of integers specifying the 
location of each literal within the image table. The length of the index table is therefore the sum 
of the lengths of the literals of the enumeration type: the length of the index table is one greater 
than the number of literals. 

The syntax of this pragma is: 

pragma Images(<enumeration_type>, Deferred); 

•• or — 

pragma Images(<enumeration_type>, Immediate); 

The default, Deferred, saves space in the literal pool by not creating image and index tables for 
an enumeration type unless the 'Image, 'Value, or 'Width attribute for the type is used. If one of 
these attributes is used, the tables are generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in more than one compilation unit, more 
than one set of tables is generated, eliminating the benefits of deferring the table. In this case, 
using 


pragma Image3(<enumeration_type>, Immediate); 

will cause a single image table to be generated in the literal pool of the unit declaring the 
enumeration type. 


3-18 


REF-1470N-Vl.la(U.E68) © 1990 TeleSoft 


28FEB90 





LEM ANNOTATIONS 


For a very large enumeration type, the length of the image table will exceed Integer’Last 
(the maximum length of a string). In this case, using either 

pragma Images(<enumeration_type>, Immediate); 

or the ’Image, ’Value, or ’Width attribute for the type will result in an error message from the 
compiler. 

3.8.1. 1. Pragma No_Suppress. No_Suppress is a TeieGen2-defined pragma that prevents 
the suppression of checks within a particular scope. It can be used to override pragma Suppress 
in an enclosing scope. NoJSuppress is particularly useful when you have a section of code that 
relies upon predefined checks to. execute correctly, but you need to suppress checks in the rest of 
the compilation unit for performance reasons. 

Pragma NoJSuppress has the same syntax as pragma Suppress and may occur in the same 
places in the source. The syntax is: 

pragma No_£uppress (<identifier> j, (ON =>) <name>j); 

where <identifier> is the type of check you don’t want to suppress (e.g., access .check; refer 
to LRM 11.7) 

:name> is the name of the object, type/subtype, task unit, generic unit, or subprogram 
within which the check is not to bi suppressed; <name> is optional. 

If neither Suppress nor No Jiuppress are present in a program, no checks will be suppressed. 
You may override this default at the command level, by compiling the file with the -i(nhibit 
option and specifying with that option the type of checks you want to suppress. For more 
information on -i(nhibit, refer to your T«leGen2 Overview and Command Summary document. 

If cithar Suppress or NoJSuppress are present, the compiler uses the pragma that applies to 
the specific check in order to determine whether that check is to be made. If both Suppress and 
NoJSuppress are present in the same-scope, t'ie pragma declared last takes precedence. The 
presence {' pragma Suppress or No .Suppress in the source 'akes precedence over an - ifnhibit 
option provided during compilation. 

3.8.2. Implementation-Dependent Attributes. 

3.8.2.1. ’Address and ’Offset. These were discussed within the context of using machine 
code insertions, in the Programming Guide chapter. 

3.8.2.2. Extended Attributes for Scalar Types. The extended attributes extend the 
concept behind the Text JO attributes ’Image, ’Value, and ’Width „o give the user more power 
and flexibility when displaying values of scalars. Extended attributes differ in two respects from 
their predefined counterparts: 

1. Extended attributes take more parameters and allow control of the format of the output 
string. 

2. Extended attributes are defined for all scalar types, including fixed and floating point 
types. 


28FEB90 


REF-14T0N-Vl.la(U.E68) © 1990 TeleSoft 


5-19 






TeleGen2 Reference Information for UNIX to E68K 


Extended versions of predefined attributes. are;provided'for. integer, enumeration, floating point, 
and fixed.point types: 

Integer: ’Extended ilmage, ’Extended_Value, ’Extended-Width 

Enumeration: 'Extended dimage, ’Extended-Value, ’Extended-Width __ 

Floating Joint: ’Extende^tdinage, ’Extended-Vnlue. ’EstendeeUplgits 

Fixed Point: ' ’Extepdeddlmage, ’Extendcd-Volue, 'Extended JForo, 

. ~ dEx?endedJ\it 

T£e-'ex:er.ded.. attributes - can be used wtijopt-the overhead of including Tckt-IO in the 
linked-pfograitn Below is an example that illustrates the difference between instantiating 
Text JO.Flqat-JO to,convert a float Value to a string and Msi'i^.ploat’ExUndcd -Image: 

with TextdlO;. , 

fuEttiphidonvert^IfluStriag'( FI t'Float ) return .St?ing is 
Tenp_5.th :'String ( 3 v. 0-e'Floit’fiigitn ); 

.package Plt-10 is'new 'f«xt_lQs?icit_ 2 .Q (pleat); 
begin 

Flt.IQ.Put ( teapJStr, PI ); 
return leap-Str; 

end CcnverS-To_Striag; 

function Coavert_To_String_h’o-i<xt_JO ( FI : Float ) return String is 
begin 

return. Float’Extended_Jcage f FI >; 
end Convert-To-String-flo-Vext-IO; 


with. Iext_I0, Convert_To_String, Convert_To_String_.No_Text_IO; 
procedure Show_Different-Conversions is 

Value : Float := 10.03376: 
begin 

Text-JO.Put-Line ( 'Using the Convert_To_Striag, the value of the variable 
is : * t Convert-To—String ( Value ) ); 

Text_IQ.Put_Line ( 'Using the Ccnvert_To_String_h'o_Text_IO, the value 
is : * fc Convert_To_String_No_Text_IO ( Value ) )j 

end Showjiifferent—Conversions; 


3-20 


REF-lS7ON-Vl.l(U.E08) © 1989 TeleSoft 


31AUG89 




LRM ANNOTATIONS 


3.8.2.2.T. Integer Attributes 

'Extended..Image 

Usage : 

X’Extended .Image (Item,Widtb3 a se3ased,Space_IF -Positive) 

Returns the image associated with item as defined in Text JO.lntegerJO. The Text JO 
definition states that the value of Item is an integer literal with no underlines, no exponent, no 
leading zeros (but a single zero for the zero value), and a minus sign if negative. If the resulting 
sequence of characters'to be .output has fewer than Width characters, leading spaces are first 
output.to make up the difference. (LRM.i4.3;7:10,14.3.7:11) 

For a prefix rX that is a discrete type or subtype; this attribute is a function that may have 
more than bne parameter. The parameter Item must be an integer value. The resulting string is 
without underlines, leading zeros, or trailing spaces. 

Parameter. Description:! 


Item 

The item for which you want the image: it is passed to the 
function. Retired 

Width 

The minimum number of characters to be.in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. Optional 

Base 

The base in which the image is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in base notation or not. if no preference is specified, the de¬ 
fault (false) is assumed. Optional 

SpaceJfJPositive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples : 

Suppose the following subtype were declared: 

subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended_Inage(S) = '5* 

X’Extended Image(5,0) = '5’ 

X’Extended_Iaage(5,2) = ■ S' 

X’Extended_Ixage(5,0,2) = *101’ 

X’Extended_Iisage(5,4,2) = * 101 1 

X’Extended_Ioage(5,0,2,True) = *2#101#” 

X'Extended_Inage(5,0,10,False) = 'S’ 

X’Extended_Iaage(5,0,10,False,True) = * 5* 

X’Extended-lBageC-l.O.lO.False.False) = ’-l* 

X’Extended_l3age(-l,0,10,False,True) = *.l* 

X’Extended_Iaage(-l,l,10,False,True) = ’-1" 


J1ATJG89 


REF-1470N-Vl.l(U.EG8) © 1989 TeleSoft 


:-21 




TeleGen2-Reference Information for UNIX to EG8K 

X’Extended_Image(-l,0;2,True,True) = 

X’Extended.Trcage(-1,10,2,True,True) = ' -2#1#’ 

’Extended-Value 

Usage: 

X’Extended-Valae(Item) 

Returns the value associated with Item as defined in Text_IO.Integer_IO. The Text-JO definition 
states that given a string, it reads itn integer value from the beginning of the string. The value 
returned corresponds to the sequence input. (LRM 14.3.7:14) 

For a prefix X that is a discrete type or subtype, this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 

Parameter Description: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type X. Required 


Examples: 

Suppose the following-subtype were declared: 

Subtype X is Integer Range -10..16; 

Then the following would be true: 


X’Extended—Value('S’) = S 
X’Extended_Value(’ 5’) = 5 
X'Bxtended_Yalue('2{jl01# ’) = 5 
X'Extended-Value(*-1’) = -1 
X’Extended_Yalue(* -1*) = -1 


'Extended-Width 


Usage: 

X'Extended_Width(Base,Ba8ed.Space_lf_Positive) 

Returns the width for subtype of X. 

For a prefix X that is a discrete subtype, this attribute is a function that may have multiple 
parameters. This attribute yields the maximum image length over all values of the type or 
subtype X. 


3-22 


REF-1470N-V1.1(U,E68) © 1989 TeleSoft 


31AUG89 







LRM ANNOTATIONS 


Parameter Descriptions: 


Base 

The base for which the width will be calculated. If no base 
is specified, the default. (10) is assumed. Optional 

Based 

An indication of whether the subtype is stated in based no¬ 
tation. If no value for based is specified, the default (false) 
is assumed. Optional 

Space_If_Positive 

An indication of whether or not the sign bit of a positive in¬ 
teger is included in the string returned. If no preference is 
specified, the default (false) is assumed. Optional 


Examples: 

Suppose the following subtype were declared: 

Subtype X is Integer Range -10..16; 
Then the following would be true: 


X’Extended_Width 

= 3 -- "-10' 

X’ExtendedLWidth(10) 

= 3 - "-10' 

X’Extende<L.Width(2) 

= 5 - "10000' ■ 

X ’Extended_Width(10,True) 

- 7 - "-mm" 

X’ExtendecLWidth(2,True) 

= 8 -- "OilOOOOi" 

X'ExtendedLWidth(10.False,True) 

= 3 - » 16" 

X’Extended_Width(10,True,False) 

= 7 -- "-10(10*" 

X 1 ExtendedLWidth(10,True,True) 

= 7 --" mi$i" 

X’Extended_Width(2,True,True) 

= 9 - " SilOOOOi" 

X 1 ExtendedLWidth(2,False,True) 

= 6 - " 10000' 


31AUG89 


REF-1470N-V1.1(U.E68) © 1989 TeleSoft 


3-23 









TeleGen2 Reference Information for UNIX to EOSK 


3.8.2.Z.2. Enumeration Type Attributes 

’Extended. Image 

Usage : 

X’Extended_Image(Item,Width,Uppercase) 

Returns the image associated with Item as defined in Text_10.Enumeration_IO. The TextJiO 
definition states that given an enumeration literal, it will output the value of the enumeration 
literal (either an identifier or a character literal). The character case parameter is ignored for 
character literals. (LRM 14.3.9:9) 

For a prefix X that is a discrete type or subtype; this attribute is a function that may have 
more that one parameter. The parameter Item must be an enumeration value. The image of an 
enumeration value is the corresponding identifier, which may have character case and return 
string width specified. 

Parameter Descriptions : 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Width 

The minimum number of characters to be in the string that 
is returned. If no width is specified, the default (0) is as¬ 
sumed. If the Width specified is larger than the image of 
Item, the return string is padded with trailing spaces, if the 
Width specified is smaller than the image of Item, the de¬ 
fault is assumed and the image of the enumeration value is 
output completely. Optional 

Uppercase 

An indication of whether the returned string is in uppercase 
characters. In the case of an enumeration type where the 
enumeration literals are character literals. Uppercase is ig¬ 
nored and the case specified by the type definition is taken. 

If no preference is specified, the default (true) is assumed. 
Optional 


3-24 


REF-14T0N-Vl.l(U.E68) © 1989 TeleSoft 


31AUG89 



LRM ANNOTATIONS 


Examples : 

Suppose the following types were declared: 

type X is (red, gTeen, blue, purple); 
type Y is (’a’, ’B’, ’c’, ’D’); 

Then the following would be true: 

X’Extended-Inage(red) 

X’Extended_Inage(red, 4) 

X’E*tended_Isage(red,2) 

X’Extended-Iaage(red,0,false) 

X’Extended-Inage(red,10,false) 

Y’Extended—Image(’a’) 

Y’Extended-Image(’B’) 

Y’Extended-Inage(’a’,6) 

Y’Exteuded_Inage(’a’,0,true) 

’Extended-Value 
Usage : 

X’Extended_Value(Item) 

Returns the image associated with Item as defined in Text_IO.Enumeration_IO The Text_]0 
definition states that it reads an enumeration value from the beginning of the given string and 
returns the value of the enumeration literal that corresponds to the sequence input. (LRM 
14.3.9:11) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 


a "RED" 

= "RED ’ 
= "RED" 

= "red" 
= "red 

- t: a i it 

= *’B’" 
= "’ a ’ 

= *’a.>» 


31AUG89 


REF-1470N-V1.1(U.E68) © 1989 TeleSoft 


3-25 





TeleGen2 Reference Information for UNIX to E68K 


Parameter Descriptions : 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type of X. Required 


Examples: 

Suppose the following type were declared: 

type X is (red, green, blue, purple); 


Then the following would be true: 

X’Extended_Value(*red*) = red 

X’Extended_Value(* green') = green 

X’Extended_Value(* Purple*) = purple 
X’Extended_Value(* GreEn ') = green 


’Extended_Width 


X’Extended_Width 
Returns the width for subtype of X. 

For a prefix X that is a discrete type or subtype: this attribute is a function. This attribute 
yields the maximum image length over all values of the enumeration type or subtype X. 
Parameter Descriptions : 

There are no parameters to this function. This function returns the width of the largest (width) 
enumeration literal in the enumeration type specified by X. 

Examples : 

Suppose the following types were declared: 

type X is (red, green, blue, purple); 
type Z is (XI, X12, X123, X1234); 

Then the following would be true: 

X’Extended_Width = 6 - "purple" 

Z’Extended_Width = 5 - "Xl23i" 


5-26 


REF-1470N-Vl.KU.E68) © 1989 TeleSoft 


S1AUG89 





LEM ANNOTATIONS 


3.S.2.2.3. Floating Point Attributes 

’Extended_I.mage 

Usage : 

XTbctended_In3age(Iten2F 0re »Aft*Exp3ase3ased) 

Returns the image associated with Item as defined in Text_IO.Float_10. The TextJO definition 
states that it outputs the value of the parameter Item as a decimal literal with the format defined 
by the other parameters. If the value is negative, a minus sign is included in the integer part of 
the value of Item. If Exp is 0, the integer part of the output has as many digits as are needed to 
represent the integer part of the value of Item or is zero if the value of Item has no integer part. 
(LRM 14.3.8:13, 14.3.8:15) 

Item must be a Real value. The resulting string is without underlines or trailing spaces. 
Parameter Descriptions: 


Item 

The item for which you want the image; it is passed to the 
function. Required 

Fore 

The minimum number of characters for the integer part of 
the decimal representation in the return string. This in¬ 
cludes a minus sign if the value is negative and the base 
with the ’=’ if based notation is specified. If the integer 
part to be output has fewer characters than specified by 
Fore, leading spaces are output first to make up the 
difference. If no Fore is specified, the default value (2) is as¬ 
sumed. Optional 

Aft 

The minimum number of decimal digits after the decimal 
point to accommodate the precision desired. If the della of 
the type or subtype is greater than 0.1. then Aft is 1. If no 
Aft is specified, the default (X’Digits-1) is assumed. If based 
notation is specified, the trailing is included in Aft. Op¬ 

tional 

Exp 

The minimum number of digits m the exponent. The ex¬ 
ponent consists of a sign and the exponent, possibly with 
leading zeros. If no Exp is specified, the default (3 ) is as¬ 
sumed. If Exp is 0. no exponent is used. Optional 

Base 

The base that the image is to be displayed m. If no base is 
specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


31AUG89 


REF-1470N-Vl.l(U.E68) © 1989 TeleSoft 


S-27 





TeleGen2 Reference Information for UNIX to E68K 


Examples: 

Suppose the following type were declared: 

type X is digits 5 range -10.0 .. 16.0; 

Then the following would be true: 

X ’Extended-Image(5.0) 

X ’ Extended.. laage (5.0,1) 
X’Extended_Isage(-S.O,l) 
X’Extended-Isage(5.6,2,0) 
X’Extended_lE3ge(5.0,2,0,0) 

X’Extended-Lsage(5.0,2,0,0,2) 

X’Extended-Image(5.0,2,0,0,2,True) 
X’Extended-Image(5.0,2,2,3,2,True) 


■ 5.0000E-00’ 

'5.0000E-00* 

•-5.0000E+00* 

* S.OE+OO* 

* 5.0* 

* 101 . 0 * 

* 2 # 101 . 0 £" 

*2#l.l#E-02* 


’Extended-Value 


Usage : 

X’Extended—Value(Item) 

Returns the value associated with Item as denned in Text_JO.Float_IO. The TextJO definition 
states that it skips any leading 2 eros. then reads a plus or minus sign if present then reads the 
string according to the syntax of a real literal. The return value is that which corresponds to the 
sequence input. (LRM 14.3.8:9, 14.3.8:10) 

For a prefix X that is a discrete type or subtype; this attribute is a function with a single 
parameter. The actual parameter Item must be of predefined type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Constraint-Error is raised. 

Parameter Descriptions: 


Item 

A parameter of the predefined type string; it is passed to 


the function. The type of the returned value is the base 


type of the input string. Required 


Examples: 

Suppose the following type were declared: 


type X is digits 5 range -10.0 .. 16.0; 
Then the following would be true: 

X’Extended_Valuc(*5.0") = 5.0 
X’Extended_Value(*0.SEl*) = 5.0 
X’Extended-Value("2#1,01#E2") = 5.0 


!-28 


R£F-147ON-Vl.l(U.E08) © 1989 TeleSoft 


31AUG89 







UShctetided 7 Hgia 
Usage 

X2acjtdJHg3j3«t) 

Remms tbe usmber of digits egrg hsscga the mantr-g. camcoeS 


cc tbe: 


Paaagg Descbacc 

Base Toe case mat tie snheype s derred ss. H no case 5s 

. spemied. the a£t~z (23) 5s assmasd. O z ts r si d 

Ecafe: 

Suppose she sbKowdbg type were decizred: 

lior 2 is ddgins 5 range -10.0 .. 1S.0; 

Teen one following waste be noe 
I’nxnendedJHgihs = 5 

3.S-2.2.4. Fixed point Attributes 


’Extended-.Isaage 
Usage: 

X'£gesdtd.Iou;tiIigxF<CT^fi.«y3»t3«tdi 

Returns the image assoeuaten with Item as censed s Ter^JOTaeiJO. Tie TotJO oesnee 
states tnat it outputs cne value of tne parameter hem as a decimal nteral -ern tbe soma: cennec 
3v tne otser parameters. If the raise rs negative. a mines sign is induced is tbe integer part o: 
tne value of Item. If nxn is 0. the .steger part of tne output sas as many digits as are seeded to 
represent tae integer part cf the value of Item or is rero if trw - amr of item has no integer part. 
(LRM 14.3.5:13. 14.3.5:151 

For a prefix X tnat ss a discrete type or subtype: this attribute is a iuseicn mat may have 
more than one parameter. The parameter Item must be a Real vasoe. TV resulting string is 
without underlines or trailing spaces. 


31AUG89 


RXF-1470N-Vi.KU.E68i e, 1989 TeleSoft 


-39 







H M M H M W M M 




|jtest 

l 



frrrerryy- ZCISSSSS& 


frees 

f ioc , ,*-r.Tn c_oer ec eszeazagr 

5 far tie ranges sart cf: 


F As 

fl 


3ase 


3ased 


tie ass] :c. ' Mr7V . :rrr j- ti- te^sa ssi=S- be- : 

cases a sear s £5= 5 f id- *alae 3 2^ tie 5 ms* • 

■=sb tie ’#* c based sccatast 5s spes5ed- £3 :5e 5taje - 
p^n to oe eese sas fewer csasac/rrs ties ssesses s* < 
rote, 'fafn; s«w ere cctpet Sat to stase tp to- - 
cSaraaec. H do Ferre 5s sp ffprd . toe cevr-h eeJoe (2f 5s as- * 
« .— - ■ »■•■ Oztzazsl 

~ cm toe- toe egta! 

s cessed. if tie dec* of 
tie ope cr sstsype 5s sre 2 tee tsaa 0.2. toss Aft 5s I. if 30 
Aft 5s spsetosd. tire sederit iSIKpa-Ji 5s astoei. if 
based actaaec 5s ssesdded- toe casta; *#" 5s isc h aded 5o 
Aft. 

Tiae —— —1 ember go dt;iis 5a toe exposeat: 3 e etc- 
aooest exsso oi a sc 23 c toe eoooet. scass; witts 
tens. C ao Ebrp 5s s?«55ed- toe deficit '3 5s as- 
5f tn 5s 0. ao expeaea: 5s toed. Opetesss 


toe case 3 wsata toe saa-e 3 to oe sapiaxes. it ao case 
5s speeded. tor deficit ' JOi is assesses. Gpzosci 
As iacacatsoa of aaetder »os was: ttse stars; rets rare to oe 
5a based aotatioa or act. if ao preferesce 3 species. tie 
cefaslt 'fitser 5s a ssess ed- Oorassci 


tx a rsa oes: 

eeppese dt folic^ds; tope »c« seriated: 

t?pe I is delta 0.1 rasge -10.0 .. 17.0: 
Tbes tbe tcBowtag weeid 5>e tree: 


’oxtesded .Is?.ge(5.C) 

— 

* 5.005-00' 

’£xte=ded_Isoe e (5.o.1) 

- 

'5.005-00' 

’Erte—'ed Tsage(-5.0,1~ 

- 

*-5.005-00' 

'oxtesded Iszge(5.0.2.0) 

- 

* 5.05-00' 

’oxtesded_Isage(5.0,2,0,0) 

= 

’ 5.0' 

’Extended-Tsage(5.0,2,0,0.2) 

= 

'101.0' 

’Exte--ed 7sagefo.0,2,0,0.2,Tree, 

= 

'2=101.05' 

*Exte-~ed.Tsage(5.0,2,2,3.2.~rae) 

= 

'2=1.1=5-02' 


5-50 


REF-J<T0N-Vi.j(U.E6SI $. 1989 TeleSofi 


1AUGS9 



LHM ANNOTATIONS 


fSgtcnced—Vaiee 

Cars 

X’Extanded-Valneflmage) 

2cos re- xa i se asaciai whh hen as censed in Text_IO.Fixed_!0- The TextJEO definition 
states tsst ts siips any feeding lams. reads a phis or minus sign if preseat, then reads the string 
according to rise syntax of a real literal The retain value is that which corresponds to the 
seqnence input. (LRM 143i4, liXSrlO) 

Pec a predr X is a discrete type or subtype: this attribute is a function with a single 
parameter- The actual parameter Item must be of predenned type string. Any leading or 
trailing spaces in the string X are ignored. In the case where an illegal string is passed, a 
Cosstmint_pmor is raised. 


Parameter Descriptions: 


( Image { parameter of the predenned type string. The type of the re- | 

: . tamed value is the base type of the input string. Rcc--:rcd f 

tamieg 

Suppose the following type were declared: 

type I is delta 0.1 range -10.0 
Then the following would be true: 

I’Extended-Yalue(*S.0*) 

I ’ Extended_Value ( 1 0. or.1 ’ ) 

X , Exte=ded_Yalue(’2#I.01|E2«) 

’Extended-pore 
Usage: 

X*Exteaded—Fore(Base-Sased) 

Returns the minimum number of cnaracters required for the integer part of the based 
representation of X. 


= 5.0 
= 5.0 
= 5.0 


HAUG89 


REF-U70N-Vl.l(t.\E68) © 1989 TeleSoft 


3-31 






TeleGen2 Beference Information for UNIX to EG8K 


Parameter Descriptions: 


Base 

The base in which the subtype is to be displayed. If no base 
is specified, the default (10) is assumed. Optional 

Based 

An indication of whether you want the string returned to be 
in based notation or not. If no preference is specified, the 
default (false) is assumed. Optional 


Examples: 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.1; 

Then the following would be true: 

X’Extended-Fore =3 -- ’-10' 

X’Extended_Fore(2) =6 * 10001* 

’Extended _Aft 


Usage: 

X’Ext ended—Aft (Base .Based) 

Returns the minimum number of characters required for the fractional part of the based 
representation of X. 

Parameter Descriptions: 


j Base 

The base in which the subtype is to be displayed If no base 

1 

| is specified, the default (10) is assumed. Optional 

| Based 

An indication of whether you want the string returned to be 

| 

in based notation or not. If no preference is specified, the 


default (false) is assumed. Optional 


Examples : 

Suppose the following type were declared: 

type X is delta 0.1 range -10.0 .. 17.1; 
Then the following would be true: 

X’Extended—Aft = 1 -"l" from 0 2 

X’Exieuded_Af t(2) =4 - "0002" from Si0 0002* 


3-32 


REF-14T0N-VZ.KU.E68) © 1989 TeleSoft 


31AUG89 





LRM ANNOTATIONS 


3.8.3. Package System. The current specification of package System is provided below. 

package System is 

type Address is access integer; 

type Subprogram-Value is private; 

type Name is (TeleGen2); 

System-Name : constant name := TeleGen2; 

Storage—Unit : constant := 8; 

Memory-Size : constant := (2 ** 31) —1; 

-- System-Dependent Named Numbers: 

- See Table S-2 for the values jar attributes oj 

— types Float and Long _ Float 

Min_Int : constant := -(2 ** 31); 

Max_Int : constant := (2 •» 31) -1; 

Max-Digits : constant := 13; 

Max_Mantissa : constant := 31; 

Fine-Delta : constant := 1.0 / (2 -- Max_Mantissa); 

Tick : constant := 10.0E-3, 

Other System-Dependent Declarations 

subtype Priority is integer range 0 .. 63; 

private 

end System; 


31AUG89 


REF-1470N-Vl.l(U.E68l © 1989 TeleSoft 


3-33 




