REPOR'*’ 




AGE 


OPMNo. 


PuMe Kpaii^ bufdan kr this a»ll« 
and mainlainina ttw dka naadad, at 
tugB***^^"* ** MdueinB thia hiadar 
22a02-4M2. Mid to Iba ONiea ol Ink 


K m dnglliatinwtoria¥iaMnginal)ueliont.aaaraMnea>ia>insdalatauiatig««ianM 

m\ 1 M— m\ V # K lia dunton aatimMa er any alliM aapaM oI thia aaltetion oI mtgnnMm. ndudira 

w *,|ionaandRaaorta. 1218Ja«a*aonDaina»*Bl»»ay.Suaaiao*.Ail*|(toi.VA 


aabingten, DC 80603. 





5. FUNDIN 


VADS Systew V/88 RgHEASE 4 VAda-110-8080 Version 6.2, Host: 
Data General AViiON 530(88100), Target: Same as the Host 
930901W1.11327 


Authors: 

Wright-Patterson AFB 


^RFORMING ORGANtZATiON NAM£(S) AND 

Ada Validating Facility, Language Control Facility ASD/SCEL 

Bldg. 676, Room 135 

Wright Patterson AFB, Dayton OH 45433 



SORING^MONITORING AGENCY NAM£(S) AND 

Ada Joint Program Office 
The Pentagon, Rm 3E118 
Washington, DC 20301*3080 


DTIC 

ELECTE 


8. PERFORMING 
ORGANIZATION 


10. SPONSORINCVMONITORING 
AGENCY 





12a. DISTRIBUTIONIAVAILABILITY 

Approved for public release; distribution unlimited 


3. (Maximum 200 

VADS system V/88 Release 4 VAda-110-8080 Version 6.2, Host: Data General AViiON 530 (881( 



Target: Same as Host , 930901W1.11327 , ACVC 1.11 


14. SUBJEC 


15. NUMBER OF 


Ada programming language, Ada Compiler Val. Summary Report, Ada Comp!,. ep.re 

• ■'“‘’"S' 


17. 

CLASSIFICATION 

UNCLASSIFED 


18. SECURITY 

UNCLASSIFED 


19. SECURITY 
CLASSIFICATION 

UNCLASSIFED 


20, LIMITATION OF 

UNCLASSIFED 


Standard Form 298, ( 
Praacribed by ANSI Sid. 















AVF Cc»itrol Number: AVF-VSR-574.0893 

Date VSR Completed: Septeoriber 28 , 1993 

93-07-23-VRX 


Ada COMPILER 
VALIDATION SUMMARY REPORT: 

Certificate Number: 930901W1.11327 
Verdix Corporation 

VADS SYSTEM V/88 RELEASE 4/VAda-110-8080, Version 6.2 
Data General AViiON 530 (88100) under DG AViiON DG/UX Release 5.4.2 


(Final) 


Prepared By: 

Ada Validation Facility 
645 C CSG/SCSL 

Wright-Patterson AFB OH 45433-^503 


93 l2 13 027 







Certificate information 


The folloinring Ada implementation was tested and determined to pass ACVC 
1.11. Testing was completed cm September 1, 1993. 

Compiler Name and Versim: VADS SYSTEM V/88 RELEASE 4 

VAda>110-8080, Version 6.2 

Host Computer System: Data General AViiCN 530 (88100) 

under D6 AViiON DG/UX Release 5.4.2 

Target Computer System: Same as host 

Customer Agreement Number: 93-07-23-VRX 


See section 3.1 for any additional information about the testing 
environment. 

As a result of this validation effort, Validation Certificate 
930901W1.11327 is awarded to Verdix Corporaticxi. This certificate expires 
two years after M1L-STI>-1815B is approved ANSI. 


This report has been reviewed and is approved. 


^ ^ f r r 

Ada Validation Facili^ 
Dale E. Lange 
Technical Director 
645 CCSG/SCSL 
Wright-Patterson AFB CXI 




45433-6503 



Ada V^i^tibn Organization 
DirectorVICcmputer and Software Engineering Division 
Institute'^r Defense Analyses 
Alexandria VA 22311 


Ada Joint Program Office 
n. Dirk Rogers, Major, USAF 
Acting Director 
Department of Defense 
Washington DC 20301 


Accei:icn For 

NTIS CR-’-.i'i 
DT!C 

i 


By. 

DiS.t' / 

Avtiil3b i!^./ 


Dist 


u 


Av.^ii jr.ii/ 

Spv.CJO! 


DTIC QUALITY INSPECTED 8 










DEOARATIGN OF CCNFQBMANCE 


The following declaration of conformance was supplied by the custcner. 


Declaration of Conformance 
Customer: Verdix Corporation 


Ada validation Facility: 645 C-CSG/SCSL 

Wri^it-Patterson AFh OH 45433-6503 

ACVC Version: 1.11 
Ada Uqplementation: 

Ada Conpiler Name and Version: VADS SYSTEM V/88 RELEASE 4 

VAda-110-8080, Version 6.2 

Host Caqxiter System: Data General AViiCN (88100) 

under DG AViiON DG/UX Release 5.4.2 

' Target Computer System: Same as host 

Declaration: 

I, the undersigned, declare that I have no 
knowledge of deliberate deviations from the Ada Language 
Standard ANSI/HIL-STD-1815A ISO 8652-1987 in the implementation 
listed above. 













TABLE OF aXmNTS 


CHAPTER 1 INTRODUCTION 

1.1 USE OF THIS VALIDATION SUMMARY REPORT.1-1 

1.2 REFERENCES.1-2 

1.3 ACVC TEST CLASSES.1-2 

1.4 DEFINITION OF TERMS.1-3 

CHAPTER 2 IMPLEMENEATIGN I»3>ENI»NCIES 

2.1 WITRDRAMN TESTS.2-1 

2.2 INAPPLICABLE TESTS.2-1 

2.3 TEST MOOIFICATIQNS.2-4 

CHAPTER 3 PROCESSING INFORMATION 

3.1 TESTING ENVIRONHE34T.3-1 

3.2 SUMMARY OF TEST RESULTS.3-1 

3.3 TEST EXECUTION.3-2 

APPENDIX A MACRO PARAMETERS 

APPENDIX B COMPILATION SYSTEM OPTIONS 


APPENDIX C 


APPENDIX F OF THE Ada STANDARD 


















CHAPTER 1 
INIROOUCTZON 


The Ada implementation described above was tested according to the Ada 
Validation Procedures [Pro90] against the Ada Standard (Ada83] xising the 
current Ada Compiler Validation Capability (ACVC). This vali^tion Summary 
Report (VSR) gives an account of the testing of this Ada implementation. 

For any tectmical terms used in this report, the reader is referred to 
(Pro90]. A detailed description of the ACVC may be found in the current 
ACVC User's Guide [UG89]. 


1.1 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the Ada 
Certification Body may make full and free public disclosure of this report. 
In the united States, this is provided in accordance with the "Freedom of 
Information Act" (5 U.S.C. #552). The results of this validation apply 
only to the computers, operating systems, and compiler versions identified 
in this report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and con^lete, or that the subject implementation has no 
nonconformities to the Ada Standard other than those presented. Copies of 
this report are available to the public from the AVF vAiich performed this 
validation or from: 

National Technical Information Service 
5285 Port Royal Road 
Springfield VA 22161 

Questions regarding this report or the validation test results should be 
directed to the AVF which performed this validation or to: 

Ada Validation Organization 

Computer and Software Engineering Division 

Institute for Defense Analyses 

1601 Nbrth Beauregard Street 

Alexandria VA 22311-1772 










INUtOmCTZCM 


1.2 BEFERENCES 

[Ada83] Reference Manual for the Ada Proqranning Lanquage, 
AMS1/W1L-Stt)-1815A, Febni^cylSflS and ll6 B6g2-t587. 

[Pro90] Ada Compiler Validation Pryedures # Version 2.1, Ada Joint 
Program Office, August 19d0. 

[UG89] Ada Compiler Validation Capability User^s Guide , 21 June 1989. 


1.3 ACVC TEST CLASSES 

Caqpliance of Ada inplementations is tested means of the ACVC. The ACVC 
contains a collection of test programs structured into six test classes: A, 
B, C, D, E, and L. The first letter of a test name identifies the class to 
which it belongs. Class A, C, D, and E tests are executable. Class B and 
class L tests are expected to produce errors at ccopile time and link time, 
respectively. 

The executable tests are written in a self-checking manner and produce a 
PASSED, FAILED, or NOT APPLICABLE message indicating the result when they 
are executed. Three Ada library \jnits, the packages REPORT and SPPRT13, 
and the procedure CHECK FILE are used for this purpose. The package REPORT 
also provides a set of Identity functions used to defeat some compiler 
optimizations allowed the Ada Standard that would circumvent a test 
objective. The package SPPRT13 is used by many tests for Chapter 13 of the 
Ada standard. The procedure CHECK FILE is used to check the contents of 
text files written by some of the ^lass c tests for Chapter 14 of the Ada 
Standard. The operation of REPORT and CHBCK_FILE is checked by a set of 
executable tests. If these xmits are iK>t operating correctly, validation 
testing is discontinued. 

Class B tests check that a compiler detects illegal language usage. Class 
B tests are not executable. Each test in this class is compiled and the 
resulting coopilation listing is examined to verify that all violations of 
the Ada Standard are detected. Some of the class B tests contain legal Ada 
code ^ich must not be flagged illegal the coopiler. This behavior is 
also verified. 

Class L tests check that an Ada inplementation correctly detects violation 
of the Ada Standard involving multiple, separately compiled units. Errors 
are expected at link time, and execution is attenpted. 

In some tests of the ACVC, certain macro strings have to be replaced by 
implementation-specific values — for exasple, the largest integer. A list 
of the values \ised for this inplementation is provided in Appendix A. In 
addition to these anticipated test modifications, additional changes may be 
required to remove unforeseen conflicts between the tests and 
implementation-dependent characteristics. The modifications required for 
this inplementation are described in section 2.3. 


1-2 








iNmnucncN 


For each Ada inplenentatim, a custcoized test suite is produced by the 
AVF. This customization consists of making the modificatims described in 
the preceding paragraph, removing withdrawn tests (see secticm 2.1), and 
possibly removing some inapplicable tests (see section 2.2 and (UG89]). 

In order to pass an ACVC an Ada implnuentation must process each test of 
the customized test suite according to the Ada Standard. 


1.4 DEFINITION OF TERMS 

Ada Compiler The software and any needed hardware that have to be added 
to a given host and target computer system to allow 
transformation of Ada programs into executable form and 
execution thereof. 

Ada Compiler The means for testing compliance of Ada implementations. 
Validation consisting of the test suite, the support programs, the ACVC 
Capability user's guide and the template for the validation summary 

(ACVC) report. 

Ada An Ada conpiler with its host cooputer system and its 

Inplementation target computer system. 

Ada Joint The part of the certification body vdiich provides policy and 
Program guidance for the Ada certification system. 

Office (AJPO) 

Ada The part of the certification body which carries out the 

Validation procedures required to establish the compliance of an Ada 
Facility (AVF) implementation. 

Ada The part of the certification body that provides technical 

Validation guid^ce for operations of the Ada certification system. 

Organization 
(AVO) 

Coopliance of The ability of the inplementation to pass an ACVC version, 
an Ada 

Isplementation 

Computer A functional unit, consisting of one or more computers and 

System associated software, that uses conraon storage for all or 

part of a program and also for all or part of the data 
necessary for the execution of the program; executes 
user^written or user-designated programs; performs 
user-designated data manipulation, including arithmetic 
operations and logic operations; and that can execute 
programs that modify themselves during execution. A 
conputer system may be a stand-alone unit or may consist of 
several inter-connected units. 


1-3 




INIROOUCTZON 


Coafocmity Fulfillaent by a product, process, or service of all 
requirements specified. 

Customer An individual or corporate entity vdvo enters into an 

agreement with an AVF which specifies the terms and 
COTditions for AVF services (of any kind) to be performed. 

Declaration of A formal statement from a customer assuring that ccmformity 
Conformance is realized or attainable on the Ada implementation for 
which validation status is realized. 

Host Computer A computer system vAiere Ada source programs are transformed 
System into executable form. 

Inapplicable A test that ccxitains one or more test objectives found to be 
test irrelevant for the given Ada iaplementation. 

ISO International Organization for Standardization. 

LRM Ihe Ada standard, or Language Reference Manual, published as 

ANSI/MIL-STD-iaiSA-lSaa and ISO S652-19S7. Citations from 
the LRM take the form "<section>.<subsection>:<paragrai^>.'* 

Operating Software that controls the execution of pr^rams and that 
System provides services such as resource allocation, scheduling, 

input/output control, and data management. Usually, 
operating systems are predcminantly software, but partial or 
cooplete hardware isplementations are possible. 

Target A ccaputer system vdiere the executable form of Ada programs 

Conputer are executed. 

System 

Validated Ada The cospiler of a validated Ada inplementation. 

Ccmpiler 

Validated Ada An Ada inplementation that has been validated successfully 
Inplementation either by AVF testing or by registration [Pro90]. 

Validation The process of checking the conformity of an Ada compiler to 
the Ada programming language and of issuing a certificate 
for this inplementation. 

Withdrawn A test found to be incorrect and not used in conformity 

test testing. A test may be incorrect because it has an invalid 

test objective, fails to meet its test objective, or 
contains erroneous or illegal use of the Ada programning 
language. 


1-4 





CHAPTER 2 


IMPLEMENTATION DEPENDENCIES 


2.1 WITHDRM4N TESTS 

The following tests have been withdravn by the AVO. Hie rationale for 
withdrawing each test is available from either the AVO or the AVF. The 
publication date for this list of withdrawn tests is 2 August 1991. 


E28005C 

B28006C 

C32203A 

C34006D 

C35508I 

C3S508J 

C35508M 

C35508N 

C35702A 

C35702B 

B41308B 

C43004A 

C45114A 

C45346A 

C45612A 

C45612B 

C45612C 

C45651A 

C46022A 

B49008A 

B49008B 

A74006A 

C74308A 

B83022B 

B83022H 

B83025B 

B83025D 

C83026A 

B83026B 

C83041A 

B85001L 

C86001F 

C94021A 

C97116A 

C98003B 

BA2011A 

CB7001A 

CB7001B 

CB7004A 

CC1223A 

BC1226A 

CC1226B 

BC3009B 

BD1B02B 

BD1B06A 

AD1B08A 

BD2A02A 

CD2A21E 

CD2A23E 

CD2A32A 

CD2A41A 

CD2A41E 

CD2A87A 

CD2B15C 

BD3006A 

BD4008A 

CD4022A 

CD4022D 

CD4024B 

CD4024C 

CD4024D 

CD4031A 

CD4051D 

CD5111A 

CD7004C 

ED7005D 

CD7005E 

AD7006A 

CD7006E 

AD7201A 

AD7201B 

CD7204B 

AD7206A 

BD8002A 

BD8004C 

CD9005A 

CD9005B 

CDA201E 

CE2107I 

CE2117A 

CE2117B 

CE2119B 

CE2205B 

CE2405A 

CE3111C 

CE3116A 

CE3118A 

CE3411B 

CE3412B 

CE3607B 

CE3607C 

CE3607D 

CE3812A 

CE3814A 

CE3902B 



2.2 INAPPLICABLE TESTS 

A test is inapplicable if it contains test objectives which are irrelevant 
for a given A/^ inplementation. Reasons for a test's inapplicability may 
be svqpported by documents issued by the ISO and the AJPO known as Ada 
Commentaries and commonly referenced in the format Al-ddddd. For this 
infilementation, the following tests were determined to be inapplicable for 
the reasons invested; references to Ada Commentaries are included as 
appropriate. 


2-1 










INPLEMENTKTION I«PEN[»MCIES 


The following 201 tests have floating-point type declarations 
requiring more digits than SYSTSM.MAX_DIG1TS: 


C24113L..Y (14 tests) 
C35706L..y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45S24L..Z (15 tests) 
C45641L..Y (14 tests) 


C3570SL..Y (14 tests) 
C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46012L..Z (15 tests) 


The following 20 tests chec)c for the predefined type L0MG_INT1XXR; for 
this implementation, there is no such type: 


C35404C C45231C 
C45502C C45503C 
C45613C C45614C 
C55B07A B55B09C 


C45304C 

C45504C 

C45631C 

B86001W 


C45411C 

C45504F 

C45632C 

C86006C 


C45412C 

C45611C 

B52004D 

CD7101F 


C35713C, B86001U, and C86006G chec)c for the predefined type 

LQNG_FIOAT; for this ii^lementation, there is no such type. 


C35713D and B86001Z checlc for a predefined floating-point type with a 
name other than FLOAT, LC]NG__FLQAT, or SIiO!RT_FLQAT; for this 
ifl^lementation, there is no such ^pe. 


A35801E chec)cs that FLOAT'FIRST. .FLOAT'LAST may be used as a range 
constraint in a floating-point type declaration; for this 
inplementation, that range exceeds the range of safe numbers of the 
largest predefined floating-point type and must be rejected. (See 
section 2.3.) 


C45531N..P and C45532H..P (8 tests) check fixed-point operations for 
types that require a SYSTEM.NAX_MANTISSA of 47 or greater; for this 
in^lementation, MAX_MANTISSA is less than 47. 

C45624A..B (2 tests) check that the proper exception is raised if 
MACHINEJOVERFLOWS is FALSE for floating point types aivi the res\:Q.ts of 
various floating-point operations lie outside the range of the Isase 
type; for this implementation, MACHINE_OVERFLCWS is TRUE. 

B86001Y uses the nam of a predefined fixed-point type other than type 
DURATION; for this inplementati'm, there is no such type. 

C96005B uses values of type DURATION'S base type that are outside the 
range of type DURATION; for this inplementation, the ranges are the 
same. 


CD1009C checks v4iether a length clause can specify a non-default size 
for a floating-point type; this implementation does not support such 
sizes. 


2-2 








INPLEMENTATiaa CSPEl^DENCIES 


CD2A84A, CD2A84E, CD2A84I..J (2 tests), and CD2A840 use length clauses 
to specify ncm-default sizes for access types; this iiopieinentation 
does not siq>port such sizes. 

Ihe tests listed in the following table check that USE_ERROil is raised 
if the given file operations are not s\j{^rted for the given 
condsination of mode and access method; this implementation supports 
these operations. 


Test 

File Operation Mode 

File Access Method 

CE2102D 

CREATE 

IN PILE 

SEQUENTIAL 10 

CE2102E 

CREATE 

OUT FILE 

SEQUENTIAL 10 

CE2102F 

CREATE 

INOUT FILE 

DIRECT 10 

CE2102I 

CREATE 

IN FI1£ 

DIRECT 10 

CE2102J 

CREATE 

OUT FILE 

DIRECT 10 

CE2102N 

OPEN 

IN FILE 

SBQUEI^IAL 10 

CE2102O 

RESET 

IN FILE 

SEQUENTIAL 10 

CE2102P 

OPES4 

OUT FILE 

SEQUOniAL 10 

CE2102Q 

RESET 

OUT FILE 

SEQUE34TIAL 10 

CE2102R 

OPEN 

INOUT FILE 

DIRECT 10 

CE2102S 

RESET 

INOUT FILE 

DIRECT 10 

CE2102T 

OPEN 

IN FILE 

DIRECT 10 

CE2102U 

RESET 

IN FILE 

DIRECT 10 

CE2102V 

OPEN 

OUT FILE 

DIRECT 10 

CE2102W 

RESET 

OUT FILE 

DIRECT~I0 

CE3102E 

CREATE 

IN_FILE 

TEXT l5 

CE3102F 

RESET 

Any Mode 

TEXT 10 

CE3102G 

DELETE 


TEXT_I0 

CE3102I 

CREATE 

OUT FILE 

TEXr_I0 

CE3102J 

OPEN 

IN FILE 

TEXT_IO 

CE3102K 

OPEN 

OUT FILE 

TEXT 10. 


CE2203A checks that WRITE raises USE_ERROR if the capacity of an 
external sequential file is exceeded; this inplementation cannot 
restrict file capacity. 

CE2403A checks that WRITE raises USE_ERROR if the capacity of an 
external direct file is exceeded; this implementation cannot restrict 
file capacity. 

CE3304A checks that SET_LINE^LQIC?ni and SET_PAGE_LENGTH raise 
USE_ERROR if they specify an Tnappropriate value for the external 
file; there are no inappropriate values for this implementation. 

CE3413B checks that PAGE raises LAYOUT ERROR vAien the value of the 
page number exceeds COUNT'LAST; for this Implementation, the value of 
COUNT'LAST is greater than 150000, making the checking of this 
objective impractical. 


2-3 








IMPLENENTATZGM DEPENDENCIES 


2.3 TEST NODIFICATZONS 

Modifications (see section 1.3) were required for 23 tests. 

The following tests were split into two or more tests because this 
implementation did not report the violations of the Ada Standard in the way 
expected by the original tests. 

B24009A B33301B B38003A B38003B B38009A B38009B 

B85008G B85008H BC1303P BC3005B BD2B03A BD2D03A 

BD4003A 

A35801E was graded inaE^licable by Evaluation Modification as directed 1:^ 
the AVO. The conpiler rejects the use of the range FLOAT'FIRST. .FLOAT'LAST 
as the range constraint of a floating-point type declaration because the 
bounds lie outside of the range of safe nxmbers (cf. LRH 3.5.7:12). 

CD1009A, CD1009Z, CD1C03A, CD2A22J, CD2A24A, and CD2A31A..C (3 Tests) were 

graded passed by Evaluation Modification as directed 1:^ the AVO. These 
tests use instantiations of the support procedure LENGTH_CHECR, v^ich uses 
Unchecked_Conversion according to the interpretation given in AZ-00590. 
The AVO ruled that this interpretation is not binding under ACVC 1.11; the 
tests are ruled to be passed if they produce Failed messages only from the 
instances of LENGTHjCHECK—i.e, the allowed Report.Failed messages have the 
general form: 

" * CHECK ON REPRESENTATION FOR <TYPE ID> FAILED." 


AD9001B was graded passed ly Test Modification as directed by the AVO. 
This test checks that no bodies are required for interfaced subprograms; 
among the procedures that it uses is one with a parameter of mode OUT (line 
36). This inplemenation does not support pragma INTERFACE for procedures 
with parameters of mode OUT. The test was modified by commenting out line 
36 and 40; the modified test was passed. 


2-4 








CHAPTER 3 

FROCESSINS INPCStHATIGN 


3.1 TESTING ENVIRONMENT 

The Ada in^ileinentation tested in this validation effort is described 
adequately by the information given in the initial pages of this report. 

For technical zukI sales information about this Ada implementation, contact: 

Corey Ashford 
Verdix Corporation 
1600 N.W. Compton Drive 
Aloha, OR 97006-6905 


Testing of this Ada implementation vras conducted at the customer's site by 
a vall^tion team from the AVF. 


3.2 SUMMARY OF TEST RESULTS 

An Ada Implementation passes a given ACVC version if it processes each test 
of the customized test suite in accordance with the Ada Programming 
Language Standard, >diether the test is applicable or inapplicable; 
otherwise, the Ada Isplementation fails the ACVC [Pro901. 

For all processed tests (inapplicable and aj^licable), a result was 
obtained that conforms to the Ada Programming Language Standard. 

The list of items below gives the number of ACVC tests in various 
categories. All tests were processed, except those that were withdrawn 
because of test errors (item b; see section 2.1), those that require a 
floating-point precision that exceeds the isplementation's maximum 
precision (item e; see section 2.2), and those that depend on the support 
of a file system — if none is supported (item d). All tests passed, 
except those that are listed in sections 2.1 and 2.2 (counted in items b 
and f, below). 



PROCESSING INFORMATION 


a) Total Number of Applicable Tests 3805 

b) Total Nunter of withdravm Tests 95 

c) Processed Inapplicable Tests 69 

d) Non-Processed I/O Tests 0 

e) Non-Processed Floating-Point 

Precision Tests 201 

f) Total Nmdier of inapplicable Tests 270 (c-Ki+e) 


g) Total Number of Tests for ACVC 1.11 4170 (a-i-bi-f) 


3.3 TEST EXECUTION 

A magnetic tape containing the custonised test sviite (see section 1.3) was 
taken on-site by the vali^tion team for processing. The contents of tlie 
magnetic tape were loaded onto a Sun workstation and copied over Ethernet 
to the host coiqxiter. 

After the test files were loaded onto the host computer, the full set of 
tests was processed bY the Ada isp>leiaentation. 

Testing was performed using command scripts provided by the customer and 
reviewi^ by the validation team. See Appendix B for a cooplete listing of 
the processing options for this inplementation. It also indicates the 
default options. The options invoked explicitly for validation testing 
during this test were: 

Option/Switch Effect 

-w Suppress warning diagnostics. 


Test output, compiler and linker listings, and job logs were captured on 
magnetic tape and archived at the AVF. The listings examined on-site by 
the validation team were also archived. 


3-2 



APPENDIX A 


MACRO PARAMETERS 


This appendix contains the macro parameters used for customizing the ACVC. 
The meaning and purpose of these parameters are explained in [UG89]. The 
parameter values are presented in two tables. The first table lists the 
values that are defined in terms of the maximum input-line length, which is 
the value for $MAX_IN_LET{—also listed here. These vedues are expressed 
here as Ada string aggregates, where "V“ represents the maximum input-line 
length. 


Macro Parameter 

Macro Value 

$MftX_IN_LEN 

499 — Value of V 

$BIG_ID1 

(1..V-1 -> 'A', V -> 

$BIG_ID2 

(1..V-1 -> 'A', V -> '2') 

$BIG_ID3 

(1..V/2 -> "A') & '3' & 

(1..V-1-V/2 -> 'A') 

$BIG_ID4 

(1..V/2 -> 'A') & '4' & 

(1..V-1-V/2 -> 'A') 

$BIG__INT_HT 

(1..V-3 -> '0') & "298" 

$BIGJIEAL_LIT 

(1..V-5 -> »0') & "690.0" 

$BIG_STRING1 

& (1..V/2 -> 'A') & 

$BIG_STRING2 

& (1..V-1-V/2 -> 'A') & '1' & 

$BLANKS 

(1..V-20 


$MAX LEN_INT_BASED_LITERAL 

"2:" & (1..V-5 -> '0') & "11:" 

$MAX_LEN_REAL_BASED_LITERAL 

"16:" & (1..V-7 «> '0') & "F.E:" 

A-1 



MACRO PARAMETERS 


$MAX_STRING_L1TERAL & (1..V-2 -> 'A') & 


The following table lists all of the other macro parameters and their 
respective values. 


Macro Parameter 

Macro Value 

$ACC_SIZE 

32 

$ALIGMME24T 

4 

$OOUNT_LAST 

2_147_483_647 

$I«FAULT_HEM_SIZE 

16_777_216 

$raaAIJLT_STOR_UNIT 

8 

$I«rAULT_SYS_NAME 

BCSJSELF 

$DELTAJDOC 

0.0000000004656612873077392578125 

$EMTRYJVIX}RESS 

SYSTEM."+"(16#40#) 

$ENTRY_AI»RESS1 

SYSTEM."+"(16#80#) 

$ENTRY_A1XIRESS2 

SYSTEM. "•I'"(16#100#) 

$field_last 

2_147_483_647 

$FILE_TERMINATOR 

r » 

$FZXED_NAHE 

NO_SUCH_TYPE 

$FLGAT_NAHE 

NO_SUCHjrYPE 

$PaRM_STRING 

If N 

$F0RH_STRIMG2 

"CANNOTJlESTRICr_FILE_a^ACITY" 

$GREATER THAN DURATION 

100_000.0 


$GREATER THAN DURATIGN EASE LAST 

T0_00TIF_000.0 

$GREATER_THAN_FLGAT EASE LAST 

1.9E+308 

$GREATER THAN_FLGAT SAFE LARGE 

“ S.TTEBO? 

A-2 










mCBO PARMtETERS 


$GREATER THAN SHORT FLOAT SAFE LARGE 

9.0137 - 

$HIGH_PRIC)RI1Y 99 

$ZLLEGAL EXTERNAL FILE NAHEl 

"Villegal/f ile_nain8/2} J %2102c. dat" 

$ILLEGAL_EXTERNAL_FILE NAME2 

'Vll-lagal/f ile_nane/CE2102C* .dat" 

$ZNAPPROPRIATE LINE LENGTH 

-1 

$INAPPROFRIATE PAGE LENGTH 

-1 

$INCLUDE_PRAGKA1 PRAGMA INCLUDE ("A28006D1.TST'') 

$INCLUDE_PRAGHA2 PRAGMA INCLUN! ("B28006D1.TST") 

$INTBGER_FIRST -2_147_483_648 

$INTBGER_LAST 2_147_483_647 

$INTBGER__LAST__PLUS_1 2_147_483__648 

$INTERFACE_LANGUA(a: C 

$LESS_THAN_DURATION -100__000.0 

$LESS THAN DURATION BASE FIRST 

“ “ “ -1I^_000_000.0 

$LINE_TERHINATOR ASCII.LF & ASCII.FF 

$LCW_PRI0R1TY 0 

8MACHINE_CODE STATEMENT 

” CODE_OMOP -> NOP); 

$MACHINE_CODE__TYPE CaM:_0 

$MANTISSAJDOC 31 

$MAX_DIGITS 15 

$MAX_INT 2_147_483_647 

$MAX_INT_PLUS_1 2_147_483_648 

$MIN_lNr -2_147_483_648 

$NAHE 


TINY INTECXR 












MOO PARMOETERS 


$NM!E_LIST BCS__SELF 

$NMIE_SPBCIFlCAnaa /lisr/acvcl.ll/c/e/X2120A 
$NM!E_SPECIFICAnON2 A«r/«CVCl.ll/C/e/X2120B 
$NMffi_SPECIFICATI0N3 /Usr/acvcl. ll/C/e/X3119A 
$HBG_BASED_INT 16«F000000E* 

$NEWJ!EM_S1ZE 16__777_216 

$NEHr_STOR_UNIT 8 

$NBW_SYS_NAME BCS_SELF 


$PAGE_TERMZNATOR ASCII.FF 

$REOORD_I^ZNITIQN BECCSfD SUSP: OPERAND; END RECORD 
SREOQRpJAME CC»E_0 

$TRSK_SIZE 32 

$TASK_STQRAGB_SIZE 1024 

$TICK 0.01 

$VARIABLE_ADORESS \aR_l'ADDRESS 

$VAR1ABLE_ADDRESS1 VAR_2'A£E3RESS 

$VARIABLE_ADDRESS2 VAR_3'AIOESS 

$Y0UR_PRAGMA PRAGMA PASSIVE 






APPENDIX B 


OGKPILATZGN SYSTEN OPTIGMS 


Ttw coagpiler cations of this Ada inplenentation, as described in this 
Appendix, ace provided the customer. Unless specifically noted 
otherwise, references in this appendix are to coopiler documentation and 
not to this report. 


Syntax 

ada [options] [source_filel... [d3ject_file.o]... 

Arguments 

object_file.o non-Ada dt>ject file names. Ihese files will be passed 
~ on to the linker and will be linked with the specified 

Ada (^ject files. 

options options to the coopiler. These are: 

-A (disassemble) Oisassend^le the tnits in the source file after 
coopiling them. -A can be followed by arguments that further 
define the disassembly display (e.g., -Aa, -Ab, -Ad, -Af, 

-Al, -As). 

a Add hexadecimal display of instruction t^es to 
disassendaly listing, 
b Disassemble the unit body [default], 
d Print the data secticxi (if present) as well, 
f Use the alternative format for output. 

1 Put the disassembly output in file ”file_name.das" 
s Disasseii±>le the unit spec. 

-a file name 

(arBiive) Treat file name as an object archive file created 
1^ ar. Since some arBiive files end with .a, -a is used to 
distinguish archive files from Ada source files. 

-Bstatic/dynamic (SPARCoopiler Ada mly) 

(static) If static is indicated, tlw Ada program is coopiled 

B-1 











OQHPIIATIGN SYSTEM OPnGNS 


and linked statically. The default is dynamic. 

-c suppress the control messages generated when pragma PAGE 
an^or pragma LIST are encountered. 

-D identifier type valtie 

(define) Define an identifier of a specified type and value. 

-d (dependencies) Analyze for dependencies only. Do not do 
semantic analysis or code generation. Update the library, 
marking any defined units as uncompiled. The -d option is 
used by a.make to establish dependencies among new files. 
This option will attefl(>t to do imports for any units 
referenced from outer libraries. This should reduce 
relocation and reduce user disk space usage. 


-E directory 

(error output) Without a directory argument, ada processes 
error messages using a.error and directs a brief message to 
standard output; the raw error messages are left in 
source_file.err. If a directory name is given, the raw error 
output~is placed in directory/source^file.err. The file of 
raw error messages can be us^ as ii^t to a.error. Only 
one -e or <-E option should be used. 

-e (error) Process compilation error messages tising a.error and 
send it to standard output. Only the source lines containing 
errors are listed. Only one -e or -E option should Ise used. 

•-Eferror__file source_file 

(error) Process source file and place any error messages 
in the file indicated 5y error^file. Note that there is 
no space between the -Ef and eTror^file. 


-El directory 

(error listing) Same as the -E option, except that a source 
listing with errors is produced. 

-el (error listing) intersperse error messages among source 
lines and direct to standard output. 

-Elferror_file source_file 

(error listing) Same as the -Ef qption, except that a source 
listing with errors is produced. 

-ev (error vi(l)) Process syntax error messages using a.error, 
enbed them in the source file and call the envircxuoent editor 
ERROR EDITC». If ERR0R _EDIT0R is defined, the environme nt 
variaEle ERROR_PATTERN should also be defined. ERROR_PATTEBN 
is an editor search command that locates the first occurrence 
of '###' in the error file. If no editor is specified, vi(l) 
is invoked. 








OCHPIIATZON SV5T01 OPTIONS 


Th« valu* of the environnent variable ERBORJEMBS, if set, 
is used instead of the default tab settings (8). 

-F (full DIANh) Do not trim the DIANA tree before output to 
net files. TO save disk space, the DIANA tree %d.ll be 
trimmed so that all pointers to nodes that did not involve 
a ti^ree that define a symbol table will be nulled 
(unless those nodes are part of the body of an inline or 
generic or certain other values needing to be retained for 
the debugging or coopilation information). Ihe trimming 
generally rmoves initial valtjes of variables and all 
statements. 

-G (GUAS) Display suggested values for the HiNjSVAS AODR 
and MAX_GUAS_ADDEl INFO directives. " 

-K (keep) Keep the intermediate language (IL) file produced 
by tte coaf>iler frmt end. Ihe IL file will be placed in 
the .Ejects directory with the file name Ada_source. 

-L libraryjname 

(library) Operate in VADS library library_name. 

(Default: current working directory] 

-Ifile abbreviation (VADSself only) 

(library search) This is an option passed to the ld(l) 
linker, telling it to search the specified library file. 
(No space between the >1 and the file aU>reviation.) 

-N unit name 

(main) Produce an executable program by linking the named 
unit as the main program, unitjname must already be 
compiled. It must be either a parameterless procedure or 
a parameterless function returning an integer. The 
executable program will be named a.out unless overridden 
with the ^ option. 

-H source file 

(mainT Produce an executable program by compiling and 
linking source file. The main unit of the program is 
assimied to be Bie root name of the file (for foo.a the 
unit is foo). Only one file may be preceded by -N. The 
executable program will be nami^ a.out unless overridden 
with the -o option. 

-N (no code sharing) Ccmpile all generic instantiaticxis 
without sharing code for their bodies. This option 
overrides the SHABE__BGOY INFO directive and the SHAREJCX)DE 
or SIlARE_BGOy pragmas. 

-0(0-9] 

(optimize) Invoke the code optimizer. An optional digit 
(there is no space before the digit) provides the level of 

B-3 






OQHPILATION SYSTEM OPTIONS 


optindzatioi. The default is -04. 

-0 full qptiinization 

-OO no qptlmization (tise for debugging) 

-01 copy propagaticm, constant fol^ng, removing 
dead variables, subsiJBBing moves between scalar 
variables 

-02 add coonon subexpressicxi elimination within 
basic blocks 

-03 add global coonon subexpression elimination 
-04 add hoisting invariants from lo<^ and address 
qptimizations 

-05 a^ range (^timizations, instruction scheduling 
and OM pass of reducing induction expressions 
-06 no change 

-07 add one more pass of inhiction expression reduction 
-08 add one more pass of inchiction expression reducticxi 
-09 add one more pass of induction e}q>ression 

reduction and add hoisting expressions cosnon to 
the then and the else parts of if statements 

Hoisting from branches (and cases alternatives) can be slow 
and does not always provide significant performance gains so 
it can be suppressed. 

-o executable file 

(output) ^is option is to be umed in conjuncticm with 
the -M option, executable file is the name of the executable 
rather than the default, a.out (self) or a.vox (cross). 

-P Invoke the Ada Preprocessor. 

-R VADS_library 

(reconpile instantiation) Force analysis of all generic 
instantiations, causing reinstantiation of ai^ that are out 
of date. VADS library is the library in which the 
recompilation Is to occur. If it is not specified, the 
recompilation occurs in the current working directory. 

-r (recreate) Recreate the library's GVASJTABLE file. This option 
reinitializes the file and exits. This allows recovery from 
"GUAS exhaxisted" without recoopiling all the files in the library. 

-S (suppress) ^iply pragma SUPPRESS to the entire compilation 
for all suppressible checks. 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (timing) Print timing information for the coopilation. 

-V (verbose) Print compiler version number, date and time of 
coopilation, name of file compiled, command input line, 
totid. coopilation time and error summary line. Storage usage 

B-4 











GGHPILATIGN SYSTEM OPTIQMS 


infomation about the inject file is provided. 

-w (vmnUngs) Suppress warning diagnostics. 
source_file name of the source file to be coopiled. 

Description 

The ada coonand executes the Ada coBopller and ccnpiles the naned Ade 
source file. The file must reside in a VADS library directory. The 
ada.lib file in this directory is modified after each Ada unit is 
coopiled. 

By default, ada produces only object and net files. If the -M qption 
is used, tlM coopiler autonatically invokes a.Id and builds a cooplete 
program with the named library imit as the main program. 

For cross systems, the c(xq;>iler generates object files caa;>atible with 
the host linker in VOX format. The VQK format is discussed in 
^jpendix A of the Prograaner's Guide. 

Non-Ada object files (.o files produced by a coopiler for another 
language) may be given as arguments to ada. These files will be passed 
on to the linker and will be linked with the specified Ada object files. 

Coomand line options may be specified in any order but the order of 
compilation and the order of the files to be passed to the linker can 
be significant. 

Several VADS conpilers may be simultaneously available on a single 
system. Because the ada coninand in any VADS^location/bin on a syston 
will execute the correct compiler conponents based upon visible 
library directives, the option -sh is provided to print the name of 
the components actually executed. 

Program listings with a disassembly of machine code instructions 
are generated ^ a.db or a.das. 

NOTE: If two files of the same name from different directories are 
compiled in the same ada library using the -L option (even if the 
contents and unit names are different), the second compilatim will 
overwrite the first. For example, the coopilation of 
/\tsr/dlrectory2/foo.a -L /asr/vsds/test will overwrite the 
compilation of AuBr/directoryl/foo.a -L /usr/vads/test in the 
VADS library /AisrA^ds/test. 

Diagnostics 

The diagnostics produced by the VADS compiler are intended to be 
self-eiqplanatory. Most refer to the RN. Each Pn reference includes a 
section nundber and optionally, a paragra^di number enclosed in 
parentheses. 





CXMPIIATIGN SYSTEM OPTIOe 


LINKER OPTIGNS 

ThB linker options of this Ada iiqplenientation, as described in this 
^pendix, are provided the custcoer. Unless specifically noted 
otherwise, references in this appendix are to linker documentation and not 
to this report. 


Syntax 

a.Id [options] iinit_naine [linkerjoptions] 

Argixnents 

linker options 

Xll arguments after unit_name are passed to the linker, 
library abbreviations or object files. 

options options to the a.Id coomand. These are: 

-DO (objects) Use partially linked objects instead of archives 
as an intermediate file if the entire list of objects cannot 
be passed to the linker in <xie invocation. This option is 
useful because of limitations in the archiver on some hosts 
(including ULTRIX, HP-UX and System v). (VADSself only) 

-DT (time) Displays how long each phase of the prelinking process 
takes. (VADSself only) 

-Du unit list 

(uni^s) Traces the a<klition of indirect dependencies to the named 
units. (VADSself only) 

-Dx (dependencies) Displays the elaboration dependencies used each 
time a unit is arbitrarily chosen for elaboration. (^ADSself only) 

-DX (debug) Debug memory overflow (\ise in cases vAiere linking 
a large number of units causes the error message "local 
symbol overflow" to occur). (VADSself only) 

-E unit name 

(elaborate) Elaborate unit_name as early in the elaboration 
order as possible. 

-F (files) Print a list of dependent files in order and stnppress 
linking. 

-K (keep) Do not delete the tennorary file containing the list of 
object files to link. Ihis file is only present ^en many object 
files are being linked. (SGI only) 

-L library_name 







CONPILATIGN SYSTEM (XPTIQNS 


(library) Collect information for linking in library name instead 
of the current directory. However, place the executable in the 
current directory. 

-o executable_file 

(output) Use the specified fielname as the name of tt» output 
rather than the default a.out (self) or a.vox (cross). 

-sh (show) Display the name of the tool executable but do not 
execute it. 

-T (table) List the symbols in the elaboration table to standard 
output. 

-U (units) Print a list of dependent units in order and 
suppress linking. 

-V (verbose) Print the linker commamd before executing it. 

-V (verify) Print the linker ccmnand but suppress execution. 

-w (warnings) Suppress warning messages. 
unit_naine 

name of an Ada unit. It must name a non-generic subprogram. 

If unit name is a function, it must return a value cf t^ 
type S7&n]APO. INTEGER. This integer result will be passed back 
to the shell as the status code of the execution. 

Description 

a.Id collects the object files needed to medce unit name a main 
program and calls the ld(l) linker to link togetheT all Ada and 
other lemguage objects required to produce an executable image in 
a.out (self) or a.vox (cross). The utility \jses the net files produced 
by the Ada conpiler to check dependency information, a.Id produces 
an exception matting table and a unit elaboration table and passes 
this information to the linker. The elaboration list generated by 
a.Id will not include library level packages that do not need 
elaboration. Similarly, packages that contain no code that can raise 
an exception will no longer have exception tables. 

a.Id reads instructions for generating executables from the ada.lib 
file in the VADS libraries on the search list. Besides information 
generated by the compiler, these directives also include WITHn 
directives that allow the automatic linking of object modules 
conpiled from other languages or Ada object modules not named 
in context clauses in the Ada source. Any number of WITHn 
directives may be placed into a library but they must be 
numbered contiguously beginning at WITHl. The directives are 
recorded in the library's ada.lib file and have the following form. 

WITHl;LINK:object_file: 

WITH2:LINK:archive file: 


B-7 







OQHPIIATIGN SYSTEM OPTIONS 


WlTHn directives may be placed in the local Ada libraries or in 
any VADS library on the search list. 

A WITHn directive in a local VADS library or earlier on the 
library search list will hide the sane nus^red WITHn directive 
in a library later in the library search list. 

Use the tool a.info to change or report library directives in 
the current library. 

For VADSself on Silicon Graphics Conpiter Systems, the 
USE_LAST_LINK INFO directive speeds relinking by retaining a list 
of mits, theTr types, seals a^ dependencies. 

\^\DS_location/bin/a.ld is a wrapper program that executes the 
correct executable based upon directives visible in the ada.lib 
file. This permits multiple VADS conpilers to exist on the same 
host. The -sh option prints the name of the actual executable file. 

Files 

a.out (self), a.vox (cross) default output file 
.nets Ada DIANA net files directoiy 

.objects/* Ada object files 

VADS_location/standard/* startup and standard library routines 

Diagnostics 

Self-explanatory diagnostics are produced for missing files, 
etc. Additional messages are produced by the Id linker. 


B-8 



APPE3®IX C 


APPEX4DZX F OF THE Ada STANDARD 


The only allowed in^jlenentation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in Chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The inplementation-dependent 
characteristics of this Ada Inplementation, as described in this Appendix, 
are provided by the customer, unless specifically noted otherwise, 
references in this Appendix are to ccnpiler documentation and not to this 
report. Zsplementation-specific portions of the package STANDARD, vAiich 
are not a part of Af^ndix F, are: 


package STANDARD is 


type INTEGER is range -2147483648 .. 2147483647; 
type SHORT INTEGER is range -32768 .. 32767; 
type TINY_TntbGER Is range -128 .. 127; 

type FLOAT is digits 15 range -1.79769313486232E+308 .. 

1.79769313486232E+308; 

type SHORT_FLQAT is digits 6 range -3.40282E-t-38 .. 3.40282Ei-38; 
type DORATICN is delta 0.0001 range -214748.3648 .. 214748.3647; 


end STANDARD; 


C-1 













APPEZ^DIX P OF THE Ada STANDARD 




APPENDIX F. Inplementation-Dependent Characteristics 


1. Inplementation-Dependent Pragmas 

1.1. INLINEjOMLY Pragma 

The INLINEjQNLY pragma, when used in the sane vmy as pragma 
INLINE, indicates to the ccopiler that the subprogram must 
always be inlined. This pragma also suitresses the genera¬ 
tion o£ a callable version of the routine vhich saves code 
space. If a user erroneously makes an INLINEjQNLY subpro¬ 
gram recursive a warning message will be emitted and an 
PROGRAH_EBROR will be rais^ at run time. 

1.2. INITIALIZE Pragma 

Takes one of the identifiers STATIC or DYNAMIC as the single 
argument. This pragma is only allowed within a library- 
level package spec or body. It specifies that all objects 
in the package be initialized as requested by the pragma 
(i.e. statically or dynamically). Only library-level 
objects are subject to static initialization; all objects 
within procedures are always (by definition) dynamic. If 
pragma INITTALIZE(STATIC) is iised, and an object cannot be 
initialized statically, code will be generated to initialize 
the object and a warning message will be generated. 

1.3. B17ILT_IN Pragma 

The BUILT IN pragma is used in the inplementation of some 
predefine? Ada packages, but provides no user access. It is 
used only to inplement code bodies for vhich no act\ul Ada 
body can be provided, for exanple the NACHINEJCC30E package. 

1.4. SHARE_aX)E Pragma 

The SHARE_CCX>E pragma takes the name of a generic instantia¬ 
tion or a generic unit as the first argument and one of the 
identifiers TRUE or FALSE as the second argument. This 
pragma is only allowed insnediately at the place of a 
declarative item in a declarative part or package specifica¬ 
tion, or after a library unit in a ccmpilation, but before 
any subsequent compilation unit. 

When the first argument is a generic unit the pragma ai^lies 
to all instantiations of that generic. When the first argu¬ 
ment is the name of a generic instantiation the pragma 
applies only to the specified instantiation, or overloaded 
instantiations. 


C-2 










APPENDIX F OP IHE Ada STtVNDMRD 


If the second argument is TRUE the coopiler will try to 
share code generated for a generic instantiation with code 
generated for other instantiations of the sane generic. 
When the second argument is lALSE each instantiation will 
get a unique copy of the generated code. The extent to 
which code is shared between instantiations depends on this 
pragma and the kind of generic formal parameters declared 
for the generic unit. 

The name pragma SHARE BODY is also recognized by the imple> 
mentation and has the same effect as SHAREjCXXSl. It is 
incliided for ccopatability with earlier versions of VADS. 

1.5. NO^IHACX Pragma 

The pragma st^resses the generation of the image array used 
for the IMAGE attribute of enumeration types. This elim¬ 
inates the overhead required to store the array in the exe¬ 
cutable image. An attenpt to use the IMAGE attribute on a 
type \diose image array has been sxi^ressed will resxilt in a 
cooqpilation warning a^ PROGFAM_ERROR raised at run time. 

1.6. EXTERNALJIAME Pragma 

The EXTERNAL NAME pragma takes the name of a subprogram or 
variable defined in Ada and allows the user to specify a 
different external name that may be used to reference the 
entity from other languages. The pragma is allowed at the 
place of a declarative item in a package specification and 
must apply to an object declared earlier in the same package 
specification. 

1.7. INTEEVACEJANE Pragma 

The INTERFACEJNAME pragma takes the name of a a variable or 
subprogram defined in another language and allows it to be 
referenced directly in Ada. The pragma will replace all 
occurrences of the variable or subprogram name with an 
external reference to the second, link_argument. The pragma 
is allowed at the place of a declarative item in a package 
specification and must apply to an object or subprogram 
declared earlier in the same package specification. The 
object must be declared as a scalar or an access type. The 
object cannot be any of the following: 
a loop variable, 
a constant, 

an initialized variable, 
an array, or 
a record. 

1.8. IMPLICITjCOOE Pragma 

Takes one of the identifiers CN or OFF as the single argu- 








APPENDIX P or THE Ada STANDARD 


nant. This pragma is only allowed within a machine code 
procedure. It specifies that implicit code generated by the 
compiler be allowed or disallowed. A warning is issu^ if 
OFF is used and any implicit code needs to be generated. 
The default is CN. 

1.9. OPTIMIZEjCXX^ Pragma 

Takes one of the identifiers ON or OFF as the single argu¬ 
ment. This pragma is only allowed within a machine code 
procedure. It specifies \dietter the code should be qptim- 
ized by the compiler. The default is ON. Mhen OFF is 
specified, the compiler will generate the code as specified. 

2. Iii(>lementation of Predefined Pragmas 

2.1. CONTROLLED 

This pragma is recognized by the in^lementation but has no 
effect. 

2.2. EIABC»ATE 

This pragma is inf>lemented as described in ^jpendix B of the 
Ada RH. 


2.3. INLINE 

This pragma is i8{>lemented as described in i^^pendix B of the 
Ada RN. 


2.4. INTERFACE 

This pragma supports calls to 'C' and FORTRAN functions. The 
Ada subprograms can be either functions or procedures. The 
types of parameters and the result type for functions mus t 
be scalar, access or the predefined type ADDRESS in SYSTEM. 
All parameters must have mode IN. Record and array <^jects 
can be passed by reference using the AKJRESS attribute. 

2.5. LIST 

This prag^sa is inqplemented as described in ^ipendix B of the 
Ada RN. 


2.6. HENORy_SIZE 

This pragma is recognized by the inplementation. The imple- 
mentaticm does rot allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.7. NON REENTRANT 


C-4 



APPENDIX F OP THE Ada STMCAPD 


This pragma takes one argument vihich can be the name of 
either a library subprogram or a subprogram declared immedi¬ 
ately within a library package spec or body. It indicates 
to the compiler that the subprogram will not be called 
recursively allowing the compiler to perform specific optim¬ 
izations. The pragma can be applied to a subprogram or a 
set of overloaded stibprograsm within a package spec or pack¬ 
age body. 

2.8. N0T_ELABC»AT1D 

This pragma can only appear in a library package specifica¬ 
tion. zt indicates that the package will not be elaborated 
because it is either part of the STS, a configuration pack¬ 
age or an Ada package that is referenced from a language 
other than Ada. T^ presence of this pragma siqppresses the 
generation of elaboration code and issues war^ngs if ela¬ 
boration code is required. 

2.9. OPTIMIZE 

This pragma is recognized by the inqplementation but has no 
effect. 

2.10. PACK 

This pragma will caxise the compiler to choose a non-aligned 
representation for coiqposite types. It will not causes 
dejects to be packed at the bit level. 

2.11. PACE 

This pragma is inplemented as described in Appendix B of the 
Ada RN. 

2.12. PASSIVE 

The pragma has three forms : 

PRAGMA PASSIVE; 

PRAGMA PASSIVE(SEMAPHCXtE); 

PRAGMA PASSIVE( INTERRUPT, <nund3er>); 

This pragma Pragma passive can be applied to a task or task 
type declared immediately within a library package spec or 
bo^. The pragma directs the compiler to optimize certain 
tasking operations. It is possible that the statemnts in a 
task body will prevent the intended optimization, in these 
cases a warning will be generated at conpile time will 
raise TASKINGJERROR at runtime. 

2.13. PRIORITY 


C-5 






APPENDIX r OP THE Ada STMEARD 


This pra9ma is inplsmsntsd as described in Appendix B of the 
Ada FH. 

2.14. SHARED 

This pragma is recognized by the ioplementation but has no 
effect. 

2.15. STORAGEJUNIT 

This pragma is recognized by the ioplementation. The inple- 
smntaticm does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

2.16. SUPPRESS 

This pragma is isplemented as described, except that 
DIVISION OlEOt and in some cases CVERFLCIH_CHEa( cannot be 
sijpresse?. 

2.17. SYSTEHJAME 

This pra^na is recognized by the iaplementaticxi. The inple- 
mentation does not allow SYSTEM to be modified by means of 
pragmas, the SYSTEM package must be recompiled. 

3. Implementation-Oependent Attributes 

3.1. P»REF 

For a prefix that denotes an object, a program unit, a 
label, or an entry: 

This attribute denotes the effective address of the first of 
the storage units allocated to P. For a subprogram, pack¬ 
age, task unit, or label, it refers to the address of the 
machine code associated with the corresponding body or 
statement. For an entry for \d)i^ an address clause has 
been given, it refers to the correspcxxling hardware inter¬ 
rupt. The attribute is of the type OPERAND defined in the 
package HACHINEjCOI^. The attribute is only allowed within 
a machine code procedure. 

See section F.4.8 for more information on the use of this 
attribute. 

(For a package, task unit, or entry, the 'REF attribute is 
not supported.) 

3.2. T'TASKID 

For a task c^ject or a value T, T'TASK_ID yields the unique 
task id associated with a task. The value of this attribute 








APPENDIX F OF THE Ada STANDARD 


in of the type ADDRESS in the package SYSTEM. 

4. Specification Of Package SYSTEM 

with UNSI GNEDJ TYPES; 
package SYSTEM is 

pragma suppress(AL LjCHE CKS); 
pragma suppress (EXCSpTIGNJIABLES); 
pragma notjelaborated; 

type NAME is ( bcs_self ); 

SYSTEM_NAME : constant NAME :• bcs_self; 

STORAGE UNIT : constant :• 8; 

MEM0RY_?12E : constant 16_777_216; 

— System-Dependent Named Nunisers 

MIN_ZNT : constant -2 147 483 648; 

MAX_1NT ! constant 2 T47_T83j?47; 

MAX_DXGITS : constant 1?; 

MAX MANTISSA : constant 31; 

FUS_DELTA : constant 2.0**(-31); 

TICK : constant :• 0.01; 

— Other System-dependent Declarations 

subtype PRIORITY is INTEGER range 0 .. 99; 

MAX_REC_SIZE : integer :• 1024; 

type ADDRESS is private; 

function ">" (A: ADUffiSS; B: ADDRESS) return BOOLEAN; 

function "<” (A: ADDRESS; B: ADDRESS) return BOOLEAN; 

function ">-"(A: ADCBtESS; B: ADC«ESS) return BOOLEAN; 

function "<-*(A: ADC»ESS; B: ADDRESS) return BOOLEAN; 

functitxi (A: ADDRESS; B: ADKtESS) return INTEGER; 

function "-t-" (A: ADDRESS; I: INTEGER) return ADKtESS; 

functiOT (A: ADDRESS; I: INTEGER) return MXXdESS; 

function (I: UNSIGNEDJTYPES.IINSIGNED_INTEGER) return ADCBtESS; 

function NEHORY_ADDRESS _ 

(I: UNSIGNES_TYPES.UNSIGNEZJINTEGER) return ADCXtESS renames "-f" 

NOJADDR : constant ADDRESS; 

type TASK_ID is private; 

NO TASK ID : constant TASK ID; 


C-7 








APPENDIX P C3P THE Ada STANDARD 


type PASSIVE TASK ID la private; 

N0_PASSIVE_TKSK_i 15 : constant PASSIVE_TASR_ID; 

subtype SIG STATUS T is INTEGER; 

SIG_STATUS_?IZE: constant 4; 

type PROQtAH ID is private; 

NO_FROGRAH_i 15 : constant PRO(a»M_ID; 

^pe BYTE ORKR T Is ( 
iJTTLE ItolAN, 

BIG EtClAN 

); 

BTTE_Oia^: constant BTTEJORKR^T BIG_ENDIAN; 
type LQNG_ADCSESS is private; 

NO_LQNGJUX« : constant 1£NG_ADDRESS; 

function V" (A: LGNG_AOORESS; I: INITXZR) return LONQ_ADCRESS; 
function (A: LQtlG_AOORESS; I: INTEGER) return LCNG_AODRESS; 

function HAKE_LCNG_AIX»ESS (A: ADDRESS) return LCMG_AOORESS; 

function hXKLlZEifit LCMG_ADORESS ; BTTE^SIZE : INTEGER) return ADDRESS; 

function STATIGNjOF(A: LQNG_ADDBESS) return I N TEG E R; 

— Internal RTS representation for day. If the calendar paclcage is used, 
— then, this is tte jullan day. 
subtype OAYJT is INTEGER; 

— Constants describing the configuration of the CIFO add-on product. 
SUPPORTS INVOCATIGN BY_ADC«ESS : constant BO(X<EAN TRUE; 
SUPPQRTS'~PREEIABOR/^GN : constant BOOLEAN TRUE; 

nAKE_ACC£SS_SUPFORTED : constant BOOLEAN TRUE; 

— Arguments to the CIFO pragma INTERRUPT TASK, 
type INTERRUPT_TASK_KIND is ( SIMPLE, SIGIIaLLING ); 

private 

type ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INrEC^; 

NO_ADOR : constant AIX3RESS 0; 

pragma BUILT_IN(">"); 
pragma BUILT_IN("<"); 
pragma BUILT IN( ); 
pragma BUILT“lN( "<-"); 
pragma BUILT_IN("-") ; 
pragma BUILT IN(”-»-’’); 


C-8 



APPSNDIX F OP THE Ada STANDARD 


type TASK ID is new UMSIGNED_TyPES.tJM5ICa4ED_lNTBCZR; 
Nq_TASK_ll5 : constant TASK_1D 0; 

type PASSIVE TASK ID is new UNSIGNED TYPES.UNSIGNED_INTECZR; 
NO_PASSIVEJDfeK_ID : constant PASSIVi_TASK_ID 0; 

type PROGRAM ID is new UNSIGNED TYPES.UNSIGNED_INIfXSER; 
NO_PSO(atAM_I? : constant PR0ca»N_ID 0; 

type LGNG_ADDRESS is new UNSIGNED_TYPES.UNSIGNED_INTEXjER; 

NO_LGNG_ADOR : constant LCNG_ADDRESS 0; 

pra 9 lia BUILT IN(HAKE LQNGJVDORESS); 
pragma BUILT~IN(LOa£lZE); 
pragma BUILT_IN(STATIGNjOF); 

end SYSTEM; 

5. Restrictions On Representation Clauses 

5.1. Pragma PACK 

In the absence of pragma PACK record coeiponents are padded 
so as to provide for efficient access by the target 
hardware, pragma PACK applied to a record eliminate the pad¬ 
ding where possible. Pragma PACK has no other effect on the 
storage allocated for record components a record representa- 
tian is required. 

5.2. Size Clauses 

For scalar types a representation clause will pack to the 
number of bits required to represent the range of the sub- 
type. A size clause applied to a record type ^11 not cause 
packing of coopcxients; an explicit record representation 
claxise must be given to specify the packing of the com¬ 
ponents. A size clause applied to a record type will cause 
packing of cooponents only vAien the cooponent type is a 
discrete type. An error will be issued if there is insuffi¬ 
cient space allocated. The SIZE attribute is not sipported 
for task, access, or floating point types. 

5.3. Address Clauses 

Address clauses are only supported for variables. Since 
default initialization of a variable requires evaluation of 
the variable address elaboration ordering requirements 
prc^ibit inititalization of a variables \idiich have address 
clauses. The specified address indicates the physical 
address associated with the variable. 

5.4. Interrupts 


C-9 





APPENDIX F OF THE Ada STANDAPD 


Interrupt entries are supported with the following interpre¬ 
tation and restrictions: 

An interrupt entry may not have any parameters. 

A passive task that contains one or more interrupt entries 
must always be trying to accept each interrupt entry, unless 
it is hanging the interrupt. The task must be executing 
either an accept for the entry (if there is only one) or a 
select statement where the interrupt entry accept alterna¬ 
tive is open as defined by Ada RN 9.7.1(4). This is not a 
restriction on normal tasks (i.e., signal ISRs). 

An interrupt acts as a conditional entry call in that inter¬ 
rupts are not queued (see the last sentence of Ada RK 
13.5.1(2) and 13.5.1(6)). 

NO additional requirements are imposed for a select state¬ 
ment containing both a terminate alternative and an accept 
alternative for an interrupt entry (see Ada RM 13.5.1(3)). 

Direct calls to an interrupt entry from another task are 
allowed and are treated as a normal task rendezvous. 

interrupts are not queued. 

The address clause for an interrupt entry does not specify 
the priority of the interrupt. It simply specifies the 
internpt vector number. For passi'^ ISRs, ttw nnn of the 
passive(interrupt,nnn) pragma specifies the internpt prior¬ 
ity of the task. 

5.5. Representation Attributes 

The AIX3RESS attribute is not supported for the following 
entities: 

Packages 

Tasks 

Labels 

Entries 

5.6. Machine Code Insertions 
Machine code insertions are sipported. 

The general definition of the package MACHINEjCOra; provides 
an assembly language interface for the target machine. It 
provides the necessary record type(s) needed in the code 
statement, an enumeration type of all the opcode mneumonics, 
a set of register definitions, and a set of addressing mode 
functions. 


C-10 



APPENDIX F OF THE Ada STMSAN) 


TtiB general syntax of a machine code statement is as fol¬ 
lows: 


CXXXE_nU opcode, operand {, operand} ); 

v^re n indicates the number of operands in the aggregate. 

A special case arises for a variable number of errands. 
The operands are listed within a stibaggregate. The format 
is as follows: 

CXX>E_N'( opcode, ((^rand (, errand}) ); 

For those opcodes that require no operands, named notation 
must be used (cf. RH 4.3(4)). 

CODE_0'( op -> opcode ); 

The opcode must be an enumeration literal (i.e. it cannot be 
an object, attribute, or a rename). 

An operand can only be an entity defined in MACHINE_CCX>E or 
the 'REF attribute. 

The arguments to any of the functions defined in 
MACHINE CX)DE must be static expressions, string literals, or 
the functions defined in MACHINE CCOE. The 'REF attribute 
may not be used as an argument in any of these functions. 

Inline expansion of machine code procedures is supported. 

6. Conventions for Inplementation-generated Names 
There are no iof>lementation-generated names. 

7. Interpretation of Expressions in Address Clauses 

Address expressions in an address clause are interpreted as 
(diysical addresses. 

8. Restrictions on Unchecked Conversions 


None. 


9. Restrictions on unchecked Deallocations 
None. 


10. Implementation Characteristics of I/O Packages 

Instantiations of DIRECT_I0 use the value MAX REC_SIZE as 
the record size (expressed in STQRA(2:jUNITS) ^en the size 


C-11 







APPEia}lX P OF THE Ada STANDARD 


of ELENENT_Tyre exceeds that value. For exan^le for ijncon- 
strained arrays such as string v^re ELEMENT TFPE'SZZE is 
very large, MAX REC_S I2E is used instead. HAX_RBOOItD_SIZE 
is defined in and can be changed by a program before 
instantiating DZRECT_IO to provide ar upper liiait on the 
record size. In any case the maximm size stipported is 1024 
X 1024 X STORAGEJUNIT bits. DIRECT 10 will raise USE_ERR0R 
if MAX_REC_SIZE exceeds this absolute limit. 

Instantiations of SEQUEMTIAL_I0 use the vali» MAX_REC_SIZE 
as the record size (expressed in STQBAGEJUNITS) vAien the 
size of ELEMENTJZYPE exceed that value. For exaiqple for 
unconstrained arrays such as string iidiere ELEMEMT_TYPE'SIZE 
is very large, MAX REC_SIZE is xised Instead. 
MAX_RE0GRD SIZE is defined in S^^TEM and can be changed by a 
program before instantiating INTBGER_IO to provide an xjpper 
limit on the record size. SEQ(JENriAL_IO imposes no limit on 
MAX_REC_SIZE. 

11. Ii^plementation Limits 

The following limits are actually enforced by the implement 
tation. It is not intended to imply that resources vqp to or 
even near these limits are available to every program. 

11.1. Line Length 

The io|>lementation sv^^rts a maximum line length of 500 
characters including the end of line character. 

11.2. Record and Array Sizes 

The maximum size of a statically sized array type is 
4,000,000 X STORAGE_UNITS. The maximum size of a statically 
sized record type is 4,000,000 x STQRAGEJUNITS. A record 
type or array type declaration that exceeds these limits 
will generate a warning message. 

11.3. Defaiilt Stack Size for Tasks 

In the absence of an explicit STORAGEjSIZE length specifica¬ 
tion every task except the main program is allocated a fixed 
size stack of 10,240 STORACXJUNITS. This is the value 
returned by T'STORAGE_SIZE for a task type T. 

11.4. Default Collection Size 

In the absence of an explicit STORAGE_SlZE length attribute 
the default collection size for an access type is 100 times 
the size of the designated type. This is the value returned 
by T'STDEtfUIE_SIZE for an access type T. 


C-12 






APPENDIX F OF TOE Ada STANDARD 


11.5. Limit on Declared Objects 

There is an absolute limit of 6,000,000 x STQRACSJUNXTS for 
dejects declared statically within a compilation unit. If 
this value is exceeded the compiler will terminate the cooh 
pilaticm of the unit with a FATAL error message. 


I 



