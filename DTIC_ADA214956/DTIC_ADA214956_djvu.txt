AD-A214 956 


_ UNCLASSIFIED ' § \ _ -j v" f ■ / 

5tCU»!''T CC*SS1HC>U0K Of THIS »*GC Dttt (nttrKf) _ ' ' - _ 

REPORT DOCUMENTATION PAGE 

1. RCPOftt NUMBIR |2. COVT ACCESSION NO. 3. HtClPltNTS CAIAlOG IIUWBtR 




1. RCPOAt NUMBIR 


4. Tilt! Cnaivbvilf) 5. TrPt Of REPORT i PERIOD COVERED 

Ada Compiler Validation Summary Report: xeleSoft. 02 June 19-89 to 02 June 1990 

TeleGen2 Ada for Sun- 386 i, Version 1.4. SUN-386i Tflost) -- . mfOBMiMG^Rc. ttpopi niiara - 

and (Target), 89060211.10138 *• HRfORNINODRG. REPORT NUMBER 


7. autnoru; 


6. contract or grant NUMBERu; 


lABOi 

Ottobrunn, Federal Republic of Germany. 


1. PERFORMING organization AND ADDRESS 


10. program element, project, task 
AREA A MORK unit NUMBERS 


lABG, 

Ottobrunn, Federal Republic of Germany. 


11. controlling office name and ApORESS 
Ada Joint Program Office 
United States Department of Defense 
Washington, DC 2D301*-3081 


12. REPORT DATE 


14. MONITORING AGENCY NAME i ADOniSS(iidiHtrtnt from Controlling OHut) 
lABG, 

Ottobrunn, Federal Republic of Germany. 


IS. SECURITt class (of tbit rtport) 

UNCLASSIFIED 


ISa. g^C^AS^piCATlON/OOwsSRAOING 

N/A 


16. DISTRIBUTION STATEMENT (of this deport) 


Approved for public release; distribution unlimited. 


1^. OlSTRIBwUON STATEKcM (ofthtsbrtrsafnttrtdtnBlock^0 tfd'ffertntfrofnBtpon) 


UNCLASSIFIED 


DTIC 




19. KEYWORDS (Continue on reverse S'de if neteueiy end identify by blotk number) 


Ada Programming language, Ada Compiler Validation Suimr.ary Report, Ada 
Compiler Validation Capability, ACVC, Validation Testing, Ada 
Validation Office, AVO, Ada Validation Facility, AVF, ANSI/MIL-STD- 
1815A, Ada Joint Program Office, AJPO 


20. ABSTRACT EConfinu* on ff.erif ,irf, (FneffiM,, 6y6/0t* number; 

TeleSoft, TeleGen2 Ada for SUN-396i, Version 1.4, Ottobrunn, West Germany, TeleGen2 Ada 
for. SUN 23861, Version 1.4, SUN 386i under SUNOS, Version 4.0.1 (Host & Target)', ACVC 
1.10 


1473 


t MM 


EDITION OF 1 NOV BS IS OBSOLETE 
S/N 0102-Lf>014-6601 


UNCLASSIFIED 




SECURITY CLASSIFICATION OF THIS PACE (ifkhenDetetntered) 




















Ada Compiler Validation Summary Report; 


Compiler Name: TeleGen2 Ada for SUN-386i Version 1.4 
Certificate Number: #89060211,10138 


Host: SUN-386i under SunOS, Version 4.0.1 

Target: SUN-386i under SunOS, Version 4.0.1 

Testing Completed 2 June 1989 Using ACVC 1.10 


This report has been reviewed and is approved. 


lABG mBH/ Abt. SZT 
Dr. S. Heilbrunner 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 



Ida Validation Organization 
Dr. John F. Kramer 
Institute for Defense Analyses 
Alexandria VA 22311 


Mf. 


Ada Joint Program Office 
Dr John Solomond 
Director 

Department of Defense 
Washington DC 20301 



AVF Control Number: AVF-IABG-036 


Ada COMPILER 

VALIDATION SUMMARY REPORT: 
Certificate Number: #85060211.10133 
TcleSoft 

TeleGen2 Ada for SUN-386i Version 1.4 
SUN-386i Host and Target 


Completion of On-Site Testing: 
2 June 1989 


Prepared By: 
lABG mbH, Abt. SZT 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 


Prepared For: 

Ada Joint Program Office 
United States Department of Defense 
Washington DC 20301-3081 








TABLE OF CONTENTS 


CHAPTER 1 INTRODUCTION . 1 

1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT . . . . 1 

1.2 USE OF THIS VALIDATION SUMMARY REPORT.2 

1.3 REFERENCES.3 

1.4 DEFINITION OF TERMS . 3 

1.5 ACVC TEST CLASSES.4 

CHAPTER 2 CONFIGURATION INFORMATION . 7 

2.1 CONFTGUR.ATION TESTED.7 

2.2 IMPLEMENTATION CHAR.ACTERISTICS.8 


CHAPTER 3 TEST INFORMATION.14 

3.1 TEST RESULTS.14 

3.2 SUMMARY OF TEST RESULTS BY CLASS.14 

3.3 SUMMARY OF TEST RESULTS BY CHAPTER.15 

3.4 WITHDRAWN TESTS.15 

3.5 INAPPLICABLE TESTS . 15 

3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS . 19 

3.7 ADDITIONAL TESTING INFORMATION 

3.7.1 Prevalidation.19 

3.7.2 Test Method.20 

3.7.3 Test Site.20 


APPENDIX A DECLARATION OF CONFORMANCE 


APPENDIX B 

APPENDIX C 

APPENDIX D 

APPENDIX E 


APPENDIX F OF THE Ada STANDARD 

TEST PARAMETERS 

WITHDRAWN TESTS 

COMPILER AND LINKER OPTIONS 



Aeoesslon For 
’htTs’^ckaai 

DTIC TAS 
UiDyjnouuced 
,7(1:311 f loan on_ 


By--- 

_Dlstributlon/ 
Ava ilability Codea 
lAvali and/or 
Dial SpoolQl 


□ □ 





























INTRODUCTION 


\ 

\ 

\ 



CHAPTER 1 
INTRODUCTION 



This Validation Summary Report (VSIlr describes the extent to which a 
specific Ada compiler conforms to the Ada Standard, ANSI/MIL-STD-1815A. 
This report explains all technical terms used within it and thoroughly 
reports the results of testing this compiler using the Ada Compiler 
Validation Capability. (ACVC). • An Ada compiler must be implemented 
according to the Ada Standard, and any implementation-dependent features 
must conform to the requirements of the Ada Standard. The Ada Standard 
must be implemented in its entirety, and nothing can be implemented that is 
not in the Standard. ' 


Even though all validated Ada compilers conform to the Ada Standard, it 
must be understood that some differences do exist between implementations. 
The Ada Standard permits some implementation dependencies—for example, the 
maximum length of identifiers or the maximum values of integer types. 
Other differences between compilers result from the characteristics of 
particular operating systems, hardware, or implementation strategies. All 
*■’'; dependencies observed during the process of testing this compiler are 
given in t^ s report. 

The information in this report is derived from the test results produced 
during validation testing. The validation process includes submitting a 
suite of standardized tests, the ACVC, as inputs to an Ada compiler and 
evaluating the results. The purpose of validating is to ensure conformity 
of the compiler to the Ada Standard by testing that the compiler properly 
implements legal language constructs and that it identifies and rejects 
illegal language constructs. The testing also identifies behavior that is 
implementation dependent, but is permitted by the Ada Standard. Six 
classes of tests are used. These tests are designed to perform checks at 
compile time, at link time, and during execution. 


1.1 PURPOSE OF THIS VALIDATION SUMMARY REPORT 


(- 


This VSR documents the results of the validation testing performed on an 
Ada compiler. Testing was carried out for the following purposes: 







INTRODUCTION 


. To attempt to identify any language constructs supported by the 
compiler that do not conform to the Ada Standard 

. To attempt to identify any language constructs not supported by 
the compiler but required by the Ada Standard 

. To determine that the implementation-dependent behavior is allowed 
by the Ada Standard 


Testing of this compiler was conducted by the AVF according to 
procedures established by the Ada Joint Program Office and administered by 
the Ada Validation Organization (AVO). On-site testing was completed 2 
June 1989 at TeleLOGIC AB, Sweden. 


1.2 USE OF THIS VALIDATION SUMMARY REPORT 

Consistent with the national laws of the originating country, the AVO may 
make full and free public disclosure of this report. In the United States, 
this is provided in accordance with the "Freedom of Information Act" 
(5 U.S.C. #552). The results of this validation apply only to the 
computers, operating systems, and compiler versions identified in this 
report. 

The organizations represented on the signature page of this report do not 
represent or warrant that all statements set forth in this report are 
accurate and complete, or that the subject compiler has no nonconformities 
to the Ada Standard other than those presented. Copies of this report are 
available to the public from: 

Ada Information Clearinghouse 
Ada Joint Program Office 
OUSDRE 

The Pentagon, Rm 3D-139 {Fern Street) 

Washington DC 20301-3081 

or from: 

lABG mbH, Abt. SZT 
Einsteinstr. 20 
D-8012 Ottobrunn 
West Germany 

Questions regarding this report or the validation test results should be 
directed to the AVF listed above or to: 

Ada Validation Organization 
Institute for Defense Analyses 
1801 North Beauregard Street 
Alexandria VA 22311 










INTRODUCTION 


1.3 REFERENCES 


1. Reference Manual for the Ada Programming Language, 
ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

2. Ada Compiler Validation Procedures and Guidelines, Ada Joint 
Program Office, 1 January 1987. 

3. Ada Compiler Validation Capability Implementers' Guide, SofTech, 
Inc., December 1986. 

4. Ada Compiler Validation Capability User's Guide, December 1986. 


1.4 DEFINITION OF TERMS 


ACVC The Ada Compiler Validation Capability. The set of Ada 

programs that tests the conformity of an Ada compiler to the 
Ada programming language. 

Ada An Ada Commentary contains all information relevant to the 

Commentary point addressed by a comment on the Ada Standard. These 

comments are given a unique identification number having the 
form Al-ddddd. 

Ada Standard ANSI/MIL-STD-1815A, February 1983 and ISO 8652-1987. 

Applicant The agency requesting validation. 

AVF The Ada Validation Facility. The AVF is responsible for 

conducting compiler validations according to procedures 
contained in the Ada Compiler Validation Procedures and 
Guidelines. 

AVO The Ada Validation Organization. The AVO has oversight 

authority over all AVF practices for the purpose of 
maintaining a uniform process for validation of Ada 
compilers. The AVO provides administrative and technical 
support for Ada validations to ensure consistent practices. 

Compiler A processor for the Ada language. In the context of this 

report, a compiler is any language processor, including 
cross-compilers, translators, and interpreters. 

Failed Test An ACVC test for which the compiler generates a result that 

demonstrates nonconformity to the Ada Standard. 

Host The computer on which the compiler resides. 











INTRODfJCTIGN 


Inapplicable An ACVC test that uses features of the language that a 

Test compiler is not required to support or may legitimately 

support in a way other than the one expected by the test. 

Passed Test An ACVC test for which a compiler generates the expected 

result. 

Target The computer which executes the code generated by the 

compiler. 

Test A program that checks a compiler's conformity regarding a 

particular feature or a combination of features to the Ada 
Standard. In the context of this report, the term is used to 
designate a single test, which may comprise one or more 
files. 

An ACVC test found to be incorrect and not used to check 
conformity to the Ada Standard. A test may be incorrect 
because it has an invalid test objective, fails to meet its 
test objective, or contains illegal or erroneous use of the 
language. 


1.5 ACVC TEST CLASSES 

Conformity to the Ada Standard is measured using the ACVC. The ACVC 
contains both legal and illegal Ada programs structured into six test 
classes: A, B, C, D, E, and L. The first letter of a test name identifies 
the class to which it belongs. Class A, C, D, and E tests are executable, 
and special program units are used to report their results during 
execution. Class B tests are expected to produce compilation errors. 
Class L tests are expected to produce errors because of the way in which a 
program library is used at link time. 

Class A tests ensure the successful compilation and execution of legal Ada 
programs with certain language constructs which cannot be verified at run 
time. There are no explicit program components in a Class A test to check 
semantics. For example, a Class A test checks that reserved words of 
another language (other than those already reserved in the Ada language) 
are not treated as reserved words by an Ada compiler. A Class A test is 
passed if no errors are detected at compile time and the program executes 
to produce a PASSED message. 

Class B tests check that a compiler detects illegal language usage. 
Class B tests are not executable. Each test in this class is compiled and 
the resulting compilation listing is examined to verify that every syntax 
or semantic error in the test is detected. A Class B test is passed if 
every illegal construct that it contains is detected by the compiler. 


Withdrawn 

Test 








INTRODUCTION 


Class C tests check the run time system to ensure that legal Ada programs 
can be correctly compiled and executed. Each Class C test is self-checking 
and produces a PASSED, FAILED, or NOT APPLICABLE message indicating the 
result when it is executed. 

Class D tests check the compilation and execution capacities of a compiler. 
Since there are no capacity requirements placed on a compiler by the Ada 
Standard for some parameters—for example, the number of identifiers 
permitted in a compilation or the nu.mber of units in a library—a compiler 
may refuse to compile a Class D test and still be a conforming compiler. 
Therefore, if a Class D test fails to compile because the capacity of the 
compiler is exceeded, the test is classified as inapplicable. If a Class D 
test compiles successfully, it is self-checking and produces a PASSED or 
FAILED message during execution. 

Class E tests are expected to execute successfully and check 
implementation-dependent options and resolutions of ambiguities in the Ada 
Standard. Each Class E test is self-checking and produces a NOT 
APPLICABLE, PASSED, or FAILED message when it is compiled and executed. 
However, the Ada Standard permits an implementation to reject programs 
containing some features addressed by Class E tests during compilation. 
Therefore, a Class E test is passed by a compiler if it is compiled 
successfully and executes to produce a PASSED message, or if it is rejected 
by the compiler for an allowable reason. 

Class L tests check that incomplete or illegal Ada programs involving 
multiple, separately compiled units are detected and not allowed to 
execute. Class L tests are compiled separately and execution is attempted. 
A Class L test passes if it is rejected at link time—that is, an attempt 
to execute the main program must generate an error massage before any 
declarations in the main program or any units referenced by the main 
program are elaborated. In some cases, an i.mpl3mer.: z".i .u .way legitimately 
detect errors during compilation of the test. 

Two library units, the package REPORT and the procedure CHECK_FILE, support 
the self-checking features of the executable tests. The package REPORT 
provides the mechanism by which executable tests report PASSED, FAILED, or 
NOT APPLICABLE results. It also provides a set of identity functions used 
to defeat some compiler optimizations allowed by the Ada Standard that 
would circumvent a test objective. The procedure CHECK_FILE is used to 
check the contents of text files written by some of the Class C tests for 
Chapter 14 of the Ada Standard. The operation of REPORT and CHECK_FILE is 
checked by a set of executable tests. These tests produce messages that 
are examined to verify that the units are operating correctly. If these 
units are not operating correctly, then the validation is not attempted. 

The text of each test in the ACVC follows conventions that are intended to 
ensure that the tests are reasonably portable without modification. For 
example, the tests make use of only the basic set of 55 characters, contain 
lines with a maximum length of 72 characters, use small numeric values, and 
tests. However, some tests contain values that require the test to be 











INTRODUCTIOtl 


customized according to implecentaticn-spccific 7alues--for exac.pla, an 
illegal file name. A list of the -ralues used for this validation is 
provided in Appendix C. 

A compiler must correctly process each of the tests in the suite and 
demonstrate conformity to the Ada Standard by either meeting the pass 
criteria given for the test or by showing that the test is inapplicable to 
the implementation. The applicability of a test to an implementation is 
considered each ti.me the implementation is validated. A test that is 
inapplicable for one validation is not necessarily inapplirable for a 
subsequent validation. Any test that was determined to contain an illegal 
language construct or an erroneous language construct is withdrawn from the 
.ACVC and, therefore, is not used in testing a compiler. The tests 
withdrawn at the time of this validation are given in Appendix D. 












CONFIGURATION INFORMATION 


CHAPTER 2 

CONFIGURATION INFORMATION 

2.1 CONFIGURATION TESTED 

The candidate compilation system for this validation was tested under the 
following configuration: 

Co-piler; TeleGenI Ada for SUN-386i Version 1.4 
ACVC Version: 1.10 
Certificate Number: #89060211.10138 
Host Computer: 

Machine: SUN-386i 

Operating System: SunOS, Version 4.0.1 

Memory Size: 8 MB 

Target Computer: 

Machine: SUN-386i 

Operating System: SunOS, Version 4.0.1 

Memory Size: 8 MB 










CONFIGURATION INFORMATION 


2.2 IMPLE.MENTATION CHARACTERISTICS 

One of the purposes of validating compilers is to determine the behavior of 
a compiler in those areas of the Ada Standard that permit implementations 
to differ. Class D and E tests specifically chec.k for such implementation 
differences. However, tests in other classes also characterize an 
implementation. The tests demonstrate the following characteristics: 


a. Capacities. 

1) The compiler cor.ectly processes a compilation 
containing 723 variables in the same declarative part. (See 
test D290O2K.) 

2) The compiler correctly processes tests containing 

loop statements nested to 65 levels. (See tests D55A03A..H 
(8 tests) .) 

3) The compiler correctly processes tests containing 

block statements nested to 55 levels. (See test D56O01B.) 

4) The compiler correctly processes tests containing 

recursive procedures separately compiled as subunits nested to 
17 levels. (See tests D64O05E..G (3 tests).) 

b. Predefined types. 

1) This implementation supports the additional predefined types 
LONG_INTEGER and LONG_FLOAT in the package STANDARD. 'See 
tests B86001T..Z (7 tests).) 

c. Expression evaluation. 

The order in which expressions are evaluated and the time at which 

constraints are checked are not defined by the language. While 

the ACVC tests dr not specifically attempt to determine the order 

of evaluation of expressions, test results indicate the following: 

1) Some of the default initialization expressions 
for record components are evaluated before any value is 
checked for membership in a component's subtype. (See test 
C32117A.) 

2) Assignments for subtypes are performed with the same 
precision as the base type. (See test C35712B.) 

3) This implementation uses no extra bits for extra precision 
and uses no extra bits for extra range. (See test C35903A.) 












CONFIGURATION INFORMATION 


4) CONSTRAINT_ERROR is raised for pre-defined integer comparison 
tests, NUMERIC_ERROR is raised for largest integer comparison 
and membership tests and no exception is raised for pre¬ 
defined integer membership tests when an integer literal 
operand in a comparison or membership test is outside the 
range of the base type- (See test C45232A.) 

5) No exception is raised when a literal operand in a 
fixed-point comparison or membership test is outside the range 
of the base type. (See test C45252A.> 

6) Underflow is gradual. (See tests C45524A..Z (26 tests).) 


d. Rounding. 

The method by which values are rounded in type conversions is not 
defined by the language. While the ACVC tests do not specifically 
attempt to determine the method of rounding, the test results 
indicate the following: 

1) The method used for rounding to integer is round to even. 
(See tests C46012A..Z (26 tests).) 

2) The method used for rounding to longest integer is round 
to even. (See tests C46012A..Z (26 tests).) 

3) The method used for rounding to integer in static universal 
real expressions is round away from zero. (See test C4A014A.) 


e. Array types. 

An implementation is allowed to raise NUMERIC_ERROR or 
CONSTRAINT ERROR for an array having a 'LENGTH that exceeds 
STANDARD.INTEGER'LAST and/or SYSTEM.MAX_INT. For this 

implementation: 

1) Declaration of an array type or subtype declaration with more 
than SYSTEM.MAX_INT components raises NUMERIC_ERROR for a 
two dimensional array subtype where the large dimension is the 
second one. 

2) CONSTRAINT_ERROR is raised when 'LENGTH is applied to an 

array type with INTEGER'LAST + 2 components. (See test 

C36202A.) 

3) NUMERIC_ERROR is raised when an array type with 

SYSTEM.MAX_INT + 2 components is declared. (See test 

C36202B.) 











CONFIGURATION INFORMATION 


4) A packed BOOLEAN array having a 'LENGTH exceeding INTEGER'LAST 
raises no exception. (See test C52103X.) 

5) A packed two-dimensional BOOLEAN array with more than 
INTEGER'LAST components raises CONSTRAINT_ERROR when the 
length of a dimension is calculated and exceeds INTEGER'LAST. 
(See test C52104Y.) 

5) In assigning one-dimensional array types, the expression is 
evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 

7) In assigning two-dimensional array types, the expression 
is not evaluated in its entirety before CONSTRAINT_ERROR is 
raised when checking whether the expression's subtype is 
compatible with the target's subtype. (See test C52013A.) 


3) A null array with one dimension of length greater 

than INTEGER'LAST may raise NUMERIC_ERROR or 

CONSTRAINT_ERROR either when declared or assigned. 

Alternatively, an implementation may accept the 

declaration. However, lengths must match in array 

slice assignments. This implementation raises 

no exception. (See test E52103Y.) 


f. Discriminated types. 

1) In assigning record types with discriminants, the expression 
is evaluated in its entirety before 

CONSTRAINT_ERROR is raised when checking whether the 
expression's subtype is compatible with the target's subtype. 
(See test C52013A.) 


g. Aggregates, 

1) In the evaluation of a multi-dimensional aggregate, the test 
results indicate that index subtype checks are 
made as choices are evaluated. (See tests C43207A and 
C43207B.) 

2) In the evaluation of an aggregate containing subaggregates, 
not all choices are evaluated before being checked for 
identical bounds. (See test E43212B.) 


10 












CONFIGURATION INFORMATION 


3) CONSTRAINT_ERROR is raised after all choices are 
evaluated when a bound in a non-null range of a non-null 
aggregate does not belong to an index subtype. (See test 

E43211B.> 


h. Pragmas. 

1) The pragma INLINE is supported for procedures, but net for 
functions. (See tests LA3004A..B (2 tests), EA3O04C..D (2 
tests), and CA3004S..F (2 tests).) 


i. Generics. 

This implementation creates a dependence between a generic body 

and those units which instantiate it. As allowed by AT-0048/11, 

if the body is coiapiled after a unit that instantiates it, then 

that unit becomes obsolete. 

1) Generic specifications and bodies can be compiled 

in separate compilations. (See tests CA1012A, CA2009C, 

CA2009F, BC3204C, and BC3205D.) 

2) Generic subprogram declarations and bodies can be 

compiled in separate compilations. (See tests CA1012A and 
CA2009F.) 

3) Generic library subprogram specifications and bodies can 
be compiled in separate compilations. (See test 
CA1012A.) 

4) Generic non-library package bodies as subunits can 

be compiled in separate compilations. (See test CA2009C.) 

5) Generic non-library subprogram bodies can be 
compiled in separate compilations from their stubs. (See test 
CA2009F.) 

6) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 

7) Generic package declarations and bodies can be 
compiled in separate compilations. (See tests CA2O09C, 
BC3204C, and BC3205D,) 

8) Generic library package specifications and bodies can 
be compiled in separate compilations. (See tests 
BC32C4C and BC3205D.) 






CONFIGURATION INFORMATION 


9) Generic unit bodies and their subunits can be 
compiled in separate compilations. (See test CA3011A.) 


Input and output. 

1) The package SEQUENTIAL_IO cannot be instantiated with 

unconstrained array types or record types with 

discriminants without defaults. (See tests AE2101C, SE2201D, 

and EE2201E.) 

2) The package DIRECT_IO cannot be instantiated with 

unconstrained array types or record types with 

discriminants without defaults. (See tests AE2101H, EE2401D, 

and EE2401G.) 

3) Modes IN_FILE and OUT_FILE are supported for SEQUENTIAL_IO. 
(See tests CE210:D..E, CS2102N, and CE2102P.) 

4) Modes IN FILE, OUT_FILE, and INOUT FILE are supported for 

DIRECT^IoT (See tests CE2102F, CE2r02I..J (2 tests), CE2102R, 
CS2102T, and CE2102V.) 

5) Modes IN_FILE and OUT^FILE are supported for text files. 
(See tests CE3102E and~CE3102I..K (3 tests).) 

6) RESET and DELETE operations are supported for 
SEQUENTIAL_IO. (See tests CE2102G and CE2102X.) 

7) RESET and DELETE operations are supported for DIRECT_IO. 

(See tests CE2102K and CE2102Y.) 

8) RESET and DELETE operations are supported for text 

files. (See tests CE3102F..G (2 tests), CE3104C, CE3110A, and 
CE3114A.) 


9) 

Overwriting to a sequential file does not 
(See test CE2208B.) 

truncate 

the 

file. 

10) 

Temporary sequential files are given 
deleted when closed. (See test CE21G8A.) 

names 

and 

not 

11) 

Temporary direct files are not given 
deleted when closed. (See test CE2108C.) 

names 

and 

not 

12) 

Temporary text files are not given names 
when closed. (See test CE3112A.) 

and not 

deleted 











CONFIGURATION INFORMATION 


13) More than one internal file can be associated with 

each external file for sequential files when reading 

only. (See tests CE2107A..E (5 tests), CE2102Li, CE2110B, and 
CE2111D.) 

14) More than one internal file can be associated with 

each external file for direct files wfien reading only. (See 
tests CE2107F..H (3 tests), CE2110D and CE2111H.) 

15) More than one internal file can be associated with 

each external file for text files when reading only (See 

tests CE3111A..E (5 tests), CE3114B, and CE3115A.) 












TEST INFORMATION 


CHAPTER 3 
TEST INFORMATION 


3.1 TEST RESULTS 

Version 1.10 of the ACVC comprises 3717 tests. When this compiler was 
tested, 44 tests had been withdrawn because of test errors. The AVF 
determined that 313 tests were inapplicable to this implementation. 
All inapplicable tests were processed during validation testing except for 
201 executable tests that use floating-point precision exceeding 
that supported by the implementation. Modifications to the code, 
processing, or grading for 16 tests were required to successfully 
demonstrate the test objective. (See section 3.6.) 

The AVF concludes that the testing results demonstrate acceptable 
conformity to the Ada Standard. 


3.2 SUMMARY OF TEST RESULTS BY CLASS 


RESULT 

A 

B 

TEST 

C 

CLASS 

D 

E 

L 

TOTAL 

Passed 

127 

1129 

2019 

17 

23 

45 

3360 

Inapplicable 

2 

9 

296 

0 

5 

1 

313 

Withdrawn 

1 

2 

35 

0 

6 

0 

44 

TOTAL 

130 

1140 

2350 

17 

34 

46 

3717 













TEST INFORMATION 


3.3 SUMMARY OF TEST RESULTS BY CHAPTER 


RESULT TEST CHAPTER TOTAL 



2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

13 

14 


Passed 

198 

573 

544 

245 

172 

99 

160 

332 

132 

36 

250 

341 

278 

3360 

N/A 

14 

76 

136 

3 

0 

0 

6 

0 

5 

0 

2 

28 

43 

313 

Wdrn 

1 

1 

0 

0 

0 

0 

0 

2 

0 

0 

1 

35 

4 

44 

TOTAL 

213 

650 

680 

248 

172 

99 

166 

334 

137 

36 

253 

404 

325 

3717 


3.4 WITHDRAWN TESTS 

The following 44 tests were withdrawn fro® ACVC Version 1.10 
at the time of this validation: 


E28005C 

A39005G 

B97102E 

C97116A 

BC3009B 

CD2A62D 

CD2A63A 

CD2A63B 

CD2A63C 

CD2A63D 

CD2A66A 

CD2A66B 

CD2A66C 

CD2A660 

CD2A73A 

CD2A73B 

CD2A73C 

CD2A73D 

CD2A76A 

CD2A76B 

CD2A76C 

CD2A76D 

CD2A81G 

CD2A83G 

CD2A84N 

CD2A84M 

CD5011O 

CD2B15C 

CD7205C 

CD2D11B 

CD5O07B 

ED7004B 

ED7O05C 

ED7005D 

ED7006C 

ED70O6D 

CD7105A 

CE3301A 

CD7203B 

CE3411B 

CD7204B 

CD7205D 

CE2107I 

CS3111C 


See Appendix D for the reason that each of these tests was withdrawn. 


3.5 INAPPLICABLE TESTS 

Some tests do not apply to all compilers because they make use of features 
that a compiler is not required by the Ada Standard to support. Others may 
depend on the result of another test that is either inapplicable or 
withdrawn. The applicability of a test to an implementation is considered 
each time a validation is attempted. A test that is inapplicable for one 
validation attempt is not necessarily inapplicable for a subsequent 
attempt. For this validation attempt, 313 tests were inapplicable for 


a. The following 201 tests are not applicable because they have 
floating-point type declarations requiring more digits than 
SYSTEM.MAX.DIGITS: 

C24113L..Y (14 tests) C35705L..Y (14 tests) 










TEST INFORMATION 


C35706L..Y (14 tests) 
C35708L..Y (14 tests) 
C45241L..Y (14 tests) 
C45421L..Y (14 tests) 
C45524L..Z (15 tests) 
C45641L..Y (14 tests) 


C35707L..Y (14 tests) 
C35802L..Z (15 tests) 
C45321L..Y (14 tests) 
C45521L..Z (15 tests) 
C45621L..Z (15 tests) 
C46C12L..Z (15 tests) 


b. C35508I, C35508J, C35508M, and C35508N are not applicable because 
they include enumeration representation clauses for BOOLEAN types 
in which the representation values are other than (FALSE => 0, 

TRUE => 1). Under the terms of AI-00325, this implementation is 

not required to support such representation clauses. 


c. C35702A and 386O01T are not applicable because this implementation 
supports no predefined type SHORT_FLOAT. 

d. The following 16 tests are not applicable because this 
implementation does not support a predefined type SHORT_TNTEGER; 

C45231B C453043 C45502B C455033 C45504B 

C45504E C45611B C45613B C45614B C45631B 

C45632B B52004E C55B07B B55B09D B86001V 

CD7101E 


e. C45531M..P (4 tests) and C45532M..P (4 tests) are not applicable 

because they acquire a value of SYSTEM.MAX MANTISSA greater than 
32. 


f. C86001F is not applicable because, for this implementation, the 
paclcage TEXT_I0 is dependent upon package SYSTEM. These tests 
recompile package SYSTEM, making package TEXT_IO, and 
hence package REPORT, obsolete. 

g. B86001X, C45231D, and CD7101G are not applicable because this 
implementation does not support any predefined integer type with a 
name other than INTEGER, LONG_INTEGER, or SHORT_INTEGER. 

h. B86001Y is not applicable because this implementation supports no 
predefined fixed-point type other than DURATION. 

i. B86001Z is not applicable because this implementation supports no 
predefined floating-point type with a name other than FLOAT, 
LONG_FLOAT, or SHORT_FLOAT. 

j. CA2009C, CA2009F, BC3204C and BC3205D are not applicable because 

this implementation creates a dependence between a generic body 
and those units which instantiate it (See Section 2.2.h and 
Appendix F of the Ada Standard). 

k. LA3004B, EA3O04D, and CA3004F are not applicable because this 
implementation does not support pragma INLINE for functions. 









TEST INFORMATION 


l. CD1009C, CD2A41A..3 (2 tests), CD2A41E and CD2A42A..J (10 tests) 

are not applicable because of restrictions on 'SIZE length clauses 
for floating point types. 

m. CD2A61I..J (2 tests) are not applicable because of restrictions on 
'SIZE length clauses for array types. 

n. CD2A84B..I (8 tests) and CD2A84K..L (2 tests) are not applicable 
because of restrictions on 'SIZE length clauses for access types. 

o. AE2101C, EE2201D, and EE2201E use instantiations of package 

SEQUENTIAL_IO with unconstrained array types and record types with 

discriminants without defaults. These instantiations are rejected 

by this compiler. 

p. AE2101H, EE2401D, and EE2401G use instantiations of package 

DIRECT_I0 with unconstrained array types and record types with 
discriminants without defavilts. These instantiations are rejected 
by this compiler. 


q. 

CE2102D is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

IN_FILE mode : 

for SEQUENTIAL_IO 



r. 

CE2102E is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

0UT_FILE mode 

for SEQUENTIAL.IO. 


s. 

CE2102F is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

INOUT_FILE mode for DIRECT_I0. 



t. 

CS2102I is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 

IN_FILE mode : 

for DIRECT. 

.10. 



u. 

CE2102J is 

inapplicable 

because 

this 

implementation 

supports 


CREATE with 0UT_FILE mode for DIRECT_IO. 

V. CE2102N is inapplicable because this implementation supports OPEN 
with IN_FILE mode for SEQUENTIAL_IO. 

w. CE2102O is inapplicable because this implementation supports RESET 
with IN_FILE mode for SEQUENTIAL_IO. 

X. CE2102P is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for SEQUENTIAL_IO. 

y. CE2102Q is inapplicable because this implementation supports RESET 
with OUT_FILE mode for SEQUENTIAL.IO. 

z. CE2102R is inapplicable because this implementation supports OPEN 
with INOUT FILE mode for DIRECT 10. 


1 ■? 













TEST INFORMATION 


aa. CE2102S is inapplicable because this i.T.plemcntation supports RESET 
with INOUT_FTLE mode for DIRSCT_I0, 

ab. CE2102T is inapplicable because this implementation supports OPEN 
with IN_FILE mode for DIRECT_I0. 

ac. CE2102U is inapplicable because this implementation supports RESET 
with IN_FILE mode for DIRECT_I0. 

ad. CE2102V is inapplicable because this implementation supports OPEN 
with OUT_FILE mode for DIRECT_IO. 

ae. CE2102W is inapplicable because this implementation supports RESET 
with OUT.FILE mode for DIRECT_I0. 

af. CE2107B..E (4 tests), CE2107L, CE2110B, and CE2111D are not 

applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing 

for sequential files. The proper exception is raised when 

multiple access is attempted. 

ag. CE2107G..H (2 tests), CE2110D, and CE2111H are not applicable 
because multiple internal files cannot be associated with the same 
e.xtarnal file when one or more files is writing for direct files. 
The proper exception is raised when multiple access is attempted. 

ah. CE3102E is inapplicable because text file CREATE with IM_FILE mode 
is supported by this implementation. 

ai. CE3102F is inapplicable because text file RESET is supported by 
this implementation. 

aj. CE3102G is inapplicable be''ause text file deletion of an external 
file is supported by this ’>olementation. 

ak. CE3102I is inapplicable because text file CREATE with OUT_FILE 
mode is supported by this implementation. 

al. CE3102J is inapplicable because text file OPEN with IN_FILE mode 
is supported by this implementation. 

am. CE31C2K is inapplicable because text file OPEN with OUT_FILE mode 
is not supported by this implementation. 

an. CE3111B, CE3111D..E (2 tests), CE3114B, and CE3115A are not 
applicable because multiple internal files cannot be associated 
with the same external file when one or more files is writing for 
text files. The proper exception is raised when multiple access 
is attempted. 


12 











TEST INFORMATION 


3.6 TEST, PROCESSING, AND EVALUATION MODIFICATIONS 

It is expected that some tests will require modifications of code, 
processing, or evaluation in order to compensate for legitimate 
implementation behavior. Modifications are made by the AVF in cases where 
legitimate implementation behavior prevents the successful completion of an 
(otherwise) applicable test. Examples of such modifications include: 
adding a length clause to alter the default size of a collection; splitting 
a Class B test into subtests so that all errors are detected; and 
confirming that messages produced by an executable test demonstrate 
conforming behavior that was not anticipated by the test (such as raising 
one exception instead of another). 

Modifications were required for 16 tests. 

The following tests were split because syntax errors at one point resulted 
in the compiler not detecting other errors in the test: 

B71001E 371001K B71001Q B^IOOIU 3A3006A BA3006B 
BA3007B 3A3008A BA3003B BA3013A (6 and 7M) 

Tests C340C5G, C34005J and C34O06D returned the result FAILED because of 
false assumptions that an element in an array or a record type may not be 
represented more compactly than a single object of that type. The AVO has 
ruled these tests PASSED if the only message of failure occurs from the 
requirements of T'SIZE due to the above assumptions (T is the aray type). 

Tests CD2C11A and CD2C11B contain 'SIZE length clauses for tas)t types which 
were insufficient for this machine. These tests were modified to include a 
'SIZE clause of 2K. 

lABG uses a modified body for the support pacJcage REPORT that prints an 
lABG specific time stamp. For the test CD5003E, this body caused this test 
to raise STORAGE_ERROR because of a stack overflow. So for this test, the 
standard report package was used. 


3.7 ADDITIONAL TESTING INFORMATION 
3.7.1 Prevalidation 

Prior to validation, a set of test results for ACVC Version 1.10 produced 
by the TeleGen2 Ada for SUN-386i Version 1.4 was submitted to the AVF 
by the applicant for review. Analysis of these results demonstrated that 
the compiler successfully passed all applicable tests, and the 
compiler exhibited the expected behavior on all inapplicable tests. 











TEST INFORMATION 


3.7.2 Test Method 


Testing of the TeleGen2 Ada for SUN-336i Version 1.4 using ACVC Version 
1.10 was conducted on-site by a validation team from the AVF. The 
configuration in which the testing was performed is described by the 
following designations of hardware and software components: 


Host computer: 

Host operating system: 
Target computer: 

Target operating system: 
Compiler: 


SUM-386i 

SunOS, Version 4.0.1 
SUN-386i 

SunOS, Version 4.0.1 

TeleGen2 Ada for SUN-386i Version 1.4 


A streamer cassette containing the ACVC in the original distribution format 
was loaded to a UNIX machine with an Ada compiler where it was customized 
using AVF tools to remove withdrawn tests and tests requiring unsupported 
floating-point precision. Tests that make use of implementation specific 
values were also customized. Tests requiring modifications were loaded in 
their modified form. The ACVC was then transferred by Ethernet to the host 
machine. 


After the test files were loaded to disk, the full set of tests was 
compiled, linked, and all executable tests were run on the 
SUN-386i. Results were then transferred by Ethernet to a VAX 8530 where 
they were printed and evaluated. 

The compiler was tested using command scripts provided by TeleSoft 
and reviewed by the validation team. The compiler was invoked with the 
command 


ada -V -V 1000 -m <niain program) <compilation files) 
and linked with the command 

aid <main program) 

for the Chapter B tests, the additional qualifier -L was included in the 
compiler call. See Appendix E for details of these and all possible option 
switches. 

Tests were compiled, linked, and executed (as appropriate) using a single 
computer. Test output, compilation listings, and job logs 
were captured on magnetic tape and archived at the AVF. The listings 
examined on-site by the validation team were also archived. 


3.7.3 Test Site 

Testing was conducted at TeleLOGIC AB, Sweden and was completed on 2 June 
1989. 


20 










DECLARATION OF CONFORMANCE 


APPENDIX A 

DECLARATION OF CONFORMANCE 


TeleSoft has submitted the following Declaration of Conformance 
concerning the TeleGenD Ada for SUN-386i Version 1.4 










DECURAnCM OF CCMFORMMiCE 


Ocmpiler Iirplementor: 
Ada Valdation Facility: 

ACVC Version: 

Base Gcnpiler Name: 

Version: 
Host Architecture ISA: 
06 & version #: 

Target Architecture ISA: 

06 & version #: 


TELESOFT 

lABG, West-Germany 

1.10 

TeleGen2 Ada for SUN-386i 
1.4 

SUN-386i 

Sun06, version 4.0.1 

Same as host 
Same as host 


iMPlementor^s Declaratior 


I, the undersigned, representing TELESOFT, have inplenented 
no deliberate extaisions to the Ada Language Standard ANSI/MIL- 
SID 1815A in the oonpiler listed in this declaration. 

I declare that TELESOFT is the cwner of record of the Ada 
language oonpiler listed above and as sudi is responsible for 
maintaining said compiler in conformance to ANSI/MIL-SID 1815A. 
All certificates and registrations for the Ada language conpiler 
listed in this declaration shall be made only in the CMner's 
corporate name. 

20 July, 1989 

Telelogic AB, Ada Products Division 





St^an Bjorrscn, Manager, Systene Software 


(X<ner"s Declaration 


I, the undersigned, representing TELESOFT take full respon¬ 
sibility for isplenentation and maintenance of the Ada conpiler 
listed above, and agree to the public disclosure of the fined 
Vedidation Sunoary Report. I declare that the Ada language 
conpiler listed, and its host/target perfor m ance is in conpliance 
with the Ada language Standard ANSI/MUrSID 1815A. 


20 July, 1989 

Telelo^c AB, Ada Products Division 



N . 


Stefan Bjotnson, Manager, Systems Softwzure 









APPENDIX F OF THE Ada STANDARD 


APPENDIX B 

APPENDIX F OF THE Ada STANDARD 


The only allowed implementation dependencies correspond to 
implementation-dependent pragmas, to certain machine-dependent conventions 
as mentioned in chapter 13 of the Ada Standard, and to certain allowed 
restrictions on representation clauses. The implementation-dependent 
characteristics of the TeleGen2 Ada for SUN-386i Version 1.4, as described 
in this Appendix, are provided by TeleSoft. Unless specifically noted 
otherwise, references in this appendix are to compiler documentation and 
not to this report. 

Implementation-specific portions of the package STANDARD, which are not a 
part of Appendix F, are: 


package STANDARD is 


type INTEGER is range -32768 .. 32767; 

type LONG_INTEGER is range -2147433648 .. 2147433647; 

type FLOAT is digits 6 range -1.70141E+38 .. 1.70141E*33; 
type LONG_FLOAT is digits 15 

range -8.98846567431158E+307 .. 3.98846567431153E+307; 

type DURATION is delta 2n.0#E-14 range -86400 .. 3-400; 


end STANDARD; 















TeleGeii2 Us«r Guide for UNCC 


8.6. LRM Annotations 

TeleGen2 compiles the full ANSI Ada language as defined by the Refertnce Manual for the 
Ada Programming Language (LRM) (ANSI/MIL-STD-1815A). This section describes the 
portions of the language that are designated by the LRM as implementation dependent for the 
compiler and run-time environment. 

The information is presented in the order in which it appears in the LRM. In general, 
however, only those language features that are not fully implemented by the current release of 
TeleGen2 or that require clarification are included. The features that are optional or that are 
implementation dependent, on the other hand, are described in detail. Particularly relevant are 
the sections annotating LRM Chapter 13 (Representation Clauses and Implementation* 
Dependent Features) and Appendix F (Implementation-Dependent Characteristics). 

8.6.1. LRM Chapter 2. 

[LRM 2.1] The host and target character set is the .ASCII character set. 

[LRM 2.2] The maximum number of characters on an .Ada source line is 200. 

[LRM 2.81 TeleGen2 implements ail language-defined pragmas except pragma Optimize. If 
pragma Optimize is included in .Ada source, the pragma will have no effect. 

Limited support is available for pragmas Memory .Size, Storage.Unit, and 3ystem.J^'ame: 
that is, these pragmas are allowed if the argument is the same as the value specified in the 
System package. 

Pragmas Page and List are supported in the context of source/error listings; refer to the 
end of Chapter 3 for more information. 

8.6.2. LRM Chapter 3. 

[LRM 3.2.1] This release of TeieGen2 does not produce warning messages about the use of 
ininitialized variables. The compiler will not reject a program merely because it contains such 
variables. 

[LRM 3.S.1] The maximum number of elements in an enumeration type is 32767. This 
maximum can be realized only if generation of the image table for the type has been deferred, and 
.here are no references in the program that would cause the image table to be generated. 
Deferral of image table generation for an enumeration type, P, is requested by the statement: 

pragma Images (P, Deferred); 

Refer to '‘Implementation-Defined Pragmas," later in this chapter, for more information on 
pragma Images. 

[LRM 3.5.4] There are two predefined integer types: Integer and Long_lnteger. The attributes 
of these types are shown in Table 3-7. Note that using explicit integer type definitions instead of 
predefined integer types should result in more portable code. 


S-44 


UG.1313N-Vl.2(386/UN1X) (S) 1989 TeleSoft 


15MAY89 












PROGRAMMING GUIDE 


Table 8-7. Attributes of Predefined Types Integer and Long_Integer 


Attribute 

Type 

Integer 

Long—Integer 

’First 

-32768 

-2147483648 

’Last 

32767 

2147483647 

’Size 

16 

32 

’Width 

6 

11 


[LRM 3.5.8] There are two predefined floating point types: Float and Long_Floai. The 
attributes of types Float and Long—Float are shown in Table S-8. This fioating point facility is 
based on the IEEE standard for 32-bit and 64-bit numbers. .Vote that using explicit reai type 
definitions should lead to more portable code. 

The type Short-Float is not implemented. 

Table 8-8. Attributes of Predefined Types Float and Long_Float 


Attribute 

Type 

Float 

1 Long-Float 

'Machine-Overflows 

TRUE 

1 TRUE 

'Machine-Rounds 

TRUE 

' TRUE 

’Machine—Radix 

2 

i *> 

1 • 

’Machine-Mantissa 

24 

53 

'Machine—Cmax 

127 

1023 

'Machine—Emin 

-123 

-1021 

'Mantissa 

21 

51 

'Digits 

6 

13 

'Size 

32 

64 

'Emax 

84 

204 

'Safe-Emax 

125 

1021 

'Epsilon 

9.33674E-07 

3.88178E-16 

'Safe-Large 

4.25253E-r37 

2.24711641857789E-K307 

’Safe-Small 

1.17349E-38 

2.22507385850721E - 308 

’Large 

1.93428 E “25 

2.57n0087081438E-J-61 

'Small 

2.58494E-26 

i.9946922743316lE-62 


8.6.3. UtM Chapter 4. 

(LRM 4.10] There is no limit on the range of literal values for the compiler. 

[LRM 4.10] There is no limit on the accuracy of real literal expressions. Reai literal 
expressions are computed using an arbitrary-precision arithmetic package. 


1SMAY86 


UG-1313N-V1.2(386/UN1X) (g) 1989 TeleSoft 


8-45 
























TeleG«n2 User Guide for UNIX 


8.6.4. LRM Chapter 9. 

[LRM 9.6] This implementation uses 32-bit fixed point numbers to represent the type 
Duration. The attributes of the type Duration are shown in Table 8-9. 

Table 8-9. Attributes of Type Duration 


.4ttribute 

Value 

’Delta 

'First 

'Last 

0 

-86400 

86400 


[LRM 9.8] Sixty-four levels of priority are available to associate with tasks through pragma 
Priority. The predefined subtype Priority is specified in the package System as 
subtype Priority is Integer range 0..63; 

Currently the priority assigned to tasks without a pragma Priority specification is 31; that is: 

(System.Priority’First ■+■ System.Priority’Last) / 2 


[LRM 9.11] The restrictions on shared variables are only those specified in the LRM. 

8.6.5. LRM Chapter 10. 

[LRM 10] .\il main programs are assumed to be parameterless procedures or functions that 
return an integer result type. 

8.6.6. LRM Chapter 11. 

[LRM 11.l| .\umeric_Error is raised for integer or floating point overflow and for divide-by¬ 
zero situations. Floating point underflow yields a result of zero without raising an exception. 

Progra m F. rrnr and Storage_Error are raised by those situations specified in LRM Section 
ll.l. Exception handling is also discussed in the "Exception Handling’' section earlier in this 
chapter. 

8.6.7. LRM Chapter 13. As shown in Table 9-10. the current release of TeleGen2 supports 
most LRM Chapter 13 facilities. The sections below the table document those LRM Chapter 13 
facilities that are either not implemented or that require explanation. Facilities implemented 
exactly as described In the LRM are not mentioned. 


8-46 


UG-1S13N-Vl.2(3a6/UNIX) ® 1989 TeieSoft 


15MAY89 














PROGRAMMING GUIDE 


Table 8-10. Summary of LRM Chapter 13 Features for TeleGen2 


13.1 Representation Clauses 

Supported, except as indicated below (LRM 13.2 - ' 
13.5). Pragma Pack is supported, except /or dynam¬ 
ically sized components. For details on the ; 
TeIeGen2 implementation of pragma Pack, see Sec¬ 
tion 8.6.7.1. 

13.2 Length Clauses 

Supported: 

’Size 

’Storage_Size for collections 
’Storage^ize for task activation 
’Small for fixed-point types 

Note: length clauses can be used to reduce the 'Size 
of data types. 

13.3 Enumeration Rep. Clauses 

# 

Supported, except for type Boolean or types derived i 
from Boolean. (Note: users can easily define a non- 
Boolean enumeration type and assign a representa¬ 
tion clause to it.) 

13.4 Record Rep. Clauses 

Supported except for records with dynamically sized 
components. See Section 8.6.7.4 for a full discussion ! 
of the TeieGen2 implementation. j 

13.3 Address Clauses 

Supported for: objects (including task objects). j 

Mot supported for: packages, subprograms, or task j 
units. Task entries are not applicable to TeieGen2 
host compilation systems. 

See Section 8.6.7.5 for more information. 

13.5.1 Interrupts 

Not applicable to TeleGen2 host compilation sys- | 
terns. i 

13.6 Change of Representation 

Supported, except for types with record representa- i 
tion clauses. ' 

. Continued on the next page . j 


15MAYM 


UG-1313N-V1.2(386/UNDC) (S) 1989 TeleSoft 


8-47 
















TeleGeix2 User Guide for UNIX 


Table 8-10. Summary of LRM Chapter 13 Features for TeleGea2 (Contd) 


Continued from the previous page - 

13.7 Package System 

Conforms closely to LRM model. Refer to Section 

8.6.7.7 for details on the TeleGen2 implementation. 

13.7.1 System-Dependent Named 
Numbers 

Refer to the specification of package System (Sec¬ 
tion 8.6.7.7). 

13.7.2 Representation Attributes 

Implemented as described in LRM except that: 
’.Address for packages is unsupported. 

’.Address of a constant yields a null address. 

13.7.3 Representation .Attributes of 
Real Types 

See Table 3-8. 

13.8 Machine Code Insertions 

Fully supported. The TeleGen2 implementation j 
defines an attribute, "Offset, that, along with the 
language-defined attribute ’Offset, allows addresses 
of objects and offsets of data items to be specified in 
stack frames. Refer to Section 3.5 for a full descrip¬ 
tion on the implementation and use of machine code 
insertions. 

13.9 Interface to Other 

Languages 

Pragma Interface is supported for Assembly, C, and j 
UNIX. Refer to Section 8.4 for a description of the | 
implementation and use of pragma Interface. | 

13.10 Unchecked Programming 

Supported except as noted below (LRM’13.10.1 and I 
13.10.2). 

13.10.1 Unchecked Storage Deallo¬ 
cation 

1 

Supported except for types with length clauses for I 
storage size. i 

13.10.2 Unchecked Type Conver¬ 
sions 

Supported except for unconstrained record or array i 
types. ! 


8.6.7.1. Pragma Pack. This section discusses how pragma Pack is used in the TeleGen2 
implementation. 

a. With Boolean Arrays. You may pack Boolean arrays by the use of pragma Pack. 
The compiler allocates 16 bits for a single Boolean. 8 bits for a component of an unpacked 
Boolean array, and 1 bit for a component of a packed Boolean array. The first figure illustrates 
the layout of an unpacked Boolean array; the one below that illustrates a packed Boolean array; 


8-48 


UG-1313N-Vl.3(38e/UNIX) © 1989 TeJeSoft 


15MAY89 


















PROGRAMMING GUIDE 


-Unpacked Boolean array;- 

Unpacked_Bool_Arr_Type is array (Natural range 0..1) of Boolean 
U_B_Arr: Unpacked_Bool_Arr_Type := (True,False); 


Element 0 
Element 1 


MSB LSB 

7 0 


0 

1 

0 

0 


-Packed Boolean array:- 

Packed_Bool Arr_Type is array (Natural range 0..6) of Boolean; 
pragma Fack (Packed_Bool_Arr_Type); 

P_B_Arr: Packed_Bool_Arr_Type := (P__B_Arr(0) => True, 

P B Arr(5) => True, others => False); 


MSB/HOB LSB/LOB 

13 TO 




Z 

0 

0 

0 

Z 

Z 

o 

o 

0 

Z 

0 

z 

z 



P B Arr 


b. With Records. You may pack records by use of pragma Pack. Packed records follow 
these conventions: 

1. The total size of the record is a multiple of 8. 

2. Packed records may cross word boundaries. 

3. Records are packed to the bit level if the elements are themselves packed. 

Below is an example of packing in a procedure, Rep—Proc, that defines three records of different 
engths. Objects of these three packed record types are components of the packed record Rec. 
The storage allocated for Rec is 16 bits: that is. it is maximally packed. 


15MAYS0 


UG-1313N-V1.2(380/UNIX) (S) 1089 TelcSoft 


8^9 














Vi'-i- 


; .•■%'v-vv *■ <«£ ."•« «* ^... • atw>* ^.-tK.• «c^ 2 * «>« 


TeleG«n2 User Guide for UNIX 


procedure Rep_Proc is 

type A1 is array (Natural range 0 .. S) of Boolean; 
pragma Pack (Al); 

type A2 is array (Natural range 0 .. 3) of Boolean; 
pragma Pack (A2); 

type A3 is array (Natural range 0 .. 2) of Boolean; 
pragma Pack (A3); 

type AwJtec is 
record 

One : Al; 

Two A2; 

Three : A3; 
end record; 
pragma Pack (A_Rec) ; 

Rec : A_Rec; 

begin 

Rec.One := ( 0 => True, 

3 => False, 

6 => False, 

Rec.Two (3) := True; 

Rec.Three (1) := True; 
end Rep__Proc; 

8.6.7.2. Length Clauses [LRM 13.2). Length clauses of the form '‘‘for T’Storage_Sise rise 
<expression>;” (where T is a task type) specify the size to be allocated for that task’s stack at 
run time. The use of this clause is encouraged in all tasking applications to control the size of the 
applications. Otherwise, the compiler may default this value to a large size. TeleGen2 allows 
you to specify storage for a task activation using the ’Storage-Size attribute in a length clause. 

8.6.7.3. Enumeration Representation Clauses [LRM 13.3). Enumeration representation 
clauses are supported, except for Boolean types. 

Performance note: Be aware that use of such clauses will introduce considerable overhead 
into many operations that involve the associated type. Such operations include indexing an array 
by an element of the type, or computing the ’Pos, 'Pred, or ’Succ attributes for values of the 
type. 

8.6.7.4. Record Representation Clauses [LRM 13.4], Since record components are 
subject to rearrangement by the compiler, you must use representation clauses to guarantee a 
particular layout. Such clauses are subject to the following constraints: 

• Each component of the record must be specified with a component clause. 

• The alignment of the record is restricted to mods 1 and 2, byte and word aligned. 

• Bits are ordered right to left within a byte. 

« Components may cross word boundaries. 

Here is a simple example showing how the layout of a record can be specified by using 
representation clauses: 


1 => False, 2 => False, 

4 => True, 5 => False, 

7 => False, 8 => True ); 


8-50 


UG-1313N-V1.3( 386/UNIX) © 1980 TeleSoft 


1SMAY89 














'«'-''«-.:V».C.-«'~-x 


PROGRAMMING GUIDE 


package Repspec—Exaaple is 
Bits : constant := 1; 

Word : constant := 4;. 

type Five is range 0 .. 16#1F#; 

type Seventeen is range 0 .. 16#IFFFF#; 

type Nine is range 0 .. 511; 

type RecordJLayout—Type is record 
Elementl : Seventeen; 

Eleoent2 : Five; 

Elements : Boolean; 

Elefflent4 : Nine; 
end record; 

for Record__Layout_Type use record at mod 2; 
Elementl at 0-Word rsuige 0 .. 16; 

Element2 at 0«Word range 17 .. 21; 

Elements at 0«Word range 22 .. 22; 

Element4 at 0-Word range 23 .. 31; 

end record; 

Record_Layout : Record_Layout—Type; 
end Repspec-Example; 


8.6.7.5. Address Clauses [LRM 13.5|. The Ada compiler supports address clauses for 
objects, subprograms, and entries. .Address clauses for packages and task units are not 
supported. 

•Address clauses for objects may be used to access hardware memory registers or other 
known memory locations. The use of address clauses is affected by the fact that the 
System..\ddress type is private. For the 50386 target. literal addresses are represented fis 
integers, so an unchecked conversion must be applied to these literals before they can be passed 
as parameters of type System.Address. For e.xample, in the examples In this chapter the 
following declaration is often assumed: 

function Addr is new Unchecked_Conversion (Long-Integer,System.Address); 

This function is invoked when an address literal needs to be converted to an .Address type. 
Naturally, user programs may implement a different convention. Below is a sample program that 
uses address clauses and this convention. Package System must be explicitly wxthed when using 
address clauses. 

with System; 

with Unchecked—Conversion; 
procedure flardwarsL-Access is 

function Addr is new Unchecked-Conversion (Long—Intege' , System.Address); 

Hardware-Register : integer; 

for Hardware—Register use at Addr (1S#FFOOOO#); 
begin 

end Hardware—Access; 


15MAY89 


UC-1313N-V1.3(380/UN1X) © 1989 TeleSoft 


8-Sl 












TeleGen2 User Guide for UNIX 


When using an address clause for an object with an Initial value, the address clause should 
immediately follow the object declaration: 

Obj: Some-Type := <initL_expr>; 

for Qbj use at <addr_expr>; 

This sequence allows the compiler to perform an optimization wherein it generates code to 
evaluate the <addr_expr> as part of the elaboration of the declaration of the object. The 
expression <init_expr> will then be evaluated and assigned directly to the object, which is stored 
at <addr^xpr>. If another declaration had intervened between the object declaration and the 
address clause, the compiler would have had to create a temporary object to hold the 
initialization value before copying it into the object when the address clause is elaborated. If the 
object were a large composite type, the need to use a temporary could result in considerable 
overhead in both time and space. To optimize your applications, therefore, you are encouraged 
to place address clauses immediately after the relevant object declaration. 

.\s mentioned above, arrays containing components that can be allocated in a signed or 
unsigned byte (3 bits) are packed, one component per byte. Furthermore, such components are 
referenced in generated code by 80386 byte instructions. The following example indicates how 
these facts allow access to hardware byte registers: 

with System; 

with Unchecked_Conversion; 

procedtire Main is 

function Addr is new UncheckecL-Conversion (Longjinteger, System.Address); 

type Byte is range -128..127; 

HW_Regs : array (0..1) of Byte; 

for HW_Regs use at Addr (16irFFF310#); 

Status;_Byte : constant integer := 0; 

Mext—Block—Request: constant integer := 1; 

Request_Byte : Byte := 119; 

Status : Byte; 

begin 

Status := HW_Regs(Status_Byte); 

EWf—Regs(Next_Block_Request) := Request_Byte; 

end Main; 

Two byte hardware registers are referenced in the example above. The status byte is at location 
16#FFF310# and the next block request byte is at location 16#FFF311#. 

Function .Addr takes a long integer as its argument. Long_Integer’Last is 16w7FFFFFFFw, 
but there are certainly addresses greater than LongJnteger’Last. Those addresses with the high 
bit set. such as FFFAOOOO, cannot be represented as a positive long integer. Thus, for addresses 
with the high bit set, the address should be computed as the negation of the 2’3 complement of 
the desired address. According to this method, the correct representation of the sample address 
above would be Addr(-16#00060000#). 

8.6.7.6. Change of Representation [LRM 13.6j. TeleGen2 supports changes of 

representation, except for types with record representation clauses. 


8-52 


UG-1S13N-V1.2(386/UNIX) © IMP TeleSoft 


1SMAY89 










PROGRAMMING GUIDE 


8.6.7.7. The Package System [LRM 13.7]. The specification of TeleGen2’s implementation 
of package System is presented in the LRM Appendix F section at the end of this chapter. 

8.6.7.8. Representation Attributes [LRM 13.7.2). The compiler does not support 
’.\ddress for packages. 

8.6.7.9. Representation Attributes of Real Types [LRM 13.7.3). The representation 
attributes for the predefined floating point types were presented in Table 8-8. 

8.6.7.10. Machine Code Insertions [LRM 13.8). Machine code insertions, an optional 
feature of the .\da language, are fully supported in TeleGen2. Refer to the '‘Using Machine Code 
insertions” section earlier in this chapter for information regarding their implementation and 
examples on their use. 

8.6.7.11. Interface to Other Languages [LRM 13.9). In pragma Interface is supported for 
.Assembly, C, and UNIX. Refer to Section 8.4 for information on the use of pragma Interface. 
'"eleGen2 does not currently allow pragma Interface for library units. 

8.6.7.12. Unchecked Programming [LRM 13.10). Restrictions on unchecked 
programming as it applies to TeleGen2 are listed in the following paragraphs. 

[LRM 13.10.2] Unchecked conversions are allowed between types (or subtypes) Tl and T2 as 
long as they are not unconstrained record or array types. 

8.6.8. LRM Appendix F for TeleGen2. The .Ada language definition allows for certain 
target dependencies. These dependencies must be described in the reference manual for each 
implementation, in an ”.A.ppendix F” that addresses each point listed in LRM .Appendix F. 
Table 3-11 constitutes .Appendix F for this implementation. Points that require further 
clarification are addressed in the paragraphs that follow the table. 


1SMAY89 


UG-1313N-V1.2(386/UNDC) © 1989 TeleSoft 


8.53 













TeleGen2 User Guide for UNIX 


Table 8-11. LRM Appendix F for TeIeGen2 


(1) Implementation-Dependent Pragmas 

I 

i 

i 

! 

i 

1 

fa) Implementation-defined pragmas: Comment. 

! Linkname. Images, and No_Suppress (Section ! 

8.6.8.1). i 

(b) Predefined pragmas with implementation- ; 
dependent characteristics: > 

! 

• Interface (assembly, UNIX, and C). i 

(Section 8.4). .Not supported for | 

library units. * 

- List and Page (in context of source/error ; 

compiler listings) (Section 3.7.1.3). 

i (2) Implementation-Dependent Attri¬ 

butes 

TeieGen2 uses one implementation-defined attri- | 
bute. 'Offset, which, along with the attribute ■.\d- ! 
dress, facilitates machine code insertions by allowing ■ 
user programs to access .\da objects with little date j 
movement or setup. These two attributes and their i 
usage were described in ‘‘Using Machine Code Inser¬ 
tions," earlier in this chapter. i 

Address is not supported for packages. 

(3) Package System t See Section 8. 6. 7.7. 1 

(4) Restrictions on Representation { Summarized in Table 8-10. 

Clauses i ' 

(5) Implementation-Generated Names j 

1 

None 1 

(6) .address Clause Expression Interpre¬ 
tation 

j 

.\n expression that appears in an object address 
clause is interpreted as the address of the first 
storage unit of the object. 

(7) Restrictions on Unchecked Conver- | Summarized in Table 8-10. j 

sions ! 

—-- Continued on the next page . 


8-54 


UG-1313N-V1.2(388/UNIX) ® 1989 TeleSoft 


15MAY89 










PROGRAxMMING GUIDE 


Table 8-11. LRM Appendix F for TeleGen2 (Contd) 


-- Continued from the previous page . 1 

(8) Implementation-Dependent Charac¬ 
teristics of the 1/0 Packages. 

■ 

1. In Te.xt_IO, the type Count is defined as follows: j 
type Count is range 0..System.Max Text_IO_Count; I 

~ or O...MaxJnt-l OR 0..2_147_483_646 

2. In Text_IO, the type Field is defined as follows: 

subtype Field is integer range ! 

System..Max_Text_IO-Field; 

3. In Text_IO. the Form parameter of procedures 

Create and Open is not supported. (If you sup- i 
ply a Form parameter with either procedure, it | 
is ignored.) ! 

4. Sequential_IO and Direct_IO cannot be instan- | 

tiated for unconstrained array types or discrim¬ 
inated types without defaults. | 

5. The standard library contains preinstantiated i 

versions of Text_JO.Integer_IO for types Integer [ 
and Long-Integer and of Text_IO.Float-IO for 1 
types Float and Long-Float. We suggest that : 
you use the following to eliminate multiple in- ^ 
stantiations of these packages; I 

Integer-Text-10 j 

Long-Integer_Texi_IO 

Float-Text_IO . 

Long-FIoat_Te.xt-IO 


8.6.8.1. Implementation-Defined Pragmas. There are four implementation-defined 
pragmas in TeleGen2; pragmas Comment, Linkname. Images, and No_5uppress. 

8.6.8.1.1. Pragma Comment. Pragma Comment is used for embedding a comment into the 
oject code. Its syntax is: 

pragma Comment ( <atrmg_Iiteral> ); 

where •*<string-literal>” represents the characters to be embedded in the object code. Pragma 
Comment is allowed only within a declarative part or immediately within a package specification. 
.\ny number of comments may be entered into the object code by use of pragma Comment. 

8.6.8.1.2. Pragma Linkname. Pragma Linkname is used to provide interface to any routine 
whose name can be specified by an Ada string literal. This allows access to routines whose 
identifiers do not conform to Ada identifier rules. 

Pragma Linkname takes two arguments. The first is a subprogram name that has been 
previously specified in a pragma Interface statement. The second is a string literal specifying the 


15MAY89 


UG-1313N-V1.2(386/UN1X) <2) 19M TeleSoft 


8.55 


















TeleGen2 User Guide for UNIX 


exact link name to be employed by the code generator in emitting calls to the associated 
subprogram. The syntax is: 

pragma Interface ( assembly, <3ubprogTam_name> ); 
pragma Linkname ( < 3 ubprogTam_name>. <3tring_literal> ); 

If pragma Linkname does not immediately follow the pragma Interface for the associated 
program, a warning will be issued saying that the pragma has no effect. 

.A. simple example of the use of pragma Linkname is: 

procedure D\iminy_Access( Dumay_Arg ; System.Address ) ; 
pragma Interface (assembly, Dufflffly_Access ); 
pragma Linkname (Dumffly_4ccess, access"); 


8.6.8.1.3. Pragma Images. Pragma Images controls the creation and allocation of the image 
and index cables for a specified enumeration type. The image table is a literal string consisting of 
enumeration literals catenated together. The index table is an array of integers specifying the 
location of each literal within the image table. The length of the index table is therefore the sum 
of the lengths of the literals of the enumeration type; the length of the index table is one greater 
than the number of literals. 

The syntax of this pragma is: 

pragma Image3(<enumeracion_type>. Deferred): 

-- or -• 

pragma Images(<enumeratioii-type>. Immediate); 

The default. Deferred, saves space in the literal pool by not creating image and index cables for 
an enumeration type unless the Image. ’Value, or 'Width attribute for the type is used. If one of 
these attributes is used, the tables are generated in the literal pool of the compilation unit in 
which the attribute appears. If the attributes are used in more chan one compilation unit, more 
than one set of tables is generated, eliminating the benefits of deferring the table. In this case, 
sing 


pragma Image3(<eniimeration_type>. Immediate); 

will cause a single image table to be generated in the literal pool of the unit declaring the 
numeration type. 

For a very large enumeration type, the ieng.h of the image table will exceed Integer’Lasc 
(the maximum length of a string). In this case, usn.g either 

pragma Images(<enTuneration_type>. Immediate); 

or the 'Image, 'Value, or 'Width attribute for the type will result in an error message from the 
compiler. 


8.6.8.1.4. Pragma NojSuppresa. No_Suppress is a TeleGen2-defined pragma that prevents 
the suppression of checks within a particular scope. It can be used to override pragma Suppress 
in an enclosing scope. No_Suppress is particularly useful when you have a section of code that 
relies upon predefined checks to execute correctly, but you need to suppress checks in the rest of 


S-56 


UG-1S13N-V1.2(386/TJNIX) © 1989 TeleSoft 


15MAY89 











PROGRAMMING GUIDE 


the compilation unit for performance reasons. 

Pragma No_Suppress has the same syntax as pragma Suppress and may occur in the same 
places in the source. The syntax is: 

pragma No_Sappress (<identifier> [, (ON =>] <name>]); 

where <identifier> is the type of check you want to suppress (e.g., access_check: refer to 
LRMll.7) 

<nanie> is the name of the object, type/subtype, task unit, generic unit, or subprogram 
within which the check is to be suppressed; <name> is optional. 

If neither Suppress nor No_3uppress are present in a program, no checks will be suppressed. 
You may override this default at the command level, by compiling the file with the -i(nhibit 
option and specifying with that option the type of checks you want to suppress. For more 
information on -i(nhibit. refer to Chapter 3. 

If either Suppress or .Vo_Suppress are present, the compiler uses the pragma that applies to 
the specific check in order to determine whether that check is to be made. If both Suppress and 
.No_Suppress are present in the same scope, the pragma declared last takes precedence. The 
presence of pragma Suppress or No_Suppress in the source takes precedence over an -i(nhibit 
option provided during cbmpilation. 

8.6.8.2. Package System. The current specification of package System is provided below. 


15MAY80 


UG-13I3N-VI.2(386/UNIX) © 1989 TeleSoft 


8-ST 





TeleGenS User Guide for UNDC 


PACKAGE System IS 

TYPE Address is Access Integer; 

TYPE Subprogram^Value is PRIVATE; 

TYPE Name IS (TELEGEN2); 

System Name : CONSTANT name TELEGEN2; 

Storage Unit : CONSTANT :* 8; 

Memory_Size ; CONSTANT (2 ** 31) - 1; 

— System-Dependent Named Numbers: 

Min Int : CONSTANT -<2 31); 

Max“lnt : CONSTANT :=. (2 31) - 1; 

Max"Digits : CONSTANT 15; 

Max~Mantissa ; CONSTANT :* 31; 

Fini Delta : CONSTANT 1.0 / (2 ** Max_Mantissa); 
Tick“ : CONSTANT lO.OE-3; 

— Other System-Dependent Declarations 
SUBTYPE Priority IS Integer RANGE 0 .. 63; 

PRIVATE 


END System; 


8.6.8.3. Representation Clause Restrictions. Restrictions on representation clauses within 
Tele<jen2 were discussed in “LR\I Chapter 13,” earlier in this section. 

8.6.8.4. Implementation-Generated Names. There are no implementation-generated 
names to denote impiementation-dependent components. 

8.6.8.5. Address Clause Expression Interpretation. An expression that appears in an 
object address clause is interpreted as the address of the first storage unit of the object. 

8.6.8.6. Unchecked Conversion Restrictions. Restrictions on unchecked conversions were 
discussed in “Unchecked Programming,” earlier in this section. 


8*58 


UC-131SN-V1.3(386/UN1X) © TeleSoft 


1SMAY89 















PROGRAMMING GUIDE 

8.6.8.7. Implementation-Dependent Characteristics of the I/O Packages. 

1. In Text_IO, the type Count is defined as follows: 

type Count is range 0..Long—Tateger’Last - 1 

2. In Text_IO, the type Field is defined as follows: 

subtype Field is integer range 0..Text__Manager.Field’Last; 

3. 5equential_IO and Direct_IO cannot be instantiated for unconstrained array types or 
discriminated types without defaults. 

4. The standard library contains preinstantiated versions of Text_IO.Integer_IO for type 
Integer and Long_Integer and of Text_IO.Float_IO for type Float and Long_Float. It 
is suggested that the following be used to eliminate multiple insteuitiations of these 
packages: 

Integer _Text_IO 
Long_Integer_Text_IO 
Float_Text_IO 
Long_F loat _Text _IO 


15MAY89 


UG-1313N-V1.3(386/UNDC) © 1989 TeleSoft 


8.59 








TEST PARAMETERS 


APPENDIX C 
TEST PARAMETERS 


Certain tests in the ACVC make use of implementation-dependent "alues, such 
as the :r.a:-:i:r.urn length of an input line and invalid file names. A test that 
makes use of such values is identified by the extension .TST in its file 
name. Actual values to be substituted are represented by names that begin 
with a dollar sign. A value must be substituted for each of these names 
before the test is run. The values used for this validation are given 
below: 


Name and Meaning 


Value 


$ACC_SIZE 32 

An integer literal whose value 
is the number of bits sufficient 
to hold any value of an access 
type. 

SBIG.IDl 199 * ’A’ & '1' 

An identifier the size of the 
.v.axi-mum input line length which 
is identical to SBIG_ID2 except 
for the last character. 


$BIG_rD2 199 * 'A' 4 '2' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID1 except 
for the last character. 


$BIG_ID3 100 * 'A' 4 '3' & 99 » 'A' 

An identifier the size of the 
maximum input line length which 
is identical to $BIG_ID4 except 
for a character near the middle. 









TEST PARAMETEPS 


Na-ne and Meaning Value 

SBIG_ID4 100 * 'A' & '4' & 99 * 'A' 

An identifier the size of the 
maximum input line length which 
is identical to SBIG_ID3 except 
for a character near the middle. 

$BIG_INT_LIT 197 * '0' & "298" 

An integer literal of value 298 
with enough leading zeroes so 
that it is the size of th<^ 
maximum line length, 

$BIG_REAL_LIT 195 * 'O' & "690.0" 

A universal real literal of 
value 690.0 with enough leading 
zeroes to be the size of the 
line le.ngth. 

$BIG_STRING1 & 100 * 'A' & ’ 

A string literal which when 
catenated with BIG_STRIHG2 
yields the image of BIG_ID1, 

$BIG_STRING2 & 99 * 'A' & '1' & ”” 

A String literal which when 
catenated to the end of 
BIG^STRINGl yields the image of 

bigIidi, 

SBLANKS 130 * ■ ■ 

A sequence of blanks twenty 
characters less than the size 
of the maximum line length. 

SCCUWT_LAST 2_147_483_546 

A universal integer 

literal whose value is 
TEXT_rO.COUNT'LAST. 

$DEFAULT_MEM_SIZE 2147483647 

An integer literal whose value 
is SYSTEM.MEMORy_SI2E. 

SDEFAULT_STOR_UNIT 8 

An integer literal whose value 
is SYSTEM.STORAGE UNIT. 










TEST PARAMETERS 


Nar'.e and Meaning 


$DEFAULT_SYSJIAME 

The value of the constant 
SYSTEM. SYSTEMJIAME. 

SDELTA_DOC 

A real literal whose value is 
SYSTEM.FINE_DELTA. 

SFIELD.LAST 

A universal integer 

literal whose value is 
TEXT 10.FIELD'LAST. 


$FIXED_NAME 

The name of a predefined 
fixed-point type other than 
DURATICN. 

SFLOATJIAME 

The name of a predefined 
floating-point type other than 
FLOAT, SH0RT_FL0AT, or 
LONG FLOAT. 


SGREATER.THAN.DURATIOM 

A universal real literal that 
lies between DURATION'BASE'LAST 
and DURATION'LAST or any value 
in the range of DURATION. 


SGREATER_THAN_DURATION_BASE_LAST 

A universal real literal that is 
greater than DURATION'BASE'LAST. 


$HIGH_PRIORITY 

An integer literal whose value 
is the upper bound of the range 
for the subtype SYSTEM.PRIORITY. 


$ILLEGAL_EXTERNAL_FILE_NAME1 

An external file name which 
contains invalid characters. 


$ILLEGAL_EXTERNAL_FILE_NAME2 

An external file name which 
is too long. 


Value 

TELEGEN2 

2n.0#E-31 

1000 

NO_SUCH_TYPE 

NO_SUCH_TYPE 

1OO_OOO.0 

131_073.O 

63 

BADCH.AR * ■/% 

/NONAHE/DIRECTORY 








TEST PARAMETERS 


Name and Ileaning 

$INTEGER_FIRST 

A universal integer literal 

whose value is INTEGER'FIRST. 

$INTEGER_LAST 

A universal integer literal 

whose value is INTEGER'LAST. 

$INTEGER_LAST_PLUS_1 

A universal integer literal 

whose value is INTEGER'LAST + 1. 

$LESS_THAN_DURATION 

A universal real literal that 
lies between DURATION'BASE'FIRST 
and DURATION'FIRST or any value 
in the range of DURATION. 

$LESS_THAN_DURATION_BASE_FIRST 

A universal real literal that is 
less than DURATION'BASE'FIRST. 

SLOW.PRIORITY 

An integer literal whose value 
is the lower bound of the range 
for the subtype SYSTEM.PRIORITY. 

$MANTISSA_DOC 

An integer literal whose value 
is SYSTEM.MAX_MANTISSA. 

$MAX_DIGITS 

Maximum digits supported for 
floating-point types. 

$MAX_IN_LEN 

Maximum input line length 
permitted by the implementation. 

$MAX_INT 

A universal integer literal 
whose value is SYSTEM.MA.X_INT. 

SNAX_INT_PLUS_1 

A universal integer literal 
whose value is SYSTEM.MAX INT+1. 


Value 

-32768 

32767 

327^3 

-lOO.OOO.O 

-131^073.0 

0 

31 

15 

200 

2147483647 

2 147 483 648 









TEST PARAMETERS 


Nane and Meaning Value 

SiMAX_LEN_INT_BASED_LITERAL "2:’’ & 195 * 'O’ & "11:" 

A universal integer based 
literal whose value is 2#lli 
with enough leading zeroes in 
the mantissa to be !!AX_IN_LEN 
long. 

$KA.X_LEN_REAL_EASSD_LITERAri "15:" 5 193 * 'O' "F.E:" 

A universal real based literal 
whose value is 16:F.E: with 
enough leading zeroes in the 
mantissa to be MAX_IN_LEN long. 

$MAX_STRING_LITERAL & 193 * 'A' & "" 

A string literal of size 
MAX_III_LEN, including the quote 
characters. 

$MIH_INT -2147483648 

A universal integer literal 
whose value is SYSTEM.MIN_INT. 

$MIN_TASK_SIZE 32 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
no entries, no declarations, and 
"NU!L;" as the only statement in 
its body. 

SrfAME HO_SUCH_TYPE_AVAILABLE 

A name of a predefined numeric 
type other than FLOAT, INTEGER, 

SHORT_FLOAT, SHORT_INTEGER, 

LOHG_FLOAT, or LONG_INTEGER. 

$NAME_LIST TELEGEN2 

A list of enumeration literals 
in the type SYSTEM.NAME, 
separated by commas. 

$MEG_BASED_INT 16#FFFFFFFEif 

A based integer literal whose 
highest order nonzero bit 
falls in the sign bit 
position of the representation 
for SYSTEM.MAX INT. 











TEST PARAMETERS 


Manis and Meaning 
$NEW_WEM_SIZE 

An integer literal whose value 
is a permitted argument for 
pragma MEM0RY_SI2E, other than 
SDEFAULT.MEM^SIZE. If there is 
no other value, then use 
$DEFAULTJ^EM_SIZE. 

$IIEW_STOR_UNIT 

An integer literal whose value 
is a permitted argument for 
pragma STORAGE_UNIT, other than 
$DEFAULT_STOR_UNIT. If there is 
no other permitted value, then 
use value of SYSTEM.STORAGE^UNIT, 

$:rEM_sY3j;A.ME 

A value of the type SYSTEM.NAME, 
other than $DEFAULT_SYSJIAME. If 
there is only one value of that 
type, then use that value. 

STASK.SIZE 

An integer literal whose value 
is the number of bits required 
to hold a task object which has 
a single entry with one 'IN OUT' 
parameter. 

$TICK 

A real literal whose value is 
SYSTEM.TICK. 


Value 

2147483647 


8 


TELEGSN2 

32 


0.01 













VITHDRAVN TESTS 


APPENDIX D 
WITHDRAWN TESTS 


Some tests are withdrawn from the ACVC because they do not conform to the 
Ada Standard. The following 44 tests had been withdrawn at 
the time of validation testing for the reasons indicated. A reference of 
the fprm Al-ddddd is to an Ada Commentary. 


a. E28005C This test expects that the string "— TOP OF PAGE. 

63” of line 204 will appear at the top of the listing page due 
to a pragma PAGE in line 203; but line 203 contains text that 
follows the pragma, and it is this that must appear at the top 
of the page. 

b. A390C5G This test unreasonably expects a component clause to 

pack an array component into a minimum size (line 30). 

c. B97102E This test contains an unitended illegality: a select 

statement contains a null statement at the place of a selective 
wait alternative (line 31). 

d. C97116A This test contains race conditions, and it assumes that 
guards are evaluated indivisibly. A conforming implementation 
may use interleaved execution in such a way that the evaluation 
of the guards at lines 50 & 54 and the execution of task CHANGING- 
_OF_THE_GUARD results in a call to REPORT.FAILED at one of 
lines 52 or 56. 

e. BC3009B This test wrongly expects that circular instantiations 
will be detected in several compilation units even though none of 
the units is illegal with respect to the units it depends on; by 
AI-00256, the illegality need not be detected until execution is 
attempted (line 95) . 

f. CD2A62D This test wrongly requires that an array object’s size 
be no greater than 10 although its subtype's size was specified 
to be 40 (line 137). 












VITHDRAWM TESTS 


a. CD2A63A..D, CD2A66A..D, CD2A73A..D, CD2A75A..D [16 tests] These 
tests wrongly atter.pt to check the size of objects of a derived 
type (for which a 'SIZE length clause is given) by passing them 
to a derived subprogram (which implicitly converts them to the 
parent type (Ada standard 3.4:14)). Additionally, they use the 
'SIZE length clause and attribute, whose interpretation is 
considered problematic by the WG9 ARG. 

h. CD2A31G, CD2A33G, CD2A34N & M, & CD50110 [5 tests] These tests 

assume that dependent tasks will terminate while the main pro¬ 
gram executes a loop that si.mply tests for task termination; this 
is not the case, and the main program may loop indefinitely 
(lines 74, 85, 86 & 96, 36 & 95, and 58, resp.). 

i. CD2B15C & CD7205C These tests expect that a 'STORAGE_SIZE 
length clause provides precise control over the number of 
designated objects in a collection; the Ada standard 13.2:15 
allows that such control must not be expected. 

j. CD2D11B This test gives a SHALL representation clause for a 

derived fixed-point type (at line 30) that defines a sat of 
model numbers that are not necessarily represented in the 
parent type; by Commentary AI-00099, all model numbers of a 
derived fixed-point type must be representable values of the 
parent type. 

k. CD5007B This test wrongly expects an implicitly declared sub¬ 

program to be at the the address that is specified for an un¬ 
related subprogram (line 303). 

l. ED7004B, ED7O05C & D, ED7006C 4 D [5 tests] These tests check 
various aspects of the use of the three SYSTEM pragmas; the AVO 
withdraws these tests as being inappropriate for validation. 

m. CD7105A This test requires that successive calls to CALENDAR.- 

CLOCK change by at least SYSTEM.TICK; however, by Commentary 

AI-00201, it is only the expected frequency of change that must 
be at least SYSTEM.TICK—particular instances of change may be 
less (line 29). 

n. CD7203B, 4 CD7204B These tests use the 'SIZE length clause and 
attribute, whose interpretation is considered problematic by 
the WG9 ARG. 

o. CD7205D This test checks an invalid test objective: it treats 

the specification of storage to be reserved for a task’s 
activation as though it were like the specification of storage 
for a collection. 













WITHDRAWN TESTS 


p. CE2107I This test requires that objects of sir.ilar scalar 
types be distinguished '-'hen read fron a file—DATA_EP.P.OR is 
expected to be raised by an attempt to read one object as of 
the other type. However, it is not clear exactly how the Ada 
standard 14.2.4:4 is to be interpreted; thus, this test objective 
is not considered valid, (line 90) 

q. CE3111C This test requires certain behavior, when two files are 

associated with the same external file, that is not required by 
the Ada standard. 

r. CE3301A This test contains several calls to END_OF_LINE i 
END_OF_PAGE that have no parameter; these calls were intended 
to specify a file, not to refer to STANDARD_INPUT (lines 103, 
107, 118, 132, 4 136). 

s. CE3411B This test requires that a text file's column number be 

set to COUNT'LAST in order to checlc that LAYOUT_ERROR is raised 
by a subsequent PUT operation, 3ut the former operation will 
generally raise an exception due to a lack of available disk 

space, and the test would thus encumber validation testing. 








COMPILER AMD LINKER OPTIONS 


APPENDIX E 

COMPILER AND LINKER OPTIONS 

This appendix contains an explanation of the compiler 
and linker options available for this conpiler. 
References and page numbers in this appendix are 
consistent with compiler documentation and not with 
this report. 











ACRI I I 


I .sf:r commwi)" 


\* n ( I ! 


NAME 

acr — Sun Ada Create-Sublibrary utility 
SYNOPSIS 

acr -f] -V vsm_siie| !-m max sizei sublibi.sub ... 

DESCRIPTION 

The acr command creates an empty .Ada subiibrary for each sublibrary named on the command 
line. It builds both the sublibrary hie and the corresponding object directory. The sublibrary hi* 
IS a database that holds intermediate code and other data generated by a compilation. It has the 
hie extension ".sub"; this extension is optional when using aer The object directory holds the 
object code generated by the compilation or binding process, and has the hie extension " obj" 

Once the sublibrary is created and initialized with the aer command, it can then be used as a 
working element of the .Ada program library database to receive and store output from .Ada 
compilations. See the Sun Ada Uter Guide for a full description of sublibraries and how they are 
used in Ada compilations and in Sun .Ada library management utilities. 

OPTIONS 

•f Force creation of the sublibrary even if one of the name specified already exists. Use of 
this option causes the old sublibrary to be overwritten. 

•m max *tze 

Set the maximum size of the the subiibrary database file to max_sue pages. The pages 
are allocated In l<Kbyte (I024>byte) blocks. Max_size must be an integer value between 
l.CXXl and 32,000. This value should not be arbitrarily large, as the library contains a 
fixed'size page table whose size is proportional to the value parameter. The value is less 
than 1000 units because of the internal sublibrary catalog size. The default size is 3192 
Kbytes (about 3 .MB), which alio /s the sublibrary to hold as many units such that their 
sue adds up to 3 .V(B subject to the 1000 units catalog limit. 

•V Bsm »«e 

Set the size of the Virtual Space .Manager s buffer space to vsm_size Kbytes. The default 
vsm size for the command is loOO Kbytes. 

The optimal value for vsm size depends on the amount of system memory available and 
the number of concurrent users. For a full description see the Sun Ada U$er Guxae. 


SEE ALSO 

acp(l). ada(l). aJs(l). ainv(l), ann(i) 


Sun Ada 1.2 


Last change; 18 February 1988 


1 










ADA! I) 


I StR (:OMMA.\[)> 


\l>\i I I 


NAME 

ada - Sun Ada Compiler 
SYNOPSIS 

ada [*1 Hbnamel templibi [-V vsm sizet j-C ni -E ni 
|-m unit (-b, -T n, -P options, -p objects, -o fileii 
j-0 key I'G -I filejj j-LFSdeksvxi input_spec 

DESCHIPTION 

The ada command calls the Sun Ada compiler, which comprises the front end, middle pass, code 
generation, and list generation phases. By default the front end, middle pass, and code generation 
phases are executed. This process results in the generation of object modules, which are put into 
the object directory of the working sublibrary. Optionally, the .Ada binder and native linker may 
be be invoked to create an executable file. 

The command terminator, input spec, indicates the file or files to be compiled. Any number and 
combination of files may be specified, up to the maximum line length. Files listed on the 
command line that have no extension are giv«n the extension ”.ada" by the compiler. Source files 
that have the ".ada" extension are assumed to contain Ada text to be compiled, whereas source 
files that have the " ilP extension are assumed to contain a list of files to be compiled. 

The temporary errors file is created in /tmp as errorXXXXXX, with the "XXXXXX" being 
replaced with the compilation process number to prevent file name collision. 

Compilation errors as well as compiler driver errors (e.g. "file not found") are output to stderr. 
Informational output will also be directed to $tderr. Banner messages as provided by the -v option 
are examples of informational output. 

OPTIONS 

Library Speeifieation Options: 

•1 tibname 

Use libname as the file containing the sublibrary list. The sublibrary list is the ordered set 
of sublibraries that collectively define the .Ada Program Library. If this option is omitted, 
and the -t option is not used, the default libUt.aib is assumed to be the library. -I cannot 
be used with't. 

-t tempiib 

Use tempiib as a temporary sublibrary list for this process. The -I option must not be 
used when the't option is given. The default sublibrary list file is not read. The first 
sublibrary in the list is the working sublibrary Tefnplib may be specified as 
"sublibl.sublibl..." or as "sublibl sublibi ~i cannot be used with •!. 

-V osm size 

"Set the sise of the Virtual Space Manager s buffer space to vsm_size Kbytes. The default 
vsm sise for the command is 2000 Kbytes. 

The optimal value for vsm size depends on the amount of system memory available and 
the number of concurrent users. For a full description see the Sun Ada User Guide. 

CompUer Execution Control Options: 

•E n Abort compilation after n errors. Only errors detected by the front end phase are counted. 
The default is 999. Each error me..sage type is counted independently of the others. For 
example, in the default situation, the user may have 998 warning messages and 998 syntax 
errors and the compilation will not abort. 

•m unit 

Treat "unit" as a main program. After all files named in the input specification have been 


Sun Ada 1.2 


Last change: 15 February 1988 


1 






A1)A( 1 I 


rsLii c;ommam)s 


\1) \ M ) 


compiled, the Ada binder*and native linker are invoked. An executable Hie named unti is 
left in the current directory. If the main unit has already been compiled, it does not have 
to be in the input file(s). However, it must be present in the current working sublibrary. 
If the -m option is used, appropriate binder'linker options ('m. -b, -T. •?, -p) are passed 
to the binder/linker (see a/d(l)). 

•V Be verbose. Announce each phase as it is entered. 

Output Control Options: 

-e Only report errors; do not produce any objects. This option causes only the front end to 
be executed. The front end detects ail syntax errors and most semantic errors in the Ada 
source code. Some errors, however, can be detected only by the middle pass and code 
generator such errors will not be detected when the -e option is specified. Ejcamples of 
such errors are the those involving the legality of specific representation specifications and 
violation of code generator capacity limitations. This option is meaningless when used 
with 'k, -d. *0. and -x, since each of the latter options requires the production of code 
generated after front end processing. 

-k Keep the intermediate code (High Form and Low Form) for unit bodies in the library. By 
default, the intermediate code for bodies is deleted from the library after code generation 
to minimise library size. The intermediate code is used by the Ada Cross-Referencer (see 
azr(l)) and the Source-Level Debugger (see adbpil) and the -d option of the ada 
command) and operated on by the Global Optimizer (see aopZ(l) and the -0 option of the 
ada command). The -k option must therefore be used if any of these three programs are to 
be used for any unit in the current source file. (An exception is that -k need not be used 
when the -d option is used, since use of -d automatically sets -k.) 

•d Provide for debugging. This option causes the code generator to save information needed 
by the Ada debugger, adbf, in the .Ada program library This information is used for 
mapping between source and object code locations, and for locating data objects. The -d 
option also causes some additional information to be output in object modules. However, 
there is no impact on generated code per se. Use of -d automatically sets the -k option. 

•O key Optimize code for each unit being compiled. The optimizer optimizes each unit separately 
as it is being compiled and does not make cross-unit optimizations. The argument to the 
-O option, key, must be present and must immediately follow the option. This argument 
provides details about how the uniu are to be compiled. For example, one of the key 
arguments indicates whether subprograms being optimized may be called from parallel 
tasks. See aopt(l) for information about acceptable key values. 

Two other options may be used in eonjunetion with -O: 

•G Generate a call graph for the unii(s| being optimized. Refer to aoptfl/ for more 
information. Note: in the Sun Ada User Guide, a discussion on the use of the -G 
option with ada is deferred to the Global Optimizer chapter. 

•I file Inline the subprograms listed in "file". Refer to aoptfl} for more information. 
Note; in the Sun Ada User Guide, a discussion on the use of the -1 option with 
ada is deferred to the Global Optimizer chapter. 

-X Generate profiler information and put it in the object module. Profiler information 
includes execution timing and subprogram call information. If code is compiled with the 
•X option, that option must also be used with the aid command when the program is 
bound and linked (see aid{l)). 

•a Use software floating-point instead of the default MCflflSfll hardware floating-point 


Sun Ada 1.2 


Last change: 15 February 1958 


2 












AUAdl 


I SEK COVIMANDS 


AD \( I) 


support. 

Luting Control Options: 

-L Output a source listing interspersed with error information to sourceftle.l, where 
"sourcefile" is the name of the user-supplied source file without the .Ada extension. If an 
input-list file is to be piocessed, a listing file i.s generated for each source file in the input 
list. Each resulting listing file has the the same name as the source file, except it has an 
'M" extension appended to tt. For example, when this option is used with an input list 
that contains 10 source file names. 10 listing files are generated as a result of the 
compilation. If the -F option is used, the listing will not be interspersed. Instead, errors 
will follow all the source lines. 

• F Oo not intersperse errors in source listing; put them after all source lines. This option is 
used only with the -L option. 

•C n Provide n source lines as context with error messages. The default is 1, which is the 
erroneous line itself. Context lines are placed before and after the error line in the error 
message. 

-S Send a source/assembly listing to unit.s. where "unit" is the name of the unit in the user- 
supplied source file. If an input-list file is specified, a listing file is generated for each 
source file in the input-list file. For example, when this option is used with an input-list 
file that contains 10 source file names, 10 listing files are generated as a result of the 
compilation. 

SEE ALSO 

acnip(l), *ep{l). ae»(l), *ld(l), als(l), aopt(l), arec(l). arel(l), ann(l), 

asd(l), axr(l) 


Sun Ada 1.2 


Last change: IS February I9S8 


3 











ALD(1) 


( SKH ( ()M\t \.\r)s 


I i 


NAME 

aid - Sun Ada binder/linker 
SYNOPSIS 

aid I'l libname I -t lemplibi >V vsm siiei -T ni -P nptionsi '*p objects! 

Uo namej ^IbsyKi mainunit 

DESCRIPTION 

The aid command calls the Ada binder and linker. This command outputs the executable program 
to file matnunit. The binder and linker are executed by default. The user may exclude the linker 
from the run. 

A library may be specified by using the default library file, libist.alb. specifying a library file with 
the •! option, or specifying a temporary library list on the command line, by using the >1 option. 

Option pass-through to the native linker is provided. 

The binder puts an elaboration code file, mainunit.obm, in the working sublibrary directory. 

If the native linker is not invoked, a link script hie. mainunit.Ink. is put in the current directory. 
This script hie may may also be modihed by the user so that other object code or special linker 
options are used. 

OPTIONS , 

Library Spaeifieation Optiofu: 

•1 libname 

Use libname as the hie containing the sublibrary list. The sublibrary list is the ordered set 
of subiibrahes that collectively dehne the .Ada Program Library. If this option is omitted, 
and the -t option is not used, the default libist-aib is assumed to be the library. -I may not 
be used with -t. 

-t tempiib 

Use tempiib as a temporary subiibrary list for this process. The -I option must not be 
used when the -t option is given. The default subiibrary list hie is not read. The hrst 
sublibrary in the list is the working subiibrary. Tempiib may be specihed as 
"sublibl.subiibl..." or as "subiibl subiib2 ...'*. -i rr xy not be used with -1. 

-V tism size 

Set the site of the Virtual Space Manager's buffer space to vsm_size Kbytes. The default 
vsm size for the command is 2000 Kbytes. 

The optimal value for vsm size depends on the amount of system memory available and 
the number of concurrent users. For a full description see the Sun Ada U*er Guide. 

Other Optiona: 

-b Run binder phase only. Elaboration code and a link script are produced. The link script 
is put in the hie mainunit.lnk. 

•s Use software floating-point support. By default. MC68881 hardware-floating point 
support is used. 

•o name 

Use "name" instead of "mainunit" as the name of the executable flie. 

•P options 

Pass options to the native linker, options must be a quoted string. This option is provided 
as an escape to allow use of all native linker options without producing and editing a link 
script. .An example is; aid -P -t -r’ . Refer to the 5un .4da C/ser Guide for more 


Sun Ada 1.2 


Last change: 17 February 1988 


i 













ALD(l) 


I SliK COMMAM)'' 


ALDI I ) 


information. 

-p objteU 

Pass object* to the native linker, object* must be a quoted string; it may include archive 
files. This option is typically used with pragma Interface and the -I native linker option. 
object* may be specified as "objectl object2 ...". An example is: aid -p 'eostne.o 
'u*r,'lib libm.a'. Refer to the Sun Ada I'ter Guide for more information. 

Note; (he -p and -P options are used to provide compatibility with the System V Interface 
Definition while dealing with the non>System V compatible Id command (•lx). 

•T n Trace back depth of exception report. When a run>time exception occurs, the name of the 
unit and the line number of where the exception occurred are displayed with a call chain 
history. The number n, which is 15 by default, defines the levels of call chain history. 

•V Be verbose. Announce each phase as it is entered. 

-X Link in the execution profiler's run-time support routines. During program execution, 
these run-time support routines record the profiling data in memory, then write the data 
to files as the program terminates. Units to be profiled must be compiled with the -x 
option of the ada command. 

BUGS AND KNOWN LIMITATIONS 

The body of the main program must reside in the current working sublibrary. 

SSE ALSO 

ad«(l) 


Sun Ada 1.2 


Last change: 17 February 1988 


2 




