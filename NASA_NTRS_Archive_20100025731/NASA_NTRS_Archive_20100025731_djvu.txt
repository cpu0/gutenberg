Software 


Program Synthesizes UML 
Sequence Diagrams 

A computer program called “Ration- 
al Sequence” generates Universal 
Modeling Language (UML) sequence 
diagrams of a target Java program run- 
ning on a Java virtual machine (JVM). 
Rational Sequence thereby performs a 
reverse engineering function that aids 
in the design documentation of the 
target Java program. Whereas previ- 
ously, the construction of sequence di- 
agrams was a tedious manual process, 
Rational Sequence generates UML se- 
quence diagrams automatically from 
the running Java code. Moreover, 
there is no need to insert instrumenta- 
tion code into the target Java program. 
Rational Sequence employs the Java 
Native Interface application program- 
ming interface to create a software 
profiler that plugs into the JVM. Once 
the user starts the target Java program, 
Rational Sequence acts as a nonintru- 
sive observer, generating UML dia- 
grams representing the observed activ- 
ity. Every method call, object 
instantiation, or thread event of the 
target Java program is tracked by the 
profiler. Once the Java program has 
ended, the profiler generates a UML 
model that contains packages, classes, 
and all method calls observed during 
the execution of the target program. 
The user can control the way the UML 
model is generated by specifying pack- 
ages and/or classes to be included in 
the diagrams. 

This program was written by Matthew R. 
Barry and Richard N. Osborne of United 
Space Alliance for Johnson Space Center. 
For further information, contact the Johnson 
Technology Transfer Office at (281) 483- 
3809. 

MSC-23656 


@ Aspect-Oriented 

Subprogram Synthesizes 
UML Sequence Diagrams 

The Rational Sequence computer 
program described in the immediately 
preceding article includes a subpro- 
gram that utilizes the capability for as- 
pect-oriented programming when that 
capability is present. This subprogram 
is denoted the Rational Sequence (As- 


pectj) component because it uses As- 
pect), which is an extension of the Java 
programming language that intro- 
duces aspect-oriented programming 
techniques into the language. The Ra- 
tional Sequence (AspectJ) component 
is compiled with a target Java applica- 
tion program on an AspectJ compiler. 
The user then starts the Java applica- 
tion program. Thereafter, the Rational 
Sequence (AspectJ) component pub- 
lishes every visible method call to a 
Universal Modeling Language (UML) 
sequence diagram. When the Java ap- 
plication program ends, a sequencer 
proceeds to generate a UML model 
that contains packages, classes, and all 
method calls that occurred during the 
execution of the program. The user 
can control the way the UML model is 
generated by specifying, via the aspect 
source code, packages and/or classes 
to be included in the diagrams. Like 
the rest of Rational Sequence, the As- 
pectJ component complies with the 
UML specification. 

This program was written by Matthew R. 
Barry and Richard N. Osborne of United 
Space Alliance for Johnson Space Center. 
For further information, contact the Johnson 
Technology Transfer Office at (281) 483- 
3809. 

MSC-23655 


Updated Computational 
Model of Cosmic Rays 
Near Earth 

An updated computational model of 
the galactic-cosmic-ray (GCR) environ- 
ment in the vicinity of the Earth, 
Earth’s Moon, and Mars has been de- 
veloped, and updated software has 
been developed to implement the up- 
dated model. The GCR model and 
software in their original forms, devel- 
oped during the early 1990s, were 
based on balloon and satellite data 
from 1954 to 1992. This model ac- 
counts for solar modulation of the cos- 
mic-ray contribution for each element 
from hydrogen through iron by com- 
putationally propagating the local in- 
terplanetary spectrum of each element 
through the heliosphere. The propa- 
gation is effected by solving the 
Fokker-Planck diffusion, convection, 
energy-loss boundary-value problem. 


Since August 1997, the Advanced 
Composition Explorer NASA satellite 
has provided new data on GCR energy 
spectra. These new data were used to 
update the original model and greatly 
improve the accuracy of prediction of 
interplanetary GCR. The updated soft- 
ware was also simplified significantly, 
relative to the original software. The 
updated model and software are ex- 
pected to provide highly accurate 
GCR-environment data for use by in- 
terplanetary-mission planners in plan- 
ning for protecting astronauts against 
radiation and ensuring radiation hard- 
ness of electronic equipment. 

This program was written by Patrick M. 
O’Neill o/Johnson Space Center. For fur- 
ther information, contact the Johnson Tech- 
nology Transfer Office at (281) 483-3809. 
MSC-23891 


Software for Alignment of 
Segments of a Telescope 
Mirror 

The Segment Alignment Mainten- 
ance System (SAMS) software is de- 
signed to maintain the overall focus 
and figure of the large segmented pri- 
mary mirror of the Hobby-Eberly Tele- 
scope. This software reads measure- 
ments made by sensors attached to the 
segments of the primary mirror and 
from these measurements computes 
optimal control values to send to actu- 
ators that move the mirror segments. 
The software also acts as a logger for 
the collected data, a server from 
which the hardware of the control 
computer can acquire control infor- 
mation and other computers can col- 
lect data, and a monitoring and diag- 
nostic system. The software provides a 
graphical user interface through 
which human operators can exert con- 
trol. The software supports four 
modes of operation: 

• Operate — The server acquires the sen- 
sory data and processes them into 
commands for the actuators. 

• Calibrate — Calibration tests are per- 
formed on the edge sensors and the re- 
lationships between actuator com- 
mands and sensor responses are 
quantified. 

• Standby — The server is initialized in 
standby mode, from which it can 


NASA Tech Briefs, May 2006 


15 


